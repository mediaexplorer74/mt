// Decompiled with JetBrains decompiler
// Type: Terraria.WorldGen
// Assembly: Terraria, Version=1.3.5.3, Culture=neutral, PublicKeyToken=null
// MVID: 68659D26-2BE6-448F-8663-74FA559E6F08
// Assembly location: H:\Steam\steamapps\common\Terraria\Terraria.exe

using Microsoft.Xna.Framework;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Biomes;
using Terraria.GameContent.Events;
using Terraria.GameContent.Generation;
using Terraria.GameContent.Tile_Entities;
using Terraria.Graphics.Capture;
using Terraria.ID;
using Terraria.IO;
using Terraria.Localization;
using Terraria.Map;
using Terraria.ObjectData;
using Terraria.Utilities;
using Terraria.World.Generation;

namespace Terraria
{
  public class WorldGen
  {
    public static TownRoomManager TownManager = new TownRoomManager();
    public static int tileReframeCount = 0;
    public static bool noMapUpdate = false;
    public static int[] mossType = new int[3];
    public static int c = 0;
    public static int m = 0;
    public static int a = 0;
    public static int co = 0;
    public static int ir = 0;
    public static int si = 0;
    public static int go = 0;
    public static int copperBar = 20;
    public static int ironBar = 22;
    public static int silverBar = 21;
    public static int goldBar = 19;
    public static ushort CopperTierOre = 7;
    public static ushort IronTierOre = 6;
    public static ushort SilverTierOre = 9;
    public static ushort GoldTierOre = 8;
    public static int treeBG = 0;
    public static int corruptBG = 0;
    public static int jungleBG = 0;
    public static int snowBG = 0;
    public static int hallowBG = 0;
    public static int crimsonBG = 0;
    public static int desertBG = 0;
    public static int oceanBG = 0;
    public static int oreTier1 = -1;
    public static int oreTier2 = -1;
    public static int oreTier3 = -1;
    public static bool crimson = false;
    public static byte mossTile = 179;
    public static byte mossWall = 54;
    public static bool[] gem = new bool[6];
    public static int[] tileCounts = new int[470];
    public static int totalEvil = 0;
    public static int totalBlood = 0;
    public static int totalGood = 0;
    public static int totalSolid = 0;
    public static int totalEvil2 = 0;
    public static int totalBlood2 = 0;
    public static int totalGood2 = 0;
    public static int totalSolid2 = 0;
    public static byte tEvil = 0;
    public static byte tBlood = 0;
    public static byte tGood = 0;
    public static int totalX = 0;
    public static int totalD = 0;
    public static bool IsGeneratingHardMode = false;
    private static Vector2[] heartPos = new Vector2[100];
    private static int heartCount = 0;
    public static bool noTileActions = false;
    public static bool spawnEye = false;
    public static int spawnHardBoss = 0;
    public static int numLarva = 0;
    public static int[] larvaX = new int[100];
    public static int[] larvaY = new int[100];
    public static bool gen = false;
    public static bool shadowOrbSmashed = false;
    public static int shadowOrbCount = 0;
    public static int altarCount = 0;
    public static bool spawnMeteor = false;
    public static bool loadFailed = false;
    public static bool loadSuccess = false;
    public static bool worldCleared = false;
    public static bool worldBackup = false;
    public static bool loadBackup = false;
    private static int lastMaxTilesX = 0;
    private static int lastMaxTilesY = 0;
    public static bool saveLock = false;
    private static bool mergeUp = false;
    private static bool mergeDown = false;
    private static bool mergeLeft = false;
    private static bool mergeRight = false;
    private static bool stopDrops = false;
    private static bool mudWall = false;
    private static int grassSpread = 0;
    public static bool noLiquidCheck = false;
    [ThreadStatic]
    public static int _genRandSeed = -2;
    public static string statusText = "";
    public static bool destroyObject = false;
    public static int spawnDelay = 0;
    public static int prioritizedTownNPC = 0;
    public static int numTileCount = 0;
    public static int maxTileCount = 3500;
    public static int maxWallOut2 = 5000;
    public static int[] countX = new int[WorldGen.maxTileCount];
    public static int[] countY = new int[WorldGen.maxTileCount];
    public static int lavaCount = 0;
    public static int iceCount = 0;
    public static int rockCount = 0;
    public static int maxRoomTiles = 750;
    public static int[] roomX = new int[WorldGen.maxRoomTiles];
    public static int[] roomY = new int[WorldGen.maxRoomTiles];
    public static int[] roomCeilingX = new int[WorldGen.maxRoomTiles];
    public static int[] roomCeilingY = new int[WorldGen.maxRoomTiles];
    public static bool[] houseTile = new bool[470];
    public static int bestX = 0;
    public static int bestY = 0;
    public static int hiScore = 0;
    public static Vector2 lastDungeonHall = Vector2.get_Zero();
    public static int maxDRooms = 100;
    public static int numDRooms = 0;
    public static int[] dRoomX = new int[WorldGen.maxDRooms];
    public static int[] dRoomY = new int[WorldGen.maxDRooms];
    public static int[] dRoomSize = new int[WorldGen.maxDRooms];
    private static bool[] dRoomTreasure = new bool[WorldGen.maxDRooms];
    private static int[] dRoomL = new int[WorldGen.maxDRooms];
    private static int[] dRoomR = new int[WorldGen.maxDRooms];
    private static int[] dRoomT = new int[WorldGen.maxDRooms];
    private static int[] dRoomB = new int[WorldGen.maxDRooms];
    private static int[] DDoorX = new int[300];
    private static int[] DDoorY = new int[300];
    private static int[] DDoorPos = new int[300];
    private static int[] DPlatX = new int[300];
    private static int[] DPlatY = new int[300];
    private static int JungleItemCount = 0;
    private static int[] JChestX = new int[100];
    private static int[] JChestY = new int[100];
    private static int numJChests = 0;
    public static int dEnteranceX = 0;
    public static bool dSurface = false;
    private static int numIslandHouses = 0;
    private static int houseCount = 0;
    private static bool[] skyLake = new bool[30];
    private static int[] fihX = new int[30];
    private static int[] fihY = new int[30];
    private static int numMCaves = 0;
    private static int[] mCaveX = new int[30];
    private static int[] mCaveY = new int[30];
    private static int JungleX = 0;
    private static int hellChest = 0;
    private static int[] hellChestItem = new int[5];
    public static List<int> StatuesWithTraps = new List<int>((IEnumerable<int>) new int[4]
    {
      4,
      7,
      10,
      18
    });
    public static Rectangle UndergroundDesertLocation = Rectangle.get_Empty();
    private static bool currentlyTryingToUseAlternateHousingSpot = false;
    public static TownNPCRoomCheckFailureReason roomCheckFailureReason = TownNPCRoomCheckFailureReason.None;
    private static int[,] trapDiag = new int[4, 2];
    private static int tileCounterNum = 0;
    private static int tileCounterMax = 20;
    private static int[] tileCounterX = new int[WorldGen.tileCounterMax];
    private static int[] tileCounterY = new int[WorldGen.tileCounterMax];
    public static int WorldGenParam_Evil = -1;
    private static int lAltarX;
    private static int lAltarY;
    public static double worldSurfaceLow;
    public static int tLeft;
    public static int tRight;
    public static int tTop;
    public static int tBottom;
    public static int tRooms;
    public static int lavaLine;
    public static int waterLine;
    [ThreadStatic]
    public static UnifiedRandom _genRand;
    public static int _lastSeed;
    public static int numRoomTiles;
    public static int roomCeilingsCount;
    public static int roomX1;
    public static int roomX2;
    public static int roomY1;
    public static int roomY2;
    public static bool canSpawn;
    public static int dungeonX;
    public static int dungeonY;
    private static int numDDoors;
    private static int numDPlats;
    private static double dxStrength1;
    private static double dyStrength1;
    private static double dxStrength2;
    private static double dyStrength2;
    private static int dMinX;
    private static int dMaxX;
    private static int dMinY;
    private static int dMaxY;
    private static bool roomTorch;
    private static bool roomDoor;
    private static bool roomChair;
    private static bool roomTable;
    private static bool roomOccupied;
    private static bool roomEvil;
    public static Point16[] statueList;
    private static WorldGenerator _generator;

    public static UnifiedRandom genRand
    {
      get
      {
        if (WorldGen._lastSeed != WorldGen._genRandSeed)
        {
          WorldGen._genRand = new UnifiedRandom(WorldGen._lastSeed);
          WorldGen._genRandSeed = WorldGen._lastSeed;
        }
        if (WorldGen._genRand == null)
        {
          WorldGen._genRand = new UnifiedRandom(WorldGen._lastSeed);
          WorldGen._genRandSeed = WorldGen._lastSeed;
        }
        return WorldGen._genRand;
      }
    }

    public static void SetupStatueList()
    {
      List<Point16> point16List = new List<Point16>();
      for (int Y = 0; Y < 44; ++Y)
        point16List.Add(new Point16(105, Y));
      point16List[34] = new Point16(349, 0);
      point16List[43] = new Point16(105, 50);
      point16List.Add(new Point16(105, 63));
      point16List.Add(new Point16(105, 64));
      point16List.Add(new Point16(105, 65));
      point16List.Add(new Point16(105, 66));
      point16List.Add(new Point16(105, 68));
      point16List.Add(new Point16(105, 69));
      point16List.Add(new Point16(105, 70));
      point16List.Add(new Point16(105, 71));
      point16List.Add(new Point16(105, 72));
      point16List.Add(new Point16(105, 73));
      point16List.Add(new Point16(105, 75));
      if (Main.expertMode)
      {
        point16List.Add(new Point16(105, 67));
        point16List.Add(new Point16(105, 74));
      }
      WorldGen.statueList = point16List.ToArray();
    }

    public static void PlaceStatueTrap(int x, int y)
    {
      for (int index1 = -10; index1 <= 10; ++index1)
      {
        for (int index2 = -10; index2 <= 10; ++index2)
        {
          Tile testTile = Main.tile[x + index1, y + index2 + 1];
          Tile tile = Main.tile[x + index1, y + index2];
          if (!tile.active() && WorldGen.SolidTile2(testTile))
          {
            WorldGen.PlaceTile(x + index1, y + index2, 135, true, false, -1, 0);
            if (tile.active() && (int) tile.type == 135)
            {
              WorldUtils.WireLine(new Point(x, y), new Point(x + index1, y + index2));
              return;
            }
          }
        }
      }
    }

    public static bool MoveTownNPC(int x, int y, int n)
    {
      if (!WorldGen.StartRoomCheck(x, y))
      {
        string textValue = Lang.inter[40].Value;
        switch (WorldGen.roomCheckFailureReason)
        {
          case TownNPCRoomCheckFailureReason.TooCloseToWorldEdge:
            textValue = Language.GetTextValue("TownNPCHousingFailureReasons.TooCloseToWorldEdge");
            break;
          case TownNPCRoomCheckFailureReason.RoomIsTooBig:
            textValue = Language.GetTextValue("TownNPCHousingFailureReasons.RoomIsTooBig");
            break;
          case TownNPCRoomCheckFailureReason.RoomIsTooSmall:
            textValue = Language.GetTextValue("TownNPCHousingFailureReasons.RoomIsTooSmall");
            break;
          case TownNPCRoomCheckFailureReason.HoleInWallIsTooBig:
            textValue = Language.GetTextValue("TownNPCHousingFailureReasons.HoleInWallIsTooBig");
            break;
          case TownNPCRoomCheckFailureReason.RoomCheckStartedInASolidTile:
            textValue = Language.GetTextValue("TownNPCHousingFailureReasons.RoomCheckStartedInASolidTile");
            break;
        }
        Main.NewText(textValue, byte.MaxValue, (byte) 240, (byte) 20, false);
        return false;
      }
      if (!WorldGen.RoomNeeds(WorldGen.prioritizedTownNPC))
      {
        int index = 0;
        int length = (WorldGen.roomTorch ? 0 : 1) + (WorldGen.roomDoor ? 0 : 1) + (WorldGen.roomTable ? 0 : 1) + (WorldGen.roomChair ? 0 : 1);
        string[] strArray = new string[length];
        if (!WorldGen.roomTorch)
        {
          strArray[index] = Language.GetTextValue("Game.HouseLightSource");
          ++index;
        }
        if (!WorldGen.roomDoor)
        {
          strArray[index] = Language.GetTextValue("Game.HouseDoor");
          ++index;
        }
        if (!WorldGen.roomTable)
        {
          strArray[index] = Language.GetTextValue("Game.HouseTable");
          ++index;
        }
        if (!WorldGen.roomChair)
        {
          strArray[index] = Language.GetTextValue("Game.HouseChair");
          int num = index + 1;
        }
        Main.NewText(Language.GetTextValue("Game.HouseMissing_" + (object) length, (object[]) strArray), byte.MaxValue, (byte) 240, (byte) 20, false);
        return false;
      }
      WorldGen.ScoreRoom(-1);
      if (WorldGen.hiScore <= 0)
      {
        if (WorldGen.roomOccupied)
          Main.NewText(Lang.inter[41].Value, byte.MaxValue, (byte) 240, (byte) 20, false);
        else if (WorldGen.roomEvil)
          Main.NewText(Lang.inter[42].Value, byte.MaxValue, (byte) 240, (byte) 20, false);
        else
          Main.NewText(Lang.inter[40].Value, byte.MaxValue, (byte) 240, (byte) 20, false);
        return false;
      }
      if (n <= 0 || WorldGen.CheckSpecialTownNPCSpawningConditions(Main.npc[n].type))
        return true;
      Main.NewText(Lang.inter[55].Value + " " + Main.npc[n].TypeName, byte.MaxValue, (byte) 240, (byte) 20, false);
      return false;
    }

    public static void moveRoom(int x, int y, int n)
    {
      if (Main.netMode == 1)
      {
        NetMessage.SendData(60, -1, -1, (NetworkText) null, n, (float) x, (float) y, 0.0f, 0, 0, 0);
      }
      else
      {
        WorldGen.prioritizedTownNPC = Main.npc[n].type;
        Main.npc[n].homeless = true;
        int num = (int) WorldGen.SpawnTownNPC(x, y);
        WorldGen.TownManager.SetRoom(Main.npc[n].type, Main.npc[n].homeTileX, Main.npc[n].homeTileY);
      }
    }

    public static void kickOut(int n)
    {
      if (Main.netMode == 1)
      {
        NetMessage.SendData(60, -1, -1, (NetworkText) null, n, 0.0f, 0.0f, 1f, 0, 0, 0);
      }
      else
      {
        Main.npc[n].homeless = true;
        WorldGen.TownManager.KickOut(Main.npc[n]);
      }
    }

    public static bool IsThereASpawnablePrioritizedTownNPC(int x, int y)
    {
      if (WorldGen.CheckSpecialTownNPCSpawningConditions(WorldGen.prioritizedTownNPC) && NPC.AnyNPCs(WorldGen.prioritizedTownNPC))
        return true;
      int occupation = WorldGen.TownManager.FindOccupation(x, y);
      if (occupation != -1 && Main.townNPCCanSpawn[occupation] && (!NPC.AnyNPCs(occupation) && WorldGen.CheckSpecialTownNPCSpawningConditions(occupation)))
      {
        WorldGen.prioritizedTownNPC = occupation;
        return true;
      }
      int num = -1;
      for (int index = 0; index < 580; ++index)
      {
        if (Main.townNPCCanSpawn[index] && WorldGen.CheckSpecialTownNPCSpawningConditions(index))
        {
          if (NPC.AnyNPCs(index))
            Main.townNPCCanSpawn[index] = false;
          else if (WorldGen.TownManager.HasRoomQuick(index))
          {
            if (num == -1)
              num = index;
          }
          else
          {
            WorldGen.prioritizedTownNPC = index;
            return true;
          }
        }
      }
      if (num == -1)
        return false;
      WorldGen.prioritizedTownNPC = num;
      return true;
    }

    public static bool CheckSpecialTownNPCSpawningConditions(int type)
    {
      if (type != 160)
        return true;
      if ((double) WorldGen.roomY2 > Main.worldSurface)
        return false;
      int num1 = 0;
      int num2 = WorldGen.roomX1 - Main.zoneX / 2 / 16 - 1 - Lighting.offScreenTiles;
      int num3 = WorldGen.roomX2 + Main.zoneX / 2 / 16 + 1 + Lighting.offScreenTiles;
      int num4 = WorldGen.roomY1 - Main.zoneY / 2 / 16 - 1 - Lighting.offScreenTiles;
      int num5 = WorldGen.roomY2 + Main.zoneY / 2 / 16 + 1 + Lighting.offScreenTiles;
      if (num2 < 0)
        num2 = 0;
      if (num3 >= Main.maxTilesX)
        num3 = Main.maxTilesX - 1;
      if (num4 < 0)
        num4 = 0;
      if (num5 > Main.maxTilesX)
        num5 = Main.maxTilesX;
      for (int index1 = num2 + 1; index1 < num3; ++index1)
      {
        for (int index2 = num4 + 2; index2 < num5 + 2; ++index2)
        {
          if (Main.tile[index1, index2].active() && ((int) Main.tile[index1, index2].type == 70 || (int) Main.tile[index1, index2].type == 71 || (int) Main.tile[index1, index2].type == 72))
            ++num1;
        }
      }
      return num1 >= 100;
    }

    public static void UnspawnTravelNPC()
    {
      int number = -1;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].type == 368)
        {
          number = index;
          break;
        }
      }
      if (number < 0)
        return;
      int num1 = (int) (Main.npc[number].Center.X / 16.0);
      int num2 = (int) (Main.npc[number].Center.Y / 16.0);
      bool flag = true;
      Rectangle rectangle1;
      // ISSUE: explicit reference operation
      ((Rectangle) @rectangle1).\u002Ector(num1 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, num2 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        if (Main.player[index].active)
        {
          Rectangle rectangle2;
          // ISSUE: explicit reference operation
          ((Rectangle) @rectangle2).\u002Ector((int) Main.player[index].position.X, (int) Main.player[index].position.Y, Main.player[index].width, Main.player[index].height);
          // ISSUE: explicit reference operation
          if (((Rectangle) @rectangle2).Intersects(rectangle1))
          {
            flag = false;
            break;
          }
        }
      }
      if (!flag)
        return;
      string fullName = Main.npc[number].FullName;
      if (Main.netMode == 0)
        Main.NewText(Lang.misc[35].Format((object) fullName), (byte) 50, (byte) 125, byte.MaxValue, false);
      else if (Main.netMode == 2)
        NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[35].Key, (object) Main.npc[number].GetFullNetName()), new Color(50, 125, (int) byte.MaxValue), -1);
      Main.npc[number].active = false;
      Main.npc[number].netSkip = -1;
      Main.npc[number].life = 0;
      NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
    }

    public static void SpawnTravelNPC()
    {
      if (Main.eclipse || !Main.dayTime || Main.invasionType > 0 && Main.invasionDelay == 0 && Main.invasionSize > 0)
        return;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].type == 368)
          return;
      }
      Chest.SetupTravelShop();
      NetMessage.SendTravelShop(-1);
      int[] numArray = new int[200];
      int maxValue = 0;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].townNPC && (Main.npc[index].type != 37 && !Main.npc[index].homeless))
        {
          numArray[maxValue] = index;
          ++maxValue;
        }
      }
      if (maxValue == 0)
        return;
      int index1 = numArray[Main.rand.Next(maxValue)];
      WorldGen.bestX = Main.npc[index1].homeTileX;
      WorldGen.bestY = Main.npc[index1].homeTileY;
      int minValue = WorldGen.bestX;
      int num1 = WorldGen.bestX;
      int bestY = WorldGen.bestY;
      for (int bestX = WorldGen.bestX; bestX > WorldGen.bestX - 10 && (WorldGen.SolidTile(bestX, bestY) || Main.tileSolidTop[(int) Main.tile[bestX, bestY].type]) && (!Main.tile[bestX, bestY - 1].active() || !Main.tileSolid[(int) Main.tile[bestX, bestY - 1].type] || Main.tileSolidTop[(int) Main.tile[bestX, bestY - 1].type]) && ((!Main.tile[bestX, bestY - 2].active() || !Main.tileSolid[(int) Main.tile[bestX, bestY - 2].type] || Main.tileSolidTop[(int) Main.tile[bestX, bestY - 2].type]) && (!Main.tile[bestX, bestY - 3].active() || !Main.tileSolid[(int) Main.tile[bestX, bestY - 3].type] || Main.tileSolidTop[(int) Main.tile[bestX, bestY - 3].type])); --bestX)
        minValue = bestX;
      for (int bestX = WorldGen.bestX; bestX < WorldGen.bestX + 10 && (WorldGen.SolidTile(bestX, bestY) || Main.tileSolidTop[(int) Main.tile[bestX, bestY].type]) && (!Main.tile[bestX, bestY - 1].active() || !Main.tileSolid[(int) Main.tile[bestX, bestY - 1].type] || Main.tileSolidTop[(int) Main.tile[bestX, bestY - 1].type]) && ((!Main.tile[bestX, bestY - 2].active() || !Main.tileSolid[(int) Main.tile[bestX, bestY - 2].type] || Main.tileSolidTop[(int) Main.tile[bestX, bestY - 2].type]) && (!Main.tile[bestX, bestY - 3].active() || !Main.tileSolid[(int) Main.tile[bestX, bestY - 3].type] || Main.tileSolidTop[(int) Main.tile[bestX, bestY - 3].type])); ++bestX)
        num1 = bestX;
      for (int index2 = 0; index2 < 30; ++index2)
      {
        int num2 = Main.rand.Next(minValue, num1 + 1);
        if (index2 < 20)
        {
          if (num2 < WorldGen.bestX - 1 || num2 > WorldGen.bestX + 1)
          {
            WorldGen.bestX = num2;
            break;
          }
        }
        else if (num2 != WorldGen.bestX)
        {
          WorldGen.bestX = num2;
          break;
        }
      }
      int index3 = WorldGen.bestX;
      int index4 = WorldGen.bestY;
      bool flag = false;
      if (!flag && (double) index4 <= Main.worldSurface)
      {
        for (int index2 = 20; index2 < 500; ++index2)
        {
          for (int index5 = 0; index5 < 2; ++index5)
          {
            index3 = index5 != 0 ? WorldGen.bestX - index2 * 2 : WorldGen.bestX + index2 * 2;
            if (index3 > 10 && index3 < Main.maxTilesX - 10)
            {
              int num2 = WorldGen.bestY - index2;
              double num3 = (double) (WorldGen.bestY + index2);
              if (num2 < 10)
                num2 = 10;
              if (num3 > Main.worldSurface)
                num3 = Main.worldSurface;
              for (int index6 = num2; (double) index6 < num3; ++index6)
              {
                index4 = index6;
                if (Main.tile[index3, index4].nactive() && Main.tileSolid[(int) Main.tile[index3, index4].type])
                {
                  if ((int) Main.tile[index3, index4 - 3].liquid == 0 && (int) Main.tile[index3, index4 - 2].liquid == 0 && ((int) Main.tile[index3, index4 - 1].liquid == 0 && !Collision.SolidTiles(index3 - 1, index3 + 1, index4 - 3, index4 - 1)))
                  {
                    flag = true;
                    Rectangle rectangle1;
                    // ISSUE: explicit reference operation
                    ((Rectangle) @rectangle1).\u002Ector(index3 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, index4 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                    for (int index7 = 0; index7 < (int) byte.MaxValue; ++index7)
                    {
                      if (Main.player[index7].active)
                      {
                        Rectangle rectangle2;
                        // ISSUE: explicit reference operation
                        ((Rectangle) @rectangle2).\u002Ector((int) Main.player[index7].position.X, (int) Main.player[index7].position.Y, Main.player[index7].width, Main.player[index7].height);
                        // ISSUE: explicit reference operation
                        if (((Rectangle) @rectangle2).Intersects(rectangle1))
                        {
                          flag = false;
                          break;
                        }
                      }
                    }
                    break;
                  }
                  break;
                }
              }
            }
            if (flag)
              break;
          }
          if (flag)
            break;
        }
      }
      int index8 = NPC.NewNPC(index3 * 16, index4 * 16, 368, 1, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
      Main.npc[index8].homeTileX = WorldGen.bestX;
      Main.npc[index8].homeTileY = WorldGen.bestY;
      Main.npc[index8].homeless = true;
      if (index3 < WorldGen.bestX)
        Main.npc[index8].direction = 1;
      else if (index3 > WorldGen.bestX)
        Main.npc[index8].direction = -1;
      Main.npc[index8].netUpdate = true;
      string fullName = Main.npc[index8].FullName;
      if (Main.netMode == 0)
      {
        Main.NewText(Language.GetTextValue("Announcement.HasArrived", (object) fullName), (byte) 50, (byte) 125, byte.MaxValue, false);
      }
      else
      {
        if (Main.netMode != 2)
          return;
        NetMessage.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasArrived", (object) Main.npc[index8].GetFullNetName()), new Color(50, 125, (int) byte.MaxValue), -1);
      }
    }

    public static TownNPCSpawnResult SpawnTownNPC(int x, int y)
    {
      if (Main.wallHouse[(int) Main.tile[x, y].wall])
        WorldGen.canSpawn = true;
      if (!WorldGen.canSpawn || !WorldGen.StartRoomCheck(x, y) || !WorldGen.RoomNeeds(WorldGen.prioritizedTownNPC))
        return TownNPCSpawnResult.Blocked;
      WorldGen.ScoreRoom(-1);
      if (WorldGen.hiScore <= 0 || !WorldGen.IsThereASpawnablePrioritizedTownNPC(WorldGen.bestX, WorldGen.bestY))
        return TownNPCSpawnResult.Blocked;
      int index1 = -1;
      for (int index2 = 0; index2 < 200; ++index2)
      {
        if (Main.npc[index2].active && Main.npc[index2].homeless && (Main.npc[index2].type == WorldGen.prioritizedTownNPC && WorldGen.CheckSpecialTownNPCSpawningConditions(Main.npc[index2].type)))
        {
          index1 = index2;
          break;
        }
      }
      if (index1 != -1)
      {
        Main.townNPCCanSpawn[WorldGen.prioritizedTownNPC] = false;
        Main.npc[index1].homeTileX = WorldGen.bestX;
        Main.npc[index1].homeTileY = WorldGen.bestY;
        Main.npc[index1].homeless = false;
        AchievementsHelper.NotifyProgressionEvent(8);
        WorldGen.prioritizedTownNPC = 0;
        return TownNPCSpawnResult.RelocatedHomeless;
      }
      if (index1 == -1)
      {
        Point roomPosition;
        if (WorldGen.TownManager.HasRoom(WorldGen.prioritizedTownNPC, out roomPosition) && !WorldGen.currentlyTryingToUseAlternateHousingSpot)
        {
          int bestX = WorldGen.bestX;
          int bestY = WorldGen.bestY;
          WorldGen.currentlyTryingToUseAlternateHousingSpot = true;
          TownNPCSpawnResult townNpcSpawnResult = WorldGen.SpawnTownNPC((int) roomPosition.X, roomPosition.Y - 2);
          WorldGen.currentlyTryingToUseAlternateHousingSpot = false;
          WorldGen.bestX = bestX;
          WorldGen.bestY = bestY;
          if (townNpcSpawnResult == TownNPCSpawnResult.Successful)
            return townNpcSpawnResult;
        }
        int index2 = WorldGen.bestX;
        int index3 = WorldGen.bestY;
        bool flag1 = false;
        for (int index4 = 0; index4 < 200; ++index4)
        {
          NPC npc = Main.npc[index4];
          if (npc.active && npc.townNPC && (!npc.homeless && npc.homeTileX == index2) && npc.homeTileY == index3)
          {
            flag1 = true;
            break;
          }
        }
        if (flag1)
          return TownNPCSpawnResult.BlockedInfiHousing;
        bool flag2 = false;
        if (!flag2)
        {
          flag2 = true;
          Rectangle rectangle1;
          // ISSUE: explicit reference operation
          ((Rectangle) @rectangle1).\u002Ector(index2 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, index3 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
          for (int index4 = 0; index4 < (int) byte.MaxValue; ++index4)
          {
            if (Main.player[index4].active)
            {
              Rectangle rectangle2;
              // ISSUE: explicit reference operation
              ((Rectangle) @rectangle2).\u002Ector((int) Main.player[index4].position.X, (int) Main.player[index4].position.Y, Main.player[index4].width, Main.player[index4].height);
              // ISSUE: explicit reference operation
              if (((Rectangle) @rectangle2).Intersects(rectangle1))
              {
                flag2 = false;
                break;
              }
            }
          }
        }
        if (!flag2 && (double) index3 <= Main.worldSurface)
        {
          for (int index4 = 1; index4 < 500; ++index4)
          {
            for (int index5 = 0; index5 < 2; ++index5)
            {
              index2 = index5 != 0 ? WorldGen.bestX - index4 : WorldGen.bestX + index4;
              if (index2 > 10 && index2 < Main.maxTilesX - 10)
              {
                int num1 = WorldGen.bestY - index4;
                double num2 = (double) (WorldGen.bestY + index4);
                if (num1 < 10)
                  num1 = 10;
                if (num2 > Main.worldSurface)
                  num2 = Main.worldSurface;
                for (int index6 = num1; (double) index6 < num2; ++index6)
                {
                  index3 = index6;
                  if (Main.tile[index2, index3].nactive() && Main.tileSolid[(int) Main.tile[index2, index3].type])
                  {
                    if (!Collision.SolidTiles(index2 - 1, index2 + 1, index3 - 3, index3 - 1))
                    {
                      flag2 = true;
                      Rectangle rectangle1;
                      // ISSUE: explicit reference operation
                      ((Rectangle) @rectangle1).\u002Ector(index2 * 16 + 8 - NPC.sWidth / 2 - NPC.safeRangeX, index3 * 16 + 8 - NPC.sHeight / 2 - NPC.safeRangeY, NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
                      for (int index7 = 0; index7 < (int) byte.MaxValue; ++index7)
                      {
                        if (Main.player[index7].active)
                        {
                          Rectangle rectangle2;
                          // ISSUE: explicit reference operation
                          ((Rectangle) @rectangle2).\u002Ector((int) Main.player[index7].position.X, (int) Main.player[index7].position.Y, Main.player[index7].width, Main.player[index7].height);
                          // ISSUE: explicit reference operation
                          if (((Rectangle) @rectangle2).Intersects(rectangle1))
                          {
                            flag2 = false;
                            break;
                          }
                        }
                      }
                      break;
                    }
                    break;
                  }
                }
              }
              if (flag2)
                break;
            }
            if (flag2)
              break;
          }
        }
        int index8 = NPC.NewNPC(index2 * 16, index3 * 16, WorldGen.prioritizedTownNPC, 1, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
        Main.townNPCCanSpawn[WorldGen.prioritizedTownNPC] = false;
        Main.npc[index8].homeTileX = WorldGen.bestX;
        Main.npc[index8].homeTileY = WorldGen.bestY;
        if (index2 < WorldGen.bestX)
          Main.npc[index8].direction = 1;
        else if (index2 > WorldGen.bestX)
          Main.npc[index8].direction = -1;
        Main.npc[index8].netUpdate = true;
        string fullName = Main.npc[index8].FullName;
        if (Main.netMode == 0)
          Main.NewText(Language.GetTextValue("Announcement.HasArrived", (object) fullName), (byte) 50, (byte) 125, byte.MaxValue, false);
        else if (Main.netMode == 2)
          NetMessage.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasArrived", (object) Main.npc[index8].GetFullNetName()), new Color(50, 125, (int) byte.MaxValue), -1);
        AchievementsHelper.NotifyProgressionEvent(8);
        if (Main.npc[index8].type == 160)
          AchievementsHelper.NotifyProgressionEvent(18);
        WorldGen.CheckAchievement_RealEstate();
        WorldGen.prioritizedTownNPC = 0;
      }
      return TownNPCSpawnResult.Successful;
    }

    private static void CheckAchievement_RealEstate()
    {
      bool[] flagArray = new bool[580];
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active && Main.npc[index].type >= 0 && Main.npc[index].type < 580)
          flagArray[Main.npc[index].type] = true;
      }
      if (!flagArray[38] || !flagArray[17] || (!flagArray[107] || !flagArray[19]) || (!flagArray[22] || !flagArray[124] || (!flagArray[228] || !flagArray[178])) || (!flagArray[18] || !flagArray[229] || (!flagArray[209] || !flagArray[54]) || (!flagArray[108] || !flagArray[160] || (!flagArray[20] || !flagArray[369]))) || (!flagArray[207] || !flagArray[227] || (!flagArray[208] || !flagArray[441]) || !flagArray[353]))
        return;
      AchievementsHelper.NotifyProgressionEvent(17);
    }

    public static bool RoomNeeds(int npcType)
    {
      WorldGen.roomChair = false;
      WorldGen.roomDoor = false;
      WorldGen.roomTable = false;
      WorldGen.roomTorch = false;
      for (int index = 0; index < TileID.Sets.RoomNeeds.CountsAsChair.Length; ++index)
      {
        if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsChair[index]])
        {
          WorldGen.roomChair = true;
          break;
        }
      }
      for (int index = 0; index < TileID.Sets.RoomNeeds.CountsAsTable.Length; ++index)
      {
        if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsTable[index]])
        {
          WorldGen.roomTable = true;
          break;
        }
      }
      for (int index = 0; index < TileID.Sets.RoomNeeds.CountsAsTorch.Length; ++index)
      {
        if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsTorch[index]])
        {
          WorldGen.roomTorch = true;
          break;
        }
      }
      for (int index = 0; index < TileID.Sets.RoomNeeds.CountsAsDoor.Length; ++index)
      {
        if (WorldGen.houseTile[TileID.Sets.RoomNeeds.CountsAsDoor[index]])
        {
          WorldGen.roomDoor = true;
          break;
        }
      }
      WorldGen.canSpawn = WorldGen.roomChair && WorldGen.roomTable && (WorldGen.roomDoor && WorldGen.roomTorch);
      return WorldGen.canSpawn;
    }

    public static void QuickFindHome(int npc)
    {
      if (Main.npc[npc].homeTileX <= 10 || Main.npc[npc].homeTileY <= 10 || (Main.npc[npc].homeTileX >= Main.maxTilesX - 10 || Main.npc[npc].homeTileY >= Main.maxTilesY))
        return;
      WorldGen.canSpawn = false;
      WorldGen.StartRoomCheck(Main.npc[npc].homeTileX, Main.npc[npc].homeTileY - 1);
      if (!WorldGen.canSpawn)
      {
        for (int x = Main.npc[npc].homeTileX - 1; x < Main.npc[npc].homeTileX + 2; ++x)
        {
          int y = Main.npc[npc].homeTileY - 1;
          while (y < Main.npc[npc].homeTileY + 2 && !WorldGen.StartRoomCheck(x, y))
            ++y;
        }
      }
      if (!WorldGen.canSpawn)
      {
        int num = 10;
        int x = Main.npc[npc].homeTileX - num;
        while (x <= Main.npc[npc].homeTileX + num)
        {
          int y = Main.npc[npc].homeTileY - num;
          while (y <= Main.npc[npc].homeTileY + num && !WorldGen.StartRoomCheck(x, y))
            y += 2;
          x += 2;
        }
      }
      if (WorldGen.canSpawn)
      {
        WorldGen.RoomNeeds(Main.npc[npc].type);
        if (WorldGen.canSpawn)
          WorldGen.ScoreRoom(npc);
        if (WorldGen.canSpawn && WorldGen.hiScore > 0)
        {
          for (int index = 0; index < 200; ++index)
          {
            if (index != npc)
            {
              NPC npc1 = Main.npc[index];
              if (npc1.active && npc1.townNPC && (!npc1.homeless && npc1.homeTileX == WorldGen.bestX) && npc1.homeTileY == WorldGen.bestY)
              {
                WorldGen.canSpawn = false;
                break;
              }
            }
          }
        }
        if (WorldGen.canSpawn && WorldGen.hiScore > 0)
        {
          Main.npc[npc].homeTileX = WorldGen.bestX;
          Main.npc[npc].homeTileY = WorldGen.bestY;
          Main.npc[npc].homeless = false;
          AchievementsHelper.NotifyProgressionEvent(8);
          WorldGen.canSpawn = false;
        }
        else
          Main.npc[npc].homeless = true;
      }
      else
        Main.npc[npc].homeless = true;
    }

    private static bool ScoreRoom_IsThisRoomOccupiedBySomeone(int ignoreNPC = -1)
    {
      for (int index1 = 0; index1 < 200; ++index1)
      {
        if (Main.npc[index1].active && Main.npc[index1].townNPC && (ignoreNPC != index1 && !Main.npc[index1].homeless))
        {
          for (int index2 = 0; index2 < WorldGen.numRoomTiles; ++index2)
          {
            if (Main.npc[index1].homeTileX == WorldGen.roomX[index2] && Main.npc[index1].homeTileY == WorldGen.roomY[index2])
            {
              bool flag = false;
              for (int index3 = 0; index3 < WorldGen.numRoomTiles; ++index3)
              {
                if (Main.npc[index1].homeTileX == WorldGen.roomX[index3] && Main.npc[index1].homeTileY - 1 == WorldGen.roomY[index3])
                {
                  flag = true;
                  break;
                }
              }
              if (flag)
                return true;
            }
          }
        }
      }
      return false;
    }

    public static void CountTileTypesInArea(int[] tileTypeCounts, int startX, int endX, int startY, int endY)
    {
      for (int index1 = startX; index1 <= endX; ++index1)
      {
        for (int index2 = startY; index2 <= endY; ++index2)
        {
          if (Main.tile[index1, index2].active())
            ++tileTypeCounts[(int) Main.tile[index1, index2].type];
        }
      }
    }

    public static int GetTileTypeCountByCategory(int[] tileTypeCounts, TileScanGroup group)
    {
      switch (group)
      {
        case TileScanGroup.None:
          return 0;
        case TileScanGroup.Corruption:
          return tileTypeCounts[23] + tileTypeCounts[24] + tileTypeCounts[25] + tileTypeCounts[32] + tileTypeCounts[112] + tileTypeCounts[163] + tileTypeCounts[400] + tileTypeCounts[398] + -5 * tileTypeCounts[27];
        case TileScanGroup.Crimson:
          return tileTypeCounts[199] + tileTypeCounts[203] + tileTypeCounts[200] + tileTypeCounts[401] + tileTypeCounts[399] + tileTypeCounts[234] + tileTypeCounts[352] - 5 * tileTypeCounts[27];
        case TileScanGroup.Hallow:
          return tileTypeCounts[109] + tileTypeCounts[110] + tileTypeCounts[113] + tileTypeCounts[117] + tileTypeCounts[116] + tileTypeCounts[164] + tileTypeCounts[403] + tileTypeCounts[402];
        case TileScanGroup.TotalGoodEvil:
          int typeCountByCategory1 = WorldGen.GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Hallow);
          int typeCountByCategory2 = WorldGen.GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Corruption);
          int typeCountByCategory3 = WorldGen.GetTileTypeCountByCategory(tileTypeCounts, TileScanGroup.Crimson);
          int num1 = 5 * tileTypeCounts[27];
          int num2 = typeCountByCategory3;
          int num3 = typeCountByCategory2 + num2 + num1;
          return typeCountByCategory1 - num3;
        default:
          return 0;
      }
    }

    public static void ScoreRoom(int ignoreNPC = -1)
    {
      WorldGen.roomOccupied = false;
      WorldGen.roomEvil = false;
      if (WorldGen.ScoreRoom_IsThisRoomOccupiedBySomeone(ignoreNPC))
      {
        WorldGen.roomOccupied = true;
        WorldGen.hiScore = -1;
      }
      else
      {
        WorldGen.hiScore = 0;
        int num1 = 50;
        int num2 = 40;
        int num3 = WorldGen.roomX1 - Main.zoneX / 2 / 16 - 1 - num2;
        int num4 = WorldGen.roomX2 + Main.zoneX / 2 / 16 + 1 + num2;
        int num5 = WorldGen.roomY1 - Main.zoneY / 2 / 16 - 1 - num2;
        int num6 = WorldGen.roomY2 + Main.zoneY / 2 / 16 + 1 + num2;
        if (num3 < 0)
          num3 = 0;
        if (num4 >= Main.maxTilesX)
          num4 = Main.maxTilesX - 1;
        if (num5 < 0)
          num5 = 0;
        if (num6 > Main.maxTilesY)
          num6 = Main.maxTilesY - 1;
        int[] tileTypeCounts = new int[470];
        int startX = num3 + 1;
        int endX = num4 - 1;
        int startY = num5 + 2;
        int endY = num6 + 1;
        WorldGen.CountTileTypesInArea(tileTypeCounts, startX, endX, startY, endY);
        int num7 = 4;
        int num8 = -WorldGen.GetTileTypeCountByCategory(tileTypeCounts, (TileScanGroup) num7);
        if (num8 < 50)
          num8 = 0;
        int num9 = num1 - num8;
        if (num9 <= -250)
        {
          WorldGen.hiScore = num9;
          WorldGen.roomEvil = true;
        }
        else
        {
          int roomX1 = WorldGen.roomX1;
          int roomX2 = WorldGen.roomX2;
          int roomY1 = WorldGen.roomY1;
          int roomY2 = WorldGen.roomY2;
          for (int i = roomX1 + 1; i < roomX2; ++i)
          {
            for (int j = roomY1 + 2; j < roomY2 + 2; ++j)
            {
              if (Main.tile[i, j].nactive())
              {
                int num10 = num9;
                if (Main.tileSolid[(int) Main.tile[i, j].type] && !Main.tileSolidTop[(int) Main.tile[i, j].type] && (!Collision.SolidTiles(i - 1, i + 1, j - 3, j - 1) && Main.tile[i - 1, j].nactive()) && (Main.tileSolid[(int) Main.tile[i - 1, j].type] && Main.tile[i + 1, j].nactive() && Main.tileSolid[(int) Main.tile[i + 1, j].type]))
                {
                  int num11 = 0;
                  int num12 = 0;
                  for (int x = i - 2; x < i + 3; ++x)
                  {
                    for (int y = j - 4; y < j; ++y)
                    {
                      if (Main.tile[x, y].nactive())
                      {
                        if (x == i)
                        {
                          ++num11;
                        }
                        else
                        {
                          Tile tile = Main.tile[x, y];
                          if (TileID.Sets.BasicChest[(int) tile.type])
                            ++num12;
                          else if ((int) tile.type == 10 || (int) tile.type == 388)
                            num10 -= 20;
                          else if (WorldGen.IsOpenDoorAnchorFrame(x, y))
                            num10 -= 20;
                          else if (Main.tileSolid[(int) tile.type])
                            num10 -= 5;
                          else
                            num10 += 5;
                        }
                      }
                    }
                  }
                  if (num10 > 0 && num12 > 0)
                  {
                    num10 -= 30 * num12;
                    if (num10 < 1)
                      num10 = 1;
                  }
                  if (num10 > 0 && num11 > 0)
                  {
                    num10 -= 15 * num11;
                    if (num10 <= 0)
                      num10 = 0;
                  }
                  if (num10 > WorldGen.hiScore)
                  {
                    bool flag1 = WorldGen.Housing_CheckIfInRoom(i, j);
                    bool[] flagArray = new bool[3];
                    for (int index = 1; index <= 3; ++index)
                    {
                      if (!Main.tile[i, j - index].active() || !Main.tileSolid[(int) Main.tile[i, j - index].type])
                        flagArray[index - 1] = true;
                      if (!WorldGen.Housing_CheckIfInRoom(i, j - index))
                        flagArray[index - 1] = false;
                    }
                    foreach (bool flag2 in flagArray)
                    {
                      if (!flag2)
                      {
                        flag1 = false;
                        break;
                      }
                    }
                    if (flag1 && !WorldGen.Housing_CheckIfIsCeiling(i, j))
                    {
                      WorldGen.hiScore = num10;
                      WorldGen.bestX = i;
                      WorldGen.bestY = j;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    private static void ScoreRoom_CountEvilTilesOld(ref int startScore, int startX, int endX, int startY, int endY)
    {
      int num = 0;
      for (int index1 = startX + 1; index1 < endX; ++index1)
      {
        for (int index2 = startY + 2; index2 < endY + 2; ++index2)
        {
          if (Main.tile[index1, index2].active())
          {
            if ((int) Main.tile[index1, index2].type == 23 || (int) Main.tile[index1, index2].type == 24 || ((int) Main.tile[index1, index2].type == 25 || (int) Main.tile[index1, index2].type == 32) || ((int) Main.tile[index1, index2].type == 112 || (int) Main.tile[index1, index2].type == 163))
              ++num;
            else if ((int) Main.tile[index1, index2].type == 199 || (int) Main.tile[index1, index2].type == 201 || ((int) Main.tile[index1, index2].type == 200 || (int) Main.tile[index1, index2].type == 203) || (int) Main.tile[index1, index2].type == 234)
              ++num;
            else if ((int) Main.tile[index1, index2].type == 27)
              num -= 5;
            else if ((int) Main.tile[index1, index2].type == 109 || (int) Main.tile[index1, index2].type == 110 || ((int) Main.tile[index1, index2].type == 113 || (int) Main.tile[index1, index2].type == 116) || (int) Main.tile[index1, index2].type == 164)
              --num;
          }
        }
      }
      if (num < 50)
        num = 0;
      startScore = startScore - num;
    }

    private static bool Housing_CheckIfIsCeiling(int i, int j)
    {
      bool flag = false;
      for (int index = 0; index < WorldGen.roomCeilingsCount; ++index)
      {
        if (WorldGen.roomCeilingX[index] == i)
        {
          if (WorldGen.roomCeilingY[index] == j)
          {
            flag = true;
            break;
          }
          break;
        }
      }
      return flag;
    }

    private static bool Housing_CheckIfInRoom(int i, int j)
    {
      bool flag = false;
      for (int index = 0; index < WorldGen.numRoomTiles; ++index)
      {
        if (WorldGen.roomX[index] == i && WorldGen.roomY[index] == j)
        {
          flag = true;
          break;
        }
      }
      return flag;
    }

    public static bool StartRoomCheck(int x, int y)
    {
      WorldGen.roomX1 = x;
      WorldGen.roomX2 = x;
      WorldGen.roomY1 = y;
      WorldGen.roomY2 = y;
      WorldGen.numRoomTiles = 0;
      WorldGen.roomCeilingsCount = 0;
      for (int index = 0; index < 470; ++index)
        WorldGen.houseTile[index] = false;
      WorldGen.canSpawn = true;
      if (Main.tile[x, y].nactive() && Main.tileSolid[(int) Main.tile[x, y].type])
      {
        WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomCheckStartedInASolidTile;
        WorldGen.canSpawn = false;
        return false;
      }
      WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.None;
      WorldGen.CheckRoom(x, y);
      if (!WorldGen.canSpawn)
        return false;
      if (WorldGen.numRoomTiles < 60)
      {
        WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomIsTooSmall;
        WorldGen.canSpawn = false;
        return false;
      }
      return WorldGen.canSpawn;
    }

    public static void CheckRoom(int x, int y)
    {
      if (!WorldGen.canSpawn)
        return;
      if (x < 10 || y < 10 || (x >= Main.maxTilesX - 10 || y >= WorldGen.lastMaxTilesY - 10))
      {
        WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.TooCloseToWorldEdge;
        WorldGen.canSpawn = false;
      }
      else
      {
        for (int index = 0; index < WorldGen.numRoomTiles; ++index)
        {
          if (WorldGen.roomX[index] == x && WorldGen.roomY[index] == y)
            return;
        }
        WorldGen.roomX[WorldGen.numRoomTiles] = x;
        WorldGen.roomY[WorldGen.numRoomTiles] = y;
        bool flag1 = false;
        for (int index = 0; index < WorldGen.roomCeilingsCount; ++index)
        {
          if (WorldGen.roomCeilingX[index] == x)
          {
            flag1 = true;
            if (WorldGen.roomCeilingY[index] > y)
            {
              WorldGen.roomCeilingY[index] = y;
              break;
            }
            break;
          }
        }
        if (!flag1)
        {
          WorldGen.roomCeilingX[WorldGen.roomCeilingsCount] = x;
          WorldGen.roomCeilingY[WorldGen.roomCeilingsCount] = y;
          ++WorldGen.roomCeilingsCount;
        }
        ++WorldGen.numRoomTiles;
        if (WorldGen.numRoomTiles >= WorldGen.maxRoomTiles)
        {
          WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.RoomIsTooBig;
          WorldGen.canSpawn = false;
        }
        else
        {
          if (Main.tile[x, y].nactive())
          {
            WorldGen.houseTile[(int) Main.tile[x, y].type] = true;
            if (Main.tileSolid[(int) Main.tile[x, y].type] || (int) Main.tile[x, y].type == 11 && ((int) Main.tile[x, y].frameX == 0 || (int) Main.tile[x, y].frameX == 54 || ((int) Main.tile[x, y].frameX == 72 || (int) Main.tile[x, y].frameX == 126)) || ((int) Main.tile[x, y].type == 389 || (int) Main.tile[x, y].type == 386 && ((int) Main.tile[x, y].frameX < 36 && (int) Main.tile[x, y].frameY == 18 || (int) Main.tile[x, y].frameX >= 36 && (int) Main.tile[x, y].frameY == 0)))
              return;
          }
          if (x < WorldGen.roomX1)
            WorldGen.roomX1 = x;
          if (x > WorldGen.roomX2)
            WorldGen.roomX2 = x;
          if (y < WorldGen.roomY1)
            WorldGen.roomY1 = y;
          if (y > WorldGen.roomY2)
            WorldGen.roomY2 = y;
          bool flag2 = false;
          bool flag3 = false;
          for (int index = -2; index < 3; ++index)
          {
            if (Main.wallHouse[(int) Main.tile[x + index, y].wall])
              flag2 = true;
            if (Main.tile[x + index, y].nactive() && (Main.tileSolid[(int) Main.tile[x + index, y].type] || TileID.Sets.HousingWalls[(int) Main.tile[x + index, y].type]))
              flag2 = true;
            if (Main.wallHouse[(int) Main.tile[x, y + index].wall])
              flag3 = true;
            if (Main.tile[x, y + index].nactive() && (Main.tileSolid[(int) Main.tile[x, y + index].type] || TileID.Sets.HousingWalls[(int) Main.tile[x, y + index].type]))
              flag3 = true;
          }
          if (!flag2 || !flag3)
          {
            WorldGen.roomCheckFailureReason = TownNPCRoomCheckFailureReason.HoleInWallIsTooBig;
            WorldGen.canSpawn = false;
          }
          else
          {
            for (int x1 = x - 1; x1 < x + 2; ++x1)
            {
              for (int y1 = y - 1; y1 < y + 2; ++y1)
              {
                if ((x1 != x || y1 != y) && WorldGen.canSpawn)
                  WorldGen.CheckRoom(x1, y1);
              }
            }
          }
        }
      }
    }

    public static void dropMeteor()
    {
      bool flag = true;
      if (Main.netMode == 1)
        return;
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        if (Main.player[index].active)
        {
          flag = false;
          break;
        }
      }
      int num1 = 0;
      int num2 = (int) (400.0 * (double) (Main.maxTilesX / 4200));
      for (int index1 = 5; index1 < Main.maxTilesX - 5; ++index1)
      {
        for (int index2 = 5; (double) index2 < Main.worldSurface; ++index2)
        {
          if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 37)
          {
            ++num1;
            if (num1 > num2)
              return;
          }
        }
      }
      float num3 = 600f;
      while (!flag)
      {
        float num4 = (float) Main.maxTilesX * 0.08f;
        int i1 = Main.rand.Next(150, Main.maxTilesX - 150);
        while ((double) i1 > (double) Main.spawnTileX - (double) num4 && (double) i1 < (double) Main.spawnTileX + (double) num4)
          i1 = Main.rand.Next(150, Main.maxTilesX - 150);
        for (int j1 = (int) (Main.worldSurface * 0.3); j1 < Main.maxTilesY; ++j1)
        {
          if (Main.tile[i1, j1].active() && Main.tileSolid[(int) Main.tile[i1, j1].type])
          {
            int num5 = 0;
            int num6 = 15;
            for (int i2 = i1 - num6; i2 < i1 + num6; ++i2)
            {
              for (int j2 = j1 - num6; j2 < j1 + num6; ++j2)
              {
                if (WorldGen.SolidTile(i2, j2))
                {
                  ++num5;
                  if ((int) Main.tile[i2, j2].type == 189 || (int) Main.tile[i2, j2].type == 202)
                    num5 -= 100;
                }
                else if ((int) Main.tile[i2, j2].liquid > 0)
                  --num5;
              }
            }
            if ((double) num5 >= (double) num3)
            {
              flag = WorldGen.meteor(i1, j1);
              if (!flag)
                break;
              break;
            }
            num3 -= 0.5f;
            break;
          }
        }
        if ((double) num3 < 100.0)
          break;
      }
    }

    public static bool meteor(int i, int j)
    {
      if (i < 50 || i > Main.maxTilesX - 50 || (j < 50 || j > Main.maxTilesY - 50))
        return false;
      int num1 = 35;
      Rectangle rectangle1;
      // ISSUE: explicit reference operation
      ((Rectangle) @rectangle1).\u002Ector((i - num1) * 16, (j - num1) * 16, num1 * 2 * 16, num1 * 2 * 16);
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        if (Main.player[index].active)
        {
          Rectangle rectangle2;
          // ISSUE: explicit reference operation
          ((Rectangle) @rectangle2).\u002Ector((int) (Main.player[index].position.X + (double) (Main.player[index].width / 2) - (double) (NPC.sWidth / 2) - (double) NPC.safeRangeX), (int) (Main.player[index].position.Y + (double) (Main.player[index].height / 2) - (double) (NPC.sHeight / 2) - (double) NPC.safeRangeY), NPC.sWidth + NPC.safeRangeX * 2, NPC.sHeight + NPC.safeRangeY * 2);
          // ISSUE: explicit reference operation
          if (((Rectangle) @rectangle1).Intersects(rectangle2))
            return false;
        }
      }
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active)
        {
          Rectangle rectangle2;
          // ISSUE: explicit reference operation
          ((Rectangle) @rectangle2).\u002Ector((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
          // ISSUE: explicit reference operation
          if (((Rectangle) @rectangle1).Intersects(rectangle2))
            return false;
        }
      }
      for (int index1 = i - num1; index1 < i + num1; ++index1)
      {
        for (int index2 = j - num1; index2 < j + num1; ++index2)
        {
          if (Main.tile[index1, index2].active() && TileID.Sets.BasicChest[(int) Main.tile[index1, index2].type])
            return false;
        }
      }
      WorldGen.stopDrops = true;
      int num2 = WorldGen.genRand.Next(17, 23);
      for (int index1 = i - num2; index1 < i + num2; ++index1)
      {
        for (int index2 = j - num2; index2 < j + num2; ++index2)
        {
          if (index2 > j + Main.rand.Next(-2, 3) - 5)
          {
            double num3 = (double) Math.Abs(i - index1);
            float num4 = (float) Math.Abs(j - index2);
            if (Math.Sqrt(num3 * num3 + (double) num4 * (double) num4) < (double) num2 * 0.9 + (double) Main.rand.Next(-4, 5))
            {
              if (!Main.tileSolid[(int) Main.tile[index1, index2].type])
                Main.tile[index1, index2].active(false);
              Main.tile[index1, index2].type = (ushort) 37;
            }
          }
        }
      }
      int num5 = WorldGen.genRand.Next(8, 14);
      for (int index1 = i - num5; index1 < i + num5; ++index1)
      {
        for (int index2 = j - num5; index2 < j + num5; ++index2)
        {
          if (index2 > j + Main.rand.Next(-2, 3) - 4)
          {
            double num3 = (double) Math.Abs(i - index1);
            float num4 = (float) Math.Abs(j - index2);
            if (Math.Sqrt(num3 * num3 + (double) num4 * (double) num4) < (double) num5 * 0.8 + (double) Main.rand.Next(-3, 4))
              Main.tile[index1, index2].active(false);
          }
        }
      }
      int num6 = WorldGen.genRand.Next(25, 35);
      for (int i1 = i - num6; i1 < i + num6; ++i1)
      {
        for (int j1 = j - num6; j1 < j + num6; ++j1)
        {
          double num3 = (double) Math.Abs(i - i1);
          float num4 = (float) Math.Abs(j - j1);
          if (Math.Sqrt(num3 * num3 + (double) num4 * (double) num4) < (double) num6 * 0.7)
          {
            if ((int) Main.tile[i1, j1].type == 5 || (int) Main.tile[i1, j1].type == 32 || (int) Main.tile[i1, j1].type == 352)
              WorldGen.KillTile(i1, j1, false, false, false);
            Main.tile[i1, j1].liquid = (byte) 0;
          }
          if ((int) Main.tile[i1, j1].type == 37)
          {
            if (!WorldGen.SolidTile(i1 - 1, j1) && !WorldGen.SolidTile(i1 + 1, j1) && (!WorldGen.SolidTile(i1, j1 - 1) && !WorldGen.SolidTile(i1, j1 + 1)))
              Main.tile[i1, j1].active(false);
            else if ((Main.tile[i1, j1].halfBrick() || Main.tile[i1 - 1, j1].topSlope()) && !WorldGen.SolidTile(i1, j1 + 1))
              Main.tile[i1, j1].active(false);
          }
          WorldGen.SquareTileFrame(i1, j1, true);
          WorldGen.SquareWallFrame(i1, j1, true);
        }
      }
      int num7 = WorldGen.genRand.Next(23, 32);
      for (int i1 = i - num7; i1 < i + num7; ++i1)
      {
        for (int j1 = j - num7; j1 < j + num7; ++j1)
        {
          if (j1 > j + WorldGen.genRand.Next(-3, 4) - 3 && Main.tile[i1, j1].active() && Main.rand.Next(10) == 0)
          {
            double num3 = (double) Math.Abs(i - i1);
            float num4 = (float) Math.Abs(j - j1);
            if (Math.Sqrt(num3 * num3 + (double) num4 * (double) num4) < (double) num7 * 0.8)
            {
              if ((int) Main.tile[i1, j1].type == 5 || (int) Main.tile[i1, j1].type == 32 || (int) Main.tile[i1, j1].type == 352)
                WorldGen.KillTile(i1, j1, false, false, false);
              Main.tile[i1, j1].type = (ushort) 37;
              WorldGen.SquareTileFrame(i1, j1, true);
            }
          }
        }
      }
      int num8 = WorldGen.genRand.Next(30, 38);
      for (int i1 = i - num8; i1 < i + num8; ++i1)
      {
        for (int j1 = j - num8; j1 < j + num8; ++j1)
        {
          if (j1 > j + WorldGen.genRand.Next(-2, 3) && Main.tile[i1, j1].active() && Main.rand.Next(20) == 0)
          {
            double num3 = (double) Math.Abs(i - i1);
            float num4 = (float) Math.Abs(j - j1);
            if (Math.Sqrt(num3 * num3 + (double) num4 * (double) num4) < (double) num8 * 0.85)
            {
              if ((int) Main.tile[i1, j1].type == 5 || (int) Main.tile[i1, j1].type == 32 || (int) Main.tile[i1, j1].type == 352)
                WorldGen.KillTile(i1, j1, false, false, false);
              Main.tile[i1, j1].type = (ushort) 37;
              WorldGen.SquareTileFrame(i1, j1, true);
            }
          }
        }
      }
      WorldGen.stopDrops = false;
      if (Main.netMode == 0)
        Main.NewText(Lang.gen[59].Value, (byte) 50, byte.MaxValue, (byte) 130, false);
      else if (Main.netMode == 2)
        NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.gen[59].Key), new Color(50, (int) byte.MaxValue, 130), -1);
      if (Main.netMode != 1)
        NetMessage.SendTileSquare(-1, i, j, 40, TileChangeType.None);
      return true;
    }

    public static void setWorldSize()
    {
      Main.bottomWorld = (float) (Main.maxTilesY * 16);
      Main.rightWorld = (float) (Main.maxTilesX * 16);
      Main.maxSectionsX = Main.maxTilesX / 200;
      Main.maxSectionsY = Main.maxTilesY / 150;
    }

    public static void worldGenCallBack(object threadContext)
    {
      Main.PlaySound(10, -1, -1, 1, 1f, 0.0f);
      WorldGen.clearWorld();
      WorldGen.generateWorld(Main.ActiveWorldFileData.Seed, threadContext as GenerationProgress);
      WorldFile.saveWorld(Main.ActiveWorldFileData.IsCloudSave, true);
      if (Main.menuMode == 10 || Main.menuMode == 888)
        Main.menuMode = 6;
      Main.PlaySound(10, -1, -1, 1, 1f, 0.0f);
    }

    public static void CreateNewWorld(GenerationProgress progress = null)
    {
      Main.rand = new UnifiedRandom(Main.ActiveWorldFileData.Seed);
      ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.worldGenCallBack), (object) progress);
    }

    public static void SaveAndQuitCallBack(object threadContext)
    {
      try
      {
        Main.PlaySound(34, -1, -1, 0, 1f, 0.0f);
        Main.PlaySound(35, -1, -1, 0, 1f, 0.0f);
      }
      catch
      {
      }
      if (Main.netMode == 0)
        WorldFile.CacheSaveTime();
      Main.invasionProgress = 0;
      Main.invasionProgressDisplayLeft = 0;
      Main.invasionProgressAlpha = 0.0f;
      Main.menuMode = 10;
      Main.gameMenu = true;
      Main.StopTrackedSounds();
      CaptureInterface.ResetFocus();
      Main.ActivePlayerFileData.StopPlayTimer();
      Player.SavePlayer(Main.ActivePlayerFileData, false);
      if (Main.netMode == 0)
      {
        WorldFile.saveWorld();
        Main.PlaySound(10, -1, -1, 1, 1f, 0.0f);
      }
      else
      {
        Netplay.disconnect = true;
        Main.netMode = 0;
      }
      Main.fastForwardTime = false;
      Main.UpdateSundial();
      Main.menuMode = 0;
      if (threadContext == null)
        return;
      ((Action) threadContext)();
    }

    public static void SaveAndQuit(Action callback = null)
    {
      Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
      ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.SaveAndQuitCallBack), (object) callback);
    }

    public static void playWorldCallBack(object threadContext)
    {
      if (Main.rand == null)
        Main.rand = new UnifiedRandom((int) DateTime.Now.Ticks);
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        if (index != Main.myPlayer)
          Main.player[index].active = false;
      }
      WorldGen.noMapUpdate = true;
      WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
      if (WorldGen.loadFailed || !WorldGen.loadSuccess)
      {
        WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
        if (WorldGen.loadFailed || !WorldGen.loadSuccess)
        {
          bool isCloudSave = Main.ActiveWorldFileData.IsCloudSave;
          WorldGen.worldBackup = FileUtilities.Exists(Main.worldPathName + ".bak", isCloudSave);
          if (!Main.dedServ)
          {
            if (WorldGen.worldBackup)
            {
              Main.menuMode = 200;
              return;
            }
            Main.menuMode = 201;
            return;
          }
          if (WorldGen.worldBackup)
          {
            FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bad", isCloudSave, true);
            FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave, true);
            FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave);
            WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
            if (WorldGen.loadFailed || !WorldGen.loadSuccess)
            {
              WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
              if (WorldGen.loadFailed || !WorldGen.loadSuccess)
              {
                FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bak", isCloudSave, true);
                FileUtilities.Copy(Main.worldPathName + ".bad", Main.worldPathName, isCloudSave, true);
                FileUtilities.Delete(Main.worldPathName + ".bad", isCloudSave);
                Console.WriteLine(Language.GetTextValue("Error.LoadFailed"));
                return;
              }
            }
          }
          else
          {
            Console.WriteLine(Language.GetTextValue("Error.LoadFailedNoBackup"));
            return;
          }
        }
      }
      if (Main.mapEnabled)
        Main.Map.Load();
      if (Main.netMode != 2)
        Main.sectionManager.SetAllFramesLoaded();
      while (Main.loadMapLock)
      {
        float num = (float) Main.loadMapLastX / (float) Main.maxTilesX;
        Main.statusText = Lang.gen[68].Value + " " + (object) (int) ((double) num * 100.0 + 1.0) + "%";
        Thread.Sleep(0);
        if (!Main.mapEnabled)
          break;
      }
      if (Main.gameMenu)
        Main.gameMenu = false;
      if (Main.netMode == 0 && Main.anglerWhoFinishedToday.Contains(Main.player[Main.myPlayer].name))
        Main.anglerQuestFinished = true;
      Main.player[Main.myPlayer].Spawn();
      Main.player[Main.myPlayer].Update(Main.myPlayer);
      Main.ActivePlayerFileData.StartPlayTimer();
      WorldGen._lastSeed = Main.ActiveWorldFileData.Seed;
      Player.Hooks.EnterWorld(Main.myPlayer);
      WorldFile.SetOngoingToTemps();
      Main.PlaySound(11, -1, -1, 1, 1f, 0.0f);
      Main.resetClouds = true;
      WorldGen.noMapUpdate = false;
    }

    public static void playWorld()
    {
      ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.playWorldCallBack), (object) 1);
    }

    public static void saveAndPlayCallBack(object threadContext)
    {
      WorldFile.saveWorld();
    }

    public static void saveAndPlay()
    {
      ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.saveAndPlayCallBack), (object) 1);
    }

    public static void saveToonWhilePlayingCallBack(object threadContext)
    {
      Player.SavePlayer(Main.ActivePlayerFileData, false);
    }

    public static void saveToonWhilePlaying()
    {
      ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.saveToonWhilePlayingCallBack), (object) 1);
    }

    public static void serverLoadWorldCallBack(object threadContext)
    {
      Main.rand = new UnifiedRandom((int) DateTime.Now.Ticks);
      WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
      if (WorldGen.loadFailed || !WorldGen.loadSuccess)
      {
        WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
        if (WorldGen.loadFailed || !WorldGen.loadSuccess)
        {
          bool isCloudSave = Main.ActiveWorldFileData.IsCloudSave;
          WorldGen.worldBackup = FileUtilities.Exists(Main.worldPathName + ".bak", isCloudSave);
          if (!Main.dedServ)
          {
            if (WorldGen.worldBackup)
            {
              Main.menuMode = 200;
              return;
            }
            Main.menuMode = 201;
            return;
          }
          if (WorldGen.worldBackup)
          {
            FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave, true);
            FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave);
            WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
            if (WorldGen.loadFailed || !WorldGen.loadSuccess)
            {
              WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
              if (WorldGen.loadFailed || !WorldGen.loadSuccess)
              {
                Console.WriteLine(Language.GetTextValue("Error.LoadFailed"));
                return;
              }
            }
          }
          else
          {
            Console.WriteLine(Language.GetTextValue("Error.LoadFailedNoBackup"));
            return;
          }
        }
      }
      WorldGen._lastSeed = Main.ActiveWorldFileData.Seed;
      Main.PlaySound(10, -1, -1, 1, 1f, 0.0f);
      Netplay.StartServer();
      WorldFile.SetOngoingToTemps();
      WorldGen.Hooks.WorldLoaded();
    }

    public static void serverLoadWorld()
    {
      ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.serverLoadWorldCallBack), (object) 1);
    }

    public static void clearWorld()
    {
      WorldGen.TownManager = new TownRoomManager();
      WorldGen.Hooks.ClearWorld();
      TileEntity.Clear();
      Main.checkXMas();
      Main.checkHalloween();
      if (Main.mapReady)
      {
        for (int index = 0; index < WorldGen.lastMaxTilesX; ++index)
        {
          double num = (double) index / (double) WorldGen.lastMaxTilesX;
          Main.statusText = Lang.gen[65].Value;
        }
        Main.Map.Clear();
      }
      NPC.MoonLordCountdown = 0;
      Main.pumpkinMoon = false;
      Main.clearMap = true;
      Main.mapTime = 0;
      Main.updateMap = false;
      Main.mapReady = false;
      Main.refreshMap = false;
      Main.eclipse = false;
      Main.slimeRain = false;
      Main.slimeRainTime = 0.0;
      Main.sundialCooldown = 0;
      Main.fastForwardTime = false;
      BirthdayParty.WorldClear();
      Sandstorm.WorldClear();
      Main.UpdateSundial();
      Main.wof = -1;
      NPC.waveKills = 0.0f;
      WorldGen.spawnHardBoss = 0;
      WorldGen.totalSolid2 = 0;
      WorldGen.totalGood2 = 0;
      WorldGen.totalEvil2 = 0;
      WorldGen.totalBlood2 = 0;
      WorldGen.totalSolid = 0;
      WorldGen.totalGood = 0;
      WorldGen.totalEvil = 0;
      WorldGen.totalBlood = 0;
      WorldFile.ResetTemps();
      Main.maxRaining = 0.0f;
      WorldGen.totalX = 0;
      WorldGen.totalD = 0;
      WorldGen.tEvil = (byte) 0;
      WorldGen.tBlood = (byte) 0;
      WorldGen.tGood = (byte) 0;
      WorldGen.spawnEye = false;
      WorldGen.prioritizedTownNPC = 0;
      WorldGen.shadowOrbCount = 0;
      WorldGen.altarCount = 0;
      WorldGen.oreTier1 = -1;
      WorldGen.oreTier2 = -1;
      WorldGen.oreTier3 = -1;
      Main.cloudBGActive = 0.0f;
      Main.raining = false;
      Main.hardMode = false;
      Main.helpText = 0;
      Main.BartenderHelpTextIndex = 0;
      Main.dungeonX = 0;
      Main.dungeonY = 0;
      NPC.downedBoss1 = false;
      NPC.downedBoss2 = false;
      NPC.downedBoss3 = false;
      NPC.downedQueenBee = false;
      NPC.downedSlimeKing = false;
      NPC.downedMechBossAny = false;
      NPC.downedMechBoss1 = false;
      NPC.downedMechBoss2 = false;
      NPC.downedMechBoss3 = false;
      NPC.downedFishron = false;
      NPC.downedAncientCultist = false;
      NPC.downedMoonlord = false;
      NPC.downedHalloweenKing = false;
      NPC.downedHalloweenTree = false;
      NPC.downedChristmasIceQueen = false;
      NPC.downedChristmasSantank = false;
      NPC.downedChristmasTree = false;
      NPC.downedPlantBoss = false;
      NPC.downedGolemBoss = false;
      NPC.savedStylist = false;
      NPC.savedGoblin = false;
      NPC.savedWizard = false;
      NPC.savedMech = false;
      NPC.savedTaxCollector = false;
      NPC.savedAngler = false;
      NPC.savedBartender = false;
      NPC.downedGoblins = false;
      NPC.downedClown = false;
      NPC.downedFrost = false;
      NPC.downedPirates = false;
      NPC.downedMartians = false;
      int num1;
      NPC.LunarApocalypseIsUp = (num1 = 0) != 0;
      NPC.downedTowerStardust = num1 != 0;
      NPC.downedTowerNebula = num1 != 0;
      NPC.downedTowerVortex = num1 != 0;
      NPC.downedTowerSolar = num1 != 0;
      int num2;
      NPC.TowerActiveStardust = (num2 = 0) != 0;
      NPC.TowerActiveNebula = num2 != 0;
      NPC.TowerActiveVortex = num2 != 0;
      NPC.TowerActiveSolar = num2 != 0;
      DD2Event.ResetProgressEntirely();
      NPC.ClearFoundActiveNPCs();
      WorldGen.shadowOrbSmashed = false;
      WorldGen.spawnMeteor = false;
      WorldGen.stopDrops = false;
      Main.invasionDelay = 0;
      Main.invasionType = 0;
      Main.invasionSize = 0;
      Main.invasionWarn = 0;
      Main.invasionX = 0.0;
      Main.invasionSizeStart = 0;
      Main.treeX[0] = Main.maxTilesX;
      Main.treeX[1] = Main.maxTilesX;
      Main.treeX[2] = Main.maxTilesX;
      Main.treeStyle[0] = 0;
      Main.treeStyle[1] = 0;
      Main.treeStyle[2] = 0;
      Main.treeStyle[3] = 0;
      WorldGen.noLiquidCheck = false;
      Liquid.numLiquid = 0;
      LiquidBuffer.numLiquidBuffer = 0;
      if (Main.netMode == 1 || WorldGen.lastMaxTilesX > Main.maxTilesX || WorldGen.lastMaxTilesY > Main.maxTilesY)
      {
        for (int index1 = 0; index1 < WorldGen.lastMaxTilesX; ++index1)
        {
          float num3 = (float) index1 / (float) WorldGen.lastMaxTilesX;
          Main.statusText = Lang.gen[46].Value + " " + (object) (int) ((double) num3 * 100.0 + 1.0) + "%";
          for (int index2 = 0; index2 < WorldGen.lastMaxTilesY; ++index2)
            Main.tile[index1, index2] = (Tile) null;
        }
      }
      WorldGen.lastMaxTilesX = Main.maxTilesX;
      WorldGen.lastMaxTilesY = Main.maxTilesY;
      if (Main.netMode != 2)
        Main.sectionManager = new WorldSections(Main.maxTilesX / 200, Main.maxTilesY / 150);
      if (Main.netMode != 1)
      {
        for (int index1 = 0; index1 < Main.maxTilesX; ++index1)
        {
          float num3 = (float) index1 / (float) Main.maxTilesX;
          Main.statusText = Lang.gen[47].Value + " " + (object) (int) ((double) num3 * 100.0 + 1.0) + "%";
          for (int index2 = 0; index2 < Main.maxTilesY; ++index2)
          {
            if (Main.tile[index1, index2] == null)
              Main.tile[index1, index2] = new Tile();
            else
              Main.tile[index1, index2].ClearEverything();
          }
        }
      }
      CombatText.clearAll();
      for (int index = 0; index < 6000; ++index)
      {
        Main.dust[index] = new Dust();
        Main.dust[index].dustIndex = index;
      }
      for (int index = 0; index < 500; ++index)
        Main.gore[index] = new Gore();
      for (int index = 0; index < 400; ++index)
      {
        Main.item[index] = new Item();
        Main.itemLockoutTime[index] = 0;
      }
      for (int index = 0; index < 200; ++index)
        Main.npc[index] = new NPC();
      for (int index = 0; index < 1000; ++index)
        Main.projectile[index] = new Projectile();
      for (int index = 0; index < 1000; ++index)
        Main.chest[index] = (Chest) null;
      for (int index = 0; index < 1000; ++index)
        Main.sign[index] = (Sign) null;
      for (int index = 0; index < Liquid.resLiquid; ++index)
        Main.liquid[index] = new Liquid();
      for (int index = 0; index < 10000; ++index)
        Main.liquidBuffer[index] = new LiquidBuffer();
      WorldGen.setWorldSize();
      WorldGen.worldCleared = true;
    }

    public static void setBG(int bg, int style)
    {
      if (bg == 0)
      {
        WorldGen.treeBG = style;
        Main.treeMntBG[0] = 7;
        Main.treeMntBG[1] = 8;
        if (style == 1)
        {
          Main.treeBG[0] = 50;
          Main.treeBG[1] = 51;
          Main.treeBG[2] = 52;
        }
        else if (style == 2)
        {
          Main.treeBG[0] = 53;
          Main.treeBG[1] = 54;
          Main.treeBG[2] = 55;
        }
        else if (style == 3)
        {
          Main.treeMntBG[1] = 90;
          Main.treeBG[0] = 91;
          Main.treeBG[1] = -1;
          Main.treeBG[2] = 92;
        }
        else if (style == 31)
        {
          Main.treeMntBG[1] = 90;
          Main.treeBG[0] = 91;
          Main.treeBG[1] = -1;
          Main.treeBG[2] = 11;
        }
        else if (style == 4)
        {
          Main.treeMntBG[0] = 93;
          Main.treeMntBG[1] = 94;
          Main.treeBG[0] = -1;
          Main.treeBG[1] = -1;
          Main.treeBG[2] = -1;
        }
        else if (style == 5)
        {
          Main.treeMntBG[0] = 93;
          Main.treeMntBG[1] = 94;
          Main.treeBG[0] = -1;
          Main.treeBG[1] = -1;
          Main.treeBG[2] = 55;
        }
        else if (style == 51)
        {
          Main.treeMntBG[0] = 93;
          Main.treeMntBG[1] = 94;
          Main.treeBG[0] = -1;
          Main.treeBG[1] = -1;
          Main.treeBG[2] = 11;
        }
        else if (style == 6)
        {
          Main.treeMntBG[0] = 171;
          Main.treeMntBG[1] = 172;
          Main.treeBG[0] = 173;
          Main.treeBG[1] = -1;
          Main.treeBG[2] = -1;
        }
        else if (style == 7)
        {
          Main.treeMntBG[0] = 176;
          Main.treeMntBG[1] = 177;
          Main.treeBG[0] = 178;
          Main.treeBG[1] = -1;
          Main.treeBG[2] = -1;
        }
        else if (style == 71)
        {
          Main.treeMntBG[0] = 176;
          Main.treeMntBG[1] = 177;
          Main.treeBG[0] = 178;
          Main.treeBG[1] = -1;
          Main.treeBG[2] = 11;
        }
        else if (style == 72)
        {
          Main.treeMntBG[0] = 176;
          Main.treeMntBG[1] = 177;
          Main.treeBG[0] = 178;
          Main.treeBG[1] = -1;
          Main.treeBG[2] = 52;
        }
        else if (style == 73)
        {
          Main.treeMntBG[0] = 176;
          Main.treeMntBG[1] = 177;
          Main.treeBG[0] = 178;
          Main.treeBG[1] = -1;
          Main.treeBG[2] = 55;
        }
        else if (style == 8)
        {
          Main.treeMntBG[0] = 179;
          Main.treeMntBG[1] = 180;
          Main.treeBG[0] = 184;
          Main.treeBG[1] = -1;
          Main.treeBG[2] = -1;
        }
        else
        {
          Main.treeBG[0] = 9;
          Main.treeBG[1] = 10;
          Main.treeBG[2] = 11;
        }
      }
      else if (bg == 1)
      {
        WorldGen.corruptBG = style;
        if (style == 1)
        {
          Main.corruptBG[0] = 56;
          Main.corruptBG[1] = 57;
          Main.corruptBG[2] = 58;
        }
        else
        {
          Main.corruptBG[0] = 12;
          Main.corruptBG[1] = 13;
          Main.corruptBG[2] = 14;
        }
      }
      else if (bg == 2)
      {
        WorldGen.jungleBG = style;
        if (style == 1)
        {
          Main.jungleBG[0] = 59;
          Main.jungleBG[1] = 60;
          Main.jungleBG[2] = 61;
        }
        else
        {
          Main.jungleBG[0] = 15;
          Main.jungleBG[1] = 16;
          Main.jungleBG[2] = 17;
        }
      }
      else if (bg == 3)
      {
        WorldGen.snowBG = style;
        Main.snowMntBG[0] = 35;
        Main.snowMntBG[1] = 36;
        if (style == 1)
        {
          Main.snowBG[0] = 97;
          Main.snowBG[1] = 96;
          Main.snowBG[2] = 95;
        }
        else if (style == 2)
        {
          Main.snowMntBG[0] = 98;
          Main.snowMntBG[1] = 99;
          Main.snowBG[0] = -1;
          Main.snowBG[1] = -1;
          Main.snowBG[2] = -1;
        }
        else if (style == 21)
        {
          Main.snowMntBG[0] = 98;
          Main.snowMntBG[1] = 99;
          Main.snowBG[0] = 95;
          Main.snowBG[1] = 96;
          Main.snowBG[2] = 97;
        }
        else if (style == 22)
        {
          Main.snowMntBG[0] = 98;
          Main.snowMntBG[1] = 99;
          Main.snowBG[0] = 37;
          Main.snowBG[1] = 38;
          Main.snowBG[2] = 39;
        }
        else if (style == 3)
        {
          Main.snowMntBG[0] = 98;
          Main.snowMntBG[1] = 100;
          Main.snowBG[0] = -1;
          Main.snowBG[1] = -1;
          Main.snowBG[2] = -1;
        }
        else if (style == 31)
        {
          Main.snowMntBG[0] = 98;
          Main.snowMntBG[1] = 100;
          Main.snowBG[0] = 95;
          Main.snowBG[1] = 96;
          Main.snowBG[2] = 97;
        }
        else if (style == 32)
        {
          Main.snowMntBG[0] = 98;
          Main.snowMntBG[1] = 100;
          Main.snowBG[0] = 37;
          Main.snowBG[1] = 38;
          Main.snowBG[2] = 39;
        }
        else if (style == 4)
        {
          Main.snowMntBG[0] = 98;
          Main.snowMntBG[1] = 101;
          Main.snowBG[0] = -1;
          Main.snowBG[1] = -1;
          Main.snowBG[2] = -1;
        }
        else if (style == 41)
        {
          Main.snowMntBG[0] = 98;
          Main.snowMntBG[1] = 101;
          Main.snowBG[0] = 95;
          Main.snowBG[1] = 96;
          Main.snowBG[2] = 97;
        }
        else if (style == 42)
        {
          Main.snowMntBG[0] = 98;
          Main.snowMntBG[1] = 101;
          Main.snowBG[0] = 37;
          Main.snowBG[1] = 38;
          Main.snowBG[2] = 39;
        }
        else
        {
          Main.snowBG[0] = 37;
          Main.snowBG[1] = 38;
          Main.snowBG[2] = 39;
        }
      }
      else if (bg == 4)
      {
        WorldGen.hallowBG = style;
        if (style == 1)
        {
          Main.hallowBG[0] = 102;
          Main.hallowBG[1] = 103;
          Main.hallowBG[2] = 104;
        }
        else
        {
          Main.hallowBG[0] = 29;
          Main.hallowBG[1] = 30;
          Main.hallowBG[2] = 31;
        }
      }
      else if (bg == 5)
      {
        WorldGen.crimsonBG = style;
        if (style == 1)
        {
          Main.crimsonBG[0] = 105;
          Main.crimsonBG[1] = 106;
          Main.crimsonBG[2] = 107;
        }
        if (style == 2)
        {
          Main.crimsonBG[0] = 174;
          Main.crimsonBG[1] = -1;
          Main.crimsonBG[2] = 175;
        }
        else
        {
          Main.crimsonBG[0] = 43;
          Main.crimsonBG[1] = 44;
          Main.crimsonBG[2] = 45;
        }
      }
      else if (bg == 6)
      {
        WorldGen.desertBG = style;
        if (style == 1)
        {
          Main.desertBG[0] = 108;
          Main.desertBG[1] = 109;
        }
        else
        {
          Main.desertBG[0] = 21;
          Main.desertBG[1] = 20;
        }
      }
      else
      {
        if (bg != 7)
          return;
        WorldGen.oceanBG = style;
        if (style == 1)
          Main.oceanBG = 110;
        else if (style == 2)
          Main.oceanBG = 111;
        else
          Main.oceanBG = 28;
      }
    }

    public static void RandomizeWeather()
    {
      if (Main.cloudLimit < 10)
        return;
      Main.numClouds = WorldGen.genRand.Next(10, Main.cloudLimit);
      Main.windSpeed = 0.0f;
      while ((double) Main.windSpeed == 0.0)
      {
        Main.windSpeed = (float) WorldGen.genRand.Next(-100, 101) * 0.01f;
        Main.windSpeedSet = Main.windSpeed;
      }
      Cloud.resetClouds();
    }

    public static void RandomizeMoonState()
    {
      Main.moonType = WorldGen.genRand.Next(Main.maxMoons);
    }

    public static void RandomizeBackgrounds()
    {
      WorldGen.treeBG = WorldGen.genRand.Next(9);
      if ((WorldGen.treeBG == 1 || WorldGen.treeBG == 2) && WorldGen.genRand.Next(2) == 0)
        WorldGen.treeBG = WorldGen.genRand.Next(7);
      if (WorldGen.treeBG == 0)
        WorldGen.treeBG = WorldGen.genRand.Next(7);
      if (WorldGen.treeBG == 3 && WorldGen.genRand.Next(3) == 0)
        WorldGen.treeBG = 31;
      if (WorldGen.treeBG == 5 && WorldGen.genRand.Next(2) == 0)
        WorldGen.treeBG = 51;
      if (WorldGen.treeBG == 7 && WorldGen.genRand.Next(4) == 0)
        WorldGen.treeBG = WorldGen.genRand.Next(71, 74);
      WorldGen.setBG(0, WorldGen.treeBG);
      WorldGen.setBG(1, WorldGen.genRand.Next(2));
      WorldGen.setBG(2, WorldGen.genRand.Next(2));
      WorldGen.snowBG = WorldGen.genRand.Next(6);
      if (WorldGen.snowBG == 2 && WorldGen.genRand.Next(2) == 0)
        WorldGen.snowBG = WorldGen.genRand.Next(2) != 0 ? 22 : 21;
      if (WorldGen.snowBG == 3 && WorldGen.genRand.Next(2) == 0)
        WorldGen.snowBG = WorldGen.genRand.Next(2) != 0 ? 32 : 31;
      if (WorldGen.snowBG == 4 && WorldGen.genRand.Next(2) == 0)
        WorldGen.snowBG = WorldGen.genRand.Next(2) != 0 ? 42 : 41;
      WorldGen.setBG(3, WorldGen.snowBG);
      WorldGen.setBG(4, WorldGen.genRand.Next(2));
      WorldGen.setBG(5, WorldGen.genRand.Next(3));
      WorldGen.setBG(6, WorldGen.genRand.Next(2));
      WorldGen.setBG(7, WorldGen.genRand.Next(3));
    }

    public static void RandomizeTreeStyle()
    {
      if (Main.maxTilesX == 4200)
      {
        Main.treeX[0] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.5 - (double) Main.maxTilesX * 0.25), (int) ((double) Main.maxTilesX * 0.5 + (double) Main.maxTilesX * 0.25));
        Main.treeStyle[0] = WorldGen.genRand.Next(6);
        Main.treeStyle[1] = WorldGen.genRand.Next(6);
        while (Main.treeStyle[1] == Main.treeStyle[0])
          Main.treeStyle[1] = WorldGen.genRand.Next(6);
        Main.treeX[1] = Main.maxTilesX;
        Main.treeX[2] = Main.maxTilesX;
      }
      else if (Main.maxTilesX == 6400)
      {
        Main.treeX[0] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.334 - (double) Main.maxTilesX * 0.200000002980232), (int) ((double) Main.maxTilesX * 0.334 + (double) Main.maxTilesX * 0.200000002980232));
        Main.treeX[1] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.667 - (double) Main.maxTilesX * 0.200000002980232), (int) ((double) Main.maxTilesX * 0.667 + (double) Main.maxTilesX * 0.200000002980232));
        Main.treeStyle[0] = WorldGen.genRand.Next(6);
        Main.treeStyle[1] = WorldGen.genRand.Next(6);
        Main.treeStyle[2] = WorldGen.genRand.Next(6);
        while (Main.treeStyle[1] == Main.treeStyle[0])
          Main.treeStyle[1] = WorldGen.genRand.Next(6);
        while (Main.treeStyle[2] == Main.treeStyle[0] || Main.treeStyle[2] == Main.treeStyle[1])
          Main.treeStyle[2] = WorldGen.genRand.Next(6);
        Main.treeX[2] = Main.maxTilesX;
      }
      else
      {
        Main.treeX[0] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.25 - (double) Main.maxTilesX * 0.150000005960464), (int) ((double) Main.maxTilesX * 0.25 + (double) Main.maxTilesX * 0.150000005960464));
        Main.treeX[1] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.5 - (double) Main.maxTilesX * 0.150000005960464), (int) ((double) Main.maxTilesX * 0.5 + (double) Main.maxTilesX * 0.150000005960464));
        Main.treeX[2] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.75 - (double) Main.maxTilesX * 0.150000005960464), (int) ((double) Main.maxTilesX * 0.75 + (double) Main.maxTilesX * 0.150000005960464));
        Main.treeStyle[0] = WorldGen.genRand.Next(6);
        Main.treeStyle[1] = WorldGen.genRand.Next(6);
        Main.treeStyle[2] = WorldGen.genRand.Next(6);
        Main.treeStyle[3] = WorldGen.genRand.Next(6);
        while (Main.treeStyle[1] == Main.treeStyle[0])
          Main.treeStyle[1] = WorldGen.genRand.Next(6);
        while (Main.treeStyle[2] == Main.treeStyle[0] || Main.treeStyle[2] == Main.treeStyle[1])
          Main.treeStyle[2] = WorldGen.genRand.Next(6);
        while (Main.treeStyle[3] == Main.treeStyle[0] || Main.treeStyle[3] == Main.treeStyle[1] || Main.treeStyle[3] == Main.treeStyle[2])
          Main.treeStyle[3] = WorldGen.genRand.Next(6);
      }
    }

    public static void RandomizeCaveBackgrounds()
    {
      int maxValue = 8;
      if (Main.maxTilesX == 4200)
      {
        Main.caveBackX[0] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.5 - (double) Main.maxTilesX * 0.25), (int) ((double) Main.maxTilesX * 0.5 + (double) Main.maxTilesX * 0.25));
        Main.caveBackX[1] = Main.maxTilesX;
        Main.caveBackX[2] = Main.maxTilesX;
        Main.caveBackStyle[0] = WorldGen.genRand.Next(maxValue);
        Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
        while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
          Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
      }
      else if (Main.maxTilesX == 6400)
      {
        Main.caveBackX[0] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.334 - (double) Main.maxTilesX * 0.200000002980232), (int) ((double) Main.maxTilesX * 0.334 + (double) Main.maxTilesX * 0.200000002980232));
        Main.caveBackX[1] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.667 - (double) Main.maxTilesX * 0.200000002980232), (int) ((double) Main.maxTilesX * 0.667 + (double) Main.maxTilesX * 0.200000002980232));
        Main.caveBackX[2] = Main.maxTilesX;
        Main.caveBackStyle[0] = WorldGen.genRand.Next(maxValue);
        Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
        Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
        while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
          Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
        while (Main.caveBackStyle[2] == Main.caveBackStyle[0] || Main.caveBackStyle[2] == Main.caveBackStyle[1])
          Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
      }
      else
      {
        Main.caveBackX[0] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.25 - (double) Main.maxTilesX * 0.150000005960464), (int) ((double) Main.maxTilesX * 0.25 + (double) Main.maxTilesX * 0.150000005960464));
        Main.caveBackX[1] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.5 - (double) Main.maxTilesX * 0.150000005960464), (int) ((double) Main.maxTilesX * 0.5 + (double) Main.maxTilesX * 0.150000005960464));
        Main.caveBackX[2] = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.75 - (double) Main.maxTilesX * 0.150000005960464), (int) ((double) Main.maxTilesX * 0.75 + (double) Main.maxTilesX * 0.150000005960464));
        Main.caveBackStyle[0] = WorldGen.genRand.Next(maxValue);
        Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
        Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
        Main.caveBackStyle[3] = WorldGen.genRand.Next(maxValue);
        while (Main.caveBackStyle[1] == Main.caveBackStyle[0])
          Main.caveBackStyle[1] = WorldGen.genRand.Next(maxValue);
        while (Main.caveBackStyle[2] == Main.caveBackStyle[0] || Main.caveBackStyle[2] == Main.caveBackStyle[1])
          Main.caveBackStyle[2] = WorldGen.genRand.Next(maxValue);
        while (Main.caveBackStyle[3] == Main.caveBackStyle[0] || Main.caveBackStyle[3] == Main.caveBackStyle[1] || Main.caveBackStyle[3] == Main.caveBackStyle[2])
          Main.caveBackStyle[3] = WorldGen.genRand.Next(maxValue);
      }
      Main.iceBackStyle = WorldGen.genRand.Next(4);
      Main.hellBackStyle = WorldGen.genRand.Next(3);
      Main.jungleBackStyle = WorldGen.genRand.Next(2);
    }

    private static void ResetGenerator()
    {
      WorldGen.mudWall = false;
      WorldGen.hellChest = 0;
      WorldGen.JungleX = 0;
      WorldGen.numMCaves = 0;
      WorldGen.numIslandHouses = 0;
      WorldGen.houseCount = 0;
      WorldGen.dEnteranceX = 0;
      WorldGen.numDRooms = 0;
      WorldGen.numDDoors = 0;
      WorldGen.numDPlats = 0;
      WorldGen.numJChests = 0;
      WorldGen.JungleItemCount = 0;
    }

    public static bool mayanTrap(int x2, int y2)
    {
      int num1 = 1;
      if (WorldGen.genRand.Next(3) == 0)
        num1 = 0;
      int i1 = x2;
      int j1 = y2;
      while (!WorldGen.SolidTile(i1, j1))
      {
        ++j1;
        if (j1 >= Main.maxTilesY - 300)
          return false;
      }
      if ((int) Main.tile[i1, j1].type == 232)
        return false;
      int j2 = j1 - 1;
      if ((int) Main.tile[i1, j2].liquid > 0 && Main.tile[i1, j2].lava())
        return false;
      if (num1 == -1 && WorldGen.genRand.Next(20) == 0)
        num1 = 2;
      else if (num1 == -1)
        num1 = WorldGen.genRand.Next(2);
      if (Main.tile[i1, j2].nactive() || Main.tile[i1 - 1, j2].nactive() || (Main.tile[i1 + 1, j2].nactive() || Main.tile[i1, j2 - 1].nactive()) || (Main.tile[i1 - 1, j2 - 1].nactive() || Main.tile[i1 + 1, j2 - 1].nactive() || (Main.tile[i1, j2 - 2].nactive() || Main.tile[i1 - 1, j2 - 2].nactive())) || (Main.tile[i1 + 1, j2 - 2].nactive() || (int) Main.tile[i1, j2 + 1].type == 48 || (int) Main.tile[i1, j2 + 1].type == 232))
        return false;
      if (num1 == 0)
      {
        int i2 = i1;
        int j3 = j2 - WorldGen.genRand.Next(3);
        while (!WorldGen.SolidTile(i2, j3))
          --i2;
        int i3 = i2;
        int i4 = i1;
        while (!WorldGen.SolidTile(i4, j3))
          ++i4;
        int i5 = i4;
        int num2 = i1 - i3;
        int num3 = i5 - i1;
        bool flag1 = false;
        bool flag2 = false;
        if (num2 > 5 && num2 < 50)
          flag1 = true;
        if (num3 > 5 && num3 < 50)
          flag2 = true;
        if (flag1 && !WorldGen.SolidTile(i3, j3 + 1))
          flag1 = false;
        if (flag2 && !WorldGen.SolidTile(i5, j3 + 1))
          flag2 = false;
        if (flag1 && ((int) Main.tile[i3, j3].type == 10 || (int) Main.tile[i3, j3].type == 48 || ((int) Main.tile[i3, j3 + 1].type == 10 || (int) Main.tile[i3, j3 + 1].type == 48)))
          flag1 = false;
        if (flag2 && ((int) Main.tile[i5, j3].type == 10 || (int) Main.tile[i5, j3].type == 48 || ((int) Main.tile[i5, j3 + 1].type == 10 || (int) Main.tile[i5, j3 + 1].type == 48)))
          flag2 = false;
        int num4;
        int i6;
        if (flag1 & flag2)
        {
          num4 = 1;
          i6 = i3;
          if (WorldGen.genRand.Next(2) == 0)
          {
            i6 = i5;
            num4 = -1;
          }
        }
        else if (flag2)
        {
          i6 = i5;
          num4 = -1;
        }
        else
        {
          if (!flag1)
            return false;
          i6 = i3;
          num4 = 1;
        }
        if ((int) Main.tile[i6, j3].wall != 87 || (int) Main.tile[i6, j3].type == 190 || ((int) Main.tile[i6, j3].type == 135 || (int) Main.tile[i6, j3].type == 137) || (int) Main.tile[i6, j3].type == 232)
          return false;
        WorldGen.PlaceTile(i1, j2, 135, true, true, -1, 6);
        WorldGen.KillTile(i6, j3, false, false, false);
        int num5 = WorldGen.genRand.Next(3);
        if (Main.tile[i1, j2].wire())
          num5 = 0;
        if (Main.tile[i1, j2].wire2())
          num5 = 1;
        if (Main.tile[i1, j2].wire3())
          num5 = 2;
        int num6 = Math.Abs(i6 - i1);
        int style = 1;
        int num7 = 10;
        if (num6 < num7 && WorldGen.genRand.Next(3) != 0)
          style = 2;
        WorldGen.PlaceTile(i6, j3, 137, true, true, -1, style);
        if (num4 == 1)
          Main.tile[i6, j3].frameX += (short) 18;
        int num8 = WorldGen.genRand.Next(5);
        int j4 = j3;
        while (num8 > 0)
        {
          --num8;
          --j4;
          if (WorldGen.SolidTile(i6, j4) && WorldGen.SolidTile(i6 - num4, j4) && !WorldGen.SolidTile(i6 + num4, j4))
          {
            WorldGen.PlaceTile(i6, j4, 137, true, true, -1, style);
            if (num4 == 1)
              Main.tile[i6, j4].frameX += (short) 18;
            if (num5 == 0)
              Main.tile[i6, j4].wire(true);
            else if (num5 == 1)
              Main.tile[i6, j4].wire2(true);
            else if (num5 == 2)
              Main.tile[i6, j4].wire3(true);
          }
          else
            break;
        }
        int index1 = i1;
        int index2 = j2;
        while (index1 != i6 || index2 != j3)
        {
          if (num5 == 0)
            Main.tile[index1, index2].wire(true);
          else if (num5 == 1)
            Main.tile[index1, index2].wire2(true);
          else if (num5 == 2)
            Main.tile[index1, index2].wire3(true);
          if (index1 > i6)
            --index1;
          if (index1 < i6)
            ++index1;
          if (num5 == 0)
            Main.tile[index1, index2].wire(true);
          else if (num5 == 1)
            Main.tile[index1, index2].wire2(true);
          else if (num5 == 2)
            Main.tile[index1, index2].wire3(true);
          if (index2 > j3)
            --index2;
          if (index2 < j3)
            ++index2;
          if (num5 == 0)
            Main.tile[index1, index2].wire(true);
          else if (num5 == 1)
            Main.tile[index1, index2].wire2(true);
          else if (num5 == 2)
            Main.tile[index1, index2].wire3(true);
        }
        return true;
      }
      if (num1 != 1)
        return false;
      int i7 = i1;
      int j5 = j2;
      while (!WorldGen.SolidTile(i7, j5))
      {
        --j5;
        if ((double) j5 < Main.worldSurface)
          return false;
      }
      int num9 = Math.Abs(j5 - j2);
      if (num9 < 3)
        return false;
      int num10 = WorldGen.genRand.Next(3);
      if (Main.tile[i1, j2].wire())
        num10 = 0;
      if (Main.tile[i1, j2].wire2())
        num10 = 1;
      if (Main.tile[i1, j2].wire3())
        num10 = 2;
      int style1 = 3;
      if (num9 < 16 && WorldGen.genRand.Next(3) != 0)
        style1 = 4;
      if ((int) Main.tile[i7, j5].type == 135 || (int) Main.tile[i7, j5].type == 137 || ((int) Main.tile[i7, j5].type == 232 || (int) Main.tile[i7, j5].wall != 87))
        return false;
      WorldGen.PlaceTile(i1, j2, 135, true, true, -1, 6);
      WorldGen.PlaceTile(i7, j5, 137, true, true, -1, style1);
      for (int index = 0; index < 2; ++index)
      {
        int num2 = WorldGen.genRand.Next(1, 5);
        int i2 = i7;
        int num3 = -1;
        if (index == 1)
          num3 = 1;
        while (num2 > 0)
        {
          --num2;
          i2 += num3;
          if (WorldGen.SolidTile(i2, j5 - 1) && !WorldGen.SolidTile(i2, j5 + 1))
          {
            WorldGen.PlaceTile(i2, j5, 137, true, true, -1, style1);
            if (num10 == 0)
              Main.tile[i2, j5].wire(true);
            else if (num10 == 1)
              Main.tile[i2, j5].wire2(true);
            else if (num10 == 2)
              Main.tile[i2, j5].wire3(true);
          }
          else
            break;
        }
      }
      int index3 = i1;
      int index4 = j2;
      while (index3 != i7 || index4 != j5)
      {
        if (num10 == 0)
          Main.tile[index3, index4].wire(true);
        else if (num10 == 1)
          Main.tile[index3, index4].wire2(true);
        else if (num10 == 2)
          Main.tile[index3, index4].wire3(true);
        if (index3 > i7)
          --index3;
        if (index3 < i7)
          ++index3;
        if (num10 == 0)
          Main.tile[index3, index4].wire(true);
        else if (num10 == 1)
          Main.tile[index3, index4].wire2(true);
        else if (num10 == 2)
          Main.tile[index3, index4].wire3(true);
        if (index4 > j5)
          --index4;
        if (index4 < j5)
          ++index4;
        if (num10 == 0)
          Main.tile[index3, index4].wire(true);
        else if (num10 == 1)
          Main.tile[index3, index4].wire2(true);
        else if (num10 == 2)
          Main.tile[index3, index4].wire3(true);
      }
      return true;
    }

    public static bool placeTrap(int x2, int y2, int type = -1)
    {
      int index1 = x2;
      int j1 = y2;
      bool flag1 = false;
      bool flag2 = false;
      while (!WorldGen.SolidTile(index1, j1))
      {
        ++j1;
        if (j1 >= Main.maxTilesY - 300)
          flag2 = true;
      }
      int index2 = j1 - 1;
      if ((int) Main.tile[index1, index2].wall == 87)
        return false;
      if ((int) Main.tile[index1, index2].liquid > 0 && Main.tile[index1, index2].lava())
        flag1 = true;
      if (type == -1 && WorldGen.genRand.Next(20) == 0)
        type = 2;
      else if (type == -1 && index2 > WorldGen.lavaLine + 30 && WorldGen.genRand.Next(6) != 0)
        type = 3;
      else if (type == -1)
        type = WorldGen.genRand.Next(2);
      if (!WorldGen.InWorld(index1, index2, 3) || flag1 && type != 3 || (flag2 && type != 3 || (Main.tile[index1, index2].nactive() || Main.tile[index1 - 1, index2].nactive())) || (Main.tile[index1 + 1, index2].nactive() || Main.tile[index1, index2 - 1].nactive() || (Main.tile[index1 - 1, index2 - 1].nactive() || Main.tile[index1 + 1, index2 - 1].nactive()) || (Main.tile[index1, index2 - 2].nactive() || Main.tile[index1 - 1, index2 - 2].nactive() || (Main.tile[index1 + 1, index2 - 2].nactive() || (int) Main.tile[index1, index2 + 1].type == 48))) || (int) Main.tile[index1, index2 + 1].type == 232)
        return false;
      if (type == 1)
      {
        for (int index3 = index1 - 3; index3 <= index1 + 3; ++index3)
        {
          for (int index4 = index2 - 3; index4 <= index2 + 3; ++index4)
          {
            if ((int) Main.tile[index3, index4].type == 147 || (int) Main.tile[index3, index4].type == 161)
              type = 0;
          }
        }
      }
      if (type == 0)
      {
        int i1 = index1;
        int j2 = index2 - WorldGen.genRand.Next(3);
        while (!WorldGen.SolidTile(i1, j2))
          --i1;
        int i2 = i1;
        int i3 = index1;
        while (!WorldGen.SolidTile(i3, j2))
          ++i3;
        int i4 = i3;
        int num1 = index1 - i2;
        int num2 = i4 - index1;
        bool flag3 = false;
        bool flag4 = false;
        if (num1 > 5 && num1 < 50)
          flag3 = true;
        if (num2 > 5 && num2 < 50)
          flag4 = true;
        if (flag3 && !WorldGen.SolidTile(i2, j2 + 1))
          flag3 = false;
        if (flag4 && !WorldGen.SolidTile(i4, j2 + 1))
          flag4 = false;
        if (flag3 && ((int) Main.tile[i2, j2].type == 10 || (int) Main.tile[i2, j2].type == 48 || ((int) Main.tile[i2, j2 + 1].type == 10 || (int) Main.tile[i2, j2 + 1].type == 48)))
          flag3 = false;
        if (flag4 && ((int) Main.tile[i4, j2].type == 10 || (int) Main.tile[i4, j2].type == 48 || ((int) Main.tile[i4, j2 + 1].type == 10 || (int) Main.tile[i4, j2 + 1].type == 48)))
          flag4 = false;
        int num3;
        int i5;
        if (flag3 & flag4)
        {
          num3 = 1;
          i5 = i2;
          if (WorldGen.genRand.Next(2) == 0)
          {
            i5 = i4;
            num3 = -1;
          }
        }
        else if (flag4)
        {
          i5 = i4;
          num3 = -1;
        }
        else if (flag3)
        {
          i5 = i2;
          num3 = 1;
        }
        else
        {
          ++WorldGen.trapDiag[type, 0];
          return false;
        }
        if ((int) Main.tile[i5, j2].type == 190)
        {
          ++WorldGen.trapDiag[type, 0];
          return false;
        }
        if ((int) Main.tile[index1, index2].wall > 0)
          WorldGen.PlaceTile(index1, index2, 135, true, true, -1, 2);
        else
          WorldGen.PlaceTile(index1, index2, 135, true, true, -1, WorldGen.genRand.Next(2, 4));
        WorldGen.KillTile(i5, j2, false, false, false);
        WorldGen.PlaceTile(i5, j2, 137, true, true, -1, 0);
        if (num3 == 1)
          Main.tile[i5, j2].frameX += (short) 18;
        int index3 = index1;
        int index4 = index2;
        while (index3 != i5 || index4 != j2)
        {
          Main.tile[index3, index4].wire(true);
          if (index3 > i5)
            --index3;
          if (index3 < i5)
            ++index3;
          Main.tile[index3, index4].wire(true);
          if (index4 > j2)
            --index4;
          if (index4 < j2)
            ++index4;
          Main.tile[index3, index4].wire(true);
        }
        ++WorldGen.trapDiag[type, 1];
        return true;
      }
      if (type == 1)
      {
        int num1 = index1;
        int num2 = index2 - 8;
        int i1 = num1 + WorldGen.genRand.Next(-1, 2);
        bool flag3 = true;
        while (flag3)
        {
          bool flag4 = true;
          int num3 = 0;
          for (int i2 = i1 - 2; i2 <= i1 + 3; ++i2)
          {
            for (int j2 = num2; j2 <= num2 + 3; ++j2)
            {
              if (!WorldGen.SolidTile(i2, j2))
                flag4 = false;
              if (Main.tile[i2, j2].active() && ((int) Main.tile[i2, j2].type == 0 || (int) Main.tile[i2, j2].type == 1 || (int) Main.tile[i2, j2].type == 59))
                ++num3;
            }
          }
          --num2;
          if ((double) num2 < Main.worldSurface)
          {
            ++WorldGen.trapDiag[type, 0];
            return false;
          }
          if (flag4 && num3 > 2)
            flag3 = false;
        }
        if (index2 - num2 <= 5 || index2 - num2 >= 40)
        {
          ++WorldGen.trapDiag[type, 0];
          return false;
        }
        for (int i2 = i1; i2 <= i1 + 1; ++i2)
        {
          for (int j2 = num2; j2 <= index2; ++j2)
          {
            if (WorldGen.SolidTile(i2, j2))
              WorldGen.KillTile(i2, j2, false, false, false);
          }
        }
        for (int i2 = i1 - 2; i2 <= i1 + 3; ++i2)
        {
          for (int j2 = num2 - 2; j2 <= num2 + 3; ++j2)
          {
            if (WorldGen.SolidTile(i2, j2))
              Main.tile[i2, j2].type = (ushort) 1;
          }
        }
        WorldGen.PlaceTile(index1, index2, 135, true, true, -1, WorldGen.genRand.Next(2, 4));
        WorldGen.PlaceTile(i1, num2 + 2, 130, true, false, -1, 0);
        WorldGen.PlaceTile(i1 + 1, num2 + 2, 130, true, false, -1, 0);
        WorldGen.PlaceTile(i1 + 1, num2 + 1, 138, true, false, -1, 0);
        int index3 = num2 + 2;
        Main.tile[i1, index3].wire(true);
        Main.tile[i1 + 1, index3].wire(true);
        int j3 = index3 + 1;
        WorldGen.PlaceTile(i1, j3, 130, true, false, -1, 0);
        WorldGen.PlaceTile(i1 + 1, j3, 130, true, false, -1, 0);
        Main.tile[i1, j3].wire(true);
        Main.tile[i1 + 1, j3].wire(true);
        WorldGen.PlaceTile(i1, j3 + 1, 130, true, false, -1, 0);
        WorldGen.PlaceTile(i1 + 1, j3 + 1, 130, true, false, -1, 0);
        Main.tile[i1, j3 + 1].wire(true);
        Main.tile[i1 + 1, j3 + 1].wire(true);
        int index4 = index1;
        int index5 = index2;
        while (index4 != i1 || index5 != j3)
        {
          Main.tile[index4, index5].wire(true);
          if (index4 > i1)
            --index4;
          if (index4 < i1)
            ++index4;
          Main.tile[index4, index5].wire(true);
          if (index5 > j3)
            --index5;
          if (index5 < j3)
            ++index5;
          Main.tile[index4, index5].wire(true);
        }
        ++WorldGen.trapDiag[type, 1];
        return true;
      }
      if (type == 2)
      {
        int num = WorldGen.genRand.Next(4, 7);
        int i1 = index1 + WorldGen.genRand.Next(-1, 2);
        int j2 = index2;
        for (int index3 = 0; index3 < num; ++index3)
        {
          ++j2;
          if (!WorldGen.SolidTile(i1, j2))
          {
            ++WorldGen.trapDiag[type, 0];
            return false;
          }
        }
        for (int i2 = i1 - 2; i2 <= i1 + 2; ++i2)
        {
          for (int j3 = j2 - 2; j3 <= j2 + 2; ++j3)
          {
            if (!WorldGen.SolidTile(i2, j3))
              return false;
          }
        }
        WorldGen.KillTile(i1, j2, false, false, false);
        Main.tile[i1, j2].active(true);
        Main.tile[i1, j2].type = (ushort) 141;
        Main.tile[i1, j2].frameX = (short) 0;
        Main.tile[i1, j2].frameY = (short) (18 * WorldGen.genRand.Next(2));
        WorldGen.PlaceTile(index1, index2, 135, true, true, -1, WorldGen.genRand.Next(2, 4));
        int index4 = index1;
        int index5 = index2;
        while (index4 != i1 || index5 != j2)
        {
          Main.tile[index4, index5].wire(true);
          if (index4 > i1)
            --index4;
          if (index4 < i1)
            ++index4;
          Main.tile[index4, index5].wire(true);
          if (index5 > j2)
            --index5;
          if (index5 < j2)
            ++index5;
          Main.tile[index4, index5].wire(true);
        }
        ++WorldGen.trapDiag[type, 1];
      }
      else if (type == 3)
      {
        int num1 = 0;
        int num2 = 0;
        for (int index3 = 0; index3 < 4; ++index3)
        {
          if (num1 < 2 && WorldGen.genRand.Next(5) == 0)
          {
            ++num1;
          }
          else
          {
            int num3 = index1;
            int j2 = index2;
            bool flag3 = false;
            int i1 = num2 != 0 ? num3 + WorldGen.genRand.Next(-15, 16) : num3 + WorldGen.genRand.Next(-1, 2);
            int num4 = WorldGen.genRand.Next(3, 6 + (num2 > 0).ToInt() * 3);
            for (int index4 = 0; index4 < num4; ++index4)
            {
              ++j2;
              if (!WorldGen.SolidTile(i1, j2))
              {
                ++WorldGen.trapDiag[type, 0];
                flag3 = true;
                break;
              }
            }
            if (!flag3)
            {
              int num5 = 2;
              for (int i2 = i1 - num5; i2 <= i1 + num5; ++i2)
              {
                for (int j3 = j2 - num5; j3 <= j2 + num5; ++j3)
                {
                  if (!WorldGen.SolidTile(i2, j3))
                  {
                    ++WorldGen.trapDiag[type, 0];
                    flag3 = true;
                    break;
                  }
                }
                if (flag3)
                  break;
              }
              if (!flag3)
              {
                int num6 = 10;
                for (int i2 = i1; i2 <= i1 + 1; ++i2)
                {
                  int j3 = j2;
                  while (j3 > j2 - 20 && WorldGen.SolidTile(i2, j3))
                    --j3;
                  for (int j4 = j3 - num6; j4 <= j3; ++j4)
                  {
                    if (WorldGen.SolidTile(i2, j4))
                    {
                      ++WorldGen.trapDiag[type, 0];
                      flag3 = true;
                      break;
                    }
                  }
                  if (flag3)
                    break;
                }
                if (!flag3)
                {
                  WorldGen.KillTile(i1, j2, false, false, false);
                  WorldGen.KillTile(i1 + 1, j2, false, false, false);
                  int num7 = WorldGen.genRand.Next(2);
                  for (int index4 = 0; index4 < 2; ++index4)
                  {
                    Main.tile[i1 + index4, j2].active(true);
                    Main.tile[i1 + index4, j2].type = (ushort) 443;
                    Main.tile[i1 + index4, j2].frameX = (short) (18 * index4 + 36 * num7);
                    Main.tile[i1 + index4, j2].frameY = (short) 0;
                  }
                  WorldGen.PlaceTile(index1, index2, 135, true, true, -1, WorldGen.genRand.Next(2, 4));
                  int index5 = index1;
                  int index6 = index2;
                  while (index5 != i1 || index6 != j2)
                  {
                    Main.tile[index5, index6].wire(true);
                    if (index5 > i1)
                      --index5;
                    if (index5 < i1)
                      ++index5;
                    Main.tile[index5, index6].wire(true);
                    if (index6 > j2)
                      --index6;
                    if (index6 < j2)
                      ++index6;
                    Main.tile[index5, index6].wire(true);
                  }
                  ++num2;
                  ++WorldGen.trapDiag[type, 1];
                }
              }
            }
          }
        }
      }
      return false;
    }

    public static int countTiles(int x, int y, bool jungle = false, bool lavaOk = false)
    {
      WorldGen.numTileCount = 0;
      WorldGen.lavaCount = 0;
      WorldGen.iceCount = 0;
      WorldGen.rockCount = 0;
      WorldGen.nextCount(x, y, jungle, lavaOk);
      return WorldGen.numTileCount;
    }

    public static void nextCount(int x, int y, bool jungle = false, bool lavaOk = false)
    {
      if (WorldGen.numTileCount >= WorldGen.maxTileCount)
        return;
      if (x <= 1 || x >= Main.maxTilesX - 1 || (y <= 1 || y >= Main.maxTilesY - 1))
      {
        WorldGen.numTileCount = WorldGen.maxTileCount;
      }
      else
      {
        for (int index = 0; index < WorldGen.numTileCount; ++index)
        {
          if (WorldGen.countX[index] == x && WorldGen.countY[index] == y)
            return;
        }
        if (!jungle)
        {
          if ((int) Main.tile[x, y].wall != 0)
          {
            WorldGen.numTileCount = WorldGen.maxTileCount;
            return;
          }
          if (!lavaOk)
          {
            if (Main.tile[x, y].lava() && (int) Main.tile[x, y].liquid > 0)
            {
              ++WorldGen.lavaCount;
              WorldGen.numTileCount = WorldGen.maxTileCount;
              return;
            }
          }
          else if (Main.tile[x, y].lava() && (int) Main.tile[x, y].liquid > 0)
            ++WorldGen.lavaCount;
        }
        if (Main.tile[x, y].active())
        {
          if ((int) Main.tile[x, y].type == 1)
            ++WorldGen.rockCount;
          if ((int) Main.tile[x, y].type == 147 || (int) Main.tile[x, y].type == 161)
            ++WorldGen.iceCount;
        }
        if (WorldGen.SolidTile(x, y))
          return;
        WorldGen.countX[WorldGen.numTileCount] = x;
        WorldGen.countY[WorldGen.numTileCount] = y;
        ++WorldGen.numTileCount;
        WorldGen.nextCount(x - 1, y, jungle, lavaOk);
        WorldGen.nextCount(x + 1, y, jungle, lavaOk);
        WorldGen.nextCount(x, y - 1, jungle, lavaOk);
        WorldGen.nextCount(x, y + 1, jungle, lavaOk);
      }
    }

    public static int countDirtTiles(int x, int y)
    {
      WorldGen.numTileCount = 0;
      WorldGen.nextDirtCount(x, y);
      return WorldGen.numTileCount;
    }

    public static void nextDirtCount(int x, int y)
    {
      if (WorldGen.numTileCount >= WorldGen.maxTileCount)
        return;
      if (x <= 1 || x >= Main.maxTilesX - 1 || (y <= 1 || y >= Main.maxTilesY - 1))
      {
        WorldGen.numTileCount = WorldGen.maxTileCount;
      }
      else
      {
        for (int index = 0; index < WorldGen.numTileCount; ++index)
        {
          if (WorldGen.countX[index] == x && WorldGen.countY[index] == y)
            return;
        }
        if (Main.tile[x, y].active() && ((int) Main.tile[x, y].type == 147 || (int) Main.tile[x, y].type == 161))
          WorldGen.numTileCount = WorldGen.maxTileCount;
        else if ((int) Main.tile[x, y].wall == 78 || (int) Main.tile[x, y].wall == 83 || (int) Main.tile[x, y].wall == 3)
        {
          WorldGen.numTileCount = WorldGen.maxTileCount;
        }
        else
        {
          if (WorldGen.SolidTile(x, y) || (int) Main.tile[x, y].wall != 2 && (int) Main.tile[x, y].wall != 59)
            return;
          WorldGen.countX[WorldGen.numTileCount] = x;
          WorldGen.countY[WorldGen.numTileCount] = y;
          ++WorldGen.numTileCount;
          WorldGen.nextDirtCount(x - 1, y);
          WorldGen.nextDirtCount(x + 1, y);
          WorldGen.nextDirtCount(x, y - 1);
          WorldGen.nextDirtCount(x, y + 1);
          WorldGen.nextDirtCount(x - 1, y - 1);
          WorldGen.nextDirtCount(x - 1, y + 1);
          WorldGen.nextDirtCount(x + 1, y - 1);
          WorldGen.nextDirtCount(x + 1, y + 1);
          WorldGen.nextDirtCount(x - 2, y);
          WorldGen.nextDirtCount(x + 2, y);
        }
      }
    }

    public static bool InWorld(int x, int y, int fluff = 0)
    {
      return x >= fluff && x < Main.maxTilesX - fluff && (y >= fluff && y < Main.maxTilesY - fluff);
    }

    public static void gemCave(int x, int y)
    {
      WorldGen.countTiles(x, y, false, false);
      for (int index = 0; index < 6; ++index)
        WorldGen.gem[index] = false;
      WorldGen.gem[WorldGen.genRand.Next(6)] = true;
      for (int index = 0; index < 6; ++index)
      {
        if (WorldGen.genRand.Next(6) == 0)
          WorldGen.gem[index] = true;
      }
      WorldGen.Spread.Gem(x, y);
    }

    public static int randGem()
    {
      int index = WorldGen.genRand.Next(6);
      while (!WorldGen.gem[index])
        index = WorldGen.genRand.Next(6);
      return index;
    }

    public static ushort randGemTile()
    {
      if (WorldGen.genRand.Next(20) != 0)
        return 1;
      switch ((ushort) WorldGen.randGem())
      {
        case 0:
          return 67;
        case 1:
          return 66;
        case 2:
          return 63;
        case 3:
          return 65;
        case 4:
          return 64;
        default:
          return 68;
      }
    }

    public static void randMoss()
    {
      WorldGen.mossType[0] = WorldGen.genRand.Next(5);
      WorldGen.mossType[1] = WorldGen.genRand.Next(5);
      while (WorldGen.mossType[1] == WorldGen.mossType[0])
        WorldGen.mossType[1] = WorldGen.genRand.Next(5);
      WorldGen.mossType[2] = WorldGen.genRand.Next(5);
      while (WorldGen.mossType[2] == WorldGen.mossType[0] || WorldGen.mossType[2] == WorldGen.mossType[1])
        WorldGen.mossType[2] = WorldGen.genRand.Next(5);
    }

    public static void setMoss(int x, int y)
    {
      int index = (double) x >= (double) Main.maxTilesX * 0.334 ? ((double) x >= (double) Main.maxTilesX * 0.667 ? 2 : 1) : 0;
      WorldGen.mossWall = (byte) (54 + WorldGen.mossType[index]);
      WorldGen.mossTile = (byte) (179 + WorldGen.mossType[index]);
    }

    public static void tileCountAndDestroy()
    {
      for (int x = 10; x < Main.maxTilesX - 10; ++x)
      {
        for (int y = 10; y < Main.maxTilesY - 10; ++y)
        {
          if (Main.tile[x, y].active() && WorldGen.tileCounter(x, y) < WorldGen.tileCounterMax)
            WorldGen.tileCounterKill();
        }
      }
    }

    public static int tileCounter(int x, int y)
    {
      WorldGen.tileCounterNum = 0;
      WorldGen.tileCounterNext(x, y);
      return WorldGen.tileCounterNum;
    }

    public static void tileCounterNext(int x, int y)
    {
      if (WorldGen.tileCounterNum >= WorldGen.tileCounterMax || x < 5 || (x > Main.maxTilesX - 5 || y < 5) || (y > Main.maxTilesY - 5 || !Main.tile[x, y].active() || (!Main.tileSolid[(int) Main.tile[x, y].type] || !TileID.Sets.CanBeClearedDuringGeneration[(int) Main.tile[x, y].type])))
        return;
      for (int index = 0; index < WorldGen.tileCounterNum; ++index)
      {
        if (WorldGen.tileCounterX[index] == x && WorldGen.tileCounterY[index] == y)
          return;
      }
      WorldGen.tileCounterX[WorldGen.tileCounterNum] = x;
      WorldGen.tileCounterY[WorldGen.tileCounterNum] = y;
      ++WorldGen.tileCounterNum;
      WorldGen.tileCounterNext(x - 1, y);
      WorldGen.tileCounterNext(x + 1, y);
      WorldGen.tileCounterNext(x, y - 1);
      WorldGen.tileCounterNext(x, y + 1);
    }

    public static void tileCounterKill()
    {
      for (int index1 = 0; index1 < WorldGen.tileCounterNum; ++index1)
      {
        int index2 = WorldGen.tileCounterX[index1];
        int index3 = WorldGen.tileCounterY[index1];
        Main.tile[index2, index3].active(false);
      }
    }

    private static void AddGenerationPass(string name, WorldGenLegacyMethod method)
    {
      WorldGen._generator.Append((GenPass) new PassLegacy(name, method));
    }

    private static void AddGenerationPass(string name, float weight, WorldGenLegacyMethod method)
    {
      WorldGen._generator.Append((GenPass) new PassLegacy(name, method, weight));
    }

    public static bool checkUnderground(int x, int y)
    {
      try
      {
        int num1 = 120;
        int num2 = 80;
        int num3 = 3;
        if ((double) y > Main.worldSurface + (double) num2)
          return true;
        if ((double) y < Main.worldSurface / 2.0)
          return false;
        int num4 = y - num2;
        int num5 = x - num1 / 2;
        int num6 = 0;
        if (num5 < 0)
          num5 = 0;
        if (num5 >= Main.maxTilesX - num1)
          num5 = Main.maxTilesX - num1 - 1;
        for (int i = num5; i < num5 + num1; ++i)
        {
          for (int j = num4; j < num4 + num3; ++j)
          {
            if (WorldGen.SolidTile(i, j) || (int) Main.tile[x, y].wall > 0)
              ++num6;
          }
        }
        if ((double) num6 >= (double) (num1 * num3) * 0.8)
          return true;
      }
      catch
      {
      }
      return false;
    }

    public static int GetNextJungleChestItem()
    {
      int num = 211;
      switch (WorldGen.JungleItemCount % 4)
      {
        case 0:
          num = 211;
          break;
        case 1:
          num = 212;
          break;
        case 2:
          num = 213;
          break;
        case 3:
          num = 964;
          break;
      }
      if (WorldGen.genRand.Next(50) == 0)
        num = 753;
      else if (WorldGen.genRand.Next(30) == 0)
        num = 2292;
      else if (WorldGen.genRand.Next(20) == 0)
        num = 3017;
      ++WorldGen.JungleItemCount;
      return num;
    }

    public static void generateWorld(int seed, GenerationProgress customProgressObject = null)
    {
      WorldGen._lastSeed = seed;
      WorldGen._generator = new WorldGenerator(seed);
      Main.rand = new UnifiedRandom(seed);
      MicroBiome.ResetAll();
      StructureMap structures = new StructureMap();
      double worldSurface = 0.0;
      WorldGen.worldSurfaceLow = 0.0;
      double worldSurfaceHigh = 0.0;
      double rockLayer = 0.0;
      double rockLayerLow = 0.0;
      double rockLayerHigh = 0.0;
      int copper = 7;
      int iron = 6;
      int silver = 9;
      int gold = 8;
      int dungeonSide = 0;
      ushort jungleHut = (ushort) WorldGen.genRand.Next(5);
      int howFar = 0;
      int[] PyrX = (int[]) null;
      int[] PyrY = (int[]) null;
      int numPyr = 0;
      int[] snowMinX = new int[Main.maxTilesY];
      int[] snowMaxX = new int[Main.maxTilesY];
      int snowTop = 0;
      int snowBottom = 0;
      float dub2 = 0.0f;
      int skyLakes = 1;
      if (Main.maxTilesX > 8000)
        ++skyLakes;
      if (Main.maxTilesX > 6000)
        ++skyLakes;
      for (int index1 = 0; index1 < WorldGen.hellChestItem.Length; ++index1)
      {
        bool flag = true;
        while (flag)
        {
          flag = false;
          WorldGen.hellChestItem[index1] = WorldGen.genRand.Next(WorldGen.hellChestItem.Length);
          for (int index2 = 0; index2 < index1; ++index2)
          {
            if (WorldGen.hellChestItem[index2] == WorldGen.hellChestItem[index1])
              flag = true;
          }
        }
      }
      WorldGen.AddGenerationPass("Reset", (WorldGenLegacyMethod) (progress =>
      {
        Liquid.ReInit();
        WorldGen.noTileActions = true;
        progress.Message = "";
        WorldGen.SetupStatueList();
        WorldGen.RandomizeWeather();
        Main.cloudAlpha = 0.0f;
        Main.maxRaining = 0.0f;
        WorldFile.tempMaxRain = 0.0f;
        Main.raining = false;
        WorldGen.heartCount = 0;
        Main.checkXMas();
        Main.checkHalloween();
        WorldGen.gen = true;
        WorldGen.ResetGenerator();
        WorldGen.numLarva = 0;
        int num = 86400;
        Main.slimeRainTime = (double) -WorldGen.genRand.Next(num * 2, num * 3);
        Main.cloudBGActive = (float) -WorldGen.genRand.Next(8640, 86400);
        WorldGen.CopperTierOre = (ushort) 7;
        WorldGen.IronTierOre = (ushort) 6;
        WorldGen.SilverTierOre = (ushort) 9;
        WorldGen.GoldTierOre = (ushort) 8;
        WorldGen.copperBar = 20;
        WorldGen.ironBar = 22;
        WorldGen.silverBar = 21;
        WorldGen.goldBar = 19;
        if (WorldGen.genRand.Next(2) == 0)
        {
          copper = 166;
          WorldGen.copperBar = 703;
          WorldGen.CopperTierOre = (ushort) 166;
        }
        if (WorldGen.genRand.Next(2) == 0)
        {
          iron = 167;
          WorldGen.ironBar = 704;
          WorldGen.IronTierOre = (ushort) 167;
        }
        if (WorldGen.genRand.Next(2) == 0)
        {
          silver = 168;
          WorldGen.silverBar = 705;
          WorldGen.SilverTierOre = (ushort) 168;
        }
        if (WorldGen.genRand.Next(2) == 0)
        {
          gold = 169;
          WorldGen.goldBar = 706;
          WorldGen.GoldTierOre = (ushort) 169;
        }
        WorldGen.crimson = WorldGen.genRand.Next(2) == 0;
        if (WorldGen.WorldGenParam_Evil == 0)
          WorldGen.crimson = false;
        if (WorldGen.WorldGenParam_Evil == 1)
          WorldGen.crimson = true;
        if ((int) jungleHut == 0)
          jungleHut = (ushort) 119;
        else if ((int) jungleHut == 1)
          jungleHut = (ushort) 120;
        else if ((int) jungleHut == 2)
          jungleHut = (ushort) 158;
        else if ((int) jungleHut == 3)
          jungleHut = (ushort) 175;
        else if ((int) jungleHut == 4)
          jungleHut = (ushort) 45;
        Main.worldID = WorldGen.genRand.Next(int.MaxValue);
        WorldGen.RandomizeTreeStyle();
        WorldGen.RandomizeCaveBackgrounds();
        WorldGen.RandomizeBackgrounds();
        WorldGen.RandomizeMoonState();
        dungeonSide = WorldGen.genRand.Next(2) == 0 ? -1 : 1;
      }));
      WorldGen.AddGenerationPass("Terrain", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[0].Value;
        int num1 = 0;
        int num2 = 0;
        worldSurface = (double) Main.maxTilesY * 0.3;
        worldSurface *= (double) WorldGen.genRand.Next(90, 110) * 0.005;
        rockLayer = worldSurface + (double) Main.maxTilesY * 0.2;
        rockLayer *= (double) WorldGen.genRand.Next(90, 110) * 0.01;
        WorldGen.worldSurfaceLow = worldSurface;
        worldSurfaceHigh = worldSurface;
        rockLayerLow = rockLayer;
        rockLayerHigh = rockLayer;
        for (int index1 = 0; index1 < Main.maxTilesX; ++index1)
        {
          float num3 = (float) index1 / (float) Main.maxTilesX;
          progress.Set(num3);
          if (worldSurface < WorldGen.worldSurfaceLow)
            WorldGen.worldSurfaceLow = worldSurface;
          if (worldSurface > worldSurfaceHigh)
            worldSurfaceHigh = worldSurface;
          if (rockLayer < rockLayerLow)
            rockLayerLow = rockLayer;
          if (rockLayer > rockLayerHigh)
            rockLayerHigh = rockLayer;
          if (num2 <= 0)
          {
            num1 = WorldGen.genRand.Next(0, 5);
            num2 = WorldGen.genRand.Next(5, 40);
            if (num1 == 0)
              num2 *= (int) ((double) WorldGen.genRand.Next(5, 30) * 0.2);
          }
          --num2;
          if ((double) index1 > (double) Main.maxTilesX * 0.43 && (double) index1 < (double) Main.maxTilesX * 0.57 && num1 >= 3)
            num1 = WorldGen.genRand.Next(3);
          if ((double) index1 > (double) Main.maxTilesX * 0.47 && (double) index1 < (double) Main.maxTilesX * 0.53)
            num1 = 0;
          if (num1 == 0)
          {
            while (WorldGen.genRand.Next(0, 7) == 0)
              worldSurface += (double) WorldGen.genRand.Next(-1, 2);
          }
          else if (num1 == 1)
          {
            while (WorldGen.genRand.Next(0, 4) == 0)
              --worldSurface;
            while (WorldGen.genRand.Next(0, 10) == 0)
              ++worldSurface;
          }
          else if (num1 == 2)
          {
            while (WorldGen.genRand.Next(0, 4) == 0)
              ++worldSurface;
            while (WorldGen.genRand.Next(0, 10) == 0)
              --worldSurface;
          }
          else if (num1 == 3)
          {
            while (WorldGen.genRand.Next(0, 2) == 0)
              --worldSurface;
            while (WorldGen.genRand.Next(0, 6) == 0)
              ++worldSurface;
          }
          else if (num1 == 4)
          {
            while (WorldGen.genRand.Next(0, 2) == 0)
              ++worldSurface;
            while (WorldGen.genRand.Next(0, 5) == 0)
              --worldSurface;
          }
          if (worldSurface < (double) Main.maxTilesY * 0.17)
          {
            worldSurface = (double) Main.maxTilesY * 0.17;
            num2 = 0;
          }
          else if (worldSurface > (double) Main.maxTilesY * 0.3)
          {
            worldSurface = (double) Main.maxTilesY * 0.3;
            num2 = 0;
          }
          if ((index1 < 275 || index1 > Main.maxTilesX - 275) && worldSurface > (double) Main.maxTilesY * 0.25)
          {
            worldSurface = (double) Main.maxTilesY * 0.25;
            num2 = 1;
          }
          while (WorldGen.genRand.Next(0, 3) == 0)
            rockLayer += (double) WorldGen.genRand.Next(-2, 3);
          if (rockLayer < worldSurface + (double) Main.maxTilesY * 0.05)
            ++rockLayer;
          if (rockLayer > worldSurface + (double) Main.maxTilesY * 0.35)
            --rockLayer;
          for (int index2 = 0; (double) index2 < worldSurface; ++index2)
          {
            Main.tile[index1, index2].active(false);
            Main.tile[index1, index2].frameX = (short) -1;
            Main.tile[index1, index2].frameY = (short) -1;
          }
          for (int index2 = (int) worldSurface; index2 < Main.maxTilesY; ++index2)
          {
            if ((double) index2 < rockLayer)
            {
              Main.tile[index1, index2].active(true);
              Main.tile[index1, index2].type = (ushort) 0;
              Main.tile[index1, index2].frameX = (short) -1;
              Main.tile[index1, index2].frameY = (short) -1;
            }
            else
            {
              Main.tile[index1, index2].active(true);
              Main.tile[index1, index2].type = (ushort) 1;
              Main.tile[index1, index2].frameX = (short) -1;
              Main.tile[index1, index2].frameY = (short) -1;
            }
          }
        }
        Main.worldSurface = worldSurfaceHigh + 25.0;
        Main.rockLayer = rockLayerHigh;
        double num4 = (double) ((int) ((Main.rockLayer - Main.worldSurface) / 6.0) * 6);
        Main.rockLayer = Main.worldSurface + num4;
        WorldGen.waterLine = (int) (Main.rockLayer + (double) Main.maxTilesY) / 2;
        WorldGen.waterLine += WorldGen.genRand.Next(-100, 20);
        WorldGen.lavaLine = WorldGen.waterLine + WorldGen.genRand.Next(50, 80);
      }));
      WorldGen.AddGenerationPass("Tunnels", (WorldGenLegacyMethod) (progress =>
      {
        for (int index1 = 0; index1 < (int) ((double) Main.maxTilesX * 0.0015); ++index1)
        {
          int[] numArray1 = new int[10];
          int[] numArray2 = new int[10];
          int num = WorldGen.genRand.Next(450, Main.maxTilesX - 450);
          while ((double) num > (double) Main.maxTilesX * 0.449999988079071 && (double) num < (double) Main.maxTilesX * 0.550000011920929)
            num = WorldGen.genRand.Next(0, Main.maxTilesX);
          int index2 = 0;
          for (int index3 = 0; index3 < 10; ++index3)
          {
            int index4 = num % Main.maxTilesX;
            while (!Main.tile[index4, index2].active())
              ++index2;
            numArray1[index3] = index4;
            numArray2[index3] = index2 - WorldGen.genRand.Next(11, 16);
            num = index4 + WorldGen.genRand.Next(5, 11);
          }
          for (int index3 = 0; index3 < 10; ++index3)
          {
            WorldGen.TileRunner(numArray1[index3], numArray2[index3], (double) WorldGen.genRand.Next(5, 8), WorldGen.genRand.Next(6, 9), 0, true, -2f, -0.3f, false, true);
            WorldGen.TileRunner(numArray1[index3], numArray2[index3], (double) WorldGen.genRand.Next(5, 8), WorldGen.genRand.Next(6, 9), 0, true, 2f, -0.3f, false, true);
          }
        }
      }));
      WorldGen.AddGenerationPass("Sand", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[1].Value;
        int length = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.0008), (int) ((double) Main.maxTilesX * (1.0 / 400.0))) + 2;
        PyrX = new int[length];
        PyrY = new int[length];
        for (int index1 = 0; index1 < length; ++index1)
        {
          int num1 = WorldGen.genRand.Next(Main.maxTilesX);
          while ((double) num1 > (double) Main.maxTilesX * 0.400000005960464 && (double) num1 < (double) Main.maxTilesX * 0.600000023841858)
            num1 = WorldGen.genRand.Next(Main.maxTilesX);
          int num2 = WorldGen.genRand.Next(35, 90);
          if (index1 == 1)
          {
            float num3 = (float) (Main.maxTilesX / 4200);
            num2 += (int) ((double) WorldGen.genRand.Next(20, 40) * (double) num3);
          }
          if (WorldGen.genRand.Next(3) == 0)
            num2 *= 2;
          if (index1 == 1)
            num2 *= 2;
          int num4 = num1 - num2;
          int num5 = WorldGen.genRand.Next(35, 90);
          if (WorldGen.genRand.Next(3) == 0)
            num5 *= 2;
          if (index1 == 1)
            num5 *= 2;
          int num6 = num1 + num5;
          if (num4 < 0)
            num4 = 0;
          if (num6 > Main.maxTilesX)
            num6 = Main.maxTilesX;
          if (index1 == 0)
          {
            num4 = 0;
            num6 = WorldGen.genRand.Next(260, 300);
            if (dungeonSide == 1)
              num6 += 40;
          }
          else if (index1 == 2)
          {
            num4 = Main.maxTilesX - WorldGen.genRand.Next(260, 300);
            num6 = Main.maxTilesX;
            if (dungeonSide == -1)
              num4 -= 40;
          }
          int num7 = WorldGen.genRand.Next(50, 100);
          for (int index2 = num4; index2 < num6; ++index2)
          {
            if (WorldGen.genRand.Next(2) == 0)
            {
              num7 += WorldGen.genRand.Next(-1, 2);
              if (num7 < 50)
                num7 = 50;
              if (num7 > 100)
                num7 = 100;
            }
            for (int index3 = 0; (double) index3 < Main.worldSurface; ++index3)
            {
              if (Main.tile[index2, index3].active())
              {
                if (index2 == (num4 + num6) / 2 && WorldGen.genRand.Next(6) == 0)
                {
                  PyrX[numPyr] = index2;
                  PyrY[numPyr] = index3;
                  ++numPyr;
                }
                int num3 = num7;
                if (index2 - num4 < num3)
                  num3 = index2 - num4;
                if (num6 - index2 < num3)
                  num3 = num6 - index2;
                int num8 = num3 + WorldGen.genRand.Next(5);
                for (int index4 = index3; index4 < index3 + num8; ++index4)
                {
                  if (index2 > num4 + WorldGen.genRand.Next(5) && index2 < num6 - WorldGen.genRand.Next(5))
                    Main.tile[index2, index4].type = (ushort) 53;
                }
                break;
              }
            }
          }
        }
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 8E-06); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) Main.worldSurface, (int) Main.rockLayer), (double) WorldGen.genRand.Next(15, 70), WorldGen.genRand.Next(20, 130), 53, false, 0.0f, 0.0f, false, true);
      }));
      WorldGen.AddGenerationPass("Mount Caves", (WorldGenLegacyMethod) (progress =>
      {
        WorldGen.numMCaves = 0;
        progress.Message = Lang.gen[2].Value;
        for (int index1 = 0; index1 < (int) ((double) Main.maxTilesX * 0.0008); ++index1)
        {
          int num = 0;
          bool flag1 = false;
          bool flag2 = false;
          int i = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.25), (int) ((double) Main.maxTilesX * 0.75));
          while (!flag2)
          {
            flag2 = true;
            while (i > Main.maxTilesX / 2 - 100 && i < Main.maxTilesX / 2 + 100)
              i = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.25), (int) ((double) Main.maxTilesX * 0.75));
            for (int index2 = 0; index2 < WorldGen.numMCaves; ++index2)
            {
              if (i > WorldGen.mCaveX[index2] - 50 && i < WorldGen.mCaveX[index2] + 50)
              {
                ++num;
                flag2 = false;
                break;
              }
            }
            if (num >= 200)
            {
              flag1 = true;
              break;
            }
          }
          if (!flag1)
          {
            for (int j = 0; (double) j < Main.worldSurface; ++j)
            {
              if (Main.tile[i, j].active())
              {
                for (int index2 = i - 50; index2 < i + 50; ++index2)
                {
                  for (int index3 = j - 25; index3 < j + 25; ++index3)
                  {
                    if (Main.tile[index2, index3].active() && ((int) Main.tile[index2, index3].type == 53 || (int) Main.tile[index2, index3].type == 151 || (int) Main.tile[index2, index3].type == 274))
                      flag1 = true;
                  }
                }
                if (!flag1)
                {
                  WorldGen.Mountinater(i, j);
                  WorldGen.mCaveX[WorldGen.numMCaves] = i;
                  WorldGen.mCaveY[WorldGen.numMCaves] = j;
                  ++WorldGen.numMCaves;
                  break;
                }
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Dirt Wall Backgrounds", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[3].Value;
        for (int index1 = 1; index1 < Main.maxTilesX - 1; ++index1)
        {
          byte num1 = 2;
          float num2 = (float) index1 / (float) Main.maxTilesX;
          progress.Set(num2);
          bool flag = false;
          howFar += WorldGen.genRand.Next(-1, 2);
          if (howFar < 0)
            howFar = 0;
          if (howFar > 10)
            howFar = 10;
          for (int index2 = 0; (double) index2 < Main.worldSurface + 10.0 && (double) index2 <= Main.worldSurface + (double) howFar; ++index2)
          {
            if (Main.tile[index1, index2].active())
              num1 = (int) Main.tile[index1, index2].type != 147 ? (byte) 2 : (byte) 40;
            if (flag && (int) Main.tile[index1, index2].wall != 64)
              Main.tile[index1, index2].wall = num1;
            if (Main.tile[index1, index2].active() && Main.tile[index1 - 1, index2].active() && (Main.tile[index1 + 1, index2].active() && Main.tile[index1, index2 + 1].active()) && (Main.tile[index1 - 1, index2 + 1].active() && Main.tile[index1 + 1, index2 + 1].active()))
              flag = true;
          }
        }
      }));
      WorldGen.AddGenerationPass("Rocks In Dirt", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[4].Value;
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00015); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int) WorldGen.worldSurfaceLow + 1), (double) WorldGen.genRand.Next(4, 15), WorldGen.genRand.Next(5, 40), 1, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0002); ++index)
        {
          int i = WorldGen.genRand.Next(0, Main.maxTilesX);
          int j = WorldGen.genRand.Next((int) WorldGen.worldSurfaceLow, (int) worldSurfaceHigh + 1);
          if (!Main.tile[i, j - 10].active())
            j = WorldGen.genRand.Next((int) WorldGen.worldSurfaceLow, (int) worldSurfaceHigh + 1);
          WorldGen.TileRunner(i, j, (double) WorldGen.genRand.Next(4, 10), WorldGen.genRand.Next(5, 30), 1, false, 0.0f, 0.0f, false, true);
        }
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0045); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) worldSurfaceHigh, (int) rockLayerHigh + 1), (double) WorldGen.genRand.Next(2, 7), WorldGen.genRand.Next(2, 23), 1, false, 0.0f, 0.0f, false, true);
      }));
      WorldGen.AddGenerationPass("Dirt In Rocks", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[5].Value;
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.005); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) rockLayerLow, Main.maxTilesY), (double) WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(2, 40), 0, false, 0.0f, 0.0f, false, true);
      }));
      WorldGen.AddGenerationPass("Clay", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[6].Value;
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2E-05); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int) WorldGen.worldSurfaceLow), (double) WorldGen.genRand.Next(4, 14), WorldGen.genRand.Next(10, 50), 40, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 5E-05); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) WorldGen.worldSurfaceLow, (int) worldSurfaceHigh + 1), (double) WorldGen.genRand.Next(8, 14), WorldGen.genRand.Next(15, 45), 40, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2E-05); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) worldSurfaceHigh, (int) rockLayerHigh + 1), (double) WorldGen.genRand.Next(8, 15), WorldGen.genRand.Next(5, 50), 40, false, 0.0f, 0.0f, false, true);
        for (int index1 = 5; index1 < Main.maxTilesX - 5; ++index1)
        {
          for (int index2 = 1; (double) index2 < Main.worldSurface - 1.0; ++index2)
          {
            if (Main.tile[index1, index2].active())
            {
              for (int index3 = index2; index3 < index2 + 5; ++index3)
              {
                if ((int) Main.tile[index1, index3].type == 40)
                  Main.tile[index1, index3].type = (ushort) 0;
              }
              break;
            }
          }
        }
      }));
      int i2;
      WorldGen.AddGenerationPass("Small Holes", (WorldGenLegacyMethod) (progress =>
      {
        i2 = 0;
        progress.Message = Lang.gen[7].Value;
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0015); ++index)
        {
          float num = (float) index / ((float) (Main.maxTilesX * Main.maxTilesY) * 0.0015f);
          progress.Set(num);
          int type = -1;
          if (WorldGen.genRand.Next(5) == 0)
            type = -2;
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) worldSurfaceHigh, Main.maxTilesY), (double) WorldGen.genRand.Next(2, 5), WorldGen.genRand.Next(2, 20), type, false, 0.0f, 0.0f, false, true);
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) worldSurfaceHigh, Main.maxTilesY), (double) WorldGen.genRand.Next(8, 15), WorldGen.genRand.Next(7, 30), type, false, 0.0f, 0.0f, false, true);
        }
      }));
      WorldGen.AddGenerationPass("Dirt Layer Caves", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[8].Value;
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 3E-05); ++index)
        {
          float num = (float) index / ((float) (Main.maxTilesX * Main.maxTilesY) * 3E-05f);
          progress.Set(num);
          if (rockLayerHigh <= (double) Main.maxTilesY)
          {
            int type = -1;
            if (WorldGen.genRand.Next(6) == 0)
              type = -2;
            WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) WorldGen.worldSurfaceLow, (int) rockLayerHigh + 1), (double) WorldGen.genRand.Next(5, 15), WorldGen.genRand.Next(30, 200), type, false, 0.0f, 0.0f, false, true);
          }
        }
      }));
      WorldGen.AddGenerationPass("Rock Layer Caves", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[9].Value;
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00013); ++index)
        {
          float num = (float) index / ((float) (Main.maxTilesX * Main.maxTilesY) * 0.00013f);
          progress.Set(num);
          if (rockLayerHigh <= (double) Main.maxTilesY)
          {
            int type = -1;
            if (WorldGen.genRand.Next(10) == 0)
              type = -2;
            WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) rockLayerHigh, Main.maxTilesY), (double) WorldGen.genRand.Next(6, 20), WorldGen.genRand.Next(50, 300), type, false, 0.0f, 0.0f, false, true);
          }
        }
      }));
      WorldGen.AddGenerationPass("Surface Caves", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[10].Value;
        for (int index = 0; index < (int) ((double) Main.maxTilesX * 0.002); ++index)
        {
          i2 = WorldGen.genRand.Next(0, Main.maxTilesX);
          while ((double) i2 > (double) Main.maxTilesX * 0.449999988079071 && (double) i2 < (double) Main.maxTilesX * 0.550000011920929)
            i2 = WorldGen.genRand.Next(0, Main.maxTilesX);
          for (int j = 0; (double) j < worldSurfaceHigh; ++j)
          {
            if (Main.tile[i2, j].active())
            {
              WorldGen.TileRunner(i2, j, (double) WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(5, 50), -1, false, (float) WorldGen.genRand.Next(-10, 11) * 0.1f, 1f, false, true);
              break;
            }
          }
        }
        for (int index = 0; index < (int) ((double) Main.maxTilesX * 0.0007); ++index)
        {
          i2 = WorldGen.genRand.Next(0, Main.maxTilesX);
          while ((double) i2 > (double) Main.maxTilesX * 0.430000007152557 && (double) i2 < (double) Main.maxTilesX * 0.569999992847443)
            i2 = WorldGen.genRand.Next(0, Main.maxTilesX);
          for (int j = 0; (double) j < worldSurfaceHigh; ++j)
          {
            if (Main.tile[i2, j].active())
            {
              WorldGen.TileRunner(i2, j, (double) WorldGen.genRand.Next(10, 15), WorldGen.genRand.Next(50, 130), -1, false, (float) WorldGen.genRand.Next(-10, 11) * 0.1f, 2f, false, true);
              break;
            }
          }
        }
        for (int index = 0; index < (int) ((double) Main.maxTilesX * 0.0003); ++index)
        {
          i2 = WorldGen.genRand.Next(0, Main.maxTilesX);
          while ((double) i2 > (double) Main.maxTilesX * 0.400000005960464 && (double) i2 < (double) Main.maxTilesX * 0.600000023841858)
            i2 = WorldGen.genRand.Next(0, Main.maxTilesX);
          for (int j = 0; (double) j < worldSurfaceHigh; ++j)
          {
            if (Main.tile[i2, j].active())
            {
              WorldGen.TileRunner(i2, j, (double) WorldGen.genRand.Next(12, 25), WorldGen.genRand.Next(150, 500), -1, false, (float) WorldGen.genRand.Next(-10, 11) * 0.1f, 4f, false, true);
              WorldGen.TileRunner(i2, j, (double) WorldGen.genRand.Next(8, 17), WorldGen.genRand.Next(60, 200), -1, false, (float) WorldGen.genRand.Next(-10, 11) * 0.1f, 2f, false, true);
              WorldGen.TileRunner(i2, j, (double) WorldGen.genRand.Next(5, 13), WorldGen.genRand.Next(40, 170), -1, false, (float) WorldGen.genRand.Next(-10, 11) * 0.1f, 2f, false, true);
              break;
            }
          }
        }
        for (int index = 0; index < (int) ((double) Main.maxTilesX * 0.0004); ++index)
        {
          i2 = WorldGen.genRand.Next(0, Main.maxTilesX);
          while ((double) i2 > (double) Main.maxTilesX * 0.400000005960464 && (double) i2 < (double) Main.maxTilesX * 0.600000023841858)
            i2 = WorldGen.genRand.Next(0, Main.maxTilesX);
          for (int j = 0; (double) j < worldSurfaceHigh; ++j)
          {
            if (Main.tile[i2, j].active())
            {
              WorldGen.TileRunner(i2, j, (double) WorldGen.genRand.Next(7, 12), WorldGen.genRand.Next(150, 250), -1, false, 0.0f, 1f, true, true);
              break;
            }
          }
        }
        float num = (float) (Main.maxTilesX / 4200);
        for (int index = 0; (double) index < 5.0 * (double) num; ++index)
        {
          try
          {
            WorldGen.Caverer(WorldGen.genRand.Next(100, Main.maxTilesX - 100), WorldGen.genRand.Next((int) Main.rockLayer, Main.maxTilesY - 400));
          }
          catch
          {
          }
        }
      }));
      WorldGen.AddGenerationPass("Slush Check", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[56].Value;
        snowTop = (int) Main.worldSurface;
        int num1 = WorldGen.genRand.Next(Main.maxTilesX);
        if (dungeonSide == 1)
        {
          while ((double) num1 < (double) Main.maxTilesX * 0.550000011920929 || (double) num1 > (double) Main.maxTilesX * 0.699999988079071)
            num1 = WorldGen.genRand.Next(Main.maxTilesX);
        }
        else
        {
          while ((double) num1 < (double) Main.maxTilesX * 0.300000011920929 || (double) num1 > (double) Main.maxTilesX * 0.449999988079071)
            num1 = WorldGen.genRand.Next(Main.maxTilesX);
        }
        int num2 = WorldGen.genRand.Next(50, 90);
        float num3 = (float) (Main.maxTilesX / 4200);
        int num4 = num2 + (int) ((double) WorldGen.genRand.Next(20, 40) * (double) num3) + (int) ((double) WorldGen.genRand.Next(20, 40) * (double) num3);
        int num5 = num1 - num4;
        int num6 = WorldGen.genRand.Next(50, 90) + (int) ((double) WorldGen.genRand.Next(20, 40) * (double) num3) + (int) ((double) WorldGen.genRand.Next(20, 40) * (double) num3);
        int num7 = num1 + num6;
        if (num5 < 0)
          num5 = 0;
        if (num7 > Main.maxTilesX)
          num7 = Main.maxTilesX;
        int num8 = 10;
        for (int index1 = 0; index1 <= WorldGen.lavaLine - 140; ++index1)
        {
          num5 += WorldGen.genRand.Next(-4, 4);
          num7 += WorldGen.genRand.Next(-3, 5);
          snowMinX[index1] = num5;
          snowMaxX[index1] = num7;
          for (int index2 = num5; index2 < num7; ++index2)
          {
            if (index1 < WorldGen.lavaLine - 140)
            {
              if ((int) Main.tile[index2, index1].wall == 2)
                Main.tile[index2, index1].wall = (byte) 40;
              switch (Main.tile[index2, index1].type)
              {
                case 0:
                case 2:
                case 23:
                case 40:
                case 53:
                  Main.tile[index2, index1].type = (ushort) 147;
                  continue;
                case 1:
                  Main.tile[index2, index1].type = (ushort) 161;
                  continue;
                default:
                  continue;
              }
            }
            else
            {
              num8 += WorldGen.genRand.Next(-3, 4);
              if (WorldGen.genRand.Next(3) == 0)
              {
                num8 += WorldGen.genRand.Next(-4, 5);
                if (WorldGen.genRand.Next(3) == 0)
                  num8 += WorldGen.genRand.Next(-6, 7);
              }
              if (num8 < 0)
                num8 = WorldGen.genRand.Next(3);
              else if (num8 > 50)
                num8 = 50 - WorldGen.genRand.Next(3);
              for (int index3 = index1; index3 < index1 + num8; ++index3)
              {
                if ((int) Main.tile[index2, index3].wall == 2)
                  Main.tile[index2, index3].wall = (byte) 40;
                switch (Main.tile[index2, index3].type)
                {
                  case 0:
                  case 2:
                  case 23:
                  case 40:
                  case 53:
                    Main.tile[index2, index3].type = (ushort) 147;
                    break;
                  case 1:
                    Main.tile[index2, index3].type = (ushort) 161;
                    break;
                }
              }
            }
          }
          if (snowBottom < index1)
            snowBottom = index1;
        }
      }));
      WorldGen.AddGenerationPass("Grass", (WorldGenLegacyMethod) (progress =>
      {
        for (int index1 = 0; index1 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.002); ++index1)
        {
          int index2 = WorldGen.genRand.Next(1, Main.maxTilesX - 1);
          int index3 = WorldGen.genRand.Next((int) WorldGen.worldSurfaceLow, (int) worldSurfaceHigh);
          if (index3 >= Main.maxTilesY)
            index3 = Main.maxTilesY - 2;
          if (Main.tile[index2 - 1, index3].active() && (int) Main.tile[index2 - 1, index3].type == 0 && (Main.tile[index2 + 1, index3].active() && (int) Main.tile[index2 + 1, index3].type == 0) && (Main.tile[index2, index3 - 1].active() && (int) Main.tile[index2, index3 - 1].type == 0 && (Main.tile[index2, index3 + 1].active() && (int) Main.tile[index2, index3 + 1].type == 0)))
          {
            Main.tile[index2, index3].active(true);
            Main.tile[index2, index3].type = (ushort) 2;
          }
          int index4 = WorldGen.genRand.Next(1, Main.maxTilesX - 1);
          int index5 = WorldGen.genRand.Next(0, (int) WorldGen.worldSurfaceLow);
          if (index5 >= Main.maxTilesY)
            index5 = Main.maxTilesY - 2;
          if (Main.tile[index4 - 1, index5].active() && (int) Main.tile[index4 - 1, index5].type == 0 && (Main.tile[index4 + 1, index5].active() && (int) Main.tile[index4 + 1, index5].type == 0) && (Main.tile[index4, index5 - 1].active() && (int) Main.tile[index4, index5 - 1].type == 0 && (Main.tile[index4, index5 + 1].active() && (int) Main.tile[index4, index5 + 1].type == 0)))
          {
            Main.tile[index4, index5].active(true);
            Main.tile[index4, index5].type = (ushort) 2;
          }
        }
      }));
      WorldGen.AddGenerationPass("Jungle", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[11].Value;
        float num1 = (float) (Main.maxTilesX / 4200) * 1.5f;
        float num2 = (float) WorldGen.genRand.Next(15, 30) * 0.01f;
        int num3;
        if (dungeonSide == -1)
        {
          float num4 = 1f - num2;
          num3 = (int) ((double) Main.maxTilesX * (double) num4);
        }
        else
          num3 = (int) ((double) Main.maxTilesX * (double) num2);
        int num5 = (int) ((double) Main.maxTilesY + Main.rockLayer) / 2;
        int i1 = num3 + WorldGen.genRand.Next((int) (-100.0 * (double) num1), (int) (101.0 * (double) num1));
        int j1 = num5 + WorldGen.genRand.Next((int) (-100.0 * (double) num1), (int) (101.0 * (double) num1));
        int num6 = i1;
        int num7 = j1;
        WorldGen.TileRunner(i1, j1, (double) WorldGen.genRand.Next((int) (250.0 * (double) num1), (int) (500.0 * (double) num1)), WorldGen.genRand.Next(50, 150), 59, false, (float) (dungeonSide * 3), 0.0f, false, true);
        for (int index = 0; (double) index < 6.0 * (double) num1; ++index)
          WorldGen.TileRunner(i1 + WorldGen.genRand.Next(-(int) (125.0 * (double) num1), (int) (125.0 * (double) num1)), j1 + WorldGen.genRand.Next(-(int) (125.0 * (double) num1), (int) (125.0 * (double) num1)), (double) WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(63, 65), false, 0.0f, 0.0f, false, true);
        WorldGen.mudWall = true;
        progress.Set(0.15f);
        int i3 = i1 + WorldGen.genRand.Next((int) (-250.0 * (double) num1), (int) (251.0 * (double) num1));
        int j2 = j1 + WorldGen.genRand.Next((int) (-150.0 * (double) num1), (int) (151.0 * (double) num1));
        int num8 = i3;
        int num9 = j2;
        int num10 = i3;
        int num11 = j2;
        WorldGen.TileRunner(i3, j2, (double) WorldGen.genRand.Next((int) (250.0 * (double) num1), (int) (500.0 * (double) num1)), WorldGen.genRand.Next(50, 150), 59, false, 0.0f, 0.0f, false, true);
        WorldGen.mudWall = false;
        for (int index = 0; (double) index < 6.0 * (double) num1; ++index)
          WorldGen.TileRunner(i3 + WorldGen.genRand.Next(-(int) (125.0 * (double) num1), (int) (125.0 * (double) num1)), j2 + WorldGen.genRand.Next(-(int) (125.0 * (double) num1), (int) (125.0 * (double) num1)), (double) WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(65, 67), false, 0.0f, 0.0f, false, true);
        WorldGen.mudWall = true;
        progress.Set(0.3f);
        int i4 = i3 + WorldGen.genRand.Next((int) (-400.0 * (double) num1), (int) (401.0 * (double) num1));
        int j3 = j2 + WorldGen.genRand.Next((int) (-150.0 * (double) num1), (int) (151.0 * (double) num1));
        int num12 = i4;
        int num13 = j3;
        WorldGen.TileRunner(i4, j3, (double) WorldGen.genRand.Next((int) (250.0 * (double) num1), (int) (500.0 * (double) num1)), WorldGen.genRand.Next(50, 150), 59, false, (float) (dungeonSide * -3), 0.0f, false, true);
        WorldGen.mudWall = false;
        for (int index = 0; (double) index < 6.0 * (double) num1; ++index)
          WorldGen.TileRunner(i4 + WorldGen.genRand.Next(-(int) (125.0 * (double) num1), (int) (125.0 * (double) num1)), j3 + WorldGen.genRand.Next(-(int) (125.0 * (double) num1), (int) (125.0 * (double) num1)), (double) WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(67, 69), false, 0.0f, 0.0f, false, true);
        WorldGen.mudWall = true;
        progress.Set(0.45f);
        int i5 = (num6 + num8 + num12) / 3;
        int j4 = (num7 + num9 + num13) / 3;
        WorldGen.TileRunner(i5, j4, (double) WorldGen.genRand.Next((int) (400.0 * (double) num1), (int) (600.0 * (double) num1)), 10000, 59, false, 0.0f, -20f, true, true);
        WorldGen.JungleRunner(i5, j4);
        progress.Set(0.6f);
        WorldGen.mudWall = false;
        for (int index = 0; index < Main.maxTilesX / 4; ++index)
        {
          int i6 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
          int j5;
          for (j5 = WorldGen.genRand.Next((int) worldSurface + 10, Main.maxTilesY - 200); (int) Main.tile[i6, j5].wall != 64 && (int) Main.tile[i6, j5].wall != 15; j5 = WorldGen.genRand.Next((int) worldSurface + 10, Main.maxTilesY - 200))
            i6 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
          WorldGen.MudWallRunner(i6, j5);
        }
        int i7 = num10;
        int j6 = num11;
        for (int index = 0; (double) index <= 20.0 * (double) num1; ++index)
        {
          progress.Set((float) ((60.0 + (double) index / (double) num1) * 0.00999999977648258));
          i7 += WorldGen.genRand.Next((int) (-5.0 * (double) num1), (int) (6.0 * (double) num1));
          j6 += WorldGen.genRand.Next((int) (-5.0 * (double) num1), (int) (6.0 * (double) num1));
          WorldGen.TileRunner(i7, j6, (double) WorldGen.genRand.Next(40, 100), WorldGen.genRand.Next(300, 500), 59, false, 0.0f, 0.0f, false, true);
        }
        for (int index1 = 0; (double) index1 <= 10.0 * (double) num1; ++index1)
        {
          progress.Set((float) ((80.0 + (double) index1 / (double) num1 * 2.0) * 0.00999999977648258));
          int i6 = num10 + WorldGen.genRand.Next((int) (-600.0 * (double) num1), (int) (600.0 * (double) num1));
          int j5;
          for (j5 = num11 + WorldGen.genRand.Next((int) (-200.0 * (double) num1), (int) (200.0 * (double) num1)); i6 < 1 || i6 >= Main.maxTilesX - 1 || (j5 < 1 || j5 >= Main.maxTilesY - 1) || (int) Main.tile[i6, j5].type != 59; j5 = num11 + WorldGen.genRand.Next((int) (-200.0 * (double) num1), (int) (200.0 * (double) num1)))
            i6 = num10 + WorldGen.genRand.Next((int) (-600.0 * (double) num1), (int) (600.0 * (double) num1));
          for (int index2 = 0; (double) index2 < 8.0 * (double) num1; ++index2)
          {
            i6 += WorldGen.genRand.Next(-30, 31);
            j5 += WorldGen.genRand.Next(-30, 31);
            int type = -1;
            if (WorldGen.genRand.Next(7) == 0)
              type = -2;
            WorldGen.TileRunner(i6, j5, (double) WorldGen.genRand.Next(10, 20), WorldGen.genRand.Next(30, 70), type, false, 0.0f, 0.0f, false, true);
          }
        }
        for (int index = 0; (double) index <= 300.0 * (double) num1; ++index)
        {
          int i6 = num10 + WorldGen.genRand.Next((int) (-600.0 * (double) num1), (int) (600.0 * (double) num1));
          int j5;
          for (j5 = num11 + WorldGen.genRand.Next((int) (-200.0 * (double) num1), (int) (200.0 * (double) num1)); i6 < 1 || i6 >= Main.maxTilesX - 1 || (j5 < 1 || j5 >= Main.maxTilesY - 1) || (int) Main.tile[i6, j5].type != 59; j5 = num11 + WorldGen.genRand.Next((int) (-200.0 * (double) num1), (int) (200.0 * (double) num1)))
            i6 = num10 + WorldGen.genRand.Next((int) (-600.0 * (double) num1), (int) (600.0 * (double) num1));
          WorldGen.TileRunner(i6, j5, (double) WorldGen.genRand.Next(4, 10), WorldGen.genRand.Next(5, 30), 1, false, 0.0f, 0.0f, false, true);
          if (WorldGen.genRand.Next(4) == 0)
          {
            int type = WorldGen.genRand.Next(63, 69);
            WorldGen.TileRunner(i6 + WorldGen.genRand.Next(-1, 2), j5 + WorldGen.genRand.Next(-1, 2), (double) WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(4, 8), type, false, 0.0f, 0.0f, false, true);
          }
        }
      }));
      WorldGen.AddGenerationPass("Marble", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[80].Value;
        int num1 = (int) ((double) WorldGen.genRand.Next(10, 15) * (double) ((float) (Main.maxTilesX * Main.maxTilesY) / 5040000f));
        float num2 = (float) (Main.maxTilesX - 160) / (float) num1;
        int num3 = 0;
        while (num3 < num1)
        {
          float num4 = (float) num3 / (float) num1;
          progress.Set(num4);
          if (Terraria.World.Generation.Biomes<MarbleBiome>.Place(WorldGen.RandomRectanglePoint((int) ((double) num4 * (double) (Main.maxTilesX - 160)) + 80, (int) rockLayer + 20, (int) num2, Main.maxTilesY - ((int) rockLayer + 40) - 200), structures))
            ++num3;
        }
      }));
      WorldGen.AddGenerationPass("Granite", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[81].Value;
        int num1 = (int) ((double) WorldGen.genRand.Next(8, 14) * (double) ((float) Main.maxTilesX / 4200f));
        float num2 = (float) (Main.maxTilesX - 200) / (float) num1;
        int num3 = 0;
        while (num3 < num1)
        {
          float num4 = (float) num3 / (float) num1;
          progress.Set(num4);
          if (Terraria.World.Generation.Biomes<GraniteBiome>.Place(WorldGen.RandomRectanglePoint((int) ((double) num4 * (double) (Main.maxTilesX - 200)) + 100, (int) rockLayer + 20, (int) num2, Main.maxTilesY - ((int) rockLayer + 40) - 200), structures))
            ++num3;
        }
      }));
      WorldGen.AddGenerationPass("Mud Caves To Grass", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[77].Value;
        for (int i = 0; i < Main.maxTilesX; ++i)
        {
          for (int j = 0; j < Main.maxTilesY; ++j)
          {
            if (Main.tile[i, j].active())
            {
              WorldGen.grassSpread = 0;
              WorldGen.SpreadGrass(i, j, 59, 60, true, (byte) 0);
            }
            progress.Set((float) (0.200000002980232 * ((double) (i * Main.maxTilesY + j) / (double) (Main.maxTilesX * Main.maxTilesY))));
          }
        }
        for (int x = 10; x < Main.maxTilesX - 10; ++x)
        {
          for (int y = 10; y < Main.maxTilesY - 10; ++y)
          {
            if (Main.tile[x, y].active() && WorldGen.tileCounter(x, y) < WorldGen.tileCounterMax)
              WorldGen.tileCounterKill();
            float num = (float) ((x - 10) * (Main.maxTilesY - 20) + (y - 10)) / (float) ((Main.maxTilesX - 20) * (Main.maxTilesY - 20));
            progress.Set((float) (0.200000002980232 + (double) num * 0.800000011920929));
          }
        }
      }));
      WorldGen.AddGenerationPass("Full Desert", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[78].Value;
        int num1 = dungeonSide;
        int maxValue = Main.maxTilesX / 2;
        int num2 = WorldGen.genRand.Next(maxValue) / 8 + maxValue / 8;
        int num3 = maxValue + num2 * -num1;
        int num4 = 0;
        while (!Terraria.World.Generation.Biomes<DesertBiome>.Place(new Point(num3, (int) worldSurface), structures))
        {
          int num5 = WorldGen.genRand.Next(maxValue) / 2 + maxValue / 8;
          num3 = maxValue + num5 * -num1;
          if (++num4 > 1000)
          {
            num1 *= -1;
            num4 = 0;
          }
        }
      }));
      WorldGen.AddGenerationPass("Floating Islands", (WorldGenLegacyMethod) (progress =>
      {
        WorldGen.numIslandHouses = 0;
        WorldGen.houseCount = 0;
        progress.Message = Lang.gen[12].Value;
        for (int index1 = 0; index1 < (int) ((double) Main.maxTilesX * 0.0008) + skyLakes; ++index1)
        {
          int num1 = 1000;
          int i = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.1), (int) ((double) Main.maxTilesX * 0.9));
          while (--num1 > 0)
          {
            bool flag1 = true;
            while (i > Main.maxTilesX / 2 - 80 && i < Main.maxTilesX / 2 + 80)
              i = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.1), (int) ((double) Main.maxTilesX * 0.9));
            for (int index2 = 0; index2 < WorldGen.numIslandHouses; ++index2)
            {
              if (i > WorldGen.fihX[index2] - 180 && i < WorldGen.fihX[index2] + 180)
              {
                flag1 = false;
                break;
              }
            }
            if (flag1)
            {
              bool flag2 = false;
              int num2 = 0;
              for (int index2 = 200; (double) index2 < Main.worldSurface; ++index2)
              {
                if (Main.tile[i, index2].active())
                {
                  num2 = index2;
                  flag2 = true;
                  break;
                }
              }
              if (flag2)
              {
                int j = Math.Min(WorldGen.genRand.Next(90, num2 - 100), (int) WorldGen.worldSurfaceLow - 50);
                if (index1 < skyLakes)
                {
                  WorldGen.skyLake[WorldGen.numIslandHouses] = true;
                  WorldGen.CloudLake(i, j);
                }
                else
                  WorldGen.CloudIsland(i, j);
                WorldGen.fihX[WorldGen.numIslandHouses] = i;
                WorldGen.fihY[WorldGen.numIslandHouses] = j;
                ++WorldGen.numIslandHouses;
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Mushroom Patches", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[13].Value;
        for (int index1 = 0; index1 < Main.maxTilesX / 500; ++index1)
        {
          int num1 = 0;
          bool flag = true;
          while (flag)
          {
            int i = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.3), (int) ((double) Main.maxTilesX * 0.7));
            int j = WorldGen.genRand.Next((int) Main.rockLayer, Main.maxTilesY - 350);
            flag = false;
            int num2 = 60;
            int index2 = i - num2;
            while (index2 < i + num2)
            {
              int index3 = j - num2;
              while (index3 < j + num2)
              {
                if ((int) Main.tile[index2, index3].type == 147 || (int) Main.tile[index2, index3].type == 161 || (int) Main.tile[index2, index3].type == 162)
                {
                  flag = true;
                  break;
                }
                // ISSUE: explicit reference operation
                if (((Rectangle) @WorldGen.UndergroundDesertLocation).Contains(new Point(index2, index3)))
                {
                  flag = true;
                  break;
                }
                index3 += 3;
              }
              index2 += 3;
            }
            if (!flag)
              WorldGen.ShroomPatch(i, j);
            ++num1;
            if (num1 > 100)
              break;
          }
        }
        for (int i1 = 0; i1 < Main.maxTilesX; ++i1)
        {
          for (int worldSurface1 = (int) Main.worldSurface; worldSurface1 < Main.maxTilesY; ++worldSurface1)
          {
            if (Main.tile[i1, worldSurface1].active())
            {
              WorldGen.grassSpread = 0;
              WorldGen.SpreadGrass(i1, worldSurface1, 59, 70, false, (byte) 0);
              if ((int) Main.tile[i1, worldSurface1].type == 70 && WorldGen.genRand.Next(20) == 0)
              {
                int num1 = WorldGen.genRand.Next(5) != 0 ? 1 : 2;
                int num2 = WorldGen.genRand.Next(2, 6);
                int j1 = worldSurface1 - num2;
                bool flag = true;
                for (int index = i1 - num1; index <= i1 + num1; ++index)
                {
                  if (Main.tile[index, j1].active())
                    flag = false;
                  if (Main.tileBrick[(int) Main.tile[index, j1 - 1].type])
                    flag = false;
                  if (Main.tileBrick[(int) Main.tile[index, j1 + 1].type])
                    flag = false;
                }
                if ((int) Main.tile[i1 - num1 - 1, j1].type == 190)
                  flag = false;
                if ((int) Main.tile[i1 + num1 + 1, j1].type == 190)
                  flag = false;
                for (int index = j1; index < worldSurface1; ++index)
                {
                  if (Main.tile[i1, index].active())
                    flag = false;
                  if (Main.tileBrick[(int) Main.tile[i1 - 1, index].type])
                    flag = false;
                  if (Main.tileBrick[(int) Main.tile[i1 + 1, index].type])
                    flag = false;
                }
                if (flag)
                {
                  for (int i3 = i1 - num1; i3 <= i1 + num1; ++i3)
                    WorldGen.PlaceTile(i3, j1, 190, true, true, -1, 0);
                  for (int j2 = j1; j2 < worldSurface1; ++j2)
                    WorldGen.PlaceTile(i1, j2, 190, true, true, -1, 0);
                }
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Mud To Dirt", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[14].Value;
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.001); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) rockLayerLow, Main.maxTilesY), (double) WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(2, 40), 59, false, 0.0f, 0.0f, false, true);
      }));
      WorldGen.AddGenerationPass("Silt", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[15].Value;
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0001); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) rockLayerHigh, Main.maxTilesY), (double) WorldGen.genRand.Next(5, 12), WorldGen.genRand.Next(15, 50), 123, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0005); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) rockLayerHigh, Main.maxTilesY), (double) WorldGen.genRand.Next(2, 5), WorldGen.genRand.Next(2, 5), 123, false, 0.0f, 0.0f, false, true);
      }));
      WorldGen.AddGenerationPass("Shinies", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[16].Value;
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 6E-05); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) WorldGen.worldSurfaceLow, (int) worldSurfaceHigh), (double) WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(2, 6), copper, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 8E-05); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) worldSurfaceHigh, (int) rockLayerHigh), (double) WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 7), copper, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0002); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) rockLayerLow, Main.maxTilesY), (double) WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), copper, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 3E-05); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) WorldGen.worldSurfaceLow, (int) worldSurfaceHigh), (double) WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(2, 5), iron, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 8E-05); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) worldSurfaceHigh, (int) rockLayerHigh), (double) WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), iron, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0002); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) rockLayerLow, Main.maxTilesY), (double) WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), iron, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2.6E-05); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) worldSurfaceHigh, (int) rockLayerHigh), (double) WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), silver, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00015); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) rockLayerLow, Main.maxTilesY), (double) WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), silver, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00017); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int) WorldGen.worldSurfaceLow), (double) WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), silver, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00012); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) rockLayerLow, Main.maxTilesY), (double) WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), gold, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.00012); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int) WorldGen.worldSurfaceLow - 20), (double) WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), gold, false, 0.0f, 0.0f, false, true);
        if (WorldGen.crimson)
        {
          for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2E-05); ++index)
            WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) rockLayerLow, Main.maxTilesY), (double) WorldGen.genRand.Next(2, 4), WorldGen.genRand.Next(3, 6), 204, false, 0.0f, 0.0f, false, true);
        }
        else
        {
          for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2E-05); ++index)
            WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int) rockLayerLow, Main.maxTilesY), (double) WorldGen.genRand.Next(2, 4), WorldGen.genRand.Next(3, 6), 22, false, 0.0f, 0.0f, false, true);
        }
      }));
      WorldGen.AddGenerationPass("Webs", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[17].Value;
        for (int index1 = 0; index1 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0006); ++index1)
        {
          int index2 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
          int index3 = WorldGen.genRand.Next((int) worldSurfaceHigh, Main.maxTilesY - 20);
          if (index1 < WorldGen.numMCaves)
          {
            index2 = WorldGen.mCaveX[index1];
            index3 = WorldGen.mCaveY[index1];
          }
          if (!Main.tile[index2, index3].active() && ((double) index3 > Main.worldSurface || (int) Main.tile[index2, index3].wall > 0))
          {
            while (!Main.tile[index2, index3].active() && index3 > (int) WorldGen.worldSurfaceLow)
              --index3;
            int j = index3 + 1;
            int num = 1;
            if (WorldGen.genRand.Next(2) == 0)
              num = -1;
            while (!Main.tile[index2, j].active() && index2 > 10 && index2 < Main.maxTilesX - 10)
              index2 += num;
            int i = index2 - num;
            if ((double) j > Main.worldSurface || (int) Main.tile[i, j].wall > 0)
              WorldGen.TileRunner(i, j, (double) WorldGen.genRand.Next(4, 11), WorldGen.genRand.Next(2, 4), 51, true, (float) num, -1f, false, false);
          }
        }
      }));
      WorldGen.AddGenerationPass("Underworld", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[18].Value;
        progress.Set(0.0f);
        int num1 = Main.maxTilesY - WorldGen.genRand.Next(150, 190);
        for (int index1 = 0; index1 < Main.maxTilesX; ++index1)
        {
          num1 += WorldGen.genRand.Next(-3, 4);
          if (num1 < Main.maxTilesY - 190)
            num1 = Main.maxTilesY - 190;
          if (num1 > Main.maxTilesY - 160)
            num1 = Main.maxTilesY - 160;
          for (int index2 = num1 - 20 - WorldGen.genRand.Next(3); index2 < Main.maxTilesY; ++index2)
          {
            if (index2 >= num1)
            {
              Main.tile[index1, index2].active(false);
              Main.tile[index1, index2].lava(false);
              Main.tile[index1, index2].liquid = (byte) 0;
            }
            else
              Main.tile[index1, index2].type = (ushort) 57;
          }
        }
        int num2 = Main.maxTilesY - WorldGen.genRand.Next(40, 70);
        for (int index1 = 10; index1 < Main.maxTilesX - 10; ++index1)
        {
          num2 += WorldGen.genRand.Next(-10, 11);
          if (num2 > Main.maxTilesY - 60)
            num2 = Main.maxTilesY - 60;
          if (num2 < Main.maxTilesY - 100)
            num2 = Main.maxTilesY - 120;
          for (int index2 = num2; index2 < Main.maxTilesY - 10; ++index2)
          {
            if (!Main.tile[index1, index2].active())
            {
              Main.tile[index1, index2].lava(true);
              Main.tile[index1, index2].liquid = byte.MaxValue;
            }
          }
        }
        for (int index1 = 0; index1 < Main.maxTilesX; ++index1)
        {
          if (WorldGen.genRand.Next(50) == 0)
          {
            int index2 = Main.maxTilesY - 65;
            while (!Main.tile[index1, index2].active() && index2 > Main.maxTilesY - 135)
              --index2;
            WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), index2 + WorldGen.genRand.Next(20, 50), (double) WorldGen.genRand.Next(15, 20), 1000, 57, true, 0.0f, (float) WorldGen.genRand.Next(1, 3), true, true);
          }
        }
        Liquid.QuickWater(-2, -1, -1);
        for (int i = 0; i < Main.maxTilesX; ++i)
        {
          float num3 = (float) i / (float) (Main.maxTilesX - 1);
          progress.Set((float) ((double) num3 / 2.0 + 0.5));
          if (WorldGen.genRand.Next(13) == 0)
          {
            int index = Main.maxTilesY - 65;
            while (((int) Main.tile[i, index].liquid > 0 || Main.tile[i, index].active()) && index > Main.maxTilesY - 140)
              --index;
            WorldGen.TileRunner(i, index - WorldGen.genRand.Next(2, 5), (double) WorldGen.genRand.Next(5, 30), 1000, 57, true, 0.0f, (float) WorldGen.genRand.Next(1, 3), true, true);
            float num4 = (float) WorldGen.genRand.Next(1, 3);
            if (WorldGen.genRand.Next(3) == 0)
              num4 *= 0.5f;
            if (WorldGen.genRand.Next(2) == 0)
              WorldGen.TileRunner(i, index - WorldGen.genRand.Next(2, 5), (double) (int) ((double) WorldGen.genRand.Next(5, 15) * (double) num4), (int) ((double) WorldGen.genRand.Next(10, 15) * (double) num4), 57, true, 1f, 0.3f, false, true);
            if (WorldGen.genRand.Next(2) == 0)
            {
              float num5 = (float) WorldGen.genRand.Next(1, 3);
              WorldGen.TileRunner(i, index - WorldGen.genRand.Next(2, 5), (double) (int) ((double) WorldGen.genRand.Next(5, 15) * (double) num5), (int) ((double) WorldGen.genRand.Next(10, 15) * (double) num5), 57, true, -1f, 0.3f, false, true);
            }
            WorldGen.TileRunner(i + WorldGen.genRand.Next(-10, 10), index + WorldGen.genRand.Next(-10, 10), (double) WorldGen.genRand.Next(5, 15), WorldGen.genRand.Next(5, 10), -2, false, (float) WorldGen.genRand.Next(-1, 3), (float) WorldGen.genRand.Next(-1, 3), false, true);
            if (WorldGen.genRand.Next(3) == 0)
              WorldGen.TileRunner(i + WorldGen.genRand.Next(-10, 10), index + WorldGen.genRand.Next(-10, 10), (double) WorldGen.genRand.Next(10, 30), WorldGen.genRand.Next(10, 20), -2, false, (float) WorldGen.genRand.Next(-1, 3), (float) WorldGen.genRand.Next(-1, 3), false, true);
            if (WorldGen.genRand.Next(5) == 0)
              WorldGen.TileRunner(i + WorldGen.genRand.Next(-15, 15), index + WorldGen.genRand.Next(-15, 10), (double) WorldGen.genRand.Next(15, 30), WorldGen.genRand.Next(5, 20), -2, false, (float) WorldGen.genRand.Next(-1, 3), (float) WorldGen.genRand.Next(-1, 3), false, true);
          }
        }
        for (int index = 0; index < Main.maxTilesX; ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(20, Main.maxTilesX - 20), WorldGen.genRand.Next(Main.maxTilesY - 180, Main.maxTilesY - 10), (double) WorldGen.genRand.Next(2, 7), WorldGen.genRand.Next(2, 7), -2, false, 0.0f, 0.0f, false, true);
        for (int index = 0; index < Main.maxTilesX; ++index)
        {
          if (!Main.tile[index, Main.maxTilesY - 145].active())
          {
            Main.tile[index, Main.maxTilesY - 145].liquid = byte.MaxValue;
            Main.tile[index, Main.maxTilesY - 145].lava(true);
          }
          if (!Main.tile[index, Main.maxTilesY - 144].active())
          {
            Main.tile[index, Main.maxTilesY - 144].liquid = byte.MaxValue;
            Main.tile[index, Main.maxTilesY - 144].lava(true);
          }
        }
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0008); ++index)
          WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(Main.maxTilesY - 140, Main.maxTilesY), (double) WorldGen.genRand.Next(2, 7), WorldGen.genRand.Next(3, 7), 58, false, 0.0f, 0.0f, false, true);
        WorldGen.AddHellHouses();
      }));
      WorldGen.AddGenerationPass("Lakes", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[19].Value;
        int num1 = WorldGen.genRand.Next(2, (int) ((double) Main.maxTilesX * 0.005));
        for (int index = 0; index < num1; ++index)
        {
          float num2 = (float) index / (float) num1;
          progress.Set(num2);
          int i = WorldGen.genRand.Next(300, Main.maxTilesX - 300);
          while (i > Main.maxTilesX / 2 - 100 && i < Main.maxTilesX / 2 + 100)
            i = WorldGen.genRand.Next(300, Main.maxTilesX - 300);
          int j = (int) WorldGen.worldSurfaceLow - 20;
          while (!Main.tile[i, j].active())
            ++j;
          WorldGen.Lakinater(i, j);
        }
      }));
      WorldGen.AddGenerationPass("Dungeon", (WorldGenLegacyMethod) (progress =>
      {
        int x;
        if (dungeonSide == -1)
        {
          x = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.05), (int) ((double) Main.maxTilesX * 0.2));
          dungeonSide = -1;
        }
        else
        {
          x = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.8), (int) ((double) Main.maxTilesX * 0.95));
          dungeonSide = 1;
        }
        int y = (int) ((Main.worldSurface + Main.rockLayer) / 2.0) + WorldGen.genRand.Next(-200, 200);
        WorldGen.MakeDungeon(x, y);
      }));
      WorldGen.AddGenerationPass("Corruption", (WorldGenLegacyMethod) (progress =>
      {
        if (WorldGen.crimson)
        {
          progress.Message = Lang.gen[72].Value;
          for (int index1 = 0; (double) index1 < (double) Main.maxTilesX * 0.00045; ++index1)
          {
            float num1 = (float) index1 / ((float) Main.maxTilesX * 0.00045f);
            progress.Set(num1);
            bool flag1 = false;
            int i = 0;
            int num2 = 0;
            int num3 = 0;
            while (!flag1)
            {
              int num4 = 0;
              flag1 = true;
              int num5 = Main.maxTilesX / 2;
              int num6 = 200;
              i = dungeonSide >= 0 ? WorldGen.genRand.Next(320, Main.maxTilesX - 600) : WorldGen.genRand.Next(600, Main.maxTilesX - 320);
              num2 = i - WorldGen.genRand.Next(200) - 100;
              num3 = i + WorldGen.genRand.Next(200) + 100;
              if (num2 < 285)
                num2 = 285;
              if (num3 > Main.maxTilesX - 285)
                num3 = Main.maxTilesX - 285;
              if (dungeonSide < 0 && num2 < 400)
                num2 = 400;
              else if (dungeonSide > 0 && num2 > Main.maxTilesX - 400)
                num2 = Main.maxTilesX - 400;
              if (i > num5 - num6 && i < num5 + num6)
                flag1 = false;
              if (num2 > num5 - num6 && num2 < num5 + num6)
                flag1 = false;
              if (num3 > num5 - num6 && num3 < num5 + num6)
                flag1 = false;
              if (i > WorldGen.UndergroundDesertLocation.X && i < WorldGen.UndergroundDesertLocation.X + WorldGen.UndergroundDesertLocation.Width)
                flag1 = false;
              if (num2 > WorldGen.UndergroundDesertLocation.X && num2 < WorldGen.UndergroundDesertLocation.X + WorldGen.UndergroundDesertLocation.Width)
                flag1 = false;
              if (num3 > WorldGen.UndergroundDesertLocation.X && num3 < WorldGen.UndergroundDesertLocation.X + WorldGen.UndergroundDesertLocation.Width)
                flag1 = false;
              for (int index2 = num2; index2 < num3; ++index2)
              {
                int index3 = 0;
                while (index3 < (int) Main.worldSurface)
                {
                  if (Main.tile[index2, index3].active() && Main.tileDungeon[(int) Main.tile[index2, index3].type])
                  {
                    flag1 = false;
                    break;
                  }
                  if (flag1)
                    index3 += 5;
                  else
                    break;
                }
              }
              if (num4 < 200 && WorldGen.JungleX > num2 && WorldGen.JungleX < num3)
              {
                int num7 = num4 + 1;
                flag1 = false;
              }
            }
            WorldGen.CrimStart(i, (int) WorldGen.worldSurfaceLow - 10);
            for (int index2 = num2; index2 < num3; ++index2)
            {
              for (int worldSurfaceLow = (int) WorldGen.worldSurfaceLow; (double) worldSurfaceLow < Main.worldSurface - 1.0; ++worldSurfaceLow)
              {
                if (Main.tile[index2, worldSurfaceLow].active())
                {
                  int num4 = worldSurfaceLow + WorldGen.genRand.Next(10, 14);
                  for (int index3 = worldSurfaceLow; index3 < num4; ++index3)
                  {
                    if (((int) Main.tile[index2, index3].type == 59 || (int) Main.tile[index2, index3].type == 60) && (index2 >= num2 + WorldGen.genRand.Next(5) && index2 < num3 - WorldGen.genRand.Next(5)))
                      Main.tile[index2, index3].type = (ushort) 0;
                  }
                  break;
                }
              }
            }
            double num8 = Main.worldSurface + 40.0;
            for (int index2 = num2; index2 < num3; ++index2)
            {
              num8 += (double) WorldGen.genRand.Next(-2, 3);
              if (num8 < Main.worldSurface + 30.0)
                num8 = Main.worldSurface + 30.0;
              if (num8 > Main.worldSurface + 50.0)
                num8 = Main.worldSurface + 50.0;
              i2 = index2;
              bool flag2 = false;
              for (int worldSurfaceLow = (int) WorldGen.worldSurfaceLow; (double) worldSurfaceLow < num8; ++worldSurfaceLow)
              {
                if (Main.tile[i2, worldSurfaceLow].active())
                {
                  if ((int) Main.tile[i2, worldSurfaceLow].type == 53 && i2 >= num2 + WorldGen.genRand.Next(5) && i2 <= num3 - WorldGen.genRand.Next(5))
                    Main.tile[i2, worldSurfaceLow].type = (ushort) 234;
                  if ((int) Main.tile[i2, worldSurfaceLow].type == 0 && (double) worldSurfaceLow < Main.worldSurface - 1.0 && !flag2)
                  {
                    WorldGen.grassSpread = 0;
                    WorldGen.SpreadGrass(i2, worldSurfaceLow, 0, 199, true, (byte) 0);
                  }
                  flag2 = true;
                  if ((int) Main.tile[i2, worldSurfaceLow].wall == 216)
                    Main.tile[i2, worldSurfaceLow].wall = (byte) 218;
                  else if ((int) Main.tile[i2, worldSurfaceLow].wall == 187)
                    Main.tile[i2, worldSurfaceLow].wall = (byte) 221;
                  if ((int) Main.tile[i2, worldSurfaceLow].type == 1)
                  {
                    if (i2 >= num2 + WorldGen.genRand.Next(5) && i2 <= num3 - WorldGen.genRand.Next(5))
                      Main.tile[i2, worldSurfaceLow].type = (ushort) 203;
                  }
                  else if ((int) Main.tile[i2, worldSurfaceLow].type == 2)
                    Main.tile[i2, worldSurfaceLow].type = (ushort) 199;
                  else if ((int) Main.tile[i2, worldSurfaceLow].type == 161)
                    Main.tile[i2, worldSurfaceLow].type = (ushort) 200;
                  else if ((int) Main.tile[i2, worldSurfaceLow].type == 396)
                    Main.tile[i2, worldSurfaceLow].type = (ushort) 401;
                  else if ((int) Main.tile[i2, worldSurfaceLow].type == 397)
                    Main.tile[i2, worldSurfaceLow].type = (ushort) 399;
                }
              }
            }
            int num9 = WorldGen.genRand.Next(10, 15);
            for (int index2 = 0; index2 < num9; ++index2)
            {
              int num4 = 0;
              bool flag2 = false;
              int num5 = 0;
              while (!flag2)
              {
                ++num4;
                int x = WorldGen.genRand.Next(num2 - num5, num3 + num5);
                int y = WorldGen.genRand.Next((int) (Main.worldSurface - (double) (num5 / 2)), (int) (Main.worldSurface + 100.0 + (double) num5));
                if (num4 > 100)
                {
                  ++num5;
                  num4 = 0;
                }
                if (!Main.tile[x, y].active())
                {
                  while (!Main.tile[x, y].active())
                    ++y;
                  --y;
                }
                else
                {
                  while (Main.tile[x, y].active() && (double) y > Main.worldSurface)
                    --y;
                }
                if (num5 > 10 || Main.tile[x, y + 1].active() && (int) Main.tile[x, y + 1].type == 203)
                {
                  WorldGen.Place3x2(x, y, (ushort) 26, 1);
                  if ((int) Main.tile[x, y].type == 26)
                    flag2 = true;
                }
                if (num5 > 100)
                  flag2 = true;
              }
            }
          }
        }
        else
        {
          progress.Message = Lang.gen[20].Value;
          for (int index1 = 0; (double) index1 < (double) Main.maxTilesX * 0.00045; ++index1)
          {
            float num1 = (float) index1 / ((float) Main.maxTilesX * 0.00045f);
            progress.Set(num1);
            bool flag1 = false;
            int num2 = 0;
            int num3 = 0;
            int num4 = 0;
            while (!flag1)
            {
              int num5 = 0;
              flag1 = true;
              int num6 = Main.maxTilesX / 2;
              int num7 = 200;
              num2 = WorldGen.genRand.Next(320, Main.maxTilesX - 320);
              num3 = num2 - WorldGen.genRand.Next(200) - 100;
              num4 = num2 + WorldGen.genRand.Next(200) + 100;
              if (num3 < 285)
                num3 = 285;
              if (num4 > Main.maxTilesX - 285)
                num4 = Main.maxTilesX - 285;
              if (num2 > num6 - num7 && num2 < num6 + num7)
                flag1 = false;
              if (num3 > num6 - num7 && num3 < num6 + num7)
                flag1 = false;
              if (num4 > num6 - num7 && num4 < num6 + num7)
                flag1 = false;
              if (num2 > WorldGen.UndergroundDesertLocation.X && num2 < WorldGen.UndergroundDesertLocation.X + WorldGen.UndergroundDesertLocation.Width)
                flag1 = false;
              if (num3 > WorldGen.UndergroundDesertLocation.X && num3 < WorldGen.UndergroundDesertLocation.X + WorldGen.UndergroundDesertLocation.Width)
                flag1 = false;
              if (num4 > WorldGen.UndergroundDesertLocation.X && num4 < WorldGen.UndergroundDesertLocation.X + WorldGen.UndergroundDesertLocation.Width)
                flag1 = false;
              for (int index2 = num3; index2 < num4; ++index2)
              {
                int index3 = 0;
                while (index3 < (int) Main.worldSurface)
                {
                  if (Main.tile[index2, index3].active() && Main.tileDungeon[(int) Main.tile[index2, index3].type])
                  {
                    flag1 = false;
                    break;
                  }
                  if (flag1)
                    index3 += 5;
                  else
                    break;
                }
              }
              if (num5 < 200 && WorldGen.JungleX > num3 && WorldGen.JungleX < num4)
              {
                int num8 = num5 + 1;
                flag1 = false;
              }
            }
            int num9 = 0;
            for (int i = num3; i < num4; ++i)
            {
              if (num9 > 0)
                --num9;
              if (i == num2 || num9 == 0)
              {
                for (int worldSurfaceLow = (int) WorldGen.worldSurfaceLow; (double) worldSurfaceLow < Main.worldSurface - 1.0; ++worldSurfaceLow)
                {
                  if (Main.tile[i, worldSurfaceLow].active() || (int) Main.tile[i, worldSurfaceLow].wall > 0)
                  {
                    if (i == num2)
                    {
                      num9 = 20;
                      WorldGen.ChasmRunner(i, worldSurfaceLow, WorldGen.genRand.Next(150) + 150, true);
                      break;
                    }
                    if (WorldGen.genRand.Next(35) == 0 && num9 == 0)
                    {
                      num9 = 30;
                      bool makeOrb = true;
                      WorldGen.ChasmRunner(i, worldSurfaceLow, WorldGen.genRand.Next(50) + 50, makeOrb);
                      break;
                    }
                    break;
                  }
                }
              }
              for (int worldSurfaceLow = (int) WorldGen.worldSurfaceLow; (double) worldSurfaceLow < Main.worldSurface - 1.0; ++worldSurfaceLow)
              {
                if (Main.tile[i, worldSurfaceLow].active())
                {
                  int num5 = worldSurfaceLow + WorldGen.genRand.Next(10, 14);
                  for (int index2 = worldSurfaceLow; index2 < num5; ++index2)
                  {
                    if (((int) Main.tile[i, index2].type == 59 || (int) Main.tile[i, index2].type == 60) && (i >= num3 + WorldGen.genRand.Next(5) && i < num4 - WorldGen.genRand.Next(5)))
                      Main.tile[i, index2].type = (ushort) 0;
                  }
                  break;
                }
              }
            }
            double num10 = Main.worldSurface + 40.0;
            for (int index2 = num3; index2 < num4; ++index2)
            {
              num10 += (double) WorldGen.genRand.Next(-2, 3);
              if (num10 < Main.worldSurface + 30.0)
                num10 = Main.worldSurface + 30.0;
              if (num10 > Main.worldSurface + 50.0)
                num10 = Main.worldSurface + 50.0;
              i2 = index2;
              bool flag2 = false;
              for (int worldSurfaceLow = (int) WorldGen.worldSurfaceLow; (double) worldSurfaceLow < num10; ++worldSurfaceLow)
              {
                if (Main.tile[i2, worldSurfaceLow].active())
                {
                  if ((int) Main.tile[i2, worldSurfaceLow].type == 53 && i2 >= num3 + WorldGen.genRand.Next(5) && i2 <= num4 - WorldGen.genRand.Next(5))
                    Main.tile[i2, worldSurfaceLow].type = (ushort) 112;
                  if ((int) Main.tile[i2, worldSurfaceLow].type == 0 && (double) worldSurfaceLow < Main.worldSurface - 1.0 && !flag2)
                  {
                    WorldGen.grassSpread = 0;
                    WorldGen.SpreadGrass(i2, worldSurfaceLow, 0, 23, true, (byte) 0);
                  }
                  flag2 = true;
                  if ((int) Main.tile[i2, worldSurfaceLow].type == 1 && i2 >= num3 + WorldGen.genRand.Next(5) && i2 <= num4 - WorldGen.genRand.Next(5))
                    Main.tile[i2, worldSurfaceLow].type = (ushort) 25;
                  if ((int) Main.tile[i2, worldSurfaceLow].wall == 216)
                    Main.tile[i2, worldSurfaceLow].wall = (byte) 217;
                  else if ((int) Main.tile[i2, worldSurfaceLow].wall == 187)
                    Main.tile[i2, worldSurfaceLow].wall = (byte) 220;
                  if ((int) Main.tile[i2, worldSurfaceLow].type == 2)
                    Main.tile[i2, worldSurfaceLow].type = (ushort) 23;
                  if ((int) Main.tile[i2, worldSurfaceLow].type == 161)
                    Main.tile[i2, worldSurfaceLow].type = (ushort) 163;
                  else if ((int) Main.tile[i2, worldSurfaceLow].type == 396)
                    Main.tile[i2, worldSurfaceLow].type = (ushort) 400;
                  else if ((int) Main.tile[i2, worldSurfaceLow].type == 397)
                    Main.tile[i2, worldSurfaceLow].type = (ushort) 398;
                }
              }
            }
            for (int index2 = num3; index2 < num4; ++index2)
            {
              for (int index3 = 0; index3 < Main.maxTilesY - 50; ++index3)
              {
                if (Main.tile[index2, index3].active() && (int) Main.tile[index2, index3].type == 31)
                {
                  int num5 = index2 - 13;
                  int num6 = index2 + 13;
                  int num7 = index3 - 13;
                  int num8 = index3 + 13;
                  for (int index4 = num5; index4 < num6; ++index4)
                  {
                    if (index4 > 10 && index4 < Main.maxTilesX - 10)
                    {
                      for (int index5 = num7; index5 < num8; ++index5)
                      {
                        if (Math.Abs(index4 - index2) + Math.Abs(index5 - index3) < 9 + WorldGen.genRand.Next(11) && WorldGen.genRand.Next(3) != 0 && (int) Main.tile[index4, index5].type != 31)
                        {
                          Main.tile[index4, index5].active(true);
                          Main.tile[index4, index5].type = (ushort) 25;
                          if (Math.Abs(index4 - index2) <= 1 && Math.Abs(index5 - index3) <= 1)
                            Main.tile[index4, index5].active(false);
                        }
                        if ((int) Main.tile[index4, index5].type != 31 && Math.Abs(index4 - index2) <= 2 + WorldGen.genRand.Next(3) && Math.Abs(index5 - index3) <= 2 + WorldGen.genRand.Next(3))
                          Main.tile[index4, index5].active(false);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Slush", (WorldGenLegacyMethod) (progress =>
      {
        for (int index1 = snowTop; index1 < snowBottom; ++index1)
        {
          for (int index2 = snowMinX[index1]; index2 < snowMaxX[index1]; ++index2)
          {
            switch (Main.tile[index2, index1].type)
            {
              case 123:
                Main.tile[index2, index1].type = (ushort) 224;
                break;
              case 59:
                bool flag = true;
                int num = 3;
                for (int index3 = index2 - num; index3 <= index2 + num; ++index3)
                {
                  for (int index4 = index1 - num; index4 <= index1 + num; ++index4)
                  {
                    if ((int) Main.tile[index3, index4].type == 60 || (int) Main.tile[index3, index4].type == 70 || ((int) Main.tile[index3, index4].type == 71 || (int) Main.tile[index3, index4].type == 72))
                    {
                      flag = false;
                      break;
                    }
                  }
                }
                if (flag)
                {
                  Main.tile[index2, index1].type = (ushort) 224;
                  break;
                }
                break;
              case 1:
                Main.tile[index2, index1].type = (ushort) 161;
                break;
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Mud Caves To Grass", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[21].Value;
        for (int index = 0; index < WorldGen.numMCaves; ++index)
        {
          int i = WorldGen.mCaveX[index];
          int num = WorldGen.mCaveY[index];
          int j1 = num;
          WorldGen.CaveOpenater(i, j1);
          int j2 = num;
          int steps = WorldGen.genRand.Next(40, 50);
          WorldGen.Cavinator(i, j2, steps);
        }
      }));
      WorldGen.AddGenerationPass("Beaches", (WorldGenLegacyMethod) (progress =>
      {
        int index1 = 0;
        int index2 = 0;
        int index3 = 20;
        int index4 = Main.maxTilesX - 20;
        progress.Message = Lang.gen[22].Value;
        for (int index5 = 0; index5 < 2; ++index5)
        {
          if (index5 == 0)
          {
            int num1 = 0;
            int num2 = WorldGen.genRand.Next(125, 200) + 50;
            if (dungeonSide == 1)
              num2 = 275;
            int num3 = 0;
            float num4 = 1f;
            int index6 = 0;
            while (!Main.tile[num2 - 1, index6].active())
              ++index6;
            index1 = index6;
            int num5 = index6 + WorldGen.genRand.Next(1, 5);
            for (int index7 = num2 - 1; index7 >= num1; --index7)
            {
              ++num3;
              if (num3 < 3)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.2f;
              else if (num3 < 6)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.15f;
              else if (num3 < 9)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.1f;
              else if (num3 < 15)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.07f;
              else if (num3 < 50)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.05f;
              else if (num3 < 75)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.04f;
              else if (num3 < 100)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.03f;
              else if (num3 < 125)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.02f;
              else if (num3 < 150)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.01f;
              else if (num3 < 175)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.005f;
              else if (num3 < 200)
                num4 += (float) WorldGen.genRand.Next(10, 20) * (1f / 1000f);
              else if (num3 < 230)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.01f;
              else if (num3 < 235)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.05f;
              else if (num3 < 240)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.1f;
              else if (num3 < 245)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.05f;
              else if (num3 < (int) byte.MaxValue)
                num4 += (float) WorldGen.genRand.Next(10, 20) * 0.01f;
              if (num3 == 235)
                index4 = index7;
              if (num3 == 235)
                index3 = index7;
              int num6 = WorldGen.genRand.Next(15, 20);
              for (int index8 = 0; (double) index8 < (double) num5 + (double) num4 + (double) num6; ++index8)
              {
                if ((double) index8 < (double) num5 + (double) num4 * 0.75 - 3.0)
                {
                  Main.tile[index7, index8].active(false);
                  if (index8 > num5)
                    Main.tile[index7, index8].liquid = byte.MaxValue;
                  else if (index8 == num5)
                    Main.tile[index7, index8].liquid = (byte) 127;
                }
                else if (index8 > num5)
                {
                  Main.tile[index7, index8].type = (ushort) 53;
                  Main.tile[index7, index8].active(true);
                }
                Main.tile[index7, index8].wall = (byte) 0;
              }
            }
          }
          else
          {
            int index6 = Main.maxTilesX - WorldGen.genRand.Next(125, 200) - 50;
            int maxTilesX = Main.maxTilesX;
            if (dungeonSide == -1)
              index6 = Main.maxTilesX - 275;
            float num1 = 1f;
            int num2 = 0;
            int index7 = 0;
            while (!Main.tile[index6, index7].active())
              ++index7;
            index2 = index7;
            int num3 = index7 + WorldGen.genRand.Next(1, 5);
            for (int index8 = index6; index8 < maxTilesX; ++index8)
            {
              ++num2;
              if (num2 < 3)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.2f;
              else if (num2 < 6)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.15f;
              else if (num2 < 9)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.1f;
              else if (num2 < 15)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.07f;
              else if (num2 < 50)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.05f;
              else if (num2 < 75)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.04f;
              else if (num2 < 100)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.03f;
              else if (num2 < 125)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.02f;
              else if (num2 < 150)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.01f;
              else if (num2 < 175)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.005f;
              else if (num2 < 200)
                num1 += (float) WorldGen.genRand.Next(10, 20) * (1f / 1000f);
              else if (num2 < 230)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.01f;
              else if (num2 < 235)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.05f;
              else if (num2 < 240)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.1f;
              else if (num2 < 245)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.05f;
              else if (num2 < (int) byte.MaxValue)
                num1 += (float) WorldGen.genRand.Next(10, 20) * 0.01f;
              if (num2 == 235)
                index4 = index8;
              int num4 = WorldGen.genRand.Next(15, 20);
              for (int index9 = 0; (double) index9 < (double) num3 + (double) num1 + (double) num4; ++index9)
              {
                if ((double) index9 < (double) num3 + (double) num1 * 0.75 - 3.0 && (double) index9 < Main.worldSurface - 2.0)
                {
                  Main.tile[index8, index9].active(false);
                  if (index9 > num3)
                    Main.tile[index8, index9].liquid = byte.MaxValue;
                  else if (index9 == num3)
                    Main.tile[index8, index9].liquid = (byte) 127;
                }
                else if (index9 > num3)
                {
                  Main.tile[index8, index9].type = (ushort) 53;
                  Main.tile[index8, index9].active(true);
                }
                Main.tile[index8, index9].wall = (byte) 0;
              }
            }
          }
        }
        while (!Main.tile[index3, index1].active())
          ++index1;
        int num7 = index1 + 1;
        while (!Main.tile[index4, index2].active())
          ++index2;
        int num8 = index2 + 1;
      }));
      WorldGen.AddGenerationPass("Gems", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[23].Value;
        for (int type = 63; type <= 68; ++type)
        {
          float num1 = 0.0f;
          if (type == 67)
            num1 = (float) Main.maxTilesX * 0.5f;
          else if (type == 66)
            num1 = (float) Main.maxTilesX * 0.45f;
          else if (type == 63)
            num1 = (float) Main.maxTilesX * 0.3f;
          else if (type == 65)
            num1 = (float) Main.maxTilesX * 0.25f;
          else if (type == 64)
            num1 = (float) Main.maxTilesX * 0.1f;
          else if (type == 68)
            num1 = (float) Main.maxTilesX * 0.05f;
          float num2 = num1 * 0.2f;
          for (int index = 0; (double) index < (double) num2; ++index)
          {
            int i = WorldGen.genRand.Next(0, Main.maxTilesX);
            int j;
            for (j = WorldGen.genRand.Next((int) Main.worldSurface, Main.maxTilesY); (int) Main.tile[i, j].type != 1; j = WorldGen.genRand.Next((int) Main.worldSurface, Main.maxTilesY))
              i = WorldGen.genRand.Next(0, Main.maxTilesX);
            WorldGen.TileRunner(i, j, (double) WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(3, 7), type, false, 0.0f, 0.0f, false, true);
          }
        }
        for (int index1 = 0; index1 < 2; ++index1)
        {
          int num1 = 1;
          int num2 = 5;
          int num3 = Main.maxTilesX - 5;
          if (index1 == 1)
          {
            num1 = -1;
            num2 = Main.maxTilesX - 5;
            num3 = 5;
          }
          int index2 = num2;
          while (index2 != num3)
          {
            for (int index3 = 10; index3 < Main.maxTilesY - 10; ++index3)
            {
              if (Main.tile[index2, index3].active() && Main.tile[index2, index3 + 1].active() && (Main.tileSand[(int) Main.tile[index2, index3].type] && Main.tileSand[(int) Main.tile[index2, index3 + 1].type]))
              {
                ushort type = Main.tile[index2, index3].type;
                int index4 = index2 + num1;
                int index5 = index3 + 1;
                if (!Main.tile[index4, index3].active() && !Main.tile[index4, index3 + 1].active())
                {
                  while (!Main.tile[index4, index5].active())
                    ++index5;
                  int index6 = index5 - 1;
                  Main.tile[index2, index3].active(false);
                  Main.tile[index4, index6].active(true);
                  Main.tile[index4, index6].type = type;
                }
              }
            }
            index2 += num1;
          }
        }
      }));
      WorldGen.AddGenerationPass("Gravitating Sand", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[24].Value;
        for (int x = 0; x < Main.maxTilesX; ++x)
        {
          float num1 = (float) x / (float) (Main.maxTilesX - 1);
          progress.Set(num1);
          bool flag = false;
          int num2 = 0;
          for (int y = Main.maxTilesY - 1; y > 0; --y)
          {
            if (WorldGen.SolidOrSlopedTile(x, y))
            {
              ushort type = Main.tile[x, y].type;
              if (flag && y < (int) Main.worldSurface && (y != num2 - 1 && TileID.Sets.Falling[(int) type]))
              {
                for (int index = y; index < num2; ++index)
                {
                  Main.tile[x, index].type = type;
                  Main.tile[x, index].active(true);
                }
              }
              flag = true;
              num2 = y;
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Clean Up Dirt", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[25].Value;
        for (int index1 = 3; index1 < Main.maxTilesX - 3; ++index1)
        {
          float num = (float) index1 / (float) Main.maxTilesX;
          progress.Set(0.5f * num);
          bool flag = true;
          for (int index2 = 0; (double) index2 < Main.worldSurface; ++index2)
          {
            if (flag)
            {
              if ((int) Main.tile[index1, index2].wall == 2 || (int) Main.tile[index1, index2].wall == 40 || (int) Main.tile[index1, index2].wall == 64)
                Main.tile[index1, index2].wall = (byte) 0;
              if ((int) Main.tile[index1, index2].type != 53 && (int) Main.tile[index1, index2].type != 112 && (int) Main.tile[index1, index2].type != 234)
              {
                if ((int) Main.tile[index1 - 1, index2].wall == 2 || (int) Main.tile[index1 - 1, index2].wall == 40 || (int) Main.tile[index1 - 1, index2].wall == 40)
                  Main.tile[index1 - 1, index2].wall = (byte) 0;
                if (((int) Main.tile[index1 - 2, index2].wall == 2 || (int) Main.tile[index1 - 2, index2].wall == 40 || (int) Main.tile[index1 - 2, index2].wall == 40) && WorldGen.genRand.Next(2) == 0)
                  Main.tile[index1 - 2, index2].wall = (byte) 0;
                if (((int) Main.tile[index1 - 3, index2].wall == 2 || (int) Main.tile[index1 - 3, index2].wall == 40 || (int) Main.tile[index1 - 3, index2].wall == 40) && WorldGen.genRand.Next(2) == 0)
                  Main.tile[index1 - 3, index2].wall = (byte) 0;
                if ((int) Main.tile[index1 + 1, index2].wall == 2 || (int) Main.tile[index1 + 1, index2].wall == 40 || (int) Main.tile[index1 + 1, index2].wall == 40)
                  Main.tile[index1 + 1, index2].wall = (byte) 0;
                if (((int) Main.tile[index1 + 2, index2].wall == 2 || (int) Main.tile[index1 + 2, index2].wall == 40 || (int) Main.tile[index1 + 2, index2].wall == 40) && WorldGen.genRand.Next(2) == 0)
                  Main.tile[index1 + 2, index2].wall = (byte) 0;
                if (((int) Main.tile[index1 + 3, index2].wall == 2 || (int) Main.tile[index1 + 3, index2].wall == 40 || (int) Main.tile[index1 + 3, index2].wall == 40) && WorldGen.genRand.Next(2) == 0)
                  Main.tile[index1 + 3, index2].wall = (byte) 0;
                if (Main.tile[index1, index2].active())
                  flag = false;
              }
            }
            else if ((int) Main.tile[index1, index2].wall == 0 && (int) Main.tile[index1, index2 + 1].wall == 0 && ((int) Main.tile[index1, index2 + 2].wall == 0 && (int) Main.tile[index1, index2 + 3].wall == 0) && ((int) Main.tile[index1, index2 + 4].wall == 0 && (int) Main.tile[index1 - 1, index2].wall == 0 && ((int) Main.tile[index1 + 1, index2].wall == 0 && (int) Main.tile[index1 - 2, index2].wall == 0)) && ((int) Main.tile[index1 + 2, index2].wall == 0 && !Main.tile[index1, index2].active() && (!Main.tile[index1, index2 + 1].active() && !Main.tile[index1, index2 + 2].active()) && !Main.tile[index1, index2 + 3].active()))
              flag = true;
          }
        }
        for (int index1 = Main.maxTilesX - 5; index1 >= 5; --index1)
        {
          float num = (float) index1 / (float) Main.maxTilesX;
          progress.Set((float) (1.0 - 0.5 * (double) num));
          bool flag = true;
          for (int index2 = 0; (double) index2 < Main.worldSurface; ++index2)
          {
            if (flag)
            {
              if ((int) Main.tile[index1, index2].wall == 2 || (int) Main.tile[index1, index2].wall == 40 || (int) Main.tile[index1, index2].wall == 64)
                Main.tile[index1, index2].wall = (byte) 0;
              if ((int) Main.tile[index1, index2].type != 53)
              {
                if ((int) Main.tile[index1 - 1, index2].wall == 2 || (int) Main.tile[index1 - 1, index2].wall == 40 || (int) Main.tile[index1 - 1, index2].wall == 40)
                  Main.tile[index1 - 1, index2].wall = (byte) 0;
                if (((int) Main.tile[index1 - 2, index2].wall == 2 || (int) Main.tile[index1 - 2, index2].wall == 40 || (int) Main.tile[index1 - 2, index2].wall == 40) && WorldGen.genRand.Next(2) == 0)
                  Main.tile[index1 - 2, index2].wall = (byte) 0;
                if (((int) Main.tile[index1 - 3, index2].wall == 2 || (int) Main.tile[index1 - 3, index2].wall == 40 || (int) Main.tile[index1 - 3, index2].wall == 40) && WorldGen.genRand.Next(2) == 0)
                  Main.tile[index1 - 3, index2].wall = (byte) 0;
                if ((int) Main.tile[index1 + 1, index2].wall == 2 || (int) Main.tile[index1 + 1, index2].wall == 40 || (int) Main.tile[index1 + 1, index2].wall == 40)
                  Main.tile[index1 + 1, index2].wall = (byte) 0;
                if (((int) Main.tile[index1 + 2, index2].wall == 2 || (int) Main.tile[index1 + 2, index2].wall == 40 || (int) Main.tile[index1 + 2, index2].wall == 40) && WorldGen.genRand.Next(2) == 0)
                  Main.tile[index1 + 2, index2].wall = (byte) 0;
                if (((int) Main.tile[index1 + 3, index2].wall == 2 || (int) Main.tile[index1 + 3, index2].wall == 40 || (int) Main.tile[index1 + 3, index2].wall == 40) && WorldGen.genRand.Next(2) == 0)
                  Main.tile[index1 + 3, index2].wall = (byte) 0;
                if (Main.tile[index1, index2].active())
                  flag = false;
              }
            }
            else if ((int) Main.tile[index1, index2].wall == 0 && (int) Main.tile[index1, index2 + 1].wall == 0 && ((int) Main.tile[index1, index2 + 2].wall == 0 && (int) Main.tile[index1, index2 + 3].wall == 0) && ((int) Main.tile[index1, index2 + 4].wall == 0 && (int) Main.tile[index1 - 1, index2].wall == 0 && ((int) Main.tile[index1 + 1, index2].wall == 0 && (int) Main.tile[index1 - 2, index2].wall == 0)) && ((int) Main.tile[index1 + 2, index2].wall == 0 && !Main.tile[index1, index2].active() && (!Main.tile[index1, index2 + 1].active() && !Main.tile[index1, index2 + 2].active()) && !Main.tile[index1, index2 + 3].active()))
              flag = true;
          }
        }
      }));
      WorldGen.AddGenerationPass("Pyramids", (WorldGenLegacyMethod) (progress =>
      {
        for (int index1 = 0; index1 < numPyr; ++index1)
        {
          int i = PyrX[index1];
          int index2 = PyrY[index1];
          if (i > 300 && i < Main.maxTilesX - 300 && (dungeonSide >= 0 || (double) i >= (double) WorldGen.dungeonX + (double) Main.maxTilesX * 0.15) && (dungeonSide <= 0 || (double) i <= (double) WorldGen.dungeonX - (double) Main.maxTilesX * 0.15))
          {
            while (!Main.tile[i, index2].active() && (double) index2 < Main.worldSurface)
              ++index2;
            if ((double) index2 < Main.worldSurface && (int) Main.tile[i, index2].type == 53)
            {
              int num1 = Main.maxTilesX;
              for (int index3 = 0; index3 < index1; ++index3)
              {
                int num2 = Math.Abs(i - PyrX[index3]);
                if (num2 < num1)
                  num1 = num2;
              }
              if (num1 >= 250)
              {
                int j = index2 - 1;
                WorldGen.Pyramid(i, j);
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Dirt Rock Wall Runner", (WorldGenLegacyMethod) (progress =>
      {
        for (int index = 0; index < Main.maxTilesX; ++index)
        {
          int i = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
          int j = WorldGen.genRand.Next(10, (int) Main.worldSurface);
          if ((int) Main.tile[i, j].wall == 2)
            WorldGen.DirtyRockRunner(i, j);
        }
      }));
      WorldGen.AddGenerationPass("Living Trees", (WorldGenLegacyMethod) (progress =>
      {
        int num1 = WorldGen.genRand.Next(0, (int) (3.0 * (double) (Main.maxTilesX / 4200)));
        for (int index1 = 0; index1 < num1; ++index1)
        {
          bool flag1 = false;
          int num2 = 0;
          while (!flag1)
          {
            ++num2;
            if (num2 > 1000)
              flag1 = true;
            int i = WorldGen.genRand.Next(300, Main.maxTilesX - 300);
            if (i <= Main.maxTilesX / 2 - 100 || i >= Main.maxTilesX / 2 + 100)
            {
              int index2 = 0;
              while (!Main.tile[i, index2].active() && (double) index2 < Main.worldSurface)
                ++index2;
              if ((int) Main.tile[i, index2].type == 0)
              {
                int j = index2 - 1;
                if (j > 150)
                {
                  bool flag2 = true;
                  for (int index3 = i - 50; index3 < i + 50; ++index3)
                  {
                    for (int index4 = j - 50; index4 < j + 50; ++index4)
                    {
                      if (Main.tile[index3, index4].active())
                      {
                        switch (Main.tile[index3, index4].type)
                        {
                          case 41:
                          case 43:
                          case 44:
                          case 189:
                          case 196:
                            flag2 = false;
                            continue;
                          default:
                            continue;
                        }
                      }
                    }
                  }
                  if (flag2)
                    flag1 = WorldGen.GrowLivingTree(i, j);
                }
              }
            }
          }
        }
        Main.tileSolid[192] = false;
      }));
      WorldGen.AddGenerationPass("Wood Tree Walls", (WorldGenLegacyMethod) (progress =>
      {
        for (int index1 = 25; index1 < Main.maxTilesX - 25; ++index1)
        {
          for (int index2 = 25; (double) index2 < Main.worldSurface; ++index2)
          {
            if ((int) Main.tile[index1, index2].type == 191 || (int) Main.tile[index1, index2 - 1].type == 191 || ((int) Main.tile[index1 - 1, index2].type == 191 || (int) Main.tile[index1 + 1, index2].type == 191) || (int) Main.tile[index1, index2 + 1].type == 191)
            {
              bool flag = true;
              for (int index3 = index1 - 1; index3 <= index1 + 1; ++index3)
              {
                for (int index4 = index2 - 1; index4 <= index2 + 1; ++index4)
                {
                  if (index3 != index1 && index4 != index2 && ((int) Main.tile[index3, index4].type != 191 && (int) Main.tile[index3, index4].wall != 78))
                    flag = false;
                }
              }
              if (flag)
                Main.tile[index1, index2].wall = (byte) 78;
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Altars", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[26].Value;
        int num = (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 1.99999994947575E-05);
        for (int index1 = 0; index1 < num; ++index1)
        {
          progress.Set((float) index1 / (float) num);
          for (int index2 = 0; index2 < 10000; ++index2)
          {
            int x = WorldGen.genRand.Next(1, Main.maxTilesX - 3);
            int y = (int) (worldSurfaceHigh + 20.0);
            int style = WorldGen.crimson ? 1 : 0;
            WorldGen.Place3x2(x, y, (ushort) 26, style);
            if ((int) Main.tile[x, y].type == 26)
              break;
          }
        }
      }));
      WorldGen.AddGenerationPass("Wet Jungle", (WorldGenLegacyMethod) (progress =>
      {
        for (int index = 0; index < Main.maxTilesX; ++index)
        {
          i2 = index;
          for (int worldSurfaceLow = (int) WorldGen.worldSurfaceLow; (double) worldSurfaceLow < Main.worldSurface - 1.0; ++worldSurfaceLow)
          {
            if (Main.tile[i2, worldSurfaceLow].active())
            {
              if ((int) Main.tile[i2, worldSurfaceLow].type == 60)
              {
                Main.tile[i2, worldSurfaceLow - 1].liquid = byte.MaxValue;
                Main.tile[i2, worldSurfaceLow - 2].liquid = byte.MaxValue;
                break;
              }
              break;
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Remove Water From Sand", (WorldGenLegacyMethod) (progress =>
      {
label_10:
        for (int index1 = 400; index1 < Main.maxTilesX - 400; ++index1)
        {
          i2 = index1;
          for (int worldSurfaceLow = (int) WorldGen.worldSurfaceLow; (double) worldSurfaceLow < Main.worldSurface - 1.0; ++worldSurfaceLow)
          {
            if (Main.tile[i2, worldSurfaceLow].active())
            {
              switch (Main.tile[i2, worldSurfaceLow].type)
              {
                case 53:
                case 396:
                case 397:
                case 404:
                case 407:
                  int index2 = worldSurfaceLow;
                  while ((double) index2 > WorldGen.worldSurfaceLow)
                  {
                    --index2;
                    Main.tile[i2, index2].liquid = (byte) 0;
                  }
                  goto label_10;
                default:
                  goto label_10;
              }
            }
          }
        }
        Main.tileSolid[192] = true;
      }));
      WorldGen.AddGenerationPass("Jungle Temple", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[70].Value;
        bool flag = true;
        while (flag)
        {
          int y = WorldGen.genRand.Next((int) Main.rockLayer, Main.maxTilesY - 500);
          int x = dungeonSide >= 0 ? WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.15), (int) ((double) Main.maxTilesX * 0.4)) : WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.6), (int) ((double) Main.maxTilesX * 0.85));
          if (Main.tile[x, y].active() && (int) Main.tile[x, y].type == 60)
          {
            flag = false;
            WorldGen.makeTemple(x, y);
          }
        }
      }));
      WorldGen.AddGenerationPass("Hives", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[71].Value;
        float num1 = (float) (Main.maxTilesX / 4200);
        float num2 = (float) (1 + WorldGen.genRand.Next((int) (5.0 * (double) num1), (int) (8.0 * (double) num1)));
        int num3 = 10000;
label_6:
        while ((double) num2 > 0.0 && num3 > 0)
        {
          --num3;
          Point origin = WorldGen.RandomWorldPoint((int) (Main.worldSurface + Main.rockLayer) >> 1, 20, 300, 20);
          if (Terraria.World.Generation.Biomes<HiveBiome>.Place(origin, structures))
          {
            --num2;
            int num4 = WorldGen.genRand.Next(5);
            int num5 = 0;
            int num6 = 10000;
            while (true)
            {
              int x;
              int y;
              do
              {
                if (num5 < num4 && num6 > 0)
                {
                  float num7 = (float) ((double) WorldGen.genRand.NextFloat() * 60.0 + 30.0);
                  double a;
                  x = (int) (Math.Cos(a = (double) WorldGen.genRand.NextFloat() * 6.28318548202515) * (double) num7) + origin.X;
                  y = (int) (Math.Sin(a) * (double) num7) + origin.Y;
                  --num6;
                }
                else
                  goto label_6;
              }
              while (x <= 50 || x >= Main.maxTilesX - 50 || !Terraria.World.Generation.Biomes<HoneyPatchBiome>.Place(x, y, structures));
              ++num5;
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Jungle Chests", (WorldGenLegacyMethod) (progress =>
      {
        WorldGen.genRand.Next(40, Main.maxTilesX - 40);
        WorldGen.genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
        float num1 = (float) WorldGen.genRand.Next(7, 12) * (float) (Main.maxTilesX / 4200);
        for (int index1 = 0; (double) index1 < (double) num1; ++index1)
        {
          bool flag1 = true;
          while (flag1)
          {
            int index2 = WorldGen.genRand.Next(40, Main.maxTilesX / 2 - 40);
            if (dungeonSide < 0)
              index2 += Main.maxTilesX / 2;
            int index3 = WorldGen.genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
            if ((int) Main.tile[index2, index3].type == 60)
            {
              int num2 = 30;
              flag1 = false;
              int index4 = index2 - num2;
              while (index4 < index2 + num2)
              {
                int index5 = index3 - num2;
                while (index5 < index3 + num2)
                {
                  if (Main.tile[index4, index5].active() && ((int) Main.tile[index4, index5].type == 225 || (int) Main.tile[index4, index5].type == 229 || ((int) Main.tile[index4, index5].type == 226 || (int) Main.tile[index4, index5].type == 119) || (int) Main.tile[index4, index5].type == 120))
                    flag1 = false;
                  if ((int) Main.tile[index4, index5].wall == 86 || (int) Main.tile[index4, index5].wall == 87)
                    flag1 = false;
                  index5 += 3;
                }
                index4 += 3;
              }
            }
            if (!flag1)
            {
              int num2 = WorldGen.genRand.Next(2, 4);
              int num3 = WorldGen.genRand.Next(2, 4);
              int num4 = 0;
              if ((int) jungleHut == 119)
                num4 = 23;
              else if ((int) jungleHut == 120)
                num4 = 24;
              else if ((int) jungleHut == 158)
                num4 = 42;
              else if ((int) jungleHut == 175)
                num4 = 45;
              else if ((int) jungleHut == 45)
                num4 = 10;
              for (int index4 = index2 - num2 - 1; index4 <= index2 + num2 + 1; ++index4)
              {
                for (int index5 = index3 - num3 - 1; index5 <= index3 + num3 + 1; ++index5)
                {
                  Main.tile[index4, index5].active(true);
                  Main.tile[index4, index5].type = jungleHut;
                  Main.tile[index4, index5].liquid = (byte) 0;
                  Main.tile[index4, index5].lava(false);
                }
              }
              for (int index4 = index2 - num2; index4 <= index2 + num2; ++index4)
              {
                for (int index5 = index3 - num3; index5 <= index3 + num3; ++index5)
                {
                  Main.tile[index4, index5].active(false);
                  Main.tile[index4, index5].wall = (byte) num4;
                }
              }
              bool flag2 = false;
              int num5 = 0;
              while (!flag2 && num5 < 100)
              {
                ++num5;
                int i = WorldGen.genRand.Next(index2 - num2, index2 + num2 + 1);
                int j = WorldGen.genRand.Next(index3 - num3, index3 + num3 - 2);
                WorldGen.PlaceTile(i, j, 4, true, false, -1, 3);
                if ((int) Main.tile[i, j].type == 4)
                  flag2 = true;
              }
              for (int index4 = index2 - num2 - 1; index4 <= index2 + num2 + 1; ++index4)
              {
                for (int index5 = index3 + num3 - 2; index5 <= index3 + num3; ++index5)
                  Main.tile[index4, index5].active(false);
              }
              for (int index4 = index2 - num2 - 1; index4 <= index2 + num2 + 1; ++index4)
              {
                for (int index5 = index3 + num3 - 2; index5 <= index3 + num3 - 1; ++index5)
                  Main.tile[index4, index5].active(false);
              }
              for (int index4 = index2 - num2 - 1; index4 <= index2 + num2 + 1; ++index4)
              {
                int num6 = 4;
                for (int index5 = index3 + num3 + 2; !Main.tile[index4, index5].active() && index5 < Main.maxTilesY && num6 > 0; --num6)
                {
                  Main.tile[index4, index5].active(true);
                  Main.tile[index4, index5].type = (ushort) 59;
                  ++index5;
                }
              }
              int num7 = num2 - WorldGen.genRand.Next(1, 3);
              int index6 = index3 - num3 - 2;
              while (num7 > -1)
              {
                for (int index4 = index2 - num7 - 1; index4 <= index2 + num7 + 1; ++index4)
                {
                  Main.tile[index4, index6].active(true);
                  Main.tile[index4, index6].type = jungleHut;
                }
                num7 -= WorldGen.genRand.Next(1, 3);
                --index6;
              }
              WorldGen.JChestX[WorldGen.numJChests] = index2;
              WorldGen.JChestY[WorldGen.numJChests] = index3;
              ++WorldGen.numJChests;
            }
          }
        }
        Main.tileSolid[137] = false;
      }));
      WorldGen.AddGenerationPass("Smooth World", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[60].Value;
        for (int index1 = 20; index1 < Main.maxTilesX - 20; ++index1)
        {
          float num = (float) index1 / (float) Main.maxTilesX;
          progress.Set(num);
          for (int index2 = 20; index2 < Main.maxTilesY - 20; ++index2)
          {
            if ((int) Main.tile[index1, index2].type != 48 && (int) Main.tile[index1, index2].type != 137 && ((int) Main.tile[index1, index2].type != 232 && (int) Main.tile[index1, index2].type != 191) && ((int) Main.tile[index1, index2].type != 151 && (int) Main.tile[index1, index2].type != 274))
            {
              if (!Main.tile[index1, index2 - 1].active())
              {
                if (WorldGen.SolidTile(index1, index2) && TileID.Sets.CanBeClearedDuringGeneration[(int) Main.tile[index1, index2].type])
                {
                  if (!Main.tile[index1 - 1, index2].halfBrick() && !Main.tile[index1 + 1, index2].halfBrick() && ((int) Main.tile[index1 - 1, index2].slope() == 0 && (int) Main.tile[index1 + 1, index2].slope() == 0))
                  {
                    if (WorldGen.SolidTile(index1, index2 + 1))
                    {
                      if (!WorldGen.SolidTile(index1 - 1, index2) && !Main.tile[index1 - 1, index2 + 1].halfBrick() && (WorldGen.SolidTile(index1 - 1, index2 + 1) && WorldGen.SolidTile(index1 + 1, index2)) && !Main.tile[index1 + 1, index2 - 1].active())
                      {
                        if (WorldGen.genRand.Next(2) == 0)
                          WorldGen.SlopeTile(index1, index2, 2);
                        else
                          WorldGen.PoundTile(index1, index2);
                      }
                      else if (!WorldGen.SolidTile(index1 + 1, index2) && !Main.tile[index1 + 1, index2 + 1].halfBrick() && (WorldGen.SolidTile(index1 + 1, index2 + 1) && WorldGen.SolidTile(index1 - 1, index2)) && !Main.tile[index1 - 1, index2 - 1].active())
                      {
                        if (WorldGen.genRand.Next(2) == 0)
                          WorldGen.SlopeTile(index1, index2, 1);
                        else
                          WorldGen.PoundTile(index1, index2);
                      }
                      else if (WorldGen.SolidTile(index1 + 1, index2 + 1) && WorldGen.SolidTile(index1 - 1, index2 + 1) && (!Main.tile[index1 + 1, index2].active() && !Main.tile[index1 - 1, index2].active()))
                        WorldGen.PoundTile(index1, index2);
                      if (WorldGen.SolidTile(index1, index2))
                      {
                        if (WorldGen.SolidTile(index1 - 1, index2) && WorldGen.SolidTile(index1 + 1, index2 + 2) && (!Main.tile[index1 + 1, index2].active() && !Main.tile[index1 + 1, index2 + 1].active()) && !Main.tile[index1 - 1, index2 - 1].active())
                          WorldGen.KillTile(index1, index2, false, false, false);
                        else if (WorldGen.SolidTile(index1 + 1, index2) && WorldGen.SolidTile(index1 - 1, index2 + 2) && (!Main.tile[index1 - 1, index2].active() && !Main.tile[index1 - 1, index2 + 1].active()) && !Main.tile[index1 + 1, index2 - 1].active())
                          WorldGen.KillTile(index1, index2, false, false, false);
                        else if (!Main.tile[index1 - 1, index2 + 1].active() && !Main.tile[index1 - 1, index2].active() && (WorldGen.SolidTile(index1 + 1, index2) && WorldGen.SolidTile(index1, index2 + 2)))
                        {
                          if (WorldGen.genRand.Next(5) == 0)
                            WorldGen.KillTile(index1, index2, false, false, false);
                          else if (WorldGen.genRand.Next(5) == 0)
                            WorldGen.PoundTile(index1, index2);
                          else
                            WorldGen.SlopeTile(index1, index2, 2);
                        }
                        else if (!Main.tile[index1 + 1, index2 + 1].active() && !Main.tile[index1 + 1, index2].active() && (WorldGen.SolidTile(index1 - 1, index2) && WorldGen.SolidTile(index1, index2 + 2)))
                        {
                          if (WorldGen.genRand.Next(5) == 0)
                            WorldGen.KillTile(index1, index2, false, false, false);
                          else if (WorldGen.genRand.Next(5) == 0)
                            WorldGen.PoundTile(index1, index2);
                          else
                            WorldGen.SlopeTile(index1, index2, 1);
                        }
                      }
                    }
                    if (WorldGen.SolidTile(index1, index2) && !Main.tile[index1 - 1, index2].active() && !Main.tile[index1 + 1, index2].active())
                      WorldGen.KillTile(index1, index2, false, false, false);
                  }
                }
                else if (!Main.tile[index1, index2].active() && (int) Main.tile[index1, index2 + 1].type != 151 && (int) Main.tile[index1, index2 + 1].type != 274)
                {
                  if ((int) Main.tile[index1 + 1, index2].type != 190 && (int) Main.tile[index1 + 1, index2].type != 48 && ((int) Main.tile[index1 + 1, index2].type != 232 && WorldGen.SolidTile(index1 - 1, index2 + 1)) && (WorldGen.SolidTile(index1 + 1, index2) && !Main.tile[index1 - 1, index2].active() && !Main.tile[index1 + 1, index2 - 1].active()))
                  {
                    WorldGen.PlaceTile(index1, index2, (int) Main.tile[index1, index2 + 1].type, false, false, -1, 0);
                    if (WorldGen.genRand.Next(2) == 0)
                      WorldGen.SlopeTile(index1, index2, 2);
                    else
                      WorldGen.PoundTile(index1, index2);
                  }
                  if ((int) Main.tile[index1 - 1, index2].type != 190 && (int) Main.tile[index1 - 1, index2].type != 48 && ((int) Main.tile[index1 - 1, index2].type != 232 && WorldGen.SolidTile(index1 + 1, index2 + 1)) && (WorldGen.SolidTile(index1 - 1, index2) && !Main.tile[index1 + 1, index2].active() && !Main.tile[index1 - 1, index2 - 1].active()))
                  {
                    WorldGen.PlaceTile(index1, index2, (int) Main.tile[index1, index2 + 1].type, false, false, -1, 0);
                    if (WorldGen.genRand.Next(2) == 0)
                      WorldGen.SlopeTile(index1, index2, 1);
                    else
                      WorldGen.PoundTile(index1, index2);
                  }
                }
              }
              else if (!Main.tile[index1, index2 + 1].active() && WorldGen.genRand.Next(2) == 0 && (WorldGen.SolidTile(index1, index2) && !Main.tile[index1 - 1, index2].halfBrick()) && (!Main.tile[index1 + 1, index2].halfBrick() && (int) Main.tile[index1 - 1, index2].slope() == 0 && ((int) Main.tile[index1 + 1, index2].slope() == 0 && WorldGen.SolidTile(index1, index2 - 1))))
              {
                if (WorldGen.SolidTile(index1 - 1, index2) && !WorldGen.SolidTile(index1 + 1, index2) && WorldGen.SolidTile(index1 - 1, index2 - 1))
                  WorldGen.SlopeTile(index1, index2, 3);
                else if (WorldGen.SolidTile(index1 + 1, index2) && !WorldGen.SolidTile(index1 - 1, index2) && WorldGen.SolidTile(index1 + 1, index2 - 1))
                  WorldGen.SlopeTile(index1, index2, 4);
              }
              if (TileID.Sets.Conversion.Sand[(int) Main.tile[index1, index2].type])
                Tile.SmoothSlope(index1, index2, false);
            }
          }
        }
        for (int i = 20; i < Main.maxTilesX - 20; ++i)
        {
          for (int j = 20; j < Main.maxTilesY - 20; ++j)
          {
            if (WorldGen.genRand.Next(2) == 0 && !Main.tile[i, j - 1].active() && ((int) Main.tile[i, j].type != 137 && (int) Main.tile[i, j].type != 48) && ((int) Main.tile[i, j].type != 232 && (int) Main.tile[i, j].type != 191 && ((int) Main.tile[i, j].type != 151 && (int) Main.tile[i, j].type != 274)) && ((int) Main.tile[i, j].type != 75 && (int) Main.tile[i, j].type != 76 && (WorldGen.SolidTile(i, j) && (int) Main.tile[i - 1, j].type != 137) && (int) Main.tile[i + 1, j].type != 137))
            {
              if (WorldGen.SolidTile(i, j + 1) && WorldGen.SolidTile(i + 1, j) && !Main.tile[i - 1, j].active())
                WorldGen.SlopeTile(i, j, 2);
              if (WorldGen.SolidTile(i, j + 1) && WorldGen.SolidTile(i - 1, j) && !Main.tile[i + 1, j].active())
                WorldGen.SlopeTile(i, j, 1);
            }
            if ((int) Main.tile[i, j].slope() == 1 && !WorldGen.SolidTile(i - 1, j))
            {
              WorldGen.SlopeTile(i, j, 0);
              WorldGen.PoundTile(i, j);
            }
            if ((int) Main.tile[i, j].slope() == 2 && !WorldGen.SolidTile(i + 1, j))
            {
              WorldGen.SlopeTile(i, j, 0);
              WorldGen.PoundTile(i, j);
            }
          }
        }
        Main.tileSolid[137] = true;
        Main.tileSolid[190] = false;
        Main.tileSolid[192] = false;
      }));
      WorldGen.AddGenerationPass("Settle Liquids", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[27].Value;
        Liquid.QuickWater(3, -1, -1);
        WorldGen.WaterCheck();
        int num1 = 0;
        Liquid.quickSettle = true;
        while (num1 < 10)
        {
          int num2 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
          ++num1;
          float num3 = 0.0f;
          while (Liquid.numLiquid > 0)
          {
            float num4 = (float) (num2 - (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer)) / (float) num2;
            if (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer > num2)
              num2 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
            if ((double) num4 > (double) num3)
              num3 = num4;
            else
              num4 = num3;
            if (num1 == 1)
              progress.Set((float) ((double) num4 / 3.0 + 0.330000013113022));
            int num5 = 10;
            if (num1 > num5)
              ;
            Liquid.UpdateLiquid();
          }
          WorldGen.WaterCheck();
          progress.Set((float) ((double) num1 * 0.100000001490116 / 3.0 + 0.660000026226044));
        }
        Liquid.quickSettle = false;
        Main.tileSolid[190] = true;
      }));
      WorldGen.AddGenerationPass("Waterfalls", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[69].Value;
        for (int i = 20; i < Main.maxTilesX - 20; ++i)
        {
          float num1 = (float) i / (float) Main.maxTilesX;
          progress.Set(num1 * 0.5f);
          for (int j = 20; j < Main.maxTilesY - 20; ++j)
          {
            if (WorldGen.SolidTile(i, j) && !Main.tile[i - 1, j].active() && (WorldGen.SolidTile(i, j + 1) && !Main.tile[i + 1, j].active()) && ((int) Main.tile[i - 1, j].liquid > 0 || (int) Main.tile[i + 1, j].liquid > 0))
            {
              bool flag = true;
              int num2 = WorldGen.genRand.Next(8, 20);
              int num3 = WorldGen.genRand.Next(8, 20);
              int num4 = j - num2;
              int num5 = num3 + j;
              for (int index = num4; index <= num5; ++index)
              {
                if (Main.tile[i, index].halfBrick())
                  flag = false;
              }
              if (((int) Main.tile[i, j].type == 75 || (int) Main.tile[i, j].type == 76) && WorldGen.genRand.Next(10) != 0)
                flag = false;
              if (flag)
                WorldGen.PoundTile(i, j);
            }
          }
        }
        for (int i = 20; i < Main.maxTilesX - 20; ++i)
        {
          float num = (float) i / (float) Main.maxTilesX;
          progress.Set((float) ((double) num * 0.5 + 0.5));
          for (int j = 20; j < Main.maxTilesY - 20; ++j)
          {
            if ((int) Main.tile[i, j].type != 48 && (int) Main.tile[i, j].type != 232 && (WorldGen.SolidTile(i, j) && WorldGen.SolidTile(i, j + 1)))
            {
              if (!WorldGen.SolidTile(i + 1, j) && Main.tile[i - 1, j].halfBrick() && (int) Main.tile[i - 2, j].liquid > 0)
                WorldGen.PoundTile(i, j);
              if (!WorldGen.SolidTile(i - 1, j) && Main.tile[i + 1, j].halfBrick() && (int) Main.tile[i + 2, j].liquid > 0)
                WorldGen.PoundTile(i, j);
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Ice", (WorldGenLegacyMethod) (progress =>
      {
        for (int i = 10; i < Main.maxTilesX - 10; ++i)
        {
          for (int worldSurface1 = (int) Main.worldSurface; worldSurface1 < Main.maxTilesY - 100; ++worldSurface1)
          {
            if ((int) Main.tile[i, worldSurface1].liquid > 0 && !Main.tile[i, worldSurface1].lava())
              WorldGen.MakeWateryIceThing(i, worldSurface1);
          }
        }
        Main.tileSolid[226] = false;
        Main.tileSolid[162] = false;
      }));
      WorldGen.AddGenerationPass("Wall Variety", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[79].Value;
        int num1 = (int) (300.0 * (double) ((float) (Main.maxTilesX * Main.maxTilesY) / 5040000f));
        int num2 = num1;
        ShapeData data = new ShapeData();
        while (num1 > 0)
        {
          progress.Set((float) (1.0 - (double) num1 / (double) num2));
          Point point = WorldGen.RandomWorldPoint((int) worldSurface, 2, 190, 2);
          Tile tile1 = Main.tile[(int) point.X, (int) point.Y];
          Tile tile2 = Main.tile[(int) point.X, point.Y - 1];
          byte type = 0;
          if ((int) tile1.type == 59 || (int) tile1.type == 60)
            type = (byte) (204 + WorldGen.genRand.Next(4));
          else if ((int) tile1.type == 1 && (int) tile2.wall == 0)
            type = (double) point.Y >= rockLayer ? (point.Y >= WorldGen.lavaLine ? (byte) (208 + WorldGen.genRand.Next(4)) : (byte) (212 + WorldGen.genRand.Next(4))) : (byte) (196 + WorldGen.genRand.Next(4));
          if (tile1.active() && (int) type != 0 && !tile2.active())
          {
            bool foundInvalidTile = false;
            bool flag = WorldUtils.Gen(new Point((int) point.X, point.Y - 1), (GenShape) new ShapeFloodFill(1000), Actions.Chain((GenAction) new Modifiers.IsNotSolid(), new Actions.Blank().Output(data), (GenAction) new Actions.ContinueWrapper(Actions.Chain((GenAction) new Modifiers.IsTouching(true, new ushort[5]
            {
              (ushort) 60,
              (ushort) 147,
              (ushort) 161,
              (ushort) 396,
              (ushort) 397
            }), (GenAction) new Actions.Custom((GenBase.CustomPerUnitAction) ((x, y, args) =>
            {
              foundInvalidTile = true;
              return true;
            }))))));
            if (data.Count > 50 & flag && !foundInvalidTile)
            {
              WorldUtils.Gen(new Point((int) point.X, (int) point.Y), (GenShape) new ModShapes.OuterOutline(data, true, true), (GenAction) new Actions.PlaceWall(type, true));
              --num1;
            }
            data.Clear();
          }
        }
      }));
      WorldGen.AddGenerationPass("Traps", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[34].Value;
        for (int index1 = 0; index1 < (int) ((double) Main.maxTilesX * 0.05); ++index1)
        {
          float num = (float) index1 / ((float) Main.maxTilesX * 0.05f);
          progress.Set(num);
          for (int index2 = 0; index2 < 1150; ++index2)
          {
            int x2 = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
            int y2 = WorldGen.genRand.Next((int) Main.worldSurface, Main.maxTilesY - 210);
            if ((int) Main.tile[x2, y2].wall == 0 && WorldGen.placeTrap(x2, y2, -1))
              break;
          }
        }
      }));
      WorldGen.AddGenerationPass("Life Crystals", (WorldGenLegacyMethod) (progress =>
      {
        dub2 = (float) (Main.maxTilesX / 4200);
        progress.Message = Lang.gen[28].Value;
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 2E-05); ++index)
        {
          float num1 = (float) index / ((float) (Main.maxTilesX * Main.maxTilesY) * 2E-05f);
          progress.Set(num1);
          bool flag = false;
          int num2 = 0;
          while (!flag)
          {
            if (WorldGen.AddLifeCrystal(WorldGen.genRand.Next(40, Main.maxTilesX - 40), WorldGen.genRand.Next((int) (worldSurfaceHigh + 20.0), Main.maxTilesY - 300)))
            {
              flag = true;
            }
            else
            {
              ++num2;
              if (num2 >= 10000)
                flag = true;
            }
          }
        }
        Main.tileSolid[225] = false;
      }));
      WorldGen.AddGenerationPass("Statues", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[29].Value;
        int index1 = 0;
        int num1 = (int) ((double) (WorldGen.statueList.Length * 2) * (double) dub2);
        for (int index2 = 0; index2 < num1; ++index2)
        {
          if (index1 >= WorldGen.statueList.Length)
            index1 = 0;
          int x = (int) WorldGen.statueList[index1].X;
          int y = (int) WorldGen.statueList[index1].Y;
          float num2 = (float) (index2 / num1);
          progress.Set(num2);
          bool flag = false;
          int num3 = 0;
          while (!flag)
          {
            int index3 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
            int index4 = WorldGen.genRand.Next((int) (worldSurfaceHigh + 20.0), Main.maxTilesY - 300);
            while (!Main.tile[index3, index4].active())
              ++index4;
            int index5 = index4 - 1;
            WorldGen.PlaceTile(index3, index5, x, true, true, -1, y);
            if (Main.tile[index3, index5].active() && (int) Main.tile[index3, index5].type == x)
            {
              flag = true;
              if (WorldGen.StatuesWithTraps.Contains(index1))
                WorldGen.PlaceStatueTrap(index3, index5);
              ++index1;
            }
            else
            {
              ++num3;
              if (num3 >= 10000)
                flag = true;
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Buried Chests", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[30].Value;
        Main.tileSolid[226] = true;
        Main.tileSolid[162] = true;
        Main.tileSolid[225] = true;
        for (int index1 = 0; index1 < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 1.6E-05); ++index1)
        {
          float num1 = (float) index1 / ((float) (Main.maxTilesX * Main.maxTilesY) * 1.6E-05f);
          progress.Set(num1);
          bool flag = false;
          int num2 = 0;
          while (!flag)
          {
            float num3 = (float) WorldGen.genRand.Next((int) (5.0 * (double) dub2), (int) (8.0 * (double) dub2 + 1.0));
            int i = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
            int j = WorldGen.genRand.Next((int) (worldSurfaceHigh + 20.0), Main.maxTilesY - 230);
            if ((double) index1 <= (double) num3)
              j = WorldGen.genRand.Next(Main.maxTilesY - 200, Main.maxTilesY - 50);
            int num4 = 0;
            while (Main.wallDungeon[(int) Main.tile[i, j].wall])
            {
              ++num4;
              i = WorldGen.genRand.Next(1, Main.maxTilesX);
              j = WorldGen.genRand.Next((int) (worldSurfaceHigh + 20.0), Main.maxTilesY - 230);
              if (num4 < 1000 && (double) index1 <= (double) num3)
                j = WorldGen.genRand.Next(Main.maxTilesY - 200, Main.maxTilesY - 50);
            }
            if ((double) index1 > (double) num3)
            {
              for (int index2 = 10; index2 > 0; --index2)
              {
                if (Terraria.World.Generation.Biomes<CaveHouseBiome>.Place(WorldGen.genRand.Next(80, Main.maxTilesX - 80), WorldGen.genRand.Next((int) (worldSurfaceHigh + 20.0), Main.maxTilesY - 230), structures))
                {
                  flag = true;
                  break;
                }
              }
            }
            else if (WorldGen.AddBuriedChest(i, j, 0, false, -1))
              flag = true;
            ++num2;
            if (num2 >= 1000)
              flag = true;
          }
        }
        int num = (int) (2.0 * (double) (Main.maxTilesX * Main.maxTilesY) / 5040000.0);
        for (int index = 1000; index >= 0 && num >= 0; --index)
        {
          if (Terraria.World.Generation.Biomes<CaveHouseBiome>.Place(WorldGen.RandomRectanglePoint(WorldGen.UndergroundDesertLocation), structures))
            --num;
        }
        Main.tileSolid[226] = false;
        Main.tileSolid[162] = false;
        Main.tileSolid[225] = false;
      }));
      WorldGen.AddGenerationPass("Surface Chests", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[31].Value;
        for (int index = 0; index < (int) ((double) Main.maxTilesX * 0.005); ++index)
        {
          float num1 = (float) index / ((float) Main.maxTilesX * 0.005f);
          progress.Set(num1);
          bool flag1 = false;
          int num2 = 0;
          while (!flag1)
          {
            int i = WorldGen.genRand.Next(300, Main.maxTilesX - 300);
            int j = WorldGen.genRand.Next((int) WorldGen.worldSurfaceLow, (int) Main.worldSurface);
            bool flag2 = false;
            if ((int) Main.tile[i, j].wall == 2 && !Main.tile[i, j].active())
              flag2 = true;
            if (flag2 && WorldGen.AddBuriedChest(i, j, 0, true, -1))
            {
              flag1 = true;
            }
            else
            {
              ++num2;
              if (num2 >= 2000)
                flag1 = true;
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Jungle Chests Placement", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[32].Value;
        for (int index1 = 0; index1 < WorldGen.numJChests; ++index1)
        {
          float num = (float) (index1 / WorldGen.numJChests);
          progress.Set(num);
          int nextJungleChestItem = WorldGen.GetNextJungleChestItem();
          if (!WorldGen.AddBuriedChest(WorldGen.JChestX[index1] + WorldGen.genRand.Next(2), WorldGen.JChestY[index1], nextJungleChestItem, false, 10))
          {
            for (int i = WorldGen.JChestX[index1] - 1; i <= WorldGen.JChestX[index1] + 1; ++i)
            {
              for (int j = WorldGen.JChestY[index1]; j <= WorldGen.JChestY[index1] + 2; ++j)
                WorldGen.KillTile(i, j, false, false, false);
            }
            for (int index2 = WorldGen.JChestX[index1] - 1; index2 <= WorldGen.JChestX[index1] + 1; ++index2)
            {
              for (int index3 = WorldGen.JChestY[index1]; index3 <= WorldGen.JChestY[index1] + 3; ++index3)
              {
                if (index3 < Main.maxTilesY)
                {
                  Main.tile[index2, index3].slope((byte) 0);
                  Main.tile[index2, index3].halfBrick(false);
                }
              }
            }
            WorldGen.AddBuriedChest(WorldGen.JChestX[index1], WorldGen.JChestY[index1], nextJungleChestItem, false, 10);
          }
        }
      }));
      WorldGen.AddGenerationPass("Water Chests", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[33].Value;
        int num1 = 0;
        for (int index = 0; (double) index < 9.0 * (double) dub2; ++index)
        {
          float num2 = (float) index / (9f * dub2);
          progress.Set(num2);
          ++num1;
          int contain;
          if (WorldGen.genRand.Next(15) == 0)
            contain = 863;
          else if (num1 == 1)
            contain = 186;
          else if (num1 == 2)
          {
            contain = 277;
          }
          else
          {
            contain = 187;
            num1 = 0;
          }
          int i1;
          int j1;
          for (bool flag = false; !flag; flag = WorldGen.AddBuriedChest(i1, j1, contain, false, 17))
          {
            i1 = WorldGen.genRand.Next(1, Main.maxTilesX);
            for (j1 = WorldGen.genRand.Next(1, Main.maxTilesY - 200); (int) Main.tile[i1, j1].liquid < 200 || Main.tile[i1, j1].lava(); j1 = WorldGen.genRand.Next(1, Main.maxTilesY - 200))
              i1 = WorldGen.genRand.Next(1, Main.maxTilesX);
          }
          int i3;
          int j2;
          for (bool flag = false; !flag; flag = WorldGen.AddBuriedChest(i3, j2, contain, false, 17))
          {
            i3 = WorldGen.genRand.Next(1, Main.maxTilesX);
            for (j2 = WorldGen.genRand.Next((int) Main.worldSurface, Main.maxTilesY - 200); (int) Main.tile[i3, j2].liquid < 200 || Main.tile[i3, j2].lava(); j2 = WorldGen.genRand.Next(1, Main.maxTilesY - 200))
              i3 = WorldGen.genRand.Next(1, Main.maxTilesX);
          }
        }
      }));
      WorldGen.AddGenerationPass("Spider Caves", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[64].Value;
        WorldGen.maxTileCount = 3500;
        for (int index1 = 0; index1 < (int) ((double) Main.maxTilesX * 0.005); ++index1)
        {
          float num1 = (float) index1 / ((float) Main.maxTilesX * 0.005f);
          progress.Set(num1);
          int num2 = 0;
          int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
          int y = WorldGen.genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 230);
          for (int index2 = WorldGen.countTiles(x, y, false, true); (index2 >= 3500 || index2 < 500) && num2 < 500; index2 = WorldGen.countTiles(x, y, false, true))
          {
            ++num2;
            x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
            y = WorldGen.genRand.Next((int) Main.rockLayer + 30, Main.maxTilesY - 230);
          }
          if (num2 < 500)
            WorldGen.Spread.Spider(x, y);
        }
        Main.tileSolid[162] = true;
      }));
      WorldGen.AddGenerationPass("Gem Caves", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[64].Value;
        WorldGen.maxTileCount = 300;
        for (int index1 = 0; index1 < (int) ((double) Main.maxTilesX * 0.003); ++index1)
        {
          float num1 = (float) index1 / ((float) Main.maxTilesX * (3f / 1000f));
          progress.Set(num1);
          int num2 = 0;
          int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
          int y = WorldGen.genRand.Next((int) Main.rockLayer + 30, Main.maxTilesY - 230);
          for (int index2 = WorldGen.countTiles(x, y, false, false); (index2 >= 300 || index2 < 50 || (WorldGen.lavaCount > 0 || WorldGen.iceCount > 0) || WorldGen.rockCount == 0) && num2 < 1000; index2 = WorldGen.countTiles(x, y, false, false))
          {
            ++num2;
            x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
            y = WorldGen.genRand.Next((int) Main.rockLayer + 30, Main.maxTilesY - 230);
          }
          if (num2 < 1000)
            WorldGen.gemCave(x, y);
        }
      }));
      WorldGen.AddGenerationPass("Moss", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[61].Value;
        WorldGen.randMoss();
        WorldGen.maxTileCount = 2500;
        for (int index1 = 0; index1 < (int) ((double) Main.maxTilesX * 0.01); ++index1)
        {
          float num1 = (float) index1 / ((float) Main.maxTilesX * 0.01f);
          progress.Set(num1);
          int num2 = 0;
          int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
          int y = WorldGen.genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, WorldGen.waterLine);
          for (int index2 = WorldGen.countTiles(x, y, false, false); (index2 >= 2500 || index2 < 10 || (WorldGen.lavaCount > 0 || WorldGen.iceCount > 0) || WorldGen.rockCount == 0) && num2 < 1000; index2 = WorldGen.countTiles(x, y, false, false))
          {
            ++num2;
            x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
            y = WorldGen.genRand.Next((int) Main.rockLayer + 30, Main.maxTilesY - 230);
          }
          if (num2 < 1000)
          {
            WorldGen.setMoss(x, y);
            WorldGen.Spread.Moss(x, y);
          }
        }
        for (int index = 0; index < Main.maxTilesX; ++index)
        {
          int x = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
          int y = WorldGen.genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, WorldGen.lavaLine);
          if ((int) Main.tile[x, y].type == 1)
          {
            WorldGen.setMoss(x, y);
            Main.tile[x, y].type = (ushort) WorldGen.mossTile;
          }
        }
        float num3 = (float) Main.maxTilesX * 0.05f;
        while ((double) num3 > 0.0)
        {
          int x = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
          int y = WorldGen.genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, WorldGen.lavaLine);
          if ((int) Main.tile[x, y].type == 1 && (!Main.tile[x - 1, y].active() || !Main.tile[x + 1, y].active() || (!Main.tile[x, y - 1].active() || !Main.tile[x, y + 1].active())))
          {
            WorldGen.setMoss(x, y);
            Main.tile[x, y].type = (ushort) WorldGen.mossTile;
            --num3;
          }
        }
        float num4 = (float) Main.maxTilesX * 0.065f;
        while ((double) num4 > 0.0)
        {
          int index1 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
          int index2 = WorldGen.genRand.Next(WorldGen.waterLine, Main.maxTilesY - 200);
          if ((int) Main.tile[index1, index2].type == 1 && (!Main.tile[index1 - 1, index2].active() || !Main.tile[index1 + 1, index2].active() || (!Main.tile[index1, index2 - 1].active() || !Main.tile[index1, index2 + 1].active())))
          {
            int num1 = 25;
            int num2 = 0;
            for (int index3 = index1 - num1; index3 < index1 + num1; ++index3)
            {
              for (int index4 = index2 - num1; index4 < index2 + num1; ++index4)
              {
                if ((int) Main.tile[index3, index4].liquid > 0 && Main.tile[index3, index4].lava())
                  ++num2;
              }
            }
            if (num2 > 20)
            {
              Main.tile[index1, index2].type = (ushort) 381;
              --num4;
            }
            else
              num4 -= 1f / 500f;
          }
        }
        for (int index1 = 0; index1 < Main.maxTilesX; ++index1)
        {
          for (int index2 = 0; index2 < Main.maxTilesY; ++index2)
          {
            if (Main.tile[index1, index2].active() && Main.tileMoss[(int) Main.tile[index1, index2].type])
            {
              for (int index3 = 0; index3 < 4; ++index3)
              {
                int i = index1;
                int j = index2;
                if (index3 == 0)
                  --i;
                if (index3 == 1)
                  ++i;
                if (index3 == 2)
                  --j;
                if (index3 == 3)
                  ++j;
                try
                {
                  WorldGen.grassSpread = 0;
                  WorldGen.SpreadGrass(i, j, 1, (int) Main.tile[index1, index2].type, true, (byte) 0);
                }
                catch
                {
                  WorldGen.grassSpread = 0;
                  WorldGen.SpreadGrass(i, j, 1, (int) Main.tile[index1, index2].type, false, (byte) 0);
                }
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Temple", (WorldGenLegacyMethod) (progress =>
      {
        Main.tileSolid[162] = false;
        Main.tileSolid[226] = true;
        WorldGen.templePart2();
        Main.tileSolid[232] = false;
      }));
      WorldGen.AddGenerationPass("Ice Walls", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[63].Value;
        WorldGen.maxTileCount = 1500;
        for (int index1 = 0; index1 < (int) ((double) Main.maxTilesX * 0.04); ++index1)
        {
          float num1 = (float) index1 / ((float) Main.maxTilesX * 0.04f);
          progress.Set(num1 * 0.66f);
          int num2 = 0;
          int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
          int y = WorldGen.genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 220);
          for (int index2 = WorldGen.countTiles(x, y, false, true); (index2 >= 1500 || index2 < 10) && num2 < 500; index2 = WorldGen.countTiles(x, y, false, true))
          {
            ++num2;
            x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
            y = WorldGen.genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 220);
          }
          if (num2 < 500)
          {
            int wallType = WorldGen.genRand.Next(2);
            if (WorldGen.iceCount > 0)
            {
              if (wallType == 0)
                wallType = 40;
              else if (wallType == 1)
                wallType = 71;
            }
            else if (WorldGen.lavaCount > 0)
            {
              wallType = 79;
            }
            else
            {
              wallType = WorldGen.genRand.Next(4);
              switch (wallType)
              {
                case 0:
                  wallType = 59;
                  break;
                case 1:
                  wallType = 61;
                  break;
                case 2:
                  wallType = 170;
                  break;
                case 3:
                  wallType = 171;
                  break;
              }
            }
            WorldGen.Spread.Wall(x, y, wallType);
          }
        }
        WorldGen.maxTileCount = 1500;
        for (int index = 0; index < (int) ((double) Main.maxTilesX * 0.02); ++index)
        {
          float num1 = (float) index / ((float) Main.maxTilesX * 0.02f);
          progress.Set((float) ((double) num1 * 0.340000003576279 + 0.660000026226044));
          int num2 = 0;
          int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
          int y = WorldGen.genRand.Next((int) Main.worldSurface, WorldGen.lavaLine);
          int num3 = 0;
          if ((int) Main.tile[x, y].wall == 64)
            num3 = WorldGen.countTiles(x, y, true, false);
          while ((num3 >= 1500 || num3 < 10) && num2 < 1000)
          {
            ++num2;
            x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
            y = WorldGen.genRand.Next((int) Main.worldSurface, WorldGen.lavaLine);
            if (!Main.wallHouse[(int) Main.tile[x, y].wall])
              num3 = (int) Main.tile[x, y].wall != 64 ? 0 : WorldGen.countTiles(x, y, true, false);
          }
          if (num2 < 1000)
            WorldGen.Spread.Wall2(x, y, 15);
        }
      }));
      WorldGen.AddGenerationPass("Jungle Trees", (WorldGenLegacyMethod) (progress =>
      {
        for (int i = 0; i < Main.maxTilesX; ++i)
        {
          for (int y = (int) Main.worldSurface - 1; y < Main.maxTilesY - 350; ++y)
          {
            if (WorldGen.genRand.Next(10) == 0)
              WorldGen.GrowUndergroundTree(i, y);
          }
        }
      }));
      WorldGen.AddGenerationPass("Floating Island Houses", (WorldGenLegacyMethod) (progress =>
      {
        for (int index = 0; index < WorldGen.numIslandHouses; ++index)
        {
          if (!WorldGen.skyLake[index])
            WorldGen.IslandHouse(WorldGen.fihX[index], WorldGen.fihY[index]);
        }
      }));
      WorldGen.AddGenerationPass("Quick Cleanup", (WorldGenLegacyMethod) (progress =>
      {
        Main.tileSolid[137] = false;
        Main.tileSolid[130] = false;
        for (int i = 20; i < Main.maxTilesX - 20; ++i)
        {
          for (int index = 20; index < Main.maxTilesY - 20; ++index)
          {
            if ((int) Main.tile[i, index].type != 19 && TileID.Sets.CanBeClearedDuringGeneration[(int) Main.tile[i, index].type])
            {
              if (Main.tile[i, index].topSlope() || Main.tile[i, index].halfBrick())
              {
                if (!WorldGen.SolidTile(i, index + 1))
                  Main.tile[i, index].active(false);
                if ((int) Main.tile[i + 1, index].type == 137 || (int) Main.tile[i - 1, index].type == 137)
                  Main.tile[i, index].active(false);
              }
              else if (Main.tile[i, index].bottomSlope())
              {
                if (!WorldGen.SolidTile(i, index - 1))
                  Main.tile[i, index].active(false);
                if ((int) Main.tile[i + 1, index].type == 137 || (int) Main.tile[i - 1, index].type == 137)
                  Main.tile[i, index].active(false);
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Pots", (WorldGenLegacyMethod) (progress =>
      {
        Main.tileSolid[137] = true;
        Main.tileSolid[130] = true;
        progress.Message = Lang.gen[35].Value;
        for (int index = 0; index < (int) ((double) (Main.maxTilesX * Main.maxTilesY) * 0.0008); ++index)
        {
          float num1 = (float) index / ((float) (Main.maxTilesX * Main.maxTilesY) * 0.0008f);
          progress.Set(num1);
          bool flag1 = false;
          int num2 = 0;
          while (!flag1)
          {
            int num3 = WorldGen.genRand.Next((int) worldSurfaceHigh, Main.maxTilesY - 10);
            if ((double) num1 > 0.93)
              num3 = Main.maxTilesY - 150;
            else if ((double) num1 > 0.75)
              num3 = (int) WorldGen.worldSurfaceLow;
            int x = WorldGen.genRand.Next(1, Main.maxTilesX);
            bool flag2 = false;
            for (int y = num3; y < Main.maxTilesY; ++y)
            {
              if (!flag2)
              {
                if (Main.tile[x, y].active() && Main.tileSolid[(int) Main.tile[x, y].type] && !Main.tile[x, y - 1].lava())
                  flag2 = true;
              }
              else
              {
                int style = WorldGen.genRand.Next(0, 4);
                int num4 = 0;
                if (y < Main.maxTilesY - 5)
                  num4 = (int) Main.tile[x, y + 1].type;
                if (num4 == 147 || num4 == 161 || num4 == 162)
                  style = WorldGen.genRand.Next(4, 7);
                if (num4 == 60)
                  style = WorldGen.genRand.Next(7, 10);
                if (Main.wallDungeon[(int) Main.tile[x, y].wall])
                  style = WorldGen.genRand.Next(10, 13);
                if (num4 == 41 || num4 == 43 || num4 == 44)
                  style = WorldGen.genRand.Next(10, 13);
                if (num4 == 22 || num4 == 23 || num4 == 25)
                  style = WorldGen.genRand.Next(16, 19);
                if (num4 == 199 || num4 == 203 || (num4 == 204 || num4 == 200))
                  style = WorldGen.genRand.Next(22, 25);
                if (num4 == 367)
                  style = WorldGen.genRand.Next(31, 34);
                if (num4 == 226)
                  style = WorldGen.genRand.Next(28, 31);
                if (y > Main.maxTilesY - 200)
                  style = WorldGen.genRand.Next(13, 16);
                if (WorldGen.PlacePot(x, y, (ushort) 28, style))
                {
                  flag1 = true;
                  break;
                }
                ++num2;
                if (num2 >= 10000)
                {
                  flag1 = true;
                  break;
                }
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Hellforge", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[36].Value;
        for (int index1 = 0; index1 < Main.maxTilesX / 200; ++index1)
        {
          float num1 = (float) (index1 / (Main.maxTilesX / 200));
          progress.Set(num1);
          bool flag = false;
          int num2 = 0;
          while (!flag)
          {
            int i = WorldGen.genRand.Next(1, Main.maxTilesX);
            int index2 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 5);
            try
            {
              if ((int) Main.tile[i, index2].wall != 13)
              {
                if ((int) Main.tile[i, index2].wall != 14)
                  continue;
              }
              while (!Main.tile[i, index2].active())
                ++index2;
              int j = index2 - 1;
              WorldGen.PlaceTile(i, j, 77, false, false, -1, 0);
              if ((int) Main.tile[i, j].type == 77)
              {
                flag = true;
              }
              else
              {
                ++num2;
                if (num2 >= 10000)
                  flag = true;
              }
            }
            catch
            {
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Spreading Grass", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[37].Value;
        for (int index = 0; index < Main.maxTilesX; ++index)
        {
          i2 = index;
          bool flag = true;
          for (int j = 0; (double) j < Main.worldSurface - 1.0; ++j)
          {
            if (Main.tile[i2, j].active())
            {
              if (flag)
              {
                if ((int) Main.tile[i2, j].type == 0)
                {
                  try
                  {
                    WorldGen.grassSpread = 0;
                    WorldGen.SpreadGrass(i2, j, 0, 2, true, (byte) 0);
                  }
                  catch
                  {
                    WorldGen.grassSpread = 0;
                    WorldGen.SpreadGrass(i2, j, 0, 2, false, (byte) 0);
                  }
                }
              }
              if ((double) j <= worldSurfaceHigh)
                flag = false;
              else
                break;
            }
            else if ((int) Main.tile[i2, j].wall == 0)
              flag = true;
          }
        }
      }));
      WorldGen.AddGenerationPass("Piles", (WorldGenLegacyMethod) (progress =>
      {
        Main.tileSolid[190] = false;
        Main.tileSolid[196] = false;
        Main.tileSolid[189] = false;
        Main.tileSolid[202] = false;
        for (int index1 = 0; (double) index1 < (double) Main.maxTilesX * 0.06; ++index1)
        {
          bool flag = false;
          while (!flag)
          {
            int i1 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
            int j1 = WorldGen.genRand.Next((int) Main.worldSurface, Main.maxTilesY - 300);
            if (!Main.tile[i1, j1].active())
            {
              int type = 186;
              while (!Main.tile[i1, j1 + 1].active() && j1 < Main.maxTilesY - 5)
                ++j1;
              int style = WorldGen.genRand.Next(22);
              if (style >= 16 && style <= 22)
                style = WorldGen.genRand.Next(22);
              if (((int) Main.tile[i1, j1 + 1].type == 0 || (int) Main.tile[i1, j1 + 1].type == 1 || Main.tileMoss[(int) Main.tile[i1, j1 + 1].type]) && WorldGen.genRand.Next(5) == 0)
              {
                style = WorldGen.genRand.Next(23, 29);
                type = 187;
              }
              if (j1 > Main.maxTilesY - 300 || Main.wallDungeon[(int) Main.tile[i1, j1].wall] || ((int) Main.tile[i1, j1 + 1].type == 30 || (int) Main.tile[i1, j1 + 1].type == 19) || ((int) Main.tile[i1, j1 + 1].type == 25 || (int) Main.tile[i1, j1 + 1].type == 203))
              {
                style = WorldGen.genRand.Next(7);
                type = 186;
              }
              if ((int) Main.tile[i1, j1 + 1].type == 147 || (int) Main.tile[i1, j1 + 1].type == 161 || (int) Main.tile[i1, j1 + 1].type == 162)
              {
                style = WorldGen.genRand.Next(26, 32);
                type = 186;
              }
              if ((int) Main.tile[i1, j1 + 1].type == 60)
              {
                type = 187;
                style = WorldGen.genRand.Next(6);
              }
              if (((int) Main.tile[i1, j1 + 1].type == 57 || (int) Main.tile[i1, j1 + 1].type == 58) && WorldGen.genRand.Next(3) < 2)
              {
                type = 187;
                style = WorldGen.genRand.Next(6, 9);
              }
              if ((int) Main.tile[i1, j1 + 1].type == 226)
              {
                type = 187;
                style = WorldGen.genRand.Next(18, 23);
              }
              if ((int) Main.tile[i1, j1 + 1].type == 70)
              {
                style = WorldGen.genRand.Next(32, 35);
                type = 186;
              }
              if (type == 186 && style >= 7 && (style <= 15 && WorldGen.genRand.Next(75) == 0))
              {
                type = 187;
                style = 17;
              }
              if (Main.wallDungeon[(int) Main.tile[i1, j1].wall] && WorldGen.genRand.Next(3) != 0)
              {
                flag = true;
              }
              else
              {
                WorldGen.PlaceTile(i1, j1, type, true, false, -1, style);
                if ((int) Main.tile[i1, j1].type == 186 || (int) Main.tile[i1, j1].type == 187)
                  flag = true;
                if (flag && type == 186 && style <= 7)
                {
                  int num = WorldGen.genRand.Next(1, 5);
                  for (int index2 = 0; index2 < num; ++index2)
                  {
                    int i3 = i1 + WorldGen.genRand.Next(-10, 11);
                    int j2 = j1 - WorldGen.genRand.Next(5);
                    if (!Main.tile[i3, j2].active())
                    {
                      while (!Main.tile[i3, j2 + 1].active() && j2 < Main.maxTilesY - 5)
                        ++j2;
                      int X = WorldGen.genRand.Next(12, 36);
                      WorldGen.PlaceSmallPile(i3, j2, X, 0, (ushort) 185);
                    }
                  }
                }
              }
            }
          }
        }
        for (int index1 = 0; (double) index1 < (double) Main.maxTilesX * 0.01; ++index1)
        {
          bool flag = false;
          while (!flag)
          {
            int i1 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
            int j1 = WorldGen.genRand.Next(Main.maxTilesY - 300, Main.maxTilesY - 10);
            if (!Main.tile[i1, j1].active())
            {
              int type = 186;
              while (!Main.tile[i1, j1 + 1].active() && j1 < Main.maxTilesY - 5)
                ++j1;
              int style = WorldGen.genRand.Next(22);
              if (style >= 16 && style <= 22)
                style = WorldGen.genRand.Next(22);
              if (j1 > Main.maxTilesY - 300 || Main.wallDungeon[(int) Main.tile[i1, j1].wall] || ((int) Main.tile[i1, j1 + 1].type == 30 || (int) Main.tile[i1, j1 + 1].type == 19))
                style = WorldGen.genRand.Next(7);
              if (((int) Main.tile[i1, j1 + 1].type == 57 || (int) Main.tile[i1, j1 + 1].type == 58) && WorldGen.genRand.Next(3) < 2)
              {
                type = 187;
                style = WorldGen.genRand.Next(6, 9);
              }
              if ((int) Main.tile[i1, j1 + 1].type == 147 || (int) Main.tile[i1, j1 + 1].type == 161 || (int) Main.tile[i1, j1 + 1].type == 162)
                style = WorldGen.genRand.Next(26, 32);
              WorldGen.PlaceTile(i1, j1, type, true, false, -1, style);
              if ((int) Main.tile[i1, j1].type == 186 || (int) Main.tile[i1, j1].type == 187)
                flag = true;
              if (flag && type == 186 && style <= 7)
              {
                int num = WorldGen.genRand.Next(1, 5);
                for (int index2 = 0; index2 < num; ++index2)
                {
                  int i3 = i1 + WorldGen.genRand.Next(-10, 11);
                  int j2 = j1 - WorldGen.genRand.Next(5);
                  if (!Main.tile[i3, j2].active())
                  {
                    while (!Main.tile[i3, j2 + 1].active() && j2 < Main.maxTilesY - 5)
                      ++j2;
                    int X = WorldGen.genRand.Next(12, 36);
                    WorldGen.PlaceSmallPile(i3, j2, X, 0, (ushort) 185);
                  }
                }
              }
            }
          }
        }
        for (int index = 0; (double) index < (double) Main.maxTilesX * 0.003; ++index)
        {
          bool flag = false;
          while (!flag)
          {
            int type = 186;
            int i = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
            int j = WorldGen.genRand.Next(10, (int) Main.worldSurface);
            if (!Main.tile[i, j].active())
            {
              while (!Main.tile[i, j + 1].active() && j < Main.maxTilesY - 5)
                ++j;
              int style = WorldGen.genRand.Next(7, 13);
              if (j > Main.maxTilesY - 300 || Main.wallDungeon[(int) Main.tile[i, j].wall] || ((int) Main.tile[i, j + 1].type == 30 || (int) Main.tile[i, j + 1].type == 19) || ((int) Main.tile[i, j + 1].type == 53 || (int) Main.tile[i, j + 1].type == 25 || (int) Main.tile[i, j + 1].type == 203))
                style = -1;
              if ((int) Main.tile[i, j + 1].type == 147 || (int) Main.tile[i, j + 1].type == 161 || (int) Main.tile[i, j + 1].type == 162)
                style = WorldGen.genRand.Next(26, 32);
              if ((int) Main.tile[i, j + 1].type == 2 || (int) Main.tile[i - 1, j + 1].type == 2 || (int) Main.tile[i + 1, j + 1].type == 2)
              {
                type = 187;
                style = WorldGen.genRand.Next(14, 17);
              }
              if ((int) Main.tile[i, j + 1].type == 151 || (int) Main.tile[i, j + 1].type == 274)
              {
                type = 186;
                style = WorldGen.genRand.Next(7);
              }
              if (style >= 0)
                WorldGen.PlaceTile(i, j, type, true, false, -1, style);
              if ((int) Main.tile[i, j].type == type)
                flag = true;
            }
          }
        }
        for (int index1 = 0; (double) index1 < (double) Main.maxTilesX * 0.0035; ++index1)
        {
          bool flag = false;
          while (!flag)
          {
            int i1 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
            int j1 = WorldGen.genRand.Next(10, (int) Main.worldSurface);
            if (!Main.tile[i1, j1].active() && (int) Main.tile[i1, j1].wall > 0)
            {
              int type = 186;
              while (!Main.tile[i1, j1 + 1].active() && j1 < Main.maxTilesY - 5)
                ++j1;
              int style = WorldGen.genRand.Next(7, 13);
              if (j1 > Main.maxTilesY - 300 || Main.wallDungeon[(int) Main.tile[i1, j1].wall] || ((int) Main.tile[i1, j1 + 1].type == 30 || (int) Main.tile[i1, j1 + 1].type == 19))
                style = -1;
              if ((int) Main.tile[i1, j1 + 1].type == 25)
                style = WorldGen.genRand.Next(7);
              if ((int) Main.tile[i1, j1 + 1].type == 147 || (int) Main.tile[i1, j1 + 1].type == 161 || (int) Main.tile[i1, j1 + 1].type == 162)
                style = WorldGen.genRand.Next(26, 32);
              if ((int) Main.tile[i1, j1 + 1].type == 2 || (int) Main.tile[i1 - 1, j1 + 1].type == 2 || (int) Main.tile[i1 + 1, j1 + 1].type == 2)
              {
                type = 187;
                style = WorldGen.genRand.Next(14, 17);
              }
              if ((int) Main.tile[i1, j1 + 1].type == 151 || (int) Main.tile[i1, j1 + 1].type == 274)
              {
                type = 186;
                style = WorldGen.genRand.Next(7);
              }
              if (style >= 0)
                WorldGen.PlaceTile(i1, j1, type, true, false, -1, style);
              if ((int) Main.tile[i1, j1].type == type)
                flag = true;
              if (flag && style <= 7)
              {
                int num = WorldGen.genRand.Next(1, 5);
                for (int index2 = 0; index2 < num; ++index2)
                {
                  int i3 = i1 + WorldGen.genRand.Next(-10, 11);
                  int j2 = j1 - WorldGen.genRand.Next(5);
                  if (!Main.tile[i3, j2].active())
                  {
                    while (!Main.tile[i3, j2 + 1].active() && j2 < Main.maxTilesY - 5)
                      ++j2;
                    int X = WorldGen.genRand.Next(12, 36);
                    WorldGen.PlaceSmallPile(i3, j2, X, 0, (ushort) 185);
                  }
                }
              }
            }
          }
        }
        for (int index1 = 0; (double) index1 < (double) Main.maxTilesX * 0.6; ++index1)
        {
          bool flag = false;
          while (!flag)
          {
            int i1 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
            int j1 = WorldGen.genRand.Next((int) Main.worldSurface, Main.maxTilesY - 20);
            if ((int) Main.tile[i1, j1].wall == 87 && WorldGen.genRand.Next(2) == 0)
            {
              i1 = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
              j1 = WorldGen.genRand.Next((int) Main.worldSurface, Main.maxTilesY - 20);
            }
            if (!Main.tile[i1, j1].active())
            {
              while (!Main.tile[i1, j1 + 1].active() && j1 < Main.maxTilesY - 5)
                ++j1;
              int Y = WorldGen.genRand.Next(2);
              int X1 = WorldGen.genRand.Next(36);
              if (X1 >= 28 && X1 <= 35)
                X1 = WorldGen.genRand.Next(36);
              if (Y == 1)
              {
                X1 = WorldGen.genRand.Next(25);
                if (X1 >= 16 && X1 <= 24)
                  X1 = WorldGen.genRand.Next(25);
              }
              if (j1 > Main.maxTilesY - 300)
              {
                if (Y == 0)
                  X1 = WorldGen.genRand.Next(12, 28);
                if (Y == 1)
                  X1 = WorldGen.genRand.Next(6, 16);
              }
              if (Main.wallDungeon[(int) Main.tile[i1, j1].wall] || (int) Main.tile[i1, j1 + 1].type == 30 || ((int) Main.tile[i1, j1 + 1].type == 19 || (int) Main.tile[i1, j1 + 1].type == 25) || ((int) Main.tile[i1, j1 + 1].type == 203 || (int) Main.tile[i1, j1].wall == 87))
              {
                if (Y == 0 && X1 < 12)
                  X1 += 12;
                if (Y == 1 && X1 < 6)
                  X1 += 6;
                if (Y == 1 && X1 >= 17)
                  X1 -= 10;
              }
              if ((int) Main.tile[i1, j1 + 1].type == 147 || (int) Main.tile[i1, j1 + 1].type == 161 || (int) Main.tile[i1, j1 + 1].type == 162)
              {
                if (Y == 0 && X1 < 12)
                  X1 += 36;
                if (Y == 1 && X1 >= 20)
                  X1 += 6;
                if (Y == 1 && X1 < 6)
                  X1 += 25;
              }
              if ((int) Main.tile[i1, j1 + 1].type == 151 || (int) Main.tile[i1, j1 + 1].type == 274)
              {
                if (Y == 0)
                  X1 = WorldGen.genRand.Next(12, 28);
                if (Y == 1)
                  X1 = WorldGen.genRand.Next(12, 19);
              }
              flag = Main.wallDungeon[(int) Main.tile[i1, j1].wall] && WorldGen.genRand.Next(3) != 0 || WorldGen.PlaceSmallPile(i1, j1, X1, Y, (ushort) 185);
              if (flag && Y == 1 && (X1 >= 6 && X1 <= 15))
              {
                int num = WorldGen.genRand.Next(1, 5);
                for (int index2 = 0; index2 < num; ++index2)
                {
                  int i3 = i1 + WorldGen.genRand.Next(-10, 11);
                  int j2 = j1 - WorldGen.genRand.Next(5);
                  if (!Main.tile[i3, j2].active())
                  {
                    while (!Main.tile[i3, j2 + 1].active() && j2 < Main.maxTilesY - 5)
                      ++j2;
                    int X2 = WorldGen.genRand.Next(12, 36);
                    WorldGen.PlaceSmallPile(i3, j2, X2, 0, (ushort) 185);
                  }
                }
              }
            }
          }
        }
        for (int index = 0; (double) index < (double) Main.maxTilesX * 0.0199999995529652; ++index)
        {
          bool flag = false;
          while (!flag)
          {
            int i = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
            int j = WorldGen.genRand.Next(15, (int) Main.worldSurface);
            if (!Main.tile[i, j].active())
            {
              while (!Main.tile[i, j + 1].active() && j < Main.maxTilesY - 5)
                ++j;
              int Y = WorldGen.genRand.Next(2);
              int X = WorldGen.genRand.Next(11);
              if (Y == 1)
                X = WorldGen.genRand.Next(5);
              if ((int) Main.tile[i, j + 1].type == 147 || (int) Main.tile[i, j + 1].type == 161 || (int) Main.tile[i, j + 1].type == 162)
              {
                if (Y == 0 && X < 12)
                  X += 36;
                if (Y == 1 && X >= 20)
                  X += 6;
                if (Y == 1 && X < 6)
                  X += 25;
              }
              if ((int) Main.tile[i, j + 1].type == 2 && Y == 1)
                X = WorldGen.genRand.Next(38, 41);
              if ((int) Main.tile[i, j + 1].type == 151 || (int) Main.tile[i, j + 1].type == 274)
              {
                if (Y == 0)
                  X = WorldGen.genRand.Next(12, 28);
                if (Y == 1)
                  X = WorldGen.genRand.Next(12, 19);
              }
              if (!Main.wallDungeon[(int) Main.tile[i, j].wall] && (int) Main.tile[i, j + 1].type != 30 && ((int) Main.tile[i, j + 1].type != 19 && (int) Main.tile[i, j + 1].type != 41) && ((int) Main.tile[i, j + 1].type != 43 && (int) Main.tile[i, j + 1].type != 44 && ((int) Main.tile[i, j + 1].type != 45 && (int) Main.tile[i, j + 1].type != 46)) && ((int) Main.tile[i, j + 1].type != 47 && (int) Main.tile[i, j + 1].type != 175 && ((int) Main.tile[i, j + 1].type != 176 && (int) Main.tile[i, j + 1].type != 177) && ((int) Main.tile[i, j + 1].type != 53 && (int) Main.tile[i, j + 1].type != 25 && (int) Main.tile[i, j + 1].type != 203)))
                flag = WorldGen.PlaceSmallPile(i, j, X, Y, (ushort) 185);
            }
          }
        }
        for (int index = 0; (double) index < (double) Main.maxTilesX * 0.150000005960464; ++index)
        {
          bool flag = false;
          while (!flag)
          {
            int i = WorldGen.genRand.Next(25, Main.maxTilesX - 25);
            int j = WorldGen.genRand.Next(15, (int) Main.worldSurface);
            if (!Main.tile[i, j].active() && ((int) Main.tile[i, j].wall == 2 || (int) Main.tile[i, j].wall == 40))
            {
              while (!Main.tile[i, j + 1].active() && j < Main.maxTilesY - 5)
                ++j;
              int Y = WorldGen.genRand.Next(2);
              int X = WorldGen.genRand.Next(11);
              if (Y == 1)
                X = WorldGen.genRand.Next(5);
              if ((int) Main.tile[i, j + 1].type == 147 || (int) Main.tile[i, j + 1].type == 161 || (int) Main.tile[i, j + 1].type == 162)
              {
                if (Y == 0 && X < 12)
                  X += 36;
                if (Y == 1 && X >= 20)
                  X += 6;
                if (Y == 1 && X < 6)
                  X += 25;
              }
              if ((int) Main.tile[i, j + 1].type == 2 && Y == 1)
                X = WorldGen.genRand.Next(38, 41);
              if ((int) Main.tile[i, j + 1].type == 151 || (int) Main.tile[i, j + 1].type == 274)
              {
                if (Y == 0)
                  X = WorldGen.genRand.Next(12, 28);
                if (Y == 1)
                  X = WorldGen.genRand.Next(12, 19);
              }
              if (!Main.wallDungeon[(int) Main.tile[i, j].wall] && (int) Main.tile[i, j + 1].type != 30 && ((int) Main.tile[i, j + 1].type != 19 && (int) Main.tile[i, j + 1].type != 41) && ((int) Main.tile[i, j + 1].type != 43 && (int) Main.tile[i, j + 1].type != 44 && ((int) Main.tile[i, j + 1].type != 45 && (int) Main.tile[i, j + 1].type != 46)) && ((int) Main.tile[i, j + 1].type != 47 && (int) Main.tile[i, j + 1].type != 175 && ((int) Main.tile[i, j + 1].type != 176 && (int) Main.tile[i, j + 1].type != 177) && ((int) Main.tile[i, j + 1].type != 25 && (int) Main.tile[i, j + 1].type != 203)))
                flag = WorldGen.PlaceSmallPile(i, j, X, Y, (ushort) 185);
            }
          }
        }
        Main.tileSolid[190] = true;
        Main.tileSolid[192] = true;
        Main.tileSolid[196] = true;
        Main.tileSolid[189] = true;
        Main.tileSolid[202] = true;
        Main.tileSolid[225] = true;
      }));
      WorldGen.AddGenerationPass("Moss", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[38].Value;
        int num1 = 8;
        int num2 = 400;
        int num3 = 4;
        int num4 = 275;
        for (int index = 0; index < 3; ++index)
        {
          int num5;
          int num6;
          bool flag;
          int maxValue;
          switch (index)
          {
            case 1:
              num5 = num2;
              num6 = Main.maxTilesX - num2;
              flag = true;
              maxValue = num1;
              break;
            case 2:
              num5 = Main.maxTilesX - num4;
              num6 = Main.maxTilesX - 5;
              flag = false;
              maxValue = num3;
              break;
            default:
              num5 = 5;
              num6 = num4;
              flag = false;
              maxValue = num3;
              break;
          }
          for (int i = num5; i < num6; ++i)
          {
            if (WorldGen.genRand.Next(maxValue) == 0)
            {
              for (int j = 0; (double) j < Main.worldSurface - 1.0; ++j)
              {
                Tile tile1 = Main.tile[i, j];
                if (tile1.active() && (int) tile1.type == 53)
                {
                  Tile tile2 = Main.tile[i, j - 1];
                  if (!tile2.active() && (int) tile2.wall == 0)
                  {
                    if (flag)
                    {
                      WorldGen.PlantCactus(i, j);
                      break;
                    }
                    if ((int) Main.tile[i, j - 2].liquid == (int) byte.MaxValue && (int) Main.tile[i, j - 3].liquid == (int) byte.MaxValue && (int) Main.tile[i, j - 4].liquid == (int) byte.MaxValue)
                    {
                      if (WorldGen.genRand.Next(2) == 0)
                      {
                        WorldGen.PlaceTile(i, j - 1, 81, true, false, -1, 0);
                        break;
                      }
                      WorldGen.PlaceTile(i, j - 1, 324, true, false, -1, WorldGen.genRand.Next(2));
                      break;
                    }
                    if ((int) Main.tile[i, j - 2].liquid == 0)
                    {
                      WorldGen.PlaceTile(i, j - 1, 324, true, false, -1, WorldGen.genRand.Next(2));
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Spawn Point", (WorldGenLegacyMethod) (progress =>
      {
        int num1 = 5;
        bool flag = true;
        while (flag)
        {
          int index1 = Main.maxTilesX / 2 + WorldGen.genRand.Next(-num1, num1 + 1);
          for (int index2 = 0; index2 < Main.maxTilesY; ++index2)
          {
            if (Main.tile[index1, index2].active())
            {
              Main.spawnTileX = index1;
              Main.spawnTileY = index2;
              break;
            }
          }
          flag = false;
          ++num1;
          if ((double) Main.spawnTileY > Main.worldSurface)
            flag = true;
          if ((int) Main.tile[Main.spawnTileX, Main.spawnTileY - 1].liquid > 0)
            flag = true;
        }
        int num2 = 10;
        while ((double) Main.spawnTileY > Main.worldSurface)
        {
          int index1 = WorldGen.genRand.Next(Main.maxTilesX / 2 - num2, Main.maxTilesX / 2 + num2);
          for (int index2 = 0; index2 < Main.maxTilesY; ++index2)
          {
            if (Main.tile[index1, index2].active())
            {
              Main.spawnTileX = index1;
              Main.spawnTileY = index2;
              break;
            }
          }
          ++num2;
        }
      }));
      WorldGen.AddGenerationPass("Grass Wall", (WorldGenLegacyMethod) (progress =>
      {
        WorldGen.maxTileCount = 3500;
        for (int index1 = 50; index1 < Main.maxTilesX - 50; ++index1)
        {
          for (int index2 = 0; (double) index2 < Main.worldSurface - 10.0; ++index2)
          {
            if (WorldGen.genRand.Next(4) == 0)
            {
              bool flag = false;
              int x = -1;
              int y = -1;
              if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 2 && ((int) Main.tile[index1, index2].wall == 2 || (int) Main.tile[index1, index2].wall == 63))
              {
                for (int i = index1 - 1; i <= index1 + 1; ++i)
                {
                  for (int j = index2 - 1; j <= index2 + 1; ++j)
                  {
                    if ((int) Main.tile[i, j].wall == 0 && !WorldGen.SolidTile(i, j))
                      flag = true;
                  }
                }
                if (flag)
                {
                  for (int i = index1 - 1; i <= index1 + 1; ++i)
                  {
                    for (int j = index2 - 1; j <= index2 + 1; ++j)
                    {
                      if (((int) Main.tile[i, j].wall == 2 || (int) Main.tile[i, j].wall == 15) && !WorldGen.SolidTile(i, j))
                      {
                        x = i;
                        y = j;
                      }
                    }
                  }
                }
              }
              if (flag && x > -1 && y > -1)
              {
                if (WorldGen.countDirtTiles(x, y) < WorldGen.maxTileCount)
                {
                  try
                  {
                    WorldGen.Spread.Wall2(x, y, 63);
                  }
                  catch
                  {
                  }
                }
              }
            }
          }
        }
        for (int i = 5; i < Main.maxTilesX - 5; ++i)
        {
          for (int j = 10; (double) j < Main.worldSurface - 1.0; ++j)
          {
            if ((int) Main.tile[i, j].wall == 63 && WorldGen.genRand.Next(10) == 0)
              Main.tile[i, j].wall = (byte) 65;
            if (Main.tile[i, j].active() && (int) Main.tile[i, j].type == 0)
            {
              bool flag = false;
              for (int index1 = i - 1; index1 <= i + 1; ++index1)
              {
                for (int index2 = j - 1; index2 <= j + 1; ++index2)
                {
                  if ((int) Main.tile[i, j].wall == 63 || (int) Main.tile[i, j].wall == 65)
                  {
                    flag = true;
                    break;
                  }
                }
              }
              if (flag)
                WorldGen.SpreadGrass(i, j, 0, 2, true, (byte) 0);
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Guide", (WorldGenLegacyMethod) (progress =>
      {
        int index = NPC.NewNPC(Main.spawnTileX * 16, Main.spawnTileY * 16, 22, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
        Main.npc[index].homeTileX = Main.spawnTileX;
        Main.npc[index].homeTileY = Main.spawnTileY;
        Main.npc[index].direction = 1;
        Main.npc[index].homeless = true;
      }));
      WorldGen.AddGenerationPass("Sunflowers", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[39].Value;
        for (int index1 = 0; (double) index1 < (double) Main.maxTilesX * 0.002; ++index1)
        {
          int num1 = Main.maxTilesX / 2;
          int num2 = WorldGen.genRand.Next(Main.maxTilesX);
          int num3 = WorldGen.genRand.Next(10);
          int num4 = num2 - num3 - 7;
          int num5 = WorldGen.genRand.Next(10);
          int num6 = num2 + num5 + 7;
          if (num4 < 0)
            num4 = 0;
          if (num6 > Main.maxTilesX - 1)
            num6 = Main.maxTilesX - 1;
          for (int i = num4; i < num6; ++i)
          {
            for (int index2 = 1; (double) index2 < Main.worldSurface - 1.0; ++index2)
            {
              if ((int) Main.tile[i, index2].type == 2 && Main.tile[i, index2].active() && !Main.tile[i, index2 - 1].active())
                WorldGen.PlaceTile(i, index2 - 1, 27, true, false, -1, 0);
              if (Main.tile[i, index2].active())
                break;
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Planting Trees", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[40].Value;
        for (int index = 0; (double) index < (double) Main.maxTilesX * 0.003; ++index)
        {
          int num1 = WorldGen.genRand.Next(50, Main.maxTilesX - 50);
          int num2 = WorldGen.genRand.Next(25, 50);
          for (int i = num1 - num2; i < num1 + num2; ++i)
          {
            for (int y = 20; (double) y < Main.worldSurface; ++y)
              WorldGen.GrowEpicTree(i, y);
          }
        }
        WorldGen.AddTrees();
      }));
      WorldGen.AddGenerationPass("Herbs", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[41].Value;
        for (int index = 0; (double) index < (double) Main.maxTilesX * 1.7; ++index)
          WorldGen.PlantAlch();
      }));
      WorldGen.AddGenerationPass("Dye Plants", (WorldGenLegacyMethod) (progress =>
      {
        for (int index = 0; index < Main.maxTilesX; ++index)
          WorldGen.plantDye(WorldGen.genRand.Next(100, Main.maxTilesX - 100), WorldGen.genRand.Next(100, Main.maxTilesY - 200), false);
        for (int index = 0; index < Main.maxTilesX / 8; ++index)
          WorldGen.plantDye(WorldGen.genRand.Next(100, Main.maxTilesX - 100), WorldGen.genRand.Next(100, Main.maxTilesY - 200), true);
      }));
      WorldGen.AddGenerationPass("Webs And Honey", (WorldGenLegacyMethod) (progress =>
      {
        for (int index = 100; index < Main.maxTilesX - 100; ++index)
        {
          for (int worldSurface1 = (int) Main.worldSurface; worldSurface1 < Main.maxTilesY - 100; ++worldSurface1)
          {
            if ((int) Main.tile[index, worldSurface1].wall == 86)
            {
              if ((int) Main.tile[index, worldSurface1].liquid > 0)
                Main.tile[index, worldSurface1].honey(true);
              if (WorldGen.genRand.Next(3) == 0)
                WorldGen.PlaceTight(index, worldSurface1, (ushort) 165, false);
            }
            if ((int) Main.tile[index, worldSurface1].wall == 62)
            {
              Main.tile[index, worldSurface1].liquid = (byte) 0;
              Main.tile[index, worldSurface1].lava(false);
            }
            if ((int) Main.tile[index, worldSurface1].wall == 62 && !Main.tile[index, worldSurface1].active() && WorldGen.genRand.Next(10) != 0)
            {
              int num1 = WorldGen.genRand.Next(2, 5);
              int num2 = index - num1;
              int num3 = index + num1;
              int num4 = worldSurface1 - num1;
              int num5 = worldSurface1 + num1;
              bool flag = false;
              for (int i = num2; i <= num3; ++i)
              {
                for (int j = num4; j <= num5; ++j)
                {
                  if (WorldGen.SolidTile(i, j))
                  {
                    flag = true;
                    break;
                  }
                }
              }
              if (flag)
              {
                WorldGen.PlaceTile(index, worldSurface1, 51, true, false, -1, 0);
                WorldGen.TileFrame(index, worldSurface1, false, false);
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Weeds", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[42].Value;
        if (Main.halloween)
        {
          for (int index1 = 40; index1 < Main.maxTilesX - 40; ++index1)
          {
            for (int index2 = 50; (double) index2 < Main.worldSurface; ++index2)
            {
              if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 2 && WorldGen.genRand.Next(15) == 0)
              {
                WorldGen.PlacePumpkin(index1, index2 - 1);
                int num = WorldGen.genRand.Next(5);
                for (int index3 = 0; index3 < num; ++index3)
                  WorldGen.GrowPumpkin(index1, index2 - 1, 254);
              }
            }
          }
        }
        WorldGen.AddPlants();
      }));
      WorldGen.AddGenerationPass("Mud Caves To Grass", (WorldGenLegacyMethod) (progress =>
      {
        for (int i = 0; i < Main.maxTilesX; ++i)
        {
          for (int y = 0; y < Main.maxTilesY; ++y)
          {
            if (Main.tile[i, y].active())
            {
              if (y >= (int) Main.worldSurface && (int) Main.tile[i, y].type == 70 && !Main.tile[i, y - 1].active())
              {
                WorldGen.GrowShroom(i, y);
                if (!Main.tile[i, y - 1].active())
                  WorldGen.PlaceTile(i, y - 1, 71, true, false, -1, 0);
              }
              if ((int) Main.tile[i, y].type == 60 && !Main.tile[i, y - 1].active())
                WorldGen.PlaceTile(i, y - 1, 61, true, false, -1, 0);
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Jungle Plants", (WorldGenLegacyMethod) (progress =>
      {
        for (int index1 = 0; index1 < Main.maxTilesX * 100; ++index1)
        {
          int X2 = WorldGen.genRand.Next(40, Main.maxTilesX / 2 - 40);
          if (dungeonSide < 0)
            X2 += Main.maxTilesX / 2;
          int index2 = WorldGen.genRand.Next(Main.maxTilesY - 300);
          while (!Main.tile[X2, index2].active() && index2 < Main.maxTilesY - 300)
            ++index2;
          if (Main.tile[X2, index2].active() && (int) Main.tile[X2, index2].type == 60)
          {
            int Y2 = index2 - 1;
            WorldGen.PlaceJunglePlant(X2, Y2, (ushort) 233, WorldGen.genRand.Next(8), 0);
            if ((int) Main.tile[X2, Y2].type != 233)
              WorldGen.PlaceJunglePlant(X2, Y2, (ushort) 233, WorldGen.genRand.Next(12), 1);
          }
        }
      }));
      WorldGen.AddGenerationPass("Vines", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[43].Value;
        for (int i1 = 0; i1 < Main.maxTilesX; ++i1)
        {
          int num1 = 0;
          for (int index = 0; (double) index < Main.worldSurface; ++index)
          {
            if (num1 > 0 && !Main.tile[i1, index].active())
            {
              Main.tile[i1, index].active(true);
              Main.tile[i1, index].type = (ushort) 52;
              --num1;
            }
            else
              num1 = 0;
            if (Main.tile[i1, index].active() && !Main.tile[i1, index].bottomSlope() && ((int) Main.tile[i1, index].type == 2 || (int) Main.tile[i1, index].type == 192 && WorldGen.genRand.Next(4) == 0) && WorldGen.genRand.Next(5) < 3)
              num1 = WorldGen.genRand.Next(1, 10);
          }
          int num2 = 0;
          for (int j1 = 0; j1 < Main.maxTilesY; ++j1)
          {
            if (num2 > 0 && !Main.tile[i1, j1].active())
            {
              Main.tile[i1, j1].active(true);
              Main.tile[i1, j1].type = (ushort) 62;
              --num2;
            }
            else
              num2 = 0;
            if (Main.tile[i1, j1].active() && (int) Main.tile[i1, j1].type == 60 && !Main.tile[i1, j1].bottomSlope())
            {
              if (i1 < Main.maxTilesX - 1 && j1 < Main.maxTilesY - 2 && (Main.tile[i1 + 1, j1].active() && (int) Main.tile[i1 + 1, j1].type == 60) && (!Main.tile[i1 + 1, j1].bottomSlope() && WorldGen.genRand.Next(40) == 0))
              {
                bool flag = true;
                for (int index1 = i1; index1 < i1 + 2; ++index1)
                {
                  for (int index2 = j1 + 1; index2 < j1 + 3; ++index2)
                  {
                    if (Main.tile[index1, index2].active() && (!Main.tileCut[(int) Main.tile[index1, index2].type] || (int) Main.tile[index1, index2].type == 444))
                    {
                      flag = false;
                      break;
                    }
                    if ((int) Main.tile[index1, index2].liquid > 0 || Main.wallHouse[(int) Main.tile[index1, index2].wall])
                    {
                      flag = false;
                      break;
                    }
                  }
                  if (!flag)
                    break;
                }
                if (flag)
                {
                  if (WorldGen.CountNearBlocksTypes(i1, j1, 20, 1, 444) > 0)
                    flag = false;
                }
                if (flag)
                {
                  for (int i3 = i1; i3 < i1 + 2; ++i3)
                  {
                    for (int j2 = j1 + 1; j2 < j1 + 3; ++j2)
                      WorldGen.KillTile(i3, j2, false, false, false);
                  }
                  for (int index1 = i1; index1 < i1 + 2; ++index1)
                  {
                    for (int index2 = j1 + 1; index2 < j1 + 3; ++index2)
                    {
                      Main.tile[index1, index2].active(true);
                      Main.tile[index1, index2].type = (ushort) 444;
                      Main.tile[index1, index2].frameX = (short) ((index1 - i1) * 18);
                      Main.tile[index1, index2].frameY = (short) ((index2 - j1 - 1) * 18);
                    }
                  }
                  continue;
                }
              }
              if (WorldGen.genRand.Next(5) < 3)
                num2 = WorldGen.genRand.Next(1, 10);
            }
          }
          int num3 = 0;
          for (int index = 0; index < Main.maxTilesY; ++index)
          {
            if (num3 > 0 && !Main.tile[i1, index].active())
            {
              Main.tile[i1, index].active(true);
              Main.tile[i1, index].type = (ushort) 205;
              --num3;
            }
            else
              num3 = 0;
            if (Main.tile[i1, index].active() && (int) Main.tile[i1, index].type == 199 && WorldGen.genRand.Next(5) < 3)
              num3 = WorldGen.genRand.Next(1, 10);
          }
        }
      }));
      WorldGen.AddGenerationPass("Flowers", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[44].Value;
        for (int index1 = 0; (double) index1 < (double) Main.maxTilesX * 0.005; ++index1)
        {
          int index2 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
          int num1 = WorldGen.genRand.Next(5, 15);
          int num2 = WorldGen.genRand.Next(15, 30);
          for (int index3 = 1; (double) index3 < Main.worldSurface - 1.0; ++index3)
          {
            if (Main.tile[index2, index3].active())
            {
              for (int index4 = index2 - num1; index4 < index2 + num1; ++index4)
              {
                for (int index5 = index3 - num2; index5 < index3 + num2; ++index5)
                {
                  if ((int) Main.tile[index4, index5].type == 3 || (int) Main.tile[index4, index5].type == 24)
                  {
                    Main.tile[index4, index5].frameX = (short) (WorldGen.genRand.Next(6, 8) * 18);
                    if ((int) Main.tile[index4, index5].type == 3 && WorldGen.genRand.Next(2) == 0)
                      Main.tile[index4, index5].frameX = (short) (WorldGen.genRand.Next(9, 11) * 18);
                  }
                }
              }
              break;
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Mushrooms", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[45].Value;
        for (int index1 = 0; (double) index1 < (double) Main.maxTilesX * 0.002; ++index1)
        {
          int index2 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
          int num1 = WorldGen.genRand.Next(4, 10);
          int num2 = WorldGen.genRand.Next(15, 30);
          for (int index3 = 1; (double) index3 < Main.worldSurface - 1.0; ++index3)
          {
            if (Main.tile[index2, index3].active())
            {
              for (int index4 = index2 - num1; index4 < index2 + num1; ++index4)
              {
                for (int index5 = index3 - num2; index5 < index3 + num2; ++index5)
                {
                  if ((int) Main.tile[index4, index5].type == 3 || (int) Main.tile[index4, index5].type == 24)
                    Main.tile[index4, index5].frameX = (short) 144;
                  else if ((int) Main.tile[index4, index5].type == 201)
                    Main.tile[index4, index5].frameX = (short) 270;
                }
              }
              break;
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Stalac", (WorldGenLegacyMethod) (progress =>
      {
        for (int x = 20; x < Main.maxTilesX - 20; ++x)
        {
          for (int worldSurface1 = (int) Main.worldSurface; worldSurface1 < Main.maxTilesY - 20; ++worldSurface1)
          {
            if (!Main.tile[x, worldSurface1].active() && WorldGen.genRand.Next(5) == 0)
            {
              if (((int) Main.tile[x, worldSurface1 - 1].type == 1 || (int) Main.tile[x, worldSurface1 - 1].type == 147 || ((int) Main.tile[x, worldSurface1 - 1].type == 161 || (int) Main.tile[x, worldSurface1 - 1].type == 25) || ((int) Main.tile[x, worldSurface1 - 1].type == 203 || Main.tileStone[(int) Main.tile[x, worldSurface1 - 1].type] || Main.tileMoss[(int) Main.tile[x, worldSurface1 - 1].type])) && (!Main.tile[x, worldSurface1].active() && !Main.tile[x, worldSurface1 + 1].active()))
                Main.tile[x, worldSurface1 - 1].slope((byte) 0);
              if (((int) Main.tile[x, worldSurface1 + 1].type == 1 || (int) Main.tile[x, worldSurface1 + 1].type == 147 || ((int) Main.tile[x, worldSurface1 + 1].type == 161 || (int) Main.tile[x, worldSurface1 + 1].type == 25) || ((int) Main.tile[x, worldSurface1 + 1].type == 203 || Main.tileStone[(int) Main.tile[x, worldSurface1 + 1].type] || Main.tileMoss[(int) Main.tile[x, worldSurface1 + 1].type])) && (!Main.tile[x, worldSurface1].active() && !Main.tile[x, worldSurface1 - 1].active()))
                Main.tile[x, worldSurface1 + 1].slope((byte) 0);
              WorldGen.PlaceTight(x, worldSurface1, (ushort) 165, false);
            }
          }
          for (int y = 5; y < (int) Main.worldSurface; ++y)
          {
            if (((int) Main.tile[x, y - 1].type == 147 || (int) Main.tile[x, y - 1].type == 161) && WorldGen.genRand.Next(5) == 0)
            {
              if (!Main.tile[x, y].active() && !Main.tile[x, y + 1].active())
                Main.tile[x, y - 1].slope((byte) 0);
              WorldGen.PlaceTight(x, y, (ushort) 165, false);
            }
            if (((int) Main.tile[x, y - 1].type == 25 || (int) Main.tile[x, y - 1].type == 203) && WorldGen.genRand.Next(5) == 0)
            {
              if (!Main.tile[x, y].active() && !Main.tile[x, y + 1].active())
                Main.tile[x, y - 1].slope((byte) 0);
              WorldGen.PlaceTight(x, y, (ushort) 165, false);
            }
            if (((int) Main.tile[x, y + 1].type == 25 || (int) Main.tile[x, y + 1].type == 203) && WorldGen.genRand.Next(5) == 0)
            {
              if (!Main.tile[x, y].active() && !Main.tile[x, y - 1].active())
                Main.tile[x, y + 1].slope((byte) 0);
              WorldGen.PlaceTight(x, y, (ushort) 165, false);
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Gems In Ice Biome", (WorldGenLegacyMethod) (progress =>
      {
        for (int index1 = 0; (double) index1 < (double) Main.maxTilesX * 0.25; ++index1)
        {
          int index2 = WorldGen.genRand.Next((int) (Main.worldSurface + Main.rockLayer) / 2, WorldGen.lavaLine);
          int index3 = WorldGen.genRand.Next(snowMinX[index2], snowMaxX[index2]);
          if (Main.tile[index3, index2].active() && ((int) Main.tile[index3, index2].type == 147 || (int) Main.tile[index3, index2].type == 161 || ((int) Main.tile[index3, index2].type == 162 || (int) Main.tile[index3, index2].type == 224)))
          {
            int num1 = WorldGen.genRand.Next(1, 4);
            int num2 = WorldGen.genRand.Next(1, 4);
            int num3 = WorldGen.genRand.Next(1, 4);
            int num4 = WorldGen.genRand.Next(1, 4);
            int num5 = WorldGen.genRand.Next(12);
            int style = num5 >= 3 ? (num5 >= 6 ? (num5 >= 8 ? (num5 >= 10 ? (num5 >= 11 ? 5 : 4) : 3) : 2) : 1) : 0;
            for (int i = index3 - num1; i < index3 + num2; ++i)
            {
              for (int j = index2 - num3; j < index2 + num4; ++j)
              {
                if (!Main.tile[i, j].active())
                  WorldGen.PlaceTile(i, j, 178, true, false, -1, style);
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Random Gems", (WorldGenLegacyMethod) (progress =>
      {
        for (int index = 0; index < Main.maxTilesX; ++index)
        {
          int i = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
          int j = WorldGen.genRand.Next((int) Main.rockLayer, Main.maxTilesY - 300);
          if (!Main.tile[i, j].active() && !Main.tile[i, j].lava() && (!Main.wallDungeon[(int) Main.tile[i, j].wall] && (int) Main.tile[i, j].wall != 27))
          {
            int num = WorldGen.genRand.Next(12);
            int style = num >= 3 ? (num >= 6 ? (num >= 8 ? (num >= 10 ? (num >= 11 ? 5 : 4) : 3) : 2) : 1) : 0;
            WorldGen.PlaceTile(i, j, 178, true, false, -1, style);
          }
        }
      }));
      WorldGen.AddGenerationPass("Moss Grass", (WorldGenLegacyMethod) (progress =>
      {
        for (int index1 = 5; index1 < Main.maxTilesX - 5; ++index1)
        {
          for (int index2 = 5; index2 < Main.maxTilesY - 5; ++index2)
          {
            if (Main.tile[index1, index2].active() && Main.tileMoss[(int) Main.tile[index1, index2].type])
            {
              for (int index3 = 0; index3 < 4; ++index3)
              {
                int i = index1;
                int j = index2;
                if (index3 == 0)
                  --i;
                if (index3 == 1)
                  ++i;
                if (index3 == 2)
                  --j;
                if (index3 == 3)
                  ++j;
                if (!Main.tile[i, j].active())
                  WorldGen.PlaceTile(i, j, 184, true, false, -1, 0);
              }
            }
          }
        }
      }));
      WorldGen.AddGenerationPass("Muds Walls In Jungle", (WorldGenLegacyMethod) (progress =>
      {
        int num1 = 0;
        int num2 = 0;
        bool flag1 = false;
        for (int index1 = 5; index1 < Main.maxTilesX - 5; ++index1)
        {
          for (int index2 = 0; (double) index2 < Main.worldSurface + 20.0; ++index2)
          {
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 60)
            {
              num1 = index1;
              flag1 = true;
              break;
            }
          }
          if (flag1)
            break;
        }
        bool flag2 = false;
        for (int index1 = Main.maxTilesX - 5; index1 > 5; --index1)
        {
          for (int index2 = 0; (double) index2 < Main.worldSurface + 20.0; ++index2)
          {
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 60)
            {
              num2 = index1;
              flag2 = true;
              break;
            }
          }
          if (flag2)
            break;
        }
        for (int index1 = num1; index1 <= num2; ++index1)
        {
          for (int index2 = 0; (double) index2 < Main.worldSurface + 20.0; ++index2)
          {
            if ((index1 >= num1 + 2 && index1 <= num2 - 2 || WorldGen.genRand.Next(2) != 0) && (index1 >= num1 + 3 && index1 <= num2 - 3 || WorldGen.genRand.Next(3) != 0) && ((int) Main.tile[index1, index2].wall == 2 || (int) Main.tile[index1, index2].wall == 59))
              Main.tile[index1, index2].wall = (byte) 15;
          }
        }
      }));
      WorldGen.AddGenerationPass("Larva", (WorldGenLegacyMethod) (progress =>
      {
        for (int index1 = 0; index1 < WorldGen.numLarva; ++index1)
        {
          int i = WorldGen.larvaX[index1];
          int j = WorldGen.larvaY[index1];
          for (int index2 = i - 1; index2 <= i + 1; ++index2)
          {
            for (int index3 = j - 2; index3 <= j + 1; ++index3)
            {
              if (index3 != j + 1)
              {
                Main.tile[index2, index3].active(false);
              }
              else
              {
                Main.tile[index2, index3].active(true);
                Main.tile[index2, index3].type = (ushort) 225;
                Main.tile[index2, index3].slope((byte) 0);
                Main.tile[index2, index3].halfBrick(false);
              }
            }
          }
          WorldGen.PlaceTile(i, j, 231, true, false, -1, 0);
        }
        Main.tileSolid[232] = true;
        Main.tileSolid[162] = true;
      }));
      WorldGen.AddGenerationPass("Settle Liquids Again", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[27].Value;
        Liquid.QuickWater(3, -1, -1);
        WorldGen.WaterCheck();
        int num1 = 0;
        Liquid.quickSettle = true;
        while (num1 < 10)
        {
          int num2 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
          ++num1;
          float num3 = 0.0f;
          while (Liquid.numLiquid > 0)
          {
            float num4 = (float) (num2 - (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer)) / (float) num2;
            if (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer > num2)
              num2 = Liquid.numLiquid + LiquidBuffer.numLiquidBuffer;
            if ((double) num4 > (double) num3)
              num3 = num4;
            else
              num4 = num3;
            if (num1 == 1)
              progress.Set((float) ((double) num4 / 3.0 + 0.330000013113022));
            int num5 = 10;
            if (num1 > num5)
              ;
            Liquid.UpdateLiquid();
          }
          WorldGen.WaterCheck();
          progress.Set((float) ((double) num1 * 0.100000001490116 / 3.0 + 0.660000026226044));
        }
        Liquid.quickSettle = false;
      }));
      WorldGen.AddGenerationPass("Tile Cleanup", (WorldGenLegacyMethod) (progress =>
      {
        for (int i = 40; i < Main.maxTilesX - 40; ++i)
        {
          for (int index1 = 40; index1 < Main.maxTilesY - 40; ++index1)
          {
            if (!Main.tile[i, index1].active() && (int) Main.tile[i, index1].liquid == 0 && (WorldGen.genRand.Next(3) != 0 && WorldGen.SolidTile(i, index1 - 1)))
            {
              int num1 = WorldGen.genRand.Next(15, 21);
              for (int index2 = index1 - 2; index2 >= index1 - num1; --index2)
              {
                if ((int) Main.tile[i, index2].liquid >= 128)
                {
                  int num2 = 373;
                  if (Main.tile[i, index2].lava())
                    num2 = 374;
                  else if (Main.tile[i, index2].honey())
                    num2 = 375;
                  if (WorldGen.genRand.Next(index1 - index2) <= 1)
                  {
                    Main.tile[i, index1].type = (ushort) num2;
                    Main.tile[i, index1].frameX = (short) 0;
                    Main.tile[i, index1].frameY = (short) 0;
                    Main.tile[i, index1].active(true);
                    break;
                  }
                }
              }
              if (!Main.tile[i, index1].active())
              {
                int num2 = WorldGen.genRand.Next(3, 11);
                for (int index2 = index1 + 1; index2 <= index1 + num2; ++index2)
                {
                  if ((int) Main.tile[i, index2].liquid >= 200)
                  {
                    int num3 = 373;
                    if (Main.tile[i, index2].lava())
                      num3 = 374;
                    else if (Main.tile[i, index2].honey())
                      num3 = 375;
                    if (WorldGen.genRand.Next((index2 - index1) * 3) <= 1)
                    {
                      Main.tile[i, index1].type = (ushort) num3;
                      Main.tile[i, index1].frameX = (short) 0;
                      Main.tile[i, index1].frameY = (short) 0;
                      Main.tile[i, index1].active(true);
                      break;
                    }
                  }
                }
              }
              if (!Main.tile[i, index1].active() && WorldGen.genRand.Next(3) != 0)
              {
                Tile tile = Main.tile[i, index1 - 1];
                if (TileID.Sets.Conversion.Sandstone[(int) tile.type] || TileID.Sets.Conversion.HardenedSand[(int) tile.type])
                {
                  Main.tile[i, index1].type = (ushort) 461;
                  Main.tile[i, index1].frameX = (short) 0;
                  Main.tile[i, index1].frameY = (short) 0;
                  Main.tile[i, index1].active(true);
                }
              }
            }
            if ((int) Main.tile[i, index1].type == 137)
            {
              if ((int) Main.tile[i, index1].frameY <= 52)
              {
                int num = -1;
                if ((int) Main.tile[i, index1].frameX >= 18)
                  num = 1;
                if (Main.tile[i + num, index1].halfBrick() || (int) Main.tile[i + num, index1].slope() != 0)
                  Main.tile[i + num, index1].active(false);
              }
            }
            else if ((int) Main.tile[i, index1].type == 162 && (int) Main.tile[i, index1 + 1].liquid == 0)
              Main.tile[i, index1].active(false);
            if ((int) Main.tile[i, index1].wall == 13 || (int) Main.tile[i, index1].wall == 14)
              Main.tile[i, index1].liquid = (byte) 0;
            if ((int) Main.tile[i, index1].type == 31)
            {
              int num1 = (int) Main.tile[i, index1].frameX / 18;
              int num2 = 0;
              int num3 = i;
              int num4 = num2 + num1 / 2;
              int num5 = WorldGen.crimson ? 1 : 0;
              int num6 = num1 % 2;
              int num7 = num3 - num6;
              int num8 = (int) Main.tile[i, index1].frameY / 18;
              int num9 = 0;
              int num10 = index1;
              int num11 = num9 + num8 / 2;
              int num12 = num8 % 2;
              int num13 = num10 - num12;
              for (int index2 = 0; index2 < 2; ++index2)
              {
                for (int index3 = 0; index3 < 2; ++index3)
                {
                  int index4 = num7 + index2;
                  int index5 = num13 + index3;
                  Main.tile[index4, index5].active(true);
                  Main.tile[index4, index5].slope((byte) 0);
                  Main.tile[index4, index5].halfBrick(false);
                  Main.tile[index4, index5].type = (ushort) 31;
                  Main.tile[index4, index5].frameX = (short) (index2 * 18 + 36 * num5);
                  Main.tile[index4, index5].frameY = (short) (index3 * 18 + 36 * num11);
                }
              }
            }
            if ((int) Main.tile[i, index1].type == 12)
            {
              int num1 = (int) Main.tile[i, index1].frameX / 18;
              int num2 = 0;
              int num3 = i;
              int num4 = num2 + num1 / 2;
              int num5 = num1 % 2;
              int num6 = num3 - num5;
              int num7 = (int) Main.tile[i, index1].frameY / 18;
              int num8 = 0;
              int num9 = index1;
              int num10 = num8 + num7 / 2;
              int num11 = num7 % 2;
              int num12 = num9 - num11;
              for (int index2 = 0; index2 < 2; ++index2)
              {
                for (int index3 = 0; index3 < 2; ++index3)
                {
                  int index4 = num6 + index2;
                  int index5 = num12 + index3;
                  Main.tile[index4, index5].active(true);
                  Main.tile[index4, index5].slope((byte) 0);
                  Main.tile[index4, index5].halfBrick(false);
                  Main.tile[index4, index5].type = (ushort) 12;
                  Main.tile[index4, index5].frameX = (short) (index2 * 18 + 36 * num4);
                  Main.tile[index4, index5].frameY = (short) (index3 * 18 + 36 * num10);
                }
                if (!Main.tile[index2, index1 + 2].active())
                {
                  Main.tile[index2, index1 + 2].active(true);
                  if (!Main.tileSolid[(int) Main.tile[index2, index1 + 2].type] || Main.tileSolidTop[(int) Main.tile[index2, index1 + 2].type])
                    Main.tile[index2, index1 + 2].type = (ushort) 0;
                }
                Main.tile[index2, index1 + 2].slope((byte) 0);
                Main.tile[index2, index1 + 2].halfBrick(false);
              }
            }
            if (TileID.Sets.BasicChest[(int) Main.tile[i, index1].type])
            {
              int num1 = (int) Main.tile[i, index1].frameX / 18;
              int num2 = 0;
              int num3 = i;
              int Y = index1 - (int) Main.tile[i, index1].frameY / 18;
              while (num1 >= 2)
              {
                ++num2;
                num1 -= 2;
              }
              int X = num3 - num1;
              int chest = Chest.FindChest(X, Y);
              if (chest != -1)
              {
                switch (Main.chest[chest].item[0].type)
                {
                  case 1156:
                    num2 = 23;
                    break;
                  case 1260:
                    num2 = 26;
                    break;
                  case 1569:
                    num2 = 25;
                    break;
                  case 1571:
                    num2 = 24;
                    break;
                  case 1572:
                    num2 = 27;
                    break;
                }
              }
              for (int index2 = 0; index2 < 2; ++index2)
              {
                for (int index3 = 0; index3 < 2; ++index3)
                {
                  int index4 = X + index2;
                  int index5 = Y + index3;
                  Main.tile[index4, index5].active(true);
                  Main.tile[index4, index5].slope((byte) 0);
                  Main.tile[index4, index5].halfBrick(false);
                  Main.tile[index4, index5].type = (ushort) 21;
                  Main.tile[index4, index5].frameX = (short) (index2 * 18 + 36 * num2);
                  Main.tile[index4, index5].frameY = (short) (index3 * 18);
                }
                if (!Main.tile[index2, index1 + 2].active())
                {
                  Main.tile[index2, index1 + 2].active(true);
                  if (!Main.tileSolid[(int) Main.tile[index2, index1 + 2].type] || Main.tileSolidTop[(int) Main.tile[index2, index1 + 2].type])
                    Main.tile[index2, index1 + 2].type = (ushort) 0;
                }
                Main.tile[index2, index1 + 2].slope((byte) 0);
                Main.tile[index2, index1 + 2].halfBrick(false);
              }
            }
            if ((int) Main.tile[i, index1].type == 28)
            {
              int num1 = (int) Main.tile[i, index1].frameX / 18;
              int num2 = 0;
              int num3 = i;
              while (num1 >= 2)
              {
                ++num2;
                num1 -= 2;
              }
              int num4 = num3 - num1;
              int num5 = (int) Main.tile[i, index1].frameY / 18;
              int num6 = 0;
              int num7 = index1;
              while (num5 >= 2)
              {
                ++num6;
                num5 -= 2;
              }
              int num8 = num7 - num5;
              for (int index2 = 0; index2 < 2; ++index2)
              {
                for (int index3 = 0; index3 < 2; ++index3)
                {
                  int index4 = num4 + index2;
                  int index5 = num8 + index3;
                  Main.tile[index4, index5].active(true);
                  Main.tile[index4, index5].slope((byte) 0);
                  Main.tile[index4, index5].halfBrick(false);
                  Main.tile[index4, index5].type = (ushort) 28;
                  Main.tile[index4, index5].frameX = (short) (index2 * 18 + 36 * num2);
                  Main.tile[index4, index5].frameY = (short) (index3 * 18 + 36 * num6);
                }
                if (!Main.tile[index2, index1 + 2].active())
                {
                  Main.tile[index2, index1 + 2].active(true);
                  if (!Main.tileSolid[(int) Main.tile[index2, index1 + 2].type] || Main.tileSolidTop[(int) Main.tile[index2, index1 + 2].type])
                    Main.tile[index2, index1 + 2].type = (ushort) 0;
                }
                Main.tile[index2, index1 + 2].slope((byte) 0);
                Main.tile[index2, index1 + 2].halfBrick(false);
              }
            }
            if ((int) Main.tile[i, index1].type == 26)
            {
              int num1 = (int) Main.tile[i, index1].frameX / 18;
              int num2 = 0;
              int num3 = i;
              int num4 = index1 - (int) Main.tile[i, index1].frameY / 18;
              while (num1 >= 3)
              {
                ++num2;
                num1 -= 3;
              }
              int num5 = num3 - num1;
              for (int index2 = 0; index2 < 3; ++index2)
              {
                for (int index3 = 0; index3 < 2; ++index3)
                {
                  int index4 = num5 + index2;
                  int index5 = num4 + index3;
                  Main.tile[index4, index5].active(true);
                  Main.tile[index4, index5].slope((byte) 0);
                  Main.tile[index4, index5].halfBrick(false);
                  Main.tile[index4, index5].type = (ushort) 26;
                  Main.tile[index4, index5].frameX = (short) (index2 * 18 + 54 * num2);
                  Main.tile[index4, index5].frameY = (short) (index3 * 18);
                }
                if (!Main.tile[num5 + index2, num4 + 2].active() || !Main.tileSolid[(int) Main.tile[num5 + index2, num4 + 2].type] || Main.tileSolidTop[(int) Main.tile[num5 + index2, num4 + 2].type])
                {
                  Main.tile[num5 + index2, num4 + 2].active(true);
                  if (!TileID.Sets.Platforms[(int) Main.tile[num5 + index2, num4 + 2].type] && (!Main.tileSolid[(int) Main.tile[num5 + index2, num4 + 2].type] || Main.tileSolidTop[(int) Main.tile[num5 + index2, num4 + 2].type]))
                    Main.tile[num5 + index2, num4 + 2].type = (ushort) 0;
                }
                Main.tile[num5 + index2, num4 + 2].slope((byte) 0);
                Main.tile[num5 + index2, num4 + 2].halfBrick(false);
                if ((int) Main.tile[num5 + index2, num4 + 3].type == 28 && (int) Main.tile[num5 + index2, num4 + 3].frameY % 36 >= 18)
                {
                  Main.tile[num5 + index2, num4 + 3].type = (ushort) 0;
                  Main.tile[num5 + index2, num4 + 3].active(false);
                }
              }
              for (int index2 = 0; index2 < 3; ++index2)
              {
                if (((int) Main.tile[num5 - 1, num4 + index2].type == 28 || (int) Main.tile[num5 - 1, num4 + index2].type == 12) && (int) Main.tile[num5 - 1, num4 + index2].frameX % 36 < 18)
                {
                  Main.tile[num5 - 1, num4 + index2].type = (ushort) 0;
                  Main.tile[num5 - 1, num4 + index2].active(false);
                }
                if (((int) Main.tile[num5 + 3, num4 + index2].type == 28 || (int) Main.tile[num5 + 3, num4 + index2].type == 12) && (int) Main.tile[num5 + 3, num4 + index2].frameX % 36 >= 18)
                {
                  Main.tile[num5 + 3, num4 + index2].type = (ushort) 0;
                  Main.tile[num5 + 3, num4 + index2].active(false);
                }
              }
            }
            if ((int) Main.tile[i, index1].type == 237 && (int) Main.tile[i, index1 + 1].type == 232)
              Main.tile[i, index1 + 1].type = (ushort) 226;
          }
        }
      }));
      WorldGen.AddGenerationPass("Lihzahrd Altars", (WorldGenLegacyMethod) (progress =>
      {
        int lAltarX = WorldGen.lAltarX;
        int lAltarY = WorldGen.lAltarY;
        for (int index1 = 0; index1 <= 2; ++index1)
        {
          for (int index2 = 0; index2 <= 1; ++index2)
          {
            int index3 = lAltarX + index1;
            int index4 = lAltarY + index2;
            Main.tile[index3, index4].active(true);
            Main.tile[index3, index4].type = (ushort) 237;
            Main.tile[index3, index4].frameX = (short) (index1 * 18);
            Main.tile[index3, index4].frameY = (short) (index2 * 18);
          }
          Main.tile[index1, lAltarY + 2].active(true);
          Main.tile[index1, lAltarY + 2].slope((byte) 0);
          Main.tile[index1, lAltarY + 2].halfBrick(false);
          Main.tile[index1, lAltarY + 2].type = (ushort) 226;
        }
      }));
      WorldGen.AddGenerationPass("Micro Biomes", (WorldGenLegacyMethod) (progress =>
      {
        progress.Message = Lang.gen[76].Value;
        float num1 = (float) (Main.maxTilesX * Main.maxTilesY) / 5040000f;
        float num2 = (float) Main.maxTilesX / 4200f;
        int num3 = (int) ((double) WorldGen.genRand.Next(3, 6) * (double) num1);
        int num4 = 0;
        while (num4 < num3)
        {
          if (Terraria.World.Generation.Biomes<ThinIceBiome>.Place(WorldGen.RandomWorldPoint((int) Main.worldSurface + 20, 50, 200, 50), structures))
            ++num4;
        }
        progress.Set(0.1f);
        int num5 = (int) Math.Ceiling((double) num1);
        int num6 = 0;
        while (num6 < num5)
        {
          Point origin;
          origin.Y = (__Null) ((int) worldSurface + WorldGen.genRand.Next(50, 100));
          origin.X = WorldGen.genRand.Next(2) != 0 ? (__Null) WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.699999988079071), Main.maxTilesX - 50) : (__Null) WorldGen.genRand.Next(50, (int) ((double) Main.maxTilesX * 0.300000011920929));
          if (Terraria.World.Generation.Biomes<EnchantedSwordBiome>.Place(origin, structures))
            ++num6;
        }
        progress.Set(0.2f);
        int num7 = (int) ((double) WorldGen.genRand.Next(6, 12) * (double) num1);
        int num8 = 0;
        while (num8 < num7)
        {
          if (Terraria.World.Generation.Biomes<CampsiteBiome>.Place(WorldGen.RandomWorldPoint((int) Main.worldSurface, 50, 200, 50), structures))
            ++num8;
        }
        int num9 = (int) ((double) WorldGen.genRand.Next(14, 30) * (double) num1);
        int num10 = 0;
        while (num10 < num9)
        {
          if (Terraria.World.Generation.Biomes<MiningExplosivesBiome>.Place(WorldGen.RandomWorldPoint((int) rockLayer, 50, 200, 50), structures))
            ++num10;
        }
        progress.Set(0.3f);
        int num11 = (int) ((double) WorldGen.genRand.Next(6, 12) * (double) num2);
        int num12 = 0;
        for (int index = 0; num12 < num11 && index < 20000; ++index)
        {
          if (Terraria.World.Generation.Biomes<MahoganyTreeBiome>.Place(WorldGen.RandomWorldPoint((int) Main.worldSurface + 50, 50, 500, 50), structures))
            ++num12;
        }
        progress.Set(0.4f);
        if (!WorldGen.crimson)
        {
          int num13 = (int) ((double) WorldGen.genRand.Next(1, 3) * (double) num1);
          int num14 = 0;
          while (num14 < num13)
          {
            if (Terraria.World.Generation.Biomes<CorruptionPitBiome>.Place(WorldGen.RandomWorldPoint((int) Main.worldSurface, 50, 500, 50), structures))
              ++num14;
          }
        }
        TrackGenerator.Run((int) (10.0 * (double) num1), (int) ((double) num1 * 25.0) + 250);
        progress.Set(1f);
      }));
      WorldGen.AddGenerationPass("Final Cleanup", (WorldGenLegacyMethod) (progress =>
      {
        for (int i = 0; i < Main.maxTilesX; ++i)
        {
          for (int index = 0; index < Main.maxTilesY; ++index)
          {
            if (Main.tile[i, index].active() && (!WorldGen.SolidTile(i, index + 1) || !WorldGen.SolidTile(i, index + 2)))
            {
              ushort type = Main.tile[i, index].type;
              if ((uint) type <= 112U)
              {
                if ((int) type != 53)
                {
                  if ((int) type == 112)
                    Main.tile[i, index].type = (ushort) 398;
                }
                else
                  Main.tile[i, index].type = (ushort) 397;
              }
              else if ((int) type != 123)
              {
                if ((int) type != 224)
                {
                  if ((int) type == 234)
                    Main.tile[i, index].type = (ushort) 399;
                }
                else
                  Main.tile[i, index].type = (ushort) 147;
              }
              else
                Main.tile[i, index].type = (ushort) 1;
            }
          }
        }
        WorldGen.noTileActions = false;
        WorldGen.gen = false;
        Main.AnglerQuestSwap();
      }));
      WorldGen._generator.GenerateWorld(customProgressObject);
      Main.WorldFileMetadata = FileMetadata.FromCurrentSettings(FileType.World);
    }

    public static Point RandomRectanglePoint(Rectangle rectangle)
    {
      return new Point(WorldGen.genRand.Next((int) rectangle.X, (int) (rectangle.X + rectangle.Width)), WorldGen.genRand.Next((int) rectangle.Y, (int) (rectangle.Y + rectangle.Height)));
    }

    public static Point RandomRectanglePoint(int x, int y, int width, int height)
    {
      return new Point(WorldGen.genRand.Next(x, x + width), WorldGen.genRand.Next(y, y + height));
    }

    public static Point RandomWorldPoint(int padding)
    {
      return WorldGen.RandomWorldPoint(padding, padding, padding, padding);
    }

    public static Point RandomWorldPoint(int top = 0, int right = 0, int bottom = 0, int left = 0)
    {
      return new Point(WorldGen.genRand.Next(left, Main.maxTilesX - right), WorldGen.genRand.Next(top, Main.maxTilesY - bottom));
    }

    public static bool GrowPalmTree(int i, int y)
    {
      int index1 = y;
      while ((int) Main.tile[i, index1].type == 20)
        ++index1;
      Tile tile1 = Main.tile[i, index1];
      Tile tile2 = Main.tile[i, index1 - 1];
      if (!tile1.active() || tile1.halfBrick() || ((int) tile1.slope() != 0 || (int) tile2.wall != 0) || (int) tile2.liquid != 0 || ((int) tile1.type != 53 && (int) tile1.type != 234 && ((int) tile1.type != 116 && (int) tile1.type != 112) || !WorldGen.EmptyTileCheck(i - 1, i + 1, index1 - 30, index1 - 1, 20)))
        return false;
      int num1 = WorldGen.genRand.Next(10, 21);
      int num2 = WorldGen.genRand.Next(-8, 9) * 2;
      short num3 = 0;
      for (int index2 = 0; index2 < num1; ++index2)
      {
        Tile tile3 = Main.tile[i, index1 - 1 - index2];
        if (index2 == 0)
        {
          tile3.active(true);
          tile3.type = (ushort) 323;
          tile3.frameX = (short) 66;
          tile3.frameY = (short) 0;
        }
        else if (index2 == num1 - 1)
        {
          tile3.active(true);
          tile3.type = (ushort) 323;
          tile3.frameX = (short) (22 * WorldGen.genRand.Next(4, 7));
          tile3.frameY = num3;
        }
        else
        {
          if ((int) num3 != num2)
          {
            float num4 = (float) index2 / (float) num1;
            if ((double) num4 >= 0.25 && ((double) num4 < 0.5 && WorldGen.genRand.Next(13) == 0 || ((double) num4 < 0.699999988079071 && WorldGen.genRand.Next(9) == 0 || ((double) num4 < 0.949999988079071 && WorldGen.genRand.Next(5) == 0 || true))))
            {
              short num5 = (short) Math.Sign(num2);
              num3 += (short) ((int) num5 * 2);
            }
          }
          tile3.active(true);
          tile3.type = (ushort) 323;
          tile3.frameX = (short) (22 * WorldGen.genRand.Next(0, 3));
          tile3.frameY = num3;
        }
      }
      WorldGen.RangeFrame(i - 2, index1 - num1 - 1, i + 2, index1 + 1);
      if (Main.netMode == 2)
        NetMessage.SendTileSquare(-1, i, (int) ((double) index1 - (double) num1 * 0.5), num1 + 1, TileChangeType.None);
      return true;
    }

    public static bool GrowEpicTree(int i, int y)
    {
      int index1 = y;
      while ((int) Main.tile[i, index1].type == 20)
        ++index1;
      if (Main.tile[i, index1].active() && !Main.tile[i, index1].halfBrick() && ((int) Main.tile[i, index1].slope() == 0 && (int) Main.tile[i, index1].type == 2) && ((int) Main.tile[i, index1 - 1].wall == 0 && (int) Main.tile[i, index1 - 1].liquid == 0) && (Main.tile[i - 1, index1].active() && ((int) Main.tile[i - 1, index1].type == 2 || (int) Main.tile[i - 1, index1].type == 23 || ((int) Main.tile[i - 1, index1].type == 60 || (int) Main.tile[i - 1, index1].type == 109)) || Main.tile[i + 1, index1].active() && ((int) Main.tile[i + 1, index1].type == 2 || (int) Main.tile[i + 1, index1].type == 23 || ((int) Main.tile[i + 1, index1].type == 60 || (int) Main.tile[i + 1, index1].type == 109))))
      {
        int num1 = 2;
        if (WorldGen.EmptyTileCheck(i - num1, i + num1, index1 - 55, index1 - 1, 20))
        {
          bool flag1 = false;
          bool flag2 = false;
          int num2 = WorldGen.genRand.Next(20, 30);
          for (int index2 = index1 - num2; index2 < index1; ++index2)
          {
            Main.tile[i, index2].frameNumber((byte) WorldGen.genRand.Next(3));
            Main.tile[i, index2].active(true);
            Main.tile[i, index2].type = (ushort) 5;
            int num3 = WorldGen.genRand.Next(3);
            int num4 = WorldGen.genRand.Next(10);
            if (index2 == index1 - 1 || index2 == index1 - num2)
              num4 = 0;
            while (((num4 == 5 ? 1 : (num4 == 7 ? 1 : 0)) & (flag1 ? 1 : 0)) != 0 || ((num4 == 6 ? 1 : (num4 == 7 ? 1 : 0)) & (flag2 ? 1 : 0)) != 0)
              num4 = WorldGen.genRand.Next(10);
            flag1 = false;
            flag2 = false;
            if (num4 == 5 || num4 == 7)
              flag1 = true;
            if (num4 == 6 || num4 == 7)
              flag2 = true;
            if (num4 == 1)
            {
              if (num3 == 0)
              {
                Main.tile[i, index2].frameX = (short) 0;
                Main.tile[i, index2].frameY = (short) 66;
              }
              if (num3 == 1)
              {
                Main.tile[i, index2].frameX = (short) 0;
                Main.tile[i, index2].frameY = (short) 88;
              }
              if (num3 == 2)
              {
                Main.tile[i, index2].frameX = (short) 0;
                Main.tile[i, index2].frameY = (short) 110;
              }
            }
            else if (num4 == 2)
            {
              if (num3 == 0)
              {
                Main.tile[i, index2].frameX = (short) 22;
                Main.tile[i, index2].frameY = (short) 0;
              }
              if (num3 == 1)
              {
                Main.tile[i, index2].frameX = (short) 22;
                Main.tile[i, index2].frameY = (short) 22;
              }
              if (num3 == 2)
              {
                Main.tile[i, index2].frameX = (short) 22;
                Main.tile[i, index2].frameY = (short) 44;
              }
            }
            else if (num4 == 3)
            {
              if (num3 == 0)
              {
                Main.tile[i, index2].frameX = (short) 44;
                Main.tile[i, index2].frameY = (short) 66;
              }
              if (num3 == 1)
              {
                Main.tile[i, index2].frameX = (short) 44;
                Main.tile[i, index2].frameY = (short) 88;
              }
              if (num3 == 2)
              {
                Main.tile[i, index2].frameX = (short) 44;
                Main.tile[i, index2].frameY = (short) 110;
              }
            }
            else if (num4 == 4)
            {
              if (num3 == 0)
              {
                Main.tile[i, index2].frameX = (short) 22;
                Main.tile[i, index2].frameY = (short) 66;
              }
              if (num3 == 1)
              {
                Main.tile[i, index2].frameX = (short) 22;
                Main.tile[i, index2].frameY = (short) 88;
              }
              if (num3 == 2)
              {
                Main.tile[i, index2].frameX = (short) 22;
                Main.tile[i, index2].frameY = (short) 110;
              }
            }
            else if (num4 == 5)
            {
              if (num3 == 0)
              {
                Main.tile[i, index2].frameX = (short) 88;
                Main.tile[i, index2].frameY = (short) 0;
              }
              if (num3 == 1)
              {
                Main.tile[i, index2].frameX = (short) 88;
                Main.tile[i, index2].frameY = (short) 22;
              }
              if (num3 == 2)
              {
                Main.tile[i, index2].frameX = (short) 88;
                Main.tile[i, index2].frameY = (short) 44;
              }
            }
            else if (num4 == 6)
            {
              if (num3 == 0)
              {
                Main.tile[i, index2].frameX = (short) 66;
                Main.tile[i, index2].frameY = (short) 66;
              }
              if (num3 == 1)
              {
                Main.tile[i, index2].frameX = (short) 66;
                Main.tile[i, index2].frameY = (short) 88;
              }
              if (num3 == 2)
              {
                Main.tile[i, index2].frameX = (short) 66;
                Main.tile[i, index2].frameY = (short) 110;
              }
            }
            else if (num4 == 7)
            {
              if (num3 == 0)
              {
                Main.tile[i, index2].frameX = (short) 110;
                Main.tile[i, index2].frameY = (short) 66;
              }
              if (num3 == 1)
              {
                Main.tile[i, index2].frameX = (short) 110;
                Main.tile[i, index2].frameY = (short) 88;
              }
              if (num3 == 2)
              {
                Main.tile[i, index2].frameX = (short) 110;
                Main.tile[i, index2].frameY = (short) 110;
              }
            }
            else
            {
              if (num3 == 0)
              {
                Main.tile[i, index2].frameX = (short) 0;
                Main.tile[i, index2].frameY = (short) 0;
              }
              if (num3 == 1)
              {
                Main.tile[i, index2].frameX = (short) 0;
                Main.tile[i, index2].frameY = (short) 22;
              }
              if (num3 == 2)
              {
                Main.tile[i, index2].frameX = (short) 0;
                Main.tile[i, index2].frameY = (short) 44;
              }
            }
            if (num4 == 5 || num4 == 7)
            {
              Main.tile[i - 1, index2].active(true);
              Main.tile[i - 1, index2].type = (ushort) 5;
              int num5 = WorldGen.genRand.Next(3);
              if (WorldGen.genRand.Next(3) < 2)
              {
                if (num5 == 0)
                {
                  Main.tile[i - 1, index2].frameX = (short) 44;
                  Main.tile[i - 1, index2].frameY = (short) 198;
                }
                if (num5 == 1)
                {
                  Main.tile[i - 1, index2].frameX = (short) 44;
                  Main.tile[i - 1, index2].frameY = (short) 220;
                }
                if (num5 == 2)
                {
                  Main.tile[i - 1, index2].frameX = (short) 44;
                  Main.tile[i - 1, index2].frameY = (short) 242;
                }
              }
              else
              {
                if (num5 == 0)
                {
                  Main.tile[i - 1, index2].frameX = (short) 66;
                  Main.tile[i - 1, index2].frameY = (short) 0;
                }
                if (num5 == 1)
                {
                  Main.tile[i - 1, index2].frameX = (short) 66;
                  Main.tile[i - 1, index2].frameY = (short) 22;
                }
                if (num5 == 2)
                {
                  Main.tile[i - 1, index2].frameX = (short) 66;
                  Main.tile[i - 1, index2].frameY = (short) 44;
                }
              }
            }
            if (num4 == 6 || num4 == 7)
            {
              Main.tile[i + 1, index2].active(true);
              Main.tile[i + 1, index2].type = (ushort) 5;
              int num5 = WorldGen.genRand.Next(3);
              if (WorldGen.genRand.Next(3) < 2)
              {
                if (num5 == 0)
                {
                  Main.tile[i + 1, index2].frameX = (short) 66;
                  Main.tile[i + 1, index2].frameY = (short) 198;
                }
                if (num5 == 1)
                {
                  Main.tile[i + 1, index2].frameX = (short) 66;
                  Main.tile[i + 1, index2].frameY = (short) 220;
                }
                if (num5 == 2)
                {
                  Main.tile[i + 1, index2].frameX = (short) 66;
                  Main.tile[i + 1, index2].frameY = (short) 242;
                }
              }
              else
              {
                if (num5 == 0)
                {
                  Main.tile[i + 1, index2].frameX = (short) 88;
                  Main.tile[i + 1, index2].frameY = (short) 66;
                }
                if (num5 == 1)
                {
                  Main.tile[i + 1, index2].frameX = (short) 88;
                  Main.tile[i + 1, index2].frameY = (short) 88;
                }
                if (num5 == 2)
                {
                  Main.tile[i + 1, index2].frameX = (short) 88;
                  Main.tile[i + 1, index2].frameY = (short) 110;
                }
              }
            }
          }
          int num6 = WorldGen.genRand.Next(3);
          bool flag3 = false;
          bool flag4 = false;
          if (Main.tile[i - 1, index1].active() && !Main.tile[i - 1, index1].halfBrick() && (int) Main.tile[i - 1, index1].slope() == 0 && ((int) Main.tile[i - 1, index1].type == 2 || (int) Main.tile[i - 1, index1].type == 23 || ((int) Main.tile[i - 1, index1].type == 60 || (int) Main.tile[i - 1, index1].type == 109)))
            flag3 = true;
          if (Main.tile[i + 1, index1].active() && !Main.tile[i + 1, index1].halfBrick() && (int) Main.tile[i + 1, index1].slope() == 0 && ((int) Main.tile[i + 1, index1].type == 2 || (int) Main.tile[i + 1, index1].type == 23 || ((int) Main.tile[i + 1, index1].type == 60 || (int) Main.tile[i + 1, index1].type == 109)))
            flag4 = true;
          if (!flag3)
          {
            if (num6 == 0)
              num6 = 2;
            if (num6 == 1)
              num6 = 3;
          }
          if (!flag4)
          {
            if (num6 == 0)
              num6 = 1;
            if (num6 == 2)
              num6 = 3;
          }
          if (flag3 && !flag4)
            num6 = 2;
          if (flag4 && !flag3)
            num6 = 1;
          if (num6 == 0 || num6 == 1)
          {
            Main.tile[i + 1, index1 - 1].active(true);
            Main.tile[i + 1, index1 - 1].type = (ushort) 5;
            int num3 = WorldGen.genRand.Next(3);
            if (num3 == 0)
            {
              Main.tile[i + 1, index1 - 1].frameX = (short) 22;
              Main.tile[i + 1, index1 - 1].frameY = (short) 132;
            }
            if (num3 == 1)
            {
              Main.tile[i + 1, index1 - 1].frameX = (short) 22;
              Main.tile[i + 1, index1 - 1].frameY = (short) 154;
            }
            if (num3 == 2)
            {
              Main.tile[i + 1, index1 - 1].frameX = (short) 22;
              Main.tile[i + 1, index1 - 1].frameY = (short) 176;
            }
          }
          if (num6 == 0 || num6 == 2)
          {
            Main.tile[i - 1, index1 - 1].active(true);
            Main.tile[i - 1, index1 - 1].type = (ushort) 5;
            int num3 = WorldGen.genRand.Next(3);
            if (num3 == 0)
            {
              Main.tile[i - 1, index1 - 1].frameX = (short) 44;
              Main.tile[i - 1, index1 - 1].frameY = (short) 132;
            }
            if (num3 == 1)
            {
              Main.tile[i - 1, index1 - 1].frameX = (short) 44;
              Main.tile[i - 1, index1 - 1].frameY = (short) 154;
            }
            if (num3 == 2)
            {
              Main.tile[i - 1, index1 - 1].frameX = (short) 44;
              Main.tile[i - 1, index1 - 1].frameY = (short) 176;
            }
          }
          int num7 = WorldGen.genRand.Next(3);
          if (num6 == 0)
          {
            if (num7 == 0)
            {
              Main.tile[i, index1 - 1].frameX = (short) 88;
              Main.tile[i, index1 - 1].frameY = (short) 132;
            }
            if (num7 == 1)
            {
              Main.tile[i, index1 - 1].frameX = (short) 88;
              Main.tile[i, index1 - 1].frameY = (short) 154;
            }
            if (num7 == 2)
            {
              Main.tile[i, index1 - 1].frameX = (short) 88;
              Main.tile[i, index1 - 1].frameY = (short) 176;
            }
          }
          else if (num6 == 1)
          {
            if (num7 == 0)
            {
              Main.tile[i, index1 - 1].frameX = (short) 0;
              Main.tile[i, index1 - 1].frameY = (short) 132;
            }
            if (num7 == 1)
            {
              Main.tile[i, index1 - 1].frameX = (short) 0;
              Main.tile[i, index1 - 1].frameY = (short) 154;
            }
            if (num7 == 2)
            {
              Main.tile[i, index1 - 1].frameX = (short) 0;
              Main.tile[i, index1 - 1].frameY = (short) 176;
            }
          }
          else if (num6 == 2)
          {
            if (num7 == 0)
            {
              Main.tile[i, index1 - 1].frameX = (short) 66;
              Main.tile[i, index1 - 1].frameY = (short) 132;
            }
            if (num7 == 1)
            {
              Main.tile[i, index1 - 1].frameX = (short) 66;
              Main.tile[i, index1 - 1].frameY = (short) 154;
            }
            if (num7 == 2)
            {
              Main.tile[i, index1 - 1].frameX = (short) 66;
              Main.tile[i, index1 - 1].frameY = (short) 176;
            }
          }
          if (WorldGen.genRand.Next(8) != 0)
          {
            int num3 = WorldGen.genRand.Next(3);
            if (num3 == 0)
            {
              Main.tile[i, index1 - num2].frameX = (short) 22;
              Main.tile[i, index1 - num2].frameY = (short) 198;
            }
            if (num3 == 1)
            {
              Main.tile[i, index1 - num2].frameX = (short) 22;
              Main.tile[i, index1 - num2].frameY = (short) 220;
            }
            if (num3 == 2)
            {
              Main.tile[i, index1 - num2].frameX = (short) 22;
              Main.tile[i, index1 - num2].frameY = (short) 242;
            }
          }
          else
          {
            int num3 = WorldGen.genRand.Next(3);
            if (num3 == 0)
            {
              Main.tile[i, index1 - num2].frameX = (short) 0;
              Main.tile[i, index1 - num2].frameY = (short) 198;
            }
            if (num3 == 1)
            {
              Main.tile[i, index1 - num2].frameX = (short) 0;
              Main.tile[i, index1 - num2].frameY = (short) 220;
            }
            if (num3 == 2)
            {
              Main.tile[i, index1 - num2].frameX = (short) 0;
              Main.tile[i, index1 - num2].frameY = (short) 242;
            }
          }
          WorldGen.RangeFrame(i - 2, index1 - num2 - 1, i + 2, index1 + 1);
          if (Main.netMode == 2)
            NetMessage.SendTileSquare(-1, i, (int) ((double) index1 - (double) num2 * 0.5), num2 + 1, TileChangeType.None);
          return true;
        }
      }
      return false;
    }

    public static bool Pyramid(int i, int j)
    {
      ushort num1 = 151;
      int num2 = j - WorldGen.genRand.Next(0, 7);
      int num3 = WorldGen.genRand.Next(9, 13);
      int num4 = 1;
      int num5 = j + WorldGen.genRand.Next(75, 125);
      for (int index1 = num2; index1 < num5; ++index1)
      {
        for (int index2 = i - num4; index2 < i + num4 - 1; ++index2)
        {
          Main.tile[index2, index1].type = num1;
          Main.tile[index2, index1].active(true);
          Main.tile[index2, index1].halfBrick(false);
          Main.tile[index2, index1].slope((byte) 0);
        }
        ++num4;
      }
      for (int i1 = i - num4 - 5; i1 <= i + num4 + 5; ++i1)
      {
        for (int j1 = j - 1; j1 <= num5 + 1; ++j1)
        {
          bool flag = true;
          for (int index1 = i1 - 1; index1 <= i1 + 1; ++index1)
          {
            for (int index2 = j1 - 1; index2 <= j1 + 1; ++index2)
            {
              if ((int) Main.tile[index1, index2].type != (int) num1)
                flag = false;
            }
          }
          if (flag)
          {
            Main.tile[i1, j1].wall = (byte) 34;
            WorldGen.SquareWallFrame(i1, j1, true);
          }
        }
      }
      int num6 = 1;
      if (WorldGen.genRand.Next(2) == 0)
        num6 = -1;
      int num7 = i - num3 * num6;
      int j2 = j + num3;
      int num8 = WorldGen.genRand.Next(5, 8);
      bool flag1 = true;
      int num9 = WorldGen.genRand.Next(20, 30);
      while (flag1)
      {
        flag1 = false;
        bool flag2 = false;
        for (int index1 = j2; index1 <= j2 + num8; ++index1)
        {
          int index2 = num7;
          if ((int) Main.tile[index2, index1 - 1].type == 53)
            flag2 = true;
          if ((int) Main.tile[index2, index1].type == (int) num1)
          {
            Main.tile[index2, index1 + 1].wall = (byte) 34;
            Main.tile[index2 + num6, index1].wall = (byte) 34;
            Main.tile[index2, index1].active(false);
            flag1 = true;
          }
          if (flag2)
          {
            Main.tile[index2, index1].type = (ushort) 53;
            Main.tile[index2, index1].active(true);
            Main.tile[index2, index1].halfBrick(false);
            Main.tile[index2, index1].slope((byte) 0);
          }
        }
        num7 -= num6;
      }
      int index3 = i - num3 * num6;
      bool flag3 = true;
      bool flag4 = false;
      bool flag5 = true;
      while (flag5)
      {
        for (int index1 = j2; index1 <= j2 + num8; ++index1)
        {
          int index2 = index3;
          Main.tile[index2, index1].active(false);
        }
        index3 += num6;
        ++j2;
        --num9;
        if (j2 >= num5 - num8 * 2)
          num9 = 10;
        if (num9 <= 0)
        {
          bool flag2 = false;
          if (!flag3 && !flag4)
          {
            flag4 = true;
            flag2 = true;
            int num10 = WorldGen.genRand.Next(7, 13);
            int num11 = WorldGen.genRand.Next(23, 28);
            int num12 = num11;
            int num13 = index3;
            while (num11 > 0)
            {
              for (int index1 = j2 - num10 + num8; index1 <= j2 + num8; ++index1)
              {
                if (num11 == num12 || num11 == 1)
                {
                  if (index1 >= j2 - num10 + num8 + 2)
                    Main.tile[index3, index1].active(false);
                }
                else if (num11 == num12 - 1 || num11 == 2 || (num11 == num12 - 2 || num11 == 3))
                {
                  if (index1 >= j2 - num10 + num8 + 1)
                    Main.tile[index3, index1].active(false);
                }
                else
                  Main.tile[index3, index1].active(false);
              }
              --num11;
              index3 += num6;
            }
            int num14 = index3 - num6;
            int minValue = num14;
            int maxValue = num13;
            if (num14 > num13)
            {
              minValue = num13;
              maxValue = num14;
            }
            int contain = WorldGen.genRand.Next(3);
            switch (contain)
            {
              case 0:
                contain = 857;
                break;
              case 1:
                contain = 848;
                break;
              case 2:
                contain = 934;
                break;
            }
            WorldGen.AddBuriedChest((minValue + maxValue) / 2, j2, contain, false, 1);
            int num15 = WorldGen.genRand.Next(1, 10);
            for (int index1 = 0; index1 < num15; ++index1)
              WorldGen.PlaceSmallPile(WorldGen.genRand.Next(minValue, maxValue), j2 + num8, WorldGen.genRand.Next(16, 19), 1, (ushort) 185);
            WorldGen.PlaceTile(minValue + 2, j2 - num10 + num8 + 1, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
            WorldGen.PlaceTile(minValue + 3, j2 - num10 + num8, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
            WorldGen.PlaceTile(maxValue - 2, j2 - num10 + num8 + 1, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
            WorldGen.PlaceTile(maxValue - 3, j2 - num10 + num8, 91, true, false, -1, WorldGen.genRand.Next(4, 7));
            for (int x = minValue; x <= maxValue; ++x)
              WorldGen.PlacePot(x, j2 + num8, (ushort) 28, WorldGen.genRand.Next(25, 28));
          }
          if (flag3)
          {
            flag3 = false;
            num6 *= -1;
            num9 = WorldGen.genRand.Next(15, 20);
          }
          else if (flag2)
          {
            num9 = WorldGen.genRand.Next(10, 15);
          }
          else
          {
            num6 *= -1;
            num9 = WorldGen.genRand.Next(20, 40);
          }
        }
        if (j2 >= num5 - num8)
          flag5 = false;
      }
      int num16 = WorldGen.genRand.Next(100, 200);
      int num17 = WorldGen.genRand.Next(500, 800);
      bool flag6 = true;
      int num18 = num8;
      int num19 = WorldGen.genRand.Next(10, 50);
      if (num6 == 1)
        index3 -= num18;
      int num20 = WorldGen.genRand.Next(5, 10);
      while (flag6)
      {
        --num16;
        --num17;
        --num19;
        for (int index1 = index3 - num20 - WorldGen.genRand.Next(0, 2); index1 <= index3 + num18 + num20 + WorldGen.genRand.Next(0, 2); ++index1)
        {
          int index2 = j2;
          if (index1 >= index3 && index1 <= index3 + num18)
          {
            Main.tile[index1, index2].active(false);
          }
          else
          {
            Main.tile[index1, index2].type = num1;
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].halfBrick(false);
            Main.tile[index1, index2].slope((byte) 0);
          }
          if (index1 >= index3 - 1 && index1 <= index3 + 1 + num18)
            Main.tile[index1, index2].wall = (byte) 34;
        }
        ++j2;
        index3 += num6;
        if (num16 <= 0)
        {
          flag6 = false;
          for (int index1 = index3 + 1; index1 <= index3 + num18 - 1; ++index1)
          {
            if (Main.tile[index1, j2].active())
              flag6 = true;
          }
        }
        if (num19 < 0)
        {
          num19 = WorldGen.genRand.Next(10, 50);
          num6 *= -1;
        }
        if (num17 <= 0)
          flag6 = false;
      }
      return true;
    }

    public static bool GrowLivingTree(int i, int j)
    {
      int index1 = 0;
      int[] numArray1 = new int[1000];
      int[] numArray2 = new int[1000];
      int[] numArray3 = new int[1000];
      int[] numArray4 = new int[1000];
      int index2 = 0;
      int[] numArray5 = new int[2000];
      int[] numArray6 = new int[2000];
      bool[] flagArray = new bool[2000];
      if (!WorldGen.SolidTile(i, j + 1) || Main.tile[i, j].active())
        return false;
      int num1 = i - WorldGen.genRand.Next(1, 4);
      int num2 = i + WorldGen.genRand.Next(1, 4);
      if (j < 150)
        return false;
      int num3 = i - 50;
      int num4 = i + 50;
      for (int index3 = num3; index3 <= num4; ++index3)
      {
        for (int index4 = 5; index4 < j - 5; ++index4)
        {
          if (Main.tile[index3, index4].active())
            return false;
        }
      }
      int num5 = num1;
      int num6 = num2;
      int num7 = num1;
      int num8 = num2;
      int minValue = num2 - num1;
      bool flag1 = true;
      int num9 = WorldGen.genRand.Next(-10, -5);
      int num10 = WorldGen.genRand.Next(2);
      int index5 = j;
      while (flag1)
      {
        ++num9;
        if (num9 > WorldGen.genRand.Next(5, 30))
        {
          num9 = 0;
          numArray2[index1] = index5 + WorldGen.genRand.Next(5);
          if (WorldGen.genRand.Next(5) == 0)
            num10 = num10 != 0 ? 0 : 1;
          if (num10 == 0)
          {
            numArray3[index1] = -1;
            numArray1[index1] = num1;
            numArray4[index1] = num2 - num1;
            if (WorldGen.genRand.Next(2) == 0)
              ++num1;
            ++num5;
            num10 = 1;
          }
          else
          {
            numArray3[index1] = 1;
            numArray1[index1] = num2;
            numArray4[index1] = num2 - num1;
            if (WorldGen.genRand.Next(2) == 0)
              --num2;
            --num6;
            num10 = 0;
          }
          if (num5 == num6)
            flag1 = false;
          ++index1;
        }
        for (int index3 = num1; index3 <= num2; ++index3)
        {
          Main.tile[index3, index5].type = (ushort) 191;
          Main.tile[index3, index5].active(true);
          Main.tile[index3, index5].halfBrick(false);
        }
        --index5;
      }
      for (int index3 = 0; index3 < index1; ++index3)
      {
        int index4 = numArray1[index3] + numArray3[index3];
        int index6 = numArray2[index3];
        int num11 = (int) ((double) numArray4[index3] * (1.0 + (double) WorldGen.genRand.Next(20, 30) * 0.100000001490116));
        Main.tile[index4, index6 + 1].type = (ushort) 191;
        Main.tile[index4, index6 + 1].active(true);
        Main.tile[index4, index6 + 1].halfBrick(false);
        int num12 = WorldGen.genRand.Next(3, 5);
        while (num11 > 0)
        {
          --num11;
          Main.tile[index4, index6].type = (ushort) 191;
          Main.tile[index4, index6].active(true);
          Main.tile[index4, index6].halfBrick(false);
          if (WorldGen.genRand.Next(10) == 0)
          {
            if (WorldGen.genRand.Next(2) == 0)
              --index6;
            else
              ++index6;
          }
          else
            index4 += numArray3[index3];
          if (num12 > 0)
            --num12;
          else if (WorldGen.genRand.Next(2) == 0)
          {
            num12 = WorldGen.genRand.Next(2, 5);
            if (WorldGen.genRand.Next(2) == 0)
            {
              Main.tile[index4, index6].type = (ushort) 191;
              Main.tile[index4, index6].active(true);
              Main.tile[index4, index6].halfBrick(false);
              Main.tile[index4, index6 - 1].type = (ushort) 191;
              Main.tile[index4, index6 - 1].active(true);
              Main.tile[index4, index6 - 1].halfBrick(false);
              numArray5[index2] = index4;
              numArray6[index2] = index6;
              ++index2;
            }
            else
            {
              Main.tile[index4, index6].type = (ushort) 191;
              Main.tile[index4, index6].active(true);
              Main.tile[index4, index6].halfBrick(false);
              Main.tile[index4, index6 + 1].type = (ushort) 191;
              Main.tile[index4, index6 + 1].active(true);
              Main.tile[index4, index6 + 1].halfBrick(false);
              numArray5[index2] = index4;
              numArray6[index2] = index6;
              ++index2;
            }
          }
          if (num11 == 0)
          {
            numArray5[index2] = index4;
            numArray6[index2] = index6;
            ++index2;
          }
        }
      }
      int index7 = (num1 + num2) / 2;
      int index8 = index5;
      int num13 = WorldGen.genRand.Next(minValue * 3, minValue * 5);
      int num14 = 0;
      int num15 = 0;
      for (; num13 > 0; --num13)
      {
        Main.tile[index7, index8].type = (ushort) 191;
        Main.tile[index7, index8].active(true);
        Main.tile[index7, index8].halfBrick(false);
        if (num14 > 0)
          --num14;
        if (num15 > 0)
          --num15;
        for (int index3 = -1; index3 < 2; ++index3)
        {
          if (index3 != 0 && (index3 < 0 && num14 == 0 || index3 > 0 && num15 == 0) && WorldGen.genRand.Next(2) == 0)
          {
            int index4 = index7;
            int index6 = index8;
            int num11 = WorldGen.genRand.Next(minValue, minValue * 3);
            if (index3 < 0)
              num14 = WorldGen.genRand.Next(3, 5);
            if (index3 > 0)
              num15 = WorldGen.genRand.Next(3, 5);
            int num12 = 0;
            while (num11 > 0)
            {
              --num11;
              index4 += index3;
              Main.tile[index4, index6].type = (ushort) 191;
              Main.tile[index4, index6].active(true);
              Main.tile[index4, index6].halfBrick(false);
              if (num11 == 0)
              {
                numArray5[index2] = index4;
                numArray6[index2] = index6;
                flagArray[index2] = true;
                ++index2;
              }
              if (WorldGen.genRand.Next(5) == 0)
              {
                if (WorldGen.genRand.Next(2) == 0)
                  --index6;
                else
                  ++index6;
                Main.tile[index4, index6].type = (ushort) 191;
                Main.tile[index4, index6].active(true);
                Main.tile[index4, index6].halfBrick(false);
              }
              if (num12 > 0)
                --num12;
              else if (WorldGen.genRand.Next(3) == 0)
              {
                num12 = WorldGen.genRand.Next(2, 4);
                int index9 = index4;
                int num16 = index6;
                int index10 = WorldGen.genRand.Next(2) != 0 ? num16 + 1 : num16 - 1;
                Main.tile[index9, index10].type = (ushort) 191;
                Main.tile[index9, index10].active(true);
                Main.tile[index9, index10].halfBrick(false);
                numArray5[index2] = index9;
                numArray6[index2] = index10;
                flagArray[index2] = true;
                ++index2;
              }
            }
          }
        }
        numArray5[index2] = index7;
        numArray6[index2] = index8;
        ++index2;
        if (WorldGen.genRand.Next(4) == 0)
        {
          if (WorldGen.genRand.Next(2) == 0)
            --index7;
          else
            ++index7;
          Main.tile[index7, index8].type = (ushort) 191;
          Main.tile[index7, index8].active(true);
          Main.tile[index7, index8].halfBrick(false);
        }
        --index8;
      }
      for (int i1 = num7; i1 <= num8; ++i1)
      {
        int num11 = WorldGen.genRand.Next(1, 6);
        int j1 = j + 1;
        while (num11 > 0)
        {
          if (WorldGen.SolidTile(i1, j1))
            --num11;
          Main.tile[i1, j1].type = (ushort) 191;
          Main.tile[i1, j1].active(true);
          Main.tile[i1, j1].halfBrick(false);
          ++j1;
        }
        int num12 = j1;
        for (int index3 = 0; index3 < 2; ++index3)
        {
          int index4 = num12;
          int num16 = (num7 + num8) / 2;
          int num17 = 1;
          int num18 = i1 >= num16 ? 1 : -1;
          if (i1 == num16 || minValue > 6 && (i1 == num16 - 1 || i1 == num16 + 1))
            num18 = 0;
          int num19 = num18;
          int index6 = i1;
          int num20 = WorldGen.genRand.Next((int) ((double) minValue * 2.5), minValue * 4);
          while (num20 > 0)
          {
            --num20;
            index6 += num18;
            Main.tile[index6, index4].type = (ushort) 191;
            Main.tile[index6, index4].active(true);
            Main.tile[index6, index4].halfBrick(false);
            index4 += num17;
            Main.tile[index6, index4].type = (ushort) 191;
            Main.tile[index6, index4].active(true);
            Main.tile[index6, index4].halfBrick(false);
            if (!Main.tile[index6, index4 + 1].active())
            {
              num18 = 0;
              num17 = 1;
            }
            if (WorldGen.genRand.Next(3) == 0)
              num18 = num19 >= 0 ? (num19 <= 0 ? WorldGen.genRand.Next(-1, 2) : (num18 != 0 ? 0 : 1)) : (num18 != 0 ? 0 : -1);
            if (WorldGen.genRand.Next(3) == 0)
              num17 = num17 != 0 ? 0 : 1;
          }
        }
      }
      for (int index3 = 0; index3 < index2; ++index3)
      {
        int num11 = (int) ((double) WorldGen.genRand.Next(5, 8) * (1.0 + (double) minValue * 0.0500000007450581));
        if (flagArray[index3])
          num11 = WorldGen.genRand.Next(7, 13);
        int num12 = numArray5[index3] - num11;
        int num16 = numArray5[index3] + num11;
        int num17 = numArray6[index3] - num11;
        int num18 = numArray6[index3] + num11;
        float num19 = (float) (2.0 - (double) WorldGen.genRand.Next(5) * 0.100000001490116);
        for (int index4 = num12; index4 <= num16; ++index4)
        {
          for (int index6 = num17; index6 <= num18; ++index6)
          {
            if ((int) Main.tile[index4, index6].type != 191 && (double) Math.Abs(numArray5[index3] - index4) + (double) Math.Abs(numArray6[index3] - index6) * (double) num19 < (double) num11)
            {
              Main.tile[index4, index6].type = (ushort) 192;
              Main.tile[index4, index6].active(true);
              Main.tile[index4, index6].halfBrick(false);
            }
          }
        }
      }
      if (minValue >= 4 && WorldGen.genRand.Next(3) != 0)
      {
        bool flag2 = false;
        int num11 = num7;
        int num12 = num8;
        int j1 = j - 5;
        int num16 = 50;
        int num17 = WorldGen.genRand.Next(400, 700);
        int num18 = 1;
        bool flag3 = true;
        while (num17 > 0)
        {
          ++j1;
          --num17;
          --num16;
          int num19 = (num7 + num8) / 2;
          int num20 = 0;
          if (j1 > j && minValue == 4)
            num20 = 1;
          for (int index3 = num7 - num20; index3 <= num8 + num20; ++index3)
          {
            if (index3 > num19 - 2 && index3 <= num19 + 1)
            {
              if ((int) Main.tile[index3, j1].type != 19)
                Main.tile[index3, j1].active(false);
              Main.tile[index3, j1].wall = (byte) 78;
              if ((int) Main.tile[index3 - 1, j1].wall > 0 || (double) j1 >= Main.worldSurface)
                Main.tile[index3 - 1, j1].wall = (byte) 78;
              if ((int) Main.tile[index3 + 1, j1].wall > 0 || (double) j1 >= Main.worldSurface)
                Main.tile[index3 + 1, j1].wall = (byte) 78;
            }
            else
            {
              Main.tile[index3, j1].type = (ushort) 191;
              Main.tile[index3, j1].active(true);
              Main.tile[index3, j1].halfBrick(false);
            }
          }
          ++num18;
          if (num18 >= 6)
          {
            num18 = 0;
            int num21 = WorldGen.genRand.Next(3);
            if (num21 == 0)
              num21 = -1;
            if (flag3)
              num21 = 2;
            if (num21 == 2)
            {
              flag3 = false;
              for (int i1 = num7; i1 <= num8; ++i1)
              {
                if (i1 > num19 - 2 && i1 <= num19 + 1)
                {
                  Main.tile[i1, j1 + 1].active(false);
                  WorldGen.PlaceTile(i1, j1 + 1, 19, true, false, -1, 23);
                }
              }
            }
            else
            {
              num7 += num21;
              num8 += num21;
            }
            if (num16 <= 0 && !flag2)
            {
              flag2 = true;
              int num22 = WorldGen.genRand.Next(2);
              if (num22 == 0)
                num22 = -1;
              int num23 = j1 - 2;
              int num24 = j1;
              int num25 = (num7 + num8) / 2;
              if (num22 < 0)
                --num25;
              if (num22 > 0)
                ++num25;
              int num26 = WorldGen.genRand.Next(15, 30);
              int num27 = num25 + num26;
              if (num22 < 0)
              {
                num27 = num25;
                num25 -= num26;
              }
              WorldGen.dMinX = num25;
              WorldGen.dMaxX = num27;
              if (num22 < 0)
                WorldGen.dMinX -= 40;
              else
                WorldGen.dMaxX += 40;
              bool flag4 = false;
              for (int index3 = num25; index3 < num27; ++index3)
              {
                for (int index4 = j1 - 20; index4 < j1 + 10; ++index4)
                {
                  if ((int) Main.tile[index3, index4].wall == 0 && !Main.tile[index3, index4].active() && (double) index4 < Main.worldSurface)
                    flag4 = true;
                }
              }
              if (!flag4)
              {
                for (int index3 = num25; index3 <= num27; ++index3)
                {
                  for (int index4 = num23 - 2; index4 <= num24 + 2; ++index4)
                  {
                    if ((int) Main.tile[index3, index4].wall != 78 && (int) Main.tile[index3, index4].type != 19)
                    {
                      Main.tile[index3, index4].active(true);
                      Main.tile[index3, index4].type = (ushort) 191;
                      Main.tile[index3, index4].halfBrick(false);
                    }
                    if (index4 >= num23 && index4 <= num24)
                    {
                      Main.tile[index3, index4].liquid = (byte) 0;
                      Main.tile[index3, index4].wall = (byte) 78;
                      Main.tile[index3, index4].active(false);
                    }
                  }
                }
                int i1 = (num7 + num8) / 2 + 3 * num22;
                int j2 = j1;
                WorldGen.PlaceTile(i1, j2, 10, true, false, -1, 7);
                int num28 = WorldGen.genRand.Next(5, 9);
                int num29 = WorldGen.genRand.Next(4, 6);
                int num30;
                int num31;
                if (num22 < 0)
                {
                  num30 = num25 + num28;
                  num31 = num25 - num28;
                }
                else
                {
                  num31 = num27 - num28;
                  num30 = num27 + num28;
                }
                int num32 = num24 - num29;
                for (int index3 = num31 - 2; index3 <= num30 + 2; ++index3)
                {
                  for (int index4 = num32 - 2; index4 <= num24 + 2; ++index4)
                  {
                    if ((int) Main.tile[index3, index4].wall != 78 && (int) Main.tile[index3, index4].type != 19)
                    {
                      Main.tile[index3, index4].active(true);
                      Main.tile[index3, index4].type = (ushort) 191;
                      Main.tile[index3, index4].halfBrick(false);
                    }
                    if (index4 >= num32 && index4 <= num24 && (index3 >= num31 && index3 <= num30))
                    {
                      Main.tile[index3, index4].liquid = (byte) 0;
                      Main.tile[index3, index4].wall = (byte) 78;
                      Main.tile[index3, index4].active(false);
                    }
                  }
                }
                int i2 = num31 - 2;
                if (num22 < 0)
                  i2 = num30 + 2;
                WorldGen.PlaceTile(i2, j2, 10, true, false, -1, 7);
                int i3 = num30;
                if (num22 < 0)
                  i3 = num31;
                WorldGen.PlaceTile(i3, j1, 15, true, false, -1, 5);
                if (num22 < 0)
                {
                  Main.tile[i3, j1 - 1].frameX += (short) 18;
                  Main.tile[i3, j1].frameX += (short) 18;
                }
                int i4 = num30 - 2;
                if (num22 < 0)
                  i4 = num31 + 2;
                WorldGen.PlaceTile(i4, j1, 14, true, false, -1, 6);
                int i5 = num30 - 4;
                if (num22 < 0)
                  i5 = num31 + 4;
                WorldGen.PlaceTile(i5, j1, 15, true, false, -1, 5);
                if (num22 > 0)
                {
                  Main.tile[i5, j1 - 1].frameX += (short) 18;
                  Main.tile[i5, j1].frameX += (short) 18;
                }
                int i6 = num30 - 7;
                if (num22 < 0)
                  i6 = num31 + 8;
                WorldGen.genRand.Next(2);
                int contain = 832;
                WorldGen.AddBuriedChest(i6, j1, contain, false, 12);
              }
            }
          }
          if (num16 <= 0)
          {
            bool flag4 = true;
            for (int i1 = num7; i1 <= num8; ++i1)
            {
              for (int j2 = j1 + 1; j2 <= j1 + 4; ++j2)
              {
                if (WorldGen.SolidTile(i1, j2))
                  flag4 = false;
              }
            }
            if (flag4)
              num17 = 0;
          }
        }
        int num33 = num11;
        int num34 = num12;
        int num35 = (num33 + num34) / 2;
        if (WorldGen.genRand.Next(2) == 0)
          num34 = num35;
        else
          num33 = num35;
        for (int index3 = num33; index3 <= num34; ++index3)
        {
          for (int index4 = j - 3; index4 <= j; ++index4)
          {
            Main.tile[index3, index4].active(false);
            bool flag4 = true;
            for (int index6 = index3 - 1; index6 <= index3 + 1; ++index6)
            {
              for (int index9 = index4 - 1; index9 <= index4 + 1; ++index9)
              {
                if (!Main.tile[index6, index9].active() && (int) Main.tile[index6, index9].wall == 0)
                  flag4 = false;
              }
            }
            if (flag4)
              Main.tile[index3, index4].wall = (byte) 78;
          }
        }
      }
      return true;
    }

    public static void TreeGrowFXCheck(int x, int y)
    {
      int height = 1;
      int num1 = -1;
      Tile tile1 = (Tile) null;
      for (int index = -1; index > -100; --index)
      {
        Tile tile2 = Main.tile[x, y + index];
        if (tile2.active() && ((int) tile2.type == 5 || (int) tile2.type == 323 || (int) tile2.type == 72))
        {
          tile1 = tile2;
          ++height;
        }
        else
          break;
      }
      for (int index = 1; index < 5; ++index)
      {
        Tile tile2 = Main.tile[x, y + index];
        if (tile2.active() && ((int) tile2.type == 5 || (int) tile2.type == 323 || (int) tile2.type == 72))
        {
          ++height;
        }
        else
        {
          int num2 = 0;
          if ((int) tile1.frameX == 22)
          {
            if ((int) tile1.frameY == 220)
              num2 = 1;
            else if ((int) tile1.frameY == 242)
              num2 = 2;
          }
          ushort type = tile2.type;
          if ((uint) type <= 70U)
          {
            if ((uint) type <= 23U)
            {
              if ((int) type != 2)
              {
                if ((int) type != 23)
                  break;
              }
              else
              {
                num1 = 910;
                break;
              }
            }
            else
            {
              if ((int) type != 53)
              {
                if ((int) type != 60)
                {
                  if ((int) type == 70)
                  {
                    num1 = 912;
                    break;
                  }
                  break;
                }
                num1 = 914;
                break;
              }
              num1 = 911;
              break;
            }
          }
          else
          {
            if ((uint) type <= 147U)
            {
              if ((int) type != 109)
              {
                if ((int) type != 116)
                {
                  if ((int) type == 147)
                  {
                    num1 = 913;
                    break;
                  }
                  break;
                }
                num1 = 919;
                break;
              }
              if (x % 3 == 1)
                num2 += 3;
              if (x % 3 == 2)
                num2 += 6;
              int num3 = 917;
              switch (num2)
              {
                case 0:
                  num1 = 2;
                  break;
                case 1:
                  num1 = 1;
                  break;
                case 2:
                  num1 = 7;
                  break;
                case 3:
                  num1 = 4;
                  break;
                case 4:
                  num1 = 5;
                  break;
                case 5:
                  num1 = 6;
                  break;
                case 6:
                  num1 = 3;
                  break;
                case 7:
                  num1 = 8;
                  break;
                case 8:
                  num1 = 0;
                  break;
              }
              num1 += num3;
              height += 5;
              break;
            }
            if ((int) type != 199 && (int) type != 234)
            {
              if ((int) type != 400)
                break;
            }
            else
            {
              num1 = 916;
              break;
            }
          }
          num1 = 915;
          break;
        }
      }
      if (height <= 0 || num1 <= 0)
        return;
      if (Main.netMode == 2)
        NetMessage.SendData(112, -1, -1, (NetworkText) null, 1, (float) x, (float) y, (float) height, num1, 0, 0);
      if (Main.netMode != 0)
        return;
      WorldGen.TreeGrowFX(x, y, height, num1);
    }

    public static void TreeGrowFX(int x, int y, int height, int treeGore)
    {
      Vector2 vector2 = Vector2.op_Addition(Vector2.op_Multiply(new Vector2((float) x, (float) y), 16f), new Vector2(8f, 8f));
      int Type = treeGore;
      int num = 4;
      int maxValue = 2;
      for (int index1 = 0; index1 > -height; --index1)
      {
        if (index1 > -height / 2 && Main.rand.Next(3) != 0)
        {
          for (int index2 = 0; index2 < 5; ++index2)
            Dust.NewDust(Vector2.op_Addition(Vector2.op_Addition(vector2, new Vector2(-16f, (float) (index1 * 16))), Utils.RandomVector2(Main.rand, -20f, 20f)), 4, 4, num + Main.rand.Next(maxValue), 0.0f, -4f, 100, (Color) null, 1f);
        }
        else
        {
          float max = 10f;
          Gore.NewGore(Vector2.op_Addition(vector2, new Vector2(-16f, (float) (index1 * 16))), Utils.RandomVector2(Main.rand, -max, max), Type, (float) (0.699999988079071 + (double) Main.rand.NextFloat() * 0.600000023841858));
          Gore.NewGore(Vector2.op_Addition(vector2, new Vector2(0.0f, (float) (index1 * 16))), Utils.RandomVector2(Main.rand, -max, max), Type, (float) (0.699999988079071 + (double) Main.rand.NextFloat() * 0.600000023841858));
          Gore.NewGore(Vector2.op_Addition(vector2, new Vector2(16f, (float) (index1 * 16))), Utils.RandomVector2(Main.rand, -max, max), Type, (float) (0.699999988079071 + (double) Main.rand.NextFloat() * 0.600000023841858));
          if (index1 == -height + 1)
          {
            for (int index2 = 0; index2 < 20; ++index2)
              Gore.NewGore(Vector2.op_Addition(Vector2.op_Addition(vector2, new Vector2(0.0f, (float) (index1 * 16 - 40))), Utils.RandomVector2(Main.rand, -40f, 40f)), Utils.RandomVector2(Main.rand, -10f, 10f), Type, (float) (0.699999988079071 + (double) Main.rand.NextFloat() * 0.600000023841858));
          }
        }
      }
    }

    public static bool GrowTree(int i, int y)
    {
      int index1 = y;
      while ((int) Main.tile[i, index1].type == 20)
        ++index1;
      if (((int) Main.tile[i - 1, index1 - 1].liquid != 0 || (int) Main.tile[i, index1 - 1].liquid != 0 || (int) Main.tile[i + 1, index1 - 1].liquid != 0) && (int) Main.tile[i, index1].type != 60 || (!Main.tile[i, index1].nactive() || Main.tile[i, index1].halfBrick() || (int) Main.tile[i, index1].slope() != 0) || (int) Main.tile[i, index1].type != 2 && (int) Main.tile[i, index1].type != 23 && ((int) Main.tile[i, index1].type != 60 && (int) Main.tile[i, index1].type != 109) && ((int) Main.tile[i, index1].type != 147 && (int) Main.tile[i, index1].type != 199 && (int) Main.tile[i, index1].type != 70) || (int) Main.tile[i, index1 - 1].wall != 0 && (int) Main.tile[i, index1 - 1].wall != 106 && (int) Main.tile[i, index1 - 1].wall != 107 && (((int) Main.tile[i, index1 - 1].wall < 138 || (int) Main.tile[i, index1 - 1].wall > 141) && ((int) Main.tile[i, index1 - 1].wall != 145 && (int) Main.tile[i, index1 - 1].wall != 150)) && (int) Main.tile[i, index1 - 1].wall != 152 || (!Main.tile[i - 1, index1].active() || (int) Main.tile[i - 1, index1].type != 2 && (int) Main.tile[i - 1, index1].type != 23 && ((int) Main.tile[i - 1, index1].type != 60 && (int) Main.tile[i - 1, index1].type != 109) && ((int) Main.tile[i - 1, index1].type != 147 && (int) Main.tile[i - 1, index1].type != 199 && (int) Main.tile[i - 1, index1].type != 70)) && (!Main.tile[i + 1, index1].active() || (int) Main.tile[i + 1, index1].type != 2 && (int) Main.tile[i + 1, index1].type != 23 && ((int) Main.tile[i + 1, index1].type != 60 && (int) Main.tile[i + 1, index1].type != 109) && ((int) Main.tile[i + 1, index1].type != 147 && (int) Main.tile[i + 1, index1].type != 199 && (int) Main.tile[i + 1, index1].type != 70)))
        return false;
      int num1 = 2;
      int num2 = 16;
      if ((int) Main.tile[i, index1].type == 60)
        num2 += 5;
      if (!WorldGen.EmptyTileCheck(i - num1, i + num1, index1 - num2, index1 - 1, 20))
        return false;
      bool flag1 = false;
      bool flag2 = false;
      int num3 = WorldGen.genRand.Next(5, num2 + 1);
      for (int index2 = index1 - num3; index2 < index1; ++index2)
      {
        Main.tile[i, index2].frameNumber((byte) WorldGen.genRand.Next(3));
        Main.tile[i, index2].active(true);
        Main.tile[i, index2].type = (ushort) 5;
        int num4 = WorldGen.genRand.Next(3);
        int num5 = WorldGen.genRand.Next(10);
        if (index2 == index1 - 1 || index2 == index1 - num3)
          num5 = 0;
        while (((num5 == 5 ? 1 : (num5 == 7 ? 1 : 0)) & (flag1 ? 1 : 0)) != 0 || ((num5 == 6 ? 1 : (num5 == 7 ? 1 : 0)) & (flag2 ? 1 : 0)) != 0)
          num5 = WorldGen.genRand.Next(10);
        flag1 = false;
        flag2 = false;
        if (num5 == 5 || num5 == 7)
          flag1 = true;
        if (num5 == 6 || num5 == 7)
          flag2 = true;
        if (num5 == 1)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 66;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 88;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 110;
          }
        }
        else if (num5 == 2)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 0;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 22;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 44;
          }
        }
        else if (num5 == 3)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 44;
            Main.tile[i, index2].frameY = (short) 66;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 44;
            Main.tile[i, index2].frameY = (short) 88;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 44;
            Main.tile[i, index2].frameY = (short) 110;
          }
        }
        else if (num5 == 4)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 66;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 88;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 110;
          }
        }
        else if (num5 == 5)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 88;
            Main.tile[i, index2].frameY = (short) 0;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 88;
            Main.tile[i, index2].frameY = (short) 22;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 88;
            Main.tile[i, index2].frameY = (short) 44;
          }
        }
        else if (num5 == 6)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 66;
            Main.tile[i, index2].frameY = (short) 66;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 66;
            Main.tile[i, index2].frameY = (short) 88;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 66;
            Main.tile[i, index2].frameY = (short) 110;
          }
        }
        else if (num5 == 7)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 110;
            Main.tile[i, index2].frameY = (short) 66;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 110;
            Main.tile[i, index2].frameY = (short) 88;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 110;
            Main.tile[i, index2].frameY = (short) 110;
          }
        }
        else
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 0;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 22;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 44;
          }
        }
        if (num5 == 5 || num5 == 7)
        {
          Main.tile[i - 1, index2].active(true);
          Main.tile[i - 1, index2].type = (ushort) 5;
          int num6 = WorldGen.genRand.Next(3);
          if (WorldGen.genRand.Next(3) < 2)
          {
            if (num6 == 0)
            {
              Main.tile[i - 1, index2].frameX = (short) 44;
              Main.tile[i - 1, index2].frameY = (short) 198;
            }
            if (num6 == 1)
            {
              Main.tile[i - 1, index2].frameX = (short) 44;
              Main.tile[i - 1, index2].frameY = (short) 220;
            }
            if (num6 == 2)
            {
              Main.tile[i - 1, index2].frameX = (short) 44;
              Main.tile[i - 1, index2].frameY = (short) 242;
            }
          }
          else
          {
            if (num6 == 0)
            {
              Main.tile[i - 1, index2].frameX = (short) 66;
              Main.tile[i - 1, index2].frameY = (short) 0;
            }
            if (num6 == 1)
            {
              Main.tile[i - 1, index2].frameX = (short) 66;
              Main.tile[i - 1, index2].frameY = (short) 22;
            }
            if (num6 == 2)
            {
              Main.tile[i - 1, index2].frameX = (short) 66;
              Main.tile[i - 1, index2].frameY = (short) 44;
            }
          }
        }
        if (num5 == 6 || num5 == 7)
        {
          Main.tile[i + 1, index2].active(true);
          Main.tile[i + 1, index2].type = (ushort) 5;
          int num6 = WorldGen.genRand.Next(3);
          if (WorldGen.genRand.Next(3) < 2)
          {
            if (num6 == 0)
            {
              Main.tile[i + 1, index2].frameX = (short) 66;
              Main.tile[i + 1, index2].frameY = (short) 198;
            }
            if (num6 == 1)
            {
              Main.tile[i + 1, index2].frameX = (short) 66;
              Main.tile[i + 1, index2].frameY = (short) 220;
            }
            if (num6 == 2)
            {
              Main.tile[i + 1, index2].frameX = (short) 66;
              Main.tile[i + 1, index2].frameY = (short) 242;
            }
          }
          else
          {
            if (num6 == 0)
            {
              Main.tile[i + 1, index2].frameX = (short) 88;
              Main.tile[i + 1, index2].frameY = (short) 66;
            }
            if (num6 == 1)
            {
              Main.tile[i + 1, index2].frameX = (short) 88;
              Main.tile[i + 1, index2].frameY = (short) 88;
            }
            if (num6 == 2)
            {
              Main.tile[i + 1, index2].frameX = (short) 88;
              Main.tile[i + 1, index2].frameY = (short) 110;
            }
          }
        }
      }
      int num7 = WorldGen.genRand.Next(3);
      bool flag3 = false;
      bool flag4 = false;
      if (Main.tile[i - 1, index1].nactive() && !Main.tile[i - 1, index1].halfBrick() && (int) Main.tile[i - 1, index1].slope() == 0 && ((int) Main.tile[i - 1, index1].type == 2 || (int) Main.tile[i - 1, index1].type == 23 || ((int) Main.tile[i - 1, index1].type == 60 || (int) Main.tile[i - 1, index1].type == 109) || ((int) Main.tile[i - 1, index1].type == 147 || (int) Main.tile[i - 1, index1].type == 199)))
        flag3 = true;
      if (Main.tile[i + 1, index1].nactive() && !Main.tile[i + 1, index1].halfBrick() && (int) Main.tile[i + 1, index1].slope() == 0 && ((int) Main.tile[i + 1, index1].type == 2 || (int) Main.tile[i + 1, index1].type == 23 || ((int) Main.tile[i + 1, index1].type == 60 || (int) Main.tile[i + 1, index1].type == 109) || ((int) Main.tile[i + 1, index1].type == 147 || (int) Main.tile[i + 1, index1].type == 199)))
        flag4 = true;
      if (!flag3)
      {
        if (num7 == 0)
          num7 = 2;
        if (num7 == 1)
          num7 = 3;
      }
      if (!flag4)
      {
        if (num7 == 0)
          num7 = 1;
        if (num7 == 2)
          num7 = 3;
      }
      if (flag3 && !flag4)
        num7 = 2;
      if (flag4 && !flag3)
        num7 = 1;
      if (num7 == 0 || num7 == 1)
      {
        Main.tile[i + 1, index1 - 1].active(true);
        Main.tile[i + 1, index1 - 1].type = (ushort) 5;
        int num4 = WorldGen.genRand.Next(3);
        if (num4 == 0)
        {
          Main.tile[i + 1, index1 - 1].frameX = (short) 22;
          Main.tile[i + 1, index1 - 1].frameY = (short) 132;
        }
        if (num4 == 1)
        {
          Main.tile[i + 1, index1 - 1].frameX = (short) 22;
          Main.tile[i + 1, index1 - 1].frameY = (short) 154;
        }
        if (num4 == 2)
        {
          Main.tile[i + 1, index1 - 1].frameX = (short) 22;
          Main.tile[i + 1, index1 - 1].frameY = (short) 176;
        }
      }
      if (num7 == 0 || num7 == 2)
      {
        Main.tile[i - 1, index1 - 1].active(true);
        Main.tile[i - 1, index1 - 1].type = (ushort) 5;
        int num4 = WorldGen.genRand.Next(3);
        if (num4 == 0)
        {
          Main.tile[i - 1, index1 - 1].frameX = (short) 44;
          Main.tile[i - 1, index1 - 1].frameY = (short) 132;
        }
        if (num4 == 1)
        {
          Main.tile[i - 1, index1 - 1].frameX = (short) 44;
          Main.tile[i - 1, index1 - 1].frameY = (short) 154;
        }
        if (num4 == 2)
        {
          Main.tile[i - 1, index1 - 1].frameX = (short) 44;
          Main.tile[i - 1, index1 - 1].frameY = (short) 176;
        }
      }
      int num8 = WorldGen.genRand.Next(3);
      if (num7 == 0)
      {
        if (num8 == 0)
        {
          Main.tile[i, index1 - 1].frameX = (short) 88;
          Main.tile[i, index1 - 1].frameY = (short) 132;
        }
        if (num8 == 1)
        {
          Main.tile[i, index1 - 1].frameX = (short) 88;
          Main.tile[i, index1 - 1].frameY = (short) 154;
        }
        if (num8 == 2)
        {
          Main.tile[i, index1 - 1].frameX = (short) 88;
          Main.tile[i, index1 - 1].frameY = (short) 176;
        }
      }
      else if (num7 == 1)
      {
        if (num8 == 0)
        {
          Main.tile[i, index1 - 1].frameX = (short) 0;
          Main.tile[i, index1 - 1].frameY = (short) 132;
        }
        if (num8 == 1)
        {
          Main.tile[i, index1 - 1].frameX = (short) 0;
          Main.tile[i, index1 - 1].frameY = (short) 154;
        }
        if (num8 == 2)
        {
          Main.tile[i, index1 - 1].frameX = (short) 0;
          Main.tile[i, index1 - 1].frameY = (short) 176;
        }
      }
      else if (num7 == 2)
      {
        if (num8 == 0)
        {
          Main.tile[i, index1 - 1].frameX = (short) 66;
          Main.tile[i, index1 - 1].frameY = (short) 132;
        }
        if (num8 == 1)
        {
          Main.tile[i, index1 - 1].frameX = (short) 66;
          Main.tile[i, index1 - 1].frameY = (short) 154;
        }
        if (num8 == 2)
        {
          Main.tile[i, index1 - 1].frameX = (short) 66;
          Main.tile[i, index1 - 1].frameY = (short) 176;
        }
      }
      if (WorldGen.genRand.Next(8) != 0)
      {
        int num4 = WorldGen.genRand.Next(3);
        if (num4 == 0)
        {
          Main.tile[i, index1 - num3].frameX = (short) 22;
          Main.tile[i, index1 - num3].frameY = (short) 198;
        }
        if (num4 == 1)
        {
          Main.tile[i, index1 - num3].frameX = (short) 22;
          Main.tile[i, index1 - num3].frameY = (short) 220;
        }
        if (num4 == 2)
        {
          Main.tile[i, index1 - num3].frameX = (short) 22;
          Main.tile[i, index1 - num3].frameY = (short) 242;
        }
      }
      else
      {
        int num4 = WorldGen.genRand.Next(3);
        if (num4 == 0)
        {
          Main.tile[i, index1 - num3].frameX = (short) 0;
          Main.tile[i, index1 - num3].frameY = (short) 198;
        }
        if (num4 == 1)
        {
          Main.tile[i, index1 - num3].frameX = (short) 0;
          Main.tile[i, index1 - num3].frameY = (short) 220;
        }
        if (num4 == 2)
        {
          Main.tile[i, index1 - num3].frameX = (short) 0;
          Main.tile[i, index1 - num3].frameY = (short) 242;
        }
      }
      WorldGen.RangeFrame(i - 2, index1 - num3 - 1, i + 2, index1 + 1);
      if (Main.netMode == 2)
        NetMessage.SendTileSquare(-1, i, (int) ((double) index1 - (double) num3 * 0.5), num3 + 1, TileChangeType.None);
      return true;
    }

    public static void GrowUndergroundTree(int i, int y)
    {
      int index1 = y;
      if ((int) Main.tile[i, index1].type != 60 || !Main.tile[i, index1].nactive() || (Main.tile[i, index1].halfBrick() || (int) Main.tile[i, index1].slope() != 0) || (int) Main.tile[i, index1].type != 60 || (!Main.tile[i - 1, index1].active() || (int) Main.tile[i - 1, index1].type != 60) && (!Main.tile[i + 1, index1].active() || (int) Main.tile[i + 1, index1].type != 60))
        return;
      int num1 = 1;
      int num2 = WorldGen.genRand.Next(5, 15);
      int num3 = num2 + 2;
      if ((int) Main.tile[i, index1].type == 60)
        num3 += 5;
      if (!WorldGen.EmptyTileCheck(i - num1, i + num1, index1 - num3, index1 - 1, 20))
        return;
      bool flag1 = false;
      bool flag2 = false;
      for (int index2 = index1 - num2; index2 < index1; ++index2)
      {
        Main.tile[i, index2].frameNumber((byte) WorldGen.genRand.Next(3));
        Main.tile[i, index2].active(true);
        Main.tile[i, index2].type = (ushort) 5;
        int num4 = WorldGen.genRand.Next(3);
        int num5 = WorldGen.genRand.Next(10);
        if (index2 == index1 - 1 || index2 == index1 - num2)
          num5 = 0;
        while (((num5 == 5 ? 1 : (num5 == 7 ? 1 : 0)) & (flag1 ? 1 : 0)) != 0 || ((num5 == 6 ? 1 : (num5 == 7 ? 1 : 0)) & (flag2 ? 1 : 0)) != 0)
          num5 = WorldGen.genRand.Next(10);
        flag1 = false;
        flag2 = false;
        if (num5 == 5 || num5 == 7)
          flag1 = true;
        if (num5 == 6 || num5 == 7)
          flag2 = true;
        if (num5 == 1)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 66;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 88;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 110;
          }
        }
        else if (num5 == 2)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 0;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 22;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 44;
          }
        }
        else if (num5 == 3)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 44;
            Main.tile[i, index2].frameY = (short) 66;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 44;
            Main.tile[i, index2].frameY = (short) 88;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 44;
            Main.tile[i, index2].frameY = (short) 110;
          }
        }
        else if (num5 == 4)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 66;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 88;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 22;
            Main.tile[i, index2].frameY = (short) 110;
          }
        }
        else if (num5 == 5)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 88;
            Main.tile[i, index2].frameY = (short) 0;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 88;
            Main.tile[i, index2].frameY = (short) 22;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 88;
            Main.tile[i, index2].frameY = (short) 44;
          }
        }
        else if (num5 == 6)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 66;
            Main.tile[i, index2].frameY = (short) 66;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 66;
            Main.tile[i, index2].frameY = (short) 88;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 66;
            Main.tile[i, index2].frameY = (short) 110;
          }
        }
        else if (num5 == 7)
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 110;
            Main.tile[i, index2].frameY = (short) 66;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 110;
            Main.tile[i, index2].frameY = (short) 88;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 110;
            Main.tile[i, index2].frameY = (short) 110;
          }
        }
        else
        {
          if (num4 == 0)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 0;
          }
          if (num4 == 1)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 22;
          }
          if (num4 == 2)
          {
            Main.tile[i, index2].frameX = (short) 0;
            Main.tile[i, index2].frameY = (short) 44;
          }
        }
        if (num5 == 5 || num5 == 7)
        {
          Main.tile[i - 1, index2].active(true);
          Main.tile[i - 1, index2].type = (ushort) 5;
          int num6 = WorldGen.genRand.Next(3);
          if (WorldGen.genRand.Next(3) < 2)
          {
            if (num6 == 0)
            {
              Main.tile[i - 1, index2].frameX = (short) 44;
              Main.tile[i - 1, index2].frameY = (short) 198;
            }
            if (num6 == 1)
            {
              Main.tile[i - 1, index2].frameX = (short) 44;
              Main.tile[i - 1, index2].frameY = (short) 220;
            }
            if (num6 == 2)
            {
              Main.tile[i - 1, index2].frameX = (short) 44;
              Main.tile[i - 1, index2].frameY = (short) 242;
            }
          }
          else
          {
            if (num6 == 0)
            {
              Main.tile[i - 1, index2].frameX = (short) 66;
              Main.tile[i - 1, index2].frameY = (short) 0;
            }
            if (num6 == 1)
            {
              Main.tile[i - 1, index2].frameX = (short) 66;
              Main.tile[i - 1, index2].frameY = (short) 22;
            }
            if (num6 == 2)
            {
              Main.tile[i - 1, index2].frameX = (short) 66;
              Main.tile[i - 1, index2].frameY = (short) 44;
            }
          }
        }
        if (num5 == 6 || num5 == 7)
        {
          Main.tile[i + 1, index2].active(true);
          Main.tile[i + 1, index2].type = (ushort) 5;
          int num6 = WorldGen.genRand.Next(3);
          if (WorldGen.genRand.Next(3) < 2)
          {
            if (num6 == 0)
            {
              Main.tile[i + 1, index2].frameX = (short) 66;
              Main.tile[i + 1, index2].frameY = (short) 198;
            }
            if (num6 == 1)
            {
              Main.tile[i + 1, index2].frameX = (short) 66;
              Main.tile[i + 1, index2].frameY = (short) 220;
            }
            if (num6 == 2)
            {
              Main.tile[i + 1, index2].frameX = (short) 66;
              Main.tile[i + 1, index2].frameY = (short) 242;
            }
          }
          else
          {
            if (num6 == 0)
            {
              Main.tile[i + 1, index2].frameX = (short) 88;
              Main.tile[i + 1, index2].frameY = (short) 66;
            }
            if (num6 == 1)
            {
              Main.tile[i + 1, index2].frameX = (short) 88;
              Main.tile[i + 1, index2].frameY = (short) 88;
            }
            if (num6 == 2)
            {
              Main.tile[i + 1, index2].frameX = (short) 88;
              Main.tile[i + 1, index2].frameY = (short) 110;
            }
          }
        }
      }
      int num7 = WorldGen.genRand.Next(3);
      bool flag3 = false;
      bool flag4 = false;
      if (Main.tile[i - 1, index1].nactive() && !Main.tile[i - 1, index1].halfBrick() && (int) Main.tile[i - 1, index1].slope() == 0 && ((int) Main.tile[i - 1, index1].type == 2 || (int) Main.tile[i - 1, index1].type == 23 || ((int) Main.tile[i - 1, index1].type == 60 || (int) Main.tile[i - 1, index1].type == 109) || (int) Main.tile[i - 1, index1].type == 147))
        flag3 = true;
      if (Main.tile[i + 1, index1].nactive() && !Main.tile[i + 1, index1].halfBrick() && (int) Main.tile[i + 1, index1].slope() == 0 && ((int) Main.tile[i + 1, index1].type == 2 || (int) Main.tile[i + 1, index1].type == 23 || ((int) Main.tile[i + 1, index1].type == 60 || (int) Main.tile[i + 1, index1].type == 109) || (int) Main.tile[i + 1, index1].type == 147))
        flag4 = true;
      if (!flag3)
      {
        if (num7 == 0)
          num7 = 2;
        if (num7 == 1)
          num7 = 3;
      }
      if (!flag4)
      {
        if (num7 == 0)
          num7 = 1;
        if (num7 == 2)
          num7 = 3;
      }
      if (flag3 && !flag4)
        num7 = 2;
      if (flag4 && !flag3)
        num7 = 1;
      if (num7 == 0 || num7 == 1)
      {
        Main.tile[i + 1, index1 - 1].active(true);
        Main.tile[i + 1, index1 - 1].type = (ushort) 5;
        int num4 = WorldGen.genRand.Next(3);
        if (num4 == 0)
        {
          Main.tile[i + 1, index1 - 1].frameX = (short) 22;
          Main.tile[i + 1, index1 - 1].frameY = (short) 132;
        }
        if (num4 == 1)
        {
          Main.tile[i + 1, index1 - 1].frameX = (short) 22;
          Main.tile[i + 1, index1 - 1].frameY = (short) 154;
        }
        if (num4 == 2)
        {
          Main.tile[i + 1, index1 - 1].frameX = (short) 22;
          Main.tile[i + 1, index1 - 1].frameY = (short) 176;
        }
      }
      if (num7 == 0 || num7 == 2)
      {
        Main.tile[i - 1, index1 - 1].active(true);
        Main.tile[i - 1, index1 - 1].type = (ushort) 5;
        int num4 = WorldGen.genRand.Next(3);
        if (num4 == 0)
        {
          Main.tile[i - 1, index1 - 1].frameX = (short) 44;
          Main.tile[i - 1, index1 - 1].frameY = (short) 132;
        }
        if (num4 == 1)
        {
          Main.tile[i - 1, index1 - 1].frameX = (short) 44;
          Main.tile[i - 1, index1 - 1].frameY = (short) 154;
        }
        if (num4 == 2)
        {
          Main.tile[i - 1, index1 - 1].frameX = (short) 44;
          Main.tile[i - 1, index1 - 1].frameY = (short) 176;
        }
      }
      int num8 = WorldGen.genRand.Next(3);
      if (num7 == 0)
      {
        if (num8 == 0)
        {
          Main.tile[i, index1 - 1].frameX = (short) 88;
          Main.tile[i, index1 - 1].frameY = (short) 132;
        }
        if (num8 == 1)
        {
          Main.tile[i, index1 - 1].frameX = (short) 88;
          Main.tile[i, index1 - 1].frameY = (short) 154;
        }
        if (num8 == 2)
        {
          Main.tile[i, index1 - 1].frameX = (short) 88;
          Main.tile[i, index1 - 1].frameY = (short) 176;
        }
      }
      else if (num7 == 1)
      {
        if (num8 == 0)
        {
          Main.tile[i, index1 - 1].frameX = (short) 0;
          Main.tile[i, index1 - 1].frameY = (short) 132;
        }
        if (num8 == 1)
        {
          Main.tile[i, index1 - 1].frameX = (short) 0;
          Main.tile[i, index1 - 1].frameY = (short) 154;
        }
        if (num8 == 2)
        {
          Main.tile[i, index1 - 1].frameX = (short) 0;
          Main.tile[i, index1 - 1].frameY = (short) 176;
        }
      }
      else if (num7 == 2)
      {
        if (num8 == 0)
        {
          Main.tile[i, index1 - 1].frameX = (short) 66;
          Main.tile[i, index1 - 1].frameY = (short) 132;
        }
        if (num8 == 1)
        {
          Main.tile[i, index1 - 1].frameX = (short) 66;
          Main.tile[i, index1 - 1].frameY = (short) 154;
        }
        if (num8 == 2)
        {
          Main.tile[i, index1 - 1].frameX = (short) 66;
          Main.tile[i, index1 - 1].frameY = (short) 176;
        }
      }
      if (WorldGen.genRand.Next(8) != 0)
      {
        int num4 = WorldGen.genRand.Next(3);
        if (num4 == 0)
        {
          Main.tile[i, index1 - num2].frameX = (short) 22;
          Main.tile[i, index1 - num2].frameY = (short) 198;
        }
        if (num4 == 1)
        {
          Main.tile[i, index1 - num2].frameX = (short) 22;
          Main.tile[i, index1 - num2].frameY = (short) 220;
        }
        if (num4 == 2)
        {
          Main.tile[i, index1 - num2].frameX = (short) 22;
          Main.tile[i, index1 - num2].frameY = (short) 242;
        }
      }
      else
      {
        int num4 = WorldGen.genRand.Next(3);
        if (num4 == 0)
        {
          Main.tile[i, index1 - num2].frameX = (short) 0;
          Main.tile[i, index1 - num2].frameY = (short) 198;
        }
        if (num4 == 1)
        {
          Main.tile[i, index1 - num2].frameX = (short) 0;
          Main.tile[i, index1 - num2].frameY = (short) 220;
        }
        if (num4 == 2)
        {
          Main.tile[i, index1 - num2].frameX = (short) 0;
          Main.tile[i, index1 - num2].frameY = (short) 242;
        }
      }
      WorldGen.RangeFrame(i - 2, index1 - num2 - 1, i + 2, index1 + 1);
      if (Main.netMode != 2)
        return;
      NetMessage.SendTileSquare(-1, i, (int) ((double) index1 - (double) num2 * 0.5), num2 + 1, TileChangeType.None);
    }

    public static bool GrowShroom(int i, int y)
    {
      int index1 = y;
      if (Main.tile[i - 1, index1 - 1].lava() || Main.tile[i - 1, index1 - 1].lava() || (Main.tile[i + 1, index1 - 1].lava() || !Main.tile[i, index1].nactive()) || (Main.tile[i, index1].halfBrick() || (int) Main.tile[i, index1].slope() != 0 || ((int) Main.tile[i, index1].type != 70 || (int) Main.tile[i, index1 - 1].wall != 0)) || (!Main.tile[i - 1, index1].active() || (int) Main.tile[i - 1, index1].type != 70 || (!Main.tile[i + 1, index1].active() || (int) Main.tile[i + 1, index1].type != 70) || !WorldGen.EmptyTileCheck(i - 2, i + 2, index1 - 13, index1 - 1, 71)))
        return false;
      int num1 = WorldGen.genRand.Next(4, 11);
      for (int index2 = index1 - num1; index2 < index1; ++index2)
      {
        Main.tile[i, index2].frameNumber((byte) WorldGen.genRand.Next(3));
        Main.tile[i, index2].active(true);
        Main.tile[i, index2].type = (ushort) 72;
        int num2 = WorldGen.genRand.Next(3);
        if (num2 == 0)
        {
          Main.tile[i, index2].frameX = (short) 0;
          Main.tile[i, index2].frameY = (short) 0;
        }
        int num3 = 1;
        if (num2 == num3)
        {
          Main.tile[i, index2].frameX = (short) 0;
          Main.tile[i, index2].frameY = (short) 18;
        }
        int num4 = 2;
        if (num2 == num4)
        {
          Main.tile[i, index2].frameX = (short) 0;
          Main.tile[i, index2].frameY = (short) 36;
        }
      }
      int num5 = WorldGen.genRand.Next(3);
      if (num5 == 0)
      {
        Main.tile[i, index1 - num1].frameX = (short) 36;
        Main.tile[i, index1 - num1].frameY = (short) 0;
      }
      int num6 = 1;
      if (num5 == num6)
      {
        Main.tile[i, index1 - num1].frameX = (short) 36;
        Main.tile[i, index1 - num1].frameY = (short) 18;
      }
      int num7 = 2;
      if (num5 == num7)
      {
        Main.tile[i, index1 - num1].frameX = (short) 36;
        Main.tile[i, index1 - num1].frameY = (short) 36;
      }
      WorldGen.RangeFrame(i - 2, index1 - num1 - 1, i + 2, index1 + 1);
      if (Main.netMode == 2)
        NetMessage.SendTileSquare(-1, i, (int) ((double) index1 - (double) num1 * 0.5), num1 + 1, TileChangeType.None);
      return true;
    }

    public static void AddTrees()
    {
      for (int i = 1; i < Main.maxTilesX - 1; ++i)
      {
        for (int y = 20; (double) y < Main.worldSurface; ++y)
        {
          WorldGen.GrowTree(i, y);
          if ((i < 380 || i > Main.maxTilesX - 380) && WorldGen.genRand.Next(3) == 0)
            WorldGen.GrowPalmTree(i, y);
        }
        if (WorldGen.genRand.Next(3) == 0)
          ++i;
        if (WorldGen.genRand.Next(4) == 0)
          ++i;
      }
    }

    public static void ExplodeMine(int i, int j)
    {
      int type = (int) Main.tile[i, j].type;
      WorldGen.KillTile(i, j, false, false, true);
      NetMessage.SendTileSquare(-1, i, j, 1, TileChangeType.None);
      Projectile.NewProjectile((float) (i * 16 + 8), (float) (j * 16 + 8), 0.0f, 0.0f, 164, 250, 10f, Main.myPlayer, 0.0f, 0.0f);
    }

    public static bool EmptyTileCheck(int startX, int endX, int startY, int endY, int ignoreID = -1)
    {
      if (startX < 0 || endX >= Main.maxTilesX || (startY < 0 || endY >= Main.maxTilesY))
        return false;
      for (int index1 = startX; index1 < endX + 1; ++index1)
      {
        for (int index2 = startY; index2 < endY + 1; ++index2)
        {
          if (Main.tile[index1, index2].active())
          {
            if (ignoreID == -1)
              return false;
            if (ignoreID == 11)
            {
              if ((int) Main.tile[index1, index2].type != 11)
                return false;
            }
            else if (ignoreID == 71)
            {
              if ((int) Main.tile[index1, index2].type != 71)
                return false;
            }
            else if (ignoreID == 20)
            {
              ushort type = Main.tile[index1, index2].type;
              if ((uint) type <= 74U)
              {
                if ((uint) type <= 24U)
                {
                  if ((int) type == 3 || (int) type == 20 || (int) type == 24)
                    continue;
                }
                else if ((int) type != 32 && (uint) type - 61U > 1U)
                {
                  switch (type)
                  {
                    case 69:
                    case 71:
                    case 73:
                    case 74:
                      continue;
                  }
                }
                else
                  continue;
              }
              else if ((uint) type <= 113U)
              {
                if ((uint) type - 82U <= 2U || (int) type == 110 || (int) type == 113)
                  continue;
              }
              else if ((int) type == 201 || (int) type == 233 || (int) type == 352)
                continue;
              return false;
            }
          }
        }
      }
      return true;
    }

    public static void StartHardmode()
    {
      if (Main.netMode == 1 || Main.hardMode)
        return;
      Main.hardMode = true;
      Main.InitLifeBytes();
      ThreadPool.QueueUserWorkItem(new WaitCallback(WorldGen.smCallBack), (object) 1);
    }

    public static void smCallBack(object threadContext)
    {
      WorldGen.IsGeneratingHardMode = true;
      if (Main.rand == null)
        Main.rand = new UnifiedRandom((int) DateTime.Now.Ticks);
      float num1 = (float) WorldGen.genRand.Next(300, 400) * (1f / 1000f);
      float num2 = (float) WorldGen.genRand.Next(200, 300) * (1f / 1000f);
      int i1 = (int) ((double) Main.maxTilesX * (double) num1);
      int i2 = (int) ((double) Main.maxTilesX * (1.0 - (double) num1));
      int num3 = 1;
      if (WorldGen.genRand.Next(2) == 0)
      {
        i2 = (int) ((double) Main.maxTilesX * (double) num1);
        i1 = (int) ((double) Main.maxTilesX * (1.0 - (double) num1));
        num3 = -1;
      }
      int num4 = 1;
      if (WorldGen.dungeonX < Main.maxTilesX / 2)
        num4 = -1;
      if (num4 < 0)
      {
        if (i2 < i1)
          i2 = (int) ((double) Main.maxTilesX * (double) num2);
        else
          i1 = (int) ((double) Main.maxTilesX * (double) num2);
      }
      else if (i2 > i1)
        i2 = (int) ((double) Main.maxTilesX * (1.0 - (double) num2));
      else
        i1 = (int) ((double) Main.maxTilesX * (1.0 - (double) num2));
      WorldGen.GERunner(i1, 0, (float) (3 * num3), 5f, true);
      WorldGen.GERunner(i2, 0, (float) (3 * -num3), 5f, false);
      int num5 = (int) (25.0 * (double) ((float) Main.maxTilesX / 4200f));
      ShapeData data = new ShapeData();
      int num6 = 0;
      while (num5 > 0)
      {
        if (++num6 % 15000 == 0)
          --num5;
        Point point = WorldGen.RandomWorldPoint((int) Main.worldSurface - 100, 1, 190, 1);
        Tile tile1 = Main.tile[(int) point.X, (int) point.Y];
        Tile tile2 = Main.tile[(int) point.X, point.Y - 1];
        byte type = 0;
        if (TileID.Sets.Crimson[(int) tile1.type])
          type = (byte) (192 + WorldGen.genRand.Next(4));
        else if (TileID.Sets.Corrupt[(int) tile1.type])
          type = (byte) (188 + WorldGen.genRand.Next(4));
        else if (TileID.Sets.Hallow[(int) tile1.type])
          type = (byte) (200 + WorldGen.genRand.Next(4));
        if (tile1.active() && (int) type != 0 && !tile2.active())
        {
          bool flag = WorldUtils.Gen(new Point((int) point.X, point.Y - 1), (GenShape) new ShapeFloodFill(1000), Actions.Chain((GenAction) new Modifiers.IsNotSolid(), (GenAction) new Modifiers.OnlyWalls(new byte[30]
          {
            (byte) 0,
            (byte) 54,
            (byte) 55,
            (byte) 56,
            (byte) 57,
            (byte) 58,
            (byte) 59,
            (byte) 61,
            (byte) 185,
            (byte) 212,
            (byte) 213,
            (byte) 214,
            (byte) 215,
            (byte) 196,
            (byte) 197,
            (byte) 198,
            (byte) 199,
            (byte) 15,
            (byte) 40,
            (byte) 71,
            (byte) 64,
            (byte) 204,
            (byte) 205,
            (byte) 206,
            (byte) 207,
            (byte) 208,
            (byte) 209,
            (byte) 210,
            (byte) 211,
            (byte) 71
          }), new Actions.Blank().Output(data)));
          if (data.Count > 50 & flag)
          {
            WorldUtils.Gen(new Point((int) point.X, (int) point.Y), (GenShape) new ModShapes.OuterOutline(data, true, true), (GenAction) new Actions.PlaceWall(type, true));
            --num5;
          }
          data.Clear();
        }
      }
      if (Main.netMode == 0)
        Main.NewText(Lang.misc[15].Value, (byte) 50, byte.MaxValue, (byte) 130, false);
      else if (Main.netMode == 2)
        NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[15].Key), new Color(50, (int) byte.MaxValue, 130), -1);
      AchievementsHelper.NotifyProgressionEvent(9);
      if (Main.netMode == 2)
        Netplay.ResetSections();
      WorldGen.IsGeneratingHardMode = false;
    }

    public static bool PlaceDoor(int i, int j, int type, int style = 0)
    {
      int num = 54 * style;
      try
      {
        if (!Main.tile[i, j - 2].nactive() || !Main.tileSolid[(int) Main.tile[i, j - 2].type] || !WorldGen.SolidTile(i, j + 2))
          return false;
        Main.tile[i, j - 1].active(true);
        Main.tile[i, j - 1].type = (ushort) 10;
        Main.tile[i, j - 1].frameY = (short) num;
        Main.tile[i, j - 1].frameX = (short) (WorldGen.genRand.Next(3) * 18);
        Main.tile[i, j].active(true);
        Main.tile[i, j].type = (ushort) 10;
        Main.tile[i, j].frameY = (short) (num + 18);
        Main.tile[i, j].frameX = (short) (WorldGen.genRand.Next(3) * 18);
        Main.tile[i, j + 1].active(true);
        Main.tile[i, j + 1].type = (ushort) 10;
        Main.tile[i, j + 1].frameY = (short) (num + 36);
        Main.tile[i, j + 1].frameX = (short) (WorldGen.genRand.Next(3) * 18);
        return true;
      }
      catch
      {
        return false;
      }
    }

    public static bool CloseDoor(int i, int j, bool forced = false)
    {
      int num1 = 0;
      int num2 = i;
      if (Main.tile[i, j] == null)
        Main.tile[i, j] = new Tile();
      int frameX = (int) Main.tile[i, j].frameX;
      Tile tile = Main.tile[i, j];
      if ((int) tile.type != 11)
        return false;
      int frameY = (int) tile.frameY;
      int num3 = 0;
      int num4 = 0;
      while (frameY >= 54)
      {
        frameY -= 54;
        ++num3;
      }
      if (frameX >= 72)
      {
        int num5 = num3 + 36 * (frameX / 72);
        num4 += 54 * (frameX / 72);
      }
      int y = j - frameY / 18;
      switch (frameX % 72)
      {
        case 0:
          num2 = i;
          num1 = 1;
          break;
        case 18:
          num2 = i - 1;
          num1 = 1;
          break;
        case 36:
          num2 = i + 1;
          num1 = -1;
          break;
        case 54:
          num2 = i;
          num1 = -1;
          break;
      }
      int num6 = num2;
      if (num1 == -1)
        num6 = num2 - 1;
      if (!forced)
      {
        for (int j1 = y; j1 < y + 3; ++j1)
        {
          if (!Collision.EmptyTile(num2, j1, true))
            return false;
        }
      }
      for (int index1 = num6; index1 < num6 + 2; ++index1)
      {
        for (int index2 = y; index2 < y + 3; ++index2)
        {
          if (index1 == num2)
          {
            if (Main.tile[index1, index2] == null)
              Main.tile[index1, index2] = new Tile();
            Main.tile[index1, index2].type = (ushort) 10;
            Main.tile[index1, index2].frameX = (short) (WorldGen.genRand.Next(3) * 18 + num4);
          }
          else
          {
            if (Main.tile[index1, index2] == null)
              Main.tile[index1, index2] = new Tile();
            Main.tile[index1, index2].active(false);
          }
        }
      }
      if (Main.netMode != 1 && Wiring.running)
      {
        Wiring.SkipWire(num2, y);
        Wiring.SkipWire(num2, y + 1);
        Wiring.SkipWire(num2, y + 2);
      }
      for (int i1 = num2 - 1; i1 <= num2 + 1; ++i1)
      {
        for (int j1 = y - 1; j1 <= y + 2; ++j1)
          WorldGen.TileFrame(i1, j1, false, false);
      }
      Main.PlaySound(9, i * 16, j * 16, 1, 1f, 0.0f);
      return true;
    }

    public static bool AddLifeCrystal(int i, int j)
    {
      for (int index = j; index < Main.maxTilesY; ++index)
      {
        if (Main.tile[i, index].active() && Main.tileSolid[(int) Main.tile[i, index].type])
        {
          int endX = i;
          int endY = index - 1;
          if (Main.tile[endX, endY - 1].lava() || Main.tile[endX - 1, endY - 1].lava() || (!WorldGen.EmptyTileCheck(endX - 1, endX, endY - 1, endY, -1) || Main.wallDungeon[(int) Main.tile[endX, endY].wall]))
            return false;
          Tile tile1 = Main.tile[endX - 1, endY + 1];
          Tile tile2 = Main.tile[endX, endY + 1];
          if (!tile1.nactive() || !Main.tileSolid[(int) tile1.type] || (!tile2.nactive() || !Main.tileSolid[(int) tile2.type]))
            return false;
          if (tile1.blockType() != 0)
          {
            tile1.slope((byte) 0);
            tile1.halfBrick(false);
          }
          if (tile2.blockType() != 0)
          {
            tile2.slope((byte) 0);
            tile2.halfBrick(false);
          }
          Main.tile[endX - 1, endY - 1].active(true);
          Main.tile[endX - 1, endY - 1].type = (ushort) 12;
          Main.tile[endX - 1, endY - 1].frameX = (short) 0;
          Main.tile[endX - 1, endY - 1].frameY = (short) 0;
          Main.tile[endX, endY - 1].active(true);
          Main.tile[endX, endY - 1].type = (ushort) 12;
          Main.tile[endX, endY - 1].frameX = (short) 18;
          Main.tile[endX, endY - 1].frameY = (short) 0;
          Main.tile[endX - 1, endY].active(true);
          Main.tile[endX - 1, endY].type = (ushort) 12;
          Main.tile[endX - 1, endY].frameX = (short) 0;
          Main.tile[endX - 1, endY].frameY = (short) 18;
          Main.tile[endX, endY].active(true);
          Main.tile[endX, endY].type = (ushort) 12;
          Main.tile[endX, endY].frameX = (short) 18;
          Main.tile[endX, endY].frameY = (short) 18;
          return true;
        }
      }
      return false;
    }

    public static void AddShadowOrb(int x, int y)
    {
      if (x < 10 || x > Main.maxTilesX - 10 || (y < 10 || y > Main.maxTilesY - 10))
        return;
      for (int index1 = x - 1; index1 < x + 1; ++index1)
      {
        for (int index2 = y - 1; index2 < y + 1; ++index2)
        {
          if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 31)
            return;
        }
      }
      short num = 0;
      if (WorldGen.crimson)
        num += (short) 36;
      Main.tile[x - 1, y - 1].active(true);
      Main.tile[x - 1, y - 1].type = (ushort) 31;
      Main.tile[x - 1, y - 1].frameX = num;
      Main.tile[x - 1, y - 1].frameY = (short) 0;
      Main.tile[x, y - 1].active(true);
      Main.tile[x, y - 1].type = (ushort) 31;
      Main.tile[x, y - 1].frameX = (short) (18 + (int) num);
      Main.tile[x, y - 1].frameY = (short) 0;
      Main.tile[x - 1, y].active(true);
      Main.tile[x - 1, y].type = (ushort) 31;
      Main.tile[x - 1, y].frameX = num;
      Main.tile[x - 1, y].frameY = (short) 18;
      Main.tile[x, y].active(true);
      Main.tile[x, y].type = (ushort) 31;
      Main.tile[x, y].frameX = (short) (18 + (int) num);
      Main.tile[x, y].frameY = (short) 18;
    }

    public static void AddHellHouses()
    {
      int minValue = (int) ((double) Main.maxTilesX * 0.25);
      for (int i = minValue; i < Main.maxTilesX - minValue; ++i)
      {
        int j = Main.maxTilesY - 40;
        while (Main.tile[i, j].active() || (int) Main.tile[i, j].liquid > 0)
          --j;
        if (Main.tile[i, j + 1].active())
        {
          ushort tileType = (ushort) WorldGen.genRand.Next(75, 77);
          byte wallType = 13;
          if (WorldGen.genRand.Next(5) > 0)
            tileType = (ushort) 75;
          if ((int) tileType == 75)
            wallType = (byte) 14;
          WorldGen.HellFort(i, j, tileType, wallType);
          i += WorldGen.genRand.Next(30, 130);
          if (WorldGen.genRand.Next(10) == 0)
            i += WorldGen.genRand.Next(0, 200);
        }
      }
      float num1 = (float) (Main.maxTilesX / 4200);
      for (int index1 = 0; (double) index1 < 200.0 * (double) num1; ++index1)
      {
        int num2 = 0;
        bool flag1 = false;
        while (!flag1)
        {
          ++num2;
          int index2 = WorldGen.genRand.Next((int) ((double) Main.maxTilesX * 0.2), (int) ((double) Main.maxTilesX * 0.8));
          int j = WorldGen.genRand.Next(Main.maxTilesY - 300, Main.maxTilesY - 20);
          if (Main.tile[index2, j].active() && ((int) Main.tile[index2, j].type == 75 || (int) Main.tile[index2, j].type == 76))
          {
            int num3 = 0;
            if ((int) Main.tile[index2 - 1, j].wall > 0)
              num3 = -1;
            else if ((int) Main.tile[index2 + 1, j].wall > 0)
              num3 = 1;
            if (!Main.tile[index2 + num3, j].active() && !Main.tile[index2 + num3, j + 1].active())
            {
              bool flag2 = false;
              for (int index3 = index2 - 8; index3 < index2 + 8; ++index3)
              {
                for (int index4 = j - 8; index4 < j + 8; ++index4)
                {
                  if (Main.tile[index3, index4].active() && (int) Main.tile[index3, index4].type == 4)
                  {
                    flag2 = true;
                    break;
                  }
                }
              }
              if (!flag2)
              {
                WorldGen.PlaceTile(index2 + num3, j, 4, true, true, -1, 7);
                flag1 = true;
              }
            }
          }
          if (num2 > 1000)
            flag1 = true;
        }
      }
      float num4 = 4200000f / (float) Main.maxTilesX;
      for (int index1 = 0; (double) index1 < (double) num4; ++index1)
      {
        int i1 = WorldGen.genRand.Next(minValue, Main.maxTilesX - minValue);
        int j;
        for (j = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20); (int) Main.tile[i1, j].wall != 13 && (int) Main.tile[i1, j].wall != 14 || Main.tile[i1, j].active(); j = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20))
          i1 = WorldGen.genRand.Next(minValue, Main.maxTilesX - minValue);
        if (((int) Main.tile[i1, j].wall == 13 || (int) Main.tile[i1, j].wall == 14) && !Main.tile[i1, j].active())
        {
          while (!WorldGen.SolidTile(i1, j) && j < Main.maxTilesY - 20)
            ++j;
          int index2 = j - 1;
          int i2 = i1;
          int i3 = i1;
          while (!Main.tile[i2, index2].active() && WorldGen.SolidTile(i2, index2 + 1))
            --i2;
          int num2 = i2 + 1;
          while (!Main.tile[i3, index2].active() && WorldGen.SolidTile(i3, index2 + 1))
            ++i3;
          int num3 = i3 - 1;
          int num5 = num3 - num2;
          int index3 = (num3 + num2) / 2;
          if (!Main.tile[index3, index2].active() && ((int) Main.tile[index3, index2].wall == 13 || (int) Main.tile[index3, index2].wall == 14) && WorldGen.SolidTile(index3, index2 + 1))
          {
            int style1 = 16;
            int style2 = 13;
            int style3 = 14;
            int style4 = 49;
            int style5 = 4;
            int style6 = 8;
            int style7 = 15;
            int style8 = 9;
            int style9 = 10;
            int style10 = 17;
            int style11 = 25;
            int style12 = 25;
            int style13 = 23;
            int style14 = 25;
            int num6 = WorldGen.genRand.Next(13);
            int num7 = 0;
            int num8 = 0;
            if (num6 == 0)
            {
              num7 = 5;
              num8 = 4;
            }
            if (num6 == 1)
            {
              num7 = 4;
              num8 = 3;
            }
            if (num6 == 2)
            {
              num7 = 3;
              num8 = 5;
            }
            if (num6 == 3)
            {
              num7 = 4;
              num8 = 6;
            }
            if (num6 == 4)
            {
              num7 = 3;
              num8 = 3;
            }
            if (num6 == 5)
            {
              num7 = 5;
              num8 = 3;
            }
            if (num6 == 6)
            {
              num7 = 5;
              num8 = 4;
            }
            if (num6 == 7)
            {
              num7 = 5;
              num8 = 4;
            }
            if (num6 == 8)
            {
              num7 = 5;
              num8 = 4;
            }
            if (num6 == 9)
            {
              num7 = 3;
              num8 = 5;
            }
            if (num6 == 10)
            {
              num7 = 5;
              num8 = 3;
            }
            if (num6 == 11)
            {
              num7 = 2;
              num8 = 4;
            }
            if (num6 == 12)
            {
              num7 = 3;
              num8 = 3;
            }
            for (int index4 = index3 - num7; index4 <= index3 + num7; ++index4)
            {
              for (int index5 = index2 - num8; index5 <= index2; ++index5)
              {
                if (Main.tile[index4, index5].active())
                {
                  num6 = -1;
                  break;
                }
              }
            }
            if ((double) num5 < (double) num7 * 1.75)
              num6 = -1;
            if (num6 == 0)
            {
              WorldGen.PlaceTile(index3, index2, 14, true, false, -1, style2);
              int num9 = WorldGen.genRand.Next(6);
              if (num9 < 3)
                WorldGen.PlaceTile(index3 + num9, index2 - 2, 33, true, false, -1, style12);
              if (Main.tile[index3, index2].active())
              {
                if (!Main.tile[index3 - 2, index2].active())
                {
                  WorldGen.PlaceTile(index3 - 2, index2, 15, true, false, -1, style1);
                  if (Main.tile[index3 - 2, index2].active())
                  {
                    Main.tile[index3 - 2, index2].frameX += (short) 18;
                    Main.tile[index3 - 2, index2 - 1].frameX += (short) 18;
                  }
                }
                if (!Main.tile[index3 + 2, index2].active())
                  WorldGen.PlaceTile(index3 + 2, index2, 15, true, false, -1, style1);
              }
            }
            else if (num6 == 1)
            {
              WorldGen.PlaceTile(index3, index2, 18, true, false, -1, style3);
              int num9 = WorldGen.genRand.Next(4);
              if (num9 < 2)
                WorldGen.PlaceTile(index3 + num9, index2 - 1, 33, true, false, -1, style12);
              if (Main.tile[index3, index2].active())
              {
                if (WorldGen.genRand.Next(2) == 0)
                {
                  if (!Main.tile[index3 - 1, index2].active())
                  {
                    WorldGen.PlaceTile(index3 - 1, index2, 15, true, false, -1, style1);
                    if (Main.tile[index3 - 1, index2].active())
                    {
                      Main.tile[index3 - 1, index2].frameX += (short) 18;
                      Main.tile[index3 - 1, index2 - 1].frameX += (short) 18;
                    }
                  }
                }
                else if (!Main.tile[index3 + 2, index2].active())
                  WorldGen.PlaceTile(index3 + 2, index2, 15, true, false, -1, style1);
              }
            }
            else if (num6 == 2)
              WorldGen.PlaceTile(index3, index2, 105, true, false, -1, style4);
            else if (num6 == 3)
              WorldGen.PlaceTile(index3, index2, 101, true, false, -1, style5);
            else if (num6 == 4)
            {
              if (WorldGen.genRand.Next(2) == 0)
              {
                WorldGen.PlaceTile(index3, index2, 15, true, false, -1, style1);
                Main.tile[index3, index2].frameX += (short) 18;
                Main.tile[index3, index2 - 1].frameX += (short) 18;
              }
              else
                WorldGen.PlaceTile(index3, index2, 15, true, false, -1, style1);
            }
            else if (num6 == 5)
            {
              if (WorldGen.genRand.Next(2) == 0)
                WorldGen.Place4x2(index3, index2, (ushort) 79, 1, style6);
              else
                WorldGen.Place4x2(index3, index2, (ushort) 79, -1, style6);
            }
            else if (num6 == 6)
              WorldGen.PlaceTile(index3, index2, 87, true, false, -1, style7);
            else if (num6 == 7)
              WorldGen.PlaceTile(index3, index2, 88, true, false, -1, style8);
            else if (num6 == 8)
              WorldGen.PlaceTile(index3, index2, 89, true, false, -1, style9);
            else if (num6 == 9)
              WorldGen.PlaceTile(index3, index2, 104, true, false, -1, style10);
            else if (num6 == 10)
            {
              if (WorldGen.genRand.Next(2) == 0)
                WorldGen.Place4x2(index3, index2, (ushort) 90, 1, style14);
              else
                WorldGen.Place4x2(index3, index2, (ushort) 90, -1, style14);
            }
            else if (num6 == 11)
              WorldGen.PlaceTile(index3, index2, 93, true, false, -1, style13);
            else if (num6 == 12)
              WorldGen.PlaceTile(index3, index2, 100, true, false, -1, style11);
          }
        }
      }
      float num10 = 420000f / (float) Main.maxTilesX;
      for (int index1 = 0; (double) index1 < (double) num10; ++index1)
      {
        int index2 = WorldGen.genRand.Next(minValue, Main.maxTilesX - minValue);
        int index3;
        for (index3 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20); (int) Main.tile[index2, index3].wall != 13 && (int) Main.tile[index2, index3].wall != 14 || Main.tile[index2, index3].active(); index3 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20))
          index2 = WorldGen.genRand.Next(minValue, Main.maxTilesX - minValue);
        for (int index4 = 0; index4 < 2; ++index4)
        {
          int index5 = index2;
          int index6 = index2;
          while (!Main.tile[index5, index3].active() && ((int) Main.tile[index5, index3].wall == 13 || (int) Main.tile[index5, index3].wall == 14))
            --index5;
          int num2 = index5 + 1;
          while (!Main.tile[index6, index3].active() && ((int) Main.tile[index6, index3].wall == 13 || (int) Main.tile[index6, index3].wall == 14))
            ++index6;
          int num3 = index6 - 1;
          index2 = (num2 + num3) / 2;
          int index7 = index3;
          int index8 = index3;
          while (!Main.tile[index2, index7].active() && ((int) Main.tile[index2, index7].wall == 13 || (int) Main.tile[index2, index7].wall == 14))
            --index7;
          int num5 = index7 + 1;
          while (!Main.tile[index2, index8].active() && ((int) Main.tile[index2, index8].wall == 13 || (int) Main.tile[index2, index8].wall == 14))
            ++index8;
          int num6 = index8 - 1;
          index3 = (num5 + num6) / 2;
        }
        int index9 = index2;
        int index10 = index2;
        while (!Main.tile[index9, index3].active() && !Main.tile[index9, index3 - 1].active() && !Main.tile[index9, index3 + 1].active())
          --index9;
        int num7 = index9 + 1;
        while (!Main.tile[index10, index3].active() && !Main.tile[index10, index3 - 1].active() && !Main.tile[index10, index3 + 1].active())
          ++index10;
        int num8 = index10 - 1;
        int index11 = index3;
        int index12 = index3;
        while (!Main.tile[index2, index11].active() && !Main.tile[index2 - 1, index11].active() && !Main.tile[index2 + 1, index11].active())
          --index11;
        int num9 = index11 + 1;
        while (!Main.tile[index2, index12].active() && !Main.tile[index2 - 1, index12].active() && !Main.tile[index2 + 1, index12].active())
          ++index12;
        int num11 = index12 - 1;
        int num12 = (num7 + num8) / 2;
        int num13 = (num9 + num11) / 2;
        int num14 = num8 - num7;
        int num15 = num11 - num9;
        int num16 = 7;
        if (num14 > num16 && num15 > 5)
        {
          int num2 = 0;
          if (WorldGen.nearPicture2(num12, num13))
            num2 = -1;
          if (num2 == 0)
          {
            Vector2 vector2 = WorldGen.randHellPicture();
            int x = (int) vector2.X;
            int y = (int) vector2.Y;
            if (!WorldGen.nearPicture(num12, num13))
              WorldGen.PlaceTile(num12, num13, x, true, false, -1, y);
          }
        }
      }
      int[] numArray = new int[3]
      {
        WorldGen.genRand.Next(16, 22),
        WorldGen.genRand.Next(16, 22),
        WorldGen.genRand.Next(16, 22)
      };
      while (numArray[1] == numArray[0])
        numArray[1] = WorldGen.genRand.Next(16, 22);
      while (numArray[2] == numArray[0] || numArray[2] == numArray[1])
        numArray[2] = WorldGen.genRand.Next(16, 22);
      float num17 = 420000f / (float) Main.maxTilesX;
      for (int index1 = 0; (double) index1 < (double) num17; ++index1)
      {
        int i;
        int j1;
        do
        {
          i = WorldGen.genRand.Next(minValue, Main.maxTilesX - minValue);
          j1 = WorldGen.genRand.Next(Main.maxTilesY - 250, Main.maxTilesY - 20);
        }
        while ((int) Main.tile[i, j1].wall != 13 && (int) Main.tile[i, j1].wall != 14 || Main.tile[i, j1].active());
        while (!WorldGen.SolidTile(i, j1) && j1 > 10)
          --j1;
        int j2 = j1 + 1;
        if ((int) Main.tile[i, j2].wall == 13 || (int) Main.tile[i, j2].wall == 14)
        {
          int num2 = WorldGen.genRand.Next(3);
          int style1 = 32;
          int style2 = 32;
          int num3;
          int num5;
          switch (num2)
          {
            case 1:
              num3 = 3;
              num5 = 3;
              break;
            case 2:
              num3 = 1;
              num5 = 2;
              break;
            default:
              num3 = 1;
              num5 = 3;
              break;
          }
          for (int index2 = i - 1; index2 <= i + num3; ++index2)
          {
            for (int index3 = j2; index3 <= j2 + num5; ++index3)
            {
              Tile tile = Main.tile[i, j2];
              if (index2 < i || index2 == i + num3)
              {
                if (tile.active())
                {
                  ushort type = tile.type;
                  if ((uint) type <= 34U)
                  {
                    if ((uint) type - 10U > 1U && (int) type != 34)
                      continue;
                  }
                  else if ((int) type != 42 && (int) type != 91)
                    continue;
                  num2 = -1;
                }
              }
              else if (tile.active())
                num2 = -1;
            }
          }
          switch (num2)
          {
            case 0:
              WorldGen.PlaceTile(i, j2, 91, true, false, -1, numArray[WorldGen.genRand.Next(3)]);
              continue;
            case 1:
              WorldGen.PlaceTile(i, j2, 34, true, false, -1, style1);
              continue;
            case 2:
              WorldGen.PlaceTile(i, j2, 42, true, false, -1, style2);
              continue;
            default:
              continue;
          }
        }
      }
    }

    public static void HellFort(int i, int j, ushort tileType = 75, byte wallType = 14)
    {
      int[] numArray1 = new int[5];
      int[] numArray2 = new int[5];
      int[] numArray3 = new int[10];
      int[] numArray4 = new int[10];
      int minValue1 = 8;
      int maxValue1 = 20;
      numArray1[2] = i - WorldGen.genRand.Next(minValue1 / 2, maxValue1 / 2);
      numArray2[2] = i + WorldGen.genRand.Next(minValue1 / 2, maxValue1 / 2);
      numArray1[3] = numArray2[2];
      numArray2[3] = numArray1[3] + WorldGen.genRand.Next(minValue1, maxValue1);
      numArray1[4] = numArray2[3];
      numArray2[4] = numArray1[4] + WorldGen.genRand.Next(minValue1, maxValue1);
      numArray2[1] = numArray1[2];
      numArray1[1] = numArray2[1] - WorldGen.genRand.Next(minValue1, maxValue1);
      numArray2[0] = numArray1[1];
      numArray1[0] = numArray2[0] - WorldGen.genRand.Next(minValue1, maxValue1);
      int minValue2 = 6;
      int maxValue2 = 12;
      numArray3[3] = j - WorldGen.genRand.Next(minValue2, maxValue2);
      numArray4[3] = j;
      for (int index = 4; index < 10; ++index)
      {
        numArray3[index] = numArray4[index - 1];
        numArray4[index] = numArray3[index] + WorldGen.genRand.Next(minValue2, maxValue2);
      }
      for (int index = 2; index >= 0; --index)
      {
        numArray4[index] = numArray3[index + 1];
        numArray3[index] = numArray4[index] - WorldGen.genRand.Next(minValue2, maxValue2);
      }
      bool flag1 = false;
      bool flag2 = false;
      bool[,] flagArray1 = new bool[5, 10];
      int num1 = 3;
      int num2 = 3;
      for (int index1 = 0; index1 < 2; ++index1)
      {
        if (WorldGen.genRand.Next(3) == 0)
        {
          flag1 = true;
          int index2 = WorldGen.genRand.Next(10);
          if (index2 < num1)
            num1 = index2;
          if (index2 > num2)
            num2 = index2;
          int index3 = 1;
          if (WorldGen.genRand.Next(2) == 0)
          {
            flagArray1[0, index2] = true;
            flagArray1[1, index2] = true;
            index3 = 0;
          }
          else
            flagArray1[1, index2] = true;
          int num3 = WorldGen.genRand.Next(2);
          if (num3 == 0)
            num3 = -1;
          int num4 = WorldGen.genRand.Next(10);
          while (num4 > 0 && index2 >= 0 && index2 < 10)
          {
            flagArray1[index3, index2] = true;
            index2 += num3;
          }
        }
        if (WorldGen.genRand.Next(3) == 0)
        {
          flag2 = true;
          int index2 = WorldGen.genRand.Next(10);
          if (index2 < num1)
            num1 = index2;
          if (index2 > num2)
            num2 = index2;
          int index3 = 3;
          if (WorldGen.genRand.Next(2) == 0)
          {
            flagArray1[3, index2] = true;
            flagArray1[4, index2] = true;
            index3 = 4;
          }
          else
            flagArray1[3, index2] = true;
          int num3 = WorldGen.genRand.Next(2);
          if (num3 == 0)
            num3 = -1;
          int num4 = WorldGen.genRand.Next(10);
          while (num4 > 0 && index2 >= 0 && index2 < 10)
          {
            flagArray1[index3, index2] = true;
            index2 += num3;
          }
        }
      }
      for (int index1 = 0; index1 < 5; ++index1)
      {
        int index2 = numArray1[index1];
        bool flag3 = false;
        for (int index3 = Main.maxTilesY - 200; index3 < Main.maxTilesY; ++index3)
        {
          if ((int) Main.tile[index2, index3].wall > 0)
            flag3 = true;
        }
        if (flag3)
        {
          for (int index3 = 0; index3 < 10; ++index3)
            flagArray1[index1, index3] = false;
        }
      }
      int num5 = WorldGen.genRand.Next(10);
      if (num5 < num1)
        num1 = num5;
      int num6 = WorldGen.genRand.Next(10);
      if (num6 > num2)
        num2 = num6;
      if (!flag1 && !flag2)
      {
        while (num2 - num1 < 5)
        {
          int num3 = WorldGen.genRand.Next(10);
          if (num3 < num1)
            num1 = num3;
          int num4 = WorldGen.genRand.Next(10);
          if (num4 > num2)
            num2 = num4;
        }
      }
      for (int index = num1; index <= num2; ++index)
        flagArray1[2, index] = true;
      for (int index1 = 0; index1 < 5; ++index1)
      {
        for (int index2 = 0; index2 < 10; ++index2)
        {
          if (flagArray1[index1, index2] && (numArray3[index2] < Main.maxTilesY - 200 || numArray4[index2] > Main.maxTilesY - 20))
            flagArray1[index1, index2] = false;
        }
      }
      for (int index1 = 0; index1 < 5; ++index1)
      {
        for (int index2 = 0; index2 < 10; ++index2)
        {
          if (flagArray1[index1, index2])
          {
            for (int index3 = numArray1[index1]; index3 <= numArray2[index1]; ++index3)
            {
              for (int index4 = numArray3[index2]; index4 <= numArray4[index2]; ++index4)
              {
                Main.tile[index3, index4].liquid = (byte) 0;
                if (index3 == numArray1[index1] || index3 == numArray2[index1] || (index4 == numArray3[index2] || index4 == numArray4[index2]))
                {
                  Main.tile[index3, index4].active(true);
                  Main.tile[index3, index4].type = tileType;
                  Main.tile[index3, index4].halfBrick(false);
                  Main.tile[index3, index4].slope((byte) 0);
                }
                else
                {
                  Main.tile[index3, index4].wall = wallType;
                  Main.tile[index3, index4].active(false);
                }
              }
            }
          }
        }
      }
      int style1 = 19;
      int style2 = 13;
      for (int index1 = 0; index1 < 4; ++index1)
      {
        bool[] flagArray2 = new bool[10];
        bool flag3 = false;
        for (int index2 = 0; index2 < 10; ++index2)
        {
          if (flagArray1[index1, index2] && flagArray1[index1 + 1, index2])
          {
            flagArray2[index2] = true;
            flag3 = true;
          }
        }
        while (flag3)
        {
          int index2 = WorldGen.genRand.Next(10);
          if (flagArray2[index2])
          {
            flag3 = false;
            Main.tile[numArray2[index1], numArray4[index2] - 1].active(false);
            Main.tile[numArray2[index1], numArray4[index2] - 2].active(false);
            Main.tile[numArray2[index1], numArray4[index2] - 3].active(false);
            Main.tile[numArray2[index1], numArray4[index2] - 1].wall = wallType;
            Main.tile[numArray2[index1], numArray4[index2] - 2].wall = wallType;
            Main.tile[numArray2[index1], numArray4[index2] - 3].wall = wallType;
            WorldGen.PlaceTile(numArray2[index1], numArray4[index2] - 1, 10, true, false, -1, style1);
          }
        }
      }
      for (int index1 = 0; index1 < 5; ++index1)
      {
        for (int index2 = 0; index2 < 10; ++index2)
        {
          if (flagArray1[index1, index2])
          {
            if (index2 > 0 && flagArray1[index1, index2 - 1])
            {
              int num3 = WorldGen.genRand.Next(numArray1[index1] + 2, numArray2[index1] - 1);
              int num4;
              for (num4 = WorldGen.genRand.Next(numArray1[index1] + 2, numArray2[index1] - 1); num4 - num3 < 2 || num4 - num3 > 5; num4 = WorldGen.genRand.Next(numArray1[index1] + 2, numArray2[index1] - 1))
                num3 = WorldGen.genRand.Next(numArray1[index1] + 2, numArray2[index1] - 1);
              for (int i1 = num3; i1 <= num4; ++i1)
              {
                Main.tile[i1, numArray3[index2]].active(false);
                WorldGen.PlaceTile(i1, numArray3[index2], 19, true, true, -1, style2);
                Main.tile[i1, numArray3[index2]].wall = wallType;
              }
            }
            if (index1 < 4 && flagArray1[index1 + 1, index2] && WorldGen.genRand.Next(3) == 0)
            {
              Main.tile[numArray2[index1], numArray4[index2] - 1].active(false);
              Main.tile[numArray2[index1], numArray4[index2] - 2].active(false);
              Main.tile[numArray2[index1], numArray4[index2] - 3].active(false);
              Main.tile[numArray2[index1], numArray4[index2] - 1].wall = wallType;
              Main.tile[numArray2[index1], numArray4[index2] - 2].wall = wallType;
              Main.tile[numArray2[index1], numArray4[index2] - 3].wall = wallType;
              WorldGen.PlaceTile(numArray2[index1], numArray4[index2] - 1, 10, true, false, -1, style1);
            }
          }
        }
      }
      bool flag4 = false;
      for (int index1 = 0; index1 < 5; ++index1)
      {
        bool[] flagArray2 = new bool[10];
        for (int index2 = 0; index2 < 10; ++index2)
        {
          if (flagArray1[index1, index2])
          {
            flag4 = true;
            flagArray2[index2] = true;
          }
        }
        if (flag4)
        {
          bool flag3 = false;
          for (int index2 = 0; index2 < 10; ++index2)
          {
            if (flagArray2[index2])
            {
              if (!Main.tile[numArray1[index1] - 1, numArray4[index2] - 1].active() && !Main.tile[numArray1[index1] - 1, numArray4[index2] - 2].active() && (!Main.tile[numArray1[index1] - 1, numArray4[index2] - 3].active() && (int) Main.tile[numArray1[index1] - 1, numArray4[index2] - 1].liquid == 0) && ((int) Main.tile[numArray1[index1] - 1, numArray4[index2] - 2].liquid == 0 && (int) Main.tile[numArray1[index1] - 1, numArray4[index2] - 3].liquid == 0))
                flag3 = true;
              else
                flagArray2[index2] = false;
            }
          }
          while (flag3)
          {
            int index2 = WorldGen.genRand.Next(10);
            if (flagArray2[index2])
            {
              flag3 = false;
              Main.tile[numArray1[index1], numArray4[index2] - 1].active(false);
              Main.tile[numArray1[index1], numArray4[index2] - 2].active(false);
              Main.tile[numArray1[index1], numArray4[index2] - 3].active(false);
              WorldGen.PlaceTile(numArray1[index1], numArray4[index2] - 1, 10, true, false, -1, style1);
            }
          }
          break;
        }
      }
      bool flag5 = false;
      for (int index1 = 4; index1 >= 0; --index1)
      {
        bool[] flagArray2 = new bool[10];
        for (int index2 = 0; index2 < 10; ++index2)
        {
          if (flagArray1[index1, index2])
          {
            flag5 = true;
            flagArray2[index2] = true;
          }
        }
        if (flag5)
        {
          bool flag3 = false;
          for (int index2 = 0; index2 < 10; ++index2)
          {
            if (flagArray2[index2])
            {
              if (!Main.tile[numArray2[index1] + 1, numArray4[index2] - 1].active() && !Main.tile[numArray2[index1] + 1, numArray4[index2] - 2].active() && (!Main.tile[numArray2[index1] + 1, numArray4[index2] - 3].active() && (int) Main.tile[numArray2[index1] + 1, numArray4[index2] - 1].liquid == 0) && ((int) Main.tile[numArray2[index1] + 1, numArray4[index2] - 2].liquid == 0 && (int) Main.tile[numArray2[index1] + 1, numArray4[index2] - 3].liquid == 0))
                flag3 = true;
              else
                flagArray2[index2] = false;
            }
          }
          while (flag3)
          {
            int index2 = WorldGen.genRand.Next(10);
            if (flagArray2[index2])
            {
              flag3 = false;
              Main.tile[numArray2[index1], numArray4[index2] - 1].active(false);
              Main.tile[numArray2[index1], numArray4[index2] - 2].active(false);
              Main.tile[numArray2[index1], numArray4[index2] - 3].active(false);
              WorldGen.PlaceTile(numArray2[index1], numArray4[index2] - 1, 10, true, false, -1, style1);
            }
          }
          break;
        }
      }
      bool flag6 = false;
      for (int index1 = 0; index1 < 10; ++index1)
      {
        bool[] flagArray2 = new bool[10];
        for (int index2 = 0; index2 < 5; ++index2)
        {
          if (flagArray1[index2, index1])
          {
            flag6 = true;
            flagArray2[index2] = true;
          }
        }
        if (flag6)
        {
          bool flag3 = true;
          while (flag3)
          {
            int index2 = WorldGen.genRand.Next(5);
            if (flagArray2[index2])
            {
              int num3 = WorldGen.genRand.Next(numArray1[index2] + 2, numArray2[index2] - 1);
              int num4;
              for (num4 = WorldGen.genRand.Next(numArray1[index2] + 2, numArray2[index2] - 1); num4 - num3 < 2 || num4 - num3 > 5; num4 = WorldGen.genRand.Next(numArray1[index2] + 2, numArray2[index2] - 1))
                num3 = WorldGen.genRand.Next(numArray1[index2] + 2, numArray2[index2] - 1);
              for (int index3 = num3; index3 <= num4; ++index3)
              {
                if (Main.tile[index3, numArray3[index1] - 1].active() || (int) Main.tile[index3, numArray3[index1] - 1].liquid > 0)
                  flag3 = false;
              }
              if (flag3)
              {
                for (int i1 = num3; i1 <= num4; ++i1)
                {
                  Main.tile[i1, numArray3[index1]].active(false);
                  WorldGen.PlaceTile(i1, numArray3[index1], 19, true, true, -1, style2);
                }
              }
              flag3 = false;
            }
          }
          break;
        }
      }
    }

    public static void HellHouse(int i, int j, byte type = 76, byte wall = 13)
    {
      int width = WorldGen.genRand.Next(8, 20);
      int num1 = WorldGen.genRand.Next(1, 3);
      int num2 = WorldGen.genRand.Next(4, 13);
      int i1 = i;
      int j1 = j;
      for (int index = 0; index < num1; ++index)
      {
        int height = WorldGen.genRand.Next(5, 9);
        WorldGen.HellRoom(i1, j1, width, height, type, wall);
        j1 -= height;
      }
      int j2 = j;
      for (int index = 0; index < num2; ++index)
      {
        int height = WorldGen.genRand.Next(5, 9);
        j2 += height;
        WorldGen.HellRoom(i1, j2, width, height, type, wall);
      }
      for (int index1 = i - width / 2; index1 <= i + width / 2; ++index1)
      {
        int index2 = j;
        while (index2 < Main.maxTilesY && (Main.tile[index1, index2].active() && ((int) Main.tile[index1, index2].type == 76 || (int) Main.tile[index1, index2].type == 75) || ((int) Main.tile[i, index2].wall == 13 || (int) Main.tile[i, index2].wall == 14)))
          ++index2;
        int num3 = 6 + WorldGen.genRand.Next(3);
        while (index2 < Main.maxTilesY && !Main.tile[index1, index2].active())
        {
          --num3;
          Main.tile[index1, index2].active(true);
          Main.tile[index1, index2].type = (ushort) 57;
          ++index2;
          if (num3 <= 0)
            break;
        }
      }
      int index3 = j;
      while (index3 < Main.maxTilesY && (Main.tile[i, index3].active() && ((int) Main.tile[i, index3].type == 76 || (int) Main.tile[i, index3].type == 75) || ((int) Main.tile[i, index3].wall == 13 || (int) Main.tile[i, index3].wall == 14)))
        ++index3;
      int index4 = index3 - 1;
      int maxValue = index4;
      while (Main.tile[i, index4].active() && ((int) Main.tile[i, index4].type == 76 || (int) Main.tile[i, index4].type == 75) || ((int) Main.tile[i, index4].wall == 13 || (int) Main.tile[i, index4].wall == 14))
      {
        --index4;
        if (Main.tile[i, index4].active() && ((int) Main.tile[i, index4].type == 76 || (int) Main.tile[i, index4].type == 75))
        {
          int num3 = WorldGen.genRand.Next(i - width / 2 + 1, i + width / 2 - 1);
          int num4 = WorldGen.genRand.Next(i - width / 2 + 1, i + width / 2 - 1);
          if (num3 > num4)
          {
            int num5 = num3;
            num3 = num4;
            num4 = num5;
          }
          if (num3 == num4)
          {
            if (num3 < i)
              ++num4;
            else
              --num3;
          }
          for (int index1 = num3; index1 <= num4; ++index1)
          {
            if ((int) Main.tile[index1, index4 - 1].wall == 13)
              Main.tile[index1, index4].wall = (byte) 13;
            if ((int) Main.tile[index1, index4 - 1].wall == 14)
              Main.tile[index1, index4].wall = (byte) 14;
            Main.tile[index1, index4].type = (ushort) 19;
            Main.tile[index1, index4].active(true);
          }
          --index4;
        }
      }
      int minValue = index4;
      float num6 = (float) ((maxValue - minValue) * width) * 0.02f;
      for (int index1 = 0; (double) index1 < (double) num6; ++index1)
      {
        int num3 = WorldGen.genRand.Next(i - width / 2, i + width / 2 + 1);
        int num4 = WorldGen.genRand.Next(minValue, maxValue);
        int num5 = WorldGen.genRand.Next(3, 8);
        for (int index2 = num3 - num5; index2 <= num3 + num5; ++index2)
        {
          for (int index5 = num4 - num5; index5 <= num4 + num5; ++index5)
          {
            double num7 = (double) Math.Abs(index2 - num3);
            float num8 = (float) Math.Abs(index5 - num4);
            if (Math.Sqrt(num7 * num7 + (double) num8 * (double) num8) < (double) num5 * 0.4)
            {
              try
              {
                if ((int) Main.tile[index2, index5].type == 76 || (int) Main.tile[index2, index5].type == 19)
                  Main.tile[index2, index5].active(false);
                Main.tile[index2, index5].wall = (byte) 0;
              }
              catch
              {
              }
            }
          }
        }
      }
    }

    public static void HellRoom(int i, int j, int width, int height, byte type = 76, byte wall = 13)
    {
      if (j > Main.maxTilesY - 40)
        return;
      for (int index1 = i - width / 2; index1 <= i + width / 2; ++index1)
      {
        for (int index2 = j - height; index2 <= j; ++index2)
        {
          try
          {
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].type = (ushort) type;
            Main.tile[index1, index2].liquid = (byte) 0;
            Main.tile[index1, index2].lava(false);
          }
          catch
          {
          }
        }
      }
      for (int index1 = i - width / 2 + 1; index1 <= i + width / 2 - 1; ++index1)
      {
        for (int index2 = j - height + 1; index2 <= j - 1; ++index2)
        {
          try
          {
            Main.tile[index1, index2].active(false);
            Main.tile[index1, index2].wall = wall;
            Main.tile[index1, index2].liquid = (byte) 0;
            Main.tile[index1, index2].lava(false);
          }
          catch
          {
          }
        }
      }
    }

    public static void templeCleaner(int x, int y)
    {
      int index1 = x;
      int index2 = y;
      int num = 0;
      if (Main.tile[x + 1, y].active() && (int) Main.tile[x + 1, y].type == 226)
        ++num;
      if (Main.tile[x - 1, y].active() && (int) Main.tile[x - 1, y].type == 226)
        ++num;
      if (Main.tile[x, y + 1].active() && (int) Main.tile[x, y + 1].type == 226)
        ++num;
      if (Main.tile[x, y - 1].active() && (int) Main.tile[x, y - 1].type == 226)
        ++num;
      if (Main.tile[x, y].active() && (int) Main.tile[x, y].type == 226)
      {
        if (num > 1)
          return;
        Main.tile[index1, index2].active(false);
        Main.tile[index1, index2].wall = (byte) 87;
      }
      else
      {
        if (Main.tile[x, y].active() || num != 3)
          return;
        Main.tile[index1, index2].active(true);
        Main.tile[index1, index2].type = (ushort) 226;
        Main.tile[index1, index2].liquid = (byte) 0;
        Main.tile[index1, index2].slope((byte) 0);
        Main.tile[index1, index2].halfBrick(false);
      }
    }

    public static Vector2 templePather(Vector2 templePath, int destX, int destY)
    {
      int x = (int) templePath.X;
      int y = (int) templePath.Y;
      int num1 = WorldGen.genRand.Next(5, 20);
      int num2 = WorldGen.genRand.Next(2, 5);
      while (num1 > 0 && (x != destX || y != destY))
      {
        --num1;
        if (x > destX)
          --x;
        if (x < destX)
          ++x;
        if (y > destY)
          --y;
        if (y < destY)
          ++y;
        for (int index1 = x - num2; index1 < x + num2; ++index1)
        {
          for (int index2 = y - num2; index2 < y + num2; ++index2)
          {
            Main.tile[index1, index2].active(false);
            Main.tile[index1, index2].wall = (byte) 87;
          }
        }
      }
      return new Vector2((float) x, (float) y);
    }

    public static void outerTempled(int x, int y)
    {
      if (Main.tile[x, y].active() & (int) Main.tile[x, y].type == 226 || (int) Main.tile[x, y].wall == 87)
        return;
      int num = 6;
      for (int index1 = x - num; index1 <= x + num; ++index1)
      {
        for (int index2 = y - num; index2 <= y + num; ++index2)
        {
          if (!Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].wall == 87)
          {
            int index3 = x;
            int index4 = y;
            Main.tile[index3, index4].active(true);
            Main.tile[index3, index4].type = (ushort) 226;
            Main.tile[index3, index4].liquid = (byte) 0;
            Main.tile[index3, index4].slope((byte) 0);
            Main.tile[index3, index4].halfBrick(false);
            return;
          }
        }
      }
    }

    public static void makeTemple(int x, int y)
    {
      Rectangle[] rectangleArray = new Rectangle[40];
      float num1 = (float) (Main.maxTilesX / 4200);
      int maxValue = WorldGen.genRand.Next((int) ((double) num1 * 10.0), (int) ((double) num1 * 16.0));
      int num2 = 1;
      if (WorldGen.genRand.Next(2) == 0)
        num2 = -1;
      int num3 = num2;
      int num4 = x;
      int num5 = y;
      int num6 = x;
      int num7 = y;
      int num8 = WorldGen.genRand.Next(1, 3);
      int num9 = 0;
      for (int index1 = 0; index1 < maxValue; ++index1)
      {
        ++num9;
        int num10 = num2;
        int num11 = num6;
        int num12 = num7;
        bool flag = true;
        int num13 = 0;
        int num14 = 0;
        int num15 = -10;
        Rectangle rectangle;
        // ISSUE: explicit reference operation
        ((Rectangle) @rectangle).\u002Ector(num11 - num13 / 2, num12 - num14 / 2, num13, num14);
        while (flag)
        {
          int num16 = num6;
          int num17 = num7;
          int num18 = WorldGen.genRand.Next(25, 50);
          int num19 = WorldGen.genRand.Next(20, 35);
          if (num19 > num18)
            num19 = num18;
          if (index1 == maxValue - 1)
          {
            int num20 = WorldGen.genRand.Next(55, 65);
            int num21 = WorldGen.genRand.Next(45, 50);
            if (num21 > num20)
              num21 = num20;
            num18 = (int) ((double) num20 * 1.6);
            num19 = (int) ((double) num21 * 1.35);
            num17 += WorldGen.genRand.Next(5, 10);
          }
          if (num9 > num8)
          {
            num12 = num17 + (WorldGen.genRand.Next(num19 + 1, num19 + 3) + num15);
            num11 = num16 + WorldGen.genRand.Next(-5, 6);
            num10 = num2 * -1;
          }
          else
          {
            num11 = num16 + (WorldGen.genRand.Next(num18 + 1, num18 + 3) + num15) * num10;
            num12 = num17 + WorldGen.genRand.Next(-5, 6);
          }
          flag = false;
          // ISSUE: explicit reference operation
          ((Rectangle) @rectangle).\u002Ector(num11 - num18 / 2, num12 - num19 / 2, num18, num19);
          for (int index2 = 0; index2 < index1; ++index2)
          {
            // ISSUE: explicit reference operation
            if (((Rectangle) @rectangle).Intersects(rectangleArray[index2]))
              flag = true;
            if (WorldGen.genRand.Next(100) == 0)
              ++num15;
          }
        }
        if (num9 > num8)
        {
          ++num8;
          num9 = 1;
        }
        rectangleArray[index1] = rectangle;
        num2 = num10;
        num6 = num11;
        num7 = num12;
      }
      for (int index1 = 0; index1 < maxValue; ++index1)
      {
        for (int index2 = 0; index2 < 2; ++index2)
        {
          for (int index3 = 0; index3 < maxValue; ++index3)
          {
            for (int index4 = 0; index4 < 2; ++index4)
            {
              int x1 = (int) rectangleArray[index1].X;
              if (index2 == 1)
                x1 += rectangleArray[index1].Width - 1;
              int y1 = (int) rectangleArray[index1].Y;
              int num10 = y1 + rectangleArray[index1].Height;
              int x2 = (int) rectangleArray[index3].X;
              if (index4 == 1)
                x2 += rectangleArray[index3].Width - 1;
              int y2 = (int) rectangleArray[index3].Y;
              int num11 = y2 + rectangleArray[index3].Height;
              while (x1 != x2 || y1 != y2 || num10 != num11)
              {
                if (x1 < x2)
                  ++x1;
                if (x1 > x2)
                  --x1;
                if (y1 < y2)
                  ++y1;
                if (y1 > y2)
                  --y1;
                if (num10 < num11)
                  ++num10;
                if (num10 > num11)
                  --num10;
                int index5 = x1;
                for (int index6 = y1; index6 < num10; ++index6)
                {
                  Main.tile[index5, index6].active(true);
                  Main.tile[index5, index6].type = (ushort) 226;
                  Main.tile[index5, index6].liquid = (byte) 0;
                  Main.tile[index5, index6].slope((byte) 0);
                  Main.tile[index5, index6].halfBrick(false);
                }
              }
            }
          }
        }
      }
      for (int index1 = 0; index1 < maxValue; ++index1)
      {
        if (WorldGen.genRand.Next(1) == 0)
        {
          for (int x1 = (int) rectangleArray[index1].X; x1 < rectangleArray[index1].X + rectangleArray[index1].Width; ++x1)
          {
            for (int y1 = (int) rectangleArray[index1].Y; y1 < rectangleArray[index1].Y + rectangleArray[index1].Height; ++y1)
            {
              Main.tile[x1, y1].active(true);
              Main.tile[x1, y1].type = (ushort) 226;
              Main.tile[x1, y1].liquid = (byte) 0;
              Main.tile[x1, y1].slope((byte) 0);
              Main.tile[x1, y1].halfBrick(false);
            }
          }
          int x2 = (int) rectangleArray[index1].X;
          int num10 = x2 + rectangleArray[index1].Width;
          int y2 = (int) rectangleArray[index1].Y;
          int num11 = y2 + rectangleArray[index1].Height;
          int num12 = x2 + WorldGen.genRand.Next(3, 8);
          int num13 = num10 - WorldGen.genRand.Next(3, 8);
          int num14 = y2 + WorldGen.genRand.Next(3, 8);
          int num15 = num11 - WorldGen.genRand.Next(3, 8);
          int num16 = num12;
          int num17 = num13;
          int num18 = num14;
          int num19 = num15;
          int num20 = (num12 + num13) / 2;
          int num21 = (num14 + num15) / 2;
          for (int index2 = num12; index2 < num13; ++index2)
          {
            for (int index3 = num14; index3 < num15; ++index3)
            {
              if (WorldGen.genRand.Next(20) == 0)
                num18 += WorldGen.genRand.Next(-1, 2);
              if (WorldGen.genRand.Next(20) == 0)
                num19 += WorldGen.genRand.Next(-1, 2);
              if (WorldGen.genRand.Next(20) == 0)
                num16 += WorldGen.genRand.Next(-1, 2);
              if (WorldGen.genRand.Next(20) == 0)
                num17 += WorldGen.genRand.Next(-1, 2);
              if (num16 < num12)
                num16 = num12;
              if (num17 > num13)
                num17 = num13;
              if (num18 < num14)
                num18 = num14;
              if (num19 > num15)
                num19 = num15;
              if (num16 > num20)
                num16 = num20;
              if (num17 < num20)
                num17 = num20;
              if (num18 > num21)
                num18 = num21;
              if (num19 < num21)
                num19 = num21;
              if (index2 >= num16 && index2 < num17 & index3 >= num18 && index3 <= num19)
              {
                Main.tile[index2, index3].active(false);
                Main.tile[index2, index3].wall = (byte) 87;
              }
            }
          }
          for (int index2 = num15; index2 > num14; --index2)
          {
            for (int index3 = num13; index3 > num12; --index3)
            {
              if (WorldGen.genRand.Next(20) == 0)
                num18 += WorldGen.genRand.Next(-1, 2);
              if (WorldGen.genRand.Next(20) == 0)
                num19 += WorldGen.genRand.Next(-1, 2);
              if (WorldGen.genRand.Next(20) == 0)
                num16 += WorldGen.genRand.Next(-1, 2);
              if (WorldGen.genRand.Next(20) == 0)
                num17 += WorldGen.genRand.Next(-1, 2);
              if (num16 < num12)
                num16 = num12;
              if (num17 > num13)
                num17 = num13;
              if (num18 < num14)
                num18 = num14;
              if (num19 > num15)
                num19 = num15;
              if (num16 > num20)
                num16 = num20;
              if (num17 < num20)
                num17 = num20;
              if (num18 > num21)
                num18 = num21;
              if (num19 < num21)
                num19 = num21;
              if (index3 >= num16 && index3 < num17 & index2 >= num18 && index2 <= num19)
              {
                Main.tile[index3, index2].active(false);
                Main.tile[index3, index2].wall = (byte) 87;
              }
            }
          }
        }
      }
      Vector2 templePath;
      // ISSUE: explicit reference operation
      ((Vector2) @templePath).\u002Ector((float) num4, (float) num5);
      for (int index1 = 0; index1 < maxValue; ++index1)
      {
        Rectangle rectangle = rectangleArray[index1];
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @rectangle.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num10 = ^(int&) local1 + 8;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) local1 = num10;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @rectangle.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num11 = ^(int&) local2 + 8;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) local2 = num11;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local3 = @rectangle.Width;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num12 = ^(int&) local3 - 16;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) local3 = num12;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local4 = @rectangle.Height;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num13 = ^(int&) local4 - 16;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) local4 = num13;
        bool flag1 = true;
        while (flag1)
        {
          int destX = WorldGen.genRand.Next((int) rectangle.X, (int) (rectangle.X + rectangle.Width));
          int destY = WorldGen.genRand.Next((int) rectangle.Y, (int) (rectangle.Y + rectangle.Height));
          templePath = WorldGen.templePather(templePath, destX, destY);
          if (templePath.X == (double) destX && templePath.Y == (double) destY)
            flag1 = false;
        }
        if (index1 < maxValue - 1)
        {
          if (WorldGen.genRand.Next(3) != 0)
          {
            int index2 = index1 + 1;
            if (rectangleArray[index2].Y >= rectangleArray[index1].Y + rectangleArray[index1].Height)
            {
              rectangle.X = rectangleArray[index2].X;
              if (rectangleArray[index2].X < rectangleArray[index1].X)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                __Null& local5 = @rectangle.X;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num14 = ^(int&) local5 + (int) ((double) (float) rectangleArray[index2].Width * 0.2);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(int&) local5 = num14;
              }
              else
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                __Null& local5 = @rectangle.X;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num14 = ^(int&) local5 + (int) ((double) (float) rectangleArray[index2].Width * 0.8);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(int&) local5 = num14;
              }
              rectangle.Y = rectangleArray[index2].Y;
            }
            else
            {
              rectangle.X = (__Null) ((rectangleArray[index1].X + rectangleArray[index1].Width / 2 + (rectangleArray[index2].X + rectangleArray[index2].Width / 2)) / 2);
              rectangle.Y = (__Null) (int) ((double) rectangleArray[index2].Y + (double) rectangleArray[index2].Height * 0.8);
            }
            int x1 = (int) rectangle.X;
            int y1 = (int) rectangle.Y;
            bool flag2 = true;
            while (flag2)
            {
              int destX = WorldGen.genRand.Next(x1 - 6, x1 + 7);
              int destY = WorldGen.genRand.Next(y1 - 6, y1 + 7);
              templePath = WorldGen.templePather(templePath, destX, destY);
              if (templePath.X == (double) destX && templePath.Y == (double) destY)
                flag2 = false;
            }
          }
          else
          {
            int index2 = index1 + 1;
            int num14 = (rectangleArray[index1].X + rectangleArray[index1].Width / 2 + (rectangleArray[index2].X + rectangleArray[index2].Width / 2)) / 2;
            int num15 = (rectangleArray[index1].Y + rectangleArray[index1].Height / 2 + (rectangleArray[index2].Y + rectangleArray[index2].Height / 2)) / 2;
            bool flag2 = true;
            while (flag2)
            {
              int destX = WorldGen.genRand.Next(num14 - 6, num14 + 7);
              int destY = WorldGen.genRand.Next(num15 - 6, num15 + 7);
              templePath = WorldGen.templePather(templePath, destX, destY);
              if (templePath.X == (double) destX && templePath.Y == (double) destY)
                flag2 = false;
            }
          }
        }
      }
      int num22 = Main.maxTilesX - 20;
      int num23 = 20;
      int num24 = Main.maxTilesY - 20;
      int num25 = 20;
      for (int index = 0; index < maxValue; ++index)
      {
        if (rectangleArray[index].X < num22)
          num22 = (int) rectangleArray[index].X;
        if (rectangleArray[index].X + rectangleArray[index].Width > num23)
          num23 = (int) (rectangleArray[index].X + rectangleArray[index].Width);
        if (rectangleArray[index].Y < num24)
          num24 = (int) rectangleArray[index].Y;
        if (rectangleArray[index].Y + rectangleArray[index].Height > num25)
          num25 = (int) (rectangleArray[index].Y + rectangleArray[index].Height);
      }
      int num26 = num22 - 10;
      int num27 = num23 + 10;
      int num28 = num24 - 10;
      int num29 = num25 + 10;
      for (int x1 = num26; x1 < num27; ++x1)
      {
        for (int y1 = num28; y1 < num29; ++y1)
          WorldGen.outerTempled(x1, y1);
      }
      for (int x1 = num27; x1 >= num26; --x1)
      {
        for (int y1 = num28; y1 < num29 / 2; ++y1)
          WorldGen.outerTempled(x1, y1);
      }
      for (int y1 = num28; y1 < num29; ++y1)
      {
        for (int x1 = num26; x1 < num27; ++x1)
          WorldGen.outerTempled(x1, y1);
      }
      for (int y1 = num29; y1 >= num28; --y1)
      {
        for (int x1 = num26; x1 < num27; ++x1)
          WorldGen.outerTempled(x1, y1);
      }
      int num30 = -num3;
      Vector2 vector2;
      // ISSUE: explicit reference operation
      ((Vector2) @vector2).\u002Ector((float) num4, (float) num5);
      int num31 = WorldGen.genRand.Next(2, 5);
      bool flag3 = true;
      int num32 = 0;
      int num33 = WorldGen.genRand.Next(9, 14);
      while (flag3)
      {
        ++num32;
        if (num32 >= num33)
        {
          num32 = 0;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local = @vector2.Y;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num10 = (double) ^(float&) local - 1.0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local = (float) num10;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num11 = (double) ^(float&) local1 + (double) num30;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num11;
        int x1 = (int) vector2.X;
        flag3 = false;
        for (int index = (int) vector2.Y - num31; (double) index < vector2.Y + (double) num31; ++index)
        {
          if ((int) Main.tile[x1, index].wall == 87 || Main.tile[x1, index].active() && (int) Main.tile[x1, index].type == 226)
            flag3 = true;
          if (Main.tile[x1, index].active() && (int) Main.tile[x1, index].type == 226)
          {
            Main.tile[x1, index].active(false);
            Main.tile[x1, index].wall = (byte) 87;
          }
        }
      }
      int i1 = num4;
      int index7 = num5;
      while (!Main.tile[i1, index7].active())
        ++index7;
      int j1 = index7 - 4;
      int index8 = j1;
      while (Main.tile[i1, index8].active() && (int) Main.tile[i1, index8].type == 226 || (int) Main.tile[i1, index8].wall == 87)
        --index8;
      int num34 = index8 + 2;
      for (int index1 = i1 - 1; index1 <= i1 + 1; ++index1)
      {
        for (int index2 = num34; index2 <= j1; ++index2)
        {
          Main.tile[index1, index2].active(true);
          Main.tile[index1, index2].type = (ushort) 226;
          Main.tile[index1, index2].liquid = (byte) 0;
          Main.tile[index1, index2].slope((byte) 0);
          Main.tile[index1, index2].halfBrick(false);
        }
      }
      for (int index1 = i1 - 4; index1 <= i1 + 4; ++index1)
      {
        for (int index2 = j1 - 1; index2 < j1 + 3; ++index2)
        {
          Main.tile[index1, index2].active(false);
          Main.tile[index1, index2].wall = (byte) 87;
        }
      }
      for (int index1 = i1 - 1; index1 <= i1 + 1; ++index1)
      {
        for (int index2 = j1 - 5; index2 <= j1 + 8; ++index2)
        {
          Main.tile[index1, index2].active(true);
          Main.tile[index1, index2].type = (ushort) 226;
          Main.tile[index1, index2].liquid = (byte) 0;
          Main.tile[index1, index2].slope((byte) 0);
          Main.tile[index1, index2].halfBrick(false);
        }
      }
      for (int index1 = i1 - 1; index1 <= i1 + 1; ++index1)
      {
        for (int index2 = j1; index2 < j1 + 3; ++index2)
        {
          Main.tile[index1, index2].active(false);
          Main.tile[index1, index2].wall = (byte) 87;
        }
      }
      WorldGen.PlaceTile(i1, j1, 10, true, false, -1, 11);
      for (int x1 = num26; x1 < num27; ++x1)
      {
        for (int y1 = num28; y1 < num29; ++y1)
          WorldGen.templeCleaner(x1, y1);
      }
      for (int y1 = num29; y1 >= num28; --y1)
      {
        for (int x1 = num27; x1 >= num26; --x1)
          WorldGen.templeCleaner(x1, y1);
      }
      for (int index1 = num26; index1 < num27; ++index1)
      {
        for (int index2 = num28; index2 < num29; ++index2)
        {
          bool flag1 = true;
          for (int index3 = index1 - 1; index3 <= index1 + 1; ++index3)
          {
            for (int index4 = index2 - 1; index4 <= index2 + 1; ++index4)
            {
              if ((!Main.tile[index3, index4].active() || (int) Main.tile[index3, index4].type != 226) && (int) Main.tile[index3, index4].wall != 87)
              {
                flag1 = false;
                break;
              }
            }
          }
          if (flag1)
            Main.tile[index1, index2].wall = (byte) 87;
        }
      }
      int num35 = 0;
      Rectangle rectangle1;
      do
      {
        ++num35;
        rectangle1 = rectangleArray[maxValue - 1];
        int i2 = rectangle1.X + WorldGen.genRand.Next((int) rectangle1.Width);
        int j2 = rectangle1.Y + WorldGen.genRand.Next((int) rectangle1.Height);
        WorldGen.PlaceTile(i2, j2, 237, false, false, -1, 0);
        if ((int) Main.tile[i2, j2].type == 237)
        {
          WorldGen.lAltarX = i2 - (int) Main.tile[i2, j2].frameX / 18;
          WorldGen.lAltarY = j2 - (int) Main.tile[i2, j2].frameY / 18;
          goto label_278;
        }
      }
      while (num35 < 1000);
      int num36 = rectangle1.X + rectangle1.Width / 2;
      int num37 = rectangle1.Y + rectangle1.Height / 2;
      int index9 = num36 + WorldGen.genRand.Next(-10, 11);
      int index10 = num37 + WorldGen.genRand.Next(-10, 11);
      while (!Main.tile[index9, index10].active())
        ++index10;
      Main.tile[index9 - 1, index10].active(true);
      Main.tile[index9 - 1, index10].slope((byte) 0);
      Main.tile[index9 - 1, index10].halfBrick(false);
      Main.tile[index9 - 1, index10].type = (ushort) 226;
      Main.tile[index9, index10].active(true);
      Main.tile[index9, index10].slope((byte) 0);
      Main.tile[index9, index10].halfBrick(false);
      Main.tile[index9, index10].type = (ushort) 226;
      Main.tile[index9 + 1, index10].active(true);
      Main.tile[index9 + 1, index10].slope((byte) 0);
      Main.tile[index9 + 1, index10].halfBrick(false);
      Main.tile[index9 + 1, index10].type = (ushort) 226;
      int num38 = index10 - 2;
      int num39 = index9 - 1;
      for (int index1 = -1; index1 <= 3; ++index1)
      {
        for (int index2 = -1; index2 <= 1; ++index2)
        {
          x = num39 + index1;
          y = num38 + index2;
          Main.tile[x, y].active(false);
        }
      }
      WorldGen.lAltarX = num39;
      WorldGen.lAltarY = num38;
      for (int index1 = 0; index1 <= 2; ++index1)
      {
        for (int index2 = 0; index2 <= 1; ++index2)
        {
          x = num39 + index1;
          y = num38 + index2;
          Main.tile[x, y].active(true);
          Main.tile[x, y].type = (ushort) 237;
          Main.tile[x, y].frameX = (short) (index1 * 18);
          Main.tile[x, y].frameY = (short) (index2 * 18);
        }
      }
label_278:
      float num40 = (float) maxValue * 1.1f * (float) (1.0 + (double) WorldGen.genRand.Next(-25, 26) * 0.00999999977648258);
      int num41 = 0;
      while ((double) num40 > 0.0)
      {
        ++num41;
        int index1 = WorldGen.genRand.Next(maxValue);
        int index2 = WorldGen.genRand.Next((int) rectangleArray[index1].X, (int) (rectangleArray[index1].X + rectangleArray[index1].Width));
        int index3 = WorldGen.genRand.Next((int) rectangleArray[index1].Y, (int) (rectangleArray[index1].Y + rectangleArray[index1].Height));
        if ((int) Main.tile[index2, index3].wall == 87 && !Main.tile[index2, index3].active())
        {
          bool flag1 = false;
          if (WorldGen.genRand.Next(2) == 0)
          {
            int num10 = 1;
            if (WorldGen.genRand.Next(2) == 0)
              num10 = -1;
            while (!Main.tile[index2, index3].active())
              index3 += num10;
            int num11 = index3 - num10;
            int num12 = WorldGen.genRand.Next(2);
            int num13 = WorldGen.genRand.Next(3, 10);
            bool flag2 = true;
            for (int index4 = index2 - num13; index4 < index2 + num13; ++index4)
            {
              for (int index5 = num11 - num13; index5 < num11 + num13; ++index5)
              {
                if (Main.tile[index4, index5].active() && (int) Main.tile[index4, index5].type == 10)
                {
                  flag2 = false;
                  break;
                }
              }
            }
            if (flag2)
            {
              for (int i2 = index2 - num13; i2 < index2 + num13; ++i2)
              {
                for (int j2 = num11 - num13; j2 < num11 + num13; ++j2)
                {
                  if (WorldGen.SolidTile(i2, j2) && (int) Main.tile[i2, j2].type != 232 && !WorldGen.SolidTile(i2, j2 - num10))
                  {
                    Main.tile[i2, j2].type = (ushort) 232;
                    flag1 = true;
                    if (num12 == 0)
                    {
                      Main.tile[i2, j2 - 1].type = (ushort) 232;
                      Main.tile[i2, j2 - 1].active(true);
                    }
                    else
                    {
                      Main.tile[i2, j2 + 1].type = (ushort) 232;
                      Main.tile[i2, j2 + 1].active(true);
                    }
                    ++num12;
                    if (num12 > 1)
                      num12 = 0;
                  }
                }
              }
            }
            if (flag1)
            {
              num41 = 0;
              --num40;
            }
          }
          else
          {
            int num10 = 1;
            if (WorldGen.genRand.Next(2) == 0)
              num10 = -1;
            while (!Main.tile[index2, index3].active())
              index2 += num10;
            int num11 = index2 - num10;
            int num12 = WorldGen.genRand.Next(2);
            int num13 = WorldGen.genRand.Next(3, 10);
            bool flag2 = true;
            for (int index4 = num11 - num13; index4 < num11 + num13; ++index4)
            {
              for (int index5 = index3 - num13; index5 < index3 + num13; ++index5)
              {
                if (Main.tile[index4, index5].active() && (int) Main.tile[index4, index5].type == 10)
                {
                  flag2 = false;
                  break;
                }
              }
            }
            if (flag2)
            {
              for (int i2 = num11 - num13; i2 < num11 + num13; ++i2)
              {
                for (int j2 = index3 - num13; j2 < index3 + num13; ++j2)
                {
                  if (WorldGen.SolidTile(i2, j2) && (int) Main.tile[i2, j2].type != 232 && !WorldGen.SolidTile(i2 - num10, j2))
                  {
                    Main.tile[i2, j2].type = (ushort) 232;
                    flag1 = true;
                    if (num12 == 0)
                    {
                      Main.tile[i2 - 1, j2].type = (ushort) 232;
                      Main.tile[i2 - 1, j2].active(true);
                    }
                    else
                    {
                      Main.tile[i2 + 1, j2].type = (ushort) 232;
                      Main.tile[i2 + 1, j2].active(true);
                    }
                    ++num12;
                    if (num12 > 1)
                      num12 = 0;
                  }
                }
              }
            }
            if (flag1)
            {
              num41 = 0;
              --num40;
            }
          }
        }
        if (num41 > 1000)
        {
          num41 = 0;
          --num40;
        }
      }
      WorldGen.tLeft = num26;
      WorldGen.tRight = num27;
      WorldGen.tTop = num28;
      WorldGen.tBottom = num29;
      WorldGen.tRooms = maxValue;
    }

    public static void templePart2()
    {
      int tLeft = WorldGen.tLeft;
      int tRight = WorldGen.tRight;
      int tTop = WorldGen.tTop;
      int tBottom = WorldGen.tBottom;
      int tRooms = WorldGen.tRooms;
      float num1 = (float) tRooms * 1.9f * (float) (1.0 + (double) WorldGen.genRand.Next(-15, 16) * 0.00999999977648258);
      int num2 = 0;
      while ((double) num1 > 0.0)
      {
        int x2 = WorldGen.genRand.Next(tLeft, tRight);
        int y2 = WorldGen.genRand.Next(tTop, tBottom);
        if ((int) Main.tile[x2, y2].wall == 87 && !Main.tile[x2, y2].active())
        {
          if (WorldGen.mayanTrap(x2, y2))
          {
            --num1;
            num2 = 0;
          }
          else
            ++num2;
        }
        else
          ++num2;
        if (num2 > 100)
        {
          num2 = 0;
          --num1;
        }
      }
      Main.tileSolid[232] = false;
      float num3 = (float) tRooms * 0.35f * (float) (1.0 + (double) WorldGen.genRand.Next(-15, 16) * 0.00999999977648258);
      int contain = 1293;
      int num4 = 0;
      while ((double) num3 > 0.0)
      {
        int i = WorldGen.genRand.Next(tLeft, tRight);
        int j = WorldGen.genRand.Next(tTop, tBottom);
        if ((int) Main.tile[i, j].wall == 87 && !Main.tile[i, j].active() && WorldGen.AddBuriedChest(i, j, contain, true, 16))
        {
          --num3;
          num4 = 0;
        }
        ++num4;
        if (num4 > 10000)
          break;
      }
      float num5 = (float) tRooms * 1.25f * (float) (1.0 + (double) WorldGen.genRand.Next(-25, 36) * 0.00999999977648258);
      int num6 = 0;
      while ((double) num5 > 0.0)
      {
        ++num6;
        int index1 = WorldGen.genRand.Next(tLeft, tRight);
        int index2 = WorldGen.genRand.Next(tTop, tBottom);
        if ((int) Main.tile[index1, index2].wall == 87 && !Main.tile[index1, index2].active())
        {
          int i = index1;
          int index3 = index2;
          while (!Main.tile[i, index3].active())
          {
            ++index3;
            if (index3 > tBottom)
              break;
          }
          int j = index3 - 1;
          if (j <= tBottom)
          {
            WorldGen.PlaceTile(i, j, 105, true, false, -1, WorldGen.genRand.Next(43, 46));
            if ((int) Main.tile[i, j].type == 105)
              --num5;
          }
        }
      }
      float num7 = (float) tRooms * 1.35f * (float) (1.0 + (double) WorldGen.genRand.Next(-15, 26) * 0.00999999977648258);
      int num8 = 0;
      while ((double) num7 > 0.0)
      {
        ++num8;
        int index1 = WorldGen.genRand.Next(tLeft, tRight);
        int index2 = WorldGen.genRand.Next(tTop, tBottom);
        if ((int) Main.tile[index1, index2].wall == 87 && !Main.tile[index1, index2].active())
        {
          int i = index1;
          int index3 = index2;
          while (!Main.tile[i, index3].active())
          {
            ++index3;
            if (index3 > tBottom)
              break;
          }
          int j = index3 - 1;
          if (j <= tBottom)
          {
            switch (WorldGen.genRand.Next(3))
            {
              case 0:
                WorldGen.PlaceTile(i, j, 18, true, false, -1, 10);
                if ((int) Main.tile[i, j].type == 18)
                {
                  --num7;
                  break;
                }
                break;
              case 1:
                WorldGen.PlaceTile(i, j, 14, true, false, -1, 9);
                if ((int) Main.tile[i, j].type == 14)
                {
                  --num7;
                  break;
                }
                break;
              case 2:
                WorldGen.PlaceTile(i, j, 15, true, false, -1, 12);
                if ((int) Main.tile[i, j].type == 15)
                {
                  --num7;
                  break;
                }
                break;
            }
          }
        }
        if (num8 > 10000)
          break;
      }
      Main.tileSolid[232] = true;
    }

    public static bool nearPicture(int x, int y)
    {
      for (int index1 = x - 4; index1 <= x + 3; ++index1)
      {
        for (int index2 = y - 3; index2 <= y + 2; ++index2)
        {
          if (Main.tile[index1, index2].active())
            return true;
        }
      }
      return false;
    }

    public static bool nearPicture2(int x, int y)
    {
      if ((int) Main.tile[x, y].wall != 7 && (int) Main.tile[x, y].wall != 8 && (int) Main.tile[x, y].wall != 9)
      {
        for (int index1 = x - 8; index1 <= x + 8; ++index1)
        {
          for (int index2 = y - 5; index2 <= y + 5; ++index2)
          {
            if (Main.tile[index1, index2].active() && ((int) Main.tile[index1, index2].type == 240 || (int) Main.tile[index1, index2].type == 241 || (int) Main.tile[index1, index2].type == 242))
              return true;
          }
        }
      }
      else
      {
        for (int index1 = x - 15; index1 <= x + 15; ++index1)
        {
          for (int index2 = y - 10; index2 <= y + 10; ++index2)
          {
            if (Main.tile[index1, index2].active() && ((int) Main.tile[index1, index2].type == 240 || (int) Main.tile[index1, index2].type == 241 || (int) Main.tile[index1, index2].type == 242))
              return true;
          }
        }
      }
      return false;
    }

    public static void MakeDungeon(int x, int y)
    {
      int num1 = WorldGen.genRand.Next(3);
      WorldGen.genRand.Next(3);
      ushort tileType;
      int wallType;
      switch (num1)
      {
        case 0:
          tileType = (ushort) 41;
          wallType = 7;
          break;
        case 1:
          tileType = (ushort) 43;
          wallType = 8;
          break;
        default:
          tileType = (ushort) 44;
          wallType = 9;
          break;
      }
      WorldGen.numDDoors = 0;
      WorldGen.numDPlats = 0;
      WorldGen.numDRooms = 0;
      WorldGen.dungeonX = x;
      WorldGen.dungeonY = y;
      WorldGen.dMinX = x;
      WorldGen.dMaxX = x;
      WorldGen.dMinY = y;
      WorldGen.dMaxY = y;
      WorldGen.dxStrength1 = (double) WorldGen.genRand.Next(25, 30);
      WorldGen.dyStrength1 = (double) WorldGen.genRand.Next(20, 25);
      WorldGen.dxStrength2 = (double) WorldGen.genRand.Next(35, 50);
      WorldGen.dyStrength2 = (double) WorldGen.genRand.Next(10, 15);
      float num2 = (float) (Main.maxTilesX / 60);
      float num3 = num2 + (float) WorldGen.genRand.Next(0, (int) ((double) num2 / 3.0));
      float num4 = num3;
      int num5 = 5;
      WorldGen.DungeonRoom(WorldGen.dungeonX, WorldGen.dungeonY, tileType, wallType);
      while ((double) num3 > 0.0)
      {
        if (WorldGen.dungeonX < WorldGen.dMinX)
          WorldGen.dMinX = WorldGen.dungeonX;
        if (WorldGen.dungeonX > WorldGen.dMaxX)
          WorldGen.dMaxX = WorldGen.dungeonX;
        if (WorldGen.dungeonY > WorldGen.dMaxY)
          WorldGen.dMaxY = WorldGen.dungeonY;
        --num3;
        Main.statusText = Lang.gen[58].Value + " " + (object) (int) (((double) num4 - (double) num3) / (double) num4 * 60.0) + "%";
        if (num5 > 0)
          --num5;
        if (num5 == 0 & WorldGen.genRand.Next(3) == 0)
        {
          num5 = 5;
          if (WorldGen.genRand.Next(2) == 0)
          {
            int dungeonX = WorldGen.dungeonX;
            int dungeonY = WorldGen.dungeonY;
            WorldGen.DungeonHalls(WorldGen.dungeonX, WorldGen.dungeonY, tileType, wallType, false);
            if (WorldGen.genRand.Next(2) == 0)
              WorldGen.DungeonHalls(WorldGen.dungeonX, WorldGen.dungeonY, tileType, wallType, false);
            WorldGen.DungeonRoom(WorldGen.dungeonX, WorldGen.dungeonY, tileType, wallType);
            WorldGen.dungeonX = dungeonX;
            WorldGen.dungeonY = dungeonY;
          }
          else
            WorldGen.DungeonRoom(WorldGen.dungeonX, WorldGen.dungeonY, tileType, wallType);
        }
        else
          WorldGen.DungeonHalls(WorldGen.dungeonX, WorldGen.dungeonY, tileType, wallType, false);
      }
      WorldGen.DungeonRoom(WorldGen.dungeonX, WorldGen.dungeonY, tileType, wallType);
      int num6 = WorldGen.dRoomX[0];
      int num7 = WorldGen.dRoomY[0];
      for (int index = 0; index < WorldGen.numDRooms; ++index)
      {
        if (WorldGen.dRoomY[index] < num7)
        {
          num6 = WorldGen.dRoomX[index];
          num7 = WorldGen.dRoomY[index];
        }
      }
      WorldGen.dungeonX = num6;
      WorldGen.dungeonY = num7;
      WorldGen.dEnteranceX = num6;
      WorldGen.dSurface = false;
      int num8 = 5;
      while (!WorldGen.dSurface)
      {
        if (num8 > 0)
          --num8;
        if (num8 == 0 && WorldGen.genRand.Next(5) == 0 && (double) WorldGen.dungeonY > Main.worldSurface + 100.0)
        {
          num8 = 10;
          int dungeonX = WorldGen.dungeonX;
          int dungeonY = WorldGen.dungeonY;
          WorldGen.DungeonHalls(WorldGen.dungeonX, WorldGen.dungeonY, tileType, wallType, true);
          WorldGen.DungeonRoom(WorldGen.dungeonX, WorldGen.dungeonY, tileType, wallType);
          WorldGen.dungeonX = dungeonX;
          WorldGen.dungeonY = dungeonY;
        }
        WorldGen.DungeonStairs(WorldGen.dungeonX, WorldGen.dungeonY, tileType, wallType);
      }
      WorldGen.DungeonEnt(WorldGen.dungeonX, WorldGen.dungeonY, tileType, wallType);
      Main.statusText = Lang.gen[58].Value + " 65%";
      for (int index1 = 0; index1 < WorldGen.numDRooms; ++index1)
      {
        for (int index2 = WorldGen.dRoomL[index1]; index2 <= WorldGen.dRoomR[index1]; ++index2)
        {
          if (!Main.tile[index2, WorldGen.dRoomT[index1] - 1].active())
          {
            WorldGen.DPlatX[WorldGen.numDPlats] = index2;
            WorldGen.DPlatY[WorldGen.numDPlats] = WorldGen.dRoomT[index1] - 1;
            ++WorldGen.numDPlats;
            break;
          }
        }
        for (int index2 = WorldGen.dRoomL[index1]; index2 <= WorldGen.dRoomR[index1]; ++index2)
        {
          if (!Main.tile[index2, WorldGen.dRoomB[index1] + 1].active())
          {
            WorldGen.DPlatX[WorldGen.numDPlats] = index2;
            WorldGen.DPlatY[WorldGen.numDPlats] = WorldGen.dRoomB[index1] + 1;
            ++WorldGen.numDPlats;
            break;
          }
        }
        for (int index2 = WorldGen.dRoomT[index1]; index2 <= WorldGen.dRoomB[index1]; ++index2)
        {
          if (!Main.tile[WorldGen.dRoomL[index1] - 1, index2].active())
          {
            WorldGen.DDoorX[WorldGen.numDDoors] = WorldGen.dRoomL[index1] - 1;
            WorldGen.DDoorY[WorldGen.numDDoors] = index2;
            WorldGen.DDoorPos[WorldGen.numDDoors] = -1;
            ++WorldGen.numDDoors;
            break;
          }
        }
        for (int index2 = WorldGen.dRoomT[index1]; index2 <= WorldGen.dRoomB[index1]; ++index2)
        {
          if (!Main.tile[WorldGen.dRoomR[index1] + 1, index2].active())
          {
            WorldGen.DDoorX[WorldGen.numDDoors] = WorldGen.dRoomR[index1] + 1;
            WorldGen.DDoorY[WorldGen.numDDoors] = index2;
            WorldGen.DDoorPos[WorldGen.numDDoors] = 1;
            ++WorldGen.numDDoors;
            break;
          }
        }
      }
      Main.statusText = Lang.gen[58].Value + " 70%";
      int num9 = 0;
      int num10 = 1000;
      int num11 = 0;
      while (num11 < Main.maxTilesX / 100)
      {
        ++num9;
        int index1 = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
        int index2 = WorldGen.genRand.Next((int) Main.worldSurface + 25, WorldGen.dMaxY);
        int num12 = index1;
        if ((int) Main.tile[index1, index2].wall == wallType && !Main.tile[index1, index2].active())
        {
          int num13 = 1;
          if (WorldGen.genRand.Next(2) == 0)
            num13 = -1;
          while (!Main.tile[index1, index2].active())
            index2 += num13;
          if (Main.tile[index1 - 1, index2].active() && Main.tile[index1 + 1, index2].active() && (!Main.tile[index1 - 1, index2 - num13].active() && !Main.tile[index1 + 1, index2 - num13].active()))
          {
            ++num11;
            for (int index3 = WorldGen.genRand.Next(5, 13); Main.tile[index1 - 1, index2].active() && Main.tile[index1, index2 + num13].active() && (Main.tile[index1, index2].active() && !Main.tile[index1, index2 - num13].active()) && index3 > 0; --index3)
            {
              Main.tile[index1, index2].type = (ushort) 48;
              if (!Main.tile[index1 - 1, index2 - num13].active() && !Main.tile[index1 + 1, index2 - num13].active())
              {
                Main.tile[index1, index2 - num13].type = (ushort) 48;
                Main.tile[index1, index2 - num13].active(true);
              }
              --index1;
            }
            int num14 = WorldGen.genRand.Next(5, 13);
            for (int index3 = num12 + 1; Main.tile[index3 + 1, index2].active() && Main.tile[index3, index2 + num13].active() && (Main.tile[index3, index2].active() && !Main.tile[index3, index2 - num13].active()) && num14 > 0; --num14)
            {
              Main.tile[index3, index2].type = (ushort) 48;
              if (!Main.tile[index3 - 1, index2 - num13].active() && !Main.tile[index3 + 1, index2 - num13].active())
              {
                Main.tile[index3, index2 - num13].type = (ushort) 48;
                Main.tile[index3, index2 - num13].active(true);
              }
              ++index3;
            }
          }
        }
        if (num9 > num10)
        {
          num9 = 0;
          ++num11;
        }
      }
      int num15 = 0;
      int num16 = 1000;
      int num17 = 0;
      Main.statusText = Lang.gen[58].Value + " 75%";
      while (num17 < Main.maxTilesX / 100)
      {
        ++num15;
        int index1 = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
        int index2 = WorldGen.genRand.Next((int) Main.worldSurface + 25, WorldGen.dMaxY);
        int num12 = index2;
        if ((int) Main.tile[index1, index2].wall == wallType && !Main.tile[index1, index2].active())
        {
          int num13 = 1;
          if (WorldGen.genRand.Next(2) == 0)
            num13 = -1;
          while (index1 > 5 && index1 < Main.maxTilesX - 5 && !Main.tile[index1, index2].active())
            index1 += num13;
          if (Main.tile[index1, index2 - 1].active() && Main.tile[index1, index2 + 1].active() && (!Main.tile[index1 - num13, index2 - 1].active() && !Main.tile[index1 - num13, index2 + 1].active()))
          {
            ++num17;
            for (int index3 = WorldGen.genRand.Next(5, 13); Main.tile[index1, index2 - 1].active() && Main.tile[index1 + num13, index2].active() && (Main.tile[index1, index2].active() && !Main.tile[index1 - num13, index2].active()) && index3 > 0; --index3)
            {
              Main.tile[index1, index2].type = (ushort) 48;
              if (!Main.tile[index1 - num13, index2 - 1].active() && !Main.tile[index1 - num13, index2 + 1].active())
              {
                Main.tile[index1 - num13, index2].type = (ushort) 48;
                Main.tile[index1 - num13, index2].active(true);
              }
              --index2;
            }
            int num14 = WorldGen.genRand.Next(5, 13);
            for (int index3 = num12 + 1; Main.tile[index1, index3 + 1].active() && Main.tile[index1 + num13, index3].active() && (Main.tile[index1, index3].active() && !Main.tile[index1 - num13, index3].active()) && num14 > 0; --num14)
            {
              Main.tile[index1, index3].type = (ushort) 48;
              if (!Main.tile[index1 - num13, index3 - 1].active() && !Main.tile[index1 - num13, index3 + 1].active())
              {
                Main.tile[index1 - num13, index3].type = (ushort) 48;
                Main.tile[index1 - num13, index3].active(true);
              }
              ++index3;
            }
          }
        }
        if (num15 > num16)
        {
          num15 = 0;
          ++num17;
        }
      }
      Main.statusText = Lang.gen[58].Value + " 80%";
      for (int index1 = 0; index1 < WorldGen.numDDoors; ++index1)
      {
        int num12 = WorldGen.DDoorX[index1] - 10;
        int num13 = WorldGen.DDoorX[index1] + 10;
        int num14 = 100;
        int num18 = 0;
        for (int index2 = num12; index2 < num13; ++index2)
        {
          bool flag1 = true;
          int index3 = WorldGen.DDoorY[index1];
          while (index3 > 10 && !Main.tile[index2, index3].active())
            --index3;
          if (!Main.tileDungeon[(int) Main.tile[index2, index3].type])
            flag1 = false;
          int num19 = index3;
          int index4 = WorldGen.DDoorY[index1];
          while (!Main.tile[index2, index4].active())
            ++index4;
          if (!Main.tileDungeon[(int) Main.tile[index2, index4].type])
            flag1 = false;
          int num20 = index4;
          if (num20 - num19 >= 3)
          {
            int num21 = index2 - 20;
            int num22 = index2 + 20;
            int num23 = num20 - 10;
            int num24 = num20 + 10;
            for (int index5 = num21; index5 < num22; ++index5)
            {
              for (int index6 = num23; index6 < num24; ++index6)
              {
                if (Main.tile[index5, index6].active() && (int) Main.tile[index5, index6].type == 10)
                {
                  flag1 = false;
                  break;
                }
              }
            }
            if (flag1)
            {
              for (int index5 = num20 - 3; index5 < num20; ++index5)
              {
                for (int index6 = index2 - 3; index6 <= index2 + 3; ++index6)
                {
                  if (Main.tile[index6, index5].active())
                  {
                    flag1 = false;
                    break;
                  }
                }
              }
            }
            if (flag1 && num20 - num19 < 20)
            {
              bool flag2 = false;
              if (WorldGen.DDoorPos[index1] == 0 && num20 - num19 < num14)
                flag2 = true;
              if (WorldGen.DDoorPos[index1] == -1 && index2 > num18)
                flag2 = true;
              if (WorldGen.DDoorPos[index1] == 1 && (index2 < num18 || num18 == 0))
                flag2 = true;
              if (flag2)
              {
                num18 = index2;
                num14 = num20 - num19;
              }
            }
          }
        }
        if (num14 < 20)
        {
          int i = num18;
          int index2 = WorldGen.DDoorY[index1];
          int index3 = index2;
          for (; !Main.tile[i, index2].active(); ++index2)
            Main.tile[i, index2].active(false);
          while (!Main.tile[i, index3].active())
            --index3;
          int j = index2 - 1;
          int num19 = index3 + 1;
          for (int index4 = num19; index4 < j - 2; ++index4)
          {
            Main.tile[i, index4].active(true);
            Main.tile[i, index4].type = tileType;
          }
          int style = 13;
          if (WorldGen.genRand.Next(3) == 0)
          {
            if (wallType == 7)
              style = 16;
            else if (wallType == 8)
              style = 17;
            else if (wallType == 9)
              style = 18;
          }
          WorldGen.PlaceTile(i, j, 10, true, false, -1, style);
          int index5 = i - 1;
          int index6 = j - 3;
          while (!Main.tile[index5, index6].active())
            --index6;
          if (j - index6 < j - num19 + 5 && Main.tileDungeon[(int) Main.tile[index5, index6].type])
          {
            for (int index4 = j - 4 - WorldGen.genRand.Next(3); index4 > index6; --index4)
            {
              Main.tile[index5, index4].active(true);
              Main.tile[index5, index4].type = tileType;
            }
          }
          int index7 = index5 + 2;
          int index8 = j - 3;
          while (!Main.tile[index7, index8].active())
            --index8;
          if (j - index8 < j - num19 + 5 && Main.tileDungeon[(int) Main.tile[index7, index8].type])
          {
            for (int index4 = j - 4 - WorldGen.genRand.Next(3); index4 > index8; --index4)
            {
              Main.tile[index7, index4].active(true);
              Main.tile[index7, index4].type = tileType;
            }
          }
          int index9 = j + 1;
          int num20 = index7 - 1;
          Main.tile[num20 - 1, index9].active(true);
          Main.tile[num20 - 1, index9].type = tileType;
          Main.tile[num20 + 1, index9].active(true);
          Main.tile[num20 + 1, index9].type = tileType;
        }
      }
      int[] roomWall = new int[3];
      if (wallType == 7)
      {
        roomWall[0] = 7;
        roomWall[1] = 94;
        roomWall[2] = 95;
      }
      else if (wallType == 9)
      {
        roomWall[0] = 9;
        roomWall[1] = 96;
        roomWall[2] = 97;
      }
      else
      {
        roomWall[0] = 8;
        roomWall[1] = 98;
        roomWall[2] = 99;
      }
      for (int index1 = 0; index1 < 5; ++index1)
      {
        for (int index2 = 0; index2 < 3; ++index2)
        {
          int num12 = WorldGen.genRand.Next(40, 240);
          int num13 = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
          int num14 = WorldGen.genRand.Next(WorldGen.dMinY, WorldGen.dMaxY);
          for (int x1 = num13 - num12; x1 < num13 + num12; ++x1)
          {
            for (int y1 = num14 - num12; y1 < num14 + num12; ++y1)
            {
              if ((double) y1 > Main.worldSurface)
              {
                double num18 = (double) Math.Abs(num13 - x1);
                float num19 = (float) Math.Abs(num14 - y1);
                if (Math.Sqrt(num18 * num18 + (double) num19 * (double) num19) < (double) num12 * 0.4 && Main.wallDungeon[(int) Main.tile[x1, y1].wall])
                  WorldGen.Spread.WallDungeon(x1, y1, roomWall[index2]);
              }
            }
          }
        }
      }
      Main.statusText = Lang.gen[58].Value + " 85%";
      for (int index1 = 0; index1 < WorldGen.numDPlats; ++index1)
      {
        int index2 = WorldGen.DPlatX[index1];
        int num12 = WorldGen.DPlatY[index1];
        int num13 = Main.maxTilesX;
        int num14 = 10;
        if ((double) num12 < Main.worldSurface + 50.0)
          num14 = 20;
        for (int index3 = num12 - 5; index3 <= num12 + 5; ++index3)
        {
          int index4 = index2;
          int index5 = index2;
          bool flag1 = false;
          if (Main.tile[index4, index3].active())
          {
            flag1 = true;
          }
          else
          {
            while (!Main.tile[index4, index3].active())
            {
              --index4;
              if (!Main.tileDungeon[(int) Main.tile[index4, index3].type])
                flag1 = true;
            }
            while (!Main.tile[index5, index3].active())
            {
              ++index5;
              if (!Main.tileDungeon[(int) Main.tile[index5, index3].type])
                flag1 = true;
            }
          }
          if (!flag1 && index5 - index4 <= num14)
          {
            bool flag2 = true;
            int num18 = index2 - num14 / 2 - 2;
            int num19 = index2 + num14 / 2 + 2;
            int num20 = index3 - 5;
            int num21 = index3 + 5;
            for (int index6 = num18; index6 <= num19; ++index6)
            {
              for (int index7 = num20; index7 <= num21; ++index7)
              {
                if (Main.tile[index6, index7].active() && (int) Main.tile[index6, index7].type == 19)
                {
                  flag2 = false;
                  break;
                }
              }
            }
            for (int index6 = index3 + 3; index6 >= index3 - 5; --index6)
            {
              if (Main.tile[index2, index6].active())
              {
                flag2 = false;
                break;
              }
            }
            if (flag2)
            {
              num13 = index3;
              break;
            }
          }
        }
        if (num13 > num12 - 10 && num13 < num12 + 10)
        {
          int index3 = index2;
          int index4 = num13;
          int index5 = index2 + 1;
          for (; !Main.tile[index3, index4].active(); --index3)
          {
            Main.tile[index3, index4].active(true);
            Main.tile[index3, index4].type = (ushort) 19;
            if (wallType == 7)
              Main.tile[index3, index4].frameY = (short) 108;
            if (wallType == 8)
              Main.tile[index3, index4].frameY = (short) 144;
            if (wallType == 9)
              Main.tile[index3, index4].frameY = (short) 126;
          }
          for (; !Main.tile[index5, index4].active(); ++index5)
          {
            Main.tile[index5, index4].active(true);
            Main.tile[index5, index4].type = (ushort) 19;
            if (wallType == 7)
              Main.tile[index5, index4].frameY = (short) 108;
            if (wallType == 8)
              Main.tile[index5, index4].frameY = (short) 144;
            if (wallType == 9)
              Main.tile[index5, index4].frameY = (short) 126;
          }
        }
      }
      for (int index = 0; index < 4; ++index)
      {
        bool flag = false;
        while (!flag)
        {
          int i = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
          int j = WorldGen.genRand.Next((int) Main.worldSurface, WorldGen.dMaxY);
          if (Main.wallDungeon[(int) Main.tile[i, j].wall] && !Main.tile[i, j].active())
          {
            int contain = 0;
            int Style = 0;
            if (index == 0)
            {
              Style = 23;
              contain = 1156;
            }
            else if (index == 1)
            {
              if (!WorldGen.crimson)
              {
                Style = 24;
                contain = 1571;
              }
              else
              {
                Style = 25;
                contain = 1569;
              }
            }
            else if (index == 2)
            {
              Style = 26;
              contain = 1260;
            }
            else if (index == 3)
            {
              Style = 27;
              contain = 1572;
            }
            flag = WorldGen.AddBuriedChest(i, j, contain, false, Style);
          }
        }
      }
      int[] numArray = new int[3]
      {
        WorldGen.genRand.Next(9, 13),
        WorldGen.genRand.Next(9, 13),
        0
      };
      while (numArray[1] == numArray[0])
        numArray[1] = WorldGen.genRand.Next(9, 13);
      numArray[2] = WorldGen.genRand.Next(9, 13);
      while (numArray[2] == numArray[0] || numArray[2] == numArray[1])
        numArray[2] = WorldGen.genRand.Next(9, 13);
      Main.statusText = Lang.gen[58].Value + " 90%";
      int num25 = 0;
      int num26 = 1000;
      int num27 = 0;
      while (num27 < Main.maxTilesX / 20)
      {
        ++num25;
        int index1 = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
        int index2 = WorldGen.genRand.Next(WorldGen.dMinY, WorldGen.dMaxY);
        bool flag1 = true;
        if (Main.wallDungeon[(int) Main.tile[index1, index2].wall] && !Main.tile[index1, index2].active())
        {
          int num12 = 1;
          if (WorldGen.genRand.Next(2) == 0)
            num12 = -1;
          while (flag1 && !Main.tile[index1, index2].active())
          {
            index1 -= num12;
            if (index1 < 5 || index1 > Main.maxTilesX - 5)
              flag1 = false;
            else if (Main.tile[index1, index2].active() && !Main.tileDungeon[(int) Main.tile[index1, index2].type])
              flag1 = false;
          }
          if (flag1 && Main.tile[index1, index2].active() && (Main.tileDungeon[(int) Main.tile[index1, index2].type] && Main.tile[index1, index2 - 1].active()) && (Main.tileDungeon[(int) Main.tile[index1, index2 - 1].type] && Main.tile[index1, index2 + 1].active() && Main.tileDungeon[(int) Main.tile[index1, index2 + 1].type]))
          {
            int i1 = index1 + num12;
            for (int index3 = i1 - 3; index3 <= i1 + 3; ++index3)
            {
              for (int index4 = index2 - 3; index4 <= index2 + 3; ++index4)
              {
                if (Main.tile[index3, index4].active() && (int) Main.tile[index3, index4].type == 19)
                {
                  flag1 = false;
                  break;
                }
              }
            }
            if (flag1 && !Main.tile[i1, index2 - 1].active() & !Main.tile[i1, index2 - 2].active() & !Main.tile[i1, index2 - 3].active())
            {
              int index3 = i1;
              int num13 = i1;
              while (index3 > WorldGen.dMinX && index3 < WorldGen.dMaxX && (!Main.tile[index3, index2].active() && !Main.tile[index3, index2 - 1].active()) && !Main.tile[index3, index2 + 1].active())
                index3 += num12;
              int num14 = Math.Abs(i1 - index3);
              bool flag2 = false;
              if (WorldGen.genRand.Next(2) == 0)
                flag2 = true;
              if (num14 > 5)
              {
                for (int index4 = WorldGen.genRand.Next(1, 4); index4 > 0; --index4)
                {
                  Main.tile[i1, index2].active(true);
                  Main.tile[i1, index2].type = (ushort) 19;
                  if ((int) Main.tile[i1, index2].wall == roomWall[0])
                    Main.tile[i1, index2].frameY = (short) (18 * numArray[0]);
                  if ((int) Main.tile[i1, index2].wall == roomWall[1])
                    Main.tile[i1, index2].frameY = (short) (18 * numArray[1]);
                  if ((int) Main.tile[i1, index2].wall == roomWall[2])
                    Main.tile[i1, index2].frameY = (short) (18 * numArray[2]);
                  if (flag2)
                  {
                    WorldGen.PlaceTile(i1, index2 - 1, 50, true, false, -1, 0);
                    if (WorldGen.genRand.Next(50) == 0 && (int) Main.tile[i1, index2 - 1].type == 50)
                      Main.tile[i1, index2 - 1].frameX = (short) 90;
                  }
                  i1 += num12;
                }
                num25 = 0;
                ++num27;
                if (!flag2 && WorldGen.genRand.Next(2) == 0)
                {
                  int i2 = num13;
                  int j = index2 - 1;
                  int type = 0;
                  if (WorldGen.genRand.Next(4) == 0)
                    type = 1;
                  if (type == 0)
                    type = 13;
                  else if (type == 1)
                    type = 49;
                  WorldGen.PlaceTile(i2, j, type, true, false, -1, 0);
                  if ((int) Main.tile[i2, j].type == 13)
                    Main.tile[i2, j].frameX = WorldGen.genRand.Next(2) != 0 ? (short) 36 : (short) 18;
                }
              }
            }
          }
        }
        if (num25 > num26)
        {
          num25 = 0;
          ++num27;
        }
      }
      Main.statusText = Lang.gen[58].Value + " 95%";
      int num28 = 1;
      for (int index = 0; index < WorldGen.numDRooms; ++index)
      {
        int num12 = 0;
        while (num12 < 1000)
        {
          int num13 = (int) ((double) WorldGen.dRoomSize[index] * 0.4);
          int i = WorldGen.dRoomX[index] + WorldGen.genRand.Next(-num13, num13 + 1);
          int j = WorldGen.dRoomY[index] + WorldGen.genRand.Next(-num13, num13 + 1);
          int Style = 2;
          int contain;
          if (num28 == 1)
            contain = 329;
          else if (num28 == 2)
            contain = 155;
          else if (num28 == 3)
            contain = 156;
          else if (num28 == 4)
            contain = 157;
          else if (num28 == 5)
            contain = 163;
          else if (num28 == 6)
            contain = 113;
          else if (num28 == 7)
            contain = 3317;
          else if (num28 == 8)
          {
            contain = 327;
            Style = 0;
          }
          else
          {
            contain = 164;
            num28 = 0;
          }
          if ((double) j < Main.worldSurface + 50.0)
          {
            contain = 327;
            Style = 0;
          }
          if (contain == 0 && WorldGen.genRand.Next(2) == 0)
          {
            num12 = 1000;
          }
          else
          {
            if (WorldGen.AddBuriedChest(i, j, contain, false, Style))
            {
              num12 += 1000;
              ++num28;
            }
            ++num12;
          }
        }
      }
      WorldGen.dMinX -= 25;
      WorldGen.dMaxX += 25;
      WorldGen.dMinY -= 25;
      WorldGen.dMaxY += 25;
      if (WorldGen.dMinX < 0)
        WorldGen.dMinX = 0;
      if (WorldGen.dMaxX > Main.maxTilesX)
        WorldGen.dMaxX = Main.maxTilesX;
      if (WorldGen.dMinY < 0)
        WorldGen.dMinY = 0;
      if (WorldGen.dMaxY > Main.maxTilesY)
        WorldGen.dMaxY = Main.maxTilesY;
      int failCount = 0;
      int failMax1 = 1000;
      int numAdd = 0;
      WorldGen.MakeDungeon_Lights(tileType, ref failCount, failMax1, ref numAdd, roomWall);
      failCount = 0;
      int failMax2 = 1000;
      numAdd = 0;
      WorldGen.MakeDungeon_Traps(ref failCount, failMax2, ref numAdd);
      float count1 = WorldGen.MakeDungeon_GroundFurniture(wallType);
      float count2 = WorldGen.MakeDungeon_Pictures(roomWall, count1);
      WorldGen.MakeDungeon_Banners(roomWall, count2);
    }

    private static void MakeDungeon_Traps(ref int failCount, int failMax, ref int numAdd)
    {
      while (numAdd < Main.maxTilesX / 500)
      {
        failCount = failCount + 1;
        int x2 = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
        int y2 = WorldGen.genRand.Next(WorldGen.dMinY, WorldGen.dMaxY);
        while ((double) y2 < Main.worldSurface)
          y2 = WorldGen.genRand.Next(WorldGen.dMinY, WorldGen.dMaxY);
        if (Main.wallDungeon[(int) Main.tile[x2, y2].wall] && WorldGen.placeTrap(x2, y2, 0))
          failCount = failMax;
        if (failCount > failMax)
        {
          numAdd = numAdd + 1;
          failCount = 0;
        }
      }
    }

    private static void MakeDungeon_Lights(ushort tileType, ref int failCount, int failMax, ref int numAdd, int[] roomWall)
    {
      int[] numArray = new int[3]
      {
        WorldGen.genRand.Next(7),
        WorldGen.genRand.Next(7),
        0
      };
      while (numArray[1] == numArray[0])
        numArray[1] = WorldGen.genRand.Next(7);
      numArray[2] = WorldGen.genRand.Next(7);
      while (numArray[2] == numArray[0] || numArray[2] == numArray[1])
        numArray[2] = WorldGen.genRand.Next(7);
      while (numAdd < Main.maxTilesX / 150)
      {
        failCount = failCount + 1;
        int index1 = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
        int index2 = WorldGen.genRand.Next(WorldGen.dMinY, WorldGen.dMaxY);
        if (Main.wallDungeon[(int) Main.tile[index1, index2].wall])
        {
          for (int y = index2; y > WorldGen.dMinY; --y)
          {
            if (Main.tile[index1, y - 1].active() && (int) Main.tile[index1, y - 1].type == (int) tileType)
            {
              bool flag1 = false;
              for (int index3 = index1 - 15; index3 < index1 + 15; ++index3)
              {
                for (int index4 = y - 15; index4 < y + 15; ++index4)
                {
                  if (index3 > 0 && index3 < Main.maxTilesX && (index4 > 0 && index4 < Main.maxTilesY) && ((int) Main.tile[index3, index4].type == 42 || (int) Main.tile[index3, index4].type == 34))
                  {
                    flag1 = true;
                    break;
                  }
                }
              }
              if (Main.tile[index1 - 1, y].active() || Main.tile[index1 + 1, y].active() || (Main.tile[index1 - 1, y + 1].active() || Main.tile[index1 + 1, y + 1].active()) || Main.tile[index1, y + 2].active())
                flag1 = true;
              if (!flag1)
              {
                bool flag2 = false;
                if (!flag2 && WorldGen.genRand.Next(7) == 0)
                {
                  int style = 27;
                  switch (roomWall[0])
                  {
                    case 7:
                      style = 27;
                      break;
                    case 8:
                      style = 28;
                      break;
                    case 9:
                      style = 29;
                      break;
                  }
                  bool flag3 = false;
                  for (int index3 = 0; index3 < 15; ++index3)
                  {
                    if (WorldGen.SolidTile(index1, y + index3))
                    {
                      flag3 = true;
                      break;
                    }
                  }
                  if (!flag3)
                    WorldGen.PlaceChand(index1, y, (ushort) 34, style);
                  if ((int) Main.tile[index1, y].type == 34)
                  {
                    flag2 = true;
                    failCount = 0;
                    numAdd = numAdd + 1;
                    for (int index3 = 0; index3 < 1000; ++index3)
                    {
                      int i = index1 + WorldGen.genRand.Next(-12, 13);
                      int j = y + WorldGen.genRand.Next(3, 21);
                      if (!Main.tile[i, j].active() && !Main.tile[i, j + 1].active() && ((int) Main.tile[i - 1, j].type != 48 && (int) Main.tile[i + 1, j].type != 48) && Collision.CanHit(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, new Vector2((float) (index1 * 16), (float) (y * 16 + 1)), 16, 16))
                      {
                        if (WorldGen.SolidTile(i - 1, j) && (int) Main.tile[i - 1, j].type != 10 || WorldGen.SolidTile(i + 1, j) && (int) Main.tile[i + 1, j].type != 10 || WorldGen.SolidTile(i, j + 1))
                          WorldGen.PlaceTile(i, j, 136, true, false, -1, 0);
                        if (Main.tile[i, j].active())
                        {
                          while (i != index1 || j != y)
                          {
                            Main.tile[i, j].wire(true);
                            if (i > index1)
                              --i;
                            if (i < index1)
                              ++i;
                            Main.tile[i, j].wire(true);
                            if (j > y)
                              --j;
                            if (j < y)
                              ++j;
                            Main.tile[i, j].wire(true);
                          }
                          if (WorldGen.genRand.Next(3) > 0)
                          {
                            Main.tile[index1, y].frameX = (short) 18;
                            Main.tile[index1, y + 1].frameX = (short) 18;
                            break;
                          }
                          break;
                        }
                      }
                    }
                  }
                }
                if (!flag2)
                {
                  int style = numArray[0];
                  if ((int) Main.tile[index1, y].wall == roomWall[1])
                    style = numArray[1];
                  if ((int) Main.tile[index1, y].wall == roomWall[2])
                    style = numArray[2];
                  WorldGen.Place1x2Top(index1, y, (ushort) 42, style);
                  if ((int) Main.tile[index1, y].type == 42)
                  {
                    failCount = 0;
                    numAdd = numAdd + 1;
                    for (int index3 = 0; index3 < 1000; ++index3)
                    {
                      int i = index1 + WorldGen.genRand.Next(-12, 13);
                      int j = y + WorldGen.genRand.Next(3, 21);
                      if (!Main.tile[i, j].active() && !Main.tile[i, j + 1].active() && ((int) Main.tile[i - 1, j].type != 48 && (int) Main.tile[i + 1, j].type != 48) && Collision.CanHit(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, new Vector2((float) (index1 * 16), (float) (y * 16 + 1)), 16, 16))
                      {
                        if (WorldGen.SolidTile(i - 1, j) && (int) Main.tile[i - 1, j].type != 10 || WorldGen.SolidTile(i + 1, j) && (int) Main.tile[i + 1, j].type != 10 || WorldGen.SolidTile(i, j + 1))
                          WorldGen.PlaceTile(i, j, 136, true, false, -1, 0);
                        if (Main.tile[i, j].active())
                        {
                          while (i != index1 || j != y)
                          {
                            Main.tile[i, j].wire(true);
                            if (i > index1)
                              --i;
                            if (i < index1)
                              ++i;
                            Main.tile[i, j].wire(true);
                            if (j > y)
                              --j;
                            if (j < y)
                              ++j;
                            Main.tile[i, j].wire(true);
                          }
                          if (WorldGen.genRand.Next(3) > 0)
                          {
                            Main.tile[index1, y].frameX = (short) 18;
                            Main.tile[index1, y + 1].frameX = (short) 18;
                            break;
                          }
                          break;
                        }
                      }
                    }
                    break;
                  }
                  break;
                }
                break;
              }
              break;
            }
          }
        }
        if (failCount > failMax)
        {
          numAdd = numAdd + 1;
          failCount = 0;
        }
      }
    }

    private static float MakeDungeon_Banners(int[] roomWall, float count)
    {
      count = 840000f / (float) Main.maxTilesX;
      for (int index1 = 0; (double) index1 < (double) count; ++index1)
      {
        int i = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
        int j1;
        for (j1 = WorldGen.genRand.Next(WorldGen.dMinY, WorldGen.dMaxY); !Main.wallDungeon[(int) Main.tile[i, j1].wall] || Main.tile[i, j1].active(); j1 = WorldGen.genRand.Next(WorldGen.dMinY, WorldGen.dMaxY))
          i = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
        while (!WorldGen.SolidTile(i, j1) && j1 > 10)
          --j1;
        int j2 = j1 + 1;
        if (Main.wallDungeon[(int) Main.tile[i, j2].wall] && (int) Main.tile[i, j2 - 1].type != 48 && (!Main.tile[i, j2].active() && !Main.tile[i, j2 + 1].active()) && (!Main.tile[i, j2 + 2].active() && !Main.tile[i, j2 + 3].active()))
        {
          bool flag = true;
          for (int index2 = i - 1; index2 <= i + 1; ++index2)
          {
            for (int index3 = j2; index3 <= j2 + 3; ++index3)
            {
              if (Main.tile[index2, index3].active() && ((int) Main.tile[index2, index3].type == 10 || (int) Main.tile[index2, index3].type == 11 || (int) Main.tile[index2, index3].type == 91))
                flag = false;
            }
          }
          if (flag)
          {
            int num = 10;
            if ((int) Main.tile[i, j2].wall == roomWall[1])
              num = 12;
            if ((int) Main.tile[i, j2].wall == roomWall[2])
              num = 14;
            int style = num + WorldGen.genRand.Next(2);
            WorldGen.PlaceTile(i, j2, 91, true, false, -1, style);
          }
        }
      }
      return count;
    }

    private static float MakeDungeon_Pictures(int[] roomWall, float count)
    {
      count = 420000f / (float) Main.maxTilesX;
      for (int index1 = 0; (double) index1 < (double) count; ++index1)
      {
        int index2 = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
        int index3;
        for (index3 = WorldGen.genRand.Next((int) Main.worldSurface, WorldGen.dMaxY); !Main.wallDungeon[(int) Main.tile[index2, index3].wall] || Main.tile[index2, index3].active(); index3 = WorldGen.genRand.Next((int) Main.worldSurface, WorldGen.dMaxY))
          index2 = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
        for (int index4 = 0; index4 < 2; ++index4)
        {
          int index5 = index2;
          int index6 = index2;
          while (!Main.tile[index5, index3].active() && Main.wallDungeon[(int) Main.tile[index5, index3].wall])
            --index5;
          int num1 = index5 + 1;
          while (!Main.tile[index6, index3].active() && Main.wallDungeon[(int) Main.tile[index6, index3].wall])
            ++index6;
          int num2 = index6 - 1;
          index2 = (num1 + num2) / 2;
          int index7 = index3;
          int index8 = index3;
          while (!Main.tile[index2, index7].active() && Main.wallDungeon[(int) Main.tile[index2, index7].wall])
            --index7;
          int num3 = index7 + 1;
          while (!Main.tile[index2, index8].active() && Main.wallDungeon[(int) Main.tile[index2, index8].wall])
            ++index8;
          int num4 = index8 - 1;
          index3 = (num3 + num4) / 2;
        }
        int index9 = index2;
        int index10 = index2;
        while (!Main.tile[index9, index3].active() && !Main.tile[index9, index3 - 1].active() && !Main.tile[index9, index3 + 1].active())
          --index9;
        int num5 = index9 + 1;
        while (!Main.tile[index10, index3].active() && !Main.tile[index10, index3 - 1].active() && !Main.tile[index10, index3 + 1].active())
          ++index10;
        int num6 = index10 - 1;
        int index11 = index3;
        int index12 = index3;
        while (!Main.tile[index2, index11].active() && !Main.tile[index2 - 1, index11].active() && !Main.tile[index2 + 1, index11].active())
          --index11;
        int num7 = index11 + 1;
        while (!Main.tile[index2, index12].active() && !Main.tile[index2 - 1, index12].active() && !Main.tile[index2 + 1, index12].active())
          ++index12;
        int num8 = index12 - 1;
        int index13 = (num5 + num6) / 2;
        int index14 = (num7 + num8) / 2;
        int num9 = num6 - num5;
        int num10 = num8 - num7;
        if (num9 > 7 && num10 > 5)
        {
          bool[] flagArray = new bool[3]
          {
            true,
            false,
            false
          };
          if (num9 > num10 * 3 && num9 > 21)
            flagArray[1] = true;
          if (num10 > num9 * 3 && num10 > 21)
            flagArray[2] = true;
          int index4 = WorldGen.genRand.Next(3);
          if ((int) Main.tile[index13, index14].wall == roomWall[0])
            index4 = 0;
          while (!flagArray[index4])
            index4 = WorldGen.genRand.Next(3);
          if (WorldGen.nearPicture2(index13, index14))
            index4 = -1;
          if (index4 == 0)
          {
            Vector2 vector2 = WorldGen.randPictureTile();
            if ((int) Main.tile[index13, index14].wall != roomWall[0])
              vector2 = WorldGen.randBoneTile();
            int x = (int) vector2.X;
            int y = (int) vector2.Y;
            if (!WorldGen.nearPicture(index13, index14))
              WorldGen.PlaceTile(index13, index14, x, true, false, -1, y);
          }
          else if (index4 == 1)
          {
            Vector2 vector2_1 = WorldGen.randPictureTile();
            if ((int) Main.tile[index13, index14].wall != roomWall[0])
              vector2_1 = WorldGen.randBoneTile();
            int x1 = (int) vector2_1.X;
            int y1 = (int) vector2_1.Y;
            if (!Main.tile[index13, index14].active())
              WorldGen.PlaceTile(index13, index14, x1, true, false, -1, y1);
            int num1 = index13;
            int num2 = index14;
            int index5 = index14;
            for (int index6 = 0; index6 < 2; ++index6)
            {
              index13 += 7;
              int index7 = index5;
              int index8 = index5;
              while (!Main.tile[index13, index7].active() && !Main.tile[index13 - 1, index7].active() && !Main.tile[index13 + 1, index7].active())
                --index7;
              int num3 = index7 + 1;
              while (!Main.tile[index13, index8].active() && !Main.tile[index13 - 1, index8].active() && !Main.tile[index13 + 1, index8].active())
                ++index8;
              int num4 = index8 - 1;
              index5 = (num3 + num4) / 2;
              Vector2 vector2_2 = WorldGen.randPictureTile();
              if ((int) Main.tile[index13, index5].wall != roomWall[0])
                vector2_2 = WorldGen.randBoneTile();
              int x2 = (int) vector2_2.X;
              int y2 = (int) vector2_2.Y;
              if (Math.Abs(num2 - index5) < 4 && !WorldGen.nearPicture(index13, index5))
                WorldGen.PlaceTile(index13, index5, x2, true, false, -1, y2);
              else
                break;
            }
            int index15 = index14;
            int index16 = num1;
            for (int index6 = 0; index6 < 2; ++index6)
            {
              index16 -= 7;
              int index7 = index15;
              int index8 = index15;
              while (!Main.tile[index16, index7].active() && !Main.tile[index16 - 1, index7].active() && !Main.tile[index16 + 1, index7].active())
                --index7;
              int num3 = index7 + 1;
              while (!Main.tile[index16, index8].active() && !Main.tile[index16 - 1, index8].active() && !Main.tile[index16 + 1, index8].active())
                ++index8;
              int num4 = index8 - 1;
              index15 = (num3 + num4) / 2;
              Vector2 vector2_2 = WorldGen.randPictureTile();
              if ((int) Main.tile[index16, index15].wall != roomWall[0])
                vector2_2 = WorldGen.randBoneTile();
              int x2 = (int) vector2_2.X;
              int y2 = (int) vector2_2.Y;
              if (Math.Abs(num2 - index15) < 4 && !WorldGen.nearPicture(index16, index15))
                WorldGen.PlaceTile(index16, index15, x2, true, false, -1, y2);
              else
                break;
            }
          }
          else if (index4 == 2)
          {
            Vector2 vector2_1 = WorldGen.randPictureTile();
            if ((int) Main.tile[index13, index14].wall != roomWall[0])
              vector2_1 = WorldGen.randBoneTile();
            int x1 = (int) vector2_1.X;
            int y1 = (int) vector2_1.Y;
            if (!Main.tile[index13, index14].active())
              WorldGen.PlaceTile(index13, index14, x1, true, false, -1, y1);
            int num1 = index14;
            int num2 = index13;
            int index5 = index13;
            for (int index6 = 0; index6 < 3; ++index6)
            {
              index14 += 7;
              int index7 = index5;
              int index8 = index5;
              while (!Main.tile[index7, index14].active() && !Main.tile[index7, index14 - 1].active() && !Main.tile[index7, index14 + 1].active())
                --index7;
              int num3 = index7 + 1;
              while (!Main.tile[index8, index14].active() && !Main.tile[index8, index14 - 1].active() && !Main.tile[index8, index14 + 1].active())
                ++index8;
              int num4 = index8 - 1;
              index5 = (num3 + num4) / 2;
              Vector2 vector2_2 = WorldGen.randPictureTile();
              if ((int) Main.tile[index5, index14].wall != roomWall[0])
                vector2_2 = WorldGen.randBoneTile();
              int x2 = (int) vector2_2.X;
              int y2 = (int) vector2_2.Y;
              if (Math.Abs(num2 - index5) < 4 && !WorldGen.nearPicture(index5, index14))
                WorldGen.PlaceTile(index5, index14, x2, true, false, -1, y2);
              else
                break;
            }
            int index15 = index13;
            int index16 = num1;
            for (int index6 = 0; index6 < 3; ++index6)
            {
              index16 -= 7;
              int index7 = index15;
              int index8 = index15;
              while (!Main.tile[index7, index16].active() && !Main.tile[index7, index16 - 1].active() && !Main.tile[index7, index16 + 1].active())
                --index7;
              int num3 = index7 + 1;
              while (!Main.tile[index8, index16].active() && !Main.tile[index8, index16 - 1].active() && !Main.tile[index8, index16 + 1].active())
                ++index8;
              int num4 = index8 - 1;
              index15 = (num3 + num4) / 2;
              Vector2 vector2_2 = WorldGen.randPictureTile();
              if ((int) Main.tile[index15, index16].wall != roomWall[0])
                vector2_2 = WorldGen.randBoneTile();
              int x2 = (int) vector2_2.X;
              int y2 = (int) vector2_2.Y;
              if (Math.Abs(num2 - index15) < 4 && !WorldGen.nearPicture(index15, index16))
                WorldGen.PlaceTile(index15, index16, x2, true, false, -1, y2);
              else
                break;
            }
          }
        }
      }
      return count;
    }

    private static float MakeDungeon_GroundFurniture(int wallType)
    {
      float num1 = (float) (2000.0 * (double) Main.maxTilesX / 4200.0);
      int num2 = 1 + Main.maxTilesX / 4200;
      int num3 = 1 + Main.maxTilesX / 4200;
      for (int index1 = 0; (double) index1 < (double) num1; ++index1)
      {
        if (num2 > 0 || num3 > 0)
          --index1;
        int i1 = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
        int j;
        for (j = WorldGen.genRand.Next((int) Main.worldSurface + 10, WorldGen.dMaxY); !Main.wallDungeon[(int) Main.tile[i1, j].wall] || Main.tile[i1, j].active(); j = WorldGen.genRand.Next((int) Main.worldSurface + 10, WorldGen.dMaxY))
          i1 = WorldGen.genRand.Next(WorldGen.dMinX, WorldGen.dMaxX);
        if (Main.wallDungeon[(int) Main.tile[i1, j].wall] && !Main.tile[i1, j].active())
        {
          while (!WorldGen.SolidTile(i1, j) && j < Main.maxTilesY - 200)
            ++j;
          int index2 = j - 1;
          int i2 = i1;
          int i3 = i1;
          while (!Main.tile[i2, index2].active() && WorldGen.SolidTile(i2, index2 + 1))
            --i2;
          int num4 = i2 + 1;
          while (!Main.tile[i3, index2].active() && WorldGen.SolidTile(i3, index2 + 1))
            ++i3;
          int num5 = i3 - 1;
          int num6 = num5 - num4;
          int index3 = (num5 + num4) / 2;
          if (!Main.tile[index3, index2].active() && Main.wallDungeon[(int) Main.tile[index3, index2].wall] && (WorldGen.SolidTile(index3, index2 + 1) && (int) Main.tile[index3, index2 + 1].type != 48))
          {
            int style1 = 13;
            int style2 = 10;
            int style3 = 11;
            int style4 = 1;
            int style5 = 46;
            int style6 = 1;
            int style7 = 5;
            int style8 = 11;
            int style9 = 5;
            int style10 = 6;
            int style11 = 21;
            int style12 = 22;
            int style13 = 24;
            int style14 = 30;
            if (wallType == 8)
            {
              style1 = 14;
              style2 = 11;
              style3 = 12;
              style4 = 2;
              style5 = 47;
              style6 = 2;
              style7 = 6;
              style8 = 12;
              style9 = 6;
              style10 = 7;
              style11 = 22;
              style12 = 23;
              style13 = 25;
              style14 = 31;
            }
            else if (wallType == 9)
            {
              style1 = 15;
              style2 = 12;
              style3 = 13;
              style4 = 3;
              style5 = 48;
              style6 = 3;
              style7 = 7;
              style8 = 13;
              style9 = 7;
              style10 = 8;
              style11 = 23;
              style12 = 24;
              style13 = 26;
              style14 = 32;
            }
            if ((int) Main.tile[index3, index2].wall >= 94 && (int) Main.tile[index3, index2].wall <= 105)
            {
              style1 = 17;
              style2 = 14;
              style3 = 15;
              style4 = -1;
              style5 = -1;
              style6 = 5;
              style7 = -1;
              style8 = -1;
              style9 = -1;
              style10 = -1;
              style11 = -1;
              style12 = -1;
              style13 = -1;
              style14 = -1;
            }
            int num7 = WorldGen.genRand.Next(13);
            if ((num7 == 10 || num7 == 11 || num7 == 12) && WorldGen.genRand.Next(4) != 0)
              num7 = WorldGen.genRand.Next(13);
            while (num7 == 2 && style5 == -1 || num7 == 5 && style7 == -1 || (num7 == 6 && style8 == -1 || num7 == 7 && style9 == -1) || (num7 == 8 && style10 == -1 || num7 == 9 && style11 == -1 || (num7 == 10 && style12 == -1 || num7 == 11 && style13 == -1)) || num7 == 12 && style14 == -1)
              num7 = WorldGen.genRand.Next(13);
            int num8 = 0;
            int num9 = 0;
            if (num7 == 0)
            {
              num8 = 5;
              num9 = 4;
            }
            if (num7 == 1)
            {
              num8 = 4;
              num9 = 3;
            }
            if (num7 == 2)
            {
              num8 = 3;
              num9 = 5;
            }
            if (num7 == 3)
            {
              num8 = 4;
              num9 = 6;
            }
            if (num7 == 4)
            {
              num8 = 3;
              num9 = 3;
            }
            if (num7 == 5)
            {
              num8 = 5;
              num9 = 3;
            }
            if (num7 == 6)
            {
              num8 = 5;
              num9 = 4;
            }
            if (num7 == 7)
            {
              num8 = 5;
              num9 = 4;
            }
            if (num7 == 8)
            {
              num8 = 5;
              num9 = 4;
            }
            if (num7 == 9)
            {
              num8 = 5;
              num9 = 3;
            }
            if (num7 == 10)
            {
              num8 = 2;
              num9 = 4;
            }
            if (num7 == 11)
            {
              num8 = 3;
              num9 = 3;
            }
            if (num7 == 12)
            {
              num8 = 2;
              num9 = 5;
            }
            for (int index4 = index3 - num8; index4 <= index3 + num8; ++index4)
            {
              for (int index5 = index2 - num9; index5 <= index2; ++index5)
              {
                if (Main.tile[index4, index5].active())
                {
                  num7 = -1;
                  break;
                }
              }
            }
            if ((double) num6 < (double) num8 * 1.75)
              num7 = -1;
            if (num2 > 0 || num3 > 0)
            {
              if (num2 > 0)
              {
                WorldGen.PlaceTile(index3, index2, 355, true, false, -1, 0);
                if ((int) Main.tile[index3, index2].type == 355)
                  --num2;
              }
              else if (num3 > 0)
              {
                WorldGen.PlaceTile(index3, index2, 354, true, false, -1, 0);
                if ((int) Main.tile[index3, index2].type == 354)
                  --num3;
              }
            }
            else if (num7 == 0)
            {
              WorldGen.PlaceTile(index3, index2, 14, true, false, -1, style2);
              if (Main.tile[index3, index2].active())
              {
                if (!Main.tile[index3 - 2, index2].active())
                {
                  WorldGen.PlaceTile(index3 - 2, index2, 15, true, false, -1, style1);
                  if (Main.tile[index3 - 2, index2].active())
                  {
                    Main.tile[index3 - 2, index2].frameX += (short) 18;
                    Main.tile[index3 - 2, index2 - 1].frameX += (short) 18;
                  }
                }
                if (!Main.tile[index3 + 2, index2].active())
                  WorldGen.PlaceTile(index3 + 2, index2, 15, true, false, -1, style1);
              }
              for (int i4 = index3 - 1; i4 <= index3 + 1; ++i4)
              {
                if (WorldGen.genRand.Next(2) == 0 && !Main.tile[i4, index2 - 2].active())
                {
                  int num10 = WorldGen.genRand.Next(5);
                  if (style4 != -1 && num10 <= 1 && !Main.tileLighted[(int) Main.tile[i4 - 1, index2 - 2].type])
                    WorldGen.PlaceTile(i4, index2 - 2, 33, true, false, -1, style4);
                  if (num10 == 2 && !Main.tileLighted[(int) Main.tile[i4 - 1, index2 - 2].type])
                    WorldGen.PlaceTile(i4, index2 - 2, 49, true, false, -1, 0);
                  if (num10 == 3)
                    WorldGen.PlaceTile(i4, index2 - 2, 50, true, false, -1, 0);
                  if (num10 == 4)
                    WorldGen.PlaceTile(i4, index2 - 2, 103, true, false, -1, 0);
                }
              }
            }
            else if (num7 == 1)
            {
              WorldGen.PlaceTile(index3, index2, 18, true, false, -1, style3);
              if (Main.tile[index3, index2].active())
              {
                if (WorldGen.genRand.Next(2) == 0)
                {
                  if (!Main.tile[index3 - 1, index2].active())
                  {
                    WorldGen.PlaceTile(index3 - 1, index2, 15, true, false, -1, style1);
                    if (Main.tile[index3 - 1, index2].active())
                    {
                      Main.tile[index3 - 1, index2].frameX += (short) 18;
                      Main.tile[index3 - 1, index2 - 1].frameX += (short) 18;
                    }
                  }
                }
                else if (!Main.tile[index3 + 2, index2].active())
                  WorldGen.PlaceTile(index3 + 2, index2, 15, true, false, -1, style1);
                for (int i4 = index3; i4 <= index3 + 1; ++i4)
                {
                  if (WorldGen.genRand.Next(2) == 0 && !Main.tile[i4, index2 - 1].active())
                  {
                    int num10 = WorldGen.genRand.Next(5);
                    if (style4 != -1 && num10 <= 1 && !Main.tileLighted[(int) Main.tile[i4 - 1, index2 - 1].type])
                      WorldGen.PlaceTile(i4, index2 - 1, 33, true, false, -1, style4);
                    if (num10 == 2 && !Main.tileLighted[(int) Main.tile[i4 - 1, index2 - 1].type])
                      WorldGen.PlaceTile(i4, index2 - 1, 49, true, false, -1, 0);
                    if (num10 == 3)
                      WorldGen.PlaceTile(i4, index2 - 1, 50, true, false, -1, 0);
                    if (num10 == 4)
                      WorldGen.PlaceTile(i4, index2 - 1, 103, true, false, -1, 0);
                  }
                }
              }
            }
            else if (num7 == 2)
              WorldGen.PlaceTile(index3, index2, 105, true, false, -1, style5);
            else if (num7 == 3)
              WorldGen.PlaceTile(index3, index2, 101, true, false, -1, style6);
            else if (num7 == 4)
            {
              if (WorldGen.genRand.Next(2) == 0)
              {
                WorldGen.PlaceTile(index3, index2, 15, true, false, -1, style1);
                Main.tile[index3, index2].frameX += (short) 18;
                Main.tile[index3, index2 - 1].frameX += (short) 18;
              }
              else
                WorldGen.PlaceTile(index3, index2, 15, true, false, -1, style1);
            }
            else if (num7 == 5)
            {
              if (WorldGen.genRand.Next(2) == 0)
                WorldGen.Place4x2(index3, index2, (ushort) 79, 1, style7);
              else
                WorldGen.Place4x2(index3, index2, (ushort) 79, -1, style7);
            }
            else if (num7 == 6)
              WorldGen.PlaceTile(index3, index2, 87, true, false, -1, style8);
            else if (num7 == 7)
              WorldGen.PlaceTile(index3, index2, 88, true, false, -1, style9);
            else if (num7 == 8)
              WorldGen.PlaceTile(index3, index2, 89, true, false, -1, style10);
            else if (num7 == 9)
            {
              if (WorldGen.genRand.Next(2) == 0)
                WorldGen.Place4x2(index3, index2, (ushort) 90, 1, style11);
              else
                WorldGen.Place4x2(index3, index2, (ushort) 90, -1, style11);
            }
            else if (num7 == 10)
              WorldGen.PlaceTile(index3, index2, 93, true, false, -1, style13);
            else if (num7 == 11)
              WorldGen.PlaceTile(index3, index2, 100, true, false, -1, style12);
            else if (num7 == 12)
              WorldGen.PlaceTile(index3, index2, 104, true, false, -1, style14);
          }
        }
      }
      return num1;
    }

    public static Vector2 randBoneTile()
    {
      int num1 = WorldGen.genRand.Next(2);
      int num2 = 0;
      if (num1 == 0)
      {
        num1 = 240;
        num2 = WorldGen.genRand.Next(2);
        switch (num2)
        {
          case 0:
            num2 = 16;
            break;
          case 1:
            num2 = 17;
            break;
        }
      }
      else if (num1 == 1)
      {
        num1 = 241;
        num2 = WorldGen.genRand.Next(9);
      }
      return new Vector2((float) num1, (float) num2);
    }

    public static Vector2 randHellPicture()
    {
      int num1 = WorldGen.genRand.Next(4);
      if (num1 == 1)
        num1 = WorldGen.genRand.Next(4);
      int num2;
      int num3;
      if (num1 == 0)
      {
        num2 = 240;
        num3 = WorldGen.genRand.Next(5);
        switch (num3)
        {
          case 0:
            num3 = 27;
            break;
          case 1:
            num3 = 29;
            break;
          case 2:
            num3 = 30;
            break;
          case 3:
            num3 = 31;
            break;
          case 4:
            num3 = 32;
            break;
        }
      }
      else if (num1 == 1)
      {
        num2 = 242;
        num3 = 14;
      }
      else if (num1 == 2)
      {
        num2 = 245;
        num3 = WorldGen.genRand.Next(3);
        switch (num3)
        {
          case 0:
            num3 = 1;
            break;
          case 1:
            num3 = 2;
            break;
          case 2:
            num3 = 4;
            break;
        }
      }
      else
      {
        num2 = 246;
        num3 = WorldGen.genRand.Next(3);
        switch (num3)
        {
          case 0:
            num3 = 0;
            break;
          case 1:
            num3 = 16;
            break;
          case 2:
            num3 = 17;
            break;
        }
      }
      return new Vector2((float) num2, (float) num3);
    }

    public static Vector2 randHousePicture()
    {
      int num1 = WorldGen.genRand.Next(4);
      int num2;
      int num3;
      if (num1 <= 1)
      {
        num2 = 240;
        int maxValue = 10;
        num3 = WorldGen.genRand.Next(maxValue);
        if (num3 == 9)
          num3 = WorldGen.genRand.Next(maxValue);
        if (num3 == 5)
          num3 = WorldGen.genRand.Next(maxValue);
        if (num3 == 6)
          num3 = WorldGen.genRand.Next(maxValue);
        if (num3 == 0)
          num3 = 26;
        else if (num3 == 1)
          num3 = 28;
        else if (num3 == 2)
          num3 = 20;
        else if (num3 == 3)
          num3 = 21;
        else if (num3 == 4)
          num3 = 22;
        else if (num3 == 5)
          num3 = 24;
        else if (num3 == 6)
          num3 = 25;
        else if (num3 == 7)
          num3 = 33;
        else if (num3 == 8)
          num3 = 34;
        else if (num3 == 9)
          num3 = 35;
      }
      else if (num1 == 2)
      {
        int maxValue = 4;
        num2 = 245;
        num3 = WorldGen.genRand.Next(maxValue);
        if (num3 == 2)
          num3 = WorldGen.genRand.Next(maxValue);
        if (num3 == 0)
          num3 = WorldGen.genRand.Next(maxValue);
        if (num3 == 0)
          num3 = WorldGen.genRand.Next(maxValue);
        if (num3 == 0)
          num3 = WorldGen.genRand.Next(maxValue);
        if (num3 == 0)
          num3 = 0;
        else if (num3 == 1)
          num3 = 3;
        else if (num3 == 2)
          num3 = 5;
        else if (num3 == 3)
          num3 = 6;
      }
      else
      {
        num2 = 246;
        num3 = 1;
      }
      return new Vector2((float) num2, (float) num3);
    }

    public static Vector2 randPictureTile()
    {
      int num1 = WorldGen.genRand.Next(3);
      int num2 = 0;
      if (num1 <= 1)
      {
        int maxValue = 7;
        num1 = 240;
        num2 = WorldGen.genRand.Next(maxValue);
        if (num2 == 6)
          num2 = WorldGen.genRand.Next(maxValue);
        if (num2 == 0)
          num2 = 12;
        else if (num2 == 1)
          num2 = 13;
        else if (num2 == 2)
          num2 = 14;
        else if (num2 == 3)
          num2 = 15;
        else if (num2 == 4)
          num2 = 18;
        else if (num2 == 5)
          num2 = 19;
        else if (num2 == 6)
          num2 = 23;
      }
      else if (num1 == 2)
      {
        num1 = 242;
        num2 = WorldGen.genRand.Next(17);
        if (num2 > 13)
        {
          if (num2 == 14)
            num2 = 15;
          else if (num2 == 15)
            num2 = 16;
          else if (num2 == 16)
            num2 = 30;
        }
      }
      return new Vector2((float) num1, (float) num2);
    }

    public static void DungeonStairs(int i, int j, ushort tileType, int wallType)
    {
      Vector2 zero = Vector2.get_Zero();
      double num1 = (double) WorldGen.genRand.Next(5, 9);
      Vector2 vector2;
      vector2.X = (__Null) (double) i;
      vector2.Y = (__Null) (double) j;
      int num2 = WorldGen.genRand.Next(10, 30);
      int num3 = i <= WorldGen.dEnteranceX ? 1 : -1;
      if (i > Main.maxTilesX - 400)
        num3 = -1;
      else if (i < 400)
        num3 = 1;
      zero.Y = (__Null) -1.0;
      zero.X = (__Null) (double) num3;
      if (WorldGen.genRand.Next(3) != 0)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local = @zero.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num4 = (double) ^(float&) local * (1.0 + (double) WorldGen.genRand.Next(0, 200) * 0.00999999977648258);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local = (float) num4;
      }
      else if (WorldGen.genRand.Next(3) == 0)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local = @zero.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num4 = (double) ^(float&) local * ((double) WorldGen.genRand.Next(50, 76) * 0.00999999977648258);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local = (float) num4;
      }
      else if (WorldGen.genRand.Next(6) == 0)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local = @zero.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num4 = (double) ^(float&) local * 2.0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local = (float) num4;
      }
      if (WorldGen.dungeonX < Main.maxTilesX / 2 && zero.X < 0.0 && (double) zero.X < 0.5)
        zero.X = (__Null) -0.5;
      if (WorldGen.dungeonX > Main.maxTilesX / 2 && zero.X > 0.0 && (double) zero.X > 0.5)
        zero.X = (__Null) -0.5;
      while (num2 > 0)
      {
        --num2;
        int num4 = (int) ((double) vector2.X - num1 - 4.0 - (double) WorldGen.genRand.Next(6));
        int num5 = (int) ((double) vector2.X + num1 + 4.0 + (double) WorldGen.genRand.Next(6));
        int num6 = (int) ((double) vector2.Y - num1 - 4.0);
        int num7 = (int) ((double) vector2.Y + num1 + 4.0 + (double) WorldGen.genRand.Next(6));
        if (num4 < 0)
          num4 = 0;
        if (num5 > Main.maxTilesX)
          num5 = Main.maxTilesX;
        if (num6 < 0)
          num6 = 0;
        if (num7 > Main.maxTilesY)
          num7 = Main.maxTilesY;
        int num8 = 1;
        if (vector2.X > (double) (Main.maxTilesX / 2))
          num8 = -1;
        int i1 = (int) (vector2.X + WorldGen.dxStrength1 * 0.600000023841858 * (double) num8 + WorldGen.dxStrength2 * (double) num8);
        int num9 = (int) (WorldGen.dyStrength2 * 0.5);
        if ((double) vector2.Y < Main.worldSurface - 5.0 && (int) Main.tile[i1, (int) ((double) vector2.Y - num1 - 6.0 + (double) num9)].wall == 0 && ((int) Main.tile[i1, (int) ((double) vector2.Y - num1 - 7.0 + (double) num9)].wall == 0 && (int) Main.tile[i1, (int) ((double) vector2.Y - num1 - 8.0 + (double) num9)].wall == 0))
        {
          WorldGen.dSurface = true;
          WorldGen.TileRunner(i1, (int) ((double) vector2.Y - num1 - 6.0 + (double) num9), (double) WorldGen.genRand.Next(25, 35), WorldGen.genRand.Next(10, 20), -1, false, 0.0f, -1f, false, true);
        }
        for (int index1 = num4; index1 < num5; ++index1)
        {
          for (int index2 = num6; index2 < num7; ++index2)
          {
            Main.tile[index1, index2].liquid = (byte) 0;
            if (!Main.wallDungeon[(int) Main.tile[index1, index2].wall])
            {
              Main.tile[index1, index2].wall = (byte) 0;
              Main.tile[index1, index2].active(true);
              Main.tile[index1, index2].type = tileType;
            }
          }
        }
        for (int index1 = num4 + 1; index1 < num5 - 1; ++index1)
        {
          for (int index2 = num6 + 1; index2 < num7 - 1; ++index2)
            Main.tile[index1, index2].wall = (byte) wallType;
        }
        int num10 = 0;
        if (WorldGen.genRand.Next((int) num1) == 0)
          num10 = WorldGen.genRand.Next(1, 3);
        int num11 = (int) ((double) vector2.X - num1 * 0.5 - (double) num10);
        int num12 = (int) ((double) vector2.X + num1 * 0.5 + (double) num10);
        int num13 = (int) ((double) vector2.Y - num1 * 0.5 - (double) num10);
        int num14 = (int) ((double) vector2.Y + num1 * 0.5 + (double) num10);
        if (num11 < 0)
          num11 = 0;
        if (num12 > Main.maxTilesX)
          num12 = Main.maxTilesX;
        if (num13 < 0)
          num13 = 0;
        if (num14 > Main.maxTilesY)
          num14 = Main.maxTilesY;
        for (int i2 = num11; i2 < num12; ++i2)
        {
          for (int j1 = num13; j1 < num14; ++j1)
          {
            Main.tile[i2, j1].active(false);
            WorldGen.PlaceWall(i2, j1, wallType, true);
          }
        }
        if (WorldGen.dSurface)
          num2 = 0;
        vector2 = Vector2.op_Addition(vector2, zero);
        if ((double) vector2.Y < Main.worldSurface)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local = @zero.Y;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num15 = (double) ^(float&) local * 0.980000019073486;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local = (float) num15;
        }
      }
      WorldGen.dungeonX = (int) vector2.X;
      WorldGen.dungeonY = (int) vector2.Y;
    }

    public static void DungeonHalls(int i, int j, ushort tileType, int wallType, bool forceX = false)
    {
      Vector2 zero1 = Vector2.get_Zero();
      double num1 = (double) WorldGen.genRand.Next(4, 6);
      double num2 = num1;
      Vector2 zero2 = Vector2.get_Zero();
      Vector2 zero3 = Vector2.get_Zero();
      Vector2 vector2;
      vector2.X = (__Null) (double) i;
      vector2.Y = (__Null) (double) j;
      int num3 = WorldGen.genRand.Next(35, 80);
      if (forceX)
      {
        num3 += 20;
        WorldGen.lastDungeonHall = Vector2.get_Zero();
      }
      else if (WorldGen.genRand.Next(5) == 0)
      {
        num1 *= 2.0;
        num3 /= 2;
      }
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = true;
      while (!flag1)
      {
        bool flag4 = false;
        int num4;
        if (flag3 && !forceX)
        {
          bool flag5 = true;
          bool flag6 = true;
          bool flag7 = true;
          bool flag8 = true;
          int num5 = num3;
          bool flag9 = false;
          for (int index1 = j; index1 > j - num5; --index1)
          {
            int index2 = i;
            if ((int) Main.tile[index2, index1].wall == wallType)
            {
              if (flag9)
              {
                flag5 = false;
                break;
              }
            }
            else
              flag9 = true;
          }
          bool flag10 = false;
          for (int index1 = j; index1 < j + num5; ++index1)
          {
            int index2 = i;
            if ((int) Main.tile[index2, index1].wall == wallType)
            {
              if (flag10)
              {
                flag6 = false;
                break;
              }
            }
            else
              flag10 = true;
          }
          bool flag11 = false;
          for (int index1 = i; index1 > i - num5; --index1)
          {
            int index2 = j;
            if ((int) Main.tile[index1, index2].wall == wallType)
            {
              if (flag11)
              {
                flag7 = false;
                break;
              }
            }
            else
              flag11 = true;
          }
          bool flag12 = false;
          for (int index1 = i; index1 < i + num5; ++index1)
          {
            int index2 = j;
            if ((int) Main.tile[index1, index2].wall == wallType)
            {
              if (flag12)
              {
                flag8 = false;
                break;
              }
            }
            else
              flag12 = true;
          }
          if (!flag7 && !flag8 && (!flag5 && !flag6))
          {
            num4 = WorldGen.genRand.Next(2) != 0 ? 1 : -1;
            if (WorldGen.genRand.Next(2) == 0)
              flag4 = true;
          }
          else
          {
            WorldGen.genRand.Next(4);
            int num6;
            do
            {
              num6 = WorldGen.genRand.Next(4);
            }
            while (!(num6 == 0 & flag5) && !(num6 == 1 & flag6) && (!(num6 == 2 & flag7) && !(num6 == 3 & flag8)));
            if (num6 == 0)
              num4 = -1;
            else if (num6 == 1)
            {
              num4 = 1;
            }
            else
            {
              flag4 = true;
              num4 = num6 != 2 ? 1 : -1;
            }
          }
        }
        else
        {
          num4 = WorldGen.genRand.Next(2) != 0 ? 1 : -1;
          if (WorldGen.genRand.Next(2) == 0)
            flag4 = true;
        }
        flag3 = false;
        if (forceX)
          flag4 = true;
        if (flag4)
        {
          zero2.Y = (__Null) 0.0;
          zero2.X = (__Null) (double) num4;
          zero3.Y = (__Null) 0.0;
          zero3.X = (__Null) (double) -num4;
          zero1.Y = (__Null) 0.0;
          zero1.X = (__Null) (double) num4;
          if (WorldGen.genRand.Next(3) == 0)
            zero1.Y = WorldGen.genRand.Next(2) != 0 ? (__Null) 0.200000002980232 : (__Null) -0.200000002980232;
        }
        else
        {
          ++num1;
          zero1.Y = (__Null) (double) num4;
          zero1.X = (__Null) 0.0;
          zero2.X = (__Null) 0.0;
          zero2.Y = (__Null) (double) num4;
          zero3.X = (__Null) 0.0;
          zero3.Y = (__Null) (double) -num4;
          if (WorldGen.genRand.Next(3) != 0)
          {
            flag2 = true;
            zero1.X = WorldGen.genRand.Next(2) != 0 ? (__Null) ((double) -WorldGen.genRand.Next(10, 20) * 0.100000001490116) : (__Null) ((double) WorldGen.genRand.Next(10, 20) * 0.100000001490116);
          }
          else if (WorldGen.genRand.Next(2) == 0)
            zero1.X = WorldGen.genRand.Next(2) != 0 ? (__Null) ((double) -WorldGen.genRand.Next(20, 40) * 0.00999999977648258) : (__Null) ((double) WorldGen.genRand.Next(20, 40) * 0.00999999977648258);
          else
            num3 /= 2;
        }
        if (Vector2.op_Inequality(WorldGen.lastDungeonHall, zero3))
          flag1 = true;
      }
      int num7 = 0;
      if (!forceX)
      {
        if (vector2.X > (double) (WorldGen.lastMaxTilesX - 200))
        {
          int num4 = -1;
          zero2.Y = (__Null) 0.0;
          zero2.X = (__Null) (double) num4;
          zero1.Y = (__Null) 0.0;
          zero1.X = (__Null) (double) num4;
          if (WorldGen.genRand.Next(3) == 0)
            zero1.Y = WorldGen.genRand.Next(2) != 0 ? (__Null) 0.200000002980232 : (__Null) -0.200000002980232;
        }
        else if (vector2.X < 200.0)
        {
          int num4 = 1;
          zero2.Y = (__Null) 0.0;
          zero2.X = (__Null) (double) num4;
          zero1.Y = (__Null) 0.0;
          zero1.X = (__Null) (double) num4;
          if (WorldGen.genRand.Next(3) == 0)
            zero1.Y = WorldGen.genRand.Next(2) != 0 ? (__Null) 0.200000002980232 : (__Null) -0.200000002980232;
        }
        else if (vector2.Y > (double) (WorldGen.lastMaxTilesY - 300))
        {
          int num4 = -1;
          ++num1;
          zero1.Y = (__Null) (double) num4;
          zero1.X = (__Null) 0.0;
          zero2.X = (__Null) 0.0;
          zero2.Y = (__Null) (double) num4;
          if (WorldGen.genRand.Next(2) == 0)
            zero1.X = WorldGen.genRand.Next(2) != 0 ? (__Null) ((double) -WorldGen.genRand.Next(20, 50) * 0.00999999977648258) : (__Null) ((double) WorldGen.genRand.Next(20, 50) * 0.00999999977648258);
        }
        else if ((double) vector2.Y < Main.rockLayer + 100.0)
        {
          int num4 = 1;
          ++num1;
          zero1.Y = (__Null) (double) num4;
          zero1.X = (__Null) 0.0;
          zero2.X = (__Null) 0.0;
          zero2.Y = (__Null) (double) num4;
          if (WorldGen.genRand.Next(3) != 0)
          {
            flag2 = true;
            zero1.X = WorldGen.genRand.Next(2) != 0 ? (__Null) ((double) -WorldGen.genRand.Next(10, 20) * 0.100000001490116) : (__Null) ((double) WorldGen.genRand.Next(10, 20) * 0.100000001490116);
          }
          else if (WorldGen.genRand.Next(2) == 0)
            zero1.X = WorldGen.genRand.Next(2) != 0 ? (__Null) ((double) WorldGen.genRand.Next(20, 50) * 0.00999999977648258) : (__Null) ((double) WorldGen.genRand.Next(20, 50) * 0.00999999977648258);
        }
        else if (vector2.X < (double) (Main.maxTilesX / 2) && (double) vector2.X > (double) Main.maxTilesX * 0.25)
        {
          int num4 = -1;
          zero2.Y = (__Null) 0.0;
          zero2.X = (__Null) (double) num4;
          zero1.Y = (__Null) 0.0;
          zero1.X = (__Null) (double) num4;
          if (WorldGen.genRand.Next(3) == 0)
            zero1.Y = WorldGen.genRand.Next(2) != 0 ? (__Null) 0.200000002980232 : (__Null) -0.200000002980232;
        }
        else if (vector2.X > (double) (Main.maxTilesX / 2) && (double) vector2.X < (double) Main.maxTilesX * 0.75)
        {
          int num4 = 1;
          zero2.Y = (__Null) 0.0;
          zero2.X = (__Null) (double) num4;
          zero1.Y = (__Null) 0.0;
          zero1.X = (__Null) (double) num4;
          if (WorldGen.genRand.Next(3) == 0)
            zero1.Y = WorldGen.genRand.Next(2) != 0 ? (__Null) 0.200000002980232 : (__Null) -0.200000002980232;
        }
      }
      if (zero2.Y == 0.0)
      {
        WorldGen.DDoorX[WorldGen.numDDoors] = (int) vector2.X;
        WorldGen.DDoorY[WorldGen.numDDoors] = (int) vector2.Y;
        WorldGen.DDoorPos[WorldGen.numDDoors] = 0;
        ++WorldGen.numDDoors;
      }
      else
      {
        WorldGen.DPlatX[WorldGen.numDPlats] = (int) vector2.X;
        WorldGen.DPlatY[WorldGen.numDPlats] = (int) vector2.Y;
        ++WorldGen.numDPlats;
      }
      WorldGen.lastDungeonHall = zero2;
      if ((double) Math.Abs((float) zero1.X) > (double) Math.Abs((float) zero1.Y) && WorldGen.genRand.Next(3) != 0)
        num1 = (double) (int) (num2 * ((double) WorldGen.genRand.Next(110, 150) * 0.01));
      while (num3 > 0)
      {
        ++num7;
        if (zero2.X > 0.0 && vector2.X > (double) (Main.maxTilesX - 100))
          num3 = 0;
        else if (zero2.X < 0.0 && vector2.X < 100.0)
          num3 = 0;
        else if (zero2.Y > 0.0 && vector2.Y > (double) (Main.maxTilesY - 100))
          num3 = 0;
        else if (zero2.Y < 0.0 && (double) vector2.Y < Main.rockLayer + 50.0)
          num3 = 0;
        --num3;
        int num4 = (int) ((double) vector2.X - num1 - 4.0 - (double) WorldGen.genRand.Next(6));
        int num5 = (int) ((double) vector2.X + num1 + 4.0 + (double) WorldGen.genRand.Next(6));
        int num6 = (int) ((double) vector2.Y - num1 - 4.0 - (double) WorldGen.genRand.Next(6));
        int num8 = (int) ((double) vector2.Y + num1 + 4.0 + (double) WorldGen.genRand.Next(6));
        if (num4 < 0)
          num4 = 0;
        if (num5 > Main.maxTilesX)
          num5 = Main.maxTilesX;
        if (num6 < 0)
          num6 = 0;
        if (num8 > Main.maxTilesY)
          num8 = Main.maxTilesY;
        for (int index1 = num4; index1 < num5; ++index1)
        {
          for (int index2 = num6; index2 < num8; ++index2)
          {
            if (index1 < WorldGen.dMinX)
              WorldGen.dMinX = index1;
            if (index1 > WorldGen.dMaxX)
              WorldGen.dMaxX = index1;
            if (index2 > WorldGen.dMaxY)
              WorldGen.dMaxY = index2;
            Main.tile[index1, index2].liquid = (byte) 0;
            if (!Main.wallDungeon[(int) Main.tile[index1, index2].wall])
            {
              Main.tile[index1, index2].active(true);
              Main.tile[index1, index2].type = tileType;
            }
          }
        }
        for (int index1 = num4 + 1; index1 < num5 - 1; ++index1)
        {
          for (int index2 = num6 + 1; index2 < num8 - 1; ++index2)
            Main.tile[index1, index2].wall = (byte) wallType;
        }
        int num9 = 0;
        if (zero1.Y == 0.0 && WorldGen.genRand.Next((int) num1 + 1) == 0)
          num9 = WorldGen.genRand.Next(1, 3);
        else if (zero1.X == 0.0 && WorldGen.genRand.Next((int) num1 - 1) == 0)
          num9 = WorldGen.genRand.Next(1, 3);
        else if (WorldGen.genRand.Next((int) num1 * 3) == 0)
          num9 = WorldGen.genRand.Next(1, 3);
        int num10 = (int) ((double) vector2.X - num1 * 0.5 - (double) num9);
        int num11 = (int) ((double) vector2.X + num1 * 0.5 + (double) num9);
        int num12 = (int) ((double) vector2.Y - num1 * 0.5 - (double) num9);
        int num13 = (int) ((double) vector2.Y + num1 * 0.5 + (double) num9);
        if (num10 < 0)
          num10 = 0;
        if (num11 > Main.maxTilesX)
          num11 = Main.maxTilesX;
        if (num12 < 0)
          num12 = 0;
        if (num13 > Main.maxTilesY)
          num13 = Main.maxTilesY;
        for (int index1 = num10; index1 < num11; ++index1)
        {
          for (int index2 = num12; index2 < num13; ++index2)
          {
            Main.tile[index1, index2].active(false);
            Main.tile[index1, index2].wall = (byte) wallType;
          }
        }
        vector2 = Vector2.op_Addition(vector2, zero1);
        if (flag2 && num7 > WorldGen.genRand.Next(10, 20))
        {
          num7 = 0;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local = @zero1.X;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num14 = (double) ^(float&) local * -1.0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local = (float) num14;
        }
      }
      WorldGen.dungeonX = (int) vector2.X;
      WorldGen.dungeonY = (int) vector2.Y;
      if (zero2.Y == 0.0)
      {
        WorldGen.DDoorX[WorldGen.numDDoors] = (int) vector2.X;
        WorldGen.DDoorY[WorldGen.numDDoors] = (int) vector2.Y;
        WorldGen.DDoorPos[WorldGen.numDDoors] = 0;
        ++WorldGen.numDDoors;
      }
      else
      {
        WorldGen.DPlatX[WorldGen.numDPlats] = (int) vector2.X;
        WorldGen.DPlatY[WorldGen.numDPlats] = (int) vector2.Y;
        ++WorldGen.numDPlats;
      }
    }

    public static void DungeonRoom(int i, int j, ushort tileType, int wallType)
    {
      double num1 = (double) WorldGen.genRand.Next(15, 30);
      Vector2 vector2_1;
      vector2_1.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      vector2_1.Y = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      Vector2 vector2_2;
      vector2_2.X = (__Null) (double) i;
      vector2_2.Y = (__Null) ((double) j - num1 / 2.0);
      int num2 = WorldGen.genRand.Next(10, 20);
      double num3 = (double) vector2_2.X;
      double num4 = (double) vector2_2.X;
      double num5 = (double) vector2_2.Y;
      double num6 = (double) vector2_2.Y;
      while (num2 > 0)
      {
        --num2;
        int num7 = (int) ((double) vector2_2.X - num1 * 0.800000011920929 - 5.0);
        int num8 = (int) ((double) vector2_2.X + num1 * 0.800000011920929 + 5.0);
        int num9 = (int) ((double) vector2_2.Y - num1 * 0.800000011920929 - 5.0);
        int num10 = (int) ((double) vector2_2.Y + num1 * 0.800000011920929 + 5.0);
        if (num7 < 0)
          num7 = 0;
        if (num8 > Main.maxTilesX)
          num8 = Main.maxTilesX;
        if (num9 < 0)
          num9 = 0;
        if (num10 > Main.maxTilesY)
          num10 = Main.maxTilesY;
        for (int index1 = num7; index1 < num8; ++index1)
        {
          for (int index2 = num9; index2 < num10; ++index2)
          {
            if (index1 < WorldGen.dMinX)
              WorldGen.dMinX = index1;
            if (index1 > WorldGen.dMaxX)
              WorldGen.dMaxX = index1;
            if (index2 > WorldGen.dMaxY)
              WorldGen.dMaxY = index2;
            Main.tile[index1, index2].liquid = (byte) 0;
            if (!Main.wallDungeon[(int) Main.tile[index1, index2].wall])
            {
              Main.tile[index1, index2].active(true);
              Main.tile[index1, index2].type = tileType;
            }
          }
        }
        for (int index1 = num7 + 1; index1 < num8 - 1; ++index1)
        {
          for (int index2 = num9 + 1; index2 < num10 - 1; ++index2)
            Main.tile[index1, index2].wall = (byte) wallType;
        }
        int num11 = (int) ((double) vector2_2.X - num1 * 0.5);
        int num12 = (int) ((double) vector2_2.X + num1 * 0.5);
        int num13 = (int) ((double) vector2_2.Y - num1 * 0.5);
        int num14 = (int) ((double) vector2_2.Y + num1 * 0.5);
        if (num11 < 0)
          num11 = 0;
        if (num12 > Main.maxTilesX)
          num12 = Main.maxTilesX;
        if (num13 < 0)
          num13 = 0;
        if (num14 > Main.maxTilesY)
          num14 = Main.maxTilesY;
        if ((double) num11 < num3)
          num3 = (double) num11;
        if ((double) num12 > num4)
          num4 = (double) num12;
        if ((double) num13 < num5)
          num5 = (double) num13;
        if ((double) num14 > num6)
          num6 = (double) num14;
        for (int index1 = num11; index1 < num12; ++index1)
        {
          for (int index2 = num13; index2 < num14; ++index2)
          {
            Main.tile[index1, index2].active(false);
            Main.tile[index1, index2].wall = (byte) wallType;
          }
        }
        vector2_2 = Vector2.op_Addition(vector2_2, vector2_1);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2_1.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num15 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num15;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @vector2_1.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num16 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local2 = (float) num16;
        if (vector2_1.X > 1.0)
          vector2_1.X = (__Null) 1.0;
        if (vector2_1.X < -1.0)
          vector2_1.X = (__Null) -1.0;
        if (vector2_1.Y > 1.0)
          vector2_1.Y = (__Null) 1.0;
        if (vector2_1.Y < -1.0)
          vector2_1.Y = (__Null) -1.0;
      }
      WorldGen.dRoomX[WorldGen.numDRooms] = (int) vector2_2.X;
      WorldGen.dRoomY[WorldGen.numDRooms] = (int) vector2_2.Y;
      WorldGen.dRoomSize[WorldGen.numDRooms] = (int) num1;
      WorldGen.dRoomL[WorldGen.numDRooms] = (int) num3;
      WorldGen.dRoomR[WorldGen.numDRooms] = (int) num4;
      WorldGen.dRoomT[WorldGen.numDRooms] = (int) num5;
      WorldGen.dRoomB[WorldGen.numDRooms] = (int) num6;
      WorldGen.dRoomTreasure[WorldGen.numDRooms] = false;
      ++WorldGen.numDRooms;
    }

    public static void DungeonEnt(int i, int j, ushort tileType, int wallType)
    {
      int num1 = 60;
      for (int index1 = i - num1; index1 < i + num1; ++index1)
      {
        for (int index2 = j - num1; index2 < j + num1; ++index2)
        {
          Main.tile[index1, index2].liquid = (byte) 0;
          Main.tile[index1, index2].lava(false);
        }
      }
      double dxStrength1 = WorldGen.dxStrength1;
      double dyStrength1 = WorldGen.dyStrength1;
      Vector2 vector2;
      vector2.X = (__Null) (double) i;
      vector2.Y = (__Null) ((double) j - dyStrength1 / 2.0);
      WorldGen.dMinY = (int) vector2.Y;
      int num2 = 1;
      if (i > Main.maxTilesX / 2)
        num2 = -1;
      int num3 = (int) ((double) vector2.X - dxStrength1 * 0.600000023841858 - (double) WorldGen.genRand.Next(2, 5));
      int num4 = (int) ((double) vector2.X + dxStrength1 * 0.600000023841858 + (double) WorldGen.genRand.Next(2, 5));
      int num5 = (int) ((double) vector2.Y - dyStrength1 * 0.600000023841858 - (double) WorldGen.genRand.Next(2, 5));
      int num6 = (int) ((double) vector2.Y + dyStrength1 * 0.600000023841858 + (double) WorldGen.genRand.Next(8, 16));
      if (num3 < 0)
        num3 = 0;
      if (num4 > Main.maxTilesX)
        num4 = Main.maxTilesX;
      if (num5 < 0)
        num5 = 0;
      if (num6 > Main.maxTilesY)
        num6 = Main.maxTilesY;
      for (int index1 = num3; index1 < num4; ++index1)
      {
        for (int index2 = num5; index2 < num6; ++index2)
        {
          Main.tile[index1, index2].liquid = (byte) 0;
          if ((int) Main.tile[index1, index2].wall != wallType)
          {
            Main.tile[index1, index2].wall = (byte) 0;
            if (index1 > num3 + 1 && index1 < num4 - 2 && (index2 > num5 + 1 && index2 < num6 - 2))
              Main.tile[index1, index2].wall = (byte) wallType;
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].type = tileType;
          }
        }
      }
      int num7 = num3;
      int num8 = num3 + 5 + WorldGen.genRand.Next(4);
      int num9 = num5 - 3 - WorldGen.genRand.Next(3);
      int num10 = num5;
      for (int index1 = num7; index1 < num8; ++index1)
      {
        for (int index2 = num9; index2 < num10; ++index2)
        {
          if ((int) Main.tile[index1, index2].wall != wallType)
          {
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].type = tileType;
          }
        }
      }
      int num11 = num4 - 5 - WorldGen.genRand.Next(4);
      int num12 = num4;
      int num13 = num5 - 3 - WorldGen.genRand.Next(3);
      int num14 = num5;
      for (int index1 = num11; index1 < num12; ++index1)
      {
        for (int index2 = num13; index2 < num14; ++index2)
        {
          if ((int) Main.tile[index1, index2].wall != wallType)
          {
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].type = tileType;
          }
        }
      }
      int num15 = 1 + WorldGen.genRand.Next(2);
      int num16 = 2 + WorldGen.genRand.Next(4);
      int num17 = 0;
      for (int index1 = num3; index1 < num4; ++index1)
      {
        for (int index2 = num5 - num15; index2 < num5; ++index2)
        {
          if ((int) Main.tile[index1, index2].wall != wallType)
          {
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].type = tileType;
          }
        }
        ++num17;
        if (num17 >= num16)
        {
          index1 += num16;
          num17 = 0;
        }
      }
      for (int index1 = num3; index1 < num4; ++index1)
      {
        for (int index2 = num6; (double) index2 < Main.worldSurface; ++index2)
        {
          if (!Main.wallDungeon[(int) Main.tile[index1, index2].wall])
          {
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].type = tileType;
          }
          Main.tile[index1, index2].wall = (byte) wallType;
        }
      }
      int num18 = (int) ((double) vector2.X - dxStrength1 * 0.600000023841858);
      int num19 = (int) ((double) vector2.X + dxStrength1 * 0.600000023841858);
      int num20 = (int) ((double) vector2.Y - dyStrength1 * 0.600000023841858);
      int num21 = (int) ((double) vector2.Y + dyStrength1 * 0.600000023841858);
      if (num18 < 0)
        num18 = 0;
      if (num19 > Main.maxTilesX)
        num19 = Main.maxTilesX;
      if (num20 < 0)
        num20 = 0;
      if (num21 > Main.maxTilesY)
        num21 = Main.maxTilesY;
      for (int index1 = num18; index1 < num19; ++index1)
      {
        for (int index2 = num20; index2 < num21; ++index2)
          Main.tile[index1, index2].wall = (byte) wallType;
      }
      int num22 = (int) ((double) vector2.X - dxStrength1 * 0.6 - 1.0);
      int num23 = (int) ((double) vector2.X + dxStrength1 * 0.6 + 1.0);
      int num24 = (int) ((double) vector2.Y - dyStrength1 * 0.6 - 1.0);
      int num25 = (int) ((double) vector2.Y + dyStrength1 * 0.6 + 1.0);
      if (num22 < 0)
        num22 = 0;
      if (num23 > Main.maxTilesX)
        num23 = Main.maxTilesX;
      if (num24 < 0)
        num24 = 0;
      if (num25 > Main.maxTilesY)
        num25 = Main.maxTilesY;
      for (int index1 = num22; index1 < num23; ++index1)
      {
        for (int index2 = num24; index2 < num25; ++index2)
          Main.tile[index1, index2].wall = (byte) wallType;
      }
      int num26 = (int) ((double) vector2.X - dxStrength1 * 0.5);
      int num27 = (int) ((double) vector2.X + dxStrength1 * 0.5);
      int num28 = (int) ((double) vector2.Y - dyStrength1 * 0.5);
      int num29 = (int) ((double) vector2.Y + dyStrength1 * 0.5);
      if (num26 < 0)
        num26 = 0;
      if (num27 > Main.maxTilesX)
        num27 = Main.maxTilesX;
      if (num28 < 0)
        num28 = 0;
      if (num29 > Main.maxTilesY)
        num29 = Main.maxTilesY;
      for (int index1 = num26; index1 < num27; ++index1)
      {
        for (int index2 = num28; index2 < num29; ++index2)
        {
          Main.tile[index1, index2].active(false);
          Main.tile[index1, index2].wall = (byte) wallType;
        }
      }
      int x = (int) vector2.X;
      int index3 = num29;
      for (int index1 = 0; index1 < 20; ++index1)
      {
        int index2 = (int) vector2.X - index1;
        if (!Main.tile[index2, index3].active() && Main.wallDungeon[(int) Main.tile[index2, index3].wall])
        {
          WorldGen.DPlatX[WorldGen.numDPlats] = index2;
          WorldGen.DPlatY[WorldGen.numDPlats] = index3;
          ++WorldGen.numDPlats;
          break;
        }
        int index4 = (int) vector2.X + index1;
        if (!Main.tile[index4, index3].active() && Main.wallDungeon[(int) Main.tile[index4, index3].wall])
        {
          WorldGen.DPlatX[WorldGen.numDPlats] = index4;
          WorldGen.DPlatY[WorldGen.numDPlats] = index3;
          ++WorldGen.numDPlats;
          break;
        }
      }
      // ISSUE: explicit reference operation
      // ISSUE: variable of a reference type
      __Null& local1 = @vector2.X;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      double num30 = (double) ^(float&) local1 + dxStrength1 * 0.600000023841858 * (double) num2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(float&) local1 = (float) num30;
      // ISSUE: explicit reference operation
      // ISSUE: variable of a reference type
      __Null& local2 = @vector2.Y;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      double num31 = (double) ^(float&) local2 + dyStrength1 * 0.5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(float&) local2 = (float) num31;
      double dxStrength2 = WorldGen.dxStrength2;
      double dyStrength2 = WorldGen.dyStrength2;
      // ISSUE: explicit reference operation
      // ISSUE: variable of a reference type
      __Null& local3 = @vector2.X;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      double num32 = (double) ^(float&) local3 + dxStrength2 * 0.550000011920929 * (double) num2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(float&) local3 = (float) num32;
      // ISSUE: explicit reference operation
      // ISSUE: variable of a reference type
      __Null& local4 = @vector2.Y;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      double num33 = (double) ^(float&) local4 - dyStrength2 * 0.5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(float&) local4 = (float) num33;
      int num34 = (int) ((double) vector2.X - dxStrength2 * 0.600000023841858 - (double) WorldGen.genRand.Next(1, 3));
      int num35 = (int) ((double) vector2.X + dxStrength2 * 0.600000023841858 + (double) WorldGen.genRand.Next(1, 3));
      int num36 = (int) ((double) vector2.Y - dyStrength2 * 0.600000023841858 - (double) WorldGen.genRand.Next(1, 3));
      int num37 = (int) ((double) vector2.Y + dyStrength2 * 0.600000023841858 + (double) WorldGen.genRand.Next(6, 16));
      if (num34 < 0)
        num34 = 0;
      if (num35 > Main.maxTilesX)
        num35 = Main.maxTilesX;
      if (num36 < 0)
        num36 = 0;
      if (num37 > Main.maxTilesY)
        num37 = Main.maxTilesY;
      for (int index1 = num34; index1 < num35; ++index1)
      {
        for (int index2 = num36; index2 < num37; ++index2)
        {
          if ((int) Main.tile[index1, index2].wall != wallType)
          {
            bool flag = true;
            if (num2 < 0)
            {
              if ((double) index1 < (double) vector2.X - dxStrength2 * 0.5)
                flag = false;
            }
            else if ((double) index1 > (double) vector2.X + dxStrength2 * 0.5 - 1.0)
              flag = false;
            if (flag)
            {
              Main.tile[index1, index2].wall = (byte) 0;
              Main.tile[index1, index2].active(true);
              Main.tile[index1, index2].type = tileType;
            }
          }
        }
      }
      for (int index1 = num34; index1 < num35; ++index1)
      {
        for (int index2 = num37; (double) index2 < Main.worldSurface; ++index2)
        {
          if (!Main.wallDungeon[(int) Main.tile[index1, index2].wall])
          {
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].type = tileType;
          }
          Main.tile[index1, index2].wall = (byte) wallType;
        }
      }
      int num38 = (int) ((double) vector2.X - dxStrength2 * 0.5);
      int num39 = (int) ((double) vector2.X + dxStrength2 * 0.5);
      int num40 = num38;
      if (num2 < 0)
        ++num40;
      int num41 = num40 + 5 + WorldGen.genRand.Next(4);
      int num42 = num36 - 3 - WorldGen.genRand.Next(3);
      int num43 = num36;
      for (int index1 = num40; index1 < num41; ++index1)
      {
        for (int index2 = num42; index2 < num43; ++index2)
        {
          if ((int) Main.tile[index1, index2].wall != wallType)
          {
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].type = tileType;
          }
        }
      }
      int num44 = num39 - 5 - WorldGen.genRand.Next(4);
      int num45 = num39;
      int num46 = num36 - 3 - WorldGen.genRand.Next(3);
      int num47 = num36;
      for (int index1 = num44; index1 < num45; ++index1)
      {
        for (int index2 = num46; index2 < num47; ++index2)
        {
          if ((int) Main.tile[index1, index2].wall != wallType)
          {
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].type = tileType;
          }
        }
      }
      int num48 = 1 + WorldGen.genRand.Next(2);
      int num49 = 2 + WorldGen.genRand.Next(4);
      int num50 = 0;
      if (num2 < 0)
        ++num39;
      for (int index1 = num38 + 1; index1 < num39 - 1; ++index1)
      {
        for (int index2 = num36 - num48; index2 < num36; ++index2)
        {
          if ((int) Main.tile[index1, index2].wall != wallType)
          {
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].type = tileType;
          }
        }
        ++num50;
        if (num50 >= num49)
        {
          index1 += num49;
          num50 = 0;
        }
      }
      int num51 = (int) ((double) vector2.X - dxStrength2 * 0.6);
      int num52 = (int) ((double) vector2.X + dxStrength2 * 0.6);
      int num53 = (int) ((double) vector2.Y - dyStrength2 * 0.6);
      int num54 = (int) ((double) vector2.Y + dyStrength2 * 0.6);
      if (num51 < 0)
        num51 = 0;
      if (num52 > Main.maxTilesX)
        num52 = Main.maxTilesX;
      if (num53 < 0)
        num53 = 0;
      if (num54 > Main.maxTilesY)
        num54 = Main.maxTilesY;
      for (int index1 = num51; index1 < num52; ++index1)
      {
        for (int index2 = num53; index2 < num54; ++index2)
          Main.tile[index1, index2].wall = (byte) 0;
      }
      int num55 = (int) ((double) vector2.X - dxStrength2 * 0.5);
      int num56 = (int) ((double) vector2.X + dxStrength2 * 0.5);
      int num57 = (int) ((double) vector2.Y - dyStrength2 * 0.5);
      int index5 = (int) ((double) vector2.Y + dyStrength2 * 0.5);
      if (num55 < 0)
        num55 = 0;
      if (num56 > Main.maxTilesX)
        num56 = Main.maxTilesX;
      if (num57 < 0)
        num57 = 0;
      if (index5 > Main.maxTilesY)
        index5 = Main.maxTilesY;
      for (int index1 = num55; index1 < num56; ++index1)
      {
        for (int index2 = num57; index2 < index5; ++index2)
        {
          Main.tile[index1, index2].active(false);
          Main.tile[index1, index2].wall = (byte) 0;
        }
      }
      for (int index1 = num55; index1 < num56; ++index1)
      {
        if (!Main.tile[index1, index5].active())
        {
          Main.tile[index1, index5].active(true);
          Main.tile[index1, index5].type = (ushort) 19;
          if (wallType == 7)
            Main.tile[index1, index5].frameY = (short) 108;
          if (wallType == 8)
            Main.tile[index1, index5].frameY = (short) 144;
          if (wallType == 9)
            Main.tile[index1, index5].frameY = (short) 126;
        }
      }
      Main.dungeonX = (int) vector2.X;
      Main.dungeonY = index5;
      int index6 = NPC.NewNPC(Main.dungeonX * 16 + 8, Main.dungeonY * 16, 37, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
      Main.npc[index6].homeless = false;
      Main.npc[index6].homeTileX = Main.dungeonX;
      Main.npc[index6].homeTileY = Main.dungeonY;
      if (num2 == 1)
      {
        int num58 = 0;
        for (int index1 = num56; index1 < num56 + 50; ++index1)
        {
          ++num58;
          for (int index2 = index5 + num58; index2 < index5 + 50; ++index2)
          {
            if (!Main.wallDungeon[(int) Main.tile[index1, index2].wall])
            {
              Main.tile[index1, index2].active(true);
              Main.tile[index1, index2].type = tileType;
            }
          }
        }
      }
      else
      {
        int num58 = 0;
        for (int index1 = num55; index1 > num55 - 50; --index1)
        {
          ++num58;
          for (int index2 = index5 + num58; index2 < index5 + 50; ++index2)
          {
            if (!Main.wallDungeon[(int) Main.tile[index1, index2].wall])
            {
              Main.tile[index1, index2].active(true);
              Main.tile[index1, index2].type = tileType;
            }
          }
        }
      }
      int num59 = 1 + WorldGen.genRand.Next(2);
      int num60 = 2 + WorldGen.genRand.Next(4);
      int num61 = 0;
      int num62 = (int) ((double) vector2.X - dxStrength2 * 0.5);
      int num63 = (int) ((double) vector2.X + dxStrength2 * 0.5);
      int num64 = num62 + 2;
      int num65 = num63 - 2;
      for (int i1 = num64; i1 < num65; ++i1)
      {
        for (int j1 = num57; j1 < index5; ++j1)
          WorldGen.PlaceWall(i1, j1, wallType, true);
        ++num61;
        if (num61 >= num60)
        {
          i1 += num60 * 2;
          num61 = 0;
        }
      }
      // ISSUE: explicit reference operation
      // ISSUE: variable of a reference type
      __Null& local5 = @vector2.X;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      double num66 = (double) ^(float&) local5 - dxStrength2 * 0.600000023841858 * (double) num2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(float&) local5 = (float) num66;
      // ISSUE: explicit reference operation
      // ISSUE: variable of a reference type
      __Null& local6 = @vector2.Y;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      double num67 = (double) ^(float&) local6 + dyStrength2 * 0.5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(float&) local6 = (float) num67;
      double num68 = 15.0;
      double num69 = 3.0;
      // ISSUE: explicit reference operation
      // ISSUE: variable of a reference type
      __Null& local7 = @vector2.Y;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      double num70 = (double) ^(float&) local7 - num69 * 0.5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(float&) local7 = (float) num70;
      int num71 = (int) ((double) vector2.X - num68 * 0.5);
      int num72 = (int) ((double) vector2.X + num68 * 0.5);
      int num73 = (int) ((double) vector2.Y - num69 * 0.5);
      int num74 = (int) ((double) vector2.Y + num69 * 0.5);
      if (num71 < 0)
        num71 = 0;
      if (num72 > Main.maxTilesX)
        num72 = Main.maxTilesX;
      if (num73 < 0)
        num73 = 0;
      if (num74 > Main.maxTilesY)
        num74 = Main.maxTilesY;
      for (int index1 = num71; index1 < num72; ++index1)
      {
        for (int index2 = num73; index2 < num74; ++index2)
          Main.tile[index1, index2].active(false);
      }
      if (num2 < 0)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local8 = @vector2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num58 = (double) ^(float&) local8 - 1.0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local8 = (float) num58;
      }
      WorldGen.PlaceTile((int) vector2.X, (int) vector2.Y + 1, 10, true, false, -1, 13);
    }

    public static bool AddBuriedChest(Point point, int contain = 0, bool notNearOtherChests = false, int Style = -1)
    {
      return WorldGen.AddBuriedChest((int) point.X, (int) point.Y, contain, notNearOtherChests, Style);
    }

    public static bool AddBuriedChest(int i, int j, int contain = 0, bool notNearOtherChests = false, int Style = -1)
    {
      bool flag1 = false;
      bool flag2 = false;
      for (int j1 = j; j1 < Main.maxTilesY; ++j1)
      {
        if (WorldGen.SolidTile(i, j1))
        {
          bool flag3 = false;
          int num1 = i;
          int num2 = j1;
          int style = 0;
          if ((double) num2 >= Main.worldSurface + 25.0 || contain > 0)
          {
            style = 1;
            if (Style == 10 || contain == 211 || (contain == 212 || contain == 213) || contain == 753)
            {
              style = 10;
              flag2 = true;
            }
          }
          if (Style >= 0)
            style = Style;
          if (style == 11 || contain == 0 && (double) num2 >= Main.worldSurface + 25.0 && num2 <= Main.maxTilesY - 205 && ((int) Main.tile[i, j1].type == 147 || (int) Main.tile[i, j1].type == 161 || (int) Main.tile[i, j1].type == 162))
          {
            flag1 = true;
            style = 11;
            switch (WorldGen.genRand.Next(6))
            {
              case 0:
                contain = 670;
                break;
              case 1:
                contain = 724;
                break;
              case 2:
                contain = 950;
                break;
              case 3:
                contain = 1319;
                break;
              case 4:
                contain = 987;
                break;
              default:
                contain = 1579;
                break;
            }
            if (WorldGen.genRand.Next(20) == 0)
              contain = 997;
            if (WorldGen.genRand.Next(50) == 0)
              contain = 669;
          }
          if (num2 > Main.maxTilesY - 205 && contain == 0)
          {
            if (WorldGen.hellChest == WorldGen.hellChestItem[0])
            {
              contain = 274;
              style = 4;
              flag3 = true;
            }
            else if (WorldGen.hellChest == WorldGen.hellChestItem[1])
            {
              contain = 220;
              style = 4;
              flag3 = true;
            }
            else if (WorldGen.hellChest == WorldGen.hellChestItem[2])
            {
              contain = 112;
              style = 4;
              flag3 = true;
            }
            else if (WorldGen.hellChest == WorldGen.hellChestItem[3])
            {
              contain = 218;
              style = 4;
              flag3 = true;
            }
            else
            {
              contain = 3019;
              style = 4;
              flag3 = true;
            }
          }
          int num3 = 1;
          int index1 = WorldGen.PlaceChest(num1 - num3, num2 - 1, (ushort) 21, notNearOtherChests, style);
          if (index1 < 0)
            return false;
          if (flag3)
          {
            ++WorldGen.hellChest;
            if (WorldGen.hellChest > 4)
              WorldGen.hellChest = 0;
          }
          int index2 = 0;
          while (index2 == 0)
          {
            if (style == 0 && (double) num2 < Main.worldSurface + 25.0 || contain == 848)
            {
              if (contain > 0)
              {
                Main.chest[index1].item[index2].SetDefaults(contain, false);
                Main.chest[index1].item[index2].Prefix(-1);
                if (contain == 848)
                {
                  ++index2;
                  Main.chest[index1].item[index2].SetDefaults(866, false);
                }
                else if (contain == 832)
                {
                  ++index2;
                  Main.chest[index1].item[index2].SetDefaults(933, false);
                }
                ++index2;
              }
              else
              {
                int num4 = WorldGen.genRand.Next(11);
                if (num4 == 0)
                {
                  Main.chest[index1].item[index2].SetDefaults(280, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                int num5 = 1;
                if (num4 == num5)
                {
                  Main.chest[index1].item[index2].SetDefaults(281, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                int num6 = 2;
                if (num4 == num6)
                {
                  Main.chest[index1].item[index2].SetDefaults(284, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                int num7 = 3;
                if (num4 == num7)
                {
                  Main.chest[index1].item[index2].SetDefaults(282, false);
                  Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(40, 75);
                }
                int num8 = 4;
                if (num4 == num8)
                {
                  Main.chest[index1].item[index2].SetDefaults(279, false);
                  Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(70, 150);
                }
                int num9 = 5;
                if (num4 == num9)
                {
                  Main.chest[index1].item[index2].SetDefaults(285, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                int num10 = 6;
                if (num4 == num10)
                {
                  Main.chest[index1].item[index2].SetDefaults(953, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                int num11 = 7;
                if (num4 == num11)
                {
                  Main.chest[index1].item[index2].SetDefaults(946, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                int num12 = 8;
                if (num4 == num12)
                {
                  Main.chest[index1].item[index2].SetDefaults(3068, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                int num13 = 9;
                if (num4 == num13)
                {
                  Main.chest[index1].item[index2].SetDefaults(3069, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                int num14 = 10;
                if (num4 == num14)
                {
                  Main.chest[index1].item[index2].SetDefaults(3084, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                ++index2;
              }
              if (WorldGen.genRand.Next(6) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(3093, false);
                Main.chest[index1].item[index2].stack = 1;
                if (WorldGen.genRand.Next(5) == 0)
                  Main.chest[index1].item[index2].stack += WorldGen.genRand.Next(2);
                if (WorldGen.genRand.Next(10) == 0)
                  Main.chest[index1].item[index2].stack += WorldGen.genRand.Next(3);
                ++index2;
              }
              if (WorldGen.genRand.Next(3) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(168, false);
                Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(3, 6);
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(8) + 3;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(WorldGen.copperBar, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(WorldGen.ironBar, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(50, 101);
                Main.chest[index1].item[index2].SetDefaults(965, false);
                Main.chest[index1].item[index2].stack = num4;
                ++index2;
              }
              if (WorldGen.genRand.Next(3) != 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(26) + 25;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(40, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(42, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(1);
                int num5 = WorldGen.genRand.Next(3) + 3;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(28, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(3) != 0)
              {
                Main.chest[index1].item[index2].SetDefaults(2350, false);
                Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(2, 5);
                ++index2;
              }
              if (WorldGen.genRand.Next(3) > 0)
              {
                int num4 = WorldGen.genRand.Next(6);
                int num5 = WorldGen.genRand.Next(1, 3);
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(292, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(298, false);
                int num7 = 2;
                if (num4 == num7)
                  Main.chest[index1].item[index2].SetDefaults(299, false);
                int num8 = 3;
                if (num4 == num8)
                  Main.chest[index1].item[index2].SetDefaults(290, false);
                int num9 = 4;
                if (num4 == num9)
                  Main.chest[index1].item[index2].SetDefaults(2322, false);
                int num10 = 5;
                if (num4 == num10)
                  Main.chest[index1].item[index2].SetDefaults(2325, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(11) + 10;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(8, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(31, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(72, false);
                Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(10, 30);
                ++index2;
              }
            }
            else if ((double) num2 < Main.rockLayer)
            {
              if (contain > 0)
              {
                if (contain == 832)
                {
                  Main.chest[index1].item[index2].SetDefaults(933, false);
                  ++index2;
                }
                Main.chest[index1].item[index2].SetDefaults(contain, false);
                Main.chest[index1].item[index2].Prefix(-1);
                ++index2;
              }
              else
              {
                int num4 = WorldGen.genRand.Next(7);
                if (WorldGen.genRand.Next(20) == 0)
                {
                  Main.chest[index1].item[index2].SetDefaults(997, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                else
                {
                  if (num4 == 0)
                  {
                    Main.chest[index1].item[index2].SetDefaults(49, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 1)
                  {
                    Main.chest[index1].item[index2].SetDefaults(50, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 2)
                  {
                    Main.chest[index1].item[index2].SetDefaults(53, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 3)
                  {
                    Main.chest[index1].item[index2].SetDefaults(54, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 4)
                  {
                    Main.chest[index1].item[index2].SetDefaults(55, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 5)
                  {
                    Main.chest[index1].item[index2].SetDefaults(975, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 6)
                  {
                    Main.chest[index1].item[index2].SetDefaults(930, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                    ++index2;
                    Main.chest[index1].item[index2].SetDefaults(931, false);
                    Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(26) + 25;
                  }
                }
                ++index2;
              }
              if (WorldGen.genRand.Next(3) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(166, false);
                Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(10, 20);
                ++index2;
              }
              if (WorldGen.genRand.Next(5) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(52, false);
                ++index2;
              }
              if (WorldGen.genRand.Next(3) == 0)
              {
                int num4 = WorldGen.genRand.Next(50, 101);
                Main.chest[index1].item[index2].SetDefaults(965, false);
                Main.chest[index1].item[index2].stack = num4;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(10) + 5;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(WorldGen.ironBar, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(WorldGen.silverBar, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(25) + 25;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(40, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(42, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(1);
                int num5 = WorldGen.genRand.Next(3) + 3;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(28, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(3) > 0)
              {
                int num4 = WorldGen.genRand.Next(9);
                int num5 = WorldGen.genRand.Next(1, 3);
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(289, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(298, false);
                int num7 = 2;
                if (num4 == num7)
                  Main.chest[index1].item[index2].SetDefaults(299, false);
                int num8 = 3;
                if (num4 == num8)
                  Main.chest[index1].item[index2].SetDefaults(290, false);
                int num9 = 4;
                if (num4 == num9)
                  Main.chest[index1].item[index2].SetDefaults(303, false);
                int num10 = 5;
                if (num4 == num10)
                  Main.chest[index1].item[index2].SetDefaults(291, false);
                int num11 = 6;
                if (num4 == num11)
                  Main.chest[index1].item[index2].SetDefaults(304, false);
                int num12 = 7;
                if (num4 == num12)
                  Main.chest[index1].item[index2].SetDefaults(2322, false);
                int num13 = 8;
                if (num4 == num13)
                  Main.chest[index1].item[index2].SetDefaults(2329, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(3) != 0)
              {
                int num4 = WorldGen.genRand.Next(1, 3);
                Main.chest[index1].item[index2].SetDefaults(2350, false);
                Main.chest[index1].item[index2].stack = num4;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(11) + 10;
                if (style == 11)
                  Main.chest[index1].item[index2].SetDefaults(974, false);
                else
                  Main.chest[index1].item[index2].SetDefaults(8, false);
                Main.chest[index1].item[index2].stack = num4;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(72, false);
                Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(50, 90);
                ++index2;
              }
            }
            else if (num2 < Main.maxTilesY - 250)
            {
              if (contain > 0)
              {
                Main.chest[index1].item[index2].SetDefaults(contain, false);
                Main.chest[index1].item[index2].Prefix(-1);
                ++index2;
                if (flag1 && WorldGen.genRand.Next(5) == 0)
                {
                  Main.chest[index1].item[index2].SetDefaults(3199, false);
                  ++index2;
                }
                if (flag2 && WorldGen.genRand.Next(6) == 0)
                {
                  Item[] objArray1 = Main.chest[index1].item;
                  int index3 = index2;
                  int num4 = 1;
                  int num5 = index3 + num4;
                  objArray1[index3].SetDefaults(3360, false);
                  Item[] objArray2 = Main.chest[index1].item;
                  int index4 = num5;
                  int num6 = 1;
                  index2 = index4 + num6;
                  objArray2[index4].SetDefaults(3361, false);
                }
              }
              else
              {
                int num4 = WorldGen.genRand.Next(7);
                if (WorldGen.genRand.Next(40) == 0)
                {
                  Main.chest[index1].item[index2].SetDefaults(906, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                else if (WorldGen.genRand.Next(15) == 0)
                {
                  Main.chest[index1].item[index2].SetDefaults(997, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                else
                {
                  if (num4 == 0)
                  {
                    Main.chest[index1].item[index2].SetDefaults(49, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 1)
                  {
                    Main.chest[index1].item[index2].SetDefaults(50, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 2)
                  {
                    Main.chest[index1].item[index2].SetDefaults(53, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 3)
                  {
                    Main.chest[index1].item[index2].SetDefaults(54, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 4)
                  {
                    Main.chest[index1].item[index2].SetDefaults(55, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 5)
                  {
                    Main.chest[index1].item[index2].SetDefaults(975, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                  }
                  if (num4 == 6)
                  {
                    Main.chest[index1].item[index2].SetDefaults(930, false);
                    Main.chest[index1].item[index2].Prefix(-1);
                    ++index2;
                    Main.chest[index1].item[index2].SetDefaults(931, false);
                    Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(26) + 25;
                  }
                }
                ++index2;
              }
              if (WorldGen.genRand.Next(5) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(43, false);
                ++index2;
              }
              if (WorldGen.genRand.Next(3) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(167, false);
                ++index2;
              }
              if (WorldGen.genRand.Next(4) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(51, false);
                Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(26) + 25;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(8) + 3;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(WorldGen.goldBar, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(WorldGen.silverBar, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(26) + 25;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(41, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(279, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(1);
                int num5 = WorldGen.genRand.Next(3) + 3;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(188, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(3) > 0)
              {
                int num4 = WorldGen.genRand.Next(6);
                int num5 = WorldGen.genRand.Next(1, 3);
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(296, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(295, false);
                int num7 = 2;
                if (num4 == num7)
                  Main.chest[index1].item[index2].SetDefaults(299, false);
                int num8 = 3;
                if (num4 == num8)
                  Main.chest[index1].item[index2].SetDefaults(302, false);
                int num9 = 4;
                if (num4 == num9)
                  Main.chest[index1].item[index2].SetDefaults(303, false);
                int num10 = 5;
                if (num4 == num10)
                  Main.chest[index1].item[index2].SetDefaults(305, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(3) > 1)
              {
                int num4 = WorldGen.genRand.Next(7);
                int num5 = WorldGen.genRand.Next(1, 3);
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(301, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(302, false);
                int num7 = 2;
                if (num4 == num7)
                  Main.chest[index1].item[index2].SetDefaults(297, false);
                int num8 = 3;
                if (num4 == num8)
                  Main.chest[index1].item[index2].SetDefaults(304, false);
                int num9 = 4;
                if (num4 == num9)
                  Main.chest[index1].item[index2].SetDefaults(2329, false);
                int num10 = 5;
                if (num4 == num10)
                  Main.chest[index1].item[index2].SetDefaults(2351, false);
                int num11 = 6;
                if (num4 == num11)
                  Main.chest[index1].item[index2].SetDefaults(2329, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(1, 3);
                Main.chest[index1].item[index2].SetDefaults(2350, false);
                Main.chest[index1].item[index2].stack = num4;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(15) + 15;
                if (num4 == 0)
                {
                  if (style == 11)
                    Main.chest[index1].item[index2].SetDefaults(974, false);
                  else
                    Main.chest[index1].item[index2].SetDefaults(8, false);
                }
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(282, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(73, false);
                Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(1, 3);
                ++index2;
              }
            }
            else
            {
              if (contain > 0)
              {
                Main.chest[index1].item[index2].SetDefaults(contain, false);
                Main.chest[index1].item[index2].Prefix(-1);
                ++index2;
              }
              else
              {
                int num4 = WorldGen.genRand.Next(4);
                if (num4 == 0)
                {
                  Main.chest[index1].item[index2].SetDefaults(49, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                int num5 = 1;
                if (num4 == num5)
                {
                  Main.chest[index1].item[index2].SetDefaults(50, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                int num6 = 2;
                if (num4 == num6)
                {
                  Main.chest[index1].item[index2].SetDefaults(53, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                int num7 = 3;
                if (num4 == num7)
                {
                  Main.chest[index1].item[index2].SetDefaults(54, false);
                  Main.chest[index1].item[index2].Prefix(-1);
                }
                ++index2;
              }
              if (WorldGen.genRand.Next(3) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(167, false);
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(15) + 15;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(117, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(WorldGen.goldBar, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(25) + 50;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(265, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(278, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(6) + 15;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(226, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(227, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(4) > 0)
              {
                int num4 = WorldGen.genRand.Next(8);
                int num5 = WorldGen.genRand.Next(1, 3);
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(296, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(295, false);
                int num7 = 2;
                if (num4 == num7)
                  Main.chest[index1].item[index2].SetDefaults(293, false);
                int num8 = 3;
                if (num4 == num8)
                  Main.chest[index1].item[index2].SetDefaults(288, false);
                int num9 = 4;
                if (num4 == num9)
                  Main.chest[index1].item[index2].SetDefaults(294, false);
                int num10 = 5;
                if (num4 == num10)
                  Main.chest[index1].item[index2].SetDefaults(297, false);
                int num11 = 6;
                if (num4 == num11)
                  Main.chest[index1].item[index2].SetDefaults(304, false);
                int num12 = 7;
                if (num4 == num12)
                  Main.chest[index1].item[index2].SetDefaults(2323, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(3) > 0)
              {
                int num4 = WorldGen.genRand.Next(8);
                int num5 = WorldGen.genRand.Next(1, 3);
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(305, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(301, false);
                int num7 = 2;
                if (num4 == num7)
                  Main.chest[index1].item[index2].SetDefaults(302, false);
                int num8 = 3;
                if (num4 == num8)
                  Main.chest[index1].item[index2].SetDefaults(288, false);
                int num9 = 4;
                if (num4 == num9)
                  Main.chest[index1].item[index2].SetDefaults(300, false);
                int num10 = 5;
                if (num4 == num10)
                  Main.chest[index1].item[index2].SetDefaults(2351, false);
                int num11 = 6;
                if (num4 == num11)
                  Main.chest[index1].item[index2].SetDefaults(2348, false);
                int num12 = 7;
                if (num4 == num12)
                  Main.chest[index1].item[index2].SetDefaults(2345, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(3) == 0)
              {
                int num4 = WorldGen.genRand.Next(1, 3);
                Main.chest[index1].item[index2].SetDefaults(2350, false);
                Main.chest[index1].item[index2].stack = num4;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                int num4 = WorldGen.genRand.Next(2);
                int num5 = WorldGen.genRand.Next(15) + 15;
                if (num4 == 0)
                  Main.chest[index1].item[index2].SetDefaults(8, false);
                int num6 = 1;
                if (num4 == num6)
                  Main.chest[index1].item[index2].SetDefaults(282, false);
                Main.chest[index1].item[index2].stack = num5;
                ++index2;
              }
              if (WorldGen.genRand.Next(2) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(73, false);
                Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(2, 5);
                ++index2;
              }
            }
            if (index2 > 0)
            {
              if (style == 10 && WorldGen.genRand.Next(4) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(2204, false);
                ++index2;
              }
              if (style == 11 && WorldGen.genRand.Next(7) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(2198, false);
                ++index2;
              }
              if (style == 12 && WorldGen.genRand.Next(2) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(2196, false);
                ++index2;
              }
              if (style == 13 && WorldGen.genRand.Next(3) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(2197, false);
                ++index2;
              }
              if (style == 16)
              {
                Main.chest[index1].item[index2].SetDefaults(2195, false);
                ++index2;
              }
              if (Main.wallDungeon[(int) Main.tile[i, j1].wall] && WorldGen.genRand.Next(8) == 0)
              {
                Main.chest[index1].item[index2].SetDefaults(2192, false);
                ++index2;
              }
              if (style == 16)
              {
                if (WorldGen.genRand.Next(5) == 0)
                {
                  Main.chest[index1].item[index2].SetDefaults(2767, false);
                  ++index2;
                }
                else
                {
                  Main.chest[index1].item[index2].SetDefaults(2766, false);
                  Main.chest[index1].item[index2].stack = WorldGen.genRand.Next(3, 8);
                  ++index2;
                }
              }
            }
          }
          return true;
        }
      }
      return false;
    }

    public static void UnlockDoor(int i, int j)
    {
      int index1 = i;
      int index2 = j;
      if (Main.tile[index1, index2] == null)
        return;
      while ((int) Main.tile[index1, index2].frameY != 594)
      {
        --index2;
        if ((int) Main.tile[index1, index2].frameY < 594 || index2 <= 0)
          return;
      }
      Main.PlaySound(22, index1 * 16, index2 * 16 + 16, 1, 1f, 0.0f);
      for (int index3 = index2; index3 <= index2 + 2; ++index3)
      {
        if (Main.tile[index1, index3] == null)
          Main.tile[index1, index3] = new Tile();
        Main.tile[index1, index3].frameY += (short) 54;
        for (int index4 = 0; index4 < 4; ++index4)
          Dust.NewDust(new Vector2((float) (index1 * 16), (float) (index3 * 16)), 16, 16, 11, 0.0f, 0.0f, 0, (Color) null, 1f);
      }
    }

    public static bool OpenDoor(int i, int j, int direction)
    {
      if (Main.tile[i, j - 1] == null)
        Main.tile[i, j - 1] = new Tile();
      if (Main.tile[i, j - 2] == null)
        Main.tile[i, j - 2] = new Tile();
      if (Main.tile[i, j + 1] == null)
        Main.tile[i, j + 1] = new Tile();
      if (Main.tile[i, j] == null)
        Main.tile[i, j] = new Tile();
      Tile tile = Main.tile[i, j];
      if ((int) tile.type != 10 || (int) tile.frameY >= 594 && (int) tile.frameY <= 646 && (int) tile.frameX < 54)
        return false;
      short num1 = 0;
      int frameY = (int) tile.frameY;
      int num2 = 0;
      while (frameY >= 54)
      {
        frameY -= 54;
        ++num2;
      }
      if ((int) tile.frameX >= 54)
      {
        int num3 = (int) tile.frameX / 54;
        num2 += 36 * num3;
        num1 += (short) (72 * num3);
      }
      int y = j - frameY / 18;
      int index = i;
      byte color1 = Main.tile[index, y].color();
      if (Main.tile[index, y + 1] == null)
        Main.tile[index, y + 1] = new Tile();
      byte color2 = Main.tile[index, y + 1].color();
      if (Main.tile[index, y + 2] == null)
        Main.tile[index, y + 2] = new Tile();
      byte color3 = Main.tile[index, y + 2].color();
      int x;
      int i1;
      if (direction == -1)
      {
        x = i - 1;
        num1 += (short) 36;
        i1 = i - 1;
      }
      else
      {
        x = i;
        i1 = i + 1;
      }
      for (int j1 = y; j1 < y + 3; ++j1)
      {
        if (Main.tile[i1, j1] == null)
          Main.tile[i1, j1] = new Tile();
        if (Main.tile[i1, j1].active())
        {
          if (!Main.tileCut[(int) Main.tile[i1, j1].type] && (int) Main.tile[i1, j1].type != 3 && ((int) Main.tile[i1, j1].type != 24 && (int) Main.tile[i1, j1].type != 52) && ((int) Main.tile[i1, j1].type != 61 && (int) Main.tile[i1, j1].type != 62 && ((int) Main.tile[i1, j1].type != 69 && (int) Main.tile[i1, j1].type != 71)) && ((int) Main.tile[i1, j1].type != 73 && (int) Main.tile[i1, j1].type != 74 && ((int) Main.tile[i1, j1].type != 110 && (int) Main.tile[i1, j1].type != 113) && (int) Main.tile[i1, j1].type != 115))
            return false;
          WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      if (Main.netMode != 1 && Wiring.running)
      {
        Wiring.SkipWire(x, y);
        Wiring.SkipWire(x, y + 1);
        Wiring.SkipWire(x, y + 2);
        Wiring.SkipWire(x + 1, y);
        Wiring.SkipWire(x + 1, y + 1);
        Wiring.SkipWire(x + 1, y + 2);
      }
      int num4 = num2 % 36 * 54;
      Main.PlaySound(8, i * 16, j * 16, 1, 1f, 0.0f);
      Main.tile[x, y].active(true);
      Main.tile[x, y].type = (ushort) 11;
      Main.tile[x, y].frameY = (short) num4;
      Main.tile[x, y].frameX = num1;
      Main.tile[x, y].color(color1);
      if (Main.tile[x + 1, y] == null)
        Main.tile[x + 1, y] = new Tile();
      Main.tile[x + 1, y].active(true);
      Main.tile[x + 1, y].type = (ushort) 11;
      Main.tile[x + 1, y].frameY = (short) num4;
      Main.tile[x + 1, y].frameX = (short) ((int) num1 + 18);
      Main.tile[x + 1, y].color(color1);
      if (Main.tile[x, y + 1] == null)
        Main.tile[x, y + 1] = new Tile();
      Main.tile[x, y + 1].active(true);
      Main.tile[x, y + 1].type = (ushort) 11;
      Main.tile[x, y + 1].frameY = (short) (num4 + 18);
      Main.tile[x, y + 1].frameX = num1;
      Main.tile[x, y + 1].color(color2);
      if (Main.tile[x + 1, y + 1] == null)
        Main.tile[x + 1, y + 1] = new Tile();
      Main.tile[x + 1, y + 1].active(true);
      Main.tile[x + 1, y + 1].type = (ushort) 11;
      Main.tile[x + 1, y + 1].frameY = (short) (num4 + 18);
      Main.tile[x + 1, y + 1].frameX = (short) ((int) num1 + 18);
      Main.tile[x + 1, y + 1].color(color2);
      if (Main.tile[x, y + 2] == null)
        Main.tile[x, y + 2] = new Tile();
      Main.tile[x, y + 2].active(true);
      Main.tile[x, y + 2].type = (ushort) 11;
      Main.tile[x, y + 2].frameY = (short) (num4 + 36);
      Main.tile[x, y + 2].frameX = num1;
      Main.tile[x, y + 2].color(color3);
      if (Main.tile[x + 1, y + 2] == null)
        Main.tile[x + 1, y + 2] = new Tile();
      Main.tile[x + 1, y + 2].active(true);
      Main.tile[x + 1, y + 2].type = (ushort) 11;
      Main.tile[x + 1, y + 2].frameY = (short) (num4 + 36);
      Main.tile[x + 1, y + 2].frameX = (short) ((int) num1 + 18);
      Main.tile[x + 1, y + 2].color(color3);
      for (int i2 = x - 1; i2 <= x + 2; ++i2)
      {
        for (int j1 = y - 1; j1 <= y + 2; ++j1)
          WorldGen.TileFrame(i2, j1, false, false);
      }
      return true;
    }

    public static void Check1xX(int x, int j, short type)
    {
      if (WorldGen.destroyObject)
        return;
      int frameX = (int) Main.tile[x, j].frameX;
      int num1 = 3;
      if ((int) type == 92)
        num1 = 6;
      int frameY = (int) Main.tile[x, j].frameY;
      int num2 = 0;
      while (frameY >= 18 * num1)
      {
        frameY -= 18 * num1;
        ++num2;
      }
      int num3 = (int) Main.tile[x, j].frameX / 18;
      int num4 = j - frameY / 18;
      bool flag = false;
      for (int index = 0; index < num1; ++index)
      {
        if (Main.tile[x, num4 + index] == null)
          Main.tile[x, num4 + index] = new Tile();
        if (!Main.tile[x, num4 + index].active())
          flag = true;
        else if ((int) Main.tile[x, num4 + index].type != (int) type)
          flag = true;
        else if ((int) Main.tile[x, num4 + index].frameY != index * 18 + num2 * num1 * 18)
          flag = true;
        else if ((int) Main.tile[x, num4 + index].frameX != frameX)
          flag = true;
      }
      if (Main.tile[x, num4 + num1] == null)
        Main.tile[x, num4 + num1] = new Tile();
      if (!WorldGen.SolidTileAllowBottomSlope(x, num4 + num1))
        flag = true;
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int index = 0; index < num1; ++index)
      {
        if ((int) Main.tile[x, num4 + index].type == (int) type)
          WorldGen.KillTile(x, num4 + index, false, false, false);
      }
      if ((int) type == 92)
        Item.NewItem(x * 16, j * 16, 32, 32, 341, 1, false, 0, false, false);
      if ((int) type == 453)
      {
        int Type = num3 >= 2 ? (num3 >= 4 ? 3743 : 3745) : 3744;
        Item.NewItem(x * 16, j * 16, 16, 32, Type, 1, false, 0, false, false);
      }
      if ((int) type == 93)
      {
        int Type = 0;
        if (num2 == 0)
          Type = 342;
        else if (num2 >= 1 && num2 <= 10)
          Type = 2082 + num2 - 1;
        else if (num2 >= 11 && num2 <= 16)
          Type = 2129 + num2 - 11;
        else if (num2 == 17)
          Type = 2225;
        else if (num2 == 18)
          Type = 2533;
        else if (num2 == 19)
          Type = 2547;
        else if (num2 == 20)
          Type = 2563;
        else if (num2 == 21)
          Type = 2578;
        else if (num2 == 22)
          Type = 2643;
        else if (num2 == 23)
          Type = 2644;
        else if (num2 == 24)
          Type = 2645;
        else if (num2 == 25)
          Type = 2646;
        else if (num2 == 26)
          Type = 2647;
        else if (num2 == 27)
          Type = 2819;
        else if (num2 == 28)
          Type = 3135;
        else if (num2 == 29)
          Type = 3137;
        else if (num2 == 30)
          Type = 3136;
        else if (num2 == 31)
          Type = 3892;
        Item.NewItem(x * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
    }

    public static void Check2xX(int i, int j, ushort type)
    {
      if (WorldGen.destroyObject)
        return;
      int index1 = i;
      int frameX1 = (int) Main.tile[i, j].frameX;
      while (frameX1 >= 36)
        frameX1 -= 36;
      if (frameX1 == 18)
        --index1;
      if (Main.tile[index1, j] == null)
        Main.tile[index1, j] = new Tile();
      int num1 = (int) Main.tile[index1, j].frameY / 18;
      int num2 = 3;
      if ((int) type == 104)
        num2 = 5;
      if ((int) type == 207)
        num2 = 4;
      int num3 = 0;
      while (num1 >= num2)
      {
        num1 -= num2;
        num3 += num2 * 18;
      }
      int y = j - num1;
      if ((int) type == 410 && num3 != 0)
        num3 += 2;
      if (Main.tile[index1, y] == null)
        Main.tile[index1, y] = new Tile();
      int frameX2 = (int) Main.tile[index1, j].frameX;
      int frameY = (int) Main.tile[index1, j].frameY;
      bool flag = false;
      for (int index2 = 0; index2 < num2; ++index2)
      {
        if (Main.tile[index1, y + index2] == null)
          Main.tile[index1, y + index2] = new Tile();
        if (!Main.tile[index1, y + index2].active())
          flag = true;
        else if ((int) Main.tile[index1, y + index2].type != (int) type)
          flag = true;
        else if ((int) Main.tile[index1, y + index2].frameY != index2 * 18 + num3)
          flag = true;
        else if ((int) Main.tile[index1, y + index2].frameX != frameX2)
          flag = true;
        if (Main.tile[index1 + 1, y + index2] == null)
          Main.tile[index1 + 1, y + index2] = new Tile();
        if (!Main.tile[index1 + 1, y + index2].active())
          flag = true;
        else if ((int) Main.tile[index1 + 1, y + index2].type != (int) type)
          flag = true;
        else if ((int) Main.tile[index1 + 1, y + index2].frameY != index2 * 18 + num3)
          flag = true;
        else if ((int) Main.tile[index1 + 1, y + index2].frameX != frameX2 + 18)
          flag = true;
      }
      if ((int) type == 465)
      {
        for (int index2 = 0; index2 < 2; ++index2)
        {
          if (Main.tile[index1 + index2, y - 1] == null)
            Main.tile[index1 + index2, y - 1] = new Tile();
          if (!Main.tile[index1 + index2, y - 1].nactive() || !Main.tileSolid[(int) Main.tile[index1 + index2, y - 1].type] || Main.tileSolidTop[(int) Main.tile[index1 + index2, y - 1].type])
          {
            flag = true;
            break;
          }
        }
      }
      else
      {
        if (!WorldGen.SolidTileAllowBottomSlope(index1, y + num2))
          flag = true;
        if (!WorldGen.SolidTileAllowBottomSlope(index1 + 1, y + num2))
          flag = true;
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int index2 = 0; index2 < num2; ++index2)
      {
        if ((int) Main.tile[index1, y + index2].type == (int) type)
          WorldGen.KillTile(index1, y + index2, false, false, false);
        if ((int) Main.tile[index1 + 1, y + index2].type == (int) type)
          WorldGen.KillTile(index1 + 1, y + index2, false, false, false);
      }
      if ((int) type == 104)
      {
        int num4 = frameX2 / 36;
        int Type = num4 < 1 || num4 > 5 ? (num4 != 6 ? (num4 != 7 ? (num4 < 8 || num4 > 23 ? (num4 != 24 ? (num4 != 25 ? (num4 != 26 ? (num4 != 27 ? (num4 != 28 ? (num4 != 29 ? (num4 != 30 ? (num4 != 31 ? (num4 != 32 ? 359 : 3902) : 3901) : 3900) : 3899) : 3898) : 3127) : 3128) : 3126) : 2809) : 2591 + num4 - 8) : 2575) : 2560) : 2237 + num4 - 1;
        Item.NewItem(index1 * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      if ((int) type == 105)
      {
        int num4 = frameX2 / 36 + frameY / 54 * 55;
        int Type = num4 != 0 ? (num4 != 1 ? (num4 != 43 ? (num4 != 44 ? (num4 != 45 ? (num4 != 46 ? (num4 != 47 ? (num4 != 48 ? (num4 != 49 ? (num4 != 50 ? (num4 < 51 || num4 > 62 ? (num4 < 63 || num4 > 75 ? 438 + num4 - 2 : 3708 + num4 - 63) : 3651 + num4 - 51) : 2672) : 1462) : 1410) : 1409) : 1408) : 1154) : 1153) : 1152) : 52) : 360;
        Item.NewItem(index1 * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      if ((int) type == 356)
        Item.NewItem(index1 * 16, j * 16, 32, 32, 3064, 1, false, 0, false, false);
      if ((int) type == 456)
        Item.NewItem(index1 * 16, j * 16, 32, 32, 3748, 1, false, 0, false, false);
      if ((int) type == 337)
      {
        int num4 = frameX2 / 36;
        Item.NewItem(index1 * 16, j * 16, 32, 32, 2702 + num4, 1, false, 0, false, false);
      }
      if ((int) type == 207)
      {
        int Type = frameX2 / 36;
        switch (Type)
        {
          case 0:
            Type = 909;
            break;
          case 1:
            Type = 910;
            break;
          default:
            if (Type >= 2 && Type <= 7)
            {
              Type = 938 + Type;
              break;
            }
            break;
        }
        Item.NewItem(index1 * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      if ((int) type == 410)
      {
        int num4 = frameX2 / 36;
        Item.NewItem(index1 * 16, j * 16, 32, 32, num4 + 3536, 1, false, 0, false, false);
      }
      if ((int) type == 320)
        Item.NewItem(index1 * 16, j * 16, 32, 32, 2496, 1, false, 0, false, false);
      if ((int) type == 349)
        Item.NewItem(index1 * 16, j * 16, 32, 32, 470, 1, false, 0, false, false);
      if ((int) type == 465)
        Item.NewItem(index1 * 16, j * 16, 32, 32, 3815, 1, false, 0, false, false);
      if ((int) type == 378)
      {
        Item.NewItem(index1 * 16, j * 16, 32, 48, 3202, 1, false, 0, false, false);
        TETrainingDummy.Kill(index1, y);
      }
      WorldGen.destroyObject = false;
    }

    public static void PlaceTight(int x, int y, ushort type = 165, bool spiders = false)
    {
      if (Main.tile[x, y - 1] == null)
        Main.tile[x, y - 1] = new Tile();
      if (Main.tile[x, y] == null)
        Main.tile[x, y] = new Tile();
      if (Main.tile[x, y + 1] == null)
        Main.tile[x, y + 1] = new Tile();
      if (WorldGen.SolidTile(x, y - 1) && !Main.tile[x, y].active() && !Main.tile[x, y + 1].active())
      {
        if (spiders)
        {
          int num = 108 + WorldGen.genRand.Next(3) * 18;
          Main.tile[x, y].type = type;
          Main.tile[x, y].active(true);
          Main.tile[x, y].frameX = (short) num;
          Main.tile[x, y].frameY = (short) 0;
          Main.tile[x, y + 1].type = type;
          Main.tile[x, y + 1].active(true);
          Main.tile[x, y + 1].frameX = (short) num;
          Main.tile[x, y + 1].frameY = (short) 18;
        }
        else
        {
          if ((int) Main.tile[x, y - 1].type == 147 || (int) Main.tile[x, y - 1].type == 161 || ((int) Main.tile[x, y - 1].type == 163 || (int) Main.tile[x, y - 1].type == 164) || (int) Main.tile[x, y - 1].type == 200)
          {
            if (WorldGen.genRand.Next(2) == 0)
            {
              int num = WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 72;
            }
            else
            {
              int num = WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 0;
              Main.tile[x, y + 1].type = type;
              Main.tile[x, y + 1].active(true);
              Main.tile[x, y + 1].frameX = (short) num;
              Main.tile[x, y + 1].frameY = (short) 18;
            }
          }
          if ((int) Main.tile[x, y - 1].type == 1 || Main.tileMoss[(int) Main.tile[x, y - 1].type] || ((int) Main.tile[x, y - 1].type == 117 || (int) Main.tile[x, y - 1].type == 25) || (int) Main.tile[x, y - 1].type == 203)
          {
            if (WorldGen.genRand.Next(2) == 0)
            {
              int num = 54 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 72;
            }
            else
            {
              int num = 54 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 0;
              Main.tile[x, y + 1].type = type;
              Main.tile[x, y + 1].active(true);
              Main.tile[x, y + 1].frameX = (short) num;
              Main.tile[x, y + 1].frameY = (short) 18;
            }
          }
          if ((int) Main.tile[x, y - 1].type == 225)
          {
            int num = 162 + WorldGen.genRand.Next(3) * 18;
            Main.tile[x, y].type = type;
            Main.tile[x, y].active(true);
            Main.tile[x, y].frameX = (short) num;
            Main.tile[x, y].frameY = (short) 72;
          }
          if ((int) Main.tile[x, y - 1].type == 396 || (int) Main.tile[x, y - 1].type == 397)
          {
            if (WorldGen.genRand.Next(2) == 0)
            {
              int num = 378 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 72;
            }
            else
            {
              int num = 378 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 0;
              Main.tile[x, y + 1].type = type;
              Main.tile[x, y + 1].active(true);
              Main.tile[x, y + 1].frameX = (short) num;
              Main.tile[x, y + 1].frameY = (short) 18;
            }
          }
          if ((int) Main.tile[x, y - 1].type == 368)
          {
            if (WorldGen.genRand.Next(2) == 0)
            {
              int num = 432 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 72;
            }
            else
            {
              int num = 432 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 0;
              Main.tile[x, y + 1].type = type;
              Main.tile[x, y + 1].active(true);
              Main.tile[x, y + 1].frameX = (short) num;
              Main.tile[x, y + 1].frameY = (short) 18;
            }
          }
          if ((int) Main.tile[x, y - 1].type == 367)
          {
            if (WorldGen.genRand.Next(2) == 0)
            {
              int num = 486 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 72;
            }
            else
            {
              int num = 486 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 0;
              Main.tile[x, y + 1].type = type;
              Main.tile[x, y + 1].active(true);
              Main.tile[x, y + 1].frameX = (short) num;
              Main.tile[x, y + 1].frameY = (short) 18;
            }
          }
        }
      }
      else
      {
        if (spiders)
          return;
        if (WorldGen.SolidTile(x, y + 1) && !Main.tile[x, y].active() && !Main.tile[x, y - 1].active())
        {
          if ((int) Main.tile[x, y + 1].type == 1 || Main.tileMoss[(int) Main.tile[x, y + 1].type] || ((int) Main.tile[x, y - 1].type == 117 || (int) Main.tile[x, y - 1].type == 25) || (int) Main.tile[x, y - 1].type == 203)
          {
            if (WorldGen.genRand.Next(2) == 0)
            {
              int num = 54 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 90;
            }
            else
            {
              int num = 54 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y - 1].type = type;
              Main.tile[x, y - 1].active(true);
              Main.tile[x, y - 1].frameX = (short) num;
              Main.tile[x, y - 1].frameY = (short) 36;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 54;
            }
          }
          if ((int) Main.tile[x, y + 1].type == 225)
          {
            int num = 162 + WorldGen.genRand.Next(3) * 18;
            Main.tile[x, y].type = type;
            Main.tile[x, y].active(true);
            Main.tile[x, y].frameX = (short) num;
            Main.tile[x, y].frameY = (short) 90;
          }
          if ((int) Main.tile[x, y + 1].type == 396 || (int) Main.tile[x, y + 1].type == 397)
          {
            if (WorldGen.genRand.Next(2) == 0)
            {
              int num = 378 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 90;
            }
            else
            {
              int num = 378 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y - 1].type = type;
              Main.tile[x, y - 1].active(true);
              Main.tile[x, y - 1].frameX = (short) num;
              Main.tile[x, y - 1].frameY = (short) 36;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 54;
            }
          }
          if ((int) Main.tile[x, y + 1].type == 368)
          {
            if (WorldGen.genRand.Next(2) == 0)
            {
              int num = 432 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 90;
            }
            else
            {
              int num = 432 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y - 1].type = type;
              Main.tile[x, y - 1].active(true);
              Main.tile[x, y - 1].frameX = (short) num;
              Main.tile[x, y - 1].frameY = (short) 36;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 54;
            }
          }
          if ((int) Main.tile[x, y + 1].type == 367)
          {
            if (WorldGen.genRand.Next(2) == 0)
            {
              int num = 486 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 90;
            }
            else
            {
              int num = 486 + WorldGen.genRand.Next(3) * 18;
              Main.tile[x, y - 1].type = type;
              Main.tile[x, y - 1].active(true);
              Main.tile[x, y - 1].frameX = (short) num;
              Main.tile[x, y - 1].frameY = (short) 36;
              Main.tile[x, y].type = type;
              Main.tile[x, y].active(true);
              Main.tile[x, y].frameX = (short) num;
              Main.tile[x, y].frameY = (short) 54;
            }
          }
        }
      }
      if ((int) Main.tile[x, y].type != 165)
        return;
      WorldGen.CheckTight(x, y);
    }

    public static void TightBiome(int x, int j)
    {
      if (Main.netMode == 1 || Main.tile[x, j] == null)
        return;
      int tileY = j;
      int num1 = 1;
      int num2;
      if ((int) Main.tile[x, tileY].frameX >= 0 && (int) Main.tile[x, tileY].frameX <= 36)
        num2 = 7;
      else if ((int) Main.tile[x, tileY].frameX >= 54 && (int) Main.tile[x, tileY].frameX <= 90)
        num2 = 0;
      else if ((int) Main.tile[x, tileY].frameX >= 216 && (int) Main.tile[x, tileY].frameX <= 252)
        num2 = 1;
      else if ((int) Main.tile[x, tileY].frameX >= 270 && (int) Main.tile[x, tileY].frameX <= 306)
        num2 = 2;
      else if ((int) Main.tile[x, tileY].frameX >= 324 && (int) Main.tile[x, tileY].frameX <= 360)
        num2 = 3;
      else if ((int) Main.tile[x, tileY].frameX >= 378 && (int) Main.tile[x, tileY].frameX <= 414)
        num2 = 4;
      else if ((int) Main.tile[x, tileY].frameX >= 432 && (int) Main.tile[x, tileY].frameX <= 468)
      {
        num2 = 5;
      }
      else
      {
        if ((int) Main.tile[x, tileY].frameX < 486 || (int) Main.tile[x, tileY].frameX > 522)
          return;
        num2 = 6;
      }
      int type;
      if ((int) Main.tile[x, tileY].frameY == 72)
        type = (int) Main.tile[x, tileY - 1].type;
      else if ((int) Main.tile[x, tileY].frameY == 90)
        type = (int) Main.tile[x, tileY + 1].type;
      else if ((int) Main.tile[x, tileY].frameY >= 36)
      {
        if ((int) Main.tile[x, tileY].frameY == 54)
          --tileY;
        num1 = 2;
        type = (int) Main.tile[x, tileY + 2].type;
      }
      else
      {
        if ((int) Main.tile[x, tileY].frameY == 18)
          --tileY;
        num1 = 2;
        type = (int) Main.tile[x, tileY - 1].type;
      }
      int num3;
      if (type == 1)
        num3 = 0;
      else if (type == 117 || type == 164 || (type == 402 || type == 403))
        num3 = 1;
      else if (type == 25 || type == 163 || (type == 398 || type == 400))
        num3 = 2;
      else if (type == 203 || type == 200 || (type == 399 || type == 401))
        num3 = 3;
      else if (type == 396 || type == 397)
        num3 = 4;
      else if (type == 367)
        num3 = 6;
      else if (type == 368)
      {
        num3 = 5;
      }
      else
      {
        if (type != 161)
          return;
        num3 = 7;
      }
      if (num2 == num3)
        return;
      int num4 = WorldGen.genRand.Next(3) * 18;
      if (num3 == 0)
        num4 += 54;
      else if (num3 == 1)
        num4 += 216;
      else if (num3 == 2)
        num4 += 270;
      else if (num3 == 3)
        num4 += 324;
      else if (num3 == 4)
        num4 += 378;
      else if (num3 == 5)
        num4 += 432;
      else if (num3 == 6)
        num4 += 486;
      else if (num3 == 7)
        num4 = num4;
      for (int index = tileY; index < tileY + num1; ++index)
        Main.tile[x, index].frameX = (short) num4;
      if (Main.netMode != 2)
        return;
      NetMessage.SendTileSquare(-1, x, tileY, 2, TileChangeType.None);
    }

    public static void CheckTight(int x, int j)
    {
      if (Main.tile[x, j] == null)
        return;
      int j1 = j;
      if ((int) Main.tile[x, j1].frameY == 72)
      {
        if (Main.tile[x, j1 - 1] == null)
          Main.tile[x, j1 - 1] = new Tile();
        if (Main.tile[x, j1] == null)
          Main.tile[x, j1] = new Tile();
        if (Main.tile[x, j1 + 1] == null)
          Main.tile[x, j1 + 1] = new Tile();
        bool flag = false;
        if (!WorldGen.SolidTile(x, j1 - 1))
          flag = true;
        if (flag)
        {
          if ((int) Main.tile[x, j1].type != (int) Main.tile[x, j].type)
            return;
          WorldGen.KillTile(x, j1, false, false, false);
        }
        else
          WorldGen.TightBiome(x, j1);
      }
      else if ((int) Main.tile[x, j1].frameY == 90)
      {
        if (Main.tile[x, j1 - 1] == null)
          Main.tile[x, j1 - 1] = new Tile();
        if (Main.tile[x, j1] == null)
          Main.tile[x, j1] = new Tile();
        if (Main.tile[x, j1 + 1] == null)
          Main.tile[x, j1 + 1] = new Tile();
        bool flag = false;
        if (!WorldGen.SolidTile(x, j1 + 1))
          flag = true;
        if (flag)
        {
          if ((int) Main.tile[x, j1].type != (int) Main.tile[x, j].type)
            return;
          WorldGen.KillTile(x, j1, false, false, false);
        }
        else
          WorldGen.TightBiome(x, j1);
      }
      else if ((int) Main.tile[x, j1].frameY >= 36)
      {
        if ((int) Main.tile[x, j1].frameY == 54)
          --j1;
        if (Main.tile[x, j1] == null)
          Main.tile[x, j1] = new Tile();
        if (Main.tile[x, j1 + 1] == null)
          Main.tile[x, j1 + 1] = new Tile();
        if (Main.tile[x, j1 + 2] == null)
          Main.tile[x, j1 + 2] = new Tile();
        bool flag = false;
        if (!WorldGen.SolidTile(x, j1 + 2))
          flag = true;
        if ((int) Main.tile[x, j1 + 1].type != (int) Main.tile[x, j1].type)
          flag = true;
        if ((int) Main.tile[x, j1 + 1].frameX != (int) Main.tile[x, j1].frameX)
          flag = true;
        if (flag)
        {
          if ((int) Main.tile[x, j1].type == (int) Main.tile[x, j].type)
            WorldGen.KillTile(x, j1, false, false, false);
          if ((int) Main.tile[x, j1 + 1].type != (int) Main.tile[x, j].type)
            return;
          WorldGen.KillTile(x, j1 + 1, false, false, false);
        }
        else
          WorldGen.TightBiome(x, j1);
      }
      else
      {
        if ((int) Main.tile[x, j1].frameY == 18)
          --j1;
        if (Main.tile[x, j1 - 1] == null)
          Main.tile[x, j1 - 1] = new Tile();
        if (Main.tile[x, j1] == null)
          Main.tile[x, j1] = new Tile();
        if (Main.tile[x, j1 + 1] == null)
          Main.tile[x, j1 + 1] = new Tile();
        bool flag = false;
        if (!WorldGen.SolidTile(x, j1 - 1))
          flag = true;
        if ((int) Main.tile[x, j1 + 1].type != (int) Main.tile[x, j1].type)
          flag = true;
        if ((int) Main.tile[x, j1 + 1].frameX != (int) Main.tile[x, j1].frameX)
          flag = true;
        if (flag)
        {
          if ((int) Main.tile[x, j1].type == (int) Main.tile[x, j].type)
            WorldGen.KillTile(x, j1, false, false, false);
          if ((int) Main.tile[x, j1 + 1].type != (int) Main.tile[x, j].type)
            return;
          WorldGen.KillTile(x, j1 + 1, false, false, false);
        }
        else
          WorldGen.TightBiome(x, j1);
      }
    }

    public static void Place1xX(int x, int y, ushort type, int style = 0)
    {
      int num1 = style * 18;
      int num2 = 3;
      if ((int) type == 92)
        num2 = 6;
      bool flag = true;
      for (int index = y - num2 + 1; index < y + 1; ++index)
      {
        if (Main.tile[x, index] == null)
          Main.tile[x, index] = new Tile();
        if (Main.tile[x, index].active())
          flag = false;
        if ((int) type == 93 && (int) Main.tile[x, index].liquid > 0)
          flag = false;
      }
      if (!flag || !WorldGen.SolidTile2(x, y + 1))
        return;
      for (int index = 0; index < num2; ++index)
      {
        Main.tile[x, y - num2 + 1 + index].active(true);
        Main.tile[x, y - num2 + 1 + index].frameY = (short) (index * 18 + num2 * num1);
        Main.tile[x, y - num2 + 1 + index].frameX = (short) 0;
        Main.tile[x, y - num2 + 1 + index].type = type;
      }
    }

    public static int checkXmasTreeDrop(int x, int y, int obj)
    {
      int index1 = x;
      int index2 = y;
      if ((int) Main.tile[x, y].frameX < 10)
      {
        index1 -= (int) Main.tile[x, y].frameX;
        index2 -= (int) Main.tile[x, y].frameY;
      }
      int num1 = 0;
      if (((int) Main.tile[index1, index2].frameY & 1) == 1)
        ++num1;
      if (((int) Main.tile[index1, index2].frameY & 2) == 2)
        num1 += 2;
      if (((int) Main.tile[index1, index2].frameY & 4) == 4)
        num1 += 4;
      int num2 = 0;
      if (((int) Main.tile[index1, index2].frameY & 8) == 8)
        ++num2;
      if (((int) Main.tile[index1, index2].frameY & 16) == 16)
        num2 += 2;
      if (((int) Main.tile[index1, index2].frameY & 32) == 32)
        num2 += 4;
      int num3 = 0;
      if (((int) Main.tile[index1, index2].frameY & 64) == 64)
        ++num3;
      if (((int) Main.tile[index1, index2].frameY & 128) == 128)
        num3 += 2;
      if (((int) Main.tile[index1, index2].frameY & 256) == 256)
        num3 += 4;
      if (((int) Main.tile[index1, index2].frameY & 512) == 512)
        num3 += 8;
      int num4 = 0;
      if (((int) Main.tile[index1, index2].frameY & 1024) == 1024)
        ++num4;
      if (((int) Main.tile[index1, index2].frameY & 2048) == 2048)
        num4 += 2;
      if (((int) Main.tile[index1, index2].frameY & 4096) == 4096)
        num4 += 4;
      if (((int) Main.tile[index1, index2].frameY & 8192) == 8192)
        num4 += 8;
      if (obj == 0 && num1 > 0)
        return num1;
      if (obj == 1 && num2 > 0)
        return num2;
      if (obj == 2 && num3 > 0)
        return num3;
      if (obj == 3 && num4 > 0)
        return num4;
      return -1;
    }

    public static void dropXmasTree(int x, int y, int obj)
    {
      int index1 = x;
      int index2 = y;
      if ((int) Main.tile[x, y].frameX < 10)
      {
        index1 -= (int) Main.tile[x, y].frameX;
        index2 -= (int) Main.tile[x, y].frameY;
      }
      int num1 = 0;
      if (((int) Main.tile[index1, index2].frameY & 1) == 1)
        ++num1;
      if (((int) Main.tile[index1, index2].frameY & 2) == 2)
        num1 += 2;
      if (((int) Main.tile[index1, index2].frameY & 4) == 4)
        num1 += 4;
      int num2 = 0;
      if (((int) Main.tile[index1, index2].frameY & 8) == 8)
        ++num2;
      if (((int) Main.tile[index1, index2].frameY & 16) == 16)
        num2 += 2;
      if (((int) Main.tile[index1, index2].frameY & 32) == 32)
        num2 += 4;
      int num3 = 0;
      if (((int) Main.tile[index1, index2].frameY & 64) == 64)
        ++num3;
      if (((int) Main.tile[index1, index2].frameY & 128) == 128)
        num3 += 2;
      if (((int) Main.tile[index1, index2].frameY & 256) == 256)
        num3 += 4;
      if (((int) Main.tile[index1, index2].frameY & 512) == 512)
        num3 += 8;
      int num4 = 0;
      if (((int) Main.tile[index1, index2].frameY & 1024) == 1024)
        ++num4;
      if (((int) Main.tile[index1, index2].frameY & 2048) == 2048)
        num4 += 2;
      if (((int) Main.tile[index1, index2].frameY & 4096) == 4096)
        num4 += 4;
      if (((int) Main.tile[index1, index2].frameY & 8192) == 8192)
        num4 += 8;
      if (obj == 0 && num1 > 0)
      {
        int number = Item.NewItem(x * 16, y * 16, 16, 16, 1874 + num1 - 1, 1, false, 0, false, false);
        if (Main.netMode != 1)
          return;
        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
      }
      else if (obj == 1 && num2 > 0)
      {
        int number = Item.NewItem(x * 16, y * 16, 16, 16, 1878 + num2 - 1, 1, false, 0, false, false);
        if (Main.netMode != 1)
          return;
        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
      }
      else if (obj == 2 && num3 > 0)
      {
        int number = Item.NewItem(x * 16, y * 16, 16, 16, 1884 + num3 - 1, 1, false, 0, false, false);
        if (Main.netMode != 1)
          return;
        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
      }
      else
      {
        if (obj != 3 || num4 <= 0)
          return;
        int number = Item.NewItem(x * 16, y * 16, 16, 16, 1895 + num4 - 1, 1, false, 0, false, false);
        if (Main.netMode != 1)
          return;
        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
      }
    }

    public static void setXmasTree(int x, int y, int obj, int style)
    {
      int index1 = x;
      int index2 = y;
      if ((int) Main.tile[x, y].frameX < 10)
      {
        index1 -= (int) Main.tile[x, y].frameX;
        index2 -= (int) Main.tile[x, y].frameY;
      }
      if (obj == 0)
      {
        if ((style & 1) == 1)
          Main.tile[index1, index2].frameY |= (short) 1;
        else
          Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -2);
        if ((style & 2) == 2)
          Main.tile[index1, index2].frameY |= (short) 2;
        else
          Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -3);
        if ((style & 4) == 4)
          Main.tile[index1, index2].frameY |= (short) 4;
        else
          Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -5);
      }
      if (obj == 1)
      {
        if ((style & 1) == 1)
          Main.tile[index1, index2].frameY |= (short) 8;
        else
          Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -9);
        if ((style & 2) == 2)
          Main.tile[index1, index2].frameY |= (short) 16;
        else
          Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -17);
        if ((style & 4) == 4)
          Main.tile[index1, index2].frameY |= (short) 32;
        else
          Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -33);
      }
      if (obj == 2)
      {
        if ((style & 1) == 1)
          Main.tile[index1, index2].frameY |= (short) 64;
        else
          Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -65);
        if ((style & 2) == 2)
          Main.tile[index1, index2].frameY |= (short) 128;
        else
          Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -129);
        if ((style & 4) == 4)
          Main.tile[index1, index2].frameY |= (short) 256;
        else
          Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -257);
        if ((style & 8) == 8)
          Main.tile[index1, index2].frameY |= (short) 512;
        else
          Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -513);
      }
      if (obj != 3)
        return;
      if ((style & 1) == 1)
        Main.tile[index1, index2].frameY |= (short) 1024;
      else
        Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -1025);
      if ((style & 2) == 2)
        Main.tile[index1, index2].frameY |= (short) 2048;
      else
        Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -2049);
      if ((style & 4) == 4)
        Main.tile[index1, index2].frameY |= (short) 4096;
      else
        Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -4097);
      if ((style & 8) == 8)
        Main.tile[index1, index2].frameY |= (short) 8192;
      else
        Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY & -8193);
    }

    public static int PlaceXmasTree_Direct(int x, int y, int type, int style, int dir)
    {
      for (short index1 = 0; (int) index1 < 4; ++index1)
      {
        for (short index2 = 0; (int) index2 < 8; ++index2)
        {
          Tile tile = Main.tile[x + (int) index1, y + (int) index2];
          tile.active(true);
          tile.type = (ushort) type;
          if ((int) index1 == 0 && (int) index2 == 0)
          {
            tile.frameX = (short) 10;
            tile.frameY = (short) 0;
          }
          else
          {
            tile.frameX = index1;
            tile.frameY = index2;
          }
        }
      }
      return 0;
    }

    public static void PlaceXmasTree(int x, int y, ushort type = 171)
    {
      bool flag = true;
      int num1 = x - 1;
      int num2 = y - 7;
      for (int i = num1; i < num1 + 4; ++i)
      {
        for (int index = num2; index < num2 + 8; ++index)
        {
          if (Main.tile[i, index].active())
            flag = false;
        }
        if (i > num1 && i < num1 + 3 && !WorldGen.SolidTile(i, num2 + 8))
          flag = false;
      }
      if (!flag)
        return;
      int num3 = 0;
      for (int index1 = num1; index1 < num1 + 4; ++index1)
      {
        int num4 = 0;
        for (int index2 = num2; index2 < num2 + 8; ++index2)
        {
          Main.tile[index1, index2].active(true);
          if (num3 == 0 && num4 == 0)
          {
            Main.tile[index1, index2].frameX = (short) 10;
            Main.tile[index1, index2].frameY = (short) 0;
          }
          else
          {
            Main.tile[index1, index2].frameX = (short) num3;
            Main.tile[index1, index2].frameY = (short) num4;
          }
          Main.tile[index1, index2].type = type;
          Main.tile[index1, index2].active(true);
          ++num4;
        }
        ++num3;
      }
    }

    public static void CheckXmasTree(int x, int y)
    {
      if (WorldGen.destroyObject)
        return;
      int num1 = x;
      int num2 = y;
      if ((int) Main.tile[x, y].frameX < 10)
      {
        num1 -= (int) Main.tile[x, y].frameX;
        num2 -= (int) Main.tile[x, y].frameY;
      }
      bool flag = false;
      int num3 = 0;
      for (int i = num1; i < num1 + 4; ++i)
      {
        int num4 = 0;
        for (int index = num2; index < num2 + 8; ++index)
        {
          if (Main.tile[i, index].active() && (int) Main.tile[i, index].type == 171)
          {
            if (num3 != 0 && num4 != 0 && ((int) Main.tile[i, index].frameX != num3 && (int) Main.tile[i, index].frameY != num4))
              flag = true;
          }
          else
            flag = true;
          ++num4;
        }
        ++num3;
        if (i > num1 && i < num1 + 3 && !WorldGen.SolidTile2(i, num2 + 8))
          flag = true;
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i = num1; i < num1 + 4; ++i)
      {
        for (int j = num2; j < num2 + 8; ++j)
        {
          if ((int) Main.tile[i, j].type == 171)
            WorldGen.KillTile(i, j, false, false, false);
        }
      }
      Item.NewItem(x * 16, y * 16, 32, 32, 1873, 1, false, 0, false, false);
      WorldGen.destroyObject = false;
    }

    public static void Place2xX(int x, int y, ushort type, int style = 0)
    {
      int num1 = style * 36;
      int num2 = 0;
      int num3 = 3;
      if ((int) type == 105 && style == 34)
      {
        type = (ushort) 349;
        style = 0;
        num1 = 0;
      }
      if ((int) type == 105)
      {
        int num4 = style / 55;
        num1 -= 1980 * num4;
        num2 += 54 * num4;
      }
      if ((int) type == 104)
        num3 = 5;
      if ((int) type == 207)
        num3 = 4;
      bool flag = true;
      for (int index = y - num3 + 1; index < y + 1; ++index)
      {
        if (Main.tile[x, index] == null)
          Main.tile[x, index] = new Tile();
        if (Main.tile[x, index].active())
          flag = false;
        if (Main.tile[x + 1, index] == null)
          Main.tile[x + 1, index] = new Tile();
        if (Main.tile[x + 1, index].active())
          flag = false;
      }
      if (!flag || !WorldGen.SolidTile2(x, y + 1) || !WorldGen.SolidTile2(x + 1, y + 1))
        return;
      for (int index = 0; index < num3; ++index)
      {
        Main.tile[x, y - num3 + 1 + index].active(true);
        Main.tile[x, y - num3 + 1 + index].frameY = (short) (num2 + index * 18);
        Main.tile[x, y - num3 + 1 + index].frameX = (short) num1;
        Main.tile[x, y - num3 + 1 + index].type = type;
        Main.tile[x + 1, y - num3 + 1 + index].active(true);
        Main.tile[x + 1, y - num3 + 1 + index].frameY = (short) (num2 + index * 18);
        Main.tile[x + 1, y - num3 + 1 + index].frameX = (short) (num1 + 18);
        Main.tile[x + 1, y - num3 + 1 + index].type = type;
      }
    }

    public static void Check1x2(int x, int j, ushort type)
    {
      if (WorldGen.destroyObject)
        return;
      int j1 = j;
      bool flag = true;
      if (Main.tile[x, j1] == null)
        Main.tile[x, j1] = new Tile();
      if (Main.tile[x, j1 + 1] == null)
        Main.tile[x, j1 + 1] = new Tile();
      int frameY = (int) Main.tile[x, j1].frameY;
      int num1 = 0;
      while (frameY >= 40)
      {
        frameY -= 40;
        ++num1;
      }
      if (frameY == 18)
        --j1;
      if (Main.tile[x, j1] == null)
        Main.tile[x, j1] = new Tile();
      if ((int) Main.tile[x, j1].frameY == 40 * num1 && (int) Main.tile[x, j1 + 1].frameY == 40 * num1 + 18 && ((int) Main.tile[x, j1].type == (int) type && (int) Main.tile[x, j1 + 1].type == (int) type))
        flag = false;
      if (Main.tile[x, j1 + 2] == null)
        Main.tile[x, j1 + 2] = new Tile();
      if (!WorldGen.SolidTileAllowBottomSlope(x, j1 + 2) && !TileID.Sets.Platforms[(int) Main.tile[x, j1 + 2].type])
        flag = true;
      if ((int) Main.tile[x, j1].type == 20)
      {
        int num2 = (int) Main.tile[x, j1].frameX / 54;
        int type1 = (int) Main.tile[x, j1 + 2].type;
        int num3 = -1;
        if (type1 == 2)
          num3 = 0;
        else if (type1 == 147)
          num3 = 1;
        else if (type1 == 60)
          num3 = 2;
        else if (type1 == 23)
          num3 = 3;
        else if (type1 == 199)
          num3 = 4;
        else if (type1 == 109)
          num3 = 5;
        else if (type1 == 53)
          num3 = 6;
        else if (type1 == 116)
          num3 = 7;
        else if (type1 == 234)
          num3 = 8;
        else if (type1 == 112)
          num3 = 9;
        else
          flag = true;
        if (!flag && num2 != num3)
        {
          int num4 = 54 * num3 + WorldGen.genRand.Next(3) * 18;
          Main.tile[x, j1].frameX = (short) num4;
          Main.tile[x, j1 + 1].frameX = (short) num4;
        }
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      if ((int) Main.tile[x, j1].type == (int) type)
        WorldGen.KillTile(x, j1, false, false, false);
      if ((int) Main.tile[x, j1 + 1].type == (int) type)
        WorldGen.KillTile(x, j1 + 1, false, false, false);
      if ((int) type == 216)
        Item.NewItem(x * 16, j1 * 16, 32, 32, 970 + num1, 1, false, 0, false, false);
      if ((int) type == 338)
        Item.NewItem(x * 16, j1 * 16, 32, 32, 2738, 1, false, 0, false, false);
      if ((int) type == 390)
        Item.NewItem(x * 16, j1 * 16, 16, 32, 3253, 1, false, 0, false, false);
      if ((int) type == 15)
      {
        int Type = num1 < 18 || num1 > 23 ? (num1 != 5 ? (num1 != 6 ? (num1 != 7 ? (num1 != 8 ? (num1 != 9 ? (num1 != 10 ? (num1 != 11 ? (num1 != 13 ? (num1 != 14 ? (num1 != 15 ? (num1 != 12 ? (num1 != 4 ? (num1 != 3 ? (num1 != 2 ? (num1 != 17 ? (num1 != 1 ? (num1 != 24 ? (num1 != 25 ? (num1 != 16 ? (num1 != 26 ? (num1 != 27 ? (num1 != 28 ? (num1 != 29 ? (num1 != 30 ? (num1 != 31 ? (num1 != 32 ? (num1 != 33 ? (num1 != 34 ? (num1 != 35 ? (num1 != 36 ? 34 : 3889) : 3175) : 3176) : 3174) : 2812) : 2572) : 2557) : 2524) : 2288) : 2228) : 1925) : 1459) : 1814) : 1792) : 358) : 1509) : 628) : 629) : 630) : 1143) : 1402) : 1399) : 1396) : 915) : 826) : 810) : 809) : 808) : 807) : 806) : 1703 + num1 - 18;
        Item.NewItem(x * 16, j1 * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      else if ((int) type == 134)
      {
        if (num1 == 1)
          Item.NewItem(x * 16, j1 * 16, 32, 32, 1220, 1, false, 0, false, false);
        else
          Item.NewItem(x * 16, j1 * 16, 32, 32, 525, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
    }

    public static void CheckOnTable1x1(int x, int y, int type)
    {
      if (Main.tile[x, y + 1] == null || Main.tile[x, y + 1].active() && Main.tileTable[(int) Main.tile[x, y + 1].type] && (!Main.tile[x, y + 1].topSlope() && !Main.tile[x, y + 1].halfBrick()))
        return;
      if (type == 78)
      {
        if (WorldGen.SolidTile2(x, y + 1))
          return;
        WorldGen.KillTile(x, y, false, false, false);
      }
      else
        WorldGen.KillTile(x, y, false, false, false);
    }

    public static void CheckSign(int x, int y, ushort type)
    {
      if (WorldGen.destroyObject)
        return;
      int num1 = x - 2;
      int num2 = x + 3;
      int num3 = y - 2;
      int num4 = y + 3;
      if (num1 < 0 || num2 > Main.maxTilesX || (num3 < 0 || num4 > Main.maxTilesY))
        return;
      bool flag = false;
      for (int index1 = num1; index1 < num2; ++index1)
      {
        for (int index2 = num3; index2 < num4; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
        }
      }
      int num5 = (int) Main.tile[x, y].frameX / 18;
      int num6 = (int) Main.tile[x, y].frameY / 18;
      int num7 = num5 % 2;
      int x1 = x - num7;
      int y1 = y - num6;
      int num8 = (int) Main.tile[x1, y1].frameX / 18 / 2;
      int num9 = (int) Main.tile[x, y].frameX / 18;
      int num10 = 0;
      while (num9 > 1)
      {
        num9 -= 2;
        ++num10;
      }
      int num11 = x1;
      int num12 = x1 + 2;
      int num13 = y1;
      int num14 = y1 + 2;
      int num15 = 0;
      for (int index1 = num11; index1 < num12; ++index1)
      {
        int num16 = 0;
        for (int index2 = num13; index2 < num14; ++index2)
        {
          if (!Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].type != (int) type)
          {
            flag = true;
            break;
          }
          if ((int) Main.tile[index1, index2].frameX / 18 != num15 + num8 * 2 || (int) Main.tile[index1, index2].frameY / 18 != num16)
          {
            flag = true;
            break;
          }
          ++num16;
        }
        ++num15;
      }
      if (!flag)
      {
        if ((int) type == 85)
        {
          if (Main.tile[x1, y1 + 2].active() && (Main.tileSolid[(int) Main.tile[x1, y1 + 2].type] || Main.tileSolidTop[(int) Main.tile[x1, y1 + 2].type]) && (Main.tile[x1 + 1, y1 + 2].active() && (Main.tileSolid[(int) Main.tile[x1 + 1, y1 + 2].type] || Main.tileSolidTop[(int) Main.tile[x1 + 1, y1 + 2].type])))
            num8 = num10;
          else
            flag = true;
        }
        else if (Main.tile[x1, y1 + 2].active() && (Main.tileSolid[(int) Main.tile[x1, y1 + 2].type] || Main.tileSolidTop[(int) Main.tile[x1, y1 + 2].type] && !Main.tileNoAttach[(int) Main.tile[x1, y1 + 2].type]) && (Main.tile[x1 + 1, y1 + 2].active() && (Main.tileSolid[(int) Main.tile[x1 + 1, y1 + 2].type] || Main.tileSolidTop[(int) Main.tile[x1 + 1, y1 + 2].type] && !Main.tileNoAttach[(int) Main.tile[x1 + 1, y1 + 2].type])))
          num8 = 0;
        else if (Main.tile[x1, y1 - 1].nactive() && Main.tileSolid[(int) Main.tile[x1, y1 - 1].type] && (!Main.tileSolidTop[(int) Main.tile[x1, y1 - 1].type] && !Main.tileNoAttach[(int) Main.tile[x1, y1 - 1].type]) && (Main.tile[x1 + 1, y1 - 1].nactive() && Main.tileSolid[(int) Main.tile[x1 + 1, y1 - 1].type] && (!Main.tileSolidTop[(int) Main.tile[x1 + 1, y1 - 1].type] && !Main.tileNoAttach[(int) Main.tile[x1 + 1, y1 - 1].type])))
          num8 = 1;
        else if (Main.tile[x1 - 1, y1].nactive() && Main.tileSolid[(int) Main.tile[x1 - 1, y1].type] && (!Main.tileSolidTop[(int) Main.tile[x1 - 1, y1].type] && !Main.tileNoAttach[(int) Main.tile[x1 - 1, y1].type]) && (Main.tile[x1 - 1, y1 + 1].nactive() && Main.tileSolid[(int) Main.tile[x1 - 1, y1 + 1].type] && (!Main.tileSolidTop[(int) Main.tile[x1 - 1, y1 + 1].type] && !Main.tileNoAttach[(int) Main.tile[x1 - 1, y1 + 1].type])))
          num8 = 2;
        else if (Main.tile[x1 + 2, y1].nactive() && Main.tileSolid[(int) Main.tile[x1 + 2, y1].type] && (!Main.tileSolidTop[(int) Main.tile[x1 + 2, y1].type] && !Main.tileNoAttach[(int) Main.tile[x1 + 2, y1].type]) && (Main.tile[x1 + 2, y1 + 1].nactive() && Main.tileSolid[(int) Main.tile[x1 + 2, y1 + 1].type] && (!Main.tileSolidTop[(int) Main.tile[x1 + 2, y1 + 1].type] && !Main.tileNoAttach[(int) Main.tile[x1 + 2, y1 + 1].type])))
          num8 = 3;
        else if ((int) Main.tile[x1, y1].wall > 0 && (int) Main.tile[x1 + 1, y1].wall > 0 && ((int) Main.tile[x1, y1 + 1].wall > 0 && (int) Main.tile[x1 + 1, y1 + 1].wall > 0))
          num8 = 4;
        else
          flag = true;
      }
      if (flag)
      {
        if ((int) type == 395)
        {
          int index = TEItemFrame.Find(x1, y1);
          if (index != -1 && ((TEItemFrame) TileEntity.ByID[index]).item.stack > 0)
          {
            ((TEItemFrame) TileEntity.ByID[index]).DropItem();
            if (Main.netMode == 2)
              return;
            Main.blockMouse = true;
            return;
          }
        }
        WorldGen.destroyObject = true;
        for (int i = num11; i < num12; ++i)
        {
          for (int j = num13; j < num14; ++j)
          {
            if ((int) Main.tile[i, j].type == (int) type)
              WorldGen.KillTile(i, j, false, false, false);
          }
        }
        if ((int) type != 395)
          Sign.KillSign(x1, y1);
        if ((int) type == 85)
        {
          int Type = 321;
          if (num10 >= 6 && num10 <= 10)
            Type = 3229 + num10 - 6;
          else if (num10 >= 1 && num10 <= 5)
            Type = 1173 + num10 - 1;
          Item.NewItem(x * 16, y * 16, 32, 32, Type, 1, false, 0, false, false);
        }
        else if ((int) type == 395)
        {
          Item.NewItem(x1 * 16, y1 * 16, 32, 32, 3270, 1, false, 0, false, false);
          TEItemFrame.Kill(x1, y1);
        }
        else if ((int) type == 425)
          Item.NewItem(x1 * 16, y1 * 16, 32, 32, 3617, 1, false, 0, false, false);
        else
          Item.NewItem(x * 16, y * 16, 32, 32, 171, 1, false, 0, false, false);
        WorldGen.destroyObject = false;
      }
      else
      {
        int num16 = 36 * num8;
        for (int index1 = 0; index1 < 2; ++index1)
        {
          for (int index2 = 0; index2 < 2; ++index2)
          {
            Main.tile[x1 + index1, y1 + index2].active(true);
            Main.tile[x1 + index1, y1 + index2].type = type;
            Main.tile[x1 + index1, y1 + index2].frameX = (short) (num16 + 18 * index1);
            Main.tile[x1 + index1, y1 + index2].frameY = (short) (18 * index2);
          }
        }
      }
    }

    public static bool PlaceSign(int x, int y, ushort type, int Style = 0)
    {
      int num1 = x - 2;
      int num2 = x + 3;
      int num3 = y - 2;
      int num4 = y + 3;
      if (num1 < 0 || num2 > Main.maxTilesX || (num3 < 0 || num4 > Main.maxTilesY))
        return false;
      for (int index1 = num1; index1 < num2; ++index1)
      {
        for (int index2 = num3; index2 < num4; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
        }
      }
      int index3 = x;
      int index4 = y;
      int num5 = 0;
      if ((int) type == 55 || (int) type == 425)
      {
        if (WorldGen.SolidTile2(x, y + 1) && WorldGen.SolidTile2(x + 1, y + 1))
        {
          --index4;
          num5 = 0;
        }
        else if (Main.tile[x, y - 1].nactive() && Main.tileSolid[(int) Main.tile[x, y - 1].type] && (!Main.tileSolidTop[(int) Main.tile[x, y - 1].type] && Main.tile[x + 1, y - 1].nactive()) && (Main.tileSolid[(int) Main.tile[x + 1, y - 1].type] && !Main.tileSolidTop[(int) Main.tile[x + 1, y - 1].type]))
          num5 = 1;
        else if (Main.tile[x - 1, y].nactive() && Main.tileSolid[(int) Main.tile[x - 1, y].type] && (!Main.tileSolidTop[(int) Main.tile[x - 1, y].type] && !Main.tileNoAttach[(int) Main.tile[x - 1, y].type]) && (Main.tile[x - 1, y + 1].nactive() && Main.tileSolid[(int) Main.tile[x - 1, y + 1].type] && (!Main.tileSolidTop[(int) Main.tile[x - 1, y + 1].type] && !Main.tileNoAttach[(int) Main.tile[x - 1, y + 1].type])))
          num5 = 2;
        else if (Main.tile[x + 1, y].nactive() && Main.tileSolid[(int) Main.tile[x + 1, y].type] && (!Main.tileSolidTop[(int) Main.tile[x + 1, y].type] && !Main.tileNoAttach[(int) Main.tile[x + 1, y].type]) && (Main.tile[x + 1, y + 1].nactive() && Main.tileSolid[(int) Main.tile[x + 1, y + 1].type] && (!Main.tileSolidTop[(int) Main.tile[x + 1, y + 1].type] && !Main.tileNoAttach[(int) Main.tile[x + 1, y + 1].type])))
        {
          --index3;
          num5 = 3;
        }
        else
        {
          if ((int) Main.tile[index3, index4].wall <= 0 || (int) Main.tile[index3 + 1, index4].wall <= 0 || ((int) Main.tile[index3, index4 + 1].wall <= 0 || (int) Main.tile[index3 + 1, index4 + 1].wall <= 0))
            return false;
          num5 = 4;
        }
      }
      if (Main.tile[index3, index4].active() || Main.tile[index3 + 1, index4].active() || (Main.tile[index3, index4 + 1].active() || Main.tile[index3 + 1, index4 + 1].active()))
        return false;
      int num6 = 36 * num5;
      for (int index1 = 0; index1 < 2; ++index1)
      {
        for (int index2 = 0; index2 < 2; ++index2)
        {
          Main.tile[index3 + index1, index4 + index2].active(true);
          Main.tile[index3 + index1, index4 + index2].type = type;
          Main.tile[index3 + index1, index4 + index2].frameX = (short) (num6 + 18 * index1);
          Main.tile[index3 + index1, index4 + index2].frameY = (short) (18 * index2);
        }
      }
      return true;
    }

    public static bool Place2x2Horizontal(int x, int y, ushort type, int Style = 0)
    {
      int num1 = x - 2;
      int num2 = x + 3;
      int num3 = y - 2;
      int num4 = y + 3;
      if (num1 < 0 || num2 > Main.maxTilesX || (num3 < 0 || num4 > Main.maxTilesY))
        return false;
      for (int index1 = num1; index1 < num2; ++index1)
      {
        for (int index2 = num3; index2 < num4; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
        }
      }
      int index3 = x;
      int num5 = y;
      if (!WorldGen.SolidTile2(x, y + 1) || !WorldGen.SolidTile2(x + 1, y + 1))
        return false;
      int index4 = num5 - 1;
      int num6 = Style;
      if (Main.tile[index3, index4].active() || Main.tile[index3 + 1, index4].active() || (Main.tile[index3, index4 + 1].active() || Main.tile[index3 + 1, index4 + 1].active()))
        return false;
      int num7 = 36 * num6;
      for (int index1 = 0; index1 < 2; ++index1)
      {
        for (int index2 = 0; index2 < 2; ++index2)
        {
          Main.tile[index3 + index1, index4 + index2].active(true);
          Main.tile[index3 + index1, index4 + index2].type = type;
          Main.tile[index3 + index1, index4 + index2].frameX = (short) (num7 + 18 * index1);
          Main.tile[index3 + index1, index4 + index2].frameY = (short) (18 * index2);
        }
      }
      return true;
    }

    public static Color paintColor(int color)
    {
      Color white = Color.get_White();
      int num = color;
      if (num == 1 || num == 13)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 0);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 0);
      }
      if (num == 2 || num == 14)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 127);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 0);
      }
      if (num == 3 || num == 15)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 0);
      }
      if (num == 4 || num == 16)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R((byte) 127);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 0);
      }
      if (num == 5 || num == 17)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R((byte) 0);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 0);
      }
      if (num == 6 || num == 18)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R((byte) 0);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 127);
      }
      if (num == 7 || num == 19)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R((byte) 0);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B(byte.MaxValue);
      }
      if (num == 8 || num == 20)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R((byte) 0);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 127);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B(byte.MaxValue);
      }
      if (num == 9 || num == 21)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R((byte) 0);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 0);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B(byte.MaxValue);
      }
      if (num == 10 || num == 22)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R((byte) 127);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 0);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B(byte.MaxValue);
      }
      if (num == 11 || num == 23)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 0);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B(byte.MaxValue);
      }
      if (num == 12 || num == 24)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 0);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 127);
      }
      if (num == 25)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R((byte) 75);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 75);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 75);
      }
      if (num == 26)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B(byte.MaxValue);
      }
      if (num == 27)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R((byte) 175);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 175);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 175);
      }
      if (num == 28)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R(byte.MaxValue);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 178);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 125);
      }
      if (num == 29)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R((byte) 25);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 25);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 25);
      }
      if (num == 30)
      {
        // ISSUE: explicit reference operation
        ((Color) @white).set_R((byte) 200);
        // ISSUE: explicit reference operation
        ((Color) @white).set_G((byte) 200);
        // ISSUE: explicit reference operation
        ((Color) @white).set_B((byte) 200);
        // ISSUE: explicit reference operation
        ((Color) @white).set_A((byte) 150);
      }
      return white;
    }

    public static void paintEffect(int x, int y, byte color, byte oldColor)
    {
      int color1 = (int) color;
      if ((int) color == 0)
        color1 = (int) oldColor;
      Color newColor = WorldGen.paintColor(color1);
      for (int index1 = 0; index1 < 10; ++index1)
      {
        int index2 = Dust.NewDust(new Vector2((float) (x * 16), (float) (y * 16)), 16, 16, 143, 0.0f, 0.0f, 50, newColor, 1f);
        if (WorldGen.genRand.Next(2) == 0)
        {
          Main.dust[index2].noGravity = true;
          Main.dust[index2].scale *= 1.2f;
        }
        else
          Main.dust[index2].scale *= 0.5f;
      }
    }

    public static bool paintTile(int x, int y, byte color, bool broadCast = false)
    {
      if (Main.tile[x, y] == null || !Main.tile[x, y].active())
        return false;
      byte oldColor = Main.tile[x, y].color();
      Main.tile[x, y].color(color);
      if (broadCast)
        NetMessage.SendData(63, -1, -1, (NetworkText) null, x, (float) y, (float) color, 0.0f, 0, 0, 0);
      WorldGen.paintEffect(x, y, color, oldColor);
      return true;
    }

    public static bool paintWall(int x, int y, byte color, bool broadCast = false)
    {
      if (Main.tile[x, y] == null || (int) Main.tile[x, y].wall == 0)
        return false;
      byte oldColor = Main.tile[x, y].wallColor();
      Main.tile[x, y].wallColor(color);
      if (broadCast)
        NetMessage.SendData(64, -1, -1, (NetworkText) null, x, (float) y, (float) color, 0.0f, 0, 0, 0);
      WorldGen.paintEffect(x, y, color, oldColor);
      return true;
    }

    public static void Place3x3Wall(int x, int y, ushort type, int style)
    {
      int num1 = x - 1;
      int num2 = y - 1;
      bool flag = true;
      for (int index1 = num1; index1 < num1 + 3; ++index1)
      {
        for (int index2 = num2; index2 < num2 + 3; ++index2)
        {
          if (Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].wall == 0)
          {
            flag = false;
            break;
          }
        }
      }
      if (!flag)
        return;
      int num3 = 0;
      while (style > 35)
      {
        ++num3;
        style -= 36;
      }
      int num4 = style * 54;
      int num5 = num3 * 54;
      for (int index1 = num1; index1 < num1 + 3; ++index1)
      {
        for (int index2 = num2; index2 < num2 + 3; ++index2)
        {
          Main.tile[index1, index2].active(true);
          Main.tile[index1, index2].type = type;
          Main.tile[index1, index2].frameX = (short) (num4 + 18 * (index1 - num1));
          Main.tile[index1, index2].frameY = (short) (num5 + 18 * (index2 - num2));
        }
      }
    }

    public static void Check3x3Wall(int x, int y)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int type = (int) Main.tile[x, y].type;
      int num1 = 0;
      int num2 = 0;
      int num3 = (int) Main.tile[x, y].frameX / 18;
      while (num3 >= 3)
      {
        num3 -= 3;
        ++num1;
      }
      int num4 = x - num3;
      int num5 = (int) Main.tile[x, y].frameY / 18;
      while (num5 >= 3)
      {
        num5 -= 3;
        ++num2;
      }
      int num6 = y - num5;
      int num7 = num2 * 54;
      int num8 = num1 * 54;
      for (int index1 = num4; index1 < num4 + 3; ++index1)
      {
        for (int index2 = num6; index2 < num6 + 3; ++index2)
        {
          if ((int) Main.tile[index1, index2].type != type || !Main.tile[index1, index2].active() || ((int) Main.tile[index1, index2].wall <= 0 || (int) Main.tile[index1, index2].frameX != num8 + (index1 - num4) * 18) || (int) Main.tile[index1, index2].frameY != num7 + (index2 - num6) * 18)
          {
            flag = true;
            break;
          }
        }
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i = num4; i < num4 + 3; ++i)
      {
        for (int j = num6; j < num6 + 3; ++j)
        {
          if ((int) Main.tile[i, j].type == type && Main.tile[i, j].active())
            WorldGen.KillTile(i, j, false, false, false);
        }
      }
      if (type == 240)
      {
        int num9 = num1 + num2 * 36;
        switch (num9)
        {
          case 37:
            Item.NewItem(x * 16, y * 16, 32, 32, 1856, 1, false, 0, false, false);
            break;
          case 36:
            Item.NewItem(x * 16, y * 16, 32, 32, 1855, 1, false, 0, false, false);
            break;
          case 38:
            Item.NewItem(x * 16, y * 16, 32, 32, 1960, 1, false, 0, false, false);
            break;
          case 39:
            Item.NewItem(x * 16, y * 16, 32, 32, 1961, 1, false, 0, false, false);
            break;
          case 40:
            Item.NewItem(x * 16, y * 16, 32, 32, 1962, 1, false, 0, false, false);
            break;
          case 33:
            Item.NewItem(x * 16, y * 16, 32, 32, 1574, 1, false, 0, false, false);
            break;
          case 34:
            Item.NewItem(x * 16, y * 16, 32, 32, 1575, 1, false, 0, false, false);
            break;
          case 35:
            Item.NewItem(x * 16, y * 16, 32, 32, 1576, 1, false, 0, false, false);
            break;
          case 18:
            Item.NewItem(x * 16, y * 16, 32, 32, 1419, 1, false, 0, false, false);
            break;
          case 19:
            Item.NewItem(x * 16, y * 16, 32, 32, 1420, 1, false, 0, false, false);
            break;
          case 20:
            Item.NewItem(x * 16, y * 16, 32, 32, 1427, 1, false, 0, false, false);
            break;
          case 21:
            Item.NewItem(x * 16, y * 16, 32, 32, 1428, 1, false, 0, false, false);
            break;
          case 54:
            Item.NewItem(x * 16, y * 16, 32, 32, 2489, 1, false, 0, false, false);
            break;
          case 55:
            Item.NewItem(x * 16, y * 16, 32, 32, 2589, 1, false, 0, false, false);
            break;
          case 56:
            Item.NewItem(x * 16, y * 16, 32, 32, 3357, 1, false, 0, false, false);
            break;
          case 57:
            Item.NewItem(x * 16, y * 16, 32, 32, 3358, 1, false, 0, false, false);
            break;
          case 58:
            Item.NewItem(x * 16, y * 16, 32, 32, 3359, 1, false, 0, false, false);
            break;
          case 59:
            Item.NewItem(x * 16, y * 16, 32, 32, 3595, 1, false, 0, false, false);
            break;
          case 60:
            Item.NewItem(x * 16, y * 16, 32, 32, 3867, 1, false, 0, false, false);
            break;
          case 61:
            Item.NewItem(x * 16, y * 16, 32, 32, 3866, 1, false, 0, false, false);
            break;
          case 62:
            Item.NewItem(x * 16, y * 16, 32, 32, 3868, 1, false, 0, false, false);
            break;
          default:
            if (num9 >= 41 && num9 <= 45)
            {
              Item.NewItem(x * 16, y * 16, 32, 32, 2114 + num9 - 41, 1, false, 0, false, false);
              break;
            }
            if (num9 >= 46 && num9 <= 53)
            {
              Item.NewItem(x * 16, y * 16, 32, 32, 2442 + num9 - 46, 1, false, 0, false, false);
              break;
            }
            if (num9 >= 22 && num9 <= 25)
            {
              Item.NewItem(x * 16, y * 16, 32, 32, 1440 + num9 - 22, 1, false, 0, false, false);
              break;
            }
            if (num9 >= 26 && num9 <= 29)
            {
              Item.NewItem(x * 16, y * 16, 32, 32, 1496 + num9 - 26, 1, false, 0, false, false);
              break;
            }
            if (num9 >= 30 && num9 <= 32)
            {
              Item.NewItem(x * 16, y * 16, 32, 32, 1538 + num9 - 30, 1, false, 0, false, false);
              break;
            }
            Item.NewItem(x * 16, y * 16, 32, 32, 1360 + num9, 1, false, 0, false, false);
            break;
        }
      }
      else if (type == 440)
      {
        int Type1 = -1;
        int Type2 = -1;
        switch (num1)
        {
          case 0:
            Type1 = 3644;
            Type2 = 1526;
            break;
          case 1:
            Type1 = 3645;
            Type2 = 1524;
            break;
          case 2:
            Type1 = 3646;
            Type2 = 1525;
            break;
          case 3:
            Type1 = 3647;
            Type2 = 1523;
            break;
          case 4:
            Type1 = 3648;
            Type2 = 1522;
            break;
          case 5:
            Type1 = 3649;
            Type2 = 1527;
            break;
          case 6:
            Type1 = 3650;
            Type2 = 3643;
            break;
        }
        if (Type1 != -1)
          Item.NewItem(x * 16, y * 16, 32, 32, Type1, 1, false, 0, false, false);
        if (Type2 != -1 && num2 == 1)
          Item.NewItem(x * 16, y * 16, 32, 32, Type2, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
    }

    public static void Place2x3Wall(int x, int y, ushort type, int style)
    {
      int num1 = x;
      int num2 = y - 1;
      bool flag = true;
      for (int index1 = num1; index1 < num1 + 2; ++index1)
      {
        for (int index2 = num2; index2 < num2 + 3; ++index2)
        {
          if (Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].wall == 0)
          {
            flag = false;
            break;
          }
        }
      }
      if (!flag)
        return;
      int num3 = style * 36;
      int num4 = 0;
      for (int index1 = num1; index1 < num1 + 2; ++index1)
      {
        for (int index2 = num2; index2 < num2 + 3; ++index2)
        {
          Main.tile[index1, index2].active(true);
          Main.tile[index1, index2].type = type;
          Main.tile[index1, index2].frameX = (short) (num3 + 18 * (index1 - num1));
          Main.tile[index1, index2].frameY = (short) (num4 + 18 * (index2 - num2));
        }
      }
    }

    public static void Check2x3Wall(int x, int y)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int type = (int) Main.tile[x, y].type;
      int num1 = 0;
      int num2 = (int) Main.tile[x, y].frameX / 18;
      while (num2 >= 2)
      {
        num2 -= 2;
        ++num1;
      }
      int num3 = x - num2;
      int num4 = y - (int) Main.tile[x, y].frameY / 18;
      int num5 = num1 * 36;
      for (int index1 = num3; index1 < num3 + 2; ++index1)
      {
        for (int index2 = num4; index2 < num4 + 3; ++index2)
        {
          if ((int) Main.tile[index1, index2].type != type || !Main.tile[index1, index2].active() || ((int) Main.tile[index1, index2].wall <= 0 || (int) Main.tile[index1, index2].frameX != num5 + (index1 - num3) * 18) || (int) Main.tile[index1, index2].frameY != (index2 - num4) * 18)
          {
            flag = true;
            break;
          }
        }
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i = num3; i < num3 + 2; ++i)
      {
        for (int j = num4; j < num4 + 3; ++j)
        {
          if ((int) Main.tile[i, j].type == type && Main.tile[i, j].active())
            WorldGen.KillTile(i, j, false, false, false);
        }
      }
      if (type == 245)
      {
        if (num1 == 6)
          Item.NewItem(x * 16, y * 16, 32, 32, 1577, 1, false, 0, false, false);
        else if (num1 == 5)
          Item.NewItem(x * 16, y * 16, 32, 32, 1495, 1, false, 0, false, false);
        else
          Item.NewItem(x * 16, y * 16, 32, 32, 1474 + num1, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
    }

    public static void Place3x2Wall(int x, int y, ushort type, int style)
    {
      int num1 = x - 1;
      int num2 = y;
      bool flag = true;
      for (int index1 = num1; index1 < num1 + 3; ++index1)
      {
        for (int index2 = num2; index2 < num2 + 2; ++index2)
        {
          if (Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].wall == 0)
          {
            flag = false;
            break;
          }
        }
      }
      if (!flag)
        return;
      int num3 = 0;
      int num4 = style * 36;
      for (int index1 = num1; index1 < num1 + 3; ++index1)
      {
        for (int index2 = num2; index2 < num2 + 2; ++index2)
        {
          Main.tile[index1, index2].active(true);
          Main.tile[index1, index2].type = type;
          Main.tile[index1, index2].frameX = (short) (num3 + 18 * (index1 - num1));
          Main.tile[index1, index2].frameY = (short) (num4 + 18 * (index2 - num2));
        }
      }
    }

    public static void Check3x2Wall(int x, int y)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int type = (int) Main.tile[x, y].type;
      int num1 = 0;
      int num2 = (int) Main.tile[x, y].frameY / 18;
      while (num2 >= 2)
      {
        num2 -= 2;
        ++num1;
      }
      int num3 = y - num2;
      int num4 = x - (int) Main.tile[x, y].frameX / 18;
      int num5 = num1 * 36;
      for (int index1 = num4; index1 < num4 + 3; ++index1)
      {
        for (int index2 = num3; index2 < num3 + 2; ++index2)
        {
          if ((int) Main.tile[index1, index2].type != type || !Main.tile[index1, index2].active() || ((int) Main.tile[index1, index2].wall <= 0 || (int) Main.tile[index1, index2].frameY != num5 + (index2 - num3) * 18) || (int) Main.tile[index1, index2].frameX != (index1 - num4) * 18)
          {
            flag = true;
            break;
          }
        }
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i = num4; i < num4 + 3; ++i)
      {
        for (int j = num3; j < num3 + 2; ++j)
        {
          if ((int) Main.tile[i, j].type == type && Main.tile[i, j].active())
            WorldGen.KillTile(i, j, false, false, false);
        }
      }
      if (type == 246)
      {
        if (num1 == 16)
          Item.NewItem(x * 16, y * 16, 32, 32, 1541, 1, false, 0, false, false);
        else if (num1 == 17)
          Item.NewItem(x * 16, y * 16, 32, 32, 1542, 1, false, 0, false, false);
        else if (num1 == 18)
          Item.NewItem(x * 16, y * 16, 32, 32, 1908, 1, false, 0, false, false);
        else
          Item.NewItem(x * 16, y * 16, 32, 32, 1479 + num1, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
    }

    public static void Place4x3Wall(int x, int y, ushort type, int style)
    {
      int num1 = x - 1;
      int num2 = y - 1;
      bool flag = true;
      for (int index1 = num1; index1 < num1 + 4; ++index1)
      {
        for (int index2 = num2; index2 < num2 + 3; ++index2)
        {
          if (Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].wall == 0)
          {
            flag = false;
            break;
          }
        }
      }
      if (!flag)
        return;
      int num3 = 0;
      int num4 = style * 54;
      for (int index1 = num1; index1 < num1 + 4; ++index1)
      {
        for (int index2 = num2; index2 < num2 + 3; ++index2)
        {
          Main.tile[index1, index2].active(true);
          Main.tile[index1, index2].type = type;
          Main.tile[index1, index2].frameX = (short) (num3 + 18 * (index1 - num1));
          Main.tile[index1, index2].frameY = (short) (num4 + 18 * (index2 - num2));
        }
      }
    }

    public static void Check4x3Wall(int x, int y)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int type = (int) Main.tile[x, y].type;
      int num1 = 0;
      int num2 = (int) Main.tile[x, y].frameY / 18;
      while (num2 >= 3)
      {
        num2 -= 3;
        ++num1;
      }
      int num3 = y - num2;
      int num4 = x - (int) Main.tile[x, y].frameX / 18;
      int num5 = num1 * 54;
      for (int index1 = num4; index1 < num4 + 4; ++index1)
      {
        for (int index2 = num3; index2 < num3 + 3; ++index2)
        {
          if ((int) Main.tile[index1, index2].type != type || !Main.tile[index1, index2].active() || ((int) Main.tile[index1, index2].wall <= 0 || (int) Main.tile[index1, index2].frameY != num5 + (index2 - num3) * 18) || (int) Main.tile[index1, index2].frameX != (index1 - num4) * 18)
          {
            flag = true;
            break;
          }
        }
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i = num4; i < num4 + 4; ++i)
      {
        for (int j = num3; j < num3 + 3; ++j)
        {
          if ((int) Main.tile[i, j].type == type && Main.tile[i, j].active())
            WorldGen.KillTile(i, j, false, false, false);
        }
      }
      if (type == 241)
        Item.NewItem(x * 16, y * 16, 32, 32, 1417, 1, false, 0, false, false);
      WorldGen.destroyObject = false;
    }

    public static void Place6x4Wall(int x, int y, ushort type, int style)
    {
      int num1 = x - 2;
      int num2 = y - 2;
      bool flag = true;
      for (int index1 = num1; index1 < num1 + 6; ++index1)
      {
        for (int index2 = num2; index2 < num2 + 4; ++index2)
        {
          if (Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].wall == 0)
          {
            flag = false;
            break;
          }
        }
      }
      if (!flag)
        return;
      int num3 = 27;
      int num4 = style / num3 * 108;
      int num5 = style % num3 * 72;
      for (int index1 = num1; index1 < num1 + 6; ++index1)
      {
        for (int index2 = num2; index2 < num2 + 4; ++index2)
        {
          Main.tile[index1, index2].active(true);
          Main.tile[index1, index2].type = type;
          Main.tile[index1, index2].frameX = (short) (num4 + 18 * (index1 - num1));
          Main.tile[index1, index2].frameY = (short) (num5 + 18 * (index2 - num2));
        }
      }
    }

    public static void Check6x4Wall(int x, int y)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int type = (int) Main.tile[x, y].type;
      int num1 = (int) Main.tile[x, y].frameY / 18;
      int num2 = (int) Main.tile[x, y].frameX / 18;
      int num3 = 27 * (num2 / 6) + (num1 >> 2);
      int num4 = num1 % 4;
      int num5 = num2 % 6;
      int num6 = y - num4;
      int num7 = x - (int) Main.tile[x, y].frameX / 18 % 6;
      int num8 = num3 % 27 * 72;
      int num9 = num3 / 27 * 108;
      for (int index1 = num7; index1 < num7 + 6; ++index1)
      {
        for (int index2 = num6; index2 < num6 + 4; ++index2)
        {
          if ((int) Main.tile[index1, index2].type != type || !Main.tile[index1, index2].active() || ((int) Main.tile[index1, index2].wall <= 0 || (int) Main.tile[index1, index2].frameY != num8 + (index2 - num6) * 18) || (int) Main.tile[index1, index2].frameX != num9 + (index1 - num7) * 18)
          {
            flag = true;
            break;
          }
        }
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i = num7; i < num7 + 6; ++i)
      {
        for (int j = num6; j < num6 + 4; ++j)
        {
          if ((int) Main.tile[i, j].type == type && Main.tile[i, j].active())
            WorldGen.KillTile(i, j, false, false, false);
        }
      }
      if (type == 242)
      {
        if (num3 == 30)
          Item.NewItem(x * 16, y * 16, 32, 32, 2995, 1, false, 0, false, false);
        else if (num3 >= 31 && num3 <= 35)
          Item.NewItem(x * 16, y * 16, 32, 32, 3055 + num3 - 31, 1, false, 0, false, false);
        else if (num3 >= 27 && num3 <= 29)
          Item.NewItem(x * 16, y * 16, 32, 32, 2865 + num3 - 27, 1, false, 0, false, false);
        else if (num3 == 36)
          Item.NewItem(x * 16, y * 16, 32, 32, 3596, 1, false, 0, false, false);
        else if (num3 == 26)
          Item.NewItem(x * 16, y * 16, 32, 32, 2497, 1, false, 0, false, false);
        else if (num3 == 25)
          Item.NewItem(x * 16, y * 16, 32, 32, 2495, 1, false, 0, false, false);
        else if (num3 >= 22)
          Item.NewItem(x * 16, y * 16, 32, 32, 2281 + num3 - 22, 1, false, 0, false, false);
        else if (num3 >= 17)
          Item.NewItem(x * 16, y * 16, 32, 32, 1846 + num3 - 17, 1, false, 0, false, false);
        else if (num3 == 16)
          Item.NewItem(x * 16, y * 16, 32, 32, 1573, 1, false, 0, false, false);
        else if (num3 >= 13)
          Item.NewItem(x * 16, y * 16, 32, 32, 1500 + num3 - 13, 1, false, 0, false, false);
        else if (num3 >= 6)
          Item.NewItem(x * 16, y * 16, 32, 32, 1433 + num3 - 6, 1, false, 0, false, false);
        else
          Item.NewItem(x * 16, y * 16, 32, 32, 1421 + num3, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
    }

    public static void Place1x1(int x, int y, int type, int style = 0)
    {
      Tile tile = Main.tile[x, y];
      if (Main.tile[x, y] == null)
      {
        tile = new Tile();
        Main.tile[x, y] = tile;
      }
      if (Main.tile[x, y + 1] == null)
        Main.tile[x, y + 1] = new Tile();
      if (type == 324)
      {
        if (!WorldGen.SolidTile2(x, y + 1) && (!Main.tile[x, y + 1].nactive() || !Main.tileTable[(int) Main.tile[x, y + 1].type]))
          return;
        tile.active(true);
        tile.type = (ushort) type;
        tile.frameX = (short) (22 * WorldGen.genRand.Next(2));
        tile.frameY = (short) (22 * style);
      }
      else
      {
        if (!WorldGen.SolidTile2(x, y + 1) || tile.active())
          return;
        tile.active(true);
        tile.type = (ushort) type;
        if (type == 324)
        {
          tile.frameX = (short) (22 * WorldGen.genRand.Next(2));
          tile.frameY = (short) (22 * style);
        }
        else if (type == 144 || type == 239 || type == 36)
        {
          tile.frameX = (short) (style * 18);
          tile.frameY = (short) 0;
        }
        else
          tile.frameY = (short) (style * 18);
      }
    }

    public static void Check1x1(int x, int y, int type)
    {
      if (Main.tile[x, y + 1] == null || WorldGen.SolidTileAllowBottomSlope(x, y + 1))
        return;
      WorldGen.KillTile(x, y, false, false, false);
    }

    public static void CheckLogicTiles(int x, int y, int type)
    {
      if (type == 419)
      {
        Tile tile = Main.tile[x, y + 1];
        if (tile != null && (!tile.active() || (int) tile.type != 420 && (int) tile.type != 419))
        {
          WorldGen.KillTile(x, y, false, false, false);
          return;
        }
      }
      Tile tile1 = Main.tile[x, y];
      bool flag = false;
      if ((int) tile1.frameX % 18 != 0)
        flag = true;
      if ((int) tile1.frameY % 18 != 0)
        flag = true;
      if (!flag)
        return;
      WorldGen.KillTile(x, y, false, false, false);
    }

    public static void PlaceLogicTiles(int x, int y, int type, int style = 0)
    {
      Tile tile = Main.tile[x, y];
      if (Main.tile[x, y] == null)
      {
        tile = new Tile();
        Main.tile[x, y] = tile;
      }
      if (Main.tile[x, y + 1] == null)
        Main.tile[x, y + 1] = new Tile();
      if (type == 419)
      {
        if (!Main.tile[x, y + 1].active() || (int) Main.tile[x, y + 1].type != 419 && (int) Main.tile[x, y + 1].type != 420)
          return;
        tile.active(true);
        tile.type = (ushort) type;
        tile.frameX = (short) (style * 18);
        tile.frameY = (short) 0;
      }
      else
      {
        if (tile.active())
          return;
        tile.active(true);
        tile.type = (ushort) type;
        tile.frameX = (short) 0;
        tile.frameY = (short) (18 * style);
      }
    }

    public static void PlaceOnTable1x1(int x, int y, int type, int style = 0)
    {
      bool flag = false;
      if (Main.tile[x, y] == null)
        Main.tile[x, y] = new Tile();
      if (Main.tile[x, y + 1] == null)
        Main.tile[x, y + 1] = new Tile();
      if (!Main.tile[x, y].active() && Main.tile[x, y + 1].nactive() && Main.tileTable[(int) Main.tile[x, y + 1].type])
        flag = true;
      if (type == 78 && !Main.tile[x, y].active() && (Main.tile[x, y + 1].nactive() && Main.tileSolid[(int) Main.tile[x, y + 1].type]) && (!Main.tile[x, y + 1].halfBrick() && (int) Main.tile[x, y + 1].slope() == 0))
        flag = true;
      if (!flag)
        return;
      Main.tile[x, y].active(true);
      Main.tile[x, y].type = (ushort) type;
      if (type == 33)
      {
        Main.tile[x, y].frameX = (short) 0;
        Main.tile[x, y].frameY = (short) (style * 22);
      }
      else
      {
        Main.tile[x, y].frameX = (short) (style * 18);
        Main.tile[x, y].frameY = (short) 0;
      }
      if (type != 50)
        return;
      Main.tile[x, y].frameX = (short) (18 * WorldGen.genRand.Next(5));
    }

    public static bool PlaceAlch(int x, int y, int style)
    {
      if (Main.tile[x, y] == null)
        Main.tile[x, y] = new Tile();
      if (Main.tile[x, y + 1] == null)
        Main.tile[x, y + 1] = new Tile();
      if (!Main.tile[x, y].active() && Main.tile[x, y + 1].nactive() && (!Main.tile[x, y + 1].halfBrick() && (int) Main.tile[x, y + 1].slope() == 0))
      {
        bool flag = false;
        if (style == 0)
        {
          if ((int) Main.tile[x, y + 1].type != 2 && (int) Main.tile[x, y + 1].type != 78 && ((int) Main.tile[x, y + 1].type != 380 && (int) Main.tile[x, y + 1].type != 109))
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0)
            flag = true;
        }
        else if (style == 1)
        {
          if ((int) Main.tile[x, y + 1].type != 60 && (int) Main.tile[x, y + 1].type != 78 && (int) Main.tile[x, y + 1].type != 380)
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0)
            flag = true;
        }
        else if (style == 2)
        {
          if ((int) Main.tile[x, y + 1].type != 0 && (int) Main.tile[x, y + 1].type != 59 && ((int) Main.tile[x, y + 1].type != 78 && (int) Main.tile[x, y + 1].type != 380))
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0)
            flag = true;
        }
        else if (style == 3)
        {
          if ((int) Main.tile[x, y + 1].type != 203 && (int) Main.tile[x, y + 1].type != 199 && ((int) Main.tile[x, y + 1].type != 23 && (int) Main.tile[x, y + 1].type != 25) && ((int) Main.tile[x, y + 1].type != 78 && (int) Main.tile[x, y + 1].type != 380))
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0)
            flag = true;
        }
        else if (style == 4)
        {
          if ((int) Main.tile[x, y + 1].type != 53 && (int) Main.tile[x, y + 1].type != 78 && ((int) Main.tile[x, y + 1].type != 380 && (int) Main.tile[x, y + 1].type != 116))
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
            flag = true;
        }
        else if (style == 5)
        {
          if ((int) Main.tile[x, y + 1].type != 57 && (int) Main.tile[x, y + 1].type != 78 && (int) Main.tile[x, y + 1].type != 380)
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0 && !Main.tile[x, y].lava())
            flag = true;
        }
        else if (style == 6)
        {
          if ((int) Main.tile[x, y + 1].type != 78 && (int) Main.tile[x, y + 1].type != 380 && ((int) Main.tile[x, y + 1].type != 147 && (int) Main.tile[x, y + 1].type != 161) && ((int) Main.tile[x, y + 1].type != 163 && (int) Main.tile[x, y + 1].type != 164 && (int) Main.tile[x, y + 1].type != 200))
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
            flag = true;
        }
        if (!flag)
        {
          Main.tile[x, y].active(true);
          Main.tile[x, y].type = (ushort) 82;
          Main.tile[x, y].frameX = (short) (18 * style);
          Main.tile[x, y].frameY = (short) 0;
          return true;
        }
      }
      return false;
    }

    public static void GrowSpike(int i, int j, ushort spikeType, ushort landType)
    {
      int index1 = i;
      int index2 = j;
      int num1 = 0;
      if (Main.tile[index1 + 1, index2].active() && (int) Main.tile[index1 + 1, index2].type == (int) spikeType)
        ++num1;
      if (Main.tile[index1 - 1, index2].active() && (int) Main.tile[index1 - 1, index2].type == (int) spikeType)
        ++num1;
      if (Main.tile[index1, index2 + 1].active() && (int) Main.tile[index1, index2 + 1].type == (int) spikeType)
        ++num1;
      if (Main.tile[index1, index2 - 1].active() && (int) Main.tile[index1, index2 - 1].type == (int) spikeType)
        ++num1;
      if (num1 >= 3 && (int) Main.tile[i, j].type != (int) landType)
        return;
      switch (WorldGen.genRand.Next(4))
      {
        case 0:
          --index2;
          break;
        case 1:
          ++index2;
          break;
        case 2:
          --index1;
          break;
        case 3:
          ++index1;
          break;
      }
      if (Main.tile[index1, index2].active())
        return;
      int num2 = 0;
      if (Main.tile[index1 + 1, index2].active() && (int) Main.tile[index1 + 1, index2].type == (int) spikeType)
        ++num2;
      if (Main.tile[index1 - 1, index2].active() && (int) Main.tile[index1 - 1, index2].type == (int) spikeType)
        ++num2;
      if (Main.tile[index1, index2 + 1].active() && (int) Main.tile[index1, index2 + 1].type == (int) spikeType)
        ++num2;
      if (Main.tile[index1, index2 - 1].active() && (int) Main.tile[index1, index2 - 1].type == (int) spikeType)
        ++num2;
      if (num2 >= 2)
        return;
      int num3 = 7;
      int num4 = index1 - num3;
      int num5 = index1 + num3;
      int num6 = index2 - num3;
      int num7 = index2 + num3;
      bool flag = false;
      for (int index3 = num4; index3 < num5; ++index3)
      {
        for (int index4 = num6; index4 < num7; ++index4)
        {
          if (Math.Abs(index3 - index1) * 2 + Math.Abs(index4 - index2) < 9 && Main.tile[index3, index4].active() && ((int) Main.tile[index3, index4].type == (int) landType && Main.tile[index3, index4 - 1].active()) && ((int) Main.tile[index3, index4 - 1].type == (int) spikeType && (int) Main.tile[index3, index4 - 1].liquid == 0))
          {
            flag = true;
            break;
          }
        }
      }
      if (!flag)
        return;
      Main.tile[index1, index2].type = spikeType;
      Main.tile[index1, index2].active(true);
      WorldGen.SquareTileFrame(index1, index2, true);
      if (Main.netMode != 2)
        return;
      NetMessage.SendTileSquare(-1, index1, index2, 3, TileChangeType.None);
    }

    public static void GrowAlch(int x, int y)
    {
      if (!Main.tile[x, y].active())
        return;
      if ((int) Main.tile[x, y].type == 82 && WorldGen.genRand.Next(50) == 0)
      {
        bool flag = false;
        if ((int) Main.tile[x, y].frameX == 108)
        {
          if (WorldGen.genRand.Next(3) != 0)
            flag = true;
        }
        else
          flag = true;
        if (!flag)
          return;
        Main.tile[x, y].type = (ushort) 83;
        if (Main.netMode == 2)
          NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
        WorldGen.SquareTileFrame(x, y, true);
      }
      else if (Main.dayTime && (int) Main.tile[x, y].type == 82 && ((int) Main.tile[x, y].frameX == 0 && WorldGen.genRand.Next(50) == 0))
      {
        Main.tile[x, y].type = (ushort) 83;
        if (Main.netMode == 2)
          NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
        WorldGen.SquareTileFrame(x, y, true);
      }
      else if (!Main.dayTime && (int) Main.tile[x, y].type == 82 && ((int) Main.tile[x, y].frameX == 18 && WorldGen.genRand.Next(50) == 0))
      {
        Main.tile[x, y].type = (ushort) 83;
        if (Main.netMode == 2)
          NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
        WorldGen.SquareTileFrame(x, y, true);
      }
      else if ((int) Main.tile[x, y].frameX == 36 && WorldGen.genRand.Next(3) != 0)
      {
        if ((int) Main.tile[x, y].type == 83)
        {
          if (WorldGen.genRand.Next(2) != 0)
            return;
          Main.tile[x, y].type = (ushort) 84;
          if (Main.netMode != 2)
            return;
          NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
        }
        else
        {
          if (WorldGen.genRand.Next(5) != 0 && (int) Main.tile[x, y].type != 84)
            return;
          Main.tile[x, y].type = (ushort) 83;
          if (Main.netMode != 2)
            return;
          NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
        }
      }
      else
      {
        if ((int) Main.tile[x, y].frameX != 108 || (int) Main.tile[x, y].type != 83 || WorldGen.genRand.Next(80) != 0)
          return;
        Main.tile[x, y].type = (ushort) 84;
        if (Main.netMode == 2)
          NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
        WorldGen.SquareTileFrame(x, y, true);
      }
    }

    public static void PlantAlch()
    {
      int index1 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
      int index2 = WorldGen.genRand.Next(40) != 0 ? (WorldGen.genRand.Next(10) != 0 ? WorldGen.genRand.Next((int) Main.worldSurface, Main.maxTilesY - 20) : WorldGen.genRand.Next(0, Main.maxTilesY - 20)) : WorldGen.genRand.Next((int) (Main.rockLayer + (double) Main.maxTilesY) / 2, Main.maxTilesY - 20);
      while (index2 < Main.maxTilesY - 20 && !Main.tile[index1, index2].active())
        ++index2;
      if (!Main.tile[index1, index2].nactive() || Main.tile[index1, index2 - 1].active() || (int) Main.tile[index1, index2 - 1].liquid != 0)
        return;
      int num1 = 15;
      int num2 = 5;
      int num3 = 0;
      int num4 = (int) ((double) num1 * ((double) Main.maxTilesX / 4200.0));
      int num5 = Utils.Clamp<int>(index1 - num4, 4, Main.maxTilesX - 4);
      int num6 = Utils.Clamp<int>(index1 + num4, 4, Main.maxTilesX - 4);
      int num7 = Utils.Clamp<int>(index2 - num4, 4, Main.maxTilesY - 4);
      int num8 = Utils.Clamp<int>(index2 + num4, 4, Main.maxTilesY - 4);
      for (int index3 = num5; index3 <= num6; ++index3)
      {
        for (int index4 = num7; index4 <= num8; ++index4)
        {
          if (Main.tileAlch[(int) Main.tile[index3, index4].type])
            ++num3;
        }
      }
      if (num3 >= num2)
        return;
      if ((int) Main.tile[index1, index2].type == 2 || (int) Main.tile[index1, index2].type == 109)
        WorldGen.PlaceAlch(index1, index2 - 1, 0);
      if ((int) Main.tile[index1, index2].type == 60)
        WorldGen.PlaceAlch(index1, index2 - 1, 1);
      if ((int) Main.tile[index1, index2].type == 0 || (int) Main.tile[index1, index2].type == 59)
        WorldGen.PlaceAlch(index1, index2 - 1, 2);
      if ((int) Main.tile[index1, index2].type == 23 || (int) Main.tile[index1, index2].type == 25 || ((int) Main.tile[index1, index2].type == 203 || (int) Main.tile[index1, index2].type == 199))
        WorldGen.PlaceAlch(index1, index2 - 1, 3);
      if ((int) Main.tile[index1, index2].type == 53 || (int) Main.tile[index1, index2].type == 116)
        WorldGen.PlaceAlch(index1, index2 - 1, 4);
      if ((int) Main.tile[index1, index2].type == 57)
        WorldGen.PlaceAlch(index1, index2 - 1, 5);
      if ((int) Main.tile[index1, index2].type == 147 || (int) Main.tile[index1, index2].type == 163 || ((int) Main.tile[index1, index2].type == 164 || (int) Main.tile[index1, index2].type == 161) || (int) Main.tile[index1, index2].type == 200)
        WorldGen.PlaceAlch(index1, index2 - 1, 6);
      if (!Main.tile[index1, index2 - 1].active() || Main.netMode != 2)
        return;
      NetMessage.SendTileSquare(-1, index1, index2 - 1, 1, TileChangeType.None);
    }

    public static void CheckAlch(int x, int y)
    {
      if (Main.tile[x, y] == null)
        Main.tile[x, y] = new Tile();
      if (Main.tile[x, y + 1] == null)
        Main.tile[x, y + 1] = new Tile();
      bool flag = false;
      if (!Main.tile[x, y + 1].active())
        flag = true;
      if (Main.tile[x, y + 1].halfBrick())
        flag = true;
      int num = (int) Main.tile[x, y].frameX / 18;
      Main.tile[x, y].frameY = (short) 0;
      if (!flag)
      {
        if (num == 0)
        {
          if ((int) Main.tile[x, y + 1].type != 109 && (int) Main.tile[x, y + 1].type != 2 && ((int) Main.tile[x, y + 1].type != 78 && (int) Main.tile[x, y + 1].type != 380))
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
            flag = true;
        }
        else if (num == 1)
        {
          if ((int) Main.tile[x, y + 1].type != 60 && (int) Main.tile[x, y + 1].type != 78 && (int) Main.tile[x, y + 1].type != 380)
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
            flag = true;
        }
        else if (num == 2)
        {
          if ((int) Main.tile[x, y + 1].type != 0 && (int) Main.tile[x, y + 1].type != 59 && ((int) Main.tile[x, y + 1].type != 78 && (int) Main.tile[x, y + 1].type != 380))
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
            flag = true;
        }
        else if (num == 3)
        {
          if ((int) Main.tile[x, y + 1].type != 199 && (int) Main.tile[x, y + 1].type != 203 && ((int) Main.tile[x, y + 1].type != 23 && (int) Main.tile[x, y + 1].type != 25) && ((int) Main.tile[x, y + 1].type != 78 && (int) Main.tile[x, y + 1].type != 380))
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
            flag = true;
        }
        else if (num == 4)
        {
          if ((int) Main.tile[x, y + 1].type != 53 && (int) Main.tile[x, y + 1].type != 78 && ((int) Main.tile[x, y + 1].type != 380 && (int) Main.tile[x, y + 1].type != 116))
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
            flag = true;
        }
        else if (num == 5)
        {
          if ((int) Main.tile[x, y + 1].type != 57 && (int) Main.tile[x, y + 1].type != 78 && (int) Main.tile[x, y + 1].type != 380)
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0 && !Main.tile[x, y].lava())
            flag = true;
          if ((int) Main.tile[x, y].type != 82 && Main.tile[x, y].lava() && ((int) Main.tile[x, y].type != 82 && Main.tile[x, y].lava()) && Main.netMode != 1)
          {
            if ((int) Main.tile[x, y].liquid > 16)
            {
              if ((int) Main.tile[x, y].type == 83)
              {
                Main.tile[x, y].type = (ushort) 84;
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
              }
            }
            else if ((int) Main.tile[x, y].type == 84)
            {
              Main.tile[x, y].type = (ushort) 83;
              if (Main.netMode == 2)
                NetMessage.SendTileSquare(-1, x, y, 1, TileChangeType.None);
            }
          }
        }
        else if (num == 6)
        {
          if ((int) Main.tile[x, y + 1].type != 78 && (int) Main.tile[x, y + 1].type != 380 && ((int) Main.tile[x, y + 1].type != 147 && (int) Main.tile[x, y + 1].type != 161) && ((int) Main.tile[x, y + 1].type != 163 && (int) Main.tile[x, y + 1].type != 164 && (int) Main.tile[x, y + 1].type != 200))
            flag = true;
          if ((int) Main.tile[x, y].liquid > 0 && Main.tile[x, y].lava())
            flag = true;
        }
      }
      if (!flag)
        return;
      WorldGen.KillTile(x, y, false, false, false);
    }

    public static void CheckBanner(int x, int j, byte type)
    {
      if (WorldGen.destroyObject)
        return;
      int num1 = (int) Main.tile[x, j].frameY / 18;
      int num2 = 0;
      while (num1 >= 3)
      {
        num1 -= 3;
        ++num2;
      }
      int num3 = j - num1;
      int frameX = (int) Main.tile[x, j].frameX;
      bool flag = false;
      for (int index = 0; index < 3; ++index)
      {
        if (Main.tile[x, num3 + index] == null)
          Main.tile[x, num3 + index] = new Tile();
        if (!Main.tile[x, num3 + index].active())
          flag = true;
        else if ((int) Main.tile[x, num3 + index].type != (int) type)
          flag = true;
        else if ((int) Main.tile[x, num3 + index].frameY != index * 18 + num2 * 18 * 3)
          flag = true;
        else if ((int) Main.tile[x, num3 + index].frameX != frameX)
          flag = true;
      }
      if (Main.tile[x, num3 - 1] == null)
        Main.tile[x, num3 - 1] = new Tile();
      if (!Main.tile[x, num3 - 1].nactive())
        flag = true;
      if (!Main.tile[x, num3 - 1].topSlope() && !Main.tile[x, num3 - 1].halfBrick() && !Main.tileSolid[(int) Main.tile[x, num3 - 1].type] || Main.tileSolidTop[(int) Main.tile[x, num3 - 1].type] && (!TileID.Sets.Platforms[(int) Main.tile[x, num3 - 1].type] || !Main.tile[x, num3 - 1].halfBrick() && !Main.tile[x, num3 - 1].topSlope()) || (TileID.Sets.NotReallySolid[(int) Main.tile[x, num3 - 1].type] || Main.tile[x, num3 - 1].bottomSlope()))
        flag = true;
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int index = 0; index < 3; ++index)
      {
        if ((int) Main.tile[x, num3 + index].type == (int) type)
          WorldGen.KillTile(x, num3 + index, false, false, false);
      }
      if ((int) type == 91)
      {
        int num4 = frameX / 18 + num2 * 111;
        if (num4 >= 278)
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 3559 + num4, 1, false, 0, false, false);
        else if (num4 >= 273)
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 3516 + num4, 1, false, 0, false, false);
        else if (num4 >= 272)
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 3780, 1, false, 0, false, false);
        else if (num4 >= 270)
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 3323 + num4, 1, false, 0, false, false);
        else if (num4 >= 207)
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 3183 + num4, 1, false, 0, false, false);
        else if (num4 >= 109)
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 2788 + num4, 1, false, 0, false, false);
        else if (num4 >= 22)
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 1593 + num4, 1, false, 0, false, false);
        else if (num4 >= 10 && num4 <= 15)
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 1441 + num4, 1, false, 0, false, false);
        else if (num4 >= 16 && num4 <= 21)
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 1448 + num4, 1, false, 0, false, false);
        else if (num4 >= 7 && num4 <= 9)
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 838 + num4, 1, false, 0, false, false);
        else if (num4 >= 4 && num4 <= 6)
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 785 + num4, 1, false, 0, false, false);
        else
          Item.NewItem(x * 16, (num3 + 1) * 16, 32, 32, 337 + num4, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
    }

    public static void PlaceBanner(int x, int y, ushort type, int style = 0)
    {
      int num1 = style * 18;
      int num2 = 0;
      if (style >= 90)
      {
        num1 -= 1620;
        num2 += 54;
      }
      if (Main.tile[x, y - 1] == null)
        Main.tile[x, y - 1] = new Tile();
      if (Main.tile[x, y] == null)
        Main.tile[x, y] = new Tile();
      if (Main.tile[x, y + 1] == null)
        Main.tile[x, y + 1] = new Tile();
      if (Main.tile[x, y + 2] == null)
        Main.tile[x, y + 2] = new Tile();
      if (!Main.tile[x, y - 1].nactive() || !Main.tileSolid[(int) Main.tile[x, y - 1].type] || (Main.tileSolidTop[(int) Main.tile[x, y - 1].type] || Main.tile[x, y].active()) || (Main.tile[x, y + 1].active() || Main.tile[x, y + 2].active()))
        return;
      Main.tile[x, y].active(true);
      Main.tile[x, y].frameY = (short) num2;
      Main.tile[x, y].frameX = (short) num1;
      Main.tile[x, y].type = type;
      Main.tile[x, y + 1].active(true);
      Main.tile[x, y + 1].frameY = (short) (num2 + 18);
      Main.tile[x, y + 1].frameX = (short) num1;
      Main.tile[x, y + 1].type = type;
      Main.tile[x, y + 2].active(true);
      Main.tile[x, y + 2].frameY = (short) (num2 + 36);
      Main.tile[x, y + 2].frameX = (short) num1;
      Main.tile[x, y + 2].type = type;
    }

    public static void PlaceMan(int i, int j, int dir)
    {
      for (int index1 = i; index1 <= i + 1; ++index1)
      {
        for (int index2 = j - 2; index2 <= j; ++index2)
        {
          if (Main.tile[index1, index2].active())
            return;
        }
      }
      if (!WorldGen.SolidTile2(i, j + 1) || !WorldGen.SolidTile2(i + 1, j + 1))
        return;
      byte num = 0;
      if (dir == 1)
        num = (byte) 36;
      Main.tile[i, j - 2].active(true);
      Main.tile[i, j - 2].frameY = (short) 0;
      Main.tile[i, j - 2].frameX = (short) num;
      Main.tile[i, j - 2].type = (ushort) 128;
      Main.tile[i, j - 1].active(true);
      Main.tile[i, j - 1].frameY = (short) 18;
      Main.tile[i, j - 1].frameX = (short) num;
      Main.tile[i, j - 1].type = (ushort) 128;
      Main.tile[i, j].active(true);
      Main.tile[i, j].frameY = (short) 36;
      Main.tile[i, j].frameX = (short) num;
      Main.tile[i, j].type = (ushort) 128;
      Main.tile[i + 1, j - 2].active(true);
      Main.tile[i + 1, j - 2].frameY = (short) 0;
      Main.tile[i + 1, j - 2].frameX = (short) (byte) (18U + (uint) num);
      Main.tile[i + 1, j - 2].type = (ushort) 128;
      Main.tile[i + 1, j - 1].active(true);
      Main.tile[i + 1, j - 1].frameY = (short) 18;
      Main.tile[i + 1, j - 1].frameX = (short) (byte) (18U + (uint) num);
      Main.tile[i + 1, j - 1].type = (ushort) 128;
      Main.tile[i + 1, j].active(true);
      Main.tile[i + 1, j].frameY = (short) 36;
      Main.tile[i + 1, j].frameX = (short) (byte) (18U + (uint) num);
      Main.tile[i + 1, j].type = (ushort) 128;
    }

    public static void PlaceWoman(int i, int j, int dir)
    {
      for (int index1 = i; index1 <= i + 1; ++index1)
      {
        for (int index2 = j - 2; index2 <= j; ++index2)
        {
          if (Main.tile[index1, index2].active())
            return;
        }
      }
      if (!WorldGen.SolidTile2(i, j + 1) || !WorldGen.SolidTile2(i + 1, j + 1))
        return;
      byte num = 0;
      if (dir == 1)
        num = (byte) 36;
      Main.tile[i, j - 2].active(true);
      Main.tile[i, j - 2].frameY = (short) 0;
      Main.tile[i, j - 2].frameX = (short) num;
      Main.tile[i, j - 2].type = (ushort) 269;
      Main.tile[i, j - 1].active(true);
      Main.tile[i, j - 1].frameY = (short) 18;
      Main.tile[i, j - 1].frameX = (short) num;
      Main.tile[i, j - 1].type = (ushort) 269;
      Main.tile[i, j].active(true);
      Main.tile[i, j].frameY = (short) 36;
      Main.tile[i, j].frameX = (short) num;
      Main.tile[i, j].type = (ushort) 269;
      Main.tile[i + 1, j - 2].active(true);
      Main.tile[i + 1, j - 2].frameY = (short) 0;
      Main.tile[i + 1, j - 2].frameX = (short) (byte) (18U + (uint) num);
      Main.tile[i + 1, j - 2].type = (ushort) 269;
      Main.tile[i + 1, j - 1].active(true);
      Main.tile[i + 1, j - 1].frameY = (short) 18;
      Main.tile[i + 1, j - 1].frameX = (short) (byte) (18U + (uint) num);
      Main.tile[i + 1, j - 1].type = (ushort) 269;
      Main.tile[i + 1, j].active(true);
      Main.tile[i + 1, j].frameY = (short) 36;
      Main.tile[i + 1, j].frameX = (short) (byte) (18U + (uint) num);
      Main.tile[i + 1, j].type = (ushort) 269;
    }

    public static void CheckWeaponsRack(int i, int j)
    {
      if (WorldGen.destroyObject)
        return;
      int num1 = i;
      int num2 = j - (int) Main.tile[i, j].frameY / 18;
      int num3 = (int) Main.tile[i, j].frameX;
      int num4 = 0;
      while (num3 >= 5000)
      {
        num3 -= 5000;
        ++num4;
      }
      if (num4 != 0)
        num3 = (num4 - 1) * 18;
      int num5 = num3 % 54;
      int num6 = num1 - num5 / 18;
      bool flag = false;
      for (int index1 = 0; index1 < 3; ++index1)
      {
        for (int index2 = 0; index2 < 3; ++index2)
        {
          int index3 = num6 + index1;
          int index4 = num2 + index2;
          int num7 = (int) Main.tile[index3, index4].frameX;
          int num8 = 0;
          while (num7 >= 5000)
          {
            num7 -= 5000;
            ++num8;
          }
          if (num8 != 0)
            num7 = (num8 - 1) * 18;
          int num9 = num7 % 54;
          if (!Main.tile[index3, index4].active() || (int) Main.tile[index3, index4].type != 334 || ((int) Main.tile[index3, index4].wall <= 0 || (int) Main.tile[index3, index4].frameY != index2 * 18) || num9 != index1 * 18)
            flag = true;
        }
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      Item.NewItem(i * 16, j * 16, 48, 48, 2699, 1, false, 0, false, false);
      for (int index1 = 0; index1 < 3; ++index1)
      {
        for (int index2 = 0; index2 < 3; ++index2)
        {
          int i1 = num6 + index1;
          int j1 = num2 + index2;
          if (Main.tile[i1, j1].active() && (int) Main.tile[i1, j1].type == 334)
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      WorldGen.destroyObject = false;
    }

    public static void ToggleGemLock(int i, int j, bool on)
    {
      Tile tileSafely = Framing.GetTileSafely(i, j);
      if (!tileSafely.active() || (int) tileSafely.type != 440 || (int) tileSafely.frameY < 54 && !on)
        return;
      bool flag = false;
      int Type = -1;
      if ((int) tileSafely.frameY >= 54)
        flag = true;
      int num1 = (int) Main.tile[i, j].frameX / 54;
      int num2 = (int) Main.tile[i, j].frameX % 54 / 18;
      int num3 = (int) Main.tile[i, j].frameY % 54 / 18;
      switch (num1)
      {
        case 0:
          Type = 1526;
          break;
        case 1:
          Type = 1524;
          break;
        case 2:
          Type = 1525;
          break;
        case 3:
          Type = 1523;
          break;
        case 4:
          Type = 1522;
          break;
        case 5:
          Type = 1527;
          break;
        case 6:
          Type = 3643;
          break;
      }
      for (int index1 = i - num2; index1 < i - num2 + 3; ++index1)
      {
        for (int index2 = j - num3; index2 < j - num3 + 3; ++index2)
          Main.tile[index1, index2].frameY = (short) ((on ? 54 : 0) + (index2 - j + num3) * 18);
      }
      if (Type != -1 & flag)
        Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      WorldGen.SquareTileFrame(i, j, true);
      NetMessage.SendTileSquare(-1, i - num2 + 1, j - num3 + 1, 3, TileChangeType.None);
      Wiring.HitSwitch(i - num2, j - num3);
      NetMessage.SendData(59, -1, -1, (NetworkText) null, i - num2, (float) (j - num3), 0.0f, 0.0f, 0, 0, 0);
    }

    public static void CheckMan(int i, int j)
    {
      if (WorldGen.destroyObject)
        return;
      int num1 = i;
      int num2 = j - (int) Main.tile[i, j].frameY / 18;
      int frameX1 = (int) Main.tile[i, j].frameX;
      while (frameX1 >= 100)
        frameX1 -= 100;
      while (frameX1 >= 36)
        frameX1 -= 36;
      int i1 = num1 - frameX1 / 18;
      bool flag = false;
      for (int index1 = 0; index1 <= 1; ++index1)
      {
        for (int index2 = 0; index2 <= 2; ++index2)
        {
          int index3 = i1 + index1;
          int index4 = num2 + index2;
          int frameX2 = (int) Main.tile[index3, index4].frameX;
          while (frameX2 >= 100)
            frameX2 -= 100;
          if (frameX2 >= 36)
            frameX2 -= 36;
          if (!Main.tile[index3, index4].active() || (int) Main.tile[index3, index4].type != 128 || ((int) Main.tile[index3, index4].frameY != index2 * 18 || frameX2 != index1 * 18))
            flag = true;
        }
      }
      if (!WorldGen.SolidTileAllowBottomSlope(i1, num2 + 3) || !WorldGen.SolidTileAllowBottomSlope(i1 + 1, num2 + 3))
        flag = true;
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      Item.NewItem(i * 16, j * 16, 32, 32, 498, 1, false, 0, false, false);
      for (int index1 = 0; index1 <= 1; ++index1)
      {
        for (int index2 = 0; index2 <= 2; ++index2)
        {
          int i2 = i1 + index1;
          int j1 = num2 + index2;
          if (Main.tile[i2, j1].active() && (int) Main.tile[i2, j1].type == 128)
            WorldGen.KillTile(i2, j1, false, false, false);
        }
      }
      WorldGen.destroyObject = false;
    }

    public static void CheckWoman(int i, int j)
    {
      if (WorldGen.destroyObject)
        return;
      int num1 = i;
      int num2 = j - (int) Main.tile[i, j].frameY / 18;
      int frameX1 = (int) Main.tile[i, j].frameX;
      while (frameX1 >= 100)
        frameX1 -= 100;
      while (frameX1 >= 36)
        frameX1 -= 36;
      int i1 = num1 - frameX1 / 18;
      bool flag = false;
      for (int index1 = 0; index1 <= 1; ++index1)
      {
        for (int index2 = 0; index2 <= 2; ++index2)
        {
          int index3 = i1 + index1;
          int index4 = num2 + index2;
          int frameX2 = (int) Main.tile[index3, index4].frameX;
          while (frameX2 >= 100)
            frameX2 -= 100;
          if (frameX2 >= 36)
            frameX2 -= 36;
          if (!Main.tile[index3, index4].active() || (int) Main.tile[index3, index4].type != 269 || ((int) Main.tile[index3, index4].frameY != index2 * 18 || frameX2 != index1 * 18))
            flag = true;
        }
      }
      if (!WorldGen.SolidTileAllowBottomSlope(i1, num2 + 3) || !WorldGen.SolidTileAllowBottomSlope(i1 + 1, num2 + 3))
        flag = true;
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      Item.NewItem(i * 16, j * 16, 32, 32, 1989, 1, false, 0, false, false);
      for (int index1 = 0; index1 <= 1; ++index1)
      {
        for (int index2 = 0; index2 <= 2; ++index2)
        {
          int i2 = i1 + index1;
          int j1 = num2 + index2;
          if (Main.tile[i2, j1].active() && (int) Main.tile[i2, j1].type == 269)
            WorldGen.KillTile(i2, j1, false, false, false);
        }
      }
      WorldGen.destroyObject = false;
    }

    public static void Place1x2(int x, int y, ushort type, int style)
    {
      short num1 = 0;
      if ((int) type == 20)
        num1 = (short) (WorldGen.genRand.Next(3) * 18);
      if (Main.tile[x, y - 1] == null)
        Main.tile[x, y - 1] = new Tile();
      if (Main.tile[x, y + 1] == null)
        Main.tile[x, y + 1] = new Tile();
      if (!(WorldGen.SolidTile2(x, y + 1) & !Main.tile[x, y - 1].active()))
        return;
      short num2 = (short) (style * 40);
      Main.tile[x, y - 1].active(true);
      Main.tile[x, y - 1].frameY = num2;
      Main.tile[x, y - 1].frameX = num1;
      Main.tile[x, y - 1].type = type;
      Main.tile[x, y].active(true);
      Main.tile[x, y].frameY = (short) ((int) num2 + 18);
      Main.tile[x, y].frameX = num1;
      Main.tile[x, y].type = type;
    }

    public static void Place1x2Top(int x, int y, ushort type, int style)
    {
      short num1 = 0;
      if (Main.tile[x, y - 1] == null)
        Main.tile[x, y - 1] = new Tile();
      if (Main.tile[x, y + 1] == null)
        Main.tile[x, y + 1] = new Tile();
      if (!Main.tile[x, y - 1].nactive() || !Main.tileSolid[(int) Main.tile[x, y - 1].type] || (Main.tileSolidTop[(int) Main.tile[x, y - 1].type] || Main.tile[x, y + 1].active()))
        return;
      short num2 = (short) (style * 36);
      Main.tile[x, y].active(true);
      Main.tile[x, y].frameY = num2;
      Main.tile[x, y].frameX = num1;
      Main.tile[x, y].type = type;
      Main.tile[x, y + 1].active(true);
      Main.tile[x, y + 1].frameY = (short) ((int) num2 + 18);
      Main.tile[x, y + 1].frameX = num1;
      Main.tile[x, y + 1].type = type;
    }

    public static void Check1x2Top(int x, int j, ushort type)
    {
      if (WorldGen.destroyObject)
        return;
      int index = j;
      bool flag = true;
      int num1 = (int) Main.tile[x, index].frameY / 18;
      int num2 = 0;
      while (num1 >= 2)
      {
        num1 -= 2;
        ++num2;
      }
      int j1 = index - num1;
      int num3 = num2 * 36;
      if (Main.tile[x, j1] == null)
        Main.tile[x, j1] = new Tile();
      if (Main.tile[x, j1 + 1] == null)
        Main.tile[x, j1 + 1] = new Tile();
      if (Main.tile[x, j1] == null)
        Main.tile[x, j1] = new Tile();
      if ((int) Main.tile[x, j1].frameY == num3 && (int) Main.tile[x, j1 + 1].frameY == num3 + 18 && ((int) Main.tile[x, j1].type == (int) type && (int) Main.tile[x, j1 + 1].type == (int) type))
        flag = false;
      if (Main.tile[x, j1 - 1] == null)
        Main.tile[x, j1 - 1] = new Tile();
      if (!Main.tile[x, j1 - 1].nactive() || !Main.tileSolid[(int) Main.tile[x, j1 - 1].type] || Main.tileSolidTop[(int) Main.tile[x, j1 - 1].type])
        flag = true;
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      if ((int) Main.tile[x, j1].type == (int) type)
        WorldGen.KillTile(x, j1, false, false, false);
      if ((int) Main.tile[x, j1 + 1].type == (int) type)
        WorldGen.KillTile(x, j1 + 1, false, false, false);
      if ((int) type == 42)
      {
        int Type = 0;
        if (num2 == 0)
          Type = 136;
        else if (num2 == 7)
          Type = 1431;
        else if (num2 == 8)
          Type = 1808;
        else if (num2 == 9)
          Type = 1859;
        else if (num2 < 10)
          Type = 1389 + num2;
        else if (num2 == 10)
          Type = 2032;
        else if (num2 == 11)
          Type = 2033;
        else if (num2 == 12)
          Type = 2034;
        else if (num2 == 13)
          Type = 2035;
        else if (num2 == 14)
          Type = 2036;
        else if (num2 == 15)
          Type = 2037;
        else if (num2 == 16)
          Type = 2038;
        else if (num2 == 17)
          Type = 2039;
        else if (num2 == 18)
          Type = 2040;
        else if (num2 == 19)
          Type = 2041;
        else if (num2 == 20)
          Type = 2042;
        else if (num2 == 21)
          Type = 2043;
        else if (num2 >= 22 && num2 <= 25)
          Type = 2145 + num2 - 22;
        else if (num2 == 26)
          Type = 2226;
        else if (num2 == 27)
          Type = 2530;
        else if (num2 == 28)
          Type = 2546;
        else if (num2 == 29)
          Type = 2564;
        else if (num2 == 30)
          Type = 2579;
        else if (num2 == 31)
          Type = 2641;
        else if (num2 == 32)
          Type = 2642;
        else if (num2 == 33)
          Type = 2820;
        else if (num2 == 34)
          Type = 3138;
        else if (num2 == 35)
          Type = 3140;
        else if (num2 == 36)
          Type = 3139;
        else if (num2 == 37)
          Type = 3891;
        Item.NewItem(x * 16, j1 * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      else if ((int) type == 270)
        Item.NewItem(x * 16, j1 * 16, 32, 32, 1993, 1, false, 0, false, false);
      else if ((int) type == 271)
        Item.NewItem(x * 16, j1 * 16, 32, 32, 2005, 1, false, 0, false, false);
      WorldGen.destroyObject = false;
    }

    public static bool PlaceSmallPile(int i, int j, int X, int Y, ushort type = 185)
    {
      int i1 = i;
      int index = j;
      short num1 = (short) (Y * 18);
      short num2 = (short) (X * 18);
      if (Main.tile[i1, index] == null)
        Main.tile[i1, index] = new Tile();
      if (Main.tile[i1 + 1, index] == null)
        Main.tile[i1 + 1, index] = new Tile();
      if (Main.tile[i1, index + 1] == null)
        Main.tile[i1, index + 1] = new Tile();
      if (Main.tile[i1 + 1, index + 1] == null)
        Main.tile[i1 + 1, index + 1] = new Tile();
      if (Main.tile[i1, index].lava())
        return false;
      if (Y == 1)
      {
        short num3 = (short) (X * 36);
        bool flag = false;
        if (WorldGen.SolidTile2(i1, index + 1) && WorldGen.SolidTile2(i1 + 1, index + 1) && (!Main.tile[i1, index].active() && !Main.tile[i1 + 1, index].active()))
          flag = true;
        if (flag)
        {
          Main.tile[i1, index].active(true);
          Main.tile[i1, index].frameY = num1;
          Main.tile[i1, index].frameX = num3;
          Main.tile[i1, index].type = type;
          Main.tile[i1 + 1, index].active(true);
          Main.tile[i1 + 1, index].frameY = num1;
          Main.tile[i1 + 1, index].frameX = (short) ((int) num3 + 18);
          Main.tile[i1 + 1, index].type = type;
          return true;
        }
      }
      else if (WorldGen.SolidTile2(i1, index + 1) && !Main.tile[i1, index].active())
      {
        Main.tile[i1, index].active(true);
        Main.tile[i1, index].frameY = num1;
        Main.tile[i1, index].frameX = num2;
        Main.tile[i1, index].type = type;
        return true;
      }
      return false;
    }

    public static void CheckPile(int i, int y)
    {
      int i1 = i;
      if (Main.tile[i1, y] == null)
        Main.tile[i1, y] = new Tile();
      if (Main.tile[i1 + 1, y] == null)
        Main.tile[i1 + 1, y] = new Tile();
      if (Main.tile[i1, y + 1] == null)
        Main.tile[i1, y + 1] = new Tile();
      if (Main.tile[i1 + 1, y + 1] == null)
        Main.tile[i1 + 1, y + 1] = new Tile();
      if ((int) Main.tile[i1, y].frameY == 18)
      {
        WorldGen.Check2x1(i1, y, Main.tile[i1, y].type);
      }
      else
      {
        if (WorldGen.SolidTile(i1, y + 1))
          return;
        WorldGen.KillTile(i1, y, false, false, false);
      }
    }

    public static void Check2x1(int i, int y, ushort type)
    {
      if (WorldGen.destroyObject)
        return;
      int index = i;
      bool flag = true;
      if (Main.tile[index, y] == null)
        Main.tile[index, y] = new Tile();
      int num1 = (int) Main.tile[index, y].frameX / 18;
      int num2 = num1 >> 1;
      int num3 = num1 % 2;
      int i1 = index - num3;
      if (Main.tile[i1, y] == null)
        Main.tile[i1, y] = new Tile();
      if (Main.tile[i1 + 1, y] == null)
        Main.tile[i1 + 1, y] = new Tile();
      if (Main.tile[i1, y + 1] == null)
        Main.tile[i1, y + 1] = new Tile();
      if (Main.tile[i1 + 1, y + 1] == null)
        Main.tile[i1 + 1, y + 1] = new Tile();
      if ((int) Main.tile[i1 + 1, y].frameX == (int) Main.tile[i1, y].frameX + 18 && (int) Main.tile[i1, y].type == (int) type && (int) Main.tile[i1 + 1, y].type == (int) type)
        flag = false;
      if ((int) type == 29 || (int) type == 103 || (int) type == 462)
      {
        if (!Main.tile[i1, y + 1].active() || !Main.tileTable[(int) Main.tile[i1, y + 1].type])
          flag = true;
        if (!Main.tile[i1 + 1, y + 1].active() || !Main.tileTable[(int) Main.tile[i1 + 1, y + 1].type])
          flag = true;
      }
      else
      {
        if (!WorldGen.SolidTileAllowBottomSlope(i1, y + 1))
          flag = true;
        if (!WorldGen.SolidTileAllowBottomSlope(i1 + 1, y + 1))
          flag = true;
      }
      if ((int) type == 185 && (int) Main.tile[i1, y].frameX >= 1368 && ((int) Main.tile[i1, y].frameX <= 1458 && (int) Main.tile[i1, y + 1].type != 2) && (int) Main.tile[i1 + 1, y + 1].type != 2)
      {
        Main.tile[i1, y].frameX -= (short) 1368;
        Main.tile[i1 + 1, y].frameX -= (short) 1368;
      }
      if (!flag)
        return;
      int frameX = (int) Main.tile[i1, y].frameX;
      if (!Main.tile[i1, y].active())
        frameX = (int) Main.tile[i1 + 1, y].frameX;
      WorldGen.destroyObject = true;
      if ((int) Main.tile[i1, y].type == (int) type)
        WorldGen.KillTile(i1, y, false, false, false);
      if ((int) Main.tile[i1 + 1, y].type == (int) type)
        WorldGen.KillTile(i1 + 1, y, false, false, false);
      if ((int) type == 16)
      {
        if (num2 == 1)
          Item.NewItem(i1 * 16, y * 16, 32, 32, 716, 1, false, 0, false, false);
        else
          Item.NewItem(i1 * 16, y * 16, 32, 32, 35, 1, false, 0, false, false);
      }
      if ((int) type == 18)
      {
        int Type = 36;
        if (num2 >= 1 && num2 <= 3)
          Type = 634 + num2;
        else if (num2 >= 4 && num2 <= 8)
          Type = 807 + num2;
        else if (num2 == 9)
          Type = 916;
        else if (num2 == 10)
          Type = 1145;
        else if (num2 == 11)
          Type = 1398;
        else if (num2 == 12)
          Type = 1401;
        else if (num2 == 13)
          Type = 1404;
        else if (num2 == 14)
          Type = 1461;
        else if (num2 == 15)
          Type = 1511;
        else if (num2 == 16)
          Type = 1795;
        else if (num2 == 17)
          Type = 1817;
        else if (num2 == 18)
          Type = 2229;
        else if (num2 == 19)
          Type = 2251;
        else if (num2 == 20)
          Type = 2252;
        else if (num2 == 21)
          Type = 2253;
        else if (num2 == 22)
          Type = 2534;
        else if (num2 == 23)
          Type = 673;
        else if (num2 == 24)
          Type = 2631;
        else if (num2 == 25)
          Type = 2632;
        else if (num2 == 26)
          Type = 2633;
        else if (num2 == 27)
          Type = 2826;
        else if (num2 == 28)
          Type = 3156;
        else if (num2 == 29)
          Type = 3158;
        else if (num2 == 30)
          Type = 3157;
        else if (num2 == 31)
          Type = 3909;
        else if (num2 == 32)
          Type = 3910;
        Item.NewItem(i1 * 16, y * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      if ((int) type == 185)
      {
        if (frameX >= 576 && frameX <= 610)
        {
          Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
          Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(3) != 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(3) != 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(2) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(2) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(3) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(3) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(4) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(4) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(5) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(10, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(5) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
        }
        if (frameX >= 612 && frameX <= 646)
        {
          Item.NewItem(i1 * 16, y * 16, 32, 32, 72, WorldGen.genRand.Next(10, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(2) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 72, WorldGen.genRand.Next(20, 100), false, 0, false, false);
          if (WorldGen.genRand.Next(3) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 72, WorldGen.genRand.Next(30, 100), false, 0, false, false);
        }
        if (frameX >= 648 && frameX <= 682)
        {
          Item.NewItem(i1 * 16, y * 16, 32, 32, 73, WorldGen.genRand.Next(1, 6), false, 0, false, false);
          if (WorldGen.genRand.Next(2) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 73, WorldGen.genRand.Next(2, 6), false, 0, false, false);
          if (WorldGen.genRand.Next(3) == 0)
            Item.NewItem(i1 * 16, y * 16, 32, 32, 73, WorldGen.genRand.Next(3, 6), false, 0, false, false);
        }
        if (frameX >= 684 && frameX <= 718)
          Item.NewItem(i1 * 16, y * 16, 32, 32, 181, WorldGen.genRand.Next(1, 4), false, 0, false, false);
        if (frameX >= 720 && frameX <= 754)
          Item.NewItem(i1 * 16, y * 16, 32, 32, 180, WorldGen.genRand.Next(1, 4), false, 0, false, false);
        if (frameX >= 756 && frameX <= 790)
          Item.NewItem(i1 * 16, y * 16, 32, 32, 177, WorldGen.genRand.Next(1, 4), false, 0, false, false);
        if (frameX >= 792 && frameX <= 826)
          Item.NewItem(i1 * 16, y * 16, 32, 32, 179, WorldGen.genRand.Next(1, 4), false, 0, false, false);
        if (frameX >= 828 && frameX <= 862)
          Item.NewItem(i1 * 16, y * 16, 32, 32, 178, WorldGen.genRand.Next(1, 4), false, 0, false, false);
        if (frameX >= 864 && frameX <= 898)
          Item.NewItem(i1 * 16, y * 16, 32, 32, 182, WorldGen.genRand.Next(1, 4), false, 0, false, false);
      }
      if ((int) type == 462)
        Item.NewItem(i1 * 16, y * 16, 32, 32, 3795, 1, false, 0, false, false);
      if ((int) type == 29)
      {
        Item.NewItem(i1 * 16, y * 16, 32, 32, 87, 1, false, 0, false, false);
        Main.PlaySound(13, i * 16, y * 16, 1, 1f, 0.0f);
      }
      if ((int) type == 103)
      {
        int Type = 356;
        if (num2 == 1)
          Type = 2235;
        if (num2 == 2)
          Type = 2242;
        if (num2 == 3)
          Type = 2243;
        Item.NewItem(i1 * 16, y * 16, 32, 32, Type, 1, false, 0, false, false);
        Main.PlaySound(13, i * 16, y * 16, 1, 1f, 0.0f);
      }
      else if ((int) type == 134)
      {
        if (num2 == 1)
          Item.NewItem(i1 * 16, y * 16, 32, 32, 1220, 1, false, 0, false, false);
        else
          Item.NewItem(i1 * 16, y * 16, 32, 32, 525, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
      WorldGen.SquareTileFrame(i1, y, true);
      WorldGen.SquareTileFrame(i1 + 1, y, true);
    }

    public static void Place2x1(int x, int y, ushort type, int style = 0)
    {
      if (Main.tile[x, y] == null)
        Main.tile[x, y] = new Tile();
      if (Main.tile[x + 1, y] == null)
        Main.tile[x + 1, y] = new Tile();
      if (Main.tile[x, y + 1] == null)
        Main.tile[x, y + 1] = new Tile();
      if (Main.tile[x + 1, y + 1] == null)
        Main.tile[x + 1, y + 1] = new Tile();
      bool flag = false;
      if ((int) type != 29 && (int) type != 103 && (WorldGen.SolidTile2(x, y + 1) && WorldGen.SolidTile2(x + 1, y + 1)) && (!Main.tile[x, y].active() && !Main.tile[x + 1, y].active()))
        flag = true;
      else if (((int) type == 29 || (int) type == 103) && (Main.tile[x, y + 1].active() && Main.tile[x + 1, y + 1].active()) && (Main.tileTable[(int) Main.tile[x, y + 1].type] && Main.tileTable[(int) Main.tile[x + 1, y + 1].type] && (!Main.tile[x, y].active() && !Main.tile[x + 1, y].active())))
        flag = true;
      if (!flag)
        return;
      Main.tile[x, y].active(true);
      Main.tile[x, y].frameY = (short) 0;
      Main.tile[x, y].frameX = (short) (36 * style);
      Main.tile[x, y].type = type;
      Main.tile[x + 1, y].active(true);
      Main.tile[x + 1, y].frameY = (short) 0;
      Main.tile[x + 1, y].frameX = (short) (36 * style + 18);
      Main.tile[x + 1, y].type = type;
    }

    public static void Check4x2(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = i + (int) Main.tile[i, j].frameX / 18 * -1;
      if ((type == 79 || type == 90) && (int) Main.tile[i, j].frameX >= 72)
        num1 += 4;
      int num2 = (int) Main.tile[i, j].frameY / 18;
      int num3 = 0;
      while (num2 > 1)
      {
        num2 -= 2;
        ++num3;
      }
      int num4 = j - num2;
      for (int i1 = num1; i1 < num1 + 4; ++i1)
      {
        for (int index = num4; index < num4 + 2; ++index)
        {
          int num5 = (i1 - num1) * 18;
          if ((type == 79 || type == 90) && (int) Main.tile[i, j].frameX >= 72)
            num5 = (i1 - num1 + 4) * 18;
          if (Main.tile[i1, index] == null)
            Main.tile[i1, index] = new Tile();
          if (!Main.tile[i1, index].active() || (int) Main.tile[i1, index].type != type || ((int) Main.tile[i1, index].frameX != num5 || (int) Main.tile[i1, index].frameY != (index - num4) * 18 + num3 * 36))
            flag = true;
        }
        if (Main.tile[i1, num4 + 2] == null)
          Main.tile[i1, num4 + 2] = new Tile();
        if (!WorldGen.SolidTileAllowBottomSlope(i1, num4 + 2) && (!Main.tile[i1, num4 + 2].active() || !TileID.Sets.Platforms[(int) Main.tile[i1, num4 + 2].type]))
          flag = true;
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i1 = num1; i1 < num1 + 4; ++i1)
      {
        for (int j1 = num4; j1 < num4 + 3; ++j1)
        {
          if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      if (type == 79)
      {
        int Type = num3 != 0 ? (num3 != 4 ? (num3 < 9 || num3 > 12 ? (num3 < 5 || num3 > 8 ? (num3 < 13 || num3 > 18 ? (num3 != 19 ? (num3 != 20 ? (num3 != 21 ? (num3 != 22 ? (num3 != 23 ? (num3 != 24 ? (num3 != 25 ? (num3 != 26 ? (num3 != 27 ? (num3 != 28 ? (num3 != 29 ? (num3 != 30 ? (num3 != 31 ? num3 + 643 : 3897) : 3163) : 3164) : 3162) : 2811) : 2669) : 2568) : 2553) : 2538) : 2520) : 2231) : 2140) : 2139) : 2066 + num3 - 13) : 1465 + num3) : 1710 + num3) : 920) : 224;
        Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      if (type == 90)
      {
        int Type = 0;
        if (num3 == 0)
          Type = 336;
        else if (num3 >= 1 && num3 <= 10)
          Type = 2072 + num3 - 1;
        else if (num3 >= 11 && num3 <= 15)
          Type = 2124 + num3 - 11;
        else if (num3 == 16)
          Type = 2232;
        else if (num3 == 17)
          Type = 2519;
        else if (num3 == 18)
          Type = 2537;
        else if (num3 == 19)
          Type = 2552;
        else if (num3 == 20)
          Type = 2567;
        else if (num3 == 21)
          Type = 2658;
        else if (num3 == 22)
          Type = 2659;
        else if (num3 == 23)
          Type = 2660;
        else if (num3 == 24)
          Type = 2661;
        else if (num3 == 25)
          Type = 2662;
        else if (num3 == 26)
          Type = 2663;
        else if (num3 == 27)
          Type = 2810;
        else if (num3 == 28)
          Type = 3159;
        else if (num3 == 29)
          Type = 3161;
        else if (num3 == 30)
          Type = 3160;
        else if (num3 == 31)
          Type = 3895;
        Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
      for (int i1 = num1 - 1; i1 < num1 + 4; ++i1)
      {
        for (int j1 = num4 - 1; j1 < num4 + 4; ++j1)
          WorldGen.TileFrame(i1, j1, false, false);
      }
    }

    public static void PlaceJunglePlant(int X2, int Y2, ushort type, int styleX, int styleY)
    {
      if (styleY > 0 || (int) type == 236 || (int) type == 238)
      {
        int index1 = Y2;
        int index2 = X2;
        if ((int) type == 95 || (int) type == 126)
          ++index1;
        if (X2 < 5 || X2 > Main.maxTilesX - 5 || (index1 < 5 || index1 > Main.maxTilesY - 5))
          return;
        bool flag = true;
        for (int i = index2 - 1; i < index2 + 1; ++i)
        {
          for (int index3 = index1 - 1; index3 < index1 + 1; ++index3)
          {
            if (Main.tile[i, index3] == null)
              Main.tile[i, index3] = new Tile();
            if (Main.tile[i, index3].active() && (int) Main.tile[i, index3].type != 61 && ((int) Main.tile[i, index3].type != 62 && (int) Main.tile[i, index3].type != 69) && ((int) Main.tile[i, index3].type != 74 && ((int) type != 236 || (int) Main.tile[i, index3].type != 233)) && (((int) type != 238 || (int) Main.tile[i, index3].type != 233) && ((int) Main.tile[i, index3].type != 185 || (int) Main.tile[i, index3].frameY != 0)))
              flag = false;
            if ((int) type == 98 && (int) Main.tile[i, index3].liquid > 0)
              flag = false;
          }
          if (Main.tile[i, index1 + 1] == null)
            Main.tile[i, index1 + 1] = new Tile();
          if (!WorldGen.SolidTile(i, index1 + 1) || (int) Main.tile[i, index1 + 1].type != 60)
            flag = false;
        }
        if (!flag)
          return;
        short num1 = 36;
        if ((int) type == 236 || (int) type == 238)
          num1 = (short) 0;
        short num2 = (short) (36 * styleX);
        Main.tile[index2 - 1, index1 - 1].active(true);
        Main.tile[index2 - 1, index1 - 1].frameY = num1;
        Main.tile[index2 - 1, index1 - 1].frameX = num2;
        Main.tile[index2 - 1, index1 - 1].type = type;
        Main.tile[index2, index1 - 1].active(true);
        Main.tile[index2, index1 - 1].frameY = num1;
        Main.tile[index2, index1 - 1].frameX = (short) (18 + (int) num2);
        Main.tile[index2, index1 - 1].type = type;
        Main.tile[index2 - 1, index1].active(true);
        Main.tile[index2 - 1, index1].frameY = (short) ((int) num1 + 18);
        Main.tile[index2 - 1, index1].frameX = num2;
        Main.tile[index2 - 1, index1].type = type;
        Main.tile[index2, index1].active(true);
        Main.tile[index2, index1].frameY = (short) ((int) num1 + 18);
        Main.tile[index2, index1].frameX = (short) (18 + (int) num2);
        Main.tile[index2, index1].type = type;
      }
      else
      {
        int num1 = styleX;
        int index1 = X2;
        int index2 = Y2;
        if (index1 < 5 || index1 > Main.maxTilesX - 5 || (index2 < 5 || index2 > Main.maxTilesY - 5))
          return;
        bool flag = true;
        for (int i = index1 - 1; i < index1 + 2; ++i)
        {
          for (int index3 = index2 - 1; index3 < index2 + 1; ++index3)
          {
            if (Main.tile[i, index3] == null)
              Main.tile[i, index3] = new Tile();
            if (Main.tile[i, index3].active() && (int) Main.tile[i, index3].type != 61 && ((int) Main.tile[i, index3].type != 62 && (int) Main.tile[i, index3].type != 69) && ((int) Main.tile[i, index3].type != 74 && ((int) Main.tile[i, index3].type != 185 || (int) Main.tile[i, index3].frameY != 0)))
              flag = false;
          }
          if (Main.tile[i, index2 + 1] == null)
            Main.tile[i, index2 + 1] = new Tile();
          if (!WorldGen.SolidTile(i, index2 + 1) || (int) Main.tile[i, index2 + 1].type != 60)
            flag = false;
        }
        if (!flag)
          return;
        short num2 = (short) (54 * num1);
        Main.tile[index1 - 1, index2 - 1].active(true);
        Main.tile[index1 - 1, index2 - 1].frameY = (short) 0;
        Main.tile[index1 - 1, index2 - 1].frameX = num2;
        Main.tile[index1 - 1, index2 - 1].type = type;
        Main.tile[index1, index2 - 1].active(true);
        Main.tile[index1, index2 - 1].frameY = (short) 0;
        Main.tile[index1, index2 - 1].frameX = (short) ((int) num2 + 18);
        Main.tile[index1, index2 - 1].type = type;
        Main.tile[index1 + 1, index2 - 1].active(true);
        Main.tile[index1 + 1, index2 - 1].frameY = (short) 0;
        Main.tile[index1 + 1, index2 - 1].frameX = (short) ((int) num2 + 36);
        Main.tile[index1 + 1, index2 - 1].type = type;
        Main.tile[index1 - 1, index2].active(true);
        Main.tile[index1 - 1, index2].frameY = (short) 18;
        Main.tile[index1 - 1, index2].frameX = num2;
        Main.tile[index1 - 1, index2].type = type;
        Main.tile[index1, index2].active(true);
        Main.tile[index1, index2].frameY = (short) 18;
        Main.tile[index1, index2].frameX = (short) ((int) num2 + 18);
        Main.tile[index1, index2].type = type;
        Main.tile[index1 + 1, index2].active(true);
        Main.tile[index1 + 1, index2].frameY = (short) 18;
        Main.tile[index1 + 1, index2].frameX = (short) ((int) num2 + 36);
        Main.tile[index1 + 1, index2].type = type;
      }
    }

    public static void CheckJunglePlant(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      if ((int) Main.tile[i, j].frameY >= 36 || (int) Main.tile[i, j].type == 236 || (int) Main.tile[i, j].type == 238)
      {
        bool flag = false;
        int num1 = (int) Main.tile[i, j].frameX / 18;
        int num2 = 0;
        while (num1 > 1)
        {
          num1 -= 2;
          ++num2;
        }
        int num3 = i - num1;
        int num4 = 36;
        if (type == 236 || type == 238)
          num4 = 0;
        int num5 = (int) Main.tile[i, j].frameY / 18;
        while (num5 > 1)
          num5 -= 2;
        int num6 = j - num5;
        int num7 = num2 * 36;
        for (int i1 = num3; i1 < num3 + 2; ++i1)
        {
          for (int index = num6; index < num6 + 2; ++index)
          {
            if (Main.tile[i1, index] == null)
              Main.tile[i1, index] = new Tile();
            if (!Main.tile[i1, index].active() || (int) Main.tile[i1, index].type != type || ((int) Main.tile[i1, index].frameX != (i1 - num3) * 18 + num7 || (int) Main.tile[i1, index].frameY != (index - num6) * 18 + num4))
              flag = true;
          }
          if (Main.tile[i1, num6 + 2] == null)
            Main.tile[i1, num6 + 2] = new Tile();
          if (!WorldGen.SolidTile(i1, num6 + 2) || (int) Main.tile[i1, num6 + 2].type != 60)
            flag = true;
        }
        if (!flag)
          return;
        if (type == 238)
        {
          float num8 = (float) (i * 16);
          float num9 = (float) (j * 16);
          float num10 = -1f;
          int plr = 0;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            float num11 = Math.Abs((float) Main.player[index].position.X - num8) + Math.Abs((float) Main.player[index].position.Y - num9);
            if ((double) num11 < (double) num10 || (double) num10 == -1.0)
            {
              plr = index;
              num10 = num11;
            }
          }
          if ((double) num10 / 16.0 < 50.0)
            NPC.SpawnOnPlayer(plr, 262);
        }
        if (type == 236)
          Item.NewItem(i * 16, j * 16, 32, 32, 1291, 1, false, 0, false, false);
        int frameX = (int) Main.tile[i, j].frameX;
        WorldGen.destroyObject = true;
        for (int i1 = num3; i1 < num3 + 2; ++i1)
        {
          for (int j1 = num6; j1 < num6 + 2; ++j1)
          {
            if (Main.tile[i1, j1] == null)
              Main.tile[i1, j1] = new Tile();
            if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
              WorldGen.KillTile(i1, j1, false, false, false);
          }
        }
      }
      else
      {
        bool flag = false;
        int num1 = j + (int) Main.tile[i, j].frameY / 18 * -1;
        int num2 = (int) Main.tile[i, j].frameX / 18;
        int num3 = 0;
        while (num2 > 2)
        {
          num2 -= 3;
          ++num3;
        }
        int num4 = i - num2;
        int num5 = num3 * 54;
        for (int i1 = num4; i1 < num4 + 3; ++i1)
        {
          for (int index = num1; index < num1 + 2; ++index)
          {
            if (Main.tile[i1, index] == null)
              Main.tile[i1, index] = new Tile();
            if (!Main.tile[i1, index].active() || (int) Main.tile[i1, index].type != type || ((int) Main.tile[i1, index].frameX != (i1 - num4) * 18 + num5 || (int) Main.tile[i1, index].frameY != (index - num1) * 18))
              flag = true;
          }
          if (Main.tile[i1, num1 + 2] == null)
            Main.tile[i1, num1 + 2] = new Tile();
          if (!WorldGen.SolidTile(i1, num1 + 2) || (int) Main.tile[i1, num1 + 2].type != 60)
            flag = true;
        }
        if (!flag)
          return;
        int frameX = (int) Main.tile[i, j].frameX;
        WorldGen.destroyObject = true;
        for (int i1 = num4; i1 < num4 + 3; ++i1)
        {
          for (int j1 = num1; j1 < num1 + 3; ++j1)
          {
            if (Main.tile[i1, j1] == null)
              Main.tile[i1, j1] = new Tile();
            if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
              WorldGen.KillTile(i1, j1, false, false, false);
          }
        }
      }
    }

    public static void CheckSuper(int x, int y, int type)
    {
      if (WorldGen.destroyObject)
        return;
      Tile tile = Main.tile[x, y];
      int style = 0;
      if (type == 376)
        style = (int) tile.frameX / 36;
      if (type == 443)
        style = (int) tile.frameX / 36;
      bool flag1 = type == 376;
      bool flag2 = type == 443;
      bool flag3 = type == 444;
      TileObjectData tileData = TileObjectData.GetTileData(type, style, 0);
      int num1 = tileData.StyleHorizontal ? 1 : 0;
      int width = tileData.Width;
      int height = tileData.Height;
      int num2 = x;
      int num3 = y;
      int num4 = num2 - (int) tile.frameX / 18 % width;
      int j = num3 - (int) tile.frameY / 18 % height;
      int num5 = 0;
      int num6 = 0;
      if (num1 != 0)
        num5 = (int) tile.frameX / tileData.CoordinateFullWidth;
      else
        num6 = (int) tile.frameY / tileData.CoordinateFullHeight;
      bool flag4 = false;
      bool flag5 = false;
      for (int index1 = 0; index1 < width; ++index1)
      {
        for (int index2 = 0; index2 < height; ++index2)
        {
          Tile tileSafely = Framing.GetTileSafely(num4 + index1, j + index2);
          if (!tileSafely.active() || (int) tileSafely.type != type || ((int) tileSafely.frameX != num5 * tileData.CoordinateFullWidth + index1 * (tileData.CoordinateWidth + 2) || (int) tileSafely.frameY != num6 * tileData.CoordinateFullHeight + index2 * (tileData.CoordinateHeights[0] + 2)))
            flag4 = true;
        }
      }
      if (flag1)
      {
        for (int index = 0; index < width; ++index)
        {
          Tile tileSafely = Framing.GetTileSafely(num4 + index, j + height);
          if (!tileSafely.active() || !Main.tileSolid[(int) tileSafely.type] && !Main.tileTable[(int) tileSafely.type])
            flag4 = true;
          if (tileSafely.halfBrick())
            flag4 = true;
        }
      }
      if (flag2)
      {
        bool flag6 = true;
        bool flag7 = true;
        for (int index = 0; index < width; ++index)
        {
          if (!WorldGen.AnchorValid(Framing.GetTileSafely(num4 + index, j + height), AnchorType.SolidTile | AnchorType.SolidWithTop | AnchorType.SolidSide))
            flag7 = false;
          if (!WorldGen.AnchorValid(Framing.GetTileSafely(num4 + index, j - 1), AnchorType.SolidBottom))
            flag6 = false;
        }
        if (!flag6 && !flag7)
          flag4 = true;
        if (!flag4)
        {
          int num7 = 0;
          if (Main.netMode != 1)
          {
            if (flag7)
            {
              for (int index = 0; index < width; ++index)
                Framing.GetTileSafely(num4 + index, j).frameX = (short) (index * 18 + style / 2 * 36 + num7 * 36);
            }
            else
            {
              for (int index = 0; index < width; ++index)
                Framing.GetTileSafely(num4 + index, j).frameX = (short) (index * 18 + (style - 2) / 2 * 36 + 72 + num7 * 36);
            }
          }
        }
      }
      if (flag3)
      {
        bool flag6 = true;
        for (int index = 0; index < width; ++index)
        {
          if (!WorldGen.AnchorValid(Framing.GetTileSafely(num4 + index, j - 1), AnchorType.SolidTile))
            flag6 = false;
        }
        if (!flag6)
          flag4 = true;
        for (int index1 = 0; index1 < width; ++index1)
        {
          for (int index2 = 0; index2 < height; ++index2)
          {
            if ((int) Framing.GetTileSafely(num4 + index1, j + index2).liquid > 0)
            {
              flag4 = true;
              flag5 = true;
            }
          }
        }
      }
      if (!flag4)
        return;
      WorldGen.destroyObject = true;
      for (int index1 = 0; index1 < width; ++index1)
      {
        for (int index2 = 0; index2 < height; ++index2)
        {
          if ((int) Main.tile[num4 + index1, j + index2].type == type && Main.tile[num4 + index1, j + index2].active())
            WorldGen.KillTile(num4 + index1, j + index2, false, false, false);
        }
      }
      int Type = 0;
      if (type == 376)
        Type = style <= 2 ? 2334 + style : 3203 + style - 3;
      if (type == 443)
        Type = 3722;
      if (type == 444 && Main.netMode != 1 && !flag5)
        Projectile.NewProjectile((float) (num4 * 16 + 16), (float) (j * 16 + 16), 0.0f, 0.0f, 655, 0, 0.0f, Main.myPlayer, 0.0f, 0.0f);
      if (Type != 0)
        Item.NewItem(num4 * 16, j * 16, tileData.CoordinateFullWidth, tileData.CoordinateFullHeight, Type, 1, false, 0, false, false);
      WorldGen.destroyObject = false;
      for (int index1 = -1; index1 < width + 1; ++index1)
      {
        for (int index2 = -1; index2 < height + 1; ++index2)
          WorldGen.TileFrame(num4 + index1, j + index2, false, false);
      }
    }

    public static void Check2x2(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag1 = false;
      int num1 = 0;
      int num2 = (int) Main.tile[i, j].frameX / 18 * -1;
      if (num2 < -1)
      {
        num2 += 2;
        num1 = 36;
      }
      int i1 = num2 + i;
      int num3 = type == 172 ? 38 : 36;
      int frameY = (int) Main.tile[i, j].frameY;
      int num4 = 0;
      while (frameY >= num3)
      {
        frameY -= num3;
        ++num4;
      }
      int index1 = j - frameY / 18;
      for (int i2 = i1; i2 < i1 + 2; ++i2)
      {
        for (int j1 = index1; j1 < index1 + 2; ++j1)
        {
          Tile tileSafely = Framing.GetTileSafely(i2, j1);
          if (!tileSafely.active() || (int) tileSafely.type != type || ((int) tileSafely.frameX != (i2 - i1) * 18 + num1 || (int) tileSafely.frameY != (j1 - index1) * 18 + num4 * num3))
            flag1 = true;
        }
        if (type == 95 || type == 126)
        {
          Framing.GetTileSafely(i2, index1 - 1);
          if (!Main.tile[i2, index1 - 1].active() || !Main.tileSolid[(int) Main.tile[i2, index1 - 1].type] || Main.tileSolidTop[(int) Main.tile[i2, index1 - 1].type])
            flag1 = true;
        }
        else if (type != 138 && type != 132)
        {
          Tile tileSafely = Framing.GetTileSafely(i2, index1 + 2);
          if (!tileSafely.active() || !Main.tileSolid[(int) tileSafely.type] && !Main.tileTable[(int) tileSafely.type])
            flag1 = true;
          if (tileSafely.halfBrick())
            flag1 = true;
        }
      }
      if (type == 138)
      {
        ushort type1 = Main.tile[i1, index1 - 1].type;
        ushort type2 = Main.tile[i1 + 1, index1 - 1].type;
        if ((TileID.Sets.BasicChest[(int) type1] || TileID.Sets.BasicChest[(int) type2] || ((int) type1 == 88 || (int) type2 == 88) || TileID.Sets.BasicChestFake[(int) type1] ? 1 : (TileID.Sets.BasicChestFake[(int) type2] ? 1 : 0)) == 0 && !WorldGen.SolidTileAllowBottomSlope(i1, index1 + 2) && !WorldGen.SolidTileAllowBottomSlope(i1 + 1, index1 + 2))
          flag1 = true;
      }
      else if (type == 132)
      {
        flag1 = false;
        index1 = (int) Main.tile[i, j].frameY / 18 * -1 + j;
        int num5 = 0;
        int num6 = (int) Main.tile[i, j].frameX / 18 * -1;
        while (num6 < -1)
        {
          num6 += 2;
          num5 += 36;
        }
        i1 = num6 + i;
        for (int index2 = i1; index2 < i1 + 2; ++index2)
        {
          for (int index3 = index1; index3 < index1 + 2; ++index3)
          {
            if (Main.tile[index2, index3] == null)
              Main.tile[index2, index3] = new Tile();
            if (!Main.tile[index2, index3].active() || (int) Main.tile[index2, index3].type != type || ((int) Main.tile[index2, index3].frameX != (index2 - i1) * 18 + num5 || (int) Main.tile[index2, index3].frameY != (index3 - index1) * 18))
              flag1 = true;
          }
        }
        if (Main.tile[i1, index1 + 2] == null)
          Main.tile[i1, index1 + 2] = new Tile();
        if (Main.tile[i1 + 1, index1 + 2] == null)
          Main.tile[i1 + 1, index1 + 2] = new Tile();
        bool flag2 = false;
        ushort type1 = Main.tile[i1, index1 + 2].type;
        ushort type2 = Main.tile[i1 + 1, index1 + 2].type;
        if (!Main.tile[i1, index1 + 2].active() || !Main.tileSolid[(int) type1] && !Main.tileSolidTop[(int) type1] || (Main.tile[i1, index1 + 2].halfBrick() || (int) Main.tile[i1, index1 + 2].slope() != 0 && !Main.tile[i1, index1 + 2].bottomSlope()))
          flag2 = true;
        if (!Main.tile[i1 + 1, index1 + 2].active() || !Main.tileSolid[(int) type2] && !Main.tileSolidTop[(int) type2] || (Main.tile[i1 + 1, index1 + 2].halfBrick() || (int) Main.tile[i1 + 1, index1 + 2].slope() != 0 && !Main.tile[i1 + 1, index1 + 2].bottomSlope()))
          flag2 = true;
        if (flag2)
        {
          if ((int) Main.tile[i1, index1].wall < 1 || (int) Main.tile[i1 + 1, index1].wall < 1 || ((int) Main.tile[i1, index1 + 1].wall < 1 || (int) Main.tile[i1 + 1, index1 + 1].wall < 1))
            flag1 = true;
          else if (num5 < 72)
          {
            for (int index2 = i1; index2 < i1 + 2; ++index2)
            {
              for (int index3 = index1; index3 < index1 + 2; ++index3)
                Main.tile[index2, index3].frameX += (short) 72;
            }
          }
        }
        else if (num5 >= 72)
        {
          for (int index2 = i1; index2 < i1 + 2; ++index2)
          {
            for (int index3 = index1; index3 < index1 + 2; ++index3)
              Main.tile[index2, index3].frameX -= (short) 72;
          }
        }
      }
      if (!flag1)
        return;
      WorldGen.destroyObject = true;
      for (int i2 = i1; i2 < i1 + 2; ++i2)
      {
        for (int j1 = index1; j1 < index1 + 2; ++j1)
        {
          if ((int) Main.tile[i2, j1].type == type && Main.tile[i2, j1].active())
            WorldGen.KillTile(i2, j1, false, false, false);
        }
      }
      int Type = 0;
      if (type == 360)
        Type = 3072;
      if (type >= 288 && type <= 295)
        Type = 2178 + type - 288;
      if (type >= 316 && type <= 318)
        Type = 2439 + type - 316;
      if (type == 85)
        Type = 321;
      if (type == 94)
        Type = 352;
      if (type == 95)
        Type = 344;
      if (type == 96)
        Type = 345;
      if (type == 97)
        Type = 346;
      if (type == 98)
        Type = 347;
      if (type == 99)
        Type = 348;
      if (type == 335)
        Type = 2700;
      if (type == 411)
        Type = 3545;
      if (type == 100)
      {
        if (num4 == 0)
          Type = 349;
        else if (num4 >= 1 && num4 <= 12)
          Type = 2092 + num4 - 1;
        else if (num4 >= 13 && num4 <= 16)
          Type = 2149 + num4 - 13;
        else if (num4 == 17)
          Type = 2227;
        else if (num4 == 18)
          Type = 2522;
        else if (num4 == 19)
          Type = 2541;
        else if (num4 == 20)
          Type = 2555;
        else if (num4 == 21)
          Type = 2570;
        else if (num4 == 22)
          Type = 2664;
        else if (num4 == 23)
          Type = 2665;
        else if (num4 == 24)
          Type = 2666;
        else if (num4 == 25)
          Type = 2667;
        else if (num4 == 26)
          Type = 2668;
        else if (num4 == 27)
          Type = 2825;
        else if (num4 == 28)
          Type = 3168;
        else if (num4 == 29)
          Type = 3170;
        else if (num4 == 30)
          Type = 3169;
        else if (num4 == 31)
          Type = 3893;
      }
      if (type == 173)
        Type = 714;
      if (type == 125)
        Type = 487;
      if (type == 287)
        Type = 2177;
      if (type == 126)
        Type = 488;
      if (type == 132)
        Type = 513;
      if (type == 142)
        Type = 581;
      if (type == 143)
        Type = 582;
      if (type == 282)
        Type = 250;
      if (type == 319)
        Type = 2490;
      if (type == 172)
      {
        Type = 2827 + num4;
        if (num4 == 29)
          Type = 3147;
        else if (num4 == 30)
          Type = 3149;
        else if (num4 == 31)
          Type = 3148;
        else if (num4 == 32)
          Type = 3896;
      }
      if (Type != 0)
        Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      if (type == 138 && !WorldGen.gen && Main.netMode != 1)
        Projectile.NewProjectile((float) (i1 * 16) + 15.5f, (float) (index1 * 16 + 16), 0.0f, 0.0f, 99, 70, 10f, Main.myPlayer, 0.0f, 0.0f);
      WorldGen.destroyObject = false;
      for (int i2 = i1 - 1; i2 < i1 + 3; ++i2)
      {
        for (int j1 = index1 - 1; j1 < index1 + 3; ++j1)
          WorldGen.TileFrame(i2, j1, false, false);
      }
    }

    public static bool CheckBoulderChest(int i, int j)
    {
      int num1 = (int) Main.tile[i, j].frameX / 18 * -1;
      if (num1 < -1)
        num1 += 2;
      int index = num1 + i;
      int frameY = (int) Main.tile[i, j].frameY;
      while (frameY >= 36)
        frameY -= 36;
      int num2 = j - frameY / 18;
      return TileID.Sets.BasicChest[(int) Main.tile[index, num2 - 1].type] || TileID.Sets.BasicChest[(int) Main.tile[index + 1, num2 - 1].type] || (TileID.Sets.BasicChestFake[(int) Main.tile[index, num2 - 1].type] || TileID.Sets.BasicChestFake[(int) Main.tile[index + 1, num2 - 1].type]) || ((int) Main.tile[index, num2 - 1].type == 88 || (int) Main.tile[index + 1, num2 - 1].type == 88);
    }

    public static void OreRunner(int i, int j, double strength, int steps, ushort type)
    {
      double num1 = strength;
      float num2 = (float) steps;
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      while (num1 > 0.0 && (double) num2 > 0.0)
      {
        if (vector2_1.Y < 0.0 && (double) num2 > 0.0 && (int) type == 59)
          num2 = 0.0f;
        num1 = strength * ((double) num2 / (double) steps);
        --num2;
        int num3 = (int) ((double) vector2_1.X - num1 * 0.5);
        int num4 = (int) ((double) vector2_1.X + num1 * 0.5);
        int num5 = (int) ((double) vector2_1.Y - num1 * 0.5);
        int num6 = (int) ((double) vector2_1.Y + num1 * 0.5);
        if (num3 < 0)
          num3 = 0;
        if (num4 > Main.maxTilesX)
          num4 = Main.maxTilesX;
        if (num5 < 0)
          num5 = 0;
        if (num6 > Main.maxTilesY)
          num6 = Main.maxTilesY;
        for (int index1 = num3; index1 < num4; ++index1)
        {
          for (int index2 = num5; index2 < num6; ++index2)
          {
            if ((double) Math.Abs((float) index1 - (float) vector2_1.X) + (double) Math.Abs((float) index2 - (float) vector2_1.Y) < strength * 0.5 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015) && Main.tile[index1, index2].active() && ((int) Main.tile[index1, index2].type == 0 || (int) Main.tile[index1, index2].type == 1 || ((int) Main.tile[index1, index2].type == 23 || (int) Main.tile[index1, index2].type == 25) || ((int) Main.tile[index1, index2].type == 40 || (int) Main.tile[index1, index2].type == 53 || ((int) Main.tile[index1, index2].type == 57 || (int) Main.tile[index1, index2].type == 59)) || ((int) Main.tile[index1, index2].type == 60 || (int) Main.tile[index1, index2].type == 70 || ((int) Main.tile[index1, index2].type == 109 || (int) Main.tile[index1, index2].type == 112) || ((int) Main.tile[index1, index2].type == 116 || (int) Main.tile[index1, index2].type == 117 || ((int) Main.tile[index1, index2].type == 147 || (int) Main.tile[index1, index2].type == 161))) || ((int) Main.tile[index1, index2].type == 163 || (int) Main.tile[index1, index2].type == 164 || (Main.tileMoss[(int) Main.tile[index1, index2].type] || (int) Main.tile[index1, index2].type == 199) || ((int) Main.tile[index1, index2].type == 200 || (int) Main.tile[index1, index2].type == 203 || (int) Main.tile[index1, index2].type == 234))))
            {
              Main.tile[index1, index2].type = type;
              WorldGen.SquareTileFrame(index1, index2, true);
              if (Main.netMode == 2)
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num7 = (double) ^(float&) local + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local = (float) num7;
        if (vector2_2.X > 1.0)
          vector2_2.X = (__Null) 1.0;
        if (vector2_2.X < -1.0)
          vector2_2.X = (__Null) -1.0;
      }
    }

    public static void SmashAltar(int i, int j)
    {
      if (Main.netMode == 1 || !Main.hardMode || (WorldGen.noTileActions || WorldGen.gen))
        return;
      int num1 = WorldGen.altarCount % 3;
      int num2 = WorldGen.altarCount / 3 + 1;
      float num3 = (float) (Main.maxTilesX / 4200);
      int num4 = 1 - num1;
      float num5 = (num3 * 310f - (float) (85 * num1)) * 0.85f / (float) num2;
      int num6;
      if (num1 == 0)
      {
        if (WorldGen.oreTier1 == -1)
        {
          WorldGen.oreTier1 = 107;
          if (WorldGen.genRand.Next(2) == 0)
            WorldGen.oreTier1 = 221;
        }
        int index = 12;
        if (WorldGen.oreTier1 == 221)
        {
          index += 9;
          num5 *= 0.9f;
        }
        if (Main.netMode == 0)
          Main.NewText(Lang.misc[index].Value, (byte) 50, byte.MaxValue, (byte) 130, false);
        else if (Main.netMode == 2)
          NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[index].Key), new Color(50, (int) byte.MaxValue, 130), -1);
        num6 = WorldGen.oreTier1;
        num5 *= 1.05f;
      }
      else if (num1 == 1)
      {
        if (WorldGen.oreTier2 == -1)
        {
          WorldGen.oreTier2 = 108;
          if (WorldGen.genRand.Next(2) == 0)
            WorldGen.oreTier2 = 222;
        }
        int index = 13;
        if (WorldGen.oreTier2 == 222)
        {
          index += 9;
          num5 *= 0.9f;
        }
        if (Main.netMode == 0)
          Main.NewText(Lang.misc[index].Value, (byte) 50, byte.MaxValue, (byte) 130, false);
        else if (Main.netMode == 2)
          NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[index].Key), new Color(50, (int) byte.MaxValue, 130), -1);
        num6 = WorldGen.oreTier2;
      }
      else
      {
        if (WorldGen.oreTier3 == -1)
        {
          WorldGen.oreTier3 = 111;
          if (WorldGen.genRand.Next(2) == 0)
            WorldGen.oreTier3 = 223;
        }
        int index = 14;
        if (WorldGen.oreTier3 == 223)
        {
          index += 9;
          num5 *= 0.9f;
        }
        if (Main.netMode == 0)
          Main.NewText(Lang.misc[index].Value, (byte) 50, byte.MaxValue, (byte) 130, false);
        else if (Main.netMode == 2)
          NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[index].Key), new Color(50, (int) byte.MaxValue, 130), -1);
        num6 = WorldGen.oreTier3;
      }
      for (int index = 0; (double) index < (double) num5; ++index)
      {
        int i1 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
        double num7 = Main.worldSurface;
        if (num6 == 108 || num6 == 222)
          num7 = Main.rockLayer;
        if (num6 == 111 || num6 == 223)
          num7 = (Main.rockLayer + Main.rockLayer + (double) Main.maxTilesY) / 3.0;
        int j1 = WorldGen.genRand.Next((int) num7, Main.maxTilesY - 150);
        double strength = (double) WorldGen.genRand.Next(5, 9 + num4);
        int steps = WorldGen.genRand.Next(5, 9 + num4);
        int num8 = (int) (ushort) num6;
        WorldGen.OreRunner(i1, j1, strength, steps, (ushort) num8);
      }
      int num9 = WorldGen.genRand.Next(3);
      int num10 = 0;
      while (num9 != 2 && num10++ < 1000)
      {
        int tileX = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
        int tileY = WorldGen.genRand.Next((int) Main.rockLayer + 50, Main.maxTilesY - 300);
        if (Main.tile[tileX, tileY].active() && (int) Main.tile[tileX, tileY].type == 1)
        {
          Main.tile[tileX, tileY].type = num9 != 0 ? (ushort) 117 : (!WorldGen.crimson ? (ushort) 25 : (ushort) 203);
          if (Main.netMode == 2)
          {
            NetMessage.SendTileSquare(-1, tileX, tileY, 1, TileChangeType.None);
            break;
          }
          break;
        }
      }
      if (Main.netMode != 1)
      {
        int num7 = Main.rand.Next(2) + 1;
        for (int index = 0; index < num7; ++index)
          NPC.SpawnOnPlayer((int) Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16), 82);
      }
      ++WorldGen.altarCount;
      AchievementsHelper.NotifyProgressionEvent(6);
    }

    public static void Check3x1(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = (int) Main.tile[i, j].frameX / 18;
      int num2 = 0;
      while (num1 > 2)
      {
        num1 -= 3;
        ++num2;
      }
      int num3 = i - num1;
      int num4 = num2 * 54;
      for (int i1 = num3; i1 < num3 + 3; ++i1)
      {
        int index = j;
        if (Main.tile[i1, index] == null)
          Main.tile[i1, index] = new Tile();
        if (!Main.tile[i1, index].active() || (int) Main.tile[i1, index].type != type || ((int) Main.tile[i1, index].frameX != (i1 - num3) * 18 + num4 || (int) Main.tile[i1, index].frameY != 0))
          flag = true;
        if (Main.tile[i1, index - 1].active() && (TileID.Sets.BasicChest[(int) Main.tile[i1, index - 1].type] || TileID.Sets.BasicChestFake[(int) Main.tile[i1, index - 1].type] || (int) Main.tile[i1, index - 1].type == 88))
          return;
        if (!WorldGen.SolidTileAllowBottomSlope(i1, index + 1))
          flag = true;
      }
      if (!flag)
        return;
      int frameX = (int) Main.tile[i, j].frameX;
      WorldGen.destroyObject = true;
      if (type == 235)
        Item.NewItem(i * 16, j * 16, 32, 32, 1263, 1, false, 0, false, false);
      for (int i1 = num3; i1 < num3 + 3; ++i1)
      {
        int j1 = j;
        if (Main.tile[i1, j1] == null)
          Main.tile[i1, j1] = new Tile();
        if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
          WorldGen.KillTile(i1, j1, false, false, false);
      }
      WorldGen.destroyObject = false;
      for (int i1 = num3 - 1; i1 < num3 + 4; ++i1)
      {
        int j1 = j;
        WorldGen.TileFrame(i1, j1, false, false);
      }
    }

    public static void Check3x2(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag1 = false;
      bool flag2 = false;
      int num1 = j;
      int num2 = 36;
      int num3 = (int) Main.tile[i, j].frameY / num2;
      int num4 = (int) Main.tile[i, j].frameY % num2;
      int index1 = num1 - num4 / 18;
      int num5 = (int) Main.tile[i, j].frameX / 18;
      int num6 = 0;
      while (num5 > 2)
      {
        num5 -= 3;
        ++num6;
      }
      int index2 = i - num5;
      int num7 = num6 * 54;
      if (type == 14 && num6 == 25)
        flag2 = true;
      int j1 = index1 + 2;
      if (flag2)
        --j1;
      for (int i1 = index2; i1 < index2 + 3; ++i1)
      {
        for (int index3 = index1; index3 < j1; ++index3)
        {
          if (Main.tile[i1, index3] == null)
            Main.tile[i1, index3] = new Tile();
          if (!Main.tile[i1, index3].active() || (int) Main.tile[i1, index3].type != type || ((int) Main.tile[i1, index3].frameX != (i1 - index2) * 18 + num7 || (int) Main.tile[i1, index3].frameY != (index3 - index1) * 18 + num3 * 36))
            flag1 = true;
        }
        if (type == 285 || type == 286 || (type == 298 || type == 299) || (type == 310 || type == 339 || type >= 361 && type <= 364))
        {
          if (!WorldGen.SolidTileAllowBottomSlope(i1, j1) && (!Main.tile[i1, j1].nactive() || !Main.tileSolidTop[(int) Main.tile[i1, j1].type] || (int) Main.tile[i1, j1].frameY != 0) && (!Main.tile[i1, j1].active() || !TileID.Sets.Platforms[(int) Main.tile[i1, j1].type]))
            flag1 = true;
        }
        else if (!WorldGen.SolidTileAllowBottomSlope(i1, j1))
          flag1 = true;
      }
      if (type == 187 && (int) Main.tile[index2, index1].frameX >= 756 && ((int) Main.tile[index2, index1].frameX <= 900 && (int) Main.tile[index2, index1 + 2].type != 2) && ((int) Main.tile[index2 + 1, index1 + 2].type != 2 && (int) Main.tile[index2 + 2, index1 + 2].type != 2))
      {
        Main.tile[index2, index1].frameX -= (short) 378;
        Main.tile[index2 + 1, index1].frameX -= (short) 378;
        Main.tile[index2 + 2, index1].frameX -= (short) 378;
        Main.tile[index2, index1 + 1].frameX -= (short) 378;
        Main.tile[index2 + 1, index1 + 1].frameX -= (short) 378;
        Main.tile[index2 + 2, index1 + 1].frameX -= (short) 378;
        Main.tile[index2, index1].type = (ushort) 186;
        Main.tile[index2 + 1, index1].type = (ushort) 186;
        Main.tile[index2 + 2, index1].type = (ushort) 186;
        Main.tile[index2, index1 + 1].type = (ushort) 186;
        Main.tile[index2 + 1, index1 + 1].type = (ushort) 186;
        Main.tile[index2 + 2, index1 + 1].type = (ushort) 186;
      }
      if (!flag1)
        return;
      int frameX = (int) Main.tile[i, j].frameX;
      WorldGen.destroyObject = true;
      int num8 = index1 + 3;
      if (flag2)
      {
        int num9 = num8 - 1;
      }
      for (int i1 = index2; i1 < index2 + 3; ++i1)
      {
        for (int j2 = index1; j2 < index1 + 3; ++j2)
        {
          if (Main.tile[i1, j2] == null)
            Main.tile[i1, j2] = new Tile();
          if ((int) Main.tile[i1, j2].type == type && Main.tile[i1, j2].active())
            WorldGen.KillTile(i1, j2, false, false, false);
        }
      }
      if (type == 14)
      {
        int Type = num6 < 1 || num6 > 3 ? (num6 < 15 || num6 > 20 ? (num6 < 4 || num6 > 7 ? (num6 != 8 ? (num6 != 9 ? (num6 != 10 ? (num6 != 11 ? (num6 != 12 ? (num6 != 13 ? (num6 != 14 ? (num6 != 23 ? (num6 != 21 ? (num6 != 22 ? (num6 != 24 ? (num6 != 25 ? (num6 != 26 ? (num6 != 27 ? (num6 != 28 ? (num6 != 29 ? (num6 != 30 ? (num6 != 31 ? (num6 != 32 ? (num6 != 33 ? (num6 != 34 ? 32 : 3154) : 3155) : 3153) : 2824) : 2743) : 2583) : 677) : 2550) : 2532) : 2259) : 2248) : 1816) : 1794) : 1926) : 1510) : 1460) : 1403) : 1400) : 1397) : 1144) : 917) : 823 + num6) : 1698 + num6) : 637 + num6;
        Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      if (type == 469)
      {
        int Type = 3920;
        Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      else if (type == 114)
        Item.NewItem(i * 16, j * 16, 32, 32, 398, 1, false, 0, false, false);
      else if (type == 26)
      {
        if (!WorldGen.noTileActions && !WorldGen.IsGeneratingHardMode)
          WorldGen.SmashAltar(i, j);
      }
      else if (type == 298)
        Item.NewItem(i * 16, j * 16, 32, 32, 2190, 1, false, 0, false, false);
      else if (type == 299)
        Item.NewItem(i * 16, j * 16, 32, 32, 2191, 1, false, 0, false, false);
      else if (type >= 361 && type <= 364)
        Item.NewItem(i * 16, j * 16, 32, 32, 3073 + type - 361, 1, false, 0, false, false);
      else if (type >= 391 && type <= 394)
        Item.NewItem(i * 16, j * 16, 48, 32, 3254 + type - 391, 1, false, 0, false, false);
      else if (type == 285)
        Item.NewItem(i * 16, j * 16, 32, 32, 2174, 1, false, 0, false, false);
      else if (type == 286)
        Item.NewItem(i * 16, j * 16, 32, 32, 2175, 1, false, 0, false, false);
      else if (type == 310)
        Item.NewItem(i * 16, j * 16, 32, 32, 2207, 1, false, 0, false, false);
      else if (type == 339)
        Item.NewItem(i * 16, j * 16, 32, 32, 2741, 1, false, 0, false, false);
      else if (type == 217)
        Item.NewItem(i * 16, j * 16, 32, 32, 995, 1, false, 0, false, false);
      else if (type == 218)
        Item.NewItem(i * 16, j * 16, 32, 32, 996, 1, false, 0, false, false);
      else if (type == 219)
        Item.NewItem(i * 16, j * 16, 32, 32, 997, 1, false, 0, false, false);
      else if (type == 220)
        Item.NewItem(i * 16, j * 16, 32, 32, 998, 1, false, 0, false, false);
      else if (type == 377)
        Item.NewItem(i * 16, j * 16, 32, 32, 3198, 1, false, 0, false, false);
      else if (type == 228)
        Item.NewItem(i * 16, j * 16, 32, 32, 1120, 1, false, 0, false, false);
      else if (type == 405)
        Item.NewItem(i * 16, j * 16, 32, 32, 3364, 1, false, 0, false, false);
      else if (type == 215)
      {
        if (num6 == 0)
          Item.NewItem(i * 16, j * 16, 32, 32, 966, 1, false, 0, false, false);
        else if (num6 == 6)
          Item.NewItem(i * 16, j * 16, 32, 32, 3723, 1, false, 0, false, false);
        else if (num6 == 7)
          Item.NewItem(i * 16, j * 16, 32, 32, 3724, 1, false, 0, false, false);
        else
          Item.NewItem(i * 16, j * 16, 32, 32, 3046 + num6 - 1, 1, false, 0, false, false);
      }
      else if (type == 244)
        Item.NewItem(i * 16, j * 16, 32, 32, 1449, 1, false, 0, false, false);
      else if (type == 17)
        Item.NewItem(i * 16, j * 16, 32, 32, 33, 1, false, 0, false, false);
      else if (type == 77)
        Item.NewItem(i * 16, j * 16, 32, 32, 221, 1, false, 0, false, false);
      else if (type == 86)
        Item.NewItem(i * 16, j * 16, 32, 32, 332, 1, false, 0, false, false);
      else if (type == 237)
        Item.NewItem(i * 16, j * 16, 32, 32, 1292, 1, false, 0, false, false);
      else if (type == 87)
      {
        int Type = num6 < 1 || num6 > 3 ? (num6 != 4 ? (num6 < 5 || num6 > 7 ? (num6 < 8 || num6 > 10 ? (num6 < 11 || num6 > 20 ? (num6 != 21 ? (num6 != 22 ? (num6 != 23 ? (num6 != 24 ? (num6 != 25 ? (num6 != 26 ? (num6 != 27 ? (num6 != 28 ? (num6 != 29 ? (num6 != 30 ? (num6 != 31 ? 333 : 3916) : 3915) : 3142) : 3143) : 3141) : 2821) : 2671) : 2580) : 2565) : 2548) : 2531) : 2376 + num6 - 11) : 2254 + num6 - 8) : 2245 + num6 - 5) : 919) : 640 + num6;
        Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      else if (type == 88)
      {
        int Type = num6 < 1 || num6 > 3 ? (num6 != 4 ? (num6 < 5 || num6 > 15 ? (num6 != 16 ? (num6 != 17 ? (num6 != 18 ? (num6 != 19 ? (num6 != 20 ? (num6 != 21 ? (num6 != 22 ? (num6 != 23 ? (num6 != 24 ? (num6 != 25 ? (num6 != 26 ? (num6 != 27 ? (num6 != 28 ? (num6 != 29 ? (num6 != 30 ? (num6 != 31 ? 334 : 3914) : 3913) : 3912) : 3911) : 3133) : 3134) : 3132) : 2816) : 2640) : 2639) : 2638) : 2637) : 2577) : 2562) : 2545) : 2529) : 2386 + num6 - 5) : 918) : 646 + num6;
        Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      else if (type == 89)
      {
        int Type = num6 < 1 || num6 > 20 ? (num6 != 21 ? (num6 != 22 ? (num6 != 23 ? (num6 != 24 ? (num6 != 25 ? (num6 != 26 ? (num6 != 27 ? (num6 != 28 ? (num6 != 29 ? (num6 != 30 ? (num6 != 31 ? (num6 != 32 ? (num6 != 33 ? (num6 != 34 ? 335 : 3919) : 3918) : 3151) : 3152) : 3150) : 2823) : 2636) : 2635) : 2634) : 2582) : 858) : 2539) : 2527) : 2521) : 2397 + num6 - 1;
        Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      else if (type == 133)
      {
        if (frameX >= 54)
          Item.NewItem(i * 16, j * 16, 32, 32, 1221, 1, false, 0, false, false);
        else
          Item.NewItem(i * 16, j * 16, 32, 32, 524, 1, false, 0, false, false);
      }
      else if (type == 186)
      {
        if (frameX >= 864)
        {
          if (frameX <= 954)
          {
            Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
            Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
            Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(3) != 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(3) != 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(3) != 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(2) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(2) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(2) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(3) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(3) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(3) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(4) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(4) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(4) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(5) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(20, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(5) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(30, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(5) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 71, WorldGen.genRand.Next(40, 100), false, 0, false, false);
          }
          else if (frameX <= 1062)
          {
            Item.NewItem(i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(10, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(2) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(20, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(3) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(30, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(4) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(40, 100), false, 0, false, false);
            if (WorldGen.genRand.Next(5) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 72, WorldGen.genRand.Next(50, 100), false, 0, false, false);
          }
          else if (frameX <= 1170)
          {
            Item.NewItem(i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(1, 7), false, 0, false, false);
            if (WorldGen.genRand.Next(2) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(2, 7), false, 0, false, false);
            if (WorldGen.genRand.Next(3) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(3, 7), false, 0, false, false);
            if (WorldGen.genRand.Next(4) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(4, 7), false, 0, false, false);
            if (WorldGen.genRand.Next(5) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 73, WorldGen.genRand.Next(5, 7), false, 0, false, false);
          }
        }
      }
      else if (type == 187 && frameX >= 918 && frameX <= 970)
      {
        if (Main.rand.Next(10) == 0)
          Item.NewItem(i * 16, j * 16, 32, 32, 3368, 1, false, 0, false, false);
        else
          Item.NewItem(i * 16, j * 16, 32, 32, 989, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
      for (int i1 = index2 - 1; i1 < index2 + 4; ++i1)
      {
        for (int j2 = index1 - 1; j2 < index1 + 4; ++j2)
          WorldGen.TileFrame(i1, j2, false, false);
      }
    }

    public static void Check3x4(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = i;
      int num2 = j;
      int num3 = 0;
      int num4 = (int) Main.tile[i, j].frameX / 18;
      while (num4 >= 3)
      {
        ++num3;
        num4 -= 3;
      }
      int num5 = num1 - num4;
      int num6 = num2 + (int) Main.tile[i, j].frameY / 18 * -1;
      for (int i1 = num5; i1 < num5 + 3; ++i1)
      {
        for (int index = num6; index < num6 + 4; ++index)
        {
          if (Main.tile[i1, index] == null)
            Main.tile[i1, index] = new Tile();
          if (!Main.tile[i1, index].active() || (int) Main.tile[i1, index].type != type || ((int) Main.tile[i1, index].frameX != num3 * 54 + (i1 - num5) * 18 || (int) Main.tile[i1, index].frameY != (index - num6) * 18))
            flag = true;
        }
        if (Main.tile[i1, num6 + 4] == null)
          Main.tile[i1, num6 + 4] = new Tile();
        if (!WorldGen.SolidTileAllowBottomSlope(i1, num6 + 4))
          flag = true;
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i1 = num5; i1 < num5 + 3; ++i1)
      {
        for (int j1 = num6; j1 < num6 + 4; ++j1)
        {
          if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      if (type == 101)
      {
        int Type = num3 != 1 ? (num3 != 2 ? (num3 != 3 ? (num3 != 4 ? (num3 != 5 ? (num3 != 6 ? (num3 != 7 ? (num3 != 8 ? (num3 != 9 ? (num3 != 10 ? (num3 != 11 ? (num3 != 12 ? (num3 != 13 ? (num3 != 14 ? (num3 != 15 ? (num3 != 16 ? (num3 != 17 ? (num3 < 18 || num3 > 21 ? (num3 != 22 ? (num3 != 23 ? (num3 != 24 ? (num3 != 25 ? (num3 != 26 ? (num3 != 27 ? (num3 != 28 ? (num3 != 29 ? (num3 != 30 ? (num3 != 31 ? (num3 != 32 ? 354 : 3917) : 3166) : 3167) : 3165) : 2817) : 2670) : 2569) : 2554) : 2540) : 2536) : 2233) : 2135 + num3 - 18) : 2031) : 2030) : 2029) : 2028) : 2027) : 2026) : 2025) : 2024) : 2023) : 2022) : 2021) : 2020) : 1512) : 1463) : 1416) : 1415) : 1414;
        Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      else if (type == 102)
        Item.NewItem(i * 16, j * 16, 32, 32, 355, 1, false, 0, false, false);
      else if (type == 463)
        Item.NewItem(i * 16, j * 16, 32, 32, 3813, 1, false, 0, false, false);
      WorldGen.destroyObject = false;
      for (int i1 = num5 - 1; i1 < num5 + 4; ++i1)
      {
        for (int j1 = num6 - 1; j1 < num6 + 4; ++j1)
          WorldGen.TileFrame(i1, j1, false, false);
      }
    }

    public static void Check5x4(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = i;
      int num2 = j;
      int num3 = 0;
      int num4 = (int) Main.tile[i, j].frameX / 18;
      while (num4 >= 5)
      {
        ++num3;
        num4 -= 5;
      }
      int num5 = num1 - num4;
      int num6 = num2 + (int) Main.tile[i, j].frameY / 18 * -1;
      for (int i1 = num5; i1 < num5 + 5; ++i1)
      {
        for (int index = num6; index < num6 + 4; ++index)
        {
          if (Main.tile[i1, index] == null)
            Main.tile[i1, index] = new Tile();
          if (!Main.tile[i1, index].active() || (int) Main.tile[i1, index].type != type || ((int) Main.tile[i1, index].frameX != num3 * 90 + (i1 - num5) * 18 || (int) Main.tile[i1, index].frameY != (index - num6) * 18))
            flag = true;
        }
        if (Main.tile[i1, num6 + 4] == null)
          Main.tile[i1, num6 + 4] = new Tile();
        if (!WorldGen.SolidTileAllowBottomSlope(i1, num6 + 4))
          flag = true;
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i1 = num5; i1 < num5 + 5; ++i1)
      {
        for (int j1 = num6; j1 < num6 + 4; ++j1)
        {
          if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      if (type == 464)
        Item.NewItem(i * 16, j * 16, 32, 32, 3814, 1, false, 0, false, false);
      if (type == 466)
        Item.NewItem(i * 16, j * 16, 32, 32, 3816, 1, false, 0, false, false);
      WorldGen.destroyObject = false;
      for (int i1 = num5 - 1; i1 < num5 + 6; ++i1)
      {
        for (int j1 = num6 - 1; j1 < num6 + 5; ++j1)
          WorldGen.TileFrame(i1, j1, false, false);
      }
    }

    public static void Check6x3(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = i;
      int num2 = j;
      int num3 = num1 + (int) Main.tile[i, j].frameX / 18 * -1;
      int num4 = num2 + (int) Main.tile[i, j].frameY / 18 * -1;
      for (int i1 = num3; i1 < num3 + 6; ++i1)
      {
        for (int index = num4; index < num4 + 3; ++index)
        {
          int num5 = (i1 - num3) * 18;
          if (Main.tile[i1, index] == null)
            Main.tile[i1, index] = new Tile();
          if (!Main.tile[i1, index].active() || (int) Main.tile[i1, index].type != type || ((int) Main.tile[i1, index].frameX != num5 || (int) Main.tile[i1, index].frameY != (index - num4) * 18))
            flag = true;
        }
        if (Main.tile[i1, num4 + 3] == null)
          Main.tile[i1, num4 + 3] = new Tile();
        if (!WorldGen.SolidTileAllowBottomSlope(i1, num4 + 3) && (!Main.tile[i1, num4 + 3].nactive() || !Main.tileSolidTop[(int) Main.tile[i1, num4 + 3].type] || (int) Main.tile[i1, num4 + 3].frameY != 0))
          flag = true;
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i1 = num3; i1 < num3 + 6; ++i1)
      {
        for (int j1 = num4; j1 < num4 + 3; ++j1)
        {
          if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      if (type == 275)
        Item.NewItem(i * 16, j * 16, 32, 32, 2162, 1, false, 0, false, false);
      if (type == 413)
        Item.NewItem(i * 16, j * 16, 32, 32, 3565, 1, false, 0, false, false);
      if (type == 414)
        Item.NewItem(i * 16, j * 16, 32, 32, 3566, 1, false, 0, false, false);
      if (type == 276)
        Item.NewItem(i * 16, j * 16, 32, 32, 2163, 1, false, 0, false, false);
      if (type == 277)
        Item.NewItem(i * 16, j * 16, 32, 32, 2164, 1, false, 0, false, false);
      if (type == 278)
        Item.NewItem(i * 16, j * 16, 32, 32, 2165, 1, false, 0, false, false);
      if (type == 279)
        Item.NewItem(i * 16, j * 16, 32, 32, 2166, 1, false, 0, false, false);
      if (type == 280)
        Item.NewItem(i * 16, j * 16, 32, 32, 2167, 1, false, 0, false, false);
      if (type == 281)
        Item.NewItem(i * 16, j * 16, 32, 32, 2168, 1, false, 0, false, false);
      if (type == 296)
        Item.NewItem(i * 16, j * 16, 32, 32, 2186, 1, false, 0, false, false);
      if (type == 297)
        Item.NewItem(i * 16, j * 16, 32, 32, 2187, 1, false, 0, false, false);
      if (type == 309)
        Item.NewItem(i * 16, j * 16, 32, 32, 2206, 1, false, 0, false, false);
      if (type == 358)
        Item.NewItem(i * 16, j * 16, 32, 32, 3070, 1, false, 0, false, false);
      if (type == 359)
        Item.NewItem(i * 16, j * 16, 32, 32, 3071, 1, false, 0, false, false);
      WorldGen.destroyObject = false;
      for (int i1 = num3 - 1; i1 < num3 + 7; ++i1)
      {
        for (int j1 = num4 - 1; j1 < num4 + 4; ++j1)
          WorldGen.TileFrame(i1, j1, false, false);
      }
    }

    public static void Place6x3(int x, int y, ushort type, int direction = -1, int style = 0)
    {
      if (x < 5 || x > Main.maxTilesX - 5 || (y < 5 || y > Main.maxTilesY - 5))
        return;
      bool flag = true;
      for (int i = x - 3; i < x + 3; ++i)
      {
        for (int index = y - 2; index <= y; ++index)
        {
          if (Main.tile[i, index] == null)
            Main.tile[i, index] = new Tile();
          if (Main.tile[i, index].active())
            flag = false;
        }
        if (Main.tile[i, y + 1] == null)
          Main.tile[i, y + 1] = new Tile();
        if (!WorldGen.SolidTile2(i, y + 1) && (!Main.tile[i, y + 1].nactive() || !Main.tileSolidTop[(int) Main.tile[i, y + 1].type] || (int) Main.tile[i, y + 1].frameY != 0))
          flag = false;
      }
      if (!flag)
        return;
      int num1 = 0;
      for (int index1 = x - 3; index1 < x + 3; ++index1)
      {
        int num2 = 0;
        for (int index2 = y - 2; index2 <= y; ++index2)
        {
          Main.tile[index1, index2].active(true);
          Main.tile[index1, index2].frameY = (short) num2;
          Main.tile[index1, index2].frameX = (short) num1;
          Main.tile[index1, index2].type = type;
          num2 += 18;
        }
        num1 += 18;
      }
    }

    public static void Place4x2(int x, int y, ushort type, int direction = -1, int style = 0)
    {
      if (x < 5 || x > Main.maxTilesX - 5 || (y < 5 || y > Main.maxTilesY - 5))
        return;
      bool flag = true;
      for (int i = x - 1; i < x + 3; ++i)
      {
        for (int index = y - 1; index < y + 1; ++index)
        {
          if (Main.tile[i, index] == null)
            Main.tile[i, index] = new Tile();
          if (Main.tile[i, index].active())
            flag = false;
        }
        if (Main.tile[i, y + 1] == null)
          Main.tile[i, y + 1] = new Tile();
        if (!WorldGen.SolidTile2(i, y + 1))
          flag = false;
      }
      short num1 = 0;
      if (direction == 1)
        num1 = (short) 72;
      int num2 = 36 * style;
      if (!flag)
        return;
      Main.tile[x - 1, y - 1].active(true);
      Main.tile[x - 1, y - 1].frameY = (short) num2;
      Main.tile[x - 1, y - 1].frameX = num1;
      Main.tile[x - 1, y - 1].type = type;
      Main.tile[x, y - 1].active(true);
      Main.tile[x, y - 1].frameY = (short) num2;
      Main.tile[x, y - 1].frameX = (short) (18 + (int) num1);
      Main.tile[x, y - 1].type = type;
      Main.tile[x + 1, y - 1].active(true);
      Main.tile[x + 1, y - 1].frameY = (short) num2;
      Main.tile[x + 1, y - 1].frameX = (short) (36 + (int) num1);
      Main.tile[x + 1, y - 1].type = type;
      Main.tile[x + 2, y - 1].active(true);
      Main.tile[x + 2, y - 1].frameY = (short) num2;
      Main.tile[x + 2, y - 1].frameX = (short) (54 + (int) num1);
      Main.tile[x + 2, y - 1].type = type;
      Main.tile[x - 1, y].active(true);
      Main.tile[x - 1, y].frameY = (short) (num2 + 18);
      Main.tile[x - 1, y].frameX = num1;
      Main.tile[x - 1, y].type = type;
      Main.tile[x, y].active(true);
      Main.tile[x, y].frameY = (short) (num2 + 18);
      Main.tile[x, y].frameX = (short) (18 + (int) num1);
      Main.tile[x, y].type = type;
      Main.tile[x + 1, y].active(true);
      Main.tile[x + 1, y].frameY = (short) (num2 + 18);
      Main.tile[x + 1, y].frameX = (short) (36 + (int) num1);
      Main.tile[x + 1, y].type = type;
      Main.tile[x + 2, y].active(true);
      Main.tile[x + 2, y].frameY = (short) (num2 + 18);
      Main.tile[x + 2, y].frameX = (short) (54 + (int) num1);
      Main.tile[x + 2, y].type = type;
    }

    public static void ShootFromCannon(int x, int y, int angle, int ammo, int Damage, float KnockBack, int owner)
    {
      float num1 = 14f;
      float num2 = 0.0f;
      float num3 = 0.0f;
      int Type = 162;
      if (ammo == 2)
        Type = 281;
      if (ammo == 3)
        Type = 178;
      if (ammo == 4)
      {
        Type = 601;
        num1 = 3f;
      }
      if (ammo == 5)
      {
        Type = 601;
        num1 = 3f;
      }
      int num4 = 0;
      if (ammo == 5)
        num4 = 1;
      if (angle == 0)
      {
        num2 = 10f;
        num3 = 0.0f;
      }
      if (angle == 1)
      {
        num2 = 7.5f;
        num3 = -2.5f;
      }
      if (angle == 2)
      {
        num2 = 5f;
        num3 = -5f;
      }
      if (angle == 3)
      {
        num2 = 2.75f;
        num3 = -6f;
      }
      if (angle == 4)
      {
        num2 = 0.0f;
        num3 = -10f;
      }
      if (angle == 5)
      {
        num2 = -2.75f;
        num3 = -6f;
      }
      if (angle == 6)
      {
        num2 = -5f;
        num3 = -5f;
      }
      if (angle == 7)
      {
        num2 = -7.5f;
        num3 = -2.5f;
      }
      if (angle == 8)
      {
        num2 = -10f;
        num3 = 0.0f;
      }
      Vector2 vector2;
      // ISSUE: explicit reference operation
      ((Vector2) @vector2).\u002Ector((float) ((x + 2) * 16), (float) ((y + 2) * 16));
      float num5 = num2;
      float num6 = num3;
      float num7 = (float) Math.Sqrt((double) num5 * (double) num5 + (double) num6 * (double) num6);
      if (ammo == 4 || ammo == 5)
      {
        if (angle == 4)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local = @vector2.X;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num8 = (double) ^(float&) local + 5.0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local = (float) num8;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num9 = (double) ^(float&) local1 + 5.0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num9;
      }
      float num10 = num1 / num7;
      float SpeedX = num5 * num10;
      float SpeedY = num6 * num10;
      if (Main.myPlayer != owner && Main.netMode == 2 && (ammo == 4 || ammo == 5))
      {
        NetMessage.SendData(108, owner, -1, (NetworkText) null, Damage, KnockBack, (float) x, (float) y, angle, ammo, owner);
      }
      else
      {
        if (Main.netMode == 2)
          owner = Main.myPlayer;
        Projectile.NewProjectile((float) vector2.X, (float) vector2.Y, SpeedX, SpeedY, Type, Damage, KnockBack, owner, (float) num4, 0.0f);
      }
    }

    public static void SwitchCannon(int i, int j)
    {
      int num1 = (int) Main.tile[i, j].frameX / 18;
      while (num1 >= 4)
        num1 -= 4;
      int num2 = (int) Main.tile[i, j].frameY / 18;
      while (num2 >= 3)
        num2 -= 3;
      int num3 = 1;
      if (num1 < 2)
        num3 = -1;
      int index1 = i - num1;
      int index2 = j - num2;
      if (num3 == 1 && (int) Main.tile[index1, index2].frameY <= 52 || num3 == -1 && (int) Main.tile[index1, index2].frameY >= 432)
        return;
      int num4 = num3 * -54;
      for (int index3 = index1; index3 < index1 + 4; ++index3)
      {
        for (int index4 = index2; index4 < index2 + 3; ++index4)
        {
          if (Main.tile[index3, index4] == null)
            Main.tile[index3, index4] = new Tile();
          if (Main.tile[index3, index4].active() && (int) Main.tile[index3, index4].type == 209)
            Main.tile[index3, index4].frameY = (short) ((int) Main.tile[index3, index4].frameY + num4);
        }
      }
      NetMessage.SendTileSquare(-1, index1 + 1, index2 + 1, 4, TileChangeType.None);
    }

    public static void CheckCannon(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = (int) Main.tile[i, j].frameX / 18;
      int num2 = 0;
      while (num1 >= 4)
      {
        ++num2;
        num1 -= 4;
      }
      int num3 = i - num1;
      int num4 = (int) Main.tile[i, j].frameY / 18;
      int num5 = 0;
      while (num4 >= 3)
      {
        num5 += 54;
        num4 -= 3;
      }
      int num6 = j - num4;
      int num7 = 72 * num2;
      for (int i1 = num3; i1 < num3 + 4; ++i1)
      {
        int num8 = num5;
        for (int index = num6; index < num6 + 3; ++index)
        {
          if (Main.tile[i1, index] == null)
            Main.tile[i1, index] = new Tile();
          if (!Main.tile[i1, index].active() || (int) Main.tile[i1, index].type != type || ((int) Main.tile[i1, index].frameX != num7 || (int) Main.tile[i1, index].frameY != num8))
            flag = true;
          num8 += 18;
        }
        if (Main.tile[i1, num6 + 3] == null)
          Main.tile[i1, num6 + 3] = new Tile();
        if (!WorldGen.SolidTileAllowBottomSlope(i1, num6 + 3) && i1 != num3 && i1 != num3 + 3)
          flag = true;
        num7 += 18;
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i1 = num3; i1 < num3 + 4; ++i1)
      {
        for (int j1 = num6; j1 < num6 + 3; ++j1)
        {
          if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      int Type = 928;
      switch (num2)
      {
        case 1:
          Type = 1337;
          break;
        case 2:
          Type = 3369;
          break;
        case 3:
        case 4:
          Type = 3664;
          break;
      }
      Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      WorldGen.destroyObject = false;
      for (int i1 = num3; i1 < num3 + 4; ++i1)
      {
        for (int j1 = num6; j1 < num6 + 3; ++j1)
          WorldGen.TileFrame(i1, j1, false, false);
      }
    }

    public static void PlaceCannon(int x, int y, ushort type, int style = 0)
    {
      if (x < 5 || x > Main.maxTilesX - 5 || (y < 5 || y > Main.maxTilesY - 5))
        return;
      bool flag = true;
      for (int i = x - 1; i < x + 3; ++i)
      {
        for (int index = y - 2; index < y + 1; ++index)
        {
          if (Main.tile[i, index] == null)
            Main.tile[i, index] = new Tile();
          if (Main.tile[i, index].active())
            flag = false;
        }
        if (Main.tile[i, y + 1] == null)
          Main.tile[i, y + 1] = new Tile();
        if (!WorldGen.SolidTile2(i, y + 1) && i != x - 1 && i != x + 2)
          flag = false;
      }
      int num1 = 72 * style;
      int num2 = 0;
      if (!flag)
        return;
      Main.tile[x - 1, y - 2].active(true);
      Main.tile[x - 1, y - 2].frameY = (short) num2;
      Main.tile[x - 1, y - 2].frameX = (short) num1;
      Main.tile[x - 1, y - 2].type = type;
      Main.tile[x, y - 2].active(true);
      Main.tile[x, y - 2].frameY = (short) num2;
      Main.tile[x, y - 2].frameX = (short) (18 + num1);
      Main.tile[x, y - 2].type = type;
      Main.tile[x + 1, y - 2].active(true);
      Main.tile[x + 1, y - 2].frameY = (short) num2;
      Main.tile[x + 1, y - 2].frameX = (short) (36 + num1);
      Main.tile[x + 1, y - 2].type = type;
      Main.tile[x + 2, y - 2].active(true);
      Main.tile[x + 2, y - 2].frameY = (short) num2;
      Main.tile[x + 2, y - 2].frameX = (short) (54 + num1);
      Main.tile[x + 2, y - 2].type = type;
      Main.tile[x - 1, y - 1].active(true);
      Main.tile[x - 1, y - 1].frameY = (short) (num2 + 18);
      Main.tile[x - 1, y - 1].frameX = (short) num1;
      Main.tile[x - 1, y - 1].type = type;
      Main.tile[x, y - 1].active(true);
      Main.tile[x, y - 1].frameY = (short) (num2 + 18);
      Main.tile[x, y - 1].frameX = (short) (18 + num1);
      Main.tile[x, y - 1].type = type;
      Main.tile[x + 1, y - 1].active(true);
      Main.tile[x + 1, y - 1].frameY = (short) (num2 + 18);
      Main.tile[x + 1, y - 1].frameX = (short) (36 + num1);
      Main.tile[x + 1, y - 1].type = type;
      Main.tile[x + 2, y - 1].active(true);
      Main.tile[x + 2, y - 1].frameY = (short) (num2 + 18);
      Main.tile[x + 2, y - 1].frameX = (short) (54 + num1);
      Main.tile[x + 2, y - 1].type = type;
      Main.tile[x - 1, y].active(true);
      Main.tile[x - 1, y].frameY = (short) (num2 + 36);
      Main.tile[x - 1, y].frameX = (short) num1;
      Main.tile[x - 1, y].type = type;
      Main.tile[x, y].active(true);
      Main.tile[x, y].frameY = (short) (num2 + 36);
      Main.tile[x, y].frameX = (short) (18 + num1);
      Main.tile[x, y].type = type;
      Main.tile[x + 1, y].active(true);
      Main.tile[x + 1, y].frameY = (short) (num2 + 36);
      Main.tile[x + 1, y].frameX = (short) (36 + num1);
      Main.tile[x + 1, y].type = type;
      Main.tile[x + 2, y].active(true);
      Main.tile[x + 2, y].frameY = (short) (num2 + 36);
      Main.tile[x + 2, y].frameX = (short) (54 + num1);
      Main.tile[x + 2, y].type = type;
    }

    public static void SwitchMB(int i, int j)
    {
      int num1 = (int) Main.tile[i, j].frameY / 18;
      while (num1 >= 2)
        num1 -= 2;
      int num2 = (int) Main.tile[i, j].frameX / 18;
      if (num2 >= 2)
        num2 -= 2;
      int num3 = i - num2;
      int num4 = j - num1;
      for (int index1 = num3; index1 < num3 + 2; ++index1)
      {
        for (int index2 = num4; index2 < num4 + 2; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (Main.tile[index1, index2].active() && ((int) Main.tile[index1, index2].type == 139 || (int) Main.tile[index1, index2].type == 35))
          {
            if ((int) Main.tile[index1, index2].frameX < 36)
              Main.tile[index1, index2].frameX += (short) 36;
            else
              Main.tile[index1, index2].frameX -= (short) 36;
          }
        }
      }
      if (Wiring.running)
      {
        Wiring.SkipWire(num3, num4);
        Wiring.SkipWire(num3 + 1, num4);
        Wiring.SkipWire(num3, num4 + 1);
        Wiring.SkipWire(num3 + 1, num4 + 1);
      }
      NetMessage.SendTileSquare(-1, num3, num4, 3, TileChangeType.None);
    }

    public static void SwitchMonolith(int i, int j)
    {
      int num1 = (int) Main.tile[i, j].frameX / 18;
      while (num1 >= 2)
        num1 -= 2;
      int num2 = (int) Main.tile[i, j].frameY / 18;
      if (num2 >= 3)
        num2 -= 3;
      int num3 = i - num1;
      int y = j - num2;
      for (int index1 = num3; index1 < num3 + 2; ++index1)
      {
        for (int index2 = y; index2 < y + 3; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 410)
          {
            if ((int) Main.tile[index1, index2].frameY < 56)
              Main.tile[index1, index2].frameY += (short) 56;
            else
              Main.tile[index1, index2].frameY -= (short) 56;
          }
        }
      }
      if (Wiring.running)
      {
        Wiring.SkipWire(num3, y);
        Wiring.SkipWire(num3, y + 1);
        Wiring.SkipWire(num3, y + 2);
        Wiring.SkipWire(num3 + 1, y);
        Wiring.SkipWire(num3 + 1, y + 1);
        Wiring.SkipWire(num3 + 1, y + 2);
      }
      NetMessage.SendTileSquare(-1, num3, y + 1, 3, TileChangeType.None);
    }

    public static void SwitchFountain(int i, int j)
    {
      int num1 = (int) Main.tile[i, j].frameX / 18;
      while (num1 >= 2)
        num1 -= 2;
      int num2 = (int) Main.tile[i, j].frameY / 18;
      if (num2 >= 4)
        num2 -= 4;
      int num3 = i - num1;
      int y = j - num2;
      for (int index1 = num3; index1 < num3 + 2; ++index1)
      {
        for (int index2 = y; index2 < y + 4; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 207)
          {
            if ((int) Main.tile[index1, index2].frameY < 72)
              Main.tile[index1, index2].frameY += (short) 72;
            else
              Main.tile[index1, index2].frameY -= (short) 72;
          }
        }
      }
      if (Wiring.running)
      {
        Wiring.SkipWire(num3, y);
        Wiring.SkipWire(num3, y + 1);
        Wiring.SkipWire(num3, y + 2);
        Wiring.SkipWire(num3, y + 3);
        Wiring.SkipWire(num3 + 1, y);
        Wiring.SkipWire(num3 + 1, y + 1);
        Wiring.SkipWire(num3 + 1, y + 2);
        Wiring.SkipWire(num3 + 1, y + 3);
      }
      NetMessage.SendTileSquare(-1, num3, y + 1, 4, TileChangeType.None);
    }

    public static void CheckMB(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = 0;
      int num2 = (int) Main.tile[i, j].frameY / 18;
      while (num2 >= 2)
      {
        ++num1;
        num2 -= 2;
      }
      int num3 = (int) Main.tile[i, j].frameX / 18;
      int num4 = 0;
      if (num3 >= 2)
      {
        num3 -= 2;
        ++num4;
      }
      int num5 = i - num3;
      int num6 = j - num2;
      for (int index1 = num5; index1 < num5 + 2; ++index1)
      {
        for (int index2 = num6; index2 < num6 + 2; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (!Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].type != type || ((int) Main.tile[index1, index2].frameX != (index1 - num5) * 18 + num4 * 36 || (int) Main.tile[index1, index2].frameY != (index2 - num6) * 18 + num1 * 36))
            flag = true;
        }
        if (!Main.tile[index1, num6 + 2].nactive())
          flag = true;
        else if (!Main.tileSolid[(int) Main.tile[index1, num6 + 2].type] && !Main.tileTable[(int) Main.tile[index1, num6 + 2].type])
          flag = true;
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i1 = num5; i1 < num5 + 2; ++i1)
      {
        for (int j1 = num6; j1 < num6 + 3; ++j1)
        {
          if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      if (type == 35)
        Item.NewItem(i * 16, j * 16, 32, 32, 1813, 1, false, 0, false, false);
      else if (num1 == 28)
        Item.NewItem(i * 16, j * 16, 32, 32, 1963, 1, false, 0, false, false);
      else if (num1 == 29)
        Item.NewItem(i * 16, j * 16, 32, 32, 1964, 1, false, 0, false, false);
      else if (num1 == 30)
        Item.NewItem(i * 16, j * 16, 32, 32, 1965, 1, false, 0, false, false);
      else if (num1 == 31)
        Item.NewItem(i * 16, j * 16, 32, 32, 2742, 1, false, 0, false, false);
      else if (num1 == 32)
        Item.NewItem(i * 16, j * 16, 32, 32, 3044, 1, false, 0, false, false);
      else if (num1 == 33)
        Item.NewItem(i * 16, j * 16, 32, 32, 3235, 1, false, 0, false, false);
      else if (num1 == 34)
        Item.NewItem(i * 16, j * 16, 32, 32, 3236, 1, false, 0, false, false);
      else if (num1 == 35)
        Item.NewItem(i * 16, j * 16, 32, 32, 3237, 1, false, 0, false, false);
      else if (num1 == 36)
        Item.NewItem(i * 16, j * 16, 32, 32, 3370, 1, false, 0, false, false);
      else if (num1 == 37)
        Item.NewItem(i * 16, j * 16, 32, 32, 3371, 1, false, 0, false, false);
      else if (num1 == 38)
        Item.NewItem(i * 16, j * 16, 32, 32, 3796, 1, false, 0, false, false);
      else if (num1 == 39)
        Item.NewItem(i * 16, j * 16, 32, 32, 3869, 1, false, 0, false, false);
      else if (num1 >= 13)
        Item.NewItem(i * 16, j * 16, 32, 32, 1596 + num1 - 13, 1, false, 0, false, false);
      else
        Item.NewItem(i * 16, j * 16, 32, 32, 562 + num1, 1, false, 0, false, false);
      for (int i1 = num5 - 1; i1 < num5 + 3; ++i1)
      {
        for (int j1 = num6 - 1; j1 < num6 + 3; ++j1)
          WorldGen.TileFrame(i1, j1, false, false);
      }
      WorldGen.destroyObject = false;
    }

    public static void PlaceMB(int X, int y, ushort type, int style)
    {
      int index1 = X + 1;
      if (index1 < 5 || index1 > Main.maxTilesX - 5 || (y < 5 || y > Main.maxTilesY - 5))
        return;
      bool flag = true;
      for (int index2 = index1 - 1; index2 < index1 + 1; ++index2)
      {
        for (int index3 = y - 1; index3 < y + 1; ++index3)
        {
          if (Main.tile[index2, index3] == null)
            Main.tile[index2, index3] = new Tile();
          if (Main.tile[index2, index3].active())
            flag = false;
        }
        if (Main.tile[index2, y + 1] == null)
          Main.tile[index2, y + 1] = new Tile();
        if (!Main.tile[index2, y + 1].active() || Main.tile[index2, y + 1].halfBrick() || !Main.tileSolid[(int) Main.tile[index2, y + 1].type] && !Main.tileTable[(int) Main.tile[index2, y + 1].type])
          flag = false;
      }
      if (!flag)
        return;
      Main.tile[index1 - 1, y - 1].active(true);
      Main.tile[index1 - 1, y - 1].frameY = (short) (style * 36);
      Main.tile[index1 - 1, y - 1].frameX = (short) 0;
      Main.tile[index1 - 1, y - 1].type = type;
      Main.tile[index1, y - 1].active(true);
      Main.tile[index1, y - 1].frameY = (short) (style * 36);
      Main.tile[index1, y - 1].frameX = (short) 18;
      Main.tile[index1, y - 1].type = type;
      Main.tile[index1 - 1, y].active(true);
      Main.tile[index1 - 1, y].frameY = (short) (style * 36 + 18);
      Main.tile[index1 - 1, y].frameX = (short) 0;
      Main.tile[index1 - 1, y].type = type;
      Main.tile[index1, y].active(true);
      Main.tile[index1, y].frameY = (short) (style * 36 + 18);
      Main.tile[index1, y].frameX = (short) 18;
      Main.tile[index1, y].type = type;
    }

    public static void Place2x2(int x, int y, ushort type, int style)
    {
      if ((int) type == 95 || (int) type == 126)
        ++y;
      if (x < 5 || x > Main.maxTilesX - 5 || (y < 5 || y > Main.maxTilesY - 5))
        return;
      if ((int) type == 172)
      {
        if (!WorldGen.CanPlaceSink(x, y, type, style))
          return;
      }
      else
      {
        for (int i = x - 1; i < x + 1; ++i)
        {
          for (int j = y - 1; j < y + 1; ++j)
          {
            Tile tileSafely = Framing.GetTileSafely(i, j);
            if (tileSafely.active() || (int) type == 98 && (int) tileSafely.liquid > 0)
              return;
          }
          if ((int) type == 95 || (int) type == 126)
          {
            Tile tileSafely = Framing.GetTileSafely(i, y - 2);
            if (!tileSafely.nactive() || !Main.tileSolid[(int) tileSafely.type] || Main.tileSolidTop[(int) tileSafely.type])
              return;
          }
          else if ((int) type != 132)
          {
            Tile tileSafely = Framing.GetTileSafely(i, y + 1);
            if (!tileSafely.nactive() || !WorldGen.SolidTile2(tileSafely) && !Main.tileTable[(int) tileSafely.type])
              return;
          }
        }
      }
      if ((int) type == 132)
      {
        bool flag = true;
        if (Main.tile[x - 1, y + 1] == null)
          Main.tile[x - 1, y + 1] = new Tile();
        if (Main.tile[x, y + 1] == null)
          Main.tile[x, y + 1] = new Tile();
        if (!Main.tile[x - 1, y + 1].nactive() || !WorldGen.SolidTile2(x - 1, y + 1) && !Main.tileTable[(int) Main.tile[x - 1, y + 1].type])
          flag = false;
        if (!Main.tile[x, y + 1].nactive() || !WorldGen.SolidTile2(x, y + 1) && !Main.tileTable[(int) Main.tile[x, y + 1].type])
          flag = false;
        if (!flag && ((int) Main.tile[x - 1, y - 1].wall < 1 || (int) Main.tile[x, y - 1].wall < 1 || ((int) Main.tile[x - 1, y].wall < 1 || (int) Main.tile[x - 1, y].wall < 1)))
          return;
      }
      --x;
      --y;
      int num = (int) type == 172 ? 38 : 36;
      for (int index1 = 0; index1 < 2; ++index1)
      {
        for (int index2 = 0; index2 < 2; ++index2)
        {
          Tile tile = Main.tile[x + index1, y + index2];
          tile.active(true);
          tile.frameX = (short) (index1 * 18);
          tile.frameY = (short) (style * num + index2 * 18);
          tile.type = type;
        }
      }
    }

    public static bool PlaceObject(int x, int y, int type, bool mute = false, int style = 0, int alternate = 0, int random = -1, int direction = -1)
    {
      TileObject objectData;
      if (type >= 470 || !TileObject.CanPlace(x, y, type, style, direction, out objectData, false))
        return false;
      objectData.random = random;
      if (TileObject.Place(objectData) && !mute)
      {
        WorldGen.SquareTileFrame(x, y, true);
        Main.PlaySound(0, x * 16, y * 16, 1, 1f, 0.0f);
      }
      return false;
    }

    public static bool ShiftTrapdoor(int x, int y, bool playerAbove, int onlyCloseOrOpen = -1)
    {
      Tile tileSafely1 = Framing.GetTileSafely(x, y);
      if ((int) tileSafely1.type == 386 && onlyCloseOrOpen != 1)
      {
        Point topLeftAndStyles = WorldGen.GetTopLeftAndStyles(ref x, ref y, 2, 2, 18, 18);
        if (topLeftAndStyles.X == null)
        {
          if (Main.netMode != 1 && Wiring.running)
          {
            Wiring.SkipWire(x, y);
            Wiring.SkipWire(x, y + 1);
            Wiring.SkipWire(x + 1, y);
            Wiring.SkipWire(x + 1, y + 1);
          }
          if (!Collision.EmptyTile(x, y + 1, true) || !Collision.EmptyTile(x + 1, y + 1, true))
            return false;
          Main.PlaySound(8, x * 16 + 16, y * 16 + 16, 1, 1f, 0.0f);
          for (int index = 0; index < 2; ++index)
            Framing.GetTileSafely(x + index, y).ClearTile();
          for (int index = 0; index < 2; ++index)
          {
            Tile tileSafely2 = Framing.GetTileSafely(x + index, y + 1);
            tileSafely2.type = (ushort) 387;
            tileSafely2.frameX = (short) (index * 18);
            tileSafely2.frameY = (short) (topLeftAndStyles.Y * 18);
          }
          for (int index1 = -1; index1 < 3; ++index1)
          {
            for (int index2 = 0; index2 < 3; ++index2)
              WorldGen.TileFrame(x + index1, y + index2, false, false);
          }
          return true;
        }
        if (topLeftAndStyles.X == 1)
        {
          if (Main.netMode != 1 && Wiring.running)
          {
            Wiring.SkipWire(x, y - 1);
            Wiring.SkipWire(x, y);
            Wiring.SkipWire(x + 1, y - 1);
            Wiring.SkipWire(x + 1, y);
          }
          if (!Collision.EmptyTile(x, y, true) || !Collision.EmptyTile(x + 1, y, true))
            return false;
          Main.PlaySound(8, x * 16 + 16, y * 16, 1, 1f, 0.0f);
          for (int index = 0; index < 2; ++index)
            Framing.GetTileSafely(x + index, y + 1).ClearTile();
          for (int index = 0; index < 2; ++index)
          {
            Tile tileSafely2 = Framing.GetTileSafely(x + index, y);
            tileSafely2.type = (ushort) 387;
            tileSafely2.frameX = (short) (index * 18);
            tileSafely2.frameY = (short) (topLeftAndStyles.Y * 18);
          }
          for (int index1 = -1; index1 < 3; ++index1)
          {
            for (int index2 = -1; index2 < 2; ++index2)
              WorldGen.TileFrame(x + index1, y + index2, false, false);
          }
          return true;
        }
      }
      if ((int) tileSafely1.type == 387 && onlyCloseOrOpen != 0)
      {
        WorldGen.GetTopLeftAndStyles(ref x, ref y, 2, 1, 18, 18);
        int directionInt = playerAbove.ToDirectionInt();
        for (int index = 0; index < 2; ++index)
        {
          Tile tileSafely2 = Framing.GetTileSafely(x + index, y + directionInt);
          if (tileSafely2.active() && !Main.tileCut[(int) tileSafely2.type])
            return false;
        }
        if (Main.netMode != 1 && Wiring.running)
        {
          Wiring.SkipWire(x, y);
          Wiring.SkipWire(x, y + directionInt);
          Wiring.SkipWire(x + 1, y);
          Wiring.SkipWire(x + 1, y + directionInt);
        }
        Main.PlaySound(8, x * 16 + 16, y * 16, 1, 1f, 0.0f);
        for (int index = 0; index < 2; ++index)
        {
          Tile tileSafely2 = Framing.GetTileSafely(x + index, y + directionInt);
          if (tileSafely2.active() && Main.tileCut[(int) tileSafely2.type])
            WorldGen.KillTile(x + index, y + directionInt, false, false, false);
        }
        for (int index1 = 0; index1 < 2; ++index1)
        {
          byte color = Framing.GetTileSafely(x + index1, y).color();
          for (int index2 = 0; index2 < 2; ++index2)
          {
            Tile tileSafely2 = Framing.GetTileSafely(x + index1, y + index2 - (!playerAbove).ToInt());
            tileSafely2.type = (ushort) 386;
            tileSafely2.frameX = (short) (index1 * 18 + playerAbove.ToInt() * 36);
            tileSafely2.frameY = (short) (index2 * 18);
            tileSafely2.color(color);
            tileSafely2.active(true);
          }
        }
        for (int index1 = -1; index1 < 3; ++index1)
        {
          for (int index2 = -1; index2 < 3; ++index2)
            WorldGen.TileFrame(x + index1, y + index2 - (!playerAbove).ToInt() * 2, false, false);
        }
        return true;
      }
      Main.PlaySound(9, x * 16, y * 16, 1, 1f, 0.0f);
      return false;
    }

    public static void CheckTrapDoor(int x, int y, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int w = 0;
      int h = 0;
      Point point = (Point) null;
      if (type == 387)
      {
        w = 2;
        h = 1;
        point = WorldGen.GetTopLeftAndStyles(ref x, ref y, w, h, 18, 18);
        flag = flag || !WorldGen.CheckTileFrames(type, x, y, w, h, (int) point.X, 18, (int) point.Y, 18) || !WorldGen.CheckTileAnchors(x, y, w, h, 1, AnchorType.SolidTile);
      }
      if (type == 386)
      {
        w = 2;
        h = 2;
        point = WorldGen.GetTopLeftAndStyles(ref x, ref y, w, h, 18, 18);
        flag = flag || !WorldGen.CheckTileFrames(type, x, y, w, h, (int) point.X, 18, (int) point.Y, 18);
        if (point.X == null)
          flag = flag || !WorldGen.CheckTileAnchors(x, y + 1, w, 1, 1, AnchorType.SolidTile);
        else if (point.X == 1)
          flag = flag || !WorldGen.CheckTileAnchors(x, y, w, 1, 1, AnchorType.SolidTile);
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i = x; i < x + w; ++i)
      {
        for (int j = y; j < y + h; ++j)
          WorldGen.KillTile(i, j, false, false, false);
      }
      int Type = 3239;
      if (point.Y == null)
        Type = 3239;
      Item.NewItem(x * 16, y * 16, w * 16, h * 16, Type, 1, false, 0, false, false);
      for (int i = x - 1; i < x + w + 1; ++i)
      {
        for (int j = y - 1; j < y + h + 1; ++j)
          WorldGen.TileFrame(i, j, false, false);
      }
      WorldGen.destroyObject = false;
    }

    public static void CheckTallGate(int x, int y, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      Tile tileSafely1 = Framing.GetTileSafely(x, y);
      Point point;
      // ISSUE: explicit reference operation
      ((Point) @point).\u002Ector((int) tileSafely1.frameX / 18, 0);
      TileObjectData tileData = TileObjectData.GetTileData(type, (int) point.X, 0);
      point.Y = (__Null) ((int) tileSafely1.frameY / tileData.CoordinateFullHeight);
      int width = tileData.Width;
      int height = tileData.Height;
      int index1 = 0;
      for (int index2 = (int) tileSafely1.frameY % tileData.CoordinateFullHeight; index1 < height && index2 - tileData.CoordinateHeights[index1] >= 0; ++index1)
        index2 -= tileData.CoordinateHeights[index1];
      int coordinateFullHeight = tileData.CoordinateFullHeight;
      y -= index1;
      int num = point.Y * tileData.CoordinateFullHeight;
      for (int index2 = 0; index2 < height; ++index2)
      {
        Tile tileSafely2 = Framing.GetTileSafely(x, y + index2);
        if ((int) tileSafely2.frameX != point.X * tileData.CoordinateFullWidth || (int) tileSafely2.frameY != num)
        {
          flag = true;
          break;
        }
        num += tileData.CoordinateHeights[index2] + tileData.CoordinatePadding;
      }
      if (!flag && WorldGen.CheckTileAnchors(x, y, width, height, 2, AnchorType.SolidTile))
        return;
      WorldGen.destroyObject = true;
      for (int i = x; i < x + width; ++i)
      {
        for (int j = y; j < y + height; ++j)
          WorldGen.KillTile(i, j, false, false, false);
      }
      int Type = 3240;
      if (point.Y == null)
        Type = 3240;
      Item.NewItem(x * 16, y * 16, width * 16, height * 16, Type, 1, false, 0, false, false);
      for (int i = x - 1; i < x + width + 1; ++i)
      {
        for (int j = y - 1; j < y + height + 1; ++j)
          WorldGen.TileFrame(i, j, false, false);
      }
      WorldGen.destroyObject = false;
    }

    public static bool ShiftTallGate(int x, int y, bool closing)
    {
      ushort num1 = closing ? (ushort) 388 : (ushort) 389;
      ushort num2 = closing ? (ushort) 389 : (ushort) 388;
      Tile tileSafely = Framing.GetTileSafely(x, y);
      if ((int) tileSafely.type != (int) num2)
        return false;
      Point point;
      // ISSUE: explicit reference operation
      ((Point) @point).\u002Ector((int) tileSafely.frameX / 18, 0);
      TileObjectData tileData = TileObjectData.GetTileData(388, (int) point.X, 0);
      point.Y = (__Null) ((int) tileSafely.frameY / tileData.CoordinateFullHeight);
      int width = tileData.Width;
      int height = tileData.Height;
      int index1 = 0;
      for (int index2 = (int) tileSafely.frameY % tileData.CoordinateFullHeight; index1 < height && index2 - tileData.CoordinateHeights[index1] >= 0; ++index1)
        index2 -= tileData.CoordinateHeights[index1];
      int coordinateFullHeight = tileData.CoordinateFullHeight;
      y -= index1;
      if (Main.netMode != 1 && Wiring.running)
      {
        for (int index2 = 0; index2 < height; ++index2)
          Wiring.SkipWire(x, y + index2);
      }
      for (int index2 = 0; index2 < height; ++index2)
      {
        if (!Collision.EmptyTile(x, y + index2, true))
          return false;
      }
      Main.PlaySound(8, x * 16 + 16, y * 16 + 16, 1, 1f, 0.0f);
      for (int index2 = 0; index2 < height; ++index2)
        Framing.GetTileSafely(x, y + index2).type = num1;
      for (int index2 = -1; index2 < 2; ++index2)
      {
        for (int index3 = -1; index3 < height + 1; ++index3)
          WorldGen.TileFrame(x + index2, y + index3, false, false);
      }
      return true;
    }

    public static Point GetTopLeftAndStyles(ref int x, ref int y, int w, int h, int frameXinc, int frameYinc)
    {
      Tile tileSafely = Framing.GetTileSafely(x, y);
      Point point = new Point((int) tileSafely.frameX / (w * frameXinc), (int) tileSafely.frameY / (h * frameYinc));
      if (frameXinc != 0)
        x = x - (int) tileSafely.frameX / frameXinc % w;
      if (frameYinc == 0)
        return point;
      y = y - (int) tileSafely.frameY / frameYinc % h;
      return point;
    }

    public static bool CheckTileFrames(int type, int sx, int sy, int w, int h, int styleX, int frameXinc, int styleY, int frameYinc)
    {
      for (int index1 = 0; index1 < w; ++index1)
      {
        for (int index2 = 0; index2 < h; ++index2)
        {
          Tile tileSafely = Framing.GetTileSafely(sx + index1, sy + index2);
          if (!tileSafely.active() || (int) tileSafely.type != type || ((int) tileSafely.frameX != styleX * w * frameXinc + index1 * frameXinc || (int) tileSafely.frameY != styleY * h * frameYinc + index2 * frameYinc))
            return false;
        }
      }
      return true;
    }

    public static bool CheckTileAnchors(int sx, int sy, int w, int h, int mode, AnchorType anchor)
    {
      if ((mode & 1) == 1)
      {
        for (int j = sy; j < sy + h; ++j)
        {
          if (!WorldGen.AnchorValid(Framing.GetTileSafely(sx - 1, j), anchor) || !WorldGen.AnchorValid(Framing.GetTileSafely(sx + w, j), anchor))
            return false;
        }
      }
      if ((mode & 2) == 2)
      {
        for (int i = sx; i < sx + w; ++i)
        {
          if (!WorldGen.AnchorValid(Framing.GetTileSafely(i, sy - 1), anchor) || !WorldGen.AnchorValid(Framing.GetTileSafely(i, sy + h), anchor))
            return false;
        }
      }
      return true;
    }

    public static bool AnchorValid(Tile tileCache, AnchorType anchor)
    {
      bool flag = false;
      if (tileCache.nactive())
      {
        if ((anchor & AnchorType.SolidTile) == AnchorType.SolidTile && Main.tileSolid[(int) tileCache.type] && (!Main.tileSolidTop[(int) tileCache.type] && !Main.tileNoAttach[(int) tileCache.type]) && tileCache.blockType() == 0)
          flag = true;
        if ((anchor & AnchorType.SolidBottom) == AnchorType.SolidBottom && (Main.tileSolid[(int) tileCache.type] && (!Main.tileSolidTop[(int) tileCache.type] || TileID.Sets.Platforms[(int) tileCache.type] && (tileCache.halfBrick() || tileCache.topSlope())) || (tileCache.topSlope() || tileCache.halfBrick())) && (!TileID.Sets.NotReallySolid[(int) tileCache.type] && !tileCache.bottomSlope()))
          flag = true;
        if (!flag && ((anchor & AnchorType.SolidWithTop) == AnchorType.SolidWithTop || (anchor & AnchorType.Table) == AnchorType.Table))
        {
          if (TileID.Sets.Platforms[(int) tileCache.type])
          {
            int num = (int) tileCache.frameX / TileObjectData.PlatformFrameWidth();
            if (!tileCache.halfBrick() && num >= 0 && num <= 7 || (num >= 12 && num <= 16 || num >= 25 && num <= 26))
              flag = true;
          }
          else if (Main.tileSolid[(int) tileCache.type] && Main.tileSolidTop[(int) tileCache.type])
            flag = true;
        }
        if (!flag && (anchor & AnchorType.Table) == AnchorType.Table && (!TileID.Sets.Platforms[(int) tileCache.type] && Main.tileTable[(int) tileCache.type]) && tileCache.blockType() == 0)
          flag = true;
        if (!flag && (anchor & AnchorType.SolidSide) == AnchorType.SolidSide && (Main.tileSolid[(int) tileCache.type] && !Main.tileSolidTop[(int) tileCache.type]) && (uint) (tileCache.blockType() - 4) <= 1U)
          flag = true;
      }
      else if (!flag && (anchor & AnchorType.EmptyTile) == AnchorType.EmptyTile)
        flag = true;
      return flag;
    }

    public static bool CanPlaceSink(int x, int y, ushort type, int style)
    {
      if (x < 5 || x > Main.maxTilesX - 5 || (y < 5 || y > Main.maxTilesY - 5))
        return false;
      bool flag = true;
      --x;
      --y;
      for (int index1 = 0; index1 < 2; ++index1)
      {
        for (int index2 = 0; index2 < 2; ++index2)
        {
          if (Framing.GetTileSafely(x + index1, y + index2).active())
            flag = false;
        }
        Tile tileSafely = Framing.GetTileSafely(x + index1, y + 2);
        if (!tileSafely.nactive() || !WorldGen.SolidTile(tileSafely))
          flag = false;
      }
      return flag;
    }

    public static void Place3x4(int x, int y, ushort type, int style)
    {
      if (x < 5 || x > Main.maxTilesX - 5 || (y < 5 || y > Main.maxTilesY - 5))
        return;
      bool flag = true;
      for (int i = x - 1; i < x + 2; ++i)
      {
        for (int index = y - 3; index < y + 1; ++index)
        {
          if (Main.tile[i, index] == null)
            Main.tile[i, index] = new Tile();
          if (Main.tile[i, index].active())
            flag = false;
        }
        if (Main.tile[i, y + 1] == null)
          Main.tile[i, y + 1] = new Tile();
        if (!WorldGen.SolidTile2(i, y + 1))
          flag = false;
      }
      if (!flag)
        return;
      int num1 = style * 54;
      for (int index = -3; index <= 0; ++index)
      {
        short num2 = (short) ((3 + index) * 18);
        Main.tile[x - 1, y + index].active(true);
        Main.tile[x - 1, y + index].frameY = num2;
        Main.tile[x - 1, y + index].frameX = (short) num1;
        Main.tile[x - 1, y + index].type = type;
        Main.tile[x, y + index].active(true);
        Main.tile[x, y + index].frameY = num2;
        Main.tile[x, y + index].frameX = (short) (num1 + 18);
        Main.tile[x, y + index].type = type;
        Main.tile[x + 1, y + index].active(true);
        Main.tile[x + 1, y + index].frameY = num2;
        Main.tile[x + 1, y + index].frameX = (short) (num1 + 36);
        Main.tile[x + 1, y + index].type = type;
      }
    }

    public static void Place5x4(int x, int y, ushort type, int style)
    {
      if (x < 5 || x > Main.maxTilesX - 5 || (y < 5 || y > Main.maxTilesY - 5))
        return;
      bool flag = true;
      for (int i = x - 2; i < x + 3; ++i)
      {
        for (int index = y - 3; index < y + 1; ++index)
        {
          if (Main.tile[i, index] == null)
            Main.tile[i, index] = new Tile();
          if (Main.tile[i, index].active())
            flag = false;
        }
        if (Main.tile[i, y + 1] == null)
          Main.tile[i, y + 1] = new Tile();
        if (!WorldGen.SolidTile2(i, y + 1))
          flag = false;
      }
      if (!flag)
        return;
      int num1 = style * 54;
      for (int index = -3; index <= 0; ++index)
      {
        short num2 = (short) ((3 + index) * 18);
        Main.tile[x - 2, y + index].active(true);
        Main.tile[x - 2, y + index].frameY = num2;
        Main.tile[x - 2, y + index].frameX = (short) (num1 - 36);
        Main.tile[x - 2, y + index].type = type;
        Main.tile[x - 1, y + index].active(true);
        Main.tile[x - 1, y + index].frameY = num2;
        Main.tile[x - 1, y + index].frameX = (short) (num1 - 18);
        Main.tile[x - 1, y + index].type = type;
        Main.tile[x, y + index].active(true);
        Main.tile[x, y + index].frameY = num2;
        Main.tile[x, y + index].frameX = (short) num1;
        Main.tile[x, y + index].type = type;
        Main.tile[x + 1, y + index].active(true);
        Main.tile[x + 1, y + index].frameY = num2;
        Main.tile[x + 1, y + index].frameX = (short) (num1 + 18);
        Main.tile[x + 1, y + index].type = type;
        Main.tile[x + 1, y + index].active(true);
        Main.tile[x + 1, y + index].frameY = num2;
        Main.tile[x + 1, y + index].frameX = (short) (num1 + 36);
        Main.tile[x + 1, y + index].type = type;
      }
    }

    public static void Place3x1(int x, int y, ushort type, int style = 0)
    {
      if (x < 5 || x > Main.maxTilesX - 5 || (y < 5 || y > Main.maxTilesY - 5))
        return;
      bool flag = true;
      for (int i = x - 1; i < x + 2; ++i)
      {
        int index = y;
        if (Main.tile[i, index] == null)
          Main.tile[i, index] = new Tile();
        if (Main.tile[i, index].active())
          flag = false;
        if (Main.tile[i, y + 1] == null)
          Main.tile[i, y + 1] = new Tile();
        if (!WorldGen.SolidTile2(i, y + 1))
          flag = false;
      }
      if (!flag)
        return;
      short num = (short) (54 * style);
      Main.tile[x - 1, y].active(true);
      Main.tile[x - 1, y].frameY = (short) 0;
      Main.tile[x - 1, y].frameX = num;
      Main.tile[x - 1, y].type = type;
      Main.tile[x, y].active(true);
      Main.tile[x, y].frameY = (short) 0;
      Main.tile[x, y].frameX = (short) ((int) num + 18);
      Main.tile[x, y].type = type;
      Main.tile[x + 1, y].active(true);
      Main.tile[x + 1, y].frameY = (short) 0;
      Main.tile[x + 1, y].frameX = (short) ((int) num + 36);
      Main.tile[x + 1, y].type = type;
    }

    public static void Place3x2(int x, int y, ushort type, int style = 0)
    {
      if (x < 5 || x > Main.maxTilesX - 5 || (y < 5 || y > Main.maxTilesY - 5))
        return;
      bool flag1 = false;
      bool flag2 = true;
      if ((int) type == 14 && style == 25)
        flag1 = true;
      int num1 = y - 1;
      if (flag1)
        num1 = y;
      for (int i = x - 1; i < x + 2; ++i)
      {
        for (int index = num1; index < y + 1; ++index)
        {
          if (Main.tile[i, index] == null)
            Main.tile[i, index] = new Tile();
          if (Main.tile[i, index].active())
            flag2 = false;
          if ((int) type == 215 && (int) Main.tile[i, index].liquid > 0)
            flag2 = false;
        }
        if (Main.tile[i, y + 1] == null)
          Main.tile[i, y + 1] = new Tile();
        if ((int) type == 285 || (int) type == 286 || ((int) type == 298 || (int) type == 299) || ((int) type == 310 || (int) type >= 361 && (int) type <= 364))
        {
          if (!WorldGen.SolidTile2(i, y + 1) && (!Main.tile[i, y + 1].nactive() || !Main.tileSolidTop[(int) Main.tile[i, y + 1].type] || (int) Main.tile[i, y + 1].frameY != 0))
            flag2 = false;
        }
        else if (!WorldGen.SolidTile2(i, y + 1))
          flag2 = false;
      }
      if ((int) type == 88)
      {
        if (Chest.CreateChest(x - 1, y - 1, -1) == -1)
          flag2 = false;
        else if (Main.netMode == 1)
          NetMessage.SendData(34, -1, -1, (NetworkText) null, 2, (float) x, (float) y, (float) style, 0, 0, 0);
      }
      if (!flag2)
        return;
      short num2 = (short) (54 * style);
      if (flag1)
      {
        Main.tile[x - 1, y].active(true);
        Main.tile[x - 1, y].frameY = (short) 0;
        Main.tile[x - 1, y].frameX = num2;
        Main.tile[x - 1, y].type = type;
        Main.tile[x, y].active(true);
        Main.tile[x, y].frameY = (short) 0;
        Main.tile[x, y].frameX = (short) ((int) num2 + 18);
        Main.tile[x, y].type = type;
        Main.tile[x + 1, y].active(true);
        Main.tile[x + 1, y].frameY = (short) 0;
        Main.tile[x + 1, y].frameX = (short) ((int) num2 + 36);
        Main.tile[x + 1, y].type = type;
      }
      else
      {
        Main.tile[x - 1, y - 1].active(true);
        Main.tile[x - 1, y - 1].frameY = (short) 0;
        Main.tile[x - 1, y - 1].frameX = num2;
        Main.tile[x - 1, y - 1].type = type;
        Main.tile[x, y - 1].active(true);
        Main.tile[x, y - 1].frameY = (short) 0;
        Main.tile[x, y - 1].frameX = (short) ((int) num2 + 18);
        Main.tile[x, y - 1].type = type;
        Main.tile[x + 1, y - 1].active(true);
        Main.tile[x + 1, y - 1].frameY = (short) 0;
        Main.tile[x + 1, y - 1].frameX = (short) ((int) num2 + 36);
        Main.tile[x + 1, y - 1].type = type;
        Main.tile[x - 1, y].active(true);
        Main.tile[x - 1, y].frameY = (short) 18;
        Main.tile[x - 1, y].frameX = num2;
        Main.tile[x - 1, y].type = type;
        Main.tile[x, y].active(true);
        Main.tile[x, y].frameY = (short) 18;
        Main.tile[x, y].frameX = (short) ((int) num2 + 18);
        Main.tile[x, y].type = type;
        Main.tile[x + 1, y].active(true);
        Main.tile[x + 1, y].frameY = (short) 18;
        Main.tile[x + 1, y].frameX = (short) ((int) num2 + 36);
        Main.tile[x + 1, y].type = type;
      }
    }

    public static void Place2x2Style(int x, int y, ushort type, int style = 0)
    {
      if (x < 5 || x > Main.maxTilesX - 5 || (y < 5 || y > Main.maxTilesY - 5))
        return;
      short num1 = 0;
      if ((int) type == 254)
        num1 = (short) ((int) (short) (x % 12 / 2) * 36);
      bool flag = true;
      for (int i = x - 1; i < x + 1; ++i)
      {
        for (int index = y - 1; index < y + 1; ++index)
        {
          if (Main.tile[i, index] == null)
            Main.tile[i, index] = new Tile();
          if (Main.tile[i, index].active())
            flag = false;
        }
        if (Main.tile[i, y + 1] == null)
          Main.tile[i, y + 1] = new Tile();
        if (!WorldGen.SolidTile(i, y + 1))
          flag = false;
        if ((int) type == 254 && (int) Main.tile[i, y + 1].type != 2 && (int) Main.tile[i, y + 1].type != 109)
          flag = false;
      }
      if (!flag)
        return;
      short num2 = (short) (36 * style);
      Main.tile[x - 1, y - 1].active(true);
      Main.tile[x - 1, y - 1].frameY = num1;
      Main.tile[x - 1, y - 1].frameX = num2;
      Main.tile[x - 1, y - 1].type = type;
      Main.tile[x, y - 1].active(true);
      Main.tile[x, y - 1].frameY = num1;
      Main.tile[x, y - 1].frameX = (short) ((int) num2 + 18);
      Main.tile[x, y - 1].type = type;
      Main.tile[x - 1, y].active(true);
      Main.tile[x - 1, y].frameY = (short) ((int) num1 + 18);
      Main.tile[x - 1, y].frameX = num2;
      Main.tile[x - 1, y].type = type;
      Main.tile[x, y].active(true);
      Main.tile[x, y].frameY = (short) ((int) num1 + 18);
      Main.tile[x, y].frameX = (short) ((int) num2 + 18);
      Main.tile[x, y].type = type;
    }

    public static bool NearFriendlyWall(int x, int y)
    {
      try
      {
        if (x < 2 || x >= Main.maxTilesX - 2 || (y < 2 || y >= Main.maxTilesY - 2) || ((int) Main.tile[x, y].wall == 0 || Main.wallHouse[(int) Main.tile[x, y].wall]) || ((int) Main.tile[x - 1, y].wall == 0 || Main.wallHouse[(int) Main.tile[x - 1, y].wall] || ((int) Main.tile[x + 1, y].wall == 0 || Main.wallHouse[(int) Main.tile[x + 1, y].wall])) || ((int) Main.tile[x, y - 1].wall == 0 || Main.wallHouse[(int) Main.tile[x, y - 1].wall] || (int) Main.tile[x, y + 1].wall == 0))
          return true;
        if (Main.wallHouse[(int) Main.tile[x, y + 1].wall])
          return true;
      }
      catch
      {
      }
      return false;
    }

    public static void Check2x2Style(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = j;
      int num2 = (int) Main.tile[i, j].frameY / 18;
      while (num2 > 1)
        num2 -= 2;
      int num3 = num1 - num2;
      int num4 = (int) Main.tile[i, j].frameX / 18;
      int num5 = 0;
      while (num4 > 1)
      {
        num4 -= 2;
        ++num5;
      }
      int num6 = i - num4;
      int num7 = num5 * 36;
      for (int i1 = num6; i1 < num6 + 2; ++i1)
      {
        for (int index = num3; index < num3 + 2; ++index)
        {
          if (Main.tile[i1, index] == null)
            Main.tile[i1, index] = new Tile();
          if (!Main.tile[i1, index].active() || (int) Main.tile[i1, index].type != type || (int) Main.tile[i1, index].frameX != (i1 - num6) * 18 + num7)
            flag = true;
        }
        if (!WorldGen.SolidTileAllowBottomSlope(i1, num3 + 2))
          flag = true;
      }
      if (!flag)
        return;
      int frameX = (int) Main.tile[i, j].frameX;
      WorldGen.destroyObject = true;
      for (int i1 = num6; i1 < num6 + 2; ++i1)
      {
        for (int j1 = num3; j1 < num3 + 2; ++j1)
        {
          if (Main.tile[i1, j1] == null)
            Main.tile[i1, j1] = new Tile();
          if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      if (type == 254)
      {
        if (frameX >= 72)
        {
          if (frameX < 108)
          {
            if (WorldGen.genRand.Next(2) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 1725, WorldGen.genRand.Next(1, 3), false, 0, false, false);
          }
          else if (frameX < 144)
          {
            Item.NewItem(i * 16, j * 16, 32, 32, 1725, WorldGen.genRand.Next(2, 6), false, 0, false, false);
          }
          else
          {
            Item.NewItem(i * 16, j * 16, 32, 32, 1725, WorldGen.genRand.Next(5, 11), false, 0, false, false);
            if (Main.halloween && WorldGen.genRand.Next(200) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 1799, 1, false, 0, false, false);
          }
        }
      }
      else if (type == 457)
        Item.NewItem(i * 16, j * 16, 32, 32, 3749, 1, false, 0, false, false);
      else if (type == 96)
      {
        if (num5 == 0)
          Item.NewItem(i * 16, j * 16, 32, 32, 345, 1, false, 0, false, false);
        if (num5 == 1)
          Item.NewItem(i * 16, j * 16, 32, 32, 1791, 1, false, 0, false, false);
      }
      else if (type == 441)
      {
        int Type = -1;
        switch (num5)
        {
          case 0:
            Type = 3665;
            break;
          case 1:
            Type = 3666;
            break;
          case 3:
            Type = 3667;
            break;
          case 7:
            Type = 3668;
            break;
          case 8:
            Type = 3669;
            break;
          case 9:
            Type = 3670;
            break;
          case 10:
            Type = 3671;
            break;
          case 11:
            Type = 3672;
            break;
          case 12:
            Type = 3673;
            break;
          case 13:
            Type = 3674;
            break;
          case 14:
            Type = 3675;
            break;
          case 15:
            Type = 3676;
            break;
          case 16:
            Type = 3677;
            break;
          case 17:
            Type = 3678;
            break;
          case 18:
            Type = 3679;
            break;
          case 19:
            Type = 3680;
            break;
          case 20:
            Type = 3681;
            break;
          case 21:
            Type = 3682;
            break;
          case 22:
            Type = 3683;
            break;
          case 28:
            Type = 3684;
            break;
          case 29:
            Type = 3685;
            break;
          case 30:
            Type = 3686;
            break;
          case 31:
            Type = 3687;
            break;
          case 32:
            Type = 3688;
            break;
          case 33:
            Type = 3689;
            break;
          case 34:
            Type = 3690;
            break;
          case 35:
            Type = 3691;
            break;
          case 37:
            Type = 3692;
            break;
          case 39:
            Type = 3693;
            break;
          case 41:
            Type = 3694;
            break;
          case 42:
            Type = 3695;
            break;
          case 43:
            Type = 3696;
            break;
          case 44:
            Type = 3697;
            break;
          case 45:
            Type = 3698;
            break;
          case 46:
            Type = 3699;
            break;
          case 47:
            Type = 3700;
            break;
          case 48:
            Type = 3701;
            break;
          case 49:
            Type = 3702;
            break;
          case 50:
            Type = 3703;
            break;
          case 51:
            Type = 3704;
            break;
        }
        if (Type != -1)
          Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      else if (type == 468)
      {
        int Type = -1;
        if (num5 != 0)
        {
          if (num5 == 1)
            Type = 3887;
        }
        else
          Type = 3886;
        if (Type != -1)
          Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
      for (int i1 = num6 - 1; i1 < num6 + 3; ++i1)
      {
        for (int j1 = num3 - 1; j1 < num3 + 3; ++j1)
          WorldGen.TileFrame(i1, j1, false, false);
      }
    }

    public static void PlacePumpkin(int x, int superY)
    {
      ushort num1 = 254;
      int index1 = superY;
      int num2 = WorldGen.genRand.Next(6) * 36;
      if (x < 5 || x > Main.maxTilesX - 5 || (index1 < 5 || index1 > Main.maxTilesY - 5))
        return;
      bool flag = true;
      for (int i = x - 1; i < x + 1; ++i)
      {
        for (int index2 = index1 - 1; index2 < index1 + 1; ++index2)
        {
          if (Main.tile[i, index2] == null)
            Main.tile[i, index2] = new Tile();
          if (Main.tile[i, index2].active() && (int) Main.tile[i, index2].type != 3 && ((int) Main.tile[i, index2].type != 73 && (int) Main.tile[i, index2].type != 113) && ((int) Main.tile[i, index2].type != 110 && ((int) Main.tile[i, index2].type != 185 || (int) Main.tile[i, index2].frameY != 0)))
            flag = false;
          if ((int) Main.tile[i, index2].liquid > 0)
            flag = false;
        }
        if (!WorldGen.SolidTile(i, index1 + 1) || (int) Main.tile[i, index1 + 1].type != 2 && (int) Main.tile[i, index1 + 1].type != 109)
          flag = false;
      }
      if (!flag)
        return;
      Main.tile[x - 1, index1 - 1].active(true);
      Main.tile[x - 1, index1 - 1].frameY = (short) num2;
      Main.tile[x - 1, index1 - 1].frameX = (short) 0;
      Main.tile[x - 1, index1 - 1].type = num1;
      Main.tile[x, index1 - 1].active(true);
      Main.tile[x, index1 - 1].frameY = (short) num2;
      Main.tile[x, index1 - 1].frameX = (short) 18;
      Main.tile[x, index1 - 1].type = num1;
      Main.tile[x - 1, index1].active(true);
      Main.tile[x - 1, index1].frameY = (short) (num2 + 18);
      Main.tile[x - 1, index1].frameX = (short) 0;
      Main.tile[x - 1, index1].type = num1;
      Main.tile[x, index1].active(true);
      Main.tile[x, index1].frameY = (short) (num2 + 18);
      Main.tile[x, index1].frameX = (short) 18;
      Main.tile[x, index1].type = num1;
    }

    public static void GrowPumpkin(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = j;
      int num2 = (int) Main.tile[i, j].frameY / 18;
      while (num2 > 1)
        num2 -= 2;
      int tileY = num1 - num2;
      int num3 = (int) Main.tile[i, j].frameX / 18;
      int num4 = 0;
      while (num3 > 1)
      {
        num3 -= 2;
        ++num4;
      }
      int tileX = i - num3;
      int num5 = num4 * 36;
      if (num4 >= 4)
        return;
      for (int i1 = tileX; i1 < tileX + 2; ++i1)
      {
        for (int index = tileY; index < tileY + 2; ++index)
        {
          if (Main.tile[i1, index] == null)
            Main.tile[i1, index] = new Tile();
          if (!Main.tile[i1, index].active() || (int) Main.tile[i1, index].type != type || (int) Main.tile[i1, index].frameX != (i1 - tileX) * 18 + num5)
            flag = true;
        }
        if (!WorldGen.SolidTile(i1, tileY + 2) || (int) Main.tile[i1, tileY + 2].type != 2 && (int) Main.tile[i1, tileY + 2].type != 109)
          flag = true;
      }
      if (!flag)
      {
        for (int index1 = tileX; index1 < tileX + 2; ++index1)
        {
          for (int index2 = tileY; index2 < tileY + 2; ++index2)
          {
            if (Main.tile[index1, index2] == null)
              Main.tile[index1, index2] = new Tile();
            if ((int) Main.tile[index1, index2].type == type && Main.tile[index1, index2].active())
              Main.tile[index1, index2].frameX += (short) 36;
          }
        }
      }
      if (Main.netMode != 2)
        return;
      NetMessage.SendTileSquare(-1, tileX, tileY, 4, TileChangeType.None);
    }

    public static void FixHearts()
    {
      for (int i = 0; i < Main.maxTilesX; ++i)
      {
        for (int j = 0; j < Main.maxTilesY; ++j)
        {
          Tile tile = Main.tile[i, j];
          if (tile.active() && (int) tile.type == 12 && ((int) tile.frameX == 0 && (int) tile.frameY == 0))
            WorldGen.FixHeart(i, j);
        }
      }
    }

    public static void DestroyHeart(int i, int j)
    {
      WorldGen.destroyObject = true;
      for (int i1 = i; i1 < i + 2; ++i1)
      {
        for (int j1 = j; j1 < j + 2; ++j1)
        {
          if (i1 < Main.maxTilesX && j1 < Main.maxTilesY)
          {
            Tile tile = Main.tile[i1, j1];
            if (tile.active() && (int) tile.type == 12)
              WorldGen.KillTile(i1, j1, false, false, false);
          }
        }
      }
      WorldGen.destroyObject = false;
    }

    public static void FixHeart(int i, int j)
    {
      if (i < 40 || i >= Main.maxTilesX - 40 || (j < 40 || j >= Main.maxTilesY - 40))
      {
        WorldGen.DestroyHeart(i, j);
      }
      else
      {
        Tile tile1 = Main.tile[i, j + 2];
        Tile tile2 = Main.tile[i + 1, j + 2];
        if (tile1.active() && !Main.tileSolid[(int) tile1.type] && Main.tileCut[(int) tile1.type])
          WorldGen.KillTile(i, j + 2, false, false, false);
        if (tile2.active() && !Main.tileSolid[(int) tile2.type] && Main.tileCut[(int) tile2.type])
          WorldGen.KillTile(i + 1, j + 2, false, false, false);
        if (!tile1.active())
        {
          if (!tile2.active())
          {
            WorldGen.DestroyHeart(i, j);
            return;
          }
          if (Main.tileSolid[(int) tile2.type])
          {
            tile1.type = tile2.type;
            tile1.active(true);
          }
        }
        if (!tile2.active() && Main.tileSolid[(int) tile1.type])
        {
          tile2.type = tile1.type;
          tile2.active(true);
        }
        if (!tile1.nactive() || !Main.tileSolid[(int) tile1.type] || (!tile2.nactive() || !Main.tileSolid[(int) tile2.type]))
        {
          WorldGen.DestroyHeart(i, j);
        }
        else
        {
          if (tile1.blockType() != 0)
          {
            tile1.slope((byte) 0);
            tile1.halfBrick(false);
          }
          if (tile2.blockType() == 0)
            return;
          tile2.slope((byte) 0);
          tile2.halfBrick(false);
        }
      }
    }

    public static void FixChands()
    {
      for (int i = 5; i < Main.maxTilesX - 5; ++i)
      {
        for (int j = 5; j < Main.maxTilesY - 5; ++j)
        {
          if (Main.tile[i, j].active())
          {
            int type = (int) Main.tile[i, j].type;
            if (Main.tile[i, j].active() && (type == 35 || type == 36 || (type == 170 || type == 171) || type == 172))
              WorldGen.FixChand(i, j);
          }
        }
      }
    }

    public static void FixChand(int i, int j)
    {
      int num1 = 0;
      int type = (int) Main.tile[i, j].type;
      if (Main.tile[i, j].active())
      {
        if (type == 35)
          num1 = 1;
        if (type == 36)
          num1 = 2;
        if (type == 170)
          num1 = 3;
        if (type == 171)
          num1 = 4;
        if (type == 172)
          num1 = 5;
      }
      if (num1 <= 0)
        return;
      int num2 = j;
      int num3 = (int) Main.tile[i, j].frameX / 18;
      while (num3 >= 3)
        num3 -= 3;
      if (num3 >= 3)
        num3 -= 3;
      int num4 = i - num3;
      int num5 = num2 + (int) Main.tile[i, j].frameY / 18 * -1;
      for (int index1 = num4; index1 < num4 + 3; ++index1)
      {
        for (int index2 = num5; index2 < num5 + 3; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == type)
          {
            Main.tile[index1, index2].type = (ushort) 34;
            Main.tile[index1, index2].frameY = (short) ((int) Main.tile[index1, index2].frameY + num1 * 54);
          }
        }
      }
    }

    public static void PlaceChand(int x, int y, ushort type, int style = 0)
    {
      bool flag = true;
      int num1 = 0;
      for (int index1 = x - 1; index1 < x + 2; ++index1)
      {
        for (int index2 = y; index2 < y + 3; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (Main.tile[index1, index2].active())
            flag = false;
        }
      }
      if (Main.tile[x, y - 1] == null)
        Main.tile[x, y - 1] = new Tile();
      if (!Main.tile[x, y - 1].nactive() || !Main.tileSolid[(int) Main.tile[x, y - 1].type] || Main.tileSolidTop[(int) Main.tile[x, y - 1].type])
        flag = false;
      if (!flag)
        return;
      int num2 = style / 36 * 108;
      int num3 = style * 18 * 3;
      Main.tile[x - 1, y + num1].active(true);
      Main.tile[x - 1, y + num1].frameY = (short) num3;
      Main.tile[x - 1, y + num1].frameX = (short) num2;
      Main.tile[x - 1, y + num1].type = type;
      Main.tile[x, y + num1].active(true);
      Main.tile[x, y + num1].frameY = (short) num3;
      Main.tile[x, y + num1].frameX = (short) (num2 + 18);
      Main.tile[x, y + num1].type = type;
      Main.tile[x + 1, y + num1].active(true);
      Main.tile[x + 1, y + num1].frameY = (short) num3;
      Main.tile[x + 1, y + num1].frameX = (short) (num2 + 36);
      Main.tile[x + 1, y + num1].type = type;
      Main.tile[x - 1, y + 1 + num1].active(true);
      Main.tile[x - 1, y + 1 + num1].frameY = (short) (num3 + 18);
      Main.tile[x - 1, y + 1 + num1].frameX = (short) num2;
      Main.tile[x - 1, y + 1 + num1].type = type;
      Main.tile[x, y + 1 + num1].active(true);
      Main.tile[x, y + 1 + num1].frameY = (short) (num3 + 18);
      Main.tile[x, y + 1 + num1].frameX = (short) (num2 + 18);
      Main.tile[x, y + 1 + num1].type = type;
      Main.tile[x + 1, y + 1 + num1].active(true);
      Main.tile[x + 1, y + 1 + num1].frameY = (short) (num3 + 18);
      Main.tile[x + 1, y + 1 + num1].frameX = (short) (num2 + 36);
      Main.tile[x + 1, y + 1 + num1].type = type;
      Main.tile[x - 1, y + 2 + num1].active(true);
      Main.tile[x - 1, y + 2 + num1].frameY = (short) (num3 + 36);
      Main.tile[x - 1, y + 2 + num1].frameX = (short) num2;
      Main.tile[x - 1, y + 2 + num1].type = type;
      Main.tile[x, y + 2 + num1].active(true);
      Main.tile[x, y + 2 + num1].frameY = (short) (num3 + 36);
      Main.tile[x, y + 2 + num1].frameX = (short) (num2 + 18);
      Main.tile[x, y + 2 + num1].type = type;
      Main.tile[x + 1, y + 2 + num1].active(true);
      Main.tile[x + 1, y + 2 + num1].frameY = (short) (num3 + 36);
      Main.tile[x + 1, y + 2 + num1].frameX = (short) (num2 + 36);
      Main.tile[x + 1, y + 2 + num1].type = type;
    }

    public static void CheckChand(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = 3;
      if (type == 454)
        num1 = 4;
      int num2 = (int) Main.tile[i, j].frameX / 18;
      int num3 = 0;
      while (num2 >= num1)
      {
        ++num3;
        num2 -= num1;
      }
      int num4 = i - num2;
      int num5 = 18 * num1 * num3;
      if (num2 >= num1)
        num2 -= num1;
      int num6 = i - num2;
      int num7 = (int) Main.tile[i, j].frameY / 18;
      int num8 = 0;
      while (num7 >= 3)
      {
        ++num8;
        num7 -= 3;
      }
      if (num5 >= 108)
        num8 += 37 * (num5 / 108);
      int num9 = 54 * num8;
      if (num5 >= 108)
        num9 -= 54 * (num5 / 108) * 37;
      if (num7 >= 3)
        num7 -= 3;
      int num10 = j - num7;
      for (int index1 = num6; index1 < num6 + num1; ++index1)
      {
        for (int index2 = num10; index2 < num10 + 3; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (!Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].type != type || ((int) Main.tile[index1, index2].frameX != (index1 - num4) * 18 + num5 || (int) Main.tile[index1, index2].frameY != (index2 - num10) * 18 + num9))
            flag = true;
        }
      }
      if (Main.tile[num6 + 1, num10 - 1] == null)
        Main.tile[num6 + 1, num10 - 1] = new Tile();
      if (!Main.tile[num6 + 1, num10 - 1].nactive() || !Main.tileSolid[(int) Main.tile[num6 + 1, num10 - 1].type] || Main.tileSolidTop[(int) Main.tile[num6 + 1, num10 - 1].type])
        flag = true;
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i1 = num6; i1 < num6 + num1; ++i1)
      {
        for (int j1 = num10; j1 < num10 + 3; ++j1)
        {
          if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      if (type == 454)
      {
        switch (Main.rand.Next(9))
        {
          case 2:
          case 3:
          case 4:
            int num11 = Main.rand.Next(10, 31);
            while (num11 > 0)
            {
              int Stack = Main.rand.Next(2, 11);
              if (Stack > num11)
                Stack = num11;
              num11 -= Stack;
              Item.NewItem(i * 16, j * 16, 32, 32, 72, Stack, false, 0, false, false);
            }
            break;
          case 5:
          case 6:
            int num12 = Main.rand.Next(60, 80);
            while (num12 > 0)
            {
              int Stack = Main.rand.Next(3, 16);
              if (Stack > num12)
                Stack = num12;
              num12 -= Stack;
              Item.NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 72, Stack, false, 0, false, false);
            }
            Item.NewItem(i * 16, j * 16, 32, 32, 1358, 1, false, 0, false, false);
            break;
          case 7:
            int num13 = Main.rand.Next(10, 31);
            while (num13 > 0)
            {
              int Stack = Main.rand.Next(2, 9);
              if (Stack > num13)
                Stack = num13;
              num13 -= Stack;
              Item.NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 72, Stack, false, 0, false, false);
            }
            if (Main.rand.Next(8) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 3532, 1, false, 0, false, false);
            if (Main.rand.Next(8) == 0)
              Item.NewItem(i * 16, j * 16, 32, 32, 3532, 1, false, 0, false, false);
            Item.NewItem(i * 16, j * 16, 32, 32, 73, 1, false, 0, false, false);
            break;
          case 8:
            int num14 = 100;
            while (num14 > 0)
            {
              int Stack = Main.rand.Next(3, 16);
              if (Stack > num14)
                Stack = num14;
              num14 -= Stack;
              Item.NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 72, Stack, false, 0, false, false);
            }
            int num15 = Main.rand.Next(30, 91);
            while (num15 > 0)
            {
              int Stack = Main.rand.Next(7, 14);
              if (Stack > num15)
                Stack = num15;
              num15 -= Stack;
              Item.NewItem(i * 16 - 10, j * 16 - 10, 52, 52, 1349, Stack, false, 0, false, false);
            }
            Item.NewItem(i * 16, j * 16, 32, 32, 1358, 1, false, 0, false, false);
            Item.NewItem(i * 16, j * 16, 32, 32, 73, 1, false, 0, false, false);
            break;
        }
      }
      if (type == 34)
      {
        int Type = num8 != 1 ? (num8 != 2 ? (num8 != 3 ? (num8 != 4 ? (num8 != 5 ? (num8 != 6 ? (num8 < 7 || num8 > 17 ? (num8 < 18 || num8 > 21 ? (num8 != 22 ? (num8 != 23 ? (num8 != 24 ? (num8 != 25 ? (num8 != 26 ? (num8 != 27 ? (num8 != 28 ? (num8 != 29 ? (num8 != 30 ? (num8 != 31 ? (num8 != 32 ? (num8 != 33 ? (num8 != 34 ? (num8 != 35 ? (num8 != 36 ? (num8 != 37 ? 106 : 3894) : 3178) : 3179) : 3177) : 2813) : 2657) : 2656) : 2655) : 2654) : 2653) : 2652) : 2573) : 2558) : 2543) : 2525) : 2224) : 2141 + num8 - 18) : 2055 + num8 - 7) : 1812) : 712) : 711) : 710) : 108) : 107;
        Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      }
      WorldGen.destroyObject = false;
      for (int i1 = num6 - 1; i1 < num6 + num1 + 1; ++i1)
      {
        for (int j1 = num10 - 1; j1 < num10 + 4; ++j1)
          WorldGen.TileFrame(i1, j1, false, false);
      }
    }

    public static void Check3x3(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = j;
      int num2 = (int) Main.tile[i, j].frameX / 18;
      int num3 = 0;
      while (num2 >= 3)
      {
        ++num3;
        num2 -= 3;
      }
      int num4 = i - num2;
      int num5 = 54 * num3;
      int num6 = (int) Main.tile[i, j].frameY / 54;
      int num7 = (int) Main.tile[i, j].frameY % 54 / 18;
      if (num2 >= 3)
        num2 -= 3;
      int num8 = i - num2;
      int num9 = num1 - num7;
      for (int index1 = num8; index1 < num8 + 3; ++index1)
      {
        for (int index2 = num9; index2 < num9 + 3; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (!Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].type != type || ((int) Main.tile[index1, index2].frameX != (index1 - num4) * 18 + num5 || (int) Main.tile[index1, index2].frameY != (index2 - num9) * 18 + num6 * 54))
            flag = true;
        }
      }
      if (type == 106 || type == 212 || (type == 219 || type == 220) || (type == 228 || type == 231 || (type == 243 || type == 247)) || (type == 283 || type >= 300 && type <= 308 || (type == 354 || type == 355 || (type == 406 || type == 412))) || (type == 452 || type == 455))
      {
        for (int i1 = num8; i1 < num8 + 3; ++i1)
        {
          if (Main.tile[i1, num9 + 3] == null)
            Main.tile[i1, num9 + 3] = new Tile();
          if (!WorldGen.SolidTileAllowBottomSlope(i1, num9 + 3))
          {
            flag = true;
            break;
          }
        }
      }
      else
      {
        if (Main.tile[num8 + 1, num9 - 1] == null)
          Main.tile[num8 + 1, num9 - 1] = new Tile();
        if (!Main.tile[num8 + 1, num9 - 1].nactive() || !Main.tileSolid[(int) Main.tile[num8 + 1, num9 - 1].type] || Main.tileSolidTop[(int) Main.tile[num8 + 1, num9 - 1].type])
          flag = true;
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i1 = num8; i1 < num8 + 3; ++i1)
      {
        for (int j1 = num9; j1 < num9 + 3; ++j1)
        {
          if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      if (type == 106)
        Item.NewItem(i * 16, j * 16, 32, 32, 363, 1, false, 0, false, false);
      else if (type == 243)
        Item.NewItem(i * 16, j * 16, 32, 32, 1430, 1, false, 0, false, false);
      else if (type == 212)
        Item.NewItem(i * 16, j * 16, 32, 32, 951, 1, false, 0, false, false);
      else if (type == 219)
        Item.NewItem(i * 16, j * 16, 32, 32, 997, 1, false, 0, false, false);
      else if (type == 220)
        Item.NewItem(i * 16, j * 16, 32, 32, 998, 1, false, 0, false, false);
      else if (type == 228)
        Item.NewItem(i * 16, j * 16, 32, 32, 1120, 1, false, 0, false, false);
      else if (type == 247)
        Item.NewItem(i * 16, j * 16, 32, 32, 1551, 1, false, 0, false, false);
      else if (type == 283)
        Item.NewItem(i * 16, j * 16, 32, 32, 2172, 1, false, 0, false, false);
      else if (type >= 300 && type <= 306)
        Item.NewItem(i * 16, j * 16, 32, 32, 2192 + type - 300, 1, false, 0, false, false);
      else if (type == 307)
        Item.NewItem(i * 16, j * 16, 32, 32, 2203, 1, false, 0, false, false);
      else if (type == 308)
        Item.NewItem(i * 16, j * 16, 32, 32, 2204, 1, false, 0, false, false);
      else if (type == 406)
        Item.NewItem(i * 16, j * 16, 32, 32, 3365, 1, false, 0, false, false);
      else if (type == 452)
        Item.NewItem(i * 16, j * 16, 32, 32, 3742, 1, false, 0, false, false);
      else if (type == 354)
        Item.NewItem(i * 16, j * 16, 32, 32, 2999, 1, false, 0, false, false);
      else if (type == 355)
        Item.NewItem(i * 16, j * 16, 32, 32, 3000, 1, false, 0, false, false);
      else if (type == 412)
        Item.NewItem(i * 16, j * 16, 32, 32, 3549, 1, false, 0, false, false);
      else if (type == 455)
        Item.NewItem(i * 16, j * 16, 32, 32, 3747, 1, false, 0, false, false);
      else if (type == 231)
      {
        int num10 = (i + 1) * 16 + 8;
        int num11 = j * 16;
        Gore.NewGore(new Vector2((float) num10, (float) num11), (Vector2) null, 300, 1f);
        Gore.NewGore(new Vector2((float) num10, (float) (num11 + 8)), (Vector2) null, 301, 1f);
        Gore.NewGore(new Vector2((float) num10, (float) (num11 + 16)), (Vector2) null, 302, 1f);
        float num12 = (float) (i * 16);
        float num13 = (float) (j * 16);
        float num14 = -1f;
        int plr = 0;
        for (int index = 0; index < (int) byte.MaxValue; ++index)
        {
          if (Main.player[index].active && !Main.player[index].dead)
          {
            float num15 = Math.Abs((float) Main.player[index].position.X - num12) + Math.Abs((float) Main.player[index].position.Y - num13);
            if ((double) num15 < (double) num14 || (double) num14 == -1.0)
            {
              plr = index;
              num14 = num15;
            }
          }
        }
        NPC.SpawnOnPlayer(plr, 222);
      }
      WorldGen.destroyObject = false;
      for (int i1 = num8 - 1; i1 < num8 + 4; ++i1)
      {
        for (int j1 = num9 - 1; j1 < num9 + 4; ++j1)
          WorldGen.TileFrame(i1, j1, false, false);
      }
    }

    public static void Place3x3(int x, int y, ushort type, int style = 0)
    {
      bool flag = true;
      int num1 = 0;
      if ((int) type == 106 || (int) type == 212 || ((int) type == 219 || (int) type == 220) || ((int) type == 228 || (int) type == 231 || ((int) type == 243 || (int) type == 247)) || ((int) type == 283 || (int) type >= 300 && (int) type <= 308 || ((int) type == 354 || (int) type == 355)))
      {
        num1 = -2;
        for (int index1 = x - 1; index1 < x + 2; ++index1)
        {
          for (int index2 = y - 2; index2 < y + 1; ++index2)
          {
            if (Main.tile[index1, index2] == null)
              Main.tile[index1, index2] = new Tile();
            if (Main.tile[index1, index2].active())
              flag = false;
          }
        }
        for (int i = x - 1; i < x + 2; ++i)
        {
          if (Main.tile[i, y + 1] == null)
            Main.tile[i, y + 1] = new Tile();
          if (!WorldGen.SolidTile2(i, y + 1))
          {
            flag = false;
            break;
          }
        }
      }
      else
      {
        for (int index1 = x - 1; index1 < x + 2; ++index1)
        {
          for (int index2 = y; index2 < y + 3; ++index2)
          {
            if (Main.tile[index1, index2] == null)
              Main.tile[index1, index2] = new Tile();
            if (Main.tile[index1, index2].active())
              flag = false;
          }
        }
        if (Main.tile[x, y - 1] == null)
          Main.tile[x, y - 1] = new Tile();
        if (!Main.tile[x, y - 1].nactive() || !Main.tileSolid[(int) Main.tile[x, y - 1].type] || Main.tileSolidTop[(int) Main.tile[x, y - 1].type])
          flag = false;
      }
      if (!flag)
        return;
      int num2 = style * 18 * 3;
      Main.tile[x - 1, y + num1].active(true);
      Main.tile[x - 1, y + num1].frameY = (short) 0;
      Main.tile[x - 1, y + num1].frameX = (short) num2;
      Main.tile[x - 1, y + num1].type = type;
      Main.tile[x, y + num1].active(true);
      Main.tile[x, y + num1].frameY = (short) 0;
      Main.tile[x, y + num1].frameX = (short) (num2 + 18);
      Main.tile[x, y + num1].type = type;
      Main.tile[x + 1, y + num1].active(true);
      Main.tile[x + 1, y + num1].frameY = (short) 0;
      Main.tile[x + 1, y + num1].frameX = (short) (num2 + 36);
      Main.tile[x + 1, y + num1].type = type;
      Main.tile[x - 1, y + 1 + num1].active(true);
      Main.tile[x - 1, y + 1 + num1].frameY = (short) 18;
      Main.tile[x - 1, y + 1 + num1].frameX = (short) num2;
      Main.tile[x - 1, y + 1 + num1].type = type;
      Main.tile[x, y + 1 + num1].active(true);
      Main.tile[x, y + 1 + num1].frameY = (short) 18;
      Main.tile[x, y + 1 + num1].frameX = (short) (num2 + 18);
      Main.tile[x, y + 1 + num1].type = type;
      Main.tile[x + 1, y + 1 + num1].active(true);
      Main.tile[x + 1, y + 1 + num1].frameY = (short) 18;
      Main.tile[x + 1, y + 1 + num1].frameX = (short) (num2 + 36);
      Main.tile[x + 1, y + 1 + num1].type = type;
      Main.tile[x - 1, y + 2 + num1].active(true);
      Main.tile[x - 1, y + 2 + num1].frameY = (short) 36;
      Main.tile[x - 1, y + 2 + num1].frameX = (short) num2;
      Main.tile[x - 1, y + 2 + num1].type = type;
      Main.tile[x, y + 2 + num1].active(true);
      Main.tile[x, y + 2 + num1].frameY = (short) 36;
      Main.tile[x, y + 2 + num1].frameX = (short) (num2 + 18);
      Main.tile[x, y + 2 + num1].type = type;
      Main.tile[x + 1, y + 2 + num1].active(true);
      Main.tile[x + 1, y + 2 + num1].frameY = (short) 36;
      Main.tile[x + 1, y + 2 + num1].frameX = (short) (num2 + 36);
      Main.tile[x + 1, y + 2 + num1].type = type;
    }

    public static void PlaceSunflower(int x, int y, ushort type = 27)
    {
      if ((double) y > Main.worldSurface - 1.0)
        return;
      bool flag = true;
      for (int index1 = x; index1 < x + 2; ++index1)
      {
        for (int index2 = y - 3; index2 < y + 1; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].wall > 0)
            flag = false;
        }
        if (Main.tile[index1, y + 1] == null)
          Main.tile[index1, y + 1] = new Tile();
        if (!Main.tile[index1, y + 1].nactive() || Main.tile[index1, y + 1].halfBrick() || (int) Main.tile[index1, y + 1].slope() != 0 || (int) Main.tile[index1, y + 1].type != 2 && (int) Main.tile[index1, y + 1].type != 109)
          flag = false;
      }
      if (!flag)
        return;
      int num1 = WorldGen.genRand.Next(3);
      for (int index1 = 0; index1 < 2; ++index1)
      {
        for (int index2 = -3; index2 < 1; ++index2)
        {
          int num2 = index1 * 18 + WorldGen.genRand.Next(3) * 36;
          if (index2 <= -2)
            num2 = index1 * 18 + num1 * 36;
          int num3 = (index2 + 3) * 18;
          Main.tile[x + index1, y + index2].active(true);
          Main.tile[x + index1, y + index2].frameX = (short) num2;
          Main.tile[x + index1, y + index2].frameY = (short) num3;
          Main.tile[x + index1, y + index2].type = type;
        }
      }
    }

    public static void FixSunflowers()
    {
      for (int i = 5; i < Main.maxTilesX - 5; ++i)
      {
        for (int j = 5; (double) j < Main.worldSurface; ++j)
        {
          if (Main.tile[i, j].active() && (int) Main.tile[i, j].type == 27)
            WorldGen.FixSunflower(i, j);
        }
      }
    }

    public static void FixSunflower(int i, int j)
    {
      if ((int) Main.tile[i, j].type != 27)
        return;
      int num1 = 0;
      int num2 = j;
      int num3 = num1 + (int) Main.tile[i, j].frameX / 18;
      int num4 = num2 + (int) Main.tile[i, j].frameY / 18 * -1;
      while (num3 > 1)
        num3 -= 2;
      int num5 = num3 * -1 + i;
      int num6 = WorldGen.genRand.Next(3) * 36;
      int num7 = 0;
      for (int index1 = num5; index1 < num5 + 2; ++index1)
      {
        for (int index2 = num4; index2 < num4 + 4; ++index2)
          Main.tile[index1, index2].frameX = (short) (num7 + num6);
        num7 += 18;
      }
    }

    public static void CheckSunflower(int i, int j, int type = 27)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = 0;
      int num2 = j;
      int num3 = num1 + (int) Main.tile[i, j].frameX / 18;
      int num4 = num2 + (int) Main.tile[i, j].frameY / 18 * -1;
      while (num3 > 1)
        num3 -= 2;
      int num5 = num3 * -1 + i;
      for (int i1 = num5; i1 < num5 + 2; ++i1)
      {
        for (int index = num4; index < num4 + 4; ++index)
        {
          if (Main.tile[i1, index] == null)
            Main.tile[i1, index] = new Tile();
          int num6 = (int) Main.tile[i1, index].frameX / 18;
          while (num6 > 1)
            num6 -= 2;
          if (!Main.tile[i1, index].nactive() || (int) Main.tile[i1, index].type != type || (num6 != i1 - num5 || (int) Main.tile[i1, index].frameY != (index - num4) * 18))
            flag = true;
        }
        if (Main.tile[i1, num4 + 4] == null)
          Main.tile[i1, num4 + 4] = new Tile();
        if (!Main.tile[i1, num4 + 4].nactive() || (int) Main.tile[i1, num4 + 4].type != 2 && (int) Main.tile[i1, num4 + 4].type != 109)
          flag = true;
        if (!WorldGen.SolidTile(i1, num4 + 4))
          flag = true;
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      for (int i1 = num5; i1 < num5 + 2; ++i1)
      {
        for (int j1 = num4; j1 < num4 + 4; ++j1)
        {
          if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      Item.NewItem(i * 16, j * 16, 32, 32, 63, 1, false, 0, false, false);
      WorldGen.destroyObject = false;
    }

    public static void CheckDye(int x, int y)
    {
      switch ((int) Main.tile[x, y].frameX / 34)
      {
        case 7:
          if (WorldGen.SolidTile(x, y - 1))
            break;
          WorldGen.KillTile(x, y, false, false, false);
          break;
        case 6:
          if (Main.tile[x, y + 1].nactive() && (int) Main.tile[x, y + 1].type == 80)
            break;
          WorldGen.KillTile(x, y, false, false, false);
          break;
        default:
          if (WorldGen.SolidTile(x, y + 1))
            break;
          WorldGen.KillTile(x, y, false, false, false);
          break;
      }
    }

    public static void PlaceDye(int x, int y, int style)
    {
      bool flag = false;
      if (style == 7)
      {
        if (Main.tile[x, y + 1].active() && (int) Main.tile[x, y + 1].type != 3 && ((int) Main.tile[x, y + 1].type != 51 && (int) Main.tile[x, y + 1].type != 61) && ((int) Main.tile[x, y + 1].type != 73 && (int) Main.tile[x, y + 1].type != 74 && (int) Main.tile[x, y + 1].type != 184))
          return;
        if (WorldGen.SolidTile(x, y - 1) && !Main.tile[x, y + 1].active())
          flag = true;
      }
      else
      {
        if (Main.tile[x, y - 1].active() && (int) Main.tile[x, y - 1].type != 3 && ((int) Main.tile[x, y - 1].type != 51 && (int) Main.tile[x, y - 1].type != 61) && ((int) Main.tile[x, y - 1].type != 73 && (int) Main.tile[x, y - 1].type != 74 && (int) Main.tile[x, y - 1].type != 184))
          return;
        if (style == 6)
        {
          if (Main.tile[x, y + 1].nactive() && (int) Main.tile[x, y + 1].type == 80 && (!Main.tile[x - 1, y + 1].active() && !Main.tile[x + 1, y + 1].active()))
            flag = true;
        }
        else if (WorldGen.SolidTile(x, y + 1) && !Main.tile[x, y - 1].active())
        {
          if (style == 5)
          {
            if ((int) Main.tile[x, y].liquid == (int) byte.MaxValue)
              flag = true;
          }
          else if (style >= 8 && style <= 11)
            flag = true;
          else if ((int) Main.tile[x, y].liquid == 0)
          {
            if (style == 3 || style == 4)
            {
              if ((int) Main.tile[x, y].wall == 0)
                flag = true;
            }
            else
              flag = true;
          }
        }
      }
      if (!flag)
        return;
      Main.tile[x, y].type = (ushort) 227;
      Main.tile[x, y].active(true);
      Main.tile[x, y].halfBrick(false);
      Main.tile[x, y].slope((byte) 0);
      Main.tile[x, y].frameY = (short) 0;
      Main.tile[x, y].frameX = (short) (34 * style);
    }

    public static bool PlacePot(int x, int y, ushort type = 28, int style = 0)
    {
      bool flag = true;
      for (int index1 = x; index1 < x + 2; ++index1)
      {
        for (int index2 = y - 1; index2 < y + 1; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (Main.tile[index1, index2].active())
            flag = false;
        }
        if (Main.tile[index1, y + 1] == null)
          Main.tile[index1, y + 1] = new Tile();
        if (!Main.tile[index1, y + 1].nactive() || Main.tile[index1, y + 1].halfBrick() || ((int) Main.tile[index1, y + 1].slope() != 0 || !Main.tileSolid[(int) Main.tile[index1, y + 1].type]))
          flag = false;
      }
      if (!flag)
        return false;
      int num1 = WorldGen.genRand.Next(3) * 36;
      for (int index1 = 0; index1 < 2; ++index1)
      {
        for (int index2 = -1; index2 < 1; ++index2)
        {
          int num2 = index1 * 18 + num1;
          int num3 = (index2 + 1) * 18;
          Main.tile[x + index1, y + index2].active(true);
          Main.tile[x + index1, y + index2].frameX = (short) num2;
          Main.tile[x + index1, y + index2].frameY = (short) (num3 + style * 36);
          Main.tile[x + index1, y + index2].type = type;
          Main.tile[x + index1, y + index2].halfBrick(false);
        }
      }
      return true;
    }

    public static bool CheckCactus(int i, int j)
    {
      int index1 = j;
      int index2 = i;
      while (Main.tile[index2, index1] != null && Main.tile[index2, index1].active() && (int) Main.tile[index2, index1].type == 80)
      {
        ++index1;
        if (Main.tile[index2, index1] == null)
          return false;
        if (!Main.tile[index2, index1].active() || (int) Main.tile[index2, index1].type != 80)
        {
          if (Main.tile[index2 - 1, index1] != null && Main.tile[index2 - 1, index1].active() && ((int) Main.tile[index2 - 1, index1].type == 80 && Main.tile[index2 - 1, index1 - 1] != null) && (Main.tile[index2 - 1, index1 - 1].active() && (int) Main.tile[index2 - 1, index1 - 1].type == 80 && index2 >= i))
            --index2;
          if (Main.tile[index2 + 1, index1] != null && Main.tile[index2 + 1, index1].active() && ((int) Main.tile[index2 + 1, index1].type == 80 && Main.tile[index2 + 1, index1 - 1] != null) && (Main.tile[index2 + 1, index1 - 1].active() && (int) Main.tile[index2 + 1, index1 - 1].type == 80 && index2 <= i))
            ++index2;
        }
      }
      if (!Main.tile[index2, index1].nactive() || Main.tile[index2, index1].halfBrick() || (int) Main.tile[index2, index1].slope() != 0 || (int) Main.tile[index2, index1].type != 53 && (int) Main.tile[index2, index1].type != 112 && ((int) Main.tile[index2, index1].type != 116 && (int) Main.tile[index2, index1].type != 234))
      {
        WorldGen.KillTile(i, j, false, false, false);
        return true;
      }
      if (i != index2)
      {
        if ((!Main.tile[i, j + 1].active() || (int) Main.tile[i, j + 1].type != 80) && (!Main.tile[i - 1, j].active() || (int) Main.tile[i - 1, j].type != 80) && (!Main.tile[i + 1, j].active() || (int) Main.tile[i + 1, j].type != 80))
        {
          WorldGen.KillTile(i, j, false, false, false);
          return true;
        }
      }
      else if (i == index2 && (!Main.tile[i, j + 1].active() || (int) Main.tile[i, j + 1].type != 80 && (int) Main.tile[i, j + 1].type != 53 && ((int) Main.tile[i, j + 1].type != 112 && (int) Main.tile[i, j + 1].type != 116) && (int) Main.tile[i, j + 1].type != 234))
      {
        WorldGen.KillTile(i, j, false, false, false);
        return true;
      }
      return false;
    }

    public static void PlantCactus(int i, int j)
    {
      WorldGen.GrowCactus(i, j);
      for (int index = 0; index < 150; ++index)
        WorldGen.GrowCactus(WorldGen.genRand.Next(i - 1, i + 2), WorldGen.genRand.Next(j - 10, j + 2));
    }

    public static void CheckOrb(int i, int j, int type)
    {
      int frameX = (int) Main.tile[i, j].frameX;
      bool flag = false;
      int num1 = 36;
      if (frameX >= num1)
        flag = true;
      if (WorldGen.destroyObject)
        return;
      int num2 = (int) Main.tile[i, j].frameX == 0 || (int) Main.tile[i, j].frameX == 36 ? i : i - 1;
      int num3 = (int) Main.tile[i, j].frameY != 0 ? j - 1 : j;
      for (int index1 = 0; index1 < 2; ++index1)
      {
        for (int index2 = 0; index2 < 2; ++index2)
        {
          Tile tile = Main.tile[num2 + index1, num3 + index2];
          if (tile != null && (!tile.nactive() || (int) tile.type != type))
          {
            WorldGen.destroyObject = true;
            break;
          }
        }
        if (!WorldGen.destroyObject)
        {
          if (type == 12)
          {
            Tile tile = Main.tile[num2 + index1, num3 + 2];
            if (tile != null && (!tile.nactive() || !Main.tileSolid[(int) tile.type] || tile.blockType() != 0))
            {
              WorldGen.destroyObject = true;
              break;
            }
          }
        }
        else
          break;
      }
      if (!WorldGen.destroyObject)
        return;
      for (int i1 = num2; i1 < num2 + 2; ++i1)
      {
        for (int j1 = num3; j1 < num3 + 2; ++j1)
        {
          if ((int) Main.tile[i1, j1].type == type)
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      if (Main.netMode != 1 && !WorldGen.noTileActions)
      {
        if (type == 12)
          Item.NewItem(num2 * 16, num3 * 16, 32, 32, 29, 1, false, 0, false, false);
        else if (type == 31)
        {
          if (WorldGen.genRand.Next(2) == 0)
            WorldGen.spawnMeteor = true;
          if (flag)
          {
            int num4 = Main.rand.Next(5);
            if (!WorldGen.shadowOrbSmashed)
              num4 = 0;
            if (num4 == 0)
            {
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 800, 1, false, -1, false, false);
              int Stack = WorldGen.genRand.Next(100, 101);
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 97, Stack, false, 0, false, false);
            }
            else if (num4 == 1)
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 1256, 1, false, -1, false, false);
            else if (num4 == 2)
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 802, 1, false, -1, false, false);
            else if (num4 == 3)
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 3062, 1, false, -1, false, false);
            else if (num4 == 4)
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 1290, 1, false, -1, false, false);
          }
          else
          {
            int num4 = Main.rand.Next(5);
            if (!WorldGen.shadowOrbSmashed)
              num4 = 0;
            if (num4 == 0)
            {
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 96, 1, false, -1, false, false);
              int Stack = WorldGen.genRand.Next(100, 101);
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 97, Stack, false, 0, false, false);
            }
            else if (num4 == 1)
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 64, 1, false, -1, false, false);
            else if (num4 == 2)
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 162, 1, false, -1, false, false);
            else if (num4 == 3)
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 115, 1, false, -1, false, false);
            else if (num4 == 4)
              Item.NewItem(num2 * 16, num3 * 16, 32, 32, 111, 1, false, -1, false, false);
          }
          WorldGen.shadowOrbSmashed = true;
          ++WorldGen.shadowOrbCount;
          if (WorldGen.shadowOrbCount >= 3)
          {
            WorldGen.shadowOrbCount = 0;
            float num4 = (float) (num2 * 16);
            float num5 = (float) (num3 * 16);
            float num6 = -1f;
            int plr = 0;
            for (int index = 0; index < (int) byte.MaxValue; ++index)
            {
              float num7 = Math.Abs((float) Main.player[index].position.X - num4) + Math.Abs((float) Main.player[index].position.Y - num5);
              if ((double) num7 < (double) num6 || (double) num6 == -1.0)
              {
                plr = index;
                num6 = num7;
              }
            }
            if (flag)
              NPC.SpawnOnPlayer(plr, 266);
            else
              NPC.SpawnOnPlayer(plr, 13);
          }
          else
          {
            LocalizedText localizedText = Lang.misc[10];
            if (WorldGen.shadowOrbCount == 2)
              localizedText = Lang.misc[11];
            if (Main.netMode == 0)
              Main.NewText(localizedText.ToString(), (byte) 50, byte.MaxValue, (byte) 130, false);
            else if (Main.netMode == 2)
              NetMessage.BroadcastChatMessage(NetworkText.FromKey(localizedText.Key), new Color(50, (int) byte.MaxValue, 130), -1);
          }
          AchievementsHelper.NotifyProgressionEvent(7);
        }
      }
      if (flag)
        Main.PlaySound(4, i * 16, j * 16, 1, 1f, 0.0f);
      else
        Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
      WorldGen.destroyObject = false;
    }

    public static void CheckPalmTree(int i, int j)
    {
      int num1 = -1;
      int num2 = -1;
      int type = (int) Main.tile[i, j].type;
      int frameX = (int) Main.tile[i, j].frameX;
      int frameY = (int) Main.tile[i, j].frameY;
      if (Main.tile[i, j - 1] != null && Main.tile[i, j - 1].active())
        num1 = (int) Main.tile[i, j - 1].type;
      if (Main.tile[i, j + 1] != null && Main.tile[i, j + 1].active())
        num2 = (int) Main.tile[i, j + 1].type;
      if (num2 == 53)
        num2 = 53;
      if (num2 == 234)
        num2 = 53;
      if (num2 == 116)
        num2 = 53;
      if (num2 == 112)
        num2 = 53;
      if (num2 != 53 && num2 != type)
        WorldGen.KillTile(i, j, false, false, false);
      if (((int) Main.tile[i, j].frameX == 66 || (int) Main.tile[i, j].frameX == 220) && num2 != 53)
        WorldGen.KillTile(i, j, false, false, false);
      if (num1 != type && (int) Main.tile[i, j].frameX <= 44)
        Main.tile[i, j].frameX = (short) (WorldGen.genRand.Next(7, 10) * 22);
      else if (num1 != type && (int) Main.tile[i, j].frameX == 66)
        Main.tile[i, j].frameX = (short) 220;
      if ((int) Main.tile[i, j].frameX == frameX || (int) Main.tile[i, j].frameY == frameY || (frameX < 0 || frameY < 0))
        return;
      WorldGen.TileFrame(i - 1, j, false, false);
      WorldGen.TileFrame(i + 1, j, false, false);
      WorldGen.TileFrame(i, j - 1, false, false);
      WorldGen.TileFrame(i, j + 1, false, false);
    }

    public static void CheckTree(int i, int j)
    {
      int num1 = -1;
      int num2 = -1;
      int num3 = -1;
      int num4 = -1;
      int type1 = (int) Main.tile[i, j].type;
      int frameX = (int) Main.tile[i, j].frameX;
      int frameY = (int) Main.tile[i, j].frameY;
      if (Main.tile[i - 1, j] != null && Main.tile[i - 1, j].active())
        num2 = (int) Main.tile[i - 1, j].type;
      if (Main.tile[i + 1, j] != null && Main.tile[i + 1, j].active())
        num3 = (int) Main.tile[i + 1, j].type;
      if (Main.tile[i, j - 1] != null && Main.tile[i, j - 1].active())
        num1 = (int) Main.tile[i, j - 1].type;
      if (Main.tile[i, j + 1] != null && Main.tile[i, j + 1].active())
        num4 = (int) Main.tile[i, j + 1].type;
      if (Main.tile[i - 1, j - 1] != null && Main.tile[i - 1, j - 1].active())
      {
        int type2 = (int) Main.tile[i - 1, j - 1].type;
      }
      if (Main.tile[i + 1, j - 1] != null && Main.tile[i + 1, j - 1].active())
      {
        int type3 = (int) Main.tile[i + 1, j - 1].type;
      }
      if (Main.tile[i - 1, j + 1] != null && Main.tile[i - 1, j + 1].active())
      {
        int type4 = (int) Main.tile[i - 1, j + 1].type;
      }
      if (Main.tile[i + 1, j + 1] != null && Main.tile[i + 1, j + 1].active())
      {
        int type5 = (int) Main.tile[i + 1, j + 1].type;
      }
      if (num4 == 23)
        num4 = 2;
      if (num4 == 60)
        num4 = 2;
      if (num4 == 70)
        num4 = 2;
      if (num4 == 109)
        num4 = 2;
      if (num4 == 147)
        num4 = 2;
      if (num4 == 199)
        num4 = 2;
      if (num4 != 2 && num4 != type1 && ((int) Main.tile[i, j].frameX == 0 && (int) Main.tile[i, j].frameY <= 130 || (int) Main.tile[i, j].frameX == 22 && (int) Main.tile[i, j].frameY <= 130 || (int) Main.tile[i, j].frameX == 44 && (int) Main.tile[i, j].frameY <= 130))
        WorldGen.KillTile(i, j, false, false, false);
      if ((int) Main.tile[i, j].frameX >= 22 && (int) Main.tile[i, j].frameX <= 44 && ((int) Main.tile[i, j].frameY >= 132 && (int) Main.tile[i, j].frameY <= 176))
      {
        if (num4 != 2)
          WorldGen.KillTile(i, j, false, false, false);
        else if (((int) Main.tile[i, j].frameX != 22 || num2 != type1) && ((int) Main.tile[i, j].frameX != 44 || num3 != type1))
          WorldGen.KillTile(i, j, false, false, false);
      }
      else if ((int) Main.tile[i, j].frameX == 88 && (int) Main.tile[i, j].frameY >= 0 && (int) Main.tile[i, j].frameY <= 44 || (int) Main.tile[i, j].frameX == 66 && (int) Main.tile[i, j].frameY >= 66 && (int) Main.tile[i, j].frameY <= 130 || ((int) Main.tile[i, j].frameX == 110 && (int) Main.tile[i, j].frameY >= 66 && (int) Main.tile[i, j].frameY <= 110 || (int) Main.tile[i, j].frameX == 132 && (int) Main.tile[i, j].frameY >= 0 && (int) Main.tile[i, j].frameY <= 176))
      {
        if (num2 == type1 && num3 == type1)
        {
          if ((int) Main.tile[i, j].frameNumber() == 0)
          {
            Main.tile[i, j].frameX = (short) 110;
            Main.tile[i, j].frameY = (short) 66;
          }
          if ((int) Main.tile[i, j].frameNumber() == 1)
          {
            Main.tile[i, j].frameX = (short) 110;
            Main.tile[i, j].frameY = (short) 88;
          }
          if ((int) Main.tile[i, j].frameNumber() == 2)
          {
            Main.tile[i, j].frameX = (short) 110;
            Main.tile[i, j].frameY = (short) 110;
          }
        }
        else if (num2 == type1)
        {
          if ((int) Main.tile[i, j].frameNumber() == 0)
          {
            Main.tile[i, j].frameX = (short) 88;
            Main.tile[i, j].frameY = (short) 0;
          }
          if ((int) Main.tile[i, j].frameNumber() == 1)
          {
            Main.tile[i, j].frameX = (short) 88;
            Main.tile[i, j].frameY = (short) 22;
          }
          if ((int) Main.tile[i, j].frameNumber() == 2)
          {
            Main.tile[i, j].frameX = (short) 88;
            Main.tile[i, j].frameY = (short) 44;
          }
        }
        else if (num3 == type1)
        {
          if ((int) Main.tile[i, j].frameNumber() == 0)
          {
            Main.tile[i, j].frameX = (short) 66;
            Main.tile[i, j].frameY = (short) 66;
          }
          if ((int) Main.tile[i, j].frameNumber() == 1)
          {
            Main.tile[i, j].frameX = (short) 66;
            Main.tile[i, j].frameY = (short) 88;
          }
          if ((int) Main.tile[i, j].frameNumber() == 2)
          {
            Main.tile[i, j].frameX = (short) 66;
            Main.tile[i, j].frameY = (short) 110;
          }
        }
        else
        {
          if ((int) Main.tile[i, j].frameNumber() == 0)
          {
            Main.tile[i, j].frameX = (short) 0;
            Main.tile[i, j].frameY = (short) 0;
          }
          if ((int) Main.tile[i, j].frameNumber() == 1)
          {
            Main.tile[i, j].frameX = (short) 0;
            Main.tile[i, j].frameY = (short) 22;
          }
          if ((int) Main.tile[i, j].frameNumber() == 2)
          {
            Main.tile[i, j].frameX = (short) 0;
            Main.tile[i, j].frameY = (short) 44;
          }
        }
      }
      if ((int) Main.tile[i, j].frameY >= 132 && (int) Main.tile[i, j].frameY <= 176 && ((int) Main.tile[i, j].frameX == 0 || (int) Main.tile[i, j].frameX == 66 || (int) Main.tile[i, j].frameX == 88))
      {
        if (num4 != 2)
          WorldGen.KillTile(i, j, false, false, false);
        if (num2 != type1 && num3 != type1)
        {
          if ((int) Main.tile[i, j].frameNumber() == 0)
          {
            Main.tile[i, j].frameX = (short) 0;
            Main.tile[i, j].frameY = (short) 0;
          }
          if ((int) Main.tile[i, j].frameNumber() == 1)
          {
            Main.tile[i, j].frameX = (short) 0;
            Main.tile[i, j].frameY = (short) 22;
          }
          if ((int) Main.tile[i, j].frameNumber() == 2)
          {
            Main.tile[i, j].frameX = (short) 0;
            Main.tile[i, j].frameY = (short) 44;
          }
        }
        else if (num2 != type1)
        {
          if ((int) Main.tile[i, j].frameNumber() == 0)
          {
            Main.tile[i, j].frameX = (short) 0;
            Main.tile[i, j].frameY = (short) 132;
          }
          if ((int) Main.tile[i, j].frameNumber() == 1)
          {
            Main.tile[i, j].frameX = (short) 0;
            Main.tile[i, j].frameY = (short) 154;
          }
          if ((int) Main.tile[i, j].frameNumber() == 2)
          {
            Main.tile[i, j].frameX = (short) 0;
            Main.tile[i, j].frameY = (short) 176;
          }
        }
        else if (num3 != type1)
        {
          if ((int) Main.tile[i, j].frameNumber() == 0)
          {
            Main.tile[i, j].frameX = (short) 66;
            Main.tile[i, j].frameY = (short) 132;
          }
          if ((int) Main.tile[i, j].frameNumber() == 1)
          {
            Main.tile[i, j].frameX = (short) 66;
            Main.tile[i, j].frameY = (short) 154;
          }
          if ((int) Main.tile[i, j].frameNumber() == 2)
          {
            Main.tile[i, j].frameX = (short) 66;
            Main.tile[i, j].frameY = (short) 176;
          }
        }
        else
        {
          if ((int) Main.tile[i, j].frameNumber() == 0)
          {
            Main.tile[i, j].frameX = (short) 88;
            Main.tile[i, j].frameY = (short) 132;
          }
          if ((int) Main.tile[i, j].frameNumber() == 1)
          {
            Main.tile[i, j].frameX = (short) 88;
            Main.tile[i, j].frameY = (short) 154;
          }
          if ((int) Main.tile[i, j].frameNumber() == 2)
          {
            Main.tile[i, j].frameX = (short) 88;
            Main.tile[i, j].frameY = (short) 176;
          }
        }
      }
      if ((int) Main.tile[i, j].frameX == 66 && ((int) Main.tile[i, j].frameY == 0 || (int) Main.tile[i, j].frameY == 22 || (int) Main.tile[i, j].frameY == 44) || (int) Main.tile[i, j].frameX == 44 && ((int) Main.tile[i, j].frameY == 198 || (int) Main.tile[i, j].frameY == 220 || (int) Main.tile[i, j].frameY == 242))
      {
        if (num3 != type1)
          WorldGen.KillTile(i, j, false, false, false);
      }
      else if ((int) Main.tile[i, j].frameX == 88 && ((int) Main.tile[i, j].frameY == 66 || (int) Main.tile[i, j].frameY == 88 || (int) Main.tile[i, j].frameY == 110) || (int) Main.tile[i, j].frameX == 66 && ((int) Main.tile[i, j].frameY == 198 || (int) Main.tile[i, j].frameY == 220 || (int) Main.tile[i, j].frameY == 242))
      {
        if (num2 != type1)
          WorldGen.KillTile(i, j, false, false, false);
      }
      else if (num4 == -1 || num4 == 23)
        WorldGen.KillTile(i, j, false, false, false);
      else if (num1 != type1 && (int) Main.tile[i, j].frameY < 198 && ((int) Main.tile[i, j].frameX != 22 && (int) Main.tile[i, j].frameX != 44 || (int) Main.tile[i, j].frameY < 132))
      {
        if (num2 == type1 || num3 == type1)
        {
          if (num4 == type1)
          {
            if (num2 == type1 && num3 == type1)
            {
              if ((int) Main.tile[i, j].frameNumber() == 0)
              {
                Main.tile[i, j].frameX = (short) 132;
                Main.tile[i, j].frameY = (short) 132;
              }
              if ((int) Main.tile[i, j].frameNumber() == 1)
              {
                Main.tile[i, j].frameX = (short) 132;
                Main.tile[i, j].frameY = (short) 154;
              }
              if ((int) Main.tile[i, j].frameNumber() == 2)
              {
                Main.tile[i, j].frameX = (short) 132;
                Main.tile[i, j].frameY = (short) 176;
              }
            }
            else if (num2 == type1)
            {
              if ((int) Main.tile[i, j].frameNumber() == 0)
              {
                Main.tile[i, j].frameX = (short) 132;
                Main.tile[i, j].frameY = (short) 0;
              }
              if ((int) Main.tile[i, j].frameNumber() == 1)
              {
                Main.tile[i, j].frameX = (short) 132;
                Main.tile[i, j].frameY = (short) 22;
              }
              if ((int) Main.tile[i, j].frameNumber() == 2)
              {
                Main.tile[i, j].frameX = (short) 132;
                Main.tile[i, j].frameY = (short) 44;
              }
            }
            else if (num3 == type1)
            {
              if ((int) Main.tile[i, j].frameNumber() == 0)
              {
                Main.tile[i, j].frameX = (short) 132;
                Main.tile[i, j].frameY = (short) 66;
              }
              if ((int) Main.tile[i, j].frameNumber() == 1)
              {
                Main.tile[i, j].frameX = (short) 132;
                Main.tile[i, j].frameY = (short) 88;
              }
              if ((int) Main.tile[i, j].frameNumber() == 2)
              {
                Main.tile[i, j].frameX = (short) 132;
                Main.tile[i, j].frameY = (short) 110;
              }
            }
          }
          else if (num2 == type1 && num3 == type1)
          {
            if ((int) Main.tile[i, j].frameNumber() == 0)
            {
              Main.tile[i, j].frameX = (short) 154;
              Main.tile[i, j].frameY = (short) 132;
            }
            if ((int) Main.tile[i, j].frameNumber() == 1)
            {
              Main.tile[i, j].frameX = (short) 154;
              Main.tile[i, j].frameY = (short) 154;
            }
            if ((int) Main.tile[i, j].frameNumber() == 2)
            {
              Main.tile[i, j].frameX = (short) 154;
              Main.tile[i, j].frameY = (short) 176;
            }
          }
          else if (num2 == type1)
          {
            if ((int) Main.tile[i, j].frameNumber() == 0)
            {
              Main.tile[i, j].frameX = (short) 154;
              Main.tile[i, j].frameY = (short) 0;
            }
            if ((int) Main.tile[i, j].frameNumber() == 1)
            {
              Main.tile[i, j].frameX = (short) 154;
              Main.tile[i, j].frameY = (short) 22;
            }
            if ((int) Main.tile[i, j].frameNumber() == 2)
            {
              Main.tile[i, j].frameX = (short) 154;
              Main.tile[i, j].frameY = (short) 44;
            }
          }
          else if (num3 == type1)
          {
            if ((int) Main.tile[i, j].frameNumber() == 0)
            {
              Main.tile[i, j].frameX = (short) 154;
              Main.tile[i, j].frameY = (short) 66;
            }
            if ((int) Main.tile[i, j].frameNumber() == 1)
            {
              Main.tile[i, j].frameX = (short) 154;
              Main.tile[i, j].frameY = (short) 88;
            }
            if ((int) Main.tile[i, j].frameNumber() == 2)
            {
              Main.tile[i, j].frameX = (short) 154;
              Main.tile[i, j].frameY = (short) 110;
            }
          }
        }
        else
        {
          if ((int) Main.tile[i, j].frameNumber() == 0)
          {
            Main.tile[i, j].frameX = (short) 110;
            Main.tile[i, j].frameY = (short) 0;
          }
          if ((int) Main.tile[i, j].frameNumber() == 1)
          {
            Main.tile[i, j].frameX = (short) 110;
            Main.tile[i, j].frameY = (short) 22;
          }
          if ((int) Main.tile[i, j].frameNumber() == 2)
          {
            Main.tile[i, j].frameX = (short) 110;
            Main.tile[i, j].frameY = (short) 44;
          }
        }
      }
      if ((int) Main.tile[i, j].frameX == frameX || (int) Main.tile[i, j].frameY == frameY || (frameX < 0 || frameY < 0))
        return;
      WorldGen.TileFrame(i - 1, j, false, false);
      WorldGen.TileFrame(i + 1, j, false, false);
      WorldGen.TileFrame(i, j - 1, false, false);
      WorldGen.TileFrame(i, j + 1, false, false);
    }

    public static void Convert(int i, int j, int conversionType, int size = 4)
    {
      for (int index1 = i - size; index1 <= i + size; ++index1)
      {
        for (int index2 = j - size; index2 <= j + size; ++index2)
        {
          if (WorldGen.InWorld(index1, index2, 1) && Math.Abs(index1 - i) + Math.Abs(index2 - j) < 6)
          {
            int type = (int) Main.tile[index1, index2].type;
            int wall = (int) Main.tile[index1, index2].wall;
            if (conversionType == 4)
            {
              if (type <= 470 && wall <= 231)
              {
                if (WallID.Sets.Conversion.Grass[wall] && wall != 81)
                {
                  Main.tile[index1, index2].wall = (byte) 81;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (WallID.Sets.Conversion.Stone[wall] && wall != 83)
                {
                  Main.tile[index1, index2].wall = (byte) 83;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 218)
                {
                  Main.tile[index1, index2].wall = (byte) 218;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 221)
                {
                  Main.tile[index1, index2].wall = (byte) 221;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 203)
                {
                  Main.tile[index1, index2].type = (ushort) 203;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Grass[type] && type != 199)
                {
                  Main.tile[index1, index2].type = (ushort) 199;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Ice[type] && type != 200)
                {
                  Main.tile[index1, index2].type = (ushort) 200;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Sand[type] && type != 234)
                {
                  Main.tile[index1, index2].type = (ushort) 234;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.HardenedSand[type] && type != 399)
                {
                  Main.tile[index1, index2].type = (ushort) 399;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Sandstone[type] && type != 401)
                {
                  Main.tile[index1, index2].type = (ushort) 401;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Thorn[type] && type != 352)
                {
                  Main.tile[index1, index2].type = (ushort) 352;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if (type == 59 && ((int) Main.tile[index1 - 1, index2].type == 199 || (int) Main.tile[index1 + 1, index2].type == 199 || ((int) Main.tile[index1, index2 - 1].type == 199 || (int) Main.tile[index1, index2 + 1].type == 199)))
                {
                  Main.tile[index1, index2].type = (ushort) 0;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
              }
            }
            else if (conversionType == 2)
            {
              if (type <= 470 && wall <= 231)
              {
                if (WallID.Sets.Conversion.Grass[wall] && wall != 70)
                {
                  Main.tile[index1, index2].wall = (byte) 70;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (WallID.Sets.Conversion.Stone[wall] && wall != 28)
                {
                  Main.tile[index1, index2].wall = (byte) 28;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 219)
                {
                  Main.tile[index1, index2].wall = (byte) 219;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 222)
                {
                  Main.tile[index1, index2].wall = (byte) 222;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 117)
                {
                  Main.tile[index1, index2].type = (ushort) 117;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Grass[type] && type != 109)
                {
                  Main.tile[index1, index2].type = (ushort) 109;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Ice[type] && type != 164)
                {
                  Main.tile[index1, index2].type = (ushort) 164;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Sand[type] && type != 116)
                {
                  Main.tile[index1, index2].type = (ushort) 116;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.HardenedSand[type] && type != 402)
                {
                  Main.tile[index1, index2].type = (ushort) 402;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Sandstone[type] && type != 403)
                {
                  Main.tile[index1, index2].type = (ushort) 403;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Thorn[type])
                {
                  WorldGen.KillTile(index1, index2, false, false, false);
                  if (Main.netMode == 1)
                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) index1, (float) index2, 0.0f, 0, 0, 0);
                }
                if (type == 59 && ((int) Main.tile[index1 - 1, index2].type == 109 || (int) Main.tile[index1 + 1, index2].type == 109 || ((int) Main.tile[index1, index2 - 1].type == 109 || (int) Main.tile[index1, index2 + 1].type == 109)))
                {
                  Main.tile[index1, index2].type = (ushort) 0;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
              }
            }
            else if (conversionType == 1)
            {
              if (type <= 470 && wall <= 231)
              {
                if (WallID.Sets.Conversion.Grass[wall] && wall != 69)
                {
                  Main.tile[index1, index2].wall = (byte) 69;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (WallID.Sets.Conversion.Stone[wall] && wall != 3)
                {
                  Main.tile[index1, index2].wall = (byte) 3;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 217)
                {
                  Main.tile[index1, index2].wall = (byte) 217;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 220)
                {
                  Main.tile[index1, index2].wall = (byte) 220;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((Main.tileMoss[type] || TileID.Sets.Conversion.Stone[type]) && type != 25)
                {
                  Main.tile[index1, index2].type = (ushort) 25;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Grass[type] && type != 23)
                {
                  Main.tile[index1, index2].type = (ushort) 23;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Ice[type] && type != 163)
                {
                  Main.tile[index1, index2].type = (ushort) 163;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Sand[type] && type != 112)
                {
                  Main.tile[index1, index2].type = (ushort) 112;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.HardenedSand[type] && type != 398)
                {
                  Main.tile[index1, index2].type = (ushort) 398;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Sandstone[type] && type != 400)
                {
                  Main.tile[index1, index2].type = (ushort) 400;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                else if (TileID.Sets.Conversion.Thorn[type] && type != 32)
                {
                  Main.tile[index1, index2].type = (ushort) 32;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if (type == 59 && ((int) Main.tile[index1 - 1, index2].type == 23 || (int) Main.tile[index1 + 1, index2].type == 23 || ((int) Main.tile[index1, index2 - 1].type == 23 || (int) Main.tile[index1, index2 + 1].type == 23)))
                {
                  Main.tile[index1, index2].type = (ushort) 0;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
              }
            }
            else if (conversionType == 3)
            {
              if ((int) Main.tile[index1, index2].wall == 64 || (int) Main.tile[index1, index2].wall == 15)
              {
                Main.tile[index1, index2].wall = (byte) 80;
                WorldGen.SquareWallFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 3, TileChangeType.None);
              }
              if ((int) Main.tile[index1, index2].type == 60)
              {
                Main.tile[index1, index2].type = (ushort) 70;
                WorldGen.SquareTileFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 3, TileChangeType.None);
              }
              else if (TileID.Sets.Conversion.Thorn[type])
              {
                WorldGen.KillTile(index1, index2, false, false, false);
                if (Main.netMode == 1)
                  NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) index1, (float) index2, 0.0f, 0, 0, 0);
              }
            }
            else
            {
              if ((int) Main.tile[index1, index2].wall == 69 || (int) Main.tile[index1, index2].wall == 70 || (int) Main.tile[index1, index2].wall == 81)
              {
                Main.tile[index1, index2].wall = (double) index2 >= Main.worldSurface ? (byte) 64 : (WorldGen.genRand.Next(10) != 0 ? (byte) 63 : (byte) 65);
                WorldGen.SquareWallFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
              }
              else if ((int) Main.tile[index1, index2].wall == 3 || (int) Main.tile[index1, index2].wall == 28 || (int) Main.tile[index1, index2].wall == 83)
              {
                Main.tile[index1, index2].wall = (byte) 1;
                WorldGen.SquareWallFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
              }
              else if ((int) Main.tile[index1, index2].wall == 80)
              {
                if ((double) index2 < Main.worldSurface + 4.0 + (double) WorldGen.genRand.Next(3) || (double) index2 > ((double) Main.maxTilesY + Main.rockLayer) / 2.0 - 3.0 + (double) WorldGen.genRand.Next(3))
                {
                  Main.tile[index1, index2].wall = (byte) 15;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 3, TileChangeType.None);
                }
                else
                {
                  Main.tile[index1, index2].wall = (byte) 64;
                  WorldGen.SquareWallFrame(index1, index2, true);
                  NetMessage.SendTileSquare(-1, index1, index2, 3, TileChangeType.None);
                }
              }
              else if (WallID.Sets.Conversion.HardenedSand[wall] && wall != 216)
              {
                Main.tile[index1, index2].wall = (byte) 216;
                WorldGen.SquareWallFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
              }
              else if (WallID.Sets.Conversion.Sandstone[wall] && wall != 187)
              {
                Main.tile[index1, index2].wall = (byte) 187;
                WorldGen.SquareWallFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
              }
              if ((int) Main.tile[index1, index2].type == 23 || (int) Main.tile[index1, index2].type == 109 || (int) Main.tile[index1, index2].type == 199)
              {
                Main.tile[index1, index2].type = (ushort) 2;
                WorldGen.SquareTileFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
              }
              else if ((int) Main.tile[index1, index2].type == 117 || (int) Main.tile[index1, index2].type == 25 || (int) Main.tile[index1, index2].type == 203)
              {
                Main.tile[index1, index2].type = (ushort) 1;
                WorldGen.SquareTileFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
              }
              else if ((int) Main.tile[index1, index2].type == 112 || (int) Main.tile[index1, index2].type == 116 || (int) Main.tile[index1, index2].type == 234)
              {
                Main.tile[index1, index2].type = (ushort) 53;
                WorldGen.SquareTileFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
              }
              else if ((int) Main.tile[index1, index2].type == 398 || (int) Main.tile[index1, index2].type == 402 || (int) Main.tile[index1, index2].type == 399)
              {
                Main.tile[index1, index2].type = (ushort) 397;
                WorldGen.SquareTileFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
              }
              else if ((int) Main.tile[index1, index2].type == 400 || (int) Main.tile[index1, index2].type == 403 || (int) Main.tile[index1, index2].type == 401)
              {
                Main.tile[index1, index2].type = (ushort) 396;
                WorldGen.SquareTileFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
              }
              else if ((int) Main.tile[index1, index2].type == 164 || (int) Main.tile[index1, index2].type == 163 || (int) Main.tile[index1, index2].type == 200)
              {
                Main.tile[index1, index2].type = (ushort) 161;
                WorldGen.SquareTileFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
              }
              else if ((int) Main.tile[index1, index2].type == 70)
              {
                Main.tile[index1, index2].type = (ushort) 60;
                WorldGen.SquareTileFrame(index1, index2, true);
                NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
              }
              else if ((int) Main.tile[index1, index2].type == 32 || (int) Main.tile[index1, index2].type == 352)
              {
                WorldGen.KillTile(index1, index2, false, false, false);
                if (Main.netMode == 1)
                  NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) index1, (float) index2, 0.0f, 0, 0, 0);
              }
            }
          }
        }
      }
    }

    public static void CactusFrame(int i, int j)
    {
      try
      {
        int index1 = j;
        int index2 = i;
        if (WorldGen.CheckCactus(i, j))
          return;
        while (Main.tile[index2, index1].active() && (int) Main.tile[index2, index1].type == 80)
        {
          ++index1;
          if (Main.tile[index2, index1] == null)
            return;
          if (!Main.tile[index2, index1].active() || (int) Main.tile[index2, index1].type != 80)
          {
            if (Main.tile[index2 - 1, index1] != null && Main.tile[index2 - 1, index1].active() && ((int) Main.tile[index2 - 1, index1].type == 80 && Main.tile[index2 - 1, index1 - 1].active()) && ((int) Main.tile[index2 - 1, index1 - 1].type == 80 && index2 >= i))
              --index2;
            if (Main.tile[index2 + 1, index1] != null && Main.tile[index2 + 1, index1].active() && ((int) Main.tile[index2 + 1, index1].type == 80 && Main.tile[index2 + 1, index1 - 1].active()) && ((int) Main.tile[index2 + 1, index1 - 1].type == 80 && index2 <= i))
              ++index2;
          }
        }
        int num1 = index1 - 1;
        int num2 = i - index2;
        num1 = j;
        if (Main.tile[i - 2, j] == null)
          return;
        int type = (int) Main.tile[i - 2, j].type;
        if (Main.tile[i - 1, j] == null)
          return;
        int num3 = (int) Main.tile[i - 1, j].type;
        if (Main.tile[i + 1, j] == null)
          return;
        int num4 = (int) Main.tile[i + 1, j].type;
        int num5 = (int) Main.tile[i, j - 1].type;
        if (num5 == 227)
          num5 = 80;
        int index3 = (int) Main.tile[i, j + 1].type;
        int num6 = (int) Main.tile[i - 1, j + 1].type;
        int num7 = (int) Main.tile[i + 1, j + 1].type;
        if (!Main.tile[i - 1, j].active())
          num3 = -1;
        if (!Main.tile[i + 1, j].active())
          num4 = -1;
        if (!Main.tile[i, j - 1].active())
          num5 = -1;
        if (!Main.tile[i, j + 1].active())
          index3 = -1;
        if (!Main.tile[i - 1, j + 1].active())
          num6 = -1;
        if (!Main.tile[i + 1, j + 1].active())
          num7 = -1;
        short num8 = Main.tile[i, j].frameX;
        short num9 = Main.tile[i, j].frameY;
        if (num2 == 0)
        {
          if (num5 != 80)
          {
            if (num3 == 80 && num4 == 80 && (num6 != 80 && num7 != 80) && type != 80)
            {
              num8 = (short) 90;
              num9 = (short) 0;
            }
            else if (num3 == 80 && num6 != 80 && type != 80)
            {
              num8 = (short) 72;
              num9 = (short) 0;
            }
            else if (num4 == 80 && num7 != 80)
            {
              num8 = (short) 18;
              num9 = (short) 0;
            }
            else
            {
              num8 = (short) 0;
              num9 = (short) 0;
            }
          }
          else if (num3 == 80 && num4 == 80 && (num6 != 80 && num7 != 80) && type != 80)
          {
            num8 = (short) 90;
            num9 = (short) 36;
          }
          else if (num3 == 80 && num6 != 80 && type != 80)
          {
            num8 = (short) 72;
            num9 = (short) 36;
          }
          else if (num4 == 80 && num7 != 80)
          {
            num8 = (short) 18;
            num9 = (short) 36;
          }
          else if (index3 >= 0 && Main.tileSolid[index3])
          {
            num8 = (short) 0;
            num9 = (short) 36;
          }
          else
          {
            num8 = (short) 0;
            num9 = (short) 18;
          }
        }
        else if (num2 == -1)
        {
          if (num4 == 80)
          {
            if (num5 != 80 && index3 != 80)
            {
              num8 = (short) 108;
              num9 = (short) 36;
            }
            else if (index3 != 80)
            {
              num8 = (short) 54;
              num9 = (short) 36;
            }
            else if (num5 != 80)
            {
              num8 = (short) 54;
              num9 = (short) 0;
            }
            else
            {
              num8 = (short) 54;
              num9 = (short) 18;
            }
          }
          else if (num5 != 80)
          {
            num8 = (short) 54;
            num9 = (short) 0;
          }
          else
          {
            num8 = (short) 54;
            num9 = (short) 18;
          }
        }
        else if (num2 == 1)
        {
          if (num3 == 80)
          {
            if (num5 != 80 && index3 != 80)
            {
              num8 = (short) 108;
              num9 = (short) 18;
            }
            else if (index3 != 80)
            {
              num8 = (short) 36;
              num9 = (short) 36;
            }
            else if (num5 != 80)
            {
              num8 = (short) 36;
              num9 = (short) 0;
            }
            else
            {
              num8 = (short) 36;
              num9 = (short) 18;
            }
          }
          else if (num5 != 80)
          {
            num8 = (short) 36;
            num9 = (short) 0;
          }
          else
          {
            num8 = (short) 36;
            num9 = (short) 18;
          }
        }
        if ((int) num8 == (int) Main.tile[i, j].frameX && (int) num9 == (int) Main.tile[i, j].frameY)
          return;
        Main.tile[i, j].frameX = num8;
        Main.tile[i, j].frameY = num9;
        WorldGen.DiamondTileFrame(i, j);
      }
      catch
      {
        Main.tile[i, j].frameX = (short) 0;
        Main.tile[i, j].frameY = (short) 0;
      }
    }

    public static void GrowCactus(int i, int j)
    {
      int index1 = j;
      int i1 = i;
      if (!Main.tile[i, j].nactive() || Main.tile[i, j].halfBrick() || ((int) Main.tile[i, j].slope() != 0 || (int) Main.tile[i, j - 1].liquid > 0) || (int) Main.tile[i, j].type != 53 && (int) Main.tile[i, j].type != 80 && ((int) Main.tile[i, j].type != 234 && (int) Main.tile[i, j].type != 112) && (int) Main.tile[i, j].type != 116)
        return;
      if ((int) Main.tile[i, j].type == 53 || (int) Main.tile[i, j].type == 112 || ((int) Main.tile[i, j].type == 116 || (int) Main.tile[i, j].type == 234))
      {
        if (Main.tile[i, j - 1].active() || Main.tile[i - 1, j - 1].active() || Main.tile[i + 1, j - 1].active())
          return;
        int num1 = 0;
        int num2 = 0;
        for (int index2 = i - 6; index2 <= i + 6; ++index2)
        {
          for (int index3 = j - 3; index3 <= j + 1; ++index3)
          {
            try
            {
              if (Main.tile[index2, index3].active())
              {
                if ((int) Main.tile[index2, index3].type == 80)
                {
                  ++num1;
                  if (num1 >= 4)
                    return;
                }
                if ((int) Main.tile[index2, index3].type != 53 && (int) Main.tile[index2, index3].type != 112 && (int) Main.tile[index2, index3].type != 116)
                {
                  if ((int) Main.tile[index2, index3].type != 234)
                    continue;
                }
                ++num2;
              }
            }
            catch
            {
            }
          }
        }
        if (num2 <= 10)
          return;
        Main.tile[i, j - 1].active(true);
        Main.tile[i, j - 1].type = (ushort) 80;
        if (Main.netMode == 2)
          NetMessage.SendTileSquare(-1, i, j - 1, 1, TileChangeType.None);
        WorldGen.SquareTileFrame(i1, index1 - 1, true);
      }
      else
      {
        if ((int) Main.tile[i, j].type != 80)
          return;
        while (Main.tile[i1, index1].active() && (int) Main.tile[i1, index1].type == 80)
        {
          ++index1;
          if (!Main.tile[i1, index1].active() || (int) Main.tile[i1, index1].type != 80)
          {
            if (Main.tile[i1 - 1, index1].active() && (int) Main.tile[i1 - 1, index1].type == 80 && (Main.tile[i1 - 1, index1 - 1].active() && (int) Main.tile[i1 - 1, index1 - 1].type == 80) && i1 >= i)
              --i1;
            if (Main.tile[i1 + 1, index1].active() && (int) Main.tile[i1 + 1, index1].type == 80 && (Main.tile[i1 + 1, index1 - 1].active() && (int) Main.tile[i1 + 1, index1 - 1].type == 80) && i1 <= i)
              ++i1;
          }
        }
        int num1 = index1 - 1 - j;
        int num2 = i - i1;
        int num3 = i - num2;
        int num4 = j;
        int num5 = 11 - num1;
        int num6 = 0;
        for (int index2 = num3 - 2; index2 <= num3 + 2; ++index2)
        {
          for (int index3 = num4 - num5; index3 <= num4 + num1; ++index3)
          {
            if (Main.tile[index2, index3].active() && (int) Main.tile[index2, index3].type == 80)
              ++num6;
          }
        }
        if (num6 >= WorldGen.genRand.Next(11, 13))
          return;
        int index4 = i;
        int index5 = j;
        if (num2 == 0)
        {
          if (num1 == 0)
          {
            if (Main.tile[index4, index5 - 1].active())
              return;
            Main.tile[index4, index5 - 1].active(true);
            Main.tile[index4, index5 - 1].type = (ushort) 80;
            WorldGen.SquareTileFrame(index4, index5 - 1, true);
            if (Main.netMode != 2)
              return;
            NetMessage.SendTileSquare(-1, index4, index5 - 1, 1, TileChangeType.None);
          }
          else
          {
            bool flag1 = false;
            bool flag2 = false;
            if (Main.tile[index4, index5 - 1].active() && (int) Main.tile[index4, index5 - 1].type == 80)
            {
              if (!Main.tile[index4 - 1, index5].active() && !Main.tile[index4 - 2, index5 + 1].active() && (!Main.tile[index4 - 1, index5 - 1].active() && !Main.tile[index4 - 1, index5 + 1].active()) && !Main.tile[index4 - 2, index5].active())
                flag1 = true;
              if (!Main.tile[index4 + 1, index5].active() && !Main.tile[index4 + 2, index5 + 1].active() && (!Main.tile[index4 + 1, index5 - 1].active() && !Main.tile[index4 + 1, index5 + 1].active()) && !Main.tile[index4 + 2, index5].active())
                flag2 = true;
            }
            int num7 = WorldGen.genRand.Next(3);
            if (num7 == 0 & flag1)
            {
              Main.tile[index4 - 1, index5].active(true);
              Main.tile[index4 - 1, index5].type = (ushort) 80;
              WorldGen.SquareTileFrame(index4 - 1, index5, true);
              if (Main.netMode != 2)
                return;
              NetMessage.SendTileSquare(-1, index4 - 1, index5, 1, TileChangeType.None);
            }
            else if (num7 == 1 & flag2)
            {
              Main.tile[index4 + 1, index5].active(true);
              Main.tile[index4 + 1, index5].type = (ushort) 80;
              WorldGen.SquareTileFrame(index4 + 1, index5, true);
              if (Main.netMode != 2)
                return;
              NetMessage.SendTileSquare(-1, index4 + 1, index5, 1, TileChangeType.None);
            }
            else
            {
              if (num1 >= WorldGen.genRand.Next(2, 8))
                return;
              if (Main.tile[index4 - 1, index5 - 1].active())
              {
                int type = (int) Main.tile[index4 - 1, index5 - 1].type;
              }
              if (Main.tile[index4 + 1, index5 - 1].active() && (int) Main.tile[index4 + 1, index5 - 1].type == 80 || Main.tile[index4, index5 - 1].active())
                return;
              Main.tile[index4, index5 - 1].active(true);
              Main.tile[index4, index5 - 1].type = (ushort) 80;
              WorldGen.SquareTileFrame(index4, index5 - 1, true);
              if (Main.netMode != 2)
                return;
              NetMessage.SendTileSquare(-1, index4, index5 - 1, 1, TileChangeType.None);
            }
          }
        }
        else
        {
          if (Main.tile[index4, index5 - 1].active() || Main.tile[index4, index5 - 2].active() || (Main.tile[index4 + num2, index5 - 1].active() || !Main.tile[index4 - num2, index5 - 1].active()) || (int) Main.tile[index4 - num2, index5 - 1].type != 80)
            return;
          Main.tile[index4, index5 - 1].active(true);
          Main.tile[index4, index5 - 1].type = (ushort) 80;
          WorldGen.SquareTileFrame(index4, index5 - 1, true);
          if (Main.netMode != 2)
            return;
          NetMessage.SendTileSquare(-1, index4, index5 - 1, 1, TileChangeType.None);
        }
      }
    }

    public static void CheckPot(int i, int j, int type = 28)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = 0;
      int num2 = j;
      int num3 = num1 + (int) Main.tile[i, j].frameX / 18;
      while (num3 > 1)
        num3 -= 2;
      int num4 = num3 * -1 + i;
      int num5 = (int) Main.tile[i, j].frameY / 18;
      int num6 = 0;
      while (num5 > 1)
      {
        num5 -= 2;
        ++num6;
      }
      int num7 = num2 - num5;
      for (int i1 = num4; i1 < num4 + 2; ++i1)
      {
        for (int index = num7; index < num7 + 2; ++index)
        {
          if (Main.tile[i1, index] == null)
            Main.tile[i1, index] = new Tile();
          int num8 = (int) Main.tile[i1, index].frameX / 18;
          while (num8 > 1)
            num8 -= 2;
          if (!Main.tile[i1, index].active() || (int) Main.tile[i1, index].type != type || (num8 != i1 - num4 || (int) Main.tile[i1, index].frameY != (index - num7) * 18 + num6 * 36))
            flag = true;
        }
        if (Main.tile[i1, num7 + 2] == null)
          Main.tile[i1, num7 + 2] = new Tile();
        if (!WorldGen.SolidTile2(i1, num7 + 2))
          flag = true;
      }
      if (!flag)
        return;
      WorldGen.destroyObject = true;
      if (num6 >= 7 && num6 <= 9)
        Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0.0f);
      else if (num6 >= 16 && num6 <= 24)
        Main.PlaySound(4, i * 16, j * 16, 1, 1f, 0.0f);
      else
        Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
      for (int i1 = num4; i1 < num4 + 2; ++i1)
      {
        for (int j1 = num7; j1 < num7 + 2; ++j1)
        {
          if ((int) Main.tile[i1, j1].type == type && Main.tile[i1, j1].active())
            WorldGen.KillTile(i1, j1, false, false, false);
        }
      }
      float num9 = 1f;
      if (num6 == 0)
      {
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 51, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 52, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 53, 1f);
      }
      else if (num6 == 1)
      {
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 166, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 167, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 168, 1f);
      }
      else if (num6 == 2)
      {
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 169, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 170, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 171, 1f);
      }
      else if (num6 == 3)
      {
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 172, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 173, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 174, 1f);
      }
      else if (num6 >= 4 && num6 <= 6)
      {
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 197, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 198, 1f);
        num9 = 1.25f;
      }
      else if (num6 >= 7 && num6 <= 9)
      {
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 199, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 200, 1f);
        num9 = 1.75f;
      }
      else if (num6 >= 10 && num6 <= 12)
      {
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 201, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 202, 1f);
        num9 = 1.9f;
      }
      else if (num6 >= 13 && num6 <= 15)
      {
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 203, 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 204, 1f);
        num9 = 2.1f;
      }
      else if (num6 >= 16 && num6 <= 18)
        num9 = 1.6f;
      else if (num6 >= 19 && num6 <= 21)
        num9 = 3.5f;
      else if (num6 >= 22 && num6 <= 24)
        num9 = 1.6f;
      else if (num6 >= 25 && num6 <= 27)
      {
        num9 = 10f;
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, WorldGen.genRand.Next(217, 220), 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, WorldGen.genRand.Next(217, 220), 1f);
      }
      else if (num6 >= 28 && num6 <= 30)
      {
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, WorldGen.genRand.Next(315, 317), 1f);
        Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, WorldGen.genRand.Next(315, 317), 1f);
        if (Main.hardMode)
          num9 = 4f;
      }
      else if (num6 >= 31 && num6 <= 33)
      {
        int num8 = WorldGen.genRand.Next(2, 5);
        for (int index = 0; index < num8; ++index)
          Gore.NewGore(new Vector2((float) (i * 16), (float) (j * 16)), (Vector2) null, 698 + WorldGen.genRand.Next(6), 1f);
        num9 = 2f;
      }
      float num10 = (float) (((double) num9 * 2.0 + 1.0) / 3.0);
      int maxValue = (int) (250.0 / (((double) num10 + 1.0) / 2.0));
      if (!WorldGen.gen)
      {
        if (Main.rand.Next(maxValue) == 0)
        {
          if (Main.netMode != 1)
            Projectile.NewProjectile((float) (i * 16 + 16), (float) (j * 16 + 16), 0.0f, -12f, 518, 0, 0.0f, Main.myPlayer, 0.0f, 0.0f);
        }
        else if (WorldGen.genRand.Next(40) == 0 && Main.wallDungeon[(int) Main.tile[i, j].wall] && (double) j > Main.worldSurface)
          Item.NewItem(i * 16, j * 16, 16, 16, 327, 1, false, 0, false, false);
        else if (WorldGen.genRand.Next(45) == 0 || Main.rand.Next(45) == 0 && Main.expertMode)
        {
          if ((double) j < Main.worldSurface)
          {
            int num8 = WorldGen.genRand.Next(10);
            if (num8 == 0)
              Item.NewItem(i * 16, j * 16, 16, 16, 292, 1, false, 0, false, false);
            int num11 = 1;
            if (num8 == num11)
              Item.NewItem(i * 16, j * 16, 16, 16, 298, 1, false, 0, false, false);
            int num12 = 2;
            if (num8 == num12)
              Item.NewItem(i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
            int num13 = 3;
            if (num8 == num13)
              Item.NewItem(i * 16, j * 16, 16, 16, 290, 1, false, 0, false, false);
            int num14 = 4;
            if (num8 == num14)
              Item.NewItem(i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
            int num15 = 5;
            if (num8 == num15)
              Item.NewItem(i * 16, j * 16, 16, 16, 2324, 1, false, 0, false, false);
            int num16 = 6;
            if (num8 == num16)
              Item.NewItem(i * 16, j * 16, 16, 16, 2325, 1, false, 0, false, false);
            int num17 = 7;
            if (num8 >= num17)
              Item.NewItem(i * 16, j * 16, 16, 16, 2350, 1, false, 0, false, false);
          }
          else if ((double) j < Main.rockLayer)
          {
            int num8 = WorldGen.genRand.Next(11);
            if (num8 == 0)
              Item.NewItem(i * 16, j * 16, 16, 16, 289, 1, false, 0, false, false);
            int num11 = 1;
            if (num8 == num11)
              Item.NewItem(i * 16, j * 16, 16, 16, 298, 1, false, 0, false, false);
            int num12 = 2;
            if (num8 == num12)
              Item.NewItem(i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
            int num13 = 3;
            if (num8 == num13)
              Item.NewItem(i * 16, j * 16, 16, 16, 290, 1, false, 0, false, false);
            int num14 = 4;
            if (num8 == num14)
              Item.NewItem(i * 16, j * 16, 16, 16, 303, 1, false, 0, false, false);
            int num15 = 5;
            if (num8 == num15)
              Item.NewItem(i * 16, j * 16, 16, 16, 291, 1, false, 0, false, false);
            int num16 = 6;
            if (num8 == num16)
              Item.NewItem(i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
            int num17 = 7;
            if (num8 == num17)
              Item.NewItem(i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
            int num18 = 8;
            if (num8 == num18)
              Item.NewItem(i * 16, j * 16, 16, 16, 2329, 1, false, 0, false, false);
            int num19 = 9;
            if (num8 >= num19)
              Item.NewItem(i * 16, j * 16, 16, 16, 2350, 1, false, 0, false, false);
          }
          else if (j < Main.maxTilesY - 200)
          {
            int num8 = WorldGen.genRand.Next(15);
            if (num8 == 0)
              Item.NewItem(i * 16, j * 16, 16, 16, 296, 1, false, 0, false, false);
            int num11 = 1;
            if (num8 == num11)
              Item.NewItem(i * 16, j * 16, 16, 16, 295, 1, false, 0, false, false);
            int num12 = 2;
            if (num8 == num12)
              Item.NewItem(i * 16, j * 16, 16, 16, 299, 1, false, 0, false, false);
            int num13 = 3;
            if (num8 == num13)
              Item.NewItem(i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
            int num14 = 4;
            if (num8 == num14)
              Item.NewItem(i * 16, j * 16, 16, 16, 303, 1, false, 0, false, false);
            int num15 = 5;
            if (num8 == num15)
              Item.NewItem(i * 16, j * 16, 16, 16, 305, 1, false, 0, false, false);
            int num16 = 6;
            if (num8 == num16)
              Item.NewItem(i * 16, j * 16, 16, 16, 301, 1, false, 0, false, false);
            int num17 = 7;
            if (num8 == num17)
              Item.NewItem(i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
            int num18 = 8;
            if (num8 == num18)
              Item.NewItem(i * 16, j * 16, 16, 16, 297, 1, false, 0, false, false);
            int num19 = 9;
            if (num8 == num19)
              Item.NewItem(i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
            int num20 = 10;
            if (num8 == num20)
              Item.NewItem(i * 16, j * 16, 16, 16, 2322, 1, false, 0, false, false);
            int num21 = 11;
            if (num8 == num21)
              Item.NewItem(i * 16, j * 16, 16, 16, 2323, 1, false, 0, false, false);
            int num22 = 12;
            if (num8 == num22)
              Item.NewItem(i * 16, j * 16, 16, 16, 2327, 1, false, 0, false, false);
            int num23 = 13;
            if (num8 == num23)
              Item.NewItem(i * 16, j * 16, 16, 16, 2329, 1, false, 0, false, false);
            int num24 = 14;
            if (num8 == num24)
              Item.NewItem(i * 16, j * 16, 16, 16, 2350, 1, false, 0, false, false);
          }
          else
          {
            int num8 = WorldGen.genRand.Next(14);
            if (num8 == 0)
              Item.NewItem(i * 16, j * 16, 16, 16, 296, 1, false, 0, false, false);
            int num11 = 1;
            if (num8 == num11)
              Item.NewItem(i * 16, j * 16, 16, 16, 295, 1, false, 0, false, false);
            int num12 = 2;
            if (num8 == num12)
              Item.NewItem(i * 16, j * 16, 16, 16, 293, 1, false, 0, false, false);
            int num13 = 3;
            if (num8 == num13)
              Item.NewItem(i * 16, j * 16, 16, 16, 288, 1, false, 0, false, false);
            int num14 = 4;
            if (num8 == num14)
              Item.NewItem(i * 16, j * 16, 16, 16, 294, 1, false, 0, false, false);
            int num15 = 5;
            if (num8 == num15)
              Item.NewItem(i * 16, j * 16, 16, 16, 297, 1, false, 0, false, false);
            int num16 = 6;
            if (num8 == num16)
              Item.NewItem(i * 16, j * 16, 16, 16, 304, 1, false, 0, false, false);
            int num17 = 7;
            if (num8 == num17)
              Item.NewItem(i * 16, j * 16, 16, 16, 305, 1, false, 0, false, false);
            int num18 = 8;
            if (num8 == num18)
              Item.NewItem(i * 16, j * 16, 16, 16, 301, 1, false, 0, false, false);
            int num19 = 9;
            if (num8 == num19)
              Item.NewItem(i * 16, j * 16, 16, 16, 302, 1, false, 0, false, false);
            int num20 = 10;
            if (num8 == num20)
              Item.NewItem(i * 16, j * 16, 16, 16, 288, 1, false, 0, false, false);
            int num21 = 11;
            if (num8 == num21)
              Item.NewItem(i * 16, j * 16, 16, 16, 300, 1, false, 0, false, false);
            int num22 = 12;
            if (num8 == num22)
              Item.NewItem(i * 16, j * 16, 16, 16, 2323, 1, false, 0, false, false);
            int num23 = 13;
            if (num8 == num23)
              Item.NewItem(i * 16, j * 16, 16, 16, 2326, 1, false, 0, false, false);
          }
        }
        else if (Main.netMode == 2 && Main.rand.Next(30) == 0)
        {
          Item.NewItem(i * 16, j * 16, 16, 16, 2997, 1, false, 0, false, false);
        }
        else
        {
          int num8 = Main.rand.Next(8);
          if (Main.expertMode)
            --num8;
          if (num8 == 0 && Main.player[(int) Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16)].statLife < Main.player[(int) Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16)].statLifeMax2)
          {
            Item.NewItem(i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
            if (Main.rand.Next(2) == 0)
              Item.NewItem(i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
            if (Main.expertMode)
            {
              if (Main.rand.Next(2) == 0)
                Item.NewItem(i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
              if (Main.rand.Next(2) == 0)
                Item.NewItem(i * 16, j * 16, 16, 16, 58, 1, false, 0, false, false);
            }
          }
          else if (num8 == 1 && Main.player[(int) Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16)].statMana < Main.player[(int) Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16)].statManaMax2)
            Item.NewItem(i * 16, j * 16, 16, 16, 184, 1, false, 0, false, false);
          else if (num8 == 2)
          {
            int Stack = Main.rand.Next(2, 6);
            if (Main.expertMode)
              Stack += Main.rand.Next(1, 7);
            if ((int) Main.tile[i, j].liquid > 0)
              Item.NewItem(i * 16, j * 16, 16, 16, 282, Stack, false, 0, false, false);
            else
              Item.NewItem(i * 16, j * 16, 16, 16, 8, Stack, false, 0, false, false);
          }
          else if (num8 == 3)
          {
            int Stack = Main.rand.Next(10, 21);
            int Type = 40;
            if ((double) j < Main.rockLayer && WorldGen.genRand.Next(2) == 0)
              Type = !Main.hardMode ? 42 : 168;
            if (j > Main.maxTilesY - 200)
              Type = 265;
            else if (Main.hardMode)
              Type = Main.rand.Next(2) != 0 ? 47 : 278;
            Item.NewItem(i * 16, j * 16, 16, 16, Type, Stack, false, 0, false, false);
          }
          else if (num8 == 4)
          {
            int Type = 28;
            if (j > Main.maxTilesY - 200 || Main.hardMode)
              Type = 188;
            int Stack = 1;
            if (Main.expertMode && Main.rand.Next(3) != 0)
              ++Stack;
            Item.NewItem(i * 16, j * 16, 16, 16, Type, Stack, false, 0, false, false);
          }
          else if (num8 == 5 && (double) j > Main.rockLayer)
          {
            int Stack = Main.rand.Next(4) + 1;
            if (Main.expertMode)
              Stack += Main.rand.Next(4);
            Item.NewItem(i * 16, j * 16, 16, 16, 166, Stack, false, 0, false, false);
          }
          else if ((num8 == 5 || num8 == 6) && (j < Main.maxTilesY - 200 && !Main.hardMode))
          {
            int Stack = Main.rand.Next(20, 41);
            Item.NewItem(i * 16, j * 16, 16, 16, 965, Stack, false, 0, false, false);
          }
          else
          {
            float num11 = (float) (200 + WorldGen.genRand.Next(-100, 101));
            if ((double) j < Main.worldSurface)
              num11 *= 0.5f;
            else if ((double) j < Main.rockLayer)
              num11 *= 0.75f;
            else if (j > Main.maxTilesY - 250)
              num11 *= 1.25f;
            float num12 = num11 * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
            if (Main.rand.Next(4) == 0)
              num12 *= (float) (1.0 + (double) Main.rand.Next(5, 11) * 0.00999999977648258);
            if (Main.rand.Next(8) == 0)
              num12 *= (float) (1.0 + (double) Main.rand.Next(10, 21) * 0.00999999977648258);
            if (Main.rand.Next(12) == 0)
              num12 *= (float) (1.0 + (double) Main.rand.Next(20, 41) * 0.00999999977648258);
            if (Main.rand.Next(16) == 0)
              num12 *= (float) (1.0 + (double) Main.rand.Next(40, 81) * 0.00999999977648258);
            if (Main.rand.Next(20) == 0)
              num12 *= (float) (1.0 + (double) Main.rand.Next(50, 101) * 0.00999999977648258);
            if (Main.expertMode)
              num12 *= 2.5f;
            if (Main.expertMode && Main.rand.Next(2) == 0)
              num12 *= 1.25f;
            if (Main.expertMode && Main.rand.Next(3) == 0)
              num12 *= 1.5f;
            if (Main.expertMode && Main.rand.Next(4) == 0)
              num12 *= 1.75f;
            float num13 = num12 * num10;
            if (NPC.downedBoss1)
              num13 *= 1.1f;
            if (NPC.downedBoss2)
              num13 *= 1.1f;
            if (NPC.downedBoss3)
              num13 *= 1.1f;
            if (NPC.downedMechBoss1)
              num13 *= 1.1f;
            if (NPC.downedMechBoss2)
              num13 *= 1.1f;
            if (NPC.downedMechBoss3)
              num13 *= 1.1f;
            if (NPC.downedPlantBoss)
              num13 *= 1.1f;
            if (NPC.downedQueenBee)
              num13 *= 1.1f;
            if (NPC.downedGolemBoss)
              num13 *= 1.1f;
            if (NPC.downedPirates)
              num13 *= 1.1f;
            if (NPC.downedGoblins)
              num13 *= 1.1f;
            if (NPC.downedFrost)
              num13 *= 1.1f;
            while ((int) num13 > 0)
            {
              if ((double) num13 > 1000000.0)
              {
                int Stack = (int) ((double) num13 / 1000000.0);
                if (Stack > 50 && Main.rand.Next(2) == 0)
                  Stack /= Main.rand.Next(3) + 1;
                if (Main.rand.Next(2) == 0)
                  Stack /= Main.rand.Next(3) + 1;
                num13 -= (float) (1000000 * Stack);
                Item.NewItem(i * 16, j * 16, 16, 16, 74, Stack, false, 0, false, false);
              }
              else if ((double) num13 > 10000.0)
              {
                int Stack = (int) ((double) num13 / 10000.0);
                if (Stack > 50 && Main.rand.Next(2) == 0)
                  Stack /= Main.rand.Next(3) + 1;
                if (Main.rand.Next(2) == 0)
                  Stack /= Main.rand.Next(3) + 1;
                num13 -= (float) (10000 * Stack);
                Item.NewItem(i * 16, j * 16, 16, 16, 73, Stack, false, 0, false, false);
              }
              else if ((double) num13 > 100.0)
              {
                int Stack = (int) ((double) num13 / 100.0);
                if (Stack > 50 && Main.rand.Next(2) == 0)
                  Stack /= Main.rand.Next(3) + 1;
                if (Main.rand.Next(2) == 0)
                  Stack /= Main.rand.Next(3) + 1;
                num13 -= (float) (100 * Stack);
                Item.NewItem(i * 16, j * 16, 16, 16, 72, Stack, false, 0, false, false);
              }
              else
              {
                int Stack = (int) num13;
                if (Stack > 50 && Main.rand.Next(2) == 0)
                  Stack /= Main.rand.Next(3) + 1;
                if (Main.rand.Next(2) == 0)
                  Stack /= Main.rand.Next(4) + 1;
                if (Stack < 1)
                  Stack = 1;
                num13 -= (float) Stack;
                Item.NewItem(i * 16, j * 16, 16, 16, 71, Stack, false, 0, false, false);
              }
            }
          }
        }
      }
      WorldGen.destroyObject = false;
    }

    public static int PlaceChest(int x, int y, ushort type = 21, bool notNearOtherChests = false, int style = 0)
    {
      int num = -1;
      TileObject objectData;
      if (TileObject.CanPlace(x, y, (int) type, style, 1, out objectData, false))
      {
        bool flag = true;
        if (notNearOtherChests && Chest.NearOtherChests(x - 1, y - 1))
          flag = false;
        if (flag)
        {
          TileObject.Place(objectData);
          num = Chest.CreateChest(objectData.xCoord, objectData.yCoord, -1);
        }
      }
      else
        num = -1;
      if (num != -1 && Main.netMode == 1 && (int) type == 21)
        NetMessage.SendData(34, -1, -1, (NetworkText) null, 0, (float) x, (float) y, (float) style, 0, 0, 0);
      if (num != -1 && Main.netMode == 1 && (int) type == 467)
        NetMessage.SendData(34, -1, -1, (NetworkText) null, 4, (float) x, (float) y, (float) style, 0, 0, 0);
      return num;
    }

    public static void PlaceChestDirect(int x, int y, ushort type, int style, int id)
    {
      Chest.CreateChest(x, y - 1, id);
      for (int index1 = 0; index1 <= 1; ++index1)
      {
        for (int index2 = -1; index2 <= 0; ++index2)
        {
          if (Main.tile[x + index1, y + index2] == null)
            Main.tile[x + index1, y + index2] = new Tile();
        }
      }
      Main.tile[x, y - 1].active(true);
      Main.tile[x, y - 1].frameY = (short) 0;
      Main.tile[x, y - 1].frameX = (short) (36 * style);
      Main.tile[x, y - 1].type = type;
      Main.tile[x, y - 1].halfBrick(false);
      Main.tile[x + 1, y - 1].active(true);
      Main.tile[x + 1, y - 1].frameY = (short) 0;
      Main.tile[x + 1, y - 1].frameX = (short) (18 + 36 * style);
      Main.tile[x + 1, y - 1].type = type;
      Main.tile[x + 1, y - 1].halfBrick(false);
      Main.tile[x, y].active(true);
      Main.tile[x, y].frameY = (short) 18;
      Main.tile[x, y].frameX = (short) (36 * style);
      Main.tile[x, y].type = type;
      Main.tile[x, y].halfBrick(false);
      Main.tile[x + 1, y].active(true);
      Main.tile[x + 1, y].frameY = (short) 18;
      Main.tile[x + 1, y].frameX = (short) (18 + 36 * style);
      Main.tile[x + 1, y].type = type;
      Main.tile[x + 1, y].halfBrick(false);
    }

    public static void PlaceDresserDirect(int x, int y, ushort type, int style, int id)
    {
      Chest.CreateChest(x - 1, y - 1, id);
      for (int index1 = -1; index1 <= 1; ++index1)
      {
        for (int index2 = -1; index2 <= 0; ++index2)
        {
          if (Main.tile[x + index1, y + index2] == null)
            Main.tile[x + index1, y + index2] = new Tile();
        }
      }
      short num = (short) (style * 54);
      Main.tile[x - 1, y - 1].active(true);
      Main.tile[x - 1, y - 1].frameY = (short) 0;
      Main.tile[x - 1, y - 1].frameX = num;
      Main.tile[x - 1, y - 1].type = type;
      Main.tile[x, y - 1].active(true);
      Main.tile[x, y - 1].frameY = (short) 0;
      Main.tile[x, y - 1].frameX = (short) ((int) num + 18);
      Main.tile[x, y - 1].type = type;
      Main.tile[x + 1, y - 1].active(true);
      Main.tile[x + 1, y - 1].frameY = (short) 0;
      Main.tile[x + 1, y - 1].frameX = (short) ((int) num + 36);
      Main.tile[x + 1, y - 1].type = type;
      Main.tile[x - 1, y].active(true);
      Main.tile[x - 1, y].frameY = (short) 18;
      Main.tile[x - 1, y].frameX = num;
      Main.tile[x - 1, y].type = type;
      Main.tile[x, y].active(true);
      Main.tile[x, y].frameY = (short) 18;
      Main.tile[x, y].frameX = (short) ((int) num + 18);
      Main.tile[x, y].type = type;
      Main.tile[x + 1, y].active(true);
      Main.tile[x + 1, y].frameY = (short) 18;
      Main.tile[x + 1, y].frameX = (short) ((int) num + 36);
      Main.tile[x + 1, y].type = type;
    }

    public static void CheckChest(int i, int j, int type)
    {
      if (WorldGen.destroyObject)
        return;
      bool flag = false;
      int num1 = 0;
      int num2 = j;
      int num3 = num1 + (int) Main.tile[i, j].frameX / 18;
      int num4 = num2 + (int) Main.tile[i, j].frameY / 18 * -1;
      while (num3 > 1)
        num3 -= 2;
      int i1 = num3 * -1 + i;
      for (int index1 = i1; index1 < i1 + 2; ++index1)
      {
        for (int index2 = num4; index2 < num4 + 2; ++index2)
        {
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          int num5 = (int) Main.tile[index1, index2].frameX / 18;
          while (num5 > 1)
            num5 -= 2;
          if (!Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].type != type || (num5 != index1 - i1 || (int) Main.tile[index1, index2].frameY != (index2 - num4) * 18))
            flag = true;
        }
        if (Main.tile[index1, num4 + 2] == null)
          Main.tile[index1, num4 + 2] = new Tile();
        if (!Main.tile[index1, num4 + 2].active() || !Main.tileSolid[(int) Main.tile[index1, num4 + 2].type])
          flag = true;
      }
      if (!flag)
        return;
      int index3 = (int) Main.tile[i, j].frameX / 36;
      int Type = type != 467 ? Chest.chestItemSpawn[index3] : Chest.chestItemSpawn2[index3];
      WorldGen.destroyObject = true;
      for (int index1 = i1; index1 < i1 + 2; ++index1)
      {
        for (int index2 = num4; index2 < num4 + 3; ++index2)
        {
          if ((int) Main.tile[index1, index2].type == type && Main.tile[index1, index2].active())
          {
            Chest.DestroyChest(index1, index2);
            WorldGen.KillTile(index1, index2, false, false, false);
          }
        }
      }
      Item.NewItem(i * 16, j * 16, 32, 32, Type, 1, false, 0, false, false);
      WorldGen.destroyObject = false;
      if ((int) Main.tile[i1, num4 + 2].type != 138 && (int) Main.tile[i1 + 1, num4 + 2].type != 138)
        return;
      WorldGen.SquareTileFrame(i1, num4 + 2, true);
    }

    public static bool PlaceActuator(int i, int j)
    {
      if (Main.tile[i, j].actuator())
        return false;
      Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
      Main.tile[i, j].actuator(true);
      return true;
    }

    public static bool KillActuator(int i, int j)
    {
      if (!Main.tile[i, j].actuator())
        return false;
      Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
      Main.tile[i, j].actuator(false);
      if (Main.netMode != 1)
        Item.NewItem(i * 16, j * 16, 16, 16, 849, 1, false, 0, false, false);
      for (int index = 0; index < 5; ++index)
        Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 50, 0.0f, 0.0f, 0, (Color) null, 1f);
      return true;
    }

    public static bool PlaceWire(int i, int j)
    {
      if (Main.tile[i, j].wire())
        return false;
      Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
      Main.tile[i, j].wire(true);
      return true;
    }

    public static bool KillWire(int i, int j)
    {
      if (!Main.tile[i, j].wire())
        return false;
      Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
      Main.tile[i, j].wire(false);
      if (Main.netMode != 1)
        Item.NewItem(i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
      for (int index = 0; index < 5; ++index)
        Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 50, 0.0f, 0.0f, 0, (Color) null, 1f);
      return true;
    }

    public static bool PlaceWire2(int i, int j)
    {
      if (Main.tile[i, j].wire2())
        return false;
      Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
      Main.tile[i, j].wire2(true);
      return true;
    }

    public static bool KillWire2(int i, int j)
    {
      if (!Main.tile[i, j].wire2())
        return false;
      Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
      Main.tile[i, j].wire2(false);
      if (Main.netMode != 1)
        Item.NewItem(i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
      for (int index = 0; index < 5; ++index)
        Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 50, 0.0f, 0.0f, 0, (Color) null, 1f);
      return true;
    }

    public static bool PlaceWire3(int i, int j)
    {
      if (Main.tile[i, j].wire3())
        return false;
      Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
      Main.tile[i, j].wire3(true);
      return true;
    }

    public static bool KillWire3(int i, int j)
    {
      if (!Main.tile[i, j].wire3())
        return false;
      Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
      Main.tile[i, j].wire3(false);
      if (Main.netMode != 1)
        Item.NewItem(i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
      for (int index = 0; index < 5; ++index)
        Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 50, 0.0f, 0.0f, 0, (Color) null, 1f);
      return true;
    }

    public static bool PlaceWire4(int i, int j)
    {
      if (Main.tile[i, j].wire4())
        return false;
      Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
      Main.tile[i, j].wire4(true);
      return true;
    }

    public static bool KillWire4(int i, int j)
    {
      if (!Main.tile[i, j].wire4())
        return false;
      Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
      Main.tile[i, j].wire4(false);
      if (Main.netMode != 1)
        Item.NewItem(i * 16, j * 16, 16, 16, 530, 1, false, 0, false, false);
      for (int index = 0; index < 5; ++index)
        Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 50, 0.0f, 0.0f, 0, (Color) null, 1f);
      return true;
    }

    public static bool PlaceTile(int i, int j, int type, bool mute = false, bool forced = false, int plr = -1, int style = 0)
    {
      if (type >= 470)
        return false;
      bool flag = false;
      if (i >= 0 && j >= 0 && (i < Main.maxTilesX && j < Main.maxTilesY))
      {
        Tile trackCache = Main.tile[i, j];
        if (trackCache == null)
        {
          trackCache = new Tile();
          Main.tile[i, j] = trackCache;
        }
        if (forced || Collision.EmptyTile(i, j, false) || !Main.tileSolid[type] || type == 23 && (int) trackCache.type == 0 && trackCache.active() || (type == 199 && (int) trackCache.type == 0 && trackCache.active() || type == 2 && (int) trackCache.type == 0 && trackCache.active()) || (type == 109 && (int) trackCache.type == 0 && trackCache.active() || type == 60 && (int) trackCache.type == 59 && trackCache.active() || type == 70 && (int) trackCache.type == 59 && trackCache.active()))
        {
          if (type == 23 && ((int) trackCache.type != 0 || !trackCache.active()) || type == 2 && ((int) trackCache.type != 0 || !trackCache.active()) || (type == 109 && ((int) trackCache.type != 0 || !trackCache.active()) || type == 60 && ((int) trackCache.type != 59 || !trackCache.active())))
            return false;
          if (type == 81)
          {
            if (Main.tile[i, j - 1] == null)
              Main.tile[i, j - 1] = new Tile();
            if (Main.tile[i, j + 1] == null)
              Main.tile[i, j + 1] = new Tile();
            if (Main.tile[i, j - 1].active() || !Main.tile[i, j + 1].active() || (!Main.tileSolid[(int) Main.tile[i, j + 1].type] || Main.tile[i, j + 1].halfBrick()) || (int) Main.tile[i, j + 1].slope() != 0)
              return false;
          }
          if ((type == 373 || type == 375 || (type == 374 || type == 461)) && (Main.tile[i, j - 1] == null || Main.tile[i, j - 1].bottomSlope()))
            return false;
          if ((int) trackCache.liquid > 0)
          {
            if (type == 4)
            {
              if (style != 8 && style != 11)
                return false;
            }
            else if (type == 3 || type == 20 || (type == 24 || type == 27) || (type == 32 || type == 51 || (type == 69 || type == 72)) || (type == 201 || type == 352))
              return false;
          }
          if (type != 2 || (int) Main.tile[i, j].type != 0)
          {
            trackCache.halfBrick(false);
            trackCache.frameY = (short) 0;
            trackCache.frameX = (short) 0;
          }
          if (type == 3 || type == 24 || (type == 110 || type == 201))
          {
            if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1].active() && ((int) Main.tile[i, j + 1].slope() == 0 && !Main.tile[i, j + 1].halfBrick()) && ((int) Main.tile[i, j + 1].type == 2 && type == 3 || (int) Main.tile[i, j + 1].type == 23 && type == 24 || (int) Main.tile[i, j + 1].type == 199 && type == 201 || (((int) Main.tile[i, j + 1].type == 78 || (int) Main.tile[i, j + 1].type == 380) && type == 3 || (int) Main.tile[i, j + 1].type == 109 && type == 110)))
            {
              if (type == 24 && WorldGen.genRand.Next(13) == 0)
              {
                trackCache.active(true);
                trackCache.type = (ushort) 32;
                WorldGen.SquareTileFrame(i, j, true);
              }
              else if (type == 201 && WorldGen.genRand.Next(13) == 0)
              {
                trackCache.active(true);
                trackCache.type = (ushort) 352;
                WorldGen.SquareTileFrame(i, j, true);
              }
              else if ((int) Main.tile[i, j + 1].type == 78 || (int) Main.tile[i, j + 1].type == 380)
              {
                trackCache.active(true);
                trackCache.type = (ushort) type;
                trackCache.frameX = (short) (WorldGen.genRand.Next(2) * 18 + 108);
              }
              else if (((int) trackCache.wall == 0 || (int) trackCache.wall == 106 || (int) trackCache.wall == 107 || (int) trackCache.wall >= 63 && (int) trackCache.wall <= 70) && ((int) Main.tile[i, j + 1].wall == 0 || (int) Main.tile[i, j + 1].wall == 106 || (int) Main.tile[i, j + 1].wall == 107 || (int) Main.tile[i, j + 1].wall >= 63 && (int) Main.tile[i, j + 1].wall <= 70))
              {
                if (type == 3 && WorldGen.genRand.Next(35) == 0)
                {
                  trackCache.active(true);
                  trackCache.type = (ushort) type;
                  trackCache.frameX = (short) (WorldGen.genRand.Next(2) * 18 + 162);
                }
                else if (WorldGen.genRand.Next(50) == 0 || (type == 24 || type == 201) && WorldGen.genRand.Next(40) == 0)
                {
                  trackCache.active(true);
                  trackCache.type = (ushort) type;
                  trackCache.frameX = type != 201 ? (short) 144 : (short) 270;
                }
                else if (WorldGen.genRand.Next(35) == 0)
                {
                  trackCache.active(true);
                  trackCache.type = (ushort) type;
                  trackCache.frameX = (short) (WorldGen.genRand.Next(2) * 18 + 108);
                }
                else
                {
                  trackCache.active(true);
                  trackCache.type = (ushort) type;
                  trackCache.frameX = (short) (WorldGen.genRand.Next(6) * 18);
                }
              }
            }
          }
          else if (type == 61)
          {
            if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1].active() && ((int) Main.tile[i, j + 1].slope() == 0 && !Main.tile[i, j + 1].halfBrick()) && (int) Main.tile[i, j + 1].type == 60)
            {
              if (WorldGen.genRand.Next(16) == 0 && (double) j > Main.worldSurface)
              {
                trackCache.active(true);
                trackCache.type = (ushort) 69;
                WorldGen.SquareTileFrame(i, j, true);
              }
              else if (WorldGen.genRand.Next(60) == 0 && (double) j > Main.rockLayer)
              {
                trackCache.active(true);
                trackCache.type = (ushort) type;
                trackCache.frameX = (short) 144;
              }
              else if (WorldGen.genRand.Next(300) == 0 && (double) j > Main.rockLayer)
              {
                trackCache.active(true);
                trackCache.type = (ushort) type;
                trackCache.frameX = (short) 162;
              }
              else if (WorldGen.genRand.Next(15) == 0)
              {
                trackCache.active(true);
                trackCache.type = (ushort) type;
                trackCache.frameX = WorldGen.genRand.Next(3) == 0 ? (short) (WorldGen.genRand.Next(13) * 18 + 180) : (short) (WorldGen.genRand.Next(2) * 18 + 108);
              }
              else
              {
                trackCache.active(true);
                trackCache.type = (ushort) type;
                trackCache.frameX = (short) (WorldGen.genRand.Next(6) * 18);
              }
            }
          }
          else if (type == 71)
          {
            if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1].active() && ((int) Main.tile[i, j + 1].slope() == 0 && !Main.tile[i, j + 1].halfBrick()) && (int) Main.tile[i, j + 1].type == 70)
            {
              trackCache.active(true);
              trackCache.type = (ushort) type;
              trackCache.frameX = (short) (WorldGen.genRand.Next(5) * 18);
            }
          }
          else if (type == 129)
          {
            if (WorldGen.SolidTile(i - 1, j) || WorldGen.SolidTile(i + 1, j) || (WorldGen.SolidTile(i, j - 1) || WorldGen.SolidTile(i, j + 1)))
            {
              trackCache.active(true);
              trackCache.type = (ushort) type;
              trackCache.frameX = (short) (WorldGen.genRand.Next(18) * 18);
              WorldGen.SquareTileFrame(i, j, true);
            }
          }
          else if (type == 178)
          {
            if (WorldGen.SolidTile(i - 1, j) || WorldGen.SolidTile(i + 1, j) || (WorldGen.SolidTile(i, j - 1) || WorldGen.SolidTile(i, j + 1)))
            {
              trackCache.active(true);
              trackCache.type = (ushort) type;
              trackCache.frameX = (short) (style * 18);
              trackCache.frameY = (short) (WorldGen.genRand.Next(3) * 18);
              WorldGen.SquareTileFrame(i, j, true);
            }
          }
          else if (type == 184)
          {
            if (Main.tileMoss[(int) Main.tile[i - 1, j].type] && WorldGen.SolidTile(i - 1, j) || Main.tileMoss[(int) Main.tile[i + 1, j].type] && WorldGen.SolidTile(i + 1, j) || (Main.tileMoss[(int) Main.tile[i, j - 1].type] && WorldGen.SolidTile(i, j - 1) || Main.tileMoss[(int) Main.tile[i, j + 1].type] && WorldGen.SolidTile(i, j + 1)))
            {
              trackCache.active(true);
              trackCache.type = (ushort) type;
              trackCache.frameX = (short) (style * 18);
              trackCache.frameY = (short) (WorldGen.genRand.Next(3) * 18);
              WorldGen.SquareTileFrame(i, j, true);
            }
          }
          else if (type == 171)
            WorldGen.PlaceXmasTree(i, j, (ushort) 171);
          else if (type == 254)
            WorldGen.Place2x2Style(i, j, (ushort) type, style);
          else if (type == 335)
            WorldGen.Place2x2(i, j, (ushort) type, 0);
          else if (type == 319 || type == 132 || (type == 138 || type == 142) || (type == 143 || type == 282 || type >= 288 && type <= 295) || type >= 316 && type <= 318)
            WorldGen.Place2x2(i, j, (ushort) type, 0);
          else if (type == 411)
            WorldGen.Place2x2(i, j, (ushort) type, 0);
          else if (type == 457)
            WorldGen.Place2x2Horizontal(i, j, (ushort) 457, style);
          else if (type == 137)
          {
            trackCache.active(true);
            trackCache.type = (ushort) type;
            trackCache.frameY = (short) (18 * style);
          }
          else if (type == 136)
          {
            if (Main.tile[i - 1, j] == null)
              Main.tile[i - 1, j] = new Tile();
            if (Main.tile[i + 1, j] == null)
              Main.tile[i + 1, j] = new Tile();
            if (Main.tile[i, j + 1] == null)
              Main.tile[i, j + 1] = new Tile();
            if (Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() && (!TileID.Sets.NotReallySolid[(int) Main.tile[i - 1, j].type] && (int) Main.tile[i - 1, j].slope() == 0) && (WorldGen.SolidTile(i - 1, j) || (int) Main.tile[i - 1, j].type == 124 || (int) Main.tile[i - 1, j].type == 5 && (int) Main.tile[i - 1, j - 1].type == 5 && (int) Main.tile[i - 1, j + 1].type == 5) || Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() && (!TileID.Sets.NotReallySolid[(int) Main.tile[i + 1, j].type] && (int) Main.tile[i + 1, j].slope() == 0) && (WorldGen.SolidTile(i + 1, j) || (int) Main.tile[i + 1, j].type == 124 || (int) Main.tile[i + 1, j].type == 5 && (int) Main.tile[i + 1, j - 1].type == 5 && (int) Main.tile[i + 1, j + 1].type == 5) || (Main.tile[i, j + 1].nactive() && !Main.tile[i, j + 1].halfBrick() && (WorldGen.SolidTile(i, j + 1) && (int) Main.tile[i, j + 1].slope() == 0) || (int) trackCache.wall > 0))
            {
              trackCache.active(true);
              trackCache.type = (ushort) type;
              WorldGen.SquareTileFrame(i, j, true);
            }
          }
          else if (type == 442)
          {
            if (Main.tile[i - 1, j] == null)
              Main.tile[i - 1, j] = new Tile();
            if (Main.tile[i + 1, j] == null)
              Main.tile[i + 1, j] = new Tile();
            if (Main.tile[i, j + 1] == null)
              Main.tile[i, j + 1] = new Tile();
            if (Main.tile[i - 1, j].nactive() && !Main.tile[i - 1, j].halfBrick() && (!TileID.Sets.NotReallySolid[(int) Main.tile[i - 1, j].type] && (int) Main.tile[i - 1, j].slope() == 0) && (WorldGen.SolidTile(i - 1, j) || (int) Main.tile[i - 1, j].type == 124 || (int) Main.tile[i - 1, j].type == 5 && (int) Main.tile[i - 1, j - 1].type == 5 && (int) Main.tile[i - 1, j + 1].type == 5) || Main.tile[i + 1, j].nactive() && !Main.tile[i + 1, j].halfBrick() && (!TileID.Sets.NotReallySolid[(int) Main.tile[i + 1, j].type] && (int) Main.tile[i + 1, j].slope() == 0) && (WorldGen.SolidTile(i + 1, j) || (int) Main.tile[i + 1, j].type == 124 || (int) Main.tile[i + 1, j].type == 5 && (int) Main.tile[i + 1, j - 1].type == 5 && (int) Main.tile[i + 1, j + 1].type == 5) || Main.tile[i, j + 1].nactive() && !Main.tile[i, j + 1].halfBrick() && (WorldGen.SolidTile(i, j + 1) && (int) Main.tile[i, j + 1].slope() == 0))
            {
              trackCache.active(true);
              trackCache.type = (ushort) type;
              WorldGen.SquareTileFrame(i, j, true);
            }
          }
          else if (type == 4)
          {
            if (Main.tile[i - 1, j] == null)
              Main.tile[i - 1, j] = new Tile();
            if (Main.tile[i + 1, j] == null)
              Main.tile[i + 1, j] = new Tile();
            if (Main.tile[i, j + 1] == null)
              Main.tile[i, j + 1] = new Tile();
            Tile tile1 = Main.tile[i - 1, j];
            Tile tile2 = Main.tile[i + 1, j];
            Tile tile3 = Main.tile[i, j + 1];
            if ((int) trackCache.wall > 0 || tile1.active() && ((int) tile1.slope() == 0 || (int) tile1.slope() % 2 != 1) && (Main.tileSolid[(int) tile1.type] && !Main.tileSolidTop[(int) tile1.type] && !TileID.Sets.NotReallySolid[(int) tile1.type] || (int) tile1.type == 124 || (int) tile1.type == 5 && (int) Main.tile[i - 1, j - 1].type == 5 && (int) Main.tile[i - 1, j + 1].type == 5) || (tile2.active() && ((int) tile2.slope() == 0 || (int) tile2.slope() % 2 != 0) && (Main.tileSolid[(int) tile2.type] && !Main.tileSolidTop[(int) tile2.type] && !TileID.Sets.NotReallySolid[(int) tile2.type] || (int) tile2.type == 124 || (int) tile2.type == 5 && (int) Main.tile[i + 1, j - 1].type == 5 && (int) Main.tile[i + 1, j + 1].type == 5) || tile3.active() && Main.tileSolid[(int) tile3.type] && (!Main.tileSolidTop[(int) tile3.type] || TileID.Sets.Platforms[(int) tile3.type] && (int) tile3.slope() == 0) && (!TileID.Sets.NotReallySolid[(int) tile3.type] && !tile3.halfBrick() && (int) tile3.slope() == 0)))
            {
              trackCache.active(true);
              trackCache.type = (ushort) type;
              trackCache.frameY = (short) (22 * style);
              WorldGen.SquareTileFrame(i, j, true);
            }
          }
          else if (type == 10)
          {
            if (Main.tile[i, j - 1] == null)
              Main.tile[i, j - 1] = new Tile();
            if (Main.tile[i, j - 2] == null)
              Main.tile[i, j - 2] = new Tile();
            if (Main.tile[i, j - 3] == null)
              Main.tile[i, j - 3] = new Tile();
            if (Main.tile[i, j + 1] == null)
              Main.tile[i, j + 1] = new Tile();
            if (Main.tile[i, j + 2] == null)
              Main.tile[i, j + 2] = new Tile();
            if (Main.tile[i, j + 3] == null)
              Main.tile[i, j + 3] = new Tile();
            if (!Main.tile[i, j - 1].active() && !Main.tile[i, j - 2].active() && (Main.tile[i, j - 3].active() && Main.tileSolid[(int) Main.tile[i, j - 3].type]))
            {
              WorldGen.PlaceDoor(i, j - 1, type, style);
              WorldGen.SquareTileFrame(i, j, true);
            }
            else
            {
              if (Main.tile[i, j + 1].active() || Main.tile[i, j + 2].active() || (!Main.tile[i, j + 3].active() || !Main.tileSolid[(int) Main.tile[i, j + 3].type]))
                return false;
              WorldGen.PlaceDoor(i, j + 1, type, style);
              WorldGen.SquareTileFrame(i, j, true);
            }
          }
          else if (type >= 275 && type <= 281 || (type == 296 || type == 297) || (type == 309 || type == 358 || (type == 359 || type == 413)) || type == 414)
            WorldGen.Place6x3(i, j, (ushort) type, -1, 0);
          else if (type == 237 || type == 244 || (type == 285 || type == 286) || (type == 298 || type == 299 || (type == 310 || type == 339)) || type >= 361 && type <= 364)
            WorldGen.Place3x2(i, j, (ushort) type, 0);
          else if (type == 128)
          {
            WorldGen.PlaceMan(i, j, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 269)
          {
            WorldGen.PlaceWoman(i, j, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 334)
          {
            int style1 = 0;
            if (style == -1)
              style1 = 1;
            WorldGen.Place3x3Wall(i, j, (ushort) 334, style1);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 149)
          {
            if (WorldGen.SolidTile(i - 1, j) || WorldGen.SolidTile(i + 1, j) || (WorldGen.SolidTile(i, j - 1) || WorldGen.SolidTile(i, j + 1)))
            {
              trackCache.frameX = (short) (18 * style);
              trackCache.active(true);
              trackCache.type = (ushort) type;
              WorldGen.SquareTileFrame(i, j, true);
            }
          }
          else if (type == 139 || type == 35)
          {
            WorldGen.PlaceMB(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 165)
          {
            WorldGen.PlaceTight(i, j, (ushort) type, false);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 235)
          {
            WorldGen.Place3x1(i, j, (ushort) type, 0);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 240)
            WorldGen.Place3x3Wall(i, j, (ushort) type, style);
          else if (type == 440)
            WorldGen.Place3x3Wall(i, j, (ushort) type, style);
          else if (type == 245)
            WorldGen.Place2x3Wall(i, j, (ushort) type, style);
          else if (type == 246)
            WorldGen.Place3x2Wall(i, j, (ushort) type, style);
          else if (type == 241)
            WorldGen.Place4x3Wall(i, j, (ushort) type, style);
          else if (type == 242)
            WorldGen.Place6x4Wall(i, j, (ushort) type, style);
          else if (type == 34)
          {
            WorldGen.PlaceChand(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 106 || type == 212 || (type == 219 || type == 220) || (type == 228 || type == 231 || (type == 243 || type == 247)) || (type == 283 || type >= 300 && type <= 308 || (type == 354 || type == 355)))
          {
            WorldGen.Place3x3(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 13 || type == 33 || (type == 49 || type == 50) || (type == 78 || type == 174 || type == 372))
          {
            WorldGen.PlaceOnTable1x1(i, j, type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 14 || type == 26 || (type == 86 || type == 87) || (type == 88 || type == 89 || (type == 114 || type == 186)) || (type == 187 || type == 215 || (type == 217 || type == 218) || type == 377))
          {
            WorldGen.Place3x2(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 236)
          {
            WorldGen.PlaceJunglePlant(i, j, (ushort) type, WorldGen.genRand.Next(3), 0);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 238)
          {
            WorldGen.PlaceJunglePlant(i, j, (ushort) type, 0, 0);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 20)
          {
            if (Main.tile[i, j + 1] == null)
              Main.tile[i, j + 1] = new Tile();
            int type1 = (int) Main.tile[i, j + 1].type;
            if (Main.tile[i, j + 1].active() && (type1 == 2 || type1 == 109 || (type1 == 147 || type1 == 60) || (type1 == 23 || type1 == 199 || (type1 == 53 || type1 == 234)) || (type1 == 116 || type1 == 112)))
            {
              WorldGen.Place1x2(i, j, (ushort) type, style);
              WorldGen.SquareTileFrame(i, j, true);
            }
          }
          else if (type == 15 || type == 216 || (type == 338 || type == 390))
          {
            if (Main.tile[i, j - 1] == null)
              Main.tile[i, j - 1] = new Tile();
            if (Main.tile[i, j] == null)
              Main.tile[i, j] = new Tile();
            WorldGen.Place1x2(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 227)
          {
            WorldGen.PlaceDye(i, j, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 16 || type == 18 || (type == 29 || type == 103) || (type == 134 || type == 462))
          {
            WorldGen.Place2x1(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 92 || type == 93 || type == 453)
          {
            WorldGen.Place1xX(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 104 || type == 105 || (type == 320 || type == 337) || (type == 349 || type == 356 || (type == 378 || type == 456)))
          {
            WorldGen.Place2xX(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 17 || type == 77 || type == 133)
          {
            WorldGen.Place3x2(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 207)
          {
            WorldGen.Place2xX(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 410)
          {
            WorldGen.Place2xX(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 465)
          {
            WorldGen.Place2xX(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (TileID.Sets.BasicChest[type])
          {
            WorldGen.PlaceChest(i, j, (ushort) type, false, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 91)
          {
            WorldGen.PlaceBanner(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 419 || type == 420 || (type == 423 || type == 424) || (type == 429 || type == 445))
          {
            WorldGen.PlaceLogicTiles(i, j, type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 135 || type == 141 || (type == 144 || type == 210) || (type == 239 || type == 36 || type == 324))
          {
            WorldGen.Place1x1(i, j, type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 101 || type == 102 || type == 463)
          {
            WorldGen.Place3x4(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 464 || type == 466)
          {
            WorldGen.Place5x4(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 27)
          {
            WorldGen.PlaceSunflower(i, j, (ushort) 27);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 28)
          {
            WorldGen.PlacePot(i, j, (ushort) 28, WorldGen.genRand.Next(4));
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 42 || type == 270 || type == 271)
          {
            WorldGen.Place1x2Top(i, j, (ushort) type, style);
            WorldGen.SquareTileFrame(i, j, true);
          }
          else if (type == 55 || type == 425)
            WorldGen.PlaceSign(i, j, (ushort) type, style);
          else if (type == 85 || type == 376)
            WorldGen.Place2x2Horizontal(i, j, (ushort) type, style);
          else if (Main.tileAlch[type])
            WorldGen.PlaceAlch(i, j, style);
          else if (type == 94 || type == 95 || (type == 97 || type == 98) || (type == 99 || type == 100 || (type == 125 || type == 126)) || (type == 173 || type == 287 || type == 172))
            WorldGen.Place2x2(i, j, (ushort) type, style);
          else if (type == 96)
            WorldGen.Place2x2Style(i, j, (ushort) type, style);
          else if (type == 79 || type == 90)
          {
            int direction = 1;
            if (plr > -1)
              direction = Main.player[plr].direction;
            WorldGen.Place4x2(i, j, (ushort) type, direction, style);
          }
          else if (type == 209)
            WorldGen.PlaceCannon(i, j, (ushort) type, style);
          else if (type == 81)
          {
            trackCache.frameX = (short) (26 * WorldGen.genRand.Next(6));
            trackCache.active(true);
            trackCache.type = (ushort) type;
          }
          else if (type == 19)
          {
            trackCache.frameY = (short) (18 * style);
            trackCache.active(true);
            trackCache.type = (ushort) type;
          }
          else if (type == 380)
          {
            trackCache.frameY = (short) (18 * style);
            trackCache.active(true);
            trackCache.type = (ushort) type;
          }
          else if (type == 314)
          {
            Minecart.PlaceTrack(trackCache, style);
          }
          else
          {
            trackCache.active(true);
            trackCache.type = (ushort) type;
          }
          if (trackCache.active())
          {
            if ((int) trackCache.type == 54)
              WorldGen.SquareWallFrame(i, j, true);
            WorldGen.SquareTileFrame(i, j, true);
            flag = true;
            if (!mute)
            {
              if (type == (int) sbyte.MaxValue)
                Main.PlaySound(SoundID.Item30, i * 16, j * 16);
              else if (type == 314)
                Main.PlaySound(SoundID.Item52, i * 16, j * 16);
              else if (type >= 330 && type <= 333)
                Main.PlaySound(18, i * 16, j * 16, 1, 1f, 0.0f);
              else
                Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
              if (type == 22 || type == 140)
              {
                for (int index = 0; index < 3; ++index)
                  Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 14, 0.0f, 0.0f, 0, (Color) null, 1f);
              }
            }
          }
        }
      }
      return flag;
    }

    public static void KillWall(int i, int j, bool fail = false)
    {
      if (i < 0 || j < 0 || (i >= Main.maxTilesX || j >= Main.maxTilesY))
        return;
      Tile tile = Main.tile[i, j];
      if (tile == null)
      {
        tile = new Tile();
        Main.tile[i, j] = tile;
      }
      if ((int) tile.wall <= 0)
        return;
      if (Main.wallDungeon[(int) tile.wall] && !NPC.downedBoss3)
        fail = true;
      if ((int) tile.wall == 87 && !NPC.downedGolemBoss)
        fail = true;
      if ((int) tile.wall == 21 || (int) tile.wall == 186 || ((int) tile.wall == 136 || (int) tile.wall == 137) || ((int) tile.wall == 168 || (int) tile.wall == 169 || ((int) tile.wall == 172 || (int) tile.wall == 226)) || (int) tile.wall == 227)
        Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
      else if ((int) tile.wall >= 63 && (int) tile.wall <= 70)
        Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0.0f);
      else
        Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
      int num = 10;
      if (fail)
        num = 3;
      for (int index1 = 0; index1 < num; ++index1)
      {
        int Type = 0;
        if ((int) tile.wall == 148)
          Type = -1;
        if ((int) tile.wall == 1 || (int) tile.wall == 5 || ((int) tile.wall == 6 || (int) tile.wall == 7) || ((int) tile.wall == 107 || (int) tile.wall == 8 || (int) tile.wall == 9) || ((int) tile.wall >= 48 && (int) tile.wall <= 53 || (int) tile.wall >= 54 && (int) tile.wall <= 58 || (int) tile.wall == 185))
          Type = 1;
        if ((int) tile.wall >= 94 && (int) tile.wall <= 105)
          Type = 1;
        if ((int) tile.wall == 3)
          Type = WorldGen.genRand.Next(2) != 0 ? 1 : 14;
        if ((int) tile.wall == 35)
          Type = 37;
        if ((int) tile.wall == 4 || (int) tile.wall == 106)
          Type = 7;
        if ((int) tile.wall == 12)
          Type = 9;
        if ((int) tile.wall == 10)
          Type = 10;
        if ((int) tile.wall == 11)
          Type = 11;
        if ((int) tile.wall == 21)
          Type = 13;
        if ((int) tile.wall == 34)
          Type = 32;
        if ((int) tile.wall == 225)
          Type = 1;
        if ((int) tile.wall == 145)
          Type = 8;
        if ((int) tile.wall == 22 || (int) tile.wall == 28)
          Type = 51;
        if ((int) tile.wall == 23)
          Type = 38;
        if ((int) tile.wall == 24)
          Type = 36;
        if ((int) tile.wall == 25)
          Type = 48;
        if ((int) tile.wall == 179 || (int) tile.wall == 178 || (int) tile.wall == 183)
          Type = 236;
        if ((int) tile.wall == 181 || (int) tile.wall == 180 || (int) tile.wall == 184)
          Type = 240;
        if ((int) tile.wall == 113)
          Type = 189;
        if ((int) tile.wall == 114)
          Type = 190;
        if ((int) tile.wall == 115)
          Type = 191;
        if ((int) tile.wall == 177 || (int) tile.wall == 13)
          Type = 25;
        if ((int) tile.wall == 186)
          Type = WorldGen.genRand.Next(68, 71);
        if ((int) tile.wall == 142)
          Type = 210;
        if ((int) tile.wall == 143)
          Type = 210;
        if ((int) tile.wall == 224)
          Type = 265;
        if ((int) tile.wall == 173)
          Type = 128;
        if ((int) tile.wall == 174)
          Type = 117;
        if ((int) tile.wall == 175)
          Type = 42;
        if ((int) tile.wall == 176)
          Type = 226;
        if ((int) tile.wall == 182)
          Type = WorldGen.genRand.Next(2) != 0 ? 23 : 6;
        if ((int) tile.wall >= 153 && (int) tile.wall <= 166)
        {
          switch (tile.wall)
          {
            case 153:
            case 157:
              Type = 138;
              break;
            case 154:
            case 158:
              Type = 86;
              break;
            case 155:
            case 159:
              Type = 91;
              break;
            case 156:
            case 160:
              Type = 89;
              break;
            case 161:
            case 164:
              Type = 90;
              break;
            case 162:
            case 165:
              Type = 88;
              break;
            case 163:
            case 166:
              Type = 87;
              break;
          }
        }
        if ((int) tile.wall == 26 || (int) tile.wall == 30)
          Type = 49;
        if ((int) tile.wall == 29 || (int) tile.wall == 32)
          Type = 50;
        if ((int) tile.wall == 31)
          Type = 51;
        if ((int) tile.wall == 14 || (int) tile.wall == 20)
          Type = 109;
        if ((int) tile.wall >= 88 && (int) tile.wall <= 93)
        {
          Type = 86 + (int) tile.wall - 88;
          if ((int) tile.wall == 93)
            Type = WorldGen.genRand.Next(88, 94);
        }
        if ((int) tile.wall == 33)
          Type = 14;
        if ((int) tile.wall == 41)
          Type = 77;
        if ((int) tile.wall == 42)
          Type = 78;
        if ((int) tile.wall == 43)
          Type = 78;
        if ((int) tile.wall == 43)
          Type = 78;
        if ((int) tile.wall == 36)
          Type = 26;
        if ((int) tile.wall == 37)
          Type = 32;
        if ((int) tile.wall == 38)
          Type = 2;
        if ((int) tile.wall == 39)
          Type = 1;
        if ((int) tile.wall == 40)
          Type = 51;
        if ((int) tile.wall == 45)
          Type = 81;
        if ((int) tile.wall == 46)
          Type = 83;
        if ((int) tile.wall == 47)
          Type = 84;
        if ((int) tile.wall == 85)
          Type = 126;
        if ((int) tile.wall == 59)
          Type = 0;
        if ((int) tile.wall == 61)
          Type = 0;
        if ((int) tile.wall == 62)
          Type = 0;
        if ((int) tile.wall == 63)
          Type = 3;
        if ((int) tile.wall == 65)
          Type = 3;
        if ((int) tile.wall == 66)
          Type = 3;
        if ((int) tile.wall == 68)
          Type = 3;
        if ((int) tile.wall == 64)
          Type = 40;
        if ((int) tile.wall == 67)
          Type = 40;
        if ((int) tile.wall == 84)
          Type = 80;
        if ((int) tile.wall == 71)
          Type = 80;
        if ((int) tile.wall == 60)
          Type = 3;
        if ((int) tile.wall == 71)
          Type = 80;
        if ((int) tile.wall == 167)
          Type = 81;
        if ((int) tile.wall == 147)
          Type = 51;
        if ((int) tile.wall == 146)
          Type = 9;
        if ((int) tile.wall == 109)
          Type = 144;
        if ((int) tile.wall == 110)
          Type = 145;
        if ((int) tile.wall == 111)
          Type = 146;
        if ((int) tile.wall == 86 || (int) tile.wall == 108)
          Type = 147;
        if ((int) tile.wall == 87)
          Type = 148;
        if ((int) tile.wall == 83)
        {
          Type = 117;
          if (WorldGen.genRand.Next(2) == 0)
            Type = 1;
        }
        if ((int) tile.wall == 81)
          Type = 123;
        if ((int) tile.wall == 136)
          Type = 13;
        if ((int) tile.wall == 137)
          Type = 13;
        if ((int) tile.wall == 168)
          Type = 13;
        if ((int) tile.wall == 169)
          Type = 13;
        if ((int) tile.wall == 172)
          Type = 13;
        if ((int) tile.wall == 226)
          Type = 13;
        if ((int) tile.wall == 227)
          Type = 13;
        if ((int) tile.wall == 72)
          Type = 40;
        if ((int) tile.wall == 73)
          Type = 16;
        if ((int) tile.wall == 74 || (int) tile.wall == 80)
          Type = 26;
        if ((int) tile.wall == 144)
          Type = WorldGen.genRand.Next(2) != 0 ? 118 : 10;
        if ((int) tile.wall == 75)
          Type = 26;
        if ((int) tile.wall == 76)
          Type = 4;
        if ((int) tile.wall == 77 || (int) tile.wall == 81)
          Type = 5;
        if ((int) tile.wall == 78)
          Type = 7;
        if ((int) tile.wall == 79)
          Type = 37;
        if ((int) tile.wall == 82)
          Type = 36;
        if ((int) tile.wall == 69)
          Type = WorldGen.genRand.Next(2) != 0 ? 17 : 14;
        if ((int) tile.wall == 70)
          Type = 47;
        if ((int) tile.wall == 27)
          Type = WorldGen.genRand.Next(2) != 0 ? 1 : 7;
        if ((int) tile.wall == 138)
          Type = 77;
        if ((int) tile.wall == 139)
          Type = 78;
        if ((int) tile.wall == 140)
          Type = 79;
        if ((int) tile.wall == 141)
          Type = 126;
        if ((int) tile.wall == 149 || (int) tile.wall == 150)
          Type = 214;
        if ((int) tile.wall == 151 || (int) tile.wall == 152)
          Type = 215;
        else if ((int) tile.wall == 17 || (int) tile.wall == 18 || (int) tile.wall == 19)
          Type = 1;
        if ((int) tile.wall == 44)
        {
          int index2 = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 66, 0.0f, 0.0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 0.75f);
          Main.dust[index2].noGravity = true;
        }
        else if (((int) tile.wall < 133 || (int) tile.wall > 135) && ((int) tile.wall < 116 || (int) tile.wall > 125) && ((int) tile.wall < 126 || (int) tile.wall > 132))
        {
          if ((int) tile.wall == 76)
            Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, Type, 0.0f, 0.0f, 75, new Color(0, 80, (int) byte.MaxValue, 100), 0.75f);
          else if (Type >= 0)
            Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, Type, 0.0f, 0.0f, 0, (Color) null, 1f);
        }
      }
      if (fail)
      {
        WorldGen.SquareWallFrame(i, j, true);
      }
      else
      {
        int Type = 0;
        if ((int) tile.wall == 168)
          Type = 2696;
        if ((int) tile.wall == 169)
          Type = 2698;
        if ((int) tile.wall == 226)
          Type = 3752;
        if ((int) tile.wall == 227)
          Type = 3753;
        if ((int) tile.wall == 228)
          Type = 3760;
        if ((int) tile.wall == 229)
          Type = 3761;
        if ((int) tile.wall == 230)
          Type = 3762;
        if ((int) tile.wall == 142)
          Type = 2263;
        if ((int) tile.wall == 143)
          Type = 2264;
        if ((int) tile.wall == 144)
          Type = 2271;
        if ((int) tile.wall == 149)
          Type = 2505;
        if ((int) tile.wall == 150)
          Type = 2507;
        if ((int) tile.wall == 151)
          Type = 2506;
        if ((int) tile.wall == 152)
          Type = 2508;
        if ((int) tile.wall == 1)
          Type = 26;
        if ((int) tile.wall == 4)
          Type = 93;
        if ((int) tile.wall == 5)
          Type = 130;
        if ((int) tile.wall == 6)
          Type = 132;
        if ((int) tile.wall == 7)
          Type = 135;
        if ((int) tile.wall == 8)
          Type = 138;
        if ((int) tile.wall == 9)
          Type = 140;
        if ((int) tile.wall == 10)
          Type = 142;
        if ((int) tile.wall == 11)
          Type = 144;
        if ((int) tile.wall == 12)
          Type = 146;
        if ((int) tile.wall == 14)
          Type = 330;
        if ((int) tile.wall == 224)
          Type = 3472;
        if ((int) tile.wall == 177)
          Type = 3067;
        if ((int) tile.wall == 167)
          Type = 2691;
        if ((int) tile.wall == 60)
          Type = 3584;
        if ((int) tile.wall == 225)
          Type = 3751;
        if ((int) tile.wall == 179)
          Type = 3083;
        if ((int) tile.wall == 183)
          Type = 3082;
        if ((int) tile.wall == 181)
          Type = 3089;
        if ((int) tile.wall == 184)
          Type = 3088;
        if ((int) tile.wall == 186)
          Type = 3238;
        if ((int) tile.wall >= 153 && (int) tile.wall <= 166)
        {
          switch (tile.wall)
          {
            case 153:
              Type = 2677;
              break;
            case 154:
              Type = 2679;
              break;
            case 155:
              Type = 2681;
              break;
            case 156:
              Type = 2683;
              break;
            case 157:
              Type = 2678;
              break;
            case 158:
              Type = 2680;
              break;
            case 159:
              Type = 2682;
              break;
            case 160:
              Type = 2684;
              break;
            case 161:
              Type = 2686;
              break;
            case 162:
              Type = 2688;
              break;
            case 163:
              Type = 2690;
              break;
            case 164:
              Type = 2685;
              break;
            case 165:
              Type = 2687;
              break;
            case 166:
              Type = 2689;
              break;
          }
        }
        if ((int) tile.wall == 136)
          Type = 2169;
        if ((int) tile.wall == 137)
          Type = 2170;
        if ((int) tile.wall == 172)
          Type = 2788;
        if ((int) tile.wall == 145)
          Type = 2333;
        if ((int) tile.wall == 16)
          Type = 30;
        if ((int) tile.wall == 17)
          Type = 135;
        if ((int) tile.wall == 18)
          Type = 138;
        if ((int) tile.wall == 19)
          Type = 140;
        if ((int) tile.wall == 20)
          Type = 330;
        if ((int) tile.wall == 21)
          Type = 392;
        if ((int) tile.wall == 86 || (int) tile.wall == 108)
          Type = 1126;
        if ((int) tile.wall == 173)
          Type = 2789;
        if ((int) tile.wall == 174)
          Type = 2790;
        if ((int) tile.wall == 175)
          Type = 2791;
        if ((int) tile.wall == 176)
          Type = 2861;
        if ((int) tile.wall == 182)
          Type = 3101;
        if ((int) tile.wall == 133)
          Type = 2158;
        if ((int) tile.wall == 134)
          Type = 2159;
        if ((int) tile.wall == 135)
          Type = 2160;
        else if ((int) tile.wall == 113)
          Type = 1726;
        else if ((int) tile.wall == 114)
          Type = 1728;
        else if ((int) tile.wall == 115)
          Type = 1730;
        else if ((int) tile.wall == 146)
          Type = 2432;
        else if ((int) tile.wall == 147)
          Type = 2433;
        else if ((int) tile.wall == 148)
          Type = 2434;
        if ((int) tile.wall >= 116 && (int) tile.wall <= 125)
          Type = 1948 + (int) tile.wall - 116;
        if ((int) tile.wall >= 126 && (int) tile.wall <= 132)
          Type = 2008 + (int) tile.wall - 126;
        if ((int) tile.wall == 22)
          Type = 417;
        if ((int) tile.wall == 23)
          Type = 418;
        if ((int) tile.wall == 24)
          Type = 419;
        if ((int) tile.wall == 25)
          Type = 420;
        if ((int) tile.wall == 26)
          Type = 421;
        if ((int) tile.wall == 29)
          Type = 587;
        if ((int) tile.wall == 30)
          Type = 592;
        if ((int) tile.wall == 31)
          Type = 595;
        if ((int) tile.wall == 32)
          Type = 605;
        if ((int) tile.wall == 33)
          Type = 606;
        if ((int) tile.wall == 34)
          Type = 608;
        if ((int) tile.wall == 35)
          Type = 610;
        if ((int) tile.wall == 36)
          Type = 615;
        if ((int) tile.wall == 37)
          Type = 616;
        if ((int) tile.wall == 38)
          Type = 617;
        if ((int) tile.wall == 39)
          Type = 618;
        if ((int) tile.wall == 41)
          Type = 622;
        if ((int) tile.wall == 42)
          Type = 623;
        if ((int) tile.wall == 43)
          Type = 624;
        if ((int) tile.wall == 44)
          Type = 663;
        if ((int) tile.wall == 45)
          Type = 720;
        if ((int) tile.wall == 46)
          Type = 721;
        if ((int) tile.wall == 47)
          Type = 722;
        if ((int) tile.wall == 66)
          Type = 745;
        if ((int) tile.wall == 67)
          Type = 746;
        if ((int) tile.wall == 68)
          Type = 747;
        if ((int) tile.wall == 84)
          Type = 884;
        if ((int) tile.wall == 72)
          Type = 750;
        if ((int) tile.wall == 73)
          Type = 752;
        if ((int) tile.wall == 74)
          Type = 764;
        if ((int) tile.wall == 85)
          Type = 927;
        if ((int) tile.wall == 75)
          Type = 768;
        if ((int) tile.wall == 76)
          Type = 769;
        if ((int) tile.wall == 77)
          Type = 770;
        if ((int) tile.wall == 82)
          Type = 825;
        if ((int) tile.wall == 27)
          Type = 479;
        if ((int) tile.wall == 106)
          Type = 1447;
        if ((int) tile.wall == 107)
          Type = 1448;
        if ((int) tile.wall == 109)
          Type = 1590;
        if ((int) tile.wall == 110)
          Type = 1592;
        if ((int) tile.wall == 111)
          Type = 1594;
        if ((int) tile.wall == 78)
          Type = 1723;
        if ((int) tile.wall == 87 || (int) tile.wall == 112)
          Type = 1102;
        if ((int) tile.wall == 94 || (int) tile.wall == 100)
          Type = 1378;
        if ((int) tile.wall == 95 || (int) tile.wall == 101)
          Type = 1379;
        if ((int) tile.wall == 96 || (int) tile.wall == 102)
          Type = 1380;
        if ((int) tile.wall == 97 || (int) tile.wall == 103)
          Type = 1381;
        if ((int) tile.wall == 98 || (int) tile.wall == 104)
          Type = 1382;
        if ((int) tile.wall == 99 || (int) tile.wall == 105)
          Type = 1383;
        if ((int) tile.wall >= 88 && (int) tile.wall <= 93)
          Type = 1267 + (int) tile.wall - 88;
        if ((int) tile.wall >= 138 && (int) tile.wall <= 141)
          Type = 2210 + (int) tile.wall - 138;
        if (Type > 0)
          Item.NewItem(i * 16, j * 16, 16, 16, Type, 1, false, 0, false, false);
        tile.wall = (byte) 0;
        tile.wallColor((byte) 0);
        WorldGen.SquareWallFrame(i, j, true);
        if ((int) tile.type < 0 || (int) tile.type >= 470 || !TileID.Sets.FramesOnKillWall[(int) tile.type])
          return;
        WorldGen.TileFrame(i, j, false, false);
      }
    }

    public static void LaunchRocket(int x, int y)
    {
      int frameY = (int) Main.tile[x, y].frameY;
      int num1 = 0;
      while (frameY >= 40)
      {
        frameY -= 40;
        ++num1;
      }
      if (frameY == 18)
        --y;
      Vector2 vector2;
      // ISSUE: explicit reference operation
      ((Vector2) @vector2).\u002Ector((float) (x * 16 + 8), (float) (y * 16 + 4));
      int Type = 167 + num1;
      int Damage = 150;
      int num2 = 7;
      Projectile.NewProjectile((float) vector2.X, (float) (vector2.Y + 2.0), 0.0f, -8f, Type, Damage, (float) num2, Main.myPlayer, 0.0f, 0.0f);
      Main.tile[x, y].active(false);
      Main.tile[x, y + 1].active(false);
      NetMessage.SendTileSquare(-1, x - 1, y, 3, TileChangeType.None);
    }

    public static void LaunchRocketSmall(int x, int y)
    {
      if ((int) Main.tile[x, y].frameX == 18)
        --x;
      if ((int) Main.tile[x, y].frameY == 18)
        --y;
      Vector2 vector2;
      // ISSUE: explicit reference operation
      ((Vector2) @vector2).\u002Ector((float) (x * 16 + 16), (float) (y * 16));
      int Type = 415 + Main.rand.Next(4);
      int Damage = 0;
      int num = 0;
      Projectile.NewProjectile((float) vector2.X, (float) (vector2.Y + 2.0), 0.0f, -8f, Type, Damage, (float) num, Main.myPlayer, 0.0f, 0.0f);
    }

    public static bool CanKillTile(int i, int j)
    {
      bool blockDamaged;
      return WorldGen.CanKillTile(i, j, out blockDamaged);
    }

    public static bool CanKillTile(int i, int j, out bool blockDamaged)
    {
      blockDamaged = false;
      if (i < 0 || j < 0 || (i >= Main.maxTilesX || j >= Main.maxTilesY))
        return false;
      Tile tile1 = Main.tile[i, j];
      Tile tile2 = (Tile) null;
      if (tile1 == null || !tile1.active())
        return false;
      if (j >= 1)
        tile2 = Main.tile[i, j - 1];
      if (tile2 != null && tile2.active())
      {
        int type = (int) tile2.type;
        switch (type)
        {
          case 72:
          case 88:
          case 21:
          case 26:
            if ((int) tile1.type != type)
              return false;
            break;
          case 323:
            if ((int) tile1.type != type && ((int) tile2.frameX == 66 || (int) tile2.frameX == 220))
              return false;
            break;
          case 5:
            if ((int) tile1.type != type && ((int) tile2.frameX != 66 || (int) tile2.frameY < 0 || (int) tile2.frameY > 44) && (((int) tile2.frameX != 88 || (int) tile2.frameY < 66 || (int) tile2.frameY > 110) && (int) tile2.frameY < 198))
              return false;
            break;
        }
      }
      ushort type1 = tile1.type;
      if ((uint) type1 <= 21U)
      {
        if ((int) type1 != 10)
        {
          if ((int) type1 == 21 && !Chest.CanDestroyChest(i - (int) tile1.frameX / 18 % 2, j - (int) tile1.frameY / 18))
            return false;
        }
        else if ((int) tile1.type == 10 && (int) tile1.frameY >= 594 && (int) tile1.frameY <= 646)
        {
          blockDamaged = true;
          return false;
        }
      }
      else if ((int) type1 != 88)
      {
        if ((int) type1 != 138)
        {
          if ((int) type1 == 235)
          {
            int num = i - (int) tile1.frameX % 54 / 18;
            for (int index = 0; index < 3; ++index)
            {
              if (Main.tile[num + index, j - 1].active() && (TileID.Sets.BasicChest[(int) Main.tile[num + index, j - 1].type] || TileID.Sets.BasicChestFake[(int) Main.tile[num + index, j - 1].type]))
              {
                blockDamaged = true;
                return false;
              }
            }
          }
        }
        else if (WorldGen.CheckBoulderChest(i, j))
        {
          blockDamaged = true;
          return false;
        }
      }
      else if (!Chest.CanDestroyChest(i - (int) tile1.frameX / 18 % 3, j - (int) tile1.frameY / 18))
        return false;
      return true;
    }

    public static void KillTile(int i, int j, bool fail = false, bool effectOnly = false, bool noItem = false)
    {
      if (i < 0 || j < 0 || (i >= Main.maxTilesX || j >= Main.maxTilesY))
        return;
      Tile tile = Main.tile[i, j];
      if (tile == null)
      {
        tile = new Tile();
        Main.tile[i, j] = tile;
      }
      if (!tile.active())
        return;
      if (j >= 1 && Main.tile[i, j - 1] == null)
        Main.tile[i, j - 1] = new Tile();
      if (j >= 1 && Main.tile[i, j - 1].active() && ((int) Main.tile[i, j - 1].type == 5 && (int) tile.type != 5 || (int) Main.tile[i, j - 1].type == 323 && (int) tile.type != 323 || (TileID.Sets.BasicChest[(int) Main.tile[i, j - 1].type] && !TileID.Sets.BasicChest[(int) tile.type] || (int) Main.tile[i, j - 1].type == 323 && (int) tile.type != 323) || ((int) Main.tile[i, j - 1].type == 88 && (int) tile.type != 88 || (int) Main.tile[i, j - 1].type == 26 && (int) tile.type != 26 || (int) Main.tile[i, j - 1].type == 72 && (int) tile.type != 72)))
      {
        if ((int) Main.tile[i, j - 1].type == 5)
        {
          if (((int) Main.tile[i, j - 1].frameX != 66 || (int) Main.tile[i, j - 1].frameY < 0 || (int) Main.tile[i, j - 1].frameY > 44) && ((int) Main.tile[i, j - 1].frameX != 88 || (int) Main.tile[i, j - 1].frameY < 66 || (int) Main.tile[i, j - 1].frameY > 110) && (int) Main.tile[i, j - 1].frameY < 198)
            return;
        }
        else if ((int) Main.tile[i, j - 1].type != 323 || (int) Main.tile[i, j - 1].frameX == 66 || (int) Main.tile[i, j - 1].frameX == 220)
          return;
      }
      if ((int) tile.type == 10 && (int) tile.frameY >= 594 && (int) tile.frameY <= 646)
        fail = true;
      if ((int) tile.type == 138)
        fail = WorldGen.CheckBoulderChest(i, j);
      if ((int) tile.type == 235)
      {
        int frameX = (int) tile.frameX;
        int num = i - frameX % 54 / 18;
        for (int index = 0; index < 3; ++index)
        {
          if (Main.tile[num + index, j - 1].active() && (TileID.Sets.BasicChest[(int) Main.tile[num + index, j - 1].type] || TileID.Sets.BasicChestFake[(int) Main.tile[num + index, j - 1].type] || (int) Main.tile[num + index, j - 1].type == 88))
          {
            fail = true;
            break;
          }
        }
      }
      if (!effectOnly && !WorldGen.stopDrops)
      {
        if (!noItem && FixExploitManEaters.SpotProtected(i, j))
          return;
        if ((int) tile.type == (int) sbyte.MaxValue)
          Main.PlaySound(SoundID.Item27, i * 16, j * 16);
        else if ((int) tile.type == 147 || (int) tile.type == 224)
        {
          if (WorldGen.genRand.Next(2) == 0)
            Main.PlaySound(SoundID.Item48, i * 16, j * 16);
          else
            Main.PlaySound(SoundID.Item49, i * 16, j * 16);
        }
        else if ((int) tile.type == 161 || (int) tile.type == 163 || ((int) tile.type == 164 || (int) tile.type == 200))
          Main.PlaySound(SoundID.Item50, i * 16, j * 16);
        else if ((int) tile.type == 3 || (int) tile.type == 110)
        {
          Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0.0f);
          if ((int) tile.frameX == 144)
            Item.NewItem(i * 16, j * 16, 16, 16, 5, 1, false, 0, false, false);
        }
        else if ((int) tile.type == 254)
          Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0.0f);
        else if ((int) tile.type == 24)
        {
          Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0.0f);
          if ((int) tile.frameX == 144)
            Item.NewItem(i * 16, j * 16, 16, 16, 60, 1, false, 0, false, false);
        }
        else if (Main.tileAlch[(int) tile.type] || (int) tile.type == 384 || ((int) tile.type == 227 || (int) tile.type == 32) || ((int) tile.type == 51 || (int) tile.type == 52 || ((int) tile.type == 61 || (int) tile.type == 62)) || ((int) tile.type == 69 || (int) tile.type == 71 || ((int) tile.type == 73 || (int) tile.type == 74) || ((int) tile.type == 113 || (int) tile.type == 115 || ((int) tile.type == 184 || (int) tile.type == 192))) || ((int) tile.type == 205 || (int) tile.type == 233 || ((int) tile.type == 352 || (int) tile.type == 382)))
          Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0.0f);
        else if ((int) tile.type == 201)
        {
          Main.PlaySound(6, i * 16, j * 16, 1, 1f, 0.0f);
          if ((int) tile.frameX == 270)
            Item.NewItem(i * 16, j * 16, 16, 16, 2887, 1, false, 0, false, false);
        }
        else if ((int) tile.type == 1 || (int) tile.type == 6 || ((int) tile.type == 7 || (int) tile.type == 8) || ((int) tile.type == 9 || (int) tile.type == 22 || ((int) tile.type == 140 || (int) tile.type == 25)) || ((int) tile.type == 37 || (int) tile.type == 38 || ((int) tile.type == 39 || (int) tile.type == 41) || ((int) tile.type == 43 || (int) tile.type == 44 || ((int) tile.type == 45 || (int) tile.type == 46))) || ((int) tile.type == 47 || (int) tile.type == 48 || ((int) tile.type == 56 || (int) tile.type == 58) || ((int) tile.type == 63 || (int) tile.type == 64 || ((int) tile.type == 65 || (int) tile.type == 66)) || ((int) tile.type == 67 || (int) tile.type == 68 || ((int) tile.type == 75 || (int) tile.type == 76) || ((int) tile.type == 107 || (int) tile.type == 108 || ((int) tile.type == 111 || (int) tile.type == 117)))) || ((int) tile.type == 118 || (int) tile.type == 119 || ((int) tile.type == 120 || (int) tile.type == 121) || ((int) tile.type == 122 || (int) tile.type == 150 || ((int) tile.type == 151 || (int) tile.type == 152)) || ((int) tile.type == 153 || (int) tile.type == 154 || ((int) tile.type == 155 || (int) tile.type == 156) || ((int) tile.type == 160 || (int) tile.type == 161 || ((int) tile.type == 166 || (int) tile.type == 167))) || ((int) tile.type == 168 || (int) tile.type == 169 || ((int) tile.type == 175 || (int) tile.type == 176) || ((int) tile.type == 177 || (int) tile.type == 203 || ((int) tile.type == 202 || (int) tile.type == 204)) || ((int) tile.type == 206 || (int) tile.type == 211 || ((int) tile.type == 221 || (int) tile.type == 222) || ((int) tile.type == 223 || (int) tile.type == 226 || ((int) tile.type == 248 || (int) tile.type == 249))))) || ((int) tile.type == 250 || (int) tile.type == 272 || ((int) tile.type == 273 || (int) tile.type == 274) || ((int) tile.type == 284 || (int) tile.type == 325 || ((int) tile.type == 346 || (int) tile.type == 347)) || ((int) tile.type == 348 || (int) tile.type == 350 || ((int) tile.type == 367 || (int) tile.type == 357) || ((int) tile.type == 368 || (int) tile.type == 369 || ((int) tile.type == 370 || (int) tile.type == 407)))))
          Main.PlaySound(21, i * 16, j * 16, 1, 1f, 0.0f);
        else if ((int) tile.type == 231 || (int) tile.type == 195)
          Main.PlaySound(4, i * 16, j * 16, 1, 1f, 0.0f);
        else if ((int) tile.type == 26 && (int) tile.frameX >= 54)
          Main.PlaySound(4, i * 16, j * 16, 1, 1f, 0.0f);
        else if ((int) tile.type == 314)
          Main.PlaySound(SoundID.Item52, i * 16, j * 16);
        else if ((int) tile.type >= 330 && (int) tile.type <= 333)
          Main.PlaySound(18, i * 16, j * 16, 1, 1f, 0.0f);
        else if ((int) tile.type != 138)
          Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
        if (((int) tile.type == 162 || (int) tile.type == 385 || (int) tile.type == 129 || (int) tile.type == 165 && (int) tile.frameX < 54) && !fail)
          Main.PlaySound(SoundID.Item27, i * 16, j * 16);
      }
      if ((int) tile.type == 128 || (int) tile.type == 269)
      {
        int index1 = i;
        int frameX1 = (int) tile.frameX;
        int frameX2 = (int) tile.frameX;
        while (frameX2 >= 100)
          frameX2 -= 100;
        while (frameX2 >= 36)
          frameX2 -= 36;
        if (frameX2 == 18)
        {
          frameX1 = (int) Main.tile[i - 1, j].frameX;
          --index1;
        }
        if (frameX1 >= 100)
        {
          int index2 = 0;
          while (frameX1 >= 100)
          {
            frameX1 -= 100;
            ++index2;
          }
          int num1 = (int) Main.tile[index1, j].frameY / 18;
          if (num1 == 0)
            Item.NewItem(i * 16, j * 16, 16, 16, Item.headType[index2], 1, false, 0, false, false);
          int num2 = 1;
          if (num1 == num2)
            Item.NewItem(i * 16, j * 16, 16, 16, Item.bodyType[index2], 1, false, 0, false, false);
          int num3 = 2;
          if (num1 == num3)
            Item.NewItem(i * 16, j * 16, 16, 16, Item.legType[index2], 1, false, 0, false, false);
          int frameX3 = (int) Main.tile[index1, j].frameX;
          while (frameX3 >= 100)
            frameX3 -= 100;
          Main.tile[index1, j].frameX = (short) frameX3;
        }
      }
      if ((int) tile.type == 334)
      {
        int index = i;
        int frameX1 = (int) tile.frameX;
        int num1 = (int) tile.frameX;
        int num2 = 0;
        while (num1 >= 5000)
        {
          num1 -= 5000;
          ++num2;
        }
        if (num2 != 0)
          num1 = (num2 - 1) * 18;
        int num3 = num1 % 54;
        if (num3 == 18)
        {
          frameX1 = (int) Main.tile[i - 1, j].frameX;
          --index;
        }
        if (num3 == 36)
        {
          frameX1 = (int) Main.tile[i - 2, j].frameX;
          index -= 2;
        }
        if (frameX1 >= 5000)
        {
          int num4 = frameX1 % 5000 - 100;
          int frameX2 = (int) Main.tile[index + 1, j].frameX;
          int pre = frameX2 < 25000 ? frameX2 - 10000 : frameX2 - 25000;
          if (Main.netMode != 1)
          {
            Item obj = new Item();
            obj.netDefaults(num4);
            obj.Prefix(pre);
            int number = Item.NewItem(i * 16, j * 16, 16, 16, num4, 1, true, 0, false, false);
            obj.position = Main.item[number].position;
            Main.item[number] = obj;
            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
          }
          int num5 = (int) Main.tile[index, j].frameX;
          int num6 = 0;
          while (num5 >= 5000)
          {
            num5 -= 5000;
            ++num6;
          }
          if (num6 != 0)
            num5 = (num6 - 1) * 18;
          Main.tile[index, j].frameX = (short) num5;
          Main.tile[index + 1, j].frameX = (short) (num5 + 18);
        }
      }
      if ((int) tile.type == 395)
      {
        int index = TEItemFrame.Find(i - (int) tile.frameX % 36 / 18, j - (int) tile.frameY % 36 / 18);
        if (index != -1 && ((TEItemFrame) TileEntity.ByID[index]).item.stack > 0)
        {
          ((TEItemFrame) TileEntity.ByID[index]).DropItem();
          if (Main.netMode == 2)
            return;
          Main.blockMouse = true;
          return;
        }
      }
      int tileDustAmount = WorldGen.KillTile_GetTileDustAmount(fail, tile);
      for (int index = 0; index < tileDustAmount; ++index)
        WorldGen.KillTile_MakeTileDust(i, j, tile);
      if (effectOnly)
        return;
      if (fail)
      {
        if ((int) tile.type == 2 || (int) tile.type == 23 || ((int) tile.type == 109 || (int) tile.type == 199))
          tile.type = (ushort) 0;
        if ((int) tile.type == 60 || (int) tile.type == 70)
          tile.type = (ushort) 59;
        if (Main.tileMoss[(int) tile.type])
          tile.type = (ushort) 1;
        WorldGen.SquareTileFrame(i, j, true);
      }
      else
      {
        if (TileID.Sets.BasicChest[(int) tile.type] && Main.netMode != 1)
        {
          int num = (int) tile.frameX / 18;
          int Y = j - (int) tile.frameY / 18;
          while (num > 1)
            num -= 2;
          if (!Chest.DestroyChest(i - num, Y))
            return;
        }
        if ((int) tile.type == 88 && Main.netMode != 1)
        {
          int num1 = (int) tile.frameX / 18;
          int Y = j - (int) tile.frameY / 18;
          int num2 = num1 % 3;
          if (!Chest.DestroyChest(i - num2, Y))
            return;
        }
        if ((int) tile.type == 51 && (int) tile.wall == 62 && WorldGen.genRand.Next(4) != 0)
          noItem = true;
        if (!noItem && !WorldGen.stopDrops && Main.netMode != 1)
        {
          bool flag1 = false;
          int maxValue1 = -1;
          int maxValue2 = -1;
          int maxValue3 = -1;
          if ((int) tile.type == 3)
          {
            maxValue1 = 400;
            maxValue2 = 100;
            if ((int) tile.frameX >= 108)
            {
              maxValue1 *= 3;
              maxValue2 *= 3;
            }
          }
          if ((int) tile.type == 73)
          {
            maxValue1 = 200;
            maxValue2 = 50;
            if ((int) tile.frameX >= 108)
            {
              maxValue1 *= 3;
              maxValue2 *= 3;
            }
          }
          if ((int) tile.type == 61)
          {
            maxValue3 = 80;
            if ((int) tile.frameX >= 108)
              maxValue3 *= 3;
          }
          if ((int) tile.type == 74)
          {
            maxValue3 = 40;
            if ((int) tile.frameX >= 108)
              maxValue3 *= 3;
          }
          if ((int) tile.type == 62)
            maxValue3 = 250;
          if ((int) tile.type == 185)
          {
            if ((int) tile.frameY == 0 && (int) tile.frameX < 214)
              maxValue1 = 6;
            if ((int) tile.frameY == 18 && ((int) tile.frameX < 214 || (int) tile.frameX >= 1368))
              maxValue1 = 6;
          }
          else if ((int) tile.type == 186)
          {
            if ((int) tile.frameX >= 378 && (int) tile.frameX <= 700)
              maxValue1 = 6;
          }
          else if ((int) tile.type == 187)
          {
            if ((int) tile.frameX >= 756 && (int) tile.frameX <= 916)
              maxValue1 = 6;
            if ((int) tile.frameX <= 322)
              maxValue1 = 6;
          }
          else if ((int) tile.type == 233)
            maxValue3 = 10;
          if (maxValue1 > 0 && NPC.CountNPCS(357) < 5 && WorldGen.genRand.Next(maxValue1) == 0)
          {
            int Type = 357;
            if (WorldGen.genRand.Next(NPC.goldCritterChance) == 0)
              Type = 448;
            int index = NPC.NewNPC(i * 16 + 10, j * 16, Type, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
            Main.npc[index].TargetClosest(true);
            Main.npc[index].velocity.Y = (__Null) ((double) WorldGen.genRand.Next(-50, -21) * 0.100000001490116);
            Main.npc[index].velocity.X = (__Null) ((double) WorldGen.genRand.Next(0, 26) * 0.100000001490116 * (double) -Main.npc[index].direction);
            Main.npc[index].direction *= -1;
            Main.npc[index].netUpdate = true;
          }
          if (maxValue2 > 0 && NPC.CountNPCS(377) < 5 && WorldGen.genRand.Next(maxValue2) == 0)
          {
            int Type = 377;
            if (WorldGen.genRand.Next(NPC.goldCritterChance) == 0)
              Type = 446;
            int index = NPC.NewNPC(i * 16 + 10, j * 16, Type, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
            Main.npc[index].TargetClosest(true);
            Main.npc[index].velocity.Y = (__Null) ((double) WorldGen.genRand.Next(-50, -21) * 0.100000001490116);
            Main.npc[index].velocity.X = (__Null) ((double) WorldGen.genRand.Next(0, 26) * 0.100000001490116 * (double) -Main.npc[index].direction);
            Main.npc[index].direction *= -1;
            Main.npc[index].netUpdate = true;
          }
          if (maxValue3 > 0 && NPC.CountNPCS(485) + NPC.CountNPCS(486) + NPC.CountNPCS(487) < 8 && WorldGen.genRand.Next(maxValue3) == 0)
          {
            int Type = 485;
            if (WorldGen.genRand.Next(4) == 0)
              Type = 486;
            if (WorldGen.genRand.Next(12) == 0)
              Type = 487;
            int index = NPC.NewNPC(i * 16 + 10, j * 16, Type, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
            Main.npc[index].TargetClosest(true);
            Main.npc[index].velocity.Y = (__Null) ((double) WorldGen.genRand.Next(-50, -21) * 0.100000001490116);
            Main.npc[index].velocity.X = (__Null) ((double) WorldGen.genRand.Next(0, 26) * 0.100000001490116 * (double) -Main.npc[index].direction);
            Main.npc[index].direction *= -1;
            Main.npc[index].netUpdate = true;
          }
          int Type1 = 0;
          int Type2 = 0;
          if ((int) tile.type == 0 || (int) tile.type == 2 || (int) tile.type == 109)
            Type1 = 2;
          else if ((int) tile.type == 426)
            Type1 = 3621;
          else if ((int) tile.type == 430)
            Type1 = 3633;
          else if ((int) tile.type == 431)
            Type1 = 3634;
          else if ((int) tile.type == 432)
            Type1 = 3635;
          else if ((int) tile.type == 433)
            Type1 = 3636;
          else if ((int) tile.type == 434)
            Type1 = 3637;
          else if ((int) tile.type == 427)
            Type1 = 3622;
          else if ((int) tile.type == 435)
            Type1 = 3638;
          else if ((int) tile.type == 436)
            Type1 = 3639;
          else if ((int) tile.type == 437)
            Type1 = 3640;
          else if ((int) tile.type == 438)
            Type1 = 3641;
          else if ((int) tile.type == 439)
            Type1 = 3642;
          else if ((int) tile.type == 446)
            Type1 = 3736;
          else if ((int) tile.type == 447)
            Type1 = 3737;
          else if ((int) tile.type == 448)
            Type1 = 3738;
          else if ((int) tile.type == 449)
            Type1 = 3739;
          else if ((int) tile.type == 450)
            Type1 = 3740;
          else if ((int) tile.type == 451)
            Type1 = 3741;
          else if ((int) tile.type == 368)
            Type1 = 3086;
          else if ((int) tile.type == 369)
            Type1 = 3087;
          else if ((int) tile.type == 367)
            Type1 = 3081;
          else if ((int) tile.type == 379)
            Type1 = 3214;
          else if ((int) tile.type == 353)
            Type1 = 2996;
          else if ((int) tile.type == 365)
            Type1 = 3077;
          else if ((int) tile.type == 366)
            Type1 = 3078;
          else if (((int) tile.type == 52 || (int) tile.type == 62) && (WorldGen.genRand.Next(2) == 0 && Main.player[(int) Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16)].cordage))
            Type1 = 2996;
          else if ((int) tile.type == 357)
            Type1 = 3066;
          else if ((int) tile.type == 1)
            Type1 = 3;
          else if ((int) tile.type == 3 || (int) tile.type == 73)
          {
            if (WorldGen.genRand.Next(2) == 0 && (Main.player[(int) Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16)].HasItem(281) || Main.player[(int) Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16)].HasItem(986)))
              Type1 = 283;
          }
          else if ((int) tile.type == 227)
          {
            int num = (int) tile.frameX / 34;
            Type1 = 1107 + num;
            if (num >= 8 && num <= 11)
              Type1 = 3385 + num - 8;
          }
          else if ((int) tile.type == 4)
          {
            int num = (int) tile.frameY / 22;
            switch (num)
            {
              case 0:
                Type1 = 8;
                break;
              case 8:
                Type1 = 523;
                break;
              case 9:
                Type1 = 974;
                break;
              case 10:
                Type1 = 1245;
                break;
              case 11:
                Type1 = 1333;
                break;
              case 12:
                Type1 = 2274;
                break;
              case 13:
                Type1 = 3004;
                break;
              case 14:
                Type1 = 3045;
                break;
              case 15:
                Type1 = 3114;
                break;
              default:
                Type1 = 426 + num;
                break;
            }
          }
          else if ((int) tile.type == 239)
          {
            int num1 = (int) tile.frameX / 18;
            if (num1 == 0)
              Type1 = 20;
            int num2 = 1;
            if (num1 == num2)
              Type1 = 703;
            int num3 = 2;
            if (num1 == num3)
              Type1 = 22;
            int num4 = 3;
            if (num1 == num4)
              Type1 = 704;
            int num5 = 4;
            if (num1 == num5)
              Type1 = 21;
            int num6 = 5;
            if (num1 == num6)
              Type1 = 705;
            int num7 = 6;
            if (num1 == num7)
              Type1 = 19;
            int num8 = 7;
            if (num1 == num8)
              Type1 = 706;
            int num9 = 8;
            if (num1 == num9)
              Type1 = 57;
            int num10 = 9;
            if (num1 == num10)
              Type1 = 117;
            int num11 = 10;
            if (num1 == num11)
              Type1 = 175;
            int num12 = 11;
            if (num1 == num12)
              Type1 = 381;
            int num13 = 12;
            if (num1 == num13)
              Type1 = 1184;
            int num14 = 13;
            if (num1 == num14)
              Type1 = 382;
            int num15 = 14;
            if (num1 == num15)
              Type1 = 1191;
            int num16 = 15;
            if (num1 == num16)
              Type1 = 391;
            int num17 = 16;
            if (num1 == num17)
              Type1 = 1198;
            int num18 = 17;
            if (num1 == num18)
              Type1 = 1006;
            int num19 = 18;
            if (num1 == num19)
              Type1 = 1225;
            int num20 = 19;
            if (num1 == num20)
              Type1 = 1257;
            int num21 = 20;
            if (num1 == num21)
              Type1 = 1552;
            int num22 = 21;
            if (num1 == num22)
              Type1 = 3261;
            int num23 = 22;
            if (num1 == num23)
              Type1 = 3467;
          }
          else if ((int) tile.type == 380)
            Type1 = 3215 + (int) tile.frameY / 18;
          else if ((int) tile.type == 442)
            Type1 = 3707;
          else if ((int) tile.type == 383)
            Type1 = 620;
          else if ((int) tile.type == 315)
            Type1 = 2435;
          else if ((int) tile.type == 330)
            Type1 = 71;
          else if ((int) tile.type == 331)
            Type1 = 72;
          else if ((int) tile.type == 332)
            Type1 = 73;
          else if ((int) tile.type == 333)
            Type1 = 74;
          else if ((int) tile.type == 5)
          {
            if ((int) tile.frameX >= 22 && (int) tile.frameY >= 198)
            {
              if (Main.netMode != 1)
              {
                if (WorldGen.genRand.Next(2) == 0)
                {
                  int index = j;
                  while (Main.tile[i, index] != null && (!Main.tile[i, index].active() || !Main.tileSolid[(int) Main.tile[i, index].type] || Main.tileSolidTop[(int) Main.tile[i, index].type]))
                    ++index;
                  if (Main.tile[i, index] != null)
                  {
                    if ((int) Main.tile[i, index].type == 2 || (int) Main.tile[i, index].type == 109 || ((int) Main.tile[i, index].type == 147 || (int) Main.tile[i, index].type == 199) || (int) Main.tile[i, index].type == 23)
                    {
                      Type1 = 9;
                      Type2 = 27;
                    }
                    else
                      Type1 = 9;
                  }
                }
                else
                  Type1 = 9;
              }
            }
            else
              Type1 = 9;
            if (Type1 == 9)
            {
              int index1 = i;
              int index2 = j;
              if ((int) tile.frameX == 66 && (int) tile.frameY <= 45)
                ++index1;
              if ((int) tile.frameX == 88 && (int) tile.frameY >= 66 && (int) tile.frameY <= 110)
                --index1;
              if ((int) tile.frameX == 22 && (int) tile.frameY >= 132 && (int) tile.frameY <= 176)
                --index1;
              if ((int) tile.frameX == 44 && (int) tile.frameY >= 132 && (int) tile.frameY <= 176)
                ++index1;
              if ((int) tile.frameX == 44 && (int) tile.frameY >= 198)
                ++index1;
              if ((int) tile.frameX == 66 && (int) tile.frameY >= 198)
                --index1;
              while (!Main.tile[index1, index2].active() || !Main.tileSolid[(int) Main.tile[index1, index2].type])
                ++index2;
              if (Main.tile[index1, index2].active())
              {
                ushort type = Main.tile[index1, index2].type;
                if ((uint) type <= 70U)
                {
                  if ((int) type != 23)
                  {
                    if ((int) type != 60)
                    {
                      if ((int) type == 70)
                        Type1 = 183;
                    }
                    else
                      Type1 = 620;
                  }
                  else
                    Type1 = 619;
                }
                else if ((int) type != 109)
                {
                  if ((int) type != 147)
                  {
                    if ((int) type == 199)
                      Type1 = 911;
                  }
                  else
                    Type1 = 2503;
                }
                else
                  Type1 = 621;
              }
              int closest = (int) Player.FindClosest(new Vector2((float) (index1 * 16), (float) (index2 * 16)), 16, 16);
              if (WorldGen.genRand.Next(100) < Main.player[closest].inventory[Main.player[closest].selectedItem].axe || Main.rand.Next(3) == 0)
                flag1 = true;
            }
          }
          else if ((int) tile.type == 323)
          {
            Type1 = 2504;
            if ((int) tile.frameX <= 132 && (int) tile.frameX >= 88)
              Type2 = 27;
            int index1 = i;
            int index2 = j;
            while (!Main.tile[index1, index2].active() || !Main.tileSolid[(int) Main.tile[index1, index2].type])
              ++index2;
            if (Main.tile[index1, index2].active())
            {
              switch (Main.tile[index1, index2].type)
              {
                case 112:
                  Type1 = 619;
                  break;
                case 116:
                  Type1 = 621;
                  break;
                case 234:
                  Type1 = 911;
                  break;
              }
            }
          }
          else if ((int) tile.type == 408)
            Type1 = 3460;
          else if ((int) tile.type == 409)
            Type1 = 3461;
          else if ((int) tile.type == 415)
            Type1 = 3573;
          else if ((int) tile.type == 416)
            Type1 = 3574;
          else if ((int) tile.type == 417)
            Type1 = 3575;
          else if ((int) tile.type == 418)
            Type1 = 3576;
          else if ((int) tile.type >= (int) byte.MaxValue && (int) tile.type <= 261)
            Type1 = 1970 + (int) tile.type - (int) byte.MaxValue;
          else if ((int) tile.type >= 262 && (int) tile.type <= 268)
            Type1 = 1970 + (int) tile.type - 262;
          else if ((int) tile.type == 171)
          {
            if ((int) tile.frameX >= 10)
            {
              WorldGen.dropXmasTree(i, j, 0);
              WorldGen.dropXmasTree(i, j, 1);
              WorldGen.dropXmasTree(i, j, 2);
              WorldGen.dropXmasTree(i, j, 3);
            }
          }
          else if ((int) tile.type == 324)
          {
            switch ((int) tile.frameY / 22)
            {
              case 0:
                Type1 = 2625;
                break;
              case 1:
                Type1 = 2626;
                break;
            }
          }
          else if ((int) tile.type == 421)
            Type1 = 3609;
          else if ((int) tile.type == 422)
            Type1 = 3610;
          else if ((int) tile.type == 419)
          {
            switch ((int) tile.frameX / 18)
            {
              case 0:
                Type1 = 3602;
                break;
              case 1:
                Type1 = 3618;
                break;
              case 2:
                Type1 = 3663;
                break;
            }
          }
          else if ((int) tile.type == 428)
          {
            switch ((int) tile.frameY / 18)
            {
              case 0:
                Type1 = 3630;
                break;
              case 1:
                Type1 = 3632;
                break;
              case 2:
                Type1 = 3631;
                break;
              case 3:
                Type1 = 3626;
                break;
            }
            PressurePlateHelper.DestroyPlate(new Point(i, j));
          }
          else if ((int) tile.type == 420)
          {
            switch ((int) tile.frameY / 18)
            {
              case 0:
                Type1 = 3603;
                break;
              case 1:
                Type1 = 3604;
                break;
              case 2:
                Type1 = 3605;
                break;
              case 3:
                Type1 = 3606;
                break;
              case 4:
                Type1 = 3607;
                break;
              case 5:
                Type1 = 3608;
                break;
            }
          }
          else if ((int) tile.type == 423)
          {
            TELogicSensor.Kill(i, j);
            switch ((int) tile.frameY / 18)
            {
              case 0:
                Type1 = 3613;
                break;
              case 1:
                Type1 = 3614;
                break;
              case 2:
                Type1 = 3615;
                break;
              case 3:
                Type1 = 3726;
                break;
              case 4:
                Type1 = 3727;
                break;
              case 5:
                Type1 = 3728;
                break;
              case 6:
                Type1 = 3729;
                break;
            }
          }
          else if ((int) tile.type == 424)
            Type1 = 3616;
          else if ((int) tile.type == 445)
            Type1 = 3725;
          else if ((int) tile.type == 429)
            Type1 = 3629;
          else if ((int) tile.type == 272)
            Type1 = 1344;
          else if ((int) tile.type == 273)
            Type1 = 2119;
          else if ((int) tile.type == 274)
            Type1 = 2120;
          else if ((int) tile.type == 460)
            Type1 = 3756;
          else if ((int) tile.type == 326)
          {
            Type1 = 2693;
            Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
          }
          else if ((int) tile.type == 327)
          {
            Type1 = 2694;
            Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
          }
          else if ((int) tile.type == 458)
          {
            Type1 = 3754;
            Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
          }
          else if ((int) tile.type == 459)
          {
            Type1 = 3755;
            Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
          }
          else if ((int) tile.type == 345)
          {
            Type1 = 2787;
            Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
          }
          else if ((int) tile.type == 328)
          {
            Type1 = 2695;
            Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
          }
          else if ((int) tile.type == 329)
          {
            Type1 = 2697;
            Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
          }
          else if ((int) tile.type == 346)
            Type1 = 2792;
          else if ((int) tile.type == 347)
            Type1 = 2793;
          else if ((int) tile.type == 348)
            Type1 = 2794;
          else if ((int) tile.type == 350)
            Type1 = 2860;
          else if ((int) tile.type == 336)
            Type1 = 2701;
          else if ((int) tile.type == 340)
            Type1 = 2751;
          else if ((int) tile.type == 341)
            Type1 = 2752;
          else if ((int) tile.type == 342)
            Type1 = 2753;
          else if ((int) tile.type == 343)
            Type1 = 2754;
          else if ((int) tile.type == 344)
            Type1 = 2755;
          else if ((int) tile.type == 351)
            Type1 = 2868;
          else if ((int) tile.type == 251)
            Type1 = 1725;
          else if ((int) tile.type == 252)
            Type1 = 1727;
          else if ((int) tile.type == 253)
            Type1 = 1729;
          else if ((int) tile.type == 325)
            Type1 = 2692;
          else if ((int) tile.type == 370)
            Type1 = 3100;
          else if ((int) tile.type == 396)
            Type1 = 3271;
          else if ((int) tile.type == 400)
            Type1 = 3276;
          else if ((int) tile.type == 401)
            Type1 = 3277;
          else if ((int) tile.type == 403)
            Type1 = 3339;
          else if ((int) tile.type == 397)
            Type1 = 3272;
          else if ((int) tile.type == 398)
            Type1 = 3274;
          else if ((int) tile.type == 399)
            Type1 = 3275;
          else if ((int) tile.type == 402)
            Type1 = 3338;
          else if ((int) tile.type == 404)
            Type1 = 3347;
          else if ((int) tile.type == 407)
            Type1 = 3380;
          else if ((int) tile.type == 170)
            Type1 = 1872;
          else if ((int) tile.type == 284)
            Type1 = 2173;
          else if ((int) tile.type == 214)
            Type1 = 85;
          else if ((int) tile.type == 213)
            Type1 = 965;
          else if ((int) tile.type == 211)
            Type1 = 947;
          else if ((int) tile.type == 6)
            Type1 = 11;
          else if ((int) tile.type == 7)
            Type1 = 12;
          else if ((int) tile.type == 8)
            Type1 = 13;
          else if ((int) tile.type == 9)
            Type1 = 14;
          else if ((int) tile.type == 202)
            Type1 = 824;
          else if ((int) tile.type == 234)
            Type1 = 1246;
          else if ((int) tile.type == 226)
            Type1 = 1101;
          else if ((int) tile.type == 224)
            Type1 = 1103;
          else if ((int) tile.type == 36)
            Type1 = 1869;
          else if ((int) tile.type == 311)
            Type1 = 2260;
          else if ((int) tile.type == 312)
            Type1 = 2261;
          else if ((int) tile.type == 313)
            Type1 = 2262;
          else if ((int) tile.type == 229)
            Type1 = 1125;
          else if ((int) tile.type == 230)
            Type1 = 1127;
          else if ((int) tile.type == 225)
          {
            if (WorldGen.genRand.Next(3) == 0)
            {
              tile.honey(true);
              tile.liquid = byte.MaxValue;
            }
            else
            {
              Type1 = 1124;
              if (Main.netMode != 1 && WorldGen.genRand.Next(2) == 0)
              {
                int num = 1;
                if (WorldGen.genRand.Next(3) == 0)
                  num = 2;
                for (int index1 = 0; index1 < num; ++index1)
                {
                  int Type3 = WorldGen.genRand.Next(210, 212);
                  int index2 = NPC.NewNPC(i * 16 + 8, j * 16 + 15, Type3, 1, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
                  Main.npc[index2].velocity.X = (__Null) ((double) WorldGen.genRand.Next(-200, 201) * (1.0 / 500.0));
                  Main.npc[index2].velocity.Y = (__Null) ((double) WorldGen.genRand.Next(-200, 201) * (1.0 / 500.0));
                  Main.npc[index2].netUpdate = true;
                }
              }
            }
          }
          else if ((int) tile.type == 221)
            Type1 = 1104;
          else if ((int) tile.type == 222)
            Type1 = 1105;
          else if ((int) tile.type == 223)
            Type1 = 1106;
          else if ((int) tile.type == 248)
            Type1 = 1589;
          else if ((int) tile.type == 249)
            Type1 = 1591;
          else if ((int) tile.type == 250)
            Type1 = 1593;
          else if ((int) tile.type == 191)
            Type1 = 9;
          else if ((int) tile.type == 203)
            Type1 = 836;
          else if ((int) tile.type == 204)
            Type1 = 880;
          else if ((int) tile.type == 166)
            Type1 = 699;
          else if ((int) tile.type == 167)
            Type1 = 700;
          else if ((int) tile.type == 168)
            Type1 = 701;
          else if ((int) tile.type == 169)
            Type1 = 702;
          else if ((int) tile.type == 123)
            Type1 = 424;
          else if ((int) tile.type == 124)
            Type1 = 480;
          else if ((int) tile.type == 157)
            Type1 = 619;
          else if ((int) tile.type == 158)
            Type1 = 620;
          else if ((int) tile.type == 159)
            Type1 = 621;
          else if ((int) tile.type == 161)
            Type1 = 664;
          else if ((int) tile.type == 206)
            Type1 = 883;
          else if ((int) tile.type == 232)
            Type1 = 1150;
          else if ((int) tile.type == 198)
            Type1 = 775;
          else if ((int) tile.type == 314)
            Type1 = Minecart.GetTrackItem(tile);
          else if ((int) tile.type == 189)
            Type1 = 751;
          else if ((int) tile.type == 195)
            Type1 = 763;
          else if ((int) tile.type == 194)
            Type1 = 766;
          else if ((int) tile.type == 193)
            Type1 = 762;
          else if ((int) tile.type == 196)
            Type1 = 765;
          else if ((int) tile.type == 197)
            Type1 = 767;
          else if ((int) tile.type == 178)
          {
            switch ((int) tile.frameX / 18)
            {
              case 0:
                Type1 = 181;
                break;
              case 1:
                Type1 = 180;
                break;
              case 2:
                Type1 = 177;
                break;
              case 3:
                Type1 = 179;
                break;
              case 4:
                Type1 = 178;
                break;
              case 5:
                Type1 = 182;
                break;
              case 6:
                Type1 = 999;
                break;
            }
          }
          else if ((int) tile.type == 149)
          {
            if ((int) tile.frameX == 0 || (int) tile.frameX == 54)
              Type1 = 596;
            else if ((int) tile.frameX == 18 || (int) tile.frameX == 72)
              Type1 = 597;
            else if ((int) tile.frameX == 36 || (int) tile.frameX == 90)
              Type1 = 598;
          }
          else if ((int) tile.type == 13)
          {
            Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
            switch ((int) tile.frameX / 18)
            {
              case 1:
                Type1 = 28;
                break;
              case 2:
                Type1 = 110;
                break;
              case 3:
                Type1 = 350;
                break;
              case 4:
                Type1 = 351;
                break;
              case 5:
                Type1 = 2234;
                break;
              case 6:
                Type1 = 2244;
                break;
              case 7:
                Type1 = 2257;
                break;
              case 8:
                Type1 = 2258;
                break;
              default:
                Type1 = 31;
                break;
            }
          }
          else if ((int) tile.type == 19)
          {
            int num = (int) tile.frameY / 18;
            switch (num)
            {
              case 0:
                Type1 = 94;
                break;
              case 1:
                Type1 = 631;
                break;
              case 2:
                Type1 = 632;
                break;
              case 3:
                Type1 = 633;
                break;
              case 4:
                Type1 = 634;
                break;
              case 5:
                Type1 = 913;
                break;
              case 6:
                Type1 = 1384;
                break;
              case 7:
                Type1 = 1385;
                break;
              case 8:
                Type1 = 1386;
                break;
              case 9:
                Type1 = 1387;
                break;
              case 10:
                Type1 = 1388;
                break;
              case 11:
                Type1 = 1389;
                break;
              case 12:
                Type1 = 1418;
                break;
              case 13:
                Type1 = 1457;
                break;
              case 14:
                Type1 = 1702;
                break;
              case 15:
                Type1 = 1796;
                break;
              case 16:
                Type1 = 1818;
                break;
              case 17:
                Type1 = 2518;
                break;
              case 18:
                Type1 = 2549;
                break;
              case 19:
                Type1 = 2566;
                break;
              case 20:
                Type1 = 2581;
                break;
              case 21:
                Type1 = 2627;
                break;
              case 22:
                Type1 = 2628;
                break;
              case 23:
                Type1 = 2629;
                break;
              case 24:
                Type1 = 2630;
                break;
              case 25:
                Type1 = 2744;
                break;
              case 26:
                Type1 = 2822;
                break;
              case 27:
                Type1 = 3144;
                break;
              case 28:
                Type1 = 3146;
                break;
              case 29:
                Type1 = 3145;
                break;
              default:
                if (num >= 30 && num <= 35)
                {
                  Type1 = 3903 + num - 30;
                  break;
                }
                break;
            }
          }
          else if ((int) tile.type == 22)
            Type1 = 56;
          else if ((int) tile.type == 140)
            Type1 = 577;
          else if ((int) tile.type == 23)
            Type1 = 2;
          else if ((int) tile.type == 25)
            Type1 = 61;
          else if ((int) tile.type == 30)
            Type1 = 9;
          else if ((int) tile.type == 191)
            Type1 = 9;
          else if ((int) tile.type == 208)
            Type1 = 911;
          else if ((int) tile.type == 33)
          {
            int num = (int) tile.frameY / 22;
            Type1 = 105;
            if (num == 1)
              Type1 = 1405;
            else if (num == 2)
              Type1 = 1406;
            else if (num == 3)
              Type1 = 1407;
            else if (num >= 4 && num <= 13)
              Type1 = 2045 + num - 4;
            else if (num >= 14 && num <= 16)
              Type1 = 2153 + num - 14;
            else if (num == 17)
              Type1 = 2236;
            else if (num == 18)
              Type1 = 2523;
            else if (num == 19)
              Type1 = 2542;
            else if (num == 20)
              Type1 = 2556;
            else if (num == 21)
              Type1 = 2571;
            else if (num == 22)
              Type1 = 2648;
            else if (num == 23)
              Type1 = 2649;
            else if (num == 24)
              Type1 = 2650;
            else if (num == 25)
              Type1 = 2651;
            else if (num == 26)
              Type1 = 2818;
            else if (num == 27)
              Type1 = 3171;
            else if (num == 28)
              Type1 = 3173;
            else if (num == 29)
              Type1 = 3172;
            else if (num == 30)
              Type1 = 3890;
          }
          else if ((int) tile.type == 372)
            Type1 = 3117;
          else if ((int) tile.type == 371)
            Type1 = 3113;
          else if ((int) tile.type == 174)
            Type1 = 713;
          else if ((int) tile.type == 37)
            Type1 = 116;
          else if ((int) tile.type == 38)
            Type1 = 129;
          else if ((int) tile.type == 39)
            Type1 = 131;
          else if ((int) tile.type == 40)
            Type1 = 133;
          else if ((int) tile.type == 41)
            Type1 = 134;
          else if ((int) tile.type == 43)
            Type1 = 137;
          else if ((int) tile.type == 44)
            Type1 = 139;
          else if ((int) tile.type == 45)
            Type1 = 141;
          else if ((int) tile.type == 46)
            Type1 = 143;
          else if ((int) tile.type == 47)
            Type1 = 145;
          else if ((int) tile.type == 48)
            Type1 = 147;
          else if ((int) tile.type == 49)
            Type1 = 148;
          else if ((int) tile.type == 51)
            Type1 = 150;
          else if ((int) tile.type == 53)
            Type1 = 169;
          else if ((int) tile.type == 151)
            Type1 = 607;
          else if ((int) tile.type == 152)
            Type1 = 609;
          else if ((int) tile.type == 54)
          {
            Type1 = 170;
            Main.PlaySound(13, i * 16, j * 16, 1, 1f, 0.0f);
          }
          else if ((int) tile.type == 56)
            Type1 = 173;
          else if ((int) tile.type == 57)
            Type1 = 172;
          else if ((int) tile.type == 58)
            Type1 = 174;
          else if ((int) tile.type == 60)
            Type1 = 176;
          else if ((int) tile.type == 70)
            Type1 = 176;
          else if ((int) tile.type == 75)
            Type1 = 192;
          else if ((int) tile.type == 76)
            Type1 = 214;
          else if ((int) tile.type == 78)
            Type1 = 222;
          else if ((int) tile.type == 81)
            Type1 = 275;
          else if ((int) tile.type == 80)
            Type1 = 276;
          else if ((int) tile.type == 188)
            Type1 = 276;
          else if ((int) tile.type == 107)
            Type1 = 364;
          else if ((int) tile.type == 108)
            Type1 = 365;
          else if ((int) tile.type == 111)
            Type1 = 366;
          else if ((int) tile.type == 150)
            Type1 = 604;
          else if ((int) tile.type == 112)
            Type1 = 370;
          else if ((int) tile.type == 116)
            Type1 = 408;
          else if ((int) tile.type == 117)
            Type1 = 409;
          else if ((int) tile.type == 129)
            Type1 = 502;
          else if ((int) tile.type == 118)
            Type1 = 412;
          else if ((int) tile.type == 119)
            Type1 = 413;
          else if ((int) tile.type == 120)
            Type1 = 414;
          else if ((int) tile.type == 121)
            Type1 = 415;
          else if ((int) tile.type == 122)
            Type1 = 416;
          else if ((int) tile.type == 136)
            Type1 = 538;
          else if ((int) tile.type == 385)
            Type1 = 3234;
          else if ((int) tile.type == 137)
          {
            int num1 = (int) tile.frameY / 18;
            if (num1 == 0)
              Type1 = 539;
            int num2 = 1;
            if (num1 == num2)
              Type1 = 1146;
            int num3 = 2;
            if (num1 == num3)
              Type1 = 1147;
            int num4 = 3;
            if (num1 == num4)
              Type1 = 1148;
            int num5 = 4;
            if (num1 == num5)
              Type1 = 1149;
          }
          else if ((int) tile.type == 141)
            Type1 = 580;
          else if ((int) tile.type == 145)
            Type1 = 586;
          else if ((int) tile.type == 146)
            Type1 = 591;
          else if ((int) tile.type == 147)
            Type1 = 593;
          else if ((int) tile.type == 148)
            Type1 = 594;
          else if ((int) tile.type == 153)
            Type1 = 611;
          else if ((int) tile.type == 154)
            Type1 = 612;
          else if ((int) tile.type == 155)
            Type1 = 613;
          else if ((int) tile.type == 156)
            Type1 = 614;
          else if ((int) tile.type == 160)
            Type1 = 662;
          else if ((int) tile.type == 175)
            Type1 = 717;
          else if ((int) tile.type == 176)
            Type1 = 718;
          else if ((int) tile.type == 177)
            Type1 = 719;
          else if ((int) tile.type == 163)
            Type1 = 833;
          else if ((int) tile.type == 164)
            Type1 = 834;
          else if ((int) tile.type == 200)
            Type1 = 835;
          else if ((int) tile.type == 210)
            Type1 = 937;
          else if ((int) tile.type == 135)
          {
            int num1 = (int) tile.frameY / 18;
            if (num1 == 0)
              Type1 = 529;
            int num2 = 1;
            if (num1 == num2)
              Type1 = 541;
            int num3 = 2;
            if (num1 == num3)
              Type1 = 542;
            int num4 = 3;
            if (num1 == num4)
              Type1 = 543;
            int num5 = 4;
            if (num1 == num5)
              Type1 = 852;
            int num6 = 5;
            if (num1 == num6)
              Type1 = 853;
            int num7 = 6;
            if (num1 == num7)
              Type1 = 1151;
          }
          else if ((int) tile.type == 144)
          {
            if ((int) tile.frameX == 0)
              Type1 = 583;
            if ((int) tile.frameX == 18)
              Type1 = 584;
            if ((int) tile.frameX == 36)
              Type1 = 585;
          }
          else if ((int) tile.type == 130)
            Type1 = 511;
          else if ((int) tile.type == 131)
            Type1 = 512;
          else if ((int) tile.type == 61 || (int) tile.type == 74)
          {
            if ((int) tile.frameX == 144 && (int) tile.type == 61)
              Item.NewItem(i * 16, j * 16, 16, 16, 331, WorldGen.genRand.Next(2, 4), false, 0, false, false);
            else if ((int) tile.frameX == 162 && (int) tile.type == 61)
              Type1 = 223;
            else if ((int) tile.frameX >= 108 && (int) tile.frameX <= 126 && ((int) tile.type == 61 && WorldGen.genRand.Next(20) == 0))
              Type1 = 208;
            else if (WorldGen.genRand.Next(100) == 0)
              Type1 = 195;
          }
          else if ((int) tile.type == 59 || (int) tile.type == 60)
            Type1 = 176;
          else if ((int) tile.type == 190)
            Type1 = 183;
          else if ((int) tile.type == 71 || (int) tile.type == 72)
          {
            if (WorldGen.genRand.Next(50) == 0)
              Type1 = 194;
            else if (WorldGen.genRand.Next(2) == 0)
              Type1 = 183;
          }
          else if ((int) tile.type >= 63 && (int) tile.type <= 68)
            Type1 = (int) tile.type - 63 + 177;
          else if ((int) tile.type == 50)
            Type1 = (int) tile.frameX != 90 ? 149 : 165;
          else if (Main.tileAlch[(int) tile.type])
          {
            if ((int) tile.type > 82)
            {
              int num = (int) tile.frameX / 18;
              bool flag2 = false;
              Type1 = 313 + num;
              int Type3 = 307 + num;
              if ((int) tile.type == 84)
                flag2 = true;
              if (num == 0 && Main.dayTime)
                flag2 = true;
              if (num == 1 && !Main.dayTime)
                flag2 = true;
              if (num == 3 && !Main.dayTime && (Main.bloodMoon || Main.moonPhase == 0))
                flag2 = true;
              if (num == 4 && (Main.raining || (double) Main.cloudAlpha > 0.0))
                flag2 = true;
              if (num == 5 && !Main.raining && (Main.dayTime && Main.time > 40500.0))
                flag2 = true;
              if (num == 6)
              {
                Type1 = 2358;
                Type3 = 2357;
              }
              int closest = (int) Player.FindClosest(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16);
              if (Main.player[closest].inventory[Main.player[closest].selectedItem].type == 213)
              {
                Item.NewItem(i * 16, j * 16, 16, 16, Type3, WorldGen.genRand.Next(1, 6), false, 0, false, false);
                Item.NewItem(i * 16, j * 16, 16, 16, Type1, WorldGen.genRand.Next(1, 3), false, 0, false, false);
                Type1 = -1;
              }
              else if (flag2)
              {
                int Stack = WorldGen.genRand.Next(1, 4);
                Item.NewItem(i * 16, j * 16, 16, 16, Type3, Stack, false, 0, false, false);
              }
            }
          }
          else if ((int) tile.type == 321)
            Type1 = 2503;
          else if ((int) tile.type == 322)
            Type1 = 2504;
          if (Type1 > 0)
          {
            int Stack = 1;
            if (flag1)
              ++Stack;
            Item.NewItem(i * 16, j * 16, 16, 16, Type1, Stack, false, -1, false, false);
          }
          if (Type2 > 0)
            Item.NewItem(i * 16, j * 16, 16, 16, Type2, 1, false, -1, false, false);
        }
        if (Main.netMode != 2)
          AchievementsHelper.NotifyTileDestroyed(Main.player[Main.myPlayer], tile.type);
        tile.active(false);
        tile.halfBrick(false);
        tile.frameX = (short) -1;
        tile.frameY = (short) -1;
        tile.color((byte) 0);
        tile.frameNumber((byte) 0);
        if ((int) tile.type == 58 && j > Main.maxTilesY - 200)
        {
          tile.lava(true);
          tile.liquid = (byte) 128;
        }
        else if ((int) tile.type == 419)
          Wiring.PokeLogicGate(i, j + 1);
        else if ((int) tile.type == 54)
          WorldGen.SquareWallFrame(i, j, true);
        tile.type = (ushort) 0;
        tile.inActive(false);
        WorldGen.SquareTileFrame(i, j, true);
      }
    }

    public static int KillTile_GetTileDustAmount(bool fail, Tile tileCache)
    {
      int num = 10;
      if ((int) tileCache.type == 231)
        num = 6;
      if (fail)
        num = 3;
      if ((int) tileCache.type == 138)
        num = 0;
      if ((int) tileCache.type == 373)
        num = 0;
      if ((int) tileCache.type == 374)
        num = 0;
      if ((int) tileCache.type == 375)
        num = 0;
      if ((int) tileCache.type == 461)
        num = 0;
      if ((int) tileCache.type >= 300 && (int) tileCache.type <= 308)
        num = 0;
      if ((int) tileCache.type == 125)
        num = 0;
      if ((int) tileCache.type == 287)
        num = 0;
      if ((int) tileCache.type == 354)
        num = 0;
      if ((int) tileCache.type == 355)
        num = 0;
      if ((int) tileCache.type == 376)
        num = 0;
      return num;
    }

    public static int KillTile_MakeTileDust(int i, int j, Tile tileCache)
    {
      int Type1 = 0;
      if ((int) tileCache.type == 216)
        Type1 = -1;
      if ((int) tileCache.type == 335)
        Type1 = -1;
      if ((int) tileCache.type == 338)
        Type1 = -1;
      if ((int) tileCache.type == 0)
        Type1 = 0;
      if ((int) tileCache.type == 192)
        Type1 = 3;
      if ((int) tileCache.type == 208)
        Type1 = 126;
      else if ((int) tileCache.type == 408 || (int) tileCache.type == 409)
        Type1 = 265;
      if ((int) tileCache.type == 16)
      {
        Type1 = 1;
        if ((int) tileCache.frameX >= 36)
          Type1 = 82;
      }
      else if ((int) tileCache.type == 415)
        Type1 = 6;
      else if ((int) tileCache.type == 416)
        Type1 = 61;
      else if ((int) tileCache.type == 417)
        Type1 = 242;
      else if ((int) tileCache.type == 418)
        Type1 = 135;
      if ((int) tileCache.type == 1 || (int) tileCache.type == 17 || ((int) tileCache.type == 38 || (int) tileCache.type == 39) || ((int) tileCache.type == 41 || (int) tileCache.type == 43 || ((int) tileCache.type == 44 || (int) tileCache.type == 48)) || (Main.tileStone[(int) tileCache.type] || (int) tileCache.type == 85 || ((int) tileCache.type == 90 || (int) tileCache.type == 92) || ((int) tileCache.type == 96 || (int) tileCache.type == 97 || ((int) tileCache.type == 99 || (int) tileCache.type == 117))) || ((int) tileCache.type == 130 || (int) tileCache.type == 131 || ((int) tileCache.type == 132 || (int) tileCache.type == 135) || ((int) tileCache.type == 135 || (int) tileCache.type == 142 || ((int) tileCache.type == 143 || (int) tileCache.type == 144)) || ((int) tileCache.type == 210 || (int) tileCache.type == 207 || ((int) tileCache.type == 235 || (int) tileCache.type == 247) || ((int) tileCache.type == 272 || (int) tileCache.type == 273 || ((int) tileCache.type == 283 || (int) tileCache.type == 410)))))
        Type1 = 1;
      if ((int) tileCache.type == 379)
        Type1 = 257;
      if ((int) tileCache.type == 311)
        Type1 = 207;
      if ((int) tileCache.type == 312)
        Type1 = 208;
      if ((int) tileCache.type == 313)
        Type1 = 209;
      if ((int) tileCache.type == 104)
        Type1 = -1;
      if ((int) tileCache.type == 95 || (int) tileCache.type == 98 || ((int) tileCache.type == 100 || (int) tileCache.type == 174) || (int) tileCache.type == 173)
        Type1 = 6;
      if ((int) tileCache.type == 30 || (int) tileCache.type == 86 || ((int) tileCache.type == 94 || (int) tileCache.type == 106) || ((int) tileCache.type == 114 || (int) tileCache.type == 124 || ((int) tileCache.type == 128 || (int) tileCache.type == 269)))
        Type1 = 7;
      if ((int) tileCache.type == 372)
        Type1 = 242;
      if ((int) tileCache.type == 371)
        Type1 = 243;
      if ((int) tileCache.type == 334)
        Type1 = 7;
      ushort type1 = tileCache.type;
      if ((uint) type1 <= 139U)
      {
        if ((uint) type1 <= 87U)
        {
          if ((uint) type1 - 10U > 1U && (int) type1 != 87)
            goto label_58;
        }
        else if ((int) type1 != 89 && (int) type1 != 93 && (int) type1 != 139)
          goto label_58;
      }
      else if ((uint) type1 <= 320U)
      {
        if ((int) type1 != 209 && (uint) type1 - 319U > 1U)
          goto label_58;
      }
      else if ((uint) type1 - 386U > 1U)
      {
        switch (type1)
        {
          case 390:
          case 405:
          case 406:
          case 411:
          case 412:
          case 419:
          case 420:
          case 421:
          case 422:
          case 423:
          case 424:
          case 425:
          case 428:
          case 429:
          case 441:
          case 442:
          case 445:
          case 446:
          case 447:
          case 448:
          case 449:
          case 450:
          case 451:
          case 452:
          case 453:
          case 455:
          case 456:
          case 457:
          case 462:
          case 463:
          case 464:
          case 465:
          case 466:
          case 468:
            break;
          case 407:
            Type1 = 10;
            goto label_58;
          case 454:
            Type1 = 139;
            goto label_58;
          default:
            goto label_58;
        }
      }
      Type1 = -1;
label_58:
      if ((int) tileCache.type == 240)
      {
        int num = (int) tileCache.frameX / 54;
        if ((int) tileCache.frameY >= 54)
          num += 36;
        Type1 = 7;
        if (num == 16 || num == 17)
          Type1 = 26;
        if (num >= 46 && num <= 49)
          Type1 = -1;
      }
      if ((int) tileCache.type == 241)
        Type1 = 1;
      if ((int) tileCache.type == 242)
        Type1 = -1;
      if ((int) tileCache.type == 356)
        Type1 = -1;
      if ((int) tileCache.type == 351)
        Type1 = -1;
      if ((int) tileCache.type == 246)
        Type1 = -1;
      if ((int) tileCache.type == 36)
        Type1 = -1;
      if ((int) tileCache.type == 365)
        Type1 = 239;
      if ((int) tileCache.type == 366)
        Type1 = 30;
      if ((int) tileCache.type == 357 || (int) tileCache.type == 367)
        Type1 = 236;
      if ((int) tileCache.type == 368 || (int) tileCache.type == 369)
        Type1 = 240;
      if ((int) tileCache.type == 170)
        Type1 = 196;
      if ((int) tileCache.type == 315)
        Type1 = 225;
      if ((int) tileCache.type == 346)
        Type1 = 128;
      if ((int) tileCache.type == 347)
        Type1 = 117;
      if ((int) tileCache.type == 348)
        Type1 = 42;
      if ((int) tileCache.type == 350)
        Type1 = 226;
      if ((int) tileCache.type == 370)
        Type1 = WorldGen.genRand.Next(2) != 0 ? 23 : 6;
      if ((int) tileCache.type == 171)
        Type1 = WorldGen.genRand.Next(2) != 0 ? -1 : 196;
      if ((int) tileCache.type == 326)
        Type1 = 13;
      if ((int) tileCache.type == 327)
        Type1 = 13;
      if ((int) tileCache.type == 345)
        Type1 = 13;
      if ((int) tileCache.type == 458)
        Type1 = 13;
      if ((int) tileCache.type == 459)
        Type1 = 13;
      if ((int) tileCache.type == 336)
        Type1 = 6;
      if ((int) tileCache.type == 340)
        Type1 = 75;
      if ((int) tileCache.type == 341)
        Type1 = 65;
      if ((int) tileCache.type == 342)
        Type1 = 135;
      if ((int) tileCache.type == 343)
        Type1 = 169;
      if ((int) tileCache.type == 344)
        Type1 = 156;
      if ((int) tileCache.type == 328)
        Type1 = 13;
      if ((int) tileCache.type == 329)
        Type1 = 13;
      if ((int) tileCache.type == 330)
        Type1 = 9;
      if ((int) tileCache.type == 331)
        Type1 = 11;
      if ((int) tileCache.type == 332)
        Type1 = 19;
      if ((int) tileCache.type == 333)
        Type1 = 11;
      if ((int) tileCache.type == 101)
        Type1 = -1;
      if ((int) tileCache.type == 19)
      {
        int num = (int) tileCache.frameY / 18;
        Type1 = num == 0 || num == 9 || (num == 10 || num == 11) || num == 12 ? 7 : (num != 1 ? (num != 2 ? (num != 3 ? (num != 4 ? (num != 5 ? (num != 13 ? (num != 14 ? (num < 15 || num > 16 ? (num != 17 ? (num != 18 ? (num != 19 ? (num != 20 ? (num != 21 ? (num != 22 ? (num != 23 ? (num != 24 ? (num != 25 ? (num != 26 ? (num != 27 ? (num != 28 ? (num != 29 ? (num != 30 ? (num != 31 ? (num != 32 ? (num != 33 ? (num != 34 ? (num != 35 ? 1 : 80) : 5) : 148) : 78) : 10) : 68 + Main.rand.Next(3)) : 236) : 240) : 23) : 226) : 40) : 147) : 78) : 8) : 1) : 4) : 214) : 214) : 215) : -1) : 13) : 109) : 126) : 26) : 79) : 78) : 77);
      }
      if ((int) tileCache.type == 79)
      {
        int num = (int) tileCache.frameY / 36;
        Type1 = num != 0 ? (num != 1 ? (num != 2 ? (num != 3 ? (num != 4 ? (num != 8 ? (num < 9 ? 1 : -1) : 109) : 126) : 79) : 78) : 77) : 7;
      }
      if ((int) tileCache.type == 18)
      {
        switch ((int) tileCache.frameX / 36)
        {
          case 0:
            Type1 = 7;
            break;
          case 1:
            Type1 = 77;
            break;
          case 2:
            Type1 = 78;
            break;
          case 3:
            Type1 = 79;
            break;
          case 4:
            Type1 = 26;
            break;
          case 5:
            Type1 = 40;
            break;
          case 6:
            Type1 = 5;
            break;
          case 7:
            Type1 = 26;
            break;
          case 8:
            Type1 = 4;
            break;
          case 9:
            Type1 = 126;
            break;
          case 10:
            Type1 = 148;
            break;
          case 11:
          case 12:
          case 13:
            Type1 = 1;
            break;
          case 14:
            Type1 = 109;
            break;
          case 15:
            Type1 = 126;
            break;
          default:
            Type1 = -1;
            break;
        }
      }
      if ((int) tileCache.type == 14 || (int) tileCache.type == 87 || (int) tileCache.type == 88)
        Type1 = -1;
      if ((int) tileCache.type >= (int) byte.MaxValue && (int) tileCache.type <= 261)
      {
        int num = (int) tileCache.type - (int) byte.MaxValue;
        Type1 = 86 + num;
        if (num == 6)
          Type1 = 138;
      }
      if ((int) tileCache.type >= 262 && (int) tileCache.type <= 268)
      {
        int num = (int) tileCache.type - 262;
        Type1 = 86 + num;
        if (num == 6)
          Type1 = 138;
      }
      if ((int) tileCache.type == 178)
      {
        int num = (int) tileCache.frameX / 18;
        Type1 = 86 + num;
        if (num == 6)
          Type1 = 138;
      }
      if ((int) tileCache.type == 440)
      {
        switch ((int) tileCache.frameX / 54)
        {
          case 0:
            Type1 = 90;
            break;
          case 1:
            Type1 = 88;
            break;
          case 2:
            Type1 = 89;
            break;
          case 3:
            Type1 = 87;
            break;
          case 4:
            Type1 = 86;
            break;
          case 5:
            Type1 = 91;
            break;
          case 6:
            Type1 = 138;
            break;
          default:
            Type1 = -1;
            break;
        }
        if ((int) tileCache.frameY < 54)
          Type1 = -1;
      }
      switch (tileCache.type)
      {
        case 426:
        case 427:
          Type1 = 90;
          break;
        case 430:
        case 435:
          Type1 = 89;
          break;
        case 431:
        case 436:
          Type1 = 88;
          break;
        case 432:
        case 437:
          Type1 = 87;
          break;
        case 433:
        case 438:
          Type1 = 86;
          break;
        case 434:
        case 439:
          Type1 = 91;
          break;
      }
      if ((int) tileCache.type == 186)
        Type1 = (int) tileCache.frameX > 360 ? ((int) tileCache.frameX > 846 ? ((int) tileCache.frameX > 954 ? ((int) tileCache.frameX > 1062 ? ((int) tileCache.frameX > 1170 ? ((int) tileCache.frameX > 1332 ? ((int) tileCache.frameX > 1386 ? 80 : 10) : 0) : 10) : 11) : 9) : 1) : 26;
      if ((int) tileCache.type == 187)
      {
        if ((int) tileCache.frameX <= 144)
          Type1 = 1;
        else if ((int) tileCache.frameX <= 306)
          Type1 = 38;
        else if ((int) tileCache.frameX <= 468)
          Type1 = 36;
        else if ((int) tileCache.frameX <= 738)
          Type1 = 30;
        else if ((int) tileCache.frameX <= 970)
          Type1 = 1;
        else if ((int) tileCache.frameX <= 1132)
          Type1 = 148;
        else if ((int) tileCache.frameX <= 1132)
          Type1 = 155;
        else if ((int) tileCache.frameX <= 1348)
          Type1 = 1;
        else if ((int) tileCache.frameX <= 1564)
          Type1 = 0;
      }
      if ((int) tileCache.type == 105)
      {
        Type1 = 1;
        if ((int) tileCache.frameX >= 1548 && (int) tileCache.frameX <= 1654 && (int) tileCache.frameY < 54)
          Type1 = 148;
      }
      if ((int) tileCache.type == 349)
        Type1 = 1;
      if ((int) tileCache.type == 337)
        Type1 = 1;
      if ((int) tileCache.type == 239)
      {
        int num1 = (int) tileCache.frameX / 18;
        if (num1 == 0)
          Type1 = 9;
        int num2 = 1;
        if (num1 == num2)
          Type1 = 81;
        int num3 = 2;
        if (num1 == num3)
          Type1 = 8;
        int num4 = 3;
        if (num1 == num4)
          Type1 = 82;
        int num5 = 4;
        if (num1 == num5)
          Type1 = 11;
        int num6 = 5;
        if (num1 == num6)
          Type1 = 83;
        int num7 = 6;
        if (num1 == num7)
          Type1 = 10;
        int num8 = 7;
        if (num1 == num8)
          Type1 = 84;
        int num9 = 8;
        if (num1 == num9)
          Type1 = 14;
        int num10 = 9;
        if (num1 == num10)
          Type1 = 23;
        int num11 = 10;
        if (num1 == num11)
          Type1 = 25;
        int num12 = 11;
        if (num1 == num12)
          Type1 = 48;
        int num13 = 12;
        if (num1 == num13)
          Type1 = 144;
        int num14 = 13;
        if (num1 == num14)
          Type1 = 49;
        int num15 = 14;
        if (num1 == num15)
          Type1 = 145;
        int num16 = 15;
        if (num1 == num16)
          Type1 = 50;
        int num17 = 16;
        if (num1 == num17)
          Type1 = 146;
        int num18 = 17;
        if (num1 == num18)
          Type1 = 128;
        int num19 = 18;
        if (num1 == num19)
          Type1 = 84;
        int num20 = 19;
        if (num1 == num20)
          Type1 = 117;
        int num21 = 20;
        if (num1 == num21)
          Type1 = 42;
        int num22 = 21;
        if (num1 == num22)
          Type1 = -1;
        int num23 = 22;
        if (num1 == num23)
          Type1 = 265;
      }
      if ((int) tileCache.type == 185)
      {
        if ((int) tileCache.frameY == 18)
        {
          int num = (int) tileCache.frameX / 36;
          if (num < 6)
            Type1 = 1;
          else if (num < 16)
            Type1 = 26;
          else if (num == 16)
            Type1 = 9;
          else if (num == 17)
            Type1 = 11;
          else if (num == 18)
            Type1 = 10;
          else if (num == 19)
            Type1 = 86;
          else if (num == 20)
            Type1 = 87;
          else if (num == 21)
            Type1 = 88;
          else if (num == 22)
            Type1 = 89;
          else if (num == 23)
            Type1 = 90;
          else if (num == 24)
            Type1 = 91;
          else if (num < 31)
            Type1 = 80;
          else if (num < 33)
            Type1 = 7;
          else if (num < 34)
            Type1 = 8;
          else if (num < 39)
            Type1 = 30;
          else if (num < 42)
            Type1 = 1;
        }
        else
        {
          int num = (int) tileCache.frameX / 18;
          if (num < 6)
            Type1 = 1;
          else if (num < 12)
            Type1 = 0;
          else if (num < 27)
            Type1 = 26;
          else if (num < 32)
            Type1 = 1;
          else if (num < 35)
            Type1 = 0;
          else if (num < 46)
            Type1 = 80;
          else if (num < 52)
            Type1 = 30;
        }
      }
      if ((int) tileCache.type == 184)
      {
        int num = (int) tileCache.frameX / 22;
        Type1 = num != 5 ? 93 + num : 258;
      }
      if ((int) tileCache.type == 237)
        Type1 = 148;
      if ((int) tileCache.type == 157)
        Type1 = 77;
      if ((int) tileCache.type == 158 || (int) tileCache.type == 232 || (int) tileCache.type == 383)
        Type1 = 78;
      if ((int) tileCache.type == 159)
        Type1 = 78;
      if ((int) tileCache.type == 15)
        Type1 = -1;
      if ((int) tileCache.type == 191)
        Type1 = 7;
      if ((int) tileCache.type == 5)
      {
        Type1 = 7;
        if (i > 5 && i < Main.maxTilesX - 5)
        {
          int index1 = i;
          int index2 = j;
          if ((int) tileCache.frameX == 66 && (int) tileCache.frameY <= 45)
            ++index1;
          if ((int) tileCache.frameX == 88 && (int) tileCache.frameY >= 66 && (int) tileCache.frameY <= 110)
            --index1;
          if ((int) tileCache.frameX == 22 && (int) tileCache.frameY >= 132 && (int) tileCache.frameY <= 176)
            --index1;
          if ((int) tileCache.frameX == 44 && (int) tileCache.frameY >= 132 && (int) tileCache.frameY <= 176)
            ++index1;
          if ((int) tileCache.frameX == 44 && (int) tileCache.frameY >= 132 && (int) tileCache.frameY <= 176)
            ++index1;
          if ((int) tileCache.frameX == 44 && (int) tileCache.frameY >= 198)
            ++index1;
          if ((int) tileCache.frameX == 66 && (int) tileCache.frameY >= 198)
            --index1;
          while (Main.tile[index1, index2] != null && (!Main.tile[index1, index2].active() || !Main.tileSolid[(int) Main.tile[index1, index2].type]))
            ++index2;
          if (Main.tile[index1, index2] != null)
          {
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 23)
              Type1 = 77;
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 60)
              Type1 = 78;
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 70)
              Type1 = 26;
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 109)
              Type1 = 79;
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 199)
              Type1 = 121;
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 147)
              Type1 = 122;
          }
        }
      }
      if ((int) tileCache.type == 323)
      {
        Type1 = 215;
        if (i > 5 && i < Main.maxTilesX - 5)
        {
          int index1 = i;
          int index2 = j;
          while (Main.tile[index1, index2] != null && (!Main.tile[index1, index2].active() || !Main.tileSolid[(int) Main.tile[index1, index2].type]))
            ++index2;
          if (Main.tile[index1, index2] != null)
          {
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 234)
              Type1 = 121;
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 116)
              Type1 = 79;
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 112)
              Type1 = 77;
          }
        }
      }
      if ((int) tileCache.type == 137)
      {
        Type1 = 1;
        if ((int) tileCache.frameY / 18 > 0)
          Type1 = 148;
      }
      if ((int) tileCache.type == 443)
        Type1 = 1;
      if ((int) tileCache.type == 444)
        Type1 = -1;
      if ((int) tileCache.type == 212)
        Type1 = -1;
      if ((int) tileCache.type == 213)
        Type1 = 129;
      if ((int) tileCache.type == 214)
        Type1 = 1;
      if ((int) tileCache.type == 215)
        Type1 = -6;
      if ((int) tileCache.type == 325)
        Type1 = 81;
      if ((int) tileCache.type == 251)
        Type1 = 189;
      if ((int) tileCache.type == 252)
        Type1 = 190;
      if ((int) tileCache.type == 253)
        Type1 = 191;
      if ((int) tileCache.type == 254)
      {
        if ((int) tileCache.frameX < 72)
          Type1 = 3;
        else if ((int) tileCache.frameX < 108)
        {
          Type1 = 3;
          if (WorldGen.genRand.Next(3) == 0)
            Type1 = 189;
        }
        else if ((int) tileCache.frameX < 144)
        {
          Type1 = 3;
          if (WorldGen.genRand.Next(2) == 0)
            Type1 = 189;
        }
        else
        {
          Type1 = 3;
          if (WorldGen.genRand.Next(4) != 0)
            Type1 = 189;
        }
      }
      if ((int) tileCache.type == 467)
        Type1 = -1;
      if ((int) tileCache.type == 21)
        Type1 = (int) tileCache.frameX < 1008 ? ((int) tileCache.frameX < 612 ? ((int) tileCache.frameX < 576 ? ((int) tileCache.frameX < 540 ? ((int) tileCache.frameX < 504 ? ((int) tileCache.frameX < 468 ? ((int) tileCache.frameX < 432 ? ((int) tileCache.frameX < 396 ? ((int) tileCache.frameX < 360 ? ((int) tileCache.frameX < 324 ? ((int) tileCache.frameX < 288 ? ((int) tileCache.frameX < 252 ? ((int) tileCache.frameX < 216 ? ((int) tileCache.frameX < 180 ? ((int) tileCache.frameX < 108 ? ((int) tileCache.frameX < 36 ? 7 : 10) : 37) : 7) : 1) : 77) : 78) : 79) : 10) : 11) : 7) : 116) : 126) : 26) : 148) : 11) : -1;
      if ((int) tileCache.type == 2)
        Type1 = WorldGen.genRand.Next(2) != 0 ? 2 : 0;
      if (Main.tileMoss[(int) tileCache.type])
        Type1 = (int) tileCache.type != 381 ? (int) tileCache.type - 179 + 93 : 258;
      if ((int) tileCache.type == (int) sbyte.MaxValue)
        Type1 = 67;
      if ((int) tileCache.type == 91)
        Type1 = -1;
      if ((int) tileCache.type == 198)
        Type1 = 109;
      if ((int) tileCache.type == 26)
        Type1 = (int) tileCache.frameX < 54 ? 8 : 5;
      if ((int) tileCache.type == 34)
        Type1 = -1;
      if ((int) tileCache.type == 6)
        Type1 = 8;
      if ((int) tileCache.type == 7 || (int) tileCache.type == 47 || (int) tileCache.type == 284)
        Type1 = 9;
      if ((int) tileCache.type == 8 || (int) tileCache.type == 45 || (int) tileCache.type == 102)
        Type1 = 10;
      if ((int) tileCache.type == 9 || (int) tileCache.type == 42 || ((int) tileCache.type == 46 || (int) tileCache.type == 126) || (int) tileCache.type == 136)
        Type1 = 11;
      if ((int) tileCache.type == 166 || (int) tileCache.type == 175)
        Type1 = 81;
      if ((int) tileCache.type == 167)
        Type1 = 82;
      if ((int) tileCache.type == 168 || (int) tileCache.type == 176)
        Type1 = 83;
      if ((int) tileCache.type == 169 || (int) tileCache.type == 177)
        Type1 = 84;
      if ((int) tileCache.type == 199)
        Type1 = 117;
      if ((int) tileCache.type == 205)
        Type1 = 125;
      if ((int) tileCache.type == 201)
        Type1 = 125;
      if ((int) tileCache.type == 211)
        Type1 = 128;
      if ((int) tileCache.type == 227)
      {
        switch ((int) tileCache.frameX / 34)
        {
          case 0:
          case 1:
            Type1 = 26;
            break;
          case 3:
            Type1 = 3;
            break;
          case 2:
          case 4:
          case 5:
          case 6:
            Type1 = 40;
            break;
          case 7:
            Type1 = 117;
            break;
          case 8:
            Type1 = 17;
            break;
          case 9:
            Type1 = 6;
            break;
          case 10:
            Type1 = 3;
            break;
          case 11:
            Type1 = 26;
            break;
        }
      }
      if ((int) tileCache.type == 204)
      {
        Type1 = 117;
        if (WorldGen.genRand.Next(2) == 0)
          Type1 = 1;
      }
      if ((int) tileCache.type == 203)
        Type1 = 117;
      if ((int) tileCache.type == 243)
        Type1 = WorldGen.genRand.Next(2) != 0 ? 13 : 7;
      if ((int) tileCache.type == 244)
        Type1 = WorldGen.genRand.Next(2) != 0 ? 13 : 1;
      else if ((int) tileCache.type >= 358 && (int) tileCache.type <= 364 || (int) tileCache.type >= 275 && (int) tileCache.type <= 282 || ((int) tileCache.type == 285 || (int) tileCache.type == 286 || (int) tileCache.type >= 288 && (int) tileCache.type <= 297) || ((int) tileCache.type >= 316 && (int) tileCache.type <= 318 || ((int) tileCache.type == 298 || (int) tileCache.type == 299) || ((int) tileCache.type == 309 || (int) tileCache.type == 310 || ((int) tileCache.type == 339 || (int) tileCache.type == 413))) || (int) tileCache.type == 414)
      {
        Type1 = 13;
        if (WorldGen.genRand.Next(3) != 0)
          Type1 = -1;
      }
      if ((int) tileCache.type == 13)
        Type1 = (int) tileCache.frameX < 90 ? 13 : -1;
      if ((int) tileCache.type == 189)
        Type1 = 16;
      if ((int) tileCache.type == 460)
        Type1 = 16;
      if ((int) tileCache.type == 12)
        Type1 = 12;
      if ((int) tileCache.type == 3 || (int) tileCache.type == 73)
        Type1 = 3;
      if ((int) tileCache.type == 54)
        Type1 = 13;
      if ((int) tileCache.type == 22 || (int) tileCache.type == 140)
        Type1 = 14;
      if ((int) tileCache.type == 78)
        Type1 = 22;
      if ((int) tileCache.type == 28)
      {
        Type1 = 22;
        if ((int) tileCache.frameY >= 72 && (int) tileCache.frameY <= 90)
          Type1 = 1;
        if ((int) tileCache.frameY >= 144 && (int) tileCache.frameY <= 234)
          Type1 = 48;
        if ((int) tileCache.frameY >= 252 && (int) tileCache.frameY <= 358)
          Type1 = 85;
        if ((int) tileCache.frameY >= 360 && (int) tileCache.frameY <= 466)
          Type1 = 26;
        if ((int) tileCache.frameY >= 468 && (int) tileCache.frameY <= 574)
          Type1 = 36;
        if ((int) tileCache.frameY >= 576 && (int) tileCache.frameY <= 790)
          Type1 = 18;
        if ((int) tileCache.frameY >= 792 && (int) tileCache.frameY <= 898)
          Type1 = 5;
        if ((int) tileCache.frameY >= 900 && (int) tileCache.frameY <= 1006)
          Type1 = 0;
        if ((int) tileCache.frameY >= 1008 && (int) tileCache.frameY <= 1114)
          Type1 = 148;
        if ((int) tileCache.frameY >= 1116 && (int) tileCache.frameY <= 1222)
          Type1 = 241;
      }
      if ((int) tileCache.type == 163)
        Type1 = 118;
      if ((int) tileCache.type == 164)
        Type1 = 119;
      if ((int) tileCache.type == 200)
        Type1 = 120;
      if ((int) tileCache.type == 221 || (int) tileCache.type == 248)
        Type1 = 144;
      if ((int) tileCache.type == 222 || (int) tileCache.type == 249)
        Type1 = 145;
      if ((int) tileCache.type == 223 || (int) tileCache.type == 250)
        Type1 = 146;
      if ((int) tileCache.type == 224)
        Type1 = 149;
      if ((int) tileCache.type == 225)
        Type1 = 147;
      if ((int) tileCache.type == 229)
        Type1 = 153;
      if ((int) tileCache.type == 231)
      {
        Type1 = 153;
        if (WorldGen.genRand.Next(3) == 0)
          Type1 = 26;
      }
      if ((int) tileCache.type == 226)
        Type1 = 148;
      if ((int) tileCache.type == 103)
        Type1 = -1;
      if ((int) tileCache.type == 29)
        Type1 = 23;
      if ((int) tileCache.type == 40)
        Type1 = 28;
      if ((int) tileCache.type == 49)
        Type1 = 29;
      if ((int) tileCache.type == 50)
        Type1 = 22;
      if ((int) tileCache.type == 51)
        Type1 = 30;
      if ((int) tileCache.type == 52 || (int) tileCache.type == 353)
        Type1 = 3;
      if ((int) tileCache.type == 53 || (int) tileCache.type == 81 || ((int) tileCache.type == 151 || (int) tileCache.type == 202) || (int) tileCache.type == 274)
        Type1 = 32;
      if ((int) tileCache.type == 56 || (int) tileCache.type == 152)
        Type1 = 37;
      if ((int) tileCache.type == 75)
        Type1 = 109;
      if ((int) tileCache.type == 57 || (int) tileCache.type == 119 || ((int) tileCache.type == 141 || (int) tileCache.type == 234))
        Type1 = 36;
      if ((int) tileCache.type == 59 || (int) tileCache.type == 120)
        Type1 = 38;
      if ((int) tileCache.type == 61 || (int) tileCache.type == 62 || ((int) tileCache.type == 74 || (int) tileCache.type == 80) || ((int) tileCache.type == 188 || (int) tileCache.type == 233 || ((int) tileCache.type == 236 || (int) tileCache.type == 384)))
        Type1 = 40;
      if ((int) tileCache.type == 238)
        Type1 = WorldGen.genRand.Next(3) != 0 ? 166 : 167;
      if ((int) tileCache.type == 69)
        Type1 = 7;
      if ((int) tileCache.type == 71 || (int) tileCache.type == 72 || (int) tileCache.type == 190)
        Type1 = 26;
      if ((int) tileCache.type == 70)
        Type1 = 17;
      if ((int) tileCache.type == 112)
        Type1 = 14;
      if ((int) tileCache.type == 123)
        Type1 = 53;
      if ((int) tileCache.type == 161)
        Type1 = 80;
      if ((int) tileCache.type == 206)
        Type1 = 80;
      if ((int) tileCache.type == 162)
        Type1 = 80;
      if ((int) tileCache.type == 165)
      {
        switch ((int) tileCache.frameX / 54)
        {
          case 0:
            Type1 = 80;
            break;
          case 1:
            Type1 = 1;
            break;
          case 2:
            Type1 = 30;
            break;
          case 3:
            Type1 = 147;
            break;
          case 4:
            Type1 = 1;
            break;
          case 5:
            Type1 = 14;
            break;
          case 6:
            Type1 = 117;
            break;
          case 7:
            Type1 = 250;
            break;
          case 8:
            Type1 = 240;
            break;
          case 9:
            Type1 = 236;
            break;
          default:
            Type1 = 1;
            break;
        }
      }
      if ((int) tileCache.type == 193)
        Type1 = 4;
      if ((int) tileCache.type == 194)
        Type1 = 26;
      if ((int) tileCache.type == 195)
        Type1 = 5;
      if ((int) tileCache.type == 196)
        Type1 = 108;
      if ((int) tileCache.type == 197)
        Type1 = 4;
      if ((int) tileCache.type == 153)
        Type1 = 26;
      if ((int) tileCache.type == 154)
        Type1 = 32;
      if ((int) tileCache.type == 155)
        Type1 = 2;
      if ((int) tileCache.type == 156)
        Type1 = 1;
      if ((int) tileCache.type == 116 || (int) tileCache.type == 118 || ((int) tileCache.type == 147 || (int) tileCache.type == 148))
        Type1 = 51;
      if ((int) tileCache.type == 109)
        Type1 = WorldGen.genRand.Next(2) != 0 ? 47 : 0;
      if ((int) tileCache.type == 110 || (int) tileCache.type == 113 || (int) tileCache.type == 115)
        Type1 = 47;
      if ((int) tileCache.type == 107 || (int) tileCache.type == 121)
        Type1 = 48;
      if ((int) tileCache.type == 108 || (int) tileCache.type == 122 || (int) tileCache.type == 146)
        Type1 = 49;
      if ((int) tileCache.type == 111 || (int) tileCache.type == 145 || (int) tileCache.type == 150)
        Type1 = 50;
      if ((int) tileCache.type == 133)
      {
        Type1 = 50;
        if ((int) tileCache.frameX >= 54)
          Type1 = 146;
      }
      if ((int) tileCache.type == 134)
      {
        Type1 = 49;
        if ((int) tileCache.frameX >= 36)
          Type1 = 145;
      }
      if ((int) tileCache.type == 149)
        Type1 = 49;
      if (Main.tileAlch[(int) tileCache.type])
      {
        int num1 = (int) tileCache.frameX / 18;
        if (num1 == 0)
          Type1 = 3;
        int num2 = 1;
        if (num1 == num2)
          Type1 = 3;
        int num3 = 2;
        if (num1 == num3)
          Type1 = 7;
        int num4 = 3;
        if (num1 == num4)
          Type1 = 17;
        int num5 = 4;
        if (num1 == num5)
          Type1 = 3;
        int num6 = 5;
        if (num1 == num6)
          Type1 = 6;
        int num7 = 6;
        if (num1 == num7)
          Type1 = 224;
      }
      if ((int) tileCache.type == 58 || (int) tileCache.type == 76 || (int) tileCache.type == 77)
        Type1 = WorldGen.genRand.Next(2) != 0 ? 25 : 6;
      if ((int) tileCache.type == 37)
        Type1 = WorldGen.genRand.Next(2) != 0 ? 23 : 6;
      if ((int) tileCache.type == 32)
        Type1 = WorldGen.genRand.Next(2) != 0 ? 24 : 14;
      if ((int) tileCache.type == 352)
        Type1 = WorldGen.genRand.Next(3) != 0 ? 125 : 5;
      if ((int) tileCache.type == 23 || (int) tileCache.type == 24)
        Type1 = WorldGen.genRand.Next(2) != 0 ? 17 : 14;
      if ((int) tileCache.type == 25 || (int) tileCache.type == 31)
        Type1 = (int) tileCache.type != 31 || (int) tileCache.frameX < 36 ? (WorldGen.genRand.Next(2) != 0 ? 1 : 14) : 5;
      if ((int) tileCache.type == 20)
      {
        switch ((int) tileCache.frameX / 54)
        {
          case 1:
            Type1 = 122;
            break;
          case 2:
            Type1 = 78;
            break;
          case 3:
            Type1 = 77;
            break;
          case 4:
            Type1 = 121;
            break;
          case 5:
            Type1 = 79;
            break;
          default:
            Type1 = 7;
            break;
        }
      }
      if ((int) tileCache.type == 27)
        Type1 = WorldGen.genRand.Next(2) != 0 ? 19 : 3;
      if ((int) tileCache.type == 129)
        Type1 = (int) tileCache.frameX == 0 || (int) tileCache.frameX == 54 || (int) tileCache.frameX == 108 ? 68 : ((int) tileCache.frameX == 18 || (int) tileCache.frameX == 72 || (int) tileCache.frameX == 126 ? 69 : 70);
      if ((int) tileCache.type == 385)
        Type1 = WorldGen.genRand.Next(68, 71);
      if ((int) tileCache.type == 4)
      {
        int num = (int) tileCache.frameY / 22;
        switch (num)
        {
          case 0:
            Type1 = 6;
            break;
          case 8:
            Type1 = 75;
            break;
          case 9:
            Type1 = 135;
            break;
          case 10:
            Type1 = 158;
            break;
          case 11:
            Type1 = 169;
            break;
          case 12:
            Type1 = 156;
            break;
          case 13:
            Type1 = 234;
            break;
          case 14:
            Type1 = 66;
            break;
          case 15:
            Type1 = 242;
            break;
          default:
            Type1 = 58 + num;
            break;
        }
      }
      if ((int) tileCache.type == 35)
      {
        Type1 = 189;
        if ((int) tileCache.frameX < 36 && WorldGen.genRand.Next(2) == 0)
          Type1 = 6;
      }
      if (((int) tileCache.type == 34 || (int) tileCache.type == 42) && WorldGen.genRand.Next(2) == 0)
        Type1 = 6;
      if ((int) tileCache.type == 270)
        Type1 = -1;
      if ((int) tileCache.type == 271)
        Type1 = -1;
      if ((int) tileCache.type == 79 || (int) tileCache.type == 90 || (int) tileCache.type == 101)
        Type1 = -1;
      if ((int) tileCache.type == 33 || (int) tileCache.type == 34 || ((int) tileCache.type == 42 || (int) tileCache.type == 93) || (int) tileCache.type == 100)
        Type1 = -1;
      if ((int) tileCache.type == 321)
        Type1 = 214;
      if ((int) tileCache.type == 322)
        Type1 = 215;
      bool flag = (int) tileCache.type == 178 || (int) tileCache.type == 440;
      ushort type2 = tileCache.type;
      if ((int) type2 == 178 || (uint) type2 - 426U <= 1U || (uint) type2 - 430U <= 10U)
        flag = true;
      if (Type1 < 0)
        return 6000;
      if ((int) tileCache.type == 352 && Type1 == 5)
      {
        int index = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 5, 0.0f, 0.0f, 100, (Color) null, 1f);
        Main.dust[index].scale = 1.5f;
        Main.dust[index].noGravity = true;
        Dust dust = Main.dust[index];
        Vector2 vector2 = Vector2.op_Multiply(dust.velocity, 1.65f);
        dust.velocity = vector2;
        Main.dust[index].fadeIn = 1.6f;
        return index;
      }
      if ((int) tileCache.type == 160)
      {
        int index = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 66, 0.0f, 0.0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 0.75f);
        Main.dust[index].noGravity = true;
        return index;
      }
      if ((int) tileCache.type == 323)
      {
        int frameY = (int) tileCache.frameY;
        return Dust.NewDust(new Vector2((float) (i * 16 + frameY), (float) (j * 16)), 16, 16, Type1, 0.0f, 0.0f, 0, (Color) null, 1f);
      }
      if ((int) tileCache.type == 314)
      {
        int index = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, 213, (float) WorldGen.genRand.Next(-2, 3), (float) WorldGen.genRand.Next(-2, 3), 0, (Color) null, 1f);
        Main.dust[index].noGravity = true;
        Main.dust[index].fadeIn = (float) ((double) Main.dust[index].scale + 1.0 + 0.00999999977648258 * (double) WorldGen.genRand.Next(0, 51));
        Main.dust[index].noGravity = true;
        return index;
      }
      if (flag)
      {
        int index = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, Type1, 0.0f, 0.0f, 75, (Color) null, 0.75f);
        Main.dust[index].noLight = true;
        return index;
      }
      if ((int) tileCache.type == 193 || (int) tileCache.type == 18 && Type1 == 4)
        return Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, Type1, 0.0f, 0.0f, 75, new Color(0, 80, (int) byte.MaxValue, 100), 0.75f);
      if ((int) tileCache.type == 197)
        return Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, Type1, 0.0f, 0.0f, 75, new Color(97, 200, (int) byte.MaxValue, 100), 0.75f);
      if ((int) tileCache.type == 185 && Type1 >= 86 && Type1 <= 91)
      {
        int index = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, Type1, 0.0f, 0.0f, 75, (Color) null, 0.75f);
        Main.dust[index].noLight = true;
        return index;
      }
      if ((int) tileCache.type == 4 && Type1 == 66)
      {
        int index = Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, Type1, 0.0f, 0.0f, 0, new Color((float) Main.DiscoR / (float) byte.MaxValue, (float) Main.DiscoG / (float) byte.MaxValue, (float) Main.DiscoB / (float) byte.MaxValue), 1f);
        Main.dust[index].noGravity = true;
        return index;
      }
      if (Type1 != 139)
        return Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, Type1, 0.0f, 0.0f, 0, (Color) null, 1f);
      int Type2 = Type1 + Main.rand.Next(4);
      return Dust.NewDust(new Vector2((float) (i * 16), (float) (j * 16)), 16, 16, Type2, 0.0f, 0.0f, 0, (Color) null, 1f);
    }

    public static bool IsOpenDoorAnchorFrame(int x, int y)
    {
      Tile tile = Main.tile[x, y];
      if (!tile.active() || (int) tile.type != 11)
        return false;
      int num = (int) tile.frameX % 72;
      if (num >= 18)
        return num < 54;
      return false;
    }

    public static bool IsLockedDoor(int x, int y)
    {
      Tile tile = Main.tile[x, y];
      if ((int) tile.type == 10 && (int) tile.frameY >= 594 && (int) tile.frameY <= 646)
        return (int) tile.frameX < 54;
      return false;
    }

    public static void DropDoorItem(int x, int y, int doorStyle)
    {
      int Type = 0;
      if (doorStyle == 0)
        Type = 25;
      else if (doorStyle == 9)
        Type = 837;
      else if (doorStyle == 10)
        Type = 912;
      else if (doorStyle == 12)
        Type = 1137;
      else if (doorStyle == 13)
        Type = 1138;
      else if (doorStyle == 14)
        Type = 1139;
      else if (doorStyle == 15)
        Type = 1140;
      else if (doorStyle == 16)
        Type = 1411;
      else if (doorStyle == 17)
        Type = 1412;
      else if (doorStyle == 18)
        Type = 1413;
      else if (doorStyle == 19)
        Type = 1458;
      else if (doorStyle >= 20 && doorStyle <= 23)
        Type = 1709 + doorStyle - 20;
      else if (doorStyle == 24)
        Type = 1793;
      else if (doorStyle == 25)
        Type = 1815;
      else if (doorStyle == 26)
        Type = 1924;
      else if (doorStyle == 27)
        Type = 2044;
      else if (doorStyle == 28)
        Type = 2265;
      else if (doorStyle == 29)
        Type = 2528;
      else if (doorStyle == 30)
        Type = 2561;
      else if (doorStyle == 31)
        Type = 2576;
      else if (doorStyle == 32)
        Type = 2815;
      else if (doorStyle == 33)
        Type = 3129;
      else if (doorStyle == 34)
        Type = 3131;
      else if (doorStyle == 35)
        Type = 3130;
      else if (doorStyle == 36)
        Type = 3888;
      else if (doorStyle >= 4 && doorStyle <= 8)
        Type = 812 + doorStyle;
      else if (doorStyle != 11)
        Type = 649 + doorStyle;
      if (Type == 0)
        return;
      Item.NewItem(x * 16, y * 16, 16, 16, Type, 1, false, 0, false, false);
    }

    public static bool PlayerLOS(int x, int y)
    {
      Rectangle rectangle1;
      // ISSUE: explicit reference operation
      ((Rectangle) @rectangle1).\u002Ector(x * 16, y * 16, 16, 16);
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        if (Main.player[index].active)
        {
          Rectangle rectangle2;
          // ISSUE: explicit reference operation
          ((Rectangle) @rectangle2).\u002Ector((int) ((double) Main.player[index].position.X + (double) Main.player[index].width * 0.5 - (double) NPC.sWidth * 0.6), (int) ((double) Main.player[index].position.Y + (double) Main.player[index].height * 0.5 - (double) NPC.sHeight * 0.6), (int) ((double) NPC.sWidth * 1.2), (int) ((double) NPC.sHeight * 1.2));
          // ISSUE: explicit reference operation
          if (((Rectangle) @rectangle1).Intersects(rectangle2))
            return true;
        }
      }
      return false;
    }

    public static bool Chlorophyte(int i, int j)
    {
      int num1 = 40;
      int num2 = 130;
      int num3 = 35;
      int num4 = 85;
      if ((double) j < Main.rockLayer)
      {
        num1 /= 2;
        num2 /= 2;
        num3 = (int) ((double) num3 * 1.5);
        num4 = (int) ((double) num4 * 1.5);
      }
      int num5 = 0;
      for (int index1 = i - num3; index1 < i + num3; ++index1)
      {
        for (int index2 = j - num3; index2 < j + num3; ++index2)
        {
          if (index1 < Main.maxTilesX - 10 && index1 > 10 && (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 211))
            ++num5;
        }
      }
      if (num5 > num1)
        return false;
      int num6 = 0;
      for (int index1 = i - num4; index1 < i + num4; ++index1)
      {
        for (int index2 = j - num4; index2 < j + num4; ++index2)
        {
          if (index1 < Main.maxTilesX - 10 && index1 > 10 && (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 211))
            ++num6;
        }
      }
      return num6 <= num2;
    }

    private static bool nearbyChlorophyte(int i, int j)
    {
      float num1 = 0.0f;
      int num2 = 10;
      if (i <= num2 + 5 || i >= Main.maxTilesX - num2 - 5 || (j <= num2 + 5 || j >= Main.maxTilesY - num2 - 5))
        return false;
      for (int index1 = i - num2; index1 < i + num2; ++index1)
      {
        for (int index2 = j - num2; index2 < j + num2; ++index2)
        {
          if (Main.tile[index1, index2].active() && ((int) Main.tile[index1, index2].type == 211 || (int) Main.tile[index1, index2].type == 346))
          {
            ++num1;
            if ((double) num1 == 5.0)
              return true;
          }
        }
      }
      return (double) num1 > 0.0 && (double) WorldGen.genRand.Next(5) < (double) num1;
    }

    private static int CountNearBlocksTypes(int i, int j, int radius, int cap = 0, params int[] tiletypes)
    {
      if (tiletypes.Length == 0)
        return 0;
      int num1 = i - radius;
      int num2 = i + radius;
      int num3 = j - radius;
      int num4 = j + radius;
      int min = 0;
      int max = Main.maxTilesX - 1;
      int num5 = Utils.Clamp<int>(num1, min, max);
      int num6 = Utils.Clamp<int>(num2, 0, Main.maxTilesX - 1);
      int num7 = Utils.Clamp<int>(num3, 0, Main.maxTilesY - 1);
      int num8 = Utils.Clamp<int>(num4, 0, Main.maxTilesY - 1);
      int num9 = 0;
      for (int index1 = num5; index1 < num6; ++index1)
      {
        for (int index2 = num7; index2 < num8; ++index2)
        {
          if (Main.tile[index1, index2].active())
          {
            foreach (int tiletype in tiletypes)
            {
              if (tiletype == (int) Main.tile[index1, index2].type)
              {
                ++num9;
                if (cap > 0 && num9 >= cap)
                  return num9;
                break;
              }
            }
          }
        }
      }
      return num9;
    }

    public static void hardUpdateWorld(int i, int j)
    {
      if (!Main.hardMode || Main.tile[i, j].inActive())
        return;
      int type = (int) Main.tile[i, j].type;
      switch (type)
      {
        case 117:
        case 164:
          if ((double) j > Main.rockLayer && WorldGen.genRand.Next(110) == 0)
          {
            int num1 = WorldGen.genRand.Next(4);
            int num2 = 0;
            int num3 = 0;
            if (num1 == 0)
              num2 = -1;
            else if (num1 == 1)
              num2 = 1;
            else
              num3 = num1 != 0 ? 1 : -1;
            if (!Main.tile[i + num2, j + num3].active())
            {
              int num4 = 0;
              int num5 = 6;
              for (int index1 = i - num5; index1 <= i + num5; ++index1)
              {
                for (int index2 = j - num5; index2 <= j + num5; ++index2)
                {
                  if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 129)
                    ++num4;
                }
              }
              if (num4 < 2)
              {
                WorldGen.PlaceTile(i + num2, j + num3, 129, true, false, -1, 0);
                NetMessage.SendTileSquare(-1, i + num2, j + num3, 1, TileChangeType.None);
                break;
              }
              break;
            }
            break;
          }
          break;
      }
      if ((double) j > (Main.worldSurface + Main.rockLayer) / 2.0)
      {
        if (type == 60 && WorldGen.genRand.Next(300) == 0)
        {
          int index1 = i + WorldGen.genRand.Next(-10, 11);
          int index2 = j + WorldGen.genRand.Next(-10, 11);
          if (WorldGen.InWorld(index1, index2, 2) && Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 59 && (!Main.tile[index1, index2 - 1].active() || (int) Main.tile[index1, index2 - 1].type != 5 && (int) Main.tile[index1, index2 - 1].type != 236 && (int) Main.tile[index1, index2 - 1].type != 238) && WorldGen.Chlorophyte(index1, index2))
          {
            Main.tile[index1, index2].type = (ushort) 211;
            WorldGen.SquareTileFrame(index1, index2, true);
            if (Main.netMode == 2)
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
          }
        }
        if (type == 211 && WorldGen.genRand.Next(3) != 0)
        {
          int index1 = i;
          int index2 = j;
          int num1 = WorldGen.genRand.Next(4);
          if (num1 == 0)
            ++index1;
          int num2 = 1;
          if (num1 == num2)
            --index1;
          int num3 = 2;
          if (num1 == num3)
            ++index2;
          int num4 = 3;
          if (num1 == num4)
            --index2;
          if (WorldGen.InWorld(index1, index2, 2) && Main.tile[index1, index2].active() && ((int) Main.tile[index1, index2].type == 59 || (int) Main.tile[index1, index2].type == 60) && WorldGen.Chlorophyte(index1, index2))
          {
            Main.tile[index1, index2].type = (ushort) 211;
            WorldGen.SquareTileFrame(index1, index2, true);
            if (Main.netMode == 2)
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
          }
          bool flag = true;
          while (flag)
          {
            flag = false;
            int index3 = i + Main.rand.Next(-5, 6);
            int index4 = j + Main.rand.Next(-5, 6);
            if (WorldGen.InWorld(index3, index4, 2) && Main.tile[index3, index4].active())
            {
              if ((int) Main.tile[index3, index4].type == 23 || (int) Main.tile[index3, index4].type == 199 || ((int) Main.tile[index3, index4].type == 2 || (int) Main.tile[index3, index4].type == 109))
              {
                Main.tile[index3, index4].type = (ushort) 60;
                WorldGen.SquareTileFrame(index3, index4, true);
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, index3, index4, 1, TileChangeType.None);
                flag = true;
              }
              else if ((int) Main.tile[index3, index4].type == 0)
              {
                Main.tile[index3, index4].type = (ushort) 59;
                WorldGen.SquareTileFrame(index3, index4, true);
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, index3, index4, 1, TileChangeType.None);
                flag = true;
              }
            }
          }
        }
      }
      if (NPC.downedPlantBoss && WorldGen.genRand.Next(2) != 0)
        return;
      if (type == 23 || type == 25 || (type == 32 || type == 112) || (type == 163 || type == 400 || type == 398))
      {
        bool flag1 = true;
        while (flag1)
        {
          flag1 = false;
          int index1 = i + WorldGen.genRand.Next(-3, 4);
          int index2 = j + WorldGen.genRand.Next(-3, 4);
          bool flag2 = false;
          if ((uint) Main.tile[index1, index2].type - 59U <= 1U)
          {
            flag2 = WorldGen.nearbyChlorophyte(index1, index2);
          }
          else
          {
            bool flag3 = false;
            int index3 = index1;
            int index4 = index2;
            for (int index5 = 0; index5 < 4; ++index5)
            {
              switch (index5)
              {
                case 0:
                  index3 = index1 - 1;
                  index4 = index2;
                  break;
                case 1:
                  index3 = index1 + 1;
                  index4 = index2;
                  break;
                case 2:
                  index3 = index1;
                  index4 = index2 - 1;
                  break;
                case 3:
                  index3 = index1;
                  index4 = index2 + 1;
                  break;
              }
              if (Main.tile[index3, index4].active() && ((int) Main.tile[index3, index4].type == 59 || (int) Main.tile[index3, index4].type == 60))
              {
                flag3 = true;
                break;
              }
            }
            if (flag3)
              flag2 = WorldGen.nearbyChlorophyte(index1, index2);
          }
          if (!((int) Main.tile[index1, index2 - 1].type == 27 | flag2))
          {
            if ((int) Main.tile[index1, index2].type == 2)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 23;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 1 || Main.tileMoss[(int) Main.tile[index1, index2].type])
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 25;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 53)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 112;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 396)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 400;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 397)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 398;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 59)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 0;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 60)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 23;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 69)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 32;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 161)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 163;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
          }
        }
      }
      if (type == 199 || type == 200 || (type == 201 || type == 203) || (type == 205 || type == 234 || (type == 352 || type == 401)) || type == 399)
      {
        bool flag1 = true;
        while (flag1)
        {
          flag1 = false;
          int index1 = i + WorldGen.genRand.Next(-3, 4);
          int index2 = j + WorldGen.genRand.Next(-3, 4);
          bool flag2 = WorldGen.nearbyChlorophyte(index1, index2);
          if (!((int) Main.tile[index1, index2 - 1].type == 27 | flag2))
          {
            if ((int) Main.tile[index1, index2].type == 2)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 199;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 1 || Main.tileMoss[(int) Main.tile[index1, index2].type])
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 203;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 53)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 234;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 396)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 401;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 397)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 399;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 59)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 0;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 60)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 199;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 69)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 352;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
            else if ((int) Main.tile[index1, index2].type == 161)
            {
              if (WorldGen.genRand.Next(2) == 0)
                flag1 = true;
              Main.tile[index1, index2].type = (ushort) 200;
              WorldGen.SquareTileFrame(index1, index2, true);
              NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
            }
          }
        }
      }
      if (type != 109 && type != 110 && (type != 113 && type != 115) && (type != 116 && type != 117 && (type != 164 && type != 402)) && type != 403)
        return;
      bool flag4 = true;
      while (flag4)
      {
        flag4 = false;
        int index1 = i + WorldGen.genRand.Next(-3, 4);
        int index2 = j + WorldGen.genRand.Next(-3, 4);
        if ((int) Main.tile[index1, index2].type == 2)
        {
          if (WorldGen.genRand.Next(2) == 0)
            flag4 = true;
          Main.tile[index1, index2].type = (ushort) 109;
          WorldGen.SquareTileFrame(index1, index2, true);
          NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
        }
        else if ((int) Main.tile[index1, index2].type == 1 || Main.tileMoss[(int) Main.tile[index1, index2].type])
        {
          if (WorldGen.genRand.Next(2) == 0)
            flag4 = true;
          Main.tile[index1, index2].type = (ushort) 117;
          WorldGen.SquareTileFrame(index1, index2, true);
          NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
        }
        else if ((int) Main.tile[index1, index2].type == 53)
        {
          if (WorldGen.genRand.Next(2) == 0)
            flag4 = true;
          Main.tile[index1, index2].type = (ushort) 116;
          WorldGen.SquareTileFrame(index1, index2, true);
          NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
        }
        else if ((int) Main.tile[index1, index2].type == 396)
        {
          if (WorldGen.genRand.Next(2) == 0)
            flag4 = true;
          Main.tile[index1, index2].type = (ushort) 403;
          WorldGen.SquareTileFrame(index1, index2, true);
          NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
        }
        else if ((int) Main.tile[index1, index2].type == 397)
        {
          if (WorldGen.genRand.Next(2) == 0)
            flag4 = true;
          Main.tile[index1, index2].type = (ushort) 402;
          WorldGen.SquareTileFrame(index1, index2, true);
          NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
        }
        else if ((int) Main.tile[index1, index2].type == 161)
        {
          if (WorldGen.genRand.Next(2) == 0)
            flag4 = true;
          Main.tile[index1, index2].type = (ushort) 164;
          WorldGen.SquareTileFrame(index1, index2, true);
          NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
        }
      }
    }

    public static bool SolidTile(Tile testTile)
    {
      try
      {
        if (testTile == null)
          return true;
        if (testTile.active())
        {
          if (Main.tileSolid[(int) testTile.type])
          {
            if (!Main.tileSolidTop[(int) testTile.type])
            {
              if (!testTile.halfBrick())
              {
                if ((int) testTile.slope() == 0)
                {
                  if (!testTile.inActive())
                    return true;
                }
              }
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    public static bool TileEmpty(int i, int j)
    {
      if (Main.tile[i, j] != null && Main.tile[i, j].active())
        return Main.tile[i, j].inActive();
      return true;
    }

    public static bool SolidOrSlopedTile(Tile tile)
    {
      if (tile != null && tile.active() && (Main.tileSolid[(int) tile.type] && !Main.tileSolidTop[(int) tile.type]))
        return !tile.inActive();
      return false;
    }

    public static bool SolidOrSlopedTile(int x, int y)
    {
      return WorldGen.SolidOrSlopedTile(Main.tile[x, y]);
    }

    public static bool SolidTile(int i, int j)
    {
      try
      {
        if (Main.tile[i, j] == null)
          return true;
        if (Main.tile[i, j].active())
        {
          if (Main.tileSolid[(int) Main.tile[i, j].type])
          {
            if (!Main.tileSolidTop[(int) Main.tile[i, j].type])
            {
              if (!Main.tile[i, j].halfBrick())
              {
                if ((int) Main.tile[i, j].slope() == 0)
                {
                  if (!Main.tile[i, j].inActive())
                    return true;
                }
              }
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    public static bool SolidTile2(Tile testTile)
    {
      try
      {
        if (testTile == null)
          return true;
        if (testTile.active())
        {
          if (Main.tileSolid[(int) testTile.type])
          {
            if ((int) testTile.slope() == 0)
            {
              if (!testTile.halfBrick())
              {
                if (!testTile.inActive())
                  return true;
              }
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    public static bool PlatformProperTopFrame(short frameX)
    {
      int num = (int) frameX / TileObjectData.PlatformFrameWidth();
      if (num >= 0 && num <= 7 || num >= 12 && num <= 16)
        return true;
      if (num >= 25)
        return num <= 26;
      return false;
    }

    public static bool SolidTileAllowBottomSlope(int i, int j)
    {
      try
      {
        Tile tile = Main.tile[i, j];
        if (tile == null)
          return true;
        if (tile.active())
        {
          if (!Main.tileSolid[(int) tile.type])
          {
            if (!Main.tileSolidTop[(int) tile.type])
              goto label_12;
          }
          if (tile.topSlope())
          {
            if (TileID.Sets.Platforms[(int) tile.type])
            {
              if (!WorldGen.PlatformProperTopFrame(tile.frameX))
                goto label_12;
            }
            else
              goto label_12;
          }
          if (!tile.halfBrick())
          {
            if (!tile.inActive())
              return true;
          }
        }
      }
      catch
      {
      }
label_12:
      return false;
    }

    public static bool SolidTile3(int i, int j)
    {
      if (!WorldGen.InWorld(i, j, 1))
        return false;
      return WorldGen.SolidTile3(Main.tile[i, j]);
    }

    public static bool SolidTile3(Tile t)
    {
      if (t == null || !t.active() || (t.inActive() || !Main.tileSolid[(int) t.type]))
        return false;
      return !Main.tileSolidTop[(int) t.type];
    }

    public static bool SolidTile2(int i, int j)
    {
      try
      {
        if (Main.tile[i, j] == null)
          return true;
        if (Main.tile[i, j].active())
        {
          if (Main.tileSolid[(int) Main.tile[i, j].type])
          {
            if ((int) Main.tile[i, j].slope() == 0)
            {
              if (!Main.tile[i, j].halfBrick())
              {
                if (!Main.tile[i, j].inActive())
                  return true;
              }
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    public static bool SolidTileNoAttach(int i, int j)
    {
      try
      {
        if (Main.tile[i, j] == null)
          return true;
        if (Main.tile[i, j].active())
        {
          if (Main.tileSolid[(int) Main.tile[i, j].type])
          {
            if (!Main.tileNoAttach[(int) Main.tile[i, j].type])
            {
              if ((int) Main.tile[i, j].slope() == 0)
              {
                if (!Main.tile[i, j].halfBrick())
                {
                  if (!Main.tile[i, j].inActive())
                    return true;
                }
              }
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    public static Vector2 Hive(int i, int j)
    {
      double num1 = (double) WorldGen.genRand.Next(12, 21);
      double num2 = num1;
      float num3 = (float) WorldGen.genRand.Next(10, 21);
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.200000002980232);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.200000002980232);
      while (num1 > 0.0 && (double) num3 > 0.0)
      {
        num1 = num2 * (1.0 + (double) WorldGen.genRand.Next(-20, 20) * 0.00999999977648258);
        float num4 = num3 - 1f;
        int num5 = (int) ((double) vector2_1.X - num1);
        int num6 = (int) ((double) vector2_1.X + num1);
        int num7 = (int) ((double) vector2_1.Y - num1);
        int num8 = (int) ((double) vector2_1.Y + num1);
        if (num5 < 1)
          num5 = 1;
        if (num6 > Main.maxTilesX - 1)
          num6 = Main.maxTilesX - 1;
        if (num7 < 1)
          num7 = 1;
        if (num8 > Main.maxTilesY - 1)
          num8 = Main.maxTilesY - 1;
        for (int i1 = num5; i1 < num6; ++i1)
        {
          for (int j1 = num7; j1 < num8; ++j1)
          {
            double num9 = (double) Math.Abs((float) i1 - (float) vector2_1.X);
            float num10 = Math.Abs((float) j1 - (float) vector2_1.Y);
            double num11 = Math.Sqrt(num9 * num9 + (double) num10 * (double) num10);
            if (num11 < num2 * 0.4 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.005))
            {
              if (WorldGen.genRand.Next(3) == 0)
                Main.tile[i1, j1].liquid = byte.MaxValue;
              Main.tile[i1, j1].honey(true);
              Main.tile[i1, j1].wall = (byte) 86;
              Main.tile[i1, j1].active(false);
              Main.tile[i1, j1].halfBrick(false);
              Main.tile[i1, j1].slope((byte) 0);
              WorldGen.SquareWallFrame(i1, j1, true);
            }
            else if (num11 < num2 * 0.75 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.005))
            {
              Main.tile[i1, j1].liquid = (byte) 0;
              if ((int) Main.tile[i1, j1].wall != 86)
              {
                Main.tile[i1, j1].active(true);
                Main.tile[i1, j1].halfBrick(false);
                Main.tile[i1, j1].slope((byte) 0);
                Main.tile[i1, j1].type = (ushort) 225;
              }
            }
            if (num11 < num2 * 0.6 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.005))
              Main.tile[i1, j1].wall = (byte) 86;
            WorldGen.SquareWallFrame(i1, j1, true);
            WorldGen.SquareTileFrame(i1, j1, true);
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        num3 = num4 - 1f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2_2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num12 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num12;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num13 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local2 = (float) num13;
      }
      return new Vector2((float) vector2_1.X, (float) vector2_1.Y);
    }

    public static void MineHouse(int i, int j)
    {
      if (i < 50 || i > Main.maxTilesX - 50 || (j < 50 || j > Main.maxTilesY - 50))
        return;
      int num1 = WorldGen.genRand.Next(6, 12);
      int num2 = WorldGen.genRand.Next(3, 6);
      int num3 = WorldGen.genRand.Next(15, 30);
      int num4 = WorldGen.genRand.Next(15, 30);
      if (WorldGen.SolidTile(i, j) || (int) Main.tile[i, j].wall > 0)
        return;
      int num5 = j - num1;
      int num6 = j + num2;
      for (int index1 = 0; index1 < 2; ++index1)
      {
        bool flag1 = true;
        int i1 = i;
        int j1 = j;
        int num7 = -1;
        int num8 = num3;
        if (index1 == 1)
        {
          num7 = 1;
          num8 = num4;
          ++i1;
        }
        while (flag1)
        {
          if (j1 - num1 < num5)
            num5 = j1 - num1;
          if (j1 + num2 > num6)
            num6 = j1 + num2;
          for (int index2 = 0; index2 < 2; ++index2)
          {
            int j2 = j1;
            bool flag2 = true;
            int num9 = num1;
            int num10 = -1;
            if (index2 == 1)
            {
              ++j2;
              num9 = num2;
              num10 = 1;
            }
            while (flag2)
            {
              if (i1 != i && (int) Main.tile[i1 - num7, j2].wall != 27 && (WorldGen.SolidTile(i1 - num7, j2) || !Main.tile[i1 - num7, j2].active() || (Main.tile[i1 - num7, j2].halfBrick() || (int) Main.tile[i1 - num7, j2].slope() != 0)))
              {
                Main.tile[i1 - num7, j2].active(true);
                Main.tile[i1 - num7, j2].type = (ushort) 30;
              }
              if (WorldGen.SolidTile(i1 - 1, j2) || Main.tile[i1 - 1, j2].halfBrick() || (int) Main.tile[i1 - 1, j2].slope() != 0)
                Main.tile[i1 - 1, j2].type = (ushort) 30;
              if (WorldGen.SolidTile(i1 + 1, j2) || Main.tile[i1 + 1, j2].halfBrick() || (int) Main.tile[i1 + 1, j2].slope() != 0)
                Main.tile[i1 + 1, j2].type = (ushort) 30;
              if (WorldGen.SolidTile(i1, j2) || Main.tile[i1, j2].halfBrick() || (int) Main.tile[i1, j2].slope() != 0)
              {
                int num11 = 0;
                if (WorldGen.SolidTile(i1 - 1, j2))
                  ++num11;
                if (WorldGen.SolidTile(i1 + 1, j2))
                  ++num11;
                if (WorldGen.SolidTile(i1, j2 - 1))
                  ++num11;
                if (WorldGen.SolidTile(i1, j2 + 1))
                  ++num11;
                if (num11 < 2)
                {
                  Main.tile[i1, j2].active(false);
                }
                else
                {
                  flag2 = false;
                  Main.tile[i1, j2].type = (ushort) 30;
                }
              }
              else
              {
                Main.tile[i1, j2].wall = (byte) 27;
                Main.tile[i1, j2].liquid = (byte) 0;
                Main.tile[i1, j2].lava(false);
              }
              j2 += num10;
              --num9;
              if (num9 <= 0)
              {
                if (!Main.tile[i1, j2].active())
                {
                  Main.tile[i1, j2].active(true);
                  Main.tile[i1, j2].type = (ushort) 30;
                }
                flag2 = false;
              }
            }
          }
          --num8;
          i1 += num7;
          if (WorldGen.SolidTile(i1, j1))
          {
            int num9 = 0;
            int num10 = 0;
            int j2 = j1;
            bool flag2 = true;
            while (flag2)
            {
              --j2;
              ++num9;
              if (WorldGen.SolidTile(i1 - num7, j2))
              {
                num9 = 999;
                flag2 = false;
              }
              else if (!WorldGen.SolidTile(i1, j2))
                flag2 = false;
            }
            int j3 = j1;
            bool flag3 = true;
            while (flag3)
            {
              ++j3;
              ++num10;
              if (WorldGen.SolidTile(i1 - num7, j3))
              {
                num10 = 999;
                flag3 = false;
              }
              else if (!WorldGen.SolidTile(i1, j3))
                flag3 = false;
            }
            if (num10 <= num9)
            {
              if (num10 > num2)
                num8 = 0;
              else
                j1 += num10 + 1;
            }
            else if (num9 > num1)
              num8 = 0;
            else
              j1 -= num9 + 1;
          }
          if (num8 <= 0)
            flag1 = false;
        }
      }
      int minValue1 = i - num3 - 1;
      int maxValue1 = i + num4 + 2;
      int minValue2 = num5 - 1;
      int maxValue2 = num6 + 2;
      for (int i1 = minValue1; i1 < maxValue1; ++i1)
      {
        for (int j1 = minValue2; j1 < maxValue2; ++j1)
        {
          if ((int) Main.tile[i1, j1].wall == 27 && !Main.tile[i1, j1].active())
          {
            if ((int) Main.tile[i1 - 1, j1].wall != 27 && i1 < i && !WorldGen.SolidTile(i1 - 1, j1))
            {
              WorldGen.PlaceTile(i1, j1, 30, true, false, -1, 0);
              Main.tile[i1, j1].wall = (byte) 0;
            }
            if ((int) Main.tile[i1 + 1, j1].wall != 27 && i1 > i && !WorldGen.SolidTile(i1 + 1, j1))
            {
              WorldGen.PlaceTile(i1, j1, 30, true, false, -1, 0);
              Main.tile[i1, j1].wall = (byte) 0;
            }
            for (int i2 = i1 - 1; i2 <= i1 + 1; ++i2)
            {
              for (int j2 = j1 - 1; j2 <= j1 + 1; ++j2)
              {
                if (WorldGen.SolidTile(i2, j2))
                  Main.tile[i2, j2].type = (ushort) 30;
              }
            }
          }
          if ((int) Main.tile[i1, j1].type == 30 && (int) Main.tile[i1 - 1, j1].wall == 27 && (int) Main.tile[i1 + 1, j1].wall == 27 && (((int) Main.tile[i1, j1 - 1].wall == 27 || Main.tile[i1, j1 - 1].active()) && ((int) Main.tile[i1, j1 + 1].wall == 27 || Main.tile[i1, j1 + 1].active())))
          {
            Main.tile[i1, j1].active(false);
            Main.tile[i1, j1].wall = (byte) 27;
          }
        }
      }
      for (int index1 = minValue1; index1 < maxValue1; ++index1)
      {
        for (int index2 = minValue2; index2 < maxValue2; ++index2)
        {
          if ((int) Main.tile[index1, index2].type == 30)
          {
            if ((int) Main.tile[index1 - 1, index2].wall == 27 && (int) Main.tile[index1 + 1, index2].wall == 27 && (!Main.tile[index1 - 1, index2].active() && !Main.tile[index1 + 1, index2].active()))
            {
              Main.tile[index1, index2].active(false);
              Main.tile[index1, index2].wall = (byte) 27;
            }
            if (!TileID.Sets.BasicChest[(int) Main.tile[index1, index2 - 1].type] && (int) Main.tile[index1 - 1, index2].wall == 27 && ((int) Main.tile[index1 + 1, index2].type == 30 && (int) Main.tile[index1 + 2, index2].wall == 27) && (!Main.tile[index1 - 1, index2].active() && !Main.tile[index1 + 2, index2].active()))
            {
              Main.tile[index1, index2].active(false);
              Main.tile[index1, index2].wall = (byte) 27;
              Main.tile[index1 + 1, index2].active(false);
              Main.tile[index1 + 1, index2].wall = (byte) 27;
            }
            if ((int) Main.tile[index1, index2 - 1].wall == 27 && (int) Main.tile[index1, index2 + 1].wall == 27 && (!Main.tile[index1, index2 - 1].active() && !Main.tile[index1, index2 + 1].active()))
            {
              Main.tile[index1, index2].active(false);
              Main.tile[index1, index2].wall = (byte) 27;
            }
          }
        }
      }
      for (int i1 = minValue1; i1 < maxValue1; ++i1)
      {
        for (int j1 = maxValue2; j1 > minValue2; --j1)
        {
          bool flag1 = false;
          if (Main.tile[i1, j1].active() && (int) Main.tile[i1, j1].type == 30)
          {
            int num7 = -1;
            for (int index1 = 0; index1 < 2; ++index1)
            {
              if (!WorldGen.SolidTile(i1 + num7, j1) && (int) Main.tile[i1 + num7, j1].wall == 0)
              {
                int num8 = 0;
                int j2 = j1;
                int num9 = j1;
                while (Main.tile[i1, j2].active() && (int) Main.tile[i1, j2].type == 30 && (!WorldGen.SolidTile(i1 + num7, j2) && (int) Main.tile[i1 + num7, j2].wall == 0))
                {
                  --j2;
                  ++num8;
                }
                int num10 = j2 + 1 + 1;
                if (num8 > 4)
                {
                  if (WorldGen.genRand.Next(2) == 0)
                  {
                    int j3 = num9 - 1;
                    bool flag2 = true;
                    for (int index2 = i1 - 2; index2 <= i1 + 2; ++index2)
                    {
                      for (int index3 = j3 - 2; index3 <= j3; ++index3)
                      {
                        if (index2 != i1 && Main.tile[index2, index3].active())
                          flag2 = false;
                      }
                    }
                    if (flag2)
                    {
                      Main.tile[i1, j3].active(false);
                      Main.tile[i1, j3 - 1].active(false);
                      Main.tile[i1, j3 - 2].active(false);
                      WorldGen.PlaceTile(i1, j3, 10, true, false, -1, 0);
                      flag1 = true;
                    }
                  }
                  if (!flag1)
                  {
                    for (int index2 = num10; index2 < num9; ++index2)
                      Main.tile[i1, index2].type = (ushort) 124;
                  }
                }
              }
              num7 = 1;
            }
          }
          if (flag1)
            break;
        }
      }
      int num12 = WorldGen.genRand.Next(1, 2);
      if (WorldGen.genRand.Next(4) == 0)
        num12 = 0;
      if (WorldGen.genRand.Next(6) == 0)
        ++num12;
      if (WorldGen.genRand.Next(10) == 0)
        ++num12;
      for (int index1 = 0; index1 < num12; ++index1)
      {
        int num7 = 0;
        int index2 = WorldGen.genRand.Next(minValue1, maxValue1);
        int index3;
        for (index3 = WorldGen.genRand.Next(minValue2, maxValue2); !Main.wallHouse[(int) Main.tile[index2, index3].wall] || Main.tile[index2, index3].active(); index3 = WorldGen.genRand.Next(minValue2, maxValue2))
        {
          ++num7;
          if (num7 <= 1000)
            index2 = WorldGen.genRand.Next(minValue1, maxValue1);
          else
            break;
        }
        if (num7 <= 1000)
        {
          for (int index4 = 0; index4 < 2; ++index4)
          {
            int index5 = index2;
            int index6 = index2;
            while (!Main.tile[index5, index3].active() && Main.wallHouse[(int) Main.tile[index5, index3].wall])
              --index5;
            int num8 = index5 + 1;
            while (!Main.tile[index6, index3].active() && Main.wallHouse[(int) Main.tile[index6, index3].wall])
              ++index6;
            int num9 = index6 - 1;
            i = (num8 + num9) / 2;
            int index7 = index3;
            int index8 = index3;
            while (!Main.tile[index2, index7].active() && Main.wallHouse[(int) Main.tile[index2, index7].wall])
              --index7;
            int num10 = index7 + 1;
            while (!Main.tile[index2, index8].active() && Main.wallHouse[(int) Main.tile[index2, index8].wall])
              ++index8;
            int num11 = index8 - 1;
            index3 = (num10 + num11) / 2;
          }
          int index9 = index2;
          int index10 = index2;
          while (!Main.tile[index9, index3].active() && !Main.tile[index9, index3 - 1].active() && !Main.tile[index9, index3 + 1].active())
            --index9;
          int num13 = index9 + 1;
          while (!Main.tile[index10, index3].active() && !Main.tile[index10, index3 - 1].active() && !Main.tile[index10, index3 + 1].active())
            ++index10;
          int num14 = index10 - 1;
          int index11 = index3;
          int index12 = index3;
          while (!Main.tile[index2, index11].active() && !Main.tile[index2 - 1, index11].active() && !Main.tile[index2 + 1, index11].active())
            --index11;
          int num15 = index11 + 1;
          while (!Main.tile[index2, index12].active() && !Main.tile[index2 - 1, index12].active() && !Main.tile[index2 + 1, index12].active())
            ++index12;
          int num16 = index12 - 1;
          int num17 = (num13 + num14) / 2;
          int num18 = (num15 + num16) / 2;
          int num19 = num14 - num13;
          int num20 = num16 - num15;
          int num21 = 7;
          if (num19 > num21 && num20 > 5)
          {
            int num8 = 0;
            if (WorldGen.nearPicture2(i, num18))
              num8 = -1;
            if (num8 == 0)
            {
              Vector2 vector2 = WorldGen.randHousePicture();
              int x = (int) vector2.X;
              int y = (int) vector2.Y;
              if (!WorldGen.nearPicture(num17, num18))
                WorldGen.PlaceTile(num17, num18, x, true, false, -1, y);
            }
          }
        }
        else
          break;
      }
      for (int i1 = minValue1; i1 < maxValue1; i1 = i1 + WorldGen.genRand.Next(4) + 1)
      {
        bool flag = true;
        for (int j1 = minValue2; j1 < maxValue2; ++j1)
        {
          for (int i2 = i1 - 3; i2 <= i1 + 3; ++i2)
          {
            if (Main.tile[i2, j1].active() && (!WorldGen.SolidTile(i2, j1) || (int) Main.tile[i2, j1].type == 10))
              flag = false;
          }
        }
        if (flag)
        {
          for (int j1 = minValue2; j1 < maxValue2; ++j1)
          {
            if ((int) Main.tile[i1, j1].wall == 27 && !Main.tile[i1, j1].active())
              WorldGen.PlaceTile(i1, j1, 124, true, false, -1, 0);
          }
        }
      }
      for (int index1 = 0; index1 < 4; ++index1)
      {
        int i1 = WorldGen.genRand.Next(minValue1 + 2, maxValue1 - 1);
        int index2;
        for (index2 = WorldGen.genRand.Next(minValue2 + 2, maxValue2 - 1); (int) Main.tile[i1, index2].wall != 27; index2 = WorldGen.genRand.Next(minValue2 + 2, maxValue2 - 1))
          i1 = WorldGen.genRand.Next(minValue1 + 2, maxValue1 - 1);
        while (Main.tile[i1, index2].active())
          --index2;
        while (!Main.tile[i1, index2].active())
          ++index2;
        int j1 = index2 - 1;
        if ((int) Main.tile[i1, j1].wall == 27)
        {
          if (WorldGen.genRand.Next(3) == 0)
          {
            int type = WorldGen.genRand.Next(9);
            if (type == 0)
              type = 14;
            if (type == 1)
              type = 16;
            if (type == 2)
              type = 18;
            if (type == 3)
              type = 86;
            if (type == 4)
              type = 87;
            if (type == 5)
              type = 94;
            if (type == 6)
              type = 101;
            if (type == 7)
              type = 104;
            if (type == 8)
              type = 106;
            WorldGen.PlaceTile(i1, j1, type, true, false, -1, 0);
          }
          else
          {
            int index3 = WorldGen.genRand.Next(2, WorldGen.statueList.Length);
            WorldGen.PlaceTile(i1, j1, (int) WorldGen.statueList[index3].X, true, true, -1, (int) WorldGen.statueList[index3].Y);
          }
        }
      }
      for (int index1 = 0; index1 < 40; ++index1)
      {
        int i1 = WorldGen.genRand.Next(minValue1 + 2, maxValue1 - 1);
        int index2;
        for (index2 = WorldGen.genRand.Next(minValue2 + 2, maxValue2 - 1); (int) Main.tile[i1, index2].wall != 27; index2 = WorldGen.genRand.Next(minValue2 + 2, maxValue2 - 1))
          i1 = WorldGen.genRand.Next(minValue1 + 2, maxValue1 - 1);
        while (Main.tile[i1, index2].active())
          --index2;
        while (!Main.tile[i1, index2].active())
          ++index2;
        int j1 = index2 - 1;
        if ((int) Main.tile[i1, j1].wall == 27 && WorldGen.genRand.Next(2) == 0)
        {
          int style = WorldGen.genRand.Next(22, 26);
          WorldGen.PlaceTile(i1, j1, 186, true, false, -1, style);
        }
      }
      for (int index1 = 0; index1 < 20; ++index1)
      {
        int i1 = WorldGen.genRand.Next(minValue1 + 2, maxValue1 - 1);
        int index2;
        for (index2 = WorldGen.genRand.Next(minValue2 + 2, maxValue2 - 1); (int) Main.tile[i1, index2].wall != 27; index2 = WorldGen.genRand.Next(minValue2 + 2, maxValue2 - 1))
          i1 = WorldGen.genRand.Next(minValue1 + 2, maxValue1 - 1);
        while (Main.tile[i1, index2].active())
          --index2;
        while (!Main.tile[i1, index2].active())
          ++index2;
        int j1 = index2 - 1;
        if ((int) Main.tile[i1, j1].wall == 27 && WorldGen.genRand.Next(2) == 0)
        {
          int X = WorldGen.genRand.Next(31, 34);
          WorldGen.PlaceSmallPile(i1, j1, X, 1, (ushort) 185);
        }
      }
      for (int index1 = 0; index1 < 15; ++index1)
      {
        int i1 = WorldGen.genRand.Next(minValue1 + 2, maxValue1 - 1);
        int j1;
        for (j1 = WorldGen.genRand.Next(minValue2 + 2, maxValue2 - 1); (int) Main.tile[i1, j1].wall != 27; j1 = WorldGen.genRand.Next(minValue2 + 2, maxValue2 - 1))
          i1 = WorldGen.genRand.Next(minValue1 + 2, maxValue1 - 1);
        while (Main.tile[i1, j1].active())
          --j1;
        while (j1 > 0 && !Main.tile[i1, j1 - 1].active())
          --j1;
        if ((int) Main.tile[i1, j1].wall == 27)
        {
          int style = 0;
          int type;
          if (WorldGen.genRand.Next(10) < 9)
          {
            type = -1;
          }
          else
          {
            type = 34;
            style = WorldGen.genRand.Next(6);
          }
          if (type > 0)
          {
            WorldGen.PlaceTile(i1, j1, type, true, false, -1, style);
            if ((int) Main.tile[i1, j1].type == type)
            {
              if (type == 4)
              {
                Main.tile[i1, j1].frameX += (short) 54;
              }
              else
              {
                int index2 = i1;
                int index3 = j1;
                int index4 = index3 - (int) Main.tile[index2, index3].frameY % 54 / 18;
                int num7 = (int) Main.tile[index2, index3].frameX / 18;
                if (num7 > 2)
                  num7 -= 3;
                int index5 = index2 - num7;
                short num8 = 54;
                if ((int) Main.tile[index5, index4].frameX > 0)
                  num8 = (short) -54;
                for (int index6 = index5; index6 < index5 + 3; ++index6)
                {
                  for (int index7 = index4; index7 < index4 + 3; ++index7)
                    Main.tile[index6, index7].frameX += num8;
                }
              }
            }
          }
        }
      }
    }

    public static void CountTiles(int X)
    {
      if (X == 0)
      {
        WorldGen.totalEvil = WorldGen.totalEvil2;
        WorldGen.totalBlood = WorldGen.totalBlood2;
        WorldGen.totalSolid = WorldGen.totalSolid2;
        WorldGen.totalGood = WorldGen.totalGood2;
        WorldGen.tGood = (byte) Math.Round((double) WorldGen.totalGood / (double) WorldGen.totalSolid * 100.0);
        WorldGen.tEvil = (byte) Math.Round((double) WorldGen.totalEvil / (double) WorldGen.totalSolid * 100.0);
        WorldGen.tBlood = (byte) Math.Round((double) WorldGen.totalBlood / (double) WorldGen.totalSolid * 100.0);
        if ((int) WorldGen.tGood == 0 && WorldGen.totalGood > 0)
          WorldGen.tGood = (byte) 1;
        if ((int) WorldGen.tEvil == 0 && WorldGen.totalEvil > 0)
          WorldGen.tEvil = (byte) 1;
        if ((int) WorldGen.tBlood == 0 && WorldGen.totalBlood > 0)
          WorldGen.tBlood = (byte) 1;
        if (Main.netMode == 2)
          NetMessage.SendData(57, -1, -1, (NetworkText) null, 0, 0.0f, 0.0f, 0.0f, 0, 0, 0);
        WorldGen.totalEvil2 = 0;
        WorldGen.totalSolid2 = 0;
        WorldGen.totalGood2 = 0;
        WorldGen.totalBlood2 = 0;
      }
      ushort num1 = 0;
      int num2 = 0;
      int num3 = 0;
      int num4 = 0;
      do
      {
        int num5;
        int num6;
        if (num3 == 0)
        {
          num5 = 0;
          num4 = (int) (Main.worldSurface + 1.0);
          num6 = 5;
        }
        else
        {
          num5 = num4;
          num4 = Main.maxTilesY;
          num6 = 1;
        }
        for (int index = num5; index < num4; ++index)
        {
          Tile tile = Main.tile[X, index] ?? (Main.tile[X, index] = new Tile());
          ushort type = tile.type;
          if ((int) type != 0 || tile.active())
          {
            if ((int) type == (int) num1)
            {
              num2 += num6;
            }
            else
            {
              WorldGen.tileCounts[(int) num1] += num2;
              num1 = type;
              num2 = num6;
            }
          }
        }
        WorldGen.tileCounts[(int) num1] += num2;
        num2 = 0;
        ++num3;
      }
      while (num3 < 2);
      WorldGen.AddUpAlignmentCounts(false);
    }

    public static void AddUpAlignmentCounts(bool clearCounts = false)
    {
      if (clearCounts)
      {
        WorldGen.totalEvil2 = 0;
        WorldGen.totalSolid2 = 0;
        WorldGen.totalGood2 = 0;
        WorldGen.totalBlood2 = 0;
      }
      WorldGen.totalGood2 += WorldGen.tileCounts[164] + WorldGen.tileCounts[109] + WorldGen.tileCounts[117] + WorldGen.tileCounts[116];
      WorldGen.totalEvil2 += WorldGen.tileCounts[23] + WorldGen.tileCounts[163] + WorldGen.tileCounts[112] + WorldGen.tileCounts[25];
      WorldGen.totalBlood2 += WorldGen.tileCounts[199] + WorldGen.tileCounts[234] + WorldGen.tileCounts[203] + WorldGen.tileCounts[200];
      WorldGen.totalSolid2 += WorldGen.tileCounts[2] + WorldGen.tileCounts[1] + WorldGen.tileCounts[60] + WorldGen.tileCounts[53] + WorldGen.tileCounts[161];
      WorldGen.totalSolid2 += WorldGen.tileCounts[164] + WorldGen.tileCounts[109] + WorldGen.tileCounts[117] + WorldGen.tileCounts[116];
      WorldGen.totalSolid2 += WorldGen.tileCounts[23] + WorldGen.tileCounts[163] + WorldGen.tileCounts[112] + WorldGen.tileCounts[25];
      WorldGen.totalSolid2 += WorldGen.tileCounts[199] + WorldGen.tileCounts[234] + WorldGen.tileCounts[203] + WorldGen.tileCounts[200];
      Array.Clear((Array) WorldGen.tileCounts, 0, WorldGen.tileCounts.Length);
    }

    public static void plantDye(int i, int j, bool exoticPlant = false)
    {
      UnifiedRandom unifiedRandom = WorldGen.gen ? WorldGen.genRand : Main.rand;
      if (!Main.tile[i, j].active() || i < 95 || (i > Main.maxTilesX - 95 || j < 95) || j > Main.maxTilesY - 95)
        return;
      int num1 = 90;
      if (exoticPlant)
        num1 = 240;
      if ((double) j < Main.worldSurface)
      {
        if (Main.tile[i, j - 1].active() && (int) Main.tile[i, j - 1].type != 3 && ((int) Main.tile[i, j - 1].type != 51 && (int) Main.tile[i, j - 1].type != 61) && ((int) Main.tile[i, j - 1].type != 73 && (int) Main.tile[i, j - 1].type != 74 && (int) Main.tile[i, j - 1].type != 184))
          return;
        int num2 = Utils.Clamp<int>(i - num1, 1, Main.maxTilesX - 1 - 1);
        int num3 = Utils.Clamp<int>(i + num1, 1, Main.maxTilesX - 1 - 1);
        int num4 = Utils.Clamp<int>(j - num1, 1, Main.maxTilesY - 1 - 1);
        int num5 = Utils.Clamp<int>(j + num1, 1, Main.maxTilesY - 1 - 1);
        for (int index1 = num2; index1 < num3; ++index1)
        {
          for (int index2 = num4; index2 < num5; ++index2)
          {
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 227 && (!exoticPlant || (int) Main.tile[index1, index2].frameX >= 272) && (exoticPlant || (int) Main.tile[index1, index2].frameX < 272))
              return;
          }
        }
        if (exoticPlant)
        {
          int type = (int) Main.tile[i, j].type;
          bool flag = TileID.Sets.Conversion.Grass[type] || TileID.Sets.Conversion.Moss[type] || type == 0;
          if ((int) Main.tile[i, j - 1].liquid > 0 && Main.tile[i, j - 1].lava())
            flag = false;
          if (!flag)
            return;
          WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, WorldGen.genRand.Next(8, 12));
        }
        else if ((int) Main.tile[i, j].type == 2 || (int) Main.tile[i, j].type == 109)
        {
          if (unifiedRandom.Next(4) == 0)
            WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 4);
          else
            WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 3);
        }
        else if ((int) Main.tile[i, j].type == 60)
        {
          if (unifiedRandom.Next(2) == 0)
            WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 2);
          else
            WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 4);
        }
        else if ((int) Main.tile[i, j].type == 53 && (int) Main.tile[i, j - 1].liquid == (int) byte.MaxValue && (int) Main.tile[i, j - 2].liquid == (int) byte.MaxValue)
        {
          WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 2);
        }
        else
        {
          if ((int) Main.tile[i, j].type != 80 || Main.tile[i - 1, j - 1].active())
            return;
          if (Main.tile[i + 1, j - 1].active())
            return;
          try
          {
            bool flag = true;
            for (int index1 = i - 5; index1 <= i + 5; ++index1)
            {
              for (int index2 = j - 5; index2 <= j + 15; ++index2)
              {
                if (Main.tile[index1, index2].active() && ((int) Main.tile[index1, index2].type == 112 || (int) Main.tile[index1, index2].type == 234))
                  flag = false;
              }
            }
            if (!flag)
              return;
            WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 6);
          }
          catch
          {
          }
        }
      }
      else
      {
        if (j >= Main.maxTilesY - 200)
          return;
        if (!Main.tile[i, j - 1].active() || (int) Main.tile[i, j - 1].type == 3 || ((int) Main.tile[i, j - 1].type == 51 || (int) Main.tile[i, j - 1].type == 61) || ((int) Main.tile[i, j - 1].type == 73 || (int) Main.tile[i, j - 1].type == 74 || (int) Main.tile[i, j - 1].type == 184))
        {
          int num2 = Utils.Clamp<int>(i - num1, 1, Main.maxTilesX - 1 - 1);
          int num3 = Utils.Clamp<int>(i + num1, 1, Main.maxTilesX - 1 - 1);
          int num4 = Utils.Clamp<int>(j - num1, 1, Main.maxTilesY - 1 - 1);
          int num5 = Utils.Clamp<int>(j + num1, 1, Main.maxTilesY - 1 - 1);
          for (int index1 = num2; index1 < num3; ++index1)
          {
            for (int index2 = num4; index2 < num5; ++index2)
            {
              if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 227 && (!exoticPlant || (int) Main.tile[index1, index2].frameX >= 272) && (exoticPlant || (int) Main.tile[index1, index2].frameX < 272))
                return;
            }
          }
          if (exoticPlant)
          {
            int type = (int) Main.tile[i, j].type;
            if ((TileID.Sets.Conversion.Grass[type] || TileID.Sets.Conversion.Moss[type] ? 1 : (type == 0 ? 1 : 0)) != 0)
              WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, WorldGen.genRand.Next(8, 12));
          }
          else if ((int) Main.tile[i, j].type == 60)
          {
            if (unifiedRandom.Next(2) == 0)
              WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 2);
            else if (unifiedRandom.Next(2) == 0)
              WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 0);
            else
              WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 1);
          }
          else if ((int) Main.tile[i, j].type == 0 || (int) Main.tile[i, j].type == 1 || (int) Main.tile[i, j].type == 59)
          {
            if (unifiedRandom.Next(2) == 0)
              WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 0);
            else
              WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 1);
          }
          else if ((int) Main.tile[i, j - 1].liquid == (int) byte.MaxValue && (int) Main.tile[i, j - 2].liquid == (int) byte.MaxValue)
            WorldGen.PlaceTile(i, j - 1, 227, true, false, -1, 5);
        }
        if (Main.tile[i, j + 1].active() || exoticPlant)
          return;
        for (int index1 = i - num1; index1 < i + num1; ++index1)
        {
          for (int index2 = j - num1; index2 < j + num1; ++index2)
          {
            if (Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 227)
              return;
          }
        }
        if ((int) Main.tile[i, j].type != 0)
          return;
        WorldGen.PlaceTile(i, j + 1, 227, true, false, -1, 7);
      }
    }

    public static void UpdateWorld()
    {
      int wallDist = 20;
      int maxValue1 = 40;
      if (Main.expertMode)
        maxValue1 = 30;
      Wiring.UpdateMech();
      TileEntity.UpdateStart();
      foreach (TileEntity tileEntity in TileEntity.ByID.Values)
        tileEntity.Update();
      TileEntity.UpdateEnd();
      WorldGen.UpdateLunarApocalypse();
      if (Main.netMode != 1)
      {
        ++WorldGen.totalD;
        if (WorldGen.totalD >= 30)
        {
          WorldGen.totalD = 0;
          WorldGen.CountTiles(WorldGen.totalX);
          ++WorldGen.totalX;
          if (WorldGen.totalX >= Main.maxTilesX)
            WorldGen.totalX = 0;
        }
      }
      if (Main.worldRate == 0)
        return;
      ++Liquid.skipCount;
      if (Liquid.skipCount > 1)
      {
        Liquid.UpdateLiquid();
        Liquid.skipCount = 0;
      }
      float num1 = 3E-05f * (float) Main.worldRate;
      float num2 = 1.5E-05f * (float) Main.worldRate;
      bool flag1 = false;
      ++WorldGen.spawnDelay;
      if (Main.invasionType > 0 || Main.eclipse)
        WorldGen.spawnDelay = 0;
      if (WorldGen.spawnDelay >= 20)
      {
        flag1 = true;
        WorldGen.spawnDelay = 0;
        if (WorldGen.prioritizedTownNPC != 37)
        {
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active && Main.npc[index].homeless && (Main.npc[index].townNPC && Main.npc[index].type != 368))
            {
              WorldGen.prioritizedTownNPC = Main.npc[index].type;
              break;
            }
          }
        }
      }
      float num3 = (float) (Main.maxTilesX * Main.maxTilesY) * num1;
      int num4 = 151;
      int maxValue2 = (int) MathHelper.Lerp((float) num4, (float) num4 * 2.8f, MathHelper.Clamp((float) ((double) Main.maxTilesX / 4200.0 - 1.0), 0.0f, 1f));
      for (int index1 = 0; (double) index1 < (double) num3; ++index1)
      {
        if (Main.rand.Next(100) == 0 && Main.rand.Next(maxValue2) == 0)
          WorldGen.PlantAlch();
        int index2 = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
        int index3 = WorldGen.genRand.Next(10, (int) Main.worldSurface - 1);
        int num5 = index2 - 1;
        int num6 = index2 + 2;
        int index4 = index3 - 1;
        int num7 = index3 + 2;
        if (num5 < 10)
          num5 = 10;
        if (num6 > Main.maxTilesX - 10)
          num6 = Main.maxTilesX - 10;
        if (index4 < 10)
          index4 = 10;
        if (num7 > Main.maxTilesY - 10)
          num7 = Main.maxTilesY - 10;
        if (Main.tile[index2, index3] != null)
        {
          if (Main.tileAlch[(int) Main.tile[index2, index3].type])
            WorldGen.GrowAlch(index2, index3);
          if ((int) Main.tile[index2, index3].liquid > 32)
          {
            if (Main.tile[index2, index3].active() && ((int) Main.tile[index2, index3].type == 3 || (int) Main.tile[index2, index3].type == 20 || ((int) Main.tile[index2, index3].type == 24 || (int) Main.tile[index2, index3].type == 27) || ((int) Main.tile[index2, index3].type == 73 || (int) Main.tile[index2, index3].type == 201)))
            {
              WorldGen.KillTile(index2, index3, false, false, false);
              if (Main.netMode == 2)
                NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) index2, (float) index3, 0.0f, 0, 0, 0);
            }
          }
          else if (Main.tile[index2, index3].nactive())
          {
            WorldGen.hardUpdateWorld(index2, index3);
            if (Main.rand.Next(3000) == 0)
              WorldGen.plantDye(index2, index3, false);
            if (Main.rand.Next(9001) == 0)
              WorldGen.plantDye(index2, index3, true);
            if ((int) Main.tile[index2, index3].type == 80)
            {
              if (WorldGen.genRand.Next(15) == 0)
                WorldGen.GrowCactus(index2, index3);
            }
            else if (TileID.Sets.Conversion.Sand[(int) Main.tile[index2, index3].type])
            {
              if (!Main.tile[index2, index4].active())
              {
                if (index2 < 250 || index2 > Main.maxTilesX - 250)
                {
                  if (WorldGen.genRand.Next(500) == 0)
                  {
                    int num8 = 7;
                    int num9 = 6;
                    int num10 = 0;
                    for (int index5 = index2 - num8; index5 <= index2 + num8; ++index5)
                    {
                      for (int index6 = index4 - num8; index6 <= index4 + num8; ++index6)
                      {
                        if (Main.tile[index5, index6].active() && (int) Main.tile[index5, index6].type == 81)
                          ++num10;
                      }
                    }
                    if (num10 < num9 && (int) Main.tile[index2, index4].liquid == (int) byte.MaxValue && ((int) Main.tile[index2, index4 - 1].liquid == (int) byte.MaxValue && (int) Main.tile[index2, index4 - 2].liquid == (int) byte.MaxValue) && ((int) Main.tile[index2, index4 - 3].liquid == (int) byte.MaxValue && (int) Main.tile[index2, index4 - 4].liquid == (int) byte.MaxValue))
                    {
                      WorldGen.PlaceTile(index2, index4, 81, true, false, -1, 0);
                      if (Main.netMode == 2 && Main.tile[index2, index4].active())
                        NetMessage.SendTileSquare(-1, index2, index4, 1, TileChangeType.None);
                    }
                  }
                }
                else if (index2 > 400 && index2 < Main.maxTilesX - 400 && WorldGen.genRand.Next(300) == 0)
                  WorldGen.GrowCactus(index2, index3);
              }
            }
            else if ((int) Main.tile[index2, index3].type == 116 || (int) Main.tile[index2, index3].type == 112 || (int) Main.tile[index2, index3].type == 234)
            {
              if (!Main.tile[index2, index4].active() && index2 > 400 && (index2 < Main.maxTilesX - 400 && WorldGen.genRand.Next(300) == 0))
                WorldGen.GrowCactus(index2, index3);
            }
            else if ((int) Main.tile[index2, index3].type == 147 || (int) Main.tile[index2, index3].type == 161 || ((int) Main.tile[index2, index3].type == 163 || (int) Main.tile[index2, index3].type == 164) || (int) Main.tile[index2, index3].type == 200)
            {
              if (Main.rand.Next(10) == 0 && !Main.tile[index2, index3 + 1].active() && !Main.tile[index2, index3 + 2].active())
              {
                int num8 = index2 - 3;
                int num9 = index2 + 4;
                int num10 = 0;
                for (int index5 = num8; index5 < num9; ++index5)
                {
                  if ((int) Main.tile[index5, index3].type == 165 && Main.tile[index5, index3].active())
                    ++num10;
                  if ((int) Main.tile[index5, index3 + 1].type == 165 && Main.tile[index5, index3 + 1].active())
                    ++num10;
                  if ((int) Main.tile[index5, index3 + 2].type == 165 && Main.tile[index5, index3 + 2].active())
                    ++num10;
                  if ((int) Main.tile[index5, index3 + 3].type == 165 && Main.tile[index5, index3 + 3].active())
                    ++num10;
                }
                if (num10 < 2)
                {
                  WorldGen.PlaceTight(index2, index3 + 1, (ushort) 165, false);
                  WorldGen.SquareTileFrame(index2, index3 + 1, true);
                  if (Main.netMode == 2 && Main.tile[index2, index3 + 1].active())
                    NetMessage.SendTileSquare(-1, index2, index3 + 1, 3, TileChangeType.None);
                }
              }
            }
            else if ((int) Main.tile[index2, index3].type == 254)
            {
              if (Main.rand.Next(((int) Main.tile[index2, index3].frameX + 10) / 10) == 0)
                WorldGen.GrowPumpkin(index2, index3, 254);
            }
            else if ((int) Main.tile[index2, index3].type == 78 || (int) Main.tile[index2, index3].type == 380)
            {
              if (!Main.tile[index2, index4].active() && WorldGen.genRand.Next(2) == 0)
              {
                WorldGen.PlaceTile(index2, index4, 3, true, false, -1, 0);
                if (Main.netMode == 2 && Main.tile[index2, index4].active())
                  NetMessage.SendTileSquare(-1, index2, index4, 1, TileChangeType.None);
              }
            }
            else if ((int) Main.tile[index2, index3].type == 2 || (int) Main.tile[index2, index3].type == 23 || ((int) Main.tile[index2, index3].type == 32 || (int) Main.tile[index2, index3].type == 109) || ((int) Main.tile[index2, index3].type == 199 || (int) Main.tile[index2, index3].type == 352))
            {
              int grass = (int) Main.tile[index2, index3].type;
              if (Main.halloween && WorldGen.genRand.Next(75) == 0 && (grass == 2 || grass == 109))
              {
                int num8 = 100;
                int num9 = 0;
                int index5 = index2 - num8;
                while (index5 < index2 + num8)
                {
                  int index6 = index3 - num8;
                  while (index6 < index3 + num8)
                  {
                    if (index5 > 1 && index5 < Main.maxTilesX - 2 && (index6 > 1 && index6 < Main.maxTilesY - 2) && (Main.tile[index5, index6].active() && (int) Main.tile[index5, index6].type == 254))
                      ++num9;
                    index6 += 2;
                  }
                  index5 += 2;
                }
                if (num9 < 6)
                {
                  WorldGen.PlacePumpkin(index2, index4);
                  if (Main.netMode == 2 && (int) Main.tile[index2, index4].type == 254)
                    NetMessage.SendTileSquare(-1, index2, index4, 4, TileChangeType.None);
                }
              }
              if (!Main.tile[index2, index4].active() && WorldGen.genRand.Next(12) == 0 && (grass == 2 && WorldGen.PlaceTile(index2, index4, 3, true, false, -1, 0)))
              {
                Main.tile[index2, index4].color(Main.tile[index2, index3].color());
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, index2, index4, 1, TileChangeType.None);
              }
              if (!Main.tile[index2, index4].active() && WorldGen.genRand.Next(10) == 0 && (grass == 23 && WorldGen.PlaceTile(index2, index4, 24, true, false, -1, 0)))
              {
                Main.tile[index2, index4].color(Main.tile[index2, index3].color());
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, index2, index4, 1, TileChangeType.None);
              }
              if (!Main.tile[index2, index4].active() && WorldGen.genRand.Next(10) == 0 && (grass == 109 && WorldGen.PlaceTile(index2, index4, 110, true, false, -1, 0)))
              {
                Main.tile[index2, index4].color(Main.tile[index2, index3].color());
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, index2, index4, 1, TileChangeType.None);
              }
              if (!Main.tile[index2, index4].active() && WorldGen.genRand.Next(10) == 0 && (grass == 199 && WorldGen.PlaceTile(index2, index4, 201, true, false, -1, 0)))
              {
                Main.tile[index2, index4].color(Main.tile[index2, index3].color());
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, index2, index4, 1, TileChangeType.None);
              }
              bool flag2 = false;
              for (int i = num5; i < num6; ++i)
              {
                for (int j = index4; j < num7; ++j)
                {
                  if ((index2 != i || index3 != j) && Main.tile[i, j].active())
                  {
                    if (grass == 32)
                      grass = 23;
                    if (grass == 352)
                      grass = 199;
                    if ((int) Main.tile[i, j].type == 0 || grass == 23 && (int) Main.tile[i, j].type == 2 || (grass == 199 && (int) Main.tile[i, j].type == 2 || grass == 23 && (int) Main.tile[i, j].type == 109))
                    {
                      WorldGen.SpreadGrass(i, j, 0, grass, false, Main.tile[index2, index3].color());
                      if (grass == 23)
                        WorldGen.SpreadGrass(i, j, 2, grass, false, Main.tile[index2, index3].color());
                      if (grass == 23)
                        WorldGen.SpreadGrass(i, j, 109, grass, false, Main.tile[index2, index3].color());
                      if (grass == 199)
                        WorldGen.SpreadGrass(i, j, 2, grass, false, Main.tile[index2, index3].color());
                      if (grass == 199)
                        WorldGen.SpreadGrass(i, j, 109, grass, false, Main.tile[index2, index3].color());
                      if ((int) Main.tile[i, j].type == grass)
                      {
                        WorldGen.SquareTileFrame(i, j, true);
                        flag2 = true;
                      }
                    }
                    if ((int) Main.tile[i, j].type == 0 || grass == 109 && (int) Main.tile[i, j].type == 2 || (grass == 109 && (int) Main.tile[i, j].type == 23 || grass == 109 && (int) Main.tile[i, j].type == 199))
                    {
                      WorldGen.SpreadGrass(i, j, 0, grass, false, Main.tile[index2, index3].color());
                      if (grass == 109)
                        WorldGen.SpreadGrass(i, j, 2, grass, false, Main.tile[index2, index3].color());
                      if (grass == 109)
                        WorldGen.SpreadGrass(i, j, 23, grass, false, Main.tile[index2, index3].color());
                      if (grass == 109)
                        WorldGen.SpreadGrass(i, j, 199, grass, false, Main.tile[index2, index3].color());
                      if ((int) Main.tile[i, j].type == grass)
                      {
                        WorldGen.SquareTileFrame(i, j, true);
                        flag2 = true;
                      }
                    }
                  }
                }
              }
              if (Main.netMode == 2 & flag2)
                NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
            }
            else if ((int) Main.tile[index2, index3].type == 20 && WorldGen.genRand.Next(20) == 0)
            {
              bool flag2 = WorldGen.PlayerLOS(index2, index3);
              if (((int) Main.tile[index2, index3].frameX < 324 || (int) Main.tile[index2, index3].frameX >= 540 ? WorldGen.GrowTree(index2, index3) : WorldGen.GrowPalmTree(index2, index3)) & flag2)
                WorldGen.TreeGrowFXCheck(index2, index3);
            }
            if ((int) Main.tile[index2, index3].type == 3 && WorldGen.genRand.Next(20) == 0 && (int) Main.tile[index2, index3].frameX != 144)
            {
              if ((int) Main.tile[index2, index3].frameX < 144 && Main.rand.Next(10) == 0 || ((int) Main.tile[index2, index3 + 1].type == 78 || (int) Main.tile[index2, index3 + 1].type == 380) && Main.rand.Next(2) == 0)
                Main.tile[index2, index3].frameX = (short) (198 + WorldGen.genRand.Next(10) * 18);
              Main.tile[index2, index3].type = (ushort) 73;
              if (Main.netMode == 2)
                NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
            }
            if ((int) Main.tile[index2, index3].type == 110 && WorldGen.genRand.Next(20) == 0 && (int) Main.tile[index2, index3].frameX < 144)
            {
              Main.tile[index2, index3].type = (ushort) 113;
              if (Main.netMode == 2)
                NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
            }
            if ((int) Main.tile[index2, index3].type == 32 && WorldGen.genRand.Next(3) == 0)
            {
              int index5 = index2;
              int index6 = index3;
              int num8 = 0;
              if (Main.tile[index5 + 1, index6].active() && (int) Main.tile[index5 + 1, index6].type == 32)
                ++num8;
              if (Main.tile[index5 - 1, index6].active() && (int) Main.tile[index5 - 1, index6].type == 32)
                ++num8;
              if (Main.tile[index5, index6 + 1].active() && (int) Main.tile[index5, index6 + 1].type == 32)
                ++num8;
              if (Main.tile[index5, index6 - 1].active() && (int) Main.tile[index5, index6 - 1].type == 32)
                ++num8;
              if (num8 < 3 || (int) Main.tile[index2, index3].type == 23)
              {
                switch (WorldGen.genRand.Next(4))
                {
                  case 0:
                    --index6;
                    break;
                  case 1:
                    ++index6;
                    break;
                  case 2:
                    --index5;
                    break;
                  case 3:
                    ++index5;
                    break;
                }
                if (!Main.tile[index5, index6].active())
                {
                  int num9 = 0;
                  if (Main.tile[index5 + 1, index6].active() && (int) Main.tile[index5 + 1, index6].type == 32)
                    ++num9;
                  if (Main.tile[index5 - 1, index6].active() && (int) Main.tile[index5 - 1, index6].type == 32)
                    ++num9;
                  if (Main.tile[index5, index6 + 1].active() && (int) Main.tile[index5, index6 + 1].type == 32)
                    ++num9;
                  if (Main.tile[index5, index6 - 1].active() && (int) Main.tile[index5, index6 - 1].type == 32)
                    ++num9;
                  if (num9 < 2)
                  {
                    int num10 = 7;
                    int num11 = index5 - num10;
                    int num12 = index5 + num10;
                    int num13 = index6 - num10;
                    int num14 = index6 + num10;
                    bool flag2 = false;
                    for (int index7 = num11; index7 < num12; ++index7)
                    {
                      for (int index8 = num13; index8 < num14; ++index8)
                      {
                        if (Math.Abs(index7 - index5) * 2 + Math.Abs(index8 - index6) < 9 && Main.tile[index7, index8].active() && ((int) Main.tile[index7, index8].type == 23 && Main.tile[index7, index8 - 1].active()) && ((int) Main.tile[index7, index8 - 1].type == 32 && (int) Main.tile[index7, index8 - 1].liquid == 0))
                        {
                          flag2 = true;
                          break;
                        }
                      }
                    }
                    if (flag2)
                    {
                      Main.tile[index5, index6].type = (ushort) 32;
                      Main.tile[index5, index6].active(true);
                      WorldGen.SquareTileFrame(index5, index6, true);
                      if (Main.netMode == 2)
                        NetMessage.SendTileSquare(-1, index5, index6, 3, TileChangeType.None);
                    }
                  }
                }
              }
            }
            if ((int) Main.tile[index2, index3].type == 352 && WorldGen.genRand.Next(3) == 0)
              WorldGen.GrowSpike(index2, index3, (ushort) 352, (ushort) 199);
          }
          else if (flag1)
            WorldGen.TrySpawningTownNPC(index2, index3);
          if ((int) Main.tile[index2, index3].wall == 81 || (int) Main.tile[index2, index3].wall == 83 || (int) Main.tile[index2, index3].type == 199 && Main.tile[index2, index3].active())
          {
            int tileX = index2 + WorldGen.genRand.Next(-2, 3);
            int tileY = index3 + WorldGen.genRand.Next(-2, 3);
            if ((int) Main.tile[tileX, tileY].wall >= 63 && (int) Main.tile[tileX, tileY].wall <= 68)
            {
              bool flag2 = false;
label_213:
              for (int index5 = index2 - wallDist; index5 < index2 + wallDist; ++index5)
              {
                for (int index6 = index3 - wallDist; index6 < index3 + wallDist; ++index6)
                {
                  if (Main.tile[index2, index3].active())
                  {
                    switch (Main.tile[index2, index3].type)
                    {
                      case 199:
                      case 200:
                      case 201:
                      case 203:
                      case 205:
                      case 234:
                      case 352:
                        flag2 = true;
                        goto label_213;
                      default:
                        continue;
                    }
                  }
                }
              }
              if (flag2)
              {
                Main.tile[tileX, tileY].wall = (byte) 81;
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, tileX, tileY, 3, TileChangeType.None);
              }
            }
          }
          if ((int) Main.tile[index2, index3].wall == 69 || (int) Main.tile[index2, index3].wall == 3 || (int) Main.tile[index2, index3].type == 23 && Main.tile[index2, index3].active())
          {
            int tileX = index2 + WorldGen.genRand.Next(-2, 3);
            int tileY = index3 + WorldGen.genRand.Next(-2, 3);
            if ((int) Main.tile[tileX, tileY].wall >= 63 && (int) Main.tile[tileX, tileY].wall <= 68)
            {
              bool flag2 = false;
label_227:
              for (int index5 = index2 - wallDist; index5 < index2 + wallDist; ++index5)
              {
                for (int index6 = index3 - wallDist; index6 < index3 + wallDist; ++index6)
                {
                  if (Main.tile[index5, index6].active())
                  {
                    switch (Main.tile[index5, index6].type)
                    {
                      case 22:
                      case 23:
                      case 24:
                      case 25:
                      case 32:
                      case 112:
                      case 163:
                        flag2 = true;
                        goto label_227;
                      default:
                        continue;
                    }
                  }
                }
              }
              if (flag2)
              {
                Main.tile[tileX, tileY].wall = (byte) 69;
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, tileX, tileY, 3, TileChangeType.None);
              }
            }
          }
          if ((int) Main.tile[index2, index3].wall == 70 || (int) Main.tile[index2, index3].type == 109 && Main.tile[index2, index3].active())
          {
            int tileX = index2 + WorldGen.genRand.Next(-2, 3);
            int tileY = index3 + WorldGen.genRand.Next(-2, 3);
            if ((int) Main.tile[tileX, tileY].wall == 63 || (int) Main.tile[tileX, tileY].wall == 65 || ((int) Main.tile[tileX, tileY].wall == 66 || (int) Main.tile[tileX, tileY].wall == 68))
            {
              bool flag2 = false;
label_241:
              for (int index5 = index2 - wallDist; index5 < index2 + wallDist; ++index5)
              {
                for (int index6 = index3 - wallDist; index6 < index3 + wallDist; ++index6)
                {
                  if (Main.tile[index5, index6].active())
                  {
                    switch (Main.tile[index5, index6].type)
                    {
                      case 109:
                      case 110:
                      case 113:
                      case 115:
                      case 116:
                      case 117:
                      case 164:
                        flag2 = true;
                        goto label_241;
                      default:
                        continue;
                    }
                  }
                }
              }
              if (flag2)
              {
                Main.tile[tileX, tileY].wall = (byte) 70;
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, tileX, tileY, 3, TileChangeType.None);
              }
            }
          }
          WorldGen.SpreadDesertWalls(wallDist, index2, index3);
          if (Main.tile[index2, index3].active())
          {
            if (((int) Main.tile[index2, index3].type == 2 || (int) Main.tile[index2, index3].type == 52 || (int) Main.tile[index2, index3].type == 192 && WorldGen.genRand.Next(10) == 0) && (WorldGen.genRand.Next(40) == 0 && !Main.tile[index2, index3 + 1].active() && !Main.tile[index2, index3 + 1].lava()))
            {
              bool flag2 = false;
              for (int index5 = index3; index5 > index3 - 10; --index5)
              {
                if (Main.tile[index2, index5].bottomSlope())
                {
                  flag2 = false;
                  break;
                }
                if (Main.tile[index2, index5].active() && (int) Main.tile[index2, index5].type == 2 && !Main.tile[index2, index5].bottomSlope())
                {
                  flag2 = true;
                  break;
                }
              }
              if (flag2)
              {
                int index5 = index2;
                int index6 = index3 + 1;
                Main.tile[index5, index6].type = (ushort) 52;
                Main.tile[index5, index6].active(true);
                Main.tile[index5, index6].color(Main.tile[index2, index3].color());
                WorldGen.SquareTileFrame(index5, index6, true);
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, index5, index6, 3, TileChangeType.None);
              }
            }
            if ((int) Main.tile[index2, index3].type == 70)
            {
              int type = (int) Main.tile[index2, index3].type;
              if (!Main.tile[index2, index4].active() && WorldGen.genRand.Next(10) == 0)
              {
                WorldGen.PlaceTile(index2, index4, 71, true, false, -1, 0);
                if (Main.tile[index2, index4].active())
                  Main.tile[index2, index4].color(Main.tile[index2, index3].color());
                if (Main.netMode == 2 && Main.tile[index2, index4].active())
                  NetMessage.SendTileSquare(-1, index2, index4, 1, TileChangeType.None);
              }
              if (WorldGen.genRand.Next(100) == 0)
              {
                bool flag2 = WorldGen.PlayerLOS(index2, index3);
                if (WorldGen.GrowTree(index2, index3) & flag2)
                  WorldGen.TreeGrowFXCheck(index2, index3 - 1);
              }
              bool flag3 = false;
              for (int i = num5; i < num6; ++i)
              {
                for (int j = index4; j < num7; ++j)
                {
                  if ((index2 != i || index3 != j) && (Main.tile[i, j].active() && (int) Main.tile[i, j].type == 59))
                  {
                    WorldGen.SpreadGrass(i, j, 59, type, false, Main.tile[index2, index3].color());
                    if ((int) Main.tile[i, j].type == type)
                    {
                      WorldGen.SquareTileFrame(i, j, true);
                      flag3 = true;
                    }
                  }
                }
              }
              if (Main.netMode == 2 & flag3)
                NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
            }
            if ((int) Main.tile[index2, index3].type == 60)
            {
              int type = (int) Main.tile[index2, index3].type;
              if (!Main.tile[index2, index4].active() && WorldGen.genRand.Next(7) == 0)
              {
                WorldGen.PlaceTile(index2, index4, 61, true, false, -1, 0);
                if (Main.tile[index2, index4].active())
                  Main.tile[index2, index4].color(Main.tile[index2, index3].color());
                if (Main.netMode == 2 && Main.tile[index2, index4].active())
                  NetMessage.SendTileSquare(-1, index2, index4, 1, TileChangeType.None);
              }
              else if (WorldGen.genRand.Next(500) == 0 && (!Main.tile[index2, index4].active() || (int) Main.tile[index2, index4].type == 61 || ((int) Main.tile[index2, index4].type == 74 || (int) Main.tile[index2, index4].type == 69)))
              {
                if (WorldGen.GrowTree(index2, index3) && WorldGen.PlayerLOS(index2, index3))
                  WorldGen.TreeGrowFXCheck(index2, index3 - 1);
              }
              else if (WorldGen.genRand.Next(25) == 0 && (int) Main.tile[index2, index4].liquid == 0)
              {
                WorldGen.PlaceJunglePlant(index2, index4, (ushort) 233, WorldGen.genRand.Next(8), 0);
                if ((int) Main.tile[index2, index4].type == 233)
                {
                  if (Main.netMode == 2)
                  {
                    NetMessage.SendTileSquare(-1, index2, index4, 4, TileChangeType.None);
                  }
                  else
                  {
                    WorldGen.PlaceJunglePlant(index2, index4, (ushort) 233, WorldGen.genRand.Next(12), 1);
                    if ((int) Main.tile[index2, index4].type == 233 && Main.netMode == 2)
                      NetMessage.SendTileSquare(-1, index2, index4, 3, TileChangeType.None);
                  }
                }
              }
              bool flag2 = false;
              for (int i = num5; i < num6; ++i)
              {
                for (int j = index4; j < num7; ++j)
                {
                  if ((index2 != i || index3 != j) && (Main.tile[i, j].active() && (int) Main.tile[i, j].type == 59))
                  {
                    WorldGen.SpreadGrass(i, j, 59, type, false, Main.tile[index2, index3].color());
                    if ((int) Main.tile[i, j].type == type)
                    {
                      WorldGen.SquareTileFrame(i, j, true);
                      flag2 = true;
                    }
                  }
                }
              }
              if (Main.netMode == 2 & flag2)
                NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
            }
            if ((int) Main.tile[index2, index3].type == 61 && WorldGen.genRand.Next(3) == 0 && (int) Main.tile[index2, index3].frameX < 144)
            {
              if (Main.rand.Next(4) == 0)
                Main.tile[index2, index3].frameX = (short) (162 + WorldGen.genRand.Next(8) * 18);
              Main.tile[index2, index3].type = (ushort) 74;
              if (Main.netMode == 2)
                NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
            }
            if (((int) Main.tile[index2, index3].type == 60 || (int) Main.tile[index2, index3].type == 62) && (WorldGen.genRand.Next(15) == 0 && !Main.tile[index2, index3 + 1].active()) && !Main.tile[index2, index3 + 1].lava())
            {
              bool flag2 = false;
              for (int index5 = index3; index5 > index3 - 10; --index5)
              {
                if (Main.tile[index2, index5].bottomSlope())
                {
                  flag2 = false;
                  break;
                }
                if (Main.tile[index2, index5].active() && (int) Main.tile[index2, index5].type == 60 && !Main.tile[index2, index5].bottomSlope())
                {
                  flag2 = true;
                  break;
                }
              }
              if (flag2)
              {
                int index5 = index2;
                int index6 = index3 + 1;
                Main.tile[index5, index6].type = (ushort) 62;
                Main.tile[index5, index6].active(true);
                WorldGen.SquareTileFrame(index5, index6, true);
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, index5, index6, 3, TileChangeType.None);
              }
            }
            if (((int) Main.tile[index2, index3].type == 109 || (int) Main.tile[index2, index3].type == 115) && (WorldGen.genRand.Next(15) == 0 && !Main.tile[index2, index3 + 1].active()) && !Main.tile[index2, index3 + 1].lava())
            {
              bool flag2 = false;
              for (int index5 = index3; index5 > index3 - 10; --index5)
              {
                if (Main.tile[index2, index5].bottomSlope())
                {
                  flag2 = false;
                  break;
                }
                if (Main.tile[index2, index5].active() && (int) Main.tile[index2, index5].type == 109 && !Main.tile[index2, index5].bottomSlope())
                {
                  flag2 = true;
                  break;
                }
              }
              if (flag2)
              {
                int index5 = index2;
                int index6 = index3 + 1;
                Main.tile[index5, index6].type = (ushort) 115;
                Main.tile[index5, index6].active(true);
                WorldGen.SquareTileFrame(index5, index6, true);
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, index5, index6, 3, TileChangeType.None);
              }
            }
            if (((int) Main.tile[index2, index3].type == 199 || (int) Main.tile[index2, index3].type == 205) && (WorldGen.genRand.Next(15) == 0 && !Main.tile[index2, index3 + 1].active()) && !Main.tile[index2, index3 + 1].lava())
            {
              bool flag2 = false;
              for (int index5 = index3; index5 > index3 - 10; --index5)
              {
                if (Main.tile[index2, index5].bottomSlope())
                {
                  flag2 = false;
                  break;
                }
                if (Main.tile[index2, index5].active() && (int) Main.tile[index2, index5].type == 199 && !Main.tile[index2, index5].bottomSlope())
                {
                  flag2 = true;
                  break;
                }
              }
              if (flag2)
              {
                int index5 = index2;
                int index6 = index3 + 1;
                Main.tile[index5, index6].type = (ushort) 205;
                Main.tile[index5, index6].active(true);
                WorldGen.SquareTileFrame(index5, index6, true);
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, index5, index6, 3, TileChangeType.None);
              }
            }
          }
        }
      }
      for (int index1 = 0; (double) index1 < (double) (Main.maxTilesX * Main.maxTilesY) * (double) num2; ++index1)
      {
        int index2 = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
        int index3 = WorldGen.genRand.Next((int) Main.worldSurface - 1, Main.maxTilesY - 20);
        int num5 = index2 - 1;
        int num6 = index2 + 2;
        int index4 = index3 - 1;
        int num7 = index3 + 2;
        if (num5 < 10)
          num5 = 10;
        if (num6 > Main.maxTilesX - 10)
          num6 = Main.maxTilesX - 10;
        if (index4 < 10)
          index4 = 10;
        if (num7 > Main.maxTilesY - 10)
          num7 = Main.maxTilesY - 10;
        if (Main.tile[index2, index3] != null)
        {
          if (Main.tileAlch[(int) Main.tile[index2, index3].type])
            WorldGen.GrowAlch(index2, index3);
          if ((int) Main.tile[index2, index3].liquid <= 32)
          {
            if (Main.tile[index2, index3].nactive())
            {
              WorldGen.hardUpdateWorld(index2, index3);
              if (Main.rand.Next(3000) == 0)
                WorldGen.plantDye(index2, index3, false);
              if (Main.rand.Next(4500) == 0)
                WorldGen.plantDye(index2, index3, true);
              if ((int) Main.tile[index2, index3].type == 23 && !Main.tile[index2, index4].active() && WorldGen.genRand.Next(1) == 0)
              {
                WorldGen.PlaceTile(index2, index4, 24, true, false, -1, 0);
                if (Main.netMode == 2 && Main.tile[index2, index4].active())
                  NetMessage.SendTileSquare(-1, index2, index4, 1, TileChangeType.None);
              }
              if ((int) Main.tile[index2, index3].type == 32 && WorldGen.genRand.Next(3) == 0)
              {
                int index5 = index2;
                int index6 = index3;
                int num8 = 0;
                if (Main.tile[index5 + 1, index6].active() && (int) Main.tile[index5 + 1, index6].type == 32)
                  ++num8;
                if (Main.tile[index5 - 1, index6].active() && (int) Main.tile[index5 - 1, index6].type == 32)
                  ++num8;
                if (Main.tile[index5, index6 + 1].active() && (int) Main.tile[index5, index6 + 1].type == 32)
                  ++num8;
                if (Main.tile[index5, index6 - 1].active() && (int) Main.tile[index5, index6 - 1].type == 32)
                  ++num8;
                if (num8 < 3 || (int) Main.tile[index2, index3].type == 23)
                {
                  switch (WorldGen.genRand.Next(4))
                  {
                    case 0:
                      --index6;
                      break;
                    case 1:
                      ++index6;
                      break;
                    case 2:
                      --index5;
                      break;
                    case 3:
                      ++index5;
                      break;
                  }
                  if (!Main.tile[index5, index6].active())
                  {
                    int num9 = 0;
                    if (Main.tile[index5 + 1, index6].active() && (int) Main.tile[index5 + 1, index6].type == 32)
                      ++num9;
                    if (Main.tile[index5 - 1, index6].active() && (int) Main.tile[index5 - 1, index6].type == 32)
                      ++num9;
                    if (Main.tile[index5, index6 + 1].active() && (int) Main.tile[index5, index6 + 1].type == 32)
                      ++num9;
                    if (Main.tile[index5, index6 - 1].active() && (int) Main.tile[index5, index6 - 1].type == 32)
                      ++num9;
                    if (num9 < 2)
                    {
                      int num10 = 7;
                      int num11 = index5 - num10;
                      int num12 = index5 + num10;
                      int num13 = index6 - num10;
                      int num14 = index6 + num10;
                      bool flag2 = false;
                      for (int index7 = num11; index7 < num12; ++index7)
                      {
                        for (int index8 = num13; index8 < num14; ++index8)
                        {
                          if (Math.Abs(index7 - index5) * 2 + Math.Abs(index8 - index6) < 9 && Main.tile[index7, index8].active() && ((int) Main.tile[index7, index8].type == 23 && Main.tile[index7, index8 - 1].active()) && ((int) Main.tile[index7, index8 - 1].type == 32 && (int) Main.tile[index7, index8 - 1].liquid == 0))
                          {
                            flag2 = true;
                            break;
                          }
                        }
                      }
                      if (flag2)
                      {
                        Main.tile[index5, index6].type = (ushort) 32;
                        Main.tile[index5, index6].active(true);
                        WorldGen.SquareTileFrame(index5, index6, true);
                        if (Main.netMode == 2)
                          NetMessage.SendTileSquare(-1, index5, index6, 3, TileChangeType.None);
                      }
                    }
                  }
                }
              }
              if ((int) Main.tile[index2, index3].type == 352 && WorldGen.genRand.Next(3) == 0)
                WorldGen.GrowSpike(index2, index3, (ushort) 352, (ushort) 199);
              if ((int) Main.tile[index2, index3].type == 199)
              {
                int type = (int) Main.tile[index2, index3].type;
                bool flag2 = false;
                for (int i = num5; i < num6; ++i)
                {
                  for (int j = index4; j < num7; ++j)
                  {
                    if ((index2 != i || index3 != j) && (Main.tile[i, j].active() && (int) Main.tile[i, j].type == 0))
                    {
                      WorldGen.SpreadGrass(i, j, 0, type, false, Main.tile[index2, index3].color());
                      if ((int) Main.tile[i, j].type == type)
                      {
                        WorldGen.SquareTileFrame(i, j, true);
                        flag2 = true;
                      }
                    }
                  }
                }
                if (Main.netMode == 2 & flag2)
                  NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
              }
              if ((int) Main.tile[index2, index3].type == 60)
              {
                int type = (int) Main.tile[index2, index3].type;
                if (!Main.tile[index2, index4].active() && WorldGen.genRand.Next(10) == 0)
                {
                  WorldGen.PlaceTile(index2, index4, 61, true, false, -1, 0);
                  if (Main.netMode == 2 && Main.tile[index2, index4].active())
                    NetMessage.SendTileSquare(-1, index2, index4, 1, TileChangeType.None);
                }
                else if (WorldGen.genRand.Next(25) == 0 && (int) Main.tile[index2, index4].liquid == 0)
                {
                  if (Main.hardMode && NPC.downedMechBoss1 && (NPC.downedMechBoss2 && NPC.downedMechBoss3) && WorldGen.genRand.Next(60) == 0)
                  {
                    bool flag2 = true;
                    int num8 = 150;
                    int index5 = index2 - num8;
                    while (index5 < index2 + num8)
                    {
                      int index6 = index3 - num8;
                      while (index6 < index3 + num8)
                      {
                        if (index5 > 1 && index5 < Main.maxTilesX - 2 && (index6 > 1 && index6 < Main.maxTilesY - 2) && (Main.tile[index5, index6].active() && (int) Main.tile[index5, index6].type == 238))
                        {
                          flag2 = false;
                          break;
                        }
                        index6 += 2;
                      }
                      index5 += 2;
                    }
                    if (flag2)
                    {
                      WorldGen.PlaceJunglePlant(index2, index4, (ushort) 238, 0, 0);
                      WorldGen.SquareTileFrame(index2, index4, true);
                      WorldGen.SquareTileFrame(index2 + 1, index4 + 1, true);
                      if ((int) Main.tile[index2, index4].type == 238 && Main.netMode == 2)
                        NetMessage.SendTileSquare(-1, index2, index4, 4, TileChangeType.None);
                    }
                  }
                  if (Main.hardMode && NPC.downedMechBossAny && WorldGen.genRand.Next(maxValue1) == 0)
                  {
                    bool flag2 = true;
                    int num8 = 60;
                    if (Main.expertMode)
                      num8 -= 10;
                    int index5 = index2 - num8;
                    while (index5 < index2 + num8)
                    {
                      int index6 = index3 - num8;
                      while (index6 < index3 + num8)
                      {
                        if (index5 > 1 && index5 < Main.maxTilesX - 2 && (index6 > 1 && index6 < Main.maxTilesY - 2) && (Main.tile[index5, index6].active() && (int) Main.tile[index5, index6].type == 236))
                        {
                          flag2 = false;
                          break;
                        }
                        index6 += 2;
                      }
                      index5 += 2;
                    }
                    if (flag2)
                    {
                      WorldGen.PlaceJunglePlant(index2, index4, (ushort) 236, WorldGen.genRand.Next(3), 0);
                      WorldGen.SquareTileFrame(index2, index4, true);
                      WorldGen.SquareTileFrame(index2 + 1, index4 + 1, true);
                      if ((int) Main.tile[index2, index4].type == 236 && Main.netMode == 2)
                        NetMessage.SendTileSquare(-1, index2, index4, 4, TileChangeType.None);
                    }
                  }
                  else
                  {
                    WorldGen.PlaceJunglePlant(index2, index4, (ushort) 233, WorldGen.genRand.Next(8), 0);
                    if ((int) Main.tile[index2, index4].type == 233)
                    {
                      if (Main.netMode == 2)
                      {
                        NetMessage.SendTileSquare(-1, index2, index4, 4, TileChangeType.None);
                      }
                      else
                      {
                        WorldGen.PlaceJunglePlant(index2, index4, (ushort) 233, WorldGen.genRand.Next(12), 1);
                        if ((int) Main.tile[index2, index4].type == 233 && Main.netMode == 2)
                          NetMessage.SendTileSquare(-1, index2, index4, 3, TileChangeType.None);
                      }
                    }
                  }
                }
                bool flag3 = false;
                for (int i = num5; i < num6; ++i)
                {
                  for (int j = index4; j < num7; ++j)
                  {
                    if ((index2 != i || index3 != j) && (Main.tile[i, j].active() && (int) Main.tile[i, j].type == 59))
                    {
                      WorldGen.SpreadGrass(i, j, 59, type, false, Main.tile[index2, index3].color());
                      if ((int) Main.tile[i, j].type == type)
                      {
                        WorldGen.SquareTileFrame(i, j, true);
                        flag3 = true;
                      }
                    }
                  }
                }
                if (Main.netMode == 2 & flag3)
                  NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
              }
              if ((int) Main.tile[index2, index3].type == 61 && WorldGen.genRand.Next(3) == 0 && (int) Main.tile[index2, index3].frameX < 144)
              {
                if (Main.rand.Next(4) == 0)
                  Main.tile[index2, index3].frameX = (short) (162 + WorldGen.genRand.Next(8) * 18);
                Main.tile[index2, index3].type = (ushort) 74;
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
              }
              if (((int) Main.tile[index2, index3].type == 60 || (int) Main.tile[index2, index3].type == 62) && (WorldGen.genRand.Next(5) == 0 && !Main.tile[index2, index3 + 1].active()) && !Main.tile[index2, index3 + 1].lava())
              {
                bool flag2 = false;
                for (int index5 = index3; index5 > index3 - 10; --index5)
                {
                  if (Main.tile[index2, index5].bottomSlope())
                  {
                    flag2 = false;
                    break;
                  }
                  if (Main.tile[index2, index5].active() && (int) Main.tile[index2, index5].type == 60 && !Main.tile[index2, index5].bottomSlope())
                  {
                    flag2 = true;
                    break;
                  }
                }
                if (flag2)
                {
                  int index5 = index2;
                  int index6 = index3 + 1;
                  Main.tile[index5, index6].type = (ushort) 62;
                  Main.tile[index5, index6].active(true);
                  WorldGen.SquareTileFrame(index5, index6, true);
                  if (Main.netMode == 2)
                    NetMessage.SendTileSquare(-1, index5, index6, 3, TileChangeType.None);
                }
              }
              if (((int) Main.tile[index2, index3].type == 60 || (int) Main.tile[index2, index3].type == 62) && (WorldGen.genRand.Next(80) == 0 && !WorldGen.PlayerLOS(index2, index3)))
              {
                bool flag2 = true;
                int tileY = index3;
                if ((int) Main.tile[index2, index3].type == 60)
                  ++tileY;
                for (int i = index2; i < index2 + 2; ++i)
                {
                  int j = tileY - 1;
                  if (!WorldGen.AnchorValid(Framing.GetTileSafely(i, j), AnchorType.SolidTile) || Main.tile[i, j].bottomSlope())
                    flag2 = false;
                  if ((int) Main.tile[i, j].liquid > 0 || Main.wallHouse[(int) Main.tile[i, j].wall])
                    flag2 = false;
                  if (flag2)
                  {
                    for (int index5 = tileY; index5 < tileY + 2; ++index5)
                    {
                      if ((!Main.tile[i, index5].active() || Main.tileCut[(int) Main.tile[i, index5].type] && (int) Main.tile[i, index5].type != 444 ? (!Main.tile[i, index5].lava() ? 1 : 0) : 0) == 0)
                        flag2 = false;
                      if (!flag2)
                        break;
                    }
                    if (!flag2)
                      break;
                  }
                  else
                    break;
                }
                if (flag2)
                {
                  if (WorldGen.CountNearBlocksTypes(index2, index3, 20, 1, 444) > 0)
                    flag2 = false;
                }
                if (flag2)
                {
                  for (int i = index2; i < index2 + 2; ++i)
                  {
                    Main.tile[i, tileY - 1].slope((byte) 0);
                    Main.tile[i, tileY - 1].halfBrick(false);
                    for (int j = tileY; j < tileY + 2; ++j)
                    {
                      if (Main.tile[i, j].active())
                        WorldGen.KillTile(i, j, false, false, false);
                    }
                  }
                  for (int index5 = index2; index5 < index2 + 2; ++index5)
                  {
                    for (int index6 = tileY; index6 < tileY + 2; ++index6)
                    {
                      Main.tile[index5, index6].active(true);
                      Main.tile[index5, index6].type = (ushort) 444;
                      Main.tile[index5, index6].frameX = (short) ((index5 - index2) * 18);
                      Main.tile[index5, index6].frameY = (short) ((index6 - tileY) * 18);
                    }
                  }
                  if (Main.netMode == 2)
                    NetMessage.SendTileSquare(-1, index2, tileY, 3, TileChangeType.None);
                }
              }
              if ((int) Main.tile[index2, index3].type == 69 && WorldGen.genRand.Next(3) == 0)
              {
                int index5 = index2;
                int index6 = index3;
                int num8 = 0;
                if (Main.tile[index5 + 1, index6].active() && (int) Main.tile[index5 + 1, index6].type == 69)
                  ++num8;
                if (Main.tile[index5 - 1, index6].active() && (int) Main.tile[index5 - 1, index6].type == 69)
                  ++num8;
                if (Main.tile[index5, index6 + 1].active() && (int) Main.tile[index5, index6 + 1].type == 69)
                  ++num8;
                if (Main.tile[index5, index6 - 1].active() && (int) Main.tile[index5, index6 - 1].type == 69)
                  ++num8;
                if (num8 < 3 || (int) Main.tile[index2, index3].type == 60)
                {
                  switch (WorldGen.genRand.Next(4))
                  {
                    case 0:
                      --index6;
                      break;
                    case 1:
                      ++index6;
                      break;
                    case 2:
                      --index5;
                      break;
                    case 3:
                      ++index5;
                      break;
                  }
                  if (!Main.tile[index5, index6].active())
                  {
                    int num9 = 0;
                    if (Main.tile[index5 + 1, index6].active() && (int) Main.tile[index5 + 1, index6].type == 69)
                      ++num9;
                    if (Main.tile[index5 - 1, index6].active() && (int) Main.tile[index5 - 1, index6].type == 69)
                      ++num9;
                    if (Main.tile[index5, index6 + 1].active() && (int) Main.tile[index5, index6 + 1].type == 69)
                      ++num9;
                    if (Main.tile[index5, index6 - 1].active() && (int) Main.tile[index5, index6 - 1].type == 69)
                      ++num9;
                    if (num9 < 2)
                    {
                      int num10 = 7;
                      int num11 = index5 - num10;
                      int num12 = index5 + num10;
                      int num13 = index6 - num10;
                      int num14 = index6 + num10;
                      bool flag2 = false;
                      for (int index7 = num11; index7 < num12; ++index7)
                      {
                        for (int index8 = num13; index8 < num14; ++index8)
                        {
                          if (Math.Abs(index7 - index5) * 2 + Math.Abs(index8 - index6) < 9 && Main.tile[index7, index8].active() && ((int) Main.tile[index7, index8].type == 60 && Main.tile[index7, index8 - 1].active()) && ((int) Main.tile[index7, index8 - 1].type == 69 && (int) Main.tile[index7, index8 - 1].liquid == 0))
                          {
                            flag2 = true;
                            break;
                          }
                        }
                      }
                      if (flag2)
                      {
                        Main.tile[index5, index6].type = (ushort) 69;
                        Main.tile[index5, index6].active(true);
                        WorldGen.SquareTileFrame(index5, index6, true);
                        if (Main.netMode == 2)
                          NetMessage.SendTileSquare(-1, index5, index6, 3, TileChangeType.None);
                      }
                    }
                  }
                }
              }
              else if ((int) Main.tile[index2, index3].type == 147 || (int) Main.tile[index2, index3].type == 161 || ((int) Main.tile[index2, index3].type == 163 || (int) Main.tile[index2, index3].type == 164) || (int) Main.tile[index2, index3].type == 200)
              {
                if (Main.rand.Next(10) == 0 && !Main.tile[index2, index3 + 1].active() && !Main.tile[index2, index3 + 2].active())
                {
                  int num8 = index2 - 3;
                  int num9 = index2 + 4;
                  int num10 = 0;
                  for (int index5 = num8; index5 < num9; ++index5)
                  {
                    if ((int) Main.tile[index5, index3].type == 165 && Main.tile[index5, index3].active())
                      ++num10;
                    if ((int) Main.tile[index5, index3 + 1].type == 165 && Main.tile[index5, index3 + 1].active())
                      ++num10;
                    if ((int) Main.tile[index5, index3 + 2].type == 165 && Main.tile[index5, index3 + 2].active())
                      ++num10;
                    if ((int) Main.tile[index5, index3 + 3].type == 165 && Main.tile[index5, index3 + 3].active())
                      ++num10;
                  }
                  if (num10 < 2)
                  {
                    WorldGen.PlaceTight(index2, index3 + 1, (ushort) 165, false);
                    WorldGen.SquareTileFrame(index2, index3 + 1, true);
                    if (Main.netMode == 2 && Main.tile[index2, index3 + 1].active())
                      NetMessage.SendTileSquare(-1, index2, index3 + 1, 3, TileChangeType.None);
                  }
                }
              }
              else if (Main.tileMoss[(int) Main.tile[index2, index3].type])
              {
                int type = (int) Main.tile[index2, index3].type;
                bool flag2 = false;
                for (int i = num5; i < num6; ++i)
                {
                  for (int j = index4; j < num7; ++j)
                  {
                    if ((index2 != i || index3 != j) && (Main.tile[i, j].active() && (int) Main.tile[i, j].type == 1))
                    {
                      WorldGen.SpreadGrass(i, j, 1, type, false, Main.tile[index2, index3].color());
                      if ((int) Main.tile[i, j].type == type)
                      {
                        WorldGen.SquareTileFrame(i, j, true);
                        flag2 = true;
                      }
                    }
                  }
                }
                if (Main.netMode == 2 & flag2)
                  NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
                if (WorldGen.genRand.Next(6) == 0)
                {
                  int index5 = index2;
                  int index6 = index3;
                  switch (WorldGen.genRand.Next(4))
                  {
                    case 0:
                      --index5;
                      break;
                    case 1:
                      ++index5;
                      break;
                    case 2:
                      --index6;
                      break;
                    default:
                      ++index6;
                      break;
                  }
                  if (!Main.tile[index5, index6].active())
                  {
                    WorldGen.PlaceTile(index5, index6, 184, true, false, -1, 0);
                    if (Main.netMode == 2 && Main.tile[index5, index6].active())
                      NetMessage.SendTileSquare(-1, index5, index6, 1, TileChangeType.None);
                  }
                }
              }
              if ((int) Main.tile[index2, index3].type == 70)
              {
                int type = (int) Main.tile[index2, index3].type;
                if (!Main.tile[index2, index4].active() && WorldGen.genRand.Next(10) == 0)
                {
                  WorldGen.PlaceTile(index2, index4, 71, true, false, -1, 0);
                  if (Main.netMode == 2 && Main.tile[index2, index4].active())
                    NetMessage.SendTileSquare(-1, index2, index4, 1, TileChangeType.None);
                }
                if (WorldGen.genRand.Next(200) == 0 && WorldGen.GrowShroom(index2, index3) && WorldGen.PlayerLOS(index2, index3))
                  WorldGen.TreeGrowFXCheck(index2, index3 - 1);
                bool flag2 = false;
                for (int i = num5; i < num6; ++i)
                {
                  for (int j = index4; j < num7; ++j)
                  {
                    if ((index2 != i || index3 != j) && (Main.tile[i, j].active() && (int) Main.tile[i, j].type == 59))
                    {
                      WorldGen.SpreadGrass(i, j, 59, type, false, Main.tile[index2, index3].color());
                      if ((int) Main.tile[i, j].type == type)
                      {
                        WorldGen.SquareTileFrame(i, j, true);
                        flag2 = true;
                      }
                    }
                  }
                }
                if (Main.netMode == 2 & flag2)
                  NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
              }
            }
            else
            {
              if ((int) Main.tile[index2, index3].wall == 62 && (int) Main.tile[index2, index3].liquid == 0 && WorldGen.genRand.Next(10) == 0)
              {
                int num8 = WorldGen.genRand.Next(2, 4);
                int num9 = index2 - num8;
                int num10 = index2 + num8;
                int num11 = index3 - num8;
                int num12 = index3 + num8;
                bool flag2 = false;
                for (int i = num9; i <= num10; ++i)
                {
                  for (int j = num11; j <= num12; ++j)
                  {
                    if (WorldGen.SolidTile(i, j))
                    {
                      flag2 = true;
                      break;
                    }
                  }
                }
                if (flag2 && !Main.tile[index2, index3].active())
                {
                  WorldGen.PlaceTile(index2, index3, 51, true, false, -1, 0);
                  WorldGen.TileFrame(index2, index3, true, false);
                  if (Main.netMode == 2)
                    NetMessage.SendTileSquare(-1, index2, index3, 3, TileChangeType.None);
                }
              }
              if (flag1)
                WorldGen.TrySpawningTownNPC(index2, index3);
            }
          }
          if ((int) Main.tile[index2, index3].wall == 81 || (int) Main.tile[index2, index3].wall == 83 || (int) Main.tile[index2, index3].type == 199 && Main.tile[index2, index3].active())
          {
            int tileX = index2 + WorldGen.genRand.Next(-2, 3);
            int tileY = index3 + WorldGen.genRand.Next(-2, 3);
            if ((int) Main.tile[tileX, tileY].wall >= 63 && (int) Main.tile[tileX, tileY].wall <= 68)
            {
              bool flag2 = false;
label_629:
              for (int index5 = index2 - wallDist; index5 < index2 + wallDist; ++index5)
              {
                for (int index6 = index3 - wallDist; index6 < index3 + wallDist; ++index6)
                {
                  if (Main.tile[index2, index3].active())
                  {
                    switch (Main.tile[index2, index3].type)
                    {
                      case 199:
                      case 200:
                      case 201:
                      case 203:
                      case 205:
                      case 234:
                      case 352:
                        flag2 = true;
                        goto label_629;
                      default:
                        continue;
                    }
                  }
                }
              }
              if (flag2)
              {
                Main.tile[tileX, tileY].wall = (byte) 81;
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, tileX, tileY, 3, TileChangeType.None);
              }
            }
          }
          if ((int) Main.tile[index2, index3].wall == 69 || (int) Main.tile[index2, index3].wall == 3 || (int) Main.tile[index2, index3].type == 23 && Main.tile[index2, index3].active())
          {
            int tileX = index2 + WorldGen.genRand.Next(-2, 3);
            int tileY = index3 + WorldGen.genRand.Next(-2, 3);
            if ((int) Main.tile[tileX, tileY].wall >= 63 && (int) Main.tile[tileX, tileY].wall <= 68)
            {
              bool flag2 = false;
label_643:
              for (int index5 = index2 - wallDist; index5 < index2 + wallDist; ++index5)
              {
                for (int index6 = index3 - wallDist; index6 < index3 + wallDist; ++index6)
                {
                  if (Main.tile[index2, index3].active())
                  {
                    switch (Main.tile[index2, index3].type)
                    {
                      case 22:
                      case 23:
                      case 24:
                      case 25:
                      case 32:
                      case 112:
                      case 163:
                        flag2 = true;
                        goto label_643;
                      default:
                        continue;
                    }
                  }
                }
              }
              if (flag2)
              {
                Main.tile[tileX, tileY].wall = (byte) 69;
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, tileX, tileY, 3, TileChangeType.None);
              }
            }
          }
          if ((int) Main.tile[index2, index3].wall == 70 || (int) Main.tile[index2, index3].type == 109 && Main.tile[index2, index3].active())
          {
            int tileX = index2 + WorldGen.genRand.Next(-2, 3);
            int tileY = index3 + WorldGen.genRand.Next(-2, 3);
            if ((int) Main.tile[tileX, tileY].wall == 63 || (int) Main.tile[tileX, tileY].wall == 65 || ((int) Main.tile[tileX, tileY].wall == 66 || (int) Main.tile[tileX, tileY].wall == 68))
            {
              bool flag2 = false;
label_657:
              for (int index5 = index2 - wallDist; index5 < index2 + wallDist; ++index5)
              {
                for (int index6 = index3 - wallDist; index6 < index3 + wallDist; ++index6)
                {
                  if (Main.tile[index2, index3].active())
                  {
                    switch (Main.tile[index2, index3].type)
                    {
                      case 109:
                      case 110:
                      case 113:
                      case 115:
                      case 116:
                      case 117:
                      case 164:
                        flag2 = true;
                        goto label_657;
                      default:
                        continue;
                    }
                  }
                }
              }
              if (flag2)
              {
                Main.tile[tileX, tileY].wall = (byte) 70;
                if (Main.netMode == 2)
                  NetMessage.SendTileSquare(-1, tileX, tileY, 3, TileChangeType.None);
              }
            }
          }
          WorldGen.SpreadDesertWalls(wallDist, index2, index3);
        }
      }
      if (Main.dayTime)
        return;
      float num15 = (float) (Main.maxTilesX / 4200);
      if ((double) Main.rand.Next(8000) >= 10.0 * (double) num15)
        return;
      int num16 = 12;
      int num17 = (Main.rand.Next(Main.maxTilesX - 50) + 100) * 16;
      int num18 = Main.rand.Next((int) ((double) Main.maxTilesY * 0.05)) * 16;
      Vector2 vector2;
      // ISSUE: explicit reference operation
      ((Vector2) @vector2).\u002Ector((float) num17, (float) num18);
      float num19 = (float) Main.rand.Next(-100, 101);
      float num20 = (float) (Main.rand.Next(200) + 100);
      float num21 = (float) Math.Sqrt((double) num19 * (double) num19 + (double) num20 * (double) num20);
      float num22 = (float) num16 / num21;
      float SpeedX = num19 * num22;
      float SpeedY = num20 * num22;
      Projectile.NewProjectile((float) vector2.X, (float) vector2.Y, SpeedX, SpeedY, 12, 1000, 10f, Main.myPlayer, 0.0f, 0.0f);
    }

    private static void TrySpawningTownNPC(int x, int y)
    {
      if (WorldGen.prioritizedTownNPC <= 0)
        return;
      if ((int) Main.tile[x, y].wall == 34)
      {
        if (Main.rand.Next(4) != 0)
          return;
        int num = (int) WorldGen.SpawnTownNPC(x, y);
      }
      else
      {
        int num1 = (int) WorldGen.SpawnTownNPC(x, y);
      }
    }

    public static void SpreadDesertWalls(int wallDist, int i, int j)
    {
      if (!WallID.Sets.Conversion.Sandstone[(int) Main.tile[i, j].wall] && (!Main.tile[i, j].active() || !TileID.Sets.Conversion.Sandstone[(int) Main.tile[i, j].type]) && !WallID.Sets.Conversion.HardenedSand[(int) Main.tile[i, j].wall])
        return;
      int num = 0;
      int wall = (int) Main.tile[i, j].wall;
      int type = (int) Main.tile[i, j].type;
      if (WallID.Sets.Corrupt[wall] || TileID.Sets.Corrupt[type])
        num = 1;
      if (WallID.Sets.Hallow[wall] || TileID.Sets.Hallow[type])
        num = 2;
      if (WallID.Sets.Crimson[wall] || TileID.Sets.Crimson[type])
        num = 3;
      if (num == 0)
        return;
      int tileX = i + WorldGen.genRand.Next(-2, 3);
      int tileY = j + WorldGen.genRand.Next(-2, 3);
      bool flag = false;
      if (WallID.Sets.Conversion.Sandstone[(int) Main.tile[tileX, tileY].wall] || WallID.Sets.Conversion.HardenedSand[(int) Main.tile[tileX, tileY].wall])
      {
        if (num == 3)
        {
          for (int index1 = i - wallDist; index1 < i + wallDist; ++index1)
          {
            for (int index2 = j - wallDist; index2 < j + wallDist; ++index2)
            {
              if (Main.tile[index1, index2].active() && TileID.Sets.Crimson[(int) Main.tile[index1, index2].type])
              {
                flag = true;
                break;
              }
            }
            if (flag)
              break;
          }
        }
        else if (num == 2)
        {
          for (int index1 = i - wallDist; index1 < i + wallDist; ++index1)
          {
            for (int index2 = j - wallDist; index2 < j + wallDist; ++index2)
            {
              if (Main.tile[index1, index2].active() && TileID.Sets.Hallow[(int) Main.tile[index1, index2].type])
              {
                flag = true;
                break;
              }
            }
            if (flag)
              break;
          }
        }
        else if (num == 1)
        {
          for (int index1 = i - wallDist; index1 < i + wallDist; ++index1)
          {
            for (int index2 = j - wallDist; index2 < j + wallDist; ++index2)
            {
              if (Main.tile[index1, index2].active() && TileID.Sets.Corrupt[(int) Main.tile[index1, index2].type])
              {
                flag = true;
                break;
              }
            }
            if (flag)
              break;
          }
        }
      }
      if (!flag)
        return;
      byte? nullable = new byte?();
      if (WallID.Sets.Conversion.Sandstone[(int) Main.tile[tileX, tileY].wall])
      {
        switch (num)
        {
          case 1:
            nullable = new byte?((byte) 220);
            break;
          case 2:
            nullable = new byte?((byte) 222);
            break;
          case 3:
            nullable = new byte?((byte) 221);
            break;
        }
      }
      if (WallID.Sets.Conversion.HardenedSand[(int) Main.tile[tileX, tileY].wall])
      {
        switch (num)
        {
          case 1:
            nullable = new byte?((byte) 217);
            break;
          case 2:
            nullable = new byte?((byte) 219);
            break;
          case 3:
            nullable = new byte?((byte) 218);
            break;
        }
      }
      if (!nullable.HasValue || (int) Main.tile[tileX, tileY].wall == (int) nullable.Value)
        return;
      Main.tile[tileX, tileY].wall = nullable.Value;
      if (Main.netMode != 2)
        return;
      NetMessage.SendTileSquare(-1, tileX, tileY, 3, TileChangeType.None);
    }

    public static void PlaceWall(int i, int j, int type, bool mute = false)
    {
      if (i <= 1 || j <= 1 || (i >= Main.maxTilesX - 2 || j >= Main.maxTilesY - 2))
        return;
      if (Main.tile[i, j] == null)
        Main.tile[i, j] = new Tile();
      if ((int) Main.tile[i, j].wall != 0)
        return;
      Main.tile[i, j].wall = (byte) type;
      WorldGen.SquareWallFrame(i, j, true);
      if (mute)
        return;
      Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
    }

    public static void AddPlants()
    {
      for (int i = 0; i < Main.maxTilesX; ++i)
      {
        for (int index = 1; index < Main.maxTilesY; ++index)
        {
          if ((int) Main.tile[i, index].type == 2 && Main.tile[i, index].nactive())
          {
            if (!Main.tile[i, index - 1].active())
              WorldGen.PlaceTile(i, index - 1, 3, true, false, -1, 0);
          }
          else if ((int) Main.tile[i, index].type == 23 && Main.tile[i, index].nactive())
          {
            if (!Main.tile[i, index - 1].active())
              WorldGen.PlaceTile(i, index - 1, 24, true, false, -1, 0);
          }
          else if ((int) Main.tile[i, index].type == 199 && Main.tile[i, index].nactive() && !Main.tile[i, index - 1].active())
            WorldGen.PlaceTile(i, index - 1, 201, true, false, -1, 0);
        }
      }
    }

    public static void SpreadGrass(int i, int j, int dirt = 0, int grass = 2, bool repeat = true, byte color = 0)
    {
      try
      {
        if (!WorldGen.InWorld(i, j, 1) || (int) Main.tile[i, j].type != dirt || !Main.tile[i, j].active() || (double) j >= Main.worldSurface && dirt == 0)
          return;
        int num1 = i - 1;
        int num2 = i + 2;
        int num3 = j - 1;
        int num4 = j + 2;
        if (num1 < 0)
          num1 = 0;
        if (num2 > Main.maxTilesX)
          num2 = Main.maxTilesX;
        if (num3 < 0)
          num3 = 0;
        if (num4 > Main.maxTilesY)
          num4 = Main.maxTilesY;
        bool flag = true;
        for (int index1 = num1; index1 < num2; ++index1)
        {
          for (int index2 = num3; index2 < num4; ++index2)
          {
            if (!Main.tile[index1, index2].active() || !Main.tileSolid[(int) Main.tile[index1, index2].type])
              flag = false;
            if (Main.tile[index1, index2].lava() && (int) Main.tile[index1, index2].liquid > 0)
            {
              flag = true;
              break;
            }
          }
        }
        if (flag || !TileID.Sets.CanBeClearedDuringGeneration[(int) Main.tile[i, j].type] || grass == 23 && (int) Main.tile[i, j - 1].type == 27 || grass == 199 && (int) Main.tile[i, j - 1].type == 27)
          return;
        Main.tile[i, j].type = (ushort) grass;
        Main.tile[i, j].color(color);
        for (int i1 = num1; i1 < num2; ++i1)
        {
          for (int j1 = num3; j1 < num4; ++j1)
          {
            if (Main.tile[i1, j1].active())
            {
              if ((int) Main.tile[i1, j1].type == dirt)
              {
                try
                {
                  if (repeat)
                  {
                    if (WorldGen.grassSpread < 1000)
                    {
                      ++WorldGen.grassSpread;
                      WorldGen.SpreadGrass(i1, j1, dirt, grass, true, (byte) 0);
                      --WorldGen.grassSpread;
                    }
                  }
                }
                catch
                {
                }
              }
            }
          }
        }
      }
      catch
      {
      }
    }

    public static void ChasmRunnerSideways(int i, int j, int direction, int steps)
    {
      float num1 = (float) steps;
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(10, 21) * 0.100000001490116 * (double) direction);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-10, 10) * 0.00999999977648258);
      double num2 = (double) (WorldGen.genRand.Next(5) + 7);
      while (num2 > 0.0)
      {
        if ((double) num1 > 0.0)
        {
          num2 = num2 + (double) WorldGen.genRand.Next(3) - (double) WorldGen.genRand.Next(3);
          if (num2 < 7.0)
            num2 = 7.0;
          if (num2 > 20.0)
            num2 = 20.0;
          if ((double) num1 == 1.0 && num2 < 10.0)
            num2 = 10.0;
        }
        else
          num2 -= (double) WorldGen.genRand.Next(4);
        if ((double) vector2_1.Y > Main.rockLayer && (double) num1 > 0.0)
          num1 = 0.0f;
        --num1;
        int num3 = (int) ((double) vector2_1.X - num2 * 0.5);
        int num4 = (int) ((double) vector2_1.X + num2 * 0.5);
        int num5 = (int) ((double) vector2_1.Y - num2 * 0.5);
        int num6 = (int) ((double) vector2_1.Y + num2 * 0.5);
        if (num3 < 0)
          num3 = 0;
        if (num4 > Main.maxTilesX - 1)
          num4 = Main.maxTilesX - 1;
        if (num5 < 0)
          num5 = 0;
        if (num6 > Main.maxTilesY)
          num6 = Main.maxTilesY;
        for (int index1 = num3; index1 < num4; ++index1)
        {
          for (int index2 = num5; index2 < num6; ++index2)
          {
            if ((double) Math.Abs((float) index1 - (float) vector2_1.X) + (double) Math.Abs((float) index2 - (float) vector2_1.Y) < num2 * 0.5 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015) && (int) Main.tile[index1, index2].type != 31 && (int) Main.tile[index1, index2].type != 22)
              Main.tile[index1, index2].active(false);
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2_2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num7 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 10) * 0.100000001490116;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num7;
        if (vector2_1.Y < (double) (j - 20))
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local2 = @vector2_2.Y;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num8 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(20) * 0.00999999977648258;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local2 = (float) num8;
        }
        if (vector2_1.Y > (double) (j + 20))
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local2 = @vector2_2.Y;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num8 = (double) ^(float&) local2 - (double) WorldGen.genRand.Next(20) * 0.00999999977648258;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local2 = (float) num8;
        }
        if ((double) vector2_2.Y < -0.5)
          vector2_2.Y = (__Null) -0.5;
        if ((double) vector2_2.Y > 0.5)
          vector2_2.Y = (__Null) 0.5;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local3 = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num9 = (double) ^(float&) local3 + (double) WorldGen.genRand.Next(-10, 11) * 0.00999999977648258;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local3 = (float) num9;
        if (direction == -1)
        {
          if ((double) vector2_2.X > -0.5)
            vector2_2.X = (__Null) -0.5;
          if (vector2_2.X < -2.0)
            vector2_2.X = (__Null) -2.0;
        }
        else if (direction == 1)
        {
          if ((double) vector2_2.X < 0.5)
            vector2_2.X = (__Null) 0.5;
          if (vector2_2.X > 2.0)
            vector2_2.X = (__Null) 2.0;
        }
        int num10 = (int) ((double) vector2_1.X - num2 * 1.1);
        int num11 = (int) ((double) vector2_1.X + num2 * 1.1);
        int num12 = (int) ((double) vector2_1.Y - num2 * 1.1);
        int num13 = (int) ((double) vector2_1.Y + num2 * 1.1);
        if (num10 < 1)
          num10 = 1;
        if (num11 > Main.maxTilesX - 1)
          num11 = Main.maxTilesX - 1;
        if (num12 < 0)
          num12 = 0;
        if (num13 > Main.maxTilesY)
          num13 = Main.maxTilesY;
        for (int index1 = num10; index1 < num11; ++index1)
        {
          for (int index2 = num12; index2 < num13; ++index2)
          {
            if ((double) Math.Abs((float) index1 - (float) vector2_1.X) + (double) Math.Abs((float) index2 - (float) vector2_1.Y) < num2 * 1.1 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015) && (int) Main.tile[index1, index2].wall != 3)
            {
              if ((int) Main.tile[index1, index2].type != 25 && index2 > j + WorldGen.genRand.Next(3, 20))
                Main.tile[index1, index2].active(true);
              Main.tile[index1, index2].active(true);
              if ((int) Main.tile[index1, index2].type != 31 && (int) Main.tile[index1, index2].type != 22)
                Main.tile[index1, index2].type = (ushort) 25;
              if ((int) Main.tile[index1, index2].wall == 2)
                Main.tile[index1, index2].wall = (byte) 0;
            }
          }
        }
        for (int i1 = num10; i1 < num11; ++i1)
        {
          for (int j1 = num12; j1 < num13; ++j1)
          {
            if ((double) Math.Abs((float) i1 - (float) vector2_1.X) + (double) Math.Abs((float) j1 - (float) vector2_1.Y) < num2 * 1.1 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015) && (int) Main.tile[i1, j1].wall != 3)
            {
              if ((int) Main.tile[i1, j1].type != 31 && (int) Main.tile[i1, j1].type != 22)
                Main.tile[i1, j1].type = (ushort) 25;
              Main.tile[i1, j1].active(true);
              WorldGen.PlaceWall(i1, j1, 3, true);
            }
          }
        }
      }
      if (WorldGen.genRand.Next(3) != 0)
        return;
      int x = (int) vector2_1.X;
      int y = (int) vector2_1.Y;
      while (!Main.tile[x, y].active())
        ++y;
      WorldGen.TileRunner(x, y, (double) WorldGen.genRand.Next(2, 6), WorldGen.genRand.Next(3, 7), 22, false, 0.0f, 0.0f, false, true);
    }

    public static void CrimStart(int i, int j)
    {
      int crimDir = 1;
      WorldGen.heartCount = 0;
      WorldGen.crimson = true;
      int i1 = i;
      int j1 = j;
      if ((double) j1 > Main.worldSurface)
        j1 = (int) Main.worldSurface;
      while (!WorldGen.SolidTile(i1, j1))
        ++j1;
      int num1 = i1;
      int num2 = j1;
      Vector2 position;
      // ISSUE: explicit reference operation
      ((Vector2) @position).\u002Ector((float) i1, (float) j1);
      Vector2 vector2;
      // ISSUE: explicit reference operation
      ((Vector2) @vector2).\u002Ector((float) WorldGen.genRand.Next(-20, 21) * 0.1f, (float) WorldGen.genRand.Next(20, 201) * 0.01f);
      if (vector2.X < 0.0)
        crimDir = -1;
      float num3 = (float) WorldGen.genRand.Next(15, 26);
      bool flag1 = true;
      int num4 = 0;
      while (flag1)
      {
        num3 += (float) WorldGen.genRand.Next(-50, 51) * 0.01f;
        if ((double) num3 < 15.0)
          num3 = 15f;
        if ((double) num3 > 25.0)
          num3 = 25f;
        for (int index1 = (int) (position.X - (double) num3 / 2.0); (double) index1 < position.X + (double) num3 / 2.0; ++index1)
        {
          for (int index2 = (int) (position.Y - (double) num3 / 2.0); (double) index2 < position.Y + (double) num3 / 2.0; ++index2)
          {
            if (index2 > num2)
            {
              if ((double) Math.Abs((float) index1 - (float) position.X) + (double) Math.Abs((float) index2 - (float) position.Y) < (double) num3 * 0.3)
              {
                Main.tile[index1, index2].active(false);
                Main.tile[index1, index2].wall = (byte) 83;
              }
              else if ((double) Math.Abs((float) index1 - (float) position.X) + (double) Math.Abs((float) index2 - (float) position.Y) < (double) num3 * 0.8 && (int) Main.tile[index1, index2].wall != 83)
              {
                Main.tile[index1, index2].active(true);
                Main.tile[index1, index2].type = (ushort) 203;
                if ((double) Math.Abs((float) index1 - (float) position.X) + (double) Math.Abs((float) index2 - (float) position.Y) < (double) num3 * 0.6)
                  Main.tile[index1, index2].wall = (byte) 83;
              }
            }
            else if ((double) Math.Abs((float) index1 - (float) position.X) + (double) Math.Abs((float) index2 - (float) position.Y) < (double) num3 * 0.3 && Main.tile[index1, index2].active())
            {
              Main.tile[index1, index2].active(false);
              Main.tile[index1, index2].wall = (byte) 83;
            }
          }
        }
        if (position.X > (double) (num1 + 50))
          num4 = -100;
        if (position.X < (double) (num1 - 50))
          num4 = 100;
        if (num4 < 0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local = @vector2.X;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num5 = (double) ^(float&) local - (double) WorldGen.genRand.Next(20, 51) * 0.00999999977648258;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local = (float) num5;
        }
        else if (num4 > 0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local = @vector2.X;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num5 = (double) ^(float&) local + (double) WorldGen.genRand.Next(20, 51) * 0.00999999977648258;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local = (float) num5;
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local = @vector2.X;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num5 = (double) ^(float&) local + (double) WorldGen.genRand.Next(-50, 51) * 0.00999999977648258;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local = (float) num5;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num6 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-50, 51) * 0.00999999977648258;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num6;
        if ((double) vector2.Y < 0.25)
          vector2.Y = (__Null) 0.25;
        if (vector2.Y > 2.0)
          vector2.Y = (__Null) 2.0;
        if (vector2.X < -2.0)
          vector2.X = (__Null) -2.0;
        if (vector2.X > 2.0)
          vector2.X = (__Null) 2.0;
        position = Vector2.op_Addition(position, vector2);
        if ((double) position.Y > Main.worldSurface + 100.0)
          flag1 = false;
      }
      float num7 = (float) WorldGen.genRand.Next(40, 55);
      for (int index1 = 0; index1 < 50; ++index1)
      {
        int num5 = (int) position.X + WorldGen.genRand.Next(-20, 21);
        int num6 = (int) position.Y + WorldGen.genRand.Next(-20, 21);
        for (int index2 = (int) ((double) num5 - (double) num7 / 2.0); (double) index2 < (double) num5 + (double) num7 / 2.0; ++index2)
        {
          for (int index3 = (int) ((double) num6 - (double) num7 / 2.0); (double) index3 < (double) num6 + (double) num7 / 2.0; ++index3)
          {
            double num8 = (double) Math.Abs(index2 - num5);
            float num9 = (float) Math.Abs(index3 - num6);
            float num10 = (float) (1.0 + (double) WorldGen.genRand.Next(-20, 21) * 0.00999999977648258);
            float num11 = (float) (1.0 + (double) WorldGen.genRand.Next(-20, 21) * 0.00999999977648258);
            double num12 = (double) num10;
            double num13 = num8 * num12;
            float num14 = num9 * num11;
            double num15 = Math.Sqrt(num13 * num13 + (double) num14 * (double) num14);
            if (num15 < (double) num7 * 0.25)
            {
              Main.tile[index2, index3].active(false);
              Main.tile[index2, index3].wall = (byte) 83;
            }
            else if (num15 < (double) num7 * 0.4 && (int) Main.tile[index2, index3].wall != 83)
            {
              Main.tile[index2, index3].active(true);
              Main.tile[index2, index3].type = (ushort) 203;
              if (num15 < (double) num7 * 0.35)
                Main.tile[index2, index3].wall = (byte) 83;
            }
          }
        }
      }
      int length = WorldGen.genRand.Next(5, 9);
      Vector2[] vector2Array = new Vector2[length];
      for (int index1 = 0; index1 < length; ++index1)
      {
        int x = (int) position.X;
        int y = (int) position.Y;
        int num5 = 0;
        bool flag2 = true;
        Vector2 velocity;
        // ISSUE: explicit reference operation
        ((Vector2) @velocity).\u002Ector((float) WorldGen.genRand.Next(-20, 21) * 0.15f, (float) WorldGen.genRand.Next(0, 21) * 0.15f);
        while (flag2)
        {
          // ISSUE: explicit reference operation
          ((Vector2) @velocity).\u002Ector((float) WorldGen.genRand.Next(-20, 21) * 0.15f, (float) WorldGen.genRand.Next(0, 21) * 0.15f);
          while ((double) Math.Abs((float) velocity.X) + (double) Math.Abs((float) velocity.Y) < 1.5)
          {
            // ISSUE: explicit reference operation
            ((Vector2) @velocity).\u002Ector((float) WorldGen.genRand.Next(-20, 21) * 0.15f, (float) WorldGen.genRand.Next(0, 21) * 0.15f);
          }
          flag2 = false;
          for (int index2 = 0; index2 < index1; ++index2)
          {
            if ((double) vector2.X > (double) vector2Array[index2].X - 0.75 && (double) vector2.X < (double) vector2Array[index2].X + 0.75 && ((double) vector2.Y > (double) vector2Array[index2].Y - 0.75 && (double) vector2.Y < (double) vector2Array[index2].Y + 0.75))
            {
              flag2 = true;
              ++num5;
              break;
            }
          }
          if (num5 > 10000)
            break;
        }
        vector2Array[index1] = velocity;
        WorldGen.CrimVein(new Vector2((float) x, (float) y), velocity);
      }
      for (int index1 = 0; index1 < WorldGen.heartCount; ++index1)
      {
        float num5 = (float) WorldGen.genRand.Next(16, 21);
        int x = (int) WorldGen.heartPos[index1].X;
        int y = (int) WorldGen.heartPos[index1].Y;
        for (int index2 = (int) ((double) x - (double) num5 / 2.0); (double) index2 < (double) x + (double) num5 / 2.0; ++index2)
        {
          for (int index3 = (int) ((double) y - (double) num5 / 2.0); (double) index3 < (double) y + (double) num5 / 2.0; ++index3)
          {
            double num6 = (double) Math.Abs(index2 - x);
            float num8 = (float) Math.Abs(index3 - y);
            if (Math.Sqrt(num6 * num6 + (double) num8 * (double) num8) < (double) num5 * 0.4)
            {
              Main.tile[index2, index3].active(true);
              Main.tile[index2, index3].type = (ushort) 203;
              Main.tile[index2, index3].wall = (byte) 83;
            }
          }
        }
      }
      for (int index1 = 0; index1 < WorldGen.heartCount; ++index1)
      {
        float num5 = (float) WorldGen.genRand.Next(10, 14);
        int x = (int) WorldGen.heartPos[index1].X;
        int y = (int) WorldGen.heartPos[index1].Y;
        for (int index2 = (int) ((double) x - (double) num5 / 2.0); (double) index2 < (double) x + (double) num5 / 2.0; ++index2)
        {
          for (int index3 = (int) ((double) y - (double) num5 / 2.0); (double) index3 < (double) y + (double) num5 / 2.0; ++index3)
          {
            double num6 = (double) Math.Abs(index2 - x);
            float num8 = (float) Math.Abs(index3 - y);
            if (Math.Sqrt(num6 * num6 + (double) num8 * (double) num8) < (double) num5 * 0.3)
            {
              Main.tile[index2, index3].active(false);
              Main.tile[index2, index3].wall = (byte) 83;
            }
          }
        }
      }
      for (int index = 0; index < WorldGen.heartCount; ++index)
        WorldGen.AddShadowOrb((int) WorldGen.heartPos[index].X, (int) WorldGen.heartPos[index].Y);
      int num16 = Main.maxTilesX;
      int num17 = 0;
      position.X = (__Null) (double) num1;
      position.Y = (__Null) (double) num2;
      float num18 = (float) WorldGen.genRand.Next(25, 35);
      float num19 = (float) WorldGen.genRand.Next(0, 6);
      for (int index1 = 0; index1 < 50; ++index1)
      {
        if ((double) num19 > 0.0)
        {
          float num5 = (float) WorldGen.genRand.Next(10, 30) * 0.01f;
          num19 -= num5;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local = @position.Y;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num6 = (double) ^(float&) local - (double) num5;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local = (float) num6;
        }
        int num8 = (int) position.X + WorldGen.genRand.Next(-2, 3);
        int num9 = (int) position.Y + WorldGen.genRand.Next(-2, 3);
        for (int index2 = (int) ((double) num8 - (double) num18 / 2.0); (double) index2 < (double) num8 + (double) num18 / 2.0; ++index2)
        {
          for (int index3 = (int) ((double) num9 - (double) num18 / 2.0); (double) index3 < (double) num9 + (double) num18 / 2.0; ++index3)
          {
            double num5 = (double) Math.Abs(index2 - num8);
            float num6 = (float) Math.Abs(index3 - num9);
            float num10 = (float) (1.0 + (double) WorldGen.genRand.Next(-20, 21) * 0.00499999988824129);
            float num11 = (float) (1.0 + (double) WorldGen.genRand.Next(-20, 21) * 0.00499999988824129);
            double num12 = (double) num10;
            double num13 = num5 * num12;
            float num14 = num6 * num11;
            double num15 = Math.Sqrt(num13 * num13 + (double) num14 * (double) num14);
            if (num15 < (double) num18 * 0.2 * ((double) WorldGen.genRand.Next(90, 111) * 0.01))
            {
              Main.tile[index2, index3].active(false);
              Main.tile[index2, index3].wall = (byte) 83;
            }
            else if (num15 < (double) num18 * 0.45)
            {
              if (index2 < num16)
                num16 = index2;
              if (index2 > num17)
                num17 = index2;
              if ((int) Main.tile[index2, index3].wall != 83)
              {
                Main.tile[index2, index3].active(true);
                Main.tile[index2, index3].type = (ushort) 203;
                if (num15 < (double) num18 * 0.35)
                  Main.tile[index2, index3].wall = (byte) 83;
              }
            }
          }
        }
      }
      for (int index1 = num16; index1 <= num17; ++index1)
      {
        int index2 = num2;
        while ((int) Main.tile[index1, index2].type == 203 && Main.tile[index1, index2].active() || (int) Main.tile[index1, index2].wall == 83)
          ++index2;
        for (int index3 = WorldGen.genRand.Next(15, 20); !Main.tile[index1, index2].active() && index3 > 0 && (int) Main.tile[index1, index2].wall != 83; ++index2)
        {
          --index3;
          Main.tile[index1, index2].type = (ushort) 203;
          Main.tile[index1, index2].active(true);
        }
      }
      WorldGen.CrimEnt(position, crimDir);
    }

    public static void CrimEnt(Vector2 position, int crimDir)
    {
      float num1 = 0.0f;
      float num2 = (float) WorldGen.genRand.Next(6, 11);
      bool flag = true;
      Vector2 vector2;
      // ISSUE: explicit reference operation
      ((Vector2) @vector2).\u002Ector(2f, (float) WorldGen.genRand.Next(-20, 0) * 0.01f);
      // ISSUE: explicit reference operation
      // ISSUE: variable of a reference type
      __Null& local = @vector2.X;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      double num3 = (double) ^(float&) local * (double) -crimDir;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(float&) local = (float) num3;
      while (flag)
      {
        ++num1;
        if ((double) num1 >= 20.0)
          flag = false;
        num2 += (float) WorldGen.genRand.Next(-10, 11) * 0.02f;
        if ((double) num2 < 6.0)
          num2 = 6f;
        if ((double) num2 > 10.0)
          num2 = 10f;
        for (int index1 = (int) (position.X - (double) num2 / 2.0); (double) index1 < position.X + (double) num2 / 2.0; ++index1)
        {
          for (int index2 = (int) (position.Y - (double) num2 / 2.0); (double) index2 < position.Y + (double) num2 / 2.0; ++index2)
          {
            double num4 = (double) Math.Abs((float) index1 - (float) position.X);
            float num5 = Math.Abs((float) index2 - (float) position.Y);
            if (Math.Sqrt(num4 * num4 + (double) num5 * (double) num5) < (double) num2 * 0.5 && Main.tile[index1, index2].active() && (int) Main.tile[index1, index2].type == 203)
            {
              Main.tile[index1, index2].active(false);
              flag = true;
              num1 = 0.0f;
            }
          }
        }
        position = Vector2.op_Addition(position, vector2);
      }
    }

    public static void CrimVein(Vector2 position, Vector2 velocity)
    {
      float num1 = (float) WorldGen.genRand.Next(15, 26);
      bool flag = true;
      Vector2 vector2_1 = velocity;
      Vector2 vector2_2 = position;
      int num2 = WorldGen.genRand.Next(100, 150);
      if (velocity.Y < 0.0)
        num2 -= 25;
      while (flag)
      {
        num1 += (float) WorldGen.genRand.Next(-50, 51) * 0.02f;
        if ((double) num1 < 15.0)
          num1 = 15f;
        if ((double) num1 > 25.0)
          num1 = 25f;
        for (int index1 = (int) (position.X - (double) num1 / 2.0); (double) index1 < position.X + (double) num1 / 2.0; ++index1)
        {
          for (int index2 = (int) (position.Y - (double) num1 / 2.0); (double) index2 < position.Y + (double) num1 / 2.0; ++index2)
          {
            double num3 = (double) Math.Abs((float) index1 - (float) position.X);
            float num4 = Math.Abs((float) index2 - (float) position.Y);
            double num5 = Math.Sqrt(num3 * num3 + (double) num4 * (double) num4);
            if (num5 < (double) num1 * 0.2)
            {
              Main.tile[index1, index2].active(false);
              Main.tile[index1, index2].wall = (byte) 83;
            }
            else if (num5 < (double) num1 * 0.5 && (int) Main.tile[index1, index2].wall != 83)
            {
              Main.tile[index1, index2].active(true);
              Main.tile[index1, index2].type = (ushort) 203;
              if (num5 < (double) num1 * 0.4)
                Main.tile[index1, index2].wall = (byte) 83;
            }
          }
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @velocity.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num6 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-50, 51) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num6;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @velocity.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num7 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-50, 51) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local2 = (float) num7;
        if ((double) velocity.Y < (double) vector2_1.Y - 0.75)
          velocity.Y = (__Null) (vector2_1.Y - 0.75);
        if ((double) velocity.Y > (double) vector2_1.Y + 0.75)
          velocity.Y = (__Null) (vector2_1.Y + 0.75);
        if ((double) velocity.X < (double) vector2_1.X - 0.75)
          velocity.X = (__Null) (vector2_1.X - 0.75);
        if ((double) velocity.X > (double) vector2_1.X + 0.75)
          velocity.X = (__Null) (vector2_1.X + 0.75);
        position = Vector2.op_Addition(position, velocity);
        if ((double) Math.Abs((float) (position.X - vector2_2.X)) + (double) Math.Abs((float) (position.Y - vector2_2.Y)) > (double) num2)
          flag = false;
      }
      WorldGen.heartPos[WorldGen.heartCount] = position;
      ++WorldGen.heartCount;
    }

    public static void ChasmRunner(int i, int j, int steps, bool makeOrb = false)
    {
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = false;
      if (!makeOrb)
        flag2 = true;
      float num1 = (float) steps;
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(11) * 0.200000002980232 + 0.5);
      int num2 = 5;
      double num3 = (double) (WorldGen.genRand.Next(5) + 7);
      while (num3 > 0.0)
      {
        if ((double) num1 > 0.0)
        {
          num3 = num3 + (double) WorldGen.genRand.Next(3) - (double) WorldGen.genRand.Next(3);
          if (num3 < 7.0)
            num3 = 7.0;
          if (num3 > 20.0)
            num3 = 20.0;
          if ((double) num1 == 1.0 && num3 < 10.0)
            num3 = 10.0;
        }
        else if ((double) vector2_1.Y > Main.worldSurface + 45.0)
          num3 -= (double) WorldGen.genRand.Next(4);
        if ((double) vector2_1.Y > Main.rockLayer && (double) num1 > 0.0)
          num1 = 0.0f;
        --num1;
        if (!flag1 && (double) vector2_1.Y > Main.worldSurface + 20.0)
        {
          flag1 = true;
          WorldGen.ChasmRunnerSideways((int) vector2_1.X, (int) vector2_1.Y, -1, WorldGen.genRand.Next(20, 40));
          WorldGen.ChasmRunnerSideways((int) vector2_1.X, (int) vector2_1.Y, 1, WorldGen.genRand.Next(20, 40));
        }
        if ((double) num1 > (double) num2)
        {
          int num4 = (int) ((double) vector2_1.X - num3 * 0.5);
          int num5 = (int) ((double) vector2_1.X + num3 * 0.5);
          int num6 = (int) ((double) vector2_1.Y - num3 * 0.5);
          int num7 = (int) ((double) vector2_1.Y + num3 * 0.5);
          if (num4 < 0)
            num4 = 0;
          if (num5 > Main.maxTilesX - 1)
            num5 = Main.maxTilesX - 1;
          if (num6 < 0)
            num6 = 0;
          if (num7 > Main.maxTilesY)
            num7 = Main.maxTilesY;
          for (int index1 = num4; index1 < num5; ++index1)
          {
            for (int index2 = num6; index2 < num7; ++index2)
            {
              if ((double) Math.Abs((float) index1 - (float) vector2_1.X) + (double) Math.Abs((float) index2 - (float) vector2_1.Y) < num3 * 0.5 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015) && (int) Main.tile[index1, index2].type != 31 && (int) Main.tile[index1, index2].type != 22)
                Main.tile[index1, index2].active(false);
            }
          }
        }
        if ((double) num1 <= 2.0 && (double) vector2_1.Y < Main.worldSurface + 45.0)
          num1 = 2f;
        if ((double) num1 <= 0.0)
        {
          if (!flag2)
          {
            flag2 = true;
            WorldGen.AddShadowOrb((int) vector2_1.X, (int) vector2_1.Y);
          }
          else if (!flag3)
          {
            flag3 = false;
            bool flag4 = false;
            int num4 = 0;
            while (!flag4)
            {
              int x = WorldGen.genRand.Next((int) vector2_1.X - 25, (int) vector2_1.X + 25);
              int y = WorldGen.genRand.Next((int) vector2_1.Y - 50, (int) vector2_1.Y);
              if (x < 5)
                x = 5;
              if (x > Main.maxTilesX - 5)
                x = Main.maxTilesX - 5;
              if (y < 5)
                y = 5;
              if (y > Main.maxTilesY - 5)
                y = Main.maxTilesY - 5;
              if ((double) y > Main.worldSurface)
              {
                WorldGen.Place3x2(x, y, (ushort) 26, 0);
                if ((int) Main.tile[x, y].type == 26)
                {
                  flag4 = true;
                }
                else
                {
                  ++num4;
                  if (num4 >= 10000)
                    flag4 = true;
                }
              }
              else
                flag4 = true;
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num8 = (double) ^(float&) local + (double) WorldGen.genRand.Next(-10, 11) * 0.00999999977648258;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local = (float) num8;
        if ((double) vector2_2.X > 0.3)
          vector2_2.X = (__Null) 0.300000011920929;
        if ((double) vector2_2.X < -0.3)
          vector2_2.X = (__Null) -0.300000011920929;
        int num9 = (int) ((double) vector2_1.X - num3 * 1.1);
        int num10 = (int) ((double) vector2_1.X + num3 * 1.1);
        int num11 = (int) ((double) vector2_1.Y - num3 * 1.1);
        int num12 = (int) ((double) vector2_1.Y + num3 * 1.1);
        if (num9 < 1)
          num9 = 1;
        if (num10 > Main.maxTilesX - 1)
          num10 = Main.maxTilesX - 1;
        if (num11 < 0)
          num11 = 0;
        if (num12 > Main.maxTilesY)
          num12 = Main.maxTilesY;
        for (int index1 = num9; index1 < num10; ++index1)
        {
          for (int index2 = num11; index2 < num12; ++index2)
          {
            if ((double) Math.Abs((float) index1 - (float) vector2_1.X) + (double) Math.Abs((float) index2 - (float) vector2_1.Y) < num3 * 1.1 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015))
            {
              if ((int) Main.tile[index1, index2].type != 25 && index2 > j + WorldGen.genRand.Next(3, 20))
                Main.tile[index1, index2].active(true);
              if (steps <= num2)
                Main.tile[index1, index2].active(true);
              if ((int) Main.tile[index1, index2].type != 31)
                Main.tile[index1, index2].type = (ushort) 25;
            }
          }
        }
        for (int index1 = num9; index1 < num10; ++index1)
        {
          for (int index2 = num11; index2 < num12; ++index2)
          {
            if ((double) Math.Abs((float) index1 - (float) vector2_1.X) + (double) Math.Abs((float) index2 - (float) vector2_1.Y) < num3 * 1.1 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015))
            {
              if ((int) Main.tile[index1, index2].type != 31)
                Main.tile[index1, index2].type = (ushort) 25;
              if (steps <= num2)
                Main.tile[index1, index2].active(true);
              if (index2 > j + WorldGen.genRand.Next(3, 20))
                Main.tile[index1, index2].wall = (byte) 3;
            }
          }
        }
      }
    }

    public static void JungleRunner(int i, int j)
    {
      double num1 = (double) WorldGen.genRand.Next(5, 11);
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(10, 20) * 0.100000001490116);
      int num2 = 0;
      bool flag = true;
      while (flag)
      {
        if ((double) vector2_1.Y < Main.worldSurface)
        {
          int x = (int) vector2_1.X;
          int y = (int) vector2_1.Y;
          int index1 = Utils.Clamp<int>(x, 10, Main.maxTilesX - 10);
          int index2 = Utils.Clamp<int>(y, 10, Main.maxTilesY - 10);
          if (index2 < 5)
            index2 = 5;
          if ((int) Main.tile[index1, index2].wall == 0 && !Main.tile[index1, index2].active() && ((int) Main.tile[index1, index2 - 3].wall == 0 && !Main.tile[index1, index2 - 3].active()) && ((int) Main.tile[index1, index2 - 1].wall == 0 && !Main.tile[index1, index2 - 1].active() && ((int) Main.tile[index1, index2 - 4].wall == 0 && !Main.tile[index1, index2 - 4].active())) && ((int) Main.tile[index1, index2 - 2].wall == 0 && !Main.tile[index1, index2 - 2].active() && ((int) Main.tile[index1, index2 - 5].wall == 0 && !Main.tile[index1, index2 - 5].active())))
            flag = false;
        }
        WorldGen.JungleX = (int) vector2_1.X;
        num1 += (double) WorldGen.genRand.Next(-20, 21) * 0.100000001490116;
        if (num1 < 5.0)
          num1 = 5.0;
        if (num1 > 10.0)
          num1 = 10.0;
        int num3 = (int) ((double) vector2_1.X - num1 * 0.5);
        int num4 = (int) ((double) vector2_1.X + num1 * 0.5);
        int num5 = (int) ((double) vector2_1.Y - num1 * 0.5);
        int num6 = (int) ((double) vector2_1.Y + num1 * 0.5);
        int min = 10;
        int max = Main.maxTilesX - 10;
        int num7 = Utils.Clamp<int>(num3, min, max);
        int num8 = Utils.Clamp<int>(num4, 10, Main.maxTilesX - 10);
        int num9 = Utils.Clamp<int>(num5, 10, Main.maxTilesY - 10);
        int num10 = Utils.Clamp<int>(num6, 10, Main.maxTilesY - 10);
        for (int i1 = num7; i1 < num8; ++i1)
        {
          for (int j1 = num9; j1 < num10; ++j1)
          {
            if ((double) Math.Abs((float) i1 - (float) vector2_1.X) + (double) Math.Abs((float) j1 - (float) vector2_1.Y) < num1 * 0.5 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015))
              WorldGen.KillTile(i1, j1, false, false, false);
          }
        }
        ++num2;
        if (num2 > 10 && WorldGen.genRand.Next(50) < num2)
        {
          num2 = 0;
          int num11 = -2;
          if (WorldGen.genRand.Next(2) == 0)
            num11 = 2;
          WorldGen.TileRunner((int) vector2_1.X, (int) vector2_1.Y, (double) WorldGen.genRand.Next(3, 20), WorldGen.genRand.Next(10, 100), -1, false, (float) num11, 0.0f, false, true);
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2_2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num12 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 11) * 0.00999999977648258;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num12;
        if (vector2_2.Y > 0.0)
          vector2_2.Y = (__Null) 0.0;
        if (vector2_2.Y < -2.0)
          vector2_2.Y = (__Null) -2.0;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num13 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local2 = (float) num13;
        if (vector2_1.X < (double) (i - 200))
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local3 = @vector2_2.X;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num11 = (double) ^(float&) local3 + (double) WorldGen.genRand.Next(5, 21) * 0.100000001490116;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local3 = (float) num11;
        }
        if (vector2_1.X > (double) (i + 200))
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local3 = @vector2_2.X;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num11 = (double) ^(float&) local3 - (double) WorldGen.genRand.Next(5, 21) * 0.100000001490116;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local3 = (float) num11;
        }
        if ((double) vector2_2.X > 1.5)
          vector2_2.X = (__Null) 1.5;
        if ((double) vector2_2.X < -1.5)
          vector2_2.X = (__Null) -1.5;
      }
    }

    public static void GERunner(int i, int j, float speedX = 0.0f, float speedY = 0.0f, bool good = true)
    {
      int num1 = (int) ((double) WorldGen.genRand.Next(200, 250) * (double) (Main.maxTilesX / 4200));
      double num2 = (double) num1;
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      if ((double) speedX != 0.0 || (double) speedY != 0.0)
      {
        vector2_2.X = (__Null) (double) speedX;
        vector2_2.Y = (__Null) (double) speedY;
      }
      bool flag = true;
      while (flag)
      {
        int num3 = (int) ((double) vector2_1.X - num2 * 0.5);
        int num4 = (int) ((double) vector2_1.X + num2 * 0.5);
        int num5 = (int) ((double) vector2_1.Y - num2 * 0.5);
        int num6 = (int) ((double) vector2_1.Y + num2 * 0.5);
        if (num3 < 0)
          num3 = 0;
        if (num4 > Main.maxTilesX)
          num4 = Main.maxTilesX;
        if (num5 < 0)
          num5 = 0;
        if (num6 > Main.maxTilesY)
          num6 = Main.maxTilesY;
        for (int i1 = num3; i1 < num4; ++i1)
        {
          for (int j1 = num5; j1 < num6; ++j1)
          {
            if ((double) Math.Abs((float) i1 - (float) vector2_1.X) + (double) Math.Abs((float) j1 - (float) vector2_1.Y) < (double) num1 * 0.5 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015))
            {
              if (good)
              {
                if ((int) Main.tile[i1, j1].wall == 63 || (int) Main.tile[i1, j1].wall == 65 || ((int) Main.tile[i1, j1].wall == 66 || (int) Main.tile[i1, j1].wall == 68) || ((int) Main.tile[i1, j1].wall == 69 || (int) Main.tile[i1, j1].wall == 81))
                  Main.tile[i1, j1].wall = (byte) 70;
                else if ((int) Main.tile[i1, j1].wall == 216)
                  Main.tile[i1, j1].wall = (byte) 219;
                else if ((int) Main.tile[i1, j1].wall == 187)
                  Main.tile[i1, j1].wall = (byte) 222;
                if ((int) Main.tile[i1, j1].wall == 3 || (int) Main.tile[i1, j1].wall == 83)
                  Main.tile[i1, j1].wall = (byte) 28;
                if ((int) Main.tile[i1, j1].type == 2)
                {
                  Main.tile[i1, j1].type = (ushort) 109;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 1)
                {
                  Main.tile[i1, j1].type = (ushort) 117;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 53 || (int) Main.tile[i1, j1].type == 123)
                {
                  Main.tile[i1, j1].type = (ushort) 116;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 23 || (int) Main.tile[i1, j1].type == 199)
                {
                  Main.tile[i1, j1].type = (ushort) 109;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 25 || (int) Main.tile[i1, j1].type == 203)
                {
                  Main.tile[i1, j1].type = (ushort) 117;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 112 || (int) Main.tile[i1, j1].type == 234)
                {
                  Main.tile[i1, j1].type = (ushort) 116;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 161 || (int) Main.tile[i1, j1].type == 163 || (int) Main.tile[i1, j1].type == 200)
                {
                  Main.tile[i1, j1].type = (ushort) 164;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 396)
                {
                  Main.tile[i1, j1].type = (ushort) 403;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 397)
                {
                  Main.tile[i1, j1].type = (ushort) 402;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
              }
              else if (WorldGen.crimson)
              {
                if ((int) Main.tile[i1, j1].wall == 63 || (int) Main.tile[i1, j1].wall == 65 || ((int) Main.tile[i1, j1].wall == 66 || (int) Main.tile[i1, j1].wall == 68))
                  Main.tile[i1, j1].wall = (byte) 81;
                else if ((int) Main.tile[i1, j1].wall == 216)
                  Main.tile[i1, j1].wall = (byte) 218;
                else if ((int) Main.tile[i1, j1].wall == 187)
                  Main.tile[i1, j1].wall = (byte) 221;
                if ((int) Main.tile[i1, j1].type == 2)
                {
                  Main.tile[i1, j1].type = (ushort) 199;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 1)
                {
                  Main.tile[i1, j1].type = (ushort) 203;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 53 || (int) Main.tile[i1, j1].type == 123)
                {
                  Main.tile[i1, j1].type = (ushort) 234;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 109)
                {
                  Main.tile[i1, j1].type = (ushort) 199;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 117)
                {
                  Main.tile[i1, j1].type = (ushort) 203;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 116)
                {
                  Main.tile[i1, j1].type = (ushort) 234;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 161 || (int) Main.tile[i1, j1].type == 164)
                {
                  Main.tile[i1, j1].type = (ushort) 200;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 396)
                {
                  Main.tile[i1, j1].type = (ushort) 401;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 397)
                {
                  Main.tile[i1, j1].type = (ushort) 399;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
              }
              else
              {
                if ((int) Main.tile[i1, j1].wall == 63 || (int) Main.tile[i1, j1].wall == 65 || ((int) Main.tile[i1, j1].wall == 66 || (int) Main.tile[i1, j1].wall == 68))
                  Main.tile[i1, j1].wall = (byte) 69;
                else if ((int) Main.tile[i1, j1].wall == 216)
                  Main.tile[i1, j1].wall = (byte) 217;
                else if ((int) Main.tile[i1, j1].wall == 187)
                  Main.tile[i1, j1].wall = (byte) 220;
                if ((int) Main.tile[i1, j1].type == 2)
                {
                  Main.tile[i1, j1].type = (ushort) 23;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 1)
                {
                  Main.tile[i1, j1].type = (ushort) 25;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 53 || (int) Main.tile[i1, j1].type == 123)
                {
                  Main.tile[i1, j1].type = (ushort) 112;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 109)
                {
                  Main.tile[i1, j1].type = (ushort) 23;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 117)
                {
                  Main.tile[i1, j1].type = (ushort) 25;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 116)
                {
                  Main.tile[i1, j1].type = (ushort) 112;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 161 || (int) Main.tile[i1, j1].type == 164)
                {
                  Main.tile[i1, j1].type = (ushort) 163;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 396)
                {
                  Main.tile[i1, j1].type = (ushort) 400;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
                else if ((int) Main.tile[i1, j1].type == 397)
                {
                  Main.tile[i1, j1].type = (ushort) 398;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
              }
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num7 = (double) ^(float&) local + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local = (float) num7;
        if (vector2_2.X > (double) speedX + 1.0)
          vector2_2.X = (__Null) ((double) speedX + 1.0);
        if (vector2_2.X < (double) speedX - 1.0)
          vector2_2.X = (__Null) ((double) speedX - 1.0);
        if (vector2_1.X < (double) -num1 || vector2_1.Y < (double) -num1 || (vector2_1.X > (double) (Main.maxTilesX + num1) || vector2_1.Y > (double) (Main.maxTilesX + num1)))
          flag = false;
      }
    }

    public static void TileRunner(int i, int j, double strength, int steps, int type, bool addTile = false, float speedX = 0.0f, float speedY = 0.0f, bool noYChange = false, bool overRide = true)
    {
      double num1 = strength;
      float num2 = (float) steps;
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      if ((double) speedX != 0.0 || (double) speedY != 0.0)
      {
        vector2_2.X = (__Null) (double) speedX;
        vector2_2.Y = (__Null) (double) speedY;
      }
      bool flag1 = type == 368;
      bool flag2 = type == 367;
      while (num1 > 0.0 && (double) num2 > 0.0)
      {
        if (vector2_1.Y < 0.0 && (double) num2 > 0.0 && type == 59)
          num2 = 0.0f;
        num1 = strength * ((double) num2 / (double) steps);
        --num2;
        int num3 = (int) ((double) vector2_1.X - num1 * 0.5);
        int num4 = (int) ((double) vector2_1.X + num1 * 0.5);
        int num5 = (int) ((double) vector2_1.Y - num1 * 0.5);
        int num6 = (int) ((double) vector2_1.Y + num1 * 0.5);
        if (num3 < 1)
          num3 = 1;
        if (num4 > Main.maxTilesX - 1)
          num4 = Main.maxTilesX - 1;
        if (num5 < 1)
          num5 = 1;
        if (num6 > Main.maxTilesY - 1)
          num6 = Main.maxTilesY - 1;
        for (int i1 = num3; i1 < num4; ++i1)
        {
          for (int j1 = num5; j1 < num6; ++j1)
          {
            if ((double) Math.Abs((float) i1 - (float) vector2_1.X) + (double) Math.Abs((float) j1 - (float) vector2_1.Y) < strength * 0.5 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015))
            {
              if (WorldGen.mudWall && (double) j1 > Main.worldSurface && ((int) Main.tile[i1, j1 - 1].wall != 2 && j1 < Main.maxTilesY - 210 - WorldGen.genRand.Next(3)))
              {
                if (j1 > WorldGen.lavaLine - WorldGen.genRand.Next(0, 4) - 50)
                {
                  if ((int) Main.tile[i1, j1 - 1].wall != 64 && (int) Main.tile[i1, j1 + 1].wall != 64 && ((int) Main.tile[i1 - 1, j1].wall != 64 && (int) Main.tile[i1, j1 + 1].wall != 64))
                    WorldGen.PlaceWall(i1, j1, 15, true);
                }
                else if ((int) Main.tile[i1, j1 - 1].wall != 15 && (int) Main.tile[i1, j1 + 1].wall != 15 && ((int) Main.tile[i1 - 1, j1].wall != 15 && (int) Main.tile[i1, j1 + 1].wall != 15))
                  WorldGen.PlaceWall(i1, j1, 64, true);
              }
              if (type < 0)
              {
                if (type == -2 && Main.tile[i1, j1].active() && (j1 < WorldGen.waterLine || j1 > WorldGen.lavaLine))
                {
                  Main.tile[i1, j1].liquid = byte.MaxValue;
                  if (j1 > WorldGen.lavaLine)
                    Main.tile[i1, j1].lava(true);
                }
                Main.tile[i1, j1].active(false);
              }
              else
              {
                if (flag1 && (double) Math.Abs((float) i1 - (float) vector2_1.X) + (double) Math.Abs((float) j1 - (float) vector2_1.Y) < strength * 0.3 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.01))
                  WorldGen.PlaceWall(i1, j1, 180, true);
                if (flag2 && (double) Math.Abs((float) i1 - (float) vector2_1.X) + (double) Math.Abs((float) j1 - (float) vector2_1.Y) < strength * 0.3 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.01))
                  WorldGen.PlaceWall(i1, j1, 178, true);
                if (overRide || !Main.tile[i1, j1].active())
                {
                  Tile tile = Main.tile[i1, j1];
                  bool flag3 = Main.tileStone[type] && (int) tile.type != 1;
                  if (!TileID.Sets.CanBeClearedDuringGeneration[(int) tile.type])
                    flag3 = true;
                  ushort type1 = tile.type;
                  if ((uint) type1 <= 147U)
                  {
                    if ((uint) type1 <= 45U)
                    {
                      if ((int) type1 != 1)
                      {
                        if ((int) type1 != 45)
                          goto label_55;
                      }
                      else if (type == 59 && (double) j1 < Main.worldSurface + (double) WorldGen.genRand.Next(-50, 50))
                      {
                        flag3 = true;
                        goto label_55;
                      }
                      else
                        goto label_55;
                    }
                    else if ((int) type1 != 53)
                    {
                      if ((int) type1 != 147)
                        goto label_55;
                    }
                    else
                    {
                      if (type == 40)
                        flag3 = true;
                      if ((double) j1 < Main.worldSurface && type != 59)
                      {
                        flag3 = true;
                        goto label_55;
                      }
                      else
                        goto label_55;
                    }
                  }
                  else if ((uint) type1 <= 196U)
                  {
                    if ((uint) type1 - 189U > 1U && (int) type1 != 196)
                      goto label_55;
                  }
                  else if ((uint) type1 - 367U > 1U)
                  {
                    if ((uint) type1 - 396U <= 1U)
                    {
                      flag3 = !TileID.Sets.Ore[type];
                      goto label_55;
                    }
                    else
                      goto label_55;
                  }
                  else if (type == 59)
                  {
                    flag3 = true;
                    goto label_55;
                  }
                  else
                    goto label_55;
                  flag3 = true;
label_55:
                  if (!flag3)
                    tile.type = (ushort) type;
                }
                if (addTile)
                {
                  Main.tile[i1, j1].active(true);
                  Main.tile[i1, j1].liquid = (byte) 0;
                  Main.tile[i1, j1].lava(false);
                }
                if (noYChange && (double) j1 < Main.worldSurface && type != 59)
                  Main.tile[i1, j1].wall = (byte) 2;
                if (type == 59 && j1 > WorldGen.waterLine && (int) Main.tile[i1, j1].liquid > 0)
                {
                  Main.tile[i1, j1].lava(false);
                  Main.tile[i1, j1].liquid = (byte) 0;
                }
              }
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        if (num1 > 50.0)
        {
          vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
          --num2;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local1 = @vector2_2.Y;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num7 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local1 = (float) num7;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local2 = @vector2_2.X;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num8 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local2 = (float) num8;
          if (num1 > 100.0)
          {
            vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
            --num2;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            __Null& local3 = @vector2_2.Y;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            double num9 = (double) ^(float&) local3 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(float&) local3 = (float) num9;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            __Null& local4 = @vector2_2.X;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            double num10 = (double) ^(float&) local4 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(float&) local4 = (float) num10;
            if (num1 > 150.0)
            {
              vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
              --num2;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              __Null& local5 = @vector2_2.Y;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              double num11 = (double) ^(float&) local5 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(float&) local5 = (float) num11;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              __Null& local6 = @vector2_2.X;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              double num12 = (double) ^(float&) local6 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(float&) local6 = (float) num12;
              if (num1 > 200.0)
              {
                vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
                --num2;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                __Null& local7 = @vector2_2.Y;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                double num13 = (double) ^(float&) local7 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(float&) local7 = (float) num13;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                __Null& local8 = @vector2_2.X;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                double num14 = (double) ^(float&) local8 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(float&) local8 = (float) num14;
                if (num1 > 250.0)
                {
                  vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
                  --num2;
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  __Null& local9 = @vector2_2.Y;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  double num15 = (double) ^(float&) local9 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(float&) local9 = (float) num15;
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  __Null& local10 = @vector2_2.X;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  double num16 = (double) ^(float&) local10 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(float&) local10 = (float) num16;
                  if (num1 > 300.0)
                  {
                    vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
                    --num2;
                    // ISSUE: explicit reference operation
                    // ISSUE: variable of a reference type
                    __Null& local11 = @vector2_2.Y;
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    double num17 = (double) ^(float&) local11 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    ^(float&) local11 = (float) num17;
                    // ISSUE: explicit reference operation
                    // ISSUE: variable of a reference type
                    __Null& local12 = @vector2_2.X;
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    double num18 = (double) ^(float&) local12 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    ^(float&) local12 = (float) num18;
                    if (num1 > 400.0)
                    {
                      vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
                      --num2;
                      // ISSUE: explicit reference operation
                      // ISSUE: variable of a reference type
                      __Null& local13 = @vector2_2.Y;
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      double num19 = (double) ^(float&) local13 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      ^(float&) local13 = (float) num19;
                      // ISSUE: explicit reference operation
                      // ISSUE: variable of a reference type
                      __Null& local14 = @vector2_2.X;
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      double num20 = (double) ^(float&) local14 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      ^(float&) local14 = (float) num20;
                      if (num1 > 500.0)
                      {
                        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
                        --num2;
                        // ISSUE: explicit reference operation
                        // ISSUE: variable of a reference type
                        __Null& local15 = @vector2_2.Y;
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        double num21 = (double) ^(float&) local15 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        ^(float&) local15 = (float) num21;
                        // ISSUE: explicit reference operation
                        // ISSUE: variable of a reference type
                        __Null& local16 = @vector2_2.X;
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        double num22 = (double) ^(float&) local16 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        ^(float&) local16 = (float) num22;
                        if (num1 > 600.0)
                        {
                          vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
                          --num2;
                          // ISSUE: explicit reference operation
                          // ISSUE: variable of a reference type
                          __Null& local17 = @vector2_2.Y;
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          double num23 = (double) ^(float&) local17 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          ^(float&) local17 = (float) num23;
                          // ISSUE: explicit reference operation
                          // ISSUE: variable of a reference type
                          __Null& local18 = @vector2_2.X;
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          double num24 = (double) ^(float&) local18 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          ^(float&) local18 = (float) num24;
                          if (num1 > 700.0)
                          {
                            vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
                            --num2;
                            // ISSUE: explicit reference operation
                            // ISSUE: variable of a reference type
                            __Null& local19 = @vector2_2.Y;
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            double num25 = (double) ^(float&) local19 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            ^(float&) local19 = (float) num25;
                            // ISSUE: explicit reference operation
                            // ISSUE: variable of a reference type
                            __Null& local20 = @vector2_2.X;
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            double num26 = (double) ^(float&) local20 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            ^(float&) local20 = (float) num26;
                            if (num1 > 800.0)
                            {
                              vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
                              --num2;
                              // ISSUE: explicit reference operation
                              // ISSUE: variable of a reference type
                              __Null& local21 = @vector2_2.Y;
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              double num27 = (double) ^(float&) local21 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              ^(float&) local21 = (float) num27;
                              // ISSUE: explicit reference operation
                              // ISSUE: variable of a reference type
                              __Null& local22 = @vector2_2.X;
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              double num28 = (double) ^(float&) local22 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              ^(float&) local22 = (float) num28;
                              if (num1 > 900.0)
                              {
                                vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
                                --num2;
                                // ISSUE: explicit reference operation
                                // ISSUE: variable of a reference type
                                __Null& local23 = @vector2_2.Y;
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                double num29 = (double) ^(float&) local23 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                ^(float&) local23 = (float) num29;
                                // ISSUE: explicit reference operation
                                // ISSUE: variable of a reference type
                                __Null& local24 = @vector2_2.X;
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                double num30 = (double) ^(float&) local24 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                ^(float&) local24 = (float) num30;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local25 = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num31 = (double) ^(float&) local25 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local25 = (float) num31;
        if (vector2_2.X > 1.0)
          vector2_2.X = (__Null) 1.0;
        if (vector2_2.X < -1.0)
          vector2_2.X = (__Null) -1.0;
        if (!noYChange)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          __Null& local1 = @vector2_2.Y;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          double num7 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(float&) local1 = (float) num7;
          if (vector2_2.Y > 1.0)
            vector2_2.Y = (__Null) 1.0;
          if (vector2_2.Y < -1.0)
            vector2_2.Y = (__Null) -1.0;
        }
        else if (type != 59 && num1 < 3.0)
        {
          if (vector2_2.Y > 1.0)
            vector2_2.Y = (__Null) 1.0;
          if (vector2_2.Y < -1.0)
            vector2_2.Y = (__Null) -1.0;
        }
        if (type == 59 && !noYChange)
        {
          if ((double) vector2_2.Y > 0.5)
            vector2_2.Y = (__Null) 0.5;
          if ((double) vector2_2.Y < -0.5)
            vector2_2.Y = (__Null) -0.5;
          if ((double) vector2_1.Y < Main.rockLayer + 100.0)
            vector2_2.Y = (__Null) 1.0;
          if (vector2_1.Y > (double) (Main.maxTilesY - 300))
            vector2_2.Y = (__Null) -1.0;
        }
      }
    }

    public static void DirtyRockRunner(int i, int j)
    {
      double num1 = (double) WorldGen.genRand.Next(2, 6);
      float num2 = (float) WorldGen.genRand.Next(5, 50);
      float num3 = num2;
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      while (num1 > 0.0 && (double) num3 > 0.0)
      {
        double num4 = num1 * ((double) num3 / (double) num2);
        --num3;
        int num5 = (int) ((double) vector2_1.X - num4 * 0.5);
        int num6 = (int) ((double) vector2_1.X + num4 * 0.5);
        int num7 = (int) ((double) vector2_1.Y - num4 * 0.5);
        int num8 = (int) ((double) vector2_1.Y + num4 * 0.5);
        if (num5 < 0)
          num5 = 0;
        if (num6 > Main.maxTilesX)
          num6 = Main.maxTilesX;
        if (num7 < 0)
          num7 = 0;
        if (num8 > Main.maxTilesY)
          num8 = Main.maxTilesY;
        for (int index1 = num5; index1 < num6; ++index1)
        {
          for (int index2 = num7; index2 < num8; ++index2)
          {
            if ((double) Math.Abs((float) index1 - (float) vector2_1.X) + (double) Math.Abs((float) index2 - (float) vector2_1.Y) < num1 * 0.5 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015) && (int) Main.tile[index1, index2].wall == 2)
              Main.tile[index1, index2].wall = (byte) 59;
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num9 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num9;
        if (vector2_2.X > 1.0)
          vector2_2.X = (__Null) 1.0;
        if (vector2_2.X < -1.0)
          vector2_2.X = (__Null) -1.0;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @vector2_2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num10 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local2 = (float) num10;
        if (vector2_2.Y > 1.0)
          vector2_2.Y = (__Null) 1.0;
        if (vector2_2.Y < -1.0)
          vector2_2.Y = (__Null) -1.0;
      }
    }

    public static void MudWallRunner(int i, int j)
    {
      double num1 = (double) WorldGen.genRand.Next(8, 21);
      float num2 = (float) WorldGen.genRand.Next(8, 33);
      float num3 = num2;
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      while (num1 > 0.0 && (double) num3 > 0.0)
      {
        double num4 = num1 * ((double) num3 / (double) num2);
        --num3;
        int num5 = (int) ((double) vector2_1.X - num4 * 0.5);
        int num6 = (int) ((double) vector2_1.X + num4 * 0.5);
        int num7 = (int) ((double) vector2_1.Y - num4 * 0.5);
        int num8 = (int) ((double) vector2_1.Y + num4 * 0.5);
        if (num5 < 0)
          num5 = 0;
        if (num6 > Main.maxTilesX)
          num6 = Main.maxTilesX;
        if (num7 < 0)
          num7 = 0;
        if (num8 > Main.maxTilesY)
          num8 = Main.maxTilesY;
        for (int index1 = num5; index1 < num6; ++index1)
        {
          for (int index2 = num7; index2 < num8; ++index2)
          {
            if ((double) Math.Abs((float) index1 - (float) vector2_1.X) + (double) Math.Abs((float) index2 - (float) vector2_1.Y) < num1 * 0.5 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.015) && (double) index2 > Main.worldSurface)
              Main.tile[index1, index2].wall = (byte) 0;
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num9 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num9;
        if (vector2_2.X > 1.0)
          vector2_2.X = (__Null) 1.0;
        if (vector2_2.X < -1.0)
          vector2_2.X = (__Null) -1.0;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @vector2_2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num10 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local2 = (float) num10;
        if (vector2_2.Y > 1.0)
          vector2_2.Y = (__Null) 1.0;
        if (vector2_2.Y < -1.0)
          vector2_2.Y = (__Null) -1.0;
      }
    }

    public static void CloudIsland(int i, int j)
    {
      double num1 = (double) WorldGen.genRand.Next(100, 150);
      double num2 = num1;
      float num3 = (float) WorldGen.genRand.Next(20, 30);
      int num4 = i;
      int num5 = i;
      int num6 = i;
      int num7 = j;
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-20, 21) * 0.200000002980232);
      while (vector2_2.X > -2.0 && vector2_2.X < 2.0)
        vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-20, 21) * 0.200000002980232);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-20, -10) * 0.0199999995529652);
      while (num1 > 0.0 && (double) num3 > 0.0)
      {
        num1 -= (double) WorldGen.genRand.Next(4);
        --num3;
        int num8 = (int) ((double) vector2_1.X - num1 * 0.5);
        int num9 = (int) ((double) vector2_1.X + num1 * 0.5);
        int num10 = (int) ((double) vector2_1.Y - num1 * 0.5);
        int num11 = (int) ((double) vector2_1.Y + num1 * 0.5);
        if (num8 < 0)
          num8 = 0;
        if (num9 > Main.maxTilesX)
          num9 = Main.maxTilesX;
        if (num10 < 0)
          num10 = 0;
        if (num11 > Main.maxTilesY)
          num11 = Main.maxTilesY;
        double num12 = num1 * (double) WorldGen.genRand.Next(80, 120) * 0.01;
        float num13 = (float) (vector2_1.Y + 1.0);
        for (int i1 = num8; i1 < num9; ++i1)
        {
          if (WorldGen.genRand.Next(2) == 0)
            num13 += (float) WorldGen.genRand.Next(-1, 2);
          if ((double) num13 < vector2_1.Y)
            num13 = (float) vector2_1.Y;
          if ((double) num13 > vector2_1.Y + 2.0)
            num13 = (float) (vector2_1.Y + 2.0);
          for (int j1 = num10; j1 < num11; ++j1)
          {
            if ((double) j1 > (double) num13)
            {
              double num14 = (double) Math.Abs((float) i1 - (float) vector2_1.X);
              float num15 = Math.Abs((float) j1 - (float) vector2_1.Y) * 3f;
              if (Math.Sqrt(num14 * num14 + (double) num15 * (double) num15) < num12 * 0.4)
              {
                if (i1 < num4)
                  num4 = i1;
                if (i1 > num5)
                  num5 = i1;
                if (j1 < num6)
                  num6 = j1;
                if (j1 > num7)
                  num7 = j1;
                Main.tile[i1, j1].active(true);
                Main.tile[i1, j1].type = (ushort) 189;
                WorldGen.SquareTileFrame(i1, j1, true);
              }
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num16 = (double) ^(float&) local + (double) WorldGen.genRand.Next(-20, 21) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local = (float) num16;
        if (vector2_2.X > 1.0)
          vector2_2.X = (__Null) 1.0;
        if (vector2_2.X < -1.0)
          vector2_2.X = (__Null) -1.0;
        if ((double) vector2_2.Y > 0.2)
          vector2_2.Y = (__Null) -0.200000002980232;
        if ((double) vector2_2.Y < -0.2)
          vector2_2.Y = (__Null) -0.200000002980232;
      }
      int index1 = num4 + WorldGen.genRand.Next(5);
      while (index1 < num5)
      {
        int index2 = num7;
        while (!Main.tile[index1, index2].active())
          --index2;
        int num8 = index2 + WorldGen.genRand.Next(-3, 4);
        int minValue = WorldGen.genRand.Next(4, 8);
        int num9 = 189;
        if (WorldGen.genRand.Next(4) == 0)
          num9 = 196;
        for (int i1 = index1 - minValue; i1 <= index1 + minValue; ++i1)
        {
          for (int j1 = num8 - minValue; j1 <= num8 + minValue; ++j1)
          {
            if (j1 > num6)
            {
              double num10 = (double) Math.Abs(i1 - index1);
              float num11 = (float) (Math.Abs(j1 - num8) * 2);
              if (Math.Sqrt(num10 * num10 + (double) num11 * (double) num11) < (double) (minValue + WorldGen.genRand.Next(2)))
              {
                Main.tile[i1, j1].active(true);
                Main.tile[i1, j1].type = (ushort) num9;
                WorldGen.SquareTileFrame(i1, j1, true);
              }
            }
          }
        }
        index1 += WorldGen.genRand.Next(minValue, (int) ((double) minValue * 1.5));
      }
      double num17 = (double) WorldGen.genRand.Next(80, 95);
      num2 = num17;
      float num18 = (float) WorldGen.genRand.Next(10, 15);
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) num6;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-20, 21) * 0.200000002980232);
      while (vector2_2.X > -2.0 && vector2_2.X < 2.0)
        vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-20, 21) * 0.200000002980232);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-20, -10) * 0.0199999995529652);
      while (num17 > 0.0 && (double) num18 > 0.0)
      {
        num17 -= (double) WorldGen.genRand.Next(4);
        --num18;
        int num8 = (int) ((double) vector2_1.X - num17 * 0.5);
        int num9 = (int) ((double) vector2_1.X + num17 * 0.5);
        int num10 = num6 - 1;
        int num11 = (int) ((double) vector2_1.Y + num17 * 0.5);
        if (num8 < 0)
          num8 = 0;
        if (num9 > Main.maxTilesX)
          num9 = Main.maxTilesX;
        if (num10 < 0)
          num10 = 0;
        if (num11 > Main.maxTilesY)
          num11 = Main.maxTilesY;
        double num12 = num17 * (double) WorldGen.genRand.Next(80, 120) * 0.01;
        float num13 = (float) (vector2_1.Y + 1.0);
        for (int i1 = num8; i1 < num9; ++i1)
        {
          if (WorldGen.genRand.Next(2) == 0)
            num13 += (float) WorldGen.genRand.Next(-1, 2);
          if ((double) num13 < vector2_1.Y)
            num13 = (float) vector2_1.Y;
          if ((double) num13 > vector2_1.Y + 2.0)
            num13 = (float) (vector2_1.Y + 2.0);
          for (int j1 = num10; j1 < num11; ++j1)
          {
            if ((double) j1 > (double) num13)
            {
              double num14 = (double) Math.Abs((float) i1 - (float) vector2_1.X);
              float num15 = Math.Abs((float) j1 - (float) vector2_1.Y) * 3f;
              if (Math.Sqrt(num14 * num14 + (double) num15 * (double) num15) < num12 * 0.4 && (int) Main.tile[i1, j1].type == 189)
              {
                Main.tile[i1, j1].type = (ushort) 0;
                WorldGen.SquareTileFrame(i1, j1, true);
              }
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num16 = (double) ^(float&) local + (double) WorldGen.genRand.Next(-20, 21) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local = (float) num16;
        if (vector2_2.X > 1.0)
          vector2_2.X = (__Null) 1.0;
        if (vector2_2.X < -1.0)
          vector2_2.X = (__Null) -1.0;
        if ((double) vector2_2.Y > 0.2)
          vector2_2.Y = (__Null) -0.200000002980232;
        if ((double) vector2_2.Y < -0.2)
          vector2_2.Y = (__Null) -0.200000002980232;
      }
      int index3 = num4 + WorldGen.genRand.Next(5);
      while (index3 < num5)
      {
        int index2 = num7;
        while ((!Main.tile[index3, index2].active() || (int) Main.tile[index3, index2].type != 0) && index3 < num5)
        {
          --index2;
          if (index2 < num6)
          {
            index2 = num7;
            index3 += WorldGen.genRand.Next(1, 4);
          }
        }
        if (index3 < num5)
        {
          int num8 = index2 + WorldGen.genRand.Next(0, 4);
          int minValue = WorldGen.genRand.Next(2, 5);
          int num9 = 189;
          for (int i1 = index3 - minValue; i1 <= index3 + minValue; ++i1)
          {
            for (int j1 = num8 - minValue; j1 <= num8 + minValue; ++j1)
            {
              if (j1 > num6)
              {
                double num10 = (double) Math.Abs(i1 - index3);
                float num11 = (float) (Math.Abs(j1 - num8) * 2);
                if (Math.Sqrt(num10 * num10 + (double) num11 * (double) num11) < (double) minValue)
                {
                  Main.tile[i1, j1].type = (ushort) num9;
                  WorldGen.SquareTileFrame(i1, j1, true);
                }
              }
            }
          }
          index3 += WorldGen.genRand.Next(minValue, (int) ((double) minValue * 1.5));
        }
      }
      for (int i1 = num4 - 20; i1 <= num5 + 20; ++i1)
      {
        for (int j1 = num6 - 20; j1 <= num7 + 20; ++j1)
        {
          bool flag = true;
          for (int index2 = i1 - 1; index2 <= i1 + 1; ++index2)
          {
            for (int index4 = j1 - 1; index4 <= j1 + 1; ++index4)
            {
              if (!Main.tile[index2, index4].active())
                flag = false;
            }
          }
          if (flag)
          {
            Main.tile[i1, j1].wall = (byte) 73;
            WorldGen.SquareWallFrame(i1, j1, true);
          }
        }
      }
      for (int i1 = num4; i1 <= num5; ++i1)
      {
        int j1 = num6 - 10;
        while (!Main.tile[i1, j1 + 1].active())
          ++j1;
        if (j1 < num7 && (int) Main.tile[i1, j1 + 1].type == 189)
        {
          if (WorldGen.genRand.Next(10) == 0)
          {
            int num8 = WorldGen.genRand.Next(1, 3);
            for (int index2 = i1 - num8; index2 <= i1 + num8; ++index2)
            {
              if ((int) Main.tile[index2, j1].type == 189)
              {
                Main.tile[index2, j1].active(false);
                Main.tile[index2, j1].liquid = byte.MaxValue;
                Main.tile[index2, j1].lava(false);
                WorldGen.SquareTileFrame(i1, j1, true);
              }
              if ((int) Main.tile[index2, j1 + 1].type == 189)
              {
                Main.tile[index2, j1 + 1].active(false);
                Main.tile[index2, j1 + 1].liquid = byte.MaxValue;
                Main.tile[index2, j1 + 1].lava(false);
                WorldGen.SquareTileFrame(i1, j1 + 1, true);
              }
              if (index2 > i1 - num8 && index2 < i1 + 2 && (int) Main.tile[index2, j1 + 2].type == 189)
              {
                Main.tile[index2, j1 + 2].active(false);
                Main.tile[index2, j1 + 2].liquid = byte.MaxValue;
                Main.tile[index2, j1 + 2].lava(false);
                WorldGen.SquareTileFrame(i1, j1 + 2, true);
              }
            }
          }
          if (WorldGen.genRand.Next(5) == 0)
            Main.tile[i1, j1].liquid = byte.MaxValue;
          Main.tile[i1, j1].lava(false);
          WorldGen.SquareTileFrame(i1, j1, true);
        }
      }
      int num19 = WorldGen.genRand.Next(4);
      for (int index2 = 0; index2 <= num19; ++index2)
      {
        int num8 = WorldGen.genRand.Next(num4 - 5, num5 + 5);
        int num9 = num6 - WorldGen.genRand.Next(20, 40);
        int num10 = WorldGen.genRand.Next(4, 8);
        int num11 = 189;
        if (WorldGen.genRand.Next(2) == 0)
          num11 = 196;
        for (int i1 = num8 - num10; i1 <= num8 + num10; ++i1)
        {
          for (int j1 = num9 - num10; j1 <= num9 + num10; ++j1)
          {
            double num12 = (double) Math.Abs(i1 - num8);
            float num13 = (float) (Math.Abs(j1 - num9) * 2);
            if (Math.Sqrt(num12 * num12 + (double) num13 * (double) num13) < (double) (num10 + WorldGen.genRand.Next(-1, 2)))
            {
              Main.tile[i1, j1].active(true);
              Main.tile[i1, j1].type = (ushort) num11;
              WorldGen.SquareTileFrame(i1, j1, true);
            }
          }
        }
        for (int i1 = num8 - num10 + 2; i1 <= num8 + num10 - 2; ++i1)
        {
          int j1 = num9 - num10;
          while (!Main.tile[i1, j1].active())
            ++j1;
          Main.tile[i1, j1].active(false);
          Main.tile[i1, j1].liquid = byte.MaxValue;
          WorldGen.SquareTileFrame(i1, j1, true);
        }
      }
    }

    public static void CloudLake(int i, int j)
    {
      double num1 = (double) WorldGen.genRand.Next(100, 150);
      double num2 = num1;
      float num3 = (float) WorldGen.genRand.Next(20, 30);
      int num4 = i;
      int num5 = i;
      int num6 = i;
      int num7 = j;
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-20, 21) * 0.200000002980232);
      while (vector2_2.X > -2.0 && vector2_2.X < 2.0)
        vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-20, 21) * 0.200000002980232);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-20, -10) * 0.0199999995529652);
      while (num1 > 0.0 && (double) num3 > 0.0)
      {
        num1 -= (double) WorldGen.genRand.Next(4);
        --num3;
        int num8 = (int) ((double) vector2_1.X - num1 * 0.5);
        int num9 = (int) ((double) vector2_1.X + num1 * 0.5);
        int num10 = (int) ((double) vector2_1.Y - num1 * 0.5);
        int num11 = (int) ((double) vector2_1.Y + num1 * 0.5);
        if (num8 < 0)
          num8 = 0;
        if (num9 > Main.maxTilesX)
          num9 = Main.maxTilesX;
        if (num10 < 0)
          num10 = 0;
        if (num11 > Main.maxTilesY)
          num11 = Main.maxTilesY;
        double num12 = num1 * (double) WorldGen.genRand.Next(80, 120) * 0.01;
        float num13 = (float) (vector2_1.Y + 1.0);
        for (int i1 = num8; i1 < num9; ++i1)
        {
          if (WorldGen.genRand.Next(2) == 0)
            num13 += (float) WorldGen.genRand.Next(-1, 2);
          if ((double) num13 < vector2_1.Y)
            num13 = (float) vector2_1.Y;
          if ((double) num13 > vector2_1.Y + 2.0)
            num13 = (float) (vector2_1.Y + 2.0);
          for (int j1 = num10; j1 < num11; ++j1)
          {
            if ((double) j1 > (double) num13)
            {
              double num14 = (double) Math.Abs((float) i1 - (float) vector2_1.X);
              float num15 = Math.Abs((float) j1 - (float) vector2_1.Y) * 3f;
              if (Math.Sqrt(num14 * num14 + (double) num15 * (double) num15) < num12 * 0.4)
              {
                if (i1 < num4)
                  num4 = i1;
                if (i1 > num5)
                  num5 = i1;
                if (j1 < num6)
                  num6 = j1;
                if (j1 > num7)
                  num7 = j1;
                Main.tile[i1, j1].active(true);
                Main.tile[i1, j1].type = (ushort) 189;
                WorldGen.SquareTileFrame(i1, j1, true);
              }
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num16 = (double) ^(float&) local + (double) WorldGen.genRand.Next(-20, 21) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local = (float) num16;
        if (vector2_2.X > 1.0)
          vector2_2.X = (__Null) 1.0;
        if (vector2_2.X < -1.0)
          vector2_2.X = (__Null) -1.0;
        if ((double) vector2_2.Y > 0.2)
          vector2_2.Y = (__Null) -0.200000002980232;
        if ((double) vector2_2.Y < -0.2)
          vector2_2.Y = (__Null) -0.200000002980232;
      }
      int index1 = num4 + WorldGen.genRand.Next(5);
      while (index1 < num5)
      {
        int index2 = num7;
        while (!Main.tile[index1, index2].active())
          --index2;
        int num8 = index2 + WorldGen.genRand.Next(-3, 4);
        int minValue = WorldGen.genRand.Next(4, 8);
        int num9 = 189;
        if (WorldGen.genRand.Next(4) == 0)
          num9 = 196;
        for (int i1 = index1 - minValue; i1 <= index1 + minValue; ++i1)
        {
          for (int j1 = num8 - minValue; j1 <= num8 + minValue; ++j1)
          {
            if (j1 > num6)
            {
              double num10 = (double) Math.Abs(i1 - index1);
              float num11 = (float) (Math.Abs(j1 - num8) * 2);
              if (Math.Sqrt(num10 * num10 + (double) num11 * (double) num11) < (double) (minValue + WorldGen.genRand.Next(2)))
              {
                Main.tile[i1, j1].active(true);
                Main.tile[i1, j1].type = (ushort) num9;
                WorldGen.SquareTileFrame(i1, j1, true);
              }
            }
          }
        }
        index1 += WorldGen.genRand.Next(minValue, (int) ((double) minValue * 1.5));
      }
      double num17 = (double) WorldGen.genRand.Next(80, 95);
      num2 = num17;
      float num18 = (float) WorldGen.genRand.Next(10, 15);
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) num6;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-20, 21) * 0.200000002980232);
      while (vector2_2.X > -2.0 && vector2_2.X < 2.0)
        vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-20, 21) * 0.200000002980232);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-20, -10) * 0.0199999995529652);
      while (num17 > 0.0 && (double) num18 > 0.0)
      {
        num17 -= (double) WorldGen.genRand.Next(4);
        --num18;
        int num8 = (int) ((double) vector2_1.X - num17 * 0.5);
        int num9 = (int) ((double) vector2_1.X + num17 * 0.5);
        int num10 = num6 - 1;
        int num11 = (int) ((double) vector2_1.Y + num17 * 0.5);
        if (num8 < 0)
          num8 = 0;
        if (num9 > Main.maxTilesX)
          num9 = Main.maxTilesX;
        if (num10 < 0)
          num10 = 0;
        if (num11 > Main.maxTilesY)
          num11 = Main.maxTilesY;
        double num12 = num17 * (double) WorldGen.genRand.Next(80, 120) * 0.01;
        float num13 = (float) (vector2_1.Y + 1.0);
        for (int index2 = num8; index2 < num9; ++index2)
        {
          if (WorldGen.genRand.Next(2) == 0)
            num13 += (float) WorldGen.genRand.Next(-1, 2);
          if ((double) num13 < vector2_1.Y)
            num13 = (float) vector2_1.Y;
          if ((double) num13 > vector2_1.Y + 2.0)
            num13 = (float) (vector2_1.Y + 2.0);
          for (int index3 = num10; index3 < num11; ++index3)
          {
            if ((double) index3 > (double) num13)
            {
              double num14 = (double) Math.Abs((float) index2 - (float) vector2_1.X);
              float num15 = Math.Abs((float) index3 - (float) vector2_1.Y) * 3f;
              if (Math.Sqrt(num14 * num14 + (double) num15 * (double) num15) < num12 * 0.4 && (int) Main.tile[index2, index3].type == 189)
              {
                Main.tile[index2, index3].active(false);
                Main.tile[index2, index3].liquid = byte.MaxValue;
                Main.tile[index2, index3].honey(false);
                Main.tile[index2, index3].lava(false);
              }
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num16 = (double) ^(float&) local + (double) WorldGen.genRand.Next(-20, 21) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local = (float) num16;
        if (vector2_2.X > 1.0)
          vector2_2.X = (__Null) 1.0;
        if (vector2_2.X < -1.0)
          vector2_2.X = (__Null) -1.0;
        if ((double) vector2_2.Y > 0.2)
          vector2_2.Y = (__Null) -0.200000002980232;
        if ((double) vector2_2.Y < -0.2)
          vector2_2.Y = (__Null) -0.200000002980232;
      }
      for (int index2 = num4 - 20; index2 <= num5 + 20; ++index2)
      {
        for (int index3 = num6 - 20; index3 <= num7 + 20; ++index3)
        {
          bool flag = true;
          for (int index4 = index2 - 1; index4 <= index2 + 1; ++index4)
          {
            for (int index5 = index3 - 1; index5 <= index3 + 1; ++index5)
            {
              if (!Main.tile[index4, index5].active())
                flag = false;
            }
          }
          if (flag)
            Main.tile[index2, index3].wall = (byte) 73;
        }
      }
      for (int i1 = num4; i1 <= num5; ++i1)
      {
        int j1 = num6 - 10;
        while (!Main.tile[i1, j1 + 1].active())
          ++j1;
        if (j1 < num7 && (int) Main.tile[i1, j1 + 1].type == 189)
        {
          if (WorldGen.genRand.Next(10) == 0)
          {
            int num8 = WorldGen.genRand.Next(1, 3);
            for (int index2 = i1 - num8; index2 <= i1 + num8; ++index2)
            {
              if ((int) Main.tile[index2, j1].type == 189)
              {
                Main.tile[index2, j1].active(false);
                Main.tile[index2, j1].liquid = byte.MaxValue;
                Main.tile[index2, j1].lava(false);
                WorldGen.SquareTileFrame(i1, j1, true);
              }
              if ((int) Main.tile[index2, j1 + 1].type == 189)
              {
                Main.tile[index2, j1 + 1].active(false);
                Main.tile[index2, j1 + 1].liquid = byte.MaxValue;
                Main.tile[index2, j1 + 1].lava(false);
                WorldGen.SquareTileFrame(i1, j1 + 1, true);
              }
              if (index2 > i1 - num8 && index2 < i1 + 2 && (int) Main.tile[index2, j1 + 2].type == 189)
              {
                Main.tile[index2, j1 + 2].active(false);
                Main.tile[index2, j1 + 2].liquid = byte.MaxValue;
                Main.tile[index2, j1 + 2].lava(false);
                WorldGen.SquareTileFrame(i1, j1 + 2, true);
              }
            }
          }
          if (WorldGen.genRand.Next(5) == 0)
            Main.tile[i1, j1].liquid = byte.MaxValue;
          Main.tile[i1, j1].lava(false);
          WorldGen.SquareTileFrame(i1, j1, true);
        }
      }
      int num19 = WorldGen.genRand.Next(1, 4);
      for (int index2 = 0; index2 <= num19; ++index2)
      {
        int num8 = WorldGen.genRand.Next(num4 - 5, num5 + 5);
        int num9 = num6 - WorldGen.genRand.Next(20, 40);
        int num10 = WorldGen.genRand.Next(4, 8);
        int num11 = 189;
        if (WorldGen.genRand.Next(4) != 0)
          num11 = 196;
        for (int i1 = num8 - num10; i1 <= num8 + num10; ++i1)
        {
          for (int j1 = num9 - num10; j1 <= num9 + num10; ++j1)
          {
            double num12 = (double) Math.Abs(i1 - num8);
            float num13 = (float) (Math.Abs(j1 - num9) * 2);
            if (Math.Sqrt(num12 * num12 + (double) num13 * (double) num13) < (double) (num10 + WorldGen.genRand.Next(-1, 2)))
            {
              Main.tile[i1, j1].active(true);
              Main.tile[i1, j1].type = (ushort) num11;
              WorldGen.SquareTileFrame(i1, j1, true);
            }
          }
        }
        for (int i1 = num8 - num10 + 2; i1 <= num8 + num10 - 2; ++i1)
        {
          int j1 = num9 - num10;
          while (!Main.tile[i1, j1].active())
            ++j1;
          Main.tile[i1, j1].active(false);
          Main.tile[i1, j1].liquid = byte.MaxValue;
          WorldGen.SquareTileFrame(i1, j1, true);
        }
      }
    }

    public static void FloatingIsland(int i, int j)
    {
      double num1 = (double) WorldGen.genRand.Next(80, 120);
      float num2 = (float) WorldGen.genRand.Next(20, 25);
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-20, 21) * 0.200000002980232);
      while (vector2_2.X > -2.0 && vector2_2.X < 2.0)
        vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-20, 21) * 0.200000002980232);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-20, -10) * 0.0199999995529652);
      while (num1 > 0.0 && (double) num2 > 0.0)
      {
        num1 -= (double) WorldGen.genRand.Next(4);
        --num2;
        int num3 = (int) ((double) vector2_1.X - num1 * 0.5);
        int num4 = (int) ((double) vector2_1.X + num1 * 0.5);
        int num5 = (int) ((double) vector2_1.Y - num1 * 0.5);
        int num6 = (int) ((double) vector2_1.Y + num1 * 0.5);
        if (num3 < 0)
          num3 = 0;
        if (num4 > Main.maxTilesX)
          num4 = Main.maxTilesX;
        if (num5 < 0)
          num5 = 0;
        if (num6 > Main.maxTilesY)
          num6 = Main.maxTilesY;
        double num7 = num1 * (double) WorldGen.genRand.Next(80, 120) * 0.01;
        float num8 = (float) (vector2_1.Y + 1.0);
        for (int index1 = num3; index1 < num4; ++index1)
        {
          if (WorldGen.genRand.Next(2) == 0)
            num8 += (float) WorldGen.genRand.Next(-1, 2);
          if ((double) num8 < vector2_1.Y)
            num8 = (float) vector2_1.Y;
          if ((double) num8 > vector2_1.Y + 2.0)
            num8 = (float) (vector2_1.Y + 2.0);
          for (int index2 = num5; index2 < num6; ++index2)
          {
            if ((double) index2 > (double) num8)
            {
              double num9 = (double) Math.Abs((float) index1 - (float) vector2_1.X);
              float num10 = Math.Abs((float) index2 - (float) vector2_1.Y) * 2f;
              if (Math.Sqrt(num9 * num9 + (double) num10 * (double) num10) < num7 * 0.4)
              {
                Main.tile[index1, index2].active(true);
                if ((int) Main.tile[index1, index2].type == 59)
                  Main.tile[index1, index2].type = (ushort) 0;
              }
            }
          }
        }
        int num11 = (int) ((double) vector2_1.X - num1 * 0.4);
        int num12 = (int) ((double) vector2_1.X + num1 * 0.4);
        int num13 = (int) ((double) vector2_1.Y - num1 * 0.4);
        int num14 = (int) ((double) vector2_1.Y + num1 * 0.4);
        if (num11 < 0)
          num11 = 0;
        if (num12 > Main.maxTilesX)
          num12 = Main.maxTilesX;
        if (num13 < 0)
          num13 = 0;
        if (num14 > Main.maxTilesY)
          num14 = Main.maxTilesY;
        double num15 = num1 * (double) WorldGen.genRand.Next(80, 120) * 0.01;
        for (int index1 = num11; index1 < num12; ++index1)
        {
          for (int index2 = num13; index2 < num14; ++index2)
          {
            if ((double) index2 > vector2_1.Y + 2.0)
            {
              double num9 = (double) Math.Abs((float) index1 - (float) vector2_1.X);
              float num10 = Math.Abs((float) index2 - (float) vector2_1.Y) * 2f;
              if (Math.Sqrt(num9 * num9 + (double) num10 * (double) num10) < num15 * 0.4)
                Main.tile[index1, index2].wall = (byte) 2;
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local = @vector2_2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num16 = (double) ^(float&) local + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local = (float) num16;
        if (vector2_2.X > 1.0)
          vector2_2.X = (__Null) 1.0;
        if (vector2_2.X < -1.0)
          vector2_2.X = (__Null) -1.0;
        if ((double) vector2_2.Y > 0.2)
          vector2_2.Y = (__Null) -0.200000002980232;
        if ((double) vector2_2.Y < -0.2)
          vector2_2.Y = (__Null) -0.200000002980232;
      }
    }

    public static void Caverer(int X, int Y)
    {
      switch (WorldGen.genRand.Next(2))
      {
        case 0:
          int num1 = WorldGen.genRand.Next(7, 9);
          float xDir1 = (float) WorldGen.genRand.Next(100) * 0.01f;
          float yDir1 = 1f - xDir1;
          if (WorldGen.genRand.Next(2) == 0)
            xDir1 = -xDir1;
          if (WorldGen.genRand.Next(2) == 0)
            yDir1 = -yDir1;
          Vector2 vector2_1;
          // ISSUE: explicit reference operation
          ((Vector2) @vector2_1).\u002Ector((float) X, (float) Y);
          for (int index = 0; index < num1; ++index)
          {
            vector2_1 = WorldGen.digTunnel((float) vector2_1.X, (float) vector2_1.Y, xDir1, yDir1, WorldGen.genRand.Next(6, 20), WorldGen.genRand.Next(4, 9), false);
            xDir1 += (float) WorldGen.genRand.Next(-20, 21) * 0.1f;
            yDir1 += (float) WorldGen.genRand.Next(-20, 21) * 0.1f;
            if ((double) xDir1 < -1.5)
              xDir1 = -1.5f;
            if ((double) xDir1 > 1.5)
              xDir1 = 1.5f;
            if ((double) yDir1 < -1.5)
              yDir1 = -1.5f;
            if ((double) yDir1 > 1.5)
              yDir1 = 1.5f;
            float xDir2 = (float) WorldGen.genRand.Next(100) * 0.01f;
            float yDir2 = 1f - xDir2;
            if (WorldGen.genRand.Next(2) == 0)
              xDir2 = -xDir2;
            if (WorldGen.genRand.Next(2) == 0)
              yDir2 = -yDir2;
            Vector2 vector2_2 = WorldGen.digTunnel((float) vector2_1.X, (float) vector2_1.Y, xDir2, yDir2, WorldGen.genRand.Next(30, 50), WorldGen.genRand.Next(3, 6), false);
            WorldGen.TileRunner((int) vector2_2.X, (int) vector2_2.Y, (double) WorldGen.genRand.Next(10, 20), WorldGen.genRand.Next(5, 10), -1, false, 0.0f, 0.0f, false, true);
          }
          break;
        case 1:
          int num2 = WorldGen.genRand.Next(15, 30);
          float xDir3 = (float) WorldGen.genRand.Next(100) * 0.01f;
          float yDir3 = 1f - xDir3;
          if (WorldGen.genRand.Next(2) == 0)
            xDir3 = -xDir3;
          if (WorldGen.genRand.Next(2) == 0)
            yDir3 = -yDir3;
          Vector2 vector2_3;
          // ISSUE: explicit reference operation
          ((Vector2) @vector2_3).\u002Ector((float) X, (float) Y);
          for (int index = 0; index < num2; ++index)
          {
            vector2_3 = WorldGen.digTunnel((float) vector2_3.X, (float) vector2_3.Y, xDir3, yDir3, WorldGen.genRand.Next(5, 15), WorldGen.genRand.Next(2, 6), true);
            xDir3 += (float) WorldGen.genRand.Next(-20, 21) * 0.1f;
            yDir3 += (float) WorldGen.genRand.Next(-20, 21) * 0.1f;
            if ((double) xDir3 < -1.5)
              xDir3 = -1.5f;
            if ((double) xDir3 > 1.5)
              xDir3 = 1.5f;
            if ((double) yDir3 < -1.5)
              yDir3 = -1.5f;
            if ((double) yDir3 > 1.5)
              yDir3 = 1.5f;
          }
          break;
      }
    }

    public static Vector2 digTunnel(float X, float Y, float xDir, float yDir, int Steps, int Size, bool Wet = false)
    {
      float num1 = X;
      float num2 = Y;
      try
      {
        float num3 = 0.0f;
        float num4 = 0.0f;
        int num5 = Steps;
        float num6 = (float) Size;
        num1 = MathHelper.Clamp(num1, num6 + 1f, (float) ((double) Main.maxTilesX - (double) num6 - 1.0));
        num2 = MathHelper.Clamp(num2, num6 + 1f, (float) ((double) Main.maxTilesY - (double) num6 - 1.0));
        for (int index1 = 0; index1 < num5; ++index1)
        {
          for (int index2 = (int) ((double) num1 - (double) num6); (double) index2 <= (double) num1 + (double) num6; ++index2)
          {
            for (int index3 = (int) ((double) num2 - (double) num6); (double) index3 <= (double) num2 + (double) num6; ++index3)
            {
              if ((double) Math.Abs((float) index2 - num1) + (double) Math.Abs((float) index3 - num2) < (double) num6 * (1.0 + (double) WorldGen.genRand.Next(-10, 11) * 0.005) && index2 >= 0 && (index2 < Main.maxTilesX && index3 >= 0) && index3 < Main.maxTilesY)
              {
                Main.tile[index2, index3].active(false);
                if (Wet)
                  Main.tile[index2, index3].liquid = byte.MaxValue;
              }
            }
          }
          num6 += (float) WorldGen.genRand.Next(-50, 51) * 0.03f;
          if ((double) num6 < (double) Size * 0.6)
            num6 = (float) Size * 0.6f;
          if ((double) num6 > (double) (Size * 2))
            num6 = (float) Size * 2f;
          num3 += (float) WorldGen.genRand.Next(-20, 21) * 0.01f;
          num4 += (float) WorldGen.genRand.Next(-20, 21) * 0.01f;
          if ((double) num3 < -1.0)
            num3 = -1f;
          if ((double) num3 > 1.0)
            num3 = 1f;
          if ((double) num4 < -1.0)
            num4 = -1f;
          if ((double) num4 > 1.0)
            num4 = 1f;
          num1 += (float) (((double) xDir + (double) num3) * 0.600000023841858);
          num2 += (float) (((double) yDir + (double) num4) * 0.600000023841858);
        }
      }
      catch
      {
      }
      return new Vector2(num1, num2);
    }

    public static void IslandHouse(int i, int j)
    {
      byte num1 = 202;
      byte num2 = 82;
      Vector2 vector2;
      // ISSUE: explicit reference operation
      ((Vector2) @vector2).\u002Ector((float) i, (float) j);
      int num3 = 1;
      if (WorldGen.genRand.Next(2) == 0)
        num3 = -1;
      int num4 = WorldGen.genRand.Next(7, 12);
      int num5 = WorldGen.genRand.Next(5, 7);
      vector2.X = (__Null) (double) (i + (num4 + 2) * num3);
      for (int index = j - 15; index < j + 30; ++index)
      {
        if (Main.tile[(int) vector2.X, index].active())
        {
          vector2.Y = (__Null) (double) (index - 1);
          break;
        }
      }
      vector2.X = (__Null) (double) i;
      int num6 = (int) (vector2.X - (double) num4 - 1.0);
      int num7 = (int) (vector2.X + (double) num4 + 1.0);
      int num8 = (int) (vector2.Y - (double) num5 - 1.0);
      int num9 = (int) (vector2.Y + 2.0);
      if (num6 < 0)
        num6 = 0;
      if (num7 > Main.maxTilesX)
        num7 = Main.maxTilesX;
      if (num8 < 0)
        num8 = 0;
      if (num9 > Main.maxTilesY)
        num9 = Main.maxTilesY;
      for (int index1 = num6; index1 <= num7; ++index1)
      {
        for (int index2 = num8 - 1; index2 < num9 + 1; ++index2)
        {
          if (index2 != num8 - 1 || index1 != num6 && index1 != num7)
          {
            Main.tile[index1, index2].active(true);
            Main.tile[index1, index2].liquid = (byte) 0;
            Main.tile[index1, index2].type = (ushort) num1;
            Main.tile[index1, index2].wall = (byte) 0;
            Main.tile[index1, index2].halfBrick(false);
            Main.tile[index1, index2].slope((byte) 0);
          }
        }
      }
      int num10 = (int) (vector2.X - (double) num4);
      int num11 = (int) (vector2.X + (double) num4);
      int j1 = (int) (vector2.Y - (double) num5);
      int num12 = (int) (vector2.Y + 1.0);
      if (num10 < 0)
        num10 = 0;
      if (num11 > Main.maxTilesX)
        num11 = Main.maxTilesX;
      if (j1 < 0)
        j1 = 0;
      if (num12 > Main.maxTilesY)
        num12 = Main.maxTilesY;
      for (int index1 = num10; index1 <= num11; ++index1)
      {
        for (int index2 = j1; index2 < num12; ++index2)
        {
          if ((index2 != j1 || index1 != num10 && index1 != num11) && (int) Main.tile[index1, index2].wall == 0)
          {
            Main.tile[index1, index2].active(false);
            Main.tile[index1, index2].wall = num2;
          }
        }
      }
      int i1 = i + (num4 + 1) * num3;
      int y = (int) vector2.Y;
      for (int index = i1 - 2; index <= i1 + 2; ++index)
      {
        Main.tile[index, y].active(false);
        Main.tile[index, y - 1].active(false);
        Main.tile[index, y - 2].active(false);
      }
      WorldGen.PlaceTile(i1, y, 10, true, false, -1, 9);
      int index3 = i + (num4 + 1) * -num3 - num3;
      for (int index1 = j1; index1 <= num12 + 1; ++index1)
      {
        Main.tile[index3, index1].active(true);
        Main.tile[index3, index1].liquid = (byte) 0;
        Main.tile[index3, index1].type = (ushort) num1;
        Main.tile[index3, index1].wall = (byte) 0;
        Main.tile[index3, index1].halfBrick(false);
        Main.tile[index3, index1].slope((byte) 0);
      }
      int contain = 0;
      int num13 = WorldGen.houseCount;
      if (num13 > 2)
        num13 = WorldGen.genRand.Next(3);
      if (num13 == 0)
        contain = 159;
      else if (num13 == 1)
        contain = 65;
      else if (num13 == 2)
        contain = 158;
      WorldGen.AddBuriedChest(i, y - 3, contain, false, 13);
      ++WorldGen.houseCount;
      int num14 = i - num4 / 2 + 1;
      int num15 = i + num4 / 2 - 1;
      int num16 = 1;
      if (num4 > 10)
        num16 = 2;
      int num17 = (j1 + num12) / 2 - 1;
      for (int index1 = num14 - num16; index1 <= num14 + num16; ++index1)
      {
        for (int index2 = num17 - 1; index2 <= num17 + 1; ++index2)
          Main.tile[index1, index2].wall = (byte) 21;
      }
      for (int index1 = num15 - num16; index1 <= num15 + num16; ++index1)
      {
        for (int index2 = num17 - 1; index2 <= num17 + 1; ++index2)
          Main.tile[index1, index2].wall = (byte) 21;
      }
      int i2 = i + (num4 / 2 + 1) * -num3;
      WorldGen.PlaceTile(i2, num12 - 1, 14, true, false, -1, 7);
      WorldGen.PlaceTile(i2 - 2, num12 - 1, 15, true, false, 0, 10);
      Main.tile[i2 - 2, num12 - 1].frameX += (short) 18;
      Main.tile[i2 - 2, num12 - 2].frameX += (short) 18;
      WorldGen.PlaceTile(i2 + 2, num12 - 1, 15, true, false, 0, 10);
      WorldGen.PlaceTile(num10 + 1, j1, 91, true, false, -1, WorldGen.genRand.Next(7, 10));
      WorldGen.PlaceTile(num11 - 1, j1, 91, true, false, -1, WorldGen.genRand.Next(7, 10));
      int i3;
      int j2;
      if (num3 > 0)
      {
        i3 = num10;
        j2 = j1 + 1;
      }
      else
      {
        i3 = num11;
        j2 = j1 + 1;
      }
      WorldGen.PlaceTile(i3, j2, 91, true, false, -1, WorldGen.genRand.Next(7, 10));
    }

    public static void Mountinater(int i, int j)
    {
      double num1 = (double) WorldGen.genRand.Next(80, 120);
      float num2 = (float) WorldGen.genRand.Next(40, 55);
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) ((double) j + (double) num2 / 2.0);
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-20, -10) * 0.100000001490116);
      while (num1 > 0.0 && (double) num2 > 0.0)
      {
        num1 -= (double) WorldGen.genRand.Next(4);
        --num2;
        int num3 = (int) ((double) vector2_1.X - num1 * 0.5);
        int num4 = (int) ((double) vector2_1.X + num1 * 0.5);
        int num5 = (int) ((double) vector2_1.Y - num1 * 0.5);
        int num6 = (int) ((double) vector2_1.Y + num1 * 0.5);
        if (num3 < 0)
          num3 = 0;
        if (num4 > Main.maxTilesX)
          num4 = Main.maxTilesX;
        if (num5 < 0)
          num5 = 0;
        if (num6 > Main.maxTilesY)
          num6 = Main.maxTilesY;
        double num7 = num1 * (double) WorldGen.genRand.Next(80, 120) * 0.01;
        for (int index1 = num3; index1 < num4; ++index1)
        {
          for (int index2 = num5; index2 < num6; ++index2)
          {
            double num8 = (double) Math.Abs((float) index1 - (float) vector2_1.X);
            float num9 = Math.Abs((float) index2 - (float) vector2_1.Y);
            if (Math.Sqrt(num8 * num8 + (double) num9 * (double) num9) < num7 * 0.4 && !Main.tile[index1, index2].active())
            {
              Main.tile[index1, index2].active(true);
              Main.tile[index1, index2].type = (ushort) 0;
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num10 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num10;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @vector2_2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num11 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local2 = (float) num11;
        if ((double) vector2_2.X > 0.5)
          vector2_2.X = (__Null) 0.5;
        if ((double) vector2_2.X < -0.5)
          vector2_2.X = (__Null) -0.5;
        if ((double) vector2_2.Y > -0.5)
          vector2_2.Y = (__Null) -0.5;
        if ((double) vector2_2.Y < -1.5)
          vector2_2.Y = (__Null) -1.5;
      }
    }

    public static void MakeWateryIceThing(int i, int j)
    {
      if ((int) Main.tile[i, j].liquid <= 0 || Main.tile[i, j].active() || Main.tile[i, j].lava())
        return;
      int index1 = j;
      while (!Main.tile[i, index1].active() && (int) Main.tile[i, index1].liquid > 0)
      {
        ++index1;
        if (index1 > Main.maxTilesY - 50)
          return;
      }
      if ((int) Main.tile[i, index1].type != 147 && (int) Main.tile[i, index1].type != 161)
        return;
      int index2 = index1 - 1;
      while ((int) Main.tile[i, index2].liquid > 0)
      {
        --index2;
        if (index2 < 10)
          return;
      }
      if (Main.tile[i, index2].active())
        return;
      int j1 = index2 + 1;
      if (Main.tile[i, j1].active())
        return;
      for (int i1 = i; !Main.tile[i1, j1].active() && (int) Main.tile[i1, j1].liquid > 0 && ((int) Main.tile[i1, j1 - 1].liquid == 0 && !Main.tile[i1, j1 - 1].active()) && !Main.tile[i1 - 1, j1].halfBrick(); --i1)
        WorldGen.PlaceTile(i1, j1, 162, true, false, -1, 0);
      for (int i1 = i + 1; !Main.tile[i1, j1].active() && (int) Main.tile[i1, j1].liquid > 0 && ((int) Main.tile[i1, j1 - 1].liquid == 0 && !Main.tile[i1, j1 - 1].active()) && !Main.tile[i1 + 1, j1].halfBrick(); ++i1)
        WorldGen.PlaceTile(i1, j1, 162, true, false, -1, 0);
    }

    public static void Lakinater(int i, int j)
    {
      double num1 = (double) WorldGen.genRand.Next(25, 50);
      double num2 = num1;
      float num3 = (float) WorldGen.genRand.Next(30, 80);
      if (WorldGen.genRand.Next(5) == 0)
      {
        num1 *= 1.5;
        num2 *= 1.5;
        num3 *= 1.2f;
      }
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) ((double) j - (double) num3 * 0.300000011920929);
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-20, -10) * 0.100000001490116);
      while (num1 > 0.0 && (double) num3 > 0.0)
      {
        if ((double) vector2_1.Y + num2 * 0.5 > Main.worldSurface)
          num3 = 0.0f;
        num1 -= (double) WorldGen.genRand.Next(3);
        --num3;
        int num4 = (int) ((double) vector2_1.X - num1 * 0.5);
        int num5 = (int) ((double) vector2_1.X + num1 * 0.5);
        int num6 = (int) ((double) vector2_1.Y - num1 * 0.5);
        int num7 = (int) ((double) vector2_1.Y + num1 * 0.5);
        if (num4 < 0)
          num4 = 0;
        if (num5 > Main.maxTilesX)
          num5 = Main.maxTilesX;
        if (num6 < 0)
          num6 = 0;
        if (num7 > Main.maxTilesY)
          num7 = Main.maxTilesY;
        num2 = num1 * (double) WorldGen.genRand.Next(80, 120) * 0.01;
        for (int index1 = num4; index1 < num5; ++index1)
        {
          for (int index2 = num6; index2 < num7; ++index2)
          {
            double num8 = (double) Math.Abs((float) index1 - (float) vector2_1.X);
            float num9 = Math.Abs((float) index2 - (float) vector2_1.Y);
            if (Math.Sqrt(num8 * num8 + (double) num9 * (double) num9) < num2 * 0.4)
            {
              if (Main.tile[index1, index2].active())
                Main.tile[index1, index2].liquid = byte.MaxValue;
              Main.tile[index1, index2].active(false);
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num10 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num10;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @vector2_2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num11 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local2 = (float) num11;
        if ((double) vector2_2.X > 0.5)
          vector2_2.X = (__Null) 0.5;
        if ((double) vector2_2.X < -0.5)
          vector2_2.X = (__Null) -0.5;
        if ((double) vector2_2.Y > 1.5)
          vector2_2.Y = (__Null) 1.5;
        if ((double) vector2_2.Y < 0.5)
          vector2_2.Y = (__Null) 0.5;
      }
    }

    public static void ShroomPatch(int i, int j)
    {
      double num1 = (double) WorldGen.genRand.Next(40, 70);
      double num2 = num1;
      float num3 = (float) WorldGen.genRand.Next(20, 30);
      if (WorldGen.genRand.Next(5) == 0)
      {
        num1 *= 1.5;
        double num4 = num2 * 1.5;
        num3 *= 1.2f;
      }
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) ((double) j - (double) num3 * 0.300000011920929);
      Vector2 vector2_2;
      vector2_2.X = (__Null) ((double) WorldGen.genRand.Next(-10, 11) * 0.100000001490116);
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(-20, -10) * 0.100000001490116);
      while (num1 > 0.0 && (double) num3 > 0.0)
      {
        num1 -= (double) WorldGen.genRand.Next(3);
        --num3;
        int num4 = (int) ((double) vector2_1.X - num1 * 0.5);
        int num5 = (int) ((double) vector2_1.X + num1 * 0.5);
        int num6 = (int) ((double) vector2_1.Y - num1 * 0.5);
        int num7 = (int) ((double) vector2_1.Y + num1 * 0.5);
        if (num4 < 0)
          num4 = 0;
        if (num5 > Main.maxTilesX)
          num5 = Main.maxTilesX;
        if (num6 < 0)
          num6 = 0;
        if (num7 > Main.maxTilesY)
          num7 = Main.maxTilesY;
        double num8 = num1 * (double) WorldGen.genRand.Next(80, 120) * 0.01;
        for (int index1 = num4; index1 < num5; ++index1)
        {
          for (int index2 = num6; index2 < num7; ++index2)
          {
            double num9 = (double) Math.Abs((float) index1 - (float) vector2_1.X);
            float num10 = Math.Abs((float) (((double) index2 - vector2_1.Y) * 2.29999995231628));
            if (Math.Sqrt(num9 * num9 + (double) num10 * (double) num10) < num8 * 0.4)
            {
              if ((double) index2 < (double) vector2_1.Y + num8 * 0.02)
              {
                if ((int) Main.tile[index1, index2].type != 59)
                  Main.tile[index1, index2].active(false);
              }
              else
                Main.tile[index1, index2].type = (ushort) 59;
              Main.tile[index1, index2].liquid = (byte) 0;
              Main.tile[index1, index2].lava(false);
            }
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2_1.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num11 = (double) ^(float&) local1 + vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num11;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num12 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local2 = (float) num12;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local3 = @vector2_2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num13 = (double) ^(float&) local3 - (double) WorldGen.genRand.Next(11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local3 = (float) num13;
        if ((double) vector2_2.X > -0.5 && (double) vector2_2.X < 0.5)
          vector2_2.X = vector2_2.X >= 0.0 ? (__Null) 0.5 : (__Null) -0.5;
        if (vector2_2.X > 2.0)
          vector2_2.X = (__Null) 1.0;
        if (vector2_2.X < -2.0)
          vector2_2.X = (__Null) -1.0;
        if (vector2_2.Y > 1.0)
          vector2_2.Y = (__Null) 1.0;
        if (vector2_2.Y < -1.0)
          vector2_2.Y = (__Null) -1.0;
        for (int index = 0; index < 2; ++index)
        {
          int i1 = (int) vector2_1.X + WorldGen.genRand.Next(-20, 20);
          int j1;
          for (j1 = (int) vector2_1.Y + WorldGen.genRand.Next(0, 20); !Main.tile[i1, j1].active() && (int) Main.tile[i1, j1].type != 59; j1 = (int) vector2_1.Y + WorldGen.genRand.Next(0, 20))
            i1 = (int) vector2_1.X + WorldGen.genRand.Next(-20, 20);
          int num9 = WorldGen.genRand.Next(7, 10);
          int steps = WorldGen.genRand.Next(7, 10);
          WorldGen.TileRunner(i1, j1, (double) num9, steps, 59, false, 0.0f, 2f, true, true);
          if (WorldGen.genRand.Next(3) == 0)
            WorldGen.TileRunner(i1, j1, (double) (num9 - 3), steps - 3, -1, false, 0.0f, 2f, true, true);
        }
      }
    }

    public static void Cavinator(int i, int j, int steps)
    {
      double num1 = (double) WorldGen.genRand.Next(7, 15);
      int num2 = 1;
      if (WorldGen.genRand.Next(2) == 0)
        num2 = -1;
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      int num3 = WorldGen.genRand.Next(20, 40);
      Vector2 vector2_2;
      vector2_2.Y = (__Null) ((double) WorldGen.genRand.Next(10, 20) * 0.00999999977648258);
      vector2_2.X = (__Null) (double) num2;
      while (num3 > 0)
      {
        --num3;
        int num4 = (int) ((double) vector2_1.X - num1 * 0.5);
        int num5 = (int) ((double) vector2_1.X + num1 * 0.5);
        int num6 = (int) ((double) vector2_1.Y - num1 * 0.5);
        int num7 = (int) ((double) vector2_1.Y + num1 * 0.5);
        if (num4 < 0)
          num4 = 0;
        if (num5 > Main.maxTilesX)
          num5 = Main.maxTilesX;
        if (num6 < 0)
          num6 = 0;
        if (num7 > Main.maxTilesY)
          num7 = Main.maxTilesY;
        double num8 = num1 * (double) WorldGen.genRand.Next(80, 120) * 0.01;
        for (int index1 = num4; index1 < num5; ++index1)
        {
          for (int index2 = num6; index2 < num7; ++index2)
          {
            double num9 = (double) Math.Abs((float) index1 - (float) vector2_1.X);
            float num10 = Math.Abs((float) index2 - (float) vector2_1.Y);
            if (Math.Sqrt(num9 * num9 + (double) num10 * (double) num10) < num8 * 0.4 && TileID.Sets.CanBeClearedDuringGeneration[(int) Main.tile[index1, index2].type])
              Main.tile[index1, index2].active(false);
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num11 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num11;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @vector2_2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num12 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local2 = (float) num12;
        if (vector2_2.X > (double) num2 + 0.5)
          vector2_2.X = (__Null) ((double) num2 + 0.5);
        if (vector2_2.X < (double) num2 - 0.5)
          vector2_2.X = (__Null) ((double) num2 - 0.5);
        if (vector2_2.Y > 2.0)
          vector2_2.Y = (__Null) 2.0;
        if (vector2_2.Y < 0.0)
          vector2_2.Y = (__Null) 0.0;
      }
      if (steps <= 0 || (double) (int) vector2_1.Y >= Main.rockLayer + 50.0)
        return;
      WorldGen.Cavinator((int) vector2_1.X, (int) vector2_1.Y, steps - 1);
    }

    public static void CaveOpenater(int i, int j)
    {
      double num1 = (double) WorldGen.genRand.Next(7, 12);
      int num2 = 1;
      if (WorldGen.genRand.Next(2) == 0)
        num2 = -1;
      Vector2 vector2_1;
      vector2_1.X = (__Null) (double) i;
      vector2_1.Y = (__Null) (double) j;
      int num3 = 100;
      Vector2 vector2_2;
      vector2_2.Y = (__Null) 0.0;
      vector2_2.X = (__Null) (double) num2;
      while (num3 > 0)
      {
        if ((int) Main.tile[(int) vector2_1.X, (int) vector2_1.Y].wall == 0)
          num3 = 0;
        --num3;
        int num4 = (int) ((double) vector2_1.X - num1 * 0.5);
        int num5 = (int) ((double) vector2_1.X + num1 * 0.5);
        int num6 = (int) ((double) vector2_1.Y - num1 * 0.5);
        int num7 = (int) ((double) vector2_1.Y + num1 * 0.5);
        if (num4 < 0)
          num4 = 0;
        if (num5 > Main.maxTilesX)
          num5 = Main.maxTilesX;
        if (num6 < 0)
          num6 = 0;
        if (num7 > Main.maxTilesY)
          num7 = Main.maxTilesY;
        double num8 = num1 * (double) WorldGen.genRand.Next(80, 120) * 0.01;
        for (int index1 = num4; index1 < num5; ++index1)
        {
          for (int index2 = num6; index2 < num7; ++index2)
          {
            double num9 = (double) Math.Abs((float) index1 - (float) vector2_1.X);
            float num10 = Math.Abs((float) index2 - (float) vector2_1.Y);
            if (Math.Sqrt(num9 * num9 + (double) num10 * (double) num10) < num8 * 0.4)
              Main.tile[index1, index2].active(false);
          }
        }
        vector2_1 = Vector2.op_Addition(vector2_1, vector2_2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local1 = @vector2_2.X;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num11 = (double) ^(float&) local1 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local1 = (float) num11;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        __Null& local2 = @vector2_2.Y;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        double num12 = (double) ^(float&) local2 + (double) WorldGen.genRand.Next(-10, 11) * 0.0500000007450581;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(float&) local2 = (float) num12;
        if (vector2_2.X > (double) num2 + 0.5)
          vector2_2.X = (__Null) ((double) num2 + 0.5);
        if (vector2_2.X < (double) num2 - 0.5)
          vector2_2.X = (__Null) ((double) num2 - 0.5);
        if (vector2_2.Y > 0.0)
          vector2_2.Y = (__Null) 0.0;
        if ((double) vector2_2.Y < -0.5)
          vector2_2.Y = (__Null) -0.5;
      }
    }

    public static void DiamondTileFrame(int i, int j)
    {
      WorldGen.TileFrame(i - 1, j, false, false);
      WorldGen.TileFrame(i, j - 1, false, false);
      WorldGen.TileFrame(i, j + 1, false, false);
      WorldGen.TileFrame(i + 1, j, false, false);
    }

    public static void SquareTileFrame(int i, int j, bool resetFrame = true)
    {
      WorldGen.TileFrame(i - 1, j - 1, false, false);
      WorldGen.TileFrame(i - 1, j, false, false);
      WorldGen.TileFrame(i - 1, j + 1, false, false);
      WorldGen.TileFrame(i, j - 1, false, false);
      WorldGen.TileFrame(i, j, resetFrame, false);
      WorldGen.TileFrame(i, j + 1, false, false);
      WorldGen.TileFrame(i + 1, j - 1, false, false);
      WorldGen.TileFrame(i + 1, j, false, false);
      WorldGen.TileFrame(i + 1, j + 1, false, false);
    }

    public static void SquareWallFrame(int i, int j, bool resetFrame = true)
    {
      Framing.WallFrame(i - 1, j - 1, false);
      Framing.WallFrame(i - 1, j, false);
      Framing.WallFrame(i - 1, j + 1, false);
      Framing.WallFrame(i, j - 1, false);
      Framing.WallFrame(i, j, resetFrame);
      Framing.WallFrame(i, j + 1, false);
      Framing.WallFrame(i + 1, j - 1, false);
      Framing.WallFrame(i + 1, j, false);
      Framing.WallFrame(i + 1, j + 1, false);
    }

    public static void SectionTileFrameWithCheck(int startX, int startY, int endX, int endY)
    {
      int sectionX1 = Netplay.GetSectionX(startX);
      int sectionY1 = Netplay.GetSectionY(startY);
      int sectionX2 = Netplay.GetSectionX(endX);
      int sectionY2 = Netplay.GetSectionY(endY);
      for (int index1 = sectionX1; index1 <= sectionX2; ++index1)
      {
        for (int index2 = sectionY1; index2 <= sectionY2; ++index2)
        {
          if (Main.sectionManager.SectionLoaded(index1, index2) && !Main.sectionManager.SectionFramed(index1, index2))
          {
            WorldGen.SectionTileFrame(index1, index2, index1, index2);
            if (Main.sectionManager.FrameSectionsLeft == 0)
              return;
          }
        }
      }
    }

    public static void SectionTileFrame(int startX, int startY, int endX, int endY)
    {
      Main.mapTime = Main.mapTimeMax + 10;
      WorldGen.noMapUpdate = true;
      int num1 = startX * 200;
      int num2 = (endX + 1) * 200;
      int num3 = startY * 150;
      int num4 = (endY + 1) * 150;
      if (num1 < 1)
        num1 = 1;
      if (num3 < 1)
        num3 = 1;
      if (num1 > Main.maxTilesX - 2)
        num1 = Main.maxTilesX - 2;
      if (num3 > Main.maxTilesY - 2)
        num3 = Main.maxTilesY - 2;
      if (num2 > Main.maxTilesX - 2)
        num2 = Main.maxTilesX - 2;
      if (num4 > Main.maxTilesY - 2)
        num4 = Main.maxTilesY - 2;
      for (int i = num1 - 1; i < num2 + 1; ++i)
      {
        for (int j = num3 - 1; j < num4 + 1; ++j)
        {
          if (Main.tile[i, j] == null)
            Main.tile[i, j] = new Tile();
          WorldGen.TileFrame(i, j, true, true);
          Framing.WallFrame(i, j, true);
        }
      }
      for (int x = startX; x <= endX; ++x)
      {
        for (int y = startY; y <= endY; ++y)
          Main.sectionManager.SetSectionFramed(x, y);
      }
      WorldGen.noMapUpdate = false;
    }

    public static void RangeFrame(int startX, int startY, int endX, int endY)
    {
      int num1 = startX;
      int num2 = endX + 1;
      int num3 = startY;
      int num4 = endY + 1;
      int num5 = 1;
      for (int i = num1 - num5; i < num2 + 1; ++i)
      {
        for (int j = num3 - 1; j < num4 + 1; ++j)
        {
          WorldGen.TileFrame(i, j, false, false);
          Framing.WallFrame(i, j, false);
        }
      }
    }

    public static void WaterCheck()
    {
      Liquid.numLiquid = 0;
      LiquidBuffer.numLiquidBuffer = 0;
      for (int index1 = 1; index1 < Main.maxTilesX - 1; ++index1)
      {
        for (int index2 = Main.maxTilesY - 2; index2 > 0; --index2)
        {
          Tile checkTile = Main.tile[index1, index2];
          checkTile.checkingLiquid(false);
          if ((int) checkTile.liquid > 0 && checkTile.nactive() && (Main.tileSolid[(int) checkTile.type] && !Main.tileSolidTop[(int) checkTile.type]))
            checkTile.liquid = (byte) 0;
          else if ((int) checkTile.liquid > 0)
          {
            if (checkTile.active())
            {
              if (checkTile.lava())
              {
                if (TileObjectData.CheckLavaDeath(checkTile))
                  WorldGen.KillTile(index1, index2, false, false, false);
              }
              else if (TileObjectData.CheckWaterDeath(checkTile))
                WorldGen.KillTile(index1, index2, false, false, false);
            }
            Tile tile1 = Main.tile[index1, index2 + 1];
            if ((!tile1.nactive() || !Main.tileSolid[(int) tile1.type] || Main.tileSolidTop[(int) tile1.type]) && (int) tile1.liquid < (int) byte.MaxValue)
            {
              if ((int) tile1.liquid > 250)
                tile1.liquid = byte.MaxValue;
              else
                Liquid.AddWater(index1, index2);
            }
            Tile tile2 = Main.tile[index1 - 1, index2];
            Tile tile3 = Main.tile[index1 + 1, index2];
            if ((!tile2.nactive() || !Main.tileSolid[(int) tile2.type] || Main.tileSolidTop[(int) tile2.type]) && (int) tile2.liquid != (int) checkTile.liquid)
              Liquid.AddWater(index1, index2);
            else if ((!tile3.nactive() || !Main.tileSolid[(int) tile3.type] || Main.tileSolidTop[(int) tile3.type]) && (int) tile3.liquid != (int) checkTile.liquid)
              Liquid.AddWater(index1, index2);
            if (checkTile.lava())
            {
              if ((int) tile2.liquid > 0 && !tile2.lava())
                Liquid.AddWater(index1, index2);
              else if ((int) tile3.liquid > 0 && !tile3.lava())
                Liquid.AddWater(index1, index2);
              else if ((int) Main.tile[index1, index2 - 1].liquid > 0 && !Main.tile[index1, index2 - 1].lava())
                Liquid.AddWater(index1, index2);
              else if ((int) tile1.liquid > 0 && !tile1.lava())
                Liquid.AddWater(index1, index2);
            }
          }
        }
      }
    }

    public static void EveryTileFrame()
    {
      Stopwatch stopwatch = new Stopwatch();
      stopwatch.Start();
      WorldGen.noLiquidCheck = true;
      WorldGen.noTileActions = true;
      for (int i = 0; i < Main.maxTilesX; ++i)
      {
        float num = (float) i / (float) Main.maxTilesX;
        Main.statusText = Lang.gen[55].Value + " " + (object) (int) ((double) num * 100.0 + 1.0) + "%";
        for (int j = 0; j < Main.maxTilesY; ++j)
        {
          if (Main.tile[i, j].active())
            WorldGen.TileFrame(i, j, true, false);
          if ((int) Main.tile[i, j].wall > 0)
            Framing.WallFrame(i, j, true);
        }
      }
      WorldGen.noLiquidCheck = false;
      WorldGen.noTileActions = false;
      long elapsedMilliseconds = stopwatch.ElapsedMilliseconds;
    }

    public static void PlantCheck(int i, int j)
    {
      int num1 = -1;
      int num2 = (int) Main.tile[i, j].type;
      int num3 = i - 1;
      int num4 = i + 1;
      int maxTilesX = Main.maxTilesX;
      int num5 = j - 1;
      if (j + 1 >= Main.maxTilesY)
        num1 = num2;
      if (i - 1 >= 0 && Main.tile[i - 1, j] != null && Main.tile[i - 1, j].nactive())
      {
        int type1 = (int) Main.tile[i - 1, j].type;
      }
      if (i + 1 < Main.maxTilesX && Main.tile[i + 1, j] != null && Main.tile[i + 1, j].nactive())
      {
        int type2 = (int) Main.tile[i + 1, j].type;
      }
      if (j - 1 >= 0 && Main.tile[i, j - 1] != null && Main.tile[i, j - 1].nactive())
      {
        int type3 = (int) Main.tile[i, j - 1].type;
      }
      if (j + 1 < Main.maxTilesY && Main.tile[i, j + 1] != null && (Main.tile[i, j + 1].nactive() && !Main.tile[i, j + 1].halfBrick()) && (int) Main.tile[i, j + 1].slope() == 0)
        num1 = (int) Main.tile[i, j + 1].type;
      if (i - 1 >= 0 && j - 1 >= 0 && (Main.tile[i - 1, j - 1] != null && Main.tile[i - 1, j - 1].nactive()))
      {
        int type4 = (int) Main.tile[i - 1, j - 1].type;
      }
      if (i + 1 < Main.maxTilesX && j - 1 >= 0 && (Main.tile[i + 1, j - 1] != null && Main.tile[i + 1, j - 1].nactive()))
      {
        int type5 = (int) Main.tile[i + 1, j - 1].type;
      }
      if (i - 1 >= 0 && j + 1 < Main.maxTilesY && (Main.tile[i - 1, j + 1] != null && Main.tile[i - 1, j + 1].nactive()))
      {
        int type6 = (int) Main.tile[i - 1, j + 1].type;
      }
      if (i + 1 < Main.maxTilesX && j + 1 < Main.maxTilesY && (Main.tile[i + 1, j + 1] != null && Main.tile[i + 1, j + 1].nactive()))
      {
        int type7 = (int) Main.tile[i + 1, j + 1].type;
      }
      if ((num2 != 3 || num1 == 2 || (num1 == 78 || num1 == 380)) && ((num2 != 24 || num1 == 23) && (num2 != 61 || num1 == 60)) && ((num2 != 71 || num1 == 70) && (num2 != 73 || num1 == 2 || (num1 == 78 || num1 == 380))) && ((num2 != 74 || num1 == 60) && (num2 != 110 || num1 == 109) && ((num2 != 113 || num1 == 109) && (num2 != 201 || num1 == 199))))
        return;
      if ((num2 == 3 || num2 == 73) && (num1 != 2 && (int) Main.tile[i, j].frameX >= 162))
        Main.tile[i, j].frameX = (short) 126;
      if (num2 == 74 && num1 != 60 && (int) Main.tile[i, j].frameX >= 162)
        Main.tile[i, j].frameX = (short) 126;
      if (num1 == 23)
      {
        num2 = 24;
        if ((int) Main.tile[i, j].frameX >= 162)
          Main.tile[i, j].frameX = (short) 126;
      }
      else if (num1 == 2)
        num2 = num2 != 113 ? 3 : 73;
      else if (num1 == 109)
        num2 = num2 != 73 ? 110 : 113;
      else if (num1 == 199)
        num2 = 201;
      else if (num1 == 70)
      {
        num2 = 71;
        while ((int) Main.tile[i, j].frameX > 72)
          Main.tile[i, j].frameX -= (short) 72;
      }
      if (num2 != (int) Main.tile[i, j].type)
        Main.tile[i, j].type = (ushort) num2;
      else
        WorldGen.KillTile(i, j, false, false, false);
    }

    public static bool CheckPound(int i, int j)
    {
      if (Main.tile[i, j] == null)
        Main.tile[i, j] = new Tile();
      if (Main.tile[i, j - 1] == null)
        Main.tile[i, j - 1] = new Tile();
      if (Main.tile[i, j + 1] == null)
        Main.tile[i, j + 1] = new Tile();
      ushort type1 = Main.tile[i, j].type;
      if ((uint) type1 <= 138U)
      {
        if ((int) type1 != 10 && (int) type1 != 48 && (uint) type1 - 137U > 1U)
          goto label_10;
      }
      else if ((int) type1 != 232 && (int) type1 != 380 && (uint) type1 - 387U > 1U)
        goto label_10;
      return false;
label_10:
      if (WorldGen.gen && ((int) Main.tile[i, j].type == 190 || (int) Main.tile[i, j].type == 30))
        return false;
      if (Main.tile[i, j - 1].active())
      {
        ushort type2 = Main.tile[i, j - 1].type;
        if ((uint) type2 <= 77U)
        {
          if ((uint) type2 <= 21U)
          {
            if ((int) type2 != 5 && (int) type2 != 21)
              goto label_21;
          }
          else if ((int) type2 != 26 && (int) type2 != 72 && (int) type2 != 77)
            goto label_21;
        }
        else if ((uint) type2 <= 237U)
        {
          if ((int) type2 != 88 && (int) type2 != 235 && (int) type2 != 237)
            goto label_21;
        }
        else if ((int) type2 != 323 && (int) type2 != 441 && (uint) type2 - 467U > 1U)
          goto label_21;
        return false;
      }
label_21:
      return true;
    }

    public static bool SlopeTile(int i, int j, int slope = 0)
    {
      if (!WorldGen.CheckPound(i, j))
        return false;
      Main.tile[i, j].halfBrick(false);
      Main.tile[i, j].slope((byte) slope);
      if (!WorldGen.gen)
      {
        WorldGen.KillTile(i, j, true, true, false);
        Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
        WorldGen.SquareTileFrame(i, j, true);
        if ((int) Main.tile[i, j].slope() == 0)
        {
          Rectangle rectangle;
          // ISSUE: explicit reference operation
          ((Rectangle) @rectangle).\u002Ector(i * 16, j * 16, 16, 16);
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            // ISSUE: explicit reference operation
            if (Main.player[index].active && !Main.player[index].dead && ((Rectangle) @rectangle).Intersects(new Rectangle((int) Main.player[index].position.X, (int) Main.player[index].position.Y, Main.player[index].width, Main.player[index].height)))
            {
              Main.player[index].gfxOffY += (float) Main.player[index].position.Y + (float) Main.player[index].height - (float) rectangle.Y;
              Main.player[index].position.Y = (__Null) (double) (rectangle.Y - Main.player[index].height);
            }
          }
        }
      }
      return true;
    }

    public static bool PoundTile(int i, int j)
    {
      if (!WorldGen.CheckPound(i, j))
        return false;
      if (!Main.tile[i, j].halfBrick())
        Main.tile[i, j].halfBrick(true);
      else
        Main.tile[i, j].halfBrick(false);
      if (!WorldGen.gen)
      {
        WorldGen.KillTile(i, j, true, true, false);
        Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
        WorldGen.SquareTileFrame(i, j, true);
        if (!Main.tile[i, j].halfBrick())
        {
          Rectangle rectangle;
          // ISSUE: explicit reference operation
          ((Rectangle) @rectangle).\u002Ector(i * 16, j * 16, 16, 16);
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            // ISSUE: explicit reference operation
            if (Main.player[index].active && !Main.player[index].dead && ((Rectangle) @rectangle).Intersects(new Rectangle((int) Main.player[index].position.X, (int) Main.player[index].position.Y, Main.player[index].width, Main.player[index].height)))
            {
              Main.player[index].gfxOffY += (float) Main.player[index].position.Y + (float) Main.player[index].height - (float) rectangle.Y;
              Main.player[index].position.Y = (__Null) (double) (rectangle.Y - Main.player[index].height);
            }
          }
        }
      }
      return true;
    }

    public static void PoundPlatform(int x, int y)
    {
      if (Main.tile[x, y].halfBrick())
      {
        WorldGen.PoundTile(x, y);
        if (Main.netMode != 1)
          return;
        NetMessage.SendData(17, -1, -1, (NetworkText) null, 7, (float) x, (float) y, 1f, 0, 0, 0);
      }
      else
      {
        int slope1 = 1;
        int slope2 = 2;
        if (TileID.Sets.Platforms[(int) Main.tile[x + 1, y - 1].type] || TileID.Sets.Platforms[(int) Main.tile[x - 1, y + 1].type] || WorldGen.SolidTile(x + 1, y) && !WorldGen.SolidTile(x - 1, y))
        {
          slope1 = 2;
          slope2 = 1;
        }
        if ((int) Main.tile[x, y].slope() == 0)
        {
          WorldGen.SlopeTile(x, y, slope1);
          int num = (int) Main.tile[x, y].slope();
          if (Main.netMode != 1)
            return;
          NetMessage.SendData(17, -1, -1, (NetworkText) null, 14, (float) x, (float) y, (float) num, 0, 0, 0);
        }
        else if ((int) Main.tile[x, y].slope() == slope1)
        {
          WorldGen.SlopeTile(x, y, slope2);
          int num = (int) Main.tile[x, y].slope();
          if (Main.netMode != 1)
            return;
          NetMessage.SendData(17, -1, -1, (NetworkText) null, 14, (float) x, (float) y, (float) num, 0, 0, 0);
        }
        else
        {
          WorldGen.SlopeTile(x, y, 0);
          int num = (int) Main.tile[x, y].slope();
          if (Main.netMode == 1)
            NetMessage.SendData(17, -1, -1, (NetworkText) null, 14, (float) x, (float) y, (float) num, 0, 0, 0);
          WorldGen.PoundTile(x, y);
          if (Main.netMode != 1)
            return;
          NetMessage.SendData(17, -1, -1, (NetworkText) null, 7, (float) x, (float) y, 1f, 0, 0, 0);
        }
      }
    }

    public static int PlatformProperSides(int x, int y, bool acceptNonOpposing = false)
    {
      Tile tile = Main.tile[x, y];
      if (!tile.active() || !TileID.Sets.Platforms[(int) tile.type])
        return 0;
      int num1 = (int) tile.slope();
      int num2 = -1;
      if (num1 == 1)
        num2 = 2;
      if (num1 == 2)
        num2 = 1;
      int num3 = 0;
      int num4 = 1;
      int num5 = 0;
      if (num1 == 1)
        num5 = 1;
      if (num1 == 2)
        num5 = -1;
      if (acceptNonOpposing)
      {
        if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[(int) Main.tile[x + num4, y + num5].type] && (int) Main.tile[x + num4, y + num5].slope() != num2)
          ++num3;
      }
      else if (Main.tile[x + num4, y + num5].active() && TileID.Sets.Platforms[(int) Main.tile[x + num4, y + num5].type] && (int) Main.tile[x + num4, y + num5].slope() == num1)
        ++num3;
      int num6 = num4 * -1;
      int num7 = num5 * -1;
      if (acceptNonOpposing)
      {
        if (Main.tile[x + num6, y + num7].active() && TileID.Sets.Platforms[(int) Main.tile[x + num6, y + num7].type] && (int) Main.tile[x + num6, y + num7].slope() != num2)
          ++num3;
      }
      else if (Main.tile[x + num6, y + num7].active() && TileID.Sets.Platforms[(int) Main.tile[x + num6, y + num7].type] && (int) Main.tile[x + num6, y + num7].slope() == num1)
        ++num3;
      return num3;
    }

    public static bool UpdateMapTile(int i, int j, bool addToList = true)
    {
      bool flag = false;
      if (Main.mapEnabled && !WorldGen.noMapUpdate && !WorldGen.gen && (((int) Main.Map[i, j].Light <= 0 ? 0 : (Main.Map.UpdateType(i, j) ? 1 : 0)) & (addToList ? 1 : 0)) != 0)
      {
        flag = true;
        if (MapHelper.numUpdateTile < MapHelper.maxUpdateTile - 1)
        {
          MapHelper.updateTileX[MapHelper.numUpdateTile] = (short) i;
          MapHelper.updateTileY[MapHelper.numUpdateTile] = (short) j;
          ++MapHelper.numUpdateTile;
        }
        else
          Main.refreshMap = true;
      }
      return flag;
    }

    public static void TileMergeAttemptFrametest(int i, int j, int myType, int lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
      if (up == lookfor)
      {
        WorldGen.TileFrame(i, j - 1, false, false);
        if (WorldGen.mergeDown)
          up = myType;
      }
      if (down == lookfor)
      {
        WorldGen.TileFrame(i, j + 1, false, false);
        if (WorldGen.mergeUp)
          down = myType;
      }
      if (left == lookfor)
      {
        WorldGen.TileFrame(i - 1, j, false, false);
        if (WorldGen.mergeRight)
          left = myType;
      }
      if (right == lookfor)
      {
        WorldGen.TileFrame(i + 1, j, false, false);
        if (WorldGen.mergeLeft)
          right = myType;
      }
      if (upLeft == lookfor)
        upLeft = myType;
      if (upRight == lookfor)
        upRight = myType;
      if (downLeft == lookfor)
        downLeft = myType;
      if (downRight != lookfor)
        return;
      downRight = myType;
    }

    public static void TileMergeAttemptFrametest(int i, int j, int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
      if (up > -1 && lookfor[up])
      {
        WorldGen.TileFrame(i, j - 1, false, false);
        if (WorldGen.mergeDown)
          up = myType;
      }
      if (down > -1 && lookfor[down])
      {
        WorldGen.TileFrame(i, j + 1, false, false);
        if (WorldGen.mergeUp)
          down = myType;
      }
      if (left > -1 && lookfor[left])
      {
        WorldGen.TileFrame(i - 1, j, false, false);
        if (WorldGen.mergeRight)
          left = myType;
      }
      if (right > -1 && lookfor[right])
      {
        WorldGen.TileFrame(i + 1, j, false, false);
        if (WorldGen.mergeLeft)
          right = myType;
      }
      if (upLeft > -1 && lookfor[upLeft])
        upLeft = myType;
      if (upRight > -1 && lookfor[upRight])
        upRight = myType;
      if (downLeft > -1 && lookfor[downLeft])
        downLeft = myType;
      if (downRight <= -1 || !lookfor[downRight])
        return;
      downRight = myType;
    }

    public static void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right)
    {
      if (lookfor == up)
        up = myType;
      if (lookfor == down)
        down = myType;
      if (lookfor == left)
        left = myType;
      if (lookfor != right)
        return;
      right = myType;
    }

    public static void TileMergeAttempt(int myType, int lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
      if (lookfor == up)
        up = myType;
      if (lookfor == down)
        down = myType;
      if (lookfor == left)
        left = myType;
      if (lookfor == right)
        right = myType;
      if (lookfor == upLeft)
        upLeft = myType;
      if (lookfor == upRight)
        upRight = myType;
      if (lookfor == downLeft)
        downLeft = myType;
      if (lookfor != downRight)
        return;
      downRight = myType;
    }

    public static void TileMergeAttempt(int myType, bool[] lookfor, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
      if (up > -1 && lookfor[up])
        up = myType;
      if (down > -1 && lookfor[down])
        down = myType;
      if (left > -1 && lookfor[left])
        left = myType;
      if (right > -1 && lookfor[right])
        right = myType;
      if (upLeft > -1 && lookfor[upLeft])
        upLeft = myType;
      if (upRight > -1 && lookfor[upRight])
        upRight = myType;
      if (downLeft > -1 && lookfor[downLeft])
        downLeft = myType;
      if (downRight <= -1 || !lookfor[downRight])
        return;
      downRight = myType;
    }

    public static void TileMergeAttempt(int myType, bool[] lookfor, bool[] exclude, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
      if (up > -1 && !exclude[up] && lookfor[up])
        up = myType;
      if (down > -1 && !exclude[down] && lookfor[down])
        down = myType;
      if (left > -1 && !exclude[left] && lookfor[left])
        left = myType;
      if (right > -1 && !exclude[right] && lookfor[right])
        right = myType;
      if (upLeft > -1 && !exclude[upLeft] && lookfor[upLeft])
        upLeft = myType;
      if (upRight > -1 && !exclude[upRight] && lookfor[upRight])
        upRight = myType;
      if (downLeft > -1 && !exclude[downLeft] && lookfor[downLeft])
        downLeft = myType;
      if (downRight <= -1 || exclude[downRight] || !lookfor[downRight])
        return;
      downRight = myType;
    }

    public static void TileMergeAttemptWeird(int myType, int changeTo, bool[] exclude, ref int up, ref int down, ref int left, ref int right, ref int upLeft, ref int upRight, ref int downLeft, ref int downRight)
    {
      if (up > -1 && !exclude[up] && up != myType)
        up = changeTo;
      if (down > -1 && !exclude[down] && down != myType)
        down = changeTo;
      if (left > -1 && !exclude[left] && left != myType)
        left = changeTo;
      if (right > -1 && !exclude[right] && right != myType)
        right = changeTo;
      if (upLeft > -1 && !exclude[upLeft] && upLeft != myType)
        upLeft = changeTo;
      if (upRight > -1 && !exclude[upRight] && upRight != myType)
        upRight = changeTo;
      if (downLeft > -1 && !exclude[downLeft] && downLeft != myType)
        downLeft = changeTo;
      if (downRight <= -1 || exclude[downRight] || downRight == myType)
        return;
      downRight = changeTo;
    }

    public static void TileFrame(int i, int j, bool resetFrame = false, bool noBreak = false)
    {
      bool addToList = false;
      try
      {
        if (i > 5)
        {
          if (j > 5)
          {
            if (i < Main.maxTilesX - 5)
            {
              if (j < Main.maxTilesY - 5)
              {
                if (Main.tile[i, j] != null)
                {
                  addToList = WorldGen.UpdateMapTile(i, j, true);
                  Tile centerTile = Main.tile[i, j];
                  if (!centerTile.active())
                  {
                    centerTile.halfBrick(false);
                    centerTile.color((byte) 0);
                    centerTile.slope((byte) 0);
                  }
                  if ((int) centerTile.liquid > 0 && Main.netMode != 1 && !WorldGen.noLiquidCheck)
                    Liquid.AddWater(i, j);
                  if (centerTile.active())
                  {
                    if (noBreak && Main.tileFrameImportant[(int) centerTile.type] && (int) centerTile.type != 4)
                      return;
                    int index1 = (int) centerTile.type;
                    if (Main.tileStone[index1])
                      index1 = 1;
                    int frameX1 = (int) centerTile.frameX;
                    int frameY1 = (int) centerTile.frameY;
                    Rectangle rectangle;
                    // ISSUE: explicit reference operation
                    ((Rectangle) @rectangle).\u002Ector(-1, -1, 0, 0);
                    if (Main.tileFrameImportant[(int) centerTile.type])
                    {
                      if (index1 == 4)
                      {
                        Tile tile1 = Main.tile[i, j - 1];
                        Tile tile2 = Main.tile[i, j + 1];
                        Tile tile3 = Main.tile[i - 1, j];
                        Tile tile4 = Main.tile[i + 1, j];
                        Tile tile5 = Main.tile[i - 1, j + 1];
                        Tile tile6 = Main.tile[i + 1, j + 1];
                        Tile tile7 = Main.tile[i - 1, j - 1];
                        Tile tile8 = Main.tile[i + 1, j - 1];
                        short num1 = 0;
                        if ((int) centerTile.frameX >= 66)
                          num1 = (short) 66;
                        int index2 = -1;
                        int index3 = -1;
                        int index4 = -1;
                        int num2 = -1;
                        int num3 = -1;
                        int num4 = -1;
                        int num5 = -1;
                        if (tile1 != null && tile1.active() && !tile1.bottomSlope())
                        {
                          int type = (int) tile1.type;
                        }
                        if (tile2 != null && tile2.active() && (!tile2.halfBrick() && !tile2.topSlope()))
                          index2 = (int) tile2.type;
                        if (tile3 != null && tile3.active() && ((int) tile3.slope() == 0 || (int) tile3.slope() % 2 != 1))
                          index3 = (int) tile3.type;
                        if (tile4 != null && tile4.active() && ((int) tile4.slope() == 0 || (int) tile4.slope() % 2 != 0))
                          index4 = (int) tile4.type;
                        if (tile5 != null && tile5.active())
                          num2 = (int) tile5.type;
                        if (tile6 != null && tile6.active())
                          num3 = (int) tile6.type;
                        if (tile7 != null && tile7.active())
                          num4 = (int) tile7.type;
                        if (tile8 != null && tile8.active())
                          num5 = (int) tile8.type;
                        if (index2 >= 0 && Main.tileSolid[index2] && (!Main.tileNoAttach[index2] || TileID.Sets.Platforms[index2]))
                        {
                          centerTile.frameX = num1;
                          return;
                        }
                        if (index3 >= 0 && Main.tileSolid[index3] && !Main.tileNoAttach[index3] || index3 == 124 || index3 == 5 && num4 == 5 && num2 == 5)
                        {
                          centerTile.frameX = (short) (22 + (int) num1);
                          return;
                        }
                        if (index4 >= 0 && Main.tileSolid[index4] && !Main.tileNoAttach[index4] || index4 == 124 || index4 == 5 && num5 == 5 && num3 == 5)
                        {
                          centerTile.frameX = (short) (44 + (int) num1);
                          return;
                        }
                        if ((int) centerTile.wall > 0)
                        {
                          centerTile.frameX = num1;
                          return;
                        }
                        WorldGen.KillTile(i, j, false, false, false);
                        return;
                      }
                      if (index1 == 442)
                      {
                        Tile tile1 = Main.tile[i, j - 1];
                        Tile tile2 = Main.tile[i, j + 1];
                        Tile tile3 = Main.tile[i - 1, j];
                        Tile tile4 = Main.tile[i + 1, j];
                        Tile tile5 = Main.tile[i - 1, j + 1];
                        Tile tile6 = Main.tile[i + 1, j + 1];
                        Tile tile7 = Main.tile[i - 1, j - 1];
                        Tile tile8 = Main.tile[i + 1, j - 1];
                        int index2 = -1;
                        int index3 = -1;
                        int index4 = -1;
                        int index5 = -1;
                        int num1 = -1;
                        int num2 = -1;
                        int num3 = -1;
                        int num4 = -1;
                        if (tile1 != null && tile1.nactive() && !tile1.bottomSlope())
                          index3 = (int) tile1.type;
                        if (tile2 != null && tile2.nactive() && (!tile2.halfBrick() && !tile2.topSlope()))
                          index2 = (int) tile2.type;
                        if (tile3 != null && tile3.nactive() && ((int) tile3.slope() == 0 || (int) tile3.slope() % 2 != 1))
                          index4 = (int) tile3.type;
                        if (tile4 != null && tile4.nactive() && ((int) tile4.slope() == 0 || (int) tile4.slope() % 2 != 0))
                          index5 = (int) tile4.type;
                        if (tile5 != null && tile5.nactive())
                          num1 = (int) tile5.type;
                        if (tile6 != null && tile6.nactive())
                          num2 = (int) tile6.type;
                        if (tile7 != null && tile7.nactive())
                          num3 = (int) tile7.type;
                        if (tile8 != null && tile8.nactive())
                          num4 = (int) tile8.type;
                        bool flag1 = false;
                        bool flag2 = false;
                        bool flag3 = false;
                        bool flag4 = false;
                        if (index2 >= 0 && Main.tileSolid[index2] && (!Main.tileNoAttach[index2] || TileID.Sets.Platforms[index2]) && ((tile2.bottomSlope() || (int) tile2.slope() == 0) && !tile2.halfBrick()))
                          flag4 = true;
                        if (index3 >= 0 && Main.tileSolid[index3] && (!Main.tileNoAttach[index3] || TileID.Sets.Platforms[index3] && tile1.halfBrick()) && (tile1.topSlope() || (int) tile1.slope() == 0 || tile1.halfBrick()))
                          flag1 = true;
                        if (index4 >= 0 && Main.tileSolid[index4] && !Main.tileNoAttach[index4] && ((tile3.leftSlope() || (int) tile3.slope() == 0) && !tile3.halfBrick()) || (index4 == 124 || index4 == 5 && num3 == 5 && num1 == 5))
                          flag2 = true;
                        if (index5 >= 0 && Main.tileSolid[index5] && !Main.tileNoAttach[index5] && ((tile4.rightSlope() || (int) tile4.slope() == 0) && !tile4.halfBrick()) || (index5 == 124 || index5 == 5 && num4 == 5 && num2 == 5))
                          flag3 = true;
                        bool flag5;
                        switch ((int) centerTile.frameX / 22)
                        {
                          case 0:
                            flag5 = !flag4;
                            break;
                          case 1:
                            flag5 = !flag1;
                            break;
                          case 2:
                            flag5 = !flag2;
                            break;
                          case 3:
                            flag5 = !flag3;
                            break;
                          default:
                            flag5 = true;
                            break;
                        }
                        if (!flag5)
                          return;
                        if (flag4)
                        {
                          centerTile.frameX = (short) 0;
                          return;
                        }
                        if (flag1)
                        {
                          centerTile.frameX = (short) 22;
                          return;
                        }
                        if (flag2)
                        {
                          centerTile.frameX = (short) 44;
                          return;
                        }
                        if (flag3)
                        {
                          centerTile.frameX = (short) 66;
                          return;
                        }
                        WorldGen.KillTile(i, j, false, false, false);
                        return;
                      }
                      if (index1 == 136)
                      {
                        Tile tile1 = Main.tile[i, j - 1];
                        Tile tile2 = Main.tile[i, j + 1];
                        Tile tile3 = Main.tile[i - 1, j];
                        Tile tile4 = Main.tile[i + 1, j];
                        Tile tile5 = Main.tile[i - 1, j + 1];
                        Tile tile6 = Main.tile[i + 1, j + 1];
                        Tile tile7 = Main.tile[i - 1, j - 1];
                        Tile tile8 = Main.tile[i + 1, j - 1];
                        int index2 = -1;
                        int index3 = -1;
                        int index4 = -1;
                        int num1 = -1;
                        int num2 = -1;
                        int num3 = -1;
                        int num4 = -1;
                        if (tile1 != null && tile1.nactive())
                        {
                          int type = (int) tile1.type;
                        }
                        if (tile2 != null && tile2.nactive() && (!tile2.halfBrick() && !tile2.topSlope()))
                          index2 = (int) tile2.type;
                        if (tile3 != null && tile3.nactive())
                          index3 = (int) tile3.type;
                        if (tile4 != null && tile4.nactive())
                          index4 = (int) tile4.type;
                        if (tile5 != null && tile5.nactive())
                          num1 = (int) tile5.type;
                        if (tile6 != null && tile6.nactive())
                          num2 = (int) tile6.type;
                        if (tile7 != null && tile7.nactive())
                          num3 = (int) tile7.type;
                        if (tile8 != null && tile8.nactive())
                          num4 = (int) tile8.type;
                        if (index2 >= 0 && Main.tileSolid[index2] && (!Main.tileNoAttach[index2] && !tile2.halfBrick()) && ((int) tile2.slope() == 0 || tile2.bottomSlope()))
                        {
                          centerTile.frameX = (short) 0;
                          return;
                        }
                        if (index3 >= 0 && Main.tileSolid[index3] && !Main.tileNoAttach[index3] && ((tile3.leftSlope() || (int) tile3.slope() == 0) && !tile3.halfBrick()) || (index3 == 124 || index3 == 5 && num3 == 5 && num1 == 5))
                        {
                          centerTile.frameX = (short) 18;
                          return;
                        }
                        if (index4 >= 0 && Main.tileSolid[index4] && !Main.tileNoAttach[index4] && ((tile4.rightSlope() || (int) tile4.slope() == 0) && !tile4.halfBrick()) || (index4 == 124 || index4 == 5 && num4 == 5 && num2 == 5))
                        {
                          centerTile.frameX = (short) 36;
                          return;
                        }
                        if ((int) centerTile.wall > 0)
                        {
                          centerTile.frameX = (short) 54;
                          return;
                        }
                        WorldGen.KillTile(i, j, false, false, false);
                        return;
                      }
                      if (index1 == 129 || index1 == 149)
                      {
                        Tile tile1 = Main.tile[i, j - 1];
                        Tile tile2 = Main.tile[i, j + 1];
                        Tile tile3 = Main.tile[i - 1, j];
                        Tile tile4 = Main.tile[i + 1, j];
                        int index2 = -1;
                        int index3 = -1;
                        int index4 = -1;
                        int index5 = -1;
                        if (tile1 != null && tile1.nactive() && !tile1.bottomSlope())
                          index3 = (int) tile1.type;
                        if (tile2 != null && tile2.nactive() && (!tile2.halfBrick() && !tile2.topSlope()))
                          index2 = (int) tile2.type;
                        if (tile3 != null && tile3.nactive())
                          index4 = (int) tile3.type;
                        if (tile4 != null && tile4.nactive())
                          index5 = (int) tile4.type;
                        if (index2 >= 0 && Main.tileSolid[index2] && !Main.tileSolidTop[index2])
                        {
                          centerTile.frameY = (short) 0;
                          return;
                        }
                        if (index4 >= 0 && Main.tileSolid[index4] && !Main.tileSolidTop[index4])
                        {
                          centerTile.frameY = (short) 54;
                          return;
                        }
                        if (index5 >= 0 && Main.tileSolid[index5] && !Main.tileSolidTop[index5])
                        {
                          centerTile.frameY = (short) 36;
                          return;
                        }
                        if (index3 >= 0 && Main.tileSolid[index3] && !Main.tileSolidTop[index3])
                        {
                          centerTile.frameY = (short) 18;
                          return;
                        }
                        WorldGen.KillTile(i, j, false, false, false);
                        return;
                      }
                      if (index1 >= 373 && index1 <= 375 || index1 == 461)
                      {
                        Tile tile = Main.tile[i, j - 1];
                        if (tile != null && tile.active() && (!tile.bottomSlope() && Main.tileSolid[(int) tile.type]) && !Main.tileSolidTop[(int) tile.type])
                          return;
                        WorldGen.KillTile(i, j, false, false, false);
                        return;
                      }
                      if (index1 == 178)
                      {
                        Tile tile1 = Main.tile[i, j - 1];
                        Tile tile2 = Main.tile[i, j + 1];
                        Tile tile3 = Main.tile[i - 1, j];
                        Tile tile4 = Main.tile[i + 1, j];
                        int index2 = -1;
                        int index3 = -1;
                        int index4 = -1;
                        int index5 = -1;
                        if (tile1 != null && tile1.active() && !tile1.bottomSlope())
                          index3 = (int) tile1.type;
                        if (tile2 != null && tile2.active() && (!tile2.halfBrick() && !tile2.topSlope()))
                          index2 = (int) tile2.type;
                        if (tile3 != null && tile3.active())
                          index4 = (int) tile3.type;
                        if (tile4 != null && tile4.active())
                          index5 = (int) tile4.type;
                        short num = (short) (WorldGen.genRand.Next(3) * 18);
                        if (index2 >= 0 && Main.tileSolid[index2] && !Main.tileSolidTop[index2])
                        {
                          if ((int) centerTile.frameY >= 0 && (int) centerTile.frameY <= 36)
                            return;
                          centerTile.frameY = num;
                          return;
                        }
                        if (index4 >= 0 && Main.tileSolid[index4] && !Main.tileSolidTop[index4])
                        {
                          if ((int) centerTile.frameY >= 108 && (int) centerTile.frameY <= 54)
                            return;
                          centerTile.frameY = (short) (108 + (int) num);
                          return;
                        }
                        if (index5 >= 0 && Main.tileSolid[index5] && !Main.tileSolidTop[index5])
                        {
                          if ((int) centerTile.frameY >= 162 && (int) centerTile.frameY <= 198)
                            return;
                          centerTile.frameY = (short) (162 + (int) num);
                          return;
                        }
                        if (index3 >= 0 && Main.tileSolid[index3] && !Main.tileSolidTop[index3])
                        {
                          if ((int) centerTile.frameY >= 54 && (int) centerTile.frameY <= 90)
                            return;
                          centerTile.frameY = (short) (54 + (int) num);
                          return;
                        }
                        WorldGen.KillTile(i, j, false, false, false);
                        return;
                      }
                      if (index1 == 184)
                      {
                        Tile tile1 = Main.tile[i, j - 1];
                        Tile tile2 = Main.tile[i, j + 1];
                        Tile tile3 = Main.tile[i - 1, j];
                        Tile tile4 = Main.tile[i + 1, j];
                        int index2 = -1;
                        int index3 = -1;
                        int index4 = -1;
                        int index5 = -1;
                        if (tile1 != null && tile1.active() && !tile1.bottomSlope())
                          index3 = (int) tile1.type;
                        if (tile2 != null && tile2.active() && (!tile2.halfBrick() && !tile2.topSlope()))
                          index2 = (int) tile2.type;
                        if (tile3 != null && tile3.active())
                          index4 = (int) tile3.type;
                        if (tile4 != null && tile4.active())
                          index5 = (int) tile4.type;
                        short num = (short) (WorldGen.genRand.Next(3) * 18);
                        if (index2 >= 0 && Main.tileMoss[index2])
                        {
                          centerTile.frameX = index2 != 381 ? (short) (22 * (index2 - 179)) : (short) 110;
                          if ((int) centerTile.frameY >= 0 && (int) centerTile.frameY <= 36)
                            return;
                          centerTile.frameY = num;
                          return;
                        }
                        if (index3 >= 0 && Main.tileMoss[index3])
                        {
                          centerTile.frameX = index3 != 381 ? (short) (22 * (index3 - 179)) : (short) 110;
                          if ((int) centerTile.frameY >= 54 && (int) centerTile.frameY <= 90)
                            return;
                          centerTile.frameY = (short) (54 + (int) num);
                          return;
                        }
                        if (index4 >= 0 && Main.tileMoss[index4])
                        {
                          centerTile.frameX = index4 != 381 ? (short) (22 * (index4 - 179)) : (short) 110;
                          if ((int) centerTile.frameY >= 108 && (int) centerTile.frameY <= 54)
                            return;
                          centerTile.frameY = (short) (108 + (int) num);
                          return;
                        }
                        if (index5 >= 0 && Main.tileMoss[index5])
                        {
                          centerTile.frameX = index5 != 381 ? (short) (22 * (index5 - 179)) : (short) 110;
                          if ((int) centerTile.frameY >= 162 && (int) centerTile.frameY <= 198)
                            return;
                          centerTile.frameY = (short) (162 + (int) num);
                          return;
                        }
                        WorldGen.KillTile(i, j, false, false, false);
                        return;
                      }
                      if (index1 == 3 || index1 == 24 || (index1 == 61 || index1 == 71) || (index1 == 73 || index1 == 74 || (index1 == 110 || index1 == 113)) || index1 == 201)
                      {
                        WorldGen.PlantCheck(i, j);
                        return;
                      }
                      if (index1 == 227)
                      {
                        WorldGen.CheckDye(i, j);
                        return;
                      }
                      if (index1 == 12 || index1 == 31)
                      {
                        WorldGen.CheckOrb(i, j, index1);
                        return;
                      }
                      if (index1 == 165)
                      {
                        WorldGen.CheckTight(i, j);
                        return;
                      }
                      if (index1 == 324)
                      {
                        Tile tile = Main.tile[i, j + 1];
                        if (tile == null)
                        {
                          tile = new Tile();
                          Main.tile[i, j + 1] = tile;
                        }
                        if (tile.nactive() && (Main.tileSolid[(int) tile.type] || Main.tileSolidTop[(int) tile.type]))
                          return;
                        WorldGen.KillTile(i, j, false, false, false);
                        return;
                      }
                      if (index1 == 235)
                      {
                        WorldGen.Check3x1(i, j, index1);
                        return;
                      }
                      if (index1 == 185)
                      {
                        WorldGen.CheckPile(i, j);
                        return;
                      }
                      if (index1 >= 275 && index1 <= 281 || (index1 == 296 || index1 == 297) || (index1 == 309 || index1 == 358 || (index1 == 359 || index1 == 413)) || index1 == 414)
                      {
                        WorldGen.Check6x3(i, j, index1);
                        return;
                      }
                      if (index1 == 10)
                      {
                        if (WorldGen.destroyObject)
                          return;
                        bool flag = false;
                        int frameY2 = (int) centerTile.frameY;
                        int doorStyle = frameY2 / 54 + (int) centerTile.frameX / 54 * 36;
                        int j1 = j - frameY2 % 54 / 18;
                        Tile tile1 = Main.tile[i, j1 - 1];
                        Tile tile2 = Main.tile[i, j1];
                        Tile tile3 = Main.tile[i, j1 + 1];
                        Tile tile4 = Main.tile[i, j1 + 2];
                        Tile testTile = Main.tile[i, j1 + 3];
                        if (tile1 == null)
                        {
                          tile1 = new Tile();
                          Main.tile[i, j1 - 1] = tile1;
                        }
                        if (tile2 == null)
                        {
                          tile2 = new Tile();
                          Main.tile[i, j1] = tile2;
                        }
                        if (tile3 == null)
                        {
                          tile3 = new Tile();
                          Main.tile[i, j1 + 1] = tile3;
                        }
                        if (tile4 == null)
                        {
                          tile4 = new Tile();
                          Main.tile[i, j1 + 2] = tile4;
                        }
                        if (testTile == null)
                        {
                          testTile = new Tile();
                          Main.tile[i, j1 + 3] = testTile;
                        }
                        if (!tile1.active() || !Main.tileSolid[(int) tile1.type])
                          flag = true;
                        if (!WorldGen.SolidTile(testTile))
                          flag = true;
                        if (!tile2.active() || (int) tile2.type != index1)
                          flag = true;
                        if (!tile3.active() || (int) tile3.type != index1)
                          flag = true;
                        if (!tile4.active() || (int) tile4.type != index1)
                          flag = true;
                        if (flag)
                        {
                          WorldGen.destroyObject = true;
                          WorldGen.KillTile(i, j1, false, false, false);
                          WorldGen.KillTile(i, j1 + 1, false, false, false);
                          WorldGen.KillTile(i, j1 + 2, false, false, false);
                          WorldGen.DropDoorItem(i, j, doorStyle);
                        }
                        WorldGen.destroyObject = false;
                        return;
                      }
                      if (index1 == 11)
                      {
                        if (WorldGen.destroyObject)
                          return;
                        int num1 = 0;
                        int index2 = i;
                        int frameX2 = (int) centerTile.frameX;
                        int frameY2 = (int) centerTile.frameY;
                        int doorStyle = frameY2 / 54 + (int) centerTile.frameX / 72 * 36;
                        int num2 = j - frameY2 % 54 / 18;
                        bool flag = false;
                        int num3 = 72;
                        switch (frameX2 % num3)
                        {
                          case 0:
                            index2 = i;
                            num1 = 1;
                            break;
                          case 18:
                            index2 = i - 1;
                            num1 = 1;
                            break;
                          case 36:
                            index2 = i + 1;
                            num1 = -1;
                            break;
                          case 54:
                            index2 = i;
                            num1 = -1;
                            break;
                        }
                        Tile tile1 = Main.tile[index2, num2 - 1];
                        Tile testTile = Main.tile[index2, num2 + 3];
                        if (tile1 == null)
                        {
                          tile1 = new Tile();
                          Main.tile[index2, num2 - 1] = tile1;
                        }
                        if (testTile == null)
                        {
                          testTile = new Tile();
                          Main.tile[index2, num2 + 3] = testTile;
                        }
                        if (!tile1.active() || !Main.tileSolid[(int) tile1.type] || !WorldGen.SolidTile(testTile))
                        {
                          flag = true;
                          WorldGen.destroyObject = true;
                          WorldGen.DropDoorItem(i, j, doorStyle);
                        }
                        int num4 = index2;
                        if (num1 == -1)
                          num4 = index2 - 1;
                        for (int i1 = num4; i1 < num4 + 2; ++i1)
                        {
                          for (int j1 = num2; j1 < num2 + 3; ++j1)
                          {
                            if (!flag)
                            {
                              Tile tile2 = Main.tile[i1, j1];
                              if (!tile2.active() || (int) tile2.type != 11)
                              {
                                WorldGen.destroyObject = true;
                                WorldGen.DropDoorItem(i, j, doorStyle);
                                flag = true;
                                i1 = num4;
                                j1 = num2;
                              }
                            }
                            if (flag)
                              WorldGen.KillTile(i1, j1, false, false, false);
                          }
                        }
                        WorldGen.destroyObject = false;
                        return;
                      }
                      if (index1 == 314)
                      {
                        Minecart.FrameTrack(i, j, false, false);
                        return;
                      }
                      if (index1 == 380)
                      {
                        Tile tile1 = Main.tile[i - 1, j];
                        if (tile1 == null)
                          return;
                        Tile tile2 = Main.tile[i + 1, j];
                        if (tile2 == null || Main.tile[i - 1, j + 1] == null || (Main.tile[i + 1, j + 1] == null || Main.tile[i - 1, j - 1] == null) || Main.tile[i + 1, j - 1] == null)
                          return;
                        int index2 = -1;
                        int index3 = -1;
                        if (tile1 != null && tile1.active())
                          index3 = !Main.tileStone[(int) tile1.type] ? (int) tile1.type : 1;
                        if (tile2 != null && tile2.active())
                          index2 = !Main.tileStone[(int) tile2.type] ? (int) tile2.type : 1;
                        if (index2 >= 0 && !Main.tileSolid[index2])
                          index2 = -1;
                        if (index3 >= 0 && !Main.tileSolid[index3])
                          index3 = -1;
                        rectangle.X = index3 != index1 || index2 != index1 ? (index3 != index1 || index2 == index1 ? (index3 == index1 || index2 != index1 ? (__Null) 54 : (__Null) 0) : (__Null) 36) : (__Null) 18;
                        centerTile.frameX = (short) rectangle.X;
                        return;
                      }
                      if (index1 >= 0 && TileID.Sets.Platforms[index1])
                      {
                        Tile tile1 = Main.tile[i - 1, j];
                        if (tile1 == null)
                          return;
                        Tile tile2 = Main.tile[i + 1, j];
                        if (tile2 == null)
                          return;
                        Tile tile3 = Main.tile[i - 1, j + 1];
                        if (tile3 == null)
                          return;
                        Tile tile4 = Main.tile[i + 1, j + 1];
                        if (tile4 == null)
                          return;
                        Tile tile5 = Main.tile[i - 1, j - 1];
                        if (tile5 == null)
                          return;
                        Tile tile6 = Main.tile[i + 1, j - 1];
                        if (tile6 == null)
                          return;
                        int index2 = -1;
                        int index3 = -1;
                        if (tile1 != null && tile1.active())
                          index3 = !Main.tileStone[(int) tile1.type] ? (!TileID.Sets.Platforms[(int) tile1.type] ? (int) tile1.type : index1) : 1;
                        if (tile2 != null && tile2.active())
                          index2 = !Main.tileStone[(int) tile2.type] ? (!TileID.Sets.Platforms[(int) tile2.type] ? (int) tile2.type : index1) : 1;
                        if (index2 >= 0 && !Main.tileSolid[index2])
                          index2 = -1;
                        if (index3 >= 0 && !Main.tileSolid[index3])
                          index3 = -1;
                        if (index3 == index1 && tile1.halfBrick() != centerTile.halfBrick())
                          index3 = -1;
                        if (index2 == index1 && tile2.halfBrick() != centerTile.halfBrick())
                          index2 = -1;
                        if (index3 != -1 && index3 != index1 && centerTile.halfBrick())
                          index3 = -1;
                        if (index2 != -1 && index2 != index1 && centerTile.halfBrick())
                          index2 = -1;
                        if (index3 == -1 && tile5.active() && ((int) tile5.type == index1 && (int) tile5.slope() == 1))
                          index3 = index1;
                        if (index2 == -1 && tile6.active() && ((int) tile6.type == index1 && (int) tile6.slope() == 2))
                          index2 = index1;
                        if (index3 == index1 && (int) tile1.slope() == 2 && index2 != index1)
                          index2 = -1;
                        if (index2 == index1 && (int) tile2.slope() == 1 && index3 != index1)
                          index3 = -1;
                        rectangle.X = (int) centerTile.slope() != 1 ? ((int) centerTile.slope() != 2 ? (index3 != index1 || index2 != index1 ? (index3 != index1 || index2 != -1 ? (index3 != -1 || index2 != index1 ? (index3 == index1 || index2 != index1 ? (index3 != index1 || index2 == index1 ? (index3 == index1 || index3 == -1 || index2 != -1 ? (index3 != -1 || index2 == index1 || index2 == -1 ? (__Null) 90 : (__Null) 126) : (__Null) 108) : (__Null) 72) : (__Null) 54) : ((int) tile2.slope() != 1 ? (__Null) 36 : (__Null) 288)) : ((int) tile1.slope() != 2 ? (__Null) 18 : (__Null) 270)) : ((int) tile1.slope() != 2 || (int) tile2.slope() != 1 ? ((int) tile1.slope() != 2 ? ((int) tile2.slope() != 1 ? (__Null) 0 : (__Null) 234) : (__Null) 216) : (__Null) 252)) : (!TileID.Sets.Platforms[(int) tile1.type] || (int) tile1.slope() != 0 ? (tile3.active() || TileID.Sets.Platforms[(int) tile3.type] && (int) tile3.slope() != 1 ? (tile2.active() || TileID.Sets.Platforms[(int) tile6.type] && (int) tile6.slope() == 2 ? (__Null) 144 : (__Null) 378) : (tile2.active() || TileID.Sets.Platforms[(int) tile6.type] && (int) tile6.slope() == 2 ? (__Null) 342 : (__Null) 414)) : (__Null) 450)) : (!TileID.Sets.Platforms[(int) tile2.type] || (int) tile2.slope() != 0 ? (tile4.active() || TileID.Sets.Platforms[(int) tile4.type] && (int) tile4.slope() != 2 ? (tile1.active() || TileID.Sets.Platforms[(int) tile5.type] && (int) tile5.slope() == 1 ? (__Null) 180 : (__Null) 396) : (tile1.active() || TileID.Sets.Platforms[(int) tile5.type] && (int) tile5.slope() == 1 ? (__Null) 360 : (__Null) 432)) : (__Null) 468);
                        centerTile.frameX = (short) rectangle.X;
                        return;
                      }
                      if (index1 == 233 || index1 == 236 || index1 == 238)
                      {
                        WorldGen.CheckJunglePlant(i, j, index1);
                        return;
                      }
                      if (index1 == 240 || index1 == 440)
                      {
                        WorldGen.Check3x3Wall(i, j);
                        return;
                      }
                      if (index1 == 245)
                      {
                        WorldGen.Check2x3Wall(i, j);
                        return;
                      }
                      if (index1 == 246)
                      {
                        WorldGen.Check3x2Wall(i, j);
                        return;
                      }
                      if (index1 == 241)
                      {
                        WorldGen.Check4x3Wall(i, j);
                        return;
                      }
                      if (index1 == 242)
                      {
                        WorldGen.Check6x4Wall(i, j);
                        return;
                      }
                      if (index1 == 464 || index1 == 466)
                      {
                        WorldGen.Check5x4(i, j, index1);
                        return;
                      }
                      if (index1 == 334)
                      {
                        WorldGen.CheckWeaponsRack(i, j);
                        return;
                      }
                      if (index1 == 34 || index1 == 454)
                      {
                        WorldGen.CheckChand(i, j, index1);
                        return;
                      }
                      if (index1 == 106 || index1 == 212 || (index1 == 219 || index1 == 220) || (index1 == 228 || index1 == 231 || (index1 == 243 || index1 == 247)) || (index1 == 283 || index1 >= 300 && index1 <= 308 || (index1 == 354 || index1 == 406 || (index1 == 412 || index1 == 355))) || (index1 == 452 || index1 == 455))
                      {
                        WorldGen.Check3x3(i, j, (int) (ushort) index1);
                        return;
                      }
                      if (index1 == 15 || index1 == 20 || (index1 == 216 || index1 == 338) || index1 == 390)
                      {
                        WorldGen.Check1x2(i, j, (ushort) index1);
                        return;
                      }
                      if (index1 == 14 || index1 == 469 || (index1 == 17 || index1 == 26) || (index1 == 77 || index1 == 86 || (index1 == 87 || index1 == 377)) || (index1 == 88 || index1 == 89 || (index1 == 114 || index1 == 133) || (index1 == 186 || index1 == 187 || (index1 == 215 || index1 == 217))) || (index1 == 218 || index1 == 237 || (index1 == 244 || index1 == 285) || (index1 == 286 || index1 == 298 || (index1 == 299 || index1 == 310)) || (index1 == 339 || index1 >= 361 && index1 <= 364 || (index1 >= 391 && index1 <= 394 || index1 == 405))))
                      {
                        WorldGen.Check3x2(i, j, (int) (ushort) index1);
                        return;
                      }
                      if (index1 == 135 || index1 == 144 || (index1 == 141 || index1 == 210) || (index1 == 239 || index1 == 36 || index1 == 428))
                      {
                        WorldGen.Check1x1(i, j, index1);
                        return;
                      }
                      if (index1 == 419 || index1 == 420 || (index1 == 423 || index1 == 424) || (index1 == 429 || index1 == 445))
                      {
                        WorldGen.CheckLogicTiles(i, j, index1);
                        return;
                      }
                      if (index1 == 16 || index1 == 18 || (index1 == 29 || index1 == 103) || (index1 == 134 || index1 == 462))
                      {
                        WorldGen.Check2x1(i, j, (ushort) index1);
                        return;
                      }
                      if (index1 == 13 || index1 == 33 || (index1 == 50 || index1 == 78) || (index1 == 174 || index1 == 372))
                      {
                        WorldGen.CheckOnTable1x1(i, j, (int) (byte) index1);
                        return;
                      }
                      if (TileID.Sets.BasicChest[index1])
                      {
                        WorldGen.CheckChest(i, j, index1);
                        return;
                      }
                      if (index1 == 128)
                      {
                        WorldGen.CheckMan(i, j);
                        return;
                      }
                      if (index1 == 269)
                      {
                        WorldGen.CheckWoman(i, j);
                        return;
                      }
                      if (index1 == 27)
                      {
                        WorldGen.CheckSunflower(i, j, 27);
                        return;
                      }
                      if (index1 == 28)
                      {
                        WorldGen.CheckPot(i, j, 28);
                        return;
                      }
                      if (index1 == 171)
                      {
                        WorldGen.CheckXmasTree(i, j);
                        return;
                      }
                      if (index1 == 254 || TileID.Sets.BasicChestFake[index1] || index1 == 457)
                      {
                        WorldGen.Check2x2Style(i, j, index1);
                        return;
                      }
                      if (index1 == 335 || index1 == 411)
                      {
                        WorldGen.Check2x2(i, j, index1);
                        return;
                      }
                      if (index1 == 132 || index1 == 138 || (index1 == 142 || index1 == 143) || (index1 >= 288 && index1 <= 295 || index1 >= 316 && index1 <= 318) || (index1 == 172 || index1 == 360))
                      {
                        WorldGen.Check2x2(i, j, index1);
                        return;
                      }
                      if (index1 == 376 || index1 == 443 || index1 == 444)
                      {
                        WorldGen.CheckSuper(i, j, index1);
                        return;
                      }
                      if (index1 == 91)
                      {
                        WorldGen.CheckBanner(i, j, (byte) index1);
                        return;
                      }
                      if (index1 == 139 || index1 == 35)
                      {
                        WorldGen.CheckMB(i, j, (int) (byte) index1);
                        return;
                      }
                      if (index1 == 386 || index1 == 387)
                      {
                        WorldGen.CheckTrapDoor(i, j, index1);
                        return;
                      }
                      if (index1 == 389 || index1 == 388)
                      {
                        WorldGen.CheckTallGate(i, j, index1);
                        return;
                      }
                      if (index1 == 92 || index1 == 93 || index1 == 453)
                      {
                        WorldGen.Check1xX(i, j, (short) index1);
                        return;
                      }
                      if (index1 == 104 || index1 == 105 || (index1 == 207 || index1 == 320) || (index1 == 337 || index1 == 349 || (index1 == 356 || index1 == 378)) || (index1 == 410 || index1 == 456 || index1 == 465))
                      {
                        WorldGen.Check2xX(i, j, (ushort) index1);
                        return;
                      }
                      if (index1 == 101 || index1 == 102 || index1 == 463)
                      {
                        WorldGen.Check3x4(i, j, index1);
                        return;
                      }
                      if (index1 == 42 || index1 == 270 || index1 == 271)
                      {
                        WorldGen.Check1x2Top(i, j, (ushort) index1);
                        return;
                      }
                      if (index1 == 55 || index1 == 85 || (index1 == 395 || index1 == 425))
                      {
                        WorldGen.CheckSign(i, j, (ushort) index1);
                        return;
                      }
                      if (index1 == 209)
                      {
                        WorldGen.CheckCannon(i, j, index1);
                        return;
                      }
                      if (index1 == 79 || index1 == 90)
                      {
                        WorldGen.Check4x2(i, j, index1);
                        return;
                      }
                      if (index1 == 94 || index1 == 95 || (index1 == 97 || index1 == 319) || (index1 == 98 || index1 == 99 || (index1 == 100 || index1 == 125)) || (index1 == 126 || index1 == 173 || (index1 == 282 || index1 == 287)))
                      {
                        WorldGen.Check2x2(i, j, index1);
                        return;
                      }
                      if (index1 == 96)
                      {
                        WorldGen.Check2x2Style(i, j, index1);
                        return;
                      }
                      if (index1 == 81)
                      {
                        Tile tile1 = Main.tile[i, j - 1];
                        Tile tile2 = Main.tile[i, j + 1];
                        Tile tile3 = Main.tile[i - 1, j];
                        Tile tile4 = Main.tile[i + 1, j];
                        int index2 = -1;
                        int num = -1;
                        if (tile1 != null && tile1.active())
                          num = (int) tile1.type;
                        if (tile2 != null && tile2.active())
                          index2 = (int) tile2.type;
                        if (num != -1)
                        {
                          WorldGen.KillTile(i, j, false, false, false);
                          return;
                        }
                        if (index2 >= 0 && Main.tileSolid[index2] && (!tile2.halfBrick() && !tile2.topSlope()))
                          return;
                        WorldGen.KillTile(i, j, false, false, false);
                        return;
                      }
                      if (Main.tileAlch[index1])
                      {
                        WorldGen.CheckAlch(i, j);
                        return;
                      }
                      if (index1 == 72)
                      {
                        Tile tile1 = Main.tile[i, j - 1];
                        Tile tile2 = Main.tile[i, j + 1];
                        int num1 = -1;
                        int num2 = -1;
                        if (tile1 != null && tile1.active())
                          num2 = (int) tile1.type;
                        if (tile2 != null && tile2.active())
                          num1 = (int) tile2.type;
                        if (num1 != index1 && num1 != 70)
                        {
                          WorldGen.KillTile(i, j, false, false, false);
                          return;
                        }
                        if (num2 == index1 || (int) centerTile.frameX != 0)
                          return;
                        centerTile.frameNumber((byte) WorldGen.genRand.Next(3));
                        if ((int) centerTile.frameNumber() == 0)
                        {
                          centerTile.frameX = (short) 18;
                          centerTile.frameY = (short) 0;
                        }
                        if ((int) centerTile.frameNumber() == 1)
                        {
                          centerTile.frameX = (short) 18;
                          centerTile.frameY = (short) 18;
                        }
                        if ((int) centerTile.frameNumber() != 2)
                          return;
                        centerTile.frameX = (short) 18;
                        centerTile.frameY = (short) 36;
                        return;
                      }
                      if (index1 == 5)
                      {
                        WorldGen.CheckTree(i, j);
                        return;
                      }
                      if (index1 != 323)
                        return;
                      WorldGen.CheckPalmTree(i, j);
                      return;
                    }
                    if (index1 >= (int) byte.MaxValue && index1 <= 268 || index1 == 385 || index1 >= 446 && index1 <= 448)
                    {
                      Framing.SelfFrame8Way(i, j, centerTile, resetFrame);
                      return;
                    }
                    Tile tile9 = Main.tile[i, j - 1];
                    Tile tile10 = Main.tile[i, j + 1];
                    Tile tile11 = Main.tile[i - 1, j];
                    Tile tile12 = Main.tile[i + 1, j];
                    Tile tile13 = Main.tile[i - 1, j + 1];
                    Tile tile14 = Main.tile[i + 1, j + 1];
                    Tile tile15 = Main.tile[i - 1, j - 1];
                    Tile tile16 = Main.tile[i + 1, j - 1];
                    int upLeft = -1;
                    int up = -1;
                    int upRight = -1;
                    int left = -1;
                    int right = -1;
                    int downLeft = -1;
                    int down = -1;
                    int downRight = -1;
                    if (tile11 != null && tile11.active())
                    {
                      left = !Main.tileStone[(int) tile11.type] ? (int) tile11.type : 1;
                      if ((int) tile11.slope() == 1 || (int) tile11.slope() == 3)
                        left = -1;
                    }
                    if (tile12 != null && tile12.active())
                    {
                      right = !Main.tileStone[(int) tile12.type] ? (int) tile12.type : 1;
                      if ((int) tile12.slope() == 2 || (int) tile12.slope() == 4)
                        right = -1;
                    }
                    if (tile9 != null && tile9.active())
                    {
                      up = !Main.tileStone[(int) tile9.type] ? (int) tile9.type : 1;
                      if ((int) tile9.slope() == 3 || (int) tile9.slope() == 4)
                        up = -1;
                    }
                    if (tile10 != null && tile10.active())
                    {
                      down = !Main.tileStone[(int) tile10.type] ? (int) tile10.type : 1;
                      if ((int) tile10.slope() == 1 || (int) tile10.slope() == 2)
                        down = -1;
                    }
                    if (tile15 != null && tile15.active())
                      upLeft = !Main.tileStone[(int) tile15.type] ? (int) tile15.type : 1;
                    if (tile16 != null && tile16.active())
                      upRight = !Main.tileStone[(int) tile16.type] ? (int) tile16.type : 1;
                    if (tile13 != null && tile13.active())
                      downLeft = !Main.tileStone[(int) tile13.type] ? (int) tile13.type : 1;
                    if (tile14 != null && tile14.active())
                      downRight = !Main.tileStone[(int) tile14.type] ? (int) tile14.type : 1;
                    if ((int) centerTile.slope() == 2)
                    {
                      up = -1;
                      left = -1;
                    }
                    if ((int) centerTile.slope() == 1)
                    {
                      up = -1;
                      right = -1;
                    }
                    if ((int) centerTile.slope() == 4)
                    {
                      down = -1;
                      left = -1;
                    }
                    if ((int) centerTile.slope() == 3)
                    {
                      down = -1;
                      right = -1;
                    }
                    if (index1 == 147)
                      WorldGen.TileMergeAttempt(index1, Main.tileBrick, TileID.Sets.Ices, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 161 || index1 == 163 || (index1 == 164 || index1 == 200))
                      WorldGen.TileMergeAttempt(index1, Main.tileBrick, TileID.Sets.Snow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 162)
                      WorldGen.TileMergeAttempt(index1, Main.tileBrick, TileID.Sets.IcesSnow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (Main.tileBrick[index1])
                    {
                      if (index1 == 60 || index1 == 70)
                        WorldGen.TileMergeAttempt(index1, Main.tileBrick, TileID.Sets.Mud, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      else
                        WorldGen.TileMergeAttempt(index1, Main.tileBrick, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (Main.tilePile[index1])
                      WorldGen.TileMergeAttempt(index1, Main.tilePile, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    if ((index1 == 1 || Main.tileMoss[index1] || (index1 == 117 || index1 == 25) || index1 == 203) && down == 165)
                    {
                      if ((int) tile10.frameY == 72)
                        down = index1;
                      else if ((int) tile10.frameY == 0)
                        down = index1;
                    }
                    if ((index1 == 1 || Main.tileMoss[index1] || (index1 == 117 || index1 == 25) || index1 == 203) && up == 165)
                    {
                      if ((int) tile9.frameY == 90)
                        up = index1;
                      else if ((int) tile9.frameY == 54)
                        up = index1;
                    }
                    if (index1 == 225)
                    {
                      if (down == 165)
                        down = index1;
                      if (up == 165)
                        up = index1;
                    }
                    if ((index1 == 200 || index1 == 161 || (index1 == 163 || index1 == 164)) && down == 165)
                      down = index1;
                    if (((int) centerTile.slope() == 1 || (int) centerTile.slope() == 2) && (down > -1 && !TileID.Sets.Platforms[down]))
                      down = index1;
                    if (up > -1 && ((int) tile9.slope() == 1 || (int) tile9.slope() == 2) && !TileID.Sets.Platforms[up])
                      up = index1;
                    if (((int) centerTile.slope() == 3 || (int) centerTile.slope() == 4) && (up > -1 && !TileID.Sets.Platforms[up]))
                      up = index1;
                    if (down > -1 && ((int) tile10.slope() == 3 || (int) tile10.slope() == 4) && !TileID.Sets.Platforms[down])
                      down = index1;
                    if (index1 == 124)
                    {
                      if (up > -1 && Main.tileSolid[up])
                        up = index1;
                      if (down > -1 && Main.tileSolid[down])
                        down = index1;
                    }
                    if (up > -1 && tile9.halfBrick() && !TileID.Sets.Platforms[up])
                      up = index1;
                    if (left > -1 && tile11.halfBrick())
                    {
                      if (centerTile.halfBrick())
                        left = index1;
                      else if ((int) tile11.type != index1)
                        left = -1;
                    }
                    if (right > -1 && tile12.halfBrick())
                    {
                      if (centerTile.halfBrick())
                        right = index1;
                      else if ((int) tile12.type != index1)
                        right = -1;
                    }
                    if (centerTile.halfBrick())
                    {
                      if (left != index1)
                        left = -1;
                      if (right != index1)
                        right = -1;
                      up = -1;
                    }
                    if (tile10 != null && tile10.halfBrick())
                      down = -1;
                    if (!Main.tileSolid[index1])
                    {
                      if (index1 == 49)
                      {
                        WorldGen.CheckOnTable1x1(i, j, (int) (byte) index1);
                        return;
                      }
                      if (index1 == 80)
                      {
                        WorldGen.CactusFrame(i, j);
                        return;
                      }
                    }
                    WorldGen.mergeUp = false;
                    WorldGen.mergeDown = false;
                    WorldGen.mergeLeft = false;
                    WorldGen.mergeRight = false;
                    int num6;
                    if (resetFrame)
                    {
                      num6 = WorldGen.genRand.Next(0, 3);
                      centerTile.frameNumber((byte) num6);
                    }
                    else
                      num6 = (int) centerTile.frameNumber();
                    if ((int) Main.tileLargeFrames[index1] == 1)
                      num6 = new int[4, 3]
                      {
                        {
                          2,
                          4,
                          2
                        },
                        {
                          1,
                          3,
                          1
                        },
                        {
                          2,
                          2,
                          4
                        },
                        {
                          1,
                          1,
                          3
                        }
                      }[j % 4, i % 3] - 1;
                    WorldGen.TileMergeAttempt(index1, Main.tileBlendAll, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    if (Main.tileBlendAll[index1])
                      WorldGen.TileMergeAttempt(index1, Main.tileSolid, Main.tileSolidTop, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    if (index1 == 0)
                    {
                      if (up > -1 && Main.tileMergeDirt[up])
                      {
                        WorldGen.TileFrame(i, j - 1, false, false);
                        if (WorldGen.mergeDown)
                          up = index1;
                      }
                      else if (up == 147)
                      {
                        WorldGen.TileFrame(i, j - 1, false, false);
                        if (WorldGen.mergeDown)
                          up = index1;
                      }
                      if (down > -1 && Main.tileMergeDirt[down])
                      {
                        WorldGen.TileFrame(i, j + 1, false, false);
                        if (WorldGen.mergeUp)
                          down = index1;
                      }
                      else if (down == 147)
                      {
                        WorldGen.TileFrame(i, j + 1, false, false);
                        if (WorldGen.mergeUp)
                          down = index1;
                      }
                      if (left > -1 && Main.tileMergeDirt[left])
                      {
                        WorldGen.TileFrame(i - 1, j, false, false);
                        if (WorldGen.mergeRight)
                          left = index1;
                      }
                      else if (left == 147)
                      {
                        WorldGen.TileFrame(i - 1, j, false, false);
                        if (WorldGen.mergeRight)
                          left = index1;
                      }
                      if (right > -1 && Main.tileMergeDirt[right])
                      {
                        WorldGen.TileFrame(i + 1, j, false, false);
                        if (WorldGen.mergeLeft)
                          right = index1;
                      }
                      else if (right == 147)
                      {
                        WorldGen.TileFrame(i + 1, j, false, false);
                        if (WorldGen.mergeLeft)
                          right = index1;
                      }
                      if (up == 2 || up == 23 || (up == 109 || up == 199))
                        up = index1;
                      if (down == 2 || down == 23 || (down == 109 || down == 199))
                        down = index1;
                      if (left == 2 || left == 23 || (left == 109 || left == 199))
                        left = index1;
                      if (right == 2 || right == 23 || (right == 109 || right == 199))
                        right = index1;
                      if (upLeft > -1 && Main.tileMergeDirt[upLeft])
                        upLeft = index1;
                      else if (upLeft == 2 || upLeft == 23 || (upLeft == 109 || upLeft == 199))
                        upLeft = index1;
                      if (upRight > -1 && Main.tileMergeDirt[upRight])
                        upRight = index1;
                      else if (upRight == 2 || upRight == 23 || (upRight == 109 || upRight == 199))
                        upRight = index1;
                      if (downLeft > -1 && Main.tileMergeDirt[downLeft])
                        downLeft = index1;
                      else if (downLeft == 2 || downLeft == 23 || (downLeft == 109 || downLeft == 199))
                        downLeft = index1;
                      if (downRight > -1 && Main.tileMergeDirt[downRight])
                        downRight = index1;
                      else if (downRight == 2 || downRight == 23 || (downRight == 109 || downRight == 199))
                        downRight = index1;
                      WorldGen.TileMergeAttempt(-2, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttempt(index1, 191, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 213)
                    {
                      if (up > -1 && Main.tileSolid[up] && !Main.tileSolidTop[up])
                        up = index1;
                      if (down > -1 && Main.tileSolid[down])
                        down = index1;
                      if (up != index1)
                      {
                        if (left > -1 && Main.tileSolid[left])
                          left = index1;
                        if (right > -1 && Main.tileSolid[right])
                          right = index1;
                      }
                    }
                    else if (index1 == 53)
                    {
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 397, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 396, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 234)
                    {
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 399, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 401, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 112)
                    {
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 398, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 400, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 116)
                    {
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 402, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 403, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    if (Main.tileMergeDirt[index1])
                    {
                      WorldGen.TileMergeAttempt(-2, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      if (index1 == 1)
                      {
                        if ((double) j > Main.rockLayer)
                          WorldGen.TileMergeAttemptFrametest(i, j, index1, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                        WorldGen.TileMergeAttemptFrametest(i, j, index1, 57, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      }
                    }
                    else if (index1 == 58 || index1 == 76 || index1 == 75)
                      WorldGen.TileMergeAttempt(-2, 57, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 57)
                    {
                      WorldGen.TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, TileID.Sets.HellSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 59)
                    {
                      if ((double) j > Main.rockLayer)
                        WorldGen.TileMergeAttempt(-2, 1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttempt(index1, TileID.Sets.GrassSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, TileID.Sets.JungleSpecial, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      if ((double) j < Main.rockLayer)
                        WorldGen.TileMergeAttemptFrametest(i, j, index1, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      else
                        WorldGen.TileMergeAttempt(index1, 0, ref up, ref down, ref left, ref right);
                    }
                    else if (index1 == 211)
                    {
                      WorldGen.TileMergeAttempt(59, 60, ref up, ref down, ref left, ref right);
                      WorldGen.TileMergeAttempt(-2, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 225 || index1 == 226)
                      WorldGen.TileMergeAttempt(-2, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 60)
                      WorldGen.TileMergeAttempt(59, 211, ref up, ref down, ref left, ref right);
                    else if (index1 == 189)
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 196, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 196)
                      WorldGen.TileMergeAttempt(-2, 189, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 147)
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, TileID.Sets.IcesSlush, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 161 || index1 == 163 || (index1 == 164 || index1 == 200) || index1 == 224)
                      WorldGen.TileMergeAttempt(-2, 147, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 162)
                      WorldGen.TileMergeAttempt(-2, TileID.Sets.IcesSnow, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 32)
                    {
                      if (down == 23)
                        down = index1;
                    }
                    else if (index1 == 352)
                    {
                      if (down == 199)
                        down = index1;
                    }
                    else if (index1 == 69)
                    {
                      if (down == 60)
                        down = index1;
                    }
                    else if (index1 == 51)
                      WorldGen.TileMergeAttempt(index1, TileID.Sets.AllTiles, Main.tileNoAttach, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 192)
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 191, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 191)
                    {
                      WorldGen.TileMergeAttempt(-2, 192, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttempt(index1, 0, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 384)
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 383, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 383)
                    {
                      WorldGen.TileMergeAttempt(-2, 384, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttempt(index1, 59, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 407)
                      WorldGen.TileMergeAttempt(-2, 404, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    else if (index1 == 404)
                    {
                      WorldGen.TileMergeAttempt(-2, 396, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 407, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 397)
                    {
                      WorldGen.TileMergeAttempt(-2, 53, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 396, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 396)
                    {
                      WorldGen.TileMergeAttempt(-2, 397, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttempt(-2, 53, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 404, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 398)
                    {
                      WorldGen.TileMergeAttempt(-2, 112, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 400, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 400)
                    {
                      WorldGen.TileMergeAttempt(-2, 398, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttempt(-2, 112, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 399)
                    {
                      WorldGen.TileMergeAttempt(-2, 234, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 401, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 401)
                    {
                      WorldGen.TileMergeAttempt(-2, 399, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttempt(-2, 234, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 402)
                    {
                      WorldGen.TileMergeAttempt(-2, 116, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttemptFrametest(i, j, index1, 403, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    else if (index1 == 403)
                    {
                      WorldGen.TileMergeAttempt(-2, 402, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      WorldGen.TileMergeAttempt(-2, 116, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    if (Main.tileStone[index1] || index1 == 1)
                      WorldGen.TileMergeAttempt(index1, Main.tileMoss, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    bool flag6 = false;
                    if (up == -2 && (int) centerTile.color() != (int) tile9.color())
                    {
                      up = index1;
                      WorldGen.mergeUp = true;
                    }
                    if (down == -2 && (int) centerTile.color() != (int) tile10.color())
                    {
                      down = index1;
                      WorldGen.mergeDown = true;
                    }
                    if (left == -2 && (int) centerTile.color() != (int) tile11.color())
                    {
                      left = index1;
                      WorldGen.mergeLeft = true;
                    }
                    if (right == -2 && (int) centerTile.color() != (int) tile12.color())
                    {
                      right = index1;
                      WorldGen.mergeRight = true;
                    }
                    if (index1 == 2 || index1 == 23 || (index1 == 60 || index1 == 70) || (index1 == 109 || index1 == 199 || (Main.tileMoss[index1] || TileID.Sets.NeedsGrassFraming[index1])))
                    {
                      flag6 = true;
                      WorldGen.TileMergeAttemptWeird(index1, -1, Main.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      int num1 = TileID.Sets.NeedsGrassFramingDirt[index1];
                      if (index1 == 60 || index1 == 70)
                        num1 = 59;
                      else if (Main.tileMoss[index1])
                        num1 = 1;
                      else if (index1 == 2)
                        WorldGen.TileMergeAttempt(num1, 23, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      else if (index1 == 23)
                        WorldGen.TileMergeAttempt(num1, 2, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      if (up != index1 && up != num1 && (down == index1 || down == num1))
                      {
                        if (left == num1 && right == index1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 0;
                            rectangle.Y = (__Null) 198;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 18;
                            rectangle.Y = (__Null) 198;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 198;
                          }
                        }
                        else if (left == index1 && right == num1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 198;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 198;
                          }
                          else
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 198;
                          }
                        }
                      }
                      else if (down != index1 && down != num1 && (up == index1 || up == num1))
                      {
                        if (left == num1 && right == index1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 0;
                            rectangle.Y = (__Null) 216;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 18;
                            rectangle.Y = (__Null) 216;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 216;
                          }
                        }
                        else if (left == index1 && right == num1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 216;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 216;
                          }
                          else
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 216;
                          }
                        }
                      }
                      else if (left != index1 && left != num1 && (right == index1 || right == num1))
                      {
                        if (up == num1 && down == index1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 144;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 162;
                          }
                          else
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 180;
                          }
                        }
                        else if (down == index1 && up == num1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 108;
                          }
                          else
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 126;
                          }
                        }
                      }
                      else if (right != index1 && right != num1 && (left == index1 || left == num1))
                      {
                        if (up == num1 && down == index1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 144;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 162;
                          }
                          else
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 180;
                          }
                        }
                        else if (down == index1 && right == up)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 108;
                          }
                          else
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 126;
                          }
                        }
                      }
                      else if (up == index1 && down == index1 && (left == index1 && right == index1))
                      {
                        if (upLeft != index1 && upRight != index1 && (downLeft != index1 && downRight != index1))
                        {
                          if (downRight == num1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 108;
                              rectangle.Y = (__Null) 324;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 126;
                              rectangle.Y = (__Null) 324;
                            }
                            else
                            {
                              rectangle.X = (__Null) 144;
                              rectangle.Y = (__Null) 324;
                            }
                          }
                          else if (upRight == num1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 108;
                              rectangle.Y = (__Null) 342;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 126;
                              rectangle.Y = (__Null) 342;
                            }
                            else
                            {
                              rectangle.X = (__Null) 144;
                              rectangle.Y = (__Null) 342;
                            }
                          }
                          else if (downLeft == num1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 108;
                              rectangle.Y = (__Null) 360;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 126;
                              rectangle.Y = (__Null) 360;
                            }
                            else
                            {
                              rectangle.X = (__Null) 144;
                              rectangle.Y = (__Null) 360;
                            }
                          }
                          else if (upLeft == num1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 108;
                              rectangle.Y = (__Null) 378;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 126;
                              rectangle.Y = (__Null) 378;
                            }
                            else
                            {
                              rectangle.X = (__Null) 144;
                              rectangle.Y = (__Null) 378;
                            }
                          }
                          else if (num6 == 0)
                          {
                            rectangle.X = (__Null) 144;
                            rectangle.Y = (__Null) 234;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 198;
                            rectangle.Y = (__Null) 234;
                          }
                          else
                          {
                            rectangle.X = (__Null) 252;
                            rectangle.Y = (__Null) 234;
                          }
                        }
                        else if (upLeft != index1 && downRight != index1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 306;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 306;
                          }
                          else
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 306;
                          }
                        }
                        else if (upRight != index1 && downLeft != index1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 306;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 108;
                            rectangle.Y = (__Null) 306;
                          }
                          else
                          {
                            rectangle.X = (__Null) 126;
                            rectangle.Y = (__Null) 306;
                          }
                        }
                        else if (upLeft != index1 && upRight == index1 && (downLeft == index1 && downRight == index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 108;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 180;
                          }
                        }
                        else if (upLeft == index1 && upRight != index1 && (downLeft == index1 && downRight == index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 108;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 180;
                          }
                        }
                        else if (upLeft == index1 && upRight == index1 && (downLeft != index1 && downRight == index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 126;
                          }
                          else
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 162;
                          }
                        }
                        else if (upLeft == index1 && upRight == index1 && (downLeft == index1 && downRight != index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 126;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 162;
                          }
                        }
                      }
                      else if (up == index1 && down == num1 && (left == index1 && right == index1) && (upLeft == -1 && upRight == -1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 108;
                          rectangle.Y = (__Null) 18;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 126;
                          rectangle.Y = (__Null) 18;
                        }
                        else
                        {
                          rectangle.X = (__Null) 144;
                          rectangle.Y = (__Null) 18;
                        }
                      }
                      else if (up == num1 && down == index1 && (left == index1 && right == index1) && (downLeft == -1 && downRight == -1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 108;
                          rectangle.Y = (__Null) 36;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 126;
                          rectangle.Y = (__Null) 36;
                        }
                        else
                        {
                          rectangle.X = (__Null) 144;
                          rectangle.Y = (__Null) 36;
                        }
                      }
                      else if (up == index1 && down == index1 && (left == num1 && right == index1) && (upRight == -1 && downRight == -1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 198;
                          rectangle.Y = (__Null) 0;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 198;
                          rectangle.Y = (__Null) 18;
                        }
                        else
                        {
                          rectangle.X = (__Null) 198;
                          rectangle.Y = (__Null) 36;
                        }
                      }
                      else if (up == index1 && down == index1 && (left == index1 && right == num1) && (upLeft == -1 && downLeft == -1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 180;
                          rectangle.Y = (__Null) 0;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 180;
                          rectangle.Y = (__Null) 18;
                        }
                        else
                        {
                          rectangle.X = (__Null) 180;
                          rectangle.Y = (__Null) 36;
                        }
                      }
                      else if (up == index1 && down == num1 && (left == index1 && right == index1))
                      {
                        if (upRight != -1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 108;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 180;
                          }
                        }
                        else if (upLeft != -1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 108;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 180;
                          }
                        }
                      }
                      else if (up == num1 && down == index1 && (left == index1 && right == index1))
                      {
                        if (downRight != -1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 126;
                          }
                          else
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 162;
                          }
                        }
                        else if (downLeft != -1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 126;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 162;
                          }
                        }
                      }
                      else if (up == index1 && down == index1 && (left == index1 && right == num1))
                      {
                        if (upLeft != -1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 126;
                          }
                          else
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 162;
                          }
                        }
                        else if (downLeft != -1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 108;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 180;
                          }
                        }
                      }
                      else if (up == index1 && down == index1 && (left == num1 && right == index1))
                      {
                        if (upRight != -1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 126;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 162;
                          }
                        }
                        else if (downRight != -1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 108;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 180;
                          }
                        }
                      }
                      else if (up == num1 && down == index1 && (left == index1 && right == index1) || up == index1 && down == num1 && (left == index1 && right == index1) || (up == index1 && down == index1 && (left == num1 && right == index1) || up == index1 && down == index1 && (left == index1 && right == num1)))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 18;
                          rectangle.Y = (__Null) 18;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 36;
                          rectangle.Y = (__Null) 18;
                        }
                        else
                        {
                          rectangle.X = (__Null) 54;
                          rectangle.Y = (__Null) 18;
                        }
                      }
                      if ((up == index1 || up == num1) && (down == index1 || down == num1) && ((left == index1 || left == num1) && (right == index1 || right == num1)))
                      {
                        if (upLeft != index1 && upLeft != num1 && (upRight == index1 || upRight == num1) && ((downLeft == index1 || downLeft == num1) && (downRight == index1 || downRight == num1)))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 108;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 180;
                          }
                        }
                        else if (upRight != index1 && upRight != num1 && (upLeft == index1 || upLeft == num1) && ((downLeft == index1 || downLeft == num1) && (downRight == index1 || downRight == num1)))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 108;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 180;
                          }
                        }
                        else if (downLeft != index1 && downLeft != num1 && (upLeft == index1 || upLeft == num1) && ((upRight == index1 || upRight == num1) && (downRight == index1 || downRight == num1)))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 126;
                          }
                          else
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 162;
                          }
                        }
                        else if (downRight != index1 && downRight != num1 && (upLeft == index1 || upLeft == num1) && ((downLeft == index1 || downLeft == num1) && (upRight == index1 || upRight == num1)))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 126;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 162;
                          }
                        }
                      }
                      if (up != num1 && up != index1 && (down == index1 && left != num1) && (left != index1 && right == index1 && (downRight != num1 && downRight != index1)))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 90;
                          rectangle.Y = (__Null) 270;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 108;
                          rectangle.Y = (__Null) 270;
                        }
                        else
                        {
                          rectangle.X = (__Null) 126;
                          rectangle.Y = (__Null) 270;
                        }
                      }
                      else if (up != num1 && up != index1 && (down == index1 && left == index1) && (right != num1 && right != index1 && (downLeft != num1 && downLeft != index1)))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 144;
                          rectangle.Y = (__Null) 270;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 162;
                          rectangle.Y = (__Null) 270;
                        }
                        else
                        {
                          rectangle.X = (__Null) 180;
                          rectangle.Y = (__Null) 270;
                        }
                      }
                      else if (down != num1 && down != index1 && (up == index1 && left != num1) && (left != index1 && right == index1 && (upRight != num1 && upRight != index1)))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 90;
                          rectangle.Y = (__Null) 288;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 108;
                          rectangle.Y = (__Null) 288;
                        }
                        else
                        {
                          rectangle.X = (__Null) 126;
                          rectangle.Y = (__Null) 288;
                        }
                      }
                      else if (down != num1 && down != index1 && (up == index1 && left == index1) && (right != num1 && right != index1 && (upLeft != num1 && upLeft != index1)))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 144;
                          rectangle.Y = (__Null) 288;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 162;
                          rectangle.Y = (__Null) 288;
                        }
                        else
                        {
                          rectangle.X = (__Null) 180;
                          rectangle.Y = (__Null) 288;
                        }
                      }
                      else if (up != index1 && up != num1 && (down == index1 && left == index1) && (right == index1 && downLeft != index1 && (downLeft != num1 && downRight != index1)) && downRight != num1)
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 144;
                          rectangle.Y = (__Null) 216;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 198;
                          rectangle.Y = (__Null) 216;
                        }
                        else
                        {
                          rectangle.X = (__Null) 252;
                          rectangle.Y = (__Null) 216;
                        }
                      }
                      else if (down != index1 && down != num1 && (up == index1 && left == index1) && (right == index1 && upLeft != index1 && (upLeft != num1 && upRight != index1)) && upRight != num1)
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 144;
                          rectangle.Y = (__Null) 252;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 198;
                          rectangle.Y = (__Null) 252;
                        }
                        else
                        {
                          rectangle.X = (__Null) 252;
                          rectangle.Y = (__Null) 252;
                        }
                      }
                      else if (left != index1 && left != num1 && (down == index1 && up == index1) && (right == index1 && upRight != index1 && (upRight != num1 && downRight != index1)) && downRight != num1)
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 126;
                          rectangle.Y = (__Null) 234;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 180;
                          rectangle.Y = (__Null) 234;
                        }
                        else
                        {
                          rectangle.X = (__Null) 234;
                          rectangle.Y = (__Null) 234;
                        }
                      }
                      else if (right != index1 && right != num1 && (down == index1 && up == index1) && (left == index1 && upLeft != index1 && (upLeft != num1 && downLeft != index1)) && downLeft != num1)
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 162;
                          rectangle.Y = (__Null) 234;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 216;
                          rectangle.Y = (__Null) 234;
                        }
                        else
                        {
                          rectangle.X = (__Null) 270;
                          rectangle.Y = (__Null) 234;
                        }
                      }
                      else if (up != num1 && up != index1 && (down == num1 || down == index1) && (left == num1 && right == num1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 36;
                          rectangle.Y = (__Null) 270;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 54;
                          rectangle.Y = (__Null) 270;
                        }
                        else
                        {
                          rectangle.X = (__Null) 72;
                          rectangle.Y = (__Null) 270;
                        }
                      }
                      else if (down != num1 && down != index1 && (up == num1 || up == index1) && (left == num1 && right == num1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 36;
                          rectangle.Y = (__Null) 288;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 54;
                          rectangle.Y = (__Null) 288;
                        }
                        else
                        {
                          rectangle.X = (__Null) 72;
                          rectangle.Y = (__Null) 288;
                        }
                      }
                      else if (left != num1 && left != index1 && (right == num1 || right == index1) && (up == num1 && down == num1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 0;
                          rectangle.Y = (__Null) 270;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 0;
                          rectangle.Y = (__Null) 288;
                        }
                        else
                        {
                          rectangle.X = (__Null) 0;
                          rectangle.Y = (__Null) 306;
                        }
                      }
                      else if (right != num1 && right != index1 && (left == num1 || left == index1) && (up == num1 && down == num1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 18;
                          rectangle.Y = (__Null) 270;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 18;
                          rectangle.Y = (__Null) 288;
                        }
                        else
                        {
                          rectangle.X = (__Null) 18;
                          rectangle.Y = (__Null) 306;
                        }
                      }
                      else if (up == index1 && down == num1 && (left == num1 && right == num1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 198;
                          rectangle.Y = (__Null) 288;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 216;
                          rectangle.Y = (__Null) 288;
                        }
                        else
                        {
                          rectangle.X = (__Null) 234;
                          rectangle.Y = (__Null) 288;
                        }
                      }
                      else if (up == num1 && down == index1 && (left == num1 && right == num1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 198;
                          rectangle.Y = (__Null) 270;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 216;
                          rectangle.Y = (__Null) 270;
                        }
                        else
                        {
                          rectangle.X = (__Null) 234;
                          rectangle.Y = (__Null) 270;
                        }
                      }
                      else if (up == num1 && down == num1 && (left == index1 && right == num1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 198;
                          rectangle.Y = (__Null) 306;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 216;
                          rectangle.Y = (__Null) 306;
                        }
                        else
                        {
                          rectangle.X = (__Null) 234;
                          rectangle.Y = (__Null) 306;
                        }
                      }
                      else if (up == num1 && down == num1 && (left == num1 && right == index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 144;
                          rectangle.Y = (__Null) 306;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 162;
                          rectangle.Y = (__Null) 306;
                        }
                        else
                        {
                          rectangle.X = (__Null) 180;
                          rectangle.Y = (__Null) 306;
                        }
                      }
                      if (up != index1 && up != num1 && (down == index1 && left == index1) && right == index1)
                      {
                        if ((downLeft == num1 || downLeft == index1) && (downRight != num1 && downRight != index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 0;
                            rectangle.Y = (__Null) 324;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 18;
                            rectangle.Y = (__Null) 324;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 324;
                          }
                        }
                        else if ((downRight == num1 || downRight == index1) && (downLeft != num1 && downLeft != index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 324;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 324;
                          }
                          else
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 324;
                          }
                        }
                      }
                      else if (down != index1 && down != num1 && (up == index1 && left == index1) && right == index1)
                      {
                        if ((upLeft == num1 || upLeft == index1) && (upRight != num1 && upRight != index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 0;
                            rectangle.Y = (__Null) 342;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 18;
                            rectangle.Y = (__Null) 342;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 342;
                          }
                        }
                        else if ((upRight == num1 || upRight == index1) && (upLeft != num1 && upLeft != index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 342;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 342;
                          }
                          else
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 342;
                          }
                        }
                      }
                      else if (left != index1 && left != num1 && (up == index1 && down == index1) && right == index1)
                      {
                        if ((upRight == num1 || upRight == index1) && (downRight != num1 && downRight != index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 360;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 360;
                          }
                          else
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 360;
                          }
                        }
                        else if ((downRight == num1 || downRight == index1) && (upRight != num1 && upRight != index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 0;
                            rectangle.Y = (__Null) 360;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 18;
                            rectangle.Y = (__Null) 360;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 360;
                          }
                        }
                      }
                      else if (right != index1 && right != num1 && (up == index1 && down == index1) && left == index1)
                      {
                        if ((upLeft == num1 || upLeft == index1) && (downLeft != num1 && downLeft != index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 0;
                            rectangle.Y = (__Null) 378;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 18;
                            rectangle.Y = (__Null) 378;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 378;
                          }
                        }
                        else if ((downLeft == num1 || downLeft == index1) && (upLeft != num1 && upLeft != index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 378;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 378;
                          }
                          else
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 378;
                          }
                        }
                      }
                      if ((up == index1 || up == num1) && (down == index1 || down == num1) && ((left == index1 || left == num1) && (right == index1 || right == num1)) && (upLeft != -1 && upRight != -1 && (downLeft != -1 && downRight != -1)))
                      {
                        if ((i + j) % 2 == 1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 108;
                            rectangle.Y = (__Null) 198;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 126;
                            rectangle.Y = (__Null) 198;
                          }
                          else
                          {
                            rectangle.X = (__Null) 144;
                            rectangle.Y = (__Null) 198;
                          }
                        }
                        else if (num6 == 0)
                        {
                          rectangle.X = (__Null) 18;
                          rectangle.Y = (__Null) 18;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 36;
                          rectangle.Y = (__Null) 18;
                        }
                        else
                        {
                          rectangle.X = (__Null) 54;
                          rectangle.Y = (__Null) 18;
                        }
                      }
                      WorldGen.TileMergeAttempt(-2, num1, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    }
                    WorldGen.TileMergeAttempt(index1, Main.tileMerge[index1], ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                    if (rectangle.X == -1 && rectangle.Y == -1 && (Main.tileMergeDirt[index1] || index1 > -1 && TileID.Sets.ChecksForMerge[index1]))
                    {
                      if (!flag6)
                      {
                        flag6 = true;
                        WorldGen.TileMergeAttemptWeird(index1, -1, Main.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      }
                      if (up > -1 && up != index1)
                        up = -1;
                      if (down > -1 && down != index1)
                        down = -1;
                      if (left > -1 && left != index1)
                        left = -1;
                      if (right > -1 && right != index1)
                        right = -1;
                      if (up != -1 && down != -1 && (left != -1 && right != -1))
                      {
                        if (up == -2 && down == index1 && (left == index1 && right == index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 144;
                            rectangle.Y = (__Null) 108;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 162;
                            rectangle.Y = (__Null) 108;
                          }
                          else
                          {
                            rectangle.X = (__Null) 180;
                            rectangle.Y = (__Null) 108;
                          }
                          WorldGen.mergeUp = true;
                        }
                        else if (up == index1 && down == -2 && (left == index1 && right == index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 144;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 162;
                            rectangle.Y = (__Null) 90;
                          }
                          else
                          {
                            rectangle.X = (__Null) 180;
                            rectangle.Y = (__Null) 90;
                          }
                          WorldGen.mergeDown = true;
                        }
                        else if (up == index1 && down == index1 && (left == -2 && right == index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 162;
                            rectangle.Y = (__Null) 126;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 162;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 162;
                            rectangle.Y = (__Null) 162;
                          }
                          WorldGen.mergeLeft = true;
                        }
                        else if (up == index1 && down == index1 && (left == index1 && right == -2))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 144;
                            rectangle.Y = (__Null) 126;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 144;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 144;
                            rectangle.Y = (__Null) 162;
                          }
                          WorldGen.mergeRight = true;
                        }
                        else if (up == -2 && down == index1 && (left == -2 && right == index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 126;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 162;
                          }
                          WorldGen.mergeUp = true;
                          WorldGen.mergeLeft = true;
                        }
                        else if (up == -2 && down == index1 && (left == index1 && right == -2))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 126;
                          }
                          else
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 162;
                          }
                          WorldGen.mergeUp = true;
                          WorldGen.mergeRight = true;
                        }
                        else if (up == index1 && down == -2 && (left == -2 && right == index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 108;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 180;
                          }
                          WorldGen.mergeDown = true;
                          WorldGen.mergeLeft = true;
                        }
                        else if (up == index1 && down == -2 && (left == index1 && right == -2))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 108;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 180;
                          }
                          WorldGen.mergeDown = true;
                          WorldGen.mergeRight = true;
                        }
                        else if (up == index1 && down == index1 && (left == -2 && right == -2))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 180;
                            rectangle.Y = (__Null) 126;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 180;
                            rectangle.Y = (__Null) 144;
                          }
                          else
                          {
                            rectangle.X = (__Null) 180;
                            rectangle.Y = (__Null) 162;
                          }
                          WorldGen.mergeLeft = true;
                          WorldGen.mergeRight = true;
                        }
                        else if (up == -2 && down == -2 && (left == index1 && right == index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 144;
                            rectangle.Y = (__Null) 180;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 162;
                            rectangle.Y = (__Null) 180;
                          }
                          else
                          {
                            rectangle.X = (__Null) 180;
                            rectangle.Y = (__Null) 180;
                          }
                          WorldGen.mergeUp = true;
                          WorldGen.mergeDown = true;
                        }
                        else if (up == -2 && down == index1 && (left == -2 && right == -2))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 198;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 198;
                            rectangle.Y = (__Null) 108;
                          }
                          else
                          {
                            rectangle.X = (__Null) 198;
                            rectangle.Y = (__Null) 126;
                          }
                          WorldGen.mergeUp = true;
                          WorldGen.mergeLeft = true;
                          WorldGen.mergeRight = true;
                        }
                        else if (up == index1 && down == -2 && (left == -2 && right == -2))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 198;
                            rectangle.Y = (__Null) 144;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 198;
                            rectangle.Y = (__Null) 162;
                          }
                          else
                          {
                            rectangle.X = (__Null) 198;
                            rectangle.Y = (__Null) 180;
                          }
                          WorldGen.mergeDown = true;
                          WorldGen.mergeLeft = true;
                          WorldGen.mergeRight = true;
                        }
                        else if (up == -2 && down == -2 && (left == index1 && right == -2))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 216;
                            rectangle.Y = (__Null) 144;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 216;
                            rectangle.Y = (__Null) 162;
                          }
                          else
                          {
                            rectangle.X = (__Null) 216;
                            rectangle.Y = (__Null) 180;
                          }
                          WorldGen.mergeUp = true;
                          WorldGen.mergeDown = true;
                          WorldGen.mergeRight = true;
                        }
                        else if (up == -2 && down == -2 && (left == -2 && right == index1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 216;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 216;
                            rectangle.Y = (__Null) 108;
                          }
                          else
                          {
                            rectangle.X = (__Null) 216;
                            rectangle.Y = (__Null) 126;
                          }
                          WorldGen.mergeUp = true;
                          WorldGen.mergeDown = true;
                          WorldGen.mergeLeft = true;
                        }
                        else if (up == -2 && down == -2 && (left == -2 && right == -2))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 108;
                            rectangle.Y = (__Null) 198;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 126;
                            rectangle.Y = (__Null) 198;
                          }
                          else
                          {
                            rectangle.X = (__Null) 144;
                            rectangle.Y = (__Null) 198;
                          }
                          WorldGen.mergeUp = true;
                          WorldGen.mergeDown = true;
                          WorldGen.mergeLeft = true;
                          WorldGen.mergeRight = true;
                        }
                        else if (up == index1 && down == index1 && (left == index1 && right == index1))
                        {
                          if (upLeft == -2)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 18;
                              rectangle.Y = (__Null) 108;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 18;
                              rectangle.Y = (__Null) 144;
                            }
                            else
                            {
                              rectangle.X = (__Null) 18;
                              rectangle.Y = (__Null) 180;
                            }
                          }
                          if (upRight == -2)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 0;
                              rectangle.Y = (__Null) 108;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 0;
                              rectangle.Y = (__Null) 144;
                            }
                            else
                            {
                              rectangle.X = (__Null) 0;
                              rectangle.Y = (__Null) 180;
                            }
                          }
                          if (downLeft == -2)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 18;
                              rectangle.Y = (__Null) 90;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 18;
                              rectangle.Y = (__Null) 126;
                            }
                            else
                            {
                              rectangle.X = (__Null) 18;
                              rectangle.Y = (__Null) 162;
                            }
                          }
                          if (downRight == -2)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 0;
                              rectangle.Y = (__Null) 90;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 0;
                              rectangle.Y = (__Null) 126;
                            }
                            else
                            {
                              rectangle.X = (__Null) 0;
                              rectangle.Y = (__Null) 162;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (index1 != 2 && index1 != 23 && (index1 != 60 && index1 != 70) && (index1 != 109 && index1 != 199))
                        {
                          if (up == -1 && down == -2 && (left == index1 && right == index1))
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 234;
                              rectangle.Y = (__Null) 0;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 252;
                              rectangle.Y = (__Null) 0;
                            }
                            else
                            {
                              rectangle.X = (__Null) 270;
                              rectangle.Y = (__Null) 0;
                            }
                            WorldGen.mergeDown = true;
                          }
                          else if (up == -2 && down == -1 && (left == index1 && right == index1))
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 234;
                              rectangle.Y = (__Null) 18;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 252;
                              rectangle.Y = (__Null) 18;
                            }
                            else
                            {
                              rectangle.X = (__Null) 270;
                              rectangle.Y = (__Null) 18;
                            }
                            WorldGen.mergeUp = true;
                          }
                          else if (up == index1 && down == index1 && (left == -1 && right == -2))
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 234;
                              rectangle.Y = (__Null) 36;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 252;
                              rectangle.Y = (__Null) 36;
                            }
                            else
                            {
                              rectangle.X = (__Null) 270;
                              rectangle.Y = (__Null) 36;
                            }
                            WorldGen.mergeRight = true;
                          }
                          else if (up == index1 && down == index1 && (left == -2 && right == -1))
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 234;
                              rectangle.Y = (__Null) 54;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 252;
                              rectangle.Y = (__Null) 54;
                            }
                            else
                            {
                              rectangle.X = (__Null) 270;
                              rectangle.Y = (__Null) 54;
                            }
                            WorldGen.mergeLeft = true;
                          }
                        }
                        if (up != -1 && down != -1 && (left == -1 && right == index1))
                        {
                          if (up == -2 && down == index1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 72;
                              rectangle.Y = (__Null) 144;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 72;
                              rectangle.Y = (__Null) 162;
                            }
                            else
                            {
                              rectangle.X = (__Null) 72;
                              rectangle.Y = (__Null) 180;
                            }
                            WorldGen.mergeUp = true;
                          }
                          else if (down == -2 && up == index1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 72;
                              rectangle.Y = (__Null) 90;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 72;
                              rectangle.Y = (__Null) 108;
                            }
                            else
                            {
                              rectangle.X = (__Null) 72;
                              rectangle.Y = (__Null) 126;
                            }
                            WorldGen.mergeDown = true;
                          }
                        }
                        else if (up != -1 && down != -1 && (left == index1 && right == -1))
                        {
                          if (up == -2 && down == index1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 90;
                              rectangle.Y = (__Null) 144;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 90;
                              rectangle.Y = (__Null) 162;
                            }
                            else
                            {
                              rectangle.X = (__Null) 90;
                              rectangle.Y = (__Null) 180;
                            }
                            WorldGen.mergeUp = true;
                          }
                          else if (down == -2 && up == index1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 90;
                              rectangle.Y = (__Null) 90;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 90;
                              rectangle.Y = (__Null) 108;
                            }
                            else
                            {
                              rectangle.X = (__Null) 90;
                              rectangle.Y = (__Null) 126;
                            }
                            WorldGen.mergeDown = true;
                          }
                        }
                        else if (up == -1 && down == index1 && (left != -1 && right != -1))
                        {
                          if (left == -2 && right == index1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 0;
                              rectangle.Y = (__Null) 198;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 18;
                              rectangle.Y = (__Null) 198;
                            }
                            else
                            {
                              rectangle.X = (__Null) 36;
                              rectangle.Y = (__Null) 198;
                            }
                            WorldGen.mergeLeft = true;
                          }
                          else if (right == -2 && left == index1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 54;
                              rectangle.Y = (__Null) 198;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 72;
                              rectangle.Y = (__Null) 198;
                            }
                            else
                            {
                              rectangle.X = (__Null) 90;
                              rectangle.Y = (__Null) 198;
                            }
                            WorldGen.mergeRight = true;
                          }
                        }
                        else if (up == index1 && down == -1 && (left != -1 && right != -1))
                        {
                          if (left == -2 && right == index1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 0;
                              rectangle.Y = (__Null) 216;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 18;
                              rectangle.Y = (__Null) 216;
                            }
                            else
                            {
                              rectangle.X = (__Null) 36;
                              rectangle.Y = (__Null) 216;
                            }
                            WorldGen.mergeLeft = true;
                          }
                          else if (right == -2 && left == index1)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 54;
                              rectangle.Y = (__Null) 216;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 72;
                              rectangle.Y = (__Null) 216;
                            }
                            else
                            {
                              rectangle.X = (__Null) 90;
                              rectangle.Y = (__Null) 216;
                            }
                            WorldGen.mergeRight = true;
                          }
                        }
                        else if (up != -1 && down != -1 && (left == -1 && right == -1))
                        {
                          if (up == -2 && down == -2)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 108;
                              rectangle.Y = (__Null) 216;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 108;
                              rectangle.Y = (__Null) 234;
                            }
                            else
                            {
                              rectangle.X = (__Null) 108;
                              rectangle.Y = (__Null) 252;
                            }
                            WorldGen.mergeUp = true;
                            WorldGen.mergeDown = true;
                          }
                          else if (up == -2)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 126;
                              rectangle.Y = (__Null) 144;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 126;
                              rectangle.Y = (__Null) 162;
                            }
                            else
                            {
                              rectangle.X = (__Null) 126;
                              rectangle.Y = (__Null) 180;
                            }
                            WorldGen.mergeUp = true;
                          }
                          else if (down == -2)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 126;
                              rectangle.Y = (__Null) 90;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 126;
                              rectangle.Y = (__Null) 108;
                            }
                            else
                            {
                              rectangle.X = (__Null) 126;
                              rectangle.Y = (__Null) 126;
                            }
                            WorldGen.mergeDown = true;
                          }
                        }
                        else if (up == -1 && down == -1 && (left != -1 && right != -1))
                        {
                          if (left == -2 && right == -2)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 162;
                              rectangle.Y = (__Null) 198;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 180;
                              rectangle.Y = (__Null) 198;
                            }
                            else
                            {
                              rectangle.X = (__Null) 198;
                              rectangle.Y = (__Null) 198;
                            }
                            WorldGen.mergeLeft = true;
                            WorldGen.mergeRight = true;
                          }
                          else if (left == -2)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 0;
                              rectangle.Y = (__Null) 252;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 18;
                              rectangle.Y = (__Null) 252;
                            }
                            else
                            {
                              rectangle.X = (__Null) 36;
                              rectangle.Y = (__Null) 252;
                            }
                            WorldGen.mergeLeft = true;
                          }
                          else if (right == -2)
                          {
                            if (num6 == 0)
                            {
                              rectangle.X = (__Null) 54;
                              rectangle.Y = (__Null) 252;
                            }
                            else if (num6 == 1)
                            {
                              rectangle.X = (__Null) 72;
                              rectangle.Y = (__Null) 252;
                            }
                            else
                            {
                              rectangle.X = (__Null) 90;
                              rectangle.Y = (__Null) 252;
                            }
                            WorldGen.mergeRight = true;
                          }
                        }
                        else if (up == -2 && down == -1 && (left == -1 && right == -1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 108;
                            rectangle.Y = (__Null) 144;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 108;
                            rectangle.Y = (__Null) 162;
                          }
                          else
                          {
                            rectangle.X = (__Null) 108;
                            rectangle.Y = (__Null) 180;
                          }
                          WorldGen.mergeUp = true;
                        }
                        else if (up == -1 && down == -2 && (left == -1 && right == -1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 108;
                            rectangle.Y = (__Null) 90;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 108;
                            rectangle.Y = (__Null) 108;
                          }
                          else
                          {
                            rectangle.X = (__Null) 108;
                            rectangle.Y = (__Null) 126;
                          }
                          WorldGen.mergeDown = true;
                        }
                        else if (up == -1 && down == -1 && (left == -2 && right == -1))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 0;
                            rectangle.Y = (__Null) 234;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 18;
                            rectangle.Y = (__Null) 234;
                          }
                          else
                          {
                            rectangle.X = (__Null) 36;
                            rectangle.Y = (__Null) 234;
                          }
                          WorldGen.mergeLeft = true;
                        }
                        else if (up == -1 && down == -1 && (left == -1 && right == -2))
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 54;
                            rectangle.Y = (__Null) 234;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 72;
                            rectangle.Y = (__Null) 234;
                          }
                          else
                          {
                            rectangle.X = (__Null) 90;
                            rectangle.Y = (__Null) 234;
                          }
                          WorldGen.mergeRight = true;
                        }
                      }
                    }
                    int num7 = centerTile.blockType();
                    if (TileID.Sets.HasSlopeFrames[index1])
                    {
                      if (num7 == 0)
                      {
                        bool flag1 = index1 == up && tile9.topSlope();
                        bool flag2 = index1 == left && tile11.leftSlope();
                        bool flag3 = index1 == right && tile12.rightSlope();
                        bool flag4 = index1 == down && tile10.bottomSlope();
                        int num1 = 0;
                        int num2 = 0;
                        if (flag1.ToInt() + flag2.ToInt() + flag3.ToInt() + flag4.ToInt() > 2)
                        {
                          int num3 = ((int) tile9.slope() == 1).ToInt() + ((int) tile12.slope() == 1).ToInt() + ((int) tile10.slope() == 4).ToInt() + ((int) tile11.slope() == 4).ToInt();
                          int num4 = ((int) tile9.slope() == 2).ToInt() + ((int) tile12.slope() == 3).ToInt() + ((int) tile10.slope() == 3).ToInt() + ((int) tile11.slope() == 2).ToInt();
                          if (num3 == num4)
                          {
                            num1 = 2;
                            num2 = 4;
                          }
                          else if (num3 > num4)
                          {
                            int num5 = index1 != upLeft ? 0 : ((int) tile15.slope() == 0 ? 1 : 0);
                            bool flag5 = index1 == downRight && (int) tile14.slope() == 0;
                            int num8 = flag5 ? 1 : 0;
                            if ((num5 & num8) != 0)
                              num2 = 4;
                            else if (flag5)
                            {
                              num1 = 6;
                            }
                            else
                            {
                              num1 = 7;
                              num2 = 1;
                            }
                          }
                          else
                          {
                            int num5 = index1 != upRight ? 0 : ((int) tile16.slope() == 0 ? 1 : 0);
                            bool flag5 = index1 == downLeft && (int) tile13.slope() == 0;
                            int num8 = flag5 ? 1 : 0;
                            if ((num5 & num8) != 0)
                            {
                              num2 = 4;
                              num1 = 1;
                            }
                            else if (flag5)
                            {
                              num1 = 7;
                            }
                            else
                            {
                              num1 = 6;
                              num2 = 1;
                            }
                          }
                          rectangle.X = (__Null) ((18 + num1) * 18);
                          rectangle.Y = (__Null) (num2 * 18);
                        }
                        else
                        {
                          if (flag1 & flag2 && index1 == down && index1 == right)
                            num2 = 2;
                          else if (flag1 & flag3 && index1 == down && index1 == left)
                          {
                            num1 = 1;
                            num2 = 2;
                          }
                          else if (flag3 & flag4 && index1 == up && index1 == left)
                          {
                            num1 = 1;
                            num2 = 3;
                          }
                          else if (flag4 & flag2 && index1 == up && index1 == right)
                            num2 = 3;
                          if (num1 != 0 || num2 != 0)
                          {
                            rectangle.X = (__Null) ((18 + num1) * 18);
                            rectangle.Y = (__Null) (num2 * 18);
                          }
                        }
                      }
                      if (num7 >= 2 && (rectangle.X < 0 || rectangle.Y < 0))
                      {
                        int num1 = -1;
                        int num2 = -1;
                        int num3 = -1;
                        int num4 = 0;
                        int num5 = 0;
                        switch (num7)
                        {
                          case 2:
                            num1 = left;
                            num2 = down;
                            num3 = downLeft;
                            ++num4;
                            break;
                          case 3:
                            num1 = right;
                            num2 = down;
                            num3 = downRight;
                            break;
                          case 4:
                            num1 = left;
                            num2 = up;
                            num3 = upLeft;
                            ++num4;
                            ++num5;
                            break;
                          case 5:
                            num1 = right;
                            num2 = up;
                            num3 = upRight;
                            ++num5;
                            break;
                        }
                        if (index1 != num1 || index1 != num2 || index1 != num3)
                        {
                          if (index1 == num1 && index1 == num2)
                            num4 += 2;
                          else if (index1 == num1)
                            num4 += 4;
                          else if (index1 == num2)
                          {
                            num4 += 4;
                            num5 += 2;
                          }
                          else
                          {
                            num4 += 2;
                            num5 += 2;
                          }
                        }
                        rectangle.X = (__Null) ((18 + num4) * 18);
                        rectangle.Y = (__Null) (num5 * 18);
                      }
                    }
                    if (rectangle.X < 0 || rectangle.Y < 0)
                    {
                      if (!flag6)
                        WorldGen.TileMergeAttemptWeird(index1, -1, Main.tileSolid, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      if (index1 == 2 || index1 == 23 || (index1 == 60 || index1 == 70) || (index1 == 109 || index1 == 199 || Main.tileMoss[index1]))
                        WorldGen.TileMergeAttempt(index1, -2, ref up, ref down, ref left, ref right, ref upLeft, ref upRight, ref downLeft, ref downRight);
                      if (up == index1 && down == index1 && (left == index1 && right == index1))
                      {
                        if (upLeft != index1 && upRight != index1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 108;
                            rectangle.Y = (__Null) 18;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 126;
                            rectangle.Y = (__Null) 18;
                          }
                          else
                          {
                            rectangle.X = (__Null) 144;
                            rectangle.Y = (__Null) 18;
                          }
                        }
                        else if (downLeft != index1 && downRight != index1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 108;
                            rectangle.Y = (__Null) 36;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 126;
                            rectangle.Y = (__Null) 36;
                          }
                          else
                          {
                            rectangle.X = (__Null) 144;
                            rectangle.Y = (__Null) 36;
                          }
                        }
                        else if (upLeft != index1 && downLeft != index1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 180;
                            rectangle.Y = (__Null) 0;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 180;
                            rectangle.Y = (__Null) 18;
                          }
                          else
                          {
                            rectangle.X = (__Null) 180;
                            rectangle.Y = (__Null) 36;
                          }
                        }
                        else if (upRight != index1 && downRight != index1)
                        {
                          if (num6 == 0)
                          {
                            rectangle.X = (__Null) 198;
                            rectangle.Y = (__Null) 0;
                          }
                          else if (num6 == 1)
                          {
                            rectangle.X = (__Null) 198;
                            rectangle.Y = (__Null) 18;
                          }
                          else
                          {
                            rectangle.X = (__Null) 198;
                            rectangle.Y = (__Null) 36;
                          }
                        }
                        else if (num6 == 0)
                        {
                          rectangle.X = (__Null) 18;
                          rectangle.Y = (__Null) 18;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 36;
                          rectangle.Y = (__Null) 18;
                        }
                        else
                        {
                          rectangle.X = (__Null) 54;
                          rectangle.Y = (__Null) 18;
                        }
                      }
                      else if (up != index1 && down == index1 && (left == index1 && right == index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 18;
                          rectangle.Y = (__Null) 0;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 36;
                          rectangle.Y = (__Null) 0;
                        }
                        else
                        {
                          rectangle.X = (__Null) 54;
                          rectangle.Y = (__Null) 0;
                        }
                      }
                      else if (up == index1 && down != index1 && (left == index1 && right == index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 18;
                          rectangle.Y = (__Null) 36;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 36;
                          rectangle.Y = (__Null) 36;
                        }
                        else
                        {
                          rectangle.X = (__Null) 54;
                          rectangle.Y = (__Null) 36;
                        }
                      }
                      else if (up == index1 && down == index1 && (left != index1 && right == index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 0;
                          rectangle.Y = (__Null) 0;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 0;
                          rectangle.Y = (__Null) 18;
                        }
                        else
                        {
                          rectangle.X = (__Null) 0;
                          rectangle.Y = (__Null) 36;
                        }
                      }
                      else if (up == index1 && down == index1 && (left == index1 && right != index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 72;
                          rectangle.Y = (__Null) 0;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 72;
                          rectangle.Y = (__Null) 18;
                        }
                        else
                        {
                          rectangle.X = (__Null) 72;
                          rectangle.Y = (__Null) 36;
                        }
                      }
                      else if (up != index1 && down == index1 && (left != index1 && right == index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 0;
                          rectangle.Y = (__Null) 54;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 36;
                          rectangle.Y = (__Null) 54;
                        }
                        else
                        {
                          rectangle.X = (__Null) 72;
                          rectangle.Y = (__Null) 54;
                        }
                      }
                      else if (up != index1 && down == index1 && (left == index1 && right != index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 18;
                          rectangle.Y = (__Null) 54;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 54;
                          rectangle.Y = (__Null) 54;
                        }
                        else
                        {
                          rectangle.X = (__Null) 90;
                          rectangle.Y = (__Null) 54;
                        }
                      }
                      else if (up == index1 && down != index1 && (left != index1 && right == index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 0;
                          rectangle.Y = (__Null) 72;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 36;
                          rectangle.Y = (__Null) 72;
                        }
                        else
                        {
                          rectangle.X = (__Null) 72;
                          rectangle.Y = (__Null) 72;
                        }
                      }
                      else if (up == index1 && down != index1 && (left == index1 && right != index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 18;
                          rectangle.Y = (__Null) 72;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 54;
                          rectangle.Y = (__Null) 72;
                        }
                        else
                        {
                          rectangle.X = (__Null) 90;
                          rectangle.Y = (__Null) 72;
                        }
                      }
                      else if (up == index1 && down == index1 && (left != index1 && right != index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 90;
                          rectangle.Y = (__Null) 0;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 90;
                          rectangle.Y = (__Null) 18;
                        }
                        else
                        {
                          rectangle.X = (__Null) 90;
                          rectangle.Y = (__Null) 36;
                        }
                      }
                      else if (up != index1 && down != index1 && (left == index1 && right == index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 108;
                          rectangle.Y = (__Null) 72;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 126;
                          rectangle.Y = (__Null) 72;
                        }
                        else
                        {
                          rectangle.X = (__Null) 144;
                          rectangle.Y = (__Null) 72;
                        }
                      }
                      else if (up != index1 && down == index1 && (left != index1 && right != index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 108;
                          rectangle.Y = (__Null) 0;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 126;
                          rectangle.Y = (__Null) 0;
                        }
                        else
                        {
                          rectangle.X = (__Null) 144;
                          rectangle.Y = (__Null) 0;
                        }
                      }
                      else if (up == index1 && down != index1 && (left != index1 && right != index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 108;
                          rectangle.Y = (__Null) 54;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 126;
                          rectangle.Y = (__Null) 54;
                        }
                        else
                        {
                          rectangle.X = (__Null) 144;
                          rectangle.Y = (__Null) 54;
                        }
                      }
                      else if (up != index1 && down != index1 && (left != index1 && right == index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 162;
                          rectangle.Y = (__Null) 0;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 162;
                          rectangle.Y = (__Null) 18;
                        }
                        else
                        {
                          rectangle.X = (__Null) 162;
                          rectangle.Y = (__Null) 36;
                        }
                      }
                      else if (up != index1 && down != index1 && (left == index1 && right != index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 216;
                          rectangle.Y = (__Null) 0;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 216;
                          rectangle.Y = (__Null) 18;
                        }
                        else
                        {
                          rectangle.X = (__Null) 216;
                          rectangle.Y = (__Null) 36;
                        }
                      }
                      else if (up != index1 && down != index1 && (left != index1 && right != index1))
                      {
                        if (num6 == 0)
                        {
                          rectangle.X = (__Null) 162;
                          rectangle.Y = (__Null) 54;
                        }
                        else if (num6 == 1)
                        {
                          rectangle.X = (__Null) 180;
                          rectangle.Y = (__Null) 54;
                        }
                        else
                        {
                          rectangle.X = (__Null) 198;
                          rectangle.Y = (__Null) 54;
                        }
                      }
                    }
                    if (rectangle.X <= -1 || rectangle.Y <= -1)
                    {
                      if (num6 <= 0)
                      {
                        rectangle.X = (__Null) 18;
                        rectangle.Y = (__Null) 18;
                      }
                      else if (num6 == 1)
                      {
                        rectangle.X = (__Null) 36;
                        rectangle.Y = (__Null) 18;
                      }
                      if (num6 >= 2)
                      {
                        rectangle.X = (__Null) 54;
                        rectangle.Y = (__Null) 18;
                      }
                    }
                    if ((int) Main.tileLargeFrames[index1] == 1 && num6 == 3)
                    {
                      // ISSUE: explicit reference operation
                      // ISSUE: variable of a reference type
                      __Null& local = @rectangle.Y;
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      int num1 = ^(int&) local + 90;
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      ^(int&) local = num1;
                    }
                    centerTile.frameX = (short) rectangle.X;
                    centerTile.frameY = (short) rectangle.Y;
                    if (index1 == 52 || index1 == 62 || (index1 == 115 || index1 == 205))
                    {
                      up = tile9 == null ? index1 : (tile9.active() ? (!tile9.bottomSlope() ? (int) tile9.type : -1) : -1);
                      if ((index1 == 52 || index1 == 205) && (up == 109 || up == 115))
                      {
                        centerTile.type = (ushort) 115;
                        WorldGen.SquareTileFrame(i, j, true);
                        return;
                      }
                      if ((index1 == 115 || index1 == 205) && (up == 2 || up == 52))
                      {
                        centerTile.type = (ushort) 52;
                        WorldGen.SquareTileFrame(i, j, true);
                        return;
                      }
                      if ((index1 == 52 || index1 == 115) && (up == 199 || up == 205))
                      {
                        centerTile.type = (ushort) 205;
                        WorldGen.SquareTileFrame(i, j, true);
                        return;
                      }
                      if (up != index1)
                      {
                        bool flag1 = false;
                        if (up == -1)
                          flag1 = true;
                        if (index1 == 52 && up != 2 && up != 192)
                          flag1 = true;
                        if (index1 == 62 && up != 60)
                          flag1 = true;
                        if (index1 == 115 && up != 109)
                          flag1 = true;
                        if (index1 == 205 && up != 199)
                          flag1 = true;
                        if (flag1)
                          WorldGen.KillTile(i, j, false, false, false);
                      }
                    }
                    if (!WorldGen.noTileActions && centerTile.active() && (index1 == 53 || index1 == 112 || (index1 == 116 || index1 == 123) || (index1 == 234 || index1 == 224 || (index1 == 330 || index1 == 331)) || (index1 == 332 || index1 == 333)))
                    {
                      if (Main.netMode == 0)
                      {
                        if (tile10 != null && !tile10.active())
                        {
                          bool flag1 = true;
                          if (tile9.active() && (TileID.Sets.BasicChest[(int) tile9.type] || TileID.Sets.BasicChestFake[(int) tile9.type] || ((int) tile9.type == 323 || (int) tile9.type == 88)))
                            flag1 = false;
                          if (flag1)
                          {
                            int Damage = 10;
                            int Type;
                            if (index1 == 112)
                              Type = 56;
                            else if (index1 == 59)
                              Type = 39;
                            else if (index1 == 116)
                              Type = 67;
                            else if (index1 == 123)
                              Type = 71;
                            else if (index1 == 224)
                              Type = 179;
                            else if (index1 == 234)
                              Type = 241;
                            else if (index1 == 330)
                            {
                              Type = 411;
                              Damage = 0;
                            }
                            else if (index1 == 331)
                            {
                              Type = 412;
                              Damage = 0;
                            }
                            else if (index1 == 332)
                            {
                              Type = 413;
                              Damage = 0;
                            }
                            else if (index1 == 333)
                            {
                              Type = 414;
                              Damage = 0;
                            }
                            else
                              Type = 31;
                            centerTile.ClearTile();
                            int index2 = Projectile.NewProjectile((float) (i * 16 + 8), (float) (j * 16 + 8), 0.0f, 0.41f, Type, Damage, 0.0f, Main.myPlayer, 0.0f, 0.0f);
                            Main.projectile[index2].ai[0] = 1f;
                            WorldGen.SquareTileFrame(i, j, true);
                          }
                        }
                      }
                      else if (Main.netMode == 2 && tile10 != null && !tile10.active())
                      {
                        bool flag1 = true;
                        if (tile9.active() && (TileID.Sets.BasicChest[(int) tile9.type] || TileID.Sets.BasicChestFake[(int) tile9.type] || ((int) tile9.type == 323 || (int) tile9.type == 88)))
                          flag1 = false;
                        if (flag1)
                        {
                          int Damage = 10;
                          int Type;
                          if (index1 == 112)
                            Type = 56;
                          else if (index1 == 116)
                            Type = 67;
                          else if (index1 == 59)
                            Type = 39;
                          else if (index1 == 123)
                            Type = 71;
                          else if (index1 == 224)
                            Type = 179;
                          else if (index1 == 234)
                            Type = 241;
                          else if (index1 == 330)
                          {
                            Type = 411;
                            Damage = 0;
                          }
                          else if (index1 == 331)
                          {
                            Type = 412;
                            Damage = 0;
                          }
                          else if (index1 == 332)
                          {
                            Type = 413;
                            Damage = 0;
                          }
                          else if (index1 == 333)
                          {
                            Type = 414;
                            Damage = 0;
                          }
                          else
                            Type = 31;
                          centerTile.active(false);
                          bool flag2 = false;
                          for (int index2 = 0; index2 < 1000; ++index2)
                          {
                            if (Main.projectile[index2].active && Main.projectile[index2].owner == Main.myPlayer && (Main.projectile[index2].type == Type && Math.Abs(Main.projectile[index2].timeLeft - 3600) < 60) && (double) Main.projectile[index2].Distance(new Vector2((float) (i * 16 + 8), (float) (j * 16 + 10))) < 4.0)
                            {
                              flag2 = true;
                              break;
                            }
                          }
                          if (!flag2)
                          {
                            int index2 = Projectile.NewProjectile((float) (i * 16 + 8), (float) (j * 16 + 8), 0.0f, 2.5f, Type, Damage, 0.0f, Main.myPlayer, 0.0f, 0.0f);
                            Main.projectile[index2].velocity.Y = (__Null) 0.5;
                            // ISSUE: explicit reference operation
                            // ISSUE: variable of a reference type
                            __Null& local = @Main.projectile[index2].position.Y;
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            double num1 = (double) ^(float&) local + 2.0;
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            ^(float&) local = (float) num1;
                            Main.projectile[index2].netUpdate = true;
                          }
                          NetMessage.SendTileSquare(-1, i, j, 1, TileChangeType.None);
                          WorldGen.SquareTileFrame(i, j, true);
                        }
                      }
                    }
                    if (rectangle.X != frameX1)
                    {
                      if (rectangle.Y != frameY1)
                      {
                        if (frameX1 >= 0)
                        {
                          if (frameY1 >= 0)
                          {
                            ++WorldGen.tileReframeCount;
                            if (WorldGen.tileReframeCount < 55)
                            {
                              int num1 = WorldGen.mergeUp ? 1 : 0;
                              bool mergeDown = WorldGen.mergeDown;
                              bool mergeLeft = WorldGen.mergeLeft;
                              bool mergeRight = WorldGen.mergeRight;
                              WorldGen.TileFrame(i - 1, j, false, false);
                              WorldGen.TileFrame(i + 1, j, false, false);
                              WorldGen.TileFrame(i, j - 1, false, false);
                              WorldGen.TileFrame(i, j + 1, false, false);
                              WorldGen.mergeUp = num1 != 0;
                              WorldGen.mergeDown = mergeDown;
                              WorldGen.mergeLeft = mergeLeft;
                              WorldGen.mergeRight = mergeRight;
                            }
                            --WorldGen.tileReframeCount;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      catch
      {
      }
      if (i <= 0 || j <= 0)
        return;
      WorldGen.UpdateMapTile(i, j, addToList);
    }

    public static void TriggerLunarApocalypse()
    {
      List<int> intList = new List<int>()
      {
        517,
        422,
        507,
        493
      };
      int[] numArray = new int[4];
      for (int index = 0; index < 4; ++index)
      {
        numArray[index] = intList[Main.rand.Next(intList.Count)];
        intList.Remove(numArray[index]);
      }
      int num1 = Main.maxTilesX / 5;
      int worldSurface = (int) Main.worldSurface;
      for (int index1 = 0; index1 < 4; ++index1)
      {
        int num2 = num1 * (1 + index1);
        bool flag = false;
        for (int index2 = 0; index2 < 30; ++index2)
        {
          int num3 = Main.rand.Next(-100, 101);
          for (int y = worldSurface; y > 100; --y)
          {
            if (!Collision.SolidTiles(num2 + num3 - 10, num2 + num3 + 10, y - 20, y + 15) && !WorldGen.PlayerLOS(num2 + num3 - 10, y) && (!WorldGen.PlayerLOS(num2 + num3 + 10, y) && !WorldGen.PlayerLOS(num2 + num3 - 10, y - 20)) && !WorldGen.PlayerLOS(num2 + num3 + 10, y - 20))
            {
              int number = NPC.NewNPC((num2 + num3) * 16, y * 16, numArray[index1], 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
              if (Main.netMode == 2 && number < 200)
                NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
              flag = true;
              break;
            }
          }
          if (flag)
            break;
        }
        if (!flag)
          NPC.NewNPC(num2 * 16, (worldSurface - 40) * 16, numArray[index1], 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
      }
      int num4;
      NPC.TowerActiveStardust = (num4 = 1) != 0;
      NPC.TowerActiveSolar = num4 != 0;
      NPC.TowerActiveNebula = num4 != 0;
      NPC.TowerActiveVortex = num4 != 0;
      NPC.LunarApocalypseIsUp = true;
      int strengthTowerMax;
      NPC.ShieldStrengthTowerStardust = strengthTowerMax = NPC.ShieldStrengthTowerMax;
      NPC.ShieldStrengthTowerNebula = strengthTowerMax;
      NPC.ShieldStrengthTowerVortex = strengthTowerMax;
      NPC.ShieldStrengthTowerSolar = strengthTowerMax;
      NetMessage.SendData(101, -1, -1, (NetworkText) null, 0, 0.0f, 0.0f, 0.0f, 0, 0, 0);
      WorldGen.MessageLunarApocalypse();
    }

    public static void UpdateLunarApocalypse()
    {
      if (!NPC.LunarApocalypseIsUp)
        return;
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = false;
      bool flag4 = false;
      bool flag5 = false;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].active)
        {
          switch (Main.npc[index].type)
          {
            case 493:
              flag5 = true;
              continue;
            case 507:
              flag4 = true;
              continue;
            case 517:
              flag2 = true;
              continue;
            case 398:
              flag1 = true;
              continue;
            case 422:
              flag3 = true;
              continue;
            default:
              continue;
          }
        }
      }
      if (!flag2)
        NPC.TowerActiveSolar = false;
      if (!flag3)
        NPC.TowerActiveVortex = false;
      if (!flag4)
        NPC.TowerActiveNebula = false;
      if (!flag5)
        NPC.TowerActiveStardust = false;
      if (NPC.TowerActiveSolar || NPC.TowerActiveVortex || (NPC.TowerActiveNebula || NPC.TowerActiveStardust) || flag1)
        return;
      WorldGen.StartImpendingDoom();
    }

    public static void StartImpendingDoom()
    {
      NPC.LunarApocalypseIsUp = false;
      NPC.MoonLordCountdown = 3600;
      NetMessage.SendData(103, -1, -1, (NetworkText) null, NPC.MoonLordCountdown, 0.0f, 0.0f, 0.0f, 0, 0, 0);
      WorldGen.BroadcastText(NetworkText.FromKey(Lang.misc[52].Key), 50, (int) byte.MaxValue, 130);
      if (Main.netMode == 1)
        return;
      WorldGen.GetRidOfCultists();
    }

    public static void GetRidOfCultists()
    {
      for (int number = 0; number < 200; ++number)
      {
        if (Main.npc[number].active && (Main.npc[number].type == 437 || Main.npc[number].type == 438 || Main.npc[number].type == 379))
        {
          Main.npc[number].active = false;
          if (Main.netMode != 1)
            NetMessage.SendData(23, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
        }
      }
    }

    public static void MessageLunarApocalypse()
    {
      if (!NPC.LunarApocalypseIsUp)
        return;
      int num = 0;
      if (!NPC.TowerActiveSolar)
        ++num;
      if (!NPC.TowerActiveVortex)
        ++num;
      if (!NPC.TowerActiveNebula)
        ++num;
      if (!NPC.TowerActiveStardust)
        ++num;
      WorldGen.BroadcastText(NetworkText.FromKey(Lang.misc[43 + num].Key), 175, 75, (int) byte.MaxValue);
    }

    public static void BroadcastText(NetworkText text, Vector4 color)
    {
      WorldGen.BroadcastText(text, new Color(color));
    }

    public static void BroadcastText(NetworkText text, Vector3 color)
    {
      WorldGen.BroadcastText(text, new Color(color));
    }

    public static void BroadcastText(NetworkText text, int r, int g, int b)
    {
      WorldGen.BroadcastText(text, new Color(r, g, b));
    }

    public static void BroadcastText(NetworkText text, byte r, byte g, byte b)
    {
      WorldGen.BroadcastText(text, new Color((int) r, (int) g, (int) b));
    }

    public static void BroadcastText(NetworkText text, Color color)
    {
      if (Main.netMode == 0)
      {
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        Main.NewText(text.ToString(), ((Color) @color).get_R(), ((Color) @color).get_G(), ((Color) @color).get_B(), false);
      }
      else
      {
        if (Main.netMode != 2)
          return;
        NetMessage.BroadcastChatMessage(text, color, -1);
      }
    }

    public static bool CanCutTile(int x, int y, TileCuttingContext context)
    {
      if (Main.tile[x, y + 1] == null || (int) Main.tile[x, y + 1].type == 78 || (int) Main.tile[x, y + 1].type == 380)
        return false;
      if ((int) Main.tile[x, y].type == 254)
        return context == TileCuttingContext.TilePlacement;
      return true;
    }

    public class Hooks
    {
      public static event Action OnWorldLoad;

      public static void Initialize()
      {
        Player.Hooks.OnEnterWorld += (Action<Player>) (player =>
        {
          if (player.whoAmI != Main.myPlayer)
            return;
          WorldGen.Hooks.WorldLoaded();
          Main.FixUIScale();
        });
      }

      public static void WorldLoaded()
      {
        // ISSUE: reference to a compiler-generated field
        if (WorldGen.Hooks.OnWorldLoad == null)
          return;
        // ISSUE: reference to a compiler-generated field
        WorldGen.Hooks.OnWorldLoad();
      }

      public static void ClearWorld()
      {
        PressurePlateHelper.Reset();
        WorldGen.TownManager.Clear();
        NPC.ResetKillCount();
      }
    }

    public class Spread
    {
      public static void Wall(int x, int y, int wallType)
      {
        if (!WorldGen.InWorld(x, y, 0))
          return;
        byte num = (byte) wallType;
        List<Point> pointList1 = new List<Point>();
        List<Point> pointList2 = new List<Point>();
        HashSet<Point> pointSet = new HashSet<Point>();
        pointList2.Add(new Point(x, y));
        while (pointList2.Count > 0)
        {
          pointList1.Clear();
          pointList1.AddRange((IEnumerable<Point>) pointList2);
          pointList2.Clear();
          while (pointList1.Count > 0)
          {
            Point point1 = pointList1[0];
            if (!WorldGen.InWorld((int) point1.X, (int) point1.Y, 1))
            {
              pointList1.Remove(point1);
            }
            else
            {
              pointSet.Add(point1);
              pointList1.Remove(point1);
              Tile tile = Main.tile[(int) point1.X, (int) point1.Y];
              if (WorldGen.SolidTile((int) point1.X, (int) point1.Y) || (int) tile.wall != 0)
              {
                if (tile.active() && (int) tile.wall == 0)
                  tile.wall = num;
              }
              else
              {
                tile.wall = num;
                Point point2;
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector(point1.X - 1, (int) point1.Y);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector(point1.X + 1, (int) point1.Y);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector((int) point1.X, point1.Y - 1);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector((int) point1.X, point1.Y + 1);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
              }
            }
          }
        }
      }

      public static void Wall2(int x, int y, int wallType)
      {
        if (!WorldGen.InWorld(x, y, 0))
          return;
        byte num1 = (byte) wallType;
        int num2 = 0;
        int maxWallOut2 = WorldGen.maxWallOut2;
        List<Point> pointList1 = new List<Point>();
        List<Point> pointList2 = new List<Point>();
        HashSet<Point> pointSet = new HashSet<Point>();
        pointList2.Add(new Point(x, y));
        while (pointList2.Count > 0)
        {
          pointList1.Clear();
          pointList1.AddRange((IEnumerable<Point>) pointList2);
          pointList2.Clear();
          while (pointList1.Count > 0)
          {
            Point point1 = pointList1[0];
            if (!WorldGen.InWorld((int) point1.X, (int) point1.Y, 1))
            {
              pointList1.Remove(point1);
            }
            else
            {
              pointSet.Add(point1);
              pointList1.Remove(point1);
              Tile tile = Main.tile[(int) point1.X, (int) point1.Y];
              if (!WorldGen.SolidTile((int) point1.X, (int) point1.Y) && (int) tile.wall != (int) num1 && ((int) tile.wall != 4 && (int) tile.wall != 40) && (int) tile.wall != 3)
              {
                if ((int) num1 == 63 && (int) tile.wall == 0)
                {
                  pointList1.Remove(point1);
                }
                else
                {
                  ++num2;
                  if (num2 >= maxWallOut2)
                  {
                    pointList1.Remove(point1);
                  }
                  else
                  {
                    tile.wall = num1;
                    Point point2;
                    // ISSUE: explicit reference operation
                    ((Point) @point2).\u002Ector(point1.X - 1, (int) point1.Y);
                    if (!pointSet.Contains(point2))
                      pointList2.Add(point2);
                    // ISSUE: explicit reference operation
                    ((Point) @point2).\u002Ector(point1.X + 1, (int) point1.Y);
                    if (!pointSet.Contains(point2))
                      pointList2.Add(point2);
                    // ISSUE: explicit reference operation
                    ((Point) @point2).\u002Ector((int) point1.X, point1.Y - 1);
                    if (!pointSet.Contains(point2))
                      pointList2.Add(point2);
                    // ISSUE: explicit reference operation
                    ((Point) @point2).\u002Ector((int) point1.X, point1.Y + 1);
                    if (!pointSet.Contains(point2))
                      pointList2.Add(point2);
                    if ((int) num1 == 63)
                    {
                      // ISSUE: explicit reference operation
                      ((Point) @point2).\u002Ector(point1.X - 1, point1.Y - 1);
                      if (!pointSet.Contains(point2))
                        pointList2.Add(point2);
                      // ISSUE: explicit reference operation
                      ((Point) @point2).\u002Ector(point1.X + 1, point1.Y - 1);
                      if (!pointSet.Contains(point2))
                        pointList2.Add(point2);
                      // ISSUE: explicit reference operation
                      ((Point) @point2).\u002Ector(point1.X - 1, point1.Y + 1);
                      if (!pointSet.Contains(point2))
                        pointList2.Add(point2);
                      // ISSUE: explicit reference operation
                      ((Point) @point2).\u002Ector(point1.X + 1, point1.Y + 1);
                      if (!pointSet.Contains(point2))
                        pointList2.Add(point2);
                      // ISSUE: explicit reference operation
                      ((Point) @point2).\u002Ector(point1.X - 2, (int) point1.Y);
                      if (!pointSet.Contains(point2))
                        pointList2.Add(point2);
                      // ISSUE: explicit reference operation
                      ((Point) @point2).\u002Ector(point1.X + 2, (int) point1.Y);
                      if (!pointSet.Contains(point2))
                        pointList2.Add(point2);
                    }
                  }
                }
              }
              else if (tile.active() && (int) tile.wall != (int) num1 && ((int) tile.wall != 4 && (int) tile.wall != 40) && (int) tile.wall != 3)
                tile.wall = num1;
            }
          }
        }
      }

      public static void Moss(int x, int y)
      {
        if (!WorldGen.InWorld(x, y, 0))
          return;
        byte mossWall = WorldGen.mossWall;
        ushort mossTile = (ushort) WorldGen.mossTile;
        List<Point> pointList1 = new List<Point>();
        List<Point> pointList2 = new List<Point>();
        HashSet<Point> pointSet = new HashSet<Point>();
        pointList2.Add(new Point(x, y));
        while (pointList2.Count > 0)
        {
          pointList1.Clear();
          pointList1.AddRange((IEnumerable<Point>) pointList2);
          pointList2.Clear();
          while (pointList1.Count > 0)
          {
            Point point1 = pointList1[0];
            if (!WorldGen.InWorld((int) point1.X, (int) point1.Y, 1))
            {
              pointList1.Remove(point1);
            }
            else
            {
              pointSet.Add(point1);
              pointList1.Remove(point1);
              Tile tile = Main.tile[(int) point1.X, (int) point1.Y];
              if (WorldGen.SolidTile((int) point1.X, (int) point1.Y) || (int) tile.wall != 0)
              {
                if (tile.active())
                {
                  if ((int) tile.wall == 0)
                    tile.wall = mossWall;
                  if ((int) tile.type == 1)
                    tile.type = mossTile;
                }
              }
              else
              {
                tile.wall = mossWall;
                Point point2;
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector(point1.X - 1, (int) point1.Y);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector(point1.X + 1, (int) point1.Y);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector((int) point1.X, point1.Y - 1);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector((int) point1.X, point1.Y + 1);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
              }
            }
          }
        }
      }

      public static void Gem(int x, int y)
      {
        if (!WorldGen.InWorld(x, y, 0))
          return;
        List<Point> pointList1 = new List<Point>();
        List<Point> pointList2 = new List<Point>();
        HashSet<Point> pointSet = new HashSet<Point>();
        pointList2.Add(new Point(x, y));
        while (pointList2.Count > 0)
        {
          pointList1.Clear();
          pointList1.AddRange((IEnumerable<Point>) pointList2);
          pointList2.Clear();
          while (pointList1.Count > 0)
          {
            Point point1 = pointList1[0];
            if (!WorldGen.InWorld((int) point1.X, (int) point1.Y, 1))
            {
              pointList1.Remove(point1);
            }
            else
            {
              pointSet.Add(point1);
              pointList1.Remove(point1);
              Tile tile1 = Main.tile[(int) point1.X, (int) point1.Y];
              if (WorldGen.SolidTile((int) point1.X, (int) point1.Y) || (int) tile1.wall != 0)
              {
                if (tile1.active())
                {
                  if (WorldGen.Spread.Gemmable((int) tile1.type))
                    tile1.type = WorldGen.randGemTile();
                  Tile tile2 = Main.tile[point1.X - 1, (int) point1.Y];
                  if (WorldGen.Spread.Gemmable((int) tile2.type))
                    tile2.type = WorldGen.randGemTile();
                  Tile tile3 = Main.tile[point1.X + 1, (int) point1.Y];
                  if (WorldGen.Spread.Gemmable((int) tile3.type))
                    tile3.type = WorldGen.randGemTile();
                  Tile tile4 = Main.tile[(int) point1.X, point1.Y - 1];
                  if (WorldGen.Spread.Gemmable((int) tile4.type))
                    tile4.type = WorldGen.randGemTile();
                  Tile tile5 = Main.tile[(int) point1.X, point1.Y + 1];
                  if (WorldGen.Spread.Gemmable((int) tile5.type))
                    tile5.type = WorldGen.randGemTile();
                }
              }
              else
              {
                tile1.wall = (byte) (48 + WorldGen.randGem());
                if (!tile1.active() && WorldGen.genRand.Next(2) == 0)
                  WorldGen.PlaceTile((int) point1.X, (int) point1.Y, 178, true, false, -1, WorldGen.randGem());
                Point point2;
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector(point1.X - 1, (int) point1.Y);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector(point1.X + 1, (int) point1.Y);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector((int) point1.X, point1.Y - 1);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector((int) point1.X, point1.Y + 1);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
              }
            }
          }
        }
      }

      public static void Spider(int x, int y)
      {
        if (!WorldGen.InWorld(x, y, 0))
          return;
        byte num = 62;
        List<Point> pointList1 = new List<Point>();
        List<Point> pointList2 = new List<Point>();
        HashSet<Point> pointSet = new HashSet<Point>();
        pointList2.Add(new Point(x, y));
        while (pointList2.Count > 0)
        {
          pointList1.Clear();
          pointList1.AddRange((IEnumerable<Point>) pointList2);
          pointList2.Clear();
          while (pointList1.Count > 0)
          {
            Point point1 = pointList1[0];
            if (!WorldGen.InWorld((int) point1.X, (int) point1.Y, 1))
            {
              pointList1.Remove(point1);
            }
            else
            {
              pointSet.Add(point1);
              pointList1.Remove(point1);
              Tile tile = Main.tile[(int) point1.X, (int) point1.Y];
              if (WorldGen.SolidTile((int) point1.X, (int) point1.Y) || (int) tile.wall != 0)
              {
                if (tile.active() && (int) tile.wall == 0)
                  tile.wall = num;
              }
              else
              {
                tile.wall = num;
                WorldGen.SquareWallFrame((int) point1.X, (int) point1.Y, true);
                if (!tile.active())
                {
                  tile.liquid = (byte) 0;
                  tile.lava(false);
                  if (WorldGen.SolidTile((int) point1.X, point1.Y + 1) && WorldGen.genRand.Next(3) == 0)
                  {
                    if (WorldGen.genRand.Next(15) == 0)
                      WorldGen.AddBuriedChest((int) point1.X, (int) point1.Y, 939, true, 15);
                    else
                      WorldGen.PlacePot((int) point1.X, (int) point1.Y, (ushort) 28, WorldGen.genRand.Next(19, 21));
                  }
                  if (!tile.active())
                  {
                    if (WorldGen.SolidTile((int) point1.X, point1.Y - 1) && WorldGen.genRand.Next(3) == 0)
                      WorldGen.PlaceTight((int) point1.X, (int) point1.Y, (ushort) 165, true);
                    else if (WorldGen.SolidTile((int) point1.X, point1.Y + 1))
                    {
                      WorldGen.PlaceTile((int) point1.X, (int) point1.Y, 187, true, false, -1, 9 + WorldGen.genRand.Next(5));
                      if (WorldGen.genRand.Next(3) == 0)
                      {
                        if (!tile.active())
                          WorldGen.PlaceSmallPile((int) point1.X, (int) point1.Y, 34 + WorldGen.genRand.Next(4), 1, (ushort) 185);
                        if (!tile.active())
                          WorldGen.PlaceSmallPile((int) point1.X, (int) point1.Y, 48 + WorldGen.genRand.Next(6), 0, (ushort) 185);
                      }
                    }
                  }
                }
                Point point2;
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector(point1.X - 1, (int) point1.Y);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector(point1.X + 1, (int) point1.Y);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector((int) point1.X, point1.Y - 1);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector((int) point1.X, point1.Y + 1);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
              }
            }
          }
        }
      }

      public static void WallDungeon(int x, int y, int wallType)
      {
        if (!WorldGen.InWorld(x, y, 0))
          return;
        byte num = (byte) wallType;
        List<Point> pointList1 = new List<Point>();
        List<Point> pointList2 = new List<Point>();
        HashSet<Point> pointSet = new HashSet<Point>();
        pointList2.Add(new Point(x, y));
        while (pointList2.Count > 0)
        {
          pointList1.Clear();
          pointList1.AddRange((IEnumerable<Point>) pointList2);
          pointList2.Clear();
          while (pointList1.Count > 0)
          {
            Point point1 = pointList1[0];
            if (!WorldGen.InWorld((int) point1.X, (int) point1.Y, 1))
            {
              pointList1.Remove(point1);
            }
            else
            {
              pointSet.Add(point1);
              pointList1.Remove(point1);
              Tile tile = Main.tile[(int) point1.X, (int) point1.Y];
              if (!WorldGen.SolidTile((int) point1.X, (int) point1.Y) && (int) tile.wall != (int) num && (int) tile.wall > 0)
              {
                tile.wall = num;
                Point point2;
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector(point1.X - 1, (int) point1.Y);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector(point1.X + 1, (int) point1.Y);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector((int) point1.X, point1.Y - 1);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
                // ISSUE: explicit reference operation
                ((Point) @point2).\u002Ector((int) point1.X, point1.Y + 1);
                if (!pointSet.Contains(point2))
                  pointList2.Add(point2);
              }
              else if (tile.active())
                tile.wall = num;
            }
          }
        }
      }

      private static bool Gemmable(int type)
      {
        if (type != 0 && type != 1 && (type != 40 && type != 59) && (type != 60 && type != 70 && type != 147))
          return type == 161;
        return true;
      }
    }
  }
}
