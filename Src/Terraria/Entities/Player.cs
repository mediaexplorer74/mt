// Player

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using GameManager.DataStructures;
using GameManager.GameContent;
using GameManager.GameContent.Achievements;
using GameManager.GameContent.Tile_Entities;
using GameManager.Graphics.Capture;
using GameManager.Graphics.Effects;
using GameManager.Graphics.Shaders;
using GameManager.ID;
using GameManager.IO;
using GameManager;
using GameManager.UI;
using GameManager.UI.Chat;
using GameManager.Utilities;
using GameManager.World.Generation;
using GameManager.Achievements;

namespace GameManager
{
    public class Player : Entity
    {
		public const bool useCustomStarterEquipment = true;

		private static byte[] ENCRYPTION_KEY = new UnicodeEncoding().GetBytes("h3y_gUyZ");
        public static int taxRate = 3600;
        public static int crystalLeafDamage = 100;
        public static int crystalLeafKB = 10;
        public static int manaSickTime = 300;
        public static int manaSickTimeMax = 600;
        public static float manaSickLessDmg = 0.25f;
        public static int nameLen = 20;
        public static bool deadForGood = false;
        public static int tileRangeX = 5;
        public static int tileRangeY = 4;
        public static float defaultGravity = 0.4f;
        private static int jumpHeight = 15;
        private static float jumpSpeed = 5.01f;
        private static int defaultItemGrabRange = 38;
        private static float itemGrabSpeed = 0.45f;
        private static float itemGrabSpeedMax = 4f;
        public static bool lastPound = true;
        public Player.OverheadMessage chatOverhead = new Player.OverheadMessage();
        public bool[] hideInfo = new bool[13];
        public string lostCoinString = "";
        public bool[] NPCBannerBuff = new bool[251];
        public int extraAccessorySlots = 2;
        public int tankPet = -1;
        public Vector2[] solarShieldPos = new Vector2[3];
        public Vector2[] solarShieldVel = new Vector2[3];
        public float flameRingScale = 1f;
        public Vector2[] beetlePos = new Vector2[3];
        public Vector2[] beetleVel = new Vector2[3];
        public Vector2[] itemFlamePos = new Vector2[7];
        public float lifeSteal = 99999f;
        public int gem = -1;
        public int carpetFrame = -1;
        public int maxMinions = 1;
        public BitsByte zone1 = (BitsByte)(byte)0;
        public BitsByte zone2 = (BitsByte)(byte)0;
        public int[] doubleTapCardinalTimer = new int[4];
        public int[] holdDownCardinalTimer = new int[4];
        public float[] speedSlice = new float[60];
        public int sign = -1;
        public int changeItem = -1;
        public Item[] armor = new Item[20];
        public Item[] dye = new Item[10];
        public Item[] miscEquips = new Item[5];
        public Item[] miscDyes = new Item[5];
        public Item trashItem = new Item();
        public float ghostDir = 1f;
        public int[] buffType = new int[22];
        public int[] buffTime = new int[22];
        public bool[] buffImmune = new bool[191];
        public int heldProj = -1;
        public int breathMax = 200;
        public int breath = 200;
        public float stealth = 1f;
        public string setBonus = "";
        public Item[] inventory = new Item[59];
        public bool[] inventoryChestStack = new bool[59];
        public Chest bank = new Chest(true);
        public Chest bank2 = new Chest(true);
        public Vector2 fullRotationOrigin = Vector2.Zero;
        public int nonTorch = -1;
        public float stepSpeed = 1f;
        public int head = -1;
        public int body = -1;
        public int legs = -1;
        public sbyte handon = (sbyte)-1;
        public sbyte handoff = (sbyte)-1;
        public sbyte back = (sbyte)-1;
        public sbyte front = (sbyte)-1;
        public sbyte shoe = (sbyte)-1;
        public sbyte waist = (sbyte)-1;
        public sbyte shield = (sbyte)-1;
        public sbyte neck = (sbyte)-1;
        public sbyte face = (sbyte)-1;
        public sbyte balloon = (sbyte)-1;
        public bool[] hideVisual = new bool[10];
        public BitsByte hideMisc = (BitsByte)(byte)0;
        public string showItemIconText = "";
        public Vector2[] shadowPos = new Vector2[3];
        public float[] shadowRotation = new float[3];
        public Vector2[] shadowOrigin = new Vector2[3];
        public int[] shadowDirection = new int[3];
        public float manaCost = 1f;
        public int step = -1;
        public int statLifeMax = 100;
        public int statLifeMax2 = 100;
        public int statLife = 100;
        public float gravDir = 1f;
        public Vector2 lastBoost = Vector2.Zero;
        public int meleeCrit = 4;
        public int rangedCrit = 4;
        public int magicCrit = 4;
        public int thrownCrit = 4;
        public float meleeDamage = 1f;
        public float rangedDamage = 1f;
        public float thrownDamage = 1f;
        public float bulletDamage = 1f;
        public float arrowDamage = 1f;
        public float rocketDamage = 1f;
        public float magicDamage = 1f;
        public float minionDamage = 1f;
        public float meleeSpeed = 1f;
        public float thrownVelocity = 1f;
        public float moveSpeed = 1f;
        public float pickSpeed = 1f;
        public float wallSpeed = 1f;
        public float tileSpeed = 1f;
        public int SpawnX = -1;
        public int SpawnY = -1;
        public int[] spX = new int[200];
        public int[] spY = new int[200];
        public string[] spN = new string[200];
        public int[] spI = new int[200];
        public float gravity = Player.defaultGravity;
        public float maxFallSpeed = 10f;
        public float maxRunSpeed = 3f;
        public float runAcceleration = 0.08f;
        public float runSlowdown = 0.2f;
        public bool[] adjTile = new bool[419];
        public bool[] oldAdjTile = new bool[419];
        public Color hairDyeColor = Color.Transparent;
        public Color hairColor = new Color(215, 90, 55);
        public Color skinColor = new Color((int)byte.MaxValue, 125, 90);
        public Color eyeColor = new Color(105, 90, 75);
        public Color shirtColor = new Color(175, 165, 140);
        public Color underShirtColor = new Color(160, 180, 215);
        public Color pantsColor = new Color((int)byte.MaxValue, 230, 175);
        public Color shoeColor = new Color(160, 105, 60);
        public int lastCreatureHit = -1;
        public int bestOre = -1;
        public string displayedFishingInfo = "";
        public int[] grappling = new int[20];
        public int rocketTimeMax = 7;
        public int flyingPigChest = -1;
        public int chest = -1;
        public int talkNPC = -1;
        public int potionDelayTime = Item.potionDelay;
        public int restorationDelayTime = Item.restorationDelay;
        public int[] ownedProjectileCounts = new int[651];
        public bool[] npcTypeNoAggro = new bool[540];
        public Vector2 MinionTargetPoint = Vector2.Zero;
        public List<Point> TouchedTiles = new List<Point>();
        public const int maxSolarShields = 3;
        public const int nebulaMaxLevel = 3;
        public const int SupportedSlotsArmor = 3;
        public const int SupportedSlotsAccs = 7;
        public const int SupportedSlotSets = 10;
        public const int InitialAccSlotCount = 5;
        public const int miscSlotPet = 0;
        public const int miscSlotLight = 1;
        public const int miscSlotCart = 2;
        public const int miscSlotMount = 3;
        public const int miscSlotHook = 4;
        public const int maxBuffs = 22;
        public const int defaultWidth = 20;
        public const int defaultHeight = 42;
        private const int shadowMax = 3;
        public bool alchemyTable;
        private bool GoingDownWithGrapple;
        private byte spelunkerTimer;
        public int lostCoins;
        public int soulDrain;
        public float drainBoost;
        public int taxMoney;
        public int taxTimer;
        public bool hasBanner;
        public Vector2 lastDeathPostion;
        public DateTime lastDeathTime;
        public bool showLastDeath;
        public bool extraAccessory;
        public bool tankPetReset;
        public int stringColor;
        public int counterWeight;
        public bool yoyoString;
        public bool yoyoGlove;
        public int beetleOrbs;
        public float beetleCounter;
        public int beetleCountdown;
        public bool beetleDefense;
        public bool beetleOffense;
        public bool beetleBuff;
        public int solarShields;
        public int solarCounter;
        public bool solarDashing;
        public int nebulaLevelLife;
        public int nebulaLevelMana;
        public int nebulaManaCounter;
        public int nebulaLevelDamage;
        public bool manaMagnet;
        public bool lifeMagnet;
        public bool lifeForce;
        public bool calmed;
        public bool inferno;
        public float flameRingRot;
        public byte flameRingFrame;
        public byte flameRingAlpha;
        public int netManaTime;
        public int netLifeTime;
        public bool netMana;
        public bool netLife;
        public int beetleFrame;
        public int beetleFrameCounter;
        public float manaSickReduction;
        public bool manaSick;
        public bool stairFall;
        public int loadStatus;
        public int itemFlameCount;
        public bool outOfRange;
        public float ghostDmg;
        public bool teleporting;
        public float teleportTime;
        public int teleportStyle;
        public bool sloping;
        public bool chilled;
        public bool dazed;
        public bool frozen;
        public bool stoned;
        public bool lastStoned;
        public bool ichor;
        public bool webbed;
        public int ropeCount;
        public int manaRegenBonus;
        public int manaRegenDelayBonus;
        public int dash;
        public int dashTime;
        public int dashDelay;
        public int eocDash;
        public int eocHit;
        public float accRunSpeed;
        public bool cordage;
        public int gemCount;
        public byte meleeEnchant;
        public byte pulleyDir;
        public bool pulley;
        public int pulleyFrame;
        public float pulleyFrameCounter;
        public bool blackBelt;
        public bool sliding;
        public int slideDir;
        public int launcherWait;
        public bool iceSkate;
        public bool carpet;
        public int spikedBoots;
        public float carpetFrameCounter;
        public bool canCarpet;
        public int carpetTime;
        public int miscCounter;
        public int infernoCounter;
        public bool sandStorm;
        public bool crimsonRegen;
        public bool ghostHeal;
        public bool ghostHurt;
        public bool sticky;
        public bool slippy;
        public bool slippy2;
        public bool powerrun;
        public bool flapSound;
        public bool iceBarrier;
        public bool dangerSense;
        public float endurance;
        public bool loveStruck;
        public bool stinky;
        public bool resistCold;
        public bool electrified;
        public bool dryadWard;
        public bool panic;
        public bool brainOfConfusion;
        public byte iceBarrierFrame;
        public byte iceBarrierFrameCounter;
        public bool shadowDodge;
        public float shadowDodgeCount;
        public bool palladiumRegen;
        public bool onHitDodge;
        public bool onHitRegen;
        public bool onHitPetal;
        public int petalTimer;
        public int shadowDodgeTimer;
        public int fishingSkill;
        public bool cratePotion;
        public bool sonarPotion;
        public bool accFishingLine;
        public bool accTackleBox;
        public int numMinions;
        public float slotsMinions;
        public bool pygmy;
        public bool raven;
        public bool slime;
        public bool hornetMinion;
        public bool impMinion;
        public bool twinsMinion;
        public bool spiderMinion;
        public bool pirateMinion;
        public bool sharknadoMinion;
        public bool UFOMinion;
        public bool DeadlySphereMinion;
        public bool stardustMinion;
        public bool stardustGuardian;
        public bool stardustDragon;
        public float wingTime;
        public int wings;
        public int wingsLogic;
        public int wingTimeMax;
        public int wingFrame;
        public int wingFrameCounter;
        public int skinVariant;
        public bool ghost;
        public int ghostFrame;
        public int ghostFrameCounter;
        public int miscTimer;
        public bool pvpDeath;
        public bool boneArmor;
        public bool frostArmor;
        public bool honey;
        public bool crystalLeaf;
        public bool paladinBuff;
        public bool paladinGive;
        public float townNPCs;
        public double headFrameCounter;
        public double bodyFrameCounter;
        public double legFrameCounter;
        public int netSkip;
        public int oldSelectItem;
        public bool immune;
        public int immuneTime;
        public int immuneAlphaDirection;
        public int immuneAlpha;
        public int team;
        public bool hbLocked;
        public int reuseDelay;
        public int aggro;
        public float activeNPCs;
        public bool mouseInterface;
        public bool lastMouseInterface;
        public int noThrow;
        public int selectedItem;
        public int itemAnimation;
        public int itemAnimationMax;
        public int itemTime;
        public int toolTime;
        public float itemRotation;
        public int itemWidth;
        public int itemHeight;
        public Vector2 itemLocation;
        public bool poundRelease;
        public float ghostFade;
        public int breathCD;
        public int lavaCD;
        public int lavaMax;
        public int lavaTime;
        public bool ignoreWater;
        public bool socialShadow;
        public bool socialGhost;
        public bool shroomiteStealth;
        public int stealthTimer;
        public float headRotation;
        public float bodyRotation;
        public float legRotation;
        public Vector2 headPosition;
        public Vector2 bodyPosition;
        public Vector2 legPosition;
        public Vector2 headVelocity;
        public Vector2 bodyVelocity;
        public Vector2 legVelocity;
        public float fullRotation;
        public float gfxOffY;
        public bool dead;
        public int respawnTimer;
        public int attackCD;
        public int potionDelay;
        public byte difficulty;
        public byte wetSlime;
        public HitTile hitTile;
        public int jump;
        public Microsoft.Xna.Framework.Rectangle headFrame;
        public Microsoft.Xna.Framework.Rectangle bodyFrame;
        public Microsoft.Xna.Framework.Rectangle legFrame;
        public Microsoft.Xna.Framework.Rectangle hairFrame;
        public bool controlLeft;
        public bool controlRight;
        public bool controlUp;
        public bool controlDown;
        public bool controlJump;
        public bool controlUseItem;
        public bool controlUseTile;
        public bool controlThrow;
        public bool controlInv;
        public bool controlHook;
        public bool controlTorch;
        public bool controlMap;
        public bool controlSmart;
        public bool controlMount;
        public bool releaseJump;
        public bool releaseUp;
        public bool releaseUseItem;
        public bool releaseUseTile;
        public bool releaseInventory;
        public bool releaseHook;
        public bool releaseThrow;
        public bool releaseQuickMana;
        public bool releaseQuickHeal;
        public bool releaseLeft;
        public bool releaseRight;
        public bool releaseSmart;
        public bool releaseMount;
        public bool releaseDown;
        public int altFunctionUse;
        public bool mapZoomIn;
        public bool mapZoomOut;
        public bool mapAlphaUp;
        public bool mapAlphaDown;
        public bool mapFullScreen;
        public bool mapStyle;
        public bool releaseMapFullscreen;
        public bool releaseMapStyle;
        public int leftTimer;
        public int rightTimer;
        public bool delayUseItem;
        public bool showItemIcon;
        public bool showItemIconR;
        public int showItemIcon2;
        public int runSoundDelay;
        public float shadow;
        public int shadowCount;
        public bool fireWalk;
        public bool channel;
        public int anglerQuestsFinished;
        public int armorPenetration;
        public int statDefense;
        public int statMana;
        public int statManaMax;
        public int statManaMax2;
        public int lifeRegen;
        public int lifeRegenCount;
        public int lifeRegenTime;
        public int manaRegen;
        public int manaRegenCount;
        public int manaRegenDelay;
        public bool manaRegenBuff;
        public bool noKnockback;
        public bool spaceGun;
        public bool ammoCost80;
        public bool ammoCost75;
        public int stickyBreak;
        public bool magicQuiver;
        public bool magmaStone;
        public bool lavaRose;
        public int phantasmTime;
        public bool ammoBox;
        public bool ammoPotion;
        public bool chaosState;
        public bool strongBees;
        public bool sporeSac;
        public bool shinyStone;
        public int yoraiz0rEye;
        public bool yoraiz0rDarkness;
        public bool suspiciouslookingTentacle;
        public bool crimsonHeart;
        public bool lightOrb;
        public bool blueFairy;
        public bool redFairy;
        public bool greenFairy;
        public bool bunny;
        public bool turtle;
        public bool eater;
        public bool penguin;
        public bool magicLantern;
        public bool rabid;
        public bool sunflower;
        public bool wellFed;
        public bool puppy;
        public bool grinch;
        public bool miniMinotaur;
        public bool arcticDivingGear;
        public bool wearsRobe;
        public bool minecartLeft;
        public bool onWrongGround;
        public bool onTrack;
        public int cartRampTime;
        public bool cartFlip;
        public float trackBoost;
        public Mount mount;
        public bool blackCat;
        public bool spider;
        public bool squashling;
        public bool babyFaceMonster;
        public bool magicCuffs;
        public bool coldDash;
        public bool sailDash;
        public bool eyeSpring;
        public bool snowman;
        public bool scope;
        public bool dino;
        public bool skeletron;
        public bool hornet;
        public bool zephyrfish;
        public bool tiki;
        public bool parrot;
        public bool truffle;
        public bool sapling;
        public bool cSapling;
        public bool wisp;
        public bool lizard;
        public bool archery;
        public bool poisoned;
        public bool venom;
        public bool blind;
        public bool blackout;
        public bool headcovered;
        public bool frostBurn;
        public bool onFrostBurn;
        public bool burned;
        public bool suffocating;
        public byte suffocateDelay;
        public bool dripping;
        public bool drippingSlime;
        public bool onFire;
        public bool onFire2;
        public bool noItems;
        public bool wereWolf;
        public bool wolfAcc;
        public bool rulerGrid;
        public bool rulerLine;
        public bool bleed;
        public bool confused;
        public bool accMerman;
        public bool merman;
        public bool brokenArmor;
        public bool silence;
        public bool slow;
        public bool gross;
        public bool tongued;
        public bool kbGlove;
        public bool kbBuff;
        public bool starCloak;
        public bool longInvince;
        public bool pStone;
        public bool manaFlower;
        public bool moonLeech;
        public bool vortexDebuff;
        public bool trapDebuffSource;
        public float minionKB;
        public bool thrownCost50;
        public bool thrownCost33;
        public bool autoPaint;
        public int lastTileRangeX;
        public int lastTileRangeY;
        public static int tileTargetX;
        public static int tileTargetY;
        public bool adjWater;
        public bool adjHoney;
        public bool adjLava;
        public bool oldAdjWater;
        public bool oldAdjHoney;
        public bool oldAdjLava;
        public byte hairDye;
        public float hairDyeVar;
        public int hair;
        public bool hostile;
        public int accCompass;
        public int accWatch;
        public int accDepthMeter;
        public bool accFishFinder;
        public bool accWeatherRadio;
        public bool accJarOfSouls;
        public bool accCalendar;
        public bool accThirdEye;
        public byte accThirdEyeCounter;
        public byte accThirdEyeNumber;
        public bool accStopwatch;
        public bool accOreFinder;
        public bool accCritterGuide;
        public byte accCritterGuideCounter;
        public byte accCritterGuideNumber;
        public bool accDreamCatcher;
        public DateTime dpsStart;
        public DateTime dpsEnd;
        public DateTime dpsLastHit;
        public int dpsDamage;
        public bool dpsStarted;
        public bool discount;
        public bool coins;
        public bool goldRing;
        public bool accDivingHelm;
        public bool accFlipper;
        public bool doubleJumpCloud;
        public bool jumpAgainCloud;
        public bool dJumpEffectCloud;
        public bool doubleJumpSandstorm;
        public bool jumpAgainSandstorm;
        public bool dJumpEffectSandstorm;
        public bool doubleJumpBlizzard;
        public bool jumpAgainBlizzard;
        public bool dJumpEffectBlizzard;
        public bool doubleJumpFart;
        public bool jumpAgainFart;
        public bool dJumpEffectFart;
        public bool doubleJumpSail;
        public bool jumpAgainSail;
        public bool dJumpEffectSail;
        public bool doubleJumpUnicorn;
        public bool jumpAgainUnicorn;
        public bool dJumpEffectUnicorn;
        public bool autoJump;
        public bool justJumped;
        public float jumpSpeedBoost;
        public int extraFall;
        public bool spawnMax;
        public int blockRange;
        public int grapCount;
        public int rocketTime;
        public int rocketDelay;
        public int rocketDelay2;
        public bool rocketRelease;
        public bool rocketFrame;
        public int rocketBoots;
        public bool canRocket;
        public bool jumpBoost;
        public bool noFallDmg;
        public int swimTime;
        public bool killGuide;
        public bool killClothier;
        public bool lavaImmune;
        public bool gills;
        public bool slowFall;
        public bool findTreasure;
        public bool invis;
        public bool detectCreature;
        public bool nightVision;
        public bool enemySpawns;
        public float thorns;
        public bool turtleArmor;
        public bool turtleThorns;
        public bool spiderArmor;
        public bool setSolar;
        public bool setVortex;
        public bool setNebula;
        public int nebulaCD;
        public bool setStardust;
        public bool vortexStealthActive;
        public bool waterWalk;
        public bool waterWalk2;
        public bool gravControl;
        public bool gravControl2;
        public bool bee;
        public int lastChest;
        public int chestX;
        public int chestY;
        public int fallStart;
        public int fallStart2;
        private int cHead;
        private int cBody;
        private int cLegs;
        private int cHandOn;
        private int cHandOff;
        private int cBack;
        private int cFront;
        private int cShoe;
        private int cWaist;
        private int cShield;
        private int cNeck;
        private int cFace;
        private int cBalloon;
        private int cWings;
        private int cCarpet;
        public int cGrapple;
        public int cMount;
        public int cMinecart;
        public int cPet;
        public int cLight;
        public int cYorai;
        public int lastPortalColorIndex;
        public int _portalPhysicsTime;
        public bool justGotOutOfPortal;
        public float MountFishronSpecialCounter;
        private bool makeStrongBee;
        public int _funkytownCheckCD;
        private float maxRegenDelay;
        public bool editedChestName;

        public Vector2 MountedCenter
        {
            get
            {
                return new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + 21f + (float)this.mount.PlayerOffsetHitbox);
            }
            set
            {
                this.position = new Vector2(value.X - (float)(this.width / 2), value.Y - 21f - (float)this.mount.PlayerOffsetHitbox);
            }
        }

        public bool Male
        {
            get
            {
                return this.skinVariant < 4;
            }
            set
            {
                if (value)
                {
                    if (this.skinVariant < 4)
                        return;
                    this.skinVariant -= 4;
                }
                else
                {
                    if (this.skinVariant >= 4)
                        return;
                    this.skinVariant += 4;
                }
            }
        }

        public bool ZoneDungeon
        {
            get
            {
                return this.zone1[0];
            }
            set
            {
                this.zone1[0] = value;
            }
        }

        public bool ZoneCorrupt
        {
            get
            {
                return this.zone1[1];
            }
            set
            {
                this.zone1[1] = value;
            }
        }

        public bool ZoneHoly
        {
            get
            {
                return this.zone1[2];
            }
            set
            {
                this.zone1[2] = value;
            }
        }

        public bool ZoneMeteor
        {
            get
            {
                return this.zone1[3];
            }
            set
            {
                this.zone1[3] = value;
            }
        }

        public bool ZoneJungle
        {
            get
            {
                return this.zone1[4];
            }
            set
            {
                this.zone1[4] = value;
            }
        }

        public bool ZoneSnow
        {
            get
            {
                return this.zone1[5];
            }
            set
            {
                this.zone1[5] = value;
            }
        }

        public bool ZoneCrimson
        {
            get
            {
                return this.zone1[6];
            }
            set
            {
                this.zone1[6] = value;
            }
        }

        public bool ZoneWaterCandle
        {
            get
            {
                return this.zone1[7];
            }
            set
            {
                this.zone1[7] = value;
            }
        }

        public bool ZonePeaceCandle
        {
            get
            {
                return this.zone2[0];
            }
            set
            {
                this.zone2[0] = value;
            }
        }

        public bool ZoneTowerSolar
        {
            get
            {
                return this.zone2[1];
            }
            set
            {
                this.zone2[1] = value;
            }
        }

        public bool ZoneTowerVortex
        {
            get
            {
                return this.zone2[2];
            }
            set
            {
                this.zone2[2] = value;
            }
        }

        public bool ZoneTowerNebula
        {
            get
            {
                return this.zone2[3];
            }
            set
            {
                this.zone2[3] = value;
            }
        }

        public bool ZoneTowerStardust
        {
            get
            {
                return this.zone2[4];
            }
            set
            {
                this.zone2[4] = value;
            }
        }

        public bool ZoneDesert
        {
            get
            {
                return this.zone2[5];
            }
            set
            {
                this.zone2[5] = value;
            }
        }

        public bool ZoneGlowshroom
        {
            get
            {
                return this.zone2[6];
            }
            set
            {
                this.zone2[6] = value;
            }
        }

        public bool ZoneUndergroundDesert
        {
            get
            {
                return this.zone2[7];
            }
            set
            {
                this.zone2[7] = value;
            }
        }

        public Vector2 Directions
        {
            get
            {
                return new Vector2((float)this.direction, this.gravDir);
            }
        }

        public bool PortalPhysicsEnabled
        {
            get
            {
                if (this._portalPhysicsTime > 0)
                    return !this.mount.Active;
                return false;
            }
        }

        public bool MountFishronSpecial
        {
            get
            {
                if (this.statLife >= this.statLifeMax2 / 2 && (!this.wet || this.lavaWet || this.honeyWet) && !this.dripping)
                    return (double)this.MountFishronSpecialCounter > 0.0;
                return true;
            }
        }

        public bool HasMinionTarget
        {
            get
            {
                return this.MinionTargetPoint != Vector2.Zero;
            }
        }

        public bool SlimeDontHyperJump
        {
            get
            {
                if (this.mount.Active && this.mount.Type == 3 && (int)this.wetSlime > 0)
                    return !this.controlJump;
                return false;
            }
        }

        public static event Action<Player> OnEnterWorld;

        public Player()
        {
            this.width = 20;
            this.height = 42;
            this.name = string.Empty;
            for (int index = 0; index < 59; ++index)
            {
                if (index < this.armor.Length)
                {
                    this.armor[index] = new Item();
                    this.armor[index].name = "";
                }
                this.inventory[index] = new Item();
                this.inventory[index].name = "";
            }
            for (int index = 0; index < 40; ++index)
            {
                this.bank.item[index] = new Item();
                this.bank.item[index].name = "";
                this.bank2.item[index] = new Item();
                this.bank2.item[index].name = "";
            }
            for (int index = 0; index < this.dye.Length; ++index)
                this.dye[index] = new Item();
            for (int index = 0; index < this.miscEquips.Length; ++index)
                this.miscEquips[index] = new Item();
            for (int index = 0; index < this.miscDyes.Length; ++index)
                this.miscDyes[index] = new Item();
            this.trashItem = new Item();
            this.grappling[0] = -1;
			GiveStartEquipment();
            this.statManaMax = 20;
            if (Main.cEd)
                this.inventory[3].SetDefaults(603, false);
            for (int index = 0; index < 419; ++index)
            {
                this.adjTile[index] = false;
                this.oldAdjTile[index] = false;
            }
            this.hitTile = new HitTile();
            this.mount = new Mount();
		}

		public void GiveStartEquipment()
		{
#pragma warning disable CS0162 // Unreachable code detected
			if (useCustomStarterEquipment)
			{
				inventory[0].SetDefaults(ItemID.StardustPickaxe);
				inventory[1].SetDefaults(ItemID.StardustDragonStaff);
				inventory[2].SetDefaults(ItemID.LunarHamaxeStardust);
				inventory[9].SetDefaults(ItemID.CellPhone);

				armor[0].SetDefaults(ItemID.StardustHelmet);
				armor[1].SetDefaults(ItemID.StardustBreastplate);
				armor[2].SetDefaults(ItemID.StardustLeggings);
				armor[3].SetDefaults(ItemID.WingsSolar);
				armor[3 + 10].SetDefaults(ItemID.WingsStardust);
				armor[4].SetDefaults(ItemID.FrostsparkBoots);
				armor[5].SetDefaults(ItemID.AnkhShield);
				armor[6].SetDefaults(ItemID.ArchitectGizmoPack);

				miscEquips[1].SetDefaults(ItemID.SuspiciousLookingTentacle);
				miscEquips[2].SetDefaults(ItemID.MinecartMech);
				miscEquips[3].SetDefaults(ItemID.CosmicCarKey);
				miscEquips[4].SetDefaults(ItemID.LunarHook);

				statLifeMax2 = 500;
				statLifeMax = 500;
				statLife = 500;
				statManaMax2 = 200;
				statManaMax = 200;
				statMana = 200;
			}
			else
			{
				inventory[0].SetDefaults("Copper Shortsword");
				inventory[0].Prefix(-1);
				inventory[1].SetDefaults("Copper Pickaxe");
				inventory[1].Prefix(-1);
				inventory[2].SetDefaults("Copper Axe");
				inventory[2].Prefix(-1);
			}
#pragma warning restore CS0162 // Unreachable code detected
		}

		public void RotateRelativePoint(ref float x, ref float y)
        {
            Vector2 vector2 = this.RotatedRelativePoint(new Vector2(x, y), true);
            x = vector2.X;
            y = vector2.Y;
        }

        public Vector2 RotatedRelativePoint(Vector2 pos, bool rotateForward = true)
        {
            Vector2 vector2 = this.position + this.fullRotationOrigin;
            Matrix rotationZ = Matrix.CreateRotationZ(this.fullRotation * (float)Utils.ToInt(rotateForward));
            pos -= this.position + this.fullRotationOrigin;
            pos = Vector2.Transform(pos, rotationZ);
            return pos + vector2;
        }

        public void HealEffect(int healAmount, bool broadcast = true)
        {
            CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.HealLife, string.Concat((object)healAmount), false, false);
            if (!broadcast || Main.netMode != 1 || this.whoAmI != Main.myPlayer)
                return;
            NetMessage.SendData(35, -1, -1, "", this.whoAmI, (float)healAmount, 0.0f, 0.0f, 0, 0, 0);
        }

        public void ManaEffect(int manaAmount)
        {
            CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.HealMana, string.Concat((object)manaAmount), false, false);
            if (Main.netMode != 1 || this.whoAmI != Main.myPlayer)
                return;
            NetMessage.SendData(43, -1, -1, "", this.whoAmI, (float)manaAmount, 0.0f, 0.0f, 0, 0, 0);
        }

        public static void EnterWorld(Player player)
        {
            if (Player.OnEnterWorld == null)
                return;
            Player.OnEnterWorld(player);
        }

        public static byte FindClosest(Vector2 Position, int Width, int Height)
        {
            byte num1 = (byte)0;
            for (int index = 0; index < (int)byte.MaxValue; ++index)
            {
                if (Main.player[index].active)
                {
                    num1 = (byte)index;
                    break;
                }
            }
            float num2 = -1f;
            for (int index = 0; index < (int)byte.MaxValue; ++index)
            {
                if (Main.player[index].active && !Main.player[index].dead)
                {
                    float num3 = Math.Abs((float)((double)Main.player[index].position.X + (double)(Main.player[index].width / 2) - ((double)Position.X + (double)(Width / 2)))) + Math.Abs((float)((double)Main.player[index].position.Y + (double)(Main.player[index].height / 2) - ((double)Position.Y + (double)(Height / 2))));
                    if ((double)num2 == -1.0 || (double)num3 < (double)num2)
                    {
                        num2 = num3;
                        num1 = (byte)index;
                    }
                }
            }
            return num1;
        }

        public void checkArmor()
        {
        }

        public void ToggleInv()
        {
            if (Main.ingameOptionsWindow)
                IngameOptions.Close();
            else if (Main.achievementsWindow)
                AchievementsUI.Close();
            else if (CaptureManager.Instance.Active)
                CaptureManager.Instance.Active = false;
            else if (this.talkNPC >= 0)
            {
                this.talkNPC = -1;
                Main.npcChatCornerItem = 0;
                Main.npcChatText = "";
                Main.PlaySound(11, -1, -1, 1);
            }
            else if (this.sign >= 0)
            {
                this.sign = -1;
                Main.editSign = false;
                Main.npcChatText = "";
                Main.PlaySound(11, -1, -1, 1);
            }
            else if (Main.clothesWindow)
                Main.CancelClothesWindow(false);
            else if (!Main.playerInventory)
            {
                Recipe.FindRecipes();
                Main.playerInventory = true;
                Main.EquipPageSelected = 0;
                Main.PlaySound(10, -1, -1, 1);
            }
            else
            {
                Main.playerInventory = false;
                Main.EquipPageSelected = 0;
                Main.PlaySound(11, -1, -1, 1);
                if (!ItemSlot.Options.HighlightNewItems)
                    return;
                foreach (Item obj in this.inventory)
                    obj.newAndShiny = false;
            }
        }

        public void dropItemCheck()
        {
            if (!Main.playerInventory)
                this.noThrow = 0;
            if (this.noThrow > 0)
                --this.noThrow;
            if (!Main.craftGuide && Main.guideItem.itemId > 0)
            {
                Main.guideItem.position = this.Center;
                Item obj = this.GetItem(this.whoAmI, Main.guideItem, false, true);
                if (obj.stack > 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, obj.itemId, obj.stack, false, (int)Main.guideItem.prefix, true);
                    Main.item[number].newAndShiny = false;
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                Main.guideItem = new Item();
            }
            if (!Main.reforge && Main.reforgeItem.itemId > 0)
            {
                Main.reforgeItem.position = this.Center;
                Item obj = this.GetItem(this.whoAmI, Main.reforgeItem, false, true);
                if (obj.stack > 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, obj.itemId, obj.stack, false, (int)Main.reforgeItem.prefix, true);
                    Main.item[number].newAndShiny = false;
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                Main.reforgeItem = new Item();
            }
            if (Main.myPlayer == this.whoAmI)
                this.inventory[58] = Main.mouseItem.Clone();
            bool flag1 = true;
            if (Main.mouseItem.itemId > 0 && Main.mouseItem.stack > 0 && !Main.gamePaused)
            {
                Player.tileTargetX = (int)(((double)Main.mouseX + (double)Main.screenPosition.X) / 16.0);
                Player.tileTargetY = (int)(((double)Main.mouseY + (double)Main.screenPosition.Y) / 16.0);
                if ((double)this.gravDir == -1.0)
                    Player.tileTargetY = (int)(((double)Main.screenPosition.Y + (double)Main.screenHeight - (double)Main.mouseY) / 16.0);
                if (this.selectedItem != 58)
                    this.oldSelectItem = this.selectedItem;
                this.selectedItem = 58;
                flag1 = false;
            }
            if (flag1 && this.selectedItem == 58)
                this.selectedItem = this.oldSelectItem;
            if (WorldGen.InWorld(Player.tileTargetX, Player.tileTargetY, 0) && Main.tile[Player.tileTargetX, Player.tileTargetY] != null && ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 334 && this.ItemFitsWeaponRack(this.inventory[this.selectedItem])))
                this.noThrow = 2;
            if (WorldGen.InWorld(Player.tileTargetX, Player.tileTargetY, 0) && Main.tile[Player.tileTargetX, Player.tileTargetY] != null && ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 395 && this.ItemFitsItemFrame(this.inventory[this.selectedItem])))
                this.noThrow = 2;
            if (Main.mouseItem.itemId > 0 && !Main.playerInventory)
            {
                Main.mouseItem.position = this.Center;
                Item obj = this.GetItem(this.whoAmI, Main.mouseItem, false, true);
                if (obj.stack > 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, obj.itemId, obj.stack, false, 0, true);
                    Main.item[number].newAndShiny = false;
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                Main.mouseItem = new Item();
                Recipe.FindRecipes();
            }
            if ((!this.controlThrow || !this.releaseThrow || (this.inventory[this.selectedItem].favorited || this.inventory[this.selectedItem].itemId <= 0) || Main.chatMode) && ((!Main.mouseRight || this.mouseInterface || !Main.mouseRightRelease) && Main.playerInventory || (Main.mouseItem.itemId <= 0 || Main.mouseItem.stack <= 0)) || this.noThrow > 0)
                return;
            if (this.inventory[this.selectedItem].favorited)
            {
                this.inventory[this.selectedItem] = this.GetItem(this.whoAmI, this.inventory[this.selectedItem], false, true);
                if (this.selectedItem == 58)
                    Main.mouseItem = this.inventory[this.selectedItem];
                Recipe.FindRecipes();
                if (this.inventory[this.selectedItem].itemId == 0)
                    return;
            }
            Item obj1 = new Item();
            bool flag2 = false;
            if ((Main.mouseRight && !this.mouseInterface && Main.mouseRightRelease || !Main.playerInventory) && (Main.mouseItem.itemId > 0 && Main.mouseItem.stack > 0))
            {
                obj1 = this.inventory[this.selectedItem];
                this.inventory[this.selectedItem] = Main.mouseItem;
                this.delayUseItem = true;
                this.controlUseItem = false;
                flag2 = true;
            }
            int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.inventory[this.selectedItem].itemId, 1, false, 0, false);
            if (!flag2 && this.inventory[this.selectedItem].itemId == 8 && this.inventory[this.selectedItem].stack > 1)
            {
                --this.inventory[this.selectedItem].stack;
            }
            else
            {
                this.inventory[this.selectedItem].position = Main.item[number1].position;
                Main.item[number1] = this.inventory[this.selectedItem];
                this.inventory[this.selectedItem] = new Item();
            }
            if (Main.netMode == 0)
                Main.item[number1].noGrabDelay = 100;
            Main.item[number1].velocity.Y = -2f;
            Main.item[number1].velocity.X = (float)(4 * this.direction) + this.velocity.X;
            Main.item[number1].favorited = false;
            Main.item[number1].newAndShiny = false;
            if ((Main.mouseRight && !this.mouseInterface || !Main.playerInventory) && Main.mouseItem.itemId > 0)
            {
                this.inventory[this.selectedItem] = obj1;
                Main.mouseItem = new Item();
            }
            else
            {
                this.itemAnimation = 10;
                this.itemAnimationMax = 10;
            }
            Recipe.FindRecipes();
            if (Main.netMode != 1)
                return;
            NetMessage.SendData(21, -1, -1, "", number1, 0.0f, 0.0f, 0.0f, 0, 0, 0);
        }

        public int HasBuff(int type)
        {
            if (this.buffImmune[type])
                return -1;
            for (int index = 0; index < 22; ++index)
            {
                if (this.buffTime[index] >= 1 && this.buffType[index] == type)
                    return index;
            }
            return -1;
        }

        public void AddBuff(int type, int time1, bool quiet = true)
        {
            if (this.buffImmune[type])
                return;
            int num = time1;
            if (Main.expertMode && this.whoAmI == Main.myPlayer && (type == 20 || type == 22 || (type == 23 || type == 24) || (type == 30 || type == 31 || (type == 32 || type == 33)) || (type == 35 || type == 36 || (type == 39 || type == 44) || (type == 46 || type == 47 || (type == 69 || type == 70))) || type == 80))
                num = (int)((double)Main.expertDebuffTime * (double)num);
            if (!quiet && Main.netMode == 1)
            {
                bool flag = true;
                for (int index = 0; index < 22; ++index)
                {
                    if (this.buffType[index] == type)
                    {
                        flag = false;
                        break;
                    }
                }
                if (flag)
                    NetMessage.SendData(55, -1, -1, "", this.whoAmI, (float)type, (float)num, 0.0f, 0, 0, 0);
            }
            int index1 = -1;
            for (int index2 = 0; index2 < 22; ++index2)
            {
                if (this.buffType[index2] == type)
                {
                    if (type == 94)
                    {
                        this.buffTime[index2] += num;
                        if (this.buffTime[index2] <= Player.manaSickTimeMax)
                            return;
                        this.buffTime[index2] = Player.manaSickTimeMax;
                        return;
                    }
                    if (this.buffTime[index2] >= num)
                        return;
                    this.buffTime[index2] = num;
                    return;
                }
            }
            if (Main.vanityPet[type] || Main.lightPet[type])
            {
                for (int b = 0; b < 22; ++b)
                {
                    if (Main.vanityPet[type] && Main.vanityPet[this.buffType[b]])
                        this.DelBuff(b);
                    if (Main.lightPet[type] && Main.lightPet[this.buffType[b]])
                        this.DelBuff(b);
                }
            }
            while (index1 == -1)
            {
                int b = -1;
                for (int index2 = 0; index2 < 22; ++index2)
                {
                    if (!Main.debuff[this.buffType[index2]])
                    {
                        b = index2;
                        break;
                    }
                }
                if (b == -1)
                    return;
                for (int index2 = b; index2 < 22; ++index2)
                {
                    if (this.buffType[index2] == 0)
                    {
                        index1 = index2;
                        break;
                    }
                }
                if (index1 == -1)
                    this.DelBuff(b);
            }
            this.buffType[index1] = type;
            this.buffTime[index1] = num;
            if (!Main.meleeBuff[type])
                return;
            for (int b = 0; b < 22; ++b)
            {
                if (b != index1 && Main.meleeBuff[this.buffType[b]])
                    this.DelBuff(b);
            }
        }

        public void DelBuff(int b)
        {
            this.buffTime[b] = 0;
            this.buffType[b] = 0;
            for (int index1 = 0; index1 < 21; ++index1)
            {
                if (this.buffTime[index1] == 0 || this.buffType[index1] == 0)
                {
                    for (int index2 = index1 + 1; index2 < 22; ++index2)
                    {
                        this.buffTime[index2 - 1] = this.buffTime[index2];
                        this.buffType[index2 - 1] = this.buffType[index2];
                        this.buffTime[index2] = 0;
                        this.buffType[index2] = 0;
                    }
                }
            }
        }

        public void ClearBuff(int type)
        {
            for (int b = 0; b < 22; ++b)
            {
                if (this.buffType[b] == type)
                    this.DelBuff(b);
            }
        }

        public int CountBuffs()
        {
            int index1 = 0;
            for (int index2 = 0; index2 < 22; ++index2)
            {
                if (this.buffType[index1] > 0)
                    ++index1;
            }
            return index1;
        }

        public void QuickHeal()
        {
            if (this.noItems || this.statLife == this.statLifeMax2 || this.potionDelay > 0)
                return;
            int num1 = this.statLifeMax2 - this.statLife;
            Item obj1 = (Item)null;
            int num2 = -this.statLifeMax2;
            for (int index = 0; index < 58; ++index)
            {
                Item obj2 = this.inventory[index];
                if (obj2.stack > 0 && obj2.itemId > 0 && (obj2.potion && obj2.healLife > 0))
                {
                    int num3 = obj2.healLife - num1;
                    if (num2 < 0)
                    {
                        if (num3 > num2)
                        {
                            obj1 = obj2;
                            num2 = num3;
                        }
                    }
                    else if (num3 < num2 && num3 >= 0)
                    {
                        obj1 = obj2;
                        num2 = num3;
                    }
                }
            }
            if (obj1 == null)
                return;
            Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, obj1.useSound);
            if (obj1.potion)
            {
                if (obj1.itemId == 227)
                {
                    this.potionDelay = this.restorationDelayTime;
                    this.AddBuff(21, this.potionDelay, true);
                }
                else
                {
                    this.potionDelay = this.potionDelayTime;
                    this.AddBuff(21, this.potionDelay, true);
                }
            }
            this.statLife += obj1.healLife;
            this.statMana += obj1.healMana;
            if (this.statLife > this.statLifeMax2)
                this.statLife = this.statLifeMax2;
            if (this.statMana > this.statManaMax2)
                this.statMana = this.statManaMax2;
            if (obj1.healLife > 0 && Main.myPlayer == this.whoAmI)
                this.HealEffect(obj1.healLife, true);
            if (obj1.healMana > 0 && Main.myPlayer == this.whoAmI)
                this.ManaEffect(obj1.healMana);
            --obj1.stack;
            if (obj1.stack <= 0)
            {
                obj1.itemId = 0;
                obj1.name = "";
            }
            Recipe.FindRecipes();
        }

        public void QuickMana()
        {
            if (this.noItems || this.statMana == this.statManaMax2)
                return;
            for (int index = 0; index < 58; ++index)
            {
                if (this.inventory[index].stack > 0 && this.inventory[index].itemId > 0 && this.inventory[index].healMana > 0 && (this.potionDelay == 0 || !this.inventory[index].potion))
                {
                    Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, this.inventory[index].useSound);
                    if (this.inventory[index].potion)
                    {
                        if (this.inventory[index].itemId == 227)
                        {
                            this.potionDelay = this.restorationDelayTime;
                            this.AddBuff(21, this.potionDelay, true);
                        }
                        else
                        {
                            this.potionDelay = this.potionDelayTime;
                            this.AddBuff(21, this.potionDelay, true);
                        }
                    }
                    this.statLife += this.inventory[index].healLife;
                    this.statMana += this.inventory[index].healMana;
                    if (this.statLife > this.statLifeMax2)
                        this.statLife = this.statLifeMax2;
                    if (this.statMana > this.statManaMax2)
                        this.statMana = this.statManaMax2;
                    if (this.inventory[index].healLife > 0 && Main.myPlayer == this.whoAmI)
                        this.HealEffect(this.inventory[index].healLife, true);
                    if (this.inventory[index].healMana > 0)
                    {
                        this.AddBuff(94, Player.manaSickTime, true);
                        if (Main.myPlayer == this.whoAmI)
                            this.ManaEffect(this.inventory[index].healMana);
                    }
                    --this.inventory[index].stack;
                    if (this.inventory[index].stack <= 0)
                    {
                        this.inventory[index].itemId = 0;
                        this.inventory[index].name = "";
                    }
                    Recipe.FindRecipes();
                    break;
                }
            }
        }

        public void QuickBuff()
        {
            if (this.noItems)
                return;
            int Style = 0;
            for (int index1 = 0; index1 < 58; ++index1)
            {
                if (this.CountBuffs() == 22)
                    return;
                if (this.inventory[index1].stack > 0 && this.inventory[index1].itemId > 0 && (this.inventory[index1].buffType > 0 && !this.inventory[index1].summon) && this.inventory[index1].buffType != 90)
                {
                    int type = this.inventory[index1].buffType;
                    bool flag = true;
                    for (int index2 = 0; index2 < 22; ++index2)
                    {
                        if (type == 27 && (this.buffType[index2] == type || this.buffType[index2] == 101 || this.buffType[index2] == 102))
                        {
                            flag = false;
                            break;
                        }
                        if (this.buffType[index2] == type)
                        {
                            flag = false;
                            break;
                        }
                        if (Main.meleeBuff[type] && Main.meleeBuff[this.buffType[index2]])
                        {
                            flag = false;
                            break;
                        }
                    }
                    if (Main.lightPet[this.inventory[index1].buffType] || Main.vanityPet[this.inventory[index1].buffType])
                    {
                        for (int index2 = 0; index2 < 22; ++index2)
                        {
                            if (Main.lightPet[this.buffType[index2]] && Main.lightPet[this.inventory[index1].buffType])
                                flag = false;
                            if (Main.vanityPet[this.buffType[index2]] && Main.vanityPet[this.inventory[index1].buffType])
                                flag = false;
                        }
                    }
                    if (this.inventory[index1].mana > 0 && flag)
                    {
                        if (this.statMana >= (int)((double)this.inventory[index1].mana * (double)this.manaCost))
                        {
                            this.manaRegenDelay = (int)this.maxRegenDelay;
                            this.statMana -= (int)((double)this.inventory[index1].mana * (double)this.manaCost);
                        }
                        else
                            flag = false;
                    }
                    if (this.whoAmI == Main.myPlayer && this.inventory[index1].itemId == 603 && !Main.cEd)
                        flag = false;
                    if (type == 27)
                    {
                        type = Main.rand.Next(3);
                        if (type == 0)
                            type = 27;
                        if (type == 1)
                            type = 101;
                        if (type == 2)
                            type = 102;
                    }
                    if (flag)
                    {
                        Style = this.inventory[index1].useSound;
                        int time1 = this.inventory[index1].buffTime;
                        if (time1 == 0)
                            time1 = 3600;
                        this.AddBuff(type, time1, true);
                        if (this.inventory[index1].consumable)
                        {
                            --this.inventory[index1].stack;
                            if (this.inventory[index1].stack <= 0)
                            {
                                this.inventory[index1].itemId = 0;
                                this.inventory[index1].name = "";
                            }
                        }
                    }
                }
            }
            if (Style <= 0)
                return;
            Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, Style);
            Recipe.FindRecipes();
        }

        public void QuickMount()
        {
            if (this.mount.Active)
            {
                this.mount.Dismount(this);
            }
            else
            {
                if (this.frozen || this.tongued || (this.webbed || this.stoned) || ((double)this.gravDir == -1.0 || this.noItems))
                    return;
                Item obj = (Item)null;
                if (obj == null && this.miscEquips[3].mountType != -1 && !MountID.Sets.Cart[this.miscEquips[3].mountType])
                    obj = this.miscEquips[3];
                if (obj == null)
                {
                    for (int index = 0; index < 58; ++index)
                    {
                        if (this.inventory[index].mountType != -1 && !MountID.Sets.Cart[this.inventory[index].mountType])
                        {
                            obj = this.inventory[index];
                            break;
                        }
                    }
                }
                if (obj == null || obj.mountType == -1 || !this.mount.CanMount(obj.mountType, this))
                    return;
                this.mount.SetMount(obj.mountType, this, false);
                if (obj.useSound <= 0)
                    return;
                Main.PlaySound(2, (int)this.Center.X, (int)this.Center.Y, obj.useSound);
            }
        }

        public void QuickGrapple()
        {
            if (this.frozen || this.tongued || (this.webbed || this.stoned))
                return;
            if (this.mount.Active)
                this.mount.Dismount(this);
            if (this.noItems)
                return;
            Item obj = (Item)null;
            if (obj == null && Main.projHook[this.miscEquips[4].shoot])
                obj = this.miscEquips[4];
            if (obj == null)
            {
                for (int index = 0; index < 58; ++index)
                {
                    if (Main.projHook[this.inventory[index].shoot])
                    {
                        obj = this.inventory[index];
                        break;
                    }
                }
            }
            if (obj == null)
                return;
            if (obj.shoot == 73)
            {
                int num = 0;
                for (int index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer && (Main.projectile[index].type == 73 || Main.projectile[index].type == 74))
                        ++num;
                }
                if (num > 1)
                    obj = (Item)null;
            }
            else if (obj.shoot == 165)
            {
                int num = 0;
                for (int index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer && Main.projectile[index].type == 165)
                        ++num;
                }
                if (num > 8)
                    obj = (Item)null;
            }
            else if (obj.shoot == 372)
            {
                int num = 0;
                for (int index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer && Main.projectile[index].type == 372)
                        ++num;
                }
                if (num > 2)
                    obj = (Item)null;
            }
            else if (obj.shoot == 165)
            {
                int num = 0;
                for (int index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer && (Main.projectile[index].type >= 646 && Main.projectile[index].type <= 649))
                        ++num;
                }
                if (num > 4)
                    obj = (Item)null;
            }
            else
            {
                for (int index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer && (Main.projectile[index].type == obj.shoot && (double)Main.projectile[index].ai[0] != 2.0))
                    {
                        obj = (Item)null;
                        break;
                    }
                }
            }
            if (obj == null)
                return;
            Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, obj.useSound);
            if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
                NetMessage.SendData(51, -1, -1, "", this.whoAmI, 2f, 0.0f, 0.0f, 0, 0, 0);
            int Type = obj.shoot;
            float num1 = obj.shootSpeed;
            int Damage = obj.damage;
            float KnockBack = obj.knockBack;
            if (Type == 13 || Type == 32 || Type == 315 || (Type >= 230 && Type <= 235 || Type == 331))
            {
                this.grappling[0] = -1;
                this.grapCount = 0;
                for (int index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI)
                    {
                        if (Main.projectile[index].type == 13)
                            Main.projectile[index].Kill();
                        if (Main.projectile[index].type == 331)
                            Main.projectile[index].Kill();
                        if (Main.projectile[index].type == 315)
                            Main.projectile[index].Kill();
                        if (Main.projectile[index].type >= 230 && Main.projectile[index].type <= 235)
                            Main.projectile[index].Kill();
                    }
                }
            }
            if (Type == 256)
            {
                int num2 = 0;
                int index1 = -1;
                int num3 = 100000;
                for (int index2 = 0; index2 < 1000; ++index2)
                {
                    if (Main.projectile[index2].active && Main.projectile[index2].owner == this.whoAmI && Main.projectile[index2].type == 256)
                    {
                        ++num2;
                        if (Main.projectile[index2].timeLeft < num3)
                        {
                            index1 = index2;
                            num3 = Main.projectile[index2].timeLeft;
                        }
                    }
                }
                if (num2 > 1)
                    Main.projectile[index1].Kill();
            }
            if (Type == 73)
            {
                for (int index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI && Main.projectile[index].type == 73)
                        Type = 74;
                }
            }
            if (obj.itemId == 3572)
            {
                int num2 = -1;
                int num3 = -1;
                for (int index = 0; index < 1000; ++index)
                {
                    Projectile projectile = Main.projectile[index];
                    if (projectile.active && projectile.owner == this.whoAmI && (projectile.type >= 646 && projectile.type <= 649) && (num3 == -1 || num3 < projectile.timeLeft))
                    {
                        num2 = projectile.type;
                        num3 = projectile.timeLeft;
                    }
                }
                switch (num2)
                {
                    case -1:
                    case 649:
                        Type = 646;
                        break;
                    case 646:
                        Type = 647;
                        break;
                    case 647:
                        Type = 648;
                        break;
                    case 648:
                        Type = 649;
                        break;
                }
            }
            Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
            float f1 = (float)Main.mouseX + Main.screenPosition.X - vector2.X;
            float f2 = (float)Main.mouseY + Main.screenPosition.Y - vector2.Y;
            if ((double)this.gravDir == -1.0)
                f2 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector2.Y;
            float num4 = (float)Math.Sqrt((double)f1 * (double)f1 + (double)f2 * (double)f2);
            float num5;
            if (float.IsNaN(f1) && float.IsNaN(f2) || (double)f1 == 0.0 && (double)f2 == 0.0)
            {
                f1 = (float)this.direction;
                f2 = 0.0f;
                num5 = num1;
            }
            else
                num5 = num1 / num4;
            float SpeedX = f1 * num5;
            float SpeedY = f2 * num5;
            Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, Type, Damage, KnockBack, this.whoAmI, 0.0f, 0.0f);
        }

        public void StatusNPC(int type, int i)
        {
            if ((int)this.meleeEnchant > 0)
            {
                if ((int)this.meleeEnchant == 1)
                    Main.npc[i].AddBuff(70, 60 * Main.rand.Next(5, 10), false);
                if ((int)this.meleeEnchant == 2)
                    Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
                if ((int)this.meleeEnchant == 3)
                    Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
                if ((int)this.meleeEnchant == 5)
                    Main.npc[i].AddBuff(69, 60 * Main.rand.Next(10, 20), false);
                if ((int)this.meleeEnchant == 6)
                    Main.npc[i].AddBuff(31, 60 * Main.rand.Next(1, 4), false);
                if ((int)this.meleeEnchant == 8)
                    Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 10), false);
                if ((int)this.meleeEnchant == 4)
                    Main.npc[i].AddBuff(72, 120, false);
            }
            if (this.frostBurn)
                Main.npc[i].AddBuff(44, 60 * Main.rand.Next(5, 15), false);
            if (this.magmaStone)
            {
                if (Main.rand.Next(4) == 0)
                    Main.npc[i].AddBuff(24, 360, false);
                else if (Main.rand.Next(2) == 0)
                    Main.npc[i].AddBuff(24, 240, false);
                else
                    Main.npc[i].AddBuff(24, 120, false);
            }
            if (type == 3211)
                Main.npc[i].AddBuff(69, 60 * Main.rand.Next(5, 10), false);
            if (type == 121)
            {
                if (Main.rand.Next(2) != 0)
                    return;
                Main.npc[i].AddBuff(24, 180, false);
            }
            else if (type == 122)
            {
                if (Main.rand.Next(10) != 0)
                    return;
                Main.npc[i].AddBuff(24, 180, false);
            }
            else if (type == 190)
            {
                if (Main.rand.Next(4) != 0)
                    return;
                Main.npc[i].AddBuff(20, 420, false);
            }
            else if (type == 217)
            {
                if (Main.rand.Next(5) != 0)
                    return;
                Main.npc[i].AddBuff(24, 180, false);
            }
            else
            {
                if (type != 1123 || Main.rand.Next(10) == 0)
                    return;
                Main.npc[i].AddBuff(31, 120, false);
            }
        }

        public void StatusPvP(int type, int i)
        {
            if ((int)this.meleeEnchant > 0)
            {
                if ((int)this.meleeEnchant == 1)
                    Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), true);
                if ((int)this.meleeEnchant == 2)
                    Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), true);
                if ((int)this.meleeEnchant == 3)
                    Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), true);
                if ((int)this.meleeEnchant == 5)
                    Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), true);
                if ((int)this.meleeEnchant == 6)
                    Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), true);
                if ((int)this.meleeEnchant == 8)
                    Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), true);
            }
            if (this.frostBurn)
                Main.player[i].AddBuff(44, 60 * Main.rand.Next(1, 8), true);
            if (this.magmaStone)
            {
                if (Main.rand.Next(7) == 0)
                    Main.player[i].AddBuff(24, 360, true);
                else if (Main.rand.Next(3) == 0)
                    Main.player[i].AddBuff(24, 120, true);
                else
                    Main.player[i].AddBuff(24, 60, true);
            }
            if (type == 121)
            {
                if (Main.rand.Next(2) != 0)
                    return;
                Main.player[i].AddBuff(24, 180, false);
            }
            else if (type == 122)
            {
                if (Main.rand.Next(10) != 0)
                    return;
                Main.player[i].AddBuff(24, 180, false);
            }
            else if (type == 190)
            {
                if (Main.rand.Next(4) != 0)
                    return;
                Main.player[i].AddBuff(20, 420, false);
            }
            else if (type == 217)
            {
                if (Main.rand.Next(5) != 0)
                    return;
                Main.player[i].AddBuff(24, 180, false);
            }
            else
            {
                if (type != 1123 || Main.rand.Next(9) == 0)
                    return;
                Main.player[i].AddBuff(31, 120, false);
            }
        }

        public void Ghost()
        {
            this.immune = false;
            this.immuneAlpha = 0;
            this.controlUp = false;
            this.controlLeft = false;
            this.controlDown = false;
            this.controlRight = false;
            this.controlJump = false;
            if (Main.hasFocus && !Main.chatMode && (!Main.editSign && !Main.editChest) && !Main.blockInput)
            {
                Keys[] pressedKeys = Main.keyState.GetPressedKeys();
                if (Main.blockKey != Keys.None)
                {
                    bool flag = false;
                    for (int index = 0; index < pressedKeys.Length; ++index)
                    {
                        if (pressedKeys[index] == Main.blockKey)
                        {
                            pressedKeys[index] = Keys.None;
                            flag = true;
                        }
                    }
                    if (!flag)
                        Main.blockKey = Keys.None;
                }
                for (int index = 0; index < pressedKeys.Length; ++index)
                {
                    string str = string.Concat((object)pressedKeys[index]);
                    if (str == Main.cUp)
                        this.controlUp = true;
                    if (str == Main.cLeft)
                        this.controlLeft = true;
                    if (str == Main.cDown)
                        this.controlDown = true;
                    if (str == Main.cRight)
                        this.controlRight = true;
                    if (str == Main.cJump)
                        this.controlJump = true;
                }
            }
            if (this.controlUp || this.controlJump)
            {
                if ((double)this.velocity.Y > 0.0)
                    this.velocity.Y *= 0.9f;
                this.velocity.Y -= 0.1f;
                if ((double)this.velocity.Y < -3.0)
                    this.velocity.Y = -3f;
            }
            else if (this.controlDown)
            {
                if ((double)this.velocity.Y < 0.0)
                    this.velocity.Y *= 0.9f;
                this.velocity.Y += 0.1f;
                if ((double)this.velocity.Y > 3.0)
                    this.velocity.Y = 3f;
            }
            else if ((double)this.velocity.Y < -0.1 || (double)this.velocity.Y > 0.1)
                this.velocity.Y *= 0.9f;
            else
                this.velocity.Y = 0.0f;
            if (this.controlLeft && !this.controlRight)
            {
                if ((double)this.velocity.X > 0.0)
                    this.velocity.X *= 0.9f;
                this.velocity.X -= 0.1f;
                if ((double)this.velocity.X < -3.0)
                    this.velocity.X = -3f;
            }
            else if (this.controlRight && !this.controlLeft)
            {
                if ((double)this.velocity.X < 0.0)
                    this.velocity.X *= 0.9f;
                this.velocity.X += 0.1f;
                if ((double)this.velocity.X > 3.0)
                    this.velocity.X = 3f;
            }
            else if ((double)this.velocity.X < -0.1 || (double)this.velocity.X > 0.1)
                this.velocity.X *= 0.9f;
            else
                this.velocity.X = 0.0f;
            Player player = this;
            Vector2 vector2 = player.position + this.velocity;
            player.position = vector2;
            ++this.ghostFrameCounter;
            if ((double)this.velocity.X < 0.0)
                this.direction = -1;
            else if ((double)this.velocity.X > 0.0)
                this.direction = 1;
            if (this.ghostFrameCounter >= 8)
            {
                this.ghostFrameCounter = 0;
                ++this.ghostFrame;
                if (this.ghostFrame >= 4)
                    this.ghostFrame = 0;
            }
            if ((double)this.position.X < (double)Main.leftWorld + (double)(Lighting.offScreenTiles * 16) + 16.0)
            {
                this.position.X = (float)((double)Main.leftWorld + (double)(Lighting.offScreenTiles * 16) + 16.0);
                this.velocity.X = 0.0f;
            }
            if ((double)this.position.X + (double)this.width > (double)Main.rightWorld - (double)(Lighting.offScreenTiles * 16) - 32.0)
            {
                this.position.X = (float)((double)Main.rightWorld - (double)(Lighting.offScreenTiles * 16) - 32.0) - (float)this.width;
                this.velocity.X = 0.0f;
            }
            if ((double)this.position.Y < (double)Main.topWorld + (double)(Lighting.offScreenTiles * 16) + 16.0)
            {
                this.position.Y = (float)((double)Main.topWorld + (double)(Lighting.offScreenTiles * 16) + 16.0);
                if ((double)this.velocity.Y < -0.1)
                    this.velocity.Y = -0.1f;
            }
            if ((double)this.position.Y <= (double)Main.bottomWorld - (double)(Lighting.offScreenTiles * 16) - 32.0 - (double)this.height)
                return;
            this.position.Y = (float)((double)Main.bottomWorld - (double)(Lighting.offScreenTiles * 16) - 32.0) - (float)this.height;
            this.velocity.Y = 0.0f;
        }

        public void OnHit(float x, float y, Entity victim)
        {
            if (Main.myPlayer != this.whoAmI)
                return;
            if (this.onHitDodge && this.shadowDodgeTimer == 0 && Main.rand.Next(4) == 0)
            {
                if (!this.shadowDodge)
                    this.shadowDodgeTimer = 1800;
                this.AddBuff(59, 1800, true);
            }
            if (this.onHitRegen)
                this.AddBuff(58, 300, true);
            if (this.stardustMinion && victim is NPC)
            {
                for (int index = 0; index < 1000; ++index)
                {
                    Projectile projectile = Main.projectile[index];
                    if (projectile.active && projectile.owner == this.whoAmI && (projectile.type == 613 && (double)projectile.localAI[1] <= 0.0) && Main.rand.Next(2) == 0)
                    {
                        Vector2 vector2 = new Vector2(x, y) - projectile.Center;
                        if ((double)vector2.Length() > 0.0)
                            vector2.Normalize();
                        vector2 *= 20f;
                        Projectile.NewProjectile(projectile.Center.X, projectile.Center.Y, vector2.X, vector2.Y, 614, projectile.damage / 3, 0.0f, projectile.owner, 0.0f, (float)victim.whoAmI);
                        projectile.localAI[1] = (float)(30 + Main.rand.Next(4) * 10);
                    }
                }
            }
            if (this.onHitPetal && this.petalTimer == 0)
            {
                this.petalTimer = 20;
                int num1 = 1;
                if ((double)x < (double)this.position.X + (double)(this.width / 2))
                    num1 = -1;
                int num2 = this.direction;
                float num3 = Main.screenPosition.X;
                if (num2 < 0)
                    num3 += (float)Main.screenWidth;
                float num4 = Main.screenPosition.Y + (float)Main.rand.Next(Main.screenHeight);
                Vector2 vector2 = new Vector2(num3, num4);
                float num5 = x - vector2.X;
                float num6 = y - vector2.Y;
                float num7 = num5 + (float)Main.rand.Next(-50, 51) * 0.1f;
                float num8 = num6 + (float)Main.rand.Next(-50, 51) * 0.1f;
                float num9 = 24f / (float)Math.Sqrt((double)num7 * (double)num7 + (double)num8 * (double)num8);
                float SpeedX = num7 * num9;
                float SpeedY = num8 * num9;
                Projectile.NewProjectile(num3, num4, SpeedX, SpeedY, 221, 36, 0.0f, this.whoAmI, 0.0f, 0.0f);
            }
            if (!this.crystalLeaf || this.petalTimer != 0)
                return;
            int num10 = this.inventory[this.selectedItem].itemId;
            for (int index = 0; index < 1000; ++index)
            {
                if (Main.projectile[index].owner == this.whoAmI && Main.projectile[index].type == 226)
                {
                    this.petalTimer = 50;
                    float num1 = 12f;
                    Vector2 vector2 = new Vector2(Main.projectile[index].position.X + (float)this.width * 0.5f, Main.projectile[index].position.Y + (float)this.height * 0.5f);
                    float num2 = x - vector2.X;
                    float num3 = y - vector2.Y;
                    float num4 = (float)Math.Sqrt((double)num2 * (double)num2 + (double)num3 * (double)num3);
                    float num5 = num1 / num4;
                    float SpeedX = num2 * num5;
                    float SpeedY = num3 * num5;
                    Projectile.NewProjectile(Main.projectile[index].Center.X - 4f, Main.projectile[index].Center.Y, SpeedX, SpeedY, 227, Player.crystalLeafDamage, (float)Player.crystalLeafKB, this.whoAmI, 0.0f, 0.0f);
                    break;
                }
            }
        }

        public void openPresent()
        {
            if (Main.rand.Next(15) == 0 && Main.hardMode)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 602, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(30) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1922, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(400) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1927, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1870, 1, false, 0, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(21, -1, -1, "", number1, 1f, 0.0f, 0.0f, 0, 0, 0);
                int number2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 97, Main.rand.Next(30, 61), false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number2, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1909, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1917, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1915, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1918, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1921, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(300) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1923, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(40) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1907, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(10) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1908, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(15) == 0)
            {
                switch (Main.rand.Next(5))
                {
                    case 0:
                        int number3 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1932, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number3, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number4 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1933, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number4, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number5 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1934, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number5, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 1:
                        int number6 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1935, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number6, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number7 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1936, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number7, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number8 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1937, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number8, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 2:
                        int number9 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1940, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number9, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number10 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1941, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number10, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number11 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1942, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number11, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 3:
                        int number12 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1938, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number12, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 4:
                        int number13 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1939, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number13, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                }
            }
            else if (Main.rand.Next(7) == 0)
            {
                int Type = Main.rand.Next(3);
                if (Type == 0)
                    Type = 1911;
                if (Type == 1)
                    Type = 1919;
                if (Type == 2)
                    Type = 1920;
                int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number1, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(8) == 0)
            {
                int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1912, Main.rand.Next(1, 4), false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number1, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(9) == 0)
            {
                int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1913, Main.rand.Next(20, 41), false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number1, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else
            {
                switch (Main.rand.Next(3))
                {
                    case 0:
                        int number14 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1872, Main.rand.Next(20, 50), false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number14, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 1:
                        int number15 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 586, Main.rand.Next(20, 50), false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number15, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    default:
                        int number16 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 591, Main.rand.Next(20, 50), false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number16, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                }
            }
        }

        public void QuickSpawnItem(int item, int stack = 1)
        {
            int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, item, stack, false, -1, false);
            if (Main.netMode != 1)
                return;
            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
        }

        public void OpenBossBag(int type)
        {
            if (type == 3318)
            {
                if (Main.rand.Next(2) == 0)
                    this.QuickSpawnItem(2430, 1);
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2493, 1);
                int num1 = Main.rand.Next(256, 259);
                int num2 = Main.rand.Next(256, 259);
                while (num2 == num1)
                    num2 = Main.rand.Next(256, 259);
                this.QuickSpawnItem(num1, 1);
                this.QuickSpawnItem(num2, 1);
                if (Main.rand.Next(2) == 0)
                    this.QuickSpawnItem(2610, 1);
                else
                    this.QuickSpawnItem(2585, 1);
                this.QuickSpawnItem(998, 1);
                this.QuickSpawnItem(3090, 1);
            }
            else if (type == 3319)
            {
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2112, 1);
                if (Main.rand.Next(30) == 0)
                    this.QuickSpawnItem(1299, 1);
                if (WorldGen.crimson)
                {
                    this.QuickSpawnItem(880, Main.rand.Next(20) + 10 + (Main.rand.Next(20) + 10) + (Main.rand.Next(20) + 10));
                    this.QuickSpawnItem(2171, Main.rand.Next(3) + 1);
                }
                else
                {
                    this.QuickSpawnItem(56, Main.rand.Next(20) + 10 + (Main.rand.Next(20) + 10) + (Main.rand.Next(20) + 10));
                    this.QuickSpawnItem(59, Main.rand.Next(3) + 1);
                    this.QuickSpawnItem(47, Main.rand.Next(30) + 20);
                }
                this.QuickSpawnItem(3097, 1);
            }
            else if (type == 3320)
            {
                this.QuickSpawnItem(56, Main.rand.Next(15, 30) + Main.rand.Next(15, 31));
                this.QuickSpawnItem(86, Main.rand.Next(10, 20));
                if (Main.rand.Next(20) == 0)
                    this.QuickSpawnItem(994, 1);
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2111, 1);
                this.QuickSpawnItem(3224, 1);
            }
            else if (type == 3321)
            {
                this.QuickSpawnItem(880, Main.rand.Next(20, 46) + Main.rand.Next(20, 46));
                this.QuickSpawnItem(1329, Main.rand.Next(10, 20));
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2104, 1);
                if (Main.rand.Next(20) == 0)
                    this.QuickSpawnItem(3060, 1);
                this.QuickSpawnItem(3223, 1);
            }
            else if (type == 3322)
            {
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2108, 1);
                int num = Main.rand.Next(3);
                switch (num)
                {
                    case 0:
                        num = 1121;
                        break;
                    case 1:
                        num = 1123;
                        break;
                    case 2:
                        num = 2888;
                        break;
                }
                this.QuickSpawnItem(num, 1);
                this.QuickSpawnItem(3333, 1);
                if (Main.rand.Next(3) == 0)
                    this.QuickSpawnItem(1132, 1);
                if (Main.rand.Next(9) == 0)
                    this.QuickSpawnItem(1170, 1);
                if (Main.rand.Next(9) == 0)
                    this.QuickSpawnItem(2502, 1);
                this.QuickSpawnItem(1129, 1);
                this.QuickSpawnItem(Main.rand.Next(842, 845), 1);
                this.QuickSpawnItem(1130, Main.rand.Next(10, 30));
                this.QuickSpawnItem(2431, Main.rand.Next(17, 30));
            }
            else if (type == 3323)
            {
                this.QuickSpawnItem(3245, 1);
                switch (Main.rand.Next(3))
                {
                    case 0:
                        this.QuickSpawnItem(1281, 1);
                        break;
                    case 1:
                        this.QuickSpawnItem(1273, 1);
                        break;
                    default:
                        this.QuickSpawnItem(1313, 1);
                        break;
                }
            }
            else if (type == 3324)
            {
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2105, 1);
                this.QuickSpawnItem(367, 1);
                if (!this.extraAccessory)
                    this.QuickSpawnItem(3335, 1);
                int num = Main.rand.Next(4);
                this.QuickSpawnItem(num != 3 ? 489 + num : 2998, 1);
                switch (Main.rand.Next(3))
                {
                    case 0:
                        this.QuickSpawnItem(514, 1);
                        break;
                    case 1:
                        this.QuickSpawnItem(426, 1);
                        break;
                    case 2:
                        this.QuickSpawnItem(434, 1);
                        break;
                }
            }
            else if (type == 3325)
            {
                this.TryGettingDevArmor();
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2113, 1);
                this.QuickSpawnItem(548, Main.rand.Next(25, 41));
                this.QuickSpawnItem(1225, Main.rand.Next(20, 36));
                this.QuickSpawnItem(3355, 1);
            }
            else if (type == 3326)
            {
                this.TryGettingDevArmor();
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2106, 1);
                this.QuickSpawnItem(549, Main.rand.Next(25, 41));
                this.QuickSpawnItem(1225, Main.rand.Next(20, 36));
                this.QuickSpawnItem(3354, 1);
            }
            else if (type == 3327)
            {
                this.TryGettingDevArmor();
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2107, 1);
                this.QuickSpawnItem(547, Main.rand.Next(25, 41));
                this.QuickSpawnItem(1225, Main.rand.Next(20, 36));
                this.QuickSpawnItem(3356, 1);
            }
            else if (type == 3328)
            {
                this.TryGettingDevArmor();
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2109, 1);
                this.QuickSpawnItem(1141, 1);
                this.QuickSpawnItem(3336, 1);
                if (Main.rand.Next(15) == 0)
                    this.QuickSpawnItem(1182, 1);
                if (Main.rand.Next(20) == 0)
                    this.QuickSpawnItem(1305, 1);
                if (Main.rand.Next(2) == 0)
                    this.QuickSpawnItem(1157, 1);
                if (Main.rand.Next(10) == 0)
                    this.QuickSpawnItem(3021, 1);
                switch (Main.rand.Next(6))
                {
                    case 0:
                        this.QuickSpawnItem(758, 1);
                        this.QuickSpawnItem(771, Main.rand.Next(50, 150));
                        break;
                    case 1:
                        this.QuickSpawnItem(1255, 1);
                        break;
                    case 2:
                        this.QuickSpawnItem(788, 1);
                        break;
                    case 3:
                        this.QuickSpawnItem(1178, 1);
                        break;
                    case 4:
                        this.QuickSpawnItem(1259, 1);
                        break;
                    case 5:
                        this.QuickSpawnItem(1155, 1);
                        break;
                }
            }
            else if (type == 3329)
            {
                this.TryGettingDevArmor();
                this.QuickSpawnItem(3337, 1);
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2110, 1);
                switch (Main.rand.Next(8))
                {
                    case 0:
                        this.QuickSpawnItem(1258, 1);
                        this.QuickSpawnItem(1261, Main.rand.Next(60, 100));
                        break;
                    case 1:
                        this.QuickSpawnItem(1122, 1);
                        break;
                    case 2:
                        this.QuickSpawnItem(899, 1);
                        break;
                    case 3:
                        this.QuickSpawnItem(1248, 1);
                        break;
                    case 4:
                        this.QuickSpawnItem(1294, 1);
                        break;
                    case 5:
                        this.QuickSpawnItem(1295, 1);
                        break;
                    case 6:
                        this.QuickSpawnItem(1296, 1);
                        break;
                    case 7:
                        this.QuickSpawnItem(1297, 1);
                        break;
                }
                this.QuickSpawnItem(2218, Main.rand.Next(18, 24));
            }
            else if (type == 3330)
            {
                this.TryGettingDevArmor();
                this.QuickSpawnItem(3367, 1);
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(2588, 1);
                if (Main.rand.Next(10) == 0)
                    this.QuickSpawnItem(2609, 1);
                switch (Main.rand.Next(5))
                {
                    case 0:
                        this.QuickSpawnItem(2611, 1);
                        break;
                    case 1:
                        this.QuickSpawnItem(2624, 1);
                        break;
                    case 2:
                        this.QuickSpawnItem(2622, 1);
                        break;
                    case 3:
                        this.QuickSpawnItem(2621, 1);
                        break;
                    case 4:
                        this.QuickSpawnItem(2623, 1);
                        break;
                }
            }
            else if (type == 3331)
            {
                this.TryGettingDevArmor();
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(3372, 1);
            }
            else if (type == 3332)
            {
                this.TryGettingDevArmor();
                if (Main.rand.Next(7) == 0)
                    this.QuickSpawnItem(3373, 1);
                if (!this.HasItem(3384))
                    this.QuickSpawnItem(3384, 1);
                this.QuickSpawnItem(3460, Main.rand.Next(90, 111));
                this.QuickSpawnItem(1131, 1);
                this.QuickSpawnItem(3577, 1);
                this.QuickSpawnItem(Utils.SelectRandom<int>(Main.rand, 3063, 3389, 3065, 1553, 3546, 3541, 3570, 3571, 3569), 1);
            }
            int Type = -1;
            if (type == 3318)
                Type = 50;
            if (type == 3319)
                Type = 4;
            if (type == 3320)
                Type = 13;
            if (type == 3321)
                Type = 266;
            if (type == 3322)
                Type = 222;
            if (type == 3323)
                Type = 35;
            if (type == 3324)
                Type = 113;
            if (type == 3325)
                Type = 134;
            if (type == 3326)
                Type = 125;
            if (type == 3327)
                Type = (int)sbyte.MaxValue;
            if (type == 3328)
                Type = 262;
            if (type == 3329)
                Type = 245;
            if (type == 3330)
                Type = 370;
            if (type == 3331)
                Type = 439;
            if (type == 3332)
                Type = 398;
            if (Type <= 0)
                return;
            NPC npc = new NPC();
            npc.SetDefaults(Type, -1f);
            float num3 = npc.value * (float)(1.0 + (double)Main.rand.Next(-20, 21) * 0.00999999977648258);
            if (Main.rand.Next(5) == 0)
                num3 *= (float)(1.0 + (double)Main.rand.Next(5, 11) * 0.00999999977648258);
            if (Main.rand.Next(10) == 0)
                num3 *= (float)(1.0 + (double)Main.rand.Next(10, 21) * 0.00999999977648258);
            if (Main.rand.Next(15) == 0)
                num3 *= (float)(1.0 + (double)Main.rand.Next(15, 31) * 0.00999999977648258);
            if (Main.rand.Next(20) == 0)
                num3 *= (float)(1.0 + (double)Main.rand.Next(20, 41) * 0.00999999977648258);
            while ((int)num3 > 0)
            {
                if ((double)num3 > 1000000.0)
                {
                    int stack = (int)((double)num3 / 1000000.0);
                    num3 -= (float)(1000000 * stack);
                    this.QuickSpawnItem(74, stack);
                }
                else if ((double)num3 > 10000.0)
                {
                    int stack = (int)((double)num3 / 10000.0);
                    num3 -= (float)(10000 * stack);
                    this.QuickSpawnItem(73, stack);
                }
                else if ((double)num3 > 100.0)
                {
                    int stack = (int)((double)num3 / 100.0);
                    num3 -= (float)(100 * stack);
                    this.QuickSpawnItem(72, stack);
                }
                else
                {
                    int stack = (int)num3;
                    if (stack < 1)
                        stack = 1;
                    num3 -= (float)stack;
                    this.QuickSpawnItem(71, stack);
                }
            }
        }

        private void TryGettingDevArmor()
        {
            if (Main.rand.Next(20) != 0)
                return;
            Main.rand.Next(7);
            switch (Main.rand.Next(12))
            {
                case 0:
                    this.QuickSpawnItem(666, 1);
                    this.QuickSpawnItem(667, 1);
                    this.QuickSpawnItem(668, 1);
                    this.QuickSpawnItem(665, 1);
                    break;
                case 1:
                    this.QuickSpawnItem(1554, 1);
                    this.QuickSpawnItem(1555, 1);
                    this.QuickSpawnItem(1556, 1);
                    this.QuickSpawnItem(1586, 1);
                    break;
                case 2:
                    this.QuickSpawnItem(1587, 1);
                    this.QuickSpawnItem(1588, 1);
                    this.QuickSpawnItem(1586, 1);
                    break;
                case 3:
                    this.QuickSpawnItem(1557, 1);
                    this.QuickSpawnItem(1558, 1);
                    this.QuickSpawnItem(1559, 1);
                    this.QuickSpawnItem(1585, 1);
                    break;
                case 4:
                    this.QuickSpawnItem(1560, 1);
                    this.QuickSpawnItem(1561, 1);
                    this.QuickSpawnItem(1562, 1);
                    this.QuickSpawnItem(1584, 1);
                    break;
                case 5:
                    this.QuickSpawnItem(1563, 1);
                    this.QuickSpawnItem(1564, 1);
                    this.QuickSpawnItem(1565, 1);
                    this.QuickSpawnItem(3582, 1);
                    break;
                case 6:
                    this.QuickSpawnItem(1566, 1);
                    this.QuickSpawnItem(1567, 1);
                    this.QuickSpawnItem(1568, 1);
                    break;
                case 7:
                    this.QuickSpawnItem(1580, 1);
                    this.QuickSpawnItem(1581, 1);
                    this.QuickSpawnItem(1582, 1);
                    this.QuickSpawnItem(1583, 1);
                    break;
                case 8:
                    this.QuickSpawnItem(3226, 1);
                    this.QuickSpawnItem(3227, 1);
                    this.QuickSpawnItem(3228, 1);
                    break;
                case 9:
                    this.QuickSpawnItem(3583, 1);
                    this.QuickSpawnItem(3581, 1);
                    this.QuickSpawnItem(3578, 1);
                    this.QuickSpawnItem(3579, 1);
                    this.QuickSpawnItem(3580, 1);
                    break;
                case 10:
                    this.QuickSpawnItem(3585, 1);
                    this.QuickSpawnItem(3586, 1);
                    this.QuickSpawnItem(3587, 1);
                    this.QuickSpawnItem(3588, 1);
                    this.QuickSpawnItem(3024, 4);
                    break;
                case 11:
                    this.QuickSpawnItem(3589, 1);
                    this.QuickSpawnItem(3590, 1);
                    this.QuickSpawnItem(3591, 1);
                    this.QuickSpawnItem(3592, 1);
                    this.QuickSpawnItem(3599, 4);
                    break;
            }
        }

        public void openCrate(int type)
        {
            int num = type - 2334;
            if (type >= 3203)
                num = type - 3203 + 3;
            if (num == 0)
            {
                bool flag = true;
                while (flag)
                {
                    if (Main.hardMode && flag && Main.rand.Next(200) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3064, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (flag && Main.rand.Next(40) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3200, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (flag && Main.rand.Next(40) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3201, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.hardMode && flag && Main.rand.Next(25) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2424, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(45) == 0)
                    {
                        int Type = Main.rand.Next(5);
                        switch (Type)
                        {
                            case 0:
                                Type = 285;
                                break;
                            case 1:
                                Type = 953;
                                break;
                            case 2:
                                Type = 946;
                                break;
                            case 3:
                                Type = 3068;
                                break;
                            case 4:
                                Type = 3084;
                                break;
                        }
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (!Main.hardMode && flag && Main.rand.Next(50) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 997, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(7) == 0)
                    {
                        int Type;
                        int Stack;
                        if (Main.rand.Next(3) == 0)
                        {
                            Type = 73;
                            Stack = Main.rand.Next(1, 6);
                        }
                        else
                        {
                            Type = 72;
                            Stack = Main.rand.Next(20, 91);
                        }
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(7) == 0)
                    {
                        int Type = Main.rand.Next(8);
                        switch (Type)
                        {
                            case 0:
                                Type = 12;
                                break;
                            case 1:
                                Type = 11;
                                break;
                            case 2:
                                Type = 14;
                                break;
                            case 3:
                                Type = 13;
                                break;
                            case 4:
                                Type = 699;
                                break;
                            case 5:
                                Type = 700;
                                break;
                            case 6:
                                Type = 701;
                                break;
                            case 7:
                                Type = 702;
                                break;
                        }
                        if (Main.hardMode && Main.rand.Next(2) == 0)
                        {
                            Type = Main.rand.Next(6);
                            switch (Type)
                            {
                                case 0:
                                    Type = 364;
                                    break;
                                case 1:
                                    Type = 365;
                                    break;
                                case 2:
                                    Type = 366;
                                    break;
                                case 3:
                                    Type = 1104;
                                    break;
                                case 4:
                                    Type = 1105;
                                    break;
                                case 5:
                                    Type = 1106;
                                    break;
                            }
                        }
                        int Stack = Main.rand.Next(8, 21);
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(8) == 0)
                    {
                        int Type = Main.rand.Next(8);
                        switch (Type)
                        {
                            case 0:
                                Type = 20;
                                break;
                            case 1:
                                Type = 22;
                                break;
                            case 2:
                                Type = 21;
                                break;
                            case 3:
                                Type = 19;
                                break;
                            case 4:
                                Type = 703;
                                break;
                            case 5:
                                Type = 704;
                                break;
                            case 6:
                                Type = 705;
                                break;
                            case 7:
                                Type = 706;
                                break;
                        }
                        int Stack = Main.rand.Next(2, 8);
                        if (Main.hardMode && Main.rand.Next(2) == 0)
                        {
                            Type = Main.rand.Next(6);
                            switch (Type)
                            {
                                case 0:
                                    Type = 381;
                                    break;
                                case 1:
                                    Type = 382;
                                    break;
                                case 2:
                                    Type = 391;
                                    break;
                                case 3:
                                    Type = 1184;
                                    break;
                                case 4:
                                    Type = 1191;
                                    break;
                                case 5:
                                    Type = 1198;
                                    break;
                            }
                            Stack -= Main.rand.Next(2);
                        }
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(7) == 0)
                    {
                        int Type = Main.rand.Next(10);
                        switch (Type)
                        {
                            case 0:
                                Type = 288;
                                break;
                            case 1:
                                Type = 290;
                                break;
                            case 2:
                                Type = 292;
                                break;
                            case 3:
                                Type = 299;
                                break;
                            case 4:
                                Type = 298;
                                break;
                            case 5:
                                Type = 304;
                                break;
                            case 6:
                                Type = 291;
                                break;
                            case 7:
                                Type = 2322;
                                break;
                            case 8:
                                Type = 2323;
                                break;
                            case 9:
                                Type = 2329;
                                break;
                        }
                        int Stack = Main.rand.Next(1, 4);
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                }
                if (Main.rand.Next(3) == 0)
                {
                    int Type = Main.rand.Next(2);
                    switch (Type)
                    {
                        case 0:
                            Type = 28;
                            break;
                        case 1:
                            Type = 110;
                            break;
                    }
                    int Stack = Main.rand.Next(5, 16);
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (Main.rand.Next(3) != 0)
                    return;
                int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(3) != 0 ? 2674 : 2675, Main.rand.Next(1, 5), false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number1, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (num == 1)
            {
                bool flag = true;
                while (flag)
                {
                    if (Main.hardMode && flag && Main.rand.Next(60) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3064, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (flag && Main.rand.Next(25) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2501, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (flag && Main.rand.Next(20) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2587, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (flag && Main.rand.Next(15) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2608, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (flag && Main.rand.Next(20) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3200, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (flag && Main.rand.Next(20) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3201, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(4) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 73, Main.rand.Next(5, 11), false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(4) == 0)
                    {
                        int Type = Main.rand.Next(8);
                        switch (Type)
                        {
                            case 0:
                                Type = 20;
                                break;
                            case 1:
                                Type = 22;
                                break;
                            case 2:
                                Type = 21;
                                break;
                            case 3:
                                Type = 19;
                                break;
                            case 4:
                                Type = 703;
                                break;
                            case 5:
                                Type = 704;
                                break;
                            case 6:
                                Type = 705;
                                break;
                            case 7:
                                Type = 706;
                                break;
                        }
                        int Stack = Main.rand.Next(6, 15);
                        if (Main.hardMode && Main.rand.Next(3) != 0)
                        {
                            Type = Main.rand.Next(6);
                            switch (Type)
                            {
                                case 0:
                                    Type = 381;
                                    break;
                                case 1:
                                    Type = 382;
                                    break;
                                case 2:
                                    Type = 391;
                                    break;
                                case 3:
                                    Type = 1184;
                                    break;
                                case 4:
                                    Type = 1191;
                                    break;
                                case 5:
                                    Type = 1198;
                                    break;
                            }
                            Stack -= Main.rand.Next(2);
                        }
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(4) == 0)
                    {
                        int Type = Main.rand.Next(8);
                        switch (Type)
                        {
                            case 0:
                                Type = 288;
                                break;
                            case 1:
                                Type = 296;
                                break;
                            case 2:
                                Type = 304;
                                break;
                            case 3:
                                Type = 305;
                                break;
                            case 4:
                                Type = 2322;
                                break;
                            case 5:
                                Type = 2323;
                                break;
                            case 6:
                                Type = 2324;
                                break;
                            case 7:
                                Type = 2327;
                                break;
                        }
                        int Stack = Main.rand.Next(2, 5);
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                }
                if (Main.rand.Next(2) == 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(188, 190), Main.rand.Next(5, 16), false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (Main.rand.Next(2) != 0)
                    return;
                int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(3) != 0 ? 2675 : 2676, Main.rand.Next(2, 5), false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number1, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (num == 2)
            {
                bool flag = true;
                while (flag)
                {
                    if (Main.hardMode && flag && Main.rand.Next(20) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3064, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (flag && Main.rand.Next(10) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2491, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(3) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 73, Main.rand.Next(8, 21), false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(3) == 0)
                    {
                        int Type = Main.rand.Next(4);
                        switch (Type)
                        {
                            case 0:
                                Type = 21;
                                break;
                            case 1:
                                Type = 19;
                                break;
                            case 2:
                                Type = 705;
                                break;
                            case 3:
                                Type = 706;
                                break;
                        }
                        if (Main.hardMode && Main.rand.Next(3) != 0)
                        {
                            Type = Main.rand.Next(4);
                            switch (Type)
                            {
                                case 0:
                                    Type = 382;
                                    break;
                                case 1:
                                    Type = 391;
                                    break;
                                case 2:
                                    Type = 1191;
                                    break;
                                case 3:
                                    Type = 1198;
                                    break;
                            }
                        }
                        int Stack = Main.rand.Next(15, 31);
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                }
                if (Main.rand.Next(3) == 0)
                {
                    int Type = Main.rand.Next(5);
                    switch (Type)
                    {
                        case 0:
                            Type = 288;
                            break;
                        case 1:
                            Type = 296;
                            break;
                        case 2:
                            Type = 305;
                            break;
                        case 3:
                            Type = 2322;
                            break;
                        case 4:
                            Type = 2323;
                            break;
                    }
                    int Stack = Main.rand.Next(2, 6);
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (Main.rand.Next(2) == 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(499, 501), Main.rand.Next(5, 21), false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (Main.rand.Next(3) == 0)
                    return;
                int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 2676, Main.rand.Next(3, 8), false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number1, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else
            {
                int maxValue = 6;
                bool flag = true;
                while (flag)
                {
                    if (num == 3 && flag && Main.rand.Next(maxValue) == 0)
                    {
                        int Type;
                        switch (Main.rand.Next(5))
                        {
                            case 0:
                                Type = 162;
                                break;
                            case 1:
                                Type = 111;
                                break;
                            case 2:
                                Type = 96;
                                break;
                            case 3:
                                Type = 115;
                                break;
                            default:
                                Type = 64;
                                break;
                        }
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (num == 4 && flag && Main.rand.Next(maxValue) == 0)
                    {
                        int Type;
                        switch (Main.rand.Next(5))
                        {
                            case 0:
                                Type = 800;
                                break;
                            case 1:
                                Type = 802;
                                break;
                            case 2:
                                Type = 1256;
                                break;
                            case 3:
                                Type = 1290;
                                break;
                            default:
                                Type = 3062;
                                break;
                        }
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (num == 5 && flag && Main.rand.Next(maxValue) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 3085, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (num == 6 && flag && Main.rand.Next(maxValue) == 0)
                    {
                        int Type;
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                Type = 158;
                                break;
                            case 1:
                                Type = 65;
                                break;
                            default:
                                Type = 159;
                                break;
                        }
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (num == 8 && flag && Main.rand.Next(maxValue) == 0)
                    {
                        int Type;
                        switch (Main.rand.Next(5))
                        {
                            case 0:
                                Type = 212;
                                break;
                            case 1:
                                Type = 964;
                                break;
                            case 2:
                                Type = 211;
                                break;
                            case 3:
                                Type = 213;
                                break;
                            default:
                                Type = 2292;
                                break;
                        }
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, 1, false, -1, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(4) == 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 73, Main.rand.Next(5, 13), false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                    if (Main.rand.Next(4) == 0)
                    {
                        int Type = Main.rand.Next(6);
                        switch (Type)
                        {
                            case 0:
                                Type = 22;
                                break;
                            case 1:
                                Type = 21;
                                break;
                            case 2:
                                Type = 19;
                                break;
                            case 3:
                                Type = 704;
                                break;
                            case 4:
                                Type = 705;
                                break;
                            case 5:
                                Type = 706;
                                break;
                        }
                        int Stack = Main.rand.Next(10, 21);
                        if (Main.hardMode && Main.rand.Next(3) != 0)
                        {
                            Type = Main.rand.Next(6);
                            switch (Type)
                            {
                                case 0:
                                    Type = 381;
                                    break;
                                case 1:
                                    Type = 382;
                                    break;
                                case 2:
                                    Type = 391;
                                    break;
                                case 3:
                                    Type = 1184;
                                    break;
                                case 4:
                                    Type = 1191;
                                    break;
                                case 5:
                                    Type = 1198;
                                    break;
                            }
                            Stack -= Main.rand.Next(3);
                        }
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                        flag = false;
                    }
                }
                if (Main.rand.Next(4) == 0)
                {
                    int Type = Main.rand.Next(6);
                    switch (Type)
                    {
                        case 0:
                            Type = 288;
                            break;
                        case 1:
                            Type = 296;
                            break;
                        case 2:
                            Type = 304;
                            break;
                        case 3:
                            Type = 305;
                            break;
                        case 4:
                            Type = 2322;
                            break;
                        case 5:
                            Type = 2323;
                            break;
                    }
                    int Stack = Main.rand.Next(2, 5);
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (Main.rand.Next(2) == 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(188, 190), Main.rand.Next(5, 18), false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (Main.rand.Next(2) == 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(2) != 0 ? 2675 : 2676, Main.rand.Next(2, 7), false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (num != 3 && num != 4 && num != 7)
                    return;
                if (Main.hardMode && Main.rand.Next(2) == 0)
                {
                    int Type = 521;
                    if (num == 7)
                        Type = 520;
                    int Stack = Main.rand.Next(2, 6);
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (!Main.hardMode || Main.rand.Next(2) != 0)
                    return;
                int Type1 = 522;
                int Stack1 = Main.rand.Next(2, 6);
                if (num == 4)
                    Type1 = 1332;
                else if (num == 7)
                {
                    Type1 = 502;
                    Stack1 = Main.rand.Next(4, 11);
                }
                int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type1, Stack1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number1, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
        }

        public bool consumeItem(int type)
        {
            for (int index = 0; index < 58; ++index)
            {
                if (this.inventory[index].stack > 0 && this.inventory[index].itemId == type)
                {
                    --this.inventory[index].stack;
                    if (this.inventory[index].stack <= 0)
                        this.inventory[index].SetDefaults(0, false);
                    return true;
                }
            }
            return false;
        }

        public void openLockBox()
        {
            bool flag = true;
            while (flag)
            {
                flag = false;
                int Type1;
                switch (Main.rand.Next(7))
                {
                    case 1:
                        Type1 = 329;
                        break;
                    case 2:
                        Type1 = 155;
                        break;
                    case 3:
                        Type1 = 156;
                        break;
                    case 4:
                        Type1 = 157;
                        break;
                    case 5:
                        Type1 = 163;
                        break;
                    case 6:
                        Type1 = 113;
                        break;
                    default:
                        Type1 = 164;
                        break;
                }
                int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type1, 1, false, -1, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(21, -1, -1, "", number1, 1f, 0.0f, 0.0f, 0, 0, 0);
                if (Main.rand.Next(3) == 0)
                {
                    flag = false;
                    int Stack = Main.rand.Next(1, 4);
                    if (Main.rand.Next(2) == 0)
                        Stack += Main.rand.Next(2);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(3);
                    if (Main.rand.Next(4) == 0)
                        Stack += Main.rand.Next(3);
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 3);
                    int number2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 73, Stack, false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (Main.rand.Next(2) == 0)
                {
                    flag = false;
                    int number2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 72, Main.rand.Next(10, 100), false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (Main.rand.Next(3) == 0)
                {
                    flag = false;
                    int number2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 188, Main.rand.Next(2, 6), false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (Main.rand.Next(3) == 0)
                {
                    flag = false;
                    int Type2;
                    switch (Main.rand.Next(9))
                    {
                        case 0:
                            Type2 = 296;
                            break;
                        case 1:
                            Type2 = 2346;
                            break;
                        case 2:
                            Type2 = 305;
                            break;
                        case 3:
                            Type2 = 2323;
                            break;
                        case 4:
                            Type2 = 292;
                            break;
                        case 5:
                            Type2 = 294;
                            break;
                        case 6:
                            Type2 = 288;
                            break;
                        default:
                            Type2 = Main.netMode != 1 ? 2350 : 2997;
                            break;
                    }
                    int number2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type2, Main.rand.Next(1, 4), false, 0, false);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
            }
        }

        public void openHerbBag()
        {
            int num = Main.rand.Next(2, 5);
            if (Main.rand.Next(3) == 0)
                ++num;
            for (int index = 0; index < num; ++index)
            {
                int Type = Main.rand.Next(14);
                if (Type == 0)
                    Type = 313;
                if (Type == 1)
                    Type = 314;
                if (Type == 2)
                    Type = 315;
                if (Type == 3)
                    Type = 317;
                if (Type == 4)
                    Type = 316;
                if (Type == 5)
                    Type = 318;
                if (Type == 6)
                    Type = 2358;
                if (Type == 7)
                    Type = 307;
                if (Type == 8)
                    Type = 308;
                if (Type == 9)
                    Type = 309;
                if (Type == 10)
                    Type = 311;
                if (Type == 11)
                    Type = 310;
                if (Type == 12)
                    Type = 312;
                if (Type == 13)
                    Type = 2357;
                int Stack = Main.rand.Next(2, 5);
                if (Main.rand.Next(3) == 0)
                    Stack += Main.rand.Next(1, 5);
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Type, Stack, false, 0, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
        }

        public void openGoodieBag()
        {
            if (Main.rand.Next(150) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1810, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(150) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1800, 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(4) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1809, Main.rand.Next(10, 41), false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else if (Main.rand.Next(10) == 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, Main.rand.Next(1846, 1851), 1, false, 0, false);
                if (Main.netMode != 1)
                    return;
                NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else
            {
                switch (Main.rand.Next(19))
                {
                    case 0:
                        int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1749, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number1, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number2 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1750, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number2, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number3 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1751, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number3, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 1:
                        int number4 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1746, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number4, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number5 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1747, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number5, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number6 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1748, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number6, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 2:
                        int number7 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1752, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number7, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number8 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1753, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number8, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 3:
                        int number9 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1767, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number9, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number10 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1768, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number10, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number11 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1769, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number11, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 4:
                        int number12 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1770, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number12, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number13 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1771, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number13, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 5:
                        int number14 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1772, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number14, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number15 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1773, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number15, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 6:
                        int number16 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1754, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number16, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number17 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1755, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number17, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number18 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1756, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number18, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 7:
                        int number19 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1757, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number19, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number20 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1758, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number20, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number21 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1759, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number21, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 8:
                        int number22 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1760, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number22, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number23 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1761, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number23, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number24 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1762, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number24, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 9:
                        int number25 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1763, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number25, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number26 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1764, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number26, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number27 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1765, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number27, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 10:
                        int number28 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1766, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number28, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number29 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1775, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number29, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number30 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1776, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number30, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 11:
                        int number31 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1777, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number31, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number32 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1778, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number32, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 12:
                        int number33 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1779, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number33, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number34 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1780, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number34, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number35 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1781, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number35, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 13:
                        int number36 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1819, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number36, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number37 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1820, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number37, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 14:
                        int number38 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1821, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number38, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number39 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1822, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number39, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number40 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1823, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number40, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 15:
                        int number41 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1824, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number41, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 16:
                        int number42 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1838, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number42, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number43 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1839, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number43, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number44 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1840, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number44, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 17:
                        int number45 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1841, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number45, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number46 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1842, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number46, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number47 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1843, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number47, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                    case 18:
                        int number48 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1851, 1, false, 0, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number48, 1f, 0.0f, 0.0f, 0, 0, 0);
                        int number49 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, 1852, 1, false, 0, false);
                        if (Main.netMode != 1)
                            break;
                        NetMessage.SendData(21, -1, -1, "", number49, 1f, 0.0f, 0.0f, 0, 0, 0);
                        break;
                }
            }
        }

        public void UpdateDyes(int plr)
        {
            this.cHead = 0;
            this.cBody = 0;
            this.cLegs = 0;
            this.cHandOn = 0;
            this.cHandOff = 0;
            this.cBack = 0;
            this.cFront = 0;
            this.cShoe = 0;
            this.cWaist = 0;
            this.cShield = 0;
            this.cNeck = 0;
            this.cFace = 0;
            this.cBalloon = 0;
            this.cWings = 0;
            this.cCarpet = 0;
            this.cGrapple = this.cMount = this.cMinecart = this.cPet = this.cLight = this.cYorai = 0;
            if (this.dye[0] != null)
                this.cHead = (int)this.dye[0].dye;
            if (this.dye[1] != null)
                this.cBody = (int)this.dye[1].dye;
            if (this.dye[2] != null)
                this.cLegs = (int)this.dye[2].dye;
            if (this.wearsRobe)
                this.cLegs = this.cBody;
            if (this.miscDyes[0] != null)
                this.cPet = (int)this.miscDyes[0].dye;
            if (this.miscDyes[1] != null)
                this.cLight = (int)this.miscDyes[1].dye;
            if (this.miscDyes[2] != null)
                this.cMinecart = (int)this.miscDyes[2].dye;
            if (this.miscDyes[3] != null)
                this.cMount = (int)this.miscDyes[3].dye;
            if (this.miscDyes[4] != null)
                this.cGrapple = (int)this.miscDyes[4].dye;
            for (int index1 = 0; index1 < 20; ++index1)
            {
                int index2 = index1 % 10;
                if (this.dye[index2] != null && this.armor[index1].itemId > 0 && this.armor[index1].stack > 0 && (index1 / 10 >= 1 || !this.hideVisual[index2] || ((int)this.armor[index1].wingSlot > 0 || this.armor[index1].itemId == 934)))
                {
                    if ((int)this.armor[index1].handOnSlot > 0 && (int)this.armor[index1].handOnSlot < 19)
                        this.cHandOn = (int)this.dye[index2].dye;
                    if ((int)this.armor[index1].handOffSlot > 0 && (int)this.armor[index1].handOffSlot < 12)
                        this.cHandOff = (int)this.dye[index2].dye;
                    if ((int)this.armor[index1].backSlot > 0 && (int)this.armor[index1].backSlot < 10)
                        this.cBack = (int)this.dye[index2].dye;
                    if ((int)this.armor[index1].frontSlot > 0 && (int)this.armor[index1].frontSlot < 5)
                        this.cFront = (int)this.dye[index2].dye;
                    if ((int)this.armor[index1].shoeSlot > 0 && (int)this.armor[index1].shoeSlot < 18)
                        this.cShoe = (int)this.dye[index2].dye;
                    if ((int)this.armor[index1].waistSlot > 0 && (int)this.armor[index1].waistSlot < 12)
                        this.cWaist = (int)this.dye[index2].dye;
                    if ((int)this.armor[index1].shieldSlot > 0 && (int)this.armor[index1].shieldSlot < 6)
                        this.cShield = (int)this.dye[index2].dye;
                    if ((int)this.armor[index1].neckSlot > 0 && (int)this.armor[index1].neckSlot < 9)
                        this.cNeck = (int)this.dye[index2].dye;
                    if ((int)this.armor[index1].faceSlot > 0 && (int)this.armor[index1].faceSlot < 9)
                        this.cFace = (int)this.dye[index2].dye;
                    if ((int)this.armor[index1].balloonSlot > 0 && (int)this.armor[index1].balloonSlot < 16)
                        this.cBalloon = (int)this.dye[index2].dye;
                    if ((int)this.armor[index1].wingSlot > 0 && (int)this.armor[index1].wingSlot < 37)
                        this.cWings = (int)this.dye[index2].dye;
                    if (this.armor[index1].itemId == 934)
                        this.cCarpet = (int)this.dye[index2].dye;
                }
            }
            this.cYorai = this.cPet;
        }

        public int ArmorSetDye()
        {
            switch (Main.rand.Next(3))
            {
                case 0:
                    return this.cHead;
                case 1:
                    return this.cBody;
                case 2:
                    return this.cLegs;
                default:
                    return this.cBody;
            }
        }

        public void UpdateBuffs(int i)
        {
            if (this.soulDrain > 0 && this.whoAmI == Main.myPlayer)
                this.AddBuff(151, 2, true);
            for (int index = 0; index < 1000; ++index)
            {
                if (Main.projectile[index].active && Main.projectile[index].owner == i)
                    ++this.ownedProjectileCounts[Main.projectile[index].type];
            }
            for (int b1 = 0; b1 < 22; ++b1)
            {
                if (this.buffType[b1] > 0 && this.buffTime[b1] > 0)
                {
                    if (this.whoAmI == Main.myPlayer && this.buffType[b1] != 28)
                        --this.buffTime[b1];
                    if (this.buffType[b1] == 1)
                    {
                        this.lavaImmune = true;
                        this.fireWalk = true;
                        this.buffImmune[24] = true;
                    }
                    else if (this.buffType[b1] == 158)
                        this.manaRegen += 2;
                    else if (this.buffType[b1] == 159 && this.inventory[this.selectedItem].melee)
                        this.armorPenetration = 4;
                    else if (this.buffType[b1] == 2)
                        this.lifeRegen += 4;
                    else if (this.buffType[b1] == 3)
                        this.moveSpeed += 0.25f;
                    else if (this.buffType[b1] == 4)
                        this.gills = true;
                    else if (this.buffType[b1] == 5)
                        this.statDefense += 8;
                    else if (this.buffType[b1] == 6)
                        this.manaRegenBuff = true;
                    else if (this.buffType[b1] == 7)
                        this.magicDamage += 0.2f;
                    else if (this.buffType[b1] == 8)
                        this.slowFall = true;
                    else if (this.buffType[b1] == 9)
                        this.findTreasure = true;
                    else if (this.buffType[b1] == 10)
                        this.invis = true;
                    else if (this.buffType[b1] == 11)
                        Lighting.AddLight((int)((double)this.position.X + (double)(this.width / 2)) / 16, (int)((double)this.position.Y + (double)(this.height / 2)) / 16, 0.8f, 0.95f, 1f);
                    else if (this.buffType[b1] == 12)
                        this.nightVision = true;
                    else if (this.buffType[b1] == 13)
                        this.enemySpawns = true;
                    else if (this.buffType[b1] == 14)
                    {
                        if ((double)this.thorns < 1.0)
                            this.thorns = 0.3333333f;
                    }
                    else if (this.buffType[b1] == 15)
                        this.waterWalk = true;
                    else if (this.buffType[b1] == 16)
                        this.archery = true;
                    else if (this.buffType[b1] == 17)
                        this.detectCreature = true;
                    else if (this.buffType[b1] == 18)
                        this.gravControl = true;
                    else if (this.buffType[b1] == 30)
                        this.bleed = true;
                    else if (this.buffType[b1] == 31)
                        this.confused = true;
                    else if (this.buffType[b1] == 32)
                        this.slow = true;
                    else if (this.buffType[b1] == 35)
                        this.silence = true;
                    else if (this.buffType[b1] == 160)
                        this.dazed = true;
                    else if (this.buffType[b1] == 46)
                        this.chilled = true;
                    else if (this.buffType[b1] == 47)
                        this.frozen = true;
                    else if (this.buffType[b1] == 156)
                        this.stoned = true;
                    else if (this.buffType[b1] == 69)
                    {
                        this.ichor = true;
                        this.statDefense -= 20;
                    }
                    else if (this.buffType[b1] == 36)
                        this.brokenArmor = true;
                    else if (this.buffType[b1] == 48)
                        this.honey = true;
                    else if (this.buffType[b1] == 59)
                        this.shadowDodge = true;
                    else if (this.buffType[b1] == 93)
                        this.ammoBox = true;
                    else if (this.buffType[b1] == 58)
                        this.palladiumRegen = true;
                    else if (this.buffType[b1] == 88)
                        this.chaosState = true;
                    else if (this.buffType[b1] == 63)
                        ++this.moveSpeed;
                    else if (this.buffType[b1] == 104)
                        this.pickSpeed -= 0.25f;
                    else if (this.buffType[b1] == 105)
                        this.lifeMagnet = true;
                    else if (this.buffType[b1] == 106)
                        this.calmed = true;
                    else if (this.buffType[b1] == 121)
                        this.fishingSkill += 15;
                    else if (this.buffType[b1] == 122)
                        this.sonarPotion = true;
                    else if (this.buffType[b1] == 123)
                        this.cratePotion = true;
                    else if (this.buffType[b1] == 107)
                    {
                        this.tileSpeed += 0.25f;
                        this.wallSpeed += 0.25f;
                        ++this.blockRange;
                    }
                    else if (this.buffType[b1] == 108)
                        this.kbBuff = true;
                    else if (this.buffType[b1] == 109)
                    {
                        this.ignoreWater = true;
                        this.accFlipper = true;
                    }
                    else if (this.buffType[b1] == 110)
                        ++this.maxMinions;
                    else if (this.buffType[b1] == 150)
                        ++this.maxMinions;
                    else if (this.buffType[b1] == 111)
                        this.dangerSense = true;
                    else if (this.buffType[b1] == 112)
                        this.ammoPotion = true;
                    else if (this.buffType[b1] == 113)
                    {
                        this.lifeForce = true;
                        this.statLifeMax2 += this.statLifeMax / 5 / 20 * 20;
                    }
                    else if (this.buffType[b1] == 114)
                        this.endurance += 0.1f;
                    else if (this.buffType[b1] == 115)
                    {
                        this.meleeCrit += 10;
                        this.rangedCrit += 10;
                        this.magicCrit += 10;
                        this.thrownCrit += 10;
                    }
                    else if (this.buffType[b1] == 116)
                    {
                        this.inferno = true;
                        Lighting.AddLight((int)((double)this.Center.X / 16.0), (int)((double)this.Center.Y / 16.0), 0.65f, 0.4f, 0.1f);
                        int type = 24;
                        float num = 200f;
                        bool flag = this.infernoCounter % 60 == 0;
                        int Damage = 10;
                        if (this.whoAmI == Main.myPlayer)
                        {
                            for (int number = 0; number < 200; ++number)
                            {
                                NPC npc = Main.npc[number];
                                if (npc.active && !npc.friendly && (npc.damage > 0 && !npc.dontTakeDamage) && (!npc.buffImmune[type] && (double)Vector2.Distance(this.Center, npc.Center) <= (double)num))
                                {
                                    if (npc.HasBuff(type) == -1)
                                        npc.AddBuff(type, 120, false);
                                    if (flag)
                                    {
                                        npc.StrikeNPC(Damage, 0.0f, 0, false, false, false);
                                        if (Main.netMode != 0)
                                            NetMessage.SendData(28, -1, -1, "", number, (float)Damage, 0.0f, 0.0f, 0, 0, 0);
                                    }
                                }
                            }
                            if (this.hostile)
                            {
                                for (int number = 0; number < (int)byte.MaxValue; ++number)
                                {
                                    Player player = Main.player[number];
                                    if (player != this && player.active && (!player.dead && player.hostile) && (!player.buffImmune[type] && (player.team != this.team || player.team == 0)) && (double)Vector2.Distance(this.Center, player.Center) <= (double)num)
                                    {
                                        if (player.HasBuff(type) == -1)
                                            player.AddBuff(type, 120, true);
                                        if (flag)
                                        {
                                            player.Hurt(Damage, 0, true, false, "", false);
                                            if (Main.netMode != 0)
                                                NetMessage.SendData(26, -1, -1, Lang.deathMsg(this.whoAmI, -1, -1, -1), number, 0.0f, (float)Damage, 1f, 0, 0, 0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (this.buffType[b1] == 117)
                    {
                        this.thrownDamage += 0.1f;
                        this.meleeDamage += 0.1f;
                        this.rangedDamage += 0.1f;
                        this.magicDamage += 0.1f;
                        this.minionDamage += 0.1f;
                    }
                    else if (this.buffType[b1] == 119)
                        this.loveStruck = true;
                    else if (this.buffType[b1] == 120)
                        this.stinky = true;
                    else if (this.buffType[b1] == 124)
                        this.resistCold = true;
                    else if (this.buffType[b1] == 165)
                    {
                        this.lifeRegen += 6;
                        this.statDefense += 8;
                        this.dryadWard = true;
                        if ((double)this.thorns < 1.0)
                            this.thorns += 0.2f;
                    }
                    else if (this.buffType[b1] == 144)
                    {
                        this.electrified = true;
                        Lighting.AddLight((int)this.Center.X / 16, (int)this.Center.Y / 16, 0.3f, 0.8f, 1.1f);
                    }
                    else if (this.buffType[b1] == 94)
                    {
                        this.manaSick = true;
                        this.manaSickReduction = Player.manaSickLessDmg * ((float)this.buffTime[b1] / (float)Player.manaSickTime);
                    }
                    else if (this.buffType[b1] >= 95 && this.buffType[b1] <= 97)
                    {
                        this.buffTime[b1] = 5;
                        int num = (int)(byte)(1 + this.buffType[b1] - 95);
                        if (this.beetleOrbs > 0 && this.beetleOrbs != num)
                        {
                            if (this.beetleOrbs > num)
                            {
                                this.DelBuff(b1);
                                --b1;
                            }
                            else
                            {
                                for (int b2 = 0; b2 < 22; ++b2)
                                {
                                    if (this.buffType[b2] >= 95 && this.buffType[b2] <= 95 + num - 1)
                                    {
                                        this.DelBuff(b2);
                                        --b2;
                                    }
                                }
                            }
                        }
                        this.beetleOrbs = num;
                        if (!this.beetleDefense)
                        {
                            this.beetleOrbs = 0;
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.beetleBuff = true;
                    }
                    else if (this.buffType[b1] >= 170 && this.buffType[b1] <= 172)
                    {
                        this.buffTime[b1] = 5;
                        int num = (int)(byte)(1 + this.buffType[b1] - 170);
                        if (this.solarShields > 0 && this.solarShields != num)
                        {
                            if (this.solarShields > num)
                            {
                                this.DelBuff(b1);
                                --b1;
                            }
                            else
                            {
                                for (int b2 = 0; b2 < 22; ++b2)
                                {
                                    if (this.buffType[b2] >= 170 && this.buffType[b2] <= 170 + num - 1)
                                    {
                                        this.DelBuff(b2);
                                        --b2;
                                    }
                                }
                            }
                        }
                        this.solarShields = num;
                        if (!this.setSolar)
                        {
                            this.solarShields = 0;
                            this.DelBuff(b1);
                            --b1;
                        }
                    }
                    else if (this.buffType[b1] >= 98 && this.buffType[b1] <= 100)
                    {
                        int num = (int)(byte)(1 + this.buffType[b1] - 98);
                        if (this.beetleOrbs > 0 && this.beetleOrbs != num)
                        {
                            if (this.beetleOrbs > num)
                            {
                                this.DelBuff(b1);
                                --b1;
                            }
                            else
                            {
                                for (int b2 = 0; b2 < 22; ++b2)
                                {
                                    if (this.buffType[b2] >= 98 && this.buffType[b2] <= 98 + num - 1)
                                    {
                                        this.DelBuff(b2);
                                        --b2;
                                    }
                                }
                            }
                        }
                        this.beetleOrbs = num;
                        this.meleeDamage += 0.1f * (float)this.beetleOrbs;
                        this.meleeSpeed += 0.1f * (float)this.beetleOrbs;
                        if (!this.beetleOffense)
                        {
                            this.beetleOrbs = 0;
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.beetleBuff = true;
                    }
                    else if (this.buffType[b1] >= 176 && this.buffType[b1] <= 178)
                    {
                        int num1 = this.nebulaLevelMana;
                        int num2 = (int)(byte)(1 + this.buffType[b1] - 176);
                        if (num1 > 0 && num1 != num2)
                        {
                            if (num1 > num2)
                            {
                                this.DelBuff(b1);
                                --b1;
                            }
                            else
                            {
                                for (int b2 = 0; b2 < 22; ++b2)
                                {
                                    if (this.buffType[b2] >= 176 && this.buffType[b2] <= 178 + num2 - 1)
                                    {
                                        this.DelBuff(b2);
                                        --b2;
                                    }
                                }
                            }
                        }
                        this.nebulaLevelMana = num2;
                        if (this.buffTime[b1] == 2 && this.nebulaLevelMana > 1)
                        {
                            --this.nebulaLevelMana;
                            --this.buffType[b1];
                            this.buffTime[b1] = 480;
                        }
                    }
                    else if (this.buffType[b1] >= 173 && this.buffType[b1] <= 175)
                    {
                        int num1 = this.nebulaLevelLife;
                        int num2 = (int)(byte)(1 + this.buffType[b1] - 173);
                        if (num1 > 0 && num1 != num2)
                        {
                            if (num1 > num2)
                            {
                                this.DelBuff(b1);
                                --b1;
                            }
                            else
                            {
                                for (int b2 = 0; b2 < 22; ++b2)
                                {
                                    if (this.buffType[b2] >= 173 && this.buffType[b2] <= 175 + num2 - 1)
                                    {
                                        this.DelBuff(b2);
                                        --b2;
                                    }
                                }
                            }
                        }
                        this.nebulaLevelLife = num2;
                        if (this.buffTime[b1] == 2 && this.nebulaLevelLife > 1)
                        {
                            --this.nebulaLevelLife;
                            --this.buffType[b1];
                            this.buffTime[b1] = 480;
                        }
                        this.lifeRegen += 10 * this.nebulaLevelLife;
                    }
                    else if (this.buffType[b1] >= 179 && this.buffType[b1] <= 181)
                    {
                        int num1 = this.nebulaLevelDamage;
                        int num2 = (int)(byte)(1 + this.buffType[b1] - 179);
                        if (num1 > 0 && num1 != num2)
                        {
                            if (num1 > num2)
                            {
                                this.DelBuff(b1);
                                --b1;
                            }
                            else
                            {
                                for (int b2 = 0; b2 < 22; ++b2)
                                {
                                    if (this.buffType[b2] >= 179 && this.buffType[b2] <= 181 + num2 - 1)
                                    {
                                        this.DelBuff(b2);
                                        --b2;
                                    }
                                }
                            }
                        }
                        this.nebulaLevelDamage = num2;
                        if (this.buffTime[b1] == 2 && this.nebulaLevelDamage > 1)
                        {
                            --this.nebulaLevelDamage;
                            --this.buffType[b1];
                            this.buffTime[b1] = 480;
                        }
                        float num3 = 0.15f * (float)this.nebulaLevelDamage;
                        this.meleeDamage += num3;
                        this.rangedDamage += num3;
                        this.magicDamage += num3;
                        this.minionDamage += num3;
                        this.thrownDamage += num3;
                    }
                    else if (this.buffType[b1] == 62)
                    {
                        if ((double)this.statLife <= (double)this.statLifeMax2 * 0.5)
                        {
                            Lighting.AddLight((int)((double)this.Center.X / 16.0), (int)((double)this.Center.Y / 16.0), 0.1f, 0.2f, 0.45f);
                            this.iceBarrier = true;
                            this.endurance += 0.25f;
                            ++this.iceBarrierFrameCounter;
                            if ((int)this.iceBarrierFrameCounter > 2)
                            {
                                this.iceBarrierFrameCounter = (byte)0;
                                ++this.iceBarrierFrame;
                                if ((int)this.iceBarrierFrame >= 12)
                                    this.iceBarrierFrame = (byte)0;
                            }
                        }
                        else
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                    }
                    else if (this.buffType[b1] == 49)
                    {
                        for (int index = 191; index <= 194; ++index)
                        {
                            if (this.ownedProjectileCounts[index] > 0)
                                this.pygmy = true;
                        }
                        if (!this.pygmy)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 83)
                    {
                        if (this.ownedProjectileCounts[317] > 0)
                            this.raven = true;
                        if (!this.raven)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 64)
                    {
                        if (this.ownedProjectileCounts[266] > 0)
                            this.slime = true;
                        if (!this.slime)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 125)
                    {
                        if (this.ownedProjectileCounts[373] > 0)
                            this.hornetMinion = true;
                        if (!this.hornetMinion)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 126)
                    {
                        if (this.ownedProjectileCounts[375] > 0)
                            this.impMinion = true;
                        if (!this.impMinion)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 133)
                    {
                        if (this.ownedProjectileCounts[390] > 0 || this.ownedProjectileCounts[391] > 0 || this.ownedProjectileCounts[392] > 0)
                            this.spiderMinion = true;
                        if (!this.spiderMinion)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 134)
                    {
                        if (this.ownedProjectileCounts[387] > 0 || this.ownedProjectileCounts[388] > 0)
                            this.twinsMinion = true;
                        if (!this.twinsMinion)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 135)
                    {
                        if (this.ownedProjectileCounts[393] > 0 || this.ownedProjectileCounts[394] > 0 || this.ownedProjectileCounts[395] > 0)
                            this.pirateMinion = true;
                        if (!this.pirateMinion)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 139)
                    {
                        if (this.ownedProjectileCounts[407] > 0)
                            this.sharknadoMinion = true;
                        if (!this.sharknadoMinion)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 140)
                    {
                        if (this.ownedProjectileCounts[423] > 0)
                            this.UFOMinion = true;
                        if (!this.UFOMinion)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 182)
                    {
                        if (this.ownedProjectileCounts[613] > 0)
                            this.stardustMinion = true;
                        if (!this.stardustMinion)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 187)
                    {
                        if (this.ownedProjectileCounts[623] > 0)
                            this.stardustGuardian = true;
                        if (!this.stardustGuardian)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 188)
                    {
                        if (this.ownedProjectileCounts[625] > 0)
                            this.stardustDragon = true;
                        if (!this.stardustDragon)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 161)
                    {
                        if (this.ownedProjectileCounts[533] > 0)
                            this.DeadlySphereMinion = true;
                        if (!this.DeadlySphereMinion)
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                        else
                            this.buffTime[b1] = 18000;
                    }
                    else if (this.buffType[b1] == 90)
                    {
                        this.mount.SetMount(0, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 128)
                    {
                        this.mount.SetMount(1, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 129)
                    {
                        this.mount.SetMount(2, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 130)
                    {
                        this.mount.SetMount(3, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 118)
                    {
                        this.mount.SetMount(6, this, true);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 138)
                    {
                        this.mount.SetMount(6, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 167)
                    {
                        this.mount.SetMount(11, this, true);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 166)
                    {
                        this.mount.SetMount(11, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 184)
                    {
                        this.mount.SetMount(13, this, true);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 185)
                    {
                        this.mount.SetMount(13, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 131)
                    {
                        this.ignoreWater = true;
                        this.accFlipper = true;
                        this.mount.SetMount(4, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 132)
                    {
                        this.mount.SetMount(5, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 168)
                    {
                        this.ignoreWater = true;
                        this.accFlipper = true;
                        this.mount.SetMount(12, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 141)
                    {
                        this.mount.SetMount(7, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 142)
                    {
                        this.mount.SetMount(8, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 143)
                    {
                        this.mount.SetMount(9, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 162)
                    {
                        this.mount.SetMount(10, this, false);
                        this.buffTime[b1] = 10;
                    }
                    else if (this.buffType[b1] == 37)
                    {
                        if (Main.wof >= 0 && Main.npc[Main.wof].type == 113)
                        {
                            this.gross = true;
                            this.buffTime[b1] = 10;
                        }
                        else
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                    }
                    else if (this.buffType[b1] == 38)
                    {
                        this.buffTime[b1] = 10;
                        this.tongued = true;
                    }
                    else if (this.buffType[b1] == 146)
                    {
                        this.moveSpeed += 0.1f;
                        this.moveSpeed *= 1.1f;
                        this.sunflower = true;
                    }
                    else if (this.buffType[b1] == 19)
                    {
                        this.buffTime[b1] = 18000;
                        this.lightOrb = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[18] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 18, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 155)
                    {
                        this.buffTime[b1] = 18000;
                        this.crimsonHeart = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[500] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 500, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 190)
                    {
                        this.buffTime[b1] = 18000;
                        this.suspiciouslookingTentacle = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[650] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 650, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 27 || this.buffType[b1] == 101 || this.buffType[b1] == 102)
                    {
                        this.buffTime[b1] = 18000;
                        bool flag = true;
                        int Type = 72;
                        if (this.buffType[b1] == 27)
                            this.blueFairy = true;
                        if (this.buffType[b1] == 101)
                        {
                            Type = 86;
                            this.redFairy = true;
                        }
                        if (this.buffType[b1] == 102)
                        {
                            Type = 87;
                            this.greenFairy = true;
                        }
                        if (this.head == 45 && this.body == 26 && this.legs == 25)
                            Type = 72;
                        if (this.ownedProjectileCounts[Type] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, Type, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 40)
                    {
                        this.buffTime[b1] = 18000;
                        this.bunny = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[111] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 111, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 148)
                    {
                        this.rabid = true;
                        if (Main.rand.Next(1200) == 0)
                        {
                            int num1 = Main.rand.Next(6);
                            float num2 = (float)Main.rand.Next(60, 100) * 0.01f;
                            if (num1 == 0)
                                this.AddBuff(22, (int)(60.0 * (double)num2 * 3.0), true);
                            else if (num1 == 1)
                                this.AddBuff(23, (int)(60.0 * (double)num2 * 0.75), true);
                            else if (num1 == 2)
                                this.AddBuff(31, (int)(60.0 * (double)num2 * 1.5), true);
                            else if (num1 == 3)
                                this.AddBuff(32, (int)(60.0 * (double)num2 * 3.5), true);
                            else if (num1 == 4)
                                this.AddBuff(33, (int)(60.0 * (double)num2 * 5.0), true);
                            else if (num1 == 5)
                                this.AddBuff(35, (int)(60.0 * (double)num2 * 1.0), true);
                        }
                        this.meleeDamage += 0.2f;
                        this.magicDamage += 0.2f;
                        this.rangedDamage += 0.2f;
                        this.thrownDamage += 0.2f;
                        this.minionDamage += 0.2f;
                    }
                    else if (this.buffType[b1] == 41)
                    {
                        this.buffTime[b1] = 18000;
                        this.penguin = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[112] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 112, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 152)
                    {
                        this.buffTime[b1] = 18000;
                        this.magicLantern = true;
                        if (this.ownedProjectileCounts[492] == 0)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 492, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 91)
                    {
                        this.buffTime[b1] = 18000;
                        this.puppy = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[334] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 334, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 92)
                    {
                        this.buffTime[b1] = 18000;
                        this.grinch = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[353] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 353, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 84)
                    {
                        this.buffTime[b1] = 18000;
                        this.blackCat = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[319] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 319, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 61)
                    {
                        this.buffTime[b1] = 18000;
                        this.dino = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[236] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 236, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 154)
                    {
                        this.buffTime[b1] = 18000;
                        this.babyFaceMonster = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[499] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 499, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 65)
                    {
                        this.buffTime[b1] = 18000;
                        this.eyeSpring = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[268] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 268, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 66)
                    {
                        this.buffTime[b1] = 18000;
                        this.snowman = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[269] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 269, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 42)
                    {
                        this.buffTime[b1] = 18000;
                        this.turtle = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[(int)sbyte.MaxValue] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, (int)sbyte.MaxValue, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 45)
                    {
                        this.buffTime[b1] = 18000;
                        this.eater = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[175] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 175, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 50)
                    {
                        this.buffTime[b1] = 18000;
                        this.skeletron = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[197] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 197, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 51)
                    {
                        this.buffTime[b1] = 18000;
                        this.hornet = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[198] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 198, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 52)
                    {
                        this.buffTime[b1] = 18000;
                        this.tiki = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[199] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 199, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 53)
                    {
                        this.buffTime[b1] = 18000;
                        this.lizard = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[200] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 200, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 54)
                    {
                        this.buffTime[b1] = 18000;
                        this.parrot = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[208] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 208, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 55)
                    {
                        this.buffTime[b1] = 18000;
                        this.truffle = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[209] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 209, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 56)
                    {
                        this.buffTime[b1] = 18000;
                        this.sapling = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[210] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 210, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 85)
                    {
                        this.buffTime[b1] = 18000;
                        this.cSapling = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[324] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 324, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 81)
                    {
                        this.buffTime[b1] = 18000;
                        this.spider = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[313] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 313, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 82)
                    {
                        this.buffTime[b1] = 18000;
                        this.squashling = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[314] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 314, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 57)
                    {
                        this.buffTime[b1] = 18000;
                        this.wisp = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[211] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 211, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 60)
                    {
                        this.buffTime[b1] = 18000;
                        this.crystalLeaf = true;
                        bool flag = true;
                        for (int index = 0; index < 1000; ++index)
                        {
                            if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI && Main.projectile[index].type == 226)
                            {
                                if (!flag)
                                    Main.projectile[index].Kill();
                                flag = false;
                            }
                        }
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 226, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == (int)sbyte.MaxValue)
                    {
                        this.buffTime[b1] = 18000;
                        this.zephyrfish = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[380] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 380, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 136)
                    {
                        this.buffTime[b1] = 18000;
                        this.miniMinotaur = true;
                        bool flag = true;
                        if (this.ownedProjectileCounts[398] > 0)
                            flag = false;
                        if (flag)
                            Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0.0f, 0.0f, 398, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                    }
                    else if (this.buffType[b1] == 70)
                        this.venom = true;
                    else if (this.buffType[b1] == 20)
                        this.poisoned = true;
                    else if (this.buffType[b1] == 21)
                        this.potionDelay = this.buffTime[b1];
                    else if (this.buffType[b1] == 22)
                        this.blind = true;
                    else if (this.buffType[b1] == 80)
                        this.blackout = true;
                    else if (this.buffType[b1] == 23)
                        this.noItems = true;
                    else if (this.buffType[b1] == 24)
                        this.onFire = true;
                    else if (this.buffType[b1] == 103)
                        this.dripping = true;
                    else if (this.buffType[b1] == 137)
                        this.drippingSlime = true;
                    else if (this.buffType[b1] == 67)
                        this.burned = true;
                    else if (this.buffType[b1] == 68)
                        this.suffocating = true;
                    else if (this.buffType[b1] == 39)
                        this.onFire2 = true;
                    else if (this.buffType[b1] == 44)
                        this.onFrostBurn = true;
                    else if (this.buffType[b1] == 163)
                    {
                        this.headcovered = true;
                        this.bleed = true;
                    }
                    else if (this.buffType[b1] == 164)
                        this.vortexDebuff = true;
                    else if (this.buffType[b1] == 145)
                        this.moonLeech = true;
                    else if (this.buffType[b1] == 149)
                    {
                        this.webbed = true;
                        if ((double)this.velocity.Y != 0.0)
                            this.velocity = new Vector2(0.0f, 1E-06f);
                        else
                            this.velocity = Vector2.Zero;
                        Player.jumpHeight = 0;
                        this.gravity = 0.0f;
                        this.moveSpeed = 0.0f;
                        this.dash = 0;
                        this.noKnockback = true;
                        this.grappling[0] = -1;
                        this.grapCount = 0;
                        for (int index = 0; index < 1000; ++index)
                        {
                            if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI && Main.projectile[index].aiStyle == 7)
                                Main.projectile[index].Kill();
                        }
                    }
                    else if (this.buffType[b1] == 43)
                        this.paladinBuff = true;
                    else if (this.buffType[b1] == 29)
                    {
                        this.magicCrit += 2;
                        this.magicDamage += 0.05f;
                        this.statManaMax2 += 20;
                        this.manaCost -= 0.02f;
                    }
                    else if (this.buffType[b1] == 28)
                    {
                        if (!Main.dayTime && this.wolfAcc && !this.merman)
                        {
                            ++this.lifeRegen;
                            this.wereWolf = true;
                            this.meleeCrit += 2;
                            this.meleeDamage += 0.051f;
                            this.meleeSpeed += 0.051f;
                            this.statDefense += 3;
                            this.moveSpeed += 0.05f;
                        }
                        else
                        {
                            this.DelBuff(b1);
                            --b1;
                        }
                    }
                    else if (this.buffType[b1] == 33)
                    {
                        this.meleeDamage -= 0.051f;
                        this.meleeSpeed -= 0.051f;
                        this.statDefense -= 4;
                        this.moveSpeed -= 0.1f;
                    }
                    else if (this.buffType[b1] == 25)
                    {
                        this.statDefense -= 4;
                        this.meleeCrit += 2;
                        this.meleeDamage += 0.1f;
                        this.meleeSpeed += 0.1f;
                    }
                    else if (this.buffType[b1] == 26)
                    {
                        this.wellFed = true;
                        this.statDefense += 2;
                        this.meleeCrit += 2;
                        this.meleeDamage += 0.05f;
                        this.meleeSpeed += 0.05f;
                        this.magicCrit += 2;
                        this.magicDamage += 0.05f;
                        this.rangedCrit += 2;
                        this.rangedDamage += 0.05f;
                        this.thrownCrit += 2;
                        this.thrownDamage += 0.05f;
                        this.minionDamage += 0.05f;
                        this.minionKB += 0.5f;
                        this.moveSpeed += 0.2f;
                    }
                    else if (this.buffType[b1] == 71)
                        this.meleeEnchant = (byte)1;
                    else if (this.buffType[b1] == 73)
                        this.meleeEnchant = (byte)2;
                    else if (this.buffType[b1] == 74)
                        this.meleeEnchant = (byte)3;
                    else if (this.buffType[b1] == 75)
                        this.meleeEnchant = (byte)4;
                    else if (this.buffType[b1] == 76)
                        this.meleeEnchant = (byte)5;
                    else if (this.buffType[b1] == 77)
                        this.meleeEnchant = (byte)6;
                    else if (this.buffType[b1] == 78)
                        this.meleeEnchant = (byte)7;
                    else if (this.buffType[b1] == 79)
                        this.meleeEnchant = (byte)8;
                }
            }
        }

        public void Counterweight(Vector2 hitPos, int dmg, float kb)
        {
            if (!this.yoyoGlove && this.counterWeight <= 0)
                return;
            int index1 = -1;
            int num1 = 0;
            int num2 = 0;
            for (int index2 = 0; index2 < 1000; ++index2)
            {
                if (Main.projectile[index2].active && Main.projectile[index2].owner == this.whoAmI)
                {
                    if (Main.projectile[index2].counterweight)
                        ++num2;
                    else if (Main.projectile[index2].aiStyle == 99)
                    {
                        ++num1;
                        index1 = index2;
                    }
                }
            }
            if (this.yoyoGlove && num1 < 2)
            {
                if (index1 < 0)
                    return;
                Vector2 vector2_1 = hitPos - this.Center;
                vector2_1.Normalize();
                Vector2 vector2_2 = vector2_1 * 16f;
                Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, Main.projectile[index1].type, Main.projectile[index1].damage, Main.projectile[index1].knockBack, this.whoAmI, 1f, 0.0f);
            }
            else
            {
                if (num2 >= num1)
                    return;
                Vector2 vector2_1 = hitPos - this.Center;
                vector2_1.Normalize();
                Vector2 vector2_2 = vector2_1 * 16f;
                float KnockBack = (float)(((double)kb + 6.0) / 2.0);
                if (num2 > 0)
                    Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, this.counterWeight, (int)((double)dmg * 0.8), KnockBack, this.whoAmI, 1f, 0.0f);
                else
                    Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, this.counterWeight, (int)((double)dmg * 0.8), KnockBack, this.whoAmI, 0.0f, 0.0f);
            }
        }

        public int beeType()
        {
            if (this.strongBees && Main.rand.Next(2) == 0)
            {
                this.makeStrongBee = true;
                return 566;
            }
            this.makeStrongBee = false;
            return 181;
        }

        public int beeDamage(int dmg)
        {
            if (this.makeStrongBee)
                return dmg + Main.rand.Next(1, 4);
            return dmg + Main.rand.Next(2);
        }

        public float beeKB(float KB)
        {
            if (this.makeStrongBee)
                return (float)(0.5 + (double)KB * 1.10000002384186);
            return KB;
        }

        public void Yoraiz0rEye()
        {
            int index = 0 + this.bodyFrame.Y / 56;
            if (index >= Main.OffsetsPlayerHeadgear.Length)
                index = 0;
            Vector2 spinningpoint1 = new Vector2((float)(3 * this.direction - (this.direction == 1 ? 1 : 0)), -11.5f * this.gravDir) + Vector2.UnitY * this.gfxOffY + this.Size / 2f + Main.OffsetsPlayerHeadgear[index];
            Vector2 spinningpoint2 = new Vector2((float)(3 * this.shadowDirection[1] - (this.direction == 1 ? 1 : 0)), -11.5f * this.gravDir) + this.Size / 2f + Main.OffsetsPlayerHeadgear[index];
            Vector2 vector2_1 = Vector2.Zero;
            if (this.mount.Active && this.mount.Cart)
            {
                int num = Math.Sign(this.velocity.X);
                if (num == 0)
                    num = this.direction;
                vector2_1 = Utils.RotatedBy(new Vector2(MathHelper.Lerp(0.0f, -8f, this.fullRotation / 0.7853982f), MathHelper.Lerp(0.0f, 2f, Math.Abs(this.fullRotation / 0.7853982f))), (double)this.fullRotation, new Vector2());
                if (num == Math.Sign(this.fullRotation))
                    vector2_1 *= MathHelper.Lerp(1f, 0.6f, Math.Abs(this.fullRotation / 0.7853982f));
            }
            if ((double)this.fullRotation != 0.0)
            {
                spinningpoint1 = Utils.RotatedBy(spinningpoint1, (double)this.fullRotation, this.fullRotationOrigin);
                spinningpoint2 = Utils.RotatedBy(spinningpoint2, (double)this.fullRotation, this.fullRotationOrigin);
            }
            Vector2 vector2_2 = this.position + spinningpoint1 + vector2_1;
            Vector2 vector2_3 = this.oldPosition + spinningpoint2 + vector2_1;
            float num1 = 1f;
            switch (this.yoraiz0rEye % 10)
            {
                case 1:
                    return;
                case 2:
                    num1 = 0.5f;
                    break;
                case 3:
                    num1 = 0.625f;
                    break;
                case 4:
                    num1 = 0.75f;
                    break;
                case 5:
                    num1 = 0.875f;
                    break;
                case 6:
                    num1 = 1f;
                    break;
                case 7:
                    num1 = 1.1f;
                    break;
            }
            if (this.yoraiz0rEye < 7)
            {
                DelegateMethods.v3_1 = Main.hslToRgb(Main.rgbToHsl(this.eyeColor).X, 1f, 0.5f).ToVector3() * 0.5f * num1;
                if (this.velocity != Vector2.Zero)
                    Utils.PlotTileLine(this.Center, this.Center + this.velocity * 2f, 4f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
                else
                    Utils.PlotTileLine(this.Left, this.Right, 4f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
            }
            int num2 = (int)Vector2.Distance(vector2_2, vector2_3) / 3 + 1;
            if ((double)Vector2.Distance(vector2_2, vector2_3) % 3.0 != 0.0)
                ++num2;
            for (float num3 = 1f; (double)num3 <= (double)num2; ++num3)
            {
                Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 182, 0.0f, 0.0f, 0, new Color(), 1f)];
                dust.position = Vector2.Lerp(vector2_3, vector2_2, num3 / (float)num2);
                dust.noGravity = true;
                dust.velocity = Vector2.Zero;
                dust.customData = (object)this;
                dust.scale = num1;
                dust.shader = GameShaders.Armor.GetSecondaryShader(this.cYorai, this);
            }
        }

        public void UpdateEquips(int i)
        {
            for (int index = 0; index < 58; ++index)
            {
                int num = this.inventory[index].itemId;
                if ((num == 15 || num == 707) && this.accWatch < 1)
                    this.accWatch = 1;
                if ((num == 16 || num == 708) && this.accWatch < 2)
                    this.accWatch = 2;
                if ((num == 17 || num == 709) && this.accWatch < 3)
                    this.accWatch = 3;
                if (num == 393)
                    this.accCompass = 1;
                if (num == 18)
                    this.accDepthMeter = 1;
                if (num == 395 || num == 3123 || num == 3124)
                {
                    this.accWatch = 3;
                    this.accDepthMeter = 1;
                    this.accCompass = 1;
                }
                if (num == 3120 || num == 3036 || (num == 3123 || num == 3124))
                    this.accFishFinder = true;
                if (num == 3037 || num == 3036 || (num == 3123 || num == 3124))
                    this.accWeatherRadio = true;
                if (num == 3096 || num == 3036 || (num == 3123 || num == 3124))
                    this.accCalendar = true;
                if (num == 3084 || num == 3122 || (num == 3123 || num == 3124))
                    this.accThirdEye = true;
                if (num == 3095 || num == 3122 || (num == 3123 || num == 3124))
                    this.accJarOfSouls = true;
                if (num == 3118 || num == 3122 || (num == 3123 || num == 3124))
                    this.accCritterGuide = true;
                if (num == 3099 || num == 3121 || (num == 3123 || num == 3124))
                    this.accStopwatch = true;
                if (num == 3102 || num == 3121 || (num == 3123 || num == 3124))
                    this.accOreFinder = true;
                if (num == 3119 || num == 3121 || (num == 3123 || num == 3124))
                    this.accDreamCatcher = true;
            }
            for (int index1 = 0; index1 < 8 + this.extraAccessorySlots; ++index1)
            {
                if (!this.armor[index1].expertOnly || Main.expertMode)
                {
                    int num = this.armor[index1].itemId;
                    if ((num == 15 || num == 707) && this.accWatch < 1)
                        this.accWatch = 1;
                    if ((num == 16 || num == 708) && this.accWatch < 2)
                        this.accWatch = 2;
                    if ((num == 17 || num == 709) && this.accWatch < 3)
                        this.accWatch = 3;
                    if (num == 393)
                        this.accCompass = 1;
                    if (num == 18)
                        this.accDepthMeter = 1;
                    if (num == 395 || num == 3123 || num == 3124)
                    {
                        this.accWatch = 3;
                        this.accDepthMeter = 1;
                        this.accCompass = 1;
                    }
                    if (num == 3120 || num == 3036 || (num == 3123 || num == 3124))
                        this.accFishFinder = true;
                    if (num == 3037 || num == 3036 || (num == 3123 || num == 3124))
                        this.accWeatherRadio = true;
                    if (num == 3096 || num == 3036 || (num == 3123 || num == 3124))
                        this.accCalendar = true;
                    if (num == 3084 || num == 3122 || (num == 3123 || num == 3124))
                        this.accThirdEye = true;
                    if (num == 3095 || num == 3122 || (num == 3123 || num == 3124))
                        this.accJarOfSouls = true;
                    if (num == 3118 || num == 3122 || (num == 3123 || num == 3124))
                        this.accCritterGuide = true;
                    if (num == 3099 || num == 3121 || (num == 3123 || num == 3124))
                        this.accStopwatch = true;
                    if (num == 3102 || num == 3121 || (num == 3123 || num == 3124))
                        this.accOreFinder = true;
                    if (num == 3119 || num == 3121 || (num == 3123 || num == 3124))
                        this.accDreamCatcher = true;
                    if (this.armor[index1].itemId == 3017 && this.whoAmI == Main.myPlayer && ((double)this.velocity.Y == 0.0 && this.grappling[0] == -1))
                    {
                        int index2 = (int)this.Center.X / 16;
                        int tileY = (int)((double)this.position.Y + (double)this.height - 1.0) / 16;
                        if (Main.tile[index2, tileY] == null)
                            Main.tile[index2, tileY] = new Tile();
                        if (!Main.tile[index2, tileY].active() && (int)Main.tile[index2, tileY].liquid == 0 && (Main.tile[index2, tileY + 1] != null && WorldGen.SolidTile(index2, tileY + 1)))
                        {
                            Main.tile[index2, tileY].frameY = (short)0;
                            Main.tile[index2, tileY].slope((byte)0);
                            Main.tile[index2, tileY].halfBrick(false);
                            if ((int)Main.tile[index2, tileY + 1].type == 2)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    Main.tile[index2, tileY].active(true);
                                    Main.tile[index2, tileY].type = (ushort)3;
                                    Main.tile[index2, tileY].frameX = (short)(18 * Main.rand.Next(6, 11));
                                    while ((int)Main.tile[index2, tileY].frameX == 144)
                                        Main.tile[index2, tileY].frameX = (short)(18 * Main.rand.Next(6, 11));
                                }
                                else
                                {
                                    Main.tile[index2, tileY].active(true);
                                    Main.tile[index2, tileY].type = (ushort)73;
                                    Main.tile[index2, tileY].frameX = (short)(18 * Main.rand.Next(6, 21));
                                    while ((int)Main.tile[index2, tileY].frameX == 144)
                                        Main.tile[index2, tileY].frameX = (short)(18 * Main.rand.Next(6, 21));
                                }
                                if (Main.netMode == 1)
                                    NetMessage.SendTileSquare(-1, index2, tileY, 1);
                            }
                            else if ((int)Main.tile[index2, tileY + 1].type == 109)
                            {
                                if (Main.rand.Next(2) == 0)
                                {
                                    Main.tile[index2, tileY].active(true);
                                    Main.tile[index2, tileY].type = (ushort)110;
                                    Main.tile[index2, tileY].frameX = (short)(18 * Main.rand.Next(4, 7));
                                    while ((int)Main.tile[index2, tileY].frameX == 90)
                                        Main.tile[index2, tileY].frameX = (short)(18 * Main.rand.Next(4, 7));
                                }
                                else
                                {
                                    Main.tile[index2, tileY].active(true);
                                    Main.tile[index2, tileY].type = (ushort)113;
                                    Main.tile[index2, tileY].frameX = (short)(18 * Main.rand.Next(2, 8));
                                    while ((int)Main.tile[index2, tileY].frameX == 90)
                                        Main.tile[index2, tileY].frameX = (short)(18 * Main.rand.Next(2, 8));
                                }
                                if (Main.netMode == 1)
                                    NetMessage.SendTileSquare(-1, index2, tileY, 1);
                            }
                            else if ((int)Main.tile[index2, tileY + 1].type == 60)
                            {
                                Main.tile[index2, tileY].active(true);
                                Main.tile[index2, tileY].type = (ushort)74;
                                Main.tile[index2, tileY].frameX = (short)(18 * Main.rand.Next(9, 17));
                                if (Main.netMode == 1)
                                    NetMessage.SendTileSquare(-1, index2, tileY, 1);
                            }
                        }
                    }
                    this.statDefense += this.armor[index1].defense;
                    this.lifeRegen += this.armor[index1].lifeRegen;
                    if (this.armor[index1].itemId == 268)
                        this.accDivingHelm = true;
                    if (this.armor[index1].itemId == 238)
                        this.magicDamage += 0.15f;
                    if (this.armor[index1].itemId == 3212)
                        this.armorPenetration += 5;
                    if (this.armor[index1].itemId == 2277)
                    {
                        this.magicDamage += 0.05f;
                        this.meleeDamage += 0.05f;
                        this.rangedDamage += 0.05f;
                        this.thrownDamage += 0.05f;
                        this.magicCrit += 5;
                        this.rangedCrit += 5;
                        this.meleeCrit += 5;
                        this.thrownCrit += 5;
                        this.meleeSpeed += 0.1f;
                        this.moveSpeed += 0.1f;
                    }
                    if (this.armor[index1].itemId == 2279)
                    {
                        this.magicDamage += 0.06f;
                        this.magicCrit += 6;
                        this.manaCost -= 0.1f;
                    }
                    if (this.armor[index1].itemId == 3109)
                        this.nightVision = true;
                    if (this.armor[index1].itemId == 256)
                        this.thrownVelocity += 0.15f;
                    if (this.armor[index1].itemId == 257)
                        this.thrownDamage += 0.15f;
                    if (this.armor[index1].itemId == 258)
                        this.thrownCrit += 10;
                    if (this.armor[index1].itemId == 3374)
                        this.thrownVelocity += 0.2f;
                    if (this.armor[index1].itemId == 3375)
                        this.thrownDamage += 0.2f;
                    if (this.armor[index1].itemId == 3376)
                        this.thrownCrit += 15;
                    if (this.armor[index1].itemId == 2275)
                    {
                        this.magicDamage += 0.07f;
                        this.magicCrit += 7;
                    }
                    if (this.armor[index1].itemId == 123 || this.armor[index1].itemId == 124 || this.armor[index1].itemId == 125)
                        this.magicDamage += 0.07f;
                    if (this.armor[index1].itemId == 151 || this.armor[index1].itemId == 152 || (this.armor[index1].itemId == 153 || this.armor[index1].itemId == 959))
                        this.rangedDamage += 0.05f;
                    if (this.armor[index1].itemId == 111 || this.armor[index1].itemId == 228 || (this.armor[index1].itemId == 229 || this.armor[index1].itemId == 230) || (this.armor[index1].itemId == 960 || this.armor[index1].itemId == 961 || this.armor[index1].itemId == 962))
                        this.statManaMax2 += 20;
                    if (this.armor[index1].itemId == 228 || this.armor[index1].itemId == 960)
                        this.statManaMax2 += 20;
                    if (this.armor[index1].itemId == 228 || this.armor[index1].itemId == 229 || (this.armor[index1].itemId == 230 || this.armor[index1].itemId == 960) || (this.armor[index1].itemId == 961 || this.armor[index1].itemId == 962))
                        this.magicCrit += 4;
                    if (this.armor[index1].itemId == 100 || this.armor[index1].itemId == 101 || this.armor[index1].itemId == 102)
                        this.meleeSpeed += 0.07f;
                    if (this.armor[index1].itemId == 956 || this.armor[index1].itemId == 957 || this.armor[index1].itemId == 958)
                        this.meleeSpeed += 0.07f;
                    if (this.armor[index1].itemId == 792 || this.armor[index1].itemId == 793 || this.armor[index1].itemId == 794)
                    {
                        this.meleeDamage += 0.02f;
                        this.rangedDamage += 0.02f;
                        this.magicDamage += 0.02f;
                        this.thrownDamage += 0.02f;
                    }
                    if (this.armor[index1].itemId == 371)
                    {
                        this.magicCrit += 9;
                        this.statManaMax2 += 40;
                    }
                    if (this.armor[index1].itemId == 372)
                    {
                        this.moveSpeed += 0.07f;
                        this.meleeSpeed += 0.12f;
                    }
                    if (this.armor[index1].itemId == 373)
                    {
                        this.rangedDamage += 0.1f;
                        this.rangedCrit += 6;
                    }
                    if (this.armor[index1].itemId == 374)
                    {
                        this.magicCrit += 3;
                        this.meleeCrit += 3;
                        this.rangedCrit += 3;
                    }
                    if (this.armor[index1].itemId == 375)
                        this.moveSpeed += 0.1f;
                    if (this.armor[index1].itemId == 376)
                    {
                        this.magicDamage += 0.15f;
                        this.statManaMax2 += 60;
                    }
                    if (this.armor[index1].itemId == 377)
                    {
                        this.meleeCrit += 5;
                        this.meleeDamage += 0.1f;
                    }
                    if (this.armor[index1].itemId == 378)
                    {
                        this.rangedDamage += 0.12f;
                        this.rangedCrit += 7;
                    }
                    if (this.armor[index1].itemId == 379)
                    {
                        this.rangedDamage += 0.05f;
                        this.meleeDamage += 0.05f;
                        this.magicDamage += 0.05f;
                    }
                    if (this.armor[index1].itemId == 380)
                    {
                        this.magicCrit += 3;
                        this.meleeCrit += 3;
                        this.rangedCrit += 3;
                    }
                    if (this.armor[index1].itemId >= 2367 && this.armor[index1].itemId <= 2369)
                        this.fishingSkill += 5;
                    if (this.armor[index1].itemId == 400)
                    {
                        this.magicDamage += 0.11f;
                        this.magicCrit += 11;
                        this.statManaMax2 += 80;
                    }
                    if (this.armor[index1].itemId == 401)
                    {
                        this.meleeCrit += 7;
                        this.meleeDamage += 0.14f;
                    }
                    if (this.armor[index1].itemId == 402)
                    {
                        this.rangedDamage += 0.14f;
                        this.rangedCrit += 8;
                    }
                    if (this.armor[index1].itemId == 403)
                    {
                        this.rangedDamage += 0.06f;
                        this.meleeDamage += 0.06f;
                        this.magicDamage += 0.06f;
                    }
                    if (this.armor[index1].itemId == 404)
                    {
                        this.magicCrit += 4;
                        this.meleeCrit += 4;
                        this.rangedCrit += 4;
                        this.moveSpeed += 0.05f;
                    }
                    if (this.armor[index1].itemId == 1205)
                    {
                        this.meleeDamage += 0.08f;
                        this.meleeSpeed += 0.12f;
                    }
                    if (this.armor[index1].itemId == 1206)
                    {
                        this.rangedDamage += 0.09f;
                        this.rangedCrit += 9;
                    }
                    if (this.armor[index1].itemId == 1207)
                    {
                        this.magicDamage += 0.07f;
                        this.magicCrit += 7;
                        this.statManaMax2 += 60;
                    }
                    if (this.armor[index1].itemId == 1208)
                    {
                        this.meleeDamage += 0.03f;
                        this.rangedDamage += 0.03f;
                        this.magicDamage += 0.03f;
                        this.magicCrit += 2;
                        this.meleeCrit += 2;
                        this.rangedCrit += 2;
                    }
                    if (this.armor[index1].itemId == 1209)
                    {
                        this.meleeDamage += 0.02f;
                        this.rangedDamage += 0.02f;
                        this.magicDamage += 0.02f;
                        ++this.magicCrit;
                        ++this.meleeCrit;
                        ++this.rangedCrit;
                    }
                    if (this.armor[index1].itemId == 1210)
                    {
                        this.meleeDamage += 0.07f;
                        this.meleeSpeed += 0.07f;
                        this.moveSpeed += 0.07f;
                    }
                    if (this.armor[index1].itemId == 1211)
                    {
                        this.rangedCrit += 15;
                        this.moveSpeed += 0.08f;
                    }
                    if (this.armor[index1].itemId == 1212)
                    {
                        this.magicCrit += 18;
                        this.statManaMax2 += 80;
                    }
                    if (this.armor[index1].itemId == 1213)
                    {
                        this.magicCrit += 6;
                        this.meleeCrit += 6;
                        this.rangedCrit += 6;
                    }
                    if (this.armor[index1].itemId == 1214)
                        this.moveSpeed += 0.11f;
                    if (this.armor[index1].itemId == 1215)
                    {
                        this.meleeDamage += 0.08f;
                        this.meleeCrit += 8;
                        this.meleeSpeed += 0.08f;
                    }
                    if (this.armor[index1].itemId == 1216)
                    {
                        this.rangedDamage += 0.16f;
                        this.rangedCrit += 7;
                    }
                    if (this.armor[index1].itemId == 1217)
                    {
                        this.magicDamage += 0.16f;
                        this.magicCrit += 7;
                        this.statManaMax2 += 100;
                    }
                    if (this.armor[index1].itemId == 1218)
                    {
                        this.meleeDamage += 0.04f;
                        this.rangedDamage += 0.04f;
                        this.magicDamage += 0.04f;
                        this.magicCrit += 3;
                        this.meleeCrit += 3;
                        this.rangedCrit += 3;
                    }
                    if (this.armor[index1].itemId == 1219)
                    {
                        this.meleeDamage += 0.03f;
                        this.rangedDamage += 0.03f;
                        this.magicDamage += 0.03f;
                        this.magicCrit += 3;
                        this.meleeCrit += 3;
                        this.rangedCrit += 3;
                        this.moveSpeed += 0.06f;
                    }
                    if (this.armor[index1].itemId == 558)
                    {
                        this.magicDamage += 0.12f;
                        this.magicCrit += 12;
                        this.statManaMax2 += 100;
                    }
                    if (this.armor[index1].itemId == 559)
                    {
                        this.meleeCrit += 10;
                        this.meleeDamage += 0.1f;
                        this.meleeSpeed += 0.1f;
                    }
                    if (this.armor[index1].itemId == 553)
                    {
                        this.rangedDamage += 0.15f;
                        this.rangedCrit += 8;
                    }
                    if (this.armor[index1].itemId == 551)
                    {
                        this.magicCrit += 7;
                        this.meleeCrit += 7;
                        this.rangedCrit += 7;
                    }
                    if (this.armor[index1].itemId == 552)
                    {
                        this.rangedDamage += 0.07f;
                        this.meleeDamage += 0.07f;
                        this.magicDamage += 0.07f;
                        this.moveSpeed += 0.08f;
                    }
                    if (this.armor[index1].itemId == 1001)
                    {
                        this.meleeDamage += 0.16f;
                        this.meleeCrit += 6;
                    }
                    if (this.armor[index1].itemId == 1002)
                    {
                        this.rangedDamage += 0.16f;
                        this.ammoCost80 = true;
                    }
                    if (this.armor[index1].itemId == 1003)
                    {
                        this.statManaMax2 += 80;
                        this.manaCost -= 0.17f;
                        this.magicDamage += 0.16f;
                    }
                    if (this.armor[index1].itemId == 1004)
                    {
                        this.meleeDamage += 0.05f;
                        this.magicDamage += 0.05f;
                        this.rangedDamage += 0.05f;
                        this.magicCrit += 7;
                        this.meleeCrit += 7;
                        this.rangedCrit += 7;
                    }
                    if (this.armor[index1].itemId == 1005)
                    {
                        this.magicCrit += 8;
                        this.meleeCrit += 8;
                        this.rangedCrit += 8;
                        this.moveSpeed += 0.05f;
                    }
                    if (this.armor[index1].itemId == 2189)
                    {
                        this.statManaMax2 += 60;
                        this.manaCost -= 0.13f;
                        this.magicDamage += 0.05f;
                        this.magicCrit += 5;
                    }
                    if (this.armor[index1].itemId == 1503)
                        this.magicDamage -= 0.4f;
                    if (this.armor[index1].itemId == 1504)
                    {
                        this.magicDamage += 0.07f;
                        this.magicCrit += 7;
                    }
                    if (this.armor[index1].itemId == 1505)
                    {
                        this.magicDamage += 0.08f;
                        this.moveSpeed += 0.08f;
                    }
                    if (this.armor[index1].itemId == 1546)
                    {
                        this.rangedCrit += 5;
                        this.arrowDamage += 0.15f;
                    }
                    if (this.armor[index1].itemId == 1547)
                    {
                        this.rangedCrit += 5;
                        this.bulletDamage += 0.15f;
                    }
                    if (this.armor[index1].itemId == 1548)
                    {
                        this.rangedCrit += 5;
                        this.rocketDamage += 0.15f;
                    }
                    if (this.armor[index1].itemId == 1549)
                    {
                        this.rangedCrit += 13;
                        this.rangedDamage += 0.13f;
                        this.ammoCost80 = true;
                    }
                    if (this.armor[index1].itemId == 1550)
                    {
                        this.rangedCrit += 7;
                        this.moveSpeed += 0.12f;
                    }
                    if (this.armor[index1].itemId == 1282)
                    {
                        this.statManaMax2 += 20;
                        this.manaCost -= 0.05f;
                    }
                    if (this.armor[index1].itemId == 1283)
                    {
                        this.statManaMax2 += 40;
                        this.manaCost -= 0.07f;
                    }
                    if (this.armor[index1].itemId == 1284)
                    {
                        this.statManaMax2 += 40;
                        this.manaCost -= 0.09f;
                    }
                    if (this.armor[index1].itemId == 1285)
                    {
                        this.statManaMax2 += 60;
                        this.manaCost -= 0.11f;
                    }
                    if (this.armor[index1].itemId == 1286)
                    {
                        this.statManaMax2 += 60;
                        this.manaCost -= 0.13f;
                    }
                    if (this.armor[index1].itemId == 1287)
                    {
                        this.statManaMax2 += 80;
                        this.manaCost -= 0.15f;
                    }
                    if (this.armor[index1].itemId == 1316 || this.armor[index1].itemId == 1317 || this.armor[index1].itemId == 1318)
                        this.aggro += 250;
                    if (this.armor[index1].itemId == 1316)
                        this.meleeDamage += 0.06f;
                    if (this.armor[index1].itemId == 1317)
                    {
                        this.meleeDamage += 0.08f;
                        this.meleeCrit += 8;
                    }
                    if (this.armor[index1].itemId == 1318)
                        this.meleeCrit += 4;
                    if (this.armor[index1].itemId == 2199 || this.armor[index1].itemId == 2202)
                        this.aggro += 250;
                    if (this.armor[index1].itemId == 2201)
                        this.aggro += 400;
                    if (this.armor[index1].itemId == 2199)
                        this.meleeDamage += 0.06f;
                    if (this.armor[index1].itemId == 2200)
                    {
                        this.meleeDamage += 0.08f;
                        this.meleeCrit += 8;
                        this.meleeSpeed += 0.06f;
                        this.moveSpeed += 0.06f;
                    }
                    if (this.armor[index1].itemId == 2201)
                    {
                        this.meleeDamage += 0.05f;
                        this.meleeCrit += 5;
                    }
                    if (this.armor[index1].itemId == 2202)
                    {
                        this.meleeSpeed += 0.06f;
                        this.moveSpeed += 0.06f;
                    }
                    if (this.armor[index1].itemId == 684)
                    {
                        this.rangedDamage += 0.16f;
                        this.meleeDamage += 0.16f;
                    }
                    if (this.armor[index1].itemId == 685)
                    {
                        this.meleeCrit += 11;
                        this.rangedCrit += 11;
                    }
                    if (this.armor[index1].itemId == 686)
                    {
                        this.moveSpeed += 0.08f;
                        this.meleeSpeed += 0.07f;
                    }
                    if (this.armor[index1].itemId == 2361)
                    {
                        ++this.maxMinions;
                        this.minionDamage += 0.04f;
                    }
                    if (this.armor[index1].itemId == 2362)
                    {
                        ++this.maxMinions;
                        this.minionDamage += 0.04f;
                    }
                    if (this.armor[index1].itemId == 2363)
                        this.minionDamage += 0.05f;
                    if (this.armor[index1].itemId >= 1158 && this.armor[index1].itemId <= 1161)
                        ++this.maxMinions;
                    if (this.armor[index1].itemId >= 1159 && this.armor[index1].itemId <= 1161)
                        this.minionDamage += 0.1f;
                    if (this.armor[index1].itemId >= 2370 && this.armor[index1].itemId <= 2371)
                    {
                        this.minionDamage += 0.05f;
                        ++this.maxMinions;
                    }
                    if (this.armor[index1].itemId == 2372)
                    {
                        this.minionDamage += 0.06f;
                        ++this.maxMinions;
                    }
                    if (this.armor[index1].itemId == 3381 || this.armor[index1].itemId == 3382 || this.armor[index1].itemId == 3383)
                    {
                        if (this.armor[index1].itemId != 3381)
                            ++this.maxMinions;
                        ++this.maxMinions;
                        this.minionDamage += 0.22f;
                    }
                    if (this.armor[index1].itemId == 2763)
                    {
                        this.aggro += 300;
                        this.meleeCrit += 17;
                    }
                    if (this.armor[index1].itemId == 2764)
                    {
                        this.aggro += 300;
                        this.meleeDamage += 0.22f;
                    }
                    if (this.armor[index1].itemId == 2765)
                    {
                        this.aggro += 300;
                        this.meleeSpeed += 0.15f;
                        this.moveSpeed += 0.15f;
                    }
                    if (this.armor[index1].itemId == 2757)
                    {
                        this.rangedCrit += 7;
                        this.rangedDamage += 0.16f;
                    }
                    if (this.armor[index1].itemId == 2758)
                    {
                        this.ammoCost75 = true;
                        this.rangedCrit += 12;
                        this.rangedDamage += 0.12f;
                    }
                    if (this.armor[index1].itemId == 2759)
                    {
                        this.rangedCrit += 8;
                        this.rangedDamage += 0.08f;
                        this.moveSpeed += 0.1f;
                    }
                    if (this.armor[index1].itemId == 2760)
                    {
                        this.statManaMax2 += 60;
                        this.manaCost -= 0.15f;
                        this.magicCrit += 7;
                        this.magicDamage += 0.07f;
                    }
                    if (this.armor[index1].itemId == 2761)
                    {
                        this.magicDamage += 0.09f;
                        this.magicCrit += 9;
                    }
                    if (this.armor[index1].itemId == 2762)
                    {
                        this.moveSpeed += 0.1f;
                        this.magicDamage += 0.1f;
                    }
                    if (this.armor[index1].itemId >= 1832 && this.armor[index1].itemId <= 1834)
                        ++this.maxMinions;
                    if (this.armor[index1].itemId >= 1832 && this.armor[index1].itemId <= 1834)
                        this.minionDamage += 0.11f;
                    if ((int)this.armor[index1].prefix == 62)
                        ++this.statDefense;
                    if ((int)this.armor[index1].prefix == 63)
                        this.statDefense += 2;
                    if ((int)this.armor[index1].prefix == 64)
                        this.statDefense += 3;
                    if ((int)this.armor[index1].prefix == 65)
                        this.statDefense += 4;
                    if ((int)this.armor[index1].prefix == 66)
                        this.statManaMax2 += 20;
                    if ((int)this.armor[index1].prefix == 67)
                    {
                        this.meleeCrit += 2;
                        this.rangedCrit += 2;
                        this.magicCrit += 2;
                        this.thrownCrit += 2;
                    }
                    if ((int)this.armor[index1].prefix == 68)
                    {
                        this.meleeCrit += 4;
                        this.rangedCrit += 4;
                        this.magicCrit += 4;
                        this.thrownCrit += 4;
                    }
                    if ((int)this.armor[index1].prefix == 69)
                    {
                        this.meleeDamage += 0.01f;
                        this.rangedDamage += 0.01f;
                        this.magicDamage += 0.01f;
                        this.minionDamage += 0.01f;
                        this.thrownDamage += 0.01f;
                    }
                    if ((int)this.armor[index1].prefix == 70)
                    {
                        this.meleeDamage += 0.02f;
                        this.rangedDamage += 0.02f;
                        this.magicDamage += 0.02f;
                        this.minionDamage += 0.02f;
                        this.thrownDamage += 0.02f;
                    }
                    if ((int)this.armor[index1].prefix == 71)
                    {
                        this.meleeDamage += 0.03f;
                        this.rangedDamage += 0.03f;
                        this.magicDamage += 0.03f;
                        this.minionDamage += 0.03f;
                        this.thrownDamage += 0.03f;
                    }
                    if ((int)this.armor[index1].prefix == 72)
                    {
                        this.meleeDamage += 0.04f;
                        this.rangedDamage += 0.04f;
                        this.magicDamage += 0.04f;
                        this.minionDamage += 0.04f;
                        this.thrownDamage += 0.04f;
                    }
                    if ((int)this.armor[index1].prefix == 73)
                        this.moveSpeed += 0.01f;
                    if ((int)this.armor[index1].prefix == 74)
                        this.moveSpeed += 0.02f;
                    if ((int)this.armor[index1].prefix == 75)
                        this.moveSpeed += 0.03f;
                    if ((int)this.armor[index1].prefix == 76)
                        this.moveSpeed += 0.04f;
                    if ((int)this.armor[index1].prefix == 77)
                        this.meleeSpeed += 0.01f;
                    if ((int)this.armor[index1].prefix == 78)
                        this.meleeSpeed += 0.02f;
                    if ((int)this.armor[index1].prefix == 79)
                        this.meleeSpeed += 0.03f;
                    if ((int)this.armor[index1].prefix == 80)
                        this.meleeSpeed += 0.04f;
                }
            }
            bool flag1 = false;
            bool flag2 = false;
            bool flag3 = false;
            for (int index1 = 3; index1 < 8 + this.extraAccessorySlots; ++index1)
            {
                if (!this.armor[index1].expertOnly || Main.expertMode)
                {
                    if (this.armor[index1].itemId == 3015)
                    {
                        this.aggro -= 400;
                        this.meleeCrit += 5;
                        this.magicCrit += 5;
                        this.rangedCrit += 5;
                        this.thrownCrit += 5;
                        this.meleeDamage += 0.05f;
                        this.magicDamage += 0.05f;
                        this.rangedDamage += 0.05f;
                        this.thrownDamage += 0.05f;
                        this.minionDamage += 0.05f;
                    }
                    if (this.armor[index1].itemId == 3016)
                        this.aggro += 400;
                    if (this.armor[index1].itemId == 2373)
                        this.accFishingLine = true;
                    if (this.armor[index1].itemId == 2374)
                        this.fishingSkill += 10;
                    if (this.armor[index1].itemId == 2375)
                        this.accTackleBox = true;
                    if (this.armor[index1].itemId == 3090)
                    {
                        this.npcTypeNoAggro[1] = true;
                        this.npcTypeNoAggro[16] = true;
                        this.npcTypeNoAggro[59] = true;
                        this.npcTypeNoAggro[71] = true;
                        this.npcTypeNoAggro[81] = true;
                        this.npcTypeNoAggro[138] = true;
                        this.npcTypeNoAggro[121] = true;
                        this.npcTypeNoAggro[122] = true;
                        this.npcTypeNoAggro[141] = true;
                        this.npcTypeNoAggro[147] = true;
                        this.npcTypeNoAggro[183] = true;
                        this.npcTypeNoAggro[184] = true;
                        this.npcTypeNoAggro[204] = true;
                        this.npcTypeNoAggro[225] = true;
                        this.npcTypeNoAggro[244] = true;
                        this.npcTypeNoAggro[302] = true;
                        this.npcTypeNoAggro[333] = true;
                        this.npcTypeNoAggro[335] = true;
                        this.npcTypeNoAggro[334] = true;
                        this.npcTypeNoAggro[336] = true;
                        this.npcTypeNoAggro[537] = true;
                    }
                    if (this.armor[index1].stringColor > 0)
                        this.yoyoString = true;
                    if (this.armor[index1].itemId == 3366)
                    {
                        this.counterWeight = 556 + Main.rand.Next(6);
                        this.yoyoGlove = true;
                        this.yoyoString = true;
                    }
                    if (this.armor[index1].itemId >= 3309 && this.armor[index1].itemId <= 3314)
                        this.counterWeight = 556 + this.armor[index1].itemId - 3309;
                    if (this.armor[index1].itemId == 3334)
                        this.yoyoGlove = true;
                    if (this.armor[index1].itemId == 3337)
                        this.shinyStone = true;
                    if (this.armor[index1].itemId == 3336)
                    {
                        this.SporeSac();
                        this.sporeSac = true;
                    }
                    if (this.armor[index1].itemId == 2423)
                    {
                        this.autoJump = true;
                        this.jumpSpeedBoost += 2.4f;
                        this.extraFall += 15;
                    }
                    if (this.armor[index1].itemId == 857)
                        this.doubleJumpSandstorm = true;
                    if (this.armor[index1].itemId == 983)
                    {
                        this.doubleJumpSandstorm = true;
                        this.jumpBoost = true;
                    }
                    if (this.armor[index1].itemId == 987)
                        this.doubleJumpBlizzard = true;
                    if (this.armor[index1].itemId == 1163)
                    {
                        this.doubleJumpBlizzard = true;
                        this.jumpBoost = true;
                    }
                    if (this.armor[index1].itemId == 1724)
                        this.doubleJumpFart = true;
                    if (this.armor[index1].itemId == 1863)
                    {
                        this.doubleJumpFart = true;
                        this.jumpBoost = true;
                    }
                    if (this.armor[index1].itemId == 1164)
                    {
                        this.doubleJumpCloud = true;
                        this.doubleJumpSandstorm = true;
                        this.doubleJumpBlizzard = true;
                        this.jumpBoost = true;
                    }
                    if (this.armor[index1].itemId == 1250)
                    {
                        this.jumpBoost = true;
                        this.doubleJumpCloud = true;
                        this.noFallDmg = true;
                    }
                    if (this.armor[index1].itemId == 1252)
                    {
                        this.doubleJumpSandstorm = true;
                        this.jumpBoost = true;
                        this.noFallDmg = true;
                    }
                    if (this.armor[index1].itemId == 1251)
                    {
                        this.doubleJumpBlizzard = true;
                        this.jumpBoost = true;
                        this.noFallDmg = true;
                    }
                    if (this.armor[index1].itemId == 3250)
                    {
                        this.doubleJumpFart = true;
                        this.jumpBoost = true;
                        this.noFallDmg = true;
                    }
                    if (this.armor[index1].itemId == 3252)
                    {
                        this.doubleJumpSail = true;
                        this.jumpBoost = true;
                        this.noFallDmg = true;
                    }
                    if (this.armor[index1].itemId == 3251)
                    {
                        this.jumpBoost = true;
                        this.bee = true;
                        this.noFallDmg = true;
                    }
                    if (this.armor[index1].itemId == 1249)
                    {
                        this.jumpBoost = true;
                        this.bee = true;
                    }
                    if (this.armor[index1].itemId == 3241)
                    {
                        this.jumpBoost = true;
                        this.doubleJumpSail = true;
                    }
                    if (this.armor[index1].itemId == 1253 && (double)this.statLife <= (double)this.statLifeMax2 * 0.5)
                        this.AddBuff(62, 5, true);
                    if (this.armor[index1].itemId == 1290)
                        this.panic = true;
                    if ((this.armor[index1].itemId == 1300 || this.armor[index1].itemId == 1858) && (this.inventory[this.selectedItem].useAmmo == 14 || this.inventory[this.selectedItem].useAmmo == 311 || (this.inventory[this.selectedItem].useAmmo == 323 || this.inventory[this.selectedItem].useAmmo == 23)))
                        this.scope = true;
                    if (this.armor[index1].itemId == 1858)
                    {
                        this.rangedCrit += 10;
                        this.rangedDamage += 0.1f;
                    }
                    if (this.armor[index1].itemId == 1303 && this.wet)
                        Lighting.AddLight((int)this.Center.X / 16, (int)this.Center.Y / 16, 0.9f, 0.2f, 0.6f);
                    if (this.armor[index1].itemId == 1301)
                    {
                        this.meleeCrit += 8;
                        this.rangedCrit += 8;
                        this.magicCrit += 8;
                        this.thrownCrit += 8;
                        this.meleeDamage += 0.1f;
                        this.rangedDamage += 0.1f;
                        this.magicDamage += 0.1f;
                        this.minionDamage += 0.1f;
                        this.thrownDamage += 0.1f;
                    }
                    if (this.armor[index1].itemId == 982)
                    {
                        this.statManaMax2 += 20;
                        ++this.manaRegenDelayBonus;
                        this.manaRegenBonus += 25;
                    }
                    if (this.armor[index1].itemId == 1595)
                    {
                        this.statManaMax2 += 20;
                        this.magicCuffs = true;
                    }
                    if (this.armor[index1].itemId == 2219)
                        this.manaMagnet = true;
                    if (this.armor[index1].itemId == 2220)
                    {
                        this.manaMagnet = true;
                        this.magicDamage += 0.15f;
                    }
                    if (this.armor[index1].itemId == 2221)
                    {
                        this.manaMagnet = true;
                        this.magicCuffs = true;
                    }
                    if (this.whoAmI == Main.myPlayer && this.armor[index1].itemId == 1923)
                    {
                        ++Player.tileRangeX;
                        ++Player.tileRangeY;
                    }
                    if (this.armor[index1].itemId == 1247)
                    {
                        this.starCloak = true;
                        this.bee = true;
                    }
                    if (this.armor[index1].itemId == 1248)
                    {
                        this.meleeCrit += 10;
                        this.rangedCrit += 10;
                        this.magicCrit += 10;
                        this.thrownCrit += 10;
                    }
                    if (this.armor[index1].itemId == 854)
                        this.discount = true;
                    if (this.armor[index1].itemId == 855)
                        this.coins = true;
                    if (this.armor[index1].itemId == 3033)
                        this.goldRing = true;
                    if (this.armor[index1].itemId == 3034)
                    {
                        this.goldRing = true;
                        this.coins = true;
                    }
                    if (this.armor[index1].itemId == 3035)
                    {
                        this.goldRing = true;
                        this.coins = true;
                        this.discount = true;
                    }
                    if (this.armor[index1].itemId == 53)
                        this.doubleJumpCloud = true;
                    if (this.armor[index1].itemId == 3201)
                        this.doubleJumpSail = true;
                    if (this.armor[index1].itemId == 54)
                        this.accRunSpeed = 6f;
                    if (this.armor[index1].itemId == 3068)
                        this.cordage = true;
                    if (this.armor[index1].itemId == 1579)
                    {
                        this.accRunSpeed = 6f;
                        this.coldDash = true;
                    }
                    if (this.armor[index1].itemId == 3200)
                    {
                        this.accRunSpeed = 6f;
                        this.sailDash = true;
                    }
                    if (this.armor[index1].itemId == 128)
                        this.rocketBoots = 1;
                    if (this.armor[index1].itemId == 156)
                        this.noKnockback = true;
                    if (this.armor[index1].itemId == 158)
                        this.noFallDmg = true;
                    if (this.armor[index1].itemId == 934)
                        this.carpet = true;
                    if (this.armor[index1].itemId == 953)
                        ++this.spikedBoots;
                    if (this.armor[index1].itemId == 975)
                        ++this.spikedBoots;
                    if (this.armor[index1].itemId == 976)
                        this.spikedBoots += 2;
                    if (this.armor[index1].itemId == 977)
                        this.dash = 1;
                    if (this.armor[index1].itemId == 3097)
                        this.dash = 2;
                    if (this.armor[index1].itemId == 963)
                        this.blackBelt = true;
                    if (this.armor[index1].itemId == 984)
                    {
                        this.blackBelt = true;
                        this.dash = 1;
                        this.spikedBoots = 2;
                    }
                    if (this.armor[index1].itemId == 1131)
                        this.gravControl2 = true;
                    if (this.armor[index1].itemId == 1132)
                        this.bee = true;
                    if (this.armor[index1].itemId == 1578)
                    {
                        this.bee = true;
                        this.panic = true;
                    }
                    if (this.armor[index1].itemId == 3224)
                        this.endurance += 0.17f;
                    if (this.armor[index1].itemId == 3223)
                        this.brainOfConfusion = true;
                    if (this.armor[index1].itemId == 950)
                        this.iceSkate = true;
                    if (this.armor[index1].itemId == 159)
                        this.jumpBoost = true;
                    if (this.armor[index1].itemId == 3225)
                        this.jumpBoost = true;
                    if (this.armor[index1].itemId == 187)
                        this.accFlipper = true;
                    if (this.armor[index1].itemId == 211)
                        this.meleeSpeed += 0.12f;
                    if (this.armor[index1].itemId == 223)
                        this.manaCost -= 0.06f;
                    if (this.armor[index1].itemId == 285)
                        this.moveSpeed += 0.05f;
                    if (this.armor[index1].itemId == 212)
                        this.moveSpeed += 0.1f;
                    if (this.armor[index1].itemId == 267)
                        this.killGuide = true;
                    if (this.armor[index1].itemId == 1307)
                        this.killClothier = true;
                    if (this.armor[index1].itemId == 193)
                        this.fireWalk = true;
                    if (this.armor[index1].itemId == 861)
                    {
                        this.accMerman = true;
                        this.wolfAcc = true;
                    }
                    if (this.armor[index1].itemId == 862)
                    {
                        this.starCloak = true;
                        this.longInvince = true;
                    }
                    if (this.armor[index1].itemId == 860)
                        this.pStone = true;
                    if (this.armor[index1].itemId == 863)
                        this.waterWalk2 = true;
                    if (this.armor[index1].itemId == 907)
                    {
                        this.waterWalk2 = true;
                        this.fireWalk = true;
                    }
                    if (this.armor[index1].itemId == 908)
                    {
                        this.waterWalk = true;
                        this.fireWalk = true;
                        this.lavaMax += 420;
                    }
                    if (this.armor[index1].itemId == 906)
                        this.lavaMax += 420;
                    if (this.armor[index1].itemId == 485)
                        this.wolfAcc = true;
                    if (this.armor[index1].itemId == 486 && !this.hideVisual[index1])
                        this.rulerLine = true;
                    if (this.armor[index1].itemId == 2799 && !this.hideVisual[index1])
                        this.rulerGrid = true;
                    if (this.armor[index1].itemId == 394)
                    {
                        this.accFlipper = true;
                        this.accDivingHelm = true;
                    }
                    if (this.armor[index1].itemId == 396)
                    {
                        this.noFallDmg = true;
                        this.fireWalk = true;
                    }
                    if (this.armor[index1].itemId == 397)
                    {
                        this.noKnockback = true;
                        this.fireWalk = true;
                    }
                    if (this.armor[index1].itemId == 399)
                    {
                        this.jumpBoost = true;
                        this.doubleJumpCloud = true;
                    }
                    if (this.armor[index1].itemId == 405)
                    {
                        this.accRunSpeed = 6f;
                        this.rocketBoots = 2;
                    }
                    if (this.armor[index1].itemId == 1860)
                    {
                        this.accFlipper = true;
                        this.accDivingHelm = true;
                        if (this.wet)
                            Lighting.AddLight((int)this.Center.X / 16, (int)this.Center.Y / 16, 0.9f, 0.2f, 0.6f);
                    }
                    if (this.armor[index1].itemId == 1861)
                    {
                        this.arcticDivingGear = true;
                        this.accFlipper = true;
                        this.accDivingHelm = true;
                        this.iceSkate = true;
                        if (this.wet)
                            Lighting.AddLight((int)this.Center.X / 16, (int)this.Center.Y / 16, 0.2f, 0.8f, 0.9f);
                    }
                    if (this.armor[index1].itemId == 2214)
                        flag2 = true;
                    if (this.armor[index1].itemId == 2215)
                        flag3 = true;
                    if (this.armor[index1].itemId == 2216)
                        this.autoPaint = true;
                    if (this.armor[index1].itemId == 2217)
                        flag1 = true;
                    if (this.armor[index1].itemId == 3061)
                    {
                        flag1 = true;
                        flag2 = true;
                        this.autoPaint = true;
                        flag3 = true;
                    }
                    if (this.armor[index1].itemId == 897)
                    {
                        this.kbGlove = true;
                        this.meleeSpeed += 0.12f;
                    }
                    if (this.armor[index1].itemId == 1343)
                    {
                        this.kbGlove = true;
                        this.meleeSpeed += 0.1f;
                        this.meleeDamage += 0.1f;
                        this.magmaStone = true;
                    }
                    if (this.armor[index1].itemId == 1167)
                    {
                        this.minionKB += 2f;
                        this.minionDamage += 0.15f;
                    }
                    if (this.armor[index1].itemId == 1864)
                    {
                        this.minionKB += 2f;
                        this.minionDamage += 0.15f;
                        ++this.maxMinions;
                    }
                    if (this.armor[index1].itemId == 1845)
                    {
                        this.minionDamage += 0.1f;
                        ++this.maxMinions;
                    }
                    if (this.armor[index1].itemId == 1321)
                    {
                        this.magicQuiver = true;
                        this.arrowDamage += 0.1f;
                    }
                    if (this.armor[index1].itemId == 1322)
                        this.magmaStone = true;
                    if (this.armor[index1].itemId == 1323)
                        this.lavaRose = true;
                    if (this.armor[index1].itemId == 3333)
                        this.strongBees = true;
                    if (this.armor[index1].itemId == 938)
                    {
                        this.noKnockback = true;
                        if ((double)this.statLife > (double)this.statLifeMax2 * 0.25)
                        {
                            if (i == Main.myPlayer)
                                this.paladinGive = true;
                            else if (this.miscCounter % 5 == 0)
                            {
                                int index2 = Main.myPlayer;
                                if (Main.player[index2].team == this.team && this.team != 0)
                                {
                                    float num1 = this.position.X - Main.player[index2].position.X;
                                    float num2 = this.position.Y - Main.player[index2].position.Y;
                                    if (Math.Sqrt((double)num1 * (double)num1 + (double)num2 * (double)num2) < 800.0)
                                        Main.player[index2].AddBuff(43, 10, true);
                                }
                            }
                        }
                    }
                    if (this.armor[index1].itemId == 936)
                    {
                        this.kbGlove = true;
                        this.meleeSpeed += 0.12f;
                        this.meleeDamage += 0.12f;
                    }
                    if (this.armor[index1].itemId == 898)
                    {
                        this.accRunSpeed = 6.75f;
                        this.rocketBoots = 2;
                        this.moveSpeed += 0.08f;
                    }
                    if (this.armor[index1].itemId == 1862)
                    {
                        this.accRunSpeed = 6.75f;
                        this.rocketBoots = 3;
                        this.moveSpeed += 0.08f;
                        this.iceSkate = true;
                    }
                    if (this.armor[index1].itemId == 3110)
                    {
                        this.accMerman = true;
                        this.wolfAcc = true;
                    }
                    if (this.armor[index1].itemId == 1865 || this.armor[index1].itemId == 3110)
                    {
                        this.lifeRegen += 2;
                        this.statDefense += 4;
                        this.meleeSpeed += 0.1f;
                        this.meleeDamage += 0.1f;
                        this.meleeCrit += 2;
                        this.rangedDamage += 0.1f;
                        this.rangedCrit += 2;
                        this.magicDamage += 0.1f;
                        this.magicCrit += 2;
                        this.pickSpeed -= 0.15f;
                        this.minionDamage += 0.1f;
                        this.minionKB += 0.5f;
                        this.thrownDamage += 0.1f;
                        this.thrownCrit += 2;
                    }
                    if (this.armor[index1].itemId == 899 && Main.dayTime)
                    {
                        this.lifeRegen += 2;
                        this.statDefense += 4;
                        this.meleeSpeed += 0.1f;
                        this.meleeDamage += 0.1f;
                        this.meleeCrit += 2;
                        this.rangedDamage += 0.1f;
                        this.rangedCrit += 2;
                        this.magicDamage += 0.1f;
                        this.magicCrit += 2;
                        this.pickSpeed -= 0.15f;
                        this.minionDamage += 0.1f;
                        this.minionKB += 0.5f;
                        this.thrownDamage += 0.1f;
                        this.thrownCrit += 2;
                    }
                    if (this.armor[index1].itemId == 900 && (!Main.dayTime || Main.eclipse))
                    {
                        this.lifeRegen += 2;
                        this.statDefense += 4;
                        this.meleeSpeed += 0.1f;
                        this.meleeDamage += 0.1f;
                        this.meleeCrit += 2;
                        this.rangedDamage += 0.1f;
                        this.rangedCrit += 2;
                        this.magicDamage += 0.1f;
                        this.magicCrit += 2;
                        this.pickSpeed -= 0.15f;
                        this.minionDamage += 0.1f;
                        this.minionKB += 0.5f;
                        this.thrownDamage += 0.1f;
                        this.thrownCrit += 2;
                    }
                    if (this.armor[index1].itemId == 407)
                        this.blockRange = 1;
                    if (this.armor[index1].itemId == 489)
                        this.magicDamage += 0.15f;
                    if (this.armor[index1].itemId == 490)
                        this.meleeDamage += 0.15f;
                    if (this.armor[index1].itemId == 491)
                        this.rangedDamage += 0.15f;
                    if (this.armor[index1].itemId == 2998)
                        this.minionDamage += 0.15f;
                    if (this.armor[index1].itemId == 935)
                    {
                        this.magicDamage += 0.12f;
                        this.meleeDamage += 0.12f;
                        this.rangedDamage += 0.12f;
                        this.minionDamage += 0.12f;
                        this.thrownDamage += 0.12f;
                    }
                    if (this.armor[index1].itemId == 492)
                        this.wingTimeMax = 100;
                    if (this.armor[index1].itemId == 493)
                        this.wingTimeMax = 100;
                    if (this.armor[index1].itemId == 748)
                        this.wingTimeMax = 115;
                    if (this.armor[index1].itemId == 749)
                        this.wingTimeMax = 130;
                    if (this.armor[index1].itemId == 761)
                        this.wingTimeMax = 130;
                    if (this.armor[index1].itemId == 785)
                        this.wingTimeMax = 140;
                    if (this.armor[index1].itemId == 786)
                        this.wingTimeMax = 140;
                    if (this.armor[index1].itemId == 821)
                        this.wingTimeMax = 160;
                    if (this.armor[index1].itemId == 822)
                        this.wingTimeMax = 160;
                    if (this.armor[index1].itemId == 823)
                        this.wingTimeMax = 160;
                    if (this.armor[index1].itemId == 2280)
                        this.wingTimeMax = 160;
                    if (this.armor[index1].itemId == 2494)
                        this.wingTimeMax = 100;
                    if (this.armor[index1].itemId == 2609)
                    {
                        this.wingTimeMax = 180;
                        this.ignoreWater = true;
                    }
                    if (this.armor[index1].itemId == 948)
                        this.wingTimeMax = 180;
                    if (this.armor[index1].itemId == 1162)
                        this.wingTimeMax = 160;
                    if (this.armor[index1].itemId == 1165)
                        this.wingTimeMax = 140;
                    if (this.armor[index1].itemId == 1515)
                        this.wingTimeMax = 130;
                    if (this.armor[index1].itemId == 665)
                        this.wingTimeMax = 150;
                    if (this.armor[index1].itemId == 1583)
                        this.wingTimeMax = 150;
                    if (this.armor[index1].itemId == 1584)
                        this.wingTimeMax = 150;
                    if (this.armor[index1].itemId == 1585)
                        this.wingTimeMax = 150;
                    if (this.armor[index1].itemId == 1586)
                        this.wingTimeMax = 150;
                    if (this.armor[index1].itemId == 3228)
                        this.wingTimeMax = 150;
                    if (this.armor[index1].itemId == 3580)
                        this.wingTimeMax = 150;
                    if (this.armor[index1].itemId == 3582)
                        this.wingTimeMax = 150;
                    if (this.armor[index1].itemId == 3588)
                        this.wingTimeMax = 150;
                    if (this.armor[index1].itemId == 3592)
                        this.wingTimeMax = 150;
                    if (this.armor[index1].itemId == 1797)
                        this.wingTimeMax = 180;
                    if (this.armor[index1].itemId == 1830)
                        this.wingTimeMax = 180;
                    if (this.armor[index1].itemId == 1866)
                        this.wingTimeMax = 170;
                    if (this.armor[index1].itemId == 1871)
                        this.wingTimeMax = 170;
                    if (this.armor[index1].itemId == 2770)
                        this.wingTimeMax = 160;
                    if (this.armor[index1].itemId == 3468)
                        this.wingTimeMax = 180;
                    if (this.armor[index1].itemId == 3469)
                        this.wingTimeMax = 160;
                    if (this.armor[index1].itemId == 3470)
                        this.wingTimeMax = 180;
                    if (this.armor[index1].itemId == 3471)
                        this.wingTimeMax = 220;
                    if (this.armor[index1].itemId == 885)
                        this.buffImmune[30] = true;
                    if (this.armor[index1].itemId == 886)
                        this.buffImmune[36] = true;
                    if (this.armor[index1].itemId == 887)
                        this.buffImmune[20] = true;
                    if (this.armor[index1].itemId == 888)
                        this.buffImmune[22] = true;
                    if (this.armor[index1].itemId == 889)
                        this.buffImmune[32] = true;
                    if (this.armor[index1].itemId == 890)
                        this.buffImmune[35] = true;
                    if (this.armor[index1].itemId == 891)
                        this.buffImmune[23] = true;
                    if (this.armor[index1].itemId == 892)
                        this.buffImmune[33] = true;
                    if (this.armor[index1].itemId == 893)
                        this.buffImmune[31] = true;
                    if (this.armor[index1].itemId == 901)
                    {
                        this.buffImmune[33] = true;
                        this.buffImmune[36] = true;
                    }
                    if (this.armor[index1].itemId == 902)
                    {
                        this.buffImmune[30] = true;
                        this.buffImmune[20] = true;
                    }
                    if (this.armor[index1].itemId == 903)
                    {
                        this.buffImmune[32] = true;
                        this.buffImmune[31] = true;
                    }
                    if (this.armor[index1].itemId == 904)
                    {
                        this.buffImmune[35] = true;
                        this.buffImmune[23] = true;
                    }
                    if (this.armor[index1].itemId == 1921)
                    {
                        this.buffImmune[46] = true;
                        this.buffImmune[47] = true;
                    }
                    if (this.armor[index1].itemId == 1612)
                    {
                        this.buffImmune[33] = true;
                        this.buffImmune[36] = true;
                        this.buffImmune[30] = true;
                        this.buffImmune[20] = true;
                        this.buffImmune[32] = true;
                        this.buffImmune[31] = true;
                        this.buffImmune[35] = true;
                        this.buffImmune[23] = true;
                        this.buffImmune[22] = true;
                    }
                    if (this.armor[index1].itemId == 1613)
                    {
                        this.buffImmune[46] = true;
                        this.noKnockback = true;
                        this.fireWalk = true;
                        this.buffImmune[33] = true;
                        this.buffImmune[36] = true;
                        this.buffImmune[30] = true;
                        this.buffImmune[20] = true;
                        this.buffImmune[32] = true;
                        this.buffImmune[31] = true;
                        this.buffImmune[35] = true;
                        this.buffImmune[23] = true;
                        this.buffImmune[22] = true;
                    }
                    if (this.armor[index1].itemId == 497)
                        this.accMerman = true;
                    if (this.armor[index1].itemId == 535)
                        this.pStone = true;
                    if (this.armor[index1].itemId == 536)
                        this.kbGlove = true;
                    if (this.armor[index1].itemId == 532)
                        this.starCloak = true;
                    if (this.armor[index1].itemId == 554)
                        this.longInvince = true;
                    if (this.armor[index1].itemId == 555)
                    {
                        this.manaFlower = true;
                        this.manaCost -= 0.08f;
                    }
                    if (Main.myPlayer == this.whoAmI)
                    {
                        if (this.armor[index1].itemId == 576 && Main.rand.Next(10800) == 0 && (Main.curMusic > 0 && Main.curMusic <= 39))
                        {
                            int num = 0;
                            if (Main.curMusic == 1)
                                num = 0;
                            if (Main.curMusic == 2)
                                num = 1;
                            if (Main.curMusic == 3)
                                num = 2;
                            if (Main.curMusic == 4)
                                num = 4;
                            if (Main.curMusic == 5)
                                num = 5;
                            if (Main.curMusic == 6)
                                num = 3;
                            if (Main.curMusic == 7)
                                num = 6;
                            if (Main.curMusic == 8)
                                num = 7;
                            if (Main.curMusic == 9)
                                num = 9;
                            if (Main.curMusic == 10)
                                num = 8;
                            if (Main.curMusic == 11)
                                num = 11;
                            if (Main.curMusic == 12)
                                num = 10;
                            if (Main.curMusic == 13)
                                num = 12;
                            if (Main.curMusic == 28)
                                this.armor[index1].SetDefaults(1963, false);
                            else if (Main.curMusic == 29)
                                this.armor[index1].SetDefaults(1610, false);
                            else if (Main.curMusic == 30)
                                this.armor[index1].SetDefaults(1963, false);
                            else if (Main.curMusic == 31)
                                this.armor[index1].SetDefaults(1964, false);
                            else if (Main.curMusic == 32)
                                this.armor[index1].SetDefaults(1965, false);
                            else if (Main.curMusic == 33)
                                this.armor[index1].SetDefaults(2742, false);
                            else if (Main.curMusic == 34)
                                this.armor[index1].SetDefaults(3370, false);
                            else if (Main.curMusic == 35)
                                this.armor[index1].SetDefaults(3236, false);
                            else if (Main.curMusic == 36)
                                this.armor[index1].SetDefaults(3237, false);
                            else if (Main.curMusic == 37)
                                this.armor[index1].SetDefaults(3235, false);
                            else if (Main.curMusic == 38)
                                this.armor[index1].SetDefaults(3044, false);
                            else if (Main.curMusic == 39)
                                this.armor[index1].SetDefaults(3371, false);
                            else if (Main.curMusic > 13)
                                this.armor[index1].SetDefaults(1596 + Main.curMusic - 14, false);
                            else
                                this.armor[index1].SetDefaults(num + 562, false);
                        }
                        if (this.armor[index1].itemId >= 562 && this.armor[index1].itemId <= 574)
                            Main.musicBox2 = this.armor[index1].itemId - 562;
                        if (this.armor[index1].itemId >= 1596 && this.armor[index1].itemId <= 1609)
                            Main.musicBox2 = this.armor[index1].itemId - 1596 + 13;
                        if (this.armor[index1].itemId == 1610)
                            Main.musicBox2 = 27;
                        if (this.armor[index1].itemId == 1963)
                            Main.musicBox2 = 28;
                        if (this.armor[index1].itemId == 1964)
                            Main.musicBox2 = 29;
                        if (this.armor[index1].itemId == 1965)
                            Main.musicBox2 = 30;
                        if (this.armor[index1].itemId == 2742)
                            Main.musicBox2 = 31;
                        if (this.armor[index1].itemId == 3044)
                            Main.musicBox2 = 32;
                        if (this.armor[index1].itemId == 3235)
                            Main.musicBox2 = 33;
                        if (this.armor[index1].itemId == 3236)
                            Main.musicBox2 = 34;
                        if (this.armor[index1].itemId == 3237)
                            Main.musicBox2 = 35;
                        if (this.armor[index1].itemId == 3370)
                            Main.musicBox2 = 36;
                        if (this.armor[index1].itemId == 3371)
                            Main.musicBox2 = 37;
                    }
                }
            }
            for (int index = 3; index < 8 + this.extraAccessorySlots; ++index)
            {
                if ((int)this.armor[index].wingSlot > 0)
                {
                    if (!this.hideVisual[index] || (double)this.velocity.Y != 0.0 && !this.mount.Active)
                        this.wings = (int)this.armor[index].wingSlot;
                    this.wingsLogic = (int)this.armor[index].wingSlot;
                }
            }
            for (int index = 13; index < 18 + this.extraAccessorySlots; ++index)
            {
                if ((int)this.armor[index].wingSlot > 0)
                    this.wings = (int)this.armor[index].wingSlot;
            }
            if (this.whoAmI == Main.myPlayer && Main.clock && this.accWatch < 3)
                ++this.accWatch;
            if (flag2)
                this.tileSpeed += 0.5f;
            if (flag1)
                this.wallSpeed += 0.5f;
            if (flag3 && this.whoAmI == Main.myPlayer)
            {
                Player.tileRangeX += 3;
                Player.tileRangeY += 2;
            }
            if (!this.accThirdEye)
                this.accThirdEyeCounter = (byte)0;
            if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
            {
                for (int index = 0; index < (int)byte.MaxValue; ++index)
                {
                    if (index != this.whoAmI && Main.player[index].active && (!Main.player[index].dead && Main.player[index].team == this.team) && Main.player[index].team != 0)
                    {
                        int num = 800;
                        if ((double)(Main.player[index].Center - this.Center).Length() < (double)num)
                        {
                            if (Main.player[index].accWatch > this.accWatch)
                                this.accWatch = Main.player[index].accWatch;
                            if (Main.player[index].accCompass > this.accCompass)
                                this.accCompass = Main.player[index].accCompass;
                            if (Main.player[index].accDepthMeter > this.accDepthMeter)
                                this.accDepthMeter = Main.player[index].accDepthMeter;
                            if (Main.player[index].accFishFinder)
                                this.accFishFinder = true;
                            if (Main.player[index].accWeatherRadio)
                                this.accWeatherRadio = true;
                            if (Main.player[index].accThirdEye)
                                this.accThirdEye = true;
                            if (Main.player[index].accJarOfSouls)
                                this.accJarOfSouls = true;
                            if (Main.player[index].accCalendar)
                                this.accCalendar = true;
                            if (Main.player[index].accStopwatch)
                                this.accStopwatch = true;
                            if (Main.player[index].accOreFinder)
                                this.accOreFinder = true;
                            if (Main.player[index].accCritterGuide)
                                this.accCritterGuide = true;
                            if (Main.player[index].accDreamCatcher)
                                this.accDreamCatcher = true;
                        }
                    }
                }
            }
            if (this.accDreamCatcher || !this.dpsStarted)
                return;
            this.dpsStarted = false;
            this.dpsEnd = DateTime.Now;
        }

        public void UpdateArmorSets(int i)
        {
            this.setBonus = "";
            if (this.body == 67 && this.legs == 56 && (this.head >= 103 && this.head <= 105))
            {
                this.setBonus = Lang.setBonus(31, false);
                this.shroomiteStealth = true;
            }
            if (this.head == 52 && this.body == 32 && this.legs == 31 || this.head == 53 && this.body == 33 && this.legs == 32 || (this.head == 54 && this.body == 34 && this.legs == 33 || this.head == 55 && this.body == 35 && this.legs == 34) || (this.head == 70 && this.body == 46 && this.legs == 42 || this.head == 71 && this.body == 47 && this.legs == 43 || (this.head == 166 && this.body == 173 && this.legs == 108 || this.head == 167 && this.body == 174 && this.legs == 109)))
            {
                this.setBonus = Lang.setBonus(20, false);
                ++this.statDefense;
            }
            if (this.head == 1 && this.body == 1 && this.legs == 1 || (this.head == 72 || this.head == 2) && (this.body == 2 && this.legs == 2) || this.head == 47 && this.body == 28 && this.legs == 27)
            {
                this.setBonus = Lang.setBonus(0, false);
                this.statDefense += 2;
            }
            if (this.head == 3 && this.body == 3 && this.legs == 3 || (this.head == 73 || this.head == 4) && (this.body == 4 && this.legs == 4) || (this.head == 48 && this.body == 29 && this.legs == 28 || this.head == 49 && this.body == 30 && this.legs == 29))
            {
                this.setBonus = Lang.setBonus(1, false);
                this.statDefense += 3;
            }
            if (this.head == 188 && this.body == 189 && this.legs == 129)
            {
                this.setBonus = Lang.setBonus(42, false);
                this.thrownCost50 = true;
            }
            if (this.head == 50 && this.body == 31 && this.legs == 30)
            {
                this.setBonus = Lang.setBonus(32, false);
                this.statDefense += 4;
            }
            if (this.head == 112 && this.body == 75 && this.legs == 64)
            {
                this.setBonus = Lang.setBonus(33, false);
                this.meleeDamage += 0.1f;
                this.magicDamage += 0.1f;
                this.rangedDamage += 0.1f;
                this.thrownDamage += 0.1f;
            }
            if (this.head == 22 && this.body == 14 && this.legs == 14)
            {
                this.thrownCost33 = true;
                this.setBonus = Lang.setBonus(41, false);
            }
            if (this.head == 157 && this.body == 105 && this.legs == 98)
            {
                int num1 = 0;
                this.setBonus = Lang.setBonus(38, false);
                this.beetleOffense = true;
                this.beetleCounter -= 3f;
                this.beetleCounter -= (float)(this.beetleCountdown / 10);
                ++this.beetleCountdown;
                if ((double)this.beetleCounter < 0.0)
                    this.beetleCounter = 0.0f;
                int num2 = 400;
                int num3 = 1200;
                int num4 = 4600;
                if ((double)this.beetleCounter > (double)(num2 + num3 + num4 + num3))
                    this.beetleCounter = (float)(num2 + num3 + num4 + num3);
                if ((double)this.beetleCounter > (double)(num2 + num3 + num4))
                {
                    this.AddBuff(100, 5, false);
                    num1 = 3;
                }
                else if ((double)this.beetleCounter > (double)(num2 + num3))
                {
                    this.AddBuff(99, 5, false);
                    num1 = 2;
                }
                else if ((double)this.beetleCounter > (double)num2)
                {
                    this.AddBuff(98, 5, false);
                    num1 = 1;
                }
                if (num1 < this.beetleOrbs)
                    this.beetleCountdown = 0;
                else if (num1 > this.beetleOrbs)
                    this.beetleCounter += 200f;
                if (num1 != this.beetleOrbs && this.beetleOrbs > 0)
                {
                    for (int b = 0; b < 22; ++b)
                    {
                        if (this.buffType[b] >= 98 && this.buffType[b] <= 100 && this.buffType[b] != 97 + num1)
                            this.DelBuff(b);
                    }
                }
            }
            else if (this.head == 157 && this.body == 106 && this.legs == 98)
            {
                this.setBonus = Lang.setBonus(37, false);
                this.beetleDefense = true;
                ++this.beetleCounter;
                int num = 180;
                if ((double)this.beetleCounter >= (double)num)
                {
                    if (this.beetleOrbs > 0 && this.beetleOrbs < 3)
                    {
                        for (int b = 0; b < 22; ++b)
                        {
                            if (this.buffType[b] >= 95 && this.buffType[b] <= 96)
                                this.DelBuff(b);
                        }
                    }
                    if (this.beetleOrbs < 3)
                    {
                        this.AddBuff(95 + this.beetleOrbs, 5, false);
                        this.beetleCounter = 0.0f;
                    }
                    else
                        this.beetleCounter = (float)num;
                }
            }
            if (!this.beetleDefense && !this.beetleOffense)
            {
                this.beetleCounter = 0.0f;
            }
            else
            {
                ++this.beetleFrameCounter;
                if (this.beetleFrameCounter >= 1)
                {
                    this.beetleFrameCounter = 0;
                    ++this.beetleFrame;
                    if (this.beetleFrame > 2)
                        this.beetleFrame = 0;
                }
                for (int index = this.beetleOrbs; index < 3; ++index)
                {
                    this.beetlePos[index].X = 0.0f;
                    this.beetlePos[index].Y = 0.0f;
                }
                for (int index = 0; index < this.beetleOrbs; ++index)
                {
                    this.beetlePos[index] += this.beetleVel[index];
                    this.beetleVel[index].X += (float)Main.rand.Next(-100, 101) * 0.005f;
                    this.beetleVel[index].Y += (float)Main.rand.Next(-100, 101) * 0.005f;
                    float num1 = this.beetlePos[index].X;
                    float num2 = this.beetlePos[index].Y;
                    float num3 = (float)Math.Sqrt((double)num1 * (double)num1 + (double)num2 * (double)num2);
                    if ((double)num3 > 100.0)
                    {
                        float num4 = 20f / num3;
                        float num5 = num1 * -num4;
                        float num6 = num2 * -num4;
                        int num7 = 10;
                        this.beetleVel[index].X = (this.beetleVel[index].X * (float)(num7 - 1) + num5) / (float)num7;
                        this.beetleVel[index].Y = (this.beetleVel[index].Y * (float)(num7 - 1) + num6) / (float)num7;
                    }
                    else if ((double)num3 > 30.0)
                    {
                        float num4 = 10f / num3;
                        float num5 = num1 * -num4;
                        float num6 = num2 * -num4;
                        int num7 = 20;
                        this.beetleVel[index].X = (this.beetleVel[index].X * (float)(num7 - 1) + num5) / (float)num7;
                        this.beetleVel[index].Y = (this.beetleVel[index].Y * (float)(num7 - 1) + num6) / (float)num7;
                    }
                    float num8 = this.beetleVel[index].X;
                    float num9 = this.beetleVel[index].Y;
                    if (Math.Sqrt((double)num8 * (double)num8 + (double)num9 * (double)num9) > 2.0)
                        this.beetleVel[index] *= 0.9f;
                    this.beetlePos[index] -= this.velocity * 0.25f;
                }
            }
            if (this.head == 14 && (this.body >= 58 && this.body <= 63 || this.body == 167))
            {
                this.setBonus = Lang.setBonus(28, false);
                this.magicCrit += 10;
            }
            if (this.head == 159 && (this.body >= 58 && this.body <= 63 || this.body == 167))
            {
                this.setBonus = Lang.setBonus(36, false);
                this.statManaMax2 += 60;
            }
            if ((this.head == 5 || this.head == 74) && (this.body == 5 || this.body == 48) && (this.legs == 5 || this.legs == 44))
            {
                this.setBonus = Lang.setBonus(2, false);
                this.moveSpeed += 0.15f;
            }
            if (this.head == 57 && this.body == 37 && this.legs == 35)
            {
                this.setBonus = Lang.setBonus(21, false);
                this.crimsonRegen = true;
            }
            if (this.head == 101 && this.body == 66 && this.legs == 55)
            {
                this.setBonus = Lang.setBonus(30, false);
                this.ghostHeal = true;
            }
            if (this.head == 156 && this.body == 66 && this.legs == 55)
            {
                this.setBonus = Lang.setBonus(35, false);
                this.ghostHurt = true;
            }
            if (this.head == 6 && this.body == 6 && this.legs == 6)
            {
                this.setBonus = Lang.setBonus(3, false);
                this.spaceGun = true;
            }
            if (this.head == 46 && this.body == 27 && this.legs == 26)
            {
                this.frostArmor = true;
                this.setBonus = Lang.setBonus(22, false);
                this.frostBurn = true;
            }
            if ((this.head == 75 || this.head == 7) && (this.body == 7 && this.legs == 7))
            {
                this.boneArmor = true;
                this.setBonus = Lang.setBonus(4, false);
                this.ammoCost80 = true;
            }
            if ((this.head == 76 || this.head == 8) && (this.body == 49 || this.body == 8) && (this.legs == 45 || this.legs == 8))
            {
                this.setBonus = Lang.setBonus(5, false);
                this.manaCost -= 0.16f;
            }
            if (this.head == 9 && this.body == 9 && this.legs == 9)
            {
                this.setBonus = Lang.setBonus(6, false);
                this.meleeDamage += 0.17f;
            }
            if (this.head == 11 && this.body == 20 && this.legs == 19)
            {
                this.setBonus = Lang.setBonus(7, false);
                this.pickSpeed -= 0.3f;
            }
            if ((this.head == 78 || this.head == 79 || this.head == 80) && (this.body == 51 && this.legs == 47))
            {
                this.setBonus = Lang.setBonus(27, false);
                this.AddBuff(60, 18000, true);
            }
            else if (this.crystalLeaf)
            {
                for (int b = 0; b < 22; ++b)
                {
                    if (this.buffType[b] == 60)
                        this.DelBuff(b);
                }
            }
            if (this.head == 99 && this.body == 65 && this.legs == 54)
            {
                this.setBonus = Lang.setBonus(29, false);
                this.thorns = 1f;
                this.turtleThorns = true;
            }
            if (this.body == 17 && this.legs == 16)
            {
                if (this.head == 29)
                {
                    this.setBonus = Lang.setBonus(8, false);
                    this.manaCost -= 0.14f;
                }
                else if (this.head == 30)
                {
                    this.setBonus = Lang.setBonus(9, false);
                    this.meleeSpeed += 0.15f;
                }
                else if (this.head == 31)
                {
                    this.setBonus = Lang.setBonus(10, false);
                    this.ammoCost80 = true;
                }
            }
            if (this.body == 18 && this.legs == 17)
            {
                if (this.head == 32)
                {
                    this.setBonus = Lang.setBonus(11, false);
                    this.manaCost -= 0.17f;
                }
                else if (this.head == 33)
                {
                    this.setBonus = Lang.setBonus(12, false);
                    this.meleeCrit += 5;
                }
                else if (this.head == 34)
                {
                    this.setBonus = Lang.setBonus(13, false);
                    this.ammoCost80 = true;
                }
            }
            if (this.body == 19 && this.legs == 18)
            {
                if (this.head == 35)
                {
                    this.setBonus = Lang.setBonus(14, false);
                    this.manaCost -= 0.19f;
                }
                else if (this.head == 36)
                {
                    this.setBonus = Lang.setBonus(15, false);
                    this.meleeSpeed += 0.18f;
                    this.moveSpeed += 0.18f;
                }
                else if (this.head == 37)
                {
                    this.setBonus = Lang.setBonus(16, false);
                    this.ammoCost75 = true;
                }
            }
            if (this.body == 54 && this.legs == 49 && (this.head == 83 || this.head == 84 || this.head == 85))
            {
                this.setBonus = Lang.setBonus(24, false);
                this.onHitRegen = true;
            }
            if (this.body == 55 && this.legs == 50 && (this.head == 86 || this.head == 87 || this.head == 88))
            {
                this.setBonus = Lang.setBonus(25, false);
                this.onHitPetal = true;
            }
            if (this.body == 56 && this.legs == 51 && (this.head == 89 || this.head == 90 || this.head == 91))
            {
                this.setBonus = Lang.setBonus(26, false);
                this.onHitDodge = true;
            }
            if (this.body == 24 && this.legs == 23)
            {
                if (this.head == 42)
                {
                    this.setBonus = Lang.setBonus(17, false);
                    this.manaCost -= 0.2f;
                }
                else if (this.head == 43)
                {
                    this.setBonus = Lang.setBonus(18, false);
                    this.meleeSpeed += 0.19f;
                    this.moveSpeed += 0.19f;
                }
                else if (this.head == 41)
                {
                    this.setBonus = Lang.setBonus(19, false);
                    this.ammoCost75 = true;
                }
            }
            if (this.head == 82 && this.body == 53 && this.legs == 48)
            {
                this.setBonus = Lang.setBonus(23, false);
                ++this.maxMinions;
            }
            if (this.head == 134 && this.body == 95 && this.legs == 79)
            {
                this.setBonus = Lang.setBonus(34, false);
                this.minionDamage += 0.25f;
            }
            if (this.head == 160 && this.body == 168 && this.legs == 103)
            {
                this.setBonus = Lang.setBonus(39, false);
                this.minionDamage += 0.1f;
                if (this.itemAnimation > 0 && this.inventory[this.selectedItem].itemId == 1121)
                    AchievementsHelper.HandleSpecialEvent(this, 3);
            }
            if (this.head == 162 && this.body == 170 && this.legs == 105)
            {
                this.setBonus = Lang.setBonus(40, false);
                this.minionDamage += 0.12f;
            }
            if (this.head == 171 && this.body == 177 && this.legs == 112)
            {
                this.setSolar = true;
                this.setBonus = Lang.setBonus(43, false);
                ++this.solarCounter;
                int num = 240;
                if (this.solarCounter >= num)
                {
                    if (this.solarShields > 0 && this.solarShields < 3)
                    {
                        for (int b = 0; b < 22; ++b)
                        {
                            if (this.buffType[b] >= 170 && this.buffType[b] <= 171)
                                this.DelBuff(b);
                        }
                    }
                    if (this.solarShields < 3)
                    {
                        this.AddBuff(170 + this.solarShields, 5, false);
                        for (int index = 0; index < 16; ++index)
                        {
                            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1f)];
                            dust.noGravity = true;
                            dust.scale = 1.7f;
                            dust.fadeIn = 0.5f;
                            dust.velocity *= 5f;
                            dust.shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                        }
                        this.solarCounter = 0;
                    }
                    else
                        this.solarCounter = num;
                }
                for (int index = this.solarShields; index < 3; ++index)
                    this.solarShieldPos[index] = Vector2.Zero;
                for (int index = 0; index < this.solarShields; ++index)
                {
                    this.solarShieldPos[index] += this.solarShieldVel[index];
                    Vector2 vector2 = Utils.ToRotationVector2((float)((double)this.miscCounter / 100.0 * 6.28318548202515 + (double)index * (6.28318548202515 / (double)this.solarShields))) * 6f;
                    vector2.X = (float)(this.direction * 20);
                    this.solarShieldVel[index] = (vector2 - this.solarShieldPos[index]) * 0.2f;
                }
                if (this.dashDelay >= 0)
                    this.solarDashing = false;
                if (this.solarShields > 0 || this.solarDashing && this.dashDelay < 0)
                    this.dash = 3;
            }
            else
                this.solarCounter = 0;
            if (this.head == 169 && this.body == 175 && this.legs == 110)
            {
                this.setVortex = true;
                this.setBonus = Lang.setBonus(44, false);
            }
            else
                this.vortexStealthActive = false;
            if (this.head == 170 && this.body == 176 && this.legs == 111)
            {
                if (this.nebulaCD > 0)
                    --this.nebulaCD;
                this.setNebula = true;
                this.setBonus = Lang.setBonus(45, false);
            }
            if (this.head == 189 && this.body == 190 && this.legs == 130)
            {
                this.setBonus = Lang.setBonus(46, false);
                this.setStardust = true;
                if (this.whoAmI != Main.myPlayer)
                    return;
                if (this.HasBuff(187) == -1)
                    this.AddBuff(187, 3600, true);
                if (this.ownedProjectileCounts[623] >= 1)
                    return;
                Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, -1f, 623, 0, 0.0f, Main.myPlayer, 0.0f, 0.0f);
            }
            else
            {
                if (this.HasBuff(187) == -1)
                    return;
                this.DelBuff(this.HasBuff(187));
            }
        }

        public void UpdateSocialShadow()
        {
            for (int index = 2; index > 0; --index)
                this.shadowDirection[index] = this.shadowDirection[index - 1];
            this.shadowDirection[0] = this.direction;
            ++this.shadowCount;
            if (this.shadowCount == 1)
            {
                this.shadowPos[2] = this.shadowPos[1];
                this.shadowRotation[2] = this.shadowRotation[1];
                this.shadowOrigin[2] = this.shadowOrigin[1];
            }
            else if (this.shadowCount == 2)
            {
                this.shadowPos[1] = this.shadowPos[0];
                this.shadowRotation[1] = this.shadowRotation[0];
                this.shadowOrigin[1] = this.shadowOrigin[0];
            }
            else
            {
                if (this.shadowCount < 3)
                    return;
                this.shadowCount = 0;
                this.shadowPos[0] = this.position;
                this.shadowPos[0].Y += this.gfxOffY;
                this.shadowRotation[0] = this.fullRotation;
                this.shadowOrigin[0] = this.fullRotationOrigin;
            }
        }

        public void UpdateTeleportVisuals()
        {
            if ((double)this.teleportTime <= 0.0)
                return;
            if (this.teleportStyle == 0)
            {
                if ((double)Main.rand.Next(100) <= 100.0 * (double)this.teleportTime * 2.0)
                {
                    int index = Dust.NewDust(new Vector2((float)this.getRect().X, (float)this.getRect().Y), this.getRect().Width, this.getRect().Height, 159, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index].scale = this.teleportTime * 1.5f;
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 1.1f;
                }
            }
            else if (this.teleportStyle == 1)
            {
                if ((double)Main.rand.Next(100) <= 100.0 * (double)this.teleportTime)
                {
                    int index = Dust.NewDust(new Vector2((float)this.getRect().X, (float)this.getRect().Y), this.getRect().Width, this.getRect().Height, 164, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index].scale = this.teleportTime * 1.5f;
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 1.1f;
                }
            }
            else if (this.teleportStyle == 2)
                this.teleportTime = 0.005f;
            else if (this.teleportStyle == 3)
                this.teleportTime = 0.005f;
            else if (this.teleportStyle == 4)
            {
                this.teleportTime -= 0.02f;
                if ((double)Main.rand.Next(100) <= 100.0 * (double)this.teleportTime)
                {
                    Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 263, 0.0f, 0.0f, 0, new Color(), 1f)];
                    dust.color = PortalHelper.GetPortalColor(this.lastPortalColorIndex);
                    dust.noLight = true;
                    dust.noGravity = true;
                    dust.scale = 1.2f;
                    dust.fadeIn = 0.4f;
                }
            }
            this.teleportTime -= 0.005f;
        }

        public void UpdateBiomes()
        {
            this.ZoneDungeon = false;
            if (Main.dungeonTiles >= 250 && (double)this.position.Y > Main.worldSurface * 16.0)
            {
                int index1 = (int)this.position.X / 16;
                int index2 = (int)this.position.Y / 16;
                if (Main.wallDungeon[(int)Main.tile[index1, index2].wall])
                    this.ZoneDungeon = true;
            }
            if (Main.sandTiles > 1000 && (double)this.position.Y > 3200.0)
            {
                Point point = Utils.ToTileCoordinates(this.Center);
                Tile tileSafely = Framing.GetTileSafely(point.X, point.Y);
                if (WallID.Sets.Conversion.Sandstone[(int)tileSafely.wall] || WallID.Sets.Conversion.HardenedSand[(int)tileSafely.wall])
                    this.ZoneUndergroundDesert = true;
            }
            else
                this.ZoneUndergroundDesert = false;
            this.ZoneCorrupt = Main.evilTiles >= 200;
            this.ZoneHoly = Main.holyTiles >= 100;
            this.ZoneMeteor = Main.meteorTiles >= 50;
            this.ZoneJungle = Main.jungleTiles >= 80;
            this.ZoneSnow = Main.snowTiles >= 300;
            this.ZoneCrimson = Main.bloodTiles >= 200;
            this.ZoneWaterCandle = Main.waterCandles > 0;
            this.ZonePeaceCandle = Main.peaceCandles > 0;
            this.ZoneDesert = Main.sandTiles > 1000;
            this.ZoneGlowshroom = Main.shroomTiles > 100;
            this.ZoneTowerSolar = this.ZoneTowerVortex = this.ZoneTowerNebula = this.ZoneTowerStardust = false;
            Vector2 vector2_1 = Vector2.Zero;
            Vector2 vector2_2 = Vector2.Zero;
            Vector2 vector2_3 = Vector2.Zero;
            Vector2 vector2_4 = Vector2.Zero;
            for (int index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active)
                {
                    if (Main.npc[index].type == 493)
                    {
                        if ((double)this.Distance(Main.npc[index].Center) <= 4000.0)
                        {
                            this.ZoneTowerStardust = true;
                            vector2_4 = Main.npc[index].Center;
                        }
                    }
                    else if (Main.npc[index].type == 507)
                    {
                        if ((double)this.Distance(Main.npc[index].Center) <= 4000.0)
                        {
                            this.ZoneTowerNebula = true;
                            vector2_3 = Main.npc[index].Center;
                        }
                    }
                    else if (Main.npc[index].type == 422)
                    {
                        if ((double)this.Distance(Main.npc[index].Center) <= 4000.0)
                        {
                            this.ZoneTowerVortex = true;
                            vector2_2 = Main.npc[index].Center;
                        }
                    }
                    else if (Main.npc[index].type == 517 && (double)this.Distance(Main.npc[index].Center) <= 4000.0)
                    {
                        this.ZoneTowerSolar = true;
                        vector2_1 = Main.npc[index].Center;
                    }
                }
            }
            this.ManageSpecialBiomeVisuals("Stardust", this.ZoneTowerStardust, vector2_4 - new Vector2(0.0f, 10f));
            this.ManageSpecialBiomeVisuals("Nebula", this.ZoneTowerNebula, vector2_3 - new Vector2(0.0f, 10f));
            this.ManageSpecialBiomeVisuals("Vortex", this.ZoneTowerVortex, vector2_2 - new Vector2(0.0f, 10f));
            this.ManageSpecialBiomeVisuals("Solar", this.ZoneTowerSolar, vector2_1 - new Vector2(0.0f, 10f));
            this.ManageSpecialBiomeVisuals("MoonLord", NPC.AnyNPCs(398), new Vector2());
            this.ManageSpecialBiomeVisuals("BloodMoon", Main.bloodMoon, new Vector2());
            if (!this.dead)
            {
                Point point = Utils.ToTileCoordinates(this.Center);
                if (WorldGen.InWorld(point.X, point.Y, 1))
                {
                    int num = 0;
                    if (Main.tile[point.X, point.Y] != null)
                        num = (int)Main.tile[point.X, point.Y].wall;
                    switch (num)
                    {
                        case 62:
                            AchievementsHelper.HandleSpecialEvent(this, 13);
                            break;
                        case 86:
                            AchievementsHelper.HandleSpecialEvent(this, 12);
                            break;
                    }
                }
                if (this._funkytownCheckCD > 0)
                    --this._funkytownCheckCD;
                if ((double)this.position.Y / 16.0 > (double)(Main.maxTilesY - 200))
                {
                    AchievementsHelper.HandleSpecialEvent(this, 14);
                }
                else
                {
                    if (this._funkytownCheckCD != 0 || (double)this.position.Y / 16.0 >= Main.worldSurface || Main.shroomTiles < 200)
                        return;
                    AchievementsHelper.HandleSpecialEvent(this, 15);
                }
            }
            else
                this._funkytownCheckCD = 100;
        }

        public void ManageSpecialBiomeVisuals(string biomeName, bool inZone, Vector2 activationSource = default(Vector2))
        {
            if (SkyManager.Instance[biomeName] != null && inZone != SkyManager.Instance[biomeName].IsActive())
            {
                if (inZone)
                    SkyManager.Instance.Activate(biomeName, activationSource);
                else
                    SkyManager.Instance.Deactivate(biomeName);
            }
            if (inZone != Filters.Scene[biomeName].IsActive())
            {
                if (inZone)
                    Filters.Scene.Activate(biomeName, activationSource);
                else
                    Filters.Scene[biomeName].Deactivate();
            }
            else
            {
                if (!inZone)
                    return;
                Filters.Scene[biomeName].TargetPosition = activationSource;
            }
        }

        public void UpdateDead()
        {
            this._portalPhysicsTime = 0;
            this.MountFishronSpecialCounter = 0.0f;
            this.gem = -1;
            this.slippy = false;
            this.slippy2 = false;
            this.powerrun = false;
            this.wings = 0;
            this.wingsLogic = 0;
            this.face = this.neck = this.back = this.front = this.handoff = this.handon = this.shoe = this.waist = this.balloon = this.shield = (sbyte)0;
            this.poisoned = false;
            this.venom = false;
            this.onFire = false;
            this.dripping = false;
            this.drippingSlime = false;
            this.burned = false;
            this.suffocating = false;
            this.onFire2 = false;
            this.onFrostBurn = false;
            this.blind = false;
            this.blackout = false;
            this.loveStruck = false;
            this.dryadWard = false;
            this.stinky = false;
            this.resistCold = false;
            this.electrified = false;
            this.moonLeech = false;
            this.headcovered = false;
            this.vortexDebuff = false;
            this.setSolar = this.setVortex = this.setNebula = this.setStardust = false;
            this.nebulaLevelDamage = this.nebulaLevelLife = this.nebulaLevelMana = 0;
            this.trapDebuffSource = false;
            this.yoraiz0rEye = 0;
            this.yoraiz0rDarkness = false;
            this.gravDir = 1f;
            for (int index = 0; index < 22; ++index)
            {
                if (this.buffType[index] <= 0 || !Main.persistentBuff[this.buffType[index]])
                {
                    this.buffTime[index] = 0;
                    this.buffType[index] = 0;
                }
            }
            if (this.whoAmI == Main.myPlayer)
            {
                Main.npcChatText = "";
                Main.editSign = false;
            }
            this.grappling[0] = -1;
            this.grappling[1] = -1;
            this.grappling[2] = -1;
            this.sign = -1;
            this.talkNPC = -1;
            Main.npcChatCornerItem = 0;
            this.statLife = 0;
            this.channel = false;
            this.potionDelay = 0;
            this.chest = -1;
            this.changeItem = -1;
            this.itemAnimation = 0;
            this.immuneAlpha += 2;
            if (this.immuneAlpha > (int)byte.MaxValue)
                this.immuneAlpha = (int)byte.MaxValue;
            this.headPosition += this.headVelocity;
            this.bodyPosition += this.bodyVelocity;
            this.legPosition += this.legVelocity;
            this.headRotation += this.headVelocity.X * 0.1f;
            this.bodyRotation += this.bodyVelocity.X * 0.1f;
            this.legRotation += this.legVelocity.X * 0.1f;
            this.headVelocity.Y += 0.1f;
            this.bodyVelocity.Y += 0.1f;
            this.legVelocity.Y += 0.1f;
            this.headVelocity.X *= 0.99f;
            this.bodyVelocity.X *= 0.99f;
            this.legVelocity.X *= 0.99f;
            for (int index = 0; index < this.npcTypeNoAggro.Length; ++index)
                this.npcTypeNoAggro[index] = false;
            if ((int)this.difficulty == 2)
            {
                if (this.respawnTimer > 0)
                {
                    --this.respawnTimer;
                }
                else
                {
                    if (this.whoAmI != Main.myPlayer && Main.netMode != 2)
                        return;
                    this.ghost = true;
                }
            }
            else
            {
                --this.respawnTimer;
                if (this.respawnTimer > 0 || Main.myPlayer != this.whoAmI)
                    return;
                if (Main.mouseItem.itemId > 0)
                    Main.playerInventory = true;
                this.Spawn();
            }
        }

        public void UpdatePet(int i)
        {
            if (i != Main.myPlayer || this.miscEquips[0].buffType < 1 || this.miscEquips[0].stack < 1)
                return;
            int type = this.miscEquips[0].buffType;
            if (!Main.vanityPet[type] && !Main.lightPet[type] || this.hideMisc[0] || (this.miscEquips[0].itemId == 603 && !Main.cEd || this.HasBuff(type) != -1))
                return;
            this.AddBuff(type, 3600, true);
            Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, this.miscEquips[0].useSound);
        }

        public void UpdatePetLight(int i)
        {
            if (i != Main.myPlayer || this.miscEquips[1].buffType < 1 || this.miscEquips[1].stack < 1)
                return;
            int type = this.miscEquips[1].buffType;
            if (!Main.vanityPet[type] && !Main.lightPet[type] || this.hideMisc[1] || this.miscEquips[1].itemId == 603 && !Main.cEd)
                return;
            int num = this.HasBuff(type);
            if (type == 27 && num == -1)
                num = this.HasBuff(102);
            if (type == 27 && num == -1)
                num = this.HasBuff(101);
            if (num != -1)
                return;
            if (type == 27)
                type = Utils.SelectRandom<int>(Main.rand, 27, 102, 101);
            this.AddBuff(type, 3600, true);
            Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, this.miscEquips[1].useSound);
        }

        public void TogglePet()
        {
            this.hideMisc[0] = !this.hideMisc[0];
            if (!this.hideMisc[0])
                return;
            this.ClearBuff(this.miscEquips[0].buffType);
        }

        public void ToggleLight()
        {
            this.hideMisc[1] = !this.hideMisc[1];
            if (!this.hideMisc[1])
                return;
            this.ClearBuff(this.miscEquips[1].buffType);
            if (this.miscEquips[1].buffType != 27)
                return;
            this.ClearBuff(102);
            this.ClearBuff(101);
        }

        public void SmartCursorLookup()
        {
            if (this.whoAmI != Main.myPlayer)
                return;
            Main.smartDigShowing = false;
            if (!Main.smartDigEnabled)
                return;
            Item obj = this.inventory[this.selectedItem];
            Vector2 vector2_1 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
            if ((double)this.gravDir == -1.0)
                vector2_1.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
            int x1 = Player.tileTargetX;
            int y1 = Player.tileTargetY;
            if (x1 < 10)
                x1 = 10;
            if (x1 > Main.maxTilesX - 10)
                x1 = Main.maxTilesX - 10;
            if (y1 < 10)
                y1 = 10;
            if (y1 > Main.maxTilesY - 10)
                y1 = Main.maxTilesY - 10;
            bool flag1 = false;
            if (Main.tile[x1, y1] == null)
                return;
            if (Main.tile[x1, y1].active())
            {
                ushort num = Main.tile[x1, y1].type;
                if ((uint)num <= 132U)
                {
                    if ((uint)num <= 55U)
                    {
                        if ((uint)num <= 21U)
                        {
                            switch (num)
                            {
                                case (ushort)4:
                                case (ushort)10:
                                case (ushort)11:
                                case (ushort)13:
                                case (ushort)21:
                                    break;
                                default:
                                    goto label_45;
                            }
                        }
                        else if ((uint)num <= 33U)
                        {
                            if ((int)num != 29 && (int)num != 33)
                                goto label_45;
                        }
                        else
                        {
                            switch (num)
                            {
                                case (ushort)49:
                                case (ushort)50:
                                case (ushort)55:
                                    break;
                                default:
                                    goto label_45;
                            }
                        }
                    }
                    else if ((uint)num <= 88U)
                    {
                        if ((int)num != 79 && (int)num != 85 && (int)num != 88)
                            goto label_45;
                    }
                    else if ((uint)num <= 104U)
                    {
                        if ((int)num != 97 && (int)num != 104)
                            goto label_45;
                    }
                    else if ((int)num != 125 && (int)num != 132)
                        goto label_45;
                }
                else if ((uint)num <= 216U)
                {
                    if ((uint)num <= 144U)
                    {
                        if ((int)num != 136 && (int)num != 139 && (int)num != 144)
                            goto label_45;
                    }
                    else if ((uint)num <= 209U)
                    {
                        switch (num)
                        {
                            case (ushort)174:
                            case (ushort)207:
                            case (ushort)209:
                                break;
                            default:
                                goto label_45;
                        }
                    }
                    else if ((int)num != 212 && (int)num != 216)
                        goto label_45;
                }
                else if ((uint)num <= 314U)
                {
                    if ((uint)num <= 237U)
                    {
                        if ((int)num != 219 && (int)num != 237)
                            goto label_45;
                    }
                    else if ((int)num != 287)
                    {
                        if ((int)num == 314 && (double)this.gravDir == 1.0)
                        {
                            flag1 = true;
                            goto label_45;
                        }
                        else
                            goto label_45;
                    }
                }
                else if ((uint)num <= 354U)
                {
                    switch (num)
                    {
                        case (ushort)334:
                        case (ushort)335:
                        case (ushort)338:
                        case (ushort)354:
                            break;
                        default:
                            goto label_45;
                    }
                }
                else
                {
                    switch (num)
                    {
                        case (ushort)386:
                        case (ushort)387:
                        case (ushort)411:
                            break;
                        default:
                            goto label_45;
                    }
                }
                flag1 = true;
            }
        label_45:
            int num1 = obj.tileBoost;
            int num2 = 0;
            if (obj.itemId == 1071 || obj.itemId == 1543 || (obj.itemId == 1072 || obj.itemId == 1544))
            {
                for (int index = 0; index < 58; ++index)
                {
                    if (this.inventory[index].stack > 0 && (int)this.inventory[index].paint > 0)
                    {
                        num2 = (int)this.inventory[index].paint;
                        break;
                    }
                }
            }
            int lx = (int)((double)this.position.X / 16.0) - Player.tileRangeX - num1 + 1;
            int hx = (int)(((double)this.position.X + (double)this.width) / 16.0) + Player.tileRangeX + num1 - 1;
            int ly = (int)((double)this.position.Y / 16.0) - Player.tileRangeY - num1 + 1;
            int hy = (int)(((double)this.position.Y + (double)this.height) / 16.0) + Player.tileRangeY + num1 - 2;
            if (lx < 10)
                lx = 10;
            if (hx > Main.maxTilesX - 10)
                hx = Main.maxTilesX - 10;
            if (ly < 10)
                ly = 10;
            if (hy > Main.maxTilesY - 10)
                hy = Main.maxTilesY - 10;
            if (flag1 && x1 >= lx && (x1 <= hx && y1 >= ly) && y1 <= hy)
                return;
            List<Tuple<int, int>> ignoreTargets = new List<Tuple<int, int>>();
            for (int index = 0; index < this.grapCount; ++index)
            {
                Projectile projectile = Main.projectile[this.grappling[index]];
                int num3 = (int)projectile.Center.X / 16;
                int num4 = (int)projectile.Center.Y / 16;
                ignoreTargets.Add(new Tuple<int, int>(num3, num4));
            }
            int num5 = -1;
            int num6 = -1;
            if (obj.axe > 0 && num5 == -1 && num6 == -1)
            {
                float num3 = -1f;
                for (int index1 = lx; index1 <= hx; ++index1)
                {
                    for (int index2 = ly; index2 <= hy; ++index2)
                    {
                        if (Main.tile[index1, index2].active())
                        {
                            Tile tile = Main.tile[index1, index2];
                            if (Main.tileAxe[(int)tile.type])
                            {
                                int x2 = index1;
                                int y2 = index2;
                                if ((int)tile.type == 5)
                                {
                                    if (Collision.InTileBounds(x2 + 1, y2, lx, ly, hx, hy))
                                    {
                                        if ((int)Main.tile[x2, y2].frameY >= 198 && (int)Main.tile[x2, y2].frameX == 44)
                                            ++x2;
                                        if ((int)Main.tile[x2, y2].frameX == 66 && (int)Main.tile[x2, y2].frameY <= 44)
                                            ++x2;
                                        if ((int)Main.tile[x2, y2].frameX == 44 && (int)Main.tile[x2, y2].frameY >= 132 && (int)Main.tile[x2, y2].frameY <= 176)
                                            ++x2;
                                    }
                                    if (Collision.InTileBounds(x2 - 1, y2, lx, ly, hx, hy))
                                    {
                                        if ((int)Main.tile[x2, y2].frameY >= 198 && (int)Main.tile[x2, y2].frameX == 66)
                                            --x2;
                                        if ((int)Main.tile[x2, y2].frameX == 88 && (int)Main.tile[x2, y2].frameY >= 66 && (int)Main.tile[x2, y2].frameY <= 110)
                                            --x2;
                                        if ((int)Main.tile[x2, y2].frameX == 22 && (int)Main.tile[x2, y2].frameY >= 132 && (int)Main.tile[x2, y2].frameY <= 176)
                                            --x2;
                                    }
                                    while (Main.tile[x2, y2].active() && (int)Main.tile[x2, y2].type == 5 && ((int)Main.tile[x2, y2 + 1].type == 5 && Collision.InTileBounds(x2, y2 + 1, lx, ly, hx, hy)))
                                        ++y2;
                                }
                                if ((int)tile.type == 80)
                                {
                                    if (Collision.InTileBounds(x2 + 1, y2, lx, ly, hx, hy))
                                    {
                                        if ((int)Main.tile[x2, y2].frameX == 54)
                                            ++x2;
                                        if ((int)Main.tile[x2, y2].frameX == 108 && (int)Main.tile[x2, y2].frameY == 36)
                                            ++x2;
                                    }
                                    if (Collision.InTileBounds(x2 - 1, y2, lx, ly, hx, hy))
                                    {
                                        if ((int)Main.tile[x2, y2].frameX == 36)
                                            --x2;
                                        if ((int)Main.tile[x2, y2].frameX == 108 && (int)Main.tile[x2, y2].frameY == 18)
                                            --x2;
                                    }
                                    while (Main.tile[x2, y2].active() && (int)Main.tile[x2, y2].type == 80 && ((int)Main.tile[x2, y2 + 1].type == 80 && Collision.InTileBounds(x2, y2 + 1, lx, ly, hx, hy)))
                                        ++y2;
                                }
                                if ((int)tile.type == 323 || (int)tile.type == 72)
                                {
                                    while (Main.tile[x2, y2].active() && ((int)Main.tile[x2, y2].type == 323 && (int)Main.tile[x2, y2 + 1].type == 323 || (int)Main.tile[x2, y2].type == 72 && (int)Main.tile[x2, y2 + 1].type == 72) && Collision.InTileBounds(x2, y2 + 1, lx, ly, hx, hy))
                                        ++y2;
                                }
                                float num4 = Vector2.Distance(new Vector2((float)x2, (float)y2) * 16f + Vector2.One * 8f, vector2_1);
                                if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                                {
                                    num3 = num4;
                                    num5 = x2;
                                    num6 = y2;
                                }
                            }
                        }
                    }
                }
            }
            if (obj.pick > 0 && num5 == -1 && num6 == -1)
            {
                Vector2 vector2_2 = vector2_1 - this.Center;
                int num3 = Math.Sign(vector2_2.X);
                int num4 = Math.Sign(vector2_2.Y);
                if ((double)Math.Abs(vector2_2.X) > (double)Math.Abs(vector2_2.Y) * 3.0)
                {
                    num4 = 0;
                    vector2_1.Y = this.Center.Y;
                }
                if ((double)Math.Abs(vector2_2.Y) > (double)Math.Abs(vector2_2.X) * 3.0)
                {
                    num3 = 0;
                    vector2_1.X = this.Center.X;
                }
                int num7 = (int)this.Center.X / 16;
                int num8 = (int)this.Center.Y / 16;
                List<Tuple<int, int>> list1 = new List<Tuple<int, int>>();
                List<Tuple<int, int>> list2 = new List<Tuple<int, int>>();
                int num9 = 1;
                if (num4 == -1 && num3 != 0)
                    num9 = -1;
                int index1 = (int)(((double)this.position.X + (double)(this.width / 2) + (double)((this.width / 2 - 1) * num3)) / 16.0);
                int index2 = (int)(((double)this.position.Y + 0.1) / 16.0);
                if (num9 == -1)
                    index2 = (int)(((double)this.position.Y + (double)this.height - 1.0) / 16.0);
                int num10 = this.width / 16 + (this.width % 16 == 0 ? 0 : 1);
                int num11 = this.height / 16 + (this.height % 16 == 0 ? 0 : 1);
                if (num3 != 0)
                {
                    for (int index3 = 0; index3 < num11; ++index3)
                    {
                        if (Main.tile[index1, index2 + index3 * num9] == null)
                            return;
                        list1.Add(new Tuple<int, int>(index1, index2 + index3 * num9));
                    }
                }
                if (num4 != 0)
                {
                    for (int index3 = 0; index3 < num10; ++index3)
                    {
                        if (Main.tile[(int)((double)this.position.X / 16.0) + index3, index2] == null)
                            return;
                        list1.Add(new Tuple<int, int>((int)((double)this.position.X / 16.0) + index3, index2));
                    }
                }
                int index4 = (int)(((double)vector2_1.X + (double)((this.width / 2 - 1) * num3)) / 16.0);
                int index5 = (int)(((double)vector2_1.Y + 0.1 - (double)(this.height / 2 + 1)) / 16.0);
                if (num9 == -1)
                    index5 = (int)(((double)vector2_1.Y + (double)(this.height / 2) - 1.0) / 16.0);
                if ((double)this.gravDir == -1.0 && num4 == 0)
                    ++index5;
                if (index5 < 10)
                    index5 = 10;
                if (index5 > Main.maxTilesY - 10)
                    index5 = Main.maxTilesY - 10;
                int num12 = this.width / 16 + (this.width % 16 == 0 ? 0 : 1);
                int num13 = this.height / 16 + (this.height % 16 == 0 ? 0 : 1);
                if (num3 != 0)
                {
                    for (int index3 = 0; index3 < num13; ++index3)
                    {
                        if (Main.tile[index4, index5 + index3 * num9] == null)
                            return;
                        list2.Add(new Tuple<int, int>(index4, index5 + index3 * num9));
                    }
                }
                if (num4 != 0)
                {
                    for (int index3 = 0; index3 < num12; ++index3)
                    {
                        if (Main.tile[(int)(((double)vector2_1.X - (double)(this.width / 2)) / 16.0) + index3, index5] == null)
                            return;
                        list2.Add(new Tuple<int, int>((int)(((double)vector2_1.X - (double)(this.width / 2)) / 16.0) + index3, index5));
                    }
                }
                List<Tuple<int, int>> list3 = new List<Tuple<int, int>>();
                while (list1.Count > 0)
                {
                    Tuple<int, int> tuple1 = list1[0];
                    Tuple<int, int> tuple2 = list2[0];
                    Tuple<int, int> col;
                    if (!Collision.TupleHitLine(tuple1.Item1, tuple1.Item2, tuple2.Item1, tuple2.Item2, num3 * (int)this.gravDir, -num4 * (int)this.gravDir, ignoreTargets, out col))
                    {
                        list1.Remove(tuple1);
                        list2.Remove(tuple2);
                    }
                    else
                    {
                        if (col.Item1 != tuple2.Item1 || col.Item2 != tuple2.Item2)
                            list3.Add(col);
                        Tile tile = Main.tile[col.Item1, col.Item2];
                        if (!tile.inActive() && tile.active() && (Main.tileSolid[(int)tile.type] && !Main.tileSolidTop[(int)tile.type]) && !ignoreTargets.Contains(col))
                            list3.Add(col);
                        list1.Remove(tuple1);
                        list2.Remove(tuple2);
                    }
                }
                List<Tuple<int, int>> list4 = new List<Tuple<int, int>>();
                for (int index3 = 0; index3 < list3.Count; ++index3)
                {
                    if (!WorldGen.CanKillTile(list3[index3].Item1, list3[index3].Item2))
                        list4.Add(list3[index3]);
                }
                for (int index3 = 0; index3 < list4.Count; ++index3)
                    list3.Remove(list4[index3]);
                list4.Clear();
                if (list3.Count > 0)
                {
                    float num14 = -1f;
                    Tuple<int, int> tuple = list3[0];
                    for (int index3 = 0; index3 < list3.Count; ++index3)
                    {
                        float num15 = Vector2.Distance(new Vector2((float)list3[index3].Item1, (float)list3[index3].Item2) * 16f + Vector2.One * 8f, this.Center);
                        if ((double)num14 == -1.0 || (double)num15 < (double)num14)
                        {
                            num14 = num15;
                            tuple = list3[index3];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list1.Clear();
                list2.Clear();
                list3.Clear();
            }
            if ((obj.itemId == 509 || obj.itemId == 850 || obj.itemId == 851) && (num5 == -1 && num6 == -1))
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
				var flag = k_WireFlags.WIRE_NONE;
				if (obj.itemId == 509)
					flag = k_WireFlags.WIRE_RED;
				if (obj.itemId == 850)
					flag = k_WireFlags.WIRE_GREEN;
				if (obj.itemId == 851)
					flag = k_WireFlags.WIRE_BLUE;

				if (flag != k_WireFlags.WIRE_NONE && !Main.tile[x1, y1].k_HasWireFlags(flag))
                {
					var directions = new int[][] { new int[] { 0, -1 }, new int[] { 0, 1 }, new int[] { -1, 0 }, new int[] { 1, 0 } };
					for (int index1 = lx; index1 <= hx; ++index1)
                    {
                        for (int index2 = ly; index2 <= hy; ++index2)
                        {
                            Tile tile = Main.tile[index1, index2];
							if (tile.k_HasWireFlags(flag))
							{
								for (int index3 = 0; index3 < 4; ++index3)
								{
									int i3x = index1 + directions[index3][0];
									int i3y = index2 + directions[index3][1];
									if (!Main.tile[i3x, i3y].k_HasWireFlags(flag))
										list.Add(new Tuple<int, int>(i3x, i3y));
								}
                            }
                        }
                    }
                }
                if (list.Count > 0)
                {
                    float num4 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num7 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num4 == -1.0 || (double)num7 < (double)num4)
                        {
                            num4 = num7;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (obj.hammer > 0 && num5 == -1 && num6 == -1)
            {
                Vector2 vector2_2 = vector2_1 - this.Center;
                int num3 = Math.Sign(vector2_2.X);
                int num4 = Math.Sign(vector2_2.Y);
                if ((double)Math.Abs(vector2_2.X) > (double)Math.Abs(vector2_2.Y) * 3.0)
                {
                    num4 = 0;
                    vector2_1.Y = this.Center.Y;
                }
                if ((double)Math.Abs(vector2_2.Y) > (double)Math.Abs(vector2_2.X) * 3.0)
                {
                    num3 = 0;
                    vector2_1.X = this.Center.X;
                }
                int num7 = (int)this.Center.X / 16;
                int num8 = (int)this.Center.Y / 16;
                List<Tuple<int, int>> list1 = new List<Tuple<int, int>>();
                List<Tuple<int, int>> list2 = new List<Tuple<int, int>>();
                int num9 = 1;
                if (num4 == -1 && num3 != 0)
                    num9 = -1;
                int index1 = (int)(((double)this.position.X + (double)(this.width / 2) + (double)((this.width / 2 - 1) * num3)) / 16.0);
                int index2 = (int)(((double)this.position.Y + 0.1) / 16.0);
                if (num9 == -1)
                    index2 = (int)(((double)this.position.Y + (double)this.height - 1.0) / 16.0);
                int num10 = this.width / 16 + (this.width % 16 == 0 ? 0 : 1);
                int num11 = this.height / 16 + (this.height % 16 == 0 ? 0 : 1);
                if (num3 != 0)
                {
                    for (int index3 = 0; index3 < num11; ++index3)
                    {
                        if (Main.tile[index1, index2 + index3 * num9] == null)
                            return;
                        list1.Add(new Tuple<int, int>(index1, index2 + index3 * num9));
                    }
                }
                if (num4 != 0)
                {
                    for (int index3 = 0; index3 < num10; ++index3)
                    {
                        if (Main.tile[(int)((double)this.position.X / 16.0) + index3, index2] == null)
                            return;
                        list1.Add(new Tuple<int, int>((int)((double)this.position.X / 16.0) + index3, index2));
                    }
                }
                int index4 = (int)(((double)vector2_1.X + (double)((this.width / 2 - 1) * num3)) / 16.0);
                int index5 = (int)(((double)vector2_1.Y + 0.1 - (double)(this.height / 2 + 1)) / 16.0);
                if (num9 == -1)
                    index5 = (int)(((double)vector2_1.Y + (double)(this.height / 2) - 1.0) / 16.0);
                if ((double)this.gravDir == -1.0 && num4 == 0)
                    ++index5;
                if (index5 < 10)
                    index5 = 10;
                if (index5 > Main.maxTilesY - 10)
                    index5 = Main.maxTilesY - 10;
                int num12 = this.width / 16 + (this.width % 16 == 0 ? 0 : 1);
                int num13 = this.height / 16 + (this.height % 16 == 0 ? 0 : 1);
                if (num3 != 0)
                {
                    for (int index3 = 0; index3 < num13; ++index3)
                    {
                        if (Main.tile[index4, index5 + index3 * num9] == null)
                            return;
                        list2.Add(new Tuple<int, int>(index4, index5 + index3 * num9));
                    }
                }
                if (num4 != 0)
                {
                    for (int index3 = 0; index3 < num12; ++index3)
                    {
                        if (Main.tile[(int)(((double)vector2_1.X - (double)(this.width / 2)) / 16.0) + index3, index5] == null)
                            return;
                        list2.Add(new Tuple<int, int>((int)(((double)vector2_1.X - (double)(this.width / 2)) / 16.0) + index3, index5));
                    }
                }
                List<Tuple<int, int>> list3 = new List<Tuple<int, int>>();
                while (list1.Count > 0)
                {
                    Tuple<int, int> tuple1 = list1[0];
                    Tuple<int, int> tuple2 = list2[0];
                    Tuple<int, int> tuple3 = Collision.TupleHitLineWall(tuple1.Item1, tuple1.Item2, tuple2.Item1, tuple2.Item2);
                    if (tuple3.Item1 == -1 || tuple3.Item2 == -1)
                    {
                        list1.Remove(tuple1);
                        list2.Remove(tuple2);
                    }
                    else
                    {
                        if (tuple3.Item1 != tuple2.Item1 || tuple3.Item2 != tuple2.Item2)
                            list3.Add(tuple3);
                        Tile tile = Main.tile[tuple3.Item1, tuple3.Item2];
                        if (Collision.HitWallSubstep(tuple3.Item1, tuple3.Item2))
                            list3.Add(tuple3);
                        list1.Remove(tuple1);
                        list2.Remove(tuple2);
                    }
                }
                if (list3.Count > 0)
                {
                    float num14 = -1f;
                    Tuple<int, int> tuple = list3[0];
                    for (int index3 = 0; index3 < list3.Count; ++index3)
                    {
                        float num15 = Vector2.Distance(new Vector2((float)list3[index3].Item1, (float)list3[index3].Item2) * 16f + Vector2.One * 8f, this.Center);
                        if ((double)num14 == -1.0 || (double)num15 < (double)num14)
                        {
                            num14 = num15;
                            tuple = list3[index3];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        this.poundRelease = false;
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list3.Clear();
                list1.Clear();
                list2.Clear();
            }
            if (obj.hammer > 0 && num5 == -1 && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                for (int x2 = lx; x2 <= hx; ++x2)
                {
                    for (int y2 = ly; y2 <= hy; ++y2)
                    {
                        if ((int)Main.tile[x2, y2].wall > 0 && Collision.HitWallSubstep(x2, y2))
                            list.Add(new Tuple<int, int>(x2, y2));
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        this.poundRelease = false;
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (obj.itemId == 510 && num5 == -1 && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                for (int index1 = lx; index1 <= hx; ++index1)
                {
                    for (int index2 = ly; index2 <= hy; ++index2)
                    {
                        Tile tile = Main.tile[index1, index2];
                        if (tile.k_wireFlags != k_WireFlags.WIRE_NONE)
                            list.Add(new Tuple<int, int>(index1, index2));
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (obj.createTile == 19 && num5 == -1 && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                bool flag2 = false;
                if (Main.tile[x1, y1].active() && (int)Main.tile[x1, y1].type == 19)
                    flag2 = true;
                if (!flag2)
                {
                    for (int index1 = lx; index1 <= hx; ++index1)
                    {
                        for (int index2 = ly; index2 <= hy; ++index2)
                        {
                            Tile tile1 = Main.tile[index1, index2];
                            if (tile1.active() && (int)tile1.type == 19)
                            {
                                int num3 = (int)tile1.slope();
                                if (num3 != 2 && !Main.tile[index1 - 1, index2 - 1].active())
                                    list.Add(new Tuple<int, int>(index1 - 1, index2 - 1));
                                if (!Main.tile[index1 - 1, index2].active())
                                    list.Add(new Tuple<int, int>(index1 - 1, index2));
                                if (num3 != 1 && !Main.tile[index1 - 1, index2 + 1].active())
                                    list.Add(new Tuple<int, int>(index1 - 1, index2 + 1));
                                if (num3 != 1 && !Main.tile[index1 + 1, index2 - 1].active())
                                    list.Add(new Tuple<int, int>(index1 + 1, index2 - 1));
                                if (!Main.tile[index1 + 1, index2].active())
                                    list.Add(new Tuple<int, int>(index1 + 1, index2));
                                if (num3 != 2 && !Main.tile[index1 + 1, index2 + 1].active())
                                    list.Add(new Tuple<int, int>(index1 + 1, index2 + 1));
                            }
                            if (!tile1.active())
                            {
                                int num3 = 0;
                                int num4 = 1;
                                Tile tile2 = Main.tile[index1 + num3, index2 + num4];
                                if (tile2.active() && Main.tileSolid[(int)tile2.type] && !Main.tileSolidTop[(int)tile2.type])
                                    list.Add(new Tuple<int, int>(index1, index2));
                                int num7 = -1;
                                int num8 = 0;
                                Tile tile3 = Main.tile[index1 + num7, index2 + num8];
                                if (tile3.active() && Main.tileSolid[(int)tile3.type] && !Main.tileSolidTop[(int)tile3.type])
                                    list.Add(new Tuple<int, int>(index1, index2));
                                int num9 = 1;
                                int num10 = 0;
                                Tile tile4 = Main.tile[index1 + num9, index2 + num10];
                                if (tile4.active() && Main.tileSolid[(int)tile4.type] && !Main.tileSolidTop[(int)tile4.type])
                                    list.Add(new Tuple<int, int>(index1, index2));
                            }
                        }
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if ((obj.itemId == 2340 || obj.itemId == 2739) && (num5 == -1 && num6 == -1))
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                bool flag2 = false;
                if (Main.tile[x1, y1].active() && (int)Main.tile[x1, y1].type == 314)
                    flag2 = true;
                if (!flag2)
                {
                    for (int index1 = lx; index1 <= hx; ++index1)
                    {
                        for (int index2 = ly; index2 <= hy; ++index2)
                        {
                            Tile tile = Main.tile[index1, index2];
                            if (tile.active() && (int)tile.type == 314)
                            {
                                bool flag3 = Main.tile[index1 + 1, index2 + 1].active() && (int)Main.tile[index1 + 1, index2 + 1].type == 314;
                                bool flag4 = Main.tile[index1 + 1, index2 - 1].active() && (int)Main.tile[index1 + 1, index2 - 1].type == 314;
                                bool flag5 = Main.tile[index1 - 1, index2 + 1].active() && (int)Main.tile[index1 - 1, index2 + 1].type == 314;
                                bool flag6 = Main.tile[index1 - 1, index2 - 1].active() && (int)Main.tile[index1 - 1, index2 - 1].type == 314;
                                if ((!Main.tile[index1 - 1, index2 - 1].active() || Main.tileCut[(int)Main.tile[index1 - 1, index2 - 1].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[index1 - 1, index2 - 1].type]) && (flag3 || !flag4))
                                    list.Add(new Tuple<int, int>(index1 - 1, index2 - 1));
                                if (!Main.tile[index1 - 1, index2].active() || Main.tileCut[(int)Main.tile[index1 - 1, index2].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[index1 - 1, index2].type])
                                    list.Add(new Tuple<int, int>(index1 - 1, index2));
                                if ((!Main.tile[index1 - 1, index2 + 1].active() || Main.tileCut[(int)Main.tile[index1 - 1, index2 + 1].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[index1 - 1, index2 + 1].type]) && (flag4 || !flag3))
                                    list.Add(new Tuple<int, int>(index1 - 1, index2 + 1));
                                if ((!Main.tile[index1 + 1, index2 - 1].active() || Main.tileCut[(int)Main.tile[index1 + 1, index2 - 1].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[index1 + 1, index2 - 1].type]) && (flag5 || !flag6))
                                    list.Add(new Tuple<int, int>(index1 + 1, index2 - 1));
                                if (!Main.tile[index1 + 1, index2].active() || Main.tileCut[(int)Main.tile[index1 + 1, index2].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[index1 + 1, index2].type])
                                    list.Add(new Tuple<int, int>(index1 + 1, index2));
                                if ((!Main.tile[index1 + 1, index2 + 1].active() || Main.tileCut[(int)Main.tile[index1 + 1, index2 + 1].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[index1 + 1, index2 + 1].type]) && (flag6 || !flag5))
                                    list.Add(new Tuple<int, int>(index1 + 1, index2 + 1));
                            }
                        }
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        if ((!Main.tile[list[index].Item1, list[index].Item2 - 1].active() || (int)Main.tile[list[index].Item1, list[index].Item2 - 1].type != 314) && (!Main.tile[list[index].Item1, list[index].Item2 + 1].active() || (int)Main.tile[list[index].Item1, list[index].Item2 + 1].type != 314))
                        {
                            float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                            if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                            {
                                num3 = num4;
                                tuple = list[index];
                            }
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy) && (double)num3 != -1.0)
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (obj.itemId == 2492 && num5 == -1 && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                bool flag2 = false;
                if (Main.tile[x1, y1].active() && (int)Main.tile[x1, y1].type == 314)
                    flag2 = true;
                if (!flag2)
                {
                    for (int index1 = lx; index1 <= hx; ++index1)
                    {
                        for (int index2 = ly; index2 <= hy; ++index2)
                        {
                            Tile tile = Main.tile[index1, index2];
                            if (tile.active() && (int)tile.type == 314)
                            {
                                if (!Main.tile[index1 - 1, index2].active() || Main.tileCut[(int)Main.tile[index1 - 1, index2].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[index1 - 1, index2].type])
                                    list.Add(new Tuple<int, int>(index1 - 1, index2));
                                if (!Main.tile[index1 + 1, index2].active() || Main.tileCut[(int)Main.tile[index1 + 1, index2].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[index1 + 1, index2].type])
                                    list.Add(new Tuple<int, int>(index1 + 1, index2));
                            }
                        }
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        if ((!Main.tile[list[index].Item1, list[index].Item2 - 1].active() || (int)Main.tile[list[index].Item1, list[index].Item2 - 1].type != 314) && (!Main.tile[list[index].Item1, list[index].Item2 + 1].active() || (int)Main.tile[list[index].Item1, list[index].Item2 + 1].type != 314))
                        {
                            float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                            if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                            {
                                num3 = num4;
                                tuple = list[index];
                            }
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy) && (double)num3 != -1.0)
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (obj.createWall > 0 && num5 == -1 && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                for (int index1 = lx; index1 <= hx; ++index1)
                {
                    for (int index2 = ly; index2 <= hy; ++index2)
                    {
                        Tile tile = Main.tile[index1, index2];
                        if ((int)tile.wall == 0 && (!tile.active() || !Main.tileSolid[(int)tile.type] || Main.tileSolidTop[(int)tile.type]) && Collision.CanHitWithCheck(this.position, this.width, this.height, new Vector2((float)index1, (float)index2) * 16f, 16, 16, new Utils.PerLinePoint(DelegateMethods.NotDoorStand)))
                        {
                            bool flag2 = false;
                            if (Main.tile[index1 - 1, index2].active() || (int)Main.tile[index1 - 1, index2].wall > 0)
                                flag2 = true;
                            if (Main.tile[index1 + 1, index2].active() || (int)Main.tile[index1 + 1, index2].wall > 0)
                                flag2 = true;
                            if (Main.tile[index1, index2 - 1].active() || (int)Main.tile[index1, index2 - 1].wall > 0)
                                flag2 = true;
                            if (Main.tile[index1, index2 + 1].active() || (int)Main.tile[index1, index2 + 1].wall > 0)
                                flag2 = true;
                            if (Main.tile[index1, index2].active() && (int)Main.tile[index1, index2].type == 11 && ((int)Main.tile[index1, index2].frameX < 18 || (int)Main.tile[index1, index2].frameX >= 54))
                                flag2 = false;
                            if (flag2)
                                list.Add(new Tuple<int, int>(index1, index2));
                        }
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (Player.SmartCursorSettings.SmartBlocksEnabled && obj.createTile > -1 && (obj.itemId != 213 && Main.tileSolid[obj.createTile]) && (!Main.tileSolidTop[obj.createTile] && !Main.tileFrameImportant[obj.createTile] && (num5 == -1 && num6 == -1)))
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                bool flag2 = false;
                if (Main.tile[x1, y1].active())
                    flag2 = true;
                if (!Collision.InTileBounds(x1, y1, lx, ly, hx, hy))
                    flag2 = true;
                if (!flag2)
                {
                    for (int index1 = lx; index1 <= hx; ++index1)
                    {
                        for (int index2 = ly; index2 <= hy; ++index2)
                        {
                            Tile tile = Main.tile[index1, index2];
                            if (!tile.active() || Main.tileCut[(int)tile.type] || TileID.Sets.BreakableWhenPlacing[(int)tile.type])
                            {
                                bool flag3 = false;
                                if (Main.tile[index1 - 1, index2].active() && Main.tileSolid[(int)Main.tile[index1 - 1, index2].type] && !Main.tileSolidTop[(int)Main.tile[index1 - 1, index2].type])
                                    flag3 = true;
                                if (Main.tile[index1 + 1, index2].active() && Main.tileSolid[(int)Main.tile[index1 + 1, index2].type] && !Main.tileSolidTop[(int)Main.tile[index1 + 1, index2].type])
                                    flag3 = true;
                                if (Main.tile[index1, index2 - 1].active() && Main.tileSolid[(int)Main.tile[index1, index2 - 1].type] && !Main.tileSolidTop[(int)Main.tile[index1, index2 - 1].type])
                                    flag3 = true;
                                if (Main.tile[index1, index2 + 1].active() && Main.tileSolid[(int)Main.tile[index1, index2 + 1].type] && !Main.tileSolidTop[(int)Main.tile[index1, index2 + 1].type])
                                    flag3 = true;
                                if (flag3)
                                    list.Add(new Tuple<int, int>(index1, index2));
                            }
                        }
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        if (Collision.EmptyTile(list[index].Item1, list[index].Item2, false))
                        {
                            float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                            if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                            {
                                num3 = num4;
                                tuple = list[index];
                            }
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy) && (double)num3 != -1.0)
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if ((obj.itemId == 1072 || obj.itemId == 1544) && (num2 != 0 && num5 == -1) && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                for (int index1 = lx; index1 <= hx; ++index1)
                {
                    for (int index2 = ly; index2 <= hy; ++index2)
                    {
                        Tile tile = Main.tile[index1, index2];
                        if ((int)tile.wall > 0 && (int)tile.wallColor() != num2 && (!tile.active() || !Main.tileSolid[(int)tile.type] || Main.tileSolidTop[(int)tile.type]))
                            list.Add(new Tuple<int, int>(index1, index2));
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if ((obj.itemId == 1071 || obj.itemId == 1543) && (num2 != 0 && num5 == -1) && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                for (int index1 = lx; index1 <= hx; ++index1)
                {
                    for (int index2 = ly; index2 <= hy; ++index2)
                    {
                        Tile tile = Main.tile[index1, index2];
                        if (tile.active() && (int)tile.color() != num2)
                            list.Add(new Tuple<int, int>(index1, index2));
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if ((obj.itemId == 1100 || obj.itemId == 1545) && (num5 == -1 && num6 == -1))
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                for (int index1 = lx; index1 <= hx; ++index1)
                {
                    for (int index2 = ly; index2 <= hy; ++index2)
                    {
                        Tile tile = Main.tile[index1, index2];
                        if (tile.active() && (int)tile.color() > 0 || (int)tile.wall > 0 && (int)tile.wallColor() > 0)
                            list.Add(new Tuple<int, int>(index1, index2));
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (obj.itemId == 27 && num5 == -1 && (num6 == -1 && ly > 20))
            {
                List<Tuple<int, int>> list1 = new List<Tuple<int, int>>();
                for (int index = lx; index <= hx; ++index)
                {
                    for (int endY = ly; endY <= hy; ++endY)
                    {
                        Tile tile1 = Main.tile[index, endY];
                        Tile tile2 = Main.tile[index, endY - 1];
                        Tile testTile = Main.tile[index, endY + 1];
                        Tile tile3 = Main.tile[index - 1, endY];
                        Tile tile4 = Main.tile[index + 1, endY];
                        if ((!tile1.active() || Main.tileCut[(int)tile1.type] || TileID.Sets.BreakableWhenPlacing[(int)tile1.type]) && (!tile2.active() || Main.tileCut[(int)tile2.type] || TileID.Sets.BreakableWhenPlacing[(int)tile2.type]) && ((!tile3.active() || (int)tile3.type != 20) && (!tile4.active() || (int)tile4.type != 20) && (testTile.active() && WorldGen.SolidTile2(testTile))))
                        {
                            ushort num3 = testTile.type;
                            if ((uint)num3 <= 109U)
                            {
                                if ((uint)num3 <= 23U)
                                {
                                    if ((int)num3 != 2 && (int)num3 != 23)
                                        continue;
                                }
                                else if ((int)num3 != 53)
                                {
                                    if ((int)num3 != 60)
                                    {
                                        if ((int)num3 != 109)
                                            continue;
                                    }
                                    else
                                    {
                                        if (WorldGen.EmptyTileCheck(index - 2, index + 2, endY - 20, endY, 20))
                                        {
                                            list1.Add(new Tuple<int, int>(index, endY));
                                            continue;
                                        }
                                        continue;
                                    }
                                }
                            }
                            else if ((uint)num3 <= 116U)
                            {
                                if ((int)num3 != 112 && (int)num3 != 116)
                                    continue;
                            }
                            else if ((int)num3 != 147 && (int)num3 != 199 && (int)num3 != 234)
                                continue;
                            if ((int)tile3.liquid == 0 && (int)tile1.liquid == 0 && ((int)tile4.liquid == 0 && WorldGen.EmptyTileCheck(index - 2, index + 2, endY - 20, endY, 20)))
                                list1.Add(new Tuple<int, int>(index, endY));
                        }
                    }
                }
                List<Tuple<int, int>> list2 = new List<Tuple<int, int>>();
                for (int index = 0; index < list1.Count; ++index)
                {
                    bool flag2 = false;
                    int num3 = -1;
                    while (num3 < 2)
                    {
                        Tile tile = Main.tile[list1[index].Item1 + num3, list1[index].Item2 + 1];
                        if (tile.active())
                        {
                            ushort num4 = tile.type;
                            if ((uint)num4 <= 109U)
                            {
                                if ((uint)num4 <= 23U)
                                {
                                    if ((int)num4 != 2 && (int)num4 != 23)
                                        goto label_571;
                                }
                                else if ((int)num4 != 53 && (int)num4 != 60 && (int)num4 != 109)
                                    goto label_571;
                            }
                            else if ((uint)num4 <= 116U)
                            {
                                if ((int)num4 != 112 && (int)num4 != 116)
                                    goto label_571;
                            }
                            else if ((int)num4 != 147 && (int)num4 != 199 && (int)num4 != 234)
                                goto label_571;
                            flag2 = true;
                        }
                    label_571:
                        num3 += 2;
                    }
                    if (!flag2)
                        list2.Add(list1[index]);
                }
                for (int index = 0; index < list2.Count; ++index)
                    list1.Remove(list2[index]);
                list2.Clear();
                if (list1.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list1[0];
                    for (int index = 0; index < list1.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list1[index].Item1, (float)list1[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list1[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list1.Clear();
            }
            if (obj.itemId == 205 && num5 == -1 && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                for (int index1 = lx; index1 <= hx; ++index1)
                {
                    for (int index2 = ly; index2 <= hy; ++index2)
                    {
                        Tile tile = Main.tile[index1, index2];
                        if ((int)tile.liquid > 0)
                        {
                            int num3 = (int)tile.liquidType();
                            int num4 = 0;
                            for (int index3 = index1 - 1; index3 <= index1 + 1; ++index3)
                            {
                                for (int index4 = index2 - 1; index4 <= index2 + 1; ++index4)
                                {
                                    if ((int)Main.tile[index3, index4].liquidType() == num3)
                                        num4 += (int)Main.tile[index3, index4].liquid;
                                }
                            }
                            if (num4 > 100)
                                list.Add(new Tuple<int, int>(index1, index2));
                        }
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (obj.itemId == 849 && num5 == -1 && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                for (int index1 = lx; index1 <= hx; ++index1)
                {
                    for (int index2 = ly; index2 <= hy; ++index2)
                    {
                        Tile tile = Main.tile[index1, index2];
                        if (tile.k_HasWireFlagsAny(k_WireFlags.WIRE_RGB) && !tile.k_HasWireFlags(k_WireFlags.WIRE_ACTUATOR) && tile.active())
                            list.Add(new Tuple<int, int>(index1, index2));
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (obj.createTile == 82 && num5 == -1 && num6 == -1)
            {
                int num3 = obj.placeStyle;
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                for (int index1 = lx; index1 <= hx; ++index1)
                {
                    for (int index2 = ly; index2 <= hy; ++index2)
                    {
                        Tile tile1 = Main.tile[index1, index2];
                        Tile tile2 = Main.tile[index1, index2 + 1];
                        if ((!tile1.active() || TileID.Sets.BreakableWhenPlacing[(int)tile1.type] || Main.tileCut[(int)tile1.type] && (int)tile1.type != 82 && (int)tile1.type != 83) && (tile2.nactive() && !tile2.halfBrick() && (int)tile2.slope() == 0))
                        {
                            if (num3 == 0)
                            {
                                if ((int)tile2.type != 78 && (int)tile2.type != 380 && ((int)tile2.type != 2 && (int)tile2.type != 109) || (int)tile1.liquid > 0)
                                    continue;
                            }
                            else if (num3 == 1)
                            {
                                if ((int)tile2.type != 78 && (int)tile2.type != 380 && (int)tile2.type != 60 || (int)tile1.liquid > 0)
                                    continue;
                            }
                            else if (num3 == 2)
                            {
                                if ((int)tile2.type != 78 && (int)tile2.type != 380 && ((int)tile2.type != 0 && (int)tile2.type != 59) || (int)tile1.liquid > 0)
                                    continue;
                            }
                            else if (num3 == 3)
                            {
                                if ((int)tile2.type != 78 && (int)tile2.type != 380 && ((int)tile2.type != 203 && (int)tile2.type != 199) && ((int)tile2.type != 23 && (int)tile2.type != 25) || (int)tile1.liquid > 0)
                                    continue;
                            }
                            else if (num3 == 4)
                            {
                                if ((int)tile2.type != 78 && (int)tile2.type != 380 && ((int)tile2.type != 53 && (int)tile2.type != 116) || (int)tile1.liquid > 0 && tile1.lava())
                                    continue;
                            }
                            else if (num3 == 5)
                            {
                                if ((int)tile2.type != 78 && (int)tile2.type != 380 && (int)tile2.type != 57 || (int)tile1.liquid > 0 && !tile1.lava())
                                    continue;
                            }
                            else if (num3 == 6 && ((int)tile2.type != 78 && (int)tile2.type != 380 && ((int)tile2.type != 147 && (int)tile2.type != 161) && ((int)tile2.type != 163 && (int)tile2.type != 164 && (int)tile2.type != 200) || (int)tile1.liquid > 0 && tile1.lava()))
                                continue;
                            list.Add(new Tuple<int, int>(index1, index2));
                        }
                    }
                }
                if (list.Count > 0)
                {
                    float num4 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num7 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num4 == -1.0 || (double)num7 < (double)num4)
                        {
                            num4 = num7;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (obj.createTile == 380 && num5 == -1 && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                bool flag2 = false;
                if (Main.tile[x1, y1].active() && (int)Main.tile[x1, y1].type == 380)
                    flag2 = true;
                if (!flag2)
                {
                    for (int index1 = lx; index1 <= hx; ++index1)
                    {
                        for (int index2 = ly; index2 <= hy; ++index2)
                        {
                            Tile tile = Main.tile[index1, index2];
                            if (tile.active() && (int)tile.type == 380)
                            {
                                if (!Main.tile[index1 - 1, index2].active() || Main.tileCut[(int)Main.tile[index1 - 1, index2].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[index1 - 1, index2].type])
                                    list.Add(new Tuple<int, int>(index1 - 1, index2));
                                if (!Main.tile[index1 + 1, index2].active() || Main.tileCut[(int)Main.tile[index1 + 1, index2].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[index1 + 1, index2].type])
                                    list.Add(new Tuple<int, int>(index1 + 1, index2));
                            }
                        }
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy) && (double)num3 != -1.0)
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (obj.createTile == 78 && num5 == -1 && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                bool flag2 = false;
                if (Main.tile[x1, y1].active())
                    flag2 = true;
                if (!Collision.InTileBounds(x1, y1, lx, ly, hx, hy))
                    flag2 = true;
                if (!flag2)
                {
                    for (int index1 = lx; index1 <= hx; ++index1)
                    {
                        for (int index2 = ly; index2 <= hy; ++index2)
                        {
                            Tile tile1 = Main.tile[index1, index2];
                            Tile tile2 = Main.tile[index1, index2 + 1];
                            if ((!tile1.active() || Main.tileCut[(int)tile1.type] || TileID.Sets.BreakableWhenPlacing[(int)tile1.type]) && (tile2.nactive() && !tile2.halfBrick() && ((int)tile2.slope() == 0 && Main.tileSolid[(int)tile2.type])))
                                list.Add(new Tuple<int, int>(index1, index2));
                        }
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        if (Collision.EmptyTile(list[index].Item1, list[index].Item2, true))
                        {
                            float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                            if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                            {
                                num3 = num4;
                                tuple = list[index];
                            }
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy) && (double)num3 != -1.0)
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (obj.itemId == 213 && num5 == -1 && num6 == -1)
            {
                List<Tuple<int, int>> list = new List<Tuple<int, int>>();
                for (int index1 = lx; index1 <= hx; ++index1)
                {
                    for (int index2 = ly; index2 <= hy; ++index2)
                    {
                        Tile tile = Main.tile[index1, index2];
                        bool flag2 = !Main.tile[index1 - 1, index2].active() || !Main.tile[index1, index2 + 1].active() || !Main.tile[index1 + 1, index2].active() || !Main.tile[index1, index2 - 1].active();
                        bool flag3 = !Main.tile[index1 - 1, index2 - 1].active() || !Main.tile[index1 - 1, index2 + 1].active() || !Main.tile[index1 + 1, index2 + 1].active() || !Main.tile[index1 + 1, index2 - 1].active();
                        if (tile.active() && !tile.inActive() && ((int)tile.type == 0 || (int)tile.type == 1) && (flag2 || (int)tile.type == 0 && flag3))
                            list.Add(new Tuple<int, int>(index1, index2));
                    }
                }
                if (list.Count > 0)
                {
                    float num3 = -1f;
                    Tuple<int, int> tuple = list[0];
                    for (int index = 0; index < list.Count; ++index)
                    {
                        float num4 = Vector2.Distance(new Vector2((float)list[index].Item1, (float)list[index].Item2) * 16f + Vector2.One * 8f, vector2_1);
                        if ((double)num3 == -1.0 || (double)num4 < (double)num3)
                        {
                            num3 = num4;
                            tuple = list[index];
                        }
                    }
                    if (Collision.InTileBounds(tuple.Item1, tuple.Item2, lx, ly, hx, hy))
                    {
                        num5 = tuple.Item1;
                        num6 = tuple.Item2;
                    }
                }
                list.Clear();
            }
            if (num5 != -1 && num6 != -1)
            {
                Main.smartDigX = Player.tileTargetX = num5;
                Main.smartDigY = Player.tileTargetY = num6;
                Main.smartDigShowing = true;
            }
            ignoreTargets.Clear();
        }

        public void SmartitemLookup()
        {
            if (this.controlTorch && this.itemAnimation == 0)
            {
                int num1 = 0;
                int index1 = (int)(((double)Main.mouseX + (double)Main.screenPosition.X) / 16.0);
                int index2 = (int)(((double)Main.mouseY + (double)Main.screenPosition.Y) / 16.0);
                if ((double)this.gravDir == -1.0)
                    index2 = (int)(((double)Main.screenPosition.Y + (double)Main.screenHeight - (double)Main.mouseY) / 16.0);
                int num2 = -10;
                int num3 = -10;
                int num4 = -10;
                int num5 = -10;
                int num6 = -10;
                for (int index3 = 0; index3 < 50; ++index3)
                {
                    if (this.inventory[index3].pick > 0 && num2 == -10)
                        num2 = this.inventory[index3].tileBoost;
                    if (this.inventory[index3].axe > 0 && num3 == -10)
                        num3 = this.inventory[index3].tileBoost;
                    if (this.inventory[index3].hammer > 0 && num4 == -10)
                        num4 = this.inventory[index3].tileBoost;
                    if ((this.inventory[index3].itemId == 929 || this.inventory[index3].itemId == 1338 || this.inventory[index3].itemId == 1345) && num5 == -10)
                        num5 = this.inventory[index3].tileBoost;
                    if ((this.inventory[index3].itemId == 424 || this.inventory[index3].itemId == 1103) && num6 == -10)
                        num6 = this.inventory[index3].tileBoost;
                }
                int num7 = 0;
                int num8 = 0;
                if ((double)this.position.X / 16.0 >= (double)index1)
                    num7 = (int)((double)this.position.X / 16.0) - index1;
                if (((double)this.position.X + (double)this.width) / 16.0 <= (double)index1)
                    num7 = index1 - (int)(((double)this.position.X + (double)this.width) / 16.0);
                if ((double)this.position.Y / 16.0 >= (double)index2)
                    num8 = (int)((double)this.position.Y / 16.0) - index2;
                if (((double)this.position.Y + (double)this.height) / 16.0 <= (double)index2)
                    num8 = index2 - (int)(((double)this.position.Y + (double)this.height) / 16.0);
                bool flag1 = false;
                bool flag2 = false;
                try
                {
                    flag2 = (int)Main.tile[index1, index2].liquid > 0;
                    if (Main.tile[index1, index2].active())
                    {
                        int index3 = (int)Main.tile[index1, index2].type;
                        if (index3 == 219 && num7 <= num6 + Player.tileRangeX && num8 <= num6 + Player.tileRangeY)
                        {
                            num1 = 7;
                            flag1 = true;
                        }
                        else if (index3 == 209 && num7 <= num5 + Player.tileRangeX && num8 <= num5 + Player.tileRangeY)
                        {
                            num1 = 6;
                            flag1 = true;
                        }
                        else if (Main.tileHammer[index3] && num7 <= num4 + Player.tileRangeX && num8 <= num4 + Player.tileRangeY)
                        {
                            num1 = 1;
                            flag1 = true;
                        }
                        else if (Main.tileAxe[index3] && num7 <= num3 + Player.tileRangeX && num8 <= num3 + Player.tileRangeY)
                        {
                            num1 = 2;
                            flag1 = true;
                        }
                        else if (num7 <= num2 + Player.tileRangeX)
                        {
                            if (num8 <= num2 + Player.tileRangeY)
                            {
                                num1 = 3;
                                flag1 = true;
                            }
                        }
                    }
                    else if (flag2)
                    {
                        if (this.wet)
                        {
                            num1 = 4;
                            flag1 = true;
                        }
                    }
                }
                catch
                {
                }
                if (!flag1 && this.wet)
                    num1 = 4;
                if (num1 == 0 || num1 == 4)
                {
                    float num9 = Math.Abs((float)((double)Main.mouseX + (double)Main.screenPosition.X - ((double)this.position.X + (double)(this.width / 2))));
                    float num10 = Math.Abs((float)((double)Main.mouseY + (double)Main.screenPosition.Y - ((double)this.position.Y + (double)(this.height / 2)))) * 1.3f;
                    if (Math.Sqrt((double)num9 * (double)num9 + (double)num10 * (double)num10) > 200.0)
                        num1 = 5;
                }
                for (int index3 = 0; index3 < 50; ++index3)
                {
                    int index4 = this.inventory[index3].itemId;
                    if (num1 == 0)
                    {
                        if (index4 == 8 || index4 == 427 || (index4 == 428 || index4 == 429) || (index4 == 430 || index4 == 431 || (index4 == 432 || index4 == 433)) || (index4 == 523 || index4 == 974 || (index4 == 1245 || index4 == 1333) || (index4 == 2274 || index4 == 3004 || (index4 == 3045 || index4 == 3114))))
                        {
                            if (this.nonTorch == -1)
                                this.nonTorch = this.selectedItem;
                            this.selectedItem = index3;
                            break;
                        }
                        if (index4 == 282 || index4 == 286 || (index4 == 3002 || index4 == 3112))
                        {
                            if (this.nonTorch == -1)
                                this.nonTorch = this.selectedItem;
                            this.selectedItem = index3;
                        }
                    }
                    else if (num1 == 1)
                    {
                        if (this.inventory[index3].hammer > 0)
                        {
                            if (this.nonTorch == -1)
                                this.nonTorch = this.selectedItem;
                            this.selectedItem = index3;
                            break;
                        }
                    }
                    else if (num1 == 2)
                    {
                        if (this.inventory[index3].axe > 0)
                        {
                            if (this.nonTorch == -1)
                                this.nonTorch = this.selectedItem;
                            this.selectedItem = index3;
                            break;
                        }
                    }
                    else if (num1 == 3)
                    {
                        if (this.inventory[index3].pick > 0)
                        {
                            if (this.nonTorch == -1)
                                this.nonTorch = this.selectedItem;
                            this.selectedItem = index3;
                            break;
                        }
                    }
                    else if (num1 == 4)
                    {
                        if (this.inventory[index3].itemId != 282 && this.inventory[index3].itemId != 286 && (this.inventory[index3].itemId != 3002 && this.inventory[index3].itemId != 3112) && this.inventory[index3].itemId != 930 && (index4 == 8 || index4 == 427 || (index4 == 428 || index4 == 429) || (index4 == 430 || index4 == 431 || (index4 == 432 || index4 == 433)) || (index4 == 974 || index4 == 1245 || (index4 == 2274 || index4 == 3004) || (index4 == 3045 || index4 == 3114))))
                        {
                            if (this.nonTorch == -1)
                                this.nonTorch = this.selectedItem;
                            if (this.inventory[this.selectedItem].createTile != 4)
                                this.selectedItem = index3;
                        }
                        else
                        {
                            if ((index4 == 282 || index4 == 286 || (index4 == 3002 || index4 == 3112)) && flag2)
                            {
                                if (this.nonTorch == -1)
                                    this.nonTorch = this.selectedItem;
                                this.selectedItem = index3;
                                break;
                            }
                            if (index4 == 930 && flag2)
                            {
                                bool flag3 = false;
                                for (int index5 = 57; index5 >= 0; --index5)
                                {
                                    if (this.inventory[index5].ammo == this.inventory[index3].useAmmo)
                                    {
                                        flag3 = true;
                                        break;
                                    }
                                }
                                if (flag3)
                                {
                                    if (this.nonTorch == -1)
                                        this.nonTorch = this.selectedItem;
                                    this.selectedItem = index3;
                                    break;
                                }
                            }
                            else if (index4 == 1333 || index4 == 523)
                            {
                                if (this.nonTorch == -1)
                                    this.nonTorch = this.selectedItem;
                                this.selectedItem = index3;
                                break;
                            }
                        }
                    }
                    else if (num1 == 5)
                    {
                        if (index4 == 8 || index4 == 427 || (index4 == 428 || index4 == 429) || (index4 == 430 || index4 == 431 || (index4 == 432 || index4 == 433)) || (index4 == 523 || index4 == 974 || (index4 == 1245 || index4 == 1333) || (index4 == 2274 || index4 == 3004 || (index4 == 3045 || index4 == 3114))))
                        {
                            if (this.nonTorch == -1)
                                this.nonTorch = this.selectedItem;
                            if (this.inventory[this.selectedItem].createTile != 4)
                                this.selectedItem = index3;
                        }
                        else if (index4 == 930)
                        {
                            bool flag3 = false;
                            for (int index5 = 57; index5 >= 0; --index5)
                            {
                                if (this.inventory[index5].ammo == this.inventory[index3].useAmmo)
                                {
                                    flag3 = true;
                                    break;
                                }
                            }
                            if (flag3)
                            {
                                if (this.nonTorch == -1)
                                    this.nonTorch = this.selectedItem;
                                this.selectedItem = index3;
                                break;
                            }
                        }
                        else if (index4 == 282 || index4 == 286 || (index4 == 3002 || index4 == 3112))
                        {
                            if (this.nonTorch == -1)
                                this.nonTorch = this.selectedItem;
                            this.selectedItem = index3;
                            break;
                        }
                    }
                    else if (num1 == 6)
                    {
                        int num9 = 929;
                        if ((int)Main.tile[index1, index2].frameX >= 144)
                            num9 = 1345;
                        else if ((int)Main.tile[index1, index2].frameX >= 72)
                            num9 = 1338;
                        if (index4 == num9)
                        {
                            if (this.nonTorch == -1)
                                this.nonTorch = this.selectedItem;
                            this.selectedItem = index3;
                            break;
                        }
                    }
                    else if (num1 == 7 && ItemID.Sets.ExtractinatorMode[index4] >= 0)
                    {
                        if (this.nonTorch == -1)
                            this.nonTorch = this.selectedItem;
                        this.selectedItem = index3;
                        break;
                    }
                }
            }
            else
            {
                if (this.nonTorch <= -1 || this.itemAnimation != 0)
                    return;
                this.selectedItem = this.nonTorch;
                this.nonTorch = -1;
            }
        }

        public void ResetEffects()
        {
            this.extraAccessorySlots = !this.extraAccessory || !Main.expertMode && !Main.gameMenu ? 0 : 1;
            this.arcticDivingGear = false;
            this.strongBees = false;
            this.armorPenetration = 0;
            this.shroomiteStealth = false;
            this.statDefense = 0;
            this.accWatch = 0;
            this.accCompass = 0;
            this.accDepthMeter = 0;
            this.accDivingHelm = false;
            this.lifeRegen = 0;
            this.manaCost = 1f;
            this.meleeSpeed = 1f;
            this.meleeDamage = 1f;
            this.rangedDamage = 1f;
            this.thrownDamage = 1f;
            this.magicDamage = 1f;
            this.minionDamage = 1f;
            this.meleeCrit = 4;
            this.rangedCrit = 4;
            this.magicCrit = 4;
            this.thrownCrit = 4;
            this.thrownVelocity = 1f;
            this.minionKB = 0.0f;
            this.moveSpeed = 1f;
            this.boneArmor = false;
            this.honey = false;
            this.frostArmor = false;
            this.rocketBoots = 0;
            this.fireWalk = false;
            this.noKnockback = false;
            this.jumpBoost = false;
            this.noFallDmg = false;
            this.accFlipper = false;
            this.spawnMax = false;
            this.spaceGun = false;
            this.killGuide = false;
            this.killClothier = false;
            this.lavaImmune = false;
            this.gills = false;
            this.slowFall = false;
            this.findTreasure = false;
            this.invis = false;
            this.nightVision = false;
            this.enemySpawns = false;
            this.thorns = 0.0f;
            this.aggro = 0;
            this.waterWalk = false;
            this.waterWalk2 = false;
            this.detectCreature = false;
            this.gravControl = false;
            this.bee = false;
            this.gravControl2 = false;
            this.statLifeMax2 = this.statLifeMax;
            this.statManaMax2 = this.statManaMax;
            this.ammoCost80 = false;
            this.ammoCost75 = false;
            this.thrownCost50 = false;
            this.thrownCost33 = false;
            this.manaRegenBuff = false;
            this.arrowDamage = 1f;
            this.bulletDamage = 1f;
            this.rocketDamage = 1f;
            this.yoraiz0rEye = 0;
            this.yoraiz0rDarkness = false;
            this.suspiciouslookingTentacle = false;
            this.crimsonHeart = false;
            this.lightOrb = false;
            this.blueFairy = false;
            this.redFairy = false;
            this.greenFairy = false;
            this.wisp = false;
            this.bunny = false;
            this.turtle = false;
            this.eater = false;
            this.skeletron = false;
            this.hornet = false;
            this.zephyrfish = false;
            this.tiki = false;
            this.lizard = false;
            this.parrot = false;
            this.sapling = false;
            this.cSapling = false;
            this.truffle = false;
            this.yoyoGlove = false;
            this.counterWeight = 0;
            this.stringColor = 0;
            this.yoyoString = false;
            this.shadowDodge = false;
            this.palladiumRegen = false;
            this.chaosState = false;
            this.onHitDodge = false;
            this.onHitRegen = false;
            this.onHitPetal = false;
            this.iceBarrier = false;
            this.maxMinions = 1;
            this.ammoBox = false;
            this.ammoPotion = false;
            this.penguin = false;
            this.sporeSac = false;
            this.shinyStone = false;
            this.magicLantern = false;
            this.rabid = false;
            this.sunflower = false;
            this.wellFed = false;
            this.inferno = false;
            this.manaMagnet = false;
            this.lifeMagnet = false;
            this.lifeForce = false;
            this.dangerSense = false;
            this.endurance = 0.0f;
            this.calmed = false;
            this.beetleOrbs = 0;
            this.beetleBuff = false;
            this.miniMinotaur = false;
            this.goldRing = false;
            this.solarShields = 0;
            this.GoingDownWithGrapple = false;
            this.fishingSkill = 0;
            this.cratePotion = false;
            this.sonarPotion = false;
            this.accTackleBox = false;
            this.accFishingLine = false;
            this.accFishFinder = false;
            this.accWeatherRadio = false;
            this.accThirdEye = false;
            this.accJarOfSouls = false;
            this.accCalendar = false;
            this.accStopwatch = false;
            this.accOreFinder = false;
            this.accCritterGuide = false;
            this.accDreamCatcher = false;
            this.wallSpeed = 1f;
            this.tileSpeed = 1f;
            this.autoPaint = false;
            this.babyFaceMonster = false;
            this.manaSick = false;
            this.puppy = false;
            this.grinch = false;
            this.blackCat = false;
            this.spider = false;
            this.squashling = false;
            this.magicCuffs = false;
            this.coldDash = false;
            this.sailDash = false;
            this.cordage = false;
            this.magicQuiver = false;
            this.magmaStone = false;
            this.lavaRose = false;
            this.eyeSpring = false;
            this.snowman = false;
            this.scope = false;
            this.panic = false;
            this.brainOfConfusion = false;
            this.dino = false;
            this.crystalLeaf = false;
            this.pygmy = false;
            this.raven = false;
            this.slime = false;
            this.hornetMinion = false;
            this.impMinion = false;
            this.twinsMinion = false;
            this.spiderMinion = false;
            this.pirateMinion = false;
            this.sharknadoMinion = false;
            this.stardustMinion = false;
            this.stardustGuardian = false;
            this.stardustDragon = false;
            this.UFOMinion = false;
            this.DeadlySphereMinion = false;
            this.chilled = false;
            this.dazed = false;
            this.frozen = false;
            this.stoned = false;
            this.webbed = false;
            this.ichor = false;
            this.manaRegenBonus = 0;
            this.manaRegenDelayBonus = 0;
            this.carpet = false;
            this.iceSkate = false;
            this.dash = 0;
            this.spikedBoots = 0;
            this.blackBelt = false;
            this.lavaMax = 0;
            this.archery = false;
            this.poisoned = false;
            this.venom = false;
            this.blind = false;
            this.blackout = false;
            this.onFire = false;
            this.dripping = false;
            this.drippingSlime = false;
            this.burned = false;
            this.suffocating = false;
            this.onFire2 = false;
            this.onFrostBurn = false;
            this.frostBurn = false;
            this.noItems = false;
            this.blockRange = 0;
            this.pickSpeed = 1f;
            this.wereWolf = false;
            this.rulerGrid = false;
            this.rulerLine = false;
            this.bleed = false;
            this.confused = false;
            this.wings = 0;
            this.wingsLogic = 0;
            this.wingTimeMax = 0;
            this.brokenArmor = false;
            this.silence = false;
            this.slow = false;
            this.gross = false;
            this.tongued = false;
            this.kbGlove = false;
            this.kbBuff = false;
            this.starCloak = false;
            this.longInvince = false;
            this.pStone = false;
            this.manaFlower = false;
            this.crimsonRegen = false;
            this.ghostHeal = false;
            this.ghostHurt = false;
            this.turtleArmor = false;
            this.turtleThorns = false;
            this.spiderArmor = false;
            this.loveStruck = false;
            this.stinky = false;
            this.dryadWard = false;
            this.resistCold = false;
            this.electrified = false;
            this.moonLeech = false;
            this.headcovered = false;
            this.vortexDebuff = false;
            this.setVortex = this.setNebula = this.setStardust = false;
            this.nebulaLevelDamage = this.nebulaLevelLife = this.nebulaLevelMana = 0;
            this.ignoreWater = false;
            this.meleeEnchant = (byte)0;
            this.discount = false;
            this.coins = false;
            this.doubleJumpSail = false;
            this.doubleJumpSandstorm = false;
            this.doubleJumpBlizzard = false;
            this.doubleJumpFart = false;
            this.doubleJumpUnicorn = false;
            this.paladinBuff = false;
            this.paladinGive = false;
            this.autoJump = false;
            this.justJumped = false;
            this.jumpSpeedBoost = 0.0f;
            this.extraFall = 0;
            if (this.phantasmTime > 0)
                --this.phantasmTime;
            for (int index = 0; index < this.npcTypeNoAggro.Length; ++index)
                this.npcTypeNoAggro[index] = false;
            for (int index = 0; index < this.ownedProjectileCounts.Length; ++index)
                this.ownedProjectileCounts[index] = 0;
            if (this.whoAmI == Main.myPlayer)
            {
                Player.tileRangeX = 5;
                Player.tileRangeY = 4;
            }
            this.mount.CheckMountBuff(this);
        }

        public void UpdateImmunity()
        {
            if (this.immune)
            {
                --this.immuneTime;
                if (this.immuneTime <= 0)
                    this.immune = false;
                this.immuneAlpha += this.immuneAlphaDirection * 50;
                if (this.immuneAlpha <= 50)
                {
                    this.immuneAlphaDirection = 1;
                }
                else
                {
                    if (this.immuneAlpha < 205)
                        return;
                    this.immuneAlphaDirection = -1;
                }
            }
            else
                this.immuneAlpha = 0;
        }

        public void UpdateLifeRegen()
        {
            bool flag = false;
            if (this.shinyStone && (double)Math.Abs(this.velocity.X) < 0.05 && ((double)Math.Abs(this.velocity.Y) < 0.05 && this.itemAnimation == 0))
                flag = true;
            if (this.poisoned)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 4;
            }
            if (this.venom)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 12;
            }
            if (this.onFire)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 8;
            }
            if (this.onFrostBurn)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 12;
            }
            if (this.onFire2)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 12;
            }
            if (this.burned)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 60;
                this.moveSpeed *= 0.5f;
            }
            if (this.suffocating)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 40;
            }
            if (this.electrified)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 8;
                if (this.controlLeft || this.controlRight)
                    this.lifeRegen -= 32;
            }
            if (this.tongued && Main.expertMode)
            {
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
                this.lifeRegenTime = 0;
                this.lifeRegen -= 100;
            }
            if (this.honey && this.lifeRegen < 0)
            {
                this.lifeRegen += 4;
                if (this.lifeRegen > 0)
                    this.lifeRegen = 0;
            }
            if (this.lifeRegen < 0 && this.nebulaLevelLife > 0)
                this.lifeRegen = 0;
            if (flag && this.lifeRegen < 0)
                this.lifeRegen /= 2;
            ++this.lifeRegenTime;
            if (this.crimsonRegen)
                ++this.lifeRegenTime;
            if (this.soulDrain > 0)
                this.lifeRegenTime += 2;
            if (flag)
            {
                if (this.lifeRegenTime > 90 && this.lifeRegenTime < 1800)
                    this.lifeRegenTime = 1800;
                this.lifeRegenTime += 4;
                this.lifeRegen += 4;
            }
            if (this.honey)
            {
                this.lifeRegenTime += 2;
                this.lifeRegen += 2;
            }
            if (this.soulDrain > 0)
            {
                int num = (5 + this.soulDrain) / 2;
                this.lifeRegenTime += num;
                this.lifeRegen += num;
            }
            if (this.whoAmI == Main.myPlayer && Main.campfire)
                ++this.lifeRegen;
            if (this.whoAmI == Main.myPlayer && Main.heartLantern)
                this.lifeRegen += 2;
            if (this.bleed)
                this.lifeRegenTime = 0;
            float num1 = 0.0f;
            if (this.lifeRegenTime >= 300)
                ++num1;
            if (this.lifeRegenTime >= 600)
                ++num1;
            if (this.lifeRegenTime >= 900)
                ++num1;
            if (this.lifeRegenTime >= 1200)
                ++num1;
            if (this.lifeRegenTime >= 1500)
                ++num1;
            if (this.lifeRegenTime >= 1800)
                ++num1;
            if (this.lifeRegenTime >= 2400)
                ++num1;
            if (this.lifeRegenTime >= 3000)
                ++num1;
            if (flag)
            {
                float num2 = (float)(this.lifeRegenTime - 3000) / 300f;
                if ((double)num2 > 0.0)
                {
                    if ((double)num2 > 30.0)
                        num2 = 30f;
                    num1 += num2;
                }
            }
            else if (this.lifeRegenTime >= 3600)
            {
                ++num1;
                this.lifeRegenTime = 3600;
            }
            float num3 = (double)this.velocity.X == 0.0 || this.grappling[0] > 0 ? num1 * 1.25f : num1 * 0.5f;
            if (this.crimsonRegen)
                num3 *= 1.5f;
            if (this.shinyStone)
                num3 *= 1.1f;
            if (this.whoAmI == Main.myPlayer && Main.campfire)
                num3 *= 1.1f;
            if (Main.expertMode && !this.wellFed)
            {
                if (this.shinyStone)
                    num3 *= 0.75f;
                else
                    num3 /= 2f;
            }
            if (this.rabid)
            {
                if (this.shinyStone)
                    num3 *= 0.75f;
                else
                    num3 /= 2f;
            }
            float num4 = (float)((double)this.statLifeMax2 / 400.0 * 0.850000023841858 + 0.150000005960464);
            this.lifeRegen += (int)Math.Round((double)(num3 * num4));
            this.lifeRegenCount += this.lifeRegen;
            if (this.palladiumRegen)
                this.lifeRegenCount += 6;
            if (flag && this.lifeRegen > 0 && this.statLife < this.statLifeMax2)
            {
                ++this.lifeRegenCount;
                if (flag && (Main.rand.Next(30000) < this.lifeRegenTime || Main.rand.Next(30) == 0))
                {
                    int index = Dust.NewDust(this.position, this.width, this.height, 55, 0.0f, 0.0f, 200, new Color(), 0.5f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].velocity *= 0.75f;
                    Main.dust[index].fadeIn = 1.3f;
                    Vector2 vector2_1 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
                    vector2_1.Normalize();
                    Vector2 vector2_2 = vector2_1 * ((float)Main.rand.Next(50, 100) * 0.04f);
                    Main.dust[index].velocity = vector2_2;
                    vector2_2.Normalize();
                    Vector2 vector2_3 = vector2_2 * 34f;
                    Main.dust[index].position = this.Center - vector2_3;
                }
            }
            while (this.lifeRegenCount >= 120)
            {
                this.lifeRegenCount -= 120;
                if (this.statLife < this.statLifeMax2)
                {
                    ++this.statLife;
                    if (this.crimsonRegen)
                    {
                        for (int index1 = 0; index1 < 10; ++index1)
                        {
                            int index2 = Dust.NewDust(this.position, this.width, this.height, 5, 0.0f, 0.0f, 175, new Color(), 1.75f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity *= 0.75f;
                            int num2 = Main.rand.Next(-40, 41);
                            int num5 = Main.rand.Next(-40, 41);
                            Main.dust[index2].position.X += (float)num2;
                            Main.dust[index2].position.Y += (float)num5;
                            Main.dust[index2].velocity.X = (float)-num2 * 0.075f;
                            Main.dust[index2].velocity.Y = (float)-num5 * 0.075f;
                        }
                    }
                }
                if (this.statLife > this.statLifeMax2)
                    this.statLife = this.statLifeMax2;
            }
            if (this.burned || this.suffocating || this.tongued && Main.expertMode)
            {
                while (this.lifeRegenCount <= -600)
                {
                    this.lifeRegenCount += 600;
                    this.statLife -= 5;
                    CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, string.Concat((object)5), false, true);
                    if (this.statLife <= 0 && this.whoAmI == Main.myPlayer)
                    {
                        if (this.suffocating)
                            this.KillMe(10.0, 0, false, " " + Lang.dt[2]);
                        else
                            this.KillMe(10.0, 0, false, " " + Lang.dt[1]);
                    }
                }
            }
            else
            {
                while (this.lifeRegenCount <= -120)
                {
                    if (this.lifeRegenCount <= -480)
                    {
                        this.lifeRegenCount += 480;
                        this.statLife -= 4;
                        CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, string.Concat((object)4), false, true);
                    }
                    else if (this.lifeRegenCount <= -360)
                    {
                        this.lifeRegenCount += 360;
                        this.statLife -= 3;
                        CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, string.Concat((object)3), false, true);
                    }
                    else if (this.lifeRegenCount <= -240)
                    {
                        this.lifeRegenCount += 240;
                        this.statLife -= 2;
                        CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, string.Concat((object)2), false, true);
                    }
                    else
                    {
                        this.lifeRegenCount += 120;
                        --this.statLife;
                        CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), CombatText.LifeRegen, string.Concat((object)1), false, true);
                    }
                    if (this.statLife <= 0 && this.whoAmI == Main.myPlayer)
                    {
                        if (this.poisoned || this.venom)
                            this.KillMe(10.0, 0, false, " " + Lang.dt[0]);
                        else if (this.electrified)
                            this.KillMe(10.0, 0, false, " " + Lang.dt[3]);
                        else
                            this.KillMe(10.0, 0, false, " " + Lang.dt[1]);
                    }
                }
            }
        }

        public void UpdateManaRegen()
        {
            if (this.nebulaLevelMana > 0)
            {
                int num = 6;
                this.nebulaManaCounter += this.nebulaLevelMana;
                if (this.nebulaManaCounter >= num)
                {
                    this.nebulaManaCounter -= num;
                    ++this.statMana;
                    if (this.statMana >= this.statManaMax2)
                        this.statMana = this.statManaMax2;
                }
            }
            else
                this.nebulaManaCounter = 0;
            if (this.manaRegenDelay > 0)
            {
                --this.manaRegenDelay;
                this.manaRegenDelay -= this.manaRegenDelayBonus;
                if ((double)this.velocity.X == 0.0 && (double)this.velocity.Y == 0.0 || (this.grappling[0] >= 0 || this.manaRegenBuff))
                    --this.manaRegenDelay;
            }
            if (this.manaRegenBuff && this.manaRegenDelay > 20)
                this.manaRegenDelay = 20;
            if (this.manaRegenDelay <= 0)
            {
                this.manaRegenDelay = 0;
                this.manaRegen = this.statManaMax2 / 7 + 1 + this.manaRegenBonus;
                if ((double)this.velocity.X == 0.0 && (double)this.velocity.Y == 0.0 || (this.grappling[0] >= 0 || this.manaRegenBuff))
                    this.manaRegen += this.statManaMax2 / 2;
                float num = (float)((double)this.statMana / (double)this.statManaMax2 * 0.800000011920929 + 0.200000002980232);
                if (this.manaRegenBuff)
                    num = 1f;
                this.manaRegen = (int)((double)this.manaRegen * (double)num * 1.15);
            }
            else
                this.manaRegen = 0;
            this.manaRegenCount += this.manaRegen;
            while (this.manaRegenCount >= 120)
            {
                bool flag = false;
                this.manaRegenCount -= 120;
                if (this.statMana < this.statManaMax2)
                {
                    ++this.statMana;
                    flag = true;
                }
                if (this.statMana >= this.statManaMax2)
                {
                    if (this.whoAmI == Main.myPlayer && flag)
                    {
                        Main.PlaySound(25, -1, -1, 1);
                        for (int index1 = 0; index1 < 5; ++index1)
                        {
                            int index2 = Dust.NewDust(this.position, this.width, this.height, 45, 0.0f, 0.0f, (int)byte.MaxValue, new Color(), (float)Main.rand.Next(20, 26) * 0.1f);
                            Main.dust[index2].noLight = true;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity *= 0.5f;
                        }
                    }
                    this.statMana = this.statManaMax2;
                }
            }
        }

        public void UpdateJumpHeight()
        {
            if (this.mount.Active)
            {
                Player.jumpHeight = this.mount.JumpHeight(this.velocity.X);
                Player.jumpSpeed = this.mount.JumpSpeed(this.velocity.X);
            }
            else
            {
                if (this.jumpBoost)
                {
                    Player.jumpHeight = 20;
                    Player.jumpSpeed = 6.51f;
                }
                if (this.wereWolf)
                {
                    Player.jumpHeight += 2;
                    Player.jumpSpeed += 0.2f;
                }
                Player.jumpSpeed += this.jumpSpeedBoost;
            }
            if (this.sticky)
            {
                Player.jumpHeight /= 10;
                Player.jumpSpeed /= 5f;
            }
            if (!this.dazed)
                return;
            Player.jumpHeight /= 5;
            Player.jumpSpeed /= 2f;
        }

        public void FindPulley()
        {
            if (!this.controlUp && !this.controlDown)
                return;
            int index1 = (int)((double)this.position.X + (double)(this.width / 2)) / 16;
            int index2 = (int)((double)this.position.Y - 8.0) / 16;
            if (Main.tile[index1, index2] == null || !Main.tile[index1, index2].active() || !Main.tileRope[(int)Main.tile[index1, index2].type])
                return;
            float num1 = this.position.Y;
            if (Main.tile[index1, index2 - 1] == null)
                Main.tile[index1, index2 - 1] = new Tile();
            if (Main.tile[index1, index2 + 1] == null)
                Main.tile[index1, index2 + 1] = new Tile();
            if ((!Main.tile[index1, index2 - 1].active() || !Main.tileRope[(int)Main.tile[index1, index2 - 1].type]) && (!Main.tile[index1, index2 + 1].active() || !Main.tileRope[(int)Main.tile[index1, index2 + 1].type]))
                num1 = (float)(index2 * 16 + 22);
            float x1 = (float)(index1 * 16 + 8 - this.width / 2 + 6 * this.direction);
            int num2 = index1 * 16 + 8 - this.width / 2 + 6;
            int num3 = index1 * 16 + 8 - this.width / 2;
            int num4 = index1 * 16 + 8 - this.width / 2 - 6;
            int num5 = 1;
            float num6 = Math.Abs(this.position.X - (float)num2);
            if ((double)Math.Abs(this.position.X - (float)num3) < (double)num6)
            {
                num5 = 2;
                num6 = Math.Abs(this.position.X - (float)num3);
            }
            if ((double)Math.Abs(this.position.X - (float)num4) < (double)num6)
            {
                num5 = 3;
                Math.Abs(this.position.X - (float)num4);
            }
            if (num5 == 1)
            {
                x1 = (float)num2;
                this.pulleyDir = (byte)2;
                this.direction = 1;
            }
            if (num5 == 2)
            {
                x1 = (float)num3;
                this.pulleyDir = (byte)1;
            }
            if (num5 == 3)
            {
                x1 = (float)num4;
                this.pulleyDir = (byte)2;
                this.direction = -1;
            }
            if (!Collision.SolidCollision(new Vector2(x1, this.position.Y), this.width, this.height))
            {
                if (this.whoAmI == Main.myPlayer)
                    Main.cameraX = Main.cameraX + this.position.X - x1;
                this.pulley = true;
                this.position.X = x1;
                this.gfxOffY = this.position.Y - num1;
                this.stepSpeed = 2.5f;
                this.position.Y = num1;
                this.velocity.X = 0.0f;
            }
            else
            {
                float x2 = (float)num2;
                this.pulleyDir = (byte)2;
                this.direction = 1;
                if (!Collision.SolidCollision(new Vector2(x2, this.position.Y), this.width, this.height))
                {
                    if (this.whoAmI == Main.myPlayer)
                        Main.cameraX = Main.cameraX + this.position.X - x2;
                    this.pulley = true;
                    this.position.X = x2;
                    this.gfxOffY = this.position.Y - num1;
                    this.stepSpeed = 2.5f;
                    this.position.Y = num1;
                    this.velocity.X = 0.0f;
                }
                else
                {
                    float x3 = (float)num4;
                    this.pulleyDir = (byte)2;
                    this.direction = -1;
                    if (Collision.SolidCollision(new Vector2(x3, this.position.Y), this.width, this.height))
                        return;
                    if (this.whoAmI == Main.myPlayer)
                        Main.cameraX = Main.cameraX + this.position.X - x3;
                    this.pulley = true;
                    this.position.X = x3;
                    this.gfxOffY = this.position.Y - num1;
                    this.stepSpeed = 2.5f;
                    this.position.Y = num1;
                    this.velocity.X = 0.0f;
                }
            }
        }

        public void HorizontalMovement()
        {
            if (this.chilled)
                this.accRunSpeed = this.maxRunSpeed;
            bool flag = (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange;
            if ((double)this.trackBoost != 0.0)
            {
                this.velocity.X += this.trackBoost;
                this.trackBoost = 0.0f;
                if ((double)this.velocity.X < 0.0)
                {
                    if ((double)this.velocity.X < -(double)this.maxRunSpeed)
                        this.velocity.X = -this.maxRunSpeed;
                }
                else if ((double)this.velocity.X > (double)this.maxRunSpeed)
                    this.velocity.X = this.maxRunSpeed;
            }
            if (this.controlLeft && (double)this.velocity.X > -(double)this.maxRunSpeed)
            {
                if (!this.mount.Active || !this.mount.Cart || (double)this.velocity.Y == 0.0)
                {
                    if ((double)this.velocity.X > (double)this.runSlowdown)
                        this.velocity.X -= this.runSlowdown;
                    this.velocity.X -= this.runAcceleration;
                }
                if (this.onWrongGround)
                {
                    if ((double)this.velocity.X < -(double)this.runSlowdown)
                        this.velocity.X += this.runSlowdown;
                    else
                        this.velocity.X = 0.0f;
                }
                if (this.mount.Active && this.mount.Cart && !this.onWrongGround)
                {
                    if ((double)this.velocity.X < 0.0 && flag)
                        this.direction = -1;
                    else if (this.itemAnimation <= 0 && (double)this.velocity.Y == 0.0)
                    {
                        Main.PlaySound(2, (int)this.position.X + this.width / 2, (int)this.position.Y + this.height / 2, 55);
                        DelegateMethods.Minecart.rotation = this.fullRotation;
                        DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
                        if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.66)
                        {
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.66f, this.width, this.height, 1);
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.33f, this.width, this.height, 1);
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
                        }
                        else if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.33)
                        {
                            if (Main.rand.Next(3) != 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.5f, this.width, this.height, 1);
                            if (Main.rand.Next(3) != 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
                        }
                        else
                            Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
                    }
                }
                else if (!this.sandStorm && (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
                    this.direction = -1;
            }
            else if (this.controlRight && (double)this.velocity.X < (double)this.maxRunSpeed)
            {
                if (!this.mount.Active || !this.mount.Cart || (double)this.velocity.Y == 0.0)
                {
                    if ((double)this.velocity.X < -(double)this.runSlowdown)
                        this.velocity.X += this.runSlowdown;
                    this.velocity.X += this.runAcceleration;
                }
                if (this.onWrongGround)
                {
                    if ((double)this.velocity.X > (double)this.runSlowdown)
                        this.velocity.X -= this.runSlowdown;
                    else
                        this.velocity.X = 0.0f;
                }
                if (this.mount.Active && this.mount.Cart && !this.onWrongGround)
                {
                    if ((double)this.velocity.X > 0.0 && flag)
                        this.direction = 1;
                    else if (this.itemAnimation <= 0 && (double)this.velocity.Y == 0.0)
                    {
                        Main.PlaySound(2, (int)this.position.X + this.width / 2, (int)this.position.Y + this.height / 2, 55);
                        DelegateMethods.Minecart.rotation = this.fullRotation;
                        DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
                        if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.66)
                        {
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.66f, this.width, this.height, 1);
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.33f, this.width, this.height, 1);
                            if (Main.rand.Next(2) == 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
                        }
                        else if ((double)Math.Abs(this.velocity.X) > (double)this.maxRunSpeed * 0.33)
                        {
                            if (Main.rand.Next(3) != 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position + this.velocity * 0.5f, this.width, this.height, 1);
                            if (Main.rand.Next(3) != 0)
                                Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
                        }
                        else
                            Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 1);
                    }
                }
                else if (!this.sandStorm && (this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
                    this.direction = 1;
            }
            else if (this.controlLeft && (double)this.velocity.X > -(double)this.accRunSpeed && this.dashDelay >= 0)
            {
                if (this.mount.Active && this.mount.Cart)
                {
                    if ((double)this.velocity.X < 0.0)
                        this.direction = -1;
                }
                else if ((this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
                    this.direction = -1;
                if ((double)this.velocity.Y == 0.0 || this.wingsLogic > 0 || this.mount.CanFly)
                {
                    if ((double)this.velocity.X > (double)this.runSlowdown)
                        this.velocity.X -= this.runSlowdown;
                    this.velocity.X -= this.runAcceleration * 0.2f;
                    if (this.wingsLogic > 0)
                        this.velocity.X -= this.runAcceleration * 0.2f;
                }
                if (this.onWrongGround)
                {
                    if ((double)this.velocity.X < (double)this.runSlowdown)
                        this.velocity.X += this.runSlowdown;
                    else
                        this.velocity.X = 0.0f;
                }
                if ((double)this.velocity.X < -((double)this.accRunSpeed + (double)this.maxRunSpeed) / 2.0 && (double)this.velocity.Y == 0.0 && !this.mount.Active)
                {
                    int num = 0;
                    if ((double)this.gravDir == -1.0)
                        num -= this.height;
                    if (this.runSoundDelay == 0 && (double)this.velocity.Y == 0.0)
                    {
                        Main.PlaySound(17, (int)this.position.X, (int)this.position.Y, 1);
                        this.runSoundDelay = 9;
                    }
                    if (this.wings == 3)
                    {
                        int index1 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, 186, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 50, new Color(), 1.5f);
                        Main.dust[index1].velocity *= 0.025f;
                        Main.dust[index1].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        int index2 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, 186, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 50, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 0.2f;
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                    }
                    else if (this.sailDash)
                    {
                        for (int index1 = 0; index1 < 4; ++index1)
                        {
                            int index2 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y), this.width + 8, this.height, 253, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 100, new Color(), 1.5f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity.X = Main.dust[index2].velocity.X * 0.2f;
                            Main.dust[index2].velocity.Y = Main.dust[index2].velocity.Y * 0.2f;
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                            Main.dust[index2].scale += (float)Main.rand.Next(-5, 3) * 0.1f;
                            Vector2 vector2 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
                            vector2.Normalize();
                            vector2 *= (float)Main.rand.Next(81) * 0.1f;
                        }
                    }
                    else if (this.coldDash)
                    {
                        for (int index1 = 0; index1 < 2; ++index1)
                        {
                            int index2 = index1 != 0 ? Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0.0f, 0.0f, 0, new Color(), 1.35f) : Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0.0f, 0.0f, 0, new Color(), 1.35f);
                            Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(20, 40) * 0.00999999977648258);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].noLight = true;
                            Main.dust[index2].velocity *= 1.0f / 1000.0f;
                            Main.dust[index2].velocity.Y -= 3.0f / 1000.0f;
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                        }
                    }
                    else
                    {
                        int index = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, 16, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 50, new Color(), 1.5f);
                        Main.dust[index].velocity.X = Main.dust[index].velocity.X * 0.2f;
                        Main.dust[index].velocity.Y = Main.dust[index].velocity.Y * 0.2f;
                        Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                    }
                }
            }
            else if (this.controlRight && (double)this.velocity.X < (double)this.accRunSpeed && this.dashDelay >= 0)
            {
                if (this.mount.Active && this.mount.Cart)
                {
                    if ((double)this.velocity.X > 0.0)
                        this.direction = -1;
                }
                else if ((this.itemAnimation == 0 || this.inventory[this.selectedItem].useTurn) && this.mount.AllowDirectionChange)
                    this.direction = 1;
                if ((double)this.velocity.Y == 0.0 || this.wingsLogic > 0 || this.mount.CanFly)
                {
                    if ((double)this.velocity.X < -(double)this.runSlowdown)
                        this.velocity.X += this.runSlowdown;
                    this.velocity.X += this.runAcceleration * 0.2f;
                    if (this.wingsLogic > 0)
                        this.velocity.X += this.runAcceleration * 0.2f;
                }
                if (this.onWrongGround)
                {
                    if ((double)this.velocity.X > (double)this.runSlowdown)
                        this.velocity.X -= this.runSlowdown;
                    else
                        this.velocity.X = 0.0f;
                }
                if ((double)this.velocity.X > ((double)this.accRunSpeed + (double)this.maxRunSpeed) / 2.0 && (double)this.velocity.Y == 0.0 && !this.mount.Active)
                {
                    int num = 0;
                    if ((double)this.gravDir == -1.0)
                        num -= this.height;
                    if (this.runSoundDelay == 0 && (double)this.velocity.Y == 0.0)
                    {
                        Main.PlaySound(17, (int)this.position.X, (int)this.position.Y, 1);
                        this.runSoundDelay = 9;
                    }
                    if (this.wings == 3)
                    {
                        int index1 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, 186, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 50, new Color(), 1.5f);
                        Main.dust[index1].velocity *= 0.025f;
                        Main.dust[index1].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        int index2 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, 186, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 50, new Color(), 1.5f);
                        Main.dust[index2].velocity *= 0.2f;
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                    }
                    else if (this.sailDash)
                    {
                        for (int index1 = 0; index1 < 4; ++index1)
                        {
                            int index2 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y), this.width + 8, this.height, 253, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 100, new Color(), 1.5f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity.X = Main.dust[index2].velocity.X * 0.2f;
                            Main.dust[index2].velocity.Y = Main.dust[index2].velocity.Y * 0.2f;
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                            Main.dust[index2].scale += (float)Main.rand.Next(-5, 3) * 0.1f;
                            Vector2 vector2 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
                            vector2.Normalize();
                            vector2 *= (float)Main.rand.Next(81) * 0.1f;
                        }
                    }
                    else if (this.coldDash)
                    {
                        for (int index1 = 0; index1 < 2; ++index1)
                        {
                            int index2 = index1 != 0 ? Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0.0f, 0.0f, 0, new Color(), 1.35f) : Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0.0f, 0.0f, 0, new Color(), 1.35f);
                            Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(20, 40) * 0.00999999977648258);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].noLight = true;
                            Main.dust[index2].velocity *= 1.0f / 1000.0f;
                            Main.dust[index2].velocity.Y -= 3.0f / 1000.0f;
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                        }
                    }
                    else
                    {
                        int index = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)this.height + (float)num), this.width + 8, 4, 16, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 50, new Color(), 1.5f);
                        Main.dust[index].velocity.X = Main.dust[index].velocity.X * 0.2f;
                        Main.dust[index].velocity.Y = Main.dust[index].velocity.Y * 0.2f;
                        Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                    }
                }
            }
            else if (this.mount.Active && this.mount.Cart && (double)Math.Abs(this.velocity.X) >= 1.0)
            {
                if (this.onWrongGround)
                {
                    if ((double)this.velocity.X > 0.0)
                    {
                        if ((double)this.velocity.X > (double)this.runSlowdown)
                            this.velocity.X -= this.runSlowdown;
                        else
                            this.velocity.X = 0.0f;
                    }
                    else if ((double)this.velocity.X < 0.0)
                    {
                        if ((double)this.velocity.X < -(double)this.runSlowdown)
                            this.velocity.X += this.runSlowdown;
                        else
                            this.velocity.X = 0.0f;
                    }
                }
                if ((double)this.velocity.X > (double)this.maxRunSpeed)
                    this.velocity.X = this.maxRunSpeed;
                if ((double)this.velocity.X < -(double)this.maxRunSpeed)
                    this.velocity.X = -this.maxRunSpeed;
            }
            else if ((double)this.velocity.Y == 0.0)
            {
                if ((double)this.velocity.X > (double)this.runSlowdown)
                    this.velocity.X -= this.runSlowdown;
                else if ((double)this.velocity.X < -(double)this.runSlowdown)
                    this.velocity.X += this.runSlowdown;
                else
                    this.velocity.X = 0.0f;
            }
            else if (!this.PortalPhysicsEnabled)
            {
                if ((double)this.velocity.X > (double)this.runSlowdown * 0.5)
                    this.velocity.X -= this.runSlowdown * 0.5f;
                else if ((double)this.velocity.X < -(double)this.runSlowdown * 0.5)
                    this.velocity.X += this.runSlowdown * 0.5f;
                else
                    this.velocity.X = 0.0f;
            }
            if (!this.mount.Active || this.mount.Type != 10 || (double)Math.Abs(this.velocity.X) <= (double)this.mount.DashSpeed - (double)this.mount.RunSpeed / 2.0)
                return;
            Microsoft.Xna.Framework.Rectangle rect1 = this.getRect();
            if (this.direction == 1)
                rect1.Offset(this.width - 1, 0);
            rect1.Width = 2;
            rect1.Inflate(6, 12);
            for (int number = 0; number < 200; ++number)
            {
                NPC npc = Main.npc[number];
                if (npc.active && !npc.dontTakeDamage && (!npc.friendly && npc.immune[this.whoAmI] == 0))
                {
                    Microsoft.Xna.Framework.Rectangle rect2 = npc.getRect();
                    if (rect1.Intersects(rect2) && (npc.noTileCollide || Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height)))
                    {
                        float number2 = 80f * this.minionDamage;
                        float num = 10f;
                        int hitDirection = this.direction;
                        if ((double)this.velocity.X < 0.0)
                            hitDirection = -1;
                        if ((double)this.velocity.X > 0.0)
                            hitDirection = 1;
                        if (this.whoAmI == Main.myPlayer)
                        {
                            npc.StrikeNPC((int)number2, num, hitDirection, false, false, false);
                            if (Main.netMode != 0)
                                NetMessage.SendData(28, -1, -1, "", number, number2, num, (float)hitDirection, 0, 0, 0);
                        }
                        npc.immune[this.whoAmI] = 30;
                        this.immune = true;
                        this.immuneTime = 6;
                        break;
                    }
                }
            }
        }

        public void JumpMovement()
        {
            if (this.mount.Active && this.mount.Type == 3 && ((int)this.wetSlime == 0 && (double)this.velocity.Y > 0.0))
            {
                Microsoft.Xna.Framework.Rectangle rect1 = this.getRect();
                rect1.Offset(0, this.height - 1);
                rect1.Height = 2;
                rect1.Inflate(12, 6);
                for (int number = 0; number < 200; ++number)
                {
                    NPC npc = Main.npc[number];
                    if (npc.active && !npc.dontTakeDamage && (!npc.friendly && npc.immune[this.whoAmI] == 0))
                    {
                        Microsoft.Xna.Framework.Rectangle rect2 = npc.getRect();
                        if (rect1.Intersects(rect2) && (npc.noTileCollide || Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height)))
                        {
                            float number2 = 40f * this.minionDamage;
                            float num = 5f;
                            int hitDirection = this.direction;
                            if ((double)this.velocity.X < 0.0)
                                hitDirection = -1;
                            if ((double)this.velocity.X > 0.0)
                                hitDirection = 1;
                            if (this.whoAmI == Main.myPlayer)
                            {
                                npc.StrikeNPC((int)number2, num, hitDirection, false, false, false);
                                if (Main.netMode != 0)
                                    NetMessage.SendData(28, -1, -1, "", number, number2, num, (float)hitDirection, 0, 0, 0);
                            }
                            npc.immune[this.whoAmI] = 10;
                            this.velocity.Y = -10f;
                            this.immune = true;
                            this.immuneTime = 6;
                            break;
                        }
                    }
                }
            }
            if (this.controlJump)
            {
                bool flag1 = false;
                if (this.mount.Active && this.mount.Type == 3 && (int)this.wetSlime > 0)
                    flag1 = true;
                if (this.jump > 0)
                {
                    if ((double)this.velocity.Y == 0.0)
                    {
                        this.jump = 0;
                    }
                    else
                    {
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        if (this.merman && (!this.mount.Active || !this.mount.Cart))
                        {
                            if (this.swimTime <= 10)
                                this.swimTime = 30;
                        }
                        else
                            --this.jump;
                    }
                }
                else if ((this.sliding || (double)this.velocity.Y == 0.0 || (flag1 || this.jumpAgainCloud) || (this.jumpAgainSandstorm || this.jumpAgainBlizzard || (this.jumpAgainFart || this.jumpAgainSail)) || (this.jumpAgainUnicorn || this.wet && this.accFlipper && (!this.mount.Active || !this.mount.Cart))) && (this.releaseJump || this.autoJump && ((double)this.velocity.Y == 0.0 || this.sliding)))
                {
                    if (this.sliding || (double)this.velocity.Y == 0.0)
                        this.justJumped = true;
                    bool flag2 = false;
                    if (this.wet && this.accFlipper)
                    {
                        if (this.swimTime == 0)
                            this.swimTime = 30;
                        flag2 = true;
                    }
                    bool flag3 = false;
                    bool flag4 = false;
                    bool flag5 = false;
                    bool flag6 = false;
                    bool flag7 = false;
                    if (!flag1)
                    {
                        if (this.jumpAgainUnicorn)
                        {
                            flag7 = true;
                            this.jumpAgainUnicorn = false;
                        }
                        else if (this.jumpAgainSandstorm)
                        {
                            flag3 = true;
                            this.jumpAgainSandstorm = false;
                        }
                        else if (this.jumpAgainBlizzard)
                        {
                            flag4 = true;
                            this.jumpAgainBlizzard = false;
                        }
                        else if (this.jumpAgainFart)
                        {
                            this.jumpAgainFart = false;
                            flag5 = true;
                        }
                        else if (this.jumpAgainSail)
                        {
                            this.jumpAgainSail = false;
                            flag6 = true;
                        }
                        else
                            this.jumpAgainCloud = false;
                    }
                    this.canRocket = false;
                    this.rocketRelease = false;
                    if (((double)this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) && this.doubleJumpCloud)
                        this.jumpAgainCloud = true;
                    if (((double)this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) && this.doubleJumpSandstorm)
                        this.jumpAgainSandstorm = true;
                    if (((double)this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) && this.doubleJumpBlizzard)
                        this.jumpAgainBlizzard = true;
                    if (((double)this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) && this.doubleJumpFart)
                        this.jumpAgainFart = true;
                    if (((double)this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) && this.doubleJumpSail)
                        this.jumpAgainSail = true;
                    if (((double)this.velocity.Y == 0.0 || this.sliding || this.autoJump && this.justJumped) && this.doubleJumpUnicorn)
                        this.jumpAgainUnicorn = true;
                    if ((double)this.velocity.Y == 0.0 || flag2 || (this.sliding || flag1))
                    {
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = Player.jumpHeight;
                        if (this.sliding)
                            this.velocity.X = (float)(3 * -this.slideDir);
                    }
                    else if (flag3)
                    {
                        this.dJumpEffectSandstorm = true;
                        int num1 = this.height;
                        double num2 = (double)this.gravDir;
                        Main.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = Player.jumpHeight * 3;
                    }
                    else if (flag4)
                    {
                        this.dJumpEffectBlizzard = true;
                        int num1 = this.height;
                        double num2 = (double)this.gravDir;
                        Main.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = (int)((double)Player.jumpHeight * 1.5);
                    }
                    else if (flag6)
                    {
                        this.dJumpEffectSail = true;
                        int num = this.height;
                        if ((double)this.gravDir == -1.0)
                            num = 0;
                        Main.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = (int)((double)Player.jumpHeight * 1.25);
                        for (int index1 = 0; index1 < 30; ++index1)
                        {
                            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num), this.width, 12, 253, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 100, new Color(), 1.5f);
                            if (index1 % 2 == 0)
                                Main.dust[index2].velocity.X += (float)Main.rand.Next(30, 71) * 0.1f;
                            else
                                Main.dust[index2].velocity.X -= (float)Main.rand.Next(30, 71) * 0.1f;
                            Main.dust[index2].velocity.Y += (float)Main.rand.Next(-10, 31) * 0.1f;
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].scale += (float)Main.rand.Next(-10, 41) * 0.01f;
                            Main.dust[index2].velocity *= Main.dust[index2].scale * 0.7f;
                            Vector2 vector2 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
                            vector2.Normalize();
                            vector2 *= (float)Main.rand.Next(81) * 0.1f;
                        }
                    }
                    else if (flag5)
                    {
                        this.dJumpEffectFart = true;
                        int num = this.height;
                        if ((double)this.gravDir == -1.0)
                            num = 0;
                        Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 16);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = Player.jumpHeight * 2;
                        for (int index1 = 0; index1 < 10; ++index1)
                        {
                            int index2 = Dust.NewDust(new Vector2(this.position.X - 34f, (float)((double)this.position.Y + (double)num - 16.0)), 102, 32, 188, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 100, new Color(), 1.5f);
                            Main.dust[index2].velocity.X = (float)((double)Main.dust[index2].velocity.X * 0.5 - (double)this.velocity.X * 0.100000001490116);
                            Main.dust[index2].velocity.Y = (float)((double)Main.dust[index2].velocity.Y * 0.5 - (double)this.velocity.Y * 0.300000011920929);
                        }
                        int index3 = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)(this.width / 2) - 16.0), (float)((double)this.position.Y + (double)num - 16.0)), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
                        Main.gore[index3].velocity.X = (float)((double)Main.gore[index3].velocity.X * 0.100000001490116 - (double)this.velocity.X * 0.100000001490116);
                        Main.gore[index3].velocity.Y = (float)((double)Main.gore[index3].velocity.Y * 0.100000001490116 - (double)this.velocity.Y * 0.0500000007450581);
                        int index4 = Gore.NewGore(new Vector2(this.position.X - 36f, (float)((double)this.position.Y + (double)num - 16.0)), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
                        Main.gore[index4].velocity.X = (float)((double)Main.gore[index4].velocity.X * 0.100000001490116 - (double)this.velocity.X * 0.100000001490116);
                        Main.gore[index4].velocity.Y = (float)((double)Main.gore[index4].velocity.Y * 0.100000001490116 - (double)this.velocity.Y * 0.0500000007450581);
                        int index5 = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)this.width + 4.0), (float)((double)this.position.Y + (double)num - 16.0)), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(435, 438), 1f);
                        Main.gore[index5].velocity.X = (float)((double)Main.gore[index5].velocity.X * 0.100000001490116 - (double)this.velocity.X * 0.100000001490116);
                        Main.gore[index5].velocity.Y = (float)((double)Main.gore[index5].velocity.Y * 0.100000001490116 - (double)this.velocity.Y * 0.0500000007450581);
                    }
                    else if (flag7)
                    {
                        this.dJumpEffectUnicorn = true;
                        int num1 = this.height;
                        double num2 = (double)this.gravDir;
                        Main.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = Player.jumpHeight * 2;
                        Vector2 center = this.Center;
                        Vector2 vector2_1 = new Vector2(50f, 20f);
                        float num3 = 6.283185f * Utils.NextFloat(Main.rand);
                        for (int index = 0; index < 5; ++index)
                        {
                            for (float num4 = 0.0f; (double)num4 < 14.0; ++num4)
                            {
                                Dust dust = Main.dust[Dust.NewDust(center, 0, 0, Utils.SelectRandom<int>(Main.rand, 176, 177, 179), 0.0f, 0.0f, 0, new Color(), 1f)];
                                Vector2 vector2_2 = Utils.RotatedBy(Vector2.UnitY, (double)num4 * 6.28318548202515 / 14.0 + (double)num3, new Vector2()) * (0.2f * (float)index);
                                dust.position = center + vector2_2 * vector2_1;
                                dust.velocity = vector2_2 + new Vector2(0.0f, this.gravDir * 4f);
                                dust.noGravity = true;
                                dust.scale = (float)(1.0 + (double)Utils.NextFloat(Main.rand) * 0.800000011920929);
                                dust.fadeIn = Utils.NextFloat(Main.rand) * 2f;
                                dust.shader = GameShaders.Armor.GetSecondaryShader(this.cMount, this);
                            }
                        }
                    }
                    else
                    {
                        this.dJumpEffectCloud = true;
                        int num = this.height;
                        if ((double)this.gravDir == -1.0)
                            num = 0;
                        Main.PlaySound(16, (int)this.position.X, (int)this.position.Y, 1);
                        this.velocity.Y = -Player.jumpSpeed * this.gravDir;
                        this.jump = (int)((double)Player.jumpHeight * 0.75);
                        for (int index1 = 0; index1 < 10; ++index1)
                        {
                            int index2 = Dust.NewDust(new Vector2(this.position.X - 34f, (float)((double)this.position.Y + (double)num - 16.0)), 102, 32, 16, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 100, new Color(), 1.5f);
                            Main.dust[index2].velocity.X = (float)((double)Main.dust[index2].velocity.X * 0.5 - (double)this.velocity.X * 0.100000001490116);
                            Main.dust[index2].velocity.Y = (float)((double)Main.dust[index2].velocity.Y * 0.5 - (double)this.velocity.Y * 0.300000011920929);
                        }
                        int index3 = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)(this.width / 2) - 16.0), (float)((double)this.position.Y + (double)num - 16.0)), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
                        Main.gore[index3].velocity.X = (float)((double)Main.gore[index3].velocity.X * 0.100000001490116 - (double)this.velocity.X * 0.100000001490116);
                        Main.gore[index3].velocity.Y = (float)((double)Main.gore[index3].velocity.Y * 0.100000001490116 - (double)this.velocity.Y * 0.0500000007450581);
                        int index4 = Gore.NewGore(new Vector2(this.position.X - 36f, (float)((double)this.position.Y + (double)num - 16.0)), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
                        Main.gore[index4].velocity.X = (float)((double)Main.gore[index4].velocity.X * 0.100000001490116 - (double)this.velocity.X * 0.100000001490116);
                        Main.gore[index4].velocity.Y = (float)((double)Main.gore[index4].velocity.Y * 0.100000001490116 - (double)this.velocity.Y * 0.0500000007450581);
                        int index5 = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)this.width + 4.0), (float)((double)this.position.Y + (double)num - 16.0)), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(11, 14), 1f);
                        Main.gore[index5].velocity.X = (float)((double)Main.gore[index5].velocity.X * 0.100000001490116 - (double)this.velocity.X * 0.100000001490116);
                        Main.gore[index5].velocity.Y = (float)((double)Main.gore[index5].velocity.Y * 0.100000001490116 - (double)this.velocity.Y * 0.0500000007450581);
                    }
                }
                this.releaseJump = false;
            }
            else
            {
                this.jump = 0;
                this.releaseJump = true;
                this.rocketRelease = true;
            }
        }

        public void DashMovement()
        {
            if (this.dash == 2 && this.eocDash > 0)
            {
                if (this.eocHit < 0)
                {
                    Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)((double)this.position.X + (double)this.velocity.X * 0.5 - 4.0), (int)((double)this.position.Y + (double)this.velocity.Y * 0.5 - 4.0), this.width + 8, this.height + 8);
                    for (int number = 0; number < 200; ++number)
                    {
                        if (Main.npc[number].active && !Main.npc[number].dontTakeDamage && !Main.npc[number].friendly)
                        {
                            NPC npc = Main.npc[number];
                            Microsoft.Xna.Framework.Rectangle rect = npc.getRect();
                            if (rectangle.Intersects(rect) && (npc.noTileCollide || Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height)))
                            {
                                float number2 = 30f * this.meleeDamage;
                                float num = 9f;
                                bool crit = false;
                                if (this.kbGlove)
                                    num *= 2f;
                                if (this.kbBuff)
                                    num *= 1.5f;
                                if (Main.rand.Next(100) < this.meleeCrit)
                                    crit = true;
                                int hitDirection = this.direction;
                                if ((double)this.velocity.X < 0.0)
                                    hitDirection = -1;
                                if ((double)this.velocity.X > 0.0)
                                    hitDirection = 1;
                                if (this.whoAmI == Main.myPlayer)
                                {
                                    npc.StrikeNPC((int)number2, num, hitDirection, crit, false, false);
                                    if (Main.netMode != 0)
                                        NetMessage.SendData(28, -1, -1, "", number, number2, num, (float)hitDirection, 0, 0, 0);
                                }
                                this.eocDash = 10;
                                this.dashDelay = 30;
                                this.velocity.X = (float)(-hitDirection * 9);
                                this.velocity.Y = -4f;
                                this.immune = true;
                                this.immuneTime = 4;
                                this.eocHit = number;
                            }
                        }
                    }
                }
                else if ((!this.controlLeft || (double)this.velocity.X >= 0.0) && (!this.controlRight || (double)this.velocity.X <= 0.0))
                    this.velocity.X *= 0.95f;
            }
            if (this.dash == 3 && this.dashDelay < 0 && this.whoAmI == Main.myPlayer)
            {
                Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)((double)this.position.X + (double)this.velocity.X * 0.5 - 4.0), (int)((double)this.position.Y + (double)this.velocity.Y * 0.5 - 4.0), this.width + 8, this.height + 8);
                for (int number = 0; number < 200; ++number)
                {
                    if (Main.npc[number].active && !Main.npc[number].dontTakeDamage && (!Main.npc[number].friendly && Main.npc[number].immune[this.whoAmI] <= 0))
                    {
                        NPC npc = Main.npc[number];
                        Microsoft.Xna.Framework.Rectangle rect = npc.getRect();
                        if (rectangle.Intersects(rect) && (npc.noTileCollide || Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height)))
                        {
                            float number2 = 150f * this.meleeDamage;
                            float num = 9f;
                            bool crit = false;
                            if (this.kbGlove)
                                num *= 2f;
                            if (this.kbBuff)
                                num *= 1.5f;
                            if (Main.rand.Next(100) < this.meleeCrit)
                                crit = true;
                            int hitDirection = this.direction;
                            if ((double)this.velocity.X < 0.0)
                                hitDirection = -1;
                            if ((double)this.velocity.X > 0.0)
                                hitDirection = 1;
                            if (this.whoAmI == Main.myPlayer)
                            {
                                npc.StrikeNPC((int)number2, num, hitDirection, crit, false, false);
                                if (Main.netMode != 0)
                                    NetMessage.SendData(28, -1, -1, "", number, number2, num, (float)hitDirection, 0, 0, 0);
                            }
                            npc.immune[this.whoAmI] = 6;
                            this.immune = true;
                            this.immuneTime = 4;
                        }
                    }
                }
            }
            if (this.dashDelay > 0)
            {
                if (this.eocDash > 0)
                    --this.eocDash;
                if (this.eocDash == 0)
                    this.eocHit = -1;
                --this.dashDelay;
            }
            else if (this.dashDelay < 0)
            {
                float num1 = 12f;
                float num2 = 0.992f;
                float num3 = Math.Max(this.accRunSpeed, this.maxRunSpeed);
                float num4 = 0.96f;
                int num5 = 20;
                if (this.dash == 1)
                {
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        int index2 = (double)this.velocity.Y != 0.0 ? Dust.NewDust(new Vector2(this.position.X, (float)((double)this.position.Y + (double)(this.height / 2) - 8.0)), this.width, 16, 31, 0.0f, 0.0f, 100, new Color(), 1.4f) : Dust.NewDust(new Vector2(this.position.X, (float)((double)this.position.Y + (double)this.height - 4.0)), this.width, 8, 31, 0.0f, 0.0f, 100, new Color(), 1.4f);
                        Main.dust[index2].velocity *= 0.1f;
                        Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                    }
                }
                else if (this.dash == 2)
                {
                    for (int index1 = 0; index1 < 0; ++index1)
                    {
                        int index2 = (double)this.velocity.Y != 0.0 ? Dust.NewDust(new Vector2(this.position.X, (float)((double)this.position.Y + (double)(this.height / 2) - 8.0)), this.width, 16, 31, 0.0f, 0.0f, 100, new Color(), 1.4f) : Dust.NewDust(new Vector2(this.position.X, (float)((double)this.position.Y + (double)this.height - 4.0)), this.width, 8, 31, 0.0f, 0.0f, 100, new Color(), 1.4f);
                        Main.dust[index2].velocity *= 0.1f;
                        Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                    }
                    num2 = 0.985f;
                    num4 = 0.94f;
                    num5 = 30;
                }
                else if (this.dash == 3)
                {
                    for (int index1 = 0; index1 < 4; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), this.width, this.height - 8, 6, 0.0f, 0.0f, 100, new Color(), 1.7f);
                        Main.dust[index2].velocity *= 0.1f;
                        Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                        Main.dust[index2].noGravity = true;
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].fadeIn = 0.5f;
                    }
                    num1 = 14f;
                    num2 = 0.985f;
                    num4 = 0.94f;
                    num5 = 20;
                }
                else if (this.dash == 4)
                {
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), this.width, this.height - 8, 229, 0.0f, 0.0f, 100, new Color(), 1.2f);
                        Main.dust[index2].velocity *= 0.1f;
                        Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        Main.dust[index2].noGravity = true;
                        if (Main.rand.Next(2) == 0)
                            Main.dust[index2].fadeIn = 0.3f;
                    }
                    num2 = 0.985f;
                    num4 = 0.94f;
                    num5 = 20;
                }
                if (this.dash <= 0)
                    return;
                this.vortexStealthActive = false;
                if ((double)this.velocity.X > (double)num1 || (double)this.velocity.X < -(double)num1)
                    this.velocity.X *= num2;
                else if ((double)this.velocity.X > (double)num3 || (double)this.velocity.X < -(double)num3)
                {
                    this.velocity.X *= num4;
                }
                else
                {
                    this.dashDelay = num5;
                    if ((double)this.velocity.X < 0.0)
                    {
                        this.velocity.X = -num3;
                    }
                    else
                    {
                        if ((double)this.velocity.X <= 0.0)
                            return;
                        this.velocity.X = num3;
                    }
                }
            }
            else
            {
                if (this.dash <= 0 || this.mount.Active)
                    return;
                if (this.dash == 1)
                {
                    int num = 0;
                    bool flag = false;
                    if (this.dashTime > 0)
                        --this.dashTime;
                    if (this.dashTime < 0)
                        ++this.dashTime;
                    if (this.controlRight && this.releaseRight)
                    {
                        if (this.dashTime > 0)
                        {
                            num = 1;
                            flag = true;
                            this.dashTime = 0;
                        }
                        else
                            this.dashTime = 15;
                    }
                    else if (this.controlLeft && this.releaseLeft)
                    {
                        if (this.dashTime < 0)
                        {
                            num = -1;
                            flag = true;
                            this.dashTime = 0;
                        }
                        else
                            this.dashTime = -15;
                    }
                    if (!flag)
                        return;
                    this.velocity.X = 16.9f * (float)num;
                    Point point1 = Utils.ToTileCoordinates(this.Center + new Vector2((float)(num * this.width / 2 + 2), (float)((double)this.gravDir * (double)-this.height / 2.0 + (double)this.gravDir * 2.0)));
                    Point point2 = Utils.ToTileCoordinates(this.Center + new Vector2((float)(num * this.width / 2 + 2), 0.0f));
                    if (WorldGen.SolidTile(point1.X, point1.Y) || WorldGen.SolidTile(point2.X, point2.Y))
                        this.velocity.X /= 2f;
                    this.dashDelay = -1;
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index2].position.X += (float)Main.rand.Next(-5, 6);
                        Main.dust[index2].position.Y += (float)Main.rand.Next(-5, 6);
                        Main.dust[index2].velocity *= 0.2f;
                        Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                    }
                    int index3 = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)(this.width / 2) - 24.0), (float)((double)this.position.Y + (double)(this.height / 2) - 34.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
                    Main.gore[index3].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index3].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index3].velocity *= 0.4f;
                    int index4 = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)(this.width / 2) - 24.0), (float)((double)this.position.Y + (double)(this.height / 2) - 14.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
                    Main.gore[index4].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index4].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
                    Main.gore[index4].velocity *= 0.4f;
                }
                else if (this.dash == 2)
                {
                    int num = 0;
                    bool flag = false;
                    if (this.dashTime > 0)
                        --this.dashTime;
                    if (this.dashTime < 0)
                        ++this.dashTime;
                    if (this.controlRight && this.releaseRight)
                    {
                        if (this.dashTime > 0)
                        {
                            num = 1;
                            flag = true;
                            this.dashTime = 0;
                        }
                        else
                            this.dashTime = 15;
                    }
                    else if (this.controlLeft && this.releaseLeft)
                    {
                        if (this.dashTime < 0)
                        {
                            num = -1;
                            flag = true;
                            this.dashTime = 0;
                        }
                        else
                            this.dashTime = -15;
                    }
                    if (!flag)
                        return;
                    this.velocity.X = 14.5f * (float)num;
                    Point point1 = Utils.ToTileCoordinates(this.Center + new Vector2((float)(num * this.width / 2 + 2), (float)((double)this.gravDir * (double)-this.height / 2.0 + (double)this.gravDir * 2.0)));
                    Point point2 = Utils.ToTileCoordinates(this.Center + new Vector2((float)(num * this.width / 2 + 2), 0.0f));
                    if (WorldGen.SolidTile(point1.X, point1.Y) || WorldGen.SolidTile(point2.X, point2.Y))
                        this.velocity.X /= 2f;
                    this.dashDelay = -1;
                    this.eocDash = 15;
                    for (int index1 = 0; index1 < 0; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index2].position.X += (float)Main.rand.Next(-5, 6);
                        Main.dust[index2].position.Y += (float)Main.rand.Next(-5, 6);
                        Main.dust[index2].velocity *= 0.2f;
                        Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cShield, this);
                    }
                }
                else if (this.dash == 3)
                {
                    int num = 0;
                    bool flag = false;
                    if (this.dashTime > 0)
                        --this.dashTime;
                    if (this.dashTime < 0)
                        ++this.dashTime;
                    if (this.controlRight && this.releaseRight)
                    {
                        if (this.dashTime > 0)
                        {
                            num = 1;
                            flag = true;
                            this.dashTime = 0;
                            this.ConsumeSolarFlare();
                            this.solarDashing = true;
                        }
                        else
                            this.dashTime = 15;
                    }
                    else if (this.controlLeft && this.releaseLeft)
                    {
                        if (this.dashTime < 0)
                        {
                            num = -1;
                            flag = true;
                            this.dashTime = 0;
                            this.ConsumeSolarFlare();
                            this.solarDashing = true;
                        }
                        else
                            this.dashTime = -15;
                    }
                    if (!flag)
                        return;
                    this.velocity.X = 21.9f * (float)num;
                    Point point1 = Utils.ToTileCoordinates(this.Center + new Vector2((float)(num * this.width / 2 + 2), (float)((double)this.gravDir * (double)-this.height / 2.0 + (double)this.gravDir * 2.0)));
                    Point point2 = Utils.ToTileCoordinates(this.Center + new Vector2((float)(num * this.width / 2 + 2), 0.0f));
                    if (WorldGen.SolidTile(point1.X, point1.Y) || WorldGen.SolidTile(point2.X, point2.Y))
                        this.velocity.X /= 2f;
                    this.dashDelay = -1;
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index2].position.X += (float)Main.rand.Next(-5, 6);
                        Main.dust[index2].position.Y += (float)Main.rand.Next(-5, 6);
                        Main.dust[index2].velocity *= 0.2f;
                        Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].fadeIn = 0.5f;
                    }
                }
                else
                {
                    if (this.dash != 4)
                        return;
                    int num = 0;
                    bool flag = false;
                    if (this.dashTime > 0)
                        --this.dashTime;
                    if (this.dashTime < 0)
                        ++this.dashTime;
                    if (this.controlRight && this.releaseRight)
                    {
                        if (this.dashTime > 0)
                        {
                            num = 1;
                            flag = true;
                            this.dashTime = 0;
                            this.ConsumeSolarFlare();
                            this.solarDashing = true;
                        }
                        else
                            this.dashTime = 15;
                    }
                    else if (this.controlLeft && this.releaseLeft)
                    {
                        if (this.dashTime < 0)
                        {
                            num = -1;
                            flag = true;
                            this.dashTime = 0;
                            this.ConsumeSolarFlare();
                            this.solarDashing = true;
                        }
                        else
                            this.dashTime = -15;
                    }
                    if (!flag)
                        return;
                    this.velocity.X = 21.9f * (float)num;
                    this.dashDelay = -1;
                    Point point1 = Utils.ToTileCoordinates(this.Center + new Vector2((float)(num * this.width / 2 + 2 * num), (float)((double)this.gravDir * (double)-this.height / 2.0 + (double)this.gravDir * 2.0)));
                    Point point2 = Utils.ToTileCoordinates(this.Center + new Vector2((float)(num * this.width / 2 + 2), 0.0f));
                    if (WorldGen.SolidTile(point1.X, point1.Y) || WorldGen.SolidTile(point2.X, point2.Y))
                        this.velocity.X /= 2f;
                    for (int index1 = 0; index1 < 20; ++index1)
                    {
                        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0.0f, 0.0f, 100, new Color(), 2f);
                        Main.dust[index2].position.X += (float)Main.rand.Next(-5, 6);
                        Main.dust[index2].position.Y += (float)Main.rand.Next(-5, 6);
                        Main.dust[index2].velocity *= 0.2f;
                        Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(20) * 0.00999999977648258);
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].fadeIn = 0.5f;
                    }
                }
            }
        }

        public void WallslideMovement()
        {
            this.sliding = false;
            if (this.slideDir == 0 || this.spikedBoots <= 0 || this.mount.Active || (!this.controlLeft || this.slideDir != -1) && (!this.controlRight || this.slideDir != 1))
                return;
            bool flag = false;
            float num1 = this.position.X;
            if (this.slideDir == 1)
                num1 += (float)this.width;
            float num2 = num1 + (float)this.slideDir;
            float num3 = (float)((double)this.position.Y + (double)this.height + 1.0);
            if ((double)this.gravDir < 0.0)
                num3 = this.position.Y - 1f;
            float num4 = num2 / 16f;
            float num5 = num3 / 16f;
            if (WorldGen.SolidTile((int)num4, (int)num5) && WorldGen.SolidTile((int)num4, (int)num5 - 1))
                flag = true;
            if (this.spikedBoots >= 2)
            {
                if (!flag || ((double)this.velocity.Y <= 0.0 || (double)this.gravDir != 1.0) && ((double)this.velocity.Y >= (double)this.gravity || (double)this.gravDir != -1.0))
                    return;
                float num6 = this.gravity;
                if (this.slowFall)
                    num6 = !this.controlUp ? this.gravity / 3f * this.gravDir : this.gravity / 10f * this.gravDir;
                this.fallStart = (int)((double)this.position.Y / 16.0);
                if (this.controlDown && (double)this.gravDir == 1.0 || this.controlUp && (double)this.gravDir == -1.0)
                {
                    this.velocity.Y = 4f * this.gravDir;
                    int index = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)((this.width / 2 - 4) * this.slideDir), (float)((double)this.position.Y + (double)(this.height / 2) + (double)(this.height / 2 - 4) * (double)this.gravDir)), 8, 8, 31, 0.0f, 0.0f, 0, new Color(), 1f);
                    if (this.slideDir < 0)
                        Main.dust[index].position.X -= 10f;
                    if ((double)this.gravDir < 0.0)
                        Main.dust[index].position.Y -= 12f;
                    Main.dust[index].velocity *= 0.1f;
                    Main.dust[index].scale *= 1.2f;
                    Main.dust[index].noGravity = true;
                    Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                }
                else if ((double)this.gravDir == -1.0)
                    this.velocity.Y = (float)(-(double)num6 + 9.99999974737875E-06) * this.gravDir;
                else
                    this.velocity.Y = (float)(-(double)num6 + 9.99999974737875E-06) * this.gravDir;
                this.sliding = true;
            }
            else
            {
                if ((!flag || (double)this.velocity.Y <= 0.5 || (double)this.gravDir != 1.0) && ((double)this.velocity.Y >= -0.5 || (double)this.gravDir != -1.0))
                    return;
                this.fallStart = (int)((double)this.position.Y / 16.0);
                if (this.controlDown)
                    this.velocity.Y = 4f * this.gravDir;
                else
                    this.velocity.Y = 0.5f * this.gravDir;
                this.sliding = true;
                int index = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)((this.width / 2 - 4) * this.slideDir), (float)((double)this.position.Y + (double)(this.height / 2) + (double)(this.height / 2 - 4) * (double)this.gravDir)), 8, 8, 31, 0.0f, 0.0f, 0, new Color(), 1f);
                if (this.slideDir < 0)
                    Main.dust[index].position.X -= 10f;
                if ((double)this.gravDir < 0.0)
                    Main.dust[index].position.Y -= 12f;
                Main.dust[index].velocity *= 0.1f;
                Main.dust[index].scale *= 1.2f;
                Main.dust[index].noGravity = true;
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
            }
        }

        public void CarpetMovement()
        {
            bool flag = false;
            if (this.grappling[0] == -1 && this.carpet && (!this.jumpAgainCloud && !this.jumpAgainSandstorm) && (!this.jumpAgainBlizzard && !this.jumpAgainFart && (!this.jumpAgainSail && !this.jumpAgainUnicorn)) && (this.jump == 0 && (double)this.velocity.Y != 0.0 && (this.rocketTime == 0 && (double)this.wingTime == 0.0) && !this.mount.Active))
            {
                if (this.controlJump && this.canCarpet)
                {
                    this.canCarpet = false;
                    this.carpetTime = 300;
                }
                if (this.carpetTime > 0 && this.controlJump)
                {
                    this.fallStart = (int)((double)this.position.Y / 16.0);
                    flag = true;
                    --this.carpetTime;
                    float num = this.gravity;
                    if ((double)this.gravDir == 1.0 && (double)this.velocity.Y > -(double)num)
                        this.velocity.Y = (float)-((double)num + 9.99999997475243E-07);
                    else if ((double)this.gravDir == -1.0 && (double)this.velocity.Y < (double)num)
                        this.velocity.Y = num + 1E-06f;
                    this.carpetFrameCounter += 1f + Math.Abs(this.velocity.X * 0.5f);
                    if ((double)this.carpetFrameCounter > 8.0)
                    {
                        this.carpetFrameCounter = 0.0f;
                        ++this.carpetFrame;
                    }
                    if (this.carpetFrame < 0)
                        this.carpetFrame = 0;
                    if (this.carpetFrame > 5)
                        this.carpetFrame = 0;
                }
            }
            if (!flag)
                this.carpetFrame = -1;
            else
                this.slowFall = false;
        }

        public void DoubleJumpVisuals()
        {
            if (this.dJumpEffectCloud && this.doubleJumpCloud && !this.jumpAgainCloud && (this.jumpAgainSandstorm || !this.doubleJumpSandstorm) && ((double)this.gravDir == 1.0 && (double)this.velocity.Y < 0.0 || (double)this.gravDir == -1.0 && (double)this.velocity.Y > 0.0))
            {
                int num = this.height;
                if ((double)this.gravDir == -1.0)
                    num = -6;
                int index = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)num), this.width + 8, 4, 16, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 100, new Color(), 1.5f);
                Main.dust[index].velocity.X = (float)((double)Main.dust[index].velocity.X * 0.5 - (double)this.velocity.X * 0.100000001490116);
                Main.dust[index].velocity.Y = (float)((double)Main.dust[index].velocity.Y * 0.5 - (double)this.velocity.Y * 0.300000011920929);
            }
            if (this.dJumpEffectSandstorm && this.doubleJumpSandstorm && !this.jumpAgainSandstorm && ((double)this.gravDir == 1.0 && (double)this.velocity.Y < 0.0 || (double)this.gravDir == -1.0 && (double)this.velocity.Y > 0.0))
            {
                int num = this.height;
                if ((double)this.gravDir == -1.0)
                    num = -6;
                float Scale = (float)(((double)this.jump / 75.0 + 1.0) / 2.0);
                for (int index1 = 0; index1 < 3; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)(num / 2)), this.width, 32, 124, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 150, new Color(), 1f * Scale);
                    Main.dust[index2].velocity *= 0.5f * Scale;
                    Main.dust[index2].fadeIn = 1.5f * Scale;
                }
                this.sandStorm = true;
                if (this.miscCounter % 3 == 0)
                {
                    int index = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)(this.width / 2) - 18.0), this.position.Y + (float)(num / 2)), new Vector2(-this.velocity.X, -this.velocity.Y), Main.rand.Next(220, 223), Scale);
                    Main.gore[index].velocity = this.velocity * 0.3f * Scale;
                    Main.gore[index].alpha = 100;
                }
            }
            if (this.dJumpEffectFart && this.doubleJumpFart && !this.jumpAgainFart && ((double)this.gravDir == 1.0 && (double)this.velocity.Y < 0.0 || (double)this.gravDir == -1.0 && (double)this.velocity.Y > 0.0))
            {
                int num = this.height;
                if ((double)this.gravDir == -1.0)
                    num = -6;
                int index = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)num), this.width + 8, 4, 188, (float)(-(double)this.velocity.X * 0.5), this.velocity.Y * 0.5f, 100, new Color(), 1.5f);
                Main.dust[index].velocity.X = (float)((double)Main.dust[index].velocity.X * 0.5 - (double)this.velocity.X * 0.100000001490116);
                Main.dust[index].velocity.Y = (float)((double)Main.dust[index].velocity.Y * 0.5 - (double)this.velocity.Y * 0.300000011920929);
                Main.dust[index].velocity *= 0.5f;
            }
            if (this.dJumpEffectUnicorn && this.doubleJumpUnicorn && !this.jumpAgainUnicorn && ((double)this.gravDir == 1.0 && (double)this.velocity.Y < 0.0 || (double)this.gravDir == -1.0 && (double)this.velocity.Y > 0.0))
            {
                Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, 176, 177, 179), 0.0f, 0.0f, 0, new Color(), 1f)];
                dust.velocity = Vector2.Zero;
                dust.noGravity = true;
                dust.scale = (float)(0.5 + (double)Utils.NextFloat(Main.rand) * 0.800000011920929);
                dust.fadeIn = (float)(1.0 + (double)Utils.NextFloat(Main.rand) * 2.0);
                dust.shader = GameShaders.Armor.GetSecondaryShader(this.cMount, this);
            }
            if (this.dJumpEffectSail && this.doubleJumpSail && !this.jumpAgainSail && ((double)this.gravDir == 1.0 && (double)this.velocity.Y < 1.0 || (double)this.gravDir == -1.0 && (double)this.velocity.Y > 1.0))
            {
                int num1 = 1;
                if (this.jump > 0)
                    num1 = 2;
                int num2 = this.height - 6;
                if ((double)this.gravDir == -1.0)
                    num2 = 6;
                for (int index1 = 0; index1 < num1; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num2), this.width, 12, 253, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 100, new Color(), 1.5f);
                    Main.dust[index2].scale += (float)Main.rand.Next(-5, 3) * 0.1f;
                    if (this.jump <= 0)
                        Main.dust[index2].scale *= 0.8f;
                    else
                        Main.dust[index2].velocity -= this.velocity / 5f;
                    Main.dust[index2].noGravity = true;
                    Vector2 vector2 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
                    vector2.Normalize();
                    vector2 *= (float)Main.rand.Next(81) * 0.1f;
                }
            }
            if (!this.dJumpEffectBlizzard || !this.doubleJumpBlizzard || this.jumpAgainBlizzard || ((double)this.gravDir != 1.0 || (double)this.velocity.Y >= 0.0) && ((double)this.gravDir != -1.0 || (double)this.velocity.Y <= 0.0))
                return;
            int num3 = this.height - 6;
            if ((double)this.gravDir == -1.0)
                num3 = 6;
            for (int index1 = 0; index1 < 2; ++index1)
            {
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num3), this.width, 12, 76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, new Color(), 1f);
                Main.dust[index2].velocity *= 0.1f;
                if (index1 == 0)
                    Main.dust[index2].velocity += this.velocity * 0.03f;
                else
                    Main.dust[index2].velocity -= this.velocity * 0.03f;
                Main.dust[index2].noLight = true;
            }
            for (int index1 = 0; index1 < 3; ++index1)
            {
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num3), this.width, 12, 76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, new Color(), 1f);
                Main.dust[index2].fadeIn = 1.5f;
                Main.dust[index2].velocity *= 0.6f;
                Main.dust[index2].velocity += this.velocity * 0.8f;
                Main.dust[index2].noGravity = true;
                Main.dust[index2].noLight = true;
            }
            for (int index1 = 0; index1 < 3; ++index1)
            {
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)num3), this.width, 12, 76, this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 0, new Color(), 1f);
                Main.dust[index2].fadeIn = 1.5f;
                Main.dust[index2].velocity *= 0.6f;
                Main.dust[index2].velocity -= this.velocity * 0.8f;
                Main.dust[index2].noGravity = true;
                Main.dust[index2].noLight = true;
            }
        }

        public void WingMovement()
        {
            if (this.wingsLogic == 4 && this.controlUp)
            {
                this.velocity.Y -= 0.2f * this.gravDir;
                if ((double)this.gravDir == 1.0)
                {
                    if ((double)this.velocity.Y > 0.0)
                        --this.velocity.Y;
                    else if ((double)this.velocity.Y > -(double)Player.jumpSpeed)
                        this.velocity.Y -= 0.2f;
                    if ((double)this.velocity.Y < -(double)Player.jumpSpeed * 3.0)
                        this.velocity.Y = (float)(-(double)Player.jumpSpeed * 3.0);
                }
                else
                {
                    if ((double)this.velocity.Y < 0.0)
                        ++this.velocity.Y;
                    else if ((double)this.velocity.Y < (double)Player.jumpSpeed)
                        this.velocity.Y += 0.2f;
                    if ((double)this.velocity.Y > (double)Player.jumpSpeed * 3.0)
                        this.velocity.Y = Player.jumpSpeed * 3f;
                }
                this.wingTime -= 2f;
            }
            else
            {
                float num1 = 0.1f;
                float num2 = 0.5f;
                float num3 = 1.5f;
                float num4 = 0.5f;
                float num5 = 0.1f;
                if (this.wingsLogic == 26)
                {
                    num2 = 0.75f;
                    num5 = 0.15f;
                    num4 = 1f;
                    num3 = 2.5f;
                    num1 = 0.125f;
                }
                if (this.wingsLogic == 29)
                {
                    num2 = 0.85f;
                    num5 = 0.15f;
                    num4 = 1f;
                    num3 = 3f;
                    num1 = 0.135f;
                }
                if (this.wingsLogic == 30)
                {
                    num4 = 1f;
                    num3 = 2f;
                    num1 = 0.15f;
                }
                if (this.wingsLogic == 31)
                {
                    num2 = 0.75f;
                    num5 = 0.15f;
                    num4 = 1f;
                    num3 = 3f;
                    num1 = 0.125f;
                }
                if (this.wingsLogic == 32)
                {
                    num4 = 0.6f;
                    num3 = 1.5f;
                    num1 = 0.125f;
                }
                this.velocity.Y -= num1 * this.gravDir;
                if ((double)this.gravDir == 1.0)
                {
                    if ((double)this.velocity.Y > 0.0)
                        this.velocity.Y -= num2;
                    else if ((double)this.velocity.Y > -(double)Player.jumpSpeed * (double)num4)
                        this.velocity.Y -= num5;
                    if ((double)this.velocity.Y < -(double)Player.jumpSpeed * (double)num3)
                        this.velocity.Y = -Player.jumpSpeed * num3;
                }
                else
                {
                    if ((double)this.velocity.Y < 0.0)
                        this.velocity.Y += num2;
                    else if ((double)this.velocity.Y < (double)Player.jumpSpeed * (double)num4)
                        this.velocity.Y += num5;
                    if ((double)this.velocity.Y > (double)Player.jumpSpeed * (double)num3)
                        this.velocity.Y = Player.jumpSpeed * num3;
                }
                if ((this.wingsLogic == 22 || this.wingsLogic == 28 || (this.wingsLogic == 30 || this.wingsLogic == 32)) && (this.controlDown && !this.controlLeft && !this.controlRight))
                    this.wingTime -= 0.5f;
                else
                    --this.wingTime;
            }
        }

        public void MoonLeechRope()
        {
            int index1 = -1;
            for (int index2 = 0; index2 < 1000; ++index2)
            {
                if (Main.projectile[index2].active && Main.projectile[index2].type == 456 && (double)Main.projectile[index2].ai[1] == (double)this.whoAmI)
                {
                    index1 = index2;
                    break;
                }
            }
            if (index1 == -1 || (double)Main.projectile[index1].ai[0] < 0.0)
                return;
            Projectile projectile = Main.projectile[index1];
            Vector2 vector2_1 = new Vector2(0.0f, 216f);
            Vector2 vector2_2 = Main.npc[(int)Math.Abs(projectile.ai[0]) - 1].Center - this.Center + vector2_1;
            if ((double)vector2_2.Length() <= 200.0)
                return;
            Vector2 vector2_3 = Vector2.Normalize(vector2_2);
            Player player = this;
            Vector2 vector2_4 = player.position + vector2_3 * (vector2_2.Length() - 200f);
            player.position = vector2_4;
        }

        public void WOFTongue()
        {
            if (Main.wof < 0 || !Main.npc[Main.wof].active)
                return;
            float num1 = Main.npc[Main.wof].position.X + 40f;
            if (Main.npc[Main.wof].direction > 0)
                num1 -= 96f;
            if ((double)this.position.X + (double)this.width > (double)num1 && (double)this.position.X < (double)num1 + 140.0 && this.gross)
            {
                this.noKnockback = false;
                this.Hurt(50, Main.npc[Main.wof].direction, false, false, " was slain...", false);
            }
            if (!this.gross && (double)this.position.Y > (double)((Main.maxTilesY - 250) * 16) && ((double)this.position.X > (double)num1 - 1920.0 && (double)this.position.X < (double)num1 + 1920.0))
            {
                this.AddBuff(37, 10, true);
                Main.PlaySound(4, (int)Main.npc[Main.wof].position.X, (int)Main.npc[Main.wof].position.Y, 10);
            }
            if (this.gross)
            {
                if ((double)this.position.Y < (double)((Main.maxTilesY - 200) * 16))
                    this.AddBuff(38, 10, true);
                if (Main.npc[Main.wof].direction < 0)
                {
                    if ((double)this.position.X + (double)(this.width / 2) > (double)Main.npc[Main.wof].position.X + (double)(Main.npc[Main.wof].width / 2) + 40.0)
                        this.AddBuff(38, 10, true);
                }
                else if ((double)this.position.X + (double)(this.width / 2) < (double)Main.npc[Main.wof].position.X + (double)(Main.npc[Main.wof].width / 2) - 40.0)
                    this.AddBuff(38, 10, true);
            }
            if (!this.tongued)
                return;
            this.controlHook = false;
            this.controlUseItem = false;
            for (int index = 0; index < 1000; ++index)
            {
                if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer && Main.projectile[index].aiStyle == 7)
                    Main.projectile[index].Kill();
            }
            Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
            float num2 = Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2) - vector2.X;
            float num3 = Main.npc[Main.wof].position.Y + (float)(Main.npc[Main.wof].height / 2) - vector2.Y;
            if (Math.Sqrt((double)num2 * (double)num2 + (double)num3 * (double)num3) > 3000.0)
            {
                this.KillMe(1000.0, 0, false, " tried to escape.");
            }
            else
            {
                if ((double)Main.npc[Main.wof].position.X >= 608.0 && (double)Main.npc[Main.wof].position.X <= (double)((Main.maxTilesX - 38) * 16))
                    return;
                this.KillMe(1000.0, 0, false, " was licked.");
            }
        }

        public void StatusPlayer(NPC npc)
        {
            if (Main.expertMode && (npc.type == 266 && Main.rand.Next(3) == 0 || npc.type == 267))
            {
                int num1 = Main.rand.Next(9);
                switch (num1)
                {
                    case 2:
                    case 4:
                        num1 = Main.rand.Next(9);
                        break;
                }
                float num2 = (float)Main.rand.Next(75, 150) * 0.01f;
                if (num1 == 0)
                    this.AddBuff(20, (int)(60.0 * (double)num2 * 3.5), true);
                else if (num1 == 1)
                    this.AddBuff(22, (int)(60.0 * (double)num2 * 2.0), true);
                else if (num1 == 2)
                    this.AddBuff(23, (int)(60.0 * (double)num2 * 0.5), true);
                else if (num1 == 3)
                    this.AddBuff(30, (int)(60.0 * (double)num2 * 5.0), true);
                else if (num1 == 4)
                    this.AddBuff(31, (int)(60.0 * (double)num2 * 1.0), true);
                else if (num1 == 5)
                    this.AddBuff(32, (int)(60.0 * (double)num2 * 3.5), true);
                else if (num1 == 6)
                    this.AddBuff(33, (int)(60.0 * (double)num2 * 7.5), true);
                else if (num1 == 7)
                    this.AddBuff(35, (int)(60.0 * (double)num2 * 1.0), true);
                else if (num1 == 8)
                    this.AddBuff(36, (int)(60.0 * (double)num2 * 6.5), true);
            }
            if (npc.type == 159 || npc.type == 158)
                this.AddBuff(30, Main.rand.Next(300, 600), true);
            if (npc.type == 525)
                this.AddBuff(39, 420, true);
            if (npc.type == 526)
                this.AddBuff(69, 420, true);
            if (npc.type == 527)
                this.AddBuff(31, 840, true);
            if (Main.expertMode && (npc.type == 49 || npc.type == 93 || (npc.type == 51 || npc.type == 152)) && Main.rand.Next(10) == 0)
                this.AddBuff(148, Main.rand.Next(1800, 5400), true);
            if (Main.expertMode && npc.type == 222)
                this.AddBuff(20, Main.rand.Next(60, 240), true);
            if (Main.expertMode && (npc.type == 210 || npc.type == 211))
                this.AddBuff(20, Main.rand.Next(60, 180), true);
            if (Main.expertMode && npc.type == 35)
                this.AddBuff(30, Main.rand.Next(180, 300), true);
            if (Main.expertMode && npc.type == 36 && Main.rand.Next(2) == 0)
                this.AddBuff(32, Main.rand.Next(30, 60), true);
            if (npc.type >= 269 && npc.type <= 272)
            {
                if (Main.rand.Next(3) == 0)
                    this.AddBuff(30, 600, true);
                else if (Main.rand.Next(3) == 0)
                    this.AddBuff(32, 300, true);
            }
            if (npc.type >= 273 && npc.type <= 276 && Main.rand.Next(2) == 0)
                this.AddBuff(36, 600, true);
            if (npc.type >= 277 && npc.type <= 280)
                this.AddBuff(24, 600, true);
            if (npc.type == 371)
                this.AddBuff(103, 60 * Main.rand.Next(3, 8), true);
            if (npc.type == 370 && Main.expertMode)
            {
                int type = Utils.SelectRandom<int>(Main.rand, 0, 148, 30);
                if (type != 0)
                    this.AddBuff(type, 60 * Main.rand.Next(3, 11), true);
            }
            if ((npc.type == 1 && npc.name == "Black Slime" || (npc.type == 81 || npc.type == 79)) && Main.rand.Next(4) == 0)
                this.AddBuff(22, 900, true);
            if ((npc.type == 23 || npc.type == 25) && Main.rand.Next(3) == 0)
                this.AddBuff(24, 420, true);
            if ((npc.type == 34 || npc.type == 83 || npc.type == 84) && Main.rand.Next(3) == 0)
                this.AddBuff(23, 240, true);
            if ((npc.type == 104 || npc.type == 102) && Main.rand.Next(8) == 0)
                this.AddBuff(30, 2700, true);
            if (npc.type == 75 && Main.rand.Next(10) == 0)
                this.AddBuff(35, 420, true);
            if ((npc.type == 163 || npc.type == 238) && Main.rand.Next(10) == 0)
                this.AddBuff(70, 480, true);
            if ((npc.type == 79 || npc.type == 103) && Main.rand.Next(5) == 0)
                this.AddBuff(35, 420, true);
            if ((npc.type == 75 || npc.type == 78 || npc.type == 82) && Main.rand.Next(8) == 0)
                this.AddBuff(32, 900, true);
            if ((npc.type == 93 || npc.type == 109 || npc.type == 80) && Main.rand.Next(14) == 0)
                this.AddBuff(31, 300, true);
            if (npc.type >= 305 && npc.type <= 314 && Main.rand.Next(10) == 0)
                this.AddBuff(33, 3600, true);
            if (npc.type == 77 && Main.rand.Next(6) == 0)
                this.AddBuff(36, 7200, true);
            if (npc.type == 112 && Main.rand.Next(20) == 0)
                this.AddBuff(33, 18000, true);
            if (npc.type == 182 && Main.rand.Next(25) == 0)
                this.AddBuff(33, 7200, true);
            if (npc.type == 141 && Main.rand.Next(2) == 0)
                this.AddBuff(20, 600, true);
            if (npc.type == 147 && !this.frozen && Main.rand.Next(12) == 0)
                this.AddBuff(46, 600, true);
            if (npc.type == 150)
            {
                if (Main.rand.Next(2) == 0)
                    this.AddBuff(46, 900, true);
                if (!this.frozen && Main.rand.Next(35) == 0)
                    this.AddBuff(47, 60, true);
                else if (!this.frozen && Main.expertMode && Main.rand.Next(35) == 0)
                    this.AddBuff(47, 60, true);
            }
            if (npc.type != 184)
                return;
            this.AddBuff(46, 1200, true);
            if (!this.frozen && Main.rand.Next(15) == 0)
            {
                this.AddBuff(47, 60, true);
            }
            else
            {
                if (this.frozen || !Main.expertMode || Main.rand.Next(25) != 0)
                    return;
                this.AddBuff(47, 60, true);
            }
        }

        public void GrappleMovement()
        {
            if (this.grappling[0] < 0)
                return;
            if (Main.myPlayer == this.whoAmI && this.mount.Active)
                this.mount.Dismount(this);
            this.canCarpet = true;
            this.carpetFrame = -1;
            this.wingFrame = 1;
            if ((double)this.velocity.Y == 0.0 || this.wet && (double)this.velocity.Y > -0.02 && (double)this.velocity.Y < 0.02)
                this.wingFrame = 0;
            if (this.wings == 4)
                this.wingFrame = 3;
            this.wingTime = (float)this.wingTimeMax;
            this.rocketTime = this.rocketTimeMax;
            this.rocketDelay = 0;
            this.rocketFrame = false;
            this.canRocket = false;
            this.rocketRelease = false;
            this.fallStart = (int)((double)this.position.Y / 16.0);
            int index1 = -1;
            float num1 = 0.0f;
            float num2 = 0.0f;
            for (int index2 = 0; index2 < this.grapCount; ++index2)
            {
                Projectile projectile = Main.projectile[this.grappling[index2]];
                num1 += projectile.position.X + (float)(projectile.width / 2);
                num2 += projectile.position.Y + (float)(projectile.height / 2);
                if (projectile.type == 403)
                    index1 = index2;
                else if (projectile.type == 446)
                {
                    Vector2 vector2_1 = new Vector2((float)(Utils.ToInt(this.controlRight) - Utils.ToInt(this.controlLeft)), (float)(Utils.ToInt(this.controlDown) - Utils.ToInt(this.controlUp)));
                    if (vector2_1 != Vector2.Zero)
                        vector2_1.Normalize();
                    vector2_1 *= 100f;
                    Vector2 vector2_2 = Vector2.Normalize(this.Center - projectile.Center + vector2_1);
                    if (float.IsNaN(vector2_2.X) || float.IsNaN(vector2_2.Y))
                        vector2_2 = -Vector2.UnitY;
                    float num3 = 200f;
                    num1 += vector2_2.X * num3;
                    num2 += vector2_2.Y * num3;
                }
            }
            float num4 = num1 / (float)this.grapCount;
            float num5 = num2 / (float)this.grapCount;
            Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
            float num6 = num4 - vector2.X;
            float num7 = num5 - vector2.Y;
            float num8 = (float)Math.Sqrt((double)num6 * (double)num6 + (double)num7 * (double)num7);
            float num9 = 11f;
            if (Main.projectile[this.grappling[0]].type == 315)
                num9 = 16f;
            if (Main.projectile[this.grappling[0]].type >= 646 && Main.projectile[this.grappling[0]].type <= 649)
                num9 = 13f;
            float num10 = (double)num8 <= (double)num9 ? 1f : num9 / num8;
            float num11 = num6 * num10;
            float num12 = num7 * num10;
            if ((double)num12 > 0.0)
                this.GoingDownWithGrapple = true;
            this.velocity.X = num11;
            this.velocity.Y = num12;
            if (index1 != -1)
            {
                Projectile projectile = Main.projectile[this.grappling[index1]];
                if ((double)projectile.position.X < (double)this.position.X + (double)this.width && (double)projectile.position.X + (double)projectile.width >= (double)this.position.X && ((double)projectile.position.Y < (double)this.position.Y + (double)this.height && (double)projectile.position.Y + (double)projectile.height >= (double)this.position.Y))
                {
                    int tileX = (int)((double)projectile.position.X + (double)(projectile.width / 2)) / 16;
                    int tileY = (int)((double)projectile.position.Y + (double)(projectile.height / 2)) / 16;
                    this.velocity = Vector2.Zero;
                    if ((int)Main.tile[tileX, tileY].type == 314)
                    {
                        Vector2 Position;
                        Position.X = projectile.position.X + (float)(projectile.width / 2) - (float)(this.width / 2);
                        Position.Y = projectile.position.Y + (float)(projectile.height / 2) - (float)(this.height / 2);
                        this.grappling[0] = -1;
                        this.grapCount = 0;
                        for (int index2 = 0; index2 < 1000; ++index2)
                        {
                            if (Main.projectile[index2].active && Main.projectile[index2].owner == this.whoAmI && Main.projectile[index2].aiStyle == 7)
                                Main.projectile[index2].Kill();
                        }
                        int num3 = 13;
                        if (this.miscEquips[2].stack > 0 && this.miscEquips[2].mountType >= 0 && MountID.Sets.Cart[this.miscEquips[2].mountType] && (!this.miscEquips[2].expertOnly || Main.expertMode))
                            num3 = this.miscEquips[2].mountType;
                        int Height = this.height + Mount.GetHeightBoost(num3);
                        if (Minecart.GetOnTrack(tileX, tileY, ref Position, this.width, Height) && !Collision.SolidCollision(Position, this.width, Height - 20))
                        {
                            this.position = Position;
                            DelegateMethods.Minecart.rotation = this.fullRotation;
                            DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
                            this.mount.SetMount(num3, this, this.minecartLeft);
                            Minecart.WheelSparks(this.mount.MinecartDust, this.position, this.width, this.height, 25);
                        }
                    }
                }
            }
            if (this.itemAnimation == 0)
            {
                if ((double)this.velocity.X > 0.0)
                    this.ChangeDir(1);
                if ((double)this.velocity.X < 0.0)
                    this.ChangeDir(-1);
            }
            if (this.controlJump)
            {
                if (!this.releaseJump)
                    return;
                if (((double)this.velocity.Y == 0.0 || this.wet && (double)this.velocity.Y > -0.02 && (double)this.velocity.Y < 0.02) && !this.controlDown)
                {
                    this.velocity.Y = -Player.jumpSpeed;
                    this.jump = Player.jumpHeight / 2;
                    this.releaseJump = false;
                }
                else
                {
                    this.velocity.Y += 0.01f;
                    this.releaseJump = false;
                }
                if (this.doubleJumpCloud)
                    this.jumpAgainCloud = true;
                if (this.doubleJumpSandstorm)
                    this.jumpAgainSandstorm = true;
                if (this.doubleJumpBlizzard)
                    this.jumpAgainBlizzard = true;
                if (this.doubleJumpFart)
                    this.jumpAgainFart = true;
                if (this.doubleJumpSail)
                    this.jumpAgainSail = true;
                if (this.doubleJumpUnicorn)
                    this.jumpAgainUnicorn = true;
                this.grappling[0] = 0;
                this.grapCount = 0;
                for (int index2 = 0; index2 < 1000; ++index2)
                {
                    if (Main.projectile[index2].active && Main.projectile[index2].owner == this.whoAmI && Main.projectile[index2].aiStyle == 7)
                        Main.projectile[index2].Kill();
                }
            }
            else
                this.releaseJump = true;
        }

        public void StickyMovement()
        {
            bool flag = false;
            if (this.mount.Type == 6 && (double)Math.Abs(this.velocity.X) > 5.0)
                flag = true;
            if (this.mount.Type == 13 && (double)Math.Abs(this.velocity.X) > 5.0)
                flag = true;
            if (this.mount.Type == 11 && (double)Math.Abs(this.velocity.X) > 5.0)
                flag = true;
            Vector2 vector2_1 = new Vector2(this.position.X + (float)(this.width / 2) - (float)(this.width / 2 / 2), this.position.Y + (float)(this.height / 2) - (float)(this.height / 2 / 2));
            Vector2 vector2_2 = Collision.StickyTiles(this.position, this.velocity, this.width, this.height);
            if ((double)vector2_2.Y != -1.0 && (double)vector2_2.X != -1.0)
            {
                int i = (int)vector2_2.X;
                int j = (int)vector2_2.Y;
                int num = (int)Main.tile[i, j].type;
                if (this.whoAmI == Main.myPlayer && num == 51 && ((double)this.velocity.X != 0.0 || (double)this.velocity.Y != 0.0))
                {
                    ++this.stickyBreak;
                    if (this.stickyBreak > Main.rand.Next(20, 100) || flag)
                    {
                        this.stickyBreak = 0;
                        WorldGen.KillTile(i, j, false, false, false);
                        if (Main.netMode == 1 && !Main.tile[i, j].active() && Main.netMode == 1)
                            NetMessage.SendData(17, -1, -1, "", 0, (float)i, (float)j, 0.0f, 0, 0, 0);
                    }
                }
                if (flag)
                    return;
                this.fallStart = (int)((double)this.position.Y / 16.0);
                if (num != 229)
                    this.jump = 0;
                if ((double)this.velocity.X > 1.0)
                    this.velocity.X = 1f;
                if ((double)this.velocity.X < -1.0)
                    this.velocity.X = -1f;
                if ((double)this.velocity.Y > 1.0)
                    this.velocity.Y = 1f;
                if ((double)this.velocity.Y < -5.0)
                    this.velocity.Y = -5f;
                if ((double)this.velocity.X > 0.75 || (double)this.velocity.X < -0.75)
                    this.velocity.X *= 0.85f;
                else
                    this.velocity.X *= 0.6f;
                if ((double)this.velocity.Y < 0.0)
                    this.velocity.Y *= 0.96f;
                else
                    this.velocity.Y *= 0.3f;
                if (num != 229 || Main.rand.Next(5) != 0 || (double)this.velocity.Y <= 0.15 && (double)this.velocity.Y >= 0.0)
                    return;
                if ((double)(i * 16) < (double)this.position.X + (double)(this.width / 2))
                {
                    int index = Dust.NewDust(new Vector2(this.position.X - 4f, (float)(j * 16)), 4, 16, 153, 0.0f, 0.0f, 50, new Color(), 1f);
                    Main.dust[index].scale += (float)Main.rand.Next(0, 6) * 0.1f;
                    Main.dust[index].velocity *= 0.1f;
                    Main.dust[index].noGravity = true;
                }
                else
                {
                    int index = Dust.NewDust(new Vector2((float)((double)this.position.X + (double)this.width - 2.0), (float)(j * 16)), 4, 16, 153, 0.0f, 0.0f, 50, new Color(), 1f);
                    Main.dust[index].scale += (float)Main.rand.Next(0, 6) * 0.1f;
                    Main.dust[index].velocity *= 0.1f;
                    Main.dust[index].noGravity = true;
                }
                if (Main.tile[i, j + 1] != null && (int)Main.tile[i, j + 1].type == 229 && (double)this.position.Y + (double)this.height > (double)((j + 1) * 16))
                {
                    if ((double)(i * 16) < (double)this.position.X + (double)(this.width / 2))
                    {
                        int index = Dust.NewDust(new Vector2(this.position.X - 4f, (float)(j * 16 + 16)), 4, 16, 153, 0.0f, 0.0f, 50, new Color(), 1f);
                        Main.dust[index].scale += (float)Main.rand.Next(0, 6) * 0.1f;
                        Main.dust[index].velocity *= 0.1f;
                        Main.dust[index].noGravity = true;
                    }
                    else
                    {
                        int index = Dust.NewDust(new Vector2((float)((double)this.position.X + (double)this.width - 2.0), (float)(j * 16 + 16)), 4, 16, 153, 0.0f, 0.0f, 50, new Color(), 1f);
                        Main.dust[index].scale += (float)Main.rand.Next(0, 6) * 0.1f;
                        Main.dust[index].velocity *= 0.1f;
                        Main.dust[index].noGravity = true;
                    }
                }
                if (Main.tile[i, j + 2] == null || (int)Main.tile[i, j + 2].type != 229 || (double)this.position.Y + (double)this.height <= (double)((j + 2) * 16))
                    return;
                if ((double)(i * 16) < (double)this.position.X + (double)(this.width / 2))
                {
                    int index = Dust.NewDust(new Vector2(this.position.X - 4f, (float)(j * 16 + 32)), 4, 16, 153, 0.0f, 0.0f, 50, new Color(), 1f);
                    Main.dust[index].scale += (float)Main.rand.Next(0, 6) * 0.1f;
                    Main.dust[index].velocity *= 0.1f;
                    Main.dust[index].noGravity = true;
                }
                else
                {
                    int index = Dust.NewDust(new Vector2((float)((double)this.position.X + (double)this.width - 2.0), (float)(j * 16 + 32)), 4, 16, 153, 0.0f, 0.0f, 50, new Color(), 1f);
                    Main.dust[index].scale += (float)Main.rand.Next(0, 6) * 0.1f;
                    Main.dust[index].velocity *= 0.1f;
                    Main.dust[index].noGravity = true;
                }
            }
            else
                this.stickyBreak = 0;
        }

        public bool IsStackingItems()
        {
            for (int index = 0; index < this.inventoryChestStack.Length; ++index)
            {
                if (this.inventoryChestStack[index])
                {
                    if (this.inventory[index].itemId != 0 && this.inventory[index].stack != 0)
                        return true;
                    this.inventoryChestStack[index] = false;
                }
            }
            return false;
        }

        public void QuickStackAllChests()
        {
            if (this.IsStackingItems())
                return;
            if (Main.netMode == 1)
            {
                for (int number = 10; number < 50; ++number)
                {
                    if (this.inventory[number].itemId > 0 && this.inventory[number].stack > 0 && !this.inventory[number].favorited)
                    {
                        NetMessage.SendData(5, -1, -1, "", this.whoAmI, (float)number, (float)this.inventory[number].prefix, 0.0f, 0, 0, 0);
                        NetMessage.SendData(85, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        this.inventoryChestStack[number] = true;
                    }
                }
            }
            else
            {
                bool flag = false;
                for (int index = 10; index < 50; ++index)
                {
                    if (this.inventory[index].itemId > 0 && this.inventory[index].stack > 0 && !this.inventory[index].favorited)
                    {
                        int num1 = this.inventory[index].itemId;
                        int num2 = this.inventory[index].stack;
                        this.inventory[index] = Chest.PutItemInNearbyChest(this.inventory[index], this.Center);
                        if (this.inventory[index].itemId != num1 || this.inventory[index].stack != num2)
                            flag = true;
                    }
                }
                if (!flag)
                    return;
                Main.PlaySound(7, -1, -1, 1);
            }
        }

        public void CheckDrowning()
        {
            bool flag = Collision.DrownCollision(this.position, this.width, this.height, this.gravDir);
            if (this.armor[0].itemId == 250)
                flag = true;
            if (this.inventory[this.selectedItem].itemId == 186)
            {
                try
                {
                    int index1 = (int)(((double)this.position.X + (double)(this.width / 2) + (double)(6 * this.direction)) / 16.0);
                    int num = 0;
                    if ((double)this.gravDir == -1.0)
                        num = this.height;
                    int index2 = (int)(((double)this.position.Y + (double)num - 44.0 * (double)this.gravDir) / 16.0);
                    if ((int)Main.tile[index1, index2].liquid < 128)
                    {
                        if (Main.tile[index1, index2] == null)
                            Main.tile[index1, index2] = new Tile();
                        if (Main.tile[index1, index2].active() && Main.tileSolid[(int)Main.tile[index1, index2].type])
                        {
                            if (!Main.tileSolidTop[(int)Main.tile[index1, index2].type])
                                goto label_13;
                        }
                        flag = false;
                    }
                }
                catch
                {
                }
            }
        label_13:
            if (this.gills)
                flag = false;
            if (Main.myPlayer == this.whoAmI)
            {
                if (this.merman)
                    flag = false;
                if (flag)
                {
                    ++this.breathCD;
                    int num = 7;
                    if (this.inventory[this.selectedItem].itemId == 186)
                        num *= 2;
                    if (this.accDivingHelm)
                        num *= 4;
                    if (this.breathCD >= num)
                    {
                        this.breathCD = 0;
                        --this.breath;
                        if (this.breath == 0)
                            Main.PlaySound(23, -1, -1, 1);
                        if (this.breath <= 0)
                        {
                            this.lifeRegenTime = 0;
                            this.breath = 0;
                            this.statLife -= 2;
                            if (this.statLife <= 0)
                            {
                                this.statLife = 0;
                                this.KillMe(10.0, 0, false, Lang.deathMsg(-1, -1, -1, 1));
                            }
                        }
                    }
                }
                else
                {
                    this.breath += 3;
                    if (this.breath > this.breathMax)
                        this.breath = this.breathMax;
                    this.breathCD = 0;
                }
            }
            if (!flag || Main.rand.Next(20) != 0 || (this.lavaWet || this.honeyWet))
                return;
            int num1 = 0;
            if ((double)this.gravDir == -1.0)
                num1 += this.height - 12;
            if (this.inventory[this.selectedItem].itemId == 186)
                Dust.NewDust(new Vector2((float)((double)this.position.X + (double)(10 * this.direction) + 4.0), (float)((double)this.position.Y + (double)num1 - 54.0 * (double)this.gravDir)), this.width - 8, 8, 34, 0.0f, 0.0f, 0, new Color(), 1.2f);
            else
                Dust.NewDust(new Vector2(this.position.X + (float)(12 * this.direction), (float)((double)this.position.Y + (double)num1 + 4.0 * (double)this.gravDir)), this.width - 8, 8, 34, 0.0f, 0.0f, 0, new Color(), 1.2f);
        }

        public void CheckIceBreak()
        {
            if ((double)this.velocity.Y <= 7.0)
                return;
            Vector2 vector2 = this.position + this.velocity;
            int num1 = (int)((double)vector2.X / 16.0);
            int num2 = (int)(((double)vector2.X + (double)this.width) / 16.0);
            int num3 = (int)(((double)this.position.Y + (double)this.height + 1.0) / 16.0);
            for (int i = num1; i <= num2; ++i)
            {
                for (int j = num3; j <= num3 + 1; ++j)
                {
                    if (Main.tile[i, j].nactive() && (int)Main.tile[i, j].type == 162 && !WorldGen.SolidTile(i, j - 1))
                    {
                        WorldGen.KillTile(i, j, false, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(17, -1, -1, "", 0, (float)i, (float)j, 0.0f, 0, 0, 0);
                    }
                }
            }
        }

        public void SlopeDownMovement()
        {
            this.sloping = false;
            float num = this.velocity.Y;
            Vector4 vector4 = Collision.WalkDownSlope(this.position, this.velocity, this.width, this.height, this.gravity * this.gravDir);
            this.position.X = vector4.X;
            this.position.Y = vector4.Y;
            this.velocity.X = vector4.Z;
            this.velocity.Y = vector4.W;
            if ((double)this.velocity.Y == (double)num)
                return;
            this.sloping = true;
        }

        public void HoneyCollision(bool fallThrough, bool ignorePlats)
        {
            int Height = !this.onTrack ? this.height : this.height - 20;
            Vector2 vector2_1 = this.velocity;
            this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, Height, fallThrough, ignorePlats, (int)this.gravDir);
            Vector2 vector2_2 = this.velocity * 0.25f;
            if ((double)this.velocity.X != (double)vector2_1.X)
                vector2_2.X = this.velocity.X;
            if ((double)this.velocity.Y != (double)vector2_1.Y)
                vector2_2.Y = this.velocity.Y;
            Player player = this;
            Vector2 vector2_3 = player.position + vector2_2;
            player.position = vector2_3;
        }

        public void WaterCollision(bool fallThrough, bool ignorePlats)
        {
            int Height = !this.onTrack ? this.height : this.height - 20;
            Vector2 vector2_1 = this.velocity;
            this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, Height, fallThrough, ignorePlats, (int)this.gravDir);
            Vector2 vector2_2 = this.velocity * 0.5f;
            if ((double)this.velocity.X != (double)vector2_1.X)
                vector2_2.X = this.velocity.X;
            if ((double)this.velocity.Y != (double)vector2_1.Y)
                vector2_2.Y = this.velocity.Y;
            Player player = this;
            Vector2 vector2_3 = player.position + vector2_2;
            player.position = vector2_3;
        }

        public void DryCollision(bool fallThrough, bool ignorePlats)
        {
            this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, !this.onTrack ? this.height : this.height - 10, fallThrough, ignorePlats, (int)this.gravDir);
            if (Collision.up && (double)this.gravDir == 1.0)
                this.jump = 0;
            if (this.waterWalk || this.waterWalk2)
            {
                Vector2 vector2 = this.velocity;
                this.velocity = Collision.WaterCollision(this.position, this.velocity, this.width, this.height, fallThrough, false, this.waterWalk);
                if (vector2 != this.velocity)
                    this.fallStart = (int)((double)this.position.Y / 16.0);
            }
            Player player = this;
            Vector2 vector2_1 = player.position + this.velocity;
            player.position = vector2_1;
        }

        public void SlopingCollision(bool fallThrough)
        {
            if (this.controlDown || this.grappling[0] >= 0 || (double)this.gravDir == -1.0)
                this.stairFall = true;
            Vector4 vector4 = Collision.SlopeCollision(this.position, this.velocity, this.width, this.height, this.gravity, this.stairFall);
            if (Collision.stairFall)
                this.stairFall = true;
            else if (!fallThrough)
                this.stairFall = false;
            if (Collision.stair && (double)Math.Abs(vector4.Y - this.position.Y) > 8.0 + (double)Math.Abs(this.velocity.X))
            {
                this.gfxOffY -= vector4.Y - this.position.Y;
                this.stepSpeed = 4f;
            }
            double num = (double)this.velocity.Y;
            this.position.X = vector4.X;
            this.position.Y = vector4.Y;
            this.velocity.X = vector4.Z;
            this.velocity.Y = vector4.W;
            if ((double)this.gravDir != -1.0 || (double)this.velocity.Y != 0.0100999996066093)
                return;
            this.velocity.Y = 0.0f;
        }

        public void FloorVisuals(bool Falling)
        {
            int index1 = (int)(((double)this.position.X + (double)(this.width / 2)) / 16.0);
            int index2 = (int)(((double)this.position.Y + (double)this.height) / 16.0);
            if ((double)this.gravDir == -1.0)
                index2 = (int)((double)this.position.Y - 0.100000001490116) / 16;
            int num1 = -1;
            if (Main.tile[index1 - 1, index2] == null)
                Main.tile[index1 - 1, index2] = new Tile();
            if (Main.tile[index1 + 1, index2] == null)
                Main.tile[index1 + 1, index2] = new Tile();
            if (Main.tile[index1, index2] == null)
                Main.tile[index1, index2] = new Tile();
            if (Main.tile[index1, index2].nactive() && Main.tileSolid[(int)Main.tile[index1, index2].type])
                num1 = (int)Main.tile[index1, index2].type;
            else if (Main.tile[index1 - 1, index2].nactive() && Main.tileSolid[(int)Main.tile[index1 - 1, index2].type])
                num1 = (int)Main.tile[index1 - 1, index2].type;
            else if (Main.tile[index1 + 1, index2].nactive() && Main.tileSolid[(int)Main.tile[index1 + 1, index2].type])
                num1 = (int)Main.tile[index1 + 1, index2].type;
            if (num1 <= -1)
            {
                this.slippy = false;
                this.slippy2 = false;
                this.sticky = false;
                this.powerrun = false;
            }
            else
            {
                this.sticky = num1 == 229;
                this.slippy = num1 == 161 || num1 == 162 || (num1 == 163 || num1 == 164) || num1 == 200 || num1 == (int)sbyte.MaxValue;
                this.slippy2 = num1 == 197;
                this.powerrun = num1 == 198;
                if ((int)Main.tile[index1 - 1, index2].slope() != 0 || (int)Main.tile[index1, index2].slope() != 0 || (int)Main.tile[index1 + 1, index2].slope() != 0)
                    num1 = -1;
                if (this.wet || this.mount.Cart || num1 != 147 && num1 != 25 && (num1 != 53 && num1 != 189) && (num1 != 0 && num1 != 123 && (num1 != 57 && num1 != 112)) && (num1 != 116 && num1 != 196 && (num1 != 193 && num1 != 195) && (num1 != 197 && num1 != 199 && (num1 != 229 && num1 != 371))))
                    return;
                int num2 = 1;
                if (Falling)
                    num2 = 20;
                for (int index3 = 0; index3 < num2; ++index3)
                {
                    bool flag = true;
                    int Type = 76;
                    if (num1 == 53)
                        Type = 32;
                    if (num1 == 189)
                        Type = 16;
                    if (num1 == 0)
                        Type = 0;
                    if (num1 == 123)
                        Type = 53;
                    if (num1 == 57)
                        Type = 36;
                    if (num1 == 112)
                        Type = 14;
                    if (num1 == 116)
                        Type = 51;
                    if (num1 == 196)
                        Type = 108;
                    if (num1 == 193)
                        Type = 4;
                    if (num1 == 195 || num1 == 199)
                        Type = 5;
                    if (num1 == 197)
                        Type = 4;
                    if (num1 == 229)
                        Type = 153;
                    if (num1 == 371)
                        Type = 243;
                    if (num1 == 25)
                        Type = 37;
                    if (Type == 32 && Main.rand.Next(2) == 0)
                        flag = false;
                    if (Type == 14 && Main.rand.Next(2) == 0)
                        flag = false;
                    if (Type == 51 && Main.rand.Next(2) == 0)
                        flag = false;
                    if (Type == 36 && Main.rand.Next(2) == 0)
                        flag = false;
                    if (Type == 0 && Main.rand.Next(3) != 0)
                        flag = false;
                    if (Type == 53 && Main.rand.Next(3) != 0)
                        flag = false;
                    Color newColor = new Color();
                    if (num1 == 193)
                        newColor = new Color(30, 100, (int)byte.MaxValue, 100);
                    if (num1 == 197)
                        newColor = new Color(97, 200, (int)byte.MaxValue, 100);
                    if (!Falling)
                    {
                        float num3 = Math.Abs(this.velocity.X) / 3f;
                        if ((double)Main.rand.Next(100) > (double)num3 * 100.0)
                            flag = false;
                    }
                    if (flag)
                    {
                        float num3 = this.velocity.X;
                        if ((double)num3 > 6.0)
                            num3 = 6f;
                        if ((double)num3 < -6.0)
                            num3 = -6f;
                        if ((double)this.velocity.X != 0.0 || Falling)
                        {
                            int index4 = Dust.NewDust(new Vector2(this.position.X, (float)((double)this.position.Y + (double)this.height - 2.0)), this.width, 6, Type, 0.0f, 0.0f, 50, newColor, 1f);
                            if ((double)this.gravDir == -1.0)
                                Main.dust[index4].position.Y -= (float)(this.height + 4);
                            if (Type == 76)
                            {
                                Main.dust[index4].scale += (float)Main.rand.Next(3) * 0.1f;
                                Main.dust[index4].noLight = true;
                            }
                            if (Type == 16 || Type == 108 || Type == 153)
                                Main.dust[index4].scale += (float)Main.rand.Next(6) * 0.1f;
                            if (Type == 37)
                            {
                                Main.dust[index4].scale += 0.25f;
                                Main.dust[index4].alpha = 50;
                            }
                            if (Type == 5)
                                Main.dust[index4].scale += (float)Main.rand.Next(2, 8) * 0.1f;
                            Main.dust[index4].noGravity = true;
                            if (num2 > 1)
                            {
                                Main.dust[index4].velocity.X *= 1.2f;
                                Main.dust[index4].velocity.Y *= 0.8f;
                                --Main.dust[index4].velocity.Y;
                                Main.dust[index4].velocity *= 0.8f;
                                Main.dust[index4].scale += (float)Main.rand.Next(3) * 0.1f;
                                Main.dust[index4].velocity.X = (float)(((double)Main.dust[index4].position.X - ((double)this.position.X + (double)(this.width / 2))) * 0.200000002980232);
                                if ((double)Main.dust[index4].velocity.Y > 0.0)
                                    Main.dust[index4].velocity.Y *= -1f;
                                Main.dust[index4].velocity.X += num3 * 0.3f;
                            }
                            else
                                Main.dust[index4].velocity *= 0.2f;
                            Main.dust[index4].position.X -= num3 * 1f;
                            if ((double)this.gravDir == -1.0)
                                Main.dust[index4].velocity.Y *= -1f;
                        }
                    }
                }
            }
        }

        public void BordersMovement()
        {
            if ((double)this.position.X < (double)Main.leftWorld + 640.0 + 16.0)
            {
                this.position.X = (float)((double)Main.leftWorld + 640.0 + 16.0);
                this.velocity.X = 0.0f;
            }
            if ((double)this.position.X + (double)this.width > (double)Main.rightWorld - 640.0 - 32.0)
            {
                this.position.X = (float)((double)Main.rightWorld - 640.0 - 32.0) - (float)this.width;
                this.velocity.X = 0.0f;
            }
            if ((double)this.position.Y < (double)Main.topWorld + 640.0 + 16.0)
            {
                this.position.Y = (float)((double)Main.topWorld + 640.0 + 16.0);
                if ((double)this.velocity.Y < 0.11)
                    this.velocity.Y = 0.11f;
                this.gravDir = 1f;
                AchievementsHelper.HandleSpecialEvent(this, 11);
            }
            if ((double)this.position.Y > (double)Main.bottomWorld - 640.0 - 32.0 - (double)this.height)
            {
                this.position.Y = (float)((double)Main.bottomWorld - 640.0 - 32.0) - (float)this.height;
                this.velocity.Y = 0.0f;
            }
            if ((double)this.position.Y <= (double)Main.bottomWorld - 640.0 - 150.0 - (double)this.height)
                return;
            AchievementsHelper.HandleSpecialEvent(this, 10);
        }

        public void CollectTaxes()
        {
            int num1 = Item.buyPrice(0, 0, 0, 50);
            int num2 = Item.buyPrice(0, 10, 0, 0);
            if (!NPC.taxCollector || this.taxMoney >= num2)
                return;
            int num3 = 0;
            for (int index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && !Main.npc[index].homeless && NPC.TypeToNum(Main.npc[index].type) > 0)
                    ++num3;
            }
            this.taxMoney += num1 * num3;
            if (this.taxMoney <= num2)
                return;
            this.taxMoney = num2;
        }

        public void Update(int i)
        {
            if (this.launcherWait > 0)
            {
                this.launcherWait--;
            }
            this.maxFallSpeed = 10f;
            this.gravity = Player.defaultGravity;
            Player.jumpHeight = 15;
            Player.jumpSpeed = 5.01f;
            this.maxRunSpeed = 3f;
            this.runAcceleration = 0.08f;
            this.runSlowdown = 0.2f;
            this.accRunSpeed = this.maxRunSpeed;
            if (!this.mount.Active || !this.mount.Cart)
            {
                this.onWrongGround = false;
            }
            this.heldProj = -1;
            if (this.PortalPhysicsEnabled)
            {
                this.maxFallSpeed = 30f;
            }
            if (this.wet)
            {
                if (this.honeyWet)
                {
                    this.gravity = 0.1f;
                    this.maxFallSpeed = 3f;
                }
                else if (this.merman)
                {
                    this.gravity = 0.3f;
                    this.maxFallSpeed = 7f;
                }
                else
                {
                    this.gravity = 0.2f;
                    this.maxFallSpeed = 5f;
                    Player.jumpHeight = 30;
                    Player.jumpSpeed = 6.01f;
                }
            }
            if (this.vortexDebuff)
            {
                this.gravity = 0f;
            }
            this.maxFallSpeed += 0.01f;
            bool flag = false;
            if (Main.myPlayer == i)
            {
                TileObject.objectPreview.Reset();
            }
            if (this.active)
            {
                if (this.ghostDmg > 0f)
                {
                    this.ghostDmg -= 2.5f;
                }
                if (this.ghostDmg < 0f)
                {
                    this.ghostDmg = 0f;
                }
                if (Main.expertMode)
                {
                    if (this.lifeSteal < 70f)
                    {
                        this.lifeSteal += 0.5f;
                    }
                    if (this.lifeSteal > 70f)
                    {
                        this.lifeSteal = 70f;
                    }
                }
                else
                {
                    if (this.lifeSteal < 80f)
                    {
                        this.lifeSteal += 0.6f;
                    }
                    if (this.lifeSteal > 80f)
                    {
                        this.lifeSteal = 80f;
                    }
                }
                if (this.mount.Active)
                {
                    this.position.Y = this.position.Y + (float)this.height;
                    this.height = 42 + this.mount.HeightBoost;
                    this.position.Y = this.position.Y - (float)this.height;
                    if (this.mount.Type == 0)
                    {
                        int num = (int)(this.position.X + (float)(this.width / 2)) / 16;
                        int j = (int)(this.position.Y + (float)(this.height / 2) - 14f) / 16;
                        Lighting.AddLight(num, j, 0.5f, 0.2f, 0.05f);
                        Lighting.AddLight(num + this.direction, j, 0.5f, 0.2f, 0.05f);
                        Lighting.AddLight(num + this.direction * 2, j, 0.5f, 0.2f, 0.05f);
                    }
                }
                else
                {
                    this.position.Y = this.position.Y + (float)this.height;
                    this.height = 42;
                    this.position.Y = this.position.Y - (float)this.height;
                }
                Main.numPlayers++;
                this.outOfRange = false;
                if (this.whoAmI != Main.myPlayer)
                {
                    int num2 = (int)(this.position.X + (float)(this.width / 2)) / 16;
                    int num3 = (int)(this.position.Y + (float)(this.height / 2)) / 16;
                    if (!WorldGen.InWorld(num2, num3, 4))
                    {
                        flag = true;
                    }
                    else if (Main.tile[num2, num3] == null)
                    {
                        flag = true;
                    }
                    else if (Main.tile[num2 - 3, num3] == null)
                    {
                        flag = true;
                    }
                    else if (Main.tile[num2 + 3, num3] == null)
                    {
                        flag = true;
                    }
                    else if (Main.tile[num2, num3 - 3] == null)
                    {
                        flag = true;
                    }
                    else if (Main.tile[num2, num3 + 3] == null)
                    {
                        flag = true;
                    }
                    if (flag)
                    {
                        this.outOfRange = true;
                        this.numMinions = 0;
                        this.slotsMinions = 0f;
                        this.itemAnimation = 0;
                        this.PlayerFrame();
                    }
                }
                if (this.tankPet >= 0)
                {
                    if (!this.tankPetReset)
                    {
                        this.tankPetReset = true;
                    }
                    else
                    {
                        this.tankPet = -1;
                    }
                }
            }
            if (this.chatOverhead.timeLeft > 0)
            {
                this.chatOverhead.timeLeft = this.chatOverhead.timeLeft - 1;
            }
            if (!this.active || flag)
            {
                return;
            }
            this.miscCounter++;
            if (this.miscCounter >= 300)
            {
                this.miscCounter = 0;
            }
            this.infernoCounter++;
            if (this.infernoCounter >= 180)
            {
                this.infernoCounter = 0;
            }
            float num4 = (float)(Main.maxTilesX / 4200);
            num4 *= num4;
            float num5 = (float)((double)(this.position.Y / 16f - (60f + 10f * num4)) / (Main.worldSurface / 6.0));
            if ((double)num5 < 0.25)
            {
                num5 = 0.25f;
            }
            if (num5 > 1f)
            {
                num5 = 1f;
            }
            this.gravity *= num5;
            this.maxRegenDelay = (1f - (float)this.statMana / (float)this.statManaMax2) * 60f * 4f + 45f;
            this.maxRegenDelay *= 0.7f;
            this.UpdateSocialShadow();
            this.UpdateTeleportVisuals();
            this.whoAmI = i;
            if (this.whoAmI == Main.myPlayer)
            {
                this.TryPortalJumping();
            }
            if (this.runSoundDelay > 0)
            {
                this.runSoundDelay--;
            }
            if (this.attackCD > 0)
            {
                this.attackCD--;
            }
            if (this.itemAnimation == 0)
            {
                this.attackCD = 0;
            }
            if (this.potionDelay > 0)
            {
                this.potionDelay--;
            }
            if (i == Main.myPlayer)
            {
                if (this.trashItem.itemId >= 1522 && this.trashItem.itemId <= 1527)
                {
                    this.trashItem.SetDefaults(0, false);
                }
                this.UpdateBiomes();
                this.UpdateMinionTarget();
            }
            if (this.ghost)
            {
                this.Ghost();
                return;
            }
            if (this.dead)
            {
                this.UpdateDead();
                return;
            }
            if (i == Main.myPlayer)
            {
                this.controlUp = false;
                this.controlLeft = false;
                this.controlDown = false;
                this.controlRight = false;
                this.controlJump = false;
                this.controlUseItem = false;
                this.controlUseTile = false;
                this.controlThrow = false;
                this.controlInv = false;
                this.controlHook = false;
                this.controlTorch = false;
                this.controlSmart = false;
                this.controlMount = false;
                this.mapStyle = false;
                this.mapAlphaDown = false;
                this.mapAlphaUp = false;
                this.mapFullScreen = false;
                this.mapZoomIn = false;
                this.mapZoomOut = false;
                bool flag2 = false;
                bool flag3 = false;
                Keys[] pressedKeys = Main.keyState.GetPressedKeys();
                for (int k = 0; k < pressedKeys.Length; k++)
                {
                    if (pressedKeys[k] == Keys.LeftShift || pressedKeys[k] == Keys.RightShift)
                    {
                        flag2 = true;
                    }
                    else if (pressedKeys[k] == Keys.LeftAlt || pressedKeys[k] == Keys.RightAlt)
                    {
                        flag3 = true;
                    }
                }
                if (Main.hasFocus)
                {
                    if (!Main.chatMode && !Main.editSign && !Main.editChest && !Main.blockInput)
                    {
                        if (Main.blockKey != Keys.None)
                        {
                            bool flag4 = false;
                            for (int l = 0; l < pressedKeys.Length; l++)
                            {
                                if (pressedKeys[l] == Main.blockKey)
                                {
                                    pressedKeys[l] = Keys.None;
                                    flag4 = true;
                                }
                            }
                            if (!flag4)
                            {
                                Main.blockKey = Keys.None;
                            }
                        }
                        bool flag5 = false;
                        bool flag6 = false;
                        for (int m = 0; m < pressedKeys.Length; m++)
                        {
                            string a = string.Concat(pressedKeys[m]);
                            if (pressedKeys[m] != Keys.Tab || ((!flag2) && !flag3))
                            {
                                if (a == Main.cUp)
                                {
                                    this.controlUp = true;
                                }
                                if (a == Main.cLeft)
                                {
                                    this.controlLeft = true;
                                }
                                if (a == Main.cDown)
                                {
                                    this.controlDown = true;
                                }
                                if (a == Main.cRight)
                                {
                                    this.controlRight = true;
                                }
                                if (a == Main.cJump)
                                {
                                    this.controlJump = true;
                                }
                                if (a == Main.cThrowItem)
                                {
                                    this.controlThrow = true;
                                }
                                if (a == Main.cInv)
                                {
                                    this.controlInv = true;
                                }
                                if (a == Main.cBuff)
                                {
                                    this.QuickBuff();
                                }
                                if (a == Main.cHeal)
                                {
                                    flag6 = true;
                                }
                                if (a == Main.cMana)
                                {
                                    flag5 = true;
                                }
                                if (a == Main.cHook)
                                {
                                    this.controlHook = true;
                                }
                                if (a == Main.cTorch)
                                {
                                    this.controlTorch = true;
                                }
                                if (a == Main.cSmart)
                                {
                                    this.controlSmart = true;
                                }
                                if (a == Main.cMount)
                                {
                                    this.controlMount = true;
                                }
                                if (Main.mapEnabled)
                                {
                                    if (a == Main.cMapZoomIn)
                                    {
                                        this.mapZoomIn = true;
                                    }
                                    if (a == Main.cMapZoomOut)
                                    {
                                        this.mapZoomOut = true;
                                    }
                                    if (a == Main.cMapAlphaUp)
                                    {
                                        this.mapAlphaUp = true;
                                    }
                                    if (a == Main.cMapAlphaDown)
                                    {
                                        this.mapAlphaDown = true;
                                    }
                                    if (a == Main.cMapFull)
                                    {
                                        this.mapFullScreen = true;
                                    }
                                    if (a == Main.cMapStyle)
                                    {
                                        this.mapStyle = true;
                                    }
                                }
                            }
                        }
                        if (Main.gamePad)
                        {
                            GamePadState state = GamePad.GetState(PlayerIndex.One);
                            if (state.DPad.Up == ButtonState.Pressed)
                            {
                                this.controlUp = true;
                            }
                            if (state.DPad.Down == ButtonState.Pressed)
                            {
                                this.controlDown = true;
                            }
                            if (state.DPad.Left == ButtonState.Pressed)
                            {
                                this.controlLeft = true;
                            }
                            if (state.DPad.Right == ButtonState.Pressed)
                            {
                                this.controlRight = true;
                            }
                            if (state.Triggers.Left > 0f)
                            {
                                this.controlJump = true;
                            }
                            if (state.Triggers.Right > 0f)
                            {
                                this.controlUseItem = true;
                            }
                            Main.mouseX = (int)((float)(Main.screenWidth / 2) + state.ThumbSticks.Right.X * (float)Player.tileRangeX * 16f);
                            Main.mouseY = (int)((float)(Main.screenHeight / 2) - state.ThumbSticks.Right.Y * (float)Player.tileRangeX * 16f);
                            if (state.ThumbSticks.Right.X == 0f)
                            {
                                Main.mouseX = Main.screenWidth / 2 + this.direction * 2;
                            }
                        }
                        if (Main.mapFullscreen)
                        {
                            if (this.controlUp)
                            {
                                Main.mapFullscreenPos.Y = Main.mapFullscreenPos.Y - 1f * (16f / Main.mapFullscreenScale);
                            }
                            if (this.controlDown)
                            {
                                Main.mapFullscreenPos.Y = Main.mapFullscreenPos.Y + 1f * (16f / Main.mapFullscreenScale);
                            }
                            if (this.controlLeft)
                            {
                                Main.mapFullscreenPos.X = Main.mapFullscreenPos.X - 1f * (16f / Main.mapFullscreenScale);
                            }
                            if (this.controlRight)
                            {
                                Main.mapFullscreenPos.X = Main.mapFullscreenPos.X + 1f * (16f / Main.mapFullscreenScale);
                            }
                            this.controlUp = false;
                            this.controlLeft = false;
                            this.controlDown = false;
                            this.controlRight = false;
                            this.controlJump = false;
                            this.controlUseItem = false;
                            this.controlUseTile = false;
                            this.controlThrow = false;
                            this.controlHook = false;
                            this.controlTorch = false;
                            this.controlSmart = false;
                            this.controlMount = false;
                        }
                        if (flag6)
                        {
                            if (this.releaseQuickHeal)
                            {
                                this.QuickHeal();
                            }
                            this.releaseQuickHeal = false;
                        }
                        else
                        {
                            this.releaseQuickHeal = true;
                        }
                        if (flag5)
                        {
                            if (this.releaseQuickMana)
                            {
                                this.QuickMana();
                            }
                            this.releaseQuickMana = false;
                        }
                        else
                        {
                            this.releaseQuickMana = true;
                        }
                        if (this.controlLeft && this.controlRight)
                        {
                            this.controlLeft = false;
                            this.controlRight = false;
                        }
                        if (Main.cSmartToggle)
                        {
                            if (this.controlSmart && this.releaseSmart)
                            {
                                Main.PlaySound(12, -1, -1, 1);
                                Main.smartDigEnabled = !Main.smartDigEnabled;
                            }
                        }
                        else
                        {
                            if (Main.smartDigEnabled != this.controlSmart)
                            {
                                Main.PlaySound(12, -1, -1, 1);
                            }
                            Main.smartDigEnabled = this.controlSmart;
                        }
                        if (this.controlSmart)
                        {
                            this.releaseSmart = false;
                        }
                        else
                        {
                            this.releaseSmart = true;
                        }
                        if (this.controlMount)
                        {
                            if (this.releaseMount)
                            {
                                this.QuickMount();
                            }
                            this.releaseMount = false;
                        }
                        else
                        {
                            this.releaseMount = true;
                        }
                        if (Main.mapFullscreen)
                        {
                            if (this.mapZoomIn)
                            {
                                Main.mapFullscreenScale *= 1.05f;
                            }
                            if (this.mapZoomOut)
                            {
                                Main.mapFullscreenScale *= 0.95f;
                            }
                        }
                        else
                        {
                            if (Main.mapStyle == 1)
                            {
                                if (this.mapZoomIn)
                                {
                                    Main.mapMinimapScale *= 1.025f;
                                }
                                if (this.mapZoomOut)
                                {
                                    Main.mapMinimapScale *= 0.975f;
                                }
                                if (this.mapAlphaUp)
                                {
                                    Main.mapMinimapAlpha += 0.015f;
                                }
                                if (this.mapAlphaDown)
                                {
                                    Main.mapMinimapAlpha -= 0.015f;
                                }
                            }
                            else if (Main.mapStyle == 2)
                            {
                                if (this.mapZoomIn)
                                {
                                    Main.mapOverlayScale *= 1.05f;
                                }
                                if (this.mapZoomOut)
                                {
                                    Main.mapOverlayScale *= 0.95f;
                                }
                                if (this.mapAlphaUp)
                                {
                                    Main.mapOverlayAlpha += 0.015f;
                                }
                                if (this.mapAlphaDown)
                                {
                                    Main.mapOverlayAlpha -= 0.015f;
                                }
                            }
                            if (this.mapStyle)
                            {
                                if (this.releaseMapStyle)
                                {
                                    Main.PlaySound(12, -1, -1, 1);
                                    Main.mapStyle++;
                                    if (Main.mapStyle > 2)
                                    {
                                        Main.mapStyle = 0;
                                    }
                                }
                                this.releaseMapStyle = false;
                            }
                            else
                            {
                                this.releaseMapStyle = true;
                            }
                        }
                        if (this.mapFullScreen)
                        {
                            if (this.releaseMapFullscreen)
                            {
                                if (Main.mapFullscreen)
                                {
                                    Main.PlaySound(11, -1, -1, 1);
                                    Main.mapFullscreen = false;
                                }
                                else
                                {
                                    Main.playerInventory = false;
                                    this.talkNPC = -1;
                                    Main.npcChatCornerItem = 0;
                                    Main.PlaySound(10, -1, -1, 1);
                                    float mapFullscreenScale = 2.5f;
                                    Main.mapFullscreenScale = mapFullscreenScale;
                                    Main.mapFullscreen = true;
                                    Main.resetMapFull = true;
                                    Main.buffString = string.Empty;
                                }
                            }
                            this.releaseMapFullscreen = false;
                        }
                        else
                        {
                            this.releaseMapFullscreen = true;
                        }
                    }
                    if (this.confused)
                    {
                        bool flag7 = this.controlLeft;
                        bool flag8 = this.controlUp;
                        this.controlLeft = this.controlRight;
                        this.controlRight = flag7;
                        this.controlUp = this.controlRight;
                        this.controlDown = flag8;
                    }
                    else if (this.cartFlip)
                    {
                        if (this.controlRight || this.controlLeft)
                        {
                            bool flag9 = this.controlLeft;
                            this.controlLeft = this.controlRight;
                            this.controlRight = flag9;
                        }
                        else
                        {
                            this.cartFlip = false;
                        }
                    }
                    for (int n = 0; n < this.doubleTapCardinalTimer.Length; n++)
                    {
                        this.doubleTapCardinalTimer[n]--;
                        if (this.doubleTapCardinalTimer[n] < 0)
                        {
                            this.doubleTapCardinalTimer[n] = 0;
                        }
                    }
                    for (int num6 = 0; num6 < 4; num6++)
                    {
                        bool flag10 = false;
                        bool flag11 = false;
                        switch (num6)
                        {
                            case 0:
                                flag10 = (this.controlDown && this.releaseDown);
                                flag11 = this.controlDown;
                                break;
                            case 1:
                                flag10 = (this.controlUp && this.releaseUp);
                                flag11 = this.controlUp;
                                break;
                            case 2:
                                flag10 = (this.controlRight && this.releaseRight);
                                flag11 = this.controlRight;
                                break;
                            case 3:
                                flag10 = (this.controlLeft && this.releaseLeft);
                                flag11 = this.controlLeft;
                                break;
                        }
                        if (flag10)
                        {
                            if (this.doubleTapCardinalTimer[num6] > 0)
                            {
                                this.KeyDoubleTap(num6);
                            }
                            else
                            {
                                this.doubleTapCardinalTimer[num6] = 15;
                            }
                        }
                        if (flag11)
                        {
                            this.holdDownCardinalTimer[num6]++;
                            this.KeyHoldDown(num6, this.holdDownCardinalTimer[num6]);
                        }
                        else
                        {
                            this.holdDownCardinalTimer[num6] = 0;
                        }
                    }
                    if (Main.mouseLeft)
                    {
                        if (!Main.blockMouse && !this.mouseInterface)
                        {
                            this.controlUseItem = true;
                        }
                    }
                    else
                    {
                        Main.blockMouse = false;
                    }
                    if (Main.mouseRight && !this.mouseInterface && !Main.blockMouse)
                    {
                        this.controlUseTile = true;
                    }
                    if (this.controlInv)
                    {
                        if (this.releaseInventory)
                        {
                            if (Main.mapFullscreen)
                            {
                                Main.mapFullscreen = false;
                                this.releaseInventory = false;
                                Main.PlaySound(11, -1, -1, 1);
                            }
                            else
                            {
                                this.ToggleInv();
                            }
                        }
                        this.releaseInventory = false;
                    }
                    else
                    {
                        this.releaseInventory = true;
                    }
                    if (this.delayUseItem)
                    {
                        if (!this.controlUseItem)
                        {
                            this.delayUseItem = false;
                        }
                        this.controlUseItem = false;
                    }
                    if (this.itemAnimation == 0 && this.itemTime == 0)
                    {
                        this.dropItemCheck();
                        int num7 = this.selectedItem;
                        bool flag12 = false;
                        if (!Main.chatMode && this.selectedItem != 58 && !Main.editSign && !Main.editChest)
                        {
                            if (Main.keyState.IsKeyDown(Keys.D1))
                            {
                                this.selectedItem = 0;
                                flag12 = true;
                            }
                            if (Main.keyState.IsKeyDown(Keys.D2))
                            {
                                this.selectedItem = 1;
                                flag12 = true;
                            }
                            if (Main.keyState.IsKeyDown(Keys.D3))
                            {
                                this.selectedItem = 2;
                                flag12 = true;
                            }
                            if (Main.keyState.IsKeyDown(Keys.D4))
                            {
                                this.selectedItem = 3;
                                flag12 = true;
                            }
                            if (Main.keyState.IsKeyDown(Keys.D5))
                            {
                                this.selectedItem = 4;
                                flag12 = true;
                            }
                            if (Main.keyState.IsKeyDown(Keys.D6))
                            {
                                this.selectedItem = 5;
                                flag12 = true;
                            }
                            if (Main.keyState.IsKeyDown(Keys.D7))
                            {
                                this.selectedItem = 6;
                                flag12 = true;
                            }
                            if (Main.keyState.IsKeyDown(Keys.D8))
                            {
                                this.selectedItem = 7;
                                flag12 = true;
                            }
                            if (Main.keyState.IsKeyDown(Keys.D9))
                            {
                                this.selectedItem = 8;
                                flag12 = true;
                            }
                            if (Main.keyState.IsKeyDown(Keys.D0))
                            {
                                this.selectedItem = 9;
                                flag12 = true;
                            }
                            if (this.controlTorch && flag12)
                            {
                                if (this.selectedItem != this.nonTorch)
                                {
                                    Main.PlaySound(12, -1, -1, 1);
                                }
                                this.nonTorch = this.selectedItem;
                                this.selectedItem = num7;
                                flag12 = false;
                            }
                        }
                        bool flag13 = Main.hairWindow;
                        if (flag13)
                        {
                            int y = Main.screenHeight / 2 + 60;
                            int x = Main.screenWidth / 2 - Main.hairStyleBackTexture.Width / 2;
                            flag13 = new Rectangle(x, y, Main.hairStyleBackTexture.Width, Main.hairStyleBackTexture.Height).Contains(Main.MouseScreen.ToPoint());
                        }
                        if (flag12 && CaptureManager.Instance.Active)
                        {
                            CaptureManager.Instance.Active = false;
                        }
                        if (num7 != this.selectedItem)
                        {
                            Main.PlaySound(12, -1, -1, 1);
                        }
                        if (Main.mapFullscreen)
                        {
                            int num8 = (Main.mouseState.ScrollWheelValue - Main.oldMouseWheel) / 120;
                            Main.mapFullscreenScale *= 1f + (float)num8 * 0.3f;
                        }
                        else if (CaptureManager.Instance.Active)
                        {
                            CaptureManager.Instance.Scrolling();
                        }
                        else if (!flag13)
                        {
                            if (!Main.playerInventory)
                            {
                                int num9;
                                for (num9 = (Main.mouseState.ScrollWheelValue - Main.oldMouseWheel) / 120; num9 > 9; num9 -= 10)
                                {
                                }
                                while (num9 < 0)
                                {
                                    num9 += 10;
                                }
                                this.selectedItem -= num9;
                                if (num9 != 0)
                                {
                                    Main.PlaySound(12, -1, -1, 1);
                                }
                                if (this.changeItem >= 0)
                                {
                                    if (this.selectedItem != this.changeItem)
                                    {
                                        Main.PlaySound(12, -1, -1, 1);
                                    }
                                    this.selectedItem = this.changeItem;
                                    this.changeItem = -1;
                                }
                                if (this.itemAnimation == 0)
                                {
                                    while (this.selectedItem > 9)
                                    {
                                        this.selectedItem -= 10;
                                    }
                                    while (this.selectedItem < 0)
                                    {
                                        this.selectedItem += 10;
                                    }
                                }
                            }
                            else
                            {
                                int num10 = (Main.mouseState.ScrollWheelValue - Main.oldMouseWheel) / 120;
                                bool flag14 = true;
                                if (Main.recBigList)
                                {
                                    int num11 = 42;
                                    int num12 = 340;
                                    int num13 = 310;
                                    int num14 = (Main.screenWidth - num13 - 280) / num11;
                                    int num15 = (Main.screenHeight - num12 - 20) / num11;
                                    if (new Rectangle(num13, num12, num14 * num11, num15 * num11).Contains(Main.MouseScreen.ToPoint()))
                                    {
                                        num10 *= -1;
                                        int num16 = Math.Sign(num10);
                                        while (num10 != 0)
                                        {
                                            if (num10 < 0)
                                            {
                                                Main.recStart -= num14;
                                                if (Main.recStart < 0)
                                                {
                                                    Main.recStart = 0;
                                                }
                                            }
                                            else
                                            {
                                                Main.recStart += num14;
                                                if (Main.recStart > Main.numAvailableRecipes - num14)
                                                {
                                                    Main.recStart = Main.numAvailableRecipes - num14;
                                                }
                                            }
                                            num10 -= num16;
                                        }
                                    }
                                }
                                if (flag14)
                                {
                                    Main.focusRecipe += num10;
                                    if (Main.focusRecipe > Main.numAvailableRecipes - 1)
                                    {
                                        Main.focusRecipe = Main.numAvailableRecipes - 1;
                                    }
                                    if (Main.focusRecipe < 0)
                                    {
                                        Main.focusRecipe = 0;
                                    }
                                }
                            }
                        }
                    }
                }
                if (this.selectedItem == 58)
                {
                    this.nonTorch = -1;
                }
                else
                {
                    this.SmartitemLookup();
                }
                if (this.stoned != this.lastStoned)
                {
                    if (this.whoAmI == Main.myPlayer && this.stoned)
                    {
                        int damage = (int)(20.0 * (double)Main.damageMultiplier);
                        this.Hurt(damage, 0, false, false, Lang.deathMsg(-1, -1, -1, 4), false);
                    }
                    Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1);
                    for (int num17 = 0; num17 < 20; num17++)
                    {
                        int num18 = Dust.NewDust(this.position, this.width, this.height, 1, 0f, 0f, 0, default(Color), 1f);
                        if (Main.rand.Next(2) == 0)
                        {
                            Main.dust[num18].noGravity = true;
                        }
                    }
                }
                this.lastStoned = this.stoned;
                if (this.frozen || this.webbed || this.stoned)
                {
                    this.controlJump = false;
                    this.controlDown = false;
                    this.controlLeft = false;
                    this.controlRight = false;
                    this.controlUp = false;
                    this.controlUseItem = false;
                    this.controlUseTile = false;
                    this.controlThrow = false;
                    this.gravDir = 1f;
                }
                if (!this.controlThrow)
                {
                    this.releaseThrow = true;
                }
                else
                {
                    this.releaseThrow = false;
                }
                if (Main.netMode == 1)
                {
                    bool flag15 = false;
                    if (this.controlUp != Main.clientPlayer.controlUp)
                    {
                        flag15 = true;
                    }
                    if (this.controlDown != Main.clientPlayer.controlDown)
                    {
                        flag15 = true;
                    }
                    if (this.controlLeft != Main.clientPlayer.controlLeft)
                    {
                        flag15 = true;
                    }
                    if (this.controlRight != Main.clientPlayer.controlRight)
                    {
                        flag15 = true;
                    }
                    if (this.controlJump != Main.clientPlayer.controlJump)
                    {
                        flag15 = true;
                    }
                    if (this.controlUseItem != Main.clientPlayer.controlUseItem)
                    {
                        flag15 = true;
                    }
                    if (this.selectedItem != Main.clientPlayer.selectedItem)
                    {
                        flag15 = true;
                    }
                    if (flag15)
                    {
                        NetMessage.SendData(13, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
                    }
                }
                if (Main.playerInventory)
                {
                    this.AdjTiles();
                }
                if (this.chest != -1)
                {
                    if (this.chest != -2)
                    {
                        this.flyingPigChest = -1;
                    }
                    if (this.flyingPigChest >= 0)
                    {
                        if (!Main.projectile[this.flyingPigChest].active || Main.projectile[this.flyingPigChest].type != 525)
                        {
                            Main.PlaySound(2, -1, -1, 59);
                            this.chest = -1;
                            Recipe.FindRecipes();
                        }
                        else
                        {
                            int num19 = (int)(((double)this.position.X + (double)this.width * 0.5) / 16.0);
                            int num20 = (int)(((double)this.position.Y + (double)this.height * 0.5) / 16.0);
                            this.chestX = (int)Main.projectile[this.flyingPigChest].Center.X / 16;
                            this.chestY = (int)Main.projectile[this.flyingPigChest].Center.Y / 16;
                            if (num19 < this.chestX - Player.tileRangeX || num19 > this.chestX + Player.tileRangeX + 1 || num20 < this.chestY - Player.tileRangeY || num20 > this.chestY + Player.tileRangeY + 1)
                            {
                                if (this.chest != -1)
                                {
                                    Main.PlaySound(2, -1, -1, 59);
                                }
                                this.chest = -1;
                                Recipe.FindRecipes();
                            }
                        }
                    }
                    else
                    {
                        int num21 = (int)(((double)this.position.X + (double)this.width * 0.5) / 16.0);
                        int num22 = (int)(((double)this.position.Y + (double)this.height * 0.5) / 16.0);
                        if (num21 < this.chestX - Player.tileRangeX || num21 > this.chestX + Player.tileRangeX + 1 || num22 < this.chestY - Player.tileRangeY || num22 > this.chestY + Player.tileRangeY + 1)
                        {
                            if (this.chest != -1)
                            {
                                Main.PlaySound(11, -1, -1, 1);
                            }
                            this.chest = -1;
                            Recipe.FindRecipes();
                        }
                        else if (!Main.tile[this.chestX, this.chestY].active())
                        {
                            Main.PlaySound(11, -1, -1, 1);
                            this.chest = -1;
                            Recipe.FindRecipes();
                        }
                    }
                }
                else
                {
                    this.flyingPigChest = -1;
                }
                if (this.velocity.Y <= 0f)
                {
                    this.fallStart2 = (int)(this.position.Y / 16f);
                }
                if (this.velocity.Y == 0f)
                {
                    int num23 = 25;
                    num23 += this.extraFall;
                    int num24 = (int)(this.position.Y / 16f) - this.fallStart;
                    if (this.mount.CanFly)
                    {
                        num24 = 0;
                    }
                    if (this.mount.Cart && Minecart.OnTrack(this.position, this.width, this.height))
                    {
                        num24 = 0;
                    }
                    if (this.mount.Type == 1)
                    {
                        num24 = 0;
                    }
                    this.mount.FatigueRecovery();
                    bool flag16 = false;
                    for (int num25 = 3; num25 < 10; num25++)
                    {
                        if (this.armor[num25].stack > 0 && this.armor[num25].wingSlot > -1)
                        {
                            flag16 = true;
                        }
                    }
                    if (this.stoned)
                    {
                        int num26 = (int)(((float)num24 * this.gravDir - 2f) * 20f);
                        if (num26 > 0)
                        {
                            this.Hurt(num26, 0, false, false, Lang.deathMsg(-1, -1, -1, 4), false);
                            this.immune = false;
                        }
                    }
                    else if (((this.gravDir == 1f && num24 > num23) || (this.gravDir == -1f && num24 < -num23)) && !this.noFallDmg && !flag16)
                    {
                        this.immune = false;
                        int num27 = (int)((float)num24 * this.gravDir - (float)num23) * 10;
                        if (this.mount.Active)
                        {
                            num27 = (int)((float)num27 * this.mount.FallDamage);
                        }
                        this.Hurt(num27, 0, false, false, Lang.deathMsg(-1, -1, -1, 0), false);
                        if (!this.dead && this.statLife <= this.statLifeMax2 / 10)
                        {
                            AchievementsHelper.HandleSpecialEvent(this, 8);
                        }
                    }
                    this.fallStart = (int)(this.position.Y / 16f);
                }
                if (this.jump > 0 || this.rocketDelay > 0 || this.wet || this.slowFall || (double)num5 < 0.8 || this.tongued)
                {
                    this.fallStart = (int)(this.position.Y / 16f);
                }
            }
            if (Main.netMode != 1)
            {
                if (this.chest == -1 && this.lastChest >= 0 && Main.chest[this.lastChest] != null && Main.chest[this.lastChest] != null)
                {
                    int x2 = Main.chest[this.lastChest].x;
                    int y2 = Main.chest[this.lastChest].y;
                    NPC.BigMimicSummonCheck(x2, y2);
					Chest.MagicChest(Chest.FindChest(x2, y2));
				}
                this.lastChest = this.chest;
            }
            if (this.mouseInterface)
            {
                this.delayUseItem = true;
            }
            Player.tileTargetX = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
            Player.tileTargetY = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
            if (this.gravDir == -1f)
            {
                Player.tileTargetY = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
            }
            if (Player.tileTargetX >= Main.maxTilesX - 5)
            {
                Player.tileTargetX = Main.maxTilesX - 5;
            }
            if (Player.tileTargetY >= Main.maxTilesY - 5)
            {
                Player.tileTargetY = Main.maxTilesY - 5;
            }
            if (Player.tileTargetX < 5)
            {
                Player.tileTargetX = 5;
            }
            if (Player.tileTargetY < 5)
            {
                Player.tileTargetY = 5;
            }
            if (Main.tile[Player.tileTargetX - 1, Player.tileTargetY] == null)
            {
                Main.tile[Player.tileTargetX - 1, Player.tileTargetY] = new Tile();
            }
            if (Main.tile[Player.tileTargetX + 1, Player.tileTargetY] == null)
            {
                Main.tile[Player.tileTargetX + 1, Player.tileTargetY] = new Tile();
            }
            if (Main.tile[Player.tileTargetX, Player.tileTargetY] == null)
            {
                Main.tile[Player.tileTargetX, Player.tileTargetY] = new Tile();
            }
            if (!Main.tile[Player.tileTargetX, Player.tileTargetY].active())
            {
                if (Main.tile[Player.tileTargetX - 1, Player.tileTargetY].active() && Main.tile[Player.tileTargetX - 1, Player.tileTargetY].type == 323)
                {
                    int frameY = (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY].frameY;
                    if (frameY < -4)
                    {
                        Player.tileTargetX++;
                    }
                    if (frameY > 4)
                    {
                        Player.tileTargetX--;
                    }
                }
                else if (Main.tile[Player.tileTargetX + 1, Player.tileTargetY].active() && Main.tile[Player.tileTargetX + 1, Player.tileTargetY].type == 323)
                {
                    int frameY2 = (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY].frameY;
                    if (frameY2 < -4)
                    {
                        Player.tileTargetX++;
                    }
                    if (frameY2 > 4)
                    {
                        Player.tileTargetX--;
                    }
                }
            }
            this.SmartCursorLookup();
            this.UpdateImmunity();
            if (this.petalTimer > 0)
            {
                this.petalTimer--;
            }
            if (this.shadowDodgeTimer > 0)
            {
                this.shadowDodgeTimer--;
            }
            if (this.jump > 0 || this.velocity.Y != 0f)
            {
                this.slippy = false;
                this.slippy2 = false;
                this.powerrun = false;
                this.sticky = false;
            }
            this.potionDelayTime = Item.potionDelay;
            this.restorationDelayTime = Item.restorationDelay;
            if (this.pStone)
            {
                this.potionDelayTime = (int)((double)this.potionDelayTime * 0.75);
                this.restorationDelayTime = (int)((double)this.restorationDelayTime * 0.75);
            }
            if (this.yoraiz0rEye > 0)
            {
                this.Yoraiz0rEye();
            }
            this.ResetEffects();
            this.UpdateDyes(i);
            this.meleeCrit += this.inventory[this.selectedItem].crit;
            this.magicCrit += this.inventory[this.selectedItem].crit;
            this.rangedCrit += this.inventory[this.selectedItem].crit;
            this.thrownCrit += this.inventory[this.selectedItem].crit;
            if (this.whoAmI == Main.myPlayer)
            {
                Main.musicBox2 = -1;
                if (Main.waterCandles > 0)
                {
                    this.AddBuff(86, 2, false);
                }
                if (Main.peaceCandles > 0)
                {
                    this.AddBuff(157, 2, false);
                }
                if (Main.campfire)
                {
                    this.AddBuff(87, 2, false);
                }
                if (Main.starInBottle)
                {
                    this.AddBuff(158, 2, false);
                }
                if (Main.heartLantern)
                {
                    this.AddBuff(89, 2, false);
                }
                if (Main.sunflower)
                {
                    this.AddBuff(146, 2, false);
                }
                if (this.hasBanner)
                {
                    this.AddBuff(147, 2, false);
                }
            }
            for (int num28 = 0; num28 < 191; num28++)
            {
                this.buffImmune[num28] = false;
            }
            this.UpdateBuffs(i);
            if (this.whoAmI == Main.myPlayer)
            {
                if (!this.onFire && !this.poisoned)
                {
                    this.trapDebuffSource = false;
                }
                this.UpdatePet(i);
                this.UpdatePetLight(i);
            }
            if (this.accMerman && this.wet && !this.lavaWet && (!this.mount.Active || this.mount.Type != 3))
            {
                this.releaseJump = true;
                this.wings = 0;
                this.merman = true;
                this.accFlipper = true;
                this.AddBuff(34, 2, true);
            }
            else
            {
                this.merman = false;
            }
            this.accMerman = false;
            if (this.wolfAcc && !this.merman && !Main.dayTime && !this.wereWolf)
            {
                this.AddBuff(28, 60, true);
            }
            this.wolfAcc = false;
            if (this.whoAmI == Main.myPlayer)
            {
                for (int num29 = 0; num29 < 22; num29++)
                {
                    if (this.buffType[num29] > 0 && this.buffTime[num29] <= 0)
                    {
                        this.DelBuff(num29);
                    }
                }
            }
            this.beetleDefense = false;
            this.beetleOffense = false;
            this.doubleJumpCloud = false;
            this.setSolar = false;
            this.head = this.armor[0].headSlot;
            this.body = this.armor[1].bodySlot;
            this.legs = this.armor[2].legSlot;
            this.handon = -1;
            this.handoff = -1;
            this.back = -1;
            this.front = -1;
            this.shoe = -1;
            this.waist = -1;
            this.shield = -1;
            this.neck = -1;
            this.face = -1;
            this.balloon = -1;
            if (this.MountFishronSpecialCounter > 0f)
            {
                this.MountFishronSpecialCounter -= 1f;
            }
            if (this._portalPhysicsTime > 0)
            {
                this._portalPhysicsTime--;
            }
            this.UpdateEquips(i);
            if (this.inventory[this.selectedItem].itemId == 3384)
            {
                this._portalPhysicsTime = 30;
            }
            if (this.mount.Active)
            {
                this.mount.UpdateEffects(this);
            }
            this.gemCount++;
            if (this.gemCount >= 10)
            {
                this.gem = -1;
                this.gemCount = 0;
                for (int num30 = 0; num30 <= 58; num30++)
                {
                    if (this.inventory[num30].itemId == 0 || this.inventory[num30].stack == 0)
                    {
                        this.inventory[num30].itemId = 0;
                        this.inventory[num30].stack = 0;
                        this.inventory[num30].name = "";
                        this.inventory[num30].netID = 0;
                    }
                    if (this.inventory[num30].itemId >= 1522 && this.inventory[num30].itemId <= 1527)
                    {
                        this.gem = this.inventory[num30].itemId - 1522;
                    }
                }
            }
            if (!this.vortexStealthActive)
            {
                float num31 = 0f;
                float num32 = 0f;
                float num33 = 0f;
                int num34 = this.head;
                if (num34 <= 171)
                {
                    if (num34 != 11)
                    {
                        switch (num34)
                        {
                            case 169:
                                num31 = 0f;
                                num32 = 0.36f;
                                num33 = 0.4f;
                                break;
                            case 170:
                                num31 = 0.4f;
                                num32 = 0.16f;
                                num33 = 0.36f;
                                break;
                            case 171:
                                num31 = 0.5f;
                                num32 = 0.25f;
                                num33 = 0.05f;
                                break;
                        }
                    }
                    else
                    {
                        num31 = 0.92f;
                        num32 = 0.8f;
                        num33 = 0.65f;
                    }
                }
                else if (num34 != 178)
                {
                    if (num34 == 189)
                    {
                        num31 = 0.9f;
                        num32 = 0.9f;
                        num33 = 0.7f;
                    }
                }
                else
                {
                    num31 = 0.1f;
                    num32 = 0.2f;
                    num33 = 0.3f;
                }
                float num35 = 0f;
                float num36 = 0f;
                float num37 = 0f;
                num34 = this.body;
                switch (num34)
                {
                    case 175:
                        num35 = 0f;
                        num36 = 0.36f;
                        num37 = 0.4f;
                        break;
                    case 176:
                        num35 = 0.4f;
                        num36 = 0.16f;
                        num37 = 0.36f;
                        break;
                    case 177:
                        num35 = 0.5f;
                        num36 = 0.25f;
                        num37 = 0.05f;
                        break;
                    default:
                        if (num34 == 190)
                        {
                            num31 = 0.9f;
                            num32 = 0.9f;
                            num33 = 0.7f;
                        }
                        break;
                }
                float num38 = 0f;
                float num39 = 0f;
                float num40 = 0f;
                num34 = this.legs;
                switch (num34)
                {
                    case 110:
                        num38 = 0f;
                        num39 = 0.36f;
                        num40 = 0.4f;
                        break;
                    case 111:
                        num38 = 0.4f;
                        num39 = 0.16f;
                        num40 = 0.36f;
                        break;
                    case 112:
                        num38 = 0.5f;
                        num39 = 0.25f;
                        num40 = 0.05f;
                        break;
                    default:
                        if (num34 == 130)
                        {
                            num31 = 0.9f;
                            num32 = 0.9f;
                            num33 = 0.7f;
                        }
                        break;
                }
                if (num31 != 0f || num32 != 0f || num33 != 0f)
                {
                    float num41 = 1f;
                    if (num31 == num35 && num32 == num36 && num33 == num37)
                    {
                        num41 += 0.5f;
                    }
                    if (num31 == num38 && num32 == num39 && num33 == num40)
                    {
                        num41 += 0.5f;
                    }
                    Vector2 spinningpoint = new Vector2((float)(this.width / 2 + 8 * this.direction), 2f);
                    if (this.fullRotation != 0f)
                    {
                        spinningpoint = spinningpoint.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
                    }
                    int i2 = (int)(this.position.X + spinningpoint.X) / 16;
                    int j2 = (int)(this.position.Y + spinningpoint.Y) / 16;
                    Lighting.AddLight(i2, j2, num31 * num41, num32 * num41, num33 * num41);
                }
                if (num35 != 0f || num36 != 0f || num37 != 0f)
                {
                    float num42 = 1f;
                    if (num35 == num31 && num36 == num32 && num37 == num33)
                    {
                        num42 += 0.5f;
                    }
                    if (num35 == num38 && num36 == num39 && num37 == num40)
                    {
                        num42 += 0.5f;
                    }
                    Vector2 spinningpoint2 = new Vector2((float)(this.width / 2 + 8), (float)(this.height / 2));
                    if (this.fullRotation != 0f)
                    {
                        spinningpoint2 = spinningpoint2.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
                    }
                    int i3 = (int)(this.position.X + spinningpoint2.X) / 16;
                    int j3 = (int)(this.position.Y + spinningpoint2.Y) / 16;
                    Lighting.AddLight(i3, j3, num35 * num42, num36 * num42, num37 * num42);
                }
                if (num38 != 0f || num39 != 0f || num40 != 0f)
                {
                    float num43 = 1f;
                    if (num38 == num35 && num39 == num36 && num40 == num37)
                    {
                        num43 += 0.5f;
                    }
                    if (num38 == num31 && num39 == num32 && num40 == num33)
                    {
                        num43 += 0.5f;
                    }
                    Vector2 spinningpoint3 = new Vector2((float)(this.width / 2 + 8 * this.direction), (float)this.height * 0.75f);
                    if (this.fullRotation != 0f)
                    {
                        spinningpoint3 = spinningpoint3.RotatedBy((double)this.fullRotation, this.fullRotationOrigin);
                    }
                    int i4 = (int)(this.position.X + spinningpoint3.X) / 16;
                    int j4 = (int)(this.position.Y + spinningpoint3.Y) / 16;
                    Lighting.AddLight(i4, j4, num38 * num43, num39 * num43, num40 * num43);
                }
            }
            this.UpdateArmorSets(i);
            if (this.merman)
            {
                this.wings = 0;
            }
            if (this.invis)
            {
                if (this.itemAnimation == 0 && this.aggro > -750)
                {
                    this.aggro = -750;
                }
                else if (this.aggro > -250)
                {
                    this.aggro = -250;
                }
            }
            if (this.inventory[this.selectedItem].itemId == 3106)
            {
                if (this.itemAnimation > 0)
                {
                    this.stealthTimer = 15;
                    if (this.stealth > 0f)
                    {
                        this.stealth += 0.1f;
                    }
                }
                else if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1 && (double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
                {
                    if (this.stealthTimer == 0 && this.stealth > 0f)
                    {
                        this.stealth -= 0.02f;
                        if ((double)this.stealth <= 0.0)
                        {
                            this.stealth = 0f;
                            if (Main.netMode == 1)
                            {
                                NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
                            }
                        }
                    }
                }
                else if (this.stealth > 0f)
                {
                    this.stealth += 0.1f;
                }
                if (this.stealth > 1f)
                {
                    this.stealth = 1f;
                }
                this.meleeDamage += (1f - this.stealth) * 3f;
                this.meleeCrit += (int)((1f - this.stealth) * 30f);
                if (this.meleeCrit > 100)
                {
                    this.meleeCrit = 100;
                }
                this.aggro -= (int)((1f - this.stealth) * 750f);
                if (this.stealthTimer > 0)
                {
                    this.stealthTimer--;
                }
            }
            else if (this.shroomiteStealth)
            {
                if (this.itemAnimation > 0)
                {
                    this.stealthTimer = 5;
                }
                if ((double)this.velocity.X > -0.1 && (double)this.velocity.X < 0.1 && (double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
                {
                    if (this.stealthTimer == 0 && this.stealth > 0f)
                    {
                        this.stealth -= 0.015f;
                        if ((double)this.stealth <= 0.0)
                        {
                            this.stealth = 0f;
                            if (Main.netMode == 1)
                            {
                                NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
                            }
                        }
                    }
                }
                else
                {
                    float num44 = Math.Abs(this.velocity.X) + Math.Abs(this.velocity.Y);
                    this.stealth += num44 * 0.0075f;
                    if (this.stealth > 1f)
                    {
                        this.stealth = 1f;
                    }
                }
                this.rangedDamage += (1f - this.stealth) * 0.6f;
                this.rangedCrit += (int)((1f - this.stealth) * 10f);
                this.aggro -= (int)((1f - this.stealth) * 750f);
                if (this.stealthTimer > 0)
                {
                    this.stealthTimer--;
                }
            }
            else if (this.setVortex)
            {
                bool flag17 = false;
                if (this.vortexStealthActive)
                {
                    float num45 = this.stealth;
                    this.stealth -= 0.04f;
                    if (this.stealth < 0f)
                    {
                        this.stealth = 0f;
                    }
                    else
                    {
                        flag17 = true;
                    }
                    if (this.stealth == 0f && num45 != this.stealth && Main.netMode == 1)
                    {
                        NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
                    }
                    this.rangedDamage += (1f - this.stealth) * 0.8f;
                    this.rangedCrit += (int)((1f - this.stealth) * 20f);
                    this.aggro -= (int)((1f - this.stealth) * 1200f);
                    this.moveSpeed *= 0.3f;
                    if (this.mount.Active)
                    {
                        this.vortexStealthActive = false;
                    }
                }
                else
                {
                    float num46 = this.stealth;
                    this.stealth += 0.04f;
                    if (this.stealth > 1f)
                    {
                        this.stealth = 1f;
                    }
                    else
                    {
                        flag17 = true;
                    }
                    if (this.stealth == 1f && num46 != this.stealth && Main.netMode == 1)
                    {
                        NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
                    }
                }
                if (flag17)
                {
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 vector = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                        Dust dust = Main.dust[Dust.NewDust(base.Center - vector * 30f, 0, 0, 229, 0f, 0f, 0, default(Color), 1f)];
                        dust.noGravity = true;
                        dust.position = base.Center - vector * (float)Main.rand.Next(5, 11);
                        dust.velocity = vector.RotatedBy(1.5707963705062866, default(Vector2)) * 4f;
                        dust.scale = 0.5f + Main.rand.NextFloat();
                        dust.fadeIn = 0.5f;
                    }
                    if (Main.rand.Next(2) == 0)
                    {
                        Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
                        Dust dust2 = Main.dust[Dust.NewDust(base.Center - vector2 * 30f, 0, 0, 240, 0f, 0f, 0, default(Color), 1f)];
                        dust2.noGravity = true;
                        dust2.position = base.Center - vector2 * 12f;
                        dust2.velocity = vector2.RotatedBy(-1.5707963705062866, default(Vector2)) * 2f;
                        dust2.scale = 0.5f + Main.rand.NextFloat();
                        dust2.fadeIn = 0.5f;
                    }
                }
            }
            else
            {
                this.stealth = 1f;
            }
            if (this.manaSick)
            {
                this.magicDamage *= 1f - this.manaSickReduction;
            }
            if (this.inventory[this.selectedItem].itemId == 1947)
            {
                this.meleeSpeed = (1f + this.meleeSpeed) / 2f;
            }
            if ((double)this.pickSpeed < 0.3)
            {
                this.pickSpeed = 0.3f;
            }
            if (this.meleeSpeed > 3f)
            {
                this.meleeSpeed = 3f;
            }
            if ((double)this.moveSpeed > 1.6)
            {
                this.moveSpeed = 1.6f;
            }
            if (this.tileSpeed > 3f)
            {
                this.tileSpeed = 3f;
            }
            this.tileSpeed = 1f / this.tileSpeed;
            if (this.wallSpeed > 3f)
            {
                this.wallSpeed = 3f;
            }
            this.wallSpeed = 1f / this.wallSpeed;
            if (this.statManaMax2 > 400)
            {
                this.statManaMax2 = 400;
            }
            if (this.statDefense < 0)
            {
                this.statDefense = 0;
            }
            if (this.dazed)
            {
                this.moveSpeed /= 3f;
            }
            else if (this.slow)
            {
                this.moveSpeed /= 2f;
            }
            else if (this.chilled)
            {
                this.moveSpeed *= 0.75f;
            }
            this.meleeSpeed = 1f / this.meleeSpeed;
            this.UpdateLifeRegen();
            this.soulDrain = 0;
            this.UpdateManaRegen();
            if (this.manaRegenCount < 0)
            {
                this.manaRegenCount = 0;
            }
            if (this.statMana > this.statManaMax2)
            {
                this.statMana = this.statManaMax2;
            }
            this.runAcceleration *= this.moveSpeed;
            this.maxRunSpeed *= this.moveSpeed;
            this.UpdateJumpHeight();
            for (int num47 = 0; num47 < 22; num47++)
            {
                if (this.buffType[num47] > 0 && this.buffTime[num47] > 0 && this.buffImmune[this.buffType[num47]])
                {
                    this.DelBuff(num47);
                }
            }
            if (this.brokenArmor)
            {
                this.statDefense /= 2;
            }
            this.lastTileRangeX = Player.tileRangeX;
            this.lastTileRangeY = Player.tileRangeY;
            if (this.mount.Active && this.mount.BlockExtraJumps)
            {
                this.jumpAgainCloud = false;
                this.jumpAgainSandstorm = false;
                this.jumpAgainBlizzard = false;
                this.jumpAgainFart = false;
                this.jumpAgainSail = false;
                this.jumpAgainUnicorn = false;
            }
            else
            {
                if (!this.doubleJumpCloud)
                {
                    this.jumpAgainCloud = false;
                }
                else if (this.velocity.Y == 0f || this.sliding)
                {
                    this.jumpAgainCloud = true;
                }
                if (!this.doubleJumpSandstorm)
                {
                    this.jumpAgainSandstorm = false;
                }
                else if (this.velocity.Y == 0f || this.sliding)
                {
                    this.jumpAgainSandstorm = true;
                }
                if (!this.doubleJumpBlizzard)
                {
                    this.jumpAgainBlizzard = false;
                }
                else if (this.velocity.Y == 0f || this.sliding)
                {
                    this.jumpAgainBlizzard = true;
                }
                if (!this.doubleJumpFart)
                {
                    this.jumpAgainFart = false;
                }
                else if (this.velocity.Y == 0f || this.sliding)
                {
                    this.jumpAgainFart = true;
                }
                if (!this.doubleJumpSail)
                {
                    this.jumpAgainSail = false;
                }
                else if (this.velocity.Y == 0f || this.sliding)
                {
                    this.jumpAgainSail = true;
                }
                if (!this.doubleJumpUnicorn)
                {
                    this.jumpAgainUnicorn = false;
                }
                else if (this.velocity.Y == 0f || this.sliding)
                {
                    this.jumpAgainUnicorn = true;
                }
            }
            if (!this.carpet)
            {
                this.canCarpet = false;
                this.carpetFrame = -1;
            }
            else if (this.velocity.Y == 0f || this.sliding)
            {
                this.canCarpet = true;
                this.carpetTime = 0;
                this.carpetFrame = -1;
                this.carpetFrameCounter = 0f;
            }
            if (this.gravDir == -1f)
            {
                this.canCarpet = false;
            }
            if (this.ropeCount > 0)
            {
                this.ropeCount--;
            }
            if (!this.pulley && !this.frozen && !this.webbed && !this.stoned && !this.controlJump && this.gravDir == 1f && this.ropeCount == 0 && this.grappling[0] == -1 && !this.tongued && !this.mount.Active)
            {
                this.FindPulley();
            }
            if (this.pulley)
            {
                if (this.mount.Active)
                {
                    this.pulley = false;
                }
                this.sandStorm = false;
                this.dJumpEffectCloud = false;
                this.dJumpEffectSandstorm = false;
                this.dJumpEffectBlizzard = false;
                this.dJumpEffectFart = false;
                this.dJumpEffectSail = false;
                this.dJumpEffectUnicorn = false;
                int num48 = (int)(this.position.X + (float)(this.width / 2)) / 16;
                int num49 = (int)(this.position.Y - 8f) / 16;
                bool flag18 = false;
                if (this.pulleyDir == 0)
                {
                    this.pulleyDir = 1;
                }
                if (this.pulleyDir == 1)
                {
                    if (this.direction == -1 && this.controlLeft && (this.releaseLeft || this.leftTimer == 0))
                    {
                        this.pulleyDir = 2;
                        flag18 = true;
                    }
                    else if ((this.direction == 1 && this.controlRight && this.releaseRight) || this.rightTimer == 0)
                    {
                        this.pulleyDir = 2;
                        flag18 = true;
                    }
                    else
                    {
                        if (this.direction == 1 && this.controlLeft)
                        {
                            this.direction = -1;
                            flag18 = true;
                        }
                        if (this.direction == -1 && this.controlRight)
                        {
                            this.direction = 1;
                            flag18 = true;
                        }
                    }
                }
                else if (this.pulleyDir == 2)
                {
                    if (this.direction == 1 && this.controlLeft)
                    {
                        flag18 = true;
                        int num50 = num48 * 16 + 8 - this.width / 2;
                        if (!Collision.SolidCollision(new Vector2((float)num50, this.position.Y), this.width, this.height))
                        {
                            this.pulleyDir = 1;
                            this.direction = -1;
                            flag18 = true;
                        }
                    }
                    if (this.direction == -1 && this.controlRight)
                    {
                        flag18 = true;
                        int num51 = num48 * 16 + 8 - this.width / 2;
                        if (!Collision.SolidCollision(new Vector2((float)num51, this.position.Y), this.width, this.height))
                        {
                            this.pulleyDir = 1;
                            this.direction = 1;
                            flag18 = true;
                        }
                    }
                }
                bool flag19 = false;
                if (!flag18 && ((this.controlLeft && (this.releaseLeft || this.leftTimer == 0)) || (this.controlRight && (this.releaseRight || this.rightTimer == 0))))
                {
                    int num52 = 1;
                    if (this.controlLeft)
                    {
                        num52 = -1;
                    }
                    int num53 = num48 + num52;
                    if (Main.tile[num53, num49].active() && Main.tileRope[(int)Main.tile[num53, num49].type])
                    {
                        this.pulleyDir = 1;
                        this.direction = num52;
                        int num54 = num53 * 16 + 8 - this.width / 2;
                        float num55 = this.position.Y;
                        num55 = (float)(num49 * 16 + 22);
                        if ((!Main.tile[num53, num49 - 1].active() || !Main.tileRope[(int)Main.tile[num53, num49 - 1].type]) && (!Main.tile[num53, num49 + 1].active() || !Main.tileRope[(int)Main.tile[num53, num49 + 1].type]))
                        {
                            num55 = (float)(num49 * 16 + 22);
                        }
                        if (Collision.SolidCollision(new Vector2((float)num54, num55), this.width, this.height))
                        {
                            this.pulleyDir = 2;
                            this.direction = -num52;
                            if (this.direction == 1)
                            {
                                num54 = num53 * 16 + 8 - this.width / 2 + 6;
                            }
                            else
                            {
                                num54 = num53 * 16 + 8 - this.width / 2 + -6;
                            }
                        }
                        if (i == Main.myPlayer)
                        {
                            Main.cameraX = Main.cameraX + this.position.X - (float)num54;
                        }
                        this.position.X = (float)num54;
                        this.gfxOffY = this.position.Y - num55;
                        this.position.Y = num55;
                        flag19 = true;
                    }
                }
                if (!flag19 && !flag18 && !this.controlUp && ((this.controlLeft && this.releaseLeft) || (this.controlRight && this.releaseRight)))
                {
                    this.pulley = false;
                    if (this.controlLeft && this.velocity.X == 0f)
                    {
                        this.velocity.X = -1f;
                    }
                    if (this.controlRight && this.velocity.X == 0f)
                    {
                        this.velocity.X = 1f;
                    }
                }
                if (this.velocity.X != 0f)
                {
                    this.pulley = false;
                }
                if (Main.tile[num48, num49] == null)
                {
                    Main.tile[num48, num49] = new Tile();
                }
                if (!Main.tile[num48, num49].active() || !Main.tileRope[(int)Main.tile[num48, num49].type])
                {
                    this.pulley = false;
                }
                if (this.gravDir != 1f)
                {
                    this.pulley = false;
                }
                if (this.frozen || this.webbed || this.stoned)
                {
                    this.pulley = false;
                }
                if (!this.pulley)
                {
                    this.velocity.Y = this.velocity.Y - this.gravity;
                }
                if (this.controlJump)
                {
                    this.pulley = false;
                    this.jump = Player.jumpHeight;
                    this.velocity.Y = -Player.jumpSpeed;
                }
            }
            if (this.pulley)
            {
                this.fallStart = (int)this.position.Y / 16;
                this.wingFrame = 0;
                if (this.wings == 4)
                {
                    this.wingFrame = 3;
                }
                int num56 = (int)(this.position.X + (float)(this.width / 2)) / 16;
                int num57 = (int)(this.position.Y - 16f) / 16;
                int num58 = (int)(this.position.Y - 8f) / 16;
                bool flag20 = true;
                bool flag21 = false;
                if ((Main.tile[num56, num58 - 1].active() && Main.tileRope[(int)Main.tile[num56, num58 - 1].type]) || (Main.tile[num56, num58 + 1].active() && Main.tileRope[(int)Main.tile[num56, num58 + 1].type]))
                {
                    flag21 = true;
                }
                if (Main.tile[num56, num57] == null)
                {
                    Main.tile[num56, num57] = new Tile();
                }
                if (!Main.tile[num56, num57].active() || !Main.tileRope[(int)Main.tile[num56, num57].type])
                {
                    flag20 = false;
                    if (this.velocity.Y < 0f)
                    {
                        this.velocity.Y = 0f;
                    }
                }
                if (flag21)
                {
                    if (this.controlUp && flag20)
                    {
                        float num59 = this.position.X;
                        float y3 = this.position.Y - Math.Abs(this.velocity.Y) - 2f;
                        if (Collision.SolidCollision(new Vector2(num59, y3), this.width, this.height))
                        {
                            num59 = (float)(num56 * 16 + 8 - this.width / 2 + 6);
                            if (!Collision.SolidCollision(new Vector2(num59, y3), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
                            {
                                if (i == Main.myPlayer)
                                {
                                    Main.cameraX = Main.cameraX + this.position.X - num59;
                                }
                                this.pulleyDir = 2;
                                this.direction = 1;
                                this.position.X = num59;
                                this.velocity.X = 0f;
                            }
                            else
                            {
                                num59 = (float)(num56 * 16 + 8 - this.width / 2 + -6);
                                if (!Collision.SolidCollision(new Vector2(num59, y3), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
                                {
                                    if (i == Main.myPlayer)
                                    {
                                        Main.cameraX = Main.cameraX + this.position.X - num59;
                                    }
                                    this.pulleyDir = 2;
                                    this.direction = -1;
                                    this.position.X = num59;
                                    this.velocity.X = 0f;
                                }
                            }
                        }
                        if (this.velocity.Y > 0f)
                        {
                            this.velocity.Y = this.velocity.Y * 0.7f;
                        }
                        if (this.velocity.Y > -3f)
                        {
                            this.velocity.Y = this.velocity.Y - 0.2f;
                        }
                        else
                        {
                            this.velocity.Y = this.velocity.Y - 0.02f;
                        }
                        if (this.velocity.Y < -8f)
                        {
                            this.velocity.Y = -8f;
                        }
                    }
                    else if (this.controlDown)
                    {
                        float num60 = this.position.X;
                        float y4 = this.position.Y;
                        if (Collision.SolidCollision(new Vector2(num60, y4), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
                        {
                            num60 = (float)(num56 * 16 + 8 - this.width / 2 + 6);
                            if (!Collision.SolidCollision(new Vector2(num60, y4), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
                            {
                                if (i == Main.myPlayer)
                                {
                                    Main.cameraX = Main.cameraX + this.position.X - num60;
                                }
                                this.pulleyDir = 2;
                                this.direction = 1;
                                this.position.X = num60;
                                this.velocity.X = 0f;
                            }
                            else
                            {
                                num60 = (float)(num56 * 16 + 8 - this.width / 2 + -6);
                                if (!Collision.SolidCollision(new Vector2(num60, y4), this.width, (int)((float)this.height + Math.Abs(this.velocity.Y) + 2f)))
                                {
                                    if (i == Main.myPlayer)
                                    {
                                        Main.cameraX = Main.cameraX + this.position.X - num60;
                                    }
                                    this.pulleyDir = 2;
                                    this.direction = -1;
                                    this.position.X = num60;
                                    this.velocity.X = 0f;
                                }
                            }
                        }
                        if (this.velocity.Y < 0f)
                        {
                            this.velocity.Y = this.velocity.Y * 0.7f;
                        }
                        if (this.velocity.Y < 3f)
                        {
                            this.velocity.Y = this.velocity.Y + 0.2f;
                        }
                        else
                        {
                            this.velocity.Y = this.velocity.Y + 0.1f;
                        }
                        if (this.velocity.Y > this.maxFallSpeed)
                        {
                            this.velocity.Y = this.maxFallSpeed;
                        }
                    }
                    else
                    {
                        this.velocity.Y = this.velocity.Y * 0.7f;
                        if ((double)this.velocity.Y > -0.1 && (double)this.velocity.Y < 0.1)
                        {
                            this.velocity.Y = 0f;
                        }
                    }
                }
                else if (this.controlDown)
                {
                    this.ropeCount = 10;
                    this.pulley = false;
                    this.velocity.Y = 1f;
                }
                else
                {
                    this.velocity.Y = 0f;
                    this.position.Y = (float)(num57 * 16 + 22);
                }
                float num61 = (float)(num56 * 16 + 8 - this.width / 2);
                if (this.pulleyDir == 1)
                {
                    num61 = (float)(num56 * 16 + 8 - this.width / 2);
                }
                if (this.pulleyDir == 2)
                {
                    num61 = (float)(num56 * 16 + 8 - this.width / 2 + 6 * this.direction);
                }
                if (i == Main.myPlayer)
                {
                    Main.cameraX = Main.cameraX + this.position.X - num61;
                }
                this.position.X = num61;
                this.pulleyFrameCounter += Math.Abs(this.velocity.Y * 0.75f);
                if (this.velocity.Y != 0f)
                {
                    this.pulleyFrameCounter += 0.75f;
                }
                if (this.pulleyFrameCounter > 10f)
                {
                    this.pulleyFrame++;
                    this.pulleyFrameCounter = 0f;
                }
                if (this.pulleyFrame > 1)
                {
                    this.pulleyFrame = 0;
                }
                this.canCarpet = true;
                this.carpetFrame = -1;
                this.wingTime = (float)this.wingTimeMax;
                this.rocketTime = this.rocketTimeMax;
                this.rocketDelay = 0;
                this.rocketFrame = false;
                this.canRocket = false;
                this.rocketRelease = false;
            }
            else if (this.grappling[0] == -1 && !this.tongued)
            {
                if (this.wingsLogic > 0 && this.velocity.Y != 0f && !this.merman)
                {
                    if (this.wingsLogic == 1 || this.wingsLogic == 2)
                    {
                        this.accRunSpeed = 6.25f;
                    }
                    if (this.wingsLogic == 4)
                    {
                        this.accRunSpeed = 6.5f;
                    }
                    if (this.wingsLogic == 5 || this.wingsLogic == 6 || this.wingsLogic == 13 || this.wingsLogic == 15)
                    {
                        this.accRunSpeed = 6.75f;
                    }
                    if (this.wingsLogic == 7 || this.wingsLogic == 8)
                    {
                        this.accRunSpeed = 7f;
                    }
                    if (this.wingsLogic == 9 || this.wingsLogic == 10 || this.wingsLogic == 11 || this.wingsLogic == 20 || this.wingsLogic == 21 || this.wingsLogic == 23 || this.wingsLogic == 24)
                    {
                        this.accRunSpeed = 7.5f;
                    }
                    if (this.wingsLogic == 22)
                    {
                        if (this.controlDown && this.controlJump && this.wingTime > 0f)
                        {
                            this.accRunSpeed = 10f;
                            this.runAcceleration *= 10f;
                        }
                        else
                        {
                            this.accRunSpeed = 6.25f;
                        }
                    }
                    if (this.wingsLogic == 30)
                    {
                        if (this.controlDown && this.controlJump && this.wingTime > 0f)
                        {
                            this.accRunSpeed = 12f;
                            this.runAcceleration *= 12f;
                        }
                        else
                        {
                            this.accRunSpeed = 6.5f;
                            this.runAcceleration *= 1.5f;
                        }
                    }
                    if (this.wingsLogic == 32)
                    {
                        if (this.controlDown && this.controlJump && this.wingTime > 0f)
                        {
                            this.accRunSpeed = 7.5f;
                            this.runAcceleration *= 5f;
                        }
                        else
                        {
                            this.accRunSpeed = 5.5f;
                            this.runAcceleration *= 1.1f;
                        }
                    }
                    if (this.wingsLogic == 26)
                    {
                        this.accRunSpeed = 8f;
                        this.runAcceleration *= 2f;
                    }
                    if (this.wingsLogic == 29)
                    {
                        this.accRunSpeed = 9f;
                        this.runAcceleration *= 2.5f;
                    }
                    if (this.wingsLogic == 12)
                    {
                        this.accRunSpeed = 7.75f;
                    }
                    if (this.wingsLogic == 16 || this.wingsLogic == 17 || this.wingsLogic == 18 || this.wingsLogic == 19 || this.wingsLogic == 34 || this.wingsLogic == 3 || this.wingsLogic == 28 || this.wingsLogic == 33 || this.wingsLogic == 34 || this.wingsLogic == 35 || this.wingsLogic == 36)
                    {
                        this.accRunSpeed = 7f;
                    }
                }
                if (this.sticky)
                {
                    this.maxRunSpeed *= 0.25f;
                    this.runAcceleration *= 0.25f;
                    this.runSlowdown *= 2f;
                    if (this.velocity.X > this.maxRunSpeed)
                    {
                        this.velocity.X = this.maxRunSpeed;
                    }
                    if (this.velocity.X < -this.maxRunSpeed)
                    {
                        this.velocity.X = -this.maxRunSpeed;
                    }
                }
                else if (this.powerrun)
                {
                    this.maxRunSpeed *= 3.5f;
                    this.runAcceleration *= 1f;
                    this.runSlowdown *= 2f;
                }
                else if (this.slippy2)
                {
                    this.runAcceleration *= 0.6f;
                    this.runSlowdown = 0f;
                    if (this.iceSkate)
                    {
                        this.runAcceleration *= 3.5f;
                        this.maxRunSpeed *= 1.25f;
                    }
                }
                else if (this.slippy)
                {
                    this.runAcceleration *= 0.7f;
                    if (this.iceSkate)
                    {
                        this.runAcceleration *= 3.5f;
                        this.maxRunSpeed *= 1.25f;
                    }
                    else
                    {
                        this.runSlowdown *= 0.1f;
                    }
                }
                if (this.sandStorm)
                {
                    this.runAcceleration *= 1.5f;
                    this.maxRunSpeed *= 2f;
                }
                if (this.dJumpEffectBlizzard && this.doubleJumpBlizzard)
                {
                    this.runAcceleration *= 3f;
                    this.maxRunSpeed *= 1.5f;
                }
                if (this.dJumpEffectFart && this.doubleJumpFart)
                {
                    this.runAcceleration *= 3f;
                    this.maxRunSpeed *= 1.75f;
                }
                if (this.dJumpEffectUnicorn && this.doubleJumpUnicorn)
                {
                    this.runAcceleration *= 3f;
                    this.maxRunSpeed *= 1.5f;
                }
                if (this.dJumpEffectSail && this.doubleJumpSail)
                {
                    this.runAcceleration *= 1.5f;
                    this.maxRunSpeed *= 1.25f;
                }
                if (this.carpetFrame != -1)
                {
                    this.runAcceleration *= 1.25f;
                    this.maxRunSpeed *= 1.5f;
                }
                if (this.inventory[this.selectedItem].itemId == 3106 && this.stealth < 1f)
                {
                    float num62 = this.maxRunSpeed / 2f * (1f - this.stealth);
                    this.maxRunSpeed -= num62;
                    this.accRunSpeed = this.maxRunSpeed;
                }
                if (this.mount.Active)
                {
                    this.rocketBoots = 0;
                    this.wings = 0;
                    this.wingsLogic = 0;
                    this.maxRunSpeed = this.mount.RunSpeed;
                    this.accRunSpeed = this.mount.DashSpeed;
                    this.runAcceleration = this.mount.Acceleration;
                    if (this.mount.Type == 12 && !this.MountFishronSpecial)
                    {
                        this.runAcceleration /= 2f;
                        this.maxRunSpeed /= 2f;
                    }
                    this.mount.AbilityRecovery();
                    if (this.mount.Cart && this.velocity.Y == 0f)
                    {
                        if (!Minecart.OnTrack(this.position, this.width, this.height))
                        {
                            this.fullRotation = 0f;
                            this.onWrongGround = true;
                            this.runSlowdown = 0.2f;
                            if ((this.controlLeft && this.releaseLeft) || (this.controlRight && this.releaseRight))
                            {
                                this.mount.Dismount(this);
                            }
                        }
                        else
                        {
                            this.runSlowdown = this.runAcceleration;
                            this.onWrongGround = false;
                        }
                    }
                    if (this.mount.Type == 8)
                    {
                        this.mount.UpdateDrill(this, this.controlUp, this.controlDown);
                    }
                }
                this.HorizontalMovement();
                if (this.gravControl)
                {
                    if (this.controlUp && this.releaseUp)
                    {
                        if (this.gravDir == 1f)
                        {
                            this.gravDir = -1f;
                            this.fallStart = (int)(this.position.Y / 16f);
                            this.jump = 0;
                            Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 8);
                        }
                        else
                        {
                            this.gravDir = 1f;
                            this.fallStart = (int)(this.position.Y / 16f);
                            this.jump = 0;
                            Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 8);
                        }
                    }
                }
                else if (this.gravControl2)
                {
                    if (this.controlUp && this.releaseUp && this.velocity.Y == 0f)
                    {
                        if (this.gravDir == 1f)
                        {
                            this.gravDir = -1f;
                            this.fallStart = (int)(this.position.Y / 16f);
                            this.jump = 0;
                            Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 8);
                        }
                        else
                        {
                            this.gravDir = 1f;
                            this.fallStart = (int)(this.position.Y / 16f);
                            this.jump = 0;
                            Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 8);
                        }
                    }
                }
                else
                {
                    this.gravDir = 1f;
                }
                if (this.velocity.Y == 0f && this.mount.Active && this.mount.CanHover && this.controlUp && this.releaseUp)
                {
                    this.velocity.Y = -(this.mount.Acceleration + this.gravity + 0.001f);
                }
                if (this.controlUp)
                {
                    this.releaseUp = false;
                }
                else
                {
                    this.releaseUp = true;
                }
                this.sandStorm = false;
                this.JumpMovement();
                if (this.wingsLogic == 0)
                {
                    this.wingTime = 0f;
                }
                if (this.rocketBoots == 0)
                {
                    this.rocketTime = 0;
                }
                if (this.jump == 0)
                {
                    this.dJumpEffectCloud = false;
                    this.dJumpEffectSandstorm = false;
                    this.dJumpEffectBlizzard = false;
                    this.dJumpEffectFart = false;
                    this.dJumpEffectSail = false;
                    this.dJumpEffectUnicorn = false;
                }
                this.DashMovement();
                this.WallslideMovement();
                this.CarpetMovement();
                this.DoubleJumpVisuals();
                if (this.wings > 0 || this.mount.Active)
                {
                    this.sandStorm = false;
                }
                if (((this.gravDir == 1f && this.velocity.Y > -Player.jumpSpeed) || (this.gravDir == -1f && this.velocity.Y < Player.jumpSpeed)) && this.velocity.Y != 0f)
                {
                    this.canRocket = true;
                }
                bool flag22 = false;
                if (((this.velocity.Y == 0f || this.sliding) && this.releaseJump) || (this.autoJump && this.justJumped))
                {
                    this.mount.ResetFlightTime(this.velocity.X);
                    this.wingTime = (float)this.wingTimeMax;
                }
                if (this.wingsLogic > 0 && this.controlJump && this.wingTime > 0f && !this.jumpAgainCloud && this.jump == 0 && this.velocity.Y != 0f)
                {
                    flag22 = true;
                }
                if ((this.wingsLogic == 22 || this.wingsLogic == 28 || this.wingsLogic == 30 || this.wingsLogic == 32 || this.wingsLogic == 33 || this.wingsLogic == 35) && this.controlJump && this.controlDown && this.wingTime > 0f)
                {
                    flag22 = true;
                }
                if (this.frozen || this.webbed || this.stoned)
                {
                    if (this.mount.Active)
                    {
                        this.mount.Dismount(this);
                    }
                    this.velocity.Y = this.velocity.Y + this.gravity;
                    if (this.velocity.Y > this.maxFallSpeed)
                    {
                        this.velocity.Y = this.maxFallSpeed;
                    }
                    this.sandStorm = false;
                    this.dJumpEffectCloud = false;
                    this.dJumpEffectSandstorm = false;
                    this.dJumpEffectBlizzard = false;
                    this.dJumpEffectFart = false;
                    this.dJumpEffectSail = false;
                    this.dJumpEffectUnicorn = false;
                }
                else
                {
                    if (flag22)
                    {
                        if (this.wings == 10 && Main.rand.Next(2) == 0)
                        {
                            int num63 = 4;
                            if (this.direction == 1)
                            {
                                num63 = -40;
                            }
                            int num64 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num63, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 76, 0f, 0f, 50, default(Color), 0.6f);
                            Main.dust[num64].fadeIn = 1.1f;
                            Main.dust[num64].noGravity = true;
                            Main.dust[num64].noLight = true;
                            Main.dust[num64].velocity *= 0.3f;
                            Main.dust[num64].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        }
                        if (this.wings == 34 && Main.rand.Next(2) == 0)
                        {
                            int num65 = 4;
                            if (this.direction == 1)
                            {
                                num65 = -40;
                            }
                            int num66 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num65, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 261, 0f, 0f, 50, default(Color), 0.6f);
                            Main.dust[num66].fadeIn = 1.1f;
                            Main.dust[num66].noGravity = true;
                            Main.dust[num66].noLight = true;
                            Main.dust[num66].velocity *= 0.3f;
                            Main.dust[num66].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        }
                        if (this.wings == 9 && Main.rand.Next(2) == 0)
                        {
                            int num67 = 4;
                            if (this.direction == 1)
                            {
                                num67 = -40;
                            }
                            int num68 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num67, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 200, default(Color), 2f);
                            Main.dust[num68].noGravity = true;
                            Main.dust[num68].velocity *= 0.3f;
                            Main.dust[num68].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        }
                        if (this.wings == 6 && Main.rand.Next(4) == 0)
                        {
                            int num69 = 4;
                            if (this.direction == 1)
                            {
                                num69 = -40;
                            }
                            int num70 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num69, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 55, 0f, 0f, 200, default(Color), 1f);
                            Main.dust[num70].velocity *= 0.3f;
                            Main.dust[num70].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        }
                        if (this.wings == 5 && Main.rand.Next(3) == 0)
                        {
                            int num71 = 6;
                            if (this.direction == 1)
                            {
                                num71 = -30;
                            }
                            int num72 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num71, this.position.Y), 18, this.height, 58, 0f, 0f, 255, default(Color), 1.2f);
                            Main.dust[num72].velocity *= 0.3f;
                            Main.dust[num72].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        }
                        if (this.wings == 26)
                        {
                            int num73 = 6;
                            if (this.direction == 1)
                            {
                                num73 = -30;
                            }
                            int num74 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num73, this.position.Y), 18, this.height, 217, 0f, 0f, 100, default(Color), 1.4f);
                            Main.dust[num74].noGravity = true;
                            Main.dust[num74].noLight = true;
                            Main.dust[num74].velocity /= 4f;
                            Main.dust[num74].velocity -= this.velocity;
                            Main.dust[num74].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                            if (Main.rand.Next(2) == 0)
                            {
                                num73 = -24;
                                if (this.direction == 1)
                                {
                                    num73 = 12;
                                }
                                float num75 = this.position.Y;
                                if (this.gravDir == -1f)
                                {
                                    num75 += (float)(this.height / 2);
                                }
                                num74 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num73, num75), 12, this.height / 2, 217, 0f, 0f, 100, default(Color), 1.4f);
                                Main.dust[num74].noGravity = true;
                                Main.dust[num74].noLight = true;
                                Main.dust[num74].velocity /= 4f;
                                Main.dust[num74].velocity -= this.velocity;
                                Main.dust[num74].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                            }
                        }
                        if (this.wings == 29 && Main.rand.Next(3) == 0)
                        {
                            int num76 = 4;
                            if (this.direction == 1)
                            {
                                num76 = -40;
                            }
                            int num77 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num76, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
                            Main.dust[num77].noGravity = true;
                            Main.dust[num77].velocity *= 0.3f;
                            if (Main.rand.Next(10) == 0)
                            {
                                Main.dust[num77].fadeIn = 2f;
                            }
                            Main.dust[num77].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                        }
                        if (this.wings == 31)
                        {
                            if (Main.rand.Next(6) == 0)
                            {
                                int num78 = 4;
                                if (this.direction == 1)
                                {
                                    num78 = -40;
                                }
                                Dust dust3 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num78, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 86, 0f, 0f, 0, default(Color), 1f)];
                                dust3.noGravity = true;
                                dust3.scale = 1f;
                                dust3.fadeIn = 1.2f;
                                dust3.velocity *= 0.2f;
                                dust3.noLight = true;
                                dust3.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                            }
                            if (Main.rand.Next(3) == 0)
                            {
                                int num79 = 4;
                                if (this.direction == 1)
                                {
                                    num79 = -40;
                                }
                                Dust dust4 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num79, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 240, 0f, 0f, 0, default(Color), 1f)];
                                dust4.noGravity = true;
                                dust4.scale = 1.2f;
                                dust4.velocity *= 0.2f;
                                dust4.alpha = 200;
                                dust4.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                            }
                            if (Main.rand.Next(2) == 0)
                            {
                                if (Main.rand.Next(6) == 0)
                                {
                                    int num80 = -24;
                                    if (this.direction == 1)
                                    {
                                        num80 = 12;
                                    }
                                    float num81 = this.position.Y;
                                    if (this.gravDir == -1f)
                                    {
                                        num81 += (float)(this.height / 2);
                                    }
                                    Dust dust5 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num80, num81), 12, this.height / 2, 86, 0f, 0f, 0, default(Color), 1f)];
                                    dust5.noGravity = true;
                                    dust5.scale = 1f;
                                    dust5.fadeIn = 1.2f;
                                    dust5.velocity *= 0.2f;
                                    dust5.noLight = true;
                                    dust5.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                }
                                if (Main.rand.Next(3) == 0)
                                {
                                    int num80 = -24;
                                    if (this.direction == 1)
                                    {
                                        num80 = 12;
                                    }
                                    float num82 = this.position.Y;
                                    if (this.gravDir == -1f)
                                    {
                                        num82 += (float)(this.height / 2);
                                    }
                                    Dust dust6 = Main.dust[Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num80, num82), 12, this.height / 2, 240, 0f, 0f, 0, default(Color), 1f)];
                                    dust6.noGravity = true;
                                    dust6.scale = 1.2f;
                                    dust6.velocity *= 0.2f;
                                    dust6.alpha = 200;
                                    dust6.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                }
                            }
                        }
                        this.WingMovement();
                    }
                    if (this.wings == 4)
                    {
                        if (flag22 || this.jump > 0)
                        {
                            this.rocketDelay2--;
                            if (this.rocketDelay2 <= 0)
                            {
                                Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 13);
                                this.rocketDelay2 = 60;
                            }
                            int num83 = 2;
                            if (this.controlUp)
                            {
                                num83 = 4;
                            }
                            for (int num84 = 0; num84 < num83; num84++)
                            {
                                int type = 6;
                                if (this.head == 41)
                                {
                                    int arg_5B01_0 = this.body;
                                }
                                float scale = 1.75f;
                                int alpha = 100;
                                float x3 = this.position.X + (float)(this.width / 2) + 16f;
                                if (this.direction > 0)
                                {
                                    x3 = this.position.X + (float)(this.width / 2) - 26f;
                                }
                                float num85 = this.position.Y + (float)this.height - 18f;
                                if (num84 == 1 || num84 == 3)
                                {
                                    x3 = this.position.X + (float)(this.width / 2) + 8f;
                                    if (this.direction > 0)
                                    {
                                        x3 = this.position.X + (float)(this.width / 2) - 20f;
                                    }
                                    num85 += 6f;
                                }
                                if (num84 > 1)
                                {
                                    num85 += this.velocity.Y;
                                }
                                int num86 = Dust.NewDust(new Vector2(x3, num85), 8, 8, type, 0f, 0f, alpha, default(Color), scale);
                                Dust expr_5C14_cp_0 = Main.dust[num86];
                                expr_5C14_cp_0.velocity.X = expr_5C14_cp_0.velocity.X * 0.1f;
                                Main.dust[num86].velocity.Y = Main.dust[num86].velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
                                Main.dust[num86].noGravity = true;
                                Main.dust[num86].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                if (num83 == 4)
                                {
                                    Dust expr_5CAC_cp_0 = Main.dust[num86];
                                    expr_5CAC_cp_0.velocity.Y = expr_5CAC_cp_0.velocity.Y + 6f;
                                }
                            }
                            this.wingFrameCounter++;
                            if (this.wingFrameCounter > 4)
                            {
                                this.wingFrame++;
                                this.wingFrameCounter = 0;
                                if (this.wingFrame >= 3)
                                {
                                    this.wingFrame = 0;
                                }
                            }
                        }
                        else if (!this.controlJump || this.velocity.Y == 0f)
                        {
                            this.wingFrame = 3;
                        }
                    }
                    else if (this.wings == 28)
                    {
                        if (this.velocity.Y != 0f)
                        {
                            Lighting.AddLight(base.Bottom, 0.3f, 0.1f, 0.4f);
                        }
                    }
                    else if (this.wings == 22)
                    {
                        if (!this.controlJump)
                        {
                            this.wingFrame = 0;
                            this.wingFrameCounter = 0;
                        }
                        else if (this.wingTime > 0f)
                        {
                            if (this.controlDown)
                            {
                                if (this.velocity.X != 0f)
                                {
                                    this.wingFrameCounter++;
                                    int num87 = 2;
                                    if (this.wingFrameCounter < num87)
                                    {
                                        this.wingFrame = 1;
                                    }
                                    else if (this.wingFrameCounter < num87 * 2)
                                    {
                                        this.wingFrame = 2;
                                    }
                                    else if (this.wingFrameCounter < num87 * 3)
                                    {
                                        this.wingFrame = 3;
                                    }
                                    else if (this.wingFrameCounter < num87 * 4 - 1)
                                    {
                                        this.wingFrame = 2;
                                    }
                                    else
                                    {
                                        this.wingFrame = 2;
                                        this.wingFrameCounter = 0;
                                    }
                                }
                                else
                                {
                                    this.wingFrameCounter++;
                                    int num88 = 6;
                                    if (this.wingFrameCounter < num88)
                                    {
                                        this.wingFrame = 4;
                                    }
                                    else if (this.wingFrameCounter < num88 * 2)
                                    {
                                        this.wingFrame = 5;
                                    }
                                    else if (this.wingFrameCounter < num88 * 3 - 1)
                                    {
                                        this.wingFrame = 4;
                                    }
                                    else
                                    {
                                        this.wingFrame = 4;
                                        this.wingFrameCounter = 0;
                                    }
                                }
                            }
                            else
                            {
                                this.wingFrameCounter++;
                                int num89 = 2;
                                if (this.wingFrameCounter < num89)
                                {
                                    this.wingFrame = 4;
                                }
                                else if (this.wingFrameCounter < num89 * 2)
                                {
                                    this.wingFrame = 5;
                                }
                                else if (this.wingFrameCounter < num89 * 3)
                                {
                                    this.wingFrame = 6;
                                }
                                else if (this.wingFrameCounter < num89 * 4 - 1)
                                {
                                    this.wingFrame = 5;
                                }
                                else
                                {
                                    this.wingFrame = 5;
                                    this.wingFrameCounter = 0;
                                }
                            }
                        }
                        else
                        {
                            this.wingFrameCounter++;
                            int num90 = 6;
                            if (this.wingFrameCounter < num90)
                            {
                                this.wingFrame = 4;
                            }
                            else if (this.wingFrameCounter < num90 * 2)
                            {
                                this.wingFrame = 5;
                            }
                            else if (this.wingFrameCounter < num90 * 3 - 1)
                            {
                                this.wingFrame = 4;
                            }
                            else
                            {
                                this.wingFrame = 4;
                                this.wingFrameCounter = 0;
                            }
                        }
                    }
                    else if (this.wings == 12)
                    {
                        if (flag22 || this.jump > 0)
                        {
                            this.wingFrameCounter++;
                            int num91 = 5;
                            if (this.wingFrameCounter < num91)
                            {
                                this.wingFrame = 1;
                            }
                            else if (this.wingFrameCounter < num91 * 2)
                            {
                                this.wingFrame = 2;
                            }
                            else if (this.wingFrameCounter < num91 * 3)
                            {
                                this.wingFrame = 3;
                            }
                            else if (this.wingFrameCounter < num91 * 4 - 1)
                            {
                                this.wingFrame = 2;
                            }
                            else
                            {
                                this.wingFrame = 2;
                                this.wingFrameCounter = 0;
                            }
                        }
                        else if (this.velocity.Y != 0f)
                        {
                            this.wingFrame = 2;
                        }
                        else
                        {
                            this.wingFrame = 0;
                        }
                    }
                    else if (this.wings == 24)
                    {
                        if (flag22 || this.jump > 0)
                        {
                            this.wingFrameCounter++;
                            int num92 = 1;
                            if (this.wingFrameCounter < num92)
                            {
                                this.wingFrame = 1;
                            }
                            else if (this.wingFrameCounter < num92 * 2)
                            {
                                this.wingFrame = 2;
                            }
                            else if (this.wingFrameCounter < num92 * 3)
                            {
                                this.wingFrame = 3;
                            }
                            else
                            {
                                this.wingFrame = 2;
                                if (this.wingFrameCounter >= num92 * 4 - 1)
                                {
                                    this.wingFrameCounter = 0;
                                }
                            }
                        }
                        else if (this.velocity.Y != 0f)
                        {
                            if (this.controlJump)
                            {
                                this.wingFrameCounter++;
                                int num93 = 3;
                                if (this.wingFrameCounter < num93)
                                {
                                    this.wingFrame = 1;
                                }
                                else if (this.wingFrameCounter < num93 * 2)
                                {
                                    this.wingFrame = 2;
                                }
                                else if (this.wingFrameCounter < num93 * 3)
                                {
                                    this.wingFrame = 3;
                                }
                                else
                                {
                                    this.wingFrame = 2;
                                    if (this.wingFrameCounter >= num93 * 4 - 1)
                                    {
                                        this.wingFrameCounter = 0;
                                    }
                                }
                            }
                            else if (this.wingTime == 0f)
                            {
                                this.wingFrame = 0;
                            }
                            else
                            {
                                this.wingFrame = 1;
                            }
                        }
                        else
                        {
                            this.wingFrame = 0;
                        }
                    }
                    else if (this.wings == 30)
                    {
                        bool flag23 = false;
                        if (flag22 || this.jump > 0)
                        {
                            this.wingFrameCounter++;
                            int num94 = 2;
                            if (this.wingFrameCounter >= num94 * 3)
                            {
                                this.wingFrameCounter = 0;
                            }
                            this.wingFrame = 1 + this.wingFrameCounter / num94;
                            flag23 = true;
                        }
                        else if (this.velocity.Y != 0f)
                        {
                            if (this.controlJump)
                            {
                                this.wingFrameCounter++;
                                int num95 = 2;
                                if (this.wingFrameCounter >= num95 * 3)
                                {
                                    this.wingFrameCounter = 0;
                                }
                                this.wingFrame = 1 + this.wingFrameCounter / num95;
                                flag23 = true;
                            }
                            else if (this.wingTime == 0f)
                            {
                                this.wingFrame = 0;
                            }
                            else
                            {
                                this.wingFrame = 0;
                            }
                        }
                        else
                        {
                            this.wingFrame = 0;
                        }
                        if (flag23)
                        {
                            for (int num96 = 0; num96 < 4; num96++)
                            {
                                if (Main.rand.Next(4) == 0)
                                {
                                    Vector2 value = (-0.745398164f + 0.3926991f * (float)num96 + 0.03f * (float)num96).ToRotationVector2() * new Vector2((float)(-(float)this.direction * 20), 20f);
                                    Dust dust7 = Main.dust[Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, Color.White, 0.8f)];
                                    dust7.noGravity = true;
                                    dust7.position = base.Center + value;
                                    dust7.velocity = base.DirectionTo(dust7.position) * 2f;
                                    if (Main.rand.Next(10) != 0)
                                    {
                                        dust7.customData = this;
                                    }
                                    else
                                    {
                                        dust7.fadeIn = 0.5f;
                                    }
                                    dust7.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                }
                            }
                            for (int num97 = 0; num97 < 4; num97++)
                            {
                                if (Main.rand.Next(8) == 0)
                                {
                                    Vector2 value2 = (-0.7053982f + 0.3926991f * (float)num97 + 0.03f * (float)num97).ToRotationVector2() * new Vector2((float)(this.direction * 20), 24f) + new Vector2((float)(-(float)this.direction) * 16f, 0f);
                                    Dust dust8 = Main.dust[Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, Color.White, 0.5f)];
                                    dust8.noGravity = true;
                                    dust8.position = base.Center + value2;
                                    dust8.velocity = Vector2.Normalize(dust8.position - base.Center - new Vector2((float)(-(float)this.direction) * 16f, 0f)) * 2f;
                                    dust8.position += dust8.velocity * 5f;
                                    if (Main.rand.Next(10) != 0)
                                    {
                                        dust8.customData = this;
                                    }
                                    else
                                    {
                                        dust8.fadeIn = 0.5f;
                                    }
                                    dust8.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                }
                            }
                        }
                    }
                    else if (this.wings == 34)
                    {
                        if (flag22 || this.jump > 0)
                        {
                            this.wingFrameCounter++;
                            int num98 = 4;
                            if (this.wingFrameCounter >= num98 * 6)
                            {
                                this.wingFrameCounter = 0;
                            }
                            this.wingFrame = this.wingFrameCounter / num98;
                        }
                        else if (this.velocity.Y != 0f)
                        {
                            if (this.controlJump)
                            {
                                this.wingFrameCounter++;
                                int num99 = 9;
                                if (this.wingFrameCounter >= num99 * 6)
                                {
                                    this.wingFrameCounter = 0;
                                }
                                this.wingFrame = this.wingFrameCounter / num99;
                            }
                            else
                            {
                                this.wingFrameCounter++;
                                int num100 = 6;
                                if (this.wingFrameCounter >= num100 * 6)
                                {
                                    this.wingFrameCounter = 0;
                                }
                                this.wingFrame = this.wingFrameCounter / num100;
                            }
                        }
                        else
                        {
                            this.wingFrameCounter++;
                            int num101 = 4;
                            if (this.wingFrameCounter >= num101 * 6)
                            {
                                this.wingFrameCounter = 0;
                            }
                            this.wingFrame = this.wingFrameCounter / num101;
                        }
                    }
                    else if (this.wings == 33)
                    {
                        bool flag24 = false;
                        if (flag22 || this.jump > 0)
                        {
                            flag24 = true;
                        }
                        else if (this.velocity.Y != 0f && this.controlJump)
                        {
                            flag24 = true;
                        }
                        if (flag24)
                        {
                            Color newColor = Main.hslToRgb(Main.rgbToHsl(this.eyeColor).X, 1f, 0.5f);
                            int num102 = (this.direction == 1) ? 0 : -4;
                            for (int num103 = 0; num103 < 2; num103++)
                            {
                                Dust dust9 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 182, this.velocity.X, this.velocity.Y, 127, newColor, 1f)];
                                dust9.noGravity = true;
                                dust9.fadeIn = 1f;
                                dust9.scale = 1f;
                                dust9.noLight = true;
                                if (num103 == 0)
                                {
                                    dust9.position = new Vector2(this.position.X + (float)num102, this.position.Y + (float)this.height);
                                    dust9.velocity.X = dust9.velocity.X * 1f - 2f - this.velocity.X * 0.3f;
                                    dust9.velocity.Y = dust9.velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
                                }
                                else if (num103 == 1)
                                {
                                    dust9.position = new Vector2(this.position.X + (float)this.width + (float)num102, this.position.Y + (float)this.height);
                                    dust9.velocity.X = dust9.velocity.X * 1f + 2f - this.velocity.X * 0.3f;
                                    dust9.velocity.Y = dust9.velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
                                }
                                Dust dust10 = Dust.CloneDust(dust9);
                                dust10.scale *= 0.65f;
                                dust10.fadeIn *= 0.65f;
                                dust10.color = new Color(255, 255, 255, 255);
                                dust9.noLight = true;
                                dust9.shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                            }
                        }
                    }
                    else
                    {
                        int num104 = 4;
                        if (this.wings == 32)
                        {
                            num104 = 3;
                        }
                        if (flag22 || this.jump > 0)
                        {
                            this.wingFrameCounter++;
                            if (this.wingFrameCounter > num104)
                            {
                                this.wingFrame++;
                                this.wingFrameCounter = 0;
                                if (this.wingFrame >= 4)
                                {
                                    this.wingFrame = 0;
                                }
                            }
                        }
                        else if (this.velocity.Y != 0f)
                        {
                            this.wingFrame = 1;
                            if (this.wings == 32)
                            {
                                this.wingFrame = 3;
                            }
                            if (this.wings == 29 && Main.rand.Next(5) == 0)
                            {
                                int num105 = 4;
                                if (this.direction == 1)
                                {
                                    num105 = -40;
                                }
                                int num106 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num105, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
                                Main.dust[num106].noGravity = true;
                                Main.dust[num106].velocity *= 0.3f;
                                if (Main.rand.Next(10) == 0)
                                {
                                    Main.dust[num106].fadeIn = 2f;
                                }
                                Main.dust[num106].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                            }
                        }
                        else
                        {
                            this.wingFrame = 0;
                        }
                    }
                    if (this.wingsLogic > 0 && this.rocketBoots > 0 && this.velocity.Y != 0f)
                    {
                        this.wingTime += (float)(this.rocketTime * 6);
                        this.rocketTime = 0;
                    }
                    if (flag22 && this.wings != 4 && this.wings != 22 && this.wings != 0 && this.wings != 24 && this.wings != 28 && this.wings != 30 && this.wings != 33)
                    {
                        if (this.wingFrame == 3)
                        {
                            if (!this.flapSound)
                            {
                                Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 32);
                            }
                            this.flapSound = true;
                        }
                        else
                        {
                            this.flapSound = false;
                        }
                    }
                    if (this.velocity.Y == 0f || this.sliding || (this.autoJump && this.justJumped))
                    {
                        this.rocketTime = this.rocketTimeMax;
                    }
                    if ((this.wingTime == 0f || this.wingsLogic == 0) && this.rocketBoots > 0 && this.controlJump && this.rocketDelay == 0 && this.canRocket && this.rocketRelease && !this.jumpAgainCloud)
                    {
                        if (this.rocketTime > 0)
                        {
                            this.rocketTime--;
                            this.rocketDelay = 10;
                            if (this.rocketDelay2 <= 0)
                            {
                                if (this.rocketBoots == 1)
                                {
                                    Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 13);
                                    this.rocketDelay2 = 30;
                                }
                                else if (this.rocketBoots == 2 || this.rocketBoots == 3)
                                {
                                    Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 24);
                                    this.rocketDelay2 = 15;
                                }
                            }
                        }
                        else
                        {
                            this.canRocket = false;
                        }
                    }
                    if (this.rocketDelay2 > 0)
                    {
                        this.rocketDelay2--;
                    }
                    if (this.rocketDelay == 0)
                    {
                        this.rocketFrame = false;
                    }
                    if (this.rocketDelay > 0)
                    {
                        int num107 = this.height;
                        if (this.gravDir == -1f)
                        {
                            num107 = 4;
                        }
                        this.rocketFrame = true;
                        for (int num108 = 0; num108 < 2; num108++)
                        {
                            int type2 = 6;
                            float scale2 = 2.5f;
                            int alpha2 = 100;
                            if (this.rocketBoots == 2)
                            {
                                type2 = 16;
                                scale2 = 1.5f;
                                alpha2 = 20;
                            }
                            else if (this.rocketBoots == 3)
                            {
                                type2 = 76;
                                scale2 = 1f;
                                alpha2 = 20;
                            }
                            else if (this.socialShadow)
                            {
                                type2 = 27;
                                scale2 = 1.5f;
                            }
                            if (num108 == 0)
                            {
                                int num109 = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y + (float)num107 - 10f), 8, 8, type2, 0f, 0f, alpha2, default(Color), scale2);
                                Main.dust[num109].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                                if (this.rocketBoots == 1)
                                {
                                    Main.dust[num109].noGravity = true;
                                }
                                Main.dust[num109].velocity.X = Main.dust[num109].velocity.X * 1f - 2f - this.velocity.X * 0.3f;
                                Main.dust[num109].velocity.Y = Main.dust[num109].velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
                                if (this.rocketBoots == 2)
                                {
                                    Main.dust[num109].velocity *= 0.1f;
                                }
                                if (this.rocketBoots == 3)
                                {
                                    Main.dust[num109].velocity *= 0.05f;
                                    Dust expr_6EBF_cp_0 = Main.dust[num109];
                                    expr_6EBF_cp_0.velocity.Y = expr_6EBF_cp_0.velocity.Y + 0.15f;
                                    Main.dust[num109].noLight = true;
                                    if (Main.rand.Next(2) == 0)
                                    {
                                        Main.dust[num109].noGravity = true;
                                        Main.dust[num109].scale = 1.75f;
                                    }
                                }
                            }
                            else
                            {
                                int num110 = Dust.NewDust(new Vector2(this.position.X + (float)this.width - 4f, this.position.Y + (float)num107 - 10f), 8, 8, type2, 0f, 0f, alpha2, default(Color), scale2);
                                Main.dust[num110].shader = GameShaders.Armor.GetSecondaryShader(this.cShoe, this);
                                if (this.rocketBoots == 1)
                                {
                                    Main.dust[num110].noGravity = true;
                                }
                                Main.dust[num110].velocity.X = Main.dust[num110].velocity.X * 1f + 2f - this.velocity.X * 0.3f;
                                Main.dust[num110].velocity.Y = Main.dust[num110].velocity.Y * 1f + 2f * this.gravDir - this.velocity.Y * 0.3f;
                                if (this.rocketBoots == 2)
                                {
                                    Main.dust[num110].velocity *= 0.1f;
                                }
                                if (this.rocketBoots == 3)
                                {
                                    Main.dust[num110].velocity *= 0.05f;
                                    Dust expr_7086_cp_0 = Main.dust[num110];
                                    expr_7086_cp_0.velocity.Y = expr_7086_cp_0.velocity.Y + 0.15f;
                                    Main.dust[num110].noLight = true;
                                    if (Main.rand.Next(2) == 0)
                                    {
                                        Main.dust[num110].noGravity = true;
                                        Main.dust[num110].scale = 1.75f;
                                    }
                                }
                            }
                        }
                        if (this.rocketDelay == 0)
                        {
                            this.releaseJump = true;
                        }
                        this.rocketDelay--;
                        this.velocity.Y = this.velocity.Y - 0.1f * this.gravDir;
                        if (this.gravDir == 1f)
                        {
                            if (this.velocity.Y > 0f)
                            {
                                this.velocity.Y = this.velocity.Y - 0.5f;
                            }
                            else if ((double)this.velocity.Y > (double)(-(double)Player.jumpSpeed) * 0.5)
                            {
                                this.velocity.Y = this.velocity.Y - 0.1f;
                            }
                            if (this.velocity.Y < -Player.jumpSpeed * 1.5f)
                            {
                                this.velocity.Y = -Player.jumpSpeed * 1.5f;
                            }
                        }
                        else
                        {
                            if (this.velocity.Y < 0f)
                            {
                                this.velocity.Y = this.velocity.Y + 0.5f;
                            }
                            else if ((double)this.velocity.Y < (double)Player.jumpSpeed * 0.5)
                            {
                                this.velocity.Y = this.velocity.Y + 0.1f;
                            }
                            if (this.velocity.Y > Player.jumpSpeed * 1.5f)
                            {
                                this.velocity.Y = Player.jumpSpeed * 1.5f;
                            }
                        }
                    }
                    else if (!flag22)
                    {
                        if (this.mount.CanHover)
                        {
                            this.mount.Hover(this);
                        }
                        else if (this.mount.CanFly && this.controlJump && this.jump == 0)
                        {
                            if (this.mount.Flight())
                            {
                                if (this.controlDown)
                                {
                                    this.velocity.Y = this.velocity.Y * 0.9f;
                                    if (this.velocity.Y > -1f && (double)this.velocity.Y < 0.5)
                                    {
                                        this.velocity.Y = 1E-05f;
                                    }
                                }
                                else
                                {
                                    if (this.velocity.Y > 0f)
                                    {
                                        this.velocity.Y = this.velocity.Y - 0.5f;
                                    }
                                    else if ((double)this.velocity.Y > (double)(-(double)Player.jumpSpeed) * 1.5)
                                    {
                                        this.velocity.Y = this.velocity.Y - 0.1f;
                                    }
                                    if (this.velocity.Y < -Player.jumpSpeed * 1.5f)
                                    {
                                        this.velocity.Y = -Player.jumpSpeed * 1.5f;
                                    }
                                }
                            }
                            else
                            {
                                this.velocity.Y = this.velocity.Y + this.gravity / 3f * this.gravDir;
                                if (this.gravDir == 1f)
                                {
                                    if (this.velocity.Y > this.maxFallSpeed / 3f && !this.controlDown)
                                    {
                                        this.velocity.Y = this.maxFallSpeed / 3f;
                                    }
                                }
                                else if (this.velocity.Y < -this.maxFallSpeed / 3f && !this.controlUp)
                                {
                                    this.velocity.Y = -this.maxFallSpeed / 3f;
                                }
                            }
                        }
                        else if (this.slowFall && ((!this.controlDown && this.gravDir == 1f) || (!this.controlDown && this.gravDir == -1f)))
                        {
                            if ((this.controlUp && this.gravDir == 1f) || (this.controlUp && this.gravDir == -1f))
                            {
                                this.gravity = this.gravity / 10f * this.gravDir;
                            }
                            else
                            {
                                this.gravity = this.gravity / 3f * this.gravDir;
                            }
                            this.velocity.Y = this.velocity.Y + this.gravity;
                        }
                        else if (this.wingsLogic > 0 && this.controlJump && this.velocity.Y > 0f)
                        {
                            this.fallStart = (int)(this.position.Y / 16f);
                            if (this.velocity.Y > 0f)
                            {
                                if (this.wings == 10 && Main.rand.Next(3) == 0)
                                {
                                    int num111 = 4;
                                    if (this.direction == 1)
                                    {
                                        num111 = -40;
                                    }
                                    int num112 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num111, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 76, 0f, 0f, 50, default(Color), 0.6f);
                                    Main.dust[num112].fadeIn = 1.1f;
                                    Main.dust[num112].noGravity = true;
                                    Main.dust[num112].noLight = true;
                                    Main.dust[num112].velocity *= 0.3f;
                                    Main.dust[num112].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                }
                                if (this.wings == 34 && Main.rand.Next(3) == 0)
                                {
                                    int num113 = 4;
                                    if (this.direction == 1)
                                    {
                                        num113 = -40;
                                    }
                                    int num114 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num113, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 261, 0f, 0f, 50, default(Color), 0.6f);
                                    Main.dust[num114].fadeIn = 1.1f;
                                    Main.dust[num114].noGravity = true;
                                    Main.dust[num114].noLight = true;
                                    Main.dust[num114].velocity *= 0.3f;
                                    Main.dust[num114].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                }
                                if (this.wings == 9 && Main.rand.Next(3) == 0)
                                {
                                    int num115 = 8;
                                    if (this.direction == 1)
                                    {
                                        num115 = -40;
                                    }
                                    int num116 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num115, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 200, default(Color), 2f);
                                    Main.dust[num116].noGravity = true;
                                    Main.dust[num116].velocity *= 0.3f;
                                    Main.dust[num116].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                }
                                if (this.wings == 29 && Main.rand.Next(3) == 0)
                                {
                                    int num117 = 8;
                                    if (this.direction == 1)
                                    {
                                        num117 = -40;
                                    }
                                    int num118 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num117, this.position.Y + (float)(this.height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
                                    Main.dust[num118].noGravity = true;
                                    Main.dust[num118].velocity *= 0.3f;
                                    if (Main.rand.Next(10) == 0)
                                    {
                                        Main.dust[num118].fadeIn = 2f;
                                    }
                                    Main.dust[num118].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                }
                                if (this.wings == 6)
                                {
                                    if (Main.rand.Next(10) == 0)
                                    {
                                        int num119 = 4;
                                        if (this.direction == 1)
                                        {
                                            num119 = -40;
                                        }
                                        int num120 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num119, this.position.Y + (float)(this.height / 2) - 12f), 30, 20, 55, 0f, 0f, 200, default(Color), 1f);
                                        Main.dust[num120].velocity *= 0.3f;
                                        Main.dust[num120].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                    }
                                }
                                else if (this.wings == 5 && Main.rand.Next(6) == 0)
                                {
                                    int num121 = 6;
                                    if (this.direction == 1)
                                    {
                                        num121 = -30;
                                    }
                                    int num122 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num121, this.position.Y), 18, this.height, 58, 0f, 0f, 255, default(Color), 1.2f);
                                    Main.dust[num122].velocity *= 0.3f;
                                    Main.dust[num122].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                }
                                if (this.wings == 4)
                                {
                                    this.rocketDelay2--;
                                    if (this.rocketDelay2 <= 0)
                                    {
                                        Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 13);
                                        this.rocketDelay2 = 60;
                                    }
                                    int type3 = 6;
                                    float scale3 = 1.5f;
                                    int alpha3 = 100;
                                    float x4 = this.position.X + (float)(this.width / 2) + 16f;
                                    if (this.direction > 0)
                                    {
                                        x4 = this.position.X + (float)(this.width / 2) - 26f;
                                    }
                                    float num123 = this.position.Y + (float)this.height - 18f;
                                    if (Main.rand.Next(2) == 1)
                                    {
                                        x4 = this.position.X + (float)(this.width / 2) + 8f;
                                        if (this.direction > 0)
                                        {
                                            x4 = this.position.X + (float)(this.width / 2) - 20f;
                                        }
                                        num123 += 6f;
                                    }
                                    int num124 = Dust.NewDust(new Vector2(x4, num123), 8, 8, type3, 0f, 0f, alpha3, default(Color), scale3);
                                    Dust expr_7C2F_cp_0 = Main.dust[num124];
                                    expr_7C2F_cp_0.velocity.X = expr_7C2F_cp_0.velocity.X * 0.3f;
                                    Dust expr_7C4D_cp_0 = Main.dust[num124];
                                    expr_7C4D_cp_0.velocity.Y = expr_7C4D_cp_0.velocity.Y + 10f;
                                    Main.dust[num124].noGravity = true;
                                    Main.dust[num124].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                    this.wingFrameCounter++;
                                    if (this.wingFrameCounter > 4)
                                    {
                                        this.wingFrame++;
                                        this.wingFrameCounter = 0;
                                        if (this.wingFrame >= 3)
                                        {
                                            this.wingFrame = 0;
                                        }
                                    }
                                }
                                else if (this.wings != 22 && this.wings != 28)
                                {
                                    if (this.wings == 30)
                                    {
                                        this.wingFrameCounter++;
                                        int num125 = 5;
                                        if (this.wingFrameCounter >= num125 * 3)
                                        {
                                            this.wingFrameCounter = 0;
                                        }
                                        this.wingFrame = 1 + this.wingFrameCounter / num125;
                                    }
                                    else if (this.wings == 34)
                                    {
                                        this.wingFrameCounter++;
                                        int num126 = 7;
                                        if (this.wingFrameCounter >= num126 * 6)
                                        {
                                            this.wingFrameCounter = 0;
                                        }
                                        this.wingFrame = this.wingFrameCounter / num126;
                                    }
                                    else if (this.wings == 26)
                                    {
                                        int num127 = 6;
                                        if (this.direction == 1)
                                        {
                                            num127 = -30;
                                        }
                                        int num128 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num127, this.position.Y), 18, this.height, 217, 0f, 0f, 100, default(Color), 1.4f);
                                        Main.dust[num128].noGravity = true;
                                        Main.dust[num128].noLight = true;
                                        Main.dust[num128].velocity /= 4f;
                                        Main.dust[num128].velocity -= this.velocity;
                                        Main.dust[num128].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                        if (Main.rand.Next(2) == 0)
                                        {
                                            num127 = -24;
                                            if (this.direction == 1)
                                            {
                                                num127 = 12;
                                            }
                                            float num129 = this.position.Y;
                                            if (this.gravDir == -1f)
                                            {
                                                num129 += (float)(this.height / 2);
                                            }
                                            num128 = Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2) + (float)num127, num129), 12, this.height / 2, 217, 0f, 0f, 100, default(Color), 1.4f);
                                            Main.dust[num128].noGravity = true;
                                            Main.dust[num128].noLight = true;
                                            Main.dust[num128].velocity /= 4f;
                                            Main.dust[num128].velocity -= this.velocity;
                                            Main.dust[num128].shader = GameShaders.Armor.GetSecondaryShader(this.cWings, this);
                                        }
                                        this.wingFrame = 2;
                                    }
                                    else if (this.wings != 24)
                                    {
                                        if (this.wings == 12)
                                        {
                                            this.wingFrame = 3;
                                        }
                                        else
                                        {
                                            this.wingFrame = 2;
                                        }
                                    }
                                }
                            }
                            this.velocity.Y = this.velocity.Y + this.gravity / 3f * this.gravDir;
                            if (this.gravDir == 1f)
                            {
                                if (this.velocity.Y > this.maxFallSpeed / 3f && !this.controlDown)
                                {
                                    this.velocity.Y = this.maxFallSpeed / 3f;
                                }
                            }
                            else if (this.velocity.Y < -this.maxFallSpeed / 3f && !this.controlUp)
                            {
                                this.velocity.Y = -this.maxFallSpeed / 3f;
                            }
                        }
                        else if (this.cartRampTime <= 0)
                        {
                            this.velocity.Y = this.velocity.Y + this.gravity * this.gravDir;
                        }
                        else
                        {
                            this.cartRampTime--;
                        }
                    }
                    if (!this.mount.Active || this.mount.Type != 5)
                    {
                        if (this.gravDir == 1f)
                        {
                            if (this.velocity.Y > this.maxFallSpeed)
                            {
                                this.velocity.Y = this.maxFallSpeed;
                            }
                            if (this.slowFall && this.velocity.Y > this.maxFallSpeed / 3f && !this.controlDown)
                            {
                                this.velocity.Y = this.maxFallSpeed / 3f;
                            }
                            if (this.slowFall && this.velocity.Y > this.maxFallSpeed / 5f && this.controlUp)
                            {
                                this.velocity.Y = this.maxFallSpeed / 10f;
                            }
                        }
                        else
                        {
                            if (this.velocity.Y < -this.maxFallSpeed)
                            {
                                this.velocity.Y = -this.maxFallSpeed;
                            }
                            if (this.slowFall && this.velocity.Y < -this.maxFallSpeed / 3f && !this.controlDown)
                            {
                                this.velocity.Y = -this.maxFallSpeed / 3f;
                            }
                            if (this.slowFall && this.velocity.Y < -this.maxFallSpeed / 5f && this.controlUp)
                            {
                                this.velocity.Y = -this.maxFallSpeed / 10f;
                            }
                        }
                    }
                }
            }
            if (this.mount.Active)
            {
                this.wingFrame = 0;
            }
            if ((this.wingsLogic == 22 || this.wingsLogic == 28 || this.wingsLogic == 30 || this.wingsLogic == 32 || this.wingsLogic == 33 || this.wingsLogic == 35) && this.controlDown && this.controlJump && this.wingTime > 0f && !this.merman)
            {
                this.velocity.Y = this.velocity.Y * 0.9f;
                if (this.velocity.Y > -2f && this.velocity.Y < 1f)
                {
                    this.velocity.Y = 1E-05f;
                }
            }
            this.GrabItems(i);
            if (!Main.mapFullscreen)
            {
                if (this.position.X / 16f - (float)Player.tileRangeX <= (float)Player.tileTargetX && (this.position.X + (float)this.width) / 16f + (float)Player.tileRangeX - 1f >= (float)Player.tileTargetX && this.position.Y / 16f - (float)Player.tileRangeY <= (float)Player.tileTargetY && (this.position.Y + (float)this.height) / 16f + (float)Player.tileRangeY - 2f >= (float)Player.tileTargetY)
                {
                    if (Main.tile[Player.tileTargetX, Player.tileTargetY] == null)
                    {
                        Main.tile[Player.tileTargetX, Player.tileTargetY] = new Tile();
                    }
                    if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
                    {
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 79)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            int num130 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameY / 36);
                            if (num130 == 0)
                            {
                                this.showItemIcon2 = 224;
                            }
                            else if (num130 == 1)
                            {
                                this.showItemIcon2 = 644;
                            }
                            else if (num130 == 2)
                            {
                                this.showItemIcon2 = 645;
                            }
                            else if (num130 == 3)
                            {
                                this.showItemIcon2 = 646;
                            }
                            else if (num130 == 4)
                            {
                                this.showItemIcon2 = 920;
                            }
                            else if (num130 == 5)
                            {
                                this.showItemIcon2 = 1470;
                            }
                            else if (num130 == 6)
                            {
                                this.showItemIcon2 = 1471;
                            }
                            else if (num130 == 7)
                            {
                                this.showItemIcon2 = 1472;
                            }
                            else if (num130 == 8)
                            {
                                this.showItemIcon2 = 1473;
                            }
                            else if (num130 == 9)
                            {
                                this.showItemIcon2 = 1719;
                            }
                            else if (num130 == 10)
                            {
                                this.showItemIcon2 = 1720;
                            }
                            else if (num130 == 11)
                            {
                                this.showItemIcon2 = 1721;
                            }
                            else if (num130 == 12)
                            {
                                this.showItemIcon2 = 1722;
                            }
                            else if (num130 >= 13 && num130 <= 18)
                            {
                                this.showItemIcon2 = 2066 + num130 - 13;
                            }
                            else if (num130 >= 19 && num130 <= 20)
                            {
                                this.showItemIcon2 = 2139 + num130 - 19;
                            }
                            else if (num130 == 21)
                            {
                                this.showItemIcon2 = 2231;
                            }
                            else if (num130 == 22)
                            {
                                this.showItemIcon2 = 2520;
                            }
                            else if (num130 == 23)
                            {
                                this.showItemIcon2 = 2538;
                            }
                            else if (num130 == 24)
                            {
                                this.showItemIcon2 = 2553;
                            }
                            else if (num130 == 25)
                            {
                                this.showItemIcon2 = 2568;
                            }
                            else if (num130 == 26)
                            {
                                this.showItemIcon2 = 2669;
                            }
                            else if (num130 == 27)
                            {
                                this.showItemIcon2 = 2811;
                            }
                            else if (num130 == 28)
                            {
                                this.showItemIcon2 = 3162;
                            }
                            else if (num130 == 29)
                            {
                                this.showItemIcon2 = 3164;
                            }
                            else if (num130 == 30)
                            {
                                this.showItemIcon2 = 3163;
                            }
                            else
                            {
                                this.showItemIcon2 = 646;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 33)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 105;
                            int num131 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameY / 22);
                            if (num131 == 1)
                            {
                                this.showItemIcon2 = 1405;
                            }
                            if (num131 == 2)
                            {
                                this.showItemIcon2 = 1406;
                            }
                            if (num131 == 3)
                            {
                                this.showItemIcon2 = 1407;
                            }
                            if (num131 >= 4 && num131 <= 13)
                            {
                                this.showItemIcon2 = 2045 + num131 - 4;
                            }
                            if (num131 >= 14 && num131 <= 16)
                            {
                                this.showItemIcon2 = 2153 + num131 - 14;
                            }
                            if (num131 == 17)
                            {
                                this.showItemIcon2 = 2236;
                            }
                            if (num131 == 18)
                            {
                                this.showItemIcon2 = 2523;
                            }
                            if (num131 == 19)
                            {
                                this.showItemIcon2 = 2542;
                            }
                            if (num131 == 20)
                            {
                                this.showItemIcon2 = 2556;
                            }
                            if (num131 == 21)
                            {
                                this.showItemIcon2 = 2571;
                            }
                            if (num131 == 22)
                            {
                                this.showItemIcon2 = 2648;
                            }
                            if (num131 == 23)
                            {
                                this.showItemIcon2 = 2649;
                            }
                            if (num131 == 24)
                            {
                                this.showItemIcon2 = 2650;
                            }
                            if (num131 == 25)
                            {
                                this.showItemIcon2 = 2651;
                            }
                            else if (num131 == 26)
                            {
                                this.showItemIcon2 = 2818;
                            }
                            else if (num131 == 27)
                            {
                                this.showItemIcon2 = 3171;
                            }
                            else if (num131 == 28)
                            {
                                this.showItemIcon2 = 3173;
                            }
                            else if (num131 == 29)
                            {
                                this.showItemIcon2 = 3172;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 21)
                        {
                            Tile tile = Main.tile[Player.tileTargetX, Player.tileTargetY];
                            int num132 = Player.tileTargetX;
                            int num133 = Player.tileTargetY;
                            if (tile.frameX % 36 != 0)
                            {
                                num132--;
                            }
                            if (tile.frameY % 36 != 0)
                            {
                                num133--;
                            }
                            int num134 = Chest.FindChest(num132, num133);
                            this.showItemIcon2 = -1;
                            if (num134 < 0)
                            {
                                this.showItemIconText = Lang.chestType[0];
                            }
                            else
                            {
                                if (Main.chest[num134].name != "")
                                {
                                    this.showItemIconText = Main.chest[num134].name;
                                }
                                else
                                {
                                    this.showItemIconText = Lang.chestType[(int)(tile.frameX / 36)];
                                }
                                if (this.showItemIconText == Lang.chestType[(int)(tile.frameX / 36)])
                                {
                                    this.showItemIcon2 = Chest.chestTypeToIcon[(int)(tile.frameX / 36)];
                                    this.showItemIconText = "";
                                }
                            }
                            this.noThrow = 2;
                            this.showItemIcon = true;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 88)
                        {
                            Tile tile2 = Main.tile[Player.tileTargetX, Player.tileTargetY];
                            int num135 = Player.tileTargetX;
                            int num136 = Player.tileTargetY;
                            num135 -= (int)(tile2.frameX % 54 / 18);
                            if (tile2.frameY % 36 != 0)
                            {
                                num136--;
                            }
                            int num137 = Chest.FindChest(num135, num136);
                            this.showItemIcon2 = -1;
                            if (num137 < 0)
                            {
                                this.showItemIconText = Lang.dresserType[0];
                            }
                            else
                            {
                                if (Main.chest[num137].name != "")
                                {
                                    this.showItemIconText = Main.chest[num137].name;
                                }
                                else
                                {
                                    this.showItemIconText = Lang.dresserType[(int)(tile2.frameX / 54)];
                                }
                                if (this.showItemIconText == Lang.dresserType[(int)(tile2.frameX / 54)])
                                {
                                    this.showItemIcon2 = Chest.dresserTypeToIcon[(int)(tile2.frameX / 54)];
                                    this.showItemIconText = "";
                                }
                            }
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameY > 0)
                            {
                                this.showItemIcon2 = 269;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 10 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 11)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            int num138 = (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
                            int num139 = 0;
                            while (num138 >= 54)
                            {
                                num138 -= 54;
                                num139++;
                            }
                            if (num139 == 0)
                            {
                                this.showItemIcon2 = 25;
                            }
                            else if (num139 == 9)
                            {
                                this.showItemIcon2 = 837;
                            }
                            else if (num139 == 10)
                            {
                                this.showItemIcon2 = 912;
                            }
                            else if (num139 == 11)
                            {
                                this.showItemIcon2 = 1141;
                            }
                            else if (num139 == 12)
                            {
                                this.showItemIcon2 = 1137;
                            }
                            else if (num139 == 13)
                            {
                                this.showItemIcon2 = 1138;
                            }
                            else if (num139 == 14)
                            {
                                this.showItemIcon2 = 1139;
                            }
                            else if (num139 == 15)
                            {
                                this.showItemIcon2 = 1140;
                            }
                            else if (num139 == 16)
                            {
                                this.showItemIcon2 = 1411;
                            }
                            else if (num139 == 17)
                            {
                                this.showItemIcon2 = 1412;
                            }
                            else if (num139 == 18)
                            {
                                this.showItemIcon2 = 1413;
                            }
                            else if (num139 == 19)
                            {
                                this.showItemIcon2 = 1458;
                            }
                            else if (num139 >= 20 && num139 <= 23)
                            {
                                this.showItemIcon2 = 1709 + num139 - 20;
                            }
                            else if (num139 == 24)
                            {
                                this.showItemIcon2 = 1793;
                            }
                            else if (num139 == 25)
                            {
                                this.showItemIcon2 = 1815;
                            }
                            else if (num139 == 26)
                            {
                                this.showItemIcon2 = 1924;
                            }
                            else if (num139 == 27)
                            {
                                this.showItemIcon2 = 2044;
                            }
                            else if (num139 == 28)
                            {
                                this.showItemIcon2 = 2265;
                            }
                            else if (num139 == 29)
                            {
                                this.showItemIcon2 = 2528;
                            }
                            else if (num139 == 30)
                            {
                                this.showItemIcon2 = 2561;
                            }
                            else if (num139 == 31)
                            {
                                this.showItemIcon2 = 2576;
                            }
                            else if (num139 == 32)
                            {
                                this.showItemIcon2 = 2815;
                            }
                            else if (num139 == 33)
                            {
                                this.showItemIcon2 = 3129;
                            }
                            else if (num139 == 34)
                            {
                                this.showItemIcon2 = 3131;
                            }
                            else if (num139 == 35)
                            {
                                this.showItemIcon2 = 3130;
                            }
                            else if (num139 >= 4 && num139 <= 8)
                            {
                                this.showItemIcon2 = 812 + num139;
                            }
                            else
                            {
                                this.showItemIcon2 = 649 + num139;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 104)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            switch (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 36)
                            {
                                case 0:
                                    this.showItemIcon2 = 359;
                                    break;
                                case 1:
                                    this.showItemIcon2 = 2237;
                                    break;
                                case 2:
                                    this.showItemIcon2 = 2238;
                                    break;
                                case 3:
                                    this.showItemIcon2 = 2239;
                                    break;
                                case 4:
                                    this.showItemIcon2 = 2240;
                                    break;
                                case 5:
                                    this.showItemIcon2 = 2241;
                                    break;
                                case 6:
                                    this.showItemIcon2 = 2560;
                                    break;
                                case 7:
                                    this.showItemIcon2 = 2575;
                                    break;
                                case 8:
                                    this.showItemIcon2 = 2591;
                                    break;
                                case 9:
                                    this.showItemIcon2 = 2592;
                                    break;
                                case 10:
                                    this.showItemIcon2 = 2593;
                                    break;
                                case 11:
                                    this.showItemIcon2 = 2594;
                                    break;
                                case 12:
                                    this.showItemIcon2 = 2595;
                                    break;
                                case 13:
                                    this.showItemIcon2 = 2596;
                                    break;
                                case 14:
                                    this.showItemIcon2 = 2597;
                                    break;
                                case 15:
                                    this.showItemIcon2 = 2598;
                                    break;
                                case 16:
                                    this.showItemIcon2 = 2599;
                                    break;
                                case 17:
                                    this.showItemIcon2 = 2600;
                                    break;
                                case 18:
                                    this.showItemIcon2 = 2601;
                                    break;
                                case 19:
                                    this.showItemIcon2 = 2602;
                                    break;
                                case 20:
                                    this.showItemIcon2 = 2603;
                                    break;
                                case 21:
                                    this.showItemIcon2 = 2604;
                                    break;
                                case 22:
                                    this.showItemIcon2 = 2605;
                                    break;
                                case 23:
                                    this.showItemIcon2 = 2606;
                                    break;
                                case 24:
                                    this.showItemIcon2 = 2809;
                                    break;
                                case 25:
                                    this.showItemIcon2 = 3126;
                                    break;
                                case 26:
                                    this.showItemIcon2 = 3128;
                                    break;
                                case 27:
                                    this.showItemIcon2 = 3127;
                                    break;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 356)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 3064;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 377)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 3198;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 209)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 72)
                            {
                                this.showItemIcon2 = 928;
                            }
                            else if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 144)
                            {
                                this.showItemIcon2 = 1337;
                            }
                            else if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 216)
                            {
                                this.showItemIcon2 = 3369;
                            }
                            int num140;
                            for (num140 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 18); num140 >= 4; num140 -= 4)
                            {
                            }
                            if (num140 < 2)
                            {
                                this.showItemIconR = true;
                            }
                            else
                            {
                                this.showItemIconR = false;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 216)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            int num141 = (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
                            int num142 = 0;
                            while (num141 >= 40)
                            {
                                num141 -= 40;
                                num142++;
                            }
                            this.showItemIcon2 = 970 + num142;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 387 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 386)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            int num143 = 0;
                            int num144 = 0;
                            WorldGen.GetTopLeftAndStyles(ref num143, ref num144, 2, 1 + (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 386).ToInt(), 18, 18);
                            this.showItemIcon2 = 3239;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 389 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 388)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 3240;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 335)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 2700;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 410)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 3536 + Math.Min((int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 36), 3);
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 411 && Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 36)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 3545;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 338)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 2738;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 219 && (this.inventory[this.selectedItem].itemId == 424 || this.inventory[this.selectedItem].itemId == 1103))
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = this.inventory[this.selectedItem].itemId;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 212)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 949;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 314 && this.gravDir == 1f)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 2343;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 215)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            int num145 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 54);
                            if (num145 == 0)
                            {
                                this.showItemIcon2 = 966;
                            }
                            else if (num145 == 6)
                            {
                                this.showItemIcon2 = 3050;
                            }
                            else
                            {
                                this.showItemIcon2 = 3046 + num145 - 1;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 4)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            int num146 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameY / 22);
                            if (num146 == 0)
                            {
                                this.showItemIcon2 = 8;
                            }
                            else if (num146 == 8)
                            {
                                this.showItemIcon2 = 523;
                            }
                            else if (num146 == 9)
                            {
                                this.showItemIcon2 = 974;
                            }
                            else if (num146 == 10)
                            {
                                this.showItemIcon2 = 1245;
                            }
                            else if (num146 == 11)
                            {
                                this.showItemIcon2 = 1333;
                            }
                            else if (num146 == 12)
                            {
                                this.showItemIcon2 = 2274;
                            }
                            else if (num146 == 13)
                            {
                                this.showItemIcon2 = 3004;
                            }
                            else if (num146 == 14)
                            {
                                this.showItemIcon2 = 3045;
                            }
                            else if (num146 == 15)
                            {
                                this.showItemIcon2 = 3114;
                            }
                            else
                            {
                                this.showItemIcon2 = 426 + num146;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 13)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            int num147 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 18);
                            if (num147 == 1)
                            {
                                this.showItemIcon2 = 28;
                            }
                            else if (num147 == 2)
                            {
                                this.showItemIcon2 = 110;
                            }
                            else if (num147 == 3)
                            {
                                this.showItemIcon2 = 350;
                            }
                            else if (num147 == 4)
                            {
                                this.showItemIcon2 = 351;
                            }
                            else if (num147 == 5)
                            {
                                this.showItemIcon2 = 2234;
                            }
                            else if (num147 == 6)
                            {
                                this.showItemIcon2 = 2244;
                            }
                            else if (num147 == 7)
                            {
                                this.showItemIcon2 = 2257;
                            }
                            else if (num147 == 8)
                            {
                                this.showItemIcon2 = 2258;
                            }
                            else
                            {
                                this.showItemIcon2 = 31;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 29)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 87;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 97)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 346;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 49)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 148;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 174)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 713;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 50)
                        {
                            this.noThrow = 2;
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX == 90)
                            {
                                this.showItemIcon = true;
                                this.showItemIcon2 = 165;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 139)
                        {
                            this.noThrow = 2;
                            int num148 = Player.tileTargetX;
                            int num149 = Player.tileTargetY;
                            int num150 = 0;
                            for (int num151 = (int)(Main.tile[num148, num149].frameY / 18); num151 >= 2; num151 -= 2)
                            {
                                num150++;
                            }
                            this.showItemIcon = true;
                            if (num150 == 28)
                            {
                                this.showItemIcon2 = 1963;
                            }
                            else if (num150 == 29)
                            {
                                this.showItemIcon2 = 1964;
                            }
                            else if (num150 == 30)
                            {
                                this.showItemIcon2 = 1965;
                            }
                            else if (num150 == 31)
                            {
                                this.showItemIcon2 = 2742;
                            }
                            else if (num150 == 32)
                            {
                                this.showItemIcon2 = 3044;
                            }
                            else if (num150 == 33)
                            {
                                this.showItemIcon2 = 3235;
                            }
                            else if (num150 == 34)
                            {
                                this.showItemIcon2 = 3236;
                            }
                            else if (num150 == 35)
                            {
                                this.showItemIcon2 = 3237;
                            }
                            else if (num150 == 36)
                            {
                                this.showItemIcon2 = 3370;
                            }
                            else if (num150 == 37)
                            {
                                this.showItemIcon2 = 3371;
                            }
                            else if (num150 >= 13)
                            {
                                this.showItemIcon2 = 1596 + num150 - 13;
                            }
                            else
                            {
                                this.showItemIcon2 = 562 + num150;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 207)
                        {
                            this.noThrow = 2;
                            int num152 = Player.tileTargetX;
                            int num153 = Player.tileTargetY;
                            int num154 = 0;
                            for (int num155 = (int)(Main.tile[num152, num153].frameX / 18); num155 >= 2; num155 -= 2)
                            {
                                num154++;
                            }
                            this.showItemIcon = true;
                            if (num154 == 0)
                            {
                                this.showItemIcon2 = 909;
                            }
                            else if (num154 == 1)
                            {
                                this.showItemIcon2 = 910;
                            }
                            else if (num154 == 2)
                            {
                                this.showItemIcon2 = 940;
                            }
                            else if (num154 == 3)
                            {
                                this.showItemIcon2 = 941;
                            }
                            else if (num154 == 4)
                            {
                                this.showItemIcon2 = 942;
                            }
                            else if (num154 == 5)
                            {
                                this.showItemIcon2 = 943;
                            }
                            else if (num154 == 6)
                            {
                                this.showItemIcon2 = 944;
                            }
                            else if (num154 == 7)
                            {
                                this.showItemIcon2 = 945;
                            }
                        }
                        if (Main.tileSign[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                        {
                            this.noThrow = 2;
                            int num156 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 18);
                            int num157 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameY / 18);
                            num156 %= 2;
                            int num158 = Player.tileTargetX - num156;
                            int num159 = Player.tileTargetY - num157;
                            Main.signBubble = true;
                            Main.signX = num158 * 16 + 16;
                            Main.signY = num159 * 16;
                            int num160 = Sign.ReadSign(num158, num159, false);
                            if (num160 != -1)
                            {
                                Main.signHover = num160;
                            }
                            if (num160 != -1)
                            {
                                Main.signHover = num160;
                                this.showItemIcon = false;
                                this.showItemIcon2 = -1;
                            }
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 237)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 1293;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 125)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 487;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 354)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 2999;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 287)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 2177;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 132)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 513;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 136)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = 538;
                        }
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 144)
                        {
                            this.noThrow = 2;
                            this.showItemIcon = true;
                            this.showItemIcon2 = (int)(583 + Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 18);
                        }
                        if (this.controlUseTile)
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 212 && this.launcherWait <= 0)
                            {
                                int num161 = Player.tileTargetX;
                                int num162 = Player.tileTargetY;
                                bool flag25 = false;
                                for (int num163 = 0; num163 < 58; num163++)
                                {
                                    if (this.inventory[num163].itemId == 949 && this.inventory[num163].stack > 0)
                                    {
                                        this.inventory[num163].stack--;
                                        if (this.inventory[num163].stack <= 0)
                                        {
                                            this.inventory[num163].SetDefaults(0, false);
                                        }
                                        flag25 = true;
                                        break;
                                    }
                                }
                                if (flag25)
                                {
                                    this.launcherWait = 10;
                                    Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 11);
                                    int num164 = (int)(Main.tile[num161, num162].frameX / 18);
                                    int num165 = 0;
                                    while (num164 >= 3)
                                    {
                                        num165++;
                                        num164 -= 3;
                                    }
                                    num164 = num161 - num164;
                                    int num166;
                                    for (num166 = (int)(Main.tile[num161, num162].frameY / 18); num166 >= 3; num166 -= 3)
                                    {
                                    }
                                    num166 = num162 - num166;
                                    float num167 = 12f + (float)Main.rand.Next(450) * 0.01f;
                                    float num168 = (float)Main.rand.Next(85, 105);
                                    float num169 = (float)Main.rand.Next(-35, 11);
                                    int type4 = 166;
                                    int damage2 = 35;
                                    float knockBack = 3.5f;
                                    Vector2 vector3 = new Vector2((float)((num164 + 2) * 16 - 8), (float)((num166 + 2) * 16 - 8));
                                    if (num165 == 0)
                                    {
                                        num168 *= -1f;
                                        vector3.X -= 12f;
                                    }
                                    else
                                    {
                                        vector3.X += 12f;
                                    }
                                    float num170 = num168;
                                    float num171 = num169;
                                    float num172 = (float)Math.Sqrt((double)(num170 * num170 + num171 * num171));
                                    num172 = num167 / num172;
                                    num170 *= num172;
                                    num171 *= num172;
                                    Projectile.NewProjectile(vector3.X, vector3.Y, num170, num171, type4, damage2, knockBack, Main.myPlayer, 0f, 0f);
                                }
                            }
                            if (this.releaseUseTile)
                            {
                                if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 132 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 136 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 144)
                                {
                                    Wiring.HitSwitch(Player.tileTargetX, Player.tileTargetY);
                                    NetMessage.SendData(59, -1, -1, "", Player.tileTargetX, (float)Player.tileTargetY, 0f, 0f, 0, 0, 0);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 139)
                                {
                                    Main.PlaySound(28, Player.tileTargetX * 16, Player.tileTargetY * 16, 0);
                                    WorldGen.SwitchMB(Player.tileTargetX, Player.tileTargetY);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 215)
                                {
                                    Main.PlaySound(28, Player.tileTargetX * 16, Player.tileTargetY * 16, 0);
                                    int num173 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX % 54 / 18);
                                    int num174 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameY % 36 / 18);
                                    int num175 = Player.tileTargetX - num173;
                                    int num176 = Player.tileTargetY - num174;
                                    int num177 = 36;
                                    if (Main.tile[num175, num176].frameY >= 36)
                                    {
                                        num177 = -36;
                                    }
                                    for (int num178 = num175; num178 < num175 + 3; num178++)
                                    {
                                        for (int num179 = num176; num179 < num176 + 2; num179++)
                                        {
                                            Main.tile[num178, num179].frameY = (short)((int)Main.tile[num178, num179].frameY + num177);
                                        }
                                    }
                                    NetMessage.SendTileSquare(-1, num175 + 1, num176 + 1, 3);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 207)
                                {
                                    Main.PlaySound(28, Player.tileTargetX * 16, Player.tileTargetY * 16, 0);
                                    WorldGen.SwitchFountain(Player.tileTargetX, Player.tileTargetY);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 410)
                                {
                                    Main.PlaySound(28, Player.tileTargetX * 16, Player.tileTargetY * 16, 0);
                                    WorldGen.SwitchMonolith(Player.tileTargetX, Player.tileTargetY);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 216)
                                {
                                    WorldGen.LaunchRocket(Player.tileTargetX, Player.tileTargetY);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 386 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 387)
                                {
                                    bool value3 = Main.tile[Player.tileTargetX, Player.tileTargetY].type == 387;
                                    int num180 = WorldGen.ShiftTrapdoor(Player.tileTargetX, Player.tileTargetY, (float)(Player.tileTargetY * 16) > base.Center.Y, -1).ToInt();
                                    if (num180 == 0)
                                    {
                                        num180 = -WorldGen.ShiftTrapdoor(Player.tileTargetX, Player.tileTargetY, (float)(Player.tileTargetY * 16) <= base.Center.Y, -1).ToInt();
                                    }
                                    if (num180 != 0)
                                    {
                                        NetMessage.SendData(19, -1, -1, "", 2 + value3.ToInt(), (float)Player.tileTargetX, (float)Player.tileTargetY, (float)(num180 * Math.Sign((float)(Player.tileTargetY * 16) - base.Center.Y)), 0, 0, 0);
                                    }
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 388 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 389)
                                {
                                    bool flag26 = Main.tile[Player.tileTargetX, Player.tileTargetY].type == 389;
                                    WorldGen.ShiftTallGate(Player.tileTargetX, Player.tileTargetY, flag26);
                                    NetMessage.SendData(19, -1, -1, "", 4 + flag26.ToInt(), (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 335)
                                {
                                    WorldGen.LaunchRocketSmall(Player.tileTargetX, Player.tileTargetY);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 411 && Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 36)
                                {
                                    Wiring.HitSwitch(Player.tileTargetX, Player.tileTargetY);
                                    NetMessage.SendData(59, -1, -1, "", Player.tileTargetX, (float)Player.tileTargetY, 0f, 0f, 0, 0, 0);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 338)
                                {
                                    int num181 = Player.tileTargetX;
                                    int num182 = Player.tileTargetY;
                                    if (Main.tile[num181, num182].frameY == 18)
                                    {
                                        num182--;
                                    }
                                    bool flag27 = false;
                                    for (int num183 = 0; num183 < 1000; num183++)
                                    {
                                        if (Main.projectile[num183].active && Main.projectile[num183].aiStyle == 73 && Main.projectile[num183].ai[0] == (float)num181 && Main.projectile[num183].ai[1] == (float)num182)
                                        {
                                            flag27 = true;
                                            break;
                                        }
                                    }
                                    if (!flag27)
                                    {
                                        Projectile.NewProjectile((float)(num181 * 16 + 8), (float)(num182 * 16 + 2), 0f, 0f, 419 + Main.rand.Next(4), 0, 0f, this.whoAmI, (float)num181, (float)num182);
                                    }
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 4 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 13 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 33 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 49 || (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 50 && Main.tile[Player.tileTargetX, Player.tileTargetY].frameX == 90) || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 174)
                                {
                                    WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
                                    if (Main.netMode == 1)
                                    {
                                        NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0f, 0, 0, 0);
                                    }
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 334)
                                {
                                    if (this.ItemFitsWeaponRack(this.inventory[this.selectedItem]))
                                    {
                                        this.PlaceWeapon(Player.tileTargetX, Player.tileTargetY);
                                    }
                                    else
                                    {
                                        int num184 = Player.tileTargetX;
                                        int num185 = Player.tileTargetY;
                                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameY == 0)
                                        {
                                            num185++;
                                        }
                                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameY == 36)
                                        {
                                            num185--;
                                        }
                                        int frameX = (int)Main.tile[Player.tileTargetX, num185].frameX;
                                        int num186 = (int)Main.tile[Player.tileTargetX, num185].frameX;
                                        int num187 = 0;
                                        while (num186 >= 5000)
                                        {
                                            num186 -= 5000;
                                            num187++;
                                        }
                                        if (num187 != 0)
                                        {
                                            num186 = (num187 - 1) * 18;
                                        }
                                        num186 %= 54;
                                        if (num186 == 18)
                                        {
                                            frameX = (int)Main.tile[Player.tileTargetX - 1, num185].frameX;
                                            num184--;
                                        }
                                        if (num186 == 36)
                                        {
                                            frameX = (int)Main.tile[Player.tileTargetX - 2, num185].frameX;
                                            num184 -= 2;
                                        }
                                        if (frameX >= 5000)
                                        {
                                            WorldGen.KillTile(Player.tileTargetX, num185, true, false, false);
                                            if (Main.netMode == 1)
                                            {
                                                NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)num185, 1f, 0, 0, 0);
                                            }
                                        }
                                    }
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 395)
                                {
                                    if (this.ItemFitsItemFrame(this.inventory[this.selectedItem]) && !this.inventory[this.selectedItem].favorited)
                                    {
                                        this.PlaceItemInFrame(Player.tileTargetX, Player.tileTargetY);
                                    }
                                    else
                                    {
                                        int num188 = Player.tileTargetX;
                                        int num189 = Player.tileTargetY;
                                        if (Main.tile[num188, num189].frameX % 36 != 0)
                                        {
                                            num188--;
                                        }
                                        if (Main.tile[num188, num189].frameY % 36 != 0)
                                        {
                                            num189--;
                                        }
                                        int num190 = TEItemFrame.Find(num188, num189);
                                        if (num190 != -1 && ((TEItemFrame)TileEntity.ByID[num190]).item.stack > 0)
                                        {
                                            WorldGen.KillTile(Player.tileTargetX, num189, true, false, false);
                                            if (Main.netMode == 1)
                                            {
                                                NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)num189, 1f, 0, 0, 0);
                                            }
                                        }
                                    }
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 125)
                                {
                                    this.AddBuff(29, 36000, true);
                                    Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 4);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 377)
                                {
                                    this.AddBuff(159, 36000, true);
                                    Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 37);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 354)
                                {
                                    this.AddBuff(150, 36000, true);
                                    Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 4);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 287)
                                {
                                    this.AddBuff(93, 36000, true);
                                    Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 356)
                                {
                                    if (!Main.fastForwardTime && (Main.netMode == 1 || Main.sundialCooldown == 0))
                                    {
                                        Main.Sundialing();
                                        Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 4);
                                    }
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 79)
                                {
                                    int num191 = Player.tileTargetX;
                                    int num192 = Player.tileTargetY;
                                    num191 += (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 18 * -1);
                                    if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameX >= 72)
                                    {
                                        num191 += 4;
                                        num191++;
                                    }
                                    else
                                    {
                                        num191 += 2;
                                    }
                                    int num193 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameY / 18);
                                    int num194 = 0;
                                    while (num193 > 1)
                                    {
                                        num193 -= 2;
                                        num194++;
                                    }
                                    num192 -= num193;
                                    num192 += 2;
                                    this.FindSpawn();
                                    if (this.SpawnX == num191 && this.SpawnY == num192)
                                    {
                                        this.RemoveSpawn();
                                        Main.NewText("Spawn point removed!", 255, 240, 20, false);
                                    }
                                    else if (Player.CheckSpawn(num191, num192))
                                    {
                                        this.ChangeSpawn(num191, num192);
                                        Main.NewText("Spawn point set!", 255, 240, 20, false);
                                    }
                                }
                                else if (Main.tileSign[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                                {
                                    bool flag28 = true;
                                    if (this.sign >= 0)
                                    {
                                        int num195 = Sign.ReadSign(Player.tileTargetX, Player.tileTargetY, true);
                                        if (num195 == this.sign)
                                        {
                                            this.sign = -1;
                                            Main.npcChatText = "";
                                            Main.editSign = false;
                                            Main.PlaySound(11, -1, -1, 1);
                                            flag28 = false;
                                        }
                                    }
                                    if (flag28)
                                    {
                                        if (Main.netMode == 0)
                                        {
                                            this.talkNPC = -1;
                                            Main.npcChatCornerItem = 0;
                                            Main.playerInventory = false;
                                            Main.editSign = false;
                                            Main.PlaySound(10, -1, -1, 1);
                                            int num196 = Sign.ReadSign(Player.tileTargetX, Player.tileTargetY, true);
                                            this.sign = num196;
                                            Main.npcChatText = Main.sign[num196].text;
                                        }
                                        else
                                        {
                                            int num197 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 18);
                                            int num198 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameY / 18);
                                            while (num197 > 1)
                                            {
                                                num197 -= 2;
                                            }
                                            int num199 = Player.tileTargetX - num197;
                                            int num200 = Player.tileTargetY - num198;
                                            if (Main.tileSign[(int)Main.tile[num199, num200].type])
                                            {
                                                NetMessage.SendData(46, -1, -1, "", num199, (float)num200, 0f, 0f, 0, 0, 0);
                                            }
                                        }
                                    }
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 104)
                                {
                                    string text = "AM";
                                    double num201 = Main.time;
                                    if (!Main.dayTime)
                                    {
                                        num201 += 54000.0;
                                    }
                                    num201 = num201 / 86400.0 * 24.0;
                                    double num202 = 7.5;
                                    num201 = num201 - num202 - 12.0;
                                    if (num201 < 0.0)
                                    {
                                        num201 += 24.0;
                                    }
                                    if (num201 >= 12.0)
                                    {
                                        text = "PM";
                                    }
                                    int num203 = (int)num201;
                                    double num204 = num201 - (double)num203;
                                    num204 = (double)((int)(num204 * 60.0));
                                    string text2 = string.Concat(num204);
                                    if (num204 < 10.0)
                                    {
                                        text2 = "0" + text2;
                                    }
                                    if (num203 > 12)
                                    {
                                        num203 -= 12;
                                    }
                                    if (num203 == 0)
                                    {
                                        num203 = 12;
                                    }
                                    string newText = string.Concat(new object[]
							{
								"Time: ",
								num203,
								":",
								text2,
								" ",
								text
							});
                                    Main.NewText(newText, 255, 240, 20, false);
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 237)
                                {
                                    bool flag29 = false;
                                    if (!NPC.AnyNPCs(245) && Main.hardMode && NPC.downedPlantBoss)
                                    {
                                        for (int num205 = 0; num205 < 58; num205++)
                                        {
                                            if (this.inventory[num205].itemId == 1293)
                                            {
                                                this.inventory[num205].stack--;
                                                if (this.inventory[num205].stack <= 0)
                                                {
                                                    this.inventory[num205].SetDefaults(0, false);
                                                }
                                                flag29 = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (flag29)
                                    {
                                        Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                                        if (Main.netMode != 1)
                                        {
                                            NPC.SpawnOnPlayer(i, 245);
                                        }
                                        else
                                        {
                                            NetMessage.SendData(61, -1, -1, "", this.whoAmI, 245f, 0f, 0f, 0, 0, 0);
                                        }
                                    }
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 10)
                                {
                                    int num206 = Player.tileTargetX;
                                    int num207 = Player.tileTargetY;
                                    if (Main.tile[num206, num207].frameY >= 594 && Main.tile[num206, num207].frameY <= 646)
                                    {
                                        int num208 = 1141;
                                        for (int num209 = 0; num209 < 58; num209++)
                                        {
                                            if (this.inventory[num209].itemId == num208 && this.inventory[num209].stack > 0)
                                            {
                                                this.inventory[num209].stack--;
                                                if (this.inventory[num209].stack <= 0)
                                                {
                                                    this.inventory[num209] = new Item();
                                                }
                                                WorldGen.UnlockDoor(num206, num207);
                                                if (Main.netMode == 1)
                                                {
                                                    NetMessage.SendData(52, -1, -1, "", this.whoAmI, 2f, (float)num206, (float)num207, 0, 0, 0);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        WorldGen.OpenDoor(Player.tileTargetX, Player.tileTargetY, this.direction);
                                        NetMessage.SendData(19, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)this.direction, 0, 0, 0);
                                    }
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 11 && WorldGen.CloseDoor(Player.tileTargetX, Player.tileTargetY, false))
                                {
                                    NetMessage.SendData(19, -1, -1, "", 1, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)this.direction, 0, 0, 0);
                                }
                                if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 88)
                                {
                                    if (Main.tile[Player.tileTargetX, Player.tileTargetY].frameY == 0)
                                    {
                                        Main.CancelClothesWindow(true);
                                        Main.mouseRightRelease = false;
                                        int num210 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 18);
                                        num210 %= 3;
                                        num210 = Player.tileTargetX - num210;
                                        int num211 = Player.tileTargetY - (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameY / 18);
                                        if (this.sign > -1)
                                        {
                                            Main.PlaySound(11, -1, -1, 1);
                                            this.sign = -1;
                                            Main.editSign = false;
                                            Main.npcChatText = string.Empty;
                                        }
                                        if (Main.editChest)
                                        {
                                            Main.PlaySound(12, -1, -1, 1);
                                            Main.editChest = false;
                                            Main.npcChatText = string.Empty;
                                        }
                                        if (this.editedChestName)
                                        {
                                            NetMessage.SendData(33, -1, -1, Main.chest[this.chest].name, this.chest, 1f, 0f, 0f, 0, 0, 0);
                                            this.editedChestName = false;
                                        }
                                        if (Main.netMode == 1)
                                        {
                                            if (num210 == this.chestX && num211 == this.chestY && this.chest != -1)
                                            {
                                                this.chest = -1;
                                                Main.PlaySound(11, -1, -1, 1);
                                            }
                                            else
                                            {
                                                NetMessage.SendData(31, -1, -1, "", num210, (float)num211, 0f, 0f, 0, 0, 0);
                                                Main.stackSplit = 600;
                                            }
                                        }
                                        else
                                        {
                                            this.flyingPigChest = -1;
                                            int num212 = Chest.FindChest(num210, num211);
                                            if (num212 != -1)
                                            {
                                                Main.stackSplit = 600;
                                                if (num212 == this.chest)
                                                {
                                                    this.chest = -1;
                                                    Main.PlaySound(11, -1, -1, 1);
                                                }
                                                else if (num212 != this.chest && this.chest == -1)
                                                {
                                                    this.chest = num212;
                                                    Main.playerInventory = true;
                                                    Main.recBigList = false;
                                                    Main.PlaySound(10, -1, -1, 1);
                                                    this.chestX = num210;
                                                    this.chestY = num211;
                                                }
                                                else
                                                {
                                                    this.chest = num212;
                                                    Main.playerInventory = true;
                                                    Main.recBigList = false;
                                                    Main.PlaySound(12, -1, -1, 1);
                                                    this.chestX = num210;
                                                    this.chestY = num211;
                                                }
                                                Recipe.FindRecipes();
                                            }
                                        }
                                    }
                                    else
                                    {
                                        Main.playerInventory = false;
                                        this.chest = -1;
                                        Main.dresserX = Player.tileTargetX;
                                        Main.dresserY = Player.tileTargetY;
                                        Main.OpenClothesWindow();
                                    }
                                }
                                if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 209)
                                {
                                    WorldGen.SwitchCannon(Player.tileTargetX, Player.tileTargetY);
                                }
                                else if ((Main.tile[Player.tileTargetX, Player.tileTargetY].type == 21 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 29 || Main.tile[Player.tileTargetX, Player.tileTargetY].type == 97) && this.talkNPC == -1)
                                {
                                    Main.mouseRightRelease = false;
                                    int num213 = 0;
                                    int num214;
                                    for (num214 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 18); num214 > 1; num214 -= 2)
                                    {
                                    }
                                    num214 = Player.tileTargetX - num214;
                                    int num215 = Player.tileTargetY - (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameY / 18);
                                    if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 29)
                                    {
                                        num213 = 1;
                                    }
                                    else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 97)
                                    {
                                        num213 = 2;
                                    }
                                    if (this.sign > -1)
                                    {
                                        Main.PlaySound(11, -1, -1, 1);
                                        this.sign = -1;
                                        Main.editSign = false;
                                        Main.npcChatText = string.Empty;
                                    }
                                    if (Main.editChest)
                                    {
                                        Main.PlaySound(12, -1, -1, 1);
                                        Main.editChest = false;
                                        Main.npcChatText = string.Empty;
                                    }
                                    if (this.editedChestName)
                                    {
                                        NetMessage.SendData(33, -1, -1, Main.chest[this.chest].name, this.chest, 1f, 0f, 0f, 0, 0, 0);
                                        this.editedChestName = false;
                                    }
                                    if (Main.netMode == 1 && num213 == 0 && (Main.tile[num214, num215].frameX < 72 || Main.tile[num214, num215].frameX > 106) && (Main.tile[num214, num215].frameX < 144 || Main.tile[num214, num215].frameX > 178) && (Main.tile[num214, num215].frameX < 828 || Main.tile[num214, num215].frameX > 1006) && (Main.tile[num214, num215].frameX < 1296 || Main.tile[num214, num215].frameX > 1330) && (Main.tile[num214, num215].frameX < 1368 || Main.tile[num214, num215].frameX > 1402) && (Main.tile[num214, num215].frameX < 1440 || Main.tile[num214, num215].frameX > 1474))
                                    {
                                        if (num214 == this.chestX && num215 == this.chestY && this.chest != -1)
                                        {
                                            this.chest = -1;
                                            Main.PlaySound(11, -1, -1, 1);
                                        }
                                        else
                                        {
                                            NetMessage.SendData(31, -1, -1, "", num214, (float)num215, 0f, 0f, 0, 0, 0);
                                            Main.stackSplit = 600;
                                        }
                                    }
                                    else
                                    {
                                        int num216 = -1;
                                        if (num213 == 1)
                                        {
                                            num216 = -2;
                                        }
                                        else if (num213 == 2)
                                        {
                                            num216 = -3;
                                        }
                                        else
                                        {
                                            bool flag30 = false;
                                            if (Chest.isLocked(num214, num215))
                                            {
                                                int num217 = 327;
                                                if (Main.tile[num214, num215].frameX >= 144 && Main.tile[num214, num215].frameX <= 178)
                                                {
                                                    num217 = 329;
                                                }
                                                if (Main.tile[num214, num215].frameX >= 828 && Main.tile[num214, num215].frameX <= 1006)
                                                {
                                                    int num218 = (int)(Main.tile[num214, num215].frameX / 18);
                                                    int num219 = 0;
                                                    while (num218 >= 2)
                                                    {
                                                        num218 -= 2;
                                                        num219++;
                                                    }
                                                    num219 -= 23;
                                                    num217 = 1533 + num219;
                                                }
                                                flag30 = true;
                                                for (int num220 = 0; num220 < 58; num220++)
                                                {
                                                    if (this.inventory[num220].itemId == num217 && this.inventory[num220].stack > 0 && Chest.Unlock(num214, num215))
                                                    {
                                                        if (num217 != 329)
                                                        {
                                                            this.inventory[num220].stack--;
                                                            if (this.inventory[num220].stack <= 0)
                                                            {
                                                                this.inventory[num220] = new Item();
                                                            }
                                                        }
                                                        if (Main.netMode == 1)
                                                        {
                                                            NetMessage.SendData(52, -1, -1, "", this.whoAmI, 1f, (float)num214, (float)num215, 0, 0, 0);
                                                        }
                                                    }
                                                }
                                            }
                                            if (!flag30)
                                            {
                                                num216 = Chest.FindChest(num214, num215);
                                            }
                                        }
                                        if (num216 != -1)
                                        {
                                            Main.stackSplit = 600;
                                            if (num216 == this.chest)
                                            {
                                                this.chest = -1;
                                                Main.PlaySound(11, -1, -1, 1);
                                            }
                                            else if (num216 != this.chest && this.chest == -1)
                                            {
                                                this.chest = num216;
                                                Main.playerInventory = true;
                                                Main.recBigList = false;
                                                Main.PlaySound(10, -1, -1, 1);
                                                this.chestX = num214;
                                                this.chestY = num215;
                                                if (Main.tile[num214, num215].frameX >= 36 && Main.tile[num214, num215].frameX < 72)
                                                {
                                                    AchievementsHelper.HandleSpecialEvent(this, 16);
                                                }
                                            }
                                            else
                                            {
                                                this.chest = num216;
                                                Main.playerInventory = true;
                                                Main.recBigList = false;
                                                Main.PlaySound(12, -1, -1, 1);
                                                this.chestX = num214;
                                                this.chestY = num215;
                                            }
                                            Recipe.FindRecipes();
                                        }
                                    }
                                }
                                else if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 314 && this.gravDir == 1f)
                                {
                                    bool flag31 = true;
                                    if (this.mount.Active)
                                    {
                                        if (this.mount.Cart)
                                        {
                                            flag31 = false;
                                        }
                                        else
                                        {
                                            this.mount.Dismount(this);
                                        }
                                    }
                                    if (flag31)
                                    {
                                        Vector2 vector4 = new Vector2((float)Main.mouseX + Main.screenPosition.X, (float)Main.mouseY + Main.screenPosition.Y);
                                        if (this.direction > 0)
                                        {
                                            this.minecartLeft = false;
                                        }
                                        else
                                        {
                                            this.minecartLeft = true;
                                        }
                                        this.grappling[0] = -1;
                                        this.grapCount = 0;
                                        for (int num221 = 0; num221 < 1000; num221++)
                                        {
                                            if (Main.projectile[num221].active && Main.projectile[num221].owner == this.whoAmI && Main.projectile[num221].aiStyle == 7)
                                            {
                                                Main.projectile[num221].Kill();
                                            }
                                        }
                                        Projectile.NewProjectile(vector4.X, vector4.Y, 0f, 0f, 403, 0, 0f, this.whoAmI, 0f, 0f);
                                    }
                                }
                            }
                            this.releaseUseTile = false;
                        }
                        else
                        {
                            this.releaseUseTile = true;
                        }
                    }
                }
                else
                {
                    if (Main.tile[Player.tileTargetX, Player.tileTargetY] == null)
                    {
                        Main.tile[Player.tileTargetX, Player.tileTargetY] = new Tile();
                    }
                    if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 21)
                    {
                        Tile tile3 = Main.tile[Player.tileTargetX, Player.tileTargetY];
                        int num222 = Player.tileTargetX;
                        int num223 = Player.tileTargetY;
                        if (tile3.frameX % 36 != 0)
                        {
                            num222--;
                        }
                        if (tile3.frameY % 36 != 0)
                        {
                            num223--;
                        }
                        int num224 = Chest.FindChest(num222, num223);
                        this.showItemIcon2 = -1;
                        if (num224 < 0)
                        {
                            this.showItemIconText = Lang.chestType[0];
                        }
                        else
                        {
                            if (Main.chest[num224].name != "")
                            {
                                this.showItemIconText = Main.chest[num224].name;
                            }
                            else
                            {
                                this.showItemIconText = Lang.chestType[(int)(tile3.frameX / 36)];
                            }
                            if (this.showItemIconText == Lang.chestType[(int)(tile3.frameX / 36)])
                            {
                                this.showItemIcon2 = Chest.chestTypeToIcon[(int)(tile3.frameX / 36)];
                                this.showItemIconText = "";
                            }
                        }
                        this.noThrow = 2;
                        this.showItemIcon = true;
                        if (this.showItemIconText == "")
                        {
                            this.showItemIcon = false;
                            this.showItemIcon2 = 0;
                        }
                    }
                    if (Main.tile[Player.tileTargetX, Player.tileTargetY].type == 88)
                    {
                        Tile tile4 = Main.tile[Player.tileTargetX, Player.tileTargetY];
                        int num225 = Player.tileTargetX;
                        int num226 = Player.tileTargetY;
                        num225 -= (int)(tile4.frameX % 54 / 18);
                        if (tile4.frameY % 36 != 0)
                        {
                            num226--;
                        }
                        int num227 = Chest.FindChest(num225, num226);
                        this.showItemIcon2 = -1;
                        if (num227 < 0)
                        {
                            this.showItemIconText = Lang.dresserType[0];
                        }
                        else
                        {
                            if (Main.chest[num227].name != "")
                            {
                                this.showItemIconText = Main.chest[num227].name;
                            }
                            else
                            {
                                this.showItemIconText = Lang.dresserType[(int)(tile4.frameX / 54)];
                            }
                            if (this.showItemIconText == Lang.dresserType[(int)(tile4.frameX / 54)])
                            {
                                this.showItemIcon2 = Chest.dresserTypeToIcon[(int)(tile4.frameX / 54)];
                                this.showItemIconText = "";
                            }
                        }
                        this.noThrow = 2;
                        this.showItemIcon = true;
                        if (this.showItemIconText == "")
                        {
                            this.showItemIcon = false;
                            this.showItemIcon2 = 0;
                        }
                    }
                    if (Main.tileSign[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                    {
                        this.noThrow = 2;
                        int num228 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameX / 18);
                        int num229 = (int)(Main.tile[Player.tileTargetX, Player.tileTargetY].frameY / 18);
                        num228 %= 2;
                        int num230 = Player.tileTargetX - num228;
                        int num231 = Player.tileTargetY - num229;
                        Main.signBubble = true;
                        Main.signX = num230 * 16 + 16;
                        Main.signY = num231 * 16;
                        int num232 = Sign.ReadSign(num230, num231, true);
                        if (num232 != -1)
                        {
                            Main.signHover = num232;
                            this.showItemIcon = false;
                            this.showItemIcon2 = -1;
                        }
                    }
                }
            }
            if (this.tongued)
            {
                bool flag32 = false;
                if (Main.wof >= 0)
                {
                    float num233 = Main.npc[Main.wof].position.X + (float)(Main.npc[Main.wof].width / 2);
                    num233 += (float)(Main.npc[Main.wof].direction * 200);
                    float num234 = Main.npc[Main.wof].position.Y + (float)(Main.npc[Main.wof].height / 2);
                    Vector2 vector5 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
                    float num235 = num233 - vector5.X;
                    float num236 = num234 - vector5.Y;
                    float num237 = (float)Math.Sqrt((double)(num235 * num235 + num236 * num236));
                    float num238 = 11f;
                    float num239;
                    if (num237 > num238)
                    {
                        num239 = num238 / num237;
                    }
                    else
                    {
                        num239 = 1f;
                        flag32 = true;
                    }
                    num235 *= num239;
                    num236 *= num239;
                    this.velocity.X = num235;
                    this.velocity.Y = num236;
                }
                else
                {
                    flag32 = true;
                }
                if (flag32 && Main.myPlayer == this.whoAmI)
                {
                    for (int num240 = 0; num240 < 22; num240++)
                    {
                        if (this.buffType[num240] == 38)
                        {
                            this.DelBuff(num240);
                        }
                    }
                }
            }
            if (Main.myPlayer == this.whoAmI)
            {
                this.WOFTongue();
                if (this.controlHook)
                {
                    if (this.releaseHook)
                    {
                        this.QuickGrapple();
                    }
                    this.releaseHook = false;
                }
                else
                {
                    this.releaseHook = true;
                }
                if (this.talkNPC >= 0)
                {
                    Rectangle rectangle = new Rectangle((int)(this.position.X + (float)(this.width / 2) - (float)(Player.tileRangeX * 16)), (int)(this.position.Y + (float)(this.height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
                    Rectangle value4 = new Rectangle((int)Main.npc[this.talkNPC].position.X, (int)Main.npc[this.talkNPC].position.Y, Main.npc[this.talkNPC].width, Main.npc[this.talkNPC].height);
                    if (!rectangle.Intersects(value4) || this.chest != -1 || !Main.npc[this.talkNPC].active)
                    {
                        if (this.chest == -1)
                        {
                            Main.PlaySound(11, -1, -1, 1);
                        }
                        this.talkNPC = -1;
                        Main.npcChatCornerItem = 0;
                        Main.npcChatText = "";
                    }
                }
                if (this.sign >= 0)
                {
                    Rectangle value5 = new Rectangle((int)(this.position.X + (float)(this.width / 2) - (float)(Player.tileRangeX * 16)), (int)(this.position.Y + (float)(this.height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
                    try
                    {
                        bool flag33 = false;
                        if (Main.sign[this.sign] == null)
                        {
                            flag33 = true;
                        }
                        if (!flag33 && !new Rectangle(Main.sign[this.sign].x * 16, Main.sign[this.sign].y * 16, 32, 32).Intersects(value5))
                        {
                            flag33 = true;
                        }
                        if (flag33)
                        {
                            Main.PlaySound(11, -1, -1, 1);
                            this.sign = -1;
                            Main.editSign = false;
                            Main.npcChatText = "";
                        }
                    }
                    catch
                    {
                        Main.PlaySound(11, -1, -1, 1);
                        this.sign = -1;
                        Main.editSign = false;
                        Main.npcChatText = "";
                    }
                }
                if (Main.editSign)
                {
                    if (this.sign == -1)
                    {
                        Main.editSign = false;
                    }
                    else
                    {
                        Main.npcChatText = Main.GetInputText(Main.npcChatText);
                        if (Main.inputTextEnter)
                        {
                            byte[] bytes = new byte[]
					{
						10
					};
                            Main.npcChatText += Encoding.ASCII.GetString(bytes);
                        }
                        else if (Main.inputTextEscape)
                        {
                            Main.PlaySound(12, -1, -1, 1);
                            Main.editSign = false;
                            Main.blockKey = Keys.Escape;
                            Main.npcChatText = Main.sign[this.sign].text;
                        }
                    }
                }
                else if (Main.editChest)
                {
                    string inputText = Main.GetInputText(Main.npcChatText);
                    if (Main.inputTextEnter)
                    {
                        Main.PlaySound(12, -1, -1, 1);
                        Main.editChest = false;
                        int num241 = Main.player[Main.myPlayer].chest;
                        if (Main.npcChatText == Main.defaultChestName)
                        {
                            Main.npcChatText = "";
                        }
                        if (Main.chest[num241].name != Main.npcChatText)
                        {
                            Main.chest[num241].name = Main.npcChatText;
                            if (Main.netMode == 1)
                            {
                                this.editedChestName = true;
                            }
                        }
                    }
                    else if (Main.inputTextEscape)
                    {
                        Main.PlaySound(12, -1, -1, 1);
                        Main.editChest = false;
                        Main.npcChatText = string.Empty;
                        Main.blockKey = Keys.Escape;
                    }
                    else if (inputText.Length <= 20)
                    {
                        Main.npcChatText = inputText;
                    }
                }
                if (this.mount.Active && this.mount.Cart && Math.Abs(this.velocity.X) > 4f)
                {
                    Rectangle rectangle2 = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
                    for (int num242 = 0; num242 < 200; num242++)
                    {
                        if (Main.npc[num242].active && !Main.npc[num242].friendly && Main.npc[num242].damage > 0 && Main.npc[num242].immune[i] == 0 && rectangle2.Intersects(new Rectangle((int)Main.npc[num242].position.X, (int)Main.npc[num242].position.Y, Main.npc[num242].width, Main.npc[num242].height)))
                        {
                            float num243 = (float)this.meleeCrit;
                            if (num243 < (float)this.rangedCrit)
                            {
                                num243 = (float)this.rangedCrit;
                            }
                            if (num243 < (float)this.magicCrit)
                            {
                                num243 = (float)this.magicCrit;
                            }
                            bool crit = false;
                            if ((float)Main.rand.Next(1, 101) <= num243)
                            {
                                crit = true;
                            }
                            float num244 = Math.Abs(this.velocity.X) / this.maxRunSpeed;
                            int num245 = Main.DamageVar(25f + 55f * num244);
                            if (this.mount.Type == 11)
                            {
                                num245 = Main.DamageVar(50f + 100f * num244);
                            }
                            if (this.mount.Type == 13)
                            {
                                num245 = Main.DamageVar(15f + 30f * num244);
                            }
                            float num246 = 5f + 25f * num244;
                            int num247 = 1;
                            if (this.velocity.X < 0f)
                            {
                                num247 = -1;
                            }
                            if (this.whoAmI == Main.myPlayer)
                            {
                                Main.npc[num242].StrikeNPC(num245, num246, num247, crit, false, false);
                                if (Main.netMode != 0)
                                {
                                    NetMessage.SendData(28, -1, -1, "", num242, (float)num245, num246, (float)num247, 0, 0, 0);
                                }
                            }
                            Main.npc[num242].immune[i] = 30;
                            if (!Main.npc[num242].active)
                            {
                                AchievementsHelper.HandleSpecialEvent(this, 9);
                            }
                        }
                    }
                }
                if (!this.immune)
                {
                    Rectangle rectangle3 = new Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
                    for (int num248 = 0; num248 < 200; num248++)
                    {
                        if (Main.npc[num248].active && !Main.npc[num248].friendly && Main.npc[num248].damage > 0 && (this.dash != 2 || num248 != this.eocHit || this.eocDash <= 0) && !this.npcTypeNoAggro[Main.npc[num248].type])
                        {
                            float num249 = 1f;
                            Rectangle value6 = new Rectangle((int)Main.npc[num248].position.X, (int)Main.npc[num248].position.Y, Main.npc[num248].width, Main.npc[num248].height);
                            if (Main.npc[num248].type >= 430 && Main.npc[num248].type <= 436 && Main.npc[num248].ai[2] > 5f)
                            {
                                int num250 = 34;
                                if (Main.npc[num248].spriteDirection < 0)
                                {
                                    value6.X -= num250;
                                    value6.Width += num250;
                                }
                                else
                                {
                                    value6.Width += num250;
                                }
                                num249 *= 1.25f;
                            }
                            else if (Main.npc[num248].type >= 494 && Main.npc[num248].type <= 495 && Main.npc[num248].ai[2] > 5f)
                            {
                                int num251 = 18;
                                if (Main.npc[num248].spriteDirection < 0)
                                {
                                    value6.X -= num251;
                                    value6.Width += num251;
                                }
                                else
                                {
                                    value6.Width += num251;
                                }
                                num249 *= 1.25f;
                            }
                            else if (Main.npc[num248].type == 460)
                            {
                                Rectangle rectangle4 = new Rectangle(0, 0, 30, 14);
                                rectangle4.X = (int)Main.npc[num248].Center.X;
                                if (Main.npc[num248].direction < 0)
                                {
                                    rectangle4.X -= rectangle4.Width;
                                }
                                rectangle4.Y = (int)Main.npc[num248].position.Y + Main.npc[num248].height - 20;
                                if (rectangle3.Intersects(rectangle4))
                                {
                                    value6 = rectangle4;
                                    num249 *= 1.35f;
                                }
                            }
                            else if (Main.npc[num248].type == 417 && Main.npc[num248].ai[0] == 6f && Main.npc[num248].ai[3] > 0f && Main.npc[num248].ai[3] < 4f)
                            {
                                Rectangle rectangle5 = Utils.CenteredRectangle(Main.npc[num248].Center, new Vector2(100f));
                                if (rectangle3.Intersects(rectangle5))
                                {
                                    value6 = rectangle5;
                                    num249 *= 1.35f;
                                }
                            }
                            else if (Main.npc[num248].type == 466)
                            {
                                Rectangle rectangle6 = new Rectangle(0, 0, 30, 8);
                                rectangle6.X = (int)Main.npc[num248].Center.X;
                                if (Main.npc[num248].direction < 0)
                                {
                                    rectangle6.X -= rectangle6.Width;
                                }
                                rectangle6.Y = (int)Main.npc[num248].position.Y + Main.npc[num248].height - 32;
                                if (rectangle3.Intersects(rectangle6))
                                {
                                    value6 = rectangle6;
                                    num249 *= 1.75f;
                                }
                            }
                            if (rectangle3.Intersects(value6) && !this.npcTypeNoAggro[Main.npc[num248].type])
                            {
                                int num252 = -1;
                                if (Main.npc[num248].position.X + (float)(Main.npc[num248].width / 2) < this.position.X + (float)(this.width / 2))
                                {
                                    num252 = 1;
                                }
                                int num253 = Main.DamageVar((float)Main.npc[num248].damage * num249);
                                int num254 = Item.NPCtoBanner(Main.npc[num248].BannerID());
                                if (num254 > 0 && this.NPCBannerBuff[num254])
                                {
                                    if (Main.expertMode)
                                    {
                                        num253 = (int)((double)num253 * 0.5);
                                    }
                                    else
                                    {
                                        num253 = (int)((double)num253 * 0.75);
                                    }
                                }
                                if (this.whoAmI == Main.myPlayer && this.thorns > 0f && !this.immune && !Main.npc[num248].dontTakeDamage)
                                {
                                    int num255 = (int)((float)num253 * this.thorns);
                                    int num256 = 10;
                                    if (this.turtleThorns)
                                    {
                                        num255 = num253;
                                    }
                                    Main.npc[num248].StrikeNPC(num255, (float)num256, -num252, false, false, false);
                                    if (Main.netMode != 0)
                                    {
                                        NetMessage.SendData(28, -1, -1, "", num248, (float)num255, (float)num256, (float)(-(float)num252), 0, 0, 0);
                                    }
                                }
                                if (this.resistCold && Main.npc[num248].coldDamage)
                                {
                                    num253 = (int)((float)num253 * 0.7f);
                                }
                                if (!this.immune)
                                {
                                    this.StatusPlayer(Main.npc[num248]);
                                }
                                this.Hurt(num253, num252, false, false, Lang.deathMsg(-1, num248, -1, -1), false);
                            }
                        }
                    }
                }
                Vector2 vector6;
                if (!this.mount.Active || !this.mount.Cart)
                {
                    vector6 = Collision.HurtTiles(this.position, this.velocity, this.width, this.height, this.fireWalk);
                }
                else
                {
                    vector6 = Collision.HurtTiles(this.position, this.velocity, this.width, this.height - 16, this.fireWalk);
                }
                if (vector6.Y == 0f && !this.fireWalk)
                {
                    foreach (Point current in this.TouchedTiles)
                    {
                        Tile tile5 = Main.tile[current.X, current.Y];
                        if (tile5 != null && tile5.active() && tile5.nactive() && !this.fireWalk && TileID.Sets.TouchDamageHot[(int)tile5.type] != 0)
                        {
                            vector6.Y = (float)TileID.Sets.TouchDamageHot[(int)tile5.type];
                            vector6.X = (float)((base.Center.X / 16f < (float)current.X + 0.5f) ? -1 : 1);
                            break;
                        }
                    }
                }
                if (vector6.Y == 20f)
                {
                    this.AddBuff(67, 20, true);
                }
                else if (vector6.Y == 15f)
                {
                    if (this.suffocateDelay < 5)
                    {
                        this.suffocateDelay += 1;
                    }
                    else
                    {
                        this.AddBuff(68, 1, true);
                    }
                }
                else if (vector6.Y != 0f)
                {
                    int damage3 = Main.DamageVar(vector6.Y);
                    this.Hurt(damage3, 0, false, false, Lang.deathMsg(-1, -1, -1, 3), false);
                }
                else
                {
                    this.suffocateDelay = 0;
                }
            }
            if (this.controlRight)
            {
                this.releaseRight = false;
            }
            else
            {
                this.releaseRight = true;
                this.rightTimer = 7;
            }
            if (this.controlLeft)
            {
                this.releaseLeft = false;
            }
            else
            {
                this.releaseLeft = true;
                this.leftTimer = 7;
            }
            this.releaseDown = !this.controlDown;
            if (this.rightTimer > 0)
            {
                this.rightTimer--;
            }
            else if (this.controlRight)
            {
                this.rightTimer = 7;
            }
            if (this.leftTimer > 0)
            {
                this.leftTimer--;
            }
            else if (this.controlLeft)
            {
                this.leftTimer = 7;
            }
            this.GrappleMovement();
            this.StickyMovement();
            this.CheckDrowning();
            if (this.gravDir == -1f)
            {
                this.waterWalk = false;
                this.waterWalk2 = false;
            }
            int num257 = this.height;
            if (this.waterWalk)
            {
                num257 -= 6;
            }
            bool flag34 = Collision.LavaCollision(this.position, this.width, num257);
            if (flag34)
            {
                if (!this.lavaImmune && Main.myPlayer == i && !this.immune)
                {
                    if (this.lavaTime > 0)
                    {
                        this.lavaTime--;
                    }
                    else if (this.lavaRose)
                    {
                        this.Hurt(50, 0, false, false, Lang.deathMsg(-1, -1, -1, 2), false);
                        this.AddBuff(24, 210, true);
                    }
                    else
                    {
                        this.Hurt(80, 0, false, false, Lang.deathMsg(-1, -1, -1, 2), false);
                        this.AddBuff(24, 420, true);
                    }
                }
                this.lavaWet = true;
            }
            else
            {
                this.lavaWet = false;
                if (this.lavaTime < this.lavaMax)
                {
                    this.lavaTime++;
                }
            }
            if (this.lavaTime > this.lavaMax)
            {
                this.lavaTime = this.lavaMax;
            }
            if (this.waterWalk2 && !this.waterWalk)
            {
                num257 -= 6;
            }
            bool flag35 = Collision.WetCollision(this.position, this.width, this.height);
            bool flag36 = Collision.honey;
            if (flag36)
            {
                this.AddBuff(48, 1800, true);
                this.honeyWet = true;
            }
            if (flag35)
            {
                if (this.onFire && !this.lavaWet)
                {
                    for (int num258 = 0; num258 < 22; num258++)
                    {
                        if (this.buffType[num258] == 24)
                        {
                            this.DelBuff(num258);
                        }
                    }
                }
                if (!this.wet)
                {
                    if (this.wetCount == 0)
                    {
                        this.wetCount = 10;
                        if (!flag34)
                        {
                            if (this.honeyWet)
                            {
                                for (int num259 = 0; num259 < 20; num259++)
                                {
                                    int num260 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
                                    Dust expr_D6CD_cp_0 = Main.dust[num260];
                                    expr_D6CD_cp_0.velocity.Y = expr_D6CD_cp_0.velocity.Y - 1f;
                                    Dust expr_D6ED_cp_0 = Main.dust[num260];
                                    expr_D6ED_cp_0.velocity.X = expr_D6ED_cp_0.velocity.X * 2.5f;
                                    Main.dust[num260].scale = 1.3f;
                                    Main.dust[num260].alpha = 100;
                                    Main.dust[num260].noGravity = true;
                                }
                                Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1);
                            }
                            else
                            {
                                for (int num261 = 0; num261 < 50; num261++)
                                {
                                    int num262 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
                                    Dust expr_D7EE_cp_0 = Main.dust[num262];
                                    expr_D7EE_cp_0.velocity.Y = expr_D7EE_cp_0.velocity.Y - 3f;
                                    Dust expr_D80E_cp_0 = Main.dust[num262];
                                    expr_D80E_cp_0.velocity.X = expr_D80E_cp_0.velocity.X * 2.5f;
                                    Main.dust[num262].scale = 0.8f;
                                    Main.dust[num262].alpha = 100;
                                    Main.dust[num262].noGravity = true;
                                }
                                Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 0);
                            }
                        }
                        else
                        {
                            for (int num263 = 0; num263 < 20; num263++)
                            {
                                int num264 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
                                Dust expr_D90C_cp_0 = Main.dust[num264];
                                expr_D90C_cp_0.velocity.Y = expr_D90C_cp_0.velocity.Y - 1.5f;
                                Dust expr_D92C_cp_0 = Main.dust[num264];
                                expr_D92C_cp_0.velocity.X = expr_D92C_cp_0.velocity.X * 2.5f;
                                Main.dust[num264].scale = 1.3f;
                                Main.dust[num264].alpha = 100;
                                Main.dust[num264].noGravity = true;
                            }
                            Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1);
                        }
                    }
                    this.wet = true;
                }
            }
            else if (this.wet)
            {
                this.wet = false;
                if (this.jump > Player.jumpHeight / 5 && this.wetSlime == 0)
                {
                    this.jump = Player.jumpHeight / 5;
                }
                if (this.wetCount == 0)
                {
                    this.wetCount = 10;
                    if (!this.lavaWet)
                    {
                        if (this.honeyWet)
                        {
                            for (int num265 = 0; num265 < 20; num265++)
                            {
                                int num266 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 152, 0f, 0f, 0, default(Color), 1f);
                                Dust expr_DA93_cp_0 = Main.dust[num266];
                                expr_DA93_cp_0.velocity.Y = expr_DA93_cp_0.velocity.Y - 1f;
                                Dust expr_DAB3_cp_0 = Main.dust[num266];
                                expr_DAB3_cp_0.velocity.X = expr_DAB3_cp_0.velocity.X * 2.5f;
                                Main.dust[num266].scale = 1.3f;
                                Main.dust[num266].alpha = 100;
                                Main.dust[num266].noGravity = true;
                            }
                            Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1);
                        }
                        else
                        {
                            for (int num267 = 0; num267 < 50; num267++)
                            {
                                int num268 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2)), this.width + 12, 24, Dust.dustWater(), 0f, 0f, 0, default(Color), 1f);
                                Dust expr_DBAE_cp_0 = Main.dust[num268];
                                expr_DBAE_cp_0.velocity.Y = expr_DBAE_cp_0.velocity.Y - 4f;
                                Dust expr_DBCE_cp_0 = Main.dust[num268];
                                expr_DBCE_cp_0.velocity.X = expr_DBCE_cp_0.velocity.X * 2.5f;
                                Main.dust[num268].scale = 0.8f;
                                Main.dust[num268].alpha = 100;
                                Main.dust[num268].noGravity = true;
                            }
                            Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 0);
                        }
                    }
                    else
                    {
                        for (int num269 = 0; num269 < 20; num269++)
                        {
                            int num270 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float)(this.height / 2) - 8f), this.width + 12, 24, 35, 0f, 0f, 0, default(Color), 1f);
                            Dust expr_DCCC_cp_0 = Main.dust[num270];
                            expr_DCCC_cp_0.velocity.Y = expr_DCCC_cp_0.velocity.Y - 1.5f;
                            Dust expr_DCEC_cp_0 = Main.dust[num270];
                            expr_DCEC_cp_0.velocity.X = expr_DCEC_cp_0.velocity.X * 2.5f;
                            Main.dust[num270].scale = 1.3f;
                            Main.dust[num270].alpha = 100;
                            Main.dust[num270].noGravity = true;
                        }
                        Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1);
                    }
                }
            }
            if (!flag36)
            {
                this.honeyWet = false;
            }
            if (!this.wet)
            {
                this.lavaWet = false;
                this.honeyWet = false;
            }
            if (this.wetCount > 0)
            {
                this.wetCount -= 1;
            }
            if (this.wetSlime > 0)
            {
                this.wetSlime -= 1;
            }
            if (this.wet && this.mount.Active)
            {
                switch (this.mount.Type)
                {
                    case 3:
                        this.wetSlime = 30;
                        if (this.velocity.Y > 2f)
                        {
                            this.velocity.Y = this.velocity.Y * 0.9f;
                        }
                        this.velocity.Y = this.velocity.Y - 0.5f;
                        if (this.velocity.Y < -4f)
                        {
                            this.velocity.Y = -4f;
                        }
                        break;
                    case 5:
                    case 7:
                        if (this.whoAmI == Main.myPlayer)
                        {
                            this.mount.Dismount(this);
                        }
                        break;
                }
            }
            if (Main.expertMode && this.ZoneSnow && this.wet && !this.lavaWet && !this.honeyWet && !this.arcticDivingGear)
            {
                this.AddBuff(46, 150, true);
            }
            float num271 = 1f + Math.Abs(this.velocity.X) / 3f;
            if (this.gfxOffY > 0f)
            {
                this.gfxOffY -= num271 * this.stepSpeed;
                if (this.gfxOffY < 0f)
                {
                    this.gfxOffY = 0f;
                }
            }
            else if (this.gfxOffY < 0f)
            {
                this.gfxOffY += num271 * this.stepSpeed;
                if (this.gfxOffY > 0f)
                {
                    this.gfxOffY = 0f;
                }
            }
            if (this.gfxOffY > 32f)
            {
                this.gfxOffY = 32f;
            }
            if (this.gfxOffY < -32f)
            {
                this.gfxOffY = -32f;
            }
            if (Main.myPlayer == i && !this.iceSkate)
            {
                this.CheckIceBreak();
            }
            this.SlopeDownMovement();
            bool flag37 = this.mount.Type == 7 || this.mount.Type == 8 || this.mount.Type == 12;
            if (this.velocity.Y == this.gravity && (!this.mount.Active || (!this.mount.Cart && !flag37)))
            {
                Collision.StepDown(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.waterWalk || this.waterWalk2);
            }
            if (this.gravDir == -1f)
            {
                if ((this.carpetFrame != -1 || this.velocity.Y <= this.gravity) && !this.controlUp)
                {
                    Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.controlUp, 0);
                }
            }
            else if (flag37 || ((this.carpetFrame != -1 || this.velocity.Y >= this.gravity) && !this.controlDown && !this.mount.Cart))
            {
                Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, (int)this.gravDir, this.controlUp, 0);
            }
            this.oldPosition = this.position;
            this.oldDirection = this.direction;
            bool falling = false;
            if (this.velocity.Y > this.gravity)
            {
                falling = true;
            }
            if (this.velocity.Y < -this.gravity)
            {
                falling = true;
            }
            Vector2 velocity = this.velocity;
            this.slideDir = 0;
            bool ignorePlats = false;
            bool fallThrough = this.controlDown;
            if (this.gravDir == -1f || (this.mount.Active && this.mount.Cart) || this.GoingDownWithGrapple)
            {
                ignorePlats = true;
                fallThrough = true;
            }
            this.onTrack = false;
            bool flag38 = false;
            if (this.mount.Active && this.mount.Cart)
            {
                float num272;
                if (!this.ignoreWater && !this.merman)
                {
                    if (this.honeyWet)
                    {
                        num272 = 0.25f;
                    }
                    else if (this.wet)
                    {
                        num272 = 0.5f;
                    }
                    else
                    {
                        num272 = 1f;
                    }
                }
                else
                {
                    num272 = 1f;
                }
                this.velocity *= num272;
                DelegateMethods.Minecart.rotation = this.fullRotation;
                DelegateMethods.Minecart.rotationOrigin = this.fullRotationOrigin;
                BitsByte bitsByte = Minecart.TrackCollision(ref this.position, ref this.velocity, ref this.lastBoost, this.width, this.height, this.controlDown, this.controlUp, this.fallStart2, false, this.mount.MinecartDust);
                if (bitsByte[0])
                {
                    this.onTrack = true;
                    this.gfxOffY = Minecart.TrackRotation(ref this.fullRotation, this.position + this.velocity, this.width, this.height, this.controlDown, this.controlUp, this.mount.MinecartDust);
                    this.fullRotationOrigin = new Vector2((float)(this.width / 2), (float)this.height);
                }
                if (bitsByte[1])
                {
                    if (this.controlLeft || this.controlRight)
                    {
                        if (this.cartFlip)
                        {
                            this.cartFlip = false;
                        }
                        else
                        {
                            this.cartFlip = true;
                        }
                    }
                    if (this.velocity.X > 0f)
                    {
                        this.direction = 1;
                    }
                    else if (this.velocity.X < 0f)
                    {
                        this.direction = -1;
                    }
                    Main.PlaySound(2, (int)this.position.X + this.width / 2, (int)this.position.Y + this.height / 2, 56);
                }
                this.velocity /= num272;
                if (bitsByte[3] && this.whoAmI == Main.myPlayer)
                {
                    flag38 = true;
                }
                if (bitsByte[2])
                {
                    this.cartRampTime = (int)(Math.Abs(this.velocity.X) / this.mount.RunSpeed * 20f);
                }
                if (bitsByte[4])
                {
                    this.trackBoost -= 4f;
                }
                if (bitsByte[5])
                {
                    this.trackBoost += 4f;
                }
            }
            bool flag39 = this.whoAmI == Main.myPlayer && !this.mount.Active;
            Vector2 position = this.position;
            if (this.vortexDebuff)
            {
                this.velocity.Y = this.velocity.Y * 0.8f + (float)Math.Cos((double)(base.Center.X % 120f / 120f * 6.28318548f)) * 5f * 0.2f;
            }
            if (this.wingsLogic == 3 && this.controlUp && this.controlDown)
            {
                this.position += this.velocity;
            }
            else if (this.tongued)
            {
                this.position += this.velocity;
                flag39 = false;
            }
            else if (this.honeyWet && !this.ignoreWater)
            {
                this.HoneyCollision(fallThrough, ignorePlats);
            }
            else if (this.wet && !this.merman && !this.ignoreWater)
            {
                this.WaterCollision(fallThrough, ignorePlats);
            }
            else
            {
                this.DryCollision(fallThrough, ignorePlats);
                if (this.mount.Active && this.mount.Type == 3 && this.velocity.Y != 0f && !this.SlimeDontHyperJump)
                {
                    Vector2 velocity2 = this.velocity;
                    this.velocity.X = 0f;
                    this.DryCollision(fallThrough, ignorePlats);
                    this.velocity.X = velocity2.X;
                }
            }
            this.UpdateTouchingTiles();
            this.TryBouncingBlocks(falling);
            this.TryLandingOnDetonator();
            if (this.wingsLogic != 3 || !this.controlUp || !this.controlDown)
            {
                this.SlopingCollision(fallThrough);
            }
            if (flag39 && this.velocity.Y == 0f)
            {
                AchievementsHelper.HandleRunning(Math.Abs(this.position.X - position.X));
            }
            if (flag38)
            {
                NetMessage.SendData(13, -1, -1, "", this.whoAmI, 0f, 0f, 0f, 0, 0, 0);
                Minecart.HitTrackSwitch(new Vector2(this.position.X, this.position.Y), this.width, this.height);
            }
            if (velocity.X != this.velocity.X)
            {
                if (velocity.X < 0f)
                {
                    this.slideDir = -1;
                }
                else if (velocity.X > 0f)
                {
                    this.slideDir = 1;
                }
            }
            if (this.gravDir == 1f && Collision.up)
            {
                this.velocity.Y = 0.01f;
                if (!this.merman)
                {
                    this.jump = 0;
                }
            }
            else if (this.gravDir == -1f && Collision.down)
            {
                this.velocity.Y = -0.01f;
                if (!this.merman)
                {
                    this.jump = 0;
                }
            }
            if (this.velocity.Y == 0f && this.grappling[0] == -1)
            {
                this.FloorVisuals(falling);
            }
            if (this.whoAmI == Main.myPlayer)
            {
                Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 1);
            }
            this.BordersMovement();
            this.numMinions = 0;
            this.slotsMinions = 0f;
            if (this.altFunctionUse == 0 && this.selectedItem != 58 && this.controlUseTile && this.releaseUseItem && !this.controlUseItem && !this.mouseInterface && this.inventory[this.selectedItem].itemId == 3384)
            {
                this.altFunctionUse = 1;
                this.controlUseItem = true;
            }
            if (!this.controlUseItem && this.altFunctionUse == 1)
            {
                this.altFunctionUse = 0;
            }
            if (Main.ignoreErrors)
            {
                try
                {
                    this.ItemCheck(i);
                    goto IL_E88C;
                }
                catch
                {
                    goto IL_E88C;
                }
            }
            this.ItemCheck(i);
        IL_E88C:
            this.PlayerFrame();
            if (this.mount.Type == 8)
            {
                this.mount.UseDrill(this);
            }
            if (this.statLife > this.statLifeMax2)
            {
                this.statLife = this.statLifeMax2;
            }
            if (this.statMana > this.statManaMax2)
            {
                this.statMana = this.statManaMax2;
            }
            this.grappling[0] = -1;
            this.grapCount = 0;
        }

        private void TryLandingOnDetonator()
        {
            if (this.whoAmI != Main.myPlayer || (double)this.velocity.Y < 3.0)
                return;
            Point point = Utils.ToTileCoordinates(this.Bottom + new Vector2(0.0f, 0.01f));
            Tile tileSafely = Framing.GetTileSafely(point.X, point.Y);
            if (!tileSafely.active() || (int)tileSafely.type != 411 || ((int)tileSafely.frameY != 0 || (int)tileSafely.frameX >= 36))
                return;
            Wiring.HitSwitch(point.X, point.Y);
            NetMessage.SendData(59, -1, -1, "", point.X, (float)point.Y, 0.0f, 0.0f, 0, 0, 0);
        }

        private void TryBouncingBlocks(bool Falling)
        {
            if ((double)this.velocity.Y < 5.0 && (double)this.velocity.Y > -5.0 || this.wet)
                return;
            int num = 0;
            bool flag = false;
            foreach (Point point in this.TouchedTiles)
            {
                Tile tile = Main.tile[point.X, point.Y];
                if (tile != null && tile.active() && (tile.nactive() && Main.tileBouncy[(int)tile.type]))
                {
                    flag = true;
                    num = point.Y;
                    break;
                }
            }
            if (!flag)
                return;
            this.velocity.Y *= -0.8f;
            if (this.controlJump)
                this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -13f, 13f);
            this.position.Y = (float)(num * 16 - ((double)this.velocity.Y < 0.0 ? this.height : -16));
            this.FloorVisuals(Falling);
            this.velocity.Y = MathHelper.Clamp(this.velocity.Y, -20f, 20f);
            if ((double)this.velocity.Y * (double)this.gravDir >= 0.0)
                return;
            this.fallStart = (int)this.position.Y / 16;
        }

        private void GrabItems(int i)
        {
            for (int number = 0; number < 400; ++number)
            {
                if (Main.item[number].active && Main.item[number].noGrabDelay == 0 && Main.item[number].owner == i)
                {
                    int num1 = Player.defaultItemGrabRange;
                    if (this.goldRing && Main.item[number].itemId >= 71 && Main.item[number].itemId <= 74)
                        num1 += Item.coinGrabRange;
                    if (this.manaMagnet && (Main.item[number].itemId == 184 || Main.item[number].itemId == 1735 || Main.item[number].itemId == 1868))
                        num1 += Item.manaGrabRange;
                    if (this.lifeMagnet && (Main.item[number].itemId == 58 || Main.item[number].itemId == 1734 || Main.item[number].itemId == 1867))
                        num1 += Item.lifeGrabRange;
                    if (ItemID.Sets.NebulaPickup[Main.item[number].itemId])
                        num1 += 100;
                    if (new Microsoft.Xna.Framework.Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height).Intersects(new Microsoft.Xna.Framework.Rectangle((int)Main.item[number].position.X, (int)Main.item[number].position.Y, Main.item[number].width, Main.item[number].height)))
                    {
                        if (i == Main.myPlayer && (this.inventory[this.selectedItem].itemId != 0 || this.itemAnimation <= 0))
                        {
                            if (ItemID.Sets.NebulaPickup[Main.item[number].itemId])
                            {
                                Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1);
                                int type = Main.item[number].buffType;
                                Main.item[number] = new Item();
                                if (Main.netMode == 1)
                                {
                                    NetMessage.SendData(102, -1, -1, "", i, (float)type, this.Center.X, this.Center.Y, 0, 0, 0);
                                    NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                                }
                                else
                                    this.NebulaLevelup(type);
                            }
                            if (Main.item[number].itemId == 58 || Main.item[number].itemId == 1734 || Main.item[number].itemId == 1867)
                            {
                                Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1);
                                this.statLife += 20;
                                if (Main.myPlayer == this.whoAmI)
                                    this.HealEffect(20, true);
                                if (this.statLife > this.statLifeMax2)
                                    this.statLife = this.statLifeMax2;
                                Main.item[number] = new Item();
                                if (Main.netMode == 1)
                                    NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                            }
                            else if (Main.item[number].itemId == 184 || Main.item[number].itemId == 1735 || Main.item[number].itemId == 1868)
                            {
                                Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1);
                                this.statMana += 100;
                                if (Main.myPlayer == this.whoAmI)
                                    this.ManaEffect(100);
                                if (this.statMana > this.statManaMax2)
                                    this.statMana = this.statManaMax2;
                                Main.item[number] = new Item();
                                if (Main.netMode == 1)
                                    NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                            }
                            else
                            {
                                Main.item[number] = this.GetItem(i, Main.item[number], false, false);
                                if (Main.netMode == 1)
                                    NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                            }
                        }
                    }
                    else if (new Microsoft.Xna.Framework.Rectangle((int)this.position.X - num1, (int)this.position.Y - num1, this.width + num1 * 2, this.height + num1 * 2).Intersects(new Microsoft.Xna.Framework.Rectangle((int)Main.item[number].position.X, (int)Main.item[number].position.Y, Main.item[number].width, Main.item[number].height)) && this.ItemSpace(Main.item[number]))
                    {
                        Main.item[number].beingGrabbed = true;
                        if (this.manaMagnet && (Main.item[number].itemId == 184 || Main.item[number].itemId == 1735 || Main.item[number].itemId == 1868))
                        {
                            float num2 = 12f;
                            Vector2 vector2 = new Vector2(Main.item[number].position.X + (float)(Main.item[number].width / 2), Main.item[number].position.Y + (float)(Main.item[number].height / 2));
                            float num3 = this.Center.X - vector2.X;
                            float num4 = this.Center.Y - vector2.Y;
                            float num5 = (float)Math.Sqrt((double)num3 * (double)num3 + (double)num4 * (double)num4);
                            float num6 = num2 / num5;
                            float num7 = num3 * num6;
                            float num8 = num4 * num6;
                            int num9 = 5;
                            Main.item[number].velocity.X = (Main.item[number].velocity.X * (float)(num9 - 1) + num7) / (float)num9;
                            Main.item[number].velocity.Y = (Main.item[number].velocity.Y * (float)(num9 - 1) + num8) / (float)num9;
                        }
                        else if (this.lifeMagnet && (Main.item[number].itemId == 58 || Main.item[number].itemId == 1734 || Main.item[number].itemId == 1867))
                        {
                            float num2 = 15f;
                            Vector2 vector2 = new Vector2(Main.item[number].position.X + (float)(Main.item[number].width / 2), Main.item[number].position.Y + (float)(Main.item[number].height / 2));
                            float num3 = this.Center.X - vector2.X;
                            float num4 = this.Center.Y - vector2.Y;
                            float num5 = (float)Math.Sqrt((double)num3 * (double)num3 + (double)num4 * (double)num4);
                            float num6 = num2 / num5;
                            float num7 = num3 * num6;
                            float num8 = num4 * num6;
                            int num9 = 5;
                            Main.item[number].velocity.X = (Main.item[number].velocity.X * (float)(num9 - 1) + num7) / (float)num9;
                            Main.item[number].velocity.Y = (Main.item[number].velocity.Y * (float)(num9 - 1) + num8) / (float)num9;
                        }
                        else if (this.goldRing && Main.item[number].itemId >= 71 && Main.item[number].itemId <= 74)
                        {
                            float num2 = 12f;
                            Vector2 vector2 = new Vector2(Main.item[number].position.X + (float)(Main.item[number].width / 2), Main.item[number].position.Y + (float)(Main.item[number].height / 2));
                            float num3 = this.Center.X - vector2.X;
                            float num4 = this.Center.Y - vector2.Y;
                            float num5 = (float)Math.Sqrt((double)num3 * (double)num3 + (double)num4 * (double)num4);
                            float num6 = num2 / num5;
                            float num7 = num3 * num6;
                            float num8 = num4 * num6;
                            int num9 = 5;
                            Main.item[number].velocity.X = (Main.item[number].velocity.X * (float)(num9 - 1) + num7) / (float)num9;
                            Main.item[number].velocity.Y = (Main.item[number].velocity.Y * (float)(num9 - 1) + num8) / (float)num9;
                        }
                        else if (ItemID.Sets.NebulaPickup[Main.item[number].itemId])
                        {
                            float num2 = 12f;
                            Vector2 vector2 = new Vector2(Main.item[number].position.X + (float)(Main.item[number].width / 2), Main.item[number].position.Y + (float)(Main.item[number].height / 2));
                            float num3 = this.Center.X - vector2.X;
                            float num4 = this.Center.Y - vector2.Y;
                            float num5 = (float)Math.Sqrt((double)num3 * (double)num3 + (double)num4 * (double)num4);
                            float num6 = num2 / num5;
                            float num7 = num3 * num6;
                            float num8 = num4 * num6;
                            int num9 = 5;
                            Main.item[number].velocity.X = (Main.item[number].velocity.X * (float)(num9 - 1) + num7) / (float)num9;
                            Main.item[number].velocity.Y = (Main.item[number].velocity.Y * (float)(num9 - 1) + num8) / (float)num9;
                        }
                        else
                        {
                            if ((double)this.position.X + (double)this.width * 0.5 > (double)Main.item[number].position.X + (double)Main.item[number].width * 0.5)
                            {
                                if ((double)Main.item[number].velocity.X < (double)Player.itemGrabSpeedMax + (double)this.velocity.X)
                                    Main.item[number].velocity.X += Player.itemGrabSpeed;
                                if ((double)Main.item[number].velocity.X < 0.0)
                                    Main.item[number].velocity.X += Player.itemGrabSpeed * 0.75f;
                            }
                            else
                            {
                                if ((double)Main.item[number].velocity.X > -(double)Player.itemGrabSpeedMax + (double)this.velocity.X)
                                    Main.item[number].velocity.X -= Player.itemGrabSpeed;
                                if ((double)Main.item[number].velocity.X > 0.0)
                                    Main.item[number].velocity.X -= Player.itemGrabSpeed * 0.75f;
                            }
                            if ((double)this.position.Y + (double)this.height * 0.5 > (double)Main.item[number].position.Y + (double)Main.item[number].height * 0.5)
                            {
                                if ((double)Main.item[number].velocity.Y < (double)Player.itemGrabSpeedMax)
                                    Main.item[number].velocity.Y += Player.itemGrabSpeed;
                                if ((double)Main.item[number].velocity.Y < 0.0)
                                    Main.item[number].velocity.Y += Player.itemGrabSpeed * 0.75f;
                            }
                            else
                            {
                                if ((double)Main.item[number].velocity.Y > -(double)Player.itemGrabSpeedMax)
                                    Main.item[number].velocity.Y -= Player.itemGrabSpeed;
                                if ((double)Main.item[number].velocity.Y > 0.0)
                                    Main.item[number].velocity.Y -= Player.itemGrabSpeed * 0.75f;
                            }
                        }
                    }
                }
            }
        }

        public bool SellItem(int price, int stack)
        {
            if (price <= 0)
                return false;
            Item[] objArray = new Item[58];
            for (int index = 0; index < 58; ++index)
            {
                objArray[index] = new Item();
                objArray[index] = this.inventory[index].Clone();
            }
            int num = price / 5 * stack;
            if (num < 1)
                num = 1;
            bool flag = false;
            while (num >= 1000000 && !flag)
            {
                int index = -1;
                for (int i = 53; i >= 0; --i)
                {
                    if (index == -1 && (this.inventory[i].itemId == 0 || this.inventory[i].stack == 0))
                        index = i;
                    while (this.inventory[i].itemId == 74 && this.inventory[i].stack < this.inventory[i].maxStack && num >= 1000000)
                    {
                        ++this.inventory[i].stack;
                        num -= 1000000;
                        this.DoCoins(i);
                        if (this.inventory[i].stack == 0 && index == -1)
                            index = i;
                    }
                }
                if (num >= 1000000)
                {
                    if (index == -1)
                    {
                        flag = true;
                    }
                    else
                    {
                        this.inventory[index].SetDefaults(74, false);
                        num -= 1000000;
                    }
                }
            }
            while (num >= 10000 && !flag)
            {
                int index = -1;
                for (int i = 53; i >= 0; --i)
                {
                    if (index == -1 && (this.inventory[i].itemId == 0 || this.inventory[i].stack == 0))
                        index = i;
                    while (this.inventory[i].itemId == 73 && this.inventory[i].stack < this.inventory[i].maxStack && num >= 10000)
                    {
                        ++this.inventory[i].stack;
                        num -= 10000;
                        this.DoCoins(i);
                        if (this.inventory[i].stack == 0 && index == -1)
                            index = i;
                    }
                }
                if (num >= 10000)
                {
                    if (index == -1)
                    {
                        flag = true;
                    }
                    else
                    {
                        this.inventory[index].SetDefaults(73, false);
                        num -= 10000;
                    }
                }
            }
            while (num >= 100 && !flag)
            {
                int index = -1;
                for (int i = 53; i >= 0; --i)
                {
                    if (index == -1 && (this.inventory[i].itemId == 0 || this.inventory[i].stack == 0))
                        index = i;
                    while (this.inventory[i].itemId == 72 && this.inventory[i].stack < this.inventory[i].maxStack && num >= 100)
                    {
                        ++this.inventory[i].stack;
                        num -= 100;
                        this.DoCoins(i);
                        if (this.inventory[i].stack == 0 && index == -1)
                            index = i;
                    }
                }
                if (num >= 100)
                {
                    if (index == -1)
                    {
                        flag = true;
                    }
                    else
                    {
                        this.inventory[index].SetDefaults(72, false);
                        num -= 100;
                    }
                }
            }
            while (num >= 1 && !flag)
            {
                int index = -1;
                for (int i = 53; i >= 0; --i)
                {
                    if (index == -1 && (this.inventory[i].itemId == 0 || this.inventory[i].stack == 0))
                        index = i;
                    while (this.inventory[i].itemId == 71 && this.inventory[i].stack < this.inventory[i].maxStack && num >= 1)
                    {
                        ++this.inventory[i].stack;
                        --num;
                        this.DoCoins(i);
                        if (this.inventory[i].stack == 0 && index == -1)
                            index = i;
                    }
                }
                if (num >= 1)
                {
                    if (index == -1)
                    {
                        flag = true;
                    }
                    else
                    {
                        this.inventory[index].SetDefaults(71, false);
                        --num;
                    }
                }
            }
            if (!flag)
                return true;
            for (int index = 0; index < 58; ++index)
                this.inventory[index] = objArray[index].Clone();
            return false;
        }

        public bool BuyItem(int price)
        {
            bool overFlowing;
            long num1 = Utils.CoinsCount(out overFlowing, this.inventory, 58, 57, 56, 55, 54);
            long num2 = Utils.CoinsCount(out overFlowing, this.bank.item);
            long num3 = Utils.CoinsCount(out overFlowing, this.bank2.item);
            if (Utils.CoinsCombineStacks(out overFlowing, num1, num2, num3) < (long)price)
                return false;
            List<Item[]> list1 = new List<Item[]>();
            Dictionary<int, List<int>> dictionary1 = new Dictionary<int, List<int>>();
            List<Point> list2 = new List<Point>();
            List<Point> list3 = new List<Point>();
            List<Point> list4 = new List<Point>();
            List<Point> list5 = new List<Point>();
            list1.Add(this.inventory);
            list1.Add(this.bank.item);
            list1.Add(this.bank2.item);
            for (int index = 0; index < list1.Count; ++index)
                dictionary1[index] = new List<int>();
            dictionary1[0] = new List<int>()
      {
        58,
        57,
        56,
        55,
        54
      };
            for (int x = 0; x < list1.Count; ++x)
            {
                for (int y = 0; y < list1[x].Length; ++y)
                {
                    if (!dictionary1[x].Contains(y) && list1[x][y].itemId >= 71 && list1[x][y].itemId <= 74)
                        list3.Add(new Point(x, y));
                }
            }
            int x1 = 0;
            for (int y = list1[x1].Length - 1; y >= 0; --y)
            {
                if (!dictionary1[x1].Contains(y) && (list1[x1][y].itemId == 0 || list1[x1][y].stack == 0))
                    list2.Add(new Point(x1, y));
            }
            int x2 = 1;
            for (int y = list1[x2].Length - 1; y >= 0; --y)
            {
                if (!dictionary1[x2].Contains(y) && (list1[x2][y].itemId == 0 || list1[x2][y].stack == 0))
                    list4.Add(new Point(x2, y));
            }
            int x3 = 2;
            for (int y = list1[x3].Length - 1; y >= 0; --y)
            {
                if (!dictionary1[x3].Contains(y) && (list1[x3][y].itemId == 0 || list1[x3][y].stack == 0))
                    list5.Add(new Point(x3, y));
            }
            long num4 = (long)price;
            Dictionary<Point, Item> dictionary2 = new Dictionary<Point, Item>();
            while (num4 > 0L)
            {
                long num5 = 1000000L;
                for (int index1 = 0; index1 < 4; ++index1)
                {
                    if (num4 >= num5)
                    {
                        foreach (Point index2 in list3)
                        {
                            if (list1[index2.X][index2.Y].itemId == 74 - index1)
                            {
                                long num6 = num4 / num5;
                                dictionary2[index2] = list1[index2.X][index2.Y].Clone();
                                if (num6 < (long)list1[index2.X][index2.Y].stack)
                                {
                                    list1[index2.X][index2.Y].stack -= (int)num6;
                                }
                                else
                                {
                                    list1[index2.X][index2.Y].SetDefaults(0, false);
                                    list2.Add(index2);
                                }
                                num4 -= num5 * (long)(dictionary2[index2].stack - list1[index2.X][index2.Y].stack);
                            }
                        }
                    }
                    num5 /= 100L;
                }
                if (num4 > 0L)
                {
                    if (list2.Count > 0)
                    {
                        list2.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
                        Point point1 = new Point(-1, -1);
                        for (int index1 = 0; index1 < list1.Count; ++index1)
                        {
                            long num6 = 10000L;
                            for (int index2 = 0; index2 < 3; ++index2)
                            {
                                if (num4 >= num6)
                                {
                                    foreach (Point point2 in list3)
                                    {
                                        if (point2.X == index1 && list1[point2.X][point2.Y].itemId == 74 - index2 && list1[point2.X][point2.Y].stack >= 1)
                                        {
                                            List<Point> list6 = list2;
                                            if (index1 == 1 && list4.Count > 0)
                                                list6 = list4;
                                            if (index1 == 2 && list5.Count > 0)
                                                list6 = list5;
                                            if (--list1[point2.X][point2.Y].stack <= 0)
                                            {
                                                list1[point2.X][point2.Y].SetDefaults(0, false);
                                                list6.Add(point2);
                                            }
                                            dictionary2[list6[0]] = list1[list6[0].X][list6[0].Y].Clone();
                                            list1[list6[0].X][list6[0].Y].SetDefaults(73 - index2, false);
                                            list1[list6[0].X][list6[0].Y].stack = 100;
                                            point1 = list6[0];
                                            list6.RemoveAt(0);
                                            break;
                                        }
                                    }
                                }
                                if (point1.X == -1 && point1.Y == -1)
                                    num6 /= 100L;
                                else
                                    break;
                            }
                            for (int index2 = 0; index2 < 2; ++index2)
                            {
                                if (point1.X == -1 && point1.Y == -1)
                                {
                                    foreach (Point point2 in list3)
                                    {
                                        if (point2.X == index1 && list1[point2.X][point2.Y].itemId == 73 + index2 && list1[point2.X][point2.Y].stack >= 1)
                                        {
                                            List<Point> list6 = list2;
                                            if (index1 == 1 && list4.Count > 0)
                                                list6 = list4;
                                            if (index1 == 2 && list5.Count > 0)
                                                list6 = list5;
                                            if (--list1[point2.X][point2.Y].stack <= 0)
                                            {
                                                list1[point2.X][point2.Y].SetDefaults(0, false);
                                                list6.Add(point2);
                                            }
                                            dictionary2[list6[0]] = list1[list6[0].X][list6[0].Y].Clone();
                                            list1[list6[0].X][list6[0].Y].SetDefaults(72 + index2, false);
                                            list1[list6[0].X][list6[0].Y].stack = 100;
                                            point1 = list6[0];
                                            list6.RemoveAt(0);
                                            break;
                                        }
                                    }
                                }
                            }
                            if (point1.X != -1 && point1.Y != -1)
                            {
                                list3.Add(point1);
                                break;
                            }
                        }
                        list2.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
                        list4.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
                        list5.Sort(new Comparison<Point>(DelegateMethods.CompareYReverse));
                    }
                    else
                    {
                        foreach (KeyValuePair<Point, Item> keyValuePair in dictionary2)
                            list1[keyValuePair.Key.X][keyValuePair.Key.Y] = keyValuePair.Value.Clone();
                        return false;
                    }
                }
            }
            return true;
        }

        public bool BuyItemOld(int price)
        {
            if (price == 0)
                return true;
            long num1 = 0L;
            Item[] objArray = new Item[54];
            for (int index = 0; index < 54; ++index)
            {
                objArray[index] = new Item();
                objArray[index] = this.inventory[index].Clone();
                if (this.inventory[index].itemId == 71)
                    num1 += (long)this.inventory[index].stack;
                if (this.inventory[index].itemId == 72)
                    num1 += (long)(this.inventory[index].stack * 100);
                if (this.inventory[index].itemId == 73)
                    num1 += (long)(this.inventory[index].stack * 10000);
                if (this.inventory[index].itemId == 74)
                    num1 += (long)(this.inventory[index].stack * 1000000);
            }
            if (num1 < (long)price)
                return false;
            int num2 = price;
            while (num2 > 0)
            {
                if (num2 >= 1000000)
                {
                    for (int index = 0; index < 54; ++index)
                    {
                        if (this.inventory[index].itemId == 74)
                        {
                            while (this.inventory[index].stack > 0 && num2 >= 1000000)
                            {
                                num2 -= 1000000;
                                --this.inventory[index].stack;
                                if (this.inventory[index].stack == 0)
                                    this.inventory[index].itemId = 0;
                            }
                        }
                    }
                }
                if (num2 >= 10000)
                {
                    for (int index = 0; index < 54; ++index)
                    {
                        if (this.inventory[index].itemId == 73)
                        {
                            while (this.inventory[index].stack > 0 && num2 >= 10000)
                            {
                                num2 -= 10000;
                                --this.inventory[index].stack;
                                if (this.inventory[index].stack == 0)
                                    this.inventory[index].itemId = 0;
                            }
                        }
                    }
                }
                if (num2 >= 100)
                {
                    for (int index = 0; index < 54; ++index)
                    {
                        if (this.inventory[index].itemId == 72)
                        {
                            while (this.inventory[index].stack > 0 && num2 >= 100)
                            {
                                num2 -= 100;
                                --this.inventory[index].stack;
                                if (this.inventory[index].stack == 0)
                                    this.inventory[index].itemId = 0;
                            }
                        }
                    }
                }
                if (num2 >= 1)
                {
                    for (int index = 0; index < 54; ++index)
                    {
                        if (this.inventory[index].itemId == 71)
                        {
                            while (this.inventory[index].stack > 0 && num2 >= 1)
                            {
                                --num2;
                                --this.inventory[index].stack;
                                if (this.inventory[index].stack == 0)
                                    this.inventory[index].itemId = 0;
                            }
                        }
                    }
                }
                if (num2 > 0)
                {
                    int index1 = -1;
                    for (int index2 = 53; index2 >= 0; --index2)
                    {
                        if (this.inventory[index2].itemId == 0 || this.inventory[index2].stack == 0)
                        {
                            index1 = index2;
                            break;
                        }
                    }
                    if (index1 >= 0)
                    {
                        bool flag = true;
                        if (num2 >= 10000)
                        {
                            for (int index2 = 0; index2 < 58; ++index2)
                            {
                                if (this.inventory[index2].itemId == 74 && this.inventory[index2].stack >= 1)
                                {
                                    --this.inventory[index2].stack;
                                    if (this.inventory[index2].stack == 0)
                                        this.inventory[index2].itemId = 0;
                                    this.inventory[index1].SetDefaults(73, false);
                                    this.inventory[index1].stack = 100;
                                    flag = false;
                                    break;
                                }
                            }
                        }
                        else if (num2 >= 100)
                        {
                            for (int index2 = 0; index2 < 54; ++index2)
                            {
                                if (this.inventory[index2].itemId == 73 && this.inventory[index2].stack >= 1)
                                {
                                    --this.inventory[index2].stack;
                                    if (this.inventory[index2].stack == 0)
                                        this.inventory[index2].itemId = 0;
                                    this.inventory[index1].SetDefaults(72, false);
                                    this.inventory[index1].stack = 100;
                                    flag = false;
                                    break;
                                }
                            }
                        }
                        else if (num2 >= 1)
                        {
                            for (int index2 = 0; index2 < 54; ++index2)
                            {
                                if (this.inventory[index2].itemId == 72 && this.inventory[index2].stack >= 1)
                                {
                                    --this.inventory[index2].stack;
                                    if (this.inventory[index2].stack == 0)
                                        this.inventory[index2].itemId = 0;
                                    this.inventory[index1].SetDefaults(71, false);
                                    this.inventory[index1].stack = 100;
                                    flag = false;
                                    break;
                                }
                            }
                        }
                        if (flag)
                        {
                            if (num2 < 10000)
                            {
                                for (int index2 = 0; index2 < 54; ++index2)
                                {
                                    if (this.inventory[index2].itemId == 73 && this.inventory[index2].stack >= 1)
                                    {
                                        --this.inventory[index2].stack;
                                        if (this.inventory[index2].stack == 0)
                                            this.inventory[index2].itemId = 0;
                                        this.inventory[index1].SetDefaults(72, false);
                                        this.inventory[index1].stack = 100;
                                        flag = false;
                                        break;
                                    }
                                }
                            }
                            if (flag && num2 < 1000000)
                            {
                                for (int index2 = 0; index2 < 54; ++index2)
                                {
                                    if (this.inventory[index2].itemId == 74 && this.inventory[index2].stack >= 1)
                                    {
                                        --this.inventory[index2].stack;
                                        if (this.inventory[index2].stack == 0)
                                            this.inventory[index2].itemId = 0;
                                        this.inventory[index1].SetDefaults(73, false);
                                        this.inventory[index1].stack = 100;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        for (int index2 = 0; index2 < 54; ++index2)
                            this.inventory[index2] = objArray[index2].Clone();
                        return false;
                    }
                }
            }
            return true;
        }

        public void AdjTiles()
        {
            int num1 = 4;
            int num2 = 3;
            for (int index = 0; index < 419; ++index)
            {
                this.oldAdjTile[index] = this.adjTile[index];
                this.adjTile[index] = false;
            }
            this.oldAdjWater = this.adjWater;
            this.adjWater = false;
            this.oldAdjHoney = this.adjHoney;
            this.adjHoney = false;
            this.oldAdjLava = this.adjLava;
            this.adjLava = false;
            this.alchemyTable = false;
            int num3 = (int)(((double)this.position.X + (double)(this.width / 2)) / 16.0);
            int num4 = (int)(((double)this.position.Y + (double)this.height) / 16.0);
            for (int index1 = num3 - num1; index1 <= num3 + num1; ++index1)
            {
                for (int index2 = num4 - num2; index2 < num4 + num2; ++index2)
                {
                    if (Main.tile[index1, index2].active())
                    {
                        this.adjTile[(int)Main.tile[index1, index2].type] = true;
                        if ((int)Main.tile[index1, index2].type == 302)
                            this.adjTile[17] = true;
                        if ((int)Main.tile[index1, index2].type == 77)
                            this.adjTile[17] = true;
                        if ((int)Main.tile[index1, index2].type == 133)
                        {
                            this.adjTile[17] = true;
                            this.adjTile[77] = true;
                        }
                        if ((int)Main.tile[index1, index2].type == 134)
                            this.adjTile[16] = true;
                        if ((int)Main.tile[index1, index2].type == 354)
                            this.adjTile[14] = true;
                        if ((int)Main.tile[index1, index2].type == 355)
                        {
                            this.adjTile[13] = true;
                            this.adjTile[14] = true;
                            this.alchemyTable = true;
                        }
                    }
                    if ((int)Main.tile[index1, index2].liquid > 200 && (int)Main.tile[index1, index2].liquidType() == 0)
                        this.adjWater = true;
                    if ((int)Main.tile[index1, index2].liquid > 200 && (int)Main.tile[index1, index2].liquidType() == 2)
                        this.adjHoney = true;
                    if ((int)Main.tile[index1, index2].liquid > 200 && (int)Main.tile[index1, index2].liquidType() == 1)
                        this.adjLava = true;
                }
            }
            if (!Main.playerInventory)
                return;
            bool flag = false;
            for (int index = 0; index < 419; ++index)
            {
                if (this.oldAdjTile[index] != this.adjTile[index])
                {
                    flag = true;
                    break;
                }
            }
            if (this.adjWater != this.oldAdjWater)
                flag = true;
            if (this.adjHoney != this.oldAdjHoney)
                flag = true;
            if (this.adjLava != this.oldAdjLava)
                flag = true;
            if (!flag)
                return;
            Recipe.FindRecipes();
        }

        public void PlayerFrame()
        {
            if (this.swimTime > 0)
            {
                --this.swimTime;
                if (!this.wet)
                    this.swimTime = 0;
            }
            this.head = this.armor[0].headSlot;
            this.body = this.armor[1].bodySlot;
            this.legs = this.armor[2].legSlot;
            for (int index = 3; index < 8 + this.extraAccessorySlots; ++index)
            {
                if ((int)this.armor[index].shieldSlot == 5 && this.eocDash > 0)
                    this.shield = this.armor[index].shieldSlot;
                if (((int)this.shield <= 0 || (int)this.armor[index].frontSlot < 1 || (int)this.armor[index].frontSlot > 4) && ((int)this.front < 1 || (int)this.front > 4 || (int)this.armor[index].shieldSlot <= 0))
                {
                    if ((int)this.armor[index].wingSlot > 0)
                    {
                        if (!this.hideVisual[index] || (double)this.velocity.Y != 0.0 && !this.mount.Active)
                            this.wings = (int)this.armor[index].wingSlot;
                        else
                            continue;
                    }
                    if (!this.hideVisual[index])
                    {
                        if (this.armor[index].stringColor > 0)
                            this.stringColor = this.armor[index].stringColor;
                        if ((int)this.armor[index].handOnSlot > 0)
                            this.handon = this.armor[index].handOnSlot;
                        if ((int)this.armor[index].handOffSlot > 0)
                            this.handoff = this.armor[index].handOffSlot;
                        if ((int)this.armor[index].backSlot > 0)
                        {
                            this.back = this.armor[index].backSlot;
                            this.front = (sbyte)-1;
                        }
                        if ((int)this.armor[index].frontSlot > 0)
                            this.front = this.armor[index].frontSlot;
                        if ((int)this.armor[index].shoeSlot > 0)
                            this.shoe = this.armor[index].shoeSlot;
                        if ((int)this.armor[index].waistSlot > 0)
                            this.waist = this.armor[index].waistSlot;
                        if ((int)this.armor[index].shieldSlot > 0)
                            this.shield = this.armor[index].shieldSlot;
                        if ((int)this.armor[index].neckSlot > 0)
                            this.neck = this.armor[index].neckSlot;
                        if ((int)this.armor[index].faceSlot > 0)
                            this.face = this.armor[index].faceSlot;
                        if ((int)this.armor[index].balloonSlot > 0)
                            this.balloon = this.armor[index].balloonSlot;
                        if (this.armor[index].itemId == 3580)
                            this.yoraiz0rEye = index - 2;
                        if (this.armor[index].itemId == 3581)
                            this.yoraiz0rDarkness = true;
                    }
                }
            }
            for (int index = 13; index < 18 + this.extraAccessorySlots; ++index)
            {
                if (this.armor[index].stringColor > 0)
                    this.stringColor = this.armor[index].stringColor;
                if ((int)this.armor[index].handOnSlot > 0)
                    this.handon = this.armor[index].handOnSlot;
                if ((int)this.armor[index].handOffSlot > 0)
                    this.handoff = this.armor[index].handOffSlot;
                if ((int)this.armor[index].backSlot > 0)
                {
                    this.back = this.armor[index].backSlot;
                    this.front = (sbyte)-1;
                }
                if ((int)this.armor[index].frontSlot > 0)
                    this.front = this.armor[index].frontSlot;
                if ((int)this.armor[index].shoeSlot > 0)
                    this.shoe = this.armor[index].shoeSlot;
                if ((int)this.armor[index].waistSlot > 0)
                    this.waist = this.armor[index].waistSlot;
                if ((int)this.armor[index].shieldSlot > 0)
                    this.shield = this.armor[index].shieldSlot;
                if ((int)this.armor[index].neckSlot > 0)
                    this.neck = this.armor[index].neckSlot;
                if ((int)this.armor[index].faceSlot > 0)
                    this.face = this.armor[index].faceSlot;
                if ((int)this.armor[index].balloonSlot > 0)
                    this.balloon = this.armor[index].balloonSlot;
                if ((int)this.armor[index].wingSlot > 0)
                    this.wings = (int)this.armor[index].wingSlot;
                if (this.armor[index].itemId == 3580)
                    this.yoraiz0rEye = index - 2;
                if (this.armor[index].itemId == 3581)
                    this.yoraiz0rDarkness = true;
            }
            if (this.armor[10].headSlot >= 0)
                this.head = this.armor[10].headSlot;
            if (this.armor[11].bodySlot >= 0)
                this.body = this.armor[11].bodySlot;
            if (this.armor[12].legSlot >= 0)
                this.legs = this.armor[12].legSlot;
            this.wearsRobe = false;
            int num1 = Player.SetMatch(1, this.body, this.Male, ref this.wearsRobe);
            if (num1 != -1)
                this.legs = num1;
            bool somethingSpecial = false;
            int num2 = Player.SetMatch(2, this.legs, this.Male, ref somethingSpecial);
            if (num2 != -1)
                this.legs = num2;
            if (this.body == 93)
            {
                this.shield = (sbyte)0;
                this.handoff = (sbyte)0;
            }
            if (this.legs == 67)
                this.shoe = (sbyte)0;
            if (this.wereWolf)
            {
                this.legs = 20;
                this.body = 21;
                this.head = 38;
            }
            if (this.merman)
            {
                this.head = 39;
                this.legs = 21;
                this.body = 22;
                this.wings = 0;
            }
            this.socialShadow = false;
            this.socialGhost = false;
            if (this.head == 101 && this.body == 66 && this.legs == 55)
                this.socialGhost = true;
            if (this.head == 156 && this.body == 66 && this.legs == 55)
                this.socialGhost = true;
            if (this.head == 99 && this.body == 65 && this.legs == 54)
                this.turtleArmor = true;
            if (this.head == 162 && this.body == 170 && this.legs == 105)
                this.spiderArmor = true;
            if ((this.head == 75 || this.head == 7) && (this.body == 7 && this.legs == 7))
                this.boneArmor = true;
            if (this.wings > 0)
            {
                this.back = (sbyte)-1;
                this.front = (sbyte)-1;
            }
            if (this.head > 0 && (int)this.face != 7)
                this.face = (sbyte)-1;
            if (this.webbed || this.frozen || this.stoned || Main.gamePaused && !Main.gameMenu)
                return;
            if ((this.body == 68 && this.legs == 57 && this.head == 106 || this.body == 74 && this.legs == 63 && this.head == 106) && Main.rand.Next(10) == 0)
            {
                int index = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, (float)((double)this.position.Y - 2.0 - (double)this.velocity.Y * 2.0)), this.width, this.height, 43, 0.0f, 0.0f, 100, new Color((int)byte.MaxValue, 0, (int)byte.MaxValue), 0.3f);
                Main.dust[index].fadeIn = 0.8f;
                Main.dust[index].noGravity = true;
                Main.dust[index].velocity *= 2f;
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }
            if (this.wings == 27)
            {
                float R = 0.4f * this.stealth;
                Lighting.AddLight((int)this.Center.X / 16, (int)this.Center.Y / 16, R, R * 0.9f, R * 0.2f);
            }
            if (this.head == 5 && this.body == 5 && this.legs == 5)
                this.socialShadow = true;
            if (this.head == 5 && this.body == 5 && (this.legs == 5 && Main.rand.Next(10) == 0))
            {
                int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0.0f, 0.0f, 200, new Color(), 1.2f);
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }
            if (this.head == 76 && this.body == 49 && this.legs == 45)
                this.socialShadow = true;
            if (this.head == 74 && this.body == 48 && this.legs == 44)
                this.socialShadow = true;
            if (this.head == 74 && this.body == 48 && (this.legs == 44 && Main.rand.Next(10) == 0))
            {
                int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0.0f, 0.0f, 200, new Color(), 1.2f);
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }
            if (this.head == 57 && this.body == 37 && this.legs == 35)
            {
                int maxValue = 10;
                if ((double)Math.Abs(this.velocity.X) + (double)Math.Abs(this.velocity.Y) > 1.0)
                    maxValue = 2;
                if (Main.rand.Next(maxValue) == 0)
                {
                    int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 115, 0.0f, 0.0f, 140, new Color(), 0.75f);
                    Main.dust[index].noGravity = true;
                    Main.dust[index].fadeIn = 1.5f;
                    Main.dust[index].velocity *= 0.3f;
                    Main.dust[index].velocity += this.velocity * 0.2f;
                    Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
            }
            if (this.head == 6 && this.body == 6 && (this.legs == 6 && (double)Math.Abs(this.velocity.X) + (double)Math.Abs(this.velocity.Y) > 1.0) && !this.rocketFrame)
            {
                for (int index1 = 0; index1 < 2; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, (float)((double)this.position.Y - 2.0 - (double)this.velocity.Y * 2.0)), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].velocity.X -= this.velocity.X * 0.5f;
                    Main.dust[index2].velocity.Y -= this.velocity.Y * 0.5f;
                    Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
            }
            if (this.head == 8 && this.body == 8 && (this.legs == 8 && (double)Math.Abs(this.velocity.X) + (double)Math.Abs(this.velocity.Y) > 1.0))
            {
                int index = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, (float)((double)this.position.Y - 2.0 - (double)this.velocity.Y * 2.0)), this.width, this.height, 40, 0.0f, 0.0f, 50, new Color(), 1.4f);
                Main.dust[index].noGravity = true;
                Main.dust[index].velocity.X = this.velocity.X * 0.25f;
                Main.dust[index].velocity.Y = this.velocity.Y * 0.25f;
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }
            if (this.head == 9 && this.body == 9 && (this.legs == 9 && (double)Math.Abs(this.velocity.X) + (double)Math.Abs(this.velocity.Y) > 1.0) && !this.rocketFrame)
            {
                for (int index1 = 0; index1 < 2; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, (float)((double)this.position.Y - 2.0 - (double)this.velocity.Y * 2.0)), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].noLight = true;
                    Main.dust[index2].velocity.X -= this.velocity.X * 0.5f;
                    Main.dust[index2].velocity.Y -= this.velocity.Y * 0.5f;
                    Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
            }
            if (this.body == 18 && this.legs == 17 && (this.head == 32 || this.head == 33 || this.head == 34) && Main.rand.Next(10) == 0)
            {
                int index = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, (float)((double)this.position.Y - 2.0 - (double)this.velocity.Y * 2.0)), this.width, this.height, 43, 0.0f, 0.0f, 100, new Color(), 0.3f);
                Main.dust[index].fadeIn = 0.8f;
                Main.dust[index].velocity *= 0.0f;
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }
            if (this.body == 24 && this.legs == 23 && (this.head == 42 || this.head == 43 || this.head == 41) && ((double)this.velocity.X != 0.0 && (double)this.velocity.Y != 0.0 && Main.rand.Next(10) == 0))
            {
                int index = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * 2f, (float)((double)this.position.Y - 2.0 - (double)this.velocity.Y * 2.0)), this.width, this.height, 43, 0.0f, 0.0f, 100, new Color(), 0.3f);
                Main.dust[index].fadeIn = 0.8f;
                Main.dust[index].velocity *= 0.0f;
                Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
            }
            if (this.body == 36 && this.head == 56 && ((double)this.velocity.X != 0.0 && (double)this.velocity.Y == 0.0))
            {
                for (int index1 = 0; index1 < 2; ++index1)
                {
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + ((double)this.gravDir == 1.0 ? (float)(this.height - 2) : -4f)), this.width, 6, 106, 0.0f, 0.0f, 100, new Color(), 0.1f);
                    Main.dust[index2].fadeIn = 1f;
                    Main.dust[index2].noGravity = true;
                    Main.dust[index2].velocity *= 0.2f;
                    Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
            }
            if (this.body == 27 && this.head == 46 && this.legs == 26)
            {
                this.frostArmor = true;
                if ((double)this.velocity.X != 0.0 && (double)this.velocity.Y == 0.0 && this.miscCounter % 2 == 0)
                {
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        int index2 = index1 != 0 ? Dust.NewDust(new Vector2(this.position.X + (float)(this.width / 2), this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0.0f, 0.0f, 0, new Color(), 1.35f) : Dust.NewDust(new Vector2(this.position.X, this.position.Y + (float)this.height + this.gfxOffY), this.width / 2, 6, 76, 0.0f, 0.0f, 0, new Color(), 1.35f);
                        Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(20, 40) * 0.00999999977648258);
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].noLight = true;
                        Main.dust[index2].velocity *= 1.0f / 1000.0f;
                        Main.dust[index2].velocity.Y -= 3.0f / 1000.0f;
                        Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                    }
                }
            }
            this.bodyFrame.Width = 40;
            this.bodyFrame.Height = 56;
            this.legFrame.Width = 40;
            this.legFrame.Height = 56;
            this.bodyFrame.X = 0;
            this.legFrame.X = 0;
            if (this.mount.Active)
            {
                this.legFrameCounter = 0.0;
                this.legFrame.Y = this.legFrame.Height * 6;
                if ((double)this.velocity.Y != 0.0)
                {
                    if (this.mount.FlyTime > 0 && this.jump == 0 && (this.controlJump && !this.mount.CanHover))
                    {
                        if (this.mount.Type == 0)
                        {
                            if (this.direction > 0)
                            {
                                if (Main.rand.Next(4) == 0)
                                {
                                    int index = Dust.NewDust(new Vector2(this.Center.X - 22f, (float)((double)this.position.Y + (double)this.height - 6.0)), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, (int)byte.MaxValue, new Color(), 1f);
                                    Main.dust[index].velocity *= 0.1f;
                                    Main.dust[index].noLight = true;
                                }
                                if (Main.rand.Next(4) == 0)
                                {
                                    int index = Dust.NewDust(new Vector2(this.Center.X + 12f, (float)((double)this.position.Y + (double)this.height - 6.0)), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, (int)byte.MaxValue, new Color(), 1f);
                                    Main.dust[index].velocity *= 0.1f;
                                    Main.dust[index].noLight = true;
                                }
                            }
                            else
                            {
                                if (Main.rand.Next(4) == 0)
                                {
                                    int index = Dust.NewDust(new Vector2(this.Center.X - 32f, (float)((double)this.position.Y + (double)this.height - 6.0)), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, (int)byte.MaxValue, new Color(), 1f);
                                    Main.dust[index].velocity *= 0.1f;
                                    Main.dust[index].noLight = true;
                                }
                                if (Main.rand.Next(4) == 0)
                                {
                                    int index = Dust.NewDust(new Vector2(this.Center.X + 2f, (float)((double)this.position.Y + (double)this.height - 6.0)), 20, 10, 64, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, (int)byte.MaxValue, new Color(), 1f);
                                    Main.dust[index].velocity *= 0.1f;
                                    Main.dust[index].noLight = true;
                                }
                            }
                        }
                        this.mount.UpdateFrame(this, 3, this.velocity);
                    }
                    else if (this.wet)
                        this.mount.UpdateFrame(this, 4, this.velocity);
                    else
                        this.mount.UpdateFrame(this, 2, this.velocity);
                }
                else if ((double)this.velocity.X == 0.0)
                    this.mount.UpdateFrame(this, 0, this.velocity);
                else
                    this.mount.UpdateFrame(this, 1, this.velocity);
            }
            else if (this.swimTime > 0)
            {
                this.legFrameCounter += 2.0;
                while (this.legFrameCounter > 8.0)
                {
                    this.legFrameCounter -= 8.0;
                    this.legFrame.Y += this.legFrame.Height;
                }
                if (this.legFrame.Y < this.legFrame.Height * 7)
                    this.legFrame.Y = this.legFrame.Height * 19;
                else if (this.legFrame.Y > this.legFrame.Height * 19)
                    this.legFrame.Y = this.legFrame.Height * 7;
            }
            else if ((double)this.velocity.Y != 0.0 || this.grappling[0] > -1)
            {
                this.legFrameCounter = 0.0;
                this.legFrame.Y = this.legFrame.Height * 5;
                if (this.wings == 22 || this.wings == 28)
                    this.legFrame.Y = 0;
            }
            else if ((double)this.velocity.X != 0.0)
            {
                if ((this.slippy || this.slippy2) && (!this.controlLeft && !this.controlRight))
                {
                    this.legFrameCounter = 0.0;
                    this.legFrame.Y = 0;
                }
                else
                {
                    this.legFrameCounter += (double)Math.Abs(this.velocity.X) * 1.3;
                    while (this.legFrameCounter > 8.0)
                    {
                        this.legFrameCounter -= 8.0;
                        this.legFrame.Y += this.legFrame.Height;
                    }
                    if (this.legFrame.Y < this.legFrame.Height * 7)
                        this.legFrame.Y = this.legFrame.Height * 19;
                    else if (this.legFrame.Y > this.legFrame.Height * 19)
                        this.legFrame.Y = this.legFrame.Height * 7;
                }
            }
            else
            {
                this.legFrameCounter = 0.0;
                this.legFrame.Y = 0;
            }
            if (this.carpetFrame >= 0)
            {
                this.legFrameCounter = 0.0;
                this.legFrame.Y = 0;
            }
            if (this.sandStorm)
            {
                if (this.miscCounter % 4 == 0 && this.itemAnimation == 0)
                {
                    this.ChangeDir(this.direction * -1);
                    if (this.inventory[this.selectedItem].holdStyle == 2)
                    {
                        if (this.inventory[this.selectedItem].itemId == 946)
                            this.itemLocation.X = this.position.X + (float)this.width * 0.5f - (float)(16 * this.direction);
                        if (this.inventory[this.selectedItem].itemId == 186)
                        {
                            this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(6 * this.direction);
                            this.itemRotation = 0.79f * (float)-this.direction;
                        }
                    }
                }
                this.legFrameCounter = 0.0;
                this.legFrame.Y = 0;
            }
            if (this.itemAnimation > 0 && this.inventory[this.selectedItem].useStyle != 10)
            {
                if (this.inventory[this.selectedItem].useStyle == 1 || this.inventory[this.selectedItem].itemId == 0)
                {
                    if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
                        this.bodyFrame.Y = this.bodyFrame.Height * 3;
                    else if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.666)
                        this.bodyFrame.Y = this.bodyFrame.Height * 2;
                    else
                        this.bodyFrame.Y = this.bodyFrame.Height;
                }
                else if (this.inventory[this.selectedItem].useStyle == 2)
                {
                    if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.5)
                        this.bodyFrame.Y = this.bodyFrame.Height * 3;
                    else
                        this.bodyFrame.Y = this.bodyFrame.Height * 2;
                }
                else if (this.inventory[this.selectedItem].useStyle == 3)
                {
                    if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.666)
                        this.bodyFrame.Y = this.bodyFrame.Height * 3;
                    else
                        this.bodyFrame.Y = this.bodyFrame.Height * 3;
                }
                else if (this.inventory[this.selectedItem].useStyle == 4)
                {
                    this.bodyFrame.Y = this.bodyFrame.Height * 2;
                }
                else
                {
                    if (this.inventory[this.selectedItem].useStyle != 5)
                        return;
                    if (this.inventory[this.selectedItem].itemId == 281 || this.inventory[this.selectedItem].itemId == 986)
                    {
                        this.bodyFrame.Y = this.bodyFrame.Height * 2;
                    }
                    else
                    {
                        float num3 = this.itemRotation * (float)this.direction;
                        this.bodyFrame.Y = this.bodyFrame.Height * 3;
                        if ((double)num3 < -0.75)
                        {
                            this.bodyFrame.Y = this.bodyFrame.Height * 2;
                            if ((double)this.gravDir == -1.0)
                                this.bodyFrame.Y = this.bodyFrame.Height * 4;
                        }
                        if ((double)num3 <= 0.6)
                            return;
                        this.bodyFrame.Y = this.bodyFrame.Height * 4;
                        if ((double)this.gravDir != -1.0)
                            return;
                        this.bodyFrame.Y = this.bodyFrame.Height * 2;
                    }
                }
            }
            else if (this.mount.Active)
            {
                this.bodyFrameCounter = 0.0;
                this.bodyFrame.Y = this.bodyFrame.Height * this.mount.BodyFrame;
            }
            else if (this.pulley)
            {
                if ((int)this.pulleyDir == 2)
                    this.bodyFrame.Y = this.bodyFrame.Height;
                else
                    this.bodyFrame.Y = this.bodyFrame.Height * 2;
            }
            else if (this.inventory[this.selectedItem].holdStyle == 1 && (!this.wet || !this.inventory[this.selectedItem].noWet))
                this.bodyFrame.Y = this.bodyFrame.Height * 3;
            else if (this.inventory[this.selectedItem].holdStyle == 2 && (!this.wet || !this.inventory[this.selectedItem].noWet))
                this.bodyFrame.Y = this.bodyFrame.Height * 2;
            else if (this.inventory[this.selectedItem].holdStyle == 3)
                this.bodyFrame.Y = this.bodyFrame.Height * 3;
            else if (this.grappling[0] >= 0)
            {
                this.sandStorm = false;
                this.dJumpEffectCloud = false;
                this.dJumpEffectSandstorm = false;
                this.dJumpEffectBlizzard = false;
                this.dJumpEffectFart = false;
                this.dJumpEffectSail = false;
                this.dJumpEffectUnicorn = false;
                Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
                float num3 = 0.0f;
                float num4 = 0.0f;
                for (int index = 0; index < this.grapCount; ++index)
                {
                    num3 += Main.projectile[this.grappling[index]].position.X + (float)(Main.projectile[this.grappling[index]].width / 2);
                    num4 += Main.projectile[this.grappling[index]].position.Y + (float)(Main.projectile[this.grappling[index]].height / 2);
                }
                float num5 = num3 / (float)this.grapCount;
                float num6 = num4 / (float)this.grapCount;
                float num7 = num5 - vector2.X;
                float num8 = num6 - vector2.Y;
                if ((double)num8 < 0.0 && (double)Math.Abs(num8) > (double)Math.Abs(num7))
                {
                    this.bodyFrame.Y = this.bodyFrame.Height * 2;
                    if ((double)this.gravDir != -1.0)
                        return;
                    this.bodyFrame.Y = this.bodyFrame.Height * 4;
                }
                else if ((double)num8 > 0.0 && (double)Math.Abs(num8) > (double)Math.Abs(num7))
                {
                    this.bodyFrame.Y = this.bodyFrame.Height * 4;
                    if ((double)this.gravDir != -1.0)
                        return;
                    this.bodyFrame.Y = this.bodyFrame.Height * 2;
                }
                else
                    this.bodyFrame.Y = this.bodyFrame.Height * 3;
            }
            else if (this.swimTime > 0)
            {
                if (this.swimTime > 20)
                    this.bodyFrame.Y = 0;
                else if (this.swimTime > 10)
                    this.bodyFrame.Y = this.bodyFrame.Height * 5;
                else
                    this.bodyFrame.Y = 0;
            }
            else if ((double)this.velocity.Y != 0.0)
            {
                this.bodyFrame.Y = !this.sliding ? (this.sandStorm || this.carpetFrame >= 0 ? this.bodyFrame.Height * 6 : (this.eocDash <= 0 ? (this.wings <= 0 ? this.bodyFrame.Height * 5 : (this.wings == 22 || this.wings == 28 ? 0 : ((double)this.velocity.Y <= 0.0 ? this.bodyFrame.Height * 6 : (!this.controlJump ? this.bodyFrame.Height * 5 : this.bodyFrame.Height * 6)))) : this.bodyFrame.Height * 6)) : this.bodyFrame.Height * 3;
                this.bodyFrameCounter = 0.0;
            }
            else if ((double)this.velocity.X != 0.0)
            {
                this.bodyFrameCounter += (double)Math.Abs(this.velocity.X) * 1.5;
                this.bodyFrame.Y = this.legFrame.Y;
            }
            else
            {
                this.bodyFrameCounter = 0.0;
                this.bodyFrame.Y = 0;
            }
        }

        public static int SetMatch(int armorslot, int type, bool male, ref bool somethingSpecial)
        {
            int num = -1;
            if (armorslot == 1)
            {
                switch (type)
                {
                    case 180:
                        num = 115;
                        break;
                    case 181:
                        num = 116;
                        break;
                    case 183:
                        num = 123;
                        break;
                    case 191:
                        num = 131;
                        break;
                    case 77:
                        num = 121;
                        break;
                    case 165:
                        num = male ? 99 : 118;
                        break;
                    case 166:
                        num = male ? 100 : 119;
                        break;
                    case 167:
                        num = male ? 101 : 102;
                        break;
                    case 41:
                        num = 97;
                        break;
                    case 42:
                        num = 90;
                        break;
                    case 58:
                        num = 91;
                        break;
                    case 59:
                        num = 92;
                        break;
                    case 60:
                        num = 93;
                        break;
                    case 61:
                        num = 94;
                        break;
                    case 62:
                        num = 95;
                        break;
                    case 63:
                        num = 96;
                        break;
                    case 15:
                        num = 88;
                        break;
                    case 36:
                        num = 89;
                        break;
                }
                if (num != -1)
                    somethingSpecial = true;
            }
            if (armorslot == 2)
            {
                switch (type)
                {
                    case 83:
                        if (male)
                        {
                            num = 117;
                            break;
                        }
                        break;
                    case 84:
                        if (male)
                        {
                            num = 120;
                            break;
                        }
                        break;
                }
            }
            return num;
        }

        public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
        {
            try
            {
                this.grappling[0] = -1;
                this.grapCount = 0;
                for (int index = 0; index < 1000; ++index)
                {
                    if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI && Main.projectile[index].aiStyle == 7)
                        Main.projectile[index].Kill();
                }
                int extraInfo1 = 0;
                if (Style == 4)
                    extraInfo1 = this.lastPortalColorIndex;
                Main.TeleportEffect(this.getRect(), Style, extraInfo1);
                this.position = newPos;
                this.fallStart = (int)((double)this.position.Y / 16.0);
                if (this.whoAmI == Main.myPlayer)
                {
                    Main.BlackFadeIn = (int)byte.MaxValue;
                    Lighting.BlackOut();
                    Main.screenLastPosition = Main.screenPosition;
                    Main.screenPosition.X = this.position.X + (float)(this.width / 2) - (float)(Main.screenWidth / 2);
                    Main.screenPosition.Y = this.position.Y + (float)(this.height / 2) - (float)(Main.screenHeight / 2);
                    if (Main.mapTime < 5)
                        Main.mapTime = 5;
                    Main.quickBG = 10;
                    Main.maxQ = true;
                    Main.renderNow = true;
                }
                if (Style == 4)
                {
                    this.lastPortalColorIndex = extraInfo;
                    extraInfo1 = this.lastPortalColorIndex;
                    this.justGotOutOfPortal = true;
                    this.gravity = 0.0f;
                }
                for (int index = 0; index < 3; ++index)
                    this.UpdateSocialShadow();
                this.oldPosition = this.position;
                Main.TeleportEffect(this.getRect(), Style, extraInfo1);
                this.teleportTime = 1f;
                this.teleportStyle = Style;
            }
            catch
            {
            }
        }

        public void Spawn()
        {
            Main.InitLifeBytes();
            if (this.whoAmI == Main.myPlayer)
            {
                if (Main.mapTime < 5)
                    Main.mapTime = 5;
                Main.quickBG = 10;
                this.FindSpawn();
                if (!Player.CheckSpawn(this.SpawnX, this.SpawnY))
                {
                    this.SpawnX = -1;
                    this.SpawnY = -1;
                }
                Main.maxQ = true;
            }
            if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
            {
                NetMessage.SendData(12, -1, -1, "", Main.myPlayer, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                Main.gameMenu = false;
            }
            this.headPosition = Vector2.Zero;
            this.bodyPosition = Vector2.Zero;
            this.legPosition = Vector2.Zero;
            this.headRotation = 0.0f;
            this.bodyRotation = 0.0f;
            this.legRotation = 0.0f;
            this.lavaTime = this.lavaMax;
            if (this.statLife <= 0)
            {
                int num = this.statLifeMax2 / 2;
                this.statLife = 100;
                if (num > this.statLife)
                    this.statLife = num;
                this.breath = this.breathMax;
                if (this.spawnMax)
                {
                    this.statLife = this.statLifeMax2;
                    this.statMana = this.statManaMax2;
                }
            }
            this.immune = true;
            this.dead = false;
            this.immuneTime = 0;
            this.active = true;
            if (this.SpawnX >= 0 && this.SpawnY >= 0)
            {
                this.position.X = (float)(this.SpawnX * 16 + 8 - this.width / 2);
                this.position.Y = (float)(this.SpawnY * 16 - this.height);
            }
            else
            {
                this.position.X = (float)(Main.spawnTileX * 16 + 8 - this.width / 2);
                this.position.Y = (float)(Main.spawnTileY * 16 - this.height);
                for (int i = Main.spawnTileX - 1; i < Main.spawnTileX + 2; ++i)
                {
                    for (int j = Main.spawnTileY - 3; j < Main.spawnTileY; ++j)
                    {
                        if (Main.tileSolid[(int)Main.tile[i, j].type] && !Main.tileSolidTop[(int)Main.tile[i, j].type])
                            WorldGen.KillTile(i, j, false, false, false);
                        if ((int)Main.tile[i, j].liquid > 0)
                        {
                            Main.tile[i, j].lava(false);
                            Main.tile[i, j].liquid = (byte)0;
                            WorldGen.SquareTileFrame(i, j, true);
                        }
                    }
                }
            }
            this.wet = false;
            this.wetCount = (byte)0;
            this.lavaWet = false;
            this.fallStart = (int)((double)this.position.Y / 16.0);
            this.fallStart2 = this.fallStart;
            this.velocity.X = 0.0f;
            this.velocity.Y = 0.0f;
            for (int index = 0; index < 3; ++index)
                this.UpdateSocialShadow();
            this.oldPosition = this.position;
            this.talkNPC = -1;
            if (this.whoAmI == Main.myPlayer)
                Main.npcChatCornerItem = 0;
            if (this.pvpDeath)
            {
                this.pvpDeath = false;
                this.immuneTime = 300;
                this.statLife = this.statLifeMax;
            }
            else
                this.immuneTime = 60;
            if (this.whoAmI != Main.myPlayer)
                return;
            Main.BlackFadeIn = (int)byte.MaxValue;
            Main.renderNow = true;
            if (Main.netMode == 1)
                Netplay.newRecent();
            Main.screenPosition.X = this.position.X + (float)(this.width / 2) - (float)(Main.screenWidth / 2);
            Main.screenPosition.Y = this.position.Y + (float)(this.height / 2) - (float)(Main.screenHeight / 2);
        }

        public void ShadowDodge()
        {
            this.immune = true;
            this.immuneTime = 80;
            if (this.longInvince)
                this.immuneTime += 40;
            if (this.whoAmI != Main.myPlayer)
                return;
            for (int b = 0; b < 22; ++b)
            {
                if (this.buffTime[b] > 0 && this.buffType[b] == 59)
                    this.DelBuff(b);
            }
            NetMessage.SendData(62, -1, -1, "", this.whoAmI, 2f, 0.0f, 0.0f, 0, 0, 0);
        }

        public void NinjaDodge()
        {
            this.immune = true;
            this.immuneTime = 80;
            if (this.longInvince)
                this.immuneTime += 40;
            for (int index1 = 0; index1 < 100; ++index1)
            {
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 2f);
                Main.dust[index2].position.X += (float)Main.rand.Next(-20, 21);
                Main.dust[index2].position.Y += (float)Main.rand.Next(-20, 21);
                Main.dust[index2].velocity *= 0.4f;
                Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(40) * 0.00999999977648258);
                Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cWaist, this);
                if (Main.rand.Next(2) == 0)
                {
                    Main.dust[index2].scale *= (float)(1.0 + (double)Main.rand.Next(40) * 0.00999999977648258);
                    Main.dust[index2].noGravity = true;
                }
            }
            int index3 = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)(this.width / 2) - 24.0), (float)((double)this.position.Y + (double)(this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
            Main.gore[index3].scale = 1.5f;
            Main.gore[index3].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
            Main.gore[index3].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
            Main.gore[index3].velocity *= 0.4f;
            int index4 = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)(this.width / 2) - 24.0), (float)((double)this.position.Y + (double)(this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
            Main.gore[index4].scale = 1.5f;
            Main.gore[index4].velocity.X = (float)(1.5 + (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index4].velocity.Y = (float)(1.5 + (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index4].velocity *= 0.4f;
            int index5 = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)(this.width / 2) - 24.0), (float)((double)this.position.Y + (double)(this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
            Main.gore[index5].scale = 1.5f;
            Main.gore[index5].velocity.X = (float)(-1.5 - (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index5].velocity.Y = (float)(1.5 + (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index5].velocity *= 0.4f;
            int index6 = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)(this.width / 2) - 24.0), (float)((double)this.position.Y + (double)(this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
            Main.gore[index6].scale = 1.5f;
            Main.gore[index6].velocity.X = (float)(1.5 + (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index6].velocity.Y = (float)(-1.5 - (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index6].velocity *= 0.4f;
            int index7 = Gore.NewGore(new Vector2((float)((double)this.position.X + (double)(this.width / 2) - 24.0), (float)((double)this.position.Y + (double)(this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
            Main.gore[index7].scale = 1.5f;
            Main.gore[index7].velocity.X = (float)(-1.5 - (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index7].velocity.Y = (float)(-1.5 - (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.gore[index7].velocity *= 0.4f;
            if (this.whoAmI != Main.myPlayer)
                return;
            NetMessage.SendData(62, -1, -1, "", this.whoAmI, 1f, 0.0f, 0.0f, 0, 0, 0);
        }

        public double Hurt(int Damage, int hitDirection, bool pvp = false, bool quiet = false, string deathText = " was slain...", bool Crit = false)
        {
            if (this.immune)
                return 0.0;
            if (this.whoAmI == Main.myPlayer && this.blackBelt && Main.rand.Next(10) == 0)
            {
                this.NinjaDodge();
                return 0.0;
            }
            if (this.whoAmI == Main.myPlayer && this.shadowDodge)
            {
                this.ShadowDodge();
                return 0.0;
            }
            if (this.whoAmI == Main.myPlayer && this.panic)
                this.AddBuff(63, 300, true);
            this.stealth = 1f;
            if (Main.netMode == 1)
                NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
            int Damage1 = Damage;
            double dmg = Main.CalculatePlayerDamage(Damage1, this.statDefense);
            if (Crit)
                Damage1 *= 2;
            if (dmg >= 1.0)
            {
                if (this.invis)
                {
                    for (int b = 0; b < 22; ++b)
                    {
                        if (this.buffType[b] == 10)
                            this.DelBuff(b);
                    }
                }
                dmg = (double)(int)((1.0 - (double)this.endurance) * dmg);
                if (dmg < 1.0)
                    dmg = 1.0;
                if (this.ConsumeSolarFlare())
                {
                    dmg = (double)(int)((1.0 - 0.300000011920929) * dmg);
                    if (dmg < 1.0)
                        dmg = 1.0;
                    if (this.whoAmI == Main.myPlayer)
                    {
                        int index = Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 608, 150, 15f, Main.myPlayer, 0.0f, 0.0f);
                        Main.projectile[index].Kill();
                    }
                }
                if (this.beetleDefense && this.beetleOrbs > 0)
                {
                    dmg = (double)(int)((1.0 - (double)(0.15f * (float)this.beetleOrbs)) * dmg);
                    --this.beetleOrbs;
                    for (int b = 0; b < 22; ++b)
                    {
                        if (this.buffType[b] >= 95 && this.buffType[b] <= 97)
                            this.DelBuff(b);
                    }
                    if (this.beetleOrbs > 0)
                        this.AddBuff(95 + this.beetleOrbs - 1, 5, false);
                    this.beetleCounter = 0.0f;
                    if (dmg < 1.0)
                        dmg = 1.0;
                }
                if (this.magicCuffs)
                {
                    int manaAmount = Damage1;
                    this.statMana += manaAmount;
                    if (this.statMana > this.statManaMax2)
                        this.statMana = this.statManaMax2;
                    this.ManaEffect(manaAmount);
                }
                if (this.paladinBuff && this.whoAmI != Main.myPlayer)
                {
                    int Damage2 = (int)(dmg * 0.25);
                    dmg = (double)(int)(dmg * 0.75);
                    if (Main.player[Main.myPlayer].paladinGive)
                    {
                        int index = Main.myPlayer;
                        if (Main.player[index].team == this.team && this.team != 0)
                        {
                            float num1 = this.position.X - Main.player[index].position.X;
                            float num2 = this.position.Y - Main.player[index].position.Y;
                            if (Math.Sqrt((double)num1 * (double)num1 + (double)num2 * (double)num2) < 800.0)
                                Main.player[index].Hurt(Damage2, 0, false, false, "", false);
                        }
                    }
                }
                if (this.brainOfConfusion && Main.myPlayer == this.whoAmI)
                {
                    for (int index = 0; index < 200; ++index)
                    {
                        if (Main.npc[index].active && !Main.npc[index].friendly)
                        {
                            int num1 = 300 + (int)dmg * 2;
                            if (Main.rand.Next(500) < num1)
                            {
                                float num2 = (Main.npc[index].Center - this.Center).Length();
                                float num3 = (float)Main.rand.Next(200 + (int)dmg / 2, 301 + (int)dmg * 2);
                                if ((double)num3 > 500.0)
                                    num3 = (float)(500.0 + ((double)num3 - 500.0) * 0.75);
                                if ((double)num3 > 700.0)
                                    num3 = (float)(700.0 + ((double)num3 - 700.0) * 0.5);
                                if ((double)num3 > 900.0)
                                    num3 = (float)(900.0 + ((double)num3 - 900.0) * 0.25);
                                if ((double)num2 < (double)num3)
                                {
                                    float num4 = (float)Main.rand.Next(90 + (int)dmg / 3, 300 + (int)dmg / 2);
                                    Main.npc[index].AddBuff(31, (int)num4, false);
                                }
                            }
                        }
                    }
                    Projectile.NewProjectile(this.Center.X + (float)Main.rand.Next(-40, 40), this.Center.Y - (float)Main.rand.Next(20, 60), this.velocity.X * 0.3f, this.velocity.Y * 0.3f, 565, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                }
                if (Main.netMode == 1 && this.whoAmI == Main.myPlayer && !quiet)
                {
                    int number5 = 0;
                    if (Crit)
                        number5 = 1;
                    int num = 0;
                    if (pvp)
                        num = 1;
                    NetMessage.SendData(13, -1, -1, "", this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    NetMessage.SendData(16, -1, -1, "", this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    NetMessage.SendData(26, -1, -1, "", this.whoAmI, (float)hitDirection, (float)Damage, (float)num, number5, 0, 0);
                }
                CombatText.NewText(new Microsoft.Xna.Framework.Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height), Crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly, string.Concat((object)(int)dmg), Crit, false);
                this.statLife -= (int)dmg;
                this.immune = true;
                if (dmg == 1.0)
                {
                    this.immuneTime = 20;
                    if (this.longInvince)
                        this.immuneTime += 20;
                }
                else
                {
                    this.immuneTime = 40;
                    if (this.longInvince)
                        this.immuneTime += 40;
                }
                this.lifeRegenTime = 0;
                if (pvp)
                    this.immuneTime = 8;
                if (this.whoAmI == Main.myPlayer)
                {
                    if (this.starCloak)
                    {
                        for (int index1 = 0; index1 < 3; ++index1)
                        {
                            float num1 = this.position.X + (float)Main.rand.Next(-400, 400);
                            float num2 = this.position.Y - (float)Main.rand.Next(500, 800);
                            Vector2 vector2 = new Vector2(num1, num2);
                            float num3 = this.position.X + (float)(this.width / 2) - vector2.X;
                            float num4 = this.position.Y + (float)(this.height / 2) - vector2.Y;
                            float num5 = num3 + (float)Main.rand.Next(-100, 101);
                            float num6 = 23f / (float)Math.Sqrt((double)num5 * (double)num5 + (double)num4 * (double)num4);
                            float SpeedX = num5 * num6;
                            float SpeedY = num4 * num6;
                            int index2 = Projectile.NewProjectile(num1, num2, SpeedX, SpeedY, 92, 30, 5f, this.whoAmI, 0.0f, 0.0f);
                            Main.projectile[index2].ai[1] = this.position.Y;
                        }
                    }
                    if (this.bee)
                    {
                        int num = 1;
                        if (Main.rand.Next(3) == 0)
                            ++num;
                        if (Main.rand.Next(3) == 0)
                            ++num;
                        if (this.strongBees && Main.rand.Next(3) == 0)
                            ++num;
                        for (int index = 0; index < num; ++index)
                            Projectile.NewProjectile(this.position.X, this.position.Y, (float)Main.rand.Next(-35, 36) * 0.02f, (float)Main.rand.Next(-35, 36) * 0.02f, this.beeType(), this.beeDamage(7), this.beeKB(0.0f), Main.myPlayer, 0.0f, 0.0f);
                    }
                }
                if (!this.noKnockback && hitDirection != 0 && (!this.mount.Active || !this.mount.Cart))
                {
                    this.velocity.X = 4.5f * (float)hitDirection;
                    this.velocity.Y = -3.5f;
                }
                if (this.stoned)
                    Main.PlaySound(0, (int)this.position.X, (int)this.position.Y, 1);
                else if (this.frostArmor)
                    Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, 27);
                else if (this.wereWolf)
                    Main.PlaySound(3, (int)this.position.X, (int)this.position.Y, 6);
                else if (this.boneArmor)
                    Main.PlaySound(3, (int)this.position.X, (int)this.position.Y, 2);
                else if (!this.Male)
                    Main.PlaySound(20, (int)this.position.X, (int)this.position.Y, 1);
                else
                    Main.PlaySound(1, (int)this.position.X, (int)this.position.Y, 1);
                if (this.statLife > 0)
                {
                    for (int index1 = 0; (double)index1 < dmg / (double)this.statLifeMax2 * 100.0; ++index1)
                    {
                        if (this.stoned)
                            Dust.NewDust(this.position, this.width, this.height, 1, (float)(2 * hitDirection), -2f, 0, new Color(), 1f);
                        else if (this.frostArmor)
                        {
                            int index2 = Dust.NewDust(this.position, this.width, this.height, 135, (float)(2 * hitDirection), -2f, 0, new Color(), 1f);
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                        }
                        else if (this.boneArmor)
                        {
                            int index2 = Dust.NewDust(this.position, this.width, this.height, 26, (float)(2 * hitDirection), -2f, 0, new Color(), 1f);
                            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                        }
                        else
                            Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, new Color(), 1f);
                    }
                }
                else
                {
                    this.statLife = 0;
                    if (this.whoAmI == Main.myPlayer)
                        this.KillMe(dmg, hitDirection, pvp, deathText);
                }
            }
            if (pvp)
                dmg = Main.CalculateDamage(Damage1, this.statDefense);
            return dmg;
        }

        public void KillMeForGood()
        {
            if (FileUtilities.Exists(Main.playerPathName))
                FileUtilities.Delete(Main.playerPathName);
            if (FileUtilities.Exists(Main.playerPathName + ".bak"))
                FileUtilities.Delete(Main.playerPathName + ".bak");
            Main.ActivePlayerFileData = new PlayerFileData();
        }

        public void KillMe(double dmg, int hitDirection, bool pvp = false, string deathText = " was slain...")
        {
            if (this.dead)
                return;
            if (pvp)
                this.pvpDeath = true;
            if (this.trapDebuffSource)
                AchievementsHelper.HandleSpecialEvent(this, 4);
            this.lastDeathPostion = this.Center;
            this.lastDeathTime = DateTime.Now;
            this.showLastDeath = true;
            bool overFlowing;
            int coinsOwned = (int)Utils.CoinsCount(out overFlowing, this.inventory);
            if (Main.myPlayer == this.whoAmI)
            {
                this.lostCoins = coinsOwned;
                this.lostCoinString = Main.ValueToCoins(this.lostCoins);
            }
            if (Main.myPlayer == this.whoAmI)
                Main.mapFullscreen = false;
            if (Main.myPlayer == this.whoAmI)
            {
                this.trashItem.SetDefaults(0, false);
                if ((int)this.difficulty == 0)
                {
                    for (int index = 0; index < 59; ++index)
                    {
                        if (this.inventory[index].stack > 0 && this.inventory[index].itemId >= 1522 && this.inventory[index].itemId <= 1527)
                        {
                            int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.inventory[index].itemId, 1, false, 0, false);
                            Main.item[number].netDefaults(this.inventory[index].netID);
                            Main.item[number].Prefix((int)this.inventory[index].prefix);
                            Main.item[number].stack = this.inventory[index].stack;
                            Main.item[number].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
                            Main.item[number].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
                            Main.item[number].noGrabDelay = 100;
                            Main.item[number].favorited = false;
                            Main.item[number].newAndShiny = false;
                            if (Main.netMode == 1)
                                NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                            this.inventory[index].SetDefaults(0, false);
                        }
                    }
                }
                else if ((int)this.difficulty == 1)
                    this.DropItems();
                else if ((int)this.difficulty == 2)
                {
                    this.DropItems();
                    this.KillMeForGood();
                }
            }
            Main.PlaySound(5, (int)this.position.X, (int)this.position.Y, 1);
            this.headVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
            this.bodyVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
            this.legVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
            this.headVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
            this.bodyVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
            this.legVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
            if (this.stoned)
            {
                this.headPosition = Vector2.Zero;
                this.bodyPosition = Vector2.Zero;
                this.legPosition = Vector2.Zero;
            }
            for (int index1 = 0; index1 < 100; ++index1)
            {
                if (this.stoned)
                    Dust.NewDust(this.position, this.width, this.height, 1, (float)(2 * hitDirection), -2f, 0, new Color(), 1f);
                else if (this.frostArmor)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 135, (float)(2 * hitDirection), -2f, 0, new Color(), 1f);
                    Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
                else if (this.boneArmor)
                {
                    int index2 = Dust.NewDust(this.position, this.width, this.height, 26, (float)(2 * hitDirection), -2f, 0, new Color(), 1f);
                    Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.ArmorSetDye(), this);
                }
                else
                    Dust.NewDust(this.position, this.width, this.height, 5, (float)(2 * hitDirection), -2f, 0, new Color(), 1f);
            }
            this.mount.Dismount(this);
            this.dead = true;
            this.respawnTimer = 600;
            bool flag = false;
            if (Main.netMode != 0 && !pvp)
            {
                for (int index = 0; index < 200; ++index)
                {
                    if (Main.npc[index].active && (Main.npc[index].boss || Main.npc[index].type == 13 || (Main.npc[index].type == 14 || Main.npc[index].type == 15)) && (double)Math.Abs(this.Center.X - Main.npc[index].Center.X) + (double)Math.Abs(this.Center.Y - Main.npc[index].Center.Y) < 4000.0)
                    {
                        flag = true;
                        break;
                    }
                }
            }
            if (flag)
                this.respawnTimer += 600;
            if (Main.expertMode)
                this.respawnTimer = (int)((double)this.respawnTimer * 1.5);
            this.immuneAlpha = 0;
            this.palladiumRegen = false;
            this.iceBarrier = false;
            this.crystalLeaf = false;
            if (Main.netMode == 2)
                NetMessage.SendData(25, -1, -1, this.name + deathText, (int)byte.MaxValue, 225f, 25f, 25f, 0, 0, 0);
            else if (Main.netMode == 0)
                Main.NewText(this.name + deathText, (byte)225, (byte)25, (byte)25, false);
            if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
            {
                int num = 0;
                if (pvp)
                    num = 1;
                NetMessage.SendData(44, -1, -1, deathText, this.whoAmI, (float)hitDirection, (float)(int)dmg, (float)num, 0, 0, 0);
            }
            if (this.whoAmI == Main.myPlayer && (int)this.difficulty == 0)
            {
                if (!pvp)
                {
                    this.DropCoins();
                }
                else
                {
                    this.lostCoins = 0;
                    this.lostCoinString = Main.ValueToCoins(this.lostCoins);
                }
            }
            this.DropTombstone(coinsOwned, deathText, hitDirection);
            if (this.whoAmI != Main.myPlayer)
                return;
            try
            {
                WorldGen.saveToonWhilePlaying();
            }
            catch
            {
            }
        }

        public void DropTombstone(int coinsOwned, string deathText, int hitDirection)
        {
            if (Main.netMode == 1)
                return;
            float num1 = (float)Main.rand.Next(-35, 36) * 0.1f;
            while ((double)num1 < 2.0 && (double)num1 > -2.0)
                num1 += (float)Main.rand.Next(-30, 31) * 0.1f;
            int num2 = Main.rand.Next(6);
            int Type = coinsOwned <= 100000 ? (num2 != 0 ? 200 + num2 : 43) : Main.rand.Next(5) + 527;
            int index = Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), (float)Main.rand.Next(10, 30) * 0.1f * (float)hitDirection + num1, (float)Main.rand.Next(-40, -20) * 0.1f, Type, 0, 0.0f, Main.myPlayer, 0.0f, 0.0f);
            Main.projectile[index].miscText = this.name + deathText;
        }

        public bool ItemSpace(Item newItem)
        {
            if (newItem.uniqueStack && this.HasItem(newItem.itemId))
                return false;
            if (newItem.itemId == 58 || newItem.itemId == 184 || (newItem.itemId == 1734 || newItem.itemId == 1735) || (newItem.itemId == 1867 || newItem.itemId == 1868 || ItemID.Sets.NebulaPickup[newItem.itemId]))
                return true;
            int num = 50;
            if (newItem.itemId == 71 || newItem.itemId == 72 || (newItem.itemId == 73 || newItem.itemId == 74))
                num = 54;
            for (int index = 0; index < num; ++index)
            {
                if (this.inventory[index].itemId == 0)
                    return true;
            }
            for (int index = 0; index < num; ++index)
            {
                if (this.inventory[index].itemId > 0 && this.inventory[index].stack < this.inventory[index].maxStack && newItem.IsTheSameAs(this.inventory[index]))
                    return true;
            }
            if (newItem.ammo > 0 && !newItem.notAmmo)
            {
                if (newItem.itemId != 75 && newItem.itemId != 169 && (newItem.itemId != 23 && newItem.itemId != 408) && (newItem.itemId != 370 && newItem.itemId != 1246))
                {
                    for (int index = 54; index < 58; ++index)
                    {
                        if (this.inventory[index].itemId == 0)
                            return true;
                    }
                }
                for (int index = 54; index < 58; ++index)
                {
                    if (this.inventory[index].itemId > 0 && this.inventory[index].stack < this.inventory[index].maxStack && newItem.IsTheSameAs(this.inventory[index]))
                        return true;
                }
            }
            return false;
        }

        public void DoCoins(int i)
        {
            if (this.inventory[i].stack != 100 || this.inventory[i].itemId != 71 && this.inventory[i].itemId != 72 && this.inventory[i].itemId != 73)
                return;
            this.inventory[i].SetDefaults(this.inventory[i].itemId + 1, false);
            for (int i1 = 0; i1 < 54; ++i1)
            {
                if (this.inventory[i1].IsTheSameAs(this.inventory[i]) && i1 != i && (this.inventory[i1].itemId == this.inventory[i].itemId && this.inventory[i1].stack < this.inventory[i1].maxStack))
                {
                    ++this.inventory[i1].stack;
                    this.inventory[i].SetDefaults(0, false);
                    this.inventory[i].active = false;
                    this.inventory[i].name = "";
                    this.inventory[i].itemId = 0;
                    this.inventory[i].stack = 0;
                    this.DoCoins(i1);
                }
            }
        }

        public Item FillAmmo(int plr, Item newItem, bool noText = false)
        {
            Item obj = newItem;
            for (int i = 54; i < 58; ++i)
            {
                if (this.inventory[i].itemId > 0 && this.inventory[i].stack < this.inventory[i].maxStack && obj.IsTheSameAs(this.inventory[i]))
                {
                    Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1);
                    if (obj.stack + this.inventory[i].stack <= this.inventory[i].maxStack)
                    {
                        this.inventory[i].stack += obj.stack;
                        if (!noText)
                            ItemText.NewText(newItem, obj.stack, false, false);
                        this.DoCoins(i);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        return new Item();
                    }
                    obj.stack -= this.inventory[i].maxStack - this.inventory[i].stack;
                    if (!noText)
                        ItemText.NewText(newItem, this.inventory[i].maxStack - this.inventory[i].stack, false, false);
                    this.inventory[i].stack = this.inventory[i].maxStack;
                    this.DoCoins(i);
                    if (plr == Main.myPlayer)
                        Recipe.FindRecipes();
                }
            }
            if (obj.bait <= 0 && obj.itemId != 169 && (obj.itemId != 75 && obj.itemId != 23) && (obj.itemId != 408 && obj.itemId != 370 && (obj.itemId != 1246 && obj.itemId != 154)) && !obj.notAmmo)
            {
                for (int i = 54; i < 58; ++i)
                {
                    if (this.inventory[i].itemId == 0)
                    {
                        this.inventory[i] = obj;
                        if (!noText)
                            ItemText.NewText(newItem, newItem.stack, false, false);
                        this.DoCoins(i);
                        Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        return new Item();
                    }
                }
            }
            return obj;
        }

        public Item GetItem(int plr, Item newItem, bool longText = false, bool noText = false)
        {
            bool flag = newItem.itemId >= 71 && newItem.itemId <= 74;
            Item newItem1 = newItem;
            int num1 = 50;
            if (newItem.noGrabDelay > 0)
                return newItem1;
            int num2 = 0;
            if (newItem.uniqueStack && this.HasItem(newItem.itemId))
                return newItem1;
            if (newItem.itemId == 71 || newItem.itemId == 72 || (newItem.itemId == 73 || newItem.itemId == 74))
            {
                num2 = -4;
                num1 = 54;
            }
            if ((newItem1.ammo > 0 || newItem1.bait > 0) && !newItem1.notAmmo || newItem1.itemId == 530)
            {
                newItem1 = this.FillAmmo(plr, newItem1, noText);
                if (newItem1.itemId == 0 || newItem1.stack == 0)
                    return new Item();
            }
            for (int index = num2; index < 50; ++index)
            {
                int i = index;
                if (i < 0)
                    i = 54 + index;
                if (this.inventory[i].itemId > 0 && this.inventory[i].stack < this.inventory[i].maxStack && newItem1.IsTheSameAs(this.inventory[i]))
                {
                    if (flag)
                        Main.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1);
                    else
                        Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1);
                    if (newItem1.stack + this.inventory[i].stack <= this.inventory[i].maxStack)
                    {
                        this.inventory[i].stack += newItem1.stack;
                        if (!noText)
                            ItemText.NewText(newItem, newItem1.stack, false, longText);
                        this.DoCoins(i);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        AchievementsHelper.NotifyItemPickup(this, newItem1);
                        return new Item();
                    }
                    AchievementsHelper.NotifyItemPickup(this, newItem1, this.inventory[i].maxStack - this.inventory[i].stack);
                    newItem1.stack -= this.inventory[i].maxStack - this.inventory[i].stack;
                    if (!noText)
                        ItemText.NewText(newItem, this.inventory[i].maxStack - this.inventory[i].stack, false, longText);
                    this.inventory[i].stack = this.inventory[i].maxStack;
                    this.DoCoins(i);
                    if (plr == Main.myPlayer)
                        Recipe.FindRecipes();
                }
            }
            if (newItem.itemId != 71 && newItem.itemId != 72 && (newItem.itemId != 73 && newItem.itemId != 74) && newItem.useStyle > 0)
            {
                for (int i = 0; i < 10; ++i)
                {
                    if (this.inventory[i].itemId == 0)
                    {
                        this.inventory[i] = newItem1;
                        if (!noText)
                            ItemText.NewText(newItem, newItem.stack, false, longText);
                        this.DoCoins(i);
                        if (flag)
                            Main.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1);
                        else
                            Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        AchievementsHelper.NotifyItemPickup(this, newItem1);
                        return new Item();
                    }
                }
            }
            if (newItem.favorited)
            {
                for (int i = 0; i < num1; ++i)
                {
                    if (this.inventory[i].itemId == 0)
                    {
                        this.inventory[i] = newItem1;
                        if (!noText)
                            ItemText.NewText(newItem, newItem.stack, false, longText);
                        this.DoCoins(i);
                        if (flag)
                            Main.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1);
                        else
                            Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        AchievementsHelper.NotifyItemPickup(this, newItem1);
                        return new Item();
                    }
                }
            }
            else
            {
                for (int i = num1 - 1; i >= 0; --i)
                {
                    if (this.inventory[i].itemId == 0)
                    {
                        this.inventory[i] = newItem1;
                        if (!noText)
                            ItemText.NewText(newItem, newItem.stack, false, longText);
                        this.DoCoins(i);
                        if (flag)
                            Main.PlaySound(38, (int)this.position.X, (int)this.position.Y, 1);
                        else
                            Main.PlaySound(7, (int)this.position.X, (int)this.position.Y, 1);
                        if (plr == Main.myPlayer)
                            Recipe.FindRecipes();
                        AchievementsHelper.NotifyItemPickup(this, newItem1);
                        return new Item();
                    }
                }
            }
            return newItem1;
        }

        public void PlaceThing()
        {
            if ((this.inventory[this.selectedItem].itemId == 1071 || this.inventory[this.selectedItem].itemId == 1543) && ((double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetX && ((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)this.inventory[this.selectedItem].tileBoost - 1.0 + (double)this.blockRange >= (double)Player.tileTargetX) && ((double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetY && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)this.inventory[this.selectedItem].tileBoost - 2.0 + (double)this.blockRange >= (double)Player.tileTargetY))
            {
                int x = Player.tileTargetX;
                int y = Player.tileTargetY;
                if (Main.tile[x, y] != null && Main.tile[x, y].active())
                {
                    this.showItemIcon = true;
                    if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
                    {
                        int num1 = -1;
                        int num2 = -1;
                        for (int index = 0; index < 58; ++index)
                        {
                            if (this.inventory[index].stack > 0 && (int)this.inventory[index].paint > 0)
                            {
                                num1 = (int)this.inventory[index].paint;
                                num2 = index;
                                break;
                            }
                        }
                        if (num1 > 0 && (int)Main.tile[x, y].color() != num1 && WorldGen.paintTile(x, y, (byte)num1, true))
                        {
                            int index = num2;
                            --this.inventory[index].stack;
                            if (this.inventory[index].stack <= 0)
                                this.inventory[index].SetDefaults(0, false);
                            this.itemTime = this.inventory[this.selectedItem].useTime;
                        }
                    }
                }
            }
            if ((this.inventory[this.selectedItem].itemId == 1072 || this.inventory[this.selectedItem].itemId == 1544) && ((double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetX && ((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)this.inventory[this.selectedItem].tileBoost - 1.0 + (double)this.blockRange >= (double)Player.tileTargetX) && ((double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetY && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)this.inventory[this.selectedItem].tileBoost - 2.0 + (double)this.blockRange >= (double)Player.tileTargetY))
            {
                int x = Player.tileTargetX;
                int y = Player.tileTargetY;
                if (Main.tile[x, y] != null && (int)Main.tile[x, y].wall > 0)
                {
                    this.showItemIcon = true;
                    if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
                    {
                        int num1 = -1;
                        int num2 = -1;
                        for (int index = 0; index < 58; ++index)
                        {
                            if (this.inventory[index].stack > 0 && (int)this.inventory[index].paint > 0)
                            {
                                num1 = (int)this.inventory[index].paint;
                                num2 = index;
                                break;
                            }
                        }
                        if (num1 > 0 && (int)Main.tile[x, y].wallColor() != num1 && WorldGen.paintWall(x, y, (byte)num1, true))
                        {
                            int index = num2;
                            --this.inventory[index].stack;
                            if (this.inventory[index].stack <= 0)
                                this.inventory[index].SetDefaults(0, false);
                            this.itemTime = this.inventory[this.selectedItem].useTime;
                        }
                    }
                }
            }
            if ((this.inventory[this.selectedItem].itemId == 1100 || this.inventory[this.selectedItem].itemId == 1545) && ((double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetX && ((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)this.inventory[this.selectedItem].tileBoost - 1.0 + (double)this.blockRange >= (double)Player.tileTargetX) && ((double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetY && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)this.inventory[this.selectedItem].tileBoost - 2.0 + (double)this.blockRange >= (double)Player.tileTargetY))
            {
                int x = Player.tileTargetX;
                int y = Player.tileTargetY;
                if (Main.tile[x, y] != null && ((int)Main.tile[x, y].wallColor() > 0 && (int)Main.tile[x, y].wall > 0 || (int)Main.tile[x, y].color() > 0 && Main.tile[x, y].active()))
                {
                    this.showItemIcon = true;
                    if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
                    {
                        if ((int)Main.tile[x, y].color() > 0 && Main.tile[x, y].active() && WorldGen.paintTile(x, y, (byte)0, true))
                            this.itemTime = this.inventory[this.selectedItem].useTime;
                        else if ((int)Main.tile[x, y].wallColor() > 0 && (int)Main.tile[x, y].wall > 0 && WorldGen.paintWall(x, y, (byte)0, true))
                            this.itemTime = this.inventory[this.selectedItem].useTime;
                    }
                }
            }
            if ((this.inventory[this.selectedItem].itemId == 929 || this.inventory[this.selectedItem].itemId == 1338 || this.inventory[this.selectedItem].itemId == 1345) && ((double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetX && ((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)this.inventory[this.selectedItem].tileBoost - 1.0 + (double)this.blockRange >= (double)Player.tileTargetX && ((double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetY && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)this.inventory[this.selectedItem].tileBoost - 2.0 + (double)this.blockRange >= (double)Player.tileTargetY)))
            {
                int index1 = Player.tileTargetX;
                int index2 = Player.tileTargetY;
                if (Main.tile[index1, index2].active() && (int)Main.tile[index1, index2].type == 209)
                {
                    int num1 = 0;
                    if ((int)Main.tile[index1, index2].frameX < 72)
                    {
                        if (this.inventory[this.selectedItem].itemId == 929)
                            num1 = 1;
                    }
                    else if ((int)Main.tile[index1, index2].frameX < 144)
                    {
                        if (this.inventory[this.selectedItem].itemId == 1338)
                            num1 = 2;
                    }
                    else if ((int)Main.tile[index1, index2].frameX < 288 && this.inventory[this.selectedItem].itemId == 1345)
                        num1 = 3;
                    if (num1 > 0)
                    {
                        this.showItemIcon = true;
                        if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
                        {
                            int num2 = (int)Main.tile[index1, index2].frameX / 18;
                            int num3 = 0;
                            int num4 = 0;
                            while (num2 >= 4)
                            {
                                ++num3;
                                num2 -= 4;
                            }
                            int num5 = index1 - num2;
                            int num6 = (int)Main.tile[index1, index2].frameY / 18;
                            while (num6 >= 3)
                            {
                                ++num4;
                                num6 -= 3;
                            }
                            int num7 = index2 - num6;
                            this.itemTime = this.inventory[this.selectedItem].useTime;
                            float num8 = 14f;
                            float num9 = 0.0f;
                            float num10 = 0.0f;
                            int Type = 162;
                            if (num1 == 2)
                                Type = 281;
                            if (num1 == 3)
                                Type = 178;
                            int Damage = this.inventory[this.selectedItem].damage;
                            int num11 = 8;
                            if (num4 == 0)
                            {
                                num9 = 10f;
                                num10 = 0.0f;
                            }
                            if (num4 == 1)
                            {
                                num9 = 7.5f;
                                num10 = -2.5f;
                            }
                            if (num4 == 2)
                            {
                                num9 = 5f;
                                num10 = -5f;
                            }
                            if (num4 == 3)
                            {
                                num9 = 2.75f;
                                num10 = -6f;
                            }
                            if (num4 == 4)
                            {
                                num9 = 0.0f;
                                num10 = -10f;
                            }
                            if (num4 == 5)
                            {
                                num9 = -2.75f;
                                num10 = -6f;
                            }
                            if (num4 == 6)
                            {
                                num9 = -5f;
                                num10 = -5f;
                            }
                            if (num4 == 7)
                            {
                                num9 = -7.5f;
                                num10 = -2.5f;
                            }
                            if (num4 == 8)
                            {
                                num9 = -10f;
                                num10 = 0.0f;
                            }
                            Vector2 vector2 = new Vector2((float)((num5 + 2) * 16), (float)((num7 + 2) * 16));
                            float num12 = num9;
                            float num13 = num10;
                            float num14 = (float)Math.Sqrt((double)num12 * (double)num12 + (double)num13 * (double)num13);
                            float num15 = num8 / num14;
                            float SpeedX = num12 * num15;
                            float SpeedY = num13 * num15;
                            Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, Type, Damage, (float)num11, Main.myPlayer, 0.0f, 0.0f);
                        }
                    }
                }
            }
            if (this.inventory[this.selectedItem].itemId >= 1874 && this.inventory[this.selectedItem].itemId <= 1905 && (Main.tile[Player.tileTargetX, Player.tileTargetY].active() && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 171) && ((double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetX && ((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)this.inventory[this.selectedItem].tileBoost - 1.0 + (double)this.blockRange >= (double)Player.tileTargetX && ((double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetY && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)this.inventory[this.selectedItem].tileBoost - 2.0 + (double)this.blockRange >= (double)Player.tileTargetY)) && (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem))
            {
                int num = this.inventory[this.selectedItem].itemId;
                if (num >= 1874 && num <= 1877)
                {
                    int style = num - 1873;
                    if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 0) != style)
                    {
                        this.itemTime = this.inventory[this.selectedItem].useTime;
                        WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 0);
                        WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 0, style);
                        int tileX = Player.tileTargetX;
                        int tileY = Player.tileTargetY;
                        if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
                        {
                            tileX -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
                            tileY -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
                        }
                        NetMessage.SendTileSquare(-1, tileX, tileY, 1);
                    }
                }
                else if (num >= 1878 && num <= 1883)
                {
                    int style = num - 1877;
                    if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 1) != style)
                    {
                        this.itemTime = this.inventory[this.selectedItem].useTime;
                        WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 1);
                        WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 1, style);
                        int tileX = Player.tileTargetX;
                        int tileY = Player.tileTargetY;
                        if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
                        {
                            tileX -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
                            tileY -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
                        }
                        NetMessage.SendTileSquare(-1, tileX, tileY, 1);
                    }
                }
                else if (num >= 1884 && num <= 1894)
                {
                    int style = num - 1883;
                    if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 2) != style)
                    {
                        this.itemTime = this.inventory[this.selectedItem].useTime;
                        WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 2);
                        WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 2, style);
                        int tileX = Player.tileTargetX;
                        int tileY = Player.tileTargetY;
                        if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
                        {
                            tileX -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
                            tileY -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
                        }
                        NetMessage.SendTileSquare(-1, tileX, tileY, 1);
                    }
                }
                else if (num >= 1895 && num <= 1905)
                {
                    int style = num - 1894;
                    if (WorldGen.checkXmasTreeDrop(Player.tileTargetX, Player.tileTargetY, 3) != style)
                    {
                        this.itemTime = this.inventory[this.selectedItem].useTime;
                        WorldGen.dropXmasTree(Player.tileTargetX, Player.tileTargetY, 3);
                        WorldGen.setXmasTree(Player.tileTargetX, Player.tileTargetY, 3, style);
                        int tileX = Player.tileTargetX;
                        int tileY = Player.tileTargetY;
                        if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX < 10)
                        {
                            tileX -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameX;
                            tileY -= (int)Main.tile[Player.tileTargetX, Player.tileTargetY].frameY;
                        }
                        NetMessage.SendTileSquare(-1, tileX, tileY, 1);
                    }
                }
            }
            if (ItemID.Sets.ExtractinatorMode[this.inventory[this.selectedItem].itemId] >= 0 && Main.tile[Player.tileTargetX, Player.tileTargetY].active() && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 219)
            {
                if ((double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetX && ((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)this.inventory[this.selectedItem].tileBoost - 1.0 + (double)this.blockRange >= (double)Player.tileTargetX && ((double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetY && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)this.inventory[this.selectedItem].tileBoost - 2.0 + (double)this.blockRange >= (double)Player.tileTargetY) && (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem))
                {
                    this.itemTime = this.inventory[this.selectedItem].useTime;
                    Main.PlaySound(7, -1, -1, 1);
                    Player.ExtractinatorUse(ItemID.Sets.ExtractinatorMode[this.inventory[this.selectedItem].itemId]);
                }
            }
            else if (this.inventory[this.selectedItem].createTile >= 0 && (double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetX && (((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)this.inventory[this.selectedItem].tileBoost - 1.0 + (double)this.blockRange >= (double)Player.tileTargetX && (double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)this.inventory[this.selectedItem].tileBoost - (double)this.blockRange <= (double)Player.tileTargetY) && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)this.inventory[this.selectedItem].tileBoost - 2.0 + (double)this.blockRange >= (double)Player.tileTargetY)
            {
                this.showItemIcon = true;
                bool flag1 = false;
                if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquid > 0 && Main.tile[Player.tileTargetX, Player.tileTargetY].lava())
                {
                    if (Main.tileSolid[this.inventory[this.selectedItem].createTile])
                        flag1 = true;
                    else if (!TileObjectData.CheckLiquidPlacement(this.inventory[this.selectedItem].createTile, this.inventory[this.selectedItem].placeStyle, Main.tile[Player.tileTargetX, Player.tileTargetY]))
                        flag1 = true;
                }
                bool flag2 = true;
                if (this.inventory[this.selectedItem].tileWand > 0)
                {
                    int num = this.inventory[this.selectedItem].tileWand;
                    flag2 = false;
                    for (int index = 0; index < 58; ++index)
                    {
                        if (num == this.inventory[index].itemId && this.inventory[index].stack > 0)
                        {
                            flag2 = true;
                            break;
                        }
                    }
                }
                if (Main.tileRope[this.inventory[this.selectedItem].createTile] && flag2 && (Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.tileRope[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type]))
                {
                    int index1 = Player.tileTargetY;
                    int index2 = Player.tileTargetX;
                    int num = this.inventory[this.selectedItem].createTile;
                    while (Main.tile[index2, index1].active() && Main.tileRope[(int)Main.tile[index2, index1].type] && (index1 < Main.maxTilesX - 5 && Main.tile[index2, index1 + 2] != null) && !Main.tile[index2, index1 + 1].lava())
                    {
                        ++index1;
                        if (Main.tile[index2, index1] == null)
                        {
                            flag2 = false;
                            index1 = Player.tileTargetY;
                        }
                    }
                    if (!Main.tile[index2, index1].active())
                        Player.tileTargetY = index1;
                }
                if (flag2 && (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() && !flag1 || Main.tileCut[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type >= 373 && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type <= 375 || (this.inventory[this.selectedItem].createTile == 199 || this.inventory[this.selectedItem].createTile == 23)) || (this.inventory[this.selectedItem].createTile == 2 || this.inventory[this.selectedItem].createTile == 109 || (this.inventory[this.selectedItem].createTile == 60 || this.inventory[this.selectedItem].createTile == 70) || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])) && (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem))
                {
                    bool flag3 = false;
                    bool flag4 = false;
                    TileObject objectData = new TileObject();
                    if (TileObjectData.CustomPlace(this.inventory[this.selectedItem].createTile, this.inventory[this.selectedItem].placeStyle) && this.inventory[this.selectedItem].createTile != 82)
                    {
                        flag4 = true;
                        flag3 = TileObject.CanPlace(Player.tileTargetX, Player.tileTargetY, (int)(ushort)this.inventory[this.selectedItem].createTile, this.inventory[this.selectedItem].placeStyle, this.direction, out objectData, false);
                    }
                    else
                    {
                        if (this.inventory[this.selectedItem].itemId == 213)
                        {
                            if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 0 || (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 1)
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 23 || this.inventory[this.selectedItem].createTile == 2 || (this.inventory[this.selectedItem].createTile == 109 || this.inventory[this.selectedItem].createTile == 199))
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 0)
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 227)
                            flag3 = true;
                        else if (this.inventory[this.selectedItem].createTile >= 373 && this.inventory[this.selectedItem].createTile <= 375)
                        {
                            int index1 = Player.tileTargetX;
                            int index2 = Player.tileTargetY - 1;
                            if (Main.tile[index1, index2].nactive() && Main.tileSolid[(int)Main.tile[index1, index2].type] && !Main.tileSolidTop[(int)Main.tile[index1, index2].type])
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 60 || this.inventory[this.selectedItem].createTile == 70)
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 59)
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 4 || this.inventory[this.selectedItem].createTile == 136)
                        {
                            if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].wall > 0)
                            {
                                flag3 = true;
                            }
                            else
                            {
                                if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && !WorldGen.SolidTileNoAttach(Player.tileTargetX - 1, Player.tileTargetY) && !WorldGen.SolidTileNoAttach(Player.tileTargetX + 1, Player.tileTargetY))
                                {
                                    if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].halfBrick() || (int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].slope() != 0))
                                    {
                                        if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != 19)
                                        {
                                            WorldGen.SlopeTile(Player.tileTargetX, Player.tileTargetY + 1, 0);
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)(Player.tileTargetY + 1), 0.0f, 0, 0, 0);
                                        }
                                    }
                                    else if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && !WorldGen.SolidTileNoAttach(Player.tileTargetX - 1, Player.tileTargetY) && (Main.tile[Player.tileTargetX - 1, Player.tileTargetY].halfBrick() || (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY].slope() != 0))
                                    {
                                        if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != 19)
                                        {
                                            WorldGen.SlopeTile(Player.tileTargetX - 1, Player.tileTargetY, 0);
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, "", 14, (float)(Player.tileTargetX - 1), (float)Player.tileTargetY, 0.0f, 0, 0, 0);
                                        }
                                    }
                                    else if (!WorldGen.SolidTileNoAttach(Player.tileTargetX, Player.tileTargetY + 1) && !WorldGen.SolidTileNoAttach(Player.tileTargetX - 1, Player.tileTargetY) && !WorldGen.SolidTileNoAttach(Player.tileTargetX + 1, Player.tileTargetY) && ((Main.tile[Player.tileTargetX + 1, Player.tileTargetY].halfBrick() || (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY].slope() != 0) && (int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != 19))
                                    {
                                        WorldGen.SlopeTile(Player.tileTargetX + 1, Player.tileTargetY, 0);
                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, "", 14, (float)(Player.tileTargetX + 1), (float)Player.tileTargetY, 0.0f, 0, 0, 0);
                                    }
                                }
                                int index1 = (int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type;
                                if (Main.tile[Player.tileTargetX, Player.tileTargetY].halfBrick())
                                    index1 = -1;
                                int index2 = (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY].type;
                                int index3 = (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY].type;
                                int num1 = (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].type;
                                int num2 = (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY - 1].type;
                                int num3 = (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].type;
                                int num4 = (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY + 1].type;
                                if (!Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive())
                                    index1 = -1;
                                if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY].nactive())
                                    index2 = -1;
                                if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY].nactive())
                                    index3 = -1;
                                if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY - 1].nactive())
                                    num1 = -1;
                                if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY - 1].nactive())
                                    num2 = -1;
                                if (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY + 1].nactive())
                                    num3 = -1;
                                if (!Main.tile[Player.tileTargetX + 1, Player.tileTargetY + 1].nactive())
                                    num4 = -1;
                                if (index1 >= 0 && Main.tileSolid[index1] && (!Main.tileNoAttach[index1] || index1 == 19))
                                    flag3 = true;
                                else if (index2 >= 0 && Main.tileSolid[index2] && !Main.tileNoAttach[index2] || index2 == 5 && num1 == 5 && num3 == 5 || index2 == 124)
                                    flag3 = true;
                                else if (index3 >= 0 && Main.tileSolid[index3] && !Main.tileNoAttach[index3] || index3 == 5 && num2 == 5 && num4 == 5 || index3 == 124)
                                    flag3 = true;
                            }
                        }
                        else if (this.inventory[this.selectedItem].createTile == 78 || this.inventory[this.selectedItem].createTile == 98 || (this.inventory[this.selectedItem].createTile == 100 || this.inventory[this.selectedItem].createTile == 173) || (this.inventory[this.selectedItem].createTile == 174 || this.inventory[this.selectedItem].createTile == 324))
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive() && (Main.tileSolid[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type] || Main.tileTable[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type]))
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 13 || this.inventory[this.selectedItem].createTile == 29 || (this.inventory[this.selectedItem].createTile == 33 || this.inventory[this.selectedItem].createTile == 49) || (this.inventory[this.selectedItem].createTile == 50 || this.inventory[this.selectedItem].createTile == 103))
                        {
                            if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].nactive() && Main.tileTable[(int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type])
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 275 || this.inventory[this.selectedItem].createTile == 276 || this.inventory[this.selectedItem].createTile == 277)
                            flag3 = true;
                        else if (this.inventory[this.selectedItem].createTile == 51 || this.inventory[this.selectedItem].createTile == 330 || (this.inventory[this.selectedItem].createTile == 331 || this.inventory[this.selectedItem].createTile == 332) || (this.inventory[this.selectedItem].createTile == 333 || this.inventory[this.selectedItem].createTile == 336 || (this.inventory[this.selectedItem].createTile == 340 || this.inventory[this.selectedItem].createTile == 342)) || (this.inventory[this.selectedItem].createTile == 341 || this.inventory[this.selectedItem].createTile == 343 || (this.inventory[this.selectedItem].createTile == 344 || this.inventory[this.selectedItem].createTile == 379) || this.inventory[this.selectedItem].createTile == 351))
                        {
                            if (Main.tile[Player.tileTargetX + 1, Player.tileTargetY].active() || (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY].wall > 0 || (Main.tile[Player.tileTargetX - 1, Player.tileTargetY].active() || (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY].wall > 0) || (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() || (int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].wall > 0 || (Main.tile[Player.tileTargetX, Player.tileTargetY - 1].active() || (int)Main.tile[Player.tileTargetX, Player.tileTargetY - 1].wall > 0)))
                                flag3 = true;
                        }
                        else if (this.inventory[this.selectedItem].createTile == 314)
                        {
                            for (int index1 = Player.tileTargetX - 1; index1 <= Player.tileTargetX + 1; ++index1)
                            {
                                for (int index2 = Player.tileTargetY - 1; index2 <= Player.tileTargetY + 1; ++index2)
                                {
                                    Tile tile = Main.tile[index1, index2];
                                    if (tile.active() || (int)tile.wall > 0)
                                    {
                                        flag3 = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Tile tile1 = Main.tile[Player.tileTargetX - 1, Player.tileTargetY];
                            Tile tile2 = Main.tile[Player.tileTargetX + 1, Player.tileTargetY];
                            Tile tile3 = Main.tile[Player.tileTargetX, Player.tileTargetY - 1];
                            Tile tile4 = Main.tile[Player.tileTargetX, Player.tileTargetY + 1];
                            if (tile2.active() && (Main.tileSolid[(int)tile2.type] || Main.tileRope[(int)tile2.type] || (int)tile2.type == 314) || (int)tile2.wall > 0 || (tile1.active() && (Main.tileSolid[(int)tile1.type] || Main.tileRope[(int)tile1.type] || (int)tile1.type == 314) || (int)tile1.wall > 0) || (tile4.active() && (Main.tileSolid[(int)tile4.type] || (int)tile4.type == 124 || (Main.tileRope[(int)tile4.type] || (int)tile4.type == 314)) || (int)tile4.wall > 0 || (tile3.active() && (Main.tileSolid[(int)tile3.type] || (int)tile3.type == 124 || (Main.tileRope[(int)tile3.type] || (int)tile3.type == 314)) || (int)tile3.wall > 0)))
                                flag3 = true;
                        }
                        if (this.inventory[this.selectedItem].itemId == 213 && Main.tile[Player.tileTargetX, Player.tileTargetY].active())
                        {
                            int index1 = Player.tileTargetX;
                            int index2 = Player.tileTargetY;
                            if ((int)Main.tile[index1, index2].type == 3 || (int)Main.tile[index1, index2].type == 73 || (int)Main.tile[index1, index2].type == 84)
                            {
                                WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
                                if (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.netMode == 1)
                                    NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                            else if ((int)Main.tile[index1, index2].type == 83)
                            {
                                bool flag5 = false;
                                int num = (int)Main.tile[index1, index2].frameX / 18;
                                if (num == 0 && Main.dayTime)
                                    flag5 = true;
                                if (num == 1 && !Main.dayTime)
                                    flag5 = true;
                                if (num == 3 && !Main.dayTime && (Main.bloodMoon || Main.moonPhase == 0))
                                    flag5 = true;
                                if (num == 4 && (Main.raining || (double)Main.cloudAlpha > 0.0))
                                    flag5 = true;
                                if (num == 5 && !Main.raining && (Main.dayTime && Main.time > 40500.0))
                                    flag5 = true;
                                if (flag5)
                                {
                                    WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
                                    NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0.0f, 0, 0, 0);
                                }
                            }
                        }
                        if (Main.tileAlch[this.inventory[this.selectedItem].createTile])
                            flag3 = true;
                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].active() && (Main.tileCut[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || TileID.Sets.BreakableWhenPlacing[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type >= 373 && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type <= 375))
                        {
                            if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type != this.inventory[this.selectedItem].createTile)
                            {
                                if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != 78 && (int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type != 380 || ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 3 || (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 73) && Main.tileAlch[this.inventory[this.selectedItem].createTile])
                                {
                                    WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
                                    if (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() && Main.netMode == 1)
                                        NetMessage.SendData(17, -1, -1, "", 4, (float)Player.tileTargetX, (float)Player.tileTargetY, 0.0f, 0, 0, 0);
                                }
                                else
                                    flag3 = false;
                            }
                            else
                                flag3 = false;
                        }
                        if (!flag3 && this.inventory[this.selectedItem].createTile == 19)
                        {
                            for (int index1 = Player.tileTargetX - 1; index1 <= Player.tileTargetX + 1; ++index1)
                            {
                                for (int index2 = Player.tileTargetY - 1; index2 <= Player.tileTargetY + 1; ++index2)
                                {
                                    if (Main.tile[index1, index2].active())
                                    {
                                        flag3 = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    if (flag3)
                    {
                        int num1 = this.inventory[this.selectedItem].placeStyle;
                        if (!flag4)
                        {
                            if (this.inventory[this.selectedItem].createTile == 36)
                                num1 = Main.rand.Next(7);
                            if (this.inventory[this.selectedItem].createTile == 212 && this.direction > 0)
                                num1 = 1;
                            if (this.inventory[this.selectedItem].createTile == 141)
                                num1 = Main.rand.Next(2);
                            if (this.inventory[this.selectedItem].createTile == 128 || this.inventory[this.selectedItem].createTile == 269 || this.inventory[this.selectedItem].createTile == 334)
                                num1 = this.direction >= 0 ? 1 : -1;
                            if (this.inventory[this.selectedItem].createTile == 241 && this.inventory[this.selectedItem].placeStyle == 0)
                                num1 = Main.rand.Next(0, 9);
                            if (this.inventory[this.selectedItem].createTile == 35 && this.inventory[this.selectedItem].placeStyle == 0)
                                num1 = Main.rand.Next(9);
                        }
                        if (this.inventory[this.selectedItem].createTile == 314 && num1 == 2 && this.direction == 1)
                            ++num1;
                        int[,] numArray = new int[11, 11];
                        if (this.autoPaint)
                        {
                            for (int index1 = 0; index1 < 11; ++index1)
                            {
                                for (int index2 = 0; index2 < 11; ++index2)
                                {
                                    int index3 = Player.tileTargetX - 5 + index1;
                                    int index4 = Player.tileTargetY - 5 + index2;
                                    numArray[index1, index2] = !Main.tile[index3, index4].active() ? -1 : (int)Main.tile[index3, index4].type;
                                }
                            }
                        }
                        bool forced = false;
                        bool flag5;
                        if (flag4)
                        {
                            flag5 = TileObject.Place(objectData);
                            WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
                            Main.PlaySound(0, Player.tileTargetX * 16, Player.tileTargetY * 16, 1);
                        }
                        else
                            flag5 = WorldGen.PlaceTile(Player.tileTargetX, Player.tileTargetY, this.inventory[this.selectedItem].createTile, false, forced, this.whoAmI, num1);
                        if (this.inventory[this.selectedItem].itemId == 213 && !flag5 && ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 1 && Main.tile[Player.tileTargetX, Player.tileTargetY].active()))
                        {
                            int num2 = 0;
                            int num3 = 0;
                            Point point = Utils.ToTileCoordinates(this.Center);
                            Dictionary<ushort, int> resultsOutput = new Dictionary<ushort, int>();
                            WorldUtils.Gen(new Point(point.X - 25, point.Y - 25), (GenShape)new Shapes.Rectangle(50, 50), (GenAction)new Actions.TileScanner(new ushort[6]
              {
                (ushort) 182,
                (ushort) 180,
                (ushort) 179,
                (ushort) 183,
                (ushort) 181,
                (ushort) 381
              }).Output(resultsOutput));
                            foreach (KeyValuePair<ushort, int> keyValuePair in resultsOutput)
                            {
                                if (keyValuePair.Value > num3)
                                {
                                    num3 = keyValuePair.Value;
                                    num2 = (int)keyValuePair.Key;
                                }
                            }
                            if (num3 == 0)
                                num2 = Utils.SelectRandom<int>(Main.rand, 182, 180, 179, 183, 181);
                            if (num2 != 0)
                            {
                                Main.tile[Player.tileTargetX, Player.tileTargetY].type = (ushort)num2;
                                WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
                                NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 1);
                                flag5 = true;
                            }
                        }
                        if (flag5)
                        {
                            this.itemTime = (int)((double)this.inventory[this.selectedItem].useTime * (double)this.tileSpeed);
                            if (flag4)
                            {
                                TileObjectData.CallPostPlacementPlayerHook(Player.tileTargetX, Player.tileTargetY, this.inventory[this.selectedItem].createTile, num1, this.direction, objectData);
                                if (Main.netMode == 1 && !Main.tileContainer[this.inventory[this.selectedItem].createTile])
                                    NetMessage.SendObjectPlacment(-1, Player.tileTargetX, Player.tileTargetY, objectData.type, objectData.style, objectData.alternate, objectData.random, this.direction);
                            }
                            else
                            {
                                NetMessage.SendData(17, -1, -1, "", 1, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)this.inventory[this.selectedItem].createTile, num1, 0, 0);
                                if (this.inventory[this.selectedItem].createTile == 15)
                                {
                                    if (this.direction == 1)
                                    {
                                        Main.tile[Player.tileTargetX, Player.tileTargetY].frameX += (short)18;
                                        Main.tile[Player.tileTargetX, Player.tileTargetY - 1].frameX += (short)18;
                                    }
                                    if (Main.netMode == 1)
                                        NetMessage.SendTileSquare(-1, Player.tileTargetX - 1, Player.tileTargetY - 1, 3);
                                }
                                else if ((this.inventory[this.selectedItem].createTile == 79 || this.inventory[this.selectedItem].createTile == 90) && Main.netMode == 1)
                                    NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 5);
                            }
                            if (this.inventory[this.selectedItem].createTile == 137)
                            {
                                if (this.direction == 1)
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].frameX += (short)18;
                                if (Main.netMode == 1)
                                    NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 1);
                            }
                            if (this.inventory[this.selectedItem].createTile == 19 && Main.smartDigEnabled)
                            {
                                int index1 = Player.tileTargetX;
                                int index2 = Player.tileTargetY;
                                int slope1 = -1;
                                int num2 = 0;
                                int num3 = 0;
                                bool flag6 = true;
                                for (int index3 = -1; index3 < 2; ++index3)
                                {
                                    for (int index4 = -1; index4 < 2; ++index4)
                                    {
                                        if ((index3 != 0 || index4 != 0) && (int)Main.tile[index1 + index3, index2 + index4].type == 19)
                                            flag6 = false;
                                    }
                                }
                                if (!flag6)
                                {
                                    Tile tile1 = Main.tile[index1 - 1, index2 - 1];
                                    if (tile1.active() && (int)tile1.type == 19 && (int)tile1.slope() != 2)
                                        ++num2;
                                    Tile tile2 = Main.tile[index1 - 1, index2 + 1];
                                    if (tile2.active() && (int)tile2.type == 19 && (int)tile2.slope() != 1)
                                        ++num3;
                                    Tile tile3 = Main.tile[index1 + 1, index2 - 1];
                                    if (tile3.active() && (int)tile3.type == 19 && (int)tile3.slope() != 1)
                                        ++num3;
                                    Tile tile4 = Main.tile[index1 + 1, index2 + 1];
                                    if (tile4.active() && (int)tile4.type == 19 && (int)tile4.slope() != 2)
                                        ++num2;
                                    Tile testTile1 = Main.tile[index1 - 1, index2];
                                    if (WorldGen.SolidTile(testTile1))
                                    {
                                        ++num2;
                                        if ((int)testTile1.type == 19 && (int)testTile1.slope() == 0)
                                            ++num2;
                                    }
                                    Tile testTile2 = Main.tile[index1 + 1, index2];
                                    if (WorldGen.SolidTile(testTile2))
                                    {
                                        ++num3;
                                        if ((int)testTile2.type == 19 && (int)testTile2.slope() == 0)
                                            ++num3;
                                    }
                                    if (num2 > num3)
                                        slope1 = 1;
                                    else if (num3 > num2)
                                        slope1 = 2;
                                    Tile tile5 = Main.tile[index1 - 1, index2];
                                    if (tile5.active() && (int)tile5.type == 19)
                                        slope1 = 0;
                                    Tile tile6 = Main.tile[index1 + 1, index2];
                                    if (tile6.active() && (int)tile6.type == 19)
                                        slope1 = 0;
                                    if (slope1 != -1)
                                    {
                                        WorldGen.SlopeTile(index1, index2, slope1);
                                        int num4 = (int)Main.tile[index1, index2].slope();
                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num4, 0, 0, 0);
                                        int num5;
                                        int num6;
                                        if (slope1 == 1)
                                        {
                                            num5 = -1;
                                            num6 = -1;
                                        }
                                        else
                                        {
                                            num5 = 1;
                                            num6 = -1;
                                        }
                                        Tile tile7 = Main.tile[index1 + num5, index2 + num6];
                                        if (tile7.active() && (int)tile7.type == 19 && (int)tile7.slope() == 0 && (!Main.tile[index1 + num5 + num5, index2 + num6].active() || (int)Main.tile[index1 + num5 + num5, index2 + num6].type != 19 || !Main.tile[index1 + num5 + num5, index2 + num6].halfBrick()))
                                        {
                                            WorldGen.SlopeTile(index1 + num5, index2 + num6, slope1);
                                            int num7 = (int)tile7.slope();
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, "", 14, (float)(index1 + num5), (float)(index2 + num6), (float)num7, 0, 0, 0);
                                        }
                                        int num8;
                                        int num9;
                                        if (slope1 == 1)
                                        {
                                            num8 = 1;
                                            num9 = 1;
                                        }
                                        else
                                        {
                                            num8 = -1;
                                            num9 = 1;
                                        }
                                        Tile tile8 = Main.tile[index1 + num8, index2 + num9];
                                        if (tile8.active() && (int)tile8.type == 19 && ((int)tile8.slope() == 0 && WorldGen.PlatformProperSides(index1 + num8, index2 + num9, true) <= 0))
                                        {
                                            WorldGen.SlopeTile(index1 + num8, index2 + num9, slope1);
                                            int num7 = (int)tile8.slope();
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, "", 14, (float)(index1 + num8), (float)(index2 + num9), (float)num7, 0, 0, 0);
                                        }
                                    }
                                    else
                                    {
                                        int num4 = -1;
                                        Tile tile7 = Main.tile[index1 + num4, index2];
                                        if (tile7.active() && (int)tile7.type == 19 && (int)tile7.slope() != 0)
                                        {
                                            int num5 = Utils.ToDirectionInt((int)tile7.slope() == 1) * num4;
                                            int slope2 = num5 == -1 ? 0 : (int)tile7.slope();
                                            bool flag7 = true;
                                            if (Main.tile[index1 + num4 * 2, index2 + num5].active() && (int)Main.tile[index1 + num4 * 2, index2].type == 19 && slope2 == (int)Main.tile[index1 + num4 * 2, index2 + num5].slope())
                                                flag7 = false;
                                            if (Main.tile[index1, index2 - num5].active() && (int)Main.tile[index1, index2 - num5].type == 19 && (int)tile7.slope() == (int)Main.tile[index1, index2 - num5].slope())
                                                flag7 = false;
                                            if (flag7)
                                            {
                                                WorldGen.SlopeTile(index1 + num4, index2, slope2);
                                                int num6 = (int)tile7.slope();
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, "", 14, (float)(index1 + num4), (float)index2, (float)num6, 0, 0, 0);
                                            }
                                        }
                                        int num7 = 1;
                                        int num8 = 0;
                                        Tile tile8 = Main.tile[index1 + num7, index2 + num8];
                                        if (tile8.active() && (int)tile8.type == 19 && (int)tile8.slope() != 0)
                                        {
                                            int num5 = Utils.ToDirectionInt((int)tile8.slope() == 1) * num7;
                                            int slope2 = num5 == -1 ? 0 : (int)tile8.slope();
                                            bool flag7 = true;
                                            if (Main.tile[index1 + num7 * 2, index2 + num5].active() && (int)Main.tile[index1 + num7 * 2, index2].type == 19 && slope2 == (int)Main.tile[index1 + num7 * 2, index2 + num5].slope())
                                                flag7 = false;
                                            if (Main.tile[index1, index2 - num5].active() && (int)Main.tile[index1, index2 - num5].type == 19 && (int)tile8.slope() == (int)Main.tile[index1, index2 - num5].slope())
                                                flag7 = false;
                                            if (flag7)
                                            {
                                                WorldGen.SlopeTile(index1 + num7, index2, slope2);
                                                int num6 = (int)tile8.slope();
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, "", 14, (float)(index1 + num7), (float)index2, (float)num6, 0, 0, 0);
                                            }
                                        }
                                        if (num2 == num3 && WorldGen.PlatformProperSides(index1, index2, false) == 0)
                                        {
                                            Tile tile9 = Main.tile[index1, index2 + 1];
                                            if (tile9.active() && !tile9.halfBrick() && ((int)tile9.slope() == 0 && Main.tileSolid[(int)tile9.type]))
                                            {
                                                int slope2 = this.direction == 1 ? 2 : 1;
                                                WorldGen.SlopeTile(index1, index2, slope2);
                                                int num5 = (int)Main.tile[index1, index2].slope();
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num5, 0, 0, 0);
                                            }
                                        }
                                    }
                                }
                            }
                            if (Main.tileSolid[this.inventory[this.selectedItem].createTile] && this.inventory[this.selectedItem].createTile != 19)
                            {
                                int i1 = Player.tileTargetX;
                                int j1 = Player.tileTargetY + 1;
                                if (Main.tile[i1, j1] != null && (int)Main.tile[i1, j1].type != 19 && (Main.tile[i1, j1].topSlope() || Main.tile[i1, j1].halfBrick()))
                                {
                                    WorldGen.SlopeTile(i1, j1, 0);
                                    if (Main.netMode == 1)
                                        NetMessage.SendData(17, -1, -1, "", 14, (float)i1, (float)j1, 0.0f, 0, 0, 0);
                                }
                                int i2 = Player.tileTargetX;
                                int j2 = Player.tileTargetY - 1;
                                if (Main.tile[i2, j2] != null && (int)Main.tile[i2, j2].type != 19 && Main.tile[i2, j2].bottomSlope())
                                {
                                    WorldGen.SlopeTile(i2, j2, 0);
                                    if (Main.netMode == 1)
                                        NetMessage.SendData(17, -1, -1, "", 14, (float)i2, (float)j2, 0.0f, 0, 0, 0);
                                }
                            }
                            if (Main.tileSolid[this.inventory[this.selectedItem].createTile])
                            {
                                for (int i1 = Player.tileTargetX - 1; i1 <= Player.tileTargetX + 1; ++i1)
                                {
                                    for (int j1 = Player.tileTargetY - 1; j1 <= Player.tileTargetY + 1; ++j1)
                                    {
                                        if (Main.tile[i1, j1].active() && this.inventory[this.selectedItem].createTile != (int)Main.tile[i1, j1].type && ((int)Main.tile[i1, j1].type == 2 || (int)Main.tile[i1, j1].type == 23 || ((int)Main.tile[i1, j1].type == 60 || (int)Main.tile[i1, j1].type == 70) || ((int)Main.tile[i1, j1].type == 109 || (int)Main.tile[i1, j1].type == 199)))
                                        {
                                            bool flag6 = true;
                                            for (int i2 = i1 - 1; i2 <= i1 + 1; ++i2)
                                            {
                                                for (int j2 = j1 - 1; j2 <= j1 + 1; ++j2)
                                                {
                                                    if (!WorldGen.SolidTile(i2, j2))
                                                        flag6 = false;
                                                }
                                            }
                                            if (flag6)
                                            {
                                                WorldGen.KillTile(i1, j1, true, false, false);
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, "", 0, (float)i1, (float)j1, 1f, 0, 0, 0);
                                            }
                                        }
                                    }
                                }
                            }
                            if (this.autoPaint)
                            {
                                for (int index1 = 0; index1 < 11; ++index1)
                                {
                                    for (int index2 = 0; index2 < 11; ++index2)
                                    {
                                        int x = Player.tileTargetX - 5 + index1;
                                        int y = Player.tileTargetY - 5 + index2;
                                        if ((Main.tile[x, y].active() || numArray[index1, index2] != -1) && (!Main.tile[x, y].active() || numArray[index1, index2] != (int)Main.tile[x, y].type))
                                        {
                                            int num2 = -1;
                                            int num3 = -1;
                                            for (int index3 = 0; index3 < 58; ++index3)
                                            {
                                                if (this.inventory[index3].stack > 0 && (int)this.inventory[index3].paint > 0)
                                                {
                                                    num2 = (int)this.inventory[index3].paint;
                                                    num3 = index3;
                                                    break;
                                                }
                                            }
                                            if (num2 > 0 && (int)Main.tile[x, y].color() != num2 && WorldGen.paintTile(x, y, (byte)num2, true))
                                            {
                                                int index3 = num3;
                                                --this.inventory[index3].stack;
                                                if (this.inventory[index3].stack <= 0)
                                                    this.inventory[index3].SetDefaults(0, false);
                                                this.itemTime = (int)((double)this.inventory[this.selectedItem].useTime * (double)this.tileSpeed);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (this.inventory[this.selectedItem].createWall < 0 || (double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)this.inventory[this.selectedItem].tileBoost > (double)Player.tileTargetX || (((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)this.inventory[this.selectedItem].tileBoost - 1.0 < (double)Player.tileTargetX || (double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)this.inventory[this.selectedItem].tileBoost > (double)Player.tileTargetY) || ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)this.inventory[this.selectedItem].tileBoost - 2.0 < (double)Player.tileTargetY)
                return;
            this.showItemIcon = true;
            if (this.itemTime != 0 || this.itemAnimation <= 0 || !this.controlUseItem || !Main.tile[Player.tileTargetX + 1, Player.tileTargetY].active() && (int)Main.tile[Player.tileTargetX + 1, Player.tileTargetY].wall <= 0 && (!Main.tile[Player.tileTargetX - 1, Player.tileTargetY].active() && (int)Main.tile[Player.tileTargetX - 1, Player.tileTargetY].wall <= 0) && (!Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() && (int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].wall <= 0 && (!Main.tile[Player.tileTargetX, Player.tileTargetY - 1].active() && (int)Main.tile[Player.tileTargetX, Player.tileTargetY - 1].wall <= 0)) || (int)Main.tile[Player.tileTargetX, Player.tileTargetY].wall == this.inventory[this.selectedItem].createWall)
                return;
            if (Player.SmartCursorSettings.SmartWallReplacement && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].wall != 0 && WorldGen.NearFriendlyWall(Player.tileTargetX, Player.tileTargetY))
            {
                WorldGen.KillWall(Player.tileTargetX, Player.tileTargetY, false);
                if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].wall == 0 && Main.netMode == 1)
                    NetMessage.SendData(17, -1, -1, "", 2, (float)Player.tileTargetX, (float)Player.tileTargetY, 0.0f, 0, 0, 0);
                if (this.inventory[this.selectedItem].consumable)
                    ++this.inventory[this.selectedItem].stack;
                this.itemTime = (int)((double)this.inventory[this.selectedItem].useTime * (double)this.wallSpeed);
            }
            else
            {
                WorldGen.PlaceWall(Player.tileTargetX, Player.tileTargetY, this.inventory[this.selectedItem].createWall, false);
                if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].wall != this.inventory[this.selectedItem].createWall)
                    return;
                this.itemTime = (int)((double)this.inventory[this.selectedItem].useTime * (double)this.wallSpeed);
                if (Main.netMode == 1)
                    NetMessage.SendData(17, -1, -1, "", 3, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)this.inventory[this.selectedItem].createWall, 0, 0, 0);
                if (this.inventory[this.selectedItem].stack > 1)
                {
                    int type = this.inventory[this.selectedItem].createWall;
                    for (int index1 = 0; index1 < 4; ++index1)
                    {
                        int i = Player.tileTargetX;
                        int j = Player.tileTargetY;
                        if (index1 == 0)
                            --i;
                        if (index1 == 1)
                            ++i;
                        if (index1 == 2)
                            --j;
                        if (index1 == 3)
                            ++j;
                        if ((int)Main.tile[i, j].wall == 0)
                        {
                            int num1 = 0;
                            for (int index2 = 0; index2 < 4; ++index2)
                            {
                                int index3 = i;
                                int index4 = j;
                                if (index2 == 0)
                                    --index3;
                                if (index2 == 1)
                                    ++index3;
                                if (index2 == 2)
                                    --index4;
                                if (index2 == 3)
                                    ++index4;
                                if ((int)Main.tile[index3, index4].wall == type)
                                    ++num1;
                            }
                            if (num1 == 4)
                            {
                                WorldGen.PlaceWall(i, j, type, false);
                                if ((int)Main.tile[i, j].wall == type)
                                {
                                    --this.inventory[this.selectedItem].stack;
                                    if (this.inventory[this.selectedItem].stack == 0)
                                        this.inventory[this.selectedItem].SetDefaults(0, false);
                                    if (Main.netMode == 1)
                                        NetMessage.SendData(17, -1, -1, "", 3, (float)i, (float)j, (float)type, 0, 0, 0);
                                    if (this.autoPaint)
                                    {
                                        int x = i;
                                        int y = j;
                                        int num2 = -1;
                                        int num3 = -1;
                                        for (int index2 = 0; index2 < 58; ++index2)
                                        {
                                            if (this.inventory[index2].stack > 0 && (int)this.inventory[index2].paint > 0)
                                            {
                                                num2 = (int)this.inventory[index2].paint;
                                                num3 = index2;
                                                break;
                                            }
                                        }
                                        if (num2 > 0 && (int)Main.tile[x, y].wallColor() != num2 && WorldGen.paintWall(x, y, (byte)num2, true))
                                        {
                                            int index2 = num3;
                                            --this.inventory[index2].stack;
                                            if (this.inventory[index2].stack <= 0)
                                                this.inventory[index2].SetDefaults(0, false);
                                            this.itemTime = (int)((double)this.inventory[this.selectedItem].useTime * (double)this.wallSpeed);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (!this.autoPaint)
                    return;
                int x1 = Player.tileTargetX;
                int y1 = Player.tileTargetY;
                int num4 = -1;
                int num5 = -1;
                for (int index = 0; index < 58; ++index)
                {
                    if (this.inventory[index].stack > 0 && (int)this.inventory[index].paint > 0)
                    {
                        num4 = (int)this.inventory[index].paint;
                        num5 = index;
                        break;
                    }
                }
                if (num4 <= 0 || (int)Main.tile[x1, y1].wallColor() == num4 || !WorldGen.paintWall(x1, y1, (byte)num4, true))
                    return;
                int index5 = num5;
                --this.inventory[index5].stack;
                if (this.inventory[index5].stack <= 0)
                    this.inventory[index5].SetDefaults(0, false);
                this.itemTime = (int)((double)this.inventory[this.selectedItem].useTime * (double)this.wallSpeed);
            }
        }

        private static void ExtractinatorUse(int extractType)
        {
            int maxValue1 = 5000;
            int maxValue2 = 25;
            int maxValue3 = 50;
            int maxValue4 = -1;
            if (extractType == 1)
            {
                maxValue1 /= 3;
                maxValue2 *= 2;
                maxValue3 /= 2;
                maxValue4 = 10;
            }
            int Stack = 1;
            int Type;
            if (maxValue4 != -1 && Main.rand.Next(maxValue4) == 0)
            {
                Type = 3380;
                if (Main.rand.Next(5) == 0)
                    Stack += Main.rand.Next(2);
                if (Main.rand.Next(10) == 0)
                    Stack += Main.rand.Next(3);
                if (Main.rand.Next(15) == 0)
                    Stack += Main.rand.Next(4);
            }
            else if (Main.rand.Next(2) == 0)
            {
                if (Main.rand.Next(12000) == 0)
                {
                    Type = 74;
                    if (Main.rand.Next(14) == 0)
                        Stack += Main.rand.Next(0, 2);
                    if (Main.rand.Next(14) == 0)
                        Stack += Main.rand.Next(0, 2);
                    if (Main.rand.Next(14) == 0)
                        Stack += Main.rand.Next(0, 2);
                }
                else if (Main.rand.Next(800) == 0)
                {
                    Type = 73;
                    if (Main.rand.Next(6) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(6) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(6) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(6) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(6) == 0)
                        Stack += Main.rand.Next(1, 20);
                }
                else if (Main.rand.Next(60) == 0)
                {
                    Type = 72;
                    if (Main.rand.Next(4) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(4) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(4) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(4) == 0)
                        Stack += Main.rand.Next(5, 25);
                }
                else
                {
                    Type = 71;
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(10, 25);
                }
            }
            else if (maxValue1 != -1 && Main.rand.Next(maxValue1) == 0)
                Type = 1242;
            else if (maxValue2 != -1 && Main.rand.Next(maxValue2) == 0)
            {
                switch (Main.rand.Next(6))
                {
                    case 0:
                        Type = 181;
                        break;
                    case 1:
                        Type = 180;
                        break;
                    case 2:
                        Type = 177;
                        break;
                    case 3:
                        Type = 179;
                        break;
                    case 4:
                        Type = 178;
                        break;
                    default:
                        Type = 182;
                        break;
                }
                if (Main.rand.Next(20) == 0)
                    Stack += Main.rand.Next(0, 2);
                if (Main.rand.Next(30) == 0)
                    Stack += Main.rand.Next(0, 3);
                if (Main.rand.Next(40) == 0)
                    Stack += Main.rand.Next(0, 4);
                if (Main.rand.Next(50) == 0)
                    Stack += Main.rand.Next(0, 5);
                if (Main.rand.Next(60) == 0)
                    Stack += Main.rand.Next(0, 6);
            }
            else if (maxValue3 != -1 && Main.rand.Next(maxValue3) == 0)
            {
                Type = 999;
                if (Main.rand.Next(20) == 0)
                    Stack += Main.rand.Next(0, 2);
                if (Main.rand.Next(30) == 0)
                    Stack += Main.rand.Next(0, 3);
                if (Main.rand.Next(40) == 0)
                    Stack += Main.rand.Next(0, 4);
                if (Main.rand.Next(50) == 0)
                    Stack += Main.rand.Next(0, 5);
                if (Main.rand.Next(60) == 0)
                    Stack += Main.rand.Next(0, 6);
            }
            else if (Main.rand.Next(3) == 0)
            {
                if (Main.rand.Next(5000) == 0)
                {
                    Type = 74;
                    if (Main.rand.Next(10) == 0)
                        Stack += Main.rand.Next(0, 3);
                    if (Main.rand.Next(10) == 0)
                        Stack += Main.rand.Next(0, 3);
                    if (Main.rand.Next(10) == 0)
                        Stack += Main.rand.Next(0, 3);
                    if (Main.rand.Next(10) == 0)
                        Stack += Main.rand.Next(0, 3);
                    if (Main.rand.Next(10) == 0)
                        Stack += Main.rand.Next(0, 3);
                }
                else if (Main.rand.Next(400) == 0)
                {
                    Type = 73;
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 21);
                    if (Main.rand.Next(5) == 0)
                        Stack += Main.rand.Next(1, 20);
                }
                else if (Main.rand.Next(30) == 0)
                {
                    Type = 72;
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(5, 26);
                    if (Main.rand.Next(3) == 0)
                        Stack += Main.rand.Next(5, 25);
                }
                else
                {
                    Type = 71;
                    if (Main.rand.Next(2) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(2) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(2) == 0)
                        Stack += Main.rand.Next(10, 26);
                    if (Main.rand.Next(2) == 0)
                        Stack += Main.rand.Next(10, 25);
                }
            }
            else
            {
                switch (Main.rand.Next(8))
                {
                    case 0:
                        Type = 12;
                        break;
                    case 1:
                        Type = 11;
                        break;
                    case 2:
                        Type = 14;
                        break;
                    case 3:
                        Type = 13;
                        break;
                    case 4:
                        Type = 699;
                        break;
                    case 5:
                        Type = 700;
                        break;
                    case 6:
                        Type = 701;
                        break;
                    default:
                        Type = 702;
                        break;
                }
                if (Main.rand.Next(20) == 0)
                    Stack += Main.rand.Next(0, 2);
                if (Main.rand.Next(30) == 0)
                    Stack += Main.rand.Next(0, 3);
                if (Main.rand.Next(40) == 0)
                    Stack += Main.rand.Next(0, 4);
                if (Main.rand.Next(50) == 0)
                    Stack += Main.rand.Next(0, 5);
                if (Main.rand.Next(60) == 0)
                    Stack += Main.rand.Next(0, 6);
            }
            if (Type <= 0)
                return;
            int number = Item.NewItem((int)Main.screenPosition.X + Main.mouseX, (int)Main.screenPosition.Y + Main.mouseY, 1, 1, Type, Stack, false, -1, false);
            if (Main.netMode != 1)
                return;
            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
        }

        public void ChangeDir(int dir)
        {
            if (!this.pulley || (int)this.pulleyDir != 2)
            {
                this.direction = dir;
            }
            else
            {
                if ((int)this.pulleyDir == 2 && dir == this.direction)
                    return;
                int num = (int)((double)this.position.X + (double)(this.width / 2)) / 16 * 16 + 8 - this.width / 2;
                if (Collision.SolidCollision(new Vector2((float)num, this.position.Y), this.width, this.height))
                    return;
                if (this.whoAmI == Main.myPlayer)
                    Main.cameraX = Main.cameraX + this.position.X - (float)num;
                this.pulleyDir = (byte)1;
                this.position.X = (float)num;
                this.direction = dir;
            }
        }

        public Microsoft.Xna.Framework.Rectangle getRect()
        {
            return new Microsoft.Xna.Framework.Rectangle((int)this.position.X, (int)this.position.Y, this.width, this.height);
        }

        private void pumpkinSword(int i, int dmg, float kb)
        {
            int num1 = Main.rand.Next(100, 300);
            int num2 = Main.rand.Next(100, 300);
            int num3 = Main.rand.Next(2) != 0 ? num1 + (Main.maxScreenW / 2 - num1) : num1 - (Main.maxScreenW / 2 + num1);
            int num4 = Main.rand.Next(2) != 0 ? num2 + (Main.maxScreenH / 2 - num2) : num2 - (Main.maxScreenH / 2 + num2);
            int num5 = num3 + (int)this.position.X;
            int num6 = num4 + (int)this.position.Y;
            float num7 = 8f;
            Vector2 vector2 = new Vector2((float)num5, (float)num6);
            float num8 = Main.npc[i].position.X - vector2.X;
            float num9 = Main.npc[i].position.Y - vector2.Y;
            float num10 = (float)Math.Sqrt((double)num8 * (double)num8 + (double)num9 * (double)num9);
            float num11 = num7 / num10;
            float SpeedX = num8 * num11;
            float SpeedY = num9 * num11;
            Projectile.NewProjectile((float)num5, (float)num6, SpeedX, SpeedY, 321, dmg, kb, this.whoAmI, (float)i, 0.0f);
        }

        public void PutItemInInventory(int type, int selItem = -1)
        {
            for (int index = 0; index < 58; ++index)
            {
                Item obj = this.inventory[index];
                if (obj.stack > 0 && obj.itemId == type && obj.stack < obj.maxStack)
                {
                    ++obj.stack;
                    return;
                }
            }
            if (selItem >= 0 && (this.inventory[selItem].itemId == 0 || this.inventory[selItem].stack <= 0))
            {
                this.inventory[selItem].SetDefaults(type, false);
            }
            else
            {
                Item newItem = new Item();
                newItem.SetDefaults(type, false);
                if (this.GetItem(this.whoAmI, newItem, false, false).stack > 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, type, 1, false, 0, true);
                    if (Main.netMode != 1)
                        return;
                    NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                else
                {
                    newItem.position.X = this.Center.X - (float)(newItem.width / 2);
                    newItem.position.Y = this.Center.Y - (float)(newItem.height / 2);
                    newItem.active = true;
                    ItemText.NewText(newItem, 0, false, false);
                }
            }
        }

        public bool SummonItemCheck()
        {
            for (int index = 0; index < 200; ++index)
            {
                if (Main.npc[index].active && (this.inventory[this.selectedItem].itemId == 43 && Main.npc[index].type == 4 || this.inventory[this.selectedItem].itemId == 70 && Main.npc[index].type == 13 || (this.inventory[this.selectedItem].itemId == 560 & Main.npc[index].type == 50 || this.inventory[this.selectedItem].itemId == 544 && Main.npc[index].type == 125) || (this.inventory[this.selectedItem].itemId == 544 && Main.npc[index].type == 126 || this.inventory[this.selectedItem].itemId == 556 && Main.npc[index].type == 134 || (this.inventory[this.selectedItem].itemId == 557 && Main.npc[index].type == (int)sbyte.MaxValue || this.inventory[this.selectedItem].itemId == 1133 && Main.npc[index].type == 222)) || this.inventory[this.selectedItem].itemId == 1331 && Main.npc[index].type == 266))
                    return false;
            }
            return true;
        }

        public int FishingLevel()
        {
            int num1 = 0;
            int num2 = this.inventory[this.selectedItem].fishingPole;
            if (num2 == 0)
            {
                for (int index = 0; index < 58; ++index)
                {
                    if (this.inventory[index].fishingPole > num2)
                        num2 = this.inventory[index].fishingPole;
                }
            }
            for (int index = 0; index < 58; ++index)
            {
                if (this.inventory[index].stack > 0 && this.inventory[index].bait > 0)
                {
                    if (this.inventory[index].itemId == 2673)
                        return -1;
                    num1 = this.inventory[index].bait;
                    break;
                }
            }
            if (num1 == 0 || num2 == 0)
                return 0;
            int num3 = num1 + num2 + this.fishingSkill;
            if (Main.raining)
                num3 = (int)((double)num3 * 1.20000004768372);
            if ((double)Main.cloudBGAlpha > 0.0)
                num3 = (int)((double)num3 * 1.10000002384186);
            if (Main.dayTime && (Main.time < 5400.0 || Main.time > 48600.0))
                num3 = (int)((double)num3 * 1.29999995231628);
            if (Main.dayTime && Main.time > 16200.0 && Main.time < 37800.0)
                num3 = (int)((double)num3 * 0.800000011920929);
            if (!Main.dayTime && Main.time > 6480.0 && Main.time < 25920.0)
                num3 = (int)((double)num3 * 0.800000011920929);
            if (Main.moonPhase == 0)
                num3 = (int)((double)num3 * 1.10000002384186);
            if (Main.moonPhase == 1 || Main.moonPhase == 7)
                num3 = (int)((double)num3 * 1.04999995231628);
            if (Main.moonPhase == 3 || Main.moonPhase == 5)
                num3 = (int)((double)num3 * 0.949999988079071);
            if (Main.moonPhase == 4)
                num3 = (int)((double)num3 * 0.899999976158142);
            return num3;
        }

        public bool HasUnityPotion()
        {
            for (int index = 0; index < 58; ++index)
            {
                if (this.inventory[index].itemId == 2997 && this.inventory[index].stack > 0)
                    return true;
            }
            return false;
        }

        public void TakeUnityPotion()
        {
            for (int index = 0; index < 400; ++index)
            {
                if (this.inventory[index].itemId == 2997 && this.inventory[index].stack > 0)
                {
                    --this.inventory[index].stack;
                    if (this.inventory[index].stack > 0)
                        break;
                    this.inventory[index].SetDefaults(0, false);
                    break;
                }
            }
        }

        public void UnityTeleport(Vector2 telePos)
        {
            int num = 3;
            if (Main.netMode == 0)
                this.Teleport(telePos, num, 0);
            else
                NetMessage.SendData(65, -1, -1, "", 2, (float)this.whoAmI, telePos.X, telePos.Y, num, 0, 0);
        }

        private void SporeSac()
        {
            int Damage = 70;
            float KnockBack = 1.5f;
            if (Main.rand.Next(15) != 0)
                return;
            int num1 = 0;
            for (int index = 0; index < 1000; ++index)
            {
                if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI && (Main.projectile[index].type == 567 || Main.projectile[index].type == 568))
                    ++num1;
            }
            if (Main.rand.Next(15) < num1 || num1 >= 10)
                return;
            int num2 = 50;
            int num3 = 24;
            int num4 = 90;
            for (int index1 = 0; index1 < num2; ++index1)
            {
                int num5 = Main.rand.Next(200 - index1 * 2, 400 + index1 * 2);
                Vector2 center = this.Center;
                center.X += (float)Main.rand.Next(-num5, num5 + 1);
                center.Y += (float)Main.rand.Next(-num5, num5 + 1);
                if (!Collision.SolidCollision(center, num3, num3) && !Collision.WetCollision(center, num3, num3))
                {
                    center.X += (float)(num3 / 2);
                    center.Y += (float)(num3 / 2);
                    if (Collision.CanHit(new Vector2(this.Center.X, this.position.Y), 1, 1, center, 1, 1) || Collision.CanHit(new Vector2(this.Center.X, this.position.Y - 50f), 1, 1, center, 1, 1))
                    {
                        int index2 = (int)center.X / 16;
                        int index3 = (int)center.Y / 16;
                        bool flag = false;
                        if (Main.rand.Next(3) == 0 && Main.tile[index2, index3] != null && (int)Main.tile[index2, index3].wall > 0)
                        {
                            flag = true;
                        }
                        else
                        {
                            center.X -= (float)(num4 / 2);
                            center.Y -= (float)(num4 / 2);
                            if (Collision.SolidCollision(center, num4, num4))
                            {
                                center.X += (float)(num4 / 2);
                                center.Y += (float)(num4 / 2);
                                flag = true;
                            }
                        }
                        if (flag)
                        {
                            for (int index4 = 0; index4 < 1000; ++index4)
                            {
                                if (Main.projectile[index4].active && Main.projectile[index4].owner == this.whoAmI && Main.projectile[index4].aiStyle == 105 && (double)(center - Main.projectile[index4].Center).Length() < 48.0)
                                {
                                    flag = false;
                                    break;
                                }
                            }
                            if (flag)
                            {
                                Projectile.NewProjectile(center.X, center.Y, 0.0f, 0.0f, 567 + Main.rand.Next(2), Damage, KnockBack, this.whoAmI, 0.0f, 0.0f);
                                break;
                            }
                        }
                    }
                }
            }
        }

        public void ItemCheck(int i)
        {
            if (this.webbed || this.frozen || this.stoned)
                return;
            bool flag1 = false;
            float num1 = 5E-06f;
            float num2 = (float)this.mount.PlayerOffsetHitbox;
            Item sItem = this.inventory[this.selectedItem];
            if (this.mount.Active)
            {
                if (this.mount.Type == 8)
                {
                    this.noItems = true;
                    if (this.controlUseItem)
                    {
                        this.channel = true;
                        if (this.releaseUseItem)
                            this.mount.UseAbility(this, Vector2.Zero, true);
                        this.releaseUseItem = false;
                    }
                }
                if (this.whoAmI == Main.myPlayer && (double)this.gravDir == -1.0)
                    this.mount.Dismount(this);
            }
            int num3 = sItem.damage;
            if (num3 > 0)
            {
                if (sItem.melee)
                    num3 = (int)((double)num3 * (double)this.meleeDamage + (double)num1);
                else if (sItem.ranged)
                {
                    num3 = (int)((double)num3 * (double)this.rangedDamage + (double)num1);
                    if (sItem.useAmmo == 1 || sItem.useAmmo == 323)
                        num3 = (int)((double)num3 * (double)this.arrowDamage + (double)num1);
                    if (sItem.useAmmo == 14 || sItem.useAmmo == 311)
                        num3 = (int)((double)num3 * (double)this.bulletDamage + (double)num1);
                    if (sItem.useAmmo == 771 || sItem.useAmmo == 246 || (sItem.useAmmo == 312 || sItem.useAmmo == 514))
                        num3 = (int)((double)num3 * (double)this.rocketDamage + (double)num1);
                }
                else if (sItem.thrown)
                    num3 = (int)((double)num3 * (double)this.thrownDamage + (double)num1);
                else if (sItem.magic)
                    num3 = (int)((double)num3 * (double)this.magicDamage + (double)num1);
            }
            if (sItem.autoReuse && !this.noItems)
            {
                this.releaseUseItem = true;
                if (this.itemAnimation == 1 && sItem.stack > 0)
                {
                    if (sItem.shoot > 0 && this.whoAmI != Main.myPlayer && (this.controlUseItem && sItem.useStyle == 5))
                    {
                        this.ApplyAnimation(sItem);
                        if (sItem.useSound > 0)
                            Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, sItem.useSound);
                    }
                    else
                        this.itemAnimation = 0;
                }
            }
            if (sItem.fishingPole > 0)
            {
                sItem.holdStyle = 0;
                if (this.itemTime == 0 && this.itemAnimation == 0)
                {
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI && Main.projectile[index].bobber)
                            sItem.holdStyle = 1;
                    }
                }
            }
            if (this.itemAnimation == 0 && this.altFunctionUse == 2)
                this.altFunctionUse = 0;
            if (this.itemAnimation == 0 && this.reuseDelay > 0)
            {
                this.itemAnimation = this.reuseDelay;
                this.itemTime = this.reuseDelay;
                this.reuseDelay = 0;
            }
            if (this.controlUseItem && this.releaseUseItem && (sItem.headSlot > 0 || sItem.bodySlot > 0 || sItem.legSlot > 0))
            {
                if (sItem.useStyle == 0)
                    this.releaseUseItem = false;
                if ((double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)sItem.tileBoost <= (double)Player.tileTargetX && ((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)sItem.tileBoost - 1.0 >= (double)Player.tileTargetX && ((double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)sItem.tileBoost <= (double)Player.tileTargetY && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)sItem.tileBoost - 2.0 >= (double)Player.tileTargetY))
                {
                    int index1 = Player.tileTargetX;
                    int index2 = Player.tileTargetY;
                    if (Main.tile[index1, index2].active() && ((int)Main.tile[index1, index2].type == 128 || (int)Main.tile[index1, index2].type == 269))
                    {
                        int num4 = (int)Main.tile[index1, index2].frameY;
                        int num5 = 0;
                        if (sItem.bodySlot >= 0)
                            num5 = 1;
                        if (sItem.legSlot >= 0)
                            num5 = 2;
                        int num6;
                        for (num6 = num4 / 18; num5 > num6; num6 = (int)Main.tile[index1, index2].frameY / 18)
                            ++index2;
                        for (; num5 < num6; num6 = (int)Main.tile[index1, index2].frameY / 18)
                            --index2;
                        int num7 = (int)Main.tile[index1, index2].frameX;
                        while (num7 >= 100)
                            num7 -= 100;
                        if (num7 >= 36)
                            num7 -= 36;
                        int index3 = index1 - num7 / 18;
                        int num8 = (int)Main.tile[index3, index2].frameX;
                        WorldGen.KillTile(index3, index2, true, false, false);
                        if (Main.netMode == 1)
                            NetMessage.SendData(17, -1, -1, "", 0, (float)index3, (float)index2, 1f, 0, 0, 0);
                        while (num8 >= 100)
                            num8 -= 100;
                        if (num6 == 0 && sItem.headSlot >= 0)
                        {
                            Main.blockMouse = true;
                            Main.tile[index3, index2].frameX = (short)(num8 + sItem.headSlot * 100);
                            if (Main.netMode == 1)
                                NetMessage.SendTileSquare(-1, index3, index2, 1);
                            --sItem.stack;
                            if (sItem.stack <= 0)
                            {
                                sItem.SetDefaults(0, false);
                                Main.mouseItem.SetDefaults(0, false);
                            }
                            if (this.selectedItem == 58)
                                Main.mouseItem = sItem.Clone();
                            this.releaseUseItem = false;
                            this.mouseInterface = true;
                        }
                        else if (num6 == 1 && sItem.bodySlot >= 0)
                        {
                            Main.blockMouse = true;
                            Main.tile[index3, index2].frameX = (short)(num8 + sItem.bodySlot * 100);
                            if (Main.netMode == 1)
                                NetMessage.SendTileSquare(-1, index3, index2, 1);
                            --sItem.stack;
                            if (sItem.stack <= 0)
                            {
                                sItem.SetDefaults(0, false);
                                Main.mouseItem.SetDefaults(0, false);
                            }
                            if (this.selectedItem == 58)
                                Main.mouseItem = sItem.Clone();
                            this.releaseUseItem = false;
                            this.mouseInterface = true;
                        }
                        else if (num6 == 2 && sItem.legSlot >= 0)
                        {
                            Main.blockMouse = true;
                            Main.tile[index3, index2].frameX = (short)(num8 + sItem.legSlot * 100);
                            if (Main.netMode == 1)
                                NetMessage.SendTileSquare(-1, index3, index2, 1);
                            --sItem.stack;
                            if (sItem.stack <= 0)
                            {
                                sItem.SetDefaults(0, false);
                                Main.mouseItem.SetDefaults(0, false);
                            }
                            if (this.selectedItem == 58)
                                Main.mouseItem = sItem.Clone();
                            this.releaseUseItem = false;
                            this.mouseInterface = true;
                        }
                    }
                }
            }
            if (Main.myPlayer == i && this.itemAnimation == 0 && TileObjectData.CustomPlace(sItem.createTile, sItem.placeStyle))
            {
                TileObject objectData;
                TileObject.CanPlace(Player.tileTargetX, Player.tileTargetY, sItem.createTile, sItem.placeStyle, this.direction, out objectData, true);
            }
            if (this.controlUseItem && this.itemAnimation == 0 && (this.releaseUseItem && sItem.useStyle > 0))
            {
                if (this.altFunctionUse == 1)
                    this.altFunctionUse = 2;
                bool canUse = true;
                if (sItem.shoot == 0)
                    this.itemRotation = 0.0f;
                if (sItem.itemId == 3335 && (this.extraAccessory || !Main.expertMode))
                    canUse = false;
                if (this.pulley && sItem.fishingPole > 0)
                    canUse = false;
                if (this.wet && (sItem.shoot == 85 || sItem.shoot == 15 || sItem.shoot == 34))
                    canUse = false;
                if ((int)sItem.makeNPC > 0 && !NPC.CanReleaseNPCs(this.whoAmI))
                    canUse = false;
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 603 && !Main.cEd)
                    canUse = false;
                if (sItem.itemId == 1071 || sItem.itemId == 1072)
                {
                    bool flag2 = false;
                    for (int index = 0; index < 58; ++index)
                    {
                        if ((int)this.inventory[index].paint > 0)
                        {
                            flag2 = true;
                            break;
                        }
                    }
                    if (!flag2)
                        canUse = false;
                }
                if (this.noItems)
                    canUse = false;
                if (sItem.tileWand > 0)
                {
                    int num4 = sItem.tileWand;
                    canUse = false;
                    for (int index = 0; index < 58; ++index)
                    {
                        if (num4 == this.inventory[index].itemId && this.inventory[index].stack > 0)
                        {
                            canUse = true;
                            break;
                        }
                    }
                }
                if (sItem.fishingPole > 0)
                {
                    for (int index1 = 0; index1 < 1000; ++index1)
                    {
                        if (Main.projectile[index1].active && Main.projectile[index1].owner == this.whoAmI && Main.projectile[index1].bobber)
                        {
                            canUse = false;
                            if (this.whoAmI == Main.myPlayer && (double)Main.projectile[index1].ai[0] == 0.0)
                            {
                                Main.projectile[index1].ai[0] = 1f;
                                float num4 = -10f;
                                if (Main.projectile[index1].wet && (double)Main.projectile[index1].velocity.Y > (double)num4)
                                    Main.projectile[index1].velocity.Y = num4;
                                Main.projectile[index1].netUpdate2 = true;
                                if ((double)Main.projectile[index1].ai[1] < 0.0 && (double)Main.projectile[index1].localAI[1] != 0.0)
                                {
                                    bool flag2 = false;
                                    int num5 = 0;
                                    for (int index2 = 0; index2 < 58; ++index2)
                                    {
                                        if (this.inventory[index2].stack > 0 && this.inventory[index2].bait > 0)
                                        {
                                            bool flag3 = false;
                                            int maxValue = 1 + this.inventory[index2].bait / 5;
                                            if (maxValue < 1)
                                                maxValue = 1;
                                            if (this.accTackleBox)
                                                ++maxValue;
                                            if (Main.rand.Next(maxValue) == 0)
                                                flag3 = true;
                                            if ((double)Main.projectile[index1].localAI[1] < 0.0)
                                                flag3 = true;
                                            if ((double)Main.projectile[index1].localAI[1] > 0.0)
                                            {
                                                Item obj = new Item();
                                                obj.SetDefaults((int)Main.projectile[index1].localAI[1], false);
                                                if (obj.rare < 0)
                                                    flag3 = false;
                                            }
                                            if (flag3)
                                            {
                                                num5 = this.inventory[index2].itemId;
                                                --this.inventory[index2].stack;
                                                if (this.inventory[index2].stack <= 0)
                                                    this.inventory[index2].SetDefaults(0, false);
                                            }
                                            flag2 = true;
                                            break;
                                        }
                                    }
                                    if (flag2)
                                    {
                                        if (num5 == 2673)
                                        {
                                            if (Main.netMode != 1)
                                                NPC.SpawnOnPlayer(this.whoAmI, 370);
                                            else
                                                NetMessage.SendData(61, -1, -1, "", this.whoAmI, 370f, 0.0f, 0.0f, 0, 0, 0);
                                            Main.projectile[index1].ai[0] = 2f;
                                        }
                                        else if (Main.rand.Next(7) == 0 && !this.accFishingLine)
                                            Main.projectile[index1].ai[0] = 2f;
                                        else
                                            Main.projectile[index1].ai[1] = Main.projectile[index1].localAI[1];
                                        Main.projectile[index1].netUpdate = true;
                                    }
                                }
                            }
                        }
                    }
                }
                if (sItem.shoot == 6 || sItem.shoot == 19 || (sItem.shoot == 33 || sItem.shoot == 52) || (sItem.shoot == 113 || sItem.shoot == 320 || (sItem.shoot == 333 || sItem.shoot == 383)) || sItem.shoot == 491)
                {
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer && Main.projectile[index].type == sItem.shoot)
                            canUse = false;
                    }
                }
                if (sItem.shoot == 106)
                {
                    int num4 = 0;
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer && Main.projectile[index].type == sItem.shoot)
                            ++num4;
                    }
                    if (num4 >= sItem.stack)
                        canUse = false;
                }
                if (sItem.shoot == 272)
                {
                    int num4 = 0;
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer && Main.projectile[index].type == sItem.shoot)
                            ++num4;
                    }
                    if (num4 >= sItem.stack)
                        canUse = false;
                }
                if (sItem.shoot == 13 || sItem.shoot == 32 || sItem.shoot >= 230 && sItem.shoot <= 235 || (sItem.shoot == 315 || sItem.shoot == 331 || sItem.shoot == 372))
                {
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer && (Main.projectile[index].type == sItem.shoot && (double)Main.projectile[index].ai[0] != 2.0))
                            canUse = false;
                    }
                }
                if (sItem.shoot == 332)
                {
                    int num4 = 0;
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == Main.myPlayer && (Main.projectile[index].type == sItem.shoot && (double)Main.projectile[index].ai[0] != 2.0))
                            ++num4;
                    }
                    if (num4 >= 3)
                        canUse = false;
                }
                if (sItem.potion && canUse)
                {
                    if (this.potionDelay <= 0)
                    {
                        if (sItem.itemId == 227)
                        {
                            this.potionDelay = this.restorationDelayTime;
                            this.AddBuff(21, this.potionDelay, true);
                        }
                        else
                        {
                            this.potionDelay = this.potionDelayTime;
                            this.AddBuff(21, this.potionDelay, true);
                        }
                    }
                    else
                        canUse = false;
                }
                if (sItem.mana > 0 && this.silence)
                    canUse = false;
                if (sItem.mana > 0 && canUse)
                {
                    bool flag2 = false;
                    if (sItem.itemId == 2795)
                        flag2 = true;
                    if (sItem.itemId != (int)sbyte.MaxValue || !this.spaceGun)
                    {
                        if (this.statMana >= (int)((double)sItem.mana * (double)this.manaCost))
                        {
                            if (!flag2)
                                this.statMana -= (int)((double)sItem.mana * (double)this.manaCost);
                        }
                        else if (this.manaFlower)
                        {
                            this.QuickMana();
                            if (this.statMana >= (int)((double)sItem.mana * (double)this.manaCost))
                            {
                                if (!flag2)
                                    this.statMana -= (int)((double)sItem.mana * (double)this.manaCost);
                            }
                            else
                                canUse = false;
                        }
                        else
                            canUse = false;
                    }
                    if (this.whoAmI == Main.myPlayer && sItem.buffType != 0 && canUse)
                        this.AddBuff(sItem.buffType, sItem.buffTime, true);
                }
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 603 && Main.cEd)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 669)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 115)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 3060)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 3062)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 3577)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 425)
                {
                    int type = Main.rand.Next(3);
                    if (type == 0)
                        type = 27;
                    if (type == 1)
                        type = 101;
                    if (type == 2)
                        type = 102;
                    for (int b = 0; b < 22; ++b)
                    {
                        if (this.buffType[b] == 27 || this.buffType[b] == 101 || this.buffType[b] == 102)
                        {
                            this.DelBuff(b);
                            --b;
                        }
                    }
                    this.AddBuff(type, 3600, true);
                }
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 753)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 994)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1169)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1170)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1171)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1172)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1180)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1181)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1182)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1183)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1242)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1157)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1309)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1311)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1837)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1312)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1798)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1799)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1802)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1810)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1927)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 1959)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 2364)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 2365)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 3043)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 2420)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 2535)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 2551)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 2584)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 2587)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 2621)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 2749)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 3249)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 3474)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && sItem.itemId == 3531)
                    this.AddBuff(sItem.buffType, 3600, true);
                if (this.whoAmI == Main.myPlayer && (double)this.gravDir == 1.0 && (sItem.mountType != -1 && this.mount.CanMount(sItem.mountType, this)))
                    this.mount.SetMount(sItem.mountType, this, false);
                if (sItem.itemId == 43 && Main.dayTime)
                    canUse = false;
                if (sItem.itemId == 544 && Main.dayTime)
                    canUse = false;
                if (sItem.itemId == 556 && Main.dayTime)
                    canUse = false;
                if (sItem.itemId == 557 && Main.dayTime)
                    canUse = false;
                if (sItem.itemId == 70 && !this.ZoneCorrupt)
                    canUse = false;
                if (sItem.itemId == 1133 && !this.ZoneJungle)
                    canUse = false;
                if (sItem.itemId == 1844 && (Main.dayTime || Main.pumpkinMoon || Main.snowMoon))
                    canUse = false;
                if (sItem.itemId == 1958 && (Main.dayTime || Main.pumpkinMoon || Main.snowMoon))
                    canUse = false;
                if (!this.SummonItemCheck())
                    canUse = false;
                if (sItem.shoot == 17 && canUse && i == Main.myPlayer)
                {
                    int i1 = (int)((double)Main.mouseX + (double)Main.screenPosition.X) / 16;
                    int j = (int)((double)Main.mouseY + (double)Main.screenPosition.Y) / 16;
                    if ((double)this.gravDir == -1.0)
                        j = (int)((double)Main.screenPosition.Y + (double)Main.screenHeight - (double)Main.mouseY) / 16;
                    Tile tile = Main.tile[i1, j];
                    if (tile.active() && ((int)tile.type == 0 || (int)tile.type == 2 || ((int)tile.type == 23 || (int)tile.type == 109) || (int)tile.type == 199))
                    {
                        WorldGen.KillTile(i1, j, false, false, true);
                        if (!Main.tile[i1, j].active())
                        {
                            if (Main.netMode == 1)
                                NetMessage.SendData(17, -1, -1, "", 4, (float)i1, (float)j, 0.0f, 0, 0, 0);
                        }
                        else
                            canUse = false;
                    }
                    else
                        canUse = false;
                }
                if (canUse)
                    canUse = this.HasAmmo(sItem, canUse);
                if (canUse)
                {
                    if (sItem.pick > 0 || sItem.axe > 0 || sItem.hammer > 0)
                        this.toolTime = 1;
                    if (this.grappling[0] > -1)
                    {
                        this.pulley = false;
                        this.pulleyDir = (byte)1;
                        if (this.controlRight)
                            this.direction = 1;
                        else if (this.controlLeft)
                            this.direction = -1;
                    }
                    this.channel = sItem.channel;
                    this.attackCD = 0;
                    this.ApplyAnimation(sItem);
                    if (sItem.useSound > 0)
                        Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, sItem.useSound);
                }
                if (canUse && this.whoAmI == Main.myPlayer && (sItem.shoot >= 0 && sItem.shoot < 651) && (ProjectileID.Sets.LightPet[sItem.shoot] || Main.projPet[sItem.shoot]))
                {
                    if (ProjectileID.Sets.MinionSacrificable[sItem.shoot])
                    {
                        List<int> list = new List<int>();
                        float num4 = 0.0f;
                        for (int index1 = 0; index1 < 1000; ++index1)
                        {
                            if (Main.projectile[index1].active && Main.projectile[index1].owner == i && Main.projectile[index1].minion)
                            {
                                int index2;
                                for (index2 = 0; index2 < list.Count; ++index2)
                                {
                                    if ((double)Main.projectile[list[index2]].minionSlots > (double)Main.projectile[index1].minionSlots)
                                    {
                                        list.Insert(index2, index1);
                                        break;
                                    }
                                }
                                if (index2 == list.Count)
                                    list.Add(index1);
                                num4 += Main.projectile[index1].minionSlots;
                            }
                        }
                        float num5 = (float)ItemID.Sets.StaffMinionSlotsRequired[sItem.itemId];
                        float num6 = 0.0f;
                        int num7 = 388;
                        int index3 = -1;
                        for (int index1 = 0; index1 < list.Count; ++index1)
                        {
                            int num8 = Main.projectile[list[index1]].type;
                            if (num8 == 626)
                            {
                                list.RemoveAt(index1);
                                --index1;
                            }
                            if (num8 == 627)
                            {
                                if (Main.projectile[(int)Main.projectile[list[index1]].localAI[1]].type == 628)
                                    index3 = list[index1];
                                list.RemoveAt(index1);
                                --index1;
                            }
                        }
                        if (index3 != -1)
                        {
                            list.Add(index3);
                            list.Add((int)Main.projectile[index3].ai[0]);
                        }
                        for (int index1 = 0; index1 < list.Count && (double)num4 - (double)num6 > (double)this.maxMinions - (double)num5; ++index1)
                        {
                            int num8 = Main.projectile[list[index1]].type;
                            if (num8 != num7 && num8 != 625 && num8 != 628)
                            {
                                if (num8 == 388 && num7 == 387)
                                    num7 = 388;
                                if (num8 == 387 && num7 == 388)
                                    num7 = 387;
                                num6 += Main.projectile[list[index1]].minionSlots;
                                if (num8 == 626 || num8 == 627)
                                {
                                    Projectile projectile1 = Main.projectile[(int)Main.projectile[list[index1]].ai[0]];
                                    if (projectile1.type != 625)
                                        projectile1.localAI[1] = Main.projectile[list[index1]].localAI[1];
                                    Projectile projectile2 = Main.projectile[(int)Main.projectile[list[index1]].localAI[1]];
                                    projectile2.ai[0] = Main.projectile[list[index1]].ai[0];
                                    projectile2.ai[1] = 1f;
                                    projectile2.netUpdate = true;
                                }
                                Main.projectile[list[index1]].Kill();
                            }
                        }
                        list.Clear();
                        if ((double)num4 + (double)num5 >= 9.0)
                            AchievementsHelper.HandleSpecialEvent(this, 6);
                    }
                    else
                    {
                        for (int index = 0; index < 1000; ++index)
                        {
                            if (Main.projectile[index].active && Main.projectile[index].owner == i && Main.projectile[index].type == sItem.shoot)
                                Main.projectile[index].Kill();
                            if (sItem.shoot == 72)
                            {
                                if (Main.projectile[index].active && Main.projectile[index].owner == i && Main.projectile[index].type == 86)
                                    Main.projectile[index].Kill();
                                if (Main.projectile[index].active && Main.projectile[index].owner == i && Main.projectile[index].type == 87)
                                    Main.projectile[index].Kill();
                            }
                        }
                    }
                }
            }
            if (!this.controlUseItem)
            {
                int num4 = this.channel ? 1 : 0;
                this.channel = false;
            }
            if (this.itemAnimation > 0)
            {
                this.itemAnimationMax = !sItem.melee ? sItem.useAnimation : (int)((double)sItem.useAnimation * (double)this.meleeSpeed);
                if (sItem.mana > 0 && !flag1 && (sItem.itemId != (int)sbyte.MaxValue || !this.spaceGun))
                    this.manaRegenDelay = (int)this.maxRegenDelay;
                if (Main.dedServ)
                {
                    this.itemHeight = sItem.height;
                    this.itemWidth = sItem.width;
                }
                else
                {
                    this.itemHeight = Main.itemTexture[sItem.itemId].Height;
                    this.itemWidth = Main.itemTexture[sItem.itemId].Width;
                }
                --this.itemAnimation;
                if (!Main.dedServ)
                {
                    if (sItem.useStyle == 1)
                    {
                        if (sItem.itemId > -1 && Item.claw[sItem.itemId])
                        {
                            if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
                            {
                                float num4 = 10f;
                                this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 + ((double)Main.itemTexture[sItem.itemId].Width * 0.5 - (double)num4) * (double)this.direction);
                                this.itemLocation.Y = this.position.Y + 26f + num2;
                            }
                            else if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.666)
                            {
                                float num4 = 8f;
                                this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 + ((double)Main.itemTexture[sItem.itemId].Width * 0.5 - (double)num4) * (double)this.direction);
                                this.itemLocation.Y = this.position.Y + 24f + num2;
                            }
                            else
                            {
                                float num4 = 6f;
                                this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 - ((double)Main.itemTexture[sItem.itemId].Width * 0.5 - (double)num4) * (double)this.direction);
                                this.itemLocation.Y = this.position.Y + 20f + num2;
                            }
                            this.itemRotation = (float)(((double)this.itemAnimation / (double)this.itemAnimationMax - 0.5) * (double)-this.direction * 3.5 - (double)this.direction * 0.300000011920929);
                        }
                        else
                        {
                            if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
                            {
                                float num4 = 10f;
                                if (Main.itemTexture[sItem.itemId].Width > 32)
                                    num4 = 14f;
                                if (Main.itemTexture[sItem.itemId].Width >= 52)
                                    num4 = 24f;
                                if (Main.itemTexture[sItem.itemId].Width >= 64)
                                    num4 = 28f;
                                if (Main.itemTexture[sItem.itemId].Width >= 92)
                                    num4 = 38f;
                                if (sItem.itemId == 2330 || sItem.itemId == 2320 || sItem.itemId == 2341)
                                    num4 += 8f;
                                this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 + ((double)Main.itemTexture[sItem.itemId].Width * 0.5 - (double)num4) * (double)this.direction);
                                this.itemLocation.Y = this.position.Y + 24f + num2;
                            }
                            else if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.666)
                            {
                                float num4 = 10f;
                                if (Main.itemTexture[sItem.itemId].Width > 32)
                                    num4 = 18f;
                                if (Main.itemTexture[sItem.itemId].Width >= 52)
                                    num4 = 24f;
                                if (Main.itemTexture[sItem.itemId].Width >= 64)
                                    num4 = 28f;
                                if (Main.itemTexture[sItem.itemId].Width >= 92)
                                    num4 = 38f;
                                if (sItem.itemId == 2330 || sItem.itemId == 2320 || sItem.itemId == 2341)
                                    num4 += 4f;
                                this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 + ((double)Main.itemTexture[sItem.itemId].Width * 0.5 - (double)num4) * (double)this.direction);
                                float num5 = 10f;
                                if (Main.itemTexture[sItem.itemId].Height > 32)
                                    num5 = 8f;
                                if (Main.itemTexture[sItem.itemId].Height > 52)
                                    num5 = 12f;
                                if (Main.itemTexture[sItem.itemId].Height > 64)
                                    num5 = 14f;
                                if (sItem.itemId == 2330 || sItem.itemId == 2320 || sItem.itemId == 2341)
                                    num5 += 4f;
                                this.itemLocation.Y = this.position.Y + num5 + num2;
                            }
                            else
                            {
                                float num4 = 6f;
                                if (Main.itemTexture[sItem.itemId].Width > 32)
                                    num4 = 14f;
                                if (Main.itemTexture[sItem.itemId].Width >= 48)
                                    num4 = 18f;
                                if (Main.itemTexture[sItem.itemId].Width >= 52)
                                    num4 = 24f;
                                if (Main.itemTexture[sItem.itemId].Width >= 64)
                                    num4 = 28f;
                                if (Main.itemTexture[sItem.itemId].Width >= 92)
                                    num4 = 38f;
                                if (sItem.itemId == 2330 || sItem.itemId == 2320 || sItem.itemId == 2341)
                                    num4 += 4f;
                                this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 - ((double)Main.itemTexture[sItem.itemId].Width * 0.5 - (double)num4) * (double)this.direction);
                                float num5 = 10f;
                                if (Main.itemTexture[sItem.itemId].Height > 32)
                                    num5 = 10f;
                                if (Main.itemTexture[sItem.itemId].Height > 52)
                                    num5 = 12f;
                                if (Main.itemTexture[sItem.itemId].Height > 64)
                                    num5 = 14f;
                                if (sItem.itemId == 2330 || sItem.itemId == 2320 || sItem.itemId == 2341)
                                    num5 += 4f;
                                this.itemLocation.Y = this.position.Y + num5 + num2;
                            }
                            this.itemRotation = (float)(((double)this.itemAnimation / (double)this.itemAnimationMax - 0.5) * (double)-this.direction * 3.5 - (double)this.direction * 0.300000011920929);
                        }
                        if ((double)this.gravDir == -1.0)
                        {
                            this.itemRotation = -this.itemRotation;
                            this.itemLocation.Y = (float)((double)this.position.Y + (double)this.height + ((double)this.position.Y - (double)this.itemLocation.Y));
                        }
                    }
                    else if (sItem.useStyle == 2)
                    {
                        this.itemRotation = (float)((double)this.itemAnimation / (double)this.itemAnimationMax * (double)this.direction * 2.0 + -1.39999997615814 * (double)this.direction);
                        if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.5)
                        {
                            this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 + ((double)Main.itemTexture[sItem.itemId].Width * 0.5 - 9.0 - (double)this.itemRotation * 12.0 * (double)this.direction) * (double)this.direction);
                            this.itemLocation.Y = (float)((double)this.position.Y + 38.0 + (double)this.itemRotation * (double)this.direction * 4.0) + num2;
                        }
                        else
                        {
                            this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 + ((double)Main.itemTexture[sItem.itemId].Width * 0.5 - 9.0 - (double)this.itemRotation * 16.0 * (double)this.direction) * (double)this.direction);
                            this.itemLocation.Y = (float)((double)this.position.Y + 38.0 + (double)this.itemRotation * (double)this.direction) + num2;
                        }
                        if ((double)this.gravDir == -1.0)
                        {
                            this.itemRotation = -this.itemRotation;
                            this.itemLocation.Y = (float)((double)this.position.Y + (double)this.height + ((double)this.position.Y - (double)this.itemLocation.Y));
                        }
                    }
                    else if (sItem.useStyle == 3)
                    {
                        if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.666)
                        {
                            this.itemLocation.X = -1000f;
                            this.itemLocation.Y = -1000f;
                            this.itemRotation = -1.3f * (float)this.direction;
                        }
                        else
                        {
                            this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 + ((double)Main.itemTexture[sItem.itemId].Width * 0.5 - 4.0) * (double)this.direction);
                            this.itemLocation.Y = this.position.Y + 24f + num2;
                            float num4 = (float)((double)this.itemAnimation / (double)this.itemAnimationMax * (double)Main.itemTexture[sItem.itemId].Width * (double)this.direction * (double)sItem.scale * 1.20000004768372) - (float)(10 * this.direction);
                            if ((double)num4 > -4.0 && this.direction == -1)
                                num4 = -8f;
                            if ((double)num4 < 4.0 && this.direction == 1)
                                num4 = 8f;
                            this.itemLocation.X -= num4;
                            this.itemRotation = 0.8f * (float)this.direction;
                        }
                        if ((double)this.gravDir == -1.0)
                        {
                            this.itemRotation = -this.itemRotation;
                            this.itemLocation.Y = (float)((double)this.position.Y + (double)this.height + ((double)this.position.Y - (double)this.itemLocation.Y));
                        }
                    }
                    else if (sItem.useStyle == 4)
                    {
                        this.itemRotation = 0.0f;
                        this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 + ((double)Main.itemTexture[sItem.itemId].Width * 0.5 - 9.0 - (double)this.itemRotation * 14.0 * (double)this.direction - 4.0) * (double)this.direction);
                        this.itemLocation.Y = (float)((double)this.position.Y + (double)Main.itemTexture[sItem.itemId].Height * 0.5 + 4.0) + num2;
                        if ((double)this.gravDir == -1.0)
                        {
                            this.itemRotation = -this.itemRotation;
                            this.itemLocation.Y = (float)((double)this.position.Y + (double)this.height + ((double)this.position.Y - (double)this.itemLocation.Y));
                        }
                    }
                    else if (sItem.useStyle == 5)
                    {
                        if (Item.staff[sItem.itemId])
                        {
                            float num4 = 6f;
                            if (sItem.itemId == 3476)
                                num4 = 14f;
                            this.itemLocation = this.MountedCenter;
                            this.itemLocation += Utils.ToRotationVector2(this.itemRotation) * num4 * (float)this.direction;
                        }
                        else
                        {
                            this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 - (double)Main.itemTexture[sItem.itemId].Width * 0.5) - (float)(this.direction * 2);
                            this.itemLocation.Y = this.MountedCenter.Y - (float)Main.itemTexture[sItem.itemId].Height * 0.5f;
                        }
                    }
                }
            }
            else if (sItem.holdStyle == 1 && !this.pulley)
            {
                if (Main.dedServ)
                    this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 + 20.0 * (double)this.direction);
                else if (sItem.itemId == 930)
                {
                    this.itemLocation.X = (float)((double)this.position.X + (double)(this.width / 2) * 0.5 - 12.0) - (float)(2 * this.direction);
                    float x = this.position.X + (float)(this.width / 2) + (float)(38 * this.direction);
                    if (this.direction == 1)
                        x -= 10f;
                    float y = this.MountedCenter.Y - 4f * this.gravDir;
                    if ((double)this.gravDir == -1.0)
                        y -= 8f;
                    this.RotateRelativePoint(ref x, ref y);
                    int Type = 0;
                    for (int index = 54; index < 58; ++index)
                    {
                        if (this.inventory[index].stack > 0 && this.inventory[index].ammo == 931)
                        {
                            Type = this.inventory[index].itemId;
                            break;
                        }
                    }
                    if (Type == 0)
                    {
                        for (int index = 0; index < 54; ++index)
                        {
                            if (this.inventory[index].stack > 0 && this.inventory[index].ammo == 931)
                            {
                                Type = this.inventory[index].itemId;
                                break;
                            }
                        }
                    }
                    if (Type == 931)
                        Type = (int)sbyte.MaxValue;
                    else if (Type == 1614)
                        Type = 187;
                    if (Type > 0)
                    {
                        int index = Dust.NewDust(new Vector2(x, y + this.gfxOffY), 6, 6, Type, 0.0f, 0.0f, 100, new Color(), 1.6f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity.Y -= 4f * this.gravDir;
                    }
                }
                else if (sItem.itemId == 968)
                {
                    this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(8 * this.direction);
                    if (this.whoAmI == Main.myPlayer)
                    {
                        int index1 = (int)((double)this.itemLocation.X + (double)Main.itemTexture[sItem.itemId].Width * 0.800000011920929 * (double)this.direction) / 16;
                        int index2 = (int)((double)this.itemLocation.Y + (double)num2 + (double)(Main.itemTexture[sItem.itemId].Height / 2)) / 16;
                        if (Main.tile[index1, index2] == null)
                            Main.tile[index1, index2] = new Tile();
                        if (Main.tile[index1, index2].active() && (int)Main.tile[index1, index2].type == 215 && (int)Main.tile[index1, index2].frameY < 54)
                        {
                            ++this.miscTimer;
                            if (Main.rand.Next(5) == 0)
                                ++this.miscTimer;
                            if (this.miscTimer > 900)
                            {
                                this.miscTimer = 0;
                                sItem.SetDefaults(969, false);
                                if (this.selectedItem == 58)
                                    Main.mouseItem.SetDefaults(969, false);
                                for (int index3 = 0; index3 < 58; ++index3)
                                {
                                    if (this.inventory[index3].itemId == sItem.itemId && index3 != this.selectedItem && this.inventory[index3].stack < this.inventory[index3].maxStack)
                                    {
                                        Main.PlaySound(7, -1, -1, 1);
                                        ++this.inventory[index3].stack;
                                        sItem.SetDefaults(0, false);
                                        if (this.selectedItem == 58)
                                            Main.mouseItem.SetDefaults(0, false);
                                    }
                                }
                            }
                        }
                        else
                            this.miscTimer = 0;
                    }
                }
                else if (sItem.itemId == 856)
                    this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(4 * this.direction);
                else if (sItem.fishingPole > 0)
                {
                    this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 + (double)Main.itemTexture[sItem.itemId].Width * 0.180000007152557 * (double)this.direction);
                }
                else
                {
                    this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 + ((double)Main.itemTexture[sItem.itemId].Width * 0.5 + 2.0) * (double)this.direction);
                    if (sItem.itemId == 282 || sItem.itemId == 286 || sItem.itemId == 3112)
                    {
                        this.itemLocation.X -= (float)(this.direction * 2);
                        this.itemLocation.Y += 4f;
                    }
                    else if (sItem.itemId == 3002)
                    {
                        this.itemLocation.X -= (float)(4 * this.direction);
                        this.itemLocation.Y += 2f;
                    }
                }
                this.itemLocation.Y = this.position.Y + 24f + num2;
                if (sItem.itemId == 856)
                    this.itemLocation.Y = this.position.Y + 34f + num2;
                if (sItem.itemId == 930)
                    this.itemLocation.Y = this.position.Y + 9f + num2;
                if (sItem.fishingPole > 0)
                    this.itemLocation.Y += 4f;
                else if (sItem.itemId == 3476)
                {
                    this.itemLocation.X = this.Center.X + (float)(14 * this.direction);
                    this.itemLocation.Y = this.MountedCenter.Y;
                }
                this.itemRotation = 0.0f;
                if ((double)this.gravDir == -1.0)
                {
                    this.itemRotation = -this.itemRotation;
                    this.itemLocation.Y = (float)((double)this.position.Y + (double)this.height + ((double)this.position.Y - (double)this.itemLocation.Y)) + num2;
                    if (sItem.itemId == 930)
                        this.itemLocation.Y -= 24f;
                }
            }
            else if (sItem.holdStyle == 2 && !this.pulley)
            {
                if (sItem.itemId == 946)
                {
                    this.itemRotation = 0.0f;
                    this.itemLocation.X = this.position.X + (float)this.width * 0.5f - (float)(16 * this.direction);
                    this.itemLocation.Y = this.position.Y + 22f + num2;
                    this.fallStart = (int)((double)this.position.Y / 16.0);
                    if ((double)this.gravDir == -1.0)
                    {
                        this.itemRotation = -this.itemRotation;
                        this.itemLocation.Y = (float)((double)this.position.Y + (double)this.height + ((double)this.position.Y - (double)this.itemLocation.Y));
                        if ((double)this.velocity.Y < -2.0)
                            this.velocity.Y = -2f;
                    }
                    else if ((double)this.velocity.Y > 2.0)
                        this.velocity.Y = 2f;
                }
                else
                {
                    this.itemLocation.X = this.position.X + (float)this.width * 0.5f + (float)(6 * this.direction);
                    this.itemLocation.Y = this.position.Y + 16f + num2;
                    this.itemRotation = 0.79f * (float)-this.direction;
                    if ((double)this.gravDir == -1.0)
                    {
                        this.itemRotation = -this.itemRotation;
                        this.itemLocation.Y = (float)((double)this.position.Y + (double)this.height + ((double)this.position.Y - (double)this.itemLocation.Y));
                    }
                }
            }
            else if (sItem.holdStyle == 3 && !this.pulley && !Main.dedServ)
            {
                this.itemLocation.X = (float)((double)this.position.X + (double)this.width * 0.5 - (double)Main.itemTexture[sItem.itemId].Width * 0.5) - (float)(this.direction * 2);
                this.itemLocation.Y = this.MountedCenter.Y - (float)Main.itemTexture[sItem.itemId].Height * 0.5f;
                this.itemRotation = 0.0f;
            }
            if (((sItem.itemId == 974 || sItem.itemId == 8 || (sItem.itemId == 1245 || sItem.itemId == 2274) || (sItem.itemId == 3004 || sItem.itemId == 3045 || sItem.itemId == 3114) || sItem.itemId >= 427 && sItem.itemId <= 433) && !this.wet || (sItem.itemId == 523 || sItem.itemId == 1333)) && !this.pulley)
            {
                float R = 1f;
                float G = 0.95f;
                float B = 0.8f;
                int num4 = 0;
                if (sItem.itemId == 523)
                    num4 = 8;
                else if (sItem.itemId == 974)
                    num4 = 9;
                else if (sItem.itemId == 1245)
                    num4 = 10;
                else if (sItem.itemId == 1333)
                    num4 = 11;
                else if (sItem.itemId == 2274)
                    num4 = 12;
                else if (sItem.itemId == 3004)
                    num4 = 13;
                else if (sItem.itemId == 3045)
                    num4 = 14;
                else if (sItem.itemId == 3114)
                    num4 = 15;
                else if (sItem.itemId >= 427)
                    num4 = sItem.itemId - 426;
                if (num4 == 1)
                {
                    R = 0.0f;
                    G = 0.1f;
                    B = 1.3f;
                }
                else if (num4 == 2)
                {
                    R = 1f;
                    G = 0.1f;
                    B = 0.1f;
                }
                else if (num4 == 3)
                {
                    R = 0.0f;
                    G = 1f;
                    B = 0.1f;
                }
                else if (num4 == 4)
                {
                    R = 0.9f;
                    G = 0.0f;
                    B = 0.9f;
                }
                else if (num4 == 5)
                {
                    R = 1.3f;
                    G = 1.3f;
                    B = 1.3f;
                }
                else if (num4 == 6)
                {
                    R = 0.9f;
                    G = 0.9f;
                    B = 0.0f;
                }
                else if (num4 == 7)
                {
                    R = (float)(0.5 * (double)Main.demonTorch + 1.0 * (1.0 - (double)Main.demonTorch));
                    G = 0.3f;
                    B = (float)(1.0 * (double)Main.demonTorch + 0.5 * (1.0 - (double)Main.demonTorch));
                }
                else if (num4 == 8)
                {
                    B = 0.7f;
                    R = 0.85f;
                    G = 1f;
                }
                else if (num4 == 9)
                {
                    B = 1f;
                    R = 0.7f;
                    G = 0.85f;
                }
                else if (num4 == 10)
                {
                    B = 0.0f;
                    R = 1f;
                    G = 0.5f;
                }
                else if (num4 == 11)
                {
                    B = 0.8f;
                    R = 1.25f;
                    G = 1.25f;
                }
                else if (num4 == 12)
                {
                    R *= 0.75f;
                    G *= 1.35f;
                    B *= 1.5f;
                }
                else if (num4 == 13)
                {
                    R = 0.95f;
                    G = 0.65f;
                    B = 1.3f;
                }
                else if (num4 == 14)
                {
                    R = (float)Main.DiscoR / (float)byte.MaxValue;
                    G = (float)Main.DiscoG / (float)byte.MaxValue;
                    B = (float)Main.DiscoB / (float)byte.MaxValue;
                }
                else if (num4 == 15)
                {
                    R = 1f;
                    G = 0.0f;
                    B = 1f;
                }
                int num5 = num4;
                int Type;
                switch (num5)
                {
                    case 0:
                        Type = 6;
                        break;
                    case 8:
                        Type = 75;
                        break;
                    case 9:
                        Type = 135;
                        break;
                    case 10:
                        Type = 158;
                        break;
                    case 11:
                        Type = 169;
                        break;
                    case 12:
                        Type = 156;
                        break;
                    case 13:
                        Type = 234;
                        break;
                    case 14:
                        Type = 66;
                        break;
                    case 15:
                        Type = 242;
                        break;
                    default:
                        Type = 58 + num5;
                        break;
                }
                int maxValue = 30;
                if (this.itemAnimation > 0)
                    maxValue = 7;
                if (this.direction == -1)
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        int index = Dust.NewDust(new Vector2(this.itemLocation.X - 16f, this.itemLocation.Y - 14f * this.gravDir), 4, 4, Type, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                        if (Type == 66)
                        {
                            Main.dust[index].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
                            Main.dust[index].noGravity = true;
                        }
                    }
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 12f + this.velocity.X, this.itemLocation.Y - 14f + this.velocity.Y), true), R, G, B);
                }
                else
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        int index = Dust.NewDust(new Vector2(this.itemLocation.X + 6f, this.itemLocation.Y - 14f * this.gravDir), 4, 4, Type, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                        if (Type == 66)
                        {
                            Main.dust[index].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
                            Main.dust[index].noGravity = true;
                        }
                    }
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 12f + this.velocity.X, this.itemLocation.Y - 14f + this.velocity.Y), true), R, G, B);
                }
            }
            if ((sItem.itemId == 105 || sItem.itemId == 713) && (!this.wet && !this.pulley))
            {
                int maxValue = 20;
                if (this.itemAnimation > 0)
                    maxValue = 7;
                if (this.direction == -1)
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        int index = Dust.NewDust(new Vector2(this.itemLocation.X - 12f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true), 1f, 0.95f, 0.8f);
                }
                else
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        int index = Dust.NewDust(new Vector2(this.itemLocation.X + 4f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true), 1f, 0.95f, 0.8f);
                }
            }
            else if (sItem.itemId == 148 && !this.wet)
            {
                int maxValue = 10;
                if (this.itemAnimation > 0)
                    maxValue = 7;
                if (this.direction == -1)
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        int index = Dust.NewDust(new Vector2(this.itemLocation.X - 12f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 172, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true), 0.0f, 0.5f, 1f);
                }
                else
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        int index = Dust.NewDust(new Vector2(this.itemLocation.X + 4f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 172, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true), 0.0f, 0.5f, 1f);
                }
            }
            else if (sItem.itemId == 3117 && !this.wet)
            {
                this.itemLocation.X -= (float)(this.direction * 4);
                int maxValue = 10;
                if (this.itemAnimation > 0)
                    maxValue = 7;
                if (this.direction == -1)
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        int index = Dust.NewDust(new Vector2(this.itemLocation.X - 10f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 242, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true), 0.9f, 0.1f, 0.75f);
                }
                else
                {
                    if (Main.rand.Next(maxValue) == 0)
                    {
                        int index = Dust.NewDust(new Vector2(this.itemLocation.X + 6f, this.itemLocation.Y - 20f * this.gravDir), 4, 4, 242, 0.0f, 0.0f, 100, new Color(), 1f);
                        if (Main.rand.Next(3) != 0)
                            Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.3f;
                        Main.dust[index].velocity.Y -= 1.5f;
                        Main.dust[index].position = this.RotatedRelativePoint(Main.dust[index].position, true);
                    }
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true), 0.9f, 0.1f, 0.75f);
                }
            }
            if (sItem.itemId == 282 && !this.pulley)
            {
                if (this.direction == -1)
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true), 0.7f, 1f, 0.8f);
                else
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true), 0.7f, 1f, 0.8f);
            }
            if (sItem.itemId == 3002 && !this.pulley)
            {
                float R = 1.05f;
                float G = 0.95f;
                float B = 0.55f;
                if (this.direction == -1)
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true), R, G, B);
                else
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true), R, G, B);
                ++this.spelunkerTimer;
                if ((int)this.spelunkerTimer >= 10)
                {
                    this.spelunkerTimer = (byte)0;
                    int num4 = 30;
                    int num5 = (int)this.Center.X / 16;
                    int num6 = (int)this.Center.Y / 16;
                    for (int index1 = num5 - num4; index1 <= num5 + num4; ++index1)
                    {
                        for (int index2 = num6 - num4; index2 <= num6 + num4; ++index2)
                        {
                            if (Main.rand.Next(4) == 0 && ((double)new Vector2((float)(num5 - index1), (float)(num6 - index2)).Length() < (double)num4 && index1 > 0 && (index1 < Main.maxTilesX - 1 && index2 > 0) && (index2 < Main.maxTilesY - 1 && Main.tile[index1, index2] != null && Main.tile[index1, index2].active())))
                            {
                                bool flag2 = false;
                                if ((int)Main.tile[index1, index2].type == 185 && (int)Main.tile[index1, index2].frameY == 18)
                                {
                                    if ((int)Main.tile[index1, index2].frameX >= 576 && (int)Main.tile[index1, index2].frameX <= 882)
                                        flag2 = true;
                                }
                                else if ((int)Main.tile[index1, index2].type == 186 && (int)Main.tile[index1, index2].frameX >= 864 && (int)Main.tile[index1, index2].frameX <= 1170)
                                    flag2 = true;
                                if (flag2 || Main.tileSpelunker[(int)Main.tile[index1, index2].type] || Main.tileAlch[(int)Main.tile[index1, index2].type] && (int)Main.tile[index1, index2].type != 82)
                                {
                                    int index3 = Dust.NewDust(new Vector2((float)(index1 * 16), (float)(index2 * 16)), 16, 16, 204, 0.0f, 0.0f, 150, new Color(), 0.3f);
                                    Main.dust[index3].fadeIn = 0.75f;
                                    Main.dust[index3].velocity *= 0.1f;
                                    Main.dust[index3].noLight = true;
                                }
                            }
                        }
                    }
                }
            }
            if (sItem.itemId == 286 && !this.pulley)
            {
                if (this.direction == -1)
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true), 0.7f, 0.8f, 1f);
                else
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true), 0.7f, 0.8f, 1f);
            }
            if (sItem.itemId == 3112 && !this.pulley)
            {
                if (this.direction == -1)
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X - 16f + this.velocity.X, this.itemLocation.Y - 14f), true), 1f, 0.6f, 0.85f);
                else
                    Lighting.AddLight(this.RotatedRelativePoint(new Vector2(this.itemLocation.X + 6f + this.velocity.X, this.itemLocation.Y - 14f), true), 1f, 0.6f, 0.85f);
            }
            this.releaseUseItem = !this.controlUseItem;
            if (this.itemTime > 0)
            {
                --this.itemTime;
                if (this.itemTime == 0 && this.whoAmI == Main.myPlayer)
                {
                    switch (sItem.itemId)
                    {
                        case 65:
                        case 676:
                        case 723:
                        case 724:
                        case 989:
                        case 1226:
                        case 1227:
                            Main.PlaySound(25, -1, -1, 1);
                            for (int index1 = 0; index1 < 5; ++index1)
                            {
                                int index2 = Dust.NewDust(this.position, this.width, this.height, 45, 0.0f, 0.0f, (int)byte.MaxValue, new Color(), (float)Main.rand.Next(20, 26) * 0.1f);
                                Main.dust[index2].noLight = true;
                                Main.dust[index2].noGravity = true;
                                Main.dust[index2].velocity *= 0.5f;
                            }
                            break;
                    }
                }
            }
            if (i == Main.myPlayer)
            {
                bool flag2 = true;
                switch (sItem.itemId)
                {
                    case 65:
                    case 676:
                    case 723:
                    case 724:
                    case 757:
                    case 674:
                    case 675:
                    case 989:
                    case 1226:
                    case 1227:
                        if (this.itemAnimation != this.itemAnimationMax - 1)
                        {
                            flag2 = false;
                            break;
                        }
                        break;
                }
                if (sItem.shoot > 0 && this.itemAnimation > 0 && (this.itemTime == 0 && flag2))
                {
                    int shoot = sItem.shoot;
                    float speed = sItem.shootSpeed;
                    if (this.inventory[this.selectedItem].thrown && (double)speed < 16.0)
                    {
                        speed *= this.thrownVelocity;
                        if ((double)speed > 16.0)
                            speed = 16f;
                    }
                    if (sItem.melee && shoot != 25 && (shoot != 26 && shoot != 35))
                        speed /= this.meleeSpeed;
                    bool canShoot = false;
                    int Damage = num3;
                    float KnockBack = sItem.knockBack;
                    if (shoot == 13 || shoot == 32 || shoot == 315 || (shoot >= 230 && shoot <= 235 || shoot == 331))
                    {
                        this.grappling[0] = -1;
                        this.grapCount = 0;
                        for (int index = 0; index < 1000; ++index)
                        {
                            if (Main.projectile[index].active && Main.projectile[index].owner == i)
                            {
                                if (Main.projectile[index].type == 13)
                                    Main.projectile[index].Kill();
                                if (Main.projectile[index].type == 331)
                                    Main.projectile[index].Kill();
                                if (Main.projectile[index].type == 315)
                                    Main.projectile[index].Kill();
                                if (Main.projectile[index].type >= 230 && Main.projectile[index].type <= 235)
                                    Main.projectile[index].Kill();
                            }
                        }
                    }
                    if (sItem.useAmmo > 0)
                        this.PickAmmo(sItem, ref shoot, ref speed, ref canShoot, ref Damage, ref KnockBack, ItemID.Sets.gunProj[sItem.itemId]);
                    else
                        canShoot = true;
                    if (sItem.itemId == 3475 || sItem.itemId == 3540)
                    {
                        KnockBack = sItem.knockBack;
                        Damage = num3;
                        speed = sItem.shootSpeed;
                    }
                    if (sItem.itemId == 71)
                        canShoot = false;
                    if (sItem.itemId == 72)
                        canShoot = false;
                    if (sItem.itemId == 73)
                        canShoot = false;
                    if (sItem.itemId == 74)
                        canShoot = false;
                    if (sItem.itemId == 1254 && shoot == 14)
                        shoot = 242;
                    if (sItem.itemId == 1255 && shoot == 14)
                        shoot = 242;
                    if (sItem.itemId == 1265 && shoot == 14)
                        shoot = 242;
                    if (sItem.itemId == 3542)
                    {
                        if (Main.rand.Next(100) < 20)
                        {
                            ++shoot;
                            Damage *= 3;
                        }
                        else
                            --speed;
                    }
                    if (shoot == 73)
                    {
                        for (int index = 0; index < 1000; ++index)
                        {
                            if (Main.projectile[index].active && Main.projectile[index].owner == i)
                            {
                                if (Main.projectile[index].type == 73)
                                    shoot = 74;
                                if (shoot == 74 && Main.projectile[index].type == 74)
                                    canShoot = false;
                            }
                        }
                    }
                    if (canShoot)
                    {
                        if (sItem.summon)
                        {
                            KnockBack += this.minionKB;
                            Damage = (int)((double)Damage * (double)this.minionDamage);
                        }
                        if (shoot == 228)
                            KnockBack = 0.0f;
                        if (sItem.melee && this.kbGlove)
                            KnockBack *= 2f;
                        if (this.kbBuff)
                            KnockBack *= 1.5f;
                        if (sItem.ranged && this.shroomiteStealth)
                            KnockBack *= (float)(1.0 + (1.0 - (double)this.stealth) * 0.5);
                        if (sItem.ranged && this.setVortex)
                            KnockBack *= (float)(1.0 + (1.0 - (double)this.stealth) * 0.5);
                        if (shoot == 1 && sItem.itemId == 120)
                            shoot = 2;
                        if (sItem.itemId == 682)
                            shoot = 117;
                        if (sItem.itemId == 725)
                            shoot = 120;
                        if (sItem.itemId == 2796)
                            shoot = 442;
                        if (sItem.itemId == 2223)
                            shoot = 357;
                        this.itemTime = sItem.useTime;
                        Vector2 vector2_1 = this.RotatedRelativePoint(this.MountedCenter, true);
                        Vector2 vector2_2 = Utils.RotatedBy(Vector2.UnitX, (double)this.fullRotation, new Vector2());
                        Vector2 vector2_3 = Main.MouseWorld - vector2_1;
                        if (vector2_3 != Vector2.Zero)
                            vector2_3.Normalize();
                        if ((double)Vector2.Dot(vector2_2, vector2_3) > 0.0)
                            this.ChangeDir(1);
                        else
                            this.ChangeDir(-1);
                        if (sItem.itemId == 3094 || sItem.itemId == 3378 || sItem.itemId == 3543)
                            vector2_1.Y = this.position.Y + (float)(this.height / 3);
                        if (shoot == 9)
                        {
                            vector2_1 = new Vector2((float)((double)this.position.X + (double)this.width * 0.5 + (double)(Main.rand.Next(201) * -this.direction) + ((double)Main.mouseX + (double)Main.screenPosition.X - (double)this.position.X)), this.MountedCenter.Y - 600f);
                            KnockBack = 0.0f;
                            Damage *= 2;
                        }
                        if (sItem.itemId == 986 || sItem.itemId == 281)
                        {
                            vector2_1.X += (float)(6 * this.direction);
                            vector2_1.Y -= 6f * this.gravDir;
                        }
                        if (sItem.itemId == 3007)
                        {
                            vector2_1.X -= (float)(4 * this.direction);
                            vector2_1.Y -= 1f * this.gravDir;
                        }
                        float f1 = (float)Main.mouseX + Main.screenPosition.X - vector2_1.X;
                        float f2 = (float)Main.mouseY + Main.screenPosition.Y - vector2_1.Y;
                        if ((double)this.gravDir == -1.0)
                            f2 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector2_1.Y;
                        float num4 = (float)Math.Sqrt((double)f1 * (double)f1 + (double)f2 * (double)f2);
                        float num5 = num4;
                        float num6;
                        if (float.IsNaN(f1) && float.IsNaN(f2) || (double)f1 == 0.0 && (double)f2 == 0.0)
                        {
                            f1 = (float)this.direction;
                            f2 = 0.0f;
                            num6 = speed;
                        }
                        else
                            num6 = speed / num4;
                        if (sItem.itemId == 1929 || sItem.itemId == 2270)
                        {
                            f1 += (float)Main.rand.Next(-50, 51) * 0.03f / num6;
                            f2 += (float)Main.rand.Next(-50, 51) * 0.03f / num6;
                        }
                        float num7 = f1 * num6;
                        float num8 = f2 * num6;
                        if (sItem.itemId == 757)
                            Damage = (int)((double)Damage * 1.25);
                        if (shoot == 250)
                        {
                            for (int index = 0; index < 1000; ++index)
                            {
                                if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI && (Main.projectile[index].type == 250 || Main.projectile[index].type == 251))
                                    Main.projectile[index].Kill();
                            }
                        }
                        if (shoot == 12)
                        {
                            vector2_1.X += num7 * 3f;
                            vector2_1.Y += num8 * 3f;
                        }
                        if (sItem.useStyle == 5)
                        {
                            if (sItem.itemId == 3029)
                            {
                                Vector2 vector2_4 = new Vector2(num7, num8);
                                vector2_4.X = (float)Main.mouseX + Main.screenPosition.X - vector2_1.X;
                                vector2_4.Y = (float)((double)Main.mouseY + (double)Main.screenPosition.Y - (double)vector2_1.Y - 1000.0);
                                this.itemRotation = (float)Math.Atan2((double)vector2_4.Y * (double)this.direction, (double)vector2_4.X * (double)this.direction);
                                NetMessage.SendData(13, -1, -1, "", this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                                NetMessage.SendData(41, -1, -1, "", this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                            }
                            else
                            {
                                this.itemRotation = (float)Math.Atan2((double)num8 * (double)this.direction, (double)num7 * (double)this.direction) - this.fullRotation;
                                NetMessage.SendData(13, -1, -1, "", this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                                NetMessage.SendData(41, -1, -1, "", this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                            }
                        }
                        if (shoot == 17)
                        {
                            vector2_1.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            if ((double)this.gravDir == -1.0)
                                vector2_1.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
                        }
                        if (shoot == 76)
                        {
                            shoot += Main.rand.Next(3);
                            float num9 = num5 / (float)(Main.screenHeight / 2);
                            if ((double)num9 > 1.0)
                                num9 = 1f;
                            float num10 = num7 + (float)Main.rand.Next(-40, 41) * 0.01f;
                            float num11 = num8 + (float)Main.rand.Next(-40, 41) * 0.01f;
                            float SpeedX = num10 * (num9 + 0.25f);
                            float SpeedY = num11 * (num9 + 0.25f);
                            int number = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            Main.projectile[number].ai[1] = 1f;
                            float num12 = (float)((double)num9 * 2.0 - 1.0);
                            if ((double)num12 < -1.0)
                                num12 = -1f;
                            if ((double)num12 > 1.0)
                                num12 = 1f;
                            Main.projectile[number].ai[0] = num12;
                            NetMessage.SendData(27, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        }
                        else if (sItem.itemId == 3029)
                        {
                            int num9 = 3;
                            if (Main.rand.Next(3) == 0)
                                ++num9;
                            for (int index1 = 0; index1 < num9; ++index1)
                            {
                                vector2_1 = new Vector2((float)((double)this.position.X + (double)this.width * 0.5 + (double)(Main.rand.Next(201) * -this.direction) + ((double)Main.mouseX + (double)Main.screenPosition.X - (double)this.position.X)), this.MountedCenter.Y - 600f);
                                vector2_1.X = (float)(((double)vector2_1.X * 10.0 + (double)this.Center.X) / 11.0) + (float)Main.rand.Next(-100, 101);
                                vector2_1.Y -= (float)(150 * index1);
                                float num10 = (float)Main.mouseX + Main.screenPosition.X - vector2_1.X;
                                float num11 = (float)Main.mouseY + Main.screenPosition.Y - vector2_1.Y;
                                if ((double)num11 < 0.0)
                                    num11 *= -1f;
                                if ((double)num11 < 20.0)
                                    num11 = 20f;
                                float num12 = (float)Math.Sqrt((double)num10 * (double)num10 + (double)num11 * (double)num11);
                                float num13 = speed / num12;
                                float num14 = num10 * num13;
                                float num15 = num11 * num13;
                                float num16 = num14 + (float)Main.rand.Next(-40, 41) * 0.03f;
                                float SpeedY = num15 + (float)Main.rand.Next(-40, 41) * 0.03f;
                                float SpeedX = num16 * ((float)Main.rand.Next(75, 150) * 0.01f);
                                vector2_1.X += (float)Main.rand.Next(-50, 51);
                                int index2 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                                Main.projectile[index2].noDropItem = true;
                            }
                        }
                        else if (sItem.itemId == 98 || sItem.itemId == 533)
                        {
                            float SpeedX = num7 + (float)Main.rand.Next(-40, 41) * 0.01f;
                            float SpeedY = num8 + (float)Main.rand.Next(-40, 41) * 0.01f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 1319)
                        {
                            float SpeedX = num7 + (float)Main.rand.Next(-40, 41) * 0.02f;
                            float SpeedY = num8 + (float)Main.rand.Next(-40, 41) * 0.02f;
                            int index = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            Main.projectile[index].ranged = true;
                            Main.projectile[index].thrown = false;
                        }
                        else if (sItem.itemId == 3107)
                        {
                            float SpeedX = num7 + (float)Main.rand.Next(-40, 41) * 0.02f;
                            float SpeedY = num8 + (float)Main.rand.Next(-40, 41) * 0.02f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 3053)
                        {
                            Vector2 vector2_4 = new Vector2(num7, num8);
                            vector2_4.Normalize();
                            Vector2 vector2_5 = new Vector2((float)Main.rand.Next(-100, 101), (float)Main.rand.Next(-100, 101));
                            vector2_5.Normalize();
                            Vector2 vector2_6 = vector2_4 * 4f + vector2_5;
                            vector2_6.Normalize();
                            Vector2 vector2_7 = vector2_6 * sItem.shootSpeed;
                            float ai1 = (float)Main.rand.Next(10, 80) * (1.0f / 1000.0f);
                            if (Main.rand.Next(2) == 0)
                                ai1 *= -1f;
                            float ai0 = (float)Main.rand.Next(10, 80) * (1.0f / 1000.0f);
                            if (Main.rand.Next(2) == 0)
                                ai0 *= -1f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_7.X, vector2_7.Y, shoot, Damage, KnockBack, i, ai0, ai1);
                        }
                        else if (sItem.itemId == 3019)
                        {
                            Vector2 vector2_4 = new Vector2(num7, num8);
                            float num9 = vector2_4.Length();
                            vector2_4.X += (float)((double)Main.rand.Next(-100, 101) * 0.00999999977648258 * (double)num9 * 0.150000005960464);
                            vector2_4.Y += (float)((double)Main.rand.Next(-100, 101) * 0.00999999977648258 * (double)num9 * 0.150000005960464);
                            float num10 = num7 + (float)Main.rand.Next(-40, 41) * 0.03f;
                            float num11 = num8 + (float)Main.rand.Next(-40, 41) * 0.03f;
                            vector2_4.Normalize();
                            Vector2 vector2_5 = vector2_4 * num9;
                            Vector2 vector2_6 = new Vector2(num10 * ((float)Main.rand.Next(50, 150) * 0.01f), num11 * ((float)Main.rand.Next(50, 150) * 0.01f));
                            vector2_6.X += (float)Main.rand.Next(-100, 101) * 0.025f;
                            vector2_6.Y += (float)Main.rand.Next(-100, 101) * 0.025f;
                            vector2_6.Normalize();
                            vector2_6 *= num9;
                            float SpeedX = vector2_6.X;
                            float SpeedY = vector2_6.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, vector2_5.X, vector2_5.Y);
                        }
                        else if (sItem.itemId == 2797)
                        {
                            Vector2 vector2_4 = Vector2.Normalize(new Vector2(num7, num8)) * 40f * sItem.scale;
                            if (Collision.CanHit(vector2_1, 0, 0, vector2_1 + vector2_4, 0, 0))
                                vector2_1 += vector2_4;
                            float ai0 = Utils.ToRotation(new Vector2(num7, num8));
                            float num9 = 2.094395f;
                            int num10 = Main.rand.Next(4, 5);
                            if (Main.rand.Next(4) == 0)
                                ++num10;
                            for (int index1 = 0; index1 < num10; ++index1)
                            {
                                float num11 = (float)(Main.rand.NextDouble() * 0.200000002980232 + 0.0500000007450581);
                                Vector2 vector2_5 = Utils.RotatedBy(new Vector2(num7, num8), (double)num9 * Main.rand.NextDouble() - (double)num9 / 2.0, new Vector2()) * num11;
                                int index2 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_5.X, vector2_5.Y, 444, Damage, KnockBack, i, ai0, 0.0f);
                                Main.projectile[index2].localAI[0] = (float)shoot;
                                Main.projectile[index2].localAI[1] = speed;
                            }
                        }
                        else if (sItem.itemId == 2270)
                        {
                            float SpeedX = num7 + (float)Main.rand.Next(-40, 41) * 0.05f;
                            float SpeedY = num8 + (float)Main.rand.Next(-40, 41) * 0.05f;
                            if (Main.rand.Next(3) == 0)
                            {
                                SpeedX *= (float)(1.0 + (double)Main.rand.Next(-30, 31) * 0.0199999995529652);
                                SpeedY *= (float)(1.0 + (double)Main.rand.Next(-30, 31) * 0.0199999995529652);
                            }
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 1930)
                        {
                            int num9 = 2 + Main.rand.Next(3);
                            for (int index = 0; index < num9; ++index)
                            {
                                float num10 = num7;
                                float num11 = num8;
                                float num12 = 0.025f * (float)index;
                                float num13 = num10 + (float)Main.rand.Next(-35, 36) * num12;
                                float num14 = num11 + (float)Main.rand.Next(-35, 36) * num12;
                                float num15 = (float)Math.Sqrt((double)num13 * (double)num13 + (double)num14 * (double)num14);
                                float num16 = speed / num15;
                                float SpeedX = num13 * num16;
                                float SpeedY = num14 * num16;
                                Projectile.NewProjectile(vector2_1.X + (float)((double)num7 * (double)(num9 - index) * 1.75), vector2_1.Y + (float)((double)num8 * (double)(num9 - index) * 1.75), SpeedX, SpeedY, shoot, Damage, KnockBack, i, (float)Main.rand.Next(0, 10 * (index + 1)), 0.0f);
                            }
                        }
                        else if (sItem.itemId == 1931)
                        {
                            int num9 = 2;
                            for (int index = 0; index < num9; ++index)
                            {
                                vector2_1 = new Vector2((float)((double)this.position.X + (double)this.width * 0.5 + (double)(Main.rand.Next(201) * -this.direction) + ((double)Main.mouseX + (double)Main.screenPosition.X - (double)this.position.X)), this.MountedCenter.Y - 600f);
                                vector2_1.X = (float)(((double)vector2_1.X + (double)this.Center.X) / 2.0) + (float)Main.rand.Next(-200, 201);
                                vector2_1.Y -= (float)(100 * index);
                                float num10 = (float)Main.mouseX + Main.screenPosition.X - vector2_1.X;
                                float num11 = (float)Main.mouseY + Main.screenPosition.Y - vector2_1.Y;
                                if ((double)num11 < 0.0)
                                    num11 *= -1f;
                                if ((double)num11 < 20.0)
                                    num11 = 20f;
                                float num12 = (float)Math.Sqrt((double)num10 * (double)num10 + (double)num11 * (double)num11);
                                float num13 = speed / num12;
                                float num14 = num10 * num13;
                                float num15 = num11 * num13;
                                float SpeedX = num14 + (float)Main.rand.Next(-40, 41) * 0.02f;
                                float SpeedY = num15 + (float)Main.rand.Next(-40, 41) * 0.02f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, (float)Main.rand.Next(5));
                            }
                        }
                        else if (sItem.itemId == 2750)
                        {
                            int num9 = 1;
                            for (int index = 0; index < num9; ++index)
                            {
                                vector2_1 = new Vector2((float)((double)this.position.X + (double)this.width * 0.5 + (double)(Main.rand.Next(201) * -this.direction) + ((double)Main.mouseX + (double)Main.screenPosition.X - (double)this.position.X)), this.MountedCenter.Y - 600f);
                                vector2_1.X = (float)(((double)vector2_1.X + (double)this.Center.X) / 2.0) + (float)Main.rand.Next(-200, 201);
                                vector2_1.Y -= (float)(100 * index);
                                float num10 = (float)((double)Main.mouseX + (double)Main.screenPosition.X - (double)vector2_1.X + (double)Main.rand.Next(-40, 41) * 0.0299999993294477);
                                float num11 = (float)Main.mouseY + Main.screenPosition.Y - vector2_1.Y;
                                if ((double)num11 < 0.0)
                                    num11 *= -1f;
                                if ((double)num11 < 20.0)
                                    num11 = 20f;
                                float num12 = (float)Math.Sqrt((double)num10 * (double)num10 + (double)num11 * (double)num11);
                                float num13 = speed / num12;
                                float num14 = num10 * num13;
                                float num15 = num11 * num13;
                                float num16 = num14;
                                float num17 = num15 + (float)Main.rand.Next(-40, 41) * 0.02f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num16 * 0.75f, num17 * 0.75f, shoot + Main.rand.Next(3), Damage, KnockBack, i, 0.0f, (float)(0.5 + Main.rand.NextDouble() * 0.300000011920929));
                            }
                        }
                        else if (sItem.itemId == 3570)
                        {
                            int num9 = 3;
                            for (int index = 0; index < num9; ++index)
                            {
                                vector2_1 = new Vector2((float)((double)this.position.X + (double)this.width * 0.5 + (double)(Main.rand.Next(201) * -this.direction) + ((double)Main.mouseX + (double)Main.screenPosition.X - (double)this.position.X)), this.MountedCenter.Y - 600f);
                                vector2_1.X = (float)(((double)vector2_1.X + (double)this.Center.X) / 2.0) + (float)Main.rand.Next(-200, 201);
                                vector2_1.Y -= (float)(100 * index);
                                float num10 = (float)Main.mouseX + Main.screenPosition.X - vector2_1.X;
                                float num11 = (float)Main.mouseY + Main.screenPosition.Y - vector2_1.Y;
                                float ai1 = num11 + vector2_1.Y;
                                if ((double)num11 < 0.0)
                                    num11 *= -1f;
                                if ((double)num11 < 20.0)
                                    num11 = 20f;
                                float num12 = (float)Math.Sqrt((double)num10 * (double)num10 + (double)num11 * (double)num11);
                                float num13 = speed / num12;
                                Vector2 vector2_4 = new Vector2(num10 * num13, num11 * num13) / 2f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_4.X, vector2_4.Y, shoot, Damage, KnockBack, i, 0.0f, ai1);
                            }
                        }
                        else if (sItem.itemId == 3065)
                        {
                            Vector2 vector2_4 = Main.screenPosition + new Vector2((float)Main.mouseX, (float)Main.mouseY);
                            float ai1 = vector2_4.Y;
                            if ((double)ai1 > (double)this.Center.Y - 200.0)
                                ai1 = this.Center.Y - 200f;
                            for (int index = 0; index < 3; ++index)
                            {
                                vector2_1 = this.Center + new Vector2((float)(-Main.rand.Next(0, 401) * this.direction), -600f);
                                vector2_1.Y -= (float)(100 * index);
                                Vector2 vector2_5 = vector2_4 - vector2_1;
                                if ((double)vector2_5.Y < 0.0)
                                    vector2_5.Y *= -1f;
                                if ((double)vector2_5.Y < 20.0)
                                    vector2_5.Y = 20f;
                                vector2_5.Normalize();
                                vector2_5 *= speed;
                                float num9 = vector2_5.X;
                                float num10 = vector2_5.Y;
                                float SpeedX = num9;
                                float SpeedY = num10 + (float)Main.rand.Next(-40, 41) * 0.02f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage * 2, KnockBack, i, 0.0f, ai1);
                            }
                        }
                        else if (sItem.itemId == 2624)
                        {
                            float num9 = 0.3141593f;
                            int num10 = 5;
                            Vector2 spinningpoint = new Vector2(num7, num8);
                            spinningpoint.Normalize();
                            spinningpoint *= 40f;
                            bool flag3 = Collision.CanHit(vector2_1, 0, 0, vector2_1 + spinningpoint, 0, 0);
                            for (int index1 = 0; index1 < num10; ++index1)
                            {
                                float num11 = (float)index1 - (float)(((double)num10 - 1.0) / 2.0);
                                Vector2 vector2_4 = Utils.RotatedBy(spinningpoint, (double)num9 * (double)num11, new Vector2());
                                if (!flag3)
                                    vector2_4 -= spinningpoint;
                                int index2 = Projectile.NewProjectile(vector2_1.X + vector2_4.X, vector2_1.Y + vector2_4.Y, num7, num8, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                                Main.projectile[index2].noDropItem = true;
                            }
                        }
                        else if (sItem.itemId == 1929)
                        {
                            float SpeedX = num7 + (float)Main.rand.Next(-40, 41) * 0.03f;
                            float SpeedY = num8 + (float)Main.rand.Next(-40, 41) * 0.03f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 1553)
                        {
                            float SpeedX = num7 + (float)Main.rand.Next(-40, 41) * 0.005f;
                            float SpeedY = num8 + (float)Main.rand.Next(-40, 41) * 0.005f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 518)
                        {
                            float num9 = num7;
                            float num10 = num8;
                            float SpeedX = num9 + (float)Main.rand.Next(-40, 41) * 0.04f;
                            float SpeedY = num10 + (float)Main.rand.Next(-40, 41) * 0.04f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 1265)
                        {
                            float num9 = num7;
                            float num10 = num8;
                            float SpeedX = num9 + (float)Main.rand.Next(-30, 31) * 0.03f;
                            float SpeedY = num10 + (float)Main.rand.Next(-30, 31) * 0.03f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 534)
                        {
                            int num9 = Main.rand.Next(4, 6);
                            for (int index = 0; index < num9; ++index)
                            {
                                float num10 = num7;
                                float num11 = num8;
                                float SpeedX = num10 + (float)Main.rand.Next(-40, 41) * 0.05f;
                                float SpeedY = num11 + (float)Main.rand.Next(-40, 41) * 0.05f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.itemId == 2188)
                        {
                            int num9 = 4;
                            if (Main.rand.Next(3) == 0)
                                ++num9;
                            if (Main.rand.Next(4) == 0)
                                ++num9;
                            if (Main.rand.Next(5) == 0)
                                ++num9;
                            for (int index = 0; index < num9; ++index)
                            {
                                float num10 = num7;
                                float num11 = num8;
                                float num12 = 0.05f * (float)index;
                                float num13 = num10 + (float)Main.rand.Next(-35, 36) * num12;
                                float num14 = num11 + (float)Main.rand.Next(-35, 36) * num12;
                                float num15 = (float)Math.Sqrt((double)num13 * (double)num13 + (double)num14 * (double)num14);
                                float num16 = speed / num15;
                                float SpeedX = num13 * num16;
                                float SpeedY = num14 * num16;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.itemId == 1308)
                        {
                            int num9 = 3;
                            if (Main.rand.Next(3) == 0)
                                ++num9;
                            for (int index = 0; index < num9; ++index)
                            {
                                float num10 = num7;
                                float num11 = num8;
                                float num12 = 0.05f * (float)index;
                                float num13 = num10 + (float)Main.rand.Next(-35, 36) * num12;
                                float num14 = num11 + (float)Main.rand.Next(-35, 36) * num12;
                                float num15 = (float)Math.Sqrt((double)num13 * (double)num13 + (double)num14 * (double)num14);
                                float num16 = speed / num15;
                                float SpeedX = num13 * num16;
                                float SpeedY = num14 * num16;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.itemId == 1258)
                        {
                            float num9 = num7;
                            float num10 = num8;
                            float SpeedX = num9 + (float)Main.rand.Next(-40, 41) * 0.01f;
                            float SpeedY = num10 + (float)Main.rand.Next(-40, 41) * 0.01f;
                            vector2_1.X += (float)Main.rand.Next(-40, 41) * 0.05f;
                            vector2_1.Y += (float)Main.rand.Next(-45, 36) * 0.05f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 964)
                        {
                            int num9 = Main.rand.Next(3, 5);
                            for (int index = 0; index < num9; ++index)
                            {
                                float num10 = num7;
                                float num11 = num8;
                                float SpeedX = num10 + (float)Main.rand.Next(-35, 36) * 0.04f;
                                float SpeedY = num11 + (float)Main.rand.Next(-35, 36) * 0.04f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.itemId == 1569)
                        {
                            int num9 = 4;
                            if (Main.rand.Next(2) == 0)
                                ++num9;
                            if (Main.rand.Next(4) == 0)
                                ++num9;
                            if (Main.rand.Next(8) == 0)
                                ++num9;
                            if (Main.rand.Next(16) == 0)
                                ++num9;
                            for (int index = 0; index < num9; ++index)
                            {
                                float num10 = num7;
                                float num11 = num8;
                                float num12 = 0.05f * (float)index;
                                float num13 = num10 + (float)Main.rand.Next(-35, 36) * num12;
                                float num14 = num11 + (float)Main.rand.Next(-35, 36) * num12;
                                float num15 = (float)Math.Sqrt((double)num13 * (double)num13 + (double)num14 * (double)num14);
                                float num16 = speed / num15;
                                float SpeedX = num13 * num16;
                                float SpeedY = num14 * num16;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.itemId == 1572 || sItem.itemId == 2366 || (sItem.itemId == 3571 || sItem.itemId == 3569))
                        {
                            int num9 = sItem.shoot;
                            for (int index = 0; index < 1000; ++index)
                            {
                                if (Main.projectile[index].owner == this.whoAmI && Main.projectile[index].type == num9)
                                    Main.projectile[index].Kill();
                            }
                            bool flag3 = sItem.itemId == 3571 || sItem.itemId == 3569;
                            int i1 = (int)((double)Main.mouseX + (double)Main.screenPosition.X) / 16;
                            int j = (int)((double)Main.mouseY + (double)Main.screenPosition.Y) / 16;
                            if ((double)this.gravDir == -1.0)
                                j = (int)((double)Main.screenPosition.Y + (double)Main.screenHeight - (double)Main.mouseY) / 16;
                            if (!flag3)
                            {
                                while (j < Main.maxTilesY - 10 && Main.tile[i1, j] != null && (!WorldGen.SolidTile2(i1, j) && Main.tile[i1 - 1, j] != null) && (!WorldGen.SolidTile2(i1 - 1, j) && Main.tile[i1 + 1, j] != null && !WorldGen.SolidTile2(i1 + 1, j)))
                                    ++j;
                                --j;
                            }
                            Projectile.NewProjectile((float)Main.mouseX + Main.screenPosition.X, (float)(j * 16 - 24), 0.0f, 15f, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 1244 || sItem.itemId == 1256)
                        {
                            int index = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num7, num8, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            Main.projectile[index].ai[0] = (float)Main.mouseX + Main.screenPosition.X;
                            Main.projectile[index].ai[1] = (float)Main.mouseY + Main.screenPosition.Y;
                        }
                        else if (sItem.itemId == 1229)
                        {
                            int num9 = Main.rand.Next(2, 4);
                            if (Main.rand.Next(5) == 0)
                                ++num9;
                            for (int index1 = 0; index1 < num9; ++index1)
                            {
                                float SpeedX = num7;
                                float SpeedY = num8;
                                if (index1 > 0)
                                {
                                    SpeedX += (float)Main.rand.Next(-35, 36) * 0.04f;
                                    SpeedY += (float)Main.rand.Next(-35, 36) * 0.04f;
                                }
                                if (index1 > 1)
                                {
                                    SpeedX += (float)Main.rand.Next(-35, 36) * 0.04f;
                                    SpeedY += (float)Main.rand.Next(-35, 36) * 0.04f;
                                }
                                if (index1 > 2)
                                {
                                    SpeedX += (float)Main.rand.Next(-35, 36) * 0.04f;
                                    SpeedY += (float)Main.rand.Next(-35, 36) * 0.04f;
                                }
                                int index2 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                                Main.projectile[index2].noDropItem = true;
                            }
                        }
                        else if (sItem.itemId == 1121)
                        {
                            int num9 = Main.rand.Next(1, 4);
                            if (Main.rand.Next(6) == 0)
                                ++num9;
                            if (Main.rand.Next(6) == 0)
                                ++num9;
                            if (this.strongBees && Main.rand.Next(3) == 0)
                                ++num9;
                            for (int index1 = 0; index1 < num9; ++index1)
                            {
                                float num10 = num7;
                                float num11 = num8;
                                float SpeedX = num10 + (float)Main.rand.Next(-35, 36) * 0.02f;
                                float SpeedY = num11 + (float)Main.rand.Next(-35, 36) * 0.02f;
                                int index2 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, this.beeType(), this.beeDamage(Damage), this.beeKB(KnockBack), i, 0.0f, 0.0f);
                                Main.projectile[index2].magic = true;
                            }
                        }
                        else if (sItem.itemId == 1155)
                        {
                            int num9 = Main.rand.Next(2, 5);
                            if (Main.rand.Next(5) == 0)
                                ++num9;
                            if (Main.rand.Next(5) == 0)
                                ++num9;
                            for (int index = 0; index < num9; ++index)
                            {
                                float num10 = num7;
                                float num11 = num8;
                                float SpeedX = num10 + (float)Main.rand.Next(-35, 36) * 0.02f;
                                float SpeedY = num11 + (float)Main.rand.Next(-35, 36) * 0.02f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.itemId == 1801)
                        {
                            int num9 = Main.rand.Next(1, 4);
                            for (int index = 0; index < num9; ++index)
                            {
                                float num10 = num7;
                                float num11 = num8;
                                float SpeedX = num10 + (float)Main.rand.Next(-35, 36) * 0.05f;
                                float SpeedY = num11 + (float)Main.rand.Next(-35, 36) * 0.05f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.itemId == 679)
                        {
                            for (int index = 0; index < 6; ++index)
                            {
                                float num9 = num7;
                                float num10 = num8;
                                float SpeedX = num9 + (float)Main.rand.Next(-40, 41) * 0.05f;
                                float SpeedY = num10 + (float)Main.rand.Next(-40, 41) * 0.05f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.itemId == 2623)
                        {
                            for (int index = 0; index < 3; ++index)
                            {
                                float num9 = num7;
                                float num10 = num8;
                                float SpeedX = num9 + (float)Main.rand.Next(-40, 41) * 0.1f;
                                float SpeedY = num10 + (float)Main.rand.Next(-40, 41) * 0.1f;
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            }
                        }
                        else if (sItem.itemId == 3210)
                        {
                            Vector2 vector2_4 = new Vector2(num7, num8);
                            vector2_4.X += (float)Main.rand.Next(-30, 31) * 0.04f;
                            vector2_4.Y += (float)Main.rand.Next(-30, 31) * 0.03f;
                            vector2_4.Normalize();
                            vector2_4 *= (float)Main.rand.Next(70, 91) * 0.1f;
                            vector2_4.X += (float)Main.rand.Next(-30, 31) * 0.04f;
                            vector2_4.Y += (float)Main.rand.Next(-30, 31) * 0.03f;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_4.X, vector2_4.Y, shoot, Damage, KnockBack, i, (float)Main.rand.Next(20), 0.0f);
                        }
                        else if (sItem.itemId == 434)
                        {
                            float SpeedX = num7;
                            float SpeedY = num8;
                            if (this.itemAnimation < 5)
                            {
                                float num9 = SpeedX + (float)Main.rand.Next(-40, 41) * 0.01f;
                                float num10 = SpeedY + (float)Main.rand.Next(-40, 41) * 0.01f;
                                SpeedX = num9 * 1.1f;
                                SpeedY = num10 * 1.1f;
                            }
                            else if (this.itemAnimation < 10)
                            {
                                float num9 = SpeedX + (float)Main.rand.Next(-20, 21) * 0.01f;
                                float num10 = SpeedY + (float)Main.rand.Next(-20, 21) * 0.01f;
                                SpeedX = num9 * 1.05f;
                                SpeedY = num10 * 1.05f;
                            }
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 1157)
                        {
                            shoot = Main.rand.Next(191, 195);
                            float SpeedX = 0.0f;
                            float SpeedY = 0.0f;
                            vector2_1.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            int index = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            Main.projectile[index].localAI[0] = 30f;
                        }
                        else if (sItem.itemId == 1802)
                        {
                            float SpeedX = 0.0f;
                            float SpeedY = 0.0f;
                            vector2_1.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 2364 || sItem.itemId == 2365)
                        {
                            float SpeedX = 0.0f;
                            float SpeedY = 0.0f;
                            vector2_1.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 2535)
                        {
                            float x = 0.0f;
                            float y = 0.0f;
                            vector2_1.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            Vector2 spinningpoint = new Vector2(x, y);
                            spinningpoint = Utils.RotatedBy(spinningpoint, 1.57079637050629, new Vector2());
                            Projectile.NewProjectile(vector2_1.X + spinningpoint.X, vector2_1.Y + spinningpoint.Y, spinningpoint.X, spinningpoint.Y, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            spinningpoint = Utils.RotatedBy(spinningpoint, -3.14159274101257, new Vector2());
                            Projectile.NewProjectile(vector2_1.X + spinningpoint.X, vector2_1.Y + spinningpoint.Y, spinningpoint.X, spinningpoint.Y, shoot + 1, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 2551)
                        {
                            float SpeedX = 0.0f;
                            float SpeedY = 0.0f;
                            vector2_1.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot + Main.rand.Next(3), Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 2584)
                        {
                            float SpeedX = 0.0f;
                            float SpeedY = 0.0f;
                            vector2_1.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot + Main.rand.Next(3), Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 2621)
                        {
                            float SpeedX = 0.0f;
                            float SpeedY = 0.0f;
                            vector2_1.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 2749 || sItem.itemId == 3249 || sItem.itemId == 3474)
                        {
                            float SpeedX = 0.0f;
                            float SpeedY = 0.0f;
                            vector2_1.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 3531)
                        {
                            int num9 = -1;
                            int index1 = -1;
                            for (int index2 = 0; index2 < 1000; ++index2)
                            {
                                if (Main.projectile[index2].active && Main.projectile[index2].owner == Main.myPlayer)
                                {
                                    if (num9 == -1 && Main.projectile[index2].type == 625)
                                        num9 = index2;
                                    if (index1 == -1 && Main.projectile[index2].type == 628)
                                        index1 = index2;
                                    if (num9 != -1 && index1 != -1)
                                        break;
                                }
                            }
                            if (num9 == -1 && index1 == -1)
                            {
                                float SpeedX = 0.0f;
                                float SpeedY = 0.0f;
                                vector2_1.X = (float)Main.mouseX + Main.screenPosition.X;
                                vector2_1.Y = (float)Main.mouseY + Main.screenPosition.Y;
                                int num10 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                                int num11 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot + 1, Damage, KnockBack, i, (float)num10, 0.0f);
                                int index2 = num11;
                                int num12 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot + 2, Damage, KnockBack, i, (float)num11, 0.0f);
                                Main.projectile[index2].localAI[1] = (float)num12;
                                int index3 = num12;
                                int num13 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot + 3, Damage, KnockBack, i, (float)num12, 0.0f);
                                Main.projectile[index3].localAI[1] = (float)num13;
                            }
                            else if (num9 != -1 && index1 != -1)
                            {
                                int num10 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num7, num8, shoot + 1, Damage, KnockBack, i, Main.projectile[index1].ai[0], 0.0f);
                                int index2 = num10;
                                int index3 = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num7, num8, shoot + 2, Damage, KnockBack, i, (float)num10, 0.0f);
                                Main.projectile[index2].localAI[1] = (float)index3;
                                Main.projectile[index3].localAI[1] = (float)index1;
                                Main.projectile[index1].ai[0] = (float)index3;
                                Main.projectile[index1].netUpdate = true;
                                Main.projectile[index1].ai[1] = 1f;
                            }
                        }
                        else if (sItem.itemId == 1309)
                        {
                            float SpeedX = 0.0f;
                            float SpeedY = 0.0f;
                            vector2_1.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_1.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.shoot > 0 && (Main.projPet[sItem.shoot] || sItem.shoot == 72 || (sItem.shoot == 18 || sItem.shoot == 500) || sItem.shoot == 650) && !sItem.summon)
                        {
                            for (int index = 0; index < 1000; ++index)
                            {
                                if (Main.projectile[index].active && Main.projectile[index].owner == this.whoAmI)
                                {
                                    if (sItem.shoot == 72)
                                    {
                                        if (Main.projectile[index].type == 72 || Main.projectile[index].type == 86 || Main.projectile[index].type == 87)
                                            Main.projectile[index].Kill();
                                    }
                                    else if (sItem.shoot == Main.projectile[index].type)
                                        Main.projectile[index].Kill();
                                }
                            }
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num7, num8, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 3006)
                        {
                            Vector2 vector2_4;
                            vector2_4.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_4.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            while (Collision.CanHitLine(this.position, this.width, this.height, vector2_1, 1, 1))
                            {
                                vector2_1.X += num7;
                                vector2_1.Y += num8;
                                if ((double)(vector2_1 - vector2_4).Length() < 20.0 + (double)Math.Abs(num7) + (double)Math.Abs(num8))
                                {
                                    vector2_1 = vector2_4;
                                    break;
                                }
                            }
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, 0.0f, 0.0f, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 3014)
                        {
                            Vector2 vector2_4;
                            vector2_4.X = (float)Main.mouseX + Main.screenPosition.X;
                            vector2_4.Y = (float)Main.mouseY + Main.screenPosition.Y;
                            while (Collision.CanHitLine(this.position, this.width, this.height, vector2_1, 1, 1))
                            {
                                vector2_1.X += num7;
                                vector2_1.Y += num8;
                                if ((double)(vector2_1 - vector2_4).Length() < 20.0 + (double)Math.Abs(num7) + (double)Math.Abs(num8))
                                {
                                    vector2_1 = vector2_4;
                                    break;
                                }
                            }
                            bool flag3 = false;
                            int j1 = (int)vector2_1.Y / 16;
                            int i1 = (int)vector2_1.X / 16;
                            int num9 = j1;
                            while (j1 < Main.maxTilesY - 10 && j1 - num9 < 30 && !WorldGen.SolidTile(i1, j1))
                                ++j1;
                            if (!WorldGen.SolidTile(i1, j1))
                                flag3 = true;
                            float num10 = (float)(j1 * 16);
                            int j2 = num9;
                            while (j2 > 10 && num9 - j2 < 30 && !WorldGen.SolidTile(i1, j2))
                                --j2;
                            float num11 = (float)(j2 * 16 + 16);
                            float ai1 = num10 - num11;
                            int num12 = 10;
                            if ((double)ai1 > (double)(16 * num12))
                                ai1 = (float)(16 * num12);
                            float ai0 = num10 - ai1;
                            vector2_1.X = (float)((int)((double)vector2_1.X / 16.0) * 16);
                            if (!flag3)
                                Projectile.NewProjectile(vector2_1.X, vector2_1.Y, 0.0f, 0.0f, shoot, Damage, KnockBack, i, ai0, ai1);
                        }
                        else if (sItem.itemId == 3384)
                        {
                            int num9 = this.altFunctionUse == 2 ? 1 : 0;
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num7, num8, shoot, Damage, KnockBack, i, 0.0f, (float)num9);
                        }
                        else if (sItem.itemId == 3473)
                        {
                            float ai1 = (float)(((double)Utils.NextFloat(Main.rand) - 0.5) * 0.785398185253143);
                            Vector2 vector2_4 = new Vector2(num7, num8);
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_4.X, vector2_4.Y, shoot, Damage, KnockBack, i, 0.0f, ai1);
                        }
                        else if (sItem.itemId == 3542)
                        {
                            float num9 = (float)(((double)Utils.NextFloat(Main.rand) - 0.5) * 0.785398185253143);
                            for (int index = 0; index < 10 && !Collision.CanHit(vector2_1, 0, 0, vector2_1 + Utils.RotatedBy(new Vector2(num7, num8), (double)num9, new Vector2()) * 100f, 0, 0); ++index)
                                num9 = (float)(((double)Utils.NextFloat(Main.rand) - 0.5) * 0.785398185253143);
                            Vector2 vector2_4 = Utils.RotatedBy(new Vector2(num7, num8), (double)num9, new Vector2()) * (float)(0.850000023841858 + (double)Utils.NextFloat(Main.rand) * 0.300000011920929);
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_4.X, vector2_4.Y, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                        }
                        else if (sItem.itemId == 3475)
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num7, num8, 615, Damage, KnockBack, i, (float)(5 * Main.rand.Next(0, 20)), 0.0f);
                        else if (sItem.itemId == 3540)
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num7, num8, 630, Damage, KnockBack, i, 0.0f, 0.0f);
                        else if (sItem.itemId == 3546)
                        {
                            for (int index = 0; index < 2; ++index)
                            {
                                float num9 = num7;
                                float num10 = num8;
                                float num11 = num9 + (float)Main.rand.Next(-40, 41) * 0.05f;
                                float num12 = num10 + (float)Main.rand.Next(-40, 41) * 0.05f;
                                Vector2 vector2_4 = vector2_1 + Vector2.Normalize(Utils.RotatedBy(new Vector2(num11, num12), -1.57079637050629 * (double)this.direction, new Vector2())) * 6f;
                                Projectile.NewProjectile(vector2_4.X, vector2_4.Y, num11, num12, 167 + Main.rand.Next(4), Damage, KnockBack, i, 0.0f, 1f);
                            }
                        }
                        else if (sItem.itemId == 3350)
                        {
                            float num9 = num7;
                            float num10 = num8;
                            float num11 = num9 + (float)Main.rand.Next(-1, 2) * 0.5f;
                            float num12 = num10 + (float)Main.rand.Next(-1, 2) * 0.5f;
                            if (Collision.CanHitLine(this.Center, 0, 0, vector2_1 + new Vector2(num11, num12) * 2f, 0, 0))
                                vector2_1 += new Vector2(num11, num12);
                            Projectile.NewProjectile(vector2_1.X, vector2_1.Y - this.gravDir * 4f, num11, num12, shoot, Damage, KnockBack, i, 0.0f, (float)Main.rand.Next(12) / 6f);
                        }
                        else
                        {
                            int index = Projectile.NewProjectile(vector2_1.X, vector2_1.Y, num7, num8, shoot, Damage, KnockBack, i, 0.0f, 0.0f);
                            if (sItem.itemId == 726)
                                Main.projectile[index].magic = true;
                            if (sItem.itemId == 724 || sItem.itemId == 676)
                                Main.projectile[index].melee = true;
                            if (shoot == 80)
                            {
                                Main.projectile[index].ai[0] = (float)Player.tileTargetX;
                                Main.projectile[index].ai[1] = (float)Player.tileTargetY;
                            }
                            if (shoot == 442)
                            {
                                Main.projectile[index].ai[0] = (float)Player.tileTargetX;
                                Main.projectile[index].ai[1] = (float)Player.tileTargetY;
                            }
                            if ((this.thrownCost50 || this.thrownCost33) && this.inventory[this.selectedItem].thrown)
                                Main.projectile[index].noDropItem = true;
                            if (Main.projectile[index].aiStyle == 99)
                                AchievementsHelper.HandleSpecialEvent(this, 7);
                        }
                    }
                    else if (sItem.useStyle == 5)
                    {
                        this.itemRotation = 0.0f;
                        NetMessage.SendData(41, -1, -1, "", this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                }
                if (this.whoAmI == Main.myPlayer && (sItem.itemId == 509 || sItem.itemId == 510 || (sItem.itemId == 849 || sItem.itemId == 850) || sItem.itemId == 851) && ((double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)sItem.tileBoost - (double)this.blockRange <= (double)Player.tileTargetX && ((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)sItem.tileBoost - 1.0 + (double)this.blockRange >= (double)Player.tileTargetX && ((double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)sItem.tileBoost - (double)this.blockRange <= (double)Player.tileTargetY && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)sItem.tileBoost - 2.0 + (double)this.blockRange >= (double)Player.tileTargetY)))
                {
                    this.showItemIcon = true;
                    if (this.itemAnimation > 0 && this.itemTime == 0 && this.controlUseItem)
                    {
                        int i1 = Player.tileTargetX;
                        int j = Player.tileTargetY;

						var wireType = k_WireFlags.WIRE_NONE;
						if (sItem.itemId == 509)
							wireType = k_WireFlags.WIRE_RED;
						else if (sItem.itemId == 850)
							wireType = k_WireFlags.WIRE_GREEN;
						else if (sItem.itemId == 851)
							wireType = k_WireFlags.WIRE_BLUE;

                        if (wireType != k_WireFlags.WIRE_NONE)
                        {
                            int index1 = -1;
                            for (int index2 = 0; index2 < 58; ++index2)
                            {
                                if (this.inventory[index2].stack > 0 && this.inventory[index2].itemId == 530)
                                {
                                    index1 = index2;
                                    break;
                                }
                            }
                            if (index1 >= 0 && WorldGen.PlaceWire(i1, j, wireType))
                            {
                                --this.inventory[index1].stack;
                                if (this.inventory[index1].stack <= 0)
                                    this.inventory[index1].SetDefaults(0, false);
                                this.itemTime = sItem.useTime;
                                NetMessage.SendData(17, -1, -1, "", Tile.k_HACK_GetNetworkWirePlaceType(wireType), (float)Player.tileTargetX, (float)Player.tileTargetY, 0.0f, 0, 0, 0);
                            }
                        }
                        else if (sItem.itemId == 510)
                        {
							var flags = new k_WireFlags[] { k_WireFlags.WIRE_ACTUATOR, k_WireFlags.WIRE_BLUE, k_WireFlags.WIRE_GREEN, k_WireFlags.WIRE_RED };
							for (int flag = 0; flag < 4; ++flag)
							{
								if (WorldGen.KillWire(i1, j, flags[flag]))
								{
									this.itemTime = sItem.useTime;
									NetMessage.SendData(17, -1, -1, "", Tile.k_HACK_GetNetworkWireKillType(flags[flag]), (float)Player.tileTargetX, (float)Player.tileTargetY, 0.0f, 0, 0, 0);
									break;
								}
							}
                        }
                        else if (sItem.itemId == 849 && sItem.stack > 0 && WorldGen.PlaceWire(i1, j, k_WireFlags.WIRE_ACTUATOR))
                        {
                            this.itemTime = sItem.useTime;
                            NetMessage.SendData(17, -1, -1, "", 8, (float)Player.tileTargetX, (float)Player.tileTargetY, 0.0f, 0, 0, 0);
                            --sItem.stack;
                            if (sItem.stack <= 0)
                                sItem.SetDefaults(0, false);
                        }
                    }
                }
                if (this.itemAnimation > 0 && this.itemTime == 0 && (sItem.itemId == 507 || sItem.itemId == 508))
                {
                    this.itemTime = sItem.useTime;
                    Vector2 vector2 = new Vector2(this.position.X + (float)this.width * 0.5f, this.position.Y + (float)this.height * 0.5f);
                    float num4 = (float)Main.mouseX + Main.screenPosition.X - vector2.X;
                    float num5 = (float)Main.mouseY + Main.screenPosition.Y - vector2.Y;
                    float num6 = (float)Math.Sqrt((double)num4 * (double)num4 + (double)num5 * (double)num5) / (float)(Main.screenHeight / 2);
                    if ((double)num6 > 1.0)
                        num6 = 1f;
                    float number2 = (float)((double)num6 * 2.0 - 1.0);
                    if ((double)number2 < -1.0)
                        number2 = -1f;
                    if ((double)number2 > 1.0)
                        number2 = 1f;
                    Main.harpNote = number2;
                    int Style = 26;
                    if (sItem.itemId == 507)
                        Style = 35;
                    Main.PlaySound(2, (int)this.position.X, (int)this.position.Y, Style);
                    NetMessage.SendData(58, -1, -1, "", this.whoAmI, number2, 0.0f, 0.0f, 0, 0, 0);
                }
                if ((sItem.itemId >= 205 && sItem.itemId <= 207 || (sItem.itemId == 1128 || sItem.itemId == 3031) || sItem.itemId == 3032) && ((double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)sItem.tileBoost <= (double)Player.tileTargetX && ((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)sItem.tileBoost - 1.0 >= (double)Player.tileTargetX && ((double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)sItem.tileBoost <= (double)Player.tileTargetY && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)sItem.tileBoost - 2.0 >= (double)Player.tileTargetY)))
                {
                    this.showItemIcon = true;
                    if (this.itemTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
                    {
                        if (sItem.itemId == 205 || sItem.itemId == 3032 && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 0)
                        {
                            int num4 = (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType();
                            int num5 = 0;
                            for (int index1 = Player.tileTargetX - 1; index1 <= Player.tileTargetX + 1; ++index1)
                            {
                                for (int index2 = Player.tileTargetY - 1; index2 <= Player.tileTargetY + 1; ++index2)
                                {
                                    if ((int)Main.tile[index1, index2].liquidType() == num4)
                                        num5 += (int)Main.tile[index1, index2].liquid;
                                }
                            }
                            if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquid > 0 && (num5 > 100 || sItem.itemId == 3032))
                            {
                                int liquidType = (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType();
                                if (sItem.itemId != 3032)
                                {
                                    if (!Main.tile[Player.tileTargetX, Player.tileTargetY].lava())
                                    {
                                        if (Main.tile[Player.tileTargetX, Player.tileTargetY].honey())
                                        {
                                            --sItem.stack;
                                            this.PutItemInInventory(1128, this.selectedItem);
                                        }
                                        else
                                        {
                                            --sItem.stack;
                                            this.PutItemInInventory(206, this.selectedItem);
                                        }
                                    }
                                    else
                                    {
                                        --sItem.stack;
                                        this.PutItemInInventory(207, this.selectedItem);
                                    }
                                }
                                Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1);
                                this.itemTime = sItem.useTime;
                                int num6 = (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquid;
                                Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = (byte)0;
                                Main.tile[Player.tileTargetX, Player.tileTargetY].lava(false);
                                Main.tile[Player.tileTargetX, Player.tileTargetY].honey(false);
                                WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, false);
                                if (Main.netMode == 1)
                                    NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
                                else
                                    Liquid.AddWater(Player.tileTargetX, Player.tileTargetY);
                                for (int index1 = Player.tileTargetX - 1; index1 <= Player.tileTargetX + 1; ++index1)
                                {
                                    for (int index2 = Player.tileTargetY - 1; index2 <= Player.tileTargetY + 1; ++index2)
                                    {
                                        if (num6 < 256 && (int)Main.tile[index1, index2].liquidType() == num4)
                                        {
                                            int num7 = (int)Main.tile[index1, index2].liquid;
                                            if (num7 + num6 > (int)byte.MaxValue)
                                                num7 = (int)byte.MaxValue - num6;
                                            num6 += num7;
                                            Main.tile[index1, index2].liquid -= (byte)num7;
                                            Main.tile[index1, index2].liquidType(liquidType);
                                            if ((int)Main.tile[index1, index2].liquid == 0)
                                            {
                                                Main.tile[index1, index2].lava(false);
                                                Main.tile[index1, index2].honey(false);
                                            }
                                            WorldGen.SquareTileFrame(index1, index2, false);
                                            if (Main.netMode == 1)
                                                NetMessage.sendWater(index1, index2);
                                            else
                                                Liquid.AddWater(index1, index2);
                                        }
                                    }
                                }
                            }
                        }
                        else if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquid < 200 && (!Main.tile[Player.tileTargetX, Player.tileTargetY].nactive() || !Main.tileSolid[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || Main.tileSolidTop[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type]))
                        {
                            if (sItem.itemId == 207)
                            {
                                if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == 0 || (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 1)
                                {
                                    Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1);
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(1);
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = byte.MaxValue;
                                    WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
                                    --sItem.stack;
                                    this.PutItemInInventory(205, this.selectedItem);
                                    this.itemTime = sItem.useTime;
                                    if (Main.netMode == 1)
                                        NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
                                }
                            }
                            else if (sItem.itemId == 206 || sItem.itemId == 3031)
                            {
                                if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == 0 || (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 0)
                                {
                                    Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1);
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(0);
                                    Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = byte.MaxValue;
                                    WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
                                    if (sItem.itemId != 3031)
                                    {
                                        --sItem.stack;
                                        this.PutItemInInventory(205, this.selectedItem);
                                    }
                                    this.itemTime = sItem.useTime;
                                    if (Main.netMode == 1)
                                        NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
                                }
                            }
                            else if (sItem.itemId == 1128 && ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquid == 0 || (int)Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType() == 2))
                            {
                                Main.PlaySound(19, (int)this.position.X, (int)this.position.Y, 1);
                                Main.tile[Player.tileTargetX, Player.tileTargetY].liquidType(2);
                                Main.tile[Player.tileTargetX, Player.tileTargetY].liquid = byte.MaxValue;
                                WorldGen.SquareTileFrame(Player.tileTargetX, Player.tileTargetY, true);
                                --sItem.stack;
                                this.PutItemInInventory(205, this.selectedItem);
                                this.itemTime = sItem.useTime;
                                if (Main.netMode == 1)
                                    NetMessage.sendWater(Player.tileTargetX, Player.tileTargetY);
                            }
                        }
                    }
                }
                if (!this.channel)
                {
                    this.toolTime = this.itemTime;
                }
                else
                {
                    --this.toolTime;
                    if (this.toolTime < 0)
                        this.toolTime = sItem.pick <= 0 ? (int)((double)sItem.useTime * (double)this.pickSpeed) : sItem.useTime;
                }
                if ((sItem.pick > 0 || sItem.axe > 0 || sItem.hammer > 0) && ((double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)sItem.tileBoost <= (double)Player.tileTargetX && ((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)sItem.tileBoost - 1.0 >= (double)Player.tileTargetX && ((double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)sItem.tileBoost <= (double)Player.tileTargetY && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)sItem.tileBoost - 2.0 >= (double)Player.tileTargetY)))
                {
                    int damageAmount1 = 0;
                    bool flag3 = true;
                    this.showItemIcon = true;
                    if (this.toolTime == 0 && this.itemAnimation > 0 && this.controlUseItem && (!Main.tile[Player.tileTargetX, Player.tileTargetY].active() || !Main.tileHammer[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] && !Main.tileSolid[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] && ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type != 314 && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type != 351)))
                        this.poundRelease = false;
                    if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
                    {
                        if (sItem.pick > 0 && !Main.tileAxe[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] && !Main.tileHammer[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || (sItem.axe > 0 && Main.tileAxe[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] || sItem.hammer > 0 && Main.tileHammer[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type]))
                            flag3 = false;
                        if (this.toolTime == 0 && this.itemAnimation > 0 && this.controlUseItem)
                        {
                            int tileId = this.hitTile.HitObject(Player.tileTargetX, Player.tileTargetY, 1);
                            if (Main.tileNoFail[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                                damageAmount1 = 100;
                            if (Main.tileHammer[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                            {
                                flag3 = false;
                                if (sItem.hammer > 0)
                                {
                                    damageAmount1 += sItem.hammer;
                                    if (!WorldGen.CanKillTile(Player.tileTargetX, Player.tileTargetY))
                                        damageAmount1 = 0;
                                    if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 26 && (sItem.hammer < 80 || !Main.hardMode))
                                    {
                                        damageAmount1 = 0;
                                        this.Hurt(this.statLife / 2, -this.direction, false, false, Lang.deathMsg(-1, -1, -1, 4), false);
                                    }
                                    AchievementsHelper.CurrentlyMining = true;
                                    if (this.hitTile.AddDamage(tileId, damageAmount1, true) >= 100)
                                    {
                                        this.hitTile.Clear(tileId);
                                        WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0.0f, 0, 0, 0);
                                    }
                                    else
                                    {
                                        WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, true, false, false);
                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
                                    }
                                    if (damageAmount1 != 0)
                                        this.hitTile.Prune();
                                    this.itemTime = sItem.useTime;
                                    AchievementsHelper.CurrentlyMining = false;
                                }
                            }
                            else if (Main.tileAxe[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                            {
                                if ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 80)
                                    damageAmount1 += sItem.axe * 3;
                                else
                                    damageAmount1 += sItem.axe;
                                if (sItem.axe > 0)
                                {
                                    AchievementsHelper.CurrentlyMining = true;
                                    if (!WorldGen.CanKillTile(Player.tileTargetX, Player.tileTargetY))
                                        damageAmount1 = 0;
                                    if (this.hitTile.AddDamage(tileId, damageAmount1, true) >= 100)
                                    {
                                        this.hitTile.Clear(tileId);
                                        WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, false, false, false);
                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 0.0f, 0, 0, 0);
                                    }
                                    else
                                    {
                                        WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, true, false, false);
                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
                                    }
                                    if (damageAmount1 != 0)
                                        this.hitTile.Prune();
                                    this.itemTime = sItem.useTime;
                                    AchievementsHelper.CurrentlyMining = false;
                                }
                            }
                            else if (sItem.pick > 0)
                            {
                                this.PickTile(Player.tileTargetX, Player.tileTargetY, sItem.pick);
                                this.itemTime = (int)((double)sItem.useTime * (double)this.pickSpeed);
                            }
                            if (sItem.pick > 0)
                                this.itemTime = (int)((double)sItem.useTime * (double)this.pickSpeed);
                            if (sItem.hammer > 0 && Main.tile[Player.tileTargetX, Player.tileTargetY].active() && (Main.tileSolid[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type] && (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type != 10 || ((int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 314 || (int)Main.tile[Player.tileTargetX, Player.tileTargetY].type == 351)) && this.poundRelease)
                            {
                                flag3 = false;
                                this.itemTime = sItem.useTime;
                                int num4 = damageAmount1 + (int)((double)sItem.hammer * 1.25);
                                damageAmount1 = 100;
                                if (Main.tile[Player.tileTargetX, Player.tileTargetY - 1].active() && (int)Main.tile[Player.tileTargetX, Player.tileTargetY - 1].type == 10)
                                    damageAmount1 = 0;
                                if (Main.tile[Player.tileTargetX, Player.tileTargetY + 1].active() && (int)Main.tile[Player.tileTargetX, Player.tileTargetY + 1].type == 10)
                                    damageAmount1 = 0;
                                if (this.hitTile.AddDamage(tileId, damageAmount1, true) >= 100)
                                {
                                    this.hitTile.Clear(tileId);
                                    if (this.poundRelease)
                                    {
                                        int i1 = Player.tileTargetX;
                                        int j = Player.tileTargetY;
                                        if ((int)Main.tile[i1, j].type == 19)
                                        {
                                            if (Main.tile[i1, j].halfBrick())
                                            {
                                                WorldGen.PoundTile(i1, j);
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(17, -1, -1, "", 7, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
                                            }
                                            else
                                            {
                                                int slope1 = 1;
                                                int slope2 = 2;
                                                if ((int)Main.tile[i1 + 1, j - 1].type == 19 || (int)Main.tile[i1 - 1, j + 1].type == 19 || WorldGen.SolidTile(i1 + 1, j) && !WorldGen.SolidTile(i1 - 1, j))
                                                {
                                                    slope1 = 2;
                                                    slope2 = 1;
                                                }
                                                if ((int)Main.tile[i1, j].slope() == 0)
                                                {
                                                    WorldGen.SlopeTile(i1, j, slope1);
                                                    int num5 = (int)Main.tile[i1, j].slope();
                                                    if (Main.netMode == 1)
                                                        NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num5, 0, 0, 0);
                                                }
                                                else if ((int)Main.tile[i1, j].slope() == slope1)
                                                {
                                                    WorldGen.SlopeTile(i1, j, slope2);
                                                    int num5 = (int)Main.tile[i1, j].slope();
                                                    if (Main.netMode == 1)
                                                        NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num5, 0, 0, 0);
                                                }
                                                else
                                                {
                                                    WorldGen.SlopeTile(i1, j, 0);
                                                    int num5 = (int)Main.tile[i1, j].slope();
                                                    if (Main.netMode == 1)
                                                        NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num5, 0, 0, 0);
                                                    WorldGen.PoundTile(i1, j);
                                                    if (Main.netMode == 1)
                                                        NetMessage.SendData(17, -1, -1, "", 7, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
                                                }
                                            }
                                        }
                                        else if ((int)Main.tile[i1, j].type == 314)
                                        {
                                            if (Minecart.FrameTrack(i1, j, true, false) && Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, "", 15, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
                                        }
                                        else if ((int)Main.tile[i1, j].type == 137)
                                        {
                                            Main.tile[i1, j].frameX = (int)Main.tile[i1, j].frameX != 18 ? (short)18 : (short)0;
                                            if (Main.netMode == 1)
                                                NetMessage.SendTileSquare(-1, Player.tileTargetX, Player.tileTargetY, 1);
                                        }
                                        else if ((Main.tile[i1, j].halfBrick() || (int)Main.tile[i1, j].slope() != 0) && !Main.tileSolidTop[(int)Main.tile[Player.tileTargetX, Player.tileTargetY].type])
                                        {
                                            int num5 = 1;
                                            int slope1 = 1;
                                            int slope2 = 2;
                                            if ((WorldGen.SolidTile(i1 + 1, j) || (int)Main.tile[i1 + 1, j].slope() == 1 || (int)Main.tile[i1 + 1, j].slope() == 3) && !WorldGen.SolidTile(i1 - 1, j))
                                            {
                                                slope1 = 2;
                                                slope2 = 1;
                                            }
                                            if (WorldGen.SolidTile(i1, j - 1) && !WorldGen.SolidTile(i1, j + 1))
                                                num5 = -1;
                                            if (num5 == 1)
                                            {
                                                if ((int)Main.tile[i1, j].slope() == 0)
                                                    WorldGen.SlopeTile(i1, j, slope1);
                                                else if ((int)Main.tile[i1, j].slope() == slope1)
                                                    WorldGen.SlopeTile(i1, j, slope2);
                                                else if ((int)Main.tile[i1, j].slope() == slope2)
                                                    WorldGen.SlopeTile(i1, j, slope1 + 2);
                                                else if ((int)Main.tile[i1, j].slope() == slope1 + 2)
                                                    WorldGen.SlopeTile(i1, j, slope2 + 2);
                                                else
                                                    WorldGen.SlopeTile(i1, j, 0);
                                            }
                                            else if ((int)Main.tile[i1, j].slope() == 0)
                                                WorldGen.SlopeTile(i1, j, slope1 + 2);
                                            else if ((int)Main.tile[i1, j].slope() == slope1 + 2)
                                                WorldGen.SlopeTile(i1, j, slope2 + 2);
                                            else if ((int)Main.tile[i1, j].slope() == slope2 + 2)
                                                WorldGen.SlopeTile(i1, j, slope1);
                                            else if ((int)Main.tile[i1, j].slope() == slope1)
                                                WorldGen.SlopeTile(i1, j, slope2);
                                            else
                                                WorldGen.SlopeTile(i1, j, 0);
                                            int num6 = (int)Main.tile[i1, j].slope();
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, "", 14, (float)Player.tileTargetX, (float)Player.tileTargetY, (float)num6, 0, 0, 0);
                                        }
                                        else
                                        {
                                            WorldGen.PoundTile(i1, j);
                                            if (Main.netMode == 1)
                                                NetMessage.SendData(17, -1, -1, "", 7, (float)Player.tileTargetX, (float)Player.tileTargetY, 1f, 0, 0, 0);
                                        }
                                        this.poundRelease = false;
                                    }
                                }
                                else
                                {
                                    WorldGen.KillTile(Player.tileTargetX, Player.tileTargetY, true, true, false);
                                    Main.PlaySound(0, Player.tileTargetX * 16, Player.tileTargetY * 16, 1);
                                }
                            }
                            else
                                this.poundRelease = false;
                        }
                    }
                    if (this.releaseUseItem)
                        this.poundRelease = true;
                    int index1 = Player.tileTargetX;
                    int index2 = Player.tileTargetY;
                    bool flag4 = true;
                    if ((int)Main.tile[index1, index2].wall > 0)
                    {
                        if (!Main.wallHouse[(int)Main.tile[index1, index2].wall])
                        {
                            for (int index3 = index1 - 1; index3 < index1 + 2; ++index3)
                            {
                                for (int index4 = index2 - 1; index4 < index2 + 2; ++index4)
                                {
                                    if ((int)Main.tile[index3, index4].wall != (int)Main.tile[index1, index2].wall)
                                    {
                                        flag4 = false;
                                        break;
                                    }
                                }
                            }
                        }
                        else
                            flag4 = false;
                    }
                    if (flag4 && !Main.tile[index1, index2].active())
                    {
                        int num4 = -1;
                        if (((double)Main.mouseX + (double)Main.screenPosition.X) / 16.0 < Math.Round(((double)Main.mouseX + (double)Main.screenPosition.X) / 16.0))
                            num4 = 0;
                        int num5 = -1;
                        if (((double)Main.mouseY + (double)Main.screenPosition.Y) / 16.0 < Math.Round(((double)Main.mouseY + (double)Main.screenPosition.Y) / 16.0))
                            num5 = 0;
                        for (int index3 = Player.tileTargetX + num4; index3 <= Player.tileTargetX + num4 + 1; ++index3)
                        {
                            for (int index4 = Player.tileTargetY + num5; index4 <= Player.tileTargetY + num5 + 1; ++index4)
                            {
                                if (flag4)
                                {
                                    index1 = index3;
                                    index2 = index4;
                                    if ((int)Main.tile[index1, index2].wall > 0)
                                    {
                                        if (!Main.wallHouse[(int)Main.tile[index1, index2].wall])
                                        {
                                            for (int index5 = index1 - 1; index5 < index1 + 2; ++index5)
                                            {
                                                for (int index6 = index2 - 1; index6 < index2 + 2; ++index6)
                                                {
                                                    if ((int)Main.tile[index5, index6].wall != (int)Main.tile[index1, index2].wall)
                                                    {
                                                        flag4 = false;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                            flag4 = false;
                                    }
                                }
                            }
                        }
                    }
                    if (flag3 && (int)Main.tile[index1, index2].wall > 0 && (!Main.tile[index1, index2].active() || index1 != Player.tileTargetX || index2 != Player.tileTargetY || !Main.tileHammer[(int)Main.tile[index1, index2].type] && !this.poundRelease) && (this.toolTime == 0 && this.itemAnimation > 0 && (this.controlUseItem && sItem.hammer > 0)))
                    {
                        bool flag5 = true;
                        if (!Main.wallHouse[(int)Main.tile[index1, index2].wall])
                        {
                            flag5 = false;
                            for (int index3 = index1 - 1; index3 < index1 + 2; ++index3)
                            {
                                for (int index4 = index2 - 1; index4 < index2 + 2; ++index4)
                                {
                                    if ((int)Main.tile[index3, index4].wall == 0 || Main.wallHouse[(int)Main.tile[index3, index4].wall])
                                    {
                                        flag5 = true;
                                        break;
                                    }
                                }
                            }
                        }
                        if (flag5)
                        {
                            int tileId = this.hitTile.HitObject(index1, index2, 2);
                            int damageAmount2 = damageAmount1 + (int)((double)sItem.hammer * 1.5);
                            if (this.hitTile.AddDamage(tileId, damageAmount2, true) >= 100)
                            {
                                this.hitTile.Clear(tileId);
                                WorldGen.KillWall(index1, index2, false);
                                if (Main.netMode == 1)
                                    NetMessage.SendData(17, -1, -1, "", 2, (float)index1, (float)index2, 0.0f, 0, 0, 0);
                            }
                            else
                            {
                                WorldGen.KillWall(index1, index2, true);
                                if (Main.netMode == 1)
                                    NetMessage.SendData(17, -1, -1, "", 2, (float)index1, (float)index2, 1f, 0, 0, 0);
                            }
                            if (damageAmount2 != 0)
                                this.hitTile.Prune();
                            this.itemTime = sItem.useTime / 2;
                        }
                    }
                }
                if (Main.myPlayer == this.whoAmI && sItem.itemId == 1326 && (this.itemAnimation > 0 && this.itemTime == 0))
                {
                    this.itemTime = sItem.useTime;
                    Vector2 vector2;
                    vector2.X = (float)Main.mouseX + Main.screenPosition.X;
                    vector2.Y = (double)this.gravDir != 1.0 ? Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY : (float)Main.mouseY + Main.screenPosition.Y - (float)this.height;
                    vector2.X -= (float)(this.width / 2);
                    if ((double)vector2.X > 50.0 && (double)vector2.X < (double)(Main.maxTilesX * 16 - 50) && ((double)vector2.Y > 50.0 && (double)vector2.Y < (double)(Main.maxTilesY * 16 - 50)))
                    {
                        int index1 = (int)((double)vector2.X / 16.0);
                        int index2 = (int)((double)vector2.Y / 16.0);
                        if (((int)Main.tile[index1, index2].wall != 87 || (double)index2 <= Main.worldSurface || NPC.downedPlantBoss) && !Collision.SolidCollision(vector2, this.width, this.height))
                        {
                            this.Teleport(vector2, 1, 0);
                            NetMessage.SendData(65, -1, -1, "", 0, (float)this.whoAmI, vector2.X, vector2.Y, 1, 0, 0);
                            if (this.chaosState)
                            {
                                this.statLife -= this.statLifeMax2 / 7;
                                if (Lang.lang <= 1)
                                {
                                    string deathText = " didn't materialize";
                                    if (Main.rand.Next(2) == 0)
                                        deathText = !this.Male ? "'s legs appeared where her head should be" : "'s legs appeared where his head should be";
                                    if (this.statLife <= 0)
                                        this.KillMe(1.0, 0, false, deathText);
                                }
                                else if (this.statLife <= 0)
                                    this.KillMe(1.0, 0, false, "");
                                this.lifeRegenCount = 0;
                                this.lifeRegenTime = 0;
                            }
                            this.AddBuff(88, 360, true);
                        }
                    }
                }
                if (sItem.itemId == 29 && this.itemAnimation > 0 && (this.statLifeMax < 400 && this.itemTime == 0))
                {
                    this.itemTime = sItem.useTime;
                    this.statLifeMax += 20;
                    this.statLifeMax2 += 20;
                    this.statLife += 20;
                    if (Main.myPlayer == this.whoAmI)
                        this.HealEffect(20, true);
                    AchievementsHelper.HandleSpecialEvent(this, 0);
                }
                if (sItem.itemId == 1291 && this.itemAnimation > 0 && (this.statLifeMax >= 400 && this.statLifeMax < 500) && this.itemTime == 0)
                {
                    this.itemTime = sItem.useTime;
                    this.statLifeMax += 5;
                    this.statLifeMax2 += 5;
                    this.statLife += 5;
                    if (Main.myPlayer == this.whoAmI)
                        this.HealEffect(5, true);
                    AchievementsHelper.HandleSpecialEvent(this, 2);
                }
                if (sItem.itemId == 109 && this.itemAnimation > 0 && (this.statManaMax < 200 && this.itemTime == 0))
                {
                    this.itemTime = sItem.useTime;
                    this.statManaMax += 20;
                    this.statManaMax2 += 20;
                    this.statMana += 20;
                    if (Main.myPlayer == this.whoAmI)
                        this.ManaEffect(20);
                    AchievementsHelper.HandleSpecialEvent(this, 1);
                }
                if (sItem.itemId == 3335 && this.itemAnimation > 0 && (!this.extraAccessory && Main.expertMode) && this.itemTime == 0)
                {
                    this.itemTime = sItem.useTime;
                    this.extraAccessory = true;
                    NetMessage.SendData(4, -1, -1, Main.player[this.whoAmI].name, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                }
                this.PlaceThing();
            }
            if (sItem.itemId == 3542)
            {
                Vector2 vector2_1 = Main.OffsetsPlayerOnhand[this.bodyFrame.Y / 56] * 2f;
                if (this.direction != 1)
                    vector2_1.X = (float)this.bodyFrame.Width - vector2_1.X;
                if ((double)this.gravDir != 1.0)
                    vector2_1.Y = (float)this.bodyFrame.Height - vector2_1.Y;
                vector2_1 -= new Vector2((float)(this.bodyFrame.Width - this.width), (float)(this.bodyFrame.Height - 42)) / 2f;
                Vector2 vector2_2 = this.RotatedRelativePoint(this.position + vector2_1, true) - this.velocity;
                for (int index = 0; index < 4; ++index)
                {
                    Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 242, (float)(this.direction * 2), 0.0f, 150, new Color(), 1.3f)];
                    dust.position = vector2_2;
                    dust.velocity *= 0.0f;
                    dust.noGravity = true;
                    dust.fadeIn = 1f;
                    dust.velocity += this.velocity;
                    if (Main.rand.Next(2) == 0)
                    {
                        dust.position += Utils.RandomVector2(Main.rand, -4f, 4f);
                        dust.scale += Utils.NextFloat(Main.rand);
                        if (Main.rand.Next(2) == 0)
                            dust.customData = (object)this;
                    }
                }
            }
            if ((sItem.damage >= 0 && sItem.itemId > 0 && !sItem.noMelee || (sItem.itemId == 1450 || sItem.itemId == 1991 || (sItem.itemId == 3183 || sItem.itemId == 3542))) && this.itemAnimation > 0)
            {
                bool flag2 = false;
                Microsoft.Xna.Framework.Rectangle r = new Microsoft.Xna.Framework.Rectangle((int)this.itemLocation.X, (int)this.itemLocation.Y, 32, 32);
                if (!Main.dedServ)
                    r = new Microsoft.Xna.Framework.Rectangle((int)this.itemLocation.X, (int)this.itemLocation.Y, Main.itemTexture[sItem.itemId].Width, Main.itemTexture[sItem.itemId].Height);
                r.Width = (int)((double)r.Width * (double)sItem.scale);
                r.Height = (int)((double)r.Height * (double)sItem.scale);
                if (this.direction == -1)
                    r.X -= r.Width;
                if ((double)this.gravDir == 1.0)
                    r.Y -= r.Height;
                if (sItem.useStyle == 1)
                {
                    if ((double)this.itemAnimation < (double)this.itemAnimationMax * 0.333)
                    {
                        if (this.direction == -1)
                            r.X -= (int)((double)r.Width * 1.4 - (double)r.Width);
                        r.Width = (int)((double)r.Width * 1.4);
                        r.Y += (int)((double)r.Height * 0.5 * (double)this.gravDir);
                        r.Height = (int)((double)r.Height * 1.1);
                    }
                    else if ((double)this.itemAnimation >= (double)this.itemAnimationMax * 0.666)
                    {
                        if (this.direction == 1)
                            r.X -= (int)((double)r.Width * 1.2);
                        r.Width = r.Width * 2;
                        r.Y -= (int)(((double)r.Height * 1.4 - (double)r.Height) * (double)this.gravDir);
                        r.Height = (int)((double)r.Height * 1.4);
                    }
                }
                else if (sItem.useStyle == 3)
                {
                    if ((double)this.itemAnimation > (double)this.itemAnimationMax * 0.666)
                    {
                        flag2 = true;
                    }
                    else
                    {
                        if (this.direction == -1)
                            r.X -= (int)((double)r.Width * 1.4 - (double)r.Width);
                        r.Width = (int)((double)r.Width * 1.4);
                        r.Y += (int)((double)r.Height * 0.6);
                        r.Height = (int)((double)r.Height * 0.6);
                    }
                }
                double num4 = (double)this.gravDir;
                if (sItem.itemId == 1450 && Main.rand.Next(3) == 0)
                {
                    int index = -1;
                    float x = (float)(r.X + Main.rand.Next(r.Width));
                    float y = (float)(r.Y + Main.rand.Next(r.Height));
                    if (Main.rand.Next(500) == 0)
                        index = Gore.NewGore(new Vector2(x, y), new Vector2(), 415, (float)Main.rand.Next(51, 101) * 0.01f);
                    else if (Main.rand.Next(250) == 0)
                        index = Gore.NewGore(new Vector2(x, y), new Vector2(), 414, (float)Main.rand.Next(51, 101) * 0.01f);
                    else if (Main.rand.Next(80) == 0)
                        index = Gore.NewGore(new Vector2(x, y), new Vector2(), 413, (float)Main.rand.Next(51, 101) * 0.01f);
                    else if (Main.rand.Next(10) == 0)
                        index = Gore.NewGore(new Vector2(x, y), new Vector2(), 412, (float)Main.rand.Next(51, 101) * 0.01f);
                    else if (Main.rand.Next(3) == 0)
                        index = Gore.NewGore(new Vector2(x, y), new Vector2(), 411, (float)Main.rand.Next(51, 101) * 0.01f);
                    if (index >= 0)
                    {
                        Main.gore[index].velocity.X += (float)(this.direction * 2);
                        Main.gore[index].velocity.Y *= 0.3f;
                    }
                }
                if (sItem.itemId == 3542)
                    flag2 = true;
                if (!flag2)
                {
                    if (sItem.itemId == 989 && Main.rand.Next(5) == 0)
                    {
                        int Type;
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                Type = 15;
                                break;
                            case 1:
                                Type = 57;
                                break;
                            default:
                                Type = 58;
                                break;
                        }
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, Type, (float)(this.direction * 2), 0.0f, 150, new Color(), 1.3f);
                        Main.dust[index].velocity *= 0.2f;
                    }
                    if (sItem.itemId == 2880 && Main.rand.Next(2) == 0)
                    {
                        int Type = Utils.SelectRandom<int>(Main.rand, 226, 229);
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, Type, (float)(this.direction * 2), 0.0f, 150, new Color(), 1f);
                        Main.dust[index].velocity *= 0.2f;
                        Main.dust[index].noGravity = true;
                    }
                    if ((sItem.itemId == 44 || sItem.itemId == 45 || (sItem.itemId == 46 || sItem.itemId == 103) || sItem.itemId == 104) && Main.rand.Next(15) == 0)
                        Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 14, (float)(this.direction * 2), 0.0f, 150, new Color(), 1.3f);
                    if (sItem.itemId == 273 || sItem.itemId == 675)
                    {
                        if (Main.rand.Next(5) == 0)
                            Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 14, (float)(this.direction * 2), 0.0f, 150, new Color(), 1.4f);
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 27, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 1.2f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity.X /= 2f;
                        Main.dust[index].velocity.Y /= 2f;
                    }
                    if (sItem.itemId == 723 && Main.rand.Next(2) == 0)
                    {
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 64, 0.0f, 0.0f, 150, new Color(), 1.2f);
                        Main.dust[index].noGravity = true;
                    }
                    if (sItem.itemId == 65)
                    {
                        if (Main.rand.Next(5) == 0)
                            Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 58, 0.0f, 0.0f, 150, new Color(), 1.2f);
                        if (Main.rand.Next(10) == 0)
                            Gore.NewGore(new Vector2((float)r.X, (float)r.Y), new Vector2(), Main.rand.Next(16, 18), 1f);
                    }
                    if (sItem.itemId == 3065)
                    {
                        int index1 = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 58, 0.0f, 0.0f, 150, new Color(), 1.2f);
                        Main.dust[index1].velocity *= 0.5f;
                        if (Main.rand.Next(8) == 0)
                        {
                            int index2 = Gore.NewGore(new Vector2((float)r.Center.X, (float)r.Center.Y), new Vector2(), 16, 1f);
                            Main.gore[index2].velocity *= 0.5f;
                            Main.gore[index2].velocity += new Vector2((float)this.direction, 0.0f);
                        }
                    }
                    if (sItem.itemId == 190)
                    {
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 40, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 0, new Color(), 1.2f);
                        Main.dust[index].noGravity = true;
                    }
                    else if (sItem.itemId == 213)
                    {
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 3, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 0, new Color(), 1.2f);
                        Main.dust[index].noGravity = true;
                    }
                    if (sItem.itemId == 121)
                    {
                        for (int index1 = 0; index1 < 2; ++index1)
                        {
                            int index2 = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 2.5f);
                            Main.dust[index2].noGravity = true;
                            Main.dust[index2].velocity.X *= 2f;
                            Main.dust[index2].velocity.Y *= 2f;
                        }
                    }
                    if (sItem.itemId == 122 || sItem.itemId == 217)
                    {
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 1.9f);
                        Main.dust[index].noGravity = true;
                    }
                    if (sItem.itemId == 155)
                    {
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 172, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 0.9f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.1f;
                    }
                    if (sItem.itemId == 676 && Main.rand.Next(3) == 0)
                    {
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 67, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 90, new Color(), 1.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.2f;
                    }
                    if (sItem.itemId == 3063)
                    {
                        int index = Dust.NewDust(Utils.TopLeft(r), r.Width, r.Height, 66, 0.0f, 0.0f, 150, Color.Transparent, 0.85f);
                        Main.dust[index].color = Main.hslToRgb(Utils.NextFloat(Main.rand), 1f, 0.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity /= 2f;
                    }
                    if (sItem.itemId == 724 && Main.rand.Next(5) == 0)
                    {
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 67, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 90, new Color(), 1.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.2f;
                    }
                    if (sItem.itemId >= 795 && sItem.itemId <= 802 && Main.rand.Next(3) == 0)
                    {
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 115, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 140, new Color(), 1.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.25f;
                    }
                    if (sItem.itemId == 367 || sItem.itemId == 368 || sItem.itemId == 674)
                    {
                        if (Main.rand.Next(3) == 0)
                        {
                            int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 57, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 1.1f);
                            Main.dust[index].noGravity = true;
                            Main.dust[index].velocity.X /= 2f;
                            Main.dust[index].velocity.Y /= 2f;
                            Main.dust[index].velocity.X += (float)(this.direction * 2);
                        }
                        if (Main.rand.Next(4) == 0)
                        {
                            int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 43, 0.0f, 0.0f, 254, new Color(), 0.3f);
                            Main.dust[index].velocity *= 0.0f;
                        }
                    }
                    if (sItem.itemId >= 198 && sItem.itemId <= 203)
                    {
                        float R = 0.5f;
                        float G = 0.5f;
                        float B = 0.5f;
                        if (sItem.itemId == 198)
                        {
                            R *= 0.1f;
                            G *= 0.5f;
                            B *= 1.2f;
                        }
                        else if (sItem.itemId == 199)
                        {
                            R *= 1f;
                            G *= 0.2f;
                            B *= 0.1f;
                        }
                        else if (sItem.itemId == 200)
                        {
                            R *= 0.1f;
                            G *= 1f;
                            B *= 0.2f;
                        }
                        else if (sItem.itemId == 201)
                        {
                            R *= 0.8f;
                            G *= 0.1f;
                            B *= 1f;
                        }
                        else if (sItem.itemId == 202)
                        {
                            R *= 0.8f;
                            G *= 0.9f;
                            B *= 1f;
                        }
                        else if (sItem.itemId == 203)
                        {
                            R *= 0.9f;
                            G *= 0.9f;
                            B *= 0.1f;
                        }
                        Lighting.AddLight((int)(((double)this.itemLocation.X + 6.0 + (double)this.velocity.X) / 16.0), (int)(((double)this.itemLocation.Y - 14.0) / 16.0), R, G, B);
                    }
                    if (this.frostBurn && sItem.melee && (!sItem.noMelee && !sItem.noUseGraphic) && Main.rand.Next(2) == 0)
                    {
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 135, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 2.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity *= 0.7f;
                        Main.dust[index].velocity.Y -= 0.5f;
                    }
                    if (sItem.melee && !sItem.noMelee && (!sItem.noUseGraphic && (int)this.meleeEnchant > 0))
                    {
                        if ((int)this.meleeEnchant == 1)
                        {
                            if (Main.rand.Next(3) == 0)
                            {
                                int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 171, 0.0f, 0.0f, 100, new Color(), 1f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].fadeIn = 1.5f;
                                Main.dust[index].velocity *= 0.25f;
                            }
                        }
                        else if ((int)this.meleeEnchant == 2)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 75, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 2.5f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].velocity *= 0.7f;
                                Main.dust[index].velocity.Y -= 0.5f;
                            }
                        }
                        else if ((int)this.meleeEnchant == 3)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 2.5f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].velocity *= 0.7f;
                                Main.dust[index].velocity.Y -= 0.5f;
                            }
                        }
                        else if ((int)this.meleeEnchant == 4)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 57, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 1.1f);
                                Main.dust[index].noGravity = true;
                                Main.dust[index].velocity.X /= 2f;
                                Main.dust[index].velocity.Y /= 2f;
                            }
                        }
                        else if ((int)this.meleeEnchant == 5)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 169, 0.0f, 0.0f, 100, new Color(), 1f);
                                Main.dust[index].velocity.X += (float)this.direction;
                                Main.dust[index].velocity.Y += 0.2f;
                                Main.dust[index].noGravity = true;
                            }
                        }
                        else if ((int)this.meleeEnchant == 6)
                        {
                            if (Main.rand.Next(2) == 0)
                            {
                                int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 135, 0.0f, 0.0f, 100, new Color(), 1f);
                                Main.dust[index].velocity.X += (float)this.direction;
                                Main.dust[index].velocity.Y += 0.2f;
                                Main.dust[index].noGravity = true;
                            }
                        }
                        else if ((int)this.meleeEnchant == 7)
                        {
                            if (Main.rand.Next(20) == 0)
                            {
                                int Type = Main.rand.Next(139, 143);
                                int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, Type, this.velocity.X, this.velocity.Y, 0, new Color(), 1.2f);
                                Main.dust[index].velocity.X *= (float)(1.0 + (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
                                Main.dust[index].velocity.Y *= (float)(1.0 + (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
                                Main.dust[index].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
                                Main.dust[index].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
                                Main.dust[index].scale *= (float)(1.0 + (double)Main.rand.Next(-30, 31) * 0.00999999977648258);
                            }
                            if (Main.rand.Next(40) == 0)
                            {
                                int Type = Main.rand.Next(276, 283);
                                int index = Gore.NewGore(new Vector2((float)r.X, (float)r.Y), this.velocity, Type, 1f);
                                Main.gore[index].velocity.X *= (float)(1.0 + (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
                                Main.gore[index].velocity.Y *= (float)(1.0 + (double)Main.rand.Next(-50, 51) * 0.00999999977648258);
                                Main.gore[index].scale *= (float)(1.0 + (double)Main.rand.Next(-20, 21) * 0.00999999977648258);
                                Main.gore[index].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
                                Main.gore[index].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
                            }
                        }
                        else if ((int)this.meleeEnchant == 8 && Main.rand.Next(4) == 0)
                        {
                            int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 46, 0.0f, 0.0f, 100, new Color(), 1f);
                            Main.dust[index].noGravity = true;
                            Main.dust[index].fadeIn = 1.5f;
                            Main.dust[index].velocity *= 0.25f;
                        }
                    }
                    if (this.magmaStone && sItem.melee && (!sItem.noMelee && !sItem.noUseGraphic) && Main.rand.Next(3) != 0)
                    {
                        int index = Dust.NewDust(new Vector2((float)r.X, (float)r.Y), r.Width, r.Height, 6, this.velocity.X * 0.2f + (float)(this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 2.5f);
                        Main.dust[index].noGravity = true;
                        Main.dust[index].velocity.X *= 2f;
                        Main.dust[index].velocity.Y *= 2f;
                    }
                    if (Main.myPlayer == i && (sItem.itemId == 1991 || sItem.itemId == 3183))
                    {
                        for (int i1 = 0; i1 < 200; ++i1)
                        {
                            if (Main.npc[i1].active && (int)Main.npc[i1].catchItem > 0)
                            {
                                Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.npc[i1].position.X, (int)Main.npc[i1].position.Y, Main.npc[i1].width, Main.npc[i1].height);
                                if (r.Intersects(rectangle) && (sItem.itemId == 3183 || Main.npc[i1].noTileCollide || Collision.CanHit(this.position, this.width, this.height, Main.npc[i1].position, Main.npc[i1].width, Main.npc[i1].height)))
                                    NPC.CatchNPC(i1, i);
                            }
                        }
                    }
                    if (Main.myPlayer == i && (sItem.damage > 0 || sItem.itemId == 3183))
                    {
                        int num5 = (int)((double)sItem.damage * (double)this.meleeDamage);
                        float num6 = sItem.knockBack;
                        float num7 = 1f;
                        if (this.kbGlove)
                            ++num7;
                        if (this.kbBuff)
                            num7 += 0.5f;
                        float num8 = num6 * num7;
                        if (this.inventory[this.selectedItem].itemId == 3106)
                            num8 += num8 * (1f - this.stealth);
                        List<ushort> list = (List<ushort>)null;
                        if (sItem.itemId == 213)
                            list = new List<ushort>((IEnumerable<ushort>)new ushort[17]
              {
                (ushort) 3,
                (ushort) 24,
                (ushort) 52,
                (ushort) 61,
                (ushort) 62,
                (ushort) 71,
                (ushort) 73,
                (ushort) 74,
                (ushort) 82,
                (ushort) 83,
                (ushort) 84,
                (ushort) 110,
                (ushort) 113,
                (ushort) 115,
                (ushort) 184,
                (ushort) 205,
                (ushort) 201
              });
                        int num9 = r.X / 16;
                        int num10 = (r.X + r.Width) / 16 + 1;
                        int num11 = r.Y / 16;
                        int num12 = (r.Y + r.Height) / 16 + 1;
                        for (int i1 = num9; i1 < num10; ++i1)
                        {
                            for (int j = num11; j < num12; ++j)
                            {
                                if (Main.tile[i1, j] != null && Main.tileCut[(int)Main.tile[i1, j].type] && (list == null || !list.Contains(Main.tile[i1, j].type)) && (Main.tile[i1, j + 1] != null && (int)Main.tile[i1, j + 1].type != 78 && (int)Main.tile[i1, j + 1].type != 380))
                                {
                                    if (sItem.itemId == 1786)
                                    {
                                        int num13 = (int)Main.tile[i1, j].type;
                                        WorldGen.KillTile(i1, j, false, false, false);
                                        if (!Main.tile[i1, j].active())
                                        {
                                            int Stack = 0;
                                            if (num13 == 3 || num13 == 24 || (num13 == 61 || num13 == 110) || num13 == 201)
                                                Stack = Main.rand.Next(1, 3);
                                            if (num13 == 73 || num13 == 74 || num13 == 113)
                                                Stack = Main.rand.Next(2, 5);
                                            if (Stack > 0)
                                            {
                                                int number = Item.NewItem(i1 * 16, j * 16, 16, 16, 1727, Stack, false, 0, false);
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                                            }
                                        }
                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, "", 0, (float)i1, (float)j, 0.0f, 0, 0, 0);
                                    }
                                    else
                                    {
                                        WorldGen.KillTile(i1, j, false, false, false);
                                        if (Main.netMode == 1)
                                            NetMessage.SendData(17, -1, -1, "", 0, (float)i1, (float)j, 0.0f, 0, 0, 0);
                                    }
                                }
                            }
                        }
                        if (sItem.itemId != 3183)
                        {
                            for (int index1 = 0; index1 < 200; ++index1)
                            {
                                if (Main.npc[index1].active && Main.npc[index1].immune[i] == 0 && this.attackCD == 0)
                                {
                                    if (!Main.npc[index1].dontTakeDamage)
                                    {
                                        if (!Main.npc[index1].friendly || Main.npc[index1].type == 22 && this.killGuide || Main.npc[index1].type == 54 && this.killClothier)
                                        {
                                            Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.npc[index1].position.X, (int)Main.npc[index1].position.Y, Main.npc[index1].width, Main.npc[index1].height);
                                            if (r.Intersects(rectangle) && (Main.npc[index1].noTileCollide || Collision.CanHit(this.position, this.width, this.height, Main.npc[index1].position, Main.npc[index1].width, Main.npc[index1].height)))
                                            {
                                                bool crit = false;
                                                if (Main.rand.Next(1, 101) <= this.meleeCrit)
                                                    crit = true;
                                                int num13 = Main.DamageVar((float)num5);
                                                int index2 = Item.NPCtoBanner(Main.npc[index1].BannerID());
                                                if (index2 > 0 && this.NPCBannerBuff[index2])
                                                {
                                                    if (Main.expertMode)
                                                        num5 *= 2;
                                                    else
                                                        num5 = (int)((double)num5 * 1.5);
                                                }
                                                this.StatusNPC(sItem.itemId, index1);
                                                this.OnHit(Main.npc[index1].Center.X, Main.npc[index1].Center.Y, (Entity)Main.npc[index1]);
                                                if (this.armorPenetration > 0)
                                                    num13 += Main.npc[index1].checkArmorPenetration(this.armorPenetration);
                                                int num14 = (int)Main.npc[index1].StrikeNPC(num13, num8, this.direction, crit, false, false);
                                                if (this.inventory[this.selectedItem].itemId == 3211)
                                                {
                                                    Vector2 vector2_1 = new Vector2((float)(this.direction * 100 + Main.rand.Next(-25, 26)), (float)Main.rand.Next(-75, 76));
                                                    vector2_1.Normalize();
                                                    vector2_1 *= (float)Main.rand.Next(30, 41) * 0.1f;
                                                    Vector2 vector2_2 = new Vector2((float)(r.X + Main.rand.Next(r.Width)), (float)(r.Y + Main.rand.Next(r.Height)));
                                                    vector2_2 = (vector2_2 + Main.npc[index1].Center * 2f) / 3f;
                                                    Projectile.NewProjectile(vector2_2.X, vector2_2.Y, vector2_1.X, vector2_1.Y, 524, (int)((double)num5 * 0.7), num8 * 0.7f, this.whoAmI, 0.0f, 0.0f);
                                                }
                                                if (this.beetleOffense)
                                                {
                                                    this.beetleCounter += (float)num14;
                                                    this.beetleCountdown = 0;
                                                }
                                                if (sItem.itemId == 1826 && ((double)Main.npc[index1].value > 0.0 || Main.npc[index1].damage > 0 && !Main.npc[index1].friendly))
                                                    this.pumpkinSword(index1, (int)((double)num5 * 1.5), num8);
                                                if ((int)this.meleeEnchant == 7)
                                                    Projectile.NewProjectile(Main.npc[index1].Center.X, Main.npc[index1].Center.Y, Main.npc[index1].velocity.X, Main.npc[index1].velocity.Y, 289, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                                                if (this.inventory[this.selectedItem].itemId == 3106)
                                                {
                                                    this.stealth = 1f;
                                                    if (Main.netMode == 1)
                                                        NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                                                }
                                                if (sItem.itemId == 1123)
                                                {
                                                    int num15 = Main.rand.Next(1, 4);
                                                    if (this.strongBees && Main.rand.Next(3) == 0)
                                                        ++num15;
                                                    for (int index3 = 0; index3 < num15; ++index3)
                                                    {
                                                        float num16 = (float)(this.direction * 2) + (float)Main.rand.Next(-35, 36) * 0.02f;
                                                        float num17 = (float)Main.rand.Next(-35, 36) * 0.02f;
                                                        float SpeedX = num16 * 0.2f;
                                                        float SpeedY = num17 * 0.2f;
                                                        Projectile.NewProjectile((float)(r.X + r.Width / 2), (float)(r.Y + r.Height / 2), SpeedX, SpeedY, this.beeType(), this.beeDamage(num13 / 3), this.beeKB(0.0f), i, 0.0f, 0.0f);
                                                    }
                                                }
                                                if ((double)Main.npc[index1].value > 0.0 && this.coins && Main.rand.Next(5) == 0)
                                                {
                                                    int Type = 71;
                                                    if (Main.rand.Next(10) == 0)
                                                        Type = 72;
                                                    if (Main.rand.Next(100) == 0)
                                                        Type = 73;
                                                    int number = Item.NewItem((int)Main.npc[index1].position.X, (int)Main.npc[index1].position.Y, Main.npc[index1].width, Main.npc[index1].height, Type, 1, false, 0, false);
                                                    Main.item[number].stack = Main.rand.Next(1, 11);
                                                    Main.item[number].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
                                                    Main.item[number].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)this.direction;
                                                    if (Main.netMode == 1)
                                                        NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                                                }
                                                int num18 = Item.NPCtoBanner(Main.npc[index1].BannerID());
                                                if (num18 >= 0)
                                                    this.lastCreatureHit = num18;
                                                if (Main.netMode != 0)
                                                {
                                                    if (crit)
                                                        NetMessage.SendData(28, -1, -1, "", index1, (float)num13, num8, (float)this.direction, 1, 0, 0);
                                                    else
                                                        NetMessage.SendData(28, -1, -1, "", index1, (float)num13, num8, (float)this.direction, 0, 0, 0);
                                                }
                                                if (this.accDreamCatcher)
                                                    this.addDPS(num13);
                                                Main.npc[index1].immune[i] = this.itemAnimation;
                                                this.attackCD = (int)((double)this.itemAnimationMax * 0.33);
                                            }
                                        }
                                    }
                                    else if (Main.npc[index1].type == 63 || Main.npc[index1].type == 64 || (Main.npc[index1].type == 103 || Main.npc[index1].type == 242))
                                    {
                                        Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.npc[index1].position.X, (int)Main.npc[index1].position.Y, Main.npc[index1].width, Main.npc[index1].height);
                                        if (r.Intersects(rectangle))
                                        {
                                            this.Hurt((int)((double)Main.npc[index1].damage * 1.3), -this.direction, false, false, " was slain...", false);
                                            Main.npc[index1].immune[i] = this.itemAnimation;
                                            this.attackCD = (int)((double)this.itemAnimationMax * 0.33);
                                        }
                                    }
                                }
                            }
                            if (this.hostile)
                            {
                                for (int index1 = 0; index1 < (int)byte.MaxValue; ++index1)
                                {
                                    if (index1 != i && Main.player[index1].active && (Main.player[index1].hostile && !Main.player[index1].immune) && (!Main.player[index1].dead && (Main.player[i].team == 0 || Main.player[i].team != Main.player[index1].team)))
                                    {
                                        Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.player[index1].position.X, (int)Main.player[index1].position.Y, Main.player[index1].width, Main.player[index1].height);
                                        if (r.Intersects(rectangle) && Collision.CanHit(this.position, this.width, this.height, Main.player[index1].position, Main.player[index1].width, Main.player[index1].height))
                                        {
                                            bool Crit = false;
                                            if (Main.rand.Next(1, 101) <= 10)
                                                Crit = true;
                                            int Damage = Main.DamageVar((float)num5);
                                            this.StatusPvP(sItem.itemId, index1);
                                            this.OnHit(Main.player[index1].Center.X, Main.player[index1].Center.Y, (Entity)Main.player[index1]);
                                            int num13 = (int)Main.player[index1].Hurt(Damage, this.direction, true, false, "", Crit);
                                            if (this.inventory[this.selectedItem].itemId == 3211)
                                            {
                                                Vector2 vector2_1 = new Vector2((float)(this.direction * 100 + Main.rand.Next(-25, 26)), (float)Main.rand.Next(-75, 76));
                                                vector2_1.Normalize();
                                                vector2_1 *= (float)Main.rand.Next(30, 41) * 0.1f;
                                                Vector2 vector2_2 = new Vector2((float)(r.X + Main.rand.Next(r.Width)), (float)(r.Y + Main.rand.Next(r.Height)));
                                                vector2_2 = (vector2_2 + Main.player[index1].Center * 2f) / 3f;
                                                Projectile.NewProjectile(vector2_2.X, vector2_2.Y, vector2_1.X, vector2_1.Y, 524, (int)((double)num5 * 0.7), num8 * 0.7f, this.whoAmI, 0.0f, 0.0f);
                                            }
                                            if (this.beetleOffense)
                                            {
                                                this.beetleCounter += (float)num13;
                                                this.beetleCountdown = 0;
                                            }
                                            if ((int)this.meleeEnchant == 7)
                                                Projectile.NewProjectile(Main.player[index1].Center.X, Main.player[index1].Center.Y, Main.player[index1].velocity.X, Main.player[index1].velocity.Y, 289, 0, 0.0f, this.whoAmI, 0.0f, 0.0f);
                                            if (sItem.itemId == 1123)
                                            {
                                                int num14 = Main.rand.Next(1, 4);
                                                if (this.strongBees && Main.rand.Next(3) == 0)
                                                    ++num14;
                                                for (int index2 = 0; index2 < num14; ++index2)
                                                {
                                                    float num15 = (float)(this.direction * 2) + (float)Main.rand.Next(-35, 36) * 0.02f;
                                                    float num16 = (float)Main.rand.Next(-35, 36) * 0.02f;
                                                    float SpeedX = num15 * 0.2f;
                                                    float SpeedY = num16 * 0.2f;
                                                    Projectile.NewProjectile((float)(r.X + r.Width / 2), (float)(r.Y + r.Height / 2), SpeedX, SpeedY, this.beeType(), this.beeDamage(Damage / 3), this.beeKB(0.0f), i, 0.0f, 0.0f);
                                                }
                                            }
                                            if (this.inventory[this.selectedItem].itemId == 3106)
                                            {
                                                this.stealth = 1f;
                                                if (Main.netMode == 1)
                                                    NetMessage.SendData(84, -1, -1, "", this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                                            }
                                            if (sItem.itemId == 1826 && (double)Main.npc[index1].value > 0.0)
                                                this.pumpkinSword(index1, (int)((double)num5 * 1.5), num8);
                                            if (Main.netMode != 0)
                                            {
                                                if (Crit)
                                                    NetMessage.SendData(26, -1, -1, Lang.deathMsg(this.whoAmI, -1, -1, -1), index1, (float)this.direction, (float)Damage, 1f, 1, 0, 0);
                                                else
                                                    NetMessage.SendData(26, -1, -1, Lang.deathMsg(this.whoAmI, -1, -1, -1), index1, (float)this.direction, (float)Damage, 1f, 0, 0, 0);
                                            }
                                            this.attackCD = (int)((double)this.itemAnimationMax * 0.33);
                                        }
                                    }
                                }
                            }
                            if (sItem.itemId == 787 && (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.1) || this.itemAnimation == (int)((double)this.itemAnimationMax * 0.3) || (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.5) || this.itemAnimation == (int)((double)this.itemAnimationMax * 0.7)) || this.itemAnimation == (int)((double)this.itemAnimationMax * 0.9)))
                            {
                                float num13 = 0.0f;
                                float num14 = 0.0f;
                                float num15 = 0.0f;
                                float num16 = 0.0f;
                                if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.9))
                                    num13 = -7f;
                                if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.7))
                                {
                                    num13 = -6f;
                                    num14 = 2f;
                                }
                                if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.5))
                                {
                                    num13 = -4f;
                                    num14 = 4f;
                                }
                                if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.3))
                                {
                                    num13 = -2f;
                                    num14 = 6f;
                                }
                                if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.1))
                                    num14 = 7f;
                                if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.7))
                                    num16 = 26f;
                                if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.3))
                                {
                                    num16 -= 4f;
                                    num15 -= 20f;
                                }
                                if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.1))
                                    num15 += 6f;
                                if (this.direction == -1)
                                {
                                    if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.9))
                                        num16 -= 8f;
                                    if (this.itemAnimation == (int)((double)this.itemAnimationMax * 0.7))
                                        num16 -= 6f;
                                }
                                float num17 = num13 * 1.5f;
                                float num18 = num14 * 1.5f;
                                float num19 = num16 * (float)this.direction;
                                float num20 = num15 * this.gravDir;
                                Projectile.NewProjectile((float)(r.X + r.Width / 2) + num19, (float)(r.Y + r.Height / 2) + num20, (float)this.direction * num18, num17 * this.gravDir, 131, num5 / 2, 0.0f, i, 0.0f, 0.0f);
                            }
                        }
                    }
                }
            }
            if (this.itemTime == 0 && this.itemAnimation > 0)
            {
                if ((int)sItem.hairDye >= 0)
                {
                    this.itemTime = sItem.useTime;
                    if (this.whoAmI == Main.myPlayer)
                    {
                        this.hairDye = (byte)sItem.hairDye;
                        NetMessage.SendData(4, -1, -1, Main.player[this.whoAmI].name, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                }
                if (sItem.healLife > 0)
                {
                    this.statLife += sItem.healLife;
                    this.itemTime = sItem.useTime;
                    if (Main.myPlayer == this.whoAmI)
                        this.HealEffect(sItem.healLife, true);
                }
                if (sItem.healMana > 0)
                {
                    this.statMana += sItem.healMana;
                    this.itemTime = sItem.useTime;
                    if (Main.myPlayer == this.whoAmI)
                    {
                        this.AddBuff(94, Player.manaSickTime, true);
                        this.ManaEffect(sItem.healMana);
                    }
                }
                if (sItem.buffType > 0)
                {
                    if (this.whoAmI == Main.myPlayer && sItem.buffType != 90 && sItem.buffType != 27)
                        this.AddBuff(sItem.buffType, sItem.buffTime, true);
                    this.itemTime = sItem.useTime;
                }
                if (sItem.itemId == 678)
                {
                    this.itemTime = sItem.useTime;
                    if (this.whoAmI == Main.myPlayer)
                    {
                        this.AddBuff(20, 216000, true);
                        this.AddBuff(22, 216000, true);
                        this.AddBuff(23, 216000, true);
                        this.AddBuff(24, 216000, true);
                        this.AddBuff(30, 216000, true);
                        this.AddBuff(31, 216000, true);
                        this.AddBuff(32, 216000, true);
                        this.AddBuff(33, 216000, true);
                        this.AddBuff(35, 216000, true);
                        this.AddBuff(36, 216000, true);
                        this.AddBuff(68, 216000, true);
                    }
                }
            }
            if (this.whoAmI == Main.myPlayer)
            {
                if (this.itemTime == 0 && this.itemAnimation > 0 && (sItem.itemId == 361 && Main.CanStartInvasion(1, true)))
                {
                    this.itemTime = sItem.useTime;
                    Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                    if (Main.netMode != 1)
                    {
                        if (Main.invasionType == 0)
                        {
                            Main.invasionDelay = 0;
                            Main.StartInvasion(1);
                        }
                    }
                    else
                        NetMessage.SendData(61, -1, -1, "", this.whoAmI, -1f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (this.itemTime == 0 && this.itemAnimation > 0 && (sItem.itemId == 602 && Main.CanStartInvasion(2, true)))
                {
                    this.itemTime = sItem.useTime;
                    Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                    if (Main.netMode != 1)
                    {
                        if (Main.invasionType == 0)
                        {
                            Main.invasionDelay = 0;
                            Main.StartInvasion(2);
                        }
                    }
                    else
                        NetMessage.SendData(61, -1, -1, "", this.whoAmI, -2f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (this.itemTime == 0 && this.itemAnimation > 0 && (sItem.itemId == 1315 && Main.CanStartInvasion(3, true)))
                {
                    this.itemTime = sItem.useTime;
                    Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                    if (Main.netMode != 1)
                    {
                        if (Main.invasionType == 0)
                        {
                            Main.invasionDelay = 0;
                            Main.StartInvasion(3);
                        }
                    }
                    else
                        NetMessage.SendData(61, -1, -1, "", this.whoAmI, -3f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (this.itemTime == 0 && this.itemAnimation > 0 && (sItem.itemId == 1844 && !Main.dayTime) && (!Main.pumpkinMoon && !Main.snowMoon))
                {
                    this.itemTime = sItem.useTime;
                    Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                    if (Main.netMode != 1)
                    {
                        Main.NewText(Lang.misc[31], (byte)50, byte.MaxValue, (byte)130, false);
                        Main.startPumpkinMoon();
                    }
                    else
                        NetMessage.SendData(61, -1, -1, "", this.whoAmI, -4f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (this.itemTime == 0 && this.itemAnimation > 0 && (sItem.itemId == 2767 && Main.dayTime) && !Main.eclipse)
                {
                    Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                    if (Main.netMode == 0)
                    {
                        this.itemTime = sItem.useTime;
                        Main.eclipse = true;
                        Main.NewText(Lang.misc[20], (byte)50, byte.MaxValue, (byte)130, false);
                    }
                    else
                        NetMessage.SendData(61, -1, -1, "", this.whoAmI, -6f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (this.itemTime == 0 && this.itemAnimation > 0 && (sItem.itemId == 1958 && !Main.dayTime) && (!Main.pumpkinMoon && !Main.snowMoon))
                {
                    this.itemTime = sItem.useTime;
                    Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                    if (Main.netMode != 1)
                    {
                        Main.NewText(Lang.misc[34], (byte)50, byte.MaxValue, (byte)130, false);
                        Main.startSnowMoon();
                    }
                    else
                        NetMessage.SendData(61, -1, -1, "", this.whoAmI, -5f, 0.0f, 0.0f, 0, 0, 0);
                }
                if (this.itemTime == 0 && this.itemAnimation > 0 && ((int)sItem.makeNPC > 0 && this.controlUseItem) && ((double)this.position.X / 16.0 - (double)Player.tileRangeX - (double)sItem.tileBoost <= (double)Player.tileTargetX && ((double)this.position.X + (double)this.width) / 16.0 + (double)Player.tileRangeX + (double)sItem.tileBoost - 1.0 >= (double)Player.tileTargetX && ((double)this.position.Y / 16.0 - (double)Player.tileRangeY - (double)sItem.tileBoost <= (double)Player.tileTargetY && ((double)this.position.Y + (double)this.height) / 16.0 + (double)Player.tileRangeY + (double)sItem.tileBoost - 2.0 >= (double)Player.tileTargetY)))
                {
                    int x = Main.mouseX + (int)Main.screenPosition.X;
                    int y = Main.mouseY + (int)Main.screenPosition.Y;
                    this.itemTime = sItem.useTime;
                    if (!WorldGen.SolidTile(x / 16, y / 16))
                        NPC.ReleaseNPC(x, y, (int)sItem.makeNPC, sItem.placeStyle, this.whoAmI);
                }
                if (this.itemTime == 0 && this.itemAnimation > 0 && (sItem.itemId == 43 || sItem.itemId == 70 || (sItem.itemId == 544 || sItem.itemId == 556) || (sItem.itemId == 557 || sItem.itemId == 560 || (sItem.itemId == 1133 || sItem.itemId == 1331))) && this.SummonItemCheck())
                {
                    if (sItem.itemId == 560)
                    {
                        this.itemTime = sItem.useTime;
                        Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                        if (Main.netMode != 1)
                            NPC.SpawnOnPlayer(i, 50);
                        else
                            NetMessage.SendData(61, -1, -1, "", this.whoAmI, 50f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    else if (sItem.itemId == 43)
                    {
                        if (!Main.dayTime)
                        {
                            this.itemTime = sItem.useTime;
                            Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                            if (Main.netMode != 1)
                                NPC.SpawnOnPlayer(i, 4);
                            else
                                NetMessage.SendData(61, -1, -1, "", this.whoAmI, 4f, 0.0f, 0.0f, 0, 0, 0);
                        }
                    }
                    else if (sItem.itemId == 70)
                    {
                        if (this.ZoneCorrupt)
                        {
                            this.itemTime = sItem.useTime;
                            Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                            if (Main.netMode != 1)
                                NPC.SpawnOnPlayer(i, 13);
                            else
                                NetMessage.SendData(61, -1, -1, "", this.whoAmI, 13f, 0.0f, 0.0f, 0, 0, 0);
                        }
                    }
                    else if (sItem.itemId == 544)
                    {
                        if (!Main.dayTime)
                        {
                            this.itemTime = sItem.useTime;
                            Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                            if (Main.netMode != 1)
                            {
                                NPC.SpawnOnPlayer(i, 125);
                                NPC.SpawnOnPlayer(i, 126);
                            }
                            else
                            {
                                NetMessage.SendData(61, -1, -1, "", this.whoAmI, 125f, 0.0f, 0.0f, 0, 0, 0);
                                NetMessage.SendData(61, -1, -1, "", this.whoAmI, 126f, 0.0f, 0.0f, 0, 0, 0);
                            }
                        }
                    }
                    else if (sItem.itemId == 556)
                    {
                        if (!Main.dayTime)
                        {
                            this.itemTime = sItem.useTime;
                            Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                            if (Main.netMode != 1)
                                NPC.SpawnOnPlayer(i, 134);
                            else
                                NetMessage.SendData(61, -1, -1, "", this.whoAmI, 134f, 0.0f, 0.0f, 0, 0, 0);
                        }
                    }
                    else if (sItem.itemId == 557)
                    {
                        if (!Main.dayTime)
                        {
                            this.itemTime = sItem.useTime;
                            Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                            if (Main.netMode != 1)
                                NPC.SpawnOnPlayer(i, (int)sbyte.MaxValue);
                            else
                                NetMessage.SendData(61, -1, -1, "", this.whoAmI, (float)sbyte.MaxValue, 0.0f, 0.0f, 0, 0, 0);
                        }
                    }
                    else if (sItem.itemId == 1133)
                    {
                        this.itemTime = sItem.useTime;
                        Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                        if (Main.netMode != 1)
                            NPC.SpawnOnPlayer(i, 222);
                        else
                            NetMessage.SendData(61, -1, -1, "", this.whoAmI, 222f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    else if (sItem.itemId == 1331 && this.ZoneCrimson)
                    {
                        this.itemTime = sItem.useTime;
                        Main.PlaySound(15, (int)this.position.X, (int)this.position.Y, 0);
                        if (Main.netMode != 1)
                            NPC.SpawnOnPlayer(i, 266);
                        else
                            NetMessage.SendData(61, -1, -1, "", this.whoAmI, 266f, 0.0f, 0.0f, 0, 0, 0);
                    }
                }
            }
            if ((sItem.itemId == 50 || sItem.itemId == 3124 || sItem.itemId == 3199) && this.itemAnimation > 0)
            {
                if (Main.rand.Next(2) == 0)
                    Dust.NewDust(this.position, this.width, this.height, 15, 0.0f, 0.0f, 150, new Color(), 1.1f);
                if (this.itemTime == 0)
                    this.itemTime = sItem.useTime;
                else if (this.itemTime == sItem.useTime / 2)
                {
                    for (int index = 0; index < 70; ++index)
                        Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, new Color(), 1.5f);
                    this.grappling[0] = -1;
                    this.grapCount = 0;
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == i && Main.projectile[index].aiStyle == 7)
                            Main.projectile[index].Kill();
                    }
                    this.Spawn();
                    for (int index = 0; index < 70; ++index)
                        Dust.NewDust(this.position, this.width, this.height, 15, 0.0f, 0.0f, 150, new Color(), 1.5f);
                }
            }
            if (sItem.itemId == 2350 && this.itemAnimation > 0)
            {
                if (this.itemTime == 0)
                    this.itemTime = sItem.useTime;
                else if (this.itemTime == 2)
                {
                    for (int index = 0; index < 70; ++index)
                        Main.dust[Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
                    this.grappling[0] = -1;
                    this.grapCount = 0;
                    for (int index = 0; index < 1000; ++index)
                    {
                        if (Main.projectile[index].active && Main.projectile[index].owner == i && Main.projectile[index].aiStyle == 7)
                            Main.projectile[index].Kill();
                    }
                    bool flag2 = this.immune;
                    int num4 = this.immuneTime;
                    this.Spawn();
                    this.immune = flag2;
                    this.immuneTime = num4;
                    for (int index = 0; index < 70; ++index)
                        Main.dust[Dust.NewDust(this.position, this.width, this.height, 15, 0.0f, 0.0f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
                    if (sItem.stack > 0)
                        --sItem.stack;
                }
            }
            if (sItem.itemId == 2351 && this.itemAnimation > 0)
            {
                if (this.itemTime == 0)
                    this.itemTime = sItem.useTime;
                else if (this.itemTime == 2)
                {
                    if (Main.netMode == 0)
                        this.TeleportationPotion();
                    else if (Main.netMode == 1 && this.whoAmI == Main.myPlayer)
                        NetMessage.SendData(73, -1, -1, "", 0, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    if (sItem.stack > 0)
                        --sItem.stack;
                }
            }
            if (sItem.itemId == 2756 && this.itemAnimation > 0)
            {
                if (this.itemTime == 0)
                    this.itemTime = sItem.useTime;
                else if (this.itemTime == 2)
                {
                    if (this.whoAmI == Main.myPlayer)
                    {
                        this.Male = !this.Male;
                        if (Main.netMode == 1)
                            NetMessage.SendData(4, -1, -1, this.name, this.whoAmI, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    if (sItem.stack > 0)
                        --sItem.stack;
                }
                else
                {
                    float num4 = (float)sItem.useTime;
                    float num5 = (num4 - (float)this.itemTime) / num4;
                    float x = 15f;
                    float num6 = 44f;
                    float num7 = 9.424778f;
                    Vector2 vector2 = Utils.RotatedBy(new Vector2(x, 0.0f), (double)num7 * (double)num5, new Vector2());
                    vector2.X *= (float)this.direction;
                    for (int index1 = 0; index1 < 2; ++index1)
                    {
                        int Type = 221;
                        if (index1 == 1)
                        {
                            vector2.X *= -1f;
                            Type = 219;
                        }
                        Vector2 Position = new Vector2(vector2.X, num6 * (1f - num5) - num6 + (float)(this.height / 2));
                        Position += this.Center;
                        int index2 = Dust.NewDust(Position, 0, 0, Type, 0.0f, 0.0f, 100, new Color(), 1f);
                        Main.dust[index2].position = Position;
                        Main.dust[index2].noGravity = true;
                        Main.dust[index2].velocity = Vector2.Zero;
                        Main.dust[index2].scale = 1.3f;
                        Main.dust[index2].customData = (object)this;
                    }
                }
            }
            if (i != Main.myPlayer)
                return;
            if (this.itemTime == (int)((double)sItem.useTime * (double)this.tileSpeed) && sItem.tileWand > 0)
            {
                int num4 = sItem.tileWand;
                for (int index = 0; index < 58; ++index)
                {
                    if (num4 == this.inventory[index].itemId && this.inventory[index].stack > 0)
                    {
                        --this.inventory[index].stack;
                        if (this.inventory[index].stack <= 0)
                        {
                            this.inventory[index] = new Item();
                            break;
                        }
                        break;
                    }
                }
            }
            if (this.itemTime == (sItem.createTile < 0 ? (sItem.createWall <= 0 ? sItem.useTime : (int)((double)sItem.useTime * (double)this.wallSpeed)) : (int)((double)sItem.useTime * (double)this.tileSpeed)) && sItem.consumable)
            {
                bool flag2 = true;
                if (sItem.itemId == 2350 || sItem.itemId == 2351)
                    flag2 = false;
                if (sItem.itemId == 2756)
                    flag2 = false;
                if (sItem.ranged)
                {
                    if (this.ammoCost80 && Main.rand.Next(5) == 0)
                        flag2 = false;
                    if (this.ammoCost75 && Main.rand.Next(4) == 0)
                        flag2 = false;
                }
                if (sItem.thrown)
                {
                    if (this.thrownCost50 && Main.rand.Next(100) < 50)
                        flag2 = false;
                    if (this.thrownCost33 && Main.rand.Next(100) < 33)
                        flag2 = false;
                }
                if (sItem.itemId >= 71 && sItem.itemId <= 74)
                    flag2 = true;
                if (flag2)
                {
                    if (sItem.stack > 0)
                        --sItem.stack;
                    if (sItem.stack <= 0)
                    {
                        this.itemTime = this.itemAnimation;
                        Main.blockMouse = true;
                    }
                }
            }
            if (sItem.stack <= 0 && this.itemAnimation == 0)
                this.inventory[this.selectedItem] = new Item();
            if (this.selectedItem != 58 || this.itemAnimation == 0)
                return;
            Main.mouseItem = sItem.Clone();
        }

        private void ApplyAnimation(Item sItem)
        {
            if (sItem.melee)
            {
                this.itemAnimation = (int)((double)sItem.useAnimation * (double)this.meleeSpeed);
                this.itemAnimationMax = (int)((double)sItem.useAnimation * (double)this.meleeSpeed);
            }
            else if (sItem.createTile >= 0)
            {
                this.itemAnimation = (int)((double)sItem.useAnimation * (double)this.tileSpeed);
                this.itemAnimationMax = (int)((double)sItem.useAnimation * (double)this.tileSpeed);
            }
            else if (sItem.createWall >= 0)
            {
                this.itemAnimation = (int)((double)sItem.useAnimation * (double)this.wallSpeed);
                this.itemAnimationMax = (int)((double)sItem.useAnimation * (double)this.wallSpeed);
            }
            else
            {
                this.itemAnimation = sItem.useAnimation;
                this.itemAnimationMax = sItem.useAnimation;
                this.reuseDelay = sItem.reuseDelay;
            }
        }

        public bool HasAmmo(Item sItem, bool canUse)
        {
            if (sItem.useAmmo > 0)
            {
                canUse = false;
                for (int index = 0; index < 58; ++index)
                {
                    if (this.inventory[index].ammo == sItem.useAmmo && this.inventory[index].stack > 0)
                    {
                        canUse = true;
                        break;
                    }
                }
            }
            return canUse;
        }

        public void PickAmmo(Item sItem, ref int shoot, ref float speed, ref bool canShoot, ref int Damage, ref float KnockBack, bool dontConsume = false)
        {
            Item obj = new Item();
            bool flag1 = false;
            for (int index = 54; index < 58; ++index)
            {
                if (this.inventory[index].ammo == sItem.useAmmo && this.inventory[index].stack > 0)
                {
                    obj = this.inventory[index];
                    canShoot = true;
                    flag1 = true;
                    break;
                }
            }
            if (!flag1)
            {
                for (int index = 0; index < 54; ++index)
                {
                    if (this.inventory[index].ammo == sItem.useAmmo && this.inventory[index].stack > 0)
                    {
                        obj = this.inventory[index];
                        canShoot = true;
                        break;
                    }
                }
            }
            if (!canShoot)
                return;
            if (sItem.itemId == 1946)
                shoot = 338 + obj.itemId - 771;
            else if (sItem.useAmmo == 771)
                shoot += obj.shoot;
            else if (sItem.useAmmo == 780)
                shoot += obj.shoot;
            else if (obj.shoot > 0)
                shoot = obj.shoot;
            if (sItem.itemId == 3019 && shoot == 1)
                shoot = 485;
            if (sItem.itemId == 3052)
                shoot = 495;
            if (sItem.itemId == 3245 && shoot == 21)
                shoot = 532;
            if (shoot == 42)
            {
                if (obj.itemId == 370)
                {
                    shoot = 65;
                    Damage += 5;
                }
                else if (obj.itemId == 408)
                {
                    shoot = 68;
                    Damage += 5;
                }
                else if (obj.itemId == 1246)
                {
                    shoot = 354;
                    Damage += 5;
                }
            }
            if (this.inventory[this.selectedItem].itemId == 2888 && shoot == 1)
                shoot = 469;
            if (this.magicQuiver && (sItem.useAmmo == 1 || sItem.useAmmo == 323))
            {
                KnockBack = (float)(int)((double)KnockBack * 1.1);
                speed *= 1.1f;
            }
            speed += obj.shootSpeed;
            if (obj.ranged)
            {
                if (obj.damage > 0)
                    Damage += (int)((double)obj.damage * (double)this.rangedDamage);
            }
            else
                Damage += obj.damage;
            if (sItem.useAmmo == 1 && this.archery)
            {
                if ((double)speed < 20.0)
                {
                    speed *= 1.2f;
                    if ((double)speed > 20.0)
                        speed = 20f;
                }
                Damage = (int)((double)Damage * 1.2);
            }
            KnockBack += obj.knockBack;
            bool flag2 = dontConsume;
            if (sItem.itemId == 3245)
            {
                if (Main.rand.Next(3) == 0)
                    flag2 = true;
                else if (this.thrownCost33 && Main.rand.Next(100) < 33)
                    flag2 = true;
                else if (this.thrownCost50 && Main.rand.Next(100) < 50)
                    flag2 = true;
            }
            if (sItem.itemId == 3475 && Main.rand.Next(3) != 0)
                flag2 = true;
            if (sItem.itemId == 3540 && Main.rand.Next(3) != 0)
                flag2 = true;
            if (this.magicQuiver && sItem.useAmmo == 1 && Main.rand.Next(5) == 0)
                flag2 = true;
            if (this.ammoBox && Main.rand.Next(5) == 0)
                flag2 = true;
            if (this.ammoPotion && Main.rand.Next(5) == 0)
                flag2 = true;
            if (sItem.itemId == 1782 && Main.rand.Next(3) == 0)
                flag2 = true;
            if (sItem.itemId == 98 && Main.rand.Next(3) == 0)
                flag2 = true;
            if (sItem.itemId == 2270 && Main.rand.Next(2) == 0)
                flag2 = true;
            if (sItem.itemId == 533 && Main.rand.Next(2) == 0)
                flag2 = true;
            if (sItem.itemId == 1929 && Main.rand.Next(2) == 0)
                flag2 = true;
            if (sItem.itemId == 1553 && Main.rand.Next(2) == 0)
                flag2 = true;
            if (sItem.itemId == 434 && this.itemAnimation < sItem.useAnimation - 2)
                flag2 = true;
            if (this.ammoCost80 && Main.rand.Next(5) == 0)
                flag2 = true;
            if (this.ammoCost75 && Main.rand.Next(4) == 0)
                flag2 = true;
            if (shoot == 85 && this.itemAnimation < this.itemAnimationMax - 6)
                flag2 = true;
            if ((shoot == 145 || shoot == 146 || (shoot == 147 || shoot == 148) || shoot == 149) && this.itemAnimation < this.itemAnimationMax - 5)
                flag2 = true;
            if (flag2 || !obj.consumable)
                return;
            --obj.stack;
            if (obj.stack > 0)
                return;
            obj.active = false;
            obj.name = "";
            obj.itemId = 0;
        }

        public void PickTile(int x, int y, int pickPower)
        {
            int num1 = 0;
            int tileId = this.hitTile.HitObject(x, y, 1);
            Tile tile = Main.tile[x, y];
            if (Main.tileNoFail[(int)tile.type])
                num1 = 100;
            int damageAmount = Main.tileDungeon[(int)tile.type] || (int)tile.type == 25 || ((int)tile.type == 58 || (int)tile.type == 117) || (int)tile.type == 203 ? num1 + pickPower / 2 : ((int)tile.type == 48 || (int)tile.type == 232 ? num1 + pickPower / 4 : ((int)tile.type != 226 ? ((int)tile.type == 107 || (int)tile.type == 221 ? num1 + pickPower / 2 : ((int)tile.type == 108 || (int)tile.type == 222 ? num1 + pickPower / 3 : ((int)tile.type == 111 || (int)tile.type == 223 ? num1 + pickPower / 4 : ((int)tile.type != 211 ? num1 + pickPower : num1 + pickPower / 5)))) : num1 + pickPower / 4));
            if ((int)tile.type == 211 && pickPower < 200)
                damageAmount = 0;
            if (((int)tile.type == 25 || (int)tile.type == 203) && pickPower < 65)
                damageAmount = 0;
            else if ((int)tile.type == 117 && pickPower < 65)
                damageAmount = 0;
            else if ((int)tile.type == 37 && pickPower < 50)
                damageAmount = 0;
            else if ((int)tile.type == 404 && pickPower < 65)
                damageAmount = 0;
            else if (((int)tile.type == 22 || (int)tile.type == 204) && ((double)y > Main.worldSurface && pickPower < 55))
                damageAmount = 0;
            else if ((int)tile.type == 56 && pickPower < 65)
                damageAmount = 0;
            else if ((int)tile.type == 58 && pickPower < 65)
                damageAmount = 0;
            else if (((int)tile.type == 226 || (int)tile.type == 237) && pickPower < 210)
                damageAmount = 0;
            else if (Main.tileDungeon[(int)tile.type] && pickPower < 65)
            {
                if ((double)x < (double)Main.maxTilesX * 0.35 || (double)x > (double)Main.maxTilesX * 0.65)
                    damageAmount = 0;
            }
            else if ((int)tile.type == 107 && pickPower < 100)
                damageAmount = 0;
            else if ((int)tile.type == 108 && pickPower < 110)
                damageAmount = 0;
            else if ((int)tile.type == 111 && pickPower < 150)
                damageAmount = 0;
            else if ((int)tile.type == 221 && pickPower < 100)
                damageAmount = 0;
            else if ((int)tile.type == 222 && pickPower < 110)
                damageAmount = 0;
            else if ((int)tile.type == 223 && pickPower < 150)
                damageAmount = 0;
            if ((int)tile.type == 147 || (int)tile.type == 0 || ((int)tile.type == 40 || (int)tile.type == 53) || ((int)tile.type == 57 || (int)tile.type == 59 || ((int)tile.type == 123 || (int)tile.type == 224)) || (int)tile.type == 397)
                damageAmount += pickPower;
            if ((int)tile.type == 165 || Main.tileRope[(int)tile.type] || ((int)tile.type == 199 || Main.tileMoss[(int)tile.type]))
                damageAmount = 100;
            if (this.hitTile.AddDamage(tileId, damageAmount, false) >= 100 && ((int)tile.type == 2 || (int)tile.type == 23 || ((int)tile.type == 60 || (int)tile.type == 70) || ((int)tile.type == 109 || (int)tile.type == 199 || Main.tileMoss[(int)tile.type])))
                damageAmount = 0;
            if ((int)tile.type == 128 || (int)tile.type == 269)
            {
                if ((int)tile.frameX == 18 || (int)tile.frameX == 54)
                {
                    --x;
                    tile = Main.tile[x, y];
                    this.hitTile.UpdatePosition(tileId, x, y);
                }
                if ((int)tile.frameX >= 100)
                {
                    damageAmount = 0;
                    Main.blockMouse = true;
                }
            }
            if ((int)tile.type == 334)
            {
                if ((int)tile.frameY == 0)
                {
                    ++y;
                    tile = Main.tile[x, y];
                    this.hitTile.UpdatePosition(tileId, x, y);
                }
                if ((int)tile.frameY == 36)
                {
                    --y;
                    tile = Main.tile[x, y];
                    this.hitTile.UpdatePosition(tileId, x, y);
                }
                int num2 = (int)tile.frameX;
                bool flag1 = num2 >= 5000;
                bool flag2 = false;
                if (!flag1)
                {
                    int num3 = num2 / 18 % 3;
                    x -= num3;
                    tile = Main.tile[x, y];
                    if ((int)tile.frameX >= 5000)
                        flag1 = true;
                }
                if (flag1)
                {
                    int num3 = (int)tile.frameX;
                    int num4 = 0;
                    while (num3 >= 5000)
                    {
                        num3 -= 5000;
                        ++num4;
                    }
                    if (num4 != 0)
                        flag2 = true;
                }
                if (flag2)
                {
                    damageAmount = 0;
                    Main.blockMouse = true;
                }
            }
            if (!WorldGen.CanKillTile(x, y))
                damageAmount = 0;
            if (this.hitTile.AddDamage(tileId, damageAmount, true) >= 100)
            {
                AchievementsHelper.CurrentlyMining = true;
                this.hitTile.Clear(tileId);
                if (Main.netMode == 1 && Main.tileContainer[(int)Main.tile[x, y].type])
                {
                    WorldGen.KillTile(x, y, true, false, false);
                    NetMessage.SendData(17, -1, -1, "", 0, (float)x, (float)y, 1f, 0, 0, 0);
                    if ((int)Main.tile[x, y].type == 21)
                        NetMessage.SendData(34, -1, -1, "", 1, (float)x, (float)y, 0.0f, 0, 0, 0);
                    if ((int)Main.tile[x, y].type == 88)
                        NetMessage.SendData(34, -1, -1, "", 3, (float)x, (float)y, 0.0f, 0, 0, 0);
                }
                else
                {
                    int j = y;
                    bool flag = Main.tile[x, j].active();
                    WorldGen.KillTile(x, j, false, false, false);
                    if (flag && !Main.tile[x, j].active())
                        AchievementsHelper.HandleMining();
                    if (Main.netMode == 1)
                        NetMessage.SendData(17, -1, -1, "", 0, (float)x, (float)j, 0.0f, 0, 0, 0);
                }
                AchievementsHelper.CurrentlyMining = false;
            }
            else
            {
                WorldGen.KillTile(x, y, true, false, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(17, -1, -1, "", 0, (float)x, (float)y, 1f, 0, 0, 0);
            }
            if (damageAmount == 0)
                return;
            this.hitTile.Prune();
        }

        public bool ItemFitsWeaponRack(Item i)
        {
            bool flag = false;
            if (i.fishingPole > 0)
                flag = true;
            switch (i.netID)
            {
                case 905:
                case 1326:
                    flag = true;
                    break;
            }
            if ((i.damage > 0 || flag) && i.useStyle > 0)
                return i.stack > 0;
            return false;
        }

        public void PlaceWeapon(int x, int y)
        {
            if (!Main.tile[x, y].active() || (int)Main.tile[x, y].type != 334)
                return;
            int num1 = (int)Main.tile[x, y].frameY;
            int num2 = 1;
            int num3;
            for (num3 = num1 / 18; num2 > num3; num3 = (int)Main.tile[x, y].frameY / 18)
                ++y;
            for (; num2 < num3; num3 = (int)Main.tile[x, y].frameY / 18)
                --y;
            int num4 = (int)Main.tile[x, y].frameX;
            int num5 = 0;
            while (num4 >= 5000)
            {
                num4 -= 5000;
                ++num5;
            }
            if (num5 != 0)
                num4 = (num5 - 1) * 18;
            bool flag = false;
            if (num4 >= 54)
            {
                num4 -= 54;
                flag = true;
            }
            x -= num4 / 18;
            int num6 = (int)Main.tile[x, y].frameX;
            WorldGen.KillTile(x, y, true, false, false);
            if (Main.netMode == 1)
                NetMessage.SendData(17, -1, -1, "", 0, (float)x, (float)y, 1f, 0, 0, 0);
            if (Main.netMode == 1)
                NetMessage.SendData(17, -1, -1, "", 0, (float)(x + 1), (float)y, 1f, 0, 0, 0);
            while (num6 >= 5000)
                num6 -= 5000;
            Main.blockMouse = true;
            int num7 = 5000;
            int num8 = 10000;
            if (flag)
            {
                num7 = 20000;
                num8 = 25000;
            }
            Main.tile[x, y].frameX = (short)(this.inventory[this.selectedItem].netID + num7 + 100);
            Main.tile[x + 1, y].frameX = (short)((int)this.inventory[this.selectedItem].prefix + num8);
            if (Main.netMode == 1)
                NetMessage.SendTileSquare(-1, x, y, 1);
            if (Main.netMode == 1)
                NetMessage.SendTileSquare(-1, x + 1, y, 1);
            --this.inventory[this.selectedItem].stack;
            if (this.inventory[this.selectedItem].stack <= 0)
            {
                this.inventory[this.selectedItem].SetDefaults(0, false);
                Main.mouseItem.SetDefaults(0, false);
            }
            if (this.selectedItem == 58)
                Main.mouseItem = this.inventory[this.selectedItem].Clone();
            this.releaseUseItem = false;
            this.mouseInterface = true;
        }

        public bool ItemFitsItemFrame(Item i)
        {
            return i.stack > 0;
        }

        public void PlaceItemInFrame(int x, int y)
        {
            if ((int)Main.tile[x, y].frameX % 36 != 0)
                --x;
            if ((int)Main.tile[x, y].frameY % 36 != 0)
                --y;
            int index = TEItemFrame.Find(x, y);
            if (index == -1)
                return;
            if (((TEItemFrame)TileEntity.ByID[index]).item.stack > 0)
            {
                WorldGen.KillTile(x, y, true, false, false);
                if (Main.netMode == 1)
                    NetMessage.SendData(17, -1, -1, "", 0, (float)Player.tileTargetX, (float)y, 1f, 0, 0, 0);
            }
            if (Main.netMode == 1)
                NetMessage.SendData(89, -1, -1, "", x, (float)y, (float)this.selectedItem, (float)this.whoAmI, 0, 0, 0);
            else
                TEItemFrame.TryPlacing(x, y, this.inventory[this.selectedItem].netID, (int)this.inventory[this.selectedItem].prefix, this.inventory[this.selectedItem].stack);
            --this.inventory[this.selectedItem].stack;
            if (this.inventory[this.selectedItem].stack <= 0)
            {
                this.inventory[this.selectedItem].SetDefaults(0, false);
                Main.mouseItem.SetDefaults(0, false);
            }
            if (this.selectedItem == 58)
                Main.mouseItem = this.inventory[this.selectedItem].Clone();
            this.releaseUseItem = false;
            this.mouseInterface = true;
        }

        public Color GetImmuneAlpha(Color newColor, float alphaReduction)
        {
            float scale = (float)((int)byte.MaxValue - this.immuneAlpha) / (float)byte.MaxValue;
            if ((double)alphaReduction > 0.0)
                scale *= 1f - alphaReduction;
            if (this.immuneAlpha > 125)
                return Color.Transparent;
            return Color.Multiply(newColor, scale);
        }

        public Color GetImmuneAlphaPure(Color newColor, float alphaReduction)
        {
            float scale = (float)((int)byte.MaxValue - this.immuneAlpha) / (float)byte.MaxValue;
            if ((double)alphaReduction > 0.0)
                scale *= 1f - alphaReduction;
            return Color.Multiply(newColor, scale);
        }

        public Color GetDeathAlpha(Color newColor)
        {
            int r = (int)newColor.R + (int)((double)this.immuneAlpha * 0.9);
            int g = (int)newColor.G + (int)((double)this.immuneAlpha * 0.5);
            int b = (int)newColor.B + (int)((double)this.immuneAlpha * 0.5);
            int a = (int)newColor.A + (int)((double)this.immuneAlpha * 0.4);
            if (a < 0)
                a = 0;
            if (a > (int)byte.MaxValue)
                a = (int)byte.MaxValue;
            return new Color(r, g, b, a);
        }

        public void addDPS(int dmg)
        {
            if (this.dpsStarted)
            {
                this.dpsLastHit = DateTime.Now;
                this.dpsDamage += dmg;
                this.dpsEnd = DateTime.Now;
            }
            else
            {
                this.dpsStarted = true;
                this.dpsStart = DateTime.Now;
                this.dpsEnd = DateTime.Now;
                this.dpsLastHit = DateTime.Now;
                this.dpsDamage = dmg;
            }
        }

        public void checkDPSTime()
        {
            if (!this.dpsStarted || (DateTime.Now - this.dpsLastHit).Seconds < 3)
                return;
            this.dpsStarted = false;
        }

        public int getDPS()
        {
            TimeSpan timeSpan1 = this.dpsEnd - this.dpsStart;
            float num = (float)timeSpan1.Milliseconds / 1000f + (float)timeSpan1.Seconds + (float)timeSpan1.Minutes / 60f;
            if ((double)num >= 3.0)
            {
                this.dpsStart = DateTime.Now;
                this.dpsStart = this.dpsStart.AddSeconds(-1.0);
                this.dpsDamage = (int)((double)this.dpsDamage / (double)num);
                TimeSpan timeSpan2 = this.dpsEnd - this.dpsStart;
                num = (float)timeSpan2.Milliseconds / 1000f + (float)timeSpan2.Seconds + (float)timeSpan2.Minutes / 60f;
            }
            if ((double)num < 1.0)
                num = 1f;
            return (int)((float)this.dpsDamage / num);
        }

        public int DropCoins()
        {
            int num1 = 0;
            for (int index = 0; index < 59; ++index)
            {
                if (this.inventory[index].itemId >= 71 && this.inventory[index].itemId <= 74)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.inventory[index].itemId, 1, false, 0, false);
                    int num2 = this.inventory[index].stack / 2;
                    if (Main.expertMode)
                        num2 = (int)((double)this.inventory[index].stack * 0.25);
                    int num3 = this.inventory[index].stack - num2;
                    this.inventory[index].stack -= num3;
                    if (this.inventory[index].itemId == 71)
                        num1 += num3;
                    if (this.inventory[index].itemId == 72)
                        num1 += num3 * 100;
                    if (this.inventory[index].itemId == 73)
                        num1 += num3 * 10000;
                    if (this.inventory[index].itemId == 74)
                        num1 += num3 * 1000000;
                    if (this.inventory[index].stack <= 0)
                        this.inventory[index] = new Item();
                    Main.item[number].stack = num3;
                    Main.item[number].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
                    Main.item[number].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
                    Main.item[number].noGrabDelay = 100;
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    if (index == 58)
                        Main.mouseItem = this.inventory[index].Clone();
                }
            }
            this.lostCoins = num1;
            this.lostCoinString = Main.ValueToCoins(this.lostCoins);
            return num1;
        }

        public void DropItems()
        {
            for (int index = 0; index < 59; ++index)
            {
                if (this.inventory[index].stack > 0 && this.inventory[index].name != "Copper Pickaxe" && (this.inventory[index].name != "Copper Axe" && this.inventory[index].name != "Copper Shortsword"))
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.inventory[index].itemId, 1, false, 0, false);
                    Main.item[number].netDefaults(this.inventory[index].netID);
                    Main.item[number].Prefix((int)this.inventory[index].prefix);
                    Main.item[number].stack = this.inventory[index].stack;
                    Main.item[number].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
                    Main.item[number].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
                    Main.item[number].noGrabDelay = 100;
                    Main.item[number].newAndShiny = false;
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                }
                this.inventory[index] = new Item();
                if (index < this.armor.Length)
                {
                    if (this.armor[index].stack > 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.armor[index].itemId, 1, false, 0, false);
                        Main.item[number].netDefaults(this.armor[index].netID);
                        Main.item[number].Prefix((int)this.armor[index].prefix);
                        Main.item[number].stack = this.armor[index].stack;
                        Main.item[number].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
                        Main.item[number].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
                        Main.item[number].noGrabDelay = 100;
                        Main.item[number].newAndShiny = false;
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    this.armor[index] = new Item();
                }
                if (index < this.dye.Length)
                {
                    if (this.dye[index].stack > 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.dye[index].itemId, 1, false, 0, false);
                        Main.item[number].netDefaults(this.dye[index].netID);
                        Main.item[number].Prefix((int)this.dye[index].prefix);
                        Main.item[number].stack = this.dye[index].stack;
                        Main.item[number].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
                        Main.item[number].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
                        Main.item[number].noGrabDelay = 100;
                        Main.item[number].newAndShiny = false;
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    this.dye[index] = new Item();
                }
                if (index < this.miscEquips.Length)
                {
                    if (this.miscEquips[index].stack > 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.miscEquips[index].itemId, 1, false, 0, false);
                        Main.item[number].netDefaults(this.miscEquips[index].netID);
                        Main.item[number].Prefix((int)this.miscEquips[index].prefix);
                        Main.item[number].stack = this.miscEquips[index].stack;
                        Main.item[number].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
                        Main.item[number].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
                        Main.item[number].noGrabDelay = 100;
                        Main.item[number].newAndShiny = false;
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    this.miscEquips[index] = new Item();
                }
                if (index < this.miscDyes.Length)
                {
                    if (this.miscDyes[index].stack > 0)
                    {
                        int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, this.miscDyes[index].itemId, 1, false, 0, false);
                        Main.item[number].netDefaults(this.miscDyes[index].netID);
                        Main.item[number].Prefix((int)this.miscDyes[index].prefix);
                        Main.item[number].stack = this.miscDyes[index].stack;
                        Main.item[number].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
                        Main.item[number].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
                        Main.item[number].noGrabDelay = 100;
                        Main.item[number].newAndShiny = false;
                        if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, "", number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    this.miscDyes[index] = new Item();
                }
            }
			GiveStartEquipment();
			Main.mouseItem = new Item();
        }

        public object Clone()
        {
            return this.MemberwiseClone();
        }

        public object clientClone()
        {
            Player player = new Player();
            player.zone1 = this.zone1;
            player.zone2 = this.zone2;
            player.MinionTargetPoint = this.MinionTargetPoint;
            player.direction = this.direction;
            player.selectedItem = this.selectedItem;
            player.controlUp = this.controlUp;
            player.controlDown = this.controlDown;
            player.controlLeft = this.controlLeft;
            player.controlRight = this.controlRight;
            player.controlJump = this.controlJump;
            player.controlUseItem = this.controlUseItem;
            player.statLife = this.statLife;
            player.statLifeMax = this.statLifeMax;
            player.statMana = this.statMana;
            player.statManaMax = this.statManaMax;
            player.position.X = this.position.X;
            player.chest = this.chest;
            player.talkNPC = this.talkNPC;
            player.hideVisual = this.hideVisual;
            player.hideMisc = this.hideMisc;
            for (int index = 0; index < 59; ++index)
            {
                player.inventory[index] = this.inventory[index].Clone();
                if (index < this.armor.Length)
                    player.armor[index] = this.armor[index].Clone();
                if (index < this.dye.Length)
                    player.dye[index] = this.dye[index].Clone();
                if (index < this.miscEquips.Length)
                    player.miscEquips[index] = this.miscEquips[index].Clone();
                if (index < this.miscDyes.Length)
                    player.miscDyes[index] = this.miscDyes[index].Clone();
                if (index < this.bank.item.Length)
                    player.bank.item[index] = this.bank.item[index].Clone();
                if (index < this.bank2.item.Length)
                    player.bank2.item[index] = this.bank2.item[index].Clone();
            }
            player.trashItem = this.trashItem.Clone();
            for (int index = 0; index < 22; ++index)
            {
                player.buffType[index] = this.buffType[index];
                player.buffTime[index] = this.buffTime[index];
            }
            return (object)player;
        }

        public static bool CheckSpawn(int x, int y)
        {
            if (x < 10 || x > Main.maxTilesX - 10 || (y < 10 || y > Main.maxTilesX - 10) || (Main.tile[x, y - 1] == null || !Main.tile[x, y - 1].active() || (int)Main.tile[x, y - 1].type != 79))
                return false;
            for (int index1 = x - 1; index1 <= x + 1; ++index1)
            {
                for (int index2 = y - 3; index2 < y; ++index2)
                {
                    if (Main.tile[index1, index2] == null)
                        return false;
                    if (Main.tile[index1, index2].nactive() && Main.tileSolid[(int)Main.tile[index1, index2].type] && !Main.tileSolidTop[(int)Main.tile[index1, index2].type])
                    {
                        Main.NewText("Your bed is obstructed.", byte.MaxValue, (byte)240, (byte)20, false);
                        return false;
                    }
                }
            }
            return WorldGen.StartRoomCheck(x, y - 1);
        }

        public void FindSpawn()
        {
            for (int index = 0; index < 200; ++index)
            {
                if (this.spN[index] == null)
                {
                    this.SpawnX = -1;
                    this.SpawnY = -1;
                    break;
                }
                if (this.spN[index] == Main.worldName && this.spI[index] == Main.worldID)
                {
                    this.SpawnX = this.spX[index];
                    this.SpawnY = this.spY[index];
                    break;
                }
            }
        }

        public void RemoveSpawn()
        {
            this.SpawnX = -1;
            this.SpawnY = -1;
            for (int index1 = 0; index1 < 200 && this.spN[index1] != null; ++index1)
            {
                if (this.spN[index1] == Main.worldName && this.spI[index1] == Main.worldID)
                {
                    for (int index2 = index1; index2 < 199; ++index2)
                    {
                        this.spN[index2] = this.spN[index2 + 1];
                        this.spI[index2] = this.spI[index2 + 1];
                        this.spX[index2] = this.spX[index2 + 1];
                        this.spY[index2] = this.spY[index2 + 1];
                    }
                    this.spN[199] = (string)null;
                    this.spI[199] = 0;
                    this.spX[199] = 0;
                    this.spY[199] = 0;
                    break;
                }
            }
        }

        public void ChangeSpawn(int x, int y)
        {
            for (int index1 = 0; index1 < 200 && this.spN[index1] != null; ++index1)
            {
                if (this.spN[index1] == Main.worldName && this.spI[index1] == Main.worldID)
                {
                    for (int index2 = index1; index2 > 0; --index2)
                    {
                        this.spN[index2] = this.spN[index2 - 1];
                        this.spI[index2] = this.spI[index2 - 1];
                        this.spX[index2] = this.spX[index2 - 1];
                        this.spY[index2] = this.spY[index2 - 1];
                    }
                    this.spN[0] = Main.worldName;
                    this.spI[0] = Main.worldID;
                    this.spX[0] = x;
                    this.spY[0] = y;
                    return;
                }
            }
            for (int index = 199; index > 0; --index)
            {
                if (this.spN[index - 1] != null)
                {
                    this.spN[index] = this.spN[index - 1];
                    this.spI[index] = this.spI[index - 1];
                    this.spX[index] = this.spX[index - 1];
                    this.spY[index] = this.spY[index - 1];
                }
            }
            this.spN[0] = Main.worldName;
            this.spI[0] = Main.worldID;
            this.spX[0] = x;
            this.spY[0] = y;
        }

        public static void SavePlayer(PlayerFileData playerFile, bool skipMapSave = false)
        {
            Main.Achievements.Save();
            string path = playerFile.Path;
            Player player = playerFile.Player;
            if (!skipMapSave)
            {
                try
                {
                    if (Main.mapEnabled)
                        Main.Map.Save();
                    Directory.CreateDirectory(Main.PlayerPath);
                }
                catch
                {
                }
            }
            if (Main.ServerSideCharacter || path == null || path == "")
                return;

            if (FileUtilities.Exists(path))
                FileUtilities.Copy(path, path + ".bak");

            RijndaelManaged rijndaelManaged = new RijndaelManaged();
            
            using (Stream stream = new FileStream(path, FileMode.Create))
            {
                using (CryptoStream cryptoStream = new CryptoStream(stream, 
                    rijndaelManaged.CreateEncryptor(Player.ENCRYPTION_KEY, Player.ENCRYPTION_KEY), 
                    CryptoStreamMode.Write))
                {
                    using (BinaryWriter writer = new BinaryWriter(cryptoStream))
                    {
                        writer.Write(Main.curRelease);
                        playerFile.Metadata.Write(writer);
                        writer.Write(player.name);
                        writer.Write(player.difficulty);
                        writer.Write(playerFile.GetPlayTime().Ticks);
                        writer.Write(player.hair);
                        writer.Write(player.hairDye);
                        BitsByte bitsByte1 = (BitsByte)(byte)0;
                        for (int index = 0; index < 8; ++index)
                            bitsByte1[index] = player.hideVisual[index];
                        writer.Write((byte)bitsByte1);
                        BitsByte bitsByte2 = (BitsByte)(byte)0;
                        for (int index = 0; index < 2; ++index)
                            bitsByte2[index] = player.hideVisual[index + 8];
                        writer.Write((byte)bitsByte2);
                        writer.Write((byte)player.hideMisc);
                        writer.Write((byte)player.skinVariant);
                        writer.Write(player.statLife);
                        writer.Write(player.statLifeMax);
                        writer.Write(player.statMana);
                        writer.Write(player.statManaMax);
                        writer.Write(player.extraAccessory);
                        writer.Write(player.taxMoney);
                        writer.Write(player.hairColor.R);
                        writer.Write(player.hairColor.G);
                        writer.Write(player.hairColor.B);
                        writer.Write(player.skinColor.R);
                        writer.Write(player.skinColor.G);
                        writer.Write(player.skinColor.B);
                        writer.Write(player.eyeColor.R);
                        writer.Write(player.eyeColor.G);
                        writer.Write(player.eyeColor.B);
                        writer.Write(player.shirtColor.R);
                        writer.Write(player.shirtColor.G);
                        writer.Write(player.shirtColor.B);
                        writer.Write(player.underShirtColor.R);
                        writer.Write(player.underShirtColor.G);
                        writer.Write(player.underShirtColor.B);
                        writer.Write(player.pantsColor.R);
                        writer.Write(player.pantsColor.G);
                        writer.Write(player.pantsColor.B);
                        writer.Write(player.shoeColor.R);
                        writer.Write(player.shoeColor.G);
                        writer.Write(player.shoeColor.B);
                        for (int index = 0; index < player.armor.Length; ++index)
                        {
                            if (player.armor[index].name == null)
                                player.armor[index].name = "";
                            writer.Write(player.armor[index].netID);
                            writer.Write(player.armor[index].prefix);
                        }
                        for (int index = 0; index < player.dye.Length; ++index)
                        {
                            writer.Write(player.dye[index].netID);
                            writer.Write(player.dye[index].prefix);
                        }
                        for (int index = 0; index < 58; ++index)
                        {
                            if (player.inventory[index].name == null)
                                player.inventory[index].name = "";
                            writer.Write(player.inventory[index].netID);
                            writer.Write(player.inventory[index].stack);
                            writer.Write(player.inventory[index].prefix);
                            writer.Write(player.inventory[index].favorited);
                        }
                        for (int index = 0; index < player.miscEquips.Length; ++index)
                        {
                            writer.Write(player.miscEquips[index].netID);
                            writer.Write(player.miscEquips[index].prefix);
                            writer.Write(player.miscDyes[index].netID);
                            writer.Write(player.miscDyes[index].prefix);
                        }
                        for (int index = 0; index < 40; ++index)
                        {
                            if (player.bank.item[index].name == null)
                                player.bank.item[index].name = "";
                            writer.Write(player.bank.item[index].netID);
                            writer.Write(player.bank.item[index].stack);
                            writer.Write(player.bank.item[index].prefix);
                        }
                        for (int index = 0; index < 40; ++index)
                        {
                            if (player.bank2.item[index].name == null)
                                player.bank2.item[index].name = "";
                            writer.Write(player.bank2.item[index].netID);
                            writer.Write(player.bank2.item[index].stack);
                            writer.Write(player.bank2.item[index].prefix);
                        }
                        for (int index = 0; index < 22; ++index)
                        {
                            if (Main.buffNoSave[player.buffType[index]])
                            {
                                writer.Write(0);
                                writer.Write(0);
                            }
                            else
                            {
                                writer.Write(player.buffType[index]);
                                writer.Write(player.buffTime[index]);
                            }
                        }
                        for (int index = 0; index < 200; ++index)
                        {
                            if (player.spN[index] == null)
                            {
                                writer.Write(-1);
                                break;
                            }
                            writer.Write(player.spX[index]);
                            writer.Write(player.spY[index]);
                            writer.Write(player.spI[index]);
                            writer.Write(player.spN[index]);
                        }
                        writer.Write(player.hbLocked);
                        for (int index = 0; index < player.hideInfo.Length; ++index)
                            writer.Write(player.hideInfo[index]);
                        writer.Write(player.anglerQuestsFinished);
                        writer.Flush();
                        cryptoStream.FlushFinalBlock();
                        stream.Flush();
                    }
                }
            }
        }

        public static PlayerFileData LoadPlayer(string playerPath, bool cloudSave)
        {
            PlayerFileData playerFileData = new PlayerFileData(playerPath);
            if (Main.rand == null)
                Main.rand = new Random((int)DateTime.Now.Ticks);
            Player player1 = new Player();
            try
            {
                RijndaelManaged rijndaelManaged = new RijndaelManaged();
                rijndaelManaged.Padding = PaddingMode.None;
                using (MemoryStream memoryStream = new MemoryStream(FileUtilities.ReadAllBytes(playerPath)))
                {
                    using (CryptoStream cryptoStream = new CryptoStream((Stream)memoryStream, rijndaelManaged.CreateDecryptor(Player.ENCRYPTION_KEY, Player.ENCRYPTION_KEY), CryptoStreamMode.Read))
                    {
                        using (BinaryReader binaryReader = new BinaryReader((Stream)cryptoStream))
                        {
                            int release = binaryReader.ReadInt32();
                            if (release >= 135)
                                playerFileData.Metadata = FileMetadata.Read(binaryReader, FileType.Player);
                            else
                                playerFileData.Metadata = FileMetadata.FromCurrentSettings(FileType.Player);
                            if (release > Main.curRelease)
                            {
                                player1.loadStatus = 1;
                                player1.name = binaryReader.ReadString();
                                playerFileData.Player = player1;
                                return playerFileData;
                            }
                            player1.name = binaryReader.ReadString();
                            if (release >= 10)
                            {
                                if (release >= 17)
                                    player1.difficulty = binaryReader.ReadByte();
                                else if (binaryReader.ReadBoolean())
                                    player1.difficulty = (byte)2;
                            }
                            if (release >= 138)
                                playerFileData.SetPlayTime(new TimeSpan(binaryReader.ReadInt64()));
                            else
                                playerFileData.SetPlayTime(TimeSpan.Zero);
                            player1.hair = binaryReader.ReadInt32();
                            if (release >= 82)
                                player1.hairDye = binaryReader.ReadByte();
                            if (release >= 124)
                            {
                                BitsByte bitsByte = (BitsByte)binaryReader.ReadByte();
                                for (int index = 0; index < 8; ++index)
                                    player1.hideVisual[index] = bitsByte[index];
                                bitsByte = (BitsByte)binaryReader.ReadByte();
                                for (int index = 0; index < 2; ++index)
                                    player1.hideVisual[index + 8] = bitsByte[index];
                            }
                            else if (release >= 83)
                            {
                                BitsByte bitsByte = (BitsByte)binaryReader.ReadByte();
                                for (int index = 0; index < 8; ++index)
                                    player1.hideVisual[index] = bitsByte[index];
                            }
                            if (release >= 119)
                                player1.hideMisc = (BitsByte)binaryReader.ReadByte();
                            if (release <= 17)
                                player1.Male = player1.hair != 5 && player1.hair != 6 && (player1.hair != 9 && player1.hair != 11);
                            else if (release < 107)
                                player1.Male = binaryReader.ReadBoolean();
                            else
                                player1.skinVariant = (int)binaryReader.ReadByte();
                            player1.statLife = binaryReader.ReadInt32();
                            player1.statLifeMax = binaryReader.ReadInt32();
                            if (player1.statLifeMax > 500)
                                player1.statLifeMax = 500;
                            player1.statMana = binaryReader.ReadInt32();
                            player1.statManaMax = binaryReader.ReadInt32();
                            if (player1.statManaMax > 200)
                                player1.statManaMax = 200;
                            if (player1.statMana > 400)
                                player1.statMana = 400;
                            if (release >= 125)
                                player1.extraAccessory = binaryReader.ReadBoolean();
                            if (release >= 128)
                                player1.taxMoney = binaryReader.ReadInt32();
                            player1.hairColor = Utils.ReadRGB(binaryReader);
                            player1.skinColor = Utils.ReadRGB(binaryReader);
                            player1.eyeColor = Utils.ReadRGB(binaryReader);
                            player1.shirtColor = Utils.ReadRGB(binaryReader);
                            player1.underShirtColor = Utils.ReadRGB(binaryReader);
                            player1.pantsColor = Utils.ReadRGB(binaryReader);
                            player1.shoeColor = Utils.ReadRGB(binaryReader);
                            Main.player[Main.myPlayer].shirtColor = player1.shirtColor;
                            Main.player[Main.myPlayer].pantsColor = player1.pantsColor;
                            Main.player[Main.myPlayer].hairColor = player1.hairColor;
                            if (release >= 38)
                            {
                                if (release < 124)
                                {
                                    int num = 11;
                                    if (release >= 81)
                                        num = 16;
                                    for (int index1 = 0; index1 < num; ++index1)
                                    {
                                        int index2 = index1;
                                        if (index2 >= 8)
                                            index2 += 2;
                                        player1.armor[index2].netDefaults(binaryReader.ReadInt32());
                                        player1.armor[index2].Prefix((int)binaryReader.ReadByte());
                                    }
                                }
                                else
                                {
                                    int num = 20;
                                    for (int index = 0; index < num; ++index)
                                    {
                                        player1.armor[index].netDefaults(binaryReader.ReadInt32());
                                        player1.armor[index].Prefix((int)binaryReader.ReadByte());
                                    }
                                }
                                if (release >= 47)
                                {
                                    int num = 3;
                                    if (release >= 81)
                                        num = 8;
                                    if (release >= 124)
                                        num = 10;
                                    for (int index1 = 0; index1 < num; ++index1)
                                    {
                                        int index2 = index1;
                                        player1.dye[index2].netDefaults(binaryReader.ReadInt32());
                                        player1.dye[index2].Prefix((int)binaryReader.ReadByte());
                                    }
                                }
                                if (release >= 58)
                                {
                                    for (int index = 0; index < 58; ++index)
                                    {
                                        int type = binaryReader.ReadInt32();
                                        if (type >= 3601)
                                        {
                                            player1.inventory[index].netDefaults(0);
                                        }
                                        else
                                        {
                                            player1.inventory[index].netDefaults(type);
                                            player1.inventory[index].stack = binaryReader.ReadInt32();
                                            player1.inventory[index].Prefix((int)binaryReader.ReadByte());
                                            if (release >= 114)
                                                player1.inventory[index].favorited = binaryReader.ReadBoolean();
                                        }
                                    }
                                }
                                else
                                {
                                    for (int index = 0; index < 48; ++index)
                                    {
                                        int type = binaryReader.ReadInt32();
                                        if (type >= 3601)
                                        {
                                            player1.inventory[index].netDefaults(0);
                                        }
                                        else
                                        {
                                            player1.inventory[index].netDefaults(type);
                                            player1.inventory[index].stack = binaryReader.ReadInt32();
                                            player1.inventory[index].Prefix((int)binaryReader.ReadByte());
                                        }
                                    }
                                }
                                if (release >= 117)
                                {
                                    if (release < 136)
                                    {
                                        for (int index = 0; index < 5; ++index)
                                        {
                                            if (index != 1)
                                            {
                                                int type1 = binaryReader.ReadInt32();
                                                if (type1 >= 3601)
                                                {
                                                    player1.miscEquips[index].netDefaults(0);
                                                }
                                                else
                                                {
                                                    player1.miscEquips[index].netDefaults(type1);
                                                    player1.miscEquips[index].Prefix((int)binaryReader.ReadByte());
                                                }
                                                int type2 = binaryReader.ReadInt32();
                                                if (type2 >= 3601)
                                                {
                                                    player1.miscDyes[index].netDefaults(0);
                                                }
                                                else
                                                {
                                                    player1.miscDyes[index].netDefaults(type2);
                                                    player1.miscDyes[index].Prefix((int)binaryReader.ReadByte());
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        for (int index = 0; index < 5; ++index)
                                        {
                                            int type1 = binaryReader.ReadInt32();
                                            if (type1 >= 3601)
                                            {
                                                player1.miscEquips[index].netDefaults(0);
                                            }
                                            else
                                            {
                                                player1.miscEquips[index].netDefaults(type1);
                                                player1.miscEquips[index].Prefix((int)binaryReader.ReadByte());
                                            }
                                            int type2 = binaryReader.ReadInt32();
                                            if (type2 >= 3601)
                                            {
                                                player1.miscDyes[index].netDefaults(0);
                                            }
                                            else
                                            {
                                                player1.miscDyes[index].netDefaults(type2);
                                                player1.miscDyes[index].Prefix((int)binaryReader.ReadByte());
                                            }
                                        }
                                    }
                                }
                                if (release >= 58)
                                {
                                    for (int index = 0; index < 40; ++index)
                                    {
                                        player1.bank.item[index].netDefaults(binaryReader.ReadInt32());
                                        player1.bank.item[index].stack = binaryReader.ReadInt32();
                                        player1.bank.item[index].Prefix((int)binaryReader.ReadByte());
                                    }
                                    for (int index = 0; index < 40; ++index)
                                    {
                                        player1.bank2.item[index].netDefaults(binaryReader.ReadInt32());
                                        player1.bank2.item[index].stack = binaryReader.ReadInt32();
                                        player1.bank2.item[index].Prefix((int)binaryReader.ReadByte());
                                    }
                                }
                                else
                                {
                                    for (int index = 0; index < 20; ++index)
                                    {
                                        player1.bank.item[index].netDefaults(binaryReader.ReadInt32());
                                        player1.bank.item[index].stack = binaryReader.ReadInt32();
                                        player1.bank.item[index].Prefix((int)binaryReader.ReadByte());
                                    }
                                    for (int index = 0; index < 20; ++index)
                                    {
                                        player1.bank2.item[index].netDefaults(binaryReader.ReadInt32());
                                        player1.bank2.item[index].stack = binaryReader.ReadInt32();
                                        player1.bank2.item[index].Prefix((int)binaryReader.ReadByte());
                                    }
                                }
                            }
                            else
                            {
                                for (int index = 0; index < 8; ++index)
                                {
                                    player1.armor[index].SetDefaults(Item.VersionName(binaryReader.ReadString(), release));
                                    if (release >= 36)
                                        player1.armor[index].Prefix((int)binaryReader.ReadByte());
                                }
                                if (release >= 6)
                                {
                                    for (int index = 8; index < 11; ++index)
                                    {
                                        player1.armor[index].SetDefaults(Item.VersionName(binaryReader.ReadString(), release));
                                        if (release >= 36)
                                            player1.armor[index].Prefix((int)binaryReader.ReadByte());
                                    }
                                }
                                for (int index = 0; index < 44; ++index)
                                {
                                    player1.inventory[index].SetDefaults(Item.VersionName(binaryReader.ReadString(), release));
                                    player1.inventory[index].stack = binaryReader.ReadInt32();
                                    if (release >= 36)
                                        player1.inventory[index].Prefix((int)binaryReader.ReadByte());
                                }
                                if (release >= 15)
                                {
                                    for (int index = 44; index < 48; ++index)
                                    {
                                        player1.inventory[index].SetDefaults(Item.VersionName(binaryReader.ReadString(), release));
                                        player1.inventory[index].stack = binaryReader.ReadInt32();
                                        if (release >= 36)
                                            player1.inventory[index].Prefix((int)binaryReader.ReadByte());
                                    }
                                }
                                for (int index = 0; index < 20; ++index)
                                {
                                    player1.bank.item[index].SetDefaults(Item.VersionName(binaryReader.ReadString(), release));
                                    player1.bank.item[index].stack = binaryReader.ReadInt32();
                                    if (release >= 36)
                                        player1.bank.item[index].Prefix((int)binaryReader.ReadByte());
                                }
                                if (release >= 20)
                                {
                                    for (int index = 0; index < 20; ++index)
                                    {
                                        player1.bank2.item[index].SetDefaults(Item.VersionName(binaryReader.ReadString(), release));
                                        player1.bank2.item[index].stack = binaryReader.ReadInt32();
                                        if (release >= 36)
                                            player1.bank2.item[index].Prefix((int)binaryReader.ReadByte());
                                    }
                                }
                            }
                            if (release < 58)
                            {
                                for (int index = 40; index < 48; ++index)
                                {
                                    player1.inventory[index + 10] = player1.inventory[index].Clone();
                                    player1.inventory[index].SetDefaults(0, false);
                                }
                            }
                            if (release >= 11)
                            {
                                int num = 22;
                                if (release < 74)
                                    num = 10;
                                for (int index = 0; index < num; ++index)
                                {
                                    player1.buffType[index] = binaryReader.ReadInt32();
                                    player1.buffTime[index] = binaryReader.ReadInt32();
                                    if (player1.buffType[index] == 0)
                                    {
                                        --index;
                                        --num;
                                    }
                                }
                            }
                            for (int index = 0; index < 200; ++index)
                            {
                                int num = binaryReader.ReadInt32();
                                if (num != -1)
                                {
                                    player1.spX[index] = num;
                                    player1.spY[index] = binaryReader.ReadInt32();
                                    player1.spI[index] = binaryReader.ReadInt32();
                                    player1.spN[index] = binaryReader.ReadString();
                                }
                                else
                                    break;
                            }
                            if (release >= 16)
                                player1.hbLocked = binaryReader.ReadBoolean();
                            if (release >= 115)
                            {
                                int num = 13;
                                for (int index = 0; index < num; ++index)
                                    player1.hideInfo[index] = binaryReader.ReadBoolean();
                            }
                            if (release >= 98)
                                player1.anglerQuestsFinished = binaryReader.ReadInt32();
                            player1.skinVariant = (int)MathHelper.Clamp((float)player1.skinVariant, 0.0f, 7f);
                            for (int index = 3; index < 8 + player1.extraAccessorySlots; ++index)
                            {
                                int num = player1.armor[index].itemId;
                                if (num == 908)
                                    player1.lavaMax += 420;
                                if (num == 906)
                                    player1.lavaMax += 420;
                                if (player1.wingsLogic == 0 && (int)player1.armor[index].wingSlot >= 0)
                                    player1.wingsLogic = (int)player1.armor[index].wingSlot;
                                if (num == 158 || num == 396 || (num == 1250 || num == 1251) || num == 1252)
                                    player1.noFallDmg = true;
                                player1.lavaTime = player1.lavaMax;
                            }
                        }
                    }
                }
                player1.PlayerFrame();
                player1.loadStatus = 0;
                playerFileData.Player = player1;
                return playerFileData;
            }
            catch
            {
            }
            Player player2 = new Player();
            player2.loadStatus = 2;
            if (player1.name != "")
            {
                player2.name = player1.name;
            }
            else
            {
                string[] strArray = playerPath.Split(Path.DirectorySeparatorChar);
                player1.name = strArray[strArray.Length - 1].Split('.')[0];
            }
            playerFileData.Player = player2;
            return playerFileData;
        }

        public static PlayerFileData GetFileData(string file, bool cloudSave)
        {
            if (file == null)
                return (PlayerFileData)null;
            PlayerFileData playerFileData = Player.LoadPlayer(file, cloudSave);
            if (playerFileData.Player == null)
                return (PlayerFileData)null;
            if (playerFileData.Player.loadStatus != 0 && playerFileData.Player.loadStatus != 1)
            {
                if (FileUtilities.Exists(file + ".bak"))
                    FileUtilities.Move(file + ".bak", file, true);
                playerFileData = Player.LoadPlayer(file, cloudSave);
                if (playerFileData.Player == null)
                    return (PlayerFileData)null;
            }
            return playerFileData;
        }

        public Color GetHairColor(bool useLighting = true)
        {
            Color color = Lighting.GetColor((int)((double)this.position.X + (double)this.width * 0.5) / 16, (int)(((double)this.position.Y + (double)this.height * 0.25) / 16.0));
            return GameShaders.Hair.GetColor((short)this.hairDye, this, useLighting ? color : Color.White);
        }

        public bool HasItem(int type)
        {
            for (int index = 0; index < 58; ++index)
            {
                if (type == this.inventory[index].itemId && this.inventory[index].stack > 0)
                    return true;
            }
            return false;
        }

        public int FindItem(int netid)
        {
            for (int index = 0; index < 58; ++index)
            {
                if (netid == this.inventory[index].netID && this.inventory[index].stack > 0)
                    return index;
            }
            return -1;
        }

        public int FindItem(List<int> netids)
        {
            for (int index = 0; index < 58; ++index)
            {
                if (this.inventory[index].stack > 0 && netids.Contains(this.inventory[index].netID))
                    return index;
            }
            return -1;
        }

        public int FindItem(bool[] validtypes)
        {
            for (int index = 0; index < 58; ++index)
            {
                if (this.inventory[index].stack > 0 && validtypes[this.inventory[index].itemId])
                    return index;
            }
            return -1;
        }

        public void TeleportationPotion()
        {
            bool flag1 = false;
            int num1 = 0;
            int num2 = 0;
            int num3 = 0;
            int Width = this.width;
            Vector2 Position = new Vector2((float)num2, (float)num3) * 16f + new Vector2((float)(-Width / 2 + 8), (float)-this.height);
            while (!flag1 && num1 < 1000)
            {
                ++num1;
                int index1 = 100 + Main.rand.Next(Main.maxTilesX - 200);
                int index2 = 100 + Main.rand.Next(Main.maxTilesY - 200);
                Position = new Vector2((float)index1, (float)index2) * 16f + new Vector2((float)(-Width / 2 + 8), (float)-this.height);
                if (!Collision.SolidCollision(Position, Width, this.height))
                {
                    if (Main.tile[index1, index2] == null)
                        Main.tile[index1, index2] = new Tile();
                    if (((int)Main.tile[index1, index2].wall != 87 || (double)index2 <= Main.worldSurface || NPC.downedPlantBoss) && (!Main.wallDungeon[(int)Main.tile[index1, index2].wall] || (double)index2 <= Main.worldSurface || NPC.downedBoss3))
                    {
                        int num4 = 0;
                        while (num4 < 100)
                        {
                            if (Main.tile[index1, index2 + num4] == null)
                                Main.tile[index1, index2 + num4] = new Tile();
                            Tile tile = Main.tile[index1, index2 + num4];
                            Position = new Vector2((float)index1, (float)(index2 + num4)) * 16f + new Vector2((float)(-Width / 2 + 8), (float)-this.height);
                            Vector4 vector4 = Collision.SlopeCollision(Position, this.velocity, Width, this.height, this.gravDir, false);
                            bool flag2 = !Collision.SolidCollision(Position, Width, this.height);
                            if ((double)vector4.Z == (double)this.velocity.X)
                            {
                                double num5 = (double)this.velocity.Y;
                            }
                            if (flag2)
                                ++num4;
                            else if (!tile.active() || tile.inActive() || !Main.tileSolid[(int)tile.type])
                                ++num4;
                            else
                                break;
                        }
                        if (!Collision.LavaCollision(Position, Width, this.height) && (double)Collision.HurtTiles(Position, this.velocity, Width, this.height, false).Y <= 0.0)
                        {
                            Collision.SlopeCollision(Position, this.velocity, Width, this.height, this.gravDir, false);
                            if (Collision.SolidCollision(Position, Width, this.height) && num4 < 99)
                            {
                                Vector2 Velocity1 = Vector2.UnitX * 16f;
                                if (!(Collision.TileCollision(Position - Velocity1, Velocity1, this.width, this.height, false, false, (int)this.gravDir) != Velocity1))
                                {
                                    Vector2 Velocity2 = -Vector2.UnitX * 16f;
                                    if (!(Collision.TileCollision(Position - Velocity2, Velocity2, this.width, this.height, false, false, (int)this.gravDir) != Velocity2))
                                    {
                                        Vector2 Velocity3 = Vector2.UnitY * 16f;
                                        if (!(Collision.TileCollision(Position - Velocity3, Velocity3, this.width, this.height, false, false, (int)this.gravDir) != Velocity3))
                                        {
                                            Vector2 Velocity4 = -Vector2.UnitY * 16f;
                                            if (!(Collision.TileCollision(Position - Velocity4, Velocity4, this.width, this.height, false, false, (int)this.gravDir) != Velocity4))
                                            {
                                                flag1 = true;
                                                int num5 = index2 + num4;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!flag1)
                return;
            Vector2 newPos = Position;
            this.Teleport(newPos, 2, 0);
            this.velocity = Vector2.Zero;
            if (Main.netMode != 2)
                return;
            RemoteClient.CheckSection(this.whoAmI, this.position, 1);
            NetMessage.SendData(65, -1, -1, "", 0, (float)this.whoAmI, newPos.X, newPos.Y, 3, 0, 0);
        }

        public void GetAnglerReward()
        {
            Item newItem1 = new Item();
            newItem1.itemId = 0;
            float num1 = 1f;
            if (this.anglerQuestsFinished <= 50)
                num1 -= (float)this.anglerQuestsFinished * 0.01f;
            else if (this.anglerQuestsFinished <= 100)
                num1 = (float)(0.5 - (double)(this.anglerQuestsFinished - 50) * 0.00499999988824129);
            else if (this.anglerQuestsFinished <= 150)
                num1 = (float)(0.25 - (double)(this.anglerQuestsFinished - 100) * (1.0 / 500.0));
            if (this.anglerQuestsFinished == 5)
                newItem1.SetDefaults(2428, false);
            else if (this.anglerQuestsFinished == 10)
                newItem1.SetDefaults(2367, false);
            else if (this.anglerQuestsFinished == 15)
                newItem1.SetDefaults(2368, false);
            else if (this.anglerQuestsFinished == 20)
                newItem1.SetDefaults(2369, false);
            else if (this.anglerQuestsFinished == 30)
                newItem1.SetDefaults(2294, false);
            else if (this.anglerQuestsFinished > 75 && Main.rand.Next((int)(250.0 * (double)num1)) == 0)
                newItem1.SetDefaults(2294, false);
            else if (Main.hardMode && this.anglerQuestsFinished > 25 && Main.rand.Next((int)(100.0 * (double)num1)) == 0)
                newItem1.SetDefaults(2422, false);
            else if (Main.hardMode && this.anglerQuestsFinished > 10 && Main.rand.Next((int)(70.0 * (double)num1)) == 0)
                newItem1.SetDefaults(2494, false);
            else if (Main.hardMode && this.anglerQuestsFinished > 10 && Main.rand.Next((int)(70.0 * (double)num1)) == 0)
                newItem1.SetDefaults(3031, false);
            else if (Main.hardMode && this.anglerQuestsFinished > 10 && Main.rand.Next((int)(70.0 * (double)num1)) == 0)
                newItem1.SetDefaults(3032, false);
            else if (Main.rand.Next((int)(80.0 * (double)num1)) == 0)
                newItem1.SetDefaults(3183, false);
            else if (Main.rand.Next((int)(60.0 * (double)num1)) == 0)
                newItem1.SetDefaults(2360, false);
            else if (Main.rand.Next((int)(40.0 * (double)num1)) == 0)
                newItem1.SetDefaults(2373, false);
            else if (Main.rand.Next((int)(40.0 * (double)num1)) == 0)
                newItem1.SetDefaults(2374, false);
            else if (Main.rand.Next((int)(40.0 * (double)num1)) == 0)
                newItem1.SetDefaults(2375, false);
            else if (Main.rand.Next((int)(40.0 * (double)num1)) == 0)
                newItem1.SetDefaults(3120, false);
            else if (Main.rand.Next((int)(40.0 * (double)num1)) == 0)
                newItem1.SetDefaults(3037, false);
            else if (Main.rand.Next((int)(40.0 * (double)num1)) == 0)
                newItem1.SetDefaults(3096, false);
            else if (Main.rand.Next((int)(40.0 * (double)num1)) == 0)
                newItem1.SetDefaults(2417, false);
            else if (Main.rand.Next((int)(40.0 * (double)num1)) == 0)
            {
                newItem1.SetDefaults(2498, false);
            }
            else
            {
                switch (Main.rand.Next(70))
                {
                    case 0:
                        newItem1.SetDefaults(2442, false);
                        break;
                    case 1:
                        newItem1.SetDefaults(2443, false);
                        break;
                    case 2:
                        newItem1.SetDefaults(2444, false);
                        break;
                    case 3:
                        newItem1.SetDefaults(2445, false);
                        break;
                    case 4:
                        newItem1.SetDefaults(2497, false);
                        break;
                    case 5:
                        newItem1.SetDefaults(2495, false);
                        break;
                    case 6:
                        newItem1.SetDefaults(2446, false);
                        break;
                    case 7:
                        newItem1.SetDefaults(2447, false);
                        break;
                    case 8:
                        newItem1.SetDefaults(2448, false);
                        break;
                    case 9:
                        newItem1.SetDefaults(2449, false);
                        break;
                    case 10:
                        newItem1.SetDefaults(2490, false);
                        break;
                    case 11:
                        newItem1.SetDefaults(2435, false);
                        newItem1.stack = Main.rand.Next(50, 151);
                        break;
                    case 12:
                        newItem1.SetDefaults(2496, false);
                        break;
                    default:
                        switch (Main.rand.Next(3))
                        {
                            case 0:
                                newItem1.SetDefaults(2354, false);
                                newItem1.stack = Main.rand.Next(2, 6);
                                break;
                            case 1:
                                newItem1.SetDefaults(2355, false);
                                newItem1.stack = Main.rand.Next(2, 6);
                                break;
                            default:
                                newItem1.SetDefaults(2356, false);
                                newItem1.stack = Main.rand.Next(2, 6);
                                break;
                        }
                        break;
                }
            }
            newItem1.position = this.Center;
            Item obj1 = this.GetItem(this.whoAmI, newItem1, true, false);
            if (obj1.stack > 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, obj1.itemId, obj1.stack, false, 0, true);
                if (Main.netMode == 1)
                    NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            if (newItem1.itemId == 2417)
            {
                Item newItem2 = new Item();
                Item newItem3 = new Item();
                newItem2.SetDefaults(2418, false);
                newItem2.position = this.Center;
                Item obj2 = this.GetItem(this.whoAmI, newItem2, true, false);
                if (obj2.stack > 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, obj2.itemId, obj2.stack, false, 0, true);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                newItem3.SetDefaults(2419, false);
                newItem3.position = this.Center;
                Item obj3 = this.GetItem(this.whoAmI, newItem3, true, false);
                if (obj3.stack > 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, obj3.itemId, obj3.stack, false, 0, true);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
            }
            else if (newItem1.itemId == 2498)
            {
                Item newItem2 = new Item();
                Item newItem3 = new Item();
                newItem2.SetDefaults(2499, false);
                newItem2.position = this.Center;
                Item obj2 = this.GetItem(this.whoAmI, newItem2, true, false);
                if (obj2.stack > 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, obj2.itemId, obj2.stack, false, 0, true);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
                newItem3.SetDefaults(2500, false);
                newItem3.position = this.Center;
                Item obj3 = this.GetItem(this.whoAmI, newItem3, true, false);
                if (obj3.stack > 0)
                {
                    int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, obj3.itemId, obj3.stack, false, 0, true);
                    if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
                }
            }
            Item newItem4 = new Item();
            int num2 = (int)((double)(int)((double)((this.anglerQuestsFinished + 50) / 2 * Main.rand.Next(50, 201)) * 0.0149999996647239) * 1.5);
            if (Main.expertMode)
                num2 *= 2;
            if (num2 > 100)
            {
                int num3 = num2 / 100;
                if (num3 > 10)
                    num3 = 10;
                if (num3 < 1)
                    num3 = 1;
                newItem4.SetDefaults(73, false);
                newItem4.stack = num3;
            }
            else
            {
                if (num2 > 99)
                    num2 = 99;
                if (num2 < 1)
                    num2 = 1;
                newItem4.SetDefaults(72, false);
                newItem4.stack = num2;
            }
            newItem4.position = this.Center;
            Item obj4 = this.GetItem(this.whoAmI, newItem4, true, false);
            if (obj4.stack > 0)
            {
                int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, obj4.itemId, obj4.stack, false, 0, true);
                if (Main.netMode == 1)
                    NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            if (Main.rand.Next((int)(100.0 * (double)num1)) > 50)
                return;
            Item newItem5 = new Item();
            if (Main.rand.Next((int)(15.0 * (double)num1)) == 0)
                newItem5.SetDefaults(2676, false);
            else if (Main.rand.Next((int)(5.0 * (double)num1)) == 0)
                newItem5.SetDefaults(2675, false);
            else
                newItem5.SetDefaults(2674, false);
            if (Main.rand.Next(25) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            if (Main.rand.Next(50) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            if (Main.rand.Next(100) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            if (Main.rand.Next(150) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            if (Main.rand.Next(200) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            if (Main.rand.Next(250) <= this.anglerQuestsFinished)
                ++newItem5.stack;
            newItem5.position = this.Center;
            Item obj5 = this.GetItem(this.whoAmI, newItem5, true, false);
            if (obj5.stack <= 0)
                return;
            int number1 = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, obj5.itemId, obj5.stack, false, 0, true);
            if (Main.netMode != 1)
                return;
            NetMessage.SendData(21, -1, -1, "", number1, 1f, 0.0f, 0.0f, 0, 0, 0);
        }

        public void GetDyeTraderReward()
        {
            List<int> list = new List<int>()
      {
        3560,
        3028,
        3041,
        3040,
        3025,
        3190,
        3027,
        3026,
        3554,
        3553,
        3555,
        2872,
        3534,
        2871
      };
            if (Main.hardMode)
            {
                list.Add(3039);
                list.Add(3038);
                list.Add(3598);
                list.Add(3597);
                list.Add(3600);
                list.Add(3042);
                list.Add(3533);
                list.Add(3561);
                if (NPC.downedMechBossAny)
                {
                    list.Add(2883);
                    list.Add(2869);
                    list.Add(2873);
                    list.Add(2870);
                }
                if (NPC.downedPlantBoss)
                {
                    list.Add(2878);
                    list.Add(2879);
                    list.Add(2884);
                    list.Add(2885);
                }
                if (NPC.downedMartians)
                {
                    list.Add(2864);
                    list.Add(3556);
                }
                if (NPC.downedMoonlord)
                    list.Add(3024);
            }
            int Type = list[Main.rand.Next(list.Count)];
            Item newItem = new Item();
            newItem.SetDefaults(Type, false);
            newItem.stack = 3;
            newItem.position = this.Center;
            Item obj = this.GetItem(this.whoAmI, newItem, true, false);
            if (obj.stack <= 0)
                return;
            int number = Item.NewItem((int)this.position.X, (int)this.position.Y, this.width, this.height, obj.itemId, obj.stack, false, 0, true);
            if (Main.netMode != 1)
                return;
            NetMessage.SendData(21, -1, -1, "", number, 1f, 0.0f, 0.0f, 0, 0, 0);
        }

        public bool CheckMana(int amount, bool pay = false, bool blockQuickMana = false)
        {
            int num = (int)((double)amount * (double)this.manaCost);
            if (this.statMana >= num)
            {
                if (pay)
                    this.statMana -= num;
                return true;
            }
            if (!this.manaFlower || blockQuickMana)
                return false;
            this.QuickMana();
            if (this.statMana < num)
                return false;
            if (pay)
                this.statMana -= num;
            return true;
        }

        public void TryPortalJumping()
        {
            if (this.mount.Active || this.dead)
                return;
            PortalHelper.TryGoingThroughPortals((Entity)this);
        }

        public bool ConsumeSolarFlare()
        {
            if (!this.setSolar || this.solarShields <= 0)
                return false;
            if (Main.netMode == 1 && this.whoAmI != Main.myPlayer)
                return true;
            --this.solarShields;
            for (int b = 0; b < 22; ++b)
            {
                if (this.buffType[b] >= 170 && this.buffType[b] <= 172)
                    this.DelBuff(b);
            }
            if (this.solarShields > 0)
                this.AddBuff(170 + this.solarShields - 1, 5, false);
            this.solarCounter = 0;
            return true;
        }

        public void KeyDoubleTap(int keyDir)
        {
            if (keyDir != 0)
                return;
            if (this.setVortex && !this.mount.Active)
                this.vortexStealthActive = !this.vortexStealthActive;
            if (!this.setStardust)
                return;
            this.MinionTargetAim();
        }

        public void KeyHoldDown(int keyDir, int holdTime)
        {
            if (keyDir != 0 || !this.setStardust || holdTime < 60)
                return;
            this.MinionTargetPoint = Vector2.Zero;
        }

        public void MinionTargetAim()
        {
            Vector2 mouseWorld = Main.MouseWorld;
            float num1 = mouseWorld.Y;
            int i = (int)mouseWorld.X / 16;
            int index1 = (int)num1 / 16;
            int num2 = 0;
            if (Main.tile[i, index1].nactive() && Main.tileSolid[(int)Main.tile[i, index1].type] && !Main.tileSolidTop[(int)Main.tile[i, index1].type])
            {
                int num3 = 0;
                for (int index2 = 0; index2 > -20 && index1 + index2 > 1; --index2)
                {
                    int index3 = index1 + index2;
                    if (Main.tile[i, index3].nactive() && Main.tileSolid[(int)Main.tile[i, index3].type] && !Main.tileSolidTop[(int)Main.tile[i, index3].type])
                    {
                        num3 = index2;
                    }
                    else
                    {
                        num3 = index2;
                        break;
                    }
                }
                int num4 = 0;
                for (int index2 = 0; index2 < 20 && index1 + index2 < Main.maxTilesY; ++index2)
                {
                    int index3 = index1 + index2;
                    if (Main.tile[i, index3].nactive() && Main.tileSolid[(int)Main.tile[i, index3].type] && !Main.tileSolidTop[(int)Main.tile[i, index3].type])
                    {
                        num4 = index2;
                    }
                    else
                    {
                        num4 = index2;
                        break;
                    }
                }
                num2 = num4 <= -num3 ? num4 + 3 : num3 - 2;
            }
            int num5 = index1 + num2;
            bool flag = false;
            for (int j = num5; j < num5 + 5; ++j)
            {
                if (WorldGen.SolidTileAllowBottomSlope(i, j))
                    flag = true;
            }
            while (!flag)
            {
                ++num5;
                for (int j = num5; j < num5 + 5; ++j)
                {
                    if (WorldGen.SolidTileAllowBottomSlope(i, j))
                        flag = true;
                }
            }
            Vector2 Other = new Vector2((float)(i * 16 + 8), (float)(num5 * 16));
            if ((double)this.Distance(Other) > 1000.0)
                return;
            this.MinionTargetPoint = Other;
        }

        public void UpdateMinionTarget()
        {
            if (this.whoAmI != Main.myPlayer)
                return;
            if ((double)this.Distance(this.MinionTargetPoint) > 1000.0)
                this.MinionTargetPoint = Vector2.Zero;
            if (!this.stardustGuardian || !this.HasMinionTarget)
                return;
            Vector2 Position = this.MinionTargetPoint;
            float num1 = (float)this.miscCounter / 150f;
            float num2 = 2.094395f;
            for (int index1 = 0; index1 < 3; ++index1)
            {
                int index2 = Dust.NewDust(Position, 0, 0, 135, 0.0f, 0.0f, 100, new Color(), 1.5f);
                Main.dust[index2].noGravity = true;
                Main.dust[index2].velocity = Vector2.Zero;
                Main.dust[index2].noLight = true;
                Main.dust[index2].position = Position + Utils.ToRotationVector2((float)((double)num1 * 6.28318548202515 + (double)num2 * (double)index1)) * 4f;
                Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(this.cPet, this);
            }
        }

        public void NebulaLevelup(int type)
        {
            if (this.whoAmI != Main.myPlayer)
                return;
            int time1 = 480;
            for (int b = 0; b < 22; ++b)
            {
                if (this.buffType[b] >= type && this.buffType[b] < type + 3)
                    this.DelBuff(b);
            }
            switch (type)
            {
                case 173:
                    this.nebulaLevelLife = (int)MathHelper.Clamp((float)(this.nebulaLevelLife + 1), 0.0f, 3f);
                    this.AddBuff(type + this.nebulaLevelLife - 1, time1, true);
                    break;
                case 176:
                    this.nebulaLevelMana = (int)MathHelper.Clamp((float)(this.nebulaLevelMana + 1), 0.0f, 3f);
                    this.AddBuff(type + this.nebulaLevelMana - 1, time1, true);
                    break;
                case 179:
                    this.nebulaLevelDamage = (int)MathHelper.Clamp((float)(this.nebulaLevelDamage + 1), 0.0f, 3f);
                    this.AddBuff(type + this.nebulaLevelDamage - 1, time1, true);
                    break;
            }
        }

        public void UpdateTouchingTiles()
        {
            this.TouchedTiles.Clear();
            List<Point> list1 = (List<Point>)null;
            List<Point> list2 = (List<Point>)null;
            if (!Collision.IsClearSpotHack(this.position + this.velocity, 16f, this.width, this.height, false, false, (int)this.gravDir, true, true))
                list1 = Collision.FindCollisionTile(Math.Sign(this.velocity.Y) == 1 ? 2 : 3, this.position + this.velocity, 16f, this.width, this.height, false, false, (int)this.gravDir, true, false);
            if (!Collision.IsClearSpotHack(this.position, Math.Abs(this.velocity.Y), this.width, this.height, false, false, (int)this.gravDir, true, true))
                list2 = Collision.FindCollisionTile(Math.Sign(this.velocity.Y) == 1 ? 2 : 3, this.position, Math.Abs(this.velocity.Y), this.width, this.height, false, false, (int)this.gravDir, true, true);
            if (list1 != null && list2 != null)
            {
                for (int index = 0; index < list2.Count; ++index)
                {
                    if (!list1.Contains(list2[index]))
                        list1.Add(list2[index]);
                }
            }
            if (list1 == null && list2 != null)
                list1 = list2;
            if (list1 == null)
                return;
            this.TouchedTiles = list1;
        }

        public class SmartCursorSettings
        {
            public static bool SmartBlocksEnabled = false;
            public static bool SmartWallReplacement = true;
        }

        public struct OverheadMessage
        {
            public string chatText;
            public TextSnippet[] snippets;
            public Vector2 messageSize;
            public int timeLeft;

            public void NewMessage(string message, int displayTime)
            {
                this.chatText = message;
                this.snippets = ChatManager.ParseMessage(this.chatText, Color.White);
                this.messageSize = ChatManager.GetStringSize(Main.fontMouseText, this.snippets, Vector2.One, -1f);
                this.timeLeft = displayTime;
            }
        }
    }
}
