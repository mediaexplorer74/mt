using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
//using System.Windows.Forms;
using Microsoft.Win32;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using ReLogic.Content;
using ReLogic.Content.Sources;
using ReLogic.Graphics;
//using ReLogic.Localization.IME;
using ReLogic.OS;
using ReLogic.Peripherals.RGB;
using ReLogic.Utilities;
using GameManager.Achievements;
using GameManager.Audio;
using GameManager.Chat;
using GameManager.Cinematics;
using GameManager.DataStructures;
using GameManager.Enums;
using GameManager.GameContent;
using GameManager.GameContent.Achievements;
using GameManager.GameContent.Ambience;
using GameManager.GameContent.Bestiary;
using GameManager.GameContent.Creative;
using GameManager.GameContent.Drawing;
using GameManager.GameContent.Events;
using GameManager.GameContent.Golf;
using GameManager.GameContent.ItemDropRules;
using GameManager.GameContent.Liquid;
using GameManager.GameContent.NetModules;
using GameManager.GameContent.Skies;
using GameManager.GameContent.UI;
using GameManager.GameContent.UI.BigProgressBar;
using GameManager.GameContent.UI.Chat;
using GameManager.GameContent.UI.States;
using GameManager.GameInput;
using GameManager.Graphics;
using GameManager.Graphics.Capture;
using GameManager.Graphics.Effects;
using GameManager.Graphics.Light;
using GameManager.Graphics.Renderers;
using GameManager.Graphics.Shaders;
using GameManager.ID;
using GameManager.Initializers;
using GameManager.IO;
using GameManager.Localization;
using GameManager.Map;
using GameManager.Net;
using GameManager.ObjectData;
using GameManager.Social;
using GameManager.UI;
using GameManager.UI.Chat;
using GameManager.UI.Gamepad;
using GameManager.Utilities;
using GameManager.WorldBuilding;
using Game1;

namespace GameManager
{
	public class Main : Game
	{
		public delegate void OnPlayerSelected(PlayerFileData player);

		public static class CurrentFrameFlags
		{
			public static int ActivePlayersCount;

			public static int SleepingPlayersCount;

			public static bool AnyActiveBossNPC;

			public static bool HadAnActiveInteractibleProjectile;
		}

		public enum WorldPreparationState
		{
			AwaitingData,
			ProcessingData,
			Ready
		}

		internal static class NativeMethods
		{
			public const uint ES_CONTINUOUS = 2147483648u;

			public const uint ES_SYSTEM_REQUIRED = 1u;

			[DllImport("kernel32.dll")]
			public static extern uint SetThreadExecutionState(uint esFlags);
		}

		private struct MouseTextCache
		{
			public bool noOverride;

			public bool isValid;

			public string cursorText;

			public int rare;

			public byte diff;

			public int X;

			public int Y;

			public int hackedScreenWidth;

			public int hackedScreenHeight;

			public string buffTooltip;
		}

		protected class TextDisplayCache
		{
			private string _originalText;

			private int _lastScreenWidth;

			private int _lastScreenHeight;

			public string[] TextLines
			{
				get;
				private set;
			}

			public int AmountOfLines
			{
				get;
				private set;
			}

			public void PrepareCache(string text)
			{
				if (false | (screenWidth != _lastScreenWidth) | (screenHeight != _lastScreenHeight) | (_originalText != text))
				{
					_lastScreenWidth = screenWidth;
					_lastScreenHeight = screenHeight;
					_originalText = text;
					TextLines = Utils.WordwrapString(npcChatText, FontAssets.MouseText.Value, 460, 10, out var lineAmount);
					AmountOfLines = lineAmount;
				}
			}
		}

		public struct SceneArea
		{
			public Vector2 SceneLocalScreenPositionOffset;

			public float totalWidth;

			public float totalHeight;

			public int bgTopY;
		}

		public struct InfoToSetBackColor
		{
			public bool isInGameMenuOrIsServer;

			public float CorruptionBiomeInfluence;

			public float CrimsonBiomeInfluence;

			public float JungleBiomeInfluence;

			public float MushroomBiomeInfluence;

			public float GraveyardInfluence;

			public bool BloodMoonActive;

			public bool LanternNightActive;
		}

		private const string versionStringBecauseTheyreTheSame = "v1.4.0.5";

		public const int curRelease = 230;

		public const string assemblyVersionNumber = "1.4.0.5";

		public const string copyrightText = "Copyright Â© 2020 Re-Logic";

		public const ulong WorldGeneratorVersion = 987842478081uL;

		public static Dictionary<string, MinimapFrame> MinimapFrames = new Dictionary<string, MinimapFrame>();

		public static MinimapFrame ActiveMinimapFrame;

		public static Dictionary<string, IPlayerResourcesDisplaySet> PlayerResourcesSets = new Dictionary<string, IPlayerResourcesDisplaySet>();

		public static IPlayerResourcesDisplaySet ActivePlayerResourcesSet;

		public static int mapDelay = 2;

		public const string TerrariaSaveFolderPath = "Terraria";

		public static IAssetRepository Assets;

		public static AssetSourceController AssetSourceController;

		private volatile bool _musicLoaded;

		private volatile bool _artLoaded;

		private volatile bool _begunMainAsyncLoad;

		public static int CurrentDrawnEntityShader;

		public static Entity CurrentDrawnEntity;

		private static bool _WeGameReqExit = false;

		public static float ForcedMinimumZoom = 1f;

		public static SpriteViewMatrix GameViewMatrix;

		public static SpriteViewMatrix BackgroundViewMatrix;

		private static Matrix _currentWantedZoomMatrix;

		private static Matrix _uiScaleMatrix;

		private static float _uiScaleWanted = 1f;

		private static float _uiScaleUsed = 1f;

		public static float GameZoomTarget = 1f;

		public static bool LightingEveryFrame = true;

		public static bool SettingsUnlock_WorldEvil;

		public static bool SettingsEnabled_MinersWobble = true;

		public static bool SettingBlockGamepadsEntirely;

		public static bool SettingDontScaleMainMenuUp;

		public static bool SettingsEnabled_OpaqueBoxBehindTooltips = true;

		public static bool SettingMusicReplayDelayEnabled = false;

		public static bool HidePassword;

		public static bool ReversedUpDownArmorSetBonuses;

		public static Microsoft.Xna.Framework.Color MouseBorderColor = new Microsoft.Xna.Framework.Color(64, 64, 64, 64);

		public static bool MouseShowBuildingGrid;

		public static bool AllowUnfocusedInputOnGamepad;

		public static bool InvisibleCursorForGamepad = true;

		public static bool GamepadDisableCursorItemIconInner = true;

		public static bool GamepadDisableInstructionsDisplay;

		public static bool CrouchingEnabled = false;

		private static GameNotificationType _flashNotificationType = GameNotificationType.All;

		public static float MouseBuildingGridAlpha;

		public static bool CaptureModeDisabled = false;

		public bool unityMouseOver;

		public static Main instance;

		public static ChromaEngine Chroma;

		public static ChromaHotkeyPainter ChromaPainter;

		public static World ActiveWorld = new World();

		public static Camera Camera = new Camera();

		public static IPlayerRenderer PlayerRenderer = new LegacyPlayerRenderer();

		public static IPlayerRenderer PotionOfReturnRenderer = new ReturnGatePlayerRenderer();

		public static MapHeadRenderer MapPlayerRenderer = new MapHeadRenderer();

		public static NPCHeadRenderer TownNPCHeadRenderer = null;

		public static NPCHeadRenderer BossNPCHeadRenderer = null;

		public static string versionNumber = "v1.4.0.5";

		public static string versionNumber2 = "v1.4.0.5";

		public static string SavePath = "/Android/data/ru.mexicanr.terraria/";//"/sdcard";//(Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : Platform.Get<IPathService>().GetStoragePath("Terraria"));

		public static bool AnnouncementBoxDisabled;

		public static int AnnouncementBoxRange = -1;

		public static string AutogenSeedName;

		private static GameModeData _currentGameModeInfo = GameModeData.NormalMode;

		public static Dictionary<int, GameModeData> RegisterdGameModes = new Dictionary<int, GameModeData>
		{
			{
				0,
				GameModeData.NormalMode
			},
			{
				1,
				GameModeData.ExpertMode
			},
			{
				2,
				GameModeData.MasterMode
			},
			{
				3,
				GameModeData.CreativeMode
			}
		};

		private static bool? _overrideForExpertMode = null;

		private static bool? _overrideForMasterMode = null;

		public static bool drunkWorld = false;

		public static bool getGoodWorld = false;

		public static Vector2 destroyerHB = new Vector2(0f, 0f);

		public static FavoritesFile LocalFavoriteData = new FavoritesFile(SavePath + "/favorites.json", isCloud: false);

		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", isCloud: true);

		public static FileMetadata WorldFileMetadata;

		public static FileMetadata MapFileMetadata;

		public static PingMapLayer Pings = new PingMapLayer();

		public static MapIconOverlay MapIcons = new MapIconOverlay().AddLayer(new SpawnMapLayer()).AddLayer(new TeleportPylonsMapLayer()).AddLayer(Pings);

		public static CreativeUI CreativeMenu = new CreativeUI();

		private static Vector2 _lastPingMousePosition = Vector2.Zero;

		private static double _lastPingMouseDownTime = 0.0;

		private AchievementManager _achievements;

		private AchievementAdvisor _achievementAdvisor;

		public static BigProgressBarSystem BigBossProgressBar = new BigProgressBarSystem();

		public static UserInterface MenuUI = new UserInterface();

		public static UserInterface InGameUI = new UserInterface();

		private static OnPlayerSelected _pendingCharacterSelect;

		public static bool drawBackGore;

		public static ulong LobbyId = 0uL;

		private static Microsoft.Xna.Framework.Color[] _mapColorCacheArray = new Microsoft.Xna.Framework.Color[30000];

		public WaterfallManager waterfallManager;

		public static WorldSections sectionManager;

		public static bool ServerSideCharacter;

		public static string clientUUID;

		public static bool ContentLoaded = false;

		private static int toolTipDistance = 6;

		public static float GlobalTimeWrappedHourly;

		public static bool GlobalTimerPaused = false;

		public static GameTime gameTimeCache = new GameTime();

		public static ulong TileFrameSeed = (ulong)Guid.NewGuid().GetHashCode();

		private static ulong _drawCycleCounter;

		public static ContentManager ShaderContentManager;

		public static Ref<Effect> ScreenShaderRef = new Ref<Effect>();

		public static Ref<Effect> PixelShaderRef = new Ref<Effect>();

		public static Ref<Effect> TileShaderRef = new Ref<Effect>();

		public static Ref<Effect> VertexPixelShaderRef = new Ref<Effect>();

		public static int WaveQuality = 3;

		public static bool UseStormEffects = true;

		public static bool UseHeatDistortion = true;

		public static int npcStreamSpeed = 30;

		public static int musicError;

		public static bool dedServFPS;

		public static int dedServCount1;

		public static int dedServCount2;

		public static bool superFast = false;

		public const int offLimitBorderTiles = 40;

		public const int maxItemTypes = 5045;

		public const int maxProjectileTypes = 950;

		public const int maxNPCTypes = 663;

		public const int maxTileSets = 623;

		public const int maxWallTypes = 316;

		public const int maxBuffTypes = 323;

		public const int maxGlowMasks = 301;

		public const int maxExtras = 212;

		public const int maxGoreTypes = 1269;

		public const int maxMusic = 89;

		public const int MaxBannerTypes = 289;

		public const int numArmorHead = 266;

		public const int numArmorBody = 235;

		public const int numArmorLegs = 218;

		public const int numAccHandsOn = 22;

		public const int numAccHandsOff = 14;

		public const int numAccNeck = 11;

		public const int numAccBack = 30;

		public const int numAccFront = 9;

		public const int numAccShoes = 25;

		public const int numAccWaist = 17;

		public const int numAccShield = 10;

		public const int numAccFace = 16;

		public const int numAccBalloon = 18;

		public const int maxWings = 47;

		public const int maxBackgrounds = 298;

		public const int MaxShopIDs = 100;

		private static float cameraLerp;

		private static int cameraLerpTimer;

		private static int cameraLerpTimeToggle;

		private static bool cameraGamePadLerp;

		public static Vector2[] OffsetsNPCOffhand = new Vector2[5]
		{
			new Vector2(14f, 34f),
			new Vector2(14f, 32f),
			new Vector2(14f, 26f),
			new Vector2(14f, 22f),
			new Vector2(14f, 18f)
		};

		public static Vector2[] OffsetsPlayerOffhand = new Vector2[20]
		{
			new Vector2(14f, 20f),
			new Vector2(14f, 20f),
			new Vector2(14f, 20f),
			new Vector2(14f, 18f),
			new Vector2(14f, 20f),
			new Vector2(16f, 4f),
			new Vector2(16f, 16f),
			new Vector2(18f, 14f),
			new Vector2(18f, 14f),
			new Vector2(18f, 14f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f),
			new Vector2(14f, 14f),
			new Vector2(14f, 14f),
			new Vector2(12f, 14f),
			new Vector2(14f, 16f),
			new Vector2(16f, 16f),
			new Vector2(16f, 16f)
		};

		public static Vector2[] OffsetsPlayerOnhand = new Vector2[20]
		{
			new Vector2(6f, 19f),
			new Vector2(5f, 10f),
			new Vector2(12f, 10f),
			new Vector2(13f, 17f),
			new Vector2(12f, 19f),
			new Vector2(5f, 10f),
			new Vector2(7f, 17f),
			new Vector2(6f, 16f),
			new Vector2(6f, 16f),
			new Vector2(6f, 16f),
			new Vector2(6f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f),
			new Vector2(8f, 17f),
			new Vector2(9f, 16f),
			new Vector2(9f, 12f),
			new Vector2(8f, 17f),
			new Vector2(7f, 17f),
			new Vector2(7f, 17f)
		};

		public static Vector2[] OffsetsPlayerHeadgear = new Vector2[20]
		{
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 0f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f),
			new Vector2(0f, 2f)
		};

		public static Vector2 CurrentPan = Vector2.Zero;

		public static float sunCircle;

		public static int BlackFadeIn;

		public static bool noWindowBorder = false;

		public static RasterizerState Rasterizer = RasterizerState.CullCounterClockwise;

		private string _cachedTitle;

		public static int undergroundBackground;

		public static int oldUndergroundBackground;

		public static bool skipMenu = false;

		public static bool verboseNetplay = false;

		public static bool stopTimeOuts = false;

		public static bool showSpam = false;

		public static bool showItemOwner = false;

		public static bool[] townNPCCanSpawn = new bool[663];

		public static int musicBox2 = -1;

		public static byte HealthBarDrawSettings = 1;

		public static bool runningCollectorsEdition;

		public static float wFrCounter;

		public static float wFrame;

		public static float upTimer;

		public static float upTimerMax;

		public static float upTimerMaxDelay;

		public static bool drawDiag;

		public static bool drawRelease;

		public static bool drawBetterDebug;

		public static bool betterDebugRelease;

		public static bool renderNow;

		public static bool drawToScreen;

		public static bool targetSet;

		public static int mouseX;

		public static int mouseY;

		public static int lastMouseX;

		public static int lastMouseY;

		private static ConcurrentQueue<Action> _mainThreadActions = new ConcurrentQueue<Action>();

		public static bool mouseLeft;

		public static bool mouseRight;

		public static bool isMouseLeftConsumedByUI = false;

		public static float essScale = 1f;

		public static int essDir = -1;

		public static float[] cloudBGX = new float[2];

		public static float cloudBGAlpha;

		public static float cloudBGActive;

		public static int[] cloudBG = new int[2]
		{
			112,
			113
		};

		public static int[] treeMntBGSet1 = new int[2];

		public static int[] treeMntBGSet2 = new int[2];

		public static int[] treeMntBGSet3 = new int[2];

		public static int[] treeMntBGSet4 = new int[2];

		public static int[] treeBGSet1 = new int[3];

		public static int[] treeBGSet2 = new int[3];

		public static int[] treeBGSet3 = new int[3];

		public static int[] treeBGSet4 = new int[3];

		public static int[] corruptBG = new int[3];

		public static int[] jungleBG = new int[3];

		public static int[] snowMntBG = new int[2];

		public static int[] snowBG = new int[3];

		public static int[] hallowBG = new int[3];

		public static int[] crimsonBG = new int[3];

		public static int[] desertBG = new int[3];

		public static int[] mushroomBG = new int[3];

		public static int oceanBG;

		public static int[] underworldBG = new int[5];

		public static int[] treeX = new int[4];

		public static int[] treeStyle = new int[4];

		public static int[] caveBackX = new int[4];

		public static int[] caveBackStyle = new int[4];

		public static int iceBackStyle;

		public static int hellBackStyle;

		public static int jungleBackStyle;

		public static string debugWords = "";

		public static bool gamePad = false;

		public static bool xMas;

		public static bool halloween;

		public static bool forceXMasForToday;

		public static bool forceHalloweenForToday;

		public static bool DisableIntenseVisualEffects = false;

		public static int snowDust = 0;

		public static bool changeTheTitle;

		public static bool hairWindow;

		public static bool clothesWindow;

		public static bool ingameOptionsWindow = false;

		public static bool inFancyUI = false;

		public static int keyCount;

		public static string[] keyString = new string[10];

		public static int[] keyInt = new int[10];

		public static byte gFade;

		public static float gFader;

		public static byte gFadeDir = 1;

		public static bool shouldDrawNetDiagnosticsUI;

		public static INetDiagnosticsUI ActiveNetDiagnosticsUI = new NetDiagnosticsUI();

		public static IMultiplayerClosePlayersOverlay ActiveClosePlayersTeamOverlay = new NewMultiplayerClosePlayersOverlay();

		public static double UpdateTimeAccumulator;

		public static bool drawSkip;

		public static int fpsCount;

		public static Stopwatch fpsTimer = new Stopwatch();

		public bool gammaTest;

		private const bool USE_ASYNC_LOAD = true;

		private static bool _isAsyncLoadComplete;

		public static bool showSplash = true;

		public static bool ignoreErrors = true;

		public static string defaultIP = "";

		public static int dayRate = 1;

		public static int desiredWorldTilesUpdateRate = 1;

		public static int maxScreenW = 1920;

		public static int maxScreenH = 1200;

		public static int minScreenW = 800;

		public static int minScreenH = 600;

		public static float iS = 1f;

		public static bool render;

		public static int qaStyle;

		public static int buffScanAreaWidth = (maxScreenW + 800) / 16 - 1;

		public static int buffScanAreaHeight = (maxScreenH + 800) / 16 - 1;

		public static float musicPitch = 0f;

		public static bool[] projHostile = new bool[950];

		public static bool[] projHook = new bool[950];

		public static bool[] pvpBuff = new bool[323];

		public static bool[] persistentBuff = new bool[323];

		public static bool[] vanityPet = new bool[323];

		public static bool[] lightPet = new bool[323];

		public static bool[] meleeBuff = new bool[323];

		public static bool[] debuff = new bool[323];

		public static bool[] buffNoSave = new bool[323];

		public static bool[] buffNoTimeDisplay = new bool[323];

		public static bool[] buffDoubleApply = new bool[323];

		public static int maxMP = 10;

		public static string[] recentWorld = new string[maxMP];

		public static string[] recentIP = new string[maxMP];

		public static int[] recentPort = new int[maxMP];

		public static bool shortRender = true;

		public static bool BackgroundEnabled = true;

		public static int instantBGTransitionCounter = 2;

		public static int bgDelay;

		public static int bgStyle;

		private const int BG_STYLES_COUNT = 14;

		public static float[] bgAlphaFrontLayer = new float[14];

		public static float[] bgAlphaFarBackLayer = new float[14];

		public static int[] bgFrame = new int[14];

		public static int[] bgFrameCounter = new int[14];

		public static int EquipPage;

		public static int EquipPageSelected;

		public int mouseNPCIndex = -1;

		public int mouseNPCType = -1;

		public static int wofNPCIndex = -1;

		public static int wofDrawAreaTop;

		public static int wofDrawAreaBottom;

		public static int wofDrawFrameIndex;

		public static int offScreenRange = 200;

		private RenderTarget2D backWaterTarget;

		public static RenderTarget2D waterTarget;

		private RenderTarget2D tileTarget;

		private RenderTarget2D blackTarget;

		private RenderTarget2D tile2Target;

		private RenderTarget2D wallTarget;

		private RenderTarget2D backgroundTarget;

		public static RenderTarget2D screenTarget;

		public static RenderTarget2D screenTargetSwap;

		public static int maxMapUpdates = 250000;

		public static bool refreshMap;

		public static int loadMapLastX;

		public static bool loadMapLock;

		public static bool loadMap;

		public static bool mapReady;

		public static int textureMaxWidth = 2000;

		public static int textureMaxHeight = 1800;

		public static bool updateMap;

		public static int mapMinX = 0;

		public static int mapMaxX = 0;

		public static int mapMinY;

		public static int mapMaxY;

		public static int mapTimeMax = 30;

		public static int mapTime = mapTimeMax;

		public static bool clearMap;

		public static int mapTargetX = 5;

		public static int mapTargetY = 2;

		private RenderTarget2D[,] mapTarget = new RenderTarget2D[mapTargetX, mapTargetY];

		private RenderTarget2D mapSectionTexture;

		public static bool[,] initMap = new bool[mapTargetX, mapTargetY];

		public static bool[,] mapWasContentLost = new bool[mapTargetX, mapTargetY];

		public const int numInfoIcons = 13;

		public static Microsoft.Xna.Framework.Color OurFavoriteColor = new Microsoft.Xna.Framework.Color(255, 231, 69);

		public static bool mapInit;

		public static bool mapEnabled = true;

		public static int mapStyle = 1;

		public static float grabMapX;

		public static float grabMapY;

		public static int miniMapX;

		public static int miniMapY;

		public static int miniMapWidth;

		public static int miniMapHeight;

		public static float mapMinimapDefaultScale = 1.05f;

		public static float mapMinimapScale = mapMinimapDefaultScale;

		public static float mapMinimapAlpha = 1f;

		public static float mapOverlayScale = 2.5f;

		public static float mapOverlayAlpha = 0.35f;

		public static bool mapFullscreen;

		public static bool resetMapFull;

		public static float mapFullscreenScale = 4f;

		public static Vector2 mapFullscreenPos = new Vector2(-1f, -1f);

		private static bool IsEnginePreloaded;

		private static bool IsEngineLoaded;

		private static uint _gameUpdateCount;

		public static bool SkipAssemblyLoad;

		private int firstTileX;

		private int lastTileX;

		private int firstTileY;

		private int lastTileY;

		private double bgParallax;

		private int bgStartX;

		private int bgLoops;

		private int bgStartY;

		private int bgLoopsY;

		private int bgTopY;

		public static int renderCount = 99;

		private const int MF_BYPOSITION = 1024;

		public static GraphicsDeviceManager graphics;

		public static SpriteBatch spriteBatch;

		public static TileBatch tileBatch;

		public static BasicDebugDrawer DebugDrawer;

		public static SamplerState SamplerStateForCursor = SamplerState.LinearClamp;

		public static GenerationProgress AutogenProgress = new GenerationProgress();

		private static Process tServer;

		private static Stopwatch saveTime = new Stopwatch();

		public static KeyboardState keyState;

		public static KeyboardState oldKeyState;

		public static Microsoft.Xna.Framework.Color mcColor = new Microsoft.Xna.Framework.Color(1f, 0.6f, 0f);

		public static Microsoft.Xna.Framework.Color hcColor = new Microsoft.Xna.Framework.Color(1f, 0.15f, 0.1f);

		public static Microsoft.Xna.Framework.Color creativeModeColor = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.HotPink, Microsoft.Xna.Framework.Color.White, 0.1f);

		public static Microsoft.Xna.Framework.Color highVersionColor = new Microsoft.Xna.Framework.Color(255, 255, 0);

		public static Microsoft.Xna.Framework.Color errorColor = new Microsoft.Xna.Framework.Color(255, 0, 0);

		public static bool craftingHide;

		public static bool armorHide;

		public static float craftingAlpha = 1f;

		public static float armorAlpha = 1f;

		public static float[] buffAlpha = new float[323];

		public static bool hardMode;

		public float chestLootScale = 1f;

		public bool chestLootHover;

		public float chestStackScale = 1f;

		public bool chestStackHover;

		public float chestDepositScale = 1f;

		public bool chestDepositHover;

		public float chestRenameScale = 1f;

		public bool chestRenameHover;

		public float chestCancelScale = 1f;

		public bool chestCancelHover;

		public static Vector2 sceneWaterPos = Vector2.Zero;

		public static Vector2 sceneTilePos = Vector2.Zero;

		public static Vector2 sceneTile2Pos = Vector2.Zero;

		public static Vector2 sceneWallPos = Vector2.Zero;

		public static Vector2 sceneBackgroundPos = Vector2.Zero;

		public static bool maxQ = true;

		public static float gfxQuality = 1f;

		public static float gfxRate = 0.01f;

		public int DiscoStyle;

		public static int DiscoR = 255;

		public static int DiscoB;

		public static int DiscoG;

		public static int teamCooldown;

		public static int teamCooldownLen = 300;

		public static bool gamePaused;

		public static bool gameInactive;

		public static int updatesCountedForFPS;

		public static int drawsCountedForFPS;

		public static int uCount;

		public static int updateRate;

		public static int frameRate;

		public static bool RGBRelease;

		public static bool qRelease = false;

		public static bool netRelease;

		public static bool frameRelease;

		public static bool showFrameRate = false;

		public static int magmaBGFrame;

		public static int magmaBGFrameCounter;

		public static int saveTimer = 0;

		public static bool autoJoin;

		public static bool serverStarting = false;

		public static float leftWorld = 0f;

		public static float rightWorld = 134400f;

		public static float topWorld = 0f;

		public static float bottomWorld = 38400f;

		public static int maxTilesX = (int)rightWorld / 16 + 1;

		public static int maxTilesY = (int)bottomWorld / 16 + 1;

		public const int sectionWidth = 200;

		public const int sectionHeight = 150;

		public static int maxSectionsX = maxTilesX / 200;

		public static int maxSectionsY = maxTilesY / 150;

		public const int maxDust = 6000;

		public static int maxDustToDraw = 6000;

		public const int maxCombatText = 100;

		public const int maxItemText = 20;

		public const int maxPlayers = 255;

		public static int maxNetPlayers = 255;

		public const int maxChests = 8000;

		public const int maxItems = 400;

		public const int maxProjectiles = 1000;

		public const int maxNPCs = 200;

		private static UICharacterSelect _characterSelectMenu = new UICharacterSelect();

		private static UIWorldSelect _worldSelectMenu = new UIWorldSelect();

		public static UIManageControls ManageControlsMenu = new UIManageControls();

		public static UIAchievementsMenu AchievementsMenu = new UIAchievementsMenu();

		public static int maxRain = 750;

		public static int slimeWarningTime;

		public static int slimeWarningDelay = 420;

		public static float slimeRainNPCSlots = 0.65f;

		public static bool[] slimeRainNPC = new bool[663];

		public static double slimeRainTime;

		public static bool slimeRain;

		public static int slimeRainKillCount;

		private const double slimeRainMaxTime = 54000.0;

		private const double slimeRainMinTime = 32400.0;

		private const double slimeRainMaxDelay = 604800.0;

		private const double slimeRainMinDelay = 302400.0;

		private const double slimeRainChance = 1728000.0;

		public const int maxGore = 600;

		public const int InventoryItemSlotsStart = 0;

		public const int InventoryItemSlotsCount = 50;

		public const int InventoryCoinSlotsStart = 50;

		public const int InventoryCoinSlotsCount = 4;

		public const int InventoryAmmoSlotsStart = 54;

		public const int InventoryAmmoSlotsCount = 4;

		public const int InventorySlotsTotal = 58;

		public int invBottom = 210;

		public const int maxLiquidTypes = 13;

		public static float cameraX;

		public static bool drewLava;

		public static float[] liquidAlpha = new float[13];

		public static int waterStyle;

		public static int WorldRollingBackupsCountToKeep = 2;

		private static bool TOWMusicUnlocked = false;

		private static bool swapMusic = false;

		public static float caveParallax = 0.88f;

		public static int dungeonX;

		public static int dungeonY;

		public static Liquid[] liquid = new Liquid[Liquid.maxLiquid];

		public static LiquidBuffer[] liquidBuffer = new LiquidBuffer[50000];

		public static bool dedServ;

		public static int spamCount = 0;

		public static int curMusic;

		public static int dayMusic;

		public static int ugMusic;

		public int newMusic;

		public static bool showItemText = true;

		public static bool autoSave = true;

		public static bool validateSaves = true;

		public static bool bannerMouseOver;

		public static string buffString = "";

		public static string libPath = "";

		public static int lo;

		public static int LogoA = 255;

		public static int LogoB;

		public static bool LogoT;

		public static string statusText = "";

		public static string worldName = "";

		public static int worldID;

		public static int background;

		public static int caveBackground = 0;

		public static float ugBackTransition;

		public static Microsoft.Xna.Framework.Color tileColor;

		public static double worldSurface;

		public static double rockLayer;

		public static Microsoft.Xna.Framework.Color[] teamColor = new Microsoft.Xna.Framework.Color[6];

		public const double dayLength = 54000.0;

		public const double nightLength = 32400.0;

		public static bool dayTime = true;

		public static double time = 13500.0;

		public static double timeForVisualEffects;

		public static int moonPhase;

		public static short sunModY;

		public static short moonModY;

		public static bool alreadyGrabbingSunOrMoon;

		public static bool bloodMoon;

		public static bool pumpkinMoon;

		public static bool snowMoon;

		public static float cloudAlpha;

		public static float maxRaining;

		public static float oldMaxRaining;

		public static int rainTime;

		public static bool raining;

		public static bool eclipse;

		public static float eclipseLight;

		public static int checkForSpawns;

		public static int helpText;

		public static int BartenderHelpTextIndex = 0;

		public static bool autoGen;

		public static bool autoPause = false;

		public static int[] projFrames = new int[950];

		public static bool[] projPet = new bool[950];

		public static float demonTorch = 1f;

		public static int demonTorchDir = 1;

		public static float martianLight = 1f;

		public static int martianLightDir = 1;

		public static float masterColor = 1f;

		public static int masterColorDir = 1;

		public static bool placementPreview = true;

		public static SceneMetrics SceneMetrics;

		public const int maxStars = 400;

		public static int numStars;

		public const int maxStarTypes = 4;

		public const int maxClouds = 200;

		public const int maxCloudTypes = 37;

		public static int weatherCounter;

		public static int numClouds = 200;

		public static int numCloudsTemp = numClouds;

		public static float windSpeedCurrent;

		public static float windSpeedTarget;

		public static int windCounter;

		public static int extremeWindCounter;

		public static bool windPhysics = false;

		public static float windPhysicsStrength = 0.1f;

		public static bool SettingsEnabled_TilesSwayInWind = true;

		public static Cloud[] cloud = new Cloud[200];

		public static bool resetClouds = true;

		public static float SmoothedMushroomLightInfluence;

		public static int fadeCounter;

		public static float invAlpha = 1f;

		public static float invDir = 1f;

		[ThreadStatic]
		public static UnifiedRandom rand;

		public static bool allChestStackHover;

		public static bool inventorySortMouseOver;

		public static float GraveyardVisualIntensity;

		public const int maxMoons = 9;

		public static int moonType = 0;

		public const int numTileColors = 32;

		public const int numTreeStyles = 31;

		public const int numberOfHairstyles = 162;

		public const int maxHairStyles = 162;

		public const int maxCharSelectHair = 51;

		public const int maxHairOfStylistDefault = 123;

		public static bool UseExperimentalFeatures;

		public static string DefaultSeed = "";

		public static AudioEngine engine;

		public static SoundBank soundBank;

		public static WaveBank waveBank;

		public static Cue[] music = new Cue[89];

		public static bool[] musicNoCrossFade = new bool[89];

		public static float[] musicFade = new float[89];

		public static float musicVolume = 1f;

		public static float ambientVolume = 1f;

		public static float soundVolume = 1f;

		public static ServerMode MenuServerMode = ServerMode.Lobby | ServerMode.FriendsCanJoin;

		public static bool[] tileLighted = new bool[623];

		public static bool[] tileMergeDirt = new bool[623];

		public static bool[] tileCut = new bool[623];

		public static bool[] tileAlch = new bool[623];

		public static int[] tileShine = new int[623];

		public static bool[] tileShine2 = new bool[623];

		public static bool[] wallHouse = new bool[316];

		public static bool[] wallDungeon = new bool[316];

		public static bool[] wallLight = new bool[316];

		public static int[] wallBlend = new int[316];

		public static bool[] tileStone = new bool[623];

		public static bool[] tileAxe = new bool[623];

		public static bool[] tileHammer = new bool[623];

		public static bool[] tileWaterDeath = new bool[623];

		public static bool[] tileLavaDeath = new bool[623];

		public static bool[] tileTable = new bool[623];

		public static bool[] tileBlockLight = new bool[623];

		public static bool[] tileNoSunLight = new bool[623];

		public static bool[] tileDungeon = new bool[623];

		public static bool[] tileSpelunker = new bool[623];

		public static bool[] tileSolidTop = new bool[623];

		public static bool[] tileSolid = new bool[623];

		public static bool[] tileBouncy = new bool[623];

		public static short[] tileOreFinderPriority = new short[623];

		public static byte[] tileLargeFrames = new byte[623];

		public static byte[] wallLargeFrames = new byte[316];

		public static bool[] tileRope = new bool[623];

		public static bool[] tileBrick = new bool[623];

		public static bool[] tileMoss = new bool[623];

		public static bool[] tileNoAttach = new bool[623];

		public static bool[] tileNoFail = new bool[623];

		public static bool[] tileCracked = new bool[623];

		public static bool[] tileObsidianKill = new bool[623];

		public static bool[] tileFrameImportant = new bool[623];

		public static bool[] tilePile = new bool[623];

		public static bool[] tileBlendAll = new bool[623];

		public static short[] tileGlowMask = new short[623];

		public static bool[] tileContainer = new bool[623];

		public static bool[] tileSign = new bool[623];

		public static bool[][] tileMerge = new bool[623][];

		public static int cageFrames = 25;

		public static bool critterCage;

		public static int[] bunnyCageFrame = new int[cageFrames];

		public static int[] bunnyCageFrameCounter = new int[cageFrames];

		public static int[] squirrelCageFrame = new int[cageFrames];

		public static int[] squirrelCageFrameCounter = new int[cageFrames];

		public static int[] squirrelCageFrameOrange = new int[cageFrames];

		public static int[] squirrelCageFrameCounterOrange = new int[cageFrames];

		public static int[] mallardCageFrame = new int[cageFrames];

		public static int[] mallardCageFrameCounter = new int[cageFrames];

		public static int[] duckCageFrame = new int[cageFrames];

		public static int[] duckCageFrameCounter = new int[cageFrames];

		public static int[] grebeCageFrame = new int[cageFrames];

		public static int[] grebeCageFrameCounter = new int[cageFrames];

		public static int[] seagullCageFrame = new int[cageFrames];

		public static int[] seagullCageFrameCounter = new int[cageFrames];

		public static int[] birdCageFrame = new int[cageFrames];

		public static int[] birdCageFrameCounter = new int[cageFrames];

		public static int[] redBirdCageFrame = new int[cageFrames];

		public static int[] redBirdCageFrameCounter = new int[cageFrames];

		public static int[] blueBirdCageFrame = new int[cageFrames];

		public static int[] blueBirdCageFrameCounter = new int[cageFrames];

		public static byte[,] butterflyCageMode = new byte[9, cageFrames];

		public static int[,] butterflyCageFrame = new int[9, cageFrames];

		public static int[,] butterflyCageFrameCounter = new int[9, cageFrames];

		public static int[,] dragonflyJarFrameCounter = new int[7, cageFrames];

		public static int[,] dragonflyJarFrame = new int[7, cageFrames];

		public static int[,] scorpionCageFrame = new int[2, cageFrames];

		public static int[,] scorpionCageFrameCounter = new int[2, cageFrames];

		public static int[] snailCageFrame = new int[cageFrames];

		public static int[] snailCageFrameCounter = new int[cageFrames];

		public static int[] snail2CageFrame = new int[cageFrames];

		public static int[] snail2CageFrameCounter = new int[cageFrames];

		public static byte[] fishBowlFrameMode = new byte[cageFrames];

		public static int[] fishBowlFrame = new int[cageFrames];

		public static int[] fishBowlFrameCounter = new int[cageFrames];

		public static int[] lavaFishBowlFrame = new int[cageFrames];

		public static int[] lavaFishBowlFrameCounter = new int[cageFrames];

		public static int[] frogCageFrame = new int[cageFrames];

		public static int[] frogCageFrameCounter = new int[cageFrames];

		public static int[] mouseCageFrame = new int[cageFrames];

		public static int[] mouseCageFrameCounter = new int[cageFrames];

		public static int[] turtleCageFrame = new int[cageFrames];

		public static int[] turtleCageFrameCounter = new int[cageFrames];

		public static int[] fairyJarFrame = new int[cageFrames];

		public static int[] fairyJarFrameCounter = new int[cageFrames];

		public static byte[,] jellyfishCageMode = new byte[3, cageFrames];

		public static int[,] jellyfishCageFrame = new int[3, cageFrames];

		public static int[,] jellyfishCageFrameCounter = new int[3, cageFrames];

		public static int[] wormCageFrame = new int[cageFrames];

		public static int[] wormCageFrameCounter = new int[cageFrames];

		public static int[] maggotCageFrame = new int[cageFrames];

		public static int[] maggotCageFrameCounter = new int[cageFrames];

		public static int[] ratCageFrame = new int[cageFrames];

		public static int[] ratCageFrameCounter = new int[cageFrames];

		public static int[] ladybugCageFrame = new int[cageFrames];

		public static ContentManager content;

		public static int[] ladybugCageFrameCounter = new int[cageFrames];

		public static int[] penguinCageFrame = new int[cageFrames];

		public static int[] penguinCageFrameCounter = new int[cageFrames];

		public static int[] waterStriderCageFrame = new int[cageFrames];

		public static int[] waterStriderCageFrameCounter = new int[cageFrames];

		public static int[] seahorseCageFrame = new int[cageFrames];

		public static int[] seahorseCageFrameCounter = new int[cageFrames];

		public static int[,] slugCageFrame = new int[3, cageFrames];

		public static int[,] slugCageFrameCounter = new int[3, cageFrames];

		public static int[] owlCageFrame = new int[cageFrames];

		public static int[] owlCageFrameCounter = new int[cageFrames];

		public static int[] grasshopperCageFrame = new int[cageFrames];

		public static int[] grasshopperCageFrameCounter = new int[cageFrames];

		public static bool[] tileSand = new bool[623];

		public static bool[] tileFlame = new bool[623];

		public static bool[] npcCatchable = new bool[663];

		public static int[] tileFrame = new int[623];

		public static int[] tileFrameCounter = new int[623];

		public static byte[] wallFrame = new byte[316];

		public static byte[] wallFrameCounter = new byte[316];

		public static int[] backgroundWidth = new int[298];

		public static int[] backgroundHeight = new int[298];

		public static HairstyleUnlocksHelper Hairstyles = new HairstyleUnlocksHelper();

		public static bool tilesLoaded = false;

		public static WorldMap Map = new WorldMap(maxTilesX, maxTilesY);

		public static Tile[,] tile = new Tile[maxTilesX, maxTilesY];

		public static Dust[] dust = new Dust[6001];

		public static Star[] star = new Star[400];

		public static Item[] item = new Item[401];

		public static int[] timeItemSlotCannotBeReusedFor = new int[401];

		public static NPC[] npc = new NPC[201];

		public static Gore[] gore = new Gore[601];

		public static Rain[] rain = new Rain[maxRain + 1];

		public static Projectile[] projectile = new Projectile[1001];

		public static int[,] projectileIdentity = new int[256, 1001];

		public static CombatText[] combatText = new CombatText[100];

		public static PopupText[] popupText = new PopupText[20];

		public static Chest[] chest = new Chest[8000];

		public static Sign[] sign = new Sign[1000];

		public static int[] itemFrame = new int[401];

		public static int[] itemFrameCounter = new int[401];

		public static DrawAnimation[] itemAnimations = new DrawAnimation[5045];

		private static DrawAnimation _coinOnWorldAnimation = new DrawAnimationVertical(6, 8);

		private static DrawAnimation _monkStaffT3OnWorldAnimation = new DrawAnimationVertical(5, 3);

		public static List<int> itemAnimationsRegistered = new List<int>();

		public static Vector2 screenPosition;

		public static Vector2 screenLastPosition;

		public static int screenWidth = 1152;

		public static int screenHeight = 864;

		public static bool screenMaximized = true;

		public static bool screenBorderless = true;

		public static int screenBorderlessPendingResizes;

		public static int teamNamePlateDistance = 2000;

		public static int multiplayerNPCSmoothingRange = 300;

		public static bool Setting_UseReducedMaxLiquids = false;

		public static int PlayerOverheadChatMessageDisplayTime = 400;

		public static object CurrentInputTextTakerOverride;

		public static bool drawingPlayerChat;

		public static bool chatRelease;

		public static string chatText = "";

		public static bool inputTextEnter;

		public static bool inputTextEscape;

		public static float[] hotbarScale = new float[10]
		{
			1f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f,
			0.75f
		};

		public static byte mouseTextColor;

		public static int mouseTextColorChange = 1;

		public static bool mouseLeftRelease;

		public static bool mouseRightRelease;

		public static bool playerInventory;

		public static int stackSplit;

		public static bool preventStackSplitReset;

		public static int stackCounter;

		public static int stackDelay = 7;

		public static int superFastStack;

		public static Item mouseItem = new Item();

		public static Item guideItem = new Item();

		public static Item reforgeItem = new Item();

		public static float inventoryScale = 0.75f;

		public static bool hasFocus;

		public static Microsoft.Xna.Framework.Point rulerLineDisplayValues = default(Microsoft.Xna.Framework.Point);

		public static bool recFastScroll;

		public static bool recBigList;

		public static int recStart;

		public static Recipe[] recipe = new Recipe[Recipe.maxRecipes];

		public static int[] availableRecipe = new int[Recipe.maxRecipes];

		public static float[] availableRecipeY = new float[Recipe.maxRecipes];

		public static int numAvailableRecipes;

		public static int focusRecipe;

		public static int myPlayer;

		public static Player[] player = new Player[256];

		public static Player[] playerVisualClone = new Player[256];

		public static bool[] countsAsHostForGameplay = new bool[256];

		public static int spawnTileX;

		public static int spawnTileY;

		public static bool npcChatRelease;

		public static bool editSign;

		public static bool editChest;

		public static bool blockInput = false;

		public static string blockKey = Microsoft.Xna.Framework.Input.Keys.None.ToString();

		public static string defaultChestName = string.Empty;

		public static string npcChatText = "";

		public static bool npcChatFocus1;

		public static bool npcChatFocus2;

		public static bool npcChatFocus3;

		public static bool npcChatFocus4;

		public static int oldNPCShop;

		public static int npcChatCornerItem;

		public Chest[] shop = new Chest[100];

		public static ItemShopSellbackHelper shopSellbackHelper = new ItemShopSellbackHelper();

		public static int[] travelShop = new int[40];

		public static List<string> anglerWhoFinishedToday = new List<string>();

		public static bool anglerQuestFinished;

		public static int anglerQuest;

		public static int[] anglerQuestItemNetIDs = new int[41]
		{
			2450,
			2451,
			2452,
			2453,
			2454,
			2455,
			2456,
			2457,
			2458,
			2459,
			2460,
			2461,
			2462,
			2463,
			2464,
			2465,
			2466,
			2467,
			2468,
			2469,
			2470,
			2471,
			2472,
			2473,
			2474,
			2475,
			2476,
			2477,
			2478,
			2479,
			2480,
			2481,
			2482,
			2483,
			2484,
			2485,
			2486,
			2487,
			2488,
			4393,
			4394
		};

		public static AmbienceServer AmbienceServer;

		public static ItemDropDatabase ItemDropsDB;

		public static BestiaryDatabase BestiaryDB;

		public static ItemDropResolver ItemDropSolver;

		public static BestiaryUnlocksTracker BestiaryTracker;

		public static UIBestiaryTest BestiaryUI;

		public static TeleportPylonsSystem PylonSystem;

		public static ShopHelper ShopHelper;

		public static GolfState LocalGolfState = new GolfState();

		public static bool Support4K = true;

		public static float MinimumZoomComparerX = 1920f;

		public static float MinimumZoomComparerY = 1200f;

		private static int _renderTargetMaxSize = 2048;

		private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.Reach;

		private static GraphicsProfile _currentGraphicsProfile = GraphicsProfile.Reach;

		public static int LogicCheckScreenWidth = 1920;

		public static int LogicCheckScreenHeight = 1200;

		private static WorldPreparationState _worldPreparationState = WorldPreparationState.AwaitingData;

		public static float temporaryGUIScaleSlider = -1f;

		public static bool temporaryGUIScaleSliderUpdate = false;

		public static bool InGuideCraftMenu;

		public static bool InReforgeMenu;

		public static Item HoverItem = new Item();

		private static int backSpaceCount;

		private static float backSpaceRate;

		public static string motd = "";

		public static bool toggleFullscreen;

		public static int numDisplayModes;

		public static int[] displayWidth = new int[99];

		public static int[] displayHeight = new int[99];

		public static bool gameMenu = true;

		public static bool menuBGChangedDay = false;

		public static bool menuBGChangedNight = false;

		public static bool lockMenuBGChange = false;

		private static int maxLoadPlayer = 1000;

		private static int maxLoadWorld = 1000;

		public static List<PlayerFileData> PlayerList = new List<PlayerFileData>();

		public static PlayerFileData ActivePlayerFileData = new PlayerFileData();

		public static Player PendingPlayer = null;

		public static List<WorldFileData> WorldList = new List<WorldFileData>();

		public static WorldFileData ActiveWorldFileData = new WorldFileData();

		public static string WorldPath = Path.Combine(SavePath, "Worlds");

		public static string CloudWorldPath = "worlds";

		public static string PlayerPath = Path.Combine(SavePath, "Players");

		public static string CloudPlayerPath = "players";

		public static Preferences Configuration = new Preferences(SavePath + Path.DirectorySeparatorChar + "config.json");

		public static Preferences InputProfiles = new Preferences(SavePath + Path.DirectorySeparatorChar + "input profiles.json");

		public static KeyboardState inputText;

		public static KeyboardState oldInputText;

		public static int PendingResolutionWidth = 800;

		public static int PendingResolutionHeight = 600;

		public static bool PendingBorderlessState;

		public static int invasionType;

		public static double invasionX;

		public static int invasionSize;

		public static int invasionDelay;

		public static int invasionWarn;

		public static int invasionSizeStart;

		public static bool invasionProgressNearInvasion;

		public static int invasionProgressMode = 2;

		public static int invasionProgressIcon;

		public static int invasionProgress;

		public static int invasionProgressMax;

		public static int invasionProgressWave;

		public static int invasionProgressDisplayLeft;

		public static float invasionProgressAlpha;

		public static bool HasInteractibleObjectThatIsNotATile = false;

		public int currentNPCShowingChatBubble = -1;

		public static int[] npcFrameCount = new int[663]
		{
			1,
			2,
			2,
			3,
			6,
			2,
			2,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			1,
			2,
			25,
			23,
			25,
			21,
			15,
			26,
			2,
			10,
			1,
			16,
			16,
			16,
			3,
			1,
			15,
			3,
			1,
			3,
			1,
			1,
			21,
			25,
			1,
			1,
			1,
			3,
			3,
			15,
			3,
			7,
			7,
			6,
			5,
			6,
			5,
			3,
			3,
			23,
			6,
			3,
			6,
			6,
			2,
			5,
			6,
			5,
			7,
			7,
			4,
			5,
			8,
			1,
			5,
			1,
			2,
			4,
			16,
			5,
			4,
			4,
			15,
			16,
			16,
			16,
			2,
			4,
			6,
			6,
			18,
			16,
			1,
			1,
			1,
			1,
			1,
			1,
			4,
			3,
			1,
			1,
			1,
			1,
			1,
			1,
			5,
			6,
			7,
			16,
			1,
			1,
			25,
			23,
			12,
			20,
			21,
			1,
			2,
			2,
			3,
			6,
			1,
			1,
			1,
			15,
			4,
			11,
			1,
			23,
			6,
			6,
			3,
			1,
			2,
			2,
			1,
			3,
			4,
			1,
			2,
			1,
			4,
			2,
			1,
			15,
			3,
			25,
			4,
			5,
			7,
			3,
			2,
			12,
			12,
			4,
			4,
			4,
			8,
			8,
			13,
			5,
			6,
			4,
			15,
			23,
			3,
			15,
			8,
			5,
			4,
			13,
			15,
			12,
			4,
			14,
			14,
			3,
			2,
			5,
			3,
			2,
			3,
			23,
			5,
			14,
			16,
			5,
			2,
			2,
			12,
			3,
			3,
			3,
			3,
			2,
			2,
			2,
			2,
			2,
			7,
			14,
			15,
			16,
			8,
			3,
			15,
			15,
			16,
			2,
			3,
			20,
			25,
			23,
			26,
			4,
			4,
			16,
			16,
			20,
			20,
			20,
			2,
			2,
			2,
			2,
			8,
			12,
			3,
			4,
			2,
			4,
			25,
			26,
			26,
			6,
			3,
			3,
			3,
			3,
			3,
			3,
			4,
			4,
			5,
			4,
			6,
			7,
			15,
			4,
			7,
			6,
			1,
			1,
			2,
			4,
			3,
			5,
			3,
			3,
			3,
			4,
			5,
			6,
			4,
			2,
			1,
			8,
			4,
			4,
			1,
			8,
			1,
			4,
			15,
			15,
			15,
			15,
			15,
			15,
			16,
			15,
			15,
			15,
			15,
			15,
			3,
			3,
			3,
			3,
			3,
			3,
			16,
			3,
			6,
			12,
			21,
			21,
			20,
			16,
			15,
			15,
			5,
			5,
			6,
			6,
			5,
			2,
			7,
			2,
			6,
			6,
			6,
			6,
			6,
			15,
			15,
			15,
			15,
			15,
			11,
			4,
			2,
			2,
			3,
			3,
			3,
			16,
			15,
			16,
			10,
			14,
			12,
			1,
			10,
			8,
			3,
			3,
			2,
			2,
			2,
			2,
			7,
			15,
			15,
			15,
			6,
			3,
			10,
			10,
			6,
			9,
			8,
			9,
			8,
			20,
			10,
			6,
			23,
			1,
			4,
			24,
			2,
			4,
			6,
			6,
			13,
			15,
			15,
			15,
			15,
			4,
			4,
			26,
			23,
			8,
			2,
			4,
			4,
			4,
			4,
			2,
			2,
			4,
			12,
			12,
			9,
			9,
			9,
			1,
			9,
			11,
			2,
			2,
			9,
			5,
			6,
			4,
			18,
			8,
			11,
			1,
			4,
			5,
			8,
			4,
			1,
			1,
			1,
			1,
			4,
			2,
			5,
			4,
			11,
			5,
			11,
			1,
			1,
			1,
			10,
			10,
			15,
			8,
			17,
			6,
			6,
			1,
			12,
			12,
			13,
			15,
			9,
			5,
			10,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			4,
			4,
			16,
			16,
			25,
			5,
			7,
			3,
			13,
			2,
			6,
			2,
			19,
			19,
			19,
			20,
			26,
			3,
			1,
			1,
			1,
			1,
			1,
			16,
			21,
			9,
			16,
			7,
			6,
			18,
			13,
			20,
			12,
			12,
			20,
			6,
			14,
			14,
			14,
			14,
			6,
			1,
			3,
			25,
			19,
			20,
			22,
			2,
			4,
			4,
			4,
			11,
			9,
			8,
			1,
			9,
			1,
			8,
			8,
			12,
			12,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			11,
			1,
			6,
			9,
			1,
			1,
			1,
			1,
			1,
			1,
			4,
			1,
			10,
			1,
			8,
			4,
			1,
			5,
			8,
			8,
			8,
			8,
			9,
			9,
			5,
			4,
			8,
			16,
			8,
			2,
			3,
			3,
			6,
			6,
			7,
			13,
			4,
			4,
			4,
			4,
			1,
			1,
			1,
			8,
			25,
			11,
			14,
			14,
			14,
			17,
			17,
			17,
			5,
			5,
			5,
			14,
			14,
			14,
			9,
			9,
			9,
			9,
			17,
			17,
			16,
			16,
			18,
			18,
			10,
			10,
			10,
			10,
			4,
			1,
			6,
			9,
			6,
			4,
			4,
			4,
			14,
			4,
			25,
			13,
			3,
			7,
			6,
			6,
			1,
			4,
			4,
			4,
			4,
			4,
			4,
			4,
			15,
			15,
			8,
			8,
			2,
			6,
			15,
			15,
			6,
			13,
			5,
			5,
			7,
			5,
			14,
			14,
			4,
			6,
			21,
			1,
			1,
			1,
			11,
			12,
			6,
			6,
			17,
			6,
			16,
			21,
			16,
			23,
			5,
			16,
			2,
			28,
			28,
			6,
			6,
			6,
			6,
			6,
			6,
			6,
			7,
			7,
			7,
			7,
			7,
			7,
			7,
			3,
			4,
			6,
			27,
			16,
			2,
			2,
			4,
			3,
			4
		};

		public static Dictionary<int, byte> npcLifeBytes = new Dictionary<int, byte>();

		public static bool mouseExit;

		public static float exitScale = 0.8f;

		public static bool mouseReforge;

		public static float reforgeScale = 0.8f;

		public static Player clientPlayer = new Player();

		public static string getIP = defaultIP;

		public static string getPort = Convert.ToString(Netplay.ListenPort);

		public static bool menuMultiplayer;

		public static bool menuServer;

		public static int netMode;

		private static int _targetNetMode;

		private static bool _hasPendingNetmodeChange;

		public const int MaxTimeout = 120;

		public static int netPlayCounter;

		public static int lastNPCUpdate;

		public static int lastItemUpdate;

		public static int maxNPCUpdates = 5;

		public static int maxItemUpdates = 5;

		public static string cUp = "W";

		public static string cLeft = "A";

		public static string cDown = "S";

		public static string cRight = "D";

		public static string cJump = "Space";

		public static string cThrowItem = "T";

		public static string cHeal = "H";

		public static string cMana = "J";

		public static string cBuff = "B";

		public static string cHook = "E";

		public static string cTorch = "LeftShift";

		public static string cInv = "Escape";

		public static string cSmart = "LeftControl";

		public static string cMount = "R";

		public static string cFavoriteKey = "LeftAlt";

		public static bool cSmartCursorModeIsToggleAndNotHold = true;

		public static bool SmartCursorEnabled = false;

		public static bool SmartCursorShowing = false;

		public static int SmartCursorX;

		public static int SmartCursorY;

		public static bool SmartInteractShowingGenuine;

		public static bool SmartInteractShowingFake;

		public static int SmartInteractX;

		public static int SmartInteractY;

		public static int SmartInteractNPC;

		public static int SmartInteractProj;

		public static bool SmartInteractPotionOfReturn;

		public static List<Microsoft.Xna.Framework.Point> SmartInteractTileCoords = new List<Microsoft.Xna.Framework.Point>();

		public static List<Microsoft.Xna.Framework.Point> SmartInteractTileCoordsSelected = new List<Microsoft.Xna.Framework.Point>();

		public static int TileInteractionLX = -1;

		public static int TileInteractionLY = -1;

		public static int TileInteractionHX = -1;

		public static int TileInteractionHY = -1;

		public static int cursorOverride = -1;

		public static int signHover = -1;

		public static string cMapZoomIn = "Add";

		public static string cMapZoomOut = "Subtract";

		public static string cMapAlphaUp = "PageUp";

		public static string cMapAlphaDown = "PageDown";

		public static string cMapFull = "M";

		public static string cMapStyle = "Tab";

		public static Microsoft.Xna.Framework.Input.Keys FavoriteKey = Microsoft.Xna.Framework.Input.Keys.LeftAlt;

		public static ColorSlidersSet mouseColorSlider = new ColorSlidersSet();

		public static ColorSlidersSet mouseBorderColorSlider = new ColorSlidersSet();

		public static Microsoft.Xna.Framework.Color mouseColor = new Microsoft.Xna.Framework.Color(255, 50, 95);

		public static Microsoft.Xna.Framework.Color cursorColor = Microsoft.Xna.Framework.Color.White;

		public static int cursorColorDirection = 1;

		public static float cursorAlpha;

		public static float cursorScale;

		public static bool signBubble;

		public static int signX = 0;

		public static int signY = 0;

		public static bool hideUI;

		public static bool releaseUI;

		public static int FrameSkipMode = 2;

		public static bool terrariasFixedTiming = true;

		private int splashCounter;

		public List<int> DrawCacheNPCsMoonMoon = new List<int>(200);

		public List<int> DrawCacheNPCsOverPlayers = new List<int>(200);

		public List<int> DrawCacheNPCProjectiles = new List<int>(200);

		public List<int> DrawCacheNPCsBehindNonSolidTiles = new List<int>(200);

		public List<int> DrawCacheProjsBehindNPCsAndTiles = new List<int>(1000);

		public List<int> DrawCacheProjsBehindNPCs = new List<int>(1000);

		public List<int> DrawCacheProjsBehindProjectiles = new List<int>(1000);

		public List<int> DrawCacheProjsOverWiresUI = new List<int>(1000);

		public List<int> DrawCacheProjsOverPlayers = new List<int>(1000);

		public List<int> DrawCacheFirstFractals = new List<int>(1000);

		public static ParticleRenderer ParticleSystem_World_OverPlayers = new ParticleRenderer();

		public static ParticleRenderer ParticleSystem_World_BehindPlayers = new ParticleRenderer();

		private static WindowStateController _windowMover;

		public static AnchoredEntitiesCollection sittingManager;

		public static AnchoredEntitiesCollection sleepingManager;

		private static bool shouldSetDefaultUIScale = true;

		private static float newDefaultUIScale = 0f;

		private static bool startFullscreen = false;

		public static string oldStatusText = "";

		public static string autoGenFileLocation = null;

		public static bool autoShutdown;

		private uint previousExecutionState;

		public static int sundialCooldown;

		public static bool fastForwardTime;

		private static Stopwatch splashTimer = new Stopwatch();

		private IEnumerator _gameContentLoadProcess;

		private int _musicReplayDelay;

		public static bool _shouldUseWindyDayMusic = false;

		public static bool _shouldUseStormMusic = false;

		private int lastMusicPlayed = -1;

		private bool playOldTile;

		private static float _minWind = 0.34f;

		private static float _maxWind = 0.4f;

		private static float _minRain = 0.4f;

		private static float _maxRain = 0.5f;

		public static float ambientWaterfallX = -1f;

		public static float ambientWaterfallY = -1f;

		public static float ambientWaterfallStrength = 0f;

		public static float ambientLavafallX = -1f;

		public static float ambientLavafallY = -1f;

		public static float ambientLavafallStrength = 0f;

		public static float ambientLavaX = -1f;

		public static float ambientLavaY = -1f;

		public static float ambientLavaStrength;

		public static int ambientCounter;

		private static bool _isWaterfallMusicPlaying = false;

		private static bool _isLavafallMusicPlaying = false;

		public static IChatMonitor chatMonitor = new RemadeChatMonitor();

		public static int ProjectileUpdateLoopIndex = -1;

		public static GameTipsDisplay gameTips;

		private Stopwatch _worldUpdateTimeTester = new Stopwatch();

		public SpelunkerProjectileHelper SpelunkerProjectileHelper = new SpelunkerProjectileHelper();

		public ChumBucketProjectileHelper ChumBucketProjectileHelper = new ChumBucketProjectileHelper();

		public static int weatherVaneBobframe = 0;

		private float logoRotation;

		private float logoRotationDirection = -1f;

		private float logoRotationSpeed = 1f;

		private float logoScale = 1f;

		private float logoScaleDirection = 1f;

		private float logoScaleSpeed = 1f;

		private static int maxMenuItems = 16;

		private float[] menuItemScale = new float[maxMenuItems];

		private int focusMenu = -1;

		private int selectedMenu = -1;

		private int selectedMenu2 = -1;

		public static int selectedPlayer = 0;

		public static int selectedWorld;

		public static int menuMode;

		public static int menuSkip;

		private static bool _needsLanguageSelect = true;

		private static Item tooltipPrefixComparisonItem = new Item();

		private MouseTextCache _mouseTextCache;

		public int textBlinkerCount;

		public int textBlinkerState;

		public static string newWorldName = "";

		private static int[] specX = new int[1000];

		private static int[] specY = new int[1000];

		public TilePaintSystemV2 TilePaintSystem;

		public TileDrawing TilesRenderer;

		public WallDrawing WallsRenderer;

		private AmbientWindSystem _ambientWindSys = new AmbientWindSystem();

		private List<Player> _playersThatDrawBehindNPCs = new List<Player>(255);

		private List<Player> _playersThatDrawAfterProjectiles = new List<Player>(255);

		private List<DrawData> _voidLensData = new List<DrawData>();

		private List<DrawData> _voidLensDataSillouette = new List<DrawData>();

		private List<DrawData> _voidLensDataSillouette2 = new List<DrawData>();

		private TextDisplayCache _textDisplayCache = new TextDisplayCache();

		private List<int> _occupantsListToDrawNPCHouses = new List<int>();

		private List<int> _npcsWithBannersToDraw = new List<int>();

		private bool _imeToggle;

		private List<int> _npcTypesThatAlreadyDrewAHead = new List<int>();

		private int[] _npcIndexWhoHoldsHeadIndex = new int[45];

		private static List<string> _requiredObjecsForCraftingText = new List<string>();

		private static bool _preventCraftingBecauseClickWasUsedToChangeFocusedRecipe;

		private static int _currentRecipeBeingCrafted = -1;

		private static bool hidePVPIcons = false;

		public static bool HoveringOverAnNPC;

		public static string hoverItemName = "";

		public static Microsoft.Xna.Framework.Color inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);

		public static bool mouseText;

		private static int mH;

		private static int rare;

		public static int hairStart;

		private static int oldHairStyle;

		private static Microsoft.Xna.Framework.Color oldHairColor;

		public static int selClothes;

		private static Microsoft.Xna.Framework.Color[] oldClothesColor = new Microsoft.Xna.Framework.Color[6];

		private static int oldClothesStyle;

		public static int interactedDresserTopLeftX;

		public static int interactedDresserTopLeftY;

		public static Player dresserInterfaceDummy;

		private bool _needToSetupDrawInterfaceLayers = true;

		private List<GameInterfaceLayer> _gameInterfaceLayers;

		private static GameTime _drawInterfaceGameTime;

		private static bool _settingsButtonIsPushedToSide;

		private static bool _MouseOversCanClear;

		private static Vector2 _itemIconCacheScreenPosition;

		private static int _itemIconCacheSelectedItemID;

		private static int _itemIconCacheTime;

		private static bool _cannotDrawAccessoriesHorizontally = false;

		public static Microsoft.Xna.Framework.Color selColor = Microsoft.Xna.Framework.Color.White;

		public static int focusColor;

		public static int colorDelay;

		public static int setKey = -1;

		public static int bgScroll;

		public static bool autoPass;

		public static int menuFocus = 0;

		public static float hBar = -1f;

		public static float sBar = -1f;

		public static float lBar = 1f;

		public static float aBar = 1f;

		private int grabColorSlider;

		public static bool blockMouse;

		private static bool _blockFancyUIWhileLoading;

		private bool[] menuWide = new bool[100];

		public static float GamepadCursorAlpha = 0f;

		private bool _needsMenuUIRecalculation;

		public static float MenuXMovement = 0f;

		private float _splashFrameCount;

		private bool quickSplash;

		private float hellBlackBoxBottom;

		public static float MapScale = 1f;

		private static int _minimapTopRightAnchorOffsetTowardsLeft = 52;

		private static int _minimapTopRightAnchorOffsetTowardsBottom = 90;

		public static bool cancelWormHole = false;

		private static VertexColors _glowPaintColors = new VertexColors(Microsoft.Xna.Framework.Color.White);

		protected List<Tuple<int, int, ushort>> DrawWiresSpecialTiles = new List<Tuple<int, int, ushort>>();

		public static float lightning;

		private static float lightningDecay = 1f;

		private static float lightningSpeed = 0f;

		private static int thunderDelay;

		public static int thunderDistance;

		private static string[] MonolithFilterNames = new string[5]
		{
			"MonolithVortex",
			"MonolithNebula",
			"MonolithStardust",
			"MonolithSolar",
			"MonolithMoonLord"
		};

		private static string[] MonolithSkyNames = new string[5]
		{
			"MonolithVortex",
			"MonolithNebula",
			"MonolithStardust",
			"MonolithSolar",
			"MonolithMoonLord"
		};

		private static float backgroundLayerTransitionSpeed = 0.05f;

		public static float atmo;

		private static float bgScale = 1f;

		private static int bgWidthScaled = (int)(1024f * bgScale);

		public static Microsoft.Xna.Framework.Color ColorOfTheSkies;

		private static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsBase = Microsoft.Xna.Framework.Color.White;

		private static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsModified = Microsoft.Xna.Framework.Color.White;

		private float screenOff;

		private float scAdj;

		private float cTop;

		private bool _isDrawingOrUpdating;

		public static List<INeedRenderTargetContent> ContentThatNeedsRenderTargets = new List<INeedRenderTargetContent>();

		private static string _oldNetplayStatusText;

		private static TextSnippet[] _netplayStatusTextSnippets;

		public static int ladyBugRainBoost = 0;

		private static bool _canShowMeteorFall;

		public static Vector2 ViewPosition => screenPosition + GameViewMatrix.Translation;

		public static Vector2 ViewSize => new Vector2(screenWidth, screenHeight) / GameViewMatrix.Zoom;

		public static Matrix CurrentWantedZoomMatrix => _currentWantedZoomMatrix;

		public static Matrix UIScaleMatrix => _uiScaleMatrix;

		public static float UIScaleWanted => _uiScaleWanted;

		public static float UIScale
		{
			get
			{
				return _uiScaleUsed;
			}
			set
			{
				_uiScaleWanted = value;
				float uIScaleMax = instance.UIScaleMax;
				if (value > uIScaleMax)
				{
					value = uIScaleMax;
				}
				_uiScaleUsed = value;
				_uiScaleMatrix = Matrix.CreateScale(value, value, 1f);
			}
		}

		public float UIScaleMax
		{
			get
			{
				int realScreenWidth = PlayerInput.RealScreenWidth;
				float val2 = Math.Min(val2: (float)PlayerInput.RealScreenHeight / 600f, val1: (float)realScreenWidth / 800f);
				return Math.Max(1f, val2);
			}
		}

		public static bool RenderTargetsRequired
		{
			get
			{
				if (!(GameZoomTarget > 1f))
				{
					return GameViewMatrix.TransformationMatrix.M11 > 1f;
				}
				return true;
			}
		}

		public static bool IsItRaining => cloudAlpha > 0f;

		public static bool ThickMouse => MouseBorderColor != Microsoft.Xna.Framework.Color.Transparent;

		public static bool GamepadDisableCursorItemIcon
		{
			get
			{
				if (PlayerInput.UsingGamepad)
				{
					return GamepadDisableCursorItemIconInner;
				}
				return false;
			}
		}

		public static GameModeData GameModeInfo => _currentGameModeInfo;

		public static int GameMode
		{
			get
			{
				if (ActiveWorldFileData == null)
				{
					return 0;
				}
				return ActiveWorldFileData.GameMode;
			}
			set
			{
				if (ActiveWorldFileData != null && RegisterdGameModes.TryGetValue(value, out var value2))
				{
					ActiveWorldFileData.GameMode = value;
					_currentGameModeInfo = value2;
				}
			}
		}

		public static bool masterMode
		{
			get
			{
				if (ActiveWorldFileData == null)
				{
					return false;
				}
				if (_overrideForMasterMode.HasValue)
				{
					return _overrideForMasterMode.Value;
				}
				return _currentGameModeInfo.IsMasterMode;
			}
		}

		public static bool expertMode
		{
			get
			{
				if (ActiveWorldFileData == null)
				{
					return false;
				}
				if (_overrideForExpertMode.HasValue)
				{
					return _overrideForExpertMode.Value;
				}
				return _currentGameModeInfo.IsExpertMode;
			}
		}

		public static AchievementManager Achievements => instance._achievements;

		public static AchievementAdvisor AchievementAdvisor => instance._achievementAdvisor;

		public static ulong UnpausedUpdateSeed
		{
			get;
			private set;
		}

		public static Effect screenShader => ScreenShaderRef.Value;

		public static Effect pixelShader => PixelShaderRef.Value;

		public static Effect vertexPixelShader => VertexPixelShaderRef.Value;

		public static Effect tileShader => TileShaderRef.Value;

		[Obsolete("Transform is deprecated. Please use GameViewMatrix & GUIViewMatrix")]
		public static Matrix Transform => GameViewMatrix.TransformationMatrix;

		public static Vector2 MouseScreen => new Vector2(mouseX, mouseY);

		public static Vector2 MouseWorld
		{
			get
			{
				Vector2 result = MouseScreen + screenPosition;
				if (player[myPlayer].gravDir == -1f)
				{
					result.Y = screenPosition.Y + (float)screenHeight - (float)mouseY;
				}
				return result;
			}
		}

		public static uint GameUpdateCount => _gameUpdateCount;

		public static SamplerState DefaultSamplerState
		{
			get
			{
				if (!drawToScreen)
				{
					return SamplerState.PointClamp;
				}
				return SamplerState.LinearClamp;
			}
		}

		public static int UnderworldLayer => maxTilesY - 200;

		public static float WindForVisuals => windSpeedCurrent;

		public static Player LocalPlayer => player[myPlayer];

		public static CreativeUnlocksTracker LocalPlayerCreativeTracker => player[myPlayer].creativeTracker;

		public static int npcShop
		{
			get;
			private set;
		}

		public static string playerPathName => ActivePlayerFileData.Path;

		public static string worldPathName => ActiveWorldFileData.Path;

		public static bool HasSmartInteractTarget
		{
			get
			{
				if (SmartInteractNPC == -1 && (SmartInteractX == -1 || SmartInteractY == -1))
				{
					return SmartInteractProj != -1;
				}
				return true;
			}
		}

		public static bool IsItAHappyWindyDay => _shouldUseWindyDayMusic;

		public static bool IsItStorming => _shouldUseStormMusic;

		public static bool WindyEnoughForKiteDrops => Math.Abs(windSpeedTarget) >= _maxWind;

		public static bool ShouldPVPDraw => netMode == 1;

		public int RecommendedEquipmentAreaPushUp
		{
			get
			{
				if (player[myPlayer].CanDemonHeartAccessoryBeShown())
				{
					return 610 + PlayerInput.UsingGamepad.ToInt() * 30;
				}
				return 600;
			}
		}

		public static bool ShouldDrawInfoIconsHorizontally
		{
			get
			{
				if (_cannotDrawAccessoriesHorizontally)
				{
					return false;
				}
				if (mapStyle == 1 && mapEnabled && screenHeight < 820)
				{
					return false;
				}
				if (mapStyle != 1 && screenWidth < 855)
				{
					return false;
				}
				if (PlayerInput.UsingGamepad)
				{
					return false;
				}
				return true;
			}
		}

		public static bool CanShowInfoAccs
		{
			get
			{
				if (npcChatText == null || npcChatText == "" || player[myPlayer].chest > -1)
				{
					return player[myPlayer].sign < 0;
				}
				return false;
			}
		}

		public static Microsoft.Xna.Framework.Point ScreenSize => new Microsoft.Xna.Framework.Point(screenWidth, screenHeight);

		public static bool IsGraphicsDeviceAvailable
		{
			get
			{
				if (!instance.GraphicsDevice.IsDisposed)
				{
					return instance.GraphicsDevice.GraphicsDeviceStatus == GraphicsDeviceStatus.Normal;
				}
				return false;
			}
		}

		public static event Action OnEnginePreload;

		public static event Action<Vector2> OnResolutionChanged;

		public static event Action OnEngineLoad;

		public static event Action OnTickForThirdPartySoftwareOnly;

		public static event Action OnTickForInternalCodeOnly;

		public static event Action<GameTime> OnPreDraw;

		public static event Action<GameTime> OnPostDraw;

		public static event Action<Vector2, float> OnPostFullscreenMapDraw;

		public static event Action OnRenderTargetsReleased;

		public static event ResolutionChangeEvent OnRenderTargetsInitialized;

		public static void SetRecommendedZoomContext(Matrix matrix)
		{
			_currentWantedZoomMatrix = matrix;
		}

		public static void FindAnnouncementBoxStatus()
		{
			AnnouncementBoxDisabled = Program.LaunchParameters.ContainsKey("-disableannouncementbox");
			if (Program.LaunchParameters.TryGetValue("-announcementboxrange", out var value) && int.TryParse(value, out var result))
			{
				AnnouncementBoxRange = result;
			}
		}

		public static void SetCameraLerp(float lerp, int time)
		{
			cameraLerp = lerp;
			cameraLerpTimer = 0;
			cameraLerpTimeToggle = time;
			cameraGamePadLerp = false;
		}

		public static void SetCameraGamepadLerp(float lerp)
		{
			_ = cameraLerp;
			_ = 0f;
		}

		public static Vector2 ReverseGravitySupport(Vector2 pos, float height = 0f)
		{
			if (player[myPlayer].gravDir != -1f)
			{
				return pos;
			}
			pos.Y = (float)screenHeight - pos.Y - height;
			return pos;
		}

		public static Microsoft.Xna.Framework.Point ReverseGravitySupport(Microsoft.Xna.Framework.Point pos, int height = 0)
		{
			if (player[myPlayer].gravDir != -1f)
			{
				return pos;
			}
			pos.Y = screenHeight - pos.Y - height;
			return pos;
		}

		public static Microsoft.Xna.Framework.Rectangle ReverseGravitySupport(Microsoft.Xna.Framework.Rectangle box)
		{
			if (player[myPlayer].gravDir != -1f)
			{
				return box;
			}
			box.Y = screenHeight - box.Y - box.Height;
			return box;
		}

		public void SetMouseNPC(int index, int type)
		{
			mouseNPCIndex = index;
			mouseNPCType = type;
		}

		public void SetMouseNPC_ToHousingQuery()
		{
			SetMouseNPC(-1, 0);
		}

		[DllImport("User32")]
		private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);

		[DllImport("User32")]
		private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

		[DllImport("User32")]
		private static extern int GetMenuItemCount(IntPtr hWnd);

		[DllImport("kernel32.dll")]
		public static extern IntPtr LoadLibrary(string dllToLoad);

		public static MoonPhase GetMoonPhase()
		{
			return (MoonPhase)moonPhase;
		}

		public static Vector2 DrawPlayerItemPos(float gravdir, int itemtype)
		{
			float num = 10f;
			instance.LoadItem(itemtype);
			Vector2 result = new Vector2(TextureAssets.Item[itemtype].Width() / 2, TextureAssets.Item[itemtype].Height() / 2);
			switch (itemtype)
			{
			case 95:
				num = 6f;
				result.Y += 2f * gravdir;
				break;
			case 1295:
				num = 4f;
				break;
			case 3611:
				num = 2f;
				break;
			case 3350:
				num = 2f;
				break;
			case 2624:
				num = 4f;
				break;
			case 3018:
				num = 2f;
				break;
			case 3007:
				num = 4f;
				result.Y -= 1f * gravdir;
				break;
			case 3107:
				num = 4f;
				result.Y += 2f * gravdir;
				break;
			case 3008:
				num = -7f;
				result.Y += 2f * gravdir;
				break;
			case 1255:
				num = 6f;
				result.Y += 0f * gravdir;
				break;
			case 2269:
				num = 2f;
				result.Y += 2f * gravdir;
				break;
			case 1265:
				num = -8f;
				result.Y += 4f * gravdir;
				break;
			case 2272:
				num = 0f;
				result.Y += 4f * gravdir;
				break;
			case 3029:
				num = 4f;
				break;
			case 4381:
				num = 4f;
				break;
			case 2796:
				num = -28f;
				result.Y += 2f * gravdir;
				break;
			case 2797:
				num = 0f;
				break;
			case 2610:
				num = 0f;
				break;
			case 2623:
				num = -30f;
				result.Y -= 4f * gravdir;
				break;
			case 3546:
				num = -14f;
				result.Y -= 6f * gravdir;
				break;
			case 1835:
				num = -2f;
				result.Y += 2f * gravdir;
				break;
			default:
				switch (itemtype)
				{
				case 2624:
					num = -4f;
					break;
				case 3859:
					num = -2f;
					break;
				case 2888:
					num = 6f;
					break;
				case 2223:
					num = 2f;
					result.Y -= 2f * gravdir;
					break;
				case 1782:
					num = 0f;
					result.Y += 4f * gravdir;
					break;
				case 1929:
					num = 0f;
					result.Y += 2f * gravdir;
					break;
				case 2270:
					num = -4f;
					break;
				case 1784:
					num = 0f;
					result.Y += 4f * gravdir;
					break;
				case 1000:
					num = 6f;
					result.Y += 0f * gravdir;
					break;
				case 1178:
					num = 4f;
					result.Y += 0f * gravdir;
					break;
				case 1319:
					num = 0f;
					result.Y += 0f * gravdir;
					break;
				case 1297:
					num = -8f;
					result.Y += 0f * gravdir;
					break;
				case 1121:
					num = 6f;
					result.Y -= 2f * gravdir;
					break;
				case 1314:
					num = 2f;
					break;
				case 1258:
					num = 2f;
					result.Y -= 2f * gravdir;
					break;
				case 1155:
					num = -10f;
					result.Y -= 2f * gravdir;
					break;
				case 1156:
					num = -2f;
					break;
				case 4703:
					num = -3f;
					result.Y -= 2f * gravdir;
					break;
				case 96:
					num = -8f;
					result.Y += 2f * gravdir;
					break;
				case 1870:
					num = -8f;
					result.Y += 2f * gravdir;
					break;
				case 1260:
					num = -8f;
					result.Y += 2f * gravdir;
					break;
				case 1254:
					num = -6f;
					result.Y += 2f * gravdir;
					break;
				case 98:
					num = -5f;
					result.Y -= 2f * gravdir;
					break;
				case 534:
					num = -2f;
					result.Y += 1f * gravdir;
					break;
				case 679:
					num = 0f;
					result.Y += 2f * gravdir;
					break;
				case 964:
					num = 0f;
					result.Y += 0f * gravdir;
					break;
				case 533:
					num = -7f;
					result.Y -= 2f * gravdir;
					break;
				case 1553:
					num = -10f;
					result.Y -= 2f * gravdir;
					break;
				case 506:
					num = 0f;
					result.Y -= 2f * gravdir;
					break;
				case 1910:
					num = 0f;
					result.Y -= 2f * gravdir;
					break;
				case 494:
				case 508:
					num = -2f;
					break;
				case 434:
					num = 0f;
					result.Y -= 2f * gravdir;
					break;
				case 514:
					num = 0f;
					result.Y += 3f * gravdir;
					break;
				case 435:
				case 436:
				case 481:
				case 578:
				case 1187:
				case 1194:
				case 1201:
				case 1229:
					num = -2f;
					result.Y -= 2f * gravdir;
					break;
				case 197:
					num = -5f;
					result.Y += 4f * gravdir;
					break;
				case 4060:
					num = -2f;
					result.Y += 4f * gravdir;
					break;
				case 126:
					num = 4f;
					result.Y += 4f * gravdir;
					break;
				case 800:
					num = 4f;
					result.Y += 2f * gravdir;
					break;
				case 127:
					num = 4f;
					result.Y += 2f * gravdir;
					break;
				case 157:
					num = 6f;
					result.Y += 2f * gravdir;
					break;
				case 160:
					num = -8f;
					break;
				case 164:
				case 219:
					num = 0f;
					result.Y += 2f * gravdir;
					break;
				case 165:
				case 272:
					num = 4f;
					result.Y += 4f * gravdir;
					break;
				case 3870:
					num = 4f;
					result.Y += 4f * gravdir;
					break;
				case 266:
					num = 0f;
					result.Y += 2f * gravdir;
					break;
				case 281:
					num = 6f;
					result.Y -= 6f * gravdir;
					break;
				case 986:
					num = 6f;
					result.Y -= 10f * gravdir;
					break;
				case 682:
					num = 4f;
					break;
				case 4953:
					num = -4f;
					break;
				case 758:
					num -= 20f;
					result.Y += 0f * gravdir;
					break;
				case 759:
					num -= 18f;
					result.Y += 2f * gravdir;
					break;
				case 760:
					num -= 12f;
					result.Y += 2f * gravdir;
					break;
				case 1946:
					num -= 12f;
					result.Y += 2f * gravdir;
					break;
				case 779:
					num = 0f;
					result.Y += 2f * gravdir;
					break;
				case 905:
					num = -5f;
					result.Y += 0f * gravdir;
					break;
				case 930:
					num = 4f;
					result.Y += 2f * gravdir;
					break;
				case 3788:
					num = 2f;
					result.Y += 2f * gravdir;
					break;
				}
				break;
			}
			result.X = num;
			return result;
		}

		public static void SetupTileMerge()
		{
			int num = 623;
			tileMerge = new bool[num][];
			for (int i = 0; i < tileMerge.Length; i++)
			{
				tileMerge[i] = new bool[num];
			}
		}

		public static void RegisterItemAnimation(int index, DrawAnimation animation)
		{
			if (!itemAnimationsRegistered.Contains(index))
			{
				itemAnimationsRegistered.Add(index);
			}
			itemAnimations[index] = animation;
		}

		public static void InitializeItemAnimations()
		{
			for (int i = 0; i < itemAnimations.Length; i++)
			{
				itemAnimations[i] = null;
			}
			itemAnimationsRegistered.Clear();
			RegisterItemAnimation(3581, new DrawAnimationVertical(4, 4));
			RegisterItemAnimation(3580, new DrawAnimationVertical(6, 4));
			RegisterItemAnimation(75, new DrawAnimationVertical(5, 8)
			{
				PingPong = true
			});
			RegisterItemAnimation(575, new DrawAnimationVertical(6, 4));
			RegisterItemAnimation(547, new DrawAnimationVertical(6, 4));
			RegisterItemAnimation(520, new DrawAnimationVertical(6, 4));
			RegisterItemAnimation(548, new DrawAnimationVertical(6, 4));
			RegisterItemAnimation(521, new DrawAnimationVertical(6, 4));
			RegisterItemAnimation(549, new DrawAnimationVertical(6, 4));
			RegisterItemAnimation(3453, new DrawAnimationVertical(6, 4));
			RegisterItemAnimation(3454, new DrawAnimationVertical(6, 4));
			RegisterItemAnimation(3455, new DrawAnimationVertical(6, 4));
			RegisterItemAnimation(4068, new DrawAnimationVertical(6, 4)
			{
				NotActuallyAnimating = true
			});
			RegisterItemAnimation(4069, new DrawAnimationVertical(6, 4)
			{
				NotActuallyAnimating = true
			});
			RegisterItemAnimation(4070, new DrawAnimationVertical(6, 4)
			{
				NotActuallyAnimating = true
			});
			for (int j = 0; j < ItemID.Sets.IsFood.Length; j++)
			{
				if (ItemID.Sets.IsFood[j])
				{
					RegisterItemAnimation(j, new DrawAnimationVertical(int.MaxValue, 3));
				}
			}
		}

		public static void SetGraphicsProfile(GraphicsProfile profile)
		{
			if (_currentGraphicsProfile != profile)
			{
				_selectedGraphicsProfile = profile;
				SetGraphicsProfileInternal();
			}
		}

		private static void SetGraphicsProfileInternal()
		{
			_currentGraphicsProfile = _selectedGraphicsProfile;
			graphics.GraphicsProfile = _selectedGraphicsProfile;
			switch (_selectedGraphicsProfile)
			{
			case GraphicsProfile.HiDef:
				maxScreenW = 4096;
				maxScreenH = 4096;
				_renderTargetMaxSize = 4096;
				TrySupporting8K();
				break;
			case GraphicsProfile.Reach:
				maxScreenW = 1920;
				maxScreenH = 1200;
				_renderTargetMaxSize = 2048;
				break;
			}
			try
			{
				graphics.ApplyChanges();
			}
			catch (NoSuitableGraphicsDeviceException)
			{
				if (_currentGraphicsProfile == GraphicsProfile.HiDef)
				{
					_selectedGraphicsProfile = GraphicsProfile.Reach;
					SetGraphicsProfileInternal();
				}
			}
			instance.EnsureRenderTargetContent();
		}

		private static void TrySupporting8K()
		{
			if (!true)
			{
				return;
			}
			instance.ReleaseTargets();
			//Type type = Assembly.GetAssembly(typeof(GraphicsProfile)).GetType("Microsoft.Xna.Framework.Graphics.ProfileCapabilities", throwOnError: true);
			/*if (type != null)
			{
				FieldInfo field = type.GetField("MaxTextureSize", BindingFlags.Instance | BindingFlags.NonPublic);
				FieldInfo field2 = type.GetField("HiDef", BindingFlags.Static | BindingFlags.NonPublic);
				if (field != null && field2 != null)
				{
					field.SetValue(field2.GetValue(null), 8192);
				}
			}*/
		}

		public static void AnglerQuestSwap()
		{
			if (netMode == 1)
			{
				return;
			}
			anglerWhoFinishedToday.Clear();
			anglerQuestFinished = false;
			bool flag = NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3 || hardMode || NPC.downedSlimeKing || NPC.downedQueenBee;
			bool flag2 = true;
			while (flag2)
			{
				flag2 = false;
				anglerQuest = rand.Next(anglerQuestItemNetIDs.Length);
				int num = anglerQuestItemNetIDs[anglerQuest];
				if (num == 2454 && (!hardMode || WorldGen.crimson))
				{
					flag2 = true;
				}
				if (num == 2457 && WorldGen.crimson)
				{
					flag2 = true;
				}
				if (num == 2462 && !hardMode)
				{
					flag2 = true;
				}
				if (num == 2463 && (!hardMode || !WorldGen.crimson))
				{
					flag2 = true;
				}
				if (num == 2465 && !hardMode)
				{
					flag2 = true;
				}
				if (num == 2468 && !hardMode)
				{
					flag2 = true;
				}
				if (num == 2471 && !hardMode)
				{
					flag2 = true;
				}
				if (num == 2473 && !hardMode)
				{
					flag2 = true;
				}
				if (num == 2477 && !WorldGen.crimson)
				{
					flag2 = true;
				}
				if (num == 2480 && !hardMode)
				{
					flag2 = true;
				}
				if (num == 2483 && !hardMode)
				{
					flag2 = true;
				}
				if (num == 2484 && !hardMode)
				{
					flag2 = true;
				}
				if (num == 2485 && WorldGen.crimson)
				{
					flag2 = true;
				}
				if ((num == 2476 || num == 2453 || num == 2473) && !flag)
				{
					flag2 = true;
				}
			}
			NetMessage.SendAnglerQuest(-1);
		}

		public void UpdateParticleSystems()
		{
			ParticleSystem_World_OverPlayers.Update();
			ParticleSystem_World_BehindPlayers.Update();
		}

		public static void TrySetPreparationState(WorldPreparationState state)
		{
			if (state == WorldPreparationState.ProcessingData)
			{
				_worldPreparationState = state;
			}
		}

		public static void UpdateWorldPreparationState()
		{
			if (netMode != 1)
			{
				_worldPreparationState = WorldPreparationState.Ready;
				return;
			}
			if (netMode == 1 && gameMenu && _worldPreparationState == WorldPreparationState.Ready)
			{
				_worldPreparationState = WorldPreparationState.AwaitingData;
			}
			if (netMode == 1 && _worldPreparationState == WorldPreparationState.ProcessingData)
			{
				_worldPreparationState = WorldPreparationState.Ready;
				gameMenu = false;
				FixUIScale();
				ChatHelper.ShowCachedMessages();
				ChatHelper.ClearDelayedMessagesCache();
			}
		}

		public static bool InSmartCursorHighlightArea(int x, int y, out bool actuallySelected)
		{
			actuallySelected = SmartInteractTileCoordsSelected.Contains(new Microsoft.Xna.Framework.Point(x, y));
			if (hideUI)
			{
				return false;
			}
			if (Collision.InTileBounds(x, y, TileInteractionLX, TileInteractionLY, TileInteractionHX, TileInteractionHY))
			{
				return SmartInteractTileCoords.Contains(new Microsoft.Xna.Framework.Point(x, y));
			}
			return false;
		}

		public static void LoadWorlds()
		{
			WorldList.Clear();
			if (!Utils.TryCreatingDirectory(WorldPath))
			{
				return;
			}
			string[] files = Directory.GetFiles(WorldPath, "*.wld");
			int num = Math.Min(files.Length, maxLoadWorld);
			for (int i = 0; i < num; i++)
			{
				WorldFileData allMetadata = WorldFile.GetAllMetadata(files[i], cloudSave: false);
				if (allMetadata != null)
				{
					WorldList.Add(allMetadata);
				}
				else
				{
					WorldList.Add(WorldFileData.FromInvalidWorld(files[i], cloudSave: false));
				}
			}
			if (SocialAPI.Cloud != null)
			{
				foreach (string item2 in from path in SocialAPI.Cloud.GetFiles()
					where path.StartsWith(CloudWorldPath, StringComparison.CurrentCultureIgnoreCase) && path.EndsWith(".wld", StringComparison.CurrentCultureIgnoreCase)
					select path)
				{
					WorldFileData allMetadata2 = WorldFile.GetAllMetadata(item2, cloudSave: true);
					if (allMetadata2 != null)
					{
						WorldList.Add(allMetadata2);
					}
					else
					{
						WorldList.Add(WorldFileData.FromInvalidWorld(item2, cloudSave: true));
					}
				}
			}
			WorldList.Sort(WorldListSortMethod);
		}

		private static int WorldListSortMethod(WorldFileData data1, WorldFileData data2)
		{
			return data1.Name.CompareTo(data2.Name);
		}

		public static void LoadPlayers()
		{
			PlayerList.Clear();
			if (!Utils.TryCreatingDirectory(PlayerPath))
			{
				return;
			}
			string[] files = Directory.GetFiles(PlayerPath, "*.plr");
			int num = Math.Min(maxLoadPlayer, files.Length);
			for (int i = 0; i < num; i++)
			{
				PlayerFileData fileData = Player.GetFileData(files[i], cloudSave: false);
				if (fileData != null)
				{
					PlayerList.Add(fileData);
				}
			}
			if (SocialAPI.Cloud != null)
			{
				foreach (string item2 in from path in SocialAPI.Cloud.GetFiles()
					where path.StartsWith(CloudPlayerPath, StringComparison.CurrentCultureIgnoreCase) && path.EndsWith(".plr", StringComparison.CurrentCultureIgnoreCase)
					select path)
				{
					PlayerFileData fileData2 = Player.GetFileData(item2, cloudSave: true);
					if (fileData2 != null)
					{
						PlayerList.Add(fileData2);
					}
				}
			}
			PlayerList.Sort(PlayerListSortMethod);
		}

		private static int PlayerListSortMethod(PlayerFileData data1, PlayerFileData data2)
		{
			return data1.Name.CompareTo(data2.Name);
		}

		protected void OpenRecent()
		{
			try
			{
				if (!File.Exists(SavePath + Path.DirectorySeparatorChar + "servers.dat"))
				{
					return;
				}
				using FileStream input = new FileStream(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Open);
				using BinaryReader binaryReader = new BinaryReader(input);
				binaryReader.ReadInt32();
				for (int i = 0; i < 10; i++)
				{
					recentWorld[i] = binaryReader.ReadString();
					recentIP[i] = binaryReader.ReadString();
					recentPort[i] = binaryReader.ReadInt32();
				}
			}
			catch
			{
			}
		}

		public static void SaveRecent()
		{
			Utils.TryCreatingDirectory(SavePath);
			try
			{
				File.SetAttributes(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
			}
			catch
			{
			}
			try
			{
				using FileStream output = new FileStream(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Create);
				using BinaryWriter binaryWriter = new BinaryWriter(output);
				binaryWriter.Write(230);
				for (int i = 0; i < 10; i++)
				{
					binaryWriter.Write(recentWorld[i]);
					binaryWriter.Write(recentIP[i]);
					binaryWriter.Write(recentPort[i]);
				}
			}
			catch
			{
			}
		}

		public static bool SaveSettings()
		{
			Configuration.Clear();
			Configuration.Put("ResetDefaultUIScale", false);
			Configuration.Put("SmartCursorToggle", cSmartCursorModeIsToggleAndNotHold);
			Configuration.Put("MapEnabled", mapEnabled);
			Configuration.Put("InvasionBarMode", invasionProgressMode);
			Configuration.Put("AutoSave", autoSave);
			Configuration.Put("AutoPause", autoPause);
			Configuration.Put("Language", Language.ActiveCulture.Name);
			Configuration.Put("PlacementPreview", placementPreview);
			Configuration.Put("GoreVisualsAllowed", ChildSafety.Disabled);
			Configuration.Put("WorldRollbacksToKeep", WorldRollingBackupsCountToKeep);
			Configuration.Put("TeamNameplateDistance", teamNamePlateDistance);
			Configuration.Put("MultiplayerNPCSmoothingRange", multiplayerNPCSmoothingRange);
			Configuration.Put("VolumeSound", soundVolume);
			Configuration.Put("VolumeAmbient", ambientVolume);
			Configuration.Put("VolumeMusic", musicVolume);
			Configuration.Put("UnlockMusicSwap", TOWMusicUnlocked);
			Configuration.Put("UseExperimentalFeatures", UseExperimentalFeatures);
			Configuration.Put("Fullscreen", graphics.IsFullScreen);
			Configuration.Put("WindowMaximized", screenMaximized);
			Configuration.Put("WindowBorderless", screenBorderless);
			Configuration.Put("DisplayWidth", graphics.PreferredBackBufferWidth);
			Configuration.Put("DisplayHeight", graphics.PreferredBackBufferHeight);
			Configuration.Put("GraphicsQuality", qaStyle);
			Configuration.Put("BackgroundEnabled", BackgroundEnabled);
			Configuration.Put("FrameSkipMode", FrameSkipMode);
			Configuration.Put("LightingMode", Lighting.Mode);
			Configuration.Put("BackgroundParallax", bgScroll);
			Configuration.Put("ShowItemText", showItemText);
			Configuration.Put("LastLaunchedVersion", 230);
			Configuration.Put("ClientUUID", clientUUID);
			Configuration.Put("UseSmartCursorForCommonBlocks", Player.SmartCursorSettings.SmartBlocksEnabled);
			Configuration.Put("UseSmartAxeAfterSmartPickaxe", Player.SmartCursorSettings.SmartAxeAfterPickaxe);
			Configuration.Put("DisableLeftShiftTrashCan", ItemSlot.Options.DisableLeftShiftTrashCan);
			Configuration.Put("HighlightNewItems", ItemSlot.Options.HighlightNewItems);
			Configuration.Put("HidePasswords", HidePassword);
			Configuration.Put("ReverseUpDownForArmorSetBonuses", ReversedUpDownArmorSetBonuses);
			Configuration.Put("MouseShowBuildingGrid", MouseShowBuildingGrid);
			Configuration.Put("AllowUnfocusedInputOnGamepad", AllowUnfocusedInputOnGamepad);
			Configuration.Put("LockOnPriority", LockOnHelper.UseMode);
			Configuration.Put("InvisibleCursorForGamepad", InvisibleCursorForGamepad);
			Configuration.Put("GamepadDisableInstructionsDisplay", GamepadDisableInstructionsDisplay);
			Configuration.Put("SettingsUnlock_WorldEvil", SettingsUnlock_WorldEvil);
			Configuration.Put("SettingsEnabled_MinersWobble", SettingsEnabled_MinersWobble);
			Configuration.Put("SettingBlockGamepadsEntirely", SettingBlockGamepadsEntirely);
			Configuration.Put("SettingsEnabled_OpaqueBoxBehindTooltips", SettingsEnabled_OpaqueBoxBehindTooltips);
			Configuration.Put("SettingDontScaleMainMenuUp", SettingDontScaleMainMenuUp);
			Configuration.Put("SettingsEnabled_TilesSwayInWind", SettingsEnabled_TilesSwayInWind);
			Configuration.Put("UseStormEffect", UseStormEffects);
			Configuration.Put("UseHeatDistortion", UseHeatDistortion);
			Configuration.Put("WaveQuality", WaveQuality);
			Configuration.Put("Support4K", Support4K);
			Configuration.Put("MouseColor", new Dictionary<string, byte>
			{
				{
					"R",
					mouseColor.R
				},
				{
					"G",
					mouseColor.G
				},
				{
					"B",
					mouseColor.B
				}
			});
			Configuration.Put("MouseBorderColor", new Dictionary<string, byte>
			{
				{
					"R",
					MouseBorderColor.R
				},
				{
					"G",
					MouseBorderColor.G
				},
				{
					"B",
					MouseBorderColor.B
				},
				{
					"A",
					MouseBorderColor.A
				}
			});
			Configuration.Put("QuickLaunch", SkipAssemblyLoad);
			Configuration.Put("Zoom", GameZoomTarget);
			Configuration.Put("UIScale", _uiScaleWanted);
			Configuration.Put("MapScale", MapScale);
			if (AssetSourceController != null)
			{
				Configuration.Put("ResourcePacks", AssetSourceController.ActiveResourcePackList.ToJson());
			}
			Configuration.Put("FlashIconForEvents", Enum.GetName(typeof(GameNotificationType), _flashNotificationType));
			Configuration.Put("Display", _windowMover.ScreenDeviceName);
			Configuration.Put("DisplayScreen", _windowMover.ScreenDeviceName);
			Configuration.Put("ThrottleWhenInactive", instance.InactiveSleepTime != TimeSpan.Zero);
			Configuration.Put("DoorAutoOpeningMode", DoorOpeningHelper.PreferenceSettings);
			Configuration.Put("WaterfallDrawLimit", instance.waterfallManager.maxWaterfallCount);
			Configuration.Put("DisableIntenseVisualEffects", DisableIntenseVisualEffects);
			if (Configuration.Save())
			{
				return PlayerInput.Save();
			}
			return false;
		}

		protected void CheckBunny()
		{
			try
			{
				RegistryKey currentUser = Registry.CurrentUser;
				currentUser = currentUser.CreateSubKey("Software\\Terraria");
				if (currentUser != null && currentUser.GetValue("Bunny") != null && currentUser.GetValue("Bunny").ToString() == "1")
				{
					runningCollectorsEdition = true;
				}
			}
			catch
			{
				runningCollectorsEdition = false;
			}
		}

		private static void TryPickingDefaultUIScale(float displayHeight)
		{
			if (shouldSetDefaultUIScale)
			{
				newDefaultUIScale = displayHeight / 1080f * 1.1f;
				shouldSetDefaultUIScale = false;
				Configuration.Put("UIScale", newDefaultUIScale);
				Configuration.Save();
			}
		}

		protected void LoadSettings()
		{
			if (File.Exists(SavePath + Path.DirectorySeparatorChar + "config.dat"))
			{
				OpenLegacySettings();
				if (SaveSettings())
				{
					File.Delete(SavePath + Path.DirectorySeparatorChar + "config.dat");
				}
				return;
			}
			Configuration.Load();
			int currentValue = 0;
			Configuration.Get("LastLaunchedVersion", currentValue);
			bool flag = false;
			if (currentValue < 219)
			{
				flag = true;
			}
			if (!flag)
			{
				Configuration.Get("ResetDefaultUIScale", shouldSetDefaultUIScale);
				Configuration.Get("Fullscreen", startFullscreen);
				Configuration.Get("WindowMaximized", screenMaximized);
				Configuration.Get("WindowBorderless", screenBorderless);
			}
			PendingBorderlessState = screenBorderless;
			screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
			if (!startFullscreen)
			{
				int currentValue2 = graphics.PreferredBackBufferWidth;
				int currentValue3 = graphics.PreferredBackBufferHeight;
				Configuration.Get("DisplayWidth", currentValue2);
				Configuration.Get("DisplayHeight", currentValue3);
				if (PendingBorderlessState)
				{
					screenBorderlessPendingResizes = 1;
				}
				SetDisplayMode(currentValue2, currentValue3, fullscreen: false);
				TryPickingDefaultUIScale(currentValue3);
			}
			Configuration.Get("SmartCursorToggle", cSmartCursorModeIsToggleAndNotHold);
			Configuration.Get("MapEnabled", mapEnabled);
			Configuration.Get("InvasionBarMode", invasionProgressMode);
			Configuration.Get("AutoSave", autoSave);
			Configuration.Get("AutoPause", autoPause);
			_needsLanguageSelect = !Configuration.Contains("Language");
			string text = Configuration.Get("Language", "en-US");
			int result = 0;
			if (int.TryParse(text, out result))
			{
				LanguageManager.Instance.SetLanguage(result);
				SetTitle();
			}
			else
			{
				LanguageManager.Instance.SetLanguage(text);
				SetTitle();
			}
			Configuration.Get("PlacementPreview", placementPreview);
			Configuration.Get("GoreVisualsAllowed", ChildSafety.Disabled);
			Configuration.Get("DisableIntenseVisualEffects", DisableIntenseVisualEffects);
			if (!flag)
			{
				Configuration.Get("VolumeSound", soundVolume);
				Configuration.Get("VolumeAmbient", ambientVolume);
				Configuration.Get("VolumeMusic", musicVolume);
			}
			Configuration.Get("KeyFavoriteModifier", cFavoriteKey);
			if (Enum.TryParse<Microsoft.Xna.Framework.Input.Keys>(cFavoriteKey, out var result2))
			{
				FavoriteKey = result2;
			}
			if (!flag)
			{
				Configuration.Get("GraphicsQuality", qaStyle);
				Configuration.Get("BackgroundEnabled", BackgroundEnabled);
			}
			if (Configuration.GetAllKeys().Contains("FrameSkip"))
			{
				bool currentValue4 = false;
				Configuration.Get("FrameSkip", currentValue4);
				terrariasFixedTiming = !currentValue4;
				if (terrariasFixedTiming)
				{
					FrameSkipMode = 2;
				}
				else
				{
					FrameSkipMode = 1;
				}
			}
			Configuration.Get("FrameSkipMode", FrameSkipMode);
			if (FrameSkipMode < 0)
			{
				FrameSkipMode = 0;
			}
			if (FrameSkipMode > 2)
			{
				FrameSkipMode = 2;
			}
			int currentValue5 = (int)Lighting.Mode;
			if (!flag)
			{
				Configuration.Get("LightingMode", currentValue5);
			}
			Lighting.Mode = (LightMode)currentValue5;
			Configuration.Get("UnlockMusicSwap", TOWMusicUnlocked);
			Configuration.Get("Parallax", caveParallax);
			bgScroll = (int)((1f - caveParallax) * 500f);
			Configuration.Get("BackgroundParallax", bgScroll);
			caveParallax = 1f - (float)bgScroll / 500f;
			Configuration.Get("ShowItemText", showItemText);
			Configuration.Get("ClientUUID", clientUUID);
			Configuration.Get("UseSmartCursorForCommonBlocks", Player.SmartCursorSettings.SmartBlocksEnabled);
			Configuration.Get("UseSmartAxeAfterSmartPickaxe", Player.SmartCursorSettings.SmartAxeAfterPickaxe);
			if (!flag)
			{
				Configuration.Get("DisableLeftShiftTrashCan", ItemSlot.Options.DisableLeftShiftTrashCan);
			}
			Configuration.Get("HidePasswords", HidePassword);
			Configuration.Get("HighlightNewItems", ItemSlot.Options.HighlightNewItems);
			Configuration.Get("ReverseUpDownForArmorSetBonuses", ReversedUpDownArmorSetBonuses);
			Configuration.Get("MouseShowBuildingGrid", MouseShowBuildingGrid);
			Configuration.Get("AllowUnfocusedInputOnGamepad", AllowUnfocusedInputOnGamepad);
			Configuration.Get("GamepadDisableInstructionsDisplay", GamepadDisableInstructionsDisplay);
			Configuration.Get("SettingDontScaleMainMenuUp", SettingDontScaleMainMenuUp);
			Configuration.Get("WorldRollbacksToKeep", WorldRollingBackupsCountToKeep);
			Configuration.Get("TeamNameplateDistance", teamNamePlateDistance);
			if (currentValue < 230)
			{
				Configuration.Get("MultiplayerNPCSmoothingRange", multiplayerNPCSmoothingRange);
			}
			Configuration.Get("UseStormEffect", UseStormEffects);
			Configuration.Get("UseHeatDistortion", UseHeatDistortion);
			Configuration.Get("WaveQuality", WaveQuality);
			if (WaveQuality > 3)
			{
				WaveQuality = 3;
			}
			if (WaveQuality < 0)
			{
				WaveQuality = 0;
			}
			Dictionary<string, byte> currentValue6 = new Dictionary<string, byte>();
			Configuration.Get("MouseColor", currentValue6);
			if (currentValue6.TryGetValue("R", out var value))
			{
				mouseColor.R = value;
			}
			if (currentValue6.TryGetValue("G", out value))
			{
				mouseColor.G = value;
			}
			if (currentValue6.TryGetValue("B", out value))
			{
				mouseColor.B = value;
			}
			currentValue6.Clear();
			Configuration.Get("MouseBorderColor", currentValue6);
			if (currentValue6.TryGetValue("R", out value))
			{
				MouseBorderColor.R = value;
			}
			if (currentValue6.TryGetValue("G", out value))
			{
				MouseBorderColor.G = value;
			}
			if (currentValue6.TryGetValue("B", out value))
			{
				MouseBorderColor.B = value;
			}
			if (currentValue6.TryGetValue("A", out value))
			{
				MouseBorderColor.A = value;
			}
			Configuration.Get("QuickLaunch", SkipAssemblyLoad);
			if (!flag)
			{
				GameZoomTarget = Configuration.Get("Zoom", 1f);
			}
			if (!flag)
			{
				UIScale = 1;//Configuration.Get("UIScale", Platform.Get<IWindowService>().GetScaling());
			}
			if (newDefaultUIScale > 0f)
			{
				UIScale = newDefaultUIScale;
				newDefaultUIScale = 0f;
			}
			MapScale = MathHelper.Clamp(Configuration.Get("MapScale", 1f), 0.5f, 1f);
			int currentValue7 = -1;
			Configuration.Get("LockOnPriority", currentValue7);
			if (currentValue7 < 0)
			{
				currentValue7 = 0;
			}
			if (currentValue7 > 2)
			{
				currentValue7 = 2;
			}
			LockOnHelper.UseMode = (LockOnHelper.LockOnMode)currentValue7;
			if (LockOnHelper.UseMode == LockOnHelper.LockOnMode.FocusTarget)
			{
				LockOnHelper.UseMode = LockOnHelper.LockOnMode.ThreeDS;
			}
			Configuration.Get("InvisibleCursorForGamepad", InvisibleCursorForGamepad);
			if (Enum.TryParse<GameNotificationType>(Configuration.Get("FlashIconForEvents", "All"), out var result3))
			{
				_flashNotificationType = result3;
			}
			if (!flag)
			{
				string screenDeviceName = Configuration.Get("DisplayScreen", "");
				_windowMover.TryMovingToScreen(screenDeviceName);
				bool flag2 = Configuration.Get("ThrottleWhenInactive", defaultValue: true);
				base.InactiveSleepTime = TimeSpan.FromMilliseconds(flag2 ? 20 : 0);
			}
			//Form form = (Form)Control.FromHandle(instance.Window.Handle);
			if (screenBorderless)
			{
				//SetBorderlessFormStyle(form);
			}
			else if (screenMaximized)
			{
				//form.WindowState = FormWindowState.Maximized;
				//form.FormBorderStyle = FormBorderStyle.Sizable;
			}
			else
			{
				//form.FormBorderStyle = FormBorderStyle.Sizable;
			}
			//Control.FromHandle(instance.Window.Handle).BringToFront();
			if (!flag)
			{
				Configuration.Get("Support4K", Support4K);
			}
			Configuration.Get("UseExperimentalFeatures", UseExperimentalFeatures);
			Configuration.Get("SettingsUnlock_WorldEvil", SettingsUnlock_WorldEvil);
			Configuration.Get("SettingsEnabled_MinersWobble", SettingsEnabled_MinersWobble);
			Configuration.Get("SettingBlockGamepadsEntirely", SettingBlockGamepadsEntirely);
			Configuration.Get("SettingsEnabled_OpaqueBoxBehindTooltips", SettingsEnabled_OpaqueBoxBehindTooltips);
			Configuration.Get("SettingsEnabled_TilesSwayInWind", SettingsEnabled_TilesSwayInWind);
			int currentValue8 = (int)DoorOpeningHelper.PreferenceSettings;
			Configuration.Get("DoorAutoOpeningMode", currentValue8);
			DoorOpeningHelper.PreferenceSettings = (DoorOpeningHelper.DoorAutoOpeningPreference)currentValue8;
			if (currentValue <= 147)
			{
				terrariasFixedTiming = !terrariasFixedTiming;
			}
			if (currentValue <= 162)
			{
				bool currentValue9 = false;
				uint currentValue10 = 0u;
				Configuration.Get("ThickMouseEdges", currentValue9);
				if (currentValue9)
				{
					Configuration.Get("ThickMouseEdgesPackedColor", currentValue10);
					MouseBorderColor.PackedValue = currentValue10;
					mouseColor.R = Configuration.Get("MouseColorR", mouseColor.R);
					mouseColor.G = Configuration.Get("MouseColorG", mouseColor.G);
					mouseColor.B = Configuration.Get("MouseColorB", mouseColor.B);
				}
			}
			if (currentValue <= 162)
			{
				Configuration.Get("KeyUp", cUp);
				Configuration.Get("KeyDown", cDown);
				Configuration.Get("KeyLeft", cLeft);
				Configuration.Get("KeyRight", cRight);
				Configuration.Get("KeyJump", cJump);
				Configuration.Get("KeyThrowItem", cThrowItem);
				Configuration.Get("KeyInventory", cInv);
				Configuration.Get("KeyQuickHeal", cHeal);
				Configuration.Get("KeyQuickMana", cMana);
				Configuration.Get("KeyQuickBuff", cBuff);
				Configuration.Get("KeyUseHook", cHook);
				Configuration.Get("KeyAutoSelect", cTorch);
				Configuration.Get("KeySmartCursor", cSmart);
				Configuration.Get("KeyMount", cMount);
				Configuration.Get("KeyMapStyle", cMapStyle);
				Configuration.Get("KeyFullscreenMap", cMapFull);
				Configuration.Get("KeyMapZoomIn", cMapZoomIn);
				Configuration.Get("KeyMapZoomOut", cMapZoomOut);
				Configuration.Get("KeyMapAlphaUp", cMapAlphaUp);
				Configuration.Get("KeyMapAlphaDown", cMapAlphaDown);
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Up"] = new List<string>
				{
					cUp
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Down"] = new List<string>
				{
					cDown
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Left"] = new List<string>
				{
					cLeft
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Right"] = new List<string>
				{
					cRight
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Jump"] = new List<string>
				{
					cJump
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Throw"] = new List<string>
				{
					cThrowItem
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Inventory"] = new List<string>
				{
					cInv
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickHeal"] = new List<string>
				{
					cHeal
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickMana"] = new List<string>
				{
					cMana
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickBuff"] = new List<string>
				{
					cBuff
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["Grapple"] = new List<string>
				{
					cHook
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["SmartSelect"] = new List<string>
				{
					cTorch
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["SmartCursor"] = new List<string>
				{
					cSmart
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["QuickMount"] = new List<string>
				{
					cMount
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapStyle"] = new List<string>
				{
					cMapStyle
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapFull"] = new List<string>
				{
					cMapFull
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapZoomIn"] = new List<string>
				{
					cMapZoomIn
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapZoomOut"] = new List<string>
				{
					cMapZoomOut
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapAlphaUp"] = new List<string>
				{
					cMapAlphaUp
				};
				PlayerInput.CurrentProfile.InputModes[InputMode.Keyboard].KeyStatus["MapAlphaDown"] = new List<string>
				{
					cMapAlphaDown
				};
			}
			PlayerInput.Load();
			if (currentValue < 165)
			{
				try
				{
					PlayerInput.ManageVersion_1_3();
				}
				catch (Exception)
				{
				}
			}
			mouseColorSlider.SetHSL(mouseColor);
			mouseBorderColorSlider.SetHSL(MouseBorderColor);
			mouseBorderColorSlider.Alpha = (float)(int)MouseBorderColor.A / 255f;
			if (currentValue != 230)
			{
				SaveSettings();
			}
		}

		protected void OpenLegacySettings()
		{
			try
			{
				if (!File.Exists(SavePath + Path.DirectorySeparatorChar + "config.dat"))
				{
					return;
				}
				using FileStream input = new FileStream(SavePath + Path.DirectorySeparatorChar + "config.dat", FileMode.Open);
				using BinaryReader binaryReader = new BinaryReader(input);
				int num = binaryReader.ReadInt32();
				if (num >= 68)
				{
					if (num >= 67)
					{
						clientUUID = binaryReader.ReadString();
					}
					bool flag = binaryReader.ReadBoolean();
					mouseColor.R = binaryReader.ReadByte();
					mouseColor.G = binaryReader.ReadByte();
					mouseColor.B = binaryReader.ReadByte();
					soundVolume = binaryReader.ReadSingle();
					if (num >= 90)
					{
						ambientVolume = binaryReader.ReadSingle();
					}
					musicVolume = binaryReader.ReadSingle();
					cUp = binaryReader.ReadString();
					cDown = binaryReader.ReadString();
					cLeft = binaryReader.ReadString();
					cRight = binaryReader.ReadString();
					cJump = binaryReader.ReadString();
					cThrowItem = binaryReader.ReadString();
					if (num >= 1)
					{
						cInv = binaryReader.ReadString();
					}
					if (num >= 12)
					{
						cHeal = binaryReader.ReadString();
						cMana = binaryReader.ReadString();
						cBuff = binaryReader.ReadString();
					}
					if (num >= 13)
					{
						cHook = binaryReader.ReadString();
					}
					caveParallax = binaryReader.ReadSingle();
					if (num >= 2)
					{
						terrariasFixedTiming = binaryReader.ReadBoolean();
					}
					if (num >= 91 && binaryReader.ReadBoolean())
					{
						//((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
					}
					if (num >= 4)
					{
						int width = binaryReader.ReadInt32();
						int height = binaryReader.ReadInt32();
						SetDisplayMode(width, height, flag);
					}
					if (num >= 8)
					{
						autoSave = binaryReader.ReadBoolean();
					}
					if (num >= 9)
					{
						autoPause = binaryReader.ReadBoolean();
					}
					if (num >= 19)
					{
						showItemText = binaryReader.ReadBoolean();
					}
					if (num >= 30)
					{
						cTorch = binaryReader.ReadString();
						Lighting.Mode = (LightMode)binaryReader.ReadByte();
						qaStyle = binaryReader.ReadByte();
					}
					if (num >= 37)
					{
						BackgroundEnabled = binaryReader.ReadBoolean();
					}
					if (num >= 39)
					{
						byte b = binaryReader.ReadByte();
						_needsLanguageSelect = b == 0;
						LanguageManager.Instance.SetLanguage(b);
					}
					if (num >= 46)
					{
						mapEnabled = binaryReader.ReadBoolean();
						cMapStyle = binaryReader.ReadString();
						cMapFull = binaryReader.ReadString();
						cMapZoomIn = binaryReader.ReadString();
						cMapZoomOut = binaryReader.ReadString();
						cMapAlphaUp = binaryReader.ReadString();
						cMapAlphaDown = binaryReader.ReadString();
					}
					if (num >= 89)
					{
						binaryReader.ReadInt32();
					}
					if (num >= 100)
					{
						cSmart = binaryReader.ReadString();
						cSmartCursorModeIsToggleAndNotHold = binaryReader.ReadBoolean();
					}
					if (num >= 107)
					{
						invasionProgressMode = binaryReader.ReadByte();
					}
					if (num >= 111)
					{
						placementPreview = binaryReader.ReadBoolean();
					}
					if (num >= 111)
					{
						placementPreview = binaryReader.ReadBoolean();
					}
					SetFullScreen(flag);
				}
				binaryReader.Close();
			}
			catch
			{
			}
		}

		private static void ErasePlayer(int i)
		{
			try
			{
				FileUtilities.Delete(PlayerList[i].Path, PlayerList[i].IsCloudSave);
				FileUtilities.Delete(PlayerList[i].Path + ".bak", PlayerList[i].IsCloudSave);
			}
			catch
			{
			}
			try
			{
				string text = PlayerList[i].Path.Substring(0, PlayerList[i].Path.Length - 4);
				if (text.Substring(text.Length - 1) != "." && text.Substring(text.Length - 1) != "\\" && Directory.Exists(text))
				{
					Directory.Delete(text, recursive: true);
				}
				LoadPlayers();
			}
			catch
			{
			}
		}

		private static void EraseWorld(int i)
		{
			try
			{
				if (!WorldList[i].IsCloudSave)
				{
					FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path);
					FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path + ".bak");
				}
				else if (SocialAPI.Cloud != null)
				{
					SocialAPI.Cloud.Delete(WorldList[i].Path);
				}
				LoadWorlds();
			}
			catch
			{
			}
		}

		public static string GetPlayerPathFromName(string playerName, bool cloudSave)
		{
			char[] invalidFileNameChars = Path.GetInvalidFileNameChars();
			string text = "";
			playerName = playerName.Replace(".", "_");
			playerName = playerName.Replace("*", "_");
			foreach (char c in playerName)
			{
				text += ((!invalidFileNameChars.Contains(c)) ? ((c != ' ') ? c : '_') : '-');
			}
			string text2 = (cloudSave ? CloudPlayerPath : PlayerPath);
			if (FileUtilities.GetFullPath(text2 + Path.DirectorySeparatorChar + text + ".plr", cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal))
			{
				text += "_";
			}
			if (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar + text + ".plr", cloudSave))
			{
				int num = 2;
				while (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar.ToString() + text + num + ".plr", cloudSave))
				{
					num++;
				}
				text += num;
			}
			return text2 + Path.DirectorySeparatorChar + text + ".plr";
		}

		public static string GetWorldPathFromName(string worldName, bool cloudSave)
		{
			char[] invalidFileNameChars = Path.GetInvalidFileNameChars();
			string text = "";
			foreach (char c in worldName)
			{
				text += ((!invalidFileNameChars.Contains(c)) ? ((c != ' ') ? c : '_') : '-');
			}
			text = text.Replace(".", "_");
			text = text.Replace("*", "_");
			string text2 = (cloudSave ? CloudWorldPath : WorldPath);
			if (FileUtilities.GetFullPath(text2 + Path.DirectorySeparatorChar + text + ".wld", cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal))
			{
				text += "_";
			}
			if (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar + text + ".wld", cloudSave))
			{
				int num = 2;
				while (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar.ToString() + text + num + ".wld", cloudSave))
				{
					num++;
				}
				text += num;
			}
			return text2 + Path.DirectorySeparatorChar + text + ".wld";
		}

		public void setServerWorldRollbacks(string rollBacksToKeep)
		{
			WorldRollingBackupsCountToKeep = Convert.ToInt32(rollBacksToKeep);
		}

		public void autoCreate(string worldSize)
		{
			switch (worldSize)
			{
			case "0":
				autoGen = false;
				break;
			case "1":
				maxTilesX = 4200;
				maxTilesY = 1200;
				autoGen = true;
				break;
			case "2":
				maxTilesX = 6300;
				maxTilesY = 1800;
				autoGen = true;
				break;
			case "3":
				maxTilesX = 8400;
				maxTilesY = 2400;
				autoGen = true;
				break;
			}
		}

		public void NewMOTD(string newMOTD)
		{
			motd = newMOTD;
		}

		public static string ConvertToSafeArgument(string arg)
		{
			return Uri.EscapeDataString(arg);
		}

		public static string ConvertFromSafeArgument(string arg)
		{
			return Uri.UnescapeDataString(arg);
		}

		public void LoadDedConfig(string configPath)
		{
			if (!File.Exists(configPath))
			{
				return;
			}
			using StreamReader streamReader = new StreamReader(configPath);
			string text;
			while ((text = streamReader.ReadLine()) != null)
			{
				try
				{
					if (text.Length > 6 && text.Substring(0, 6).ToLower() == "world=")
					{
						string text2 = (autoGenFileLocation = text.Substring(6));
						ActiveWorldFileData = WorldFile.GetAllMetadata("/Android/data/ru.mexicanr.terraria/"/*"/sdcard"*//*Platform.Get<IPathService>().ExpandPathVariables(text2)*/, 
							cloudSave: false);
					}
					if (text.Length > 5 && text.Substring(0, 5).ToLower() == "port=")
					{
						string value = text.Substring(5);
						try
						{
							Netplay.ListenPort = Convert.ToInt32(value);
						}
						catch
						{
						}
					}
					if (text.Length > 11 && text.Substring(0, 21).ToLower() == "worldrollbackstokeep=")
					{
						string value2 = text.Substring(21);
						try
						{
							WorldRollingBackupsCountToKeep = Convert.ToInt32(value2);
						}
						catch
						{
						}
					}
					if (text.Length > 11 && text.Substring(0, 11).ToLower() == "maxplayers=")
					{
						string value3 = text.Substring(11);
						try
						{
							maxNetPlayers = Convert.ToInt32(value3);
						}
						catch
						{
						}
					}
					if (text.Length > 11 && text.Substring(0, 9).ToLower() == "priority=" && !Program.LaunchParameters.ContainsKey("-forcepriority"))
					{
						string value4 = text.Substring(9);
						try
						{
							int num = Convert.ToInt32(value4);
							if (num >= 0 && num <= 5)
							{
								Process currentProcess = Process.GetCurrentProcess();
								switch (num)
								{
								case 0:
									currentProcess.PriorityClass = ProcessPriorityClass.RealTime;
									break;
								case 1:
									currentProcess.PriorityClass = ProcessPriorityClass.High;
									break;
								case 2:
									currentProcess.PriorityClass = ProcessPriorityClass.AboveNormal;
									break;
								case 3:
									currentProcess.PriorityClass = ProcessPriorityClass.Normal;
									break;
								case 4:
									currentProcess.PriorityClass = ProcessPriorityClass.BelowNormal;
									break;
								case 5:
									currentProcess.PriorityClass = ProcessPriorityClass.Idle;
									break;
								}
							}
						}
						catch
						{
						}
					}
					if (text.Length > 9 && text.Substring(0, 9).ToLower() == "password=")
					{
						Netplay.ServerPassword = ConvertFromSafeArgument(text.Substring(9));
					}
					if (text.Length > 5 && text.Substring(0, 5).ToLower() == "motd=")
					{
						motd = text.Substring(5);
					}
					if (text.Length > 5 && text.Substring(0, 5).ToLower() == "lang=")
					{
						string value5 = text.Substring(5);
						LanguageManager.Instance.SetLanguage(Convert.ToInt32(value5));
					}
					if (text.Length > 5 && text.Substring(0, 5).ToLower() == "language=")
					{
						string language = text.Substring(9);
						LanguageManager.Instance.SetLanguage(language);
					}
					if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldpath=")
					{
						string text3 = text.Substring(10);
						WorldPath = "/Android/data/ru.mexicanr.terraria/";//"/sdcard";//Platform.Get<IPathService>().ExpandPathVariables(text3);
					}
					if (text.Length >= 10 && text.Substring(0, 10).ToLower() == "worldname=")
					{
						worldName = text.Substring(10);
					}
					if (text.Length >= 5 && text.Substring(0, 5).ToLower() == "seed=")
					{
						AutogenSeedName = text.Substring(5);
					}
					if (text.Length > 8 && text.Substring(0, 8).ToLower() == "banlist=")
					{
						string text4 = text.Substring(8);
						//Netplay.BanFilePath = Platform.Get<IPathService>().ExpandPathVariables(text4);
					}
					if (text.Length > 11 && text.Substring(0, 11).ToLower() == "difficulty=")
					{
						switch (text.Substring(11))
						{
						case "0":
							GameMode = 0;
							break;
						case "1":
							GameMode = 1;
							break;
						case "2":
							GameMode = 2;
							break;
						case "3":
							GameMode = 3;
							break;
						}
					}
					if (text.Length > 11 && text.Substring(0, 11).ToLower() == "autocreate=")
					{
						switch (text.Substring(11))
						{
						case "0":
							autoGen = false;
							break;
						case "1":
							maxTilesX = 4200;
							maxTilesY = 1200;
							autoGen = true;
							break;
						case "2":
							maxTilesX = 6300;
							maxTilesY = 1800;
							autoGen = true;
							break;
						case "3":
							maxTilesX = 8400;
							maxTilesY = 2400;
							autoGen = true;
							break;
						}
					}
					if (text.Length > 7 && text.Substring(0, 7).ToLower() == "secure=" && text.Substring(7) == "1")
					{
						Netplay.SpamCheck = true;
					}
					if (text.Length > 5 && text.Substring(0, 5).ToLower() == "upnp=" && text.Substring(5) != "1")
					{
						Netplay.UseUPNP = false;
					}
					string text5 = "slowliquids=";
					if (text.Length > text5.Length && text.Substring(0, text5.Length).ToLower() == text5 && text.Substring(text5.Length) == "1")
					{
						Setting_UseReducedMaxLiquids = true;
					}
					if (text.Length > 10 && text.Substring(0, 10).ToLower() == "npcstream=")
					{
						string value6 = text.Substring(10);
						try
						{
							npcStreamSpeed = Convert.ToInt32(value6);
						}
						catch
						{
						}
					}
					CreativePowerManager.TryListingPermissionsFrom(text);
				}
				catch
				{
				}
			}
		}

		public void SetNetPlayers(int mPlayers)
		{
			maxNetPlayers = mPlayers;
		}

		public void SetWorld(string world, bool cloud)
		{
			ActiveWorldFileData = WorldFile.GetAllMetadata(world, cloud);
		}

		public void SetWorldName(string world)
		{
			worldName = world;
		}

		public void EnableAutoShutdown()
		{
			autoShutdown = true;
		}

		[DllImport("user32.dll")]
		public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

		[DllImport("user32.dll")]
		private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

		public void AutoPass()
		{
			autoPass = true;
		}

		public void AutoJoin(string IP)
		{
			defaultIP = IP;
			getIP = IP;
			Netplay.SetRemoteIP(defaultIP);
			autoJoin = true;
		}

		public void AutoHost()
		{
			menuMultiplayer = true;
			menuServer = true;
			ClearPendingPlayerSelectCallbacks();
			menuMode = 1;
		}

		public void loadLib(string path)
		{
			libPath = path;
			LoadLibrary(libPath);
		}

		public void NeverSleep()
		{
			previousExecutionState = NativeMethods.SetThreadExecutionState(2147483649u);
		}

		public void YouCanSleepNow()
		{
			if (previousExecutionState != 0)
			{
				NativeMethods.SetThreadExecutionState(previousExecutionState);
			}
		}

		public void DedServ()
		{
			NeverSleep();
			rand = new UnifiedRandom();
			if (autoShutdown)
			{
				string lpWindowName = (Console.Title = "terraria" + rand.Next(int.MaxValue));
				IntPtr intPtr = FindWindow(null, lpWindowName);
				if (intPtr != IntPtr.Zero)
				{
					ShowWindow(intPtr, 0);
				}
			}
			else
			{
				Console.Title = "Terraria Server " + versionNumber2;
			}
			dedServ = true;
			showSplash = false;
			Initialize();
			while (worldPathName == null || worldPathName == "")
			{
				bool flag = true;
				while (flag)
				{
					LoadWorlds();
					Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
					Console.WriteLine("");
					for (int i = 0; i < WorldList.Count; i++)
					{
						Console.WriteLine(i + 1 + "\t\t" + WorldList[i].Name);
					}
					string textValue = Language.GetTextValue("CLI.NewWorld_Command");
					string textValue2 = Language.GetTextValue("CLI.DeleteWorld_Example");
					int num = (Math.Max(newWorldName.Length, textValue2.Length) + 1) / 8 + 1;
					textValue = textValue + new string('\t', num - textValue.Length / 8) + Language.GetTextValue("CLI.NewWorld_Description");
					textValue2 = textValue2 + new string('\t', num - textValue2.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
					Console.WriteLine(textValue);
					Console.WriteLine(textValue2);
					Console.WriteLine("");
					Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
					string text2 = Console.ReadLine();
					if (text2 == null)
					{
						text2 = "";
					}
					try
					{
						Console.Clear();
					}
					catch
					{
					}
					if (text2.StartsWith(Language.GetTextValue("CLI.DeleteWorld_Command") + " "))
					{
						try
						{
							int length = Language.GetTextValue("CLI.DeleteWorld_Command").Length;
							int num2 = Convert.ToInt32(text2.Substring(length + 1)) - 1;
							if (num2 < WorldList.Count)
							{
								Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
								Console.WriteLine("");
								Console.WriteLine(Language.GetTextValue("CLI.DeleteConfirmation", WorldList[num2].Name));
								Console.Write("({0}/{1}): ", Language.GetTextValue("CLI.ShortYes"), Language.GetTextValue("CLI.ShortNo"));
								if (Console.ReadLine().ToLower() == Language.GetTextValue("CLI.ShortYes").ToLower())
								{
									EraseWorld(num2);
								}
							}
						}
						catch
						{
						}
						try
						{
							Console.Clear();
						}
						catch
						{
						}
						continue;
					}
					if (text2 == "n" || text2 == "N")
					{
						bool flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
							Console.WriteLine("");
							Console.WriteLine("1\t" + Language.GetTextValue("UI.WorldSizeSmall"));
							Console.WriteLine("2\t" + Language.GetTextValue("UI.WorldSizeMedium"));
							Console.WriteLine("3\t" + Language.GetTextValue("UI.WorldSizeLarge"));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.ChooseSize"));
							string value = Console.ReadLine();
							try
							{
								switch (Convert.ToInt32(value))
								{
								case 1:
									maxTilesX = 4200;
									maxTilesY = 1200;
									flag2 = false;
									break;
								case 2:
									maxTilesX = 6400;
									maxTilesY = 1800;
									flag2 = false;
									break;
								case 3:
									maxTilesX = 8400;
									maxTilesY = 2400;
									flag2 = false;
									break;
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
							Console.WriteLine("");
							Console.WriteLine("1\t" + Language.GetTextValue("UI.Normal"));
							Console.WriteLine("2\t" + Language.GetTextValue("UI.Expert"));
							Console.WriteLine("3\t" + Language.GetTextValue("UI.Master"));
							Console.WriteLine("4\t" + Language.GetTextValue("UI.Creative"));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.ChooseDifficulty"));
							string value = Console.ReadLine();
							try
							{
								switch (Convert.ToInt32(value))
								{
								case 1:
									GameMode = 0;
									flag2 = false;
									break;
								case 2:
									GameMode = 1;
									flag2 = false;
									break;
								case 3:
									GameMode = 2;
									flag2 = false;
									break;
								case 4:
									GameMode = 3;
									flag2 = false;
									break;
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						if (SettingsUnlock_WorldEvil)
						{
							flag2 = true;
							while (flag2)
							{
								Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
								Console.WriteLine("");
								Console.WriteLine("1\t" + Language.GetTextValue("CLI.Random"));
								Console.WriteLine("2\t" + Language.GetTextValue("CLI.Corrupt"));
								Console.WriteLine("3\t" + Language.GetTextValue("CLI.Crimson"));
								Console.WriteLine("");
								Console.Write(Language.GetTextValue("CLI.ChooseEvil"));
								string value = Console.ReadLine();
								try
								{
									switch (Convert.ToInt32(value))
									{
									case 1:
										WorldGen.WorldGenParam_Evil = -1;
										flag2 = false;
										break;
									case 2:
										WorldGen.WorldGenParam_Evil = 0;
										flag2 = false;
										break;
									case 3:
										WorldGen.WorldGenParam_Evil = 1;
										flag2 = false;
										break;
									}
								}
								catch
								{
								}
								try
								{
									Console.Clear();
								}
								catch
								{
								}
							}
						}
						flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.EnterWorldName"));
							newWorldName = Console.ReadLine();
							if (newWorldName != "" && newWorldName != " " && newWorldName != null)
							{
								flag2 = false;
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						string text3 = "";
						flag2 = true;
						while (flag2)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.EnterSeed"));
							text3 = Console.ReadLine();
							if (text3 != null)
							{
								flag2 = false;
							}
							else
							{
								text3 = "";
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						worldName = newWorldName;
						ActiveWorldFileData = WorldFile.CreateMetadata(worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, GameMode);
						text3 = text3.Trim();
						if (text3.Length == 0)
						{
							ActiveWorldFileData.SetSeedToRandom();
						}
						else
						{
							ActiveWorldFileData.SetSeed(text3);
						}
						menuMode = 10;
						GenerationProgress generationProgress = new GenerationProgress();
						Task task = WorldGen.CreateNewWorld(generationProgress);
						flag2 = false;
						while (menuMode == 10)
						{
							if (oldStatusText != statusText && !WorldGen.drunkWorldGen)
							{
								oldStatusText = statusText;
								Console.WriteLine(statusText);
							}
						}
						try
						{
							Console.Clear();
						}
						catch
						{
						}
						while (!task.IsCompleted)
						{
							statusText = string.Format("{0:0.0%} - " + generationProgress.Message + " - {1:0.0%}", generationProgress.TotalProgress, generationProgress.Value);
							if (oldStatusText != statusText)
							{
								oldStatusText = statusText;
								Console.WriteLine(statusText);
							}
						}
						continue;
					}
					try
					{
						int num3 = Convert.ToInt32(text2);
						num3--;
						if (num3 < 0 || num3 >= WorldList.Count)
						{
							continue;
						}
						bool flag3 = true;
						while (flag3)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.SetInitialMaxPlayers"));
							string text4 = Console.ReadLine();
							try
							{
								if (text4 == "")
								{
									text4 = "16";
								}
								int num4 = Convert.ToInt32(text4);
								if (num4 <= 255 && num4 >= 1)
								{
									maxNetPlayers = num4;
									flag3 = false;
								}
								flag3 = false;
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						flag3 = true;
						while (flag3)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.SetInitialPort"));
							string text5 = Console.ReadLine();
							try
							{
								if (text5 == "")
								{
									text5 = "7777";
								}
								int num5 = Convert.ToInt32(text5);
								if (num5 <= 65535)
								{
									Netplay.ListenPort = num5;
									flag3 = false;
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						flag3 = true;
						while (flag3)
						{
							Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
							Console.WriteLine("");
							Console.Write(Language.GetTextValue("CLI.AutomaticPortForward", Language.GetTextValue("CLI.ShortYes"), Language.GetTextValue("CLI.ShortNo")));
							string text6 = Console.ReadLine();
							try
							{
								if (text6 == "" || text6.ToLower() == Language.GetTextValue("CLI.ShortYes").ToLower() || text6.ToLower() == Language.GetTextValue("CLI.Yes").ToLower())
								{
									Netplay.UseUPNP = true;
									flag3 = false;
								}
								else if (text6.ToLower() == Language.GetTextValue("CLI.ShortNo").ToLower() || text6.ToLower() == Language.GetTextValue("CLI.No").ToLower())
								{
									Netplay.UseUPNP = false;
									flag3 = false;
								}
							}
							catch
							{
							}
							try
							{
								Console.Clear();
							}
							catch
							{
							}
						}
						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber2));
						Console.WriteLine("");
						Console.Write(Language.GetTextValue("CLI.EnterServerPassword"));
						Netplay.ServerPassword = Console.ReadLine();
						ActiveWorldFileData = WorldList[num3];
						flag = false;
						try
						{
							Console.Clear();
						}
						catch
						{
						}
					}
					catch
					{
					}
				}
			}
			try
			{
				Console.Clear();
			}
			catch
			{
			}
			Task task2 = WorldGen.serverLoadWorld();
			Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
			Console.WriteLine("");
			while (!task2.IsCompleted)
			{
				if (WorldFile.LastThrownLoadException == null)
				{
					if (AutogenProgress.TotalProgress != 0f)
					{
						statusText = string.Format("{0:0.0%} - " + AutogenProgress.Message + " - {1:0.0%}", AutogenProgress.TotalProgress, AutogenProgress.Value);
					}
					if (oldStatusText != statusText)
					{
						oldStatusText = statusText;
						Console.WriteLine(statusText);
					}
				}
			}
			try
			{
				if (WorldFile.LastThrownLoadException == null)
				{
					Console.Clear();
				}
			}
			catch
			{
			}
			if (WorldGen.loadFailed || !WorldGen.loadSuccess)
			{
				WriteFancyWorldLoadErrorToConsole();
				if (!autoShutdown)
				{
					Console.ReadKey();
				}
				YouCanSleepNow();
				return;
			}
			Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
			Console.WriteLine("");
			Console.WriteLine(Language.GetTextValue("CLI.ListeningOnPort", Netplay.ListenPort));
			Console.WriteLine(Language.GetTextValue("CLI.HelpHint"));
			Console.WriteLine("");
			Console.Title = "Terraria Server: " + worldName;
			Stopwatch stopwatch = new Stopwatch();
			if (!autoShutdown)
			{
				startDedInput();
			}
			stopwatch.Start();
			double num6 = 16.666666666666668;
			double num7 = 0.0;
			int num8 = 0;
			new Stopwatch().Start();
			Netplay.StartServer();
			gameMenu = false;
			while (!Netplay.Disconnect)
			{
				double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
				if (totalMilliseconds + num7 >= num6)
				{
					num8++;
					num7 += totalMilliseconds - num6;
					stopwatch.Reset();
					stopwatch.Start();
					if (oldStatusText != statusText)
					{
						oldStatusText = statusText;
						Console.WriteLine(statusText);
					}
					if (Netplay.HasClients)
					{
						Update(new GameTime());
					}
					else if (saveTime.IsRunning)
					{
						saveTime.Stop();
					}
					if (Main.OnTickForThirdPartySoftwareOnly != null)
					{
						Main.OnTickForThirdPartySoftwareOnly();
					}
					double num9 = stopwatch.Elapsed.TotalMilliseconds + num7;
					if (num9 < num6)
					{
						int num10 = (int)(num6 - num9) - 1;
						if (num10 > 1)
						{
							Thread.Sleep(num10 - 1);
							if (!Netplay.HasClients)
							{
								num7 = 0.0;
								Thread.Sleep(10);
							}
						}
					}
				}
				Thread.Sleep(0);
			}
			YouCanSleepNow();
		}

		private static void WriteFancyWorldLoadErrorToConsole()
		{
			Console.WriteLine();
			Console.WriteLine(WorldFile.LastThrownLoadException.ToString());
		}

		public static void startDedInput()
		{
			Thread thread = new Thread(startDedInputCallBack);
			thread.IsBackground = true;
			thread.Name = "Server Input Thread";
			thread.Start();
		}

		public static void startDedInputCallBack()
		{
			while (!Netplay.Disconnect)
			{
				Console.Write(": ");
				string text = Console.ReadLine();
				string text2 = text;
				text = text.ToLower();
				try
				{
					if (text == Language.GetTextValue("CLI.Help_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.AvailableCommands"));
						Console.WriteLine("");
						List<string> list = new List<string>
						{
							"Help",
							"Playing",
							"Clear",
							"Exit",
							"ExitNoSave",
							"Save",
							"Kick",
							"Ban",
							"Password",
							"SetPassword",
							"Version",
							"Time",
							"Port",
							"MaxPlayers",
							"Say",
							"MOTD",
							"SetMOTD",
							"Dawn",
							"Noon",
							"Dusk",
							"Midnight",
							"Settle",
							"Seed"
						};
						int num = 0;
						for (int i = 0; i < list.Count; i++)
						{
							string text3 = (Language.Exists("CLI." + list[i] + "_Example") ? Language.GetTextValue("CLI." + list[i] + "_Example") : Language.GetTextValue("CLI." + list[i] + "_Command"));
							if (text3.Length > num)
							{
								num = text3.Length;
							}
						}
						int num2 = (num + 1) / 8;
						for (int j = 0; j < list.Count; j++)
						{
							string text4 = (Language.Exists("CLI." + list[j] + "_Example") ? Language.GetTextValue("CLI." + list[j] + "_Example") : Language.GetTextValue("CLI." + list[j] + "_Command"));
							Console.WriteLine(text4 + new string('\t', num2 - text4.Length / 8) + Language.GetTextValue("CLI." + list[j] + "_Description"));
						}
					}
					else if (text == Language.GetTextValue("CLI.Settle_Command"))
					{
						if (!Liquid.panicMode)
						{
							Liquid.StartPanic();
						}
						else
						{
							Console.WriteLine(Language.GetTextValue("CLI.WaterIsAlreadySettling"));
						}
					}
					else if (text == Language.GetTextValue("CLI.Dawn_Command"))
					{
						dayTime = true;
						time = 0.0;
						NetMessage.SendData(7);
					}
					else if (text == Language.GetTextValue("CLI.Dusk_Command"))
					{
						dayTime = false;
						time = 0.0;
						NetMessage.SendData(7);
					}
					else if (text == Language.GetTextValue("CLI.Noon_Command"))
					{
						dayTime = true;
						time = 27000.0;
						NetMessage.SendData(7);
					}
					else if (text == Language.GetTextValue("CLI.Midnight_Command"))
					{
						dayTime = false;
						time = 16200.0;
						NetMessage.SendData(7);
					}
					else if (text == Language.GetTextValue("CLI.ExitNoSave_Command"))
					{
						Netplay.Disconnect = true;
					}
					else if (text == Language.GetTextValue("CLI.Exit_Command"))
					{
						WorldFile.SaveWorld();
						Netplay.Disconnect = true;
						SocialAPI.Shutdown();
					}
					else if (text == Language.GetTextValue("CLI.FPS_Command"))
					{
						if (!dedServFPS)
						{
							dedServFPS = true;
							fpsTimer.Reset();
						}
						else
						{
							dedServCount1 = 0;
							dedServCount2 = 0;
							dedServFPS = false;
						}
					}
					else if (text == Language.GetTextValue("CLI.Save_Command"))
					{
						WorldFile.SaveWorld();
					}
					else if (text == Language.GetTextValue("CLI.Time_Command"))
					{
						string textValue = Language.GetTextValue("GameUI.TimeAtMorning");
						double num3 = time;
						if (!dayTime)
						{
							num3 += 54000.0;
						}
						num3 = num3 / 86400.0 * 24.0;
						double num4 = 7.5;
						num3 = num3 - num4 - 12.0;
						if (num3 < 0.0)
						{
							num3 += 24.0;
						}
						if (num3 >= 12.0)
						{
							textValue = Language.GetTextValue("GameUI.TimePastMorning");
						}
						int num5 = (int)num3;
						double num6 = (int)((num3 - (double)num5) * 60.0);
						string text5 = string.Concat(num6);
						if (num6 < 10.0)
						{
							text5 = "0" + text5;
						}
						if (num5 > 12)
						{
							num5 -= 12;
						}
						if (num5 == 0)
						{
							num5 = 12;
						}
						Console.WriteLine(Language.GetTextValue("CLI.Time", num5 + ":" + text5 + " " + textValue));
					}
					else if (text == Language.GetTextValue("CLI.MaxPlayers_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.PlayerLimit", maxNetPlayers));
					}
					else if (text == Language.GetTextValue("CLI.Port_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.Port", Netplay.ListenPort));
					}
					else if (text == Language.GetTextValue("CLI.Version_Command"))
					{
						Console.WriteLine(Language.GetTextValue("CLI.Server", versionNumber));
					}
					else if (text == Language.GetTextValue("CLI.Clear_Command"))
					{
						try
						{
							Console.Clear();
						}
						catch
						{
						}
					}
					else if (text == Language.GetTextValue("CLI.Playing_Command"))
					{
						int num7 = 0;
						for (int k = 0; k < 255; k++)
						{
							if (player[k].active)
							{
								num7++;
								Console.WriteLine(string.Concat(player[k].name, " (", Netplay.Clients[k].Socket.GetRemoteAddress(), ")"));
							}
						}
						switch (num7)
						{
						case 0:
							Console.WriteLine(Language.GetTextValue("CLI.NoPlayers"));
							break;
						case 1:
							Console.WriteLine(Language.GetTextValue("CLI.OnePlayerConnected"));
							break;
						default:
							Console.WriteLine(Language.GetTextValue("CLI.PlayersConnected", num7));
							break;
						}
					}
					else
					{
						if (text == "")
						{
							continue;
						}
						if (text == Language.GetTextValue("CLI.MOTD_Command"))
						{
							if (motd == "")
							{
								Console.WriteLine(Language.GetTextValue("CLI.NoMOTD", worldName));
							}
							else
							{
								Console.WriteLine(Language.GetTextValue("CLI.MOTD", motd));
							}
						}
						else if (text.StartsWith(Language.GetTextValue("CLI.SetMOTD_Command") + " "))
						{
							motd = text2.Substring(Language.GetTextValue("CLI.SetMOTD_Command").Length + 1);
						}
						else if (text == Language.GetTextValue("CLI.Password_Command"))
						{
							if (Netplay.ServerPassword == "")
							{
								Console.WriteLine(Language.GetTextValue("CLI.NoPassword"));
							}
							else
							{
								Console.WriteLine(Language.GetTextValue("CLI.Password", Netplay.ServerPassword));
							}
						}
						else if (text.StartsWith(Language.GetTextValue("CLI.SetPassword_Command") + " "))
						{
							string text6 = text2.Substring(Language.GetTextValue("CLI.SetPassword_Command").Length + 1);
							if (text6 == "")
							{
								Netplay.ServerPassword = "";
								Console.WriteLine(Language.GetTextValue("CLI.PasswordDisabled"));
							}
							else
							{
								Netplay.ServerPassword = text6;
								Console.WriteLine(Language.GetTextValue("CLI.PasswordSet", Netplay.ServerPassword));
							}
						}
						else if (text == Language.GetTextValue("CLI.Say_Command"))
						{
							Console.WriteLine(Language.GetTextValue("CLI.Say_Usage"));
						}
						else if (text.StartsWith(Language.GetTextValue("CLI.Say_Command") + " "))
						{
							int length = Language.GetTextValue("CLI.Say_Command").Length;
							if (text.Length <= length + 1)
							{
								Console.WriteLine(Language.GetTextValue("CLI.Say_Usage"));
								continue;
							}
							string text7 = text2.Substring(length + 1);
							Console.WriteLine(Language.GetTextValue("CLI.ServerMessage", text7));
							ChatHelper.BroadcastChatMessage(NetworkText.FromKey("CLI.ServerMessage", text7), new Microsoft.Xna.Framework.Color(255, 240, 20));
						}
						else if (text == Language.GetTextValue("CLI.Kick_Command"))
						{
							Console.WriteLine(Language.GetTextValue("CLI.Kick_Usage"));
						}
						else if (text.StartsWith(Language.GetTextValue("CLI.Kick_Command") + " "))
						{
							int length2 = Language.GetTextValue("CLI.Kick_Command").Length;
							if (text.Length <= length2 + 1)
							{
								Console.WriteLine(Language.GetTextValue("CLI.Kick_Usage"));
								continue;
							}
							string text8 = text.Substring(length2 + 1);
							text8 = text8.ToLower();
							for (int l = 0; l < 255; l++)
							{
								if (player[l].active && player[l].name.ToLower() == text8)
								{
									NetMessage.SendData(2, l, -1, NetworkText.FromKey("CLI.KickMessage"));
								}
							}
						}
						else if (text == Language.GetTextValue("CLI.Seed_Command"))
						{
							if (ActiveWorldFileData == null || !ActiveWorldFileData.HasValidSeed)
							{
								Console.WriteLine(Language.GetTextValue("CLI.NoValidSeed"));
							}
							else
							{
								Console.WriteLine(Language.GetTextValue("CLI.DisplaySeed", ActiveWorldFileData.GetFullSeedText()));
							}
						}
						else if (text == Language.GetTextValue("CLI.Ban_Command"))
						{
							Console.WriteLine(Language.GetTextValue("CLI.Ban_Usage"));
						}
						else if (text.StartsWith(Language.GetTextValue("CLI.Ban_Command") + " "))
						{
							int length3 = Language.GetTextValue("CLI.Ban_Command").Length;
							if (text.Length <= length3 + 1)
							{
								Console.WriteLine(Language.GetTextValue("CLI.Ban_Usage"));
								continue;
							}
							string text9 = text.Substring(4);
							text9 = text9.ToLower();
							for (int m = 0; m < 255; m++)
							{
								if (player[m].active && player[m].name.ToLower() == text9)
								{
									Netplay.AddBan(m);
									NetMessage.SendData(2, m, -1, NetworkText.FromKey("CLI.BanMessage"));
								}
							}
						}
						else
						{
							Console.WriteLine(Language.GetTextValue("CLI.InvalidCommand"));
						}
						continue;
					}
				}
				catch
				{
					Console.WriteLine(Language.GetTextValue("CLI.InvalidCommand"));
				}
			}
		}

		public static void Sundialing()
		{
			if (sundialCooldown == 0)
			{
				if (netMode == 1)
				{
					NetMessage.SendData(51, -1, -1, null, myPlayer, 3f);
					return;
				}
				fastForwardTime = true;
				sundialCooldown = 8;
				NetMessage.SendData(7);
			}
		}

		public static void UpdateTimeRate()
		{
			if (fastForwardTime)
			{
				dayRate = 60;
				desiredWorldTilesUpdateRate = 1;
				return;
			}
			bool enabled = CreativePowerManager.Instance.GetPower<CreativePowers.FreezeTime>().Enabled;
			int targetTimeRate = CreativePowerManager.Instance.GetPower<CreativePowers.ModifyTimeRate>().TargetTimeRate;
			bool flag = CurrentFrameFlags.SleepingPlayersCount == CurrentFrameFlags.ActivePlayersCount && CurrentFrameFlags.SleepingPlayersCount > 0;
			int num = targetTimeRate;
			if (!gameMenu && flag)
			{
				num *= 5;
			}
			if (enabled)
			{
				num = 0;
			}
			dayRate = num;
			desiredWorldTilesUpdateRate = num;
		}

		public Main()
		{
			instance = this;
			UnpausedUpdateSeed = (ulong)Guid.NewGuid().GetHashCode();
			Configuration.Load();
			graphics = new GraphicsDeviceManager(this as Game);
			base.Content.RootDirectory = "Content";
		}

		private static void SetDisplayMonitor()
		{
			Configuration.Get("Display", "");
			graphics.PreparingDeviceSettings += SetMonitorOnce;
		}

		private static void SetMonitorOnce(object sender, PreparingDeviceSettingsEventArgs e)
		{
			string displayName = Configuration.Get("Display", "");
			//GraphicsAdapter graphicsAdapter = GraphicsAdapter.Adapters.Where((GraphicsAdapter adapter) => adapter.DeviceName == displayName).FirstOrDefault();
			/*if (graphicsAdapter != null)
			{
				e.GraphicsDeviceInformation.Adapter = graphicsAdapter;
			}*/
			graphics.PreparingDeviceSettings -= SetMonitorOnce;
		}

		protected void SetTitle()
		{
			_cachedTitle = Lang.GetRandomGameTitle();
			//Platform.Get<IWindowService>().SetUnicodeTitle(base.Window, _cachedTitle);
		}

		private static void SetTileValue()
		{
			tileOreFinderPriority[28] = 100;
			tileOreFinderPriority[407] = 150;
			tileOreFinderPriority[404] = 150;
			tileOreFinderPriority[7] = 200;
			tileOreFinderPriority[166] = 210;
			tileOreFinderPriority[6] = 220;
			tileOreFinderPriority[167] = 230;
			tileOreFinderPriority[9] = 240;
			tileOreFinderPriority[168] = 250;
			tileOreFinderPriority[8] = 260;
			tileOreFinderPriority[169] = 270;
			tileOreFinderPriority[22] = 300;
			tileOreFinderPriority[204] = 310;
			tileOreFinderPriority[37] = 400;
			tileOreFinderPriority[21] = 500;
			tileOreFinderPriority[467] = 500;
			tileOreFinderPriority[441] = 500;
			tileOreFinderPriority[468] = 500;
			tileOreFinderPriority[107] = 600;
			tileOreFinderPriority[221] = 610;
			tileOreFinderPriority[108] = 620;
			tileOreFinderPriority[222] = 630;
			tileOreFinderPriority[111] = 640;
			tileOreFinderPriority[223] = 650;
			tileOreFinderPriority[211] = 700;
			tileOreFinderPriority[227] = 750;
			tileOreFinderPriority[12] = 800;
			tileOreFinderPriority[236] = 810;
		}

		private static void ResetGameCounter()
		{
			_gameUpdateCount = 0u;
		}

		protected override void Initialize()
		{
			musicFade[50] = 1f;
			for (int i = 0; i < 10; i++)
			{
				recentWorld[i] = "";
				recentIP[i] = "";
				recentPort[i] = 0;
			}
			if (rand == null)
			{
				rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			SetTitle();
			lo = rand.Next(6);
			waterfallManager = new WaterfallManager();
			_windowMover = new WindowStateController();
			sittingManager = new AnchoredEntitiesCollection();
			sleepingManager = new AnchoredEntitiesCollection();
			gameTips = new GameTipsDisplay();
			if (player[myPlayer] == null)
			{
				player[myPlayer] = new Player();
			}
			ContentSamples.Initialize();
			PlayerInput.Initialize();
			player[myPlayer] = new Player();
			WorldGen.Hooks.OnWorldLoad += delegate
			{
				AmbienceServer = new AmbienceServer();
				LocalGolfState = new GolfState();
				Lighting.Clear();
			};
			PlayerInput.OnActionableInput += delegate
			{
				if (LocalGolfState != null)
				{
					LocalGolfState.CancelBallTracking();
				}
			};
			SceneMetrics = new SceneMetrics(ActiveWorld);
			TimeLogger.Initialize();
			LoadContent_TryEnteringHiDef();
			ClientInitialize();
			base.Initialize();
		}

		private void Initialize_AlmostEverything()
		{
			TilePaintSystem = new TilePaintSystemV2();
			TilesRenderer = new TileDrawing(TilePaintSystem);
			WallsRenderer = new WallDrawing(TilePaintSystem);
			CreativePowerManager.Initialize();
			LocalFavoriteData.Load();
			CloudFavoritesData.Load();
			Initialize_Entities();
			FindAnnouncementBoxStatus();
			CustomCurrencyManager.Initialize();
			WingStatsInitializer.Load();
			TileObjectData.Initialize();
			Animation.Initialize();
			Chest.Initialize();
			Wiring.Initialize();
			Framing.Initialize();
			ItemRarity.Initialize();
			TileEntity.InitializeAll();
			Projectile.InitializeStaticThings();
			TorchID.Initialize();
			InitializeItemAnimations();
			BestiaryDatabase bestiaryDatabase = new BestiaryDatabase();
			new BestiaryDatabaseNPCsPopulator().Populate(bestiaryDatabase);
			BestiaryDB = bestiaryDatabase;
			ContentSamples.RebuildBestiarySortingIDsByBestiaryDatabaseContents(bestiaryDatabase);
			BestiaryTracker = new BestiaryUnlocksTracker();
			ItemDropDatabase itemDropDatabase = new ItemDropDatabase();
			itemDropDatabase.Populate();
			ItemDropsDB = itemDropDatabase;
			bestiaryDatabase.Merge(ItemDropsDB);
			PylonSystem = new TeleportPylonsSystem();
			ItemDropSolver = new ItemDropResolver(itemDropDatabase);
			ShopHelper = new ShopHelper();
			CreativeItemSacrificesCatalog.Instance.Initialize();
			BestiaryUI = new UIBestiaryTest(BestiaryDB);
			ContentThatNeedsRenderTargets.Add(MapPlayerRenderer);
			Lighting.Initialize();
			MapHelper.Initialize();
			WorldGen.RandomizeBackgrounds(rand);
			if (treeBGSet1[0] == 173)
			{
				WorldGen.RandomizeBackgrounds(rand);
			}
			if (treeBGSet1[0] == 173)
			{
				WorldGen.RandomizeBackgrounds(rand);
			}
			WorldGen.RandomizeCaveBackgrounds();
			WorldGen.Hooks.Initialize();
			WorldGen.Hooks.OnWorldLoad += ResetGameCounter;
			bgAlphaFrontLayer[0] = 1f;
			bgAlphaFarBackLayer[0] = 1f;
			invBottom = 258;
			Initialize_TileAndNPCData1();
			Initialize_TileAndNPCData2();
			Initialize_Items();
			for (int i = 0; i < Recipe.maxRecipes; i++)
			{
				recipe[i] = new Recipe();
				availableRecipeY[i] = 65 * i;
			}
			Recipe.SetupRecipes();
			ContentSamples.FixItemsAfterRecipesAreAdded();
			for (int j = 0; j < Liquid.maxLiquid; j++)
			{
				liquid[j] = new Liquid();
			}
			for (int k = 0; k < 50000; k++)
			{
				liquidBuffer[k] = new LiquidBuffer();
			}
			shop[0] = new Chest();
			Chest.SetupTravelShop();
			for (int l = 1; l < 100; l++)
			{
				shop[l] = new Chest();
				shop[l].SetupShop(l);
			}
			teamColor[0] = Microsoft.Xna.Framework.Color.White;
			teamColor[1] = new Microsoft.Xna.Framework.Color(218, 59, 59);
			teamColor[2] = new Microsoft.Xna.Framework.Color(59, 218, 85);
			teamColor[3] = new Microsoft.Xna.Framework.Color(59, 149, 218);
			teamColor[4] = new Microsoft.Xna.Framework.Color(242, 221, 100);
			teamColor[5] = new Microsoft.Xna.Framework.Color(224, 100, 242);
			for (int m = 1; m < 950; m++)
			{
				Projectile obj = new Projectile();
				obj.SetDefaults(m);
				if (obj.hostile)
				{
					projHostile[m] = true;
				}
				if (obj.aiStyle == 7)
				{
					projHook[m] = true;
				}
			}
			Netplay.Initialize();
			NetworkInitializer.Load();
			ChatInitializer.Load();
			if (menuMode == 1)
			{
				LoadPlayers();
			}
			if (skipMenu)
			{
				WorldGen.clearWorld();
				gameMenu = false;
				LoadPlayers();
				PlayerList[0].SetAsActive();
				LoadWorlds();
				WorldGen.GenerateWorld(new UnifiedRandom().Next());
				WorldGen.EveryTileFrame();
				player[myPlayer].Spawn(PlayerSpawnContext.SpawningIntoWorld);
				ActivePlayerFileData.StartPlayTimer();
				Player.Hooks.EnterWorld(myPlayer);
			}
			else
			{
				//IntPtr systemMenu = GetSystemMenu(base.Window.Handle, bRevert: false);
				//int menuItemCount = GetMenuItemCount(systemMenu);
				//RemoveMenu(systemMenu, menuItemCount - 1, 1024);
			}
			SoundID.FillAccessMap();
			Star.SpawnStars();
			ItemSorting.SetupWhiteLists();
		}

		private void Initialize_Entities()
		{
			for (int i = 0; i < maxMenuItems; i++)
			{
				menuItemScale[i] = 0.8f;
			}
			for (int j = 0; j < 6001; j++)
			{
				dust[j] = new Dust();
				dust[j].dustIndex = j;
			}
			for (int k = 0; k < 401; k++)
			{
				item[k] = new Item();
			}
			for (int l = 0; l < 201; l++)
			{
				npc[l] = new NPC();
				npc[l].whoAmI = l;
			}
			for (int m = 0; m < 256; m++)
			{
				player[m] = new Player();
			}
			for (int n = 0; n < 1001; n++)
			{
				projectile[n] = new Projectile();
			}
			for (int num = 0; num < 601; num++)
			{
				gore[num] = new Gore();
			}
			for (int num2 = 0; num2 < maxRain + 1; num2++)
			{
				rain[num2] = new Rain();
			}
			for (int num3 = 0; num3 < 200; num3++)
			{
				cloud[num3] = new Cloud();
			}
			for (int num4 = 0; num4 < 100; num4++)
			{
				combatText[num4] = new CombatText();
			}
			for (int num5 = 0; num5 < 20; num5++)
			{
				popupText[num5] = new PopupText();
			}
		}

		private static void Initialize_Items()
		{
			for (int i = 0; i < 5045; i++)
			{
				Item item = new Item();
				item.SetDefaults(i);
				if (item.headSlot > 0)
				{
					Item.headType[item.headSlot] = item.type;
				}
				if (item.bodySlot > 0)
				{
					Item.bodyType[item.bodySlot] = item.type;
				}
				if (item.legSlot > 0)
				{
					Item.legType[item.legSlot] = item.type;
				}
				switch (item.type)
				{
				case 683:
				case 723:
				case 726:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 788:
				case 1296:
				case 1308:
				case 1326:
				case 1444:
				case 1445:
				case 1446:
				case 1801:
				case 1930:
				case 1931:
				case 2188:
				case 2750:
				case 3006:
				case 3051:
				case 3209:
				case 3210:
				case 3377:
				case 3476:
				case 3569:
				case 3571:
				case 3787:
				case 3852:
				case 3870:
				case 4062:
					Item.staff[item.type] = true;
					break;
				case 1827:
				case 3245:
					Item.claw[item.type] = true;
					break;
				}
			}
		}

		private static void Initialize_TileAndNPCData2()
		{
			critterCage = true;
			for (int i = 0; i < 3600; i++)
			{
				AnimateTiles_CritterCages();
			}
			critterCage = false;
			tileBlockLight[549] = true;
			tileBrick[477] = true;
			tileSolid[477] = true;
			tileBlockLight[477] = true;
			tileBrick[492] = true;
			tileSolid[492] = true;
			tileBlockLight[492] = true;
			tileBrick[1] = true;
			tileBrick[54] = true;
			tileBrick[118] = true;
			tileBrick[119] = true;
			tileBrick[120] = true;
			tileBrick[121] = true;
			tileBrick[122] = true;
			tileBrick[140] = true;
			tileBrick[148] = true;
			tileBrick[150] = true;
			tileBrick[151] = true;
			tileBrick[152] = true;
			tileBrick[30] = true;
			tileBrick[38] = true;
			tileBrick[39] = true;
			tileBrick[41] = true;
			tileBrick[43] = true;
			tileBrick[44] = true;
			tileBrick[481] = true;
			tileBrick[482] = true;
			tileBrick[483] = true;
			tileBrick[45] = true;
			tileBrick[46] = true;
			tileBrick[47] = true;
			tileBrick[75] = true;
			tileBrick[76] = true;
			tileBrick[160] = true;
			tileBrick[2] = true;
			tileBrick[199] = true;
			tileBrick[23] = true;
			tileBrick[60] = true;
			tileBrick[70] = true;
			tileBrick[109] = true;
			tileBrick[53] = true;
			tileBrick[116] = true;
			tileBrick[234] = true;
			tileBrick[112] = true;
			tileBrick[147] = true;
			tileBrick[153] = true;
			tileBrick[154] = true;
			tileBrick[155] = true;
			tileBrick[156] = true;
			tileBrick[157] = true;
			tileBrick[158] = true;
			tileBrick[159] = true;
			tileBrick[273] = true;
			tileBrick[274] = true;
			tileMergeDirt[202] = true;
			tileBrick[202] = true;
			tileSolid[202] = true;
			tileBlockLight[202] = true;
			tileMergeDirt[498] = true;
			tileBrick[161] = true;
			tileBlockLight[161] = true;
			tileBlockLight[163] = true;
			tileBlockLight[164] = true;
			tileSolid[188] = true;
			tileBlockLight[188] = true;
			tileBrick[188] = true;
			tileMergeDirt[188] = true;
			tileBrick[179] = true;
			tileSolid[179] = true;
			tileBlockLight[179] = true;
			tileMoss[179] = true;
			tileBrick[381] = true;
			tileSolid[381] = true;
			tileBlockLight[381] = true;
			tileMoss[381] = true;
			tileBrick[534] = true;
			tileSolid[534] = true;
			tileBlockLight[534] = true;
			tileMoss[534] = true;
			tileBrick[536] = true;
			tileSolid[536] = true;
			tileBlockLight[536] = true;
			tileMoss[536] = true;
			tileBrick[539] = true;
			tileSolid[539] = true;
			tileBlockLight[539] = true;
			tileMoss[539] = true;
			tileBrick[180] = true;
			tileSolid[180] = true;
			tileBlockLight[180] = true;
			tileMoss[180] = true;
			tileBrick[181] = true;
			tileSolid[181] = true;
			tileBlockLight[181] = true;
			tileMoss[181] = true;
			tileBrick[182] = true;
			tileSolid[182] = true;
			tileBlockLight[182] = true;
			tileMoss[182] = true;
			tileBrick[183] = true;
			tileSolid[183] = true;
			tileBlockLight[183] = true;
			tileMoss[183] = true;
			tileBrick[512] = true;
			tileSolid[512] = true;
			tileBlockLight[512] = true;
			tileBrick[513] = true;
			tileSolid[513] = true;
			tileBlockLight[513] = true;
			tileBrick[514] = true;
			tileSolid[514] = true;
			tileBlockLight[514] = true;
			tileBrick[515] = true;
			tileSolid[515] = true;
			tileBlockLight[515] = true;
			tileBrick[516] = true;
			tileSolid[516] = true;
			tileBlockLight[516] = true;
			tileBrick[517] = true;
			tileSolid[517] = true;
			tileBlockLight[517] = true;
			tileLighted[517] = true;
			tileBrick[535] = true;
			tileSolid[535] = true;
			tileBlockLight[535] = true;
			tileLighted[535] = true;
			tileBrick[537] = true;
			tileSolid[537] = true;
			tileBlockLight[537] = true;
			tileLighted[537] = true;
			tileBrick[540] = true;
			tileSolid[540] = true;
			tileBlockLight[540] = true;
			tileLighted[540] = true;
			tileLighted[592] = true;
			tileMergeDirt[177] = true;
			tileMergeDirt[190] = true;
			tileSolid[196] = true;
			tileSolid[197] = true;
			tileMergeDirt[197] = true;
			tileBlockLight[197] = true;
			tileNoSunLight[197] = true;
			tileBrick[175] = true;
			tileSolid[175] = true;
			tileBlockLight[175] = true;
			tileBrick[176] = true;
			tileSolid[176] = true;
			tileBlockLight[176] = true;
			tileBrick[177] = true;
			tileSolid[177] = true;
			tileBlockLight[177] = true;
			tileBrick[225] = true;
			tileBrick[229] = true;
			tileShine[221] = 925;
			tileShine[222] = 875;
			tileShine[223] = 825;
			tileShine2[221] = true;
			tileShine2[222] = true;
			tileShine2[223] = true;
			tileMergeDirt[175] = true;
			tileMergeDirt[176] = true;
			tileMergeDirt[177] = true;
			tileMergeDirt[208] = true;
			tileBrick[162] = true;
			tileSolid[162] = true;
			tileBlockLight[162] = false;
			tileBrick[163] = true;
			tileSolid[163] = true;
			tileBrick[164] = true;
			tileSolid[164] = true;
			tileShine2[6] = true;
			tileShine2[7] = true;
			tileShine2[8] = true;
			tileShine2[9] = true;
			tileShine2[166] = true;
			tileShine2[167] = true;
			tileShine2[168] = true;
			tileShine2[169] = true;
			tileShine2[12] = true;
			tileShine2[21] = true;
			tileShine2[467] = true;
			tileShine2[441] = true;
			tileShine2[468] = true;
			tileShine2[22] = true;
			tileShine2[25] = true;
			tileShine2[45] = true;
			tileShine2[46] = true;
			tileShine2[47] = true;
			tileShine2[63] = true;
			tileShine2[64] = true;
			tileShine2[65] = true;
			tileShine2[66] = true;
			tileShine2[67] = true;
			tileShine2[68] = true;
			tileShine2[566] = true;
			tileShine2[107] = true;
			tileShine2[108] = true;
			tileShine2[111] = true;
			tileShine2[121] = true;
			tileShine2[122] = true;
			tileShine2[117] = true;
			tileShine2[211] = true;
			tileShine[129] = 300;
			tileNoFail[81] = true;
			tileCracked[481] = true;
			tileCracked[482] = true;
			tileCracked[483] = true;
			tileNoFail[481] = true;
			tileNoFail[482] = true;
			tileNoFail[483] = true;
			tileNoFail[330] = true;
			tileNoFail[331] = true;
			tileNoFail[332] = true;
			tileNoFail[333] = true;
			tileNoFail[254] = true;
			tileNoFail[324] = true;
			tileNoFail[129] = true;
			tileNoFail[192] = true;
			tileHammer[26] = true;
			tileHammer[31] = true;
			tileAxe[5] = true;
			tileAxe[72] = true;
			tileAxe[80] = true;
			tileAxe[488] = true;
			tileAxe[323] = true;
			tileAxe[596] = true;
			tileAxe[616] = true;
			tileAxe[589] = true;
			tileAxe[584] = true;
			tileAxe[588] = true;
			tileAxe[586] = true;
			tileAxe[587] = true;
			tileAxe[585] = true;
			tileAxe[583] = true;
			tileBrick[59] = true;
			tileBrick[234] = true;
			tileSolid[234] = true;
			tileMergeDirt[234] = true;
			tileSand[53] = true;
			tileSand[112] = true;
			tileSand[116] = true;
			tileSand[234] = true;
			tileFrameImportant[571] = true;
			tileLavaDeath[571] = true;
			tileFrameImportant[579] = true;
			tileLavaDeath[579] = true;
			tileFrameImportant[591] = true;
			tileLavaDeath[591] = true;
			tileFrameImportant[592] = true;
			tileLavaDeath[592] = false;
			tileFrameImportant[538] = true;
			tileLavaDeath[538] = true;
			tileFrameImportant[544] = true;
			tileLavaDeath[544] = true;
			tileFrameImportant[550] = true;
			tileLavaDeath[550] = true;
			tileFrameImportant[551] = true;
			tileLavaDeath[551] = true;
			tileFrameImportant[533] = true;
			tileLavaDeath[533] = true;
			tileFrameImportant[553] = true;
			tileLavaDeath[553] = true;
			tileFrameImportant[554] = true;
			tileLavaDeath[554] = true;
			tileFrameImportant[555] = true;
			tileLavaDeath[555] = true;
			tileFrameImportant[556] = true;
			tileLavaDeath[556] = true;
			tileFrameImportant[558] = true;
			tileLavaDeath[558] = true;
			tileFrameImportant[559] = true;
			tileLavaDeath[559] = true;
			tileFrameImportant[599] = true;
			tileLavaDeath[599] = true;
			tileFrameImportant[600] = true;
			tileLavaDeath[600] = true;
			tileFrameImportant[601] = true;
			tileLavaDeath[601] = true;
			tileFrameImportant[602] = true;
			tileLavaDeath[602] = true;
			tileFrameImportant[603] = true;
			tileLavaDeath[603] = true;
			tileFrameImportant[604] = true;
			tileLavaDeath[604] = true;
			tileFrameImportant[605] = true;
			tileLavaDeath[605] = true;
			tileFrameImportant[606] = true;
			tileLavaDeath[606] = true;
			tileFrameImportant[607] = true;
			tileLavaDeath[607] = true;
			tileFrameImportant[608] = true;
			tileLavaDeath[608] = true;
			tileFrameImportant[609] = true;
			tileLavaDeath[609] = true;
			tileFrameImportant[610] = true;
			tileLavaDeath[610] = true;
			tileFrameImportant[611] = true;
			tileLavaDeath[611] = true;
			tileFrameImportant[612] = true;
			tileLavaDeath[612] = true;
			tileFrameImportant[568] = true;
			tileNoAttach[568] = true;
			tileLavaDeath[568] = true;
			tileLighted[568] = true;
			tileFrameImportant[569] = true;
			tileNoAttach[569] = true;
			tileLavaDeath[569] = true;
			tileLighted[569] = true;
			tileFrameImportant[570] = true;
			tileNoAttach[570] = true;
			tileLavaDeath[570] = true;
			tileLighted[570] = true;
			tileFrameImportant[580] = true;
			tileNoAttach[580] = true;
			tileLavaDeath[580] = true;
			tileLighted[580] = true;
			tileFrameImportant[582] = true;
			tileLavaDeath[582] = true;
			tileLighted[582] = true;
			tileFrameImportant[619] = true;
			tileLavaDeath[619] = true;
			tileLighted[619] = true;
			tileFrameImportant[620] = true;
			tileNoAttach[620] = true;
			tileLavaDeath[620] = true;
			tileLighted[620] = true;
			tileFrameImportant[572] = true;
			tileNoAttach[572] = true;
			tileLavaDeath[572] = true;
			tileLighted[572] = true;
			tileFrameImportant[560] = true;
			tileLavaDeath[560] = true;
			tileFrameImportant[564] = true;
			tileNoAttach[564] = true;
			tileLavaDeath[564] = true;
			tileLighted[564] = true;
			tileFrameImportant[567] = true;
			tileLavaDeath[567] = true;
			tileFrameImportant[565] = true;
			tileNoAttach[565] = true;
			tileLavaDeath[565] = true;
			tileFrameImportant[593] = true;
			tileNoAttach[593] = true;
			tileLavaDeath[593] = false;
			tileLighted[593] = true;
			tileFrameImportant[594] = true;
			tileNoAttach[594] = true;
			tileLavaDeath[594] = false;
			tileLighted[594] = true;
			tileLighted[548] = true;
			tileLighted[613] = true;
			tileLighted[614] = true;
			tileFrameImportant[518] = true;
			tileCut[518] = true;
			tileNoFail[518] = true;
			tileFrameImportant[519] = true;
			tileCut[519] = true;
			tileNoFail[519] = true;
			tileLighted[519] = true;
			tileFrameImportant[549] = true;
			tileCut[549] = true;
			tileNoFail[549] = true;
			tileFrameImportant[529] = true;
			tileCut[529] = true;
			tileNoFail[529] = true;
			tileLavaDeath[529] = true;
			tileFrameImportant[530] = true;
			tileNoFail[530] = true;
			tileLavaDeath[530] = true;
			tileFrameImportant[233] = true;
			tileFrameImportant[485] = true;
			tileLighted[215] = true;
			tileFrameImportant[227] = true;
			tileFrameImportant[228] = true;
			tileFrameImportant[231] = true;
			tileCut[231] = true;
			tileFrameImportant[216] = true;
			tileFrameImportant[217] = true;
			tileFrameImportant[218] = true;
			tileFrameImportant[219] = true;
			tileFrameImportant[220] = true;
			tileFrameImportant[338] = true;
			tileFrameImportant[453] = true;
			tileFrameImportant[456] = true;
			tileFrameImportant[165] = true;
			tileFrameImportant[209] = true;
			tileFrameImportant[215] = true;
			tileFrameImportant[210] = true;
			tileFrameImportant[212] = true;
			tileFrameImportant[207] = true;
			tileFrameImportant[178] = true;
			tileFrameImportant[184] = true;
			tileFrameImportant[185] = true;
			tileFrameImportant[186] = true;
			tileFrameImportant[187] = true;
			tileFrameImportant[173] = true;
			tileFrameImportant[174] = true;
			tileLighted[173] = true;
			tileLighted[174] = true;
			tileFrameImportant[139] = true;
			tileLighted[160] = true;
			tileLighted[149] = true;
			tileFrameImportant[149] = true;
			tileFrameImportant[142] = true;
			tileFrameImportant[143] = true;
			tileFrameImportant[144] = true;
			tileStone[131] = true;
			tileFrameImportant[136] = true;
			tileFrameImportant[137] = true;
			tileFrameImportant[138] = true;
			tileFrameImportant[484] = true;
			tileLavaDeath[484] = true;
			tileNoFail[484] = true;
			tileBlockLight[137] = true;
			tileSolid[137] = true;
			tileBlockLight[160] = true;
			tileSolid[160] = true;
			tileMergeDirt[160] = true;
			tileBlockLight[161] = true;
			tileSolid[161] = true;
			tileBlockLight[145] = true;
			tileSolid[145] = true;
			tileMergeDirt[145] = true;
			tileBlockLight[146] = true;
			tileSolid[146] = true;
			tileMergeDirt[146] = true;
			tileBlockLight[147] = true;
			tileSolid[147] = true;
			tileBlockLight[148] = true;
			tileSolid[148] = true;
			tileMergeDirt[148] = true;
			tileSolid[138] = true;
			tileSolid[484] = true;
			tileCut[484] = true;
			tileBlockLight[140] = true;
			tileSolid[140] = true;
			tileBlockLight[151] = true;
			tileSolid[151] = true;
			tileMergeDirt[151] = true;
			tileBlockLight[152] = true;
			tileSolid[152] = true;
			tileMergeDirt[152] = true;
			tileBlockLight[153] = true;
			tileSolid[153] = true;
			tileMergeDirt[153] = true;
			tileBlockLight[154] = true;
			tileSolid[154] = true;
			tileMergeDirt[154] = true;
			tileBlockLight[155] = true;
			tileSolid[155] = true;
			tileMergeDirt[155] = true;
			tileBlockLight[156] = true;
			tileSolid[156] = true;
			tileMergeDirt[156] = true;
			tileMergeDirt[150] = true;
			tileBlockLight[157] = true;
			tileSolid[157] = true;
			tileMergeDirt[157] = true;
			tileBlockLight[158] = true;
			tileSolid[158] = true;
			tileMergeDirt[158] = true;
			tileBlockLight[159] = true;
			tileSolid[159] = true;
			tileMergeDirt[159] = true;
			tileFrameImportant[320] = true;
			tileFrameImportant[49] = true;
			tileShine[22] = 1150;
			tileShine[6] = 1150;
			tileShine[7] = 1100;
			tileShine[8] = 1000;
			tileShine[9] = 1050;
			tileShine[166] = 1125;
			tileShine[167] = 1075;
			tileShine[168] = 1025;
			tileShine[169] = 975;
			tileShine[617] = 400;
			tileShine[178] = 500;
			tileShine2[178] = true;
			tileShine[12] = 300;
			tileShine[21] = 1200;
			tileShine[467] = 1200;
			tileShine[441] = 1200;
			tileShine[468] = 1200;
			tileShine[63] = 900;
			tileShine[64] = 900;
			tileShine[65] = 900;
			tileShine[66] = 900;
			tileShine[67] = 900;
			tileShine[68] = 900;
			tileShine[566] = 900;
			tileShine[45] = 1900;
			tileShine[46] = 2000;
			tileShine[47] = 2100;
			tileShine[122] = 1800;
			tileShine[121] = 1850;
			tileShine[125] = 600;
			tileShine[109] = 9000;
			tileShine[110] = 9000;
			tileShine[116] = 9000;
			tileShine[117] = 9000;
			tileShine[118] = 8000;
			tileShine[107] = 950;
			tileShine[108] = 900;
			tileShine[111] = 850;
			tileShine[211] = 500;
			tileLighted[4] = true;
			tileLighted[17] = true;
			tileLighted[133] = true;
			tileLighted[31] = true;
			tileLighted[33] = true;
			tileLighted[34] = true;
			tileLighted[35] = true;
			tileLighted[37] = true;
			tileLighted[42] = true;
			tileLighted[49] = true;
			tileLighted[58] = true;
			tileLighted[61] = true;
			tileLighted[70] = true;
			tileLighted[71] = true;
			tileLighted[72] = true;
			tileLighted[76] = true;
			tileLighted[77] = true;
			tileLighted[19] = true;
			tileLighted[22] = true;
			tileLighted[26] = true;
			tileLighted[83] = true;
			tileLighted[84] = true;
			tileLighted[92] = true;
			tileLighted[93] = true;
			tileLighted[95] = true;
			tileLighted[98] = true;
			tileLighted[100] = true;
			tileLighted[109] = true;
			tileLighted[125] = true;
			tileLighted[126] = true;
			tileLighted[129] = true;
			tileLighted[140] = true;
			tileLighted[270] = true;
			tileLighted[271] = true;
			tileLighted[581] = true;
			tileLighted[578] = true;
			tileMergeDirt[1] = true;
			tileMergeDirt[6] = true;
			tileMergeDirt[7] = true;
			tileMergeDirt[8] = true;
			tileMergeDirt[9] = true;
			tileMergeDirt[166] = true;
			tileMergeDirt[167] = true;
			tileMergeDirt[168] = true;
			tileMergeDirt[169] = true;
			tileMergeDirt[22] = true;
			tileMergeDirt[25] = true;
			tileMergeDirt[30] = true;
			tileMergeDirt[37] = true;
			tileMergeDirt[38] = true;
			tileMergeDirt[40] = true;
			tileMergeDirt[53] = true;
			tileMergeDirt[56] = true;
			tileMergeDirt[107] = true;
			tileMergeDirt[108] = true;
			tileMergeDirt[111] = true;
			tileMergeDirt[112] = true;
			tileMergeDirt[116] = true;
			tileMergeDirt[117] = true;
			tileMergeDirt[123] = true;
			tileMergeDirt[140] = true;
			tileMergeDirt[39] = true;
			tileMergeDirt[122] = true;
			tileMergeDirt[121] = true;
			tileMergeDirt[120] = true;
			tileMergeDirt[119] = true;
			tileMergeDirt[118] = true;
			tileMergeDirt[47] = true;
			tileMergeDirt[46] = true;
			tileMergeDirt[45] = true;
			tileMergeDirt[41] = true;
			tileMergeDirt[43] = true;
			tileMergeDirt[44] = true;
			tileMergeDirt[481] = true;
			tileMergeDirt[482] = true;
			tileMergeDirt[483] = true;
			tileFrameImportant[380] = true;
			tileFrameImportant[201] = true;
			tileFrameImportant[3] = true;
			tileFrameImportant[4] = true;
			tileFrameImportant[5] = true;
			tileFrameImportant[10] = true;
			tileFrameImportant[11] = true;
			tileFrameImportant[12] = true;
			tileFrameImportant[13] = true;
			tileFrameImportant[14] = true;
			tileFrameImportant[469] = true;
			tileFrameImportant[486] = true;
			tileFrameImportant[488] = true;
			tileFrameImportant[487] = true;
			tileFrameImportant[489] = true;
			tileFrameImportant[490] = true;
			tileFrameImportant[15] = true;
			tileFrameImportant[497] = true;
			tileFrameImportant[16] = true;
			tileFrameImportant[17] = true;
			tileFrameImportant[18] = true;
			tileFrameImportant[19] = true;
			tileFrameImportant[20] = true;
			tileFrameImportant[21] = true;
			tileFrameImportant[467] = true;
			tileFrameImportant[441] = true;
			tileFrameImportant[468] = true;
			tileFrameImportant[24] = true;
			tileFrameImportant[26] = true;
			tileFrameImportant[27] = true;
			tileFrameImportant[28] = true;
			tileFrameImportant[29] = true;
			tileFrameImportant[31] = true;
			tileFrameImportant[33] = true;
			tileFrameImportant[34] = true;
			tileFrameImportant[35] = true;
			tileFrameImportant[42] = true;
			tileFrameImportant[50] = true;
			tileFrameImportant[55] = true;
			tileFrameImportant[61] = true;
			tileFrameImportant[71] = true;
			tileFrameImportant[72] = true;
			tileFrameImportant[73] = true;
			tileFrameImportant[74] = true;
			tileFrameImportant[77] = true;
			tileFrameImportant[78] = true;
			tileFrameImportant[79] = true;
			tileFrameImportant[81] = true;
			tileFrameImportant[82] = true;
			tileFrameImportant[83] = true;
			tileFrameImportant[84] = true;
			tileFrameImportant[85] = true;
			tileFrameImportant[86] = true;
			tileFrameImportant[87] = true;
			tileFrameImportant[88] = true;
			tileFrameImportant[89] = true;
			tileFrameImportant[90] = true;
			tileFrameImportant[91] = true;
			tileFrameImportant[92] = true;
			tileFrameImportant[93] = true;
			tileFrameImportant[94] = true;
			tileFrameImportant[95] = true;
			tileFrameImportant[96] = true;
			tileFrameImportant[97] = true;
			tileFrameImportant[98] = true;
			tileFrameImportant[99] = true;
			tileFrameImportant[101] = true;
			tileFrameImportant[102] = true;
			tileFrameImportant[103] = true;
			tileFrameImportant[104] = true;
			tileFrameImportant[105] = true;
			tileFrameImportant[100] = true;
			tileFrameImportant[106] = true;
			tileFrameImportant[110] = true;
			tileFrameImportant[113] = true;
			tileFrameImportant[114] = true;
			tileFrameImportant[125] = true;
			tileFrameImportant[287] = true;
			tileFrameImportant[126] = true;
			tileFrameImportant[128] = true;
			tileFrameImportant[129] = true;
			tileFrameImportant[132] = true;
			tileFrameImportant[133] = true;
			tileFrameImportant[134] = true;
			tileFrameImportant[135] = true;
			tileFrameImportant[172] = true;
			tileFrameImportant[319] = true;
			tileFrameImportant[323] = true;
			tileFrameImportant[335] = true;
			tileFrameImportant[337] = true;
			tileFrameImportant[349] = true;
			tileFrameImportant[376] = true;
			tileFrameImportant[378] = true;
			tileFrameImportant[425] = true;
			tileFrameImportant[465] = true;
			tileFrameImportant[506] = true;
			tileFrameImportant[510] = true;
			tileFrameImportant[511] = true;
			tileFrameImportant[531] = true;
			tileFrameImportant[545] = true;
			tileFrameImportant[547] = true;
			tileFrameImportant[548] = true;
			tileFrameImportant[552] = true;
			tileFrameImportant[573] = true;
			tileFrameImportant[613] = true;
			tileFrameImportant[614] = true;
			tileFrameImportant[621] = true;
			tileFrameImportant[622] = true;
			tileFrameImportant[141] = true;
			tileFrameImportant[270] = true;
			tileFrameImportant[271] = true;
			tileFrameImportant[581] = true;
			tileFrameImportant[314] = true;
			tileSolidTop[376] = true;
			tileTable[376] = true;
			tileTable[380] = true;
			tileFrameImportant[583] = true;
			tileFrameImportant[584] = true;
			tileFrameImportant[585] = true;
			tileFrameImportant[586] = true;
			tileFrameImportant[587] = true;
			tileFrameImportant[588] = true;
			tileFrameImportant[589] = true;
			tileFrameImportant[590] = true;
			tileNoAttach[590] = true;
			tileFrameImportant[595] = true;
			tileNoAttach[595] = true;
			tileFrameImportant[596] = true;
			tileFrameImportant[615] = true;
			tileNoAttach[615] = true;
			tileFrameImportant[616] = true;
			tileCut[201] = true;
			tileCut[3] = true;
			tileCut[24] = true;
			tileCut[28] = true;
			tileCut[32] = true;
			tileCut[51] = true;
			tileCut[52] = true;
			tileCut[61] = true;
			tileCut[62] = true;
			tileCut[69] = true;
			tileCut[71] = true;
			tileCut[73] = true;
			tileCut[74] = true;
			tileCut[82] = true;
			tileCut[83] = true;
			tileCut[84] = true;
			tileCut[110] = true;
			tileCut[113] = true;
			tileCut[115] = true;
			tileCut[184] = true;
			tileCut[205] = true;
			tileCut[352] = true;
			tileCut[382] = true;
			tileCut[528] = true;
			tileLighted[528] = true;
			tileCut[444] = true;
			tileCut[485] = true;
			tileAlch[82] = true;
			tileAlch[83] = true;
			tileAlch[84] = true;
			tileSolid[127] = true;
			tileSolid[130] = true;
			tileBlockLight[130] = true;
			tileBlockLight[131] = true;
			tileNoAttach[232] = true;
			tileSolid[107] = true;
			tileBlockLight[107] = true;
			tileSolid[108] = true;
			tileBlockLight[108] = true;
			tileSolid[111] = true;
			tileBlockLight[111] = true;
			tileSolid[109] = true;
			tileBlockLight[109] = true;
			tileSolid[110] = false;
			tileNoAttach[110] = true;
			tileNoFail[110] = true;
			tileSolid[112] = true;
			tileBlockLight[112] = true;
			tileSolid[116] = true;
			tileBlockLight[116] = true;
			tileBrick[117] = true;
			tileBrick[25] = true;
			tileBrick[203] = true;
			tileSolid[117] = true;
			tileBlockLight[117] = true;
			tileSolid[123] = true;
			tileBlockLight[123] = true;
			tileNoFail[165] = true;
			tileNoFail[184] = true;
			tileNoFail[185] = true;
			tileNoFail[186] = true;
			tileNoFail[187] = true;
			tileSolid[118] = true;
			tileBlockLight[118] = true;
			tileSolid[119] = true;
			tileBlockLight[119] = true;
			tileSolid[120] = true;
			tileBlockLight[120] = true;
			tileSolid[121] = true;
			tileBlockLight[121] = true;
			tileSolid[122] = true;
			tileBlockLight[122] = true;
			tileSolid[150] = true;
			tileBlockLight[150] = true;
			tileBlockLight[115] = true;
			tileSolid[199] = true;
			tileBlockLight[199] = true;
			tileNoFail[162] = true;
			tileSolid[0] = true;
			tileBlockLight[0] = true;
			tileSolid[1] = true;
			tileBlockLight[1] = true;
			tileSolid[2] = true;
			tileBlockLight[2] = true;
			tileSolid[3] = false;
			tileNoAttach[3] = true;
			tileNoFail[3] = true;
			tileNoFail[201] = true;
			tileSolid[4] = false;
			tileNoAttach[4] = true;
			tileNoFail[4] = true;
			tileNoFail[24] = true;
			tileSolid[5] = false;
			tileSolid[6] = true;
			tileBlockLight[6] = true;
			tileSolid[7] = true;
			tileBlockLight[7] = true;
			tileSolid[8] = true;
			tileBlockLight[8] = true;
			tileSolid[9] = true;
			tileBlockLight[9] = true;
			tileSolid[166] = true;
			tileBlockLight[166] = true;
			tileSolid[167] = true;
			tileBlockLight[167] = true;
			tileSolid[168] = true;
			tileBlockLight[168] = true;
			tileSolid[169] = true;
			tileBlockLight[169] = true;
			tileBlockLight[10] = true;
			tileSolid[10] = true;
			tileNoAttach[10] = true;
			tileBlockLight[10] = true;
			tileSolid[11] = false;
			tileSolidTop[19] = true;
			tileSolid[19] = true;
			tileSolid[22] = true;
			tileSolid[23] = true;
			tileSolid[25] = true;
			tileSolid[30] = true;
			tileNoFail[32] = true;
			tileBlockLight[32] = true;
			tileNoFail[352] = true;
			tileBlockLight[352] = true;
			tileSolid[37] = true;
			tileBlockLight[37] = true;
			tileSolid[38] = true;
			tileBlockLight[38] = true;
			tileSolid[39] = true;
			tileBlockLight[39] = true;
			tileSolid[40] = true;
			tileBlockLight[40] = true;
			tileSolid[41] = true;
			tileBlockLight[41] = true;
			tileSolid[43] = true;
			tileBlockLight[43] = true;
			tileSolid[44] = true;
			tileBlockLight[44] = true;
			tileSolid[481] = true;
			tileBlockLight[481] = true;
			tileSolid[482] = true;
			tileBlockLight[482] = true;
			tileSolid[483] = true;
			tileBlockLight[483] = true;
			tileSolid[45] = true;
			tileBlockLight[45] = true;
			tileSolid[46] = true;
			tileBlockLight[46] = true;
			tileSolid[47] = true;
			tileBlockLight[47] = true;
			tileSolid[48] = true;
			tileSolid[53] = true;
			tileBlockLight[53] = true;
			tileSolid[54] = true;
			tileBlockLight[52] = true;
			tileBlockLight[205] = true;
			tileSolid[56] = true;
			tileBlockLight[56] = true;
			tileSolid[57] = true;
			tileBlockLight[57] = true;
			tileSolid[58] = true;
			tileBlockLight[58] = true;
			tileBlockLight[382] = true;
			tileSolid[59] = true;
			tileBlockLight[59] = true;
			tileSolid[60] = true;
			tileBlockLight[60] = true;
			tileSolid[63] = true;
			tileBlockLight[63] = true;
			tileStone[63] = true;
			tileStone[130] = true;
			tileSolid[64] = true;
			tileBlockLight[64] = true;
			tileStone[64] = true;
			tileSolid[65] = true;
			tileBlockLight[65] = true;
			tileStone[65] = true;
			tileSolid[66] = true;
			tileBlockLight[66] = true;
			tileStone[66] = true;
			tileSolid[67] = true;
			tileBlockLight[67] = true;
			tileStone[67] = true;
			tileSolid[68] = true;
			tileBlockLight[68] = true;
			tileStone[68] = true;
			tileSolid[566] = true;
			tileBlockLight[566] = true;
			tileStone[566] = true;
			tileSolid[75] = true;
			tileBlockLight[75] = true;
			tileSolid[76] = true;
			tileBlockLight[76] = true;
			tileSolid[70] = true;
			tileBlockLight[70] = true;
			tileNoFail[50] = true;
			tileNoAttach[50] = true;
			tileDungeon[41] = true;
			tileDungeon[43] = true;
			tileDungeon[44] = true;
			tileBlockLight[30] = true;
			tileBlockLight[25] = true;
			tileBlockLight[23] = true;
			tileBlockLight[22] = true;
			tileBlockLight[62] = true;
			tileSolidTop[18] = true;
			tileSolidTop[14] = true;
			tileSolidTop[469] = true;
			tileSolidTop[16] = true;
			tileSolidTop[134] = true;
			tileSolidTop[114] = true;
			tileNoAttach[20] = true;
			tileNoAttach[19] = true;
			tileNoAttach[13] = true;
			tileNoAttach[14] = true;
			tileNoAttach[469] = true;
			tileNoAttach[486] = true;
			tileNoAttach[488] = true;
			tileNoAttach[487] = true;
			tileNoAttach[489] = true;
			tileNoAttach[490] = true;
			tileNoAttach[15] = true;
			tileNoAttach[497] = true;
			tileNoAttach[16] = true;
			tileNoAttach[134] = true;
			tileNoAttach[17] = true;
			tileNoAttach[18] = true;
			tileNoAttach[21] = true;
			tileNoAttach[467] = true;
			tileNoAttach[441] = true;
			tileNoAttach[468] = true;
			tileNoAttach[27] = true;
			tileNoAttach[114] = true;
			tileTable[14] = true;
			tileTable[469] = true;
			tileTable[18] = true;
			tileTable[19] = true;
			tileTable[114] = true;
			tileNoAttach[86] = true;
			tileNoAttach[87] = true;
			tileNoAttach[88] = true;
			tileNoAttach[89] = true;
			tileNoAttach[90] = true;
			tileTable[101] = true;
			tileNoAttach[101] = true;
			tileNoAttach[102] = true;
			tileNoAttach[94] = true;
			tileNoAttach[95] = true;
			tileNoAttach[96] = true;
			tileNoAttach[97] = true;
			tileNoAttach[98] = true;
			tileNoAttach[99] = true;
			tileTable[87] = true;
			tileTable[88] = true;
			tileSolidTop[87] = true;
			tileSolidTop[88] = true;
			tileSolidTop[101] = true;
			tileNoAttach[91] = true;
			tileNoAttach[92] = true;
			tileNoAttach[93] = true;
			tileLighted[190] = true;
			tileBlockLight[192] = true;
			tileWaterDeath[215] = true;
			tileWaterDeath[4] = true;
			tileWaterDeath[51] = true;
			tileWaterDeath[93] = true;
			tileWaterDeath[98] = true;
			tileWaterDeath[552] = true;
			tileLavaDeath[3] = true;
			tileLavaDeath[5] = true;
			tileLavaDeath[10] = true;
			tileLavaDeath[11] = true;
			tileLavaDeath[12] = true;
			tileLavaDeath[13] = true;
			tileLavaDeath[14] = true;
			tileLavaDeath[469] = true;
			tileLavaDeath[486] = true;
			tileLavaDeath[488] = true;
			tileLavaDeath[487] = true;
			tileLavaDeath[489] = true;
			tileLavaDeath[490] = true;
			tileLavaDeath[15] = true;
			tileLavaDeath[497] = true;
			tileLavaDeath[16] = true;
			tileLavaDeath[17] = true;
			tileLavaDeath[18] = true;
			tileLavaDeath[19] = true;
			tileLavaDeath[20] = true;
			tileLavaDeath[24] = true;
			tileLavaDeath[27] = true;
			tileLavaDeath[28] = true;
			tileLavaDeath[29] = true;
			tileLavaDeath[32] = true;
			tileLavaDeath[33] = true;
			tileLavaDeath[34] = true;
			tileLavaDeath[35] = true;
			tileLavaDeath[36] = true;
			tileLavaDeath[42] = true;
			tileLavaDeath[49] = true;
			tileLavaDeath[50] = true;
			tileLavaDeath[51] = true;
			tileLavaDeath[52] = true;
			tileLavaDeath[55] = true;
			tileLavaDeath[61] = true;
			tileLavaDeath[62] = true;
			tileLavaDeath[69] = true;
			tileLavaDeath[71] = true;
			tileLavaDeath[72] = true;
			tileLavaDeath[73] = true;
			tileLavaDeath[74] = true;
			tileLavaDeath[79] = true;
			tileLavaDeath[80] = true;
			tileLavaDeath[81] = true;
			tileLavaDeath[86] = true;
			tileLavaDeath[87] = true;
			tileLavaDeath[88] = true;
			tileLavaDeath[89] = true;
			tileLavaDeath[90] = true;
			tileLavaDeath[91] = true;
			tileLavaDeath[92] = true;
			tileLavaDeath[93] = true;
			tileLavaDeath[94] = true;
			tileLavaDeath[95] = true;
			tileLavaDeath[96] = true;
			tileLavaDeath[97] = true;
			tileLavaDeath[98] = true;
			tileLavaDeath[100] = true;
			tileLavaDeath[101] = true;
			tileLavaDeath[102] = true;
			tileLavaDeath[103] = true;
			tileLavaDeath[104] = true;
			tileLavaDeath[106] = true;
			tileLavaDeath[110] = true;
			tileLavaDeath[113] = true;
			tileLavaDeath[115] = true;
			tileLavaDeath[125] = true;
			tileLavaDeath[126] = true;
			tileLavaDeath[128] = true;
			tileLavaDeath[149] = true;
			tileLavaDeath[172] = true;
			tileLavaDeath[173] = true;
			tileLavaDeath[174] = true;
			tileLavaDeath[184] = true;
			tileLavaDeath[201] = true;
			tileLavaDeath[205] = true;
			tileLavaDeath[201] = true;
			tileLavaDeath[209] = true;
			tileLavaDeath[210] = true;
			tileLavaDeath[212] = true;
			tileLavaDeath[213] = true;
			tileLavaDeath[353] = true;
			tileLavaDeath[214] = true;
			tileLavaDeath[215] = true;
			tileLavaDeath[216] = true;
			tileLavaDeath[217] = true;
			tileLavaDeath[218] = true;
			tileLavaDeath[219] = true;
			tileLavaDeath[220] = true;
			tileLavaDeath[227] = true;
			tileLavaDeath[228] = true;
			tileLavaDeath[233] = true;
			tileLavaDeath[236] = true;
			tileLavaDeath[238] = true;
			tileLavaDeath[240] = true;
			tileLavaDeath[241] = true;
			tileLavaDeath[242] = true;
			tileLavaDeath[243] = true;
			tileLavaDeath[244] = true;
			tileLavaDeath[245] = true;
			tileLavaDeath[246] = true;
			tileLavaDeath[247] = true;
			tileLavaDeath[254] = true;
			tileLavaDeath[269] = true;
			tileLavaDeath[270] = true;
			tileLavaDeath[271] = true;
			tileLavaDeath[581] = true;
			tileLavaDeath[275] = true;
			tileLavaDeath[413] = true;
			tileLavaDeath[276] = true;
			tileLavaDeath[277] = true;
			tileLavaDeath[278] = true;
			tileLavaDeath[279] = true;
			tileLavaDeath[280] = true;
			tileLavaDeath[281] = true;
			tileLavaDeath[282] = true;
			tileLavaDeath[283] = true;
			tileLavaDeath[285] = true;
			tileLavaDeath[286] = true;
			tileLavaDeath[287] = true;
			tileLavaDeath[288] = true;
			tileLavaDeath[289] = true;
			tileLavaDeath[290] = true;
			tileLavaDeath[291] = true;
			tileLavaDeath[292] = true;
			tileLavaDeath[293] = true;
			tileLavaDeath[294] = true;
			tileLavaDeath[295] = true;
			tileLavaDeath[296] = true;
			tileLavaDeath[297] = true;
			tileLavaDeath[298] = true;
			tileLavaDeath[299] = true;
			tileLavaDeath[300] = true;
			tileLavaDeath[301] = true;
			tileLavaDeath[302] = true;
			tileLavaDeath[303] = true;
			tileLavaDeath[304] = true;
			tileLavaDeath[305] = true;
			tileLavaDeath[306] = true;
			tileLavaDeath[307] = true;
			tileLavaDeath[308] = true;
			tileLavaDeath[309] = true;
			tileLavaDeath[310] = true;
			tileLavaDeath[532] = true;
			tileLavaDeath[316] = true;
			tileLavaDeath[317] = true;
			tileLavaDeath[318] = true;
			tileLavaDeath[319] = true;
			tileLavaDeath[354] = true;
			tileLavaDeath[355] = true;
			tileLavaDeath[499] = true;
			tileLavaDeath[323] = true;
			tileLavaDeath[335] = true;
			tileLavaDeath[338] = true;
			tileLavaDeath[339] = true;
			tileLavaDeath[528] = true;
			tileLavaDeath[352] = true;
			tileLavaDeath[382] = true;
			tileLavaDeath[425] = true;
			tileLavaDeath[453] = true;
			tileLavaDeath[456] = true;
			tileLavaDeath[463] = true;
			tileLavaDeath[464] = true;
			tileLavaDeath[465] = true;
			tileLavaDeath[485] = true;
			tileLavaDeath[511] = true;
			tileLavaDeath[510] = true;
			tileLavaDeath[547] = true;
			tileLavaDeath[548] = true;
			tileLavaDeath[552] = true;
			tileLavaDeath[573] = true;
			tileLavaDeath[621] = true;
			tileLavaDeath[622] = true;
			tileLighted[316] = true;
			tileLighted[317] = true;
			tileLighted[318] = true;
			tileFrameImportant[493] = true;
			tileLavaDeath[493] = true;
			for (int j = 0; j < 623; j++)
			{
				if (tileLavaDeath[j])
				{
					tileObsidianKill[j] = true;
				}
			}
			tileObsidianKill[546] = true;
			tileObsidianKill[77] = true;
			tileObsidianKill[78] = true;
			tileObsidianKill[82] = true;
			tileObsidianKill[83] = true;
			tileObsidianKill[84] = true;
			tileObsidianKill[85] = true;
			tileObsidianKill[105] = true;
			tileObsidianKill[129] = true;
			tileObsidianKill[132] = true;
			tileObsidianKill[133] = true;
			tileObsidianKill[134] = true;
			tileObsidianKill[135] = true;
			tileObsidianKill[136] = true;
			tileObsidianKill[139] = true;
			tileObsidianKill[165] = true;
			tileObsidianKill[178] = true;
			tileObsidianKill[185] = true;
			tileObsidianKill[186] = true;
			tileObsidianKill[187] = true;
			tileObsidianKill[231] = true;
			tileObsidianKill[337] = true;
			tileObsidianKill[349] = true;
			tileObsidianKill[506] = true;
			tileObsidianKill[314] = true;
			tileSolid[384] = true;
			tileBlockLight[384] = true;
			tileNoFail[384] = true;
			tileFrameImportant[395] = true;
			tileLavaDeath[395] = true;
			tileFrameImportant[520] = true;
			tileLavaDeath[520] = true;
			tileLavaDeath[471] = true;
			tileFrameImportant[405] = true;
			tileLavaDeath[405] = true;
			tileSolidTop[405] = true;
			tileTable[405] = true;
			tileLighted[405] = true;
			tileWaterDeath[405] = true;
			tileFrameImportant[406] = true;
			tileLavaDeath[406] = true;
			tileFrameImportant[452] = true;
			tileLavaDeath[452] = true;
			tileFrameImportant[411] = true;
			tileLavaDeath[411] = false;
			tileFrameImportant[457] = true;
			tileLavaDeath[457] = true;
			tileFrameImportant[462] = true;
			tileFrameImportant[454] = true;
			tileLavaDeath[454] = true;
			tileCut[454] = true;
			tileFrameImportant[494] = true;
			tileLavaDeath[494] = true;
			tileFrameImportant[455] = true;
			tileFrameImportant[412] = true;
			for (int k = 0; k < 316; k++)
			{
				switch (k)
				{
				case 20:
					wallBlend[k] = 14;
					break;
				case 19:
					wallBlend[k] = 9;
					break;
				case 18:
					wallBlend[k] = 8;
					break;
				case 17:
					wallBlend[k] = 7;
					break;
				case 16:
				case 59:
				case 261:
					wallBlend[k] = 2;
					break;
				case 1:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
					wallBlend[k] = 1;
					break;
				default:
					wallBlend[k] = k;
					break;
				}
			}
			wallBlend[65] = 63;
			wallBlend[66] = 63;
			wallBlend[68] = 63;
			wallBlend[67] = 64;
			wallBlend[80] = 74;
			wallBlend[81] = 77;
			wallBlend[94] = 7;
			wallBlend[95] = 7;
			wallBlend[100] = 7;
			wallBlend[101] = 7;
			wallBlend[96] = 8;
			wallBlend[97] = 8;
			wallBlend[102] = 8;
			wallBlend[103] = 8;
			wallBlend[98] = 9;
			wallBlend[99] = 9;
			wallBlend[104] = 9;
			wallBlend[105] = 9;
			tileNoFail[24] = true;
			tileNoFail[3] = true;
			tileNoFail[52] = true;
			tileNoFail[62] = true;
			tileNoFail[32] = true;
			tileNoFail[61] = true;
			tileNoFail[69] = true;
			tileNoFail[73] = true;
			tileNoFail[74] = true;
			tileNoFail[82] = true;
			tileNoFail[83] = true;
			tileNoFail[84] = true;
			tileNoFail[110] = true;
			tileNoFail[113] = true;
			tileNoFail[115] = true;
			tileNoFail[165] = true;
			tileNoFail[184] = true;
			tileNoFail[201] = true;
			tileNoFail[205] = true;
			tileNoFail[227] = true;
			tileNoFail[233] = true;
			tileNoFail[352] = true;
			tileNoFail[382] = true;
			tileNoFail[528] = true;
			tileNoFail[485] = true;
			tileFrameImportant[387] = true;
			tileSolid[387] = true;
			tileBlockLight[387] = true;
			tileNoAttach[387] = true;
			tileLavaDeath[387] = true;
			tileFrameImportant[386] = true;
			tileLavaDeath[386] = true;
			tileNoSunLight[386] = true;
			tileFrameImportant[388] = true;
			tileSolid[388] = true;
			tileBlockLight[388] = true;
			tileNoAttach[388] = true;
			tileLavaDeath[388] = true;
			tileFrameImportant[389] = true;
			tileLavaDeath[389] = true;
			tileNoSunLight[389] = true;
			for (int l = 0; l < 623; l++)
			{
				if (tileSolid[l])
				{
					tileNoSunLight[l] = true;
				}
				tileFrame[l] = 0;
				tileFrameCounter[l] = 0;
			}
			tileNoSunLight[546] = false;
			tileNoSunLight[379] = false;
			tileNoSunLight[54] = false;
			tileNoSunLight[328] = false;
			tileNoSunLight[459] = false;
			tileNoSunLight[19] = false;
			tileNoSunLight[11] = true;
			tileNoSunLight[189] = false;
			tileNoSunLight[196] = false;
			tileNoSunLight[48] = false;
			tileNoSunLight[232] = false;
			tileNoSunLight[460] = false;
			tileNoSunLight[541] = false;
			tileNoSunLight[388] = false;
		}

		private static void Initialize_TileAndNPCData1()
		{
			for (int i = 0; i < 623; i++)
			{
				tileGlowMask[i] = -1;
			}
			for (int j = 0; j < 950; j++)
			{
				projFrames[j] = 1;
			}
			projFrames[736] = 3;
			projFrames[737] = 3;
			projFrames[738] = 3;
			projFrames[779] = 4;
			projFrames[783] = 4;
			projFrames[862] = 4;
			projFrames[863] = 4;
			projFrames[820] = 4;
			projFrames[916] = 6;
			projFrames[34] = 6;
			projFrames[706] = 8;
			projFrames[712] = 8;
			projFrames[663] = 7;
			projFrames[665] = 9;
			projFrames[667] = 9;
			projFrames[677] = 6;
			projFrames[678] = 6;
			projFrames[679] = 6;
			projFrames[688] = 6;
			projFrames[689] = 6;
			projFrames[690] = 8;
			projFrames[691] = 4;
			projFrames[692] = 4;
			projFrames[693] = 4;
			projFrames[694] = 4;
			projFrames[695] = 4;
			projFrames[696] = 5;
			projFrames[700] = 4;
			projFrames[643] = 8;
			projFrames[566] = 4;
			projFrames[565] = 4;
			projFrames[525] = 5;
			projFrames[519] = 4;
			projFrames[509] = 2;
			projFrames[485] = 5;
			projFrames[492] = 8;
			projFrames[500] = 4;
			projFrames[499] = 12;
			projFrames[518] = 4;
			projFrames[585] = 4;
			projFrames[593] = 4;
			projFrames[595] = 28;
			projFrames[735] = 28;
			projFrames[596] = 4;
			projFrames[612] = 5;
			projFrames[613] = 4;
			projFrames[614] = 4;
			projFrames[615] = 7;
			projFrames[623] = 19;
			projFrames[633] = 5;
			projFrames[645] = 7;
			projFrames[650] = 4;
			projFrames[652] = 6;
			projFrames[659] = 4;
			projFrames[714] = 7;
			projFrames[734] = 8;
			projFrames[755] = 5;
			projFrames[759] = 5;
			projFrames[765] = 10;
			projFrames[384] = 6;
			projFrames[385] = 3;
			projFrames[386] = 6;
			projFrames[390] = 11;
			projFrames[391] = 11;
			projFrames[392] = 11;
			projFrames[393] = 15;
			projFrames[394] = 15;
			projFrames[395] = 15;
			projFrames[398] = 10;
			projFrames[407] = 6;
			projFrames[408] = 2;
			projFrames[409] = 3;
			projFrames[387] = 3;
			projFrames[388] = 3;
			projFrames[334] = 11;
			projFrames[324] = 10;
			projFrames[351] = 2;
			projFrames[349] = 5;
			projFrames[423] = 4;
			projFrames[435] = 4;
			projFrames[682] = 4;
			projFrames[436] = 4;
			projFrames[439] = 6;
			projFrames[443] = 4;
			projFrames[447] = 4;
			projFrames[448] = 3;
			projFrames[450] = 5;
			projFrames[454] = 2;
			projFrames[456] = 4;
			projFrames[459] = 3;
			projFrames[462] = 5;
			projFrames[465] = 4;
			projFrames[467] = 4;
			projFrames[468] = 4;
			projFrames[533] = 21;
			projFrames[535] = 12;
			projFrames[539] = 4;
			projFrames[575] = 4;
			projFrames[574] = 2;
			projFrames[634] = 4;
			projFrames[635] = 4;
			projFrames[709] = 3;
			projFrames[353] = 14;
			projFrames[346] = 2;
			projFrames[347] = 2;
			projFrames[335] = 4;
			projFrames[344] = 3;
			projFrames[337] = 5;
			projFrames[317] = 8;
			projFrames[321] = 3;
			projFrames[308] = 10;
			projFrames[316] = 4;
			projFrames[275] = 2;
			projFrames[276] = 2;
			projFrames[254] = 5;
			projFrames[307] = 2;
			projFrames[72] = 4;
			projFrames[86] = 4;
			projFrames[87] = 4;
			projFrames[102] = 2;
			projFrames[111] = 8;
			projFrames[112] = 3;
			projFrames[127] = 16;
			projFrames[175] = 2;
			projFrames[181] = 4;
			projFrames[189] = 4;
			projFrames[191] = 18;
			projFrames[192] = 18;
			projFrames[193] = 18;
			projFrames[194] = 18;
			projFrames[190] = 4;
			projFrames[198] = 4;
			projFrames[199] = 8;
			projFrames[200] = 10;
			projFrames[206] = 5;
			projFrames[208] = 5;
			projFrames[209] = 12;
			projFrames[210] = 12;
			projFrames[211] = 10;
			projFrames[221] = 3;
			projFrames[237] = 4;
			projFrames[238] = 6;
			projFrames[221] = 3;
			projFrames[228] = 5;
			projFrames[229] = 4;
			projFrames[236] = 13;
			projFrames[243] = 4;
			projFrames[244] = 6;
			projFrames[249] = 5;
			projFrames[252] = 4;
			projFrames[266] = 6;
			projFrames[268] = 8;
			projFrames[269] = 7;
			projFrames[270] = 3;
			projFrames[313] = 12;
			projFrames[314] = 13;
			projFrames[319] = 11;
			projFrames[373] = 3;
			projFrames[375] = 8;
			projFrames[377] = 9;
			projFrames[379] = 4;
			projFrames[380] = 4;
			projFrames[601] = 2;
			projFrames[602] = 4;
			projFrames[703] = 8;
			projFrames[701] = 3;
			projFrames[702] = 4;
			projFrames[732] = 4;
			projFrames[731] = 4;
			projFrames[758] = 24;
			projFrames[766] = 4;
			projFrames[767] = 4;
			projFrames[768] = 4;
			projFrames[769] = 4;
			projFrames[770] = 4;
			projFrames[774] = 8;
			projFrames[773] = 4;
			projFrames[815] = 10;
			projFrames[816] = 17;
			projFrames[817] = 18;
			projFrames[821] = 23;
			projFrames[824] = 4;
			projFrames[825] = 26;
			projFrames[826] = 3;
			projFrames[828] = 2;
			projFrames[829] = 2;
			projFrames[831] = 6;
			projFrames[833] = 10;
			projFrames[834] = 12;
			projFrames[835] = 12;
			projFrames[836] = 4;
			projFrames[837] = 3;
			projFrames[839] = 4;
			projFrames[840] = 4;
			projFrames[851] = 4;
			projFrames[853] = 4;
			projFrames[854] = 19;
			projFrames[855] = 4;
			projFrames[858] = 14;
			projFrames[859] = 24;
			projFrames[860] = 14;
			projFrames[861] = 4;
			projFrames[864] = 2;
			projFrames[866] = 4;
			projFrames[870] = 4;
			projFrames[875] = 11;
			projFrames[881] = 12;
			projFrames[882] = 20;
			projFrames[883] = 3;
			projFrames[884] = 14;
			projFrames[885] = 10;
			projFrames[886] = 8;
			projFrames[887] = 3;
			projFrames[888] = 36;
			projFrames[889] = 11;
			projFrames[890] = 12;
			projFrames[891] = 15;
			projFrames[892] = 6;
			projFrames[893] = 4;
			projFrames[894] = 8;
			projFrames[895] = 6;
			projFrames[896] = 16;
			projFrames[897] = 11;
			projFrames[898] = 16;
			projFrames[899] = 14;
			projFrames[900] = 14;
			projFrames[901] = 12;
			projFrames[908] = 12;
			projFrames[909] = 6;
			projFrames[920] = 3;
			projFrames[934] = 12;
			projFrames[880] = 8;
			projFrames[929] = 8;
			projPet[492] = true;
			projPet[499] = true;
			projPet[653] = true;
			projPet[701] = true;
			projPet[703] = true;
			projPet[702] = true;
			projPet[764] = true;
			projPet[765] = true;
			projPet[319] = true;
			projPet[334] = true;
			projPet[324] = true;
			projPet[266] = true;
			projPet[313] = true;
			projPet[314] = true;
			projPet[317] = true;
			projPet[175] = true;
			projPet[111] = true;
			projPet[112] = true;
			projPet[127] = true;
			projPet[191] = true;
			projPet[192] = true;
			projPet[193] = true;
			projPet[194] = true;
			projPet[197] = true;
			projPet[198] = true;
			projPet[199] = true;
			projPet[200] = true;
			projPet[208] = true;
			projPet[209] = true;
			projPet[210] = true;
			projPet[211] = true;
			projPet[236] = true;
			projPet[268] = true;
			projPet[269] = true;
			projPet[353] = true;
			projPet[373] = true;
			projPet[375] = true;
			projPet[380] = true;
			projPet[387] = true;
			projPet[388] = true;
			projPet[390] = true;
			projPet[391] = true;
			projPet[392] = true;
			projPet[393] = true;
			projPet[394] = true;
			projPet[395] = true;
			projPet[398] = true;
			projPet[407] = true;
			projPet[423] = true;
			projPet[533] = true;
			projPet[613] = true;
			projPet[623] = true;
			projPet[625] = true;
			projPet[626] = true;
			projPet[627] = true;
			projPet[628] = true;
			projPet[755] = true;
			projPet[758] = true;
			projPet[759] = true;
			projPet[774] = true;
			projPet[815] = true;
			projPet[816] = true;
			projPet[817] = true;
			projPet[821] = true;
			projPet[825] = true;
			projPet[831] = true;
			projPet[833] = true;
			projPet[834] = true;
			projPet[835] = true;
			projPet[854] = true;
			projPet[858] = true;
			projPet[859] = true;
			projPet[860] = true;
			projPet[864] = true;
			projPet[875] = true;
			projPet[946] = true;
			projPet[881] = true;
			projPet[882] = true;
			projPet[883] = true;
			projPet[884] = true;
			projPet[885] = true;
			projPet[886] = true;
			projPet[887] = true;
			projPet[888] = true;
			projPet[889] = true;
			projPet[890] = true;
			projPet[891] = true;
			projPet[892] = true;
			projPet[893] = true;
			projPet[894] = true;
			projPet[895] = true;
			projPet[896] = true;
			projPet[897] = true;
			projPet[898] = true;
			projPet[899] = true;
			projPet[900] = true;
			projPet[901] = true;
			projPet[934] = true;
			tileLighted[237] = true;
			tileLighted[27] = true;
			tileLighted[381] = true;
			tileLighted[534] = true;
			tileLighted[536] = true;
			tileLighted[539] = true;
			tileLighted[184] = true;
			tileLighted[463] = true;
			tileLighted[491] = true;
			slimeRainNPC[1] = true;
			debuff[158] = true;
			debuff[160] = true;
			debuff[20] = true;
			debuff[21] = true;
			debuff[22] = true;
			debuff[23] = true;
			debuff[24] = true;
			debuff[25] = true;
			debuff[28] = true;
			debuff[30] = true;
			debuff[31] = true;
			debuff[32] = true;
			debuff[33] = true;
			debuff[34] = true;
			debuff[35] = true;
			debuff[36] = true;
			debuff[37] = true;
			debuff[38] = true;
			debuff[39] = true;
			debuff[44] = true;
			debuff[46] = true;
			debuff[47] = true;
			debuff[67] = true;
			debuff[68] = true;
			debuff[69] = true;
			debuff[70] = true;
			debuff[80] = true;
			debuff[86] = true;
			debuff[87] = true;
			debuff[88] = true;
			debuff[89] = true;
			debuff[94] = true;
			debuff[103] = true;
			debuff[119] = true;
			debuff[120] = true;
			debuff[137] = true;
			debuff[145] = true;
			debuff[146] = true;
			debuff[147] = true;
			debuff[148] = true;
			debuff[149] = true;
			debuff[156] = true;
			debuff[157] = true;
			debuff[163] = true;
			debuff[164] = true;
			debuff[144] = true;
			debuff[194] = true;
			debuff[195] = true;
			debuff[196] = true;
			debuff[197] = true;
			debuff[199] = true;
			debuff[215] = true;
			debuff[320] = true;
			debuff[321] = true;
			pvpBuff[20] = true;
			pvpBuff[24] = true;
			pvpBuff[31] = true;
			pvpBuff[39] = true;
			pvpBuff[44] = true;
			pvpBuff[20] = true;
			pvpBuff[69] = true;
			pvpBuff[103] = true;
			pvpBuff[119] = true;
			pvpBuff[120] = true;
			pvpBuff[137] = true;
			pvpBuff[320] = true;
			meleeBuff[71] = true;
			meleeBuff[73] = true;
			meleeBuff[74] = true;
			meleeBuff[75] = true;
			meleeBuff[76] = true;
			meleeBuff[77] = true;
			meleeBuff[78] = true;
			meleeBuff[79] = true;
			buffNoSave[20] = true;
			buffNoSave[22] = true;
			buffNoSave[23] = true;
			buffNoSave[24] = true;
			buffNoSave[28] = true;
			buffNoSave[30] = true;
			buffNoSave[31] = true;
			buffNoSave[34] = true;
			buffNoSave[35] = true;
			buffNoSave[37] = true;
			buffNoSave[38] = true;
			buffNoSave[39] = true;
			buffNoSave[43] = true;
			buffNoSave[44] = true;
			buffNoSave[46] = true;
			buffNoSave[47] = true;
			buffNoSave[48] = true;
			buffNoSave[58] = true;
			buffNoSave[59] = true;
			buffNoSave[60] = true;
			buffNoSave[62] = true;
			buffNoSave[63] = true;
			buffNoSave[64] = true;
			buffNoSave[67] = true;
			buffNoSave[68] = true;
			buffNoSave[69] = true;
			buffNoSave[70] = true;
			buffNoSave[72] = true;
			buffNoSave[80] = true;
			buffNoSave[87] = true;
			buffNoSave[158] = true;
			buffNoSave[146] = true;
			buffNoSave[147] = true;
			buffNoSave[215] = true;
			buffNoSave[88] = true;
			buffNoSave[89] = true;
			buffNoSave[94] = true;
			buffNoSave[95] = true;
			buffNoSave[96] = true;
			buffNoSave[97] = true;
			buffNoSave[98] = true;
			buffNoSave[99] = true;
			buffNoSave[100] = true;
			buffNoSave[103] = true;
			buffNoSave[118] = true;
			buffNoSave[138] = true;
			buffNoSave[167] = true;
			buffNoSave[166] = true;
			buffNoSave[184] = true;
			buffNoSave[185] = true;
			buffNoSave[211] = true;
			buffNoSave[210] = true;
			buffNoSave[119] = true;
			buffNoSave[120] = true;
			buffNoSave[90] = true;
			buffNoSave[125] = true;
			buffNoSave[126] = true;
			buffNoSave[128] = true;
			buffNoSave[129] = true;
			buffNoSave[130] = true;
			buffNoSave[131] = true;
			buffNoSave[132] = true;
			buffNoSave[133] = true;
			buffNoSave[134] = true;
			buffNoSave[135] = true;
			buffNoSave[139] = true;
			buffNoSave[140] = true;
			buffNoSave[141] = true;
			buffNoSave[142] = true;
			buffNoSave[143] = true;
			buffNoSave[137] = true;
			buffNoSave[144] = true;
			buffNoSave[161] = true;
			buffNoSave[162] = true;
			buffNoSave[163] = true;
			buffNoSave[164] = true;
			buffNoSave[168] = true;
			buffNoSave[170] = true;
			buffNoSave[171] = true;
			buffNoSave[172] = true;
			buffNoSave[182] = true;
			buffNoSave[187] = true;
			buffNoSave[188] = true;
			buffNoSave[193] = true;
			buffNoSave[194] = true;
			buffNoSave[195] = true;
			buffNoSave[196] = true;
			buffNoSave[197] = true;
			buffNoSave[198] = true;
			buffNoSave[199] = true;
			buffNoSave[205] = true;
			buffNoSave[212] = true;
			buffNoSave[213] = true;
			buffNoSave[214] = true;
			buffNoSave[230] = true;
			buffNoSave[263] = true;
			buffNoSave[265] = true;
			buffNoSave[271] = true;
			buffNoSave[322] = true;
			buffNoSave[275] = true;
			buffNoSave[276] = true;
			buffNoSave[277] = true;
			buffNoSave[278] = true;
			buffNoSave[279] = true;
			buffNoSave[280] = true;
			buffNoSave[281] = true;
			buffNoSave[282] = true;
			buffNoSave[283] = true;
			buffNoSave[305] = true;
			buffNoSave[318] = true;
			buffNoSave[320] = true;
			buffNoSave[321] = true;
			for (int k = 173; k <= 181; k++)
			{
				buffNoSave[k] = true;
			}
			buffNoTimeDisplay[19] = true;
			buffNoTimeDisplay[27] = true;
			buffNoTimeDisplay[28] = true;
			buffNoTimeDisplay[34] = true;
			buffNoTimeDisplay[37] = true;
			buffNoTimeDisplay[38] = true;
			buffNoTimeDisplay[40] = true;
			buffNoTimeDisplay[41] = true;
			buffNoTimeDisplay[42] = true;
			buffNoTimeDisplay[43] = true;
			buffNoTimeDisplay[45] = true;
			buffNoTimeDisplay[49] = true;
			buffNoTimeDisplay[60] = true;
			buffNoTimeDisplay[62] = true;
			buffNoTimeDisplay[64] = true;
			buffNoTimeDisplay[68] = true;
			buffNoTimeDisplay[81] = true;
			buffNoTimeDisplay[82] = true;
			buffNoTimeDisplay[83] = true;
			buffNoTimeDisplay[90] = true;
			buffNoTimeDisplay[95] = true;
			buffNoTimeDisplay[96] = true;
			buffNoTimeDisplay[97] = true;
			buffNoTimeDisplay[98] = true;
			buffNoTimeDisplay[99] = true;
			buffNoTimeDisplay[100] = true;
			buffNoTimeDisplay[101] = true;
			buffNoTimeDisplay[102] = true;
			buffNoTimeDisplay[118] = true;
			buffNoTimeDisplay[138] = true;
			buffNoTimeDisplay[167] = true;
			buffNoTimeDisplay[166] = true;
			buffNoTimeDisplay[184] = true;
			buffNoTimeDisplay[185] = true;
			buffNoTimeDisplay[211] = true;
			buffNoTimeDisplay[210] = true;
			buffNoTimeDisplay[125] = true;
			buffNoTimeDisplay[126] = true;
			buffNoTimeDisplay[128] = true;
			buffNoTimeDisplay[129] = true;
			buffNoTimeDisplay[130] = true;
			buffNoTimeDisplay[131] = true;
			buffNoTimeDisplay[132] = true;
			buffNoTimeDisplay[133] = true;
			buffNoTimeDisplay[134] = true;
			buffNoTimeDisplay[135] = true;
			buffNoTimeDisplay[136] = true;
			buffNoTimeDisplay[139] = true;
			buffNoTimeDisplay[140] = true;
			buffNoTimeDisplay[141] = true;
			buffNoTimeDisplay[142] = true;
			buffNoTimeDisplay[143] = true;
			buffNoTimeDisplay[137] = true;
			buffNoTimeDisplay[200] = true;
			buffNoTimeDisplay[202] = true;
			buffNoTimeDisplay[201] = true;
			buffNoTimeDisplay[161] = true;
			buffNoTimeDisplay[162] = true;
			buffNoTimeDisplay[163] = true;
			buffNoTimeDisplay[168] = true;
			buffNoTimeDisplay[170] = true;
			buffNoTimeDisplay[171] = true;
			buffNoTimeDisplay[172] = true;
			buffNoTimeDisplay[182] = true;
			buffNoTimeDisplay[165] = true;
			buffNoTimeDisplay[186] = true;
			buffNoTimeDisplay[187] = true;
			buffNoTimeDisplay[188] = true;
			buffNoTimeDisplay[193] = true;
			buffNoTimeDisplay[199] = true;
			buffNoTimeDisplay[212] = true;
			buffNoTimeDisplay[213] = true;
			buffNoTimeDisplay[214] = true;
			buffNoTimeDisplay[216] = true;
			buffNoTimeDisplay[217] = true;
			buffNoTimeDisplay[219] = true;
			buffNoTimeDisplay[230] = true;
			buffNoTimeDisplay[258] = true;
			buffNoTimeDisplay[259] = true;
			buffNoTimeDisplay[260] = true;
			buffNoTimeDisplay[261] = true;
			buffNoTimeDisplay[262] = true;
			buffNoTimeDisplay[263] = true;
			buffNoTimeDisplay[264] = true;
			buffNoTimeDisplay[265] = true;
			buffNoTimeDisplay[266] = true;
			buffNoTimeDisplay[267] = true;
			buffNoTimeDisplay[268] = true;
			buffNoTimeDisplay[271] = true;
			buffNoTimeDisplay[322] = true;
			buffNoTimeDisplay[274] = true;
			buffNoTimeDisplay[275] = true;
			buffNoTimeDisplay[276] = true;
			buffNoTimeDisplay[277] = true;
			buffNoTimeDisplay[278] = true;
			buffNoTimeDisplay[279] = true;
			buffNoTimeDisplay[280] = true;
			buffNoTimeDisplay[281] = true;
			buffNoTimeDisplay[282] = true;
			buffNoTimeDisplay[283] = true;
			buffNoTimeDisplay[284] = true;
			buffNoTimeDisplay[285] = true;
			buffNoTimeDisplay[286] = true;
			buffNoTimeDisplay[287] = true;
			buffNoTimeDisplay[288] = true;
			buffNoTimeDisplay[289] = true;
			buffNoTimeDisplay[290] = true;
			buffNoTimeDisplay[291] = true;
			buffNoTimeDisplay[292] = true;
			buffNoTimeDisplay[293] = true;
			buffNoTimeDisplay[294] = true;
			buffNoTimeDisplay[295] = true;
			buffNoTimeDisplay[296] = true;
			buffNoTimeDisplay[297] = true;
			buffNoTimeDisplay[298] = true;
			buffNoTimeDisplay[299] = true;
			buffNoTimeDisplay[300] = true;
			buffNoTimeDisplay[301] = true;
			buffNoTimeDisplay[302] = true;
			buffNoTimeDisplay[303] = true;
			buffNoTimeDisplay[304] = true;
			buffNoTimeDisplay[305] = true;
			buffNoTimeDisplay[317] = true;
			buffNoTimeDisplay[318] = true;
			buffNoTimeDisplay[320] = true;
			persistentBuff[71] = true;
			persistentBuff[73] = true;
			persistentBuff[74] = true;
			persistentBuff[75] = true;
			persistentBuff[76] = true;
			persistentBuff[77] = true;
			persistentBuff[78] = true;
			persistentBuff[79] = true;
			for (int l = 0; l < BuffID.Sets.BasicMountData.Length; l++)
			{
				if (BuffID.Sets.BasicMountData[l] != null)
				{
					buffNoTimeDisplay[l] = true;
					buffNoSave[l] = true;
				}
			}
			vanityPet[40] = true;
			vanityPet[41] = true;
			vanityPet[42] = true;
			vanityPet[45] = true;
			vanityPet[50] = true;
			vanityPet[51] = true;
			vanityPet[52] = true;
			vanityPet[53] = true;
			vanityPet[54] = true;
			vanityPet[55] = true;
			vanityPet[56] = true;
			vanityPet[61] = true;
			vanityPet[154] = true;
			vanityPet[65] = true;
			vanityPet[66] = true;
			vanityPet[81] = true;
			vanityPet[82] = true;
			vanityPet[84] = true;
			vanityPet[85] = true;
			vanityPet[91] = true;
			vanityPet[92] = true;
			vanityPet[127] = true;
			vanityPet[136] = true;
			vanityPet[191] = true;
			vanityPet[202] = true;
			vanityPet[200] = true;
			vanityPet[218] = true;
			vanityPet[219] = true;
			vanityPet[217] = true;
			vanityPet[258] = true;
			vanityPet[259] = true;
			vanityPet[260] = true;
			vanityPet[261] = true;
			vanityPet[262] = true;
			vanityPet[264] = true;
			vanityPet[266] = true;
			vanityPet[267] = true;
			vanityPet[268] = true;
			vanityPet[274] = true;
			vanityPet[284] = true;
			vanityPet[285] = true;
			vanityPet[286] = true;
			vanityPet[287] = true;
			vanityPet[288] = true;
			vanityPet[289] = true;
			vanityPet[290] = true;
			vanityPet[291] = true;
			vanityPet[292] = true;
			vanityPet[293] = true;
			vanityPet[295] = true;
			vanityPet[296] = true;
			vanityPet[297] = true;
			vanityPet[300] = true;
			vanityPet[301] = true;
			vanityPet[302] = true;
			vanityPet[303] = true;
			vanityPet[304] = true;
			vanityPet[317] = true;
			lightPet[19] = true;
			lightPet[155] = true;
			lightPet[27] = true;
			lightPet[101] = true;
			lightPet[102] = true;
			lightPet[57] = true;
			lightPet[190] = true;
			lightPet[152] = true;
			lightPet[201] = true;
			lightPet[294] = true;
			lightPet[298] = true;
			lightPet[299] = true;
			tileFlame[4] = true;
			tileFlame[33] = true;
			tileFlame[34] = true;
			tileFlame[35] = true;
			tileFlame[42] = true;
			tileFlame[49] = true;
			tileFlame[93] = true;
			tileFlame[98] = true;
			tileFlame[100] = true;
			tileFlame[173] = true;
			tileFlame[174] = true;
			tileFlame[372] = true;
			tileRope[213] = true;
			tileRope[214] = true;
			tileRope[353] = true;
			tileRope[365] = true;
			tileRope[366] = true;
			tileRope[504] = true;
			tileRope[449] = true;
			tileRope[450] = true;
			tileRope[451] = true;
			tilePile[330] = true;
			tilePile[331] = true;
			tilePile[332] = true;
			tilePile[333] = true;
			for (int m = 0; m < 663; m++)
			{
				npcCatchable[m] = false;
			}
			npcCatchable[46] = true;
			npcCatchable[55] = true;
			npcCatchable[74] = true;
			npcCatchable[148] = true;
			npcCatchable[149] = true;
			npcCatchable[297] = true;
			npcCatchable[298] = true;
			npcCatchable[299] = true;
			npcCatchable[300] = true;
			npcCatchable[355] = true;
			npcCatchable[356] = true;
			npcCatchable[357] = true;
			npcCatchable[358] = true;
			npcCatchable[359] = true;
			npcCatchable[360] = true;
			npcCatchable[361] = true;
			npcCatchable[362] = true;
			npcCatchable[363] = true;
			npcCatchable[364] = true;
			npcCatchable[365] = true;
			npcCatchable[366] = true;
			npcCatchable[367] = true;
			npcCatchable[374] = true;
			npcCatchable[377] = true;
			npcCatchable[539] = true;
			npcCatchable[538] = true;
			npcCatchable[484] = true;
			npcCatchable[485] = true;
			npcCatchable[486] = true;
			npcCatchable[487] = true;
			npcCatchable[583] = true;
			npcCatchable[584] = true;
			npcCatchable[585] = true;
			npcCatchable[592] = true;
			npcCatchable[593] = true;
			npcCatchable[595] = true;
			npcCatchable[596] = true;
			npcCatchable[597] = true;
			npcCatchable[598] = true;
			npcCatchable[599] = true;
			npcCatchable[600] = true;
			npcCatchable[601] = true;
			npcCatchable[604] = true;
			npcCatchable[605] = true;
			npcCatchable[602] = true;
			npcCatchable[603] = true;
			npcCatchable[606] = true;
			npcCatchable[607] = true;
			npcCatchable[608] = true;
			npcCatchable[609] = true;
			npcCatchable[610] = true;
			npcCatchable[611] = true;
			npcCatchable[612] = true;
			npcCatchable[613] = true;
			npcCatchable[614] = true;
			npcCatchable[616] = true;
			npcCatchable[617] = true;
			npcCatchable[626] = true;
			npcCatchable[627] = true;
			npcCatchable[639] = true;
			npcCatchable[640] = true;
			npcCatchable[641] = true;
			npcCatchable[642] = true;
			npcCatchable[643] = true;
			npcCatchable[644] = true;
			npcCatchable[645] = true;
			npcCatchable[646] = true;
			npcCatchable[647] = true;
			npcCatchable[648] = true;
			npcCatchable[649] = true;
			npcCatchable[650] = true;
			npcCatchable[651] = true;
			npcCatchable[652] = true;
			npcCatchable[653] = true;
			npcCatchable[654] = true;
			npcCatchable[655] = true;
			npcCatchable[661] = true;
			for (int n = 442; n <= 448; n++)
			{
				npcCatchable[n] = true;
			}
			SetTileValue();
			tileSpelunker[6] = true;
			tileSpelunker[7] = true;
			tileSpelunker[8] = true;
			tileSpelunker[9] = true;
			tileSpelunker[12] = true;
			tileSpelunker[21] = true;
			tileSpelunker[467] = true;
			tileSpelunker[441] = true;
			tileSpelunker[468] = true;
			tileSpelunker[28] = true;
			tileSpelunker[107] = true;
			tileSpelunker[108] = true;
			tileSpelunker[111] = true;
			tileSpelunker[63] = true;
			tileSpelunker[64] = true;
			tileSpelunker[65] = true;
			tileSpelunker[66] = true;
			tileSpelunker[67] = true;
			tileSpelunker[68] = true;
			tileSpelunker[566] = true;
			tileSpelunker[166] = true;
			tileSpelunker[167] = true;
			tileSpelunker[168] = true;
			tileSpelunker[169] = true;
			tileSpelunker[178] = true;
			tileSpelunker[211] = true;
			tileSpelunker[221] = true;
			tileSpelunker[222] = true;
			tileSpelunker[223] = true;
			tileSpelunker[236] = true;
			tileSpelunker[37] = true;
			tileSpelunker[407] = true;
			tileSpelunker[227] = true;
			tileSpelunker[84] = true;
			tileSpelunker[83] = true;
			tileSpelunker[404] = true;
			SetupTileMerge();
			tileSolid[379] = true;
			tileMergeDirt[249] = true;
			tileBrick[268] = true;
			tileBrick[262] = true;
			tileBrick[267] = true;
			tileBrick[265] = true;
			tileBrick[266] = true;
			tileBrick[264] = true;
			tileBrick[263] = true;
			tileSolid[371] = true;
			tileMergeDirt[371] = true;
			tileBlockLight[371] = true;
			tileBouncy[371] = true;
			tileBouncy[448] = true;
			tileBouncy[446] = true;
			tileBouncy[447] = true;
			tileFrameImportant[377] = true;
			tileFrameImportant[373] = true;
			tileFrameImportant[375] = true;
			tileFrameImportant[374] = true;
			tileFrameImportant[461] = true;
			tileLighted[372] = true;
			tileFrameImportant[372] = true;
			tileWaterDeath[372] = true;
			tileLavaDeath[372] = true;
			tileSolid[357] = true;
			tileBrick[357] = true;
			tileBrick[311] = true;
			tileSolid[408] = true;
			tileMergeDirt[408] = true;
			tileBrick[408] = true;
			tileSolid[409] = true;
			tileBrick[409] = true;
			tileSolid[415] = true;
			tileBrick[415] = true;
			tileLighted[415] = true;
			tileSolid[416] = true;
			tileBrick[416] = true;
			tileLighted[416] = true;
			tileSolid[417] = true;
			tileBrick[417] = true;
			tileLighted[417] = true;
			tileSolid[418] = true;
			tileBrick[418] = true;
			tileLighted[418] = true;
			tileSolid[498] = true;
			tileBrick[498] = true;
			tileBlockLight[498] = true;
			tileBrick[37] = true;
			tileBrick[117] = true;
			tileBrick[25] = true;
			tileBrick[203] = true;
			tileSolid[232] = true;
			tileSolid[311] = true;
			tileSolid[312] = true;
			tileSolid[313] = true;
			tileMergeDirt[311] = true;
			tileSolid[315] = true;
			tileMergeDirt[315] = true;
			tileSolid[321] = true;
			tileSolid[322] = true;
			tileBlockLight[321] = true;
			tileBlockLight[322] = true;
			tileMergeDirt[321] = true;
			tileMergeDirt[322] = true;
			tileBrick[321] = true;
			tileBrick[322] = true;
			tileShine[239] = 1100;
			tileSolid[239] = true;
			tileSolidTop[239] = true;
			tileSolid[380] = true;
			tileSolidTop[380] = true;
			tileFrameImportant[358] = true;
			tileFrameImportant[359] = true;
			tileFrameImportant[360] = true;
			tileFrameImportant[361] = true;
			tileFrameImportant[362] = true;
			tileFrameImportant[363] = true;
			tileFrameImportant[364] = true;
			tileFrameImportant[391] = true;
			tileLighted[391] = true;
			tileFrameImportant[392] = true;
			tileFrameImportant[393] = true;
			tileFrameImportant[394] = true;
			tileFrameImportant[542] = true;
			tileFrameImportant[505] = true;
			tileFrameImportant[521] = true;
			tileFrameImportant[522] = true;
			tileFrameImportant[523] = true;
			tileFrameImportant[524] = true;
			tileFrameImportant[525] = true;
			tileFrameImportant[526] = true;
			tileFrameImportant[527] = true;
			tileFrameImportant[543] = true;
			tileFrameImportant[568] = true;
			tileFrameImportant[569] = true;
			tileFrameImportant[570] = true;
			tileFrameImportant[598] = true;
			tileFrameImportant[356] = true;
			tileFrameImportant[334] = true;
			tileFrameImportant[440] = true;
			tileFrameImportant[471] = true;
			tileFrameImportant[300] = true;
			tileFrameImportant[301] = true;
			tileFrameImportant[302] = true;
			tileFrameImportant[303] = true;
			tileFrameImportant[304] = true;
			tileFrameImportant[305] = true;
			tileFrameImportant[306] = true;
			tileFrameImportant[307] = true;
			tileFrameImportant[308] = true;
			tileFrameImportant[354] = true;
			tileLighted[354] = true;
			tileFrameImportant[499] = true;
			tileFrameImportant[355] = true;
			tileFrameImportant[324] = true;
			tileObsidianKill[324] = true;
			tileLavaDeath[324] = true;
			tileFrameImportant[463] = true;
			tileFrameImportant[491] = true;
			tileFrameImportant[464] = true;
			tileFrameImportant[466] = true;
			tileFrameImportant[419] = true;
			tileFrameImportant[442] = true;
			tileFrameImportant[443] = true;
			tileFrameImportant[444] = true;
			tileFrameImportant[420] = true;
			tileFrameImportant[423] = true;
			tileFrameImportant[424] = true;
			tileFrameImportant[428] = true;
			tileFrameImportant[520] = true;
			tileFrameImportant[429] = true;
			tileFrameImportant[445] = true;
			tileFrameImportant[476] = true;
			tileFrameImportant[283] = true;
			tileFrameImportant[288] = true;
			tileFrameImportant[289] = true;
			tileFrameImportant[290] = true;
			tileFrameImportant[291] = true;
			tileFrameImportant[292] = true;
			tileFrameImportant[293] = true;
			tileFrameImportant[294] = true;
			tileFrameImportant[295] = true;
			tileFrameImportant[296] = true;
			tileFrameImportant[297] = true;
			tileFrameImportant[316] = true;
			tileFrameImportant[317] = true;
			tileFrameImportant[318] = true;
			tileLargeFrames[284] = 1;
			wallHouse[224] = true;
			wallLargeFrames[224] = 2;
			wallHouse[60] = true;
			wallHouse[225] = true;
			wallHouse[226] = true;
			wallHouse[227] = true;
			wallHouse[231] = true;
			wallHouse[232] = true;
			wallHouse[233] = true;
			wallHouse[235] = true;
			wallHouse[234] = true;
			wallHouse[312] = true;
			wallHouse[313] = true;
			wallHouse[237] = true;
			wallHouse[238] = true;
			wallHouse[239] = true;
			wallHouse[240] = true;
			tileLargeFrames[409] = 2;
			tileFrameImportant[410] = true;
			tileFrameImportant[480] = true;
			tileFrameImportant[509] = true;
			wallHouse[173] = true;
			wallHouse[183] = true;
			wallHouse[179] = true;
			wallLargeFrames[179] = 1;
			tileSolid[367] = true;
			tileBlockLight[367] = true;
			tileMergeDirt[367] = true;
			tileSolid[357] = true;
			tileBlockLight[357] = true;
			tileLargeFrames[357] = 1;
			tileBlendAll[357] = true;
			wallHouse[184] = true;
			wallHouse[181] = true;
			tileSolid[368] = true;
			tileBlockLight[368] = true;
			tileMergeDirt[368] = true;
			tileSolid[369] = true;
			tileBlockLight[369] = true;
			tileBrick[369] = true;
			tileMergeDirt[369] = true;
			wallHouse[186] = true;
			tileLargeFrames[325] = 1;
			tileSolid[325] = true;
			tileBlockLight[325] = true;
			wallLargeFrames[146] = 1;
			wallLargeFrames[147] = 1;
			wallLargeFrames[167] = 1;
			wallLargeFrames[185] = 2;
			wallLargeFrames[274] = 2;
			tileSolid[460] = true;
			tileSolid[326] = true;
			tileBlockLight[326] = true;
			tileBrick[326] = true;
			tileSolid[458] = true;
			tileBlockLight[458] = true;
			tileBrick[458] = true;
			tileSolid[459] = true;
			tileBrick[459] = true;
			tileSolid[327] = true;
			tileBlockLight[327] = true;
			tileBrick[327] = true;
			tileSolid[345] = true;
			tileBlockLight[345] = true;
			tileBrick[345] = true;
			tileLighted[327] = true;
			tileSolid[328] = true;
			tileBrick[328] = true;
			tileSolid[329] = true;
			tileBrick[329] = true;
			tileBlockLight[329] = true;
			tileSolid[507] = true;
			tileBlockLight[507] = true;
			tileBrick[507] = true;
			tileSolid[508] = true;
			tileBlockLight[508] = true;
			tileBrick[508] = true;
			tileLighted[336] = true;
			tileLighted[340] = true;
			tileLighted[341] = true;
			tileLighted[342] = true;
			tileLighted[343] = true;
			tileLighted[344] = true;
			tileLighted[349] = true;
			tileLighted[598] = true;
			tileSolid[421] = true;
			tileBlockLight[421] = true;
			tileSolid[422] = true;
			tileBlockLight[422] = true;
			tileSolid[426] = true;
			tileBlockLight[426] = true;
			tileSolid[430] = true;
			tileBlockLight[430] = true;
			tileSolid[431] = true;
			tileBlockLight[431] = true;
			tileSolid[432] = true;
			tileBlockLight[432] = true;
			tileSolid[433] = true;
			tileBlockLight[433] = true;
			tileSolid[434] = true;
			tileBlockLight[434] = true;
			tileSolid[446] = true;
			tileSolid[447] = true;
			tileSolid[448] = true;
			tileFrameImportant[427] = true;
			tileSolidTop[427] = true;
			tileSolid[427] = true;
			tileNoAttach[427] = true;
			tileTable[427] = true;
			tileLavaDeath[427] = true;
			tileNoSunLight[427] = false;
			tileSolid[476] = true;
			for (int num = 435; num <= 439; num++)
			{
				tileFrameImportant[num] = true;
				tileSolidTop[num] = true;
				tileSolid[num] = true;
				tileNoAttach[num] = true;
				tileTable[num] = true;
				tileLavaDeath[num] = true;
				tileNoSunLight[num] = false;
			}
			tileSolid[284] = true;
			tileBlockLight[284] = true;
			tileSolid[346] = true;
			tileBlockLight[346] = true;
			tileLighted[346] = true;
			tileShine[346] = 2000;
			tileShine2[346] = true;
			tileBrick[346] = true;
			tileMergeDirt[346] = true;
			tileSolid[347] = true;
			tileBlockLight[347] = true;
			tileLighted[347] = true;
			tileShine[347] = 1900;
			tileShine2[347] = true;
			tileBrick[347] = true;
			tileMergeDirt[347] = true;
			tileSolid[348] = true;
			tileBlockLight[348] = true;
			tileLighted[348] = true;
			tileShine[348] = 1800;
			tileShine2[348] = true;
			tileBrick[348] = true;
			tileMergeDirt[348] = true;
			tileSolid[350] = true;
			tileBlockLight[350] = true;
			tileLighted[350] = true;
			tileBrick[350] = true;
			tileMergeDirt[350] = true;
			tileGlowMask[350] = 94;
			tileGlowMask[390] = 130;
			tileGlowMask[381] = 126;
			tileGlowMask[517] = 258;
			tileGlowMask[534] = 259;
			tileGlowMask[535] = 260;
			tileGlowMask[536] = 261;
			tileGlowMask[537] = 262;
			tileGlowMask[539] = 263;
			tileGlowMask[540] = 264;
			tileGlowMask[370] = 111;
			tileGlowMask[429] = 214;
			tileGlowMask[209] = 215;
			tileGlowMask[445] = 214;
			tileGlowMask[129] = -2;
			tileLighted[429] = true;
			tileLighted[209] = true;
			tileGlowMask[410] = 201;
			tileGlowMask[509] = 265;
			tileSolid[370] = true;
			tileBlockLight[370] = true;
			tileLighted[370] = true;
			tileShine[370] = 1900;
			tileShine2[370] = true;
			tileBrick[370] = true;
			tileMergeDirt[370] = true;
			tileContainer[21] = true;
			tileContainer[467] = true;
			tileContainer[88] = true;
			tileContainer[470] = true;
			tileContainer[475] = true;
			tileSign[55] = true;
			tileSign[85] = true;
			tileSign[425] = true;
			tileSign[573] = true;
			tileSolid[383] = true;
			tileBrick[383] = true;
			tileBlockLight[383] = true;
			tileSolid[385] = true;
			tileBrick[385] = true;
			tileBlockLight[385] = true;
			tileSolid[472] = true;
			tileBrick[472] = true;
			tileMergeDirt[472] = true;
			tileBlockLight[472] = true;
			tileSolid[473] = true;
			tileBrick[473] = true;
			tileMergeDirt[473] = true;
			tileBlockLight[473] = true;
			tileSolid[500] = true;
			tileBrick[500] = true;
			tileLighted[500] = true;
			tileMergeDirt[500] = true;
			tileBlockLight[500] = true;
			tileSolid[501] = true;
			tileBrick[501] = true;
			tileLighted[501] = true;
			tileMergeDirt[501] = true;
			tileBlockLight[501] = true;
			tileSolid[502] = true;
			tileBrick[502] = true;
			tileLighted[502] = true;
			tileMergeDirt[502] = true;
			tileBlockLight[502] = true;
			tileSolid[503] = true;
			tileBrick[503] = true;
			tileLighted[503] = true;
			tileMergeDirt[503] = true;
			tileBlockLight[503] = true;
			tileSolid[541] = true;
			tileBlockLight[541] = false;
			tileSolid[546] = true;
			tileBlockLight[546] = false;
			tileSolid[557] = true;
			tileBlockLight[557] = true;
			tileSolid[474] = true;
			tileBrick[474] = true;
			tileMergeDirt[474] = true;
			tileBlockLight[474] = true;
			tileSolid[478] = true;
			tileBrick[478] = true;
			tileMergeDirt[478] = true;
			tileBlockLight[478] = true;
			tileSolid[479] = true;
			tileBrick[479] = true;
			tileMergeDirt[479] = true;
			tileBlockLight[479] = true;
			tileSolid[562] = true;
			tileBrick[562] = true;
			tileBlockLight[562] = true;
			tileMergeDirt[562] = true;
			tileSolid[563] = true;
			tileBrick[563] = true;
			tileBlockLight[563] = true;
			tileMergeDirt[563] = true;
			tileSolid[496] = true;
			tileBrick[496] = true;
			tileMergeDirt[496] = true;
			tileBlockLight[496] = true;
			tileSolid[495] = true;
			tileBrick[495] = true;
			tileMergeDirt[495] = true;
			tileBlockLight[495] = true;
			tileSolid[396] = true;
			tileBlockLight[396] = true;
			tileSolid[397] = true;
			tileBlockLight[397] = true;
			tileSolid[399] = true;
			tileBlockLight[399] = true;
			tileSolid[401] = true;
			tileBlockLight[401] = true;
			tileSolid[398] = true;
			tileBlockLight[398] = true;
			tileSolid[400] = true;
			tileBlockLight[400] = true;
			tileSolid[402] = true;
			tileBlockLight[402] = true;
			tileSolid[403] = true;
			tileBlockLight[403] = true;
			tileSolid[404] = true;
			tileBlockLight[404] = true;
			tileSolid[407] = true;
			tileBlockLight[407] = true;
			tileShine2[407] = true;
			tileShine[407] = 1000;
			tileFrameImportant[36] = true;
			tileFrameImportant[275] = true;
			tileFrameImportant[276] = true;
			tileFrameImportant[277] = true;
			tileFrameImportant[278] = true;
			tileFrameImportant[279] = true;
			tileFrameImportant[280] = true;
			tileFrameImportant[281] = true;
			tileFrameImportant[282] = true;
			tileFrameImportant[285] = true;
			tileFrameImportant[286] = true;
			tileFrameImportant[414] = true;
			tileFrameImportant[413] = true;
			tileFrameImportant[309] = true;
			tileFrameImportant[310] = true;
			tileFrameImportant[339] = true;
			tileFrameImportant[532] = true;
			tileLighted[286] = true;
			tileLighted[302] = true;
			tileFrameImportant[298] = true;
			tileFrameImportant[299] = true;
			tileSolid[170] = true;
			tileBlockLight[170] = true;
			tileFrameImportant[171] = true;
			tileLighted[171] = true;
			tileFrameImportant[247] = true;
			tileFrameImportant[245] = true;
			tileFrameImportant[246] = true;
			tileFrameImportant[239] = true;
			tileFrameImportant[240] = true;
			tileFrameImportant[241] = true;
			tileFrameImportant[242] = true;
			tileFrameImportant[243] = true;
			tileFrameImportant[244] = true;
			tileFrameImportant[254] = true;
			tileSolid[221] = true;
			tileBlockLight[221] = true;
			tileMergeDirt[221] = true;
			tileLighted[96] = true;
			tileMergeDirt[250] = true;
			tileSolid[272] = true;
			tileBlockLight[272] = true;
			tileSolid[229] = true;
			tileBlockLight[229] = true;
			tileMergeDirt[229] = true;
			tileSolid[230] = true;
			tileBlockLight[230] = true;
			tileMergeDirt[230] = true;
			tileSolid[222] = true;
			tileBlockLight[222] = true;
			tileMergeDirt[222] = true;
			tileSolid[223] = true;
			tileBlockLight[223] = true;
			tileMergeDirt[223] = true;
			tileSolid[224] = true;
			tileBlockLight[224] = true;
			tileFrameImportant[237] = true;
			tileFrameImportant[238] = true;
			tileSolid[225] = true;
			tileBlockLight[225] = true;
			tileBrick[225] = true;
			tileSolid[226] = true;
			tileBlockLight[226] = true;
			tileBrick[226] = true;
			tileSolid[235] = true;
			tileBlockLight[235] = true;
			tileFrameImportant[235] = true;
			tileLighted[238] = true;
			tileCut[254] = true;
			tileFrameImportant[236] = true;
			tileCut[236] = true;
			tileSolid[191] = true;
			tileBrick[191] = true;
			tileBlockLight[191] = true;
			tileSolid[211] = true;
			tileBlockLight[211] = true;
			tileSolid[208] = true;
			tileBrick[208] = true;
			tileBlockLight[208] = true;
			tileSolid[192] = true;
			tileBlockLight[192] = true;
			tileSolid[193] = true;
			tileBrick[193] = true;
			tileBlockLight[193] = true;
			tileMergeDirt[193] = true;
			tileSolid[194] = true;
			tileBrick[194] = true;
			tileBlockLight[194] = true;
			tileSolid[195] = true;
			tileBrick[195] = true;
			tileMergeDirt[195] = true;
			tileBlockLight[195] = true;
			tileBlockLight[200] = true;
			tileSolid[200] = true;
			tileBrick[200] = true;
			tileBlockLight[203] = true;
			tileSolid[203] = true;
			tileMergeDirt[203] = true;
			tileBlockLight[204] = true;
			tileSolid[204] = true;
			tileMergeDirt[204] = true;
			tileBlockLight[165] = true;
			tileShine2[147] = true;
			tileShine2[161] = true;
			tileShine2[163] = true;
			tileShine2[164] = true;
			tileSolid[189] = true;
			tileBlockLight[51] = true;
			tileLighted[204] = true;
			tileShine[204] = 1150;
			tileShine2[204] = true;
			tileSolid[190] = true;
			tileBlockLight[190] = true;
			tileBrick[190] = true;
			tileSolid[198] = true;
			tileMergeDirt[198] = true;
			tileBrick[198] = true;
			tileBlockLight[198] = true;
			tileSolid[206] = true;
			tileBlockLight[206] = true;
			tileMergeDirt[206] = true;
			tileBrick[206] = true;
			tileBlockLight[234] = true;
			tileSolid[248] = true;
			tileSolid[249] = true;
			tileSolid[250] = true;
			tileBrick[248] = true;
			tileBrick[249] = true;
			tileBrick[250] = true;
			tileSolid[251] = true;
			tileSolid[252] = true;
			tileBrick[252] = true;
			tileSolid[253] = true;
			tileBrick[253] = true;
			tileMergeDirt[251] = true;
			tileMergeDirt[252] = true;
			tileMergeDirt[253] = true;
			tileBlockLight[251] = true;
			tileBlockLight[252] = true;
			tileBlockLight[253] = true;
			tileBlockLight[248] = true;
			tileBlockLight[249] = true;
			tileBlockLight[250] = true;
			tileLargeFrames[273] = 1;
			tileSolid[273] = true;
			tileBlockLight[273] = true;
			tileLargeFrames[274] = 1;
			tileSolid[274] = true;
			tileBlockLight[274] = true;
			tileLargeFrames[618] = 1;
			tileSolid[618] = true;
			tileBlockLight[618] = true;
			for (int num2 = 255; num2 <= 268; num2++)
			{
				tileSolid[num2] = true;
				if (num2 > 261)
				{
					tileLighted[num2] = true;
					tileShine2[num2] = true;
				}
			}
			tileFrameImportant[269] = true;
			tileFrameImportant[470] = true;
			tileFrameImportant[475] = true;
			tileFrameImportant[390] = true;
			tileFrameImportant[597] = true;
			tileLighted[597] = true;
			tileNoAttach[390] = true;
			tileLavaDeath[390] = true;
			tileLighted[390] = true;
			tileFrameImportant[617] = true;
			wallHouse[168] = true;
			wallHouse[169] = true;
			wallHouse[142] = true;
			wallHouse[143] = true;
			wallHouse[144] = true;
			wallHouse[149] = true;
			wallHouse[151] = true;
			wallHouse[150] = true;
			wallHouse[152] = true;
			wallHouse[145] = true;
			wallHouse[148] = true;
			wallHouse[175] = true;
			wallHouse[176] = true;
			wallHouse[182] = true;
			for (int num3 = 153; num3 < 167; num3++)
			{
				wallHouse[num3] = true;
			}
			wallHouse[146] = true;
			wallHouse[147] = true;
			wallHouse[149] = true;
			wallHouse[167] = true;
			wallHouse[168] = true;
			wallHouse[133] = true;
			wallHouse[134] = true;
			wallHouse[135] = true;
			wallHouse[136] = true;
			wallHouse[137] = true;
			wallHouse[75] = true;
			wallHouse[76] = true;
			wallHouse[78] = true;
			wallHouse[82] = true;
			wallHouse[77] = true;
			wallHouse[1] = true;
			wallHouse[4] = true;
			wallHouse[5] = true;
			wallHouse[6] = true;
			wallHouse[10] = true;
			wallHouse[11] = true;
			wallHouse[12] = true;
			wallHouse[16] = true;
			wallHouse[17] = true;
			wallHouse[18] = true;
			wallHouse[19] = true;
			wallHouse[20] = true;
			wallHouse[21] = true;
			wallHouse[22] = true;
			wallHouse[23] = true;
			wallHouse[24] = true;
			wallHouse[25] = true;
			wallHouse[26] = true;
			wallHouse[27] = true;
			wallHouse[29] = true;
			wallHouse[30] = true;
			wallHouse[31] = true;
			wallHouse[32] = true;
			wallHouse[33] = true;
			wallHouse[34] = true;
			wallHouse[35] = true;
			wallHouse[36] = true;
			wallHouse[37] = true;
			wallHouse[38] = true;
			wallHouse[39] = true;
			wallHouse[41] = true;
			wallHouse[42] = true;
			wallHouse[43] = true;
			wallHouse[44] = true;
			wallHouse[45] = true;
			wallHouse[46] = true;
			wallHouse[47] = true;
			wallHouse[66] = true;
			wallHouse[67] = true;
			wallHouse[68] = true;
			wallHouse[72] = true;
			wallHouse[73] = true;
			wallHouse[107] = true;
			wallHouse[106] = true;
			wallHouse[245] = true;
			wallHouse[315] = true;
			wallHouse[109] = true;
			wallHouse[110] = true;
			wallHouse[111] = true;
			wallHouse[112] = true;
			wallHouse[113] = true;
			wallHouse[114] = true;
			wallHouse[115] = true;
			wallHouse[116] = true;
			wallHouse[117] = true;
			wallHouse[118] = true;
			wallHouse[119] = true;
			wallHouse[120] = true;
			wallHouse[121] = true;
			wallHouse[122] = true;
			wallHouse[123] = true;
			wallHouse[124] = true;
			wallHouse[125] = true;
			wallHouse[108] = true;
			wallHouse[100] = true;
			wallHouse[101] = true;
			wallHouse[102] = true;
			wallHouse[103] = true;
			wallHouse[104] = true;
			wallHouse[105] = true;
			wallHouse[84] = true;
			wallHouse[74] = true;
			wallHouse[241] = true;
			wallHouse[85] = true;
			wallHouse[88] = true;
			wallHouse[89] = true;
			wallHouse[90] = true;
			wallHouse[91] = true;
			wallHouse[92] = true;
			wallHouse[93] = true;
			wallHouse[126] = true;
			wallHouse[127] = true;
			wallHouse[128] = true;
			wallHouse[129] = true;
			wallHouse[130] = true;
			wallHouse[131] = true;
			wallHouse[132] = true;
			wallHouse[138] = true;
			wallHouse[139] = true;
			wallHouse[140] = true;
			wallHouse[141] = true;
			wallHouse[177] = true;
			wallHouse[172] = true;
			wallHouse[242] = true;
			wallHouse[243] = true;
			wallHouse[174] = true;
			wallHouse[223] = true;
			wallHouse[230] = true;
			wallHouse[228] = true;
			wallHouse[229] = true;
			wallHouse[236] = true;
			wallHouse[246] = true;
			wallHouse[247] = true;
			wallHouse[248] = true;
			wallHouse[249] = true;
			wallHouse[250] = true;
			wallHouse[251] = true;
			wallHouse[252] = true;
			wallHouse[253] = true;
			wallHouse[254] = true;
			wallHouse[255] = true;
			wallHouse[314] = true;
			wallHouse[256] = true;
			wallHouse[257] = true;
			wallHouse[258] = true;
			wallHouse[259] = true;
			wallHouse[260] = true;
			wallHouse[261] = true;
			wallHouse[262] = true;
			wallHouse[263] = true;
			wallHouse[264] = true;
			wallHouse[265] = true;
			wallHouse[266] = true;
			wallHouse[267] = true;
			wallHouse[268] = true;
			wallHouse[269] = true;
			wallHouse[270] = true;
			wallHouse[271] = true;
			wallHouse[272] = true;
			wallHouse[273] = true;
			wallHouse[274] = true;
			wallHouse[275] = true;
			wallHouse[276] = true;
			wallHouse[277] = true;
			wallHouse[278] = true;
			wallHouse[279] = true;
			wallHouse[280] = true;
			wallHouse[281] = true;
			wallHouse[282] = true;
			wallHouse[283] = true;
			wallHouse[284] = true;
			wallHouse[285] = true;
			wallHouse[286] = true;
			wallHouse[287] = true;
			wallHouse[288] = true;
			wallHouse[289] = true;
			wallHouse[290] = true;
			wallHouse[291] = true;
			wallHouse[292] = true;
			wallHouse[293] = true;
			wallHouse[294] = true;
			wallHouse[295] = true;
			wallHouse[296] = true;
			wallHouse[297] = true;
			wallHouse[298] = true;
			wallHouse[299] = true;
			wallHouse[300] = true;
			wallHouse[301] = true;
			wallHouse[302] = true;
			wallHouse[303] = true;
			wallHouse[304] = true;
			wallHouse[305] = true;
			wallHouse[306] = true;
			wallHouse[307] = true;
			wallHouse[308] = true;
			wallHouse[309] = true;
			wallHouse[310] = true;
			wallHouse[311] = true;
			wallLight[0] = true;
			wallLight[21] = true;
			wallLight[106] = true;
			wallLight[107] = true;
			wallLight[138] = true;
			wallLight[140] = true;
			wallLight[141] = true;
			wallLight[139] = true;
			wallLight[145] = true;
			wallLight[150] = true;
			wallLight[152] = true;
			wallLight[245] = true;
			wallLight[315] = true;
			wallLight[168] = true;
			for (int num4 = 0; num4 < 316; num4++)
			{
				wallDungeon[num4] = false;
			}
			wallDungeon[7] = true;
			wallDungeon[8] = true;
			wallDungeon[9] = true;
			wallDungeon[94] = true;
			wallDungeon[95] = true;
			wallDungeon[96] = true;
			wallDungeon[97] = true;
			wallDungeon[98] = true;
			wallDungeon[99] = true;
		}

		private void ClientInitialize()
		{
			//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
			//IL_01c5: Expected O, but got Unknown
			MessageBuffer.OnTileChangeReceived += OnTileChangeEvent;
			LanguageManager.Instance.OnLanguageChanged += delegate
			{
				ItemTooltip.InvalidateTooltips();
			};
			PlayerInput.OnBindingChange += ItemTooltip.InvalidateTooltips;
			clientUUID = Guid.NewGuid().ToString();
			_ = GameManager.Graphics.Effects.Filters.Scene;
			//Platform.Current.InitializeClientServices(base.Window.Handle);
			//Platform.Get<IImeService>().AddKeyListener((Action<char>)delegate(char keyStroke)
			/*{
				if (keyCount < 10)
				{
					keyInt[keyCount] = keyStroke;
					keyString[keyCount] = keyStroke.ToString() ?? "";
					keyCount++;
				}
			});*/
			base.Window.AllowUserResizing = true;
			LoadSettings();
			SetDisplayMonitor();
			if (screenWidth > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width)
			{
				screenWidth = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width;
			}
			if (screenHeight > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height)
			{
				screenHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;
			}
			graphics.ApplyChanges();
			if (Main.OnResolutionChanged != null)
			{
				Main.OnResolutionChanged(new Vector2(screenWidth, screenHeight));
			}
			//CheckBunny();
			base.GraphicsDevice.DeviceLost += GraphicsDeviceLost;
			base.GraphicsDevice.DeviceReset += GraphicsDeviceLost;
			base.GraphicsDevice.DeviceResetting += GraphicsDeviceLost;
			if (_needsLanguageSelect)
			{
				menuMode = 1212;
			}
			_achievements = new AchievementManager();
			_achievementAdvisor = new AchievementAdvisor();
			OpenRecent();
			UILinksInitializer.Load();
			Chroma = new ChromaEngine();
			ChromaPainter = new ChromaHotkeyPainter();
			ChromaPainter.CollectBoundKeys();
			CacheSupportedDisplaySizes();
			if (autoJoin)
			{
				LoadPlayers();
				menuMode = 1;
				menuMultiplayer = true;
			}
			fpsTimer.Start();
		}

		private static void CacheSupportedDisplaySizes()
		{
			numDisplayModes = 0;
			foreach (DisplayMode supportedDisplayMode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
			{
				if (supportedDisplayMode.Width < minScreenW || supportedDisplayMode.Height < minScreenH || supportedDisplayMode.Width > maxScreenW || supportedDisplayMode.Height > maxScreenH)
				{
					continue;
				}
				bool flag = true;
				for (int i = 0; i < numDisplayModes; i++)
				{
					if (supportedDisplayMode.Width == displayWidth[i] && supportedDisplayMode.Height == displayHeight[i])
					{
						flag = false;
						break;
					}
				}
				if (flag)
				{
					displayHeight[numDisplayModes] = supportedDisplayMode.Height;
					displayWidth[numDisplayModes] = supportedDisplayMode.Width;
					numDisplayModes++;
				}
			}
		}

		public static void LoadTestLog(string logname)
		{
		}

		private void OnceFailedLoadingAnAsset(string assetPath, Exception e)
		{
			FancyErrorPrinter.ShowFailedToLoadAssetError(e, assetPath);
		}

		protected override void LoadContent()
		{
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Expected O, but got Unknown
			//IL_0108: Unknown result type (might be due to invalid IL or missing references)
			//IL_0112: Expected O, but got Unknown
			//IL_014a: Unknown result type (might be due to invalid IL or missing references)
			content = Content;
			//IL_0150: Expected O, but got Unknown
			SoundEngine.Initialize();
			if (XnaExtensions.Get<IAssetRepository>((IServiceProvider)base.Services) == null)
			{
				AssetInitializer.CreateAssetServices(base.Services);
			}
			Assets = XnaExtensions.Get<IAssetRepository>((IServiceProvider)base.Services);
			Assets.AssetLoadFailHandler = (new FailedToLoadAssetCustomAction(OnceFailedLoadingAnAsset));
			mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
			ShaderContentManager = new ContentManager(base.Content.ServiceProvider, base.Content.RootDirectory);
			//PixelShaderRef.Value = ShaderContentManager.Load<Effect>("PixelShader");
			//VertexPixelShaderRef.Value = ShaderContentManager.Load<Effect>("PixelShader");
			//TileShaderRef.Value = ShaderContentManager.Load<Effect>("TileShader");
			//ScreenShaderRef.Value = ShaderContentManager.Load<Effect>("ScreenShader");
			spriteBatch = new SpriteBatch(base.GraphicsDevice);
			tileBatch = new TileBatch(base.GraphicsDevice);
			DebugDrawer = new BasicDebugDrawer(base.GraphicsDevice);
			GameViewMatrix = new SpriteViewMatrix(base.GraphicsDevice);
			BackgroundViewMatrix = new SpriteViewMatrix(base.GraphicsDevice);

			//AssetSourceController = new AssetSourceController(Assets, (IEnumerable<IContentSource>)(object)new IContentSource[1]
			//{
			//	(IContentSource)new XnaContentSource("/sdcard/Content")
			//});

            AssetSourceController = new AssetSourceController(Assets, (IEnumerable<IContentSource>)(object)new IContentSource[1]
            {
                (IContentSource)new XnaContentSource
				(
					/*"/storage/emulated/0/Android/data/ru.mexicanr.terraria/files/Content"*/
					"/data/ru.mexicanr.terraria/files/Content"
                )
            });


            VanillaContentValidator.Instance = 
				new VanillaContentValidator("Terraria.IO.Data.ResourcePacksDefaultInfo.tsv");
			AssetSourceController.UseResourcePacks(
				AssetInitializer.CreateResourcePackList(base.Services));

			AssetInitializer.LoadSplashAssets(asyncLoadForSounds: true);
			ChromaInitializer.Load();
			_gameContentLoadProcess = LoadContent_Deferred();
		}

		private void LoadContent_TryEnteringHiDef()
		{
			Configuration.Load();
			Configuration.Get("UseExperimentalFeatures", UseExperimentalFeatures);
			Configuration.Get("Support4K", Support4K);
			bool flag = Support4K &&
				base.GraphicsDevice.Adapter.IsProfileSupported(GraphicsProfile.HiDef);

			if (GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width <= 1920 
				&& GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height <= 1200)
			{
				flag = false;
			}
			if (Support4K && flag && base.GraphicsDevice.GraphicsProfile != GraphicsProfile.HiDef)
			{
				SetGraphicsProfile(GraphicsProfile.HiDef);
			}
		}

		protected IEnumerator LoadContent_Deferred()
		{
			yield return null;
			AssetInitializer.LoadAssetsWhileInInitialBlackScreen();
			yield return null;
			bool doneLoadingMusic = false;
			IEnumerator musicLoadProcedure = LoadMusic_InSteps();
			while (!doneLoadingMusic)
			{
				try
				{
					if (!musicLoadProcedure.MoveNext())
					{
						doneLoadingMusic = true;
					}
				}
				catch
				{
					doneLoadingMusic = true;
					musicVolume = 0f;
					soundVolume = 0f;
				}
				yield return null;
			}
			_musicLoaded = true;
			splashTimer.Start();
			yield return null;
			_begunMainAsyncLoad = true;
			AssetInitializer.Load(asyncLoad: true);
			_artLoaded = true;
			TownNPCHeadRenderer = new NPCHeadRenderer(TextureAssets.NpcHead);
			ContentThatNeedsRenderTargets.Add(TownNPCHeadRenderer);
			BossNPCHeadRenderer = new NPCHeadRenderer(TextureAssets.NpcHeadBoss);
			ContentThatNeedsRenderTargets.Add(BossNPCHeadRenderer);
		}

		private void TickLoadProcess()
		{
			_gameContentLoadProcess.MoveNext();
		}

		private void LoadContent_Music()
		{
			((ThreadStart)delegate
			{
				try
				{
					LoadMusic();
				}
				catch
				{
					musicVolume = 0f;
					soundVolume = 0f;
				}
				_musicLoaded = true;
				splashTimer.Start();
			})();
		}

		private static void PostContentLoadInitialize()
		{
			LiquidRenderer.LoadContent();
			AchievementInitializer.Load();
			AchievementAdvisor.Initialize();
			DyeInitializer.Load();
			ScreenEffectInitializer.Load();
			InGameNotificationsTracker.Initialize();
			moonType = rand.Next(9);
			windSpeedCurrent = (float)rand.Next(-800, 801) * 0.001f;
			windSpeedTarget = windSpeedCurrent;
			numClouds = rand.Next(200);
			Mount.Initialize();
			Minecart.Initialize();
			CacheSupportedDisplaySizes();
			ContentSamples.RebuildItemCreativeSortingIDsAfterRecipesAreSetUp();
			ContentSamples.CommonlyUsedContentSamples.PrepareAfterEverythingElseLoaded();
		}

		private void LoadMusic()
		{
			if (SoundEngine.IsAudioSupported)
			{
				engine = new AudioEngine("Content\\TerrariaMusic.xgs");
				soundBank = new SoundBank(engine, "Content\\Sound Bank.xsb");
				waveBank = new WaveBank(engine, "Content\\Wave Bank.xwb");
				for (int i = 1; i < 89; i++)
				{
					music[i] = soundBank.GetCue("Music_" + i);
				}
			}
		}

		private IEnumerator LoadMusic_InSteps()
		{
			engine = new AudioEngine("Content\\TerrariaMusic.xgs");
			soundBank = new SoundBank(engine, "Content\\Sound Bank.xsb");
			waveBank = new WaveBank(engine, "Content\\Wave Bank.xwb");
			yield return null;
			for (int i = 1; i < 89; i++)
			{
				music[i] = soundBank.GetCue("Music_" + i);
				yield return null;
			}
		}

		protected override void UnloadContent()
		{
		}

		public static void CheckForMoonEventsStartingTemporarySeasons()
		{
			if (netMode != 1)
			{
				bool num = forceHalloweenForToday;
				bool flag = forceXMasForToday;
				forceXMasForToday = false;
				forceHalloweenForToday = false;
				int waveNumber = NPC.waveNumber;
				_ = NPC.waveKills;
				if (pumpkinMoon && waveNumber >= 15)
				{
					forceHalloweenForToday = true;
				}
				if (snowMoon && waveNumber >= 20)
				{
					forceXMasForToday = true;
				}
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(50, 255, 130);
				if (num != forceHalloweenForToday)
				{
					WorldGen.BroadcastText(NetworkText.FromKey(forceHalloweenForToday ? "Misc.StartedVictoryHalloween" : "Misc.EndedVictoryHalloween"), color);
				}
				if (flag != forceXMasForToday)
				{
					WorldGen.BroadcastText(NetworkText.FromKey(forceXMasForToday ? "Misc.StartedVictoryXmas" : "Misc.EndedVictoryXmas"), color);
				}
			}
		}

		public static void stopMoonEvent()
		{
			_ = NPC.waveNumber;
			_ = NPC.waveKills;
			if (pumpkinMoon)
			{
				pumpkinMoon = false;
				if (netMode != 1)
				{
					NPC.waveKills = 0f;
					NPC.waveNumber = 0;
				}
			}
			if (snowMoon)
			{
				snowMoon = false;
				if (netMode != 1)
				{
					NPC.waveKills = 0f;
					NPC.waveNumber = 0;
				}
			}
		}

		public static void startPumpkinMoon()
		{
			pumpkinMoon = true;
			snowMoon = false;
			bloodMoon = false;
			invasionProgress = -1;
			invasionProgressDisplayLeft = 0;
			invasionProgressAlpha = 0f;
			invasionProgressIcon = 0;
			if (netMode != 1)
			{
				NPC.waveKills = 0f;
				NPC.waveNumber = 1;
				NetworkText invasionWaveText = Lang.GetInvasionWaveText(1, 305);
				if (netMode == 0)
				{
					NewText(invasionWaveText.ToString(), 175, 75);
				}
				else if (netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(invasionWaveText, new Microsoft.Xna.Framework.Color(175, 75, 255));
				}
			}
		}

		public static void startSnowMoon()
		{
			snowMoon = true;
			pumpkinMoon = false;
			bloodMoon = false;
			invasionProgress = -1;
			invasionProgressDisplayLeft = 0;
			invasionProgressAlpha = 0f;
			invasionProgressIcon = 0;
			if (netMode != 1)
			{
				NPC.waveKills = 0f;
				NPC.waveNumber = 1;
				NetworkText invasionWaveText = Lang.GetInvasionWaveText(1, 338, 342);
				if (netMode == 0)
				{
					NewText(invasionWaveText.ToString(), 175, 75);
				}
				else if (netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(invasionWaveText, new Microsoft.Xna.Framework.Color(175, 75, 255));
				}
			}
		}

		protected void UpdateAudio()
		{
			if (!SoundEngine.IsAudioSupported || !_musicLoaded)
			{
				return;
			}
			if (!showSplash)
			{
				SoundEngine.Update();
			}
			if (musicVolume == 0f)
			{
				curMusic = 0;
			}
			try
			{
				if (dedServ)
				{
					return;
				}
				bool isActive = base.IsActive;
				if (!isActive)
				{
					for (int i = 0; i < music.Length; i++)
					{
						if (music[i] != null && !music[i].IsPaused && music[i].IsPlaying && musicFade[i] > 0f)
						{
							try
							{
								music[i].Pause();
							}
							catch (Exception)
							{
							}
						}
					}
					SoundEngine.StopAmbientSounds();
				}
				else
				{
					for (int j = 0; j < music.Length; j++)
					{
						if (music[j] != null && music[j].IsPaused && musicFade[j] > 0f)
						{
							try
							{
								music[j].Resume();
							}
							catch (Exception)
							{
							}
						}
					}
				}
				if (drunkWorld)
				{
					TOWMusicUnlocked = true;
				}
				if (gameMenu)
				{
					swapMusic = false;
				}
				if (swapMusic)
				{
					if (drunkWorld)
					{
						UpdateAudio_DecideOnNewMusic();
					}
					else
					{
						UpdateAudio_DecideOnTOWMusic();
					}
				}
				else if (!gameMenu && drunkWorld)
				{
					UpdateAudio_DecideOnTOWMusic();
				}
				else
				{
					UpdateAudio_DecideOnNewMusic();
				}
				if (gameMenu || musicVolume == 0f)
				{
					musicBox2 = -1;
					SceneMetrics.ActiveMusicBox = -1;
				}
				if (musicBox2 >= 0)
				{
					SceneMetrics.ActiveMusicBox = musicBox2;
				}
				if (SceneMetrics.ActiveMusicBox >= 0)
				{
					if (SceneMetrics.ActiveMusicBox == 0)
					{
						newMusic = 1;
					}
					if (SceneMetrics.ActiveMusicBox == 1)
					{
						newMusic = 2;
					}
					if (SceneMetrics.ActiveMusicBox == 2)
					{
						newMusic = 3;
					}
					if (SceneMetrics.ActiveMusicBox == 4)
					{
						newMusic = 4;
					}
					if (SceneMetrics.ActiveMusicBox == 5)
					{
						newMusic = 5;
					}
					if (SceneMetrics.ActiveMusicBox == 3)
					{
						newMusic = 6;
					}
					if (SceneMetrics.ActiveMusicBox == 6)
					{
						newMusic = 7;
					}
					if (SceneMetrics.ActiveMusicBox == 7)
					{
						newMusic = 8;
					}
					if (SceneMetrics.ActiveMusicBox == 9)
					{
						newMusic = 9;
					}
					if (SceneMetrics.ActiveMusicBox == 8)
					{
						newMusic = 10;
					}
					if (SceneMetrics.ActiveMusicBox == 11)
					{
						newMusic = 11;
					}
					if (SceneMetrics.ActiveMusicBox == 10)
					{
						newMusic = 12;
					}
					if (SceneMetrics.ActiveMusicBox == 12)
					{
						newMusic = 13;
					}
					if (SceneMetrics.ActiveMusicBox == 13)
					{
						newMusic = 14;
					}
					if (SceneMetrics.ActiveMusicBox == 14)
					{
						newMusic = 15;
					}
					if (SceneMetrics.ActiveMusicBox == 15)
					{
						newMusic = 16;
					}
					if (SceneMetrics.ActiveMusicBox == 16)
					{
						newMusic = 17;
					}
					if (SceneMetrics.ActiveMusicBox == 17)
					{
						newMusic = 18;
					}
					if (SceneMetrics.ActiveMusicBox == 18)
					{
						newMusic = 19;
					}
					if (SceneMetrics.ActiveMusicBox == 19)
					{
						newMusic = 20;
					}
					if (SceneMetrics.ActiveMusicBox == 20)
					{
						newMusic = 21;
					}
					if (SceneMetrics.ActiveMusicBox == 21)
					{
						newMusic = 22;
					}
					if (SceneMetrics.ActiveMusicBox == 22)
					{
						newMusic = 23;
					}
					if (SceneMetrics.ActiveMusicBox == 23)
					{
						newMusic = 24;
					}
					if (SceneMetrics.ActiveMusicBox == 24)
					{
						newMusic = 25;
					}
					if (SceneMetrics.ActiveMusicBox == 25)
					{
						newMusic = 26;
					}
					if (SceneMetrics.ActiveMusicBox == 26)
					{
						newMusic = 27;
					}
					if (SceneMetrics.ActiveMusicBox == 27)
					{
						newMusic = 29;
					}
					if (SceneMetrics.ActiveMusicBox == 28)
					{
						newMusic = 30;
					}
					if (SceneMetrics.ActiveMusicBox == 29)
					{
						newMusic = 31;
					}
					if (SceneMetrics.ActiveMusicBox == 30)
					{
						newMusic = 32;
					}
					if (SceneMetrics.ActiveMusicBox == 31)
					{
						newMusic = 33;
					}
					if (SceneMetrics.ActiveMusicBox == 32)
					{
						newMusic = 38;
					}
					if (SceneMetrics.ActiveMusicBox == 33)
					{
						newMusic = 37;
					}
					if (SceneMetrics.ActiveMusicBox == 34)
					{
						newMusic = 35;
					}
					if (SceneMetrics.ActiveMusicBox == 35)
					{
						newMusic = 36;
					}
					if (SceneMetrics.ActiveMusicBox == 36)
					{
						newMusic = 34;
					}
					if (SceneMetrics.ActiveMusicBox == 37)
					{
						newMusic = 39;
					}
					if (SceneMetrics.ActiveMusicBox == 38)
					{
						newMusic = 40;
					}
					if (SceneMetrics.ActiveMusicBox == 39)
					{
						newMusic = 41;
					}
					if (SceneMetrics.ActiveMusicBox == 40)
					{
						newMusic = 44;
					}
					if (SceneMetrics.ActiveMusicBox == 41)
					{
						newMusic = 48;
					}
					if (SceneMetrics.ActiveMusicBox == 42)
					{
						newMusic = 42;
					}
					if (SceneMetrics.ActiveMusicBox == 43)
					{
						newMusic = 43;
					}
					if (SceneMetrics.ActiveMusicBox == 44)
					{
						newMusic = 46;
					}
					if (SceneMetrics.ActiveMusicBox == 45)
					{
						newMusic = 47;
					}
					if (SceneMetrics.ActiveMusicBox == 46)
					{
						newMusic = 49;
					}
					if (SceneMetrics.ActiveMusicBox == 47)
					{
						newMusic = 51;
					}
					if (SceneMetrics.ActiveMusicBox == 48)
					{
						newMusic = 52;
					}
					if (SceneMetrics.ActiveMusicBox == 49)
					{
						newMusic = 53;
					}
					if (SceneMetrics.ActiveMusicBox == 50)
					{
						newMusic = 54;
					}
					if (SceneMetrics.ActiveMusicBox == 51)
					{
						newMusic = 55;
					}
					if (SceneMetrics.ActiveMusicBox == 52)
					{
						newMusic = 56;
					}
					if (SceneMetrics.ActiveMusicBox == 53)
					{
						newMusic = 57;
					}
					if (SceneMetrics.ActiveMusicBox == 54)
					{
						newMusic = 58;
					}
					if (SceneMetrics.ActiveMusicBox == 55)
					{
						newMusic = 59;
					}
					if (SceneMetrics.ActiveMusicBox == 56)
					{
						newMusic = 60;
					}
					if (SceneMetrics.ActiveMusicBox == 57)
					{
						newMusic = 61;
					}
					if (SceneMetrics.ActiveMusicBox == 58)
					{
						newMusic = 62;
					}
					if (SceneMetrics.ActiveMusicBox == 59)
					{
						newMusic = 63;
					}
					if (SceneMetrics.ActiveMusicBox == 60)
					{
						newMusic = 64;
					}
					if (SceneMetrics.ActiveMusicBox == 61)
					{
						newMusic = 65;
					}
					if (SceneMetrics.ActiveMusicBox == 62)
					{
						newMusic = 66;
					}
					if (SceneMetrics.ActiveMusicBox == 63)
					{
						newMusic = 67;
					}
					if (SceneMetrics.ActiveMusicBox == 64)
					{
						newMusic = 68;
					}
					if (SceneMetrics.ActiveMusicBox == 65)
					{
						newMusic = 69;
					}
					if (SceneMetrics.ActiveMusicBox == 66)
					{
						newMusic = 70;
					}
					if (SceneMetrics.ActiveMusicBox == 67)
					{
						newMusic = 71;
					}
					if (SceneMetrics.ActiveMusicBox == 68)
					{
						newMusic = 72;
					}
					if (SceneMetrics.ActiveMusicBox == 69)
					{
						newMusic = 73;
					}
					if (SceneMetrics.ActiveMusicBox == 70)
					{
						newMusic = 74;
					}
					if (SceneMetrics.ActiveMusicBox == 71)
					{
						newMusic = 75;
					}
					if (SceneMetrics.ActiveMusicBox == 72)
					{
						newMusic = 76;
					}
					if (SceneMetrics.ActiveMusicBox == 73)
					{
						newMusic = 77;
					}
					if (SceneMetrics.ActiveMusicBox == 74)
					{
						newMusic = 78;
					}
					if (SceneMetrics.ActiveMusicBox == 75)
					{
						newMusic = 79;
					}
					if (SceneMetrics.ActiveMusicBox == 76)
					{
						newMusic = 80;
					}
					if (SceneMetrics.ActiveMusicBox == 77)
					{
						newMusic = 81;
					}
					if (SceneMetrics.ActiveMusicBox == 78)
					{
						newMusic = 82;
					}
					if (SceneMetrics.ActiveMusicBox == 79)
					{
						newMusic = 83;
					}
					if (SceneMetrics.ActiveMusicBox == 80)
					{
						newMusic = 84;
					}
					if (SceneMetrics.ActiveMusicBox == 81)
					{
						newMusic = 85;
					}
					if (SceneMetrics.ActiveMusicBox == 82)
					{
						newMusic = 86;
					}
					if (SceneMetrics.ActiveMusicBox == 83)
					{
						newMusic = 87;
					}
					if (SceneMetrics.ActiveMusicBox == 84)
					{
						newMusic = 88;
					}
				}
				if (curMusic != newMusic)
				{
					_musicReplayDelay = 0;
				}
				if (_musicReplayDelay > 0)
				{
					_musicReplayDelay--;
				}
				curMusic = newMusic;
				float num = 1f;
				if (NPC.MoonLordCountdown > 0)
				{
					num = (float)NPC.MoonLordCountdown / 3600f;
					num *= num;
					if (NPC.MoonLordCountdown > 720)
					{
						num = MathHelper.Lerp(0f, 1f, num);
					}
					else
					{
						num = 0f;
						curMusic = 0;
					}
					if (NPC.MoonLordCountdown == 1 && curMusic >= 1 && curMusic < 89)
					{
						musicFade[curMusic] = 0f;
					}
				}
				for (int k = 1; k < 89; k++)
				{
					float num2 = musicFade[k] * musicVolume * num;
					if (k >= 62 && k <= 88)
					{
						num2 *= 0.9f;
					}
					else if (k == 52)
					{
						num2 *= 1.15f;
						if (num2 > 1f)
						{
							num2 = 1f;
						}
					}
					switch (k)
					{
					case 28:
					{
						float num6 = 0.5f;
						float num7 = cloudAlpha / 9f * 10f * num6 + (1f - num6);
						if (num7 > 1f)
						{
							num7 = 1f;
						}
						if (gameMenu)
						{
							num7 = 0f;
						}
						num7 *= (float)Math.Pow(atmo, 4.0);
						if (cloudAlpha > 0f && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2) && !player[myPlayer].ZoneSnow)
						{
							if (ambientVolume == 0f || num7 == 0f)
							{
								if (music[k].IsPlaying)
								{
									music[k].Stop(AudioStopOptions.Immediate);
								}
								continue;
							}
							if (!music[k].IsPlaying)
							{
								music[k] = soundBank.GetCue("Music_" + k);
								music[k].Play();
								music[k].SetVariable("Volume", musicFade[k] * ambientVolume * num7);
								continue;
							}
							if (music[k].IsPaused && base.IsActive)
							{
								music[k].Resume();
								continue;
							}
							musicFade[k] += 0.005f;
							if (musicFade[k] > 1f)
							{
								musicFade[k] = 1f;
							}
							music[k].SetVariable("Volume", musicFade[k] * ambientVolume * num7);
						}
						else if (music[k].IsPlaying)
						{
							if (musicFade[k] > 0f)
							{
								musicFade[k] -= 0.005f;
							}
							if (musicFade[k] <= 0f)
							{
								musicFade[k] -= 0f;
								music[k].Stop(AudioStopOptions.Immediate);
							}
							else
							{
								music[k].SetVariable("Volume", musicFade[k] * ambientVolume * num7);
							}
						}
						else
						{
							musicFade[k] = 0f;
						}
						continue;
					}
					case 45:
					{
						float num3 = 0.7f;
						float num4 = Math.Abs(windSpeedCurrent) * num3 + (1f - num3);
						if (num4 > 1f)
						{
							num4 = 1f;
						}
						num4 *= 0.9f;
						float num5 = 20f;
						num4 *= (float)Math.Pow(atmo, 4.0);
						if (!gameMenu && Math.Abs(windSpeedCurrent) >= num5 / 50f && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
						{
							if (ambientVolume == 0f || num4 == 0f)
							{
								if (music[k].IsPlaying)
								{
									music[k].Stop(AudioStopOptions.Immediate);
								}
								continue;
							}
							if (!music[k].IsPlaying)
							{
								music[k] = soundBank.GetCue("Music_" + k);
								music[k].Play();
								music[k].SetVariable("Volume", musicFade[k] * ambientVolume * num4);
								continue;
							}
							if (music[k].IsPaused && base.IsActive)
							{
								music[k].Resume();
								continue;
							}
							musicFade[k] += 0.005f;
							if (musicFade[k] > 1f)
							{
								musicFade[k] = 1f;
							}
							music[k].SetVariable("Volume", musicFade[k] * ambientVolume * num4);
						}
						else if (music[k].IsPlaying)
						{
							if (musicFade[k] > 0f)
							{
								musicFade[k] -= 0.005f;
							}
							if (musicFade[k] <= 0f)
							{
								musicFade[k] -= 0f;
								music[k].Stop(AudioStopOptions.Immediate);
							}
							else
							{
								music[k].SetVariable("Volume", musicFade[k] * ambientVolume * num4);
							}
						}
						else
						{
							musicFade[k] = 0f;
						}
						continue;
					}
					}
					if (k == curMusic)
					{
						if (!music[k].IsPlaying && isActive)
						{
							if (_musicReplayDelay == 0)
							{
								if (SettingMusicReplayDelayEnabled)
								{
									_musicReplayDelay = rand.Next(14400, 21601);
								}
								music[k].Stop(AudioStopOptions.Immediate);
								music[k] = soundBank.GetCue("Music_" + k);
								music[k].SetVariable("Volume", num2);
								music[k].Play();
							}
						}
						else
						{
							musicFade[k] += 0.005f;
							if (musicFade[k] > 1f)
							{
								musicFade[k] = 1f;
							}
							music[k].SetVariable("Volume", num2);
						}
					}
					else if (music[k].IsPlaying || !music[k].IsStopped)
					{
						if (musicFade[curMusic] > 0.25f)
						{
							musicFade[k] -= 0.005f;
						}
						else if (curMusic == 0)
						{
							musicFade[k] = 0f;
						}
						if (musicFade[k] <= 0f)
						{
							musicFade[k] = 0f;
							music[k].SetVariable("Volume", 0f);
							music[k].Stop(AudioStopOptions.Immediate);
						}
						else
						{
							music[k].SetVariable("Volume", num2);
						}
					}
					else
					{
						musicFade[k] = 0f;
					}
				}
				if (musicError > 0)
				{
					musicError--;
				}
			}
			catch
			{
				musicError++;
				if (musicError >= 100)
				{
					musicError = 0;
					musicVolume = 0f;
				}
			}
		}

		private void UpdateAudio_DecideOnTOWMusic()
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			if (!showSplash)
			{
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
				int num = 5000;
				for (int i = 0; i < 200; i++)
				{
					if (!npc[i].active)
					{
						continue;
					}
					num = 5000;
					int num2 = 0;
					switch (npc[i].type)
					{
					case 13:
					case 14:
					case 15:
						num2 = 1;
						break;
					case 26:
					case 27:
					case 28:
					case 29:
					case 111:
					case 471:
						num2 = 11;
						break;
					case 113:
					case 114:
						num2 = 3;
						break;
					case 125:
					case 126:
						num2 = 2;
						break;
					case 127:
					case 134:
						num2 = 2;
						break;
					case 143:
					case 144:
					case 145:
						num2 = 11;
						break;
					case 266:
						num2 = 1;
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 491:
						num2 = 8;
						break;
					case 245:
						num2 = 2;
						break;
					case 222:
						num2 = 1;
						break;
					case 262:
					case 263:
					case 264:
						num2 = 6;
						break;
					case 381:
					case 382:
					case 383:
					case 385:
					case 386:
					case 388:
					case 389:
					case 390:
					case 391:
					case 395:
					case 520:
						num2 = 9;
						break;
					case 398:
						num2 = 7;
						break;
					case 422:
					case 493:
					case 507:
					case 517:
						num2 = 10;
						break;
					case 439:
						num2 = 2;
						break;
					case 438:
						if (npc[i].ai[1] == 1f)
						{
							num = 1600;
							num2 = 2;
						}
						break;
					case 657:
						num2 = 13;
						break;
					case 636:
						num2 = 14;
						break;
					case 370:
						num2 = 15;
						break;
					}
					if (NPCID.Sets.BelongsToInvasionOldOnesArmy[npc[i].type])
					{
						num2 = 12;
					}
					if (num2 == 0 && npc[i].boss)
					{
						num2 = 1;
					}
					if (num2 == 0)
					{
						continue;
					}
					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(npc[i].position.X + (float)(npc[i].width / 2)) - num, (int)(npc[i].position.Y + (float)(npc[i].height / 2)) - num, num * 2, num * 2);
					if (rectangle.Intersects(value))
					{
						switch (num2)
						{
						case 1:
							flag = true;
							break;
						case 2:
							flag2 = true;
							break;
						case 3:
							flag3 = true;
							break;
						case 4:
							flag4 = true;
							break;
						case 5:
							flag5 = true;
							break;
						case 6:
							flag6 = true;
							break;
						case 7:
							flag7 = true;
							break;
						case 8:
							flag8 = true;
							break;
						case 9:
							flag9 = true;
							break;
						case 10:
							flag10 = true;
							break;
						case 11:
							flag11 = true;
							break;
						case 12:
							flag12 = true;
							break;
						case 13:
							flag13 = true;
							break;
						case 14:
							flag14 = true;
							break;
						case 15:
							flag15 = true;
							break;
						}
						break;
					}
				}
			}
			_ = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
			if (musicVolume == 0f)
			{
				newMusic = 0;
				return;
			}
			float num3 = maxTilesX / 4200;
			num3 *= num3;
			float num4 = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num3)) / (worldSurface / 5.0));
			if (flag7)
			{
				newMusic = 84;
			}
			else if (flag9)
			{
				newMusic = 82;
			}
			else if (flag10)
			{
				newMusic = 83;
			}
			else if (flag6)
			{
				newMusic = 85;
			}
			else if (flag14)
			{
				newMusic = 80;
			}
			else if (flag15)
			{
				newMusic = 80;
			}
			else if (flag2)
			{
				newMusic = 80;
			}
			else if (flag)
			{
				newMusic = 81;
			}
			else if (flag3)
			{
				newMusic = 87;
			}
			else if (flag4)
			{
				newMusic = 81;
			}
			else if (flag5)
			{
				newMusic = 81;
			}
			else if (flag13)
			{
				newMusic = 80;
			}
			else if (flag8)
			{
				newMusic = 82;
			}
			else if (flag11)
			{
				newMusic = 82;
			}
			else if (flag12)
			{
				newMusic = 82;
			}
			else if (eclipse && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 79;
			}
			else if (player[myPlayer].ZoneSandstorm)
			{
				newMusic = 66;
			}
			else if (player[myPlayer].position.Y > (float)(UnderworldLayer * 16))
			{
				newMusic = 71;
			}
			else if (num4 < 1f)
			{
				newMusic = 70;
			}
			else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
			{
				newMusic = 69;
			}
			else if (player[myPlayer].ZoneDungeon)
			{
				newMusic = 69;
			}
			else if ((bgStyle == 9 && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2)) || undergroundBackground == 2)
			{
				newMusic = 68;
			}
			else if (player[myPlayer].ZoneCorrupt)
			{
				if (player[myPlayer].ZoneCrimson && SceneMetrics.BloodTileCount > SceneMetrics.EvilTileCount)
				{
					if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
					{
						newMusic = 76;
					}
					else
					{
						newMusic = 75;
					}
				}
				else if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 74;
				}
				else
				{
					newMusic = 73;
				}
			}
			else if (player[myPlayer].ZoneCrimson)
			{
				if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 76;
				}
				else
				{
					newMusic = 75;
				}
			}
			else if (player[myPlayer].ZoneMeteor)
			{
				newMusic = 79;
			}
			else if (player[myPlayer].ZoneGraveyard)
			{
				newMusic = 79;
			}
			else if (player[myPlayer].ZoneJungle)
			{
				newMusic = 86;
			}
			else if (player[myPlayer].ZoneSnow)
			{
				if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 77;
				}
				else
				{
					newMusic = 72;
				}
			}
			else if ((double)player[myPlayer].position.Y >= worldSurface * 16.0 + (double)(screenHeight / 2) && !WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenWidth / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16))
			{
				if (player[myPlayer].ZoneHallow)
				{
					newMusic = 78;
				}
				else if (player[myPlayer].ZoneUndergroundDesert)
				{
					newMusic = 66;
				}
				else
				{
					newMusic = 65;
				}
			}
			else if (dayTime && player[myPlayer].ZoneHallow)
			{
				if (cloudAlpha > 0f && !gameMenu)
				{
					newMusic = 62;
				}
				else
				{
					newMusic = 88;
				}
			}
			else if (_shouldUseStormMusic)
			{
				if (bloodMoon)
				{
					newMusic = 79;
				}
				else
				{
					newMusic = 62;
				}
			}
			else if (WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenWidth / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16))
			{
				if (bloodMoon)
				{
					newMusic = 79;
				}
				else
				{
					newMusic = 67;
				}
			}
			else if (player[myPlayer].ZoneDesert)
			{
				newMusic = 66;
			}
			else if (dayTime)
			{
				if (cloudAlpha > 0f && !gameMenu)
				{
					newMusic = 62;
				}
				else
				{
					newMusic = 63;
				}
			}
			else if (!dayTime)
			{
				if (bloodMoon)
				{
					newMusic = 79;
				}
				else if (cloudAlpha > 0f && !gameMenu)
				{
					newMusic = 64;
				}
				else
				{
					newMusic = 64;
				}
			}
			if ((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && pumpkinMoon)
			{
				newMusic = 82;
			}
			if ((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && snowMoon)
			{
				newMusic = 82;
			}
		}

		private void UpdateAudio_DecideOnNewMusic()
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = LocalPlayer.townNPCs > 2f;
			bool flag17 = slimeRain;
			float num = 0f;
			for (int i = 0; i < 89; i++)
			{
				if (musicFade[i] > num)
				{
					num = musicFade[i];
					if (num == 1f)
					{
						lastMusicPlayed = i;
					}
				}
			}
			if (lastMusicPlayed == 50)
			{
				musicNoCrossFade[51] = true;
			}
			if (!showSplash)
			{
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
				int num2 = 5000;
				for (int j = 0; j < 200; j++)
				{
					if (!npc[j].active)
					{
						continue;
					}
					num2 = 5000;
					int num3 = 0;
					switch (npc[j].type)
					{
					case 13:
					case 14:
					case 15:
						num3 = 1;
						break;
					case 26:
					case 27:
					case 28:
					case 29:
					case 111:
					case 471:
						num3 = 11;
						break;
					case 113:
					case 114:
					case 125:
					case 126:
						num3 = 2;
						break;
					case 134:
					case 143:
					case 144:
					case 145:
					case 266:
						num3 = 3;
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 491:
						num3 = 8;
						break;
					case 245:
						num3 = 4;
						break;
					case 222:
						num3 = 5;
						break;
					case 262:
					case 263:
					case 264:
						num3 = 6;
						break;
					case 381:
					case 382:
					case 383:
					case 385:
					case 386:
					case 388:
					case 389:
					case 390:
					case 391:
					case 395:
					case 520:
						num3 = 9;
						break;
					case 398:
						num3 = 7;
						break;
					case 422:
					case 493:
					case 507:
					case 517:
						num3 = 10;
						break;
					case 439:
						num3 = 4;
						break;
					case 438:
						if (npc[j].ai[1] == 1f)
						{
							num2 = 1600;
							num3 = 4;
						}
						break;
					case 657:
						num3 = 13;
						break;
					case 636:
						num3 = 14;
						break;
					case 370:
						num3 = 15;
						break;
					}
					if (NPCID.Sets.BelongsToInvasionOldOnesArmy[npc[j].type])
					{
						num3 = 12;
					}
					if (num3 == 0 && npc[j].boss)
					{
						num3 = 1;
					}
					if (num3 == 0)
					{
						continue;
					}
					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(npc[j].position.X + (float)(npc[j].width / 2)) - num2, (int)(npc[j].position.Y + (float)(npc[j].height / 2)) - num2, num2 * 2, num2 * 2);
					if (rectangle.Intersects(value))
					{
						switch (num3)
						{
						case 1:
							flag = true;
							break;
						case 2:
							flag2 = true;
							break;
						case 3:
							flag3 = true;
							break;
						case 4:
							flag4 = true;
							break;
						case 5:
							flag5 = true;
							break;
						case 6:
							flag6 = true;
							break;
						case 7:
							flag7 = true;
							break;
						case 8:
							flag8 = true;
							break;
						case 9:
							flag9 = true;
							break;
						case 10:
							flag10 = true;
							break;
						case 11:
							flag11 = true;
							break;
						case 12:
							flag12 = true;
							break;
						case 13:
							flag13 = true;
							break;
						case 14:
							flag14 = true;
							break;
						case 15:
							flag15 = true;
							break;
						}
						break;
					}
				}
			}
			_ = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
			if (musicVolume == 0f)
			{
				newMusic = 0;
				return;
			}
			if (gameMenu)
			{
				if (netMode != 2)
				{
					if (WorldGen.drunkWorldGen)
					{
						newMusic = 60;
					}
					else if (playOldTile)
					{
						newMusic = 6;
					}
					else if (!_isAsyncLoadComplete)
					{
						newMusic = 50;
					}
					else if (!music[50].IsPlaying)
					{
						newMusic = 51;
						if (musicNoCrossFade[51])
						{
							musicFade[51] = 1f;
						}
					}
				}
				else
				{
					newMusic = 0;
				}
				return;
			}
			float num4 = maxTilesX / 4200;
			num4 *= num4;
			float num5 = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num4)) / (worldSurface / 5.0));
			if (player[myPlayer].happyFunTorchTime)
			{
				newMusic = 13;
			}
			else if (flag7)
			{
				newMusic = 38;
			}
			else if (flag9)
			{
				newMusic = 37;
			}
			else if (flag10)
			{
				newMusic = 34;
			}
			else if (flag6)
			{
				newMusic = 24;
			}
			else if (flag14)
			{
				newMusic = 57;
			}
			else if (flag15)
			{
				newMusic = 58;
			}
			else if (flag2)
			{
				newMusic = 12;
			}
			else if (flag)
			{
				newMusic = 5;
			}
			else if (flag3)
			{
				newMusic = 13;
			}
			else if (flag4)
			{
				newMusic = 17;
			}
			else if (flag5)
			{
				newMusic = 25;
			}
			else if (flag13)
			{
				newMusic = 56;
			}
			else if (flag8)
			{
				newMusic = 35;
			}
			else if (flag11)
			{
				newMusic = 39;
			}
			else if (flag12)
			{
				newMusic = 41;
			}
			else if (eclipse && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 27;
			}
			else if (flag17 && !player[myPlayer].ZoneGraveyard && (!bloodMoon || dayTime) && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
			{
				newMusic = 48;
			}
			else if (flag16 && dayTime && ((cloudAlpha == 0f && !_shouldUseWindyDayMusic) || (double)player[myPlayer].position.Y >= worldSurface * 16.0 + (double)(screenHeight / 2)) && !player[myPlayer].ZoneGraveyard)
			{
				newMusic = 46;
			}
			else if (flag16 && !dayTime && ((!bloodMoon && cloudAlpha == 0f) || (double)player[myPlayer].position.Y >= worldSurface * 16.0 + (double)(screenHeight / 2)) && !player[myPlayer].ZoneGraveyard)
			{
				newMusic = 47;
			}
			else if (player[myPlayer].ZoneSandstorm)
			{
				newMusic = 40;
			}
			else if (player[myPlayer].position.Y > (float)(UnderworldLayer * 16))
			{
				newMusic = 36;
			}
			else if (num5 < 1f)
			{
				newMusic = (dayTime ? 42 : 15);
			}
			else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
			{
				newMusic = 26;
			}
			else if (player[myPlayer].ZoneDungeon)
			{
				newMusic = 23;
			}
			else if ((bgStyle == 9 && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2)) || undergroundBackground == 2)
			{
				newMusic = 29;
			}
			else if (player[myPlayer].ZoneCorrupt)
			{
				if (player[myPlayer].ZoneCrimson && SceneMetrics.BloodTileCount > SceneMetrics.EvilTileCount)
				{
					if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
					{
						newMusic = 33;
					}
					else
					{
						newMusic = 16;
					}
				}
				else if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 10;
				}
				else
				{
					newMusic = 8;
				}
			}
			else if (player[myPlayer].ZoneCrimson)
			{
				if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 33;
				}
				else
				{
					newMusic = 16;
				}
			}
			else if (player[myPlayer].ZoneMeteor)
			{
				newMusic = 2;
			}
			else if (player[myPlayer].ZoneGraveyard)
			{
				newMusic = 53;
			}
			else if (player[myPlayer].ZoneJungle)
			{
				if ((double)player[myPlayer].position.Y > rockLayer * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 54;
				}
				else if (newMusic == 54 && (double)player[myPlayer].position.Y > (rockLayer - 50.0) * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 54;
				}
				else if (_shouldUseStormMusic && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 52;
				}
				else if (dayTime)
				{
					newMusic = 7;
				}
				else
				{
					newMusic = 55;
				}
			}
			else if (player[myPlayer].ZoneSnow)
			{
				if ((double)player[myPlayer].position.Y > worldSurface * 16.0 + (double)(screenHeight / 2))
				{
					newMusic = 20;
				}
				else
				{
					newMusic = 14;
				}
			}
			else if ((double)player[myPlayer].position.Y >= worldSurface * 16.0 + (double)(screenHeight / 2) && !WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenWidth / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16))
			{
				if (player[myPlayer].ZoneHallow)
				{
					newMusic = 11;
				}
				else if (player[myPlayer].ZoneUndergroundDesert)
				{
					if ((double)player[myPlayer].position.Y >= worldSurface * 16.0 + (double)(screenHeight / 2))
					{
						newMusic = 61;
					}
					else
					{
						newMusic = 21;
					}
				}
				else
				{
					if (ugMusic == 0)
					{
						ugMusic = 4;
					}
					if (!music[4].IsPlaying && !music[31].IsPlaying)
					{
						if (musicFade[4] == 1f)
						{
							musicFade[31] = 1f;
						}
						if (musicFade[31] == 1f)
						{
							musicFade[4] = 1f;
						}
						switch (rand.Next(2))
						{
						case 0:
							ugMusic = 4;
							musicFade[31] = 0f;
							break;
						case 1:
							ugMusic = 31;
							musicFade[4] = 0f;
							break;
						}
					}
					newMusic = ugMusic;
				}
			}
			else if (dayTime && player[myPlayer].ZoneHallow)
			{
				if (_shouldUseStormMusic)
				{
					newMusic = 52;
				}
				else if (cloudAlpha > 0f && !gameMenu)
				{
					newMusic = 19;
				}
				else if (_shouldUseWindyDayMusic)
				{
					newMusic = 44;
				}
				else
				{
					newMusic = 9;
				}
			}
			else if (_shouldUseStormMusic)
			{
				if (bloodMoon)
				{
					newMusic = 2;
				}
				else
				{
					newMusic = 52;
				}
			}
			else if (WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenWidth / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16))
			{
				if (bloodMoon)
				{
					newMusic = 2;
				}
				else if (flag16)
				{
					if (dayTime)
					{
						newMusic = 46;
					}
					else
					{
						newMusic = 47;
					}
				}
				else
				{
					newMusic = (dayTime ? 22 : 43);
				}
			}
			else if (player[myPlayer].ZoneDesert)
			{
				if ((double)player[myPlayer].position.Y >= worldSurface * 16.0)
				{
					int num6 = (int)(player[myPlayer].Center.X / 16f);
					int num7 = (int)(player[myPlayer].Center.Y / 16f);
					if (WorldGen.InWorld(num6, num7) && (WallID.Sets.Conversion.Sandstone[tile[num6, num7].wall] || WallID.Sets.Conversion.HardenedSand[tile[num6, num7].wall]))
					{
						newMusic = 61;
					}
					else
					{
						newMusic = 21;
					}
				}
				else
				{
					newMusic = 21;
				}
			}
			else if (dayTime)
			{
				if (cloudAlpha > 0f && !gameMenu)
				{
					if (time < 10800.0)
					{
						newMusic = 59;
					}
					else
					{
						newMusic = 19;
					}
				}
				else
				{
					if (dayMusic == 0)
					{
						dayMusic = 1;
					}
					if (!music[1].IsPlaying && !music[18].IsPlaying)
					{
						if (rand.Next(2) == 0)
						{
							dayMusic = 1;
						}
						else
						{
							dayMusic = 18;
						}
					}
					newMusic = dayMusic;
					if (_shouldUseWindyDayMusic)
					{
						newMusic = 44;
					}
				}
			}
			else if (!dayTime)
			{
				if (bloodMoon)
				{
					newMusic = 2;
				}
				else if (cloudAlpha > 0f && !gameMenu)
				{
					newMusic = 19;
				}
				else
				{
					newMusic = 3;
				}
			}
			if ((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && pumpkinMoon)
			{
				newMusic = 30;
			}
			if ((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && snowMoon)
			{
				newMusic = 32;
			}
		}

		private void UpdateWindyDayState()
		{
			if (cloudAlpha == 0f)
			{
				_shouldUseStormMusic = false;
				if (time < 10800.0 || time > 43200.0 || !dayTime)
				{
					_shouldUseWindyDayMusic = false;
					return;
				}
				if (Math.Abs(windSpeedTarget) < _minWind)
				{
					_shouldUseWindyDayMusic = false;
				}
				if (Math.Abs(windSpeedTarget) >= _maxWind)
				{
					_shouldUseWindyDayMusic = true;
				}
			}
			else
			{
				if (cloudAlpha < _minRain || Math.Abs(windSpeedTarget) < _minWind)
				{
					_shouldUseStormMusic = false;
				}
				else if (cloudAlpha >= _maxRain && Math.Abs(windSpeedTarget) >= _maxWind)
				{
					_shouldUseStormMusic = true;
				}
				_shouldUseWindyDayMusic = false;
			}
		}

		public static void snowing()
		{
			Vector2 scaledSize = Camera.ScaledSize;
			Vector2 scaledPosition = Camera.ScaledPosition;
			if (gamePaused || SceneMetrics.SnowTileCount <= 0 || !((double)player[myPlayer].position.Y < worldSurface * 16.0))
			{
				return;
			}
			float num = (float)SceneMetrics.SnowTileCount / (float)SceneMetrics.SnowTileMax;
			num *= num;
			num *= num;
			float num2 = Camera.ScaledSize.X / (float)maxScreenW;
			int num3 = (int)(500f * num2);
			num3 = (int)((float)num3 * (1f + 2f * cloudAlpha));
			float num4 = 1f + 50f * cloudAlpha;
			for (int i = 0; (float)i < num4; i++)
			{
				try
				{
					if (!((float)snowDust < (float)num3 * (gfxQuality / 2f + 0.5f) + (float)num3 * 0.1f))
					{
						return;
					}
					if (!(rand.NextFloat() < num))
					{
						continue;
					}
					int num5 = rand.Next((int)scaledSize.X + 1500) - 750;
					int num6 = (int)scaledPosition.Y - rand.Next(50);
					if (player[myPlayer].velocity.Y > 0f)
					{
						num6 -= (int)player[myPlayer].velocity.Y;
					}
					if (rand.Next(5) == 0)
					{
						num5 = rand.Next(500) - 500;
					}
					else if (rand.Next(5) == 0)
					{
						num5 = rand.Next(500) + (int)scaledSize.X;
					}
					if (num5 < 0 || (float)num5 > scaledSize.X)
					{
						num6 += rand.Next((int)((double)scaledSize.Y * 0.8)) + (int)((double)scaledSize.Y * 0.1);
					}
					num5 += (int)scaledPosition.X;
					int num7 = num5 / 16;
					int num8 = num6 / 16;
					if (WorldGen.InWorld(num7, num8) && tile[num7, num8] != null && !tile[num7, num8].nactive() && tile[num7, num8].wall == 0)
					{
						int num9 = Dust.NewDust(new Vector2(num5, num6), 10, 10, 76);
						dust[num9].scale += cloudAlpha * 0.2f;
						dust[num9].velocity.Y = 3f + (float)rand.Next(30) * 0.1f;
						dust[num9].velocity.Y *= dust[num9].scale;
						if (!raining)
						{
							dust[num9].velocity.X = windSpeedCurrent + (float)rand.Next(-10, 10) * 0.1f;
							dust[num9].velocity.X += windSpeedCurrent * 15f;
						}
						else
						{
							dust[num9].velocity.X = (float)Math.Sqrt(Math.Abs(windSpeedCurrent)) * (float)Math.Sign(windSpeedCurrent) * (cloudAlpha + 0.5f) * 10f + rand.NextFloat() * 0.2f - 0.1f;
							dust[num9].velocity.Y *= 0.5f;
						}
						dust[num9].velocity.Y *= 1f + 0.3f * cloudAlpha;
						dust[num9].scale += cloudAlpha * 0.2f;
						dust[num9].velocity *= 1f + cloudAlpha * 0.5f;
					}
					continue;
				}
				catch
				{
				}
			}
		}

		public static void checkXMas()
		{
			DateTime now = DateTime.Now;
			int day = now.Day;
			int month = now.Month;
			if (day >= 15 && month == 12)
			{
				xMas = true;
			}
			else
			{
				xMas = false;
			}
			if (forceXMasForToday)
			{
				xMas = true;
			}
		}

		public static void checkHalloween()
		{
			DateTime now = DateTime.Now;
			int day = now.Day;
			int month = now.Month;
			if (day >= 10 && month == 10)
			{
				halloween = true;
			}
			else if (day <= 1 && month == 11)
			{
				halloween = true;
			}
			else
			{
				halloween = false;
			}
			if (forceHalloweenForToday)
			{
				halloween = true;
			}
		}

		public void updateCloudLayer()
		{
			if (netMode == 1 || (netMode == 0 && gameMenu))
			{
				return;
			}
			int num = 86400;
			int num2 = num / 24;
			float num3 = Math.Max(1f, 1f + 4f * cloudAlpha);
			if (cloudBGActive > 0f)
			{
				if (cloudBGActive > 1f)
				{
					cloudBGActive -= (float)dayRate / num3;
				}
				if (cloudBGActive < 1f)
				{
					cloudBGActive = 1f;
				}
				if (cloudBGActive == 1f && rand.Next((int)((float)(num2 * 2 / Math.Max(dayRate, 1)) * num3)) == 0)
				{
					cloudBGActive = -rand.Next(num2 * 4, num * 4);
					if (netMode == 2)
					{
						NetMessage.SendData(7);
					}
				}
				return;
			}
			if (cloudBGActive < 0f)
			{
				cloudBGActive += (float)dayRate * num3;
				if (raining)
				{
					cloudBGActive += (float)(2 * dayRate) * num3;
				}
			}
			if (cloudBGActive > 0f)
			{
				cloudBGActive = 0f;
			}
			if (cloudBGActive == 0f && rand.Next((int)((float)(num2 * 12 / ((dayRate == 0) ? 1 : dayRate)) / num3)) == 0)
			{
				cloudBGActive = rand.Next(num2 * 3, num * 2);
				if (netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			else if (IsItStorming)
			{
				cloudBGActive = rand.Next(num2, num2 * 4);
				if (netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
		}

		public static void TeleportEffect(Microsoft.Xna.Framework.Rectangle effectRect, int Style, int extraInfo = 0, float dustCountMult = 1f, TeleportationSide side = TeleportationSide.Entry, Vector2 otherPosition = default(Vector2))
		{
			switch (Style)
			{
			case 0:
			{
				SoundEngine.PlaySound(SoundID.Item6, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				int num10 = effectRect.Width * effectRect.Height / 5;
				num10 = (int)((float)num10 * dustCountMult);
				for (int num11 = 0; num11 < num10; num11++)
				{
					int num12 = Dust.NewDust(new Vector2(effectRect.X, effectRect.Y), effectRect.Width, effectRect.Height, 159);
					Main.dust[num12].scale = (float)rand.Next(20, 70) * 0.01f;
					if (num11 < 10)
					{
						Main.dust[num12].scale += 0.25f;
					}
					if (num11 < 5)
					{
						Main.dust[num12].scale += 0.25f;
					}
				}
				break;
			}
			case 1:
			{
				SoundEngine.PlaySound(SoundID.Item8, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				int num3 = effectRect.Width * effectRect.Height / 5;
				num3 = (int)((float)num3 * dustCountMult);
				for (int k = 0; k < num3; k++)
				{
					int num4 = Dust.NewDust(new Vector2(effectRect.X, effectRect.Y), effectRect.Width, effectRect.Height, 164);
					Main.dust[num4].scale = (float)rand.Next(20, 70) * 0.01f;
					if (k < 10)
					{
						Main.dust[num4].scale += 0.25f;
					}
					if (k < 5)
					{
						Main.dust[num4].scale += 0.25f;
					}
				}
				break;
			}
			case 2:
			{
				int num6 = (int)(50f * dustCountMult);
				for (int m = 0; m < num6; m++)
				{
					Main.dust[Dust.NewDust(new Vector2(effectRect.X, effectRect.Y), effectRect.Width, effectRect.Height, 58, 0f, 0f, 150, Microsoft.Xna.Framework.Color.GhostWhite, 1.2f)].velocity *= 0.5f;
				}
				break;
			}
			case 3:
			{
				SoundEngine.PlaySound(SoundID.Item6, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				int num13 = (int)(50f * dustCountMult);
				for (int num14 = 0; num14 < num13; num14++)
				{
					int num15 = Dust.NewDust(new Vector2(effectRect.X, effectRect.Y), effectRect.Width, effectRect.Height, 180);
					Main.dust[num15].noGravity = true;
					for (int num16 = 0; num16 < 5; num16++)
					{
						if (rand.Next(3) == 0)
						{
							Main.dust[num15].velocity *= 0.75f;
						}
					}
					if (rand.Next(3) == 0)
					{
						Main.dust[num15].velocity *= 2f;
						Main.dust[num15].scale *= 1.2f;
					}
					if (rand.Next(3) == 0)
					{
						Main.dust[num15].velocity *= 2f;
						Main.dust[num15].scale *= 1.2f;
					}
					if (rand.Next(2) == 0)
					{
						Main.dust[num15].fadeIn = (float)rand.Next(75, 100) * 0.01f;
						Main.dust[num15].scale = (float)rand.Next(25, 75) * 0.01f;
					}
					Main.dust[num15].scale *= 0.8f;
				}
				break;
			}
			case 4:
			{
				SoundEngine.PlaySound(SoundID.Item8, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2);
				int num7 = effectRect.Width * effectRect.Height / 5;
				num7 = (int)((float)num7 * dustCountMult);
				for (int n = 0; n < num7; n++)
				{
					Dust obj3 = Main.dust[Dust.NewDust(effectRect.TopLeft(), effectRect.Width, effectRect.Height, 263)];
					obj3.color = PortalHelper.GetPortalColor(extraInfo);
					obj3.noLight = true;
					obj3.noGravity = true;
					obj3.scale = 1.2f;
					obj3.fadeIn = 0.4f;
					obj3.color.A = byte.MaxValue;
				}
				break;
			}
			case 5:
			{
				Vector2 position = effectRect.TopLeft();
				int num2 = (int)(100f * dustCountMult);
				for (int j = 0; j < num2; j++)
				{
					Dust obj2 = Dust.NewDustDirect(position, effectRect.Width, effectRect.Height + 24, Dust.dustWater());
					obj2.velocity.Y *= 0f;
					obj2.velocity.Y -= 3.5f;
					obj2.velocity.X *= 1.5f;
					obj2.scale = 0.8f;
					obj2.alpha = 130;
					obj2.noGravity = true;
					obj2.fadeIn = 1.2f;
				}
				SoundEngine.PlaySound(19, effectRect.Center.ToVector2(), 0);
				break;
			}
			case 7:
			{
				Vector2 position2 = effectRect.TopLeft();
				int num8 = (int)(50f * dustCountMult);
				for (int num9 = 0; num9 < num8; num9++)
				{
					Dust obj4 = Dust.NewDustDirect(position2, effectRect.Width, effectRect.Height + 24, 35);
					obj4.velocity.Y *= 0f;
					obj4.velocity.Y -= 3.5f;
					obj4.velocity.X *= 1.5f;
					obj4.scale = 0.8f;
					obj4.alpha = 130;
					obj4.noGravity = true;
					obj4.fadeIn = 1.2f;
				}
				SoundEngine.PlaySound(SoundID.Item8, effectRect.Center.ToVector2());
				break;
			}
			case 9:
			{
				effectRect.Inflate(15, 15);
				int num5 = (int)(100f * dustCountMult);
				for (int l = 0; l < num5; l++)
				{
					TeleportPylonsSystem.SpawnInWorldDust(extraInfo, effectRect);
				}
				SoundEngine.PlaySound(SoundID.Item6, effectRect.Center.X, effectRect.Center.Y);
				break;
			}
			case 10:
			{
				effectRect.Inflate(15, 15);
				int num = (int)(60f * dustCountMult);
				Vector2 value = otherPosition - effectRect.TopLeft();
				for (int i = 0; i < num; i++)
				{
					float fadeIn = 0.4f + rand.NextFloat();
					float scale = 0.4f + rand.NextFloat();
					Microsoft.Xna.Framework.Color newColor = hslToRgb(0.66f + rand.NextFloat() * 0.24f, 1f, 0.5f);
					Dust dust = Dust.NewDustDirect(effectRect.TopLeft(), effectRect.Width, effectRect.Height, 267, 0f, 0f, 127, newColor);
					dust.scale = (float)rand.Next(20, 70) * 0.01f;
					if (i < 10)
					{
						dust.scale += 0.25f;
					}
					if (i < 5)
					{
						dust.scale += 0.25f;
					}
					if ((float)i < (float)num * 0.8f)
					{
						dust.velocity += value * 0.1f * rand.NextFloat();
					}
					dust.noGravity = true;
					dust.noLight = true;
					dust.scale = scale;
					dust.fadeIn = fadeIn;
					if (dust.dustIndex != 6000)
					{
						Dust obj = Dust.CloneDust(dust);
						obj.scale *= 0.65f;
						obj.fadeIn *= 0.65f;
						obj.color = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
					}
				}
				SoundEngine.PlaySound(SoundID.Item8, effectRect.Center.X, effectRect.Center.Y);
				break;
			}
			}
		}

		public static void Ambience()
		{
			ambientCounter++;
			if (ambientCounter < 15)
			{
				return;
			}
			ambientCounter = 0;
			Microsoft.Xna.Framework.Point point = LocalPlayer.Center.ToPoint();
			if (ambientWaterfallStrength > 0f)
			{
				SoundEngine.PlaySound(34, (int)ambientWaterfallX, (int)ambientWaterfallY, (int)ambientWaterfallStrength);
				_isWaterfallMusicPlaying = true;
			}
			else
			{
				if (_isWaterfallMusicPlaying)
				{
					SoundEngine.PlaySound(34, point.X, point.Y, 0);
				}
				_isWaterfallMusicPlaying = false;
			}
			float num = Math.Abs(ambientLavaX - (screenPosition.X + (float)(screenWidth / 2))) + Math.Abs(ambientLavaY - (screenPosition.Y + (float)(screenHeight / 2)));
			float num2 = Math.Abs(ambientLavafallX - (screenPosition.X + (float)(screenWidth / 2))) + Math.Abs(ambientLavafallY - (screenPosition.Y + (float)(screenHeight / 2)));
			float num3 = ambientLavaX;
			float num4 = ambientLavaY;
			if (num2 < num)
			{
				num3 = ambientLavafallX;
				num4 = ambientLavafallY;
			}
			float num5 = ambientLavafallStrength + ambientLavaStrength;
			if (ambientLavafallStrength > 0f)
			{
				SoundEngine.PlaySound(35, (int)num3, (int)num4, (int)num5);
				_isLavafallMusicPlaying = true;
				return;
			}
			if (_isLavafallMusicPlaying)
			{
				SoundEngine.PlaySound(35, point.X, point.Y, 0);
			}
			_isLavafallMusicPlaying = false;
		}

		public static void AnimateTiles_CritterCages()
		{
			if (!critterCage)
			{
				return;
			}
			for (int i = 0; i < cageFrames; i++)
			{
				if (bunnyCageFrame[i] == 0)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						int num = rand.Next(7);
						if (num == 0)
						{
							bunnyCageFrame[i] = 4;
						}
						else if (num <= 2)
						{
							bunnyCageFrame[i] = 2;
						}
						else
						{
							bunnyCageFrame[i] = 1;
						}
					}
					bunnyCageFrameCounter[i] = 0;
				}
				else if (bunnyCageFrame[i] == 1)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] >= 10)
					{
						bunnyCageFrameCounter[i] = 0;
						bunnyCageFrame[i] = 0;
					}
				}
				else if (bunnyCageFrame[i] >= 2 && bunnyCageFrame[i] <= 3)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] >= 10)
					{
						bunnyCageFrameCounter[i] = 0;
						bunnyCageFrame[i]++;
					}
					if (bunnyCageFrame[i] > 3)
					{
						bunnyCageFrame[i] = 0;
					}
				}
				else if (bunnyCageFrame[i] >= 4 && bunnyCageFrame[i] <= 10)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] >= 5)
					{
						bunnyCageFrameCounter[i] = 0;
						bunnyCageFrame[i]++;
					}
				}
				else if (bunnyCageFrame[i] == 11)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(7) == 0)
						{
							bunnyCageFrame[i] = 13;
						}
						else
						{
							bunnyCageFrame[i] = 12;
						}
					}
					bunnyCageFrameCounter[i] = 0;
				}
				else if (bunnyCageFrame[i] == 12)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] >= 10)
					{
						bunnyCageFrameCounter[i] = 0;
						bunnyCageFrame[i] = 11;
					}
				}
				else if (bunnyCageFrame[i] >= 13)
				{
					bunnyCageFrameCounter[i]++;
					if (bunnyCageFrameCounter[i] >= 5)
					{
						bunnyCageFrameCounter[i] = 0;
						bunnyCageFrame[i]++;
					}
					if (bunnyCageFrame[i] > 21)
					{
						bunnyCageFrame[i] = 0;
					}
				}
			}
			for (int j = 0; j < cageFrames; j++)
			{
				if (squirrelCageFrame[j] == 0)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						int num = rand.Next(7);
						if (num == 0)
						{
							squirrelCageFrame[j] = 4;
						}
						else if (num <= 2)
						{
							squirrelCageFrame[j] = 2;
						}
						else
						{
							squirrelCageFrame[j] = 1;
						}
					}
					squirrelCageFrameCounter[j] = 0;
				}
				else if (squirrelCageFrame[j] == 1)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] >= 10)
					{
						squirrelCageFrameCounter[j] = 0;
						squirrelCageFrame[j] = 0;
					}
				}
				else if (squirrelCageFrame[j] >= 2 && squirrelCageFrame[j] <= 3)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] >= 5)
					{
						squirrelCageFrameCounter[j] = 0;
						squirrelCageFrame[j]++;
					}
					if (squirrelCageFrame[j] > 3)
					{
						if (rand.Next(5) == 0)
						{
							squirrelCageFrame[j] = 0;
						}
						else
						{
							squirrelCageFrame[j] = 2;
						}
					}
				}
				else if (squirrelCageFrame[j] >= 4 && squirrelCageFrame[j] <= 8)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] >= 5)
					{
						squirrelCageFrameCounter[j] = 0;
						squirrelCageFrame[j]++;
					}
				}
				else if (squirrelCageFrame[j] == 9)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						int num = rand.Next(7);
						if (num == 0)
						{
							squirrelCageFrame[j] = 13;
						}
						else if (num <= 2)
						{
							squirrelCageFrame[j] = 11;
						}
						else
						{
							squirrelCageFrame[j] = 10;
						}
					}
					squirrelCageFrameCounter[j] = 0;
				}
				else if (squirrelCageFrame[j] == 10)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] >= 10)
					{
						squirrelCageFrameCounter[j] = 0;
						squirrelCageFrame[j] = 9;
					}
				}
				else if (squirrelCageFrame[j] == 11 || squirrelCageFrame[j] == 12)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] < 5)
					{
						continue;
					}
					squirrelCageFrame[j]++;
					if (squirrelCageFrame[j] > 12)
					{
						if (rand.Next(5) != 0)
						{
							squirrelCageFrame[j] = 11;
						}
						else
						{
							squirrelCageFrame[j] = 9;
						}
					}
					squirrelCageFrameCounter[j] = 0;
				}
				else if (squirrelCageFrame[j] >= 13)
				{
					squirrelCageFrameCounter[j]++;
					if (squirrelCageFrameCounter[j] >= 5)
					{
						squirrelCageFrameCounter[j] = 0;
						squirrelCageFrame[j]++;
					}
					if (squirrelCageFrame[j] > 17)
					{
						squirrelCageFrame[j] = 0;
					}
				}
			}
			for (int k = 0; k < cageFrames; k++)
			{
				if (squirrelCageFrameOrange[k] == 0)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						int num = rand.Next(7);
						if (num == 0)
						{
							squirrelCageFrameOrange[k] = 4;
						}
						else if (num <= 2)
						{
							squirrelCageFrameOrange[k] = 2;
						}
						else
						{
							squirrelCageFrameOrange[k] = 1;
						}
					}
					squirrelCageFrameCounterOrange[k] = 0;
				}
				else if (squirrelCageFrameOrange[k] == 1)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] >= 10)
					{
						squirrelCageFrameCounterOrange[k] = 0;
						squirrelCageFrameOrange[k] = 0;
					}
				}
				else if (squirrelCageFrameOrange[k] >= 2 && squirrelCageFrameOrange[k] <= 3)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] >= 5)
					{
						squirrelCageFrameCounterOrange[k] = 0;
						squirrelCageFrameOrange[k]++;
					}
					if (squirrelCageFrameOrange[k] > 3)
					{
						if (rand.Next(5) == 0)
						{
							squirrelCageFrameOrange[k] = 0;
						}
						else
						{
							squirrelCageFrameOrange[k] = 2;
						}
					}
				}
				else if (squirrelCageFrameOrange[k] >= 4 && squirrelCageFrameOrange[k] <= 8)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] >= 5)
					{
						squirrelCageFrameCounterOrange[k] = 0;
						squirrelCageFrameOrange[k]++;
					}
				}
				else if (squirrelCageFrameOrange[k] == 9)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] <= rand.Next(30, 900))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						int num = rand.Next(7);
						if (num == 0)
						{
							squirrelCageFrameOrange[k] = 13;
						}
						else if (num <= 2)
						{
							squirrelCageFrameOrange[k] = 11;
						}
						else
						{
							squirrelCageFrameOrange[k] = 10;
						}
					}
					squirrelCageFrameCounterOrange[k] = 0;
				}
				else if (squirrelCageFrameOrange[k] == 10)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] >= 10)
					{
						squirrelCageFrameCounterOrange[k] = 0;
						squirrelCageFrameOrange[k] = 9;
					}
				}
				else if (squirrelCageFrameOrange[k] == 11 || squirrelCageFrameOrange[k] == 12)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] < 5)
					{
						continue;
					}
					squirrelCageFrameOrange[k]++;
					if (squirrelCageFrameOrange[k] > 12)
					{
						if (rand.Next(5) != 0)
						{
							squirrelCageFrameOrange[k] = 11;
						}
						else
						{
							squirrelCageFrameOrange[k] = 9;
						}
					}
					squirrelCageFrameCounterOrange[k] = 0;
				}
				else if (squirrelCageFrameOrange[k] >= 13)
				{
					squirrelCageFrameCounterOrange[k]++;
					if (squirrelCageFrameCounterOrange[k] >= 5)
					{
						squirrelCageFrameCounterOrange[k] = 0;
						squirrelCageFrameOrange[k]++;
					}
					if (squirrelCageFrameOrange[k] > 17)
					{
						squirrelCageFrameOrange[k] = 0;
					}
				}
			}
			for (int l = 0; l < cageFrames; l++)
			{
				if (mallardCageFrame[l] == 0 || mallardCageFrame[l] == 4)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] <= rand.Next(45, 2700))
					{
						continue;
					}
					if ((mallardCageFrame[l] == 0 && rand.Next(3) != 0) || (mallardCageFrame[l] == 4 && rand.Next(5) == 0))
					{
						if (rand.Next(6) == 0)
						{
							mallardCageFrame[l] = 5;
						}
						else if (rand.Next(3) == 0)
						{
							if (mallardCageFrame[l] == 4)
							{
								mallardCageFrame[l] = 0;
							}
							else
							{
								mallardCageFrame[l] = 4;
							}
						}
						else
						{
							mallardCageFrame[l] = 1;
						}
					}
					mallardCageFrameCounter[l] = 0;
				}
				else if (mallardCageFrame[l] >= 1 && mallardCageFrame[l] <= 3)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] >= 5)
					{
						mallardCageFrameCounter[l] = 0;
						mallardCageFrame[l]++;
					}
					if (mallardCageFrame[l] > 3)
					{
						if (rand.Next(5) == 0)
						{
							mallardCageFrame[l] = 0;
						}
						else
						{
							mallardCageFrame[l] = 1;
						}
					}
				}
				else if (mallardCageFrame[l] >= 5 && mallardCageFrame[l] <= 11)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] >= 5)
					{
						mallardCageFrameCounter[l] = 0;
						mallardCageFrame[l]++;
					}
				}
				else if (mallardCageFrame[l] == 12 || mallardCageFrame[l] == 16)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] <= rand.Next(45, 2700))
					{
						continue;
					}
					if ((mallardCageFrame[l] == 12 && rand.Next(3) != 0) || (mallardCageFrame[l] == 16 && rand.Next(5) == 0))
					{
						if (rand.Next(6) == 0)
						{
							mallardCageFrame[l] = 17;
						}
						else if (rand.Next(3) == 0)
						{
							if (mallardCageFrame[l] == 16)
							{
								mallardCageFrame[l] = 12;
							}
							else
							{
								mallardCageFrame[l] = 16;
							}
						}
						else
						{
							mallardCageFrame[l] = 13;
						}
					}
					mallardCageFrameCounter[l] = 0;
				}
				else if (mallardCageFrame[l] >= 13 && mallardCageFrame[l] <= 15)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] < 5)
					{
						continue;
					}
					mallardCageFrame[l]++;
					if (mallardCageFrame[l] > 15)
					{
						if (rand.Next(5) != 0)
						{
							mallardCageFrame[l] = 12;
						}
						else
						{
							mallardCageFrame[l] = 13;
						}
					}
					mallardCageFrameCounter[l] = 0;
				}
				else if (mallardCageFrame[l] >= 17)
				{
					mallardCageFrameCounter[l]++;
					if (mallardCageFrameCounter[l] >= 5)
					{
						mallardCageFrameCounter[l] = 0;
						mallardCageFrame[l]++;
					}
					if (mallardCageFrame[l] > 23)
					{
						mallardCageFrame[l] = 0;
					}
				}
			}
			for (int m = 0; m < cageFrames; m++)
			{
				if (duckCageFrame[m] == 0 || duckCageFrame[m] == 4)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] <= rand.Next(45, 2700))
					{
						continue;
					}
					if ((duckCageFrame[m] == 0 && rand.Next(3) != 0) || (duckCageFrame[m] == 4 && rand.Next(5) == 0))
					{
						if (rand.Next(6) == 0)
						{
							duckCageFrame[m] = 5;
						}
						else if (rand.Next(3) == 0)
						{
							if (duckCageFrame[m] == 4)
							{
								duckCageFrame[m] = 0;
							}
							else
							{
								duckCageFrame[m] = 4;
							}
						}
						else
						{
							duckCageFrame[m] = 1;
						}
					}
					duckCageFrameCounter[m] = 0;
				}
				else if (duckCageFrame[m] >= 1 && duckCageFrame[m] <= 3)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] >= 5)
					{
						duckCageFrameCounter[m] = 0;
						duckCageFrame[m]++;
					}
					if (duckCageFrame[m] > 3)
					{
						if (rand.Next(5) == 0)
						{
							duckCageFrame[m] = 0;
						}
						else
						{
							duckCageFrame[m] = 1;
						}
					}
				}
				else if (duckCageFrame[m] >= 5 && duckCageFrame[m] <= 11)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] >= 5)
					{
						duckCageFrameCounter[m] = 0;
						duckCageFrame[m]++;
					}
				}
				else if (duckCageFrame[m] == 12 || duckCageFrame[m] == 16)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] <= rand.Next(45, 2700))
					{
						continue;
					}
					if ((duckCageFrame[m] == 12 && rand.Next(3) != 0) || (duckCageFrame[m] == 16 && rand.Next(5) == 0))
					{
						if (rand.Next(6) == 0)
						{
							duckCageFrame[m] = 17;
						}
						else if (rand.Next(3) == 0)
						{
							if (duckCageFrame[m] == 16)
							{
								duckCageFrame[m] = 12;
							}
							else
							{
								duckCageFrame[m] = 16;
							}
						}
						else
						{
							duckCageFrame[m] = 13;
						}
					}
					duckCageFrameCounter[m] = 0;
				}
				else if (duckCageFrame[m] >= 13 && duckCageFrame[m] <= 15)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] < 5)
					{
						continue;
					}
					duckCageFrame[m]++;
					if (duckCageFrame[m] > 15)
					{
						if (rand.Next(5) != 0)
						{
							duckCageFrame[m] = 12;
						}
						else
						{
							duckCageFrame[m] = 13;
						}
					}
					duckCageFrameCounter[m] = 0;
				}
				else if (duckCageFrame[m] >= 17)
				{
					duckCageFrameCounter[m]++;
					if (duckCageFrameCounter[m] >= 5)
					{
						duckCageFrameCounter[m] = 0;
						duckCageFrame[m]++;
					}
					if (duckCageFrame[m] > 23)
					{
						duckCageFrame[m] = 0;
					}
				}
			}
			for (int n = 0; n < cageFrames; n++)
			{
				grebeCageFrameCounter[n]++;
				bool flag = grebeCageFrame[n] == 0 || grebeCageFrame[n] == 7;
				bool num2 = grebeCageFrame[n] == 16 || grebeCageFrame[n] == 20;
				int num3 = 5;
				if (flag)
				{
					num3 = rand.Next(300, 400);
				}
				if (num2)
				{
					num3 = rand.Next(480, 600);
				}
				if (grebeCageFrameCounter[n] < num3)
				{
					continue;
				}
				grebeCageFrameCounter[n] = 0;
				if (grebeCageFrame[n] >= 25 && grebeCageFrame[n] <= 27)
				{
					grebeCageFrame[n]++;
					if (grebeCageFrame[n] > 27)
					{
						if (rand.Next(5) == 0)
						{
							grebeCageFrame[n] = 7;
						}
						else
						{
							grebeCageFrame[n] = 25;
						}
					}
				}
				else if (grebeCageFrame[n] >= 22 && grebeCageFrame[n] <= 24)
				{
					grebeCageFrame[n]++;
					if (grebeCageFrame[n] > 24)
					{
						if (rand.Next(5) == 0)
						{
							grebeCageFrame[n] = 0;
						}
						else
						{
							grebeCageFrame[n] = 22;
						}
					}
				}
				else if (grebeCageFrame[n] == 0 && rand.Next(3) == 0)
				{
					grebeCageFrame[n] = ((rand.Next(2) == 0) ? 22 : 14);
				}
				else if (grebeCageFrame[n] == 7 && rand.Next(3) == 0)
				{
					grebeCageFrame[n] = ((rand.Next(2) == 0) ? 25 : 18);
				}
				else if (grebeCageFrame[n] == 13 || grebeCageFrame[n] == 17)
				{
					grebeCageFrame[n] = 0;
				}
				else if (grebeCageFrame[n] == 21)
				{
					grebeCageFrame[n] = 7;
				}
				else
				{
					grebeCageFrame[n]++;
				}
			}
			for (int num4 = 0; num4 < cageFrames; num4++)
			{
				seagullCageFrameCounter[num4]++;
				bool flag2 = seagullCageFrame[num4] == 0 || seagullCageFrame[num4] == 14;
				bool flag3 = seagullCageFrame[num4] >= 15 && seagullCageFrame[num4] <= 18;
				bool num5 = seagullCageFrame[num4] >= 9 && seagullCageFrame[num4] <= 13;
				int num6 = 6;
				if (flag2)
				{
					num6 = rand.Next(180, 250);
				}
				if (flag3)
				{
					num6 = 66;
				}
				if (num5)
				{
					num6 = 78;
				}
				if (seagullCageFrameCounter[num4] >= num6)
				{
					seagullCageFrameCounter[num4] = 0;
					if (seagullCageFrame[num4] == 0 && rand.Next(3) == 0)
					{
						seagullCageFrame[num4] = 9;
						continue;
					}
					if (seagullCageFrame[num4] == 14)
					{
						if (rand.Next(2) == 0)
						{
							seagullCageFrame[num4] = 15;
						}
						else
						{
							seagullCageFrame[num4] = 19;
						}
						continue;
					}
					if (seagullCageFrame[num4] == 9)
					{
						seagullCageFrame[num4] = 0;
						continue;
					}
					if (seagullCageFrame[num4] == 8 || seagullCageFrame[num4] == 15)
					{
						seagullCageFrame[num4] = 14;
						continue;
					}
					seagullCageFrame[num4]++;
					if (seagullCageFrame[num4] > 26)
					{
						seagullCageFrame[num4] = 0;
					}
				}
				else if (seagullCageFrame[num4] >= 15 && seagullCageFrame[num4] <= 18)
				{
					int num7 = seagullCageFrameCounter[num4] % 66;
					if (num7 > 60)
					{
						seagullCageFrame[num4] = 15;
					}
					else if (num7 > 54)
					{
						seagullCageFrame[num4] = 16;
					}
					else if (num7 > 48)
					{
						seagullCageFrame[num4] = 17;
					}
					else if (num7 > 42)
					{
						seagullCageFrame[num4] = 18;
					}
					else if (num7 > 36)
					{
						seagullCageFrame[num4] = 17;
					}
					else if (num7 > 30)
					{
						seagullCageFrame[num4] = 16;
					}
					else if (num7 > 24)
					{
						seagullCageFrame[num4] = 17;
					}
					else if (num7 > 18)
					{
						seagullCageFrame[num4] = 18;
					}
					else if (num7 > 12)
					{
						seagullCageFrame[num4] = 17;
					}
					else if (num7 > 6)
					{
						seagullCageFrame[num4] = 16;
					}
					else
					{
						seagullCageFrame[num4] = 15;
					}
				}
				else if (seagullCageFrame[num4] >= 9 && seagullCageFrame[num4] <= 13)
				{
					int num8 = seagullCageFrameCounter[num4] % 78;
					if (num8 > 72)
					{
						seagullCageFrame[num4] = 9;
					}
					else if (num8 > 66)
					{
						seagullCageFrame[num4] = 10;
					}
					else if (num8 > 60)
					{
						seagullCageFrame[num4] = 11;
					}
					else if (num8 > 54)
					{
						seagullCageFrame[num4] = 12;
					}
					else if (num8 > 48)
					{
						seagullCageFrame[num4] = 13;
					}
					else if (num8 > 42)
					{
						seagullCageFrame[num4] = 12;
					}
					else if (num8 > 36)
					{
						seagullCageFrame[num4] = 11;
					}
					else if (num8 > 30)
					{
						seagullCageFrame[num4] = 12;
					}
					else if (num8 > 24)
					{
						seagullCageFrame[num4] = 13;
					}
					else if (num8 > 18)
					{
						seagullCageFrame[num4] = 12;
					}
					else if (num8 > 12)
					{
						seagullCageFrame[num4] = 11;
					}
					else if (num8 > 6)
					{
						seagullCageFrame[num4] = 10;
					}
					else
					{
						seagullCageFrame[num4] = 9;
					}
				}
			}
			for (int num9 = 0; num9 < cageFrames; num9++)
			{
				if (birdCageFrame[num9] == 0)
				{
					birdCageFrameCounter[num9]++;
					if (birdCageFrameCounter[num9] <= rand.Next(30, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(3) != 0)
						{
							birdCageFrame[num9] = 2;
						}
						else
						{
							birdCageFrame[num9] = 1;
						}
					}
					birdCageFrameCounter[num9] = 0;
				}
				else if (birdCageFrame[num9] == 1)
				{
					birdCageFrameCounter[num9]++;
					if (birdCageFrameCounter[num9] > rand.Next(900, 18000) && rand.Next(3) == 0)
					{
						birdCageFrameCounter[num9] = 0;
						birdCageFrame[num9] = 0;
					}
				}
				else if (birdCageFrame[num9] >= 2 && birdCageFrame[num9] <= 5)
				{
					birdCageFrameCounter[num9]++;
					if (birdCageFrameCounter[num9] >= 5)
					{
						birdCageFrameCounter[num9] = 0;
						if (birdCageFrame[num9] == 3 && rand.Next(3) == 0)
						{
							birdCageFrame[num9] = 13;
						}
						else
						{
							birdCageFrame[num9]++;
						}
					}
				}
				else if (birdCageFrame[num9] == 6)
				{
					birdCageFrameCounter[num9]++;
					if (birdCageFrameCounter[num9] <= rand.Next(45, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(6) == 0)
						{
							birdCageFrame[num9] = 7;
						}
						else if (rand.Next(6) == 0)
						{
							birdCageFrame[num9] = 11;
						}
					}
					birdCageFrameCounter[num9] = 0;
				}
				else if (birdCageFrame[num9] >= 7 && birdCageFrame[num9] <= 10)
				{
					birdCageFrameCounter[num9]++;
					if (birdCageFrameCounter[num9] >= 5)
					{
						birdCageFrame[num9]++;
						if (birdCageFrame[num9] > 10)
						{
							birdCageFrame[num9] = 0;
						}
						birdCageFrameCounter[num9] = 0;
					}
				}
				else if (birdCageFrame[num9] >= 11 && birdCageFrame[num9] <= 13)
				{
					birdCageFrameCounter[num9]++;
					if (birdCageFrameCounter[num9] >= 5)
					{
						birdCageFrame[num9]++;
						birdCageFrameCounter[num9] = 0;
					}
				}
				else if (birdCageFrame[num9] == 14)
				{
					birdCageFrameCounter[num9]++;
					if (birdCageFrameCounter[num9] > rand.Next(5, 600))
					{
						if (rand.Next(20) == 0)
						{
							birdCageFrame[num9] = 16;
						}
						else if (rand.Next(20) == 0)
						{
							birdCageFrame[num9] = 4;
						}
						else
						{
							birdCageFrame[num9] = 15;
						}
						birdCageFrameCounter[num9] = 0;
					}
				}
				else if (birdCageFrame[num9] == 15)
				{
					birdCageFrameCounter[num9]++;
					if (birdCageFrameCounter[num9] >= 10)
					{
						birdCageFrameCounter[num9] = 0;
						birdCageFrame[num9] = 14;
					}
				}
				else
				{
					if (birdCageFrame[num9] < 16 || birdCageFrame[num9] > 18)
					{
						continue;
					}
					birdCageFrameCounter[num9]++;
					if (birdCageFrameCounter[num9] >= 5)
					{
						birdCageFrame[num9]++;
						if (birdCageFrame[num9] > 18)
						{
							birdCageFrame[num9] = 0;
						}
						birdCageFrameCounter[num9] = 0;
					}
				}
			}
			for (int num10 = 0; num10 < cageFrames; num10++)
			{
				if (blueBirdCageFrame[num10] == 0)
				{
					blueBirdCageFrameCounter[num10]++;
					if (blueBirdCageFrameCounter[num10] <= rand.Next(30, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(3) != 0)
						{
							blueBirdCageFrame[num10] = 2;
						}
						else
						{
							blueBirdCageFrame[num10] = 1;
						}
					}
					blueBirdCageFrameCounter[num10] = 0;
				}
				else if (blueBirdCageFrame[num10] == 1)
				{
					blueBirdCageFrameCounter[num10]++;
					if (blueBirdCageFrameCounter[num10] > rand.Next(900, 18000) && rand.Next(3) == 0)
					{
						blueBirdCageFrameCounter[num10] = 0;
						blueBirdCageFrame[num10] = 0;
					}
				}
				else if (blueBirdCageFrame[num10] >= 2 && blueBirdCageFrame[num10] <= 5)
				{
					blueBirdCageFrameCounter[num10]++;
					if (blueBirdCageFrameCounter[num10] >= 5)
					{
						blueBirdCageFrameCounter[num10] = 0;
						if (blueBirdCageFrame[num10] == 3 && rand.Next(3) == 0)
						{
							blueBirdCageFrame[num10] = 13;
						}
						else
						{
							blueBirdCageFrame[num10]++;
						}
					}
				}
				else if (blueBirdCageFrame[num10] == 6)
				{
					blueBirdCageFrameCounter[num10]++;
					if (blueBirdCageFrameCounter[num10] <= rand.Next(45, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(6) == 0)
						{
							blueBirdCageFrame[num10] = 7;
						}
						else if (rand.Next(6) == 0)
						{
							blueBirdCageFrame[num10] = 11;
						}
					}
					blueBirdCageFrameCounter[num10] = 0;
				}
				else if (blueBirdCageFrame[num10] >= 7 && blueBirdCageFrame[num10] <= 10)
				{
					blueBirdCageFrameCounter[num10]++;
					if (blueBirdCageFrameCounter[num10] >= 5)
					{
						blueBirdCageFrame[num10]++;
						if (blueBirdCageFrame[num10] > 10)
						{
							blueBirdCageFrame[num10] = 0;
						}
						blueBirdCageFrameCounter[num10] = 0;
					}
				}
				else if (blueBirdCageFrame[num10] >= 11 && blueBirdCageFrame[num10] <= 13)
				{
					blueBirdCageFrameCounter[num10]++;
					if (blueBirdCageFrameCounter[num10] >= 5)
					{
						blueBirdCageFrame[num10]++;
						blueBirdCageFrameCounter[num10] = 0;
					}
				}
				else if (blueBirdCageFrame[num10] == 14)
				{
					blueBirdCageFrameCounter[num10]++;
					if (blueBirdCageFrameCounter[num10] > rand.Next(5, 600))
					{
						if (rand.Next(20) == 0)
						{
							blueBirdCageFrame[num10] = 16;
						}
						else if (rand.Next(20) == 0)
						{
							blueBirdCageFrame[num10] = 4;
						}
						else
						{
							blueBirdCageFrame[num10] = 15;
						}
						blueBirdCageFrameCounter[num10] = 0;
					}
				}
				else if (blueBirdCageFrame[num10] == 15)
				{
					blueBirdCageFrameCounter[num10]++;
					if (blueBirdCageFrameCounter[num10] >= 10)
					{
						blueBirdCageFrameCounter[num10] = 0;
						blueBirdCageFrame[num10] = 14;
					}
				}
				else
				{
					if (blueBirdCageFrame[num10] < 16 || blueBirdCageFrame[num10] > 18)
					{
						continue;
					}
					blueBirdCageFrameCounter[num10]++;
					if (blueBirdCageFrameCounter[num10] >= 5)
					{
						blueBirdCageFrame[num10]++;
						if (blueBirdCageFrame[num10] > 18)
						{
							blueBirdCageFrame[num10] = 0;
						}
						blueBirdCageFrameCounter[num10] = 0;
					}
				}
			}
			for (int num11 = 0; num11 < cageFrames; num11++)
			{
				if (redBirdCageFrame[num11] == 0)
				{
					redBirdCageFrameCounter[num11]++;
					if (redBirdCageFrameCounter[num11] <= rand.Next(30, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(3) != 0)
						{
							redBirdCageFrame[num11] = 2;
						}
						else
						{
							redBirdCageFrame[num11] = 1;
						}
					}
					redBirdCageFrameCounter[num11] = 0;
				}
				else if (redBirdCageFrame[num11] == 1)
				{
					redBirdCageFrameCounter[num11]++;
					if (redBirdCageFrameCounter[num11] > rand.Next(900, 18000) && rand.Next(3) == 0)
					{
						redBirdCageFrameCounter[num11] = 0;
						redBirdCageFrame[num11] = 0;
					}
				}
				else if (redBirdCageFrame[num11] >= 2 && redBirdCageFrame[num11] <= 5)
				{
					redBirdCageFrameCounter[num11]++;
					if (redBirdCageFrameCounter[num11] >= 5)
					{
						redBirdCageFrameCounter[num11] = 0;
						if (redBirdCageFrame[num11] == 3 && rand.Next(3) == 0)
						{
							redBirdCageFrame[num11] = 13;
						}
						else
						{
							redBirdCageFrame[num11]++;
						}
					}
				}
				else if (redBirdCageFrame[num11] == 6)
				{
					redBirdCageFrameCounter[num11]++;
					if (redBirdCageFrameCounter[num11] <= rand.Next(45, 2700))
					{
						continue;
					}
					if (rand.Next(3) != 0)
					{
						if (rand.Next(6) == 0)
						{
							redBirdCageFrame[num11] = 7;
						}
						else if (rand.Next(6) == 0)
						{
							redBirdCageFrame[num11] = 11;
						}
					}
					redBirdCageFrameCounter[num11] = 0;
				}
				else if (redBirdCageFrame[num11] >= 7 && redBirdCageFrame[num11] <= 10)
				{
					redBirdCageFrameCounter[num11]++;
					if (redBirdCageFrameCounter[num11] >= 5)
					{
						redBirdCageFrame[num11]++;
						if (redBirdCageFrame[num11] > 10)
						{
							redBirdCageFrame[num11] = 0;
						}
						redBirdCageFrameCounter[num11] = 0;
					}
				}
				else if (redBirdCageFrame[num11] >= 11 && redBirdCageFrame[num11] <= 13)
				{
					redBirdCageFrameCounter[num11]++;
					if (redBirdCageFrameCounter[num11] >= 5)
					{
						redBirdCageFrame[num11]++;
						redBirdCageFrameCounter[num11] = 0;
					}
				}
				else if (redBirdCageFrame[num11] == 14)
				{
					redBirdCageFrameCounter[num11]++;
					if (redBirdCageFrameCounter[num11] > rand.Next(5, 600))
					{
						if (rand.Next(20) == 0)
						{
							redBirdCageFrame[num11] = 16;
						}
						else if (rand.Next(20) == 0)
						{
							redBirdCageFrame[num11] = 4;
						}
						else
						{
							redBirdCageFrame[num11] = 15;
						}
						redBirdCageFrameCounter[num11] = 0;
					}
				}
				else if (redBirdCageFrame[num11] == 15)
				{
					redBirdCageFrameCounter[num11]++;
					if (redBirdCageFrameCounter[num11] >= 10)
					{
						redBirdCageFrameCounter[num11] = 0;
						redBirdCageFrame[num11] = 14;
					}
				}
				else
				{
					if (redBirdCageFrame[num11] < 16 || redBirdCageFrame[num11] > 18)
					{
						continue;
					}
					redBirdCageFrameCounter[num11]++;
					if (redBirdCageFrameCounter[num11] >= 5)
					{
						redBirdCageFrame[num11]++;
						if (redBirdCageFrame[num11] > 18)
						{
							redBirdCageFrame[num11] = 0;
						}
						redBirdCageFrameCounter[num11] = 0;
					}
				}
			}
			for (int num12 = 0; num12 < 2; num12++)
			{
				for (int num13 = 0; num13 < cageFrames; num13++)
				{
					if (scorpionCageFrame[num12, num13] == 0 || scorpionCageFrame[num12, num13] == 7)
					{
						scorpionCageFrameCounter[num12, num13]++;
						if (scorpionCageFrameCounter[num12, num13] <= rand.Next(30, 3600))
						{
							continue;
						}
						if (scorpionCageFrame[num12, num13] == 7)
						{
							scorpionCageFrame[num12, num13] = 0;
						}
						else if (rand.Next(3) == 0)
						{
							if (rand.Next(7) == 0)
							{
								scorpionCageFrame[num12, num13] = 1;
							}
							else if (rand.Next(4) == 0)
							{
								scorpionCageFrame[num12, num13] = 8;
							}
							else if (rand.Next(3) == 0)
							{
								scorpionCageFrame[num12, num13] = 7;
							}
							else
							{
								scorpionCageFrame[num12, num13] = 14;
							}
						}
						scorpionCageFrameCounter[num12, num13] = 0;
					}
					else if (scorpionCageFrame[num12, num13] >= 1 && scorpionCageFrame[num12, num13] <= 2)
					{
						scorpionCageFrameCounter[num12, num13]++;
						if (scorpionCageFrameCounter[num12, num13] >= 10)
						{
							scorpionCageFrameCounter[num12, num13] = 0;
							scorpionCageFrame[num12, num13]++;
						}
					}
					else if (scorpionCageFrame[num12, num13] >= 8 && scorpionCageFrame[num12, num13] <= 10)
					{
						scorpionCageFrameCounter[num12, num13]++;
						if (scorpionCageFrameCounter[num12, num13] >= 10)
						{
							scorpionCageFrameCounter[num12, num13] = 0;
							scorpionCageFrame[num12, num13]++;
						}
					}
					else if (scorpionCageFrame[num12, num13] == 11)
					{
						scorpionCageFrameCounter[num12, num13]++;
						if (scorpionCageFrameCounter[num12, num13] > rand.Next(45, 5400))
						{
							if (rand.Next(6) == 0)
							{
								scorpionCageFrame[num12, num13] = 12;
							}
							scorpionCageFrameCounter[num12, num13] = 0;
						}
					}
					else if (scorpionCageFrame[num12, num13] >= 12 && scorpionCageFrame[num12, num13] <= 13)
					{
						scorpionCageFrameCounter[num12, num13]++;
						if (scorpionCageFrameCounter[num12, num13] >= 10)
						{
							scorpionCageFrameCounter[num12, num13] = 0;
							scorpionCageFrame[num12, num13]++;
							if (scorpionCageFrame[num12, num13] > 13)
							{
								scorpionCageFrame[num12, num13] = 0;
							}
						}
					}
					else if (scorpionCageFrame[num12, num13] >= 14 && scorpionCageFrame[num12, num13] <= 15)
					{
						scorpionCageFrameCounter[num12, num13]++;
						if (scorpionCageFrameCounter[num12, num13] >= 5)
						{
							scorpionCageFrameCounter[num12, num13] = 0;
							scorpionCageFrame[num12, num13]++;
							if (scorpionCageFrame[num12, num13] > 15)
							{
								scorpionCageFrame[num12, num13] = 14;
							}
							if (rand.Next(5) == 0)
							{
								scorpionCageFrame[num12, num13] = 0;
							}
						}
					}
					else if (scorpionCageFrame[num12, num13] == 4 || scorpionCageFrame[num12, num13] == 3)
					{
						scorpionCageFrameCounter[num12, num13]++;
						if (scorpionCageFrameCounter[num12, num13] <= rand.Next(30, 3600))
						{
							continue;
						}
						if (scorpionCageFrame[num12, num13] == 3)
						{
							scorpionCageFrame[num12, num13] = 4;
						}
						else if (rand.Next(3) == 0)
						{
							if (rand.Next(5) == 0)
							{
								scorpionCageFrame[num12, num13] = 5;
							}
							else if (rand.Next(3) == 0)
							{
								scorpionCageFrame[num12, num13] = 3;
							}
							else
							{
								scorpionCageFrame[num12, num13] = 16;
							}
						}
						scorpionCageFrameCounter[num12, num13] = 0;
					}
					else if (scorpionCageFrame[num12, num13] >= 5 && scorpionCageFrame[num12, num13] <= 6)
					{
						scorpionCageFrameCounter[num12, num13]++;
						if (scorpionCageFrameCounter[num12, num13] >= 10)
						{
							scorpionCageFrameCounter[num12, num13] = 0;
							scorpionCageFrame[num12, num13]++;
							if (scorpionCageFrame[num12, num13] > 7)
							{
								scorpionCageFrame[num12, num13] = 0;
							}
						}
					}
					else
					{
						if (scorpionCageFrame[num12, num13] < 16 || scorpionCageFrame[num12, num13] > 17)
						{
							continue;
						}
						scorpionCageFrameCounter[num12, num13]++;
						if (scorpionCageFrameCounter[num12, num13] >= 5)
						{
							scorpionCageFrameCounter[num12, num13] = 0;
							scorpionCageFrame[num12, num13]++;
							if (scorpionCageFrame[num12, num13] > 17)
							{
								scorpionCageFrame[num12, num13] = 16;
							}
							if (rand.Next(5) == 0)
							{
								scorpionCageFrame[num12, num13] = 4;
							}
						}
					}
				}
			}
			for (int num14 = 0; num14 < cageFrames; num14++)
			{
				if (penguinCageFrame[num14] == 0)
				{
					penguinCageFrameCounter[num14]++;
					if (penguinCageFrameCounter[num14] <= rand.Next(30, 1800))
					{
						continue;
					}
					if (rand.Next(2) == 0)
					{
						if (rand.Next(10) == 0)
						{
							penguinCageFrame[num14] = 4;
						}
						else if (rand.Next(7) == 0)
						{
							penguinCageFrame[num14] = 15;
						}
						else if (rand.Next(3) == 0)
						{
							penguinCageFrame[num14] = 2;
						}
						else
						{
							penguinCageFrame[num14] = 1;
						}
					}
					penguinCageFrameCounter[num14] = 0;
				}
				else if (penguinCageFrame[num14] == 1)
				{
					penguinCageFrameCounter[num14]++;
					if (penguinCageFrameCounter[num14] >= 10)
					{
						penguinCageFrameCounter[num14] = 0;
						penguinCageFrame[num14] = 0;
					}
				}
				else if (penguinCageFrame[num14] >= 2 && penguinCageFrame[num14] <= 3)
				{
					penguinCageFrameCounter[num14]++;
					if (penguinCageFrameCounter[num14] < 5)
					{
						continue;
					}
					penguinCageFrameCounter[num14] = 0;
					penguinCageFrame[num14]++;
					if (penguinCageFrame[num14] > 3)
					{
						if (rand.Next(3) == 0)
						{
							penguinCageFrame[num14] = 0;
						}
						else
						{
							penguinCageFrame[num14] = 2;
						}
					}
				}
				else if (penguinCageFrame[num14] >= 4 && penguinCageFrame[num14] <= 6)
				{
					penguinCageFrameCounter[num14]++;
					if (penguinCageFrameCounter[num14] >= 10)
					{
						penguinCageFrameCounter[num14] = 0;
						penguinCageFrame[num14]++;
					}
				}
				else if (penguinCageFrame[num14] == 15)
				{
					penguinCageFrameCounter[num14]++;
					if (penguinCageFrameCounter[num14] > rand.Next(10, 1800))
					{
						if (rand.Next(2) == 0)
						{
							penguinCageFrame[num14] = 0;
						}
						penguinCageFrameCounter[num14] = 0;
					}
				}
				else if (penguinCageFrame[num14] == 8)
				{
					penguinCageFrameCounter[num14]++;
					if (penguinCageFrameCounter[num14] <= rand.Next(30, 3600))
					{
						continue;
					}
					if (rand.Next(2) == 0)
					{
						if (rand.Next(10) == 0)
						{
							penguinCageFrame[num14] = 12;
						}
						else if (rand.Next(7) == 0)
						{
							penguinCageFrame[num14] = 7;
						}
						else if (rand.Next(3) == 0)
						{
							penguinCageFrame[num14] = 10;
						}
						else
						{
							penguinCageFrame[num14] = 9;
						}
					}
					penguinCageFrameCounter[num14] = 0;
				}
				else if (penguinCageFrame[num14] == 9)
				{
					penguinCageFrameCounter[num14]++;
					if (penguinCageFrameCounter[num14] >= 10)
					{
						penguinCageFrameCounter[num14] = 0;
						penguinCageFrame[num14] = 8;
					}
				}
				else if (penguinCageFrame[num14] >= 10 && penguinCageFrame[num14] <= 11)
				{
					penguinCageFrameCounter[num14]++;
					if (penguinCageFrameCounter[num14] < 5)
					{
						continue;
					}
					penguinCageFrameCounter[num14] = 0;
					penguinCageFrame[num14]++;
					if (penguinCageFrame[num14] > 3)
					{
						if (rand.Next(3) == 0)
						{
							penguinCageFrame[num14] = 8;
						}
						else
						{
							penguinCageFrame[num14] = 10;
						}
					}
				}
				else if (penguinCageFrame[num14] >= 12 && penguinCageFrame[num14] <= 14)
				{
					penguinCageFrameCounter[num14]++;
					if (penguinCageFrameCounter[num14] >= 10)
					{
						penguinCageFrameCounter[num14] = 0;
						penguinCageFrame[num14]++;
					}
				}
				else
				{
					if (penguinCageFrame[num14] != 7)
					{
						continue;
					}
					penguinCageFrameCounter[num14]++;
					if (penguinCageFrameCounter[num14] > rand.Next(10, 3600))
					{
						if (rand.Next(2) == 0)
						{
							penguinCageFrame[num14] = 8;
						}
						penguinCageFrameCounter[num14] = 0;
					}
				}
			}
			for (int num15 = 0; num15 < cageFrames; num15++)
			{
				turtleCageFrameCounter[num15]++;
				bool num16 = turtleCageFrame[num15] == 0 || turtleCageFrame[num15] == 15 || turtleCageFrame[num15] == 31;
				int num17 = 8;
				if (num16)
				{
					num17 = rand.Next(180, 250);
				}
				if (turtleCageFrameCounter[num15] < num17)
				{
					continue;
				}
				turtleCageFrameCounter[num15] = 0;
				if (turtleCageFrame[num15] == 29)
				{
					turtleCageFrame[num15] = 0;
					continue;
				}
				if (turtleCageFrame[num15] == 15 && rand.Next(3) == 0)
				{
					turtleCageFrame[num15] = 30;
					continue;
				}
				turtleCageFrame[num15]++;
				if (turtleCageFrame[num15] > 32)
				{
					turtleCageFrame[num15] = 15;
				}
			}
			for (int num18 = 0; num18 < cageFrames; num18++)
			{
				seahorseCageFrameCounter[num18]++;
				bool flag4 = seahorseCageFrame[num18] == 0 || seahorseCageFrame[num18] == 13;
				bool num19 = seahorseCageFrame[num18] == 4 || seahorseCageFrame[num18] == 9 || seahorseCageFrame[num18] == 17 || seahorseCageFrame[num18] == 22;
				bool flag5 = seahorseCageFrame[num18] >= 25;
				int num20 = 7;
				if (flag4)
				{
					num20 = rand.Next(220, 340);
				}
				if (num19)
				{
					num20 = 10;
				}
				if (flag5)
				{
					num20 = 6;
				}
				if (seahorseCageFrameCounter[num18] < num20)
				{
					continue;
				}
				seahorseCageFrameCounter[num18] = 0;
				if (seahorseCageFrame[num18] == 0 && rand.Next(2) == 0)
				{
					seahorseCageFrame[num18] = 25;
					continue;
				}
				if (seahorseCageFrame[num18] == 24)
				{
					seahorseCageFrame[num18] = 0;
					continue;
				}
				seahorseCageFrame[num18]++;
				if (seahorseCageFrame[num18] > 33)
				{
					seahorseCageFrame[num18] = 0;
				}
			}
			UpdateOwlCageFrames();
			for (int num21 = 0; num21 < cageFrames; num21++)
			{
				if (snailCageFrame[num21] >= 0 && snailCageFrame[num21] <= 13)
				{
					snailCageFrameCounter[num21]++;
					if (snailCageFrameCounter[num21] <= rand.Next(45, 3600))
					{
						continue;
					}
					if (snailCageFrame[num21] == 8 && rand.Next(2) == 0)
					{
						snailCageFrame[num21] = 14;
					}
					else if (snailCageFrame[num21] == 1 && rand.Next(3) == 0)
					{
						snailCageFrame[num21] = 19;
					}
					else if (snailCageFrame[num21] == 1 && rand.Next(3) == 0)
					{
						snailCageFrame[num21] = 20;
					}
					else
					{
						snailCageFrame[num21]++;
						if (snailCageFrame[num21] > 13)
						{
							snailCageFrame[num21] = 0;
						}
					}
					snailCageFrameCounter[num21] = 0;
				}
				else if (snailCageFrame[num21] >= 14 && snailCageFrame[num21] <= 18)
				{
					snailCageFrameCounter[num21]++;
					if (snailCageFrameCounter[num21] >= 5)
					{
						snailCageFrameCounter[num21] = 0;
						snailCageFrame[num21]++;
					}
					if (snailCageFrame[num21] > 18)
					{
						snailCageFrame[num21] = 20;
					}
				}
				else
				{
					if (snailCageFrame[num21] != 19 && snailCageFrame[num21] != 20)
					{
						continue;
					}
					snailCageFrameCounter[num21]++;
					if (snailCageFrameCounter[num21] <= rand.Next(60, 7200))
					{
						continue;
					}
					snailCageFrameCounter[num21] = 0;
					if (rand.Next(4) == 0)
					{
						if (rand.Next(3) == 0)
						{
							snailCageFrame[num21] = 2;
						}
						else if (snailCageFrame[num21] == 19)
						{
							snailCageFrame[num21] = 20;
						}
						else
						{
							snailCageFrame[num21] = 19;
						}
					}
				}
			}
			for (int num22 = 0; num22 < cageFrames; num22++)
			{
				if (snail2CageFrame[num22] >= 0 && snail2CageFrame[num22] <= 13)
				{
					snail2CageFrameCounter[num22]++;
					if (snail2CageFrameCounter[num22] <= rand.Next(30, 2700))
					{
						continue;
					}
					if (snail2CageFrame[num22] == 8 && rand.Next(2) == 0)
					{
						snail2CageFrame[num22] = 14;
					}
					else if (snail2CageFrame[num22] == 1 && rand.Next(3) == 0)
					{
						snail2CageFrame[num22] = 19;
					}
					else if (snail2CageFrame[num22] == 1 && rand.Next(3) == 0)
					{
						snail2CageFrame[num22] = 20;
					}
					else
					{
						snail2CageFrame[num22]++;
						if (snail2CageFrame[num22] > 13)
						{
							snail2CageFrame[num22] = 0;
						}
					}
					snail2CageFrameCounter[num22] = 0;
				}
				else if (snail2CageFrame[num22] >= 14 && snail2CageFrame[num22] <= 18)
				{
					snail2CageFrameCounter[num22]++;
					if (snail2CageFrameCounter[num22] >= 5)
					{
						snail2CageFrameCounter[num22] = 0;
						snail2CageFrame[num22]++;
					}
					if (snail2CageFrame[num22] > 18)
					{
						snail2CageFrame[num22] = 20;
					}
				}
				else
				{
					if (snail2CageFrame[num22] != 19 && snail2CageFrame[num22] != 20)
					{
						continue;
					}
					snail2CageFrameCounter[num22]++;
					if (snail2CageFrameCounter[num22] <= rand.Next(45, 5400))
					{
						continue;
					}
					snail2CageFrameCounter[num22] = 0;
					if (rand.Next(4) == 0)
					{
						if (rand.Next(3) == 0)
						{
							snail2CageFrame[num22] = 2;
						}
						else if (snail2CageFrame[num22] == 19)
						{
							snail2CageFrame[num22] = 20;
						}
						else
						{
							snail2CageFrame[num22] = 19;
						}
					}
				}
			}
			for (int num23 = 0; num23 < cageFrames; num23++)
			{
				if (frogCageFrame[num23] == 0)
				{
					frogCageFrameCounter[num23]++;
					if (frogCageFrameCounter[num23] > rand.Next(45, 3600))
					{
						if (rand.Next(10) == 0)
						{
							frogCageFrame[num23] = 1;
						}
						else
						{
							frogCageFrame[num23] = 12;
						}
						frogCageFrameCounter[num23] = 0;
					}
				}
				else if (frogCageFrame[num23] >= 1 && frogCageFrame[num23] <= 5)
				{
					frogCageFrameCounter[num23]++;
					if (frogCageFrameCounter[num23] >= 5)
					{
						frogCageFrame[num23]++;
						frogCageFrameCounter[num23] = 0;
					}
				}
				else if (frogCageFrame[num23] >= 12 && frogCageFrame[num23] <= 17)
				{
					frogCageFrameCounter[num23]++;
					if (frogCageFrameCounter[num23] >= 5)
					{
						frogCageFrameCounter[num23] = 0;
						frogCageFrame[num23]++;
					}
					if (frogCageFrame[num23] > 17)
					{
						if (rand.Next(3) == 0)
						{
							frogCageFrame[num23] = 0;
						}
						else
						{
							frogCageFrame[num23] = 12;
						}
					}
				}
				else if (frogCageFrame[num23] == 6)
				{
					frogCageFrameCounter[num23]++;
					if (frogCageFrameCounter[num23] > rand.Next(45, 3600))
					{
						if (rand.Next(10) == 0)
						{
							frogCageFrame[num23] = 7;
						}
						else
						{
							frogCageFrame[num23] = 18;
						}
						frogCageFrameCounter[num23] = 0;
					}
				}
				else if (frogCageFrame[num23] >= 7 && frogCageFrame[num23] <= 11)
				{
					frogCageFrameCounter[num23]++;
					if (frogCageFrameCounter[num23] >= 5)
					{
						frogCageFrame[num23]++;
						frogCageFrameCounter[num23] = 0;
						if (frogCageFrame[num23] > 11)
						{
							frogCageFrame[num23] = 0;
						}
					}
				}
				else
				{
					if (frogCageFrame[num23] < 18 || frogCageFrame[num23] > 23)
					{
						continue;
					}
					frogCageFrameCounter[num23]++;
					if (frogCageFrameCounter[num23] >= 5)
					{
						frogCageFrameCounter[num23] = 0;
						frogCageFrame[num23]++;
					}
					if (frogCageFrame[num23] > 17)
					{
						if (rand.Next(3) == 0)
						{
							frogCageFrame[num23] = 6;
						}
						else
						{
							frogCageFrame[num23] = 18;
						}
					}
				}
			}
			for (int num24 = 0; num24 < cageFrames; num24++)
			{
				if (mouseCageFrame[num24] >= 0 && mouseCageFrame[num24] <= 1)
				{
					mouseCageFrameCounter[num24]++;
					if (mouseCageFrameCounter[num24] >= 5)
					{
						mouseCageFrame[num24]++;
						if (mouseCageFrame[num24] > 1)
						{
							mouseCageFrame[num24] = 0;
						}
						mouseCageFrameCounter[num24] = 0;
						if (rand.Next(15) == 0)
						{
							mouseCageFrame[num24] = 4;
						}
					}
				}
				else if (mouseCageFrame[num24] >= 4 && mouseCageFrame[num24] <= 7)
				{
					mouseCageFrameCounter[num24]++;
					if (mouseCageFrameCounter[num24] >= 5)
					{
						mouseCageFrameCounter[num24] = 0;
						mouseCageFrame[num24]++;
					}
					if (mouseCageFrame[num24] > 7)
					{
						mouseCageFrame[num24] = 2;
					}
				}
				else if (mouseCageFrame[num24] >= 2 && mouseCageFrame[num24] <= 3)
				{
					mouseCageFrameCounter[num24]++;
					if (mouseCageFrameCounter[num24] >= 5)
					{
						mouseCageFrame[num24]++;
						if (mouseCageFrame[num24] > 3)
						{
							mouseCageFrame[num24] = 2;
						}
						mouseCageFrameCounter[num24] = 0;
						if (rand.Next(15) == 0)
						{
							mouseCageFrame[num24] = 8;
						}
						else if (rand.Next(15) == 0)
						{
							mouseCageFrame[num24] = 12;
						}
					}
				}
				else if (mouseCageFrame[num24] >= 8 && mouseCageFrame[num24] <= 11)
				{
					mouseCageFrameCounter[num24]++;
					if (mouseCageFrameCounter[num24] >= 5)
					{
						mouseCageFrameCounter[num24] = 0;
						mouseCageFrame[num24]++;
					}
					if (mouseCageFrame[num24] > 11)
					{
						mouseCageFrame[num24] = 0;
					}
				}
				else if (mouseCageFrame[num24] >= 12 && mouseCageFrame[num24] <= 13)
				{
					mouseCageFrameCounter[num24]++;
					if (mouseCageFrameCounter[num24] >= 5)
					{
						mouseCageFrameCounter[num24] = 0;
						mouseCageFrame[num24]++;
					}
				}
				else if (mouseCageFrame[num24] >= 14 && mouseCageFrame[num24] <= 17)
				{
					mouseCageFrameCounter[num24]++;
					if (mouseCageFrameCounter[num24] >= 5)
					{
						mouseCageFrameCounter[num24] = 0;
						mouseCageFrame[num24]++;
						if (mouseCageFrame[num24] > 17 && rand.Next(20) != 0)
						{
							mouseCageFrame[num24] = 14;
						}
					}
				}
				else
				{
					if (mouseCageFrame[num24] < 18 || mouseCageFrame[num24] > 19)
					{
						continue;
					}
					mouseCageFrameCounter[num24]++;
					if (mouseCageFrameCounter[num24] >= 5)
					{
						mouseCageFrameCounter[num24] = 0;
						mouseCageFrame[num24]++;
						if (mouseCageFrame[num24] > 19)
						{
							mouseCageFrame[num24] = 0;
						}
					}
				}
			}
			for (int num25 = 0; num25 < cageFrames; num25++)
			{
				wormCageFrameCounter[num25]++;
				if (wormCageFrameCounter[num25] < rand.Next(30, 91))
				{
					continue;
				}
				wormCageFrameCounter[num25] = 0;
				if (rand.Next(4) != 0)
				{
					continue;
				}
				wormCageFrame[num25]++;
				if (wormCageFrame[num25] == 9 && rand.Next(2) == 0)
				{
					wormCageFrame[num25] = 0;
				}
				if (wormCageFrame[num25] > 18)
				{
					if (rand.Next(2) == 0)
					{
						wormCageFrame[num25] = 9;
					}
					else
					{
						wormCageFrame[num25] = 0;
					}
				}
			}
			int num26 = 0;
			for (int num27 = 0; num27 < 3; num27++)
			{
				switch (num27)
				{
				case 0:
					num26 = 24;
					break;
				case 1:
					num26 = 31;
					break;
				case 2:
					num26 = 34;
					break;
				}
				for (int num28 = 0; num28 < cageFrames; num28++)
				{
					if (++slugCageFrameCounter[num27, num28] >= rand.Next(5, 15))
					{
						slugCageFrameCounter[num27, num28] = 0;
						if (++slugCageFrame[num27, num28] >= num26)
						{
							slugCageFrame[num27, num28] = 0;
						}
					}
				}
			}
			for (int num29 = 0; num29 < cageFrames; num29++)
			{
				if (grasshopperCageFrame[num29] >= 0 && grasshopperCageFrame[num29] <= 1)
				{
					grasshopperCageFrameCounter[num29]++;
					if (grasshopperCageFrameCounter[num29] >= 5)
					{
						grasshopperCageFrame[num29]++;
						if (grasshopperCageFrame[num29] > 1)
						{
							grasshopperCageFrame[num29] = 0;
						}
						grasshopperCageFrameCounter[num29] = 0;
						if (rand.Next(15) == 0)
						{
							grasshopperCageFrame[num29] = 2;
						}
					}
				}
				else if (grasshopperCageFrame[num29] >= 2 && grasshopperCageFrame[num29] <= 5)
				{
					grasshopperCageFrameCounter[num29]++;
					if (grasshopperCageFrameCounter[num29] >= 5)
					{
						grasshopperCageFrameCounter[num29] = 0;
						grasshopperCageFrame[num29]++;
					}
					if (grasshopperCageFrame[num29] > 5)
					{
						grasshopperCageFrame[num29] = 6;
					}
				}
				else if (grasshopperCageFrame[num29] >= 6 && grasshopperCageFrame[num29] <= 7)
				{
					grasshopperCageFrameCounter[num29]++;
					if (grasshopperCageFrameCounter[num29] >= 5)
					{
						grasshopperCageFrame[num29]++;
						if (grasshopperCageFrame[num29] > 7)
						{
							grasshopperCageFrame[num29] = 6;
						}
						grasshopperCageFrameCounter[num29] = 0;
						if (rand.Next(15) == 0)
						{
							grasshopperCageFrame[num29] = 8;
						}
					}
				}
				else if (grasshopperCageFrame[num29] >= 8 && grasshopperCageFrame[num29] <= 11)
				{
					grasshopperCageFrameCounter[num29]++;
					if (grasshopperCageFrameCounter[num29] >= 5)
					{
						grasshopperCageFrameCounter[num29] = 0;
						grasshopperCageFrame[num29]++;
					}
					if (grasshopperCageFrame[num29] > 11)
					{
						grasshopperCageFrame[num29] = 0;
					}
				}
			}
			for (int num30 = 0; num30 < cageFrames; num30++)
			{
				maggotCageFrameCounter[num30]++;
				bool num31 = maggotCageFrame[num30] == 0 || maggotCageFrame[num30] == 6 || maggotCageFrame[num30] == 18;
				int num32 = 8;
				if (num31)
				{
					num32 = rand.Next(100, 140);
				}
				if (maggotCageFrameCounter[num30] < num32)
				{
					continue;
				}
				maggotCageFrameCounter[num30] = 0;
				if (maggotCageFrame[num30] == 0)
				{
					if (rand.Next(3) == 0)
					{
						maggotCageFrame[num30] = 13;
					}
					else
					{
						maggotCageFrame[num30] = 1;
					}
					continue;
				}
				if (maggotCageFrame[num30] == 12)
				{
					maggotCageFrame[num30] = 0;
					continue;
				}
				maggotCageFrame[num30]++;
				if (maggotCageFrame[num30] > 23)
				{
					maggotCageFrame[num30] = 6;
				}
			}
			for (int num33 = 0; num33 < cageFrames; num33++)
			{
				ladybugCageFrameCounter[num33]++;
				bool flag6 = ladybugCageFrame[num33] == 3 || ladybugCageFrame[num33] == 7 || ladybugCageFrame[num33] >= 17;
				int num34 = rand.Next(10, 12);
				if (ladybugCageFrame[num33] == 18)
				{
					num34 = rand.Next(160, 241);
				}
				else if (flag6)
				{
					num34 = rand.Next(198, 206);
				}
				else if (ladybugCageFrame[num33] >= 8 && ladybugCageFrame[num33] <= 16)
				{
					num34 = 5;
				}
				if (ladybugCageFrameCounter[num33] < num34)
				{
					continue;
				}
				ladybugCageFrameCounter[num33] = 0;
				if (ladybugCageFrame[num33] < 18)
				{
					if ((ladybugCageFrame[num33] == 2 || ladybugCageFrame[num33] == 5) && rand.Next(3) == 0)
					{
						ladybugCageFrame[num33] = 17;
					}
					else if (ladybugCageFrame[num33] == 3 || ladybugCageFrame[num33] == 12)
					{
						switch (rand.Next(3))
						{
						case 0:
						case 1:
							ladybugCageFrame[num33] = 4;
							break;
						case 2:
							ladybugCageFrame[num33] = 13;
							break;
						}
					}
					else if (ladybugCageFrame[num33] == 7 || ladybugCageFrame[num33] == 16)
					{
						switch (rand.Next(3))
						{
						case 0:
						case 1:
							ladybugCageFrame[num33] = 0;
							break;
						case 2:
							ladybugCageFrame[num33] = 8;
							break;
						}
					}
					else
					{
						ladybugCageFrame[num33]++;
					}
				}
				else
				{
					ladybugCageFrame[num33] = ((rand.Next(2) == 0) ? 13 : 4);
				}
			}
			for (int num35 = 0; num35 < cageFrames; num35++)
			{
				ratCageFrameCounter[num35]++;
				bool flag7 = ratCageFrame[num35] == 0 || ratCageFrame[num35] == 4;
				bool num36 = ratCageFrame[num35] == 8 || ratCageFrame[num35] == 9 || ratCageFrame[num35] == 10 || ratCageFrame[num35] == 11;
				bool flag8 = ratCageFrame[num35] > 11;
				int num37 = 5;
				if (flag7)
				{
					num37 = rand.Next(40, 70);
				}
				if (num36)
				{
					num37 = rand.Next(70, 110);
				}
				if (flag8)
				{
					num37 = 180;
				}
				if (ratCageFrameCounter[num35] >= num37)
				{
					ratCageFrameCounter[num35] = 0;
					if (ratCageFrame[num35] == 0 && rand.Next(2) == 0)
					{
						if (rand.Next(3) != 0)
						{
							ratCageFrame[num35] = 12;
						}
						else
						{
							ratCageFrame[num35] = 8;
						}
						continue;
					}
					if (ratCageFrame[num35] == 4 && rand.Next(2) == 0)
					{
						ratCageFrame[num35] = 10;
						continue;
					}
					if (ratCageFrame[num35] == 7 || ratCageFrame[num35] == 9 || ratCageFrame[num35] == 12)
					{
						ratCageFrame[num35] = 0;
						continue;
					}
					if (ratCageFrame[num35] == 11)
					{
						ratCageFrame[num35] = 4;
						continue;
					}
					ratCageFrame[num35]++;
					if (ratCageFrame[num35] > 16)
					{
						ratCageFrame[num35] = 0;
					}
				}
				else if (ratCageFrame[num35] > 11)
				{
					int num38 = ratCageFrameCounter[num35] % 90;
					if (num38 > 80)
					{
						ratCageFrame[num35] = 12;
					}
					else if (num38 > 70)
					{
						ratCageFrame[num35] = 13;
					}
					else if (num38 > 60)
					{
						ratCageFrame[num35] = 14;
					}
					else if (num38 > 50)
					{
						ratCageFrame[num35] = 15;
					}
					else if (num38 > 40)
					{
						ratCageFrame[num35] = 16;
					}
					else if (num38 > 30)
					{
						ratCageFrame[num35] = 15;
					}
					else if (num38 > 20)
					{
						ratCageFrame[num35] = 14;
					}
					else if (num38 > 10)
					{
						ratCageFrame[num35] = 13;
					}
					else
					{
						ratCageFrame[num35] = 12;
					}
				}
				else if (ratCageFrameCounter[num35] % 10 == 0)
				{
					if (ratCageFrame[num35] == 8 || ratCageFrame[num35] == 10)
					{
						ratCageFrame[num35]++;
					}
					else if (ratCageFrame[num35] == 9 || ratCageFrame[num35] == 11)
					{
						ratCageFrame[num35]--;
					}
				}
			}
			for (int num39 = 0; num39 < cageFrames; num39++)
			{
				waterStriderCageFrameCounter[num39]++;
				bool flag9 = waterStriderCageFrame[num39] == 0 || waterStriderCageFrame[num39] == 8;
				bool num40 = waterStriderCageFrame[num39] == 17 || waterStriderCageFrame[num39] == 20;
				int num41 = 5;
				if (flag9)
				{
					num41 = rand.Next(110, 210);
				}
				if (num40)
				{
					num41 = rand.Next(150, 260);
				}
				if (waterStriderCageFrameCounter[num39] < num41)
				{
					continue;
				}
				waterStriderCageFrameCounter[num39] = 0;
				if (waterStriderCageFrame[num39] == 0 && rand.Next(2) == 0)
				{
					waterStriderCageFrame[num39] = 16;
					continue;
				}
				if (waterStriderCageFrame[num39] == 8 && rand.Next(2) == 0)
				{
					waterStriderCageFrame[num39] = 19;
					continue;
				}
				if (waterStriderCageFrame[num39] == 15 || waterStriderCageFrame[num39] == 18)
				{
					waterStriderCageFrame[num39] = 0;
					continue;
				}
				waterStriderCageFrame[num39]++;
				if (waterStriderCageFrame[num39] > 21)
				{
					waterStriderCageFrame[num39] = 8;
				}
			}
			fairyJarFrameCounter[0]++;
			if (fairyJarFrameCounter[0] > 5)
			{
				fairyJarFrameCounter[0] = 0;
				fairyJarFrame[0]++;
				if (fairyJarFrame[0] > 11)
				{
					fairyJarFrame[0] = 0;
				}
			}
			for (int num42 = 1; num42 < cageFrames; num42++)
			{
				int num43 = fairyJarFrame[0] + num42 % 12;
				if (num42 % 2 == 0)
				{
					num43++;
				}
				if (num42 % 5 == 0)
				{
					num43++;
				}
				if (num42 % 8 == 0)
				{
					num43++;
				}
				while (num43 >= 12)
				{
					num43 -= 12;
				}
				fairyJarFrame[num42] = num43;
			}
			for (int num44 = 0; num44 < cageFrames; num44++)
			{
				byte maxValue = 5;
				if (fishBowlFrameMode[num44] == 1)
				{
					if (rand.Next(900) == 0)
					{
						fishBowlFrameMode[num44] = (byte)rand.Next(maxValue);
					}
					fishBowlFrameCounter[num44]++;
					if (fishBowlFrameCounter[num44] < 5)
					{
						continue;
					}
					fishBowlFrameCounter[num44] = 0;
					if (fishBowlFrame[num44] == 10)
					{
						if (rand.Next(20) == 0)
						{
							fishBowlFrame[num44] = 11;
							fishBowlFrameMode[num44] = 0;
						}
						else
						{
							fishBowlFrame[num44] = 1;
						}
					}
					else
					{
						fishBowlFrame[num44]++;
					}
				}
				else if (fishBowlFrameMode[num44] == 2)
				{
					if (rand.Next(3600) == 0)
					{
						fishBowlFrameMode[num44] = (byte)rand.Next(maxValue);
					}
					fishBowlFrameCounter[num44]++;
					if (fishBowlFrameCounter[num44] < 20)
					{
						continue;
					}
					fishBowlFrameCounter[num44] = 0;
					if (fishBowlFrame[num44] == 10)
					{
						if (rand.Next(20) == 0)
						{
							fishBowlFrame[num44] = 11;
							fishBowlFrameMode[num44] = 0;
						}
						else
						{
							fishBowlFrame[num44] = 1;
						}
					}
					else
					{
						fishBowlFrame[num44]++;
					}
				}
				else if (fishBowlFrameMode[num44] == 3)
				{
					if (rand.Next(3600) == 0)
					{
						fishBowlFrameMode[num44] = (byte)rand.Next(maxValue);
					}
					fishBowlFrameCounter[num44]++;
					if (fishBowlFrameCounter[num44] < rand.Next(5, 3600))
					{
						continue;
					}
					fishBowlFrameCounter[num44] = 0;
					if (fishBowlFrame[num44] == 10)
					{
						if (rand.Next(20) == 0)
						{
							fishBowlFrame[num44] = 11;
							fishBowlFrameMode[num44] = 0;
						}
						else
						{
							fishBowlFrame[num44] = 1;
						}
					}
					else
					{
						fishBowlFrame[num44]++;
					}
				}
				else if (fishBowlFrame[num44] <= 10)
				{
					if (rand.Next(3600) == 0)
					{
						fishBowlFrameMode[num44] = (byte)rand.Next(maxValue);
					}
					fishBowlFrameCounter[num44]++;
					if (fishBowlFrameCounter[num44] < 10)
					{
						continue;
					}
					fishBowlFrameCounter[num44] = 0;
					if (fishBowlFrame[num44] == 10)
					{
						if (rand.Next(12) == 0)
						{
							fishBowlFrame[num44] = 11;
						}
						else
						{
							fishBowlFrame[num44] = 1;
						}
					}
					else
					{
						fishBowlFrame[num44]++;
					}
				}
				else if (fishBowlFrame[num44] == 12 || fishBowlFrame[num44] == 13)
				{
					fishBowlFrameCounter[num44]++;
					if (fishBowlFrameCounter[num44] < 10)
					{
						continue;
					}
					fishBowlFrameCounter[num44] = 0;
					fishBowlFrame[num44]++;
					if (fishBowlFrame[num44] > 13)
					{
						if (rand.Next(20) == 0)
						{
							fishBowlFrame[num44] = 14;
						}
						else
						{
							fishBowlFrame[num44] = 12;
						}
					}
				}
				else
				{
					if (fishBowlFrame[num44] < 11)
					{
						continue;
					}
					fishBowlFrameCounter[num44]++;
					if (fishBowlFrameCounter[num44] >= 10)
					{
						fishBowlFrameCounter[num44] = 0;
						fishBowlFrame[num44]++;
						if (fishBowlFrame[num44] > 16)
						{
							fishBowlFrame[num44] = 4;
						}
					}
				}
			}
			for (int num45 = 0; num45 < cageFrames; num45++)
			{
				lavaFishBowlFrameCounter[num45]++;
				if (lavaFishBowlFrameCounter[num45] > 4 + rand.Next(3))
				{
					lavaFishBowlFrameCounter[num45] = 0;
					lavaFishBowlFrame[num45]++;
					if (lavaFishBowlFrame[num45] > 26)
					{
						lavaFishBowlFrame[num45] = 0;
					}
				}
			}
			for (int num46 = 0; num46 < 9; num46++)
			{
				for (int num47 = 0; num47 < cageFrames; num47++)
				{
					butterflyCageFrameCounter[num46, num47]++;
					if (rand.Next(3600) == 0)
					{
						butterflyCageMode[num46, num47] = (byte)rand.Next(5);
						if (rand.Next(2) == 0)
						{
							butterflyCageMode[num46, num47] += 10;
						}
					}
					int num48 = rand.Next(3, 16);
					if (butterflyCageMode[num46, num47] == 1 || butterflyCageMode[num46, num47] == 11)
					{
						num48 = 3;
					}
					if (butterflyCageMode[num46, num47] == 2 || butterflyCageMode[num46, num47] == 12)
					{
						num48 = 5;
					}
					if (butterflyCageMode[num46, num47] == 3 || butterflyCageMode[num46, num47] == 13)
					{
						num48 = 10;
					}
					if (butterflyCageMode[num46, num47] == 4 || butterflyCageMode[num46, num47] == 14)
					{
						num48 = 15;
					}
					if (butterflyCageMode[num46, num47] >= 10)
					{
						if (butterflyCageFrame[num46, num47] <= 7)
						{
							if (butterflyCageFrameCounter[num46, num47] < num48)
							{
								continue;
							}
							butterflyCageFrameCounter[num46, num47] = 0;
							butterflyCageFrame[num46, num47]--;
							if (butterflyCageFrame[num46, num47] < 0)
							{
								butterflyCageFrame[num46, num47] = 7;
							}
							if (butterflyCageFrame[num46, num47] != 1 && butterflyCageFrame[num46, num47] != 4 && butterflyCageFrame[num46, num47] != 6)
							{
								continue;
							}
							if (rand.Next(20) == 0)
							{
								butterflyCageFrame[num46, num47] += 8;
							}
							else if (rand.Next(6) == 0)
							{
								if (butterflyCageMode[num46, num47] >= 10)
								{
									butterflyCageMode[num46, num47] -= 10;
								}
								else
								{
									butterflyCageMode[num46, num47] += 10;
								}
							}
						}
						else
						{
							if (butterflyCageFrameCounter[num46, num47] < num48)
							{
								continue;
							}
							butterflyCageFrameCounter[num46, num47] = 0;
							butterflyCageFrame[num46, num47]--;
							if (butterflyCageFrame[num46, num47] < 8)
							{
								butterflyCageFrame[num46, num47] = 14;
							}
							if (butterflyCageFrame[num46, num47] != 9 && butterflyCageFrame[num46, num47] != 12 && butterflyCageFrame[num46, num47] != 14)
							{
								continue;
							}
							if (rand.Next(20) == 0)
							{
								butterflyCageFrame[num46, num47] -= 8;
							}
							else if (rand.Next(6) == 0)
							{
								if (butterflyCageMode[num46, num47] >= 10)
								{
									butterflyCageMode[num46, num47] -= 10;
								}
								else
								{
									butterflyCageMode[num46, num47] += 10;
								}
							}
						}
					}
					else if (butterflyCageFrame[num46, num47] <= 7)
					{
						if (butterflyCageFrameCounter[num46, num47] >= num48)
						{
							butterflyCageFrameCounter[num46, num47] = 0;
							butterflyCageFrame[num46, num47]++;
							if (butterflyCageFrame[num46, num47] > 7)
							{
								butterflyCageFrame[num46, num47] = 0;
							}
							if ((butterflyCageFrame[num46, num47] == 1 || butterflyCageFrame[num46, num47] == 4 || butterflyCageFrame[num46, num47] == 6) && rand.Next(10) == 0)
							{
								butterflyCageFrame[num46, num47] += 8;
							}
						}
					}
					else if (butterflyCageFrameCounter[num46, num47] >= num48)
					{
						butterflyCageFrameCounter[num46, num47] = 0;
						butterflyCageFrame[num46, num47]++;
						if (butterflyCageFrame[num46, num47] > 15)
						{
							butterflyCageFrame[num46, num47] = 8;
						}
						if ((butterflyCageFrame[num46, num47] == 9 || butterflyCageFrame[num46, num47] == 12 || butterflyCageFrame[num46, num47] == 14) && rand.Next(10) == 0)
						{
							butterflyCageFrame[num46, num47] -= 8;
						}
					}
				}
			}
			UpdateDragonflyJarFrames();
			for (int num49 = 0; num49 < 3; num49++)
			{
				for (int num50 = 0; num50 < cageFrames; num50++)
				{
					jellyfishCageFrameCounter[num49, num50]++;
					if (jellyfishCageMode[num49, num50] == 0 && rand.Next(1800) == 0)
					{
						jellyfishCageMode[num49, num50] = 1;
					}
					if (jellyfishCageMode[num49, num50] == 2 && rand.Next(60) == 0)
					{
						jellyfishCageMode[num49, num50] = 3;
					}
					int num51 = 1;
					if (jellyfishCageMode[num49, num50] == 0)
					{
						num51 = rand.Next(10, 20);
					}
					if (jellyfishCageMode[num49, num50] == 1)
					{
						num51 = rand.Next(15, 25);
					}
					if (jellyfishCageMode[num49, num50] == 2)
					{
						num51 = rand.Next(4, 9);
					}
					if (jellyfishCageMode[num49, num50] == 3)
					{
						num51 = rand.Next(15, 25);
					}
					if (jellyfishCageMode[num49, num50] == 0 && jellyfishCageFrame[num49, num50] <= 3 && jellyfishCageFrameCounter[num49, num50] >= num51)
					{
						jellyfishCageFrameCounter[num49, num50] = 0;
						jellyfishCageFrame[num49, num50]++;
						if (jellyfishCageFrame[num49, num50] >= 4)
						{
							jellyfishCageFrame[num49, num50] = 0;
						}
					}
					if (jellyfishCageMode[num49, num50] == 1 && jellyfishCageFrame[num49, num50] <= 7 && jellyfishCageFrameCounter[num49, num50] >= num51)
					{
						jellyfishCageFrameCounter[num49, num50] = 0;
						jellyfishCageFrame[num49, num50]++;
						if (jellyfishCageFrame[num49, num50] >= 7)
						{
							jellyfishCageMode[num49, num50] = 2;
						}
					}
					if (jellyfishCageMode[num49, num50] == 2 && jellyfishCageFrame[num49, num50] <= 9 && jellyfishCageFrameCounter[num49, num50] >= num51)
					{
						jellyfishCageFrameCounter[num49, num50] = 0;
						jellyfishCageFrame[num49, num50]++;
						if (jellyfishCageFrame[num49, num50] >= 9)
						{
							jellyfishCageFrame[num49, num50] = 7;
						}
					}
					if (jellyfishCageMode[num49, num50] == 3 && jellyfishCageFrame[num49, num50] <= 10 && jellyfishCageFrameCounter[num49, num50] >= num51)
					{
						jellyfishCageFrameCounter[num49, num50] = 0;
						jellyfishCageFrame[num49, num50]++;
						if (jellyfishCageFrame[num49, num50] >= 10)
						{
							jellyfishCageFrame[num49, num50] = 3;
							jellyfishCageMode[num49, num50] = 0;
						}
					}
				}
			}
		}

		private static void UpdateOwlCageFrames()
		{
			for (int i = 0; i < cageFrames; i++)
			{
				UpdateOwlCageFrame(owlCageFrame, owlCageFrameCounter, i);
			}
		}

		private static void UpdateDragonflyJarFrames()
		{
			for (int i = 0; i < dragonflyJarFrameCounter.GetLength(0); i++)
			{
				for (int j = 0; j < cageFrames; j++)
				{
					UpdateDragonflyJarFrame(dragonflyJarFrame, dragonflyJarFrameCounter, i, j);
				}
			}
		}

		private static void UpdateOwlCageFrame(int[] frames, int[] frameCounters, int style)
		{
			if (frameCounters[style] % 40 != 0 || rand.Next(80) == 0)
			{
				frameCounters[style]++;
			}
			if ((frameCounters[style] + 1) % 40 == 39)
			{
				frameCounters[style] = 40 * rand.Next(4);
			}
			int num = frameCounters[style] % 40 / 10;
			int num2 = frameCounters[style] / 40;
			int num3 = 0;
			switch (num2)
			{
			case 0:
				if (num == 3)
				{
					num = 1;
				}
				num3 = num;
				break;
			case 1:
				if (num == 3)
				{
					num = 1;
				}
				num3 = 0;
				if (num != 0)
				{
					num3 = 8 - num;
				}
				break;
			case 2:
				num3 = 0;
				if (num != 0)
				{
					num3 = 7 + num;
				}
				break;
			case 3:
				num3 = 0;
				if (num != 0)
				{
					num3 = 11 + num;
				}
				break;
			}
			frames[style] = num3;
		}

		private static void UpdateDragonflyJarFrame(int[,] frames, int[,] frameCounters, int style, int variation)
		{
			frameCounters[style, variation]++;
			switch (frames[style, variation])
			{
			case 0:
				if (frameCounters[style, variation] >= 300 && rand.Next(60) == 0)
				{
					frameCounters[style, variation] = 0;
					frames[style, variation] = rand.NextFromList<int>(1, 5, 9);
				}
				break;
			case 1:
			case 5:
			case 9:
				if (frameCounters[style, variation] >= 100)
				{
					frameCounters[style, variation] = 0;
					if (frames[style, variation] == 1)
					{
						frames[style, variation] = rand.NextFromList<int>(0, 5, 5, 9, 9);
					}
					else
					{
						frames[style, variation] = 1;
					}
				}
				else if (frameCounters[style, variation] >= 6)
				{
					frameCounters[style, variation] = 0;
					frames[style, variation]++;
				}
				break;
			case 2:
			case 3:
			case 4:
			case 6:
			case 7:
			case 8:
			case 10:
			case 11:
			case 12:
			{
				int num = frames[style, variation] - 1;
				int num2 = num % 4;
				num2--;
				int num3 = frameCounters[style, variation] / 4 % 4;
				if (num3 > 2)
				{
					num3 = 4 - num3;
				}
				int num4 = (frames[style, variation] = num - num2 + 1 + num3);
				if (frameCounters[style, variation] >= 40 && rand.Next(30) == 0)
				{
					frameCounters[style, variation] = 100;
					frames[style, variation] = num - num2 + 1 - 1;
				}
				break;
			}
			}
		}

		public static void DoUpdate_AnimateItemIcons()
		{
			for (int i = 0; i < itemAnimationsRegistered.Count; i++)
			{
				int num = itemAnimationsRegistered[i];
				if (itemAnimations[num] != null)
				{
					itemAnimations[num].Update();
				}
			}
		}

		public static void QueueMainThreadAction(Action action)
		{
			_mainThreadActions.Enqueue(action);
		}

		private static void ConsumeAllMainThreadActions()
		{
			Action result;
			while (_mainThreadActions.TryDequeue(out result))
			{
				result();
			}
		}

		protected override void Update(GameTime gameTime)
		{
			if (!IsEnginePreloaded)
			{
				IsEnginePreloaded = true;
				if (Main.OnEnginePreload != null)
				{
					Main.OnEnginePreload();
				}
			}
			if (!_isDrawingOrUpdating)
			{
				_isDrawingOrUpdating = true;
				DoUpdate(gameTime);
				CinematicManager.Instance.Update(gameTime);
				if (netMode == 2)
				{
					for (int i = 0; i < 256; i++)
					{
						if (Netplay.Clients[i].Socket != null)
						{
							Netplay.Clients[i].Socket.SendQueuedPackets();
						}
					}
				}
				else if (netMode == 1)
				{
					Netplay.Connection.Socket.SendQueuedPackets();
				}
				_isDrawingOrUpdating = false;
			}
			ConsumeAllMainThreadActions();
			if (_WeGameReqExit)
			{
				QuitGame();
			}
		}

		public void UpdateViewZoomKeys()
		{
			if (!inFancyUI)
			{
				float num = 0.01f;
				if (PlayerInput.Triggers.Current.ViewZoomIn)
				{
					GameZoomTarget = Utils.Clamp(GameZoomTarget + num, 1f, 2f);
				}
				if (PlayerInput.Triggers.Current.ViewZoomOut)
				{
					GameZoomTarget = Utils.Clamp(GameZoomTarget - num, 1f, 2f);
				}
			}
		}

		public static void NotifyOfEvent(GameNotificationType type)
		{
			if (!instance.IsActive && _flashNotificationType.HasFlag(type))
			{
				QueueMainThreadAction(delegate
				{
					//Platform.Get<IWindowService>().StartFlashingIcon(instance.Window);
				});
			}
		}

		protected void DoUpdate(GameTime gameTime)
		{
			gameTimeCache = gameTime;
			if (showSplash)
			{
				UpdateAudio();
				return;
			}
			PartySky.MultipleSkyWorkaroundFix = true;
			LocalPlayer.cursorItemIconReversed = false;
			if (!GlobalTimerPaused)
			{
				GlobalTimeWrappedHourly = (float)(gameTime.TotalGameTime.TotalSeconds % 3600.0);
			}
			_overrideForExpertMode = null;
			_overrideForMasterMode = null;
			if (!gameMenu && _currentGameModeInfo.IsJourneyMode)
			{
				CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
				if (power.GetIsUnlocked())
				{
					if (power.StrengthMultiplierToGiveNPCs >= 2f)
					{
						_overrideForExpertMode = true;
					}
					if (power.StrengthMultiplierToGiveNPCs >= 3f)
					{
						_overrideForMasterMode = true;
					}
				}
			}
			UpdateWorldPreparationState();
			if (Player.BlockInteractionWithProjectiles > 0 && !mouseRight && mouseRightRelease)
			{
				Player.BlockInteractionWithProjectiles--;
			}
			PlayerInput.SetZoom_UI();
			if (!gameMenu || menuMode != 888)
			{
				MenuUI.SetState(null);
			}
			else
			{
				InGameUI.SetState(null);
			}
			CurrentInputTextTakerOverride = null;
			AchievementAdvisor.Update();
			PlayerInput.SetZoom_Unscaled();
			MouseOversTryToClear();
			PlayerInput.ResetInputsOnActiveStateChange();
			if (Main.OnTickForThirdPartySoftwareOnly != null)
			{
				Main.OnTickForThirdPartySoftwareOnly();
			}
			if (_hasPendingNetmodeChange)
			{
				netMode = _targetNetMode;
				_hasPendingNetmodeChange = false;
			}
			if (CaptureManager.Instance.IsCapturing)
			{
				return;
			}
			if (ActivePlayerFileData != null)
			{
				ActivePlayerFileData.UpdatePlayTimer();
			}
			Netplay.Update();
			gameInactive = !base.IsActive;
			if (changeTheTitle)
			{
				changeTheTitle = false;
				SetTitle();
			}
			_worldUpdateTimeTester.Restart();
			if (!WorldGen.gen)
			{
				WorldGen.destroyObject = false;
			}
			if (gameMenu)
			{
				mapFullscreen = false;
			}
			UpdateSettingUnlocks();
			if (dedServ)
			{
				if (dedServFPS)
				{
					updatesCountedForFPS++;
					if (!fpsTimer.IsRunning)
					{
						fpsTimer.Restart();
					}
					if (fpsTimer.ElapsedMilliseconds >= 1000)
					{
						dedServCount1 += updatesCountedForFPS;
						dedServCount2++;
						float num = (float)dedServCount1 / (float)dedServCount2;
						Console.WriteLine(updatesCountedForFPS + "  (" + num + ")");
						updatesCountedForFPS = 0;
						fpsTimer.Restart();
					}
				}
				else
				{
					if (fpsTimer.IsRunning)
					{
						fpsTimer.Stop();
					}
					updatesCountedForFPS = 0;
				}
			}
			DoUpdate_AutoSave();
			if (!dedServ)
			{
				Chroma.Update(GlobalTimeWrappedHourly);
				if (superFast)
				{
					base.IsFixedTimeStep = false;
					graphics.SynchronizeWithVerticalRetrace = false;
				}
				else
				{
					if (FrameSkipMode == 0 || FrameSkipMode == 2)
					{
						if (base.IsActive)
						{
							base.IsFixedTimeStep = false;
						}
						else
						{
							base.IsFixedTimeStep = true;
						}
					}
					else
					{
						base.IsFixedTimeStep = true;
						graphics.SynchronizeWithVerticalRetrace = true;
					}
					graphics.SynchronizeWithVerticalRetrace = true;
				}
				if (showSplash)
				{
					return;
				}
				updatesCountedForFPS++;
				if (fpsTimer.ElapsedMilliseconds >= 1000)
				{
					if ((float)fpsCount >= 30f + 30f * gfxQuality)
					{
						gfxQuality += gfxRate;
						gfxRate += 0.005f;
					}
					else if ((float)fpsCount < 29f + 30f * gfxQuality)
					{
						gfxRate = 0.01f;
						gfxQuality -= 0.1f;
					}
					if (gfxQuality < 0f)
					{
						gfxQuality = 0f;
					}
					if (gfxQuality > 1f)
					{
						gfxQuality = 1f;
					}
					if (maxQ && base.IsActive)
					{
						gfxQuality = 1f;
						maxQ = false;
					}
					updateRate = uCount;
					frameRate = fpsCount;
					fpsCount = 0;
					fpsTimer.Restart();
					updatesCountedForFPS = 0;
					drawsCountedForFPS = 0;
					uCount = 0;
					if (gfxQuality < 0.8f)
					{
						mapTimeMax = (int)((1f - gfxQuality) * 60f);
					}
					else
					{
						mapTimeMax = 0;
					}
				}
				if (FrameSkipMode == 0 || FrameSkipMode == 2)
				{
					UpdateTimeAccumulator += gameTime.ElapsedGameTime.TotalSeconds;
					if (UpdateTimeAccumulator < 0.01666666753590107 && !superFast)
					{
						if (FrameSkipMode == 2)
						{
							instance.SuppressDraw();
						}
						return;
					}
					gameTime = new GameTime(gameTime.TotalGameTime, new TimeSpan(166666L));
					UpdateTimeAccumulator -= 0.01666666753590107;
					UpdateTimeAccumulator = Math.Min(UpdateTimeAccumulator, 0.01666666753590107);
				}
				uCount++;
				drawSkip = false;
				PlayerInput.SetZoom_UI();
				UpdateUIStates(gameTime);
				PlayerInput.SetZoom_Unscaled();
				GameManager.Graphics.Effects.Filters.Scene.Update(gameTime);
				Overlays.Scene.Update(gameTime);
				LiquidRenderer.Instance.Update(gameTime);
				UpdateAudio();
				InGameNotificationsTracker.Update();
				ItemSlot.UpdateInterface();
				if (teamCooldown > 0)
				{
					teamCooldown--;
				}
				DoUpdate_AnimateBackgrounds();
				Animation.UpdateAll();
				if (qaStyle == 1)
				{
					gfxQuality = 1f;
				}
				else if (qaStyle == 2)
				{
					gfxQuality = 0.5f;
				}
				else if (qaStyle == 3)
				{
					gfxQuality = 0f;
				}
				maxDustToDraw = (int)(6000f * (gfxQuality * 0.7f + 0.3f));
				if ((double)gfxQuality < 0.9)
				{
					maxDustToDraw = (int)((float)maxDustToDraw * gfxQuality);
				}
				if (maxDustToDraw < 1000)
				{
					maxDustToDraw = 1000;
				}
				Gore.goreTime = (int)(600f * gfxQuality);
				if (!WorldGen.gen)
				{
					Liquid.cycles = (int)(17f - 10f * gfxQuality);
					Liquid.curMaxLiquid = (int)((double)Liquid.maxLiquid * 0.25 + (double)Liquid.maxLiquid * 0.75 * (double)gfxQuality);
					if (Setting_UseReducedMaxLiquids)
					{
						Liquid.curMaxLiquid = (int)(2500f + 2500f * gfxQuality);
					}
				}
				if (superFast)
				{
					graphics.SynchronizeWithVerticalRetrace = false;
					drawSkip = false;
				}
				if ((double)gfxQuality < 0.2)
				{
					LegacyLighting.RenderPhases = 8;
				}
				else if ((double)gfxQuality < 0.4)
				{
					LegacyLighting.RenderPhases = 7;
				}
				else if ((double)gfxQuality < 0.6)
				{
					LegacyLighting.RenderPhases = 6;
				}
				else if ((double)gfxQuality < 0.8)
				{
					LegacyLighting.RenderPhases = 5;
				}
				else
				{
					LegacyLighting.RenderPhases = 4;
				}
				if (!WorldGen.gen && Liquid.quickSettle)
				{
					Liquid.curMaxLiquid = Liquid.maxLiquid;
					if (Setting_UseReducedMaxLiquids)
					{
						Liquid.curMaxLiquid = 5000;
					}
					Liquid.cycles = 1;
				}
				if (WorldGen.drunkWorldGen)
				{
					if (!gameMenu)
					{
						WorldGen.drunkWorldGen = false;
						logoRotation = 0f;
						logoRotationSpeed = 0f;
						logoScale = 1f;
					}
				}
				else if (gameMenu && Math.Abs(logoRotationSpeed) > 1000f)
				{
					logoRotation = 0f;
					logoRotationSpeed = 0f;
					logoScale = 1f;
				}
				UpdateOldNPCShop();
				hasFocus = base.IsActive;
				//hasFocus |= Form.ActiveForm == Control.FromHandle(base.Window.Handle) as Form;
				if (!base.IsActive && netMode == 0)
				{
					if (!false)
					{
						base.IsMouseVisible = true;
					}
					if (netMode != 2 && myPlayer >= 0)
					{
						player[myPlayer].delayUseItem = true;
					}
					mouseLeftRelease = false;
					mouseRightRelease = false;
					if (gameMenu)
					{
						UpdateMenu();
					}
					gamePaused = true;
					return;
				}
				if (!false)
				{
					base.IsMouseVisible = false;
				}
				SkyManager.Instance.Update(gameTime);
				if (!gamePaused)
				{
					EmoteBubble.UpdateAll();
				}
				ScreenObstruction.Update();
				ScreenDarkness.Update();
				MoonlordDeathDrama.Update();
				DoUpdate_AnimateCursorColors();
				DoUpdate_AnimateTileGlows();
				DoUpdate_AnimateDiscoRGB();
				DoUpdate_AnimateVisualPlayerAura();
				DoUpdate_AnimateWaterfalls();
				DoUpdate_AnimateWalls();
				AnimateTiles();
				DoUpdate_AnimateItemIcons();
				DoUpdate_F10_ToggleFPS();
				DoUpdate_F9_ToggleLighting();
				DoUpdate_F8_ToggleNetDiagnostics();
				DoUpdate_F7_ToggleGraphicsDiagnostics();
				DoUpdate_F11_ToggleUI();
				DoUpdate_AltEnter_ToggleFullscreen();
				DoUpdate_HandleInput();
				DoUpdate_HandleChat();
				DoUpdate_Enter_ToggleChat();
				if (gameMenu)
				{
					UpdateMenu();
					if (netMode != 2)
					{
						return;
					}
					gamePaused = false;
				}
				CheckInvasionProgressDisplay();
			}
			UpdateWindyDayState();
			if (netMode == 2)
			{
				cloudAlpha = maxRaining;
			}
			bool isActive = base.IsActive;
			if (netMode == 1)
			{
				TrySyncingMyPlayer();
			}
			if (CanPauseGame())
			{
				DoUpdate_WhilePaused();
				gamePaused = true;
				return;
			}
			gamePaused = false;
			if (Main.OnTickForInternalCodeOnly != null)
			{
				Main.OnTickForInternalCodeOnly();
			}
			if (netMode != 1 && !gameMenu && !gamePaused && AmbienceServer != null)
			{
				AmbienceServer.Update();
			}
			WorldGen.BackgroundsCache.UpdateFlashValues();
			if (LocalGolfState != null)
			{
				LocalGolfState.Update();
			}
			if ((isActive || netMode == 1) && cloudAlpha > 0f)
			{
				Rain.MakeRain();
			}
			if (netMode != 1)
			{
				updateCloudLayer();
			}
			for (int i = 0; i < dayRate; i++)
			{
				UpdateWeather(gameTime);
			}
			if ((timeForVisualEffects += 1.0) >= 216000.0)
			{
				timeForVisualEffects = 0.0;
			}
			UnpausedUpdateSeed = Utils.RandomNextSeed(UnpausedUpdateSeed);
			Ambience();
			if (netMode != 2)
			{
				try
				{
					snowing();
				}
				catch
				{
					if (!ignoreErrors)
					{
						throw;
					}
				}
				Sandstorm.EmitDust();
			}
			if (!dedServ && (double)screenPosition.Y < worldSurface * 16.0 + 16.0 && netMode != 2)
			{
				Star.UpdateStars();
				Cloud.UpdateClouds();
			}
			PortalHelper.UpdatePortalPoints();
			if (ShouldUpdateEntities())
			{
				DoUpdateInWorld(_worldUpdateTimeTester);
			}
			if (netMode != 2)
			{
				ChromaPainter.Update();
			}
			base.Update(gameTime);
		}

		private static bool CanPauseGame()
		{
			bool flag = false;
			if (netMode == 0)
			{
				flag |= ingameOptionsWindow;
				flag |= autoPause && (playerInventory || LocalPlayer.sign >= 0 || InGameUI.IsVisible);
			}
			return flag;
		}

		private static void DoUpdate_WhilePaused()
		{
			if (!drawingPlayerChat && !editSign && !editChest && !blockInput)
			{
				player[myPlayer].controlInv = PlayerInput.Triggers.Current.Inventory;
				if (player[myPlayer].controlInv)
				{
					if (player[myPlayer].releaseInventory)
					{
						player[myPlayer].ToggleInv();
					}
					player[myPlayer].releaseInventory = false;
				}
				else
				{
					player[myPlayer].releaseInventory = true;
				}
			}
			if (playerInventory)
			{
				Recipe.GetThroughDelayedFindRecipes();
				int num = PlayerInput.ScrollWheelDelta / 120;
				bool flag = true;
				if (recBigList)
				{
					int num2 = 42;
					int num3 = 340;
					int num4 = 310;
					PlayerInput.SetZoom_UI();
					int num5 = (screenWidth - num4 - 280) / num2;
					int num6 = (screenHeight - num3 - 20) / num2;
					if (new Microsoft.Xna.Framework.Rectangle(num4, num3, num5 * num2, num6 * num2).Contains(MouseScreen.ToPoint()))
					{
						int num7 = Math.Sign(num);
						while (num != 0)
						{
							if (num < 0)
							{
								recStart -= num5;
								if (recStart < 0)
								{
									recStart = 0;
								}
							}
							else
							{
								recStart += num5;
								SoundEngine.PlaySound(12);
								if (recStart > numAvailableRecipes - num5)
								{
									recStart = numAvailableRecipes - num5;
								}
							}
							num -= num7;
						}
					}
					PlayerInput.SetZoom_World();
				}
				if (flag)
				{
					focusRecipe += num;
					if (focusRecipe > numAvailableRecipes - 1)
					{
						focusRecipe = numAvailableRecipes - 1;
					}
					if (focusRecipe < 0)
					{
						focusRecipe = 0;
					}
				}
				player[myPlayer].dropItemCheck();
			}
			player[myPlayer].head = player[myPlayer].armor[0].headSlot;
			player[myPlayer].body = player[myPlayer].armor[1].bodySlot;
			player[myPlayer].legs = player[myPlayer].armor[2].legSlot;
			if (!player[myPlayer].hostile)
			{
				if (player[myPlayer].armor[10].headSlot >= 0)
				{
					player[myPlayer].head = player[myPlayer].armor[10].headSlot;
				}
				if (player[myPlayer].armor[11].bodySlot >= 0)
				{
					player[myPlayer].body = player[myPlayer].armor[11].bodySlot;
				}
				if (player[myPlayer].armor[12].legSlot >= 0)
				{
					player[myPlayer].legs = player[myPlayer].armor[12].legSlot;
				}
			}
			if (editSign)
			{
				if (player[myPlayer].sign == -1)
				{
					editSign = false;
				}
				else
				{
					InputTextSign();
				}
			}
			else if (editChest && player[myPlayer].chest == -1)
			{
				editChest = false;
			}
			Player.tileTargetX = (int)(((float)mouseX + screenPosition.X) / 16f);
			Player.tileTargetY = (int)(((float)mouseY + screenPosition.Y) / 16f);
			player[myPlayer].LookForTileInteractions();
			player[myPlayer].lastChest = player[myPlayer].chest;
			if (playerInventory)
			{
				player[myPlayer].AdjTiles();
			}
		}

		private static void UpdateUIStates(GameTime gameTime)
		{
			if (MenuUI != null)
			{
				MenuUI.Update(gameTime);
			}
			if (InGameUI != null)
			{
				InGameUI.Update(gameTime);
			}
			CreativeMenu.Update(gameTime);
			BigBossProgressBar.Update();
		}

		private void DoDebugFunctions()
		{
		}

		private void PreUpdateAllProjectiles()
		{
			SpelunkerProjectileHelper.OnPreUpdateAllProjectiles();
			ChumBucketProjectileHelper.OnPreUpdateAllProjectiles();
		}

		private void PostUpdateAllProjectiles()
		{
		}

		private static void TrySyncingMyPlayer()
		{
			Player player = clientPlayer;
			bool flag = false;
			for (int i = 0; i < 59; i++)
			{
				if (Main.player[myPlayer].inventory[i].IsNotTheSameAs(player.inventory[i]))
				{
					flag = true;
					NetMessage.SendData(5, -1, -1, null, myPlayer, i, (int)Main.player[myPlayer].inventory[i].prefix);
				}
			}
			for (int j = 0; j < Main.player[myPlayer].armor.Length; j++)
			{
				if (Main.player[myPlayer].armor[j].IsNotTheSameAs(player.armor[j]))
				{
					flag = true;
					NetMessage.SendData(5, -1, -1, null, myPlayer, 59 + j, (int)Main.player[myPlayer].armor[j].prefix);
				}
			}
			for (int k = 0; k < Main.player[myPlayer].miscEquips.Length; k++)
			{
				if (Main.player[myPlayer].miscEquips[k].IsNotTheSameAs(player.miscEquips[k]))
				{
					flag = true;
					NetMessage.SendData(5, -1, -1, null, myPlayer, 58 + Main.player[myPlayer].armor.Length + Main.player[myPlayer].dye.Length + 1 + k, (int)Main.player[myPlayer].miscEquips[k].prefix);
				}
			}
			for (int l = 0; l < Main.player[myPlayer].miscDyes.Length; l++)
			{
				if (Main.player[myPlayer].miscDyes[l].IsNotTheSameAs(player.miscDyes[l]))
				{
					flag = true;
					NetMessage.SendData(5, -1, -1, null, myPlayer, 58 + Main.player[myPlayer].armor.Length + Main.player[myPlayer].dye.Length + Main.player[myPlayer].miscEquips.Length + 1 + l, (int)Main.player[myPlayer].miscDyes[l].prefix);
				}
			}
			for (int m = 0; m < Main.player[myPlayer].bank.item.Length; m++)
			{
				if (Main.player[myPlayer].bank.item[m].IsNotTheSameAs(player.bank.item[m]))
				{
					flag = true;
					NetMessage.SendData(5, -1, -1, null, myPlayer, 58 + Main.player[myPlayer].armor.Length + Main.player[myPlayer].dye.Length + Main.player[myPlayer].miscEquips.Length + Main.player[myPlayer].miscDyes.Length + 1 + m, (int)Main.player[myPlayer].bank.item[m].prefix);
				}
			}
			for (int n = 0; n < Main.player[myPlayer].bank2.item.Length; n++)
			{
				if (Main.player[myPlayer].bank2.item[n].IsNotTheSameAs(player.bank2.item[n]))
				{
					flag = true;
					NetMessage.SendData(5, -1, -1, null, myPlayer, 58 + Main.player[myPlayer].armor.Length + Main.player[myPlayer].dye.Length + Main.player[myPlayer].miscEquips.Length + Main.player[myPlayer].miscDyes.Length + Main.player[myPlayer].bank.item.Length + 1 + n, (int)Main.player[myPlayer].bank2.item[n].prefix);
				}
			}
			if (Main.player[myPlayer].trashItem.IsNotTheSameAs(player.trashItem))
			{
				flag = true;
				NetMessage.SendData(5, -1, -1, null, myPlayer, 58 + Main.player[myPlayer].armor.Length + Main.player[myPlayer].dye.Length + Main.player[myPlayer].miscEquips.Length + Main.player[myPlayer].miscDyes.Length + Main.player[myPlayer].bank.item.Length + Main.player[myPlayer].bank2.item.Length + 1, (int)Main.player[myPlayer].trashItem.prefix);
			}
			for (int num = 0; num < Main.player[myPlayer].bank3.item.Length; num++)
			{
				if (Main.player[myPlayer].bank3.item[num].IsNotTheSameAs(player.bank3.item[num]))
				{
					flag = true;
					NetMessage.SendData(5, -1, -1, null, myPlayer, 58 + Main.player[myPlayer].armor.Length + Main.player[myPlayer].dye.Length + Main.player[myPlayer].miscEquips.Length + Main.player[myPlayer].miscDyes.Length + Main.player[myPlayer].bank.item.Length + Main.player[myPlayer].bank2.item.Length + 2 + num, (int)Main.player[myPlayer].bank3.item[num].prefix);
				}
			}
			for (int num2 = 0; num2 < Main.player[myPlayer].bank4.item.Length; num2++)
			{
				if (Main.player[myPlayer].bank4.item[num2].IsNotTheSameAs(player.bank4.item[num2]))
				{
					flag = true;
					NetMessage.SendData(5, -1, -1, null, myPlayer, 58 + Main.player[myPlayer].armor.Length + Main.player[myPlayer].dye.Length + Main.player[myPlayer].miscEquips.Length + Main.player[myPlayer].miscDyes.Length + Main.player[myPlayer].bank.item.Length + Main.player[myPlayer].bank2.item.Length + Main.player[myPlayer].bank3.item.Length + 2 + num2, (int)Main.player[myPlayer].bank4.item[num2].prefix);
				}
			}
			for (int num3 = 0; num3 < Main.player[myPlayer].dye.Length; num3++)
			{
				if (Main.player[myPlayer].dye[num3].IsNotTheSameAs(player.dye[num3]))
				{
					flag = true;
					NetMessage.SendData(5, -1, -1, null, myPlayer, 58 + Main.player[myPlayer].armor.Length + 1 + num3, (int)Main.player[myPlayer].dye[num3].prefix);
				}
			}
			if (Main.player[myPlayer].chest != player.chest && Main.player[myPlayer].chest < 0 && player.chest >= 0)
			{
				if (Main.player[myPlayer].editedChestName)
				{
					if (chest[player.chest] != null)
					{
						NetMessage.SendData(33, -1, -1, NetworkText.FromLiteral(chest[player.chest].name), Main.player[myPlayer].chest, 1f);
					}
					else
					{
						NetMessage.SendData(33, -1, -1, null, Main.player[myPlayer].chest);
					}
					Main.player[myPlayer].editedChestName = false;
				}
				else
				{
					NetMessage.SendData(33, -1, -1, null, Main.player[myPlayer].chest);
				}
			}
			if (Main.player[myPlayer].talkNPC != player.talkNPC)
			{
				NetMessage.SendData(40, -1, -1, null, myPlayer);
			}
			if (LocalPlayer.tileEntityAnchor.interactEntityID != player.tileEntityAnchor.interactEntityID && LocalPlayer.tileEntityAnchor.interactEntityID < 0)
			{
				NetMessage.SendData(122, -1, -1, null, -1, myPlayer);
			}
			bool flag2 = false;
			if ((byte)Main.player[myPlayer].zone1 != (byte)player.zone1)
			{
				flag2 = true;
			}
			if ((byte)Main.player[myPlayer].zone2 != (byte)player.zone2)
			{
				flag2 = true;
			}
			if ((byte)Main.player[myPlayer].zone3 != (byte)player.zone3)
			{
				flag2 = true;
			}
			if ((byte)Main.player[myPlayer].zone4 != (byte)player.zone4)
			{
				flag2 = true;
			}
			if (flag2)
			{
				NetMessage.SendData(36, -1, -1, null, myPlayer);
			}
			if (Main.player[myPlayer].statLife != player.statLife || Main.player[myPlayer].statLifeMax != player.statLifeMax)
			{
				Main.player[myPlayer].netLife = true;
			}
			if (Main.player[myPlayer].netLifeTime > 0)
			{
				Main.player[myPlayer].netLifeTime--;
			}
			else if (Main.player[myPlayer].netLife)
			{
				Main.player[myPlayer].netLife = false;
				Main.player[myPlayer].netLifeTime = 60;
				NetMessage.SendData(16, -1, -1, null, myPlayer);
			}
			if (Main.player[myPlayer].statMana != player.statMana || Main.player[myPlayer].statManaMax != player.statManaMax)
			{
				Main.player[myPlayer].netMana = true;
			}
			if (Main.player[myPlayer].netManaTime > 0)
			{
				Main.player[myPlayer].netManaTime--;
			}
			else if (Main.player[myPlayer].netMana)
			{
				Main.player[myPlayer].netMana = false;
				Main.player[myPlayer].netManaTime = 60;
				NetMessage.SendData(42, -1, -1, null, myPlayer);
			}
			bool flag3 = false;
			for (int num4 = 0; num4 < 22; num4++)
			{
				if (Main.player[myPlayer].buffType[num4] != player.buffType[num4])
				{
					flag3 = true;
				}
			}
			if (flag3)
			{
				NetMessage.SendData(50, -1, -1, null, myPlayer);
				NetMessage.SendData(13, -1, -1, null, myPlayer);
			}
			bool flag4 = false;
			if (Main.player[myPlayer].MinionRestTargetPoint != player.MinionRestTargetPoint)
			{
				flag4 = true;
			}
			if (flag4)
			{
				NetMessage.SendData(99, -1, -1, null, myPlayer);
			}
			bool flag5 = false;
			if (Main.player[myPlayer].MinionAttackTargetNPC != player.MinionAttackTargetNPC)
			{
				flag5 = true;
			}
			if (flag5)
			{
				NetMessage.SendData(115, -1, -1, null, myPlayer);
			}
			if (player.shieldRaised != Main.player[myPlayer].shieldRaised)
			{
				NetMessage.SendData(13, -1, -1, null, myPlayer);
			}
			if (flag)
			{
				NetMessage.SendData(138);
			}
			clientPlayer = (Player)Main.player[myPlayer].clientClone();
		}

		public bool ShouldUpdateEntities()
		{
			return _worldPreparationState == WorldPreparationState.Ready;
		}

		private void DoUpdateInWorld(Stopwatch sw)
		{
			UpdateParticleSystems();
			tileSolid[379] = false;
			int num = 0;
			int num2 = 0;
			sittingManager.ClearPlayerAnchors();
			sleepingManager.ClearPlayerAnchors();
			for (int i = 0; i < 255; i++)
			{
				try
				{
					player[i].Update(i);
					if (player[i].active)
					{
						num++;
						if (player[i].sleeping.FullyFallenAsleep)
						{
							num2++;
						}
					}
				}
				catch
				{
					if (!ignoreErrors)
					{
						throw;
					}
				}
			}
			CurrentFrameFlags.ActivePlayersCount = num;
			CurrentFrameFlags.SleepingPlayersCount = num2;
			if (netMode != 2)
			{
				int num3 = myPlayer;
				if (player[num3].creativeGodMode)
				{
					player[num3].statLife = player[num3].statLifeMax2;
					player[num3].statMana = player[num3].statManaMax2;
					player[num3].breath = player[num3].breathMax;
				}
			}
			_gameUpdateCount++;
			NPC.RevengeManager.Update();
			if (netMode != 1)
			{
				try
				{
					NPC.SpawnNPC();
				}
				catch
				{
				}
			}
			if (netMode != 1)
			{
				PressurePlateHelper.Update();
			}
			for (int j = 0; j < 255; j++)
			{
				player[j].nearbyActiveNPCs = 0f;
				player[j].townNPCs = 0f;
			}
			CheckBossIndexes();
			sittingManager.ClearNPCAnchors();
			sleepingManager.ClearNPCAnchors();
			NPC.taxCollector = false;
			NPC.ClearFoundActiveNPCs();
			NPC.UpdateFoundActiveNPCs();
			FixExploitManEaters.Update();
			if (netMode != 1)
			{
				BestiaryTracker.Sights.ScanWorldForFinds();
			}
			bool anyActiveBossNPC = false;
			if (NPC.offSetDelayTime > 0)
			{
				NPC.offSetDelayTime--;
			}
			for (int k = 0; k < 200; k++)
			{
				if (ignoreErrors)
				{
					try
					{
						npc[k].UpdateNPC(k);
						if (npc[k].active && (npc[k].boss || NPCID.Sets.DangerThatPreventsOtherDangers[npc[k].type]))
						{
							anyActiveBossNPC = true;
						}
					}
					catch (Exception)
					{
						npc[k] = new NPC();
					}
				}
				else
				{
					npc[k].UpdateNPC(k);
				}
			}
			CurrentFrameFlags.AnyActiveBossNPC = anyActiveBossNPC;
			for (int l = 0; l < 600; l++)
			{
				if (ignoreErrors)
				{
					try
					{
						gore[l].Update();
					}
					catch
					{
						gore[l] = new Gore();
					}
				}
				else
				{
					gore[l].Update();
				}
			}
			LockOnHelper.SetUP();
			CurrentFrameFlags.HadAnActiveInteractibleProjectile = false;
			PreUpdateAllProjectiles();
			for (int m = 0; m < 1000; m++)
			{
				ProjectileUpdateLoopIndex = m;
				if (ignoreErrors)
				{
					try
					{
						projectile[m].Update(m);
					}
					catch
					{
						projectile[m] = new Projectile();
					}
				}
				else
				{
					projectile[m].Update(m);
				}
			}
			ProjectileUpdateLoopIndex = -1;
			PostUpdateAllProjectiles();
			LockOnHelper.SetDOWN();
			Item.numberOfNewItems = 0;
			for (int n = 0; n < 400; n++)
			{
				if (ignoreErrors)
				{
					try
					{
						item[n].UpdateItem(n);
					}
					catch
					{
						item[n] = new Item();
					}
				}
				else
				{
					item[n].UpdateItem(n);
				}
			}
			if (ignoreErrors)
			{
				try
				{
					Dust.UpdateDust();
				}
				catch
				{
					for (int num4 = 0; num4 < 6000; num4++)
					{
						dust[num4] = new Dust();
						dust[num4].dustIndex = num4;
					}
				}
			}
			else
			{
				Dust.UpdateDust();
			}
			if (netMode != 2)
			{
				CombatText.UpdateCombatText();
				PopupText.UpdateItemText();
			}
			if (ignoreErrors)
			{
				try
				{
					UpdateTime();
				}
				catch
				{
					checkForSpawns = 0;
				}
			}
			else
			{
				UpdateTime();
			}
			tileSolid[379] = true;
			if (gameMenu && netMode != 2)
			{
				return;
			}
			if (netMode != 1)
			{
				if (ignoreErrors)
				{
					try
					{
						WorldGen.UpdateWorld();
						UpdateInvasion();
					}
					catch
					{
					}
				}
				else
				{
					WorldGen.UpdateWorld();
					UpdateInvasion();
				}
			}
			if (ignoreErrors)
			{
				try
				{
					if (netMode == 2)
					{
						UpdateServer();
					}
					if (netMode == 1)
					{
						UpdateClient();
					}
				}
				catch
				{
					_ = netMode;
					_ = 2;
				}
			}
			else
			{
				if (netMode == 2)
				{
					UpdateServer();
				}
				if (netMode == 1)
				{
					UpdateClient();
				}
			}
			chatMonitor.Update();
			upTimer = (float)sw.Elapsed.TotalMilliseconds;
			if (upTimerMaxDelay > 0f)
			{
				upTimerMaxDelay -= 1f;
			}
			else
			{
				upTimerMax = 0f;
			}
			if (upTimer > upTimerMax)
			{
				upTimerMax = upTimer;
				upTimerMaxDelay = 400f;
			}
			Chest.UpdateChestFrames();
			_ambientWindSys.Update();
			TilesRenderer.Update();
			if (cameraLerp > 0f)
			{
				cameraLerpTimer++;
				if (cameraLerpTimer >= cameraLerpTimeToggle)
				{
					cameraLerp += (float)((cameraLerpTimer - cameraLerpTimeToggle) / 3 + 1) * 0.001f;
				}
				if (cameraLerp > 1f)
				{
					cameraLerp = 1f;
				}
			}
		}

		private static void CheckBossIndexes()
		{
			if (!IsNPCActiveAndOneOfTypes(wofNPCIndex, 113))
			{
				wofNPCIndex = -1;
			}
			if (!IsNPCActiveAndOneOfTypes(NPC.golemBoss, 245))
			{
				NPC.golemBoss = -1;
			}
			if (!IsNPCActiveAndOneOfTypes(NPC.plantBoss, 262))
			{
				NPC.plantBoss = -1;
			}
			if (!IsNPCActiveAndOneOfTypes(NPC.crimsonBoss, 266))
			{
				NPC.crimsonBoss = -1;
			}
		}

		private static bool IsNPCActiveAndOneOfTypes(int npcIndex, params int[] types)
		{
			if (npcIndex < 0)
			{
				return false;
			}
			NPC nPC = npc[npcIndex];
			if (!nPC.active)
			{
				return false;
			}
			for (int i = 0; i < types.Length; i++)
			{
				if (nPC.type == types[i])
				{
					return true;
				}
			}
			return false;
		}

		private static void UpdateOldNPCShop()
		{
			if (npcShop != oldNPCShop)
			{
				oldNPCShop = npcShop;
				shopSellbackHelper.Clear();
			}
		}

		private static void DoUpdate_AnimateCursorColors()
		{
			CursorColor();
			mouseTextColor += (byte)mouseTextColorChange;
			if (mouseTextColor >= byte.MaxValue)
			{
				mouseTextColorChange = -1;
			}
			if (mouseTextColor <= 190)
			{
				mouseTextColorChange = 1;
			}
			masterColor += (float)masterColorDir * 0.05f;
			if (masterColor > 1f)
			{
				masterColor = 1f;
				masterColorDir = -1;
			}
			if (masterColor < 0f)
			{
				masterColor = 0f;
				masterColorDir = 1;
			}
		}

		private static void DoUpdate_AnimateTileGlows()
		{
			demonTorch += (float)demonTorchDir * 0.01f;
			if (demonTorch > 1f)
			{
				demonTorch = 1f;
				demonTorchDir = -1;
			}
			if (demonTorch < 0f)
			{
				demonTorch = 0f;
				demonTorchDir = 1;
			}
			martianLight += (float)martianLightDir * 0.015f;
			if (martianLight > 1f)
			{
				martianLight = 1f;
				martianLightDir = -1;
			}
			if (martianLight < 0f)
			{
				martianLight = 0f;
				martianLightDir = 1;
			}
		}

		private static void DoUpdate_Enter_ToggleChat()
		{
			if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && hasFocus)
			{
				if (chatRelease && !drawingPlayerChat && !editSign && !editChest && !gameMenu && !keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
				{
					SoundEngine.PlaySound(10);
					OpenPlayerChat();
					chatText = "";
				}
				chatRelease = false;
			}
			else
			{
				chatRelease = true;
			}
		}

		public static void OpenPlayerChat()
		{
			if (CurrentInputTextTakerOverride == null)
			{
				drawingPlayerChat = true;
				clrInput();
			}
		}

		public static void ClosePlayerChat()
		{
			drawingPlayerChat = false;
			PlayerInput.WritingText = true;
			player[myPlayer].releaseHook = false;
			player[myPlayer].releaseThrow = false;
		}

		private static void DoUpdate_HandleChat()
		{
			if (CurrentInputTextTakerOverride != null)
			{
				drawingPlayerChat = false;
				return;
			}
			if (editSign)
			{
				drawingPlayerChat = false;
			}
			if (PlayerInput.UsingGamepad)
			{
				drawingPlayerChat = false;
			}
			if (!drawingPlayerChat)
			{
				chatMonitor.ResetOffset();
				return;
			}
			int linesOffset = 0;
			if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Up))
			{
				linesOffset = 1;
			}
			else if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Down))
			{
				linesOffset = -1;
			}
			chatMonitor.Offset(linesOffset);
			if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
			{
				drawingPlayerChat = false;
			}
			string a = chatText;
			chatText = GetInputText(chatText);
			int num = 470;
			num = (int)((float)screenWidth * (1f / UIScale)) - 330;
			if (a != chatText)
			{
				for (float x = ChatManager.GetStringSize(FontAssets.MouseText.Value, chatText, Vector2.One).X; x > (float)num; x = ChatManager.GetStringSize(FontAssets.MouseText.Value, chatText, Vector2.One).X)
				{
					int num2 = Math.Max(0, (int)(x - (float)num) / 100);
					chatText = chatText.Substring(0, chatText.Length - 1 - num2);
				}
			}
			if (a != chatText)
			{
				SoundEngine.PlaySound(12);
			}
			if (!inputTextEnter || !chatRelease)
			{
				return;
			}
			if (chatText != "")
			{
				ChatMessage message = ChatManager.Commands.CreateOutgoingMessage(chatText);
				if (netMode == 1)
				{
					ChatHelper.SendChatMessageFromClient(message);
				}
				else if (netMode == 0)
				{
					ChatManager.Commands.ProcessIncomingMessage(message, myPlayer);
				}
			}
			chatText = "";
			ClosePlayerChat();
			chatRelease = false;
			SoundEngine.PlaySound(11);
		}

		private void DoUpdate_HandleInput()
		{
			PlayerInput.UpdateInput();
			UpdateViewZoomKeys();
			PlayerInput.SetZoom_Unscaled();
			UILinkPointNavigator.Update();
			PlayerInput.CacheMousePositionForZoom();
			PlayerInput.SetZoom_MouseInWorld();
			oldKeyState = keyState;
			keyState = Keyboard.GetState();
		}

		private static void DoUpdate_AltEnter_ToggleFullscreen()
		{
			if ((keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt)) && keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && hasFocus)
			{
				if (toggleFullscreen)
				{
					ToggleFullScreen();
					chatRelease = false;
				}
				toggleFullscreen = false;
			}
			else
			{
				toggleFullscreen = true;
			}
		}

		private static void DoUpdate_F11_ToggleUI()
		{
			if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F11))
			{
				if (releaseUI)
				{
					if (hideUI)
					{
						hideUI = false;
					}
					else
					{
						hideUI = true;
					}
					SoundEngine.PlaySound(12);
				}
				releaseUI = false;
			}
			else
			{
				releaseUI = true;
			}
		}

		private static void DoUpdate_F7_ToggleGraphicsDiagnostics()
		{
			if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F7) && !drawingPlayerChat && !editSign && !editChest)
			{
				if (drawRelease)
				{
					SoundEngine.PlaySound(12);
					if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt))
					{
						TimeLogger.Start();
					}
					else if (drawDiag)
					{
						drawDiag = false;
					}
					else
					{
						drawDiag = true;
					}
				}
				drawRelease = false;
			}
			else
			{
				drawRelease = true;
			}
		}

		private static void DoUpdate_F8_ToggleNetDiagnostics()
		{
			if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F8) && !drawingPlayerChat && !editSign && !editChest)
			{
				if (netRelease)
				{
					SoundEngine.PlaySound(12);
					shouldDrawNetDiagnosticsUI = !shouldDrawNetDiagnosticsUI;
				}
				netRelease = false;
			}
			else
			{
				netRelease = true;
			}
		}

		private static void DoUpdate_F9_ToggleLighting()
		{
			if (keyState.PressingShift() && keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F9) && !drawingPlayerChat && !editSign && !editChest)
			{
				if (RGBRelease)
				{
					SoundEngine.PlaySound(12);
					Lighting.NextLightMode();
				}
				RGBRelease = false;
			}
			else
			{
				RGBRelease = true;
			}
		}

		private static void DoUpdate_F10_ToggleFPS()
		{
			if (keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F10) && !drawingPlayerChat && !editSign && !editChest)
			{
				if (frameRelease)
				{
					SoundEngine.PlaySound(12);
					if (showFrameRate)
					{
						showFrameRate = false;
					}
					else
					{
						showFrameRate = true;
					}
				}
				frameRelease = false;
			}
			else
			{
				frameRelease = true;
			}
		}

		private static void AnimateTiles()
		{
			tileFrameCounter[12]++;
			if (tileFrameCounter[12] > 5)
			{
				tileFrameCounter[12] = 0;
				tileFrame[12]++;
				if (tileFrame[12] >= 10)
				{
					tileFrame[12] = 0;
				}
			}
			tileFrameCounter[17]++;
			if (tileFrameCounter[17] > 5)
			{
				tileFrameCounter[17] = 0;
				tileFrame[17]++;
				if (tileFrame[17] >= 12)
				{
					tileFrame[17] = 0;
				}
			}
			if (++tileFrameCounter[133] >= 4)
			{
				tileFrameCounter[133] = 0;
				if (++tileFrame[133] >= 6)
				{
					tileFrame[133] = 0;
				}
			}
			tileFrameCounter[31]++;
			if (tileFrameCounter[31] > 10)
			{
				tileFrameCounter[31] = 0;
				tileFrame[31]++;
				if (tileFrame[31] > 1)
				{
					tileFrame[31] = 0;
				}
			}
			tileFrameCounter[77]++;
			if (tileFrameCounter[77] > 5)
			{
				tileFrameCounter[77] = 0;
				tileFrame[77]++;
				if (tileFrame[77] >= 12)
				{
					tileFrame[77] = 0;
				}
			}
			tileFrameCounter[106]++;
			if (tileFrameCounter[106] > 4)
			{
				tileFrameCounter[106] = 0;
				tileFrame[106]++;
				if (tileFrame[106] >= 2)
				{
					tileFrame[106] = 0;
				}
			}
			tileFrameCounter[207]++;
			if (tileFrameCounter[207] > 4)
			{
				tileFrameCounter[207] = 0;
				tileFrame[207]++;
				if (tileFrame[207] >= 6)
				{
					tileFrame[207] = 0;
				}
			}
			tileFrameCounter[215]++;
			if (tileFrameCounter[215] >= 4)
			{
				tileFrameCounter[215] = 0;
				tileFrame[215]++;
				if (tileFrame[215] >= 8)
				{
					tileFrame[215] = 0;
				}
			}
			tileFrameCounter[592]++;
			if (tileFrameCounter[592] >= 5)
			{
				tileFrameCounter[592] = 0;
				tileFrame[592]++;
				if (tileFrame[592] >= 8)
				{
					tileFrame[592] = 0;
				}
			}
			tileFrameCounter[217]++;
			if (tileFrameCounter[217] > 4)
			{
				tileFrameCounter[217] = 0;
				tileFrame[217]++;
				if (tileFrame[217] >= 5)
				{
					tileFrame[217] = 0;
				}
			}
			tileFrameCounter[218]++;
			if (tileFrameCounter[218] > 4)
			{
				tileFrameCounter[218] = 0;
				tileFrame[218]++;
				if (tileFrame[218] >= 2)
				{
					tileFrame[218] = 0;
				}
			}
			tileFrameCounter[219]++;
			if (tileFrameCounter[219] > 4)
			{
				tileFrameCounter[219] = 0;
				tileFrame[219]++;
				if (tileFrame[219] >= 10)
				{
					tileFrame[219] = 0;
				}
			}
			tileFrameCounter[220]++;
			if (tileFrameCounter[220] > 4)
			{
				tileFrameCounter[220] = 0;
				tileFrame[220]++;
				if (tileFrame[220] >= 4)
				{
					tileFrame[220] = 0;
				}
			}
			tileFrameCounter[231]++;
			if (tileFrameCounter[231] > 16)
			{
				tileFrameCounter[231] = 0;
				tileFrame[231]++;
				if (tileFrame[231] >= 7)
				{
					tileFrame[231] = 0;
				}
			}
			tileFrameCounter[235]++;
			if (tileFrameCounter[235] > 20)
			{
				tileFrameCounter[235] = 0;
				tileFrame[235]++;
				if (tileFrame[235] >= 4)
				{
					tileFrame[235] = 0;
				}
				if (tileFrame[235] > 1)
				{
					tileLighted[235] = true;
				}
				else
				{
					tileLighted[235] = false;
				}
			}
			tileFrameCounter[238]++;
			if (tileFrameCounter[238] > 20)
			{
				tileFrameCounter[238] = 0;
				tileFrame[238]++;
				if (tileFrame[238] >= 4)
				{
					tileFrame[238] = 0;
				}
			}
			tileFrameCounter[243]++;
			if (tileFrameCounter[243] > 4)
			{
				tileFrameCounter[243] = 0;
				tileFrame[243]++;
				if (tileFrame[243] >= 6)
				{
					tileFrame[243] = 0;
				}
			}
			tileFrameCounter[244]++;
			if (tileFrameCounter[244] > 4)
			{
				tileFrameCounter[244] = 0;
				tileFrame[244]++;
				if (tileFrame[244] >= 6)
				{
					tileFrame[244] = 0;
				}
			}
			tileFrameCounter[247]++;
			if (tileFrameCounter[247] > 4)
			{
				tileFrameCounter[247] = 0;
				tileFrame[247]++;
				if (tileFrame[247] > 7)
				{
					tileFrame[247] = 0;
				}
			}
			tileFrameCounter[96]++;
			if (tileFrameCounter[96] > 4)
			{
				tileFrameCounter[96] = 0;
				tileFrame[96]++;
				if (tileFrame[96] > 3)
				{
					tileFrame[96] = 0;
				}
			}
			tileFrameCounter[171]++;
			if (tileFrameCounter[171] > 16)
			{
				tileFrameCounter[171] = 0;
				tileFrame[171]++;
				if (tileFrame[171] > 3)
				{
					tileFrame[171] = 0;
				}
			}
			tileFrameCounter[270]++;
			if (tileFrameCounter[270] > 8)
			{
				tileFrameCounter[270] = 0;
				tileFrame[270]++;
				if (tileFrame[270] > 5)
				{
					tileFrame[270] = 0;
				}
			}
			tileFrame[271] = tileFrame[270];
			tileFrame[581] = tileFrame[270];
			tileFrameCounter[272]++;
			if (tileFrameCounter[272] >= 10)
			{
				tileFrameCounter[272] = 0;
				tileFrame[272]++;
				if (tileFrame[272] > 1)
				{
					tileFrame[272] = 0;
				}
			}
			tileFrameCounter[300]++;
			if (tileFrameCounter[300] >= 5)
			{
				tileFrameCounter[300] = 0;
				tileFrame[300]++;
				if (tileFrame[300] > 6)
				{
					tileFrame[300] = 0;
				}
			}
			tileFrameCounter[301]++;
			if (tileFrameCounter[301] >= 5)
			{
				tileFrameCounter[301] = 0;
				tileFrame[301]++;
				if (tileFrame[301] > 7)
				{
					tileFrame[301] = 0;
				}
			}
			tileFrameCounter[302]++;
			if (tileFrameCounter[302] >= 5)
			{
				tileFrameCounter[302] = 0;
				tileFrame[302]++;
				if (tileFrame[302] > 3)
				{
					tileFrame[302] = 0;
				}
			}
			tileFrameCounter[303]++;
			if (tileFrameCounter[303] >= 5)
			{
				tileFrameCounter[303] = 0;
				tileFrame[303]++;
				if (tileFrame[303] > 4)
				{
					tileFrame[303] = 0;
				}
			}
			tileFrameCounter[305]++;
			if (tileFrameCounter[305] >= 5)
			{
				tileFrameCounter[305] = 0;
				tileFrame[305]++;
				if (tileFrame[305] > 11)
				{
					tileFrame[305] = 0;
				}
			}
			tileFrameCounter[306]++;
			if (tileFrameCounter[306] >= 5)
			{
				tileFrameCounter[306] = 0;
				tileFrame[306]++;
				if (tileFrame[306] > 11)
				{
					tileFrame[306] = 0;
				}
			}
			tileFrameCounter[307]++;
			if (tileFrameCounter[307] >= 5)
			{
				tileFrameCounter[307] = 0;
				tileFrame[307]++;
				if (tileFrame[307] > 1)
				{
					tileFrame[307] = 0;
				}
			}
			tileFrameCounter[308]++;
			if (tileFrameCounter[308] >= 5)
			{
				tileFrameCounter[308] = 0;
				tileFrame[308]++;
				if (tileFrame[308] > 7)
				{
					tileFrame[308] = 0;
				}
			}
			tileFrameCounter[314]++;
			if (tileFrameCounter[314] >= 10)
			{
				tileFrameCounter[314] = 0;
				tileFrame[314]++;
				if (tileFrame[314] > 4)
				{
					tileFrame[314] = 0;
				}
			}
			tileFrameCounter[326]++;
			if (tileFrameCounter[326] >= 5)
			{
				tileFrameCounter[326] = 0;
				tileFrame[326]++;
				if (tileFrame[326] > 7)
				{
					tileFrame[326] = 0;
				}
			}
			tileFrameCounter[327]++;
			if (tileFrameCounter[327] >= 10)
			{
				tileFrameCounter[327] = 0;
				tileFrame[327]++;
				if (tileFrame[327] > 7)
				{
					tileFrame[327] = 0;
				}
			}
			tileFrameCounter[345]++;
			if (tileFrameCounter[345] >= 10)
			{
				tileFrameCounter[345] = 0;
				tileFrame[345]++;
				if (tileFrame[345] > 7)
				{
					tileFrame[345] = 0;
				}
			}
			tileFrameCounter[458]++;
			if (tileFrameCounter[458] >= 10)
			{
				tileFrameCounter[458] = 0;
				tileFrame[458]++;
				if (tileFrame[458] > 7)
				{
					tileFrame[458] = 0;
				}
			}
			tileFrameCounter[459]++;
			if (tileFrameCounter[459] >= 10)
			{
				tileFrameCounter[459] = 0;
				tileFrame[459]++;
				if (tileFrame[459] > 7)
				{
					tileFrame[459] = 0;
				}
			}
			tileFrameCounter[336]++;
			if (tileFrameCounter[336] >= 5)
			{
				tileFrameCounter[336] = 0;
				tileFrame[336]++;
				if (tileFrame[336] > 3)
				{
					tileFrame[336] = 0;
				}
			}
			tileFrameCounter[328]++;
			if (tileFrameCounter[328] >= 5)
			{
				tileFrameCounter[328] = 0;
				tileFrame[328]++;
				if (tileFrame[328] > 7)
				{
					tileFrame[328] = 0;
				}
			}
			tileFrameCounter[329]++;
			if (tileFrameCounter[329] >= 5)
			{
				tileFrameCounter[329] = 0;
				tileFrame[329]++;
				if (tileFrame[329] > 7)
				{
					tileFrame[329] = 0;
				}
			}
			int num = 20;
			if (++tileFrameCounter[507] >= num * 8)
			{
				tileFrameCounter[507] = 0;
			}
			if (++tileFrameCounter[508] >= num * 8)
			{
				tileFrameCounter[508] = 0;
			}
			for (int i = 340; i <= 344; i++)
			{
				tileFrameCounter[i]++;
				if (tileFrameCounter[i] >= 5)
				{
					tileFrameCounter[i] = 0;
					tileFrame[i]++;
					if (tileFrame[i] > 3)
					{
						tileFrame[i] = 0;
					}
				}
			}
			tileFrameCounter[351]++;
			if (tileFrameCounter[351] >= 5)
			{
				tileFrameCounter[351] = 0;
				tileFrame[351]++;
				if (tileFrame[351] > 2)
				{
					tileFrame[351] = 0;
				}
			}
			tileFrameCounter[354]++;
			if (tileFrameCounter[354] >= 5)
			{
				tileFrameCounter[354] = 0;
				tileFrame[354]++;
				if (tileFrame[354] >= 8)
				{
					tileFrame[354] = 0;
				}
			}
			tileFrame[355] = tileFrame[354];
			tileFrameCounter[377]++;
			if (tileFrameCounter[377] >= 5)
			{
				tileFrameCounter[377] = 0;
				tileFrame[377]++;
				if (tileFrame[377] >= 4)
				{
					tileFrame[377] = 0;
				}
			}
			tileFrameCounter[379]++;
			if (tileFrameCounter[379] >= 10)
			{
				tileFrameCounter[379] = 0;
				tileFrame[379]++;
				if (tileFrame[379] >= 4)
				{
					tileFrame[379] = 0;
				}
			}
			if (++tileFrameCounter[390] >= 8)
			{
				tileFrameCounter[390] = 0;
				if (++tileFrame[390] >= 7)
				{
					tileFrame[390] = 0;
				}
			}
			if (++tileFrameCounter[228] >= 5)
			{
				tileFrameCounter[228] = 0;
				if (++tileFrame[228] >= 3)
				{
					tileFrame[228] = 0;
				}
			}
			if (++tileFrameCounter[405] >= 5)
			{
				tileFrameCounter[405] = 0;
				if (++tileFrame[405] >= 8)
				{
					tileFrame[405] = 0;
				}
			}
			if (++tileFrameCounter[406] >= 8)
			{
				tileFrameCounter[406] = 0;
				if (++tileFrame[406] >= 6)
				{
					tileFrame[406] = 0;
				}
			}
			if (++tileFrameCounter[452] >= 5)
			{
				tileFrameCounter[452] = 0;
				if (++tileFrame[452] >= 15)
				{
					tileFrame[452] = 0;
				}
			}
			if (++tileFrameCounter[455] >= 5)
			{
				tileFrameCounter[455] = 0;
				if (++tileFrame[455] >= 6)
				{
					tileFrame[455] = 0;
				}
			}
			if (++tileFrameCounter[499] >= 5)
			{
				tileFrameCounter[499] = 0;
				if (++tileFrame[499] >= 8)
				{
					tileFrame[499] = 0;
				}
			}
			if (++tileFrameCounter[129] >= 8)
			{
				tileFrameCounter[129] = 0;
				if (++tileFrame[129] >= 6)
				{
					tileFrame[129] = 0;
				}
			}
			tileFrameCounter[453] += ((!WorldGen.gen) ? rand.Next(3) : 0);
			if (++tileFrameCounter[453] >= 60)
			{
				tileFrameCounter[453] = 0;
			}
			if (++tileFrame[412] >= 240)
			{
				tileFrame[412] = 0;
			}
			tileFrameCounter[456] += ((!WorldGen.gen) ? rand.Next(3) : 0);
			if (++tileFrameCounter[456] >= 80)
			{
				tileFrameCounter[456] = 0;
			}
			if (++tileFrame[456] >= 240)
			{
				tileFrame[456] = 0;
			}
			if (++tileFrameCounter[410] >= 8)
			{
				tileFrameCounter[410] = 0;
				if (++tileFrame[410] >= 8)
				{
					tileFrame[410] = 0;
				}
			}
			if (++tileFrameCounter[480] >= 8)
			{
				tileFrameCounter[480] = 0;
				if (++tileFrame[480] >= 8)
				{
					tileFrame[480] = 0;
				}
			}
			if (++tileFrameCounter[509] >= 8)
			{
				tileFrameCounter[509] = 0;
				if (++tileFrame[509] >= 8)
				{
					tileFrame[509] = 0;
				}
			}
			if (++tileFrameCounter[421] >= 4)
			{
				tileFrameCounter[421] = 0;
				if (++tileFrame[421] >= 4)
				{
					tileFrame[421] = 0;
				}
			}
			if (++tileFrameCounter[422] >= 4)
			{
				tileFrameCounter[422] = 0;
				if (--tileFrame[422] < 0)
				{
					tileFrame[422] = 3;
				}
			}
			if (++tileFrameCounter[463] >= 10)
			{
				tileFrameCounter[463] = 0;
				if (++tileFrame[463] >= 6)
				{
					tileFrame[463] = 0;
				}
			}
			if (++tileFrameCounter[464] >= 5)
			{
				tileFrameCounter[464] = 0;
				if (++tileFrame[464] >= 23)
				{
					tileFrame[464] = 0;
				}
			}
			if (++tileFrameCounter[485] >= 20)
			{
				tileFrameCounter[485] = 0;
			}
			if (++tileFrameCounter[491] >= 40)
			{
				tileFrameCounter[491] = 0;
			}
			if (++tileFrameCounter[564] >= 5)
			{
				tileFrameCounter[564] = 0;
				tileFrame[564]++;
				if (tileFrame[564] >= 36)
				{
					tileFrame[564] = 0;
				}
			}
			if (++tileFrameCounter[593] >= 5)
			{
				tileFrameCounter[593] = 0;
				tileFrame[593]++;
				if (tileFrame[593] >= 9)
				{
					tileFrame[593] = 5;
				}
			}
			if (++tileFrameCounter[594] >= 5)
			{
				tileFrameCounter[594] = 0;
				tileFrame[594]++;
				if (tileFrame[594] >= 9)
				{
					tileFrame[594] = 5;
				}
			}
			if (++tileFrameCounter[614] >= 5)
			{
				tileFrameCounter[614] = 0;
				tileFrame[614]++;
				if (tileFrame[614] >= 6)
				{
					tileFrame[614] = 0;
				}
			}
			if (++tileFrameCounter[565] >= 4)
			{
				tileFrameCounter[565] = 0;
				tileFrame[565]++;
				if (tileFrame[565] >= 5)
				{
					tileFrame[565] = 0;
				}
			}
			if (++tileFrameCounter[572] >= 8)
			{
				tileFrameCounter[572] = 0;
				if (++tileFrame[572] >= 6)
				{
					tileFrame[572] = 0;
				}
			}
			if (++tileFrameCounter[597] >= 64)
			{
				tileFrameCounter[597] = 0;
			}
			int num2 = (int)MathHelper.Clamp((float)Math.Floor(Math.Abs(WindForVisuals) * 10f) * (float)Math.Sign(WindForVisuals), -5f, 5f);
			tileFrameCounter[489] += num2;
			tileFrameCounter[489] %= 320;
			if (tileFrameCounter[489] < 0)
			{
				tileFrameCounter[489] += 320;
			}
			AnimateTiles_WeatherVane();
			int num3 = (int)MathHelper.Clamp((float)Math.Floor(Math.Abs(WindForVisuals) * 10f) * (float)Math.Sign(WindForVisuals), -5f, 5f);
			tileFrameCounter[493] += num3;
			tileFrameCounter[493] %= 120;
			if (tileFrameCounter[493] < 0)
			{
				tileFrameCounter[493] += 120;
			}
			AnimateTiles_CritterCages();
		}

		private static void AnimateTiles_WeatherVane()
		{
			int num = Math.Sign(WindForVisuals);
			int num2 = (int)MathHelper.Clamp((float)Math.Floor(Math.Abs(WindForVisuals) * 10f), -5f, 5f);
			int num3 = 6;
			tileFrameCounter[490] += num2;
			if (tileFrameCounter[490] < num3)
			{
				return;
			}
			tileFrameCounter[490] -= num3 * tileFrameCounter[490];
			if ((tileFrame[490] != 0 || num != -1) && (tileFrame[490] != 6 || num != 1))
			{
				if (++tileFrame[490] >= 12)
				{
					tileFrame[490] = 0;
					weatherVaneBobframe = 0;
				}
			}
			else if (rand.NextFloat() < Math.Abs(WindForVisuals) * 0.5f && ++weatherVaneBobframe == 8)
			{
				weatherVaneBobframe = 0;
			}
		}

		private static void DoUpdate_AnimateWalls()
		{
			wallFrameCounter[136]++;
			if (wallFrameCounter[136] >= 5)
			{
				wallFrameCounter[136] = 0;
				wallFrame[136]++;
				if (wallFrame[136] > 7)
				{
					wallFrame[136] = 0;
				}
			}
			wallFrameCounter[137]++;
			if (wallFrameCounter[137] >= 10)
			{
				wallFrameCounter[137] = 0;
				wallFrame[137]++;
				if (wallFrame[137] > 7)
				{
					wallFrame[137] = 0;
				}
			}
			int num = 226;
			wallFrameCounter[num]++;
			if (wallFrameCounter[num] >= 10)
			{
				wallFrameCounter[num] = 0;
				wallFrame[num]++;
				if (wallFrame[num] > 7)
				{
					wallFrame[num] = 0;
				}
			}
			num = 227;
			wallFrameCounter[num]++;
			if (wallFrameCounter[num] >= 5)
			{
				wallFrameCounter[num] = 0;
				wallFrame[num]++;
				if (wallFrame[num] > 7)
				{
					wallFrame[num] = 0;
				}
			}
			num = 225;
			wallFrameCounter[num]++;
			if (wallFrameCounter[num] >= 5)
			{
				wallFrameCounter[num] = 0;
				wallFrame[num]++;
				if (wallFrame[num] > 1)
				{
					wallFrame[num] = 0;
				}
			}
			wallFrameCounter[172]++;
			if (wallFrameCounter[172] >= 10)
			{
				wallFrameCounter[172] = 0;
				wallFrame[172]++;
				if (wallFrame[172] > 7)
				{
					wallFrame[172] = 0;
				}
			}
			wallFrameCounter[168]++;
			if (wallFrameCounter[168] >= 5)
			{
				wallFrameCounter[168] = 0;
				wallFrame[168]++;
				if (wallFrame[168] > 7)
				{
					wallFrame[168] = 0;
				}
			}
			wallFrameCounter[169]++;
			if (wallFrameCounter[169] >= 5)
			{
				wallFrameCounter[169] = 0;
				wallFrame[169]++;
				if (wallFrame[169] > 7)
				{
					wallFrame[169] = 0;
				}
			}
			int num2 = 20;
			if (++wallFrameCounter[242] >= num2 * 8)
			{
				wallFrameCounter[242] = 0;
			}
			if (++wallFrameCounter[243] >= num2 * 8)
			{
				wallFrameCounter[243] = 0;
			}
			wallFrameCounter[144]++;
			int num3 = 5;
			int num4 = 10;
			if (wallFrameCounter[144] < num3)
			{
				wallFrame[144] = 0;
				return;
			}
			if (wallFrameCounter[144] < num3)
			{
				wallFrame[144] = 1;
				return;
			}
			if (wallFrameCounter[144] < num3 * 2)
			{
				wallFrame[144] = 2;
				return;
			}
			if (wallFrameCounter[144] < num3 * 3)
			{
				wallFrame[144] = 3;
				return;
			}
			if (wallFrameCounter[144] < num3 * 4)
			{
				wallFrame[144] = 4;
				return;
			}
			if (wallFrameCounter[144] < num3 * 5)
			{
				wallFrame[144] = 5;
				return;
			}
			if (wallFrameCounter[144] < num3 * 6)
			{
				wallFrame[144] = 6;
				return;
			}
			if (wallFrameCounter[144] < num3 * 7)
			{
				wallFrame[144] = 7;
				return;
			}
			if (wallFrameCounter[144] < num3 * (8 + num4))
			{
				wallFrame[144] = 8;
				return;
			}
			if (wallFrameCounter[144] < num3 * (9 + num4))
			{
				wallFrame[144] = 7;
				return;
			}
			if (wallFrameCounter[144] < num3 * (10 + num4))
			{
				wallFrame[144] = 6;
				return;
			}
			if (wallFrameCounter[144] < num3 * (11 + num4))
			{
				wallFrame[144] = 5;
				return;
			}
			if (wallFrameCounter[144] < num3 * (12 + num4))
			{
				wallFrame[144] = 4;
				return;
			}
			if (wallFrameCounter[144] < num3 * (13 + num4))
			{
				wallFrame[144] = 3;
				return;
			}
			if (wallFrameCounter[144] < num3 * (14 + num4))
			{
				wallFrame[144] = 2;
				return;
			}
			if (wallFrameCounter[144] < num3 * (15 + num4))
			{
				wallFrame[144] = 1;
				return;
			}
			wallFrame[144] = 0;
			if (wallFrameCounter[144] > num3 * (16 + num4 * 2))
			{
				wallFrameCounter[144] = 0;
			}
		}

		private void DoUpdate_AnimateWaterfalls()
		{
			wFrCounter += windSpeedCurrent * 2f;
			if (wFrCounter > 4f)
			{
				wFrCounter = 0f;
				wFrame += 1f;
			}
			if (wFrCounter < 0f)
			{
				wFrCounter = 4f;
				wFrame -= 1f;
			}
			if (wFrame > 16f)
			{
				wFrame = 1f;
			}
			if (wFrame < 1f)
			{
				wFrame = 16f;
			}
			waterfallManager.UpdateFrame();
		}

		private static void DoUpdate_AnimateVisualPlayerAura()
		{
			if (gFadeDir == 1)
			{
				gFader += 0.1f;
				gFade = (byte)gFader;
				if (gFade > 150)
				{
					gFadeDir = 0;
				}
			}
			else
			{
				gFader -= 0.1f;
				gFade = (byte)gFader;
				if (gFade < 100)
				{
					gFadeDir = 1;
				}
			}
		}

		private void DoUpdate_AnimateDiscoRGB()
		{
			int num = 7;
			if (DiscoStyle == 0)
			{
				DiscoG += num;
				if (DiscoG >= 255)
				{
					DiscoG = 255;
					DiscoStyle++;
				}
			}
			if (DiscoStyle == 1)
			{
				DiscoR -= num;
				if (DiscoR <= 0)
				{
					DiscoR = 0;
					DiscoStyle++;
				}
			}
			if (DiscoStyle == 2)
			{
				DiscoB += num;
				if (DiscoB >= 255)
				{
					DiscoB = 255;
					DiscoStyle++;
				}
			}
			if (DiscoStyle == 3)
			{
				DiscoG -= num;
				if (DiscoG <= 0)
				{
					DiscoG = 0;
					DiscoStyle++;
				}
			}
			if (DiscoStyle == 4)
			{
				DiscoR += num;
				if (DiscoR >= 255)
				{
					DiscoR = 255;
					DiscoStyle++;
				}
			}
			if (DiscoStyle == 5)
			{
				DiscoB -= num;
				if (DiscoB <= 0)
				{
					DiscoB = 0;
					DiscoStyle = 0;
				}
			}
		}

		private static void DoUpdate_AnimateBackgrounds()
		{
			DoUpdate_AnimateBackgrounds_UpdateForest(0, treeMntBGSet1);
			DoUpdate_AnimateBackgrounds_UpdateForest(10, treeMntBGSet2);
			DoUpdate_AnimateBackgrounds_UpdateForest(11, treeMntBGSet3);
			DoUpdate_AnimateBackgrounds_UpdateForest(12, treeMntBGSet4);
		}

		private static void DoUpdate_AnimateBackgrounds_UpdateForest(int bgIndex, int[] bgSet)
		{
			if (bgSet[1] == 94 || (bgSet[1] >= 114 && bgSet[1] <= 116))
			{
				bgFrameCounter[bgIndex]++;
				if (bgFrameCounter[bgIndex] >= 6)
				{
					bgFrameCounter[bgIndex] = 0;
					bgFrame[bgIndex]++;
					if (bgFrame[bgIndex] >= 4)
					{
						bgFrame[bgIndex] = 0;
					}
				}
				if (bgFrame[bgIndex] == 0)
				{
					bgSet[1] = 94;
				}
				else if (bgFrame[bgIndex] == 1)
				{
					bgSet[1] = 114;
				}
				else if (bgFrame[bgIndex] == 2)
				{
					bgSet[1] = 115;
				}
				else
				{
					bgSet[1] = 116;
				}
				if (bgFrame[bgIndex] == 0)
				{
					bgSet[0] = 93;
				}
				else if (bgFrame[bgIndex] == 1)
				{
					bgSet[0] = 168;
				}
				else if (bgFrame[bgIndex] == 2)
				{
					bgSet[0] = 169;
				}
				else
				{
					bgSet[0] = 170;
				}
			}
			if (bgSet[1] < 180 || bgSet[1] > 183)
			{
				return;
			}
			bgFrameCounter[bgIndex]++;
			if (bgFrameCounter[bgIndex] >= 6)
			{
				bgFrameCounter[bgIndex] = 0;
				bgFrame[bgIndex]++;
				if (bgFrame[bgIndex] >= 4)
				{
					bgFrame[bgIndex] = 0;
				}
			}
			if (bgFrame[bgIndex] == 0)
			{
				bgSet[1] = 180;
			}
			else if (bgFrame[bgIndex] == 1)
			{
				bgSet[1] = 181;
			}
			else if (bgFrame[bgIndex] == 2)
			{
				bgSet[1] = 182;
			}
			else
			{
				bgSet[1] = 183;
			}
		}

		private static void DoUpdate_AutoSave()
		{
			if (!gameMenu && netMode == 1)
			{
				if (!saveTime.IsRunning)
				{
					saveTime.Start();
				}
				if (saveTime.ElapsedMilliseconds > 300000)
				{
					saveTime.Reset();
					WorldGen.saveToonWhilePlaying();
				}
			}
			else if (!gameMenu && (autoSave || netMode == 2))
			{
				if (!saveTime.IsRunning)
				{
					saveTime.Start();
				}
				if (saveTime.ElapsedMilliseconds > 600000)
				{
					saveTime.Reset();
					if (netMode != 2)
					{
						WorldGen.saveToonWhilePlaying();
					}
					WorldGen.saveAndPlay();
				}
			}
			else if (saveTime.IsRunning)
			{
				saveTime.Stop();
			}
		}

		private static void UpdateSettingUnlocks()
		{
			if (netMode != 2 && !dedServ && hardMode && !SettingsUnlock_WorldEvil)
			{
				SettingsUnlock_WorldEvil = true;
				SaveSettings();
			}
		}

		public static void InputTextSign()
		{
			if (!IngameFancyUI.CanShowVirtualKeyboard(1) || UIVirtualKeyboard.KeyboardContext != 1)
			{
				PlayerInput.WritingText = true;
				instance.HandleIME();
				npcChatText = GetInputText(npcChatText, allowMultiLine: true);
				if (inputTextEnter)
				{
					byte[] bytes = new byte[1]
					{
						10
					};
					npcChatText += Encoding.ASCII.GetString(bytes);
				}
				else if (inputTextEscape)
				{
					InputTextSignCancel();
				}
			}
		}

		public static void InputTextChest()
		{
			if (!IngameFancyUI.CanShowVirtualKeyboard(2) || UIVirtualKeyboard.KeyboardContext != 2)
			{
				npcChatText = GetInputText(npcChatText);
				if (inputTextEnter)
				{
					ChestUI.RenameChestSubmit(player[myPlayer]);
				}
				else if (inputTextEscape)
				{
					ChestUI.RenameChestCancel();
				}
			}
		}

		public static void InputTextSignCancel()
		{
			SoundEngine.PlaySound(12);
			editSign = false;
			blockKey = Microsoft.Xna.Framework.Input.Keys.Escape.ToString();
			UIVirtualKeyboard.CacheCancelledInput(1);
			npcChatText = sign[player[myPlayer].sign].text;
		}

		private static void UpdateMenu()
		{
			if (WorldGen.drunkWorldGen)
			{
				screenPosition.X -= 20f;
				if (WorldGen.drunkWorldGenText)
				{
					numClouds = rand.Next(100, 200);
					statusText = string.Concat(rand.Next(999999999));
					for (int i = 0; i < 3; i++)
					{
						if (rand.Next(2) == 0)
						{
							statusText += rand.Next(999999999);
						}
					}
				}
			}
			gamePaused = false;
			thunderDelay = 0;
			lightning = 0f;
			lightningSpeed = 0f;
			GraveyardVisualIntensity = 0f;
			InGameNotificationsTracker.Clear();
			playerInventory = false;
			exitScale = 0.8f;
			if (netMode == 0)
			{
				if (instance.IsActive && hasFocus && !dayTime && (rand.Next(12) == 0 || WorldGen.drunkWorldGen))
				{
					int num = rand.Next(numStars);
					if (star[num] != null && !star[num].hidden && !star[num].falling)
					{
						star[num].Fall();
					}
				}
				if (gameMenu)
				{
					if (WorldGen.gen)
					{
						lockMenuBGChange = true;
					}
					else if (menuMode == 0)
					{
						lockMenuBGChange = false;
					}
					if (!lockMenuBGChange)
					{
						if (dayTime)
						{
							menuBGChangedDay = false;
						}
						else if (!menuBGChangedDay && time >= 16200.0)
						{
							menuBGChangedDay = true;
							int style = WorldGen.corruptBG;
							WorldGen.RandomizeBackgrounds(rand);
							if (treeBGSet1[0] == 173)
							{
								WorldGen.RandomizeBackgrounds(rand);
							}
							if (treeBGSet1[0] == 173)
							{
								WorldGen.RandomizeBackgrounds(rand);
							}
							WorldGen.setBG(1, style);
						}
						if (!dayTime)
						{
							menuBGChangedNight = false;
						}
						else if (!menuBGChangedNight && time >= 27000.0)
						{
							moonType = rand.Next(9);
							menuBGChangedNight = true;
							int treeBG = WorldGen.treeBG1;
							WorldGen.RandomizeBackgrounds(rand);
							WorldGen.setBG(0, treeBG);
						}
					}
					else
					{
						menuBGChangedDay = true;
						menuBGChangedNight = true;
					}
				}
				if (alreadyGrabbingSunOrMoon)
				{
					return;
				}
				if (WorldGen.drunkWorldGen)
				{
					time -= 6.0;
					if (dayTime)
					{
						time -= 1000.0;
					}
					if (time < 0.0)
					{
						time = 32400.0;
						dayTime = false;
					}
				}
				else if (dayTime)
				{
					time += 33.882352941176471;
				}
				else
				{
					time += 30.857142857142858;
				}
				if (!dayTime)
				{
					if (time > 32400.0)
					{
						bloodMoon = false;
						time = 0.0;
						dayTime = true;
						moonPhase++;
						if (moonPhase >= 7)
						{
							moonPhase = 0;
						}
					}
				}
				else if (time > 54000.0)
				{
					time = 0.0;
					dayTime = false;
				}
			}
			else if (netMode == 1)
			{
				UpdateTime();
			}
		}

		public static void clrInput()
		{
			keyCount = 0;
		}

		[DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
		public static extern short GetKeyState(int keyCode);

		public static string GetInputText(string oldString, bool allowMultiLine = false)
		{
			if (!hasFocus)
			{
				return oldString;
			}
			inputTextEnter = false;
			inputTextEscape = false;
			string text = oldString;
			string text2 = "";
			if (text == null)
			{
				text = "";
			}
			bool flag = false;
			if (inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftControl) || inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightControl))
			{
				if (inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Z) && !oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Z))
				{
					text = "";
				}
				else if (inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X) && !oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X))
				{
					//Platform.Get<IClipboard>().Value = (oldString);
					text = "";
				}
				else if ((inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C) && !oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C)) || (inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert) && !oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert)))
				{
					//Platform.Get<IClipboard>().Value = (oldString);
				}
				else if (inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V) && !oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V))
				{
					text2 = PasteTextIn(allowMultiLine, text2);
				}
			}
			else
			{
				if (inputText.PressingShift())
				{
					if (inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete) && !oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete))
					{
						//Platform.Get<IClipboard>().Value = (oldString);
						text = "";
					}
					if (inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert) && !oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert))
					{
						text2 = PasteTextIn(allowMultiLine, text2);
					}
				}
				for (int i = 0; i < keyCount; i++)
				{
					int num = keyInt[i];
					string str = keyString[i];
					if (num == 13)
					{
						inputTextEnter = true;
					}
					else if (num == 27)
					{
						inputTextEscape = true;
					}
					else if (num >= 32 && num != 127)
					{
						text2 += str;
					}
				}
			}
			keyCount = 0;
			text += text2;
			oldInputText = inputText;
			inputText = Keyboard.GetState();
			Microsoft.Xna.Framework.Input.Keys[] pressedKeys = inputText.GetPressedKeys();
			Microsoft.Xna.Framework.Input.Keys[] pressedKeys2 = oldInputText.GetPressedKeys();
			if (inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Back) && oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Back))
			{
				backSpaceRate -= 0.05f;
				if (backSpaceRate < 0f)
				{
					backSpaceRate = 0f;
				}
				if (backSpaceCount <= 0)
				{
					backSpaceCount = (int)Math.Round(backSpaceRate);
					flag = true;
				}
				backSpaceCount--;
			}
			else
			{
				backSpaceRate = 7f;
				backSpaceCount = 15;
			}
			for (int j = 0; j < pressedKeys.Length; j++)
			{
				bool flag2 = true;
				for (int k = 0; k < pressedKeys2.Length; k++)
				{
					if (pressedKeys[j] == pressedKeys2[k])
					{
						flag2 = false;
					}
				}
				if (string.Concat(pressedKeys[j]) == "Back" && (flag2 || flag) && text.Length > 0)
				{
					TextSnippet[] array = ChatManager.ParseMessage(text, Microsoft.Xna.Framework.Color.White).ToArray();
					text = ((!array[array.Length - 1].DeleteWhole) ? text.Substring(0, text.Length - 1) : text.Substring(0, text.Length - array[array.Length - 1].TextOriginal.Length));
				}
			}
			return text;
		}

		private static string PasteTextIn(bool allowMultiLine, string newKeys)
		{
			//newKeys = ((!allowMultiLine) ? (newKeys + Platform.Get<IClipboard>().Value) : (newKeys + Platform.Get<IClipboard>().MultiLineValue));
			return newKeys;
		}

		public void MouseTextHackZoom(string text, string buffTooltip = null)
		{
			MouseTextHackZoom(text, 0, 0, buffTooltip);
		}

		public void MouseTextHackZoom(string text, int itemRarity, byte diff = 0, string buffTooltip = null)
		{
			MouseText(text, buffTooltip, itemRarity, diff);
		}

		public void MouseTextNoOverride(string cursorText, int rare = 0, byte diff = 0, int hackedMouseX = -1, int hackedMouseY = -1, int hackedScreenWidth = -1, int hackedScreenHeight = -1, int pushWidthX = 0)
		{
			MouseText(cursorText, null, rare, diff, hackedMouseX, hackedMouseY, hackedScreenWidth, hackedScreenHeight, pushWidthX, noOverride: true);
		}

		public void MouseText(string cursorText, int rare = 0, byte diff = 0, int hackedMouseX = -1, int hackedMouseY = -1, int hackedScreenWidth = -1, int hackedScreenHeight = -1, int pushWidthX = 0)
		{
			MouseText(cursorText, null, rare, diff, hackedMouseX, hackedMouseY, hackedScreenWidth, hackedScreenHeight, pushWidthX);
		}

		public void MouseText(string cursorText, string buffTooltip, int rare = 0, byte diff = 0, int hackedMouseX = -1, int hackedMouseY = -1, int hackedScreenWidth = -1, int hackedScreenHeight = -1, int pushWidthX = 0, bool noOverride = false)
		{
			if (!_mouseTextCache.noOverride)
			{
				_mouseTextCache = new MouseTextCache
				{
					noOverride = noOverride,
					isValid = true,
					cursorText = cursorText,
					rare = rare,
					diff = diff,
					X = hackedMouseX,
					Y = hackedMouseY,
					hackedScreenWidth = hackedScreenWidth,
					hackedScreenHeight = hackedScreenHeight,
					buffTooltip = buffTooltip
				};
			}
		}

		private void MouseTextInner(MouseTextCache info)
		{
			string cursorText = info.cursorText;
			int num = info.rare;
			byte diff = info.diff;
			int x = info.X;
			int y = info.Y;
			int hackedScreenWidth = info.hackedScreenWidth;
			int hackedScreenHeight = info.hackedScreenHeight;
			if (mouseNPCType > -1 || cursorText == null)
			{
				return;
			}
			int X = mouseX + 14;
			int Y = mouseY + 14;
			if (x != -1 && y != -1)
			{
				X = x + 10;
				Y = y + 10;
			}
			if (ThickMouse)
			{
				X += 6;
				Y += 6;
			}
			if (!mouseItem.IsAir)
			{
				X += 34;
			}
			new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
			if (HoverItem.type > 0)
			{
				MouseText_DrawItemTooltip(info, num, diff, X, Y);
				return;
			}
			if (info.buffTooltip != null && info.buffTooltip != "")
			{
				MouseText_DrawBuffTooltip(info.buffTooltip, X, Y);
			}
			Vector2 vector = FontAssets.MouseText.Value.MeasureString(cursorText);
			if (hackedScreenHeight != -1 && hackedScreenWidth != -1)
			{
				if ((float)X + vector.X + 4f > (float)hackedScreenWidth)
				{
					X = (int)((float)hackedScreenWidth - vector.X - 4f);
				}
				if ((float)Y + vector.Y + 4f > (float)hackedScreenHeight)
				{
					Y = (int)((float)hackedScreenHeight - vector.Y - 4f);
				}
			}
			else
			{
				if ((float)X + vector.X + 4f > (float)screenWidth)
				{
					X = (int)((float)screenWidth - vector.X - 4f);
				}
				if ((float)Y + vector.Y + 4f > (float)screenHeight)
				{
					Y = (int)((float)screenHeight - vector.Y - 4f);
				}
			}
			float num2 = (float)(int)mouseTextColor / 255f;
			Microsoft.Xna.Framework.Color baseColor = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
			if (num == -13)
			{
				baseColor = new Microsoft.Xna.Framework.Color((int)(255f * num2), (int)(masterColor * 200f * num2), 0, (int)mouseTextColor);
			}
			if (num == -11)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(255f * num2), (byte)(175f * num2), (byte)(0f * num2), mouseTextColor);
			}
			if (num == -10)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(65f * num2), (byte)(255f * num2), (byte)(110f * num2), mouseTextColor);
			}
			if (num == -1)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(130f * num2), (byte)(130f * num2), (byte)(130f * num2), mouseTextColor);
			}
			if (num == 1)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(150f * num2), (byte)(150f * num2), (byte)(255f * num2), mouseTextColor);
			}
			if (num == 2)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(150f * num2), (byte)(255f * num2), (byte)(150f * num2), mouseTextColor);
			}
			if (num == 3)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(255f * num2), (byte)(200f * num2), (byte)(150f * num2), mouseTextColor);
			}
			if (num == 4)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(255f * num2), (byte)(150f * num2), (byte)(150f * num2), mouseTextColor);
			}
			if (num == 5)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(255f * num2), (byte)(150f * num2), (byte)(255f * num2), mouseTextColor);
			}
			if (num == 6)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(210f * num2), (byte)(160f * num2), (byte)(255f * num2), mouseTextColor);
			}
			if (num == 7)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(150f * num2), (byte)(255f * num2), (byte)(10f * num2), mouseTextColor);
			}
			if (num == 8)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(255f * num2), (byte)(255f * num2), (byte)(10f * num2), mouseTextColor);
			}
			if (num == 9)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(5f * num2), (byte)(200f * num2), (byte)(255f * num2), mouseTextColor);
			}
			if (num == 10)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(255f * num2), (byte)(40f * num2), (byte)(100f * num2), mouseTextColor);
			}
			if (num >= 11)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)(180f * num2), (byte)(40f * num2), (byte)(255f * num2), mouseTextColor);
			}
			if (HoverItem.expert || num == -12)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)((float)DiscoR * num2), (byte)((float)DiscoG * num2), (byte)((float)DiscoB * num2), mouseTextColor);
			}
			if (diff == 1)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)((float)(int)mcColor.R * num2), (byte)((float)(int)mcColor.G * num2), (byte)((float)(int)mcColor.B * num2), mouseTextColor);
			}
			if (diff == 2)
			{
				baseColor = new Microsoft.Xna.Framework.Color((byte)((float)(int)hcColor.R * num2), (byte)((float)(int)hcColor.G * num2), (byte)((float)(int)hcColor.B * num2), mouseTextColor);
			}
			ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, cursorText, new Vector2(X, Y), baseColor, 0f, Vector2.Zero, Vector2.One);
		}

		private void MouseText_DrawItemTooltip(MouseTextCache info, int rare, byte diff, int X, int Y)
		{
			bool settingsEnabled_OpaqueBoxBehindTooltips = SettingsEnabled_OpaqueBoxBehindTooltips;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
			Item hoverItem = HoverItem;
			int yoyoLogo = -1;
			int researchLine = -1;
			rare = hoverItem.rare;
			float knockBack = hoverItem.knockBack;
			float num = 1f;
			if (hoverItem.melee && player[myPlayer].kbGlove)
			{
				num += 1f;
			}
			if (player[myPlayer].kbBuff)
			{
				num += 0.5f;
			}
			if (num != 1f)
			{
				hoverItem.knockBack *= num;
			}
			if (hoverItem.ranged && player[myPlayer].shroomiteStealth)
			{
				hoverItem.knockBack *= 1f + (1f - player[myPlayer].stealth) * 0.5f;
			}
			int num2 = 30;
			int numLines = 1;
			string[] array = new string[num2];
			bool[] array2 = new bool[num2];
			bool[] array3 = new bool[num2];
			for (int i = 0; i < num2; i++)
			{
				array2[i] = false;
				array3[i] = false;
			}
			MouseText_DrawItemTooltip_GetLinesInfo(HoverItem, yoyoLogo, researchLine, knockBack, numLines, array, array2, array3);
			float num3 = (float)(int)mouseTextColor / 255f;
			float num4 = num3;
			int a = mouseTextColor;
			if (npcShop > 0 && hoverItem.value >= 0 && (hoverItem.type < 71 || hoverItem.type > 74))
			{
				LocalPlayer.GetItemExpectedPrice(hoverItem, out var calcForSelling, out var calcForBuying);
				int num5 = ((hoverItem.isAShopItem || hoverItem.buyOnce) ? calcForBuying : calcForSelling);
				if (hoverItem.shopSpecialCurrency != -1)
				{
					CustomCurrencyManager.GetPriceText(hoverItem.shopSpecialCurrency, array, numLines, num5);
					color = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(255f * num4), (byte)(255f * num4), a);
				}
				else if (num5 > 0)
				{
					string text = "";
					int num6 = 0;
					int num7 = 0;
					int num8 = 0;
					int num9 = 0;
					int num10 = num5 * hoverItem.stack;
					if (!hoverItem.buy)
					{
						num10 = num5 / 5;
						if (num10 < 1)
						{
							num10 = 1;
						}
						int num11 = num10;
						num10 *= hoverItem.stack;
						int amount = shopSellbackHelper.GetAmount(hoverItem);
						if (amount > 0)
						{
							num10 += (-num11 + calcForBuying) * Math.Min(amount, hoverItem.stack);
						}
					}
					if (num10 < 1)
					{
						num10 = 1;
					}
					if (num10 >= 1000000)
					{
						num6 = num10 / 1000000;
						num10 -= num6 * 1000000;
					}
					if (num10 >= 10000)
					{
						num7 = num10 / 10000;
						num10 -= num7 * 10000;
					}
					if (num10 >= 100)
					{
						num8 = num10 / 100;
						num10 -= num8 * 100;
					}
					if (num10 >= 1)
					{
						num9 = num10;
					}
					if (num6 > 0)
					{
						text = text + num6 + " " + Lang.inter[15].Value + " ";
					}
					if (num7 > 0)
					{
						text = text + num7 + " " + Lang.inter[16].Value + " ";
					}
					if (num8 > 0)
					{
						text = text + num8 + " " + Lang.inter[17].Value + " ";
					}
					if (num9 > 0)
					{
						text = text + num9 + " " + Lang.inter[18].Value + " ";
					}
					if (!hoverItem.buy)
					{
						array[numLines] = Lang.tip[49].Value + " " + text;
					}
					else
					{
						array[numLines] = Lang.tip[50].Value + " " + text;
					}
					numLines++;
					if (num6 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((byte)(220f * num4), (byte)(220f * num4), (byte)(198f * num4), a);
					}
					else if (num7 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((byte)(224f * num4), (byte)(201f * num4), (byte)(92f * num4), a);
					}
					else if (num8 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((byte)(181f * num4), (byte)(192f * num4), (byte)(193f * num4), a);
					}
					else if (num9 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((byte)(246f * num4), (byte)(138f * num4), (byte)(96f * num4), a);
					}
				}
				else if (hoverItem.type != 3817)
				{
					array[numLines] = Lang.tip[51].Value;
					numLines++;
					color = new Microsoft.Xna.Framework.Color((byte)(120f * num4), (byte)(120f * num4), (byte)(120f * num4), a);
				}
			}
			Vector2 zero = Vector2.Zero;
			int num12 = 0;
			for (int j = 0; j < numLines; j++)
			{
				Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, array[j], Vector2.One);
				if (stringSize.X > zero.X)
				{
					zero.X = stringSize.X;
				}
				zero.Y += stringSize.Y + (float)num12;
			}
			if (yoyoLogo != -1)
			{
				zero.Y += 24f;
			}
			X += toolTipDistance;
			Y += toolTipDistance;
			int num13 = 4;
			if (settingsEnabled_OpaqueBoxBehindTooltips)
			{
				X += 8;
				Y += 2;
				num13 = 18;
			}
			int num14 = screenWidth;
			int num15 = screenHeight;
			if ((float)X + zero.X + (float)num13 > (float)num14)
			{
				X = (int)((float)num14 - zero.X - (float)num13);
			}
			if ((float)Y + zero.Y + (float)num13 > (float)num15)
			{
				Y = (int)((float)num15 - zero.Y - (float)num13);
			}
			int num16 = 0;
			num3 = (float)(int)mouseTextColor / 255f;
			if (settingsEnabled_OpaqueBoxBehindTooltips)
			{
				num3 = MathHelper.Lerp(num3, 1f, 1f);
				int num17 = 14;
				int num18 = 9;
				Utils.DrawInvBG(spriteBatch, new Microsoft.Xna.Framework.Rectangle(X - num17, Y - num18, (int)zero.X + num17 * 2, (int)zero.Y + num18 + num18 / 2), new Microsoft.Xna.Framework.Color(23, 25, 81, 255) * 0.925f);
			}
			for (int k = 0; k < numLines; k++)
			{
				if (k == yoyoLogo)
				{
					float num19 = 1f;
					int num20 = (int)((float)(int)mouseTextColor * num19);
					Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
					for (int l = 0; l < 5; l++)
					{
						int num21 = X;
						int num22 = Y + num16;
						if (l == 4)
						{
							color2 = new Microsoft.Xna.Framework.Color(num20, num20, num20, num20);
						}
						switch (l)
						{
						case 0:
							num21--;
							break;
						case 1:
							num21++;
							break;
						case 2:
							num22--;
							break;
						case 3:
							num22++;
							break;
						}
						spriteBatch.Draw(TextureAssets.OneDropLogo.Value, new Vector2(num21, num22), null, color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
				else
				{
					Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
					black = new Microsoft.Xna.Framework.Color(num4, num4, num4, num4);
					if (k == 0)
					{
						if (rare == -13)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(masterColor * 200f * num4), 0, a);
						}
						if (rare == -11)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(175f * num4), (byte)(0f * num4), a);
						}
						if (rare == -1)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(130f * num4), (byte)(130f * num4), (byte)(130f * num4), a);
						}
						if (rare == 1)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(150f * num4), (byte)(150f * num4), (byte)(255f * num4), a);
						}
						if (rare == 2)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(150f * num4), (byte)(255f * num4), (byte)(150f * num4), a);
						}
						if (rare == 3)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(200f * num4), (byte)(150f * num4), a);
						}
						if (rare == 4)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(150f * num4), (byte)(150f * num4), a);
						}
						if (rare == 5)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(150f * num4), (byte)(255f * num4), a);
						}
						if (rare == 6)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(210f * num4), (byte)(160f * num4), (byte)(255f * num4), a);
						}
						if (rare == 7)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(150f * num4), (byte)(255f * num4), (byte)(10f * num4), a);
						}
						if (rare == 8)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(255f * num4), (byte)(10f * num4), a);
						}
						if (rare == 9)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(5f * num4), (byte)(200f * num4), (byte)(255f * num4), a);
						}
						if (rare == 10)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(255f * num4), (byte)(40f * num4), (byte)(100f * num4), a);
						}
						if (rare >= 11)
						{
							black = new Microsoft.Xna.Framework.Color((byte)(180f * num4), (byte)(40f * num4), (byte)(255f * num4), a);
						}
						if (diff == 1)
						{
							black = new Microsoft.Xna.Framework.Color((byte)((float)(int)mcColor.R * num4), (byte)((float)(int)mcColor.G * num4), (byte)((float)(int)mcColor.B * num4), a);
						}
						if (diff == 2)
						{
							black = new Microsoft.Xna.Framework.Color((byte)((float)(int)hcColor.R * num4), (byte)((float)(int)hcColor.G * num4), (byte)((float)(int)hcColor.B * num4), a);
						}
						if (hoverItem.expert || rare == -12)
						{
							black = new Microsoft.Xna.Framework.Color((byte)((float)DiscoR * num4), (byte)((float)DiscoG * num4), (byte)((float)DiscoB * num4), a);
						}
					}
					else if (array2[k])
					{
						black = (array3[k] ? new Microsoft.Xna.Framework.Color((byte)(190f * num4), (byte)(120f * num4), (byte)(120f * num4), a) : new Microsoft.Xna.Framework.Color((byte)(120f * num4), (byte)(190f * num4), (byte)(120f * num4), a));
					}
					else if (k == numLines - 1)
					{
						black = color;
					}
					if (k == researchLine)
					{
						black = Colors.JourneyMode;
					}
					ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, array[k], new Vector2(X, Y + num16), black, 0f, Vector2.Zero, Vector2.One);
				}
				num16 += (int)(FontAssets.MouseText.Value.MeasureString(array[k]).Y + (float)num12);
			}
		}

		public static void MouseText_DrawItemTooltip_GetLinesInfo(Item item, int yoyoLogo, int researchLine, float oldKB, int numLines, string[] toolTipLine, bool[] preFixLine, bool[] badPreFixLine)
		{
			toolTipLine[0] = item.HoverName;
			if (item.favorited)
			{
				toolTipLine[numLines++] = Lang.tip[56].Value;
				toolTipLine[numLines++] = Lang.tip[57].Value;
				if (LocalPlayer.chest != -1)
				{
					ChestUI.GetContainerUsageInfo(out var _, out var chestinv);
					if (ChestUI.IsBlockedFromTransferIntoChest(item, chestinv))
					{
						toolTipLine[numLines++] = Language.GetTextValue("UI.ItemCannotBePlacedInsideItself");
					}
				}
			}
			if (item.social)
			{
				toolTipLine[numLines] = Lang.tip[0].Value;
				numLines++;
				toolTipLine[numLines] = Lang.tip[1].Value;
				numLines++;
			}
			else
			{
				if (item.damage > 0 && (!item.notAmmo || item.useStyle != 0) && (item.type < 71 || item.type > 74 || player[myPlayer].HasItem(905)))
				{
					float num = 5E-06f;
					int damage = item.damage;
					damage = (int)((float)damage * ItemID.Sets.ToolTipDamageMultiplier[item.type]);
					if (item.melee)
					{
						toolTipLine[numLines] = string.Concat((int)(player[myPlayer].meleeDamage * (float)damage + num));
						toolTipLine[numLines] += Lang.tip[2].Value;
					}
					else if (item.ranged)
					{
						float num2 = (float)damage * player[myPlayer].rangedDamage;
						if (item.useAmmo == AmmoID.Arrow || item.useAmmo == AmmoID.Stake)
						{
							num2 *= player[myPlayer].arrowDamage;
							if (player[myPlayer].archery)
							{
								num2 *= 1.2f;
							}
						}
						if (item.useAmmo == AmmoID.Bullet || item.useAmmo == AmmoID.CandyCorn)
						{
							num2 *= player[myPlayer].bulletDamage;
						}
						if (item.useAmmo == AmmoID.Rocket || item.useAmmo == AmmoID.StyngerBolt || item.useAmmo == AmmoID.JackOLantern || item.useAmmo == AmmoID.NailFriendly)
						{
							num2 *= player[myPlayer].rocketDamage;
						}
						toolTipLine[numLines] = string.Concat((int)(num2 + num));
						toolTipLine[numLines] += Lang.tip[3].Value;
					}
					else if (item.magic)
					{
						toolTipLine[numLines] = string.Concat((int)(player[myPlayer].magicDamage * (float)damage + num));
						toolTipLine[numLines] += Lang.tip[4].Value;
					}
					else if (item.summon)
					{
						toolTipLine[numLines] = string.Concat((int)(player[myPlayer].minionDamage * (float)damage + num));
						toolTipLine[numLines] += Lang.tip[53].Value;
					}
					else
					{
						toolTipLine[numLines] = string.Concat(damage);
						toolTipLine[numLines] += Lang.tip[55].Value;
					}
					numLines++;
					if (item.melee)
					{
						int num3 = player[myPlayer].meleeCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + item.crit;
						toolTipLine[numLines] = num3 + Lang.tip[5].Value;
						numLines++;
					}
					else if (item.ranged)
					{
						int num4 = player[myPlayer].rangedCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + item.crit;
						toolTipLine[numLines] = num4 + Lang.tip[5].Value;
						numLines++;
					}
					else if (item.magic)
					{
						int num5 = player[myPlayer].magicCrit - player[myPlayer].inventory[player[myPlayer].selectedItem].crit + item.crit;
						toolTipLine[numLines] = num5 + Lang.tip[5].Value;
						numLines++;
					}
					if (item.useStyle != 0 && !item.summon)
					{
						if (item.useAnimation <= 8)
						{
							toolTipLine[numLines] = Lang.tip[6].Value;
						}
						else if (item.useAnimation <= 20)
						{
							toolTipLine[numLines] = Lang.tip[7].Value;
						}
						else if (item.useAnimation <= 25)
						{
							toolTipLine[numLines] = Lang.tip[8].Value;
						}
						else if (item.useAnimation <= 30)
						{
							toolTipLine[numLines] = Lang.tip[9].Value;
						}
						else if (item.useAnimation <= 35)
						{
							toolTipLine[numLines] = Lang.tip[10].Value;
						}
						else if (item.useAnimation <= 45)
						{
							toolTipLine[numLines] = Lang.tip[11].Value;
						}
						else if (item.useAnimation <= 55)
						{
							toolTipLine[numLines] = Lang.tip[12].Value;
						}
						else
						{
							toolTipLine[numLines] = Lang.tip[13].Value;
						}
						numLines++;
					}
					float num6 = item.knockBack;
					if (item.summon)
					{
						num6 += player[myPlayer].minionKB;
					}
					if ((player[myPlayer].magicQuiver && item.useAmmo == AmmoID.Arrow) || item.useAmmo == AmmoID.Stake)
					{
						num6 = (int)(num6 * 1.1f);
					}
					if (player[myPlayer].inventory[player[myPlayer].selectedItem].type == 3106 && item.type == 3106)
					{
						num6 += num6 * (1f - player[myPlayer].stealth);
					}
					if (num6 == 0f)
					{
						toolTipLine[numLines] = Lang.tip[14].Value;
					}
					else if ((double)num6 <= 1.5)
					{
						toolTipLine[numLines] = Lang.tip[15].Value;
					}
					else if (num6 <= 3f)
					{
						toolTipLine[numLines] = Lang.tip[16].Value;
					}
					else if (num6 <= 4f)
					{
						toolTipLine[numLines] = Lang.tip[17].Value;
					}
					else if (num6 <= 6f)
					{
						toolTipLine[numLines] = Lang.tip[18].Value;
					}
					else if (num6 <= 7f)
					{
						toolTipLine[numLines] = Lang.tip[19].Value;
					}
					else if (num6 <= 9f)
					{
						toolTipLine[numLines] = Lang.tip[20].Value;
					}
					else if (num6 <= 11f)
					{
						toolTipLine[numLines] = Lang.tip[21].Value;
					}
					else
					{
						toolTipLine[numLines] = Lang.tip[22].Value;
					}
					numLines++;
				}
				if (item.fishingPole > 0)
				{
					toolTipLine[numLines] = Language.GetTextValue("GameUI.PrecentFishingPower", item.fishingPole);
					numLines++;
					toolTipLine[numLines] = Language.GetTextValue("GameUI.BaitRequired");
					numLines++;
				}
				if (item.bait > 0)
				{
					toolTipLine[numLines] = Language.GetTextValue("GameUI.BaitPower", item.bait);
					numLines++;
				}
				if (item.headSlot > 0 || item.bodySlot > 0 || item.legSlot > 0 || item.accessory || projHook[item.shoot] || item.mountType != -1 || (item.buffType > 0 && (lightPet[item.buffType] || vanityPet[item.buffType])))
				{
					if ((item.type == 854 || item.type == 3035) && npcShop > 0)
					{
						toolTipLine[numLines] = Lang.tip[60].Value;
					}
					else
					{
						toolTipLine[numLines] = Lang.tip[23].Value;
					}
					numLines++;
				}
				if (item.tileWand > 0)
				{
					toolTipLine[numLines] = Lang.tip[52].Value + Lang.GetItemNameValue(item.tileWand);
					numLines++;
				}
				if (item.questItem)
				{
					toolTipLine[numLines] = Lang.inter[65].Value;
					numLines++;
				}
				if (item.vanity)
				{
					toolTipLine[numLines] = Lang.tip[24].Value;
					numLines++;
				}
				if (!item.vanity && item.FitsAccessoryVanitySlot)
				{
					toolTipLine[numLines] = Language.GetText("Misc.CanBePlacedInVanity").Value;
					numLines++;
				}
				if (item.defense > 0)
				{
					toolTipLine[numLines] = item.defense + Lang.tip[25].Value;
					numLines++;
				}
				if (item.pick > 0)
				{
					toolTipLine[numLines] = item.pick + Lang.tip[26].Value;
					numLines++;
				}
				if (item.axe > 0)
				{
					toolTipLine[numLines] = item.axe * 5 + Lang.tip[27].Value;
					numLines++;
				}
				if (item.hammer > 0)
				{
					toolTipLine[numLines] = item.hammer + Lang.tip[28].Value;
					numLines++;
				}
				if (item.tileBoost != 0)
				{
					int tileBoost = item.tileBoost;
					if (tileBoost > 0)
					{
						toolTipLine[numLines] = "+" + tileBoost + Lang.tip[54].Value;
					}
					else
					{
						toolTipLine[numLines] = tileBoost + Lang.tip[54].Value;
					}
					numLines++;
				}
				if (item.healLife > 0)
				{
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.RestoresLife", item.healLife);
					numLines++;
				}
				if (item.healMana > 0)
				{
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.RestoresMana", item.healMana);
					numLines++;
				}
				if (item.mana > 0 && (item.type != 127 || !player[myPlayer].spaceGun))
				{
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.UsesMana", (int)((float)item.mana * player[myPlayer].manaCost));
					numLines++;
				}
				if (item.createWall > 0 || item.createTile > -1)
				{
					if (item.type != 213 && item.tileWand < 1)
					{
						toolTipLine[numLines] = Lang.tip[33].Value;
						numLines++;
					}
				}
				else if (item.ammo > 0 && !item.notAmmo)
				{
					toolTipLine[numLines] = Lang.tip[34].Value;
					numLines++;
				}
				else if (item.consumable)
				{
					toolTipLine[numLines] = Lang.tip[35].Value;
					numLines++;
				}
				if (item.material)
				{
					toolTipLine[numLines] = Lang.tip[36].Value;
					numLines++;
				}
				if (item.ToolTip != null)
				{
					for (int i = 0; i < item.ToolTip.Lines; i++)
					{
						if (i == 0 && ItemID.Sets.UsesCursedByPlanteraTooltip[item.type] && !NPC.downedPlantBoss)
						{
							toolTipLine[numLines] = Lang.tip[59].Value;
							numLines++;
						}
						else
						{
							toolTipLine[numLines] = item.ToolTip.GetLine(i);
							numLines++;
						}
					}
				}
				if ((item.type == 3818 || item.type == 3819 || item.type == 3820 || item.type == 3824 || item.type == 3825 || item.type == 3826 || item.type == 3829 || item.type == 3830 || item.type == 3831 || item.type == 3832 || item.type == 3833 || item.type == 3834) && !player[myPlayer].downedDD2EventAnyDifficulty)
				{
					toolTipLine[numLines] = Lang.misc[104].Value;
					numLines++;
				}
				if (item.buffType > 0 && BuffID.Sets.IsWellFed[item.buffType] && expertMode)
				{
					toolTipLine[numLines] = Lang.misc[40].Value;
					numLines++;
				}
				if (item.buffTime > 0)
				{
					string text = ((item.buffTime / 60 < 60) ? Language.GetTextValue("CommonItemTooltip.SecondDuration", Math.Round((double)item.buffTime / 60.0)) : Language.GetTextValue("CommonItemTooltip.MinuteDuration", Math.Round((double)(item.buffTime / 60) / 60.0)));
					toolTipLine[numLines] = text;
					numLines++;
				}
				if (item.type == 3262 || item.type == 3282 || item.type == 3283 || item.type == 3284 || item.type == 3285 || item.type == 3286 || item.type == 3316 || item.type == 3315 || item.type == 3317 || item.type == 3291 || item.type == 3389)
				{
					toolTipLine[numLines] = " ";
					yoyoLogo = numLines;
					numLines++;
				}
				if (item.prefix > 0)
				{
					Item item2 = tooltipPrefixComparisonItem;
					if (item2 == null || item2.netID != item.netID)
					{
						item2 = new Item();
						item2.netDefaults(item.netID);
					}
					if (item2.damage != item.damage)
					{
						double num7 = (float)item.damage - (float)item2.damage;
						num7 = num7 / (double)item2.damage * 100.0;
						num7 = Math.Round(num7);
						if (num7 > 0.0)
						{
							toolTipLine[numLines] = "+" + num7 + Lang.tip[39].Value;
						}
						else
						{
							toolTipLine[numLines] = num7 + Lang.tip[39].Value;
						}
						if (num7 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item2.useAnimation != item.useAnimation)
					{
						double num8 = (float)item.useAnimation - (float)item2.useAnimation;
						num8 = num8 / (double)item2.useAnimation * 100.0;
						num8 = Math.Round(num8);
						num8 *= -1.0;
						if (num8 > 0.0)
						{
							toolTipLine[numLines] = "+" + num8 + Lang.tip[40].Value;
						}
						else
						{
							toolTipLine[numLines] = num8 + Lang.tip[40].Value;
						}
						if (num8 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item2.crit != item.crit)
					{
						double num9 = (float)item.crit - (float)item2.crit;
						if (num9 > 0.0)
						{
							toolTipLine[numLines] = "+" + num9 + Lang.tip[41].Value;
						}
						else
						{
							toolTipLine[numLines] = num9 + Lang.tip[41].Value;
						}
						if (num9 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item2.mana != item.mana)
					{
						double num10 = (float)item.mana - (float)item2.mana;
						num10 = num10 / (double)item2.mana * 100.0;
						num10 = Math.Round(num10);
						if (num10 > 0.0)
						{
							toolTipLine[numLines] = "+" + num10 + Lang.tip[42].Value;
						}
						else
						{
							toolTipLine[numLines] = num10 + Lang.tip[42].Value;
						}
						if (num10 > 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item2.scale != item.scale)
					{
						double num11 = item.scale - item2.scale;
						num11 = num11 / (double)item2.scale * 100.0;
						num11 = Math.Round(num11);
						if (num11 > 0.0)
						{
							toolTipLine[numLines] = "+" + num11 + Lang.tip[43].Value;
						}
						else
						{
							toolTipLine[numLines] = num11 + Lang.tip[43].Value;
						}
						if (num11 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item2.shootSpeed != item.shootSpeed)
					{
						double num12 = item.shootSpeed - item2.shootSpeed;
						num12 = num12 / (double)item2.shootSpeed * 100.0;
						num12 = Math.Round(num12);
						if (num12 > 0.0)
						{
							toolTipLine[numLines] = "+" + num12 + Lang.tip[44].Value;
						}
						else
						{
							toolTipLine[numLines] = num12 + Lang.tip[44].Value;
						}
						if (num12 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item2.knockBack != oldKB)
					{
						double num13 = oldKB - item2.knockBack;
						num13 = num13 / (double)item2.knockBack * 100.0;
						num13 = Math.Round(num13);
						if (num13 > 0.0)
						{
							toolTipLine[numLines] = "+" + num13 + Lang.tip[45].Value;
						}
						else
						{
							toolTipLine[numLines] = num13 + Lang.tip[45].Value;
						}
						if (num13 < 0.0)
						{
							badPreFixLine[numLines] = true;
						}
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 62)
					{
						toolTipLine[numLines] = "+1" + Lang.tip[25].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 63)
					{
						toolTipLine[numLines] = "+2" + Lang.tip[25].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 64)
					{
						toolTipLine[numLines] = "+3" + Lang.tip[25].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 65)
					{
						toolTipLine[numLines] = "+4" + Lang.tip[25].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 66)
					{
						toolTipLine[numLines] = "+20 " + Lang.tip[31].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 67)
					{
						toolTipLine[numLines] = "+2" + Lang.tip[5].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 68)
					{
						toolTipLine[numLines] = "+4" + Lang.tip[5].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 69)
					{
						toolTipLine[numLines] = "+1" + Lang.tip[39].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 70)
					{
						toolTipLine[numLines] = "+2" + Lang.tip[39].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 71)
					{
						toolTipLine[numLines] = "+3" + Lang.tip[39].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 72)
					{
						toolTipLine[numLines] = "+4" + Lang.tip[39].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 73)
					{
						toolTipLine[numLines] = "+1" + Lang.tip[46].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 74)
					{
						toolTipLine[numLines] = "+2" + Lang.tip[46].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 75)
					{
						toolTipLine[numLines] = "+3" + Lang.tip[46].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 76)
					{
						toolTipLine[numLines] = "+4" + Lang.tip[46].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 77)
					{
						toolTipLine[numLines] = "+1" + Lang.tip[47].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 78)
					{
						toolTipLine[numLines] = "+2" + Lang.tip[47].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 79)
					{
						toolTipLine[numLines] = "+3" + Lang.tip[47].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
					if (item.prefix == 80)
					{
						toolTipLine[numLines] = "+4" + Lang.tip[47].Value;
						preFixLine[numLines] = true;
						numLines++;
					}
				}
				if (item.wornArmor && player[myPlayer].setBonus != "")
				{
					toolTipLine[numLines] = Lang.tip[48].Value + " " + player[myPlayer].setBonus;
					numLines++;
				}
			}
			if (item.expert)
			{
				toolTipLine[numLines] = Language.GetTextValue("GameUI.Expert");
				numLines++;
			}
			if (item.rare == -13)
			{
				toolTipLine[numLines] = Language.GetTextValue("GameUI.Master");
				numLines++;
			}
			if ((item.tooltipContext == 0 || item.tooltipContext == 2 || item.tooltipContext == 1 || item.tooltipContext == 3 || item.tooltipContext == 4 || item.tooltipContext == 15 || item.tooltipContext == 6) && LocalPlayer.difficulty == 3 && CreativeItemSacrificesCatalog.Instance.TryGetSacrificeCountCapToUnlockInfiniteItems(item.type, out var amountNeeded))
			{
				int sacrificeCount = LocalPlayerCreativeTracker.ItemSacrifices.GetSacrificeCount(item.type);
				if (amountNeeded - sacrificeCount > 0)
				{
					toolTipLine[numLines] = Language.GetTextValue("CommonItemTooltip.CreativeSacrificeNeeded", amountNeeded - sacrificeCount);
					researchLine = numLines;
					numLines++;
				}
			}
			string bestiaryNotes = item.BestiaryNotes;
			if (!string.IsNullOrWhiteSpace(bestiaryNotes))
			{
				string[] array = bestiaryNotes.Split('\n');
				foreach (string text2 in array)
				{
					toolTipLine[numLines++] = text2;
				}
			}
		}

		private void MouseText_DrawBuffTooltip(string buffString, int X, int Y)
		{
			Microsoft.Xna.Framework.Point p = new Microsoft.Xna.Framework.Point(X, Y);
			int num = 220;
			int num2 = 72;
			int num3 = -1;
			float num4 = 1f;
			List<Vector2> list = new List<Vector2>();
			Vector2 vector = FontAssets.MouseText.Value.MeasureString(buffString);
			list.Add(vector);
			int num5 = (int)((float)(screenHeight - Y - 24 - num2) * num4) / 20;
			if (num5 < 1)
			{
				num5 = 1;
			}
			if (bannerMouseOver)
			{
				int num6 = 0;
				for (int i = 0; i < 289; i++)
				{
					if (Item.BannerToNPC(i) != 0 && player[myPlayer].HasNPCBannerBuff(i))
					{
						num6++;
						string nPCNameValue = Lang.GetNPCNameValue(Item.BannerToNPC(i));
						Vector2 value = FontAssets.MouseText.Value.MeasureString(nPCNameValue);
						int num7 = X;
						int num8 = Y + (int)value.Y + num6 * 20 + 10;
						int num9 = 0;
						int num10 = num6 / num5;
						for (int j = 0; j < num10; j++)
						{
							num9++;
							num7 += num;
							num8 -= num5 * 20;
						}
						if ((float)(num7 - 24 - num) > (float)screenWidth * num4)
						{
							num3 = num6;
							break;
						}
						list.Add(new Vector2(num7, num8) + value - p.ToVector2());
					}
				}
			}
			Vector2 zero = Vector2.Zero;
			foreach (Vector2 item2 in list)
			{
				if (zero.X < item2.X)
				{
					zero.X = item2.X;
				}
				if (zero.Y < item2.Y)
				{
					zero.Y = item2.Y;
				}
			}
			if ((float)X + zero.X + 24f > (float)screenWidth * num4)
			{
				X = (int)((float)screenWidth * num4 - zero.X - 24f);
			}
			if ((float)Y + zero.Y + 4f > (float)screenHeight * num4)
			{
				Y = (int)((float)screenHeight * num4 - zero.Y - 4f);
			}
			for (int k = 0; k < 5; k++)
			{
				int num11 = X;
				int num12 = Y + (int)FontAssets.MouseText.Value.MeasureString(buffString).Y;
				Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.Black;
				switch (k)
				{
				case 0:
					num11 -= 2;
					break;
				case 1:
					num11 += 2;
					break;
				case 2:
					num12 -= 2;
					break;
				case 3:
					num12 += 2;
					break;
				default:
					color = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
					break;
				}
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, buffString, new Vector2(num11, num12), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (!bannerMouseOver)
			{
				return;
			}
			int num13 = 0;
			for (int l = 0; l < 289; l++)
			{
				if (Item.BannerToNPC(l) == 0 || !player[myPlayer].HasNPCBannerBuff(l))
				{
					continue;
				}
				num13++;
				bool flag = false;
				for (int m = 0; m < 5; m++)
				{
					int num14 = X;
					int num15 = Y + (int)vector.Y + num13 * 20 + 10;
					int num16 = (num13 - 1) / num5;
					num14 += num * num16;
					num15 -= num5 * 20 * num16;
					string text = Lang.GetNPCNameValue(Item.BannerToNPC(l));
					if (num3 == num13)
					{
						text = Language.GetTextValue("UI.Ellipsis");
						flag = true;
					}
					Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
					switch (m)
					{
					case 0:
						num14 -= 2;
						break;
					case 1:
						num14 += 2;
						break;
					case 2:
						num15 -= 2;
						break;
					case 3:
						num15 += 2;
						break;
					default:
					{
						float num17 = (float)(int)mouseTextColor / 255f;
						color2 = new Microsoft.Xna.Framework.Color((byte)(80f * num17), (byte)(255f * num17), (byte)(120f * num17), mouseTextColor);
						break;
					}
					}
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text, new Vector2(num14, num15), color2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (flag)
				{
					break;
				}
			}
		}

		protected void DrawFPS()
		{
			if (showFrameRate)
			{
				string text = string.Concat(frameRate);
				text = text + " (" + (Liquid.numLiquid + LiquidBuffer.numLiquidBuffer) + ")";
				text = text + " (" + (int)(gfxQuality * 100f) + "%)";
				string text2 = text + " " + debugWords;
				int num = 4;
				if (!gameMenu)
				{
					num = screenHeight - 24;
				}
				Vector2 vector = new Vector2(4f, num);
				Vector2 vector2 = new Vector2(0f, 0f);
				Vector2 vector3 = FontAssets.MouseText.Value.MeasureString(text2);
				if (PlayerInput.UsingGamepad && !gameMenu)
				{
					vector.X = (float)(screenWidth - 4) - vector3.X;
				}
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text2, vector, new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, vector2, 1f, SpriteEffects.None, 0f);
			}
		}

		public static void DrawGamepadInstructions()
		{
			if (drawingPlayerChat)
			{
				return;
			}
			string text = PlayerInput.ComposeInstructionsForGamepad();
			if (!GamepadDisableInstructionsDisplay && text.Length > 0 && (!player[myPlayer].dead || gameMenu))
			{
				float num = 35f;
				float num2 = 1f;
				Vector2 baseScale = new Vector2(num2);
				if (gameMenu)
				{
					num = 55f;
				}
				Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, text, new Vector2(1f));
				float t = num2;
				Utils.Swap(GlyphTagHandler.GlyphsScale, t);
				ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, text, new Vector2(12f, (float)screenHeight - num) - stringSize * new Vector2(0f, 0f), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, baseScale, -1f, num2 * 2f);
				Utils.Swap(GlyphTagHandler.GlyphsScale, t);
			}
		}

		public static Microsoft.Xna.Framework.Color shine(Microsoft.Xna.Framework.Color newColor, int type)
		{
			int num = newColor.R;
			int g = newColor.G;
			int b = newColor.B;
			float num2 = 0.6f;
			switch (type)
			{
			case 25:
				num = (int)((float)(int)newColor.R * 0.95f);
				g = (int)((float)(int)newColor.G * 0.85f);
				b = (int)((double)(int)newColor.B * 1.1);
				break;
			case 117:
				num = (int)((float)(int)newColor.R * 1.1f);
				g = (int)((float)(int)newColor.G * 1f);
				b = (int)((double)(int)newColor.B * 1.2);
				break;
			case 204:
				num2 = 0.3f + (float)(int)mouseTextColor / 300f;
				num = (int)((float)(int)newColor.R * (1.3f * num2));
				if (num > 255)
				{
					num = 255;
				}
				return new Microsoft.Xna.Framework.Color(num, g, b, 255);
			case 211:
				num2 = 0.3f + (float)(int)mouseTextColor / 300f;
				g = (int)((float)(int)newColor.G * (1.5f * num2));
				b = (int)((float)(int)newColor.B * (1.1f * num2));
				break;
			case 147:
			case 161:
				num = (int)((float)(int)newColor.R * 1.1f);
				g = (int)((float)(int)newColor.G * 1.12f);
				b = (int)((double)(int)newColor.B * 1.15);
				break;
			case 163:
				num = (int)((float)(int)newColor.R * 1.05f);
				g = (int)((float)(int)newColor.G * 1.1f);
				b = (int)((double)(int)newColor.B * 1.15);
				break;
			case 164:
				num = (int)((float)(int)newColor.R * 1.1f);
				g = (int)((float)(int)newColor.G * 1.1f);
				b = (int)((double)(int)newColor.B * 1.2);
				break;
			case 178:
				num2 = 0.5f;
				num = (int)((float)(int)newColor.R * (1f + num2));
				g = (int)((float)(int)newColor.G * (1f + num2));
				b = (int)((float)(int)newColor.B * (1f + num2));
				break;
			case 185:
			case 186:
				num2 = 0.3f;
				num = (int)((float)(int)newColor.R * (1f + num2));
				g = (int)((float)(int)newColor.G * (1f + num2));
				b = (int)((float)(int)newColor.B * (1f + num2));
				break;
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
				b += 100;
				num += 100;
				g += 100;
				break;
			default:
				num = (int)((float)(int)newColor.R * (1f + num2));
				g = (int)((float)(int)newColor.G * (1f + num2));
				b = (int)((float)(int)newColor.B * (1f + num2));
				break;
			}
			if (num > 255)
			{
				num = 255;
			}
			if (g > 255)
			{
				g = 255;
			}
			if (b > 255)
			{
				b = 255;
			}
			newColor.R = (byte)num;
			newColor.G = (byte)g;
			newColor.B = (byte)b;
			return new Microsoft.Xna.Framework.Color((byte)num, (byte)g, (byte)b, newColor.A);
		}

		public static void shine(Vector3 newColor, int type)
		{
			float num = 0.6f;
			switch (type)
			{
			case 25:
				newColor.X *= 0.95f;
				newColor.Y *= 0.85f;
				newColor.Z *= 1.1f;
				break;
			case 117:
				newColor.X *= 1.1f;
				newColor.Z *= 1.2f;
				break;
			case 204:
				num = 0.3f + (float)(int)mouseTextColor / 300f;
				newColor.X *= 1.3f * num;
				break;
			case 211:
				num = 0.3f + (float)(int)mouseTextColor / 300f;
				newColor.Y *= 1.5f * num;
				newColor.Z *= 1.1f * num;
				break;
			case 147:
			case 161:
				newColor.X *= 1.1f;
				newColor.Y *= 1.12f;
				newColor.Z *= 1.15f;
				break;
			case 163:
				newColor.X *= 1.05f;
				newColor.Y *= 1.1f;
				newColor.Z *= 1.15f;
				break;
			case 164:
				newColor.X *= 1.1f;
				newColor.Y *= 1.1f;
				newColor.Z *= 1.2f;
				break;
			case 178:
				num = 0.5f;
				newColor.X *= 1f + num;
				newColor.Y *= 1f + num;
				newColor.Z *= 1f + num;
				break;
			case 185:
			case 186:
				num = 0.3f;
				newColor.X *= 1f + num;
				newColor.Y *= 1f + num;
				newColor.Z *= 1f + num;
				break;
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
				newColor.X += 0.39f;
				newColor.Y += 0.39f;
				newColor.Z += 0.39f;
				break;
			default:
				newColor.X *= 1f + num;
				newColor.Y *= 1f + num;
				newColor.Z *= 1f + num;
				break;
			}
		}

		private void DrawTileEntities(bool solidLayer, bool overRenderTargets, bool intoRenderTargets)
		{
			TilesRenderer.PostDrawTiles(solidLayer, overRenderTargets, intoRenderTargets);
		}

		public void ClearCachedTileDraws()
		{
			TilesRenderer.ClearCachedTileDraws(solidLayer: false);
			TilesRenderer.ClearCachedTileDraws(solidLayer: true);
		}

		public static bool IsTileSpelunkable(Tile t)
		{
			return IsTileSpelunkable(t.type, t.frameX, t.frameY);
		}

		public static bool IsTileSpelunkable(ushort typeCache, short tileFrameX, short tileFrameY)
		{
			if (tileSpelunker[typeCache])
			{
				return true;
			}
			if (typeCache == 185 && tileFrameY == 18 && tileFrameX >= 576 && tileFrameX <= 882)
			{
				return true;
			}
			if (typeCache == 186 && tileFrameX >= 864 && tileFrameX <= 1170)
			{
				return true;
			}
			return false;
		}

		protected void DrawTiles(bool solidLayer, bool forRenderTargets, bool intoRenderTargets, int waterStyleOverride = -1)
		{
			TilesRenderer.Draw(solidLayer, forRenderTargets, intoRenderTargets, waterStyleOverride);
		}

		protected void DrawGoreBehind()
		{
			for (int i = 0; i < 600; i++)
			{
				if (!gore[i].active || gore[i].type <= 0)
				{
					continue;
				}
				bool flag = false;
				if (((gore[i].type >= 706 && gore[i].type <= 717) || gore[i].type == 943 || gore[i].type == 1147 || (gore[i].type >= 1160 && gore[i].type <= 1162)) && (gore[i].frame < 7 || gore[i].frame > 9))
				{
					flag = true;
				}
				if (flag)
				{
					LoadGore(gore[i].type);
					if (gore[i].Frame.ColumnCount > 1 || gore[i].Frame.RowCount > 1)
					{
						Microsoft.Xna.Framework.Rectangle sourceRectangle = gore[i].Frame.GetSourceRectangle(TextureAssets.Gore[gore[i].type].Value);
						Microsoft.Xna.Framework.Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)sourceRectangle.Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)sourceRectangle.Height * 0.5) / 16.0)));
						spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(sourceRectangle.Width / 2), gore[i].position.Y - screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f), sourceRectangle, alpha, gore[i].rotation, new Vector2(sourceRectangle.Width / 2, sourceRectangle.Height / 2), gore[i].scale, SpriteEffects.None, 0f);
					}
					else
					{
						Microsoft.Xna.Framework.Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)TextureAssets.Gore[gore[i].type].Width() * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)TextureAssets.Gore[gore[i].type].Height() * 0.5) / 16.0)));
						spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(TextureAssets.Gore[gore[i].type].Width() / 2), gore[i].position.Y - screenPosition.Y + (float)(TextureAssets.Gore[gore[i].type].Height() / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Gore[gore[i].type].Width(), TextureAssets.Gore[gore[i].type].Height()), alpha2, gore[i].rotation, new Vector2(TextureAssets.Gore[gore[i].type].Width() / 2, TextureAssets.Gore[gore[i].type].Height() / 2), gore[i].scale, SpriteEffects.None, 0f);
					}
				}
			}
		}

		protected void DrawGore()
		{
			drawBackGore = false;
			for (int i = 0; i < 600; i++)
			{
				if (!gore[i].active || gore[i].type <= 0)
				{
					continue;
				}
				if (((gore[i].type >= 706 && gore[i].type <= 717) || gore[i].type == 943 || gore[i].type == 1147 || (gore[i].type >= 1160 && gore[i].type <= 1162)) && (gore[i].frame < 7 || gore[i].frame > 9))
				{
					drawBackGore = true;
					continue;
				}
				LoadGore(gore[i].type);
				if (gore[i].Frame.ColumnCount > 1 || gore[i].Frame.RowCount > 1)
				{
					Microsoft.Xna.Framework.Rectangle sourceRectangle = gore[i].Frame.GetSourceRectangle(TextureAssets.Gore[gore[i].type].Value);
					Vector2 value = new Vector2(0f, 0f);
					if (gore[i].type == 1217)
					{
						value.Y += 4f;
					}
					Microsoft.Xna.Framework.Color alpha = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)sourceRectangle.Width * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)sourceRectangle.Height * 0.5) / 16.0)));
					spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(sourceRectangle.Width / 2), gore[i].position.Y - screenPosition.Y + (float)(sourceRectangle.Height / 2) - 2f) + value, sourceRectangle, alpha, gore[i].rotation, new Vector2(sourceRectangle.Width / 2, sourceRectangle.Height / 2), gore[i].scale, SpriteEffects.None, 0f);
				}
				else
				{
					Microsoft.Xna.Framework.Color alpha2 = gore[i].GetAlpha(Lighting.GetColor((int)((double)gore[i].position.X + (double)TextureAssets.Gore[gore[i].type].Width() * 0.5) / 16, (int)(((double)gore[i].position.Y + (double)TextureAssets.Gore[gore[i].type].Height() * 0.5) / 16.0)));
					spriteBatch.Draw(TextureAssets.Gore[gore[i].type].Value, new Vector2(gore[i].position.X - screenPosition.X + (float)(TextureAssets.Gore[gore[i].type].Width() / 2), gore[i].position.Y - screenPosition.Y + (float)(TextureAssets.Gore[gore[i].type].Height() / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Gore[gore[i].type].Width(), TextureAssets.Gore[gore[i].type].Height()), alpha2, gore[i].rotation, new Vector2(TextureAssets.Gore[gore[i].type].Width() / 2, TextureAssets.Gore[gore[i].type].Height() / 2), gore[i].scale, SpriteEffects.None, 0f);
				}
			}
			TimeLogger.DetailedDrawTime(24);
		}

		public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f, bool noFlip = false)
		{
			if (Health <= 0)
			{
				return;
			}
			float num = (float)Health / (float)MaxHealth;
			if (num > 1f)
			{
				num = 1f;
			}
			int num2 = (int)(36f * num);
			float num3 = X - 18f * scale;
			float num4 = Y;
			if (player[myPlayer].gravDir == -1f && !noFlip)
			{
				num4 -= screenPosition.Y;
				num4 = screenPosition.Y + (float)screenHeight - num4;
			}
			float num5 = 0f;
			float num6 = 0f;
			float num7 = 0f;
			float num8 = 255f;
			num -= 0.1f;
			if ((double)num > 0.5)
			{
				num6 = 255f;
				num5 = 255f * (1f - num) * 2f;
			}
			else
			{
				num6 = 255f * num * 2f;
				num5 = 255f;
			}
			float num9 = 0.95f;
			num5 = num5 * alpha * num9;
			num6 = num6 * alpha * num9;
			num8 = num8 * alpha * num9;
			if (num5 < 0f)
			{
				num5 = 0f;
			}
			if (num5 > 255f)
			{
				num5 = 255f;
			}
			if (num6 < 0f)
			{
				num6 = 0f;
			}
			if (num6 > 255f)
			{
				num6 = 255f;
			}
			if (num8 < 0f)
			{
				num8 = 0f;
			}
			if (num8 > 255f)
			{
				num8 = 255f;
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((byte)num5, (byte)num6, (byte)num7, (byte)num8);
			if (num2 < 3)
			{
				num2 = 3;
			}
			if (num2 < 34)
			{
				if (num2 < 36)
				{
					spriteBatch.Draw(TextureAssets.Hb2.Value, new Vector2(num3 - screenPosition.X + (float)num2 * scale, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(2, 0, 2, TextureAssets.Hb2.Height()), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				if (num2 < 34)
				{
					spriteBatch.Draw(TextureAssets.Hb2.Value, new Vector2(num3 - screenPosition.X + (float)(num2 + 2) * scale, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(num2 + 2, 0, 36 - num2 - 2, TextureAssets.Hb2.Height()), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				if (num2 > 2)
				{
					spriteBatch.Draw(TextureAssets.Hb1.Value, new Vector2(num3 - screenPosition.X, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, num2 - 2, TextureAssets.Hb1.Height()), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				spriteBatch.Draw(TextureAssets.Hb1.Value, new Vector2(num3 - screenPosition.X + (float)(num2 - 2) * scale, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(32, 0, 2, TextureAssets.Hb1.Height()), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
			}
			else
			{
				if (num2 < 36)
				{
					spriteBatch.Draw(TextureAssets.Hb2.Value, new Vector2(num3 - screenPosition.X + (float)num2 * scale, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(num2, 0, 36 - num2, TextureAssets.Hb2.Height()), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				spriteBatch.Draw(TextureAssets.Hb1.Value, new Vector2(num3 - screenPosition.X, num4 - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, num2, TextureAssets.Hb1.Height()), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
			}
		}

		public static float NPCAddHeight(NPC theNPC)
		{
			float num = 0f;
			if (theNPC.type == 125)
			{
				num = 30f;
			}
			else if (theNPC.type == 54)
			{
				num = 2f;
			}
			else if (theNPC.type == 205)
			{
				num = 8f;
			}
			else if (theNPC.type == 182)
			{
				num = 24f;
			}
			else if (theNPC.type == 178)
			{
				num = 2f;
			}
			else if (theNPC.type == 126)
			{
				num = 30f;
			}
			else if (theNPC.type == 6 || theNPC.type == 173)
			{
				num = 26f;
			}
			else if (theNPC.type == 94)
			{
				num = 14f;
			}
			else if (theNPC.type == 7 || theNPC.type == 8 || theNPC.type == 9)
			{
				num = 13f;
			}
			else if (theNPC.type == 98 || theNPC.type == 99 || theNPC.type == 100)
			{
				num = 13f;
			}
			else if (theNPC.type == 95 || theNPC.type == 96 || theNPC.type == 97)
			{
				num = 13f;
			}
			else if (theNPC.type == 10 || theNPC.type == 11 || theNPC.type == 12)
			{
				num = 8f;
			}
			else if (theNPC.type == 13 || theNPC.type == 14 || theNPC.type == 15)
			{
				num = 26f;
			}
			else if (theNPC.type == 175)
			{
				num = 4f;
			}
			else if (theNPC.type == 520)
			{
				num = 2f;
			}
			else if (theNPC.type >= 412 && theNPC.type <= 414)
			{
				num = 18f;
			}
			else if (theNPC.type == 48)
			{
				num = 32f;
			}
			else if (theNPC.type == 49 || theNPC.type == 51)
			{
				num = 4f;
			}
			else if (theNPC.type == 60)
			{
				num = 10f;
			}
			else if (theNPC.type == 62 || theNPC.type == 66 || theNPC.type == 156)
			{
				num = 14f;
			}
			else if (theNPC.type == 63 || theNPC.type == 64 || theNPC.type == 103)
			{
				num = 4f;
			}
			else if (theNPC.type == 65)
			{
				num = 5f;
			}
			else if (theNPC.type == 69)
			{
				num = 4f;
			}
			else if (theNPC.type == 70)
			{
				num = -4f;
			}
			else if (theNPC.type == 72)
			{
				num = -2f;
			}
			else if (theNPC.type == 83 || theNPC.type == 84)
			{
				num = 20f;
			}
			else if (theNPC.type == 150 || theNPC.type == 151 || theNPC.type == 158)
			{
				num = 10f;
			}
			else if (theNPC.type == 152)
			{
				num = 6f;
			}
			else if (theNPC.type == 153 || theNPC.type == 154)
			{
				num = 2f;
			}
			else if (theNPC.type == 165 || theNPC.type == 237 || theNPC.type == 238 || theNPC.type == 240 || theNPC.type == 531)
			{
				num = 10f;
			}
			else if (theNPC.type == 39 || theNPC.type == 40 || theNPC.type == 41)
			{
				num = 26f;
			}
			else if (theNPC.type >= 87 && theNPC.type <= 92)
			{
				num = 56f;
			}
			else if (theNPC.type >= 134 && theNPC.type <= 136)
			{
				num = 30f;
			}
			else if (theNPC.type == 169)
			{
				num = 8f;
			}
			else if (theNPC.type == 174)
			{
				num = 6f;
			}
			else if (theNPC.type == 369)
			{
				num = 2f;
			}
			else if (theNPC.type == 376)
			{
				num = 6f;
			}
			else if (theNPC.type == 579)
			{
				num = -2f;
			}
			else if (theNPC.type == 613 || theNPC.type == 612)
			{
				num = 2f;
			}
			switch (theNPC.type)
			{
			case 269:
			case 270:
			case 271:
			case 274:
			case 277:
				num -= 2f;
				break;
			}
			if (theNPC.townNPC && theNPC.ai[0] == 5f)
			{
				num -= 4f;
				if (theNPC.type == 637 || theNPC.type == 656)
				{
					num -= 10f;
				}
			}
			return num * theNPC.scale;
		}

		protected void DrawProjectiles()
		{
			PlayerInput.SetZoom_MouseInWorld();
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			int num = 0;
			CurrentDrawnEntity = null;
			CurrentDrawnEntityShader = 0;
			if (ignoreErrors)
			{
				for (int i = 0; i < 1000; i++)
				{
					if (projectile[i].active && projectile[i].type > 0 && !projectile[i].hide)
					{
						num++;
						try
						{
							DrawProj(i);
						}
						catch (Exception e)
						{
							TimeLogger.DrawException(e);
							projectile[i].active = false;
						}
					}
				}
			}
			else
			{
				for (int j = 0; j < 1000; j++)
				{
					if (projectile[j].active && projectile[j].type > 0 && !projectile[j].hide)
					{
						DrawProj(j);
					}
				}
			}
			CurrentDrawnEntity = null;
			CurrentDrawnEntityShader = 0;
			spriteBatch.End();
			TimeLogger.DetailedDrawTime(20);
		}

		public static int GetProjectileDesiredShader(int i)
		{
			int result = 0;
			if (projectile[i].minion && projectile[i].owner != 255)
			{
				result = player[projectile[i].owner].cMinion;
			}
			if (projHook[projectile[i].type] && projectile[i].owner != 255)
			{
				result = player[projectile[i].owner].cGrapple;
			}
			if (projPet[projectile[i].type] && !projectile[i].minion && projectile[i].owner != 255 && projectile[i].damage == 0 && !ProjectileID.Sets.LightPet[projectile[i].type])
			{
				result = player[projectile[i].owner].cPet;
			}
			if (!projectile[i].minion && projectile[i].owner != 255 && projectile[i].damage == 0 && ProjectileID.Sets.LightPet[projectile[i].type])
			{
				result = player[projectile[i].owner].cLight;
			}
			if (projectile[i].type == 623 && projectile[i].owner != 255)
			{
				result = player[projectile[i].owner].cPet;
			}
			return result;
		}

		private void RefreshPlayerDrawOrder()
		{
			_playersThatDrawBehindNPCs.Clear();
			_playersThatDrawAfterProjectiles.Clear();
			if (gameMenu)
			{
				return;
			}
			Player player = null;
			for (int i = 0; i < 255; i++)
			{
				player = Main.player[i];
				if (i != myPlayer && player.active && !player.outOfRange)
				{
					if (player.isLockedToATile)
					{
						_playersThatDrawBehindNPCs.Add(player);
					}
					else
					{
						_playersThatDrawAfterProjectiles.Add(player);
					}
				}
			}
			player = LocalPlayer;
			if (player.isLockedToATile)
			{
				_playersThatDrawBehindNPCs.Add(player);
			}
			else
			{
				_playersThatDrawAfterProjectiles.Add(player);
			}
		}

		protected void DrawPlayers_BehindNPCs()
		{
			PotionOfReturnRenderer.DrawPlayers(Camera, _playersThatDrawBehindNPCs.Where((Player p) => p.PotionOfReturnOriginalUsePosition.HasValue));
			PlayerRenderer.DrawPlayers(Camera, _playersThatDrawBehindNPCs);
		}

		protected void DrawPlayers_AfterProjectiles()
		{
			PotionOfReturnRenderer.DrawPlayers(Camera, _playersThatDrawAfterProjectiles.Where((Player p) => p.PotionOfReturnOriginalUsePosition.HasValue));
			PlayerRenderer.DrawPlayers(Camera, _playersThatDrawAfterProjectiles);
		}

		protected void DrawElderEye(SpriteBatch spriteBatch, Vector2 worldPosition, float opacity, float scale, int frameNumber, Microsoft.Xna.Framework.Color passedColor)
		{
			Texture2D value = TextureAssets.Extra[78].Value;
			Vector2 origin = new Vector2(68f, 94f);
			Microsoft.Xna.Framework.Rectangle value2 = value.Frame(1, 8, 0, frameNumber);
			Vector2 position = worldPosition - screenPosition;
			passedColor *= opacity;
			spriteBatch.Draw(value, position, value2, passedColor, 0f, origin, scale, SpriteEffects.None, 0f);
		}

		protected void DrawNPCs(bool behindTiles = false)
		{
			bool flag = false;
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 800, (int)screenPosition.Y - 800, screenWidth + 1600, screenHeight + 1600);
			for (int num = 199; num >= 0; num--)
			{
				try
				{
					if (npc[num].active && npc[num].type > 0 && npc[num].type < 663 && !npc[num].hide)
					{
						npc[num].position += npc[num].netOffset;
						if (npc[num].behindTiles == behindTiles)
						{
							if (npc[num].type == 125 || npc[num].type == 126)
							{
								if (!flag)
								{
									flag = true;
									for (int i = 0; i < 200; i++)
									{
										if (!npc[i].active || num == i || (npc[i].type != 125 && npc[i].type != 126))
										{
											continue;
										}
										float num2 = npc[i].position.X + (float)npc[i].width * 0.5f;
										float num3 = npc[i].position.Y + (float)npc[i].height * 0.5f;
										Vector2 vector = new Vector2(npc[num].position.X + (float)npc[num].width * 0.5f, npc[num].position.Y + (float)npc[num].height * 0.5f);
										float num4 = num2 - vector.X;
										float num5 = num3 - vector.Y;
										float rotation = (float)Math.Atan2(num5, num4) - 1.57f;
										bool flag2 = true;
										float num6 = (float)Math.Sqrt(num4 * num4 + num5 * num5);
										if (num6 > 2000f)
										{
											flag2 = false;
										}
										while (flag2)
										{
											num6 = (float)Math.Sqrt(num4 * num4 + num5 * num5);
											if (num6 < 40f)
											{
												flag2 = false;
												continue;
											}
											num6 = (float)TextureAssets.Chain12.Height() / num6;
											num4 *= num6;
											num5 *= num6;
											vector.X += num4;
											vector.Y += num5;
											num4 = num2 - vector.X;
											num5 = num3 - vector.Y;
											Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
											spriteBatch.Draw(TextureAssets.Chain12.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain12.Width(), TextureAssets.Chain12.Height()), color, rotation, new Vector2((float)TextureAssets.Chain12.Width() * 0.5f, (float)TextureAssets.Chain12.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
										}
									}
								}
							}
							else if (npc[num].type == 263 && npc[num].aiStyle == 52 && NPC.plantBoss >= 0)
							{
								Vector2 vector2 = new Vector2(npc[num].position.X + (float)(npc[num].width / 2), npc[num].position.Y + (float)(npc[num].height / 2));
								float num7 = npc[NPC.plantBoss].Center.X - vector2.X;
								float num8 = npc[NPC.plantBoss].Center.Y - vector2.Y;
								float rotation2 = (float)Math.Atan2(num8, num7) - 1.57f;
								bool flag3 = true;
								while (flag3)
								{
									int num9 = 16;
									int num10 = 32;
									float num11 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
									if (num11 < (float)num10)
									{
										num9 = (int)num11 - num10 + num9;
										flag3 = false;
									}
									num11 = (float)num9 / num11;
									num7 *= num11;
									num8 *= num11;
									vector2.X += num7;
									vector2.Y += num8;
									num7 = npc[NPC.plantBoss].Center.X - vector2.X + npc[NPC.plantBoss].netOffset.X;
									num8 = npc[NPC.plantBoss].Center.Y - vector2.Y + npc[NPC.plantBoss].netOffset.Y;
									Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
									spriteBatch.Draw(TextureAssets.Chain26.Value, new Vector2(vector2.X - screenPosition.X, vector2.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain26.Width(), num9), color2, rotation2, new Vector2((float)TextureAssets.Chain26.Width() * 0.5f, (float)TextureAssets.Chain26.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
								}
							}
							else if (npc[num].type == 264 && npc[num].aiStyle == 53 && NPC.plantBoss >= 0)
							{
								int num12 = NPC.plantBoss;
								if (npc[num].ai[3] > 0f)
								{
									num12 = (int)npc[num].ai[3] - 1;
								}
								Vector2 vector3 = new Vector2(npc[num].position.X + (float)(npc[num].width / 2), npc[num].position.Y + (float)(npc[num].height / 2));
								float num13 = npc[num12].Center.X - vector3.X;
								float num14 = npc[num12].Center.Y - vector3.Y;
								float rotation3 = (float)Math.Atan2(num14, num13) - 1.57f;
								bool flag4 = true;
								while (flag4)
								{
									int num15 = 16;
									int num16 = 32;
									float num17 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
									if (num17 < (float)num16)
									{
										num15 = (int)num17 - num16 + num15;
										flag4 = false;
									}
									num17 = (float)num15 / num17;
									num13 *= num17;
									num14 *= num17;
									vector3.X += num13;
									vector3.Y += num14;
									num13 = npc[num12].Center.X - vector3.X + npc[num12].netOffset.X;
									num14 = npc[num12].Center.Y - vector3.Y + npc[num12].netOffset.Y;
									Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
									spriteBatch.Draw(TextureAssets.Chain27.Value, new Vector2(vector3.X - screenPosition.X, vector3.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain27.Width(), num15), color3, rotation3, new Vector2((float)TextureAssets.Chain27.Width() * 0.5f, (float)TextureAssets.Chain27.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
								}
							}
							if (NPCID.Sets.MustAlwaysDraw[npc[num].type] || rectangle.Intersects(new Microsoft.Xna.Framework.Rectangle((int)npc[num].position.X, (int)npc[num].position.Y, npc[num].width, npc[num].height)))
							{
								DrawNPCCheckAlt(npc[num]);
								DrawNPC(num, behindTiles);
							}
						}
						npc[num].position -= npc[num].netOffset;
					}
				}
				catch
				{
					npc[num].active = false;
				}
			}
		}

		protected void DrawNPCCheckAlt(NPC n)
		{
			if (TownNPCProfiles.Instance.GetProfile(n.type, out var profile))
			{
				TextureAssets.Npc[n.type] = profile.GetTextureNPCShouldUse(n);
			}
		}

		protected void DrawNPC(int iNPCIndex, bool behindTiles)
		{
			NPC rCurrentNPC = npc[iNPCIndex];
			Vector2 screenPos = screenPosition;
			DrawNPCDirect(spriteBatch, rCurrentNPC, behindTiles, screenPos);
		}

		public void DrawNPCDirect_QueenSlimeWings(NPC rCurrentNPC, SpriteBatch mySpriteBatch, Vector2 screenPos, Vector2 drawCenter, Microsoft.Xna.Framework.Color originColor)
		{
			Texture2D value = TextureAssets.Extra[185].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, 4, 0, (int)rCurrentNPC.localAI[3] / 6);
			float scale = 0.8f;
			for (int i = 0; i < 2; i++)
			{
				float x = 1f;
				float num = 0f;
				SpriteEffects effects = SpriteEffects.None;
				if (i == 1)
				{
					x = 0f;
					num = 0f - num + 2f;
					effects = SpriteEffects.FlipHorizontally;
				}
				Vector2 origin = rectangle.Size() * new Vector2(x, 0.5f);
				Vector2 vector = new Vector2(drawCenter.X + num, drawCenter.Y);
				if (rCurrentNPC.rotation != 0f)
				{
					vector = vector.RotatedBy(rCurrentNPC.rotation, rCurrentNPC.Bottom);
				}
				vector -= screenPos;
				float num2 = MathHelper.Clamp(rCurrentNPC.velocity.Y, -6f, 6f) * -0.1f;
				if (i == 0)
				{
					num2 *= -1f;
				}
				mySpriteBatch.Draw(value, vector, rectangle, originColor, rCurrentNPC.rotation + num2, origin, scale, effects, 0f);
			}
		}

		public void DrawNPCDirect(SpriteBatch mySpriteBatch, NPC rCurrentNPC, bool behindTiles, Vector2 screenPos)
		{
			int type = rCurrentNPC.type;
			rCurrentNPC.SetFrameSize();
			if (rCurrentNPC.realLife == -1 && rCurrentNPC.life >= rCurrentNPC.lifeMax && !rCurrentNPC.boss)
			{
				bool flag = Lighting.GetColor((int)((double)rCurrentNPC.position.X + (double)rCurrentNPC.width * 0.5) / 16, (int)(((double)rCurrentNPC.position.Y + (double)rCurrentNPC.height * 0.5) / 16.0)).ToVector3().Length() > 0.4325f;
				bool flag2 = false;
				if (LockOnHelper.AimedTarget == rCurrentNPC)
				{
					flag2 = true;
				}
				else if (rCurrentNPC.Distance(Main.player[myPlayer].Center) < 350f && flag)
				{
					flag2 = true;
				}
				if (flag2 && rCurrentNPC.lifeMax < 5)
				{
					flag2 = false;
				}
				if (flag2 && rCurrentNPC.aiStyle == 25 && rCurrentNPC.ai[0] == 0f)
				{
					flag2 = false;
				}
				if (flag2)
				{
					rCurrentNPC.nameOver = MathHelper.Clamp(rCurrentNPC.nameOver + 0.025f, 0f, 1f);
				}
				else
				{
					rCurrentNPC.nameOver = MathHelper.Clamp(rCurrentNPC.nameOver - 0.025f, 0f, 1f);
				}
			}
			else
			{
				rCurrentNPC.nameOver = MathHelper.Clamp(rCurrentNPC.nameOver - 0.025f, 0f, 1f);
			}
			if (type == 1 && rCurrentNPC.ai[0] == -999f)
			{
				return;
			}
			if (type == 101)
			{
				bool flag3 = true;
				Vector2 vector = new Vector2(rCurrentNPC.position.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y + (float)(rCurrentNPC.height / 2));
				float num = rCurrentNPC.ai[0] * 16f + 8f - vector.X;
				float num2 = rCurrentNPC.ai[1] * 16f + 8f - vector.Y;
				float rotation = (float)Math.Atan2(num2, num) - 1.57f;
				bool flag4 = true;
				while (flag4)
				{
					float num3 = 0.75f;
					int height = 28;
					float num4 = (float)Math.Sqrt(num * num + num2 * num2);
					if (num4 < 28f * num3)
					{
						height = (int)num4 - 40 + 28;
						flag4 = false;
					}
					num4 = 20f * num3 / num4;
					num *= num4;
					num2 *= num4;
					vector.X += num;
					vector.Y += num2;
					num = rCurrentNPC.ai[0] * 16f + 8f - vector.X;
					num2 = rCurrentNPC.ai[1] * 16f + 8f - vector.Y;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
					if (rCurrentNPC.IsABestiaryIconDummy)
					{
						color = rCurrentNPC.GetBestiaryEntryColor();
					}
					if (!flag3)
					{
						flag3 = true;
						mySpriteBatch.Draw(TextureAssets.Chain10.Value, new Vector2(vector.X - screenPos.X, vector.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain10.Width(), height), color, rotation, new Vector2((float)TextureAssets.Chain10.Width() * 0.5f, (float)TextureAssets.Chain10.Height() * 0.5f), num3, SpriteEffects.None, 0f);
					}
					else
					{
						flag3 = false;
						mySpriteBatch.Draw(TextureAssets.Chain11.Value, new Vector2(vector.X - screenPos.X, vector.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain10.Width(), height), color, rotation, new Vector2((float)TextureAssets.Chain10.Width() * 0.5f, (float)TextureAssets.Chain10.Height() * 0.5f), num3, SpriteEffects.None, 0f);
					}
				}
			}
			else if (rCurrentNPC.aiStyle == 13)
			{
				Vector2 vector2 = new Vector2(rCurrentNPC.position.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y + (float)(rCurrentNPC.height / 2));
				float num5 = rCurrentNPC.ai[0] * 16f + 8f - vector2.X;
				float num6 = rCurrentNPC.ai[1] * 16f + 8f - vector2.Y;
				float rotation2 = (float)Math.Atan2(num6, num5) - 1.57f;
				bool flag5 = true;
				while (flag5)
				{
					int num7 = 28;
					int num8 = 40;
					if (type == 259 || type == 260)
					{
						num8 = 20;
						num7 = 12;
					}
					float num9 = (float)Math.Sqrt(num5 * num5 + num6 * num6);
					if (num9 < (float)num8)
					{
						num7 = (int)num9 - num8 + num7;
						flag5 = false;
					}
					num9 = (float)num7 / num9;
					num5 *= num9;
					num6 *= num9;
					vector2.X += num5;
					vector2.Y += num6;
					num5 = rCurrentNPC.ai[0] * 16f + 8f - vector2.X;
					num6 = rCurrentNPC.ai[1] * 16f + 8f - vector2.Y;
					Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
					if (rCurrentNPC.IsABestiaryIconDummy)
					{
						color2 = rCurrentNPC.GetBestiaryEntryColor();
					}
					if (type == 259 || type == 260)
					{
						color2.B = byte.MaxValue;
						if (color2.R < 100)
						{
							color2.R = 100;
						}
						if (color2.G < 150)
						{
							color2.G = 150;
						}
					}
					switch (type)
					{
					case 56:
						mySpriteBatch.Draw(TextureAssets.Chain5.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain4.Width(), num7), color2, rotation2, new Vector2((float)TextureAssets.Chain4.Width() * 0.5f, (float)TextureAssets.Chain4.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
						break;
					case 175:
						mySpriteBatch.Draw(TextureAssets.Chain14.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain14.Width(), num7), color2, rotation2, new Vector2((float)TextureAssets.Chain14.Width() * 0.5f, (float)TextureAssets.Chain14.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
						break;
					case 259:
						mySpriteBatch.Draw(TextureAssets.Chain24.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain24.Width(), num7), color2, rotation2, new Vector2((float)TextureAssets.Chain24.Width() * 0.5f, (float)TextureAssets.Chain24.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
						break;
					case 260:
						mySpriteBatch.Draw(TextureAssets.Chain25.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain25.Width(), num7), color2, rotation2, new Vector2((float)TextureAssets.Chain25.Width() * 0.5f, (float)TextureAssets.Chain25.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
						break;
					default:
						mySpriteBatch.Draw(TextureAssets.Chain4.Value, new Vector2(vector2.X - screenPos.X, vector2.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain4.Width(), num7), color2, rotation2, new Vector2((float)TextureAssets.Chain4.Width() * 0.5f, (float)TextureAssets.Chain4.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
						break;
					}
				}
			}
			if (type == 327)
			{
				float rotation3 = 0f;
				Vector2 vector3 = new Vector2(rCurrentNPC.Center.X, rCurrentNPC.Center.Y + 80f);
				int num10 = (int)rCurrentNPC.localAI[1];
				Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
				mySpriteBatch.Draw(TextureAssets.PumpkingCloak.Value, new Vector2(vector3.X - screenPos.X, vector3.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, TextureAssets.PumpkingCloak.Height() / 5 * num10, TextureAssets.PumpkingCloak.Width(), TextureAssets.PumpkingCloak.Height() / 5), color3, rotation3, new Vector2((float)TextureAssets.PumpkingCloak.Width() * 0.5f, (float)TextureAssets.PumpkingCloak.Height() * 0.5f / 5f), 1f, SpriteEffects.None, 0f);
			}
			if (type == 328)
			{
				Vector2 vector4 = new Vector2(rCurrentNPC.position.X + (float)rCurrentNPC.width * 0.5f - 5f * rCurrentNPC.ai[0], rCurrentNPC.position.Y + 20f);
				for (int i = 0; i < 2; i++)
				{
					float num11 = npc[(int)rCurrentNPC.ai[1]].position.X + (float)(npc[(int)rCurrentNPC.ai[1]].width / 2) - vector4.X;
					float num12 = npc[(int)rCurrentNPC.ai[1]].position.Y + (float)(npc[(int)rCurrentNPC.ai[1]].height / 2) - 30f - vector4.Y;
					float num13 = 0f;
					if (i == 0)
					{
						num11 -= 200f * rCurrentNPC.ai[0];
						num12 += 130f;
						num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
						num13 = 92f / num13;
						vector4.X += num11 * num13;
						vector4.Y += num12 * num13;
					}
					else
					{
						num11 -= 50f * rCurrentNPC.ai[0];
						num12 += 80f;
						num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
						num13 = 60f / num13;
						vector4.X += num11 * num13;
						vector4.Y += num12 * num13;
					}
					float rotation4 = (float)Math.Atan2(num12, num11) - 1.57f;
					Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
					mySpriteBatch.Draw(TextureAssets.PumpkingArm.Value, new Vector2(vector4.X - screenPos.X, vector4.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.PumpkingArm.Width(), TextureAssets.PumpkingArm.Height()), color4, rotation4, new Vector2((float)TextureAssets.PumpkingArm.Width() * 0.5f, (float)TextureAssets.PumpkingArm.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
					if (i == 0)
					{
						vector4.X += num11 * num13 / 2f;
						vector4.Y += num12 * num13 / 2f;
					}
				}
			}
			if (type == 36)
			{
				Vector2 vector5 = new Vector2(rCurrentNPC.position.X + (float)rCurrentNPC.width * 0.5f - 5f * rCurrentNPC.ai[0], rCurrentNPC.position.Y + 20f);
				for (int j = 0; j < 2; j++)
				{
					float num14 = npc[(int)rCurrentNPC.ai[1]].position.X + (float)(npc[(int)rCurrentNPC.ai[1]].width / 2) - vector5.X;
					float num15 = npc[(int)rCurrentNPC.ai[1]].position.Y + (float)(npc[(int)rCurrentNPC.ai[1]].height / 2) - vector5.Y;
					float num16 = 0f;
					if (j == 0)
					{
						num14 -= 200f * rCurrentNPC.ai[0];
						num15 += 130f;
						num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
						num16 = 92f / num16;
						vector5.X += num14 * num16;
						vector5.Y += num15 * num16;
					}
					else
					{
						num14 -= 50f * rCurrentNPC.ai[0];
						num15 += 80f;
						num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
						num16 = 60f / num16;
						vector5.X += num14 * num16;
						vector5.Y += num15 * num16;
					}
					float rotation5 = (float)Math.Atan2(num15, num14) - 1.57f;
					Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)vector5.X / 16, (int)(vector5.Y / 16f));
					mySpriteBatch.Draw(TextureAssets.BoneArm.Value, new Vector2(vector5.X - screenPos.X, vector5.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.BoneArm.Width(), TextureAssets.BoneArm.Height()), color5, rotation5, new Vector2((float)TextureAssets.BoneArm.Width() * 0.5f, (float)TextureAssets.BoneArm.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
					if (j == 0)
					{
						vector5.X += num14 * num16 / 2f;
						vector5.Y += num15 * num16 / 2f;
					}
					else if (base.IsActive)
					{
						vector5.X += num14 * num16 - 16f;
						vector5.Y += num15 * num16 - 6f;
						int num17 = Dust.NewDust(new Vector2(vector5.X, vector5.Y), 30, 10, 5, num14 * 0.02f, num15 * 0.02f, 0, default(Microsoft.Xna.Framework.Color), 2f);
						dust[num17].noGravity = true;
					}
				}
			}
			if (rCurrentNPC.aiStyle == 47)
			{
				float num18 = 1f;
				Vector2 vector6 = new Vector2(rCurrentNPC.Center.X, rCurrentNPC.Center.Y);
				Vector2 center = rCurrentNPC.Center;
				if (NPC.golemBoss != -1)
				{
					center = npc[NPC.golemBoss].Center;
				}
				float num19 = center.X - vector6.X;
				float num20 = center.Y - vector6.Y;
				num20 -= 7f;
				num19 = ((type != 247) ? (num19 + 66f) : (num19 - 70f));
				if (getGoodWorld)
				{
					num19 = ((type != 247) ? (num19 - 40f) : (num19 + 40f));
					num18 = 0.5f;
				}
				float rotation6 = (float)Math.Atan2(num20, num19) - 1.57f;
				bool flag6 = true;
				while (flag6)
				{
					float num21 = (float)Math.Sqrt(num19 * num19 + num20 * num20);
					if (num21 < 16f)
					{
						flag6 = false;
						continue;
					}
					num21 = 16f * num18 / num21;
					num19 *= num21;
					num20 *= num21;
					vector6.X += num19;
					vector6.Y += num20;
					num19 = center.X - vector6.X;
					num20 = center.Y - vector6.Y;
					num20 -= 7f;
					num19 = ((type != 247) ? (num19 + 66f) : (num19 - 70f));
					if (getGoodWorld)
					{
						num20 += 8f;
						num19 = ((type != 247) ? (num19 - 40f) : (num19 + 40f));
						num18 = 0.5f;
					}
					Microsoft.Xna.Framework.Color color6 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
					mySpriteBatch.Draw(TextureAssets.Chain21.Value, new Vector2(vector6.X - screenPos.X, vector6.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain21.Width(), TextureAssets.Chain21.Height()), color6, rotation6, new Vector2((float)TextureAssets.Chain21.Width() * 0.5f, (float)TextureAssets.Chain21.Height() * 0.5f), num18, SpriteEffects.None, 0f);
				}
			}
			if (rCurrentNPC.aiStyle >= 33 && rCurrentNPC.aiStyle <= 36)
			{
				Vector2 vector7 = new Vector2(rCurrentNPC.position.X + (float)rCurrentNPC.width * 0.5f - 5f * rCurrentNPC.ai[0], rCurrentNPC.position.Y + 20f);
				for (int k = 0; k < 2; k++)
				{
					float num22 = npc[(int)rCurrentNPC.ai[1]].position.X + (float)(npc[(int)rCurrentNPC.ai[1]].width / 2) - vector7.X;
					float num23 = npc[(int)rCurrentNPC.ai[1]].position.Y + (float)(npc[(int)rCurrentNPC.ai[1]].height / 2) - vector7.Y;
					float num24 = 0f;
					if (k == 0)
					{
						num22 -= 200f * rCurrentNPC.ai[0];
						num23 += 130f;
						num24 = (float)Math.Sqrt(num22 * num22 + num23 * num23);
						num24 = 92f / num24;
						vector7.X += num22 * num24;
						vector7.Y += num23 * num24;
					}
					else
					{
						num22 -= 50f * rCurrentNPC.ai[0];
						num23 += 80f;
						num24 = (float)Math.Sqrt(num22 * num22 + num23 * num23);
						num24 = 60f / num24;
						vector7.X += num22 * num24;
						vector7.Y += num23 * num24;
					}
					float rotation7 = (float)Math.Atan2(num23, num22) - 1.57f;
					Microsoft.Xna.Framework.Color color7 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
					mySpriteBatch.Draw(TextureAssets.BoneArm2.Value, new Vector2(vector7.X - screenPos.X, vector7.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.BoneArm.Width(), TextureAssets.BoneArm.Height()), color7, rotation7, new Vector2((float)TextureAssets.BoneArm.Width() * 0.5f, (float)TextureAssets.BoneArm.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
					if (k == 0)
					{
						vector7.X += num22 * num24 / 2f;
						vector7.Y += num23 * num24 / 2f;
					}
					else if (base.IsActive)
					{
						vector7.X += num22 * num24 - 16f;
						vector7.Y += num23 * num24 - 6f;
						int num25 = Dust.NewDust(new Vector2(vector7.X, vector7.Y), 30, 10, 6, num22 * 0.02f, num23 * 0.02f, 0, default(Microsoft.Xna.Framework.Color), 2.5f);
						dust[num25].noGravity = true;
					}
				}
			}
			if (rCurrentNPC.aiStyle == 20)
			{
				Vector2 vector8 = new Vector2(rCurrentNPC.position.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y + (float)(rCurrentNPC.height / 2));
				float num26 = rCurrentNPC.ai[1] - vector8.X;
				float num27 = rCurrentNPC.ai[2] - vector8.Y;
				float num28 = (rCurrentNPC.rotation = (float)Math.Atan2(num27, num26) - 1.57f);
				bool flag7 = true;
				while (flag7)
				{
					int height2 = 12;
					float num29 = (float)Math.Sqrt(num26 * num26 + num27 * num27);
					if (num29 < 20f)
					{
						height2 = (int)num29 - 20 + 12;
						flag7 = false;
					}
					num29 = 12f / num29;
					num26 *= num29;
					num27 *= num29;
					vector8.X += num26;
					vector8.Y += num27;
					num26 = rCurrentNPC.ai[1] - vector8.X;
					num27 = rCurrentNPC.ai[2] - vector8.Y;
					Microsoft.Xna.Framework.Color color8 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
					mySpriteBatch.Draw(TextureAssets.Chain.Value, new Vector2(vector8.X - screenPos.X, vector8.Y - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain.Width(), height2), color8, num28, new Vector2((float)TextureAssets.Chain.Width() * 0.5f, (float)TextureAssets.Chain.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
				}
				mySpriteBatch.Draw(TextureAssets.SpikeBase.Value, new Vector2(rCurrentNPC.ai[1] - screenPos.X, rCurrentNPC.ai[2] - screenPos.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.SpikeBase.Width(), TextureAssets.SpikeBase.Height()), Lighting.GetColor((int)rCurrentNPC.ai[1] / 16, (int)(rCurrentNPC.ai[2] / 16f)), num28 - 0.75f, new Vector2((float)TextureAssets.SpikeBase.Width() * 0.5f, (float)TextureAssets.SpikeBase.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
			}
			Microsoft.Xna.Framework.Color npcColor = Lighting.GetColor((int)((double)rCurrentNPC.position.X + (double)rCurrentNPC.width * 0.5) / 16, (int)(((double)rCurrentNPC.position.Y + (double)rCurrentNPC.height * 0.5) / 16.0));
			if (rCurrentNPC.IsABestiaryIconDummy)
			{
				npcColor = rCurrentNPC.GetBestiaryEntryColor();
			}
			if (type >= 277 && type <= 280)
			{
				if (npcColor.R < byte.MaxValue)
				{
					npcColor.R = byte.MaxValue;
				}
				if (npcColor.G < 175)
				{
					npcColor.G = 175;
				}
			}
			if (type == -4)
			{
				int r = npcColor.R;
				int g = npcColor.G;
				int b = npcColor.B;
				r *= 2;
				if (r > 255)
				{
					r = 255;
				}
				g *= 2;
				if (g > 255)
				{
					g = 255;
				}
				b *= 2;
				if (b > 255)
				{
					b = 255;
				}
				npcColor = new Microsoft.Xna.Framework.Color(r, g, b);
			}
			if (behindTiles && type != 113 && type != 114)
			{
				int num30 = (int)((rCurrentNPC.position.X - 8f) / 16f);
				int num31 = (int)((rCurrentNPC.position.X + (float)rCurrentNPC.width + 8f) / 16f);
				int num32 = (int)((rCurrentNPC.position.Y - 8f) / 16f);
				int num33 = (int)((rCurrentNPC.position.Y + (float)rCurrentNPC.height + 8f) / 16f);
				for (int l = num30; l <= num31; l++)
				{
					for (int m = num32; m <= num33; m++)
					{
						if (Lighting.Brightness(l, m) == 0f)
						{
							npcColor = Microsoft.Xna.Framework.Color.Black;
						}
					}
				}
			}
			npcColor = rCurrentNPC.GetNPCColorTintedByBuffs(npcColor);
			if (type == 50)
			{
				Vector2 zero = Vector2.Zero;
				float num34 = 0f;
				zero.Y -= rCurrentNPC.velocity.Y;
				zero.X -= rCurrentNPC.velocity.X * 2f;
				num34 += rCurrentNPC.velocity.X * 0.05f;
				if (rCurrentNPC.frame.Y == 120)
				{
					zero.Y += 2f;
				}
				if (rCurrentNPC.frame.Y == 360)
				{
					zero.Y -= 2f;
				}
				if (rCurrentNPC.frame.Y == 480)
				{
					zero.Y -= 6f;
				}
				mySpriteBatch.Draw(TextureAssets.Ninja.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) + zero.X, rCurrentNPC.position.Y - screenPos.Y + (float)(rCurrentNPC.height / 2) + zero.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Ninja.Width(), TextureAssets.Ninja.Height()), npcColor, num34, new Vector2(TextureAssets.Ninja.Width() / 2, TextureAssets.Ninja.Height() / 2), 1f, SpriteEffects.None, 0f);
			}
			if (type == 71)
			{
				Vector2 zero2 = Vector2.Zero;
				float num35 = 0f;
				zero2.Y -= rCurrentNPC.velocity.Y * 0.3f;
				zero2.X -= rCurrentNPC.velocity.X * 0.6f;
				num35 += rCurrentNPC.velocity.X * 0.09f;
				if (rCurrentNPC.frame.Y == 120)
				{
					zero2.Y += 2f;
				}
				if (rCurrentNPC.frame.Y == 360)
				{
					zero2.Y -= 2f;
				}
				if (rCurrentNPC.frame.Y == 480)
				{
					zero2.Y -= 6f;
				}
				instance.LoadItem(327);
				mySpriteBatch.Draw(TextureAssets.Item[327].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) + zero2.X, rCurrentNPC.position.Y - screenPos.Y + (float)(rCurrentNPC.height / 2) + zero2.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Item[327].Width(), TextureAssets.Item[327].Height()), npcColor, num35, new Vector2(TextureAssets.Item[327].Width() / 2, TextureAssets.Item[327].Height() / 2), 1f, SpriteEffects.None, 0f);
			}
			if (type == 69)
			{
				mySpriteBatch.Draw(TextureAssets.AntLion.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2), rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height + 14f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.AntLion.Width(), TextureAssets.AntLion.Height()), npcColor, (0f - rCurrentNPC.rotation) * 0.3f, new Vector2(TextureAssets.AntLion.Width() / 2, TextureAssets.AntLion.Height() / 2), 1f, SpriteEffects.None, 0f);
			}
			if (type == 1 && rCurrentNPC.ai[1] > 0f)
			{
				DrawNPC_SlimeItem(rCurrentNPC, type, npcColor, 0f);
			}
			float num36 = 0f;
			float num37 = NPCAddHeight(rCurrentNPC);
			Vector2 halfSize = new Vector2(TextureAssets.Npc[type].Width() / 2, TextureAssets.Npc[type].Height() / npcFrameCount[type] / 2);
			if (type == 108 || type == 124 || type == 625)
			{
				num36 = 2f;
			}
			else if (type == 357)
			{
				num36 = rCurrentNPC.localAI[0];
			}
			else if (type == 467)
			{
				num36 = 7f;
			}
			else if (type == 537)
			{
				num36 = 2f;
			}
			else if (type == 581)
			{
				num36 = -6f;
			}
			else if (type == 490)
			{
				num36 = 4f;
			}
			else if (type == 484)
			{
				num36 = 2f;
			}
			else if (type == 483)
			{
				num36 = 14f;
			}
			else if (type == 477)
			{
				num37 = 22f;
			}
			else if (type == 478)
			{
				num36 -= 2f;
			}
			else if (type == 606)
			{
				num36 -= 2f;
			}
			else if (type == 612 || type == 613)
			{
				num36 -= 2f;
			}
			else if (type == 469 && rCurrentNPC.ai[2] == 1f)
			{
				num36 = 14f;
			}
			else
			{
				switch (type)
				{
				case 4:
					halfSize = new Vector2(55f, 107f);
					break;
				case 125:
					halfSize = new Vector2(55f, 107f);
					break;
				case 126:
					halfSize = new Vector2(55f, 107f);
					break;
				case 626:
				case 627:
					if (rCurrentNPC.wet)
					{
						num36 = -2f;
						halfSize = rCurrentNPC.frame.Size() * new Vector2(0.5f, 0.5f) + new Vector2(0f, -4f);
					}
					else
					{
						num36 = 2f;
					}
					break;
				case 63:
				case 64:
				case 103:
					halfSize.Y += 4f;
					break;
				case 69:
					halfSize.Y += 8f;
					break;
				case 262:
					halfSize.Y = 77f;
					num37 += 26f;
					break;
				case 264:
					halfSize.Y = 21f;
					num37 += 2f;
					break;
				case 266:
					num37 += 50f;
					break;
				case 268:
					num37 += 16f;
					break;
				case 288:
					num37 += 6f;
					break;
				}
			}
			if (rCurrentNPC.aiStyle == 10 || type == 72)
			{
				npcColor = Microsoft.Xna.Framework.Color.White;
			}
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (rCurrentNPC.spriteDirection == 1)
			{
				spriteEffects = SpriteEffects.FlipHorizontally;
			}
			if (type == 124 && rCurrentNPC.localAI[0] == 0f)
			{
				int num38 = 0;
				if (rCurrentNPC.frame.Y > 56)
				{
					num38 += 4;
				}
				num38 += rCurrentNPC.frame.Y / 56;
				if (num38 >= OffsetsPlayerHeadgear.Length)
				{
					num38 = 0;
				}
				float y = OffsetsPlayerHeadgear[num38].Y;
				LoadProjectile(582);
				Texture2D value = TextureAssets.Projectile[582].Value;
				Vector2 position = rCurrentNPC.Center - screenPos;
				position -= new Vector2(value.Width, value.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
				position += new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY + y);
				position += new Vector2(-rCurrentNPC.spriteDirection * 2, -2f);
				mySpriteBatch.Draw(value, position, null, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, value.Size() * new Vector2(0f, 0.5f), rCurrentNPC.scale, spriteEffects, 0f);
			}
			switch (type)
			{
			default:
				if (type != 546 && type != 552 && type != 553 && type != 554 && type != 561 && type != 562 && type != 563 && type != 555 && type != 556 && type != 557 && type != 558 && type != 559 && type != 560 && type != 574 && type != 575 && type != 568 && type != 569 && type != 572 && type != 573 && type != 566 && type != 567 && type != 570 && type != 578 && type != 571 && type != 583 && type != 584 && type != 585 && type != 618 && type != 620 && type != 661)
				{
					switch (type)
					{
					case 551:
					{
						Texture2D value9 = TextureAssets.Npc[type].Value;
						Vector2 vector13 = rCurrentNPC.Center - screenPos;
						Microsoft.Xna.Framework.Rectangle frame = rCurrentNPC.frame;
						_ = frame.Size() / 2f;
						SpriteEffects spriteEffects2 = spriteEffects ^ SpriteEffects.FlipHorizontally;
						float rotation8 = rCurrentNPC.rotation;
						Microsoft.Xna.Framework.Color color14 = npcColor;
						Microsoft.Xna.Framework.Color value10 = Microsoft.Xna.Framework.Color.Lerp(color14, Microsoft.Xna.Framework.Color.White, 0.6f);
						value10.A = 66;
						Vector2 value11 = new Vector2(171f, 44f);
						Vector2 vector14 = new Vector2(230f, 52f);
						Vector2 vector15 = Vector2.Lerp(value11, vector14, 0.5f) + new Vector2(-50f, 30f);
						int num52 = (int)rCurrentNPC.localAI[0] / 4;
						Vector2 spinningpoint = value11 - vector15;
						Vector2 spinningpoint2 = vector14 - vector15;
						Texture2D value12 = TextureAssets.Extra[82].Value;
						if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
						{
							spinningpoint2.X *= -1f;
						}
						Microsoft.Xna.Framework.Rectangle value13 = value12.Frame(2, 5, num52 / 5, num52 % 5);
						Vector2 origin4 = new Vector2(16f, 176f);
						if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
						{
							origin4.X = (float)value13.Width - origin4.X;
						}
						if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
						{
							vector15.X = (float)frame.Width - vector15.X;
						}
						Texture2D value14 = TextureAssets.Extra[81].Value;
						if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
						{
							spinningpoint.X *= -1f;
						}
						Microsoft.Xna.Framework.Rectangle value15 = value14.Frame(2, 5, num52 / 5, num52 % 5);
						Vector2 origin5 = new Vector2(215f, 170f);
						if (spriteEffects2.HasFlag(SpriteEffects.FlipHorizontally))
						{
							origin5.X = (float)value15.Width - origin5.X;
						}
						float lerpValue = Utils.GetLerpValue(0f, 30f, rCurrentNPC.localAI[1], clamped: true);
						if (lerpValue == 1f)
						{
							lerpValue = Utils.GetLerpValue(60f, 30f, rCurrentNPC.localAI[1], clamped: true);
						}
						lerpValue = 2f;
						Vector2 value16 = rCurrentNPC.Size / 2f - screenPos;
						int num53 = -3;
						int num54 = 0;
						byte b2 = 2;
						for (int num55 = 9; num55 > num54; num55 += num53)
						{
							Vector2 vector16 = rCurrentNPC.oldPos[num55] + value16;
							float num56 = rCurrentNPC.oldRot[num55];
							Microsoft.Xna.Framework.Color color15 = color14 * (1f - (float)num55 / 10f) * 0.35f;
							color15.A /= b2;
							mySpriteBatch.Draw(value12, vector16 + spinningpoint2.RotatedBy(num56), value13, color15, num56, origin4, 1f, spriteEffects2, 0f);
							mySpriteBatch.Draw(value9, vector16, frame, color15, num56, vector15, 1f, spriteEffects2, 0f);
							mySpriteBatch.Draw(value14, vector16 + spinningpoint.RotatedBy(num56), value15, color15, num56, origin5, 1f, spriteEffects2, 0f);
						}
						mySpriteBatch.Draw(value12, vector13 + spinningpoint2.RotatedBy(rotation8), value13, color14, rotation8, origin4, 1f, spriteEffects2, 0f);
						mySpriteBatch.Draw(value9, vector13, frame, color14, rotation8, vector15, 1f, spriteEffects2, 0f);
						mySpriteBatch.Draw(TextureAssets.GlowMask[226].Value, vector13, frame, value10 * (0.7f + 0.3f * lerpValue), rotation8, vector15, 1f, spriteEffects2, 0f);
						mySpriteBatch.Draw(value14, vector13 + spinningpoint.RotatedBy(rotation8), value15, color14, rotation8, origin5, 1f, spriteEffects2, 0f);
						return;
					}
					case 657:
					{
						Texture2D value2 = TextureAssets.Npc[type].Value;
						Vector2 vector9 = rCurrentNPC.Bottom - screenPos;
						vector9.Y += 2f;
						int num39 = npcFrameCount[rCurrentNPC.type];
						int num40 = rCurrentNPC.frame.Y / rCurrentNPC.frame.Height;
						Microsoft.Xna.Framework.Rectangle rectangle = value2.Frame(2, 16, num40 / num39, num40 % num39);
						rectangle.Inflate(0, -2);
						Vector2 origin = rectangle.Size() * new Vector2(0.5f, 1f);
						Microsoft.Xna.Framework.Color color9 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.White, npcColor, 0.5f);
						if (rCurrentNPC.life <= rCurrentNPC.lifeMax / 2)
						{
							DrawNPCDirect_QueenSlimeWings(rCurrentNPC, mySpriteBatch, screenPos, rCurrentNPC.Center, color9);
						}
						Texture2D value3 = TextureAssets.Extra[186].Value;
						Microsoft.Xna.Framework.Rectangle rectangle2 = value3.Frame();
						Vector2 origin2 = rectangle2.Size() * new Vector2(0.5f, 0.5f);
						Vector2 vector10 = new Vector2(rCurrentNPC.Center.X, rCurrentNPC.Center.Y);
						float num41 = 0f;
						switch (num40)
						{
						case 1:
						case 6:
							num41 -= 10f;
							break;
						case 3:
						case 5:
							num41 += 10f;
							break;
						case 4:
						case 12:
						case 13:
						case 14:
						case 15:
							num41 += 18f;
							break;
						case 7:
						case 8:
							num41 -= 14f;
							break;
						case 9:
							num41 -= 16f;
							break;
						case 10:
							num41 -= 18f;
							break;
						case 11:
							num41 += 20f;
							break;
						case 20:
							num41 -= 14f;
							break;
						case 21:
						case 23:
							num41 -= 18f;
							break;
						case 22:
							num41 -= 22f;
							break;
						}
						vector10.Y += num41;
						if (rCurrentNPC.rotation != 0f)
						{
							vector10 = vector10.RotatedBy(rCurrentNPC.rotation, rCurrentNPC.Bottom);
						}
						vector10 -= screenPos;
						if (!rCurrentNPC.IsABestiaryIconDummy)
						{
							mySpriteBatch.End();
							mySpriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, null, Transform);
						}
						GameShaders.Misc["QueenSlime"].Apply();
						if (rCurrentNPC.ai[0] == 4f && rCurrentNPC.velocity.Y != 0f)
						{
							float scaleFactor = 1f;
							if (rCurrentNPC.ai[2] == 1f)
							{
								scaleFactor = 6f;
							}
							for (int num42 = 7; num42 >= 0; num42--)
							{
								float scale = 1f - (float)num42 / 8f;
								Vector2 vector11 = rCurrentNPC.oldPos[num42] + new Vector2((float)rCurrentNPC.width * 0.5f, rCurrentNPC.height);
								vector11 -= (rCurrentNPC.Bottom - Vector2.Lerp(vector11, rCurrentNPC.Bottom, 0.75f)) * scaleFactor;
								vector11 -= screenPos;
								Microsoft.Xna.Framework.Color color10 = color9 * scale;
								mySpriteBatch.Draw(value2, vector11, rectangle, color10, rCurrentNPC.rotation, origin, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
							}
						}
						if (!rCurrentNPC.IsABestiaryIconDummy)
						{
							mySpriteBatch.End();
							mySpriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
						}
						pixelShader.CurrentTechnique.Passes[0].Apply();
						mySpriteBatch.Draw(value3, vector10, rectangle2, color9, rCurrentNPC.rotation, origin2, 1f, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						GameShaders.Misc["QueenSlime"].Apply();
						if (!rCurrentNPC.IsABestiaryIconDummy)
						{
							mySpriteBatch.End();
							mySpriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, null, Transform);
						}
						DrawData value4 = new DrawData(value2, vector9, rectangle, rCurrentNPC.GetAlpha(color9), rCurrentNPC.rotation, origin, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0);
						GameShaders.Misc["QueenSlime"].Apply(value4);
						value4.Draw(mySpriteBatch);
						pixelShader.CurrentTechnique.Passes[0].Apply();
						if (!rCurrentNPC.IsABestiaryIconDummy)
						{
							mySpriteBatch.End();
							mySpriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
						}
						Texture2D value5 = TextureAssets.Extra[177].Value;
						rectangle = value5.Frame();
						origin = rectangle.Size() * new Vector2(0.5f, 0.5f);
						vector9 = new Vector2(rCurrentNPC.Center.X, rCurrentNPC.Top.Y - (float)rectangle.Bottom + 44f);
						float num43 = 0f;
						switch (num40)
						{
						case 1:
							num43 -= 10f;
							break;
						case 3:
						case 5:
						case 6:
							num43 += 10f;
							break;
						case 4:
						case 12:
						case 13:
						case 14:
						case 15:
							num43 += 18f;
							break;
						case 7:
						case 8:
							num43 -= 14f;
							break;
						case 9:
							num43 -= 16f;
							break;
						case 10:
							num43 -= 18f;
							break;
						case 11:
							num43 += 20f;
							break;
						case 20:
							num43 -= 14f;
							break;
						case 21:
						case 23:
							num43 -= 18f;
							break;
						case 22:
							num43 -= 22f;
							break;
						}
						vector9.Y += num43;
						if (rCurrentNPC.rotation != 0f)
						{
							vector9 = vector9.RotatedBy(rCurrentNPC.rotation, rCurrentNPC.Bottom);
						}
						vector9 -= screenPos;
						mySpriteBatch.Draw(value5, vector9, rectangle, color9, rCurrentNPC.rotation, origin, 1f, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						return;
					}
					case 576:
					case 577:
					{
						Texture2D value22 = TextureAssets.Npc[type].Value;
						Vector2 vector18 = rCurrentNPC.Bottom - screenPos;
						Microsoft.Xna.Framework.Rectangle rectangle6 = value22.Frame(5, 10, rCurrentNPC.frame.Y / 10, rCurrentNPC.frame.Y % 10);
						Vector2 origin8 = rectangle6.Size() * new Vector2(0.5f, 1f);
						origin8.Y -= 4f;
						int num64 = 94;
						if (rCurrentNPC.spriteDirection == 1)
						{
							origin8.X = num64;
						}
						else
						{
							origin8.X = rectangle6.Width - num64;
						}
						Microsoft.Xna.Framework.Color value23 = Microsoft.Xna.Framework.Color.White;
						float amount5 = 0f;
						float amount6 = 0f;
						int num65 = 0;
						float num66 = 0f;
						Microsoft.Xna.Framework.Color color20 = npcColor;
						if (rCurrentNPC.localAI[3] < 60f)
						{
							_ = 8f;
							float num67 = rCurrentNPC.localAI[3] / 60f;
							num65 = 3;
							num66 = 1f - num67 * num67;
							value23 = new Microsoft.Xna.Framework.Color(127, 0, 255, 0);
							amount6 = 1f;
							color20 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color20, num67 * num67);
						}
						for (int num68 = 0; num68 < num65; num68++)
						{
							Microsoft.Xna.Framework.Color value24 = npcColor;
							value24 = Microsoft.Xna.Framework.Color.Lerp(value24, value23, amount5);
							value24 = rCurrentNPC.GetAlpha(value24);
							value24 = Microsoft.Xna.Framework.Color.Lerp(value24, value23, amount6);
							value24 *= 1f - num66;
							Vector2 position11 = vector18;
							position11 -= new Vector2(value22.Width, value22.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position11 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value22, position11, rectangle6, value24, rCurrentNPC.rotation, origin8, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						}
						mySpriteBatch.Draw(value22, vector18, rectangle6, rCurrentNPC.GetAlpha(color20), rCurrentNPC.rotation, origin8, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						return;
					}
					case 594:
					{
						Texture2D value17 = TextureAssets.Npc[type].Value;
						Vector2 position7 = rCurrentNPC.Top - screenPos;
						Microsoft.Xna.Framework.Rectangle rectangle4 = value17.Frame(8, 1, rCurrentNPC.frame.Y);
						Microsoft.Xna.Framework.Rectangle value18 = value17.Frame(8);
						Vector2 origin6 = rectangle4.Size() * new Vector2(0.5f, 0f);
						Microsoft.Xna.Framework.Color color16 = npcColor;
						float scale4 = 1f;
						NPC nPC = rCurrentNPC.AI_113_WindyBalloon_GetSlaveNPC();
						if (nPC != null)
						{
							scale4 = nPC.scale;
							if (nPC.ai[1] > 0f)
							{
								DrawNPC_SlimeItem(nPC, nPC.type, color16, rCurrentNPC.rotation);
							}
							mySpriteBatch.Draw(value17, position7, value18, nPC.GetAlpha(color16), rCurrentNPC.rotation, origin6, scale4, spriteEffects, 0f);
							mySpriteBatch.Draw(value17, position7, value18, nPC.GetColor(color16), rCurrentNPC.rotation, origin6, scale4, spriteEffects, 0f);
						}
						mySpriteBatch.Draw(value17, position7, rectangle4, rCurrentNPC.GetAlpha(color16), rCurrentNPC.rotation, origin6, scale4, spriteEffects, 0f);
						return;
					}
					case 564:
					case 565:
					{
						Texture2D value19 = TextureAssets.Npc[type].Value;
						Vector2 vector17 = rCurrentNPC.Bottom - screenPos;
						Microsoft.Xna.Framework.Rectangle rectangle5 = value19.Frame(5, 9, rCurrentNPC.frame.Y / 9, rCurrentNPC.frame.Y % 9);
						Vector2 origin7 = rectangle5.Size() * new Vector2(0.5f, 1f);
						origin7.Y -= 10f;
						int num57 = 52;
						if (rCurrentNPC.spriteDirection == 1)
						{
							origin7.X = num57;
						}
						else
						{
							origin7.X = rectangle5.Width - num57;
						}
						Microsoft.Xna.Framework.Color value20 = Microsoft.Xna.Framework.Color.White;
						float amount3 = 0f;
						float amount4 = 0f;
						int num58 = 0;
						float num59 = 0f;
						float scaleFactor3 = 0f;
						Microsoft.Xna.Framework.Color color17 = npcColor;
						if (rCurrentNPC.localAI[3] < 60f)
						{
							float num60 = rCurrentNPC.localAI[3] / 60f;
							num58 = 3;
							num59 = 1f - num60 * num60;
							scaleFactor3 = 8f;
							value20 = new Microsoft.Xna.Framework.Color(127, 0, 255, 0);
							amount4 = 1f;
							color17 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color17, num60 * num60);
						}
						for (int num61 = 0; num61 < num58; num61++)
						{
							Microsoft.Xna.Framework.Color value21 = npcColor;
							value21 = Microsoft.Xna.Framework.Color.Lerp(value21, value20, amount3);
							value21 = rCurrentNPC.GetAlpha(value21);
							value21 = Microsoft.Xna.Framework.Color.Lerp(value21, value20, amount4);
							value21 *= 1f - num59;
							Vector2 position8 = vector17;
							position8 -= new Vector2(value19.Width, value19.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position8 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							position8 += ((float)num61 / (float)num58 * ((float)Math.PI * 2f)).ToRotationVector2() * scaleFactor3 * num59;
							mySpriteBatch.Draw(value19, position8, rectangle5, value21, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						}
						Microsoft.Xna.Framework.Color alpha2 = rCurrentNPC.GetAlpha(color17);
						num58 = 4;
						scaleFactor3 = 4f;
						num59 = 0.625f + (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 0.75f + (float)Math.PI) * 0.125f;
						for (int num62 = 0; num62 < num58; num62++)
						{
							Microsoft.Xna.Framework.Color color18 = alpha2;
							color18 *= 1f - num59;
							Vector2 position9 = vector17;
							position9 -= new Vector2(value19.Width, value19.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position9 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							position9 += ((float)num62 / (float)num58 * ((float)Math.PI * 2f)).ToRotationVector2() * scaleFactor3 * num59;
							mySpriteBatch.Draw(value19, position9, rectangle5, color18, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						}
						mySpriteBatch.Draw(value19, vector17, rectangle5, alpha2, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						if (rCurrentNPC.Opacity > 0f)
						{
							Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
							white2.A /= 2;
							white2 *= rCurrentNPC.Opacity;
							mySpriteBatch.Draw(TextureAssets.GlowMask[225].Value, vector17, rectangle5, white2, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
							num58 = 4;
							scaleFactor3 = 4f;
							num59 = 0.5f + (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 0.75f) * 0.5f;
							for (int num63 = 0; num63 < num58; num63++)
							{
								Microsoft.Xna.Framework.Color color19 = white2 * 0.35f;
								color19 *= 1f - num59;
								Vector2 position10 = vector17;
								position10 -= new Vector2(value19.Width, value19.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
								position10 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
								position10 += ((float)num63 / (float)num58 * ((float)Math.PI * 2f)).ToRotationVector2() * scaleFactor3 * num59;
								mySpriteBatch.Draw(TextureAssets.GlowMask[225].Value, position10, rectangle5, color19, rCurrentNPC.rotation, origin7, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
							}
						}
						return;
					}
					case 548:
					{
						Texture2D value7 = TextureAssets.Npc[type].Value;
						Vector2 vector12 = rCurrentNPC.Bottom - screenPos;
						Microsoft.Xna.Framework.Rectangle rectangle3 = value7.Frame();
						Vector2 origin3 = rectangle3.Size() / 2f;
						origin3.Y += 30f;
						origin3.Y += 8f;
						origin3.X -= 1f;
						Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
						float amount = 0f;
						float amount2 = 0f;
						int num44 = 0;
						float num45 = 0f;
						float scaleFactor2 = 0f;
						Microsoft.Xna.Framework.Color newColor = npcColor;
						for (int n = 0; n < num44; n++)
						{
							Microsoft.Xna.Framework.Color value8 = npcColor;
							value8 = Microsoft.Xna.Framework.Color.Lerp(value8, white, amount);
							value8 = rCurrentNPC.GetAlpha(value8);
							value8 = Microsoft.Xna.Framework.Color.Lerp(value8, white, amount2);
							value8 *= 1f - num45;
							Vector2 position3 = vector12;
							position3 -= new Vector2(value7.Width, value7.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position3 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							position3 += ((float)n / (float)num44 * ((float)Math.PI * 2f)).ToRotationVector2() * scaleFactor2 * num45;
							mySpriteBatch.Draw(value7, position3, rectangle3, value8, rCurrentNPC.rotation, origin3, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						}
						Microsoft.Xna.Framework.Color alpha = rCurrentNPC.GetAlpha(newColor);
						num44 = 4;
						scaleFactor2 = 4f;
						num45 = 0.625f + (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 0.75f + (float)Math.PI) * 0.125f;
						for (int num46 = 0; num46 < num44; num46++)
						{
							Microsoft.Xna.Framework.Color color11 = alpha;
							color11.A = 0;
							color11 *= 1f - num45;
							Vector2 position4 = vector12;
							position4 -= new Vector2(value7.Width, value7.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position4 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							position4 += ((float)num46 / (float)num44 * ((float)Math.PI * 2f)).ToRotationVector2() * scaleFactor2 * num45;
							mySpriteBatch.Draw(value7, position4, rectangle3, color11, rCurrentNPC.rotation, origin3, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						}
						mySpriteBatch.Draw(value7, vector12, rectangle3, alpha, rCurrentNPC.rotation, origin3, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						if (rCurrentNPC.ai[1] == 2f)
						{
							float scale2 = Math.Min(1f, rCurrentNPC.ai[0] / 120f);
							mySpriteBatch.Draw(value7, vector12, rectangle3, new Microsoft.Xna.Framework.Color(1f, 1f, 1f, 0f) * scale2, rCurrentNPC.rotation, origin3, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
							float progress = MathHelper.Clamp(rCurrentNPC.ai[0] / 450f, 0f, 1f);
							if (!GameManager.Graphics.Effects.Filters.Scene["CrystalWin"].IsActive())
							{
								GameManager.Graphics.Effects.Filters.Scene.Activate("CrystalWin", rCurrentNPC.Center);
							}
							else
							{
								GameManager.Graphics.Effects.Filters.Scene["CrystalWin"].GetShader().UseProgress(progress);
							}
							GameManager.Graphics.Effects.Filters.Scene["CrystalWin"].GetShader().UseTargetPosition(rCurrentNPC.Center);
						}
						num44 = 4;
						scaleFactor2 = 4f;
						num45 = 0.625f + (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 0.75f) * 0.125f;
						for (int num47 = 0; num47 < num44; num47++)
						{
							Microsoft.Xna.Framework.Color color12 = alpha;
							color12.A = 0;
							color12 *= 0.3f;
							color12 *= 1f - num45;
							Vector2 position5 = vector12;
							position5 -= new Vector2(value7.Width, value7.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position5 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							position5 += ((float)num47 / (float)num44 * ((float)Math.PI * 2f)).ToRotationVector2() * scaleFactor2 * num45;
							mySpriteBatch.Draw(value7, position5, rectangle3, color12, rCurrentNPC.rotation, origin3, rCurrentNPC.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						}
						if (rCurrentNPC.alpha < 255)
						{
							float num48 = GlobalTimeWrappedHourly % 3f / 3f;
							float num49 = num48;
							if (num49 > 0.5f)
							{
								num49 = 1f - num48;
							}
							if (num49 < 0f)
							{
								num49 = 0f;
							}
							float num50 = (num48 + 0.5f) % 1f;
							float num51 = num50;
							if (num51 > 0.5f)
							{
								num51 = 1f - num50;
							}
							if (num51 < 0f)
							{
								num51 = 0f;
							}
							value7 = TextureAssets.GlowMask[239].Value;
							rectangle3 = value7.Frame();
							origin3 = rectangle3.Size() / 2f;
							Vector2 position6 = vector12 + new Vector2(0f, -40f);
							Microsoft.Xna.Framework.Color color13 = new Microsoft.Xna.Framework.Color(140, 50, 255, 0);
							color13 *= 0.6f;
							mySpriteBatch.Draw(value7, position6, rectangle3, color13, rCurrentNPC.rotation, origin3, rCurrentNPC.scale * 0.75f, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
							num45 = 1f + num48 * 0.75f;
							mySpriteBatch.Draw(value7, position6, rectangle3, color13 * num49, rCurrentNPC.rotation, origin3, rCurrentNPC.scale * 0.75f * num45, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
							num45 = 1f + num50 * 0.75f;
							mySpriteBatch.Draw(value7, position6, rectangle3, color13 * num51, rCurrentNPC.rotation, origin3, rCurrentNPC.scale * 0.75f * num45, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
							value7 = TextureAssets.Extra[89].Value;
							rectangle3 = value7.Frame();
							origin3 = rectangle3.Size() / 2f;
							Vector2 scale3 = new Vector2(0.75f, 1f + num45) * 1.5f;
							num45 = 1f + num50 * 0.75f;
							if (rCurrentNPC.dontTakeDamageFromHostiles)
							{
								scale3.Y *= 0.6f;
							}
							position6.Y -= 6f;
							mySpriteBatch.Draw(value7, position6, rectangle3, color13 * num51, rCurrentNPC.rotation + (float)Math.PI / 2f, origin3, scale3, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
							mySpriteBatch.Draw(value7, position6, rectangle3, Microsoft.Xna.Framework.Color.Lerp(color13, Microsoft.Xna.Framework.Color.White, 0.5f), rCurrentNPC.rotation + (float)Math.PI / 2f, origin3, 1.5f, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
						}
						return;
					}
					default:
						if (type < 621 || type > 623)
						{
							break;
						}
						goto case 371;
					case 371:
					case 454:
					case 455:
					case 456:
					case 457:
					case 458:
					case 459:
					{
						Texture2D value6 = TextureAssets.Npc[type].Value;
						Vector2 position2 = rCurrentNPC.Center - screenPos;
						position2 -= new Vector2(value6.Width, value6.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
						position2 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value6, position2, rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						return;
					}
					}
					switch (type)
					{
					case 549:
					{
						Texture2D value98 = TextureAssets.Npc[type].Value;
						Vector2 vector33 = rCurrentNPC.Center - screenPos;
						Microsoft.Xna.Framework.Rectangle frame8 = rCurrentNPC.frame;
						Vector2 origin21 = new Vector2(70f, 127f);
						origin21.Y += 8f;
						Vector2 scale5 = new Vector2(rCurrentNPC.scale);
						float num196 = rCurrentNPC.localAI[0];
						if (num196 < 120f)
						{
							scale5 *= num196 / 240f + 0.5f;
						}
						Microsoft.Xna.Framework.Color alpha13 = rCurrentNPC.GetAlpha(npcColor);
						float lerpValue2 = Utils.GetLerpValue(0f, 120f, num196, clamped: true);
						float scaleFactor22 = MathHelper.Lerp(32f, 0f, lerpValue2);
						Microsoft.Xna.Framework.Color color44 = alpha13;
						color44.A = (byte)MathHelper.Lerp((int)color44.A, 0f, lerpValue2);
						color44 *= lerpValue2;
						if (num196 >= 120f)
						{
							color44 = alpha13;
						}
						mySpriteBatch.Draw(value98, vector33, frame8, color44, rCurrentNPC.rotation, origin21, scale5, spriteEffects, 0f);
						float y2 = (((rCurrentNPC.ai[0] + 54f) % 180f - 120f) / 180f * 2f * ((float)Math.PI * 2f)).ToRotationVector2().Y;
						if (num196 >= 120f)
						{
							scaleFactor22 = y2 * 0f;
							color44.A = (byte)((float)(int)color44.A * 0.5f);
							color44 *= y2 / 2f + 0.5f;
							float num197 = 1f;
							for (float num198 = 0f; num198 < num197; num198 += 1f)
							{
								mySpriteBatch.Draw(value98, vector33 + ((float)Math.PI * 2f / num197 * num198).ToRotationVector2() * scaleFactor22, frame8, color44, rCurrentNPC.rotation, origin21, scale5, spriteEffects, 0f);
							}
						}
						float num199 = rCurrentNPC.ai[0] / 180f - 0.76f;
						if (num199 < 0f)
						{
							num199 += 1f;
						}
						float num200 = 0f;
						float num201 = 0f;
						float num202 = 0.6f;
						float num203 = 0.8f;
						if (num199 >= num202 && num199 <= num203)
						{
							num200 = Utils.GetLerpValue(num202, num203, num199);
							num201 = MathHelper.Lerp(0.75f, 0.85f, num200);
						}
						num202 = num203;
						num203 = num202 + 0.13f;
						if (num199 >= num202 && num199 <= num203)
						{
							num200 = 1f - Utils.GetLerpValue(num202, num203, num199);
							num201 = MathHelper.Lerp(1.3f, 0.85f, num200);
						}
						Vector2 value99 = new Vector2(0f, -150f);
						int frameNumber = frame8.Y / frame8.Height;
						float num204 = MathHelper.Clamp((num196 - 100f) / 40f, 0f, 1f);
						DrawElderEye(mySpriteBatch, rCurrentNPC.Center + value99, 0.75f * num204, 0.75f, frameNumber, Microsoft.Xna.Framework.Color.White);
						DrawElderEye(mySpriteBatch, rCurrentNPC.Center + value99, 0.75f * num204, 0.75f, frameNumber, new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * (y2 / 2f + 0.5f));
						if (num200 > 0f && num201 > 0f)
						{
							DrawElderEye(mySpriteBatch, rCurrentNPC.Center + value99, num200 * 0.5f, num201, frameNumber, new Microsoft.Xna.Framework.Color(255, 255, 255, 127));
						}
						if (num196 < 120f)
						{
							float num205 = (float)Math.PI * 2f * lerpValue2 * (float)Math.Pow(lerpValue2, 2.0) * 2f + lerpValue2;
							color44.A = (byte)((float)(int)alpha13.A * (float)Math.Pow(lerpValue2, 2.0) * 0.5f);
							float num206 = 3f;
							for (float num207 = 0f; num207 < num206; num207 += 1f)
							{
								mySpriteBatch.Draw(value98, vector33 + (num205 + (float)Math.PI * 2f / num206 * num207).ToRotationVector2() * scaleFactor22, frame8, color44, rCurrentNPC.rotation, origin21, scale5, spriteEffects, 0f);
							}
						}
						break;
					}
					case 636:
						DrawNPCDirect_HallowBoss(mySpriteBatch, rCurrentNPC, screenPos, type, npcColor, halfSize, spriteEffects);
						break;
					case 422:
					case 493:
					case 507:
					case 517:
					{
						Texture2D value83 = TextureAssets.Npc[type].Value;
						Vector2 vector31 = rCurrentNPC.Center - screenPos;
						Vector2 value84 = vector31 - new Vector2(300f, 310f);
						vector31 -= new Vector2(value83.Width, value83.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
						vector31 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value83, vector31, rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						switch (type)
						{
						case 493:
						{
							value83 = TextureAssets.GlowMask[132].Value;
							float scaleFactor19 = 4f + (rCurrentNPC.GetAlpha(npcColor).ToVector3() - new Vector3(0.5f)).Length() * 4f;
							for (int num162 = 0; num162 < 4; num162++)
							{
								mySpriteBatch.Draw(value83, vector31 + rCurrentNPC.velocity.RotatedBy((float)num162 * ((float)Math.PI / 2f)) * scaleFactor19, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						case 507:
						{
							value83 = TextureAssets.GlowMask[143].Value;
							float scaleFactor17 = 4f + (rCurrentNPC.GetAlpha(npcColor).ToVector3() - new Vector3(0.5f)).Length() * 4f;
							for (int num160 = 0; num160 < 4; num160++)
							{
								mySpriteBatch.Draw(value83, vector31 + rCurrentNPC.velocity.RotatedBy((float)num160 * ((float)Math.PI / 2f)) * scaleFactor17, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						case 422:
						{
							value83 = TextureAssets.GlowMask[149].Value;
							float scaleFactor18 = 4f + (rCurrentNPC.GetAlpha(npcColor).ToVector3() - new Vector3(0.5f)).Length() * 4f;
							for (int num161 = 0; num161 < 4; num161++)
							{
								mySpriteBatch.Draw(value83, vector31 + rCurrentNPC.velocity.RotatedBy((float)num161 * ((float)Math.PI / 2f)) * scaleFactor18, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						case 517:
						{
							value83 = TextureAssets.GlowMask[162].Value;
							float scaleFactor16 = 2f + (rCurrentNPC.GetAlpha(npcColor).ToVector3() - new Vector3(0.5f)).Length() * 9f;
							for (int num159 = 0; num159 < 4; num159++)
							{
								mySpriteBatch.Draw(value83, vector31 + rCurrentNPC.velocity.RotatedBy((float)num159 * ((float)Math.PI / 2f)) * scaleFactor16 + Vector2.UnitX * 2f, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * rCurrentNPC.Opacity, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						}
						int num163 = 0;
						string key = "";
						switch (type)
						{
						case 422:
							num163 = NPC.ShieldStrengthTowerVortex;
							key = "Vortex";
							break;
						case 507:
							num163 = NPC.ShieldStrengthTowerNebula;
							key = "Nebula";
							break;
						case 517:
							num163 = NPC.ShieldStrengthTowerSolar;
							key = "Solar";
							break;
						case 493:
							num163 = NPC.ShieldStrengthTowerStardust;
							key = "Stardust";
							break;
						}
						float num164 = (float)num163 / (float)NPC.ShieldStrengthTowerMax;
						if (rCurrentNPC.IsABestiaryIconDummy)
						{
							break;
						}
						if (num163 > 0)
						{
							mySpriteBatch.End();
							mySpriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone, null, Transform);
							float num165 = 0f;
							if (rCurrentNPC.ai[3] > 0f && rCurrentNPC.ai[3] <= 30f)
							{
								num165 = 1f - rCurrentNPC.ai[3] / 30f;
							}
							GameManager.Graphics.Effects.Filters.Scene[key].GetShader().UseIntensity(1f + num165).UseProgress(0f);
							DrawData value85 = new DrawData(Assets.Request<Texture2D>("Images/Misc/Perlin", Main.content, (AssetRequestMode)1).Value, value84 + new Vector2(300f, 300f), new Microsoft.Xna.Framework.Rectangle(0, 0, 600, 600), Microsoft.Xna.Framework.Color.White * (num164 * 0.8f + 0.2f), rCurrentNPC.rotation, new Vector2(300f, 300f), rCurrentNPC.scale * (1f + num165 * 0.05f), spriteEffects, 0);
							GameShaders.Misc["ForceField"].UseColor(new Vector3(1f + num165 * 0.5f));
							GameShaders.Misc["ForceField"].Apply(value85);
							value85.Draw(mySpriteBatch);
							mySpriteBatch.End();
							mySpriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
						}
						else if (rCurrentNPC.ai[3] > 0f)
						{
							mySpriteBatch.End();
							mySpriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone, null, Transform);
							float num166 = rCurrentNPC.ai[3] / 120f;
							float num167 = Math.Min(rCurrentNPC.ai[3] / 30f, 1f);
							GameManager.Graphics.Effects.Filters.Scene[key].GetShader().UseIntensity(Math.Min(5f, 15f * num166) + 1f).UseProgress(num166);
							DrawData value86 = new DrawData(Assets.Request<Texture2D>("Images/Misc/Perlin", Main.content, (AssetRequestMode)1).Value, value84 + new Vector2(300f, 300f), new Microsoft.Xna.Framework.Rectangle(0, 0, 600, 600), new Microsoft.Xna.Framework.Color(new Vector4(1f - (float)Math.Sqrt(num167))), rCurrentNPC.rotation, new Vector2(300f, 300f), rCurrentNPC.scale * (1f + num167), spriteEffects, 0);
							GameShaders.Misc["ForceField"].UseColor(new Vector3(2f));
							GameShaders.Misc["ForceField"].Apply(value86);
							value86.Draw(mySpriteBatch);
							mySpriteBatch.End();
							mySpriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
						}
						else
						{
							GameManager.Graphics.Effects.Filters.Scene[key].GetShader().UseIntensity(0f).UseProgress(0f);
						}
						break;
					}
					case 402:
					{
						LoadNPC(403);
						LoadNPC(404);
						Texture2D value100 = TextureAssets.Npc[rCurrentNPC.type].Value;
						Vector2 vector34 = rCurrentNPC.Center - screenPos;
						vector34 -= new Vector2(value100.Width, value100.Height / npcFrameCount[rCurrentNPC.type]) * rCurrentNPC.scale / 2f;
						vector34 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
						int num208 = 0;
						float num209 = 2f / (float)rCurrentNPC.oldPos.Length * 0.7f;
						int num210 = rCurrentNPC.oldPos.Length - 1;
						while ((float)num210 >= 1f)
						{
							value100 = ((num208 != 0) ? TextureAssets.Npc[403].Value : TextureAssets.Npc[404].Value);
							mySpriteBatch.Draw(value100, vector34 + rCurrentNPC.oldPos[num210] - rCurrentNPC.position, null, rCurrentNPC.GetAlpha(npcColor) * (0.8f - num209 * (float)num210 / 2f), rCurrentNPC.oldRot[num210], halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							value100 = ((num208 != 0) ? TextureAssets.GlowMask[133].Value : TextureAssets.GlowMask[134].Value);
							mySpriteBatch.Draw(value100, vector34 + rCurrentNPC.oldPos[num210] - rCurrentNPC.position, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - num209 * (float)num210 / 2f), rCurrentNPC.oldRot[num210], halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							num208++;
							num210 -= 2;
						}
						value100 = TextureAssets.Npc[rCurrentNPC.type].Value;
						mySpriteBatch.Draw(value100, vector34, rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						value100 = TextureAssets.GlowMask[135].Value;
						mySpriteBatch.Draw(value100, vector34, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						break;
					}
					case 519:
					{
						Texture2D value82 = TextureAssets.Npc[rCurrentNPC.type].Value;
						Vector2 vector30 = rCurrentNPC.Center - screenPos;
						vector30 -= new Vector2(value82.Width, value82.Height / npcFrameCount[rCurrentNPC.type]) * rCurrentNPC.scale / 2f;
						vector30 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
						value82 = TextureAssets.Npc[rCurrentNPC.type].Value;
						mySpriteBatch.Draw(value82, vector30, rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						int num155 = 0;
						float num156 = 1f / (float)rCurrentNPC.oldPos.Length * 0.7f;
						int num157 = rCurrentNPC.oldPos.Length - 1;
						while ((float)num157 >= 0f)
						{
							float num158 = (float)(rCurrentNPC.oldPos.Length - num157) / (float)rCurrentNPC.oldPos.Length;
							Microsoft.Xna.Framework.Color pink = Microsoft.Xna.Framework.Color.Pink;
							pink *= 1f - num156 * (float)num157 / 1f;
							pink.A = (byte)((float)(int)pink.A * (1f - num158));
							mySpriteBatch.Draw(value82, vector30 + rCurrentNPC.oldPos[num157] - rCurrentNPC.position, null, pink, rCurrentNPC.oldRot[num157], halfSize, rCurrentNPC.scale * MathHelper.Lerp(0.3f, 1.1f, num158), spriteEffects, 0f);
							num155++;
							num157--;
						}
						break;
					}
					case 522:
					{
						Texture2D value97 = TextureAssets.Npc[rCurrentNPC.type].Value;
						Vector2 vector32 = rCurrentNPC.Center - screenPos;
						vector32 -= new Vector2(value97.Width, value97.Height / npcFrameCount[rCurrentNPC.type]) * rCurrentNPC.scale / 2f;
						vector32 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
						int num192 = 0;
						float num193 = 1f / (float)rCurrentNPC.oldPos.Length * 1.1f;
						int num194 = rCurrentNPC.oldPos.Length - 1;
						while ((float)num194 >= 0f)
						{
							float num195 = (float)(rCurrentNPC.oldPos.Length - num194) / (float)rCurrentNPC.oldPos.Length;
							Microsoft.Xna.Framework.Color white7 = Microsoft.Xna.Framework.Color.White;
							white7 *= 1f - num193 * (float)num194 / 1f;
							white7.A = (byte)((float)(int)white7.A * (1f - num195));
							mySpriteBatch.Draw(value97, vector32 + rCurrentNPC.oldPos[num194] - rCurrentNPC.position, null, white7, rCurrentNPC.oldRot[num194], halfSize, rCurrentNPC.scale * MathHelper.Lerp(0.8f, 0.3f, num195), spriteEffects, 0f);
							num192++;
							num194--;
						}
						value97 = TextureAssets.Extra[57].Value;
						mySpriteBatch.Draw(value97, vector32, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), 0f, value97.Size() / 2f, rCurrentNPC.scale, spriteEffects, 0f);
						break;
					}
					case 370:
					case 372:
					case 373:
					{
						Texture2D value91 = TextureAssets.Npc[type].Value;
						Microsoft.Xna.Framework.Color value92 = Microsoft.Xna.Framework.Color.White;
						float amount9 = 0f;
						bool flag11 = type == 370 && rCurrentNPC.ai[0] > 4f;
						bool num176 = type == 370 && rCurrentNPC.ai[0] > 9f;
						int num177 = 120;
						int num178 = 60;
						Microsoft.Xna.Framework.Color color42 = npcColor;
						if (num176)
						{
							npcColor = buffColor(npcColor, 0.4f, 0.8f, 0.4f, 1f);
						}
						else if (flag11)
						{
							npcColor = buffColor(npcColor, 0.5f, 0.7f, 0.5f, 1f);
						}
						else if (type == 370 && rCurrentNPC.ai[0] == 4f && rCurrentNPC.ai[2] > (float)num177)
						{
							float num179 = rCurrentNPC.ai[2] - (float)num177;
							num179 /= (float)num178;
							npcColor = buffColor(npcColor, 1f - 0.5f * num179, 1f - 0.3f * num179, 1f - 0.5f * num179, 1f);
						}
						int num180 = 10;
						int num181 = 2;
						switch (type)
						{
						case 370:
							if (rCurrentNPC.ai[0] == -1f)
							{
								num180 = 0;
							}
							if (rCurrentNPC.ai[0] == 0f || rCurrentNPC.ai[0] == 5f || rCurrentNPC.ai[0] == 10f)
							{
								num180 = 7;
							}
							if (rCurrentNPC.ai[0] == 1f)
							{
								value92 = Microsoft.Xna.Framework.Color.Blue;
								amount9 = 0.5f;
							}
							else
							{
								color42 = npcColor;
							}
							break;
						case 372:
						case 373:
							if (rCurrentNPC.ai[0] == 1f)
							{
								value92 = Microsoft.Xna.Framework.Color.Blue;
								amount9 = 0.5f;
							}
							break;
						}
						for (int num182 = 1; num182 < num180; num182 += num181)
						{
							_ = rCurrentNPC.oldPos[num182];
							Microsoft.Xna.Framework.Color value93 = color42;
							value93 = Microsoft.Xna.Framework.Color.Lerp(value93, value92, amount9);
							value93 = rCurrentNPC.GetAlpha(value93);
							value93 *= (float)(num180 - num182) / 15f;
							Vector2 position19 = rCurrentNPC.oldPos[num182] + new Vector2(rCurrentNPC.width, rCurrentNPC.height) / 2f - screenPos;
							position19 -= new Vector2(value91.Width, value91.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position19 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value91, position19, rCurrentNPC.frame, value93, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						int num183 = 0;
						float num184 = 0f;
						float scaleFactor21 = 0f;
						if (type == 370)
						{
							if (rCurrentNPC.ai[0] == -1f)
							{
								num183 = 0;
							}
							if (rCurrentNPC.ai[0] == 3f || rCurrentNPC.ai[0] == 8f)
							{
								int num185 = 60;
								int num186 = 30;
								if (rCurrentNPC.ai[2] > (float)num185)
								{
									num183 = 6;
									num184 = 1f - (float)Math.Cos((rCurrentNPC.ai[2] - (float)num185) / (float)num186 * ((float)Math.PI * 2f));
									num184 /= 3f;
									scaleFactor21 = 40f;
								}
							}
							if (rCurrentNPC.ai[0] == 4f && rCurrentNPC.ai[2] > (float)num177)
							{
								num183 = 6;
								num184 = 1f - (float)Math.Cos((rCurrentNPC.ai[2] - (float)num177) / (float)num178 * ((float)Math.PI * 2f));
								num184 /= 3f;
								scaleFactor21 = 60f;
							}
							if (rCurrentNPC.ai[0] == 9f && rCurrentNPC.ai[2] > (float)num177)
							{
								num183 = 6;
								num184 = 1f - (float)Math.Cos((rCurrentNPC.ai[2] - (float)num177) / (float)num178 * ((float)Math.PI * 2f));
								num184 /= 3f;
								scaleFactor21 = 60f;
							}
							if (rCurrentNPC.ai[0] == 12f)
							{
								num183 = 6;
								num184 = 1f - (float)Math.Cos(rCurrentNPC.ai[2] / 30f * ((float)Math.PI * 2f));
								num184 /= 3f;
								scaleFactor21 = 20f;
							}
						}
						for (int num187 = 0; num187 < num183; num187++)
						{
							Microsoft.Xna.Framework.Color value94 = npcColor;
							value94 = Microsoft.Xna.Framework.Color.Lerp(value94, value92, amount9);
							value94 = rCurrentNPC.GetAlpha(value94);
							value94 *= 1f - num184;
							Vector2 position20 = rCurrentNPC.Center + ((float)num187 / (float)num183 * ((float)Math.PI * 2f) + rCurrentNPC.rotation).ToRotationVector2() * scaleFactor21 * num184 - screenPos;
							position20 -= new Vector2(value91.Width, value91.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position20 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value91, position20, rCurrentNPC.frame, value94, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						Vector2 position21 = rCurrentNPC.Center - screenPos;
						position21 -= new Vector2(value91.Width, value91.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
						position21 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value91, position21, rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						if (type != 370 || !(rCurrentNPC.ai[0] >= 4f))
						{
							break;
						}
						value91 = TextureAssets.DukeFishron.Value;
						Microsoft.Xna.Framework.Color color43 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.White, Microsoft.Xna.Framework.Color.Yellow, 0.5f);
						value92 = Microsoft.Xna.Framework.Color.Yellow;
						amount9 = 1f;
						num184 = 0.5f;
						scaleFactor21 = 10f;
						num181 = 1;
						if (rCurrentNPC.ai[0] == 4f)
						{
							float num188 = rCurrentNPC.ai[2] - (float)num177;
							num188 /= (float)num178;
							value92 *= num188;
							color43 *= num188;
						}
						if (rCurrentNPC.ai[0] == 12f)
						{
							float num189 = rCurrentNPC.ai[2];
							num189 /= 30f;
							if (num189 > 0.5f)
							{
								num189 = 1f - num189;
							}
							num189 *= 2f;
							num189 = 1f - num189;
							value92 *= num189;
							color43 *= num189;
						}
						for (int num190 = 1; num190 < num180; num190 += num181)
						{
							_ = rCurrentNPC.oldPos[num190];
							Microsoft.Xna.Framework.Color value95 = color43;
							value95 = Microsoft.Xna.Framework.Color.Lerp(value95, value92, amount9);
							value95 *= (float)(num180 - num190) / 15f;
							Vector2 position22 = rCurrentNPC.oldPos[num190] + new Vector2(rCurrentNPC.width, rCurrentNPC.height) / 2f - screenPos;
							position22 -= new Vector2(value91.Width, value91.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position22 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value91, position22, rCurrentNPC.frame, value95, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						for (int num191 = 1; num191 < num183; num191++)
						{
							Microsoft.Xna.Framework.Color value96 = color43;
							value96 = Microsoft.Xna.Framework.Color.Lerp(value96, value92, amount9);
							value96 = rCurrentNPC.GetAlpha(value96);
							value96 *= 1f - num184;
							Vector2 position23 = rCurrentNPC.Center + ((float)num191 / (float)num183 * ((float)Math.PI * 2f) + rCurrentNPC.rotation).ToRotationVector2() * scaleFactor21 * num184 - screenPos;
							position23 -= new Vector2(value91.Width, value91.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position23 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value91, position23, rCurrentNPC.frame, value96, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						mySpriteBatch.Draw(value91, position21, rCurrentNPC.frame, color43, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						break;
					}
					case 439:
					case 440:
					{
						int num168 = rCurrentNPC.frame.Y / (TextureAssets.Npc[type].Height() / npcFrameCount[type]);
						Texture2D value87 = TextureAssets.Npc[type].Value;
						Texture2D value88 = TextureAssets.Extra[30].Value;
						Microsoft.Xna.Framework.Rectangle rectangle10 = value88.Frame();
						rectangle10.Height /= 2;
						if (num168 >= 4)
						{
							rectangle10.Y += rectangle10.Height;
						}
						Microsoft.Xna.Framework.Color white6 = Microsoft.Xna.Framework.Color.White;
						float amount8 = 0f;
						Microsoft.Xna.Framework.Color color41 = npcColor;
						int num169 = 0;
						int num170 = 0;
						int num171 = 0;
						if (rCurrentNPC.ai[0] == -1f)
						{
							if (rCurrentNPC.ai[1] >= 320f && rCurrentNPC.ai[1] < 960f)
							{
								white6 = Microsoft.Xna.Framework.Color.White;
								amount8 = 0.5f;
								num169 = 6;
								num170 = 2;
								num171 = 1;
							}
						}
						else if (rCurrentNPC.ai[0] == 1f)
						{
							white6 = Microsoft.Xna.Framework.Color.White;
							amount8 = 0.5f;
							num169 = 4;
							num170 = 2;
							num171 = 1;
						}
						else
						{
							color41 = npcColor;
						}
						for (int num172 = num171; num172 < num169; num172 += num170)
						{
							_ = rCurrentNPC.oldPos[num172];
							Microsoft.Xna.Framework.Color value89 = color41;
							value89 = Microsoft.Xna.Framework.Color.Lerp(value89, white6, amount8);
							value89 = rCurrentNPC.GetAlpha(value89);
							value89 *= (float)(num169 - num172) / (float)num169;
							value89.A = 100;
							Vector2 position16 = rCurrentNPC.oldPos[num172] + new Vector2(rCurrentNPC.width, rCurrentNPC.height) / 2f - screenPos;
							position16 -= rectangle10.Size() * rCurrentNPC.scale / 2f;
							position16 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value88, position16, rectangle10, value89, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						int num173 = 0;
						float num174 = 0f;
						float scaleFactor20 = 0f;
						if (rCurrentNPC.ai[0] == 5f && rCurrentNPC.ai[1] >= 0f && rCurrentNPC.ai[1] < 30f)
						{
							num173 = 4;
							num174 = 1f - (float)Math.Cos((rCurrentNPC.ai[1] - 0f) / 30f * (float)Math.PI);
							num174 /= 2f;
							scaleFactor20 = 70f;
						}
						for (int num175 = 0; num175 < num173; num175++)
						{
							Microsoft.Xna.Framework.Color value90 = npcColor;
							value90 = Microsoft.Xna.Framework.Color.Lerp(value90, white6, amount8);
							value90 = rCurrentNPC.GetAlpha(value90);
							value90 *= 1f - num174;
							Vector2 position17 = rCurrentNPC.Center + ((float)num175 / (float)num173 * ((float)Math.PI * 2f) + rCurrentNPC.rotation).ToRotationVector2() * scaleFactor20 * num174 - screenPos;
							position17 -= new Vector2(value87.Width, value87.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position17 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value88, position17, rectangle10, value90, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						Vector2 position18 = rCurrentNPC.Center - screenPos;
						position18 -= new Vector2(value87.Width, value87.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
						position18 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value87, position18, rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						break;
					}
					case 392:
					case 393:
					case 394:
					case 395:
					{
						Texture2D value81 = TextureAssets.Npc[type].Value;
						Vector2 vec = rCurrentNPC.Center - screenPos + Vector2.UnitY * rCurrentNPC.gfxOffY;
						vec = vec;
						float scaleFactor15 = 0f;
						if (type == 393)
						{
							scaleFactor15 = -8f;
						}
						mySpriteBatch.Draw(value81, vec, rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize + Vector2.UnitY * scaleFactor15, rCurrentNPC.scale, spriteEffects, 0f);
						if (type == 392)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[48].Value, vec, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize + Vector2.UnitY * scaleFactor15, rCurrentNPC.scale, spriteEffects, 0f);
						}
						if (type == 395)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[49].Value, vec, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize + Vector2.UnitY * scaleFactor15, rCurrentNPC.scale, spriteEffects, 0f);
						}
						if (type == 394)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[50].Value, vec, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize + Vector2.UnitY * scaleFactor15, rCurrentNPC.scale, spriteEffects, 0f);
						}
						break;
					}
					case 83:
					case 84:
					case 179:
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36), rCurrentNPC.frame, Microsoft.Xna.Framework.Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						break;
					case 87:
					case 88:
					case 89:
					case 90:
					case 91:
					case 92:
					{
						Microsoft.Xna.Framework.Color alpha12 = rCurrentNPC.GetAlpha(npcColor);
						byte b3 = (byte)((tileColor.R + tileColor.G + tileColor.B) / 3);
						if (alpha12.R < b3)
						{
							alpha12.R = b3;
						}
						if (alpha12.G < b3)
						{
							alpha12.G = b3;
						}
						if (alpha12.B < b3)
						{
							alpha12.B = b3;
						}
						mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36), rCurrentNPC.frame, alpha12, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						break;
					}
					default:
					{
						switch (type)
						{
						case 491:
						{
							Texture2D value50 = TextureAssets.Npc[rCurrentNPC.type].Value;
							Microsoft.Xna.Framework.Rectangle rectangle9 = rCurrentNPC.frame;
							Vector2 origin14 = rectangle9.OriginFlip(new Vector2(208f, 460f), spriteEffects);
							Vector2 vector23 = rCurrentNPC.Center - screenPos;
							Vector2 value51 = new Vector2((!spriteEffects.HasFlag(SpriteEffects.FlipHorizontally)) ? 1 : (-1), 1f);
							Microsoft.Xna.Framework.Color alpha7 = rCurrentNPC.GetAlpha(npcColor);
							mySpriteBatch.Draw(value50, vector23, rectangle9, alpha7, rCurrentNPC.rotation, origin14, rCurrentNPC.scale, spriteEffects, 0f);
							int num83 = (int)rCurrentNPC.localAI[3] / 8;
							value50 = TextureAssets.Extra[40].Value;
							rectangle9 = value50.Frame(1, 4, 0, num83 % 4);
							origin14 = rectangle9.Size() * new Vector2(0.5f, 1f);
							mySpriteBatch.Draw(value50, vector23 + (new Vector2(102f, -384f) * value51).RotatedBy(rCurrentNPC.rotation), rectangle9, alpha7, rCurrentNPC.rotation, origin14, rCurrentNPC.scale, spriteEffects, 0f);
							value50 = TextureAssets.Extra[41].Value;
							rectangle9 = value50.Frame(1, 8, 0, num83 % 8);
							origin14 = rectangle9.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
							for (int num84 = 0; num84 < 5; num84++)
							{
								mySpriteBatch.Draw(value50, vector23 + (new Vector2(-96 + 34 * num84, 40f) * value51).RotatedBy(rCurrentNPC.rotation), rectangle9, alpha7, rCurrentNPC.rotation, origin14, rCurrentNPC.scale, spriteEffects, 0f);
							}
							value50 = TextureAssets.Extra[42].Value;
							rectangle9 = value50.Frame(1, 4, 0, num83 % 4);
							origin14 = rectangle9.Size() * new Vector2(0.5f, 0f);
							for (int num85 = 0; num85 < 2; num85++)
							{
								mySpriteBatch.Draw(value50, vector23 + (new Vector2(158 - 106 * num85, -302f) * value51).RotatedBy(rCurrentNPC.rotation), rectangle9, alpha7, rCurrentNPC.rotation, origin14, rCurrentNPC.scale, spriteEffects, 0f);
							}
							value50 = TextureAssets.Extra[43].Value;
							rectangle9 = value50.Frame(1, 4, 0, num83 % 4);
							origin14 = rectangle9.Size() * new Vector2(0.5f, 0f);
							for (int num86 = 0; num86 < 2; num86++)
							{
								mySpriteBatch.Draw(value50, vector23 + (new Vector2(42 - 178 * num86, -444f) * value51).RotatedBy(rCurrentNPC.rotation), rectangle9, alpha7, rCurrentNPC.rotation, origin14, rCurrentNPC.scale, spriteEffects, 0f);
							}
							value50 = TextureAssets.Extra[44].Value;
							rectangle9 = value50.Frame(1, 4, 0, num83 % 4);
							origin14 = rectangle9.Size() * new Vector2(0.5f, 0f);
							mySpriteBatch.Draw(value50, vector23 + (new Vector2(-134f, -302f) * value51).RotatedBy(rCurrentNPC.rotation), rectangle9, alpha7, rCurrentNPC.rotation, origin14, rCurrentNPC.scale, spriteEffects, 0f);
							value50 = TextureAssets.Extra[45].Value;
							rectangle9 = value50.Frame(1, 4, 0, (2 + num83) % 4);
							origin14 = rectangle9.Size() * new Vector2(0.5f, 0f);
							mySpriteBatch.Draw(value50, vector23 + (new Vector2(-60f, -330f) * value51).RotatedBy(rCurrentNPC.rotation), rectangle9, alpha7, rCurrentNPC.rotation, origin14, rCurrentNPC.scale, spriteEffects, 0f);
							LoadNPC(492);
							if (!TextureAssets.Npc[492].IsLoaded)
							{
								return;
							}
							value50 = TextureAssets.Npc[492].Value;
							rectangle9 = value50.Frame(1, 9);
							origin14 = rectangle9.Size() * new Vector2(0.5f, 0f) + new Vector2(0f, 10f);
							for (int num87 = 0; num87 < 4; num87++)
							{
								int num88 = (int)rCurrentNPC.ai[num87];
								if (num88 >= 0)
								{
									rectangle9.Y = npc[num88].frame.Y;
									mySpriteBatch.Draw(value50, vector23 + (new Vector2(-122 + 68 * num87, -20f) * value51).RotatedBy(rCurrentNPC.rotation), rectangle9, alpha7, rCurrentNPC.rotation, origin14, rCurrentNPC.scale, spriteEffects, 0f);
								}
							}
							return;
						}
						case 398:
						{
							bool flag8 = false;
							Texture2D value25 = TextureAssets.Npc[type].Value;
							Texture2D value26 = TextureAssets.Extra[16].Value;
							Texture2D value27 = TextureAssets.Extra[14].Value;
							float num70 = 340f;
							float scaleFactor4 = 0.5f;
							Vector2 value28 = new Vector2(220f, -60f);
							Vector2 vector19 = new Vector2(76f, 66f);
							Texture2D value29 = TextureAssets.Extra[13].Value;
							Vector2 origin9 = new Vector2(value29.Width, 278f);
							Vector2 origin10 = new Vector2(0f, 278f);
							Vector2 value30 = new Vector2(0f, 76f);
							Vector2 center2 = rCurrentNPC.Center;
							Microsoft.Xna.Framework.Point point = (rCurrentNPC.Center + new Vector2(0f, -150f)).ToTileCoordinates();
							Microsoft.Xna.Framework.Color alpha4 = rCurrentNPC.GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point.X, point.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
							for (int num71 = 0; num71 < 2; num71++)
							{
								bool flag9 = num71 == 0;
								Vector2 value31 = new Vector2((!flag9) ? 1 : (-1), 1f);
								int num72 = -1;
								for (int num73 = 0; num73 < 200; num73++)
								{
									if (npc[num73].active && npc[num73].type == 397 && npc[num73].ai[2] == (float)num71 && npc[num73].ai[3] == (float)rCurrentNPC.whoAmI)
									{
										num72 = num73;
										break;
									}
								}
								if (num72 != -1)
								{
									Vector2 vector20 = center2 + value28 * value31;
									Vector2 vector21 = (npc[num72].Center + value30 - vector20) * scaleFactor4;
									if (flag8)
									{
										dust[Dust.NewDust(vector20 + vector21, 0, 0, 6)].noGravity = true;
									}
									float num74 = (float)Math.Acos(vector21.Length() / num70) * (0f - value31.X);
									SpriteEffects effects = ((!flag9) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
									Vector2 origin11 = vector19;
									if (!flag9)
									{
										origin11.X = (float)value27.Width - origin11.X;
									}
									mySpriteBatch.Draw(value27, vector20 - screenPos, null, alpha4, vector21.ToRotation() - num74 - (float)Math.PI / 2f, origin11, 1f, effects, 0f);
									if (flag8)
									{
										dust[Dust.NewDust(vector20, 0, 0, 6)].noGravity = true;
									}
									if (flag8)
									{
										dust[Dust.NewDust(center2, 0, 0, 6)].noGravity = true;
									}
									if (flag8)
									{
										dust[Dust.NewDust(vector20 + new Vector2(0f, num70).RotatedBy(vector21.ToRotation() - num74 - (float)Math.PI / 2f), 0, 0, 6)].noGravity = true;
									}
								}
							}
							mySpriteBatch.Draw(value29, center2 - screenPos, null, alpha4, 0f, origin9, 1f, SpriteEffects.None, 0f);
							mySpriteBatch.Draw(value29, center2 - screenPos, null, alpha4, 0f, origin10, 1f, SpriteEffects.FlipHorizontally, 0f);
							mySpriteBatch.Draw(value26, center2 - screenPos, null, alpha4, 0f, new Vector2(112f, 101f), 1f, SpriteEffects.None, 0f);
							mySpriteBatch.Draw(value25, center2 - screenPos, rCurrentNPC.frame, alpha4, 0f, rCurrentNPC.frame.Size() / 2f, 1f, SpriteEffects.None, 0f);
							return;
						}
						case 397:
						{
							Texture2D value52 = TextureAssets.Npc[type].Value;
							float num89 = 0.5f;
							Vector2 value53 = new Vector2(220f, -60f);
							Vector2 value54 = new Vector2(0f, 76f);
							Texture2D value55 = TextureAssets.Extra[15].Value;
							Vector2 vector24 = new Vector2(60f, 30f);
							float num90 = 340f;
							Vector2 center3 = npc[(int)rCurrentNPC.ai[3]].Center;
							Microsoft.Xna.Framework.Point point4 = rCurrentNPC.Center.ToTileCoordinates();
							Microsoft.Xna.Framework.Color alpha8 = rCurrentNPC.GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point4.X, point4.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
							bool flag10 = rCurrentNPC.ai[2] == 0f;
							Vector2 value56 = new Vector2((!flag10) ? 1 : (-1), 1f);
							Vector2 origin15 = new Vector2(120f, 180f);
							if (!flag10)
							{
								origin15.X = (float)value52.Width - origin15.X;
							}
							Texture2D value57 = TextureAssets.Extra[17].Value;
							Texture2D value58 = TextureAssets.Extra[19].Value;
							Vector2 vector25 = new Vector2(26f, 42f);
							if (!flag10)
							{
								vector25.X = (float)value57.Width - vector25.X;
							}
							Vector2 value59 = new Vector2(30f, 66f);
							Vector2 value60 = new Vector2(1f * (0f - value56.X), 3f);
							Texture2D value61 = TextureAssets.Extra[26].Value;
							Microsoft.Xna.Framework.Rectangle value62 = value61.Frame();
							value62.Height /= 4;
							Vector2 value63 = center3 + value53 * value56;
							Vector2 vector26 = rCurrentNPC.Center + value54;
							Vector2 v = value63 - vector26;
							v *= 1f - num89;
							Vector2 origin16 = vector24;
							if (!flag10)
							{
								origin16.X = (float)value55.Width - origin16.X;
							}
							float num91 = (float)Math.Acos(v.Length() / num90) * (0f - value56.X);
							mySpriteBatch.Draw(value55, vector26 - screenPos, null, alpha8, v.ToRotation() + num91 - (float)Math.PI / 2f, origin16, 1f, spriteEffects, 0f);
							if (rCurrentNPC.ai[0] == -2f)
							{
								int num92 = (int)rCurrentNPC.ai[1];
								num92 /= 8;
								value62.Y += value62.Height * num92;
								mySpriteBatch.Draw(value61, rCurrentNPC.Center - screenPos, value62, alpha8, 0f, vector25 - new Vector2(4f, 4f), 1f, spriteEffects, 0f);
							}
							else
							{
								mySpriteBatch.Draw(value57, rCurrentNPC.Center - screenPos, null, alpha8, 0f, vector25, 1f, spriteEffects, 0f);
								Vector2 value64 = Utils.Vector2FromElipse(rCurrentNPC.localAI[0].ToRotationVector2(), value59 * rCurrentNPC.localAI[1]);
								mySpriteBatch.Draw(value58, rCurrentNPC.Center - screenPos + value64 + value60, null, alpha8, 0f, new Vector2(value58.Width, value58.Height) / 2f, 1f, SpriteEffects.None, 0f);
							}
							mySpriteBatch.Draw(value52, rCurrentNPC.Center - screenPos, rCurrentNPC.frame, alpha8, 0f, origin15, 1f, spriteEffects, 0f);
							return;
						}
						case 396:
						{
							Texture2D value34 = TextureAssets.Npc[type].Value;
							Vector2 origin12 = new Vector2(191f, 130f);
							Texture2D value35 = TextureAssets.Extra[18].Value;
							Texture2D value36 = TextureAssets.Extra[19].Value;
							Vector2 vector22 = new Vector2(19f, 34f);
							Vector2 value37 = new Vector2(27f, 59f);
							Vector2 value38 = new Vector2(0f, 0f);
							Texture2D value39 = TextureAssets.Extra[25].Value;
							Vector2 value40 = new Vector2(0f, 214f).RotatedBy(rCurrentNPC.rotation);
							Microsoft.Xna.Framework.Rectangle rectangle7 = value39.Frame();
							rectangle7.Height /= 3;
							rectangle7.Y += rectangle7.Height * (int)(rCurrentNPC.localAI[2] / 7f);
							Texture2D value41 = TextureAssets.Extra[29].Value;
							Vector2 value42 = new Vector2(0f, 4f).RotatedBy(rCurrentNPC.rotation);
							Microsoft.Xna.Framework.Rectangle rectangle8 = value41.Frame();
							rectangle8.Height /= 4;
							rectangle8.Y += rectangle8.Height * (int)(rCurrentNPC.localAI[3] / 5f);
							Texture2D value43 = TextureAssets.Extra[26].Value;
							Microsoft.Xna.Framework.Rectangle value44 = value43.Frame();
							value44.Height /= 4;
							_ = npc[(int)rCurrentNPC.ai[3]].Center;
							Microsoft.Xna.Framework.Point point2 = rCurrentNPC.Center.ToTileCoordinates();
							Microsoft.Xna.Framework.Color alpha5 = rCurrentNPC.GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point2.X, point2.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
							if (rCurrentNPC.ai[0] < 0f)
							{
								int num79 = (int)rCurrentNPC.ai[1];
								num79 /= 8;
								value44.Y += value44.Height * num79;
								mySpriteBatch.Draw(value43, rCurrentNPC.Center - screenPos, value44, alpha5, rCurrentNPC.rotation, vector22 + new Vector2(4f, 4f), 1f, spriteEffects, 0f);
							}
							else
							{
								mySpriteBatch.Draw(value35, rCurrentNPC.Center - screenPos, null, alpha5, rCurrentNPC.rotation, vector22, 1f, spriteEffects, 0f);
								Vector2 value45 = Utils.Vector2FromElipse(rCurrentNPC.localAI[0].ToRotationVector2(), value37 * rCurrentNPC.localAI[1]);
								mySpriteBatch.Draw(value36, rCurrentNPC.Center - screenPos + value45 + value38, null, alpha5, rCurrentNPC.rotation, new Vector2(value36.Width, value36.Height) / 2f, 1f, SpriteEffects.None, 0f);
							}
							mySpriteBatch.Draw(value34, rCurrentNPC.Center - screenPos, rCurrentNPC.frame, alpha5, rCurrentNPC.rotation, origin12, 1f, spriteEffects, 0f);
							mySpriteBatch.Draw(value41, (rCurrentNPC.Center - screenPos + value42), rectangle8, alpha5, rCurrentNPC.rotation, rectangle8.Size() / 2f, 1f, spriteEffects, 0f);
							mySpriteBatch.Draw(value39, (rCurrentNPC.Center - screenPos + value40), rectangle7, alpha5, rCurrentNPC.rotation, rectangle7.Size() / 2f, 1f, spriteEffects, 0f);
							return;
						}
						case 400:
						{
							Texture2D value46 = TextureAssets.Npc[type].Value;
							Texture2D value47 = TextureAssets.Extra[19].Value;
							Vector2 origin13 = new Vector2(40f, 40f);
							Vector2 value48 = new Vector2(30f, 30f);
							_ = rCurrentNPC.Center;
							Microsoft.Xna.Framework.Point point3 = rCurrentNPC.Center.ToTileCoordinates();
							Microsoft.Xna.Framework.Color alpha6 = rCurrentNPC.GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point3.X, point3.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
							mySpriteBatch.Draw(value46, rCurrentNPC.Center - screenPos, rCurrentNPC.frame, alpha6, rCurrentNPC.rotation, origin13, 1f, spriteEffects, 0f);
							Vector2 value49 = Utils.Vector2FromElipse(rCurrentNPC.localAI[0].ToRotationVector2(), value48 * rCurrentNPC.localAI[1]);
							mySpriteBatch.Draw(value47, rCurrentNPC.Center - screenPos + value49, null, alpha6, rCurrentNPC.rotation, value47.Size() / 2f, rCurrentNPC.localAI[2], SpriteEffects.None, 0f);
							return;
						}
						case 416:
						{
							int num80 = -1;
							int num81 = (int)rCurrentNPC.ai[0];
							Vector2 position13 = rCurrentNPC.position;
							Vector2 spinningpoint3 = Vector2.Zero;
							if (npc[num81].active && npc[num81].type == 415)
							{
								num80 = num81;
							}
							if (num80 != -1)
							{
								Vector2 position14 = rCurrentNPC.position;
								rCurrentNPC.Bottom = npc[num80].Bottom;
								position13 = rCurrentNPC.position;
								rCurrentNPC.position = position14;
								rCurrentNPC.gfxOffY = npc[num80].gfxOffY;
								spinningpoint3 = npc[num80].velocity;
							}
							Microsoft.Xna.Framework.Rectangle frame2 = rCurrentNPC.frame;
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(position13.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, position13.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame2, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							if (rCurrentNPC.color != default(Microsoft.Xna.Framework.Color))
							{
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(position13.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, position13.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame2, rCurrentNPC.GetColor(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							mySpriteBatch.Draw(TextureAssets.GlowMask[156].Value, position13 + rCurrentNPC.Size * new Vector2(0.5f, 1f) - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							float scaleFactor5 = 0.5f + (rCurrentNPC.GetAlpha(npcColor).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
							for (int num82 = 0; num82 < 4; num82++)
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[156].Value, position13 + rCurrentNPC.Size * new Vector2(0.5f, 1f) - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY) + spinningpoint3.RotatedBy((float)num82 * ((float)Math.PI / 2f)) * scaleFactor5, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							return;
						}
						case 399:
						{
							Texture2D value32 = TextureAssets.Npc[type].Value;
							//(rCurrentNPC.position - screenPos + Vector2.UnitY * rCurrentNPC.gfxOffY);
							float num75 = 5f;
							for (int num76 = 0; (float)num76 < num75; num76++)
							{
								float num77 = 1f - (GlobalTimeWrappedHourly + (float)num76) % num75 / num75;
								Microsoft.Xna.Framework.Color color21 = Microsoft.Xna.Framework.Color.LimeGreen;
								if (rCurrentNPC.ai[0] == 1f)
								{
									color21 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.LimeGreen, Microsoft.Xna.Framework.Color.Red, MathHelper.Clamp(rCurrentNPC.ai[1] / 20f, 0f, 1f));
								}
								if (rCurrentNPC.ai[0] == 2f)
								{
									color21 = Microsoft.Xna.Framework.Color.Red;
								}
								color21 *= 1f - num77;
								color21.A = 0;
								for (int num78 = 0; num78 < 2; num78++)
								{
									mySpriteBatch.Draw(TextureAssets.Extra[27].Value, rCurrentNPC.Center - screenPos + Vector2.UnitY * (rCurrentNPC.gfxOffY - 4f + 6f), null, color21, (float)Math.PI / 2f, new Vector2(10f, 48f), num77 * 4f, SpriteEffects.None, 0f);
								}
							}
							mySpriteBatch.Draw(value32, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							value32 = TextureAssets.GlowMask[100].Value;
							mySpriteBatch.Draw(value32, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							value32 = TextureAssets.Extra[20].Value;
							Microsoft.Xna.Framework.Rectangle value33 = value32.Frame(1, 4, 0, (int)rCurrentNPC.ai[0] + 1);
							Vector2 position12 = new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)value32.Width * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY + 18f + 6f);
							mySpriteBatch.Draw(value32, position12, value33, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							value32 = TextureAssets.GlowMask[101].Value;
							mySpriteBatch.Draw(value32, position12, value33, new Microsoft.Xna.Framework.Color(127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 127 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							return;
						}
						case 94:
						{
							for (int num69 = 1; num69 < 6; num69 += 2)
							{
								_ = rCurrentNPC.oldPos[num69];
								Microsoft.Xna.Framework.Color alpha3 = rCurrentNPC.GetAlpha(npcColor);
								alpha3.R = (byte)(alpha3.R * (10 - num69) / 15);
								alpha3.G = (byte)(alpha3.G * (10 - num69) / 15);
								alpha3.B = (byte)(alpha3.B * (10 - num69) / 15);
								alpha3.A = (byte)(alpha3.A * (10 - num69) / 15);
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num69].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num69].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, alpha3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						case 384:
							return;
						}
						if (type == 125 || type == 126 || type == 127 || type == 128 || type == 129 || type == 130 || type == 131 || type == 139 || type == 140)
						{
							for (int num93 = 9; num93 >= 0; num93 -= 2)
							{
								_ = rCurrentNPC.oldPos[num93];
								Microsoft.Xna.Framework.Color alpha9 = rCurrentNPC.GetAlpha(npcColor);
								alpha9.R = (byte)(alpha9.R * (10 - num93) / 20);
								alpha9.G = (byte)(alpha9.G * (10 - num93) / 20);
								alpha9.B = (byte)(alpha9.B * (10 - num93) / 20);
								alpha9.A = (byte)(alpha9.A * (10 - num93) / 20);
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num93].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num93].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, alpha9, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						if (type == 417 && rCurrentNPC.ai[0] >= 6f && rCurrentNPC.ai[0] <= 6f)
						{
							for (int num94 = 5; num94 >= 0; num94--)
							{
								_ = rCurrentNPC.oldPos[num94];
								Microsoft.Xna.Framework.Color alpha10 = rCurrentNPC.GetAlpha(npcColor);
								alpha10.R = (byte)(alpha10.R * (10 - num94) / 20);
								alpha10.G = (byte)(alpha10.G * (10 - num94) / 20);
								alpha10.B = (byte)(alpha10.B * (10 - num94) / 20);
								alpha10.A = (byte)(alpha10.A * (10 - num94) / 20);
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num94].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num94].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, alpha10, rCurrentNPC.oldRot[num94], halfSize, MathHelper.Lerp(0.5f, 1f, (5f - (float)num94) / 6f), spriteEffects, 0f);
							}
						}
						if (type == 419 && rCurrentNPC.ai[2] <= -9f)
						{
							int num95 = TextureAssets.GlowMask[154].Height() / npcFrameCount[type];
							int num96 = rCurrentNPC.frame.Y / num95;
							for (int num97 = 6; num97 >= 0; num97--)
							{
								_ = rCurrentNPC.oldPos[num97];
								Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
								white3.R = (byte)(255 * (10 - num97) / 20);
								white3.G = (byte)(255 * (10 - num97) / 20);
								white3.B = (byte)(255 * (10 - num97) / 20);
								white3.A = 0;
								Microsoft.Xna.Framework.Rectangle frame3 = rCurrentNPC.frame;
								int num98 = (num96 - 3 - num97) % 3;
								if (num98 < 0)
								{
									num98 += 3;
								}
								num98 += 5;
								frame3.Y = num95 * num98;
								mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, new Vector2(rCurrentNPC.oldPos[num97].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num97].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), frame3, white3, rCurrentNPC.oldRot[num97], halfSize, MathHelper.Lerp(0.75f, 1.2f, (10f - (float)num97) / 10f), spriteEffects, 0f);
							}
						}
						if (type == 418 && (rCurrentNPC.ai[0] == 2f || rCurrentNPC.ai[0] == 4f))
						{
							Texture2D value65 = TextureAssets.Extra[55].Value;
							Vector2 origin17 = new Vector2(value65.Width / 2, value65.Height / 8 + 14);
							int num99 = (int)rCurrentNPC.ai[1] / 2;
							float num100 = -(float)Math.PI / 2f * (float)rCurrentNPC.spriteDirection;
							float num101 = rCurrentNPC.ai[1] / 45f;
							if (num101 > 1f)
							{
								num101 = 1f;
							}
							num99 %= 4;
							for (int num102 = 6; num102 >= 0; num102--)
							{
								_ = rCurrentNPC.oldPos[num102];
								Microsoft.Xna.Framework.Color value66 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Gold, Microsoft.Xna.Framework.Color.OrangeRed, num101);
								value66 = Microsoft.Xna.Framework.Color.Lerp(value66, Microsoft.Xna.Framework.Color.Blue, (float)num102 / 12f);
								value66.A = (byte)(64f * num101);
								value66.R = (byte)(value66.R * (10 - num102) / 20);
								value66.G = (byte)(value66.G * (10 - num102) / 20);
								value66.B = (byte)(value66.B * (10 - num102) / 20);
								value66.A = (byte)(value66.A * (10 - num102) / 20);
								value66 *= num101;
								int num103 = (num99 - num102) % 4;
								if (num103 < 0)
								{
									num103 += 4;
								}
								Microsoft.Xna.Framework.Rectangle value67 = value65.Frame(1, 4, 0, num103);
								mySpriteBatch.Draw(value65, new Vector2(rCurrentNPC.oldPos[num102].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num102].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), value67, value66, rCurrentNPC.oldRot[num102] + num100, origin17, MathHelper.Lerp(0.1f, 1.2f, (10f - (float)num102) / 10f), spriteEffects, 0f);
							}
						}
						if (type == 516)
						{
							int num104 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
							int num105 = rCurrentNPC.frame.Y / num104;
							for (int num106 = 6; num106 >= 0; num106--)
							{
								_ = rCurrentNPC.oldPos[num106];
								Microsoft.Xna.Framework.Color white4 = Microsoft.Xna.Framework.Color.White;
								white4.R = (byte)(255 * (10 - num106) / 20);
								white4.G = (byte)(255 * (10 - num106) / 20);
								white4.B = (byte)(255 * (10 - num106) / 20);
								white4.A = (byte)(255 * (10 - num106) / 20);
								white4 = Microsoft.Xna.Framework.Color.Lerp(white4, Microsoft.Xna.Framework.Color.Transparent, (float)num106 / 6f);
								Microsoft.Xna.Framework.Rectangle frame4 = rCurrentNPC.frame;
								int num107 = (num105 - 4 - num106) % 4;
								if (num107 < 0)
								{
									num107 += 4;
								}
								frame4.Y = num104 * num107;
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num106].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num106].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), frame4, white4, rCurrentNPC.rotation, halfSize, MathHelper.Lerp(0.35f, 1.2f, (10f - (float)num106) / 10f), spriteEffects, 0f);
							}
						}
						if (rCurrentNPC.type == 390 && rCurrentNPC.IsABestiaryIconDummy)
						{
							LoadNPC(391);
							Texture2D value68 = TextureAssets.Npc[391].Value;
							Microsoft.Xna.Framework.Rectangle value69 = value68.Frame(1, npcFrameCount[391], 0, (int)rCurrentNPC.localAI[3]);
							Vector2 value70 = new Vector2(-rCurrentNPC.width - 8, 10f);
							mySpriteBatch.Draw(value68, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY) + value70, value69, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						Microsoft.Xna.Framework.Rectangle frame5 = rCurrentNPC.frame;
						if (type == 182 || type == 289)
						{
							frame5.Height -= 2;
						}
						switch (type)
						{
						case 420:
						case 421:
						case 423:
						case 424:
						{
							float num111 = 9f + 3f * (float)Math.Cos((float)Math.PI * 2f * GlobalTimeWrappedHourly);
							Vector2 spinningpoint5 = Vector2.UnitX * num111;
							Microsoft.Xna.Framework.Color color23 = Microsoft.Xna.Framework.Color.Teal * (num111 / 12f) * 0.8f;
							color23.A /= 2;
							for (float num112 = 0f; num112 < (float)Math.PI * 2f; num112 += (float)Math.PI / 2f)
							{
								Vector2 vector29 = rCurrentNPC.position + spinningpoint5.RotatedBy(num112);
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(vector29.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, vector29.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, color23, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						case 662:
						{
							float num108 = 4f + 2f * (float)Math.Cos((float)Math.PI * 2f * GlobalTimeWrappedHourly);
							Vector2 spinningpoint4 = Vector2.UnitX * num108;
							Microsoft.Xna.Framework.Color color22 = Microsoft.Xna.Framework.Color.Cyan * (num108 / 12f) * 0.4f;
							color22.A /= 4;
							for (float num109 = 0.9f; num109 >= 0f; num109 -= 0.125f)
							{
								Vector2 vector27 = rCurrentNPC.position - rCurrentNPC.velocity * 10f * num109;
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(vector27.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, vector27.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, color22 * (1f - num109), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							for (float num110 = 0f; num110 < (float)Math.PI * 2f; num110 += (float)Math.PI / 2f)
							{
								Vector2 vector28 = rCurrentNPC.position + spinningpoint4.RotatedBy(num110);
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(vector28.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, vector28.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, color22, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							break;
						}
						}
						if (rCurrentNPC.aiStyle == 7)
						{
							DrawNPCExtras(rCurrentNPC, beforeDraw: true, num37, num36, npcColor, halfSize, spriteEffects, screenPos);
						}
						if (type == 346 && (double)rCurrentNPC.life < (double)rCurrentNPC.lifeMax * 0.5)
						{
							mySpriteBatch.Draw(TextureAssets.SantaTank.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 356)
						{
							frame5.Height--;
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 360)
						{
							float num113 = 0f;
							if (rCurrentNPC.ai[2] == 0f)
							{
								if (rCurrentNPC.rotation == 3.14f || rCurrentNPC.rotation == -3.14f)
								{
									num37 = 2f;
								}
								if (rCurrentNPC.direction < 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
								{
									num113 = 1f;
								}
								if (rCurrentNPC.direction > 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
								{
									num113 = -1f;
								}
							}
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale + num113, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 655)
						{
							float num114 = 0f;
							if (rCurrentNPC.ai[2] == 0f)
							{
								if (rCurrentNPC.rotation == 3.14f || rCurrentNPC.rotation == -3.14f)
								{
									num37 = 2f;
								}
								if (rCurrentNPC.direction < 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
								{
									num114 = 1f;
								}
								if (rCurrentNPC.direction > 0 && (rCurrentNPC.rotation == 1.57f || rCurrentNPC.rotation == 4.71f))
								{
									num114 = -1f;
								}
							}
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale + num114, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, rCurrentNPC.GetAlpha(Microsoft.Xna.Framework.Color.Orange), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 266 && rCurrentNPC.life < rCurrentNPC.lifeMax && (expertMode || getGoodWorld))
						{
							Microsoft.Xna.Framework.Color alpha11 = rCurrentNPC.GetAlpha(npcColor);
							float num115 = 1f - (float)rCurrentNPC.life / (float)rCurrentNPC.lifeMax;
							num115 *= num115;
							if (getGoodWorld)
							{
								num115 = 1f;
							}
							alpha11.R = (byte)((float)(int)alpha11.R * num115);
							alpha11.G = (byte)((float)(int)alpha11.G * num115);
							alpha11.B = (byte)((float)(int)alpha11.B * num115);
							alpha11.A = (byte)((float)(int)alpha11.A * num115);
							for (int num116 = 0; num116 < 4; num116++)
							{
								Vector2 position15 = rCurrentNPC.position;
								float num117 = Math.Abs(rCurrentNPC.Center.X - Main.player[myPlayer].Center.X);
								float num118 = Math.Abs(rCurrentNPC.Center.Y - Main.player[myPlayer].Center.Y);
								if (num116 == 0 || num116 == 2)
								{
									position15.X = Main.player[myPlayer].Center.X + num117;
								}
								else
								{
									position15.X = Main.player[myPlayer].Center.X - num117;
								}
								position15.X -= rCurrentNPC.width / 2;
								if (num116 == 0 || num116 == 1)
								{
									position15.Y = Main.player[myPlayer].Center.Y + num118;
								}
								else
								{
									position15.Y = Main.player[myPlayer].Center.Y - num118;
								}
								position15.Y -= rCurrentNPC.height / 2;
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(position15.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, position15.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, alpha11, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 421 && rCurrentNPC.ai[0] == 5f)
						{
							Player player = Main.player[rCurrentNPC.target];
							if (player.gravDir == -1f)
							{
								spriteEffects |= SpriteEffects.FlipVertically;
							}
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(player.direction * 4, player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - screenPos, frame5, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, frame5.Size() / 2f, rCurrentNPC.scale, spriteEffects, 0f);
							mySpriteBatch.Draw(TextureAssets.GlowMask[146].Value, new Vector2(player.direction * 4, player.gfxOffY) + ((player.gravDir == 1f) ? player.Top : player.Bottom) - screenPos, frame5, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, frame5.Size() / 2f, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 518)
						{
							Vector2 value71 = new Vector2(-10f, 0f);
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize + value71, rCurrentNPC.scale, spriteEffects, 0f);
							if (rCurrentNPC.color != default(Microsoft.Xna.Framework.Color))
							{
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, rCurrentNPC.GetColor(npcColor), rCurrentNPC.rotation, halfSize + value71, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						else
						{
							mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, rCurrentNPC.GetAlpha(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							if (rCurrentNPC.color != default(Microsoft.Xna.Framework.Color))
							{
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, rCurrentNPC.GetColor(npcColor), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						if (rCurrentNPC.confused)
						{
							mySpriteBatch.Draw(TextureAssets.Confuse.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 - (float)TextureAssets.Confuse.Height() - 20f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Confuse.Width(), TextureAssets.Confuse.Height()), new Microsoft.Xna.Framework.Color(250, 250, 250, 70), rCurrentNPC.velocity.X * -0.05f, new Vector2(TextureAssets.Confuse.Width() / 2, TextureAssets.Confuse.Height() / 2), essScale + 0.2f, SpriteEffects.None, 0f);
						}
						if (type >= 639 && type <= 645)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[286].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, rCurrentNPC.GetAlpha(Microsoft.Xna.Framework.Color.White), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						if (type >= 646 && type <= 652)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[287].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, rCurrentNPC.GetAlpha(Microsoft.Xna.Framework.Color.White), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						if (type >= 134 && type <= 136 && npcColor != Microsoft.Xna.Framework.Color.Black)
						{
							mySpriteBatch.Draw(TextureAssets.Dest[type - 134].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - (float)rCurrentNPC.alpha / 255f), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 125)
						{
							mySpriteBatch.Draw(TextureAssets.EyeLaser.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 139)
						{
							mySpriteBatch.Draw(TextureAssets.Probe.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 127)
						{
							mySpriteBatch.Draw(TextureAssets.BoneEyes.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 131)
						{
							mySpriteBatch.Draw(TextureAssets.BoneLaser.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 120)
						{
							for (int num119 = 1; num119 < rCurrentNPC.oldPos.Length; num119++)
							{
								_ = rCurrentNPC.oldPos[num119];
								Microsoft.Xna.Framework.Color color24 = default(Microsoft.Xna.Framework.Color);
								color24.R = (byte)(150 * (10 - num119) / 15);
								color24.G = (byte)(100 * (10 - num119) / 15);
								color24.B = (byte)(150 * (10 - num119) / 15);
								color24.A = (byte)(50 * (10 - num119) / 15);
								mySpriteBatch.Draw(TextureAssets.Chaos.Value, new Vector2(rCurrentNPC.oldPos[num119].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num119].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, color24, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						else if (type == 137 || type == 138)
						{
							for (int num120 = 1; num120 < rCurrentNPC.oldPos.Length; num120++)
							{
								_ = rCurrentNPC.oldPos[num120];
								Microsoft.Xna.Framework.Color color25 = default(Microsoft.Xna.Framework.Color);
								color25.R = (byte)(150 * (10 - num120) / 15);
								color25.G = (byte)(100 * (10 - num120) / 15);
								color25.B = (byte)(150 * (10 - num120) / 15);
								color25.A = (byte)(50 * (10 - num120) / 15);
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num120].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num120].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, color25, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						else if (type == 327)
						{
							mySpriteBatch.Draw(TextureAssets.PumpkingFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, Microsoft.Xna.Framework.Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							for (int num121 = 1; num121 < 10; num121++)
							{
								Microsoft.Xna.Framework.Color color26 = new Microsoft.Xna.Framework.Color(110 - num121 * 10, 110 - num121 * 10, 110 - num121 * 10, 110 - num121 * 10);
								Vector2 value72 = new Vector2((float)rand.Next(-10, 11) * 0.2f, (float)rand.Next(-10, 11) * 0.2f);
								mySpriteBatch.Draw(TextureAssets.PumpkingFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37) + value72, rCurrentNPC.frame, color26, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						else if (type == 325)
						{
							mySpriteBatch.Draw(TextureAssets.TreeFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, Microsoft.Xna.Framework.Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							for (int num122 = 1; num122 < 10; num122++)
							{
								Microsoft.Xna.Framework.Color color27 = new Microsoft.Xna.Framework.Color(110 - num122 * 10, 110 - num122 * 10, 110 - num122 * 10, 110 - num122 * 10);
								Vector2 value73 = new Vector2((float)rand.Next(-10, 11) * 0.2f, (float)rand.Next(-10, 11) * 0.2f);
								mySpriteBatch.Draw(TextureAssets.TreeFace.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37) + value73, rCurrentNPC.frame, color27, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						else if (type == 345)
						{
							mySpriteBatch.Draw(TextureAssets.IceQueen.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, Microsoft.Xna.Framework.Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							for (int num123 = 1; num123 < 5; num123++)
							{
								mySpriteBatch.Draw(color: new Microsoft.Xna.Framework.Color(100 - num123 * 10, 100 - num123 * 10, 100 - num123 * 10, 100 - num123 * 10), texture: TextureAssets.IceQueen.Value, position: new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37) - rCurrentNPC.velocity * num123 * 0.2f, sourceRectangle: rCurrentNPC.frame, rotation: rCurrentNPC.rotation, origin: halfSize, scale: rCurrentNPC.scale, effects: spriteEffects, layerDepth: 0f);
							}
						}
						else if (type == 355)
						{
							mySpriteBatch.Draw(TextureAssets.Firefly.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 358)
						{
							mySpriteBatch.Draw(TextureAssets.Lightningbug.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 654)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[290].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 653)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[288].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 3f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 82)
						{
							mySpriteBatch.Draw(TextureAssets.WraithEye.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, Microsoft.Xna.Framework.Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							for (int num124 = 1; num124 < 10; num124++)
							{
								mySpriteBatch.Draw(color: new Microsoft.Xna.Framework.Color(110 - num124 * 10, 110 - num124 * 10, 110 - num124 * 10, 110 - num124 * 10), texture: TextureAssets.WraithEye.Value, position: new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37) - rCurrentNPC.velocity * num124 * 0.5f, sourceRectangle: rCurrentNPC.frame, rotation: rCurrentNPC.rotation, origin: halfSize, scale: rCurrentNPC.scale, effects: spriteEffects, layerDepth: 0f);
							}
						}
						else if (type == 253)
						{
							mySpriteBatch.Draw(TextureAssets.ReaperEye.Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 3f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, Microsoft.Xna.Framework.Color.White, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							for (int num125 = 1; num125 < 20; num125++)
							{
								mySpriteBatch.Draw(color: new Microsoft.Xna.Framework.Color(210 - num125 * 20, 210 - num125 * 20, 210 - num125 * 20, 210 - num125 * 20), texture: TextureAssets.ReaperEye.Value, position: new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 3f + halfSize.Y * rCurrentNPC.scale + num37) - rCurrentNPC.velocity * num125 * 0.5f, sourceRectangle: rCurrentNPC.frame, rotation: rCurrentNPC.rotation, origin: halfSize, scale: rCurrentNPC.scale, effects: spriteEffects, layerDepth: 0f);
							}
						}
						else if (type == 245 && rCurrentNPC.alpha == 0 && !getGoodWorld)
						{
							mySpriteBatch.Draw(color: new Microsoft.Xna.Framework.Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, 0), texture: TextureAssets.Golem[3].Value, position: new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), sourceRectangle: frame5, rotation: rCurrentNPC.rotation, origin: halfSize, scale: rCurrentNPC.scale, effects: spriteEffects, layerDepth: 0f);
						}
						else if (type == 246 && !getGoodWorld)
						{
							Microsoft.Xna.Framework.Color color32 = new Microsoft.Xna.Framework.Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, 0);
							if (rCurrentNPC.frame.Y < 222)
							{
								mySpriteBatch.Draw(TextureAssets.Golem[1].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X - 20f, rCurrentNPC.Center.Y - screenPos.Y - 27f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Golem[1].Width(), TextureAssets.Golem[1].Height() / 2), color32, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								Microsoft.Xna.Framework.Rectangle value74 = frame5;
								value74.Y = 0;
								mySpriteBatch.Draw(TextureAssets.Extra[107].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), value74, color32, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
							else if (rCurrentNPC.frame.Y < 444)
							{
								mySpriteBatch.Draw(TextureAssets.Golem[2].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X + 26f, rCurrentNPC.Center.Y - screenPos.Y - 28f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Golem[2].Width(), TextureAssets.Golem[2].Height() / 4), color32, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
							else
							{
								mySpriteBatch.Draw(TextureAssets.Golem[2].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X - 38f, rCurrentNPC.Center.Y - screenPos.Y - 28f), new Microsoft.Xna.Framework.Rectangle(0, TextureAssets.Golem[2].Height() / 2, TextureAssets.Golem[2].Width(), TextureAssets.Golem[2].Height() / 4), color32, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
						else if (type == 249 && !getGoodWorld)
						{
							Microsoft.Xna.Framework.Color color33 = new Microsoft.Xna.Framework.Color((int)mouseTextColor, (int)mouseTextColor, (int)mouseTextColor, 0);
							mySpriteBatch.Draw(TextureAssets.Golem[1].Value, new Vector2(rCurrentNPC.Center.X - screenPos.X - 20f, rCurrentNPC.Center.Y - screenPos.Y - 47f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Golem[1].Width(), TextureAssets.Golem[1].Height() / 2), color33, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							int num126 = (int)rCurrentNPC.frameCounter / 4;
							Texture2D value75 = TextureAssets.Extra[106].Value;
							Microsoft.Xna.Framework.Rectangle value76 = value75.Frame(1, 8);
							_ = Microsoft.Xna.Framework.Color.White;
							value76.Y += value76.Height * 2 * num126 + frame5.Y;
							mySpriteBatch.Draw(value75, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), value76, color33, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							value75 = TextureAssets.Extra[107].Value;
							value76 = frame5;
							mySpriteBatch.Draw(value75, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), value76, color33, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 383)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[11].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							if (rCurrentNPC.ai[2] != 0f && npc[(int)rCurrentNPC.ai[2] - 1].active && npc[(int)rCurrentNPC.ai[2] - 1].type == 384)
							{
								_ = rCurrentNPC.ai[2];
								mySpriteBatch.Draw(TextureAssets.Npc[384].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), null, new Microsoft.Xna.Framework.Color(100, 100, 100, 0), rCurrentNPC.rotation, new Vector2(TextureAssets.Npc[384].Width(), TextureAssets.Npc[384].Height()) / 2f, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						else if (type == 381)
						{
							Vector2 zero3 = Vector2.Zero;
							Vector2 origin18 = Vector2.Zero;
							int num127 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
							int num128 = rCurrentNPC.frame.Y / num127;
							Microsoft.Xna.Framework.Rectangle value77 = new Microsoft.Xna.Framework.Rectangle(0, 0, 32, 42);
							switch (num128)
							{
							case 0:
								zero3 += new Vector2(8f, 32f);
								break;
							case 1:
								zero3 += new Vector2(6f, 72f);
								break;
							case 2:
								zero3 += new Vector2(8f, 126f);
								break;
							case 3:
								zero3 += new Vector2(6f, 174f);
								break;
							case 4:
								zero3 += new Vector2(6f, 224f);
								break;
							case 5:
								zero3 += new Vector2(8f, 272f);
								break;
							case 6:
								zero3 += new Vector2(10f, 318f);
								break;
							case 7:
								zero3 += new Vector2(14f, 366f);
								break;
							case 8:
								zero3 += new Vector2(10f, 414f);
								break;
							}
							zero3.Y -= num127 * num128;
							zero3 -= halfSize;
							int num129 = 2;
							if (rCurrentNPC.ai[2] > 0f)
							{
								num129 = (int)rCurrentNPC.ai[2] - 1;
							}
							if (rCurrentNPC.velocity.Y != 0f)
							{
								num129 = 3;
							}
							value77.Y += 44 * num129;
							switch (num129)
							{
							case 0:
								origin18 = new Vector2(10f, 18f);
								break;
							case 1:
								origin18 = new Vector2(8f, 20f);
								break;
							case 2:
								origin18 = new Vector2(8f, 20f);
								break;
							case 3:
								origin18 = new Vector2(8f, 20f);
								break;
							case 4:
								origin18 = new Vector2(6f, 18f);
								break;
							}
							if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
							{
								zero3.X *= -1f;
								origin18.X = (float)value77.Width - origin18.X;
							}
							zero3 += rCurrentNPC.Center;
							zero3 -= screenPos;
							zero3.Y += rCurrentNPC.gfxOffY;
							mySpriteBatch.Draw(TextureAssets.Extra[0].Value, zero3, value77, npcColor, rCurrentNPC.rotation, origin18, rCurrentNPC.scale, spriteEffects, 0f);
							mySpriteBatch.Draw(TextureAssets.GlowMask[24].Value, zero3, value77, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, origin18, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 382)
						{
							Vector2 zero4 = Vector2.Zero;
							Vector2 origin19 = Vector2.Zero;
							int num130 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
							int num131 = rCurrentNPC.frame.Y / num130;
							Microsoft.Xna.Framework.Rectangle value78 = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 42);
							switch (num131)
							{
							case 0:
								zero4 += new Vector2(8f, 30f);
								break;
							case 1:
								zero4 += new Vector2(6f, 68f);
								break;
							case 2:
								zero4 += new Vector2(8f, 120f);
								break;
							case 3:
								zero4 += new Vector2(6f, 166f);
								break;
							case 4:
								zero4 += new Vector2(6f, 214f);
								break;
							case 5:
								zero4 += new Vector2(8f, 260f);
								break;
							case 6:
								zero4 += new Vector2(14f, 304f);
								break;
							case 7:
								zero4 += new Vector2(14f, 350f);
								break;
							case 8:
								zero4 += new Vector2(10f, 396f);
								break;
							}
							zero4.Y -= num130 * num131;
							zero4 -= halfSize;
							int num132 = 2;
							if (rCurrentNPC.ai[2] > 0f)
							{
								num132 = (int)rCurrentNPC.ai[2] - 1;
							}
							if (rCurrentNPC.velocity.Y != 0f)
							{
								num132 = 3;
							}
							value78.Y += 44 * num132;
							switch (num132)
							{
							case 0:
								origin19 = new Vector2(10f, 18f);
								break;
							case 1:
								origin19 = new Vector2(8f, 20f);
								break;
							case 2:
								origin19 = new Vector2(8f, 20f);
								break;
							case 3:
								origin19 = new Vector2(8f, 20f);
								break;
							case 4:
								origin19 = new Vector2(6f, 18f);
								break;
							}
							if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
							{
								zero4.X *= -1f;
								origin19.X = (float)value78.Width - origin19.X;
							}
							zero4 += rCurrentNPC.Center;
							zero4 -= screenPos;
							zero4.Y += rCurrentNPC.gfxOffY;
							mySpriteBatch.Draw(TextureAssets.Extra[1].Value, zero4, value78, npcColor, rCurrentNPC.rotation, origin19, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 520)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[164].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							Vector2 zero5 = Vector2.Zero;
							Vector2 origin20 = new Vector2(4f, 4f);
							int num133 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
							_ = rCurrentNPC.frame.Y / num133;
							if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
							{
								zero5.X *= -1f;
								origin20.X = (float)TextureAssets.Extra[56].Width() - origin20.X;
							}
							zero5 += rCurrentNPC.Top + new Vector2(0f, 20f);
							zero5 -= screenPos;
							zero5.Y += rCurrentNPC.gfxOffY;
							float num134 = rCurrentNPC.localAI[3];
							if (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally))
							{
								num134 += (float)Math.PI;
							}
							mySpriteBatch.Draw(TextureAssets.Extra[56].Value, zero5, null, npcColor, num134, origin20, rCurrentNPC.scale, spriteEffects, 0f);
							mySpriteBatch.Draw(TextureAssets.GlowMask[165].Value, zero5, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), num134, origin20, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 386)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[31].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 387)
						{
							Microsoft.Xna.Framework.Color color34 = new Microsoft.Xna.Framework.Color(1f, 1f, 1f, 1f) * 0.75f;
							if (rCurrentNPC.ai[0] > 0f)
							{
								float amount7 = (rCurrentNPC.ai[0] + 1f) / 60f;
								color34 = Microsoft.Xna.Framework.Color.Lerp(color34, Microsoft.Xna.Framework.Color.White, amount7);
								color34.A = (byte)MathHelper.Lerp((int)color34.A, 0f, amount7);
							}
							color34 *= (255f - (float)rCurrentNPC.alpha) / 255f;
							mySpriteBatch.Draw(TextureAssets.GlowMask[32].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, color34, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 388)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[33].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 389)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[34].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 4 && rCurrentNPC.ai[1] >= 4f && rCurrentNPC.ai[0] == 3f)
						{
							for (int num135 = 1; num135 < rCurrentNPC.oldPos.Length; num135++)
							{
								_ = rCurrentNPC.oldPos[num135];
								Microsoft.Xna.Framework.Color color35 = npcColor;
								color35.R = (byte)(0.5 * (double)(int)color35.R * (double)(10 - num135) / 20.0);
								color35.G = (byte)(0.5 * (double)(int)color35.G * (double)(10 - num135) / 20.0);
								color35.B = (byte)(0.5 * (double)(int)color35.B * (double)(10 - num135) / 20.0);
								color35.A = (byte)(0.5 * (double)(int)color35.A * (double)(10 - num135) / 20.0);
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num135].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num135].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, color35, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						else if (type == 437)
						{
							Microsoft.Xna.Framework.Color white5 = Microsoft.Xna.Framework.Color.White;
							white5.A = 200;
							mySpriteBatch.Draw(TextureAssets.GlowMask[109].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), frame5, white5, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							mySpriteBatch.Draw(TextureAssets.GlowMask[108].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + num36 + rCurrentNPC.gfxOffY), null, white5, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (type == 471 && rCurrentNPC.ai[3] < 0f)
						{
							for (int num136 = 1; num136 < rCurrentNPC.oldPos.Length; num136++)
							{
								_ = rCurrentNPC.oldPos[num136];
								Microsoft.Xna.Framework.Color color36 = npcColor;
								color36.R = (byte)(0.5 * (double)(int)color36.R * (double)(10 - num136) / 20.0);
								color36.G = (byte)(0.5 * (double)(int)color36.G * (double)(10 - num136) / 20.0);
								color36.B = (byte)(0.5 * (double)(int)color36.B * (double)(10 - num136) / 20.0);
								color36.A = (byte)(0.5 * (double)(int)color36.A * (double)(10 - num136) / 20.0);
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num136].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num136].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, color36, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						else if (type == 477 && rCurrentNPC.velocity.Length() > 9f)
						{
							for (int num137 = 1; num137 < rCurrentNPC.oldPos.Length; num137++)
							{
								_ = rCurrentNPC.oldPos[num137];
								Microsoft.Xna.Framework.Color color37 = npcColor;
								color37.R = (byte)(0.5 * (double)(int)color37.R * (double)(10 - num137) / 20.0);
								color37.G = (byte)(0.5 * (double)(int)color37.G * (double)(10 - num137) / 20.0);
								color37.B = (byte)(0.5 * (double)(int)color37.B * (double)(10 - num137) / 20.0);
								color37.A = (byte)(0.5 * (double)(int)color37.A * (double)(10 - num137) / 20.0);
								Microsoft.Xna.Framework.Rectangle frame6 = rCurrentNPC.frame;
								int num138 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
								frame6.Y -= num138 * num137;
								while (frame6.Y < 0)
								{
									frame6.Y += num138 * npcFrameCount[type];
								}
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num137].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num137].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), frame6, color37, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						if (type == 479 && (double)rCurrentNPC.velocity.Length() > 6.5)
						{
							for (int num139 = 1; num139 < rCurrentNPC.oldPos.Length; num139++)
							{
								_ = rCurrentNPC.oldPos[num139];
								Microsoft.Xna.Framework.Color color38 = npcColor;
								color38.R = (byte)(0.5 * (double)(int)color38.R * (double)(10 - num139) / 20.0);
								color38.G = (byte)(0.5 * (double)(int)color38.G * (double)(10 - num139) / 20.0);
								color38.B = (byte)(0.5 * (double)(int)color38.B * (double)(10 - num139) / 20.0);
								color38.A = (byte)(0.5 * (double)(int)color38.A * (double)(10 - num139) / 20.0);
								Microsoft.Xna.Framework.Rectangle frame7 = rCurrentNPC.frame;
								int num140 = TextureAssets.Npc[type].Height() / npcFrameCount[type];
								frame7.Y -= num140 * num139;
								while (frame7.Y < 0)
								{
									frame7.Y += num140 * npcFrameCount[type];
								}
								mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num139].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num139].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), frame7, color38, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
							}
						}
						else if (type == 472)
						{
							mySpriteBatch.Draw(TextureAssets.GlowMask[110].Value, new Vector2(rCurrentNPC.position.X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.position.Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
						}
						else if (rCurrentNPC.aiStyle == 87)
						{
							if ((int)rCurrentNPC.ai[0] == 4 || rCurrentNPC.ai[0] == 5f || rCurrentNPC.ai[0] == 6f)
							{
								for (int num141 = 1; num141 < rCurrentNPC.oldPos.Length; num141++)
								{
									_ = rCurrentNPC.oldPos[num141];
									Microsoft.Xna.Framework.Color color39 = npcColor;
									color39.R = (byte)(0.5 * (double)(int)color39.R * (double)(10 - num141) / 20.0);
									color39.G = (byte)(0.5 * (double)(int)color39.G * (double)(10 - num141) / 20.0);
									color39.B = (byte)(0.5 * (double)(int)color39.B * (double)(10 - num141) / 20.0);
									color39.A = (byte)(0.5 * (double)(int)color39.A * (double)(10 - num141) / 20.0);
									mySpriteBatch.Draw(TextureAssets.Npc[type].Value, new Vector2(rCurrentNPC.oldPos[num141].X - screenPos.X + (float)(rCurrentNPC.width / 2) - (float)TextureAssets.Npc[type].Width() * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, rCurrentNPC.oldPos[num141].Y - screenPos.Y + (float)rCurrentNPC.height - (float)TextureAssets.Npc[type].Height() * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37), rCurrentNPC.frame, color39, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
							}
						}
						else
						{
							switch (type)
							{
							case 50:
							{
								Texture2D value80 = TextureAssets.Extra[39].Value;
								Vector2 center4 = rCurrentNPC.Center;
								float num154 = 0f;
								switch (rCurrentNPC.frame.Y / (TextureAssets.Npc[type].Height() / npcFrameCount[type]))
								{
								case 0:
									num154 = 2f;
									break;
								case 1:
									num154 = -6f;
									break;
								case 2:
									num154 = 2f;
									break;
								case 3:
									num154 = 10f;
									break;
								case 4:
									num154 = 2f;
									break;
								case 5:
									num154 = 0f;
									break;
								}
								center4.Y += rCurrentNPC.gfxOffY - (70f - num154) * rCurrentNPC.scale;
								mySpriteBatch.Draw(value80, center4 - screenPos, null, npcColor, 0f, value80.Size() / 2f, 1f, spriteEffects, 0f);
								break;
							}
							case 411:
								mySpriteBatch.Draw(TextureAssets.GlowMask[136].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 409:
								mySpriteBatch.Draw(TextureAssets.GlowMask[138].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 410:
								mySpriteBatch.Draw(TextureAssets.GlowMask[137].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 407:
								mySpriteBatch.Draw(TextureAssets.GlowMask[139].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 405:
								mySpriteBatch.Draw(TextureAssets.GlowMask[141].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 406:
								mySpriteBatch.Draw(TextureAssets.GlowMask[142].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 424:
								mySpriteBatch.Draw(TextureAssets.GlowMask[144].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 423:
								mySpriteBatch.Draw(TextureAssets.GlowMask[145].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 421:
								mySpriteBatch.Draw(TextureAssets.GlowMask[146].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 420:
								mySpriteBatch.Draw(TextureAssets.GlowMask[147].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 425:
								mySpriteBatch.Draw(TextureAssets.GlowMask[150].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 429:
								mySpriteBatch.Draw(TextureAssets.GlowMask[151].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							case 418:
							{
								mySpriteBatch.Draw(TextureAssets.GlowMask[161].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								float scaleFactor14 = 0.25f + (rCurrentNPC.GetAlpha(npcColor).ToVector3() - new Vector3(0.5f)).Length() * 0.25f;
								for (int num153 = 0; num153 < 4; num153++)
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[161].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num153 * ((float)Math.PI / 2f)) * scaleFactor14, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								}
								break;
							}
							case 412:
							case 413:
							case 414:
							{
								Microsoft.Xna.Framework.Color color40 = new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 0);
								int num150 = 157 + type - 412;
								if (type == 414 && rCurrentNPC.localAI[2] != 0f)
								{
									int num151 = (int)rCurrentNPC.localAI[2];
									if (rCurrentNPC.localAI[2] < 0f)
									{
										num151 = 128 + (int)rCurrentNPC.localAI[2];
									}
									int num152 = 255 - num151;
									color40 = new Microsoft.Xna.Framework.Color(num152, num151, num151, num152);
								}
								mySpriteBatch.Draw(TextureAssets.GlowMask[num150].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, color40, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
								break;
							}
							default:
								switch (type)
								{
								case 415:
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[155].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									float scaleFactor7 = 0.5f + (rCurrentNPC.GetAlpha(npcColor).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
									for (int num143 = 0; num143 < 4; num143++)
									{
										mySpriteBatch.Draw(TextureAssets.GlowMask[155].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num143 * ((float)Math.PI / 2f)) * scaleFactor7, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									}
									break;
								}
								case 419:
									mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									if (rCurrentNPC.ai[2] >= -6f)
									{
										float scaleFactor10 = 0.5f + (rCurrentNPC.GetAlpha(npcColor).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
										for (int num146 = 0; num146 < 4; num146++)
										{
											mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num146 * ((float)Math.PI / 2f)) * scaleFactor10, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
										}
									}
									else
									{
										float scaleFactor11 = 4f;
										for (int num147 = 0; num147 < 4; num147++)
										{
											mySpriteBatch.Draw(TextureAssets.GlowMask[154].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY) + Vector2.UnitX.RotatedBy((float)num147 * ((float)Math.PI / 2f)) * scaleFactor11, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
										}
									}
									break;
								case 417:
								{
									mySpriteBatch.Draw(TextureAssets.GlowMask[160].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									float scaleFactor12 = 0.25f + (rCurrentNPC.GetAlpha(npcColor).ToVector3() - new Vector3(0.5f)).Length() * 0.25f;
									for (int num148 = 0; num148 < 4; num148++)
									{
										mySpriteBatch.Draw(TextureAssets.GlowMask[160].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num148 * ((float)Math.PI / 2f)) * scaleFactor12, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									}
									break;
								}
								case 516:
								{
									mySpriteBatch.Draw(TextureAssets.Npc[type].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									float scaleFactor8 = 0.5f + (rCurrentNPC.GetAlpha(npcColor).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
									for (int num144 = 0; num144 < 4; num144++)
									{
										mySpriteBatch.Draw(TextureAssets.Npc[type].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num144 * ((float)Math.PI / 2f)) * scaleFactor8, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									}
									break;
								}
								case 518:
								{
									Vector2 value79 = new Vector2(-10f, 0f);
									mySpriteBatch.Draw(TextureAssets.GlowMask[163].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha), rCurrentNPC.rotation, halfSize + value79, rCurrentNPC.scale, spriteEffects, 0f);
									float scaleFactor13 = 0.5f + (rCurrentNPC.GetAlpha(npcColor).ToVector3() - new Vector3(0.5f)).Length() * 0.5f;
									for (int num149 = 0; num149 < 4; num149++)
									{
										mySpriteBatch.Draw(TextureAssets.GlowMask[163].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY) + rCurrentNPC.velocity.RotatedBy((float)num149 * ((float)Math.PI / 2f)) * scaleFactor13, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize + value79, rCurrentNPC.scale, spriteEffects, 0f);
									}
									break;
								}
								case 344:
									mySpriteBatch.Draw(TextureAssets.GlowMask[253].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 100) * 0.5f, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									break;
								case 346:
								{
									float scaleFactor9 = 4f;
									for (int num145 = 0; num145 < 4; num145++)
									{
										mySpriteBatch.Draw(TextureAssets.GlowMask[254].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY) + Vector2.UnitX.RotatedBy((float)num145 * ((float)Math.PI / 2f)) * scaleFactor9, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									}
									mySpriteBatch.Draw(TextureAssets.GlowMask[254].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									break;
								}
								case 315:
								{
									float scaleFactor6 = 2f;
									for (int num142 = 0; num142 < 4; num142++)
									{
										mySpriteBatch.Draw(TextureAssets.GlowMask[255].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY) + Vector2.UnitX.RotatedBy((float)num142 * ((float)Math.PI / 2f)) * scaleFactor6, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(64, 64, 64, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									}
									mySpriteBatch.Draw(TextureAssets.GlowMask[255].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 200), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									break;
								}
								case 525:
									mySpriteBatch.Draw(TextureAssets.GlowMask[169].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									break;
								case 526:
									mySpriteBatch.Draw(TextureAssets.GlowMask[170].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									break;
								case 527:
									mySpriteBatch.Draw(TextureAssets.GlowMask[171].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(200, 200, 200, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									break;
								case 533:
									mySpriteBatch.Draw(TextureAssets.GlowMask[172].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 100), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									break;
								case 160:
									mySpriteBatch.Draw(TextureAssets.GlowMask[166].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									break;
								case 209:
									mySpriteBatch.Draw(TextureAssets.GlowMask[167].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
									break;
								}
								break;
							}
						}
						if (rCurrentNPC.aiStyle == 7)
						{
							DrawNPCExtras(rCurrentNPC, beforeDraw: false, num37, num36, npcColor, halfSize, spriteEffects, screenPos);
						}
						break;
					}
					case 488:
						break;
					}
					break;
				}
				goto case 426;
			case 426:
			case 427:
			case 428:
			case 521:
			case 523:
			case 541:
			case 542:
			case 543:
			case 544:
			case 545:
			case 581:
			{
				Texture2D value101 = TextureAssets.Npc[type].Value;
				Microsoft.Xna.Framework.Color color45 = Microsoft.Xna.Framework.Color.White;
				float amount10 = 0f;
				float amount11 = 0f;
				int num211 = 0;
				int num212 = 0;
				int num213 = 1;
				int num214 = 15;
				int num215 = 0;
				float scale6 = rCurrentNPC.scale;
				float value102 = rCurrentNPC.scale;
				int num216 = 0;
				float num217 = 0f;
				float scaleFactor23 = 0f;
				float num218 = 0f;
				Microsoft.Xna.Framework.Color color46 = npcColor;
				Vector2 origin22 = halfSize;
				switch (type)
				{
				case 558:
				case 559:
				case 560:
				case 574:
				case 575:
					if (rCurrentNPC.ai[0] != 2f)
					{
						num211 = 0;
						break;
					}
					num211 = 6;
					num212 = 2;
					num214 = num211 * 3;
					num215 = 1;
					break;
				case 566:
				case 567:
				case 578:
					num211 = 0;
					num37 = -2f;
					break;
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 561:
				case 562:
				case 563:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
					num211 = 0;
					if (type == 561 || type == 562 || type == 563)
					{
						num37 = -8f;
					}
					if (type == 555 || type == 556 || type == 557)
					{
						num37 = -5f;
					}
					if (type == 572 || type == 573)
					{
						num37 = -4f;
					}
					if (type == 570 || type == 571)
					{
						spriteEffects ^= SpriteEffects.FlipHorizontally;
						num37 = -2f;
					}
					if (type == 568 || type == 569)
					{
						spriteEffects ^= SpriteEffects.FlipHorizontally;
						num37 = -3f;
						num216 = 4;
						scaleFactor23 = 4f;
						num217 = (float)Math.Cos(GlobalTimeWrappedHourly % 1.5f / 1.5f * ((float)Math.PI * 2f)) / 6f + 0.75f;
						color45 = Microsoft.Xna.Framework.Color.HotPink;
						color45.A = 127;
						amount10 = 0.5f;
					}
					if (rCurrentNPC.localAI[3] < 60f)
					{
						float num231 = rCurrentNPC.localAI[3] / 60f;
						num216 = 3;
						num217 = 1f - num231 * num231;
						scaleFactor23 = 8f;
						color45 = new Microsoft.Xna.Framework.Color(127, 0, 255, 0);
						amount11 = 1f;
						color46 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color46, num231 * num231);
					}
					break;
				case 541:
					num216 = 4;
					scaleFactor23 = 6f;
					num217 = (float)Math.Cos(GlobalTimeWrappedHourly % 2.4f / 2.4f * ((float)Math.PI * 2f)) / 2f + 0.5f;
					color45 = Microsoft.Xna.Framework.Color.Gold;
					amount10 = 0.5f;
					break;
				case 661:
					num216 = 6;
					scaleFactor23 = 6f;
					num217 = (float)Math.Cos(GlobalTimeWrappedHourly % 2.4f / 2.4f * ((float)Math.PI * 2f)) / 2f + 0.5f;
					num217 = MathHelper.Max(num217, Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[2], clamped: true));
					amount10 = 0.5f;
					break;
				case 426:
					num216 = 4;
					scaleFactor23 = 4f;
					num217 = (float)Math.Cos(GlobalTimeWrappedHourly % 1.2f / 1.2f * ((float)Math.PI * 2f)) / 2f + 0.5f;
					color45 = Microsoft.Xna.Framework.Color.Turquoise;
					amount10 = 0.5f;
					num211 = 6;
					num212 = 2;
					num214 = num211;
					break;
				case 427:
					num211 = 8;
					num212 = 2;
					num214 = num211 * 3;
					break;
				case 546:
					num211 = 8;
					num212 = 2;
					num214 = num211 * 3;
					break;
				case 542:
				case 543:
				case 544:
				case 545:
					num211 = 6;
					num212 = 3;
					num214 = num211 * 2;
					break;
				case 581:
					num211 = 6;
					num212 = 2;
					num214 = num211 * 3;
					break;
				case 521:
					num211 = 10;
					num212 = 2;
					num214 = num211;
					num215 = 1;
					value102 = 0.3f;
					break;
				case 523:
					num216 = 3;
					scaleFactor23 = 10f * rCurrentNPC.scale;
					amount10 = 0.5f;
					amount11 = 0.8f;
					color45 = Microsoft.Xna.Framework.Color.HotPink;
					color45.A = 128;
					num218 = rCurrentNPC.localAI[0];
					num217 = rCurrentNPC.localAI[1];
					break;
				case 620:
					num37 = -9f;
					origin22 = rCurrentNPC.frame.Size() * new Vector2(0.5f, 0.5f) + new Vector2(-4 * rCurrentNPC.spriteDirection, 0f);
					num216 = 4;
					scaleFactor23 = 6f;
					num217 = (float)Math.Cos(GlobalTimeWrappedHourly % 2.4f / 2.4f * ((float)Math.PI * 2f)) / 2f + 0.5f;
					color45 = Microsoft.Xna.Framework.Color.Gold;
					amount10 = 0.5f;
					num211 = 6;
					num212 = 2;
					num214 = num211 * 3;
					num215 = 1;
					break;
				case 618:
				{
					float num219 = 90f;
					float num220 = 180f;
					if (rCurrentNPC.ai[0] == 1f && rCurrentNPC.ai[1] < num219)
					{
						int num221 = 3;
						float num222 = num219 / (float)num221;
						float num223 = rCurrentNPC.ai[1] % num222 / num222;
						num216 = 6;
						scaleFactor23 = 15f;
						num217 = num223 * 0.8f + 0.2f;
					}
					if (rCurrentNPC.ai[0] == 3f && rCurrentNPC.ai[1] < num220)
					{
						int num224 = 1;
						float num225 = num220 / (float)num224;
						float num226 = rCurrentNPC.ai[1] % num225 / num225;
						num216 = 4;
						scaleFactor23 = 25f;
						num217 = num226;
						Vector2 value103 = rCurrentNPC.scale * new Vector2(1f, 0.5f + num226 * 0.75f);
						Texture2D value104 = TextureAssets.Extra[59].Value;
						Microsoft.Xna.Framework.Rectangle rectangle11 = value104.Frame();
						Vector2 origin23 = rectangle11.Size() * new Vector2(0.5f, 0.5f);
						for (int num227 = 0; num227 < num216; num227++)
						{
							Microsoft.Xna.Framework.Color white8 = Microsoft.Xna.Framework.Color.White;
							white8 *= Utils.GetLerpValue(0f, 0.5f, num217) * Utils.GetLerpValue(1f, 0.5f, num217) * 0.25f;
							white8.A = 0;
							white8.G = 0;
							white8.B = 0;
							float num228 = (float)num227 / (float)num216 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num218;
							Vector2 position24 = rCurrentNPC.Center + num228.ToRotationVector2() * scaleFactor23 * num217 - screenPos;
							position24 -= new Vector2(value101.Width, value101.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position24 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value104, position24, rectangle11, white8, num228, origin23, value103 * 1.8f, spriteEffects, 0f);
						}
						for (int num229 = 0; num229 < num216; num229++)
						{
							Microsoft.Xna.Framework.Color white9 = Microsoft.Xna.Framework.Color.White;
							white9 *= Utils.GetLerpValue(0f, 0.5f, num217) * Utils.GetLerpValue(1f, 0.5f, num217) * 0.25f;
							white9.A = 0;
							float num230 = (float)num229 / (float)num216 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num218;
							Vector2 position25 = rCurrentNPC.Center + num230.ToRotationVector2() * scaleFactor23 * num217 - screenPos;
							position25 -= new Vector2(value101.Width, value101.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
							position25 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
							mySpriteBatch.Draw(value104, position25, rectangle11, white9, num230, origin23, value103 * 1.5f, spriteEffects, 0f);
						}
					}
					break;
				}
				}
				for (int num232 = num213; num232 < num211; num232 += num212)
				{
					_ = rCurrentNPC.oldPos[num232];
					Microsoft.Xna.Framework.Color value105 = color46;
					value105 = Microsoft.Xna.Framework.Color.Lerp(value105, color45, amount10);
					value105 = rCurrentNPC.GetAlpha(value105);
					value105 *= (float)(num211 - num232) / (float)num214;
					_ = rCurrentNPC.rotation;
					if (num215 == 1)
					{
						_ = rCurrentNPC.oldRot[num232];
					}
					float scale7 = MathHelper.Lerp(scale6, value102, 1f - (float)(num211 - num232) / (float)num214);
					Vector2 position26 = rCurrentNPC.oldPos[num232] + new Vector2(rCurrentNPC.width, rCurrentNPC.height) / 2f - screenPos;
					position26 -= new Vector2(value101.Width, value101.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
					position26 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(value101, position26, rCurrentNPC.frame, value105, rCurrentNPC.rotation, halfSize, scale7, spriteEffects, 0f);
				}
				for (int num233 = 0; num233 < num216; num233++)
				{
					Microsoft.Xna.Framework.Color value106 = npcColor;
					value106 = Microsoft.Xna.Framework.Color.Lerp(value106, color45, amount10);
					value106 = rCurrentNPC.GetAlpha(value106);
					value106 = Microsoft.Xna.Framework.Color.Lerp(value106, color45, amount11);
					value106 *= 1f - num217;
					Vector2 position27 = rCurrentNPC.Center + ((float)num233 / (float)num216 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num218).ToRotationVector2() * scaleFactor23 * num217 - screenPos;
					position27 -= new Vector2(value101.Width, value101.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
					position27 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
					mySpriteBatch.Draw(value101, position27, rCurrentNPC.frame, value106, rCurrentNPC.rotation, origin22, rCurrentNPC.scale, spriteEffects, 0f);
				}
				Vector2 vector35 = rCurrentNPC.Center - screenPos;
				vector35 -= new Vector2(value101.Width, value101.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
				vector35 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
				mySpriteBatch.Draw(value101, vector35, rCurrentNPC.frame, rCurrentNPC.GetAlpha(color46), rCurrentNPC.rotation, origin22, rCurrentNPC.scale, spriteEffects, 0f);
				switch (type)
				{
				case 427:
					mySpriteBatch.Draw(TextureAssets.GlowMask[152].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 255 - rCurrentNPC.alpha, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					break;
				case 426:
					mySpriteBatch.Draw(TextureAssets.GlowMask[153].Value, rCurrentNPC.Bottom - screenPos + new Vector2((float)(-TextureAssets.Npc[type].Width()) * rCurrentNPC.scale / 2f + halfSize.X * rCurrentNPC.scale, (float)(-TextureAssets.Npc[type].Height()) * rCurrentNPC.scale / (float)npcFrameCount[type] + 4f + halfSize.Y * rCurrentNPC.scale + num37 + rCurrentNPC.gfxOffY), rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 128 - rCurrentNPC.alpha / 2, 0), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					break;
				}
				if (type == 541)
				{
					Microsoft.Xna.Framework.Color color47 = new Microsoft.Xna.Framework.Color(127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 0).MultiplyRGBA(Microsoft.Xna.Framework.Color.Gold);
					for (int num234 = 0; num234 < num216; num234++)
					{
						Microsoft.Xna.Framework.Color newColor2 = color47;
						newColor2 = rCurrentNPC.GetAlpha(newColor2);
						newColor2 *= 1f - num217;
						Vector2 position28 = rCurrentNPC.Center + ((float)num234 / (float)num216 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num218).ToRotationVector2() * (4f * num217 + 2f) - screenPos;
						position28 -= new Vector2(value101.Width, value101.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
						position28 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(TextureAssets.GlowMask[216].Value, position28, rCurrentNPC.frame, newColor2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					mySpriteBatch.Draw(TextureAssets.GlowMask[216].Value, vector35, rCurrentNPC.frame, color47, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				}
				if (type == 661)
				{
					num218 = MathHelper.Lerp(0f, 3f, Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[2], clamped: true));
					for (int num235 = 0; num235 < num216; num235++)
					{
						Microsoft.Xna.Framework.Color newColor3 = new Microsoft.Xna.Framework.Color(127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 0).MultiplyRGBA(hslToRgb((GlobalTimeWrappedHourly + (float)num235 / (float)num216) % 1f, 1f, 0.5f));
						newColor3 = rCurrentNPC.GetAlpha(newColor3);
						newColor3 *= 1f - num217 * 0.5f;
						newColor3.A = 0;
						float num236 = 2f + rCurrentNPC.ai[2];
						Vector2 position29 = rCurrentNPC.Center + ((float)num235 / (float)num216 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num218).ToRotationVector2() * (num236 * num217 + 2f) - screenPos;
						position29 -= new Vector2(value101.Width, value101.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
						position29 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(value101, position29, rCurrentNPC.frame, newColor3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					mySpriteBatch.Draw(value101, vector35, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.1f, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				}
				if ((type == 568 || type == 569) && rCurrentNPC.localAI[3] >= 60f)
				{
					Microsoft.Xna.Framework.Color color48 = new Microsoft.Xna.Framework.Color(127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 127 - rCurrentNPC.alpha, 0).MultiplyRGBA(color45);
					for (int num237 = 0; num237 < num216; num237++)
					{
						Microsoft.Xna.Framework.Color newColor4 = color48;
						newColor4 = rCurrentNPC.GetAlpha(newColor4);
						newColor4 *= 1f - num217;
						Vector2 position30 = rCurrentNPC.Center + ((float)num237 / (float)num216 * ((float)Math.PI * 2f) + rCurrentNPC.rotation + num218).ToRotationVector2() * (4f * num217 + 2f) - screenPos;
						position30 -= new Vector2(value101.Width, value101.Height / npcFrameCount[type]) * rCurrentNPC.scale / 2f;
						position30 += halfSize * rCurrentNPC.scale + new Vector2(0f, num36 + num37 + rCurrentNPC.gfxOffY);
						mySpriteBatch.Draw(TextureAssets.GlowMask[224].Value, position30, rCurrentNPC.frame, newColor4, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					}
					mySpriteBatch.Draw(TextureAssets.GlowMask[224].Value, vector35, rCurrentNPC.frame, color48, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
					float num238 = rCurrentNPC.localAI[0];
					if (num238 > 0f)
					{
						byte a = (byte)((Math.Cos(num238 * ((float)Math.PI * 2f) / 60f) * 0.5 + 0.5) * 32.0 + 0.0);
						Microsoft.Xna.Framework.Color color49 = new Microsoft.Xna.Framework.Color(180, 90, 255, (int)a) * 0.75f;
						float num239 = 1f;
						if (num238 < 60f)
						{
							float lerpValue3 = Utils.GetLerpValue(0f, 60f, num238);
							color49 *= lerpValue3;
							num239 = MathHelper.Lerp(1f, 0.5f, 1f - lerpValue3 * lerpValue3);
						}
						Texture2D value107 = TextureAssets.Extra[89].Value;
						Vector2 origin24 = value107.Size() / 2f;
						Vector2 scale8 = new Vector2(num239);
						float num240 = num238 * ((float)Math.PI / 750f);
						float num241 = (float)Math.PI / 2f;
						scale8.Y *= 1f;
						scale8.X *= 1f;
						for (float num242 = 0f; num242 < 16f; num242 += 1f)
						{
							float num243 = num240 + (float)Math.PI * 2f * (num242 / 16f);
							Vector2 position31 = rCurrentNPC.Center - screenPos + num243.ToRotationVector2() * 400f * num239;
							mySpriteBatch.Draw(value107, position31, null, color49, num243 + (float)Math.PI / 2f + num241, origin24, scale8, SpriteEffects.None, 0f);
						}
					}
				}
				if (type == 546)
				{
					mySpriteBatch.Draw(TextureAssets.Extra[76].Value, vector35, rCurrentNPC.frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 200), MathHelper.Clamp(rCurrentNPC.velocity.X * 0.1f, -(float)Math.PI / 8f, (float)Math.PI / 8f), halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				}
				if ((type == 566 || type == 567) && rCurrentNPC.localAI[3] >= 115f)
				{
					int frameY = (int)(GlobalTimeWrappedHourly % 0.5f / 0.5f * 4f);
					Texture2D value108 = TextureAssets.Extra[80].Value;
					Microsoft.Xna.Framework.Rectangle rectangle12 = value108.Frame(1, 4, 0, frameY);
					Vector2 value109 = new Vector2(rCurrentNPC.spriteDirection * 8, -26f) * rCurrentNPC.scale;
					int num244 = rCurrentNPC.frame.Y / rCurrentNPC.frame.Height;
					int num245 = 0;
					switch (num244)
					{
					case 0:
						num245 = 6;
						break;
					case 1:
						num245 = 4;
						break;
					case 2:
						num245 = 2;
						break;
					case 3:
						num245 = 6;
						break;
					case 4:
						num245 = 8;
						break;
					case 5:
						num245 = 6;
						break;
					case 6:
						num245 = 4;
						break;
					case 7:
						num245 = 6;
						break;
					case 8:
						num245 = 2;
						break;
					}
					Microsoft.Xna.Framework.Color color50 = new Microsoft.Xna.Framework.Color(255, 255, 255, 130);
					value109.Y += num245;
					mySpriteBatch.Draw(value108, vector35 + value109 * rCurrentNPC.scale, rectangle12, color50, MathHelper.Clamp(rCurrentNPC.velocity.X * 0.1f, -(float)Math.PI / 8f, (float)Math.PI / 8f), rectangle12.Size() / 2f, rCurrentNPC.scale * 0.7f, spriteEffects ^ SpriteEffects.FlipHorizontally, 0f);
				}
				if (type == 618)
				{
					mySpriteBatch.Draw(TextureAssets.Extra[129].Value, vector35, rCurrentNPC.frame, rCurrentNPC.GetAlpha(color46), rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, spriteEffects, 0f);
				}
				break;
			}
			}
		}

		private static void DrawNPCDirect_HallowBoss(SpriteBatch mySpriteBatch, NPC rCurrentNPC, Vector2 screenPos, int typeCache, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect)
		{
			Texture2D value = TextureAssets.Npc[typeCache].Value;
			Vector2 vector = rCurrentNPC.Center - screenPos;
			bool flag = rCurrentNPC.AI_120_HallowBoss_IsInPhase2();
			int num = (int)rCurrentNPC.ai[0];
			Texture2D value2 = TextureAssets.Extra[159].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value2.Frame(1, 11, 0, (int)(rCurrentNPC.localAI[0] / 4f) % 11);
			Microsoft.Xna.Framework.Color color = rCurrentNPC.GetAlpha(npcColor);
			Texture2D value3 = TextureAssets.Extra[158].Value;
			Texture2D value4 = TextureAssets.Extra[160].Value;
			Texture2D value5 = TextureAssets.Extra[157].Value;
			DrawNPCDirect_GetHallowBossArmFrame(rCurrentNPC, out var armFrame_Count, out var armFrameToUseLeft, out var armFrameToUseRight);
			Microsoft.Xna.Framework.Rectangle rectangle2 = value3.Frame(1, armFrame_Count, 0, armFrameToUseLeft);
			Microsoft.Xna.Framework.Rectangle rectangle3 = value4.Frame(1, armFrame_Count, 0, armFrameToUseRight);
			Vector2 origin = rectangle2.Size() / 2f;
			Vector2 origin2 = rectangle3.Size() / 2f;
			int num2 = 0;
			int num3 = 0;
			if (armFrameToUseLeft == 5)
			{
				num2 = 1;
			}
			if (armFrameToUseRight == 5)
			{
				num3 = 1;
			}
			float num4 = 1f;
			int num5 = 0;
			int num6 = 0;
			float num7 = 0f;
			float scale = 0f;
			float num8 = 0f;
			if (num == 8 || num == 9)
			{
				num7 = Utils.GetLerpValue(0f, 30f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(90f, 30f, rCurrentNPC.ai[1], clamped: true);
				scale = Utils.GetLerpValue(0f, 30f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(90f, 70f, rCurrentNPC.ai[1], clamped: true);
				num8 = Utils.GetLerpValue(0f, 15f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(45f, 30f, rCurrentNPC.ai[1], clamped: true);
				color = Microsoft.Xna.Framework.Color.Lerp(color, Microsoft.Xna.Framework.Color.White, num7);
				num4 *= 1f - num8;
				num5 = 4;
				num6 = 3;
			}
			if (num == 10)
			{
				num7 = Utils.GetLerpValue(30f, 90f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(165f, 90f, rCurrentNPC.ai[1], clamped: true);
				scale = Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(180f, 120f, rCurrentNPC.ai[1], clamped: true);
				num8 = Utils.GetLerpValue(0f, 60f, rCurrentNPC.ai[1], clamped: true) * Utils.GetLerpValue(180f, 120f, rCurrentNPC.ai[1], clamped: true);
				color = Microsoft.Xna.Framework.Color.Lerp(color, Microsoft.Xna.Framework.Color.White, num7);
				num4 *= 1f - num8;
				num6 = 4;
			}
			if (num6 + num5 > 0)
			{
				for (int i = -num6; i <= num6 + num5; i++)
				{
					if (i == 0)
					{
						continue;
					}
					Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.White;
					Vector2 position = vector;
					if (num == 8 || num == 9)
					{
						float hue = ((float)i + 5f) / 10f;
						float num9 = 200f;
						float num10 = (float)timeForVisualEffects / 60f;
						Vector3 vector2 = Vector3.Transform(matrix: Matrix.CreateRotationX((num10 - 0.3f + (float)i * 0.1f) * 0.7f * ((float)Math.PI * 2f)) * Matrix.CreateRotationY((num10 - 0.8f + (float)i * 0.3f) * 0.7f * ((float)Math.PI * 2f)) * Matrix.CreateRotationZ((num10 + (float)i * 0.5f) * 0.1f * ((float)Math.PI * 2f)), position: Vector3.Forward);
						num9 += Utils.GetLerpValue(-1f, 1f, vector2.Z, clamped: true) * 150f;
						Vector2 spinningpoint = new Vector2(vector2.X, vector2.Y) * num9 * num7;
						float lerpValue = Utils.GetLerpValue(90f, 0f, rCurrentNPC.ai[1], clamped: true);
						color2 = hslToRgb(hue, 1f, MathHelper.Lerp(0.5f, 1f, lerpValue)) * 0.8f * scale;
						color2.A /= 3;
						position += spinningpoint.RotatedBy(rCurrentNPC.ai[1] / 180f * ((float)Math.PI * 2f));
					}
					if (num == 10)
					{
						if (rCurrentNPC.ai[1] >= 90f)
						{
							float num11 = (float)timeForVisualEffects / 90f;
							int num12 = i;
							if (num12 < 0)
							{
								num12++;
							}
							Vector2 value6 = (((float)num12 + 0.5f) * ((float)Math.PI / 4f) + (float)Math.PI * 2f * num11).ToRotationVector2();
							position += value6 * new Vector2(600f * num7, 150f * num7);
						}
						else
						{
							position += 200f * new Vector2(i, 0f) * num7;
						}
						color2 = Microsoft.Xna.Framework.Color.White * 0.8f * scale * num4;
						color2.A /= 3;
					}
					if (i > num6)
					{
						float lerpValue2 = Utils.GetLerpValue(30f, 70f, rCurrentNPC.ai[1], clamped: true);
						if (lerpValue2 == 0f)
						{
							continue;
						}
						position = vector + rCurrentNPC.velocity * -3f * ((float)i - 4f) * lerpValue2;
						color2 *= 1f - num8;
					}
					mySpriteBatch.Draw(value2, position, rectangle, color2, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect, 0f);
					mySpriteBatch.Draw(value5, position, rectangle, color2, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect, 0f);
					if (flag)
					{
						Texture2D value7 = TextureAssets.Extra[187].Value;
						Microsoft.Xna.Framework.Rectangle value8 = value7.Frame(1, 8, 0, (int)(rCurrentNPC.localAI[0] / 4f) % 8);
						mySpriteBatch.Draw(value7, position, value8, color2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
					}
					mySpriteBatch.Draw(value, position, rCurrentNPC.frame, color2, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
					for (int j = 0; j < 2; j++)
					{
						if (j == num2)
						{
							mySpriteBatch.Draw(value3, position, rectangle2, color2, rCurrentNPC.rotation, origin, rCurrentNPC.scale, npcSpriteEffect, 0f);
						}
						if (j == num3)
						{
							mySpriteBatch.Draw(value4, position, rectangle3, color2, rCurrentNPC.rotation, origin2, rCurrentNPC.scale, npcSpriteEffect, 0f);
						}
					}
				}
			}
			color *= num4;
			mySpriteBatch.Draw(value2, vector, rectangle, color, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect, 0f);
			if (!rCurrentNPC.IsABestiaryIconDummy)
			{
				mySpriteBatch.End();
				mySpriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, null, Transform);
			}
			DrawData value9 = new DrawData(value5, vector, rectangle, color, rCurrentNPC.rotation, rectangle.Size() / 2f, rCurrentNPC.scale * 2f, npcSpriteEffect, 0);
			GameShaders.Misc["HallowBoss"].Apply(value9);
			value9.Draw(mySpriteBatch);
			pixelShader.CurrentTechnique.Passes[0].Apply();
			if (!rCurrentNPC.IsABestiaryIconDummy)
			{
				mySpriteBatch.End();
				mySpriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			}
			float num13 = (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 0.5f) * 0.5f + 0.5f;
			Microsoft.Xna.Framework.Color color3 = hslToRgb((num13 * 0.08f + 0.6f) % 1f, 1f, 0.5f);
			color3.A = 0;
			color3 *= 0.6f;
			if (NPC.ShouldEmpressBeEnraged())
			{
				color3 = OurFavoriteColor;
				color3.A = 0;
				color3 *= 0.3f;
			}
			color3 *= num4 * rCurrentNPC.Opacity;
			if (flag)
			{
				Texture2D value10 = TextureAssets.Extra[187].Value;
				Microsoft.Xna.Framework.Rectangle value11 = value10.Frame(1, 8, 0, (int)(rCurrentNPC.localAI[0] / 4f) % 8);
				mySpriteBatch.Draw(value10, vector, value11, color, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
				for (float num14 = 0f; num14 < 1f; num14 += 0.25f)
				{
					Vector2 value12 = rCurrentNPC.rotation.ToRotationVector2().RotatedBy(num14 * ((float)Math.PI * 2f) + (float)Math.PI / 4f) * MathHelper.Lerp(2f, 8f, num13);
					mySpriteBatch.Draw(value10, vector + value12, value11, color3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
				}
			}
			mySpriteBatch.Draw(value, vector, rCurrentNPC.frame, color, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
			if (flag)
			{
				Texture2D value13 = TextureAssets.Extra[188].Value;
				for (float num15 = 0f; num15 < 1f; num15 += 0.25f)
				{
					Vector2 value14 = rCurrentNPC.rotation.ToRotationVector2().RotatedBy(num15 * ((float)Math.PI * 2f) + (float)Math.PI / 4f) * MathHelper.Lerp(2f, 8f, num13);
					mySpriteBatch.Draw(value13, vector + value14, null, color3, rCurrentNPC.rotation, halfSize, rCurrentNPC.scale, npcSpriteEffect, 0f);
				}
			}
			for (int k = 0; k < 2; k++)
			{
				if (k == num2)
				{
					mySpriteBatch.Draw(value3, vector, rectangle2, color, rCurrentNPC.rotation, origin, rCurrentNPC.scale, npcSpriteEffect, 0f);
				}
				if (k == num3)
				{
					mySpriteBatch.Draw(value4, vector, rectangle3, color, rCurrentNPC.rotation, origin2, rCurrentNPC.scale, npcSpriteEffect, 0f);
				}
			}
		}

		private static void DrawNPCDirect_GetHallowBossArmFrame(NPC rCurrentNPC, out int armFrame_Count, out int armFrameToUseLeft, out int armFrameToUseRight)
		{
			int num = 0;
			int num2 = 1;
			int num3 = 2;
			int num4 = 3;
			int num5 = 4;
			int num6 = 5;
			int num7 = 6;
			armFrame_Count = 7;
			armFrameToUseLeft = num;
			armFrameToUseRight = num;
			float num8 = rCurrentNPC.ai[1];
			int num9 = num;
			switch ((int)rCurrentNPC.ai[0])
			{
			case 6:
				armFrameToUseRight = (armFrameToUseLeft = ((num8 < 6f) ? num3 : ((num8 < 174f) ? num4 : ((!(num8 < 180f)) ? num : num3))));
				break;
			case 0:
				armFrameToUseRight = (armFrameToUseLeft = ((num8 < 106f) ? num2 : ((!(num8 < 110f)) ? num : num3)));
				break;
			case 2:
			case 11:
				num9 = (armFrameToUseLeft = ((num8 < 5f) ? num3 : ((!(num8 < 65f)) ? num3 : num4)));
				break;
			case 5:
				num9 = (armFrameToUseRight = ((num8 < 6f) ? num3 : ((!(num8 < 54f)) ? num3 : num4)));
				break;
			case 4:
			case 10:
				armFrameToUseRight = (armFrameToUseLeft = ((num8 < 6f) ? num3 : ((!(num8 < 54f)) ? num3 : num4)));
				break;
			case 8:
			case 9:
			{
				num9 = ((num8 < 10f) ? num3 : ((num8 < 20f) ? num4 : ((!(num8 < 30f)) ? num6 : num3)));
				int num13 = num9;
				int num14 = num9;
				int num15 = (int)rCurrentNPC.ai[3];
				int num16 = -1;
				if (num8 < 30f)
				{
					if (num15 == -1 * num16)
					{
						num14 = num2;
					}
					if (num15 == num16)
					{
						num13 = num2;
					}
				}
				int num17 = num6;
				int num18 = num7;
				if (num15 == num16 && num14 == num17)
				{
					num14 = num18;
				}
				if (num15 == -1 * num16 && num13 == num17)
				{
					num13 = num18;
				}
				armFrameToUseLeft = num14;
				armFrameToUseRight = num13;
				break;
			}
			case 7:
			{
				bool isExpertMode = GameModeInfo.IsExpertMode;
				int num10 = (isExpertMode ? 40 : 60);
				int num11 = 0;
				int num12 = 5;
				if (num8 < (float)(num11 + num12))
				{
					armFrameToUseLeft = num3;
					break;
				}
				num11 += num12;
				if (num8 < (float)(num11 + num10 - num12))
				{
					armFrameToUseLeft = num4;
					break;
				}
				num11 += num10 - num12;
				if (num8 < (float)(num11 + num12))
				{
					armFrameToUseLeft = num4;
					armFrameToUseRight = num3;
					break;
				}
				num11 += num12;
				if (num8 < (float)(num11 + num10 - num12))
				{
					armFrameToUseLeft = num4;
					armFrameToUseRight = num4;
					break;
				}
				num11 += num10 - num12;
				if (num8 < (float)(num11 + num10))
				{
					armFrameToUseLeft = num5;
					armFrameToUseRight = num4;
					break;
				}
				num11 += num10;
				if (num8 < (float)(num11 + num10))
				{
					armFrameToUseLeft = num5;
					armFrameToUseRight = num5;
					break;
				}
				num11 += num10;
				if (isExpertMode)
				{
					if (num8 < (float)(num11 + num12))
					{
						armFrameToUseLeft = num4;
						armFrameToUseRight = num5;
						break;
					}
					num11 += num12;
					if (num8 < (float)(num11 + num10 - num12))
					{
						armFrameToUseLeft = num2;
						armFrameToUseRight = num5;
						break;
					}
					num11 += num10 - num12;
					if (num8 < (float)(num11 + num12))
					{
						armFrameToUseLeft = num2;
						armFrameToUseRight = num4;
						break;
					}
					num11 += num12;
					if (num8 < (float)(num11 + num10 - num12))
					{
						armFrameToUseLeft = num2;
						armFrameToUseRight = num2;
						break;
					}
					num11 += num10 - num12;
				}
				if (num8 >= (float)num11)
				{
					armFrameToUseLeft = num3;
					armFrameToUseRight = num3;
				}
				break;
			}
			case 1:
			case 3:
				break;
			}
		}

		private static void DrawNPC_SlimeItem(NPC rCurrentNPC, int typeCache, Microsoft.Xna.Framework.Color npcColor, float addedRotation)
		{
			int num = (int)rCurrentNPC.ai[1];
			float num2 = 1f;
			float num3 = 22f * rCurrentNPC.scale;
			float num4 = 18f * rCurrentNPC.scale;
			instance.LoadItem(num);
			float num5 = TextureAssets.Item[num].Width();
			float num6 = TextureAssets.Item[num].Height();
			bool num7 = (int)rCurrentNPC.ai[0] == -999;
			if (num7)
			{
				num3 = 14f * rCurrentNPC.scale;
				num4 = 14f * rCurrentNPC.scale;
			}
			if (num5 > num3)
			{
				num2 *= num3 / num5;
				num5 *= num2;
				num6 *= num2;
			}
			if (num6 > num4)
			{
				num2 *= num4 / num6;
				num5 *= num2;
				num6 *= num2;
			}
			float num8 = -1f;
			float num9 = 1f;
			int num10 = rCurrentNPC.frame.Y / (TextureAssets.Npc[typeCache].Height() / npcFrameCount[typeCache]);
			num9 -= (float)num10;
			num8 += (float)(num10 * 2);
			float num11 = 0.2f;
			num11 -= 0.3f * (float)num10;
			if (num7)
			{
				num11 = 0f;
				num9 -= 6f;
				num8 -= num5 * addedRotation;
			}
			spriteBatch.Draw(TextureAssets.Item[num].Value, new Vector2(rCurrentNPC.Center.X - screenPosition.X + num8, rCurrentNPC.Center.Y - screenPosition.Y + rCurrentNPC.gfxOffY + num9), null, npcColor, num11, new Vector2(TextureAssets.Item[num].Width() / 2, TextureAssets.Item[num].Height() / 2), num2, SpriteEffects.None, 0f);
		}

		protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect, Vector2 screenPosition)
		{
			if (!beforeDraw && n.UsesPartyHat())
			{
				int num = n.frame.Y / n.frame.Height;
				int[] array = NPCID.Sets.TownNPCsFramingGroups[NPCID.Sets.NPCFramingGroup[n.type]];
				if (num >= array.Length)
				{
					num = 0;
				}
				Texture2D value = TextureAssets.Extra[72].Value;
				int num2 = 0;
				switch (n.GetPartyHatColor())
				{
				case PartyHatColor.Pink:
					num2 = 16;
					break;
				case PartyHatColor.Cyan:
					num2 = 17;
					break;
				case PartyHatColor.Purple:
					num2 = 18;
					break;
				case PartyHatColor.White:
					num2 = 19;
					break;
				}
				Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(20, 1, num2 % 20);
				rectangle.Width -= 2;
				rectangle.Height -= 2;
				int num3 = 0;
				if (n.type == 637)
				{
					num3 = 6;
					switch (num)
					{
					case 19:
					case 22:
					case 23:
					case 24:
					case 25:
					case 26:
					case 27:
						num3 -= 2;
						break;
					case 11:
					case 12:
					case 13:
					case 14:
					case 15:
						num3 += 2;
						break;
					}
				}
				if (n.type == 638)
				{
					num3 = 12;
				}
				if (n.type == 656)
				{
					num3 = 6;
					switch (num)
					{
					case 1:
					case 2:
					case 3:
						num3 -= 2;
						break;
					case 18:
					case 19:
					case 20:
					case 21:
					case 22:
					case 23:
					case 24:
					case 25:
						num3 -= 4;
						break;
					case 8:
						num3 -= 2;
						break;
					}
				}
				Vector2 vector = n.Top + new Vector2(-2 * n.spriteDirection, n.gfxOffY);
				vector.X += num3 * n.spriteDirection;
				vector.Y += array[num];
				vector.Y += NPCID.Sets.HatOffsetY[n.type];
				int num4 = 0;
				if (n.ai[0] == 5f)
				{
					num4 = -4;
					if (n.type == 38)
					{
						num4 = -8;
					}
					if (n.type == 124)
					{
						num4 = -2;
					}
					if (n.type == 550)
					{
						num4 = -4;
					}
					if (n.type == 588)
					{
						num4 = -4;
					}
					if (n.type == 108 || n.type == 178)
					{
						num4 = -6;
					}
					if (n.type == 637)
					{
						num4 = -12;
					}
				}
				vector.Y += num4;
				if (n.type == 229 && n.ai[0] == 12f)
				{
					vector.X -= n.spriteDirection * 4;
				}
				if (n.type == 550 && n.ai[0] == 5f)
				{
					vector.X += n.spriteDirection * 7;
				}
				Vector2 origin = rectangle.Size() - new Vector2(rectangle.Width / 2, 12f);
				int num5 = 0;
				switch (n.type)
				{
				case 550:
					num5 = -4;
					break;
				case 588:
					num5 = 0;
					break;
				case 227:
					num5 = -4;
					break;
				case 228:
					num5 = -2;
					break;
				case 17:
				case 18:
				case 19:
				case 20:
				case 22:
				case 124:
				case 229:
				case 353:
				case 633:
				case 637:
				case 638:
				case 656:
					num5 = -1;
					break;
				case 37:
				case 38:
				case 54:
				case 107:
				case 108:
				case 160:
				case 207:
				case 209:
					num5 = -3;
					break;
				case 178:
				case 208:
				case 369:
					num5 = 1;
					break;
				}
				vector.X += num5 * n.spriteDirection;
				vector.X += 4 * n.spriteDirection;
				spriteBatch.Draw(value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), rectangle, npcColor * n.Opacity, 0f, origin, n.scale, npcSpriteEffect, 0f);
			}
			if (NPCID.Sets.AttackType[n.type] == 1 && n.ai[0] == 12f && !beforeDraw)
			{
				if (n.type == 228 || n.type == 229 || n.type == 209)
				{
					return;
				}
				float num6 = n.ai[2];
				Vector2 value2 = OffsetsNPCOffhand[2];
				if (n.spriteDirection == 1)
				{
					value2.X *= -1f;
				}
				Vector2 vector2 = n.Bottom - value2;
				if (n.type == 22 && n.ai[2] > -0.1f)
				{
					vector2.Y += 4f;
				}
				if (n.type == 368 && hardMode && n.ai[2] > -0.1f)
				{
					vector2.Y += 4f;
				}
				if (n.type == 368 && !hardMode && n.ai[2] < -0.1f)
				{
					vector2.Y -= 8f;
				}
				float rotation = num6 * ((float)Math.PI / 2f) * (float)n.spriteDirection;
				float num7 = 1f;
				int num8 = 0;
				int num9 = 4;
				if (n.type == 19)
				{
					num8 = (hardMode ? 98 : 95);
					if (hardMode)
					{
						vector2.X -= 10 * n.direction;
						vector2.Y += 4f;
					}
				}
				else if (n.type == 22)
				{
					num8 = 39;
					num9 = 18;
				}
				else if (n.type == 178)
				{
					num8 = 434;
				}
				else if (n.type == 227)
				{
					num8 = 3350;
					num9 = 16;
					num7 = 0.85f;
				}
				else if (n.type == 368)
				{
					num8 = (hardMode ? 2223 : 2269);
					if (hardMode)
					{
						num9 = 18;
					}
					else
					{
						if (n.ai[2] < -0.1f)
						{
							num9 = 28;
						}
						num7 = 0.75f;
					}
				}
				instance.LoadItem(num8);
				Texture2D value3 = TextureAssets.Item[num8].Value;
				int num10 = (int)DrawPlayerItemPos(1f, num8).X - num9;
				Vector2 origin2 = new Vector2(-num10, value3.Height / 2);
				if (n.spriteDirection == -1)
				{
					origin2 = new Vector2(value3.Width + num10, value3.Height / 2);
				}
				spriteBatch.Draw(value3, new Vector2((int)(vector2.X - screenPosition.X), (int)(vector2.Y - screenPosition.Y)), null, npcColor, rotation, origin2, n.scale * num7, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
				if (n.type == 22 && n.frame.Y / (TextureAssets.Npc[n.type].Height() / npcFrameCount[n.type]) >= 21)
				{
					Texture2D value4 = TextureAssets.Extra[52].Value;
					Microsoft.Xna.Framework.Rectangle value5 = value4.Frame(1, 5, 0, n.frame.Y / (TextureAssets.Npc[n.type].Height() / npcFrameCount[n.type]) - 21);
					spriteBatch.Draw(value4, new Vector2(n.position.X - screenPosition.X + (float)(n.width / 2) - (float)TextureAssets.Npc[n.type].Width() * n.scale / 2f + halfSize.X * n.scale, n.position.Y - screenPosition.Y + (float)n.height - (float)TextureAssets.Npc[n.type].Height() * n.scale / (float)npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), value5, n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
				}
				else if (n.type == 368 && n.frame.Y / (TextureAssets.Npc[n.type].Height() / npcFrameCount[n.type]) >= 21)
				{
					Texture2D value6 = TextureAssets.Extra[53].Value;
					Microsoft.Xna.Framework.Rectangle value7 = value6.Frame(1, 5, 0, n.frame.Y / (TextureAssets.Npc[n.type].Height() / npcFrameCount[n.type]) - 21);
					spriteBatch.Draw(value6, new Vector2(n.position.X - screenPosition.X + (float)(n.width / 2) - (float)TextureAssets.Npc[n.type].Width() * n.scale / 2f + halfSize.X * n.scale, n.position.Y - screenPosition.Y + (float)n.height - (float)TextureAssets.Npc[n.type].Height() * n.scale / (float)npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), value7, n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
				}
			}
			if (NPCID.Sets.AttackType[n.type] == 2 && n.ai[0] == 14f && !beforeDraw)
			{
				Texture2D value8 = TextureAssets.Extra[51].Value;
				Vector2 vector3 = n.Bottom + new Vector2(0f, n.gfxOffY + 4f);
				Microsoft.Xna.Framework.Rectangle rectangle2 = value8.Frame(1, 4, 0, (int)n.frameCounter % 48 / 12);
				Vector2 origin3 = rectangle2.Size() * new Vector2(0.5f, 1f);
				spriteBatch.Draw(value8, new Vector2((int)(vector3.X - screenPosition.X), (int)(vector3.Y - screenPosition.Y)), rectangle2, NPCID.Sets.MagicAuraColor[n.type], 0f, origin3, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
			}
			if (NPCID.Sets.AttackType[n.type] == 3 && n.ai[0] == 15f)
			{
				instance.LoadItem(4);
				Texture2D value9 = TextureAssets.Item[4].Value;
				int num11 = 32;
				float scaleFactor = 0f;
				Vector2 zero = Vector2.Zero;
				if (n.type == 207)
				{
					instance.LoadItem(3349);
					value9 = TextureAssets.Item[3349].Value;
					scaleFactor = 0.15f;
					if (beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				else if (n.type == 353)
				{
					instance.LoadItem(3352);
					value9 = TextureAssets.Item[3352].Value;
					scaleFactor = 0.15f;
					if (!beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				else if (n.type == 441)
				{
					instance.LoadItem(3351);
					value9 = TextureAssets.Item[3351].Value;
					num11 = 28;
					scaleFactor = 0.1f;
					if (!beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num11, num11);
				Vector2 vector4 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
				Vector2 origin4 = value9.Size() * new Vector2((n.spriteDirection != 1) ? 1 : 0, 1f);
				spriteBatch.Draw(value9, new Vector2((int)(vector4.X - screenPosition.X), (int)(vector4.Y - screenPosition.Y)), null, n.GetAlpha(npcColor), swingStats.Item2, origin4, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
			}
			if (n.type != 550 || n.ai[0] != 18f || beforeDraw)
			{
				return;
			}
			instance.LoadItem(353);
			Texture2D value10 = TextureAssets.Item[353].Value;
			int num12 = 32;
			float scaleFactor2 = 0.15f;
			Vector2 zero2 = Vector2.Zero;
			Microsoft.Xna.Framework.Rectangle rectangle3 = value10.Frame(1, 3, 0, 1);
			int num13 = (int)n.ai[2];
			if (num13 >= 0 && num13 < 255)
			{
				Player player = Main.player[num13];
				bool flag = player.HeldItem.type == 353 && player.direction == Math.Sign(n.Center.X - player.Center.X);
				float num14 = player.Hitbox.Distance(n.Center);
				float num15 = n.localAI[3];
				if (num14 < 46f && flag)
				{
					n.localAI[3] = 1f;
					if (n.localAI[3] != num15)
					{
						Vector2 value11 = n.Center + new Vector2(n.spriteDirection * 30, -6f);
						Vector2 value12 = new Vector2(10f, 10f);
						for (int i = 0; i < 30; i++)
						{
							Dust obj = Dust.NewDustDirect(value11 - value12 / 2f, (int)value12.X, (int)value12.Y, 4, 0f, 0f, 50, new Microsoft.Xna.Framework.Color(245, 200, 30, 155), 0.7f);
							obj.noGravity = true;
							obj.velocity *= 1f;
							Dust.NewDustDirect(value11 - value12 / 2f, (int)value12.X, (int)value12.Y, 4, 0f, 0f, 50, new Microsoft.Xna.Framework.Color(245, 200, 30, 155), 0.6f).velocity *= 2f;
						}
					}
				}
				else if (n.localAI[3] == 1f)
				{
					n.localAI[3] = 2f;
				}
			}
			Tuple<Vector2, float> swingStats2 = n.GetSwingStats(40, 12, n.spriteDirection, num12, num12);
			Vector2 vector5 = swingStats2.Item1 + (swingStats2.Item1 - n.Center) * scaleFactor2 + zero2;
			Vector2 origin5 = rectangle3.Size() * new Vector2((n.spriteDirection != 1) ? 1 : 0, 1f);
			spriteBatch.Draw(value10, new Vector2((int)(vector5.X - screenPosition.X), (int)(vector5.Y - screenPosition.Y)), rectangle3, n.GetAlpha(npcColor), swingStats2.Item2, origin5, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
		}

		public void DrawProj(int i)
		{
			PrepareDrawnEntityDrawing(Main.projectile[i], GetProjectileDesiredShader(i));
			int num = ProjectileID.Sets.DrawScreenCheckFluff[Main.projectile[i].type];
			if (!new Microsoft.Xna.Framework.Rectangle((int)Camera.ScaledPosition.X - num, (int)Camera.ScaledPosition.Y - num, (int)Camera.ScaledSize.X + num * 2, (int)Camera.ScaledSize.Y + num * 2).Intersects(Main.projectile[i].Hitbox))
			{
				return;
			}
			Projectile projectile = Main.projectile[i];
			if (projectile.type == 734)
			{
				VoidLensHelper voidLensHelper = new VoidLensHelper(projectile);
				_voidLensData.Clear();
				int selectionMode = TryInteractingWithVoidLens(projectile);
				voidLensHelper.DrawToDrawData(_voidLensData, selectionMode);
				foreach (DrawData voidLensDatum in _voidLensData)
				{
					EntitySpriteDraw(voidLensDatum);
				}
				return;
			}
			float polePosX = 0f;
			float polePosY = 0f;
			LoadProjectile(projectile.type);
			Vector2 mountedCenter = Main.player[projectile.owner].MountedCenter;
			if (projectile.aiStyle == 99)
			{
				Vector2 vector = mountedCenter;
				vector.Y += Main.player[projectile.owner].gfxOffY;
				float num2 = projectile.Center.X - vector.X;
				float num3 = projectile.Center.Y - vector.Y;
				Math.Sqrt(num2 * num2 + num3 * num3);
				float num4 = (float)Math.Atan2(num3, num2) - 1.57f;
				if (!projectile.counterweight)
				{
					int num5 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < Main.player[projectile.owner].position.X + (float)(Main.player[projectile.owner].width / 2))
					{
						num5 = 1;
					}
					num5 *= -1;
					Main.player[projectile.owner].itemRotation = (float)Math.Atan2(num3 * (float)num5, num2 * (float)num5);
				}
				bool flag = true;
				if (num2 == 0f && num3 == 0f)
				{
					flag = false;
				}
				else
				{
					float num6 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
					num6 = 12f / num6;
					num2 *= num6;
					num3 *= num6;
					vector.X -= num2 * 0.1f;
					vector.Y -= num3 * 0.1f;
					num2 = projectile.position.X + (float)projectile.width * 0.5f - vector.X;
					num3 = projectile.position.Y + (float)projectile.height * 0.5f - vector.Y;
				}
				while (flag)
				{
					float num7 = 12f;
					float num8 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
					float num9 = num8;
					if (float.IsNaN(num8) || float.IsNaN(num9))
					{
						flag = false;
						continue;
					}
					if (num8 < 20f)
					{
						num7 = num8 - 8f;
						flag = false;
					}
					num8 = 12f / num8;
					num2 *= num8;
					num3 *= num8;
					vector.X += num2;
					vector.Y += num3;
					num2 = projectile.position.X + (float)projectile.width * 0.5f - vector.X;
					num3 = projectile.position.Y + (float)projectile.height * 0.1f - vector.Y;
					if (num9 > 12f)
					{
						float num10 = 0.3f;
						float num11 = Math.Abs(projectile.velocity.X) + Math.Abs(projectile.velocity.Y);
						if (num11 > 16f)
						{
							num11 = 16f;
						}
						num11 = 1f - num11 / 16f;
						num10 *= num11;
						num11 = num9 / 80f;
						if (num11 > 1f)
						{
							num11 = 1f;
						}
						num10 *= num11;
						if (num10 < 0f)
						{
							num10 = 0f;
						}
						num10 *= num11;
						num10 *= 0.5f;
						if (num3 > 0f)
						{
							num3 *= 1f + num10;
							num2 *= 1f - num10;
						}
						else
						{
							num11 = Math.Abs(projectile.velocity.X) / 3f;
							if (num11 > 1f)
							{
								num11 = 1f;
							}
							num11 -= 0.5f;
							num10 *= num11;
							if (num10 > 0f)
							{
								num10 *= 2f;
							}
							num3 *= 1f + num10;
							num2 *= 1f - num10;
						}
					}
					num4 = (float)Math.Atan2(num3, num2) - 1.57f;
					Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
					white.A = (byte)((float)(int)white.A * 0.4f);
					white = TryApplyingPlayerStringColor(Main.player[projectile.owner].stringColor, white);
					float num12 = 0.5f;
					white = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f), white);
					EntitySpriteDraw(color: new Microsoft.Xna.Framework.Color((byte)((float)(int)white.R * num12), (byte)((float)(int)white.G * num12), (byte)((float)(int)white.B * num12), (byte)((float)(int)white.A * num12)), texture: TextureAssets.FishingLine.Value, position: new Vector2(vector.X - screenPosition.X + (float)TextureAssets.FishingLine.Width() * 0.5f, vector.Y - screenPosition.Y + (float)TextureAssets.FishingLine.Height() * 0.5f) - new Vector2(6f, 0f), sourceRectangle: new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.FishingLine.Width(), (int)num7), rotation: num4, origin: new Vector2((float)TextureAssets.FishingLine.Width() * 0.5f, 0f), scale: 1f, effects: SpriteEffects.None, worthless: 0);
				}
			}
			else
			{
				if (projectile.aiStyle == 160)
				{
					DrawKite(projectile);
					return;
				}
				if (projectile.aiStyle == 165)
				{
					DrawWhip(projectile);
					return;
				}
			}
			if (projectile.type == 879 || projectile.type == 877 || projectile.type == 878)
			{
				projectile.position.Y -= Main.player[projectile.owner].gfxOffY;
			}
			if (projectile.aiStyle == 174)
			{
				DrawMultisegmentPet(projectile);
				return;
			}
			if (projectile.type == 34)
			{
				default(FlameLashDrawer).Draw(projectile);
			}
			if (projectile.type == 16)
			{
				default(MagicMissileDrawer).Draw(projectile);
			}
			if (projectile.type == 933)
			{
				default(FinalFractalHelper).Draw(projectile);
			}
			if (projectile.type == 79)
			{
				default(RainbowRodDrawer).Draw(projectile);
			}
			if (projectile.type == 919)
			{
				DrawProj_FairyQueenLance(projectile);
				return;
			}
			if (projectile.type == 932)
			{
				DrawProj_FairyQueenRangedItemShot(projectile);
				return;
			}
			if (projectile.type == 946)
			{
				EmpressBladeDrawer empressBladeDrawer = default(EmpressBladeDrawer);
				float num13 = GlobalTimeWrappedHourly % 3f / 3f;
				Player player = Main.player[projectile.owner];
				float num14 = MathHelper.Max(1f, player.maxMinions);
				float num15 = (float)projectile.identity % num14 / num14 + num13;
				Microsoft.Xna.Framework.Color fairyQueenWeaponsColor = projectile.GetFairyQueenWeaponsColor(0f, 0f, num15 % 1f);
				Microsoft.Xna.Framework.Color fairyQueenWeaponsColor2 = projectile.GetFairyQueenWeaponsColor(0f, 0f, (num15 + 0.5f) % 1f);
				empressBladeDrawer.ColorStart = fairyQueenWeaponsColor;
				empressBladeDrawer.ColorEnd = fairyQueenWeaponsColor2;
				empressBladeDrawer.Draw(projectile);
				DrawProj_EmpressBlade(projectile, num15);
				return;
			}
			if (projectile.type == 927)
			{
				DrawProj_PiercingStarlight(projectile);
				return;
			}
			if (projectile.type == 917)
			{
				DrawProj_CoolWhipMinion(projectile);
				return;
			}
			if (projectile.type == 923)
			{
				Vector2 position = projectile.Center - screenPosition;
				Texture2D value = TextureAssets.Projectile[projectile.type].Value;
				Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, 2);
				Microsoft.Xna.Framework.Rectangle value2 = value.Frame(1, 2, 0, 1);
				Vector2 origin = rectangle.Size() * new Vector2(0.03f, 0.5f);
				float num16 = 180f;
				float num17 = projectile.ai[0] / ((float)Math.PI * 2f) + projectile.localAI[0] / num16;
				float scale = Utils.GetLerpValue(0f, 30f, projectile.localAI[0], clamped: true) * Utils.GetLerpValue(num16, num16 - 30f, projectile.localAI[0], clamped: true);
				Microsoft.Xna.Framework.Color value3 = hslToRgb(num17 % 1f, 1f, 1f) * scale;
				float lerpValue = Utils.GetLerpValue(40f, 60f, projectile.localAI[0], clamped: true);
				Vector2 vector2 = new Vector2(1f, MathHelper.Lerp(0.25f, 0.7f, lerpValue)) * projectile.scale;
				Microsoft.Xna.Framework.Color value4 = hslToRgb((num17 + 0.3f) % 1f, 1f, MathHelper.Lerp(0.3f, 0.66f, lerpValue)) * scale;
				if (NPC.ShouldEmpressBeEnraged())
				{
					value4 = OurFavoriteColor * scale;
				}
				value4 = Microsoft.Xna.Framework.Color.Lerp(value4, Microsoft.Xna.Framework.Color.White, 0.1f);
				value4.A /= 2;
				spriteBatch.Draw(value, position, value2, value4, projectile.rotation, origin, vector2 * 1.2f, SpriteEffects.None, 0f);
				Microsoft.Xna.Framework.Color value5 = hslToRgb((num17 + 0.15f) % 1f, 1f, MathHelper.Lerp(0.3f, 0.5f, lerpValue)) * scale;
				if (NPC.ShouldEmpressBeEnraged())
				{
					value5 = OurFavoriteColor * scale;
				}
				value5 = Microsoft.Xna.Framework.Color.Lerp(value5, Microsoft.Xna.Framework.Color.White, 0.1f);
				value5.A /= 2;
				spriteBatch.Draw(value, position, value2, value5, projectile.rotation, origin, vector2 * 1.1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(value, position, rectangle, value3 * 0.5f, projectile.rotation, origin, vector2, SpriteEffects.None, 0f);
				spriteBatch.Draw(value, position, value2, value3 * lerpValue, projectile.rotation, origin, vector2, SpriteEffects.None, 0f);
				return;
			}
			if (projectile.type == 888)
			{
				DrawTwinsPet(projectile);
				return;
			}
			if (projectile.type == 874)
			{
				DrawMurderAurora(projectile);
				return;
			}
			if (projectile.type == 871)
			{
				Texture2D value6 = TextureAssets.Projectile[projectile.type].Value;
				Microsoft.Xna.Framework.Rectangle rectangle2 = value6.Frame(1, 4);
				Vector2 origin2 = rectangle2.Size() / 2f;
				Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.White * projectile.Opacity;
				SpriteEffects effects = SpriteEffects.None;
				color2.A /= 2;
				Microsoft.Xna.Framework.Color color3 = projectile.AI_171_GetColor();
				color3.A /= 2;
				float num18 = projectile.scale * 1.3f;
				float num19 = 1f;
				int num20 = projectile.AI_172_GetPelletStormsCount();
				bool flag2 = false;
				float num21 = float.PositiveInfinity;
				for (int j = 0; j < num20; j++)
				{
					Projectile.HallowBossPelletStormInfo hallowBossPelletStormInfo = projectile.AI_172_GetPelletStormInfo(j);
					for (int k = 0; k < hallowBossPelletStormInfo.BulletsInStorm; k++)
					{
						float bulletProgress = hallowBossPelletStormInfo.GetBulletProgress(k);
						if (bulletProgress < num21)
						{
							num21 = bulletProgress;
						}
						if (hallowBossPelletStormInfo.IsValid(k))
						{
							if (j == num20 - 1 && bulletProgress > 0f)
							{
								flag2 = true;
							}
							rectangle2 = value6.Frame(1, 4, 0, (int)((double)(k + j * 6) + timeForVisualEffects / 4.0) % 4);
							float scale2 = Utils.GetLerpValue(0f, 0.1f, bulletProgress, clamped: true) * Utils.GetLerpValue(1f, 0.8f, bulletProgress, clamped: true);
							Vector2 bulletPosition = hallowBossPelletStormInfo.GetBulletPosition(k, projectile.Center);
							EntitySpriteDraw(value6, bulletPosition - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle2, color3 * scale2, projectile.rotation, origin2, num18 * num19, effects, 0);
							EntitySpriteDraw(value6, bulletPosition - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle2, color2 * scale2, projectile.rotation, origin2, projectile.scale * num19, effects, 0);
						}
					}
				}
				if (!flag2 && num21 <= 1f)
				{
					EntitySpriteDraw(value6, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle2, color3, projectile.rotation, origin2, num18, effects, 0);
					EntitySpriteDraw(value6, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle2, color2, projectile.rotation, origin2, projectile.scale, effects, 0);
				}
				return;
			}
			if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle != 0)
			{
				DrawProj_FishingLine(projectile, polePosX, polePosY, mountedCenter);
			}
			else if (projectile.type == 32)
			{
				Vector2 vector3 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num22 = mountedCenter.X - vector3.X;
				float num23 = mountedCenter.Y - vector3.Y;
				float rotation = (float)Math.Atan2(num23, num22) - 1.57f;
				bool flag3 = true;
				if (num22 == 0f && num23 == 0f)
				{
					flag3 = false;
				}
				else
				{
					float num24 = (float)Math.Sqrt(num22 * num22 + num23 * num23);
					num24 = 8f / num24;
					num22 *= num24;
					num23 *= num24;
					vector3.X -= num22;
					vector3.Y -= num23;
					num22 = mountedCenter.X - vector3.X;
					num23 = mountedCenter.Y - vector3.Y;
				}
				while (flag3)
				{
					float num25 = (float)Math.Sqrt(num22 * num22 + num23 * num23);
					if (num25 < 28f)
					{
						flag3 = false;
						continue;
					}
					if (float.IsNaN(num25))
					{
						flag3 = false;
						continue;
					}
					num25 = 28f / num25;
					num22 *= num25;
					num23 *= num25;
					vector3.X += num22;
					vector3.Y += num23;
					num22 = mountedCenter.X - vector3.X;
					num23 = mountedCenter.Y - vector3.Y;
					Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)vector3.X / 16, (int)(vector3.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain5.Value, new Vector2(vector3.X - screenPosition.X, vector3.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain5.Width(), TextureAssets.Chain5.Height()), color4, rotation, new Vector2((float)TextureAssets.Chain5.Width() * 0.5f, (float)TextureAssets.Chain5.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 73)
			{
				Vector2 vector4 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num26 = mountedCenter.X - vector4.X;
				float num27 = mountedCenter.Y - vector4.Y;
				float rotation2 = (float)Math.Atan2(num27, num26) - 1.57f;
				bool flag4 = true;
				while (flag4)
				{
					float num28 = (float)Math.Sqrt(num26 * num26 + num27 * num27);
					if (num28 < 25f)
					{
						flag4 = false;
						continue;
					}
					if (float.IsNaN(num28))
					{
						flag4 = false;
						continue;
					}
					num28 = 12f / num28;
					num26 *= num28;
					num27 *= num28;
					vector4.X += num26;
					vector4.Y += num27;
					num26 = mountedCenter.X - vector4.X;
					num27 = mountedCenter.Y - vector4.Y;
					Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)vector4.X / 16, (int)(vector4.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain8.Value, new Vector2(vector4.X - screenPosition.X, vector4.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain8.Width(), TextureAssets.Chain8.Height()), color5, rotation2, new Vector2((float)TextureAssets.Chain8.Width() * 0.5f, (float)TextureAssets.Chain8.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 186)
			{
				Vector2 vector5 = new Vector2(projectile.localAI[0], projectile.localAI[1]);
				float num29 = Vector2.Distance(projectile.Center, vector5) - projectile.velocity.Length();
				float num30 = (float)TextureAssets.Chain17.Height() - num29;
				if (num29 > 0f && projectile.ai[1] > 0f)
				{
					Microsoft.Xna.Framework.Color color6 = Lighting.GetColor((int)projectile.position.X / 16, (int)projectile.position.Y / 16);
					EntitySpriteDraw(TextureAssets.Chain17.Value, vector5 - screenPosition, new Microsoft.Xna.Framework.Rectangle(0, (int)num30, TextureAssets.Chain17.Width(), (int)num29), color6, projectile.rotation, new Vector2(TextureAssets.Chain17.Width() / 2, 0f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 74)
			{
				Vector2 vector6 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num31 = mountedCenter.X - vector6.X;
				float num32 = mountedCenter.Y - vector6.Y;
				float rotation3 = (float)Math.Atan2(num32, num31) - 1.57f;
				bool flag5 = true;
				while (flag5)
				{
					float num33 = (float)Math.Sqrt(num31 * num31 + num32 * num32);
					if (num33 < 25f)
					{
						flag5 = false;
						continue;
					}
					if (float.IsNaN(num33))
					{
						flag5 = false;
						continue;
					}
					num33 = 12f / num33;
					num31 *= num33;
					num32 *= num33;
					vector6.X += num31;
					vector6.Y += num32;
					num31 = mountedCenter.X - vector6.X;
					num32 = mountedCenter.Y - vector6.Y;
					Microsoft.Xna.Framework.Color color7 = Lighting.GetColor((int)vector6.X / 16, (int)(vector6.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain9.Value, new Vector2(vector6.X - screenPosition.X, vector6.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain8.Width(), TextureAssets.Chain8.Height()), color7, rotation3, new Vector2((float)TextureAssets.Chain8.Width() * 0.5f, (float)TextureAssets.Chain8.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 171)
			{
				Vector2 vector7 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num34 = 0f - projectile.velocity.X;
				float num35 = 0f - projectile.velocity.Y;
				float num36 = 1f;
				if (projectile.ai[0] <= 17f)
				{
					num36 = projectile.ai[0] / 17f;
				}
				int num37 = (int)(30f * num36);
				float num38 = 1f;
				if (projectile.ai[0] <= 30f)
				{
					num38 = projectile.ai[0] / 30f;
				}
				float num39 = 0.4f * num38;
				float num40 = num39;
				num35 += num40;
				Vector2[] array = new Vector2[num37];
				float[] array2 = new float[num37];
				for (int l = 0; l < num37; l++)
				{
					float num41 = (float)Math.Sqrt(num34 * num34 + num35 * num35);
					float num42 = 5.6f;
					if (Math.Abs(num34) + Math.Abs(num35) < 1f)
					{
						num42 *= Math.Abs(num34) + Math.Abs(num35) / 1f;
					}
					num41 = num42 / num41;
					num34 *= num41;
					num35 *= num41;
					float num43 = (float)Math.Atan2(num35, num34) - 1.57f;
					array[l].X = vector7.X;
					array[l].Y = vector7.Y;
					array2[l] = num43;
					vector7.X += num34;
					vector7.Y += num35;
					num34 = 0f - projectile.velocity.X;
					num35 = 0f - projectile.velocity.Y;
					num40 += num39;
					num35 += num40;
				}
				for (int num44 = --num37; num44 >= 0; num44--)
				{
					vector7.X = array[num44].X;
					vector7.Y = array[num44].Y;
					float rotation4 = array2[num44];
					Microsoft.Xna.Framework.Color color8 = Lighting.GetColor((int)vector7.X / 16, (int)(vector7.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain16.Value, new Vector2(vector7.X - screenPosition.X, vector7.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain16.Width(), TextureAssets.Chain16.Height()), color8, rotation4, new Vector2((float)TextureAssets.Chain16.Width() * 0.5f, (float)TextureAssets.Chain16.Height() * 0.5f), 0.8f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 475)
			{
				Vector2 vector8 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num45 = 0f - projectile.velocity.X;
				float num46 = 0f - projectile.velocity.Y;
				float num47 = 1f;
				if (projectile.ai[0] <= 17f)
				{
					num47 = projectile.ai[0] / 17f;
				}
				int num48 = (int)(30f * num47);
				float num49 = 1f;
				if (projectile.ai[0] <= 30f)
				{
					num49 = projectile.ai[0] / 30f;
				}
				float num50 = 0.4f * num49;
				float num51 = num50;
				num46 += num51;
				Vector2[] array3 = new Vector2[num48];
				float[] array4 = new float[num48];
				for (int m = 0; m < num48; m++)
				{
					float num52 = (float)Math.Sqrt(num45 * num45 + num46 * num46);
					float num53 = 5.6f;
					if (Math.Abs(num45) + Math.Abs(num46) < 1f)
					{
						num53 *= Math.Abs(num45) + Math.Abs(num46) / 1f;
					}
					num52 = num53 / num52;
					num45 *= num52;
					num46 *= num52;
					float num54 = (float)Math.Atan2(num46, num45) - 1.57f;
					array3[m].X = vector8.X;
					array3[m].Y = vector8.Y;
					array4[m] = num54;
					vector8.X += num45;
					vector8.Y += num46;
					num45 = 0f - projectile.velocity.X;
					num46 = 0f - projectile.velocity.Y;
					num51 += num50;
					num46 += num51;
				}
				int num55 = 0;
				for (int num56 = --num48; num56 >= 0; num56--)
				{
					vector8.X = array3[num56].X;
					vector8.Y = array3[num56].Y;
					float rotation5 = array4[num56];
					Microsoft.Xna.Framework.Color color9 = Lighting.GetColor((int)vector8.X / 16, (int)(vector8.Y / 16f));
					if (num55 % 2 == 0)
					{
						EntitySpriteDraw(TextureAssets.Chain38.Value, new Vector2(vector8.X - screenPosition.X, vector8.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain38.Width(), TextureAssets.Chain38.Height()), color9, rotation5, new Vector2((float)TextureAssets.Chain38.Width() * 0.5f, (float)TextureAssets.Chain38.Height() * 0.5f), 0.8f, SpriteEffects.None, 0);
					}
					else
					{
						EntitySpriteDraw(TextureAssets.Chain39.Value, new Vector2(vector8.X - screenPosition.X, vector8.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain39.Width(), TextureAssets.Chain39.Height()), color9, rotation5, new Vector2((float)TextureAssets.Chain39.Width() * 0.5f, (float)TextureAssets.Chain39.Height() * 0.5f), 0.8f, SpriteEffects.None, 0);
					}
					num55++;
				}
			}
			else if (projectile.type == 505 || projectile.type == 506)
			{
				Vector2 vector9 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num57 = 0f - projectile.velocity.X;
				float num58 = 0f - projectile.velocity.Y;
				float num59 = 1f;
				if (projectile.ai[0] <= 17f)
				{
					num59 = projectile.ai[0] / 17f;
				}
				int num60 = (int)(30f * num59);
				float num61 = 1f;
				if (projectile.ai[0] <= 30f)
				{
					num61 = projectile.ai[0] / 30f;
				}
				float num62 = 0.4f * num61;
				float num63 = num62;
				num58 += num63;
				Vector2[] array5 = new Vector2[num60];
				float[] array6 = new float[num60];
				for (int n = 0; n < num60; n++)
				{
					float num64 = (float)Math.Sqrt(num57 * num57 + num58 * num58);
					float num65 = 5.6f;
					if (Math.Abs(num57) + Math.Abs(num58) < 1f)
					{
						num65 *= Math.Abs(num57) + Math.Abs(num58) / 1f;
					}
					num64 = num65 / num64;
					num57 *= num64;
					num58 *= num64;
					float num66 = (float)Math.Atan2(num58, num57) - 1.57f;
					array5[n].X = vector9.X;
					array5[n].Y = vector9.Y;
					array6[n] = num66;
					vector9.X += num57;
					vector9.Y += num58;
					num57 = 0f - projectile.velocity.X;
					num58 = 0f - projectile.velocity.Y;
					num63 += num62;
					num58 += num63;
				}
				int num67 = 0;
				for (int num68 = --num60; num68 >= 0; num68--)
				{
					vector9.X = array5[num68].X;
					vector9.Y = array5[num68].Y;
					float rotation6 = array6[num68];
					Microsoft.Xna.Framework.Color color10 = Lighting.GetColor((int)vector9.X / 16, (int)(vector9.Y / 16f));
					int num69 = 4;
					if (projectile.type == 506)
					{
						num69 = 6;
					}
					num69 += num67 % 2;
					EntitySpriteDraw(TextureAssets.Chains[num69].Value, new Vector2(vector9.X - screenPosition.X, vector9.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chains[num69].Width(), TextureAssets.Chains[num69].Height()), color10, rotation6, new Vector2((float)TextureAssets.Chains[num69].Width() * 0.5f, (float)TextureAssets.Chains[num69].Height() * 0.5f), 0.8f, SpriteEffects.None, 0);
					num67++;
				}
			}
			else if (projectile.type == 165)
			{
				Vector2 vector10 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num70 = mountedCenter.X - vector10.X;
				float num71 = mountedCenter.Y - vector10.Y;
				float rotation7 = (float)Math.Atan2(num71, num70) - 1.57f;
				bool flag6 = true;
				while (flag6)
				{
					float num72 = (float)Math.Sqrt(num70 * num70 + num71 * num71);
					if (num72 < 25f)
					{
						flag6 = false;
						continue;
					}
					if (float.IsNaN(num72))
					{
						flag6 = false;
						continue;
					}
					num72 = 24f / num72;
					num70 *= num72;
					num71 *= num72;
					vector10.X += num70;
					vector10.Y += num71;
					num70 = mountedCenter.X - vector10.X;
					num71 = mountedCenter.Y - vector10.Y;
					Microsoft.Xna.Framework.Color color11 = Lighting.GetColor((int)vector10.X / 16, (int)(vector10.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain15.Value, new Vector2(vector10.X - screenPosition.X, vector10.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain15.Width(), TextureAssets.Chain15.Height()), color11, rotation7, new Vector2((float)TextureAssets.Chain15.Width() * 0.5f, (float)TextureAssets.Chain15.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type >= 230 && projectile.type <= 235)
			{
				int num73 = projectile.type - 229;
				Vector2 vector11 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num74 = mountedCenter.X - vector11.X;
				float num75 = mountedCenter.Y - vector11.Y;
				float rotation8 = (float)Math.Atan2(num75, num74) - 1.57f;
				bool flag7 = true;
				while (flag7)
				{
					float num76 = (float)Math.Sqrt(num74 * num74 + num75 * num75);
					if (num76 < 25f)
					{
						flag7 = false;
						continue;
					}
					if (float.IsNaN(num76))
					{
						flag7 = false;
						continue;
					}
					num76 = (float)TextureAssets.GemChain[num73].Height() / num76;
					num74 *= num76;
					num75 *= num76;
					vector11.X += num74;
					vector11.Y += num75;
					num74 = mountedCenter.X - vector11.X;
					num75 = mountedCenter.Y - vector11.Y;
					Microsoft.Xna.Framework.Color color12 = Lighting.GetColor((int)vector11.X / 16, (int)(vector11.Y / 16f));
					EntitySpriteDraw(TextureAssets.GemChain[num73].Value, new Vector2(vector11.X - screenPosition.X, vector11.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.GemChain[num73].Width(), TextureAssets.GemChain[num73].Height()), color12, rotation8, new Vector2((float)TextureAssets.GemChain[num73].Width() * 0.5f, (float)TextureAssets.GemChain[num73].Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 753)
			{
				Vector2 vector12 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num77 = mountedCenter.X - vector12.X;
				float num78 = mountedCenter.Y - vector12.Y;
				float rotation9 = (float)Math.Atan2(num78, num77) - 1.57f;
				bool flag8 = true;
				Texture2D value7 = TextureAssets.Extra[95].Value;
				while (flag8)
				{
					float num79 = (float)Math.Sqrt(num77 * num77 + num78 * num78);
					if (num79 < 25f)
					{
						flag8 = false;
						continue;
					}
					if (float.IsNaN(num79))
					{
						flag8 = false;
						continue;
					}
					num79 = (float)value7.Height / num79;
					num77 *= num79;
					num78 *= num79;
					vector12.X += num77;
					vector12.Y += num78;
					num77 = mountedCenter.X - vector12.X;
					num78 = mountedCenter.Y - vector12.Y;
					Microsoft.Xna.Framework.Color color13 = Lighting.GetColor((int)vector12.X / 16, (int)(vector12.Y / 16f));
					EntitySpriteDraw(value7, new Vector2(vector12.X - screenPosition.X, vector12.Y - screenPosition.Y), null, color13, rotation9, value7.Size() / 2f, 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 865)
			{
				Vector2 vector13 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num80 = mountedCenter.X - vector13.X;
				float num81 = mountedCenter.Y - vector13.Y;
				float rotation10 = (float)Math.Atan2(num81, num80) - 1.57f;
				bool flag9 = true;
				bool flag10 = true;
				Texture2D value8 = TextureAssets.Extra[154].Value;
				while (flag9)
				{
					float num82 = (float)Math.Sqrt(num80 * num80 + num81 * num81);
					if (num82 < 25f)
					{
						flag9 = false;
						continue;
					}
					if (float.IsNaN(num82))
					{
						flag9 = false;
						continue;
					}
					num82 = (float)value8.Height / num82;
					num80 *= num82;
					num81 *= num82;
					vector13.X += num80;
					vector13.Y += num81;
					num80 = mountedCenter.X - vector13.X;
					num81 = mountedCenter.Y - vector13.Y;
					if (!flag10)
					{
						Microsoft.Xna.Framework.Color color14 = Lighting.GetColor((int)vector13.X / 16, (int)(vector13.Y / 16f));
						EntitySpriteDraw(value8, new Vector2(vector13.X - screenPosition.X, vector13.Y - screenPosition.Y), null, color14, rotation10, value8.Size() / 2f, 1f, SpriteEffects.None, 0);
					}
					flag10 = false;
				}
			}
			else if (projectile.type == 935)
			{
				Vector2 vector14 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num83 = mountedCenter.X - vector14.X;
				float num84 = mountedCenter.Y - vector14.Y;
				float rotation11 = (float)Math.Atan2(num84, num83) - 1.57f;
				bool flag11 = true;
				bool flag12 = true;
				Texture2D value9 = TextureAssets.Extra[208].Value;
				while (flag11)
				{
					float num85 = (float)Math.Sqrt(num83 * num83 + num84 * num84);
					if (num85 < 8f)
					{
						flag11 = false;
						continue;
					}
					if (float.IsNaN(num85))
					{
						flag11 = false;
						continue;
					}
					num85 = (float)value9.Height / num85;
					num83 *= num85;
					num84 *= num85;
					vector14.X += num83;
					vector14.Y += num84;
					num83 = mountedCenter.X - vector14.X;
					num84 = mountedCenter.Y - vector14.Y;
					if (!flag12)
					{
						Microsoft.Xna.Framework.Color color15 = Lighting.GetColor((int)vector14.X / 16, (int)(vector14.Y / 16f));
						EntitySpriteDraw(value9, new Vector2(vector14.X - screenPosition.X, vector14.Y - screenPosition.Y), null, color15, rotation11, value9.Size() / 2f, 1f, SpriteEffects.None, 0);
					}
					flag12 = false;
				}
			}
			else if (projectile.type == 256)
			{
				Vector2 vector15 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num86 = mountedCenter.X - vector15.X;
				float num87 = mountedCenter.Y - vector15.Y;
				float num88 = (float)Math.Atan2(num87, num86) - 1.57f;
				bool flag13 = true;
				while (flag13)
				{
					float num89 = (float)Math.Sqrt(num86 * num86 + num87 * num87);
					if (num89 < 26f)
					{
						flag13 = false;
						continue;
					}
					if (float.IsNaN(num89))
					{
						flag13 = false;
						continue;
					}
					num89 = 26f / num89;
					num86 *= num89;
					num87 *= num89;
					vector15.X += num86;
					vector15.Y += num87;
					num86 = Main.player[projectile.owner].position.X + (float)(Main.player[projectile.owner].width / 2) - vector15.X;
					num87 = Main.player[projectile.owner].position.Y + (float)(Main.player[projectile.owner].height / 2) - vector15.Y;
					Microsoft.Xna.Framework.Color color16 = Lighting.GetColor((int)vector15.X / 16, (int)(vector15.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain20.Value, new Vector2(vector15.X - screenPosition.X, vector15.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain20.Width(), TextureAssets.Chain20.Height()), color16, num88 - 0.785f, new Vector2((float)TextureAssets.Chain20.Width() * 0.5f, (float)TextureAssets.Chain20.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 322)
			{
				Vector2 vector16 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num90 = mountedCenter.X - vector16.X;
				float num91 = mountedCenter.Y - vector16.Y;
				float rotation12 = (float)Math.Atan2(num91, num90) - 1.57f;
				bool flag14 = true;
				while (flag14)
				{
					float num92 = (float)Math.Sqrt(num90 * num90 + num91 * num91);
					if (num92 < 22f)
					{
						flag14 = false;
						continue;
					}
					if (float.IsNaN(num92))
					{
						flag14 = false;
						continue;
					}
					num92 = 22f / num92;
					num90 *= num92;
					num91 *= num92;
					vector16.X += num90;
					vector16.Y += num91;
					num90 = mountedCenter.X - vector16.X;
					num91 = mountedCenter.Y - vector16.Y;
					Microsoft.Xna.Framework.Color color17 = Lighting.GetColor((int)vector16.X / 16, (int)(vector16.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain29.Value, new Vector2(vector16.X - screenPosition.X, vector16.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain29.Width(), TextureAssets.Chain29.Height()), color17, rotation12, new Vector2((float)TextureAssets.Chain29.Width() * 0.5f, (float)TextureAssets.Chain29.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 315)
			{
				Vector2 vector17 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num93 = mountedCenter.X - vector17.X;
				float num94 = mountedCenter.Y - vector17.Y;
				float rotation13 = (float)Math.Atan2(num94, num93) - 1.57f;
				bool flag15 = true;
				while (flag15)
				{
					float num95 = (float)Math.Sqrt(num93 * num93 + num94 * num94);
					if (num95 < 50f)
					{
						flag15 = false;
						continue;
					}
					if (float.IsNaN(num95))
					{
						flag15 = false;
						continue;
					}
					num95 = 40f / num95;
					num93 *= num95;
					num94 *= num95;
					vector17.X += num93;
					vector17.Y += num94;
					num93 = mountedCenter.X - vector17.X;
					num94 = mountedCenter.Y - vector17.Y;
					Microsoft.Xna.Framework.Color color18 = Lighting.GetColor((int)vector17.X / 16, (int)(vector17.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain28.Value, new Vector2(vector17.X - screenPosition.X, vector17.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain28.Width(), TextureAssets.Chain28.Height()), color18, rotation13, new Vector2((float)TextureAssets.Chain28.Width() * 0.5f, (float)TextureAssets.Chain28.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 331)
			{
				Vector2 vector18 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num96 = mountedCenter.X - vector18.X;
				float num97 = mountedCenter.Y - vector18.Y;
				float rotation14 = (float)Math.Atan2(num97, num96) - 1.57f;
				bool flag16 = true;
				while (flag16)
				{
					float num98 = (float)Math.Sqrt(num96 * num96 + num97 * num97);
					if (num98 < 30f)
					{
						flag16 = false;
						continue;
					}
					if (float.IsNaN(num98))
					{
						flag16 = false;
						continue;
					}
					num98 = 24f / num98;
					num96 *= num98;
					num97 *= num98;
					vector18.X += num96;
					vector18.Y += num97;
					num96 = mountedCenter.X - vector18.X;
					num97 = mountedCenter.Y - vector18.Y;
					Microsoft.Xna.Framework.Color color19 = Lighting.GetColor((int)vector18.X / 16, (int)(vector18.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain30.Value, new Vector2(vector18.X - screenPosition.X, vector18.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain30.Width(), TextureAssets.Chain30.Height()), color19, rotation14, new Vector2((float)TextureAssets.Chain30.Width() * 0.5f, (float)TextureAssets.Chain30.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 332)
			{
				int num99 = 0;
				Vector2 vector19 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num100 = mountedCenter.X - vector19.X;
				float num101 = mountedCenter.Y - vector19.Y;
				float rotation15 = (float)Math.Atan2(num101, num100) - 1.57f;
				bool flag17 = true;
				while (flag17)
				{
					float num102 = (float)Math.Sqrt(num100 * num100 + num101 * num101);
					if (num102 < 30f)
					{
						flag17 = false;
						continue;
					}
					if (float.IsNaN(num102))
					{
						flag17 = false;
						continue;
					}
					int i2 = (int)vector19.X / 16;
					int j2 = (int)vector19.Y / 16;
					if (num99 == 0)
					{
						Lighting.AddLight(i2, j2, 0f, 0.2f, 0.2f);
					}
					if (num99 == 1)
					{
						Lighting.AddLight(i2, j2, 0.1f, 0.2f, 0f);
					}
					if (num99 == 2)
					{
						Lighting.AddLight(i2, j2, 0.2f, 0.1f, 0f);
					}
					if (num99 == 3)
					{
						Lighting.AddLight(i2, j2, 0.2f, 0f, 0.2f);
					}
					num102 = 16f / num102;
					num100 *= num102;
					num101 *= num102;
					vector19.X += num100;
					vector19.Y += num101;
					num100 = mountedCenter.X - vector19.X;
					num101 = mountedCenter.Y - vector19.Y;
					Microsoft.Xna.Framework.Color color20 = Lighting.GetColor((int)vector19.X / 16, (int)(vector19.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain31.Value, new Vector2(vector19.X - screenPosition.X, vector19.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, TextureAssets.Chain31.Height() / 4 * num99, TextureAssets.Chain31.Width(), TextureAssets.Chain31.Height() / 4), color20, rotation15, new Vector2((float)TextureAssets.Chain30.Width() * 0.5f, TextureAssets.Chain30.Height() / 8), 1f, SpriteEffects.None, 0);
					EntitySpriteDraw(TextureAssets.Chain32.Value, new Vector2(vector19.X - screenPosition.X, vector19.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, TextureAssets.Chain31.Height() / 4 * num99, TextureAssets.Chain31.Width(), TextureAssets.Chain31.Height() / 4), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), rotation15, new Vector2((float)TextureAssets.Chain30.Width() * 0.5f, TextureAssets.Chain30.Height() / 8), 1f, SpriteEffects.None, 0);
					num99++;
					if (num99 > 3)
					{
						num99 = 0;
					}
				}
			}
			else if (projectile.type == 372 || projectile.type == 383 || projectile.type == 396 || projectile.type == 403 || projectile.type == 404 || projectile.type == 446 || (projectile.type >= 486 && projectile.type <= 489) || (projectile.type >= 646 && projectile.type <= 649) || projectile.type == 652)
			{
				Texture2D texture2D = null;
				Microsoft.Xna.Framework.Color color21 = Microsoft.Xna.Framework.Color.Transparent;
				Texture2D value10 = TextureAssets.Chain33.Value;
				if (projectile.type == 383)
				{
					value10 = TextureAssets.Chain34.Value;
				}
				if (projectile.type == 396)
				{
					value10 = TextureAssets.Chain35.Value;
				}
				if (projectile.type == 403)
				{
					value10 = TextureAssets.Chain36.Value;
				}
				if (projectile.type == 404)
				{
					value10 = TextureAssets.Chain37.Value;
				}
				if (projectile.type == 446)
				{
					value10 = TextureAssets.Extra[3].Value;
				}
				if (projectile.type >= 486 && projectile.type <= 489)
				{
					value10 = TextureAssets.Chains[projectile.type - 486].Value;
				}
				if (projectile.type >= 646 && projectile.type <= 649)
				{
					value10 = TextureAssets.Chains[projectile.type - 646 + 8].Value;
					texture2D = TextureAssets.Chains[projectile.type - 646 + 12].Value;
					color21 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
				}
				if (projectile.type == 652)
				{
					value10 = TextureAssets.Chains[16].Value;
				}
				Vector2 center = projectile.Center;
				Microsoft.Xna.Framework.Rectangle? sourceRectangle = null;
				Vector2 origin3 = new Vector2((float)value10.Width * 0.5f, (float)value10.Height * 0.5f);
				float num103 = value10.Height;
				float num104 = 0f;
				if (projectile.type == 446)
				{
					int num105 = 7;
					int num106 = (int)projectile.localAI[0] / num105;
					sourceRectangle = new Microsoft.Xna.Framework.Rectangle(0, value10.Height / 4 * num106, value10.Width, value10.Height / 4);
					origin3.Y /= 4f;
					num103 /= 4f;
				}
				switch (projectile.type)
				{
				case 383:
					num104 = 14f;
					break;
				case 446:
					num104 = 20f;
					break;
				case 489:
					num104 = 10f;
					break;
				case 487:
					num104 = 8f;
					break;
				}
				if (num104 != 0f)
				{
					float num107 = -1.57f;
					Vector2 value11 = new Vector2((float)Math.Cos(projectile.rotation + num107), (float)Math.Sin(projectile.rotation + num107));
					center -= value11 * num104;
					value11 = mountedCenter - center;
					value11.Normalize();
					center -= value11 * num103 / 2f;
				}
				Vector2 vector20 = mountedCenter - center;
				float rotation16 = (float)Math.Atan2(vector20.Y, vector20.X) - 1.57f;
				bool flag18 = true;
				if (float.IsNaN(center.X) && float.IsNaN(center.Y))
				{
					flag18 = false;
				}
				if (float.IsNaN(vector20.X) && float.IsNaN(vector20.Y))
				{
					flag18 = false;
				}
				while (flag18)
				{
					if (vector20.Length() < num103 + 1f)
					{
						flag18 = false;
						continue;
					}
					Vector2 value12 = vector20;
					value12.Normalize();
					center += value12 * num103;
					vector20 = mountedCenter - center;
					Microsoft.Xna.Framework.Color color22 = Lighting.GetColor((int)center.X / 16, (int)(center.Y / 16f));
					if (projectile.type == 396)
					{
						color22 *= (float)(255 - projectile.alpha) / 255f;
					}
					if (projectile.type == 446)
					{
						color22 = projectile.GetAlpha(color22);
					}
					if (projectile.type == 488)
					{
						Lighting.AddLight(center, 0.2f, 0f, 0.175f);
						color22 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
					}
					if (projectile.type >= 646 && projectile.type <= 649)
					{
						color22 = projectile.GetAlpha(color22);
					}
					EntitySpriteDraw(value10, center - screenPosition, sourceRectangle, color22, rotation16, origin3, 1f, SpriteEffects.None, 0);
					if (texture2D != null)
					{
						EntitySpriteDraw(texture2D, center - screenPosition, sourceRectangle, color21, rotation16, origin3, 1f, SpriteEffects.None, 0);
					}
				}
			}
			else if (projectile.aiStyle == 7)
			{
				Vector2 vector21 = new Vector2(projectile.position.X + (float)projectile.width * 0.5f, projectile.position.Y + (float)projectile.height * 0.5f);
				float num108 = mountedCenter.X - vector21.X;
				float num109 = mountedCenter.Y - vector21.Y;
				float rotation17 = (float)Math.Atan2(num109, num108) - 1.57f;
				bool flag19 = true;
				while (flag19)
				{
					float num110 = (float)Math.Sqrt(num108 * num108 + num109 * num109);
					if (num110 < 25f)
					{
						flag19 = false;
						continue;
					}
					if (float.IsNaN(num110))
					{
						flag19 = false;
						continue;
					}
					num110 = 12f / num110;
					num108 *= num110;
					num109 *= num110;
					vector21.X += num108;
					vector21.Y += num109;
					num108 = mountedCenter.X - vector21.X;
					num109 = mountedCenter.Y - vector21.Y;
					Microsoft.Xna.Framework.Color color23 = Lighting.GetColor((int)vector21.X / 16, (int)(vector21.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain.Value, new Vector2(vector21.X - screenPosition.X, vector21.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain.Width(), TextureAssets.Chain.Height()), color23, rotation17, new Vector2((float)TextureAssets.Chain.Width() * 0.5f, (float)TextureAssets.Chain.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 262)
			{
				float x = projectile.Center.X;
				float y = projectile.Center.Y;
				float x2 = projectile.velocity.X;
				float y2 = projectile.velocity.Y;
				float num111 = (float)Math.Sqrt(x2 * x2 + y2 * y2);
				num111 = 4f / num111;
				if (projectile.ai[0] == 0f)
				{
					x -= projectile.velocity.X * num111;
					y -= projectile.velocity.Y * num111;
				}
				else
				{
					x += projectile.velocity.X * num111;
					y += projectile.velocity.Y * num111;
				}
				Vector2 vector22 = new Vector2(x, y);
				x2 = mountedCenter.X - vector22.X;
				y2 = mountedCenter.Y - vector22.Y;
				float rotation18 = (float)Math.Atan2(y2, x2) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num112 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num112 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(y2 * (float)num112, x2 * (float)num112);
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(y2 * (float)num112, x2 * (float)num112);
					}
				}
				bool flag20 = true;
				while (flag20)
				{
					float num113 = (float)Math.Sqrt(x2 * x2 + y2 * y2);
					if (num113 < 25f)
					{
						flag20 = false;
						continue;
					}
					if (float.IsNaN(num113))
					{
						flag20 = false;
						continue;
					}
					num113 = 12f / num113;
					x2 *= num113;
					y2 *= num113;
					vector22.X += x2;
					vector22.Y += y2;
					x2 = mountedCenter.X - vector22.X;
					y2 = mountedCenter.Y - vector22.Y;
					Microsoft.Xna.Framework.Color color24 = Lighting.GetColor((int)vector22.X / 16, (int)(vector22.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain22.Value, new Vector2(vector22.X - screenPosition.X, vector22.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain22.Width(), TextureAssets.Chain22.Height()), color24, rotation18, new Vector2((float)TextureAssets.Chain22.Width() * 0.5f, (float)TextureAssets.Chain22.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 273)
			{
				float x3 = projectile.Center.X;
				float y3 = projectile.Center.Y;
				float x4 = projectile.velocity.X;
				float y4 = projectile.velocity.Y;
				float num114 = (float)Math.Sqrt(x4 * x4 + y4 * y4);
				num114 = 4f / num114;
				if (projectile.ai[0] == 0f)
				{
					x3 -= projectile.velocity.X * num114;
					y3 -= projectile.velocity.Y * num114;
				}
				else
				{
					x3 += projectile.velocity.X * num114;
					y3 += projectile.velocity.Y * num114;
				}
				Vector2 vector23 = new Vector2(x3, y3);
				x4 = mountedCenter.X - vector23.X;
				y4 = mountedCenter.Y - vector23.Y;
				float rotation19 = (float)Math.Atan2(y4, x4) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num115 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num115 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(y4 * (float)num115, x4 * (float)num115);
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(y4 * (float)num115, x4 * (float)num115);
					}
				}
				bool flag21 = true;
				while (flag21)
				{
					float num116 = (float)Math.Sqrt(x4 * x4 + y4 * y4);
					if (num116 < 25f)
					{
						flag21 = false;
						continue;
					}
					if (float.IsNaN(num116))
					{
						flag21 = false;
						continue;
					}
					num116 = 12f / num116;
					x4 *= num116;
					y4 *= num116;
					vector23.X += x4;
					vector23.Y += y4;
					x4 = mountedCenter.X - vector23.X;
					y4 = mountedCenter.Y - vector23.Y;
					Microsoft.Xna.Framework.Color color25 = Lighting.GetColor((int)vector23.X / 16, (int)(vector23.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain23.Value, new Vector2(vector23.X - screenPosition.X, vector23.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain23.Width(), TextureAssets.Chain23.Height()), color25, rotation19, new Vector2((float)TextureAssets.Chain23.Width() * 0.5f, (float)TextureAssets.Chain23.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 481)
			{
				float x5 = projectile.Center.X;
				float y5 = projectile.Center.Y;
				float x6 = projectile.velocity.X;
				float y6 = projectile.velocity.Y;
				float num117 = (float)Math.Sqrt(x6 * x6 + y6 * y6);
				num117 = 4f / num117;
				if (projectile.ai[0] == 0f)
				{
					x5 -= projectile.velocity.X * num117;
					y5 -= projectile.velocity.Y * num117;
				}
				else
				{
					x5 += projectile.velocity.X * num117;
					y5 += projectile.velocity.Y * num117;
				}
				Vector2 vector24 = new Vector2(x5, y5);
				x6 = mountedCenter.X - vector24.X;
				y6 = mountedCenter.Y - vector24.Y;
				float rotation20 = (float)Math.Atan2(y6, x6) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num118 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num118 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(y6 * (float)num118, x6 * (float)num118);
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(y6 * (float)num118, x6 * (float)num118);
					}
				}
				bool flag22 = true;
				while (flag22)
				{
					float num119 = 0.85f;
					float num120 = (float)Math.Sqrt(x6 * x6 + y6 * y6);
					float num121 = num120;
					if ((double)num120 < (double)TextureAssets.Chain40.Height() * 1.5)
					{
						flag22 = false;
						continue;
					}
					if (float.IsNaN(num120))
					{
						flag22 = false;
						continue;
					}
					num120 = (float)TextureAssets.Chain40.Height() * num119 / num120;
					x6 *= num120;
					y6 *= num120;
					vector24.X += x6;
					vector24.Y += y6;
					x6 = mountedCenter.X - vector24.X;
					y6 = mountedCenter.Y - vector24.Y;
					if (num121 > (float)(TextureAssets.Chain40.Height() * 2))
					{
						for (int num122 = 0; num122 < 2; num122++)
						{
							float num123 = 0.75f;
							float num124 = 1f;
							num124 = ((num122 != 0) ? Math.Abs(Main.player[projectile.owner].velocity.Y) : Math.Abs(Main.player[projectile.owner].velocity.X));
							if (num124 > 10f)
							{
								num124 = 10f;
							}
							num124 /= 10f;
							num123 *= num124;
							num124 = num121 / 80f;
							if (num124 > 1f)
							{
								num124 = 1f;
							}
							num123 *= num124;
							if (num123 < 0f)
							{
								num123 = 0f;
							}
							if (float.IsNaN(num123))
							{
								continue;
							}
							if (num122 == 0)
							{
								if (Main.player[projectile.owner].velocity.X < 0f && projectile.Center.X < mountedCenter.X)
								{
									y6 *= 1f - num123;
								}
								if (Main.player[projectile.owner].velocity.X > 0f && projectile.Center.X > mountedCenter.X)
								{
									y6 *= 1f - num123;
								}
							}
							else
							{
								if (Main.player[projectile.owner].velocity.Y < 0f && projectile.Center.Y < mountedCenter.Y)
								{
									x6 *= 1f - num123;
								}
								if (Main.player[projectile.owner].velocity.Y > 0f && projectile.Center.Y > mountedCenter.Y)
								{
									x6 *= 1f - num123;
								}
							}
						}
					}
					Microsoft.Xna.Framework.Color color26 = Lighting.GetColor((int)vector24.X / 16, (int)(vector24.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain40.Value, new Vector2(vector24.X - screenPosition.X, vector24.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain40.Width(), TextureAssets.Chain40.Height()), color26, rotation20, new Vector2((float)TextureAssets.Chain40.Width() * 0.5f, (float)TextureAssets.Chain40.Height() * 0.5f), num119, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 271)
			{
				float x7 = projectile.Center.X;
				float y7 = projectile.Center.Y;
				float x8 = projectile.velocity.X;
				float y8 = projectile.velocity.Y;
				float num125 = (float)Math.Sqrt(x8 * x8 + y8 * y8);
				num125 = 4f / num125;
				if (projectile.ai[0] == 0f)
				{
					x7 -= projectile.velocity.X * num125;
					y7 -= projectile.velocity.Y * num125;
				}
				else
				{
					x7 += projectile.velocity.X * num125;
					y7 += projectile.velocity.Y * num125;
				}
				Vector2 vector25 = new Vector2(x7, y7);
				x8 = mountedCenter.X - vector25.X;
				y8 = mountedCenter.Y - vector25.Y;
				float rotation21 = (float)Math.Atan2(y8, x8) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num126 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num126 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(y8 * (float)num126, x8 * (float)num126);
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(y8 * (float)num126, x8 * (float)num126);
					}
				}
				bool flag23 = true;
				while (flag23)
				{
					float num127 = (float)Math.Sqrt(x8 * x8 + y8 * y8);
					if (num127 < 25f)
					{
						flag23 = false;
						continue;
					}
					if (float.IsNaN(num127))
					{
						flag23 = false;
						continue;
					}
					num127 = 12f / num127;
					x8 *= num127;
					y8 *= num127;
					vector25.X += x8;
					vector25.Y += y8;
					x8 = mountedCenter.X - vector25.X;
					y8 = mountedCenter.Y - vector25.Y;
					Microsoft.Xna.Framework.Color color27 = Lighting.GetColor((int)vector25.X / 16, (int)(vector25.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain18.Value, new Vector2(vector25.X - screenPosition.X, vector25.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain18.Width(), TextureAssets.Chain18.Height()), color27, rotation21, new Vector2((float)TextureAssets.Chain18.Width() * 0.5f, (float)TextureAssets.Chain18.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.aiStyle == 13)
			{
				float num128 = projectile.position.X + 8f;
				float num129 = projectile.position.Y + 2f;
				float x9 = projectile.velocity.X;
				float num130 = projectile.velocity.Y;
				if (x9 == 0f && num130 == 0f)
				{
					num130 = 0.0001f;
					num130 = 0.0001f;
				}
				float num131 = (float)Math.Sqrt(x9 * x9 + num130 * num130);
				num131 = 20f / num131;
				if (projectile.ai[0] == 0f)
				{
					num128 -= projectile.velocity.X * num131;
					num129 -= projectile.velocity.Y * num131;
				}
				else
				{
					num128 += projectile.velocity.X * num131;
					num129 += projectile.velocity.Y * num131;
				}
				Vector2 vector26 = new Vector2(num128, num129);
				x9 = mountedCenter.X - vector26.X;
				num130 = mountedCenter.Y - vector26.Y;
				float rotation22 = (float)Math.Atan2(num130, x9) - 1.57f;
				if (projectile.alpha == 0)
				{
					int num132 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num132 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(num130 * (float)num132, x9 * (float)num132);
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(num130 * (float)num132, x9 * (float)num132);
					}
				}
				bool flag24 = true;
				while (flag24)
				{
					float num133 = (float)Math.Sqrt(x9 * x9 + num130 * num130);
					if (num133 < 25f)
					{
						flag24 = false;
						continue;
					}
					if (float.IsNaN(num133))
					{
						flag24 = false;
						continue;
					}
					num133 = 12f / num133;
					x9 *= num133;
					num130 *= num133;
					vector26.X += x9;
					vector26.Y += num130;
					x9 = mountedCenter.X - vector26.X;
					num130 = mountedCenter.Y - vector26.Y;
					Microsoft.Xna.Framework.Color color28 = Lighting.GetColor((int)vector26.X / 16, (int)(vector26.Y / 16f));
					EntitySpriteDraw(TextureAssets.Chain.Value, new Vector2(vector26.X - screenPosition.X, vector26.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain.Width(), TextureAssets.Chain.Height()), color28, rotation22, new Vector2((float)TextureAssets.Chain.Width() * 0.5f, (float)TextureAssets.Chain.Height() * 0.5f), 1f, SpriteEffects.None, 0);
				}
			}
			else if (projectile.type == 190)
			{
				float x10 = projectile.position.X + (float)(projectile.width / 2);
				float y9 = projectile.position.Y + (float)(projectile.height / 2);
				float x11 = projectile.velocity.X;
				float y10 = projectile.velocity.Y;
				Math.Sqrt(x11 * x11 + y10 * y10);
				Vector2 vector27 = new Vector2(x10, y9);
				x11 = mountedCenter.X - vector27.X;
				y10 = mountedCenter.Y + Main.player[projectile.owner].gfxOffY - vector27.Y;
				Math.Atan2(y10, x11);
				if (projectile.alpha == 0)
				{
					int num134 = -1;
					if (projectile.position.X + (float)(projectile.width / 2) < mountedCenter.X)
					{
						num134 = 1;
					}
					if (Main.player[projectile.owner].direction == 1)
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(y10 * (float)num134, x11 * (float)num134);
					}
					else
					{
						Main.player[projectile.owner].itemRotation = (float)Math.Atan2(y10 * (float)num134, x11 * (float)num134);
					}
				}
			}
			else if (projectile.aiStyle == 15)
			{
				DrawProj_FlailChains(projectile, mountedCenter);
			}
			Microsoft.Xna.Framework.Color color29 = Lighting.GetColor((int)((double)projectile.position.X + (double)projectile.width * 0.5) / 16, (int)(((double)projectile.position.Y + (double)projectile.height * 0.5) / 16.0));
			if (projectile.hide && !ProjectileID.Sets.DontAttachHideToAlpha[projectile.type])
			{
				color29 = Lighting.GetColor((int)mountedCenter.X / 16, (int)(mountedCenter.Y / 16f));
			}
			if (projectile.type == 14)
			{
				color29 = Microsoft.Xna.Framework.Color.White;
			}
			int num135 = 0;
			int num136 = 0;
			if (projectile.type == 175)
			{
				num135 = 10;
			}
			if (projectile.type == 392)
			{
				num135 = -2;
			}
			if (projectile.type == 499)
			{
				num135 = 12;
			}
			if (projectile.type == 765)
			{
				num135 = 22;
				num136 = -16;
			}
			if (projectile.bobber)
			{
				num135 = 8;
			}
			if (projectile.type == 519)
			{
				num135 = 6;
				num136 -= 6;
			}
			if (projectile.type == 520)
			{
				num135 = 12;
			}
			if (projectile.type == 492)
			{
				num136 -= 4;
				num135 += 5;
			}
			if (projectile.type == 498)
			{
				num135 = 6;
			}
			if (projectile.type == 489)
			{
				num135 = -2;
			}
			if (projectile.type == 486)
			{
				num135 = -6;
			}
			if (projectile.type == 525)
			{
				num135 = 5;
			}
			if (projectile.type == 488)
			{
				num136 -= 8;
			}
			if (projectile.type == 373)
			{
				num136 = -10;
				num135 = 6;
			}
			if (projectile.type == 375)
			{
				num136 = -11;
				num135 = 12;
			}
			if (projectile.type == 423)
			{
				num136 = -5;
			}
			if (projectile.type == 346)
			{
				num135 = 4;
			}
			if (projectile.type == 331)
			{
				num136 = -4;
			}
			if (projectile.type == 254)
			{
				num135 = 3;
			}
			if (projectile.type == 273)
			{
				num136 = 2;
			}
			if (projectile.type == 335)
			{
				num135 = 6;
			}
			if (projectile.type == 162)
			{
				num135 = 1;
				num136 = 1;
			}
			if (projectile.type == 377)
			{
				num135 = -6;
			}
			if (projectile.type == 353)
			{
				num135 = 36;
				num136 = -12;
			}
			if (projectile.type == 324)
			{
				num135 = 22;
				num136 = -6;
			}
			if (projectile.type == 266)
			{
				num135 = 10;
				num136 = -10;
			}
			if (projectile.type == 319)
			{
				num135 = 10;
				num136 = -12;
			}
			if (projectile.type == 315)
			{
				num135 = -13;
				num136 = -6;
			}
			if (projectile.type == 313 && projectile.height != 54)
			{
				num136 = -12;
				num135 = 20;
			}
			if (projectile.type == 314)
			{
				num136 = -8;
				num135 = 0;
			}
			if (projectile.type == 269)
			{
				num135 = 18;
				num136 = -14;
			}
			if (projectile.type == 268)
			{
				num135 = 22;
				num136 = -2;
			}
			if (projectile.type == 18)
			{
				num135 = 3;
				num136 = 3;
			}
			if (projectile.type == 16)
			{
				num135 = 6;
			}
			if (projectile.type == 17 || projectile.type == 31)
			{
				num135 = 2;
			}
			if (projectile.type == 25 || projectile.type == 26 || projectile.type == 35 || projectile.type == 63 || projectile.type == 154)
			{
				num135 = 6;
				num136 -= 6;
			}
			if (projectile.type == 947 || projectile.type == 948)
			{
				num135 = 4;
				num136 -= 4;
			}
			if (projectile.type == 28 || projectile.type == 37 || projectile.type == 75)
			{
				num135 = 8;
			}
			if (projectile.type == 29 || projectile.type == 470 || projectile.type == 637)
			{
				num135 = 11;
			}
			if (projectile.type == 43)
			{
				num135 = 4;
			}
			if (projectile.type == 208)
			{
				num135 = 2;
				num136 -= 12;
			}
			if (projectile.type == 209)
			{
				num135 = 4;
				num136 -= 8;
			}
			if (projectile.type == 210)
			{
				num135 = 2;
				num136 -= 22;
			}
			if (projectile.type == 251)
			{
				num135 = 18;
				num136 -= 10;
			}
			if (projectile.type == 163 || projectile.type == 310)
			{
				num135 = 10;
			}
			if (projectile.type == 69 || projectile.type == 70)
			{
				num135 = 4;
				num136 = 4;
			}
			float num137 = (float)(TextureAssets.Projectile[projectile.type].Width() - projectile.width) * 0.5f + (float)projectile.width * 0.5f;
			if (projectile.type == 50 || projectile.type == 53 || projectile.type == 515 || projectile.type == 870)
			{
				num136 = -8;
			}
			if (projectile.type == 473)
			{
				num136 = -6;
				num135 = 2;
			}
			if (projectile.type == 72 || projectile.type == 86 || projectile.type == 87)
			{
				num136 = -16;
				num135 = 8;
			}
			if (projectile.type == 74)
			{
				num136 = -6;
			}
			if (projectile.type == 138 || projectile.type == 484)
			{
				num135 = 1;
			}
			if (projectile.type == 655)
			{
				num135 = 1;
			}
			if (projectile.type == 111)
			{
				num135 = 18;
				num136 = -16;
			}
			if (projectile.type == 875)
			{
				num135 = 16;
				num136 = -16;
			}
			if (projectile.type == 881)
			{
				num135 = 14;
				num136 = -8;
			}
			if (projectile.type == 934)
			{
				num135 = 14;
				num136 = -20;
			}
			if (projectile.type == 884)
			{
				num135 = 16;
				num136 = -12;
			}
			if (projectile.type == 890)
			{
				num135 = 26;
				num136 = -9;
			}
			if (projectile.type == 891)
			{
				num135 = 30;
				num136 = -12;
			}
			if (projectile.type == 897)
			{
				num135 = 38;
				num136 = -13;
			}
			if (projectile.type == 899)
			{
				num135 = 28;
				num136 = -12;
			}
			if (projectile.type == 900)
			{
				num135 = 54;
				num136 = -30;
			}
			if (projectile.type == 334)
			{
				num136 = -18;
				num135 = 8;
			}
			if (projectile.type == 816)
			{
				num136 = -19;
				num135 = 6;
			}
			if (projectile.type == 821)
			{
				num136 = -10;
				num135 = 6;
			}
			if (projectile.type == 825)
			{
				num136 = -19;
				num135 = 14;
			}
			if (projectile.type == 854)
			{
				num136 = -14;
				num135 = -4;
			}
			if (projectile.type == 858)
			{
				num136 = -8;
				num135 = 16;
			}
			if (projectile.type == 859)
			{
				num136 = -8;
				num135 = 8;
			}
			if (projectile.type == 860)
			{
				num136 = -8;
				num135 = 34;
			}
			if (projectile.type == 200)
			{
				num135 = 12;
				num136 = -12;
			}
			if (projectile.type == 211)
			{
				num135 = 14;
				num136 = 0;
			}
			if (projectile.type == 236)
			{
				num135 = 30;
				num136 = -14;
			}
			if (projectile.type >= 191 && projectile.type <= 194)
			{
				num135 = 26;
				num136 = ((projectile.direction != 1) ? (-22) : (-10));
			}
			if (projectile.type >= 390 && projectile.type <= 392)
			{
				num136 = 4 * projectile.direction;
			}
			if (projectile.type == 112)
			{
				num135 = 12;
			}
			_ = projectile.type;
			_ = 118;
			if (projectile.type == 517 || projectile.type == 681)
			{
				num135 = 6;
			}
			if (projectile.type == 516)
			{
				num135 = 6;
			}
			if (projectile.type == 127)
			{
				num135 = 8;
			}
			if (projectile.type == 155)
			{
				num135 = 3;
				num136 = 3;
			}
			if (projectile.type == 397)
			{
				num137 -= 1f;
				num135 = -2;
				num136 = -2;
			}
			if (projectile.type == 398)
			{
				num135 = 8;
			}
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (projectile.spriteDirection == -1)
			{
				spriteEffects = SpriteEffects.FlipHorizontally;
			}
			if (projectile.type == 681 && projectile.velocity.X > 0f)
			{
				spriteEffects ^= SpriteEffects.FlipHorizontally;
			}
			if (projectile.type == 221)
			{
				for (int num138 = 1; num138 < 10; num138++)
				{
					float num139 = projectile.velocity.X * (float)num138 * 0.5f;
					float num140 = projectile.velocity.Y * (float)num138 * 0.5f;
					Microsoft.Xna.Framework.Color alpha = projectile.GetAlpha(color29);
					float num141 = 0f;
					if (num138 == 1)
					{
						num141 = 0.9f;
					}
					if (num138 == 2)
					{
						num141 = 0.8f;
					}
					if (num138 == 3)
					{
						num141 = 0.7f;
					}
					if (num138 == 4)
					{
						num141 = 0.6f;
					}
					if (num138 == 5)
					{
						num141 = 0.5f;
					}
					if (num138 == 6)
					{
						num141 = 0.4f;
					}
					if (num138 == 7)
					{
						num141 = 0.3f;
					}
					if (num138 == 8)
					{
						num141 = 0.2f;
					}
					if (num138 == 9)
					{
						num141 = 0.1f;
					}
					alpha.R = (byte)((float)(int)alpha.R * num141);
					alpha.G = (byte)((float)(int)alpha.G * num141);
					alpha.B = (byte)((float)(int)alpha.B * num141);
					alpha.A = (byte)((float)(int)alpha.A * num141);
					int num142 = TextureAssets.Projectile[projectile.type].Height() / projFrames[projectile.type];
					int y11 = num142 * projectile.frame;
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136 - num139, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num140), new Microsoft.Xna.Framework.Rectangle(0, y11, TextureAssets.Projectile[projectile.type].Width(), num142), alpha, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
				}
			}
			if (projectile.type == 408 || projectile.type == 435 || projectile.type == 436 || projectile.type == 438 || projectile.type == 452 || projectile.type == 454 || projectile.type == 459 || projectile.type == 462 || projectile.type == 503 || projectile.type == 532 || projectile.type == 533 || projectile.type == 573 || projectile.type == 582 || projectile.type == 585 || projectile.type == 592 || projectile.type == 601 || projectile.type == 636 || projectile.type == 638 || projectile.type == 640 || projectile.type == 639 || projectile.type == 424 || projectile.type == 425 || projectile.type == 426 || projectile.type == 660 || projectile.type == 661 || projectile.type == 671 || projectile.type == 664 || projectile.type == 666 || projectile.type == 668 || projectile.type == 675 || projectile.type == 680 || projectile.type == 682 || projectile.type == 684 || projectile.type == 686 || projectile.type == 700 || projectile.type == 706 || projectile.type == 709 || projectile.type == 710 || projectile.type == 711 || projectile.type == 261 || ProjectileID.Sets.IsAGolfBall[projectile.type] || projectile.type == 729 || projectile.type == 732 || projectile.type == 731 || projectile.type == 755 || projectile.type == 811 || projectile.type == 814 || projectile.type == 819 || projectile.type == 864 || projectile.type == 873 || projectile.type == 872 || projectile.type == 833 || projectile.type == 834 || projectile.type == 835 || projectile.type == 818 || projectile.type == 902 || projectile.type == 894 || projectile.type == 901 || projectile.type == 909 || projectile.type == 916 || projectile.type == 931 || projectile.type == 933)
			{
				Texture2D value13 = TextureAssets.Projectile[projectile.type].Value;
				int num143 = TextureAssets.Projectile[projectile.type].Height() / projFrames[projectile.type];
				int y12 = num143 * projectile.frame;
				Microsoft.Xna.Framework.Rectangle rectangle3 = new Microsoft.Xna.Framework.Rectangle(0, y12, value13.Width, num143);
				Vector2 origin4 = rectangle3.Size() / 2f;
				Vector2 zero = Vector2.Zero;
				float num144 = 0f;
				if (projectile.type == 503)
				{
					origin4.Y = 70f;
				}
				if (projectile.type == 686 || projectile.type == 711)
				{
					origin4.Y = rectangle3.Height - 70;
				}
				if (projectile.type == 438)
				{
					rectangle3.Y = 0;
				}
				if (projectile.type == 452)
				{
					rectangle3.Y = 0;
				}
				if (projectile.type == 408)
				{
					rectangle3.Y = num143;
				}
				if (projectile.type == 636)
				{
					origin4.Y = 10f;
				}
				if (projectile.type == 638)
				{
					origin4.Y = 2f;
				}
				if (projectile.type == 640 || projectile.type == 639 || projectile.type == 710)
				{
					origin4.Y = 5f;
				}
				if (projectile.type == 700)
				{
					origin4.X = ((projectile.spriteDirection == 1) ? (rectangle3.Width - 20) : 20);
				}
				if (projectile.type == 872)
				{
					rectangle3.Width /= 2;
					origin4.X /= 2f;
				}
				if (projectile.type == 933)
				{
					int num145 = (int)projectile.ai[1];
					if (TextureAssets.Item.IndexInRange(num145))
					{
						instance.LoadItem(num145);
						value13 = TextureAssets.Item[num145].Value;
						rectangle3 = value13.Frame();
						origin4 = rectangle3.Size() / 2f;
						num144 = -(float)Math.PI / 4f * (float)projectile.spriteDirection;
					}
				}
				if (projectile.type == 833 && projectile.frame != 8)
				{
					zero.Y += projectile.height / 2;
					origin4 = rectangle3.Size() * new Vector2(0.5f, 1f);
					origin4.Y -= 4f;
					origin4.X -= 7 * spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt();
				}
				if ((projectile.type == 834 || projectile.type == 835) && projectile.frame != 10)
				{
					zero.Y += projectile.height / 2;
					origin4 = rectangle3.Size() * new Vector2(0.5f, 1f);
					origin4.Y -= 4f;
					origin4.X -= 2 * spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt();
				}
				int num146 = 8;
				int num147 = 2;
				int num148 = 1;
				float value14 = 1f;
				float num149 = 15f;
				float num150 = 0f;
				Microsoft.Xna.Framework.Rectangle value15 = rectangle3;
				UnifiedRandom unifiedRandom = null;
				if (projectile.type == 503)
				{
					num146 = 9;
					num147 = 3;
					value14 = 0.5f;
				}
				else if (projectile.type == 261)
				{
					num148 = 18;
					num146 = 0;
					num147 = -2;
					value14 = 1.3f;
				}
				else if (projectile.type == 833 || projectile.type == 834 || projectile.type == 835)
				{
					num148 = 6;
					num146 = 0;
					num147 = -1;
					value14 = 1.5f;
				}
				else if (projectile.type == 818)
				{
					num148 = 18;
					num146 = 0;
					num147 = -2;
					value14 = 1f;
				}
				else if (projectile.type == 729)
				{
					num148 = 18;
					num146 = 0;
					num147 = -2;
					value14 = 1.3f;
				}
				else if (projectile.type == 686 || projectile.type == 711)
				{
					num148 = 19;
					num146 = 0;
					num147 = -3;
					value14 = 0.5f;
				}
				else if (ProjectileID.Sets.IsAGolfBall[projectile.type])
				{
					num148 = 0;
					num146 = 0;
					num147 = -1;
					value14 = 2f;
				}
				else if (projectile.type == 671)
				{
					num148 = 5;
					num146 = 0;
					num147 = -1;
					value14 = 2.6f;
				}
				else if (projectile.type == 811)
				{
					num148 = 5;
					num146 = 0;
					num147 = -1;
					value14 = 2.6f;
				}
				else if (projectile.type == 814)
				{
					num148 = 18;
					num146 = 0;
					num147 = -1;
					value14 = 1f;
				}
				else if (projectile.type == 755)
				{
					num148 = 5;
					num146 = 0;
					num147 = -1;
					value14 = 2.6f;
				}
				else if (projectile.type == 700)
				{
					num146 = 5;
					num147 = 1;
					value14 = 2.6f;
				}
				else if (projectile.type == 731)
				{
					num148 = 19;
					num146 = 0;
					num147 = -1;
					value14 = 0.5f;
				}
				else if (projectile.type == 864)
				{
					num148 = 12;
					num146 = 0;
					num147 = -1;
					value14 = 1.4f;
					value15.Y += value15.Height;
				}
				else if (projectile.type == 916)
				{
					num148 = 19;
					num146 = 0;
					num147 = -1;
					value14 = 1.4f;
					value15.Y += value15.Height;
					unifiedRandom = new UnifiedRandom(projectile.timeLeft);
				}
				else if (projectile.type == 873)
				{
					num148 = 39;
					num149 = 40f;
					num146 = 0;
					num147 = -1;
					value14 = 1.4f;
				}
				else if (projectile.type == 931)
				{
					num148 = 19;
					num149 = 20f;
					num146 = 0;
					num147 = -1;
					value14 = 0.7f;
				}
				else if (projectile.type == 933)
				{
					num148 = 60;
					num149 = 60f;
					num146 = 0;
					num147 = -15;
					value14 = 1f;
				}
				else if (projectile.type == 872)
				{
					num148 = 79;
					num149 = 10f;
					num146 = 0;
					num147 = -1;
					value14 = 1f;
					value15.X += value15.Width;
				}
				else if (projectile.type == 664 || projectile.type == 666 || projectile.type == 668)
				{
					num146 = 8;
					num147 = 2;
					value14 = 0.4f;
				}
				else if (projectile.type == 582 || projectile.type == 902)
				{
					num146 = 10;
					num147 = 2;
					value14 = 0.7f;
					num150 = 0.2f;
				}
				else if (projectile.type == 675)
				{
					num146 = 5;
					num147 = 1;
					value14 = 0.4f;
				}
				else if (projectile.type == 638)
				{
					num146 = 5;
					num147 = 1;
					value14 = 1f;
				}
				else if (projectile.type == 660)
				{
					num146 = 3;
					num147 = 1;
					value14 = 8f;
					rectangle3 = new Microsoft.Xna.Framework.Rectangle(38 * projectile.frame, 0, 38, 38);
					value15 = rectangle3;
					origin4 = rectangle3.Size() / 2f;
				}
				else if (projectile.type == 684)
				{
					num146 = 8;
					num147 = 1;
					value14 = 0.75f;
				}
				else if (projectile.type == 639)
				{
					num146 = 10;
					num147 = 1;
					value14 = 1f;
				}
				else if (projectile.type == 710)
				{
					num148 = 9;
					num146 = 0;
					num147 = -2;
					value14 = 0.5f;
				}
				else if (projectile.type == 640)
				{
					num146 = 20;
					num147 = 1;
					value14 = 1f;
				}
				else if (projectile.type == 436)
				{
					num147 = 2;
					value14 = 0.5f;
				}
				else if (projectile.type == 424 || projectile.type == 425 || projectile.type == 426)
				{
					num146 = 10;
					num147 = 2;
					value14 = 0.6f;
				}
				else if (projectile.type == 438)
				{
					num146 = 10;
					num147 = 2;
					value14 = 1f;
				}
				else if (projectile.type == 452)
				{
					num146 = 10;
					num147 = 3;
					value14 = 0.5f;
				}
				else if (projectile.type == 454)
				{
					num146 = 5;
					num147 = 1;
					value14 = 0.2f;
				}
				else if (projectile.type == 462)
				{
					num146 = 7;
					num147 = 1;
					value14 = 0.2f;
				}
				else if (projectile.type == 661)
				{
					num146 = 0;
					num147 = 1;
					value14 = 0.5f;
				}
				else if (projectile.type == 706)
				{
					num148 = 9;
					num146 = 0;
					num147 = -2;
					value14 = 0.5f;
				}
				else if (projectile.type == 585)
				{
					num146 = 7;
					num147 = 1;
					value14 = 0.2f;
				}
				else if (projectile.type == 459)
				{
					num146 = (int)(projectile.scale * 8f);
					num147 = num146 / 4;
					if (num147 < 1)
					{
						num147 = 1;
					}
					value14 = 0.3f;
				}
				else if (projectile.type == 709)
				{
					num146 = 8;
					num147 = num146 / 4;
					if (num147 < 1)
					{
						num147 = 1;
					}
					value14 = 0.5f;
				}
				else if (projectile.type == 532)
				{
					num146 = 10;
					num147 = 1;
					value14 = 0.7f;
					num150 = 0.2f;
				}
				else if (projectile.type == 592)
				{
					num146 = 10;
					num147 = 2;
					value14 = 1f;
				}
				else if (projectile.type == 601)
				{
					num146 = 8;
					num147 = 1;
					value14 = 0.3f;
				}
				else if (projectile.type == 636)
				{
					num146 = 20;
					num147 = 3;
					value14 = 0.5f;
				}
				else if (projectile.type == 680)
				{
					num146 = 9;
					num147 = 3;
					value14 = 0.5f;
				}
				else if (projectile.type == 533)
				{
					if (projectile.ai[0] >= 6f && projectile.ai[0] <= 8f)
					{
						num146 = ((projectile.ai[0] == 6f) ? 8 : 4);
						num147 = 1;
						if (projectile.ai[0] != 7f)
						{
							num150 = 0.2f;
						}
					}
					else
					{
						num146 = (num147 = 0);
					}
				}
				for (int num151 = num148; (num147 > 0 && num151 < num146) || (num147 < 0 && num151 > num146); num151 += num147)
				{
					if (num151 >= projectile.oldPos.Length)
					{
						continue;
					}
					Microsoft.Xna.Framework.Color color30 = color29;
					if (projectile.type == 408 || projectile.type == 435 || projectile.type == 682 || projectile.type == 732 || projectile.type == 731)
					{
						color30 = Microsoft.Xna.Framework.Color.Lerp(color30, Microsoft.Xna.Framework.Color.Blue, 0.5f);
					}
					else if (projectile.type == 436)
					{
						color30 = Microsoft.Xna.Framework.Color.Lerp(color30, Microsoft.Xna.Framework.Color.LimeGreen, 0.5f);
					}
					else if (projectile.type >= 424 && projectile.type <= 426)
					{
						color30 = Microsoft.Xna.Framework.Color.Lerp(color30, Microsoft.Xna.Framework.Color.Red, 0.5f);
					}
					else if (projectile.type == 640 || projectile.type == 639)
					{
						color30.A = 127;
					}
					else if (projectile.type == 671)
					{
						color30 = Microsoft.Xna.Framework.Color.Lerp(color30, Microsoft.Xna.Framework.Color.Purple, (float)num151 / (float)num146);
					}
					else if (projectile.type == 811)
					{
						color30 = Microsoft.Xna.Framework.Color.Lerp(color30, Microsoft.Xna.Framework.Color.Crimson * 0.5f, (float)num151 / (float)num146);
					}
					else if (projectile.type == 814)
					{
						color30 = Microsoft.Xna.Framework.Color.Lerp(color30, color30 * 0.5f, (float)num151 / (float)num146);
					}
					else if (projectile.type == 261)
					{
						color30 = Microsoft.Xna.Framework.Color.Lerp(color30, new Microsoft.Xna.Framework.Color(60, 60, 60, 60), (float)num151 / (float)num146);
					}
					else if (ProjectileID.Sets.IsAGolfBall[projectile.type])
					{
						color30 = Microsoft.Xna.Framework.Color.Lerp(color30, new Microsoft.Xna.Framework.Color(255, 230, 40, 20), (float)num151 / (float)num146);
					}
					color30 = projectile.GetAlpha(color30);
					if (projectile.type == 438)
					{
						color30.G /= (byte)num151;
						color30.B /= (byte)num151;
					}
					else if (projectile.type == 755)
					{
						color30 = projectile.AI_156_GetColor();
					}
					else if (projectile.type == 873)
					{
						color30 = projectile.AI_171_GetColor();
						color30.A /= 2;
						color30 *= Utils.GetLerpValue(0f, 20f, projectile.timeLeft, clamped: true);
					}
					else if (projectile.type == 931)
					{
						color30 = projectile.GetFairyQueenWeaponsColor(0.5f);
						color30 *= Utils.GetLerpValue(0f, 20f, projectile.timeLeft, clamped: true);
					}
					else if (projectile.type == 872)
					{
						color30 = projectile.AI_173_GetColor();
						color30 *= 0.4f;
						color30.A = (byte)((float)(int)color30.A * 0.6f);
						if (num151 > 80)
						{
							color30 *= 0.15f * Utils.GetLerpValue(120f, 80f, num151, clamped: true);
						}
					}
					else if (projectile.type == 864)
					{
						color30 = projectile.GetFloatingDaggerMinionGlowColor();
						color30.A /= 4;
					}
					else if (projectile.type == 682)
					{
						color30.G /= (byte)num151;
					}
					else if (projectile.type == 686)
					{
						if (projectile.oldPos[num151] == Vector2.Zero)
						{
							continue;
						}
						float num152 = (float)num151 / (float)num148;
						color30 = ((!(num152 < 0.5f)) ? Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Purple, Microsoft.Xna.Framework.Color.Black, Utils.GetLerpValue(0.5f, 1f, num152)) : Microsoft.Xna.Framework.Color.Lerp(color30, Microsoft.Xna.Framework.Color.Purple, Utils.GetLerpValue(0f, 0.5f, num152)));
					}
					else if (projectile.type == 711)
					{
						if (projectile.oldPos[num151] == Vector2.Zero)
						{
							continue;
						}
						float num153 = (float)num151 / (float)num148;
						color30 = ((!(num153 < 0.5f)) ? Microsoft.Xna.Framework.Color.Lerp(new Microsoft.Xna.Framework.Color(128, 0, 255, 180), Microsoft.Xna.Framework.Color.Black, Utils.GetLerpValue(0.5f, 1f, num153)) : Microsoft.Xna.Framework.Color.Lerp(color30, new Microsoft.Xna.Framework.Color(128, 0, 255, 180), Utils.GetLerpValue(0f, 0.5f, num153)));
					}
					else if (projectile.type == 684)
					{
						if (num151 == 1)
						{
							color30.B /= 2;
							color30.G /= 2;
							color30.A /= 2;
						}
						color30.B /= (byte)num151;
						color30.G /= (byte)num151;
						color30.A /= (byte)num151;
					}
					else if (projectile.type == 706 || projectile.type == 710)
					{
						color30.B /= (byte)num151;
						color30.G /= (byte)num151;
						color30.A /= (byte)num151;
					}
					else if (projectile.type == 818)
					{
						float num154 = 0.3f;
						float num155 = Utils.GetLerpValue(0f, num154, projectile.ai[0], clamped: true) * Utils.GetLerpValue(1f, 1f - num154, projectile.ai[0], clamped: true);
						Utils.GetLerpValue(0f, num147 * -3, num151, clamped: true);
						Utils.GetLerpValue(num148, num148 + num147 * 3, num151, clamped: true);
						Microsoft.Xna.Framework.Color value16 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
						Microsoft.Xna.Framework.Color ourFavoriteColor = OurFavoriteColor;
						ourFavoriteColor.A = 0;
						ourFavoriteColor *= num155;
						color30 = Microsoft.Xna.Framework.Color.Lerp(ourFavoriteColor, value16, num155);
					}
					else if (projectile.type == 833 || projectile.type == 834 || projectile.type == 835)
					{
						float lerpValue2 = Utils.GetLerpValue(0f, 6f, projectile.velocity.Length(), clamped: true);
						color30 = Microsoft.Xna.Framework.Color.Lerp(color30, Microsoft.Xna.Framework.Color.White, lerpValue2 * 0.5f);
						color30.A = 0;
						color30 *= lerpValue2;
					}
					else if (projectile.type == 592)
					{
						color30.R /= (byte)num151;
						color30.G /= (byte)num151;
					}
					else if (projectile.type == 640)
					{
						color30.R /= (byte)num151;
						color30.A /= (byte)num151;
					}
					else if (projectile.type >= 424 && projectile.type <= 426)
					{
						color30.B /= (byte)num151;
						color30.G /= (byte)num151;
						color30.A /= (byte)num151;
					}
					float num156 = num146 - num151;
					if (num147 < 0)
					{
						num156 = num148 - num151;
					}
					color30 *= num156 / ((float)ProjectileID.Sets.TrailCacheLength[projectile.type] * 1.5f);
					Vector2 value17 = projectile.oldPos[num151];
					float num157 = projectile.rotation;
					SpriteEffects effects2 = spriteEffects;
					if (ProjectileID.Sets.TrailingMode[projectile.type] == 2 || ProjectileID.Sets.TrailingMode[projectile.type] == 3 || ProjectileID.Sets.TrailingMode[projectile.type] == 4)
					{
						num157 = projectile.oldRot[num151];
						effects2 = ((projectile.oldSpriteDirection[num151] == -1) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
					}
					if (value17 == Vector2.Zero)
					{
						continue;
					}
					if (projectile.type == 916)
					{
						value15.Y += value15.Height;
						value15.Y %= value15.Height * projFrames[projectile.type];
						_ = num156 / ((float)ProjectileID.Sets.TrailCacheLength[projectile.type] * 1.5f);
						Microsoft.Xna.Framework.Color color31 = new Microsoft.Xna.Framework.Color(0, 0, 0, 255);
						int num158 = unifiedRandom.Next(3);
						if (num158 == 2 || num158 == 1)
						{
							color31 = Microsoft.Xna.Framework.Color.Lerp(new Microsoft.Xna.Framework.Color(106, 90, 205, 127), Microsoft.Xna.Framework.Color.Black, 0.2f + 0.8f * unifiedRandom.NextFloat());
						}
						color30 = color31;
						float num159 = num156 / (float)ProjectileID.Sets.TrailCacheLength[projectile.type];
						num159 = Utils.GetLerpValue(0f, (float)ProjectileID.Sets.TrailCacheLength[projectile.type] * 0.75f, num156, clamped: true);
						color30 *= num159;
						value17 += unifiedRandom.NextVector2Circular(8f, 8f);
					}
					if (projectile.type == 933)
					{
						float t = projectile.localAI[0] - (float)num151;
						float scale3 = Utils.GetLerpValue(0f, 20f, t, clamped: true) * Utils.GetLerpValue(68f, 60f, t, clamped: true);
						float lerpValue3 = Utils.GetLerpValue(0f, ProjectileID.Sets.TrailCacheLength[projectile.type], num156, clamped: true);
						color30 = Microsoft.Xna.Framework.Color.White * lerpValue3 * projectile.Opacity * scale3;
					}
					Vector2 position2 = value17 + zero + projectile.Size / 2f - screenPosition + new Vector2(0f, projectile.gfxOffY);
					EntitySpriteDraw(value13, position2, value15, color30, num157 + num144 + projectile.rotation * num150 * (float)(num151 - 1) * (float)(-spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt()), origin4, MathHelper.Lerp(projectile.scale, value14, (float)num151 / num149), effects2, 0);
				}
				if (projectile.type == 661)
				{
					Microsoft.Xna.Framework.Color color32 = new Microsoft.Xna.Framework.Color(120, 40, 222, 120);
					for (int num160 = 0; num160 < 4; num160++)
					{
						EntitySpriteDraw(TextureAssets.Extra[75].Value, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY) + projectile.rotation.ToRotationVector2().RotatedBy((float)Math.PI / 2f * (float)num160) * 4f, rectangle3, color32, projectile.rotation, origin4, projectile.scale, spriteEffects, 0);
					}
				}
				if (projectile.type == 864)
				{
					Microsoft.Xna.Framework.Color floatingDaggerMinionGlowColor = projectile.GetFloatingDaggerMinionGlowColor();
					floatingDaggerMinionGlowColor.A /= 4;
					Microsoft.Xna.Framework.Rectangle value18 = rectangle3;
					value18.Y += value18.Height;
					for (int num161 = 0; num161 < 4; num161++)
					{
						EntitySpriteDraw(value13, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY) + projectile.rotation.ToRotationVector2().RotatedBy((float)Math.PI / 2f * (float)num161) * 2f, value18, floatingDaggerMinionGlowColor, projectile.rotation, origin4, projectile.scale, spriteEffects, 0);
					}
				}
				if (projectile.type == 873 || projectile.type == 931)
				{
					Microsoft.Xna.Framework.Color color33 = projectile.AI_171_GetColor() * 0.5f;
					color33.A = 0;
					if (projectile.type == 931)
					{
						color33 = projectile.GetFairyQueenWeaponsColor(0f);
					}
					Vector2 vector28 = projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY);
					EntitySpriteDraw(value13, vector28, rectangle3, color33, projectile.rotation, origin4, projectile.scale * 0.9f, spriteEffects, 0);
					Texture2D value19 = TextureAssets.Extra[98].Value;
					Microsoft.Xna.Framework.Color color34 = color33;
					Vector2 origin5 = value19.Size() / 2f;
					Microsoft.Xna.Framework.Color color35 = color33 * 0.5f;
					float num162 = Utils.GetLerpValue(15f, 30f, projectile.timeLeft, clamped: true) * Utils.GetLerpValue(240f, 200f, projectile.timeLeft, clamped: true) * (1f + 0.2f * (float)Math.Cos(GlobalTimeWrappedHourly % 30f / 0.5f * ((float)Math.PI * 2f) * 3f)) * 0.8f;
					Vector2 vector29 = new Vector2(0.5f, 5f) * num162;
					Vector2 vector30 = new Vector2(0.5f, 2f) * num162;
					color34 *= num162;
					color35 *= num162;
					int num163 = 0;
					Vector2 position3 = vector28 + projectile.velocity.SafeNormalize(Vector2.Zero) * MathHelper.Lerp(0.5f, 1f, projectile.localAI[0] / 60f) * num163;
					if (projectile.type == 931)
					{
						vector29 *= 0.4f;
						vector30 *= 0.4f;
					}
					EntitySpriteDraw(value19, position3, null, color34, (float)Math.PI / 2f, origin5, vector29, spriteEffects, 0);
					EntitySpriteDraw(value19, position3, null, color34, 0f, origin5, vector30, spriteEffects, 0);
					EntitySpriteDraw(value19, position3, null, color35, (float)Math.PI / 2f, origin5, vector29 * 0.6f, spriteEffects, 0);
					EntitySpriteDraw(value19, position3, null, color35, 0f, origin5, vector30 * 0.6f, spriteEffects, 0);
				}
				if (projectile.type == 755)
				{
					Microsoft.Xna.Framework.Color color36 = projectile.AI_156_GetColor();
					color36.A = 120;
					for (int num164 = 0; num164 < 4; num164++)
					{
						EntitySpriteDraw(value13, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY) + projectile.rotation.ToRotationVector2().RotatedBy((float)Math.PI / 2f * (float)num164) * 2f, rectangle3, color36, projectile.rotation, origin4, projectile.scale, spriteEffects, 0);
					}
				}
				else if (projectile.type == 684)
				{
					float x12 = (projectile.localAI[0] * ((float)Math.PI * 2f) / 30f).ToRotationVector2().X;
					Microsoft.Xna.Framework.Color color37 = new Microsoft.Xna.Framework.Color(220, 40, 30, 40);
					color37 *= 0.75f + 0.25f * x12;
					for (int num165 = 0; num165 < 8; num165++)
					{
						EntitySpriteDraw(value13, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY) + projectile.rotation.ToRotationVector2().RotatedBy((float)Math.PI / 4f * (float)num165) * (4f + 1f * x12), rectangle3, color37, projectile.rotation, origin4, projectile.scale, spriteEffects, 0);
					}
				}
				else if (ProjectileID.Sets.IsAGolfBall[projectile.type])
				{
					Player player2 = Main.player[projectile.owner];
					bool flag25 = GolfHelper.IsPlayerHoldingClub(player2);
					bool flag26 = false;
					if (flag25)
					{
						flag26 |= player2.ownedProjectileCounts[722] > 0 && player2.itemAnimation >= player2.itemAnimationMax;
						flag26 |= player2.itemAnimation == 0;
						flag26 &= player2.velocity.Y == 0f;
					}
					Vector2 shotVector = MouseWorld - projectile.Center;
					if (projectile.owner == myPlayer && flag25 && flag26 && GolfHelper.IsGolfBallResting(projectile) && GolfHelper.ValidateShot(projectile, player2, shotVector))
					{
						color29 = Microsoft.Xna.Framework.Color.White;
						Projectile projectile2 = null;
						for (int num166 = 0; num166 < 1000; num166++)
						{
							Projectile projectile3 = Main.projectile[num166];
							if (projectile3.active && projectile3.owner == player2.whoAmI && projectile3.type == 722)
							{
								projectile2 = projectile3;
								break;
							}
						}
						if (projectile2 != null)
						{
							GolfHelper.ShotStrength shotStrength = GolfHelper.CalculateShotStrength(projectile2, projectile);
							Vector2 impactVelocity = Vector2.Normalize(shotVector) * shotStrength.AbsoluteStrength;
							if (impactVelocity.Length() > 0.05f)
							{
								GolfHelper.DrawPredictionLine(projectile, impactVelocity, shotStrength.RelativeStrength, shotStrength.RoughLandResistance);
							}
						}
					}
					if (!GolfHelper.IsGolfBallResting(projectile))
					{
						Microsoft.Xna.Framework.Color golfTrailColor = Projectile.GetGolfTrailColor(projectile);
						float num167 = projectile.velocity.Length() / 16f;
						if (num167 > 1f)
						{
							num167 = 1f;
						}
						golfTrailColor *= num167;
						if (projectile.oldPos[4] != Vector2.Zero)
						{
							color29 = Microsoft.Xna.Framework.Color.White;
							for (float num168 = 0f; num168 <= 1f; num168 += 0.04f)
							{
								EntitySpriteDraw(value13, Vector2.Lerp(projectile.oldPos[4], projectile.position, num168) + projectile.Size / 2f - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, golfTrailColor * num168, projectile.rotation, origin4, projectile.scale * MathHelper.Lerp(0.7f, 1.5f, num168), spriteEffects, 0);
							}
						}
						EntitySpriteDraw(value13, projectile.position + projectile.Size / 2f - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, golfTrailColor, projectile.rotation, origin4, projectile.scale * 1.5f, spriteEffects, 0);
					}
				}
				Microsoft.Xna.Framework.Color color38 = projectile.GetAlpha(color29);
				float num169 = projectile.scale;
				float rotation23 = projectile.rotation + num144;
				if (projectile.type == 640)
				{
					color38 = Microsoft.Xna.Framework.Color.Transparent;
				}
				if (projectile.type == 684)
				{
					color38.A = 127;
				}
				if (projectile.type == 873)
				{
					color38.A /= 2;
				}
				if (projectile.type == 931)
				{
					color38.A /= 2;
				}
				if (projectile.type == 872)
				{
					color38 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * projectile.Opacity;
					num169 *= 0.9f;
				}
				if (projectile.type == 818)
				{
					color38 = Microsoft.Xna.Framework.Color.Transparent;
				}
				if (projectile.type == 916)
				{
					color38 = Microsoft.Xna.Framework.Color.Black;
				}
				if (projectile.type == 933)
				{
					float t2 = projectile.localAI[0];
					float num170 = Utils.GetLerpValue(0f, 20f, t2, clamped: true) * Utils.GetLerpValue(68f, 60f, t2, clamped: true);
					color38 *= num170;
				}
				EntitySpriteDraw(value13, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, color38, rotation23, origin4, num169, spriteEffects, 0);
				if (projectile.type == 894)
				{
					float num171 = Utils.WrappedLerp(0.6f, 1f, (float)((int)timeForVisualEffects % 70) / 70f);
					EntitySpriteDraw(color: new Microsoft.Xna.Framework.Color(num171, num171, num171, 150f), texture: TextureAssets.GlowMask[282].Value, position: projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY), sourceRectangle: rectangle3, rotation: projectile.rotation, origin: origin4, scale: projectile.scale, effects: spriteEffects, worthless: 0);
				}
				if (projectile.type == 503)
				{
					EntitySpriteDraw(TextureAssets.Extra[36].Value, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, Microsoft.Xna.Framework.Color.White, projectile.localAI[0], origin4, projectile.scale, spriteEffects, 0);
				}
				else if (projectile.type == 533)
				{
					EntitySpriteDraw(TextureAssets.GlowMask[128].Value, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, Microsoft.Xna.Framework.Color.White * 0.3f, projectile.rotation, origin4, projectile.scale, spriteEffects, 0);
				}
				else if (projectile.type == 261)
				{
					float scale4 = 0.7f;
					float num172 = projectile.velocity.Length();
					if (num172 < 0.3f && projectile.velocity.Y == 0f)
					{
						scale4 = Utils.GetLerpValue(0.02f, 0.3f, num172, clamped: true) * 0.7f;
					}
					EntitySpriteDraw(TextureAssets.GlowMask[252].Value, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, Microsoft.Xna.Framework.Color.White * scale4, projectile.rotation, origin4, projectile.scale, spriteEffects, 0);
				}
				else if (projectile.type == 601)
				{
					Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
					white2.A = 0;
					EntitySpriteDraw(value13, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, white2, projectile.rotation, origin4, projectile.scale * 0.7f, spriteEffects, 0);
				}
				else if (ProjectileID.Sets.IsAGolfBall[projectile.type] && GolfHelper.IsGolfBallResting(projectile) && GolfHelper.IsPlayerHoldingClub(LocalPlayer) && GolfHelper.IsGolfShotValid(projectile, LocalPlayer) && projectile.owner == myPlayer)
				{
					EntitySpriteDraw(TextureAssets.GolfBallOutline.Value, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, Microsoft.Xna.Framework.Color.White, projectile.rotation, origin4, projectile.scale, spriteEffects, 0);
				}
				if (projectile.type == 933)
				{
					float t3 = projectile.localAI[0];
					float scale5 = Utils.GetLerpValue(0f, 20f, t3, clamped: true) * Utils.GetLerpValue(68f, 60f, t3, clamped: true);
					EntitySpriteDraw(value13, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle3, new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * projectile.Opacity * scale5, rotation23, origin4, num169 * 1.25f, spriteEffects, 0);
					FinalFractalHelper.FinalFractalProfile finalFractalProfile = FinalFractalHelper.GetFinalFractalProfile((int)projectile.ai[1]);
					Microsoft.Xna.Framework.Color trailColor = finalFractalProfile.trailColor;
					trailColor.A /= 2;
					DrawPrettyStarSparkle(projectile, spriteEffects, projectile.Center + zero - screenPosition + new Vector2(0f, projectile.gfxOffY) + (projectile.rotation - (float)Math.PI / 2f).ToRotationVector2() * finalFractalProfile.trailWidth, Microsoft.Xna.Framework.Color.White * scale5, trailColor * scale5);
				}
			}
			else if (projectile.type == 672)
			{
				Vector2 position4 = projectile.Center - screenPosition;
				if (projectile.localAI[1] == 0f)
				{
					position4.Y += 60f;
					float num173 = projectile.localAI[0] / 120f;
					for (int num174 = 0; num174 < 4; num174++)
					{
						float value20 = num173 * 2f - (float)num174 / 3f;
						value20 = MathHelper.Clamp(value20, 0f, 1f);
						float num175 = 1f - MathHelper.Clamp((num173 - 0.8f) / 0.2f, 0f, 1f);
						EntitySpriteDraw(TextureAssets.MagicPixel.Value, position4, null, new Microsoft.Xna.Framework.Color(0.4f, 0.17f, 0.4f, 0f) * (value20 * num175) * 1.3f, 0f, new Vector2((float)TextureAssets.MagicPixel.Width() / 2f, TextureAssets.MagicPixel.Height()), new Vector2((float)Math.Sqrt(value20) * 100f, value20 * 2f), SpriteEffects.None, 0);
					}
				}
				else if (projectile.localAI[1] == 1f)
				{
					_ = projectile.localAI[0] / 300f;
					float scale6 = Math.Min(1f, projectile.localAI[0] / 30f);
					int num176 = (int)(GlobalTimeWrappedHourly * 10f) % 8;
					DrawElderEye(spriteBatch, projectile.Center, 1f, 1f, num176, Microsoft.Xna.Framework.Color.White * scale6);
					DrawElderEye(spriteBatch, projectile.Center, 1f, 1f, (num176 + 1) % 8, new Microsoft.Xna.Framework.Color(0.2f, 0.2f, 0.2f, 0f) * scale6);
				}
				else if (projectile.localAI[1] == 2f)
				{
					int num177 = (int)(GlobalTimeWrappedHourly * 10f) % 8;
					DrawElderEye(spriteBatch, projectile.Center, 1f, 1f, num177, Microsoft.Xna.Framework.Color.White);
					DrawElderEye(spriteBatch, projectile.Center, 1f, 1f, (num177 + 1) % 8, new Microsoft.Xna.Framework.Color(0.2f, 0.2f, 0.2f, 0f));
				}
			}
			else
			{
				if (projectile.type == 713)
				{
					return;
				}
				if (projectile.type == 754)
				{
					Texture2D value21 = TextureAssets.Projectile[projectile.type].Value;
					Microsoft.Xna.Framework.Rectangle rectangle4 = value21.Frame(5, 2, projectile.frame);
					rectangle4.Width -= 2;
					rectangle4.Height -= 2;
					Vector2 origin6 = new Vector2(rectangle4.Width / 2, 0f);
					float y13 = projectile.position.Y;
					float num178 = projectile.ai[0] + 8f + 2f - (float)rectangle4.Height + 2f;
					Microsoft.Xna.Framework.Color alpha2 = projectile.GetAlpha(color29);
					Vector2 top = projectile.Top;
					if (projectile.ai[1] == 2f)
					{
						rectangle4 = value21.Frame(5, 2, 4);
						rectangle4.Width -= 2;
						rectangle4.Height -= 2;
						origin6 = new Vector2(rectangle4.Width / 2, 0f);
						alpha2 = projectile.GetAlpha(Lighting.GetColor((int)(top.X + (float)(rectangle4.Width / 2)) / 16, (int)((num178 - 2f + (float)(rectangle4.Height / 2)) / 16f)));
						EntitySpriteDraw(value21, new Vector2(top.X, num178 - 2f) - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle4, alpha2, projectile.rotation, origin6, projectile.scale, spriteEffects, 0);
						return;
					}
					for (float num179 = y13; num179 < num178; num179 += (float)rectangle4.Height)
					{
						Vector2 value22 = top;
						value22.Y = num179;
						Microsoft.Xna.Framework.Rectangle value23 = rectangle4;
						float num180 = num178 - num179;
						if (num180 < (float)value23.Height)
						{
							value23.Height = (int)num180;
						}
						alpha2 = projectile.GetAlpha(Lighting.GetColor((int)(value22.X + (float)(value23.Width / 2)) / 16, (int)((value22.Y + (float)(value23.Height / 2)) / 16f)));
						EntitySpriteDraw(value21, value22 - screenPosition + new Vector2(0f, projectile.gfxOffY), value23, alpha2, projectile.rotation, origin6, projectile.scale, spriteEffects, 0);
						if (rectangle4.Y == 0)
						{
							rectangle4.Y += rectangle4.Height + 2;
						}
					}
					rectangle4 = value21.Frame(5, 2, 4);
					rectangle4.Width -= 2;
					rectangle4.Height -= 2;
					origin6 = new Vector2(rectangle4.Width / 2, 0f);
					alpha2 = projectile.GetAlpha(Lighting.GetColor((int)(top.X + (float)(rectangle4.Width / 2)) / 16, (int)((num178 - 2f + (float)(rectangle4.Height / 2)) / 16f)));
					EntitySpriteDraw(value21, new Vector2(top.X, num178 - 2f) - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle4, alpha2, projectile.rotation, origin6, projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.type == 12 || projectile.type == 728)
				{
					Texture2D value24 = TextureAssets.Projectile[projectile.type].Value;
					Microsoft.Xna.Framework.Rectangle rectangle5 = new Microsoft.Xna.Framework.Rectangle(0, 0, value24.Width, value24.Height);
					Vector2 origin7 = rectangle5.Size() / 2f;
					Microsoft.Xna.Framework.Color alpha3 = projectile.GetAlpha(color29);
					Texture2D value25 = TextureAssets.Extra[91].Value;
					Microsoft.Xna.Framework.Rectangle value26 = value25.Frame();
					Vector2 origin8 = new Vector2((float)value26.Width / 2f, 10f);
					_ = Microsoft.Xna.Framework.Color.Cyan * 0.5f;
					Vector2 value27 = new Vector2(0f, projectile.gfxOffY);
					Vector2 spinningpoint = new Vector2(0f, -10f);
					float num181 = (float)timeForVisualEffects / 60f;
					Vector2 value28 = projectile.Center + projectile.velocity;
					Microsoft.Xna.Framework.Color color40 = Microsoft.Xna.Framework.Color.Blue * 0.2f;
					Microsoft.Xna.Framework.Color value29 = Microsoft.Xna.Framework.Color.White * 0.5f;
					value29.A = 0;
					float num182 = 0f;
					if (projectile.type == 728)
					{
						color40 = Microsoft.Xna.Framework.Color.Orange * 0.2f;
						value29 = Microsoft.Xna.Framework.Color.Gold * 0.5f;
						value29.A = 50;
						num182 = -0.2f;
					}
					Microsoft.Xna.Framework.Color color41 = color40;
					color41.A = 0;
					Microsoft.Xna.Framework.Color color42 = color40;
					color42.A = 0;
					Microsoft.Xna.Framework.Color color43 = color40;
					color43.A = 0;
					EntitySpriteDraw(value25, value28 - screenPosition + value27 + spinningpoint.RotatedBy((float)Math.PI * 2f * num181), value26, color41, projectile.velocity.ToRotation() + (float)Math.PI / 2f, origin8, 1.5f + num182, SpriteEffects.None, 0);
					EntitySpriteDraw(value25, value28 - screenPosition + value27 + spinningpoint.RotatedBy((float)Math.PI * 2f * num181 + (float)Math.PI * 2f / 3f), value26, color42, projectile.velocity.ToRotation() + (float)Math.PI / 2f, origin8, 1.1f + num182, SpriteEffects.None, 0);
					EntitySpriteDraw(value25, value28 - screenPosition + value27 + spinningpoint.RotatedBy((float)Math.PI * 2f * num181 + 4.18879032f), value26, color43, projectile.velocity.ToRotation() + (float)Math.PI / 2f, origin8, 1.3f + num182, SpriteEffects.None, 0);
					Vector2 value30 = projectile.Center - projectile.velocity * 0.5f;
					for (float num183 = 0f; num183 < 1f; num183 += 0.5f)
					{
						float num184 = num181 % 0.5f / 0.5f;
						num184 = (num184 + num183) % 1f;
						float num185 = num184 * 2f;
						if (num185 > 1f)
						{
							num185 = 2f - num185;
						}
						EntitySpriteDraw(value25, value30 - screenPosition + value27, value26, value29 * num185, projectile.velocity.ToRotation() + (float)Math.PI / 2f, origin8, 0.3f + num184 * 0.5f, SpriteEffects.None, 0);
					}
					EntitySpriteDraw(value24, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle5, alpha3, projectile.rotation, origin7, projectile.scale + 0.1f, spriteEffects, 0);
					return;
				}
				if (projectile.type == 756)
				{
					Texture2D value31 = TextureAssets.Projectile[projectile.type].Value;
					Microsoft.Xna.Framework.Rectangle value32 = value31.Frame(1, 6, 0, projectile.frame);
					Vector2 origin9 = new Vector2(16f, value32.Height / 2);
					Microsoft.Xna.Framework.Color alpha4 = projectile.GetAlpha(color29);
					Vector2 scale7 = new Vector2(projectile.scale);
					float lerpValue4 = Utils.GetLerpValue(30f, 25f, projectile.ai[0], clamped: true);
					scale7.Y *= lerpValue4;
					Vector4 vector31 = color29.ToVector4();
					Vector4 vector32 = new Microsoft.Xna.Framework.Color(67, 17, 17).ToVector4();
					vector32 *= vector31;
					EntitySpriteDraw(TextureAssets.Extra[98].Value, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY) - projectile.velocity * projectile.scale * 0.5f, null, projectile.GetAlpha(new Microsoft.Xna.Framework.Color(vector32.X, vector32.Y, vector32.Z, vector32.W)) * 1f, projectile.rotation + (float)Math.PI / 2f, TextureAssets.Extra[98].Value.Size() / 2f, projectile.scale * 0.9f, spriteEffects, 0);
					EntitySpriteDraw(value31, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), value32, alpha4, projectile.rotation, origin9, scale7, spriteEffects, 0);
					return;
				}
				if (projectile.type == 723 || projectile.type == 726 || projectile.type == 725 || projectile.type == 724)
				{
					Texture2D value33 = TextureAssets.Projectile[projectile.type].Value;
					Microsoft.Xna.Framework.Rectangle rectangle6 = new Microsoft.Xna.Framework.Rectangle(0, 0, value33.Width, value33.Height);
					Vector2 origin10 = rectangle6.Size() / 2f;
					Microsoft.Xna.Framework.Color alpha5 = projectile.GetAlpha(color29);
					Texture2D value34 = TextureAssets.Extra[91].Value;
					Microsoft.Xna.Framework.Rectangle value35 = value34.Frame();
					Vector2 origin11 = new Vector2((float)value35.Width / 2f, 10f);
					_ = Microsoft.Xna.Framework.Color.White * 0.2f;
					Vector2 value36 = new Vector2(0f, projectile.gfxOffY);
					Vector2 spinningpoint2 = new Vector2(0f, -5f);
					float num186 = (float)timeForVisualEffects / 60f;
					Vector2 value37 = projectile.Center + projectile.velocity;
					float num187 = 1.5f;
					float num188 = 1.1f;
					float num189 = 1.3f;
					Microsoft.Xna.Framework.Color color44 = Microsoft.Xna.Framework.Color.Blue * 0.1f;
					Microsoft.Xna.Framework.Color value38 = Microsoft.Xna.Framework.Color.White * 0.3f;
					value38.A = 0;
					byte a = 0;
					if (projectile.type == 726)
					{
						Microsoft.Xna.Framework.Color value39 = new Microsoft.Xna.Framework.Color(180, 20, 255);
						color44 = value39 * 0.3f;
						value38 = value39 * 0.3f;
						a = 60;
						float num190 = 0.6f;
						num187 -= num190;
						num188 -= num190;
						num189 -= num190;
					}
					if (projectile.type == 725)
					{
						Microsoft.Xna.Framework.Color value40 = new Microsoft.Xna.Framework.Color(255, 80, 255);
						Microsoft.Xna.Framework.Color value41 = new Microsoft.Xna.Framework.Color(255, 255, 0);
						color44 = Microsoft.Xna.Framework.Color.Lerp(value40, value41, 0.2f) * 0.3f;
						value38 = Microsoft.Xna.Framework.Color.Lerp(value40, value41, 0.8f) * 0.4f;
						a = 50;
						float num191 = 0.5f;
						num187 -= num191;
						num188 -= num191;
						num189 -= num191;
					}
					if (projectile.type == 724)
					{
						Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Black, Microsoft.Xna.Framework.Color.Orange, 0.75f);
						Microsoft.Xna.Framework.Color color45 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Black, Microsoft.Xna.Framework.Color.Yellow, 0.5f);
						Microsoft.Xna.Framework.Color value42 = Microsoft.Xna.Framework.Color.Orange * 0.75f;
						color45 = Microsoft.Xna.Framework.Color.Yellow * 0.5f;
						color44 = Microsoft.Xna.Framework.Color.Lerp(value42, color45, 0.2f) * 0.3f;
						value38 = Microsoft.Xna.Framework.Color.Lerp(value42, color45, 0.8f) * 0.4f;
						a = 0;
						float num192 = 0.5f;
						num187 -= num192;
						num188 -= num192;
						num189 -= num192;
					}
					Microsoft.Xna.Framework.Color color46 = color44;
					color46.A = a;
					Microsoft.Xna.Framework.Color color47 = color44;
					color47.A = a;
					Microsoft.Xna.Framework.Color color48 = color44;
					color48.A = a;
					EntitySpriteDraw(value34, value37 - screenPosition + value36 + spinningpoint2.RotatedBy((float)Math.PI * 2f * num186), value35, color46, projectile.velocity.ToRotation() + (float)Math.PI / 2f, origin11, num187, SpriteEffects.None, 0);
					EntitySpriteDraw(value34, value37 - screenPosition + value36 + spinningpoint2.RotatedBy((float)Math.PI * 2f * num186 + (float)Math.PI * 2f / 3f), value35, color47, projectile.velocity.ToRotation() + (float)Math.PI / 2f, origin11, num188, SpriteEffects.None, 0);
					EntitySpriteDraw(value34, value37 - screenPosition + value36 + spinningpoint2.RotatedBy((float)Math.PI * 2f * num186 + 4.18879032f), value35, color48, projectile.velocity.ToRotation() + (float)Math.PI / 2f, origin11, num189, SpriteEffects.None, 0);
					Vector2 value43 = projectile.Center - projectile.velocity * 0.5f;
					for (float num193 = 0f; num193 < 1f; num193 += 0.5f)
					{
						float num194 = num186 % 0.5f / 0.5f;
						num194 = (num194 + num193) % 1f;
						float num195 = num194 * 2f;
						if (num195 > 1f)
						{
							num195 = 2f - num195;
						}
						EntitySpriteDraw(value34, value43 - screenPosition + value36, value35, value38 * num195, projectile.velocity.ToRotation() + (float)Math.PI / 2f, origin11, 0.5f + num194 * 0.5f, SpriteEffects.None, 0);
					}
					EntitySpriteDraw(value33, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), rectangle6, alpha5, projectile.rotation, origin10, projectile.scale + 0.1f, spriteEffects, 0);
					return;
				}
				if (projectile.type == 674)
				{
					Texture2D value44 = TextureAssets.Extra[60].Value;
					Vector2 origin12 = new Vector2(66f, 86f);
					Vector2 position5 = projectile.Center - screenPosition;
					Vector2 one = Vector2.One;
					one = new Vector2(4f, 1f) * 1.4f;
					Microsoft.Xna.Framework.Color color49 = new Microsoft.Xna.Framework.Color(115, 0, 155, 0);
					Microsoft.Xna.Framework.Color color50 = new Microsoft.Xna.Framework.Color(255, 180, 255, 0);
					float num196 = 0f;
					if (projectile.ai[0] < 30f)
					{
						num196 = Utils.GetLerpValue(0f, 30f, projectile.ai[0], clamped: true);
					}
					else if (projectile.ai[0] < 40f)
					{
						num196 = 1f + Utils.GetLerpValue(30f, 40f, projectile.ai[0], clamped: true);
					}
					Vector2 value45 = new Vector2(1f, 1f);
					Vector2 value46 = new Vector2(0.8f, 2f);
					if (num196 < 1f)
					{
						value45.X *= num196;
					}
					one *= num196;
					if (num196 < 1f)
					{
						color49 *= num196;
						color50 *= num196;
					}
					if (num196 > 1.5f)
					{
						float lerpValue5 = Utils.GetLerpValue(2f, 1.5f, num196, clamped: true);
						color49 *= lerpValue5;
						color50 *= lerpValue5;
					}
					float num197 = 0.42f;
					color49 *= num197;
					color50 *= num197;
					EntitySpriteDraw(value44, position5, null, color49, 0f, origin12, one * value45, SpriteEffects.None, 0);
					EntitySpriteDraw(value44, position5, null, color50, 0f, origin12, one * value46, SpriteEffects.None, 0);
					EntitySpriteDraw(TextureAssets.Extra[59].Value, position5, null, color49, 0f, origin12, one * value45 * new Vector2(1f, 0.3f), SpriteEffects.None, 0);
					return;
				}
				if (projectile.type == 440 || projectile.type == 449 || projectile.type == 606)
				{
					Microsoft.Xna.Framework.Rectangle value47 = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 500, (int)screenPosition.Y - 500, screenWidth + 1000, screenHeight + 1000);
					if (projectile.getRect().Intersects(value47))
					{
						Vector2 value48 = new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY);
						float num198 = 100f;
						float scaleFactor = 3f;
						if (projectile.type == 606)
						{
							num198 = 150f;
							scaleFactor = 3f;
						}
						if (projectile.ai[1] == 1f)
						{
							num198 = (int)projectile.localAI[0];
						}
						for (int num199 = 1; num199 <= (int)projectile.localAI[0]; num199++)
						{
							Vector2 value49 = Vector2.Normalize(projectile.velocity) * num199 * scaleFactor;
							Microsoft.Xna.Framework.Color alpha6 = projectile.GetAlpha(color29);
							alpha6 *= (num198 - (float)num199) / num198;
							alpha6.A = 0;
							EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, value48 - value49, null, alpha6, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
						}
					}
					return;
				}
				if (projectile.type == 687)
				{
					Vector2 center2 = projectile.Center;
					center2 -= screenPosition;
					float num200 = 40f;
					float num201 = num200 * 2f;
					float num202 = (float)projectile.frameCounter / num200;
					Texture2D value50 = TextureAssets.Projectile[projectile.type].Value;
					Microsoft.Xna.Framework.Color transparent = Microsoft.Xna.Framework.Color.Transparent;
					Microsoft.Xna.Framework.Color color51 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
					Microsoft.Xna.Framework.Color color52 = new Microsoft.Xna.Framework.Color(180, 30, 30, 200);
					Microsoft.Xna.Framework.Color color53 = new Microsoft.Xna.Framework.Color(0, 0, 0, 30);
					ulong seed = 1uL;
					for (float num203 = 0f; num203 < 15f; num203 += 1f)
					{
						float num204 = Utils.RandomFloat(seed) * 0.25f - 0.125f;
						Vector2 value51 = (projectile.rotation + num204).ToRotationVector2();
						Vector2 value52 = center2 + value51 * 400f;
						float num205 = num202 + num203 * (71f / (339f * (float)Math.PI));
						int num206 = (int)(num205 / (71f / (339f * (float)Math.PI)));
						num205 %= 1f;
						if ((!(num205 > num202 % 1f) || !((float)projectile.frameCounter < num200)) && (!(num205 < num202 % 1f) || !((float)projectile.frameCounter >= num201 - num200)))
						{
							transparent = ((num205 < 0.1f) ? Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color51, Utils.GetLerpValue(0f, 0.1f, num205, clamped: true)) : ((num205 < 0.35f) ? color51 : ((num205 < 0.7f) ? Microsoft.Xna.Framework.Color.Lerp(color51, color52, Utils.GetLerpValue(0.35f, 0.7f, num205, clamped: true)) : ((num205 < 0.9f) ? Microsoft.Xna.Framework.Color.Lerp(color52, color53, Utils.GetLerpValue(0.7f, 0.9f, num205, clamped: true)) : ((!(num205 < 1f)) ? Microsoft.Xna.Framework.Color.Transparent : Microsoft.Xna.Framework.Color.Lerp(color53, Microsoft.Xna.Framework.Color.Transparent, Utils.GetLerpValue(0.9f, 1f, num205, clamped: true)))))));
							float num207 = 0.9f + num205 * 0.8f;
							num207 *= num207;
							num207 *= 0.8f;
							Vector2 position6 = Vector2.SmoothStep(center2, value52, num205);
							Microsoft.Xna.Framework.Rectangle rectangle7 = value50.Frame(1, 7, 0, (int)(num205 * 7f));
							EntitySpriteDraw(value50, position6, rectangle7, transparent, projectile.rotation + (float)Math.PI * 2f * (num205 + GlobalTimeWrappedHourly * 1.2f) * 0.2f + (float)num206 * ((float)Math.PI * 2f / 5f), rectangle7.Size() / 2f, num207, SpriteEffects.None, 0);
						}
					}
					return;
				}
				if (projectile.type == 651)
				{
					if (projectile.owner != myPlayer)
					{
						return;
					}
					Player player3 = Main.player[projectile.owner];
					Microsoft.Xna.Framework.Point point = new Vector2(projectile.ai[0], projectile.ai[1]).ToPoint();
					Microsoft.Xna.Framework.Point point2 = projectile.Center.ToTileCoordinates();
					Microsoft.Xna.Framework.Color color54 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
					Microsoft.Xna.Framework.Color color55 = new Microsoft.Xna.Framework.Color(127, 127, 127, 0);
					int num208 = 1;
					float num209 = 0f;
					WiresUI.Settings.MultiToolMode toolMode = WiresUI.Settings.ToolMode;
					bool flag27 = toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Actuator);
					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Red))
					{
						num209 += 1f;
						color55 = Microsoft.Xna.Framework.Color.Lerp(color55, Microsoft.Xna.Framework.Color.Red, 1f / num209);
					}
					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Blue))
					{
						num209 += 1f;
						color55 = Microsoft.Xna.Framework.Color.Lerp(color55, Microsoft.Xna.Framework.Color.Blue, 1f / num209);
					}
					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Green))
					{
						num209 += 1f;
						color55 = Microsoft.Xna.Framework.Color.Lerp(color55, new Microsoft.Xna.Framework.Color(0, 255, 0), 1f / num209);
					}
					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Yellow))
					{
						num209 += 1f;
						color55 = Microsoft.Xna.Framework.Color.Lerp(color55, new Microsoft.Xna.Framework.Color(255, 255, 0), 1f / num209);
					}
					if (toolMode.HasFlag(WiresUI.Settings.MultiToolMode.Cutter))
					{
						color54 = new Microsoft.Xna.Framework.Color(50, 50, 50, 255);
					}
					color55.A = 0;
					if (point == point2)
					{
						Vector2 position7 = point2.ToVector2() * 16f - screenPosition;
						Microsoft.Xna.Framework.Rectangle value53 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						if (flag27)
						{
							EntitySpriteDraw(TextureAssets.WireUi[11].Value, position7, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						}
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position7, value53, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						value53.Y = 18;
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position7, value53, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						return;
					}
					if (point.X == point2.X)
					{
						int num210 = point2.Y - point.Y;
						int num211 = Math.Sign(num210);
						Vector2 position8 = point.ToVector2() * 16f - screenPosition;
						Microsoft.Xna.Framework.Rectangle value54 = new Microsoft.Xna.Framework.Rectangle((num210 * num208 > 0) ? 72 : 18, 0, 16, 16);
						if (flag27)
						{
							EntitySpriteDraw(TextureAssets.WireUi[11].Value, position8, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						}
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position8, value54, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						value54.Y = 18;
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position8, value54, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						for (int num212 = point.Y + num211; num212 != point2.Y; num212 += num211)
						{
							position8 = new Vector2(point.X * 16, num212 * 16) - screenPosition;
							value54.Y = 0;
							value54.X = 90;
							if (flag27)
							{
								EntitySpriteDraw(TextureAssets.WireUi[11].Value, position8, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
							}
							EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position8, value54, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
							value54.Y = 18;
							EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position8, value54, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						}
						position8 = point2.ToVector2() * 16f - screenPosition;
						value54 = new Microsoft.Xna.Framework.Rectangle((num210 * num208 > 0) ? 18 : 72, 0, 16, 16);
						if (flag27)
						{
							EntitySpriteDraw(TextureAssets.WireUi[11].Value, position8, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						}
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position8, value54, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						value54.Y = 18;
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position8, value54, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						return;
					}
					if (point.Y == point2.Y)
					{
						int num213 = point2.X - point.X;
						int num214 = Math.Sign(num213);
						Vector2 position9 = point.ToVector2() * 16f - screenPosition;
						Microsoft.Xna.Framework.Rectangle value55 = new Microsoft.Xna.Framework.Rectangle((num213 > 0) ? 36 : 144, 0, 16, 16);
						if (flag27)
						{
							EntitySpriteDraw(TextureAssets.WireUi[11].Value, position9, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						}
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position9, value55, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						value55.Y = 18;
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position9, value55, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						for (int num215 = point.X + num214; num215 != point2.X; num215 += num214)
						{
							position9 = new Vector2(num215 * 16, point.Y * 16) - screenPosition;
							value55.Y = 0;
							value55.X = 180;
							if (flag27)
							{
								EntitySpriteDraw(TextureAssets.WireUi[11].Value, position9, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
							}
							EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position9, value55, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
							value55.Y = 18;
							EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position9, value55, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						}
						position9 = point2.ToVector2() * 16f - screenPosition;
						value55 = new Microsoft.Xna.Framework.Rectangle((num213 > 0) ? 144 : 36, 0, 16, 16);
						if (flag27)
						{
							EntitySpriteDraw(TextureAssets.WireUi[11].Value, position9, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						}
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position9, value55, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						value55.Y = 18;
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position9, value55, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						return;
					}
					Math.Abs(point.X - point2.X);
					Math.Abs(point.Y - point2.Y);
					int num216 = Math.Sign(point2.X - point.X);
					int num217 = Math.Sign(point2.Y - point.Y);
					Microsoft.Xna.Framework.Point p = default(Microsoft.Xna.Framework.Point);
					bool flag28 = false;
					bool flag29 = player3.direction == 1;
					int num218;
					int num219;
					int num220;
					if (flag29)
					{
						p.X = point.X;
						num218 = point.Y;
						num219 = point2.Y;
						num220 = num217;
					}
					else
					{
						p.Y = point.Y;
						num218 = point.X;
						num219 = point2.X;
						num220 = num216;
					}
					Vector2 position10 = point.ToVector2() * 16f - screenPosition;
					Microsoft.Xna.Framework.Rectangle value56 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
					if (!flag29)
					{
						value56.X = ((num220 > 0) ? 36 : 144);
					}
					else
					{
						value56.X = ((num220 > 0) ? 72 : 18);
					}
					if (flag27)
					{
						EntitySpriteDraw(TextureAssets.WireUi[11].Value, position10, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
					}
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position10, value56, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
					value56.Y = 18;
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position10, value56, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
					for (int num221 = num218 + num220; num221 != num219; num221 += num220)
					{
						if (flag28)
						{
							break;
						}
						if (flag29)
						{
							p.Y = num221;
						}
						else
						{
							p.X = num221;
						}
						if (WorldGen.InWorld(p.X, p.Y, 1) && tile[p.X, p.Y] != null)
						{
							position10 = p.ToVector2() * 16f - screenPosition;
							value56.Y = 0;
							if (!flag29)
							{
								value56.X = 180;
							}
							else
							{
								value56.X = 90;
							}
							if (flag27)
							{
								EntitySpriteDraw(TextureAssets.WireUi[11].Value, position10, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
							}
							EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position10, value56, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
							value56.Y = 18;
							EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position10, value56, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						}
					}
					if (flag29)
					{
						p.Y = point2.Y;
						num218 = point.X;
						num219 = point2.X;
						num220 = num216;
					}
					else
					{
						p.X = point2.X;
						num218 = point.Y;
						num219 = point2.Y;
						num220 = num217;
					}
					position10 = p.ToVector2() * 16f - screenPosition;
					value56 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
					if (!flag29)
					{
						value56.X += ((num216 > 0) ? 144 : 36);
						value56.X += ((num217 * num208 > 0) ? 72 : 18);
					}
					else
					{
						value56.X += ((num216 > 0) ? 36 : 144);
						value56.X += ((num217 * num208 > 0) ? 18 : 72);
					}
					if (flag27)
					{
						EntitySpriteDraw(TextureAssets.WireUi[11].Value, position10, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
					}
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position10, value56, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
					value56.Y = 18;
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position10, value56, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
					for (int num222 = num218 + num220; num222 != num219; num222 += num220)
					{
						if (flag28)
						{
							break;
						}
						if (!flag29)
						{
							p.Y = num222;
						}
						else
						{
							p.X = num222;
						}
						if (WorldGen.InWorld(p.X, p.Y, 1) && tile[p.X, p.Y] != null)
						{
							position10 = p.ToVector2() * 16f - screenPosition;
							value56.Y = 0;
							if (!flag29)
							{
								value56.X = 90;
							}
							else
							{
								value56.X = 180;
							}
							if (flag27)
							{
								EntitySpriteDraw(TextureAssets.WireUi[11].Value, position10, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
							}
							EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position10, value56, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
							value56.Y = 18;
							EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position10, value56, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
						}
					}
					position10 = point2.ToVector2() * 16f - screenPosition;
					value56 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
					if (!flag29)
					{
						value56.X += ((num217 * num208 > 0) ? 18 : 72);
					}
					else
					{
						value56.X += ((num216 > 0) ? 144 : 36);
					}
					if (flag27)
					{
						EntitySpriteDraw(TextureAssets.WireUi[11].Value, position10, null, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
					}
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position10, value56, color55, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
					value56.Y = 18;
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, position10, value56, color54, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0);
					return;
				}
				if (projectile.type == 586)
				{
					float num223 = 300f;
					if (projectile.ai[0] >= 100f)
					{
						num223 = MathHelper.Lerp(300f, 600f, (projectile.ai[0] - 100f) / 200f);
					}
					if (num223 > 600f)
					{
						num223 = 600f;
					}
					if (projectile.ai[0] >= 500f)
					{
						num223 = MathHelper.Lerp(600f, 1200f, (projectile.ai[0] - 500f) / 100f);
					}
					float rotation24 = projectile.rotation;
					Texture2D value57 = TextureAssets.Projectile[projectile.type].Value;
					int num224 = (int)(projectile.ai[0] / 6f);
					Vector2 spinningpoint3 = new Vector2(0f, 0f - num223);
					for (int num225 = 0; (float)num225 < 10f; num225++)
					{
						Microsoft.Xna.Framework.Rectangle rectangle8 = value57.Frame(1, 5, 0, (num224 + num225) % 5);
						float num226 = rotation24 + (float)Math.PI / 5f * (float)num225;
						Vector2 vector33 = spinningpoint3.RotatedBy(num226) / 3f + projectile.Center;
						Microsoft.Xna.Framework.Color alpha7 = projectile.GetAlpha(Lighting.GetColor(vector33.ToTileCoordinates()));
						alpha7.A /= 2;
						EntitySpriteDraw(value57, vector33 - screenPosition, rectangle8, alpha7, num226, rectangle8.Size() / 2f, projectile.scale, SpriteEffects.None, 0);
					}
					for (int num227 = 0; (float)num227 < 20f; num227++)
					{
						Microsoft.Xna.Framework.Rectangle rectangle9 = value57.Frame(1, 5, 0, (num224 + num227) % 5);
						float num228 = 0f - rotation24 + (float)Math.PI / 10f * (float)num227;
						num228 *= 2f;
						Vector2 vector34 = spinningpoint3.RotatedBy(num228) + projectile.Center;
						Microsoft.Xna.Framework.Color alpha7 = projectile.GetAlpha(Lighting.GetColor(vector34.ToTileCoordinates()));
						alpha7.A /= 2;
						EntitySpriteDraw(value57, vector34 - screenPosition, rectangle9, alpha7, num228, rectangle9.Size() / 2f, projectile.scale, SpriteEffects.None, 0);
					}
					return;
				}
				if (projectile.type == 536 || projectile.type == 591 || projectile.type == 607)
				{
					Texture2D value58 = TextureAssets.Projectile[projectile.type].Value;
					Vector2 position11 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					EntitySpriteDraw(scale: new Vector2(1f, projectile.velocity.Length() / (float)value58.Height), texture: value58, position: position11, sourceRectangle: null, color: projectile.GetAlpha(color29), rotation: projectile.rotation, origin: value58.Frame().Bottom(), effects: spriteEffects, worthless: 0);
					return;
				}
				if (projectile.type == 688 || projectile.type == 689 || projectile.type == 690)
				{
					Texture2D value59 = TextureAssets.Projectile[projectile.type].Value;
					Vector2 position12 = projectile.Top + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					Microsoft.Xna.Framework.Rectangle rectangle10 = value59.Frame(1, projFrames[projectile.type], 0, projectile.frame);
					Vector2 origin13 = rectangle10.Size() * new Vector2(0.5f, 0f);
					Microsoft.Xna.Framework.Color color56 = Microsoft.Xna.Framework.Color.Lerp(projectile.GetAlpha(color29), Microsoft.Xna.Framework.Color.White, 0.5f);
					Microsoft.Xna.Framework.Color color57 = color56;
					color57.A = 127;
					Texture2D texture2D2 = null;
					Texture2D texture2D3 = null;
					switch (projectile.type)
					{
					case 688:
						texture2D2 = TextureAssets.GlowMask[228].Value;
						texture2D3 = TextureAssets.Extra[86].Value;
						break;
					case 689:
						texture2D2 = TextureAssets.GlowMask[229].Value;
						texture2D3 = TextureAssets.Extra[87].Value;
						break;
					case 690:
						texture2D2 = TextureAssets.GlowMask[230].Value;
						texture2D3 = TextureAssets.Extra[88].Value;
						break;
					}
					EntitySpriteDraw(value59, position12, rectangle10, color56, projectile.rotation, origin13, projectile.scale, spriteEffects, 0);
					if (texture2D2 != null)
					{
						EntitySpriteDraw(texture2D2, position12, rectangle10, color57, projectile.rotation, origin13, projectile.scale, spriteEffects, 0);
					}
					if (texture2D3 != null)
					{
						Vector2 position13 = projectile.Center + Vector2.UnitY * projectile.gfxOffY - screenPosition;
						rectangle10 = texture2D3.Frame();
						origin13 = rectangle10.Size() * new Vector2(0.5f, 1f);
						origin13.Y -= 2f;
						EntitySpriteDraw(texture2D3, position13, rectangle10, color56, projectile.rotation, origin13, projectile.scale, spriteEffects, 0);
					}
					return;
				}
				if (projectile.type == 694 || projectile.type == 695 || projectile.type == 696)
				{
					Texture2D value60 = TextureAssets.Projectile[projectile.type].Value;
					Vector2 position14 = projectile.Bottom + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					Microsoft.Xna.Framework.Rectangle rectangle11 = value60.Frame(1, projFrames[projectile.type], 0, projectile.frame);
					Vector2 origin14 = rectangle11.Size() * new Vector2(0.5f, 1f);
					origin14.Y -= 8f;
					int type = projectile.type;
					if ((uint)(type - 694) <= 1u)
					{
						origin14.X += 3f;
					}
					Microsoft.Xna.Framework.Color color58 = Microsoft.Xna.Framework.Color.Lerp(projectile.GetAlpha(color29), Microsoft.Xna.Framework.Color.White, 0f);
					EntitySpriteDraw(value60, position14, rectangle11, color58, projectile.rotation, origin14, projectile.scale, spriteEffects, 0);
					EntitySpriteDraw(value60, position14, rectangle11, color58 * 0.3f, projectile.rotation, origin14, projectile.scale * 1.1f, spriteEffects, 0);
					return;
				}
				if (projectile.type == 409)
				{
					Texture2D value61 = TextureAssets.Projectile[projectile.type].Value;
					int num229 = TextureAssets.Projectile[projectile.type].Height() / projFrames[projectile.type];
					int y14 = num229 * projectile.frame;
					int num230 = 10;
					int num231 = 2;
					float value62 = 0.5f;
					for (int num232 = 1; num232 < num230; num232 += num231)
					{
						_ = projectile.oldPos[num232];
						Microsoft.Xna.Framework.Color newColor = color29;
						newColor = projectile.GetAlpha(newColor);
						newColor *= (float)(num230 - num232) / 15f;
						_ = projectile.oldPos[num232] - screenPosition + new Vector2(num137 + (float)num136, (float)(projectile.height / 2) + projectile.gfxOffY);
						EntitySpriteDraw(value61, projectile.oldPos[num232] + new Vector2(projectile.width, projectile.height) / 2f - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y14, value61.Width, num229), newColor, projectile.rotation, new Vector2((float)value61.Width / 2f, (float)num229 / 2f), MathHelper.Lerp(projectile.scale, value62, (float)num232 / 15f), spriteEffects, 0);
					}
					EntitySpriteDraw(value61, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y14, value61.Width, num229), projectile.GetAlpha(color29), projectile.rotation, new Vector2((float)value61.Width / 2f, (float)num229 / 2f), projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.type == 437)
				{
					Texture2D value63 = TextureAssets.Projectile[projectile.type].Value;
					int num233 = TextureAssets.Projectile[projectile.type].Height() / projFrames[projectile.type];
					int y15 = num233 * projectile.frame;
					int num234 = 10;
					int num235 = 2;
					float value64 = 0.2f;
					for (int num236 = 1; num236 < num234; num236 += num235)
					{
						_ = projectile.oldPos[num236];
						Microsoft.Xna.Framework.Color newColor2 = color29;
						newColor2 = projectile.GetAlpha(newColor2);
						newColor2 *= (float)(num234 - num236) / 15f;
						_ = projectile.oldPos[num236] - screenPosition + new Vector2(num137 + (float)num136, (float)(projectile.height / 2) + projectile.gfxOffY);
						EntitySpriteDraw(value63, projectile.oldPos[num236] + new Vector2(projectile.width, projectile.height) / 2f - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y15, value63.Width, num233), newColor2, projectile.rotation, new Vector2((float)value63.Width / 2f, (float)num233 / 2f), MathHelper.Lerp(projectile.scale, value64, (float)num236 / 15f), spriteEffects, 0);
					}
					EntitySpriteDraw(value63, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y15, value63.Width, num233), Microsoft.Xna.Framework.Color.White, projectile.rotation, new Vector2((float)value63.Width / 2f, (float)num233 / 2f), projectile.scale + 0.2f, spriteEffects, 0);
					EntitySpriteDraw(value63, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y15, value63.Width, num233), projectile.GetAlpha(Microsoft.Xna.Framework.Color.White), projectile.rotation, new Vector2((float)value63.Width / 2f, (float)num233 / 2f), projectile.scale + 0.2f, spriteEffects, 0);
					return;
				}
				if (projectile.type == 384 || projectile.type == 386)
				{
					Texture2D value65 = TextureAssets.Projectile[projectile.type].Value;
					int num237 = TextureAssets.Projectile[projectile.type].Height() / projFrames[projectile.type];
					int y16 = num237 * projectile.frame;
					EntitySpriteDraw(value65, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y16, value65.Width, num237), projectile.GetAlpha(color29), projectile.rotation, new Vector2((float)value65.Width / 2f, (float)num237 / 2f), projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.type == 439 || projectile.type == 460 || projectile.type == 600 || projectile.type == 615 || projectile.type == 630 || projectile.type == 633 || projectile.type == 705 || projectile.type == 714)
				{
					Texture2D value66 = TextureAssets.Projectile[projectile.type].Value;
					if (Main.player[projectile.owner].gravDir == -1f)
					{
						if (projectile.type == 705)
						{
							spriteEffects |= SpriteEffects.FlipVertically;
						}
						if (projectile.type == 615 || projectile.type == 714)
						{
							if (Main.player[projectile.owner].direction == 1)
							{
								spriteEffects = SpriteEffects.FlipVertically;
							}
							else if (Main.player[projectile.owner].direction == -1)
							{
								spriteEffects = SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically;
							}
						}
						else if (projectile.type == 600 || projectile.type == 439)
						{
							if (Main.player[projectile.owner].direction == 1)
							{
								spriteEffects = SpriteEffects.FlipHorizontally;
							}
							else if (Main.player[projectile.owner].direction == -1)
							{
								spriteEffects = SpriteEffects.None;
							}
						}
					}
					int num238 = TextureAssets.Projectile[projectile.type].Height() / projFrames[projectile.type];
					int y17 = num238 * projectile.frame;
					Vector2 vector35 = (projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition);
					float scale9 = 1f;
					if (Main.player[projectile.owner].shroomiteStealth && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].ranged)
					{
						float num239 = Main.player[projectile.owner].stealth;
						if ((double)num239 < 0.03)
						{
							num239 = 0.03f;
						}
						_ = (1f + num239 * 10f) / 11f;
						color29 *= num239;
						scale9 = num239;
					}
					if (Main.player[projectile.owner].setVortex && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].ranged)
					{
						float num240 = Main.player[projectile.owner].stealth;
						if ((double)num240 < 0.03)
						{
							num240 = 0.03f;
						}
						_ = (1f + num240 * 10f) / 11f;
						color29 = color29.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num240)));
						scale9 = num240;
					}
					if (projectile.type == 714)
					{
						y17 = 0;
						instance.LoadItem(3930);
						value66 = TextureAssets.Item[3930].Value;
					}
					EntitySpriteDraw(value66, vector35, new Microsoft.Xna.Framework.Rectangle(0, y17, value66.Width, num238), projectile.GetAlpha(color29), projectile.rotation, new Vector2((float)value66.Width / 2f, (float)num238 / 2f), projectile.scale, spriteEffects, 0);
					if (projectile.type == 439)
					{
						EntitySpriteDraw(TextureAssets.GlowMask[35].Value, vector35, new Microsoft.Xna.Framework.Rectangle(0, y17, value66.Width, num238), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * scale9, projectile.rotation, new Vector2((float)value66.Width / 2f, (float)num238 / 2f), projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 714)
					{
						y17 = num238 * projectile.frame;
						Microsoft.Xna.Framework.Color value67 = hslToRgb(projectile.ai[0] / 90f % 1f, 1f, 0.5f);
						value67.A = 120;
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, vector35, new Microsoft.Xna.Framework.Rectangle(0, y17, value66.Width, num238), value67 * scale9, projectile.rotation, new Vector2((float)value66.Width / 2f, (float)num238 / 2f), projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 615)
					{
						EntitySpriteDraw(TextureAssets.GlowMask[192].Value, vector35, new Microsoft.Xna.Framework.Rectangle(0, y17, value66.Width, num238), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale9, projectile.rotation, new Vector2((float)value66.Width / 2f, (float)num238 / 2f), projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 630)
					{
						EntitySpriteDraw(TextureAssets.GlowMask[200].Value, vector35, new Microsoft.Xna.Framework.Rectangle(0, y17, value66.Width, num238), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale9, projectile.rotation, new Vector2((float)value66.Width / 2f, (float)num238 / 2f), projectile.scale, spriteEffects, 0);
						if (projectile.localAI[0] > 0f)
						{
							int frameY = 6 - (int)(projectile.localAI[0] / 1f);
							value66 = TextureAssets.Extra[65].Value;
							EntitySpriteDraw(value66, vector35 + Vector2.Normalize(projectile.velocity) * 2f, value66.Frame(1, 6, 0, frameY), new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale9, projectile.rotation, new Vector2(spriteEffects.HasFlag(SpriteEffects.FlipHorizontally) ? value66.Width : 0, (float)num238 / 2f - 2f), projectile.scale, spriteEffects, 0);
						}
					}
					else if (projectile.type == 600)
					{
						Microsoft.Xna.Framework.Color portalColor = PortalHelper.GetPortalColor(projectile.owner, (int)projectile.ai[1]);
						portalColor.A = 70;
						EntitySpriteDraw(TextureAssets.GlowMask[173].Value, vector35, new Microsoft.Xna.Framework.Rectangle(0, y17, value66.Width, num238), portalColor, projectile.rotation, new Vector2((float)value66.Width / 2f, (float)num238 / 2f), projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 460)
					{
						if (Math.Abs(projectile.rotation - (float)Math.PI / 2f) > (float)Math.PI / 2f)
						{
							spriteEffects |= SpriteEffects.FlipVertically;
						}
						EntitySpriteDraw(TextureAssets.GlowMask[102].Value, vector35, new Microsoft.Xna.Framework.Rectangle(0, y17, value66.Width, num238), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation - (float)Math.PI / 2f, new Vector2((float)value66.Width / 2f, (float)num238 / 2f), projectile.scale, spriteEffects, 0);
						if (projectile.ai[0] > 180f && Main.projectile[(int)projectile.ai[1]].type == 461)
						{
							DrawProj((int)projectile.ai[1]);
						}
					}
					else if (projectile.type == 633)
					{
						float scaleFactor2 = (float)Math.Cos((float)Math.PI * 2f * (projectile.ai[0] / 30f)) * 2f + 2f;
						if (projectile.ai[0] > 120f)
						{
							scaleFactor2 = 4f;
						}
						for (float num241 = 0f; num241 < 4f; num241 += 1f)
						{
							EntitySpriteDraw(value66, vector35 + Vector2.UnitY.RotatedBy(num241 * ((float)Math.PI * 2f) / 4f) * scaleFactor2, new Microsoft.Xna.Framework.Rectangle(0, y17, value66.Width, num238), projectile.GetAlpha(color29).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0)) * 0.03f, projectile.rotation, new Vector2((float)value66.Width / 2f, (float)num238 / 2f), projectile.scale, spriteEffects, 0);
						}
					}
					return;
				}
				if (projectile.type == 442)
				{
					Texture2D value68 = TextureAssets.Projectile[projectile.type].Value;
					int num242 = TextureAssets.Projectile[projectile.type].Height() / projFrames[projectile.type];
					int y18 = num242 * projectile.frame;
					Vector2 position15 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					EntitySpriteDraw(value68, position15, new Microsoft.Xna.Framework.Rectangle(0, y18, value68.Width, num242), projectile.GetAlpha(color29), projectile.rotation, new Vector2((float)value68.Width / 2f, (float)num242 / 2f), projectile.scale, spriteEffects, 0);
					EntitySpriteDraw(TextureAssets.GlowMask[37].Value, position15, new Microsoft.Xna.Framework.Rectangle(0, y18, value68.Width, num242), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - (float)projectile.alpha / 255f), projectile.rotation, new Vector2((float)value68.Width / 2f, (float)num242 / 2f), projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.type == 447)
				{
					Texture2D value69 = TextureAssets.Projectile[projectile.type].Value;
					Texture2D value70 = TextureAssets.Extra[4].Value;
					int num243 = value69.Height / projFrames[projectile.type];
					int y19 = num243 * projectile.frame;
					int num244 = value70.Height / projFrames[projectile.type];
					int num245 = num244 * projectile.frame;
					Microsoft.Xna.Framework.Rectangle value71 = new Microsoft.Xna.Framework.Rectangle(0, num245, value70.Width, num244);
					Vector2 vector36 = projectile.position + new Vector2(projectile.width, 0f) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					EntitySpriteDraw(TextureAssets.Extra[4].Value, vector36, value71, projectile.GetAlpha(color29), projectile.rotation, new Vector2(value70.Width / 2, 0f), projectile.scale, spriteEffects, 0);
					int num246 = projectile.height - num243 - 14;
					if (num246 < 0)
					{
						num246 = 0;
					}
					if (num246 > 0)
					{
						if (num245 == num244 * 3)
						{
							num245 = num244 * 2;
						}
						EntitySpriteDraw(TextureAssets.Extra[4].Value, vector36 + Vector2.UnitY * (num244 - 1), new Microsoft.Xna.Framework.Rectangle(0, num245 + num244 - 1, value70.Width, 1), projectile.GetAlpha(color29), projectile.rotation, new Vector2(value70.Width / 2, 0f), new Vector2(1f, num246), spriteEffects, 0);
					}
					value71.Width = value69.Width;
					value71.Y = y19;
					EntitySpriteDraw(value69, vector36 + Vector2.UnitY * (num244 - 1 + num246), value71, projectile.GetAlpha(color29), projectile.rotation, new Vector2((float)value69.Width / 2f, 0f), projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.type == 455)
				{
					if (projectile.velocity == Vector2.Zero)
					{
						return;
					}
					Texture2D value72 = TextureAssets.Projectile[projectile.type].Value;
					Texture2D value73 = TextureAssets.Extra[21].Value;
					Texture2D value74 = TextureAssets.Extra[22].Value;
					float num247 = projectile.localAI[1];
					Microsoft.Xna.Framework.Color color59 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
					EntitySpriteDraw(value72, projectile.Center - screenPosition, null, color59, projectile.rotation, value72.Size() / 2f, projectile.scale, SpriteEffects.None, 0);
					num247 -= (float)(value72.Height / 2 + value74.Height) * projectile.scale;
					Vector2 center3 = projectile.Center;
					center3 += projectile.velocity * projectile.scale * value72.Height / 2f;
					if (num247 > 0f)
					{
						float num248 = 0f;
						Microsoft.Xna.Framework.Rectangle value75 = new Microsoft.Xna.Framework.Rectangle(0, 16 * (projectile.timeLeft / 3 % 5), value73.Width, 16);
						while (num248 + 1f < num247)
						{
							if (num247 - num248 < (float)value75.Height)
							{
								value75.Height = (int)(num247 - num248);
							}
							EntitySpriteDraw(value73, center3 - screenPosition, value75, color59, projectile.rotation, new Vector2(value75.Width / 2, 0f), projectile.scale, SpriteEffects.None, 0);
							num248 += (float)value75.Height * projectile.scale;
							center3 += projectile.velocity * value75.Height * projectile.scale;
							value75.Y += 16;
							if (value75.Y + value75.Height > value73.Height)
							{
								value75.Y = 0;
							}
						}
					}
					EntitySpriteDraw(value74, center3 - screenPosition, null, color59, projectile.rotation, value74.Frame().Top(), projectile.scale, SpriteEffects.None, 0);
					return;
				}
				if (projectile.type == 461)
				{
					if (projectile.velocity == Vector2.Zero)
					{
						return;
					}
					Texture2D value76 = TextureAssets.Projectile[projectile.type].Value;
					float num249 = projectile.localAI[1];
					Microsoft.Xna.Framework.Color color60 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
					Microsoft.Xna.Framework.Rectangle rectangle12 = new Microsoft.Xna.Framework.Rectangle(0, 0, value76.Width, 22);
					Vector2 value77 = new Vector2(0f, Main.player[projectile.owner].gfxOffY);
					EntitySpriteDraw(value76, projectile.Center - screenPosition + value77, rectangle12, color60, projectile.rotation, rectangle12.Size() / 2f, projectile.scale, SpriteEffects.None, 0);
					num249 -= 33f * projectile.scale;
					Vector2 value78 = projectile.Center;
					value78 += projectile.velocity * projectile.scale * 10.5f;
					rectangle12 = new Microsoft.Xna.Framework.Rectangle(0, 25, value76.Width, 28);
					if (num249 > 0f)
					{
						float num250 = 0f;
						while (num250 + 1f < num249)
						{
							if (num249 - num250 < (float)rectangle12.Height)
							{
								rectangle12.Height = (int)(num249 - num250);
							}
							EntitySpriteDraw(value76, value78 - screenPosition + value77, rectangle12, color60, projectile.rotation, new Vector2(rectangle12.Width / 2, 0f), projectile.scale, SpriteEffects.None, 0);
							num250 += (float)rectangle12.Height * projectile.scale;
							value78 += projectile.velocity * rectangle12.Height * projectile.scale;
						}
					}
					rectangle12 = new Microsoft.Xna.Framework.Rectangle(0, 56, value76.Width, 22);
					EntitySpriteDraw(value76, value78 - screenPosition + value77, rectangle12, color60, projectile.rotation, value76.Frame().Top(), projectile.scale, SpriteEffects.None, 0);
					return;
				}
				if (projectile.type == 632)
				{
					if (!(projectile.velocity == Vector2.Zero))
					{
						Texture2D value79 = TextureAssets.Projectile[projectile.type].Value;
						float num251 = projectile.localAI[1];
						float laserLuminance = 0.5f;
						float laserAlphaMultiplier = 0f;
						Microsoft.Xna.Framework.Color value80 = hslToRgb(projectile.GetLastPrismHue(projectile.ai[0], laserLuminance, laserAlphaMultiplier), 1f, laserLuminance);
						value80.A = (byte)((float)(int)value80.A * laserAlphaMultiplier);
						Vector2 value81 = projectile.Center;
						value81 += projectile.velocity * projectile.scale * 10.5f;
						num251 -= projectile.scale * 14.5f * projectile.scale;
						Vector2 vector37 = new Vector2(projectile.scale);
						DelegateMethods.f_1 = 1f;
						DelegateMethods.c_1 = value80 * 0.75f * projectile.Opacity;
						_ = projectile.oldPos[0] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
						Utils.DrawLaser(spriteBatch, value79, value81 - screenPosition, value81 + projectile.velocity * num251 - screenPosition, vector37, DelegateMethods.RainbowLaserDraw);
						DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
						Utils.DrawLaser(spriteBatch, value79, value81 - screenPosition, value81 + projectile.velocity * num251 - screenPosition, vector37 / 2f, DelegateMethods.RainbowLaserDraw);
					}
					return;
				}
				if (projectile.type == 642)
				{
					if (!(projectile.velocity == Vector2.Zero))
					{
						Texture2D value82 = TextureAssets.Projectile[projectile.type].Value;
						float num252 = projectile.localAI[1];
						Microsoft.Xna.Framework.Color c_ = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
						Vector2 value83 = projectile.Center;
						num252 -= projectile.scale * 10.5f;
						Vector2 vector38 = new Vector2(projectile.scale);
						DelegateMethods.f_1 = 1f;
						DelegateMethods.c_1 = c_;
						DelegateMethods.i_1 = 54000 - (int)time / 2;
						_ = projectile.oldPos[0] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
						Utils.DrawLaser(spriteBatch, value82, value83 - screenPosition, value83 + projectile.velocity * num252 - screenPosition, vector38, DelegateMethods.TurretLaserDraw);
						DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
						Utils.DrawLaser(spriteBatch, value82, value83 - screenPosition, value83 + projectile.velocity * num252 - screenPosition, vector38 / 2f, DelegateMethods.TurretLaserDraw);
					}
					return;
				}
				if (projectile.type == 611)
				{
					_ = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					Texture2D value84 = TextureAssets.Projectile[projectile.type].Value;
					Microsoft.Xna.Framework.Color alpha8 = projectile.GetAlpha(color29);
					if (projectile.velocity == Vector2.Zero)
					{
						return;
					}
					float num253 = projectile.velocity.Length() + 16f;
					bool flag30 = num253 < 100f;
					Vector2 value85 = Vector2.Normalize(projectile.velocity);
					Microsoft.Xna.Framework.Rectangle rectangle13 = new Microsoft.Xna.Framework.Rectangle(0, 2, value84.Width, 40);
					Vector2 value86 = new Vector2(0f, Main.player[projectile.owner].gfxOffY);
					float rotation25 = projectile.rotation + (float)Math.PI;
					EntitySpriteDraw(value84, projectile.Center - screenPosition + value86, rectangle13, alpha8, rotation25, rectangle13.Size() / 2f - Vector2.UnitY * 4f, projectile.scale, SpriteEffects.None, 0);
					num253 -= 40f * projectile.scale;
					Vector2 vector39 = projectile.Center;
					vector39 += value85 * projectile.scale * 24f;
					rectangle13 = new Microsoft.Xna.Framework.Rectangle(0, 68, value84.Width, 18);
					if (num253 > 0f)
					{
						float num254 = 0f;
						while (num254 + 1f < num253)
						{
							if (num253 - num254 < (float)rectangle13.Height)
							{
								rectangle13.Height = (int)(num253 - num254);
							}
							EntitySpriteDraw(value84, vector39 - screenPosition + value86, rectangle13, alpha8, rotation25, new Vector2(rectangle13.Width / 2, 0f), projectile.scale, SpriteEffects.None, 0);
							num254 += (float)rectangle13.Height * projectile.scale;
							vector39 += value85 * rectangle13.Height * projectile.scale;
						}
					}
					Vector2 value87 = vector39;
					vector39 = projectile.Center;
					vector39 += value85 * projectile.scale * 24f;
					rectangle13 = new Microsoft.Xna.Framework.Rectangle(0, 46, value84.Width, 18);
					int num255 = 18;
					if (flag30)
					{
						num255 = 9;
					}
					float num256 = num253;
					if (num253 > 0f)
					{
						float num257 = 0f;
						float num258 = num256 / (float)num255;
						num257 += num258 * 0.25f;
						vector39 += value85 * num258 * 0.25f;
						for (int num259 = 0; num259 < num255; num259++)
						{
							float num260 = num258;
							if (num259 == 0)
							{
								num260 *= 0.75f;
							}
							EntitySpriteDraw(value84, vector39 - screenPosition + value86, rectangle13, alpha8, rotation25, new Vector2(rectangle13.Width / 2, 0f), projectile.scale, SpriteEffects.None, 0);
							num257 += num260;
							vector39 += value85 * num260;
						}
					}
					rectangle13 = new Microsoft.Xna.Framework.Rectangle(0, 90, value84.Width, 48);
					EntitySpriteDraw(value84, value87 - screenPosition + value86, rectangle13, alpha8, rotation25, value84.Frame().Top(), projectile.scale, SpriteEffects.None, 0);
					return;
				}
				if (projectile.type == 537)
				{
					if (projectile.velocity == Vector2.Zero)
					{
						return;
					}
					Texture2D value88 = TextureAssets.Projectile[projectile.type].Value;
					float num261 = projectile.localAI[1];
					Microsoft.Xna.Framework.Color color61 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.9f;
					Microsoft.Xna.Framework.Rectangle rectangle14 = new Microsoft.Xna.Framework.Rectangle(0, 0, value88.Width, 22);
					Vector2 value89 = new Vector2(0f, npc[(int)projectile.ai[1]].gfxOffY);
					EntitySpriteDraw(value88, projectile.Center - screenPosition + value89, rectangle14, color61, projectile.rotation, rectangle14.Size() / 2f, projectile.scale, SpriteEffects.None, 0);
					num261 -= 33f * projectile.scale;
					Vector2 value90 = projectile.Center;
					value90 += projectile.velocity * projectile.scale * 10.5f;
					rectangle14 = new Microsoft.Xna.Framework.Rectangle(0, 25, value88.Width, 28);
					if (num261 > 0f)
					{
						float num262 = 0f;
						while (num262 + 1f < num261)
						{
							if (num261 - num262 < (float)rectangle14.Height)
							{
								rectangle14.Height = (int)(num261 - num262);
							}
							EntitySpriteDraw(value88, value90 - screenPosition + value89, rectangle14, color61, projectile.rotation, new Vector2(rectangle14.Width / 2, 0f), projectile.scale, SpriteEffects.None, 0);
							num262 += (float)rectangle14.Height * projectile.scale;
							value90 += projectile.velocity * rectangle14.Height * projectile.scale;
						}
					}
					rectangle14 = new Microsoft.Xna.Framework.Rectangle(0, 56, value88.Width, 22);
					EntitySpriteDraw(value88, value90 - screenPosition + value89, rectangle14, color61, projectile.rotation, value88.Frame().Top(), projectile.scale, SpriteEffects.None, 0);
					return;
				}
				if (projectile.type == 456)
				{
					Texture2D value91 = TextureAssets.Projectile[projectile.type].Value;
					Texture2D value92 = TextureAssets.Extra[23].Value;
					Texture2D value93 = TextureAssets.Extra[24].Value;
					Vector2 value94 = new Vector2(0f, 216f);
					Vector2 value95 = npc[(int)Math.Abs(projectile.ai[0]) - 1].Center - projectile.Center + value94;
					float num263 = value95.Length();
					Vector2 value96 = Vector2.Normalize(value95);
					Microsoft.Xna.Framework.Rectangle rectangle15 = value91.Frame();
					rectangle15.Height /= 4;
					rectangle15.Y += projectile.frame * rectangle15.Height;
					EntitySpriteDraw(color: projectile.GetAlpha(Microsoft.Xna.Framework.Color.Lerp(color29, Microsoft.Xna.Framework.Color.White, 0.3f)), texture: value91, position: projectile.Center - screenPosition, sourceRectangle: rectangle15, rotation: projectile.rotation, origin: rectangle15.Size() / 2f, scale: projectile.scale, effects: SpriteEffects.None, worthless: 0);
					num263 -= (float)(rectangle15.Height / 2 + value93.Height) * projectile.scale;
					Vector2 center4 = projectile.Center;
					center4 += value96 * projectile.scale * rectangle15.Height / 2f;
					if (num263 > 0f)
					{
						float num264 = 0f;
						Microsoft.Xna.Framework.Rectangle rectangle16 = new Microsoft.Xna.Framework.Rectangle(0, 0, value92.Width, value92.Height);
						while (num264 + 1f < num263)
						{
							if (num263 - num264 < (float)rectangle16.Height)
							{
								rectangle16.Height = (int)(num263 - num264);
							}
							Microsoft.Xna.Framework.Point point3 = center4.ToTileCoordinates();
							Microsoft.Xna.Framework.Color color62 = Lighting.GetColor(point3.X, point3.Y);
							color62 = Microsoft.Xna.Framework.Color.Lerp(color62, Microsoft.Xna.Framework.Color.White, 0.3f);
							EntitySpriteDraw(value92, center4 - screenPosition, rectangle16, projectile.GetAlpha(color62), projectile.rotation, rectangle16.Bottom(), projectile.scale, SpriteEffects.None, 0);
							num264 += (float)rectangle16.Height * projectile.scale;
							center4 += value96 * rectangle16.Height * projectile.scale;
						}
					}
					Microsoft.Xna.Framework.Point point4 = center4.ToTileCoordinates();
					Microsoft.Xna.Framework.Color color63 = Lighting.GetColor(point4.X, point4.Y);
					color63 = Microsoft.Xna.Framework.Color.Lerp(color63, Microsoft.Xna.Framework.Color.White, 0.3f);
					Microsoft.Xna.Framework.Rectangle value97 = value93.Frame();
					if (num263 < 0f)
					{
						value97.Height += (int)num263;
					}
					EntitySpriteDraw(value93, center4 - screenPosition, value97, color63, projectile.rotation, new Vector2((float)value97.Width / 2f, value97.Height), projectile.scale, SpriteEffects.None, 0);
					return;
				}
				if (projectile.type == 443)
				{
					Texture2D value98 = TextureAssets.Projectile[projectile.type].Value;
					float num265 = 30f;
					float num266 = num265 * 4f;
					float num267 = (float)Math.PI * 2f * projectile.ai[0] / num265;
					float num268 = (float)Math.PI * 2f * projectile.ai[0] / num266;
					Vector2 vector40 = -Vector2.UnitY.RotatedBy(num267);
					float scale10 = 0.75f + vector40.Y * 0.25f;
					float scale11 = 0.8f - vector40.Y * 0.2f;
					int num269 = TextureAssets.Projectile[projectile.type].Height() / projFrames[projectile.type];
					int y20 = num269 * projectile.frame;
					Vector2 position16 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					EntitySpriteDraw(value98, position16, new Microsoft.Xna.Framework.Rectangle(0, y20, value98.Width, num269), projectile.GetAlpha(color29), projectile.rotation + num268, new Vector2((float)value98.Width / 2f, (float)num269 / 2f), scale10, spriteEffects, 0);
					EntitySpriteDraw(value98, position16, new Microsoft.Xna.Framework.Rectangle(0, y20, value98.Width, num269), projectile.GetAlpha(color29), projectile.rotation + ((float)Math.PI * 2f - num268), new Vector2((float)value98.Width / 2f, (float)num269 / 2f), scale11, spriteEffects, 0);
					return;
				}
				if (projectile.type == 656 || projectile.type == 657)
				{
					float num270 = 900f;
					if (projectile.type == 657)
					{
						num270 = 300f;
					}
					float num271 = 15f;
					float num272 = 15f;
					float num273 = projectile.ai[0];
					float num274 = MathHelper.Clamp(num273 / 30f, 0f, 1f);
					if (num273 > num270 - 60f)
					{
						num274 = MathHelper.Lerp(1f, 0f, (num273 - (num270 - 60f)) / 60f);
					}
					Microsoft.Xna.Framework.Point point5 = projectile.Center.ToTileCoordinates();
					Collision.ExpandVertically(point5.X, point5.Y, out var topY, out var bottomY, (int)num271, (int)num272);
					topY++;
					bottomY--;
					float num275 = 0.2f;
					Vector2 value99 = new Vector2(point5.X, topY) * 16f + new Vector2(8f);
					Vector2 value100 = new Vector2(point5.X, bottomY) * 16f + new Vector2(8f);
					Vector2.Lerp(value99, value100, 0.5f);
					Vector2 vector41 = new Vector2(0f, value100.Y - value99.Y);
					vector41.X = vector41.Y * num275;
					new Vector2(value99.X - vector41.X / 2f, value99.Y);
					Texture2D value101 = TextureAssets.Projectile[projectile.type].Value;
					Microsoft.Xna.Framework.Rectangle rectangle17 = value101.Frame();
					Vector2 origin15 = rectangle17.Size() / 2f;
					float num276 = -(float)Math.PI / 50f * num273;
					Vector2 spinningpoint4 = Vector2.UnitY.RotatedBy(num273 * 0.1f);
					float num277 = 0f;
					float num278 = 5.1f;
					Microsoft.Xna.Framework.Color value102 = new Microsoft.Xna.Framework.Color(212, 192, 100);
					for (float num279 = (int)value100.Y; num279 > (float)(int)value99.Y; num279 -= num278)
					{
						num277 += num278;
						float num280 = num277 / vector41.Y;
						float num281 = num277 * ((float)Math.PI * 2f) / -20f;
						float num282 = num280 - 0.15f;
						Vector2 position17 = spinningpoint4.RotatedBy(num281);
						Vector2 value103 = new Vector2(0f, num280 + 1f);
						value103.X = value103.Y * num275;
						Microsoft.Xna.Framework.Color color64 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, value102, num280 * 2f);
						if (num280 > 0.5f)
						{
							color64 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, value102, 2f - num280 * 2f);
						}
						color64.A = (byte)((float)(int)color64.A * 0.5f);
						color64 *= num274;
						position17 *= value103 * 100f;
						position17.Y = 0f;
						position17.X = 0f;
						position17 += new Vector2(value100.X, num279) - screenPosition;
						EntitySpriteDraw(value101, position17, rectangle17, color64, num276 + num281, origin15, 1f + num282, SpriteEffects.None, 0);
					}
					return;
				}
				if (projectile.type == 704)
				{
					float num283 = 300f;
					float num284 = projectile.ai[0];
					float num285 = MathHelper.Clamp(num284 / 30f, 0f, 1f);
					if (num284 > num283 - 60f)
					{
						num285 = MathHelper.Lerp(1f, 0f, (num284 - (num283 - 60f)) / 60f);
					}
					float num286 = 0.2f;
					Vector2 top2 = projectile.Top;
					Vector2 bottom = projectile.Bottom;
					Vector2.Lerp(top2, bottom, 0.5f);
					Vector2 vector42 = new Vector2(0f, bottom.Y - top2.Y);
					vector42.X = vector42.Y * num286;
					new Vector2(top2.X - vector42.X / 2f, top2.Y);
					Texture2D value104 = TextureAssets.Projectile[projectile.type].Value;
					Microsoft.Xna.Framework.Rectangle rectangle18 = value104.Frame();
					Vector2 origin16 = rectangle18.Size() / 2f;
					float num287 = -(float)Math.PI / 20f * num284 * (float)((!(projectile.velocity.X > 0f)) ? 1 : (-1));
					SpriteEffects effects3 = ((projectile.velocity.X > 0f) ? SpriteEffects.FlipVertically : SpriteEffects.None);
					bool flag31 = projectile.velocity.X > 0f;
					Vector2 spinningpoint5 = Vector2.UnitY.RotatedBy(num284 * 0.14f);
					float num288 = 0f;
					float num289 = 5.01f + num284 / 150f * -0.9f;
					if (num289 < 4.11f)
					{
						num289 = 4.11f;
					}
					Microsoft.Xna.Framework.Color value105 = new Microsoft.Xna.Framework.Color(160, 140, 100, 127);
					Microsoft.Xna.Framework.Color color65 = new Microsoft.Xna.Framework.Color(140, 160, 255, 127);
					float num290 = num284 % 60f;
					if (num290 < 30f)
					{
						color65 *= Utils.GetLerpValue(22f, 30f, num290, clamped: true);
					}
					else
					{
						color65 *= Utils.GetLerpValue(38f, 30f, num290, clamped: true);
					}
					bool flag32 = color65 != Microsoft.Xna.Framework.Color.Transparent;
					for (float num291 = (int)bottom.Y; num291 > (float)(int)top2.Y; num291 -= num289)
					{
						num288 += num289;
						float num292 = num288 / vector42.Y;
						float num293 = num288 * ((float)Math.PI * 2f) / -20f;
						if (flag31)
						{
							num293 *= -1f;
						}
						float num294 = num292 - 0.35f;
						Vector2 position18 = spinningpoint5.RotatedBy(num293);
						Vector2 value106 = new Vector2(0f, num292 + 1f);
						value106.X = value106.Y * num286;
						Microsoft.Xna.Framework.Color color66 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, value105, num292 * 2f);
						if (num292 > 0.5f)
						{
							color66 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, value105, 2f - num292 * 2f);
						}
						color66.A = (byte)((float)(int)color66.A * 0.5f);
						color66 *= num285;
						position18 *= value106 * 100f;
						position18.Y = 0f;
						position18.X = 0f;
						position18 += new Vector2(bottom.X, num291) - screenPosition;
						if (flag32)
						{
							Microsoft.Xna.Framework.Color color67 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color65, num292 * 2f);
							if (num292 > 0.5f)
							{
								color67 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Transparent, color65, 2f - num292 * 2f);
							}
							color67.A = (byte)((float)(int)color67.A * 0.5f);
							color67 *= num285;
							EntitySpriteDraw(value104, position18, rectangle18, color67, num287 + num293, origin16, (1f + num294) * 0.8f, effects3, 0);
						}
						EntitySpriteDraw(value104, position18, rectangle18, color66, num287 + num293, origin16, 1f + num294, effects3, 0);
					}
					return;
				}
				if (projectile.type == 444 || projectile.type == 446 || projectile.type == 490 || projectile.type == 464 || projectile.type == 502 || projectile.type == 538 || projectile.type == 540 || projectile.type == 579 || projectile.type == 578 || projectile.type == 813 || projectile.type == 583 || projectile.type == 584 || projectile.type == 616 || projectile.type == 617 || projectile.type == 618 || projectile.type == 641 || (projectile.type >= 646 && projectile.type <= 649) || projectile.type == 653 || projectile.type == 186 || projectile.type == 662 || projectile.type == 685 || projectile.type == 673 || projectile.type == 676 || projectile.type == 697 || projectile.type == 699 || projectile.type == 707 || projectile.type == 708 || projectile.type == 719 || projectile.type == 761 || projectile.type == 762 || projectile.type == 763 || projectile.type == 772 || projectile.type == 802 || projectile.type == 842 || projectile.type == 865 || projectile.type == 921 || projectile.type == 926 || projectile.type == 757 || projectile.type == 25 || projectile.type == 35 || projectile.type == 63 || projectile.type == 154 || projectile.type == 247 || projectile.type == 26 || projectile.type == 928 || projectile.type == 16 || projectile.type == 34 || projectile.type == 79 || projectile.type == 936 || projectile.type == 937 || projectile.type == 938 || projectile.type == 939 || projectile.type == 940 || projectile.type == 941 || projectile.type == 942 || projectile.type == 943 || projectile.type == 944 || projectile.type == 945 || (((projectile.type >= 776 && projectile.type <= 801) || (projectile.type >= 803 && projectile.type <= 810)) && projectile.type != 779 && projectile.type != 783 && projectile.type != 862 && projectile.type != 863))
				{
					Vector2 vector43 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					Texture2D value107 = TextureAssets.Projectile[projectile.type].Value;
					Microsoft.Xna.Framework.Color color68 = projectile.GetAlpha(color29);
					Vector2 origin17 = new Vector2(value107.Width, value107.Height) / 2f;
					float num295 = projectile.rotation;
					Vector2 vector44 = Vector2.One * projectile.scale;
					Microsoft.Xna.Framework.Rectangle? sourceRectangle2 = null;
					if (projectile.type == 446)
					{
						origin17.Y = 4f;
					}
					if (projectile.type == 865)
					{
						vector43 += new Vector2(1f, -1f);
						spriteEffects = ((projectile.DirectionFrom(Main.player[projectile.owner].Center).SafeNormalize(Vector2.Zero).X > 0f) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
					}
					if (projectile.type == 16)
					{
						float lerpValue6 = Utils.GetLerpValue(0f, 8f, projectile.velocity.Length(), clamped: true);
						num295 *= lerpValue6;
						vector44 *= 0.6f;
						vector44.Y *= MathHelper.Lerp(1f, 0.8f, lerpValue6);
						vector44.X *= MathHelper.Lerp(1f, 1.5f, lerpValue6);
					}
					if (projectile.type == 34)
					{
						float lerpValue7 = Utils.GetLerpValue(0f, 8f, projectile.velocity.Length(), clamped: true);
						num295 *= lerpValue7;
						vector44.X *= MathHelper.Lerp(1f, 0.8f, lerpValue7);
						num295 += -(float)Math.PI / 2f * lerpValue7;
						sourceRectangle2 = value107.Frame(1, projFrames[projectile.type], 0, projectile.frame);
						origin17 = sourceRectangle2.Value.Size() / 2f;
						vector43 -= projectile.velocity * 1f;
						vector43 = projectile.oldPos[0] + projectile.Size / 2f - screenPosition - projectile.velocity / 2f;
					}
					if (projectile.type == 79)
					{
						num295 = 0f;
						vector44 *= Utils.GetLerpValue(32f, 0f, projectile.position.Distance(projectile.oldPos[12]), clamped: true);
						color68 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0);
					}
					if (projectile.type == 761 || projectile.type == 762)
					{
						spriteEffects = ((projectile.spriteDirection <= 0) ? SpriteEffects.FlipVertically : SpriteEffects.None);
					}
					if (projectile.type == 662 || projectile.type == 685)
					{
						origin17 = new Vector2(6f, 6f);
					}
					if (projectile.type == 699 || projectile.type == 708)
					{
						Player player4 = Main.player[projectile.owner];
						origin17 = new Vector2((projectile.spriteDirection == 1) ? ((float)value107.Width - -8f) : (-8f), (player4.gravDir == 1f) ? (-8f) : ((float)value107.Height - -8f));
						if (player4.gravDir == -1f)
						{
							spriteEffects |= SpriteEffects.FlipVertically;
							num295 += (float)Math.PI / 2f * (float)(-projectile.spriteDirection);
						}
					}
					if (projectile.type == 938 || projectile.type == 939 || projectile.type == 940 || projectile.type == 941 || projectile.type == 942 || projectile.type == 943 || projectile.type == 944 || projectile.type == 945)
					{
						num295 -= (float)Math.PI / 4f * (float)projectile.spriteDirection;
					}
					if (projectile.type == 502)
					{
						LoadProjectile(250);
						Texture2D value108 = TextureAssets.Projectile[250].Value;
						Vector2 origin18 = new Vector2(value108.Width / 2, 0f);
						Vector2 value109 = new Vector2(projectile.width, projectile.height) / 2f;
						Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
						white3.A = 127;
						for (int num296 = projectile.oldPos.Length - 1; num296 > 0; num296--)
						{
							Vector2 vector45 = projectile.oldPos[num296] + value109;
							if (!(vector45 == value109))
							{
								Vector2 vector46 = projectile.oldPos[num296 - 1] + value109;
								float rotation26 = (vector46 - vector45).ToRotation() - (float)Math.PI / 2f;
								Vector2 scale12 = new Vector2(1f, Vector2.Distance(vector45, vector46) / (float)value108.Height);
								Microsoft.Xna.Framework.Color color69 = white3 * (1f - (float)num296 / (float)projectile.oldPos.Length);
								EntitySpriteDraw(value108, vector45 - screenPosition, null, color69, rotation26, origin18, scale12, spriteEffects, 0);
							}
						}
					}
					else if (projectile.type == 540 && projectile.velocity != Vector2.Zero)
					{
						float num297 = 0f;
						if (projectile.ai[0] >= 10f)
						{
							num297 = (projectile.ai[0] - 10f) / 10f;
						}
						if (projectile.ai[0] >= 20f)
						{
							num297 = (20f - projectile.ai[0]) / 10f;
						}
						if (num297 > 1f)
						{
							num297 = 1f;
						}
						if (num297 < 0f)
						{
							num297 = 0f;
						}
						if (num297 != 0f)
						{
							Texture2D value110 = TextureAssets.Extra[47].Value;
							Vector2 origin19 = new Vector2(value110.Width / 2, 0f);
							Microsoft.Xna.Framework.Color color70 = color68 * num297 * 0.7f;
							Vector2 position19 = projectile.Center - screenPosition;
							Vector2 vector47 = projectile.velocity.ToRotation().ToRotationVector2() * value107.Width / 3f;
							vector47 = Vector2.Zero;
							position19 += vector47;
							float rotation27 = projectile.velocity.ToRotation() - (float)Math.PI / 2f;
							Vector2 scale13 = new Vector2(1f, (projectile.velocity.Length() - vector47.Length() * 2f) / (float)value110.Height);
							EntitySpriteDraw(value110, position19, null, color70, rotation27, origin19, scale13, SpriteEffects.None, 0);
						}
					}
					if (projectile.type == 578 || projectile.type == 579 || projectile.type == 641 || projectile.type == 813)
					{
						Microsoft.Xna.Framework.Color color71 = color68 * 0.8f;
						color71.A /= 2;
						Microsoft.Xna.Framework.Color color72 = Microsoft.Xna.Framework.Color.Lerp(color68, Microsoft.Xna.Framework.Color.Black, 0.5f);
						color72.A = color68.A;
						float num298 = 0.95f + (projectile.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
						color72 *= num298;
						float scale14 = 0.6f + projectile.scale * 0.6f * num298;
						Texture2D value111 = TextureAssets.Extra[50].Value;
						bool flag33 = true;
						if (projectile.type == 813)
						{
							flag33 = false;
							value111 = TextureAssets.Extra[131].Value;
						}
						Vector2 origin20 = value111.Size() / 2f;
						EntitySpriteDraw(value111, vector43, null, color72, 0f - num295 + 0.35f, origin20, scale14, spriteEffects ^ SpriteEffects.FlipHorizontally, 0);
						EntitySpriteDraw(value111, vector43, null, color68, 0f - num295, origin20, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0);
						if (flag33)
						{
							EntitySpriteDraw(value107, vector43, null, color71, (0f - num295) * 0.7f, origin17, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0);
						}
						EntitySpriteDraw(value111, vector43, null, color68 * 0.8f, num295 * 0.5f, origin20, projectile.scale * 0.9f, spriteEffects, 0);
						color68.A = 0;
						if (projectile.type == 813)
						{
							num295 = 0f;
						}
					}
					if (projectile.type == 617)
					{
						Microsoft.Xna.Framework.Color color73 = color68 * 0.8f;
						color73.A /= 2;
						Microsoft.Xna.Framework.Color color74 = Microsoft.Xna.Framework.Color.Lerp(color68, Microsoft.Xna.Framework.Color.Black, 0.5f);
						color74.A = color68.A;
						float num299 = 0.95f + (projectile.rotation * 0.75f).ToRotationVector2().Y * 0.1f;
						color74 *= num299;
						float scale15 = 0.6f + projectile.scale * 0.6f * num299;
						EntitySpriteDraw(TextureAssets.Extra[50].Value, vector43, null, color74, 0f - projectile.rotation + 0.35f, origin17, scale15, spriteEffects ^ SpriteEffects.FlipHorizontally, 0);
						EntitySpriteDraw(TextureAssets.Extra[50].Value, vector43, null, color68, 0f - projectile.rotation, origin17, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0);
						EntitySpriteDraw(value107, vector43, null, color73, (0f - projectile.rotation) * 0.7f, origin17, projectile.scale, spriteEffects ^ SpriteEffects.FlipHorizontally, 0);
						EntitySpriteDraw(TextureAssets.Extra[50].Value, vector43, null, color68 * 0.8f, projectile.rotation * 0.5f, origin17, projectile.scale * 0.9f, spriteEffects, 0);
						color68.A = 0;
					}
					if (projectile.type == 757 || projectile.type == 25 || projectile.type == 35 || projectile.type == 63 || projectile.type == 154 || projectile.type == 247 || projectile.type == 26)
					{
						if (projectile.ai[0] == 1f)
						{
							Microsoft.Xna.Framework.Color value112 = color68;
							value112.A = 127;
							value112 *= 0.5f;
							int num300 = (int)projectile.ai[1];
							if (num300 > 5)
							{
								num300 = 5;
							}
							for (float num301 = 1f; num301 >= 0f; num301 -= 0.125f)
							{
								float num302 = 1f - num301;
								Vector2 value113 = projectile.velocity * -num300 * num301;
								EntitySpriteDraw(value107, vector43 + value113, null, value112 * num302, num295, origin17, projectile.scale * 1.15f * MathHelper.Lerp(0.5f, 1f, num302), spriteEffects, 0);
							}
						}
					}
					else if (projectile.type == 79)
					{
						Vector2 scale16 = vector44 * 1.4f;
						Vector2 spinningpoint6 = new Vector2(2f * scale16.X + (float)Math.Cos(GlobalTimeWrappedHourly * ((float)Math.PI * 2f)) * 0.4f, 0f).RotatedBy(num295 + GlobalTimeWrappedHourly * ((float)Math.PI * 2f));
						for (float num303 = 0f; num303 < 1f; num303 += 355f / (678f * (float)Math.PI))
						{
							Microsoft.Xna.Framework.Color color75 = hslToRgb(num303, 1f, 0.5f) * 0.3f;
							color75.A = 0;
							EntitySpriteDraw(value107, vector43 + spinningpoint6.RotatedBy(num303 * ((float)Math.PI * 2f)), null, color75, num295, origin17, scale16, spriteEffects, 0);
						}
						EntitySpriteDraw(value107, vector43, null, color68, num295, origin17, vector44, spriteEffects, 0);
					}
					if ((0u | ((projectile.type == 464 && projectile.ai[1] != 1f) ? 1u : 0u)) == 0)
					{
						EntitySpriteDraw(value107, vector43, sourceRectangle2, color68, num295, origin17, vector44, spriteEffects, 0);
					}
					if (projectile.type == 464 && projectile.ai[1] != 1f)
					{
						value107 = TextureAssets.Extra[35].Value;
						Microsoft.Xna.Framework.Rectangle rectangle19 = value107.Frame(1, 3);
						origin17 = rectangle19.Size() / 2f;
						Vector2 value114 = new Vector2(0f, -720f).RotatedBy(projectile.velocity.ToRotation());
						float scaleFactor3 = projectile.ai[0] % 45f / 45f;
						Vector2 spinningpoint7 = value114 * scaleFactor3;
						for (int num304 = 0; num304 < 6; num304++)
						{
							float num305 = (float)num304 * ((float)Math.PI * 2f) / 6f;
							Vector2 value115 = projectile.Center + spinningpoint7.RotatedBy(num305);
							EntitySpriteDraw(value107, value115 - screenPosition, rectangle19, color68, num305 + projectile.velocity.ToRotation() + (float)Math.PI, origin17, projectile.scale, spriteEffects, 0);
							rectangle19.Y += rectangle19.Height;
							if (rectangle19.Y >= value107.Height)
							{
								rectangle19.Y = 0;
							}
						}
					}
					else if (projectile.type == 490)
					{
						EntitySpriteDraw(TextureAssets.Extra[34].Value, vector43, null, color68, 0f - projectile.rotation, TextureAssets.Extra[34].Value.Size() / 2f, projectile.scale, spriteEffects, 0);
						EntitySpriteDraw(value107, vector43, null, color68, projectile.rotation, origin17, projectile.scale * 0.42f, spriteEffects, 0);
						EntitySpriteDraw(TextureAssets.Extra[34].Value, vector43, null, color68, 0f - projectile.rotation, TextureAssets.Extra[34].Value.Size() / 2f, projectile.scale * 0.42f, spriteEffects, 0);
					}
					else if (projectile.type == 616)
					{
						value107 = TextureAssets.GlowMask[193].Value;
						EntitySpriteDraw(value107, vector43, null, new Microsoft.Xna.Framework.Color(127, 127, 127, 0), projectile.rotation, origin17, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type >= 646 && projectile.type <= 649)
					{
						value107 = TextureAssets.GlowMask[203 + projectile.type - 646].Value;
						EntitySpriteDraw(value107, vector43, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 127), projectile.rotation, origin17, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 699)
					{
						value107 = TextureAssets.GlowMask[231].Value;
						EntitySpriteDraw(value107, vector43, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 127), num295, origin17, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 707 || projectile.type == 708)
					{
						float scale17 = 0.5f;
						value107 = TextureAssets.GlowMask[232].Value;
						Microsoft.Xna.Framework.Rectangle value116 = value107.Frame(1, 3, 0, (int)(projectile.ai[0] % 9f) / 3);
						if (projectile.type == 708)
						{
							value116 = value107.Frame(1, 3, 0, Main.player[projectile.owner].itemAnimation % 9 / 3);
							scale17 = 0.75f;
						}
						Microsoft.Xna.Framework.Color color76 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * scale17;
						Vector2 spinningpoint8 = new Vector2(2f, 0f).RotatedBy(projectile.rotation);
						for (float num306 = 0f; num306 < 4f; num306 += 1f)
						{
							EntitySpriteDraw(value107, vector43 + spinningpoint8.RotatedBy(num306 * ((float)Math.PI / 2f)), value116, color76 * 0.5f, projectile.rotation, origin17, projectile.scale, spriteEffects, 0);
						}
						EntitySpriteDraw(value107, vector43, value116, color76, projectile.rotation, origin17, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 719)
					{
						float scale18 = 0.3f;
						Microsoft.Xna.Framework.Color value117 = new Microsoft.Xna.Framework.Color(80, 80, 80, 255) * scale18;
						float num307 = projectile.scale * 1.5f;
						Vector2 spinningpoint9 = new Vector2(2f * num307, 0f).RotatedBy(projectile.rotation);
						for (float num308 = 0f; num308 < 4f; num308 += 1f)
						{
							EntitySpriteDraw(value107, vector43 + -projectile.velocity * num308 * 1.25f, null, value117 * 0.7f, projectile.rotation, origin17, num307, spriteEffects, 0);
						}
						for (float num309 = 0f; num309 < 3f; num309 += 1f)
						{
							EntitySpriteDraw(value107, vector43 + spinningpoint9.RotatedBy(num309 * ((float)Math.PI / 2f)), null, value117 * 0.9f, projectile.rotation, origin17, num307, spriteEffects, 0);
						}
						EntitySpriteDraw(value107, vector43, null, color68, projectile.rotation, origin17, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 16)
					{
						Microsoft.Xna.Framework.Color color77 = new Microsoft.Xna.Framework.Color(80, 80, 80, 0);
						Vector2 scale19 = vector44 + vector44 * (float)Math.Cos(GlobalTimeWrappedHourly * ((float)Math.PI * 2f)) * 0.4f;
						Vector2 spinningpoint10 = new Vector2(2f * scale19.X, 0f).RotatedBy(num295);
						for (float num310 = 0f; num310 < 1f; num310 += 0.25f)
						{
							EntitySpriteDraw(value107, vector43 + spinningpoint10.RotatedBy(num310 * ((float)Math.PI * 2f)), null, color77, num295, origin17, scale19, spriteEffects, 0);
						}
						EntitySpriteDraw(value107, vector43, null, color68, num295, origin17, vector44, spriteEffects, 0);
					}
					else if (projectile.type == 34)
					{
						float lerpValue8 = Utils.GetLerpValue(0f, 6f, projectile.localAI[0], clamped: true);
						Microsoft.Xna.Framework.Color color78 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f;
						Vector2 scale20 = new Vector2(lerpValue8);
						Vector2 spinningpoint11 = new Vector2(4f * scale20.X, 0f).RotatedBy(num295);
						for (float num311 = 0f; num311 < 1f; num311 += 0.25f)
						{
							EntitySpriteDraw(value107, vector43 + spinningpoint11.RotatedBy(num311 * ((float)Math.PI * 2f)), sourceRectangle2, color78, num295, origin17, scale20, spriteEffects, 0);
						}
					}
					return;
				}
				if (projectile.type == 465 || projectile.type == 467 || projectile.type == 468 || projectile.type == 500 || projectile.type == 518 || projectile.type == 535 || projectile.type == 539 || projectile.type == 575 || projectile.type == 574 || projectile.type == 589 || projectile.type == 590 || projectile.type == 593 || projectile.type == 602 || projectile.type == 596 || projectile.type == 612 || projectile.type == 613 || projectile.type == 614 || projectile.type == 623 || projectile.type == 625 || projectile.type == 626 || projectile.type == 627 || projectile.type == 628 || projectile.type == 634 || projectile.type == 635 || projectile.type == 643 || projectile.type == 644 || projectile.type == 645 || projectile.type == 650 || projectile.type == 652 || projectile.type == 658 || projectile.type == 659 || projectile.type == 663 || projectile.type == 665 || projectile.type == 667 || projectile.type == 677 || projectile.type == 678 || projectile.type == 679 || projectile.type == 691 || projectile.type == 692 || projectile.type == 693 || projectile.type == 702 || projectile.type == 703 || projectile.type == 701 || projectile.type == 712 || projectile.type == 715 || projectile.type == 716 || projectile.type == 717 || projectile.type == 718 || projectile.type == 758 || projectile.type == 759 || projectile.type == 764 || projectile.type == 779 || projectile.type == 783 || projectile.type == 773 || projectile.type == 820 || projectile.type == 831 || projectile.type == 836 || projectile.type == 851 || projectile.type == 855 || projectile.type == 856 || projectile.type == 857 || projectile.type == 861 || projectile.type == 862 || projectile.type == 863 || projectile.type == 866 || projectile.type == 870 || projectile.type == 882 || projectile.type == 885 || projectile.type == 889 || projectile.type == 895 || projectile.type == 896 || projectile.type == 898 || projectile.type == 903 || projectile.type == 904 || projectile.type == 905 || projectile.type == 906 || projectile.type == 908 || projectile.type == 910 || projectile.type == 911)
				{
					Vector2 vector48 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					Texture2D texture2D4 = TextureAssets.Projectile[projectile.type].Value;
					Microsoft.Xna.Framework.Rectangle rectangle20 = texture2D4.Frame(1, projFrames[projectile.type], 0, projectile.frame);
					Microsoft.Xna.Framework.Color color79 = projectile.GetAlpha(color29);
					Vector2 origin21 = rectangle20.Size() / 2f;
					if (projectile.type == 703)
					{
						rectangle20.Height -= 2;
					}
					if (projectile.type == 895 || projectile.type == 896 || projectile.type == 898)
					{
						vector48.Y += -2f + (float)(Math.Cos((float)(int)mouseTextColor / 255f * ((float)Math.PI * 2f) * 2f) * 4.0);
					}
					if (projectile.type == 855)
					{
						float y21 = (GlobalTimeWrappedHourly % 6f / 6f * ((float)Math.PI * 2f)).ToRotationVector2().Y;
						float scale21 = y21 * 0.3f + 0.7f;
						Microsoft.Xna.Framework.Color color80 = color79 * scale21 * 0.3f;
						for (int num312 = 0; num312 < 4; num312++)
						{
							float x13 = 0f;
							float y22 = 0f;
							switch (num312)
							{
							case 0:
								x13 = 4f;
								break;
							case 1:
								x13 = -4f;
								break;
							case 2:
								y22 = 4f;
								break;
							case 3:
								y22 = -4f;
								break;
							}
							Vector2 value118 = new Vector2(x13, y22).RotatedBy((float)Math.PI * 2f * (float)i + projectile.rotation) * y21;
							spriteBatch.Draw(texture2D4, vector48 + value118, rectangle20, color80, projectile.rotation, rectangle20.Size() / 2f, 1f, SpriteEffects.None, 0f);
						}
					}
					else if (projectile.type == 908)
					{
						PlayerTitaniumStormBuffTextureContent playerTitaniumStormBuff = TextureAssets.RenderTargets.PlayerTitaniumStormBuff;
						vector48 += (GlobalTimeWrappedHourly * 8f + (float)projectile.whoAmI).ToRotationVector2() * 4f;
						playerTitaniumStormBuff.Request();
						if (playerTitaniumStormBuff.IsReady)
						{
							texture2D4 = playerTitaniumStormBuff.GetTarget();
						}
						rectangle20 = texture2D4.Frame(projFrames[projectile.type], 1, projectile.frame);
						origin21 = rectangle20.Size() / 2f;
					}
					else if (projectile.type == 764)
					{
						DrawProjWithStarryTrail(projectile, color29, spriteEffects);
					}
					else if (projectile.type == 856)
					{
						DrawProjWithStarryTrail(projectile, color29, spriteEffects);
					}
					else if (projectile.type == 857)
					{
						DrawProjWithStarryTrail(projectile, color29, spriteEffects);
						color79 = Microsoft.Xna.Framework.Color.White * projectile.Opacity * 0.9f;
						color79.A /= 2;
						rectangle20 = texture2D4.Frame(15, 1, projectile.frame);
						origin21 = rectangle20.Size() / 2f;
						DrawPrettyStarSparkle(projectile, spriteEffects, vector48, color79, projectile.GetFirstFractalColor());
					}
					else if (projectile.type == 539)
					{
						if (projectile.ai[0] >= 210f)
						{
							float num313 = projectile.ai[0] - 210f;
							num313 /= 20f;
							if (num313 > 1f)
							{
								num313 = 1f;
							}
							EntitySpriteDraw(TextureAssets.Extra[46].Value, vector48, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 128) * num313, projectile.rotation, new Vector2(17f, 22f), projectile.scale, spriteEffects, 0);
						}
					}
					else if (projectile.type == 773)
					{
						origin21.Y = rectangle20.Height - 12;
					}
					else if (projectile.type == 866)
					{
						origin21.X += 14f;
					}
					else if (projectile.type == 759)
					{
						origin21.Y = rectangle20.Height - 2;
						origin21.X += (spriteEffects.HasFlag(SpriteEffects.FlipHorizontally) ? 1 : (-1));
					}
					else if (projectile.type == 758)
					{
						vector48.Y += projectile.height / 2;
						origin21 = rectangle20.Size() * new Vector2(0.5f, 1f);
						origin21.Y -= 4f;
					}
					else if (projectile.type == 833)
					{
						if (projectile.frame != 8)
						{
							vector48.Y += projectile.height / 2;
							origin21 = rectangle20.Size() * new Vector2(0.5f, 1f);
							origin21.Y -= 4f;
							origin21.X -= 7 * spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt();
						}
					}
					else if (projectile.type == 834 || projectile.type == 835)
					{
						if (projectile.frame != 10)
						{
							vector48.Y += projectile.height / 2;
							origin21 = rectangle20.Size() * new Vector2(0.5f, 1f);
							origin21.Y -= 4f;
							origin21.X -= 2 * spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt();
						}
					}
					else if (projectile.type == 715 || projectile.type == 716 || projectile.type == 717 || projectile.type == 718)
					{
						rectangle20 = texture2D4.Frame(3);
						origin21 = rectangle20.Size() / 2f;
						int num314 = (int)projectile.ai[0];
						Vector2 origin22 = new Vector2(rectangle20.Width / 2, 0f);
						Vector2 value119 = projectile.Size / 2f;
						Microsoft.Xna.Framework.Color celeb2Color = projectile.GetCeleb2Color();
						celeb2Color.A = 127;
						celeb2Color *= 0.8f;
						Microsoft.Xna.Framework.Rectangle value120 = rectangle20;
						value120.X += value120.Width * 2;
						for (int num315 = projectile.oldPos.Length - 1; num315 > 0; num315--)
						{
							Vector2 value121 = projectile.oldPos[num315] + value119;
							if (!(value121 == value119))
							{
								Vector2 value122 = projectile.oldPos[num315 - 1] + value119;
								float num316 = projectile.oldRot[num315];
								Vector2 scale22 = new Vector2(Vector2.Distance(value121, value122) / (float)rectangle20.Width, 1f);
								Microsoft.Xna.Framework.Color color81 = celeb2Color * (1f - (float)num315 / (float)projectile.oldPos.Length);
								switch (num314)
								{
								case 2:
								{
									Vector2 value123 = num316.ToRotationVector2();
									int num317 = num315 + projectile.timeLeft;
									if (num317 < 0)
									{
										num317 += 20 * (num317 / -20) + 20;
									}
									num317 %= 20;
									float scaleFactor4 = 0f;
									scale22 *= 0.6f;
									switch (num317)
									{
									case 1:
										scaleFactor4 = 1f;
										break;
									case 2:
										scaleFactor4 = 2f;
										break;
									case 3:
										scaleFactor4 = 3f;
										break;
									case 4:
										scaleFactor4 = 2f;
										break;
									case 5:
										scaleFactor4 = 1f;
										break;
									case 7:
										scaleFactor4 = -1f;
										break;
									case 8:
										scaleFactor4 = -2f;
										break;
									case 9:
										scaleFactor4 = -3f;
										break;
									case 10:
										scaleFactor4 = -2f;
										break;
									case 11:
										scaleFactor4 = -1f;
										break;
									}
									value121 += value123 * scaleFactor4 * 4f;
									break;
								}
								case 5:
									scale22 *= 0.5f;
									break;
								}
								EntitySpriteDraw(texture2D4, value121 - screenPosition, value120, color81, num316, origin22, scale22, spriteEffects, 0);
							}
						}
					}
					else if (projectile.type == 663 || projectile.type == 665 || projectile.type == 667)
					{
						vector48 = projectile.Bottom + Vector2.UnitY * projectile.gfxOffY - screenPosition;
						origin21 = rectangle20.Size() * new Vector2(0.5f, 1f);
						origin21.Y -= 2f;
						origin21.Y -= 2f;
					}
					else if (projectile.type == 691 || projectile.type == 692 || projectile.type == 693)
					{
						vector48 = projectile.Bottom + Vector2.UnitY * projectile.gfxOffY - screenPosition;
						origin21 = rectangle20.Size() * new Vector2(0.5f, 1f);
						origin21.Y -= 2f;
						origin21.Y -= 2f;
					}
					else if (projectile.type == 677 || projectile.type == 678 || projectile.type == 679)
					{
						if (projectile.spriteDirection == -1)
						{
							spriteEffects ^= SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically;
						}
						Texture2D value124 = TextureAssets.Extra[83].Value;
						if (projectile.type == 678)
						{
							value124 = TextureAssets.Extra[84].Value;
						}
						if (projectile.type == 679)
						{
							value124 = TextureAssets.Extra[85].Value;
						}
						Vector2 position20 = projectile.Bottom + Vector2.UnitY * projectile.gfxOffY - screenPosition;
						Vector2 origin23 = value124.Size() * new Vector2(0.5f, 1f);
						origin23.Y -= 2f;
						EntitySpriteDraw(value124, position20, null, color79, 0f, origin23, 1f, spriteEffects & SpriteEffects.FlipHorizontally, 0);
						origin21.X += spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt();
						vector48.Y += 1f;
						vector48.Y += 2f;
						if (projectile.type == 678)
						{
							vector48.Y += -4f;
						}
						if (projectile.type == 679)
						{
							vector48.Y -= 2f;
							if (!spriteEffects.HasFlag(SpriteEffects.FlipVertically))
							{
								origin21.Y += 4f;
							}
							else
							{
								origin21.Y -= 4f;
							}
							origin21.X += spriteEffects.HasFlag(SpriteEffects.FlipHorizontally).ToDirectionInt() * 4;
						}
					}
					else if (projectile.type == 602)
					{
						origin21.X = rectangle20.Width - 6;
						origin21.Y -= 1f;
						rectangle20.Height -= 2;
					}
					else if (projectile.type == 589)
					{
						rectangle20 = texture2D4.Frame(5, 1, (int)projectile.ai[1]);
						origin21 = rectangle20.Size() / 2f;
					}
					else if (projectile.type == 590)
					{
						rectangle20 = texture2D4.Frame(3, 1, projectile.frame);
						origin21 = rectangle20.Size() / 2f;
					}
					else if (projectile.type == 836)
					{
						rectangle20 = texture2D4.Frame(4, 1, projectile.frame);
						origin21 = rectangle20.Size() / 2f;
					}
					else if (projectile.type == 650 || projectile.type == 882 || projectile.type == 888 || projectile.type == 894 || projectile.type == 895 || projectile.type == 896 || projectile.type == 898 || projectile.type == 901)
					{
						origin21.Y -= 4f;
					}
					else if (projectile.type == 623)
					{
						if (projectile.ai[0] == 2f)
						{
							vector48 += rand.NextVector2Circular(2f, 2f);
						}
						if (CurrentDrawnEntityShader == 0)
						{
							color79.A /= 2;
						}
					}
					else if (projectile.type >= 625 && projectile.type <= 628)
					{
						color79.A /= 2;
					}
					else if (projectile.type == 644)
					{
						Microsoft.Xna.Framework.Color color82 = hslToRgb(projectile.ai[0], 1f, 0.5f).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0));
						EntitySpriteDraw(texture2D4, vector48, rectangle20, color82, projectile.rotation, origin21, projectile.scale * 2f, spriteEffects, 0);
						EntitySpriteDraw(texture2D4, vector48, rectangle20, color82, 0f, origin21, projectile.scale * 2f, spriteEffects, 0);
						if (projectile.ai[1] != -1f && projectile.Opacity > 0.3f)
						{
							Vector2 vector49 = Main.projectile[(int)projectile.ai[1]].Center - projectile.Center;
							Vector2 vector50 = new Vector2(1f, vector49.Length() / (float)texture2D4.Height);
							float rotation28 = vector49.ToRotation() + (float)Math.PI / 2f;
							float value125 = MathHelper.Distance(30f, projectile.localAI[1]) / 20f;
							value125 = MathHelper.Clamp(value125, 0f, 1f);
							if (value125 > 0f)
							{
								EntitySpriteDraw(texture2D4, vector48 + vector49 / 2f, rectangle20, color82 * value125, rotation28, origin21, vector50, spriteEffects, 0);
								EntitySpriteDraw(texture2D4, vector48 + vector49 / 2f, rectangle20, color79 * value125, rotation28, origin21, vector50 / 2f, spriteEffects, 0);
							}
						}
					}
					else if (projectile.type == 658)
					{
						Microsoft.Xna.Framework.Color color83 = hslToRgb(0.136f, 1f, 0.5f).MultiplyRGBA(new Microsoft.Xna.Framework.Color(255, 255, 255, 0));
						EntitySpriteDraw(texture2D4, vector48, rectangle20, color83, 0f, origin21, new Vector2(1f, 5f) * projectile.scale * 2f, spriteEffects, 0);
					}
					EntitySpriteDraw(texture2D4, vector48, rectangle20, color79, projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
					if (projectile.type == 896)
					{
						Texture2D value126 = TextureAssets.GlowMask[278].Value;
						Microsoft.Xna.Framework.Color color84 = new Microsoft.Xna.Framework.Color(150, 150, 150, 100);
						for (int num318 = 0; num318 < 2; num318++)
						{
							Vector2 position21 = vector48 + new Vector2((float)rand.Next(-10, 11) * 0.1f, (float)rand.Next(-10, 11) * 0.1f);
							EntitySpriteDraw(value126, position21, rectangle20, color84, projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
						}
						EntitySpriteDraw(value126, vector48, rectangle20, Microsoft.Xna.Framework.Color.White, projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
					}
					if (projectile.type == 889)
					{
						Texture2D value127 = TextureAssets.GlowMask[276].Value;
						Microsoft.Xna.Framework.Color color85 = Microsoft.Xna.Framework.Color.White * (int)mouseTextColor;
						EntitySpriteDraw(value127, vector48, rectangle20, color85, projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
						for (int num319 = 0; num319 < 4; num319++)
						{
							int num320 = 28;
							int num321 = 7 + num319;
							float num322 = 100f;
							bool flag34 = num321 == 8;
							Microsoft.Xna.Framework.Rectangle value128 = texture2D4.Frame(1, projFrames[projectile.type], 0, num321);
							Vector2 value129 = vector48;
							Vector2 vector51 = vector48;
							SpriteEffects effects4 = SpriteEffects.None;
							float num323 = 0f;
							float num324 = GlobalTimeWrappedHourly * 2f;
							switch (num319)
							{
							case 1:
								num324 += (float)Math.PI / 2f;
								break;
							case 2:
								num324 += (float)Math.PI;
								break;
							case 3:
								num324 += 4.712389f;
								break;
							}
							num324 *= 3f;
							num323 = num324;
							vector51 += num324.ToRotationVector2() * num320;
							if (projectile.localAI[0] == num322)
							{
								EntitySpriteDraw(texture2D4, vector51, value128, color79, num323, origin21, projectile.scale, effects4, 0);
								if (flag34)
								{
									EntitySpriteDraw(value127, vector51, value128, color85, num323, origin21, projectile.scale, effects4, 0);
								}
								continue;
							}
							Vector2 vector52 = new Vector2(num320, -16f) + projectile.velocity * 1.5f;
							float num325 = 4f;
							float num326 = -0.35f;
							switch (num319)
							{
							case 1:
								vector52.X *= -1f;
								effects4 = SpriteEffects.FlipHorizontally;
								num326 = 0.35f;
								num325 = -3f;
								break;
							case 2:
								vector52.Y = 16f;
								num326 = 0.35f;
								num325 = 2f;
								break;
							case 3:
								vector52.X *= -1f;
								vector52.Y = 16f;
								effects4 = SpriteEffects.FlipHorizontally;
								num326 = -0.35f;
								num325 = -1f;
								break;
							}
							vector52 += (GlobalTimeWrappedHourly * num325).ToRotationVector2() * 4f;
							value129 += vector52;
							float num327 = projectile.localAI[0] / num322;
							value129 = Vector2.Lerp(value129, vector51, num327);
							num323 = ((num327 > 0.5f) ? num324 : num326);
							EntitySpriteDraw(texture2D4, value129, value128, color79, num323, origin21, projectile.scale, effects4, 0);
							if (flag34)
							{
								EntitySpriteDraw(value127, value129, value128, color85, num323, origin21, projectile.scale, effects4, 0);
							}
						}
					}
					if (projectile.type == 885)
					{
						for (int num328 = 0; num328 < 2; num328++)
						{
							SpriteEffects effects5 = SpriteEffects.None;
							int num329 = -30;
							if (num328 == 1)
							{
								num329 = 30;
								effects5 = SpriteEffects.FlipHorizontally;
							}
							int num330 = (int)projectile.localAI[0];
							if (projectile.frame == 6)
							{
								num330 = 0;
							}
							else if (num328 == 1)
							{
								num330 = 2 - num330;
							}
							num330 += 7;
							Microsoft.Xna.Framework.Rectangle value130 = texture2D4.Frame(1, projFrames[projectile.type], 0, num330);
							Vector2 position22 = vector48 + new Vector2(num329, 0f);
							Vector2 vector53 = (GlobalTimeWrappedHourly * 2f).ToRotationVector2() * 4f;
							vector53 += projectile.velocity * -1.5f;
							Vector2 value131 = (GlobalTimeWrappedHourly * 1f).ToRotationVector2() * 3f;
							if (num328 == 1)
							{
								position22 += vector53 + value131;
							}
							else
							{
								position22 -= vector53;
							}
							EntitySpriteDraw(texture2D4, position22, value130, color79, 0f, origin21, projectile.scale, effects5, 0);
						}
					}
					if (projectile.type == 535)
					{
						for (int num331 = 0; num331 < 1000; num331++)
						{
							if (Main.projectile[num331].active && Main.projectile[num331].owner == projectile.owner && Main.projectile[num331].type == 536)
							{
								DrawProj(num331);
							}
						}
					}
					else if (projectile.type == 715 || projectile.type == 716 || projectile.type == 717 || projectile.type == 718)
					{
						rectangle20.X += rectangle20.Width;
						Microsoft.Xna.Framework.Color celeb2Color2 = projectile.GetCeleb2Color();
						celeb2Color2.A = 80;
						EntitySpriteDraw(texture2D4, vector48, rectangle20, celeb2Color2, projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 702)
					{
						Texture2D value132 = TextureAssets.Flames[5].Value;
						Vector2 origin24 = value132.Size() / 2f;
						Vector2 value133 = new Vector2(5 * projectile.spriteDirection, -10f).RotatedBy(projectile.rotation);
						ulong seed2 = (ulong)(projectile.localAI[0] / 4f);
						for (int num332 = 0; num332 < 5; num332++)
						{
							Microsoft.Xna.Framework.Color color86 = new Microsoft.Xna.Framework.Color(100, 100, 100, 0);
							float x14 = (float)Utils.RandomInt(seed2, -10, 11) * 0.15f;
							float y23 = (float)Utils.RandomInt(seed2, -10, 1) * 0.35f;
							EntitySpriteDraw(value132, vector48 + value133 + new Vector2(x14, y23), null, color86, projectile.rotation, origin24, 1f, spriteEffects, 0);
						}
					}
					else if (projectile.type == 663 || projectile.type == 665 || projectile.type == 667)
					{
						Texture2D value134 = TextureAssets.GlowMask[221].Value;
						switch (projectile.type)
						{
						case 665:
							value134 = TextureAssets.GlowMask[222].Value;
							break;
						case 667:
							value134 = TextureAssets.GlowMask[223].Value;
							break;
						}
						float num333 = (projectile.localAI[0] / 100f * ((float)Math.PI * 2f)).ToRotationVector2().X * 1f + 1f;
						Microsoft.Xna.Framework.Color color87 = new Microsoft.Xna.Framework.Color(140, 100, 40, 0) * (num333 / 4f + 0.5f) * 1f;
						for (float num334 = 0f; num334 < 4f; num334 += 1f)
						{
							EntitySpriteDraw(value134, vector48 + (num334 * ((float)Math.PI / 2f)).ToRotationVector2() * num333, rectangle20, color87, projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
						}
					}
					else if (projectile.type == 644)
					{
						EntitySpriteDraw(texture2D4, vector48, rectangle20, color79, 0f, origin21, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 773 && projectile.velocity.Length() == 0f)
					{
						EntitySpriteDraw(TextureAssets.GlowMask[266].Value, color: Microsoft.Xna.Framework.Color.White * (int)mouseTextColor, position: vector48, sourceRectangle: rectangle20, rotation: projectile.rotation, origin: origin21, scale: projectile.scale, effects: spriteEffects, worthless: 0);
					}
					else if (projectile.type == 658)
					{
						EntitySpriteDraw(texture2D4, vector48, rectangle20, color79, 0f, origin21, new Vector2(1f, 8f) * projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 602)
					{
						texture2D4 = TextureAssets.Extra[60].Value;
						Microsoft.Xna.Framework.Color color89 = color79;
						color89.A = 0;
						color89 *= 0.3f;
						origin21 = texture2D4.Size() / 2f;
						EntitySpriteDraw(texture2D4, vector48, null, color89, projectile.rotation - (float)Math.PI / 2f, origin21, projectile.scale, spriteEffects, 0);
						texture2D4 = TextureAssets.Extra[59].Value;
						color89 = color79;
						color89.A = 0;
						color89 *= 0.13f;
						origin21 = texture2D4.Size() / 2f;
						EntitySpriteDraw(texture2D4, vector48, null, color89, projectile.rotation - (float)Math.PI / 2f, origin21, projectile.scale * 0.9f, spriteEffects, 0);
					}
					else if (projectile.type == 539)
					{
						EntitySpriteDraw(TextureAssets.GlowMask[140].Value, vector48, rectangle20, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 613)
					{
						EntitySpriteDraw(TextureAssets.GlowMask[189].Value, vector48, rectangle20, new Microsoft.Xna.Framework.Color(128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 0), projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 614)
					{
						EntitySpriteDraw(TextureAssets.GlowMask[190].Value, vector48, rectangle20, new Microsoft.Xna.Framework.Color(128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 128 - projectile.alpha / 2, 0), projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 574)
					{
						EntitySpriteDraw(TextureAssets.GlowMask[148].Value, vector48, rectangle20, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 691 || projectile.type == 692 || projectile.type == 693)
					{
						Texture2D value136 = TextureAssets.GlowMask[235].Value;
						switch (projectile.type)
						{
						case 692:
							value136 = TextureAssets.GlowMask[236].Value;
							break;
						case 693:
							value136 = TextureAssets.GlowMask[237].Value;
							break;
						}
						EntitySpriteDraw(value136, vector48, rectangle20, new Microsoft.Xna.Framework.Color(255, 255, 255, 127), projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 590)
					{
						EntitySpriteDraw(TextureAssets.GlowMask[168].Value, vector48, rectangle20, new Microsoft.Xna.Framework.Color(127 - projectile.alpha / 2, 127 - projectile.alpha / 2, 127 - projectile.alpha / 2, 0), projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
					}
					else if (projectile.type == 623 || (projectile.type >= 625 && projectile.type <= 628))
					{
						if (Main.player[projectile.owner].ghostFade != 0f)
						{
							float scaleFactor5 = Main.player[projectile.owner].ghostFade * 5f;
							for (float num335 = 0f; num335 < 4f; num335 += 1f)
							{
								EntitySpriteDraw(texture2D4, vector48 + Vector2.UnitY.RotatedBy(num335 * ((float)Math.PI * 2f) / 4f) * scaleFactor5, rectangle20, color79 * 0.1f, projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
							}
						}
						if (projectile.type == 623 && projectile.ai[0] == 2f && projectile.frame >= 14)
						{
							DrawProj_StardustGuardianPunching(projectile);
						}
					}
					else if (projectile.type == 643)
					{
						float scaleFactor6 = (float)Math.Cos((float)Math.PI * 2f * (projectile.localAI[0] / 60f)) + 3f + 3f;
						for (float num336 = 0f; num336 < 4f; num336 += 1f)
						{
							EntitySpriteDraw(texture2D4, vector48 + Vector2.UnitY.RotatedBy(num336 * ((float)Math.PI / 2f)) * scaleFactor6, rectangle20, color79 * 0.2f, projectile.rotation, origin21, projectile.scale, spriteEffects, 0);
						}
					}
					else if (projectile.type == 650)
					{
						int num337 = (int)(projectile.localAI[0] / ((float)Math.PI * 2f));
						float f = projectile.localAI[0] % ((float)Math.PI * 2f) - (float)Math.PI;
						float num338 = (float)Math.IEEERemainder(projectile.localAI[1], 1.0);
						if (num338 < 0f)
						{
							num338 += 1f;
						}
						int num339 = (int)Math.Floor(projectile.localAI[1]);
						float num340 = 1f;
						float scaleFactor7 = 5f;
						num340 = 1f + (float)num339 * 0.02f;
						if ((float)num337 == 1f)
						{
							scaleFactor7 = 7f;
						}
						Vector2 value137 = f.ToRotationVector2() * num338 * scaleFactor7 * projectile.scale;
						texture2D4 = TextureAssets.Extra[66].Value;
						EntitySpriteDraw(texture2D4, vector48 + value137, null, color79, projectile.rotation, texture2D4.Size() / 2f, num340, SpriteEffects.None, 0);
					}
					return;
				}
				if (projectile.type == 466)
				{
					Vector2 end = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					Texture2D value138 = TextureAssets.Extra[33].Value;
					projectile.GetAlpha(color29);
					Vector2 vector54 = new Vector2(projectile.scale) / 2f;
					for (int num341 = 0; num341 < 3; num341++)
					{
						switch (num341)
						{
						case 0:
							vector54 = new Vector2(projectile.scale) * 0.6f;
							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(115, 204, 219, 0) * 0.5f;
							break;
						case 1:
							vector54 = new Vector2(projectile.scale) * 0.4f;
							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(113, 251, 255, 0) * 0.5f;
							break;
						default:
							vector54 = new Vector2(projectile.scale) * 0.2f;
							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.5f;
							break;
						}
						DelegateMethods.f_1 = 1f;
						for (int num342 = projectile.oldPos.Length - 1; num342 > 0; num342--)
						{
							if (!(projectile.oldPos[num342] == Vector2.Zero))
							{
								Vector2 start = projectile.oldPos[num342] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
								Vector2 end2 = projectile.oldPos[num342 - 1] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
								Utils.DrawLaser(spriteBatch, value138, start, end2, vector54, DelegateMethods.LightningLaserDraw);
							}
						}
						if (projectile.oldPos[0] != Vector2.Zero)
						{
							DelegateMethods.f_1 = 1f;
							Vector2 start2 = projectile.oldPos[0] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
							Utils.DrawLaser(spriteBatch, value138, start2, end, vector54, DelegateMethods.LightningLaserDraw);
						}
					}
					return;
				}
				if (projectile.type == 580)
				{
					Vector2 end3 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					Texture2D value139 = TextureAssets.Extra[33].Value;
					projectile.GetAlpha(color29);
					Vector2 vector55 = new Vector2(projectile.scale) / 2f;
					for (int num343 = 0; num343 < 2; num343++)
					{
						float num344 = ((projectile.localAI[1] == -1f || projectile.localAI[1] == 1f) ? (-0.2f) : 0f);
						if (num343 == 0)
						{
							vector55 = new Vector2(projectile.scale) * (0.5f + num344);
							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(115, 244, 219, 0) * 0.5f;
						}
						else
						{
							vector55 = new Vector2(projectile.scale) * (0.3f + num344);
							DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.5f;
						}
						DelegateMethods.f_1 = 1f;
						for (int num345 = projectile.oldPos.Length - 1; num345 > 0; num345--)
						{
							if (!(projectile.oldPos[num345] == Vector2.Zero))
							{
								Vector2 start3 = projectile.oldPos[num345] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
								Vector2 end4 = projectile.oldPos[num345 - 1] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
								Utils.DrawLaser(spriteBatch, value139, start3, end4, vector55, DelegateMethods.LightningLaserDraw);
							}
						}
						if (projectile.oldPos[0] != Vector2.Zero)
						{
							DelegateMethods.f_1 = 1f;
							Vector2 start4 = projectile.oldPos[0] + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
							Utils.DrawLaser(spriteBatch, value139, start4, end3, vector55, DelegateMethods.LightningLaserDraw);
						}
					}
					return;
				}
				if (projectile.type == 445)
				{
					if (Main.player[Main.projectile[i].owner].gravDir == -1f)
					{
						spriteEffects |= SpriteEffects.FlipVertically;
					}
					Vector2 vector56 = projectile.position + new Vector2(projectile.width, projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - screenPosition;
					Texture2D value140 = TextureAssets.Projectile[projectile.type].Value;
					Microsoft.Xna.Framework.Color alpha10 = projectile.GetAlpha(color29);
					Vector2 vector57 = Main.player[projectile.owner].RotatedRelativePoint(mountedCenter) + Vector2.UnitY * Main.player[projectile.owner].gfxOffY;
					Vector2 vector58 = vector56 + screenPosition - vector57;
					Vector2 value141 = Vector2.Normalize(vector58);
					float num346 = vector58.Length();
					float num347 = vector58.ToRotation() + (float)Math.PI / 2f;
					float num348 = -5f;
					float num349 = num348 + 30f;
					new Vector2(2f, num346 - num349);
					Vector2 value142 = Vector2.Lerp(vector56 + screenPosition, vector57 + value141 * num349, 0.5f);
					Vector2 vector59 = -Vector2.UnitY.RotatedBy(projectile.localAI[0] / 60f * (float)Math.PI);
					Vector2[] array7 = new Vector2[4]
					{
						vector59,
						vector59.RotatedBy(1.5707963705062866),
						vector59.RotatedBy(3.1415927410125732),
						vector59.RotatedBy(4.71238899230957)
					};
					if (num346 > num349)
					{
						for (int num350 = 0; num350 < 2; num350++)
						{
							Microsoft.Xna.Framework.Color white4 = Microsoft.Xna.Framework.Color.White;
							if (num350 % 2 == 0)
							{
								white4 = Microsoft.Xna.Framework.Color.LimeGreen;
								white4.A = 128;
								white4 *= 0.5f;
							}
							else
							{
								white4 = Microsoft.Xna.Framework.Color.CornflowerBlue;
								white4.A = 128;
								white4 *= 0.5f;
							}
							Vector2 value143 = new Vector2(array7[num350].X, 0f).RotatedBy(num347) * 4f;
							EntitySpriteDraw(TextureAssets.MagicPixel.Value, value142 - screenPosition + value143, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), white4, num347, Vector2.One / 2f, new Vector2(2f, num346 - num349), spriteEffects, 0);
						}
					}
					int type2 = Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].type;
					instance.LoadItem(type2);
					Texture2D value144 = TextureAssets.Item[type2].Value;
					Microsoft.Xna.Framework.Color color90 = Lighting.GetColor((int)vector57.X / 16, (int)vector57.Y / 16);
					EntitySpriteDraw(value144, vector57 - screenPosition + value141 * num348, null, color90, projectile.rotation + (float)Math.PI / 2f + ((spriteEffects == SpriteEffects.None || spriteEffects == SpriteEffects.FlipVertically) ? ((float)Math.PI) : 0f), new Vector2((spriteEffects != 0 && spriteEffects != SpriteEffects.FlipVertically) ? value144.Width : 0, (float)value144.Height / 2f) + Vector2.UnitY * 1f, Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].scale, spriteEffects, 0);
					EntitySpriteDraw(TextureAssets.GlowMask[39].Value, vector57 - screenPosition + value141 * num348, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation + (float)Math.PI / 2f + ((spriteEffects == SpriteEffects.None || spriteEffects == SpriteEffects.FlipVertically) ? ((float)Math.PI) : 0f), new Vector2((spriteEffects != 0 && spriteEffects != SpriteEffects.FlipVertically) ? value144.Width : 0, (float)value144.Height / 2f) + Vector2.UnitY * 1f, Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].scale, spriteEffects, 0);
					if (num346 > num349)
					{
						for (int num351 = 2; num351 < 4; num351++)
						{
							Microsoft.Xna.Framework.Color white5 = Microsoft.Xna.Framework.Color.White;
							if (num351 % 2 == 0)
							{
								white5 = Microsoft.Xna.Framework.Color.LimeGreen;
								white5.A = 128;
								white5 *= 0.5f;
							}
							else
							{
								white5 = Microsoft.Xna.Framework.Color.CornflowerBlue;
								white5.A = 128;
								white5 *= 0.5f;
							}
							Vector2 value145 = new Vector2(array7[num351].X, 0f).RotatedBy(num347) * 4f;
							EntitySpriteDraw(TextureAssets.MagicPixel.Value, value142 - screenPosition + value145, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), white5, num347, Vector2.One / 2f, new Vector2(2f, num346 - num349), spriteEffects, 0);
						}
					}
					float num352 = projectile.localAI[0] / 60f;
					if (num352 > 0.5f)
					{
						num352 = 1f - num352;
					}
					EntitySpriteDraw(value140, vector56, null, alpha10 * num352 * 2f, projectile.rotation, new Vector2(value140.Width, value140.Height) / 2f, projectile.scale, spriteEffects, 0);
					EntitySpriteDraw(TextureAssets.GlowMask[40].Value, vector56, null, alpha10 * (0.5f - num352) * 2f, projectile.rotation, new Vector2(value140.Width, value140.Height) / 2f, projectile.scale, spriteEffects, 0);
					return;
				}
				if ((projectile.type >= 393 && projectile.type <= 395) || projectile.type == 398 || projectile.type == 423 || projectile.type == 450)
				{
					Texture2D value146 = TextureAssets.Projectile[projectile.type].Value;
					int num353 = TextureAssets.Projectile[projectile.type].Height() / projFrames[projectile.type];
					int y24 = num353 * projectile.frame;
					EntitySpriteDraw(value146, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle(0, y24, value146.Width, num353), projectile.GetAlpha(color29), projectile.rotation, new Vector2((float)value146.Width / 2f, (float)num353 / 2f), projectile.scale, spriteEffects, 0);
					if (projectile.type == 398)
					{
						value146 = TextureAssets.MiniMinotaur.Value;
						EntitySpriteDraw(value146, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle(0, y24, value146.Width, num353), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2((float)value146.Width / 2f, (float)num353 / 2f), projectile.scale, spriteEffects, 0);
					}
					if (projectile.type == 423)
					{
						value146 = TextureAssets.GlowMask[0].Value;
						EntitySpriteDraw(value146, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY - 2f), new Microsoft.Xna.Framework.Rectangle(0, y24, value146.Width, num353), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2((float)value146.Width / 2f, (float)num353 / 2f), projectile.scale, spriteEffects, 0);
					}
					return;
				}
				if (projectile.type == 385)
				{
					Texture2D value147 = TextureAssets.Projectile[projectile.type].Value;
					int num354 = value147.Height / projFrames[projectile.type];
					int y25 = num354 * projectile.frame;
					int num355 = 8;
					int num356 = 2;
					float value148 = 0.4f;
					for (int num357 = 1; num357 < num355; num357 += num356)
					{
						_ = projectile.oldPos[num357];
						Microsoft.Xna.Framework.Color newColor3 = color29;
						newColor3 = projectile.GetAlpha(newColor3);
						newColor3 *= (float)(num355 - num357) / 15f;
						Microsoft.Xna.Framework.Color alpha11 = projectile.GetAlpha(color29);
						_ = projectile.oldPos[num357] - screenPosition + new Vector2(num137 + (float)num136, (float)(projectile.height / 2) + projectile.gfxOffY);
						EntitySpriteDraw(value147, projectile.oldPos[num357] + new Vector2(projectile.width, projectile.height) / 2f - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y25, value147.Width, num354), Microsoft.Xna.Framework.Color.Lerp(alpha11, newColor3, 0.3f), projectile.rotation, new Vector2((float)value147.Width / 2f, (float)num354 / 2f), MathHelper.Lerp(projectile.scale, value148, (float)num357 / 15f), spriteEffects, 0);
					}
					EntitySpriteDraw(value147, projectile.Center - screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y25, value147.Width, num354), projectile.GetAlpha(color29), projectile.rotation, new Vector2((float)value147.Width / 2f, (float)num354 / 2f), projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.type == 388)
				{
					Texture2D value149 = TextureAssets.Projectile[projectile.type].Value;
					int num358 = value149.Height / projFrames[projectile.type];
					int y26 = num358 * projectile.frame;
					int num359 = 0;
					int num360 = 0;
					if (projectile.ai[0] == 2f)
					{
						num359 = 10;
						num360 = 1;
					}
					else
					{
						num360 = 2;
						num359 = 5;
					}
					for (int num361 = 1; num361 < num359; num361 += num360)
					{
						_ = projectile.oldPos[num361];
						Microsoft.Xna.Framework.Color newColor4 = color29;
						newColor4 = projectile.GetAlpha(newColor4);
						newColor4 *= (float)(num359 - num361) / 15f;
						Vector2 position23 = projectile.oldPos[num361] - screenPosition + new Vector2(num137 + (float)num136, (float)(projectile.height / 2) + projectile.gfxOffY);
						EntitySpriteDraw(value149, position23, new Microsoft.Xna.Framework.Rectangle(0, y26, value149.Width, num358), newColor4, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					}
					EntitySpriteDraw(value149, projectile.position - screenPosition + new Vector2(num137 + (float)num136, (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y26, value149.Width, num358), projectile.GetAlpha(color29), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					return;
				}
				if (projFrames[projectile.type] > 1)
				{
					int num362 = TextureAssets.Projectile[projectile.type].Height() / projFrames[projectile.type];
					int y27 = num362 * projectile.frame;
					if (projectile.type == 111)
					{
						int r = Main.player[projectile.owner].shirtColor.R;
						int g = Main.player[projectile.owner].shirtColor.G;
						int b = Main.player[projectile.owner].shirtColor.B;
						color29 = Lighting.GetColor(oldColor: new Microsoft.Xna.Framework.Color((byte)r, (byte)g, (byte)b), x: (int)((double)projectile.position.X + (double)projectile.width * 0.5) / 16, y: (int)(((double)projectile.position.Y + (double)projectile.height * 0.5) / 16.0));
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y27, TextureAssets.Projectile[projectile.type].Width(), num362), projectile.GetAlpha(color29), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
						return;
					}
					Microsoft.Xna.Framework.Color alpha12 = projectile.GetAlpha(color29);
					if (projectile.type == 211 && CurrentDrawnEntityShader != 0)
					{
						alpha12.A = 127;
					}
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y27, TextureAssets.Projectile[projectile.type].Width(), num362 - 1), alpha12, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					if (projectile.type == 335)
					{
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y27, TextureAssets.Projectile[projectile.type].Width(), num362 - 1), new Microsoft.Xna.Framework.Color(100, 100, 100, 0), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					}
					if (projectile.type == 897 || projectile.type == 899)
					{
						int num363 = 279;
						if (projectile.type == 899)
						{
							num363 = 281;
						}
						EntitySpriteDraw(TextureAssets.GlowMask[num363].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y27, TextureAssets.Projectile[projectile.type].Width(), num362 - 1), Microsoft.Xna.Framework.Color.White, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					}
					if (projectile.type == 891)
					{
						float num364 = Utils.WrappedLerp(0.6f, 1f, (float)((int)timeForVisualEffects % 100) / 100f);
						EntitySpriteDraw(color: new Microsoft.Xna.Framework.Color(num364, num364, num364, 150f), texture: TextureAssets.GlowMask[277].Value, position: new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), sourceRectangle: new Microsoft.Xna.Framework.Rectangle(0, y27, TextureAssets.Projectile[projectile.type].Width(), num362 - 1), rotation: projectile.rotation, origin: new Vector2(num137, projectile.height / 2 + num135), scale: projectile.scale, effects: spriteEffects, worthless: 0);
					}
					if (projectile.type == 595)
					{
						Player player5 = Main.player[projectile.owner];
						if (player5.active && player5.body == 208)
						{
							for (float num365 = 0f; num365 <= 1f; num365 += 0.2f)
							{
								Microsoft.Xna.Framework.Color underShirtColor = player5.underShirtColor;
								underShirtColor.A = (byte)(120f * (1f - num365 * 0.5f));
								EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y27, TextureAssets.Projectile[projectile.type].Width(), num362 - 1), underShirtColor, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale * MathHelper.Lerp(0.8f, 1.3f, num365), spriteEffects, 0);
							}
						}
					}
					if (projectile.type == 387)
					{
						EntitySpriteDraw(TextureAssets.EyeLaserSmall.Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y27, TextureAssets.Projectile[projectile.type].Width(), num362), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					}
					if (projectile.type != 525)
					{
						return;
					}
					int num366 = TryInteractingWithMoneyTrough(projectile);
					if (num366 != 0)
					{
						int num367 = (color29.R + color29.G + color29.B) / 3;
						if (num367 > 10)
						{
							Microsoft.Xna.Framework.Color selectionGlowColor = Colors.GetSelectionGlowColor(num366 == 2, num367);
							EntitySpriteDraw(TextureAssets.Extra[94].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, y27, TextureAssets.Projectile[projectile.type].Width(), num362 - 1), selectionGlowColor, 0f, new Vector2(num137, projectile.height / 2 + num135), 1f, spriteEffects, 0);
						}
					}
					return;
				}
				if (projectile.type == 383 || projectile.type == 399)
				{
					Texture2D value150 = TextureAssets.Projectile[projectile.type].Value;
					EntitySpriteDraw(value150, projectile.Center - screenPosition, null, projectile.GetAlpha(color29), projectile.rotation, new Vector2(value150.Width, value150.Height) / 2f, projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.type == 157 || projectile.type == 378)
				{
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), projectile.GetAlpha(color29), projectile.rotation, new Vector2(TextureAssets.Projectile[projectile.type].Width() / 2, TextureAssets.Projectile[projectile.type].Height() / 2), projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.type == 306)
				{
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), projectile.GetAlpha(color29), projectile.rotation, new Vector2(TextureAssets.Projectile[projectile.type].Width() / 2, TextureAssets.Projectile[projectile.type].Height() / 2), projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.type == 256)
				{
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), projectile.GetAlpha(color29), projectile.rotation, new Vector2(TextureAssets.Projectile[projectile.type].Width() / 2, TextureAssets.Projectile[projectile.type].Height() / 2), projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.aiStyle == 27)
				{
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), projectile.GetAlpha(color29), projectile.rotation, new Vector2(TextureAssets.Projectile[projectile.type].Width(), 0f), projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.aiStyle == 19)
				{
					spriteEffects = SpriteEffects.None;
					float num368 = (float)Math.Atan2(projectile.velocity.Y, projectile.velocity.X) + 2.355f;
					Vector2 origin25 = Vector2.Zero;
					if (Main.player[projectile.owner].direction > 0)
					{
						spriteEffects = SpriteEffects.FlipHorizontally;
						origin25.X = TextureAssets.Projectile[projectile.type].Width();
						num368 -= (float)Math.PI / 2f;
					}
					if (Main.player[projectile.owner].gravDir == -1f)
					{
						if (projectile.direction == 1)
						{
							spriteEffects = SpriteEffects.FlipHorizontally | SpriteEffects.FlipVertically;
							origin25 = new Vector2(TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height());
							num368 -= (float)Math.PI / 2f;
						}
						else if (projectile.direction == -1)
						{
							spriteEffects = SpriteEffects.FlipVertically;
							origin25 = new Vector2(0f, TextureAssets.Projectile[projectile.type].Height());
							num368 += (float)Math.PI / 2f;
						}
					}
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + (float)(projectile.width / 2), projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), projectile.GetAlpha(color29), num368, origin25, projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.type == 451)
				{
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, projectile.Center - screenPosition, null, projectile.GetAlpha(color29), projectile.rotation, new Vector2(TextureAssets.Projectile[projectile.type].Width(), 0f), projectile.scale, spriteEffects, 0);
					return;
				}
				if (projectile.type == 434)
				{
					Vector2 value151 = new Vector2(projectile.ai[0], projectile.ai[1]);
					Vector2 v = projectile.position - value151;
					float num369 = (float)Math.Sqrt(v.X * v.X + v.Y * v.Y);
					new Vector2(4f, num369);
					float rotation29 = v.ToRotation() + (float)Math.PI / 2f;
					Vector2 value152 = Vector2.Lerp(projectile.position, value151, 0.5f);
					Microsoft.Xna.Framework.Color red = Microsoft.Xna.Framework.Color.Red;
					red.A = 0;
					Microsoft.Xna.Framework.Color white6 = Microsoft.Xna.Framework.Color.White;
					red *= projectile.localAI[0];
					white6 *= projectile.localAI[0];
					float num370 = (float)Math.Sqrt(projectile.damage / 50);
					EntitySpriteDraw(TextureAssets.MagicPixel.Value, value152 - screenPosition, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), red, rotation29, Vector2.One / 2f, new Vector2(2f * num370, num369 + 8f), spriteEffects, 0);
					EntitySpriteDraw(TextureAssets.MagicPixel.Value, value152 - screenPosition, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), red, rotation29, Vector2.One / 2f, new Vector2(4f * num370, num369), spriteEffects, 0);
					EntitySpriteDraw(TextureAssets.MagicPixel.Value, value152 - screenPosition, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), white6, rotation29, Vector2.One / 2f, new Vector2(2f * num370, num369), spriteEffects, 0);
					return;
				}
				if (projectile.type == 94 && projectile.ai[1] > 6f)
				{
					for (int num371 = 0; num371 < 10; num371++)
					{
						Microsoft.Xna.Framework.Color alpha13 = projectile.GetAlpha(color29);
						float num372 = (float)(9 - num371) / 9f;
						alpha13.R = (byte)((float)(int)alpha13.R * num372);
						alpha13.G = (byte)((float)(int)alpha13.G * num372);
						alpha13.B = (byte)((float)(int)alpha13.B * num372);
						alpha13.A = (byte)((float)(int)alpha13.A * num372);
						float num373 = (float)(9 - num371) / 9f;
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.oldPos[num371].X - screenPosition.X + num137 + (float)num136, projectile.oldPos[num371].Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), alpha13, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), num373 * projectile.scale, spriteEffects, 0);
					}
				}
				if (projectile.type == 301)
				{
					for (int num374 = 0; num374 < 10; num374++)
					{
						Microsoft.Xna.Framework.Color alpha14 = projectile.GetAlpha(color29);
						float num375 = (float)(9 - num374) / 9f;
						alpha14.R = (byte)((float)(int)alpha14.R * num375);
						alpha14.G = (byte)((float)(int)alpha14.G * num375);
						alpha14.B = (byte)((float)(int)alpha14.B * num375);
						alpha14.A = (byte)((float)(int)alpha14.A * num375);
						float num376 = (float)(9 - num374) / 9f;
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.oldPos[num374].X - screenPosition.X + num137 + (float)num136, projectile.oldPos[num374].Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), alpha14, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), num376 * projectile.scale, spriteEffects, 0);
					}
				}
				if (projectile.type == 323 && projectile.alpha == 0)
				{
					for (int num377 = 1; num377 < 8; num377++)
					{
						float num378 = projectile.velocity.X * (float)num377;
						float num379 = projectile.velocity.Y * (float)num377;
						Microsoft.Xna.Framework.Color alpha15 = projectile.GetAlpha(color29);
						float num380 = 0f;
						if (num377 == 1)
						{
							num380 = 0.7f;
						}
						if (num377 == 2)
						{
							num380 = 0.6f;
						}
						if (num377 == 3)
						{
							num380 = 0.5f;
						}
						if (num377 == 4)
						{
							num380 = 0.4f;
						}
						if (num377 == 5)
						{
							num380 = 0.3f;
						}
						if (num377 == 6)
						{
							num380 = 0.2f;
						}
						if (num377 == 7)
						{
							num380 = 0.1f;
						}
						alpha15.R = (byte)((float)(int)alpha15.R * num380);
						alpha15.G = (byte)((float)(int)alpha15.G * num380);
						alpha15.B = (byte)((float)(int)alpha15.B * num380);
						alpha15.A = (byte)((float)(int)alpha15.A * num380);
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136 - num378, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num379), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), alpha15, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), num380 + 0.2f, spriteEffects, 0);
					}
				}
				if (projectile.type == 117 && projectile.ai[0] > 3f)
				{
					for (int num381 = 1; num381 < 5; num381++)
					{
						float num382 = projectile.velocity.X * (float)num381;
						float num383 = projectile.velocity.Y * (float)num381;
						Microsoft.Xna.Framework.Color alpha16 = projectile.GetAlpha(color29);
						float num384 = 0f;
						if (num381 == 1)
						{
							num384 = 0.4f;
						}
						if (num381 == 2)
						{
							num384 = 0.3f;
						}
						if (num381 == 3)
						{
							num384 = 0.2f;
						}
						if (num381 == 4)
						{
							num384 = 0.1f;
						}
						alpha16.R = (byte)((float)(int)alpha16.R * num384);
						alpha16.G = (byte)((float)(int)alpha16.G * num384);
						alpha16.B = (byte)((float)(int)alpha16.B * num384);
						alpha16.A = (byte)((float)(int)alpha16.A * num384);
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136 - num382, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num383), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), alpha16, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					}
				}
				if (projectile.bobber)
				{
					if (projectile.ai[1] > 0f && projectile.ai[1] < 5045f && projectile.ai[0] == 1f)
					{
						int num385 = (int)projectile.ai[1];
						Vector2 center5 = projectile.Center;
						float rotation30 = projectile.rotation;
						Vector2 vector60 = center5;
						float num386 = polePosX - vector60.X;
						float num387 = polePosY - vector60.Y;
						rotation30 = (float)Math.Atan2(num387, num386);
						if (projectile.velocity.X > 0f)
						{
							spriteEffects = SpriteEffects.None;
							rotation30 = (float)Math.Atan2(num387, num386);
							rotation30 += 0.785f;
							if (projectile.ai[1] == 2342f)
							{
								rotation30 -= 0.785f;
							}
						}
						else
						{
							spriteEffects = SpriteEffects.FlipHorizontally;
							rotation30 = (float)Math.Atan2(0f - num387, 0f - num386);
							rotation30 -= 0.785f;
							if (projectile.ai[1] == 2342f)
							{
								rotation30 += 0.785f;
							}
						}
						instance.LoadItem(num385);
						EntitySpriteDraw(TextureAssets.Item[num385].Value, new Vector2(center5.X - screenPosition.X, center5.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Item[num385].Width(), TextureAssets.Item[num385].Height()), color29, rotation30, new Vector2(TextureAssets.Item[num385].Width() / 2, TextureAssets.Item[num385].Height() / 2), projectile.scale, spriteEffects, 0);
					}
					else if (projectile.ai[0] <= 1f)
					{
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), projectile.GetAlpha(color29), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					}
				}
				else
				{
					if (projectile.ownerHitCheck && Main.player[projectile.owner].gravDir == -1f)
					{
						if (Main.player[projectile.owner].direction == 1)
						{
							spriteEffects = SpriteEffects.FlipHorizontally;
						}
						else if (Main.player[projectile.owner].direction == -1)
						{
							spriteEffects = SpriteEffects.None;
						}
					}
					EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), projectile.GetAlpha(color29), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					if (projectile.glowMask != -1)
					{
						EntitySpriteDraw(TextureAssets.GlowMask[projectile.glowMask].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), new Microsoft.Xna.Framework.Color(250, 250, 250, projectile.alpha), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					}
					if (projectile.type == 473)
					{
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), new Microsoft.Xna.Framework.Color(255, 255, 0, 0), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					}
					if (projectile.type == 312)
					{
						ulong seed3 = TileFrameSeed;
						for (int num388 = 0; num388 < 4; num388++)
						{
							Vector2 value153 = new Vector2(Utils.RandomInt(seed3, -2, 3), Utils.RandomInt(seed3, -2, 3));
							EntitySpriteDraw(TextureAssets.GlowMask[projectile.glowMask].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY) + value153, new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), new Microsoft.Xna.Framework.Color(255, 255, 255, 255) * 0.2f, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
						}
					}
				}
				if (projectile.type == 106)
				{
					EntitySpriteDraw(TextureAssets.LightDisc.Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2)), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
				}
				if (projectile.type >= 326 && projectile.type <= 328)
				{
					ulong seed4 = TileFrameSeed;
					for (int num389 = 0; num389 < 4; num389++)
					{
						Vector2 value154 = new Vector2(Utils.RandomInt(seed4, -2, 3), Utils.RandomInt(seed4, -2, 3));
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2)) + value154 - projectile.velocity * 0.25f * num389, new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), new Microsoft.Xna.Framework.Color(120, 120, 120, 60) * 1f, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale - (float)num389 * 0.2f, spriteEffects, 0);
					}
				}
				if (projectile.type == 554 || projectile.type == 603)
				{
					for (int num390 = 1; num390 < 5; num390++)
					{
						float num391 = projectile.velocity.X * (float)num390 * 0.5f;
						float num392 = projectile.velocity.Y * (float)num390 * 0.5f;
						Microsoft.Xna.Framework.Color alpha17 = projectile.GetAlpha(color29);
						float num393 = 0f;
						if (num390 == 1)
						{
							num393 = 0.4f;
						}
						if (num390 == 2)
						{
							num393 = 0.3f;
						}
						if (num390 == 3)
						{
							num393 = 0.2f;
						}
						if (num390 == 4)
						{
							num393 = 0.1f;
						}
						alpha17.R = (byte)((float)(int)alpha17.R * num393);
						alpha17.G = (byte)((float)(int)alpha17.G * num393);
						alpha17.B = (byte)((float)(int)alpha17.B * num393);
						alpha17.A = (byte)((float)(int)alpha17.A * num393);
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136 - num391, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num392), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), alpha17, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					}
				}
				else if (projectile.type == 604)
				{
					int num394 = (int)projectile.ai[1] + 1;
					if (num394 > 7)
					{
						num394 = 7;
					}
					for (int num395 = 1; num395 < num394; num395++)
					{
						float num396 = projectile.velocity.X * (float)num395 * 1.5f;
						float num397 = projectile.velocity.Y * (float)num395 * 1.5f;
						Microsoft.Xna.Framework.Color alpha18 = projectile.GetAlpha(color29);
						float num398 = 0f;
						if (num395 == 1)
						{
							num398 = 0.4f;
						}
						if (num395 == 2)
						{
							num398 = 0.3f;
						}
						if (num395 == 3)
						{
							num398 = 0.2f;
						}
						if (num395 == 4)
						{
							num398 = 0.1f;
						}
						num398 = 0.4f - (float)num395 * 0.06f;
						num398 *= 1f - (float)projectile.alpha / 255f;
						alpha18.R = (byte)((float)(int)alpha18.R * num398);
						alpha18.G = (byte)((float)(int)alpha18.G * num398);
						alpha18.B = (byte)((float)(int)alpha18.B * num398);
						alpha18.A = (byte)((float)(int)alpha18.A * num398 / 2f);
						float scale23 = projectile.scale;
						scale23 -= (float)num395 * 0.1f;
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136 - num396, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num397), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), alpha18, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), scale23, spriteEffects, 0);
					}
				}
				else
				{
					if (projectile.type != 553)
					{
						return;
					}
					for (int num399 = 1; num399 < 5; num399++)
					{
						float num400 = projectile.velocity.X * (float)num399 * 0.4f;
						float num401 = projectile.velocity.Y * (float)num399 * 0.4f;
						Microsoft.Xna.Framework.Color alpha19 = projectile.GetAlpha(color29);
						float num402 = 0f;
						if (num399 == 1)
						{
							num402 = 0.4f;
						}
						if (num399 == 2)
						{
							num402 = 0.3f;
						}
						if (num399 == 3)
						{
							num402 = 0.2f;
						}
						if (num399 == 4)
						{
							num402 = 0.1f;
						}
						alpha19.R = (byte)((float)(int)alpha19.R * num402);
						alpha19.G = (byte)((float)(int)alpha19.G * num402);
						alpha19.B = (byte)((float)(int)alpha19.B * num402);
						alpha19.A = (byte)((float)(int)alpha19.A * num402);
						EntitySpriteDraw(TextureAssets.Projectile[projectile.type].Value, new Vector2(projectile.position.X - screenPosition.X + num137 + (float)num136 - num400, projectile.position.Y - screenPosition.Y + (float)(projectile.height / 2) + projectile.gfxOffY - num401), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Projectile[projectile.type].Width(), TextureAssets.Projectile[projectile.type].Height()), alpha19, projectile.rotation, new Vector2(num137, projectile.height / 2 + num135), projectile.scale, spriteEffects, 0);
					}
				}
			}
		}

		private static void DrawPrettyStarSparkle(Projectile proj, SpriteEffects dir, Vector2 drawpos, Microsoft.Xna.Framework.Color drawColor, Microsoft.Xna.Framework.Color shineColor)
		{
			Texture2D value = TextureAssets.Extra[98].Value;
			Microsoft.Xna.Framework.Color color = shineColor * proj.Opacity * 0.5f;
			color.A = 0;
			Vector2 origin = value.Size() / 2f;
			Microsoft.Xna.Framework.Color color2 = drawColor * 0.5f;
			float num = Utils.GetLerpValue(15f, 30f, proj.localAI[0], clamped: true) * Utils.GetLerpValue(45f, 30f, proj.localAI[0], clamped: true);
			Vector2 vector = new Vector2(0.5f, 5f) * num;
			Vector2 vector2 = new Vector2(0.5f, 2f) * num;
			color *= num;
			color2 *= num;
			EntitySpriteDraw(value, drawpos, null, color, (float)Math.PI / 2f, origin, vector, dir, 0);
			EntitySpriteDraw(value, drawpos, null, color, 0f, origin, vector2, dir, 0);
			EntitySpriteDraw(value, drawpos, null, color2, (float)Math.PI / 2f, origin, vector * 0.6f, dir, 0);
			EntitySpriteDraw(value, drawpos, null, color2, 0f, origin, vector2 * 0.6f, dir, 0);
		}

		private static void DrawProj_FlailChains(Projectile proj, Vector2 mountedCenter)
		{
			_ = player[proj.owner];
			Vector2 playerArmPosition = GetPlayerArmPosition(proj);
			Asset<Texture2D> val = null;
			Microsoft.Xna.Framework.Rectangle? sourceRectangle = null;
			float num = 0f;
			switch (proj.type)
			{
			default:
				val = TextureAssets.Chain3;
				break;
			case 25:
				val = TextureAssets.Chain2;
				break;
			case 35:
				val = TextureAssets.Chain6;
				break;
			case 63:
				val = TextureAssets.Chain7;
				break;
			case 154:
				val = TextureAssets.Chain13;
				break;
			case 247:
				val = TextureAssets.Chain19;
				break;
			case 757:
				val = TextureAssets.Extra[99];
				sourceRectangle = val.Frame(1, 6);
				num = -2f;
				break;
			case 947:
				val = TextureAssets.Chain41;
				break;
			case 948:
				val = TextureAssets.Chain43;
				break;
			}
			Vector2 origin = (sourceRectangle.HasValue ? (sourceRectangle.Value.Size() / 2f) : (val.Size() / 2f));
			Vector2 center = proj.Center;
			Vector2 v = playerArmPosition.MoveTowards(center, 4f) - center;
			Vector2 vector = v.SafeNormalize(Vector2.Zero);
			float num2 = (float)(sourceRectangle.HasValue ? sourceRectangle.Value.Height : val.Height()) + num;
			float rotation = vector.ToRotation() + (float)Math.PI / 2f;
			int num3 = 0;
			float num4 = v.Length() + num2 / 2f;
			int num5 = 0;
			while (num4 > 0f)
			{
				Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)center.X / 16, (int)(center.Y / 16f));
				switch (proj.type)
				{
				case 757:
					sourceRectangle = val.Frame(1, 6, 0, num3 % 6);
					break;
				case 948:
					if (num5 >= 6)
					{
						val = (val = TextureAssets.Chain41);
					}
					else if (num5 >= 4)
					{
						val = (val = TextureAssets.Chain42);
						byte b = 140;
						if (color.R < b)
						{
							color.R = b;
						}
						if (color.G < b)
						{
							color.G = b;
						}
						if (color.B < b)
						{
							color.B = b;
						}
					}
					else
					{
						color = Microsoft.Xna.Framework.Color.White;
					}
					num5++;
					break;
				}
				spriteBatch.Draw(val.Value, center - screenPosition, sourceRectangle, color, rotation, origin, 1f, SpriteEffects.None, 0f);
				center += vector * num2;
				num3++;
				num4 -= num2;
			}
		}

		private static void DrawProj_FlailChains_Old(Projectile proj, Vector2 mountedCenter)
		{
			Vector2 vector = new Vector2(proj.position.X + (float)proj.width * 0.5f, proj.position.Y + (float)proj.height * 0.5f);
			float num = mountedCenter.X - vector.X;
			float num2 = mountedCenter.Y - vector.Y;
			float rotation = (float)Math.Atan2(num2, num) - 1.57f;
			if (proj.alpha == 0)
			{
				int num3 = -1;
				if (proj.position.X + (float)(proj.width / 2) < mountedCenter.X)
				{
					num3 = 1;
				}
				if (player[proj.owner].direction == 1)
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(num2 * (float)num3, num * (float)num3);
				}
				else
				{
					player[proj.owner].itemRotation = (float)Math.Atan2(num2 * (float)num3, num * (float)num3);
				}
			}
			bool flag = true;
			int num4 = 0;
			int num5 = 25;
			if (proj.type == 757)
			{
				num5 = 12;
			}
			while (flag)
			{
				float num6 = (float)Math.Sqrt(num * num + num2 * num2);
				if (num6 < (float)num5)
				{
					flag = false;
				}
				else if (float.IsNaN(num6))
				{
					flag = false;
				}
				else
				{
					num6 = ((proj.type == 154 || proj.type == 247) ? (18f / num6) : ((proj.type != 757) ? (12f / num6) : (16f / num6)));
					num *= num6;
					num2 *= num6;
					vector.X += num;
					vector.Y += num2;
					num = mountedCenter.X - vector.X;
					num2 = mountedCenter.Y - vector.Y;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
					if (proj.type == 25)
					{
						EntitySpriteDraw(TextureAssets.Chain2.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain2.Width(), TextureAssets.Chain2.Height()), color, rotation, new Vector2((float)TextureAssets.Chain2.Width() * 0.5f, (float)TextureAssets.Chain2.Height() * 0.5f), 1f, SpriteEffects.None, 0);
					}
					else if (proj.type == 35)
					{
						EntitySpriteDraw(TextureAssets.Chain6.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain6.Width(), TextureAssets.Chain6.Height()), color, rotation, new Vector2((float)TextureAssets.Chain6.Width() * 0.5f, (float)TextureAssets.Chain6.Height() * 0.5f), 1f, SpriteEffects.None, 0);
					}
					else if (proj.type == 757)
					{
						Texture2D value = TextureAssets.Extra[99].Value;
						Microsoft.Xna.Framework.Rectangle r = value.Frame(1, 6, 0, num4 % 6);
						EntitySpriteDraw(value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), value.Frame(1, 6, 0, num4 % 6), color, rotation, r.Size() / 2f, 1f, SpriteEffects.None, 0);
					}
					else if (proj.type == 247)
					{
						EntitySpriteDraw(TextureAssets.Chain19.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain19.Width(), TextureAssets.Chain19.Height()), color, rotation, new Vector2((float)TextureAssets.Chain19.Width() * 0.5f, (float)TextureAssets.Chain19.Height() * 0.5f), 1f, SpriteEffects.None, 0);
					}
					else if (proj.type == 63)
					{
						EntitySpriteDraw(TextureAssets.Chain7.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain7.Width(), TextureAssets.Chain7.Height()), color, rotation, new Vector2((float)TextureAssets.Chain7.Width() * 0.5f, (float)TextureAssets.Chain7.Height() * 0.5f), 1f, SpriteEffects.None, 0);
					}
					else if (proj.type == 154)
					{
						EntitySpriteDraw(TextureAssets.Chain13.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain13.Width(), TextureAssets.Chain13.Height()), color, rotation, new Vector2((float)TextureAssets.Chain13.Width() * 0.5f, (float)TextureAssets.Chain13.Height() * 0.5f), 1f, SpriteEffects.None, 0);
					}
					else
					{
						EntitySpriteDraw(TextureAssets.Chain3.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain3.Width(), TextureAssets.Chain3.Height()), color, rotation, new Vector2((float)TextureAssets.Chain3.Width() * 0.5f, (float)TextureAssets.Chain3.Height() * 0.5f), 1f, SpriteEffects.None, 0);
					}
				}
				num4++;
			}
		}

		private static Microsoft.Xna.Framework.Color TryApplyingPlayerStringColor(int playerStringColor, Microsoft.Xna.Framework.Color stringColor)
		{
			if (playerStringColor > 0)
			{
				stringColor = WorldGen.paintColor(playerStringColor);
				if (stringColor.R < 75)
				{
					stringColor.R = 75;
				}
				if (stringColor.G < 75)
				{
					stringColor.G = 75;
				}
				if (stringColor.B < 75)
				{
					stringColor.B = 75;
				}
				switch (playerStringColor)
				{
				case 13:
					stringColor = new Microsoft.Xna.Framework.Color(20, 20, 20);
					break;
				case 0:
				case 14:
					stringColor = new Microsoft.Xna.Framework.Color(200, 200, 200);
					break;
				case 28:
					stringColor = new Microsoft.Xna.Framework.Color(163, 116, 91);
					break;
				case 27:
					stringColor = new Microsoft.Xna.Framework.Color(DiscoR, DiscoG, DiscoB);
					break;
				}
				stringColor.A = (byte)((float)(int)stringColor.A * 0.4f);
			}
			return stringColor;
		}

		private static void DrawProj_FishingLine(Projectile proj, float polePosX, float polePosY, Vector2 mountedCenter)
		{
			polePosX = mountedCenter.X;
			polePosY = mountedCenter.Y;
			polePosY += player[proj.owner].gfxOffY;
			int type = player[proj.owner].inventory[player[proj.owner].selectedItem].type;
			Microsoft.Xna.Framework.Color stringColor = new Microsoft.Xna.Framework.Color(200, 200, 200, 100);
			if (type == 2294)
			{
				stringColor = new Microsoft.Xna.Framework.Color(100, 180, 230, 100);
			}
			if (type == 2295)
			{
				stringColor = new Microsoft.Xna.Framework.Color(250, 90, 70, 100);
			}
			if (type == 2293)
			{
				stringColor = new Microsoft.Xna.Framework.Color(203, 190, 210, 100);
			}
			if (type == 2421)
			{
				stringColor = new Microsoft.Xna.Framework.Color(183, 77, 112, 100);
			}
			if (type == 2422)
			{
				stringColor = new Microsoft.Xna.Framework.Color(255, 226, 116, 100);
			}
			if (type == 4325)
			{
				stringColor = new Microsoft.Xna.Framework.Color(200, 100, 100, 100);
			}
			if (type == 4442)
			{
				stringColor = new Microsoft.Xna.Framework.Color(100, 100, 200, 100);
			}
			stringColor = TryApplyingPlayerStringColor(player[proj.owner].stringColor, stringColor);
			float gravDir = player[proj.owner].gravDir;
			switch (type)
			{
			case 2289:
				polePosX += 43 * player[proj.owner].direction;
				if (player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 36f * gravDir;
				break;
			case 2291:
				polePosX += 43 * player[proj.owner].direction;
				if (player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 34f * gravDir;
				break;
			case 2292:
				polePosX += 46 * player[proj.owner].direction;
				if (player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 34f * gravDir;
				break;
			case 2293:
				polePosX += 43 * player[proj.owner].direction;
				if (player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 34f * gravDir;
				break;
			case 2294:
				polePosX += 43 * player[proj.owner].direction;
				if (player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 30f * gravDir;
				break;
			case 2295:
				polePosX += 43 * player[proj.owner].direction;
				if (player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 30f * gravDir;
				break;
			case 2296:
				polePosX += 43 * player[proj.owner].direction;
				if (player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 30f * gravDir;
				break;
			case 2421:
				polePosX += 47 * player[proj.owner].direction;
				if (player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 36f * gravDir;
				break;
			case 2422:
				polePosX += 47 * player[proj.owner].direction;
				if (player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 32f * gravDir;
				break;
			case 4325:
				polePosX += 44 * player[proj.owner].direction;
				if (player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 32f * gravDir;
				break;
			case 4442:
				polePosX += 44 * player[proj.owner].direction;
				if (player[proj.owner].direction < 0)
				{
					polePosX -= 13f;
				}
				polePosY -= 32f * gravDir;
				break;
			}
			if (gravDir == -1f)
			{
				polePosY -= 12f;
			}
			Vector2 value = new Vector2(polePosX, polePosY);
			value = player[proj.owner].RotatedRelativePoint(value + new Vector2(8f)) - new Vector2(8f);
			float num = proj.position.X + (float)proj.width * 0.5f - value.X;
			float num2 = proj.position.Y + (float)proj.height * 0.5f - value.Y;
			Math.Sqrt(num * num + num2 * num2);
			float num3 = (float)Math.Atan2(num2, num) - 1.57f;
			bool flag = true;
			if (num == 0f && num2 == 0f)
			{
				flag = false;
			}
			else
			{
				float num4 = (float)Math.Sqrt(num * num + num2 * num2);
				num4 = 12f / num4;
				num *= num4;
				num2 *= num4;
				value.X -= num;
				value.Y -= num2;
				num = proj.position.X + (float)proj.width * 0.5f - value.X;
				num2 = proj.position.Y + (float)proj.height * 0.5f - value.Y;
			}
			while (flag)
			{
				float num5 = 12f;
				float num6 = (float)Math.Sqrt(num * num + num2 * num2);
				float num7 = num6;
				if (float.IsNaN(num6) || float.IsNaN(num7))
				{
					flag = false;
					continue;
				}
				if (num6 < 20f)
				{
					num5 = num6 - 8f;
					flag = false;
				}
				num6 = 12f / num6;
				num *= num6;
				num2 *= num6;
				value.X += num;
				value.Y += num2;
				num = proj.position.X + (float)proj.width * 0.5f - value.X;
				num2 = proj.position.Y + (float)proj.height * 0.1f - value.Y;
				if (num7 > 12f)
				{
					float num8 = 0.3f;
					float num9 = Math.Abs(proj.velocity.X) + Math.Abs(proj.velocity.Y);
					if (num9 > 16f)
					{
						num9 = 16f;
					}
					num9 = 1f - num9 / 16f;
					num8 *= num9;
					num9 = num7 / 80f;
					if (num9 > 1f)
					{
						num9 = 1f;
					}
					num8 *= num9;
					if (num8 < 0f)
					{
						num8 = 0f;
					}
					num9 = 1f - proj.localAI[0] / 100f;
					num8 *= num9;
					if (num2 > 0f)
					{
						num2 *= 1f + num8;
						num *= 1f - num8;
					}
					else
					{
						num9 = Math.Abs(proj.velocity.X) / 3f;
						if (num9 > 1f)
						{
							num9 = 1f;
						}
						num9 -= 0.5f;
						num8 *= num9;
						if (num8 > 0f)
						{
							num8 *= 2f;
						}
						num2 *= 1f + num8;
						num *= 1f - num8;
					}
				}
				num3 = (float)Math.Atan2(num2, num) - 1.57f;
				Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)value.X / 16, (int)(value.Y / 16f), stringColor);
				EntitySpriteDraw(TextureAssets.FishingLine.Value, new Vector2(value.X - screenPosition.X + (float)TextureAssets.FishingLine.Width() * 0.5f, value.Y - screenPosition.Y + (float)TextureAssets.FishingLine.Height() * 0.5f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.FishingLine.Width(), (int)num5), color, num3, new Vector2((float)TextureAssets.FishingLine.Width() * 0.5f, 0f), 1f, SpriteEffects.None, 0);
			}
		}

		private void DrawProj_StardustGuardianPunching(Projectile proj)
		{
			int num = 6;
			Texture2D value = TextureAssets.Extra[46].Value;
			int num2 = 20;
			Vector2 value2 = proj.Center - proj.rotation.ToRotationVector2() * num2 * proj.spriteDirection;
			for (int i = 0; i < num; i++)
			{
				float num3 = rand.NextFloat();
				float num4 = Utils.GetLerpValue(0f, 0.3f, num3, clamped: true) * Utils.GetLerpValue(1f, 0.5f, num3, clamped: true);
				float amount = Utils.GetLerpValue(0f, 0.3f, num3, clamped: true) * Utils.GetLerpValue(1f, 0.5f, num3, clamped: true);
				float scaleFactor = MathHelper.Lerp(0.6f, 1f, amount);
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(255, 255, 255, 127);
				color *= num4 * 0.5f;
				Vector2 origin = value.Size() / 2f;
				Microsoft.Xna.Framework.Color value3 = Microsoft.Xna.Framework.Color.White * num4;
				value3.A /= 2;
				Microsoft.Xna.Framework.Color color2 = value3 * 0.5f;
				float num5 = 1f;
				float num6 = 1f + rand.NextFloat() * 0.5f;
				float num7 = rand.NextFloatDirection();
				Vector2 vector = new Vector2(0.8f) * num6 * num5 * scaleFactor;
				float scaleFactor2 = 20f + MathHelper.Lerp(0f, 20f, num3) + num6 * 16f;
				float num8 = proj.rotation + ((proj.direction == 1) ? 0f : ((float)Math.PI)) + num7 * ((float)Math.PI * 2f) * 0.04f;
				float rotation = num8 + (float)Math.PI / 2f;
				Vector2 position = value2 + num8.ToRotationVector2() * scaleFactor2 + rand.NextVector2Circular(20f, 20f) - screenPosition;
				color *= num5;
				color2 *= num5;
				SpriteEffects effects = SpriteEffects.None;
				spriteBatch.Draw(value, position, null, color, rotation, origin, vector, effects, 0f);
				spriteBatch.Draw(value, position, null, color2, rotation, origin, vector * 0.8f, effects, 0f);
			}
		}

		private void DrawProj_PiercingStarlight(Projectile proj)
		{
			int num = 3;
			LoadProjectile(proj.type);
			LoadItem(4923);
			int num2 = 2;
			Vector2 value = proj.Center - proj.rotation.ToRotationVector2() * num2;
			for (int i = 0; i < 1; i++)
			{
				float num3 = rand.NextFloat();
				float scale = Utils.GetLerpValue(0f, 0.3f, num3, clamped: true) * Utils.GetLerpValue(1f, 0.5f, num3, clamped: true);
				Microsoft.Xna.Framework.Color color = proj.GetAlpha(Lighting.GetColor(proj.Center.ToTileCoordinates())) * scale;
				Texture2D value2 = TextureAssets.Item[4923].Value;
				Vector2 origin = value2.Size() / 2f;
				float num4 = rand.NextFloatDirection();
				float scaleFactor = 8f + MathHelper.Lerp(0f, 20f, num3) + rand.NextFloat() * 6f;
				float num5 = proj.rotation + num4 * ((float)Math.PI * 2f) * 0.04f;
				float num6 = num5 + (float)Math.PI / 4f;
				Vector2 position = value + num5.ToRotationVector2() * scaleFactor + rand.NextVector2Circular(8f, 8f) - screenPosition;
				SpriteEffects spriteEffects = SpriteEffects.None;
				if (proj.rotation < -(float)Math.PI / 2f || proj.rotation > (float)Math.PI / 2f)
				{
					num6 += (float)Math.PI / 2f;
					spriteEffects |= SpriteEffects.FlipHorizontally;
				}
				spriteBatch.Draw(value2, position, null, color, num6, origin, 1f, spriteEffects, 0f);
			}
			for (int j = 0; j < num; j++)
			{
				float num7 = rand.NextFloat();
				float num8 = Utils.GetLerpValue(0f, 0.3f, num7, clamped: true) * Utils.GetLerpValue(1f, 0.5f, num7, clamped: true);
				float amount = Utils.GetLerpValue(0f, 0.3f, num7, clamped: true) * Utils.GetLerpValue(1f, 0.5f, num7, clamped: true);
				float scaleFactor2 = MathHelper.Lerp(0.6f, 1f, amount);
				Microsoft.Xna.Framework.Color fairyQueenWeaponsColor = proj.GetFairyQueenWeaponsColor(0.25f, 0f, (rand.NextFloat() * 0.33f + GlobalTimeWrappedHourly) % 1f);
				Texture2D value3 = TextureAssets.Projectile[proj.type].Value;
				Microsoft.Xna.Framework.Color color2 = fairyQueenWeaponsColor;
				color2 *= num8 * 0.5f;
				Vector2 origin2 = value3.Size() / 2f;
				Microsoft.Xna.Framework.Color value4 = Microsoft.Xna.Framework.Color.White * num8;
				value4.A /= 2;
				Microsoft.Xna.Framework.Color color3 = value4 * 0.5f;
				float num9 = 1f;
				float num10 = rand.NextFloat() * 2f;
				float num11 = rand.NextFloatDirection();
				Vector2 vector = new Vector2(2.8f + num10, 1f) * num9 * scaleFactor2;
				_ = new Vector2(1.5f + num10 * 0.5f, 1f) * num9 * scaleFactor2;
				int num12 = 50;
				Vector2 value5 = proj.rotation.ToRotationVector2() * ((j >= 1) ? 56 : 0);
				float num13 = 0.03f - (float)j * 0.012f;
				float scaleFactor3 = 30f + MathHelper.Lerp(0f, num12, num7) + num10 * 16f;
				float num14 = proj.rotation + num11 * ((float)Math.PI * 2f) * num13;
				float rotation = num14;
				Vector2 position2 = value + num14.ToRotationVector2() * scaleFactor3 + rand.NextVector2Circular(20f, 20f) + value5 - screenPosition;
				color2 *= num9;
				color3 *= num9;
				SpriteEffects effects = SpriteEffects.None;
				spriteBatch.Draw(value3, position2, null, color2, rotation, origin2, vector, effects, 0f);
				spriteBatch.Draw(value3, position2, null, color3, rotation, origin2, vector * 0.6f, effects, 0f);
			}
		}

		private void DrawProj_FairyQueenLance(Projectile proj)
		{
			Vector2 vector = proj.Center - screenPosition;
			int num = 40;
			int num2 = 180 * num;
			num2 /= 2;
			Microsoft.Xna.Framework.Color color = proj.AI_171_GetColor();
			Microsoft.Xna.Framework.Color value = color;
			color.A = 0;
			value.A /= 2;
			Texture2D value2 = TextureAssets.Extra[178].Value;
			Vector2 origin = value2.Frame().Size() * new Vector2(0f, 0.5f);
			Vector2 scale = new Vector2(num2 / value2.Width, 2f);
			Vector2 scale2 = new Vector2((float)(num2 / value2.Width) * 0.5f, 2f);
			Microsoft.Xna.Framework.Color color2 = color * Utils.GetLerpValue(60f, 55f, proj.localAI[0], clamped: true) * Utils.GetLerpValue(0f, 10f, proj.localAI[0], clamped: true);
			spriteBatch.Draw(value2, vector, null, color2, proj.rotation, origin, scale2, SpriteEffects.None, 0f);
			spriteBatch.Draw(value2, vector, null, color2 * 0.3f, proj.rotation, origin, scale, SpriteEffects.None, 0f);
			Texture2D value3 = TextureAssets.Projectile[proj.type].Value;
			Vector2 origin2 = value3.Frame().Size() / 2f;
			Microsoft.Xna.Framework.Color color3 = Microsoft.Xna.Framework.Color.White * Utils.GetLerpValue(0f, 20f, proj.localAI[0], clamped: true);
			color3.A /= 2;
			float num3 = MathHelper.Lerp(0.7f, 1f, Utils.GetLerpValue(55f, 60f, proj.localAI[0], clamped: true));
			float lerpValue = Utils.GetLerpValue(10f, 60f, proj.localAI[0]);
			if (lerpValue > 0f)
			{
				float lerpValue2 = Utils.GetLerpValue(0f, 1f, proj.velocity.Length(), clamped: true);
				for (float num4 = 1f; num4 > 0f; num4 -= 355f / (678f * (float)Math.PI))
				{
					Vector2 value4 = proj.rotation.ToRotationVector2() * -120f * num4 * lerpValue2;
					spriteBatch.Draw(value3, vector + value4, null, color * lerpValue * (1f - num4), proj.rotation, origin2, num3, SpriteEffects.None, 0f);
					spriteBatch.Draw(value3, vector + value4, null, new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * 0.15f * lerpValue * (1f - num4), proj.rotation, origin2, num3 * 0.85f, SpriteEffects.None, 0f);
				}
				for (float num5 = 0f; num5 < 1f; num5 += 0.25f)
				{
					Vector2 value5 = (num5 * ((float)Math.PI * 2f) + proj.rotation).ToRotationVector2() * 2f * num3;
					spriteBatch.Draw(value3, vector + value5, null, value * lerpValue, proj.rotation, origin2, num3, SpriteEffects.None, 0f);
				}
				spriteBatch.Draw(value3, vector, null, value * lerpValue, proj.rotation, origin2, num3 * 1.1f, SpriteEffects.None, 0f);
			}
			spriteBatch.Draw(value3, vector, null, color3, proj.rotation, origin2, num3, SpriteEffects.None, 0f);
		}

		private void DrawProj_FairyQueenRangedItemShot(Projectile proj)
		{
			Vector2 vector = proj.Center - screenPosition;
			Microsoft.Xna.Framework.Color fairyQueenWeaponsColor = proj.GetFairyQueenWeaponsColor(0f);
			Microsoft.Xna.Framework.Color fairyQueenWeaponsColor2 = proj.GetFairyQueenWeaponsColor(0.5f);
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Vector2 origin = value.Frame().Size() / 2f;
			Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White * proj.Opacity;
			color.A /= 2;
			float num = MathHelper.Lerp(0.7f, 1f, Utils.GetLerpValue(0f, 5f, proj.ai[0], clamped: true));
			float opacity = proj.Opacity;
			if (opacity > 0f)
			{
				float lerpValue = Utils.GetLerpValue(0f, 1f, proj.velocity.Length(), clamped: true);
				for (float num2 = 0f; num2 < 1f; num2 += 355f / (678f * (float)Math.PI))
				{
					Vector2 value2 = proj.rotation.ToRotationVector2() * -120f * num2 * lerpValue;
					spriteBatch.Draw(value, vector + value2, null, fairyQueenWeaponsColor * opacity * (1f - num2), proj.rotation, origin, num, SpriteEffects.None, 0f);
				}
				for (float num3 = 0f; num3 < 1f; num3 += 0.25f)
				{
					Vector2 value3 = (num3 * ((float)Math.PI * 2f) + proj.rotation).ToRotationVector2() * 4f * num;
					spriteBatch.Draw(value, vector + value3, null, fairyQueenWeaponsColor2 * opacity, proj.rotation, origin, num, SpriteEffects.None, 0f);
				}
			}
			spriteBatch.Draw(value, vector, null, color, proj.rotation, origin, num, SpriteEffects.None, 0f);
		}

		private void DrawProj_EmpressBlade(Projectile proj, float hueOverride)
		{
			CurrentDrawnEntityShader = -1;
			PrepareDrawnEntityDrawing(proj, GetProjectileDesiredShader(proj.whoAmI));
			Vector2 vector = proj.Center - screenPosition;
			proj.GetFairyQueenWeaponsColor(0f, 0f, hueOverride);
			Microsoft.Xna.Framework.Color fairyQueenWeaponsColor = proj.GetFairyQueenWeaponsColor(0.5f, 0f, hueOverride);
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Vector2 origin = value.Frame().Size() / 2f;
			Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White * proj.Opacity;
			color.A = (byte)((float)(int)color.A * 0.7f);
			fairyQueenWeaponsColor.A /= 2;
			float scale = proj.scale;
			float num = proj.rotation - (float)Math.PI / 2f;
			float num2 = proj.Opacity * 0.3f;
			if (num2 > 0f)
			{
				float lerpValue = Utils.GetLerpValue(60f, 50f, proj.ai[0], clamped: true);
				float scale2 = Utils.GetLerpValue(70f, 50f, proj.ai[0], clamped: true) * Utils.GetLerpValue(40f, 45f, proj.ai[0], clamped: true);
				for (float num3 = 0f; num3 < 1f; num3 += 355f / (678f * (float)Math.PI))
				{
					Vector2 value2 = num.ToRotationVector2() * -120f * num3 * lerpValue;
					EntitySpriteDraw(value, vector + value2, null, fairyQueenWeaponsColor * num2 * (1f - num3) * scale2, num, origin, scale * 1.5f, SpriteEffects.None, 0);
				}
				for (float num4 = 0f; num4 < 1f; num4 += 0.25f)
				{
					Vector2 value3 = (num4 * ((float)Math.PI * 2f) + num).ToRotationVector2() * 4f * scale;
					EntitySpriteDraw(value, vector + value3, null, fairyQueenWeaponsColor * num2, num, origin, scale, SpriteEffects.None, 0);
				}
			}
			EntitySpriteDraw(value, vector, null, color, num, origin, scale, SpriteEffects.None, 0);
			EntitySpriteDraw(value, vector, null, fairyQueenWeaponsColor * num2 * 0.5f, num, origin, scale, SpriteEffects.None, 0);
		}

		private void DrawProj_CoolWhipMinion(Projectile proj)
		{
			Vector2 vector = proj.Center - screenPosition;
			Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White * 0.5f;
			color.A = 0;
			Microsoft.Xna.Framework.Color value = color;
			value.A = 127;
			Texture2D value2 = TextureAssets.Projectile[proj.type].Value;
			Vector2 origin = value2.Frame().Size() / 2f;
			Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.White * proj.Opacity;
			color2.A /= 2;
			int num = 1;
			float opacity = proj.Opacity;
			if (opacity > 0f)
			{
				for (float num2 = 0f; num2 < 4f; num2 += 1f)
				{
					Vector2 value3 = proj.velocity * (0f - num2);
					spriteBatch.Draw(value2, vector + value3, null, color * opacity * ((4f - num2) / 4f), proj.rotation, origin, num, SpriteEffects.None, 0f);
				}
				for (float num3 = 0f; num3 < 1f; num3 += 0.25f)
				{
					Vector2 value4 = (num3 * ((float)Math.PI * 2f) + proj.rotation).ToRotationVector2() * 4f * num;
					spriteBatch.Draw(value2, vector + value4, null, value * opacity, proj.rotation, origin, num, SpriteEffects.None, 0f);
				}
			}
			spriteBatch.Draw(value2, vector, null, color2, proj.rotation, origin, num, SpriteEffects.None, 0f);
		}

		private void DrawMurderAurora(Projectile proj)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Vector2 origin = value.Size() / 2f;
			float num = GlobalTimeWrappedHourly % 10f / 10f;
			Vector2 value2 = proj.Center - screenPosition;
			float[] array = new float[15];
			float[] array2 = new float[15];
			float[] array3 = new float[15];
			float[] array4 = new float[15];
			float[] array5 = new float[15];
			float num2 = 0.5f;
			int num3 = 210;
			num2 = Utils.GetLerpValue(0f, 60f, proj.timeLeft, clamped: true) * Utils.GetLerpValue(num3, num3 - 60, proj.timeLeft, clamped: true);
			float amount = Utils.GetLerpValue(0f, 60f, proj.timeLeft, clamped: true) * Utils.GetLerpValue(num3, 90f, proj.timeLeft, clamped: true);
			amount = MathHelper.Lerp(0.2f, 0.5f, amount);
			float num4 = 800f / (float)value.Width;
			float num5 = num4 * 0.8f;
			float num6 = (num4 - num5) / 15f;
			float num7 = 30f;
			float num8 = 300f;
			Vector2 value3 = new Vector2(3f, 6f);
			for (int i = 0; i < 15; i++)
			{
				_ = (float)(i + 1) / 50f;
				float num9 = (float)Math.Sin(num * ((float)Math.PI * 2f) + (float)Math.PI / 2f + (float)i / 2f);
				array[i] = num9 * (num8 - (float)i * 3f);
				array2[i] = (float)Math.Sin(num * ((float)Math.PI * 2f) * 2f + (float)Math.PI / 3f + (float)i) * num7;
				array2[i] -= (float)i * 3f;
				array3[i] = (float)i / 15f * 2f + num;
				array3[i] = (num9 * 0.5f + 0.5f) * 0.6f + num;
				array4[i] = (float)(1.0 - Math.Pow(1f * (float)i / 15f, 2.0));
				array5[i] = num5 + (float)(i + 1) * num6;
				array5[i] *= 0.3f;
				Microsoft.Xna.Framework.Color color = hslToRgb(array3[i] % 1f, 1f, 0.5f) * num2 * amount;
				color.A /= 4;
				float rotation = (float)Math.PI / 2f + num9 * ((float)Math.PI / 4f) * -0.3f + (float)Math.PI * (float)i;
				EntitySpriteDraw(value, value2 + new Vector2(array[i], array2[i]), null, color, rotation, origin, new Vector2(array5[i], array5[i]) * value3, SpriteEffects.None, 0);
			}
		}

		private void DrawWhip(Projectile proj)
		{
			List<Vector2> list = new List<Vector2>();
			Projectile.FillWhipControlPoints(proj, list);
			Texture2D value = TextureAssets.FishingLine.Value;
			Microsoft.Xna.Framework.Rectangle value2 = value.Frame();
			Vector2 origin = new Vector2(value2.Width / 2, 2f);
			Microsoft.Xna.Framework.Color originalColor = Microsoft.Xna.Framework.Color.White;
			switch (proj.type)
			{
			case 847:
				originalColor = Microsoft.Xna.Framework.Color.OrangeRed;
				break;
			case 849:
				originalColor = Microsoft.Xna.Framework.Color.SlateBlue;
				originalColor = Microsoft.Xna.Framework.Color.Black;
				break;
			case 848:
				originalColor = Microsoft.Xna.Framework.Color.DarkBlue;
				break;
			case 912:
				originalColor = Microsoft.Xna.Framework.Color.LightBlue;
				break;
			case 913:
				originalColor = Microsoft.Xna.Framework.Color.Firebrick;
				break;
			case 914:
				originalColor = Microsoft.Xna.Framework.Color.ForestGreen;
				break;
			case 915:
				originalColor = Microsoft.Xna.Framework.Color.White;
				break;
			}
			Vector2 value3 = list[0];
			for (int i = 0; i < list.Count - 1; i++)
			{
				Vector2 vector = list[i];
				Vector2 vector2 = list[i + 1] - vector;
				float rotation = vector2.ToRotation() - (float)Math.PI / 2f;
				Microsoft.Xna.Framework.Color color = Lighting.GetColor(vector.ToTileCoordinates(), originalColor);
				Vector2 scale = new Vector2(1f, (vector2.Length() + 2f) / (float)value2.Height);
				spriteBatch.Draw(value, value3 - screenPosition, value2, color, rotation, origin, scale, SpriteEffects.None, 0f);
				value3 += vector2;
			}
			switch (proj.type)
			{
			case 847:
				value3 = DrawWhip_WhipSword(proj, list);
				break;
			case 841:
				value3 = DrawWhip_WhipBland(proj, list);
				break;
			case 848:
				value3 = DrawWhip_WhipMace(proj, list);
				break;
			case 849:
				value3 = DrawWhip_WhipScythe(proj, list);
				break;
			case 912:
				value3 = DrawWhip_CoolWhip(proj, list);
				break;
			case 913:
				value3 = DrawWhip_FireWhip(proj, list);
				break;
			case 914:
				value3 = DrawWhip_ThornWhip(proj, list);
				break;
			case 915:
				value3 = DrawWhip_RainbowWhip(proj, list);
				break;
			}
		}

		private static Vector2 DrawWhip_CoolWhip(Projectile proj, List<Vector2> controlPoints)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, 5);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = true;
				Vector2 origin = vector;
				switch (i)
				{
				case 0:
					origin.Y -= 4f;
					break;
				case 3:
				case 5:
				case 7:
					rectangle.Y = height;
					break;
				case 9:
				case 11:
				case 13:
					rectangle.Y = height * 2;
					break;
				case 15:
				case 17:
					rectangle.Y = height * 3;
					break;
				case 19:
					rectangle.Y = height * 4;
					break;
				default:
					flag = false;
					break;
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
					Microsoft.Xna.Framework.Color alpha = proj.GetAlpha(Lighting.GetColor(vector3.ToTileCoordinates()));
					spriteBatch.Draw(value, vector2 - screenPosition, rectangle, alpha, rotation, origin, 1f, SpriteEffects.None, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		private static Vector2 DrawWhip_FireWhip(Projectile proj, List<Vector2> controlPoints)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, 5);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = true;
				Vector2 origin = vector;
				switch (i)
				{
				case 0:
					origin.Y -= 4f;
					break;
				case 3:
				case 5:
				case 7:
					rectangle.Y = height;
					break;
				case 9:
				case 11:
				case 13:
					rectangle.Y = height * 2;
					break;
				case 15:
				case 17:
					rectangle.Y = height * 3;
					break;
				case 19:
					rectangle.Y = height * 4;
					break;
				default:
					flag = false;
					break;
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
					Microsoft.Xna.Framework.Color alpha = proj.GetAlpha(Lighting.GetColor(vector3.ToTileCoordinates()));
					spriteBatch.Draw(value, vector2 - screenPosition, rectangle, alpha, rotation, origin, 1f, SpriteEffects.None, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		private static Vector2 DrawWhip_RainbowWhip(Projectile proj, List<Vector2> controlPoints)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, 5);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			float miscCounterNormalized = player[proj.owner].miscCounterNormalized;
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = true;
				Vector2 origin = vector;
				switch (i)
				{
				case 0:
					origin.Y -= 4f;
					break;
				case 39:
					rectangle.Y = height * 4;
					break;
				default:
					flag = i % 2 == 0;
					rectangle.Y = height * (1 + i % 3);
					break;
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					Microsoft.Xna.Framework.Color color = hslToRgb((miscCounterNormalized * 5f + (float)i * 0.05f) % 1f, 1f, 0.5f);
					Microsoft.Xna.Framework.Color color2 = color;
					float lerpValue = Utils.GetLerpValue(controlPoints.Count - 10, controlPoints.Count - 2, i, clamped: true);
					float num = MathHelper.Lerp(1f, 1f, lerpValue);
					color2.A /= 2;
					color2.A = (byte)((float)(int)color2.A * lerpValue);
					float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
					Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(vector3.ToTileCoordinates());
					spriteBatch.Draw(value, vector2 - screenPosition, rectangle, Microsoft.Xna.Framework.Color.Lerp(color3, color2, 0.5f), rotation, origin, num, SpriteEffects.None, 0f);
					color2.A = 0;
					spriteBatch.Draw(value, vector2 - screenPosition, rectangle, color2 * 0.1f, rotation, origin, num * 1.2f, SpriteEffects.None, 0f);
					if (i == 39)
					{
						color2 = color;
						color2.A = 127;
						spriteBatch.Draw(value, vector2 - screenPosition, rectangle, color2 * 0.3f, rotation, origin, num * 1.4f, SpriteEffects.None, 0f);
					}
				}
				vector2 += vector4;
			}
			return vector2;
		}

		private static Vector2 DrawWhip_ThornWhip(Projectile proj, List<Vector2> controlPoints)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, 5);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = true;
				Vector2 origin = vector;
				float scale = 1f;
				switch (i)
				{
				case 0:
					origin.Y -= 4f;
					break;
				case 19:
					rectangle.Y = height * 4;
					scale = 1.1f;
					break;
				default:
					rectangle.Y = height * (1 + i % 3);
					scale = 0.8f;
					break;
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor(vector3.ToTileCoordinates());
					spriteBatch.Draw(value, vector2 - screenPosition, rectangle, color, rotation, origin, scale, SpriteEffects.None, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		private static Vector2 DrawWhip_WhipSword(Projectile proj, List<Vector2> controlPoints)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, 5);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = true;
				Vector2 origin = vector;
				switch (i)
				{
				case 0:
					origin.Y -= 4f;
					break;
				case 3:
				case 5:
				case 7:
					rectangle.Y = height;
					break;
				case 9:
				case 11:
				case 13:
					rectangle.Y = height * 2;
					break;
				case 15:
				case 17:
					rectangle.Y = height * 3;
					break;
				case 19:
					rectangle.Y = height * 4;
					break;
				default:
					flag = false;
					break;
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor(vector3.ToTileCoordinates());
					spriteBatch.Draw(value, vector2 - screenPosition, rectangle, color, rotation, origin, 1f, SpriteEffects.None, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		private static Vector2 DrawWhip_WhipMace(Projectile proj, List<Vector2> controlPoints)
		{
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (proj.spriteDirection == 1)
			{
				spriteEffects ^= SpriteEffects.FlipHorizontally;
			}
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, 5);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = false;
				Vector2 origin = vector;
				float scale = 1f;
				if (i == 0)
				{
					origin.Y -= 4f;
					flag = true;
				}
				else if (i % 2 == 0)
				{
					flag = true;
					int num = 1;
					if (i > 10)
					{
						num = 2;
					}
					if (i > 20)
					{
						num = 3;
					}
					rectangle.Y = height * num;
				}
				if (i == controlPoints.Count - 2)
				{
					flag = true;
					rectangle.Y = height * 4;
					scale = 1.3f;
					Projectile.GetWhipSettings(proj, out var timeToFlyOut, out var _, out var _);
					float t = proj.ai[0] / timeToFlyOut;
					float amount = Utils.GetLerpValue(0.1f, 0.7f, t, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t, clamped: true);
					scale = MathHelper.Lerp(0.5f, 2f, amount);
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor(vector3.ToTileCoordinates());
					spriteBatch.Draw(value, vector2 - screenPosition, rectangle, color, rotation, origin, scale, spriteEffects, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		private static Vector2 DrawWhip_WhipScythe(Projectile proj, List<Vector2> controlPoints)
		{
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (proj.spriteDirection == 1)
			{
				spriteEffects ^= SpriteEffects.FlipHorizontally;
			}
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, 5);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = false;
				Vector2 origin = vector;
				float scale = 1f;
				if (i == 0)
				{
					origin.Y -= 4f;
					flag = true;
				}
				else if (i % 2 == 0)
				{
					flag = true;
					int num = 1;
					if (i > 10)
					{
						num = 2;
					}
					if (i > 20)
					{
						num = 3;
					}
					rectangle.Y = height * num;
				}
				if (i == controlPoints.Count - 2)
				{
					flag = true;
					rectangle.Y = height * 4;
					scale = 1.3f;
					Projectile.GetWhipSettings(proj, out var timeToFlyOut, out var _, out var _);
					float t = proj.ai[0] / timeToFlyOut;
					float amount = Utils.GetLerpValue(0.1f, 0.7f, t, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t, clamped: true);
					scale = MathHelper.Lerp(0.5f, 1.5f, amount);
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor(vector3.ToTileCoordinates());
					spriteBatch.Draw(value, vector2 - screenPosition, rectangle, color, rotation, origin, scale, spriteEffects, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		private static Vector2 DrawWhip_WhipBland(Projectile proj, List<Vector2> controlPoints)
		{
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (proj.spriteDirection == 1)
			{
				spriteEffects ^= SpriteEffects.FlipHorizontally;
			}
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, 5);
			int height = rectangle.Height;
			rectangle.Height -= 2;
			Vector2 vector = rectangle.Size() / 2f;
			Vector2 vector2 = controlPoints[0];
			for (int i = 0; i < controlPoints.Count - 1; i++)
			{
				bool flag = false;
				Vector2 origin = vector;
				float scale = 1f;
				if (i == 0)
				{
					origin.Y -= 4f;
					flag = true;
				}
				else
				{
					flag = true;
					int num = 1;
					if (i > 10)
					{
						num = 2;
					}
					if (i > 20)
					{
						num = 3;
					}
					rectangle.Y = height * num;
				}
				if (i == controlPoints.Count - 2)
				{
					flag = true;
					rectangle.Y = height * 4;
					scale = 1.3f;
					Projectile.GetWhipSettings(proj, out var timeToFlyOut, out var _, out var _);
					float t = proj.ai[0] / timeToFlyOut;
					float amount = Utils.GetLerpValue(0.1f, 0.7f, t, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t, clamped: true);
					scale = MathHelper.Lerp(0.5f, 1.5f, amount);
				}
				Vector2 vector3 = controlPoints[i];
				Vector2 vector4 = controlPoints[i + 1] - vector3;
				if (flag)
				{
					float rotation = vector4.ToRotation() - (float)Math.PI / 2f;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor(vector3.ToTileCoordinates());
					spriteBatch.Draw(value, vector2 - screenPosition, rectangle, color, rotation, origin, scale, spriteEffects, 0f);
				}
				vector2 += vector4;
			}
			return vector2;
		}

		private void DrawWhipOld(Projectile proj)
		{
			List<Vector2> list = new List<Vector2>();
			float num = 100f;
			float num2 = proj.ai[0] / num;
			if (!(num2 > 1f))
			{
				float num3 = (float)Math.PI * 4f * (1f - num2) * (float)(-proj.spriteDirection) / 20f;
				float num4 = proj.velocity.Length() * (proj.ai[0] - 1f) / 20f;
				float num5 = num2;
				Vector2 vector = player[proj.owner].Center;
				Vector2 value = vector;
				float num6 = proj.rotation - (float)Math.PI / 2f;
				float num7 = proj.rotation - (float)Math.PI / 2f + (float)Math.PI / 2f * (float)proj.spriteDirection;
				for (int i = 0; i < 20; i++)
				{
					float num8 = (float)i / 20f;
					Vector2 vector2 = vector + num6.ToRotationVector2() * num4;
					Vector2 vector3 = value + num7.ToRotationVector2() * (num4 * 2f);
					float num9 = num3 * num8 * num5;
					num6 += num9;
					num7 += num9;
					list.Add(Vector2.Lerp(vector3, vector2, num2 * 0.5f + 0.5f));
					vector = vector2;
					value = vector3;
				}
			}
			Texture2D value2 = TextureAssets.FishingLine.Value;
			Microsoft.Xna.Framework.Rectangle value3 = value2.Frame();
			Vector2 origin = new Vector2(value3.Width / 2, 2f);
			for (int j = 0; j < list.Count - 1; j++)
			{
				Vector2 vector4 = list[j];
				Vector2 vector5 = list[j + 1];
				float rotation = vector4.DirectionTo(vector5).ToRotation() - (float)Math.PI / 2f;
				Microsoft.Xna.Framework.Color color = Lighting.GetColor(vector4.ToTileCoordinates());
				Vector2 scale = new Vector2(1f, ((vector5 - vector4).Length() + 2f) / (float)value3.Height);
				spriteBatch.Draw(value2, vector4 - screenPosition, value3, color, rotation, origin, scale, SpriteEffects.None, 0f);
			}
		}

		private void DrawTwinsPet(Projectile proj)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			SpriteEffects effects = ((proj.spriteDirection != 1) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, projFrames[proj.type], 0, proj.frame);
			Vector2 origin = rectangle.Size() / 2f;
			Vector2 value2 = proj.Center - screenPosition;
			Microsoft.Xna.Framework.Color alpha = proj.GetAlpha(Lighting.GetColor(proj.Center.ToTileCoordinates()));
			Vector2 position = value2 + (GlobalTimeWrappedHourly * 2f).ToRotationVector2() * 18f;
			EntitySpriteDraw(value, position, rectangle, alpha, proj.rotation, origin, proj.scale, effects, 0);
			position = value2 - (GlobalTimeWrappedHourly * 2f).ToRotationVector2() * 18f;
			rectangle = value.Frame(1, projFrames[proj.type], 0, proj.frame + 18);
			EntitySpriteDraw(value, position, rectangle, alpha, proj.rotation, origin, proj.scale, effects, 0);
		}

		private void DrawMultisegmentPet(Projectile proj)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Texture2D texture2D = null;
			if (proj.type == 887)
			{
				texture2D = TextureAssets.GlowMask[275].Value;
			}
			int num = 5;
			int num2 = 16;
			switch (proj.type)
			{
			case 883:
				num = 5;
				num2 = 16;
				break;
			case 887:
				num = 6;
				num2 = 16;
				break;
			case 893:
				num = 8;
				num2 = 20;
				break;
			}
			SpriteEffects effects = ((proj.spriteDirection != 1) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, projFrames[proj.type]);
			Vector2 origin = rectangle.Size() / 2f;
			Vector2 position = proj.Center - screenPosition;
			Microsoft.Xna.Framework.Color alpha = proj.GetAlpha(Lighting.GetColor(proj.Center.ToTileCoordinates()));
			Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White * ((float)(int)mouseTextColor / 255f);
			Vector2 value2 = proj.Center;
			int num3 = 1;
			int num4 = projFrames[proj.type] - 1;
			for (int i = 1; i < num; i++)
			{
				int frameY = num3;
				if (i == num - 1)
				{
					frameY = num4;
				}
				else if (proj.type == 893 && i != 2 && i != 5)
				{
					frameY = 2;
				}
				Microsoft.Xna.Framework.Rectangle value3 = value.Frame(1, projFrames[proj.type], 0, frameY);
				Vector2 value4 = proj.oldPos[i * 10] + proj.Size / 2f;
				float num5 = (value2 - value4).ToRotation();
				value4 = value2 - new Vector2(num2, 0f).RotatedBy(num5, Vector2.Zero);
				num5 = (value2 - value4).ToRotation() + (float)Math.PI / 2f;
				Vector2 position2 = value4 - screenPosition;
				SpriteEffects effects2 = ((!(value4.X < value2.X)) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
				value2 = value4;
				EntitySpriteDraw(value, position2, value3, proj.GetAlpha(Lighting.GetColor(value4.ToTileCoordinates())), num5, origin, proj.scale, effects2, 0);
				if (texture2D != null)
				{
					EntitySpriteDraw(texture2D, position2, value3, proj.GetAlpha(color), num5, origin, proj.scale, effects2, 0);
				}
			}
			EntitySpriteDraw(value, position, rectangle, alpha, proj.rotation, origin, proj.scale, effects, 0);
			if (texture2D != null)
			{
				EntitySpriteDraw(texture2D, position, rectangle, color, proj.rotation, origin, proj.scale, effects, 0);
			}
		}

		private void DrawKite(Projectile proj)
		{
			Texture2D value = TextureAssets.Projectile[proj.type].Value;
			Texture2D value2 = TextureAssets.Extra[103].Value;
			int num = 15;
			float num2 = 0f;
			int num3 = 10;
			int num4 = 5;
			float num5 = 10f;
			float num6 = 0f;
			int num7 = -14;
			int num8 = -2;
			int num9 = -1;
			int num10 = -1;
			int num11 = 8;
			int num12 = 0;
			int num13 = 1;
			int num14 = 0;
			int num15 = 0;
			bool flag = true;
			bool flag2 = false;
			switch (proj.type)
			{
			case 771:
				value2 = TextureAssets.Extra[104].Value;
				num = 12;
				num12 = 12;
				num2 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
				num3 = 12;
				num5 = 22f;
				num6 += (float)Math.PI / 8f * (float)proj.spriteDirection;
				num7 = -8;
				num8 = -6;
				num9 = 10;
				num10 = 8;
				num11 = 12;
				break;
			case 822:
				value2 = TextureAssets.Extra[132].Value;
				num = 7;
				num12 = 7;
				num2 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
				num3 = 7;
				num5 = 22f;
				num6 += (float)Math.PI / 12f * (float)proj.spriteDirection;
				num7 = -20;
				num8 = -6;
				num11 = 12;
				break;
			case 850:
				value2 = TextureAssets.Extra[147].Value;
				num = 8;
				num12 = 8;
				num2 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
				num3 = 8;
				num5 = 22f;
				num6 += (float)Math.PI / 12f * (float)proj.spriteDirection;
				num7 = -20;
				num8 = -38;
				num11 = 12;
				num14 = 6;
				num15 = 2;
				flag = false;
				break;
			case 823:
			case 846:
				value2 = TextureAssets.Extra[133].Value;
				if (proj.type == 846)
				{
					value2 = TextureAssets.Extra[146].Value;
				}
				num = 6;
				num12 = 6;
				num2 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
				num3 = 6;
				num5 = 40f;
				num6 += (float)Math.PI / 12f * (float)proj.spriteDirection;
				num7 = -16;
				num8 = -10;
				num11 = 30;
				break;
			case 827:
			case 844:
				value2 = TextureAssets.Extra[135].Value;
				if (proj.type == 844)
				{
					value2 = TextureAssets.Extra[144].Value;
				}
				num = 4;
				num12 = 3;
				num2 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
				num3 = 16;
				num5 = 10f;
				num6 += (float)Math.PI / 12f * (float)proj.spriteDirection;
				num8 = -4;
				num4 = 4;
				flag2 = true;
				break;
			case 828:
			case 829:
				value2 = TextureAssets.Extra[136].Value;
				if (proj.type == 829)
				{
					value2 = TextureAssets.Extra[137].Value;
				}
				num = 2;
				num12 = 1;
				num2 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
				num3 = 6;
				num5 = 10f;
				num6 += (float)Math.PI / 12f * (float)proj.spriteDirection;
				num11 = 10;
				num8 = -4;
				num13 = 3;
				flag = false;
				flag2 = true;
				break;
			case 852:
				value2 = TextureAssets.Extra[148].Value;
				num = 2;
				num12 = 1;
				num2 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
				num3 = 6;
				num5 = 10f;
				num6 += (float)Math.PI / 12f * (float)proj.spriteDirection;
				num11 = 10;
				num8 = -4;
				num13 = 4;
				flag = false;
				flag2 = true;
				break;
			case 830:
			case 838:
				value2 = TextureAssets.Extra[138].Value;
				if (proj.type == 838)
				{
					value2 = TextureAssets.Extra[139].Value;
				}
				num = 3;
				num12 = 3;
				num2 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
				num3 = 3;
				num5 = 60f;
				num10 = 40;
				num9 = 3;
				num6 += (float)Math.PI / 12f * (float)proj.spriteDirection;
				num11 = 50;
				num8 = -20;
				num14 = -10;
				break;
			case 843:
				value2 = TextureAssets.Extra[140].Value;
				num = 2;
				num12 = 2;
				num2 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
				num3 = 2;
				num5 = 30f;
				num6 += (float)Math.PI / 12f * (float)proj.spriteDirection;
				num11 = 20;
				num8 = -16;
				num14 = -10;
				break;
			case 845:
				value2 = TextureAssets.Extra[145].Value;
				num = 3;
				num12 = 3;
				num2 = ((proj.spriteDirection == 1) ? ((float)Math.PI / 2f) : (-(float)Math.PI / 2f));
				num3 = 3;
				num5 = 42f;
				num10 = 50;
				num9 = 2;
				num6 += (float)Math.PI / 12f * (float)proj.spriteDirection;
				num11 = 30;
				num8 = -8;
				num14 = -10;
				break;
			case 824:
			case 826:
			case 839:
			case 840:
			case 853:
				num13 = 0;
				break;
			case 766:
			case 767:
			case 768:
			case 769:
			case 770:
				num12 = (proj.type - 766) * 3 + 3;
				break;
			}
			SpriteEffects effects = ((proj.spriteDirection != 1) ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(projFrames[proj.type], 1, proj.frame);
			Vector2 origin = rectangle.Size() / 2f;
			Vector2 position = proj.Center - screenPosition;
			Microsoft.Xna.Framework.Color color = Lighting.GetColor(proj.Center.ToTileCoordinates());
			Microsoft.Xna.Framework.Color alpha = proj.GetAlpha(color);
			Texture2D value3 = TextureAssets.FishingLine.Value;
			Microsoft.Xna.Framework.Rectangle value4 = value3.Frame();
			Vector2 origin2 = new Vector2(value4.Width / 2, 2f);
			Microsoft.Xna.Framework.Rectangle rectangle2 = value2.Frame(num);
			int width = rectangle2.Width;
			rectangle2.Width -= 2;
			Vector2 origin3 = rectangle2.Size() / 2f;
			rectangle2.X = width * (num - 1);
			Vector2 playerArmPosition = GetPlayerArmPosition(proj);
			Vector2 center = proj.Center;
			Vector2.Distance(center, playerArmPosition);
			float scaleFactor = 12f;
			_ = (playerArmPosition - center).SafeNormalize(Vector2.Zero) * scaleFactor;
			Vector2 vector = playerArmPosition;
			Vector2 vector2 = center - vector;
			Vector2 velocity = proj.velocity;
			if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
			{
				Utils.Swap(velocity.X, velocity.Y);
			}
			float num16 = vector2.Length();
			float num17 = 16f;
			float num18 = 80f;
			bool flag3 = true;
			if (num16 == 0f)
			{
				flag3 = false;
			}
			else
			{
				vector2 *= 12f / num16;
				vector -= vector2;
				vector2 = center - vector;
			}
			while (flag3)
			{
				float num19 = 12f;
				float num20 = vector2.Length();
				float num21 = num20;
				if (float.IsNaN(num20) || num20 == 0f)
				{
					flag3 = false;
					continue;
				}
				if (num20 < 20f)
				{
					num19 = num20 - 8f;
					flag3 = false;
				}
				num20 = 12f / num20;
				vector2 *= num20;
				vector += vector2;
				vector2 = center - vector;
				if (num21 > 12f)
				{
					float num22 = 0.3f;
					float num23 = Math.Abs(velocity.X) + Math.Abs(velocity.Y);
					if (num23 > num17)
					{
						num23 = num17;
					}
					num23 = 1f - num23 / num17;
					num22 *= num23;
					num23 = num21 / num18;
					if (num23 > 1f)
					{
						num23 = 1f;
					}
					num22 *= num23;
					if (num22 < 0f)
					{
						num22 = 0f;
					}
					num23 = 1f;
					num22 *= num23;
					if (vector2.Y > 0f)
					{
						vector2.Y *= 1f + num22;
						vector2.X *= 1f - num22;
					}
					else
					{
						num23 = Math.Abs(velocity.X) / 3f;
						if (num23 > 1f)
						{
							num23 = 1f;
						}
						num23 -= 0.5f;
						num22 *= num23;
						if (num22 > 0f)
						{
							num22 *= 2f;
						}
						vector2.Y *= 1f + num22;
						vector2.X *= 1f - num22;
					}
				}
				float rotation = vector2.ToRotation() - (float)Math.PI / 2f;
				if (!flag3)
				{
					value4.Height = (int)num19;
				}
				Microsoft.Xna.Framework.Color color2 = Lighting.GetColor(center.ToTileCoordinates());
				EntitySpriteDraw(value3, vector - screenPosition, value4, color2, rotation, origin2, 1f, SpriteEffects.None, 0);
			}
			Vector2 value5 = proj.Size / 2f;
			float num24 = Math.Abs(WindForVisuals);
			float num25 = MathHelper.Lerp(0.5f, 1f, num24);
			float num26 = num24;
			if (vector2.Y >= -0.02f && vector2.Y < 1f)
			{
				num26 = Utils.GetLerpValue(0.2f, 0.5f, num24, clamped: true);
			}
			int num27 = num4;
			int num28 = num3 + 1;
			for (int i = 0; i < num13; i++)
			{
				rectangle2.X = width * (num - 1);
				List<Vector2> list = new List<Vector2>();
				Vector2 value6 = new Vector2(num25 * (float)num11 * (float)proj.spriteDirection, (float)Math.Sin(timeForVisualEffects / 300.0 * 6.2831854820251465) * num26) * 2f;
				float num29 = num7 + num14;
				float num30 = num8 + num15;
				switch (i)
				{
				case 1:
					value6 = new Vector2(num25 * (float)num11 * (float)proj.spriteDirection, (float)Math.Sin(timeForVisualEffects / 300.0 * 6.2831854820251465) * num26 + 0.5f) * 2f;
					num29 -= 8f;
					num30 -= 8f;
					break;
				case 2:
					value6 = new Vector2(num25 * (float)num11 * (float)proj.spriteDirection, (float)Math.Sin(timeForVisualEffects / 300.0 * 6.2831854820251465) * num26 + 1f) * 2f;
					num29 -= 4f;
					num30 -= 4f;
					break;
				case 3:
					value6 = new Vector2(num25 * (float)num11 * (float)proj.spriteDirection, (float)Math.Sin(timeForVisualEffects / 300.0 * 6.2831854820251465) * num26 + 1.5f) * 2f;
					num29 -= 12f;
					num30 -= 12f;
					break;
				}
				Vector2 value7 = proj.Center + new Vector2(((float)rectangle.Width * 0.5f + num29) * (float)proj.spriteDirection, num30).RotatedBy(proj.rotation + num6);
				list.Add(value7);
				int num31 = num27;
				int num32 = 1;
				while (num31 < num28 * num27)
				{
					if (num9 != -1 && num9 == num32)
					{
						num5 = num10;
					}
					Vector2 value8 = proj.oldPos[num31];
					if (value8.X == 0f && value8.Y == 0f)
					{
						list.Add(value7);
					}
					else
					{
						value8 += value5 + new Vector2(((float)rectangle.Width * 0.5f + num29) * (float)proj.oldSpriteDirection[num31], num30).RotatedBy(proj.oldRot[num31] + num6);
						value8 += value6 * (num32 + 1);
						Vector2 value9 = value7 - value8;
						float num33 = value9.Length();
						if (num33 > num5)
						{
							value9 *= num5 / num33;
						}
						value8 = value7 - value9;
						list.Add(value8);
						value7 = value8;
					}
					num31 += num27;
					num32++;
				}
				if (flag)
				{
					Microsoft.Xna.Framework.Rectangle value10 = value3.Frame();
					for (int num34 = list.Count - 2; num34 >= 0; num34--)
					{
						Vector2 vector3 = list[num34];
						Vector2 v = list[num34 + 1] - vector3;
						float num35 = v.Length();
						if (!(num35 < 2f))
						{
							float rotation2 = v.ToRotation() - (float)Math.PI / 2f;
							EntitySpriteDraw(value3, vector3 - screenPosition, value10, alpha, rotation2, origin2, new Vector2(1f, num35 / (float)value10.Height), SpriteEffects.None, 0);
						}
					}
				}
				for (int num36 = list.Count - 2; num36 >= 0; num36--)
				{
					Vector2 value11 = list[num36];
					Vector2 value12 = list[num36 + 1];
					Vector2 v2 = value12 - value11;
					v2.Length();
					float rotation3 = v2.ToRotation() - (float)Math.PI / 2f + num2;
					EntitySpriteDraw(value2, value12 - screenPosition, rectangle2, alpha, rotation3, origin3, proj.scale, effects, 0);
					rectangle2.X -= width;
					if (rectangle2.X < 0)
					{
						int num37 = num12;
						if (flag2)
						{
							num37--;
						}
						rectangle2.X = num37 * width;
					}
				}
			}
			EntitySpriteDraw(value, position, rectangle, alpha, proj.rotation + num6, origin, proj.scale, effects, 0);
		}

		public static Vector2 GetPlayerArmPosition(Projectile proj)
		{
			Player player = Main.player[proj.owner];
			Vector2 value = OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
			if (player.direction != 1)
			{
				value.X = (float)player.bodyFrame.Width - value.X;
			}
			if (player.gravDir != 1f)
			{
				value.Y = (float)player.bodyFrame.Height - value.Y;
			}
			value -= new Vector2(player.bodyFrame.Width - player.width, player.bodyFrame.Height - 42) / 2f;
			return player.RotatedRelativePoint(player.MountedCenter - new Vector2(20f, 42f) / 2f + value + Vector2.UnitY * player.gfxOffY);
		}

		private void DrawProjWithStarryTrail(Projectile proj, Microsoft.Xna.Framework.Color projectileColor, SpriteEffects dir)
		{
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(255, 255, 255, projectileColor.A - proj.alpha);
			Vector2 vector = proj.velocity;
			Microsoft.Xna.Framework.Color value = Microsoft.Xna.Framework.Color.Blue * 0.1f;
			Vector2 spinningpoint = new Vector2(0f, -4f);
			float num = 0f;
			float t = vector.Length();
			float scale = Utils.GetLerpValue(3f, 5f, t, clamped: true);
			bool flag = true;
			if (proj.type == 856 || proj.type == 857)
			{
				vector = proj.position - proj.oldPos[1];
				float num2 = vector.Length();
				if (num2 == 0f)
				{
					vector = Vector2.UnitY;
				}
				else
				{
					vector *= 5f / num2;
				}
				Vector2 origin = new Vector2(proj.ai[0], proj.ai[1]);
				Vector2 center = player[proj.owner].Center;
				float lerpValue = Utils.GetLerpValue(0f, 120f, origin.Distance(center), clamped: true);
				float num3 = 90f;
				if (proj.type == 857)
				{
					num3 = 60f;
					flag = false;
				}
				float lerpValue2 = Utils.GetLerpValue(num3, num3 * (5f / 6f), proj.localAI[0], clamped: true);
				float lerpValue3 = Utils.GetLerpValue(0f, 120f, proj.Center.Distance(center), clamped: true);
				lerpValue *= lerpValue3;
				lerpValue2 *= Utils.GetLerpValue(0f, 15f, proj.localAI[0], clamped: true);
				value = Microsoft.Xna.Framework.Color.HotPink * 0.15f * (lerpValue2 * lerpValue);
				if (proj.type == 857)
				{
					value = proj.GetFirstFractalColor() * 0.15f * (lerpValue2 * lerpValue);
				}
				spinningpoint = new Vector2(0f, -2f);
				float lerpValue4 = Utils.GetLerpValue(num3, num3 * (2f / 3f), proj.localAI[0], clamped: true);
				lerpValue4 *= Utils.GetLerpValue(0f, 20f, proj.localAI[0], clamped: true);
				num = -0.3f * (1f - lerpValue4);
				num += -1f * Utils.GetLerpValue(15f, 0f, proj.localAI[0], clamped: true);
				num *= lerpValue;
				scale = lerpValue2 * lerpValue;
			}
			Vector2 value2 = proj.Center + vector;
			Texture2D value3 = TextureAssets.Projectile[proj.type].Value;
			_ = new Microsoft.Xna.Framework.Rectangle(0, 0, value3.Width, value3.Height).Size() / 2f;
			Texture2D value4 = TextureAssets.Extra[91].Value;
			Microsoft.Xna.Framework.Rectangle value5 = value4.Frame();
			Vector2 origin2 = new Vector2((float)value5.Width / 2f, 10f);
			_ = Microsoft.Xna.Framework.Color.Cyan * 0.5f * scale;
			Vector2 value6 = new Vector2(0f, proj.gfxOffY);
			float num4 = (float)timeForVisualEffects / 60f;
			Vector2 value7 = value2 + vector * 0.5f;
			Microsoft.Xna.Framework.Color value8 = Microsoft.Xna.Framework.Color.White * 0.5f * scale;
			value8.A = 0;
			Microsoft.Xna.Framework.Color color2 = value * scale;
			color2.A = 0;
			Microsoft.Xna.Framework.Color color3 = value * scale;
			color3.A = 0;
			Microsoft.Xna.Framework.Color color4 = value * scale;
			color4.A = 0;
			float num5 = vector.ToRotation();
			EntitySpriteDraw(value4, value7 - screenPosition + value6 + spinningpoint.RotatedBy((float)Math.PI * 2f * num4), value5, color2, num5 + (float)Math.PI / 2f, origin2, 1.5f + num, SpriteEffects.None, 0);
			EntitySpriteDraw(value4, value7 - screenPosition + value6 + spinningpoint.RotatedBy((float)Math.PI * 2f * num4 + (float)Math.PI * 2f / 3f), value5, color3, num5 + (float)Math.PI / 2f, origin2, 1.1f + num, SpriteEffects.None, 0);
			EntitySpriteDraw(value4, value7 - screenPosition + value6 + spinningpoint.RotatedBy((float)Math.PI * 2f * num4 + 4.18879032f), value5, color4, num5 + (float)Math.PI / 2f, origin2, 1.3f + num, SpriteEffects.None, 0);
			Vector2 value9 = value2 - vector * 0.5f;
			for (float num6 = 0f; num6 < 1f; num6 += 0.5f)
			{
				float num7 = num4 % 0.5f / 0.5f;
				num7 = (num7 + num6) % 1f;
				float num8 = num7 * 2f;
				if (num8 > 1f)
				{
					num8 = 2f - num8;
				}
				EntitySpriteDraw(value4, value9 - screenPosition + value6, value5, value8 * num8, num5 + (float)Math.PI / 2f, origin2, 0.3f + num7 * 0.5f, SpriteEffects.None, 0);
			}
			if (flag)
			{
				float rotation = proj.rotation + proj.localAI[1];
				_ = (float)timeForVisualEffects / 240f;
				_ = GlobalTimeWrappedHourly;
				float globalTimeWrappedHourly = GlobalTimeWrappedHourly;
				globalTimeWrappedHourly %= 5f;
				globalTimeWrappedHourly /= 2.5f;
				if (globalTimeWrappedHourly >= 1f)
				{
					globalTimeWrappedHourly = 2f - globalTimeWrappedHourly;
				}
				globalTimeWrappedHourly = globalTimeWrappedHourly * 0.5f + 0.5f;
				Vector2 position = proj.Center - screenPosition;
				instance.LoadItem(75);
				Texture2D value10 = TextureAssets.Item[75].Value;
				Microsoft.Xna.Framework.Rectangle rectangle = value10.Frame(1, 8);
				EntitySpriteDraw(origin: rectangle.Size() / 2f, texture: value10, position: position, sourceRectangle: rectangle, color: color, rotation: rotation, scale: proj.scale, effects: SpriteEffects.None, worthless: 0);
			}
		}

		private static int TryInteractingWithVoidLens(Projectile proj)
		{
			if (gamePaused || gameMenu)
			{
				return 0;
			}
			bool flag = !SmartCursorEnabled && !PlayerInput.UsingGamepad;
			Player localPlayer = LocalPlayer;
			Microsoft.Xna.Framework.Point point = proj.Center.ToTileCoordinates();
			Vector2 compareSpot = localPlayer.Center;
			if (!localPlayer.IsProjectileInteractibleAndInInteractionRange(proj, compareSpot))
			{
				return 0;
			}
			Matrix matrix = Matrix.Invert(GameViewMatrix.ZoomMatrix);
			Vector2 position = ReverseGravitySupport(MouseScreen);
			Vector2.Transform(screenPosition, matrix);
			Vector2 v = Vector2.Transform(position, matrix) + screenPosition;
			bool flag2 = proj.Hitbox.Contains(v.ToPoint());
			if (!((flag2 || SmartInteractProj == proj.whoAmI) & !localPlayer.lastMouseInterface))
			{
				if (!flag)
				{
					return 1;
				}
				return 0;
			}
			HasInteractibleObjectThatIsNotATile = true;
			if (flag2)
			{
				localPlayer.noThrow = 2;
				localPlayer.cursorItemIconEnabled = true;
				localPlayer.cursorItemIconID = 4131;
			}
			if (PlayerInput.UsingGamepad)
			{
				localPlayer.GamepadEnableGrappleCooldown();
			}
			if (mouseRight && mouseRightRelease && Player.BlockInteractionWithProjectiles == 0)
			{
				mouseRightRelease = false;
				localPlayer.tileInteractAttempted = true;
				localPlayer.tileInteractionHappened = true;
				localPlayer.releaseUseTile = false;
				if (localPlayer.chest == -5)
				{
					localPlayer.chest = -1;
					SoundEngine.PlaySound(SoundID.Item130);
					Recipe.FindRecipes();
				}
				else
				{
					localPlayer.chest = -5;
					for (int i = 0; i < 40; i++)
					{
						ItemSlot.SetGlow(i, -1f, chest: true);
					}
					localPlayer.voidLensChest = proj.whoAmI;
					localPlayer.chestX = point.X;
					localPlayer.chestY = point.Y;
					localPlayer.SetTalkNPC(-1);
					SetNPCShopIndex(0);
					playerInventory = true;
					SoundEngine.PlaySound(SoundID.Item130);
					Recipe.FindRecipes();
				}
			}
			if (!SmartCursorEnabled && !PlayerInput.UsingGamepad)
			{
				return 0;
			}
			if (!flag)
			{
				return 2;
			}
			return 0;
		}

		private static int TryInteractingWithMoneyTrough(Projectile proj)
		{
			if (gamePaused || gameMenu)
			{
				return 0;
			}
			bool flag = !SmartCursorEnabled && !PlayerInput.UsingGamepad;
			Player localPlayer = LocalPlayer;
			Microsoft.Xna.Framework.Point point = proj.Center.ToTileCoordinates();
			Vector2 compareSpot = localPlayer.Center;
			if (!localPlayer.IsProjectileInteractibleAndInInteractionRange(proj, compareSpot))
			{
				return 0;
			}
			Matrix matrix = Matrix.Invert(GameViewMatrix.ZoomMatrix);
			Vector2 position = ReverseGravitySupport(MouseScreen);
			Vector2.Transform(screenPosition, matrix);
			Vector2 v = Vector2.Transform(position, matrix) + screenPosition;
			bool flag2 = proj.Hitbox.Contains(v.ToPoint());
			if (!((flag2 || SmartInteractProj == proj.whoAmI) & !localPlayer.lastMouseInterface))
			{
				if (!flag)
				{
					return 1;
				}
				return 0;
			}
			HasInteractibleObjectThatIsNotATile = true;
			if (flag2)
			{
				localPlayer.noThrow = 2;
				localPlayer.cursorItemIconEnabled = true;
				localPlayer.cursorItemIconID = 3213;
			}
			if (PlayerInput.UsingGamepad)
			{
				localPlayer.GamepadEnableGrappleCooldown();
			}
			if (mouseRight && mouseRightRelease && Player.BlockInteractionWithProjectiles == 0)
			{
				mouseRightRelease = false;
				localPlayer.tileInteractAttempted = true;
				localPlayer.tileInteractionHappened = true;
				localPlayer.releaseUseTile = false;
				if (localPlayer.chest == -2)
				{
					localPlayer.chest = -1;
					SoundEngine.PlaySound(SoundID.Item59);
					Recipe.FindRecipes();
				}
				else
				{
					localPlayer.chest = -2;
					for (int i = 0; i < 40; i++)
					{
						ItemSlot.SetGlow(i, -1f, chest: true);
					}
					localPlayer.flyingPigChest = proj.whoAmI;
					localPlayer.chestX = point.X;
					localPlayer.chestY = point.Y;
					localPlayer.SetTalkNPC(-1);
					SetNPCShopIndex(0);
					playerInventory = true;
					SoundEngine.PlaySound(SoundID.Item59);
					Recipe.FindRecipes();
				}
			}
			if (!SmartCursorEnabled && !PlayerInput.UsingGamepad)
			{
				return 0;
			}
			if (!flag)
			{
				return 2;
			}
			return 0;
		}

		public static void PrintTimedMessage(string message, params object[] arguments)
		{
			Console.WriteLine($"{(int)time} {string.Format(message, arguments)}");
		}

		private static void TryInteractingWithMoneyTrough2(Projectile proj)
		{
			if (gamePaused && !gameMenu)
			{
				return;
			}
			Vector2 vector = proj.position - screenPosition;
			if (!((float)mouseX > vector.X) || !((float)mouseX < vector.X + (float)proj.width) || !((float)mouseY > vector.Y) || !((float)mouseY < vector.Y + (float)proj.height))
			{
				return;
			}
			int num = (int)(player[myPlayer].Center.X / 16f);
			int num2 = (int)(player[myPlayer].Center.Y / 16f);
			int num3 = (int)proj.Center.X / 16;
			int num4 = (int)proj.Center.Y / 16;
			int lastTileRangeX = player[myPlayer].lastTileRangeX;
			int lastTileRangeY = player[myPlayer].lastTileRangeY;
			if (num < num3 - lastTileRangeX || num > num3 + lastTileRangeX + 1 || num2 < num4 - lastTileRangeY || num2 > num4 + lastTileRangeY + 1)
			{
				return;
			}
			Player localPlayer = LocalPlayer;
			player[myPlayer].noThrow = 2;
			player[myPlayer].cursorItemIconEnabled = true;
			player[myPlayer].cursorItemIconID = 3213;
			if (PlayerInput.UsingGamepad)
			{
				player[myPlayer].GamepadEnableGrappleCooldown();
			}
			if (mouseRight && mouseRightRelease && Player.BlockInteractionWithProjectiles == 0)
			{
				mouseRightRelease = false;
				localPlayer.tileInteractAttempted = true;
				localPlayer.tileInteractionHappened = true;
				localPlayer.releaseUseTile = false;
				if (player[myPlayer].chest == -2)
				{
					SoundEngine.PlaySound(SoundID.Item59);
					player[myPlayer].chest = -1;
					Recipe.FindRecipes();
					return;
				}
				player[myPlayer].flyingPigChest = proj.whoAmI;
				player[myPlayer].chest = -2;
				player[myPlayer].chestX = (int)(proj.Center.X / 16f);
				player[myPlayer].chestY = (int)(proj.Center.Y / 16f);
				player[myPlayer].SetTalkNPC(-1);
				SetNPCShopIndex(0);
				playerInventory = true;
				SoundEngine.PlaySound(SoundID.Item59);
				Recipe.FindRecipes();
			}
		}

		public void PrepareDrawnEntityDrawing(Entity entity, int intendedShader)
		{
			CurrentDrawnEntity = entity;
			if (intendedShader != 0)
			{
				if (CurrentDrawnEntityShader == 0 || CurrentDrawnEntityShader == -1)
				{
					spriteBatch.End();
					spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
				}
			}
			else if (CurrentDrawnEntityShader != 0 && CurrentDrawnEntityShader != -1)
			{
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			}
			CurrentDrawnEntityShader = intendedShader;
		}

		public static void EntitySpriteDraw(Texture2D texture, Vector2 position, Microsoft.Xna.Framework.Rectangle? sourceRectangle, Microsoft.Xna.Framework.Color color, float rotation, Vector2 origin, float scale, SpriteEffects effects, int worthless)
		{
			EntitySpriteDraw(texture, position, sourceRectangle, color, rotation, origin, new Vector2(scale), effects, worthless);
		}

		public static void EntitySpriteDraw(Texture2D texture, Vector2 position, Microsoft.Xna.Framework.Rectangle? sourceRectangle, Microsoft.Xna.Framework.Color color, float rotation, Vector2 origin, Vector2 scale, SpriteEffects effects, int worthless)
		{
			if (CurrentDrawnEntityShader > 0)
			{
				DrawData value = new DrawData(texture, position, sourceRectangle, color, rotation, origin, scale, effects, worthless);
				GameShaders.Armor.Apply(CurrentDrawnEntityShader, CurrentDrawnEntity, value);
				value.Draw(spriteBatch);
			}
			else
			{
				spriteBatch.Draw(texture, position, sourceRectangle, color, rotation, origin, scale, effects, worthless);
			}
		}

		public static void EntitySpriteDraw(DrawData data)
		{
			if (CurrentDrawnEntityShader > 0)
			{
				GameShaders.Armor.Apply(CurrentDrawnEntityShader, CurrentDrawnEntity, data);
				data.Draw(spriteBatch);
			}
			else
			{
				data.Draw(spriteBatch);
			}
		}

		public static Microsoft.Xna.Framework.Color buffColor(Microsoft.Xna.Framework.Color newColor, float R, float G, float B, float A)
		{
			newColor.R = (byte)((float)(int)newColor.R * R);
			newColor.G = (byte)((float)(int)newColor.G * G);
			newColor.B = (byte)((float)(int)newColor.B * B);
			newColor.A = (byte)((float)(int)newColor.A * A);
			return newColor;
		}

		protected void CacheNPCDraws()
		{
			DrawCacheNPCsMoonMoon.Clear();
			DrawCacheNPCsOverPlayers.Clear();
			DrawCacheNPCProjectiles.Clear();
			DrawCacheNPCsBehindNonSolidTiles.Clear();
			for (int i = 0; i < 200; i++)
			{
				if (!npc[i].active)
				{
					continue;
				}
				if (npc[i].type == 398 && npc[i].ai[0] >= 0f)
				{
					int num = i;
					int num2 = -1;
					int num3 = -1;
					int num4 = -1;
					for (int j = 0; j < 200; j++)
					{
						if (npc[j].active && npc[j].ai[3] == (float)num)
						{
							if (num2 == -1 && npc[j].type == 397 && npc[j].ai[2] == 0f)
							{
								num2 = j;
							}
							if (num3 == -1 && npc[j].type == 397 && npc[j].ai[2] == 1f)
							{
								num3 = j;
							}
							if (num4 == -1 && npc[j].type == 396)
							{
								num4 = j;
							}
							if (num2 != -1 && num3 != -1 && num4 != -1)
							{
								break;
							}
						}
					}
					if (num2 != -1 && num3 != -1 && num4 != -1)
					{
						DrawCacheNPCsMoonMoon.Add(num);
						if (num2 != -1)
						{
							DrawCacheNPCsMoonMoon.Add(num2);
						}
						if (num3 != -1)
						{
							DrawCacheNPCsMoonMoon.Add(num3);
						}
						if (num4 != -1)
						{
							DrawCacheNPCsMoonMoon.Add(num4);
						}
					}
				}
				else if (npc[i].type == 421 && npc[i].ai[0] == 5f)
				{
					DrawCacheNPCsOverPlayers.Add(i);
				}
				else if (npc[i].type == 516 || npc[i].type == 519)
				{
					DrawCacheNPCProjectiles.Add(i);
				}
				else if (npc[i].type == 548)
				{
					DrawCacheNPCsBehindNonSolidTiles.Add(i);
				}
			}
		}

		protected void CacheProjDraws()
		{
			DrawCacheProjsBehindNPCsAndTiles.Clear();
			DrawCacheProjsBehindNPCs.Clear();
			DrawCacheProjsBehindProjectiles.Clear();
			DrawCacheProjsOverWiresUI.Clear();
			DrawCacheProjsOverPlayers.Clear();
			DrawCacheFirstFractals.Clear();
			for (int i = 0; i < 1000; i++)
			{
				if (!projectile[i].active)
				{
					continue;
				}
				if (projectile[i].type == 857)
				{
					DrawCacheFirstFractals.Add(i);
				}
				if (projectile[i].type == 578 || projectile[i].type == 579 || projectile[i].type == 641 || projectile[i].type == 617 || projectile[i].type == 813)
				{
					DrawCacheProjsBehindNPCsAndTiles.Add(i);
				}
				if (projectile[i].type == 625 || projectile[i].type == 626 || projectile[i].type == 627 || projectile[i].type == 628 || projectile[i].type == 525 || projectile[i].type == 734 || projectile[i].type == 946 || (projectile[i].type == 908 && projectile[i].localAI[0] <= 0f))
				{
					DrawCacheProjsBehindProjectiles.Add(i);
				}
				if (projectile[i].type == 759 || (projectile[i].type == 908 && projectile[i].localAI[0] > 0f))
				{
					DrawCacheProjsOverPlayers.Add(i);
				}
				if (projectile[i].type == 651)
				{
					DrawCacheProjsOverWiresUI.Add(i);
				}
				if (projectile[i].type == 673 || projectile[i].type == 674 || projectile[i].type == 691 || projectile[i].type == 692 || projectile[i].type == 693 || projectile[i].type == 923)
				{
					DrawCacheProjsBehindNPCs.Add(i);
				}
				if (projectile[i].type != 636 && projectile[i].type != 598)
				{
					continue;
				}
				bool flag = true;
				if (projectile[i].ai[0] == 1f)
				{
					int num = (int)projectile[i].ai[1];
					if (num >= 0 && num < 200 && npc[num].active && npc[num].type != 492)
					{
						if (npc[num].behindTiles)
						{
							DrawCacheProjsBehindNPCsAndTiles.Add(i);
						}
						else
						{
							DrawCacheProjsBehindNPCs.Add(i);
						}
						flag = false;
					}
				}
				if (flag)
				{
					DrawCacheProjsBehindProjectiles.Add(i);
				}
			}
		}

		protected void DrawCachedNPCs(List<int> npcCache, bool behindTiles)
		{
			for (int i = 0; i < npcCache.Count; i++)
			{
				try
				{
					DrawNPC(npcCache[i], behindTiles);
				}
				catch
				{
					npc[npcCache[i]].active = false;
				}
			}
		}

		protected void DrawCachedProjs(List<int> projCache, bool startSpriteBatch = true)
		{
			if (startSpriteBatch)
			{
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			}
			for (int i = 0; i < projCache.Count; i++)
			{
				try
				{
					DrawProj(projCache[i]);
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					projectile[projCache[i]].active = false;
				}
			}
			if (startSpriteBatch)
			{
				spriteBatch.End();
			}
		}

		protected void DrawSuperSpecialProjectiles(List<int> projCache, bool startSpriteBatch = true)
		{
			if (startSpriteBatch)
			{
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			}
			for (int i = 0; i < projCache.Count; i++)
			{
				try
				{
					int num = projCache[i];
					Projectile projectile = Main.projectile[num];
					int owner = projectile.owner;
					Player other = Main.player[owner];
					if (playerVisualClone[owner] == null)
					{
						playerVisualClone[owner] = new Player();
					}
					Player player = playerVisualClone[owner];
					player.CopyVisuals(other);
					player.isFirstFractalAfterImage = true;
					player.firstFractalAfterImageOpacity = projectile.Opacity * 1f;
					player.ResetEffects();
					player.ResetVisibleAccessories();
					player.UpdateDyes();
					player.DisplayDollUpdate();
					player.UpdateSocialShadow();
					player.itemAnimationMax = 60;
					player.itemAnimation = (int)projectile.localAI[0];
					player.itemRotation = projectile.velocity.ToRotation();
					player.heldProj = num;
					player.Center = projectile.Center - projectile.velocity.SafeNormalize(Vector2.Zero) * 42f;
					player.direction = ((projectile.velocity.X > 0f) ? 1 : (-1));
					player.itemRotation = (float)Math.Atan2(projectile.velocity.Y * (float)player.direction, projectile.velocity.X * (float)player.direction);
					player.velocity.Y = 0.01f;
					player.wingFrame = 2;
					player.PlayerFrame();
					player.socialIgnoreLight = true;
					PlayerRenderer.DrawPlayer(Camera, player, player.position, 0f, player.fullRotationOrigin);
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
					Main.projectile[projCache[i]].active = false;
				}
			}
			if (startSpriteBatch)
			{
				spriteBatch.End();
			}
		}

		protected void SortDrawCacheWorms()
		{
			SortBabyBirdProjectiles(DrawCacheProjsOverPlayers);
			SortStardustDragonProjectiles(DrawCacheProjsBehindProjectiles);
		}

		private void SortBabyBirdProjectiles(List<int> list)
		{
			List<int> list2 = new List<int>();
			for (int num = list.Count - 1; num >= 0; num--)
			{
				int num2 = list[num];
				if (Main.projectile[num2].type == 759)
				{
					list2.Add(num2);
					list.RemoveAt(num);
					Projectile projectile = Main.projectile[num2];
					Player master = player[projectile.owner];
					int stackedIndex = (int)projectile.localAI[0];
					if (projectile.frame == projFrames[projectile.type] - 1)
					{
						projectile.Center = Projectile.AI_158_GetHomeLocation(master, stackedIndex);
						projectile.velocity = Vector2.Zero;
					}
				}
			}
			list.AddRange(list2);
			list2.Clear();
		}

		private void SortStardustDragonProjectiles(List<int> list)
		{
			List<List<int>> list2 = new List<List<int>>();
			for (int i = 0; i < list.Count; i++)
			{
				int num = list[i];
				if (Main.projectile[num].type == 628)
				{
					list.Remove(num);
					List<int> list3 = new List<int>();
					list3.Insert(0, num);
					int byUUID = Projectile.GetByUUID(Main.projectile[num].owner, Main.projectile[num].ai[0]);
					while (byUUID >= 0 && !list3.Contains(byUUID) && Main.projectile[byUUID].active && Main.projectile[byUUID].type >= 625 && Main.projectile[byUUID].type <= 627)
					{
						list3.Add(byUUID);
						list.Remove(byUUID);
						byUUID = Projectile.GetByUUID(Main.projectile[byUUID].owner, Main.projectile[byUUID].ai[0]);
					}
					List<int> list4 = new List<int>();
					for (int num2 = list3.Count - 2; num2 >= 0; num2--)
					{
						list4.Add(list3[num2]);
					}
					list4.Add(list3[list3.Count - 1]);
					list2.Add(list4);
					i = -1;
				}
			}
			List<int> list5 = new List<int>(list);
			list2.Add(list5);
			list.Clear();
			for (int j = 0; j < list2.Count; j++)
			{
				for (int k = 0; k < list2[j].Count; k++)
				{
					list.Add(list2[j][k]);
				}
			}
			for (int l = 0; l < list.Count; l++)
			{
				Projectile projectile = Main.projectile[list[l]];
				int byUUID2 = Projectile.GetByUUID(projectile.owner, projectile.ai[0]);
				if (projectile.type < 626 || projectile.type > 628 || byUUID2 < 0 || !ProjectileID.Sets.StardustDragon[Main.projectile[byUUID2].type])
				{
					continue;
				}
				Vector2 vector = Main.projectile[byUUID2].Center - projectile.Center;
				if (vector != Vector2.Zero)
				{
					float num3 = Main.projectile[byUUID2].scale * 16f;
					float num4 = vector.Length();
					float num5 = num3 - num4;
					if (num5 != 0f)
					{
						projectile.Center += Vector2.Normalize(vector) * (0f - num5);
					}
				}
			}
		}

		protected void DrawWoF()
		{
			if (wofNPCIndex < 0 || !npc[wofNPCIndex].active || npc[wofNPCIndex].life <= 0)
			{
				return;
			}
			for (int i = 0; i < 255; i++)
			{
				if (player[i].active && player[i].tongued && !player[i].dead)
				{
					DrawWOFTongueToPlayer(i);
				}
			}
			for (int j = 0; j < 200; j++)
			{
				if (npc[j].active && npc[j].aiStyle == 29)
				{
					DrawWOFRopeToTheHungry(j);
				}
			}
			DrawWOFBody();
		}

		private static void DrawWOFBody()
		{
			int num = TextureAssets.Wof.Height() / 3;
			float num2 = wofDrawAreaTop;
			float num3 = wofDrawAreaBottom;
			num3 = screenPosition.Y + (float)screenHeight;
			float num4 = (int)((num2 - screenPosition.Y) / (float)num) + 1;
			if (num4 > 12f)
			{
				return;
			}
			float num5 = num4 * (float)num;
			if (num5 > 0f)
			{
				num2 -= num5;
			}
			float num6 = npc[wofNPCIndex].position.X;
			if (npc[wofNPCIndex].direction > 0)
			{
				num6 -= 80f;
			}
			SpriteEffects effects = SpriteEffects.None;
			if (npc[wofNPCIndex].spriteDirection == 1)
			{
				effects = SpriteEffects.FlipHorizontally;
			}
			int num7 = wofDrawFrameIndex / 6 * num;
			if (!gamePaused && ++wofDrawFrameIndex >= 18)
			{
				wofDrawFrameIndex = 0;
			}
			float num8 = num3 - num2;
			for (int i = (int)num2; (float)i < num3; i += num)
			{
				num8 = num3 - (float)i;
				if (num8 > (float)num)
				{
					num8 = num;
				}
				for (int j = 0; (float)j < num8; j += 16)
				{
					int x = (int)(num6 + (float)(TextureAssets.Wof.Width() / 2)) / 16;
					int y = (i + j) / 16;
					spriteBatch.Draw(TextureAssets.Wof.Value, new Vector2(num6 - screenPosition.X, (float)(i + j) - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, num7 + j, TextureAssets.Wof.Width(), 16), Lighting.GetColor(x, y), 0f, default(Vector2), 1f, effects, 0f);
				}
			}
		}

		private static void DrawWOFRopeToTheHungry(int i)
		{
			float num = npc[wofNPCIndex].position.X + (float)(npc[wofNPCIndex].width / 2);
			float y = npc[wofNPCIndex].position.Y;
			float num2 = wofDrawAreaBottom - wofDrawAreaTop;
			bool flag = false;
			if (npc[i].frameCounter > 7.0)
			{
				flag = true;
			}
			y = (float)wofDrawAreaTop + num2 * npc[i].ai[0];
			Vector2 vector = new Vector2(npc[i].position.X + (float)(npc[i].width / 2), npc[i].position.Y + (float)(npc[i].height / 2));
			float num3 = num - vector.X;
			float num4 = y - vector.Y;
			float rotation = (float)Math.Atan2(num4, num3) - 1.57f;
			bool flag2 = true;
			while (flag2)
			{
				SpriteEffects effects = SpriteEffects.None;
				if (flag)
				{
					effects = SpriteEffects.FlipHorizontally;
					flag = false;
				}
				else
				{
					flag = true;
				}
				int height = 28;
				float num5 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
				if (num5 < 40f)
				{
					height = (int)num5 - 40 + 28;
					flag2 = false;
				}
				num5 = 28f / num5;
				num3 *= num5;
				num4 *= num5;
				vector.X += num3;
				vector.Y += num4;
				num3 = num - vector.X;
				num4 = y - vector.Y;
				Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
				spriteBatch.Draw(TextureAssets.Chain12.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain4.Width(), height), color, rotation, new Vector2((float)TextureAssets.Chain4.Width() * 0.5f, (float)TextureAssets.Chain4.Height() * 0.5f), 1f, effects, 0f);
			}
		}

		private static void DrawWOFTongueToPlayer(int i)
		{
			float num = npc[wofNPCIndex].position.X + (float)(npc[wofNPCIndex].width / 2);
			float num2 = npc[wofNPCIndex].position.Y + (float)(npc[wofNPCIndex].height / 2);
			Vector2 vector = new Vector2(player[i].position.X + (float)player[i].width * 0.5f, player[i].position.Y + (float)player[i].height * 0.5f);
			float num3 = num - vector.X;
			float num4 = num2 - vector.Y;
			float rotation = (float)Math.Atan2(num4, num3) - 1.57f;
			bool flag = true;
			while (flag)
			{
				float num5 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
				if (num5 < 40f)
				{
					flag = false;
					continue;
				}
				num5 = (float)TextureAssets.Chain12.Height() / num5;
				num3 *= num5;
				num4 *= num5;
				vector.X += num3;
				vector.Y += num4;
				num3 = num - vector.X;
				num4 = num2 - vector.Y;
				Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector.X / 16, (int)(vector.Y / 16f));
				spriteBatch.Draw(TextureAssets.Chain12.Value, new Vector2(vector.X - screenPosition.X, vector.Y - screenPosition.Y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chain12.Width(), TextureAssets.Chain12.Height()), color, rotation, new Vector2((float)TextureAssets.Chain12.Width() * 0.5f, (float)TextureAssets.Chain12.Height() * 0.5f), 1f, SpriteEffects.None, 0f);
			}
		}

		public static Microsoft.Xna.Framework.Color quickAlpha(Microsoft.Xna.Framework.Color oldColor, float Alpha)
		{
			Microsoft.Xna.Framework.Color result = oldColor;
			result.R = (byte)((float)(int)result.R * Alpha);
			result.G = (byte)((float)(int)result.G * Alpha);
			result.B = (byte)((float)(int)result.B * Alpha);
			result.A = (byte)((float)(int)result.A * Alpha);
			return result;
		}

		private void DrawItem_GetBasics(Item item, int slot, out Texture2D texture, out Microsoft.Xna.Framework.Rectangle frame)
		{
			LoadItem(item.type);
			if (ItemID.Sets.AnimatesAsSoul[item.type] || ItemID.Sets.NebulaPickup[item.type])
			{
				DrawItem_AnimateSlot(slot, itemAnimations[item.type].TicksPerFrame, itemAnimations[item.type].FrameCount);
				texture = TextureAssets.Item[item.type].Value;
			}
			else if (ItemID.Sets.IsFood[item.type])
			{
				texture = TextureAssets.Item[item.type].Value;
			}
			else
			{
				switch (item.type)
				{
				case 71:
				case 72:
				case 73:
				case 74:
				{
					int num = item.type - 71;
					texture = TextureAssets.Coin[num].Value;
					DrawItem_AnimateSlot(slot, 6, 8);
					frame = _coinOnWorldAnimation.GetFrame(texture, itemFrameCounter[slot]);
					return;
				}
				case 3858:
					texture = TextureAssets.Item[item.type].Value;
					DrawItem_AnimateSlot(slot, 5, 3);
					break;
				case 75:
					texture = TextureAssets.Item[item.type].Value;
					DrawItem_AnimateSlot(slot, itemAnimations[item.type].TicksPerFrame, itemAnimations[item.type].FrameCount * 2 - 1);
					break;
				default:
					texture = TextureAssets.Item[item.type].Value;
					break;
				}
			}
			if (itemAnimations[item.type] != null)
			{
				frame = itemAnimations[item.type].GetFrame(texture, itemFrameCounter[slot]);
			}
			else
			{
				frame = texture.Frame();
			}
		}

		private void DrawItem_AnimateSlot(int slot, int gameFramesPerSpriteFrame, int spriteFramesAmount)
		{
			if (++itemFrameCounter[slot] >= gameFramesPerSpriteFrame * spriteFramesAmount)
			{
				itemFrameCounter[slot] = 0;
			}
		}

		protected void DrawItem(Item item, int whoami)
		{
			if (!item.active || item.IsAir)
			{
				return;
			}
			instance.LoadItem(item.type);
			DrawItem_GetBasics(item, whoami, out var texture, out var frame);
			Vector2 vector = frame.Size() / 2f;
			Vector2 value = new Vector2((float)(item.width / 2) - vector.X, item.height - frame.Height);
			Vector2 vector2 = item.position - screenPosition + vector + value;
			float num = item.velocity.X * 0.2f;
			float scale = 1f;
			Microsoft.Xna.Framework.Color color = Lighting.GetColor(item.Center.ToTileCoordinates());
			Microsoft.Xna.Framework.Color currentColor = item.GetAlpha(color);
			ItemSlot.GetItemLight(currentColor, scale, item);
			int num2 = item.glowMask;
			if (!gamePaused && base.IsActive && ((item.type >= 71 && item.type <= 74) || item.type == 58 || item.type == 109) && color.R > 60 && (float)rand.Next(500) - (Math.Abs(item.velocity.X) + Math.Abs(item.velocity.Y)) * 10f < (float)((int)color.R / 50))
			{
				int num3 = Dust.NewDust(item.position, item.width, item.height, 43, 0f, 0f, 254, Microsoft.Xna.Framework.Color.White, 0.5f);
				dust[num3].velocity *= 0f;
			}
			if ((item.type >= 3318 && item.type <= 3332) || item.type == 3860 || item.type == 3862 || item.type == 3861 || item.type == 4782 || item.type == 4957)
			{
				float num4 = (float)item.timeSinceItemSpawned / 240f + GlobalTimeWrappedHourly * 0.04f;
				float globalTimeWrappedHourly = GlobalTimeWrappedHourly;
				globalTimeWrappedHourly %= 4f;
				globalTimeWrappedHourly /= 2f;
				if (globalTimeWrappedHourly >= 1f)
				{
					globalTimeWrappedHourly = 2f - globalTimeWrappedHourly;
				}
				globalTimeWrappedHourly = globalTimeWrappedHourly * 0.5f + 0.5f;
				for (float num5 = 0f; num5 < 1f; num5 += 0.25f)
				{
					spriteBatch.Draw(texture, vector2 + new Vector2(0f, 8f).RotatedBy((num5 + num4) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly, frame, new Microsoft.Xna.Framework.Color(90, 70, 255, 50), num, vector, scale, SpriteEffects.None, 0f);
				}
				for (float num6 = 0f; num6 < 1f; num6 += 0.34f)
				{
					spriteBatch.Draw(texture, vector2 + new Vector2(0f, 4f).RotatedBy((num6 + num4) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly, frame, new Microsoft.Xna.Framework.Color(140, 120, 255, 77), num, vector, scale, SpriteEffects.None, 0f);
				}
			}
			else if (item.type == 75)
			{
				float num7 = (float)item.timeSinceItemSpawned / 240f + GlobalTimeWrappedHourly * 0.04f;
				float globalTimeWrappedHourly2 = GlobalTimeWrappedHourly;
				globalTimeWrappedHourly2 %= 5f;
				globalTimeWrappedHourly2 /= 2.5f;
				if (globalTimeWrappedHourly2 >= 1f)
				{
					globalTimeWrappedHourly2 = 2f - globalTimeWrappedHourly2;
				}
				globalTimeWrappedHourly2 = globalTimeWrappedHourly2 * 0.5f + 0.5f;
				for (float num8 = 0f; num8 < 1f; num8 += 0.25f)
				{
					spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector2 + new Vector2(0f, 8f).RotatedBy((num8 + num7) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly2, frame, new Microsoft.Xna.Framework.Color(50, 50, 255, 50), num, vector, scale, SpriteEffects.None, 0f);
				}
				for (float num9 = 0f; num9 < 1f; num9 += 0.34f)
				{
					spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector2 + new Vector2(0f, 4f).RotatedBy((num9 + num7) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly2, frame, new Microsoft.Xna.Framework.Color(120, 120, 255, 127), num, vector, scale, SpriteEffects.None, 0f);
				}
			}
			else if (item.type == 4143)
			{
				float num10 = (float)item.timeSinceItemSpawned / 240f + GlobalTimeWrappedHourly * 0.04f;
				float globalTimeWrappedHourly3 = GlobalTimeWrappedHourly;
				globalTimeWrappedHourly3 %= 5f;
				globalTimeWrappedHourly3 /= 2.5f;
				if (globalTimeWrappedHourly3 >= 1f)
				{
					globalTimeWrappedHourly3 = 2f - globalTimeWrappedHourly3;
				}
				globalTimeWrappedHourly3 = globalTimeWrappedHourly3 * 0.5f + 0.5f;
				for (float num11 = 0f; num11 < 1f; num11 += 0.34f)
				{
					spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector2 + new Vector2(0f, 8f).RotatedBy((num11 + num10) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly3, frame, new Microsoft.Xna.Framework.Color(30, 30, 155, 60), num, vector, scale, SpriteEffects.None, 0f);
				}
				for (float num12 = 0f; num12 < 1f; num12 += 0.34f)
				{
					spriteBatch.Draw(TextureAssets.Item[item.type].Value, vector2 + new Vector2(0f, 4f).RotatedBy((num12 + num10) * ((float)Math.PI * 2f)) * globalTimeWrappedHourly3, frame, new Microsoft.Xna.Framework.Color(60, 60, 127, 57), num, vector, scale, SpriteEffects.None, 0f);
				}
				spriteBatch.Draw(texture, vector2, frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 128), num, vector, scale, SpriteEffects.None, 0f);
			}
			if ((item.type >= 1522 && item.type <= 1527) || item.type == 3643)
			{
				currentColor = new Microsoft.Xna.Framework.Color(250, 250, 250, (int)mouseTextColor / 2);
				scale = (float)(int)mouseTextColor / 1000f + 0.8f;
			}
			if (item.type == 3779)
			{
				num2 = -1;
			}
			spriteBatch.Draw(texture, vector2, frame, currentColor, num, vector, scale, SpriteEffects.None, 0f);
			if (item.color != Microsoft.Xna.Framework.Color.Transparent)
			{
				spriteBatch.Draw(texture, vector2, frame, item.GetColor(color), num, vector, scale, SpriteEffects.None, 0f);
			}
			if (num2 != -1)
			{
				spriteBatch.Draw(TextureAssets.GlowMask[num2].Value, vector2, frame, new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num, vector, scale, SpriteEffects.None, 0f);
			}
			if (ItemID.Sets.TrapSigned[item.type])
			{
				spriteBatch.Draw(TextureAssets.Wire.Value, vector2 + frame.Size().RotatedBy(num) * 0.45f * item.scale, new Microsoft.Xna.Framework.Rectangle(4, 58, 8, 8), currentColor, 0f, new Vector2(4f), 1f, SpriteEffects.None, 0f);
			}
			if (item.type == 3858)
			{
				spriteBatch.Draw(TextureAssets.GlowMask[233].Value, vector2, frame, new Microsoft.Xna.Framework.Color(255, 255, 255, 63) * 0.75f, num, frame.Size() / 2f, scale, SpriteEffects.None, 0f);
			}
		}

		public void DrawItems()
		{
			for (int i = 0; i < 400; i++)
			{
				DrawItem(item[i], i);
			}
		}

		protected void DrawRain()
		{
			bool flag = base.IsActive || netMode == 1;
			Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 2, 40);
			Texture2D value2 = TextureAssets.Rain.Value;
			Vector2 zero = Vector2.Zero;
			for (int i = 0; i < maxRain; i++)
			{
				Rain rain = Main.rain[i];
				if (rain.active)
				{
					value.X = rain.type * 4;
					spriteBatch.Draw(value2, rain.position - screenPosition, value, Lighting.GetColor((int)(rain.position.X + 4f) >> 4, (int)(rain.position.Y + 4f) >> 4) * 0.85f, rain.rotation, zero, rain.scale, SpriteEffects.None, 0f);
					if (flag)
					{
						rain.Update();
					}
				}
			}
			TimeLogger.DetailedDrawTime(23);
		}

		protected void DrawDust()
		{
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 500, (int)screenPosition.Y - 50, screenWidth + 1000, screenHeight + 100);
			rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X - 1000, (int)screenPosition.Y - 1050, screenWidth + 2000, screenHeight + 2100);
			Microsoft.Xna.Framework.Rectangle rectangle2 = rectangle;
			ArmorShaderData armorShaderData = null;
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone, null, Transform);
			for (int i = 0; i < maxDustToDraw; i++)
			{
				Dust dust = Main.dust[i];
				if (!dust.active)
				{
					continue;
				}
				if ((dust.type >= 130 && dust.type <= 134) || (dust.type >= 219 && dust.type <= 223) || dust.type == 226 || dust.type == 278)
				{
					rectangle = rectangle2;
				}
				if (new Microsoft.Xna.Framework.Rectangle((int)dust.position.X, (int)dust.position.Y, 4, 4).Intersects(rectangle))
				{
					float scale = dust.scale;
					if (dust.shader != armorShaderData)
					{
						spriteBatch.End();
						armorShaderData = dust.shader;
						if (armorShaderData == null)
						{
							spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone, null, Transform);
						}
						else
						{
							spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullNone, null, Transform);
							dust.shader.Apply(null);
						}
					}
					if (dust.type >= 130 && dust.type <= 134)
					{
						float num = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
						num *= 0.3f;
						num *= 10f;
						if (num > 10f)
						{
							num = 10f;
						}
						for (int j = 0; (float)j < num; j++)
						{
							Vector2 velocity = dust.velocity;
							Vector2 value = dust.position - velocity * j;
							float scale2 = dust.scale * (1f - (float)j / 10f);
							Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
							color = dust.GetAlpha(color);
							spriteBatch.Draw(TextureAssets.Dust.Value, value - screenPosition, dust.frame, color, dust.rotation, new Vector2(4f, 4f), scale2, SpriteEffects.None, 0f);
						}
					}
					else if (dust.type == 278)
					{
						float num2 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
						num2 *= 0.3f;
						num2 *= 10f;
						if (num2 > 10f)
						{
							num2 = 10f;
						}
						Vector2 origin = new Vector2(4f, 4f);
						for (int k = 0; (float)k < num2; k++)
						{
							Vector2 velocity2 = dust.velocity;
							Vector2 value2 = dust.position - velocity2 * k;
							float scale3 = dust.scale * (1f - (float)k / 10f);
							Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)(dust.position.X + 4f) / 16, (int)(dust.position.Y + 4f) / 16);
							color2 = dust.GetAlpha(color2);
							spriteBatch.Draw(TextureAssets.Dust.Value, value2 - screenPosition, dust.frame, color2, dust.rotation, origin, scale3, SpriteEffects.None, 0f);
						}
					}
					else if (dust.type >= 219 && dust.type <= 223 && dust.fadeIn == 0f)
					{
						float num3 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
						num3 *= 0.3f;
						num3 *= 10f;
						if (num3 > 10f)
						{
							num3 = 10f;
						}
						for (int l = 0; (float)l < num3; l++)
						{
							Vector2 velocity3 = dust.velocity;
							Vector2 value3 = dust.position - velocity3 * l;
							float scale4 = dust.scale * (1f - (float)l / 10f);
							Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
							color3 = dust.GetAlpha(color3);
							spriteBatch.Draw(TextureAssets.Dust.Value, value3 - screenPosition, dust.frame, color3, dust.rotation, new Vector2(4f, 4f), scale4, SpriteEffects.None, 0f);
						}
					}
					else if (dust.type == 264 && dust.fadeIn == 0f)
					{
						float num4 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
						num4 *= 10f;
						if (num4 > 10f)
						{
							num4 = 10f;
						}
						for (int m = 0; (float)m < num4; m++)
						{
							Vector2 velocity4 = dust.velocity;
							Vector2 value4 = dust.position - velocity4 * m;
							float scale5 = dust.scale * (1f - (float)m / 10f);
							Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
							color4 = dust.GetAlpha(color4) * 0.3f;
							spriteBatch.Draw(TextureAssets.Dust.Value, value4 - screenPosition, dust.frame, color4, dust.rotation, new Vector2(5f), scale5, SpriteEffects.None, 0f);
							color4 = dust.GetColor(color4);
							spriteBatch.Draw(TextureAssets.Dust.Value, value4 - screenPosition, dust.frame, color4, dust.rotation, new Vector2(5f), scale5, SpriteEffects.None, 0f);
						}
					}
					else if ((dust.type == 226 || dust.type == 272) && dust.fadeIn == 0f)
					{
						float num5 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
						num5 *= 0.3f;
						num5 *= 10f;
						if (num5 > 10f)
						{
							num5 = 10f;
						}
						for (int n = 0; (float)n < num5; n++)
						{
							Vector2 velocity5 = dust.velocity;
							Vector2 value5 = dust.position - velocity5 * n;
							float scale6 = dust.scale * (1f - (float)n / 10f);
							Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
							color5 = dust.GetAlpha(color5);
							spriteBatch.Draw(TextureAssets.Dust.Value, value5 - screenPosition, dust.frame, color5, dust.rotation, new Vector2(4f, 4f), scale6, SpriteEffects.None, 0f);
						}
					}
					Microsoft.Xna.Framework.Color newColor = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
					if (dust.type == 6 || dust.type == 15 || (dust.type >= 59 && dust.type <= 64))
					{
						newColor = Microsoft.Xna.Framework.Color.White;
					}
					newColor = dust.GetAlpha(newColor);
					if (dust.type == 213)
					{
						scale = 1f;
					}
					spriteBatch.Draw(TextureAssets.Dust.Value, dust.position - screenPosition, dust.frame, newColor, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
					if (dust.color.PackedValue != 0)
					{
						Microsoft.Xna.Framework.Color color6 = dust.GetColor(newColor);
						if (color6.PackedValue != 0)
						{
							spriteBatch.Draw(TextureAssets.Dust.Value, dust.position - screenPosition, dust.frame, color6, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
						}
					}
					if (newColor == Microsoft.Xna.Framework.Color.Black)
					{
						dust.active = false;
					}
				}
				else
				{
					dust.active = false;
				}
			}
			spriteBatch.End();
			pixelShader.CurrentTechnique.Passes[0].Apply();
			TimeLogger.DetailedDrawTime(25);
		}

		private static void HelpText()
		{
			bool flag = false;
			if (player[myPlayer].statLifeMax > 100)
			{
				flag = true;
			}
			bool flag2 = false;
			if (player[myPlayer].statManaMax > 20)
			{
				flag2 = true;
			}
			bool flag3 = true;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			for (int i = 0; i < 58; i++)
			{
				if (player[myPlayer].inventory[i].pick > 0 && player[myPlayer].inventory[i].Name != "Copper Pickaxe")
				{
					flag3 = false;
				}
				if (player[myPlayer].inventory[i].axe > 0 && player[myPlayer].inventory[i].Name != "Copper Axe")
				{
					flag3 = false;
				}
				if (player[myPlayer].inventory[i].hammer > 0)
				{
					flag3 = false;
				}
				if (player[myPlayer].inventory[i].type == 11 || player[myPlayer].inventory[i].type == 12 || player[myPlayer].inventory[i].type == 13 || player[myPlayer].inventory[i].type == 14 || player[myPlayer].inventory[i].type == 699 || player[myPlayer].inventory[i].type == 700 || player[myPlayer].inventory[i].type == 701 || player[myPlayer].inventory[i].type == 702)
				{
					flag4 = true;
				}
				if (player[myPlayer].inventory[i].type == 19 || player[myPlayer].inventory[i].type == 20 || player[myPlayer].inventory[i].type == 21 || player[myPlayer].inventory[i].type == 22 || player[myPlayer].inventory[i].type == 703 || player[myPlayer].inventory[i].type == 704 || player[myPlayer].inventory[i].type == 705 || player[myPlayer].inventory[i].type == 706)
				{
					flag5 = true;
				}
				if (player[myPlayer].inventory[i].type == 75)
				{
					flag6 = true;
				}
				if (player[myPlayer].inventory[i].type == 38)
				{
					flag7 = true;
				}
				if (player[myPlayer].inventory[i].type == 68 || player[myPlayer].inventory[i].type == 70 || player[myPlayer].inventory[i].type == 1330 || player[myPlayer].inventory[i].type == 1331 || player[myPlayer].inventory[i].type == 67 || player[myPlayer].inventory[i].type == 2886)
				{
					flag8 = true;
				}
				if (player[myPlayer].inventory[i].type == 84 || player[myPlayer].inventory[i].type == 1236 || player[myPlayer].inventory[i].type == 1237 || player[myPlayer].inventory[i].type == 1238 || player[myPlayer].inventory[i].type == 1239 || player[myPlayer].inventory[i].type == 1240 || player[myPlayer].inventory[i].type == 1241 || player[myPlayer].inventory[i].type == 939 || player[myPlayer].inventory[i].type == 1273 || player[myPlayer].inventory[i].type == 2585 || player[myPlayer].inventory[i].type == 2360 || player[myPlayer].inventory[i].type == 185 || player[myPlayer].inventory[i].type == 1800 || player[myPlayer].inventory[i].type == 1915)
				{
					flag9 = true;
				}
				if (player[myPlayer].inventory[i].type == 3347)
				{
					flag10 = true;
				}
				if (player[myPlayer].inventory[i].type == 174)
				{
					flag11 = true;
				}
				if (player[myPlayer].inventory[i].type == 1141)
				{
					flag12 = true;
				}
				if (player[myPlayer].inventory[i].type == 1533 || player[myPlayer].inventory[i].type == 1534 || player[myPlayer].inventory[i].type == 1535 || player[myPlayer].inventory[i].type == 1536 || player[myPlayer].inventory[i].type == 1537 || player[myPlayer].inventory[i].type == 4714)
				{
					flag13 = true;
				}
			}
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			bool flag17 = false;
			bool flag18 = false;
			bool flag19 = false;
			bool flag20 = false;
			bool flag21 = false;
			bool flag22 = false;
			bool flag23 = false;
			bool flag24 = false;
			bool flag25 = false;
			bool flag26 = false;
			bool flag27 = false;
			bool flag28 = false;
			bool flag29 = false;
			bool flag30 = false;
			bool flag31 = false;
			bool flag32 = false;
			bool flag33 = false;
			bool flag34 = false;
			bool flag35 = false;
			bool flag36 = false;
			bool flag37 = false;
			bool flag38 = false;
			int num = 0;
			for (int j = 0; j < 200; j++)
			{
				if (npc[j].active)
				{
					if (npc[j].townNPC && npc[j].type != 37)
					{
						num++;
					}
					if (npc[j].type == 17)
					{
						flag14 = true;
					}
					if (npc[j].type == 18)
					{
						flag15 = true;
					}
					if (npc[j].type == 19)
					{
						flag17 = true;
					}
					if (npc[j].type == 20)
					{
						flag16 = true;
					}
					if (npc[j].type == 54)
					{
						flag22 = true;
					}
					if (npc[j].type == 124)
					{
						flag19 = true;
					}
					if (npc[j].type == 38)
					{
						flag18 = true;
					}
					if (npc[j].type == 108)
					{
						flag20 = true;
					}
					if (npc[j].type == 107)
					{
						flag21 = true;
					}
					if (npc[j].type == 228)
					{
						flag23 = true;
					}
					if (npc[j].type == 178)
					{
						flag24 = true;
					}
					if (npc[j].type == 209)
					{
						flag25 = true;
					}
					if (npc[j].type == 353)
					{
						flag26 = true;
					}
					if (npc[j].type == 633)
					{
						flag38 = true;
					}
					if (npc[j].type == 369)
					{
						flag27 = true;
					}
					if (npc[j].type == 441)
					{
						flag28 = true;
					}
					if (npc[j].type == 229)
					{
						flag29 = true;
					}
					if (npc[j].type == 207)
					{
						flag30 = true;
					}
					if (npc[j].type == 160)
					{
						flag31 = true;
					}
					if (npc[j].type == 588)
					{
						flag32 = true;
					}
					if (npc[j].type == 227)
					{
						flag33 = true;
					}
					if (npc[j].type == 208)
					{
						flag34 = true;
					}
					if (npc[j].type == 550)
					{
						flag35 = true;
					}
					if (npc[j].type == 368)
					{
						flag36 = true;
					}
					if (npc[j].type == 453)
					{
						flag37 = true;
					}
				}
			}
			object obj = Lang.CreateDialogSubstitutionObject();
			while (true)
			{
				helpText++;
				if (Language.Exists("GuideHelpText.Help_" + helpText))
				{
					LocalizedText text = Language.GetText("GuideHelpText.Help_" + helpText);
					if (text.CanFormatWith(obj))
					{
						npcChatText = text.FormatWith(obj);
						return;
					}
				}
				if (flag3)
				{
					if (helpText == 1)
					{
						npcChatText = Lang.dialog(177);
						return;
					}
					if (helpText == 2)
					{
						npcChatText = Lang.dialog(178);
						return;
					}
					if (helpText == 3)
					{
						npcChatText = Lang.dialog(179);
						return;
					}
					if (helpText == 4)
					{
						npcChatText = Lang.dialog(180);
						return;
					}
					if (helpText == 5)
					{
						npcChatText = Lang.dialog(181);
						return;
					}
					if (helpText == 6)
					{
						npcChatText = Lang.dialog(182);
						return;
					}
				}
				if (flag3 && !flag4 && !flag5 && helpText == 11)
				{
					npcChatText = Lang.dialog(183);
					return;
				}
				if (flag3 && flag4 && !flag5)
				{
					if (helpText == 21)
					{
						npcChatText = Lang.dialog(184);
						return;
					}
					if (helpText == 22)
					{
						npcChatText = Lang.dialog(185);
						return;
					}
				}
				if (flag3 && flag5)
				{
					if (helpText == 31)
					{
						npcChatText = Lang.dialog(186);
						return;
					}
					if (helpText == 32)
					{
						npcChatText = Lang.dialog(187);
						return;
					}
				}
				if (!flag && helpText == 41)
				{
					npcChatText = Lang.dialog(188);
					return;
				}
				if (!flag2 && helpText == 42)
				{
					npcChatText = Lang.dialog(189);
					return;
				}
				if (!flag2 && !flag6 && helpText == 43)
				{
					npcChatText = Lang.dialog(190);
					return;
				}
				if (!flag14 && !flag15)
				{
					if (helpText == 51)
					{
						npcChatText = Lang.dialog(191);
						return;
					}
					if (helpText == 52)
					{
						npcChatText = Lang.dialog(192);
						return;
					}
					if (helpText == 53)
					{
						npcChatText = Lang.dialog(193);
						return;
					}
					if (helpText == 54)
					{
						npcChatText = Lang.dialog(194);
						return;
					}
				}
				if (!flag14 && helpText == 61)
				{
					npcChatText = Lang.dialog(195);
					return;
				}
				if (!flag15 && helpText == 62)
				{
					npcChatText = Lang.dialog(196);
					return;
				}
				if (!flag17 && helpText == 63)
				{
					npcChatText = Lang.dialog(197);
					return;
				}
				if (!flag16 && helpText == 64)
				{
					npcChatText = Lang.dialog(198);
					return;
				}
				if (!flag19 && helpText == 65 && NPC.downedBoss3)
				{
					npcChatText = Lang.dialog(199);
					return;
				}
				if (!flag22 && helpText == 66 && NPC.downedBoss3)
				{
					npcChatText = Lang.dialog(200);
					return;
				}
				if (!flag18 && helpText == 67)
				{
					npcChatText = Lang.dialog(201);
					return;
				}
				if (!flag21 && NPC.downedBoss2 && helpText == 68)
				{
					npcChatText = Lang.dialog(202);
					return;
				}
				if (!flag20 && hardMode && helpText == 69)
				{
					npcChatText = Lang.dialog(203);
					return;
				}
				if (!flag23 && helpText == 70 && NPC.downedBoss2)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1100");
					return;
				}
				if (!flag24 && helpText == 71 && hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1101");
					return;
				}
				if (!flag25 && helpText == 72 && NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1102");
					return;
				}
				if (!flag26 && helpText == 73)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1103");
					return;
				}
				if (!flag27 && helpText == 74)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1104");
					return;
				}
				if (!flag28 && helpText == 75 && hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1105");
					return;
				}
				if (!flag29 && helpText == 76 && hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1106");
					return;
				}
				if (!flag30 && helpText == 77)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1107");
					return;
				}
				if (!flag31 && helpText == 78 && hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1108");
					return;
				}
				if (!flag32 && helpText == 79)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1109");
					return;
				}
				if (!flag33 && helpText == 80 && num >= 5)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1110");
					return;
				}
				if (!flag34 && helpText == 81 && num >= 11)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1111");
					return;
				}
				if (!flag35 && NPC.downedBoss2 && helpText == 82)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1112");
					return;
				}
				if (!flag36 && helpText == 83 && flag14)
				{
					npcChatText = Language.GetTextValueWith("GuideHelpTextSpecific.Help_1113", obj);
					return;
				}
				if (!flag37 && helpText == 84 && !hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1114");
					return;
				}
				if (!flag38 && helpText == 85 && !hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1115");
					return;
				}
				if (flag7 && !WorldGen.crimson && helpText == 100)
				{
					npcChatText = Lang.dialog(204);
					return;
				}
				if (flag8 && helpText == 101)
				{
					npcChatText = Lang.dialog(WorldGen.crimson ? 403 : 205);
					return;
				}
				if ((flag7 || flag8) && helpText == 102)
				{
					npcChatText = Lang.dialog(WorldGen.crimson ? 402 : 206);
					return;
				}
				if (flag7 && WorldGen.crimson && helpText == 103)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1159");
					return;
				}
				if (!flag9 && LocalPlayer.miscEquips[4].IsAir && helpText == 201 && !hardMode && !NPC.downedBoss3 && !NPC.downedBoss2)
				{
					npcChatText = Lang.dialog(207);
					return;
				}
				if (helpText == 202 && !hardMode && player[myPlayer].statLifeMax >= 140)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1120");
					return;
				}
				if (helpText == 203 && hardMode && NPC.downedMechBossAny)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1121");
					return;
				}
				if (helpText == 204 && !NPC.downedGoblins && player[myPlayer].statLifeMax >= 200 && WorldGen.shadowOrbSmashed)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1122");
					return;
				}
				if (helpText == 205 && hardMode && !NPC.downedPirates && player[myPlayer].statLifeMax >= 200)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1123");
					return;
				}
				if (helpText == 206 && hardMode && NPC.downedGolemBoss && !NPC.downedMartians)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1124");
					return;
				}
				if (helpText == 207 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3))
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1125");
					return;
				}
				if (helpText == 208 && !hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1130");
					return;
				}
				if (helpText == 209 && !hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1131");
					return;
				}
				if (helpText == 210 && !hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1132");
					return;
				}
				if (helpText == 211 && !hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1133");
					return;
				}
				if (helpText == 212 && !hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1134");
					return;
				}
				if (helpText == 213 && !hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1135");
					return;
				}
				if (helpText == 214 && !hardMode && (flag4 || flag5))
				{
					npcChatText = Language.GetTextValueWith("GuideHelpTextSpecific.Help_1136", obj);
					return;
				}
				if (helpText == 215 && LocalPlayer.anglerQuestsFinished < 1)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1137");
					return;
				}
				if (helpText == 216 && !hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1138");
					return;
				}
				if (helpText == 1000 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					npcChatText = Lang.dialog(208);
					return;
				}
				if (helpText == 1001 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					npcChatText = Lang.dialog(209);
					return;
				}
				if (helpText == 1002 && !NPC.downedBoss2)
				{
					if (WorldGen.crimson)
					{
						npcChatText = Lang.dialog(331);
					}
					else
					{
						npcChatText = Lang.dialog(210);
					}
					return;
				}
				if (helpText == 1050 && !NPC.downedBoss1 && player[myPlayer].statLifeMax < 200)
				{
					npcChatText = Lang.dialog(211);
					return;
				}
				if (helpText == 1051 && !NPC.downedBoss1 && player[myPlayer].statDefense <= 10)
				{
					npcChatText = Lang.dialog(212);
					return;
				}
				if (helpText == 1052 && !NPC.downedBoss1 && player[myPlayer].statLifeMax >= 200 && player[myPlayer].statDefense > 10)
				{
					npcChatText = Lang.dialog(WorldGen.crimson ? 404 : 213);
					return;
				}
				if (helpText == 1053 && NPC.downedBoss1 && !NPC.downedBoss2 && player[myPlayer].statLifeMax < 300)
				{
					npcChatText = Lang.dialog(214);
					return;
				}
				if (helpText == 1054 && NPC.downedBoss1 && !NPC.downedBoss2 && !WorldGen.crimson && player[myPlayer].statLifeMax >= 300)
				{
					npcChatText = Lang.dialog(215);
					return;
				}
				if (helpText == 1055 && NPC.downedBoss1 && !NPC.downedBoss2 && !WorldGen.crimson && player[myPlayer].statLifeMax >= 300)
				{
					npcChatText = Lang.dialog(216);
					return;
				}
				if (helpText == 1056 && NPC.downedBoss1 && NPC.downedBoss2 && !NPC.downedBoss3)
				{
					npcChatText = Lang.dialog(217);
					return;
				}
				if (helpText == 1057 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].statLifeMax < 400)
				{
					npcChatText = Lang.dialog(218);
					return;
				}
				if (helpText == 1058 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].statLifeMax >= 400)
				{
					npcChatText = Lang.dialog(219);
					return;
				}
				if (helpText == 1059 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].statLifeMax >= 400)
				{
					npcChatText = Lang.dialog(220);
					return;
				}
				if (helpText == 1060 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !hardMode && player[myPlayer].statLifeMax >= 400)
				{
					npcChatText = Lang.dialog(221);
					return;
				}
				if (helpText == 1061 && hardMode && !NPC.downedPlantBoss)
				{
					npcChatText = Lang.dialog(WorldGen.crimson ? 401 : 222);
					return;
				}
				if (helpText == 1062 && hardMode && !NPC.downedPlantBoss)
				{
					npcChatText = Lang.dialog(223);
					return;
				}
				if (helpText == 1140 && NPC.downedBoss1 && !NPC.downedBoss2 && WorldGen.crimson && player[myPlayer].statLifeMax >= 300)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1140");
					return;
				}
				if (helpText == 1141 && NPC.downedBoss1 && !NPC.downedBoss2 && WorldGen.crimson && player[myPlayer].statLifeMax >= 300)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1141");
					return;
				}
				if (helpText == 1142 && NPC.downedBoss2 && !hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1142");
					return;
				}
				if (helpText == 1143 && NPC.downedBoss2 && !NPC.downedQueenBee && player[myPlayer].statLifeMax >= 300)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1143");
					return;
				}
				if (helpText == 1144 && flag10)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1144");
					return;
				}
				if (helpText == 1145 && flag11 && !hardMode)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1145");
					return;
				}
				if (helpText == 1146 && hardMode && player[myPlayer].wingsLogic == 0 && !LocalPlayer.mount.Active && !NPC.downedPlantBoss)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1146");
					return;
				}
				if (helpText == 1147 && hardMode && WorldGen.SavedOreTiers.Adamantite == 111 && !NPC.downedMechBossAny)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1147");
					return;
				}
				if (helpText == 1148 && hardMode && WorldGen.SavedOreTiers.Adamantite == 223 && !NPC.downedMechBossAny)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1148");
					return;
				}
				if (helpText == 1149 && hardMode && NPC.downedMechBossAny && player[myPlayer].statLifeMax < 500)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1149");
					return;
				}
				if (helpText == 1150 && hardMode && NPC.downedMechBoss1 && NPC.downedMechBoss2 && NPC.downedMechBoss3 && !NPC.downedPlantBoss)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1150");
					return;
				}
				if (helpText == 1151 && hardMode && NPC.downedPlantBoss && !NPC.downedGolemBoss && flag12)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1151");
					return;
				}
				if (helpText == 1152 && hardMode && NPC.downedPlantBoss && !NPC.downedGolemBoss && !flag12)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1152");
					return;
				}
				if (helpText == 1153 && hardMode && flag13)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1153");
					return;
				}
				if (helpText == 1154 && hardMode && !NPC.downedFishron)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1154");
					return;
				}
				if (helpText == 1155 && hardMode && NPC.downedGolemBoss && !NPC.downedHalloweenTree && !NPC.downedHalloweenKing)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1155");
					return;
				}
				if (helpText == 1156 && hardMode && NPC.downedGolemBoss && !NPC.downedChristmasIceQueen && !NPC.downedChristmasTree && !NPC.downedChristmasSantank)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1156");
					return;
				}
				if (helpText == 1157 && hardMode && NPC.downedGolemBoss && NPC.AnyNPCs(437) && !NPC.downedMoonlord)
				{
					npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1157");
					return;
				}
				if (helpText == 1158 && hardMode && NPC.LunarApocalypseIsUp && !NPC.downedMoonlord)
				{
					break;
				}
				if (helpText > 1200)
				{
					helpText = 0;
				}
			}
			npcChatText = Language.GetTextValue("GuideHelpTextSpecific.Help_1158");
		}

		protected void GUIChatDrawInner()
		{
			if (player[myPlayer].talkNPC < 0 && player[myPlayer].sign == -1)
			{
				npcChatText = "";
				return;
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
			int num = (mouseTextColor * 2 + 255) / 3;
			Microsoft.Xna.Framework.Color textColor = new Microsoft.Xna.Framework.Color(num, num, num, num);
			bool flag = InGameUI.CurrentState is UIVirtualKeyboard && PlayerInput.UsingGamepad;
			_textDisplayCache.PrepareCache(npcChatText);
			string[] textLines = _textDisplayCache.TextLines;
			int amountOfLines = _textDisplayCache.AmountOfLines;
			bool flag2 = false;
			if (editSign)
			{
				textBlinkerCount++;
				if (textBlinkerCount >= 20)
				{
					if (textBlinkerState == 0)
					{
						textBlinkerState = 1;
					}
					else
					{
						textBlinkerState = 0;
					}
					textBlinkerCount = 0;
				}
				if (textBlinkerState == 1)
				{
					flag2 = true;
				}
				instance.DrawWindowsIMEPanel(new Vector2(screenWidth / 2, 90f), 0.5f);
			}
			amountOfLines++;
			spriteBatch.Draw(TextureAssets.ChatBack.Value, new Vector2(screenWidth / 2 - TextureAssets.ChatBack.Width() / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.ChatBack.Width(), (amountOfLines + 1) * 30), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			spriteBatch.Draw(TextureAssets.ChatBack.Value, new Vector2(screenWidth / 2 - TextureAssets.ChatBack.Width() / 2, 100 + (amountOfLines + 1) * 30), new Microsoft.Xna.Framework.Rectangle(0, TextureAssets.ChatBack.Height() - 30, TextureAssets.ChatBack.Width(), 30), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			for (int i = 0; i < amountOfLines; i++)
			{
				string text = textLines[i];
				if (text != null)
				{
					if (i == amountOfLines - 1 && flag2)
					{
						text += "|";
					}
					Utils.DrawBorderStringFourWay(spriteBatch, FontAssets.MouseText.Value, text, 170 + (screenWidth - 800) / 2, 120 + i * 30, textColor, Microsoft.Xna.Framework.Color.Black, Vector2.Zero);
				}
			}
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(screenWidth / 2 - TextureAssets.ChatBack.Width() / 2, 100, TextureAssets.ChatBack.Width(), (amountOfLines + 2) * 30);
			int num2 = 120 + amountOfLines * 30 + 30;
			num2 -= 235;
			UIVirtualKeyboard.ShouldHideText = !PlayerInput.UsingGamepad;
			if (!PlayerInput.UsingGamepad)
			{
				num2 = 9999;
			}
			UIVirtualKeyboard.OffsetDown = num2;
			if (npcChatCornerItem != 0)
			{
				Vector2 position = new Vector2(screenWidth / 2 + TextureAssets.ChatBack.Width() / 2, 100 + (amountOfLines + 1) * 30 + 30);
				position -= Vector2.One * 8f;
				Item item = new Item();
				item.netDefaults(npcChatCornerItem);
				float num3 = 1f;
				LoadItem(item.type);
				Texture2D value = TextureAssets.Item[item.type].Value;
				if (value.Width > 32 || value.Height > 32)
				{
					num3 = ((value.Width <= value.Height) ? (32f / (float)value.Height) : (32f / (float)value.Width));
				}
				spriteBatch.Draw(value, position, null, item.GetAlpha(Microsoft.Xna.Framework.Color.White), 0f, new Vector2(value.Width, value.Height), num3, SpriteEffects.None, 0f);
				if (item.color != default(Microsoft.Xna.Framework.Color))
				{
					spriteBatch.Draw(value, position, null, item.GetColor(item.color), 0f, new Vector2(value.Width, value.Height), num3, SpriteEffects.None, 0f);
				}
				if (new Microsoft.Xna.Framework.Rectangle((int)position.X - (int)((float)value.Width * num3), (int)position.Y - (int)((float)value.Height * num3), (int)((float)value.Width * num3), (int)((float)value.Height * num3)).Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)))
				{
					MouseText(item.Name, -11, 0);
				}
			}
			num = mouseTextColor;
			textColor = new Microsoft.Xna.Framework.Color(num, (int)((double)num / 1.1), num / 2, num);
			string focusText = "";
			string focusText2 = "";
			int num4 = player[myPlayer].statLifeMax2 - player[myPlayer].statLife;
			for (int j = 0; j < 22; j++)
			{
				int num5 = player[myPlayer].buffType[j];
				if (debuff[num5] && player[myPlayer].buffTime[j] > 60 && num5 != 28 && num5 != 34 && num5 != 87 && num5 != 89 && num5 != 21 && num5 != 86 && num5 != 199)
				{
					num4 += 100;
				}
			}
			if (NPC.downedGolemBoss)
			{
				num4 *= 200;
			}
			else if (NPC.downedPlantBoss)
			{
				num4 *= 150;
			}
			else if (NPC.downedMechBossAny)
			{
				num4 *= 100;
			}
			else if (hardMode)
			{
				num4 *= 60;
			}
			else if (NPC.downedBoss3 || NPC.downedQueenBee)
			{
				num4 *= 25;
			}
			else if (NPC.downedBoss2)
			{
				num4 *= 10;
			}
			else if (NPC.downedBoss1)
			{
				num4 *= 3;
			}
			if (expertMode)
			{
				num4 *= 2;
			}
			num4 = (int)((double)num4 * player[myPlayer].currentShoppingSettings.PriceAdjustment);
			string text2 = null;
			string text3 = null;
			if (player[myPlayer].sign > -1)
			{
				focusText = ((!editSign) ? Lang.inter[48].Value : Lang.inter[47].Value);
			}
			else if (npc[player[myPlayer].talkNPC].type == 20)
			{
				focusText = Lang.inter[28].Value;
				focusText2 = Lang.inter[49].Value;
			}
			else if (NPCID.Sets.IsTownPet[npc[player[myPlayer].talkNPC].type])
			{
				focusText = Language.GetTextValue("UI.PetTheAnimal");
			}
			else if (npc[player[myPlayer].talkNPC].type == 207)
			{
				focusText = Lang.inter[28].Value;
				if (hardMode)
				{
					focusText2 = Lang.inter[107].Value;
				}
			}
			else if (npc[player[myPlayer].talkNPC].type == 453)
			{
				focusText = Lang.inter[28].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 550)
			{
				focusText = Lang.inter[28].Value;
				focusText2 = Language.GetTextValue("UI.BartenderHelp");
			}
			else if (npc[player[myPlayer].talkNPC].type == 588)
			{
				focusText = Lang.inter[28].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 633)
			{
				focusText = Lang.inter[28].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 353)
			{
				focusText = Lang.inter[28].Value;
				focusText2 = Language.GetTextValue("GameUI.HairStyle");
			}
			else if (npc[player[myPlayer].talkNPC].type == 368)
			{
				focusText = Lang.inter[28].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 369)
			{
				focusText = Lang.inter[64].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 208)
			{
				focusText = Lang.inter[28].Value;
				if (TOWMusicUnlocked)
				{
					focusText2 = Language.GetTextValue("GameUI.Music");
				}
			}
			else if (npc[player[myPlayer].talkNPC].type == 17 || npc[player[myPlayer].talkNPC].type == 19 || npc[player[myPlayer].talkNPC].type == 38 || npc[player[myPlayer].talkNPC].type == 54 || npc[player[myPlayer].talkNPC].type == 107 || npc[player[myPlayer].talkNPC].type == 108 || npc[player[myPlayer].talkNPC].type == 124 || npc[player[myPlayer].talkNPC].type == 142 || npc[player[myPlayer].talkNPC].type == 160 || npc[player[myPlayer].talkNPC].type == 178 || npc[player[myPlayer].talkNPC].type == 207 || npc[player[myPlayer].talkNPC].type == 209 || npc[player[myPlayer].talkNPC].type == 227 || npc[player[myPlayer].talkNPC].type == 228 || npc[player[myPlayer].talkNPC].type == 229)
			{
				focusText = Lang.inter[28].Value;
				if (npc[player[myPlayer].talkNPC].type == 107)
				{
					focusText2 = Lang.inter[19].Value;
				}
			}
			else if (npc[player[myPlayer].talkNPC].type == 37)
			{
				if (!dayTime)
				{
					focusText = Lang.inter[50].Value;
				}
			}
			else if (npc[player[myPlayer].talkNPC].type == 22)
			{
				focusText = Lang.inter[51].Value;
				focusText2 = Lang.inter[25].Value;
			}
			else if (npc[player[myPlayer].talkNPC].type == 441)
			{
				if (player[myPlayer].taxMoney <= 0)
				{
					focusText = Lang.inter[89].Value;
				}
				else
				{
					string text4 = "";
					int num6 = 0;
					int num7 = 0;
					int num8 = 0;
					int num9 = 0;
					int taxMoney = player[myPlayer].taxMoney;
					taxMoney = (int)((double)taxMoney / player[myPlayer].currentShoppingSettings.PriceAdjustment);
					if (taxMoney < 0)
					{
						taxMoney = 0;
					}
					num4 = taxMoney;
					if (taxMoney >= 1000000)
					{
						num6 = taxMoney / 1000000;
						taxMoney -= num6 * 1000000;
					}
					if (taxMoney >= 10000)
					{
						num7 = taxMoney / 10000;
						taxMoney -= num7 * 10000;
					}
					if (taxMoney >= 100)
					{
						num8 = taxMoney / 100;
						taxMoney -= num8 * 100;
					}
					if (taxMoney >= 1)
					{
						num9 = taxMoney;
					}
					if (num6 > 0)
					{
						text4 = text4 + num6 + " " + Lang.inter[15].Value + " ";
					}
					if (num7 > 0)
					{
						text4 = text4 + num7 + " " + Lang.inter[16].Value + " ";
					}
					if (num8 > 0)
					{
						text4 = text4 + num8 + " " + Lang.inter[17].Value + " ";
					}
					if (num9 > 0)
					{
						text4 = text4 + num9 + " " + Lang.inter[18].Value + " ";
					}
					float num10 = (float)(int)mouseTextColor / 255f;
					if (num6 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((byte)(220f * num10), (byte)(220f * num10), (byte)(198f * num10), mouseTextColor);
					}
					else if (num7 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((byte)(224f * num10), (byte)(201f * num10), (byte)(92f * num10), mouseTextColor);
					}
					else if (num8 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((byte)(181f * num10), (byte)(192f * num10), (byte)(193f * num10), mouseTextColor);
					}
					else if (num9 > 0)
					{
						textColor = new Microsoft.Xna.Framework.Color((byte)(246f * num10), (byte)(138f * num10), (byte)(96f * num10), mouseTextColor);
					}
					if (text4 == "")
					{
						focusText = Lang.inter[89].Value;
					}
					else
					{
						text4 = text4.Substring(0, text4.Length - 1);
						focusText = Lang.inter[89].Value + " (" + text4 + ")";
					}
					focusText = Lang.inter[89].Value;
					text3 = focusText;
					text2 = "";
					for (int k = 0; k < focusText.Length; k++)
					{
						text2 += " ";
					}
					focusText = focusText + text2 + "        ";
				}
			}
			else if (npc[player[myPlayer].talkNPC].type == 18)
			{
				string text5 = "";
				int num11 = 0;
				int num12 = 0;
				int num13 = 0;
				int num14 = 0;
				int num15 = num4;
				if (num15 > 0 && num15 < 1)
				{
					num15 = 1;
				}
				if (num15 < 0)
				{
					num15 = 0;
				}
				num4 = num15;
				if (num15 >= 1000000)
				{
					num11 = num15 / 1000000;
					num15 -= num11 * 1000000;
				}
				if (num15 >= 10000)
				{
					num12 = num15 / 10000;
					num15 -= num12 * 10000;
				}
				if (num15 >= 100)
				{
					num13 = num15 / 100;
					num15 -= num13 * 100;
				}
				if (num15 >= 1)
				{
					num14 = num15;
				}
				if (num11 > 0)
				{
					text5 = text5 + num11 + " " + Lang.inter[15].Value + " ";
				}
				if (num12 > 0)
				{
					text5 = text5 + num12 + " " + Lang.inter[16].Value + " ";
				}
				if (num13 > 0)
				{
					text5 = text5 + num13 + " " + Lang.inter[17].Value + " ";
				}
				if (num14 > 0)
				{
					text5 = text5 + num14 + " " + Lang.inter[18].Value + " ";
				}
				float num16 = (float)(int)mouseTextColor / 255f;
				if (num11 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((byte)(220f * num16), (byte)(220f * num16), (byte)(198f * num16), mouseTextColor);
				}
				else if (num12 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((byte)(224f * num16), (byte)(201f * num16), (byte)(92f * num16), mouseTextColor);
				}
				else if (num13 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((byte)(181f * num16), (byte)(192f * num16), (byte)(193f * num16), mouseTextColor);
				}
				else if (num14 > 0)
				{
					textColor = new Microsoft.Xna.Framework.Color((byte)(246f * num16), (byte)(138f * num16), (byte)(96f * num16), mouseTextColor);
				}
				if (text5 == "")
				{
					focusText = Lang.inter[54].Value;
				}
				else
				{
					text5 = text5.Substring(0, text5.Length - 1);
					focusText = Lang.inter[54].Value + " (" + text5 + ")";
				}
			}
			if (!flag)
			{
				DrawNPCChatButtons(num, textColor, amountOfLines, focusText, focusText2);
				if (text2 != null)
				{
					float num17 = 130 + amountOfLines * 30;
					float num18 = 180 + (screenWidth - 800) / 2;
					num18 += ChatManager.GetStringSize(FontAssets.MouseText.Value, text3, new Vector2(0.9f)).X - 20f;
					int taxMoney2 = player[myPlayer].taxMoney;
					taxMoney2 = (int)((double)taxMoney2 / player[myPlayer].currentShoppingSettings.PriceAdjustment);
					ItemSlot.DrawMoney(spriteBatch, "", num18, num17 - 40f, Utils.CoinsSplit(taxMoney2), horizontal: true);
				}
			}
			if (PlayerInput.IgnoreMouseInterface)
			{
				return;
			}
			if (rectangle.Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)))
			{
				player[myPlayer].mouseInterface = true;
			}
			if (!mouseLeft || !mouseLeftRelease || !rectangle.Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)))
			{
				return;
			}
			mouseLeftRelease = false;
			player[myPlayer].releaseUseItem = false;
			player[myPlayer].mouseInterface = true;
			if (npcChatFocus1)
			{
				CloseNPCChatOrSign();
			}
			else if (npcChatFocus2)
			{
				if (player[myPlayer].sign != -1)
				{
					if (editSign)
					{
						SubmitSignText();
					}
					else
					{
						IngameFancyUI.OpenVirtualKeyboard(1);
					}
				}
				else if (NPCID.Sets.IsTownPet[npc[player[myPlayer].talkNPC].type])
				{
					player[myPlayer].PetAnimal(player[myPlayer].talkNPC);
				}
				else if (npc[player[myPlayer].talkNPC].type == 369)
				{
					npcChatCornerItem = 0;
					SoundEngine.PlaySound(12);
					bool flag3 = false;
					if (!anglerQuestFinished && !anglerWhoFinishedToday.Contains(player[myPlayer].name))
					{
						int num19 = player[myPlayer].FindItem(anglerQuestItemNetIDs[anglerQuest]);
						if (num19 != -1)
						{
							player[myPlayer].inventory[num19].stack--;
							if (player[myPlayer].inventory[num19].stack <= 0)
							{
								player[myPlayer].inventory[num19] = new Item();
							}
							flag3 = true;
							SoundEngine.PlaySound(24);
							player[myPlayer].anglerQuestsFinished++;
							player[myPlayer].GetAnglerReward();
						}
					}
					npcChatText = Lang.AnglerQuestChat(flag3);
					if (flag3)
					{
						anglerQuestFinished = true;
						if (netMode == 1)
						{
							NetMessage.SendData(75);
						}
						else
						{
							anglerWhoFinishedToday.Add(player[myPlayer].name);
						}
						AchievementsHelper.HandleAnglerService();
					}
				}
				else if (npc[player[myPlayer].talkNPC].type == 17)
				{
					OpenShop(1);
				}
				else if (npc[player[myPlayer].talkNPC].type == 19)
				{
					OpenShop(2);
				}
				else if (npc[player[myPlayer].talkNPC].type == 124)
				{
					OpenShop(8);
				}
				else if (npc[player[myPlayer].talkNPC].type == 142)
				{
					OpenShop(9);
				}
				else if (npc[player[myPlayer].talkNPC].type == 37)
				{
					if (netMode == 0)
					{
						NPC.SpawnSkeletron();
					}
					else
					{
						NetMessage.SendData(51, -1, -1, null, myPlayer, 1f);
					}
					npcChatText = "";
				}
				else if (npc[player[myPlayer].talkNPC].type == 20)
				{
					OpenShop(3);
				}
				else if (npc[player[myPlayer].talkNPC].type == 38)
				{
					OpenShop(4);
				}
				else if (npc[player[myPlayer].talkNPC].type == 54)
				{
					OpenShop(5);
				}
				else if (npc[player[myPlayer].talkNPC].type == 107)
				{
					OpenShop(6);
				}
				else if (npc[player[myPlayer].talkNPC].type == 108)
				{
					OpenShop(7);
				}
				else if (npc[player[myPlayer].talkNPC].type == 160)
				{
					OpenShop(10);
				}
				else if (npc[player[myPlayer].talkNPC].type == 178)
				{
					OpenShop(11);
				}
				else if (npc[player[myPlayer].talkNPC].type == 207)
				{
					OpenShop(12);
				}
				else if (npc[player[myPlayer].talkNPC].type == 208)
				{
					OpenShop(13);
				}
				else if (npc[player[myPlayer].talkNPC].type == 209)
				{
					OpenShop(14);
				}
				else if (npc[player[myPlayer].talkNPC].type == 227)
				{
					OpenShop(15);
				}
				else if (npc[player[myPlayer].talkNPC].type == 228)
				{
					OpenShop(16);
				}
				else if (npc[player[myPlayer].talkNPC].type == 229)
				{
					OpenShop(17);
				}
				else if (npc[player[myPlayer].talkNPC].type == 353)
				{
					OpenShop(18);
				}
				else if (npc[player[myPlayer].talkNPC].type == 368)
				{
					OpenShop(19);
				}
				else if (npc[player[myPlayer].talkNPC].type == 453)
				{
					OpenShop(20);
				}
				else if (npc[player[myPlayer].talkNPC].type == 550)
				{
					OpenShop(21);
				}
				else if (npc[player[myPlayer].talkNPC].type == 588)
				{
					OpenShop(22);
				}
				else if (npc[player[myPlayer].talkNPC].type == 633)
				{
					OpenShop(23);
				}
				else if (npc[player[myPlayer].talkNPC].type == 22)
				{
					SoundEngine.PlaySound(12);
					HelpText();
				}
				else if (npc[player[myPlayer].talkNPC].type == 441)
				{
					if (player[myPlayer].taxMoney > 0)
					{
						int taxMoney3 = player[myPlayer].taxMoney;
						taxMoney3 = (int)((double)taxMoney3 / player[myPlayer].currentShoppingSettings.PriceAdjustment);
						while (taxMoney3 > 0)
						{
							if (taxMoney3 > 1000000)
							{
								int num20 = taxMoney3 / 1000000;
								taxMoney3 -= 1000000 * num20;
								int number = Item.NewItem((int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 74, num20);
								if (netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, null, number, 1f);
								}
								continue;
							}
							if (taxMoney3 > 10000)
							{
								int num21 = taxMoney3 / 10000;
								taxMoney3 -= 10000 * num21;
								int number2 = Item.NewItem((int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 73, num21);
								if (netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, null, number2, 1f);
								}
								continue;
							}
							if (taxMoney3 > 100)
							{
								int num22 = taxMoney3 / 100;
								taxMoney3 -= 100 * num22;
								int number3 = Item.NewItem((int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 72, num22);
								if (netMode == 1)
								{
									NetMessage.SendData(21, -1, -1, null, number3, 1f);
								}
								continue;
							}
							int num23 = taxMoney3;
							if (num23 < 1)
							{
								num23 = 1;
							}
							taxMoney3 -= num23;
							int number4 = Item.NewItem((int)player[myPlayer].position.X, (int)player[myPlayer].position.Y, player[myPlayer].width, player[myPlayer].height, 71, num23);
							if (netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number4, 1f);
							}
						}
						npcChatText = Lang.dialog(rand.Next(380, 382));
						player[myPlayer].taxMoney = 0;
					}
					else
					{
						npcChatText = Lang.dialog(rand.Next(390, 401));
					}
				}
				else
				{
					if (npc[player[myPlayer].talkNPC].type != 18)
					{
						return;
					}
					SoundEngine.PlaySound(12);
					if (num4 > 0)
					{
						if (player[myPlayer].BuyItem(num4))
						{
							AchievementsHelper.HandleNurseService(num4);
							SoundEngine.PlaySound(SoundID.Item4);
							player[myPlayer].HealEffect(player[myPlayer].statLifeMax2 - player[myPlayer].statLife);
							if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.25)
							{
								npcChatText = Lang.dialog(227);
							}
							else if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.5)
							{
								npcChatText = Lang.dialog(228);
							}
							else if ((double)player[myPlayer].statLife < (double)player[myPlayer].statLifeMax2 * 0.75)
							{
								npcChatText = Lang.dialog(229);
							}
							else
							{
								npcChatText = Lang.dialog(230);
							}
							player[myPlayer].statLife = player[myPlayer].statLifeMax2;
							for (int l = 0; l < 22; l++)
							{
								int num24 = player[myPlayer].buffType[l];
								if (debuff[num24] && player[myPlayer].buffTime[l] > 0 && num24 != 28 && num24 != 34 && num24 != 87 && num24 != 89 && num24 != 21 && num24 != 86 && num24 != 199)
								{
									player[myPlayer].DelBuff(l);
									l = -1;
								}
							}
						}
						else
						{
							int num25 = rand.Next(3);
							if (num25 == 0)
							{
								npcChatText = Lang.dialog(52);
							}
							if (num25 == 1)
							{
								npcChatText = Lang.dialog(53);
							}
							if (num25 == 2)
							{
								npcChatText = Lang.dialog(54);
							}
						}
					}
					else
					{
						int num26 = rand.Next(3);
						if (!ChildSafety.Disabled)
						{
							num26 = rand.Next(1, 3);
						}
						switch (num26)
						{
						case 0:
							npcChatText = Lang.dialog(55);
							break;
						case 1:
							npcChatText = Lang.dialog(56);
							break;
						case 2:
							npcChatText = Lang.dialog(57);
							break;
						}
					}
				}
			}
			else if (npcChatFocus4)
			{
				npcChatCornerItem = 0;
				SoundEngine.PlaySound(12);
				npcChatText = player[myPlayer].currentShoppingSettings.HappinessReport;
			}
			else
			{
				if (!npcChatFocus3 || player[myPlayer].talkNPC < 0)
				{
					return;
				}
				if (npc[player[myPlayer].talkNPC].type == 20)
				{
					SoundEngine.PlaySound(12);
					npcChatText = Lang.GetDryadWorldStatusDialog();
				}
				if (npc[player[myPlayer].talkNPC].type == 208)
				{
					SoundEngine.PlaySound(12);
					int num27 = rand.Next(1, 4);
					npcChatText = Language.GetTextValue("PartyGirlSpecialText.Music" + num27);
					swapMusic = !swapMusic;
				}
				else if (npc[player[myPlayer].talkNPC].type == 22)
				{
					playerInventory = true;
					npcChatText = "";
					SoundEngine.PlaySound(12);
					InGuideCraftMenu = true;
					UILinkPointNavigator.GoToDefaultPage();
				}
				else if (npc[player[myPlayer].talkNPC].type == 107)
				{
					playerInventory = true;
					npcChatText = "";
					SoundEngine.PlaySound(12);
					InReforgeMenu = true;
					UILinkPointNavigator.GoToDefaultPage();
				}
				else if (npc[player[myPlayer].talkNPC].type == 353)
				{
					OpenHairWindow();
				}
				else if (npc[player[myPlayer].talkNPC].type == 207)
				{
					npcChatCornerItem = 0;
					SoundEngine.PlaySound(12);
					bool gotDye = false;
					int num28 = player[myPlayer].FindItem(ItemID.Sets.ExoticPlantsForDyeTrade);
					if (num28 != -1)
					{
						player[myPlayer].inventory[num28].stack--;
						if (player[myPlayer].inventory[num28].stack <= 0)
						{
							player[myPlayer].inventory[num28] = new Item();
						}
						gotDye = true;
						SoundEngine.PlaySound(24);
						player[myPlayer].GetDyeTraderReward();
					}
					npcChatText = Lang.DyeTraderQuestChat(gotDye);
				}
				else if (npc[player[myPlayer].talkNPC].type == 550)
				{
					SoundEngine.PlaySound(12);
					HelpText();
					npcChatText = Lang.BartenderHelpText(npc[player[myPlayer].talkNPC]);
				}
			}
		}

		private void OpenShop(int shopIndex)
		{
			playerInventory = true;
			stackSplit = 9999;
			npcChatText = "";
			SetNPCShopIndex(shopIndex);
			shop[npcShop].SetupShop(npcShop);
			SoundEngine.PlaySound(12);
		}

		public static void SetNPCShopIndex(int index)
		{
			npcShop = index;
		}

		private static void DrawNPCChatButtons(int superColor, Microsoft.Xna.Framework.Color chatColor, int numLines, string focusText, string focusText3)
		{
			float y = 130 + numLines * 30;
			int num = 180 + (screenWidth - 800) / 2;
			Vector2 vec = new Vector2(mouseX, mouseY);
			Player player = Main.player[myPlayer];
			Vector2 vector = new Vector2(num, y);
			string text = focusText;
			DynamicSpriteFont value = FontAssets.MouseText.Value;
			Vector2 vector2 = vector;
			Vector2 vector3 = new Vector2(0.9f);
			Vector2 stringSize = ChatManager.GetStringSize(value, text, vector3);
			Microsoft.Xna.Framework.Color baseColor = chatColor;
			Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
			Vector2 value2 = new Vector2(1f);
			Microsoft.Xna.Framework.Color brown = Microsoft.Xna.Framework.Color.Brown;
			float num2 = 1.2f;
			if (stringSize.X > 260f)
			{
				value2.X *= 260f / stringSize.X;
			}
			if (vec.Between(vector2, vector2 + stringSize * vector3 * value2.X) && !PlayerInput.IgnoreMouseInterface)
			{
				player.mouseInterface = true;
				player.releaseUseItem = false;
				vector3 *= num2;
				if (!npcChatFocus2)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus2 = true;
			}
			else
			{
				if (npcChatFocus2)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus2 = false;
			}
			ChatManager.DrawColorCodedStringShadow(baseColor: (!npcChatFocus2) ? Microsoft.Xna.Framework.Color.Black : brown, spriteBatch: spriteBatch, font: value, text: text, position: vector2 + stringSize * value2 * 0.5f, rotation: 0f, origin: stringSize * 0.5f, baseScale: vector3 * value2);
			ChatManager.DrawColorCodedString(spriteBatch, value, text, vector2 + stringSize * value2 * 0.5f, baseColor, 0f, stringSize * 0.5f, vector3 * value2);
			if (text.Length > 0)
			{
				UILinkPointNavigator.SetPosition(2500, vector2 + stringSize * 0.5f);
				UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsLeft = true;
			}
			Vector2 vector4 = new Vector2((float)num + stringSize.X * value2.X + 30f, y);
			text = Lang.inter[52].Value;
			value = FontAssets.MouseText.Value;
			vector2 = vector4;
			vector3 = new Vector2(0.9f);
			stringSize = ChatManager.GetStringSize(value, text, vector3);
			baseColor = new Microsoft.Xna.Framework.Color(superColor, (int)((double)superColor / 1.1), superColor / 2, superColor);
			value2 = new Vector2(1f);
			if (vec.Between(vector2, vector2 + stringSize * vector3 * value2.X) && !PlayerInput.IgnoreMouseInterface)
			{
				player.mouseInterface = true;
				player.releaseUseItem = false;
				vector3 *= num2;
				if (!npcChatFocus1)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus1 = true;
			}
			else
			{
				if (npcChatFocus1)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus1 = false;
			}
			ChatManager.DrawColorCodedStringShadow(baseColor: (!npcChatFocus1) ? Microsoft.Xna.Framework.Color.Black : brown, spriteBatch: spriteBatch, font: value, text: text, position: vector2 + stringSize * value2 * 0.5f, rotation: 0f, origin: stringSize * 0.5f, baseScale: vector3 * value2);
			ChatManager.DrawColorCodedString(spriteBatch, value, text, vector2 + stringSize * value2 * 0.5f, baseColor, 0f, stringSize * 0.5f, vector3 * value2);
			if (text.Length > 0)
			{
				UILinkPointNavigator.SetPosition(2501, vector2 + stringSize * 0.5f);
				UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsMiddle = true;
			}
			if (string.IsNullOrWhiteSpace(focusText3))
			{
				npcChatFocus3 = false;
				UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight = false;
			}
			else
			{
				Vector2 vector5 = new Vector2(vector4.X + stringSize.X * value2.X + 30f, y);
				text = focusText3;
				value = FontAssets.MouseText.Value;
				vector2 = vector5;
				vector3 = new Vector2(0.9f);
				stringSize = ChatManager.GetStringSize(value, text, vector3);
				baseColor = chatColor;
				value2 = new Vector2(1f);
				vector4.X = vector5.X;
				if (vec.Between(vector2, vector2 + stringSize * vector3 * value2.X) && !PlayerInput.IgnoreMouseInterface)
				{
					player.mouseInterface = true;
					player.releaseUseItem = false;
					vector3 *= num2;
					if (!npcChatFocus3)
					{
						SoundEngine.PlaySound(12);
					}
					npcChatFocus3 = true;
				}
				else
				{
					if (npcChatFocus3)
					{
						SoundEngine.PlaySound(12);
					}
					npcChatFocus3 = false;
				}
				ChatManager.DrawColorCodedStringShadow(baseColor: (!npcChatFocus3) ? Microsoft.Xna.Framework.Color.Black : brown, spriteBatch: spriteBatch, font: value, text: text, position: vector2 + stringSize * value2 * 0.5f, rotation: 0f, origin: stringSize * 0.5f, baseScale: vector3 * value2);
				ChatManager.DrawColorCodedString(spriteBatch, value, text, vector2 + stringSize * value2 * 0.5f, baseColor, 0f, stringSize * 0.5f, vector3 * value2);
				UILinkPointNavigator.SetPosition(2502, vector2 + stringSize * 0.5f);
				UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight = true;
			}
			if (Main.player[myPlayer].currentShoppingSettings.HappinessReport == "")
			{
				npcChatFocus4 = false;
				UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight2 = false;
				return;
			}
			string textValue = Language.GetTextValue("UI.NPCCheckHappiness");
			Vector2 vector6 = new Vector2(vector4.X + stringSize.X * value2.X + 30f, y);
			text = textValue;
			value = FontAssets.MouseText.Value;
			vector2 = vector6;
			vector3 = new Vector2(0.9f);
			stringSize = ChatManager.GetStringSize(value, text, vector3);
			baseColor = new Microsoft.Xna.Framework.Color(superColor, (int)((double)superColor / 1.1), superColor / 2, superColor);
			value2 = new Vector2(1f);
			if (vec.Between(vector2, vector2 + stringSize * vector3 * value2.X) && !PlayerInput.IgnoreMouseInterface)
			{
				player.mouseInterface = true;
				player.releaseUseItem = false;
				vector3 *= num2;
				if (!npcChatFocus4)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus4 = true;
			}
			else
			{
				if (npcChatFocus4)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus4 = false;
			}
			ChatManager.DrawColorCodedStringShadow(baseColor: (!npcChatFocus4) ? Microsoft.Xna.Framework.Color.Black : brown, spriteBatch: spriteBatch, font: value, text: text, position: vector2 + stringSize * value2 * 0.5f, rotation: 0f, origin: stringSize * 0.5f, baseScale: vector3 * value2);
			ChatManager.DrawColorCodedString(spriteBatch, value, text, vector2 + stringSize * value2 * 0.5f, baseColor, 0f, stringSize * 0.5f, vector3 * value2);
			UILinkPointNavigator.SetPosition(2503, vector2 + stringSize * 0.5f);
			UILinkPointNavigator.Shortcuts.NPCCHAT_ButtonsRight2 = true;
		}

		public static void CloseNPCChatOrSign()
		{
			player[myPlayer].sign = -1;
			editSign = false;
			player[myPlayer].SetTalkNPC(-1);
			npcChatCornerItem = 0;
			npcChatText = "";
			SoundEngine.PlaySound(11);
			player[myPlayer].releaseMount = false;
		}

		public static void SubmitSignText()
		{
			SoundEngine.PlaySound(12);
			int num = player[myPlayer].sign;
			Sign.TextSign(num, npcChatText);
			editSign = false;
			if (netMode == 1)
			{
				NetMessage.SendData(47, -1, -1, null, num);
			}
		}

		private int NPCBannerSorter(int npcIndex1, int npcIndex2)
		{
			return -npc[npcIndex1].housingCategory.CompareTo(npc[npcIndex2].housingCategory);
		}

		protected void DrawNPCHousesInWorld()
		{
			_npcsWithBannersToDraw.Clear();
			for (int i = 0; i < 200; i++)
			{
				if (npc[i].active && npc[i].townNPC && !npc[i].homeless && npc[i].homeTileX > 0 && npc[i].homeTileY > 0 && npc[i].type != 37)
				{
					_npcsWithBannersToDraw.Add(i);
				}
			}
			_npcsWithBannersToDraw.Sort(NPCBannerSorter);
			for (int j = 0; j < _npcsWithBannersToDraw.Count; j++)
			{
				int num = _npcsWithBannersToDraw[j];
				NPC nPC = npc[num];
				if (!nPC.active || !nPC.townNPC || nPC.homeless || nPC.homeTileX <= 0 || nPC.homeTileY <= 0 || nPC.type == 37)
				{
					continue;
				}
				int num2 = 0;
				int housingCategory = nPC.housingCategory;
				int homeTileX = nPC.homeTileX;
				int num3 = nPC.homeTileY - 1;
				WorldGen.TownManager.AddOccupantsToList(homeTileX, num3 + 1, _occupantsListToDrawNPCHouses);
				if (_occupantsListToDrawNPCHouses.Contains(nPC.type))
				{
					num2 = 1;
				}
				int num4 = 0;
				for (int num5 = _npcsWithBannersToDraw.Count - 1; num5 > j; num5--)
				{
					int num6 = _npcsWithBannersToDraw[num5];
					if (npc[num6].homeTileX == homeTileX && npc[num6].homeTileY == num3 + 1)
					{
						num4++;
					}
				}
				int num7 = num4 * 26;
				if (tile[homeTileX, num3] == null)
				{
					continue;
				}
				bool flag = false;
				while (!tile[homeTileX, num3].active() || !tileSolid[tile[homeTileX, num3].type])
				{
					num3--;
					if (num3 < 10)
					{
						break;
					}
					if (tile[homeTileX, num3] == null)
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					continue;
				}
				int num8 = 8;
				int num9 = 18;
				if (tile[homeTileX, num3].type == 19)
				{
					num9 -= 8;
				}
				num3++;
				int num10 = 0;
				float num11 = num3 * 16;
				num11 += (float)num7;
				SpriteEffects effects = SpriteEffects.None;
				Texture2D value = TextureAssets.HouseBanner.Value;
				Microsoft.Xna.Framework.Rectangle value2 = value.Frame(2, 2);
				if (num2 > 0)
				{
					value2.X += value2.Width * num2;
				}
				if (housingCategory > 0)
				{
					value2.Y += value2.Height * housingCategory;
				}
				if (player[myPlayer].gravDir == -1f)
				{
					num11 -= screenPosition.Y;
					num11 = screenPosition.Y + (float)screenHeight - num11;
					num11 -= (float)value2.Height;
					effects = SpriteEffects.FlipVertically;
					num10 = 4;
				}
				spriteBatch.Draw(value, new Vector2(homeTileX * 16 - (int)screenPosition.X + num8, num11 - (float)(int)screenPosition.Y + (float)num9 + (float)num10), value2, Lighting.GetColor(homeTileX, num3), 0f, new Vector2(value2.Width / 2, value2.Height / 2), 1f, effects, 0f);
				ITownNPCProfile profile;
				int num12 = ((!TownNPCProfiles.Instance.GetProfile(nPC.type, out profile)) ? NPC.TypeToDefaultHeadIndex(nPC.type) : profile.GetHeadTextureIndex(nPC));
				float scale = 1f;
				float num13 = 0f;
				num13 = ((TextureAssets.NpcHead[num12].Width() <= TextureAssets.NpcHead[num12].Height()) ? ((float)TextureAssets.NpcHead[num12].Height()) : ((float)TextureAssets.NpcHead[num12].Width()));
				if (num13 > 24f)
				{
					scale = 24f / num13;
				}
				spriteBatch.Draw(TextureAssets.NpcHead[num12].Value, new Vector2(homeTileX * 16 - (int)screenPosition.X + num8, num11 - (float)(int)screenPosition.Y + (float)num9 + 2f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.NpcHead[num12].Width(), TextureAssets.NpcHead[num12].Height()), Lighting.GetColor(homeTileX, num3), 0f, new Vector2(TextureAssets.NpcHead[num12].Width() / 2, TextureAssets.NpcHead[num12].Height() / 2), scale, effects, 0f);
				homeTileX = homeTileX * 16 - (int)screenPosition.X + num8 - value2.Width / 2;
				num3 = (int)num11 - (int)screenPosition.Y + 4;
				int num14 = -8;
				if (mouseX >= homeTileX && mouseX <= homeTileX + value2.Width && mouseY >= num3 && mouseY <= num3 + value2.Height + num14)
				{
					string nPCHouseBannerText = Lang.GetNPCHouseBannerText(nPC, num2);
					MouseText(nPCHouseBannerText, 0, 0);
					if (mouseRightRelease && mouseRight)
					{
						mouseRightRelease = false;
						WorldGen.kickOut(num);
						SoundEngine.PlaySound(12);
					}
				}
			}
		}

		public void DrawWindowsIMEPanel(Vector2 position, float xAnchor = 0f)
		{
			/*if (!Platform.Get<IImeService>().IsCandidateListVisible)
			{
				return;
			}
			List<string> list = new List<string>();
			for (uint num = 0u; num < Platform.Get<IImeService>().CandidateCount; num++)
			{
				string candidate = Platform.Get<IImeService>().GetCandidate(num);
				list.Add(candidate);
			}
			if (list.Count == 0)
			{
				return;
			}
			uint selectedCandidate = Platform.Get<IImeService>().SelectedCandidate;
			DynamicSpriteFont value = FontAssets.MouseText.Value;
			float num2 = 0.85f;
			float num3 = 14f;
			float num4 = 0f;
			int num5 = 32;
			num4 += num3;
			string text = "{0,2}: {1}";
			string str = "  ";
			for (int i = 0; i < list.Count; i++)
			{
				int num6 = i + 1;
				string text2 = text;
				if (i < list.Count - 1)
				{
					text2 += str;
				}
				num4 += value.MeasureString(string.Format(text2, num6, list[i])).X * num2;
				num4 += num3;
			}
			Vector2 value2 = new Vector2(num4 * (0f - xAnchor), 0f);
			Utils.DrawSettings2Panel(spriteBatch, position + value2 + new Vector2(0f, -num5), num4, new Microsoft.Xna.Framework.Color(63, 65, 151, 255) * 0.785f);
			Vector2 pos = position + new Vector2(10f, -num5 / 2) + value2;
			for (uint num7 = 0u; num7 < list.Count; num7++)
			{
				Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.Gray;
				if (num7 == selectedCandidate)
				{
					color = Microsoft.Xna.Framework.Color.White;
				}
				uint num8 = num7 + 1;
				string text3 = text;
				if (num7 < list.Count - 1)
				{
					text3 += str;
				}
				string text4 = string.Format(text3, num8, list[(int)num7]);
				Vector2 vector = value.MeasureString(text4) * num2;
				Utils.DrawBorderString(spriteBatch, text4, pos, color, num2, 0f, 0.4f);
				pos.X += vector.X + num3;
			}*/
		}

		public void HandleIME()
		{
			if (_imeToggle != PlayerInput.WritingText)
			{
				_imeToggle = PlayerInput.WritingText;
				if (_imeToggle)
				{
					//Platform.Get<IImeService>().Enable();
				}
				else
				{
					//Platform.Get<IImeService>().Disable();
				}
			}
		}

		protected void DrawPlayerChat()
		{
			TextSnippet[] array = null;
			if (drawingPlayerChat)
			{
				PlayerInput.WritingText = true;
			}
			HandleIME();
			if (drawingPlayerChat)
			{
				textBlinkerCount++;
				if (textBlinkerCount >= 20)
				{
					if (textBlinkerState == 0)
					{
						textBlinkerState = 1;
					}
					else
					{
						textBlinkerState = 0;
					}
					textBlinkerCount = 0;
				}
				string text = chatText;
				if (screenWidth > 800)
				{
					int num = screenWidth - 300;
					int num2 = 78;
					spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2(num2, screenHeight - 36), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.TextBack.Width() - 100, TextureAssets.TextBack.Height()), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					num -= 400;
					num2 += 400;
					while (num > 0)
					{
						if (num > 300)
						{
							spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2(num2, screenHeight - 36), new Microsoft.Xna.Framework.Rectangle(100, 0, TextureAssets.TextBack.Width() - 200, TextureAssets.TextBack.Height()), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							num -= 300;
							num2 += 300;
						}
						else
						{
							spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2(num2, screenHeight - 36), new Microsoft.Xna.Framework.Rectangle(TextureAssets.TextBack.Width() - num, 0, TextureAssets.TextBack.Width() - (TextureAssets.TextBack.Width() - num), TextureAssets.TextBack.Height()), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							num = 0;
						}
					}
				}
				else
				{
					spriteBatch.Draw(TextureAssets.TextBack.Value, new Vector2(78f, screenHeight - 36), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.TextBack.Width(), TextureAssets.TextBack.Height()), new Microsoft.Xna.Framework.Color(100, 100, 100, 100), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				int hoveredSnippet = -1;
				List<TextSnippet> list = ChatManager.ParseMessage(text, Microsoft.Xna.Framework.Color.White);
				string compositionString = "nmsl";//Platform.Get<IImeService>().CompositionString;
				if (compositionString != null && compositionString.Length > 0)
				{
					list.Add(new TextSnippet(compositionString, new Microsoft.Xna.Framework.Color(255, 240, 20)));
				}
				if (textBlinkerState == 1)
				{
					list.Add(new TextSnippet("|", Microsoft.Xna.Framework.Color.White));
				}
				array = list.ToArray();
				ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, array, new Vector2(88f, screenHeight - 30), 0f, Vector2.Zero, Vector2.One, out hoveredSnippet);
				if (hoveredSnippet > -1)
				{
					array[hoveredSnippet].OnHover();
					if (mouseLeft && mouseLeftRelease)
					{
						array[hoveredSnippet].OnClick();
					}
				}
			}
			chatMonitor.DrawChat(drawingPlayerChat);
			if (drawingPlayerChat && array != null)
			{
				Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, array, Vector2.Zero);
				DrawWindowsIMEPanel(new Vector2(88f, screenHeight - 30) + new Vector2(stringSize.X + 10f, -6f));
			}
			TimeLogger.DetailedDrawTime(10);
		}

		protected void DrawInventory()
		{
			Recipe.GetThroughDelayedFindRecipes();
			if (ShouldPVPDraw)
			{
				DrawPVPIcons();
			}
			int num = 0;
			int num2 = 0;
			int num3 = screenWidth;
			int num4 = 0;
			int num5 = screenWidth;
			int num6 = 0;
			Vector2 value = new Vector2(num, num2);
			new Vector2(num3, num4);
			new Vector2(num5, num6);
			DrawBestiaryIcon(num, num2);
			DrawEmoteBubblesButton(num, num2);
			DrawTrashItemSlot(num, num2);
			DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.inter[4].Value, new Vector2(40f, 0f) + value, new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			inventoryScale = 0.85f;
			if (mouseX > 20 && mouseX < (int)(20f + 560f * inventoryScale) && mouseY > 20 && mouseY < (int)(20f + 280f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
			}
			for (int i = 0; i < 10; i++)
			{
				for (int j = 0; j < 5; j++)
				{
					int num7 = (int)(20f + (float)(i * 56) * inventoryScale) + num;
					int num8 = (int)(20f + (float)(j * 56) * inventoryScale) + num2;
					int num9 = i + j * 10;
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (mouseX >= num7 && (float)mouseX <= (float)num7 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num8 && (float)mouseY <= (float)num8 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						player[myPlayer].mouseInterface = true;
						ItemSlot.OverrideHover(player[myPlayer].inventory, 0, num9);
						if (player[myPlayer].inventoryChestStack[num9] && (player[myPlayer].inventory[num9].type == 0 || player[myPlayer].inventory[num9].stack == 0))
						{
							player[myPlayer].inventoryChestStack[num9] = false;
						}
						if (!player[myPlayer].inventoryChestStack[num9])
						{
							ItemSlot.LeftClick(player[myPlayer].inventory, 0, num9);
							ItemSlot.RightClick(player[myPlayer].inventory, 0, num9);
							if (mouseLeftRelease && mouseLeft)
							{
								Recipe.FindRecipes();
							}
						}
						ItemSlot.MouseHover(player[myPlayer].inventory, 0, num9);
					}
					ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 0, num9, new Vector2(num7, num8));
				}
			}
			GetBuilderAccsCountToShow(LocalPlayer, out var _, out var _, out var totalDrawnIcons);
			bool pushSideToolsUp = totalDrawnIcons >= 10;
			if (!PlayerInput.UsingGamepad)
			{
				DrawHotbarLockIcon(num, num2, pushSideToolsUp);
			}
			ItemSlot.DrawRadialDpad(spriteBatch, new Vector2(20f) + new Vector2(56f * inventoryScale * 10f, 56f * inventoryScale * 5f) + new Vector2(26f, 70f) + value);
			if (_achievementAdvisor.CanDrawAboveCoins)
			{
				int num10 = (int)(20f + 560f * inventoryScale) + num;
				int num11 = (int)(20f + 0f * inventoryScale) + num2;
				_achievementAdvisor.DrawOneAchievement(spriteBatch, new Vector2(num10, num11) + new Vector2(5f), large: true);
			}
			if (mapEnabled)
			{
				bool flag = false;
				int num12 = num3 - 440;
				int num13 = 40 + num4;
				if (screenWidth < 940)
				{
					flag = true;
				}
				if (flag)
				{
					num12 = num5 - 40;
					num13 = num6 - 200;
				}
				int num14 = 0;
				for (int k = 0; k < 4; k++)
				{
					int num15 = 255;
					int num16 = num12 + k * 32 - num14;
					int num17 = num13;
					if (flag)
					{
						num16 = num12;
						num17 = num13 + k * 32 - num14;
					}
					int num18 = k;
					num15 = 120;
					if (k > 0 && mapStyle == k - 1)
					{
						num15 = 200;
					}
					if (mouseX >= num16 && mouseX <= num16 + 32 && mouseY >= num17 && mouseY <= num17 + 30 && !PlayerInput.IgnoreMouseInterface)
					{
						num15 = 255;
						num18 += 4;
						player[myPlayer].mouseInterface = true;
						if (mouseLeft && mouseLeftRelease)
						{
							if (k == 0)
							{
								playerInventory = false;
								player[myPlayer].SetTalkNPC(-1);
								npcChatCornerItem = 0;
								SoundEngine.PlaySound(10);
								mapFullscreenScale = 2.5f;
								mapFullscreen = true;
								resetMapFull = true;
							}
							if (k == 1)
							{
								mapStyle = 0;
								SoundEngine.PlaySound(12);
							}
							if (k == 2)
							{
								mapStyle = 1;
								SoundEngine.PlaySound(12);
							}
							if (k == 3)
							{
								mapStyle = 2;
								SoundEngine.PlaySound(12);
							}
						}
					}
					spriteBatch.Draw(TextureAssets.MapIcon[num18].Value, new Vector2(num16, num17), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.MapIcon[num18].Width(), TextureAssets.MapIcon[num18].Height()), new Microsoft.Xna.Framework.Color(num15, num15, num15, num15), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			if (armorHide)
			{
				armorAlpha -= 0.1f;
				if (armorAlpha < 0f)
				{
					armorAlpha = 0f;
				}
			}
			else
			{
				armorAlpha += 0.025f;
				if (armorAlpha > 1f)
				{
					armorAlpha = 1f;
				}
			}
			new Microsoft.Xna.Framework.Color((byte)((float)(int)mouseTextColor * armorAlpha), (byte)((float)(int)mouseTextColor * armorAlpha), (byte)((float)(int)mouseTextColor * armorAlpha), (byte)((float)(int)mouseTextColor * armorAlpha));
			armorHide = false;
			int num19 = 8 + player[myPlayer].GetAmountOfExtraAccessorySlotsToShow();
			int num20 = 174 + mH;
			int num21 = 950;
			_cannotDrawAccessoriesHorizontally = false;
			if (screenHeight < num21 && num19 >= 10)
			{
				num20 -= (int)(56f * inventoryScale * (float)(num19 - 9));
				_cannotDrawAccessoriesHorizontally = true;
			}
			int num22 = DrawPageIcons(num20 - 32);
			if (num22 > -1)
			{
				HoverItem = new Item();
				switch (num22)
				{
				case 1:
					hoverItemName = Lang.inter[80].Value;
					break;
				case 2:
					hoverItemName = Lang.inter[79].Value;
					break;
				case 3:
					hoverItemName = (CaptureModeDisabled ? Lang.inter[115].Value : Lang.inter[81].Value);
					break;
				}
			}
			if (EquipPage == 2)
			{
				Microsoft.Xna.Framework.Point value2 = new Microsoft.Xna.Framework.Point(mouseX, mouseY);
				Microsoft.Xna.Framework.Rectangle r = new Microsoft.Xna.Framework.Rectangle(0, 0, (int)((float)TextureAssets.InventoryBack.Width() * inventoryScale), (int)((float)TextureAssets.InventoryBack.Height() * inventoryScale));
				Item[] inv = player[myPlayer].miscEquips;
				int num23 = screenWidth - 92;
				int num24 = mH + 174;
				for (int l = 0; l < 2; l++)
				{
					switch (l)
					{
					case 0:
						inv = player[myPlayer].miscEquips;
						break;
					case 1:
						inv = player[myPlayer].miscDyes;
						break;
					}
					r.X = num23 + l * -47;
					for (int m = 0; m < 5; m++)
					{
						int context = 0;
						int num25 = -1;
						switch (m)
						{
						case 0:
							context = 19;
							num25 = 0;
							break;
						case 1:
							context = 20;
							num25 = 1;
							break;
						case 2:
							context = 18;
							break;
						case 3:
							context = 17;
							break;
						case 4:
							context = 16;
							break;
						}
						if (l == 1)
						{
							context = 12;
							num25 = -1;
						}
						r.Y = num24 + m * 47;
						Texture2D value3 = TextureAssets.InventoryTickOn.Value;
						if (player[myPlayer].hideMisc[num25])
						{
							value3 = TextureAssets.InventoryTickOff.Value;
						}
						Microsoft.Xna.Framework.Rectangle r2 = new Microsoft.Xna.Framework.Rectangle(r.Left + 34, r.Top - 2, value3.Width, value3.Height);
						int num26 = 0;
						bool flag2 = false;
						if (r2.Contains(value2) && !PlayerInput.IgnoreMouseInterface)
						{
							player[myPlayer].mouseInterface = true;
							flag2 = true;
							if (mouseLeft && mouseLeftRelease)
							{
								if (num25 == 0)
								{
									player[myPlayer].TogglePet();
								}
								if (num25 == 1)
								{
									player[myPlayer].ToggleLight();
								}
								mouseLeftRelease = false;
								SoundEngine.PlaySound(12);
								if (netMode == 1)
								{
									NetMessage.SendData(4, -1, -1, null, myPlayer);
								}
							}
							num26 = ((!player[myPlayer].hideMisc[num25]) ? 1 : 2);
						}
						if (r.Contains(value2) && !flag2 && !PlayerInput.IgnoreMouseInterface)
						{
							player[myPlayer].mouseInterface = true;
							armorHide = true;
							ItemSlot.Handle(inv, context, m);
						}
						ItemSlot.Draw(spriteBatch, inv, context, m, r.TopLeft());
						if (num25 != -1)
						{
							spriteBatch.Draw(value3, r2.TopLeft(), Microsoft.Xna.Framework.Color.White * 0.7f);
							if (num26 > 0)
							{
								HoverItem = new Item();
								hoverItemName = Lang.inter[58 + num26].Value;
							}
						}
					}
				}
				num24 += 247;
				num23 += 8;
				int num27 = -1;
				int num28 = 0;
				int num29 = 3;
				int num30 = 260;
				if (screenHeight > 630 + num30 * (mapStyle == 1).ToInt())
				{
					num29++;
				}
				if (screenHeight > 680 + num30 * (mapStyle == 1).ToInt())
				{
					num29++;
				}
				if (screenHeight > 730 + num30 * (mapStyle == 1).ToInt())
				{
					num29++;
				}
				int num31 = 46;
				for (int n = 0; n < 22; n++)
				{
					if (player[myPlayer].buffType[n] != 0)
					{
						int num32 = num28 / num29;
						int num33 = num28 % num29;
						Microsoft.Xna.Framework.Point point = new Microsoft.Xna.Framework.Point(num23 + num32 * -num31, num24 + num33 * num31);
						num27 = DrawBuffIcon(num27, n, point.X, point.Y);
						UILinkPointNavigator.SetPosition(9000 + num28, new Vector2(point.X + 30, point.Y + 30));
						num28++;
						if (buffAlpha[n] < 0.65f)
						{
							buffAlpha[n] = 0.65f;
						}
					}
				}
				UILinkPointNavigator.Shortcuts.BUFFS_DRAWN = num28;
				UILinkPointNavigator.Shortcuts.BUFFS_PER_COLUMN = num29;
				if (num27 >= 0)
				{
					int num34 = player[myPlayer].buffType[num27];
					if (num34 > 0)
					{
						string buffName = Lang.GetBuffName(num34);
						string buffTooltip = GetBuffTooltip(player[myPlayer], num34);
						if (num34 == 147)
						{
							bannerMouseOver = true;
						}
						if (meleeBuff[num34])
						{
							MouseTextHackZoom(buffName, -10, 0, buffTooltip);
						}
						else
						{
							MouseTextHackZoom(buffName, buffTooltip);
						}
					}
				}
			}
			else if (EquipPage == 1)
			{
				DrawNPCHousesInUI();
			}
			else
			{
				int num35 = 4;
				if (mouseX > screenWidth - 64 - 28 && mouseX < (int)((float)(screenWidth - 64 - 28) + 56f * inventoryScale) && mouseY > num20 && mouseY < (int)((float)num20 + 448f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
				}
				float num36 = inventoryScale;
				bool flag3 = false;
				int num37 = num19 - 1;
				bool flag4 = LocalPlayer.CanDemonHeartAccessoryBeShown();
				bool flag5 = LocalPlayer.CanMasterModeAccessoryBeShown();
				if (_settingsButtonIsPushedToSide)
				{
					num37--;
				}
				int num38 = num37 - 1;
				Microsoft.Xna.Framework.Color color = inventoryBack;
				Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(80, 80, 80, 80);
				int num39 = -1;
				for (int num40 = 0; num40 < 10; num40++)
				{
					if ((num40 == 8 && !flag4) || (num40 == 9 && !flag5))
					{
						continue;
					}
					num39++;
					bool flag6 = LocalPlayer.IsAValidEquipmentSlotForIteration(num40);
					if (!flag6)
					{
						flag3 = true;
					}
					int num41 = screenWidth - 64 - 28;
					int num42 = (int)((float)num20 + (float)(num39 * 56) * inventoryScale);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					int num43 = screenWidth - 58;
					int num44 = (int)((float)(num20 - 2) + (float)(num39 * 56) * inventoryScale);
					int context2 = 8;
					if (num40 > 2)
					{
						num42 += num35;
						num44 += num35;
						context2 = 10;
					}
					if (num39 == num38 && !_achievementAdvisor.CanDrawAboveCoins)
					{
						_achievementAdvisor.DrawOneAchievement(spriteBatch, new Vector2(num41 - 10 - 47 - 47 - 14 - 14, num42 + 8), large: false);
						UILinkPointNavigator.SetPosition(1570, new Vector2(num41 - 10 - 47 - 47 - 14 - 14, num42 + 8) + new Vector2(20f) * inventoryScale);
					}
					if (num39 == num37)
					{
						DrawDefenseCounter(num41, num42);
					}
					Texture2D value4 = TextureAssets.InventoryTickOn.Value;
					if (player[myPlayer].hideVisibleAccessory[num40])
					{
						value4 = TextureAssets.InventoryTickOff.Value;
					}
					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(num43, num44, value4.Width, value4.Height);
					int num45 = 0;
					if (num40 > 2 && rectangle.Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)) && !PlayerInput.IgnoreMouseInterface)
					{
						player[myPlayer].mouseInterface = true;
						if (mouseLeft && mouseLeftRelease)
						{
							player[myPlayer].hideVisibleAccessory[num40] = !player[myPlayer].hideVisibleAccessory[num40];
							SoundEngine.PlaySound(12);
							if (netMode == 1)
							{
								NetMessage.SendData(4, -1, -1, null, myPlayer);
							}
						}
						num45 = ((!player[myPlayer].hideVisibleAccessory[num40]) ? 1 : 2);
					}
					else if (mouseX >= num41 && (float)mouseX <= (float)num41 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num42 && (float)mouseY <= (float)num42 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						armorHide = true;
						player[myPlayer].mouseInterface = true;
						ItemSlot.OverrideHover(player[myPlayer].armor, context2, num40);
						if (flag6 || mouseItem.IsAir)
						{
							ItemSlot.LeftClick(player[myPlayer].armor, context2, num40);
						}
						ItemSlot.MouseHover(player[myPlayer].armor, context2, num40);
					}
					if (flag3)
					{
						inventoryBack = color2;
					}
					ItemSlot.Draw(spriteBatch, player[myPlayer].armor, context2, num40, new Vector2(num41, num42));
					if (num40 > 2)
					{
						spriteBatch.Draw(value4, new Vector2(num43, num44), Microsoft.Xna.Framework.Color.White * 0.7f);
						if (num45 > 0)
						{
							HoverItem = new Item();
							hoverItemName = Lang.inter[58 + num45].Value;
						}
					}
				}
				inventoryBack = color;
				if (mouseX > screenWidth - 64 - 28 - 47 && mouseX < (int)((float)(screenWidth - 64 - 20 - 47) + 56f * inventoryScale) && mouseY > num20 && mouseY < (int)((float)num20 + 168f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
				}
				num39 = -1;
				for (int num46 = 10; num46 < 20; num46++)
				{
					if ((num46 == 18 && !flag4) || (num46 == 19 && !flag5))
					{
						continue;
					}
					num39++;
					bool num47 = LocalPlayer.IsAValidEquipmentSlotForIteration(num46);
					flag3 = !num47;
					bool flag7 = !num47 && !mouseItem.IsAir;
					int num48 = screenWidth - 64 - 28 - 47;
					int num49 = (int)((float)num20 + (float)(num39 * 56) * inventoryScale);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (num46 > 12)
					{
						num49 += num35;
					}
					int context3 = 9;
					if (num46 > 12)
					{
						context3 = 11;
					}
					if (mouseX >= num48 && (float)mouseX <= (float)num48 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num49 && (float)mouseY <= (float)num49 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						player[myPlayer].mouseInterface = true;
						armorHide = true;
						ItemSlot.OverrideHover(player[myPlayer].armor, context3, num46);
						if (!flag7)
						{
							ItemSlot.LeftClick(player[myPlayer].armor, context3, num46);
							ItemSlot.RightClick(player[myPlayer].armor, context3, num46);
						}
						ItemSlot.MouseHover(player[myPlayer].armor, context3, num46);
					}
					if (flag3)
					{
						inventoryBack = color2;
					}
					ItemSlot.Draw(spriteBatch, player[myPlayer].armor, context3, num46, new Vector2(num48, num49));
				}
				inventoryBack = color;
				if (mouseX > screenWidth - 64 - 28 - 47 && mouseX < (int)((float)(screenWidth - 64 - 20 - 47) + 56f * inventoryScale) && mouseY > num20 && mouseY < (int)((float)num20 + 168f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
				}
				num39 = -1;
				for (int num50 = 0; num50 < 10; num50++)
				{
					if ((num50 == 8 && !flag4) || (num50 == 9 && !flag5))
					{
						continue;
					}
					num39++;
					bool num51 = LocalPlayer.IsAValidEquipmentSlotForIteration(num50);
					flag3 = !num51;
					bool flag8 = !num51 && !mouseItem.IsAir;
					int num52 = screenWidth - 64 - 28 - 47 - 47;
					int num53 = (int)((float)num20 + (float)(num39 * 56) * inventoryScale);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (num50 > 2)
					{
						num53 += num35;
					}
					if (mouseX >= num52 && (float)mouseX <= (float)num52 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num53 && (float)mouseY <= (float)num53 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						player[myPlayer].mouseInterface = true;
						armorHide = true;
						ItemSlot.OverrideHover(player[myPlayer].dye, 12, num50);
						if (!flag8)
						{
							if (mouseRightRelease && mouseRight)
							{
								ItemSlot.RightClick(player[myPlayer].dye, 12, num50);
							}
							ItemSlot.LeftClick(player[myPlayer].dye, 12, num50);
						}
						ItemSlot.MouseHover(player[myPlayer].dye, 12, num50);
					}
					if (flag3)
					{
						inventoryBack = color2;
					}
					ItemSlot.Draw(spriteBatch, player[myPlayer].dye, 12, num50, new Vector2(num52, num53));
				}
				inventoryBack = color;
				inventoryScale = num36;
			}
			int num54 = (screenHeight - 600) / 2;
			int num55 = (int)((float)screenHeight / 600f * 250f);
			if (screenHeight < 700)
			{
				num54 = (screenHeight - 508) / 2;
				num55 = (int)((float)screenHeight / 600f * 200f);
			}
			else if (screenHeight < 850)
			{
				num55 = (int)((float)screenHeight / 600f * 225f);
			}
			if (craftingHide)
			{
				craftingAlpha -= 0.1f;
				if (craftingAlpha < 0f)
				{
					craftingAlpha = 0f;
				}
			}
			else
			{
				craftingAlpha += 0.025f;
				if (craftingAlpha > 1f)
				{
					craftingAlpha = 1f;
				}
			}
			Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((byte)((float)(int)mouseTextColor * craftingAlpha), (byte)((float)(int)mouseTextColor * craftingAlpha), (byte)((float)(int)mouseTextColor * craftingAlpha), (byte)((float)(int)mouseTextColor * craftingAlpha));
			craftingHide = false;
			if (InReforgeMenu)
			{
				if (mouseReforge)
				{
					if (reforgeScale < 1f)
					{
						reforgeScale += 0.02f;
					}
				}
				else if (reforgeScale > 1f)
				{
					reforgeScale -= 0.02f;
				}
				if (player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC == -1 || InGuideCraftMenu)
				{
					InReforgeMenu = false;
					player[myPlayer].dropItemCheck();
					Recipe.FindRecipes();
				}
				else
				{
					int num56 = 50;
					int num57 = 270;
					string text = Lang.inter[46].Value + ": ";
					if (reforgeItem.type > 0)
					{
						int num58 = reforgeItem.value;
						if (player[myPlayer].discount)
						{
							num58 = (int)((double)num58 * 0.8);
						}
						num58 = (int)((double)num58 * player[myPlayer].currentShoppingSettings.PriceAdjustment);
						num58 /= 3;
						string text2 = "";
						int num59 = 0;
						int num60 = 0;
						int num61 = 0;
						int num62 = 0;
						int num63 = num58;
						if (num63 < 1)
						{
							num63 = 1;
						}
						if (num63 >= 1000000)
						{
							num59 = num63 / 1000000;
							num63 -= num59 * 1000000;
						}
						if (num63 >= 10000)
						{
							num60 = num63 / 10000;
							num63 -= num60 * 10000;
						}
						if (num63 >= 100)
						{
							num61 = num63 / 100;
							num63 -= num61 * 100;
						}
						if (num63 >= 1)
						{
							num62 = num63;
						}
						if (num59 > 0)
						{
							text2 = text2 + "[c/" + Colors.AlphaDarken(Colors.CoinPlatinum).Hex3() + ":" + num59 + " " + Lang.inter[15].Value + "] ";
						}
						if (num60 > 0)
						{
							text2 = text2 + "[c/" + Colors.AlphaDarken(Colors.CoinGold).Hex3() + ":" + num60 + " " + Lang.inter[16].Value + "] ";
						}
						if (num61 > 0)
						{
							text2 = text2 + "[c/" + Colors.AlphaDarken(Colors.CoinSilver).Hex3() + ":" + num61 + " " + Lang.inter[17].Value + "] ";
						}
						if (num62 > 0)
						{
							text2 = text2 + "[c/" + Colors.AlphaDarken(Colors.CoinCopper).Hex3() + ":" + num62 + " " + Lang.inter[18].Value + "] ";
						}
						ItemSlot.DrawSavings(spriteBatch, num56 + 130, invBottom, horizontal: true);
						ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, text2, new Vector2((float)(num56 + 50) + FontAssets.MouseText.Value.MeasureString(text).X, num57), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One);
						int num64 = num56 + 70;
						int num65 = num57 + 40;
						bool num66 = mouseX > num64 - 15 && mouseX < num64 + 15 && mouseY > num65 - 15 && mouseY < num65 + 15 && !PlayerInput.IgnoreMouseInterface;
						Texture2D value5 = TextureAssets.Reforge[0].Value;
						if (num66)
						{
							value5 = TextureAssets.Reforge[1].Value;
						}
						spriteBatch.Draw(value5, new Vector2(num64, num65), null, Microsoft.Xna.Framework.Color.White, 0f, value5.Size() / 2f, reforgeScale, SpriteEffects.None, 0f);
						UILinkPointNavigator.SetPosition(304, new Vector2(num64, num65) + value5.Size() / 4f);
						if (num66)
						{
							hoverItemName = Lang.inter[19].Value;
							if (!mouseReforge)
							{
								SoundEngine.PlaySound(12);
							}
							mouseReforge = true;
							player[myPlayer].mouseInterface = true;
							if (mouseLeftRelease && mouseLeft && player[myPlayer].BuyItem(num58))
							{
								bool favorited = reforgeItem.favorited;
								reforgeItem.netDefaults(reforgeItem.netID);
								reforgeItem.Prefix(-2);
								reforgeItem.position.X = player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(reforgeItem.width / 2);
								reforgeItem.position.Y = player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(reforgeItem.height / 2);
								reforgeItem.favorited = favorited;
								PopupText.NewText(PopupTextContext.ItemReforge, reforgeItem, reforgeItem.stack, noStack: true);
								SoundEngine.PlaySound(SoundID.Item37);
							}
						}
						else
						{
							mouseReforge = false;
						}
					}
					else
					{
						text = Lang.inter[20].Value;
					}
					ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, text, new Vector2(num56 + 50, num57), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, Vector2.Zero, Vector2.One);
					if (mouseX >= num56 && (float)mouseX <= (float)num56 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num57 && (float)mouseY <= (float)num57 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						player[myPlayer].mouseInterface = true;
						craftingHide = true;
						ItemSlot.LeftClick(reforgeItem, 5);
						if (mouseLeftRelease && mouseLeft)
						{
							Recipe.FindRecipes();
						}
						ItemSlot.RightClick(reforgeItem, 5);
						ItemSlot.MouseHover(reforgeItem, 5);
					}
					ItemSlot.Draw(spriteBatch, reforgeItem, 5, new Vector2(num56, num57));
				}
			}
			else if (InGuideCraftMenu)
			{
				if (player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC == -1 || InReforgeMenu)
				{
					InGuideCraftMenu = false;
					player[myPlayer].dropItemCheck();
					Recipe.FindRecipes();
				}
				else
				{
					DrawGuideCraftText(num54, color3, out var inventoryX, out var inventoryY);
					new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (mouseX >= inventoryX && (float)mouseX <= (float)inventoryX + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= inventoryY && (float)mouseY <= (float)inventoryY + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						player[myPlayer].mouseInterface = true;
						craftingHide = true;
						ItemSlot.OverrideHover(guideItem, 7);
						ItemSlot.LeftClick(guideItem, 7);
						if (mouseLeftRelease && mouseLeft)
						{
							Recipe.FindRecipes();
						}
						ItemSlot.RightClick(guideItem, 7);
						ItemSlot.MouseHover(guideItem, 7);
					}
					ItemSlot.Draw(spriteBatch, guideItem, 7, new Vector2(inventoryX, inventoryY));
				}
			}
			CreativeMenu.Draw(spriteBatch);
			bool flag9 = CreativeMenu.Enabled && !CreativeMenu.Blocked;
			if (!InReforgeMenu && !LocalPlayer.tileEntityAnchor.InUse && !flag9)
			{
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
				if (numAvailableRecipes > 0)
				{
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.inter[25].Value, new Vector2(76f, 414 + num54), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num67 = 0; num67 < Recipe.maxRecipes; num67++)
				{
					inventoryScale = 100f / (Math.Abs(availableRecipeY[num67]) + 100f);
					if ((double)inventoryScale < 0.75)
					{
						inventoryScale = 0.75f;
					}
					if (recFastScroll)
					{
						inventoryScale = 0.75f;
					}
					if (availableRecipeY[num67] < (float)((num67 - focusRecipe) * 65))
					{
						if (availableRecipeY[num67] == 0f && !recFastScroll)
						{
							SoundEngine.PlaySound(12);
						}
						availableRecipeY[num67] += 6.5f;
						if (recFastScroll)
						{
							availableRecipeY[num67] += 130000f;
						}
						if (availableRecipeY[num67] > (float)((num67 - focusRecipe) * 65))
						{
							availableRecipeY[num67] = (num67 - focusRecipe) * 65;
						}
					}
					else if (availableRecipeY[num67] > (float)((num67 - focusRecipe) * 65))
					{
						if (availableRecipeY[num67] == 0f && !recFastScroll)
						{
							SoundEngine.PlaySound(12);
						}
						availableRecipeY[num67] -= 6.5f;
						if (recFastScroll)
						{
							availableRecipeY[num67] -= 130000f;
						}
						if (availableRecipeY[num67] < (float)((num67 - focusRecipe) * 65))
						{
							availableRecipeY[num67] = (num67 - focusRecipe) * 65;
						}
					}
					else
					{
						recFastScroll = false;
					}
					if (num67 >= numAvailableRecipes || Math.Abs(availableRecipeY[num67]) > (float)num55)
					{
						continue;
					}
					int num68 = (int)(46f - 26f * inventoryScale);
					int num69 = (int)(410f + availableRecipeY[num67] * inventoryScale - 30f * inventoryScale + (float)num54);
					double num70 = inventoryBack.A + 50;
					double num71 = 255.0;
					if (Math.Abs(availableRecipeY[num67]) > (float)num55 - 100f)
					{
						num70 = (double)(150f * (100f - (Math.Abs(availableRecipeY[num67]) - ((float)num55 - 100f)))) * 0.01;
						num71 = (double)(255f * (100f - (Math.Abs(availableRecipeY[num67]) - ((float)num55 - 100f)))) * 0.01;
					}
					new Microsoft.Xna.Framework.Color((byte)num70, (byte)num70, (byte)num70, (byte)num70);
					Microsoft.Xna.Framework.Color lightColor = new Microsoft.Xna.Framework.Color((byte)num71, (byte)num71, (byte)num71, (byte)num71);
					if (!LocalPlayer.creativeInterface && mouseX >= num68 && (float)mouseX <= (float)num68 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num69 && (float)mouseY <= (float)num69 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						HoverOverCraftingItemButton(num67);
					}
					if (numAvailableRecipes <= 0)
					{
						continue;
					}
					num70 -= 50.0;
					if (num70 < 0.0)
					{
						num70 = 0.0;
					}
					if (num67 == focusRecipe)
					{
						UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = 0;
						if (!PlayerInput.UsingGamepad)
						{
							ItemSlot.DrawGoldBGForCraftingMaterial = true;
						}
					}
					else
					{
						UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
					}
					Microsoft.Xna.Framework.Color color4 = inventoryBack;
					inventoryBack = new Microsoft.Xna.Framework.Color((byte)num70, (byte)num70, (byte)num70, (byte)num70);
					ItemSlot.Draw(spriteBatch, recipe[availableRecipe[num67]].createItem, 22, new Vector2(num68, num69), lightColor);
					inventoryBack = color4;
				}
				if (numAvailableRecipes > 0)
				{
					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
					UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
					for (int num72 = 0; num72 < Recipe.maxRequirements; num72++)
					{
						if (recipe[availableRecipe[focusRecipe]].requiredItem[num72].type == 0)
						{
							UILinkPointNavigator.Shortcuts.CRAFT_CurrentIngridientsCount = num72 + 1;
							break;
						}
						int num73 = 80 + num72 * 40;
						int num74 = 380 + num54;
						double num75 = inventoryBack.A + 50;
						double num76 = 255.0;
						Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
						Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
						num75 = (float)(inventoryBack.A + 50) - Math.Abs(availableRecipeY[focusRecipe]) * 2f;
						num76 = 255f - Math.Abs(availableRecipeY[focusRecipe]) * 2f;
						if (num75 < 0.0)
						{
							num75 = 0.0;
						}
						if (num76 < 0.0)
						{
							num76 = 0.0;
						}
						white.R = (byte)num75;
						white.G = (byte)num75;
						white.B = (byte)num75;
						white.A = (byte)num75;
						white2.R = (byte)num76;
						white2.G = (byte)num76;
						white2.B = (byte)num76;
						white2.A = (byte)num76;
						inventoryScale = 0.6f;
						if (num75 == 0.0)
						{
							break;
						}
						if (mouseX >= num73 && (float)mouseX <= (float)num73 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num74 && (float)mouseY <= (float)num74 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
						{
							craftingHide = true;
							player[myPlayer].mouseInterface = true;
							SetRecipeMaterialDisplayName(num72);
						}
						num75 -= 50.0;
						if (num75 < 0.0)
						{
							num75 = 0.0;
						}
						UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = 1 + num72;
						Microsoft.Xna.Framework.Color color5 = inventoryBack;
						inventoryBack = new Microsoft.Xna.Framework.Color((byte)num75, (byte)num75, (byte)num75, (byte)num75);
						ItemSlot.Draw(spriteBatch, recipe[availableRecipe[focusRecipe]].requiredItem[num72], 22, new Vector2(num73, num74));
						inventoryBack = color5;
					}
				}
				if (numAvailableRecipes == 0)
				{
					recBigList = false;
				}
				else
				{
					int num77 = 94;
					int num78 = 450 + num54;
					if (InGuideCraftMenu)
					{
						num78 -= 150;
					}
					bool flag10 = mouseX > num77 - 15 && mouseX < num77 + 15 && mouseY > num78 - 15 && mouseY < num78 + 15 && !PlayerInput.IgnoreMouseInterface;
					int num79 = recBigList.ToInt() * 2 + flag10.ToInt();
					spriteBatch.Draw(TextureAssets.CraftToggle[num79].Value, new Vector2(num77, num78), null, Microsoft.Xna.Framework.Color.White, 0f, TextureAssets.CraftToggle[num79].Value.Size() / 2f, 1f, SpriteEffects.None, 0f);
					if (flag10)
					{
						MouseText(Language.GetTextValue("GameUI.CraftingWindow"), 0, 0);
						player[myPlayer].mouseInterface = true;
						if (mouseLeft && mouseLeftRelease)
						{
							if (!recBigList)
							{
								recBigList = true;
								SoundEngine.PlaySound(12);
							}
							else
							{
								recBigList = false;
								SoundEngine.PlaySound(12);
							}
						}
					}
				}
			}
			if (recBigList && !flag9)
			{
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = -1;
				UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeSmall = -1;
				int num80 = 42;
				if ((double)inventoryScale < 0.75)
				{
					inventoryScale = 0.75f;
				}
				int num81 = 340;
				int num82 = 310;
				int num83 = (screenWidth - num82 - 280) / num80;
				int num84 = (screenHeight - num81 - 20) / num80;
				UILinkPointNavigator.Shortcuts.CRAFT_IconsPerRow = num83;
				UILinkPointNavigator.Shortcuts.CRAFT_IconsPerColumn = num84;
				int num85 = 0;
				int num86 = 0;
				int num87 = num82;
				int num88 = num81;
				int num89 = num82 - 20;
				int num90 = num81 + 2;
				if (recStart > numAvailableRecipes - num83 * num84)
				{
					recStart = numAvailableRecipes - num83 * num84;
					if (recStart < 0)
					{
						recStart = 0;
					}
				}
				if (recStart > 0)
				{
					if (mouseX >= num89 && mouseX <= num89 + TextureAssets.CraftUpButton.Width() && mouseY >= num90 && mouseY <= num90 + TextureAssets.CraftUpButton.Height() && !PlayerInput.IgnoreMouseInterface)
					{
						player[myPlayer].mouseInterface = true;
						if (mouseLeftRelease && mouseLeft)
						{
							recStart -= num83;
							if (recStart < 0)
							{
								recStart = 0;
							}
							SoundEngine.PlaySound(12);
							mouseLeftRelease = false;
						}
					}
					spriteBatch.Draw(TextureAssets.CraftUpButton.Value, new Vector2(num89, num90), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height()), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (recStart < numAvailableRecipes - num83 * num84)
				{
					num90 += 20;
					if (mouseX >= num89 && mouseX <= num89 + TextureAssets.CraftUpButton.Width() && mouseY >= num90 && mouseY <= num90 + TextureAssets.CraftUpButton.Height() && !PlayerInput.IgnoreMouseInterface)
					{
						player[myPlayer].mouseInterface = true;
						if (mouseLeftRelease && mouseLeft)
						{
							recStart += num83;
							SoundEngine.PlaySound(12);
							if (recStart > numAvailableRecipes - num83)
							{
								recStart = numAvailableRecipes - num83;
							}
							mouseLeftRelease = false;
						}
					}
					spriteBatch.Draw(TextureAssets.CraftDownButton.Value, new Vector2(num89, num90), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height()), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				for (int num91 = recStart; num91 < Recipe.maxRecipes && num91 < numAvailableRecipes; num91++)
				{
					int num92 = num87;
					int num93 = num88;
					double num94 = inventoryBack.A + 50;
					double num95 = 255.0;
					new Microsoft.Xna.Framework.Color((byte)num94, (byte)num94, (byte)num94, (byte)num94);
					new Microsoft.Xna.Framework.Color((byte)num95, (byte)num95, (byte)num95, (byte)num95);
					if (mouseX >= num92 && (float)mouseX <= (float)num92 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num93 && (float)mouseY <= (float)num93 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
					{
						player[myPlayer].mouseInterface = true;
						if (mouseLeftRelease && mouseLeft)
						{
							focusRecipe = num91;
							recFastScroll = true;
							recBigList = false;
							SoundEngine.PlaySound(12);
							mouseLeftRelease = false;
							if (PlayerInput.UsingGamepadUI)
							{
								UILinkPointNavigator.ChangePage(9);
								LockCraftingForThisCraftClickDuration();
							}
						}
						craftingHide = true;
						hoverItemName = recipe[availableRecipe[num91]].createItem.Name;
						HoverItem = recipe[availableRecipe[num91]].createItem.Clone();
						if (recipe[availableRecipe[num91]].createItem.stack > 1)
						{
							hoverItemName = hoverItemName + " (" + recipe[availableRecipe[num91]].createItem.stack + ")";
						}
					}
					if (numAvailableRecipes > 0)
					{
						num94 -= 50.0;
						if (num94 < 0.0)
						{
							num94 = 0.0;
						}
						UILinkPointNavigator.Shortcuts.CRAFT_CurrentRecipeBig = num91 - recStart;
						Microsoft.Xna.Framework.Color color6 = inventoryBack;
						inventoryBack = new Microsoft.Xna.Framework.Color((byte)num94, (byte)num94, (byte)num94, (byte)num94);
						ItemSlot.Draw(spriteBatch, recipe[availableRecipe[num91]].createItem, 22, new Vector2(num92, num93));
						inventoryBack = color6;
					}
					num87 += num80;
					num85++;
					if (num85 >= num83)
					{
						num87 = num82;
						num88 += num80;
						num85 = 0;
						num86++;
						if (num86 >= num84)
						{
							break;
						}
					}
				}
			}
			Vector2 vector = FontAssets.MouseText.Value.MeasureString("Coins");
			Vector2 vector2 = FontAssets.MouseText.Value.MeasureString(Lang.inter[26].Value);
			float num96 = vector.X / vector2.X;
			DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.inter[26].Value, new Vector2(496f, 84f + (vector.Y - vector.Y * num96) / 2f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 0.75f * num96, SpriteEffects.None, 0f);
			inventoryScale = 0.6f;
			for (int num97 = 0; num97 < 4; num97++)
			{
				int num98 = 497;
				int num99 = (int)(85f + (float)(num97 * 56) * inventoryScale + 20f);
				int slot = num97 + 50;
				new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
				if (mouseX >= num98 && (float)mouseX <= (float)num98 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num99 && (float)mouseY <= (float)num99 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(player[myPlayer].inventory, 1, slot);
					ItemSlot.LeftClick(player[myPlayer].inventory, 1, slot);
					ItemSlot.RightClick(player[myPlayer].inventory, 1, slot);
					if (mouseLeftRelease && mouseLeft)
					{
						Recipe.FindRecipes();
					}
					ItemSlot.MouseHover(player[myPlayer].inventory, 1, slot);
				}
				ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 1, slot, new Vector2(num98, num99));
			}
			Vector2 vector3 = FontAssets.MouseText.Value.MeasureString("Ammo");
			Vector2 vector4 = FontAssets.MouseText.Value.MeasureString(Lang.inter[27].Value);
			float num100 = vector3.X / vector4.X;
			DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.inter[27].Value, new Vector2(532f, 84f + (vector3.Y - vector3.Y * num100) / 2f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 0.75f * num100, SpriteEffects.None, 0f);
			inventoryScale = 0.6f;
			for (int num101 = 0; num101 < 4; num101++)
			{
				int num102 = 534;
				int num103 = (int)(85f + (float)(num101 * 56) * inventoryScale + 20f);
				int slot2 = 54 + num101;
				new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
				if (mouseX >= num102 && (float)mouseX <= (float)num102 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num103 && (float)mouseY <= (float)num103 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(player[myPlayer].inventory, 2, slot2);
					ItemSlot.LeftClick(player[myPlayer].inventory, 2, slot2);
					ItemSlot.RightClick(player[myPlayer].inventory, 2, slot2);
					if (mouseLeftRelease && mouseLeft)
					{
						Recipe.FindRecipes();
					}
					ItemSlot.MouseHover(player[myPlayer].inventory, 2, slot2);
				}
				ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 2, slot2, new Vector2(num102, num103));
			}
			if (npcShop > 0 && (!playerInventory || player[myPlayer].talkNPC == -1))
			{
				SetNPCShopIndex(0);
			}
			if (npcShop > 0 && !recBigList)
			{
				Utils.DrawBorderStringFourWay(spriteBatch, FontAssets.MouseText.Value, Lang.inter[28].Value, 504f, invBottom, Microsoft.Xna.Framework.Color.White * ((float)(int)mouseTextColor / 255f), Microsoft.Xna.Framework.Color.Black, Vector2.Zero);
				ItemSlot.DrawSavings(spriteBatch, 504f, invBottom);
				inventoryScale = 0.755f;
				if (mouseX > 73 && mouseX < (int)(73f + 560f * inventoryScale) && mouseY > invBottom && mouseY < (int)((float)invBottom + 224f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
				}
				for (int num104 = 0; num104 < 10; num104++)
				{
					for (int num105 = 0; num105 < 4; num105++)
					{
						int num106 = (int)(73f + (float)(num104 * 56) * inventoryScale);
						int num107 = (int)((float)invBottom + (float)(num105 * 56) * inventoryScale);
						int slot3 = num104 + num105 * 10;
						new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
						if (mouseX >= num106 && (float)mouseX <= (float)num106 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num107 && (float)mouseY <= (float)num107 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
						{
							ItemSlot.OverrideHover(shop[npcShop].item, 15, slot3);
							player[myPlayer].mouseInterface = true;
							ItemSlot.LeftClick(shop[npcShop].item, 15, slot3);
							ItemSlot.RightClick(shop[npcShop].item, 15, slot3);
							ItemSlot.MouseHover(shop[npcShop].item, 15, slot3);
						}
						ItemSlot.Draw(spriteBatch, shop[npcShop].item, 15, slot3, new Vector2(num106, num107));
					}
				}
			}
			if (player[myPlayer].chest > -1 && !tileContainer[tile[player[myPlayer].chestX, player[myPlayer].chestY].type])
			{
				player[myPlayer].chest = -1;
				Recipe.FindRecipes();
			}
			int offsetDown = 0;
			UIVirtualKeyboard.ShouldHideText = !PlayerInput.UsingGamepad;
			if (!PlayerInput.UsingGamepad)
			{
				offsetDown = 9999;
			}
			UIVirtualKeyboard.OffsetDown = offsetDown;
			ChestUI.Draw(spriteBatch);
			LocalPlayer.tileEntityAnchor.GetTileEntity()?.OnInventoryDraw(LocalPlayer, spriteBatch);
			if (player[myPlayer].chest == -1 && npcShop == 0)
			{
				int num108 = 0;
				int num109 = 498;
				int num110 = 244;
				int num111 = TextureAssets.ChestStack[num108].Width();
				int num112 = TextureAssets.ChestStack[num108].Height();
				UILinkPointNavigator.SetPosition(301, new Vector2((float)num109 + (float)num111 * 0.75f, (float)num110 + (float)num112 * 0.75f));
				if (mouseX >= num109 && mouseX <= num109 + num111 && mouseY >= num110 && mouseY <= num110 + num112 && !PlayerInput.IgnoreMouseInterface)
				{
					num108 = 1;
					if (!allChestStackHover)
					{
						SoundEngine.PlaySound(12);
						allChestStackHover = true;
					}
					if (mouseLeft && mouseLeftRelease)
					{
						mouseLeftRelease = false;
						player[myPlayer].QuickStackAllChests();
						Recipe.FindRecipes();
					}
					player[myPlayer].mouseInterface = true;
				}
				else if (allChestStackHover)
				{
					SoundEngine.PlaySound(12);
					allChestStackHover = false;
				}
				spriteBatch.Draw(TextureAssets.ChestStack[num108].Value, new Vector2(num109, num110), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.ChestStack[num108].Width(), TextureAssets.ChestStack[num108].Height()), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				if (!mouseText && num108 == 1)
				{
					MouseText(Language.GetTextValue("GameUI.QuickStackToNearby"), 0, 0);
				}
			}
			if (player[myPlayer].chest != -1 || npcShop != 0)
			{
				return;
			}
			int num113 = 0;
			int num114 = 534;
			int num115 = 244;
			int num116 = 30;
			int num117 = 30;
			UILinkPointNavigator.SetPosition(302, new Vector2((float)num114 + (float)num116 * 0.75f, (float)num115 + (float)num117 * 0.75f));
			bool flag11 = false;
			if (mouseX >= num114 && mouseX <= num114 + num116 && mouseY >= num115 && mouseY <= num115 + num117 && !PlayerInput.IgnoreMouseInterface)
			{
				num113 = 1;
				flag11 = true;
				player[myPlayer].mouseInterface = true;
				if (mouseLeft && mouseLeftRelease)
				{
					mouseLeftRelease = false;
					ItemSorting.SortInventory();
					Recipe.FindRecipes();
				}
			}
			if (flag11 != inventorySortMouseOver)
			{
				SoundEngine.PlaySound(12);
				inventorySortMouseOver = flag11;
			}
			Texture2D value6 = TextureAssets.InventorySort[inventorySortMouseOver ? 1 : 0].Value;
			spriteBatch.Draw(value6, new Vector2(num114, num115), null, Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			if (!mouseText && num113 == 1)
			{
				MouseText(Language.GetTextValue("GameUI.SortInventory"), 0, 0);
			}
		}

		private void DrawNPCHousesInUI()
		{
			UILinkPointNavigator.Shortcuts.NPCS_LastHovered = -2;
			if (mouseX > screenWidth - 64 - 28 && mouseX < (int)((float)(screenWidth - 64 - 28) + 56f * inventoryScale) && mouseY > 174 + mH && mouseY < (int)((float)(174 + mH) + 448f * inventoryScale) && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
			}
			int num = 0;
			string text = "";
			int num2 = 0;
			int num3 = 0;
			_npcTypesThatAlreadyDrewAHead.Clear();
			for (int i = 0; i < _npcIndexWhoHoldsHeadIndex.Length; i++)
			{
				_npcIndexWhoHoldsHeadIndex[i] = -1;
			}
			for (int j = 0; j < 200; j++)
			{
				if (npc[j].active && !_npcTypesThatAlreadyDrewAHead.Contains(npc[j].type))
				{
					ITownNPCProfile profile;
					int num4 = ((!TownNPCProfiles.Instance.GetProfile(npc[j].type, out profile)) ? NPC.TypeToDefaultHeadIndex(npc[j].type) : profile.GetHeadTextureIndex(npc[j]));
					if (num4 > 0 && num4 <= 45 && !NPCHeadID.Sets.CannotBeDrawnInHousingUI[num4] && _npcIndexWhoHoldsHeadIndex[num4] == -1)
					{
						_npcIndexWhoHoldsHeadIndex[num4] = j;
						_npcTypesThatAlreadyDrewAHead.Add(npc[j].type);
					}
				}
			}
			hidePVPIcons = false;
			for (int k = 0; k < TextureAssets.NpcHead.Length; k++)
			{
				if (k != 0 && _npcIndexWhoHoldsHeadIndex[k] == -1)
				{
					continue;
				}
				int num5 = _npcIndexWhoHoldsHeadIndex[k];
				int num6 = screenWidth - 64 - 28 + num3;
				int num7 = (int)((float)(174 + mH) + (float)(num * 56) * inventoryScale) + num2;
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
				if (num7 > screenHeight - 80)
				{
					num3 -= 48;
					num2 -= num7 - (174 + mH);
					num6 = screenWidth - 64 - 28 + num3;
					num7 = (int)((float)(174 + mH) + (float)(num * 56) * inventoryScale) + num2;
					UILinkPointNavigator.Shortcuts.NPCS_IconsPerColumn = num;
					if (num3 <= -144)
					{
						hidePVPIcons = true;
					}
				}
				if (mouseX >= num6 && (float)mouseX <= (float)num6 + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num7 && (float)mouseY <= (float)num7 + (float)TextureAssets.InventoryBack.Height() * inventoryScale)
				{
					UILinkPointNavigator.Shortcuts.NPCS_LastHovered = num5;
					mouseText = true;
					text = ((k != 0) ? npc[num5].FullName : Lang.inter[8].Value);
					if (!PlayerInput.IgnoreMouseInterface)
					{
						player[myPlayer].mouseInterface = true;
						if (mouseLeftRelease && mouseLeft && !PlayerInput.UsingGamepadUI && mouseItem.type == 0)
						{
							SoundEngine.PlaySound(12);
							if (k == 0)
							{
								SetMouseNPC_ToHousingQuery();
							}
							else
							{
								SetMouseNPC(num5, npc[num5].type);
							}
							mouseLeftRelease = false;
						}
					}
				}
				UILinkPointNavigator.SetPosition(600 + num, new Vector2(num6, num7) + TextureAssets.InventoryBack.Value.Size() * 0.75f);
				Texture2D value = TextureAssets.InventoryBack11.Value;
				Microsoft.Xna.Framework.Color white = inventoryBack;
				if (UILinkPointNavigator.CurrentPoint - 600 == num)
				{
					value = TextureAssets.InventoryBack14.Value;
					white = Microsoft.Xna.Framework.Color.White;
				}
				spriteBatch.Draw(value, new Vector2(num6, num7), null, white, 0f, default(Vector2), inventoryScale, SpriteEffects.None, 0f);
				color = Microsoft.Xna.Framework.Color.White;
				int num8 = k;
				float scale = 1f;
				float num9 = 0f;
				num9 = ((TextureAssets.NpcHead[num8].Width() <= TextureAssets.NpcHead[num8].Height()) ? ((float)TextureAssets.NpcHead[num8].Height()) : ((float)TextureAssets.NpcHead[num8].Width()));
				if (num9 > 36f)
				{
					scale = 36f / num9;
				}
				spriteBatch.Draw(TextureAssets.NpcHead[num8].Value, new Vector2((float)num6 + 26f * inventoryScale, (float)num7 + 26f * inventoryScale), null, color, 0f, new Vector2(TextureAssets.NpcHead[num8].Width() / 2, TextureAssets.NpcHead[num8].Height() / 2), scale, SpriteEffects.None, 0f);
				num++;
			}
			UILinkPointNavigator.Shortcuts.NPCS_IconsTotal = num;
			if (text != "" && mouseItem.type == 0)
			{
				MouseText(text, 0, 0);
			}
		}

		private static void DrawDefenseCounter(int inventoryX, int inventoryY)
		{
			Vector2 vector = new Vector2(inventoryX - 10 - 47 - 47 - 14, (float)inventoryY + (float)TextureAssets.InventoryBack.Height() * 0.5f);
			spriteBatch.Draw(TextureAssets.Extra[58].Value, vector, null, Microsoft.Xna.Framework.Color.White, 0f, TextureAssets.Extra[58].Value.Size() / 2f, inventoryScale, SpriteEffects.None, 0f);
			Vector2 value = FontAssets.MouseText.Value.MeasureString(player[myPlayer].statDefense.ToString());
			ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, player[myPlayer].statDefense.ToString(), vector - value * 0.5f * inventoryScale, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, new Vector2(inventoryScale));
			if (Utils.CenteredRectangle(vector, TextureAssets.Extra[58].Value.Size()).Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)) && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
				string value2 = player[myPlayer].statDefense + " " + Lang.inter[10].Value;
				if (!string.IsNullOrEmpty(value2))
				{
					hoverItemName = value2;
				}
			}
			UILinkPointNavigator.SetPosition(1557, vector + TextureAssets.Extra[58].Value.Size() * inventoryScale / 4f);
		}

		private static void DrawGuideCraftText(int adjY, Microsoft.Xna.Framework.Color craftingTipColor, out int inventoryX, out int inventoryY)
		{
			inventoryX = 73;
			inventoryY = 331;
			inventoryY += adjY;
			string text = null;
			_requiredObjecsForCraftingText.Clear();
			if (guideItem.IsAir)
			{
				text = Lang.inter[24].Value;
			}
			else
			{
				text = Lang.inter[21].Value + " " + guideItem.Name;
				Recipe recipe = Main.recipe[availableRecipe[focusRecipe]];
				for (int i = 0; i < Recipe.maxRequirements; i++)
				{
					int num = recipe.requiredTile[i];
					if (num == -1)
					{
						break;
					}
					int requiredTileStyle = Recipe.GetRequiredTileStyle(num);
					string mapObjectName = Lang.GetMapObjectName(MapHelper.TileToLookup(num, requiredTileStyle));
					_requiredObjecsForCraftingText.Add(mapObjectName);
				}
				if (recipe.needWater)
				{
					_requiredObjecsForCraftingText.Add(Lang.inter[53].Value);
				}
				if (recipe.needHoney)
				{
					_requiredObjecsForCraftingText.Add(Lang.inter[58].Value);
				}
				if (recipe.needLava)
				{
					_requiredObjecsForCraftingText.Add(Lang.inter[56].Value);
				}
				if (recipe.needSnowBiome)
				{
					_requiredObjecsForCraftingText.Add(Lang.inter[123].Value);
				}
				if (recipe.needGraveyardBiome)
				{
					_requiredObjecsForCraftingText.Add(Lang.inter[124].Value);
				}
				if (_requiredObjecsForCraftingText.Count == 0)
				{
					string value = Lang.inter[23].Value;
					_requiredObjecsForCraftingText.Add(value);
				}
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
			Vector2 vector = new Vector2(inventoryX + 50, inventoryY + 12);
			DynamicSpriteFont value2 = FontAssets.MouseText.Value;
			if (_requiredObjecsForCraftingText.Count > 0)
			{
				vector.Y -= 14f;
				Vector2 vector2 = vector + new Vector2(0f, 26f);
				Microsoft.Xna.Framework.Color color2 = color;
				string value3 = Lang.inter[22].Value;
				string str = string.Join(", ", _requiredObjecsForCraftingText);
				string text2 = value3 + " " + str;
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, value2, text2, vector2, color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
			}
			DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, value2, text, vector, color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
		}

		private static void DrawGuideCraftText_Old(int adjY, Microsoft.Xna.Framework.Color craftingTipColor, out int inventoryX, out int inventoryY)
		{
			inventoryX = 73;
			inventoryY = 331;
			inventoryY += adjY;
			int num = 0;
			int num2 = 0;
			inventoryX += num;
			inventoryY += num2;
			string text;
			if (guideItem.type > 0)
			{
				text = Lang.inter[21].Value + " " + guideItem.Name;
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.inter[22].Value, new Vector2(inventoryX, inventoryY + 118), craftingTipColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				int num3 = focusRecipe;
				int num4 = 0;
				for (int i = 0; i < Recipe.maxRequirements; i++)
				{
					int num5 = (i + 1) * 26;
					if (recipe[availableRecipe[num3]].requiredTile[i] == -1)
					{
						if (i == 0 && !recipe[availableRecipe[num3]].needWater && !recipe[availableRecipe[num3]].needHoney && !recipe[availableRecipe[num3]].needLava && !recipe[availableRecipe[num3]].needSnowBiome && !recipe[availableRecipe[num3]].needGraveyardBiome)
						{
							DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.inter[23].Value, new Vector2(inventoryX, inventoryY + 118 + num5), craftingTipColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
						break;
					}
					num4++;
					int num6 = recipe[availableRecipe[num3]].requiredTile[i];
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.GetMapObjectName(MapHelper.TileToLookup(num6, Recipe.GetRequiredTileStyle(num6))), new Vector2(inventoryX, inventoryY + 118 + num5), craftingTipColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (recipe[availableRecipe[num3]].needWater)
				{
					int num7 = (num4 + 1) * 26;
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.inter[53].Value, new Vector2(inventoryX, inventoryY + 118 + num7), craftingTipColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (recipe[availableRecipe[num3]].needHoney)
				{
					int num8 = (num4 + 1) * 26;
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.inter[58].Value, new Vector2(inventoryX, inventoryY + 118 + num8), craftingTipColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (recipe[availableRecipe[num3]].needLava)
				{
					int num9 = (num4 + 1) * 26;
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.inter[56].Value, new Vector2(inventoryX, inventoryY + 118 + num9), craftingTipColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (recipe[availableRecipe[num3]].needSnowBiome)
				{
					int num10 = (num4 + 1) * 26;
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.inter[123].Value, new Vector2(inventoryX, inventoryY + 118 + num10), craftingTipColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (recipe[availableRecipe[num3]].needGraveyardBiome)
				{
					int num11 = (num4 + 1) * 26;
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, Lang.inter[124].Value, new Vector2(inventoryX, inventoryY + 118 + num11), craftingTipColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			else
			{
				text = Lang.inter[24].Value;
			}
			inventoryX -= num;
			inventoryY -= num2;
			DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text, new Vector2(inventoryX + 50, inventoryY + 12), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
		}

		public static void LockCraftingForThisCraftClickDuration()
		{
			_preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = true;
		}

		private static void HoverOverCraftingItemButton(int recipeIndex)
		{
			Recipe recipe = Main.recipe[availableRecipe[recipeIndex]];
			player[myPlayer].mouseInterface = true;
			bool flag = (mouseLeftRelease && mouseLeft) || (mouseRightRelease && mouseRight);
			bool flag2 = mouseLeft || mouseRight;
			if (focusRecipe == recipeIndex && guideItem.IsAir)
			{
				bool flag3 = LocalPlayer.ItemTimeIsZero && LocalPlayer.itemAnimation == 0 && !player[myPlayer].HasLockedInventory() && !_preventCraftingBecauseClickWasUsedToChangeFocusedRecipe;
				bool num = _currentRecipeBeingCrafted != -1 && _currentRecipeBeingCrafted != availableRecipe[recipeIndex];
				bool flag4 = _currentRecipeBeingCrafted != -1 && Main.recipe[_currentRecipeBeingCrafted].createItem.maxStack == 1;
				bool flag5 = num || flag4;
				if (flag2 && !flag5 && flag3 && stackSplit <= 1)
				{
					bool usingGamepad = PlayerInput.UsingGamepad;
					bool movedAnItemToAllowCrafting;
					bool num2 = TryAllowingToCraftRecipe(recipe, usingGamepad, out movedAnItemToAllowCrafting);
					if (movedAnItemToAllowCrafting)
					{
						_preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = true;
					}
					if (num2 && !movedAnItemToAllowCrafting)
					{
						if (_currentRecipeBeingCrafted == -1)
						{
							_currentRecipeBeingCrafted = availableRecipe[recipeIndex];
						}
						ItemSlot.RefreshStackSplitCooldown();
						CraftItem(recipe);
					}
				}
			}
			else if (flag)
			{
				focusRecipe = recipeIndex;
				stackSplit = 15;
				_preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = true;
			}
			craftingHide = true;
			hoverItemName = recipe.createItem.Name;
			HoverItem = recipe.createItem.Clone();
			if (recipe.createItem.stack > 1)
			{
				hoverItemName = hoverItemName + " (" + recipe.createItem.stack + ")";
			}
			if (!flag2)
			{
				_preventCraftingBecauseClickWasUsedToChangeFocusedRecipe = false;
				_currentRecipeBeingCrafted = -1;
			}
		}

		private static bool TryAllowingToCraftRecipe(Recipe currentRecipe, bool tryFittingItemInInventoryToAllowCrafting, out bool movedAnItemToAllowCrafting)
		{
			movedAnItemToAllowCrafting = false;
			if (mouseItem.IsAir)
			{
				return true;
			}
			if (mouseItem.IsTheSameAs(currentRecipe.createItem) && mouseItem.stack + currentRecipe.createItem.stack <= mouseItem.maxStack)
			{
				return true;
			}
			if (tryFittingItemInInventoryToAllowCrafting && LocalPlayer.ItemSpace(mouseItem).CanTakeItemToPersonalInventory)
			{
				mouseItem = LocalPlayer.GetItem(myPlayer, mouseItem, GetItemSettings.InventoryUIToInventorySettingsShowAsNew);
				if (mouseItem.IsAir)
				{
					movedAnItemToAllowCrafting = true;
					return true;
				}
				if (mouseItem.IsTheSameAs(currentRecipe.createItem) && mouseItem.stack + currentRecipe.createItem.stack <= mouseItem.maxStack)
				{
					movedAnItemToAllowCrafting = true;
					return true;
				}
			}
			return false;
		}

		private static void DrawTrashItemSlot(int pivotTopLeftX, int pivotTopLeftY)
		{
			inventoryScale = 0.85f;
			int num = 448 + pivotTopLeftX;
			int num2 = 258 + pivotTopLeftY;
			if ((player[myPlayer].chest != -1 || npcShop > 0) && !recBigList)
			{
				num2 += 168;
				inventoryScale = 0.755f;
				num += 5;
			}
			new Microsoft.Xna.Framework.Color(150, 150, 150, 150);
			if (mouseX >= num && (float)mouseX <= (float)num + (float)TextureAssets.InventoryBack.Width() * inventoryScale && mouseY >= num2 && (float)mouseY <= (float)num2 + (float)TextureAssets.InventoryBack.Height() * inventoryScale && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
				ItemSlot.LeftClick(player[myPlayer].trashItem, 6);
				if (mouseLeftRelease && mouseLeft)
				{
					Recipe.FindRecipes();
				}
				ItemSlot.MouseHover(player[myPlayer].trashItem, 6);
			}
			ItemSlot.Draw(spriteBatch, player[myPlayer].trashItem, 6, new Vector2(num, num2));
		}

		private static void DrawEmoteBubblesButton(int pivotTopLeftX, int pivotTopLeftY)
		{
			inventoryScale = 0.85f;
			int num = (int)((float)(450 + pivotTopLeftX) - 56f * inventoryScale);
			int num2 = 258 + pivotTopLeftY;
			int num3 = 244;
			int width = 30;
			int num4 = 30;
			num = 534;
			num2 = num3 + num4 + 4;
			if ((player[myPlayer].chest != -1 || npcShop > 0) && !recBigList)
			{
				num2 += 168;
				inventoryScale = 0.755f;
				num += 5;
				num3 += 24;
			}
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(num, num2, (int)((float)TextureAssets.InventoryBack.Width() * inventoryScale), (int)((float)TextureAssets.InventoryBack.Height() * inventoryScale));
			rectangle = new Microsoft.Xna.Framework.Rectangle(num, num2, width, num4);
			bool flag = false;
			if (rectangle.Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)) && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
				flag = true;
				if (mouseLeft && mouseLeftRelease)
				{
					player[myPlayer].SetTalkNPC(-1);
					npcChatCornerItem = 0;
					npcChatText = "";
					mouseLeftRelease = false;
					SoundEngine.PlaySound(12);
					IngameFancyUI.OpenUIState(new UIEmotesMenu());
				}
			}
			Texture2D value = TextureAssets.EmoteMenuButton.Value;
			Vector2 position = rectangle.Center.ToVector2();
			Microsoft.Xna.Framework.Rectangle rectangle2 = value.Frame(2, 1, flag ? 1 : 0);
			rectangle2.Width -= 2;
			rectangle2.Height -= 2;
			Vector2 origin = rectangle2.Size() / 2f;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			spriteBatch.Draw(value, position, rectangle2, white, 0f, origin, 1f, SpriteEffects.None, 0f);
			UILinkPointNavigator.SetPosition(309, position);
			if (!mouseText && flag)
			{
				instance.MouseText(Language.GetTextValue("GameUI.Emote"), 0, 0);
			}
		}

		private static void DrawBestiaryIcon(int pivotTopLeftX, int pivotTopLeftY)
		{
			inventoryScale = 0.85f;
			int num = (int)((float)(450 + pivotTopLeftX) - 56f * inventoryScale * 2f);
			int num2 = 258 + pivotTopLeftY;
			int num3 = 244;
			int width = 30;
			int num4 = 30;
			num3 = 244;
			num = 498;
			num2 = num3 + num4 + 4;
			if ((player[myPlayer].chest != -1 || npcShop > 0) && !recBigList)
			{
				num2 += 168;
				inventoryScale = 0.755f;
				num += 5;
				num3 += 24;
			}
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(num, num2, (int)((float)TextureAssets.InventoryBack.Width() * inventoryScale), (int)((float)TextureAssets.InventoryBack.Height() * inventoryScale));
			rectangle = new Microsoft.Xna.Framework.Rectangle(num, num2, width, num4);
			bool flag = false;
			if (rectangle.Contains(new Microsoft.Xna.Framework.Point(mouseX, mouseY)) && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
				flag = true;
				if (mouseLeft && mouseLeftRelease)
				{
					player[myPlayer].SetTalkNPC(-1);
					npcChatCornerItem = 0;
					npcChatText = "";
					mouseLeftRelease = false;
					SoundEngine.PlaySound(12);
					IngameFancyUI.OpenUIState(BestiaryUI);
					BestiaryUI.OnOpenPage();
				}
			}
			Texture2D value = TextureAssets.BestiaryMenuButton.Value;
			Vector2 position = rectangle.Center.ToVector2();
			Microsoft.Xna.Framework.Rectangle rectangle2 = value.Frame(2, 1, flag ? 1 : 0);
			rectangle2.Width -= 2;
			rectangle2.Height -= 2;
			Vector2 origin = rectangle2.Size() / 2f;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			spriteBatch.Draw(value, position, rectangle2, white, 0f, origin, 1f, SpriteEffects.None, 0f);
			UILinkPointNavigator.SetPosition(310, position);
			if (!mouseText && flag)
			{
				instance.MouseText(Language.GetTextValue("GameUI.Bestiary"), 0, 0);
			}
		}

		private static void SetRecipeMaterialDisplayName(int i)
		{
			hoverItemName = recipe[availableRecipe[focusRecipe]].requiredItem[i].Name;
			HoverItem = recipe[availableRecipe[focusRecipe]].requiredItem[i].Clone();
			if (recipe[availableRecipe[focusRecipe]].ProcessGroupsForText(recipe[availableRecipe[focusRecipe]].requiredItem[i].type, out var theText))
			{
				HoverItem.SetNameOverride(theText);
			}
			if (recipe[availableRecipe[focusRecipe]].anyIronBar && recipe[availableRecipe[focusRecipe]].requiredItem[i].type == 22)
			{
				HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(22));
			}
			else if (recipe[availableRecipe[focusRecipe]].anyWood && recipe[availableRecipe[focusRecipe]].requiredItem[i].type == 9)
			{
				HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(9));
			}
			else if (recipe[availableRecipe[focusRecipe]].anySand && recipe[availableRecipe[focusRecipe]].requiredItem[i].type == 169)
			{
				HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.GetItemNameValue(169));
			}
			else if (recipe[availableRecipe[focusRecipe]].anyFragment && recipe[availableRecipe[focusRecipe]].requiredItem[i].type == 3458)
			{
				HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.misc[51].Value);
			}
			else if (recipe[availableRecipe[focusRecipe]].anyPressurePlate && recipe[availableRecipe[focusRecipe]].requiredItem[i].type == 542)
			{
				HoverItem.SetNameOverride(Lang.misc[37].Value + " " + Lang.misc[38].Value);
			}
			if (recipe[availableRecipe[focusRecipe]].requiredItem[i].stack > 1)
			{
				hoverItemName = hoverItemName + " (" + recipe[availableRecipe[focusRecipe]].requiredItem[i].stack + ")";
			}
		}

		private void DrawHotbarLockIcon(int pivotTopLeftX, int pivotTopLeftY, bool pushSideToolsUp)
		{
			int num = 21 + pivotTopLeftY;
			_ = player[myPlayer];
			if (pushSideToolsUp)
			{
				num = pivotTopLeftY;
			}
			float num2 = 0.9f;
			Texture2D value = TextureAssets.HbLock[(!player[myPlayer].hbLocked) ? 1 : 0].Value;
			Microsoft.Xna.Framework.Rectangle value2 = value.Frame(2);
			bool flag = false;
			if (mouseX > pivotTopLeftX && (float)mouseX < (float)pivotTopLeftX + (float)value2.Width * num2 && mouseY > num && (float)mouseY < (float)num + (float)value2.Height * num2)
			{
				flag = true;
				player[myPlayer].mouseInterface = true;
				if (!player[myPlayer].hbLocked)
				{
					MouseText(Lang.inter[5].Value, 0, 0);
				}
				else
				{
					MouseText(Lang.inter[6].Value, 0, 0);
				}
				mouseText = true;
				if (mouseLeft && mouseLeftRelease)
				{
					SoundEngine.PlaySound(22);
					player[myPlayer].hbLocked = !player[myPlayer].hbLocked;
				}
			}
			spriteBatch.Draw(value, new Vector2(pivotTopLeftX, num), value2, Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
			if (flag)
			{
				spriteBatch.Draw(value, new Vector2(pivotTopLeftX, num), value.Frame(2, 1, 1), OurFavoriteColor, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
			}
		}

		private void DrawBlockReplacementIcon(int pivotTopLeftX, int pivotTopLeftY, bool pushSideToolsUp, int gamepadPointOffset)
		{
			if (!playerInventory)
			{
				return;
			}
			int num = 44 + pivotTopLeftY;
			_ = player[myPlayer];
			if (pushSideToolsUp)
			{
				num = 23 + pivotTopLeftY;
			}
			float num2 = 0.9f;
			int num3 = 10;
			bool flag = player[myPlayer].builderAccStatus[num3] == 0;
			Texture2D value = TextureAssets.blockReplaceIcon[0].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(3, 1, (!flag) ? 1 : 0);
			bool flag2 = false;
			if (mouseX > pivotTopLeftX && (float)mouseX < (float)pivotTopLeftX + (float)rectangle.Width * num2 && mouseY > num && (float)mouseY < (float)num + (float)rectangle.Height * num2)
			{
				flag2 = true;
				player[myPlayer].mouseInterface = true;
				MouseText(flag ? Language.GetTextValue("GameUI.BlockReplacerOn") : Language.GetTextValue("GameUI.BlockReplacerOff"), 0, 0);
				mouseText = true;
				if (mouseLeft && mouseLeftRelease)
				{
					SoundEngine.PlaySound(22);
					player[myPlayer].builderAccStatus[num3] = (flag ? 1 : 0);
				}
			}
			Vector2 vector = new Vector2(pivotTopLeftX, num);
			spriteBatch.Draw(value, vector, rectangle, Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
			if (flag2)
			{
				spriteBatch.Draw(value, vector, value.Frame(3, 1, 2), OurFavoriteColor, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
			}
			UILinkPointNavigator.SetPosition(6000 + gamepadPointOffset, vector + rectangle.Size() * 0.65f);
		}

		private void DrawTorchBiomeSwapIcon(int pivotTopLeftX, int pivotTopLeftY, bool pushSideToolsUp, int gamepadPointOffset)
		{
			if (!playerInventory)
			{
				return;
			}
			int num = 68 + pivotTopLeftY;
			_ = player[myPlayer];
			if (pushSideToolsUp)
			{
				num = 47 + pivotTopLeftY;
			}
			float num2 = 0.9f;
			int num3 = 11;
			bool flag = player[myPlayer].builderAccStatus[num3] == 0;
			Texture2D value = TextureAssets.Extra[211].Value;
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(4, 1, flag ? 1 : 0);
			bool flag2 = false;
			if (mouseX > pivotTopLeftX && (float)mouseX < (float)pivotTopLeftX + (float)rectangle.Width * num2 && mouseY > num && (float)mouseY < (float)num + (float)rectangle.Height * num2)
			{
				flag2 = true;
				player[myPlayer].mouseInterface = true;
				MouseText(flag ? Language.GetTextValue("GameUI.TorchTypeSwapperOn") : Language.GetTextValue("GameUI.TorchTypeSwapperOff"), 0, 0);
				mouseText = true;
				if (mouseLeft && mouseLeftRelease)
				{
					SoundEngine.PlaySound(22);
					player[myPlayer].builderAccStatus[num3] = (flag ? 1 : 0);
				}
			}
			Vector2 vector = new Vector2(pivotTopLeftX, num);
			spriteBatch.Draw(value, vector, rectangle, Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
			if (flag2)
			{
				spriteBatch.Draw(value, vector, value.Frame(4, 1, flag ? 3 : 2), OurFavoriteColor, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
			}
			UILinkPointNavigator.SetPosition(6000 + gamepadPointOffset, vector + rectangle.Size() * 0.65f);
		}

		public static void CraftItem(Recipe r)
		{
			int stack = mouseItem.stack;
			mouseItem = r.createItem.Clone();
			mouseItem.stack += stack;
			if (stack <= 0)
			{
				mouseItem.Prefix(-1);
			}
			mouseItem.position.X = player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(mouseItem.width / 2);
			mouseItem.position.Y = player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(mouseItem.height / 2);
			PopupText.NewText(PopupTextContext.ItemCraft, mouseItem, r.createItem.stack);
			r.Create();
			if (mouseItem.type > 0 || r.createItem.type > 0)
			{
				SoundEngine.PlaySound(7);
			}
		}

		private static void DrawPVPIcons()
		{
			if (EquipPage == 1)
			{
				if (hidePVPIcons)
				{
					return;
				}
			}
			else
			{
				hidePVPIcons = false;
			}
			inventoryScale = 0.6f;
			int num = (int)(52f * inventoryScale);
			int num2 = 707 - num * 4 + screenWidth - 800;
			int num3 = 114 + mH + num * 2 + num / 2 - 12;
			if (EquipPage == 2)
			{
				num2 += num + num / 2;
			}
			int num4 = (player[myPlayer].hostile ? 2 : 0);
			if (mouseX > num2 - 7 && mouseX < num2 + 25 && mouseY > num3 - 2 && mouseY < num3 + 37 && !PlayerInput.IgnoreMouseInterface)
			{
				player[myPlayer].mouseInterface = true;
				if (teamCooldown == 0)
				{
					num4++;
				}
				if (mouseLeft && mouseLeftRelease && teamCooldown == 0)
				{
					teamCooldown = teamCooldownLen;
					SoundEngine.PlaySound(12);
					player[myPlayer].hostile = !player[myPlayer].hostile;
					NetMessage.SendData(30, -1, -1, null, myPlayer);
				}
			}
			Microsoft.Xna.Framework.Rectangle rectangle = TextureAssets.Pvp[0].Frame(4, 6);
			rectangle.Location = new Microsoft.Xna.Framework.Point(rectangle.Width * num4, rectangle.Height * player[myPlayer].team);
			rectangle.Width -= 2;
			rectangle.Height--;
			spriteBatch.Draw(TextureAssets.Pvp[0].Value, new Vector2(num2 - 10, num3), rectangle, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One, SpriteEffects.None, 0f);
			UILinkPointNavigator.SetPosition(1550, new Vector2(num2 - 10, num3) + rectangle.Size() * 0.75f);
			num3 += 60;
			num2 -= 10;
			rectangle = TextureAssets.Pvp[1].Frame(6);
			Microsoft.Xna.Framework.Rectangle r = rectangle;
			for (int i = 0; i < 6; i++)
			{
				r.Location = new Microsoft.Xna.Framework.Point(num2 + i % 2 * 20, num3 + i / 2 * 20);
				rectangle.X = rectangle.Width * i;
				bool flag = false;
				if (r.Contains(MouseScreen.ToPoint()) && !PlayerInput.IgnoreMouseInterface)
				{
					player[myPlayer].mouseInterface = true;
					if (teamCooldown == 0)
					{
						flag = true;
					}
					if (mouseLeft && mouseLeftRelease && player[myPlayer].team != i && teamCooldown == 0)
					{
						if (!player[myPlayer].TeamChangeAllowed())
						{
							NewText(Lang.misc[84].Value, byte.MaxValue, 240, 20);
						}
						else
						{
							teamCooldown = teamCooldownLen;
							SoundEngine.PlaySound(12);
							player[myPlayer].team = i;
							NetMessage.SendData(45, -1, -1, null, myPlayer);
						}
					}
				}
				r.Width = rectangle.Width - 2;
				if (flag)
				{
					spriteBatch.Draw(TextureAssets.Pvp[2].Value, r.Location.ToVector2() + new Vector2(-2f), Microsoft.Xna.Framework.Color.White);
				}
				Microsoft.Xna.Framework.Rectangle value = rectangle;
				value.Width -= 2;
				spriteBatch.Draw(TextureAssets.Pvp[1].Value, r.Location.ToVector2(), value, Microsoft.Xna.Framework.Color.White);
				UILinkPointNavigator.SetPosition(1550 + i + 1, r.Location.ToVector2() + r.Size() * 0.75f);
			}
		}

		private static int DrawPageIcons(int yPos)
		{
			int num = -1;
			Vector2 vector = new Vector2(screenWidth - 162, yPos);
			vector.X += 82f;
			Texture2D value = TextureAssets.EquipPage[(EquipPage == 2) ? 3 : 2].Value;
			if (Collision.CheckAABBvAABBCollision(vector, value.Size(), new Vector2(mouseX, mouseY), Vector2.One) && (mouseItem.stack < 1 || mouseItem.dye > 0))
			{
				num = 2;
			}
			if (num == 2)
			{
				spriteBatch.Draw(TextureAssets.EquipPage[6].Value, vector, null, OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
			}
			spriteBatch.Draw(value, vector, null, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			UILinkPointNavigator.SetPosition(305, vector + value.Size() * 0.75f);
			vector.X -= 48f;
			value = TextureAssets.EquipPage[(EquipPage == 1) ? 5 : 4].Value;
			if (Collision.CheckAABBvAABBCollision(vector, value.Size(), new Vector2(mouseX, mouseY), Vector2.One) && mouseItem.stack < 1)
			{
				num = 1;
			}
			if (num == 1)
			{
				spriteBatch.Draw(TextureAssets.EquipPage[7].Value, vector, null, OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
			}
			spriteBatch.Draw(value, vector, null, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			UILinkPointNavigator.SetPosition(306, vector + value.Size() * 0.75f);
			vector.X -= 48f;
			value = TextureAssets.EquipPage[(EquipPage == 3) ? 10 : 8].Value;
			if (Collision.CheckAABBvAABBCollision(vector, value.Size(), new Vector2(mouseX, mouseY), Vector2.One) && mouseItem.stack < 1)
			{
				num = 3;
			}
			if (num == 3 && !CaptureModeDisabled)
			{
				spriteBatch.Draw(TextureAssets.EquipPage[9].Value, vector, null, OurFavoriteColor, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			}
			spriteBatch.Draw(value, vector, null, CaptureModeDisabled ? Microsoft.Xna.Framework.Color.Red : Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			UILinkPointNavigator.SetPosition(307, vector + value.Size() * 0.75f);
			if (num != -1)
			{
				player[myPlayer].mouseInterface = true;
				if (mouseLeft && mouseLeftRelease)
				{
					bool flag = true;
					if (num == 3)
					{
						if (CaptureModeDisabled)
						{
							flag = false;
						}
						else if (PlayerInput.UsingGamepad)
						{
							CaptureInterface.QuickScreenshot();
						}
						else
						{
							CaptureManager.Instance.Active = true;
							blockMouse = true;
						}
					}
					else if (EquipPageSelected != num)
					{
						EquipPageSelected = num;
					}
					else
					{
						EquipPageSelected = 0;
					}
					if (flag)
					{
						SoundEngine.PlaySound(10);
					}
				}
			}
			ItemSlot.SelectEquipPage(mouseItem);
			if (EquipPage == -1)
			{
				EquipPage = EquipPageSelected;
			}
			return num;
		}

		public void DrawMouseOver()
		{
			PlayerInput.SetZoom_Unscaled();
			PlayerInput.SetZoom_MouseInWorld();
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)((float)mouseX + screenPosition.X), (int)((float)mouseY + screenPosition.Y), 1, 1);
			if (player[myPlayer].gravDir == -1f)
			{
				rectangle.Y = (int)screenPosition.Y + screenHeight - mouseY;
			}
			PlayerInput.SetZoom_UI();
			if (!LocalPlayer.ghost)
			{
				ActivePlayerResourcesSet.TryToHover();
			}
			AchievementAdvisor.DrawMouseHover();
			IngameOptions.MouseOver();
			IngameFancyUI.MouseOver();
			if (!mouseText)
			{
				for (int i = 0; i < 400; i++)
				{
					if (!item[i].active)
					{
						continue;
					}
					Microsoft.Xna.Framework.Rectangle drawHitbox = Item.GetDrawHitbox(item[i].type, null);
					Vector2 bottom = item[i].Bottom;
					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(bottom.X - (float)drawHitbox.Width * 0.5f), (int)(bottom.Y - (float)drawHitbox.Height), drawHitbox.Width, drawHitbox.Height);
					if (rectangle.Intersects(value))
					{
						player[myPlayer].cursorItemIconEnabled = false;
						string text = item[i].AffixName();
						if (item[i].stack > 1)
						{
							text = text + " (" + item[i].stack + ")";
						}
						if (item[i].playerIndexTheItemIsReservedFor < 255 && showItemOwner)
						{
							text = text + " <" + player[item[i].playerIndexTheItemIsReservedFor].name + ">";
						}
						rare = item[i].rare;
						if (item[i].expert)
						{
							rare = -12;
						}
						MouseTextHackZoom(text, rare, 0);
						mouseText = true;
						break;
					}
				}
			}
			for (int j = 0; j < 255; j++)
			{
				if (!player[j].active || myPlayer == j || player[j].dead || player[j].ShouldNotDraw || !((double)player[j].stealth > 0.5))
				{
					continue;
				}
				Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle((int)((double)player[j].position.X + (double)player[j].width * 0.5 - 16.0), (int)(player[j].position.Y + (float)player[j].height - 48f), 32, 48);
				if (!mouseText && rectangle.Intersects(value2))
				{
					player[myPlayer].cursorItemIconEnabled = false;
					int num = player[j].statLife;
					if (num < 0)
					{
						num = 0;
					}
					string text2 = player[j].name + ": " + num + "/" + player[j].statLifeMax2;
					if (player[j].hostile)
					{
						text2 = text2 + " " + Language.GetTextValue("Game.PvPFlag");
					}
					MouseTextHackZoom(text2, 0, player[j].difficulty);
					mouseText = true;
				}
			}
			HoveringOverAnNPC = false;
			if (!mouseText)
			{
				for (int k = 0; k < 200; k++)
				{
					if (!npc[k].active)
					{
						continue;
					}
					int type = npc[k].type;
					LoadNPC(type);
					npc[k].position += npc[k].netOffset;
					Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle((int)npc[k].Bottom.X - npc[k].frame.Width / 2, (int)npc[k].Bottom.Y - npc[k].frame.Height, npc[k].frame.Width, npc[k].frame.Height);
					if (npc[k].type >= 87 && npc[k].type <= 92)
					{
						value3 = new Microsoft.Xna.Framework.Rectangle((int)((double)npc[k].position.X + (double)npc[k].width * 0.5 - 32.0), (int)((double)npc[k].position.Y + (double)npc[k].height * 0.5 - 32.0), 64, 64);
					}
					bool flag = rectangle.Intersects(value3);
					bool flag2 = flag || (SmartInteractShowingGenuine && SmartInteractNPC == k);
					if (flag2 && ((npc[k].type != 85 && npc[k].type != 341 && npc[k].type != 629 && npc[k].aiStyle != 87) || npc[k].ai[0] != 0f) && npc[k].type != 488)
					{
						bool flag3 = SmartInteractShowingGenuine && SmartInteractNPC == k;
						if (npc[k].townNPC || npc[k].type == 105 || npc[k].type == 106 || npc[k].type == 123 || npc[k].type == 354 || npc[k].type == 376 || npc[k].type == 579 || npc[k].type == 453 || npc[k].type == 589)
						{
							Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int)(player[myPlayer].position.X + (float)(player[myPlayer].width / 2) - (float)(Player.tileRangeX * 16)), (int)(player[myPlayer].position.Y + (float)(player[myPlayer].height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
							Microsoft.Xna.Framework.Rectangle value4 = new Microsoft.Xna.Framework.Rectangle((int)npc[k].position.X, (int)npc[k].position.Y, npc[k].width, npc[k].height);
							if (rectangle2.Intersects(value4))
							{
								flag3 = true;
							}
						}
						if (player[myPlayer].ownedProjectileCounts[651] > 0)
						{
							flag3 = false;
						}
						if (flag3 && !player[myPlayer].dead)
						{
							PlayerInput.SetZoom_MouseInWorld();
							HoveringOverAnNPC = true;
							currentNPCShowingChatBubble = k;
							if (mouseRight && npcChatRelease)
							{
								npcChatRelease = false;
								if (PlayerInput.UsingGamepad)
								{
									player[myPlayer].releaseInventory = false;
								}
								if (player[myPlayer].talkNPC != k && !player[myPlayer].tileInteractionHappened)
								{
									CancelHairWindow();
									SetNPCShopIndex(0);
									InGuideCraftMenu = false;
									player[myPlayer].dropItemCheck();
									npcChatCornerItem = 0;
									player[myPlayer].sign = -1;
									editSign = false;
									player[myPlayer].SetTalkNPC(k);
									playerInventory = false;
									player[myPlayer].chest = -1;
									Recipe.FindRecipes();
									npcChatText = npc[k].GetChat();
									SoundEngine.PlaySound(24);
								}
							}
						}
						if (flag && !player[myPlayer].mouseInterface)
						{
							player[myPlayer].cursorItemIconEnabled = false;
							string text3 = npc[k].GivenOrTypeName;
							int num2 = k;
							if (npc[k].realLife >= 0)
							{
								num2 = npc[k].realLife;
							}
							if (npc[num2].lifeMax > 1 && !npc[num2].dontTakeDamage)
							{
								text3 = text3 + ": " + npc[num2].life + "/" + npc[num2].lifeMax;
							}
							MouseTextHackZoom(text3);
							mouseText = true;
							npc[k].position -= npc[k].netOffset;
							break;
						}
						if (flag2)
						{
							npc[k].position -= npc[k].netOffset;
							break;
						}
					}
					npc[k].position -= npc[k].netOffset;
				}
			}
			if (!mouseText && signHover != -1 && sign[signHover] != null && !player[myPlayer].mouseInterface && !string.IsNullOrWhiteSpace(sign[signHover].text))
			{
				int lineAmount;
				string[] array = Utils.WordwrapString(sign[signHover].text, FontAssets.MouseText.Value, 460, 10, out lineAmount);
				lineAmount++;
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, null, null, null, null, null, _uiScaleMatrix);
				PlayerInput.SetZoom_UI();
				int num3 = screenWidth;
				int num4 = screenHeight;
				int num5 = mouseX;
				int num6 = mouseY;
				PlayerInput.SetZoom_UI();
				PlayerInput.SetZoom_Test();
				float num7 = 0f;
				for (int l = 0; l < lineAmount; l++)
				{
					float x = FontAssets.MouseText.Value.MeasureString(array[l]).X;
					if (num7 < x)
					{
						num7 = x;
					}
				}
				if (num7 > 460f)
				{
					num7 = 460f;
				}
				bool settingsEnabled_OpaqueBoxBehindTooltips = SettingsEnabled_OpaqueBoxBehindTooltips;
				Vector2 vector = new Vector2(num5, num6) + new Vector2(16f);
				if (settingsEnabled_OpaqueBoxBehindTooltips)
				{
					vector += new Vector2(8f, 2f);
				}
				if (vector.Y > (float)(num4 - 30 * lineAmount))
				{
					vector.Y = num4 - 30 * lineAmount;
				}
				if (vector.X > (float)num3 - num7)
				{
					vector.X = (float)num3 - num7;
				}
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
				if (settingsEnabled_OpaqueBoxBehindTooltips)
				{
					color = Microsoft.Xna.Framework.Color.Lerp(color, Microsoft.Xna.Framework.Color.White, 1f);
					int num8 = 10;
					int num9 = 5;
					Utils.DrawInvBG(spriteBatch, new Microsoft.Xna.Framework.Rectangle((int)vector.X - num8, (int)vector.Y - num9, (int)num7 + num8 * 2, 30 * lineAmount + num9 + num9 / 2), new Microsoft.Xna.Framework.Color(23, 25, 81, 255) * 0.925f * 0.85f);
				}
				for (int m = 0; m < lineAmount; m++)
				{
					Utils.DrawBorderStringFourWay(spriteBatch, FontAssets.MouseText.Value, array[m], vector.X, vector.Y + (float)(m * 30), color, Microsoft.Xna.Framework.Color.Black, Vector2.Zero);
				}
				mouseText = true;
			}
			PlayerInput.SetZoom_UI();
		}

		private static void DrawNPCChatBubble(int i)
		{
			int num = -(npc[i].width / 2 + 8);
			float num2 = npc[i].position.Y - (float)TextureAssets.Chat.Height() - (float)(int)screenPosition.Y;
			if (npc[i].type == 637 && npc[i].ai[0] == 5f)
			{
				num2 -= 18f;
			}
			SpriteEffects spriteEffects = SpriteEffects.None;
			if (npc[i].spriteDirection == -1)
			{
				spriteEffects = SpriteEffects.FlipHorizontally;
				num = npc[i].width / 2 + 8;
			}
			if (player[myPlayer].gravDir != 1f)
			{
				spriteEffects |= SpriteEffects.FlipVertically;
				num2 = (float)screenHeight - num2 - (float)TextureAssets.Chat.Height();
			}
			Vector2 position = new Vector2(npc[i].position.X + (float)(npc[i].width / 2) - screenPosition.X - (float)(TextureAssets.Chat.Width() / 2) - (float)num, num2);
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Deferred, null, SamplerState.PointClamp, null, null, null, GameViewMatrix.ZoomMatrix);
			PlayerInput.SetZoom_UI();
			spriteBatch.Draw(TextureAssets.Chat.Value, position, new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chat.Width(), TextureAssets.Chat.Height()), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, spriteEffects, 0f);
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Deferred, null, null, null, null, null, _uiScaleMatrix);
		}

		public void GUIBarsDraw()
		{
			if (ignoreErrors)
			{
				try
				{
					GUIBarsDrawInner();
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else
			{
				GUIBarsDrawInner();
			}
		}

		protected void GUIBarsDrawInner()
		{
			ActivePlayerResourcesSet.Draw();
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, UIScaleMatrix);
			DrawInterface_Resources_Breath();
			DrawInterface_Resources_ClearBuffs();
			if (!ingameOptionsWindow && !playerInventory && !inFancyUI)
			{
				DrawInterface_Resources_Buffs();
			}
		}

		private static void DrawInterface_Resources_ClearBuffs()
		{
			buffString = "";
			bannerMouseOver = false;
			if (!recBigList)
			{
				recStart = 0;
			}
		}

		private void DrawInterface_Resources_Buffs()
		{
			recBigList = false;
			int num = -1;
			int num2 = 11;
			for (int i = 0; i < 22; i++)
			{
				if (player[myPlayer].buffType[i] > 0)
				{
					_ = player[myPlayer].buffType[i];
					int x = 32 + i * 38;
					int num3 = 76;
					if (i >= num2)
					{
						x = 32 + (i - num2) * 38;
						num3 += 50;
					}
					num = DrawBuffIcon(num, i, x, num3);
				}
				else
				{
					buffAlpha[i] = 0.4f;
				}
			}
			if (num < 0)
			{
				return;
			}
			int num4 = player[myPlayer].buffType[num];
			if (num4 > 0)
			{
				string buffName = Lang.GetBuffName(num4);
				string buffTooltip = GetBuffTooltip(player[myPlayer], num4);
				if (num4 == 147)
				{
					bannerMouseOver = true;
				}
				if (meleeBuff[num4])
				{
					MouseTextHackZoom(buffName, -10, 0, buffTooltip);
				}
				else
				{
					MouseTextHackZoom(buffName, buffTooltip);
				}
			}
		}

		private static string GetBuffTooltip(Player player, int buffType)
		{
			string text = Lang.GetBuffDescription(buffType);
			switch (buffType)
			{
			case 26:
				if (expertMode)
				{
					text = Language.GetTextValue("BuffDescription.WellFed_Expert");
				}
				break;
			case 206:
				if (expertMode)
				{
					text = Language.GetTextValue("BuffDescription.WellFed2_Expert");
				}
				break;
			case 207:
				if (expertMode)
				{
					text = Language.GetTextValue("BuffDescription.WellFed3_Expert");
				}
				break;
			case 94:
			{
				int num = (int)(player.manaSickReduction * 100f) + 1;
				text = text + num + "%";
				break;
			}
			}
			return text;
		}

		private static bool TryGetBuffTime(int buffSlotOnPlayer, out int buffTimeValue)
		{
			int num = player[myPlayer].buffType[buffSlotOnPlayer];
			buffTimeValue = 0;
			if (!vanityPet[num] && !lightPet[num] && !buffNoTimeDisplay[num] && (!player[myPlayer].honeyWet || num != 48) && (!player[myPlayer].wet || !expertMode || num != 46))
			{
				buffTimeValue = player[myPlayer].buffTime[buffSlotOnPlayer];
				return true;
			}
			return false;
		}

		private static int DrawBuffIcon(int drawBuffText, int buffSlotOnPlayer, int x, int y)
		{
			int num = player[myPlayer].buffType[buffSlotOnPlayer];
			if (num == 0)
			{
				return drawBuffText;
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(buffAlpha[buffSlotOnPlayer], buffAlpha[buffSlotOnPlayer], buffAlpha[buffSlotOnPlayer], buffAlpha[buffSlotOnPlayer]);
			spriteBatch.Draw(TextureAssets.Buff[num].Value, new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Buff[num].Width(), TextureAssets.Buff[num].Height()), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			if (TryGetBuffTime(buffSlotOnPlayer, out var buffTimeValue) && buffTimeValue > 2)
			{
				string text = Lang.LocalizedDuration(new TimeSpan(0, 0, buffTimeValue / 60), abbreviated: true, showAllAvailableUnits: false);
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.ItemStack.Value, text, new Vector2(x, y + TextureAssets.Buff[num].Height()), color, 0f, default(Vector2), 0.8f, SpriteEffects.None, 0f);
			}
			if (mouseX < x + TextureAssets.Buff[num].Width() && mouseY < y + TextureAssets.Buff[num].Height() && mouseX > x && mouseY > y)
			{
				drawBuffText = buffSlotOnPlayer;
				buffAlpha[buffSlotOnPlayer] += 0.1f;
				bool flag = mouseRight && mouseRightRelease;
				if (PlayerInput.UsingGamepad)
				{
					flag = mouseLeft && mouseLeftRelease && playerInventory;
					if (playerInventory)
					{
						player[myPlayer].mouseInterface = true;
					}
				}
				else
				{
					player[myPlayer].mouseInterface = true;
				}
				if (flag)
				{
					TryRemovingBuff(buffSlotOnPlayer, num);
				}
			}
			else
			{
				buffAlpha[buffSlotOnPlayer] -= 0.05f;
			}
			if (buffAlpha[buffSlotOnPlayer] > 1f)
			{
				buffAlpha[buffSlotOnPlayer] = 1f;
			}
			else if ((double)buffAlpha[buffSlotOnPlayer] < 0.4)
			{
				buffAlpha[buffSlotOnPlayer] = 0.4f;
			}
			if (PlayerInput.UsingGamepad && !playerInventory)
			{
				drawBuffText = -1;
			}
			return drawBuffText;
		}

		private static void TryRemovingBuff(int i, int b)
		{
			bool flag = false;
			if (!debuff[b] && b != 60 && b != 151)
			{
				if (player[myPlayer].mount.Active && player[myPlayer].mount.CheckBuff(b))
				{
					player[myPlayer].mount.Dismount(player[myPlayer]);
					flag = true;
				}
				TryRemovingBuff_CheckBuffHideMisc(0, b);
				TryRemovingBuff_CheckBuffHideMisc(1, b);
				SoundEngine.PlaySound(12);
				if (!flag)
				{
					player[myPlayer].DelBuff(i);
				}
			}
		}

		private static void TryRemovingBuff_CheckBuffHideMisc(int slot, int buffID)
		{
			if (!player[myPlayer].hideMisc[slot])
			{
				bool flag = player[myPlayer].miscEquips[slot].buffType == buffID;
				if (!flag && (buffID == 102 || buffID == 101))
				{
					flag = player[myPlayer].miscEquips[slot].buffType == 27;
				}
				if (flag)
				{
					player[myPlayer].hideMisc[slot] = true;
				}
			}
		}

		private static void DrawInterface_Resources_Breath()
		{
			bool flag = false;
			if (player[myPlayer].dead)
			{
				return;
			}
			if (player[myPlayer].lavaTime < player[myPlayer].lavaMax && player[myPlayer].lavaWet)
			{
				flag = true;
			}
			else if (player[myPlayer].lavaTime < player[myPlayer].lavaMax && player[myPlayer].breath == player[myPlayer].breathMax)
			{
				flag = true;
			}
			Vector2 value = player[myPlayer].Top + new Vector2(0f, player[myPlayer].gfxOffY);
			if (playerInventory && screenHeight < 1000)
			{
				value.Y += player[myPlayer].height - 20;
			}
			value = Vector2.Transform(value - screenPosition, GameViewMatrix.ZoomMatrix);
			if (!playerInventory || screenHeight >= 1000)
			{
				value.Y -= 100f;
			}
			value /= UIScale;
			if (ingameOptionsWindow || InGameUI.IsVisible)
			{
				value = new Vector2(screenWidth / 2, screenHeight / 2 + 236);
				if (InGameUI.IsVisible)
				{
					value.Y = screenHeight - 64;
				}
			}
			if (player[myPlayer].breath < player[myPlayer].breathMax && !player[myPlayer].ghost && !flag)
			{
				_ = player[myPlayer].breathMax / 20;
				int num = 20;
				for (int i = 1; i < player[myPlayer].breathMax / num + 1; i++)
				{
					int num2 = 255;
					float num3 = 1f;
					if (player[myPlayer].breath >= i * num)
					{
						num2 = 255;
					}
					else
					{
						float num4 = (float)(player[myPlayer].breath - (i - 1) * num) / (float)num;
						num2 = (int)(30f + 225f * num4);
						if (num2 < 30)
						{
							num2 = 30;
						}
						num3 = num4 / 4f + 0.75f;
						if ((double)num3 < 0.75)
						{
							num3 = 0.75f;
						}
					}
					int num5 = 0;
					int num6 = 0;
					if (i > 10)
					{
						num5 -= 260;
						num6 += 26;
					}
					spriteBatch.Draw(TextureAssets.Bubble.Value, value + new Vector2((float)(26 * (i - 1) + num5) - 125f, 32f + ((float)TextureAssets.Bubble.Height() - (float)TextureAssets.Bubble.Height() * num3) / 2f + (float)num6), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Bubble.Width(), TextureAssets.Bubble.Height()), new Microsoft.Xna.Framework.Color(num2, num2, num2, num2), 0f, default(Vector2), num3, SpriteEffects.None, 0f);
				}
			}
			if (!(player[myPlayer].lavaTime < player[myPlayer].lavaMax && !player[myPlayer].ghost && flag))
			{
				return;
			}
			int num7 = player[myPlayer].lavaMax / 10;
			_ = player[myPlayer].breathMax / num7;
			for (int j = 1; j < player[myPlayer].lavaMax / num7 + 1; j++)
			{
				int num8 = 255;
				float num9 = 1f;
				if (player[myPlayer].lavaTime >= j * num7)
				{
					num8 = 255;
				}
				else
				{
					float num10 = (float)(player[myPlayer].lavaTime - (j - 1) * num7) / (float)num7;
					num8 = (int)(30f + 225f * num10);
					if (num8 < 30)
					{
						num8 = 30;
					}
					num9 = num10 / 4f + 0.75f;
					if ((double)num9 < 0.75)
					{
						num9 = 0.75f;
					}
				}
				int num11 = 0;
				int num12 = 0;
				if (j > 10)
				{
					num11 -= 260;
					num12 += 26;
				}
				spriteBatch.Draw(TextureAssets.Flame.Value, value + new Vector2((float)(26 * (j - 1) + num11) - 125f, 32f + ((float)TextureAssets.Flame.Height() - (float)TextureAssets.Flame.Height() * num9) / 2f + (float)num12), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Bubble.Width(), TextureAssets.Bubble.Height()), new Microsoft.Xna.Framework.Color(num8, num8, num8, num8), 0f, default(Vector2), num9, SpriteEffects.None, 0f);
			}
		}

		private static void DrawInterface_Resources_GolfPower()
		{
			Projectile projectile = null;
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile2 = Main.projectile[i];
				if (projectile2.active && projectile2.owner == myPlayer && projectile2.type == 722)
				{
					projectile = projectile2;
					break;
				}
			}
			if (projectile == null)
			{
				return;
			}
			Projectile projectile3 = GolfHelper.FindGolfBallForHelper(projectile);
			if (projectile3 != null)
			{
				float relativeStrength = GolfHelper.CalculateShotStrength(projectile, projectile3).RelativeStrength;
				if (!(relativeStrength < 0.001f))
				{
					Vector2 position = LocalPlayer.Bottom - Camera.ScaledPosition;
					position *= GameViewMatrix.Zoom;
					position /= UIScale;
					position.X -= 27f;
					position.Y += 14f;
					spriteBatch.Draw(TextureAssets.GolfSwingBarPanel.Value, position, null, Microsoft.Xna.Framework.Color.White);
					spriteBatch.Draw(TextureAssets.GolfSwingBarFill.Value, position, new Microsoft.Xna.Framework.Rectangle(0, 0, (int)(54f * relativeStrength), 14), Microsoft.Xna.Framework.Color.White);
				}
			}
		}

		private static void DrawInterface_GolfBallIndicator()
		{
			if (!Item.IsAGolfingItem(LocalPlayer.HeldItem))
			{
				return;
			}
			Projectile lastHitBall = LocalGolfState.GetLastHitBall();
			if (lastHitBall != null && GolfHelper.IsGolfBallResting(lastHitBall))
			{
				Vector2 vector = lastHitBall.Top - Camera.ScaledPosition;
				vector *= GameViewMatrix.Zoom;
				vector /= UIScale;
				float scale = MathHelper.Clamp(((LocalPlayer.position - lastHitBall.position).Length() - 150f) / 50f, 0f, 1f);
				Vector2 vector2 = Vector2.Clamp(vector, new Vector2(20f), Camera.UnscaledSize - new Vector2(20f));
				float num = 0f;
				if (vector2 != vector)
				{
					num = (vector2 - vector).ToRotation() + (float)Math.PI / 2f;
				}
				vector2 -= (num + (float)Math.PI / 2f).ToRotationVector2() * (((float)Math.Sin(GlobalTimeWrappedHourly * 4f) * 0.5f + 0.5f) * 5f + 14f);
				Texture2D value = TextureAssets.GolfBallArrow.Value;
				Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(2);
				Vector2 origin = rectangle.Size() * new Vector2(0.5f, 1f);
				Microsoft.Xna.Framework.Rectangle value2 = value.Frame(2, 1, 1);
				spriteBatch.Draw(TextureAssets.GolfBallArrowShadow.Value, vector2 + new Vector2(-4f, 4f) * 1.5f, rectangle, Microsoft.Xna.Framework.Color.White * scale, num, origin, 1.5f, SpriteEffects.None, 0f);
				float amount = (float)Math.Sin(GlobalTimeWrappedHourly * 4f) * 0.5f + 0.5f;
				for (float num2 = 0f; num2 < 1f; num2 += 0.25f)
				{
					spriteBatch.Draw(value, vector2 + ((float)Math.PI * 2f * num2 + num).ToRotationVector2() * MathHelper.Lerp(2f, 2f, amount), value2, Microsoft.Xna.Framework.Color.Black * scale * MathHelper.Lerp(1f, 1f, amount), num, origin, 1.5f, SpriteEffects.None, 0f);
				}
				for (float num3 = 0f; num3 < 1f; num3 += 0.25f)
				{
					spriteBatch.Draw(value, vector2 + ((float)Math.PI * 2f * num3 + num).ToRotationVector2() * MathHelper.Lerp(0f, 0f, amount), value2, Microsoft.Xna.Framework.Color.White * scale * MathHelper.Lerp(0.8f, 0.8f, amount), num, origin, 1.5f, SpriteEffects.None, 0f);
				}
				spriteBatch.Draw(value, vector2, rectangle, mouseColor * scale, num, origin, 1.5f, SpriteEffects.None, 0f);
			}
		}

		protected void GUIHotbarDrawInner()
		{
			if (playerInventory || player[myPlayer].ghost)
			{
				return;
			}
			string text = Lang.inter[37].Value;
			if (player[myPlayer].inventory[player[myPlayer].selectedItem].Name != null && player[myPlayer].inventory[player[myPlayer].selectedItem].Name != "")
			{
				text = player[myPlayer].inventory[player[myPlayer].selectedItem].AffixName();
			}
			Vector2 vector = FontAssets.MouseText.Value.MeasureString(text) / 2f;
			DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text, new Vector2(236f - vector.X, 0f), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			int num = 20;
			for (int i = 0; i < 10; i++)
			{
				if (i == player[myPlayer].selectedItem)
				{
					if (hotbarScale[i] < 1f)
					{
						hotbarScale[i] += 0.05f;
					}
				}
				else if ((double)hotbarScale[i] > 0.75)
				{
					hotbarScale[i] -= 0.05f;
				}
				float num2 = hotbarScale[i];
				int num3 = (int)(20f + 22f * (1f - num2));
				int a = (int)(75f + 150f * num2);
				Microsoft.Xna.Framework.Color lightColor = new Microsoft.Xna.Framework.Color(255, 255, 255, a);
				if (!player[myPlayer].hbLocked && !PlayerInput.IgnoreMouseInterface && mouseX >= num && (float)mouseX <= (float)num + (float)TextureAssets.InventoryBack.Width() * hotbarScale[i] && mouseY >= num3 && (float)mouseY <= (float)num3 + (float)TextureAssets.InventoryBack.Height() * hotbarScale[i] && !player[myPlayer].channel)
				{
					player[myPlayer].mouseInterface = true;
					player[myPlayer].cursorItemIconEnabled = false;
					if (mouseLeft && !player[myPlayer].hbLocked && !blockMouse)
					{
						player[myPlayer].changeItem = i;
					}
					hoverItemName = player[myPlayer].inventory[i].AffixName();
					if (player[myPlayer].inventory[i].stack > 1)
					{
						hoverItemName = hoverItemName + " (" + player[myPlayer].inventory[i].stack + ")";
					}
					rare = player[myPlayer].inventory[i].rare;
				}
				float num4 = inventoryScale;
				inventoryScale = num2;
				ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 13, i, new Vector2(num, num3), lightColor);
				inventoryScale = num4;
				num += (int)((float)TextureAssets.InventoryBack.Width() * hotbarScale[i]) + 4;
			}
			int selectedItem = player[myPlayer].selectedItem;
			if (selectedItem >= 10 && (selectedItem != 58 || mouseItem.type > 0))
			{
				float num5 = 1f;
				int num6 = (int)(20f + 22f * (1f - num5));
				int a2 = (int)(75f + 150f * num5);
				Microsoft.Xna.Framework.Color lightColor2 = new Microsoft.Xna.Framework.Color(255, 255, 255, a2);
				float num7 = inventoryScale;
				inventoryScale = num5;
				ItemSlot.Draw(spriteBatch, player[myPlayer].inventory, 13, selectedItem, new Vector2(num, num6), lightColor2);
				inventoryScale = num7;
			}
		}

		public static void OpenHairWindow()
		{
			hBar = -1f;
			lBar = -1f;
			sBar = -1f;
			playerInventory = false;
			npcChatText = "";
			oldHairStyle = player[myPlayer].hair;
			oldHairColor = player[myPlayer].hairColor;
			hairWindow = true;
			SoundEngine.PlaySound(10);
		}

		public static void CancelHairWindow()
		{
			if (hairWindow)
			{
				player[myPlayer].hair = oldHairStyle;
				player[myPlayer].hairColor = oldHairColor;
				hairWindow = false;
				if (player[myPlayer].talkNPC > -1 && npc[player[myPlayer].talkNPC].type == 353)
				{
					player[myPlayer].SetTalkNPC(-1);
				}
				SoundEngine.PlaySound(11);
			}
		}

		public static void BuyHairWindow()
		{
			SoundEngine.PlaySound(18);
			hairWindow = false;
			player[myPlayer].SetTalkNPC(-1);
			npcChatCornerItem = 0;
			NetMessage.SendData(4, -1, -1, null, myPlayer);
		}

		public static int UnlockedMaxHair()
		{
			int num = 151;
			if (NPC.downedMartians)
			{
				num += 10;
			}
			if (NPC.downedMartians && NPC.downedMoonlord)
			{
				num++;
			}
			return num;
		}

		protected void DrawHairWindow()
		{
			if (npcChatText != "" || playerInventory || player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC == -1 || InGuideCraftMenu)
			{
				CancelHairWindow();
				return;
			}
			Hairstyles.UpdateUnlocks();
			int count = Hairstyles.AvailableHairstyles.Count;
			int num = screenHeight / 2 + 60;
			int num2 = screenWidth / 2 - TextureAssets.HairStyleBack.Width() / 2;
			int num3 = num + 42;
			int num4 = num2 + 22;
			int num5 = num2 + 234;
			int num6 = num + 18;
			selColor = player[myPlayer].hairColor;
			spriteBatch.Draw(TextureAssets.HairStyleBack.Value, new Vector2(num2, num), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.HairStyleBack.Width(), TextureAssets.HairStyleBack.Height()), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			if (new Microsoft.Xna.Framework.Rectangle(num2, num, TextureAssets.HairStyleBack.Width(), TextureAssets.HairStyleBack.Height()).Contains(MouseScreen.ToPoint()))
			{
				int num7 = PlayerInput.ScrollWheelDelta / 120;
				num7 = -num7;
				int num8 = Math.Sign(num7);
				while (num7 != 0)
				{
					if (num7 < 0)
					{
						hairStart -= 5;
						SoundEngine.PlaySound(12);
					}
					else
					{
						hairStart += 5;
						SoundEngine.PlaySound(12);
					}
					num7 -= num8;
				}
			}
			if (mouseX > num2 && mouseX < num2 + TextureAssets.HairStyleBack.Width() && mouseY > num && mouseY < num + TextureAssets.HairStyleBack.Height())
			{
				player[myPlayer].mouseInterface = true;
			}
			int num9 = num5 - 18;
			int num10 = num6 + 74;
			if (hairStart > 1)
			{
				if (mouseX >= num9 && mouseX <= num9 + TextureAssets.CraftUpButton.Width() && mouseY >= num10 && mouseY <= num10 + TextureAssets.CraftUpButton.Height())
				{
					player[myPlayer].mouseInterface = true;
					if (mouseLeftRelease && mouseLeft)
					{
						hairStart -= 15;
						SoundEngine.PlaySound(12);
					}
				}
				spriteBatch.Draw(TextureAssets.ScrollLeftButton.Value, new Vector2(num9, num10), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height()), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (hairStart + 15 < count)
			{
				num9 += 296;
				if (mouseX >= num9 && mouseX <= num9 + TextureAssets.CraftUpButton.Width() && mouseY >= num10 && mouseY <= num10 + TextureAssets.CraftUpButton.Height())
				{
					player[myPlayer].mouseInterface = true;
					if (mouseLeftRelease && mouseLeft)
					{
						hairStart += 15;
						SoundEngine.PlaySound(12);
					}
				}
				spriteBatch.Draw(TextureAssets.ScrollRightButton.Value, new Vector2(num9, num10), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.CraftUpButton.Width(), TextureAssets.CraftUpButton.Height()), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			if (hairStart + 15 >= count)
			{
				hairStart = count - 15;
			}
			if (hairStart < 0)
			{
				hairStart = 0;
			}
			int num11 = 0;
			if (oldHairStyle != player[myPlayer].hair)
			{
				num11 = ((player[myPlayer].hair <= 51) ? (num11 + 20000) : (num11 + 200000));
			}
			if (oldHairColor != player[myPlayer].hairColor)
			{
				num11 += 20000;
			}
			num11 = (int)((double)num11 * player[myPlayer].currentShoppingSettings.PriceAdjustment);
			num11 = (int)Math.Round((float)num11 / 10000f) * 10000;
			string text = "";
			string text2 = "";
			int num12 = 0;
			int num13 = 0;
			int num14 = 0;
			int num15 = 0;
			int num16 = num11;
			_ = 0;
			if (num16 < 0)
			{
				num16 = 0;
			}
			num11 = num16;
			if (num16 >= 1000000)
			{
				num12 = num16 / 1000000;
				num16 -= num12 * 1000000;
			}
			if (num16 >= 10000)
			{
				num13 = num16 / 10000;
				num16 -= num13 * 10000;
			}
			if (num16 >= 100)
			{
				num14 = num16 / 100;
				num16 -= num14 * 100;
			}
			if (num16 >= 1)
			{
				num15 = num16;
			}
			if (num12 > 0)
			{
				text2 = text2 + num12 + " " + Lang.inter[15].Value + " ";
			}
			if (num13 > 0)
			{
				text2 = text2 + num13 + " " + Lang.inter[16].Value + " ";
			}
			if (num14 > 0)
			{
				text2 = text2 + num14 + " " + Lang.inter[17].Value + " ";
			}
			if (num15 > 0)
			{
				text2 = text2 + num15 + " " + Lang.inter[18].Value + " ";
			}
			text = Language.GetTextValue("GameUI.BuyWithValue", text2);
			if (num11 == 0)
			{
				text = Language.GetTextValue("GameUI.Buy");
			}
			int num17 = (mouseTextColor * 2 + 255) / 3;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(num17, (int)((double)num17 / 1.1), num17 / 2, num17);
			float num18 = 0.9f;
			string text3 = text;
			int num19 = num2 + 18;
			int num20 = num + 156;
			bool flag = false;
			if (num11 > 0)
			{
				ItemSlot.DrawSavings(spriteBatch, num19, num20 - 70, horizontal: true);
			}
			if (num11 > 0 && mouseX > num19 && (float)mouseX < (float)num19 + FontAssets.MouseText.Value.MeasureString(text3).X && mouseY > num20 && (float)mouseY < (float)num20 + FontAssets.MouseText.Value.MeasureString(text3).Y)
			{
				flag = true;
				num18 = 1.1f;
				if (!npcChatFocus1)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus1 = true;
				player[myPlayer].releaseUseItem = false;
			}
			else
			{
				if (npcChatFocus1)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus1 = false;
			}
			Vector2 vector = FontAssets.MouseText.Value.MeasureString(text3);
			vector *= 0.5f;
			UILinkPointNavigator.SetPosition(2603, new Vector2(num19, num20) + vector);
			for (int i = 0; i < 5; i++)
			{
				int num21 = num19;
				int num22 = num20;
				Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
				if (flag)
				{
					color2 = Microsoft.Xna.Framework.Color.Brown;
				}
				if (i == 0)
				{
					num21 -= 2;
				}
				if (i == 1)
				{
					num21 += 2;
				}
				if (i == 2)
				{
					num22 -= 2;
				}
				if (i == 3)
				{
					num22 += 2;
				}
				if (i == 4)
				{
					color2 = ((num11 != 0) ? color : new Microsoft.Xna.Framework.Color(100, 100, 100));
				}
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text3, new Vector2((float)num21 + vector.X, (float)num22 + vector.Y), color2, 0f, vector, num18, SpriteEffects.None, 0f);
			}
			num18 = 0.9f;
			string textValue = Language.GetTextValue("GameUI.Cancel");
			num19 += 130;
			flag = false;
			if (mouseX > num19 && (float)mouseX < (float)num19 + FontAssets.MouseText.Value.MeasureString(textValue).X && mouseY > num20 && (float)mouseY < (float)num20 + FontAssets.MouseText.Value.MeasureString(textValue).Y)
			{
				flag = true;
				num18 = 1.1f;
				if (!npcChatFocus2)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus2 = true;
				player[myPlayer].releaseUseItem = false;
			}
			else
			{
				if (npcChatFocus2)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus2 = false;
			}
			vector = FontAssets.MouseText.Value.MeasureString(textValue);
			vector *= 0.5f;
			UILinkPointNavigator.SetPosition(2604, new Vector2(num19, num20) + vector);
			for (int j = 0; j < 5; j++)
			{
				int num23 = num19;
				int num24 = num20;
				Microsoft.Xna.Framework.Color color3 = Microsoft.Xna.Framework.Color.Black;
				if (flag)
				{
					color3 = Microsoft.Xna.Framework.Color.Brown;
				}
				if (j == 0)
				{
					num23 -= 2;
				}
				if (j == 1)
				{
					num23 += 2;
				}
				if (j == 2)
				{
					num24 -= 2;
				}
				if (j == 3)
				{
					num24 += 2;
				}
				if (j == 4)
				{
					color3 = color;
				}
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, textValue, new Vector2((float)num23 + vector.X, (float)num24 + vector.Y), color3, 0f, vector, num18, SpriteEffects.None, 0f);
			}
			if (mouseLeft && mouseLeftRelease)
			{
				if (npcChatFocus1)
				{
					if (player[myPlayer].BuyItem(num11))
					{
						BuyHairWindow();
						return;
					}
				}
				else if (npcChatFocus2)
				{
					CancelHairWindow();
					return;
				}
			}
			if (!mouseLeft)
			{
				grabColorSlider = 0;
				blockMouse = false;
			}
			int num25 = 167;
			Vector3 vector2 = rgbToHsl(selColor);
			float num26 = vector2.X;
			float num27 = vector2.Y;
			float z = vector2.Z;
			float num28 = (float)(int)selColor.A / 255f;
			if (hBar == -1f || sBar == -1f || lBar == -1f || aBar == -1f)
			{
				hBar = num26;
				sBar = num27;
				lBar = z;
				aBar = (float)(int)selColor.A / 255f;
			}
			else
			{
				num26 = hBar;
				num27 = sBar;
				z = lBar;
				aBar = num28;
			}
			UILinkPointNavigator.SetPosition(2600, new Vector2(num4, num3) + TextureAssets.Hue.Value.Size() / 2f);
			spriteBatch.Draw(TextureAssets.Hue.Value, new Vector2(num4, num3), Microsoft.Xna.Framework.Color.White);
			if ((mouseX > num4 - 4 && mouseX < num4 + TextureAssets.Hue.Width() + 4 && mouseY > num3 - 4 && mouseY < num3 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 1)
			{
				spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2(num4, num3), OurFavoriteColor);
			}
			spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num4 + (float)(TextureAssets.Hue.Width() - 2) * hBar - (float)(TextureAssets.ColorSlider.Width() / 2), num3 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num4 - 4 && mouseX < num4 + TextureAssets.Hue.Width() + 4 && mouseY > num3 - 4 && mouseY < num3 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 1) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 1;
				num26 = mouseX - num4;
				num26 /= (float)TextureAssets.Hue.Width();
				if (num26 < 0f)
				{
					num26 = 0f;
				}
				if (num26 > 1f)
				{
					num26 = 1f;
				}
				hBar = num26;
			}
			num3 += 26;
			UILinkPointNavigator.SetPosition(2601, new Vector2(num4, num3) + TextureAssets.ColorBar.Value.Size() / 2f);
			spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2(num4, num3), Microsoft.Xna.Framework.Color.White);
			for (int k = 0; k <= num25; k++)
			{
				float saturation = (float)k / (float)num25;
				Microsoft.Xna.Framework.Color color4 = hslToRgb(num26, saturation, z);
				spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2(num4 + k + 5, num3 + 4), color4);
			}
			if ((mouseX > num4 - 4 && mouseX < num4 + TextureAssets.Hue.Width() + 4 && mouseY > num3 - 4 && mouseY < num3 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 2)
			{
				spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2(num4, num3), OurFavoriteColor);
			}
			spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num4 + (float)(TextureAssets.Hue.Width() - 2) * sBar - (float)(TextureAssets.ColorSlider.Width() / 2), num3 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num4 - 4 && mouseX < num4 + TextureAssets.Hue.Width() + 4 && mouseY > num3 - 4 && mouseY < num3 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 2) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 2;
				num27 = mouseX - num4;
				num27 /= (float)TextureAssets.Hue.Width();
				if (num27 < 0f)
				{
					num27 = 0f;
				}
				if (num27 > 1f)
				{
					num27 = 1f;
				}
				sBar = num27;
			}
			num3 += 26;
			UILinkPointNavigator.SetPosition(2602, new Vector2(num4, num3) + TextureAssets.ColorBar.Value.Size() / 2f);
			spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2(num4, num3), Microsoft.Xna.Framework.Color.White);
			float num29 = 0.15f;
			for (int l = 0; l <= num25; l++)
			{
				float luminosity = (float)l / (float)num25;
				Microsoft.Xna.Framework.Color color5 = hslToRgb(num26, num27, luminosity);
				spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2(num4 + l + 5, num3 + 4), color5);
			}
			if ((mouseX > num4 - 4 && mouseX < num4 + TextureAssets.Hue.Width() + 4 && mouseY > num3 - 4 && mouseY < num3 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 3)
			{
				spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2(num4, num3), OurFavoriteColor);
			}
			spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num4 + (float)(TextureAssets.Hue.Width() - 2) * ((lBar - num29) / (1f - num29)) - (float)(TextureAssets.ColorSlider.Width() / 2), num3 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num4 - 4 && mouseX < num4 + TextureAssets.Hue.Width() + 4 && mouseY > num3 - 4 && mouseY < num3 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 3) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 3;
				z = mouseX - num4;
				z /= (float)TextureAssets.Hue.Width();
				if (z < 0f)
				{
					z = 0f;
				}
				if (z > 1f)
				{
					z = 1f;
				}
				z = (lBar = z * (1f - num29) + num29);
			}
			selColor = hslToRgb(hBar, sBar, lBar);
			player[myPlayer].hairColor = selColor;
			int num30 = num5;
			int num31 = num6;
			_ = hairStart;
			int num32 = 0;
			int num33 = 0;
			for (int m = 0; m < 15; m++)
			{
				int num34 = Hairstyles.AvailableHairstyles[hairStart + m];
				UILinkPointNavigator.SetPosition(2605 + m, new Vector2(num30, num31) + TextureAssets.InventoryBack.Value.Size() * 0.75f);
				if (player[myPlayer].hair == num34)
				{
					spriteBatch.Draw(TextureAssets.InventoryBack14.Value, new Vector2(num30, num31), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height()), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				else
				{
					spriteBatch.Draw(TextureAssets.InventoryBack8.Value, new Vector2(num30, num31), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height()), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (mouseX > num30 && mouseX < num30 + TextureAssets.InventoryBack.Width() && mouseY > num31 && mouseY < num31 + TextureAssets.InventoryBack.Height())
				{
					Asset<Texture2D> val = Assets.Request<Texture2D>("Images/UI/PanelBorder", Main.content, (AssetRequestMode)1);
					Utils.DrawSplicedPanel(spriteBatch, val.Value, num30, num31, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height(), val.Width() / 2 - 1, val.Width() / 2 - 1, val.Height() / 2 - 1, val.Height() / 2 - 1, OurFavoriteColor);
					if (mouseLeft && mouseLeftRelease)
					{
						mouseLeftRelease = false;
						player[myPlayer].hair = num34;
						SoundEngine.PlaySound(12);
					}
				}
				LoadHair(num34);
				float x = num30 + TextureAssets.InventoryBack.Width() / 2 - TextureAssets.PlayerHair[num34].Width() / 2;
				float y = num31 + 4;
				spriteBatch.Draw(TextureAssets.Players[num32, 0].Value, new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.PlayerHair[num34].Width(), 56), player[myPlayer].skinColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.Players[num32, 1].Value, new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.PlayerHair[num34].Width(), 56), new Microsoft.Xna.Framework.Color(255, 255, 255, 255), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.Players[num32, 2].Value, new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.PlayerHair[num34].Width(), 56), player[myPlayer].eyeColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.PlayerHair[num34].Value, new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.PlayerHair[num34].Width(), 56), selColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				num33++;
				num30 += 56;
				if (num33 >= 5)
				{
					num33 = 0;
					num30 = num5;
					num31 += 56;
				}
			}
		}

		public static void OpenClothesWindow()
		{
			if (clothesWindow)
			{
				CancelClothesWindow();
				return;
			}
			hBar = -1f;
			lBar = -1f;
			sBar = -1f;
			playerInventory = false;
			npcChatText = "";
			clothesWindow = true;
			SoundEngine.PlaySound(10);
			selClothes = 0;
			oldClothesColor[0] = player[myPlayer].shirtColor;
			oldClothesColor[1] = player[myPlayer].underShirtColor;
			oldClothesColor[2] = player[myPlayer].pantsColor;
			oldClothesColor[3] = player[myPlayer].shoeColor;
			oldClothesColor[4] = player[myPlayer].eyeColor;
			oldClothesColor[5] = player[myPlayer].skinColor;
			if (dresserInterfaceDummy == null)
			{
				dresserInterfaceDummy = new Player();
			}
			oldClothesStyle = player[myPlayer].skinVariant;
		}

		public static void CancelClothesWindow(bool quiet = false)
		{
			if (clothesWindow)
			{
				clothesWindow = false;
				if (!quiet)
				{
					SoundEngine.PlaySound(11);
				}
				player[myPlayer].shirtColor = oldClothesColor[0];
				player[myPlayer].underShirtColor = oldClothesColor[1];
				player[myPlayer].pantsColor = oldClothesColor[2];
				player[myPlayer].shoeColor = oldClothesColor[3];
				player[myPlayer].eyeColor = oldClothesColor[4];
				player[myPlayer].skinColor = oldClothesColor[5];
				dresserInterfaceDummy.skinVariant = oldClothesStyle;
				dresserInterfaceDummy.Male = player[myPlayer].Male;
				player[myPlayer].skinVariant = dresserInterfaceDummy.skinVariant;
			}
		}

		public static void SaveClothesWindow()
		{
			SoundEngine.PlaySound(7);
			clothesWindow = false;
			NetMessage.SendData(4, -1, -1, null, myPlayer);
		}

		protected void DrawClothesWindow()
		{
			if (npcChatText != "" || playerInventory || player[myPlayer].chest != -1 || npcShop != 0 || player[myPlayer].talkNPC != -1 || InGuideCraftMenu)
			{
				CancelClothesWindow();
				return;
			}
			if (!LocalPlayer.IsInInteractionRangeToMultiTileHitbox(interactedDresserTopLeftX, interactedDresserTopLeftY) || !tile[interactedDresserTopLeftX, interactedDresserTopLeftY].active())
			{
				CancelClothesWindow();
				return;
			}
			int num = 477;
			int num2 = num / 2;
			num2 = 180;
			num = 511;
			num -= num / 2 - num2 - 26;
			int num3 = screenHeight / 2 + 60;
			int num4 = screenWidth / 2 - num / 2;
			int num5 = num3 + 32;
			int num6 = num4 + 22;
			num5 -= 16;
			int num7 = num4 + num - num2;
			int num8 = num3 + 18;
			if (selClothes == 0)
			{
				selColor = player[myPlayer].shirtColor;
			}
			if (selClothes == 1)
			{
				selColor = player[myPlayer].underShirtColor;
			}
			if (selClothes == 2)
			{
				selColor = player[myPlayer].pantsColor;
			}
			if (selClothes == 3)
			{
				selColor = player[myPlayer].shoeColor;
			}
			if (selClothes == 4)
			{
				selColor = player[myPlayer].eyeColor;
			}
			if (selClothes == 5)
			{
				selColor = player[myPlayer].skinColor;
			}
			Utils.DrawInvBG(spriteBatch, new Microsoft.Xna.Framework.Rectangle(num4, num3, num, 133));
			if (!PlayerInput.IgnoreMouseInterface && mouseX > num4 && mouseX < num4 + TextureAssets.ClothesStyleBack.Width() && mouseY > num3 && mouseY < num3 + TextureAssets.ClothesStyleBack.Height())
			{
				player[myPlayer].mouseInterface = true;
			}
			Vector2 value = new Vector2(num4 + num / 2 - 16 - 28, num3 + 66 + dresserInterfaceDummy.height / 2 - 20);
			value.Y += 18f;
			value.X += 58f;
			Microsoft.Xna.Framework.Rectangle r = new Microsoft.Xna.Framework.Rectangle((int)value.X - dresserInterfaceDummy.width / 2 - 15, (int)value.Y - dresserInterfaceDummy.height - 33, dresserInterfaceDummy.width + 30, dresserInterfaceDummy.height + 66);
			bool flag = r.Contains(MouseScreen.ToPoint());
			int num9 = selClothes;
			int num10 = (mouseTextColor * 2 + 255) / 3;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(num10, (int)((double)num10 / 1.1), num10 / 2, num10);
			float num11 = 0.9f;
			string textValue = Language.GetTextValue("GameUI.Change");
			int num12 = num4 + num - num2 + 22;
			num12 = num4 + 22;
			int num13 = num3 + 94;
			bool flag2 = false;
			if (oldClothesColor[0] != player[myPlayer].shirtColor || oldClothesColor[1] != player[myPlayer].underShirtColor || oldClothesColor[2] != player[myPlayer].pantsColor || oldClothesColor[3] != player[myPlayer].shoeColor || oldClothesColor[4] != player[myPlayer].eyeColor || oldClothesColor[5] != player[myPlayer].skinColor || oldClothesStyle != player[myPlayer].skinVariant)
			{
				flag2 = true;
			}
			Vector2 value2 = FontAssets.MouseText.Value.MeasureString(textValue);
			bool flag3 = false;
			UILinkPointNavigator.SetPosition(2803, new Vector2(num12, num13) + value2 * num11 * 0.5f);
			if (flag2 && mouseX > num12 && (float)mouseX < (float)num12 + value2.X && mouseY > num13 && (float)mouseY < (float)num13 + value2.Y)
			{
				flag3 = true;
				num11 = 1.1f;
				if (!npcChatFocus1)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus1 = true;
				player[myPlayer].releaseUseItem = false;
			}
			else
			{
				if (npcChatFocus1)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus1 = false;
			}
			for (int i = 0; i < 5; i++)
			{
				int num14 = num12;
				int num15 = num13;
				Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
				if (flag3)
				{
					color2 = Microsoft.Xna.Framework.Color.Brown;
				}
				if (i == 0)
				{
					num14 -= 2;
				}
				if (i == 1)
				{
					num14 += 2;
				}
				if (i == 2)
				{
					num15 -= 2;
				}
				if (i == 3)
				{
					num15 += 2;
				}
				if (i == 4)
				{
					color2 = (flag2 ? color : new Microsoft.Xna.Framework.Color(100, 100, 100));
				}
				Vector2 vector = FontAssets.MouseText.Value.MeasureString(textValue);
				vector *= 0.5f;
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, textValue, new Vector2((float)num14 + vector.X, (float)num15 + vector.Y), color2, 0f, vector, num11, SpriteEffects.None, 0f);
			}
			num11 = 0.9f;
			string textValue2 = Language.GetTextValue("GameUI.Cancel");
			num12 += 130;
			bool flag4 = false;
			value2 = FontAssets.MouseText.Value.MeasureString(textValue2);
			UILinkPointNavigator.SetPosition(2804, new Vector2(num12, num13) + value2 * num11 * 0.5f);
			if (mouseX > num12 && (float)mouseX < (float)num12 + value2.X && mouseY > num13 && (float)mouseY < (float)num13 + value2.Y)
			{
				flag4 = true;
				num11 = 1.1f;
				if (!npcChatFocus2)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus2 = true;
				player[myPlayer].releaseUseItem = false;
			}
			else
			{
				if (npcChatFocus2)
				{
					SoundEngine.PlaySound(12);
				}
				npcChatFocus2 = false;
			}
			for (int j = 0; j < 5; j++)
			{
				int num16 = num12;
				int num17 = num13;
				Microsoft.Xna.Framework.Color color3 = Microsoft.Xna.Framework.Color.Black;
				if (flag4)
				{
					color3 = Microsoft.Xna.Framework.Color.Brown;
				}
				if (j == 0)
				{
					num16 -= 2;
				}
				if (j == 1)
				{
					num16 += 2;
				}
				if (j == 2)
				{
					num17 -= 2;
				}
				if (j == 3)
				{
					num17 += 2;
				}
				if (j == 4)
				{
					color3 = color;
				}
				Vector2 vector2 = FontAssets.MouseText.Value.MeasureString(textValue2);
				vector2 *= 0.5f;
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, textValue2, new Vector2((float)num16 + vector2.X, (float)num17 + vector2.Y), color3, 0f, vector2, num11, SpriteEffects.None, 0f);
			}
			if (mouseLeft && mouseLeftRelease)
			{
				if (npcChatFocus1)
				{
					SaveClothesWindow();
					return;
				}
				if (npcChatFocus2)
				{
					CancelClothesWindow();
					return;
				}
			}
			if (!mouseLeft)
			{
				grabColorSlider = 0;
				blockMouse = false;
			}
			int num18 = 167;
			Vector3 vector3 = rgbToHsl(selColor);
			float num19 = vector3.X;
			float num20 = vector3.Y;
			float z = vector3.Z;
			if (hBar == -1f || sBar == -1f || lBar == -1f)
			{
				hBar = num19;
				sBar = num20;
				lBar = z;
			}
			else
			{
				num19 = hBar;
				num20 = sBar;
				z = lBar;
			}
			spriteBatch.Draw(TextureAssets.Hue.Value, new Vector2(num6, num5), Microsoft.Xna.Framework.Color.White);
			if ((mouseX > num6 - 4 && mouseX < num6 + TextureAssets.Hue.Width() + 4 && mouseY > num5 - 4 && mouseY < num5 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 1)
			{
				spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2(num6, num5), OurFavoriteColor);
			}
			spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num6 + (float)(TextureAssets.Hue.Width() - 2) * hBar - (float)(TextureAssets.ColorSlider.Width() / 2), num5 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num6 - 4 && mouseX < num6 + TextureAssets.Hue.Width() + 4 && mouseY > num5 - 4 && mouseY < num5 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 1) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 1;
				num19 = mouseX - num6;
				num19 /= (float)TextureAssets.Hue.Width();
				if (num19 < 0f)
				{
					num19 = 0f;
				}
				if (num19 > 1f)
				{
					num19 = 1f;
				}
				hBar = num19;
			}
			UILinkPointNavigator.SetPosition(2800, new Vector2(num6, num5) + TextureAssets.Hue.Value.Size() / 2f);
			num5 += 26;
			spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2(num6, num5), Microsoft.Xna.Framework.Color.White);
			for (int k = 0; k <= num18; k++)
			{
				float saturation = (float)k / (float)num18;
				Microsoft.Xna.Framework.Color color4 = hslToRgb(num19, saturation, z);
				spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2(num6 + k + 5, num5 + 4), color4);
			}
			if ((mouseX > num6 - 4 && mouseX < num6 + TextureAssets.Hue.Width() + 4 && mouseY > num5 - 4 && mouseY < num5 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 2)
			{
				spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2(num6, num5), OurFavoriteColor);
			}
			spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num6 + (float)(TextureAssets.Hue.Width() - 2) * sBar - (float)(TextureAssets.ColorSlider.Width() / 2), num5 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num6 - 4 && mouseX < num6 + TextureAssets.Hue.Width() + 4 && mouseY > num5 - 4 && mouseY < num5 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 2) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 2;
				num20 = mouseX - num6;
				num20 /= (float)TextureAssets.Hue.Width();
				if (num20 < 0f)
				{
					num20 = 0f;
				}
				if (num20 > 1f)
				{
					num20 = 1f;
				}
				sBar = num20;
			}
			UILinkPointNavigator.SetPosition(2801, new Vector2(num6, num5) + TextureAssets.Hue.Value.Size() / 2f);
			num5 += 26;
			spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2(num6, num5), Microsoft.Xna.Framework.Color.White);
			float num21 = 0.15f;
			for (int l = 0; l <= num18; l++)
			{
				float luminosity = (float)l / (float)num18;
				Microsoft.Xna.Framework.Color color5 = hslToRgb(num19, num20, luminosity);
				spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2(num6 + l + 5, num5 + 4), color5);
			}
			if ((mouseX > num6 - 4 && mouseX < num6 + TextureAssets.Hue.Width() + 4 && mouseY > num5 - 4 && mouseY < num5 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 3)
			{
				spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2(num6, num5), OurFavoriteColor);
			}
			spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num6 + (float)(TextureAssets.Hue.Width() - 2) * ((lBar - num21) / (1f - num21)) - (float)(TextureAssets.ColorSlider.Width() / 2), num5 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2), Microsoft.Xna.Framework.Color.White);
			if (((mouseX > num6 - 4 && mouseX < num6 + TextureAssets.Hue.Width() + 4 && mouseY > num5 - 4 && mouseY < num5 + TextureAssets.Hue.Height() + 4) || grabColorSlider == 3) && mouseLeft && !blockMouse)
			{
				grabColorSlider = 3;
				z = mouseX - num6;
				z /= (float)TextureAssets.Hue.Width();
				if (z < 0f)
				{
					z = 0f;
				}
				if (z > 1f)
				{
					z = 1f;
				}
				z = (lBar = z * (1f - num21) + num21);
			}
			UILinkPointNavigator.SetPosition(2802, new Vector2(num6, num5) + TextureAssets.Hue.Value.Size() / 2f);
			selColor = hslToRgb(hBar, sBar, lBar);
			if (selClothes == 0)
			{
				player[myPlayer].shirtColor = selColor;
			}
			if (selClothes == 1)
			{
				player[myPlayer].underShirtColor = selColor;
			}
			if (selClothes == 2)
			{
				player[myPlayer].pantsColor = selColor;
			}
			if (selClothes == 3)
			{
				player[myPlayer].shoeColor = selColor;
			}
			if (selClothes == 4)
			{
				player[myPlayer].eyeColor = selColor;
			}
			if (selClothes == 5)
			{
				player[myPlayer].skinColor = selColor;
			}
			int num22 = num7;
			int num23 = num8;
			num23 -= 8;
			for (int m = 0; m < 6; m++)
			{
				if (num9 == m)
				{
					spriteBatch.Draw(TextureAssets.InventoryBack14.Value, new Vector2(num22, num23), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height()), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				else
				{
					spriteBatch.Draw(TextureAssets.InventoryBack8.Value, new Vector2(num22, num23), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.InventoryBack.Width(), TextureAssets.InventoryBack.Height()), new Microsoft.Xna.Framework.Color(200, 200, 200, 200), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				if (mouseX > num22 && mouseX < num22 + TextureAssets.InventoryBack.Width() && mouseY > num23 && mouseY < num23 + TextureAssets.InventoryBack.Height() && mouseLeft && mouseLeftRelease)
				{
					mouseLeftRelease = false;
					selClothes = m;
					SoundEngine.PlaySound(12);
					hBar = -1f;
					lBar = -1f;
					sBar = -1f;
				}
				float x = num22 + TextureAssets.InventoryBack.Width() / 2 - TextureAssets.Clothes[m].Width() / 2;
				float y = num23 + TextureAssets.InventoryBack.Height() / 2 - TextureAssets.Clothes[m].Height() / 2;
				Microsoft.Xna.Framework.Color color6 = Microsoft.Xna.Framework.Color.White;
				if (m == 0)
				{
					color6 = player[myPlayer].shirtColor;
				}
				if (m == 1)
				{
					color6 = player[myPlayer].underShirtColor;
				}
				if (m == 2)
				{
					color6 = player[myPlayer].pantsColor;
				}
				if (m == 3)
				{
					color6 = player[myPlayer].shoeColor;
				}
				if (m == 4)
				{
					color6 = player[myPlayer].eyeColor;
				}
				if (m == 5)
				{
					color6 = player[myPlayer].skinColor;
				}
				spriteBatch.Draw(TextureAssets.Clothes[m].Value, new Vector2(x, y), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Clothes[m].Width(), TextureAssets.Clothes[m].Height()), color6, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				if (m == 4)
				{
					Texture2D value3 = Assets.Request<Texture2D>("Images/UI/CharCreation/ColorEyeBack", Main.content, (AssetRequestMode)1).Value;
					spriteBatch.Draw(value3, new Vector2(x, y), value3.Frame(), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				UILinkPointNavigator.SetPosition(2806 + m, new Vector2(x, y) + TextureAssets.Clothes[m].Value.Size() * 0.75f);
				num22 += 56;
				if (m == 1)
				{
					num22 -= 112;
					num23 += 56;
				}
				if (m == 3)
				{
					num23 -= 56;
				}
				if (m == 4)
				{
					num23 += 56;
					num22 -= 56;
				}
			}
			dresserInterfaceDummy.skinVariant = player[myPlayer].skinVariant;
			dresserInterfaceDummy.eyeColor = player[myPlayer].eyeColor;
			dresserInterfaceDummy.hairColor = player[myPlayer].hairColor;
			dresserInterfaceDummy.hair = player[myPlayer].hair;
			dresserInterfaceDummy.skinColor = player[myPlayer].skinColor;
			dresserInterfaceDummy.shirtColor = player[myPlayer].shirtColor;
			dresserInterfaceDummy.underShirtColor = player[myPlayer].underShirtColor;
			dresserInterfaceDummy.shoeColor = player[myPlayer].shoeColor;
			dresserInterfaceDummy.pantsColor = player[myPlayer].pantsColor;
			dresserInterfaceDummy.Bottom = screenPosition + value;
			dresserInterfaceDummy.direction = -1;
			dresserInterfaceDummy.gravDir = 1f;
			dresserInterfaceDummy.PlayerFrame();
			dresserInterfaceDummy.socialIgnoreLight = true;
			Microsoft.Xna.Framework.Color c = new Microsoft.Xna.Framework.Color(46, 106, 98) * 0.6f;
			if (flag)
			{
				c = new Microsoft.Xna.Framework.Color(46, 106, 98) * 2f * 0.6f;
				if (mouseLeft && mouseLeftRelease)
				{
					mouseLeftRelease = false;
					SoundEngine.PlaySound(12);
					CycleClothingStyle(player[myPlayer]);
				}
			}
			UILinkPointNavigator.SetPosition(2805, r.Center.ToVector2());
			Utils.DrawInvBG(spriteBatch, r, c);
			PlayerRenderer.DrawPlayer(Camera, dresserInterfaceDummy, dresserInterfaceDummy.position, dresserInterfaceDummy.fullRotation, dresserInterfaceDummy.fullRotationOrigin);
		}

		private void DrawInterface_Tests()
		{
		}

		private void SetupDrawInterfaceLayers()
		{
			if (_needToSetupDrawInterfaceLayers)
			{
				_needToSetupDrawInterfaceLayers = false;
				_gameInterfaceLayers = new List<GameInterfaceLayer>();
				_gameInterfaceLayers.AddRange(new GameInterfaceLayer[43]
				{
					new LegacyGameInterfaceLayer("Vanilla: Interface Logic 1", delegate
					{
						DrawInterface_0_InterfaceLogic1();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: MP Player Names", delegate
					{
						DrawInterface_20_MultiplayerPlayerNames();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Emote Bubbles", delegate
					{
						DrawInterface_1_1_DrawEmoteBubblesInWorld();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Entity Markers", delegate
					{
						DrawInterface_1_2_DrawEntityMarkersInWorld();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Smart Cursor Targets", delegate
					{
						DrawInterface_2_SmartCursorTargets();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Laser Ruler", delegate
					{
						DrawInterface_3_LaserRuler();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Ruler", delegate
					{
						DrawInterface_4_Ruler();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Gamepad Lock On", delegate
					{
						DrawInterface_5_GamepadLockOn();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Tile Grid Option", delegate
					{
						DrawInterface_6_TileGridOption();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Town NPC House Banners", delegate
					{
						DrawInterface_7_TownNPCHouseBanners();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Hide UI Toggle", DrawInterface_8_CheckF11UIHideToggle, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Wire Selection", delegate
					{
						DrawInterface_9_WireSelection();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Capture Manager Check", DrawInterface_10_CheckCaptureManager),
					new LegacyGameInterfaceLayer("Vanilla: Ingame Options", DrawInterface_11_IngameOptionsMenu, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Fancy UI", DrawInterface_12_IngameFancyUI, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Achievement Complete Popups", delegate
					{
						DrawInterface_13_AchievementCompletePopups();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Entity Health Bars", delegate
					{
						DrawInterface_14_EntityHealthBars();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Invasion Progress Bars", delegate
					{
						DrawInterface_15_InvasionProgressBars();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Map / Minimap", delegate
					{
						DrawInterface_16_MapOrMinimap();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Diagnose Net", delegate
					{
						DrawInterface_17_DiagnoseNet();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Diagnose Video", delegate
					{
						DrawInterface_18_DiagnoseVideo();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Sign Tile Bubble", delegate
					{
						DrawInterface_19_SignTileBubble();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Hair Window", delegate
					{
						DrawInterface_21_HairWindow();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Dresser Window", delegate
					{
						DrawInterface_22_DresserWindow();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: NPC / Sign Dialog", delegate
					{
						DrawInterface_23_NPCSignsDialog();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Interface Logic 2", delegate
					{
						DrawInterface_24_InterfaceLogic2();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Resource Bars", delegate
					{
						DrawInterface_25_ResourceBars();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Interface Logic 3", delegate
					{
						DrawInterface_26_InterfaceLogic3();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Inventory", delegate
					{
						DrawInterface_27_Inventory();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Info Accessories Bar", delegate
					{
						DrawInterface_28_InfoAccs();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Settings Button", delegate
					{
						DrawInterface_29_SettingsButton();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Hotbar", delegate
					{
						DrawInterface_30_Hotbar();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Builder Accessories Bar", delegate
					{
						DrawInterface_31_BuilderAccToggles();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Radial Hotbars", delegate
					{
						DrawInterface_32_GamepadRadialHotbars();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Mouse Text", delegate
					{
						DrawInterface_33_MouseText();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Player Chat", delegate
					{
						DrawInterface_34_PlayerChat();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Death Text", delegate
					{
						DrawInterface_35_YouDied();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Cursor", delegate
					{
						DrawInterface_36_Cursor();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Debug Stuff", delegate
					{
						DrawInterface_37_DebugStuff();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Mouse Item / NPC Head", delegate
					{
						DrawInterface_38_MouseCarriedObject();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Mouse Over", delegate
					{
						DrawInterface_39_MouseOver();
						return true;
					}),
					new LegacyGameInterfaceLayer("Vanilla: Interact Item Icon", delegate
					{
						DrawInterface_40_InteractItemIcon();
						return true;
					}, InterfaceScaleType.UI),
					new LegacyGameInterfaceLayer("Vanilla: Interface Logic 4", delegate
					{
						DrawInterface_41_InterfaceLogic4();
						return true;
					}, InterfaceScaleType.UI)
				});
			}
		}

		protected void DrawInterface(GameTime gameTime)
		{
			_drawInterfaceGameTime = gameTime;
			if (_needToSetupDrawInterfaceLayers)
			{
				SetupDrawInterfaceLayers();
			}
			PlayerInput.SetZoom_UI();
			using (List<GameInterfaceLayer>.Enumerator enumerator = _gameInterfaceLayers.GetEnumerator())
			{
				while (enumerator.MoveNext() && enumerator.Current.Draw())
				{
				}
			}
			PlayerInput.SetZoom_World();
		}

		private static void DrawWallOfCopperShortswords()
		{
			UnifiedRandom r = new UnifiedRandom(5000);
			Texture2D value = TextureAssets.Cloud[28].Value;
			Vector2 value2 = ScreenSize.ToVector2();
			spriteBatch.Begin();
			for (int i = 0; i < 20000; i++)
			{
				Vector2 value3 = r.NextVector2Square(-0.1f, 1.1f);
				value3.X -= 0.1f;
				value3.X += GlobalTimeWrappedHourly % 10f / 10f * 1.2f;
				value3.Y -= GlobalTimeWrappedHourly % 10f / 10f;
				if (value3.Y < -0.2f)
				{
					value3.Y += 1.4f;
				}
				if (value3.X > 1.1f)
				{
					value3.X -= 1.2f;
				}
				Vector2 position = value3 * value2;
				spriteBatch.Draw(value, position, Microsoft.Xna.Framework.Color.White);
			}
			spriteBatch.End();
		}

		private static void DrawWallOfBoulders()
		{
			UnifiedRandom r = new UnifiedRandom(5000);
			instance.LoadProjectile(99);
			Texture2D value = TextureAssets.Projectile[99].Value;
			Vector2 value2 = ScreenSize.ToVector2();
			spriteBatch.Begin();
			for (int i = 0; i < 20000; i++)
			{
				Vector2 value3 = r.NextVector2Square(-0.1f, 1.1f);
				value3.X *= 0.1f;
				value3.X -= 0.1f;
				value3.X += GlobalTimeWrappedHourly % 10f / 10f * 1.2f;
				value3.Y -= GlobalTimeWrappedHourly % 10f / 10f;
				if (value3.Y < -0.2f)
				{
					value3.Y += 1.4f;
				}
				if (value3.X > 1.1f)
				{
					value3.X -= 1.2f;
				}
				Vector2 position = value3 * value2;
				spriteBatch.Draw(value, position, Microsoft.Xna.Framework.Color.White);
			}
			spriteBatch.End();
		}

		private static void DrawInterface_41_InterfaceLogic4()
		{
			if (mouseRight)
			{
				npcChatRelease = false;
			}
			else
			{
				npcChatRelease = true;
			}
			_MouseOversCanClear = true;
			DrawPendingMouseText();
			cursorOverride = -1;
		}

		private static void DrawPendingMouseText()
		{
			DrawGamepadInstructions();
			if (instance._mouseTextCache.isValid)
			{
				instance.MouseTextInner(instance._mouseTextCache);
				DrawInterface_36_Cursor();
				instance._mouseTextCache.isValid = false;
				instance._mouseTextCache.noOverride = false;
			}
		}

		private void DrawInterface_40_InteractItemIcon()
		{
			if (HoveringOverAnNPC || LocalPlayer.mouseInterface)
			{
				return;
			}
			int num = player[myPlayer].inventory[player[myPlayer].selectedItem].type;
			if (num == 8 && player[myPlayer].UsingBiomeTorches)
			{
				num = player[myPlayer].BiomeTorchHoldStyle(num);
			}
			if (player[myPlayer].cursorItemIconID != 0)
			{
				num = player[myPlayer].cursorItemIconID;
			}
			bool flag = player[myPlayer].cursorItemIconEnabled && (player[myPlayer].inventory[player[myPlayer].selectedItem].type > 0 || player[myPlayer].cursorItemIconID != 0);
			ItemIconCacheVerification();
			bool flag2 = _itemIconCacheTime > 0 && mouseItem.type < 1;
			if (flag || flag2)
			{
				int t = _itemIconCacheSelectedItemID;
				if (!flag)
				{
					Utils.Swap(t, player[myPlayer].cursorItemIconID);
				}
				Microsoft.Xna.Framework.Color currentColor = player[myPlayer].inventory[player[myPlayer].selectedItem].GetAlpha(Microsoft.Xna.Framework.Color.White);
				Microsoft.Xna.Framework.Color color = player[myPlayer].inventory[player[myPlayer].selectedItem].GetColor(Microsoft.Xna.Framework.Color.White);
				if (player[myPlayer].cursorItemIconID != 0)
				{
					currentColor = Microsoft.Xna.Framework.Color.White;
					color = default(Microsoft.Xna.Framework.Color);
				}
				if (player[myPlayer].cursorItemIconID == 269)
				{
					currentColor = player[myPlayer].shirtColor;
				}
				float num2 = 1f;
				num2 = cursorScale;
				ItemSlot.GetItemLight(currentColor, num);
				SpriteEffects effects = SpriteEffects.None;
				if (player[myPlayer].cursorItemIconReversed)
				{
					effects = SpriteEffects.FlipHorizontally;
				}
				if (num > 0)
				{
					instance.LoadItem(num);
					spriteBatch.Draw(TextureAssets.Item[num].Value, new Vector2(mouseX + 10, mouseY + 10), Item.GetDrawHitbox(num, null), currentColor, 0f, default(Vector2), num2, effects, 0f);
				}
				if (player[myPlayer].cursorItemIconText != "")
				{
					MouseText(player[myPlayer].cursorItemIconText, 0, 0);
				}
				if (player[myPlayer].cursorItemIconID == 0 && player[myPlayer].inventory[player[myPlayer].selectedItem].color != default(Microsoft.Xna.Framework.Color))
				{
					instance.LoadItem(player[myPlayer].inventory[player[myPlayer].selectedItem].type);
					spriteBatch.Draw(TextureAssets.Item[player[myPlayer].inventory[player[myPlayer].selectedItem].type].Value, new Vector2(mouseX + 10, mouseY + 10), Item.GetDrawHitbox(player[myPlayer].inventory[player[myPlayer].selectedItem].type, null), color, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
				}
				if (!flag)
				{
					Utils.Swap(t, player[myPlayer].cursorItemIconID);
				}
			}
		}

		private void DrawInterface_39_MouseOver()
		{
			if (ignoreErrors)
			{
				try
				{
					DrawMouseOver();
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else
			{
				DrawMouseOver();
			}
		}

		private void DrawInterface_38_MouseCarriedObject()
		{
			if (mouseItem.type > 0 && mouseItem.stack > 0)
			{
				SetMouseNPC(-1, -1);
				player[myPlayer].cursorItemIconEnabled = false;
				player[myPlayer].cursorItemIconID = 0;
				mouseText = true;
				float num = inventoryScale;
				inventoryScale = cursorScale;
				ItemSlot.Draw(spriteBatch, mouseItem, 21, new Vector2(mouseX, mouseY));
				inventoryScale = num;
			}
			else
			{
				if (mouseNPCType <= -1)
				{
					return;
				}
				float num2 = 1f;
				num2 *= cursorScale;
				if (mouseNPCIndex >= 0)
				{
					NPC nPC = npc[mouseNPCIndex];
					if (!nPC.active || nPC.type != mouseNPCType)
					{
						SetMouseNPC_ToHousingQuery();
					}
				}
				int num3 = mouseNPCType;
				int num4 = 1;
				num4 = ((mouseNPCIndex < 0 || !TownNPCProfiles.Instance.GetProfile(num3, out var profile)) ? NPC.TypeToDefaultHeadIndex(num3) : profile.GetHeadTextureIndex(npc[mouseNPCIndex]));
				Texture2D value = TextureAssets.NpcHead[num4].Value;
				spriteBatch.Draw(value, new Vector2((float)mouseX + 26f * num2 - (float)value.Width * 0.5f * num2, (float)mouseY + 26f * num2 - (float)value.Height * 0.5f * num2), null, Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), num2, SpriteEffects.None, 0f);
				if (PlayerInput.IgnoreMouseInterface)
				{
					return;
				}
				player[myPlayer].mouseInterface = true;
				mouseText = false;
				if (mouseRight && mouseRightRelease)
				{
					SoundEngine.PlaySound(12);
					SetMouseNPC(-1, -1);
				}
				if (!mouseLeft || !mouseLeftRelease)
				{
					return;
				}
				if (mouseNPCType == 0)
				{
					PlayerInput.SetZoom_Unscaled();
					PlayerInput.SetZoom_MouseInWorld();
					int x = (int)(((float)mouseX + screenPosition.X) / 16f);
					int y = (int)(((float)mouseY + screenPosition.Y) / 16f);
					if (player[myPlayer].gravDir == -1f)
					{
						y = (int)((screenPosition.Y + (float)screenHeight - (float)mouseY) / 16f);
					}
					PlayerInput.SetZoom_Unscaled();
					int n = -1;
					if (WorldGen.MoveTownNPC(x, y, n))
					{
						NewText(Lang.inter[39].Value, byte.MaxValue, 240, 20);
					}
					return;
				}
				int num5 = mouseNPCIndex;
				if (num5 >= 0)
				{
					PlayerInput.SetZoom_Unscaled();
					PlayerInput.SetZoom_MouseInWorld();
					int x2 = (int)(((float)mouseX + screenPosition.X) / 16f);
					int y2 = (int)(((float)mouseY + screenPosition.Y) / 16f);
					PlayerInput.SetZoom_Unscaled();
					if (WorldGen.MoveTownNPC(x2, y2, num5))
					{
						SetMouseNPC(-1, -1);
						WorldGen.moveRoom(x2, y2, num5);
						SoundEngine.PlaySound(12);
					}
				}
			}
		}

		private static void DrawInterface_37_DebugStuff()
		{
		}

		private static void DrawInterface_36_Cursor()
		{
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, UIScaleMatrix);
			if (cursorOverride != -1)
			{
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)((float)(int)cursorColor.R * 0.2f), (int)((float)(int)cursorColor.G * 0.2f), (int)((float)(int)cursorColor.B * 0.2f), (int)((float)(int)cursorColor.A * 0.5f));
				Microsoft.Xna.Framework.Color white = cursorColor;
				bool flag = true;
				bool flag2 = true;
				float rotation = 0f;
				Vector2 value = default(Vector2);
				float num = 1f;
				if (cursorOverride == 2)
				{
					flag = false;
					white = Microsoft.Xna.Framework.Color.White;
					num = 0.7f;
					value = new Vector2(0.1f);
				}
				switch (cursorOverride)
				{
				case 2:
					flag = false;
					white = Microsoft.Xna.Framework.Color.White;
					num = 0.7f;
					value = new Vector2(0.1f);
					break;
				case 3:
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
					flag = false;
					white = Microsoft.Xna.Framework.Color.White;
					break;
				}
				if (flag)
				{
					spriteBatch.Draw(TextureAssets.Cursors[cursorOverride].Value, new Vector2(mouseX + 1, mouseY + 1), null, color, rotation, value * TextureAssets.Cursors[cursorOverride].Value.Size(), cursorScale * 1.1f * num, SpriteEffects.None, 0f);
				}
				if (flag2)
				{
					spriteBatch.Draw(TextureAssets.Cursors[cursorOverride].Value, new Vector2(mouseX, mouseY), null, white, rotation, value * TextureAssets.Cursors[cursorOverride].Value.Size(), cursorScale * num, SpriteEffects.None, 0f);
				}
			}
			else if (SmartCursorEnabled)
			{
				DrawCursor(DrawThickCursor(smart: true), smart: true);
			}
			else
			{
				DrawCursor(DrawThickCursor());
			}
		}

		private static void DrawInterface_35_YouDied()
		{
			if (player[myPlayer].dead)
			{
				float num = -60f;
				string value = Lang.inter[38].Value;
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.DeathText.Value, value, new Vector2((float)(screenWidth / 2) - FontAssets.DeathText.Value.MeasureString(value).X / 2f, (float)(screenHeight / 2) + num), player[myPlayer].GetDeathAlpha(Microsoft.Xna.Framework.Color.Transparent), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				if (player[myPlayer].lostCoins > 0)
				{
					num += 50f;
					string textValue = Language.GetTextValue("Game.DroppedCoins", player[myPlayer].lostCoinString);
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, textValue, new Vector2((float)(screenWidth / 2) - FontAssets.MouseText.Value.MeasureString(textValue).X / 2f, (float)(screenHeight / 2) + num), player[myPlayer].GetDeathAlpha(Microsoft.Xna.Framework.Color.Transparent), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
				num += (float)((player[myPlayer].lostCoins > 0) ? 24 : 50);
				num += 20f;
				float num2 = 0.7f;
				string textValue2 = Language.GetTextValue("Game.RespawnInSuffix", ((float)(int)(1f + (float)player[myPlayer].respawnTimer / 60f)).ToString());
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.DeathText.Value, textValue2, new Vector2((float)(screenWidth / 2) - FontAssets.MouseText.Value.MeasureString(textValue2).X * num2 / 2f, (float)(screenHeight / 2) + num), player[myPlayer].GetDeathAlpha(Microsoft.Xna.Framework.Color.Transparent), 0f, default(Vector2), num2, SpriteEffects.None, 0f);
			}
		}

		private void DrawInterface_34_PlayerChat()
		{
			if (ignoreErrors)
			{
				try
				{
					DrawPlayerChat();
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else
			{
				DrawPlayerChat();
			}
		}

		private void DrawInterface_33_MouseText()
		{
			if (mouseItem.stack <= 0)
			{
				mouseItem.type = 0;
			}
			if (hoverItemName != null && hoverItemName != "" && mouseItem.type == 0)
			{
				player[myPlayer].cursorItemIconEnabled = false;
				if (SettingsEnabled_OpaqueBoxBehindTooltips)
				{
					MouseText(hoverItemName, rare, 0, mouseX + 6, mouseY + 6);
				}
				else
				{
					MouseText(hoverItemName, rare, 0);
				}
				mouseText = true;
			}
			if (LocalPlayer.rulerLine && LocalPlayer.builderAccStatus[0] == 0 && LocalPlayer.velocity.Length() <= 6f)
			{
				int num = Math.Abs(rulerLineDisplayValues.X) + 1;
				int num2 = Math.Abs(rulerLineDisplayValues.Y) + 1;
				if (num > 1 || num2 > 1)
				{
					Utils.DrawBorderString(spriteBatch, num + "x" + num2, MouseScreen + new Vector2(16f, 0f), new Microsoft.Xna.Framework.Color(0.24f, 0.8f, 0.9f, 1f), GameZoomTarget, 0f, 0.8f);
				}
			}
		}

		private static void DrawInterface_32_GamepadRadialHotbars()
		{
			ItemSlot.DrawRadialCircular(spriteBatch, new Vector2(screenWidth, screenHeight) / 2f);
			ItemSlot.DrawRadialQuicks(spriteBatch, new Vector2(screenWidth, screenHeight) / 2f);
		}

		private void DrawInterface_31_BuilderAccToggles()
		{
			DrawBuilderAccToggles(new Vector2(10f, 77f));
		}

		public static void DrawInterface_29_SettingsButton()
		{
			_settingsButtonIsPushedToSide = false;
			if (playerInventory || ingameOptionsWindow || player[myPlayer].ghost || player[myPlayer].dead)
			{
				string value = Lang.inter[62].Value;
				string textSizeMatcher = "Settings";
				int num = screenWidth - 110;
				int num2 = screenHeight - 20;
				int num3 = 620;
				int num4 = 870;
				int amountOfExtraAccessorySlotsToShow = player[myPlayer].GetAmountOfExtraAccessorySlotsToShow();
				if (amountOfExtraAccessorySlotsToShow > 1)
				{
					int num5 = (int)(56f * inventoryScale * (float)(amountOfExtraAccessorySlotsToShow - 1));
					num3 += num5;
					num4 += num5;
				}
				if (amountOfExtraAccessorySlotsToShow >= 1 && (screenHeight < num3 || (screenHeight < num4 && mapStyle == 1)))
				{
					num -= 140;
					num2 -= PlayerInput.UsingGamepad.ToInt() * 30;
					_settingsButtonIsPushedToSide = true;
				}
				Action clickAction = IngameOptions.Open;
				if (ingameOptionsWindow)
				{
					clickAction = IngameOptions.Close;
				}
				DrawSettingButton(mouseExit, exitScale, num, num2, value, textSizeMatcher, clickAction);
			}
		}

		public static void DrawSettingButton(bool mouseOver, float scale, int posX, int posY, string text, string textSizeMatcher, Action clickAction)
		{
			Vector2 vector = FontAssets.MouseText.Value.MeasureString(textSizeMatcher);
			Vector2 vector2 = FontAssets.MouseText.Value.MeasureString(text);
			Vector2 vector3 = FontAssets.DeathText.Value.MeasureString(text);
			float num = vector.X / vector2.X;
			if (mouseOver)
			{
				if ((double)scale < 0.96)
				{
					scale += 0.02f;
				}
			}
			else if ((double)scale > 0.8)
			{
				scale -= 0.02f;
			}
			UILinkPointNavigator.SetPosition(308, new Vector2(posX, posY));
			for (int i = 0; i < 5; i++)
			{
				int num2 = 0;
				int num3 = 0;
				Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.Black;
				if (i == 0)
				{
					num2 = -2;
				}
				if (i == 1)
				{
					num2 = 2;
				}
				if (i == 2)
				{
					num3 = -2;
				}
				if (i == 3)
				{
					num3 = 2;
				}
				if (i == 4)
				{
					color = Microsoft.Xna.Framework.Color.White;
				}
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.DeathText.Value, text, new Vector2(posX + num2, posY + num3), color, 0f, new Vector2(vector3.X / 2f, vector3.Y / 2f), (scale - 0.2f) * num, SpriteEffects.None, 0f);
			}
			if ((float)mouseX > (float)posX - vector3.X / 2f && (float)mouseX < (float)posX + vector3.X / 2f && (float)mouseY > (float)posY - vector3.Y / 2f && (float)mouseY < (float)posY + vector3.Y / 2f - 10f && !LocalPlayer.mouseInterface)
			{
				if (!PlayerInput.IgnoreMouseInterface)
				{
					if (!mouseOver)
					{
						SoundEngine.PlaySound(12);
					}
					mouseOver = true;
					player[myPlayer].mouseInterface = true;
					if (mouseLeftRelease && mouseLeft)
					{
						mouseOver = false;
						scale = 0.8f;
						clickAction();
					}
				}
			}
			else
			{
				mouseOver = false;
			}
		}

		private void DrawInterface_28_InfoAccs()
		{
			float num = inventoryScale;
			inventoryScale = 0.6f;
			DrawInfoAccs();
			inventoryScale = num;
		}

		private void DrawInterface_27_Inventory()
		{
			if (playerInventory)
			{
				if (player[myPlayer].chest != -1)
				{
					CreativeMenu.CloseMenu();
				}
				if (ignoreErrors)
				{
					try
					{
						DrawInventory();
					}
					catch (Exception e)
					{
						TimeLogger.DrawException(e);
					}
				}
				else
				{
					DrawInventory();
				}
			}
			else
			{
				CreativeMenu.CloseMenu();
				recFastScroll = true;
				SetMouseNPC(-1, -1);
				EquipPage = 0;
			}
		}

		private static void DrawInterface_26_InterfaceLogic3()
		{
			bool flag = playerInventory;
			if (player[myPlayer].dead)
			{
				playerInventory = false;
			}
			if (!playerInventory)
			{
				player[myPlayer].chest = -1;
				InGuideCraftMenu = false;
				InReforgeMenu = false;
				if (flag)
				{
					Recipe.FindRecipes();
				}
			}
			hoverItemName = "";
		}

		private void DrawInterface_25_ResourceBars()
		{
			GUIBarsDraw();
		}

		private static void DrawInterface_24_InterfaceLogic2()
		{
			invAlpha += invDir * 0.2f;
			if (invAlpha > 240f)
			{
				invAlpha = 240f;
				invDir = -1f;
			}
			if (invAlpha < 180f)
			{
				invAlpha = 180f;
				invDir = 1f;
			}
			inventoryBack = new Microsoft.Xna.Framework.Color((byte)invAlpha, (byte)invAlpha, (byte)invAlpha, (byte)invAlpha);
			mouseText = false;
			rare = 0;
		}

		private void DrawInterface_23_NPCSignsDialog()
		{
			GUIChatDraw();
		}

		private void DrawInterface_22_DresserWindow()
		{
			if (clothesWindow)
			{
				DrawClothesWindow();
			}
		}

		private void DrawInterface_21_HairWindow()
		{
			if (hairWindow)
			{
				DrawHairWindow();
			}
		}

		private static void DrawInterface_20_MultiplayerPlayerNames()
		{
			ActiveClosePlayersTeamOverlay.Draw();
		}

		private static void DrawInterface_19_SignTileBubble()
		{
			if (signBubble)
			{
				int num = (int)((float)signX - screenPosition.X);
				int num2 = (int)((float)signY - screenPosition.Y);
				if (player[myPlayer].gravDir == -1f)
				{
					num2 = screenHeight - (int)((float)signY - screenPosition.Y) - 32;
				}
				SpriteEffects effects = SpriteEffects.None;
				if ((float)signX > player[myPlayer].position.X + (float)player[myPlayer].width)
				{
					effects = SpriteEffects.FlipHorizontally;
					num += -8 - TextureAssets.Chat2.Width();
				}
				else
				{
					num += 8;
				}
				num2 -= 22;
				spriteBatch.Draw(TextureAssets.Chat2.Value, new Vector2(num, num2), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Chat2.Width(), TextureAssets.Chat2.Height()), new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, default(Vector2), 1f, effects, 0f);
				signBubble = false;
			}
		}

		private static void DrawInterface_18_DiagnoseVideo()
		{
			if (!drawDiag)
			{
				return;
			}
			if (PlayerInput.UsingGamepad)
			{
				for (int i = 0; i < 2; i++)
				{
					string text = "";
					int num = 20;
					int num2 = 160;
					num2 += i * 16;
					if (i == 0)
					{
						text = "Gamepad Left Thumbstick  : " + string.Format("{0,-10} ,   {1,-10}", PlayerInput.GamepadThumbstickLeft.X.ToString("P2"), PlayerInput.GamepadThumbstickLeft.Y.ToString("P2"));
					}
					if (i == 1)
					{
						text = "Gamepad Right Thumbstick: " + string.Format("{0,-10} ,   {1,-10}", PlayerInput.GamepadThumbstickRight.X.ToString("P2"), PlayerInput.GamepadThumbstickRight.Y.ToString("P2"));
					}
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text, new Vector2(num, num2), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
			for (int j = 0; j < 7; j++)
			{
				string text2 = "";
				int num3 = 20;
				int num4 = 220;
				num4 += j * 16;
				if (j == 0)
				{
					text2 = "Solid Tiles:";
				}
				if (j == 1)
				{
					text2 = "Misc. Tiles:";
				}
				if (j == 2)
				{
					text2 = "Walls Tiles:";
				}
				if (j == 3)
				{
					text2 = "Background Tiles:";
				}
				if (j == 4)
				{
					text2 = "Water Tiles:";
				}
				if (j == 5)
				{
					text2 = "Black Tiles:";
				}
				if (j == 6)
				{
					text2 = "Total Render:";
				}
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text2, new Vector2(num3, num4), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			for (int k = 0; k < 7; k++)
			{
				string text3 = "";
				int num5 = 180;
				int num6 = 220;
				num6 += k * 16;
				float num7 = ((k != 6) ? TimeLogger.GetDrawTime(k) : TimeLogger.GetDrawTotal());
				text3 = $"{num7:F2}ms";
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text3, new Vector2(num5, num6), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			for (int l = 0; l < 6; l++)
			{
				string text4 = "";
				int num8 = 20;
				int num9 = 346;
				num9 += l * 16;
				if (l == 0)
				{
					text4 = "Lighting Init:";
				}
				if (l == 1)
				{
					text4 = "Lighting Phase #1:";
				}
				if (l == 2)
				{
					text4 = "Lighting Phase #2:";
				}
				if (l == 3)
				{
					text4 = "Lighting Phase #3";
				}
				if (l == 4)
				{
					text4 = "Lighting Phase #4";
				}
				if (l == 5)
				{
					text4 = "Total Lighting:";
				}
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text4, new Vector2(num8, num9), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			for (int m = 0; m < 6; m++)
			{
				string text5 = "";
				int num10 = 180;
				int num11 = 346;
				num11 += m * 16;
				float num12 = ((m != 5) ? TimeLogger.GetLightingTime(m) : TimeLogger.GetLightingTotal());
				text5 = $"{num12:F2}ms";
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text5, new Vector2(num10, num11), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			int num13 = 5;
			for (int n = 0; n < num13; n++)
			{
				string text6 = "";
				int num14 = 20;
				int num15 = 456;
				num15 += n * 16;
				text6 = "Render #" + n + ":";
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text6, new Vector2(num14, num15), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			for (int num16 = 0; num16 < num13; num16++)
			{
				string text7 = "";
				int num17 = 180;
				int num18 = 456;
				num18 += num16 * 16;
				text7 = $"{TimeLogger.GetRenderTime(num16):F2}ms";
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text7, new Vector2(num17, num18), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			for (int num19 = 0; num19 < num13; num19++)
			{
				string text8 = "";
				int num20 = 230;
				int num21 = 456;
				num21 += num19 * 16;
				num20 += 10;
				text8 = $"{TimeLogger.GetRenderMax(num19):F2}ms";
				DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text8, new Vector2(num20, num21), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			string text9 = "";
			int num22 = 20;
			int num23 = 456 + 16 * num13 + 16;
			text9 = "Update:";
			DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text9, new Vector2(num22, num23), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			text9 = "";
			num22 = 180;
			text9 = $"{upTimer:F2}ms";
			DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text9, new Vector2(num22, num23), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			text9 = "";
			num22 = 240;
			text9 = $"{upTimerMax:F2}ms";
			DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text9, new Vector2(num22, num23), Microsoft.Xna.Framework.Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
		}

		private static void DrawInterface_17_DiagnoseNet()
		{
			if (shouldDrawNetDiagnosticsUI)
			{
				ActiveNetDiagnosticsUI.Draw(spriteBatch);
			}
		}

		private void DrawInterface_16_MapOrMinimap()
		{
			mH = 0;
			if (!mapEnabled)
			{
				return;
			}
			if (!mapFullscreen && mapStyle == 1)
			{
				mH = 256;
				try
				{
					DrawMap(new GameTime());
				}
				catch (Exception e)
				{
					if (!ignoreErrors)
					{
						throw;
					}
					TimeLogger.DrawException(e);
				}
			}
			PlayerInput.SetZoom_UI();
			if (mH + RecommendedEquipmentAreaPushUp > screenHeight)
			{
				mH = screenHeight - RecommendedEquipmentAreaPushUp;
			}
		}

		private static void DrawInterface_15_InvasionProgressBars()
		{
			DrawInvasionProgress();
			if (HealthBarDrawSettings != 0)
			{
				BigBossProgressBar.Draw(spriteBatch);
			}
		}

		private void DrawInterface_14_EntityHealthBars()
		{
			if (HealthBarDrawSettings == 0)
			{
				return;
			}
			int num = -1;
			if (PlayerInput.UsingGamepad)
			{
				Player localPlayer = LocalPlayer;
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = npc[i];
					if ((nPC.life == nPC.lifeMax || nPC.dontTakeDamage) && !nPC.dontTakeDamage && nPC.nameOver > 0f && (num == -1 || nPC.Distance(localPlayer.Center) < npc[num].Distance(localPlayer.Center)))
					{
						num = i;
					}
				}
			}
			bool flag = false;
			for (int num2 = 199; num2 >= 0; num2--)
			{
				if (npc[num2].active && npc[num2].type > 0)
				{
					npc[num2].position += npc[num2].netOffset;
					if (npc[num2].life != npc[num2].lifeMax && !npc[num2].dontTakeDamage)
					{
						float scale = 1f;
						int type = npc[num2].type;
						if (type == 4)
						{
							scale = 1.5f;
						}
						if (type == 35)
						{
							scale = 1.5f;
						}
						if (type == 36)
						{
							scale = 1.5f;
						}
						if (type == 50)
						{
							scale = 1.5f;
						}
						if (type == 113)
						{
							scale = 1.5f;
						}
						if (type == 114)
						{
							scale = 1.5f;
						}
						if (type == 125)
						{
							scale = 1.5f;
						}
						if (type == 126)
						{
							scale = 1.5f;
						}
						if (type == 127)
						{
							scale = 1.5f;
						}
						if (type == 128)
						{
							scale = 1.5f;
						}
						if (type == 129)
						{
							scale = 1.5f;
						}
						if (type == 130)
						{
							scale = 1.5f;
						}
						if (type == 131)
						{
							scale = 1.5f;
						}
						if (type == 222)
						{
							scale = 1.5f;
						}
						if (type >= 245 && type <= 249)
						{
							scale = 1.5f;
						}
						if (type == 262)
						{
							scale = 1.5f;
						}
						if (type == 266)
						{
							scale = 1.5f;
						}
						if (type == 564 || type == 565 || type == 551 || type == 576 || type == 577)
						{
							scale = 1.5f;
						}
						if (type == 87)
						{
							scale = 1.5f;
						}
						if (type == 510 || type == 454 || type == 621)
						{
							scale = 1.5f;
						}
						if (type == 439 || type == 370)
						{
							scale = 1.5f;
						}
						if ((!expertMode || type != 266) && ((type != 439 && type != 440) || npc[num2].ai[0] != 5f))
						{
							if (type >= 134 && type <= 136)
							{
								scale = 1.5f;
								if (!flag)
								{
									flag = true;
									Vector2 value = default(Vector2);
									float num3 = 999999f;
									for (int j = 0; j < 200; j++)
									{
										if (npc[j].active && npc[j].type >= 134 && npc[j].type <= 136)
										{
											Vector2 vector = player[myPlayer].Center - npc[j].Center;
											if (vector.Length() < num3 && Collision.CanHit(player[myPlayer].Center, 1, 1, npc[j].Center, 1, 1))
											{
												num3 = vector.Length();
												value = npc[j].position;
											}
										}
									}
									if (num3 < (float)screenWidth)
									{
										if (destroyerHB.X < 100f && destroyerHB.Y < 100f)
										{
											destroyerHB = value;
										}
										else
										{
											destroyerHB = (destroyerHB * 49f + value) / 50f;
										}
										value = destroyerHB;
										int num4 = num2;
										if (type != 134 && npc[num2].realLife != -1)
										{
											num4 = npc[num2].realLife;
										}
										float num5 = Lighting.Brightness((int)((npc[num2].position.X + (float)(npc[num2].width / 2)) / 16f), (int)((npc[num2].position.Y + (float)(npc[num2].height / 2) + npc[num2].gfxOffY) / 16f));
										num5 = (num5 + 1f) / 2f;
										DrawHealthBar(value.X + (float)(npc[num2].width / 2), value.Y + (float)(npc[num2].height / 2), npc[num4].life, npc[num4].lifeMax, num5, scale);
									}
									else
									{
										destroyerHB = new Vector2(0f, 0f);
									}
								}
							}
							else
							{
								switch (type)
								{
								case 7:
									DrawInterface_Healthbar_Worm(npc[num2], 9, scale);
									break;
								case 95:
									DrawInterface_Healthbar_Worm(npc[num2], 97, scale);
									break;
								case 10:
									DrawInterface_Healthbar_Worm(npc[num2], 12, scale);
									break;
								case 87:
									DrawInterface_Healthbar_Worm(npc[num2], 92, scale);
									break;
								default:
									switch (type)
									{
									case 412:
										DrawInterface_Healthbar_Worm(npc[num2], 414, scale);
										break;
									case 39:
										DrawInterface_Healthbar_Worm(npc[num2], 41, scale);
										break;
									case 98:
										DrawInterface_Healthbar_Worm(npc[num2], 100, scale);
										break;
									case 454:
										DrawInterface_Healthbar_Worm(npc[num2], 459, scale);
										break;
									default:
										switch (type)
										{
										case 510:
											DrawInterface_Healthbar_Worm(npc[num2], 512, scale);
											break;
										case 621:
											DrawInterface_Healthbar_Worm(npc[num2], 623, scale);
											break;
										case 513:
											DrawInterface_Healthbar_Worm(npc[num2], 515, scale);
											break;
										case 117:
											DrawInterface_Healthbar_Worm(npc[num2], 119, scale);
											break;
										default:
											if (HealthBarDrawSettings == 1)
											{
												float num6 = 10f;
												num6 += NPCAddHeight(npc[num2]);
												DrawHealthBar(npc[num2].position.X + (float)(npc[num2].width / 2), npc[num2].position.Y + (float)npc[num2].height + num6 + npc[num2].gfxOffY, npc[num2].life, npc[num2].lifeMax, Lighting.Brightness((int)((npc[num2].position.X + (float)(npc[num2].width / 2)) / 16f), (int)((npc[num2].position.Y + (float)(npc[num2].height / 2) + npc[num2].gfxOffY) / 16f)), scale);
											}
											else if (HealthBarDrawSettings == 2)
											{
												float num7 = -24f;
												num7 -= NPCAddHeight(npc[num2]) / 2f;
												DrawHealthBar(npc[num2].position.X + (float)(npc[num2].width / 2), npc[num2].position.Y + num7 + npc[num2].gfxOffY, npc[num2].life, npc[num2].lifeMax, Lighting.Brightness((int)((npc[num2].position.X + (float)(npc[num2].width / 2)) / 16f), (int)((npc[num2].position.Y + (float)(npc[num2].height / 2) + npc[num2].gfxOffY) / 16f)), scale);
											}
											break;
										case 118:
										case 119:
										case 511:
										case 512:
										case 514:
										case 515:
										case 622:
										case 623:
											break;
										}
										break;
									case 40:
									case 41:
									case 99:
									case 100:
									case 413:
									case 414:
									case 455:
									case 456:
									case 457:
									case 458:
									case 459:
										break;
									}
									break;
								case 8:
								case 9:
								case 11:
								case 12:
								case 88:
								case 89:
								case 90:
								case 91:
								case 92:
								case 96:
								case 97:
									break;
								}
							}
						}
					}
					else if (!npc[num2].dontTakeDamage && npc[num2].nameOver > 0f && PlayerInput.UsingGamepad && num2 == num)
					{
						Vector2 stringSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, npc[num2].GivenOrTypeName, Vector2.One);
						Vector2 vector2 = npc[num2].Bottom - screenPosition + new Vector2(0f, 10f);
						if (NPC.GetNPCLocation(num2, seekHead: true, averageDirection: true, out var _, out var pos))
						{
							vector2 = pos - screenPosition + new Vector2(0f, 10 + npc[num2].height / 2);
							if (player[myPlayer].gravDir == -1f)
							{
								vector2 = ReverseGravitySupport(vector2, -npc[num2].height - 20);
							}
							Vector2 origin = stringSize * new Vector2(0.5f, 0f);
							ChatManager.DrawColorCodedStringShadow(spriteBatch, FontAssets.MouseText.Value, npc[num2].GivenOrTypeName, vector2, Microsoft.Xna.Framework.Color.Black * npc[num2].nameOver * 0.5f, 0f, origin, Vector2.One);
							ChatManager.DrawColorCodedString(spriteBatch, FontAssets.MouseText.Value, npc[num2].GivenOrTypeName, vector2, Microsoft.Xna.Framework.Color.White * npc[num2].nameOver, 0f, origin, Vector2.One);
						}
					}
					if (npc[num2].type == 548 && !npc[num2].dontTakeDamageFromHostiles && DD2Event.TimeLeftBetweenWaves > 0 && !hideUI)
					{
						Vector2 position = npc[num2].Bottom - screenPosition + new Vector2(0f, -100f);
						int num8 = DD2Event.TimeLeftBetweenWaves / 60;
						string text = $"{num8}";
						DynamicSpriteFont value2 = FontAssets.MouseText.Value;
						float scaleFactor = 1f;
						Vector2 origin2 = value2.MeasureString(text) * scaleFactor * new Vector2(0.5f, 0.5f);
						ChatManager.DrawColorCodedStringWithShadow(spriteBatch, value2, text, position, Microsoft.Xna.Framework.Color.White, 0f, origin2, Vector2.One * scaleFactor);
					}
					npc[num2].position -= npc[num2].netOffset;
				}
			}
			for (int k = 0; k < 255; k++)
			{
				if (k != myPlayer && player[k].active && !player[k].ghost && !player[k].dead && !player[k].invis && player[k].statLife != player[k].statLifeMax2)
				{
					if (HealthBarDrawSettings == 1)
					{
						int num9 = 10;
						DrawHealthBar(player[k].position.X + (float)(player[k].width / 2), player[k].position.Y + (float)player[k].height + (float)num9 + player[k].gfxOffY, player[k].statLife, player[k].statLifeMax2, player[k].stealth * Lighting.Brightness((int)((player[k].position.X + (float)(player[k].width / 2)) / 16f), (int)((player[k].position.Y + (float)(player[k].height / 2) + player[k].gfxOffY) / 16f)));
					}
					else if (HealthBarDrawSettings == 2)
					{
						int num10 = -20;
						DrawHealthBar(player[k].position.X + (float)(player[k].width / 2), player[k].position.Y + (float)num10 + player[k].gfxOffY, player[k].statLife, player[k].statLifeMax2, player[k].stealth * Lighting.Brightness((int)((player[k].position.X + (float)(player[k].width / 2)) / 16f), (int)((player[k].position.Y + (float)(player[k].height / 2) + player[k].gfxOffY) / 16f)));
					}
				}
			}
		}

		private void DrawInterface_Healthbar_Worm(NPC head, int tailID, float scale)
		{
			NPC nPC = head;
			for (int i = head.whoAmI + 1; i < 200; i++)
			{
				if (npc[i].active && npc[i].type == tailID)
				{
					nPC = npc[i];
					break;
				}
			}
			Vector2 vector = (head.position + nPC.position) / 2f;
			DrawHealthBar(vector.X + (float)(head.width / 2), vector.Y + (float)(head.height / 2), head.life, head.lifeMax, Lighting.Brightness((int)((head.position.X + (float)(head.width / 2)) / 16f), (int)((head.position.Y + (float)(head.height / 2) + head.gfxOffY) / 16f)), scale);
		}

		private static void DrawInterface_13_AchievementCompletePopups()
		{
			InGameNotificationsTracker.DrawInGame(spriteBatch);
		}

		private static bool DrawInterface_12_IngameFancyUI()
		{
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, UIScaleMatrix);
			InGameUI.Draw(spriteBatch, _drawInterfaceGameTime);
			bool result = true;
			if (inFancyUI && !IngameFancyUI.Draw(spriteBatch, _drawInterfaceGameTime))
			{
				result = false;
				DrawPendingMouseText();
			}
			return result;
		}

		private bool DrawInterface_11_IngameOptionsMenu()
		{
			bool result = true;
			if (ingameOptionsWindow)
			{
				DrawInterface_16_MapOrMinimap();
				PlayerInput.SetZoom_UI();
				Matrix uIScaleMatrix = UIScaleMatrix;
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, null, null, null, null, null, uIScaleMatrix);
				IngameOptions.Draw(this, spriteBatch);
				DrawInterface_40_InteractItemIcon();
				DrawPendingMouseText();
				result = false;
				_MouseOversCanClear = true;
			}
			return result;
		}

		private static bool DrawInterface_8_CheckF11UIHideToggle()
		{
			bool result = true;
			if (hideUI)
			{
				maxQ = true;
				result = false;
				_MouseOversCanClear = true;
				DrawPendingMouseText();
			}
			return result;
		}

		private static bool DrawInterface_10_CheckCaptureManager()
		{
			bool result = true;
			PlayerInput.SetDesiredZoomContext(ZoomContext.Unscaled_MouseInWorld);
			CaptureManager.Instance.Update();
			if (CaptureManager.Instance.Active)
			{
				CaptureManager.Instance.Draw(spriteBatch);
				result = false;
				_MouseOversCanClear = true;
				PlayerInput.SetZoom_UI();
				Matrix uIScaleMatrix = UIScaleMatrix;
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, null, null, null, null, null, uIScaleMatrix);
				DrawPendingMouseText();
			}
			return result;
		}

		private static void DrawInterface_9_WireSelection()
		{
			if (!hideUI)
			{
				DrawInterface_Resources_GolfPower();
				DrawInterface_GolfBallIndicator();
			}
			WiresUI.HandleWiresUI(spriteBatch);
		}

		private static void DrawInterface_0_InterfaceLogic1()
		{
			if (player[myPlayer].selectedItem == 58 && player[myPlayer].itemAnimation > 0)
			{
				mouseLeftRelease = false;
			}
		}

		private void DrawInterface_7_TownNPCHouseBanners()
		{
			if (EquipPage != 1 && (!UILinkPointNavigator.Shortcuts.NPCS_IconsDisplay || !PlayerInput.UsingGamepad))
			{
				return;
			}
			if (ignoreErrors)
			{
				try
				{
					DrawNPCHousesInWorld();
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else
			{
				DrawNPCHousesInWorld();
			}
		}

		private static void DrawInterface_6_TileGridOption()
		{
			bool flag = MouseShowBuildingGrid && !SmartCursorEnabled;
			if (PlayerInput.UsingGamepad && !SmartCursorEnabled)
			{
				_ = !PlayerInput.UsingGamepadUI;
			}
			else
				_ = 0;
			if (flag && !player[myPlayer].dead && !PlayerInput.CursorIsBusy)
			{
				float num = player[myPlayer].velocity.Length();
				float num2 = 6f;
				float value = MathHelper.Lerp(0f, 0.7f, MathHelper.Clamp(1f - num / num2, 0f, 1f));
				MouseBuildingGridAlpha = MathHelper.Lerp(MouseBuildingGridAlpha, value, 0.2f);
				value = MouseBuildingGridAlpha;
				if (value > 0f)
				{
					Vector2 position = MouseWorld.ToTileCoordinates().ToVector2() * 16f;
					new Vector2(offScreenRange, offScreenRange);
					_ = drawToScreen;
					position -= screenPosition;
					position += new Vector2(8f);
					if (player[myPlayer].gravDir == -1f)
					{
						position.Y = (float)screenHeight - position.Y;
					}
					Texture2D value2 = TextureAssets.CursorRadial.Value;
					spriteBatch.Draw(value2, position, null, Microsoft.Xna.Framework.Color.White * 0.5f * value, 0f, value2.Size() / 2f, 1f, SpriteEffects.None, 0f);
				}
			}
			else
			{
				MouseBuildingGridAlpha = MathHelper.Clamp(MouseBuildingGridAlpha - 0.05f, 0f, 1f);
			}
		}

		private static void DrawInterface_5_GamepadLockOn()
		{
			LockOnHelper.Draw(spriteBatch);
		}

		private static void DrawInterface_4_Ruler()
		{
			if (!player[myPlayer].rulerLine || player[myPlayer].builderAccStatus[0] != 0)
			{
				return;
			}
			float num = player[myPlayer].velocity.Length();
			float num2 = 6f;
			float num3 = 2f;
			if (!(num <= num2))
			{
				return;
			}
			float scale = 1f;
			if (num >= num3)
			{
				scale = 1f - (num - num3) / num2;
			}
			int num4 = 1;
			if ((float)mouseX + screenPosition.X < player[myPlayer].Center.X)
			{
				num4 = -1;
			}
			int num5 = (int)(player[myPlayer].position.X + (float)(player[myPlayer].width / 2)) / 16;
			int num6 = (int)(player[myPlayer].position.Y + (float)player[myPlayer].height - 2f) / 16;
			if (player[myPlayer].gravDir == -1f)
			{
				num6--;
			}
			Vector2 mouseWorld = MouseWorld;
			if (Math.Abs(num5 - (int)(MouseWorld.X / 16f)) > 0)
			{
				num5 += num4;
			}
			if (player[myPlayer].gravDir == -1f)
			{
				mouseWorld.Y += 16f;
			}
			mouseWorld /= 16f;
			new Vector2(num5, num6);
			int num7 = (int)mouseWorld.X - num5;
			int num8 = (int)mouseWorld.Y - num6;
			Math.Abs(num7);
			Math.Abs(num8);
			rulerLineDisplayValues.X = num7;
			rulerLineDisplayValues.Y = num8;
			if (num7 == 0 && num8 == 0)
			{
				return;
			}
			Texture2D value = TextureAssets.Extra[2].Value;
			Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
			int num9 = num5;
			int num10 = num6;
			if (player[myPlayer].gravDir == -1f)
			{
				num10--;
			}
			float r = 0.24f;
			float g = 0.8f;
			float b = 0.9f;
			float a = 1f;
			float scale2 = 0.8f;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(r, g, b, a) * scale2 * scale;
			spriteBatch.Draw(value, ReverseGravitySupport(new Vector2(num9, num10) * 16f - screenPosition, 16f), value2, color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
			if (num7 != 0)
			{
				int num11 = Math.Sign(num7);
				value2.Y = ((num11 == 1) ? 16 : 32);
				while (num7 != 0)
				{
					num7 -= num11;
					num9 += num11;
					if (num7 == 0)
					{
						value2.Y = 0;
					}
					color = new Microsoft.Xna.Framework.Color(r, g, b, a) * scale2 * scale;
					spriteBatch.Draw(value, ReverseGravitySupport(new Vector2(num9, num10) * 16f - screenPosition, 16f), value2, color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
				}
			}
			if (num8 == 0)
			{
				return;
			}
			int num12 = Math.Sign(num8);
			value2.Y = ((num12 == 1) ? 48 : 64);
			while (num8 != 0)
			{
				num8 -= num12;
				num10 += num12;
				if (num8 == 0)
				{
					value2.Y = 0;
				}
				color = new Microsoft.Xna.Framework.Color(r, g, b, a) * scale2 * scale;
				spriteBatch.Draw(value, ReverseGravitySupport(new Vector2(num9, num10) * 16f - screenPosition, 16f), value2, color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
			}
		}

		private static void DrawInterface_3_LaserRuler()
		{
			if (!player[myPlayer].rulerGrid || player[myPlayer].builderAccStatus[1] != 0)
			{
				return;
			}
			float num = player[myPlayer].velocity.Length();
			num = Vector2.Distance(player[myPlayer].position, player[myPlayer].shadowPos[2]);
			float num2 = 6f;
			Texture2D value = TextureAssets.Extra[68].Value;
			float scale = MathHelper.Lerp(0.2f, 0.7f, MathHelper.Clamp(1f - num / num2, 0f, 1f));
			Vector2 vec = screenPosition;
			vec += new Vector2(-50f);
			vec = vec.ToTileCoordinates().ToVector2() * 16f;
			int num3 = (screenWidth + 100) / 16;
			int num4 = (screenHeight + 100) / 16;
			Microsoft.Xna.Framework.Point point = MouseWorld.ToTileCoordinates();
			point.X -= (int)vec.X / 16;
			point.Y -= (int)vec.Y / 16;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(0.24f, 0.8f, 0.9f, 0.5f) * 0.4f * scale;
			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(1f, 0.8f, 0.9f, 0.5f) * 0.5f * scale;
			Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(0, 18, 18, 18);
			vec -= Vector2.One;
			for (int i = 0; i < num3; i++)
			{
				for (int j = 0; j < num4; j++)
				{
					Microsoft.Xna.Framework.Color color3 = color;
					Vector2 zero = Vector2.Zero;
					if (i != point.X && j != point.Y)
					{
						if (i != point.X + 1)
						{
							value2.X = 0;
							value2.Width = 16;
						}
						else
						{
							value2.X = 2;
							value2.Width = 14;
							zero.X = 2f;
						}
						if (j != point.Y + 1)
						{
							value2.Y = 18;
							value2.Height = 16;
						}
						else
						{
							value2.Y = 2;
							value2.Height = 14;
							zero.Y = 2f;
						}
						spriteBatch.Draw(value, ReverseGravitySupport(new Vector2(i, j) * 16f - screenPosition + vec + zero, 16f), value2, color3, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
				}
			}
			value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 18);
			for (int k = 0; k < num3; k++)
			{
				if (k == point.X)
				{
					spriteBatch.Draw(value, ReverseGravitySupport(new Vector2(k, point.Y) * 16f - screenPosition + vec, 16f), new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16), color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
				}
				else
				{
					spriteBatch.Draw(value, ReverseGravitySupport(new Vector2(k, point.Y) * 16f - screenPosition + vec, 16f), value2, color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
				}
			}
			value2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 18, 16);
			for (int l = 0; l < num4; l++)
			{
				if (l != point.Y)
				{
					spriteBatch.Draw(value, ReverseGravitySupport(new Vector2(point.X, l) * 16f - screenPosition + vec, 16f), value2, color2, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
				}
			}
		}

		private static void DrawInterface_2_SmartCursorTargets()
		{
			DrawSmartCursor();
		}

		private static void DrawInterface_1_1_DrawEmoteBubblesInWorld()
		{
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Deferred, null, SamplerState.PointClamp, null, null, null, GameViewMatrix.ZoomMatrix);
			EmoteBubble.DrawAll(spriteBatch);
			if (instance.currentNPCShowingChatBubble != -1)
			{
				DrawNPCChatBubble(instance.currentNPCShowingChatBubble);
			}
			instance.currentNPCShowingChatBubble = -1;
		}

		private static void DrawInterface_1_2_DrawEntityMarkersInWorld()
		{
			Player localPlayer = LocalPlayer;
			if (localPlayer.dead || !localPlayer.HeldItem.summon)
			{
				return;
			}
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Deferred, null, SamplerState.PointClamp, null, null, null, GameViewMatrix.ZoomMatrix);
			Texture2D value = TextureAssets.Extra[199].Value;
			Vector2 zero = Vector2.Zero;
			int minionAttackTargetNPC = localPlayer.MinionAttackTargetNPC;
			Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = npc[i];
				if (nPC.active && nPC.Hitbox.Intersects(value2))
				{
					Vector2 value3 = nPC.Center - screenPosition;
					if (player[myPlayer].gravDir == -1f)
					{
						value3.Y = (float)screenHeight - value3.Y;
					}
					Vector2 position = value3 + zero;
					if (i == minionAttackTargetNPC)
					{
						int frameY = (int)(GlobalTimeWrappedHourly * 10f) % 4;
						Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, 4, 0, frameY, 0, -2);
						Vector2 origin = rectangle.Size() / 2f;
						Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White * 0.7f;
						color.A /= 2;
						spriteBatch.Draw(value, position, rectangle, color, 0f, origin, 1f, SpriteEffects.None, 0f);
					}
				}
			}
		}

		private static void MouseOversTryToClear()
		{
			if (_MouseOversCanClear)
			{
				_MouseOversCanClear = false;
				MouseOversClear();
			}
		}

		private static void MouseOversClear()
		{
			player[myPlayer].cursorItemIconEnabled = false;
			player[myPlayer].cursorItemIconID = 0;
			player[myPlayer].cursorItemIconText = string.Empty;
			signHover = -1;
		}

		public static void ItemIconCacheUpdate(int selectedItemID)
		{
			_itemIconCacheScreenPosition = MouseScreen;
			_itemIconCacheSelectedItemID = selectedItemID;
			_itemIconCacheTime = 10;
		}

		public static void ItemIconCacheVerification()
		{
			if (_itemIconCacheTime > 0)
			{
				float num = Vector2.Distance(_itemIconCacheScreenPosition, MouseScreen);
				if (num != 0f)
				{
					_itemIconCacheTime--;
				}
				if (num > 4f)
				{
					_itemIconCacheTime = 0;
				}
				if (_itemIconCacheSelectedItemID != player[myPlayer].inventory[player[myPlayer].selectedItem].type)
				{
					_itemIconCacheTime = 0;
				}
			}
		}

		public static void DrawWallOfFish()
		{
			List<int> list = new List<int>();
			for (int i = 2297; i <= 2321; i++)
			{
				list.Add(i);
			}
			for (int j = 2450; j <= 2488; j++)
			{
				list.Add(j);
			}
			for (int k = 0; k < 5; k++)
			{
				float num = 10f;
				Vector2 vector = new Vector2((float)screenWidth / num * (GlobalTimeWrappedHourly % num), -100f);
				vector.X += 14 * k;
				vector.Y += k % 2 * 14;
				int num2 = 30 * k;
				while (vector.Y < (float)(screenHeight + 100))
				{
					if (++num2 >= list.Count)
					{
						num2 = 0;
					}
					vector.Y += 26f;
					instance.LoadItem(list[num2]);
					Texture2D value = TextureAssets.Item[list[num2]].Value;
					Microsoft.Xna.Framework.Point point = (vector + screenPosition).ToTileCoordinates();
					spriteBatch.Draw(value, vector, null, Lighting.GetColor(point.X, point.Y), (float)Math.PI / 4f, value.Size() / 2f, 1f, SpriteEffects.None, 0f);
				}
			}
		}

		public static void DrawWallOfStars()
		{
			bool flag = true;
			if (flag)
			{
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			}
			int num = Projectile.NewProjectile(Vector2.Zero, Vector2.UnitX, 12, 0, 0f, myPlayer);
			Projectile projectile = Main.projectile[num];
			for (int i = 0; i < 5; i++)
			{
				float num2 = 10f;
				Vector2 value = new Vector2((float)screenWidth / num2 * (GlobalTimeWrappedHourly % num2), -100f);
				value.X += 14 * i;
				value.Y += i % 2 * 14;
				while (value.Y < (float)(screenHeight + 100))
				{
					value.Y += 26f;
					projectile.position = Vector2.One * 10f;
					projectile.velocity = Vector2.UnitX * 10f;
					projectile.rotation = GlobalTimeWrappedHourly * ((float)Math.PI * 2f);
					projectile.Update(num);
					projectile.position = value + screenPosition;
					instance.DrawProj(num);
				}
			}
			projectile.position = Vector2.One * 10f;
			projectile.Kill();
			if (flag)
			{
				spriteBatch.End();
			}
		}

		private static void DrawSmartCursor()
		{
			if (SmartCursorShowing && !player[myPlayer].dead)
			{
				Vector2 vector = new Vector2(SmartCursorX, SmartCursorY) * 16f;
				new Vector2(offScreenRange, offScreenRange);
				_ = drawToScreen;
				vector -= screenPosition;
				if (player[myPlayer].gravDir == -1f)
				{
					vector.Y = (float)screenHeight - vector.Y - 16f;
				}
				Microsoft.Xna.Framework.Color newColor = Lighting.GetColor(SmartCursorX, SmartCursorY) * 1f;
				Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1);
				float r = 1f;
				float g = 0.9f;
				float b = 0.1f;
				float a = 1f;
				float scale = 0.6f;
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 8f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 8f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.One * 8f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				b = 0.3f;
				g = 0.95f;
				a = (scale = 1f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * -2f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 16f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * -2f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 16f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
			}
		}

		private static void DrawSmartInteract()
		{
			if (SmartInteractShowingGenuine && SmartInteractNPC == -1 && SmartInteractProj == -1 && !player[myPlayer].dead)
			{
				Vector2 vector = new Vector2(SmartInteractX, SmartInteractY) * 16f;
				new Vector2(offScreenRange, offScreenRange);
				_ = drawToScreen;
				vector -= screenPosition;
				if (player[myPlayer].gravDir == -1f)
				{
					vector.Y = (float)screenHeight - vector.Y - 16f;
				}
				Microsoft.Xna.Framework.Color newColor = Lighting.GetColor(SmartInteractX, SmartInteractY) * 1f;
				Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1);
				float r = 0.1f;
				float g = 0.9f;
				float b = 1f;
				float a = 1f;
				float scale = 0.6f;
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 8f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 8f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.One * 8f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				r = 0.3f;
				g = 0.95f;
				a = (scale = 1f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * -2f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitX * 16f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * -2f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector + Vector2.UnitY * 16f, value, buffColor(newColor, r, g, b, a) * scale, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
			}
		}

		private void DrawInterface_30_Hotbar()
		{
			try
			{
				GUIHotbarDrawInner();
			}
			catch (Exception e)
			{
				if (ignoreErrors)
				{
					TimeLogger.DrawException(e);
					return;
				}
				throw;
			}
		}

		public void GUIChatDraw()
		{
			if (ignoreErrors)
			{
				try
				{
					if ((npcChatText != "" || player[myPlayer].sign != -1) && !editChest)
					{
						GUIChatDrawInner();
					}
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else if ((npcChatText != "" || player[myPlayer].sign != -1) && !editChest)
			{
				GUIChatDrawInner();
			}
		}

		public static void DrawItemIcon(SpriteBatch spriteBatch, Item theItem, Vector2 screenPositionForItemCenter, Microsoft.Xna.Framework.Color itemLightColor, float sizeLimit)
		{
			instance.LoadItem(theItem.type);
			Texture2D value = TextureAssets.Item[theItem.type].Value;
			Microsoft.Xna.Framework.Rectangle value2 = ((itemAnimations[theItem.type] == null) ? value.Frame() : itemAnimations[theItem.type].GetFrame(value));
			int width = value2.Width;
			int height = value2.Height;
			float num = 1f;
			if ((float)width > sizeLimit || (float)height > sizeLimit)
			{
				num = ((width <= height) ? (sizeLimit / (float)height) : (sizeLimit / (float)width));
			}
			num *= theItem.scale;
			SpriteEffects effects = SpriteEffects.None;
			Microsoft.Xna.Framework.Color currentColor = itemLightColor;
			float scale = 1f;
			ItemSlot.GetItemLight(currentColor, scale, theItem);
			num *= scale;
			spriteBatch.Draw(value, screenPositionForItemCenter, value2, currentColor, 0f, new Vector2(width / 2, height / 2), num, effects, 0f);
			if (theItem.color != default(Microsoft.Xna.Framework.Color))
			{
				spriteBatch.Draw(value, screenPositionForItemCenter, value2, theItem.GetColor(itemLightColor), 0f, new Vector2(width / 2, height / 2), num, effects, 0f);
			}
		}

		private void DrawInfoAccs()
		{
			if (!CanShowInfoAccs)
			{
				return;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			int num = -1;
			int num2 = -10;
			int num3 = 0;
			string text = "";
			float num4 = 215f;
			int startX = 0;
			if (GameCulture.FromCultureName(GameCulture.CultureName.Russian).IsActive)
			{
				startX = -50;
				num4 += 50f;
			}
			for (int i = 0; i < 12; i++)
			{
				string text2 = "";
				string text3 = "";
				if (player[myPlayer].accWatch > 0 && !flag && (!player[myPlayer].hideInfo[0] || playerInventory))
				{
					num = 0;
					text3 = Lang.inter[95].Value;
					string textValue = Language.GetTextValue("GameUI.TimeAtMorning");
					double num5 = time;
					if (!dayTime)
					{
						num5 += 54000.0;
					}
					num5 = num5 / 86400.0 * 24.0;
					double num6 = 7.5;
					num5 = num5 - num6 - 12.0;
					if (num5 < 0.0)
					{
						num5 += 24.0;
					}
					if (num5 >= 12.0)
					{
						textValue = Language.GetTextValue("GameUI.TimePastMorning");
					}
					int num7 = (int)num5;
					double num8 = num5 - (double)num7;
					num8 = (int)(num8 * 60.0);
					string text4 = string.Concat(num8);
					if (num8 < 10.0)
					{
						text4 = "0" + text4;
					}
					if (num7 > 12)
					{
						num7 -= 12;
					}
					if (num7 == 0)
					{
						num7 = 12;
					}
					if (player[myPlayer].accWatch == 1)
					{
						text4 = "00";
					}
					else if (player[myPlayer].accWatch == 2)
					{
						text4 = ((!(num8 < 30.0)) ? "30" : "00");
					}
					text2 = num7 + ":" + text4 + " " + textValue;
					flag = true;
				}
				else if (player[myPlayer].accWeatherRadio && !flag5 && (!player[myPlayer].hideInfo[1] || playerInventory))
				{
					num = 1;
					text3 = Lang.inter[96].Value;
					string text5 = "";
					text5 = (IsItStorming ? Language.GetTextValue("GameUI.Storm") : (((double)maxRaining > 0.6) ? Language.GetTextValue("GameUI.HeavyRain") : (((double)maxRaining >= 0.2) ? Language.GetTextValue("GameUI.Rain") : ((maxRaining > 0f) ? Language.GetTextValue("GameUI.LightRain") : ((cloudBGActive > 0f) ? Language.GetTextValue("GameUI.Overcast") : ((numClouds > 90) ? Language.GetTextValue("GameUI.MostlyCloudy") : ((numClouds > 55) ? Language.GetTextValue("GameUI.Cloudy") : ((numClouds <= 15) ? Language.GetTextValue("GameUI.Clear") : Language.GetTextValue("GameUI.PartlyCloudy")))))))));
					text2 = text5;
					int num9 = (int)(windSpeedCurrent * 50f);
					if (num9 < 0)
					{
						text2 += Language.GetTextValue("GameUI.EastWind", Math.Abs(num9));
					}
					else if (num9 > 0)
					{
						text2 += Language.GetTextValue("GameUI.WestWind", num9);
					}
					flag5 = true;
				}
				else if (player[myPlayer].accCalendar && !flag8 && (!player[myPlayer].hideInfo[7] || playerInventory))
				{
					num = ((bloodMoon && !dayTime) ? 8 : ((!eclipse || !dayTime) ? 7 : 8));
					text3 = Lang.inter[102].Value;
					if (moonPhase == 0)
					{
						text2 = Language.GetTextValue("GameUI.FullMoon");
					}
					else if (moonPhase == 1)
					{
						text2 = Language.GetTextValue("GameUI.WaningGibbous");
					}
					else if (moonPhase == 2)
					{
						text2 = Language.GetTextValue("GameUI.ThirdQuarter");
					}
					else if (moonPhase == 3)
					{
						text2 = Language.GetTextValue("GameUI.WaningCrescent");
					}
					else if (moonPhase == 4)
					{
						text2 = Language.GetTextValue("GameUI.NewMoon");
					}
					else if (moonPhase == 5)
					{
						text2 = Language.GetTextValue("GameUI.WaxingCrescent");
					}
					else if (moonPhase == 6)
					{
						text2 = Language.GetTextValue("GameUI.FirstQuarter");
					}
					else if (moonPhase == 7)
					{
						text2 = Language.GetTextValue("GameUI.WaxingGibbous");
					}
					flag8 = true;
				}
				else if (player[myPlayer].accFishFinder && !flag4 && (!player[myPlayer].hideInfo[2] || playerInventory))
				{
					bool flag13 = false;
					num = 2;
					text3 = Lang.inter[97].Value;
					for (int j = 0; j < 1000; j++)
					{
						if (projectile[j].active && projectile[j].owner == myPlayer && projectile[j].bobber)
						{
							flag13 = true;
							break;
						}
					}
					if (flag13)
					{
						text2 = player[myPlayer].displayedFishingInfo;
					}
					else
					{
						PlayerFishingConditions fishingConditions = player[myPlayer].GetFishingConditions();
						text2 = ((fishingConditions.BaitItemType != 2673) ? (player[myPlayer].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", fishingConditions.FinalFishingLevel)) : Language.GetTextValue("GameUI.FishingWarning"));
					}
					flag4 = true;
				}
				else if (player[myPlayer].accOreFinder && !flag10 && (!player[myPlayer].hideInfo[10] || playerInventory))
				{
					num = 10;
					text3 = Lang.inter[104].Value;
					if (SceneMetrics.bestOre <= 0)
					{
						text2 = Language.GetTextValue("GameUI.NoTreasureNearby");
					}
					else
					{
						int baseOption = 0;
						int num10 = SceneMetrics.bestOre;
						if (SceneMetrics.ClosestOrePosition.HasValue)
						{
							Microsoft.Xna.Framework.Point value = SceneMetrics.ClosestOrePosition.Value;
							Tile tileSafely = Framing.GetTileSafely(value);
							if (tileSafely.active())
							{
								MapHelper.GetTileBaseOption(value.Y, tileSafely, baseOption);
								num10 = tileSafely.type;
								if (TileID.Sets.BasicChest[num10] || TileID.Sets.BasicChestFake[num10])
								{
									baseOption = 0;
								}
							}
						}
						text2 = Language.GetTextValue("GameUI.OreDetected", Lang.GetMapObjectName(MapHelper.TileToLookup(num10, baseOption)));
					}
					flag10 = true;
				}
				else if (player[myPlayer].accCritterGuide && !flag11 && (!player[myPlayer].hideInfo[11] || playerInventory))
				{
					flag11 = true;
					num = 11;
					text3 = Lang.inter[105].Value;
					int num11 = 1300;
					int num12 = 0;
					int num13 = -1;
					if (player[myPlayer].accCritterGuideCounter <= 0)
					{
						player[myPlayer].accCritterGuideCounter = 15;
						for (int k = 0; k < 200; k++)
						{
							if (npc[k].active && npc[k].rarity > num12 && (npc[k].Center - player[myPlayer].Center).Length() < (float)num11)
							{
								num13 = k;
								num12 = npc[k].rarity;
							}
						}
						player[myPlayer].accCritterGuideNumber = (byte)num13;
					}
					else
					{
						player[myPlayer].accCritterGuideCounter--;
						num13 = player[myPlayer].accCritterGuideNumber;
					}
					text2 = ((num13 < 0 || num13 >= 200 || !npc[num13].active || npc[num13].rarity <= 0) ? Language.GetTextValue("GameUI.NoRareCreatures") : npc[num13].GivenOrTypeName);
				}
				else if (player[myPlayer].accThirdEye && !flag6 && (!player[myPlayer].hideInfo[5] || playerInventory))
				{
					flag6 = true;
					num = 5;
					text3 = Lang.inter[100].Value;
					int num14 = 2000;
					if (player[myPlayer].accThirdEyeCounter == 0)
					{
						player[myPlayer].accThirdEyeNumber = 0;
						player[myPlayer].accThirdEyeCounter = 15;
						for (int l = 0; l < 200; l++)
						{
							if (npc[l].active && !npc[l].friendly && npc[l].damage > 0 && npc[l].lifeMax > 5 && !npc[l].dontCountMe && (npc[l].Center - player[myPlayer].Center).Length() < (float)num14)
							{
								player[myPlayer].accThirdEyeNumber++;
							}
						}
					}
					else
					{
						player[myPlayer].accThirdEyeCounter--;
					}
					text2 = ((player[myPlayer].accThirdEyeNumber == 0) ? Language.GetTextValue("GameUI.NoEnemiesNearby") : ((player[myPlayer].accThirdEyeNumber != 1) ? Language.GetTextValue("GameUI.EnemiesNearby", player[myPlayer].accThirdEyeNumber) : Language.GetTextValue("GameUI.OneEnemyNearby")));
				}
				else if (player[myPlayer].accJarOfSouls && !flag7 && (!player[myPlayer].hideInfo[6] || playerInventory))
				{
					flag7 = true;
					num = 6;
					text3 = Lang.inter[101].Value;
					int lastCreatureHit = player[myPlayer].lastCreatureHit;
					text2 = ((lastCreatureHit > 0) ? (Lang.GetNPCNameValue(Item.BannerToNPC(lastCreatureHit)) + ": " + NPC.killCount[lastCreatureHit]) : Language.GetTextValue("GameUI.NoKillCount"));
				}
				else if (player[myPlayer].accDreamCatcher && !flag12 && (!player[myPlayer].hideInfo[12] || playerInventory))
				{
					num = 12;
					text3 = Lang.inter[106].Value;
					player[myPlayer].checkDPSTime();
					int dPS = player[myPlayer].getDPS();
					flag12 = true;
					text2 = ((dPS != 0) ? Language.GetTextValue("GameUI.DPS", player[myPlayer].getDPS()) : Language.GetTextValue("GameUI.NoDPS"));
				}
				else if (player[myPlayer].accStopwatch && !flag9 && (!player[myPlayer].hideInfo[9] || playerInventory))
				{
					num = 9;
					text3 = Lang.inter[103].Value;
					Vector2 vector = player[myPlayer].velocity + player[myPlayer].instantMovementAccumulatedThisFrame;
					if (player[myPlayer].mount.Active && player[myPlayer].mount.IsConsideredASlimeMount && player[myPlayer].velocity.Y != 0f && !player[myPlayer].SlimeDontHyperJump)
					{
						vector.Y += player[myPlayer].velocity.Y;
					}
					int num15 = (int)(1f + vector.Length() * 6f);
					if (num15 > player[myPlayer].speedSlice.Length)
					{
						num15 = player[myPlayer].speedSlice.Length;
					}
					float num16 = 0f;
					for (int num17 = num15 - 1; num17 > 0; num17--)
					{
						player[myPlayer].speedSlice[num17] = player[myPlayer].speedSlice[num17 - 1];
					}
					player[myPlayer].speedSlice[0] = vector.Length();
					for (int m = 0; m < player[myPlayer].speedSlice.Length; m++)
					{
						if (m < num15)
						{
							num16 += player[myPlayer].speedSlice[m];
						}
						else
						{
							player[myPlayer].speedSlice[m] = num16 / (float)num15;
						}
					}
					num16 /= (float)num15;
					int num18 = 42240;
					int num19 = 216000;
					float num20 = num16 * (float)num19 / (float)num18;
					if (!player[myPlayer].merman && !player[myPlayer].ignoreWater)
					{
						if (player[myPlayer].honeyWet)
						{
							num20 /= 4f;
						}
						else if (player[myPlayer].wet)
						{
							num20 /= 2f;
						}
					}
					text2 = Language.GetTextValue("GameUI.Speed", Math.Round(num20));
					flag9 = true;
				}
				else if (player[myPlayer].accCompass > 0 && !flag3 && (!player[myPlayer].hideInfo[3] || playerInventory))
				{
					num = 3;
					text3 = Lang.inter[98].Value;
					int num21 = (int)((player[myPlayer].position.X + (float)(player[myPlayer].width / 2)) * 2f / 16f - (float)maxTilesX);
					text2 = ((num21 > 0) ? Language.GetTextValue("GameUI.CompassEast", num21) : ((num21 >= 0) ? Language.GetTextValue("GameUI.CompassCenter") : Language.GetTextValue("GameUI.CompassWest", -num21)));
					flag3 = true;
				}
				else if (player[myPlayer].accDepthMeter > 0 && !flag2 && (!player[myPlayer].hideInfo[4] || playerInventory))
				{
					num = 4;
					text3 = Lang.inter[99].Value;
					int num22 = (int)((double)((player[myPlayer].position.Y + (float)player[myPlayer].height) * 2f / 16f) - worldSurface * 2.0);
					string text6 = "";
					float num23 = maxTilesX / 4200;
					num23 *= num23;
					int num24 = 1200;
					float num25 = (float)((double)(player[myPlayer].Center.Y / 16f - (65f + 10f * num23)) / (worldSurface / 5.0));
					text6 = ((player[myPlayer].position.Y > (float)((maxTilesY - 204) * 16)) ? Language.GetTextValue("GameUI.LayerUnderworld") : (((double)player[myPlayer].position.Y > rockLayer * 16.0 + (double)(num24 / 2) + 16.0) ? Language.GetTextValue("GameUI.LayerCaverns") : ((num22 > 0) ? Language.GetTextValue("GameUI.LayerUnderground") : ((!(num25 >= 1f)) ? Language.GetTextValue("GameUI.LayerSpace") : Language.GetTextValue("GameUI.LayerSurface")))));
					string text7 = "";
					num22 = Math.Abs(num22);
					text7 = ((num22 != 0) ? Language.GetTextValue("GameUI.Depth", num22) : Language.GetTextValue("GameUI.DepthLevel"));
					text2 = text7 + " " + text6;
					flag2 = true;
				}
				if (!(text2 != ""))
				{
					continue;
				}
				GetInfoAccIconPosition(num3, startX, out var X, out var Y);
				if (num >= 0)
				{
					num3++;
					int num26 = 22;
					if (screenHeight < 650)
					{
						num26 = 20;
					}
					Vector2 vector2 = new Vector2(X, Y + 74 + num26 * i + 52);
					int num27 = num;
					if (num27 == 8)
					{
						num27 = 7;
					}
					Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White;
					bool flag14 = false;
					if (playerInventory)
					{
						vector2 = new Vector2(X, Y);
						if ((float)mouseX >= vector2.X && (float)mouseY >= vector2.Y && (float)mouseX <= vector2.X + (float)TextureAssets.InfoIcon[num].Width() && (float)mouseY <= vector2.Y + (float)TextureAssets.InfoIcon[num].Height() && !PlayerInput.IgnoreMouseInterface)
						{
							flag14 = true;
							player[myPlayer].mouseInterface = true;
							if (mouseLeft && mouseLeftRelease)
							{
								SoundEngine.PlaySound(12);
								mouseLeftRelease = false;
								player[myPlayer].hideInfo[num27] = !player[myPlayer].hideInfo[num27];
							}
							if (!mouseText)
							{
								text = text3;
								mouseText = true;
							}
						}
						if (player[myPlayer].hideInfo[num27])
						{
							color = new Microsoft.Xna.Framework.Color(80, 80, 80, 70);
						}
					}
					else if ((float)mouseX >= vector2.X && (float)mouseY >= vector2.Y && (float)mouseX <= vector2.X + (float)TextureAssets.InfoIcon[num].Width() && (float)mouseY <= vector2.Y + (float)TextureAssets.InfoIcon[num].Height() && !mouseText)
					{
						num2 = i;
						text = text3;
						mouseText = true;
					}
					UILinkPointNavigator.SetPosition(1558 + num3 - 1, vector2 + TextureAssets.InfoIcon[num].Value.Size() * 0.75f);
					spriteBatch.Draw(TextureAssets.InfoIcon[num].Value, vector2, new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.InfoIcon[num].Width(), TextureAssets.InfoIcon[num].Height()), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					if (flag14)
					{
						spriteBatch.Draw(TextureAssets.InfoIcon[13].Value, vector2 - Vector2.One * 2f, null, OurFavoriteColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					X += 20;
				}
				UILinkPointNavigator.Shortcuts.INFOACCCOUNT = num3;
				if (playerInventory)
				{
					continue;
				}
				Vector2 vector3 = new Vector2(1f);
				Vector2 vector4 = FontAssets.MouseText.Value.MeasureString(text2);
				if (vector4.X > num4)
				{
					vector3.X = num4 / vector4.X;
				}
				if (vector3.X < 0.58f)
				{
					vector3.Y = 1f - vector3.X / 3f;
				}
				for (int n = 0; n < 5; n++)
				{
					int num28 = 0;
					int num29 = 0;
					Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
					if (n == 0)
					{
						num28 = -2;
					}
					if (n == 1)
					{
						num28 = 2;
					}
					if (n == 2)
					{
						num29 = -2;
					}
					if (n == 3)
					{
						num29 = 2;
					}
					if (n == 4)
					{
						color2 = new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor);
					}
					if (i > num2 && i < num2 + 2)
					{
						color2 = new Microsoft.Xna.Framework.Color((int)color2.R / 3, (int)color2.G / 3, (int)color2.B / 3, (int)color2.A / 3);
					}
					int num30 = 22;
					if (screenHeight < 650)
					{
						num30 = 20;
					}
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text2, new Vector2(X + num28, Y + 74 + num30 * i + num29 + 48), color2, 0f, default(Vector2), vector3, SpriteEffects.None, 0f);
				}
			}
			if (!string.IsNullOrEmpty(text))
			{
				if (playerInventory)
				{
					player[myPlayer].mouseInterface = true;
				}
				MouseText(text, 0, 0);
			}
		}

		private static void GetInfoAccIconPosition(int drawnCount, int StartX, out int X, out int Y)
		{
			if (!playerInventory)
			{
				X = screenWidth - 280;
				Y = -32;
				if (mapStyle == 1 && mapEnabled)
				{
					Y += 261;
				}
			}
			else if (ShouldDrawInfoIconsHorizontally)
			{
				X = screenWidth - 280 + 20 * drawnCount - 10;
				Y = 94;
				if (mapStyle == 1 && mapEnabled)
				{
					Y += 261;
				}
			}
			else
			{
				int num = (int)(52f * inventoryScale);
				X = 697 - num * 4 + screenWidth - 800 + 20 * (drawnCount % 2);
				Y = 114 + mH + num * 7 + num / 2 + 20 * (drawnCount / 2) + 8 * (drawnCount / 4) - 20;
				if (EquipPage == 2)
				{
					X += num + num / 2;
					Y -= num;
				}
			}
			X += StartX;
		}

		private void DrawBuilderAccToggles(Vector2 start)
		{
			if (!playerInventory)
			{
				return;
			}
			string.IsNullOrEmpty(npcChatText);
			if (false || Main.player[myPlayer].sign >= 0)
			{
				return;
			}
			int num = 0;
			Player player = Main.player[myPlayer];
			int[] builderAccStatus = Main.player[myPlayer].builderAccStatus;
			GetBuilderAccsCountToShow(player, out var blockReplaceIcons, out var torchGodIcons, out var totalDrawnIcons);
			start.Y += 24 * torchGodIcons;
			bool flag = totalDrawnIcons >= 10;
			int num2 = 10;
			for (int i = 0; i < num2; i++)
			{
				int num3 = i - 2;
				switch (i)
				{
				case 0:
					num3 = 8;
					break;
				case 1:
					num3 = 9;
					break;
				}
				Texture2D value = TextureAssets.BuilderAcc.Value;
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 16, 14, 14);
				Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White;
				Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(127, 127, 127);
				Vector2 vector = start + new Vector2(0f, num * 24);
				if (flag)
				{
					vector.Y -= 24f;
				}
				bool flag2 = Utils.CenteredRectangle(vector, new Vector2(14f)).Contains(MouseScreen.ToPoint()) && !PlayerInput.IgnoreMouseInterface;
				bool flag3 = flag2 && mouseLeft && mouseLeftRelease;
				switch (num3)
				{
				case 8:
					if (!player.InfoAccMechShowWires)
					{
						continue;
					}
					rectangle.X = num3 * 16;
					color = ((builderAccStatus[num3] == 0) ? color : color2);
					if (flag2)
					{
						player.mouseInterface = true;
						MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.WireModeForced") : Language.GetTextValue("GameUI.WireModeNormal"), 0, 0);
						mouseText = true;
					}
					if (flag3)
					{
						builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
						SoundEngine.PlaySound(12);
						mouseLeftRelease = false;
					}
					break;
				case 0:
					if (!player.rulerLine)
					{
						continue;
					}
					rectangle.X = num3 * 16;
					color = ((builderAccStatus[num3] == 0) ? color : color2);
					if (flag2)
					{
						player.mouseInterface = true;
						MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.RulerOn") : Language.GetTextValue("GameUI.RulerOff"), 0, 0);
						mouseText = true;
					}
					if (flag3)
					{
						builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
						SoundEngine.PlaySound(12);
						mouseLeftRelease = false;
					}
					break;
				case 1:
					if (!player.rulerGrid)
					{
						continue;
					}
					rectangle.X = num3 * 16;
					color = ((builderAccStatus[num3] == 0) ? color : color2);
					if (flag2)
					{
						player.mouseInterface = true;
						MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.MechanicalRulerOn") : Language.GetTextValue("GameUI.MechanicalRulerOff"), 0, 0);
						mouseText = true;
					}
					if (flag3)
					{
						builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
						SoundEngine.PlaySound(12);
						mouseLeftRelease = false;
					}
					break;
				case 3:
					if (!player.autoPaint)
					{
						continue;
					}
					rectangle.X = num3 * 16;
					color = ((builderAccStatus[num3] == 0) ? color : color2);
					if (flag2)
					{
						player.mouseInterface = true;
						MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.PaintSprayerOn") : Language.GetTextValue("GameUI.PaintSprayerOff"), 0, 0);
						mouseText = true;
					}
					if (flag3)
					{
						builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
						SoundEngine.PlaySound(12);
						mouseLeftRelease = false;
					}
					break;
				case 2:
					if (!player.autoActuator)
					{
						continue;
					}
					rectangle.X = num3 * 16;
					color = ((builderAccStatus[num3] == 0) ? color : color2);
					if (flag2)
					{
						player.mouseInterface = true;
						MouseText((builderAccStatus[num3] == 0) ? Language.GetTextValue("GameUI.ActuationDeviceOn") : Language.GetTextValue("GameUI.ActuationDeviceOff"), 0, 0);
						mouseText = true;
					}
					if (flag3)
					{
						builderAccStatus[num3] = ((builderAccStatus[num3] == 0) ? 1 : 0);
						SoundEngine.PlaySound(12);
						mouseLeftRelease = false;
					}
					break;
				case 4:
				case 5:
				case 6:
				case 7:
				case 9:
					if (!player.InfoAccMechShowWires)
					{
						continue;
					}
					rectangle.X = num3 * 16;
					color = ((builderAccStatus[num3] == 0) ? color : ((builderAccStatus[num3] == 1) ? color2 : ((builderAccStatus[num3] == 2) ? color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.66f, 0.66f, 0.66f, 0.66f)) : color2.MultiplyRGBA(new Microsoft.Xna.Framework.Color(0.33f, 0.33f, 0.33f, 0.33f)))));
					if (flag2)
					{
						player.mouseInterface = true;
						string arg = "";
						switch (num3)
						{
						case 4:
							arg = Language.GetTextValue("Game.RedWires");
							break;
						case 5:
							arg = Language.GetTextValue("Game.BlueWires");
							break;
						case 6:
							arg = Language.GetTextValue("Game.GreenWires");
							break;
						case 7:
							arg = Language.GetTextValue("Game.YellowWires");
							break;
						case 9:
							arg = Language.GetTextValue("Game.Actuators");
							break;
						}
						string arg2 = "";
						switch (builderAccStatus[num3])
						{
						case 0:
							arg2 = Language.GetTextValue("GameUI.Bright");
							break;
						case 1:
							arg2 = Language.GetTextValue("GameUI.Normal");
							break;
						case 2:
							arg2 = Language.GetTextValue("GameUI.Faded");
							break;
						case 3:
							arg2 = Language.GetTextValue("GameUI.Hidden");
							break;
						}
						MouseText($"{arg}: {arg2}", 0, 0);
						mouseText = true;
					}
					if (flag3)
					{
						builderAccStatus[num3]++;
						if (builderAccStatus[num3] >= 3)
						{
							builderAccStatus[num3] = 0;
						}
						SoundEngine.PlaySound(12);
						mouseLeftRelease = false;
					}
					break;
				case 11:
					continue;
				}
				spriteBatch.Draw(value, vector, rectangle, color, 0f, rectangle.Size() / 2f, 1f, SpriteEffects.None, 0f);
				if (flag2)
				{
					spriteBatch.Draw(TextureAssets.InfoIcon[13].Value, vector, null, OurFavoriteColor, 0f, TextureAssets.InfoIcon[13].Value.Size() / 2f, 1f, SpriteEffects.None, 0f);
				}
				UILinkPointNavigator.SetPosition(6000 + num + blockReplaceIcons + torchGodIcons, vector + rectangle.Size() * 0.15f);
				num++;
			}
			DrawBlockReplacementIcon(0, 0, flag, 0);
			num++;
			if (player.unlockedBiomeTorches)
			{
				DrawTorchBiomeSwapIcon(0, 0, flag, 0);
				num++;
			}
			UILinkPointNavigator.Shortcuts.BUILDERACCCOUNT = num;
		}

		private static void GetBuilderAccsCountToShow(Player plr, out int blockReplaceIcons, out int torchGodIcons, out int totalDrawnIcons)
		{
			blockReplaceIcons = 1;
			torchGodIcons = (plr.unlockedBiomeTorches ? 1 : 0);
			totalDrawnIcons = plr.InfoAccMechShowWires.ToInt() * 6 + plr.rulerLine.ToInt() + plr.rulerGrid.ToInt() + plr.autoActuator.ToInt() + plr.autoPaint.ToInt() + blockReplaceIcons + torchGodIcons;
		}

		public static void CheckInvasionProgressDisplay()
		{
			if (invasionProgressMode != 2)
			{
				invasionProgressNearInvasion = false;
				return;
			}
			bool flag = false;
			Player player = Main.player[myPlayer];
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)screenPosition.X, (int)screenPosition.Y, screenWidth, screenHeight);
			int num = 5000;
			int num2 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (!npc[i].active)
				{
					continue;
				}
				num2 = 0;
				switch (npc[i].type)
				{
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
					num2 = 1;
					break;
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 325:
				case 326:
				case 327:
				case 329:
				case 330:
					num2 = 2;
					break;
				case 26:
				case 27:
				case 28:
				case 29:
				case 111:
					num2 = 4;
					break;
				case 143:
				case 144:
				case 145:
					num2 = 5;
					break;
				case 212:
				case 213:
				case 214:
				case 215:
				case 216:
				case 491:
					num2 = 6;
					break;
				case 381:
				case 382:
				case 383:
				case 385:
				case 386:
				case 388:
				case 389:
				case 390:
				case 391:
				case 395:
					num2 = 7;
					break;
				case 548:
				case 549:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 559:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
					num2 = 3;
					break;
				}
				if (num2 != 0 && (num2 != 1 || (!((double)player.position.Y > worldSurface * 16.0) && !dayTime && snowMoon)) && (num2 != 2 || (!((double)player.position.Y > worldSurface * 16.0) && !dayTime && pumpkinMoon)) && (num2 != 3 || DD2Event.Ongoing) && (num2 <= 3 || (!((double)player.position.Y > worldSurface * 16.0) && invasionType == num2 - 3)))
				{
					Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)(npc[i].position.X + (float)(npc[i].width / 2)) - num, (int)(npc[i].position.Y + (float)(npc[i].height / 2)) - num, num * 2, num * 2);
					if (rectangle.Intersects(value))
					{
						flag = true;
						break;
					}
				}
			}
			invasionProgressNearInvasion = flag;
			if (!flag || invasionProgressIcon != 0)
			{
				return;
			}
			int waveNumber = NPC.waveNumber;
			if (snowMoon)
			{
				int progressMax = (new int[21]
				{
					0,
					25,
					15,
					10,
					30,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					850,
					1025,
					1325,
					1550,
					2000,
					0
				})[waveNumber];
				ReportInvasionProgress((int)NPC.waveKills, progressMax, 1, waveNumber);
			}
			else if (pumpkinMoon)
			{
				int progressMax2 = (new int[16]
				{
					0,
					25,
					40,
					50,
					80,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					0
				})[waveNumber];
				ReportInvasionProgress((int)NPC.waveKills, progressMax2, 2, waveNumber);
			}
			else if (DD2Event.Ongoing)
			{
				DD2Event.ReportEventProgress();
			}
			else
			{
				int progressMax3 = 1;
				if (invasionType != 0 && invasionSizeStart != 0)
				{
					progressMax3 = invasionSizeStart;
				}
				ReportInvasionProgress(invasionSizeStart - invasionSize, progressMax3, num2, 0);
			}
		}

		public static void SyncAnInvasion(int toWho)
		{
			int waveNumber = NPC.waveNumber;
			if (snowMoon)
			{
				int num = (new int[21]
				{
					0,
					25,
					15,
					10,
					30,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					850,
					1025,
					1325,
					1550,
					2000,
					0
				})[waveNumber];
				NetMessage.SendData(78, toWho, -1, null, (int)NPC.waveKills, num, 1f, waveNumber);
			}
			else if (pumpkinMoon)
			{
				int num2 = (new int[16]
				{
					0,
					25,
					40,
					50,
					80,
					100,
					160,
					180,
					200,
					250,
					300,
					375,
					450,
					525,
					675,
					0
				})[waveNumber];
				NetMessage.SendData(78, toWho, -1, null, (int)NPC.waveKills, num2, 2f, waveNumber);
			}
			else if (DD2Event.Ongoing)
			{
				DD2Event.SyncInvasionProgress(toWho);
			}
			else if (invasionType > 0)
			{
				int num3 = 1;
				if (invasionType != 0 && invasionSizeStart != 0)
				{
					num3 = invasionSizeStart;
				}
				NetMessage.SendData(78, toWho, -1, null, invasionSizeStart - invasionSize, num3, invasionType + 3);
			}
		}

		public static void ReportInvasionProgress(int progress, int progressMax, int icon, int progressWave)
		{
			invasionProgress = progress;
			invasionProgressMax = progressMax;
			invasionProgressIcon = icon;
			invasionProgressWave = progressWave;
			invasionProgressDisplayLeft = 160;
		}

		public static void DrawInvasionProgress()
		{
			if (invasionProgress == -1)
			{
				return;
			}
			if (invasionProgressMode == 2 && invasionProgressNearInvasion && invasionProgressDisplayLeft < 160)
			{
				invasionProgressDisplayLeft = 160;
			}
			if (!gamePaused && invasionProgressDisplayLeft > 0)
			{
				invasionProgressDisplayLeft--;
			}
			if (invasionProgressDisplayLeft > 0)
			{
				invasionProgressAlpha += 0.05f;
			}
			else
			{
				invasionProgressAlpha -= 0.05f;
			}
			if (invasionProgressMode == 0)
			{
				invasionProgressDisplayLeft = 0;
				invasionProgressAlpha = 0f;
			}
			if (invasionProgressAlpha < 0f)
			{
				invasionProgressAlpha = 0f;
			}
			if (invasionProgressAlpha > 1f)
			{
				invasionProgressAlpha = 1f;
			}
			if (invasionProgressAlpha <= 0f)
			{
				return;
			}
			float num = 0.5f + invasionProgressAlpha * 0.5f;
			Texture2D value = TextureAssets.Extra[9].Value;
			string text = "";
			Microsoft.Xna.Framework.Color c = Microsoft.Xna.Framework.Color.White;
			if (invasionProgressIcon == 1)
			{
				value = TextureAssets.Extra[8].Value;
				text = Lang.inter[83].Value;
				c = new Microsoft.Xna.Framework.Color(64, 109, 164) * 0.5f;
			}
			else if (invasionProgressIcon == 2)
			{
				value = TextureAssets.Extra[12].Value;
				text = Lang.inter[84].Value;
				c = new Microsoft.Xna.Framework.Color(112, 86, 114) * 0.5f;
			}
			else if (invasionProgressIcon == 3)
			{
				value = TextureAssets.Extra[79].Value;
				text = Language.GetTextValue("DungeonDefenders2.InvasionProgressTitle");
				c = new Microsoft.Xna.Framework.Color(88, 0, 160) * 0.5f;
			}
			else if (invasionProgressIcon == 7)
			{
				value = TextureAssets.Extra[10].Value;
				text = Lang.inter[85].Value;
				c = new Microsoft.Xna.Framework.Color(165, 160, 155) * 0.5f;
			}
			else if (invasionProgressIcon == 6)
			{
				value = TextureAssets.Extra[11].Value;
				text = Lang.inter[86].Value;
				c = new Microsoft.Xna.Framework.Color(148, 122, 72) * 0.5f;
			}
			else if (invasionProgressIcon == 5)
			{
				value = TextureAssets.Extra[7].Value;
				text = Lang.inter[87].Value;
				c = new Microsoft.Xna.Framework.Color(173, 135, 140) * 0.5f;
			}
			else if (invasionProgressIcon == 4)
			{
				value = TextureAssets.Extra[9].Value;
				text = Lang.inter[88].Value;
				c = new Microsoft.Xna.Framework.Color(94, 72, 131) * 0.5f;
			}
			if (invasionProgressWave > 0)
			{
				int num2 = (int)(200f * num);
				int num3 = (int)(45f * num);
				Vector2 vector = new Vector2(screenWidth - 120, screenHeight - 40);
				Utils.DrawInvBG(R: new Microsoft.Xna.Framework.Rectangle((int)vector.X - num2 / 2, (int)vector.Y - num3 / 2, num2, num3), sb: spriteBatch, c: new Microsoft.Xna.Framework.Color(63, 65, 151, 255) * 0.785f);
				string text2 = "";
				text2 = Language.GetTextValue(arg1: (invasionProgressMax != 0) ? ((int)((float)invasionProgress * 100f / (float)invasionProgressMax) + "%") : Language.GetTextValue("Game.InvasionPoints", invasionProgress), key: "Game.WaveMessage", arg0: invasionProgressWave);
				Texture2D value2 = TextureAssets.ColorBar.Value;
				//TextureAssets.ColorBlip.Value;
				float num4 = MathHelper.Clamp((float)invasionProgress / (float)invasionProgressMax, 0f, 1f);
				if (invasionProgressMax == 0)
				{
					num4 = 1f;
				}
				float num5 = 169f * num;
				float num6 = 8f * num;
				Vector2 vector2 = vector + Vector2.UnitY * num6 + Vector2.UnitX * 1f;
				Utils.DrawBorderString(spriteBatch, text2, vector2, Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, num, 0.5f, 1f);
				spriteBatch.Draw(value2, vector, null, Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, 0f, new Vector2(value2.Width / 2, 0f), num, SpriteEffects.None, 0f);
				vector2 += Vector2.UnitX * (num4 - 0.5f) * num5;
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector2, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), new Microsoft.Xna.Framework.Color(255, 241, 51) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num5 * num4, num6), SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector2, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), new Microsoft.Xna.Framework.Color(255, 165, 0, 127) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num6), SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector2, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), Microsoft.Xna.Framework.Color.Black * invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num5 * (1f - num4), num6), SpriteEffects.None, 0f);
			}
			else
			{
				int num7 = (int)(200f * num);
				int num8 = (int)(45f * num);
				Vector2 vector3 = new Vector2(screenWidth - 120, screenHeight - 40);
				Utils.DrawInvBG(R: new Microsoft.Xna.Framework.Rectangle((int)vector3.X - num7 / 2, (int)vector3.Y - num8 / 2, num7, num8), sb: spriteBatch, c: new Microsoft.Xna.Framework.Color(63, 65, 151, 255) * 0.785f);
				string text3 = "";
				text3 = ((invasionProgressMax != 0) ? ((int)((float)invasionProgress * 100f / (float)invasionProgressMax) + "%") : invasionProgress.ToString());
				text3 = Language.GetTextValue("Game.WaveCleared", text3);
				Texture2D value3 = TextureAssets.ColorBar.Value;
				//TextureAssets.ColorBlip.Value;
				if (invasionProgressMax != 0)
				{
					spriteBatch.Draw(value3, vector3, null, Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, 0f, new Vector2(value3.Width / 2, 0f), num, SpriteEffects.None, 0f);
					float num9 = MathHelper.Clamp((float)invasionProgress / (float)invasionProgressMax, 0f, 1f);
					Vector2 vector4 = FontAssets.MouseText.Value.MeasureString(text3);
					float num10 = num;
					if (vector4.Y > 22f)
					{
						num10 *= 22f / vector4.Y;
					}
					float num11 = 169f * num;
					float num12 = 8f * num;
					Vector2 vector5 = vector3 + Vector2.UnitY * num12 + Vector2.UnitX * 1f;
					Utils.DrawBorderString(spriteBatch, text3, vector5 + new Vector2(0f, -4f), Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, num10, 0.5f, 1f);
					vector5 += Vector2.UnitX * (num9 - 0.5f) * num11;
					spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector5, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), new Microsoft.Xna.Framework.Color(255, 241, 51) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(num11 * num9, num12), SpriteEffects.None, 0f);
					spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector5, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), new Microsoft.Xna.Framework.Color(255, 165, 0, 127) * invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, num12), SpriteEffects.None, 0f);
					spriteBatch.Draw(TextureAssets.MagicPixel.Value, vector5, new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), Microsoft.Xna.Framework.Color.Black * invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(num11 * (1f - num9), num12), SpriteEffects.None, 0f);
				}
			}
			Vector2 value4 = FontAssets.MouseText.Value.MeasureString(text);
			float num13 = 120f;
			if (value4.X > 200f)
			{
				num13 += value4.X - 200f;
			}
			Microsoft.Xna.Framework.Rectangle r3 = Utils.CenteredRectangle(new Vector2((float)screenWidth - num13, screenHeight - 80), (value4 + new Vector2(value.Width + 12, 6f)) * num);
			Utils.DrawInvBG(spriteBatch, r3, c);
			spriteBatch.Draw(value, r3.Left() + Vector2.UnitX * num * 8f, null, Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, 0f, new Vector2(0f, value.Height / 2), num * 0.8f, SpriteEffects.None, 0f);
			Utils.DrawBorderString(spriteBatch, text, r3.Right() + Vector2.UnitX * num * -22f, Microsoft.Xna.Framework.Color.White * invasionProgressAlpha, num * 0.9f, 1f, 0.4f);
		}

		protected void QuitGame()
		{
			SaveSettings();
			SocialAPI.Shutdown();
			Exit();
		}

		protected Microsoft.Xna.Framework.Color randColor()
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			while (num + num3 + num2 <= 150)
			{
				num = rand.Next(256);
				num2 = rand.Next(256);
				num3 = rand.Next(256);
			}
			return new Microsoft.Xna.Framework.Color(num, num2, num3, 255);
		}

		public static Microsoft.Xna.Framework.Color hslToRgb(Vector3 hslVector)
		{
			return hslToRgb(hslVector.X, hslVector.Y, hslVector.Z);
		}

		public static Microsoft.Xna.Framework.Color hslToRgb(float Hue, float Saturation, float Luminosity)
		{
			byte r;
			byte g;
			byte b;
			if (Saturation == 0f)
			{
				r = (byte)Math.Round((double)Luminosity * 255.0);
				g = (byte)Math.Round((double)Luminosity * 255.0);
				b = (byte)Math.Round((double)Luminosity * 255.0);
			}
			else
			{
				double num = Hue;
				double num2 = ((!((double)Luminosity < 0.5)) ? ((double)(Luminosity + Saturation - Luminosity * Saturation)) : ((double)Luminosity * (1.0 + (double)Saturation)));
				double t = 2.0 * (double)Luminosity - num2;
				double c = num + 0.33333333333333331;
				double c2 = num;
				double c3 = num - 0.33333333333333331;
				c = hue2rgb(c, t, num2);
				c2 = hue2rgb(c2, t, num2);
				double num3 = hue2rgb(c3, t, num2);
				r = (byte)Math.Round(c * 255.0);
				g = (byte)Math.Round(c2 * 255.0);
				b = (byte)Math.Round(num3 * 255.0);
			}
			return new Microsoft.Xna.Framework.Color(r, g, b);
		}

		public static double hue2rgb(double c, double t1, double t2)
		{
			if (c < 0.0)
			{
				c += 1.0;
			}
			if (c > 1.0)
			{
				c -= 1.0;
			}
			if (6.0 * c < 1.0)
			{
				return t1 + (t2 - t1) * 6.0 * c;
			}
			if (2.0 * c < 1.0)
			{
				return t2;
			}
			if (3.0 * c < 2.0)
			{
				return t1 + (t2 - t1) * (2.0 / 3.0 - c) * 6.0;
			}
			return t1;
		}

		public static Vector3 rgbToHsl(Microsoft.Xna.Framework.Color newColor)
		{
			float num = (int)newColor.R;
			float num2 = (int)newColor.G;
			float num3 = (int)newColor.B;
			num /= 255f;
			num2 /= 255f;
			num3 /= 255f;
			float val = Math.Max(num, num2);
			val = Math.Max(val, num3);
			float val2 = Math.Min(num, num2);
			val2 = Math.Min(val2, num3);
			float num4 = 0f;
			float num5 = (val + val2) / 2f;
			float y;
			if (val == val2)
			{
				num4 = (y = 0f);
			}
			else
			{
				float num6 = val - val2;
				y = (((double)num5 > 0.5) ? (num6 / (2f - val - val2)) : (num6 / (val + val2)));
				if (val == num)
				{
					num4 = (num2 - num3) / num6 + (float)((num2 < num3) ? 6 : 0);
				}
				if (val == num2)
				{
					num4 = (num3 - num) / num6 + 2f;
				}
				if (val == num3)
				{
					num4 = (num - num2) / num6 + 4f;
				}
				num4 /= 6f;
			}
			return new Vector3(num4, y, num5);
		}

		public static void DrawCursor(Vector2 bonus, bool smart = false)
		{
			if (gameMenu && alreadyGrabbingSunOrMoon)
			{
				return;
			}
			if (player[myPlayer].dead || player[myPlayer].mouseInterface)
			{
				ClearSmartInteract();
				TileInteractionLX = (TileInteractionHX = (TileInteractionLY = (TileInteractionHY = -1)));
			}
			bool flag = UILinkPointNavigator.Available && !PlayerInput.InBuildingMode;
			Microsoft.Xna.Framework.Color color = cursorColor;
			if (PlayerInput.UsingGamepad)
			{
				if ((player[myPlayer].dead && !player[myPlayer].ghost && !gameMenu) || PlayerInput.InvisibleGamepadInMenus)
				{
					return;
				}
				Vector2 t = new Vector2(mouseX, mouseY);
				Vector2 t2 = Vector2.Zero;
				bool flag2 = SmartCursorEnabled;
				if (flag2)
				{
					PlayerInput.smartSelectPointer.UpdateCenter(ScreenSize.ToVector2() / 2f);
					t2 = PlayerInput.smartSelectPointer.GetPointerPosition();
					if (Vector2.Distance(t2, t) < 1f)
					{
						flag2 = false;
					}
					else
					{
						Utils.Swap(t, t2);
					}
				}
				float scale = 1f;
				if (flag2)
				{
					scale = 0.3f;
					color = Microsoft.Xna.Framework.Color.White * GamepadCursorAlpha;
					int num = 17;
					int frameX = 0;
					spriteBatch.Draw(TextureAssets.Cursors[num].Value, t2 + bonus, TextureAssets.Cursors[num].Frame(1, 1, frameX), color, (float)Math.PI / 2f * GlobalTimeWrappedHourly, TextureAssets.Cursors[num].Frame(1, 1, frameX).Size() / 2f, cursorScale, SpriteEffects.None, 0f);
				}
				if (smart && !flag)
				{
					color = Microsoft.Xna.Framework.Color.White * GamepadCursorAlpha * scale;
					int num2 = 13;
					int frameX2 = 0;
					spriteBatch.Draw(TextureAssets.Cursors[num2].Value, t + bonus, TextureAssets.Cursors[num2].Frame(2, 1, frameX2), color, 0f, TextureAssets.Cursors[num2].Frame(2, 1, frameX2).Size() / 2f, cursorScale, SpriteEffects.None, 0f);
				}
				else
				{
					color = Microsoft.Xna.Framework.Color.White;
					int num3 = 15;
					spriteBatch.Draw(TextureAssets.Cursors[num3].Value, new Vector2(mouseX, mouseY) + bonus, null, color, 0f, TextureAssets.Cursors[num3].Value.Size() / 2f, cursorScale, SpriteEffects.None, 0f);
				}
			}
			else
			{
				int num4 = smart.ToInt();
				spriteBatch.Draw(TextureAssets.Cursors[num4].Value, new Vector2(mouseX, mouseY) + bonus + Vector2.One, null, new Microsoft.Xna.Framework.Color((int)((float)(int)color.R * 0.2f), (int)((float)(int)color.G * 0.2f), (int)((float)(int)color.B * 0.2f), (int)((float)(int)color.A * 0.5f)), 0f, default(Vector2), cursorScale * 1.1f, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.Cursors[num4].Value, new Vector2(mouseX, mouseY) + bonus, null, color, 0f, default(Vector2), cursorScale, SpriteEffects.None, 0f);
			}
		}

		public static void ClearSmartInteract()
		{
			SmartInteractShowingGenuine = false;
			SmartInteractShowingFake = false;
			SmartInteractNPC = -1;
			SmartInteractProj = -1;
			SmartInteractTileCoords.Clear();
			SmartInteractTileCoordsSelected.Clear();
		}

		public static Vector2 DrawThickCursor(bool smart = false)
		{
			if (ThickMouse)
			{
				if (gameMenu && alreadyGrabbingSunOrMoon)
				{
					return Vector2.Zero;
				}
				if (PlayerInput.UsingGamepad && PlayerInput.InvisibleGamepadInMenus)
				{
					return Vector2.Zero;
				}
				if (PlayerInput.UsingGamepad && player[myPlayer].dead && !player[myPlayer].ghost && !gameMenu)
				{
					return Vector2.Zero;
				}
				bool flag = UILinkPointNavigator.Available && !PlayerInput.InBuildingMode;
				Microsoft.Xna.Framework.Color mouseBorderColor = MouseBorderColor;
				int num = 11;
				num += smart.ToInt();
				for (int i = 0; i < 4; i++)
				{
					Vector2 value = Vector2.Zero;
					switch (i)
					{
					case 0:
						value = new Vector2(0f, 1f);
						break;
					case 1:
						value = new Vector2(1f, 0f);
						break;
					case 2:
						value = new Vector2(0f, -1f);
						break;
					case 3:
						value = new Vector2(-1f, 0f);
						break;
					}
					value *= 1f;
					value += Vector2.One * 2f;
					Vector2 origin = new Vector2(2f);
					Microsoft.Xna.Framework.Rectangle? sourceRectangle = null;
					float scale = cursorScale * 1.1f;
					if (PlayerInput.UsingGamepad)
					{
						if (smart && !flag)
						{
							num = 13;
							int frameX = 0;
							value = Vector2.One;
							sourceRectangle = TextureAssets.Cursors[num].Frame(2, 1, frameX);
							origin = TextureAssets.Cursors[num].Frame(2, 1, frameX).Size() / 2f;
							mouseBorderColor *= GamepadCursorAlpha;
						}
						else
						{
							num = 15;
							value = Vector2.One;
							origin = TextureAssets.Cursors[num].Value.Size() / 2f;
						}
					}
					spriteBatch.Draw(TextureAssets.Cursors[num].Value, new Vector2(mouseX, mouseY) + value, sourceRectangle, mouseBorderColor, 0f, origin, scale, SpriteEffects.None, 0f);
				}
				return new Vector2(2f);
			}
			return Vector2.Zero;
		}

		private void OnCharacterNamed(string text)
		{
			PendingPlayer.name = text.Trim();
			PlayerFileData.CreateAndSave(PendingPlayer);
			LoadPlayers();
			menuMode = 1;
		}

		private void OnSeedSelected(string text)
		{
			text = text.Trim();
			if (text.Length == 0)
			{
				ActiveWorldFileData.SetSeedToRandom();
			}
			else
			{
				ActiveWorldFileData.SetSeed(text);
			}
			menuMode = 10;
			WorldGen.CreateNewWorld();
		}

		private void OnWorldNamed(string text)
		{
			menuMode = 10;
			worldName = text.Trim();
			ActiveWorldFileData = WorldFile.CreateMetadata(worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, GameMode);
			menuMode = 5000;
		}

		private static Action CreateGoToMenuEvent(int menu)
		{
			return delegate
			{
				menuMode = menu;
				UILinkPointNavigator.Shortcuts.FANCYUI_SPECIAL_INSTRUCTIONS = 0;
			};
		}

		public static void GoToWorldSelect()
		{
			MenuUI.SetState(_worldSelectMenu);
			menuMode = 888;
		}

		public static void StartClientGameplay()
		{
			menuMode = 10;
			Netplay.StartTcpClient();
		}

		public static void ReleaseHostAndPlayProcess()
		{
			if (tServer != null)
			{
				tServer = null;
			}
		}

		protected void DrawMenu(GameTime gameTime)
		{
			if (!IsEngineLoaded)
			{
				IsEngineLoaded = true;
				if (Main.OnEngineLoad != null)
				{
					Main.OnEngineLoad();
				}
			}
			GamepadMainMenuHandler.Update();
			GamepadMainMenuHandler.MenuItemPositions.Clear();
			int num = menuMode;
			if (menuMode <= 1 && slimeRain)
			{
				StopSlimeRain();
			}
			render = false;
			SceneMetrics.Reset();
			drawingPlayerChat = false;
			chatMonitor.Clear();
			screenLastPosition = screenPosition;
			screenPosition.Y = (float)(worldSurface * 16.0 - (double)screenHeight);
			MenuXMovement = 4f;
			if (alreadyGrabbingSunOrMoon)
			{
				playOldTile = true;
			}
			screenPosition.X += MenuXMovement;
			if (screenPosition.X > 2.14748352E+09f)
			{
				screenPosition.X = 0f;
			}
			if (screenPosition.X < -2.14748352E+09f)
			{
				screenPosition.X = 0f;
			}
			Star.UpdateStars();
			Cloud.UpdateClouds();
			DrawFPS();
			background = 0;
			byte b = (byte)((255 + tileColor.R * 2) / 3);
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 255);
			if (WorldGen.drunkWorldGen)
			{
				logoRotation += logoRotationSpeed * 4E-06f;
				if (logoRotationSpeed > 0f)
				{
					logoRotationSpeed += 1500f;
				}
				else
				{
					logoRotationSpeed -= 1500f;
				}
				logoScale -= 0.05f;
				if (logoScale < 0f)
				{
					logoScale = 0f;
				}
			}
			else
			{
				logoRotation += logoRotationSpeed * 4E-06f;
				if ((double)logoRotation > 0.08)
				{
					logoRotationDirection = -1f;
				}
				else if ((double)logoRotation < -0.08)
				{
					logoRotationDirection = 1f;
				}
				if (logoRotationSpeed < 20f && logoRotationDirection == 1f)
				{
					logoRotationSpeed += 1f;
				}
				else if (logoRotationSpeed > -20f && logoRotationDirection == -1f)
				{
					logoRotationSpeed -= 1f;
				}
				logoScale += logoScaleSpeed * 9E-06f;
				if ((double)logoScale > 1.35)
				{
					logoScaleDirection = -1f;
				}
				else if (logoScale < 1f)
				{
					logoScaleDirection = 1f;
				}
				if (logoScaleSpeed < 50f && logoScaleDirection == 1f)
				{
					logoScaleSpeed += 1f;
				}
				else if (logoScaleSpeed > -50f && logoScaleDirection == -1f)
				{
					logoScaleSpeed -= 1f;
				}
			}
			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color.R * ((float)LogoA / 255f)), (byte)((float)(int)color.G * ((float)LogoA / 255f)), (byte)((float)(int)color.B * ((float)LogoA / 255f)), (byte)((float)(int)color.A * ((float)LogoA / 255f)));
			Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((byte)((float)(int)color.R * ((float)LogoB / 255f)), (byte)((float)(int)color.G * ((float)LogoB / 255f)), (byte)((float)(int)color.B * ((float)LogoB / 255f)), (byte)((float)(int)color.A * ((float)LogoB / 255f)));
			if (playOldTile)
			{
				spriteBatch.Draw(TextureAssets.Logo3.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color2, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.Logo4.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color3, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
			}
			else
			{
				spriteBatch.Draw(TextureAssets.Logo.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color2, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.Logo2.Value, new Vector2(screenWidth / 2, 100f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Logo.Width(), TextureAssets.Logo.Height()), color3, logoRotation, new Vector2(TextureAssets.Logo.Width() / 2, TextureAssets.Logo.Height() / 2), logoScale, SpriteEffects.None, 0f);
			}
			if (dayTime)
			{
				LogoA += 2;
				if (LogoA > 255)
				{
					LogoA = 255;
				}
				LogoB--;
				if (LogoB < 0)
				{
					LogoB = 0;
				}
			}
			else
			{
				LogoB += 2;
				if (LogoB > 255)
				{
					LogoB = 255;
				}
				LogoA--;
				if (LogoA < 0)
				{
					LogoA = 0;
					LogoT = true;
				}
			}
			int num2 = 250;
			int num3 = screenWidth / 2;
			int num4 = 80;
			int num5 = 0;
			int num6 = menuMode;
			int num7 = 0;
			int num8 = 0;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			int num9 = 0;
			bool[] array = new bool[maxMenuItems];
			bool[] array2 = new bool[maxMenuItems];
			bool[] array3 = new bool[maxMenuItems];
			int[] array4 = new int[maxMenuItems];
			int[] array5 = new int[maxMenuItems];
			byte[] array6 = new byte[maxMenuItems];
			float[] array7 = new float[maxMenuItems];
			bool[] array8 = new bool[maxMenuItems];
			bool flag4 = false;
			bool flag5 = UILinkPointNavigator.Shortcuts.BackButtonInUse && !UILinkPointNavigator.Shortcuts.BackButtonLock;
			for (int i = 0; i < maxMenuItems; i++)
			{
				array[i] = false;
				array2[i] = false;
				array4[i] = 0;
				array5[i] = 0;
				array7[i] = 1f;
			}
			string[] array9 = new string[maxMenuItems];
			if (menuMode == -1)
			{
				menuMode = 0;
			}
			if (Activity1.LoadedEverything)
			{
				GamepadMainMenuHandler.CanRun = true;
			}
			if (menuMode == 1212)
			{
				array9[0] = Lang.menu[102].Value;
				num4 = 50;
				num2 = 200;
				num4 = 33;
				num2 = 200;
				array4[0] = -20;
				array4[1] = 25;
				array4[2] = 25;
				array4[3] = 25;
				array4[4] = 25;
				array4[5] = 25;
				array4[6] = 25;
				array4[7] = 25;
				array4[8] = 25;
				array4[9] = 25;
				array[0] = true;
				array9[1] = Language.GetTextValue("Language.English");
				array9[2] = Language.GetTextValue("Language.German");
				array9[3] = Language.GetTextValue("Language.Italian");
				array9[4] = Language.GetTextValue("Language.French");
				array9[5] = Language.GetTextValue("Language.Spanish");
				array9[6] = Language.GetTextValue("Language.Russian");
				array9[7] = Language.GetTextValue("Language.Chinese");
				array9[8] = Language.GetTextValue("Language.Portuguese");
				array9[9] = Language.GetTextValue("Language.Polish");
				num5 = 10;
				for (int j = 0; j < num5; j++)
				{
					array7[j] = 0.75f;
				}
				array7[0] = 1f;
				if (selectedMenu >= 1)
				{
					changeTheTitle = true;
					LanguageManager.Instance.SetLanguage(selectedMenu);
					menuMode = 0;
					SoundEngine.PlaySound(10);
					SaveSettings();
				}
			}
			else if (menuMode == 1213)
			{
				array9[0] = Lang.menu[102].Value;
				array[0] = true;
				array9[1] = Language.GetTextValue("Language.English");
				array9[2] = Language.GetTextValue("Language.German");
				array9[3] = Language.GetTextValue("Language.Italian");
				array9[4] = Language.GetTextValue("Language.French");
				array9[5] = Language.GetTextValue("Language.Spanish");
				array9[6] = Language.GetTextValue("Language.Russian");
				array9[7] = Language.GetTextValue("Language.Chinese");
				array9[8] = Language.GetTextValue("Language.Portuguese");
				array9[9] = Language.GetTextValue("Language.Polish");
				array9[10] = Lang.menu[5].Value;
				num5 = 11;
				if (selectedMenu == 10 || flag5)
				{
					flag5 = false;
					menuMode = 11;
					SoundEngine.PlaySound(11);
				}
				else if (selectedMenu >= 1)
				{
					changeTheTitle = true;
					LanguageManager.Instance.SetLanguage(selectedMenu);
					SoundEngine.PlaySound(12);
					SaveSettings();
				}
				num4 = 33;
				num2 = 200;
				array4[0] = -20;
				array4[10] = 10;
				for (int k = 0; k < num5; k++)
				{
					array7[k] = 0.75f;
				}
				array7[0] = 0.85f;
				array7[10] = 0.95f;
			}
			else if (netMode == 2)
			{
				bool flag6 = true;
				for (int l = 0; l < 8; l++)
				{
					if (l >= 255)
					{
						continue;
					}
					try
					{
						array9[l] = Netplay.Clients[l].StatusText;
						if (Netplay.Clients[l].IsActive && showSpam)
						{
							string reference = array9[l];
							reference = reference + " (" + NetMessage.buffer[l].spamCount + ")";
						}
					}
					catch
					{
						array9[l] = "";
					}
					array[l] = true;
					if (array9[l] != "" && array9[l] != null)
					{
						flag6 = false;
					}
				}
				if (flag6)
				{
					array9[0] = Lang.menu[0].Value;
					array9[1] = Lang.menu[1].Value + Netplay.ListenPort + ".";
				}
				num5 = 11;
				array9[9] = statusText;
				array[9] = true;
				num2 = 170;
				num4 = 30;
				array4[10] = 20;
				array4[10] = 40;
				array9[10] = Lang.menu[2].Value;
				if (selectedMenu == 10 || flag5)
				{
					flag5 = false;
					Netplay.Disconnect = true;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 31)
			{
				string serverPassword = Netplay.ServerPassword;
				PlayerInput.WritingText = true;
				flag5 = false;
				instance.HandleIME();
				Netplay.ServerPassword = GetInputText(Netplay.ServerPassword);
				if (serverPassword != Netplay.ServerPassword)
				{
					SoundEngine.PlaySound(12);
				}
				array9[0] = Lang.menu[3].Value;
				textBlinkerCount++;
				if (textBlinkerCount >= 20)
				{
					if (textBlinkerState == 0)
					{
						textBlinkerState = 1;
					}
					else
					{
						textBlinkerState = 0;
					}
					textBlinkerCount = 0;
				}
				array9[1] = Netplay.ServerPassword;
				if (HidePassword)
				{
					array9[1] = "";
					for (int m = 0; m < Netplay.ServerPassword.Length; m++)
					{
						array9[1] += "*";
					}
				}
				if (textBlinkerState == 1)
				{
					array9[1] += "|";
					array5[1] = 1;
				}
				else
				{
					array9[1] += " ";
				}
				array[0] = true;
				array[1] = true;
				array4[1] = -20;
				array4[2] = 20;
				array9[2] = Lang.menu[4].Value;
				array9[3] = Lang.menu[5].Value;
				num5 = 4;
				if (selectedMenu == 3 || flag5)
				{
					flag5 = false;
					SoundEngine.PlaySound(11);
					menuMode = 0;
					Netplay.Disconnect = true;
					Netplay.ServerPassword = "";
				}
				else if (selectedMenu == 2 || inputTextEnter)
				{
					NetMessage.SendData(38);
					menuMode = 14;
				}
			}
			else if (netMode == 1 || menuMode == 14)
			{
				num5 = 2;
				array9[0] = statusText;
				array[0] = true;
				num2 = 300;
				int num10 = statusText.Split('\n').Length - 1;
				array7[0] = 1f - (float)num10 * 0.04f;
				array4[0] = num10 * -18;
				array4[1] = num10 * 28;
				array9[1] = Lang.menu[6].Value;
				if (selectedMenu == 1 || flag5)
				{
					flag5 = false;
					Netplay.InvalidateAllOngoingIPSetAttempts();
					Netplay.Disconnect = true;
					Netplay.Connection.Socket.Close();
					SoundEngine.PlaySound(11);
					menuMode = 0;
					netMode = 0;
					if (tServer != null)
					{
						try
						{
							tServer.Kill();
							tServer = null;
						}
						catch
						{
						}
					}
				}
			}
			else if (menuMode == 882)
			{
				num5 = 2;
				array[0] = true;
				num2 = 300;
				array9[0] = statusText;
				array9[1] = Lang.menu[6].Value;
				if (selectedMenu == 1 || flag5)
				{
					flag5 = false;
					SoundEngine.PlaySound(11);
					menuMode = 0;
					netMode = 0;
					if (SocialAPI.Network != null)
					{
						SocialAPI.Network.CancelJoin();
					}
				}
			}
			else if (menuMode == 30)
			{
				string serverPassword2 = Netplay.ServerPassword;
				PlayerInput.WritingText = true;
				flag5 = false;
				instance.HandleIME();
				Netplay.ServerPassword = GetInputText(Netplay.ServerPassword);
				if (serverPassword2 != Netplay.ServerPassword)
				{
					SoundEngine.PlaySound(12);
				}
				array9[0] = Lang.menu[7].Value;
				textBlinkerCount++;
				if (textBlinkerCount >= 20)
				{
					if (textBlinkerState == 0)
					{
						textBlinkerState = 1;
					}
					else
					{
						textBlinkerState = 0;
					}
					textBlinkerCount = 0;
				}
				array9[1] = Netplay.ServerPassword;
				if (HidePassword)
				{
					array9[1] = "";
					for (int n = 0; n < Netplay.ServerPassword.Length; n++)
					{
						array9[1] += "*";
					}
				}
				if (textBlinkerState == 1)
				{
					array9[1] += "|";
					array5[1] = 1;
				}
				else
				{
					array9[1] += " ";
				}
				array[0] = true;
				array[1] = true;
				array4[1] = -20;
				array4[2] = 20;
				array9[2] = Lang.menu[4].Value;
				array9[3] = Lang.menu[5].Value;
				num5 = 4;
				if (selectedMenu == 3 || flag5)
				{
					flag5 = false;
					if (SocialAPI.Network != null)
					{
						menuMode = 889;
					}
					else
					{
						menuMode = 6;
					}
					Netplay.ServerPassword = "";
				}
				else if (selectedMenu == 2 || inputTextEnter || autoPass)
				{
					string str = "-autoshutdown -password \"" + ConvertToSafeArgument(Netplay.ServerPassword) + "\" -lang " + Language.ActiveCulture.LegacyId;
					str = ((!ActiveWorldFileData.IsCloudSave) ? (str + " -world \"" + worldPathName + "\"") : (str + " -cloudworld \"" + worldPathName + "\""));
					str = str + " -worldrollbackstokeep " + WorldRollingBackupsCountToKeep;
					tServer = new Process();
					tServer.StartInfo.FileName = "TerrariaServer.exe";
					tServer.StartInfo.Arguments = str;
					if (libPath != "")
					{
						ProcessStartInfo startInfo = tServer.StartInfo;
						startInfo.Arguments = startInfo.Arguments + " -loadlib " + libPath;
					}
					tServer.StartInfo.UseShellExecute = false;
					tServer.StartInfo.CreateNoWindow = true;
					if (SocialAPI.Network != null)
					{
						SocialAPI.Network.LaunchLocalServer(tServer, MenuServerMode);
					}
					else
					{
						tServer.Start();
					}
					Netplay.SetRemoteIP("127.0.0.1");
					autoPass = true;
					statusText = Lang.menu[8].Value;
					Netplay.StartTcpClient();
					menuMode = 10;
				}
			}
			else if (menuMode == 889)
			{
				num2 = 200;
				num4 = 60;
				array4[1] = 30;
				array4[2] = 30;
				array4[3] = 30;
				array4[4] = 70;
				array4[5] = 70;
				num5 = 6;
				array9[0] = Lang.menu[135].Value;
				array9[4] = Lang.menu[144].Value;
				array9[5] = Lang.menu[5].Value;
				array[0] = true;
				if (!MenuServerMode.HasFlag(ServerMode.Lobby))
				{
					MenuServerMode = ServerMode.None;
					array[2] = true;
					array[3] = true;
					array9[1] = Lang.menu[136].Value;
					array9[2] = "";
					array9[3] = "";
				}
				else
				{
					array9[1] = Lang.menu[137].Value;
					if (MenuServerMode.HasFlag(ServerMode.FriendsCanJoin))
					{
						array9[2] = Lang.menu[139].Value;
						if (MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
						{
							array9[3] = Lang.menu[143].Value;
						}
						else
						{
							array9[3] = Lang.menu[142].Value;
						}
					}
					else
					{
						array9[2] = Lang.menu[138].Value;
						if (MenuServerMode.HasFlag(ServerMode.FriendsOfFriends))
						{
							array9[3] = Lang.menu[141].Value;
						}
						else
						{
							array9[3] = Lang.menu[140].Value;
						}
					}
				}
				if (flag5)
				{
					flag5 = false;
					selectedMenu = 5;
				}
				switch (selectedMenu)
				{
				case 1:
					MenuServerMode ^= ServerMode.Lobby;
					SoundEngine.PlaySound(12);
					break;
				case 2:
					MenuServerMode ^= ServerMode.FriendsCanJoin;
					SoundEngine.PlaySound(12);
					break;
				case 3:
					MenuServerMode ^= ServerMode.FriendsOfFriends;
					SoundEngine.PlaySound(12);
					break;
				case 4:
					clrInput();
					Netplay.ServerPassword = "";
					GetInputText("");
					autoPass = false;
					menuMode = 30;
					SoundEngine.PlaySound(10);
					break;
				case 5:
					menuMode = 6;
					SoundEngine.PlaySound(11);
					break;
				}
			}
			else if (menuMode == 15)
			{
				num5 = 2;
				array9[0] = statusText;
				array[0] = true;
				num2 = 80;
				num4 = 400;
				array9[1] = Lang.menu[5].Value;
				if (selectedMenu == 1 || flag5)
				{
					flag5 = false;
					Netplay.Disconnect = true;
					SoundEngine.PlaySound(11);
					menuMode = 0;
					netMode = 0;
				}
			}
			else if (menuMode == 200)
			{
				num5 = 3;
				array9[0] = Lang.menu[9].Value;
				array[0] = true;
				num2 -= 30;
				array4[1] = 70;
				array4[2] = 50;
				array9[1] = Lang.menu[10].Value;
				array9[2] = Lang.menu[6].Value;
				if (selectedMenu == 1)
				{
					if (FileUtilities.Exists(worldPathName + ".bak", ActiveWorldFileData.IsCloudSave))
					{
						FileUtilities.Move(worldPathName, worldPathName + ".bad", ActiveWorldFileData.IsCloudSave);
						FileUtilities.Move(worldPathName + ".bak", worldPathName, ActiveWorldFileData.IsCloudSave);
						SoundEngine.PlaySound(10);
						WorldGen.playWorld();
						menuMode = 10;
					}
					else
					{
						SoundEngine.PlaySound(11);
						menuMode = 0;
						netMode = 0;
					}
				}
				if (selectedMenu == 2 || flag5)
				{
					flag5 = false;
					SoundEngine.PlaySound(11);
					menuMode = 0;
					netMode = 0;
				}
			}
			else if (menuMode == 201)
			{
				num5 = 3;
				array9[0] = Lang.menu[9].Value;
				array[0] = true;
				array[1] = true;
				num2 -= 30;
				array4[1] = -30;
				array4[2] = 50;
				array9[1] = Lang.menu[11].Value;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag5)
				{
					flag5 = false;
					SoundEngine.PlaySound(11);
					menuMode = 0;
					netMode = 0;
				}
			}
			else if (menuMode == 10)
			{
				num5 = 1;
				array9[0] = statusText;
				array[0] = true;
				num2 = 300;
				gameTips.Update();
				gameTips.Draw();
			}
			else if (menuMode == 100)
			{
				num5 = 1;
				array9[0] = statusText;
				array[0] = true;
				num2 = 300;
			}
			else if (menuMode == 0)
			{
				_blockFancyUIWhileLoading = false;
				_pendingCharacterSelect = null;
				DD2Event.Ongoing = false;
				eclipse = false;
				pumpkinMoon = false;
				snowMoon = false;
				ServerSideCharacter = false;
				menuMultiplayer = false;
				menuServer = false;
				netMode = 0;
				ClearVisualPostProcessEffects();
				int num11 = 0;
				num5 = 6;
				num4 = 60;
				array9[num11] = Lang.menu[12].Value;
				if (selectedMenu == num11)
				{
					SoundEngine.PlaySound(10);
					ClearPendingPlayerSelectCallbacks();
					menuMode = 1;
				}
				num11++;
				array9[num11] = Lang.menu[13].Value;
				if (selectedMenu == num11)
				{
					SoundEngine.PlaySound(10);
					menuMode = 12;
				}
				num11++;
				array9[num11] = Lang.menu[131].Value;
				if (selectedMenu == num11)
				{
					SoundEngine.PlaySound(10);
					MenuUI.SetState(AchievementsMenu);
					menuMode = 888;
				}
				num11++;
				array9[num11] = Language.GetText("UI.ResourcePacks").Value;
				if (selectedMenu == num11)
				{
					SoundEngine.PlaySound(10);
					MenuUI.SetState(new UIResourcePackSelectionMenu(AssetSourceController, AssetInitializer.CreateResourcePackList(base.Services)));
					menuMode = 888;
				}
				num11++;
				array9[num11] = Lang.menu[14].Value;
				if (selectedMenu == num11)
				{
					SoundEngine.PlaySound(10);
					menuMode = 11;
				}
				num11++;
				array9[num11] = Lang.menu[15].Value;
				if (selectedMenu == num11)
				{
					QuitGame();
				}
				num11++;
			}
			else if (menuMode == 1)
			{
				OpenCharacterSelectUI();
			}
			else if (menuMode == 2)
			{
				flag4 = true;
				if (selectedMenu == 0)
				{
					menuMode = 17;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.hairColor;
				}
				if (selectedMenu == 1)
				{
					menuMode = 18;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.eyeColor;
				}
				if (selectedMenu == 2)
				{
					menuMode = 19;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.skinColor;
				}
				if (selectedMenu == 3)
				{
					menuMode = 20;
					SoundEngine.PlaySound(10);
				}
				array9[0] = Lang.menu[18].Value;
				array9[1] = Lang.menu[19].Value;
				array9[2] = Lang.menu[20].Value;
				array9[3] = Lang.menu[21].Value;
				num2 = 220;
				for (int num12 = 0; num12 < 9; num12++)
				{
					if (num12 < 6)
					{
						array7[num12] = 0.75f;
					}
					else
					{
						array7[num12] = 0.9f;
					}
				}
				num4 = 38;
				array4[6] = 6;
				array4[7] = 12;
				array4[8] = 18;
				num7 = screenWidth / 2 - 16;
				num8 = 176;
				if (PendingPlayer.Male)
				{
					array9[4] = Lang.menu[22].Value;
				}
				else
				{
					array9[4] = Lang.menu[23].Value;
				}
				if (selectedMenu == 4)
				{
					if (PendingPlayer.Male)
					{
						SoundEngine.PlaySound(20);
						PendingPlayer.Male = false;
					}
					else
					{
						SoundEngine.PlaySound(1);
						PendingPlayer.Male = true;
					}
				}
				if (PendingPlayer.difficulty == 2)
				{
					array9[5] = Lang.menu[24].Value;
					array6[5] = PendingPlayer.difficulty;
				}
				else if (PendingPlayer.difficulty == 1)
				{
					array9[5] = Lang.menu[25].Value;
					array6[5] = PendingPlayer.difficulty;
				}
				else
				{
					array9[5] = Lang.menu[26].Value;
				}
				if (selectedMenu == 5)
				{
					SoundEngine.PlaySound(10);
					menuMode = 222;
				}
				if (selectedMenu == 7)
				{
					SoundEngine.PlaySound(12);
					PendingPlayer.hair = rand.Next(51);
					PendingPlayer.eyeColor = randColor();
					while (PendingPlayer.eyeColor.R + PendingPlayer.eyeColor.G + PendingPlayer.eyeColor.B > 300)
					{
						PendingPlayer.eyeColor = randColor();
					}
					PendingPlayer.hairColor = randColor();
					PendingPlayer.pantsColor = randColor();
					PendingPlayer.shirtColor = randColor();
					PendingPlayer.shoeColor = randColor();
					PendingPlayer.skinColor = randColor();
					float num13 = (float)rand.Next(60, 120) * 0.01f;
					if (num13 > 1f)
					{
						num13 = 1f;
					}
					PendingPlayer.skinColor.R = (byte)((float)rand.Next(240, 255) * num13);
					PendingPlayer.skinColor.G = (byte)((float)rand.Next(110, 140) * num13);
					PendingPlayer.skinColor.B = (byte)((float)rand.Next(75, 110) * num13);
					PendingPlayer.underShirtColor = randColor();
					int num14 = PendingPlayer.hair + 1;
					if (num14 == 5 || num14 == 6 || num14 == 7 || num14 == 10 || num14 == 12 || num14 == 19 || num14 == 22 || num14 == 23 || num14 == 26 || num14 == 27 || num14 == 30 || num14 == 33)
					{
						PendingPlayer.Male = false;
					}
					else
					{
						PendingPlayer.Male = true;
					}
					PendingPlayer.skinVariant = rand.Next(12);
				}
				array9[7] = Lang.menu[27].Value;
				array9[6] = Lang.menu[28].Value;
				array9[8] = Lang.menu[5].Value;
				num5 = 9;
				if (selectedMenu == 8 || flag5)
				{
					flag5 = false;
					SoundEngine.PlaySound(11);
					menuMode = 1;
				}
				else if (selectedMenu == 6)
				{
					SoundEngine.PlaySound(10);
					PendingPlayer.name = "";
					menuMode = 3;
					clrInput();
				}
			}
			else if (menuMode == 222)
			{
				if (focusMenu == 3)
				{
					array9[0] = Lang.menu[29].Value;
				}
				else if (focusMenu == 2)
				{
					array9[0] = Lang.menu[30].Value;
				}
				else if (focusMenu == 1)
				{
					array9[0] = Lang.menu[31].Value;
				}
				else
				{
					array9[0] = Lang.menu[32].Value;
				}
				num4 = 50;
				array4[1] = 25;
				array4[2] = 25;
				array4[3] = 25;
				array[0] = true;
				array9[1] = Lang.menu[26].Value;
				array9[2] = Lang.menu[25].Value;
				array6[2] = 1;
				array9[3] = Lang.menu[24].Value;
				array6[3] = 2;
				num5 = 4;
				if (selectedMenu == 1)
				{
					PendingPlayer.difficulty = 0;
					menuMode = 2;
				}
				else if (selectedMenu == 2)
				{
					menuMode = 2;
					PendingPlayer.difficulty = 1;
				}
				else if (selectedMenu == 3)
				{
					PendingPlayer.difficulty = 2;
					menuMode = 2;
				}
			}
			else if (menuMode == 20)
			{
				flag4 = true;
				if (selectedMenu == 0)
				{
					menuMode = 21;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.shirtColor;
				}
				if (selectedMenu == 1)
				{
					menuMode = 22;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.underShirtColor;
				}
				if (selectedMenu == 2)
				{
					menuMode = 23;
					SoundEngine.PlaySound(10);
					selColor = PendingPlayer.pantsColor;
				}
				if (selectedMenu == 3)
				{
					selColor = PendingPlayer.shoeColor;
					menuMode = 24;
					SoundEngine.PlaySound(10);
				}
				if (selectedMenu == 5 || flag5)
				{
					flag5 = false;
					SoundEngine.PlaySound(11);
					menuMode = 2;
				}
				if (selectedMenu == 4)
				{
					SoundEngine.PlaySound(12);
					CycleClothingStyle(PendingPlayer);
				}
				num7 = screenWidth / 2 - 16;
				num8 = 210;
				num2 = 260;
				num4 = 50;
				num5 = 6;
				array9[0] = Lang.menu[33].Value;
				array9[1] = Lang.menu[34].Value;
				array9[2] = Lang.menu[35].Value;
				array9[3] = Lang.menu[36].Value;
				array9[4] = Lang.menu[127].Value;
				array9[5] = Lang.menu[5].Value;
				array4[5] = 20;
			}
			else if (menuMode == 17)
			{
				flag4 = true;
				num7 = screenWidth / 2 - 16;
				num8 = 210;
				flag = true;
				num9 = 390;
				num2 = 260;
				num4 = 60;
				PendingPlayer.hairColor = selColor;
				num5 = 3;
				array9[0] = Lang.menu[37].Value + " " + (PendingPlayer.hair + 1);
				array9[1] = Lang.menu[38].Value;
				array[1] = true;
				array4[2] = 150;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				int num15 = 51;
				if (focusMenu == 0)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 9;
				}
				if (selectedMenu == 0)
				{
					SoundEngine.PlaySound(12);
					PendingPlayer.hair++;
					if (PendingPlayer.hair >= num15)
					{
						PendingPlayer.hair = 0;
					}
				}
				else if (selectedMenu2 == 0)
				{
					SoundEngine.PlaySound(12);
					PendingPlayer.hair--;
					if (PendingPlayer.hair < 0)
					{
						PendingPlayer.hair = num15 - 1;
					}
				}
				if (selectedMenu == 2 || flag5)
				{
					flag5 = false;
					menuMode = 2;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 18)
			{
				flag4 = true;
				num7 = screenWidth / 2 - 16;
				num8 = 210;
				flag = true;
				num9 = 370;
				num2 = 240;
				num4 = 60;
				PendingPlayer.eyeColor = selColor;
				num5 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[39].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag5)
				{
					flag5 = false;
					menuMode = 2;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 19)
			{
				flag4 = true;
				num7 = screenWidth / 2 - 16;
				num8 = 210;
				flag = true;
				num9 = 370;
				num2 = 240;
				num4 = 60;
				PendingPlayer.skinColor = selColor;
				num5 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[40].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag5)
				{
					flag5 = false;
					menuMode = 2;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 21)
			{
				flag4 = true;
				num7 = screenWidth / 2 - 16;
				num8 = 210;
				flag = true;
				num9 = 370;
				num2 = 240;
				num4 = 60;
				PendingPlayer.shirtColor = selColor;
				num5 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[41].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag5)
				{
					flag5 = false;
					menuMode = 20;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 22)
			{
				flag4 = true;
				num7 = screenWidth / 2 - 16;
				num8 = 210;
				flag = true;
				num9 = 370;
				num2 = 240;
				num4 = 60;
				PendingPlayer.underShirtColor = selColor;
				num5 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[42].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag5)
				{
					flag5 = false;
					menuMode = 20;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 23)
			{
				flag4 = true;
				num7 = screenWidth / 2 - 16;
				num8 = 210;
				flag = true;
				num9 = 370;
				num2 = 240;
				num4 = 60;
				PendingPlayer.pantsColor = selColor;
				num5 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[43].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag5)
				{
					flag5 = false;
					menuMode = 20;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 24)
			{
				flag4 = true;
				num7 = screenWidth / 2 - 16;
				num8 = 210;
				flag = true;
				num9 = 370;
				num2 = 240;
				num4 = 60;
				PendingPlayer.shoeColor = selColor;
				num5 = 3;
				array9[0] = "";
				array9[1] = Lang.menu[44].Value;
				array[1] = true;
				array4[2] = 170;
				array4[1] = 10;
				array9[2] = Lang.menu[5].Value;
				if (selectedMenu == 2 || flag5)
				{
					flag5 = false;
					menuMode = 20;
					SoundEngine.PlaySound(11);
				}
			}
			else if (menuMode == 3)
			{
				UIVirtualKeyboard uIVirtualKeyboard = new UIVirtualKeyboard(Lang.menu[45].Value, "", OnCharacterNamed, CreateGoToMenuEvent(2));
				uIVirtualKeyboard.SetMaxInputLength(20);
				MenuUI.SetState(uIVirtualKeyboard);
				menuMode = 888;
			}
			else if (menuMode != 4)
			{
				if (menuMode == 5)
				{
					array9[0] = Lang.menu[46].Value + " " + PlayerList[selectedPlayer].Player.name + "?";
					array[0] = true;
					array9[1] = Lang.menu[104].Value;
					array9[2] = Lang.menu[105].Value;
					num5 = 3;
					if (selectedMenu == 1)
					{
						ErasePlayer(selectedPlayer);
						SoundEngine.PlaySound(10);
						menuMode = 1;
					}
					else if (selectedMenu == 2 || flag5)
					{
						flag5 = false;
						SoundEngine.PlaySound(11);
						menuMode = 1;
					}
				}
				else if (menuMode == 6)
				{
					MenuUI.SetState(_worldSelectMenu);
					menuMode = 888;
				}
				else if (menuMode == -7)
				{
					num2 = 200;
					num4 = 60;
					array4[2] = 30;
					array4[3] = 30;
					array4[4] = 30;
					array6[3] = 1;
					array6[4] = 2;
					array4[5] = 70;
					if (focusMenu == 2)
					{
						array9[1] = Language.GetTextValue("UI.WorldDescriptionNormal");
					}
					else if (focusMenu == 3)
					{
						array9[1] = Language.GetTextValue("UI.WorldDescriptionExpert");
					}
					else if (focusMenu == 4)
					{
						array9[1] = Language.GetTextValue("UI.WorldDescriptionMaster");
					}
					array9[0] = Lang.menu[32].Value;
					array[0] = true;
					array[1] = true;
					array9[2] = Language.GetTextValue("UI.Normal");
					array9[3] = Language.GetTextValue("UI.Expert");
					array9[4] = Language.GetTextValue("UI.Master");
					array9[5] = Language.GetTextValue("UI.Back");
					num5 = 6;
					if (selectedMenu == 2)
					{
						GameMode = 0;
						SoundEngine.PlaySound(10);
						menuMode = 7;
						if (SettingsUnlock_WorldEvil)
						{
							menuMode = -71;
						}
					}
					else if (selectedMenu == 3)
					{
						GameMode = 1;
						SoundEngine.PlaySound(10);
						menuMode = 7;
						if (SettingsUnlock_WorldEvil)
						{
							menuMode = -71;
						}
					}
					else if (selectedMenu == 4)
					{
						GameMode = 2;
						SoundEngine.PlaySound(10);
						menuMode = 7;
						if (SettingsUnlock_WorldEvil)
						{
							menuMode = -71;
						}
					}
					else if (selectedMenu == 5 || flag5)
					{
						flag5 = false;
						SoundEngine.PlaySound(11);
						menuMode = 16;
					}
					clrInput();
				}
				else if (menuMode == -71)
				{
					num2 = 200;
					num4 = 60;
					array4[1] = 30;
					array4[2] = 30;
					array4[3] = 30;
					array4[4] = 70;
					num5 = 5;
					int num16 = 0;
					array9[num16] = Lang.misc[100].Value;
					array[num16] = true;
					num16++;
					array9[num16] = Lang.misc[101].Value;
					if (selectedMenu == num16)
					{
						WorldGen.WorldGenParam_Evil = 0;
						SoundEngine.PlaySound(10);
						menuMode = 7;
					}
					num16++;
					array9[num16] = Lang.misc[102].Value;
					if (selectedMenu == num16)
					{
						WorldGen.WorldGenParam_Evil = 1;
						SoundEngine.PlaySound(10);
						menuMode = 7;
					}
					num16++;
					array9[num16] = Lang.misc[103].Value;
					if (selectedMenu == num16)
					{
						WorldGen.WorldGenParam_Evil = -1;
						SoundEngine.PlaySound(10);
						menuMode = 7;
					}
					num16++;
					array9[num16] = Language.GetTextValue("UI.Back");
					if (selectedMenu == num16 || flag5)
					{
						flag5 = false;
						SoundEngine.PlaySound(11);
						menuMode = -7;
					}
					num16++;
					clrInput();
				}
				else if (menuMode == 7)
				{
					MenuUI.SetState(new UIVirtualKeyboard(Lang.menu[48].Value, "", OnWorldNamed, CreateGoToMenuEvent(-7)));
					menuMode = 888;
				}
				else if (menuMode == 5000)
				{
					MenuUI.SetState(new UIVirtualKeyboard(Language.GetTextValue("UI.EnterSeed"), "", OnSeedSelected, CreateGoToMenuEvent(7), 0, allowEmpty: true));
					menuMode = 888;
				}
				else if (menuMode == 8)
				{
					num2 = 180;
					num4 = 40;
					num5 = 8;
					array4[7] += 30;
					for (int num17 = 0; num17 < num5; num17++)
					{
						array7[num17] = 0.8f;
					}
					array9[7] = Lang.menu[5].Value;
					for (int num18 = 0; num18 < 7; num18++)
					{
						if (num18 < WorldList.Count)
						{
							array9[num18] = WorldList[num18 + menuSkip].Name;
							if (WorldList[num18 + menuSkip].GameMode == 1)
							{
								array6[num18] = 1;
							}
							else if (WorldList[num18 + menuSkip].GameMode == 2)
							{
								array6[num18] = 2;
							}
						}
						else
						{
							array9[num18] = null;
						}
					}
					if (WorldList.Count > 7 + menuSkip)
					{
						array9[6] = Language.GetTextValue("UI.More");
						array9[6] = "â¼";
						array7[6] = 0.6f;
						array4[6] += 8;
						menuWide[6] = true;
					}
					if (menuSkip > 0)
					{
						array9[0] = "â²";
						array7[0] = 0.6f;
						array4[0] += 8;
						menuWide[0] = true;
					}
					if (selectedMenu == 0 && menuSkip > 0)
					{
						SoundEngine.PlaySound(12);
						menuSkip -= 5;
						if (menuSkip < 0)
						{
							menuSkip = 0;
						}
					}
					else if (selectedMenu == 6 && menuSkip < WorldList.Count - 7)
					{
						SoundEngine.PlaySound(12);
						menuSkip += 5;
						if (menuSkip >= PlayerList.Count - 7)
						{
							menuSkip = WorldList.Count - 7;
						}
					}
					else if (selectedMenu == 7 || flag5)
					{
						flag5 = false;
						SoundEngine.PlaySound(11);
						menuMode = 6;
					}
					else if (selectedMenu >= 0)
					{
						selectedWorld = selectedMenu + menuSkip;
						SoundEngine.PlaySound(10);
						menuMode = 9;
					}
				}
				else if (menuMode == 9)
				{
					array9[0] = Lang.menu[46].Value + " " + WorldList[selectedWorld].Name + "?";
					array[0] = true;
					array9[1] = Lang.menu[104].Value;
					array9[2] = Lang.menu[105].Value;
					num5 = 3;
					if (selectedMenu == 1)
					{
						EraseWorld(selectedWorld);
						SoundEngine.PlaySound(10);
						menuMode = 6;
					}
					else if (selectedMenu == 2 || flag5)
					{
						SoundEngine.PlaySound(11);
						menuMode = 6;
					}
				}
				else if (menuMode == 11)
				{
					num2 = 210;
					num4 = 37;
					num5 = 8;
					array4[num5 - 1] = 8;
					for (int num19 = 0; num19 < num5; num19++)
					{
						array7[num19] = 0.75f;
					}
					int num20 = 0;
					array9[num20] = Lang.menu[114].Value;
					if (selectedMenu == num20)
					{
						SoundEngine.PlaySound(10);
						menuMode = 112;
					}
					num20++;
					array9[num20] = Lang.menu[210].Value;
					if (selectedMenu == num20)
					{
						SoundEngine.PlaySound(10);
						menuMode = 1112;
					}
					num20++;
					array9[num20] = Lang.menu[63].Value;
					if (selectedMenu == num20)
					{
						SoundEngine.PlaySound(10);
						menuMode = 1111;
					}
					num20++;
					array9[num20] = Lang.menu[65].Value;
					if (selectedMenu == num20)
					{
						SoundEngine.PlaySound(11);
						menuMode = 26;
					}
					num20++;
					array9[num20] = Lang.menu[218].Value;
					if (selectedMenu == num20)
					{
						SoundEngine.PlaySound(10);
						menuMode = 1125;
					}
					num20++;
					array9[num20] = Lang.menu[219].Value;
					if (selectedMenu == num20)
					{
						SoundEngine.PlaySound(10);
						menuMode = 1127;
					}
					num20++;
					array9[num20] = Lang.menu[103].Value;
					if (selectedMenu == num20)
					{
						SoundEngine.PlaySound(10);
						menuMode = 1213;
					}
					num20++;
					array9[num20] = Lang.menu[5].Value;
					if (selectedMenu == num20 || flag5)
					{
						flag5 = false;
						SoundEngine.PlaySound(11);
						menuMode = 0;
						SaveSettings();
					}
				}
				else if (menuMode == 112)
				{
					num2 = 250;
					num4 = 52;
					num5 = 5;
					array4[num5 - 1] = 18;
					for (int num21 = 0; num21 < num5; num21++)
					{
						array7[num21] = 0.78f;
					}
					int num22 = 0;
					if (autoSave)
					{
						array9[num22] = Lang.menu[67].Value;
					}
					else
					{
						array9[num22] = Lang.menu[68].Value;
					}
					if (selectedMenu == num22)
					{
						SoundEngine.PlaySound(12);
						if (autoSave)
						{
							autoSave = false;
						}
						else
						{
							autoSave = true;
						}
					}
					num22++;
					if (autoPause)
					{
						array9[num22] = Lang.menu[69].Value;
					}
					else
					{
						array9[num22] = Lang.menu[70].Value;
					}
					if (selectedMenu == num22)
					{
						SoundEngine.PlaySound(12);
						if (autoPause)
						{
							autoPause = false;
						}
						else
						{
							autoPause = true;
						}
					}
					num22++;
					if (mapEnabled)
					{
						array9[num22] = Lang.menu[112].Value;
					}
					else
					{
						array9[num22] = Lang.menu[113].Value;
					}
					if (selectedMenu == num22)
					{
						SoundEngine.PlaySound(12);
						if (mapEnabled)
						{
							mapEnabled = false;
						}
						else
						{
							mapEnabled = true;
						}
					}
					num22++;
					array9[num22] = (HidePassword ? Lang.menu[212].Value : Lang.menu[211].Value);
					if (selectedMenu == num22)
					{
						SoundEngine.PlaySound(12);
						HidePassword = !HidePassword;
					}
					num22++;
					array9[num22] = Lang.menu[5].Value;
					if (selectedMenu == num22 || flag5)
					{
						flag5 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 1112)
				{
					num2 = 210;
					num4 = 36;
					num5 = 9;
					array4[num5 - 1] = 18;
					for (int num23 = 0; num23 < num5; num23++)
					{
						array7[num23] = 0.75f;
					}
					int num24 = 0;
					if (showItemText)
					{
						array9[num24] = Lang.menu[71].Value;
					}
					else
					{
						array9[num24] = Lang.menu[72].Value;
					}
					if (selectedMenu == num24)
					{
						SoundEngine.PlaySound(12);
						if (showItemText)
						{
							showItemText = false;
						}
						else
						{
							showItemText = true;
						}
					}
					num24++;
					array9[num24] = Lang.menu[123].Value + " " + Lang.menu[124 + invasionProgressMode].Value;
					if (selectedMenu == num24)
					{
						SoundEngine.PlaySound(12);
						invasionProgressMode++;
						if (invasionProgressMode >= 3)
						{
							invasionProgressMode = 0;
						}
					}
					num24++;
					array9[num24] = (placementPreview ? Lang.menu[128].Value : Lang.menu[129].Value);
					if (selectedMenu == num24)
					{
						SoundEngine.PlaySound(12);
						placementPreview = !placementPreview;
					}
					num24++;
					array9[num24] = (ItemSlot.Options.HighlightNewItems ? Lang.inter[117].Value : Lang.inter[116].Value);
					if (selectedMenu == num24)
					{
						SoundEngine.PlaySound(12);
						ItemSlot.Options.HighlightNewItems = !ItemSlot.Options.HighlightNewItems;
					}
					num24++;
					array9[num24] = (MouseShowBuildingGrid ? Lang.menu[229].Value : Lang.menu[230].Value);
					if (selectedMenu == num24)
					{
						SoundEngine.PlaySound(12);
						MouseShowBuildingGrid = !MouseShowBuildingGrid;
					}
					num24++;
					array9[num24] = (GamepadDisableInstructionsDisplay ? Lang.menu[241].Value : Lang.menu[242].Value);
					if (selectedMenu == num24)
					{
						SoundEngine.PlaySound(12);
						GamepadDisableInstructionsDisplay = !GamepadDisableInstructionsDisplay;
					}
					num24++;
					string arg = "";
					MinimapFrame minimapFrame = null;
					foreach (KeyValuePair<string, MinimapFrame> minimapFrame2 in MinimapFrames)
					{
						MinimapFrame value = minimapFrame2.Value;
						if (value == ActiveMinimapFrame)
						{
							arg = Language.GetTextValue("UI.MinimapFrame_" + minimapFrame2.Key);
							break;
						}
						minimapFrame = value;
					}
					if (minimapFrame == null)
					{
						minimapFrame = MinimapFrames.Values.Last();
					}
					array9[num24] = Language.GetTextValue("UI.SelectMapBorder", arg);
					if (selectedMenu == num24)
					{
						ActiveMinimapFrame = minimapFrame;
					}
					num24++;
					string arg2 = "";
					IPlayerResourcesDisplaySet playerResourcesDisplaySet = null;
					foreach (KeyValuePair<string, IPlayerResourcesDisplaySet> playerResourcesSet in PlayerResourcesSets)
					{
						IPlayerResourcesDisplaySet value2 = playerResourcesSet.Value;
						if (value2 == ActivePlayerResourcesSet)
						{
							arg2 = Language.GetTextValue("UI.HealthManaStyle_" + playerResourcesSet.Key);
							break;
						}
						playerResourcesDisplaySet = value2;
					}
					if (playerResourcesDisplaySet == null)
					{
						playerResourcesDisplaySet = PlayerResourcesSets.Values.Last();
					}
					array9[num24] = Language.GetTextValue("UI.SelectHealthStyle", arg2);
					if (selectedMenu == num24)
					{
						ActivePlayerResourcesSet = playerResourcesDisplaySet;
					}
					num24++;
					array9[num24] = Lang.menu[5].Value;
					if (selectedMenu == num24 || flag5)
					{
						flag5 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 1111)
				{
					bgScroll = (int)Math.Round((1f - caveParallax) * 500f);
					int num25 = 0;
					array9[num25] = (graphics.IsFullScreen ? Lang.menu[49].Value : Lang.menu[50].Value);
					if (selectedMenu == num25)
					{
						ToggleFullScreen();
					}
					num25++;
					array9[num25] = Lang.menu[51].Value;
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(10);
						menuMode = 111;
					}
					num25++;
					array9[num25] = Lang.menu[52].Value;
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(11);
						menuMode = 28;
					}
					num25++;
					array9[num25] = Lang.menu[247 + FrameSkipMode].Value;
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(12);
						FrameSkipMode++;
						if (FrameSkipMode < 0 || FrameSkipMode > 2)
						{
							FrameSkipMode = 0;
						}
					}
					num25++;
					array9[num25] = Language.GetTextValue("UI.LightMode_" + Lighting.Mode);
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(12);
						Lighting.NextLightMode();
					}
					num25++;
					switch (qaStyle)
					{
					case 0:
						array9[num25] = Lang.menu[59].Value;
						break;
					case 1:
						array9[num25] = Lang.menu[60].Value;
						break;
					case 2:
						array9[num25] = Lang.menu[61].Value;
						break;
					default:
						array9[num25] = Lang.menu[62].Value;
						break;
					}
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(12);
						if (++qaStyle > 3)
						{
							qaStyle = 0;
						}
					}
					num25++;
					array9[num25] = (BackgroundEnabled ? Lang.menu[100].Value : Lang.menu[101].Value);
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(12);
						BackgroundEnabled = !BackgroundEnabled;
					}
					num25++;
					array9[num25] = (ChildSafety.Disabled ? Lang.menu[132].Value : Lang.menu[133].Value);
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(12);
						ChildSafety.Disabled = !ChildSafety.Disabled;
					}
					num25++;
					array9[num25] = (SettingsEnabled_MinersWobble ? Lang.menu[250].Value : Lang.menu[251].Value);
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(12);
						SettingsEnabled_MinersWobble = !SettingsEnabled_MinersWobble;
					}
					num25++;
					array9[num25] = (SettingsEnabled_TilesSwayInWind ? Language.GetTextValue("UI.TilesSwayInWindOn") : Language.GetTextValue("UI.TilesSwayInWindOff"));
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(12);
						SettingsEnabled_TilesSwayInWind = !SettingsEnabled_TilesSwayInWind;
					}
					num25++;
					array9[num25] = Language.GetTextValue("UI.Effects");
					if (selectedMenu == num25)
					{
						SoundEngine.PlaySound(11);
						menuMode = 2008;
					}
					int num26 = num25;
					int num27 = num26;
					array9[num27] = Lang.menu[5].Value;
					array4[num27] = 8;
					if (selectedMenu == num27 || flag5)
					{
						flag5 = false;
						SoundEngine.PlaySound(11);
						SaveSettings();
						menuMode = 11;
					}
					num2 = 186;
					num4 = 30;
					num5 = num27 + 1;
					for (int num28 = 0; num28 < num26; num28++)
					{
						array7[num28] = 0.6f;
					}
				}
				else if (menuMode == 2008)
				{
					num2 = 240;
					num4 = 60;
					num5 = 6;
					array9[0] = "";
					array9[1] = Language.GetTextValue("UI.Effects");
					array[1] = true;
					array4[1] = 10;
					array9[2] = Language.GetTextValue("GameUI.StormEffects", UseStormEffects ? Language.GetTextValue("GameUI.Enabled") : Language.GetTextValue("GameUI.Disabled"));
					array7[2] = 0.8f;
					array9[3] = Language.GetTextValue("GameUI.HeatDistortion", UseHeatDistortion ? Language.GetTextValue("GameUI.Enabled") : Language.GetTextValue("GameUI.Disabled"));
					array7[3] = 0.8f;
					array9[4] = Language.GetTextValue("GameUI.WaveQuality", WaveQuality switch
					{
						1 => Language.GetTextValue("GameUI.QualityLow"), 
						2 => Language.GetTextValue("GameUI.QualityMedium"), 
						3 => Language.GetTextValue("GameUI.QualityHigh"), 
						_ => Language.GetTextValue("GameUI.QualityOff"), 
					});
					array7[4] = 0.8f;
					array9[5] = Lang.menu[5].Value;
					if (selectedMenu == 2)
					{
						UseStormEffects = !UseStormEffects;
					}
					if (selectedMenu == 3)
					{
						UseHeatDistortion = !UseHeatDistortion;
					}
					if (selectedMenu == 4)
					{
						WaveQuality = (WaveQuality + 1) % 4;
					}
					if (selectedMenu == 5 || flag5)
					{
						flag5 = false;
						menuMode = 1111;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 111)
				{
					for (int num29 = 0; num29 < 9; num29++)
					{
						array7[num29] = 0.85f;
					}
					num2 = 210;
					num4 = 55;
					int num30 = 0;
					array9[num30] = Lang.menu[73].Value + ": " + PendingResolutionWidth + "x" + PendingResolutionHeight;
					if (selectedMenu == num30)
					{
						SoundEngine.PlaySound(12);
						int num31 = 0;
						for (int num32 = 0; num32 < numDisplayModes; num32++)
						{
							if (displayWidth[num32] == PendingResolutionWidth && displayHeight[num32] == PendingResolutionHeight)
							{
								num31 = num32;
								break;
							}
						}
						num31 = (num31 + 1) % numDisplayModes;
						PendingResolutionWidth = displayWidth[num31];
						PendingResolutionHeight = displayHeight[num31];
					}
					num30++;
					if (IsBorderlessDisplayAvailable())
					{
						array9[num30] = Lang.menu[PendingBorderlessState ? 245 : 246].Value;
						if (selectedMenu == num30)
						{
							SoundEngine.PlaySound(12);
							PendingBorderlessState = !PendingBorderlessState;
						}
						num30++;
					}
					array4[num30] = 100;
					array9[num30] = Lang.menu[134].Value;
					if (selectedMenu == num30)
					{
						if (graphics.IsFullScreen || PendingBorderlessState != screenBorderless || PendingResolutionWidth != screenWidth || PendingResolutionHeight != screenHeight)
						{
							screenBorderless = PendingBorderlessState;
							screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
							SetResolution(PendingResolutionWidth, PendingResolutionHeight);
						}
						SoundEngine.PlaySound(11);
						menuMode = 1111;
					}
					num30++;
					array9[num30] = Lang.menu[5].Value;
					array4[num30] = 100;
					if (selectedMenu == num30 || flag5)
					{
						flag5 = false;
						PendingResolutionWidth = graphics.PreferredBackBufferWidth;
						PendingResolutionHeight = graphics.PreferredBackBufferHeight;
						PendingBorderlessState = screenBorderless;
						menuMode = 1111;
						SoundEngine.PlaySound(11);
					}
					num30++;
					num5 = num30;
				}
				else if (menuMode == 1125)
				{
					num2 = 232;
					num4 = 38;
					num5 = 7;
					array4[num5 - 1] = 18;
					for (int num33 = 0; num33 < num5; num33++)
					{
						array7[num33] = 0.73f;
					}
					int num34 = 0;
					array9[num34] = Lang.menu[64].Value;
					if (selectedMenu == num34)
					{
						SoundEngine.PlaySound(10);
						selColor = mouseColor;
						mouseColorSlider.SetHSL(mouseColor);
						menuMode = 25;
					}
					num34++;
					array9[num34] = Lang.menu[217].Value;
					if (selectedMenu == num34)
					{
						SoundEngine.PlaySound(10);
						selColor = MouseBorderColor;
						mouseBorderColorSlider.SetHSL(mouseColor);
						menuMode = 252;
					}
					num34++;
					array9[num34] = (cSmartCursorModeIsToggleAndNotHold ? Lang.menu[121].Value : Lang.menu[122].Value);
					if (selectedMenu == num34)
					{
						SoundEngine.PlaySound(12);
						cSmartCursorModeIsToggleAndNotHold = !cSmartCursorModeIsToggleAndNotHold;
					}
					num34++;
					array9[num34] = (Player.SmartCursorSettings.SmartAxeAfterPickaxe ? Lang.menu[214].Value : Lang.menu[213].Value);
					if (selectedMenu == num34)
					{
						SoundEngine.PlaySound(12);
						Player.SmartCursorSettings.SmartAxeAfterPickaxe = !Player.SmartCursorSettings.SmartAxeAfterPickaxe;
					}
					num34++;
					array9[num34] = (Player.SmartCursorSettings.SmartBlocksEnabled ? Lang.menu[215].Value : Lang.menu[216].Value);
					if (selectedMenu == num34)
					{
						SoundEngine.PlaySound(12);
						Player.SmartCursorSettings.SmartBlocksEnabled = !Player.SmartCursorSettings.SmartBlocksEnabled;
					}
					num34++;
					switch (LockOnHelper.UseMode)
					{
					case LockOnHelper.LockOnMode.FocusTarget:
						array9[num34] = Lang.menu[232].Value;
						break;
					case LockOnHelper.LockOnMode.TargetClosest:
						array9[num34] = Lang.menu[233].Value;
						break;
					case LockOnHelper.LockOnMode.ThreeDS:
						array9[num34] = Lang.menu[234].Value;
						break;
					}
					if (selectedMenu == num34)
					{
						SoundEngine.PlaySound(12);
						LockOnHelper.CycleUseModes();
					}
					num34++;
					array9[num34] = Lang.menu[5].Value;
					if (selectedMenu == num34 || flag5)
					{
						flag5 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 25)
				{
					flag = true;
					num9 = 320;
					num2 = 200;
					num4 = 10;
					mouseColor = selColor;
					mouseColorSlider.SetHSL(mouseColor);
					num5 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[64].Value;
					array[1] = true;
					array4[2] = 250;
					array4[1] = 10;
					array9[2] = Lang.menu[5].Value;
					if (selectedMenu == 2 || flag5)
					{
						flag5 = false;
						menuMode = 1125;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 252)
				{
					flag = true;
					num9 = 320;
					num2 = 200;
					num4 = 10;
					MouseBorderColor = selColor;
					mouseBorderColorSlider.SetHSL(mouseColor);
					num5 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[217].Value;
					array[1] = true;
					array4[2] = 250;
					array4[1] = 10;
					array9[2] = Lang.menu[5].Value;
					if (selectedMenu == 2 || flag5)
					{
						flag5 = false;
						menuMode = 1125;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 26)
				{
					flag2 = true;
					num2 = 200;
					num4 = 10;
					num5 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[65].Value;
					array[1] = true;
					array4[2] = 250;
					array4[1] = 10;
					array9[2] = Lang.menu[5].Value;
					if (selectedMenu == 2 || flag5)
					{
						flag5 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 28)
				{
					caveParallax = 1f - (float)bgScroll / 500f;
					flag3 = true;
					num2 = 240;
					num4 = 60;
					num5 = 3;
					array9[0] = "";
					array9[1] = Lang.menu[52].Value;
					array[1] = true;
					array4[2] = 170;
					array4[1] = 10;
					array9[2] = Lang.menu[5].Value;
					if (selectedMenu == 2 || flag5)
					{
						flag5 = false;
						menuMode = 1111;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 272727)
				{
					num2 = 200;
					num4 = 30;
					num5 = 14;
					string[] array10 = new string[12]
					{
						cMapStyle,
						cMapFull,
						cMapZoomIn,
						cMapZoomOut,
						cMapAlphaUp,
						cMapAlphaDown,
						null,
						null,
						null,
						null,
						null,
						null
					};
					if (setKey >= 0)
					{
						array10[setKey] = "_";
					}
					array9[0] = Lang.menu[106].Value + array10[0];
					array9[1] = Lang.menu[107].Value + array10[1];
					array9[2] = Lang.menu[108].Value + array10[2];
					array9[3] = Lang.menu[109].Value + array10[3];
					array9[4] = Lang.menu[110].Value + array10[4];
					array9[5] = Lang.menu[111].Value + array10[5];
					for (int num35 = 0; num35 < 6; num35++)
					{
						array8[num35] = true;
						array7[num35] = 0.55f;
						array5[num35] = -140;
					}
					array7[6] = 0.8f;
					array7[6] = 0.8f;
					array4[6] = 6;
					array9[6] = Lang.menu[86].Value;
					array4[7] = 16;
					array9[7] = Lang.menu[5].Value;
					if (selectedMenu == 7 || flag5)
					{
						flag5 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
					else if (selectedMenu == 6)
					{
						cMapStyle = "Tab";
						cMapFull = "M";
						cMapZoomIn = "Add";
						cMapZoomOut = "Subtract";
						cMapAlphaUp = "PageUp";
						cMapAlphaDown = "PageDown";
						setKey = -1;
						SoundEngine.PlaySound(11);
					}
					else if (selectedMenu >= 0)
					{
						setKey = selectedMenu;
					}
					if (setKey >= 0)
					{
						List<Microsoft.Xna.Framework.Input.Keys> pressedKeys = PlayerInput.GetPressedKeys();
						if (pressedKeys.Count > 0)
						{
							string a = string.Concat(pressedKeys[0]);
							if (a != "None")
							{
								if (setKey == 0)
								{
									cMapStyle = a;
								}
								if (setKey == 1)
								{
									cMapFull = a;
								}
								if (setKey == 2)
								{
									cMapZoomIn = a;
								}
								if (setKey == 3)
								{
									cMapZoomOut = a;
								}
								if (setKey == 4)
								{
									cMapAlphaUp = a;
								}
								if (setKey == 5)
								{
									cMapAlphaDown = a;
								}
								setKey = -1;
							}
						}
					}
				}
				else if (menuMode == 27)
				{
					num2 = 176;
					num4 = 22;
					num5 = 16;
					string[] array11 = new string[14]
					{
						cUp,
						cDown,
						cLeft,
						cRight,
						cJump,
						cThrowItem,
						cInv,
						cHeal,
						cMana,
						cBuff,
						cHook,
						cTorch,
						cSmart,
						cMount
					};
					if (setKey >= 0)
					{
						array11[setKey] = "_";
					}
					array9[0] = Lang.menu[74].Value + array11[0];
					array9[1] = Lang.menu[75].Value + array11[1];
					array9[2] = Lang.menu[76].Value + array11[2];
					array9[3] = Lang.menu[77].Value + array11[3];
					array9[4] = Lang.menu[78].Value + array11[4];
					array9[5] = Lang.menu[79].Value + array11[5];
					array9[6] = Lang.menu[80].Value + array11[6];
					array9[7] = Lang.menu[81].Value + array11[7];
					array9[8] = Lang.menu[82].Value + array11[8];
					array9[9] = Lang.menu[83].Value + array11[9];
					array9[10] = Lang.menu[84].Value + array11[10];
					array9[11] = Lang.menu[85].Value + array11[11];
					array9[12] = Lang.menu[120].Value + array11[12];
					array9[13] = Lang.menu[130].Value + array11[13];
					for (int num36 = 0; num36 < 14; num36++)
					{
						array8[num36] = true;
						array7[num36] = 0.45f;
						array5[num36] = -80;
					}
					array7[14] = 0.8f;
					array4[14] = 6;
					array9[14] = Lang.menu[86].Value;
					array7[15] = 0.8f;
					array4[15] = 16;
					array9[15] = Lang.menu[5].Value;
					if (selectedMenu == 15 || flag5)
					{
						flag5 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
					else if (selectedMenu == 14)
					{
						ResetKeyBindings();
						setKey = -1;
						SoundEngine.PlaySound(11);
					}
					else if (selectedMenu >= 0)
					{
						setKey = selectedMenu;
					}
					if (setKey >= 0)
					{
						List<Microsoft.Xna.Framework.Input.Keys> pressedKeys2 = PlayerInput.GetPressedKeys();
						if (pressedKeys2.Count > 0)
						{
							string a2 = string.Concat(pressedKeys2[0]);
							if (a2 != "None")
							{
								if (setKey == 0)
								{
									cUp = a2;
								}
								if (setKey == 1)
								{
									cDown = a2;
								}
								if (setKey == 2)
								{
									cLeft = a2;
								}
								if (setKey == 3)
								{
									cRight = a2;
								}
								if (setKey == 4)
								{
									cJump = a2;
								}
								if (setKey == 5)
								{
									cThrowItem = a2;
								}
								if (setKey == 6)
								{
									cInv = a2;
								}
								if (setKey == 7)
								{
									cHeal = a2;
								}
								if (setKey == 8)
								{
									cMana = a2;
								}
								if (setKey == 9)
								{
									cBuff = a2;
								}
								if (setKey == 10)
								{
									cHook = a2;
								}
								if (setKey == 11)
								{
									cTorch = a2;
								}
								if (setKey == 12)
								{
									cSmart = a2;
								}
								if (setKey == 13)
								{
									cMount = a2;
								}
								setKey = -1;
							}
						}
					}
				}
				else if (menuMode == 1127)
				{
					num2 = 250;
					num4 = 52;
					num5 = 4;
					array4[num5 - 1] = 18;
					for (int num37 = 0; num37 < num5; num37++)
					{
						array7[num37] = 0.78f;
					}
					int num38 = 0;
					array9[num38] = (ReversedUpDownArmorSetBonuses ? Lang.menu[220].Value : Lang.menu[221].Value);
					if (selectedMenu == num38)
					{
						SoundEngine.PlaySound(12);
						ReversedUpDownArmorSetBonuses = !ReversedUpDownArmorSetBonuses;
					}
					num38++;
					array9[num38] = (ItemSlot.Options.DisableLeftShiftTrashCan ? Lang.menu[224].Value : Lang.menu[223].Value);
					if (selectedMenu == num38)
					{
						SoundEngine.PlaySound(12);
						ItemSlot.Options.DisableLeftShiftTrashCan = !ItemSlot.Options.DisableLeftShiftTrashCan;
					}
					num38++;
					array9[num38] = Lang.menu[222].Value;
					if (selectedMenu == num38)
					{
						SoundEngine.PlaySound(10);
						MenuUI.SetState(ManageControlsMenu);
						menuMode = 888;
					}
					num38++;
					array9[num38] = Lang.menu[5].Value;
					if (selectedMenu == num38 || flag5)
					{
						flag5 = false;
						menuMode = 11;
						SoundEngine.PlaySound(11);
					}
				}
				else if (menuMode == 12)
				{
					int num39 = ((SocialAPI.Network != null) ? 1 : 0);
					menuServer = false;
					array9[0] = Lang.menu[(SocialAPI.Network != null) ? 146 : 87].Value;
					array9[1] = Lang.menu[145].Value;
					array9[1 + num39] = Lang.menu[88].Value;
					array9[2 + num39] = Lang.menu[5].Value;
					if (selectedMenu == 0)
					{
						LoadPlayers();
						menuMultiplayer = true;
						SoundEngine.PlaySound(10);
						ClearPendingPlayerSelectCallbacks();
						menuMode = 1;
					}
					else if (selectedMenu == 1 + num39)
					{
						LoadPlayers();
						SoundEngine.PlaySound(10);
						ClearPendingPlayerSelectCallbacks();
						menuMode = 1;
						menuMultiplayer = true;
						menuServer = true;
					}
					else if (selectedMenu == 1)
					{
						SoundEngine.PlaySound(10);
						SocialAPI.Friends.OpenJoinInterface();
					}
					else if (selectedMenu == 2 + num39 || flag5)
					{
						flag5 = false;
						SoundEngine.PlaySound(11);
						menuMode = 0;
					}
					num5 = 3 + num39;
				}
				else if (menuMode == 13)
				{
					string a3 = getIP;
					PlayerInput.WritingText = true;
					flag5 = false;
					instance.HandleIME();
					getIP = GetInputText(getIP);
					if (a3 != getIP)
					{
						SoundEngine.PlaySound(12);
					}
					array9[0] = Lang.menu[89].Value;
					array2[9] = true;
					if (getIP != "")
					{
						if (getIP.Substring(0, 1) == " ")
						{
							getIP = "";
						}
						for (int num40 = 0; num40 < getIP.Length; num40++)
						{
							if (getIP != " ")
							{
								array2[9] = false;
							}
						}
					}
					textBlinkerCount++;
					if (textBlinkerCount >= 20)
					{
						if (textBlinkerState == 0)
						{
							textBlinkerState = 1;
						}
						else
						{
							textBlinkerState = 0;
						}
						textBlinkerCount = 0;
					}
					array9[1] = getIP;
					if (textBlinkerState == 1)
					{
						array9[1] += "|";
						array5[1] = 1;
					}
					else
					{
						array9[1] += " ";
					}
					array[0] = true;
					array[1] = true;
					array4[9] = 44;
					array4[10] = 64;
					array9[9] = Lang.menu[4].Value;
					array9[10] = Lang.menu[5].Value;
					num5 = 11;
					num2 = 180;
					num4 = 30;
					array4[1] = 19;
					for (int num41 = 2; num41 < 9; num41++)
					{
						int num42 = num41 - 2;
						if (recentWorld[num42] != null && recentWorld[num42] != "")
						{
							array9[num41] = recentWorld[num42] + " (" + recentIP[num42] + ":" + recentPort[num42] + ")";
						}
						else
						{
							array9[num41] = "";
							array[num41] = true;
						}
						array7[num41] = 0.6f;
						array4[num41] = 40;
					}
					if (selectedMenu >= 2 && selectedMenu < 9)
					{
						autoPass = false;
						int num43 = selectedMenu - 2;
						Netplay.ListenPort = recentPort[num43];
						getIP = recentIP[num43];
						Netplay.SetRemoteIPAsync(getIP, StartClientGameplay);
						menuMode = 14;
						statusText = Language.GetTextValue("Net.ConnectingTo", getIP);
					}
					if (selectedMenu == 10 || flag5)
					{
						flag5 = false;
						SoundEngine.PlaySound(11);
						menuMode = 1;
					}
					if (selectedMenu == 9 || (!array2[2] && inputTextEnter))
					{
						SoundEngine.PlaySound(12);
						menuMode = 131;
						clrInput();
					}
				}
				else if (menuMode == 131)
				{
					int num44 = 7777;
					PlayerInput.WritingText = true;
					flag5 = false;
					instance.HandleIME();
					string a4 = getPort;
					getPort = GetInputText(getPort);
					if (a4 != getPort)
					{
						SoundEngine.PlaySound(12);
					}
					array9[0] = Lang.menu[90].Value;
					array2[2] = true;
					if (getPort != "")
					{
						bool flag7 = false;
						try
						{
							num44 = Convert.ToInt32(getPort);
							if (num44 > 0 && num44 <= 65535)
							{
								flag7 = true;
							}
						}
						catch
						{
						}
						if (flag7)
						{
							array2[2] = false;
						}
					}
					textBlinkerCount++;
					if (textBlinkerCount >= 20)
					{
						if (textBlinkerState == 0)
						{
							textBlinkerState = 1;
						}
						else
						{
							textBlinkerState = 0;
						}
						textBlinkerCount = 0;
					}
					array9[1] = getPort;
					if (textBlinkerState == 1)
					{
						array9[1] += "|";
						array5[1] = 1;
					}
					else
					{
						array9[1] += " ";
					}
					array[0] = true;
					array[1] = true;
					array4[1] = -20;
					array4[2] = 20;
					array9[2] = Lang.menu[4].Value;
					array9[3] = Lang.menu[5].Value;
					num5 = 4;
					if (selectedMenu == 3 || flag5)
					{
						flag5 = false;
						SoundEngine.PlaySound(11);
						menuMode = 1;
					}
					if (selectedMenu == 2 || (!array2[2] && inputTextEnter))
					{
						Netplay.ListenPort = num44;
						autoPass = false;
						Netplay.SetRemoteIPAsync(getIP, StartClientGameplay);
						menuMode = 14;
						statusText = Language.GetTextValue("Net.ConnectingTo", getIP);
					}
				}
				else if (menuMode == 16)
				{
					num2 = 200;
					num4 = 60;
					array4[1] = 30;
					array4[2] = 30;
					array4[3] = 30;
					array4[4] = 70;
					array9[0] = Lang.menu[91].Value;
					array[0] = true;
					array9[1] = Lang.menu[92].Value;
					array9[2] = Lang.menu[93].Value;
					array9[3] = Lang.menu[94].Value;
					array9[4] = Lang.menu[5].Value;
					num5 = 5;
					if (selectedMenu == 4 || flag5)
					{
						flag5 = false;
						menuMode = 6;
						SoundEngine.PlaySound(11);
					}
					else if (selectedMenu > 0)
					{
						if (selectedMenu == 1)
						{
							maxTilesX = 4200;
							maxTilesY = 1200;
						}
						else if (selectedMenu == 2)
						{
							maxTilesX = 6400;
							maxTilesY = 1800;
						}
						else
						{
							maxTilesX = 8400;
							maxTilesY = 2400;
						}
						clrInput();
						menuMode = -7;
						SoundEngine.PlaySound(10);
						WorldGen.setWorldSize();
					}
				}
				else if (menuMode == 1000000)
				{
					num5 = 2;
					array9[0] = statusText;
					array[0] = true;
					num2 = 220;
					num4 = 250;
					array9[1] = Lang.menu[5].Value;
					if (selectedMenu == 1 || flag5)
					{
						flag5 = false;
						SoundEngine.PlaySound(11);
						menuMode = 6;
						netMode = 0;
					}
				}
			}
			if (menuMode == 888)
			{
				if (!_blockFancyUIWhileLoading)
				{
					MenuUI.Draw(spriteBatch, gameTime);
				}
			}
			else
			{
				MenuUI.SetState(null);
			}
			if (UILinkPointNavigator.Shortcuts.BackButtonInUse && !flag5)
			{
				UILinkPointNavigator.Shortcuts.BackButtonLock = true;
			}
			int num45 = focusMenu;
			if (menuMode != num6)
			{
				if (menuMode == 10)
				{
					gameTips.ClearTips();
				}
				blockMouse = true;
				menuSkip = 0;
				num5 = 0;
				if (PlayerInput.UsingGamepad && InvisibleCursorForGamepad)
				{
					num45 = (focusMenu = -1);
					mouseX = (mouseY = (PlayerInput.MouseX = (PlayerInput.MouseY = 0)));
				}
				for (int num46 = 0; num46 < maxMenuItems; num46++)
				{
					menuItemScale[num46] = 0.8f;
				}
			}
			if (!mouseLeft)
			{
				blockMouse = true;
			}
			selectedMenu = -1;
			selectedMenu2 = -1;
			focusMenu = -1;
			bool flag8 = mouseLeft && !PlayerInput.UsingGamepad;
			if (!flag)
			{
				grabColorSlider = 0;
				hBar = -1f;
				sBar = -1f;
				lBar = -1f;
				aBar = -1f;
			}
			if (flag)
			{
				if (!mouseLeft)
				{
					grabColorSlider = 0;
					blockMouse = false;
				}
				int num47 = focusColor;
				focusColor = 0;
				int num48 = num9;
				int num49 = screenWidth / 2 - TextureAssets.Hue.Width() / 2;
				int num50 = 167;
				Vector3 vector = rgbToHsl(selColor);
				float num51 = vector.X;
				float num52 = vector.Y;
				float luminosity = vector.Z;
				float num53 = (float)(int)selColor.A / 255f;
				if (hBar == -1f || sBar == -1f || lBar == -1f || aBar == -1f)
				{
					hBar = num51;
					sBar = num52;
					lBar = luminosity;
					aBar = num53;
				}
				else
				{
					num51 = hBar;
					num52 = sBar;
					luminosity = lBar;
					num53 = aBar;
				}
				spriteBatch.Draw(TextureAssets.Hue.Value, new Vector2(num49, num48), Microsoft.Xna.Framework.Color.White);
				if ((mouseX > num49 - 4 && mouseX < num49 + TextureAssets.Hue.Width() + 4 && mouseY > num48 - 4 && mouseY < num48 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 1)
				{
					spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2(num49, num48), OurFavoriteColor);
				}
				spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num49 + (float)(TextureAssets.Hue.Width() - 2) * hBar - (float)(TextureAssets.ColorSlider.Width() / 2), num48 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2), Microsoft.Xna.Framework.Color.White);
				if ((mouseX > num49 - 4 && mouseX < num49 + TextureAssets.Hue.Width() + 4 && mouseY > num48 - 4 && mouseY < num48 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 1)
				{
					focusColor = 1;
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 5;
					if (flag8 && !blockMouse)
					{
						grabColorSlider = 1;
						num51 = mouseX - num49;
						num51 /= (float)TextureAssets.Hue.Width();
						if (num51 < 0f)
						{
							num51 = 0f;
						}
						if (num51 > 1f)
						{
							num51 = 1f;
						}
						hBar = num51;
					}
				}
				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2(num49, num48) + TextureAssets.ColorBar.Value.Size() / 2f);
				num48 += 26;
				spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2(num49, num48), Microsoft.Xna.Framework.Color.White);
				for (int num54 = 0; num54 <= num50; num54++)
				{
					float saturation = (float)num54 / (float)num50;
					Microsoft.Xna.Framework.Color color4 = hslToRgb(num51, saturation, luminosity);
					spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2(num49 + num54 + 5, num48 + 4), color4);
				}
				if ((mouseX > num49 - 4 && mouseX < num49 + TextureAssets.Hue.Width() + 4 && mouseY > num48 - 4 && mouseY < num48 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 2)
				{
					spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2(num49, num48), OurFavoriteColor);
				}
				spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num49 + (float)(TextureAssets.Hue.Width() - 2) * sBar - (float)(TextureAssets.ColorSlider.Width() / 2), num48 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2), Microsoft.Xna.Framework.Color.White);
				if ((mouseX > num49 - 4 && mouseX < num49 + TextureAssets.Hue.Width() + 4 && mouseY > num48 - 4 && mouseY < num48 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 2)
				{
					focusColor = 2;
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 6;
					if (flag8 && !blockMouse)
					{
						grabColorSlider = 2;
						num52 = mouseX - num49;
						num52 /= (float)TextureAssets.Hue.Width();
						if (num52 < 0f)
						{
							num52 = 0f;
						}
						if (num52 > 1f)
						{
							num52 = 1f;
						}
						sBar = num52;
					}
				}
				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2(num49, num48) + TextureAssets.ColorBar.Value.Size() / 2f);
				num48 += 26;
				spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2(num49, num48), Microsoft.Xna.Framework.Color.White);
				float num55 = 0.15f;
				if (menuMode == 252)
				{
					num55 = 0f;
				}
				for (int num56 = 0; num56 <= num50; num56++)
				{
					float luminosity2 = (float)num56 / (float)num50;
					Microsoft.Xna.Framework.Color color5 = hslToRgb(num51, num52, luminosity2);
					spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2(num49 + num56 + 5, num48 + 4), color5);
				}
				if ((mouseX > num49 - 4 && mouseX < num49 + TextureAssets.Hue.Width() + 4 && mouseY > num48 - 4 && mouseY < num48 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 3)
				{
					spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2(num49, num48), OurFavoriteColor);
				}
				spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num49 + (float)(TextureAssets.Hue.Width() - 2) * ((lBar - num55) / (1f - num55)) - (float)(TextureAssets.ColorSlider.Width() / 2), num48 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2), Microsoft.Xna.Framework.Color.White);
				if ((mouseX > num49 - 4 && mouseX < num49 + TextureAssets.Hue.Width() + 4 && mouseY > num48 - 4 && mouseY < num48 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 3)
				{
					focusColor = 3;
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 7;
					if (flag8 && !blockMouse)
					{
						grabColorSlider = 3;
						luminosity = mouseX - num49;
						luminosity /= (float)TextureAssets.Hue.Width();
						if (luminosity < 0f)
						{
							luminosity = 0f;
						}
						if (luminosity > 1f)
						{
							luminosity = 1f;
						}
						luminosity = (lBar = luminosity * (1f - num55) + num55);
					}
				}
				GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2(num49, num48) + TextureAssets.ColorBar.Value.Size() / 2f);
				bool flag9 = false;
				if (menuMode == 252)
				{
					num48 += 26;
					flag9 = true;
					spriteBatch.Draw(TextureAssets.ColorBar.Value, new Vector2(num49, num48), Microsoft.Xna.Framework.Color.White);
					Microsoft.Xna.Framework.Color value3 = hslToRgb(num51, num52, luminosity);
					for (int num57 = 0; num57 <= num50; num57++)
					{
						float scale = (float)num57 / (float)num50;
						Microsoft.Xna.Framework.Color color6 = value3 * scale;
						spriteBatch.Draw(TextureAssets.ColorBlip.Value, new Vector2(num49 + num57 + 5, num48 + 4), color6);
					}
					if ((mouseX > num49 - 4 && mouseX < num49 + TextureAssets.Hue.Width() + 4 && mouseY > num48 - 4 && mouseY < num48 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 4)
					{
						spriteBatch.Draw(TextureAssets.ColorHighlight.Value, new Vector2(num49, num48), OurFavoriteColor);
					}
					spriteBatch.Draw(TextureAssets.ColorSlider.Value, new Vector2((float)num49 + (float)(TextureAssets.Hue.Width() - 2) * aBar - (float)(TextureAssets.ColorSlider.Width() / 2), num48 - TextureAssets.ColorSlider.Height() / 2 + TextureAssets.Hue.Height() / 2), Microsoft.Xna.Framework.Color.White);
					if ((mouseX > num49 - 4 && mouseX < num49 + TextureAssets.Hue.Width() + 4 && mouseY > num48 - 4 && mouseY < num48 + TextureAssets.Hue.Height() + 4 && grabColorSlider == 0) || grabColorSlider == 4)
					{
						focusColor = 4;
						UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 8;
						if (mouseLeft && !blockMouse)
						{
							grabColorSlider = 4;
							num53 = mouseX - num49;
							num53 /= (float)TextureAssets.Hue.Width();
							if (num53 < 0f)
							{
								num53 = 0f;
							}
							if (num53 > 1f)
							{
								num53 = 1f;
							}
							aBar = num53;
						}
					}
					GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2(num49, num48) + TextureAssets.ColorBar.Value.Size() / 2f);
				}
				if (num47 != focusColor)
				{
					SoundEngine.PlaySound(12);
				}
				selColor = hslToRgb(hBar, sBar, lBar);
				if (flag9)
				{
					selColor.A = (byte)(aBar * 255f);
				}
			}
			else if (flag)
			{
				string text = "";
				for (int num58 = 0; num58 < 6; num58++)
				{
					int num59 = num9;
					int num60 = 370 + screenWidth / 2 - 400;
					if (num58 == 0)
					{
						text = Lang.menu[95].Value;
					}
					if (num58 == 1)
					{
						text = Lang.menu[96].Value;
						num59 += 30;
					}
					if (num58 == 2)
					{
						text = Lang.menu[97].Value;
						num59 += 60;
					}
					if (num58 == 3)
					{
						text = string.Concat(selColor.R);
						num60 += 90;
					}
					if (num58 == 4)
					{
						text = string.Concat(selColor.G);
						num60 += 90;
						num59 += 30;
					}
					if (num58 == 5)
					{
						text = string.Concat(selColor.B);
						num60 += 90;
						num59 += 60;
					}
					for (int num61 = 0; num61 < 5; num61++)
					{
						Microsoft.Xna.Framework.Color color7 = Microsoft.Xna.Framework.Color.Black;
						if (num61 == 4)
						{
							color7 = color;
							color7.R = (byte)((255 + color7.R) / 2);
							color7.G = (byte)((255 + color7.R) / 2);
							color7.B = (byte)((255 + color7.R) / 2);
						}
						int num62 = 255;
						int num63 = color7.R - (255 - num62);
						if (num63 < 0)
						{
							num63 = 0;
						}
						color7 = new Microsoft.Xna.Framework.Color((byte)num63, (byte)num63, (byte)num63, (byte)num62);
						int num64 = 0;
						int num65 = 0;
						if (num61 == 0)
						{
							num64 = -2;
						}
						if (num61 == 1)
						{
							num64 = 2;
						}
						if (num61 == 2)
						{
							num65 = -2;
						}
						if (num61 == 3)
						{
							num65 = 2;
						}
						DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.DeathText.Value, text, new Vector2(num60 + num64, num59 + num65), color7, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
					}
				}
				bool flag10 = false;
				for (int num66 = 0; num66 < 2; num66++)
				{
					for (int num67 = 0; num67 < 3; num67++)
					{
						int num68 = num9 + num67 * 30 - 12;
						int num69 = 360 + screenWidth / 2 - 400;
						float num70 = 0.9f;
						if (num66 == 0)
						{
							num69 -= 70;
							num68 += 2;
						}
						else
						{
							num69 -= 40;
						}
						text = "-";
						if (num66 == 1)
						{
							text = "+";
						}
						Vector2 vector2 = new Vector2(24f, 24f);
						int num71 = 142;
						if (mouseX > num69 && (float)mouseX < (float)num69 + vector2.X && mouseY > num68 + 13 && (float)mouseY < (float)(num68 + 13) + vector2.Y)
						{
							if (focusColor != (num66 + 1) * (num67 + 10))
							{
								SoundEngine.PlaySound(12);
							}
							focusColor = (num66 + 1) * (num67 + 10);
							flag10 = true;
							num71 = 255;
							if (mouseLeft)
							{
								if (colorDelay <= 1)
								{
									if (colorDelay == 0)
									{
										colorDelay = 40;
									}
									else
									{
										colorDelay = 3;
									}
									int num72 = num66;
									if (num66 == 0)
									{
										num72 = -1;
										if (selColor.R + selColor.G + selColor.B <= 150)
										{
											num72 = 0;
										}
									}
									if (num67 == 0 && selColor.R + num72 >= 0 && selColor.R + num72 <= 255)
									{
										selColor.R = (byte)(selColor.R + num72);
									}
									if (num67 == 1 && selColor.G + num72 >= 0 && selColor.G + num72 <= 255)
									{
										selColor.G = (byte)(selColor.G + num72);
									}
									if (num67 == 2 && selColor.B + num72 >= 0 && selColor.B + num72 <= 255)
									{
										selColor.B = (byte)(selColor.B + num72);
									}
								}
								colorDelay--;
							}
							else
							{
								colorDelay = 0;
							}
						}
						for (int num73 = 0; num73 < 5; num73++)
						{
							Microsoft.Xna.Framework.Color color8 = Microsoft.Xna.Framework.Color.Black;
							if (num73 == 4)
							{
								color8 = color;
								color8.R = (byte)((255 + color8.R) / 2);
								color8.G = (byte)((255 + color8.R) / 2);
								color8.B = (byte)((255 + color8.R) / 2);
							}
							int num74 = color8.R - (255 - num71);
							if (num74 < 0)
							{
								num74 = 0;
							}
							color8 = new Microsoft.Xna.Framework.Color((byte)num74, (byte)num74, (byte)num74, (byte)num71);
							int num75 = 0;
							int num76 = 0;
							if (num73 == 0)
							{
								num75 = -2;
							}
							if (num73 == 1)
							{
								num75 = 2;
							}
							if (num73 == 2)
							{
								num76 = -2;
							}
							if (num73 == 3)
							{
								num76 = 2;
							}
							DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.DeathText.Value, text, new Vector2(num69 + num75, num68 + num76), color8, 0f, default(Vector2), num70, SpriteEffects.None, 0f);
						}
					}
				}
				if (!flag10)
				{
					focusColor = 0;
					colorDelay = 0;
				}
			}
			if (flag2)
			{
				float x = screenWidth / 2 - 40 + 37;
				int num77 = 320;
				string text2 = "";
				for (int num78 = 0; num78 < 6; num78++)
				{
					int num79 = num77;
					int num80 = 370 + screenWidth / 2 - 400 + 37;
					switch (num78)
					{
					case 0:
						text2 = Lang.menu[98].Value;
						num79 += 30;
						break;
					case 1:
						text2 = Lang.menu[99].Value;
						break;
					case 2:
						text2 = Lang.menu[119].Value;
						num79 += 60;
						break;
					case 3:
						text2 = Math.Round(musicVolume * 100f) + "%";
						num80 += 90;
						break;
					case 4:
						text2 = Math.Round(soundVolume * 100f) + "%";
						num80 += 90;
						num79 += 30;
						break;
					case 5:
						text2 = Math.Round(ambientVolume * 100f) + "%";
						num80 += 90;
						num79 += 60;
						break;
					}
					Microsoft.Xna.Framework.Color color9 = color;
					color9.R = (byte)((255 + color9.R) / 2);
					color9.G = (byte)((255 + color9.R) / 2);
					color9.B = (byte)((255 + color9.R) / 2);
					int num81 = 255;
					int num82 = color9.R - (255 - num81);
					if (num82 < 0)
					{
						num82 = 0;
					}
					Utils.DrawBorderStringFourWay(textColor: new Microsoft.Xna.Framework.Color((byte)num82, (byte)num82, (byte)num82, (byte)num81), sb: spriteBatch, font: FontAssets.DeathText.Value, text: text2, x: num80, y: num79, borderColor: Microsoft.Xna.Framework.Color.Black, origin: Vector2.Zero, scale: 0.5f);
				}
				int rightHover = IngameOptions.rightHover;
				IngameOptions.rightHover = -1;
				if (!mouseLeft)
				{
					IngameOptions.rightLock = -1;
				}
				IngameOptions.valuePosition = new Vector2(x, num77 - 18 + 30);
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
				float num83 = IngameOptions.DrawValueBar(spriteBatch, 1f, musicVolume);
				if (IngameOptions.inBar || IngameOptions.rightLock == 3)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 2;
					IngameOptions.rightHover = 3;
					if (flag8 && IngameOptions.rightLock == 3)
					{
						musicVolume = num83;
					}
				}
				IngameOptions.valuePosition = new Vector2(x, num77 - 18 + 60);
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
				float num84 = IngameOptions.DrawValueBar(spriteBatch, 1f, soundVolume);
				if (IngameOptions.inBar || IngameOptions.rightLock == 2)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 3;
					IngameOptions.rightHover = 2;
					if (flag8 && IngameOptions.rightLock == 2)
					{
						soundVolume = num84;
					}
				}
				IngameOptions.valuePosition = new Vector2(x, num77 - 18 + 90);
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
				float num85 = IngameOptions.DrawValueBar(spriteBatch, 1f, ambientVolume);
				if (IngameOptions.inBar || IngameOptions.rightLock == 4)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 4;
					IngameOptions.rightHover = 4;
					if (flag8 && IngameOptions.rightLock == 4)
					{
						ambientVolume = num85;
					}
				}
				if (IngameOptions.rightHover != -1)
				{
					IngameOptions.rightLock = IngameOptions.rightHover;
				}
				if (IngameOptions.rightHover != rightHover)
				{
					SoundEngine.PlaySound(12);
				}
			}
			if (flag3)
			{
				int num86 = 400;
				string text3 = "";
				for (int num87 = 0; num87 < 4; num87++)
				{
					int num88 = num86;
					int num89 = 370 + screenWidth / 2 - 400;
					if (num87 == 0)
					{
						text3 = Lang.menu[52].Value + ": " + bgScroll;
					}
					for (int num90 = 0; num90 < 5; num90++)
					{
						Microsoft.Xna.Framework.Color color10 = Microsoft.Xna.Framework.Color.Black;
						if (num90 == 4)
						{
							color10 = color;
							color10.R = (byte)((255 + color10.R) / 2);
							color10.G = (byte)((255 + color10.R) / 2);
							color10.B = (byte)((255 + color10.R) / 2);
						}
						int num91 = 255;
						int num92 = color10.R - (255 - num91);
						if (num92 < 0)
						{
							num92 = 0;
						}
						color10 = new Microsoft.Xna.Framework.Color((byte)num92, (byte)num92, (byte)num92, (byte)num91);
						int num93 = 0;
						int num94 = 0;
						if (num90 == 0)
						{
							num93 = -2;
						}
						if (num90 == 1)
						{
							num93 = 2;
						}
						if (num90 == 2)
						{
							num94 = -2;
						}
						if (num90 == 3)
						{
							num94 = 2;
						}
						DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.DeathText.Value, text3, new Vector2(num89 + num93, num88 + num94), color10, 0f, default(Vector2), 0.5f, SpriteEffects.None, 0f);
					}
				}
				IngameOptions.rightHover = -1;
				if (!mouseLeft)
				{
					IngameOptions.rightLock = -1;
				}
				IngameOptions.valuePosition = new Vector2(screenWidth / 2 - 40, num86 + 12);
				GamepadMainMenuHandler.MenuItemPositions.Add(IngameOptions.valuePosition - TextureAssets.ColorBar.Value.Size() * new Vector2(0.5f, 0f));
				float num95 = IngameOptions.DrawValueBar(spriteBatch, 1f, (float)bgScroll / 100f);
				if (IngameOptions.inBar || IngameOptions.rightLock == 2)
				{
					UILinkPointNavigator.Shortcuts.OPTIONS_BUTTON_SPECIALFEATURE = 1;
					IngameOptions.rightHover = 2;
					if (flag8 && IngameOptions.rightLock == 2)
					{
						bgScroll = (int)(num95 * 100f);
						caveParallax = 1f - (float)bgScroll / 500f;
					}
				}
				if (IngameOptions.rightHover != -1)
				{
					IngameOptions.rightLock = IngameOptions.rightHover;
				}
			}
			bool flag11 = false;
			for (int num96 = 0; num96 < num5; num96++)
			{
				if (array9[num96] == null)
				{
					continue;
				}
				Vector2 vector3 = FontAssets.DeathText.Value.MeasureString(array9[num96]);
				vector3.X *= 0.5f;
				vector3.Y *= 0.5f;
				for (int num97 = 0; num97 < 5; num97++)
				{
					Microsoft.Xna.Framework.Color color11 = Microsoft.Xna.Framework.Color.Black;
					if (num97 == 4)
					{
						switch (array6[num96])
						{
						case 0:
							color11 = color;
							break;
						case 1:
							color11 = mcColor;
							break;
						case 2:
							color11 = hcColor;
							break;
						case 3:
							color11 = highVersionColor;
							break;
						case 4:
						case 5:
						case 6:
							color11 = errorColor;
							break;
						default:
							color11 = color;
							break;
						}
						color11.R = (byte)((255 + color11.R) / 2);
						color11.G = (byte)((255 + color11.G) / 2);
						color11.B = (byte)((255 + color11.B) / 2);
					}
					int num98 = (int)(255f * (menuItemScale[num96] * 2f - 1f));
					if (array[num96])
					{
						num98 = 255;
					}
					int num99 = color11.R - (255 - num98);
					if (num99 < 0)
					{
						num99 = 0;
					}
					int num100 = color11.G - (255 - num98);
					if (num100 < 0)
					{
						num100 = 0;
					}
					int num101 = color11.B - (255 - num98);
					if (num101 < 0)
					{
						num101 = 0;
					}
					if (num45 == num96 && num97 == 4)
					{
						float num102 = (float)num98 / 255f;
						num99 = (int)((float)num99 * (1f - num102) + 255f * num102);
						num100 = (int)((float)num100 * (1f - num102) + 215f * num102);
						num101 = (int)((float)num101 * (1f - num102) + 0f * num102);
					}
					color11 = new Microsoft.Xna.Framework.Color((byte)num99, (byte)num100, (byte)num101, (byte)num98);
					if (array3[num96])
					{
						if (num97 == 4)
						{
							color11.R = (byte)(color11.R * mouseTextColor / 300);
							color11.G = (byte)(color11.G * mouseTextColor / 300);
							color11.B = (byte)(color11.B * mouseTextColor / 300);
							color11.A = (byte)(color11.A * mouseTextColor / 300);
						}
						else
						{
							color11.A -= (byte)((int)mouseTextColor / 5);
						}
					}
					int num103 = 0;
					int num104 = 0;
					if (num97 == 0)
					{
						num103 = -2;
					}
					if (num97 == 1)
					{
						num103 = 2;
					}
					if (num97 == 2)
					{
						num104 = -2;
					}
					if (num97 == 3)
					{
						num104 = 2;
					}
					float num105 = menuItemScale[num96];
					if (menuMode == 15 && num96 == 0)
					{
						num105 *= 0.35f;
					}
					else if (menuMode == 1000000 && num96 == 0)
					{
						num105 *= 0.75f;
					}
					else if (netMode == 2)
					{
						num105 *= 0.5f;
					}
					num105 *= array7[num96];
					if (!array8[num96])
					{
						DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.DeathText.Value, array9[num96], new Vector2(num3 + num103 + array5[num96], (float)(num2 + num4 * num96 + num104) + vector3.Y * array7[num96] + (float)array4[num96]), color11, 0f, vector3, num105, SpriteEffects.None, 0f);
					}
					else
					{
						DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.DeathText.Value, array9[num96], new Vector2(num3 + num103 + array5[num96], (float)(num2 + num4 * num96 + num104) + vector3.Y * array7[num96] + (float)array4[num96]), color11, 0f, new Vector2(0f, vector3.Y), num105, SpriteEffects.None, 0f);
					}
				}
				if (!array[num96] && !array2[num96])
				{
					GamepadMainMenuHandler.MenuItemPositions.Add(new Vector2(num3 + array5[num96], (float)(num2 + num4 * num96) + vector3.Y * array7[num96] + (float)array4[num96]));
				}
				if (!array8[num96])
				{
					int num106 = 0;
					menuWide[num96] = false;
					Vector2 vector4 = FontAssets.DeathText.Value.MeasureString(array9[num96]) * array7[num96];
					if (!((float)mouseX > (float)num3 - vector4.X * 0.5f + (float)array5[num96] - (float)num106) || !((float)mouseX < (float)num3 + vector4.X * 0.5f * array7[num96] + (float)array5[num96] + (float)num106) || mouseY <= num2 + num4 * num96 + array4[num96] || !((float)mouseY < (float)(num2 + num4 * num96 + array4[num96]) + 50f * array7[num96]) || !hasFocus)
					{
						continue;
					}
					focusMenu = num96;
					if (array[num96] || array2[num96])
					{
						focusMenu = -1;
						continue;
					}
					if (num45 != focusMenu)
					{
						flag11 = true;
					}
					if (mouseLeftRelease && mouseLeft)
					{
						selectedMenu = num96;
					}
					if (mouseRightRelease && mouseRight)
					{
						selectedMenu2 = num96;
					}
					continue;
				}
				Vector2 vector5 = FontAssets.DeathText.Value.MeasureString(array9[num96]) * array7[num96];
				if (mouseX <= num3 + array5[num96] || !((float)mouseX < (float)num3 + vector5.X + (float)array5[num96]) || mouseY <= num2 + num4 * num96 + array4[num96] || !((float)mouseY < (float)(num2 + num4 * num96 + array4[num96]) + 50f * array7[num96]) || !hasFocus)
				{
					continue;
				}
				focusMenu = num96;
				if (array[num96] || array2[num96])
				{
					focusMenu = -1;
					continue;
				}
				if (num45 != focusMenu)
				{
					flag11 = true;
				}
				if (mouseLeftRelease && mouseLeft)
				{
					selectedMenu = num96;
				}
				if (mouseRightRelease && mouseRight)
				{
					selectedMenu2 = num96;
				}
			}
			if (flag11 && num45 != focusMenu)
			{
				SoundEngine.PlaySound(12);
			}
			if (GamepadMainMenuHandler.MenuItemPositions.Count == 0)
			{
				Vector2 value4 = new Vector2((float)Math.Cos(GlobalTimeWrappedHourly * ((float)Math.PI * 2f)), (float)Math.Sin(GlobalTimeWrappedHourly * ((float)Math.PI * 2f) * 2f)) * new Vector2(30f, 15f) + Vector2.UnitY * 20f;
				UILinkPointNavigator.SetPosition(2000, new Vector2(screenWidth, screenHeight) / 2f + value4);
			}
			for (int num107 = 0; num107 < maxMenuItems; num107++)
			{
				if (num107 == focusMenu)
				{
					if (menuItemScale[num107] < 1f)
					{
						menuItemScale[num107] += 0.02f;
					}
					if (menuItemScale[num107] > 1f)
					{
						menuItemScale[num107] = 1f;
					}
				}
				else if ((double)menuItemScale[num107] > 0.8)
				{
					menuItemScale[num107] -= 0.02f;
				}
			}
			if (flag4)
			{
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, UIScaleMatrix);
				Player pendingPlayer = PendingPlayer;
				pendingPlayer.PlayerFrame();
				pendingPlayer.position.X = (float)num7 + screenPosition.X;
				pendingPlayer.position.Y = (float)num8 + screenPosition.Y;
				PlayerRenderer.DrawPlayer(Camera, pendingPlayer, pendingPlayer.position, 0f, Vector2.Zero);
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, UIScaleMatrix);
			}
			if (!WorldGen.drunkWorldGen)
			{
				for (int num108 = 0; num108 < 5; num108++)
				{
					Microsoft.Xna.Framework.Color color12 = Microsoft.Xna.Framework.Color.Black;
					if (num108 == 4)
					{
						color12 = color;
						color12.R = (byte)((255 + color12.R) / 2);
						color12.G = (byte)((255 + color12.R) / 2);
						color12.B = (byte)((255 + color12.R) / 2);
					}
					color12.A = (byte)((float)(int)color12.A * 0.3f);
					int num109 = 0;
					int num110 = 0;
					if (num108 == 0)
					{
						num109 = -2;
					}
					if (num108 == 1)
					{
						num109 = 2;
					}
					if (num108 == 2)
					{
						num110 = -2;
					}
					if (num108 == 3)
					{
						num110 = 2;
					}
					Vector2 vector6 = FontAssets.MouseText.Value.MeasureString(versionNumber);
					vector6.X *= 0.5f;
					vector6.Y *= 0.5f;
					DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, versionNumber, new Vector2(vector6.X + (float)num109 + 10f, (float)screenHeight - vector6.Y + (float)num110 - 2f), color12, 0f, vector6, 1f, SpriteEffects.None, 0f);
				}
			}
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, UIScaleMatrix);
			DrawCursor(DrawThickCursor());
			DrawPendingMouseText();
			if (fadeCounter > 0)
			{
				Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
				byte b2 = 0;
				fadeCounter--;
				float num111 = (float)fadeCounter / 120f * 255f;
				if (quickSplash)
				{
					num111 = (float)fadeCounter / 75f * 255f;
				}
				b2 = (byte)num111;
				white = new Microsoft.Xna.Framework.Color(b2, b2, b2, b2);
				spriteBatch.Draw(TextureAssets.Fade.Value, new Microsoft.Xna.Framework.Rectangle(-5, -5, screenWidth + 10, screenHeight + 10), white);
			}
			spriteBatch.End();
			if (mouseLeft)
			{
				mouseLeftRelease = false;
			}
			else
			{
				mouseLeftRelease = true;
			}
			if (mouseRight)
			{
				mouseRightRelease = false;
			}
			else
			{
				mouseRightRelease = true;
			}
			if (menuMode == num)
			{
				GamepadMainMenuHandler.LastDrew = num;
			}
		}

		private static void ClearVisualPostProcessEffects()
		{
			for (int i = 0; i < 13; i++)
			{
				string key = "";
				switch (i)
				{
				case 0:
					key = "Solar";
					break;
				case 1:
					key = "Vortex";
					break;
				case 2:
					key = "Nebula";
					break;
				case 3:
					key = "Stardust";
					break;
				case 4:
					key = "MoonLord";
					break;
				case 5:
					key = "MonolithSolar";
					break;
				case 6:
					key = "MonolithVortex";
					break;
				case 7:
					key = "MonolithNebula";
					break;
				case 8:
					key = "MonolithStardust";
					break;
				case 9:
					key = "Blizzard";
					break;
				case 10:
					key = "HeatDistortion";
					break;
				case 11:
					key = "Sandstorm";
					break;
				case 12:
					key = "MonolithMoonLord";
					break;
				}
				if (SkyManager.Instance[key] != null && SkyManager.Instance[key].IsActive())
				{
					SkyManager.Instance[key].Deactivate();
				}
				if (Overlays.Scene[key] != null && Overlays.Scene[key].IsVisible())
				{
					Overlays.Scene[key].Deactivate();
				}
				if (GameManager.Graphics.Effects.Filters.Scene[key] != null && GameManager.Graphics.Effects.Filters.Scene[key].IsActive())
				{
					GameManager.Graphics.Effects.Filters.Scene[key].Deactivate();
				}
			}
			if (GameManager.Graphics.Effects.Filters.Scene["BloodMoon"].IsActive())
			{
				GameManager.Graphics.Effects.Filters.Scene["BloodMoon"].Deactivate();
			}
			if (GameManager.Graphics.Effects.Filters.Scene["Graveyard"].IsActive())
			{
				GameManager.Graphics.Effects.Filters.Scene["Graveyard"].Deactivate();
			}
			if (GameManager.Graphics.Effects.Filters.Scene["BloodMoon"].IsActive())
			{
				GameManager.Graphics.Effects.Filters.Scene["BloodMoon"].Deactivate();
			}
			if (GameManager.Graphics.Effects.Filters.Scene["MoonLordShake"].IsActive())
			{
				GameManager.Graphics.Effects.Filters.Scene["MoonLordShake"].Deactivate();
			}
			if (GameManager.Graphics.Effects.Filters.Scene["WaterDistortion"].IsActive())
			{
				GameManager.Graphics.Effects.Filters.Scene["WaterDistortion"].Deactivate();
			}
			if (SkyManager.Instance["Martian"].IsActive())
			{
				SkyManager.Instance["Martian"].Deactivate();
			}
			if (SkyManager.Instance["Party"].IsActive())
			{
				SkyManager.Instance["Party"].Deactivate();
			}
			if (SkyManager.Instance["Slime"].IsActive())
			{
				SkyManager.Instance["Slime"].Deactivate();
			}
			if (SkyManager.Instance["Ambience"].IsActive())
			{
				SkyManager.Instance["Ambience"].Deactivate();
			}
			slimeRain = false;
			slimeRainTime = 0.0;
			slimeWarningTime = 0;
			BirthdayParty.WorldClear();
			LanternNight.WorldClear();
			Sandstorm.WorldClear();
			maxRaining = 0f;
			raining = false;
		}

		private static void PostDrawMenu(Microsoft.Xna.Framework.Point screenSizeCache, Microsoft.Xna.Framework.Point screenSizeCacheAfterScaling)
		{
			if (ScreenSize == screenSizeCacheAfterScaling)
			{
				screenPosition.Y -= screenSizeCache.Y - screenHeight;
			}
		}

		private void PreDrawMenu(out Microsoft.Xna.Framework.Point screenSizeCache, out Microsoft.Xna.Framework.Point screenSizeCacheAfterScaling)
		{
			float uiScaleWanted = _uiScaleWanted;
			float num = (float)screenHeight / 900f;
			if (num < 1f)
			{
				num = 1f;
			}
			if (SettingDontScaleMainMenuUp)
			{
				num = 1f;
			}
			screenSizeCache = ScreenSize;
			UIScale = num;
			PlayerInput.SetZoom_UI();
			screenSizeCacheAfterScaling = ScreenSize;
			if (_needsMenuUIRecalculation)
			{
				_needsMenuUIRecalculation = false;
				MenuUI.Recalculate();
			}
			_uiScaleWanted = uiScaleWanted;
		}

		private static bool IsBorderlessDisplayAvailable()
		{
			return true;
		}

		/*private static void SetDisplayModeAsBorderless(int width, int height, Form form)
		{
			if (screenBorderless && !graphics.IsFullScreen && screenBorderlessPendingResizes > 0)
			{
				screenBorderlessPendingResizes--;
				System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
				width = bounds.Width;
				height = bounds.Height;
				TryPickingDefaultUIScale(height);
			}
		}

		private static void ApplyBorderlessResolution(Form form)
		{
			if (screenBorderlessPendingResizes > 0)
			{
				screenBorderlessPendingResizes--;
				System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
				form.Location = new System.Drawing.Point(bounds.X, bounds.Y);
				form.FormBorderStyle = FormBorderStyle.None;
				form.Width = bounds.Width;
				form.Height = bounds.Height;
			}
		}

		private static void SetBorderlessFormStyle(Form form)
		{
			form.Location = new System.Drawing.Point(0, 0);
			form.FormBorderStyle = FormBorderStyle.None;
		}*/

		public static void OpenCharacterSelectUI()
		{
			MenuUI.SetState(_characterSelectMenu);
			menuMode = 888;
		}

		public static void OpenWorldSelectUI()
		{
			MenuUI.SetState(_worldSelectMenu);
			menuMode = 888;
		}

		private static void CycleClothingStyle(Player plr)
		{
			CycleClothingStyle_Inner(plr);
			while (!IsValidPlayerStyle(plr))
			{
				CycleClothingStyle_Inner(plr);
			}
		}

		private static bool IsValidPlayerStyle(Player plr)
		{
			int skinVariant = plr.skinVariant;
			if ((uint)(skinVariant - 10) <= 1u)
			{
				return false;
			}
			return true;
		}

		private static void CycleClothingStyle_Inner(Player plr)
		{
			if (plr.Male)
			{
				int num = 0;
				int[] variantOrderMale = PlayerVariantID.Sets.VariantOrderMale;
				for (int i = 0; i < variantOrderMale.Length; i++)
				{
					if (variantOrderMale[i] == plr.skinVariant)
					{
						num = i;
						break;
					}
				}
				if (num == variantOrderMale.Length - 1)
				{
					plr.skinVariant = variantOrderMale[0];
				}
				else
				{
					plr.skinVariant = variantOrderMale[num + 1];
				}
				return;
			}
			int num2 = 0;
			int[] variantOrderFemale = PlayerVariantID.Sets.VariantOrderFemale;
			for (int j = 0; j < variantOrderFemale.Length; j++)
			{
				if (variantOrderFemale[j] == plr.skinVariant)
				{
					num2 = j;
					break;
				}
			}
			if (num2 == variantOrderFemale.Length - 1)
			{
				plr.skinVariant = variantOrderFemale[0];
			}
			else
			{
				plr.skinVariant = variantOrderFemale[num2 + 1];
			}
		}

		public static void ResetKeyBindings()
		{
			cUp = "W";
			cDown = "S";
			cLeft = "A";
			cRight = "D";
			cJump = "Space";
			cThrowItem = "T";
			cInv = "Escape";
			cHeal = "H";
			cMana = "J";
			cBuff = "B";
			cHook = "E";
			cTorch = "LeftShift";
			cSmart = "LeftControl";
			cMount = "R";
		}

		public static void CursorColor()
		{
			cursorAlpha += (float)cursorColorDirection * 0.015f;
			if (cursorAlpha >= 1f)
			{
				cursorAlpha = 1f;
				cursorColorDirection = -1;
			}
			if ((double)cursorAlpha <= 0.6)
			{
				cursorAlpha = 0.6f;
				cursorColorDirection = 1;
			}
			float num = cursorAlpha * 0.3f + 0.7f;
			byte r = (byte)((float)(int)mouseColor.R * cursorAlpha);
			byte g = (byte)((float)(int)mouseColor.G * cursorAlpha);
			byte b = (byte)((float)(int)mouseColor.B * cursorAlpha);
			byte a = (byte)(255f * num);
			cursorColor = new Microsoft.Xna.Framework.Color(r, g, b, a);
			cursorScale = cursorAlpha * 0.3f + 0.7f + 0.1f;
		}

		protected void DrawSplash(GameTime gameTime)
		{
			int num = 10000;
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
			base.Draw(gameTime);
			TickLoadProcess();
			long num2 = splashTimer.ElapsedMilliseconds;
			if (musicVolume == 0f)
			{
				quickSplash = true;
				num2 = 999999L;
				num = 0;
			}
			if (Assets.PendingAssets == 0 && _musicLoaded && _artLoaded && Activity1.LoadedEverything)
			{
				_isAsyncLoadComplete = true;
			}
			spriteBatch.Begin();
			splashCounter++;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			byte b = 0;
			if (quickSplash)
			{
				if (splashCounter <= 75)
				{
					b = (byte)((float)splashCounter / 75f * 255f);
				}
				else if (splashCounter <= 125)
				{
					b = byte.MaxValue;
				}
				else if (splashCounter <= 200)
				{
					if (!_isAsyncLoadComplete)
					{
						splashCounter = 125;
					}
					b = (byte)((float)(75 - (splashCounter - 125)) / 75f * 255f);
				}
				else
				{
					Initialize_AlmostEverything();
					PostContentLoadInitialize();
					showSplash = false;
					fadeCounter = 75;
					splashTimer.Stop();
				}
			}
			else
			{
				int num3 = 90;
				int num4 = 410;
				int num5 = 620;
				int num6 = 60;
				if (splashCounter >= num3)
				{
					if (splashCounter <= num4)
					{
						float num7 = (float)(splashCounter - num3) / (float)(num4 - num3);
						num7 *= num7 * num7 * num7;
						num7 *= 255f;
						b = (byte)num7;
					}
					else if (splashCounter <= num5)
					{
						b = byte.MaxValue;
						if (splashCounter >= num5 - num6)
						{
							b = (byte)((float)(num6 - (splashCounter - (num5 - num6))) / (float)num6 * 255f);
						}
					}
					else if (!_isAsyncLoadComplete)
					{
						b = 0;
						num = 1;
					}
					else
					{
						Initialize_AlmostEverything();
						PostContentLoadInitialize();
						showSplash = false;
						fadeCounter = 120;
						splashTimer.Stop();
					}
				}
			}
			white = new Microsoft.Xna.Framework.Color(b, b, b, b);
			Asset<Texture2D> splashTextureLegoBack = TextureAssets.SplashTextureLegoBack;
			if (splashTextureLegoBack.Width() > 0 && splashTextureLegoBack.Height() > 0)
			{
				Vector2 vector = new Vector2((float)screenWidth / (float)splashTextureLegoBack.Width(), (float)screenHeight / (float)splashTextureLegoBack.Height());
				_ = splashTextureLegoBack.Size() / 2f;
				Vector2 position = new Vector2(screenWidth, screenHeight) / 2f;
				Vector2 scale = vector;
				if (scale.X > scale.Y)
				{
					scale.X = scale.Y;
				}
				else
				{
					scale.Y = scale.X;
				}
				Vector2 scale2 = vector;
				if (scale2.X < scale2.Y)
				{
					scale2.X = scale2.Y;
				}
				else
				{
					scale2.Y = scale2.X;
				}
				spriteBatch.Draw(splashTextureLegoBack.Value, position, null, white, 0f, splashTextureLegoBack.Size() / 2f, scale2, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.SplashTextureLegoTree.Value, ScreenSize.ToVector2(), null, white, 0f, TextureAssets.SplashTextureLegoTree.Size(), scale, SpriteEffects.None, 0f);
				spriteBatch.Draw(TextureAssets.SplashTextureLegoFront.Value, position, null, white, 0f, TextureAssets.SplashTextureLegoFront.Size() / 2f, scale, SpriteEffects.None, 0f);
			}
			int num8 = 70;
			if (num == 1)
			{
				DrawSplash_LoadingFlower(Microsoft.Xna.Framework.Color.White);
			}
			else if (num2 > num)
			{
				DrawSplash_LoadingFlower(white);
			}
			_splashFrameCount += 1f;
			if (_splashFrameCount >= (float)num8)
			{
				_splashFrameCount = 0f;
			}
			spriteBatch.End();
		}

		private void DrawSplash_LoadingFlower(Microsoft.Xna.Framework.Color splashColor)
		{
			float val = (float)screenWidth / MinimumZoomComparerX;
			float val2 = (float)screenHeight / MinimumZoomComparerY;
			float num = Math.Max(Math.Max(1f, val), val2);
			Texture2D value = TextureAssets.LoadingSunflower.Value;
			int num2 = 3;
			int num3 = 19;
			Vector2 position = new Vector2(screenWidth / 2, screenHeight) - new Vector2(0f, 50f) * num;
			int num4 = (int)_splashFrameCount / num2;
			if (num4 >= num3)
			{
				num4 = 0;
			}
			Microsoft.Xna.Framework.Rectangle rectangle = value.Frame(1, num3, 0, (num4 + 10) % num3);
			float rotation = 0f;
			Vector2 origin = rectangle.Size() / 2f;
			spriteBatch.Draw(value, position, rectangle, splashColor, rotation, origin, num, SpriteEffects.None, 0f);
		}

		private void DrawSplash_LoadingStar(Microsoft.Xna.Framework.Color splashColor)
		{
			int num = 4;
			Vector2 position = new Vector2(screenWidth, screenHeight) - new Vector2(30f);
			int num2 = (int)_splashFrameCount / num;
			if (num2 >= 15)
			{
				num2 = 0;
			}
			if (num2 >= 8)
			{
				num2 = 14 - num2;
			}
			Microsoft.Xna.Framework.Rectangle rectangle = TextureAssets.Item[75].Frame(1, 8, 0, num2);
			rectangle.Height -= 2;
			float rotation = 0f;
			Vector2 origin = rectangle.Size() / 2f;
			origin.Y += 2f;
			spriteBatch.Draw(TextureAssets.Item[75].Value, position, rectangle, splashColor, rotation, origin, 1f, SpriteEffects.None, 0f);
		}

		protected void DrawUnderworldBackground(bool flat)
		{
			if (!(screenPosition.Y + (float)screenHeight < (float)(maxTilesY - 220) * 16f))
			{
				Vector2 screenOffset = screenPosition + new Vector2(screenWidth >> 1, screenHeight >> 1);
				float pushUp = (GameViewMatrix.Zoom.Y - 1f) * 0.5f * 200f;
				SkyManager.Instance.ResetDepthTracker();
				for (int num = 4; num >= 0; num--)
				{
					DrawUnderworldBackgroudLayer(flat, screenOffset, pushUp, num);
				}
				if (!mapFullscreen)
				{
					SkyManager.Instance.DrawRemainingDepth(spriteBatch);
				}
				DrawSurfaceBG_DrawChangeOverlay(12);
			}
		}

		private static void DrawUnderworldBackgroudLayer(bool flat, Vector2 screenOffset, float pushUp, int layerTextureIndex)
		{
			int num = underworldBG[layerTextureIndex];
			Asset<Texture2D> val = TextureAssets.Underworld[num];
			if (!val.IsLoaded)
			{
				Assets.Request<Texture2D>(val.Name, Main.content, (AssetRequestMode)1);
			}
			Texture2D value = val.Value;
			Vector2 vec = new Vector2(value.Width, value.Height) * 0.5f;
			float num2 = (flat ? 1f : ((float)(layerTextureIndex * 2) + 3f));
			Vector2 value2 = new Vector2(1f / num2);
			Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle(0, 0, value.Width, value.Height);
			float num3 = 1.3f;
			Vector2 zero = Vector2.Zero;
			int num4 = 0;
			switch (num)
			{
			case 1:
			{
				int num9 = (int)(GlobalTimeWrappedHourly * 8f) % 4;
				value3 = new Microsoft.Xna.Framework.Rectangle((num9 >> 1) * (value.Width >> 1), num9 % 2 * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
				vec *= 0.5f;
				zero.Y += 175f;
				break;
			}
			case 2:
				zero.Y += 100f;
				break;
			case 3:
				zero.Y += 75f;
				break;
			case 4:
				num3 = 0.5f;
				zero.Y -= 0f;
				break;
			case 5:
				zero.Y += num4;
				break;
			case 6:
			{
				int num8 = (int)(GlobalTimeWrappedHourly * 8f) % 4;
				value3 = new Microsoft.Xna.Framework.Rectangle(num8 % 2 * (value.Width >> 1), (num8 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
				vec *= 0.5f;
				zero.Y += num4;
				zero.Y += -60f;
				break;
			}
			case 7:
			{
				int num7 = (int)(GlobalTimeWrappedHourly * 8f) % 4;
				value3 = new Microsoft.Xna.Framework.Rectangle(num7 % 2 * (value.Width >> 1), (num7 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
				vec *= 0.5f;
				zero.Y += num4;
				zero.X -= 400f;
				zero.Y += 90f;
				break;
			}
			case 8:
			{
				int num6 = (int)(GlobalTimeWrappedHourly * 8f) % 4;
				value3 = new Microsoft.Xna.Framework.Rectangle(num6 % 2 * (value.Width >> 1), (num6 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
				vec *= 0.5f;
				zero.Y += num4;
				zero.Y += 90f;
				break;
			}
			case 9:
				zero.Y += num4;
				zero.Y -= 30f;
				break;
			case 10:
				zero.Y += 250f * num2;
				break;
			case 11:
				zero.Y += 100f * num2;
				break;
			case 12:
				zero.Y += 20f * num2;
				break;
			case 13:
			{
				zero.Y += 20f * num2;
				int num5 = (int)(GlobalTimeWrappedHourly * 8f) % 4;
				value3 = new Microsoft.Xna.Framework.Rectangle(num5 % 2 * (value.Width >> 1), (num5 >> 1) * (value.Height >> 1), value.Width >> 1, value.Height >> 1);
				vec *= 0.5f;
				break;
			}
			}
			if (flat)
			{
				num3 *= 1.5f;
			}
			vec *= num3;
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / value2.X);
			if (flat)
			{
				zero.Y += (float)(TextureAssets.Underworld[0].Height() >> 1) * 1.3f - vec.Y;
			}
			zero.Y -= pushUp;
			float num10 = num3 * (float)value3.Width;
			int num11 = (int)((float)(int)(screenOffset.X * value2.X - vec.X + zero.X - (float)(screenWidth >> 1)) / num10);
			vec = vec;
			int num12 = (int)Math.Ceiling((float)screenWidth / num10);
			int num13 = (int)(num3 * ((float)(value3.Width - 1) / value2.X));
			Vector2 vector = (new Vector2((num11 - 2) * num13, (float)UnderworldLayer * 16f) + vec - screenOffset) * value2 + screenOffset - screenPosition - vec + zero;
			vector = vector;
			while (vector.X + num10 < 0f)
			{
				num11++;
				vector.X += num10;
			}
			for (int i = num11 - 2; i <= num11 + 4 + num12; i++)
			{
				spriteBatch.Draw(value, vector, value3, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, num3, SpriteEffects.None, 0f);
				if (layerTextureIndex == 0)
				{
					int num14 = (int)(vector.Y + (float)value3.Height * num3);
					spriteBatch.Draw(TextureAssets.BlackTile.Value, new Microsoft.Xna.Framework.Rectangle((int)vector.X, num14, (int)((float)value3.Width * num3), Math.Max(0, screenHeight - num14)), new Microsoft.Xna.Framework.Color(11, 3, 7));
				}
				vector.X += num10;
			}
		}

		protected void DrawBackground()
		{
			if (!BackgroundEnabled)
			{
				OldDrawBackground();
				return;
			}
			Microsoft.Xna.Framework.Color[] slices = new Microsoft.Xna.Framework.Color[9];
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			double num = maxTilesY - 330;
			double num2 = (int)((num - worldSurface) / 6.0) * 6;
			num = worldSurface + num2 - 5.0;
			int num3 = (int)(255f * (1f - gfxQuality) + 140f * gfxQuality);
			int num4 = (int)(200f * (1f - gfxQuality) + 40f * gfxQuality);
			int num5 = 128;
			Vector2 value = (drawToScreen ? Vector2.Zero : new Vector2(offScreenRange, offScreenRange));
			Vector3 value2 = new Vector3(0.9f);
			float num6 = MathHelper.Clamp((screenPosition.Y - (float)worldSurface * 16f) / 300f, 0f, 1f);
			float globalBrightness = Lighting.GlobalBrightness;
			Lighting.GlobalBrightness = globalBrightness * (1f - num6) + 1f * num6;
			float value3 = (float)((double)(screenPosition.Y - (float)(screenHeight / 2) + 200f) - rockLayer * 16.0) / 300f;
			value3 = MathHelper.Clamp(value3, 0f, 1f);
			int num7 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
			int num8 = 3;
			num8 = ((num7 <= caveBackX[0]) ? caveBackStyle[0] : ((num7 <= caveBackX[1]) ? caveBackStyle[1] : ((num7 > caveBackX[2]) ? caveBackStyle[3] : caveBackStyle[2])));
			num8 += 3;
			if (SceneMetrics.SnowTileCount > SceneMetrics.SnowTileThreshold && (screenPosition.Y + (float)screenHeight + 1200f) / 16f < (float)(maxTilesY - 250))
			{
				num8 = 1;
			}
			if (SceneMetrics.JungleTileCount > SceneMetrics.JungleTileThreshold)
			{
				if (num8 == 1)
				{
					if (SceneMetrics.JungleTileCount > SceneMetrics.SnowTileCount)
					{
						num8 = 11;
					}
				}
				else
				{
					num8 = 11;
				}
			}
			if (WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenHeight / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16))
			{
				num8 = (player[myPlayer].ZoneCorrupt ? 19 : (player[myPlayer].ZoneCrimson ? 21 : ((!player[myPlayer].ZoneHallow) ? 18 : 20)));
			}
			else if ((double)(screenPosition.Y / 16f) > rockLayer + 60.0 && (double)(screenPosition.Y / 16f) < num - 60.0)
			{
				if (player[myPlayer].ZoneSnow)
				{
					if (player[myPlayer].ZoneCorrupt)
					{
						num8 = 15;
					}
					else if (player[myPlayer].ZoneCrimson)
					{
						num8 = 16;
					}
					else if (player[myPlayer].ZoneHallow)
					{
						num8 = 17;
					}
				}
				else if (player[myPlayer].ZoneCorrupt)
				{
					num8 = 12;
				}
				else if (player[myPlayer].ZoneCrimson)
				{
					num8 = 13;
				}
				else if (player[myPlayer].ZoneHallow)
				{
					num8 = 14;
				}
			}
			if (SceneMetrics.MushroomTileCount > SceneMetrics.MushroomTileMax)
			{
				num8 = 2;
			}
			if (num8 != undergroundBackground)
			{
				oldUndergroundBackground = undergroundBackground;
				undergroundBackground = num8;
				ugBackTransition = 1f;
			}
			if (ugBackTransition > 0f)
			{
				ugBackTransition -= 0.25f;
			}
			if (ugBackTransition < 0f)
			{
				ugBackTransition = 0f;
			}
			int[] array = new int[7];
			int[] array2 = new int[7];
			for (int i = 0; i < 2; i++)
			{
				int num9 = undergroundBackground;
				if (i == 1)
				{
					num9 = oldUndergroundBackground;
				}
				int[] array3 = new int[7];
				switch (num9)
				{
				case 0:
					array3[0] = 1;
					array3[1] = 2;
					array3[2] = 4;
					array3[3] = 3;
					array3[4] = 6;
					array3[5] = 5;
					break;
				case 1:
					if (iceBackStyle == 0)
					{
						array3[1] = 33;
						array3[3] = 32;
						array3[0] = 40;
						array3[2] = 34;
					}
					else if (iceBackStyle == 1)
					{
						array3[1] = 118;
						array3[3] = 117;
						array3[0] = 160;
						array3[2] = 161;
					}
					else if (iceBackStyle == 2)
					{
						array3[1] = 165;
						array3[3] = 167;
						array3[0] = 164;
						array3[2] = 166;
					}
					else
					{
						array3[1] = 120;
						array3[3] = 119;
						array3[0] = 162;
						array3[2] = 163;
					}
					array3[4] = 128 + hellBackStyle;
					break;
				case 2:
					array3[0] = 62;
					array3[1] = 63;
					array3[2] = 64;
					array3[3] = 65;
					array3[4] = 143 + hellBackStyle;
					break;
				case 3:
					array3[0] = 66;
					array3[1] = 67;
					array3[2] = 68;
					array3[3] = 69;
					array3[4] = 128 + hellBackStyle;
					break;
				case 4:
					array3[0] = 70;
					array3[1] = 71;
					array3[2] = 68;
					array3[3] = 72;
					array3[4] = 128 + hellBackStyle;
					break;
				case 5:
					array3[0] = 73;
					array3[1] = 74;
					array3[2] = 75;
					array3[3] = 76;
					array3[4] = 131 + hellBackStyle;
					break;
				case 6:
					array3[0] = 77;
					array3[1] = 78;
					array3[2] = 79;
					array3[3] = 80;
					array3[4] = 134 + hellBackStyle;
					break;
				case 7:
					array3[0] = 77;
					array3[1] = 81;
					array3[2] = 79;
					array3[3] = 82;
					array3[4] = 134 + hellBackStyle;
					break;
				case 8:
					array3[0] = 83;
					array3[1] = 84;
					array3[2] = 85;
					array3[3] = 86;
					array3[4] = 137 + hellBackStyle;
					break;
				case 9:
					array3[0] = 83;
					array3[1] = 87;
					array3[2] = 88;
					array3[3] = 89;
					array3[4] = 137 + hellBackStyle;
					break;
				case 10:
					array3[0] = 121;
					array3[1] = 122;
					array3[2] = 123;
					array3[3] = 124;
					array3[4] = 140 + hellBackStyle;
					break;
				case 11:
					if (jungleBackStyle == 0)
					{
						array3[0] = 153;
						array3[1] = 147;
						array3[2] = 148;
						array3[3] = 149;
						array3[4] = 150 + hellBackStyle;
					}
					else
					{
						array3[0] = 146;
						array3[1] = 154;
						array3[2] = 155;
						array3[3] = 156;
						array3[4] = 157 + hellBackStyle;
					}
					break;
				case 12:
				case 13:
				case 14:
					array3[0] = 66;
					array3[1] = 67;
					array3[2] = 68;
					array3[4] = 128 + hellBackStyle;
					switch (num9)
					{
					case 12:
						array3[3] = 193 + worldID % 4;
						break;
					case 13:
						array3[3] = 188 + worldID % 5;
						break;
					case 14:
						array3[3] = 197 + worldID % 3;
						break;
					}
					break;
				default:
					if (num9 >= 15 && num9 <= 17)
					{
						array3[0] = 40;
						array3[1] = 33;
						array3[2] = 34;
						array3[4] = 128 + hellBackStyle;
						switch (num9)
						{
						case 15:
							array3[3] = 200;
							break;
						case 16:
							array3[3] = 201 + worldID % 2;
							break;
						case 17:
							array3[3] = 203 + worldID % 4;
							break;
						}
						break;
					}
					switch (num9)
					{
					case 18:
						array3[0] = 290;
						array3[1] = 291;
						break;
					case 19:
						array3[0] = 292;
						array3[1] = 293;
						break;
					case 20:
						array3[0] = 294;
						array3[1] = 295;
						break;
					case 21:
						array3[0] = 296;
						array3[1] = 297;
						break;
					}
					break;
				}
				if (hellBackStyle == 0)
				{
					array3[5] = 125;
				}
				if (hellBackStyle == 1)
				{
					array3[5] = 126;
				}
				if (hellBackStyle == 2)
				{
					array3[5] = 127;
				}
				array3[6] = 185 + hellBackStyle;
				LoadBackground(array3[0]);
				LoadBackground(array3[1]);
				LoadBackground(array3[2]);
				LoadBackground(array3[3]);
				LoadBackground(array3[4]);
				LoadBackground(array3[5]);
				LoadBackground(array3[6]);
				if (i == 0)
				{
					for (int j = 0; j < 7; j++)
					{
						array[j] = array3[j];
					}
				}
				else
				{
					for (int k = 0; k < 7; k++)
					{
						array2[k] = array3[k];
					}
				}
			}
			globalBrightness = 1.2f - 0.2f * value3;
			float x = value2.X;
			float y = value2.Y;
			float z = value2.Z;
			num5 = TextureAssets.Background[array[0]].Width() - 32;
			bgParallax = caveParallax;
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
			bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
			bgTopY = (int)((float)((int)worldSurface * 16 - 16) - screenPosition.Y + 16f);
			for (int l = 0; l < bgLoops; l++)
			{
				for (int m = 0; m < num5 / 16; m++)
				{
					int num10 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
					if (num10 == -8)
					{
						num10 = 8;
					}
					float num11 = bgStartX + num5 * l + m * 16 + 8;
					float num12 = bgTopY;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((num11 + screenPosition.X) / 16f), (int)((screenPosition.Y + num12) / 16f));
					color.R = (byte)((float)(int)color.R * x);
					color.G = (byte)((float)(int)color.G * y);
					color.B = (byte)((float)(int)color.B * z);
					spriteBatch.Draw(TextureAssets.Background[array[0]].Value, new Vector2(bgStartX + num5 * l + 16 * m + num10, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * m + num10 + 16, 0, 16, 16), color);
				}
			}
			if (ugBackTransition > 0f)
			{
				num5 = TextureAssets.Background[array2[0]].Width() - 32;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
				for (int n = 0; n < bgLoops; n++)
				{
					for (int num13 = 0; num13 < num5 / 16; num13++)
					{
						int num14 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
						if (num14 == -8)
						{
							num14 = 8;
						}
						float num15 = bgStartX + num5 * n + num13 * 16 + 8;
						float num16 = bgTopY;
						Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)((num15 + screenPosition.X) / 16f), (int)((screenPosition.Y + num16) / 16f));
						color2.R = (byte)((float)(int)color2.R * x);
						color2.G = (byte)((float)(int)color2.G * y);
						color2.B = (byte)((float)(int)color2.B * z);
						Microsoft.Xna.Framework.Color color3 = color2;
						color3.R = (byte)((float)(int)color3.R * ugBackTransition);
						color3.G = (byte)((float)(int)color3.G * ugBackTransition);
						color3.B = (byte)((float)(int)color3.B * ugBackTransition);
						color3.A = (byte)((float)(int)color3.A * ugBackTransition);
						spriteBatch.Draw(TextureAssets.Background[array2[0]].Value, new Vector2(bgStartX + num5 * n + 16 * num13 + num14, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * num13 + num14 + 16, 0, 16, 16), color3);
					}
				}
			}
			bool flag = false;
			bool flag2 = false;
			bgTopY = (int)((float)((int)worldSurface * 16) - screenPosition.Y + 16f);
			if (worldSurface * 16.0 <= (double)(screenPosition.Y + (float)screenHeight + (float)offScreenRange))
			{
				bgParallax = caveParallax;
				num5 = TextureAssets.Background[array[1]].Width() - 32;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
				if (worldSurface * 16.0 < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[2]) - (double)backgroundHeight[2]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTopY;
					bgLoopsY = (screenHeight - bgTopY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				if (rockLayer * 16.0 < (double)(Camera.ScaledPosition.Y + 600f))
				{
					bgLoopsY = (int)(rockLayer * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
					flag2 = true;
				}
				int num17 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
				if (num17 == -8)
				{
					num17 = 8;
				}
				for (int num18 = 0; num18 < bgLoops; num18++)
				{
					for (int num19 = 0; num19 < bgLoopsY; num19++)
					{
						for (int num20 = 0; num20 < num5 / 16; num20++)
						{
							for (int num21 = 0; num21 < 6; num21++)
							{
								float num22 = bgStartY + num19 * 96 + num21 * 16 + 8;
								int num23 = (int)(((float)(bgStartX + num5 * num18 + num20 * 16 + 8) + screenPosition.X) / 16f);
								int num24 = (int)((num22 + screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color4 = Lighting.GetColor(num23, num24);
								if (!WorldGen.InWorld(num23, num24))
								{
									continue;
								}
								if (tile[num23, num24] == null)
								{
									tile[num23, num24] = new Tile();
								}
								if (color4.R > 0 || color4.G > 0 || color4.B > 0)
								{
									if (!drawToScreen)
									{
										Lighting.GetCornerColors(num23, num24, out var vertices);
										vertices.BottomLeftColor = new Microsoft.Xna.Framework.Color(vertices.BottomLeftColor.ToVector3() * value2);
										vertices.BottomRightColor = new Microsoft.Xna.Framework.Color(vertices.BottomRightColor.ToVector3() * value2);
										tileBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num5 * num18 + 16 * num20 + num17, bgStartY + backgroundHeight[array2[1]] * num19 + 16 * num21) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num17 + 16, 16 * num21, 16, 16), vertices, Vector2.Zero, 1f, SpriteEffects.None);
									}
									else if ((color4.R > num3 || (double)(int)color4.G > (double)num3 * 1.1 || (double)(int)color4.B > (double)num3 * 1.2) && !tile[num23, num24].active() && wallLight[tile[num23, num24].wall] && ugBackTransition == 0f)
									{
										Lighting.GetColor9Slice(num23, num24, slices);
										try
										{
											for (int num25 = 0; num25 < 9; num25++)
											{
												int num26 = 0;
												int num27 = 0;
												int width = 4;
												int height = 4;
												Microsoft.Xna.Framework.Color color5 = color4;
												Microsoft.Xna.Framework.Color color6 = color4;
												switch (num25)
												{
												case 0:
													if (!tile[num23 - 1, num24 - 1].active())
													{
														color6 = slices[num25];
													}
													break;
												case 1:
													width = 8;
													num26 = 4;
													if (!tile[num23, num24 - 1].active())
													{
														color6 = slices[num25];
													}
													break;
												case 2:
													num26 = 12;
													if (!tile[num23 + 1, num24 - 1].active())
													{
														color6 = slices[num25];
													}
													break;
												case 3:
													height = 8;
													num27 = 4;
													if (!tile[num23 - 1, num24].active())
													{
														color6 = slices[num25];
													}
													break;
												case 4:
													width = 8;
													height = 8;
													num26 = 4;
													num27 = 4;
													break;
												case 5:
													num26 = 12;
													num27 = 4;
													height = 8;
													if (!tile[num23 + 1, num24].active())
													{
														color6 = slices[num25];
													}
													break;
												case 6:
													num27 = 12;
													if (!tile[num23 - 1, num24 + 1].active())
													{
														color6 = slices[num25];
													}
													break;
												case 7:
													width = 8;
													height = 4;
													num26 = 4;
													num27 = 12;
													if (!tile[num23, num24 + 1].active())
													{
														color6 = slices[num25];
													}
													break;
												case 8:
													num26 = 12;
													num27 = 12;
													if (!tile[num23 + 1, num24 + 1].active())
													{
														color6 = slices[num25];
													}
													break;
												}
												color5.R = (byte)((color4.R + color6.R) / 2);
												color5.G = (byte)((color4.G + color6.G) / 2);
												color5.B = (byte)((color4.B + color6.B) / 2);
												color5.R = (byte)((float)(int)color5.R * x);
												color5.G = (byte)((float)(int)color5.G * y);
												color5.B = (byte)((float)(int)color5.B * z);
												spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num5 * num18 + 16 * num20 + num26 + num17, bgStartY + backgroundHeight[array[1]] * num19 + 16 * num21 + num27) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num26 + num17 + 16, 16 * num21 + num27, width, height), color5);
												if (ugBackTransition > 0f)
												{
													Microsoft.Xna.Framework.Color color7 = color5;
													color7.R = (byte)((float)(int)color7.R * ugBackTransition);
													color7.G = (byte)((float)(int)color7.G * ugBackTransition);
													color7.B = (byte)((float)(int)color7.B * ugBackTransition);
													color7.A = (byte)((float)(int)color7.A * ugBackTransition);
													spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2(bgStartX + num5 * num18 + 16 * num20 + num26 + num17, bgStartY + backgroundHeight[array2[1]] * num19 + 16 * num21 + num27) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num26 + num17 + 16, 16 * num21 + num27, width, height), color7);
												}
											}
										}
										catch
										{
											color4.R = (byte)((float)(int)color4.R * x);
											color4.G = (byte)((float)(int)color4.G * y);
											color4.B = (byte)((float)(int)color4.B * z);
											spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num5 * num18 + 16 * num20 + num17, bgStartY + backgroundHeight[array[1]] * num19 + 16 * num21) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num17 + 16, 16 * num21, 16, 16), color4);
										}
									}
									else if ((color4.R > num4 || (double)(int)color4.G > (double)num4 * 1.1 || (double)(int)color4.B > (double)num4 * 1.2) && ugBackTransition == 0f)
									{
										Lighting.GetColor4Slice(num23, num24, slices);
										for (int num28 = 0; num28 < 4; num28++)
										{
											int num29 = 0;
											int num30 = 0;
											Microsoft.Xna.Framework.Color color8 = color4;
											Microsoft.Xna.Framework.Color color9 = slices[num28];
											switch (num28)
											{
											case 1:
												num29 = 8;
												break;
											case 2:
												num30 = 8;
												break;
											case 3:
												num29 = 8;
												num30 = 8;
												break;
											}
											color8.R = (byte)((color4.R + color9.R) / 2);
											color8.G = (byte)((color4.G + color9.G) / 2);
											color8.B = (byte)((color4.B + color9.B) / 2);
											color8.R = (byte)((float)(int)color8.R * x);
											color8.G = (byte)((float)(int)color8.G * y);
											color8.B = (byte)((float)(int)color8.B * z);
											spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num5 * num18 + 16 * num20 + num29 + num17, bgStartY + backgroundHeight[array[1]] * num19 + 16 * num21 + num30) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num29 + num17 + 16, 16 * num21 + num30, 8, 8), color8);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color10 = color8;
												color10.R = (byte)((float)(int)color10.R * ugBackTransition);
												color10.G = (byte)((float)(int)color10.G * ugBackTransition);
												color10.B = (byte)((float)(int)color10.B * ugBackTransition);
												color10.A = (byte)((float)(int)color10.A * ugBackTransition);
												spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2(bgStartX + num5 * num18 + 16 * num20 + num29 + num17, bgStartY + backgroundHeight[array2[1]] * num19 + 16 * num21 + num30) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num29 + num17 + 16, 16 * num21 + num30, 8, 8), color10);
											}
										}
									}
									else
									{
										color4.R = (byte)((float)(int)color4.R * x);
										color4.G = (byte)((float)(int)color4.G * y);
										color4.B = (byte)((float)(int)color4.B * z);
										spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num5 * num18 + 16 * num20 + num17, bgStartY + backgroundHeight[array[1]] * num19 + 16 * num21) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num17 + 16, 16 * num21, 16, 16), color4);
										if (ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color color11 = color4;
											color11.R = (byte)((float)(int)color11.R * ugBackTransition);
											color11.G = (byte)((float)(int)color11.G * ugBackTransition);
											color11.B = (byte)((float)(int)color11.B * ugBackTransition);
											color11.A = (byte)((float)(int)color11.A * ugBackTransition);
											spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2(bgStartX + num5 * num18 + 16 * num20 + num17, bgStartY + backgroundHeight[array2[1]] * num19 + 16 * num21) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num17 + 16, 16 * num21, 16, 16), color11);
										}
									}
								}
								else
								{
									color4.R = (byte)((float)(int)color4.R * x);
									color4.G = (byte)((float)(int)color4.G * y);
									color4.B = (byte)((float)(int)color4.B * z);
									spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num5 * num18 + 16 * num20 + num17, bgStartY + backgroundHeight[array[1]] * num19 + 16 * num21) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num17 + 16, 16 * num21, 16, 16), color4);
								}
							}
						}
					}
				}
				if (ugBackTransition > 0f)
				{
					num5 = TextureAssets.Background[array2[1]].Width() - 32;
					bgStartX = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
					bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
					num17 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
					if (num17 == -8)
					{
						num17 = 8;
					}
					for (int num31 = 0; num31 < bgLoops; num31++)
					{
						for (int num32 = 0; num32 < bgLoopsY; num32++)
						{
							for (int num33 = 0; num33 < num5 / 16; num33++)
							{
								for (int num34 = 0; num34 < 6; num34++)
								{
									float num35 = bgStartY + num32 * 96 + num34 * 16 + 8;
									int num36 = (int)(((float)(bgStartX + num5 * num31 + num33 * 16 + 8) + screenPosition.X) / 16f);
									int num37 = (int)((num35 + screenPosition.Y) / 16f);
									if (WorldGen.InWorld(num36, num37))
									{
										Microsoft.Xna.Framework.Color color12 = Lighting.GetColor(num36, num37);
										if (tile[num36, num37] == null)
										{
											tile[num36, num37] = new Tile();
										}
										if (color12.R > 0 || color12.G > 0 || color12.B > 0)
										{
											Lighting.GetCornerColors(num36, num37, out var vertices2, ugBackTransition);
											byte a = (byte)(255f * ugBackTransition);
											vertices2.BottomLeftColor.A = a;
											vertices2.BottomRightColor.A = a;
											vertices2.TopLeftColor.A = a;
											vertices2.TopRightColor.A = a;
											tileBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2(bgStartX + num5 * num31 + 16 * num33 + num17, bgStartY + backgroundHeight[array2[1]] * num32 + 16 * num34) + value, new Microsoft.Xna.Framework.Rectangle(16 * num33 + num17 + 16, 16 * num34, 16, 16), vertices2, Vector2.Zero, 1f, SpriteEffects.None);
										}
									}
								}
							}
						}
					}
				}
				num5 = 128;
				if (flag2)
				{
					bgParallax = caveParallax;
					bgStartX = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
					bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
					bgTopY = bgStartY + bgLoopsY * backgroundHeight[2];
					if (bgTopY > -32)
					{
						for (int num38 = 0; num38 < bgLoops; num38++)
						{
							for (int num39 = 0; num39 < num5 / 16; num39++)
							{
								float num40 = bgStartX + num5 * num38 + num39 * 16 + 8;
								float num41 = bgTopY;
								Microsoft.Xna.Framework.Color color13 = Lighting.GetColor((int)((num40 + screenPosition.X) / 16f), (int)((screenPosition.Y + num41) / 16f));
								color13.R = (byte)((float)(int)color13.R * x);
								color13.G = (byte)((float)(int)color13.G * y);
								color13.B = (byte)((float)(int)color13.B * z);
								spriteBatch.Draw(TextureAssets.Background[array[2]].Value, new Vector2(bgStartX + num5 * num38 + 16 * num39 + num17, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * num39 + num17 + 16, 0, 16, 16), color13);
								if (ugBackTransition > 0f)
								{
									Microsoft.Xna.Framework.Color color14 = color13;
									color14.R = (byte)((float)(int)color14.R * ugBackTransition);
									color14.G = (byte)((float)(int)color14.G * ugBackTransition);
									color14.B = (byte)((float)(int)color14.B * ugBackTransition);
									color14.A = (byte)((float)(int)color14.A * ugBackTransition);
									spriteBatch.Draw(TextureAssets.Background[array2[2]].Value, new Vector2(bgStartX + num5 * num38 + 16 * num39 + num17, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * num39 + num17 + 16, 0, 16, 16), color14);
								}
							}
						}
					}
				}
			}
			if (num * 16.0 <= (double)(screenPosition.Y + (float)screenHeight))
			{
				int y2 = 0;
				int x2 = 0;
				int num42 = screenHeight + 200;
				int width2 = screenWidth + 100;
				if ((float)UnderworldLayer * 16f < screenPosition.Y + (float)screenHeight)
				{
					int num43 = (int)(hellBlackBoxBottom - screenPosition.Y + value.Y);
					if (num42 > num43)
					{
						num42 = num43;
					}
				}
				spriteBatch.Draw(TextureAssets.BlackTile.Value, new Microsoft.Xna.Framework.Rectangle(x2, y2, width2, num42), new Microsoft.Xna.Framework.Color(0, 0, 0));
			}
			hellBlackBoxBottom = screenPosition.Y + (float)screenHeight + 100f;
			bgTopY = (int)((float)((int)rockLayer * 16) - screenPosition.Y + 16f + 600f - 8f);
			if (rockLayer * 16.0 <= (double)(screenPosition.Y + (float)screenHeight))
			{
				bgParallax = caveParallax;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
				if (rockLayer * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[3]) - (double)backgroundHeight[3]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTopY;
					bgLoopsY = (screenHeight - bgTopY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				if (num * 16.0 < (double)(screenPosition.Y + (float)screenHeight))
				{
					bgLoopsY = (int)(num * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
					flag = true;
				}
				int num44 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
				if (num44 == -8)
				{
					num44 = 8;
				}
				for (int num45 = 0; num45 < bgLoops; num45++)
				{
					for (int num46 = 0; num46 < bgLoopsY; num46++)
					{
						for (int num47 = 0; num47 < num5 / 16; num47++)
						{
							for (int num48 = 0; num48 < 6; num48++)
							{
								float num49 = bgStartY + num46 * 96 + num48 * 16 + 8;
								int num50 = (int)(((float)(bgStartX + num5 * num45 + num47 * 16 + 8) + screenPosition.X) / 16f);
								int num51 = (int)((num49 + screenPosition.Y) / 16f);
								if (!WorldGen.InWorld(num50, num51, 1))
								{
									continue;
								}
								Microsoft.Xna.Framework.Color color15 = Lighting.GetColor(num50, num51);
								if (tile[num50, num51] == null)
								{
									tile[num50, num51] = new Tile();
								}
								bool flag3 = false;
								if (caveParallax != 0f)
								{
									if (tile[num50 - 1, num51] == null)
									{
										tile[num50 - 1, num51] = new Tile();
									}
									if (tile[num50 + 1, num51] == null)
									{
										tile[num50 + 1, num51] = new Tile();
									}
									if (wallLight[tile[num50, num51].wall] || wallLight[tile[num50 - 1, num51].wall] || wallLight[tile[num50 + 1, num51].wall])
									{
										flag3 = true;
									}
								}
								else if (wallLight[tile[num50, num51].wall])
								{
									flag3 = true;
								}
								if ((!flag3 && color15.R != 0 && color15.G != 0 && color15.B != 0) || (color15.R <= 0 && color15.G <= 0 && color15.B <= 0) || (!wallLight[tile[num50, num51].wall] && caveParallax == 0f))
								{
									continue;
								}
								if (Lighting.NotRetro && color15.R < 230 && color15.G < 230 && color15.B < 230 && ugBackTransition == 0f)
								{
									if ((color15.R > num3 || (double)(int)color15.G > (double)num3 * 1.1 || (double)(int)color15.B > (double)num3 * 1.2) && !tile[num50, num51].active())
									{
										Lighting.GetColor9Slice(num50, num51, slices);
										for (int num52 = 0; num52 < 9; num52++)
										{
											int num53 = 0;
											int num54 = 0;
											int width3 = 4;
											int height2 = 4;
											Microsoft.Xna.Framework.Color color16 = color15;
											Microsoft.Xna.Framework.Color color17 = color15;
											switch (num52)
											{
											case 0:
												if (!tile[num50 - 1, num51 - 1].active())
												{
													color17 = slices[num52];
												}
												break;
											case 1:
												width3 = 8;
												num53 = 4;
												if (!tile[num50, num51 - 1].active())
												{
													color17 = slices[num52];
												}
												break;
											case 2:
												num53 = 12;
												if (!tile[num50 + 1, num51 - 1].active())
												{
													color17 = slices[num52];
												}
												break;
											case 3:
												height2 = 8;
												num54 = 4;
												if (!tile[num50 - 1, num51].active())
												{
													color17 = slices[num52];
												}
												break;
											case 4:
												width3 = 8;
												height2 = 8;
												num53 = 4;
												num54 = 4;
												break;
											case 5:
												num53 = 12;
												num54 = 4;
												height2 = 8;
												if (!tile[num50 + 1, num51].active())
												{
													color17 = slices[num52];
												}
												break;
											case 6:
												num54 = 12;
												if (!tile[num50 - 1, num51 + 1].active())
												{
													color17 = slices[num52];
												}
												break;
											case 7:
												width3 = 8;
												height2 = 4;
												num53 = 4;
												num54 = 12;
												if (!tile[num50, num51 + 1].active())
												{
													color17 = slices[num52];
												}
												break;
											case 8:
												num53 = 12;
												num54 = 12;
												if (!tile[num50 + 1, num51 + 1].active())
												{
													color17 = slices[num52];
												}
												break;
											}
											color16.R = (byte)((color15.R + color17.R) / 2);
											color16.G = (byte)((color15.G + color17.G) / 2);
											color16.B = (byte)((color15.B + color17.B) / 2);
											color16.R = (byte)((float)(int)color16.R * x);
											color16.G = (byte)((float)(int)color16.G * y);
											color16.B = (byte)((float)(int)color16.B * z);
											spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2(bgStartX + num5 * num45 + 16 * num47 + num53 + num44, bgStartY + backgroundHeight[array[3]] * num46 + 16 * num48 + num54) + value, new Microsoft.Xna.Framework.Rectangle(16 * num47 + num53 + num44 + 16, 16 * num48 + num54, width3, height2), color16);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color18 = color16;
												color18.R = (byte)((float)(int)color18.R * ugBackTransition);
												color18.G = (byte)((float)(int)color18.G * ugBackTransition);
												color18.B = (byte)((float)(int)color18.B * ugBackTransition);
												color18.A = (byte)((float)(int)color18.A * ugBackTransition);
												spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2(bgStartX + num5 * num45 + 16 * num47 + num53 + num44, bgStartY + backgroundHeight[array2[3]] * num46 + 16 * num48 + num54) + value, new Microsoft.Xna.Framework.Rectangle(16 * num47 + num53 + num44 + 16, 16 * num48 + num54, width3, height2), color18);
											}
										}
									}
									else if (color15.R > num4 || (double)(int)color15.G > (double)num4 * 1.1 || (double)(int)color15.B > (double)num4 * 1.2)
									{
										Lighting.GetColor4Slice(num50, num51, slices);
										for (int num55 = 0; num55 < 4; num55++)
										{
											int num56 = 0;
											int num57 = 0;
											Microsoft.Xna.Framework.Color color19 = color15;
											Microsoft.Xna.Framework.Color color20 = slices[num55];
											switch (num55)
											{
											case 1:
												num56 = 8;
												break;
											case 2:
												num57 = 8;
												break;
											case 3:
												num56 = 8;
												num57 = 8;
												break;
											}
											color19.R = (byte)((color15.R + color20.R) / 2);
											color19.G = (byte)((color15.G + color20.G) / 2);
											color19.B = (byte)((color15.B + color20.B) / 2);
											color19.R = (byte)((float)(int)color19.R * x);
											color19.G = (byte)((float)(int)color19.G * y);
											color19.B = (byte)((float)(int)color19.B * z);
											spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2(bgStartX + num5 * num45 + 16 * num47 + num56 + num44, bgStartY + backgroundHeight[array[3]] * num46 + 16 * num48 + num57) + value, new Microsoft.Xna.Framework.Rectangle(16 * num47 + num56 + num44 + 16, 16 * num48 + num57, 8, 8), color19);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color21 = color19;
												color21.R = (byte)((float)(int)color21.R * ugBackTransition);
												color21.G = (byte)((float)(int)color21.G * ugBackTransition);
												color21.B = (byte)((float)(int)color21.B * ugBackTransition);
												color21.A = (byte)((float)(int)color21.A * ugBackTransition);
												spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2(bgStartX + num5 * num45 + 16 * num47 + num56 + num44, bgStartY + backgroundHeight[array2[3]] * num46 + 16 * num48 + num57) + value, new Microsoft.Xna.Framework.Rectangle(16 * num47 + num56 + num44 + 16, 16 * num48 + num57, 8, 8), color21);
											}
										}
									}
									else
									{
										color15.R = (byte)((float)(int)color15.R * x);
										color15.G = (byte)((float)(int)color15.G * y);
										color15.B = (byte)((float)(int)color15.B * z);
										spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2(bgStartX + num5 * num45 + 16 * num47 + num44, bgStartY + backgroundHeight[array[3]] * num46 + 16 * num48) + value, new Microsoft.Xna.Framework.Rectangle(16 * num47 + num44 + 16, 16 * num48, 16, 16), color15);
										if (ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color color22 = color15;
											color22.R = (byte)((float)(int)color22.R * ugBackTransition);
											color22.G = (byte)((float)(int)color22.G * ugBackTransition);
											color22.B = (byte)((float)(int)color22.B * ugBackTransition);
											color22.A = (byte)((float)(int)color22.A * ugBackTransition);
											spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2(bgStartX + num5 * num45 + 16 * num47 + num44, bgStartY + backgroundHeight[array2[3]] * num46 + 16 * num48) + value, new Microsoft.Xna.Framework.Rectangle(16 * num47 + num44 + 16, 16 * num48, 16, 16), color22);
										}
									}
								}
								else
								{
									color15.R = (byte)((float)(int)color15.R * x);
									color15.G = (byte)((float)(int)color15.G * y);
									color15.B = (byte)((float)(int)color15.B * z);
									spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2(bgStartX + num5 * num45 + 16 * num47 + num44, bgStartY + backgroundHeight[array[3]] * num46 + 16 * num48) + value, new Microsoft.Xna.Framework.Rectangle(16 * num47 + num44 + 16, 16 * num48, 16, 16), color15);
									if (ugBackTransition > 0f)
									{
										Microsoft.Xna.Framework.Color color23 = color15;
										color23.R = (byte)((float)(int)color23.R * ugBackTransition);
										color23.G = (byte)((float)(int)color23.G * ugBackTransition);
										color23.B = (byte)((float)(int)color23.B * ugBackTransition);
										color23.A = (byte)((float)(int)color23.A * ugBackTransition);
										spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2(bgStartX + num5 * num45 + 16 * num47 + num44, bgStartY + backgroundHeight[array2[3]] * num46 + 16 * num48) + value, new Microsoft.Xna.Framework.Rectangle(16 * num47 + num44 + 16, 16 * num48, 16, 16), color23);
									}
								}
							}
						}
					}
				}
				num5 = 128;
				if (flag)
				{
					bgParallax = caveParallax;
					bgStartX = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
					bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
					bgTopY = bgStartY + bgLoopsY * backgroundHeight[2];
					for (int num58 = 0; num58 < bgLoops; num58++)
					{
						for (int num59 = 0; num59 < num5 / 16; num59++)
						{
							float num60 = bgStartX + num5 * num58 + num59 * 16 + 8;
							float num61 = bgTopY;
							Microsoft.Xna.Framework.Color color24 = Lighting.GetColor((int)((num60 + screenPosition.X) / 16f), (int)((screenPosition.Y + num61) / 16f));
							color24.R = (byte)((float)(int)color24.R * x);
							color24.G = (byte)((float)(int)color24.G * y);
							color24.B = (byte)((float)(int)color24.B * z);
							spriteBatch.Draw(TextureAssets.Background[array[4]].Value, new Vector2(bgStartX + num5 * num58 + 16 * num59 + num44, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * num59 + num44 + 16, magmaBGFrame * 16, 16, 16), color24);
							if (ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color color25 = color24;
								color25.R = (byte)((float)(int)color25.R * ugBackTransition);
								color25.G = (byte)((float)(int)color25.G * ugBackTransition);
								color25.B = (byte)((float)(int)color25.B * ugBackTransition);
								color25.A = (byte)((float)(int)color25.A * ugBackTransition);
								spriteBatch.Draw(TextureAssets.Background[array2[4]].Value, new Vector2(bgStartX + num5 * num58 + 16 * num59 + num44, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * num59 + num44 + 16, magmaBGFrame * 16, 16, 16), color25);
							}
						}
					}
				}
			}
			bgTopY = (int)((float)((int)num * 16) - screenPosition.Y + 16f + 600f) - 8;
			bool flag4 = false;
			if (num * 16.0 <= (double)(screenPosition.Y + (float)screenHeight))
			{
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
				if (num * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[2]) - (double)backgroundHeight[2]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTopY;
					bgLoopsY = (screenHeight - bgTopY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				if ((float)UnderworldLayer * 16f < screenPosition.Y + (float)screenHeight)
				{
					bgLoopsY = (int)Math.Ceiling(((float)UnderworldLayer * 16f - screenPosition.Y - (float)bgStartY) / (float)backgroundHeight[2]);
					flag4 = true;
				}
				num3 = (int)((double)num3 * 1.5);
				num4 = (int)((double)num4 * 1.5);
				int num62 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
				if (num62 == -8)
				{
					num62 = 8;
				}
				for (int num63 = 0; num63 < bgLoops; num63++)
				{
					for (int num64 = 0; num64 < bgLoopsY; num64++)
					{
						for (int num65 = 0; num65 < num5 / 16; num65++)
						{
							for (int num66 = 0; num66 < 6; num66++)
							{
								float num67 = bgStartY + num64 * 96 + num66 * 16 + 8;
								int num68 = (int)(((float)(bgStartX + num5 * num63 + num65 * 16 + 8) + screenPosition.X) / 16f);
								int num69 = (int)((num67 + screenPosition.Y) / 16f);
								if (!WorldGen.InWorld(num68, num69, 1))
								{
									continue;
								}
								Microsoft.Xna.Framework.Color color26 = Lighting.GetColor(num68, num69);
								if (tile[num68, num69] == null)
								{
									tile[num68, num69] = new Tile();
								}
								bool flag5 = false;
								if (caveParallax != 0f)
								{
									if (tile[num68 - 1, num69] == null)
									{
										tile[num68 - 1, num69] = new Tile();
									}
									if (tile[num68 + 1, num69] == null)
									{
										tile[num68 + 1, num69] = new Tile();
									}
									if (wallLight[tile[num68, num69].wall] || wallLight[tile[num68 - 1, num69].wall] || wallLight[tile[num68 + 1, num69].wall])
									{
										flag5 = true;
									}
								}
								else if (wallLight[tile[num68, num69].wall])
								{
									flag5 = true;
								}
								if ((!flag5 && color26.R != 0 && color26.G != 0 && color26.B != 0) || (color26.R <= 0 && color26.G <= 0 && color26.B <= 0 && num69 <= maxTilesY - 300) || (!wallLight[tile[num68, num69].wall] && caveParallax == 0f))
								{
									continue;
								}
								if (Lighting.NotRetro && color26.R < 230 && color26.G < 230 && color26.B < 230)
								{
									if ((color26.R > num3 || (double)(int)color26.G > (double)num3 * 1.1 || (double)(int)color26.B > (double)num3 * 1.2) && !tile[num68, num69].active())
									{
										Lighting.GetColor9Slice(num68, num69, slices);
										for (int num70 = 0; num70 < 9; num70++)
										{
											int num71 = 0;
											int num72 = 0;
											int width4 = 4;
											int height3 = 4;
											Microsoft.Xna.Framework.Color color27 = color26;
											Microsoft.Xna.Framework.Color color28 = color26;
											switch (num70)
											{
											case 0:
												if (!tile[num68 - 1, num69 - 1].active())
												{
													color28 = slices[num70];
												}
												break;
											case 1:
												width4 = 8;
												num71 = 4;
												if (!tile[num68, num69 - 1].active())
												{
													color28 = slices[num70];
												}
												break;
											case 2:
												num71 = 12;
												if (!tile[num68 + 1, num69 - 1].active())
												{
													color28 = slices[num70];
												}
												break;
											case 3:
												height3 = 8;
												num72 = 4;
												if (!tile[num68 - 1, num69].active())
												{
													color28 = slices[num70];
												}
												break;
											case 4:
												width4 = 8;
												height3 = 8;
												num71 = 4;
												num72 = 4;
												break;
											case 5:
												num71 = 12;
												num72 = 4;
												height3 = 8;
												if (!tile[num68 + 1, num69].active())
												{
													color28 = slices[num70];
												}
												break;
											case 6:
												num72 = 12;
												if (!tile[num68 - 1, num69 + 1].active())
												{
													color28 = slices[num70];
												}
												break;
											case 7:
												width4 = 8;
												height3 = 4;
												num71 = 4;
												num72 = 12;
												if (!tile[num68, num69 + 1].active())
												{
													color28 = slices[num70];
												}
												break;
											case 8:
												num71 = 12;
												num72 = 12;
												if (!tile[num68 + 1, num69 + 1].active())
												{
													color28 = slices[num70];
												}
												break;
											}
											color27.R = (byte)((color26.R + color28.R) / 2);
											color27.G = (byte)((color26.G + color28.G) / 2);
											color27.B = (byte)((color26.B + color28.B) / 2);
											color27.R = (byte)((float)(int)color27.R * x);
											color27.G = (byte)((float)(int)color27.G * y);
											color27.B = (byte)((float)(int)color27.B * z);
											spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2(bgStartX + num5 * num63 + 16 * num65 + num71 + num62, bgStartY + backgroundHeight[2] * num64 + 16 * num66 + num72) + value, new Microsoft.Xna.Framework.Rectangle(16 * num65 + num71 + num62 + 16, 16 * num66 + backgroundHeight[2] * magmaBGFrame + num72, width4, height3), color27, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
									else if (color26.R > num4 || (double)(int)color26.G > (double)num4 * 1.1 || (double)(int)color26.B > (double)num4 * 1.2)
									{
										Lighting.GetColor4Slice(num68, num69, slices);
										for (int num73 = 0; num73 < 4; num73++)
										{
											int num74 = 0;
											int num75 = 0;
											Microsoft.Xna.Framework.Color color29 = color26;
											Microsoft.Xna.Framework.Color color30 = slices[num73];
											switch (num73)
											{
											case 1:
												num74 = 8;
												break;
											case 2:
												num75 = 8;
												break;
											case 3:
												num74 = 8;
												num75 = 8;
												break;
											}
											color29.R = (byte)((color26.R + color30.R) / 2);
											color29.G = (byte)((color26.G + color30.G) / 2);
											color29.B = (byte)((color26.B + color30.B) / 2);
											color29.R = (byte)((float)(int)color29.R * x);
											color29.G = (byte)((float)(int)color29.G * y);
											color29.B = (byte)((float)(int)color29.B * z);
											spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2(bgStartX + num5 * num63 + 16 * num65 + num74 + num62, bgStartY + backgroundHeight[2] * num64 + 16 * num66 + num75) + value, new Microsoft.Xna.Framework.Rectangle(16 * num65 + num74 + num62 + 16, 16 * num66 + backgroundHeight[2] * magmaBGFrame + num75, 8, 8), color29, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
									else
									{
										color26.R = (byte)((float)(int)color26.R * x);
										color26.G = (byte)((float)(int)color26.G * y);
										color26.B = (byte)((float)(int)color26.B * z);
										spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2(bgStartX + num5 * num63 + 16 * num65 + num62, bgStartY + backgroundHeight[2] * num64 + 16 * num66) + value, new Microsoft.Xna.Framework.Rectangle(16 * num65 + num62 + 16, 16 * num66 + backgroundHeight[2] * magmaBGFrame, 16, 16), color26, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
								else
								{
									color26.R = (byte)((float)(int)color26.R * x);
									color26.G = (byte)((float)(int)color26.G * y);
									color26.B = (byte)((float)(int)color26.B * z);
									spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2(bgStartX + num5 * num63 + 16 * num65 + num62, bgStartY + backgroundHeight[2] * num64 + 16 * num66) + value, new Microsoft.Xna.Framework.Rectangle(16 * num65 + num62 + 16, 16 * num66 + backgroundHeight[2] * magmaBGFrame, 16, 16), color26, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
						}
					}
				}
				if (flag4)
				{
					bgParallax = caveParallax;
					bgStartX = (int)(0.0 - Math.IEEERemainder((double)num5 + (double)screenPosition.X * bgParallax, num5) - (double)(num5 / 2)) - (int)value.X;
					bgLoops = (screenWidth + (int)value.X * 2) / num5 + 2;
					bgTopY = bgStartY + bgLoopsY * backgroundHeight[2];
					hellBlackBoxBottom = (float)bgTopY + screenPosition.Y;
					for (int num76 = 0; num76 < bgLoops; num76++)
					{
						for (int num77 = 0; num77 < num5 / 16; num77++)
						{
							float num78 = bgStartX + num5 * num76 + num77 * 16 + 8;
							float num79 = bgTopY;
							Microsoft.Xna.Framework.Color color31 = Lighting.GetColor((int)((num78 + screenPosition.X) / 16f), (int)((screenPosition.Y + num79) / 16f));
							color31.R = (byte)((float)(int)color31.R * x);
							color31.G = (byte)((float)(int)color31.G * y);
							color31.B = (byte)((float)(int)color31.B * z);
							spriteBatch.Draw(TextureAssets.Background[array[6]].Value, new Vector2(bgStartX + num5 * num76 + 16 * num77 + num62, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * num77 + num62 + 16, magmaBGFrame * 16, 16, 16), color31);
							if (ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color color32 = color31;
								color32.R = (byte)((float)(int)color32.R * ugBackTransition);
								color32.G = (byte)((float)(int)color32.G * ugBackTransition);
								color32.B = (byte)((float)(int)color32.B * ugBackTransition);
								color32.A = (byte)((float)(int)color32.A * ugBackTransition);
								spriteBatch.Draw(TextureAssets.Background[array2[6]].Value, new Vector2(bgStartX + num5 * num76 + 16 * num77 + num62, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * num77 + num62 + 16, magmaBGFrame * 16, 16, 16), color32);
							}
						}
					}
				}
			}
			Lighting.GlobalBrightness = globalBrightness;
			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
		}

		public static Microsoft.Xna.Framework.Point GetScreenOverdrawOffset()
		{
			return (Camera.ScaledPosition - Camera.UnscaledPosition).ToTileCoordinates();
		}

		protected void OldDrawBackground()
		{
			Microsoft.Xna.Framework.Color[] slices = new Microsoft.Xna.Framework.Color[9];
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			int num = (int)(255f * (1f - gfxQuality) + 140f * gfxQuality);
			int num2 = (int)(200f * (1f - gfxQuality) + 40f * gfxQuality);
			int num3 = 128;
			Vector2 value = new Vector2(offScreenRange, offScreenRange);
			if (drawToScreen)
			{
				value = Vector2.Zero;
			}
			float num4;
			float num5;
			float num6 = (num5 = (num4 = 0.9f));
			float num7 = 0f;
			if (SceneMetrics.BloodTileCount > SceneMetrics.EvilTileCount && SceneMetrics.BloodTileCount > SceneMetrics.HolyTileCount)
			{
				num7 = SceneMetrics.BloodTileCount;
			}
			else if (SceneMetrics.HolyTileCount > SceneMetrics.EvilTileCount)
			{
				num7 = SceneMetrics.HolyTileCount;
			}
			else if (SceneMetrics.EvilTileCount > SceneMetrics.HolyTileCount)
			{
				num7 = SceneMetrics.EvilTileCount;
			}
			num7 = MathHelper.Clamp(num7 / 800f, 0f, 1f);
			float num8 = (float)((double)screenPosition.Y - worldSurface * 16.0) / 300f;
			if (num8 < 0f)
			{
				num8 = 0f;
			}
			else if (num8 > 1f)
			{
				num8 = 1f;
			}
			float num9 = 1f * (1f - num8) + num4 * num8;
			float globalBrightness = Lighting.GlobalBrightness;
			Lighting.GlobalBrightness = globalBrightness * (1f - num8) + 1f * num8;
			float value2 = (float)((double)(screenPosition.Y - (float)(screenHeight / 2) + 200f) - rockLayer * 16.0) / 300f;
			value2 = MathHelper.Clamp(value2, 0f, 1f);
			if (SceneMetrics.BloodTileCount > SceneMetrics.EvilTileCount && SceneMetrics.BloodTileCount > SceneMetrics.HolyTileCount)
			{
				num4 = 1f * num7 + num4 * (1f - num7);
				num5 = 0.55f * num7 + num5 * (1f - num7);
				num6 = 0.5f * num7 + num6 * (1f - num7);
			}
			else if (SceneMetrics.EvilTileCount > 0)
			{
				num4 = 0.8f * num7 + num4 * (1f - num7);
				num5 = 0.75f * num7 + num5 * (1f - num7);
				num6 = 1.1f * num7 + num6 * (1f - num7);
			}
			else if (SceneMetrics.HolyTileCount > 0)
			{
				num4 = 1f * num7 + num4 * (1f - num7);
				num5 = 0.7f * num7 + num5 * (1f - num7);
				num6 = 0.9f * num7 + num6 * (1f - num7);
			}
			num4 = 1f * (num9 - value2) + num4 * value2;
			num5 = 1f * (num9 - value2) + num5 * value2;
			num6 = 1f * (num9 - value2) + num6 * value2;
			int num10 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
			int num11 = 3;
			num11 = ((num10 <= caveBackX[0]) ? caveBackStyle[0] : ((num10 <= caveBackX[1]) ? caveBackStyle[1] : ((num10 > caveBackX[2]) ? caveBackStyle[3] : caveBackStyle[2])));
			num11 += 3;
			if (SceneMetrics.SnowTileCount > SceneMetrics.SnowTileThreshold && (screenPosition.Y + (float)screenHeight) / 16f < (float)(maxTilesY - 250))
			{
				num11 = 1;
			}
			if (SceneMetrics.JungleTileCount > SceneMetrics.JungleTileThreshold)
			{
				if (num11 == 1)
				{
					if (SceneMetrics.JungleTileCount > SceneMetrics.SnowTileCount)
					{
						num11 = 11;
					}
				}
				else
				{
					num11 = 11;
				}
			}
			if (SceneMetrics.MushroomTileCount > SceneMetrics.MushroomTileMax)
			{
				num11 = 2;
			}
			if (num11 != undergroundBackground)
			{
				oldUndergroundBackground = undergroundBackground;
				undergroundBackground = num11;
				ugBackTransition = 1f;
			}
			if (ugBackTransition > 0f)
			{
				ugBackTransition -= 0.25f;
			}
			if (ugBackTransition < 0f)
			{
				ugBackTransition = 0f;
			}
			int[] array = new int[6];
			int[] array2 = new int[6];
			for (int i = 0; i < 2; i++)
			{
				int num12 = undergroundBackground;
				if (i == 1)
				{
					num12 = oldUndergroundBackground;
				}
				int[] array3 = new int[6];
				switch (num12)
				{
				case 0:
					array3[0] = 1;
					array3[1] = 2;
					array3[2] = 4;
					array3[3] = 3;
					array3[4] = 6;
					array3[5] = 5;
					break;
				case 1:
					if (iceBackStyle == 0)
					{
						array3[1] = 33;
						array3[3] = 32;
						array3[0] = 40;
						array3[2] = 34;
					}
					else if (iceBackStyle == 1)
					{
						array3[1] = 118;
						array3[3] = 117;
						array3[0] = 160;
						array3[2] = 161;
					}
					else if (iceBackStyle == 2)
					{
						array3[1] = 165;
						array3[3] = 167;
						array3[0] = 164;
						array3[2] = 166;
					}
					else
					{
						array3[1] = 120;
						array3[3] = 119;
						array3[0] = 162;
						array3[2] = 163;
					}
					array3[4] = array3[3];
					break;
				case 2:
					array3[0] = 62;
					array3[1] = 63;
					array3[2] = 64;
					array3[3] = 65;
					array3[4] = 143 + hellBackStyle;
					break;
				case 3:
					array3[0] = 66;
					array3[1] = 67;
					array3[2] = 68;
					array3[3] = 69;
					array3[4] = 128 + hellBackStyle;
					break;
				case 4:
					array3[0] = 70;
					array3[1] = 71;
					array3[2] = 68;
					array3[3] = 72;
					array3[4] = 128 + hellBackStyle;
					break;
				case 5:
					array3[0] = 73;
					array3[1] = 74;
					array3[2] = 75;
					array3[3] = 76;
					array3[4] = 131 + hellBackStyle;
					break;
				case 6:
					array3[0] = 77;
					array3[1] = 78;
					array3[2] = 79;
					array3[3] = 80;
					array3[4] = 134 + hellBackStyle;
					break;
				case 7:
					array3[0] = 77;
					array3[1] = 81;
					array3[2] = 79;
					array3[3] = 82;
					array3[4] = 134 + hellBackStyle;
					break;
				case 8:
					array3[0] = 83;
					array3[1] = 84;
					array3[2] = 85;
					array3[3] = 86;
					array3[4] = 137 + hellBackStyle;
					break;
				case 9:
					array3[0] = 83;
					array3[1] = 87;
					array3[2] = 88;
					array3[3] = 89;
					array3[4] = 137 + hellBackStyle;
					break;
				case 10:
					array3[0] = 121;
					array3[1] = 122;
					array3[2] = 123;
					array3[3] = 124;
					array3[4] = 140 + hellBackStyle;
					break;
				case 11:
					if (jungleBackStyle == 0)
					{
						array3[0] = 153;
						array3[1] = 147;
						array3[2] = 148;
						array3[3] = 149;
						array3[4] = 150 + hellBackStyle;
					}
					else
					{
						array3[0] = 146;
						array3[1] = 154;
						array3[2] = 155;
						array3[3] = 156;
						array3[4] = 157 + hellBackStyle;
					}
					break;
				}
				if (hellBackStyle == 0)
				{
					array3[5] = 125;
				}
				if (hellBackStyle == 1)
				{
					array3[5] = 126;
				}
				if (hellBackStyle == 2)
				{
					array3[5] = 127;
				}
				LoadBackground(array3[0]);
				LoadBackground(array3[1]);
				LoadBackground(array3[2]);
				LoadBackground(array3[3]);
				LoadBackground(array3[4]);
				LoadBackground(array3[5]);
				if (i == 0)
				{
					for (int j = 0; j < 6; j++)
					{
						array[j] = array3[j];
					}
				}
				else
				{
					for (int k = 0; k < 6; k++)
					{
						array2[k] = array3[k];
					}
				}
			}
			globalBrightness = 1.2f * (1f - value2) + 1f * value2;
			bgParallax = caveParallax;
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
			bgLoops = (screenWidth + (int)value.X * 2) / num3 + 2;
			bgTopY = (int)((float)((int)worldSurface * 16 - 16) - screenPosition.Y + 16f);
			for (int l = 0; l < bgLoops; l++)
			{
				for (int m = 0; m < num3 / 16; m++)
				{
					int num13 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
					if (num13 == -8)
					{
						num13 = 8;
					}
					float num14 = bgStartX + num3 * l + m * 16 + 8;
					float num15 = bgTopY;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((num14 + screenPosition.X) / 16f), (int)((screenPosition.Y + num15) / 16f));
					color.R = (byte)((float)(int)color.R * num4);
					color.G = (byte)((float)(int)color.G * num5);
					color.B = (byte)((float)(int)color.B * num6);
					spriteBatch.Draw(TextureAssets.Background[array[0]].Value, new Vector2(bgStartX + num3 * l + 16 * m + num13, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * m + num13 + 16, 0, 16, 16), color);
					if (ugBackTransition > 0f)
					{
						Microsoft.Xna.Framework.Color color2 = color;
						color2.R = (byte)((float)(int)color2.R * ugBackTransition);
						color2.G = (byte)((float)(int)color2.G * ugBackTransition);
						color2.B = (byte)((float)(int)color2.B * ugBackTransition);
						color2.A = (byte)((float)(int)color2.A * ugBackTransition);
						spriteBatch.Draw(TextureAssets.Background[array2[0]].Value, new Vector2(bgStartX + num3 * l + 16 * m + num13, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * m + num13 + 16, 0, 16, 16), color2);
					}
				}
			}
			double num16 = maxTilesY - 230;
			double num17 = (int)((num16 - worldSurface) / 6.0) * 6;
			num16 = worldSurface + num17 - 5.0;
			bool flag = false;
			bool flag2 = false;
			bgTopY = (int)((float)((int)worldSurface * 16) - screenPosition.Y + 16f);
			if (worldSurface * 16.0 <= (double)(screenPosition.Y + (float)screenHeight + (float)offScreenRange))
			{
				bgParallax = caveParallax;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num3 + 2;
				if (worldSurface * 16.0 < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[2]) - (double)backgroundHeight[2]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTopY;
					bgLoopsY = (screenHeight - bgTopY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				if (rockLayer * 16.0 < (double)(Camera.ScaledPosition.Y + 600f))
				{
					bgLoopsY = (int)(rockLayer * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
					flag2 = true;
				}
				int num18 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
				if (num18 == -8)
				{
					num18 = 8;
				}
				for (int n = 0; n < bgLoops; n++)
				{
					for (int num19 = 0; num19 < bgLoopsY; num19++)
					{
						for (int num20 = 0; num20 < num3 / 16; num20++)
						{
							for (int num21 = 0; num21 < 6; num21++)
							{
								float num22 = bgStartY + num19 * 96 + num21 * 16 + 8;
								int num23 = (int)(((float)(bgStartX + num3 * n + num20 * 16 + 8) + screenPosition.X) / 16f);
								int num24 = (int)((num22 + screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(num23, num24);
								if (tile[num23, num24] == null)
								{
									tile[num23, num24] = new Tile();
								}
								if (color3.R > 0 || color3.G > 0 || color3.B > 0)
								{
									if (!drawToScreen)
									{
										Lighting.GetCornerColors(num23, num24, out var vertices);
										tileBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num3 * n + 16 * num20 + num18, bgStartY + backgroundHeight[array2[1]] * num19 + 16 * num21) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num18 + 16, 16 * num21, 16, 16), vertices, Vector2.Zero, 1f, SpriteEffects.None);
									}
									else if ((color3.R > num || (double)(int)color3.G > (double)num * 1.1 || (double)(int)color3.B > (double)num * 1.2) && !tile[num23, num24].active() && wallLight[tile[num23, num24].wall] && ugBackTransition == 0f)
									{
										Lighting.GetColor9Slice(num23, num24, slices);
										try
										{
											for (int num25 = 0; num25 < 9; num25++)
											{
												int num26 = 0;
												int num27 = 0;
												int width = 4;
												int height = 4;
												Microsoft.Xna.Framework.Color color4 = color3;
												Microsoft.Xna.Framework.Color color5 = color3;
												switch (num25)
												{
												case 0:
													if (!tile[num23 - 1, num24 - 1].active())
													{
														color5 = slices[num25];
													}
													break;
												case 1:
													width = 8;
													num26 = 4;
													if (!tile[num23, num24 - 1].active())
													{
														color5 = slices[num25];
													}
													break;
												case 2:
													num26 = 12;
													if (!tile[num23 + 1, num24 - 1].active())
													{
														color5 = slices[num25];
													}
													break;
												case 3:
													height = 8;
													num27 = 4;
													if (!tile[num23 - 1, num24].active())
													{
														color5 = slices[num25];
													}
													break;
												case 4:
													width = 8;
													height = 8;
													num26 = 4;
													num27 = 4;
													break;
												case 5:
													num26 = 12;
													num27 = 4;
													height = 8;
													if (!tile[num23 + 1, num24].active())
													{
														color5 = slices[num25];
													}
													break;
												case 6:
													num27 = 12;
													if (!tile[num23 - 1, num24 + 1].active())
													{
														color5 = slices[num25];
													}
													break;
												case 7:
													width = 8;
													height = 4;
													num26 = 4;
													num27 = 12;
													if (!tile[num23, num24 + 1].active())
													{
														color5 = slices[num25];
													}
													break;
												case 8:
													num26 = 12;
													num27 = 12;
													if (!tile[num23 + 1, num24 + 1].active())
													{
														color5 = slices[num25];
													}
													break;
												}
												color4.R = (byte)((color3.R + color5.R) / 2);
												color4.G = (byte)((color3.G + color5.G) / 2);
												color4.B = (byte)((color3.B + color5.B) / 2);
												color4.R = (byte)((float)(int)color4.R * num4);
												color4.G = (byte)((float)(int)color4.G * num5);
												color4.B = (byte)((float)(int)color4.B * num6);
												spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num3 * n + 16 * num20 + num26 + num18, bgStartY + backgroundHeight[array[1]] * num19 + 16 * num21 + num27) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num26 + num18 + 16, 16 * num21 + num27, width, height), color4);
												if (ugBackTransition > 0f)
												{
													Microsoft.Xna.Framework.Color color6 = color4;
													color6.R = (byte)((float)(int)color6.R * ugBackTransition);
													color6.G = (byte)((float)(int)color6.G * ugBackTransition);
													color6.B = (byte)((float)(int)color6.B * ugBackTransition);
													color6.A = (byte)((float)(int)color6.A * ugBackTransition);
													spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2(bgStartX + num3 * n + 16 * num20 + num26 + num18, bgStartY + backgroundHeight[array2[1]] * num19 + 16 * num21 + num27) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num26 + num18 + 16, 16 * num21 + num27, width, height), color6);
												}
											}
										}
										catch
										{
											color3.R = (byte)((float)(int)color3.R * num4);
											color3.G = (byte)((float)(int)color3.G * num5);
											color3.B = (byte)((float)(int)color3.B * num6);
											spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num3 * n + 16 * num20 + num18, bgStartY + backgroundHeight[array[1]] * num19 + 16 * num21) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num18 + 16, 16 * num21, 16, 16), color3);
										}
									}
									else if ((color3.R > num2 || (double)(int)color3.G > (double)num2 * 1.1 || (double)(int)color3.B > (double)num2 * 1.2) && ugBackTransition == 0f)
									{
										Lighting.GetColor4Slice(num23, num24, slices);
										for (int num28 = 0; num28 < 4; num28++)
										{
											int num29 = 0;
											int num30 = 0;
											Microsoft.Xna.Framework.Color color7 = color3;
											Microsoft.Xna.Framework.Color color8 = slices[num28];
											switch (num28)
											{
											case 1:
												num29 = 8;
												break;
											case 2:
												num30 = 8;
												break;
											case 3:
												num29 = 8;
												num30 = 8;
												break;
											}
											color7.R = (byte)((color3.R + color8.R) / 2);
											color7.G = (byte)((color3.G + color8.G) / 2);
											color7.B = (byte)((color3.B + color8.B) / 2);
											color7.R = (byte)((float)(int)color7.R * num4);
											color7.G = (byte)((float)(int)color7.G * num5);
											color7.B = (byte)((float)(int)color7.B * num6);
											spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num3 * n + 16 * num20 + num29 + num18, bgStartY + backgroundHeight[array[1]] * num19 + 16 * num21 + num30) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num29 + num18 + 16, 16 * num21 + num30, 8, 8), color7);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color9 = color7;
												color9.R = (byte)((float)(int)color9.R * ugBackTransition);
												color9.G = (byte)((float)(int)color9.G * ugBackTransition);
												color9.B = (byte)((float)(int)color9.B * ugBackTransition);
												color9.A = (byte)((float)(int)color9.A * ugBackTransition);
												spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2(bgStartX + num3 * n + 16 * num20 + num29 + num18, bgStartY + backgroundHeight[array2[1]] * num19 + 16 * num21 + num30) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num29 + num18 + 16, 16 * num21 + num30, 8, 8), color9);
											}
										}
									}
									else
									{
										color3.R = (byte)((float)(int)color3.R * num4);
										color3.G = (byte)((float)(int)color3.G * num5);
										color3.B = (byte)((float)(int)color3.B * num6);
										spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num3 * n + 16 * num20 + num18, bgStartY + backgroundHeight[array[1]] * num19 + 16 * num21) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num18 + 16, 16 * num21, 16, 16), color3);
										if (ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color color10 = color3;
											color10.R = (byte)((float)(int)color10.R * ugBackTransition);
											color10.G = (byte)((float)(int)color10.G * ugBackTransition);
											color10.B = (byte)((float)(int)color10.B * ugBackTransition);
											color10.A = (byte)((float)(int)color10.A * ugBackTransition);
											spriteBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2(bgStartX + num3 * n + 16 * num20 + num18, bgStartY + backgroundHeight[array2[1]] * num19 + 16 * num21) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num18 + 16, 16 * num21, 16, 16), color10);
										}
									}
								}
								else
								{
									color3.R = (byte)((float)(int)color3.R * num4);
									color3.G = (byte)((float)(int)color3.G * num5);
									color3.B = (byte)((float)(int)color3.B * num6);
									spriteBatch.Draw(TextureAssets.Background[array[1]].Value, new Vector2(bgStartX + num3 * n + 16 * num20 + num18, bgStartY + backgroundHeight[array[1]] * num19 + 16 * num21) + value, new Microsoft.Xna.Framework.Rectangle(16 * num20 + num18 + 16, 16 * num21, 16, 16), color3);
								}
							}
						}
					}
				}
				if (ugBackTransition > 0f)
				{
					for (int num31 = 0; num31 < bgLoops; num31++)
					{
						for (int num32 = 0; num32 < bgLoopsY; num32++)
						{
							for (int num33 = 0; num33 < num3 / 16; num33++)
							{
								for (int num34 = 0; num34 < 6; num34++)
								{
									float num35 = bgStartY + num32 * 96 + num34 * 16 + 8;
									int num36 = (int)(((float)(bgStartX + num3 * num31 + num33 * 16 + 8) + screenPosition.X) / 16f);
									int num37 = (int)((num35 + screenPosition.Y) / 16f);
									Microsoft.Xna.Framework.Color color11 = Lighting.GetColor(num36, num37);
									if (tile[num36, num37] == null)
									{
										tile[num36, num37] = new Tile();
									}
									if (color11.R > 0 || color11.G > 0 || color11.B > 0)
									{
										Lighting.GetCornerColors(num36, num37, out var vertices2, ugBackTransition);
										byte a = (byte)(255f * ugBackTransition);
										vertices2.BottomLeftColor.A = a;
										vertices2.BottomRightColor.A = a;
										vertices2.TopLeftColor.A = a;
										vertices2.TopRightColor.A = a;
										tileBatch.Draw(TextureAssets.Background[array2[1]].Value, new Vector2(bgStartX + num3 * num31 + 16 * num33 + num18, bgStartY + backgroundHeight[array2[1]] * num32 + 16 * num34) + value, new Microsoft.Xna.Framework.Rectangle(16 * num33 + num18 + 16, 16 * num34, 16, 16), vertices2, Vector2.Zero, 1f, SpriteEffects.None);
									}
								}
							}
						}
					}
				}
				if (flag2)
				{
					bgParallax = caveParallax;
					bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
					bgLoops = (screenWidth + (int)value.X * 2) / num3 + 2;
					bgTopY = bgStartY + bgLoopsY * backgroundHeight[2];
					if (bgTopY > -32)
					{
						for (int num38 = 0; num38 < bgLoops; num38++)
						{
							for (int num39 = 0; num39 < num3 / 16; num39++)
							{
								float num40 = bgStartX + num3 * num38 + num39 * 16 + 8;
								float num41 = bgTopY;
								Microsoft.Xna.Framework.Color color12 = Lighting.GetColor((int)((num40 + screenPosition.X) / 16f), (int)((screenPosition.Y + num41) / 16f));
								color12.R = (byte)((float)(int)color12.R * num4);
								color12.G = (byte)((float)(int)color12.G * num5);
								color12.B = (byte)((float)(int)color12.B * num6);
								spriteBatch.Draw(TextureAssets.Background[array[2]].Value, new Vector2(bgStartX + num3 * num38 + 16 * num39 + num18, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * num39 + num18 + 16, 0, 16, 16), color12);
								if (ugBackTransition > 0f)
								{
									Microsoft.Xna.Framework.Color color13 = color12;
									color13.R = (byte)((float)(int)color13.R * ugBackTransition);
									color13.G = (byte)((float)(int)color13.G * ugBackTransition);
									color13.B = (byte)((float)(int)color13.B * ugBackTransition);
									color13.A = (byte)((float)(int)color13.A * ugBackTransition);
									spriteBatch.Draw(TextureAssets.Background[array2[2]].Value, new Vector2(bgStartX + num3 * num38 + 16 * num39 + num18, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * num39 + num18 + 16, 0, 16, 16), color13);
								}
							}
						}
					}
				}
			}
			bgTopY = (int)((float)((int)rockLayer * 16) - screenPosition.Y + 16f + 600f - 8f);
			if (rockLayer * 16.0 <= (double)(screenPosition.Y + 600f))
			{
				bgParallax = caveParallax;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num3 + 2;
				if (rockLayer * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[3]) - (double)backgroundHeight[3]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTopY;
					bgLoopsY = (screenHeight - bgTopY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				if (num16 * 16.0 < (double)(screenPosition.Y + 600f))
				{
					bgLoopsY = (int)(num16 * 16.0 - (double)screenPosition.Y + 600.0 - (double)bgStartY) / backgroundHeight[2];
					flag = true;
				}
				int num42 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
				if (num42 == -8)
				{
					num42 = 8;
				}
				for (int num43 = 0; num43 < bgLoops; num43++)
				{
					for (int num44 = 0; num44 < bgLoopsY; num44++)
					{
						for (int num45 = 0; num45 < num3 / 16; num45++)
						{
							for (int num46 = 0; num46 < 6; num46++)
							{
								float num47 = bgStartY + num44 * 96 + num46 * 16 + 8;
								int num48 = (int)(((float)(bgStartX + num3 * num43 + num45 * 16 + 8) + screenPosition.X) / 16f);
								int num49 = (int)((num47 + screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color14 = Lighting.GetColor(num48, num49);
								if (tile[num48, num49] == null)
								{
									tile[num48, num49] = new Tile();
								}
								bool flag3 = false;
								if (caveParallax != 0f)
								{
									if (tile[num48 - 1, num49] == null)
									{
										tile[num48 - 1, num49] = new Tile();
									}
									if (tile[num48 + 1, num49] == null)
									{
										tile[num48 + 1, num49] = new Tile();
									}
									if (wallLight[tile[num48, num49].wall] || wallLight[tile[num48 - 1, num49].wall] || wallLight[tile[num48 + 1, num49].wall])
									{
										flag3 = true;
									}
								}
								else if (wallLight[tile[num48, num49].wall])
								{
									flag3 = true;
								}
								if ((!flag3 && color14.R != 0 && color14.G != 0 && color14.B != 0) || (color14.R <= 0 && color14.G <= 0 && color14.B <= 0) || (!wallLight[tile[num48, num49].wall] && caveParallax == 0f))
								{
									continue;
								}
								if (Lighting.NotRetro && color14.R < 230 && color14.G < 230 && color14.B < 230 && ugBackTransition == 0f)
								{
									if ((color14.R > num || (double)(int)color14.G > (double)num * 1.1 || (double)(int)color14.B > (double)num * 1.2) && !tile[num48, num49].active())
									{
										Lighting.GetColor9Slice(num48, num49, slices);
										for (int num50 = 0; num50 < 9; num50++)
										{
											int num51 = 0;
											int num52 = 0;
											int width2 = 4;
											int height2 = 4;
											Microsoft.Xna.Framework.Color color15 = color14;
											Microsoft.Xna.Framework.Color color16 = color14;
											switch (num50)
											{
											case 0:
												if (!tile[num48 - 1, num49 - 1].active())
												{
													color16 = slices[num50];
												}
												break;
											case 1:
												width2 = 8;
												num51 = 4;
												if (!tile[num48, num49 - 1].active())
												{
													color16 = slices[num50];
												}
												break;
											case 2:
												num51 = 12;
												if (!tile[num48 + 1, num49 - 1].active())
												{
													color16 = slices[num50];
												}
												break;
											case 3:
												height2 = 8;
												num52 = 4;
												if (!tile[num48 - 1, num49].active())
												{
													color16 = slices[num50];
												}
												break;
											case 4:
												width2 = 8;
												height2 = 8;
												num51 = 4;
												num52 = 4;
												break;
											case 5:
												num51 = 12;
												num52 = 4;
												height2 = 8;
												if (!tile[num48 + 1, num49].active())
												{
													color16 = slices[num50];
												}
												break;
											case 6:
												num52 = 12;
												if (!tile[num48 - 1, num49 + 1].active())
												{
													color16 = slices[num50];
												}
												break;
											case 7:
												width2 = 8;
												height2 = 4;
												num51 = 4;
												num52 = 12;
												if (!tile[num48, num49 + 1].active())
												{
													color16 = slices[num50];
												}
												break;
											case 8:
												num51 = 12;
												num52 = 12;
												if (!tile[num48 + 1, num49 + 1].active())
												{
													color16 = slices[num50];
												}
												break;
											}
											color15.R = (byte)((color14.R + color16.R) / 2);
											color15.G = (byte)((color14.G + color16.G) / 2);
											color15.B = (byte)((color14.B + color16.B) / 2);
											color15.R = (byte)((float)(int)color15.R * num4);
											color15.G = (byte)((float)(int)color15.G * num5);
											color15.B = (byte)((float)(int)color15.B * num6);
											spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2(bgStartX + num3 * num43 + 16 * num45 + num51 + num42, bgStartY + backgroundHeight[array[3]] * num44 + 16 * num46 + num52) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num51 + num42 + 16, 16 * num46 + num52, width2, height2), color15);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color17 = color15;
												color17.R = (byte)((float)(int)color17.R * ugBackTransition);
												color17.G = (byte)((float)(int)color17.G * ugBackTransition);
												color17.B = (byte)((float)(int)color17.B * ugBackTransition);
												color17.A = (byte)((float)(int)color17.A * ugBackTransition);
												spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2(bgStartX + num3 * num43 + 16 * num45 + num51 + num42, bgStartY + backgroundHeight[array2[3]] * num44 + 16 * num46 + num52) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num51 + num42 + 16, 16 * num46 + num52, width2, height2), color17);
											}
										}
									}
									else if (color14.R > num2 || (double)(int)color14.G > (double)num2 * 1.1 || (double)(int)color14.B > (double)num2 * 1.2)
									{
										Lighting.GetColor4Slice(num48, num49, slices);
										for (int num53 = 0; num53 < 4; num53++)
										{
											int num54 = 0;
											int num55 = 0;
											Microsoft.Xna.Framework.Color color18 = color14;
											Microsoft.Xna.Framework.Color color19 = slices[num53];
											switch (num53)
											{
											case 1:
												num54 = 8;
												break;
											case 2:
												num55 = 8;
												break;
											case 3:
												num54 = 8;
												num55 = 8;
												break;
											}
											color18.R = (byte)((color14.R + color19.R) / 2);
											color18.G = (byte)((color14.G + color19.G) / 2);
											color18.B = (byte)((color14.B + color19.B) / 2);
											color18.R = (byte)((float)(int)color18.R * num4);
											color18.G = (byte)((float)(int)color18.G * num5);
											color18.B = (byte)((float)(int)color18.B * num6);
											spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2(bgStartX + num3 * num43 + 16 * num45 + num54 + num42, bgStartY + backgroundHeight[array[3]] * num44 + 16 * num46 + num55) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num54 + num42 + 16, 16 * num46 + num55, 8, 8), color18);
											if (ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color color20 = color18;
												color20.R = (byte)((float)(int)color20.R * ugBackTransition);
												color20.G = (byte)((float)(int)color20.G * ugBackTransition);
												color20.B = (byte)((float)(int)color20.B * ugBackTransition);
												color20.A = (byte)((float)(int)color20.A * ugBackTransition);
												spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2(bgStartX + num3 * num43 + 16 * num45 + num54 + num42, bgStartY + backgroundHeight[array2[3]] * num44 + 16 * num46 + num55) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num54 + num42 + 16, 16 * num46 + num55, 8, 8), color20);
											}
										}
									}
									else
									{
										color14.R = (byte)((float)(int)color14.R * num4);
										color14.G = (byte)((float)(int)color14.G * num5);
										color14.B = (byte)((float)(int)color14.B * num6);
										spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2(bgStartX + num3 * num43 + 16 * num45 + num42, bgStartY + backgroundHeight[array[3]] * num44 + 16 * num46) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num42 + 16, 16 * num46, 16, 16), color14);
										if (ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color color21 = color14;
											color21.R = (byte)((float)(int)color21.R * ugBackTransition);
											color21.G = (byte)((float)(int)color21.G * ugBackTransition);
											color21.B = (byte)((float)(int)color21.B * ugBackTransition);
											color21.A = (byte)((float)(int)color21.A * ugBackTransition);
											spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2(bgStartX + num3 * num43 + 16 * num45 + num42, bgStartY + backgroundHeight[array2[3]] * num44 + 16 * num46) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num42 + 16, 16 * num46, 16, 16), color21);
										}
									}
								}
								else
								{
									color14.R = (byte)((float)(int)color14.R * num4);
									color14.G = (byte)((float)(int)color14.G * num5);
									color14.B = (byte)((float)(int)color14.B * num6);
									spriteBatch.Draw(TextureAssets.Background[array[3]].Value, new Vector2(bgStartX + num3 * num43 + 16 * num45 + num42, bgStartY + backgroundHeight[array[3]] * num44 + 16 * num46) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num42 + 16, 16 * num46, 16, 16), color14);
									if (ugBackTransition > 0f)
									{
										Microsoft.Xna.Framework.Color color22 = color14;
										color22.R = (byte)((float)(int)color22.R * ugBackTransition);
										color22.G = (byte)((float)(int)color22.G * ugBackTransition);
										color22.B = (byte)((float)(int)color22.B * ugBackTransition);
										color22.A = (byte)((float)(int)color22.A * ugBackTransition);
										spriteBatch.Draw(TextureAssets.Background[array2[3]].Value, new Vector2(bgStartX + num3 * num43 + 16 * num45 + num42, bgStartY + backgroundHeight[array2[3]] * num44 + 16 * num46) + value, new Microsoft.Xna.Framework.Rectangle(16 * num45 + num42 + 16, 16 * num46, 16, 16), color22);
									}
								}
							}
						}
					}
				}
				num3 = 128;
				if (flag)
				{
					bgParallax = caveParallax;
					bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
					bgLoops = (screenWidth + (int)value.X * 2) / num3 + 2;
					bgTopY = bgStartY + bgLoopsY * backgroundHeight[2];
					for (int num56 = 0; num56 < bgLoops; num56++)
					{
						for (int num57 = 0; num57 < num3 / 16; num57++)
						{
							float num58 = bgStartX + num3 * num56 + num57 * 16 + 8;
							float num59 = bgTopY;
							Microsoft.Xna.Framework.Color color23 = Lighting.GetColor((int)((num58 + screenPosition.X) / 16f), (int)((screenPosition.Y + num59) / 16f));
							color23.R = (byte)((float)(int)color23.R * num4);
							color23.G = (byte)((float)(int)color23.G * num5);
							color23.B = (byte)((float)(int)color23.B * num6);
							spriteBatch.Draw(TextureAssets.Background[array[4]].Value, new Vector2(bgStartX + num3 * num56 + 16 * num57 + num42, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * num57 + num42 + 16, magmaBGFrame * 16, 16, 16), color23);
							if (ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color color24 = color23;
								color24.R = (byte)((float)(int)color24.R * ugBackTransition);
								color24.G = (byte)((float)(int)color24.G * ugBackTransition);
								color24.B = (byte)((float)(int)color24.B * ugBackTransition);
								color24.A = (byte)((float)(int)color24.A * ugBackTransition);
								spriteBatch.Draw(TextureAssets.Background[array2[4]].Value, new Vector2(bgStartX + num3 * num56 + 16 * num57 + num42, bgTopY) + value, new Microsoft.Xna.Framework.Rectangle(16 * num57 + num42 + 16, magmaBGFrame * 16, 16, 16), color24);
							}
						}
					}
				}
			}
			bgTopY = (int)((float)((int)num16 * 16) - screenPosition.Y + 16f + 600f) - 8;
			if (num16 * 16.0 <= (double)(screenPosition.Y + 600f))
			{
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)num3 + (double)screenPosition.X * bgParallax, num3) - (double)(num3 / 2)) - (int)value.X;
				bgLoops = (screenWidth + (int)value.X * 2) / num3 + 2;
				if (num16 * 16.0 + (double)screenHeight < (double)(screenPosition.Y - 16f))
				{
					bgStartY = (int)(Math.IEEERemainder(bgTopY, backgroundHeight[2]) - (double)backgroundHeight[2]);
					bgLoopsY = (screenHeight - bgStartY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				else
				{
					bgStartY = bgTopY;
					bgLoopsY = (screenHeight - bgTopY + (int)value.Y * 2) / backgroundHeight[2] + 1;
				}
				num = (int)((double)num * 1.5);
				num2 = (int)((double)num2 * 1.5);
				int num60 = (int)(float)Math.Round(0f - (float)Math.IEEERemainder((float)bgStartX + screenPosition.X, 16.0));
				if (num60 == -8)
				{
					num60 = 8;
				}
				for (int num61 = 0; num61 < bgLoops; num61++)
				{
					for (int num62 = 0; num62 < bgLoopsY; num62++)
					{
						for (int num63 = 0; num63 < num3 / 16; num63++)
						{
							for (int num64 = 0; num64 < 6; num64++)
							{
								float num65 = bgStartY + num62 * 96 + num64 * 16 + 8;
								int num66 = (int)(((float)(bgStartX + num3 * num61 + num63 * 16 + 8) + screenPosition.X) / 16f);
								int num67 = (int)((num65 + screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color color25 = Lighting.GetColor(num66, num67);
								if (tile[num66, num67] == null)
								{
									tile[num66, num67] = new Tile();
								}
								bool flag4 = false;
								if (caveParallax != 0f)
								{
									if (tile[num66 - 1, num67] == null)
									{
										tile[num66 - 1, num67] = new Tile();
									}
									if (tile[num66 + 1, num67] == null)
									{
										tile[num66 + 1, num67] = new Tile();
									}
									if (wallLight[tile[num66, num67].wall] || wallLight[tile[num66 - 1, num67].wall] || wallLight[tile[num66 + 1, num67].wall])
									{
										flag4 = true;
									}
								}
								else if (wallLight[tile[num66, num67].wall])
								{
									flag4 = true;
								}
								if ((!flag4 && color25.R != 0 && color25.G != 0 && color25.B != 0) || (color25.R <= 0 && color25.G <= 0 && color25.B <= 0) || (!wallLight[tile[num66, num67].wall] && caveParallax == 0f))
								{
									continue;
								}
								if (Lighting.NotRetro && color25.R < 230 && color25.G < 230 && color25.B < 230)
								{
									if ((color25.R > num || (double)(int)color25.G > (double)num * 1.1 || (double)(int)color25.B > (double)num * 1.2) && !tile[num66, num67].active())
									{
										Lighting.GetColor9Slice(num66, num67, slices);
										for (int num68 = 0; num68 < 9; num68++)
										{
											int num69 = 0;
											int num70 = 0;
											int width3 = 4;
											int height3 = 4;
											Microsoft.Xna.Framework.Color color26 = color25;
											Microsoft.Xna.Framework.Color color27 = color25;
											switch (num68)
											{
											case 0:
												if (!tile[num66 - 1, num67 - 1].active())
												{
													color27 = slices[num68];
												}
												break;
											case 1:
												width3 = 8;
												num69 = 4;
												if (!tile[num66, num67 - 1].active())
												{
													color27 = slices[num68];
												}
												break;
											case 2:
												num69 = 12;
												if (!tile[num66 + 1, num67 - 1].active())
												{
													color27 = slices[num68];
												}
												break;
											case 3:
												height3 = 8;
												num70 = 4;
												if (!tile[num66 - 1, num67].active())
												{
													color27 = slices[num68];
												}
												break;
											case 4:
												width3 = 8;
												height3 = 8;
												num69 = 4;
												num70 = 4;
												break;
											case 5:
												num69 = 12;
												num70 = 4;
												height3 = 8;
												if (!tile[num66 + 1, num67].active())
												{
													color27 = slices[num68];
												}
												break;
											case 6:
												num70 = 12;
												if (!tile[num66 - 1, num67 + 1].active())
												{
													color27 = slices[num68];
												}
												break;
											case 7:
												width3 = 8;
												height3 = 4;
												num69 = 4;
												num70 = 12;
												if (!tile[num66, num67 + 1].active())
												{
													color27 = slices[num68];
												}
												break;
											case 8:
												num69 = 12;
												num70 = 12;
												if (!tile[num66 + 1, num67 + 1].active())
												{
													color27 = slices[num68];
												}
												break;
											}
											color26.R = (byte)((color25.R + color27.R) / 2);
											color26.G = (byte)((color25.G + color27.G) / 2);
											color26.B = (byte)((color25.B + color27.B) / 2);
											color26.R = (byte)((float)(int)color26.R * num4);
											color26.G = (byte)((float)(int)color26.G * num5);
											color26.B = (byte)((float)(int)color26.B * num6);
											spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2(bgStartX + num3 * num61 + 16 * num63 + num69 + num60, bgStartY + backgroundHeight[2] * num62 + 16 * num64 + num70) + value, new Microsoft.Xna.Framework.Rectangle(16 * num63 + num69 + num60 + 16, 16 * num64 + backgroundHeight[2] * magmaBGFrame + num70, width3, height3), color26, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
									else if (color25.R > num2 || (double)(int)color25.G > (double)num2 * 1.1 || (double)(int)color25.B > (double)num2 * 1.2)
									{
										Lighting.GetColor4Slice(num66, num67, slices);
										for (int num71 = 0; num71 < 4; num71++)
										{
											int num72 = 0;
											int num73 = 0;
											Microsoft.Xna.Framework.Color color28 = color25;
											Microsoft.Xna.Framework.Color color29 = slices[num71];
											switch (num71)
											{
											case 1:
												num72 = 8;
												break;
											case 2:
												num73 = 8;
												break;
											case 3:
												num72 = 8;
												num73 = 8;
												break;
											}
											color28.R = (byte)((color25.R + color29.R) / 2);
											color28.G = (byte)((color25.G + color29.G) / 2);
											color28.B = (byte)((color25.B + color29.B) / 2);
											color28.R = (byte)((float)(int)color28.R * num4);
											color28.G = (byte)((float)(int)color28.G * num5);
											color28.B = (byte)((float)(int)color28.B * num6);
											spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2(bgStartX + num3 * num61 + 16 * num63 + num72 + num60, bgStartY + backgroundHeight[2] * num62 + 16 * num64 + num73) + value, new Microsoft.Xna.Framework.Rectangle(16 * num63 + num72 + num60 + 16, 16 * num64 + backgroundHeight[2] * magmaBGFrame + num73, 8, 8), color28, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
										}
									}
									else
									{
										color25.R = (byte)((float)(int)color25.R * num4);
										color25.G = (byte)((float)(int)color25.G * num5);
										color25.B = (byte)((float)(int)color25.B * num6);
										spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2(bgStartX + num3 * num61 + 16 * num63 + num60, bgStartY + backgroundHeight[2] * num62 + 16 * num64) + value, new Microsoft.Xna.Framework.Rectangle(16 * num63 + num60 + 16, 16 * num64 + backgroundHeight[2] * magmaBGFrame, 16, 16), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
									}
								}
								else
								{
									color25.R = (byte)((float)(int)color25.R * num4);
									color25.G = (byte)((float)(int)color25.G * num5);
									color25.B = (byte)((float)(int)color25.B * num6);
									spriteBatch.Draw(TextureAssets.Background[array[5]].Value, new Vector2(bgStartX + num3 * num61 + 16 * num63 + num60, bgStartY + backgroundHeight[2] * num62 + 16 * num64) + value, new Microsoft.Xna.Framework.Rectangle(16 * num63 + num60 + 16, 16 * num64 + backgroundHeight[2] * magmaBGFrame, 16, 16), color25, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
								}
							}
						}
					}
				}
			}
			Lighting.GlobalBrightness = globalBrightness;
			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
		}

		protected void RenderBackground()
		{
			if (drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(backWaterTarget);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			spriteBatch.Begin();
			tileBatch.Begin();
			try
			{
				DrawWaters(isBackground: true);
			}
			catch
			{
			}
			tileBatch.End();
			spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
			base.GraphicsDevice.SetRenderTarget(backgroundTarget);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			spriteBatch.Begin();
			tileBatch.Begin();
			if (ignoreErrors)
			{
				try
				{
					DrawBackground();
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else
			{
				DrawBackground();
			}
			TimeLogger.DetailedDrawReset();
			spriteBatch.End();
			tileBatch.End();
			TimeLogger.DetailedDrawTime(33);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void DrawToMap()
		{
			if (!mapEnabled)
			{
				return;
			}
			int num = maxTilesX / textureMaxWidth;
			int num2 = maxTilesY / textureMaxHeight;
			for (int i = 0; i <= num; i++)
			{
				for (int j = 0; j <= num2; j++)
				{
					if (!checkMap(i, j))
					{
						return;
					}
				}
			}
			if (clearMap)
			{
				for (int k = 0; k <= num; k++)
				{
					for (int l = 0; l <= num2; l++)
					{
						base.GraphicsDevice.SetRenderTarget(mapTarget[k, l]);
						base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
						base.GraphicsDevice.SetRenderTarget(null);
					}
				}
				clearMap = false;
			}
			int num3 = -1;
			int num4 = -1;
			bool flag = false;
			int num5 = 0;
			int num6 = mapMinY;
			int num7 = mapMinY;
			int num8 = mapMaxY;
			int num9 = mapMaxY;
			int num10 = 1;
			if (mapMinY / textureMaxHeight != mapMaxY / textureMaxHeight)
			{
				num8 = textureMaxHeight;
				num7 = textureMaxHeight;
				num10 = 2;
			}
			for (int m = 0; m < num10; m++)
			{
				switch (m)
				{
				case 0:
					mapMinY = num6;
					mapMaxY = num8;
					break;
				case 1:
					mapMinY = num7;
					mapMaxY = num9;
					break;
				}
				if (mapMinX < 0)
				{
					mapMinX = 0;
				}
				if (mapMinX >= maxTilesX)
				{
					mapMinX = maxTilesX - 1;
				}
				if (mapMinY < 0)
				{
					mapMinY = 0;
				}
				if (mapMinY >= maxTilesY)
				{
					mapMinY = maxTilesY - 1;
				}
				for (int n = mapMinX; n < mapMaxX; n++)
				{
					for (int num11 = mapMinY; num11 < mapMaxY; num11++)
					{
						MapTile mapTile = Map[n, num11];
						if (!mapTile.IsChanged || mapTarget[n / textureMaxWidth, num11 / textureMaxHeight].IsContentLost)
						{
							continue;
						}
						num5++;
						if (num5 >= maxMapUpdates)
						{
							continue;
						}
						if (loadMap)
						{
							loadMapLastX = n;
						}
						Map.ConsumeUpdate(n, num11);
						int num12 = n / textureMaxWidth;
						int num13 = num11 / textureMaxHeight;
						if (num12 != num3 || num13 != num4)
						{
							num3 = num12;
							num4 = num13;
							if (flag)
							{
								spriteBatch.End();
								base.GraphicsDevice.SetRenderTarget(null);
							}
							flag = true;
							base.GraphicsDevice.SetRenderTarget(mapTarget[num12, num13]);
							spriteBatch.Begin();
						}
						int num14 = n - num12 * textureMaxWidth;
						int num15 = num11 - num13 * textureMaxHeight;
						Microsoft.Xna.Framework.Color mapTileXnaColor = MapHelper.GetMapTileXnaColor(mapTile);
						int num16 = 1;
						int num17 = 1;
						int num18 = num11 + 1;
						while (num18 < mapMaxY)
						{
							MapTile other;
							MapTile mapTile2 = (other = Map[n, num18]);
							if (!mapTile2.IsChanged || !mapTile.Equals(other) || num18 / textureMaxHeight != num13)
							{
								break;
							}
							Map.ConsumeUpdate(n, num18);
							num16++;
							num18++;
							num11++;
						}
						if (num16 == 1)
						{
							for (num18 = n + 1; num18 < mapMaxX; num18++)
							{
								MapTile other;
								MapTile mapTile2 = (other = Map[num18, num11]);
								if (!mapTile2.IsChanged || !mapTile.Equals(other) || num18 / textureMaxWidth != num12)
								{
									break;
								}
								Map.ConsumeUpdate(num18, num11);
								num17++;
							}
						}
						spriteBatch.Draw(TextureAssets.MagicPixel.Value, new Vector2(num14, num15), new Microsoft.Xna.Framework.Rectangle(0, 0, num17, num16), mapTileXnaColor, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			for (int num19 = 0; num19 < MapHelper.numUpdateTile; num19++)
			{
				int num20 = MapHelper.updateTileX[num19];
				int num21 = MapHelper.updateTileY[num19];
				MapTile mapTile3 = Map[num20, num21];
				if (!mapTile3.IsChanged)
				{
					continue;
				}
				Map.ConsumeUpdate(num20, num21);
				int num22 = num20 / textureMaxWidth;
				int num23 = num21 / textureMaxHeight;
				if (num22 != num3 || num23 != num4)
				{
					num3 = num22;
					num4 = num23;
					if (flag)
					{
						spriteBatch.End();
						base.GraphicsDevice.SetRenderTarget(null);
					}
					flag = true;
					base.GraphicsDevice.SetRenderTarget(mapTarget[num22, num23]);
					spriteBatch.Begin();
				}
				int num24 = num20 - num22 * textureMaxWidth;
				int num25 = num21 - num23 * textureMaxHeight;
				Microsoft.Xna.Framework.Color mapTileXnaColor2 = MapHelper.GetMapTileXnaColor(mapTile3);
				spriteBatch.Draw(TextureAssets.MagicPixel.Value, new Vector2(num24, num25), new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1), mapTileXnaColor2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
			MapHelper.numUpdateTile = 0;
			if (flag)
			{
				spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
			}
			mapReady = true;
			loadMapLastX = 0;
			loadMap = false;
			loadMapLock = false;
		}

		protected void DrawToMap_Section(int secX, int secY)
		{
			Stopwatch stopwatch = Stopwatch.StartNew();
			Microsoft.Xna.Framework.Color[] mapColorCacheArray = _mapColorCacheArray;
			int num = secX * 200;
			int num2 = num + 200;
			int num3 = secY * 150;
			int num4 = num3 + 150;
			int num5 = num / textureMaxWidth;
			int num6 = num3 / textureMaxHeight;
			int num7 = num % textureMaxWidth;
			int num8 = num3 % textureMaxHeight;
			if (!checkMap(num5, num6))
			{
				return;
			}
			int num9 = 0;
			_ = Microsoft.Xna.Framework.Color.Transparent;
			for (int i = num3; i < num4; i++)
			{
				for (int j = num; j < num2; j++)
				{
					MapTile mapTile = Map[j, i];
					mapColorCacheArray[num9] = MapHelper.GetMapTileXnaColor(mapTile);
					num9++;
				}
			}
			try
			{
				base.GraphicsDevice.SetRenderTarget(mapTarget[num5, num6]);
			}
			catch (ObjectDisposedException)
			{
				initMap[num5, num6] = false;
				return;
			}
			spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
			double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
			mapSectionTexture.SetData(mapColorCacheArray, 0, mapColorCacheArray.Length);
			_ = stopwatch.Elapsed.TotalMilliseconds;
			totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
			spriteBatch.Draw(mapSectionTexture, new Vector2(num7, num8), Microsoft.Xna.Framework.Color.White);
			spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
			_ = stopwatch.Elapsed.TotalMilliseconds;
			stopwatch.Stop();
		}

		public static string ValueToCoins(int value)
		{
			int num = value;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			int num5 = 0;
			while (num >= 1000000)
			{
				num -= 1000000;
				num2++;
			}
			while (num >= 10000)
			{
				num -= 10000;
				num3++;
			}
			while (num >= 100)
			{
				num -= 100;
				num4++;
			}
			num5 = num;
			string text = "";
			if (num2 > 0)
			{
				text += string.Format("{0} {1} ", num2, Language.GetTextValue("Currency.Platinum").ToLower());
			}
			if (num3 > 0)
			{
				text += string.Format("{0} {1} ", num3, Language.GetTextValue("Currency.Gold").ToLower());
			}
			if (num4 > 0)
			{
				text += string.Format("{0} {1} ", num4, Language.GetTextValue("Currency.Silver").ToLower());
			}
			if (num5 > 0)
			{
				text += string.Format("{0} {1} ", num5, Language.GetTextValue("Currency.Copper").ToLower());
			}
			if (text.Length > 0)
			{
				text = text.Substring(0, text.Length - 1);
			}
			return text;
		}

		private static void UpdateMinimapAnchors()
		{
			int num = 240;
			int num2 = 240;
			_minimapTopRightAnchorOffsetTowardsLeft = 292;
			_minimapTopRightAnchorOffsetTowardsBottom = 90;
			_minimapTopRightAnchorOffsetTowardsLeft = (int)((float)(52 + num / 2) + MapScale * (float)num / 2f);
			_minimapTopRightAnchorOffsetTowardsBottom = (int)((float)(90 + num2 / 2) - MapScale * (float)num2 / 2f);
			_minimapTopRightAnchorOffsetTowardsLeft = 52 + (int)(240f * MapScale);
			_minimapTopRightAnchorOffsetTowardsBottom = 90;
		}

		protected void DrawMap(GameTime gameTime)
		{
			string text = "";
			if (!mapEnabled || !mapReady)
			{
				return;
			}
			float num = 0f;
			float num2 = 0f;
			float num3 = num;
			float num4 = num2;
			float num5 = 2f;
			byte b = byte.MaxValue;
			_ = maxTilesX / textureMaxWidth;
			int num6 = maxTilesY / textureMaxHeight;
			float num7 = Lighting.OffScreenTiles;
			float num8 = Lighting.OffScreenTiles;
			float num9 = maxTilesX - Lighting.OffScreenTiles - 1;
			float num10 = maxTilesY - Lighting.OffScreenTiles - 42;
			float num11 = 0f;
			float num12 = 0f;
			num7 = 10f;
			num8 = 10f;
			num9 = maxTilesX - 10;
			num10 = maxTilesY - 10;
			for (int i = 0; i < mapTarget.GetLength(0); i++)
			{
				for (int j = 0; j < mapTarget.GetLength(1); j++)
				{
					if (mapTarget[i, j] != null)
					{
						if (mapTarget[i, j].IsContentLost && !mapWasContentLost[i, j])
						{
							mapWasContentLost[i, j] = true;
							refreshMap = true;
							clearMap = true;
						}
						else if (!mapTarget[i, j].IsContentLost && mapWasContentLost[i, j])
						{
							mapWasContentLost[i, j] = false;
						}
					}
				}
			}
			num = 200f;
			num2 = 300f;
			float num13 = 0f;
			float num14 = 0f;
			float num15 = num9 - 1f;
			float num16 = num10 - 1f;
			num5 = (mapFullscreen ? mapFullscreenScale : ((mapStyle != 1) ? mapOverlayScale : mapMinimapScale));
			bool flag = false;
			float mapScale = MapScale;
			float num17 = 1f / mapScale;
			int num18 = mouseX;
			int num19 = mouseY;
			Matrix uIScaleMatrix = UIScaleMatrix;
			Matrix transformMatrix = uIScaleMatrix;
			Matrix transformMatrix2 = uIScaleMatrix;
			Matrix matrix = Matrix.CreateScale(mapScale);
			CoinLossRevengeSystem.RevengeMarker revengeMarker = null;
			int num20 = -1;
			if (mapStyle != 1)
			{
				transformMatrix = Matrix.Identity;
			}
			if (mapFullscreen)
			{
				transformMatrix = Matrix.Identity;
			}
			if (!mapFullscreen && mapStyle == 1)
			{
				transformMatrix *= matrix;
				transformMatrix2 *= matrix;
			}
			if (!mapFullscreen)
			{
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix);
				if (num5 > 1f)
				{
					flag = true;
				}
			}
			if (mapFullscreen)
			{
				if (mouseLeft && base.IsActive && !CaptureManager.Instance.UsingMap)
				{
					if (mouseLeftRelease)
					{
						grabMapX = mouseX;
						grabMapY = mouseY;
					}
					else
					{
						float num21 = (float)mouseX - grabMapX;
						float num22 = (float)mouseY - grabMapY;
						grabMapX = mouseX;
						grabMapY = mouseY;
						num21 *= 0.06255f;
						num22 *= 0.06255f;
						mapFullscreenPos.X -= num21 * (16f / mapFullscreenScale);
						mapFullscreenPos.Y -= num22 * (16f / mapFullscreenScale);
					}
				}
				player[myPlayer].mouseInterface = true;
				float num23 = (float)screenWidth / (float)maxTilesX * 0.599f;
				if (mapFullscreenScale < num23)
				{
					mapFullscreenScale = num23;
				}
				if (mapFullscreenScale > 31.2f)
				{
					mapFullscreenScale = 31.18f;
				}
				num5 = mapFullscreenScale;
				b = byte.MaxValue;
				if (mapFullscreenPos.X < num7)
				{
					mapFullscreenPos.X = num7;
				}
				if (mapFullscreenPos.X > num9)
				{
					mapFullscreenPos.X = num9;
				}
				if (mapFullscreenPos.Y < num8)
				{
					mapFullscreenPos.Y = num8;
				}
				if (mapFullscreenPos.Y > num10)
				{
					mapFullscreenPos.Y = num10;
				}
				float num24 = mapFullscreenPos.X;
				float num25 = mapFullscreenPos.Y;
				if (resetMapFull)
				{
					resetMapFull = false;
					num24 = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
					num25 = (screenPosition.Y + (float)(screenHeight / 2)) / 16f;
					mapFullscreenPos.X = num24;
					mapFullscreenPos.Y = num25;
				}
				num24 *= num5;
				num25 *= num5;
				num = 0f - num24 + (float)(screenWidth / 2);
				num2 = 0f - num25 + (float)(screenHeight / 2);
				num += num7 * num5;
				num2 += num8 * num5;
				float num26 = maxTilesX / 840;
				num26 *= mapFullscreenScale;
				float num27 = num;
				float num28 = num2;
				float num29 = TextureAssets.Map.Width();
				float num30 = TextureAssets.Map.Height();
				if (maxTilesX == 8400)
				{
					num26 *= 0.999f;
					num27 -= 40.6f * num26;
					num28 = num2 - 5f * num26;
					num29 -= 8.045f;
					num29 *= num26;
					num30 += 0.12f;
					num30 *= num26;
					if ((double)num26 < 1.2)
					{
						num30 += 1f;
					}
				}
				else if (maxTilesX == 6400)
				{
					num26 *= 1.09f;
					num27 -= 38.8f * num26;
					num28 = num2 - 3.85f * num26;
					num29 -= 13.6f;
					num29 *= num26;
					num30 -= 6.92f;
					num30 *= num26;
					if ((double)num26 < 1.2)
					{
						num30 += 2f;
					}
				}
				else if (maxTilesX == 6300)
				{
					num26 *= 1.09f;
					num27 -= 39.8f * num26;
					num28 = num2 - 4.08f * num26;
					num29 -= 26.69f;
					num29 *= num26;
					num30 -= 6.92f;
					num30 *= num26;
					if ((double)num26 < 1.2)
					{
						num30 += 2f;
					}
				}
				else if (maxTilesX == 4200)
				{
					num26 *= 0.998f;
					num27 -= 37.3f * num26;
					num28 -= 1.7f * num26;
					num29 -= 16f;
					num29 *= num26;
					num30 -= 8.31f;
					num30 *= num26;
				}
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				flag = true;
				DrawMapFullscreenBackground(screenPosition, screenWidth, screenHeight);
				Microsoft.Xna.Framework.Rectangle destinationRectangle = new Microsoft.Xna.Framework.Rectangle((int)num27, (int)num28, (int)num29, (int)num30);
				spriteBatch.Draw(TextureAssets.Map.Value, destinationRectangle, Microsoft.Xna.Framework.Color.White);
				if (mouseLeft && mouseLeftRelease)
				{
					double totalSeconds = gameTime.TotalGameTime.TotalSeconds;
					if (totalSeconds - _lastPingMouseDownTime < 0.5 && Vector2.Distance(MouseScreen, _lastPingMousePosition) < 2f)
					{
						TriggerPing((MouseScreen - new Vector2(num - 10f * num5, num2 - 10f * num5)) / num5);
					}
					_lastPingMouseDownTime = totalSeconds;
					_lastPingMousePosition = MouseScreen;
				}
				if (num5 < 1f)
				{
					spriteBatch.End();
					spriteBatch.Begin();
					flag = false;
				}
			}
			else if (mapStyle == 1)
			{
				UpdateMinimapAnchors();
				miniMapWidth = 240;
				miniMapHeight = 240;
				miniMapX = screenWidth - _minimapTopRightAnchorOffsetTowardsLeft;
				miniMapY = _minimapTopRightAnchorOffsetTowardsBottom;
				miniMapX = (int)((float)miniMapX * num17);
				miniMapY = (int)((float)miniMapY * num17);
				mouseX = (int)((float)mouseX * num17);
				mouseY = (int)((float)mouseY * num17);
				_ = (float)miniMapHeight / (float)maxTilesY;
				if ((double)mapMinimapScale < 0.2)
				{
					mapMinimapScale = 0.2f;
				}
				if (mapMinimapScale > 3f)
				{
					mapMinimapScale = 3f;
				}
				if ((double)mapMinimapAlpha < 0.01)
				{
					mapMinimapAlpha = 0.01f;
				}
				if (mapMinimapAlpha > 1f)
				{
					mapMinimapAlpha = 1f;
				}
				num5 = mapMinimapScale;
				b = (byte)(255f * mapMinimapAlpha);
				num = miniMapX;
				num2 = miniMapY;
				num3 = num;
				num4 = num2;
				float num31 = (screenPosition.X + (float)(PlayerInput.RealScreenWidth / 2)) / 16f;
				float num32 = (screenPosition.Y + (float)(PlayerInput.RealScreenHeight / 2)) / 16f;
				num11 = (0f - (num31 - (float)(int)((screenPosition.X + (float)(PlayerInput.RealScreenWidth / 2)) / 16f))) * num5;
				num12 = (0f - (num32 - (float)(int)((screenPosition.Y + (float)(PlayerInput.RealScreenHeight / 2)) / 16f))) * num5;
				num15 = (float)miniMapWidth / num5;
				num16 = (float)miniMapHeight / num5;
				num13 = (float)(int)num31 - num15 / 2f;
				num14 = (float)(int)num32 - num16 / 2f;
				_ = (float)maxTilesY + num14;
				float num33 = num3 - 6f;
				float num34 = num4 - 6f;
				ActiveMinimapFrame.MinimapPosition = new Vector2(num33 + 10f, num34 + 10f);
				ActiveMinimapFrame.Update();
				ActiveMinimapFrame.DrawBackground(spriteBatch);
			}
			else if (mapStyle == 2)
			{
				float num35 = (float)screenWidth / (float)maxTilesX;
				if (mapOverlayScale < num35)
				{
					mapOverlayScale = num35;
				}
				if (mapOverlayScale > 16f * GameViewMatrix.Zoom.X)
				{
					mapOverlayScale = 16f * GameViewMatrix.Zoom.X;
				}
				if ((double)mapOverlayAlpha < 0.01)
				{
					mapOverlayAlpha = 0.01f;
				}
				if (mapOverlayAlpha > 1f)
				{
					mapOverlayAlpha = 1f;
				}
				num5 = mapOverlayScale;
				b = (byte)(255f * mapOverlayAlpha);
				_ = maxTilesX;
				_ = maxTilesY;
				float num36 = (screenPosition.X + (float)(screenWidth / 2)) / 16f;
				float num37 = (screenPosition.Y + (float)(screenHeight / 2)) / 16f;
				num36 *= num5;
				float num38 = num37 * num5;
				num = 0f - num36 + (float)(screenWidth / 2);
				num2 = 0f - num38 + (float)(screenHeight / 2);
				num += num7 * num5;
				num2 += num8 * num5;
			}
			if (mapStyle == 1 && !mapFullscreen)
			{
				if (num13 < num7)
				{
					num -= (num13 - num7) * num5;
				}
				if (num14 < num8)
				{
					num2 -= (num14 - num8) * num5;
				}
			}
			num15 = num13 + num15;
			num16 = num14 + num16;
			if (num13 > num7)
			{
				num7 = num13;
			}
			if (num14 > num8)
			{
				num8 = num14;
			}
			if (num15 < num9)
			{
				num9 = num15;
			}
			if (num16 < num10)
			{
				num10 = num16;
			}
			float num39 = (float)textureMaxWidth * num5;
			float num40 = (float)textureMaxHeight * num5;
			float num41 = num;
			float num42 = 0f;
			for (int k = 0; k <= 4; k++)
			{
				if (!((float)((k + 1) * textureMaxWidth) > num7) || !((float)(k * textureMaxWidth) < num7 + num9))
				{
					continue;
				}
				for (int l = 0; l <= num6; l++)
				{
					if ((float)((l + 1) * textureMaxHeight) > num8 && (float)(l * textureMaxHeight) < num8 + num10)
					{
						float num43 = num + (float)(int)((float)k * num39);
						float num44 = num2 + (float)(int)((float)l * num40);
						float num45 = k * textureMaxWidth;
						float num46 = l * textureMaxHeight;
						float num47 = 0f;
						float num48 = 0f;
						if (num45 < num7)
						{
							num47 = num7 - num45;
							num43 = num;
						}
						else
						{
							num43 -= num7 * num5;
						}
						if (num46 < num8)
						{
							num48 = num8 - num46;
							num44 = num2;
						}
						else
						{
							num44 -= num8 * num5;
						}
						num43 = num41;
						float num49 = textureMaxWidth;
						float num50 = textureMaxHeight;
						float num51 = (k + 1) * textureMaxWidth;
						float num52 = (l + 1) * textureMaxHeight;
						if (num51 >= num9)
						{
							num49 -= num51 - num9;
						}
						if (num52 >= num10)
						{
							num50 -= num52 - num10;
						}
						num43 += num11;
						num44 += num12;
						if (num49 > num47)
						{
							Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle((int)num47, (int)num48, (int)num49 - (int)num47, (int)num50 - (int)num48);
							spriteBatch.Draw(mapTarget[k, l], new Vector2(num43, num44), value, new Microsoft.Xna.Framework.Color(b, b, b, b), 0f, default(Vector2), num5, SpriteEffects.None, 0f);
						}
						num42 = (float)((int)num49 - (int)num47) * num5;
					}
					if (l == num6)
					{
						num41 += num42;
					}
				}
			}
			if (flag)
			{
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix);
			}
			if (!mapFullscreen)
			{
				if (mapStyle == 2)
				{
					float num53 = (num5 * 0.2f * 2f + 1f) / 3f;
					if (num53 > 1f)
					{
						num53 = 1f;
					}
					num53 *= UIScale;
					MapIcons.Draw(Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num53, text);
					revengeMarker = NPC.RevengeManager.DrawMapIcons(spriteBatch, Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num53, text);
					DrawMiscMapIcons(spriteBatch, Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num53, text);
					spriteBatch.End();
					if (revengeMarker != null)
					{
						spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, uIScaleMatrix);
						try
						{
							revengeMarker.UseMouseOver(spriteBatch, text, num53);
						}
						catch (Exception e)
						{
							TimeLogger.DrawException(e);
						}
						spriteBatch.End();
					}
					spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix);
					try
					{
						for (int m = 0; m < 200; m++)
						{
							if (npc[m].active && npc[m].townNPC)
							{
								ITownNPCProfile profile;
								int num54 = ((!TownNPCProfiles.Instance.GetProfile(npc[m].type, out profile)) ? NPC.TypeToDefaultHeadIndex(npc[m].type) : profile.GetHeadTextureIndex(npc[m]));
								if (num54 > 0)
								{
									SpriteEffects dir = SpriteEffects.None;
									if (npc[m].direction > 0)
									{
										dir = SpriteEffects.FlipHorizontally;
									}
									float num55 = (npc[m].position.X + (float)(npc[m].width / 2)) / 16f * num5;
									float num56 = (npc[m].position.Y + (float)(npc[m].height / 2)) / 16f * num5;
									num55 += num;
									num56 += num2;
									num55 -= 10f * num5;
									num56 -= 10f * num5;
									DrawNPCHeadFriendly(npc[m], b, num53, dir, num54, num55, num56);
								}
							}
							if (!npc[m].active || npc[m].GetBossHeadTextureIndex() == -1)
							{
								continue;
							}
							float bossHeadRotation = npc[m].GetBossHeadRotation();
							SpriteEffects bossHeadSpriteEffects = npc[m].GetBossHeadSpriteEffects();
							Vector2 vector = npc[m].Center + new Vector2(0f, npc[m].gfxOffY);
							if (npc[m].type == 134)
							{
								Vector2 center = npc[m].Center;
								int num57 = 1;
								int num58 = (int)npc[m].ai[0];
								while (num57 < 15 && npc[num58].active && npc[num58].type >= 134 && npc[num58].type <= 136)
								{
									num57++;
									center += npc[num58].Center;
									num58 = (int)npc[num58].ai[0];
								}
								center /= (float)num57;
								vector = center;
							}
							int bossHeadTextureIndex = npc[m].GetBossHeadTextureIndex();
							float num59 = vector.X / 16f * num5;
							float num60 = vector.Y / 16f * num5;
							num59 += num;
							num60 += num2;
							num59 -= 10f * num5;
							num60 -= 10f * num5;
							DrawNPCHeadBoss(npc[m], b, num53, bossHeadRotation, bossHeadSpriteEffects, bossHeadTextureIndex, num59, num60);
						}
					}
					catch (Exception e2)
					{
						TimeLogger.DrawException(e2);
					}
					spriteBatch.End();
					spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix);
					for (int n = 0; n < 255; n++)
					{
						if (player[n].active && !player[n].dead && n != myPlayer && ((!player[myPlayer].hostile && !player[n].hostile) || (player[myPlayer].team == player[n].team && player[n].team != 0) || n == myPlayer))
						{
							float num61 = (player[n].position.X + (float)(player[n].width / 2)) / 16f * num5;
							float num62 = player[n].position.Y / 16f * num5;
							num61 += num;
							num62 += num2;
							num61 -= 6f;
							num62 -= 2f;
							num62 -= 2f - num5 / 5f * 2f;
							num61 -= 10f * num5;
							num62 -= 10f * num5;
							Microsoft.Xna.Framework.Color playerHeadBordersColor = GetPlayerHeadBordersColor(player[n]);
							MapPlayerRenderer.DrawPlayerHead(Camera, player[n], new Vector2(num61, num62), (float)(int)b / 255f, num53, playerHeadBordersColor);
						}
					}
					spriteBatch.End();
					spriteBatch.Begin();
				}
				if (mapStyle == 1)
				{
					float num63 = (num5 * 0.25f * 2f + 1f) / 3f;
					if (num63 > 1f)
					{
						num63 = 1f;
					}
					MapIcons.Draw(new Vector2(num13, num14), new Vector2(num3 + num11, num4 + num12), new Microsoft.Xna.Framework.Rectangle(miniMapX, miniMapY, miniMapWidth, miniMapHeight), num5, num63, text);
					revengeMarker = NPC.RevengeManager.DrawMapIcons(spriteBatch, new Vector2(num13, num14), new Vector2(num3 + num11, num4 + num12), new Microsoft.Xna.Framework.Rectangle(miniMapX, miniMapY, miniMapWidth, miniMapHeight), num5, num63, text);
					DrawMiscMapIcons(spriteBatch, new Vector2(num13, num14), new Vector2(num3 + num11, num4 + num12), new Microsoft.Xna.Framework.Rectangle(miniMapX, miniMapY, miniMapWidth, miniMapHeight), num5, num63, text);
					spriteBatch.End();
					spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix2);
					for (int num64 = 0; num64 < 200; num64++)
					{
						if (npc[num64].active && npc[num64].townNPC)
						{
							ITownNPCProfile profile2;
							int num65 = ((!TownNPCProfiles.Instance.GetProfile(npc[num64].type, out profile2)) ? NPC.TypeToDefaultHeadIndex(npc[num64].type) : profile2.GetHeadTextureIndex(npc[num64]));
							if (num65 > 0)
							{
								SpriteEffects dir2 = SpriteEffects.None;
								if (npc[num64].direction > 0)
								{
									dir2 = SpriteEffects.FlipHorizontally;
								}
								float num66 = ((npc[num64].position.X + (float)npc[num64].width / 2f) / 16f - num13) * num5;
								float num67 = ((npc[num64].position.Y + npc[num64].gfxOffY + (float)npc[num64].height / 2f) / 16f - num14) * num5;
								num66 += num3;
								num67 += num4;
								num67 -= 2f * num5 / 5f;
								num66 += num11;
								num67 += num12;
								if (num66 > (float)(miniMapX + 12) && num66 < (float)(miniMapX + miniMapWidth - 16) && num67 > (float)(miniMapY + 10) && num67 < (float)(miniMapY + miniMapHeight - 14))
								{
									float num68 = num66 - (float)(TextureAssets.NpcHead[num65].Width() / 2) * num63;
									float num69 = num67 - (float)(TextureAssets.NpcHead[num65].Height() / 2) * num63;
									float num70 = num68 + (float)TextureAssets.NpcHead[num65].Width() * num63;
									float num71 = num69 + (float)TextureAssets.NpcHead[num65].Height() * num63;
									if ((float)mouseX >= num68 && (float)mouseX <= num70 && (float)mouseY >= num69 && (float)mouseY <= num71)
									{
										text = npc[num64].FullName;
									}
									DrawNPCHeadFriendly(npc[num64], b, num63, dir2, num65, num66, num67);
								}
							}
						}
						if (!npc[num64].active || npc[num64].GetBossHeadTextureIndex() == -1)
						{
							continue;
						}
						float bossHeadRotation2 = npc[num64].GetBossHeadRotation();
						SpriteEffects bossHeadSpriteEffects2 = npc[num64].GetBossHeadSpriteEffects();
						Vector2 vector2 = npc[num64].Center + new Vector2(0f, npc[num64].gfxOffY);
						if (npc[num64].type == 134)
						{
							Vector2 center2 = npc[num64].Center;
							int num72 = 1;
							int num73 = (int)npc[num64].ai[0];
							while (num72 < 15 && npc[num73].active && npc[num73].type >= 134 && npc[num73].type <= 136)
							{
								num72++;
								center2 += npc[num73].Center;
								num73 = (int)npc[num73].ai[0];
							}
							center2 /= (float)num72;
							vector2 = center2;
						}
						int bossHeadTextureIndex2 = npc[num64].GetBossHeadTextureIndex();
						float num74 = (vector2.X / 16f - num13) * num5;
						float num75 = (vector2.Y / 16f - num14) * num5;
						num74 += num3;
						num75 += num4;
						num75 -= 2f * num5 / 5f;
						num74 += num11;
						num75 += num12;
						if (num74 > (float)(miniMapX + 12) && num74 < (float)(miniMapX + miniMapWidth - 16) && num75 > (float)(miniMapY + 10) && num75 < (float)(miniMapY + miniMapHeight - 14))
						{
							float num76 = num74 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Width() / 2) * num63;
							float num77 = num75 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Height() / 2) * num63;
							float num78 = num76 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Width() * num63;
							float num79 = num77 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex2].Height() * num63;
							if ((float)mouseX >= num76 && (float)mouseX <= num78 && (float)mouseY >= num77 && (float)mouseY <= num79)
							{
								text = npc[num64].GivenOrTypeName;
							}
							DrawNPCHeadBoss(npc[num64], b, num63, bossHeadRotation2, bossHeadSpriteEffects2, bossHeadTextureIndex2, num74, num75);
						}
					}
					spriteBatch.End();
					spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix2);
					for (int num80 = 0; num80 < 255; num80++)
					{
						if (!player[num80].active || ((player[myPlayer].hostile || player[num80].hostile) && (player[myPlayer].team != player[num80].team || player[num80].team == 0) && num80 != myPlayer))
						{
							continue;
						}
						float num81 = ((player[num80].position.X + (float)(player[num80].width / 2)) / 16f - num13) * num5;
						float num82 = ((player[num80].position.Y + player[num80].gfxOffY + (float)(player[num80].height / 2)) / 16f - num14) * num5;
						num81 += num3;
						num82 += num4;
						num81 -= 6f;
						num82 -= 6f;
						num82 -= 2f - num5 / 5f * 2f;
						num81 += num11;
						num82 += num12;
						if (!player[num80].dead && num81 > (float)(miniMapX + 6) && num81 < (float)(miniMapX + miniMapWidth - 16) && num82 > (float)(miniMapY + 6) && num82 < (float)(miniMapY + miniMapHeight - 14))
						{
							Microsoft.Xna.Framework.Color playerHeadBordersColor2 = GetPlayerHeadBordersColor(player[num80]);
							MapPlayerRenderer.DrawPlayerHead(Camera, player[num80], new Vector2(num81, num82), (float)(int)b / 255f, num63, playerHeadBordersColor2);
							if (num80 != myPlayer)
							{
								float num83 = num81 + 4f - 14f * num63;
								float num84 = num82 + 2f - 14f * num63;
								float num85 = num83 + 28f * num63;
								float num86 = num84 + 28f * num63;
								if ((float)mouseX >= num83 && (float)mouseX <= num85 && (float)mouseY >= num84 && (float)mouseY <= num86)
								{
									text = player[num80].name;
								}
							}
						}
						if (!player[num80].showLastDeath)
						{
							continue;
						}
						num81 = (player[num80].lastDeathPostion.X / 16f - num13) * num5;
						num82 = (player[num80].lastDeathPostion.Y / 16f - num14) * num5;
						num81 += num3;
						num82 += num4;
						num82 -= 2f - num5 / 5f * 2f;
						num81 += num11;
						num82 += num12;
						if (num81 > (float)(miniMapX + 8) && num81 < (float)(miniMapX + miniMapWidth - 18) && num82 > (float)(miniMapY + 8) && num82 < (float)(miniMapY + miniMapHeight - 16))
						{
							spriteBatch.Draw(TextureAssets.MapDeath.Value, new Vector2(num81, num82), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.MapDeath.Width(), TextureAssets.MapDeath.Height()), Microsoft.Xna.Framework.Color.White, 0f, new Vector2((float)TextureAssets.MapDeath.Width() * 0.5f, (float)TextureAssets.MapDeath.Height() * 0.5f), num63, SpriteEffects.None, 0f);
							float num87 = num81 + 4f - 14f * num63;
							float num88 = num82 + 2f - 14f * num63;
							num87 -= 4f;
							num88 -= 4f;
							float num89 = num87 + 28f * num63;
							float num90 = num88 + 28f * num63;
							if ((float)mouseX >= num87 && (float)mouseX <= num89 && (float)mouseY >= num88 && (float)mouseY <= num90)
							{
								num20 = num80;
							}
						}
					}
					spriteBatch.End();
					spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, transformMatrix2);
					ActiveMinimapFrame.DrawForeground(spriteBatch);
					spriteBatch.End();
					spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, uIScaleMatrix);
					if (num20 != -1)
					{
						TimeSpan timeSpan = DateTime.Now - player[num20].lastDeathTime;
						text = Language.GetTextValue("Game.PlayerDeathTime", player[num20].name, Lang.LocalizedDuration(timeSpan, abbreviated: false, showAllAvailableUnits: false));
					}
					else
					{
						revengeMarker?.UseMouseOver(spriteBatch, text);
					}
				}
			}
			if (mapFullscreen)
			{
				int num91 = (int)((0f - num + (float)mouseX) / num5 + num7);
				int num92 = (int)((0f - num2 + (float)mouseY) / num5 + num8);
				bool flag2 = false;
				if ((float)num91 < num7)
				{
					flag2 = true;
				}
				if ((float)num91 >= num9)
				{
					flag2 = true;
				}
				if ((float)num92 < num8)
				{
					flag2 = true;
				}
				if ((float)num92 >= num10)
				{
					flag2 = true;
				}
				if (!flag2 && Map[num91, num92].Light > 40)
				{
					int type = Map[num91, num92].Type;
					int num93 = MapHelper.tileLookup[21];
					int num94 = MapHelper.tileLookup[441];
					int num95 = MapHelper.tileOptionCounts[21];
					int num96 = MapHelper.tileLookup[467];
					int num97 = MapHelper.tileLookup[468];
					int num98 = MapHelper.tileOptionCounts[467];
					int num99 = MapHelper.tileLookup[88];
					int num100 = MapHelper.tileOptionCounts[88];
					LocalizedText[] chestType = Lang.chestType;
					LocalizedText[] chestType2 = Lang.chestType2;
					if (type >= num93 && type < num93 + num95)
					{
						Tile tile = Main.tile[num91, num92];
						if (tile != null)
						{
							int num101 = num91;
							int num102 = num92;
							if (tile.frameX % 36 != 0)
							{
								num101--;
							}
							if (tile.frameY % 36 != 0)
							{
								num102--;
							}
							text = DrawMap_FindChestName(chestType, tile, num101, num102);
						}
					}
					else if (type >= num96 && type < num96 + num98)
					{
						Tile tile2 = Main.tile[num91, num92];
						if (tile2 != null)
						{
							int num103 = num91;
							int num104 = num92;
							if (tile2.frameX % 36 != 0)
							{
								num103--;
							}
							if (tile2.frameY % 36 != 0)
							{
								num104--;
							}
							text = DrawMap_FindChestName(chestType2, tile2, num103, num104);
						}
					}
					else if (type >= num94 && type < num94 + num95)
					{
						Tile tile3 = Main.tile[num91, num92];
						if (tile3 != null)
						{
							int num105 = num91;
							int num106 = num92;
							if (tile3.frameX % 36 != 0)
							{
								num105--;
							}
							if (tile3.frameY % 36 != 0)
							{
								num106--;
							}
							text = chestType[tile3.frameX / 36].Value;
						}
					}
					else if (type >= num97 && type < num97 + num98)
					{
						Tile tile4 = Main.tile[num91, num92];
						if (tile4 != null)
						{
							int num107 = num91;
							int num108 = num92;
							if (tile4.frameX % 36 != 0)
							{
								num107--;
							}
							if (tile4.frameY % 36 != 0)
							{
								num108--;
							}
							text = chestType2[tile4.frameX / 36].Value;
						}
					}
					else if (type >= num99 && type < num99 + num100)
					{
						Tile tile5 = Main.tile[num91, num92];
						if (tile5 != null)
						{
							int num109 = num92;
							int x = num91 - tile5.frameX % 54 / 18;
							if (tile5.frameY % 36 != 0)
							{
								num109--;
							}
							int num110 = Chest.FindChest(x, num109);
							text = ((num110 < 0) ? Lang.dresserType[0].Value : ((!(chest[num110].name != "")) ? Lang.dresserType[tile5.frameX / 54].Value : (Lang.dresserType[tile5.frameX / 54].Value + ": " + chest[num110].name)));
						}
					}
					else
					{
						text = Lang.GetMapObjectName(type);
					}
				}
				float num111 = (num5 * 0.25f * 2f + 1f) / 3f;
				if (num111 > 1f)
				{
					num111 = 1f;
				}
				num111 = 1f;
				num111 = UIScale;
				revengeMarker = NPC.RevengeManager.DrawMapIcons(spriteBatch, Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num111, text);
				DrawMiscMapIcons(spriteBatch, Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num111, text);
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				for (int num112 = 0; num112 < 200; num112++)
				{
					if (npc[num112].active && npc[num112].townNPC)
					{
						ITownNPCProfile profile3;
						int num113 = ((!TownNPCProfiles.Instance.GetProfile(npc[num112].type, out profile3)) ? NPC.TypeToDefaultHeadIndex(npc[num112].type) : profile3.GetHeadTextureIndex(npc[num112]));
						if (num113 > 0)
						{
							SpriteEffects dir3 = SpriteEffects.None;
							if (npc[num112].direction > 0)
							{
								dir3 = SpriteEffects.FlipHorizontally;
							}
							float num114 = (npc[num112].position.X + (float)(npc[num112].width / 2)) / 16f * num5;
							float num115 = (npc[num112].position.Y + npc[num112].gfxOffY + (float)(npc[num112].height / 2)) / 16f * num5;
							num114 += num;
							num115 += num2;
							num114 -= 10f * num5;
							num115 -= 10f * num5;
							float num116 = num114 - (float)(TextureAssets.NpcHead[num113].Width() / 2) * num111;
							float num117 = num115 - (float)(TextureAssets.NpcHead[num113].Height() / 2) * num111;
							float num118 = num116 + (float)TextureAssets.NpcHead[num113].Width() * num111;
							float num119 = num117 + (float)TextureAssets.NpcHead[num113].Height() * num111;
							if ((float)mouseX >= num116 && (float)mouseX <= num118 && (float)mouseY >= num117 && (float)mouseY <= num119)
							{
								text = npc[num112].FullName;
							}
							DrawNPCHeadFriendly(npc[num112], b, num111, dir3, num113, num114, num115);
						}
					}
					if (!npc[num112].active || npc[num112].GetBossHeadTextureIndex() == -1)
					{
						continue;
					}
					float bossHeadRotation3 = npc[num112].GetBossHeadRotation();
					SpriteEffects bossHeadSpriteEffects3 = npc[num112].GetBossHeadSpriteEffects();
					Vector2 vector3 = npc[num112].Center + new Vector2(0f, npc[num112].gfxOffY);
					if (npc[num112].type == 134)
					{
						Vector2 center3 = npc[num112].Center;
						int num120 = 1;
						int num121 = (int)npc[num112].ai[0];
						while (num120 < 15 && npc[num121].active && npc[num121].type >= 134 && npc[num121].type <= 136)
						{
							num120++;
							center3 += npc[num121].Center;
							num121 = (int)npc[num121].ai[0];
						}
						center3 /= (float)num120;
						vector3 = center3;
					}
					int bossHeadTextureIndex3 = npc[num112].GetBossHeadTextureIndex();
					float num122 = vector3.X / 16f * num5;
					float num123 = vector3.Y / 16f * num5;
					num122 += num;
					num123 += num2;
					num122 -= 10f * num5;
					num123 -= 10f * num5;
					DrawNPCHeadBoss(npc[num112], b, num111, bossHeadRotation3, bossHeadSpriteEffects3, bossHeadTextureIndex3, num122, num123);
					float num124 = num122 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Width() / 2) * num111;
					float num125 = num123 - (float)(TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Height() / 2) * num111;
					float num126 = num124 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Width() * num111;
					float num127 = num125 + (float)TextureAssets.NpcHeadBoss[bossHeadTextureIndex3].Height() * num111;
					if ((float)mouseX >= num124 && (float)mouseX <= num126 && (float)mouseY >= num125 && (float)mouseY <= num127)
					{
						text = npc[num112].GivenOrTypeName;
					}
				}
				bool flag3 = false;
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				for (int num128 = 0; num128 < 255; num128++)
				{
					if (player[num128].active && ((!player[myPlayer].hostile && !player[num128].hostile) || (player[myPlayer].team == player[num128].team && player[num128].team != 0) || num128 == myPlayer) && player[num128].showLastDeath && DrawPlayerDeathMarker(num, num2, num5, num13, num14, num111, num128))
					{
						num20 = num128;
					}
				}
				if (num20 != -1)
				{
					TimeSpan timeSpan2 = DateTime.Now - player[num20].lastDeathTime;
					text = Language.GetTextValue("Game.PlayerDeathTime", player[num20].name, Lang.LocalizedDuration(timeSpan2, abbreviated: false, showAllAvailableUnits: false));
				}
				else if (revengeMarker != null)
				{
					spriteBatch.End();
					spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, uIScaleMatrix);
					revengeMarker.UseMouseOver(spriteBatch, text, num111);
					spriteBatch.End();
					spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				}
				for (int num129 = 0; num129 < 255; num129++)
				{
					if (!player[num129].active || ((player[myPlayer].hostile || player[num129].hostile) && (player[myPlayer].team != player[num129].team || player[num129].team == 0) && num129 != myPlayer))
					{
						continue;
					}
					float num130 = ((player[num129].position.X + (float)(player[num129].width / 2)) / 16f - num13) * num5;
					float num131 = ((player[num129].position.Y + player[num129].gfxOffY + (float)(player[num129].height / 2)) / 16f - num14) * num5;
					num130 += num;
					num131 += num2;
					num130 -= 6f;
					num131 -= 2f;
					num131 -= 2f - num5 / 5f * 2f;
					num130 -= 10f * num5;
					num131 -= 10f * num5;
					float num132 = num130 + 4f - 14f * num111;
					float num133 = num131 + 2f - 14f * num111;
					float num134 = num132 + 28f * num111;
					float num135 = num133 + 28f * num111;
					if (player[num129].dead)
					{
						continue;
					}
					Microsoft.Xna.Framework.Color playerHeadBordersColor3 = GetPlayerHeadBordersColor(player[num129]);
					MapPlayerRenderer.DrawPlayerHead(Camera, player[num129], new Vector2(num130, num131), (float)(int)b / 255f, num111, playerHeadBordersColor3);
					if (!((float)mouseX >= num132) || !((float)mouseX <= num134) || !((float)mouseY >= num133) || !((float)mouseY <= num135))
					{
						continue;
					}
					text = player[num129].name;
					if (num129 != myPlayer && player[myPlayer].team > 0 && player[myPlayer].team == player[num129].team && netMode == 1 && player[myPlayer].HasUnityPotion() && !flag3 && !cancelWormHole)
					{
						flag3 = true;
						if (!unityMouseOver)
						{
							SoundEngine.PlaySound(12);
						}
						unityMouseOver = true;
						playerHeadBordersColor3 = OurFavoriteColor;
						MapPlayerRenderer.DrawPlayerHead(Camera, player[num129], new Vector2(num130, num131), 1f, num111 + 0.5f, playerHeadBordersColor3);
						text = Language.GetTextValue("Game.TeleportTo", player[num129].name);
						if (mouseLeft && mouseLeftRelease)
						{
							mouseLeftRelease = false;
							mapFullscreen = false;
							player[myPlayer].UnityTeleport(player[num129].position);
							player[myPlayer].TakeUnityPotion();
						}
					}
				}
				cancelWormHole = false;
				MapIcons.Draw(Vector2.Zero, new Vector2(num - 10f * num5, num2 - 10f * num5), null, num5, num111, text);
				if (!flag3 && unityMouseOver)
				{
					unityMouseOver = false;
				}
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerStateForCursor, DepthStencilState.None, RasterizerState.CullCounterClockwise, null, UIScaleMatrix);
				PlayerInput.SetZoom_UI();
				int num136 = 10;
				int num137 = screenHeight - 40;
				if (showFrameRate)
				{
					num137 -= 15;
				}
				int num138 = 0;
				int num139 = 130;
				if (mouseX >= num136 && mouseX <= num136 + 32 && mouseY >= num137 && mouseY <= num137 + 30)
				{
					num139 = 255;
					num138 += 4;
					player[myPlayer].mouseInterface = true;
					if (mouseLeft && mouseLeftRelease)
					{
						SoundEngine.PlaySound(10);
						mapFullscreen = false;
					}
				}
				spriteBatch.Draw(TextureAssets.MapIcon[num138].Value, new Vector2(num136, num137), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.MapIcon[num138].Width(), TextureAssets.MapIcon[num138].Height()), new Microsoft.Xna.Framework.Color(num139, num139, num139, num139), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				DrawCursor(DrawThickCursor());
			}
			mouseX = num18;
			mouseY = num19;
			float t = 3f;
			Utils.Swap(t, inventoryScale);
			if (text != "")
			{
				MouseText(text, 0, 0);
			}
			Utils.Swap(t, inventoryScale);
			spriteBatch.End();
			try
			{
				if (num13 < num7)
				{
					num += (num13 - num7) * num5;
				}
				if (num14 < num8)
				{
					num2 += (num14 - num8) * num5;
				}
				if (mapFullscreen && Main.OnPostFullscreenMapDraw != null)
				{
					Main.OnPostFullscreenMapDraw(new Vector2(num, num2), num5);
				}
			}
			catch (Exception e3)
			{
				TimeLogger.DrawException(e3);
			}
			spriteBatch.Begin();
			PlayerInput.SetZoom_Unscaled();
			TimeLogger.DetailedDrawTime(9);
		}

		private static void DrawMapFullscreenBackground(Vector2 screenPosition, int screenWidth, int screenHeight)
		{
			Asset<Texture2D> val = TextureAssets.MapBGs[0];
			int num = -1;
			Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White;
			int wall = tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall;
			if (screenPosition.Y > (float)((maxTilesY - 232) * 16))
			{
				num = 2;
			}
			else if (player[myPlayer].ZoneDungeon)
			{
				num = 4;
			}
			else if (wall == 87)
			{
				num = 13;
			}
			else if ((double)screenPosition.Y > worldSurface * 16.0)
			{
				switch (wall)
				{
				case 86:
				case 108:
					num = 15;
					break;
				case 180:
				case 184:
					num = 16;
					break;
				case 178:
				case 183:
					num = 17;
					break;
				case 62:
				case 263:
					num = 18;
					break;
				default:
					num = ((!player[myPlayer].ZoneGlowshroom) ? ((!player[myPlayer].ZoneCorrupt) ? ((!player[myPlayer].ZoneCrimson) ? ((!player[myPlayer].ZoneHallow) ? ((!player[myPlayer].ZoneSnow) ? ((!player[myPlayer].ZoneJungle) ? ((!player[myPlayer].ZoneDesert) ? ((!player[myPlayer].ZoneRockLayerHeight) ? 1 : 31) : 14) : 12) : 3) : ((!player[myPlayer].ZoneDesert) ? ((!player[myPlayer].ZoneSnow) ? 21 : 35) : 41)) : ((!player[myPlayer].ZoneDesert) ? ((!player[myPlayer].ZoneSnow) ? 23 : 34) : 40)) : ((!player[myPlayer].ZoneDesert) ? ((!player[myPlayer].ZoneSnow) ? 22 : 33) : 39)) : 20);
					break;
				}
			}
			else if (player[myPlayer].ZoneGlowshroom)
			{
				num = 19;
			}
			else
			{
				color = ColorOfTheSkies;
				int num2 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
				if (player[myPlayer].ZoneSkyHeight)
				{
					num = 32;
				}
				else if (player[myPlayer].ZoneCorrupt)
				{
					num = ((!player[myPlayer].ZoneDesert) ? 5 : 36);
				}
				else if (player[myPlayer].ZoneCrimson)
				{
					num = ((!player[myPlayer].ZoneDesert) ? 6 : 37);
				}
				else if (player[myPlayer].ZoneHallow)
				{
					num = ((!player[myPlayer].ZoneDesert) ? 7 : 38);
				}
				else if ((double)(screenPosition.Y / 16f) < worldSurface + 10.0 && (num2 < 380 || num2 > maxTilesX - 380))
				{
					num = 10;
				}
				else if (player[myPlayer].ZoneSnow)
				{
					num = 11;
				}
				else if (player[myPlayer].ZoneJungle)
				{
					num = 8;
				}
				else if (player[myPlayer].ZoneDesert)
				{
					num = 9;
				}
				else if (bloodMoon)
				{
					color *= 2f;
					num = 25;
				}
				else if (player[myPlayer].ZoneGraveyard)
				{
					num = 26;
				}
			}
			if (num > -1)
			{
				val = TextureAssets.MapBGs[num];
			}
			spriteBatch.Draw(val.Value, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), color);
		}

		private static bool DrawPlayerDeathMarker(float X, float Y, float scale, float left, float top, float headScale, int i)
		{
			float num = (player[i].lastDeathPostion.X / 16f - left) * scale;
			float num2 = (player[i].lastDeathPostion.Y / 16f - top) * scale;
			num += X;
			num2 += Y;
			num2 -= 2f - scale / 5f * 2f;
			num -= 10f * scale;
			num2 -= 10f * scale;
			spriteBatch.Draw(TextureAssets.MapDeath.Value, new Vector2(num, num2), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.MapDeath.Width(), TextureAssets.MapDeath.Height()), Microsoft.Xna.Framework.Color.White, 0f, new Vector2((float)TextureAssets.MapDeath.Width() * 0.5f, (float)TextureAssets.MapDeath.Height() * 0.5f), headScale, SpriteEffects.None, 0f);
			float num3 = num + 4f - 14f * headScale;
			float num4 = num2 + 2f - 14f * headScale;
			float num5 = num3 + 28f * headScale;
			float num6 = num4 + 28f * headScale;
			if ((float)mouseX >= num3 && (float)mouseX <= num5 && (float)mouseY >= num4)
			{
				return (float)mouseY <= num6;
			}
			return false;
		}

		private void DrawMiscMapIcons(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Microsoft.Xna.Framework.Rectangle? mapRect, float mapScale, float drawScale, string mouseTextString)
		{
			DrawMapIcons_PotionOfReturnHomePosition(spriteBatch, mapTopLeft, mapX2Y2AndOff, mapRect, mapScale, drawScale, mouseTextString);
			DrawMapIcons_PotionOfReturnAppearAfterUsePosition(spriteBatch, mapTopLeft, mapX2Y2AndOff, mapRect, mapScale, drawScale, mouseTextString);
			DrawMapIcons_LastGolfballHit(spriteBatch, mapTopLeft, mapX2Y2AndOff, mapRect, mapScale, drawScale, mouseTextString);
		}

		private void DrawMapIcons_PotionOfReturnAppearAfterUsePosition(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Microsoft.Xna.Framework.Rectangle? mapRect, float mapScale, float drawScale, string mouseTextString)
		{
			Vector2? potionOfReturnOriginalUsePosition = LocalPlayer.PotionOfReturnOriginalUsePosition;
			if (!potionOfReturnOriginalUsePosition.HasValue)
			{
				return;
			}
			Vector2 vec = (potionOfReturnOriginalUsePosition + new Vector2(0f, -LocalPlayer.height / 2)).Value / 16f - mapTopLeft;
			vec *= mapScale;
			vec += mapX2Y2AndOff;
			vec = vec;
			if (!mapRect.HasValue || mapRect.Value.Contains(vec.ToPoint()))
			{
				Texture2D value = TextureAssets.Extra[173].Value;
				Microsoft.Xna.Framework.Rectangle rectangle = value.Frame();
				spriteBatch.Draw(value, vec, rectangle, Microsoft.Xna.Framework.Color.White, 0f, rectangle.Size() / 2f, drawScale, SpriteEffects.None, 0f);
				if (Utils.CenteredRectangle(vec, rectangle.Size() * drawScale).Contains(MouseScreen.ToPoint()))
				{
					mouseTextString = Language.GetTextValue("GameUI.PotionOfReturnExitPortal");
					_ = MouseScreen + new Vector2(-28f) + new Vector2(4f, 0f);
				}
			}
		}

		private void DrawMapIcons_PotionOfReturnHomePosition(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Microsoft.Xna.Framework.Rectangle? mapRect, float mapScale, float drawScale, string mouseTextString)
		{
			Vector2? potionOfReturnHomePosition = LocalPlayer.PotionOfReturnHomePosition;
			if (!potionOfReturnHomePosition.HasValue)
			{
				return;
			}
			Vector2 vec = (potionOfReturnHomePosition + new Vector2(0f, -LocalPlayer.height / 2)).Value / 16f - mapTopLeft;
			vec *= mapScale;
			vec += mapX2Y2AndOff;
			vec = vec;
			if (!mapRect.HasValue || mapRect.Value.Contains(vec.ToPoint()))
			{
				Texture2D value = TextureAssets.Extra[175].Value;
				Microsoft.Xna.Framework.Rectangle rectangle = value.Frame();
				spriteBatch.Draw(value, vec, rectangle, Microsoft.Xna.Framework.Color.White, 0f, rectangle.Size() / 2f, drawScale, SpriteEffects.None, 0f);
				if (Utils.CenteredRectangle(vec, rectangle.Size() * drawScale).Contains(MouseScreen.ToPoint()))
				{
					mouseTextString = Language.GetTextValue("GameUI.PotionOfReturnHomePortal");
					_ = MouseScreen + new Vector2(-28f) + new Vector2(4f, 0f);
				}
			}
		}

		private void DrawMapIcons_LastGolfballHit(SpriteBatch spriteBatch, Vector2 mapTopLeft, Vector2 mapX2Y2AndOff, Microsoft.Xna.Framework.Rectangle? mapRect, float mapScale, float drawScale, string mouseTextString)
		{
			Projectile lastHitBall = LocalGolfState.GetLastHitBall();
			if (lastHitBall == null)
			{
				return;
			}
			Vector2 vec = lastHitBall.Center / 16f - mapTopLeft;
			vec *= mapScale;
			vec += mapX2Y2AndOff;
			vec = vec;
			if (!mapRect.HasValue || mapRect.Value.Contains(vec.ToPoint()))
			{
				Texture2D value = TextureAssets.Extra[176].Value;
				Microsoft.Xna.Framework.Rectangle rectangle = value.Frame();
				spriteBatch.Draw(value, vec, rectangle, Microsoft.Xna.Framework.Color.White, 0f, rectangle.Size() / 2f, drawScale, SpriteEffects.None, 0f);
				Microsoft.Xna.Framework.Rectangle rectangle2 = Utils.CenteredRectangle(vec, rectangle.Size() * drawScale);
				LoadProjectile(lastHitBall.type);
				value = TextureAssets.Projectile[lastHitBall.type].Value;
				rectangle = value.Frame();
				spriteBatch.Draw(value, vec, rectangle, Microsoft.Xna.Framework.Color.White, 0f, rectangle.Size() / 2f, drawScale, SpriteEffects.None, 0f);
				if (rectangle2.Contains(MouseScreen.ToPoint()))
				{
					mouseTextString = lastHitBall.Name;
					_ = MouseScreen + new Vector2(-28f) + new Vector2(4f, 0f);
				}
			}
		}

		public static void TriggerPing(Vector2 position)
		{
			Pings.Add(position);
			if (netMode == 1)
			{
				NetManager.Instance.SendToServer(NetPingModule.Serialize(position));
			}
		}

		private static void DrawNPCHeadFriendly(Entity theNPC, byte alpha, float headScale, SpriteEffects dir, int npcID, float x, float y)
		{
			TownNPCHeadRenderer.DrawWithOutlines(theNPC, npcID, new Vector2(x, y), new Microsoft.Xna.Framework.Color(alpha, alpha, alpha, alpha), 0f, headScale, dir);
		}

		private static void DrawNPCHeadBoss(Entity theNPC, byte alpha, float headScale, float rotation, SpriteEffects effects, int npcID, float x, float y)
		{
			BossNPCHeadRenderer.DrawWithOutlines(theNPC, npcID, new Vector2(x, y), new Microsoft.Xna.Framework.Color(alpha, alpha, alpha, alpha), 0f, headScale, effects);
		}

		private static void DrawWithOutlines(Entity entity, Texture2D tex, Vector2 position, Microsoft.Xna.Framework.Rectangle? rect, Microsoft.Xna.Framework.Color color, float rotation, Vector2 origin, float scale, SpriteEffects effects)
		{
			float num = 2f * scale;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			int colorOnlyShaderIndex = ContentSamples.CommonlyUsedContentSamples.ColorOnlyShaderIndex;
			DrawData value = new DrawData(tex, position, rect, color, rotation, origin, scale, effects, 0);
			GameShaders.Armor.Apply(colorOnlyShaderIndex, entity, value);
			Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
			black *= (float)(int)color.A / 255f;
			black *= (float)(int)color.A / 255f;
			Microsoft.Xna.Framework.Color color2 = white;
			color2 *= (float)(int)color.A / 255f;
			color2 *= (float)(int)color.A / 255f;
			int num2 = 2;
			Vector2 value2;
			for (int i = -num2; i <= num2; i++)
			{
				for (int j = -num2; j <= num2; j++)
				{
					if (Math.Abs(i) + Math.Abs(j) == num2)
					{
						value2 = new Vector2((float)i * num, (float)j * num).RotatedBy(rotation);
						spriteBatch.Draw(tex, position + value2, rect, black, rotation, origin, scale, effects, 0f);
					}
				}
			}
			num2 = 1;
			value2 = Vector2.Zero;
			for (int k = -num2; k <= num2; k++)
			{
				for (int l = -num2; l <= num2; l++)
				{
					if (Math.Abs(k) + Math.Abs(l) == num2)
					{
						value2 = new Vector2((float)k * num, (float)l * num).RotatedBy(rotation);
						spriteBatch.Draw(tex, position + value2, rect, color2, rotation, origin, scale, effects, 0f);
					}
				}
			}
			pixelShader.CurrentTechnique.Passes[0].Apply();
			spriteBatch.Draw(tex, position, rect, color, rotation, origin, scale, effects, 0f);
		}

		public static Microsoft.Xna.Framework.Color GetPlayerHeadBordersColor(Player plr)
		{
			if (plr.ghost || plr.dead)
			{
				return Microsoft.Xna.Framework.Color.Transparent;
			}
			if (plr.whoAmI == myPlayer)
			{
				return teamColor[plr.team];
			}
			if (plr.hostile && (plr.team != LocalPlayer.team || plr.team == 0))
			{
				return Microsoft.Xna.Framework.Color.Transparent;
			}
			return teamColor[plr.team];
		}

		private static string DrawMap_FindChestName(LocalizedText[] chestNames, Tile chestTile, int x, int y, int fullTileWidth = 36)
		{
			int num = Chest.FindChestByGuessing(x, y);
			if (num < 0)
			{
				return chestNames[0].Value;
			}
			if (chest[num].name != "")
			{
				return string.Concat(chestNames[chestTile.frameX / fullTileWidth], ": ", chest[num].name);
			}
			return chestNames[chestTile.frameX / fullTileWidth].Value;
		}

		public void DrawSimpleSurfaceBackground(Vector2 areaPosition, int areaWidth, int areaHeight)
		{
			float num = (float)(worldSurface + 1.0) * 16f;
			float num2 = Math.Min(areaPosition.Y + (float)areaHeight, num) - areaPosition.Y;
			float y = areaPosition.Y;
			float num3 = areaPosition.Y + num2;
			Vector4 value = ColorOfTheSkies.ToVector4();
			Vector4 value2 = new Microsoft.Xna.Framework.Color(53, 43, 243).ToVector4() * value;
			Vector4 value3 = new Microsoft.Xna.Framework.Color(132, 170, 248).ToVector4() * value;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(Vector4.Lerp(value2, value3, y / num));
			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(Vector4.Lerp(value2, value3, num3 / num));
			VertexColors colors = default(VertexColors);
			colors.TopLeftColor = color;
			colors.TopRightColor = color;
			colors.BottomLeftColor = color2;
			colors.BottomRightColor = color2;
			tileBatch.Draw(TextureAssets.BlackTile.Value, new Vector4(0f, 0f, areaWidth, num2), colors);
			float num4 = (float)areaHeight - num2;
			if (num4 > 0f)
			{
				colors.TopLeftColor = Microsoft.Xna.Framework.Color.Black;
				colors.TopRightColor = Microsoft.Xna.Framework.Color.Black;
				colors.BottomLeftColor = Microsoft.Xna.Framework.Color.Black;
				colors.BottomRightColor = Microsoft.Xna.Framework.Color.Black;
				tileBatch.Draw(TextureAssets.BlackTile.Value, new Vector4(0f, num2, areaWidth, num4), colors);
			}
		}

		public void DrawCapture(Microsoft.Xna.Framework.Rectangle area, CaptureSettings settings)
		{
			float[] array = bgAlphaFrontLayer;
			bgAlphaFrontLayer = new float[array.Length];
			float[] array2 = bgAlphaFarBackLayer;
			bgAlphaFarBackLayer = new float[array2.Length];
			UpdateBGVisibility_BackLayer(settings.Biome.BackgroundIndex, 1f);
			UpdateBGVisibility_FrontLayer(settings.Biome.BackgroundIndex, 1f);
			float[] array3 = liquidAlpha.ToArray();
			int holyTileCount = SceneMetrics.HolyTileCount;
			SceneMetrics.HolyTileCount = ((settings.Biome.BackgroundIndex == 6) ? SceneMetrics.HallowTileMax : 0);
			int num = offScreenRange;
			offScreenRange = 0;
			SpriteViewMatrix gameViewMatrix = GameViewMatrix;
			GameViewMatrix = new SpriteViewMatrix(base.GraphicsDevice);
			Rasterizer = RasterizerState.CullCounterClockwise;
			bool captureEntities = settings.CaptureEntities;
			bool captureBackground = settings.CaptureBackground;
			CaptureBiome biome = settings.Biome;
			Vector2 vector = screenPosition;
			int num2 = screenWidth;
			int num3 = screenHeight;
			float num4 = cloudAlpha;
			bool captureMech = settings.CaptureMech;
			screenWidth = area.Width << 4;
			screenHeight = area.Height << 4;
			screenPosition = new Vector2(area.X * 16, area.Y * 16);
			cloudAlpha = 0f;
			for (int i = 0; i <= 10; i++)
			{
				if (i != 1)
				{
					liquidAlpha[i] = ((i == biome.WaterStyle) ? 1f : 0f);
				}
			}
			int x = area.X;
			int y = area.Y;
			int num5 = area.X + screenWidth / 16;
			int num6 = area.Y + screenHeight / 16;
			float num7 = (biome.TileColor == CaptureBiome.TileColorStyle.Mushroom).ToInt();
			InfoToSetBackColor info = default(InfoToSetBackColor);
			info.isInGameMenuOrIsServer = gameMenu || netMode == 2;
			info.CorruptionBiomeInfluence = (biome.TileColor == CaptureBiome.TileColorStyle.Corrupt).ToInt();
			info.CrimsonBiomeInfluence = (biome.TileColor == CaptureBiome.TileColorStyle.Crimson).ToInt();
			info.JungleBiomeInfluence = (biome.TileColor == CaptureBiome.TileColorStyle.Jungle).ToInt();
			info.MushroomBiomeInfluence = num7;
			info.GraveyardInfluence = GraveyardVisualIntensity;
			info.BloodMoonActive = biome.WaterStyle == 9;
			info.LanternNightActive = LanternNight.LanternsUp;
			SetBackColor(info, out var sunColor, out var moonColor);
			ApplyColorOfTheSkiesToTiles();
			ColorOfSurfaceBackgroundsBase = (ColorOfSurfaceBackgroundsModified = ColorOfTheSkies);
			bool flag = mapEnabled;
			mapEnabled = false;
			Lighting.Initialize();
			renderCount = 99;
			for (int j = 0; j < 4; j++)
			{
				Lighting.LightTiles(x, num5, y, num6);
			}
			mapEnabled = flag;
			if (!((float)(settings.Area.X * 16) > vector.X - 16f) || !((float)(settings.Area.Y * 16) > vector.Y - 16f) || !((float)((settings.Area.X + settings.Area.Width) * 16) < vector.X + (float)num2 + 16f) || !((float)((settings.Area.Y + settings.Area.Height) * 16) < vector.Y + (float)num3 + 16f))
			{
				for (int k = 0; k < dust.Length; k++)
				{
					if (dust[k].active && dust[k].type == 76)
					{
						dust[k].active = false;
					}
				}
			}
			Vector2 vector2 = (drawToScreen ? Vector2.Zero : new Vector2(offScreenRange, offScreenRange));
			int val = (int)((screenPosition.X - vector2.X) / 16f - 1f);
			int val2 = (int)((screenPosition.X + (float)screenWidth + vector2.X) / 16f) + 2;
			int val3 = (int)((screenPosition.Y - vector2.Y) / 16f - 1f);
			int val4 = (int)((screenPosition.Y + (float)screenHeight + vector2.Y) / 16f) + 5;
			vector2 -= screenPosition;
			val = Math.Max(val, 5) - 2;
			val3 = Math.Max(val3, 5);
			val2 = Math.Min(val2, maxTilesX - 5) + 2;
			val4 = Math.Min(val4, maxTilesY - 5) + 4;
			Microsoft.Xna.Framework.Rectangle drawArea = new Microsoft.Xna.Framework.Rectangle(val, val3, val2 - val, val4 - val3);
			LiquidRenderer.Instance.PrepareDraw(drawArea);
			WorldGen.SectionTileFrameWithCheck(x, y, num5, num6);
			if (captureBackground)
			{
				Matrix transform = Transform;
				int num8 = screenHeight;
				int num9 = screenWidth;
				Vector2 vector3 = screenPosition;
				bool flag2 = mapFullscreen;
				mapFullscreen = false;
				float num10 = scAdj;
				Vector2 value = new Vector2(num2, num3);
				Vector2 vector4 = new Vector2(settings.Area.Width * 16, settings.Area.Height * 16) / value;
				vector4.X = Math.Max(1f, vector4.X);
				vector4.Y = Math.Max(1f, vector4.Y);
				Vector2[] array4 = new Vector2[numClouds];
				for (int l = 0; l < numClouds; l++)
				{
					array4[l] = cloud[l].position;
					cloud[l].position *= vector4;
				}
				if ((float)(settings.Area.Height * 16) >= 2000f || (float)(settings.Area.Width * 16) >= 2000f)
				{
					scAdj = 0f;
					float num11 = 2048f;
					float num12 = MathHelper.Clamp((float)settings.Area.Height * 16f / num11, 1f, 3f);
					screenWidth = settings.Area.Width * 16;
					screenHeight = Math.Min(2048, settings.Area.Height * 16);
					screenPosition.X = settings.Area.X * 16;
					screenPosition.Y = settings.Area.Y * 16;
					screenPosition.Y += Math.Max(0f, Math.Min(settings.Area.Height, (float)worldSurface) * 16f - num11 * num12);
					transform *= Matrix.CreateScale(num12);
					transform.Translation += new Vector3((settings.Area.X - area.X) * 16, (settings.Area.Y - area.Y) * 16, 0f);
					transform.Translation += new Vector3(0f, Math.Max(0f, Math.Min(settings.Area.Height, (float)worldSurface) * 16f - num11 * num12) / num12, 0f);
				}
				else if ((float)(settings.Area.X * 16) > vector.X - 16f && (float)(settings.Area.Y * 16) > vector.Y - 16f && (float)((settings.Area.X + settings.Area.Width) * 16) < vector.X + (float)num2 + 16f && (float)((settings.Area.Y + settings.Area.Height) * 16) < vector.Y + (float)num3 + 16f)
				{
					screenPosition = vector;
					screenWidth = num2;
					screenHeight = num3;
					transform.Translation += new Vector3(vector.X - (float)area.X * 16f, vector.Y - (float)area.Y * 16f, 0f);
				}
				Vector2 areaPosition = new Vector2(area.X * 16, area.Y * 16);
				int areaWidth = area.Width * 16;
				int areaHeight = area.Height * 16;
				tileBatch.Begin();
				DrawSimpleSurfaceBackground(areaPosition, areaWidth, areaHeight);
				tileBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.AnisotropicClamp, DepthStencilState.Default, RasterizerState.CullNone, null, transform);
				int num13 = screenWidth;
				int num14 = screenHeight;
				Vector2 zero = Vector2.Zero;
				if (num13 < 800)
				{
					int num15 = 800 - num13;
					zero.X -= (float)num15 * 0.5f;
					num13 = 800;
				}
				if (num14 < 600)
				{
					int num16 = 600 - num14;
					zero.Y -= (float)num16 * 0.5f;
					num14 = 600;
				}
				SceneArea sceneArea = default(SceneArea);
				sceneArea.bgTopY = 0;
				sceneArea.totalWidth = num13;
				sceneArea.totalHeight = num14;
				sceneArea.SceneLocalScreenPositionOffset = zero;
				SceneArea sceneArea2 = sceneArea;
				DrawStarsInBackground(sceneArea2);
				if ((double)(screenPosition.Y / 16f) < worldSurface + 2.0)
				{
					DrawSunAndMoon(sceneArea2, moonColor, sunColor, num7);
				}
				DrawSurfaceBG();
				spriteBatch.End();
				for (int m = 0; m < numClouds; m++)
				{
					cloud[m].position = array4[m];
				}
				scAdj = num10;
				mapFullscreen = flag2;
				screenWidth = num9;
				screenHeight = num8;
				screenPosition = vector3;
			}
			if (captureBackground)
			{
				spriteBatch.Begin();
				DrawUnderworldBackground(flat: true);
				spriteBatch.End();
			}
			if (captureEntities)
			{
				spriteBatch.Begin();
				CacheNPCDraws();
				CacheProjDraws();
				DrawCachedNPCs(DrawCacheNPCsMoonMoon, behindTiles: true);
				spriteBatch.End();
			}
			tileBatch.Begin();
			spriteBatch.Begin();
			DrawBlack(force: true);
			tileBatch.End();
			spriteBatch.End();
			tileBatch.Begin();
			spriteBatch.Begin();
			if (biome == null)
			{
				DrawWater(bg: true, waterStyle);
			}
			else
			{
				DrawWater(bg: true, bloodMoon ? 9 : biome.WaterStyle);
			}
			tileBatch.End();
			spriteBatch.End();
			if (captureBackground)
			{
				tileBatch.Begin();
				spriteBatch.Begin();
				DrawBackground();
				tileBatch.End();
				spriteBatch.End();
			}
			tileBatch.Begin();
			spriteBatch.Begin();
			DrawWalls();
			tileBatch.End();
			spriteBatch.End();
			if (captureEntities)
			{
				spriteBatch.Begin();
				DrawWoF();
				spriteBatch.End();
			}
			if (drawBackGore && captureEntities)
			{
				spriteBatch.Begin();
				DrawGoreBehind();
				spriteBatch.End();
				drawBackGore = true;
			}
			if (captureEntities)
			{
				spriteBatch.Begin();
				MoonlordDeathDrama.DrawPieces(spriteBatch);
				MoonlordDeathDrama.DrawExplosions(spriteBatch);
				spriteBatch.End();
			}
			bool flag3 = false;
			bool intoRenderTargets = false;
			bool intoRenderTargets2 = true;
			TilesRenderer.PreDrawTiles(solidLayer: false, flag3, intoRenderTargets2);
			tileBatch.Begin();
			spriteBatch.Begin();
			DrawCachedNPCs(DrawCacheNPCsBehindNonSolidTiles, behindTiles: true);
			int waterStyleOverride = (bloodMoon ? 9 : biome.WaterStyle);
			if (biome == null)
			{
				DrawTiles(solidLayer: false, flag3, intoRenderTargets);
			}
			else
			{
				DrawTiles(solidLayer: false, flag3, intoRenderTargets, waterStyleOverride);
			}
			tileBatch.End();
			spriteBatch.End();
			DrawTileEntities(solidLayer: false, flag3, intoRenderTargets);
			if (captureEntities)
			{
				spriteBatch.Begin();
				waterfallManager.FindWaterfalls(forced: true);
				waterfallManager.Draw(spriteBatch);
				spriteBatch.End();
			}
			if (captureEntities)
			{
				DrawCachedProjs(DrawCacheProjsBehindNPCsAndTiles);
				spriteBatch.Begin();
				DrawNPCs(behindTiles: true);
				spriteBatch.End();
			}
			TilesRenderer.PreDrawTiles(solidLayer: true, flag3, intoRenderTargets2);
			tileBatch.Begin();
			spriteBatch.Begin();
			if (biome == null)
			{
				DrawTiles(solidLayer: true, flag3, intoRenderTargets);
			}
			else
			{
				DrawTiles(solidLayer: true, flag3, intoRenderTargets, waterStyleOverride);
			}
			tileBatch.End();
			spriteBatch.End();
			DrawTileEntities(solidLayer: true, flag3, intoRenderTargets);
			if (captureEntities)
			{
				DrawPlayers_BehindNPCs();
				DrawCachedProjs(DrawCacheProjsBehindNPCs);
				spriteBatch.Begin();
				DrawNPCs();
				spriteBatch.End();
				spriteBatch.Begin();
				DrawCachedNPCs(DrawCacheNPCProjectiles, behindTiles: false);
				spriteBatch.End();
				DrawSuperSpecialProjectiles(DrawCacheFirstFractals);
				DrawCachedProjs(DrawCacheProjsBehindProjectiles);
				DrawProjectiles();
				DrawPlayers_AfterProjectiles();
				DrawCachedProjs(DrawCacheProjsOverPlayers);
				spriteBatch.Begin();
				DrawCachedNPCs(DrawCacheNPCsOverPlayers, behindTiles: false);
				spriteBatch.End();
				spriteBatch.Begin();
				DrawItems();
				spriteBatch.End();
				spriteBatch.Begin();
				DrawRain();
				spriteBatch.End();
				spriteBatch.Begin();
				DrawGore();
				spriteBatch.End();
				DrawDust();
			}
			tileBatch.Begin();
			spriteBatch.Begin();
			if (biome == null)
			{
				DrawWater(bg: false, waterStyle);
			}
			else
			{
				DrawWater(bg: false, biome.WaterStyle);
			}
			if (captureMech)
			{
				DrawWires();
			}
			tileBatch.End();
			spriteBatch.End();
			DrawCachedProjs(DrawCacheProjsOverWiresUI);
			if (mapEnabled)
			{
				spriteBatch.Begin();
				for (int n = area.X; n < area.X + area.Width; n++)
				{
					for (int num17 = area.Y; num17 < area.Y + area.Height; num17++)
					{
						if (!Map.IsRevealed(n, num17))
						{
							spriteBatch.Draw(TextureAssets.BlackTile.Value, new Vector2((float)n * 16f, (float)num17 * 16f) - screenPosition, Microsoft.Xna.Framework.Color.Black);
						}
					}
				}
				spriteBatch.End();
			}
			renderCount = 99;
			screenWidth = num2;
			screenHeight = num3;
			screenPosition = vector;
			liquidAlpha = array3;
			offScreenRange = num;
			cloudAlpha = num4;
			bgAlphaFrontLayer = array;
			bgAlphaFarBackLayer = array2;
			SceneMetrics.HolyTileCount = holyTileCount;
			Lighting.Initialize();
			GameViewMatrix = gameViewMatrix;
		}

		protected void RenderTiles()
		{
			if (drawToScreen)
			{
				return;
			}
			RenderBlack();
			base.GraphicsDevice.SetRenderTarget(tileTarget);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			spriteBatch.Begin();
			try
			{
				TilesRenderer.PreDrawTiles(solidLayer: true, forRenderTargets: false, intoRenderTargets: true);
				DrawTiles(solidLayer: true, forRenderTargets: false, intoRenderTargets: true);
			}
			catch (Exception e)
			{
				if (!ignoreErrors)
				{
					throw;
				}
				TimeLogger.DrawException(e);
			}
			TimeLogger.DetailedDrawReset();
			spriteBatch.End();
			DrawTileEntities(solidLayer: true, overRenderTargets: false, intoRenderTargets: true);
			TimeLogger.DetailedDrawTime(28);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void RenderTiles2()
		{
			if (drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(tile2Target);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			spriteBatch.Begin();
			try
			{
				TilesRenderer.PreDrawTiles(solidLayer: false, forRenderTargets: false, intoRenderTargets: true);
				DrawTiles(solidLayer: false, forRenderTargets: false, intoRenderTargets: true);
			}
			catch (Exception e)
			{
				if (!ignoreErrors)
				{
					throw;
				}
				TimeLogger.DrawException(e);
			}
			TimeLogger.DetailedDrawReset();
			spriteBatch.End();
			DrawTileEntities(solidLayer: false, overRenderTargets: false, intoRenderTargets: true);
			TimeLogger.DetailedDrawTime(29);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void RenderWater()
		{
			if (!drawToScreen)
			{
				base.GraphicsDevice.SetRenderTarget(waterTarget);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin();
				try
				{
					DrawWaters();
				}
				catch
				{
				}
				TimeLogger.DetailedDrawReset();
				spriteBatch.End();
				TimeLogger.DetailedDrawTime(31);
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		public static int CalculateWaterStyle(bool ignoreFountains = false)
		{
			if (SceneMetrics.ActiveFountainColor >= 0 && !ignoreFountains)
			{
				return SceneMetrics.ActiveFountainColor;
			}
			if (bgStyle != 4 && bloodMoon && !dayTime)
			{
				return 9;
			}
			switch (bgStyle)
			{
			case 1:
				return 2;
			case 5:
				if (SceneMetrics.EvilTileCount > SceneMetrics.HolyTileCount && SceneMetrics.EvilTileCount > SceneMetrics.BloodTileCount)
				{
					return 2;
				}
				if (SceneMetrics.HolyTileCount > SceneMetrics.BloodTileCount)
				{
					return 4;
				}
				return 10;
			case 3:
				return 3;
			case 8:
				return 10;
			case 6:
				return 4;
			case 7:
				return 5;
			case 2:
				if ((double)(player[myPlayer].position.Y / 16f) > worldSurface)
				{
					return 12;
				}
				return 6;
			default:
				if ((double)(screenPosition.Y / 16f) > rockLayer + 40.0)
				{
					if (player[myPlayer].ZoneGlowshroom)
					{
						return 7;
					}
					return 8;
				}
				if ((double)(screenPosition.Y / 16f) > worldSurface)
				{
					return 7;
				}
				return 0;
			}
		}

		public static bool IsLiquidStyleWater(int liquidStyle)
		{
			if (liquidStyle != 1)
			{
				return liquidStyle != 11;
			}
			return false;
		}

		private void DrawWaters(bool isBackground = false)
		{
			drewLava = false;
			if (!isBackground)
			{
				waterStyle = CalculateWaterStyle();
				for (int i = 0; i < 13; i++)
				{
					if (IsLiquidStyleWater(waterStyle))
					{
						if (waterStyle != i)
						{
							liquidAlpha[i] = Math.Max(liquidAlpha[i] - 0.2f, 0f);
						}
						else
						{
							liquidAlpha[i] = Math.Min(liquidAlpha[i] + 0.2f, 1f);
						}
					}
				}
			}
			if (!drawToScreen && !isBackground)
			{
				Vector2 vector = (drawToScreen ? Vector2.Zero : new Vector2(offScreenRange, offScreenRange));
				int val = (int)((Camera.ScaledPosition.X - vector.X) / 16f - 1f);
				int val2 = (int)((Camera.ScaledPosition.X + Camera.ScaledSize.X + vector.X) / 16f) + 2;
				int val3 = (int)((Camera.ScaledPosition.Y - vector.Y) / 16f - 1f);
				int val4 = (int)((Camera.ScaledPosition.Y + Camera.ScaledSize.Y + vector.Y) / 16f) + 5;
				val = Math.Max(val, 5) - 2;
				val3 = Math.Max(val3, 5);
				val2 = Math.Min(val2, maxTilesX - 5) + 2;
				val4 = Math.Min(val4, maxTilesY - 5) + 4;
				Microsoft.Xna.Framework.Rectangle drawArea = new Microsoft.Xna.Framework.Rectangle(val, val3, val2 - val, val4 - val3);
				LiquidRenderer.Instance.PrepareDraw(drawArea);
			}
			bool flag = false;
			for (int j = 0; j < 13; j++)
			{
				if (IsLiquidStyleWater(j) && liquidAlpha[j] > 0f && j != waterStyle)
				{
					DrawWater(isBackground, j, isBackground ? 1f : liquidAlpha[j]);
					flag = true;
				}
			}
			DrawWater(isBackground, waterStyle, flag ? liquidAlpha[waterStyle] : 1f);
		}

		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
		{
			if (!Lighting.NotRetro)
			{
				oldDrawWater(bg, Style, Alpha);
				return;
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Vector2 drawOffset = (drawToScreen ? Vector2.Zero : new Vector2(offScreenRange, offScreenRange)) - screenPosition;
			LiquidRenderer.Instance.Draw(spriteBatch, drawOffset, Style, Alpha, bg);
			if (!bg)
			{
				TimeLogger.DrawTime(4, stopwatch.Elapsed.TotalMilliseconds);
			}
		}

		public static void DrawTileInWater(Vector2 drawOffset, int x, int y)
		{
			if (Main.tile[x, y] != null && Main.tile[x, y].active() && Main.tile[x, y].type == 518)
			{
				instance.LoadTiles(Main.tile[x, y].type);
				Tile tile = Main.tile[x, y];
				int num = (int)tile.liquid / 16;
				num -= 3;
				if (WorldGen.SolidTile(x, y - 1) && num > 8)
				{
					num = 8;
				}
				Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(tile.frameX, tile.frameY, 16, 16);
				spriteBatch.Draw(TextureAssets.Tile[tile.type].Value, new Vector2(x * 16, y * 16 - num) + drawOffset, value, Lighting.GetColor(x, y), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
			}
		}

		public void oldDrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
		{
			float num = 0f;
			float num2 = 99999f;
			float num3 = 99999f;
			int num4 = -1;
			int num5 = -1;
			Vector2 value = new Vector2(offScreenRange, offScreenRange);
			if (drawToScreen)
			{
				value = Vector2.Zero;
			}
			_ = new Microsoft.Xna.Framework.Color[4];
			int num6 = (int)(255f * (1f - gfxQuality) + 40f * gfxQuality);
			_ = gfxQuality;
			_ = gfxQuality;
			int num7 = (int)((screenPosition.X - value.X) / 16f - 1f);
			int num8 = (int)((screenPosition.X + (float)screenWidth + value.X) / 16f) + 2;
			int num9 = (int)((screenPosition.Y - value.Y) / 16f - 1f);
			int num10 = (int)((screenPosition.Y + (float)screenHeight + value.Y) / 16f) + 5;
			if (num7 < 5)
			{
				num7 = 5;
			}
			if (num8 > maxTilesX - 5)
			{
				num8 = maxTilesX - 5;
			}
			if (num9 < 5)
			{
				num9 = 5;
			}
			if (num10 > maxTilesY - 5)
			{
				num10 = maxTilesY - 5;
			}
			for (int i = num9; i < num10 + 4; i++)
			{
				for (int j = num7 - 2; j < num8 + 2; j++)
				{
					if (tile[j, i] == null)
					{
						tile[j, i] = new Tile();
					}
					if (tile[j, i].liquid <= 0 || (tile[j, i].nactive() && tileSolid[tile[j, i].type] && !tileSolidTop[tile[j, i].type]) || !(Lighting.Brightness(j, i) > 0f || bg))
					{
						continue;
					}
					Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
					float num11 = 256 - tile[j, i].liquid;
					num11 /= 32f;
					int num12 = 0;
					if (tile[j, i].lava())
					{
						if (drewLava)
						{
							continue;
						}
						float num13 = Math.Abs((float)(j * 16 + 8) - (screenPosition.X + (float)(screenWidth / 2)));
						float num14 = Math.Abs((float)(i * 16 + 8) - (screenPosition.Y + (float)(screenHeight / 2)));
						if (num13 < (float)(screenWidth * 2) && num14 < (float)(screenHeight * 2))
						{
							float num15 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
							float num16 = 1f - num15 / ((float)screenWidth * 0.75f);
							if (num16 > 0f)
							{
								num += num16;
							}
						}
						if (num13 < num2)
						{
							num2 = num13;
							num4 = j * 16 + 8;
						}
						if (num14 < num3)
						{
							num3 = num13;
							num5 = i * 16 + 8;
						}
						num12 = 1;
					}
					else if (tile[j, i].honey())
					{
						num12 = 11;
					}
					if (num12 == 0)
					{
						num12 = Style;
					}
					if ((num12 == 1 || num12 == 11) && drewLava)
					{
						continue;
					}
					float num17 = 0.5f;
					if (bg)
					{
						num17 = 1f;
					}
					if (num12 != 1 && num12 != 11)
					{
						num17 *= Alpha;
					}
					DrawTileInWater(-screenPosition + value, j, i);
					Vector2 value2 = new Vector2(j * 16, i * 16 + (int)num11 * 2);
					Microsoft.Xna.Framework.Rectangle value3 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16 - (int)num11 * 2);
					if (tile[j, i + 1].liquid < 245 && (!tile[j, i + 1].nactive() || !tileSolid[tile[j, i + 1].type] || tileSolidTop[tile[j, i + 1].type]))
					{
						float num18 = 256 - tile[j, i + 1].liquid;
						num18 /= 32f;
						num17 = 0.5f * (8f - num11) / 4f;
						if ((double)num17 > 0.55)
						{
							num17 = 0.55f;
						}
						if ((double)num17 < 0.35)
						{
							num17 = 0.35f;
						}
						float num19 = num11 / 2f;
						if (tile[j, i + 1].liquid < 200)
						{
							if (bg)
							{
								continue;
							}
							if (tile[j, i - 1].liquid > 0 && tile[j, i - 1].liquid > 0)
							{
								value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
								num17 = 0.5f;
							}
							else if (tile[j, i - 1].liquid > 0)
							{
								value2 = new Vector2(j * 16, i * 16 + 4);
								value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 12);
								num17 = 0.5f;
							}
							else if (tile[j, i + 1].liquid <= 0)
							{
								value2 = new Vector2(j * 16 + (int)num19, i * 16 + (int)num19 * 2 + (int)num18 * 2);
								value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16 - (int)num19 * 2, 16 - (int)num19 * 2);
							}
							else
							{
								value2 = new Vector2(j * 16, i * 16 + (int)num11 * 2 + (int)num18 * 2);
								value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16 - (int)num11 * 2);
							}
						}
						else
						{
							num17 = 0.5f;
							value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16 - (int)num11 * 2 + (int)num18 * 2);
						}
					}
					else if (tile[j, i - 1].liquid > 32)
					{
						value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, value3.Width, value3.Height);
					}
					else if (num11 < 1f && tile[j, i - 1].nactive() && tileSolid[tile[j, i - 1].type] && !tileSolidTop[tile[j, i - 1].type])
					{
						value2 = new Vector2(j * 16, i * 16);
						value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
					}
					else
					{
						bool flag = true;
						for (int k = i + 1; k < i + 6 && (!tile[j, k].nactive() || !tileSolid[tile[j, k].type] || tileSolidTop[tile[j, k].type]); k++)
						{
							if (tile[j, k].liquid < 200)
							{
								flag = false;
								break;
							}
						}
						if (!flag)
						{
							num17 = 0.5f;
							value3 = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
						}
						else if (tile[j, i - 1].liquid > 0)
						{
							value3 = new Microsoft.Xna.Framework.Rectangle(0, 2, value3.Width, value3.Height);
						}
					}
					if ((color.R > 20 || color.B > 20 || color.G > 20) && value3.Y < 4)
					{
						int num20 = color.R;
						if (color.G > num20)
						{
							num20 = color.G;
						}
						if (color.B > num20)
						{
							num20 = color.B;
						}
						num20 /= 30;
						if (rand.Next(20000) < num20)
						{
							Microsoft.Xna.Framework.Color newColor = new Microsoft.Xna.Framework.Color(255, 255, 255);
							if (tile[j, i].honey())
							{
								newColor = new Microsoft.Xna.Framework.Color(255, 255, 50);
							}
							int num21 = Dust.NewDust(new Vector2(j * 16, value2.Y - 2f), 16, 8, 43, 0f, 0f, 254, newColor, 0.75f);
							dust[num21].velocity *= 0f;
						}
					}
					if (tile[j, i].honey())
					{
						num17 *= 1.6f;
						if (num17 > 1f)
						{
							num17 = 1f;
						}
					}
					if (tile[j, i].lava())
					{
						num17 *= 1.8f;
						if (num17 > 1f)
						{
							num17 = 1f;
						}
						if (base.IsActive && !gamePaused && Dust.lavaBubbles < 200)
						{
							if (tile[j, i].liquid > 200 && rand.Next(700) == 0)
							{
								Dust.NewDust(new Vector2(j * 16, i * 16), 16, 16, 35);
							}
							if (value3.Y == 0 && rand.Next(350) == 0)
							{
								int num22 = Dust.NewDust(new Vector2(j * 16, (float)(i * 16) + num11 * 2f - 8f), 16, 8, 35, 0f, 0f, 50, default(Microsoft.Xna.Framework.Color), 1.5f);
								dust[num22].velocity *= 0.8f;
								dust[num22].velocity.X *= 2f;
								dust[num22].velocity.Y -= (float)rand.Next(1, 7) * 0.1f;
								if (rand.Next(10) == 0)
								{
									dust[num22].velocity.Y *= rand.Next(2, 5);
								}
								dust[num22].noGravity = true;
							}
						}
					}
					float num23 = (float)(int)color.R * num17;
					float num24 = (float)(int)color.G * num17;
					float num25 = (float)(int)color.B * num17;
					float num26 = (float)(int)color.A * num17;
					color = new Microsoft.Xna.Framework.Color((byte)num23, (byte)num24, (byte)num25, (byte)num26);
					if (Lighting.NotRetro && !bg)
					{
						Microsoft.Xna.Framework.Color color2 = color;
						if (num12 != 1 && ((double)(int)color2.R > (double)num6 * 0.6 || (double)(int)color2.G > (double)num6 * 0.65 || (double)(int)color2.B > (double)num6 * 0.7))
						{
							for (int l = 0; l < 4; l++)
							{
								int num27 = 0;
								int num28 = 0;
								int width = 8;
								int height = 8;
								Microsoft.Xna.Framework.Color color3 = color2;
								Microsoft.Xna.Framework.Color color4 = Lighting.GetColor(j, i);
								if (l == 0)
								{
									color4 = Lighting.GetColor(j - 1, i - 1);
									if (value3.Height < 8)
									{
										height = value3.Height;
									}
								}
								if (l == 1)
								{
									color4 = Lighting.GetColor(j + 1, i - 1);
									num27 = 8;
									if (value3.Height < 8)
									{
										height = value3.Height;
									}
								}
								if (l == 2)
								{
									color4 = Lighting.GetColor(j - 1, i + 1);
									num28 = 8;
									height = 8 - (16 - value3.Height);
								}
								if (l == 3)
								{
									color4 = Lighting.GetColor(j + 1, i + 1);
									num27 = 8;
									num28 = 8;
									height = 8 - (16 - value3.Height);
								}
								num23 = (float)(int)color4.R * num17;
								num24 = (float)(int)color4.G * num17;
								num25 = (float)(int)color4.B * num17;
								num26 = (float)(int)color4.A * num17;
								color4 = new Microsoft.Xna.Framework.Color((byte)num23, (byte)num24, (byte)num25, (byte)num26);
								color3.R = (byte)((color2.R * 3 + color4.R * 2) / 5);
								color3.G = (byte)((color2.G * 3 + color4.G * 2) / 5);
								color3.B = (byte)((color2.B * 3 + color4.B * 2) / 5);
								color3.A = (byte)((color2.A * 3 + color4.A * 2) / 5);
								spriteBatch.Draw(TextureAssets.Liquid[num12].Value, value2 - screenPosition + new Vector2(num27, num28) + value, new Microsoft.Xna.Framework.Rectangle(value3.X + num27, value3.Y + num28, width, height), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
							}
						}
						else
						{
							spriteBatch.Draw(TextureAssets.Liquid[num12].Value, value2 - screenPosition + value, value3, color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
						}
					}
					else
					{
						if (value3.Y < 4)
						{
							value3.X += (int)(wFrame * 18f);
						}
						spriteBatch.Draw(TextureAssets.Liquid[num12].Value, value2 - screenPosition + value, value3, color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (tile[j, i + 1].halfBrick())
					{
						color = Lighting.GetColor(j, i + 1);
						num23 = (float)(int)color.R * num17;
						num24 = (float)(int)color.G * num17;
						num25 = (float)(int)color.B * num17;
						num26 = (float)(int)color.A * num17;
						color = new Microsoft.Xna.Framework.Color((byte)num23, (byte)num24, (byte)num25, (byte)num26);
						value2 = new Vector2(j * 16, i * 16 + 16);
						spriteBatch.Draw(TextureAssets.Liquid[num12].Value, value2 - screenPosition + value, new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 8), color, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			if (!drewLava)
			{
				ambientLavaX = num4;
				ambientLavaY = num5;
				ambientLavaStrength = num;
			}
			drewLava = true;
		}

		protected bool FullTile(int x, int y)
		{
			if (Main.tile[x - 1, y] == null || Main.tile[x - 1, y].blockType() != 0 || Main.tile[x + 1, y] == null || Main.tile[x + 1, y].blockType() != 0)
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile == null)
			{
				return false;
			}
			if (tile.active())
			{
				if (tile.type < TileID.Sets.DrawsWalls.Length && TileID.Sets.DrawsWalls[tile.type])
				{
					return false;
				}
				if (tileSolid[tile.type] && !tileSolidTop[tile.type])
				{
					int frameX = tile.frameX;
					int frameY = tile.frameY;
					if (tileLargeFrames[tile.type] > 0)
					{
						if (frameY == 18 || frameY == 108)
						{
							if (frameX >= 18 && frameX <= 54)
							{
								return true;
							}
							if (frameX >= 108 && frameX <= 144)
							{
								return true;
							}
						}
					}
					else if (frameY == 18)
					{
						if (frameX >= 18 && frameX <= 54)
						{
							return true;
						}
						if (frameX >= 108 && frameX <= 144)
						{
							return true;
						}
					}
					else if (frameY >= 90 && frameY <= 196)
					{
						if (frameX <= 70)
						{
							return true;
						}
						if (frameX >= 144 && frameX <= 232)
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		protected void DrawBlack(bool force = false)
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Vector2 value = (drawToScreen ? Vector2.Zero : new Vector2(offScreenRange, offScreenRange));
			int num = (tileColor.R + tileColor.G + tileColor.B) / 3;
			float num2 = (float)((double)num * 0.4) / 255f;
			if (Lighting.Mode == LightMode.Retro)
			{
				num2 = (float)(tileColor.R - 55) / 255f;
				if (num2 < 0f)
				{
					num2 = 0f;
				}
			}
			else if (Lighting.Mode == LightMode.Trippy)
			{
				num2 = (float)(num - 55) / 255f;
				if (num2 < 0f)
				{
					num2 = 0f;
				}
			}
			Microsoft.Xna.Framework.Point screenOverdrawOffset = GetScreenOverdrawOffset();
			Microsoft.Xna.Framework.Point point = new Microsoft.Xna.Framework.Point(-offScreenRange / 16 + screenOverdrawOffset.X, -offScreenRange / 16 + screenOverdrawOffset.Y);
			int num3 = (int)((screenPosition.X - value.X) / 16f - 1f) + point.X;
			int num4 = (int)((screenPosition.X + (float)screenWidth + value.X) / 16f) + 2 - point.X;
			int num5 = (int)((screenPosition.Y - value.Y) / 16f - 1f) + point.Y;
			int num6 = (int)((screenPosition.Y + (float)screenHeight + value.Y) / 16f) + 5 - point.Y;
			if (num3 < 0)
			{
				num3 = point.X;
			}
			if (num4 > maxTilesX)
			{
				num4 = maxTilesX - point.X;
			}
			if (num5 < 0)
			{
				num5 = point.Y;
			}
			if (num6 > maxTilesY)
			{
				num6 = maxTilesY - point.Y;
			}
			if (!force)
			{
				if (num5 < maxTilesY / 2)
				{
					num6 = Math.Min(num6, (int)worldSurface + 1);
					num5 = Math.Min(num5, (int)worldSurface + 1);
				}
				else
				{
					num6 = Math.Max(num6, UnderworldLayer);
					num5 = Math.Max(num5, UnderworldLayer);
				}
			}
			for (int i = num5; i < num6; i++)
			{
				bool flag = i >= UnderworldLayer;
				if (flag)
				{
					num2 = 0.2f;
				}
				for (int j = num3; j < num4; j++)
				{
					int num7 = j;
					for (; j < num4; j++)
					{
						if (!WorldGen.InWorld(j, i))
						{
							return;
						}
						if (Main.tile[j, i] == null)
						{
							Main.tile[j, i] = new Tile();
						}
						Tile tile = Main.tile[j, i];
						float num8 = Lighting.Brightness(j, i);
						num8 = (float)Math.Floor(num8 * 255f) / 255f;
						byte b = tile.liquid;
						if (!(num8 <= num2) || ((flag || b >= 250) && !WorldGen.SolidTile(tile) && (b < 200 || num8 != 0f)) || (WallID.Sets.Transparent[tile.wall] && (!Main.tile[j, i].active() || !tileBlockLight[tile.type])) || (!drawToScreen && LiquidRenderer.Instance.HasFullWater(j, i) && tile.wall == 0 && !tile.halfBrick() && !((double)i <= worldSurface)))
						{
							break;
						}
					}
					if (j - num7 > 0)
					{
						spriteBatch.Draw(TextureAssets.BlackTile.Value, new Vector2(num7 << 4, i << 4) - screenPosition + value, new Microsoft.Xna.Framework.Rectangle(0, 0, j - num7 << 4, 16), Microsoft.Xna.Framework.Color.Black);
					}
				}
			}
			TimeLogger.DrawTime(5, stopwatch.Elapsed.TotalMilliseconds);
		}

		protected void RenderBlack()
		{
			if (!drawToScreen)
			{
				base.GraphicsDevice.SetRenderTarget(blackTarget);
				base.GraphicsDevice.DepthStencilState = new DepthStencilState
				{
					DepthBufferEnable = true
				};
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				spriteBatch.Begin();
				DrawBlack();
				TimeLogger.DetailedDrawReset();
				spriteBatch.End();
				TimeLogger.DetailedDrawTime(30);
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		protected void DrawWalls()
		{
			WallsRenderer.DrawWalls();
		}

		protected void RenderWalls()
		{
			if (drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(wallTarget);
			base.GraphicsDevice.DepthStencilState = new DepthStencilState
			{
				DepthBufferEnable = true
			};
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend);
			tileBatch.Begin();
			if (ignoreErrors)
			{
				try
				{
					DrawWalls();
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else
			{
				DrawWalls();
			}
			TimeLogger.DetailedDrawReset();
			tileBatch.End();
			spriteBatch.End();
			TimeLogger.DetailedDrawTime(32);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void ReleaseTargets()
		{
			try
			{
				if (!dedServ)
				{
					offScreenRange = 0;
					targetSet = false;
					if (waterTarget != null)
					{
						waterTarget.Dispose();
					}
					if (backWaterTarget != null)
					{
						backWaterTarget.Dispose();
					}
					if (blackTarget != null)
					{
						blackTarget.Dispose();
					}
					if (tileTarget != null)
					{
						tileTarget.Dispose();
					}
					if (tile2Target != null)
					{
						tile2Target.Dispose();
					}
					if (wallTarget != null)
					{
						wallTarget.Dispose();
					}
					if (screenTarget != null)
					{
						screenTarget.Dispose();
					}
					if (screenTargetSwap != null)
					{
						screenTargetSwap.Dispose();
					}
					if (backgroundTarget != null)
					{
						backgroundTarget.Dispose();
					}
					if (Main.OnRenderTargetsReleased != null)
					{
						Main.OnRenderTargetsReleased();
					}
				}
			}
			catch
			{
			}
		}

		protected bool checkMap(int i, int j)
		{
			if (mapTarget[i, j] == null || mapTarget[i, j].IsDisposed)
			{
				initMap[i, j] = false;
			}
			if (!initMap[i, j])
			{
				try
				{
					int width = textureMaxWidth;
					int height = textureMaxHeight;
					if (i == mapTargetX - 1)
					{
						width = 400;
					}
					if (j == mapTargetY - 1)
					{
						height = 600;
					}
					mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, width, height, mipMap: false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.None, 0, RenderTargetUsage.PreserveContents);
				}
				catch
				{
					mapEnabled = false;
					for (int k = 0; k < mapTargetX; k++)
					{
						for (int l = 0; l < mapTargetY; l++)
						{
							try
							{
								initMap[k, l] = false;
								mapTarget[k, l].Dispose();
							}
							catch
							{
							}
						}
					}
					return false;
				}
				initMap[i, j] = true;
			}
			return true;
		}

		protected void InitMap()
		{
			int num = mapTargetX;
			int num2 = mapTargetY;
			if (!mapEnabled)
			{
				return;
			}
			try
			{
				for (int i = 0; i < num; i++)
				{
					for (int j = 0; j < num2; j++)
					{
						mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, textureMaxWidth, textureMaxHeight, mipMap: false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.None, 0, RenderTargetUsage.PreserveContents);
					}
				}
				mapInit = true;
			}
			catch
			{
				mapEnabled = false;
				for (int k = 0; k < num; k++)
				{
					for (int l = 0; l < num2; l++)
					{
						try
						{
							if (mapTarget[k, l] != null)
							{
								mapTarget[k, l].Dispose();
							}
						}
						catch
						{
						}
					}
				}
			}
		}

		protected void InitTargets()
		{
			UpdateDisplaySettings();
			InitTargets(base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight);
		}

		protected void EnsureRenderTargetContent()
		{
			if (waterTarget == null || waterTarget.IsContentLost || backWaterTarget == null || backWaterTarget.IsContentLost || blackTarget == null || blackTarget.IsContentLost || tileTarget == null || tileTarget.IsContentLost || tile2Target == null || tile2Target.IsContentLost || wallTarget == null || wallTarget.IsContentLost || backgroundTarget == null || backgroundTarget.IsContentLost || screenTarget == null || screenTarget.IsContentLost || screenTargetSwap == null || screenTargetSwap.IsContentLost)
			{
				InitTargets();
			}
		}

		protected void InitTargets(int width, int height)
		{
			ReleaseTargets();
			offScreenRange = 192;
			if (width + offScreenRange * 2 > _renderTargetMaxSize)
			{
				offScreenRange = (_renderTargetMaxSize - width) / 2;
			}
			width += offScreenRange * 2;
			height += offScreenRange * 2;
			try
			{
				if (!dedServ)
				{
					targetSet = true;
					waterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, mipMap: false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.None);
					backWaterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, mipMap: false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.None);
					blackTarget = new RenderTarget2D(base.GraphicsDevice, width, height, mipMap: false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.None);
					tileTarget = new RenderTarget2D(base.GraphicsDevice, width, height, mipMap: false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.None);
					tile2Target = new RenderTarget2D(base.GraphicsDevice, width, height, mipMap: false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.None);
					wallTarget = new RenderTarget2D(base.GraphicsDevice, width, height, mipMap: false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.None);
					backgroundTarget = new RenderTarget2D(base.GraphicsDevice, width, height, mipMap: false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.None);
					screenTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight, mipMap: false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.None);
					screenTargetSwap = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight, mipMap: false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.None);
					if (Main.OnRenderTargetsInitialized != null)
					{
						Main.OnRenderTargetsInitialized(base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight);
					}
				}
			}
			catch
			{
				Lighting.Mode = LightMode.Retro;
				mapEnabled = false;
				SaveSettings();
				try
				{
					ReleaseTargets();
				}
				catch
				{
				}
			}
		}

		protected void DrawWires()
		{
			Microsoft.Xna.Framework.Rectangle value = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
			Vector2 zero = Vector2.Zero;
			DrawWiresSpecialTiles.Clear();
			bool flag = !WiresUI.Settings.HideWires;
			float scale = 1f;
			if (WiresUI.Settings.HideWires)
			{
				scale = 0.5f;
			}
			int num = 1;
			int num2 = 1;
			int num3 = 1;
			int num4 = 1;
			int num5 = 1;
			if (player[myPlayer].InfoAccMechShowWires)
			{
				int[] builderAccStatus = player[myPlayer].builderAccStatus;
				num = builderAccStatus[4];
				num2 = builderAccStatus[5];
				num3 = builderAccStatus[6];
				num4 = builderAccStatus[7];
				num5 = builderAccStatus[9];
			}
			_ = gfxQuality;
			_ = gfxQuality;
			Vector2 zero2 = Vector2.Zero;
			if (drawToScreen)
			{
				zero2 = Vector2.Zero;
			}
			int num6 = (int)((screenPosition.X - zero2.X) / 16f - 1f);
			int num7 = (int)((screenPosition.X + (float)screenWidth + zero2.X) / 16f) + 2;
			int num8 = (int)((screenPosition.Y - zero2.Y) / 16f - 1f);
			int num9 = (int)((screenPosition.Y + (float)screenHeight + zero2.Y) / 16f) + 5;
			if (num6 < 0)
			{
				num6 = 0;
			}
			if (num7 > maxTilesX)
			{
				num7 = maxTilesX;
			}
			if (num8 < 0)
			{
				num8 = 0;
			}
			if (num9 > maxTilesY)
			{
				num9 = maxTilesY;
			}
			Microsoft.Xna.Framework.Point screenOverdrawOffset = GetScreenOverdrawOffset();
			for (int i = num8 + screenOverdrawOffset.Y; i < num9 - screenOverdrawOffset.Y; i++)
			{
				for (int j = num6 + screenOverdrawOffset.X; j < num7 - screenOverdrawOffset.X; j++)
				{
					bool flag2 = false;
					bool flag3 = false;
					bool flag4 = false;
					bool flag5 = false;
					bool flag6 = false;
					bool flag7 = false;
					bool flag8 = false;
					bool flag9 = false;
					bool flag10 = false;
					float num10 = 0f;
					Tile tile = Main.tile[j, i];
					if (flag)
					{
						int num11 = 0;
						if (tile.active())
						{
							if (tile.type == 424)
							{
								switch (tile.frameX / 18)
								{
								case 0:
									num11 += 72;
									break;
								case 1:
									num11 += 144;
									break;
								case 2:
									num11 += 216;
									break;
								}
							}
							else if (tile.type == 445)
							{
								num11 += 72;
							}
						}
						if (tile.wire())
						{
							num10 += 1f;
							int num12 = 0;
							if (Main.tile[j, i - 1].wire())
							{
								num12 += 18;
								flag4 = true;
							}
							if (Main.tile[j + 1, i].wire())
							{
								num12 += 36;
								flag3 = true;
							}
							if (Main.tile[j, i + 1].wire())
							{
								num12 += 72;
								flag5 = true;
							}
							if (Main.tile[j - 1, i].wire())
							{
								num12 += 144;
								flag2 = true;
							}
							value.Y = num11;
							value.X = num12;
							Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
							switch (num)
							{
							case 0:
								color = Microsoft.Xna.Framework.Color.White;
								break;
							case 2:
								color *= 0.5f;
								break;
							case 3:
								color = Microsoft.Xna.Framework.Color.Transparent;
								break;
							}
							if (color == Microsoft.Xna.Framework.Color.Transparent)
							{
								num10 -= 1f;
							}
							else
							{
								spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2, value, color, 0f, zero, 1f, SpriteEffects.None, 0f);
							}
						}
						if (tile.wire2())
						{
							flag6 = (flag7 = (flag8 = (flag9 = (flag10 = false))));
							num10 += 1f;
							int num13 = 0;
							if (Main.tile[j, i - 1].wire2())
							{
								num13 += 18;
								flag8 = true;
								if (flag4)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j + 1, i].wire2())
							{
								num13 += 36;
								flag7 = true;
								if (flag3)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j, i + 1].wire2())
							{
								num13 += 72;
								flag9 = true;
								if (flag5)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j - 1, i].wire2())
							{
								num13 += 144;
								flag6 = true;
								if (flag2)
								{
									flag10 = true;
								}
							}
							if (num10 > 1f)
							{
								flag10 = true;
							}
							value.Y = num11 + 18;
							value.X = num13;
							Microsoft.Xna.Framework.Color color2 = Lighting.GetColor(j, i);
							switch (num2)
							{
							case 0:
								color2 = Microsoft.Xna.Framework.Color.White;
								break;
							case 2:
								color2 *= 0.5f;
								break;
							case 3:
								color2 = Microsoft.Xna.Framework.Color.Transparent;
								break;
							}
							if (color2 == Microsoft.Xna.Framework.Color.Transparent)
							{
								num10 -= 1f;
							}
							else
							{
								spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2, value, color2 * (1f / num10), 0f, zero, 1f, SpriteEffects.None, 0f);
								if (flag8)
								{
									if (flag10 && !flag4)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2, new Microsoft.Xna.Framework.Rectangle(18, value.Y, 16, 6), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag4 = true;
								}
								if (flag9)
								{
									if (flag10 && !flag5)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2 + new Vector2(0f, 10f), new Microsoft.Xna.Framework.Rectangle(72, value.Y + 10, 16, 6), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag5 = true;
								}
								if (flag7)
								{
									if (flag10 && !flag3)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2 + new Vector2(10f, 0f), new Microsoft.Xna.Framework.Rectangle(46, value.Y, 6, 16), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag3 = true;
								}
								if (flag6)
								{
									if (flag10 && !flag2)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2, new Microsoft.Xna.Framework.Rectangle(144, value.Y, 6, 16), color2, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag2 = true;
								}
							}
						}
						if (tile.wire3())
						{
							flag6 = (flag7 = (flag8 = (flag9 = (flag10 = false))));
							num10 += 1f;
							int num14 = 0;
							if (Main.tile[j, i - 1].wire3())
							{
								num14 += 18;
								flag8 = true;
								if (flag4)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j + 1, i].wire3())
							{
								num14 += 36;
								flag7 = true;
								if (flag3)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j, i + 1].wire3())
							{
								num14 += 72;
								flag9 = true;
								if (flag5)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j - 1, i].wire3())
							{
								num14 += 144;
								flag6 = true;
								if (flag2)
								{
									flag10 = true;
								}
							}
							if (num10 > 1f)
							{
								flag10 = true;
							}
							value.Y = num11 + 36;
							value.X = num14;
							Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(j, i);
							switch (num3)
							{
							case 0:
								color3 = Microsoft.Xna.Framework.Color.White;
								break;
							case 2:
								color3 *= 0.5f;
								break;
							case 3:
								color3 = Microsoft.Xna.Framework.Color.Transparent;
								break;
							}
							if (color3 == Microsoft.Xna.Framework.Color.Transparent)
							{
								num10 -= 1f;
							}
							else
							{
								spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2, value, color3 * (1f / num10), 0f, zero, 1f, SpriteEffects.None, 0f);
								if (flag8)
								{
									if (flag10 && !flag4)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2, new Microsoft.Xna.Framework.Rectangle(18, value.Y, 16, 6), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag4 = true;
								}
								if (flag9)
								{
									if (flag10 && !flag5)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2 + new Vector2(0f, 10f), new Microsoft.Xna.Framework.Rectangle(72, value.Y + 10, 16, 6), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag5 = true;
								}
								if (flag7)
								{
									if (flag10 && !flag3)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2 + new Vector2(10f, 0f), new Microsoft.Xna.Framework.Rectangle(46, value.Y, 6, 16), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag3 = true;
								}
								if (flag6)
								{
									if (flag10 && !flag2)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2, new Microsoft.Xna.Framework.Rectangle(144, value.Y, 6, 16), color3, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag2 = true;
								}
							}
						}
						if (tile.wire4())
						{
							flag6 = (flag7 = (flag8 = (flag9 = (flag10 = false))));
							num10 += 1f;
							int num15 = 0;
							if (Main.tile[j, i - 1].wire4())
							{
								num15 += 18;
								flag8 = true;
								if (flag4)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j + 1, i].wire4())
							{
								num15 += 36;
								flag7 = true;
								if (flag3)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j, i + 1].wire4())
							{
								num15 += 72;
								flag9 = true;
								if (flag5)
								{
									flag10 = true;
								}
							}
							if (Main.tile[j - 1, i].wire4())
							{
								num15 += 144;
								flag6 = true;
								if (flag2)
								{
									flag10 = true;
								}
							}
							if (num10 > 1f)
							{
								flag10 = true;
							}
							value.Y = num11 + 54;
							value.X = num15;
							Microsoft.Xna.Framework.Color color4 = Lighting.GetColor(j, i);
							switch (num4)
							{
							case 0:
								color4 = Microsoft.Xna.Framework.Color.White;
								break;
							case 2:
								color4 *= 0.5f;
								break;
							case 3:
								color4 = Microsoft.Xna.Framework.Color.Transparent;
								break;
							}
							if (color4 == Microsoft.Xna.Framework.Color.Transparent)
							{
								num10 -= 1f;
							}
							else
							{
								spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2, value, color4 * (1f / num10), 0f, zero, 1f, SpriteEffects.None, 0f);
								if (flag8)
								{
									if (flag10 && !flag4)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2, new Microsoft.Xna.Framework.Rectangle(18, value.Y, 16, 6), color4, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag4 = true;
								}
								if (flag9)
								{
									if (flag10 && !flag5)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2 + new Vector2(0f, 10f), new Microsoft.Xna.Framework.Rectangle(72, value.Y + 10, 16, 6), color4, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag5 = true;
								}
								if (flag7)
								{
									if (flag10 && !flag3)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2 + new Vector2(10f, 0f), new Microsoft.Xna.Framework.Rectangle(46, value.Y, 6, 16), color4, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag3 = true;
								}
								if (flag6)
								{
									if (flag10 && !flag2)
									{
										spriteBatch.Draw(TextureAssets.WireNew.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2, new Microsoft.Xna.Framework.Rectangle(144, value.Y, 6, 16), color4, 0f, zero, 1f, SpriteEffects.None, 0f);
									}
									flag2 = true;
								}
							}
						}
					}
					if (Main.tile[j, i].actuator() && (Lighting.Brightness(j, i) > 0f || num5 == 0))
					{
						Microsoft.Xna.Framework.Color value2 = Lighting.GetColor(j, i);
						switch (num5)
						{
						case 0:
							value2 = Microsoft.Xna.Framework.Color.White;
							break;
						case 2:
							value2 *= 0.5f;
							break;
						case 3:
							value2 = Microsoft.Xna.Framework.Color.Transparent;
							break;
						}
						spriteBatch.Draw(TextureAssets.Actuator.Value, new Vector2(j * 16 - (int)screenPosition.X, i * 16 - (int)screenPosition.Y) + zero2, new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Actuator.Width(), TextureAssets.Actuator.Height()), value2 * scale, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
					}
					if (tile.active())
					{
						ushort type = tile.type;
						if (type == 423 && tile.frameY == 36)
						{
							DrawWiresSpecialTiles.Add(Tuple.Create(j, i, tile.type));
						}
					}
				}
			}
			for (int k = 0; k < DrawWiresSpecialTiles.Count; k++)
			{
				Tuple<int, int, ushort> tuple = DrawWiresSpecialTiles[k];
				ushort type = tuple.Item3;
				if (type == 423)
				{
					Vector2 start = new Vector2(tuple.Item1 * 16 - 32 - 1, tuple.Item2 * 16 - 160 - 1) + zero2;
					Vector2 end = new Vector2(tuple.Item1 * 16 + 48 + 1, tuple.Item2 * 16 + 1) + zero2;
					Utils.DrawRectangle(spriteBatch, start, end, Microsoft.Xna.Framework.Color.LightSeaGreen, Microsoft.Xna.Framework.Color.LightSeaGreen, 2f);
				}
			}
			TimeLogger.DetailedDrawTime(34);
		}

		public static int ConvertPaintIdToTileShaderIndex(int paintIndexOnTile, bool isUsedForPaintingGrass, bool useWallShaderHacks)
		{
			if (paintIndexOnTile == 31)
			{
				return 0;
			}
			if (paintIndexOnTile == 30 && useWallShaderHacks)
			{
				return 43;
			}
			if (paintIndexOnTile >= 28)
			{
				return paintIndexOnTile + 12;
			}
			if (isUsedForPaintingGrass && paintIndexOnTile >= 1 && paintIndexOnTile <= 12)
			{
				return paintIndexOnTile + 27;
			}
			return paintIndexOnTile;
		}

		public static void ResetWindCounter(bool resetExtreme = false)
		{
			FastRandom fastRandom = FastRandom.CreateWithRandomSeed();
			windCounter = fastRandom.Next(900, 2701);
			if (resetExtreme)
			{
				extremeWindCounter = fastRandom.Next(10, 31);
			}
		}

		public static void NewLightning()
		{
			if (!DisableIntenseVisualEffects)
			{
				if (rand.Next(3) == 0)
				{
					thunderDelay = rand.Next(1, 31);
				}
				else if (rand.Next(2) == 0)
				{
					thunderDelay = rand.Next(31, 121);
				}
				else
				{
					thunderDelay = rand.Next(11, 61);
				}
				thunderDistance = thunderDelay;
				lightningDecay = rand.NextFloat() * 0.05f + 0.008f;
				lightningSpeed = rand.NextFloat() * 0.05f + 0.05f;
			}
		}

		public void UpdateWeather(GameTime gameTime)
		{
			if (netMode != 2)
			{
				bool isActive = base.IsActive;
				if (thunderDelay > 0)
				{
					thunderDelay--;
					if (thunderDelay == 0)
					{
						Vector2 center = player[myPlayer].Center;
						float num = thunderDistance * 15;
						if (rand.Next(2) == 0)
						{
							num *= -1f;
						}
						center.X += num;
						int num2 = (int)(worldSurface * 16.0) - 500;
						if (center.Y > (float)num2)
						{
							center.Y = num2;
						}
						if (isActive)
						{
							SoundEngine.PlaySound(43, center);
						}
					}
				}
				if (lightningSpeed > 0f)
				{
					lightning += lightningSpeed;
					if (lightning >= 1f)
					{
						lightning = 1f;
						lightningSpeed = 0f;
					}
					Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
					Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
				}
				else if (lightning > 0f)
				{
					lightning -= lightningDecay;
					Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
					Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
				}
				else if (thunderDelay <= 0 && (double)player[myPlayer].position.Y < rockLayer * 16.0 && atmo == 1f)
				{
					if (IsItStorming)
					{
						float num3 = 600f;
						float num4 = 1600f;
						if ((double)maxRaining > 0.8)
						{
							num3 *= 0.6f;
							num4 *= 0.8f;
						}
						if ((double)maxRaining > 0.7)
						{
							num3 *= 0.7f;
							num4 *= 0.9f;
						}
						if ((double)maxRaining > 0.6)
						{
							num3 *= 0.8f;
							num4 *= 0.95f;
						}
						if ((double)Math.Abs(windSpeedTarget) > 0.7)
						{
							num3 *= 0.6f;
							num4 *= 0.8f;
						}
						if ((double)Math.Abs(windSpeedTarget) > 0.6)
						{
							num3 *= 0.7f;
							num4 *= 0.9f;
						}
						if ((double)Math.Abs(windSpeedTarget) > 0.5)
						{
							num3 *= 0.8f;
							num4 *= 0.95f;
						}
						float num5 = rand.Next((int)num3, (int)num4);
						num5 *= (1f - maxRaining + 1f) / 2f;
						num5 *= (1f - windSpeedTarget + 1f) / 2f;
						num5 *= (float)dayRate;
						if (rand.Next((int)num5) == 0)
						{
							NewLightning();
						}
					}
					else if ((double)GraveyardVisualIntensity >= 0.9 && rand.Next(7200) == 0)
					{
						NewLightning();
					}
				}
			}
			float num6 = 0.8f;
			float num7 = 0.0003f;
			float num8 = windSpeedTarget * (1f + 5f / 9f * maxRaining);
			bool enabled = CreativePowerManager.Instance.GetPower<CreativePowers.FreezeWindDirectionAndStrength>().Enabled;
			if (!enabled && LanternNight.LanternsUp)
			{
				windSpeedTarget = 0f;
			}
			num7 += Math.Abs(num8 - windSpeedCurrent) * 0.0015f;
			if (windSpeedCurrent < num8)
			{
				windSpeedCurrent += num7;
				if (windSpeedCurrent > num8)
				{
					windSpeedCurrent = num8;
				}
			}
			else if (windSpeedCurrent > num8)
			{
				windSpeedCurrent -= num7;
				if (windSpeedCurrent < num8)
				{
					windSpeedCurrent = num8;
				}
			}
			if (netMode == 1 || (netMode != 2 && gameMenu) || (!enabled && LanternNight.LanternsUp))
			{
				return;
			}
			if (!enabled)
			{
				windCounter--;
				if (windCounter <= 0)
				{
					float num9 = 1f;
					if (windSpeedTarget < 0f)
					{
						num9 = -1f;
					}
					if (rand.Next(4) == 0)
					{
						windSpeedTarget += (float)rand.Next(-25, 26) * 0.001f;
					}
					else if (rand.Next(2) == 0)
					{
						windSpeedTarget += (float)rand.Next(-50, 51) * 0.001f;
					}
					else
					{
						windSpeedTarget += (float)rand.Next(-100, 101) * 0.001f;
					}
					extremeWindCounter--;
					if (extremeWindCounter <= 0)
					{
						ResetWindCounter(resetExtreme: true);
						if (rand.Next(30) < 13)
						{
							if (rand.Next(2) == 0)
							{
								windSpeedTarget = 0f;
								windCounter = rand.Next(7200, 28801);
							}
							else
							{
								windSpeedTarget = (float)rand.Next(-200, 201) * 0.001f;
							}
						}
						else if (rand.Next(20) < 13)
						{
							windSpeedTarget = (float)rand.Next(-400, 401) * 0.001f;
						}
						else
						{
							windSpeedTarget = (float)rand.Next(-850, 851) * 0.001f;
						}
						if ((double)Math.Abs(windSpeedTarget) > 0.3)
						{
							extremeWindCounter += rand.Next(5, 11);
						}
						if ((double)Math.Abs(windSpeedTarget) > 0.5)
						{
							extremeWindCounter += rand.Next(10, 21);
						}
						if ((double)Math.Abs(windSpeedTarget) > 0.7)
						{
							extremeWindCounter += rand.Next(15, 31);
						}
					}
					else
					{
						ResetWindCounter();
					}
					if (rand.Next(3) != 0 && ((num9 < 0f && windSpeedTarget > 0f) || (num9 > 0f && windSpeedTarget < 0f)))
					{
						windSpeedTarget *= -1f;
					}
				}
				if (windSpeedTarget > num6)
				{
					windSpeedTarget = num6;
				}
				if (windSpeedTarget < 0f - num6)
				{
					windSpeedTarget = 0f - num6;
				}
			}
			if (rand.Next(60) == 0)
			{
				numCloudsTemp += rand.Next(-1, 2);
			}
			if ((float)rand.Next(1000) < 50f * cloudBGAlpha)
			{
				numCloudsTemp++;
			}
			if ((float)rand.Next(1300) < 25f * (1f - cloudBGAlpha))
			{
				numCloudsTemp--;
			}
			if ((float)rand.Next(1000) < 200f * cloudAlpha && numCloudsTemp < 100)
			{
				numCloudsTemp++;
			}
			if ((float)rand.Next(1000) < 50f * cloudAlpha)
			{
				numCloudsTemp++;
			}
			if (numCloudsTemp > 66 && rand.Next(100) == 0)
			{
				numCloudsTemp -= rand.Next(1, 3);
			}
			if (numCloudsTemp < 50 && rand.Next(100) == 0)
			{
				numCloudsTemp += rand.Next(1, 3);
			}
			if (cloudBGActive <= 0f && numCloudsTemp > 100 && cloudAlpha == 0f)
			{
				numCloudsTemp = 100;
			}
			if (numCloudsTemp < -20)
			{
				numCloudsTemp = -20;
			}
			if (cloudAlpha > 0f && (float)numClouds < 200f * cloudAlpha)
			{
				while ((float)numClouds < 200f * cloudAlpha)
				{
					numClouds += rand.Next(30);
					if (numClouds > 200)
					{
						numClouds = 200;
					}
					if (numCloudsTemp < numClouds)
					{
						numCloudsTemp = numClouds;
					}
				}
				if (netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			weatherCounter--;
			if (weatherCounter > 0)
			{
				return;
			}
			if (rand.Next(2) == 0)
			{
				if (rand.Next(2) == 0)
				{
					numCloudsTemp += rand.Next(250);
				}
				else
				{
					numCloudsTemp += rand.Next(100);
				}
			}
			if (numCloudsTemp < 0)
			{
				numCloudsTemp = 0;
			}
			if (numCloudsTemp > 200)
			{
				numCloudsTemp = 200;
			}
			numClouds = numCloudsTemp;
			weatherCounter = rand.Next(3600, 10800);
			if (netMode == 2)
			{
				NetMessage.SendData(7);
			}
		}

		public void LoadBackground(int i)
		{
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			if (i >= 0 && (int)TextureAssets.Background[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.Background[i].Name, Main.content, (AssetRequestMode)1);
				backgroundWidth[i] = TextureAssets.Background[i].Width();
				backgroundHeight[i] = TextureAssets.Background[i].Height();
				switch (i)
				{
				case 219:
				case 220:
				case 221:
				case 235:
				case 271:
				case 272:
				case 273:
				case 281:
					backgroundWidth[i] /= 2;
					backgroundHeight[i] /= 2;
					break;
				}
			}
		}

		public void LoadItem(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.Item[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.Item[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadNPC(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.Npc[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.Npc[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadProjectile(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.Projectile[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.Projectile[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadGore(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.Gore[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.Gore[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadWall(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.Wall[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.Wall[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadTiles(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.Tile[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.Tile[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadItemFlames(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.ItemFlame[i].State == 0)
			{
				try
				{
					Assets.Request<Texture2D>(TextureAssets.ItemFlame[i].Name, Main.content, (AssetRequestMode)1);
				}
				catch
				{
				}
			}
		}

		public void LoadWings(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.Wings[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.Wings[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadHair(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.PlayerHair[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.PlayerHair[i].Name, Main.content, (AssetRequestMode)1);
				Assets.Request<Texture2D>(TextureAssets.PlayerHairAlt[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadArmorHead(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.ArmorHead[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.ArmorHead[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadArmorBody(int i)
		{
			//IL_0010: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			if (ArmorIDs.Body.Sets.UsesNewFramingCode[i])
			{
				if ((int)TextureAssets.ArmorBodyComposite[i].State == 0)
				{
					Assets.Request<Texture2D>(TextureAssets.ArmorBodyComposite[i].Name, Main.content, (AssetRequestMode)1);
				}
			}
			else if ((int)TextureAssets.ArmorBody[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.FemaleBody[i].Name, Main.content, (AssetRequestMode)1);
				Assets.Request<Texture2D>(TextureAssets.ArmorBody[i].Name, Main.content, (AssetRequestMode)1);
				Assets.Request<Texture2D>(TextureAssets.ArmorArm[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadArmorLegs(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.ArmorLeg[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.ArmorLeg[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadAccHandsOn(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.AccHandsOn[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccHandsOn[i].Name, Main.content, (AssetRequestMode)1);
			}
			if (ArmorIDs.HandOn.Sets.UsesNewFramingCode[i] && (int)TextureAssets.AccHandsOnComposite[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccHandsOnComposite[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadAccHandsOff(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.AccHandsOff[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccHandsOff[i].Name, Main.content, (AssetRequestMode)1);
			}
			if (ArmorIDs.HandOff.Sets.UsesNewFramingCode[i] && (int)TextureAssets.AccHandsOffComposite[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccHandsOffComposite[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadAccBack(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.AccBack[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccBack[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadAccFront(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.AccFront[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccFront[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadAccShoes(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.AccShoes[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccShoes[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadAccWaist(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.AccWaist[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccWaist[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadAccShield(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.AccShield[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccShield[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadAccNeck(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.AccNeck[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccNeck[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadAccFace(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.AccFace[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccFace[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadAccBalloon(int i)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.AccBalloon[i].State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.AccBalloon[i].Name, Main.content, (AssetRequestMode)1);
			}
		}

		public void LoadFlameRing()
		{
			//IL_0005: Unknown result type (might be due to invalid IL or missing references)
			if ((int)TextureAssets.FlameRing.State == 0)
			{
				Assets.Request<Texture2D>(TextureAssets.FlameRing.Name, Main.content, (AssetRequestMode)1);
			}
		}

		protected void DrawSurfaceBG()
		{
			Microsoft.Xna.Framework.Color colorOfSurfaceBackgroundsBase = ColorOfSurfaceBackgroundsBase;
			int num = 30;
			if (gameMenu)
			{
				num = 0;
			}
			if (WorldGen.drunkWorldGen)
			{
				num = -180;
			}
			float num2 = (float)worldSurface;
			if (num2 == 0f)
			{
				num2 = 1f;
			}
			_ = screenPosition;
			float num3 = screenPosition.Y + (float)(screenHeight / 2) - 600f;
			double num4 = (num3 - screenOff / 2f) / (num2 * 16f);
			num4 = 0f - MathHelper.Lerp((float)num4, 1f, 0f);
			num4 = (0f - num3 + screenOff / 2f) / (num2 * 16f);
			float num5 = 2f;
			int num6 = 0;
			float scale = SkyManager.Instance.ProcessCloudAlpha() * atmo;
			if (!mapFullscreen && (double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < 200; i++)
				{
					if (cloud[i].active && cloud[i].scale < 1f)
					{
						Microsoft.Xna.Framework.Color value = cloud[i].cloudColor(ColorOfTheSkies);
						float num7 = cloud[i].scale * 0.8f;
						float num8 = (cloud[i].scale + 1f) / 2f * 0.9f;
						value.R = (byte)((float)(int)value.R * num7);
						value.G = (byte)((float)(int)value.G * num8);
						float num9 = cloud[i].position.Y * ((float)screenHeight / 600f);
						num9 = cloud[i].position.Y + (float)(int)(num4 * 750.0 + 830.0) + (float)(int)scAdj + (float)num6;
						spriteBatch.Draw(TextureAssets.Cloud[cloud[i].type].Value, new Vector2(cloud[i].position.X + (float)TextureAssets.Cloud[cloud[i].type].Width() * 0.5f, num9 + (float)TextureAssets.Cloud[cloud[i].type].Height() * 0.5f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Cloud[cloud[i].type].Width(), TextureAssets.Cloud[cloud[i].type].Height()), value * scale, cloud[i].rotation, new Vector2((float)TextureAssets.Cloud[cloud[i].type].Width() * 0.5f, (float)TextureAssets.Cloud[cloud[i].type].Height() * 0.5f), cloud[i].scale, cloud[i].spriteDir, 0f);
					}
				}
			}
			if (invasionType == 4 && !SkyManager.Instance["Martian"].IsActive())
			{
				SkyManager.Instance.Activate("Martian", default(Vector2));
			}
			else if (invasionType != 4 && SkyManager.Instance["Martian"].IsActive())
			{
				SkyManager.Instance.Deactivate("Martian");
			}
			SkyManager.Instance.ResetDepthTracker();
			bgParallax = 0.15;
			int num10 = -180;
			bool flag = true;
			int num11 = 0;
			if (gameMenu)
			{
				num11 -= num10;
			}
			num6 = num11;
			num6 += num;
			if (!WorldGen.drunkWorldGen && !mapFullscreen && (double)(screenPosition.Y / 16f) <= worldSurface + 10.0)
			{
				if (BackgroundEnabled)
				{
					if (cloudBGActive > 0f)
					{
						cloudBGAlpha += 0.0005f * (float)dayRate;
						if (cloudBGAlpha > 1f)
						{
							cloudBGAlpha = 1f;
						}
					}
					else
					{
						cloudBGAlpha -= 0.0005f * (float)dayRate;
						if (cloudBGAlpha < 0f)
						{
							cloudBGAlpha = 0f;
						}
					}
					if (cloudBGAlpha > 0f)
					{
						LoadBackground(cloudBG[0]);
						LoadBackground(cloudBG[1]);
						float num12 = cloudBGAlpha;
						if (num12 > 1f)
						{
							num12 = 1f;
						}
						bgScale = 1.65f;
						bgParallax = 0.090000003576278687;
						if (base.IsActive && !gamePaused)
						{
							cloudBGX[0] += windSpeedCurrent * (float)bgParallax * 9f * (float)dayRate;
						}
						if (cloudBGX[0] > (float)backgroundWidth[cloudBG[0]] * bgScale)
						{
							cloudBGX[0] -= (float)backgroundWidth[cloudBG[0]] * bgScale;
						}
						if (cloudBGX[0] < (float)(-backgroundWidth[cloudBG[0]]) * bgScale)
						{
							cloudBGX[0] += (float)backgroundWidth[cloudBG[0]] * bgScale;
						}
						float num13 = (float)backgroundWidth[cloudBG[0]] * bgScale;
						bgTopY = (int)(num4 * 900.0 + 600.0) + (int)scAdj + num6;
						if (gameMenu)
						{
							bgTopY = -150 + num6;
						}
						bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, num13) - (double)(num13 / 2f) - (double)num13);
						bgStartX += (int)cloudBGX[0];
						bgLoops = screenWidth / (int)num13 + 2 + 2;
						ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * num12;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						for (int j = 0; j < bgLoops; j++)
						{
							spriteBatch.Draw(TextureAssets.Background[cloudBG[0]].Value, new Vector2((float)bgStartX + num13 * (float)j, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[cloudBG[0]], backgroundHeight[cloudBG[0]]), ColorOfSurfaceBackgroundsModified * scale, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
						}
						num12 = cloudBGAlpha * 1.5f;
						if (num12 > 1f)
						{
							num12 = 1f;
						}
						ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * num12;
						bgScale = 1.85f;
						bgParallax = 0.12;
						if (base.IsActive && !gamePaused)
						{
							cloudBGX[1] += windSpeedCurrent * (float)bgParallax * 9f * (float)dayRate;
						}
						if (cloudBGX[1] > (float)backgroundWidth[cloudBG[1]] * bgScale)
						{
							cloudBGX[1] -= (float)backgroundWidth[cloudBG[1]] * bgScale;
						}
						if (cloudBGX[1] < (float)(-backgroundWidth[cloudBG[1]]) * bgScale)
						{
							cloudBGX[1] += (float)backgroundWidth[cloudBG[1]] * bgScale;
						}
						num13 = (float)backgroundWidth[cloudBG[1]] * bgScale;
						bgTopY = (int)(num4 * 1100.0 + 750.0) + (int)scAdj + num6;
						if (gameMenu)
						{
							bgTopY = -50 + num6;
						}
						bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, num13) - (double)(num13 / 2f) - (double)num13);
						bgStartX += (int)cloudBGX[1];
						bgLoops = screenWidth / (int)num13 + 2 + 2;
						SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
						for (int k = 0; k < bgLoops; k++)
						{
							spriteBatch.Draw(TextureAssets.Background[cloudBG[1]].Value, new Vector2((float)bgStartX + num13 * (float)k, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[cloudBG[1]], backgroundHeight[cloudBG[1]]), ColorOfSurfaceBackgroundsModified * scale, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
						}
					}
					DrawSurfaceBG_BackMountainsStep1(num4, num5, num6);
				}
				cTop = bgTopY - 50;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int l = 0; l < 200; l++)
					{
						if (cloud[l].active && (double)cloud[l].scale < 1.15 && cloud[l].scale >= 1f)
						{
							Microsoft.Xna.Framework.Color value2 = cloud[l].cloudColor(ColorOfTheSkies);
							if (atmo < 1f)
							{
								value2 *= atmo;
							}
							float num14 = cloud[l].position.Y * ((float)screenHeight / 600f);
							float num15 = (float)((double)(screenPosition.Y / 16f - 24f) / worldSurface);
							if (num15 < 0f)
							{
								num15 = 0f;
							}
							if (num15 > 1f)
							{
								num15 = 1f;
							}
							if (gameMenu)
							{
								num15 = 1f;
							}
							spriteBatch.Draw(TextureAssets.Cloud[cloud[l].type].Value, new Vector2(cloud[l].position.X + (float)TextureAssets.Cloud[cloud[l].type].Width() * 0.5f, num14 + (float)TextureAssets.Cloud[cloud[l].type].Height() * 0.5f + cTop + 200f), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Cloud[cloud[l].type].Width(), TextureAssets.Cloud[cloud[l].type].Height()), value2 * scale, cloud[l].rotation, new Vector2((float)TextureAssets.Cloud[cloud[l].type].Width() * 0.5f, (float)TextureAssets.Cloud[cloud[l].type].Height() * 0.5f), cloud[l].scale, cloud[l].spriteDir, 0f);
						}
					}
				}
				if (SceneMetrics.HolyTileCount > 0 && BackgroundEnabled)
				{
					bgParallax = 0.17;
					bgScale = 1.1f;
					bgTopY = (int)(num4 * 1400.0 + 900.0) + (int)scAdj + num6;
					SetBackgroundOffsets(18, num4, num6);
					bgScale *= num5;
					bgWidthScaled = (int)((double)(2100f * bgScale) * 1.05);
					bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
					bgLoops = screenWidth / bgWidthScaled + 2;
					if (gameMenu)
					{
						bgTopY = 230 + num6;
						bgStartX -= 500;
					}
					SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
					Microsoft.Xna.Framework.Color color = colorOfSurfaceBackgroundsBase;
					float num16 = (float)(SceneMetrics.HolyTileCount - SceneMetrics.HallowTileThreshold) / (float)(SceneMetrics.HallowTileMax - SceneMetrics.HallowTileThreshold);
					if (num16 > 0.5f)
					{
						num16 = 0.5f;
					}
					else if (num16 < 0f)
					{
						num16 = 0f;
					}
					color.R = (byte)((float)(int)color.R * num16);
					color.G = (byte)((float)(int)color.G * num16);
					color.B = (byte)((float)(int)color.B * num16);
					color.A = (byte)((float)(int)color.A * num16 * 0.8f);
					if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
					{
						LoadBackground(18);
						LoadBackground(19);
						for (int m = 0; m < bgLoops; m++)
						{
							spriteBatch.Draw(TextureAssets.Background[18].Value, new Vector2(bgStartX + bgWidthScaled * m, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[18], backgroundHeight[18]), color, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							spriteBatch.Draw(TextureAssets.Background[19].Value, new Vector2(bgStartX + bgWidthScaled * m + 1900, bgTopY + 100), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[19], backgroundHeight[19]), color, 0f, default(Vector2), bgScale * 0.9f, SpriteEffects.None, 0f);
						}
					}
				}
				if (treeMntBGSet1[1] > -1)
				{
					LoadBackground(treeMntBGSet1[1]);
					bgParallax = 0.2;
					bgScale = 1.15f;
					bgScale *= num5;
					int num17 = backgroundWidth[treeMntBGSet1[1]];
					if (num17 == 0)
					{
						num17 = 1;
					}
					bgWidthScaled = (int)((float)num17 * bgScale);
					bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
					bgLoops = screenWidth / bgWidthScaled + 2;
					if (treeMntBGSet1[1] == 172)
					{
						bgLoops++;
					}
					bgTopY = (int)(num4 * 1400.0 + 1260.0) + (int)scAdj + num6;
				}
				if (BackgroundEnabled)
				{
					DrawSurfaceBG_BackMountainsStep2(num6);
				}
				cTop = (float)bgTopY * 1.01f - 150f;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int n = 0; n < 200; n++)
					{
						if (cloud[n].active && cloud[n].scale >= 1.15f)
						{
							Microsoft.Xna.Framework.Color value3 = cloud[n].cloudColor(ColorOfTheSkies);
							if (atmo < 1f)
							{
								value3 *= atmo;
							}
							float num18 = cloud[n].position.Y * ((float)screenHeight / 600f) - 100f;
							float num19 = (float)((double)(screenPosition.Y / 16f - 24f) / worldSurface);
							if (num19 < 0f)
							{
								num19 = 0f;
							}
							if (num19 > 1f)
							{
								num19 = 1f;
							}
							if (gameMenu)
							{
								num19 = 1f;
							}
							spriteBatch.Draw(TextureAssets.Cloud[cloud[n].type].Value, new Vector2(cloud[n].position.X + (float)TextureAssets.Cloud[cloud[n].type].Width() * 0.5f, num18 + (float)TextureAssets.Cloud[cloud[n].type].Height() * 0.5f + cTop), new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.Cloud[cloud[n].type].Width(), TextureAssets.Cloud[cloud[n].type].Height()), value3 * scale, cloud[n].rotation, new Vector2((float)TextureAssets.Cloud[cloud[n].type].Width() * 0.5f, (float)TextureAssets.Cloud[cloud[n].type].Height() * 0.5f), cloud[n].scale, cloud[n].spriteDir, 0f);
						}
					}
				}
			}
			if (flag)
			{
				num6 += num10;
			}
			if (!mapFullscreen)
			{
				for (int num20 = 0; num20 < bgAlphaFrontLayer.Length; num20++)
				{
					if (BackgroundEnabled)
					{
						ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFrontLayer[num20];
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 0)
						{
							DrawSurfaceBG_Forest(num4, num5, num6, treeBGSet1);
							DrawSurfaceBG_DrawChangeOverlay(0);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 10)
						{
							DrawSurfaceBG_Forest(num4, num5, num6, treeBGSet2);
							DrawSurfaceBG_DrawChangeOverlay(1);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 11)
						{
							DrawSurfaceBG_Forest(num4, num5, num6, treeBGSet3);
							DrawSurfaceBG_DrawChangeOverlay(2);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 12)
						{
							DrawSurfaceBG_Forest(num4, num5, num6, treeBGSet4);
							DrawSurfaceBG_DrawChangeOverlay(3);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 1)
						{
							int[] bgTexIndexes = corruptBG;
							DrawSurfaceBG_Corrupt(num4, num5, num6, bgTexIndexes);
							DrawSurfaceBG_DrawChangeOverlay(4);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 2)
						{
							int[] bgTexIndexes2 = desertBG;
							DrawSurfaceBG_Desert(num4, num5, num6, bgTexIndexes2);
							DrawSurfaceBG_DrawChangeOverlay(9);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 3)
						{
							int[] bgTexIndexes3 = jungleBG;
							DrawSurfaceBG_Jungle(num4, num5, num6, bgTexIndexes3);
							DrawSurfaceBG_DrawChangeOverlay(5);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 4)
						{
							DrawSurfaceBG_DrawChangeOverlay(10);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 5)
						{
							DrawSurfaceBG_GoodEvilDesert(num4, num5, num6);
							DrawSurfaceBG_DrawChangeOverlay(9);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 6)
						{
							int[] bgTexIndexes4 = hallowBG;
							DrawSurfaceBG_Hallow(num4, num5, num6, bgTexIndexes4);
							DrawSurfaceBG_DrawChangeOverlay(7);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 7)
						{
							int[] bgTexIndexes5 = snowBG;
							DrawSurfaceBG_Snow(num4, num5, num6, bgTexIndexes5);
							DrawSurfaceBG_DrawChangeOverlay(6);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 8)
						{
							int[] bgTexIndexes6 = crimsonBG;
							DrawSurfaceBG_Crimson(num4, num5, num6, bgTexIndexes6);
							DrawSurfaceBG_DrawChangeOverlay(8);
						}
						if (bgAlphaFrontLayer[num20] > 0f && num20 == 9)
						{
							int[] bgTexIndexes7 = mushroomBG;
							DrawSurfaceBG_Mushroom(num4, num5, num6, bgTexIndexes7);
							DrawSurfaceBG_DrawChangeOverlay(11);
						}
					}
				}
			}
			if (flag)
			{
				num6 -= num10;
			}
			float num21 = DrawSurfaceBG_GetFogPower();
			if (!mapFullscreen && num21 > 0f && !gameMenu && (double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				bgParallax = 0.1;
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, backgroundWidth[background]) - (double)(backgroundWidth[background] / 2));
				bgLoops = screenWidth / backgroundWidth[background] + 2;
				bgStartY = 0;
				bgLoopsY = 0;
				bgTopY = (int)((double)(0f - screenPosition.Y) / (worldSurface * 16.0 - 600.0) * 200.0);
				Texture2D value4 = TextureAssets.Background[49].Value;
				for (int num22 = 0; num22 < bgLoops; num22++)
				{
					bgStartX = 0;
					Microsoft.Xna.Framework.Color color2 = ColorOfTheSkies * num21 * atmo;
					int height = Math.Max(screenHeight + 210, value4.Height);
					spriteBatch.Draw(value4, new Microsoft.Xna.Framework.Rectangle(bgStartX + value4.Width * num22, bgTopY, value4.Width, height), color2);
				}
			}
			if (!mapFullscreen)
			{
				SkyManager.Instance.DrawRemainingDepth(spriteBatch);
			}
		}

		private static float DrawSurfaceBG_GetFogPower()
		{
			return Math.Max(cloudAlpha, GraveyardVisualIntensity * 0.92f);
		}

		private void DrawSurfaceBG_DrawBackMountainsLayer(int bgTextureIndex)
		{
			if (bgTextureIndex >= 0)
			{
				LoadBackground(bgTextureIndex);
				int num = DrawSurfaceBG_GetLayerYOffset(bgTextureIndex);
				bgTopY += num;
				for (int i = 0; i < bgLoops; i++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTextureIndex].Value, new Vector2(bgStartX + bgWidthScaled * i, bgTopY), GetBackgroundRect(bgTextureIndex), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
				bgTopY -= num;
			}
		}

		private int DrawSurfaceBG_GetLayerYOffset(int bgTextureIndex)
		{
			switch (bgTextureIndex)
			{
			case 59:
				return -550;
			case 93:
			case 168:
			case 169:
			case 170:
				return -50;
			case 171:
				return -100;
			case 172:
				return 130;
			case 176:
				return -760;
			case 177:
				return -200;
			case 179:
				return -100;
			case 180:
			case 181:
			case 182:
			case 183:
				return -350;
			case 246:
				return -150;
			case 247:
				return -150;
			case 263:
				return -700;
			case 269:
				return -100;
			case 270:
				return -50;
			case 271:
				return -300;
			case 272:
				return -380;
			case 277:
				return -260;
			case 278:
				return -120;
			case 280:
				return -170;
			case 281:
				return -300;
			case 283:
				return -800;
			default:
				return 0;
			}
		}

		private float GetForestToForestBackgroundLerperValue()
		{
			return (GlobalTimeWrappedHourly * ((float)Math.PI / 2f)).ToRotationVector2().X * 0.5f + 0.5f;
		}

		private void DrawSurfaceBG_BackMountainsStep1(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack)
		{
			Microsoft.Xna.Framework.Color colorOfSurfaceBackgroundsBase = ColorOfSurfaceBackgroundsBase;
			bgScale = 1f;
			bgTopY = (int)(backgroundTopMagicNumber * 1300.0 + 1090.0) + (int)scAdj + pushBGTopHack;
			bgScale *= bgGlobalScaleMultiplier;
			bgParallax = 0.15;
			bgWidthScaled = (int)(1024f * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (bgWidthScaled == 0)
			{
				bgWidthScaled = 1024;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if (gameMenu)
			{
				bgTopY = 100 + pushBGTopHack;
			}
			if (!((double)screenPosition.Y < worldSurface * 16.0 + 16.0))
			{
				return;
			}
			if (bgAlphaFarBackLayer[0] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[0];
				DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet1[0]);
			}
			if (bgAlphaFarBackLayer[10] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[10];
				DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet2[0]);
			}
			if (bgAlphaFarBackLayer[11] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[11];
				DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet3[0]);
			}
			if (bgAlphaFarBackLayer[12] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[12];
				DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet4[0]);
			}
			if (bgAlphaFarBackLayer[1] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[1];
				if (WorldGen.desertBG != 4)
				{
					DrawSurfaceBG_DrawBackMountainsLayer(23);
				}
			}
			if (bgAlphaFarBackLayer[2] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[2];
				DrawSurfaceBG_DrawBackMountainsLayer(24);
			}
			if (bgAlphaFarBackLayer[4] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[4];
				DrawSurfaceBG_DrawBackMountainsLayer(snowMntBG[0]);
			}
			if (bgAlphaFarBackLayer[5] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[5];
				if (WorldGen.crimsonBG != 5)
				{
					DrawSurfaceBG_DrawBackMountainsLayer(24);
				}
			}
			if (bgAlphaFarBackLayer[6] > 0f && WorldGen.hallowBG == 3)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[6];
				DrawSurfaceBG_DrawBackMountainsLayer(246);
			}
			SkyManager.Instance.DrawToDepth(spriteBatch, 5f);
		}

		private void DrawSurfaceBG_BackMountainsStep2(int pushBGTopHack)
		{
			if (gameMenu)
			{
				bgTopY = 230 + pushBGTopHack;
				bgStartX -= 500;
			}
			Microsoft.Xna.Framework.Color colorOfSurfaceBackgroundsBase = ColorOfSurfaceBackgroundsBase;
			UpdateOceanWaterLineForAmbience();
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			if (!((double)screenPosition.Y < worldSurface * 16.0 + 16.0))
			{
				return;
			}
			if (bgAlphaFarBackLayer[0] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[0];
				if (treeMntBGSet1[1] > -1)
				{
					DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet1[1]);
				}
			}
			if (bgAlphaFarBackLayer[1] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[1];
				if (WorldGen.desertBG != 4)
				{
					DrawSurfaceBG_DrawBackMountainsLayer(22);
				}
			}
			if (bgAlphaFarBackLayer[2] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[2];
				DrawSurfaceBG_DrawBackMountainsLayer(25);
			}
			if (bgAlphaFarBackLayer[3] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[3];
				DrawSurfaceBG_DrawBackMountainsLayer(oceanBG);
			}
			if (bgAlphaFarBackLayer[4] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[4];
				DrawSurfaceBG_DrawBackMountainsLayer(snowMntBG[1]);
			}
			if (bgAlphaFarBackLayer[5] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[5];
				if (WorldGen.crimsonBG != 5)
				{
					DrawSurfaceBG_DrawBackMountainsLayer(42);
				}
			}
			if (bgAlphaFarBackLayer[6] > 0f && WorldGen.hallowBG == 3)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[6];
				DrawSurfaceBG_DrawBackMountainsLayer(247);
			}
			if (bgAlphaFarBackLayer[10] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[10];
				if (treeMntBGSet2[1] > -1)
				{
					DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet2[1]);
				}
			}
			if (bgAlphaFarBackLayer[11] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[11];
				if (treeMntBGSet3[1] > -1)
				{
					DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet3[1]);
				}
			}
			if (bgAlphaFarBackLayer[12] > 0f)
			{
				ColorOfSurfaceBackgroundsModified = colorOfSurfaceBackgroundsBase * bgAlphaFarBackLayer[12];
				if (treeMntBGSet4[1] > -1)
				{
					DrawSurfaceBG_DrawBackMountainsLayer(treeMntBGSet4[1]);
				}
			}
		}

		private void UpdateOceanWaterLineForAmbience()
		{
			int num = DrawSurfaceBG_GetLayerYOffset(oceanBG);
			int num2 = 0;
			switch (oceanBG)
			{
			case 28:
			case 110:
			case 111:
			case 209:
			case 210:
				num2 = 102;
				break;
			case 283:
				num2 = 124;
				break;
			}
			float yScreenPosition = (float)(bgTopY + num) + (float)num2 * bgScale;
			AmbientSkyDrawCache.Instance.SetOceanLineInfo(yScreenPosition, bgAlphaFarBackLayer[3]);
		}

		private void DrawSurfaceBG_Mushroom(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			float num = 0.33f;
			Vector3 vector = new Vector3(0.1f, 0.15f, 0.3f);
			float num2 = 0.5f;
			Vector3 vector2 = new Vector3(0.1f, 0.175f, 0.3f);
			float num3 = 0.75f;
			Vector3 vector3 = new Vector3(0.125f, 0.2f, 0.3f);
			num = 0.5f;
			num2 = 0.625f;
			num3 = 0.75f;
			vector *= 3f;
			vector2 *= 3f;
			vector3 *= 3f;
			float num4 = (float)(int)ColorOfSurfaceBackgroundsModified.A / 255f;
			Microsoft.Xna.Framework.Color colorOfSurfaceBackgroundsModified = ColorOfSurfaceBackgroundsModified;
			float num5 = (float)rand.Next(28, 42) * 0.001f;
			num5 += (float)(270 - mouseTextColor) / 5000f;
			float x = vector.X;
			float num6 = vector.Y + num5 / 2f;
			float num7 = vector.Z + num5;
			x *= 255f;
			num6 *= 255f;
			num7 *= 255f;
			x *= num * num4;
			num6 *= num * num4;
			num7 *= num * num4;
			if (x > 255f)
			{
				x = 255f;
			}
			if (num6 > 255f)
			{
				num6 = 255f;
			}
			if (num7 > 255f)
			{
				num7 = 255f;
			}
			if (x > (float)(int)colorOfSurfaceBackgroundsModified.R)
			{
				colorOfSurfaceBackgroundsModified.R = (byte)x;
			}
			if (num6 > (float)(int)colorOfSurfaceBackgroundsModified.G)
			{
				colorOfSurfaceBackgroundsModified.G = (byte)num6;
			}
			if (num7 > (float)(int)colorOfSurfaceBackgroundsModified.B)
			{
				colorOfSurfaceBackgroundsModified.B = (byte)num7;
			}
			bgScale = 1.25f;
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[0]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
			bgParallax = 0.4;
			SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1400.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			if (gameMenu)
			{
				bgTopY = 320 + pushBGTopHack;
			}
			if (bgWidthScaled != 0)
			{
				bgLoops = screenWidth / bgWidthScaled + 2;
			}
			if (TextureAssets.Background[bgTexIndexes[0]].Value == null)
			{
				return;
			}
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < bgLoops; i++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2(bgStartX + bgWidthScaled * i, bgTopY), GetBackgroundRect(bgTexIndexes[0]), colorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
			colorOfSurfaceBackgroundsModified = ColorOfSurfaceBackgroundsModified;
			num5 = (float)rand.Next(28, 42) * 0.001f;
			num5 += (float)(270 - mouseTextColor) / 5000f;
			x = vector2.X;
			num6 = vector2.Y + num5 / 2f;
			num7 = vector2.Z + num5;
			x *= 255f;
			num6 *= 255f;
			num7 *= 255f;
			x *= num2 * num4;
			num6 *= num2 * num4;
			num7 *= num2 * num4;
			if (x > 255f)
			{
				x = 255f;
			}
			if (num6 > 255f)
			{
				num6 = 255f;
			}
			if (num7 > 255f)
			{
				num7 = 255f;
			}
			if (x > (float)(int)colorOfSurfaceBackgroundsModified.R)
			{
				colorOfSurfaceBackgroundsModified.R = (byte)x;
			}
			if (num6 > (float)(int)colorOfSurfaceBackgroundsModified.G)
			{
				colorOfSurfaceBackgroundsModified.G = (byte)num6;
			}
			if (num7 > (float)(int)colorOfSurfaceBackgroundsModified.B)
			{
				colorOfSurfaceBackgroundsModified.B = (byte)num7;
			}
			bgScale = 1.32f;
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[1]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
			bgParallax = 0.43;
			SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1675.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			if (gameMenu)
			{
				bgTopY = 400 + pushBGTopHack;
				bgStartX -= 80;
			}
			if (bgWidthScaled == 0)
			{
				return;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int j = 0; j < bgLoops; j++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2(bgStartX + bgWidthScaled * j, bgTopY), GetBackgroundRect(bgTexIndexes[1]), colorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
			colorOfSurfaceBackgroundsModified = ColorOfSurfaceBackgroundsModified;
			num5 = (float)rand.Next(28, 42) * 0.001f;
			num5 += (float)(270 - mouseTextColor) / 3000f;
			x = vector3.X;
			num6 = vector3.Y + num5 / 2f;
			num7 = vector3.Z + num5;
			x *= 255f * num4 * num3;
			num6 *= 255f * num4 * num3;
			num7 *= 255f * num4 * num3;
			if (x > 255f)
			{
				x = 255f;
			}
			if (num6 > 255f)
			{
				num6 = 255f;
			}
			if (num7 > 255f)
			{
				num7 = 255f;
			}
			if (x > (float)(int)colorOfSurfaceBackgroundsModified.R)
			{
				colorOfSurfaceBackgroundsModified.R = (byte)x;
			}
			if (num6 > (float)(int)colorOfSurfaceBackgroundsModified.G)
			{
				colorOfSurfaceBackgroundsModified.G = (byte)num6;
			}
			if (num7 > (float)(int)colorOfSurfaceBackgroundsModified.B)
			{
				colorOfSurfaceBackgroundsModified.B = (byte)num7;
			}
			bgScale = 1.36f;
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[2]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
			bgParallax = 0.49;
			SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 1950.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			if (gameMenu)
			{
				bgTopY = 480 + pushBGTopHack;
				bgStartX -= 120;
			}
			if (bgWidthScaled == 0)
			{
				return;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < bgLoops; k++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2(bgStartX + bgWidthScaled * k, bgTopY), GetBackgroundRect(bgTexIndexes[2]), colorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f);
		}

		private void DrawSurfaceBG_Crimson(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			if (bgTexIndexes[0] > -1)
			{
				bgScale = 1.25f;
				bgParallax = 0.4;
				bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)scAdj + pushBGTopHack;
				SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
				bgScale *= bgGlobalScaleMultiplier;
				LoadBackground(bgTexIndexes[0]);
				bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
				SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
				if (bgTexIndexes[0] == 105)
				{
					bgTopY += 50;
				}
				if (bgTexIndexes[0] == 174)
				{
					bgTopY -= 350;
				}
				if (gameMenu)
				{
					bgTopY = 320 + pushBGTopHack;
				}
				bgLoops = screenWidth / bgWidthScaled + 2;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < bgLoops; i++)
					{
						spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2(bgStartX + bgWidthScaled * i, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[0]], backgroundHeight[bgTexIndexes[0]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
					}
				}
			}
			if (bgTexIndexes[1] > -1)
			{
				bgScale = 1.31f;
				bgParallax = 0.43;
				bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)scAdj + pushBGTopHack;
				SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
				bgScale *= bgGlobalScaleMultiplier;
				LoadBackground(bgTexIndexes[1]);
				bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
				SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
				if (gameMenu)
				{
					bgTopY = 400 + pushBGTopHack;
					bgStartX -= 80;
				}
				bgLoops = screenWidth / bgWidthScaled + 2;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int j = 0; j < bgLoops; j++)
					{
						spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2(bgStartX + bgWidthScaled * j, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[1]], backgroundHeight[bgTexIndexes[1]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
					}
				}
			}
			bgScale = 1.34f;
			bgParallax = 0.49;
			bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[2]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 480 + pushBGTopHack;
				bgStartX -= 120;
			}
			if (bgTexIndexes[2] == 175)
			{
				bgStartX -= 1000;
				bgTopY -= 400;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < bgLoops; k++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2(bgStartX + bgWidthScaled * k, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[2]], backgroundHeight[bgTexIndexes[2]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
		}

		private void DrawSurfaceBG_Snow(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			if (bgTexIndexes[0] >= 0)
			{
				bgScale = 1.25f;
				bgParallax = 0.4;
				bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)scAdj + pushBGTopHack;
				SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
				bgScale *= bgGlobalScaleMultiplier;
				LoadBackground(bgTexIndexes[0]);
				bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
				SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
				if (gameMenu)
				{
					bgTopY = 320 + pushBGTopHack;
				}
				bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[0]);
				bgLoops = screenWidth / bgWidthScaled + 2;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < bgLoops; i++)
					{
						spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2(bgStartX + bgWidthScaled * i, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[0]], backgroundHeight[bgTexIndexes[0]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
					}
				}
			}
			if (bgTexIndexes[1] >= 0)
			{
				bgScale = 1.31f;
				bgParallax = 0.43;
				bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)scAdj + pushBGTopHack;
				SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
				bgScale *= bgGlobalScaleMultiplier;
				LoadBackground(bgTexIndexes[1]);
				bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
				SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
				if (gameMenu)
				{
					bgTopY = 400 + pushBGTopHack;
					bgStartX -= 80;
				}
				bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[1]);
				bgLoops = screenWidth / bgWidthScaled + 2;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int j = 0; j < bgLoops; j++)
					{
						spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2(bgStartX + bgWidthScaled * j, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[1]], backgroundHeight[bgTexIndexes[1]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
					}
				}
			}
			if (bgTexIndexes[2] < 0)
			{
				return;
			}
			bgScale = 1.34f;
			bgParallax = 0.49;
			bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[2]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 480 + pushBGTopHack;
				bgStartX -= 120;
			}
			bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[2]);
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < bgLoops; k++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2(bgStartX + bgWidthScaled * k, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[2]], backgroundHeight[bgTexIndexes[2]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
		}

		private void SetBackgroundOffsets(int backgroundID, double backgroundTopMagicNumber, int pushBGTopHack)
		{
			int num = 0;
			int num2 = 0;
			switch (backgroundID)
			{
			case 18:
				if (WorldGen.hallowBG == 3)
				{
					bgParallax = 0.17;
					bgScale = 1.1f;
					num = 1400;
					num2 = 1100;
				}
				break;
			case 258:
				bgScale = 1.25f;
				bgParallax = 0.23;
				num = 1800;
				num2 = 850;
				break;
			case 259:
				bgScale = 1.31f;
				bgParallax = 0.33;
				num = 1950;
				num2 = 1500;
				break;
			case 260:
				bgScale = 1.34f;
				bgParallax = 0.4;
				num = 2100;
				num2 = 1650;
				break;
			case 263:
				bgScale = 1.25f;
				bgParallax = 0.23;
				num = 1800;
				num2 = 1450;
				break;
			case 264:
				bgScale = 1.31f;
				bgParallax = 0.33;
				num = 1950;
				num2 = 1700;
				break;
			case 265:
				bgScale = 1.34f;
				bgParallax = 0.4;
				num = 2100;
				num2 = 2000;
				break;
			case 267:
				bgScale = 1.25f;
				bgParallax = 0.23;
				num = 1700;
				num2 = 1300;
				break;
			case 266:
				bgScale = 1.31f;
				bgParallax = 0.33;
				num = 1950;
				num2 = 1600;
				break;
			case 268:
				bgScale = 1.34f;
				bgParallax = 0.41;
				num = 2100;
				num2 = 1850;
				break;
			case 248:
				bgScale = 1.3f;
				bgParallax = 0.37;
				num = 1800;
				num2 = 1100;
				break;
			case 249:
				bgScale = 1.4f;
				bgParallax = 0.43;
				num = 1950;
				num2 = 1200;
				break;
			case 250:
				bgScale = 1.7f;
				bgParallax = 0.49;
				num = 2000;
				num2 = 1000;
				break;
			case 255:
				bgScale = 1.15f;
				bgParallax = 0.25;
				num = 1800;
				num2 = 1450;
				break;
			case 256:
				bgScale = 1.21f;
				bgParallax = 0.32;
				num = 1950;
				num2 = 1550;
				break;
			case 257:
				bgScale = 1.34f;
				bgParallax = 0.4;
				num = 2100;
				num2 = 1550;
				break;
			case 240:
				bgScale = 1.15f;
				bgParallax = 0.3;
				num = 1800;
				num2 = 1500;
				break;
			case 241:
				bgScale = 1.21f;
				bgParallax = 0.43;
				num = 1950;
				num2 = 1300;
				break;
			case 242:
				bgScale = 1.34f;
				bgParallax = 0.49;
				num = 2100;
				num2 = 1400;
				break;
			case 243:
				bgScale = 1.15f;
				bgParallax = 0.25;
				num = 1800;
				num2 = 1400;
				break;
			case 244:
				bgScale = 1.21f;
				bgParallax = 0.35;
				num = 1950;
				num2 = 1550;
				break;
			case 245:
				bgScale = 1.24f;
				bgParallax = 0.45;
				num = 2100;
				num2 = 1650;
				break;
			case 273:
				bgParallax = 0.49000000953674316;
				num = 2100;
				num2 = 1560;
				break;
			case 234:
				bgParallax = 0.23;
				num = 1700;
				num2 = 1150;
				break;
			case 235:
				bgParallax = 0.33;
				num = 1950;
				num2 = 1550;
				break;
			case 236:
				bgParallax = 0.41;
				num = 2100;
				num2 = 2000;
				break;
			case 279:
				bgScale = 2.5f;
				bgParallax = 0.34999999403953552;
				num = 1850;
				num2 = 1750;
				break;
			case 282:
				bgScale = 2.6f;
				bgParallax = 0.25;
				num = 1800;
				num2 = 1340;
				break;
			case 261:
				bgParallax = 0.27;
				break;
			case 262:
				bgParallax = 0.4;
				break;
			case 219:
				bgParallax = 0.25;
				break;
			case 220:
				bgParallax = 0.34;
				break;
			case 221:
				bgParallax = 0.43;
				break;
			case 222:
				num = 1800;
				num2 = 1400;
				break;
			case 223:
				num = 2150;
				num2 = 1850;
				break;
			case 224:
				num = 2500;
				num2 = 2400;
				break;
			case 237:
				num = 1800;
				num2 = 1500;
				break;
			case 238:
				num = 1950;
				num2 = 1500;
				break;
			case 239:
				num = 2100;
				num2 = 1900;
				break;
			case 284:
				bgParallax = 0.23;
				num = 1600;
				num2 = 900;
				break;
			case 285:
				bgParallax = 0.36;
				num = 1900;
				num2 = 960;
				break;
			case 286:
				bgParallax = 0.42;
				num = 2100;
				num2 = 1200;
				break;
			case 287:
				bgParallax = 0.21;
				num = 1700;
				num2 = 1560;
				break;
			case 288:
				bgParallax = 0.33;
				num = 1950;
				num2 = 1730;
				break;
			case 289:
				bgParallax = 0.41;
				num = 2100;
				num2 = 1400;
				break;
			case 207:
				bgParallax = 0.32;
				break;
			}
			if (num != 0 || num2 != 0)
			{
				bgTopY = (int)(backgroundTopMagicNumber * (double)num + (double)num2) + (int)scAdj + pushBGTopHack;
			}
		}

		private void DrawSurfaceBG_Hallow(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			if (bgTexIndexes[0] > 0)
			{
				bgScale = 1.25f;
				bgParallax = 0.4;
				bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)scAdj + pushBGTopHack;
				SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
				bgScale *= bgGlobalScaleMultiplier;
				LoadBackground(bgTexIndexes[0]);
				bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
				SkyManager.Instance.DrawToDepth(spriteBatch, 1.2f / (float)bgParallax);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
				if (gameMenu)
				{
					bgTopY = 320 + pushBGTopHack;
				}
				bgLoops = screenWidth / bgWidthScaled + 2;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < bgLoops; i++)
					{
						spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2(bgStartX + bgWidthScaled * i, bgTopY), GetBackgroundRect(bgTexIndexes[0]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
					}
				}
			}
			if (bgTexIndexes[1] > 0)
			{
				bgScale = 1.31f;
				bgParallax = 0.43;
				bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)scAdj + pushBGTopHack;
				SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
				bgScale *= bgGlobalScaleMultiplier;
				LoadBackground(bgTexIndexes[1]);
				bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
				SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
				if (gameMenu)
				{
					bgTopY = 400 + pushBGTopHack;
					bgStartX -= 80;
				}
				bgLoops = screenWidth / bgWidthScaled + 2;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int j = 0; j < bgLoops; j++)
					{
						spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2(bgStartX + bgWidthScaled * j, bgTopY), GetBackgroundRect(bgTexIndexes[1]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
					}
				}
			}
			if (bgTexIndexes[2] <= 0)
			{
				return;
			}
			bgScale = 1.34f;
			bgParallax = 0.49;
			bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[2]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 480 + pushBGTopHack;
				bgStartX -= 120;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < bgLoops; k++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2(bgStartX + bgWidthScaled * k, bgTopY), GetBackgroundRect(bgTexIndexes[2]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
		}

		private void DrawSurfaceBG_GoodEvilDesert(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack)
		{
			LoadBackground(26);
			bgScale = 1.25f;
			bgScale *= bgGlobalScaleMultiplier;
			bgWidthScaled = (int)((float)backgroundWidth[26] * bgScale);
			bgParallax = 0.37;
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1750.0) + (int)scAdj + pushBGTopHack;
			if (gameMenu)
			{
				bgTopY = 320 + pushBGTopHack;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < bgLoops; i++)
				{
					spriteBatch.Draw(TextureAssets.Background[26].Value, new Vector2(bgStartX + bgWidthScaled * i, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[26], backgroundHeight[26]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
			bgScale = 1.34f;
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(27);
			bgWidthScaled = (int)((float)backgroundWidth[27] * bgScale);
			bgParallax = 0.49;
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2150.0) + (int)scAdj + pushBGTopHack;
			if (gameMenu)
			{
				bgTopY = 480 + pushBGTopHack;
				bgStartX -= 120;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int j = 0; j < bgLoops; j++)
				{
					spriteBatch.Draw(TextureAssets.Background[27].Value, new Vector2(bgStartX + bgWidthScaled * j, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[27], backgroundHeight[27]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
		}

		private void DrawSurfaceBG_Jungle(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			LoadBackground(bgTexIndexes[0]);
			bgScale = 1.25f;
			bgScale *= bgGlobalScaleMultiplier;
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
			bgParallax = 0.4;
			SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1660.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			if (gameMenu)
			{
				bgTopY = 320 + pushBGTopHack;
			}
			if (bgTexIndexes[0] == 59)
			{
				bgTopY -= 200;
			}
			bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[0]);
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < bgLoops; i++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2(bgStartX + bgWidthScaled * i, bgTopY), GetBackgroundRect(bgTexIndexes[0]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
			LoadBackground(bgTexIndexes[1]);
			bgScale = 1.31f;
			bgScale *= bgGlobalScaleMultiplier;
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
			bgParallax = 0.43;
			SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1840.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			if (gameMenu)
			{
				bgTopY = 400 + pushBGTopHack;
				bgStartX -= 80;
			}
			if (bgTexIndexes[1] == 60)
			{
				bgTopY -= 175;
			}
			bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[1]);
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int j = 0; j < bgLoops; j++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2(bgStartX + bgWidthScaled * j, bgTopY), GetBackgroundRect(bgTexIndexes[1]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.FlipHorizontally, 0f);
				}
			}
			bgScale = 1.34f;
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[2]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
			bgParallax = 0.49;
			SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2060.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			if (gameMenu)
			{
				bgTopY = 480 + pushBGTopHack;
				bgStartX -= 120;
			}
			if (bgTexIndexes[2] == 61)
			{
				bgTopY -= 150;
			}
			bgTopY += DrawSurfaceBG_GetLayerYOffset(bgTexIndexes[2]);
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < bgLoops; k++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2(bgStartX + bgWidthScaled * k, bgTopY), GetBackgroundRect(bgTexIndexes[2]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
		}

		private void DrawSurfaceBG_Desert(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			if (bgTexIndexes[0] > 0)
			{
				bgScale = 1.25f;
				bgParallax = 0.37;
				bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1750.0) + (int)scAdj + pushBGTopHack;
				SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
				LoadBackground(bgTexIndexes[0]);
				bgScale *= bgGlobalScaleMultiplier;
				float num = (float)backgroundWidth[bgTexIndexes[0]] * bgScale;
				SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, num) - (double)(num / 2f));
				if (gameMenu)
				{
					bgTopY = 320 + pushBGTopHack;
				}
				bgLoops = screenWidth / (int)num + 2;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < bgLoops; i++)
					{
						spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2((float)bgStartX + num * (float)i, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[0]], backgroundHeight[bgTexIndexes[0]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
					}
				}
			}
			if (bgTexIndexes[1] > 0)
			{
				bgScale = 1.34f;
				bgParallax = 0.49;
				bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2150.0) + (int)scAdj + pushBGTopHack;
				SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
				bgScale *= bgGlobalScaleMultiplier;
				LoadBackground(bgTexIndexes[1]);
				bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
				SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
				if (gameMenu)
				{
					bgTopY = 480 + pushBGTopHack;
					bgStartX -= 120;
				}
				bgLoops = screenWidth / bgWidthScaled + 2;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int j = 0; j < bgLoops; j++)
					{
						spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2(bgStartX + bgWidthScaled * j, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[1]], backgroundHeight[bgTexIndexes[1]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
					}
				}
			}
			if (bgTexIndexes[2] <= 0)
			{
				return;
			}
			bgScale = 1.34f;
			bgParallax = 0.49;
			bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2150.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[2]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 480 + pushBGTopHack;
				bgStartX -= 120;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < bgLoops; k++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2(bgStartX + bgWidthScaled * k, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[2]], backgroundHeight[bgTexIndexes[2]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
		}

		private void DrawSurfaceBG_DrawChangeOverlay(int backgroundAreaId)
		{
			Texture2D value = TextureAssets.MagicPixel.Value;
			float flashPower = WorldGen.BackgroundsCache.GetFlashPower(backgroundAreaId);
			Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.Black * flashPower;
			spriteBatch.Draw(value, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), color);
		}

		private void DrawSurfaceBG_Corrupt(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			bgScale = 1.25f;
			bgParallax = 0.4;
			bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[0]);
			if (backgroundWidth[bgTexIndexes[0]] == 0 || backgroundHeight[bgTexIndexes[0]] == 0)
			{
				return;
			}
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 320 + pushBGTopHack;
			}
			if (bgTexIndexes[0] == 56)
			{
				bgTopY -= 100;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int i = 0; i < bgLoops; i++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[0]].Value, new Vector2(bgStartX + bgWidthScaled * i, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[0]], backgroundHeight[bgTexIndexes[0]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
			bgScale = 1.31f;
			bgParallax = 0.43;
			bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[1]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 400 + pushBGTopHack;
				bgStartX -= 80;
			}
			if (bgTexIndexes[0] == 56)
			{
				bgTopY -= 100;
			}
			if (bgWidthScaled == 0)
			{
				bgWidthScaled = 1;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				try
				{
					Texture2D value = TextureAssets.Background[bgTexIndexes[1]].Value;
					if (value != null)
					{
						for (int j = 0; j < bgLoops; j++)
						{
							spriteBatch.Draw(value, new Vector2(bgStartX + bgWidthScaled * j, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[1]], backgroundHeight[bgTexIndexes[1]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.FlipHorizontally, 0f);
						}
					}
				}
				catch
				{
					LoadBackground(bgTexIndexes[1]);
				}
			}
			bgScale = 1.34f;
			bgParallax = 0.49;
			bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)scAdj + pushBGTopHack;
			SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			LoadBackground(bgTexIndexes[2]);
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
			if (bgWidthScaled == 0)
			{
				bgWidthScaled = 150;
			}
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			if (gameMenu)
			{
				bgTopY = 480 + pushBGTopHack;
				bgStartX -= 120;
			}
			if (bgTexIndexes[0] == 56)
			{
				bgTopY -= 100;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < bgLoops; k++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2(bgStartX + bgWidthScaled * k, bgTopY), new Microsoft.Xna.Framework.Rectangle(0, 0, backgroundWidth[bgTexIndexes[2]], backgroundHeight[bgTexIndexes[2]]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
		}

		private Microsoft.Xna.Framework.Rectangle? GetBackgroundRect(int backgroundTextureIndex)
		{
			int num = 0;
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1);
			switch (backgroundTextureIndex)
			{
			case 235:
				num = (int)(GetBackgroundCounter() / 20u) % 4;
				rectangle = TextureAssets.Background[backgroundTextureIndex].Frame(2, 2, num % 2, num / 2);
				rectangle.Inflate(0, -2);
				return rectangle;
			case 219:
			case 220:
			case 221:
			case 271:
			case 272:
			case 273:
				num = (int)(GetBackgroundCounter() / 15u) % 4;
				rectangle = TextureAssets.Background[backgroundTextureIndex].Frame(2, 2, num % 2, num / 2);
				rectangle.Inflate(0, -2);
				return rectangle;
			case 281:
				num = (int)(GetBackgroundCounter() / 5u) % 4;
				rectangle = TextureAssets.Background[backgroundTextureIndex].Frame(2, 2, num % 2, num / 2);
				rectangle.Inflate(0, -2);
				return rectangle;
			default:
				return null;
			}
		}

		private uint GetBackgroundCounter()
		{
			if (!gameMenu)
			{
				return GameUpdateCount;
			}
			return (uint)(GlobalTimeWrappedHourly * 40f);
		}

		private void DrawSurfaceBG_Forest(double backgroundTopMagicNumber, float bgGlobalScaleMultiplier, int pushBGTopHack, int[] bgTexIndexes)
		{
			bgScale = 1.25f;
			bgParallax = 0.4;
			bgTopY = (int)(backgroundTopMagicNumber * 1800.0 + 1500.0) + (int)scAdj + pushBGTopHack;
			if (bgTexIndexes[0] == 91)
			{
				bgParallax = 0.27000001072883606;
				bgScale = 1.2f;
			}
			if (bgTexIndexes[0] == 173)
			{
				bgParallax = 0.25;
				bgScale = 1.3f;
			}
			if (bgTexIndexes[0] == 178)
			{
				bgParallax = 0.30000001192092896;
				bgScale = 1.2f;
			}
			if (bgTexIndexes[0] == 184)
			{
				bgParallax = 0.25;
				bgScale = 1.2f;
			}
			if (bgTexIndexes[0] == 282)
			{
				bgScale = 1.4f;
			}
			SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
			bgScale *= bgGlobalScaleMultiplier;
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			if (bgTexIndexes[0] >= 0)
			{
				SetBackgroundOffsets(bgTexIndexes[0], backgroundTopMagicNumber, pushBGTopHack);
				LoadBackground(bgTexIndexes[0]);
				bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[0]] * bgScale);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
				if (bgTexIndexes[0] == 91)
				{
					bgTopY = (int)(backgroundTopMagicNumber * 1600.0 + 1400.0) + (int)scAdj + pushBGTopHack;
				}
				if (bgTexIndexes[0] == 173)
				{
					bgTopY = (int)(backgroundTopMagicNumber * 1600.0 + 1400.0) + (int)scAdj + pushBGTopHack;
				}
				if (bgTexIndexes[0] == 184)
				{
					bgTopY = (int)(backgroundTopMagicNumber * 1600.0 + 1400.0) + (int)scAdj + pushBGTopHack;
				}
				if (gameMenu)
				{
					bgTopY = 320 + pushBGTopHack;
				}
				if (bgTexIndexes[0] == 50)
				{
					bgTopY -= 50;
				}
				if (bgTexIndexes[0] == 53)
				{
					bgTopY -= 100;
				}
				if (bgTexIndexes[0] == 91)
				{
					bgTopY += 200;
				}
				if (bgTexIndexes[0] == 173)
				{
					bgTopY += 200;
				}
				if (bgTexIndexes[0] == 178)
				{
					bgTopY += 75;
				}
				bgLoops = screenWidth / bgWidthScaled + 2;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int i = 0; i < bgLoops; i++)
					{
						if (bgTexIndexes[0] != -1)
						{
							Asset<Texture2D> val = TextureAssets.Background[bgTexIndexes[0]];
							int num = bgTexIndexes[0];
							if (num == 173)
							{
								int num2 = (int)(GetBackgroundCounter() / 10u);
								num2 %= 4;
								int num3 = 251 + num2;
								LoadBackground(num3);
								val = TextureAssets.Background[num3];
							}
							if (val.Value != null)
							{
								spriteBatch.Draw(val.Value, new Vector2(bgStartX + bgWidthScaled * i, bgTopY), GetBackgroundRect(bgTexIndexes[0]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
							}
						}
					}
				}
			}
			if (bgTexIndexes[1] >= 0)
			{
				LoadBackground(bgTexIndexes[1]);
				bgScale = 1.31f;
				bgScale *= bgGlobalScaleMultiplier;
				bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[1]] * bgScale);
				if (bgWidthScaled == 0)
				{
					bgWidthScaled = 1;
				}
				bgParallax = 0.43;
				SetBackgroundOffsets(bgTexIndexes[1], backgroundTopMagicNumber, pushBGTopHack);
				SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
				bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
				bgTopY = (int)(backgroundTopMagicNumber * 1950.0 + 1750.0) + (int)scAdj + pushBGTopHack;
				if (gameMenu)
				{
					bgTopY = 400 + pushBGTopHack;
					bgStartX -= 80;
				}
				if (bgTexIndexes[1] == 51)
				{
					bgTopY -= 50;
				}
				if (bgTexIndexes[1] == 54)
				{
					bgTopY -= 100;
				}
				bgLoops = screenWidth / bgWidthScaled + 2;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					for (int j = 0; j < bgLoops; j++)
					{
						spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[1]].Value, new Vector2(bgStartX + bgWidthScaled * j, bgTopY), GetBackgroundRect(bgTexIndexes[1]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.FlipHorizontally, 0f);
					}
				}
			}
			if (bgTexIndexes[2] < 0)
			{
				return;
			}
			LoadBackground(bgTexIndexes[2]);
			bgScale = 1.34f;
			bgScale *= bgGlobalScaleMultiplier;
			bgParallax = 0.49;
			SetBackgroundOffsets(bgTexIndexes[2], backgroundTopMagicNumber, pushBGTopHack);
			SkyManager.Instance.DrawToDepth(spriteBatch, 1f / (float)bgParallax);
			if (bgTexIndexes[0] == 91)
			{
				bgScale = 1.3f;
				bgScale *= bgGlobalScaleMultiplier;
				bgParallax = 0.42;
			}
			if (bgTexIndexes[2] < 0 && WorldGen.drunkWorldGen)
			{
				return;
			}
			bgWidthScaled = (int)((float)backgroundWidth[bgTexIndexes[2]] * bgScale);
			if (bgWidthScaled == 0)
			{
				bgWidthScaled = 1;
			}
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, bgWidthScaled) - (double)(bgWidthScaled / 2));
			bgTopY = (int)(backgroundTopMagicNumber * 2100.0 + 2000.0) + (int)scAdj + pushBGTopHack;
			if (gameMenu)
			{
				bgTopY = 480 + pushBGTopHack;
				bgStartX -= 120;
			}
			if (bgTexIndexes[2] == 52)
			{
				bgTopY -= 50;
			}
			if (bgTexIndexes[2] == 55)
			{
				bgTopY -= 100;
			}
			if (bgTexIndexes[2] == 92)
			{
				bgTopY += 150;
			}
			bgLoops = screenWidth / bgWidthScaled + 2;
			if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
			{
				for (int k = 0; k < bgLoops; k++)
				{
					spriteBatch.Draw(TextureAssets.Background[bgTexIndexes[2]].Value, new Vector2(bgStartX + bgWidthScaled * k, bgTopY), GetBackgroundRect(bgTexIndexes[2]), ColorOfSurfaceBackgroundsModified, 0f, default(Vector2), bgScale, SpriteEffects.None, 0f);
				}
			}
		}

		private void DrawBackgroundBlackFill()
		{
			float value = (float)(worldSurface + 2.0) * 16f - screenPosition.Y;
			float value2 = (float)maxTilesY * 16f - 2880f - (screenPosition.Y + (float)screenHeight);
			value = MathHelper.Clamp(value, 0f, screenHeight);
			value2 = MathHelper.Clamp(value2, 0f, screenHeight);
			if (value2 - value > 0f)
			{
				spriteBatch.Draw(TextureAssets.BlackTile.Value, new Microsoft.Xna.Framework.Rectangle(0, (int)value, screenWidth, (int)(value2 - value)), Microsoft.Xna.Framework.Color.Black);
			}
		}

		public void DrawTileCracks(int crackType, HitTile hitter)
		{
			Vector2 value = new Vector2(offScreenRange, offScreenRange);
			if (drawToScreen)
			{
				value = Vector2.Zero;
			}
			for (int i = 0; i < hitter.data.Length; i++)
			{
				if (hitter.data[i].type != crackType)
				{
					continue;
				}
				int damage = hitter.data[i].damage;
				if (damage < 20)
				{
					continue;
				}
				int x = hitter.data[i].X;
				int y = hitter.data[i].Y;
				if (!WorldGen.InWorld(x, y))
				{
					continue;
				}
				bool flag = tile[x, y] != null;
				if (flag && crackType == 1)
				{
					flag = flag && tile[x, y].active();
				}
				if (flag && crackType == 2)
				{
					flag = flag && tile[x, y].wall != 0;
				}
				if (!flag)
				{
					continue;
				}
				bool flag2 = false;
				bool flag3 = false;
				if (tile[x, y].type == 10)
				{
					flag2 = false;
				}
				else if (tileSolid[tile[x, y].type] && !tileSolidTop[tile[x, y].type])
				{
					flag2 = true;
				}
				else if (WorldGen.IsTreeType(tile[x, y].type))
				{
					flag3 = true;
					int num = tile[x, y].frameX / 22;
					int num2 = tile[x, y].frameY / 22;
					if (num2 < 9)
					{
						flag2 = ((num != 1 && num != 2) || num2 < 6 || num2 > 8) && (num != 3 || num2 > 2) && (num != 4 || num2 < 3 || num2 > 5) && ((num != 5 || num2 < 6 || num2 > 8) ? true : false);
					}
				}
				else if (tile[x, y].type == 72)
				{
					flag3 = true;
					if (tile[x, y].frameX <= 34)
					{
						flag2 = true;
					}
				}
				if (flag2 && tile[x, y].slope() == 0 && !tile[x, y].halfBrick())
				{
					int num3 = 0;
					if (damage >= 80)
					{
						num3 = 3;
					}
					else if (damage >= 60)
					{
						num3 = 2;
					}
					else if (damage >= 40)
					{
						num3 = 1;
					}
					else if (damage >= 20)
					{
						num3 = 0;
					}
					Microsoft.Xna.Framework.Rectangle value2 = new Microsoft.Xna.Framework.Rectangle(hitter.data[i].crackStyle * 18, num3 * 18, 16, 16);
					if (flag3)
					{
						value2.X = (4 + hitter.data[i].crackStyle / 2) * 18;
					}
					spriteBatch.Draw(TextureAssets.TileCrack.Value, new Vector2(x * 16 - (int)screenPosition.X, y * 16 - (int)screenPosition.Y) + value, value2, Lighting.GetColor(x, y), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
				}
			}
		}

		private static void CheckMonoliths()
		{
			bool flag = player[myPlayer].ZoneTowerVortex || player[myPlayer].ZoneTowerNebula || player[myPlayer].ZoneTowerStardust || player[myPlayer].ZoneTowerSolar;
			for (int i = 0; i < MonolithFilterNames.Length; i++)
			{
				if (!flag && i == SceneMetrics.ActiveMonolithType)
				{
					if (!GameManager.Graphics.Effects.Filters.Scene[MonolithFilterNames[SceneMetrics.ActiveMonolithType]].IsActive())
					{
						GameManager.Graphics.Effects.Filters.Scene.Activate(MonolithFilterNames[SceneMetrics.ActiveMonolithType], default(Vector2));
					}
					if (!SkyManager.Instance[MonolithSkyNames[i]].IsActive())
					{
						SkyManager.Instance.Activate(MonolithSkyNames[i], default(Vector2));
					}
				}
				else
				{
					if (GameManager.Graphics.Effects.Filters.Scene[MonolithFilterNames[i]].IsActive())
					{
						GameManager.Graphics.Effects.Filters.Scene.Deactivate(MonolithFilterNames[i]);
					}
					if (SkyManager.Instance[MonolithSkyNames[i]].IsActive())
					{
						SkyManager.Instance.Deactivate(MonolithSkyNames[i]);
					}
				}
			}
		}

		private void GraphicsDeviceLost(object sender, EventArgs evt)
		{
		}

		protected override void Draw(GameTime gameTime)
		{
			if (!_isDrawingOrUpdating && IsGraphicsDeviceAvailable)
			{
				_isDrawingOrUpdating = true;
				EnsureRenderTargetContent();
				DoDraw(gameTime);
				if (Main.OnPostDraw != null)
				{
					Main.OnPostDraw(gameTime);
				}
				Assets.TransferCompletedAssets();
				_isDrawingOrUpdating = false;
			}
		}

		private void DoDraw(GameTime gameTime)
		{
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			if (showSplash)
			{
				DrawSplash(gameTime);
				TimeLogger.SplashDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				return;
			}
			if (_drawCycleCounter == 0L)
			{
				TileFrameSeed = Utils.RandomNextSeed(TileFrameSeed);
			}
			_drawCycleCounter = (_drawCycleCounter + 1) % 5uL;
			MenuUI.IsVisible = gameMenu && menuMode == 888;
			InGameUI.IsVisible = !gameMenu && InGameUI.CurrentState != null;
			PlayerInput.UpdateMainMouse();
			RefreshPlayerDrawOrder();
			CaptureManager.Instance.DrawTick();
			TimeLogger.NewDrawFrame();
			if (!gameMenu)
			{
				TilesRenderer.PreparePaintForTilesOnScreen();
			}
			for (int i = 0; i < ContentThatNeedsRenderTargets.Count; i++)
			{
				ContentThatNeedsRenderTargets[i].PrepareRenderTarget(base.GraphicsDevice, spriteBatch);
			}
			TilePaintSystem.PrepareAllRequests();
			TimeLogger.DetailedDrawTime(0);
			if (loadMap)
			{
				refreshMap = false;
				DrawToMap();
				TimeLogger.DetailedDrawTime(1);
			}
			if (Lighting.UpdateEveryFrame)
			{
				drawToScreen = true;
			}
			else
			{
				drawToScreen = false;
			}
			if (drawToScreen && targetSet)
			{
				ReleaseTargets();
			}
			if (!drawToScreen && !targetSet)
			{
				InitTargets();
			}
			fpsCount++;
			if (!base.IsActive)
			{
				maxQ = true;
			}
			UpdateDisplaySettings();
			if (Main.OnPreDraw != null)
			{
				Main.OnPreDraw(gameTime);
			}
			drawsCountedForFPS++;
			screenLastPosition = screenPosition;
			if (stackSplit == 0)
			{
				stackCounter = 0;
				stackDelay = 7;
				superFastStack = 0;
			}
			else
			{
				stackCounter++;
				int num = 30;
				num = ((stackDelay == 7) ? 30 : ((stackDelay == 6) ? 25 : ((stackDelay == 5) ? 20 : ((stackDelay == 4) ? 15 : ((stackDelay != 3) ? 5 : 10)))));
				if (stackCounter >= num)
				{
					stackDelay--;
					if (stackDelay < 2)
					{
						stackDelay = 2;
						superFastStack++;
					}
					stackCounter = 0;
				}
			}
			if (myPlayer >= 0)
			{
				player[myPlayer].lastMouseInterface = player[myPlayer].mouseInterface;
				player[myPlayer].mouseInterface = false;
			}
			if (mapTime > 0)
			{
				mapTime--;
			}
			if (gameMenu)
			{
				mapTime = mapTimeMax;
			}
			HoverItem = new Item();
			DoDraw_UpdateCameraPosition();
			CheckMonoliths();
			sunCircle += 0.01f;
			if ((double)sunCircle > 6.285)
			{
				sunCircle -= 6.285f;
			}
			TimeLogger.DetailedDrawReset();
			if (!gameMenu)
			{
				waterfallManager.FindWaterfalls();
				TimeLogger.DetailedDrawTime(2);
				if (renderNow)
				{
					screenLastPosition = screenPosition;
					renderNow = false;
					renderCount = 99;
					Draw(gameTime);
					Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
					Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
					RenderTiles();
					sceneTilePos.X = screenPosition.X - (float)offScreenRange;
					sceneTilePos.Y = screenPosition.Y - (float)offScreenRange;
					RenderBackground();
					sceneBackgroundPos.X = screenPosition.X - (float)offScreenRange;
					sceneBackgroundPos.Y = screenPosition.Y - (float)offScreenRange;
					RenderWalls();
					sceneWallPos.X = screenPosition.X - (float)offScreenRange;
					sceneWallPos.Y = screenPosition.Y - (float)offScreenRange;
					RenderTiles2();
					sceneTile2Pos.X = screenPosition.X - (float)offScreenRange;
					sceneTile2Pos.Y = screenPosition.Y - (float)offScreenRange;
					RenderWater();
					sceneWaterPos.X = screenPosition.X - (float)offScreenRange;
					sceneWaterPos.Y = screenPosition.Y - (float)offScreenRange;
					renderCount = 99;
				}
				else
				{
					if (renderCount == 3)
					{
						RenderTiles();
						sceneTilePos.X = screenPosition.X - (float)offScreenRange;
						sceneTilePos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (renderCount == 3)
					{
						RenderTiles2();
						sceneTile2Pos.X = screenPosition.X - (float)offScreenRange;
						sceneTile2Pos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (renderCount == 3)
					{
						RenderWalls();
						sceneWallPos.X = screenPosition.X - (float)offScreenRange;
						sceneWallPos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (renderCount == 2)
					{
						RenderBackground();
						sceneBackgroundPos.X = screenPosition.X - (float)offScreenRange;
						sceneBackgroundPos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (renderCount == 1)
					{
						RenderWater();
						sceneWaterPos.X = screenPosition.X - (float)offScreenRange;
						sceneWaterPos.Y = screenPosition.Y - (float)offScreenRange;
					}
				}
				if (render && !gameMenu)
				{
					if (Math.Abs(sceneTilePos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneTilePos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
					{
						RenderTiles();
						sceneTilePos.X = screenPosition.X - (float)offScreenRange;
						sceneTilePos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (Math.Abs(sceneTile2Pos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneTile2Pos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
					{
						RenderTiles2();
						sceneTile2Pos.X = screenPosition.X - (float)offScreenRange;
						sceneTile2Pos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (Math.Abs(sceneBackgroundPos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneBackgroundPos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
					{
						RenderBackground();
						sceneBackgroundPos.X = screenPosition.X - (float)offScreenRange;
						sceneBackgroundPos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (Math.Abs(sceneWallPos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneWallPos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
					{
						RenderWalls();
						sceneWallPos.X = screenPosition.X - (float)offScreenRange;
						sceneWallPos.Y = screenPosition.Y - (float)offScreenRange;
					}
					if (Math.Abs(sceneWaterPos.X - (screenPosition.X - (float)offScreenRange)) > (float)offScreenRange || Math.Abs(sceneWaterPos.Y - (screenPosition.Y - (float)offScreenRange)) > (float)offScreenRange)
					{
						RenderWater();
						sceneWaterPos.X = screenPosition.X - (float)offScreenRange;
						sceneWaterPos.Y = screenPosition.Y - (float)offScreenRange;
					}
				}
			}
			if (!loadMap)
			{
				if (!gameMenu)
				{
					TimeLogger.DetailedDrawReset();
					Stopwatch stopwatch2 = new Stopwatch();
					stopwatch2.Start();
					int num2 = 0;
					int x;
					int y;
					while (stopwatch2.ElapsedMilliseconds < 5 && sectionManager.GetNextMapDraw(player[myPlayer].position, out x, out y))
					{
						DrawToMap_Section(x, y);
						num2++;
					}
					TimeLogger.DetailedDrawTime(3);
				}
				if (updateMap)
				{
					if (base.IsActive || netMode == 1)
					{
						if (refreshMap)
						{
							refreshMap = false;
							sectionManager.ClearMapDraw();
						}
						DrawToMap();
						updateMap = false;
					}
					else if (MapHelper.numUpdateTile > 0)
					{
						DrawToMap();
					}
					TimeLogger.DetailedDrawTime(4);
				}
			}
			bgParallax = 0.1;
			bgStartX = (int)(0.0 - Math.IEEERemainder((double)screenPosition.X * bgParallax, backgroundWidth[background]) - (double)(backgroundWidth[background] / 2));
			bgLoops = screenWidth / backgroundWidth[background] + 2;
			bgStartY = 0;
			bgLoopsY = 0;
			bgTopY = (int)((double)(0f - screenPosition.Y) / (worldSurface * 16.0 - 600.0) * 200.0);
			if (gameMenu || netMode == 2)
			{
				bgTopY = -200;
			}
			float num3 = 0.0005f * (float)dayRate;
			if (gameMenu)
			{
				num3 *= 20f;
			}
			if (raining)
			{
				if (cloudAlpha > maxRaining)
				{
					cloudAlpha -= num3;
					if (cloudAlpha < maxRaining)
					{
						cloudAlpha = maxRaining;
					}
				}
				else if (cloudAlpha < maxRaining)
				{
					cloudAlpha += num3;
					if (cloudAlpha > maxRaining)
					{
						cloudAlpha = maxRaining;
					}
				}
			}
			else
			{
				cloudAlpha -= num3;
				if (cloudAlpha < 0f)
				{
					cloudAlpha = 0f;
				}
			}
			if (gameMenu || netMode == 2)
			{
				bgDelay = 1000;
				SceneMetrics.EvilTileCount = (int)(bgAlphaFrontLayer[1] * (float)SceneMetrics.CorruptionTileMax);
			}
			Microsoft.Xna.Framework.Color moonColor = Microsoft.Xna.Framework.Color.White;
			Microsoft.Xna.Framework.Color sunColor = Microsoft.Xna.Framework.Color.White;
			float num4 = SceneMetrics.MushroomTileCount / SceneMetrics.MushroomTileMax;
			float num5 = SmoothedMushroomLightInfluence;
			if (num4 > 0f)
			{
				if (num4 > num5)
				{
					num5 += 0.01f;
				}
				if (num4 < num5)
				{
					num5 -= 0.01f;
				}
			}
			else
			{
				num5 -= 0.02f;
			}
			if (num5 < 0f)
			{
				num5 = 0f;
			}
			if (num5 > 1f)
			{
				num5 = 1f;
			}
			SmoothedMushroomLightInfluence = num5;
			InfoToSetBackColor info = default(InfoToSetBackColor);
			info.isInGameMenuOrIsServer = gameMenu || netMode == 2;
			info.CorruptionBiomeInfluence = (float)SceneMetrics.EvilTileCount / (float)SceneMetrics.CorruptionTileMax;
			info.CrimsonBiomeInfluence = (float)SceneMetrics.BloodTileCount / (float)SceneMetrics.CrimsonTileMax;
			info.JungleBiomeInfluence = (float)SceneMetrics.JungleTileCount / (float)SceneMetrics.JungleTileMax;
			info.MushroomBiomeInfluence = SmoothedMushroomLightInfluence;
			info.GraveyardInfluence = GraveyardVisualIntensity;
			info.BloodMoonActive = bloodMoon || SceneMetrics.BloodMoonMonolith;
			info.LanternNightActive = LanternNight.LanternsUp;
			SetBackColor(info, out sunColor, out moonColor);
			if (gameMenu || netMode == 2)
			{
				bgTopY = 0;
			}
			ApplyColorOfTheSkiesToTiles();
			UpdateAtmosphereTransparencyToSkyColor();
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
			base.Draw(gameTime);
			float val = (float)screenWidth / MinimumZoomComparerX;
			float val2 = (float)screenHeight / MinimumZoomComparerY;
			ForcedMinimumZoom = Math.Max(Math.Max(1f, val), val2);
			GameViewMatrix.Effects = ((!gameMenu && player[myPlayer].gravDir != 1f) ? SpriteEffects.FlipVertically : SpriteEffects.None);
			BackgroundViewMatrix.Effects = GameViewMatrix.Effects;
			BackgroundViewMatrix.Zoom = new Vector2(ForcedMinimumZoom);
			GameViewMatrix.Zoom = new Vector2(ForcedMinimumZoom * MathHelper.Clamp(GameZoomTarget, 1f, 2f));
			if (gameMenu || player[myPlayer].gravDir == 1f)
			{
				Rasterizer = RasterizerState.CullCounterClockwise;
			}
			else
			{
				Rasterizer = RasterizerState.CullClockwise;
			}
			bool flag = !drawToScreen && netMode != 2 && !gameMenu && !mapFullscreen && Lighting.NotRetro && GameManager.Graphics.Effects.Filters.Scene.CanCapture();
			if (flag)
			{
				GameManager.Graphics.Effects.Filters.Scene.BeginCapture(screenTarget, Microsoft.Xna.Framework.Color.Black);
			}
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, BackgroundViewMatrix.TransformationMatrix);
			TimeLogger.DetailedDrawReset();
			if (!mapFullscreen)
			{
				unityMouseOver = false;
				if ((double)screenPosition.Y < worldSurface * 16.0 + 16.0)
				{
					Asset<Texture2D> val3 = TextureAssets.Background[background];
					Microsoft.Xna.Framework.Rectangle destinationRectangle = new Microsoft.Xna.Framework.Rectangle(bgStartX, bgTopY, val3.Width(), Math.Max(screenHeight, val3.Height()));
					if (destinationRectangle.Bottom < val3.Height())
					{
						int num6 = val3.Height() - destinationRectangle.Bottom;
						destinationRectangle.Height += num6;
					}
					for (int j = 0; j < bgLoops; j++)
					{
						destinationRectangle.X = bgStartX + val3.Width() * j;
						spriteBatch.Draw(val3.Value, destinationRectangle, ColorOfTheSkies);
					}
					TimeLogger.DetailedDrawTime(6);
				}
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, BackgroundViewMatrix.EffectMatrix);
				SceneArea sceneArea = default(SceneArea);
				sceneArea.bgTopY = bgTopY;
				sceneArea.totalHeight = screenHeight;
				sceneArea.totalWidth = screenWidth;
				sceneArea.SceneLocalScreenPositionOffset = Vector2.Zero;
				SceneArea sceneArea2 = sceneArea;
				DrawStarsInBackground(sceneArea2);
				if ((double)(screenPosition.Y / 16f) < worldSurface + 2.0)
				{
					DrawSunAndMoon(sceneArea2, moonColor, sunColor, num5);
				}
				TimeLogger.DetailedDrawTime(7);
			}
			Overlays.Scene.Draw(spriteBatch, RenderLayers.Sky);
			spriteBatch.End();
			Vector2 vector = screenPosition;
			int num7 = screenWidth;
			int num8 = screenHeight;
			screenWidth = (int)((float)screenWidth / BackgroundViewMatrix.Zoom.X);
			screenHeight = (int)((float)screenHeight / BackgroundViewMatrix.Zoom.Y);
			screenPosition += BackgroundViewMatrix.Translation;
			Matrix transformationMatrix = BackgroundViewMatrix.TransformationMatrix;
			transformationMatrix.Translation -= BackgroundViewMatrix.ZoomMatrix.Translation * new Vector3(1f, BackgroundViewMatrix.Effects.HasFlag(SpriteEffects.FlipVertically) ? (-1f) : 1f, 1f);
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, transformationMatrix);
			DrawBG();
			screenWidth = num7;
			screenHeight = num8;
			screenPosition = vector;
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, GameViewMatrix.TransformationMatrix);
			DrawBackgroundBlackFill();
			spriteBatch.End();
			Overlays.Scene.Draw(spriteBatch, RenderLayers.Landscape);
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, UIScaleMatrix);
			if (gameMenu || netMode == 2)
			{
				spriteBatch.End();
				PreDrawMenu(out var screenSizeCache, out var screenSizeCacheAfterScaling);
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, Rasterizer, null, UIScaleMatrix);
				DrawMenu(gameTime);
				PostDrawMenu(screenSizeCache, screenSizeCacheAfterScaling);
				TimeLogger.MenuDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				return;
			}
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			DoLightTiles();
			TimeLogger.DetailedDrawReset();
			if (mapFullscreen)
			{
				if (player[myPlayer].talkNPC >= 0 || player[myPlayer].sign >= 0 || (playerInventory && !CaptureManager.Instance.Active))
				{
					player[myPlayer].ToggleInv();
				}
				DrawMap(gameTime);
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerStateForCursor, null, null, null, UIScaleMatrix);
				PlayerInput.SetZoom_UI();
				DrawFPS();
				DrawPlayerChat();
				DrawPendingMouseText();
				DrawCursor(DrawThickCursor());
				PlayerInput.SetZoom_Unscaled();
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, null, null, null);
				TimeLogger.MapDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				PlayerInput.SetDesiredZoomContext(ZoomContext.Unscaled);
				CaptureManager.Instance.Update();
				if (CaptureManager.Instance.Active)
				{
					CaptureManager.Instance.Draw(spriteBatch);
				}
				spriteBatch.End();
				if (mouseLeft)
				{
					mouseLeftRelease = false;
				}
				else
				{
					mouseLeftRelease = true;
				}
				return;
			}
			Overlays.Scene.Draw(spriteBatch, RenderLayers.InWorldUI);
			_ = Microsoft.Xna.Framework.Color.White;
			if (drawToScreen)
			{
				DrawWaters(isBackground: true);
			}
			else
			{
				spriteBatch.Draw(backWaterTarget, sceneBackgroundPos - screenPosition, Microsoft.Xna.Framework.Color.White);
				TimeLogger.DetailedDrawTime(11);
			}
			Overlays.Scene.Draw(spriteBatch, RenderLayers.BackgroundWater);
			float x2 = (sceneBackgroundPos.X - screenPosition.X + (float)offScreenRange) * caveParallax - (float)offScreenRange;
			if (drawToScreen)
			{
				tileBatch.Begin();
				DrawBackground();
				tileBatch.End();
			}
			else
			{
				spriteBatch.Draw(backgroundTarget, new Vector2(x2, sceneBackgroundPos.Y - screenPosition.Y), Microsoft.Xna.Framework.Color.White);
				TimeLogger.DetailedDrawTime(12);
			}
			Overlays.Scene.Draw(spriteBatch, RenderLayers.Background);
			ScreenDarkness.DrawBack(spriteBatch);
			magmaBGFrameCounter++;
			if (magmaBGFrameCounter >= 8)
			{
				magmaBGFrameCounter = 0;
				magmaBGFrame++;
				if (magmaBGFrame >= 3)
				{
					magmaBGFrame = 0;
				}
			}
			DoDraw_WallsTilesNPCs();
			Overlays.Scene.Draw(spriteBatch, RenderLayers.TilesAndNPCs);
			if (!mapFullscreen && mapStyle == 2)
			{
				try
				{
					DrawMap(gameTime);
				}
				catch (Exception e)
				{
					if (!ignoreErrors)
					{
						throw;
					}
					TimeLogger.DrawException(e);
				}
			}
			TimeLogger.DetailedDrawReset();
			spriteBatch.End();
			TimeLogger.DetailedDrawTime(35);
			HasInteractibleObjectThatIsNotATile = false;
			SortDrawCacheWorms();
			DrawSuperSpecialProjectiles(DrawCacheFirstFractals);
			DrawCachedProjs(DrawCacheProjsBehindProjectiles);
			DrawProjectiles();
			spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			ParticleSystem_World_BehindPlayers.Settings.AnchorPosition = -screenPosition;
			ParticleSystem_World_BehindPlayers.Draw(spriteBatch);
			spriteBatch.End();
			DrawPlayers_AfterProjectiles();
			DrawCachedProjs(DrawCacheProjsOverPlayers);
			spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			ParticleSystem_World_OverPlayers.Settings.AnchorPosition = -screenPosition;
			ParticleSystem_World_OverPlayers.Draw(spriteBatch);
			spriteBatch.End();
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			DrawCachedNPCs(DrawCacheNPCsOverPlayers, behindTiles: false);
			if (!gamePaused)
			{
				essScale += (float)essDir * 0.01f;
				if (essScale > 1f)
				{
					essDir = -1;
					essScale = 1f;
				}
				if ((double)essScale < 0.7)
				{
					essDir = 1;
					essScale = 0.7f;
				}
			}
			DrawItems();
			TimeLogger.DetailedDrawTime(22);
			DrawRain();
			if (ignoreErrors)
			{
				try
				{
					DrawGore();
				}
				catch (Exception e2)
				{
					TimeLogger.DrawException(e2);
				}
			}
			else
			{
				DrawGore();
			}
			spriteBatch.End();
			DrawDust();
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			Overlays.Scene.Draw(spriteBatch, RenderLayers.Entities);
			if (drawToScreen)
			{
				DrawWaters();
				if (WiresUI.Settings.DrawWires)
				{
					DrawWires();
				}
			}
			else
			{
				spriteBatch.Draw(waterTarget, sceneWaterPos - screenPosition, Microsoft.Xna.Framework.Color.White);
				if (WiresUI.Settings.DrawWires)
				{
					DrawWires();
				}
				TimeLogger.DetailedDrawTime(26);
			}
			Overlays.Scene.Draw(spriteBatch, RenderLayers.ForegroundWater);
			DrawCachedProjs(DrawCacheProjsOverWiresUI, startSpriteBatch: false);
			DrawInfernoRings();
			ScreenDarkness.DrawFront(spriteBatch);
			MoonlordDeathDrama.DrawWhite(spriteBatch);
			ScreenObstruction.Draw(spriteBatch);
			TimeLogger.DetailedDrawReset();
			spriteBatch.End();
			Overlays.Scene.Draw(spriteBatch, RenderLayers.All);
			if (flag)
			{
				GameManager.Graphics.Effects.Filters.Scene.EndCapture(null, screenTarget, screenTargetSwap, Microsoft.Xna.Framework.Color.Black);
			}
			TimeLogger.DetailedDrawTime(36);
			if (!hideUI)
			{
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, null, null, null, UIScaleMatrix);
				TimeLogger.DetailedDrawReset();
				DrawPlayerChatBubbles();
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, null, null, null, GameViewMatrix.ZoomMatrix);
				float targetScale = CombatText.TargetScale;
				for (int k = 0; k < 100; k++)
				{
					if (!combatText[k].active)
					{
						continue;
					}
					int num9 = 0;
					if (combatText[k].crit)
					{
						num9 = 1;
					}
					Vector2 vector2 = FontAssets.CombatText[num9].Value.MeasureString(combatText[k].text);
					Vector2 vector3 = new Vector2(vector2.X * 0.5f, vector2.Y * 0.5f);
					float num10 = combatText[k].scale / targetScale;
					float num11 = (int)combatText[k].color.R;
					float num12 = (int)combatText[k].color.G;
					float num13 = (int)combatText[k].color.B;
					float num14 = (int)combatText[k].color.A;
					num11 *= num10 * combatText[k].alpha * 0.3f;
					num13 *= num10 * combatText[k].alpha * 0.3f;
					num12 *= num10 * combatText[k].alpha * 0.3f;
					num14 *= num10 * combatText[k].alpha;
					Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)num11, (int)num12, (int)num13, (int)num14);
					for (int l = 0; l < 5; l++)
					{
						float num15 = 0f;
						float num16 = 0f;
						switch (l)
						{
						case 0:
							num15 -= targetScale;
							break;
						case 1:
							num15 += targetScale;
							break;
						case 2:
							num16 -= targetScale;
							break;
						case 3:
							num16 += targetScale;
							break;
						default:
							num11 = (float)(int)combatText[k].color.R * num10 * combatText[k].alpha;
							num13 = (float)(int)combatText[k].color.B * num10 * combatText[k].alpha;
							num12 = (float)(int)combatText[k].color.G * num10 * combatText[k].alpha;
							num14 = (float)(int)combatText[k].color.A * num10 * combatText[k].alpha;
							color = new Microsoft.Xna.Framework.Color((int)num11, (int)num12, (int)num13, (int)num14);
							break;
						}
						if (player[myPlayer].gravDir == -1f)
						{
							float num17 = combatText[k].position.Y - screenPosition.Y;
							num17 = (float)screenHeight - num17;
							DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.CombatText[num9].Value, combatText[k].text, new Vector2(combatText[k].position.X - screenPosition.X + num15 + vector3.X, num17 + num16 + vector3.Y), color, combatText[k].rotation, vector3, combatText[k].scale, SpriteEffects.None, 0f);
						}
						else
						{
							DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.CombatText[num9].Value, combatText[k].text, new Vector2(combatText[k].position.X - screenPosition.X + num15 + vector3.X, combatText[k].position.Y - screenPosition.Y + num16 + vector3.Y), color, combatText[k].rotation, vector3, combatText[k].scale, SpriteEffects.None, 0f);
						}
					}
				}
				targetScale = PopupText.TargetScale;
				if (targetScale == 0f)
				{
					targetScale = 1f;
				}
				for (int m = 0; m < 20; m++)
				{
					if (!popupText[m].active)
					{
						continue;
					}
					string text = popupText[m].name;
					if (popupText[m].stack > 1)
					{
						text = text + " (" + popupText[m].stack + ")";
					}
					Vector2 vector4 = FontAssets.MouseText.Value.MeasureString(text);
					Vector2 vector5 = new Vector2(vector4.X * 0.5f, vector4.Y * 0.5f);
					float num18 = popupText[m].scale / targetScale;
					int num19 = (int)(255f - 255f * num18);
					float num20 = (int)popupText[m].color.R;
					float num21 = (int)popupText[m].color.G;
					float num22 = (int)popupText[m].color.B;
					float num23 = (int)popupText[m].color.A;
					num20 *= num18 * popupText[m].alpha * 0.3f;
					num22 *= num18 * popupText[m].alpha * 0.3f;
					num21 *= num18 * popupText[m].alpha * 0.3f;
					num23 *= num18 * popupText[m].alpha;
					Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)num20, (int)num21, (int)num22, (int)num23);
					Microsoft.Xna.Framework.Color color3 = Microsoft.Xna.Framework.Color.Black;
					float scale = 1f;
					Texture2D texture2D = null;
					switch (popupText[m].context)
					{
					case PopupTextContext.ItemPickupToVoidContainer:
						color3 = new Microsoft.Xna.Framework.Color(127, 20, 255) * 0.4f;
						scale = 0.8f;
						break;
					case PopupTextContext.SonarAlert:
						color3 = Microsoft.Xna.Framework.Color.Blue * 0.4f;
						if (popupText[m].npcNetID != 0)
						{
							color3 = Microsoft.Xna.Framework.Color.Red * 0.4f;
						}
						scale = 1f;
						break;
					}
					float num24 = (float)num19 / 255f;
					for (int n = 0; n < 5; n++)
					{
						color2 = color3;
						float num25 = 0f;
						float num26 = 0f;
						switch (n)
						{
						case 0:
							num25 -= targetScale * 2f;
							break;
						case 1:
							num25 += targetScale * 2f;
							break;
						case 2:
							num26 -= targetScale * 2f;
							break;
						case 3:
							num26 += targetScale * 2f;
							break;
						default:
							color2 = popupText[m].color * num18 * popupText[m].alpha * scale;
							break;
						}
						if (n < 4)
						{
							num23 = (float)(int)popupText[m].color.A * num18 * popupText[m].alpha;
							color2 = new Microsoft.Xna.Framework.Color(0, 0, 0, (int)num23);
						}
						if (color3 != Microsoft.Xna.Framework.Color.Black && n < 4)
						{
							num25 *= 1.3f + 1.3f * num24;
							num26 *= 1.3f + 1.3f * num24;
						}
						float num27 = popupText[m].position.Y - screenPosition.Y + num26;
						if (player[myPlayer].gravDir == -1f)
						{
							num27 = (float)screenHeight - num27;
						}
						if (color3 != Microsoft.Xna.Framework.Color.Black && n < 4)
						{
							Microsoft.Xna.Framework.Color color4 = color3;
							color4.A = (byte)MathHelper.Lerp(60f, 127f, Utils.GetLerpValue(0f, 255f, num23, clamped: true));
							DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text, new Vector2(popupText[m].position.X - screenPosition.X + num25 + vector5.X, num27 + vector5.Y), Microsoft.Xna.Framework.Color.Lerp(color2, color4, 0.5f), popupText[m].rotation, vector5, popupText[m].scale, SpriteEffects.None, 0f);
							DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text, new Vector2(popupText[m].position.X - screenPosition.X + num25 + vector5.X, num27 + vector5.Y), color4, popupText[m].rotation, vector5, popupText[m].scale, SpriteEffects.None, 0f);
						}
						else
						{
							DynamicSpriteFontExtensionMethods.DrawString(spriteBatch, FontAssets.MouseText.Value, text, new Vector2(popupText[m].position.X - screenPosition.X + num25 + vector5.X, num27 + vector5.Y), color2, popupText[m].rotation, vector5, popupText[m].scale, SpriteEffects.None, 0f);
						}
						if (texture2D != null)
						{
							float scale2 = (1.3f - num24) * popupText[m].scale * 0.7f;
							Vector2 value = new Vector2(popupText[m].position.X - screenPosition.X + num25 + vector5.X, num27 + vector5.Y);
							Microsoft.Xna.Framework.Color value2 = color3 * 0.6f;
							if (n == 4)
							{
								value2 = Microsoft.Xna.Framework.Color.White * 0.6f;
							}
							value2.A = (byte)((float)(int)value2.A * 0.5f);
							int num28 = 25;
							spriteBatch.Draw(texture2D, value + new Vector2(vector5.X * -0.5f - (float)num28 - texture2D.Size().X / 2f, 0f), null, value2 * popupText[m].scale, 0f, texture2D.Size() / 2f, scale2, SpriteEffects.None, 0f);
							spriteBatch.Draw(texture2D, value + new Vector2(vector5.X * 0.5f + (float)num28 + texture2D.Size().X / 2f, 0f), null, value2 * popupText[m].scale, 0f, texture2D.Size() / 2f, scale2, SpriteEffects.None, 0f);
						}
					}
				}
				PlayerInput.SetZoom_UI();
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, null, null, null, UIScaleMatrix);
				DrawNetplayStatusText();
				DrawFPS();
				spriteBatch.End();
				spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, null, null, null, GameViewMatrix.ZoomMatrix);
				PlayerInput.SetZoom_World();
				if (BlackFadeIn > 0)
				{
					if (BlackFadeIn < 0)
					{
						BlackFadeIn = 0;
					}
					int num29 = BlackFadeIn;
					if (num29 > 255)
					{
						num29 = 255;
					}
					BlackFadeIn -= 25;
					spriteBatch.Draw(TextureAssets.SplashTexture16x9.Value, new Microsoft.Xna.Framework.Rectangle(0, 0, screenWidth, screenHeight), new Microsoft.Xna.Framework.Color(0, 0, 0, num29));
				}
				spriteBatch.End();
				if (!mapFullscreen)
				{
					if (ignoreErrors)
					{
						try
						{
							DrawInterface(gameTime);
						}
						catch (Exception e3)
						{
							TimeLogger.DrawException(e3);
						}
					}
					else
					{
						DrawInterface(gameTime);
					}
				}
				TimeLogger.DetailedDrawTime(27);
			}
			else
			{
				maxQ = true;
			}
			TimeLogger.DetailedDrawTime(37);
			if (mouseLeft)
			{
				mouseLeftRelease = false;
			}
			else
			{
				mouseLeftRelease = true;
			}
			if (mouseRight)
			{
				mouseRightRelease = false;
			}
			else
			{
				mouseRightRelease = true;
			}
			if (!PlayerInput.Triggers.Current.MouseRight && !PlayerInput.Triggers.Current.MouseLeft && !preventStackSplitReset)
			{
				stackSplit = 0;
			}
			if (stackSplit > 0)
			{
				stackSplit--;
				if (stackSplit == 0)
				{
					preventStackSplitReset = false;
				}
			}
			TimeLogger.RenderTime(renderCount, stopwatch.Elapsed.TotalMilliseconds);
			TimeLogger.EndDrawFrame();
		}

		private static void DoDraw_UpdateCameraPosition()
		{
			Vector3 value = new Vector3(1f, 1f, 1f);
			Vector3 vector = Vector3.One / value;
			if (gameMenu || netMode == 2)
			{
				return;
			}
			int num = 21;
			if (cameraX != 0f && !Main.player[myPlayer].pulley)
			{
				cameraX = 0f;
			}
			if (cameraX > 0f)
			{
				cameraX -= 1f;
				if (cameraX < 0f)
				{
					cameraX = 0f;
				}
			}
			if (cameraX < 0f)
			{
				cameraX += 1f;
				if (cameraX > 0f)
				{
					cameraX = 0f;
				}
			}
			Vector2 value2 = screenPosition;
			screenPosition.X = Main.player[myPlayer].position.X + (float)Main.player[myPlayer].width * 0.5f - (float)screenWidth * 0.5f * vector.X + cameraX;
			screenPosition.Y = Main.player[myPlayer].position.Y + (float)Main.player[myPlayer].height - (float)num - (float)screenHeight * 0.5f * vector.Y + Main.player[myPlayer].gfxOffY;
			Vector2 vector2 = Vector2.Zero;
			float num2 = 0f;
			float num3 = 0f;
			float num4 = 36f;
			bool flag = false;
			if (((Main.player[myPlayer].noThrow <= 0 && !Main.player[myPlayer].lastMouseInterface) || !(CurrentPan == Vector2.Zero)) && !Main.player[myPlayer].dead)
			{
				if (LocalGolfState != null && (LocalGolfState.ShouldCameraTrackBallLastKnownLocation || LocalGolfState.IsTrackingBall))
				{
					if (LocalGolfState.IsTrackingBall)
					{
						Projectile lastHitBall = LocalGolfState.GetLastHitBall();
						vector2 = lastHitBall.Center - LocalPlayer.Center;
						if (lastHitBall.velocity.Length() > 20f)
						{
							num4 *= 2f;
						}
						vector2 = CurrentPan * 0.87f + vector2 * 0.13f;
						flag = true;
					}
					else if (LocalGolfState.ShouldCameraTrackBallLastKnownLocation)
					{
						Vector2? lastBallLocation = LocalGolfState.GetLastBallLocation();
						if (lastBallLocation.HasValue)
						{
							vector2 = lastBallLocation.Value - LocalPlayer.Center;
							vector2 = CurrentPan * 0.87f + vector2 * 0.13f;
							flag = true;
						}
					}
				}
				else if (PlayerInput.UsingGamepad)
				{
					Player player = Main.player[myPlayer];
					if (PlayerInput.GamepadThumbstickRight.Length() != 0f || !SmartCursorEnabled)
					{
						float num5 = -1f;
						if (player.inventory[player.selectedItem].type == 1254 && player.scope)
						{
							num5 = 0.8f;
						}
						else if (player.inventory[player.selectedItem].type == 1254)
						{
							num5 = 2f / 3f;
						}
						else if (player.inventory[player.selectedItem].type == 1299)
						{
							num5 = 2f / 3f;
						}
						else if (player.scope)
						{
							num5 = 0.5f;
						}
						Vector2 vector3 = (MouseScreen - new Vector2(screenWidth, screenHeight) / 2f) / (new Vector2(screenWidth, screenHeight) / 2f);
						num4 = 48f;
						if (vector3 != Vector2.Zero && num5 != -1f)
						{
							Vector2 vector4 = new Vector2(screenWidth, screenHeight) * 0.5f * vector3 * num5;
							vector2.X = vector4.X;
							vector2.Y = vector4.Y;
							flag = true;
						}
					}
				}
				else if (Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].type == 1254 && Main.player[myPlayer].scope && mouseRight)
				{
					int num6 = mouseX;
					int num7 = mouseY;
					if (num6 > screenWidth)
					{
						num6 = screenWidth;
					}
					if (num6 < 0)
					{
						num6 = 0;
					}
					if (num7 > screenHeight)
					{
						num7 = screenHeight;
					}
					if (num7 < 0)
					{
						num7 = 0;
					}
					vector2.X = (float)(num6 - screenWidth / 2) / 1.25f;
					vector2.Y = (float)(num7 - screenHeight / 2) / 1.25f;
					flag = true;
				}
				else if (Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].type == 1254 && mouseRight)
				{
					int num8 = mouseX;
					int num9 = mouseY;
					if (num8 > screenWidth)
					{
						num8 = screenWidth;
					}
					if (num8 < 0)
					{
						num8 = 0;
					}
					if (num9 > screenHeight)
					{
						num9 = screenHeight;
					}
					if (num9 < 0)
					{
						num9 = 0;
					}
					vector2.X = (float)(num8 - screenWidth / 2) / 1.5f;
					vector2.Y = (float)(num9 - screenHeight / 2) / 1.5f;
					flag = true;
				}
				else if (Main.player[myPlayer].inventory[Main.player[myPlayer].selectedItem].type == 1299 && Main.player[myPlayer].selectedItem != 58)
				{
					int num10 = mouseX;
					int num11 = mouseY;
					if (num10 > screenWidth)
					{
						num10 = screenWidth;
					}
					if (num10 < 0)
					{
						num10 = 0;
					}
					if (num11 > screenHeight)
					{
						num11 = screenHeight;
					}
					if (num11 < 0)
					{
						num11 = 0;
					}
					vector2.X = (float)(num10 - screenWidth / 2) / 1.5f;
					vector2.Y = (float)(num11 - screenHeight / 2) / 1.5f;
					flag = true;
				}
				else if (Main.player[myPlayer].scope && mouseRight)
				{
					int num12 = mouseX;
					int num13 = mouseY;
					if (num12 > screenWidth)
					{
						num12 = screenWidth;
					}
					if (num12 < 0)
					{
						num12 = 0;
					}
					if (num13 > screenHeight)
					{
						num13 = screenHeight;
					}
					if (num13 < 0)
					{
						num13 = 0;
					}
					vector2.X = (float)(num12 - screenWidth / 2) / 2f;
					vector2.Y = (float)(num13 - screenHeight / 2) / 2f;
					flag = true;
				}
			}
			if (float.IsNaN(CurrentPan.X))
			{
				CurrentPan.X = 0f;
			}
			if (float.IsNaN(CurrentPan.Y))
			{
				CurrentPan.Y = 0f;
			}
			Vector2 value3 = vector2 - CurrentPan;
			float num14 = value3.Length();
			float amount = 1f;
			if (num3 > num2 + 0.0001f)
			{
				amount = MathHelper.Clamp((num14 - num2) / (num3 - num2), 0f, 1f);
			}
			float value4 = MathHelper.SmoothStep(0f, num14, amount);
			value4 = MathHelper.Clamp(value4, 0f, num4);
			if (vector2 == Vector2.Zero && !flag)
			{
				if (Math.Abs(value3.X) >= (float)(screenWidth / 2) || Math.Abs(value3.Y) >= (float)(screenHeight / 2))
				{
					renderNow = true;
					CurrentPan *= 0.9f;
				}
				else if (value4 > 0.0001f)
				{
					CurrentPan += Vector2.Normalize(value3) * value4;
				}
			}
			else if (value4 > 0.0001f)
			{
				CurrentPan += Vector2.Normalize(value3) * value4;
			}
			screenPosition.X += CurrentPan.X;
			screenPosition.Y += CurrentPan.Y * Main.player[myPlayer].gravDir;
			if (cameraLerp > 0f)
			{
				if (Vector2.Distance(value2, screenPosition) - Main.player[myPlayer].velocity.Length() < 0.25f || (cameraGamePadLerp && !PlayerInput.UsingGamepad))
				{
					cameraLerp = 0f;
					cameraGamePadLerp = false;
				}
				else
				{
					screenPosition = Vector2.Lerp(value2, screenPosition, cameraLerp);
				}
			}
			screenPosition.X = (int)screenPosition.X;
			screenPosition.Y = (int)screenPosition.Y;
			ClampScreenPositionToWorld();
		}

		private void DrawSunAndMoon(SceneArea sceneArea, Microsoft.Xna.Framework.Color moonColor, Microsoft.Xna.Framework.Color sunColor, float tempMushroomInfluence)
		{
			Texture2D value = TextureAssets.Sun.Value;
			int num = moonType;
			if (!TextureAssets.Moon.IndexInRange(num))
			{
				num = Utils.Clamp(num, 0, 8);
			}
			Texture2D value2 = TextureAssets.Moon[num].Value;
			int num2 = sceneArea.bgTopY;
			int num3 = (int)(time / 54000.0 * (double)(sceneArea.totalWidth + (float)(value.Width * 2))) - value.Width;
			int num4 = 0;
			float num5 = 1f;
			float rotation = (float)(time / 54000.0) * 2f - 7.3f;
			int num6 = (int)(time / 32400.0 * (double)(sceneArea.totalWidth + (float)(value2.Width * 2))) - value2.Width;
			int num7 = 0;
			float num8 = 1f;
			float num9 = (float)(time / 32400.0) * 2f - 7.3f;
			if (dayTime)
			{
				double num10;
				if (time < 27000.0)
				{
					num10 = Math.Pow(1.0 - time / 54000.0 * 2.0, 2.0);
					num4 = (int)((double)num2 + num10 * 250.0 + 180.0);
				}
				else
				{
					num10 = Math.Pow((time / 54000.0 - 0.5) * 2.0, 2.0);
					num4 = (int)((double)num2 + num10 * 250.0 + 180.0);
				}
				num5 = (float)(1.2 - num10 * 0.4);
			}
			else
			{
				double num11;
				if (time < 16200.0)
				{
					num11 = Math.Pow(1.0 - time / 32400.0 * 2.0, 2.0);
					num7 = (int)((double)num2 + num11 * 250.0 + 180.0);
				}
				else
				{
					num11 = Math.Pow((time / 32400.0 - 0.5) * 2.0, 2.0);
					num7 = (int)((double)num2 + num11 * 250.0 + 180.0);
				}
				num8 = (float)(1.2 - num11 * 0.4);
			}
			num5 *= ForcedMinimumZoom;
			num8 *= ForcedMinimumZoom;
			if (dayTime)
			{
				num5 *= 1.1f;
				float num12 = 1f - tempMushroomInfluence;
				num12 -= cloudAlpha * 1.5f * atmo;
				if (num12 < 0f)
				{
					num12 = 0f;
				}
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((byte)(255f * num12), (byte)((float)(int)sunColor.G * num12), (byte)((float)(int)sunColor.B * num12), (byte)(255f * num12));
				Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((byte)((float)(int)sunColor.R * num12), (byte)((float)(int)sunColor.G * num12), (byte)((float)(int)sunColor.B * num12), (byte)((float)(int)sunColor.B * num12));
				bool flag = false;
				if (eclipse)
				{
					value = TextureAssets.Sun3.Value;
					flag = true;
				}
				else if (!gameMenu && player[myPlayer].head == 12)
				{
					value = TextureAssets.Sun2.Value;
					flag = true;
				}
				if (flag)
				{
					color2 = new Microsoft.Xna.Framework.Color((byte)((float)(int)sunColor.R * num12), (byte)((float)(int)sunColor.G * num12), (byte)((float)(int)sunColor.B * num12), (byte)((float)(sunColor.B - 60) * num12));
				}
				Vector2 origin = value.Size() / 2f;
				Vector2 position = new Vector2(num3, num4 + sunModY) + sceneArea.SceneLocalScreenPositionOffset;
				spriteBatch.Draw(value, position, null, color, rotation, origin, num5, SpriteEffects.None, 0f);
				spriteBatch.Draw(value, position, null, color2, rotation, origin, num5, SpriteEffects.None, 0f);
			}
			if (!dayTime)
			{
				float num13 = 1f - cloudAlpha * 1.5f * atmo;
				if (num13 < 0f)
				{
					num13 = 0f;
				}
				moonColor *= num13;
				Vector2 position2 = new Vector2(num6, num7 + moonModY) + sceneArea.SceneLocalScreenPositionOffset;
				if (WorldGen.drunkWorldGen)
				{
					spriteBatch.Draw(TextureAssets.SmileyMoon.Value, position2, new Microsoft.Xna.Framework.Rectangle(0, 0, TextureAssets.SmileyMoon.Width(), TextureAssets.SmileyMoon.Height()), moonColor, num9 / 2f + (float)Math.PI, new Vector2(TextureAssets.SmileyMoon.Width() / 2, TextureAssets.SmileyMoon.Width() / 2), num8, SpriteEffects.None, 0f);
				}
				else if (pumpkinMoon)
				{
					spriteBatch.Draw(TextureAssets.PumpkinMoon.Value, position2, new Microsoft.Xna.Framework.Rectangle(0, TextureAssets.PumpkinMoon.Width() * moonPhase, TextureAssets.PumpkinMoon.Width(), TextureAssets.PumpkinMoon.Width()), moonColor, num9, new Vector2(TextureAssets.PumpkinMoon.Width() / 2, TextureAssets.PumpkinMoon.Width() / 2), num8, SpriteEffects.None, 0f);
				}
				else if (snowMoon)
				{
					spriteBatch.Draw(TextureAssets.SnowMoon.Value, position2, new Microsoft.Xna.Framework.Rectangle(0, TextureAssets.SnowMoon.Width() * moonPhase, TextureAssets.SnowMoon.Width(), TextureAssets.SnowMoon.Width()), moonColor, num9, new Vector2(TextureAssets.SnowMoon.Width() / 2, TextureAssets.SnowMoon.Width() / 2), num8, SpriteEffects.None, 0f);
				}
				else
				{
					spriteBatch.Draw(TextureAssets.Moon[num].Value, position2, new Microsoft.Xna.Framework.Rectangle(0, TextureAssets.Moon[num].Width() * moonPhase, TextureAssets.Moon[num].Width(), TextureAssets.Moon[num].Width()), moonColor, num9, new Vector2(TextureAssets.Moon[num].Width() / 2, TextureAssets.Moon[num].Width() / 2), num8, SpriteEffects.None, 0f);
				}
			}
			Microsoft.Xna.Framework.Rectangle value3 = (dayTime ? new Microsoft.Xna.Framework.Rectangle((int)((double)num3 - (double)TextureAssets.Sun.Width() * 0.5 * (double)num5), (int)((double)num4 - (double)TextureAssets.Sun.Height() * 0.5 * (double)num5 + (double)sunModY), (int)((float)TextureAssets.Sun.Width() * num5), (int)((float)TextureAssets.Sun.Width() * num5)) : new Microsoft.Xna.Framework.Rectangle((int)((double)num6 - (double)TextureAssets.Moon[num].Width() * 0.5 * (double)num8), (int)((double)num7 - (double)TextureAssets.Moon[num].Width() * 0.5 * (double)num8 + (double)moonModY), (int)((float)TextureAssets.Moon[num].Width() * num8), (int)((float)TextureAssets.Moon[num].Width() * num8)));
			value3.Offset((int)sceneArea.SceneLocalScreenPositionOffset.X, (int)sceneArea.SceneLocalScreenPositionOffset.Y);
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(mouseX, mouseY, 1, 1);
			sunModY = (short)((double)sunModY * 0.999);
			moonModY = (short)((double)moonModY * 0.999);
			if (!gameMenu || netMode == 1)
			{
				return;
			}
			if (rectangle.Intersects(value3) || alreadyGrabbingSunOrMoon)
			{
				player[myPlayer].mouseInterface = true;
			}
			if (mouseLeft && hasFocus)
			{
				if (!rectangle.Intersects(value3) && !alreadyGrabbingSunOrMoon)
				{
					return;
				}
				if (dayTime)
				{
					time = 54000.0 * (double)((float)(mouseX + TextureAssets.Sun.Width()) / ((float)screenWidth + (float)(TextureAssets.Sun.Width() * 2)));
					sunModY = (short)(mouseY - num4);
					if (time > 53990.0)
					{
						time = 53990.0;
					}
				}
				else
				{
					time = 32400.0 * (double)((float)(mouseX + TextureAssets.Moon[num].Width()) / ((float)screenWidth + (float)(TextureAssets.Moon[num].Width() * 2)));
					moonModY = (short)(mouseY - num7);
					if (time > 32390.0)
					{
						time = 32390.0;
					}
				}
				if (time < 10.0)
				{
					time = 10.0;
				}
				alreadyGrabbingSunOrMoon = true;
			}
			else
			{
				alreadyGrabbingSunOrMoon = false;
			}
		}

		private void DrawStarsInBackground(SceneArea sceneArea)
		{
			if (netMode == 2 || (double)screenPosition.Y >= worldSurface * 16.0 + 16.0)
			{
				return;
			}
			float num = 1f;
			if (GraveyardVisualIntensity > 0f)
			{
				float num2 = 1f - GraveyardVisualIntensity * 1.4f;
				if (num2 <= 0f)
				{
					return;
				}
				num *= num2;
			}
			Microsoft.Xna.Framework.Color colorOfTheSkies = ColorOfTheSkies;
			if (255f * (1f - cloudAlpha * atmo) - (float)(int)colorOfTheSkies.R - 25f <= 0f)
			{
				return;
			}
			for (int i = 0; i < numStars; i++)
			{
				Star star = Main.star[i];
				if (star == null || star.hidden)
				{
					continue;
				}
				Microsoft.Xna.Framework.Color color = default(Microsoft.Xna.Framework.Color);
				float num3 = 1f - star.fadeIn;
				int num4 = (int)((float)(255 - colorOfTheSkies.R - 100) * star.twinkle * num3);
				int num5 = (int)((float)(255 - colorOfTheSkies.G - 100) * star.twinkle * num3);
				int num6 = (int)((float)(255 - colorOfTheSkies.B - 100) * star.twinkle * num3);
				num4 = (num4 + num6 + num5) / 3;
				if (num4 <= 0)
				{
					continue;
				}
				num4 = (int)((double)num4 * 1.4);
				if (num4 > 255)
				{
					num4 = 255;
				}
				num5 = num4;
				num6 = num4;
				color.R = (byte)num4;
				color.G = (byte)num5;
				color.B = (byte)num6;
				color *= num;
				Vector2 vector = new Vector2(star.position.X / 1920f, star.position.Y / 1200f) * new Vector2(sceneArea.totalWidth, sceneArea.totalHeight) + new Vector2(0f, sceneArea.bgTopY) + sceneArea.SceneLocalScreenPositionOffset;
				Texture2D value = TextureAssets.Star[star.type].Value;
				Vector2 origin = value.Size() / 2f;
				if (star.falling)
				{
					star.fadeIn = 0f;
					int num7 = star.fallTime;
					float num8 = 30f;
					if ((float)num7 > num8)
					{
						num7 = (int)num8;
					}
					for (int j = 1; j < num7; j++)
					{
						Vector2 value2 = star.fallSpeed * j * 0.4f;
						float num9 = star.scale * (1f - (float)j * 1f / num8);
						Microsoft.Xna.Framework.Color color2 = color;
						_ = star.rotation;
						color2 *= 1f - (float)j * 1f / num8;
						spriteBatch.Draw(value, vector - value2, null, color2, star.rotation, origin, num9 * star.twinkle * ForcedMinimumZoom, SpriteEffects.None, 0f);
					}
				}
				spriteBatch.Draw(value, vector, null, color, star.rotation, origin, star.scale * star.twinkle * ForcedMinimumZoom, SpriteEffects.None, 0f);
			}
		}

		private static void ApplyColorOfTheSkiesToTiles()
		{
			Microsoft.Xna.Framework.Color colorOfTheSkies = ColorOfTheSkies;
			tileColor.A = byte.MaxValue;
			tileColor.R = (byte)((colorOfTheSkies.R + colorOfTheSkies.G + colorOfTheSkies.B + colorOfTheSkies.R * 7) / 10);
			tileColor.G = (byte)((colorOfTheSkies.R + colorOfTheSkies.G + colorOfTheSkies.B + colorOfTheSkies.G * 7) / 10);
			tileColor.B = (byte)((colorOfTheSkies.R + colorOfTheSkies.G + colorOfTheSkies.B + colorOfTheSkies.B * 7) / 10);
			tileColor = SkyManager.Instance.ProcessTileColor(tileColor);
		}

		private static void UpdateAtmosphereTransparencyToSkyColor()
		{
			float num = maxTilesX / 4200;
			num *= num;
			atmo = (float)((double)((screenPosition.Y + (float)(screenHeight / 2)) / 16f - (65f + 10f * num)) / (worldSurface / 5.0));
			if (atmo < 0f)
			{
				atmo = 0f;
			}
			if (atmo > 1f)
			{
				atmo = 1f;
			}
			if (gameMenu || netMode == 2)
			{
				atmo = 1f;
			}
			Microsoft.Xna.Framework.Color colorOfTheSkies = ColorOfTheSkies;
			colorOfTheSkies.R = (byte)((float)(int)colorOfTheSkies.R * atmo);
			colorOfTheSkies.G = (byte)((float)(int)colorOfTheSkies.G * atmo);
			colorOfTheSkies.B = (byte)((float)(int)colorOfTheSkies.B * atmo);
			if ((double)atmo <= 0.01)
			{
				colorOfTheSkies = Microsoft.Xna.Framework.Color.Transparent;
			}
			ColorOfTheSkies = colorOfTheSkies;
		}

		private void Debug_PrettifyMap()
		{
		}

		private static void DrawNetplayStatusText()
		{
			if (netMode == 1 && !string.IsNullOrWhiteSpace(Netplay.Connection.StatusText))
			{
				string text = Netplay.Connection.StatusText;
				if (!Netplay.Connection.HideStatusTextPercent)
				{
					text = text + ": " + (int)((float)Netplay.Connection.StatusCount / (float)Netplay.Connection.StatusMax * 100f) + "%";
				}
				if (_netplayStatusTextSnippets == null || _oldNetplayStatusText != text)
				{
					_netplayStatusTextSnippets = ChatManager.ParseMessage(text, Microsoft.Xna.Framework.Color.White).ToArray();
					_oldNetplayStatusText = text;
				}
				Vector2 position = new Vector2(628f - ChatManager.GetStringSize(FontAssets.MouseText.Value, _netplayStatusTextSnippets, Vector2.One).X * 0.5f + (float)(screenWidth - 800), 84f);
				int hoveredSnippet;
				if (Netplay.Connection.StatusTextHasShadows)
				{
					ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, _netplayStatusTextSnippets, position, 0f, Vector2.Zero, Vector2.One, out hoveredSnippet);
				}
				else
				{
					ChatManager.DrawColorCodedString(spriteBatch, FontAssets.MouseText.Value, _netplayStatusTextSnippets, position, new Microsoft.Xna.Framework.Color(mouseTextColor, mouseTextColor, mouseTextColor, mouseTextColor), 0f, Vector2.Zero, Vector2.One, out hoveredSnippet, -1f);
				}
			}
		}

		private void DrawPlayerChatBubbles()
		{
			for (int i = 0; i < 255; i++)
			{
				if (player[i].active && player[i].chatOverhead.timeLeft > 0 && !player[i].dead)
				{
					Vector2 messageSize = player[i].chatOverhead.messageSize;
					Vector2 vector = player[i].Top.ToScreenPosition();
					vector.Y -= messageSize.Y + 2f;
					if (player[myPlayer].gravDir == -1f)
					{
						vector.Y += 2f;
					}
					vector.X -= messageSize.X / 2f;
					vector.Y += player[i].gfxOffY;
					vector = vector;
					int hoveredSnippet = 0;
					ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.MouseText.Value, player[i].chatOverhead.snippets, vector, 0f, player[i].chatOverhead.color, Vector2.Zero, Vector2.One, out hoveredSnippet);
				}
			}
		}

		private void DrawRainInMenu()
		{
			bool isActive = base.IsActive;
			Microsoft.Xna.Framework.Rectangle[] array = new Microsoft.Xna.Framework.Rectangle[6];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = new Microsoft.Xna.Framework.Rectangle(i * 4, 0, 2, 40);
			}
			Microsoft.Xna.Framework.Color color = ColorOfTheSkies * 0.85f;
			for (int j = 0; j < maxRain; j++)
			{
				if (Main.rain[j].active)
				{
					Rain rain = Main.rain[j];
					spriteBatch.Draw(TextureAssets.Rain.Value, rain.position - screenPosition, array[rain.type], color, rain.rotation, Vector2.Zero, rain.scale, SpriteEffects.None, 0f);
					if (isActive)
					{
						rain.Update();
					}
				}
			}
		}

		private void DoDraw_WallsTilesNPCs()
		{
			try
			{
				CacheNPCDraws();
				CacheProjDraws();
				DrawCachedNPCs(DrawCacheNPCsMoonMoon, behindTiles: true);
				DoDraw_WallsAndBlacks();
				DrawWoF();
				DrawBackGore();
				MoonlordDeathDrama.DrawPieces(spriteBatch);
				MoonlordDeathDrama.DrawExplosions(spriteBatch);
				DrawCachedNPCs(DrawCacheNPCsBehindNonSolidTiles, behindTiles: true);
				DoDraw_Tiles_NonSolid();
				DoDraw_Waterfalls();
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
			spriteBatch.End();
			try
			{
				bool detectCreature = player[myPlayer].detectCreature;
				if (!detectCreature)
				{
					DoDraw_DrawNPCsBehindTiles();
				}
				DoDraw_Tiles_Solid();
				if (detectCreature)
				{
					DoDraw_DrawNPCsBehindTiles();
				}
				DrawPlayers_BehindNPCs();
				DoDraw_DrawNPCsOverTiles();
				TimeLogger.DetailedDrawReset();
			}
			catch (Exception e2)
			{
				TimeLogger.DrawException(e2);
			}
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
		}

		private void DoDraw_Waterfalls()
		{
			waterfallManager.Draw(spriteBatch);
			TimeLogger.DetailedDrawTime(16);
		}

		private void DoDraw_Tiles_Solid()
		{
			TilesRenderer.PreDrawTiles(solidLayer: true, !drawToScreen, intoRenderTargets: false);
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			try
			{
				if (drawToScreen)
				{
					DrawTiles(solidLayer: true, !drawToScreen, intoRenderTargets: false);
				}
				else
				{
					spriteBatch.Draw(tileTarget, sceneTilePos - screenPosition, Microsoft.Xna.Framework.Color.White);
					TimeLogger.DetailedDrawTime(17);
				}
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
			spriteBatch.End();
			DrawTileEntities(solidLayer: true, !drawToScreen, intoRenderTargets: false);
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			try
			{
				player[myPlayer].hitReplace.DrawFreshAnimations(spriteBatch);
				player[myPlayer].hitTile.DrawFreshAnimations(spriteBatch);
			}
			catch (Exception e2)
			{
				TimeLogger.DrawException(e2);
			}
			spriteBatch.End();
		}

		private void DoDraw_Tiles_NonSolid()
		{
			TilesRenderer.PreDrawTiles(solidLayer: false, !drawToScreen, intoRenderTargets: false);
			if (drawToScreen)
			{
				DrawTiles(solidLayer: false, !drawToScreen, intoRenderTargets: false);
				TimeLogger.DetailedDrawReset();
			}
			else
			{
				spriteBatch.Draw(tile2Target, sceneTile2Pos - screenPosition, Microsoft.Xna.Framework.Color.White);
				TimeLogger.DetailedDrawTime(15);
			}
			spriteBatch.End();
			try
			{
				DrawTileEntities(solidLayer: false, !drawToScreen, intoRenderTargets: false);
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
		}

		private void DoDraw_DrawNPCsOverTiles()
		{
			DrawCachedProjs(DrawCacheProjsBehindNPCs);
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			try
			{
				DrawNPCs();
				DrawCachedNPCs(DrawCacheNPCProjectiles, behindTiles: false);
				TimeLogger.DetailedDrawTime(19);
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
			spriteBatch.End();
		}

		private void DoDraw_DrawNPCsBehindTiles()
		{
			DrawCachedProjs(DrawCacheProjsBehindNPCsAndTiles);
			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, DepthStencilState.None, Rasterizer, null, Transform);
			try
			{
				DrawNPCs(behindTiles: true);
				TimeLogger.DetailedDrawTime(18);
			}
			catch (Exception e)
			{
				TimeLogger.DrawException(e);
			}
			spriteBatch.End();
		}

		private void DrawBackGore()
		{
			if (!drawBackGore)
			{
				return;
			}
			drawBackGore = false;
			if (ignoreErrors)
			{
				try
				{
					DrawGoreBehind();
				}
				catch (Exception e)
				{
					TimeLogger.DrawException(e);
				}
			}
			else
			{
				DrawGoreBehind();
			}
		}

		private void DoDraw_WallsAndBlacks()
		{
			if (drawToScreen)
			{
				DrawBlack();
				tileBatch.Begin();
				DrawWalls();
				tileBatch.End();
			}
			else
			{
				spriteBatch.Draw(blackTarget, sceneTilePos - screenPosition, Microsoft.Xna.Framework.Color.White);
				TimeLogger.DetailedDrawTime(13);
				spriteBatch.Draw(wallTarget, sceneWallPos - screenPosition, Microsoft.Xna.Framework.Color.White);
				TimeLogger.DetailedDrawTime(14);
			}
			Overlays.Scene.Draw(spriteBatch, RenderLayers.Walls);
		}

		private static void SetBackColor(InfoToSetBackColor info, out Microsoft.Xna.Framework.Color sunColor, out Microsoft.Xna.Framework.Color moonColor)
		{
			double num = time;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			sunColor = Microsoft.Xna.Framework.Color.White;
			moonColor = Microsoft.Xna.Framework.Color.White;
			float num2 = 0f;
			bool isInGameMenuOrIsServer = info.isInGameMenuOrIsServer;
			if (dayTime)
			{
				if (num < 13500.0)
				{
					num2 = (float)(num / 13500.0);
					sunColor.R = (byte)(num2 * 200f + 55f);
					sunColor.G = (byte)(num2 * 180f + 75f);
					sunColor.B = (byte)(num2 * 250f + 5f);
					white.R = (byte)(num2 * 230f + 25f);
					white.G = (byte)(num2 * 220f + 35f);
					white.B = (byte)(num2 * 220f + 35f);
				}
				if (num > 45900.0)
				{
					num2 = (float)(1.0 - (num / 54000.0 - 0.85) * 6.666666666666667);
					sunColor.R = (byte)(num2 * 120f + 55f);
					sunColor.G = (byte)(num2 * 100f + 25f);
					sunColor.B = (byte)(num2 * 120f + 55f);
					white.R = (byte)(num2 * 200f + 35f);
					white.G = (byte)(num2 * 85f + 35f);
					white.B = (byte)(num2 * 135f + 35f);
				}
				else if (num > 37800.0)
				{
					num2 = (float)(1.0 - (num / 54000.0 - 0.7) * 6.666666666666667);
					sunColor.R = (byte)(num2 * 80f + 175f);
					sunColor.G = (byte)(num2 * 130f + 125f);
					sunColor.B = (byte)(num2 * 100f + 155f);
					white.R = (byte)(num2 * 20f + 235f);
					white.G = (byte)(num2 * 135f + 120f);
					white.B = (byte)(num2 * 85f + 170f);
				}
			}
			if (!dayTime)
			{
				if (info.BloodMoonActive)
				{
					if (num < 16200.0)
					{
						num2 = (float)(1.0 - num / 16200.0);
						moonColor.R = (byte)(num2 * 10f + 205f);
						moonColor.G = (byte)(num2 * 170f + 55f);
						moonColor.B = (byte)(num2 * 200f + 55f);
						white.R = (byte)(40f - num2 * 40f + 35f);
						white.G = (byte)(num2 * 20f + 15f);
						white.B = (byte)(num2 * 20f + 15f);
					}
					else if (num >= 16200.0)
					{
						num2 = (float)((num / 32400.0 - 0.5) * 2.0);
						moonColor.R = (byte)(num2 * 50f + 205f);
						moonColor.G = (byte)(num2 * 100f + 155f);
						moonColor.B = (byte)(num2 * 100f + 155f);
						moonColor.R = (byte)(num2 * 10f + 205f);
						moonColor.G = (byte)(num2 * 170f + 55f);
						moonColor.B = (byte)(num2 * 200f + 55f);
						white.R = (byte)(40f - num2 * 40f + 35f);
						white.G = (byte)(num2 * 20f + 15f);
						white.B = (byte)(num2 * 20f + 15f);
					}
				}
				else if (num < 16200.0)
				{
					num2 = (float)(1.0 - num / 16200.0);
					moonColor.R = (byte)(num2 * 10f + 205f);
					moonColor.G = (byte)(num2 * 70f + 155f);
					moonColor.B = (byte)(num2 * 100f + 155f);
					white.R = (byte)(num2 * 30f + 5f);
					white.G = (byte)(num2 * 30f + 5f);
					white.B = (byte)(num2 * 30f + 5f);
				}
				else if (num >= 16200.0)
				{
					num2 = (float)((num / 32400.0 - 0.5) * 2.0);
					moonColor.R = (byte)(num2 * 50f + 205f);
					moonColor.G = (byte)(num2 * 100f + 155f);
					moonColor.B = (byte)(num2 * 100f + 155f);
					white.R = (byte)(num2 * 20f + 5f);
					white.G = (byte)(num2 * 30f + 5f);
					white.B = (byte)(num2 * 30f + 5f);
				}
			}
			if (cloudAlpha > 0f)
			{
				float num3 = 1f - cloudAlpha * 0.9f * atmo;
				white.R = (byte)((float)(int)white.R * num3);
				white.G = (byte)((float)(int)white.G * num3);
				white.B = (byte)((float)(int)white.B * num3);
			}
			if (info.GraveyardInfluence > 0f)
			{
				float num4 = 1f - info.GraveyardInfluence * 0.6f;
				white.R = (byte)((float)(int)white.R * num4);
				white.G = (byte)((float)(int)white.G * num4);
				white.B = (byte)((float)(int)white.B * num4);
			}
			if (isInGameMenuOrIsServer && !dayTime)
			{
				white.R = 35;
				white.G = 35;
				white.B = 35;
			}
			if (info.CorruptionBiomeInfluence > 0f)
			{
				float num5 = info.CorruptionBiomeInfluence;
				if (num5 > 1f)
				{
					num5 = 1f;
				}
				int r = white.R;
				int g = white.G;
				int b = white.B;
				r -= (int)(90f * num5 * ((float)(int)white.R / 255f));
				g -= (int)(140f * num5 * ((float)(int)white.G / 255f));
				b -= (int)(70f * num5 * ((float)(int)white.B / 255f));
				if (r < 15)
				{
					r = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				white.R = (byte)r;
				white.G = (byte)g;
				white.B = (byte)b;
				r = sunColor.R;
				g = sunColor.G;
				b = sunColor.B;
				r -= (int)(100f * num5 * ((float)(int)sunColor.R / 255f));
				g -= (int)(100f * num5 * ((float)(int)sunColor.G / 255f));
				b -= (int)(0f * num5 * ((float)(int)sunColor.B / 255f));
				if (r < 15)
				{
					r = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				sunColor.R = (byte)r;
				sunColor.G = (byte)g;
				sunColor.B = (byte)b;
			}
			if (info.CrimsonBiomeInfluence > 0f)
			{
				float num6 = info.CrimsonBiomeInfluence;
				if (num6 > 1f)
				{
					num6 = 1f;
				}
				int r2 = white.R;
				int g2 = white.G;
				int b2 = white.B;
				r2 -= (int)(40f * num6 * ((float)(int)white.G / 255f));
				g2 -= (int)(110f * num6 * ((float)(int)white.G / 255f));
				b2 -= (int)(140f * num6 * ((float)(int)white.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				white.R = (byte)r2;
				white.G = (byte)g2;
				white.B = (byte)b2;
				r2 = sunColor.R;
				g2 = sunColor.G;
				b2 = sunColor.B;
				g2 -= (int)(90f * num6 * ((float)(int)sunColor.G / 255f));
				b2 -= (int)(110f * num6 * ((float)(int)sunColor.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				sunColor.R = (byte)r2;
				sunColor.G = (byte)g2;
				sunColor.B = (byte)b2;
			}
			if (info.JungleBiomeInfluence > 0f)
			{
				float num7 = info.JungleBiomeInfluence;
				if (num7 > 1f)
				{
					num7 = 1f;
				}
				int r3 = white.R;
				int num8 = white.G;
				int b3 = white.B;
				r3 -= (int)(40f * num7 * ((float)(int)white.R / 255f));
				b3 -= (int)(70f * num7 * ((float)(int)white.B / 255f));
				if (num8 > 255)
				{
					num8 = 255;
				}
				if (num8 < 15)
				{
					num8 = 15;
				}
				if (r3 > 255)
				{
					r3 = 255;
				}
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				white.R = (byte)r3;
				white.G = (byte)num8;
				white.B = (byte)b3;
				r3 = sunColor.R;
				num8 = sunColor.G;
				b3 = sunColor.B;
				r3 -= (int)(30f * num7 * ((float)(int)sunColor.R / 255f));
				b3 -= (int)(10f * num7 * ((float)(int)sunColor.B / 255f));
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (num8 < 15)
				{
					num8 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				sunColor.R = (byte)r3;
				sunColor.G = (byte)num8;
				sunColor.B = (byte)b3;
			}
			if (info.MushroomBiomeInfluence > 0f)
			{
				float mushroomBiomeInfluence = info.MushroomBiomeInfluence;
				int r4 = white.R;
				int g3 = white.G;
				int b4 = white.B;
				g3 -= (int)(250f * mushroomBiomeInfluence * ((float)(int)white.G / 255f));
				r4 -= (int)(250f * mushroomBiomeInfluence * ((float)(int)white.R / 255f));
				b4 -= (int)(250f * mushroomBiomeInfluence * ((float)(int)white.B / 255f));
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				white.R = (byte)r4;
				white.G = (byte)g3;
				white.B = (byte)b4;
				r4 = sunColor.R;
				g3 = sunColor.G;
				b4 = sunColor.B;
				g3 -= (int)(10f * mushroomBiomeInfluence * ((float)(int)sunColor.G / 255f));
				r4 -= (int)(30f * mushroomBiomeInfluence * ((float)(int)sunColor.R / 255f));
				b4 -= (int)(10f * mushroomBiomeInfluence * ((float)(int)sunColor.B / 255f));
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				sunColor.R = (byte)r4;
				sunColor.G = (byte)g3;
				sunColor.B = (byte)b4;
				r4 = moonColor.R;
				g3 = moonColor.G;
				b4 = moonColor.B;
				g3 -= (int)(140f * mushroomBiomeInfluence * ((float)(int)moonColor.R / 255f));
				r4 -= (int)(170f * mushroomBiomeInfluence * ((float)(int)moonColor.G / 255f));
				b4 -= (int)(190f * mushroomBiomeInfluence * ((float)(int)moonColor.B / 255f));
				if (r4 < 15)
				{
					r4 = 15;
				}
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (b4 < 15)
				{
					b4 = 15;
				}
				moonColor.R = (byte)r4;
				moonColor.G = (byte)g3;
				moonColor.B = (byte)b4;
			}
			byte b5 = 15;
			switch (GetMoonPhase())
			{
			case MoonPhase.Empty:
				b5 = 11;
				break;
			case MoonPhase.QuarterAtLeft:
			case MoonPhase.QuarterAtRight:
				b5 = 13;
				break;
			case MoonPhase.HalfAtLeft:
			case MoonPhase.HalfAtRight:
				b5 = 15;
				break;
			case MoonPhase.ThreeQuartersAtLeft:
			case MoonPhase.ThreeQuartersAtRight:
				b5 = 17;
				break;
			case MoonPhase.Full:
				b5 = 19;
				break;
			}
			if (white.R < b5)
			{
				white.R = b5;
			}
			if (white.G < b5)
			{
				white.G = b5;
			}
			if (white.B < b5)
			{
				white.B = b5;
			}
			if (info.BloodMoonActive)
			{
				if (white.R < 25)
				{
					white.R = 25;
				}
				if (white.G < 25)
				{
					white.G = 25;
				}
				if (white.B < 25)
				{
					white.B = 25;
				}
			}
			if (eclipse && dayTime)
			{
				float num9 = 1242f;
				eclipseLight = (float)(num / (double)num9);
				if (eclipseLight > 1f)
				{
					eclipseLight = 1f;
				}
			}
			else if (eclipseLight > 0f)
			{
				eclipseLight -= 0.01f;
				if (eclipseLight < 0f)
				{
					eclipseLight = 0f;
				}
			}
			if (eclipseLight > 0f)
			{
				float num10 = 1f - 0.925f * eclipseLight;
				float num11 = 1f - 0.96f * eclipseLight;
				float num12 = 1f - 1f * eclipseLight;
				int num13 = (int)((float)(int)white.R * num10);
				int num14 = (int)((float)(int)white.G * num11);
				int num15 = (int)((float)(int)white.B * num12);
				white.R = (byte)num13;
				white.G = (byte)num14;
				white.B = (byte)num15;
				sunColor.R = byte.MaxValue;
				sunColor.G = 127;
				sunColor.B = 67;
				if (white.R < 20)
				{
					white.R = 20;
				}
				if (white.G < 10)
				{
					white.G = 10;
				}
				if (!Lighting.NotRetro)
				{
					if (white.R < 20)
					{
						white.R = 20;
					}
					if (white.G < 14)
					{
						white.G = 14;
					}
					if (white.B < 6)
					{
						white.B = 6;
					}
				}
			}
			if (lightning > 0f)
			{
				float value = (float)(int)white.R / 255f;
				float value2 = (float)(int)white.G / 255f;
				float value3 = (float)(int)white.B / 255f;
				value = MathHelper.Lerp(value, 1f, lightning);
				value2 = MathHelper.Lerp(value2, 1f, lightning);
				value3 = MathHelper.Lerp(value3, 1f, lightning);
				white.R = (byte)(value * 255f);
				white.G = (byte)(value2 * 255f);
				white.B = (byte)(value3 * 255f);
			}
			if (!info.BloodMoonActive)
			{
				moonColor = Microsoft.Xna.Framework.Color.White;
			}
			ColorOfTheSkies = white;
		}

		private void DoLightTiles()
		{
			Vector2 vector = Camera.ScaledPosition;
			Vector2 vector2 = Camera.ScaledSize;
			if (!Lighting.UsingNewLighting)
			{
				vector = Camera.UnscaledPosition;
				vector2 = Camera.UnscaledSize;
			}
			firstTileX = (int)Math.Floor(vector.X / 16f) - 1;
			lastTileX = (int)Math.Floor((vector.X + vector2.X) / 16f) + 2;
			firstTileY = (int)Math.Floor(vector.Y / 16f) - 1;
			lastTileY = (int)Math.Floor((vector.Y + vector2.Y) / 16f) + 2;
			if (!drawSkip)
			{
				Lighting.LightTiles(firstTileX, lastTileX, firstTileY, lastTileY);
			}
		}

		private static void ClampScreenPositionToWorld()
		{
			Vector2 input = new Vector2(leftWorld + 656f, topWorld + 656f) - GameViewMatrix.Translation;
			Vector2 input2 = new Vector2(rightWorld - (float)screenWidth / GameViewMatrix.Zoom.X - 672f, bottomWorld - (float)screenHeight / GameViewMatrix.Zoom.Y - 672f) - GameViewMatrix.Translation;
			input = Utils.Round(input);
			input2 = Utils.Round(input2);
			screenPosition = Vector2.Clamp(screenPosition, input, input2);
		}

		private void DrawBG()
		{
			float num = Math.Min(PlayerInput.RealScreenHeight, LogicCheckScreenHeight);
			float num2 = screenPosition.Y + (float)(screenHeight / 2) - num / 2f;
			scAdj = (float)(worldSurface * 16.0) / (num2 + num);
			float num3 = (float)maxTilesY * 0.15f * 16f;
			num3 -= num2;
			if (num3 < 0f)
			{
				num3 = 0f;
			}
			num3 *= 0.00025f;
			float num4 = num3 * num3;
			scAdj *= 0.45f - num4;
			if (maxTilesY <= 1200)
			{
				scAdj *= -500f;
			}
			else if (maxTilesY <= 1800)
			{
				scAdj *= -300f;
			}
			else
			{
				scAdj *= -150f;
			}
			float num5 = screenHeight;
			screenOff = num5 - 600f;
			bgTopY = (int)((double)(0f - screenPosition.Y + screenOff / 2f) / (worldSurface * 16.0) * 1200.0 + 1190.0) + (int)scAdj;
			cTop = bgTopY - 50;
			if (resetClouds)
			{
				Cloud.resetClouds();
				resetClouds = false;
			}
			bgScale = 1f;
			bgWidthScaled = (int)((float)backgroundWidth[treeMntBGSet1[0]] * bgScale);
			ColorOfSurfaceBackgroundsModified = ColorOfTheSkies;
			ColorOfSurfaceBackgroundsBase = ColorOfTheSkies;
			int preferredBGStyleForPlayer = GetPreferredBGStyleForPlayer();
			int num6 = 30;
			backgroundLayerTransitionSpeed = 0.05f;
			if (preferredBGStyleForPlayer == 0)
			{
				num6 = 60;
			}
			if (bgDelay < 0)
			{
				bgDelay++;
			}
			else if (preferredBGStyleForPlayer != bgStyle)
			{
				bgDelay++;
				if (bgDelay > num6)
				{
					bgDelay = -60;
					bgStyle = preferredBGStyleForPlayer;
					if (preferredBGStyleForPlayer == 0)
					{
						bgDelay = 0;
					}
				}
			}
			else if (bgDelay > 0)
			{
				bgDelay--;
			}
			if (gameMenu)
			{
				backgroundLayerTransitionSpeed = 0.02f;
				if (!dayTime)
				{
					bgStyle = 1;
				}
				else
				{
					bgStyle = 0;
				}
				preferredBGStyleForPlayer = bgStyle;
				if (WorldGen.drunkWorldGen)
				{
					bgStyle = 9;
				}
			}
			if (instantBGTransitionCounter > 0)
			{
				instantBGTransitionCounter--;
				bgStyle = preferredBGStyleForPlayer;
				backgroundLayerTransitionSpeed = 1f;
			}
			UpdateBGVisibility_BackLayer(null, null);
			UpdateBGVisibility_FrontLayer(null, null);
			try
			{
				DrawSurfaceBG();
				if (BackgroundEnabled)
				{
					DrawUnderworldBackground(flat: false);
				}
			}
			catch (Exception ex)
			{
				if (!ignoreErrors)
				{
					throw ex;
				}
				TimeLogger.DrawException(ex);
			}
			TimeLogger.DetailedDrawTime(8);
		}

		private void UpdateBGVisibility_FrontLayer(int? targetBiomeOverride, float? transitionAmountOverride)
		{
			int value = bgStyle;
			if (targetBiomeOverride.HasValue)
			{
				value = targetBiomeOverride.Value;
			}
			float value2 = backgroundLayerTransitionSpeed;
			if (transitionAmountOverride.HasValue)
			{
				value2 = transitionAmountOverride.Value;
			}
			for (int i = 0; i < bgAlphaFrontLayer.Length; i++)
			{
				if (value == i)
				{
					bgAlphaFrontLayer[i] += value2;
					if (bgAlphaFrontLayer[i] > 1f)
					{
						bgAlphaFrontLayer[i] = 1f;
					}
				}
				else
				{
					bgAlphaFrontLayer[i] -= value2;
					if (bgAlphaFrontLayer[i] < 0f)
					{
						bgAlphaFrontLayer[i] = 0f;
					}
				}
			}
		}

		private void UpdateBGVisibility_BackLayer(int? targetBiomeOverride, float? transitionAmountOverride)
		{
			int value = bgStyle;
			if (targetBiomeOverride.HasValue)
			{
				value = targetBiomeOverride.Value;
			}
			_ = backgroundLayerTransitionSpeed;
			if (transitionAmountOverride.HasValue)
			{
				_ = transitionAmountOverride.Value;
			}
			switch (value)
			{
			case 2:
				DrawBG_ModifyBGFarBackLayerAlpha(1, null, transitionAmountOverride);
				break;
			case 3:
				if (WorldGen.jungleBG == 5)
				{
					DrawBG_ModifyBGFarBackLayerAlpha(13, null, transitionAmountOverride);
				}
				else
				{
					DrawBG_ModifyBGFarBackLayerAlpha(0, null, transitionAmountOverride);
				}
				break;
			case 1:
			case 5:
				DrawBG_ModifyBGFarBackLayerAlpha(2, null, transitionAmountOverride);
				break;
			case 6:
				if (WorldGen.hallowBG == 3)
				{
					DrawBG_ModifyBGFarBackLayerAlpha(6, null, transitionAmountOverride);
				}
				else
				{
					DrawBG_ModifyBGFarBackLayerAlpha(2, null, transitionAmountOverride);
				}
				break;
			case 4:
				DrawBG_ModifyBGFarBackLayerAlpha(3, null, transitionAmountOverride);
				break;
			case 7:
				DrawBG_ModifyBGFarBackLayerAlpha(4, null, transitionAmountOverride);
				break;
			case 8:
				DrawBG_ModifyBGFarBackLayerAlpha(5, null, transitionAmountOverride);
				break;
			case 9:
				DrawBG_ModifyBGFarBackLayerAlpha(0, 6, transitionAmountOverride);
				break;
			case 10:
			case 11:
			case 12:
				DrawBG_ModifyBGFarBackLayerAlpha(value, null, transitionAmountOverride);
				break;
			default:
				DrawBG_ModifyBGFarBackLayerAlpha(0, null, transitionAmountOverride);
				break;
			}
		}

		public static int GetPreferredBGStyleForPlayer()
		{
			int num = bgStyle;
			int num2 = (int)((screenPosition.X + (float)(screenWidth / 2)) / 16f);
			if (WorldGen.oceanDepths((int)(screenPosition.X + (float)(screenWidth / 2)) / 16, (int)(screenPosition.Y + (float)(screenHeight / 2)) / 16))
			{
				num = (player[myPlayer].ZoneHallow ? 6 : (player[myPlayer].ZoneCorrupt ? ((SceneMetrics.BloodTileCount <= SceneMetrics.EvilTileCount) ? 1 : 8) : (player[myPlayer].ZoneCrimson ? 8 : ((SceneMetrics.HoneyBlockCount <= 400) ? 4 : 3))));
			}
			else if (player[myPlayer].ZoneGlowshroom)
			{
				num = 9;
			}
			else if (player[myPlayer].ZoneDesert)
			{
				num = (player[myPlayer].ZoneCorrupt ? 5 : (player[myPlayer].ZoneCrimson ? 5 : ((!player[myPlayer].ZoneHallow) ? 2 : 5)));
			}
			else if (player[myPlayer].ZoneHallow)
			{
				num = 6;
			}
			else if (player[myPlayer].ZoneCorrupt)
			{
				num = ((SceneMetrics.BloodTileCount <= SceneMetrics.EvilTileCount) ? 1 : 8);
			}
			else if (player[myPlayer].ZoneCrimson)
			{
				num = 8;
			}
			else if (player[myPlayer].ZoneJungle)
			{
				num = 3;
			}
			else if (player[myPlayer].ZoneSnow)
			{
				num = 7;
			}
			else
			{
				num = 0;
				if (num2 >= treeX[0])
				{
					if (WorldGen.treeBG1 != WorldGen.treeBG2 && num2 < treeX[1])
					{
						num = 10;
					}
					else if (WorldGen.treeBG1 != WorldGen.treeBG3 && num2 < treeX[2])
					{
						num = 11;
					}
					else if (WorldGen.treeBG1 != WorldGen.treeBG4)
					{
						num = 12;
					}
				}
			}
			return num;
		}

		private void DrawBG_ModifyBGFarBackLayerAlpha(int desiredBG, int? desiredBG2 = null, float? transitionAmountOverride = null)
		{
			float value = backgroundLayerTransitionSpeed;
			if (transitionAmountOverride.HasValue)
			{
				value = transitionAmountOverride.Value;
			}
			for (int i = 0; i < bgAlphaFarBackLayer.Length; i++)
			{
				bool flag = desiredBG == i;
				flag |= desiredBG2.HasValue && desiredBG2 == i;
				bgAlphaFarBackLayer[i] = MathHelper.Clamp(bgAlphaFarBackLayer[i] + (flag ? value : (0f - value)), 0f, 1f);
			}
		}

		public void DrawInfernoRings()
		{
			for (int i = 0; i < 255; i++)
			{
				if (!player[i].active || player[i].outOfRange || !player[i].inferno || player[i].dead)
				{
					continue;
				}
				LoadFlameRing();
				float num = 1f;
				float num2 = 0.1f;
				float num3 = 0.9f;
				if (!gamePaused && base.IsActive)
				{
					player[i].flameRingScale += 0.004f;
				}
				if (player[i].flameRingScale < 1f)
				{
					num = player[i].flameRingScale;
				}
				else
				{
					player[i].flameRingScale = 0.8f;
					num = player[i].flameRingScale;
				}
				if (!gamePaused && base.IsActive)
				{
					player[i].flameRingRot += 0.05f;
				}
				if (player[i].flameRingRot > (float)Math.PI * 2f)
				{
					player[i].flameRingRot -= (float)Math.PI * 2f;
				}
				if (player[i].flameRingRot < (float)Math.PI * -2f)
				{
					player[i].flameRingRot += (float)Math.PI * 2f;
				}
				for (int j = 0; j < 3; j++)
				{
					float num4 = num + num2 * (float)j;
					if (num4 > 1f)
					{
						num4 -= num2 * 2f;
					}
					float num5 = MathHelper.Lerp(0.8f, 0f, Math.Abs(num4 - num3) * 10f);
					spriteBatch.Draw(TextureAssets.FlameRing.Value, player[i].Center - screenPosition, new Microsoft.Xna.Framework.Rectangle(0, 400 * j, 400, 400), new Microsoft.Xna.Framework.Color(num5, num5, num5, num5 / 2f), player[i].flameRingRot + (float)Math.PI / 3f * (float)j, new Vector2(200f, 200f), num4, SpriteEffects.None, 0f);
				}
			}
		}

		private static void UpdateInvasion()
		{
			if (invasionType <= 0)
			{
				return;
			}
			if (invasionSize <= 0)
			{
				if (invasionType == 1)
				{
					NPC.SetEventFlagCleared(NPC.downedGoblins, 0);
					if (netMode == 2)
					{
						NetMessage.SendData(7);
					}
					AchievementsHelper.NotifyProgressionEvent(10);
				}
				else if (invasionType == 2)
				{
					NPC.SetEventFlagCleared(NPC.downedFrost, 1);
					AchievementsHelper.NotifyProgressionEvent(12);
				}
				else if (invasionType == 3)
				{
					NPC.SetEventFlagCleared(NPC.downedPirates, 2);
					AchievementsHelper.NotifyProgressionEvent(11);
				}
				else if (invasionType == 4)
				{
					NPC.SetEventFlagCleared(NPC.downedMartians, 3);
					AchievementsHelper.NotifyProgressionEvent(13);
				}
				InvasionWarning();
				invasionType = 0;
				invasionDelay = 0;
			}
			if (invasionX == (double)spawnTileX)
			{
				return;
			}
			float num = dayRate;
			if (invasionX > (double)spawnTileX)
			{
				invasionX -= num;
				if (invasionX <= (double)spawnTileX)
				{
					invasionX = spawnTileX;
					InvasionWarning();
				}
				else if (num > 0f)
				{
					invasionWarn--;
				}
			}
			else if (invasionX < (double)spawnTileX)
			{
				invasionX += num;
				if (invasionX >= (double)spawnTileX)
				{
					invasionX = spawnTileX;
					InvasionWarning();
				}
				else if (num > 0f)
				{
					invasionWarn--;
				}
			}
			if (invasionWarn <= 0)
			{
				invasionWarn = 3600;
				InvasionWarning();
			}
		}

		private static void InvasionWarning()
		{
			LocalizedText empty = LocalizedText.Empty;
			empty = ((invasionSize <= 0) ? ((invasionType == 2) ? Lang.misc[4] : ((invasionType == 3) ? Lang.misc[24] : ((invasionType != 4) ? (empty = Lang.misc[0]) : Lang.misc[42]))) : ((invasionX < (double)spawnTileX) ? ((invasionType == 2) ? Lang.misc[5] : ((invasionType == 3) ? Lang.misc[25] : ((invasionType != 4) ? (empty = Lang.misc[1]) : LocalizedText.Empty))) : ((invasionX > (double)spawnTileX) ? ((invasionType == 2) ? Lang.misc[6] : ((invasionType == 3) ? Lang.misc[26] : ((invasionType != 4) ? (empty = Lang.misc[2]) : LocalizedText.Empty))) : ((invasionType == 2) ? Lang.misc[7] : ((invasionType == 3) ? Lang.misc[27] : ((invasionType != 4) ? (empty = Lang.misc[3]) : Lang.misc[41]))))));
			if (netMode == 0)
			{
				NewText(empty.ToString(), 175, 75);
			}
			else if (netMode == 2 && empty.Value != "")
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(empty.Key), new Microsoft.Xna.Framework.Color(175, 75, 255));
			}
		}

		public static bool CanStartInvasion(int type = 1, bool ignoreDelay = false)
		{
			if (invasionType != 0)
			{
				return false;
			}
			if (invasionDelay != 0 && !ignoreDelay)
			{
				return false;
			}
			int num = 0;
			for (int i = 0; i < 255; i++)
			{
				if (player[i].active && player[i].statLifeMax >= 200)
				{
					num++;
				}
			}
			return num > 0;
		}

		public static void StartInvasion(int type = 1)
		{
			if (invasionType != 0 && invasionSize == 0)
			{
				invasionType = 0;
			}
			if (invasionType != 0)
			{
				return;
			}
			int num = 0;
			for (int i = 0; i < 255; i++)
			{
				if (player[i].active && player[i].statLifeMax >= 200)
				{
					num++;
				}
			}
			if (num > 0)
			{
				invasionType = type;
				invasionSize = 80 + 40 * num;
				if (type == 3)
				{
					invasionSize += 40 + 20 * num;
				}
				if (type == 4)
				{
					invasionSize = 160 + 40 * num;
				}
				invasionSizeStart = invasionSize;
				invasionProgress = 0;
				invasionProgressIcon = type + 3;
				invasionProgressWave = 0;
				invasionProgressMax = invasionSizeStart;
				invasionWarn = 0;
				if (type == 4)
				{
					invasionX = spawnTileX - 1;
					invasionWarn = 2;
				}
				else if (rand.Next(2) == 0)
				{
					invasionX = 0.0;
				}
				else
				{
					invasionX = maxTilesX;
				}
			}
		}

		public static void FakeLoadInvasionStart()
		{
			int num = 0;
			int num2 = 0;
			switch (invasionType)
			{
			case 1:
			case 2:
				num = 80;
				num2 = 40;
				break;
			case 3:
				num = 120;
				num2 = 60;
				break;
			case 4:
				num = 160;
				num2 = 40;
				break;
			}
			int num3 = (int)Math.Ceiling((float)(invasionSize - num) / (float)num2);
			invasionSizeStart = num;
			if (num3 > 0)
			{
				invasionSizeStart += num3 * num2;
			}
		}

		private static void UpdateClient()
		{
			if (myPlayer == 255)
			{
				Netplay.Disconnect = true;
			}
			netPlayCounter++;
			if (netPlayCounter > 3600)
			{
				netPlayCounter = 0;
			}
			if (netPlayCounter % 420 == 0)
			{
				NetMessage.SendData(13, -1, -1, null, myPlayer);
			}
			if (netPlayCounter % 900 == 0)
			{
				NetMessage.SendData(36, -1, -1, null, myPlayer);
				NetMessage.SendData(16, -1, -1, null, myPlayer);
				NetMessage.SendData(40, -1, -1, null, myPlayer);
			}
			if (Netplay.Connection.IsActive)
			{
				Netplay.Connection.TimeOutTimer++;
				if (!stopTimeOuts && Netplay.Connection.TimeOutTimer > 7200)
				{
					statusText = Lang.inter[43].Value;
					Netplay.Disconnect = true;
				}
			}
			for (int i = 0; i < 400; i++)
			{
				if (item[i].active && item[i].playerIndexTheItemIsReservedFor == myPlayer)
				{
					item[i].FindOwner(i);
				}
			}
		}

		private static void UpdateServer()
		{
			netPlayCounter++;
			if (netPlayCounter % 3600 == 0)
			{
				NetMessage.SendData(7);
				netPlayCounter = 0;
			}
			for (int i = 0; i < maxNetPlayers; i++)
			{
				if (player[i].active && Netplay.Clients[i].IsActive)
				{
					Netplay.Clients[i].SpamUpdate();
				}
			}
			if (Math.IEEERemainder(netPlayCounter, 900.0) == 0.0)
			{
				bool flag = true;
				int num = lastItemUpdate;
				int num2 = 0;
				while (flag)
				{
					num++;
					if (num >= 400)
					{
						num = 0;
					}
					num2++;
					if (!Main.item[num].active || Main.item[num].playerIndexTheItemIsReservedFor == 255)
					{
						NetMessage.SendData(21, -1, -1, null, num);
					}
					if (num2 >= maxItemUpdates || num == lastItemUpdate)
					{
						flag = false;
					}
				}
				lastItemUpdate = num;
			}
			for (int j = 0; j < 400; j++)
			{
				Item item = Main.item[j];
				if (item.active && (item.playerIndexTheItemIsReservedFor == 255 || !player[item.playerIndexTheItemIsReservedFor].active))
				{
					item.FindOwner(j);
				}
			}
			for (int k = 0; k < 255; k++)
			{
				if (Netplay.Clients[k].IsActive)
				{
					Netplay.Clients[k].TimeOutTimer++;
					if (Netplay.Clients[k].State == 0)
					{
						Netplay.Clients[k].TimeOutTimer += 3;
					}
					if (!stopTimeOuts && Netplay.Clients[k].TimeOutTimer > 7200)
					{
						Netplay.Clients[k].PendingTermination = true;
						Netplay.Clients[k].PendingTerminationApproved = true;
					}
				}
				if (player[k].active)
				{
					RemoteClient.CheckSection(k, player[k].position);
				}
			}
		}

		public static void NewText(string newText, byte R = byte.MaxValue, byte G = byte.MaxValue, byte B = byte.MaxValue)
		{
			chatMonitor.NewText(newText, R, G, B);
			SoundEngine.PlaySound(12);
		}

		public static void NewTextMultiline(string text, bool force = false, Microsoft.Xna.Framework.Color c = default(Microsoft.Xna.Framework.Color), int WidthLimit = -1)
		{
			chatMonitor.NewTextMultiline(text, force, c, WidthLimit);
			SoundEngine.PlaySound(12);
		}

		public static void StopRain()
		{
			rainTime = 0;
			raining = false;
			maxRaining = 0f;
		}

		public static void StartRain()
		{
			int num = 86400;
			int num2 = num / 24;
			int num3 = rand.Next(num2 * 8, num);
			if (rand.Next(3) == 0)
			{
				num3 += rand.Next(0, num2);
			}
			if (rand.Next(4) == 0)
			{
				num3 += rand.Next(0, num2 * 2);
			}
			if (rand.Next(5) == 0)
			{
				num3 += rand.Next(0, num2 * 2);
			}
			if (rand.Next(6) == 0)
			{
				num3 += rand.Next(0, num2 * 3);
			}
			if (rand.Next(7) == 0)
			{
				num3 += rand.Next(0, num2 * 4);
			}
			if (rand.Next(8) == 0)
			{
				num3 += rand.Next(0, num2 * 5);
			}
			float num4 = 1f;
			if (rand.Next(2) == 0)
			{
				num4 += 0.05f;
			}
			if (rand.Next(3) == 0)
			{
				num4 += 0.1f;
			}
			if (rand.Next(4) == 0)
			{
				num4 += 0.15f;
			}
			if (rand.Next(5) == 0)
			{
				num4 += 0.2f;
			}
			rainTime = (int)((float)num3 * num4);
			ChangeRain();
			raining = true;
		}

		private static void ChangeRain()
		{
			float num = maxRaining;
			num = (maxRaining = ((cloudBGActive >= 1f || (double)numClouds > 150.0) ? ((rand.Next(3) != 0) ? ((float)rand.Next(40, 91) * 0.01f) : ((float)rand.Next(20, 91) * 0.01f)) : (((double)numClouds > 100.0) ? ((rand.Next(3) != 0) ? ((float)rand.Next(20, 61) * 0.01f) : ((float)rand.Next(10, 71) * 0.01f)) : ((rand.Next(3) != 0) ? ((float)rand.Next(5, 31) * 0.01f) : ((float)rand.Next(5, 41) * 0.01f)))));
		}

		public static void StartSlimeRain(bool announce = true)
		{
			if (slimeRain)
			{
				return;
			}
			if (netMode == 1)
			{
				slimeRainTime = 54000.0;
				slimeRain = true;
				SkyManager.Instance.Activate("Slime", default(Vector2));
			}
			else
			{
				if (raining)
				{
					return;
				}
				if (slimeRainTime <= 0.0)
				{
					slimeRainTime = rand.Next(32400, 54000);
				}
				slimeRain = true;
				slimeRainKillCount = 0;
				if (netMode == 0)
				{
					SkyManager.Instance.Activate("Slime", default(Vector2));
					if (announce)
					{
						slimeWarningTime = slimeWarningDelay;
					}
				}
				else if (announce)
				{
					slimeWarningTime = slimeWarningDelay;
					NetMessage.SendData(7);
				}
			}
		}

		public static void StopSlimeRain(bool announce = true)
		{
			if (!slimeRain)
			{
				return;
			}
			if (netMode == 1)
			{
				slimeRainTime = 0.0;
				slimeRain = false;
				SkyManager.Instance.Deactivate("Slime");
				return;
			}
			int num = 86400 * 7;
			if (hardMode)
			{
				num *= 2;
			}
			slimeRainTime = -rand.Next(3024, 6048) * 100;
			slimeRain = false;
			if (netMode == 0)
			{
				if (announce)
				{
					slimeWarningTime = slimeWarningDelay;
				}
				SkyManager.Instance.Deactivate("Slime");
			}
			else if (announce)
			{
				slimeWarningTime = slimeWarningDelay;
				NetMessage.SendData(7);
			}
		}

		private static void UpdateTime()
		{
			if (LanternNight.LanternsUp)
			{
				cloudBGActive = 0f;
				if (numClouds > 30)
				{
					numClouds = 30;
				}
			}
			if (ladyBugRainBoost > 0)
			{
				ladyBugRainBoost -= dayRate;
			}
			if (pumpkinMoon)
			{
				bloodMoon = false;
				snowMoon = false;
			}
			if (snowMoon)
			{
				bloodMoon = false;
			}
			if ((netMode != 1 && !gameMenu) || netMode == 2)
			{
				if (slimeRainTime > 0.0)
				{
					slimeRainTime -= dayRate;
					if (slimeRainTime <= 0.0)
					{
						StopSlimeRain();
					}
				}
				else if (slimeRainTime < 0.0)
				{
					slimeRainTime += dayRate;
					if (slimeRainTime > 0.0)
					{
						slimeRainTime = 0.0;
					}
				}
				if (raining)
				{
					if (!CreativePowerManager.Instance.GetPower<CreativePowers.FreezeRainPower>().Enabled)
					{
						if (LanternNight.LanternsUp)
						{
							StopRain();
						}
						else
						{
							rainTime -= dayRate;
							if (dayRate > 0)
							{
								int num = 86400 / dayRate / 24;
								if (rainTime <= 0)
								{
									StopRain();
								}
								else if (rand.Next(num * 2) == 0)
								{
									ChangeRain();
								}
							}
						}
					}
				}
				else if (!slimeRain && !LanternNight.LanternsUp && !LanternNight.NextNightIsLanternNight)
				{
					int num2 = 86400;
					num2 /= ((dayRate == 0) ? 1 : dayRate);
					if (!CreativePowerManager.Instance.GetPower<CreativePowers.FreezeRainPower>().Enabled)
					{
						if (rand.Next((int)((double)num2 * 5.75)) == 0)
						{
							StartRain();
						}
						else if (cloudBGActive >= 1f && rand.Next((int)((double)num2 * 4.25)) == 0)
						{
							StartRain();
						}
						else if (ladyBugRainBoost > 0 && rand.Next(num2) == 0)
						{
							StartRain();
						}
					}
					if (!raining && !NPC.BusyWithAnyInvasionOfSorts())
					{
						int num3 = (int)(1728000.0 / (double)dayRate);
						if (!NPC.downedSlimeKing)
						{
							num3 /= 2;
						}
						if (hardMode)
						{
							num3 = (int)((double)num3 * 1.5);
						}
						bool flag = false;
						for (int i = 0; i < 255; i++)
						{
							if (player[i].active && player[i].statLifeMax > 140 && player[i].statDefense > 8)
							{
								flag = true;
							}
						}
						if (!flag)
						{
							num3 *= 5;
						}
						if (dayRate > 0 && num3 > 0 && (flag || expertMode) && rand.Next(num3) == 0)
						{
							StartSlimeRain();
						}
					}
				}
			}
			if (maxRaining != oldMaxRaining)
			{
				if (netMode == 2)
				{
					NetMessage.SendData(7);
				}
				oldMaxRaining = maxRaining;
			}
			UpdateTimeRate();
			time += dayRate;
			CultistRitual.UpdateTime();
			BirthdayParty.UpdateTime();
			LanternNight.UpdateTime();
			Sandstorm.UpdateTime();
			DD2Event.UpdateTime();
			WorldGen.mysticLogsEvent.UpdateTime();
			PylonSystem.Update();
			if (NPC.MoonLordCountdown > 0)
			{
				float num4 = MathHelper.Clamp((float)Math.Sin((float)NPC.MoonLordCountdown / 60f * 0.5f) * 2f, 0f, 1f);
				num4 *= 0.75f - 0.5f * ((float)NPC.MoonLordCountdown / 3600f);
				if (!GameManager.Graphics.Effects.Filters.Scene["MoonLordShake"].IsActive())
				{
					GameManager.Graphics.Effects.Filters.Scene.Activate("MoonLordShake", player[myPlayer].position);
				}
				GameManager.Graphics.Effects.Filters.Scene["MoonLordShake"].GetShader().UseIntensity(num4);
			}
			else if (GameManager.Graphics.Effects.Filters.Scene["MoonLordShake"].IsActive())
			{
				GameManager.Graphics.Effects.Filters.Scene.Deactivate("MoonLordShake");
			}
			if (NPC.MoonLordCountdown > 0)
			{
				NPC.MoonLordCountdown--;
				if (NPC.MoonLordCountdown <= 0 && netMode != 1)
				{
					NPC.SpawnOnPlayer(Player.FindClosest(new Vector2(maxTilesX / 2, (float)worldSurface / 2f) * 16f, 0, 0), 398);
				}
			}
			if (NPC.taxCollector && netMode != 2 && !gameMenu)
			{
				player[myPlayer].taxTimer += dayRate;
				if (player[myPlayer].taxTimer >= Player.taxRate)
				{
					player[myPlayer].taxTimer -= Player.taxRate;
					player[myPlayer].CollectTaxes();
				}
			}
			if (netMode != 1)
			{
				UpdateSlimeRainWarning();
			}
			if (netMode != 1)
			{
				if (NPC.travelNPC)
				{
					if (!dayTime || time > 48600.0)
					{
						WorldGen.UnspawnTravelNPC();
					}
				}
				else if (!fastForwardTime && dayTime && time < 27000.0)
				{
					int num5 = (int)(27000.0 / (double)dayRate);
					num5 *= 4;
					if (rand.Next(num5) == 0)
					{
						int num6 = 0;
						for (int j = 0; j < 200; j++)
						{
							if (npc[j].active && npc[j].townNPC && npc[j].type != 37 && npc[j].type != 453)
							{
								num6++;
							}
						}
						if (num6 >= 2)
						{
							WorldGen.SpawnTravelNPC();
						}
					}
				}
				NPC.travelNPC = false;
			}
			bool stopEvents = ShouldNormalEventsBeAbleToStart();
			if (!dayTime)
			{
				eclipse = false;
				if (!fastForwardTime && !stopEvents)
				{
					if (WorldGen.spawnEye && netMode != 1 && time > 4860.0)
					{
						for (int k = 0; k < 255; k++)
						{
							if (player[k].active && !player[k].dead && (double)player[k].position.Y < worldSurface * 16.0)
							{
								NPC.SpawnOnPlayer(k, 4);
								WorldGen.spawnEye = false;
								break;
							}
						}
					}
					if (WorldGen.spawnHardBoss > 0 && netMode != 1 && time > 4860.0)
					{
						bool flag2 = false;
						for (int l = 0; l < 200; l++)
						{
							if (npc[l].active && npc[l].boss)
							{
								flag2 = true;
							}
						}
						if (!flag2)
						{
							for (int m = 0; m < 255; m++)
							{
								if (player[m].active && !player[m].dead && (double)player[m].position.Y < worldSurface * 16.0)
								{
									if (WorldGen.spawnHardBoss == 1)
									{
										NPC.SpawnOnPlayer(m, 134);
									}
									else if (WorldGen.spawnHardBoss == 2)
									{
										NPC.SpawnOnPlayer(m, 125);
										NPC.SpawnOnPlayer(m, 126);
									}
									else if (WorldGen.spawnHardBoss == 3)
									{
										NPC.SpawnOnPlayer(m, 127);
									}
									break;
								}
							}
						}
						WorldGen.spawnHardBoss = 0;
					}
				}
				if (time > 32400.0)
				{
					UpdateTime_StartDay(stopEvents);
				}
				HandleMeteorFall();
			}
			else
			{
				WorldGen.spawnHardBoss = 0;
				WorldGen.spawnEye = false;
				bloodMoon = false;
				stopMoonEvent();
				if (time > 54000.0)
				{
					UpdateTime_StartNight(stopEvents);
				}
				UpdateTime_SpawnTownNPCs();
			}
		}

		public static void SkipToTime(int timeToSet, bool setIsDayTime)
		{
			_ = time;
			_ = dayTime;
			while (setIsDayTime != dayTime)
			{
				bool stopEvents = ShouldNormalEventsBeAbleToStart();
				if (dayTime)
				{
					UpdateTime_StartNight(stopEvents);
				}
				else
				{
					UpdateTime_StartDay(stopEvents);
				}
			}
			time = timeToSet;
			if (netMode == 2)
			{
				NetMessage.TrySendData(7);
			}
		}

		public static bool ShouldNormalEventsBeAbleToStart()
		{
			if (!NPC.LunarApocalypseIsUp && !NPC.AnyNPCs(398) && NPC.MoonLordCountdown <= 0)
			{
				return LanternNight.LanternsUp;
			}
			return true;
		}

		public static void UpdateTime_StartNight(bool stopEvents)
		{
			NPC.ResetBadgerHatTime();
			NPC.freeCake = false;
			Star.NightSetup();
			NPC.setFireFlyChance();
			BirthdayParty.CheckNight();
			LanternNight.CheckNight();
			WorldGen.mysticLogsEvent.StartNight();
			WorldGen.prioritizedTownNPCType = 0;
			checkForSpawns = 0;
			if (rand.Next(50) == 0 && netMode != 1 && NPC.downedBoss2)
			{
				WorldGen.spawnMeteor = true;
			}
			if (LanternNight.LanternsUp)
			{
				stopEvents = true;
			}
			if (eclipse && netMode != 1)
			{
				AchievementsHelper.NotifyProgressionEvent(3);
			}
			eclipse = false;
			if (netMode != 1)
			{
				AchievementsHelper.NotifyProgressionEvent(0);
			}
			if (!fastForwardTime && !stopEvents)
			{
				if (!NPC.downedBoss1 && netMode != 1)
				{
					bool flag = false;
					for (int i = 0; i < 255; i++)
					{
						if (player[i].active && player[i].statLifeMax >= 200 && player[i].statDefense > 10)
						{
							flag = true;
							break;
						}
					}
					if (flag && rand.Next(3) == 0)
					{
						int num = 0;
						for (int j = 0; j < 200; j++)
						{
							if (npc[j].active && npc[j].townNPC)
							{
								num++;
							}
						}
						if (num >= 4)
						{
							WorldGen.spawnEye = true;
							if (netMode == 0)
							{
								NewText(Lang.misc[9].Value, 50, byte.MaxValue, 130);
							}
							else if (netMode == 2)
							{
								ChatHelper.BroadcastChatMessage(Lang.misc[9].ToNetworkText(), new Microsoft.Xna.Framework.Color(50, 255, 130));
							}
						}
					}
				}
				if (netMode != 1 && !pumpkinMoon && !DD2Event.Ongoing && !snowMoon && WorldGen.altarCount > 0 && hardMode && !WorldGen.spawnEye && rand.Next(10) == 0)
				{
					bool flag2 = false;
					for (int k = 0; k < 200; k++)
					{
						if (npc[k].active && npc[k].boss)
						{
							flag2 = true;
						}
					}
					if (!flag2 && (!NPC.downedMechBoss1 || !NPC.downedMechBoss2 || !NPC.downedMechBoss3))
					{
						for (int l = 0; l < 1000; l++)
						{
							int num2 = rand.Next(3) + 1;
							if (num2 == 1 && !NPC.downedMechBoss1)
							{
								WorldGen.spawnHardBoss = num2;
								if (netMode == 0)
								{
									NewText(Lang.misc[28].Value, 50, byte.MaxValue, 130);
								}
								else if (netMode == 2)
								{
									ChatHelper.BroadcastChatMessage(Lang.misc[28].ToNetworkText(), new Microsoft.Xna.Framework.Color(50, 255, 130));
								}
								break;
							}
							if (num2 == 2 && !NPC.downedMechBoss2)
							{
								WorldGen.spawnHardBoss = num2;
								if (netMode == 0)
								{
									NewText(Lang.misc[29].Value, 50, byte.MaxValue, 130);
								}
								else if (netMode == 2)
								{
									ChatHelper.BroadcastChatMessage(Lang.misc[29].ToNetworkText(), new Microsoft.Xna.Framework.Color(50, 255, 130));
								}
								break;
							}
							if (num2 == 3 && !NPC.downedMechBoss3)
							{
								WorldGen.spawnHardBoss = num2;
								if (netMode == 0)
								{
									NewText(Lang.misc[30].Value, 50, byte.MaxValue, 130);
								}
								else if (netMode == 2)
								{
									ChatHelper.BroadcastChatMessage(Lang.misc[30].ToNetworkText(), new Microsoft.Xna.Framework.Color(50, 255, 130));
								}
								break;
							}
						}
					}
				}
				if (!WorldGen.spawnEye && moonPhase != 4 && rand.Next(9) == 0 && netMode != 1)
				{
					for (int m = 0; m < 255; m++)
					{
						if (player[m].active && player[m].statLifeMax > 120)
						{
							bloodMoon = true;
							break;
						}
					}
					if (bloodMoon)
					{
						AchievementsHelper.NotifyProgressionEvent(4);
						if (netMode == 0)
						{
							NewText(Lang.misc[8].Value, 50, byte.MaxValue, 130);
						}
						else if (netMode == 2)
						{
							ChatHelper.BroadcastChatMessage(Lang.misc[8].ToNetworkText(), new Microsoft.Xna.Framework.Color(50, 255, 130));
						}
					}
				}
			}
			time = 0.0;
			dayTime = false;
			if (netMode == 2)
			{
				NetMessage.SendData(7);
			}
		}

		public static void UpdateTime_StartDay(bool stopEvents)
		{
			WorldGen.numTreeShakes = 0;
			if (fastForwardTime)
			{
				fastForwardTime = false;
				UpdateTimeRate();
			}
			AnglerQuestSwap();
			BirthdayParty.CheckMorning();
			LanternNight.CheckMorning();
			if (invasionDelay > 0)
			{
				invasionDelay--;
			}
			WorldGen.prioritizedTownNPCType = 0;
			checkForSpawns = 0;
			time = 0.0;
			if (bloodMoon && netMode != 1)
			{
				AchievementsHelper.NotifyProgressionEvent(5);
			}
			bloodMoon = false;
			CheckForMoonEventsStartingTemporarySeasons();
			checkXMas();
			checkHalloween();
			stopMoonEvent();
			dayTime = true;
			if (sundialCooldown > 0)
			{
				sundialCooldown--;
			}
			moonPhase++;
			if (moonPhase >= 8)
			{
				moonPhase = 0;
			}
			if (drunkWorld && netMode != 1)
			{
				WorldGen.crimson = !WorldGen.crimson;
			}
			if (netMode == 2)
			{
				NetMessage.SendData(7);
			}
			if (netMode == 1)
			{
				return;
			}
			AchievementsHelper.NotifyProgressionEvent(1);
			if (stopEvents)
			{
				return;
			}
			if (hardMode && NPC.downedMechBossAny && rand.Next(20) == 0)
			{
				eclipse = true;
				AchievementsHelper.NotifyProgressionEvent(2);
				if (eclipse)
				{
					if (netMode == 0)
					{
						NewText(Lang.misc[20].Value, 50, byte.MaxValue, 130);
					}
					else if (netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(Lang.misc[20].ToNetworkText(), new Microsoft.Xna.Framework.Color(50, 255, 130));
					}
				}
				if (netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			else
			{
				if (snowMoon || pumpkinMoon || DD2Event.Ongoing)
				{
					return;
				}
				if (WorldGen.shadowOrbSmashed)
				{
					if (!NPC.downedGoblins)
					{
						if (rand.Next(3) == 0)
						{
							StartInvasion();
						}
					}
					else if ((hardMode && rand.Next(60) == 0) || (!hardMode && rand.Next(30) == 0))
					{
						StartInvasion();
					}
				}
				if (invasionType == 0 && hardMode && WorldGen.altarCount > 0 && ((NPC.downedPirates && rand.Next(60) == 0) || (!NPC.downedPirates && rand.Next(30) == 0)))
				{
					StartInvasion(3);
				}
			}
		}

		private static void HandleMeteorFall()
		{
			if (netMode != 1 && WorldGen.spawnMeteor)
			{
				if (time < 15000.0)
				{
					_canShowMeteorFall = true;
				}
				else
				{
					if (_canShowMeteorFall && time <= 16200.0)
					{
						AmbienceServer.ForceEntitySpawn(new AmbienceServer.AmbienceSpawnInfo
						{
							skyEntityType = SkyEntityType.Meteor,
							targetPlayer = -1
						});
					}
					_canShowMeteorFall = false;
				}
			}
			if (time > 16200.0 && WorldGen.spawnMeteor)
			{
				WorldGen.spawnMeteor = false;
				WorldGen.dropMeteor();
			}
		}

		private static void UpdateSlimeRainWarning()
		{
			if (slimeWarningTime <= 0)
			{
				return;
			}
			slimeWarningTime--;
			if (slimeWarningTime > 0)
			{
				return;
			}
			if (netMode == 0)
			{
				if (slimeRainTime > 0.0)
				{
					NewText(Lang.gen[74].Value, 50, byte.MaxValue, 130);
				}
				else
				{
					NewText(Lang.gen[75].Value, 50, byte.MaxValue, 130);
				}
			}
			else if (slimeRainTime > 0.0)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.gen[74].Key), new Microsoft.Xna.Framework.Color(50, 255, 130));
			}
			else
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.gen[75].Key), new Microsoft.Xna.Framework.Color(50, 255, 130));
			}
		}

		public static BestiaryUnlockProgressReport GetBestiaryProgressReport()
		{
			float num = 0f;
			int num2 = 0;
			List<BestiaryEntry> entries = BestiaryDB.Entries;
			for (int i = 0; i < entries.Count; i++)
			{
				int num3 = ((entries[i].UIInfoProvider.GetEntryUICollectionInfo().UnlockState > BestiaryEntryUnlockState.NotKnownAtAll_0) ? 1 : 0);
				num2++;
				num += (float)num3;
			}
			BestiaryUnlockProgressReport result = default(BestiaryUnlockProgressReport);
			result.EntriesTotal = num2;
			result.CompletionAmountTotal = num;
			return result;
		}

		private static void UpdateTime_SpawnTownNPCs()
		{
			int worldUpdateRate = WorldGen.GetWorldUpdateRate();
			if (netMode == 1 || worldUpdateRate <= 0)
			{
				return;
			}
			checkForSpawns++;
			if (checkForSpawns < 7200 / worldUpdateRate)
			{
				return;
			}
			checkForSpawns = 0;
			int num = 0;
			for (int i = 0; i < 255; i++)
			{
				if (player[i].active)
				{
					num++;
				}
			}
			for (int j = 0; j < 663; j++)
			{
				townNPCCanSpawn[j] = false;
			}
			WorldGen.prioritizedTownNPCType = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			int num5 = 0;
			int num6 = 0;
			int num7 = 0;
			int num8 = 0;
			int num9 = 0;
			int num10 = 0;
			int num11 = 0;
			int num12 = 0;
			int num13 = 0;
			int num14 = 0;
			int num15 = 0;
			int num16 = 0;
			int num17 = 0;
			int num18 = 0;
			int num19 = 0;
			int num20 = 0;
			int num21 = 0;
			int num22 = 0;
			int num23 = 0;
			int num24 = 0;
			int num25 = 0;
			int num26 = 0;
			int num27 = 0;
			int num28 = 0;
			int num29 = 0;
			int num30 = 0;
			int num31 = 0;
			for (int k = 0; k < 200; k++)
			{
				if (npc[k].active && npc[k].townNPC)
				{
					if (npc[k].type != 368 && npc[k].type != 37 && npc[k].type != 453 && !npc[k].homeless)
					{
						WorldGen.QuickFindHome(k);
					}
					if (npc[k].type == 37)
					{
						num7++;
					}
					if (npc[k].type == 17)
					{
						num2++;
					}
					if (npc[k].type == 18)
					{
						num3++;
					}
					if (npc[k].type == 19)
					{
						num5++;
					}
					if (npc[k].type == 20)
					{
						num4++;
					}
					if (npc[k].type == 22)
					{
						num6++;
					}
					if (npc[k].type == 38)
					{
						num8++;
					}
					if (npc[k].type == 54)
					{
						num9++;
					}
					if (npc[k].type == 107)
					{
						num11++;
					}
					if (npc[k].type == 108)
					{
						num10++;
					}
					if (npc[k].type == 124)
					{
						num12++;
					}
					if (npc[k].type == 142)
					{
						num13++;
					}
					if (npc[k].type == 160)
					{
						num14++;
					}
					if (npc[k].type == 178)
					{
						num15++;
					}
					if (npc[k].type == 207)
					{
						num16++;
					}
					if (npc[k].type == 208)
					{
						num17++;
					}
					if (npc[k].type == 209)
					{
						num18++;
					}
					if (npc[k].type == 227)
					{
						num19++;
					}
					if (npc[k].type == 228)
					{
						num20++;
					}
					if (npc[k].type == 229)
					{
						num21++;
					}
					if (npc[k].type == 353)
					{
						num22++;
					}
					if (npc[k].type == 369)
					{
						num23++;
					}
					if (npc[k].type == 441)
					{
						num24++;
					}
					if (npc[k].type == 550)
					{
						num25++;
					}
					if (npc[k].type == 588)
					{
						num26++;
					}
					if (npc[k].type == 633)
					{
						num27++;
					}
					if (npc[k].type == 637)
					{
						num28++;
					}
					if (npc[k].type == 638)
					{
						num29++;
					}
					if (npc[k].type == 656)
					{
						num30++;
					}
					num31++;
				}
			}
			if (WorldGen.prioritizedTownNPCType != 0)
			{
				return;
			}
			int num32 = 0;
			bool flag = false;
			int num33 = 0;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			BestiaryUnlockProgressReport bestiaryProgressReport = GetBestiaryProgressReport();
			for (int l = 0; l < 255; l++)
			{
				if (!player[l].active)
				{
					continue;
				}
				for (int m = 0; m < 58; m++)
				{
					if (player[l].inventory[m] == null || player[l].inventory[m].stack <= 0)
					{
						continue;
					}
					if (num32 < 2000000000)
					{
						if (player[l].inventory[m].type == 71)
						{
							num32 += player[l].inventory[m].stack;
						}
						if (player[l].inventory[m].type == 72)
						{
							num32 += player[l].inventory[m].stack * 100;
						}
						if (player[l].inventory[m].type == 73)
						{
							num32 += player[l].inventory[m].stack * 10000;
						}
						if (player[l].inventory[m].type == 74)
						{
							num32 += player[l].inventory[m].stack * 1000000;
						}
					}
					if (player[l].inventory[m].ammo == AmmoID.Bullet || player[l].inventory[m].useAmmo == AmmoID.Bullet)
					{
						flag2 = true;
					}
					if (ItemID.Sets.ItemsThatCountAsBombsForDemolitionistToSpawn[player[l].inventory[m].type])
					{
						flag3 = true;
					}
					if (player[l].inventory[m].dye > 0 || (player[l].inventory[m].type >= 1107 && player[l].inventory[m].type <= 1120) || (player[l].inventory[m].type >= 3385 && player[l].inventory[m].type <= 3388))
					{
						flag4 = true;
					}
				}
				int num34 = player[l].statLifeMax / 20;
				if (num34 > 5)
				{
					flag = true;
				}
				num33 += num34;
				if (flag4)
				{
					continue;
				}
				for (int n = 0; n < 3; n++)
				{
					if (player[l].dye[n] != null && player[l].dye[n].stack > 0 && player[l].dye[n].dye > 0)
					{
						flag4 = true;
					}
				}
			}
			if (!NPC.downedBoss3 && num7 == 0)
			{
				int num35 = NPC.NewNPC(dungeonX * 16 + 8, dungeonY * 16, 37);
				npc[num35].homeless = false;
				npc[num35].homeTileX = dungeonX;
				npc[num35].homeTileY = dungeonY;
			}
			bool flag5 = false;
			if (rand.Next(40) == 0)
			{
				flag5 = true;
			}
			if (num6 < 1)
			{
				townNPCCanSpawn[22] = true;
			}
			if ((double)num32 > 5000.0 && num2 < 1)
			{
				townNPCCanSpawn[17] = true;
			}
			if (flag && num3 < 1 && num2 > 0)
			{
				townNPCCanSpawn[18] = true;
			}
			if (flag2 && num5 < 1)
			{
				townNPCCanSpawn[19] = true;
			}
			if ((NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num4 < 1)
			{
				townNPCCanSpawn[20] = true;
			}
			if (flag3 && num2 > 0 && num8 < 1)
			{
				townNPCCanSpawn[38] = true;
			}
			if (NPC.savedStylist && num22 < 1)
			{
				townNPCCanSpawn[353] = true;
			}
			if (NPC.savedAngler && num23 < 1)
			{
				townNPCCanSpawn[369] = true;
			}
			if (NPC.downedBoss3 && num9 < 1)
			{
				townNPCCanSpawn[54] = true;
			}
			if (NPC.savedGoblin && num11 < 1)
			{
				townNPCCanSpawn[107] = true;
			}
			if (NPC.savedTaxCollector && num24 < 1)
			{
				townNPCCanSpawn[441] = true;
			}
			if (NPC.savedWizard && num10 < 1)
			{
				townNPCCanSpawn[108] = true;
			}
			if (NPC.savedMech && num12 < 1)
			{
				townNPCCanSpawn[124] = true;
			}
			if (NPC.downedFrost && num13 < 1 && xMas)
			{
				townNPCCanSpawn[142] = true;
			}
			if (NPC.downedMechBossAny && num15 < 1)
			{
				townNPCCanSpawn[178] = true;
			}
			if (flag4 && num16 < 1 && num31 >= 4)
			{
				townNPCCanSpawn[207] = true;
			}
			if (NPC.downedQueenBee && num20 < 1)
			{
				townNPCCanSpawn[228] = true;
			}
			if (NPC.downedPirates && num21 < 1)
			{
				townNPCCanSpawn[229] = true;
			}
			if (num14 < 1 && hardMode)
			{
				townNPCCanSpawn[160] = true;
			}
			if (hardMode && NPC.downedPlantBoss && num18 < 1)
			{
				townNPCCanSpawn[209] = true;
			}
			if (num31 >= 8 && num19 < 1)
			{
				townNPCCanSpawn[227] = true;
			}
			if (flag5 && num17 < 1 && num31 >= 14)
			{
				townNPCCanSpawn[208] = true;
			}
			if (NPC.savedBartender && num25 < 1)
			{
				townNPCCanSpawn[550] = true;
			}
			if (NPC.savedGolfer && num26 < 1)
			{
				townNPCCanSpawn[588] = true;
			}
			if (bestiaryProgressReport.CompletionPercent >= 0.1f && num27 < 1)
			{
				townNPCCanSpawn[633] = true;
			}
			if (NPC.boughtCat && num28 < 1)
			{
				townNPCCanSpawn[637] = true;
			}
			if (NPC.boughtDog && num29 < 1)
			{
				townNPCCanSpawn[638] = true;
			}
			if (NPC.boughtBunny && num30 < 1)
			{
				townNPCCanSpawn[656] = true;
			}
			int num36 = WorldGen.prioritizedTownNPCType;
			if (num36 == 0 && NPC.boughtCat && num28 < 1)
			{
				num36 = 637;
			}
			if (num36 == 0 && NPC.boughtDog && num29 < 1)
			{
				num36 = 638;
			}
			if (num36 == 0 && NPC.boughtBunny && num30 < 1)
			{
				num36 = 656;
			}
			if (num36 == 0 && num6 < 1)
			{
				num36 = 22;
			}
			if (num36 == 0 && (double)num32 > 5000.0 && num2 < 1)
			{
				num36 = 17;
			}
			if (num36 == 0 && flag && num3 < 1 && num2 > 0)
			{
				num36 = 18;
			}
			if (num36 == 0 && flag2 && num5 < 1)
			{
				num36 = 19;
			}
			if (num36 == 0 && NPC.savedGoblin && num11 < 1)
			{
				num36 = 107;
			}
			if (num36 == 0 && NPC.savedTaxCollector && num24 < 1)
			{
				num36 = 441;
			}
			if (num36 == 0 && NPC.savedWizard && num10 < 1)
			{
				num36 = 108;
			}
			if (num36 == 0 && hardMode && num14 < 1)
			{
				num36 = 160;
			}
			if (num36 == 0 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num4 < 1)
			{
				num36 = 20;
			}
			if (num36 == 0 && flag3 && num2 > 0 && num8 < 1)
			{
				num36 = 38;
			}
			if (num36 == 0 && NPC.downedQueenBee && num20 < 1)
			{
				num36 = 228;
			}
			if (num36 == 0 && NPC.downedMechBossAny && num15 < 1)
			{
				num36 = 178;
			}
			if (num36 == 0 && NPC.savedMech && num12 < 1)
			{
				num36 = 124;
			}
			if (num36 == 0 && NPC.savedAngler && num23 < 1)
			{
				num36 = 369;
			}
			if (num36 == 0 && hardMode && NPC.downedPlantBoss && num18 < 1)
			{
				num36 = 209;
			}
			if (num36 == 0 && NPC.downedPirates && num21 < 1)
			{
				num36 = 229;
			}
			if (num36 == 0 && NPC.downedBoss3 && num9 < 1)
			{
				num36 = 54;
			}
			if (num36 == 0 && NPC.savedStylist && num22 < 1)
			{
				num36 = 353;
			}
			if (num36 == 0 && num31 >= 4 && flag4 && num16 < 1)
			{
				num36 = 207;
			}
			if (num36 == 0 && num31 >= 8 && num19 < 1)
			{
				num36 = 227;
			}
			if (num36 == 0 && flag5 && num31 >= 14 && num17 < 1)
			{
				num36 = 208;
			}
			if (num36 == 0 && NPC.downedFrost && num13 < 1 && xMas)
			{
				num36 = 142;
			}
			if (num36 == 0 && NPC.savedBartender && num25 < 1)
			{
				num36 = 550;
			}
			if (num36 == 0 && NPC.savedGolfer && num26 < 1)
			{
				num36 = 588;
			}
			if (num36 == 0 && bestiaryProgressReport.CompletionPercent >= 0.1f && num27 < 1)
			{
				num36 = 633;
			}
			WorldGen.prioritizedTownNPCType = num36;
		}

		public static int DamageVar(float dmg, float luck = 0f)
		{
			float num = dmg * (1f + (float)rand.Next(-15, 16) * 0.01f);
			if (luck > 0f)
			{
				if (rand.NextFloat() < luck)
				{
					float num2 = dmg * (1f + (float)rand.Next(-15, 16) * 0.01f);
					if (num2 > num)
					{
						num = num2;
					}
				}
			}
			else if (luck < 0f && rand.NextFloat() < 0f - luck)
			{
				float num3 = dmg * (1f + (float)rand.Next(-15, 16) * 0.01f);
				if (num3 < num)
				{
					num = num3;
				}
			}
			return (int)Math.Round(num);
		}

		public static double CalculateDamageNPCsTake(int Damage, int Defense)
		{
			double num = (double)Damage - (double)Defense * 0.5;
			if (num < 1.0)
			{
				num = 1.0;
			}
			return num;
		}

		public static double CalculateDamagePlayersTakeInPVP(int Damage, int Defense)
		{
			double num = (double)Damage - (double)Defense * 0.5;
			if (num < 1.0)
			{
				num = 1.0;
			}
			return num;
		}

		public static double CalculateDamagePlayersTake(int Damage, int Defense)
		{
			double num = (double)Damage - (double)Defense * 0.5;
			if (masterMode)
			{
				num = Damage - Defense;
			}
			else if (expertMode)
			{
				num = (double)Damage - (double)Defense * 0.75;
			}
			if (num < 1.0)
			{
				num = 1.0;
			}
			return num;
		}

		public void OnTileChangeEvent(int x, int y, int count, TileChangeType eventType)
		{
			switch (eventType)
			{
			case TileChangeType.LavaWater:
				SoundEngine.PlaySound(SoundID.LiquidsWaterLava, x * 16 + count * 8, y * 16 + count * 8);
				break;
			case TileChangeType.HoneyWater:
				SoundEngine.PlaySound(SoundID.LiquidsHoneyWater, x * 16 + count * 8, y * 16 + count * 8);
				break;
			case TileChangeType.HoneyLava:
				SoundEngine.PlaySound(SoundID.LiquidsHoneyLava, x * 16 + count * 8, y * 16 + count * 8);
				break;
			}
		}

		public static void ClearPendingPlayerSelectCallbacks()
		{
			_pendingCharacterSelect = null;
		}

		public static void SelectPlayer(PlayerFileData data)
		{
			if (_pendingCharacterSelect != null)
			{
				_pendingCharacterSelect(data);
				_pendingCharacterSelect = null;
			}
			else if (menuMultiplayer)
			{
				ServerSideCharacter = false;
				data.SetAsActive();
				SoundEngine.PlaySound(10);
				if (autoJoin)
				{
					if (Netplay.SetRemoteIP(getIP))
					{
						menuMode = 10;
						Netplay.StartTcpClient();
					}
					autoJoin = false;
				}
				else if (menuServer)
				{
					LoadWorlds();
					menuMode = 6;
				}
				else
				{
					menuMode = 13;
					clrInput();
				}
			}
			else
			{
				ServerSideCharacter = false;
				myPlayer = 0;
				data.SetAsActive();
				player[myPlayer].position = Vector2.Zero;
				LoadWorlds();
				SoundEngine.PlaySound(10);
				menuMode = 6;
			}
		}

		public static void ToggleFullScreen()
		{
			SetFullScreen(!graphics.IsFullScreen);
		}

		public static void SetFullScreen(bool fullscreen)
		{
			SetDisplayMode(PendingResolutionWidth, PendingResolutionHeight, fullscreen);
		}

		public static void SetResolution(int width, int height)
		{
			SetDisplayMode(width, height, graphics.IsFullScreen);
		}

		public static void SetDisplayMode(int width, int height, bool fullscreen)
		{
			bool flag = false;
			//Form form = null;
			//screenMaximized = ((Form)Control.FromHandle(instance.Window.Handle)).WindowState == FormWindowState.Maximized;
			if (screenBorderless && screenMaximized && !graphics.IsFullScreen)
			{
				screenMaximized = false;
				//((Form)Control.FromHandle(instance.Window.Handle)).WindowState = FormWindowState.Normal;
			}
			//form = (Form)Control.FromHandle(instance.Window.Handle);
			//flag = form.FormBorderStyle == FormBorderStyle.None;
			bool flag2 = false;
			int num3;
			int num4;
			if (screenBorderless || screenMaximized || graphics.IsFullScreen || fullscreen)
			{
				//form.MinimumSize = new Size(0, 0);
				if (!fullscreen)
				{
					//SetDisplayModeAsBorderless(width, height, form);
				}
				if (width > maxScreenW)
				{
					float num = (float)height / (float)width;
					width = maxScreenW;
					height = (int)(num * (float)width);
				}
				if (height > maxScreenH)
				{
					float num2 = (float)width / (float)height;
					height = maxScreenH;
					width = (int)(num2 * (float)height);
				}
				PlayerInput.RawMouseScale = new Vector2((float)width / (float)instance.Window.ClientBounds.Width, (float)height / (float)instance.Window.ClientBounds.Height);
				if (!graphics.IsFullScreen)
				{
					num3 = Math.Max(graphics.PreferredBackBufferWidth, graphics.GraphicsDevice.Viewport.Width);
					num4 = Math.Max(graphics.PreferredBackBufferHeight, graphics.GraphicsDevice.Viewport.Height);
					if (num3 != graphics.PreferredBackBufferWidth || num4 != graphics.PreferredBackBufferHeight)
					{
						//flag2 = true;
					}
				}
				else
				{
					num3 = graphics.PreferredBackBufferWidth;
					num4 = graphics.PreferredBackBufferHeight;
				}
				//screenMaximized = true;
			}
			else
			{
				PlayerInput.RawMouseScale = Vector2.One;
				//form.MinimumSize = new Size(minScreenW, minScreenH);
				if (flag)
				{
					width = displayWidth[0];
					height = displayHeight[0];
				}
				width = Math.Min(width, maxScreenW);
				height = Math.Min(height, maxScreenH);
				num3 = graphics.GraphicsDevice.Viewport.Width;
				num4 = graphics.GraphicsDevice.Viewport.Height;
				flag2 = graphics.PreferredBackBufferWidth != graphics.GraphicsDevice.Viewport.Width || graphics.PreferredBackBufferHeight != graphics.GraphicsDevice.Viewport.Height;
			}
			if (!fullscreen && !flag2)
			{
				/*if (form.ClientSize.Width < graphics.PreferredBackBufferWidth)
				{
					width = form.ClientSize.Width;
					flag2 = true;
				}
				if (form.ClientSize.Height < graphics.PreferredBackBufferHeight)
				{
					height = form.ClientSize.Height;
					flag2 = true;
				}*/
			}
			width &= 0x7FFFFFFE;
			height &= 0x7FFFFFFE;
			width = Math.Max(width, minScreenW);
			height = Math.Max(height, minScreenH);
			if (graphics.IsFullScreen != fullscreen)
			{
				graphics.PreferredBackBufferWidth = width;
				graphics.PreferredBackBufferHeight = height;
				graphics.ApplyChanges();
				graphics.ToggleFullScreen();
			}
			if (width != num3 || height != num4 || flag2)
			{
				mapTime = 0;
				if (gamePaused)
				{
					renderNow = true;
				}
				screenWidth = width;
				screenHeight = height;
				graphics.PreferredBackBufferWidth = screenWidth;
				graphics.PreferredBackBufferHeight = screenHeight;
				graphics.ApplyChanges();
				PlayerInput.CacheOriginalScreenDimensions();
				FixUIScale();
				if (Main.OnResolutionChanged != null)
				{
					Main.OnResolutionChanged(new Vector2(screenWidth, screenHeight));
				}
				PendingResolutionWidth = screenWidth;
				PendingResolutionHeight = screenHeight;
				PlayerInput.CacheOriginalScreenDimensions();
				if (!fullscreen)
				{
					if (screenBorderless)
					{
						//ApplyBorderlessResolution(form);
						//form.FormBorderStyle = FormBorderStyle.None;
					}
					else
					{
						//form.FormBorderStyle = FormBorderStyle.Sizable;
					}
					//form.SendToBack();
					//form.BringToFront();
				}
				Lighting.Initialize();
				if (!drawToScreen)
				{
					//instance.InitTargets();
				}
				UserInterface.ActiveInstance.Recalculate();
				instance._needsMenuUIRecalculation = true;
				Console.WriteLine(Language.GetTextValue("Misc.ResolutionChanged", width, height));
				chatMonitor.OnResolutionChange();
			}
			if (!graphics.SynchronizeWithVerticalRetrace)
			{
				graphics.SynchronizeWithVerticalRetrace = true;
				graphics.ApplyChanges();
			}
		}

		public static void FixUIScale()
		{
			UIScale = UIScaleWanted;
		}

		public void FullscreenStartup()
		{
			startFullscreen = false;
			int currentValue = graphics.PreferredBackBufferWidth;
			int currentValue2 = graphics.PreferredBackBufferHeight;
			Configuration.Get("DisplayWidth", currentValue);
			Configuration.Get("DisplayHeight", currentValue2);
			SetDisplayMode(currentValue, currentValue2, fullscreen: true);
		}

		public void UpdateDisplaySettings()
		{
			if (startFullscreen)
			{
				FullscreenStartup();
			}
			SetResolution(base.GraphicsDevice.Viewport.Width, base.GraphicsDevice.Viewport.Height);
		}

		public static void OpenPlayerSelect(OnPlayerSelected method)
		{
			if ((gameMenu && (menuMode == 10 || menuMode == 14)) || WorldGen.gen)
			{
				return;
			}
			if (!gameMenu)
			{
				WorldGen.SaveAndQuit(delegate
				{
					menuMode = 888;
					_blockFancyUIWhileLoading = true;
					LoadPlayers();
					MenuUI.SetState(_characterSelectMenu);
					_blockFancyUIWhileLoading = false;
					_pendingCharacterSelect = method;
				});
			}
			else
			{
				menuMode = 888;
				_blockFancyUIWhileLoading = true;
				LoadPlayers();
				MenuUI.SetState(_characterSelectMenu);
				_blockFancyUIWhileLoading = false;
				_pendingCharacterSelect = method;
			}
		}

		public static void SwitchNetMode(int mode)
		{
			if (mode >= 0 && mode <= 2)
			{
				_targetNetMode = mode;
				_hasPendingNetmodeChange = true;
			}
		}

		public static void WeGameRequireExitGame()
		{
			_WeGameReqExit = true;
		}
	}
}
