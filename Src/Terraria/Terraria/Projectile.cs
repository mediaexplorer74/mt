using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using ReLogic.Utilities;
using GameManager.Audio;
using GameManager.Chat;
using GameManager.DataStructures;
using GameManager.Enums;
using GameManager.GameContent;
using GameManager.GameContent.Achievements;
using GameManager.GameContent.Creative;
using GameManager.GameContent.Drawing;
using GameManager.GameContent.Events;
using GameManager.GameContent.Golf;
using GameManager.GameContent.Shaders;
using GameManager.GameContent.UI;
using GameManager.Graphics;
using GameManager.Graphics.Effects;
using GameManager.Graphics.Shaders;
using GameManager.ID;
using GameManager.Localization;
using GameManager.Physics;
using GameManager.Utilities;
using GameManager.WorldBuilding;

namespace GameManager
{
	public class Projectile : Entity
	{
		private class NPCDistanceByIndexComparator : IComparer<Tuple<int, float>>
		{
			public int Compare(Tuple<int, float> npcIndex1, Tuple<int, float> npcIndex2)
			{
				return npcIndex1.Item2.CompareTo(npcIndex2.Item2);
			}
		}

		public struct HallowBossPelletStormInfo
		{
			public float StartAngle;

			public float AnglePerBullet;

			public int BulletsInStorm;

			public float BulletsProgressInStormStartNormalized;

			public float BulletsProgressInStormBonusByIndexNormalized;

			public float StormTotalRange;

			public Vector2 BulletSize;

			public float GetBulletProgress(int bulletIndex)
			{
				return BulletsProgressInStormStartNormalized + BulletsProgressInStormBonusByIndexNormalized * (float)bulletIndex;
			}

			public bool IsValid(int bulletIndex)
			{
				float bulletProgress = GetBulletProgress(bulletIndex);
				if (bulletProgress >= 0f)
				{
					return bulletProgress <= 1f;
				}
				return false;
			}

			public Vector2 GetBulletPosition(int bulletIndex, Vector2 centerPoint)
			{
				return centerPoint + Vector2.UnitX.RotatedBy(StartAngle + AnglePerBullet * (float)bulletIndex) * StormTotalRange * GetBulletProgress(bulletIndex);
			}

			public Rectangle GetBulletHitbox(int bulletIndex, Vector2 centerPoint)
			{
				return Utils.CenteredRectangle(GetBulletPosition(bulletIndex, centerPoint), BulletSize);
			}
		}

		public static uint[][] perIDStaticNPCImmunity = new uint[950][];

		public const int SentryLifeTime = 7200;

		public const int ArrowLifeTime = 1200;

		public float ownerHitCheckDistance = 1000f;

		public bool arrow;

		public int numHits;

		public bool bobber;

		public bool netImportant;

		public bool noDropItem;

		public static int maxAI = 2;

		public bool counterweight;

		public float scale = 1f;

		public float rotation;

		public int type;

		public int alpha;

		public bool sentry;

		public short glowMask;

		public int owner = 255;

		public float[] ai = new float[maxAI];

		public float[] localAI = new float[maxAI];

		public float gfxOffY;

		public float stepSpeed = 1f;

		public int aiStyle;

		public int timeLeft;

		public int soundDelay;

		public int damage;

		public int originalDamage;

		public int spriteDirection = 1;

		public bool hostile;

		public float knockBack;

		public bool friendly;

		public int penetrate = 1;

		private int[] localNPCImmunity = new int[200];

		private bool usesLocalNPCImmunity;

		private bool usesIDStaticNPCImmunity;

		public int maxPenetrate = 1;

		public int identity;

		public float light;

		public bool netUpdate;

		public bool netUpdate2;

		public int netSpam;

		public Vector2[] oldPos = new Vector2[10];

		public float[] oldRot = new float[10];

		public int[] oldSpriteDirection = new int[10];

		public bool minion;

		public float minionSlots;

		public int minionPos;

		public int restrikeDelay;

		public bool tileCollide;

		public int extraUpdates;

		public int numUpdates;

		public bool ignoreWater;

		public bool hide;

		public bool ownerHitCheck;

		public int[] playerImmune = new int[255];

		public string miscText = "";

		public bool melee;

		public bool ranged;

		public bool magic;

		public bool coldDamage;

		public bool noEnchantments;

		public bool noEnchantmentVisuals;

		public bool trap;

		public bool npcProj;

		public bool originatedFromActivableTile;

		public int frameCounter;

		public int frame;

		public bool manualDirectionChange;

		public int projUUID = -1;

		public bool decidesManualFallThrough;

		public bool shouldFallThrough;

		public int localNPCHitCooldown = -2;

		public int idStaticNPCHitCooldown = -1;

		private static Conditions.IsSolid _cachedConditions_solid = new Conditions.IsSolid();

		private static Conditions.NotNull _cachedConditions_notNull = new Conditions.NotNull();

		private List<Vector2> _whipPointsForCollision = new List<Vector2>();

		private static Rectangle _lanceHitboxBounds = new Rectangle(0, 0, 300, 300);

		private static List<Tuple<int, float>> _medusaHeadTargetList = new List<Tuple<int, float>>();

		private static NPCDistanceByIndexComparator _medusaTargetComparer = new NPCDistanceByIndexComparator();

		private static List<int> _ai164_blacklistedTargets = new List<int>();

		private static List<int> _ai158_blacklistedTargets = new List<int>();

		private static List<int> _ai156_blacklistedTargets = new List<int>();

		private static float[] _CompanionCubeScreamCooldown = new float[255];

		public string Name => Lang.GetProjectileName(type).Value;

		public bool WipableTurret
		{
			get
			{
				if (owner == Main.myPlayer && sentry)
				{
					return !TurretShouldPersist();
				}
				return false;
			}
		}

		public float Opacity
		{
			get
			{
				return 1f - (float)alpha / 255f;
			}
			set
			{
				alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
			}
		}

		public int MaxUpdates
		{
			get
			{
				return extraUpdates + 1;
			}
			set
			{
				extraUpdates = value - 1;
			}
		}

		public NPC OwnerMinionAttackTargetNPC
		{
			get
			{
				if (Main.player[owner].MinionAttackTargetNPC < 0)
				{
					return null;
				}
				return Main.npc[Main.player[owner].MinionAttackTargetNPC];
			}
		}

		public static void InitializeStaticThings()
		{
			perIDStaticNPCImmunity = new uint[950][];
			for (int i = 0; i < perIDStaticNPCImmunity.Length; i++)
			{
				perIDStaticNPCImmunity[i] = new uint[200];
			}
			WorldGen.Hooks.OnWorldLoad += ResetImmunity;
		}

		public static void ResetImmunity()
		{
			for (int i = 0; i < 950; i++)
			{
				for (int j = 0; j < 200; j++)
				{
					perIDStaticNPCImmunity[i][j] = 0u;
				}
			}
		}

		public static bool IsNPCIndexImmuneToProjectileType(int projectileType, int npcIndex)
		{
			return perIDStaticNPCImmunity[projectileType][npcIndex] <= Main.GameUpdateCount;
		}

		public bool TurretShouldPersist()
		{
			switch (type)
			{
			case 663:
			case 665:
			case 667:
			case 677:
			case 678:
			case 679:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
				return DD2Event.Ongoing;
			default:
				return false;
			}
		}

		public void SetDefaults(int Type)
		{
			ownerHitCheckDistance = 1000f;
			counterweight = false;
			sentry = false;
			arrow = false;
			bobber = false;
			numHits = 0;
			netImportant = false;
			manualDirectionChange = false;
			decidesManualFallThrough = false;
			shouldFallThrough = false;
			localNPCHitCooldown = -2;
			idStaticNPCHitCooldown = -1;
			usesLocalNPCImmunity = false;
			usesIDStaticNPCImmunity = false;
			int num = 10;
			if (Type >= 0)
			{
				num = ProjectileID.Sets.TrailCacheLength[Type];
			}
			if (num != oldPos.Length)
			{
				Array.Resize(ref oldPos, num);
				Array.Resize(ref oldRot, num);
				Array.Resize(ref oldSpriteDirection, num);
			}
			for (int i = 0; i < oldPos.Length; i++)
			{
				oldPos[i].X = 0f;
				oldPos[i].Y = 0f;
				oldRot[i] = 0f;
				oldSpriteDirection[i] = 0;
			}
			for (int j = 0; j < maxAI; j++)
			{
				ai[j] = 0f;
				localAI[j] = 0f;
			}
			for (int k = 0; k < 255; k++)
			{
				playerImmune[k] = 0;
			}
			ResetLocalNPCHitImmunity();
			noDropItem = false;
			minion = false;
			minionSlots = 0f;
			soundDelay = 0;
			spriteDirection = 1;
			melee = false;
			ranged = false;
			magic = false;
			ownerHitCheck = false;
			hide = false;
			lavaWet = false;
			wetCount = 0;
			wet = false;
			ignoreWater = false;
			hostile = false;
			netUpdate = false;
			netUpdate2 = false;
			netSpam = 0;
			numUpdates = 0;
			extraUpdates = 0;
			identity = 0;
			restrikeDelay = 0;
			light = 0f;
			penetrate = 1;
			tileCollide = true;
			position = Vector2.Zero;
			velocity = Vector2.Zero;
			aiStyle = 0;
			alpha = 0;
			glowMask = -1;
			type = Type;
			active = true;
			rotation = 0f;
			scale = 1f;
			owner = 255;
			timeLeft = 3600;
			friendly = false;
			damage = 0;
			originalDamage = 0;
			knockBack = 0f;
			miscText = "";
			coldDamage = false;
			noEnchantments = false;
			noEnchantmentVisuals = false;
			trap = false;
			npcProj = false;
			originatedFromActivableTile = false;
			projUUID = -1;
			frame = 0;
			frameCounter = 0;
			if (type == 1)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 2)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 3)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 4;
				ranged = true;
			}
			else if (type == 4)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 0.35f;
				penetrate = 5;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 5)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 0.4f;
				penetrate = -1;
				alpha = 100;
				ignoreWater = true;
				ranged = true;
				extraUpdates = 1;
				timeLeft = 120;
			}
			else if (type == 6)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				light = 0.4f;
			}
			else if (type == 7 || type == 8)
			{
				width = 28;
				height = 28;
				aiStyle = 4;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 9)
			{
				width = 24;
				height = 24;
				aiStyle = 5;
				friendly = true;
				penetrate = 2;
				alpha = 50;
				scale = 0.8f;
				tileCollide = false;
				melee = true;
			}
			else if (type == 10)
			{
				width = 64;
				height = 64;
				aiStyle = 6;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 11)
			{
				width = 48;
				height = 48;
				aiStyle = 6;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 12)
			{
				width = 18;
				height = 18;
				aiStyle = 5;
				friendly = true;
				penetrate = -1;
				alpha = 50;
				light = 1f;
			}
			else if (type == 13)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 14)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 15)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
			}
			else if (type == 16)
			{
				width = 32;
				height = 32;
				aiStyle = 9;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
			}
			else if (type == 17)
			{
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				ignoreWater = true;
			}
			else if (type == 18)
			{
				netImportant = true;
				width = 32;
				height = 32;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				alpha = 150;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 19)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				light = 1f;
				melee = true;
			}
			else if (type == 20)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.4f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 21)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				scale = 1.2f;
				friendly = true;
				ranged = true;
			}
			else if (type == 22)
			{
				width = 18;
				height = 18;
				aiStyle = 12;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 23)
			{
				width = 4;
				height = 4;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				ranged = true;
			}
			else if (type == 24)
			{
				width = 14;
				height = 14;
				aiStyle = 14;
				friendly = true;
				penetrate = 6;
				ranged = true;
			}
			else if (type == 25)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.9f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 26)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.8f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 27)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				alpha = 255;
				timeLeft /= 2;
				penetrate = 10;
				magic = true;
			}
			else if (type == 28)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 29)
			{
				width = 10;
				height = 10;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 30)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 31)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 32)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 33)
			{
				width = 38;
				height = 38;
				aiStyle = 3;
				friendly = true;
				scale = 0.9f;
				penetrate = -1;
				melee = true;
			}
			else if (type == 34)
			{
				width = 32;
				height = 32;
				aiStyle = 9;
				friendly = true;
				light = 0.8f;
				penetrate = 2;
				magic = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 12;
			}
			else if (type == 35)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.8f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 36)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 2;
				light = 0.6f;
				alpha = 255;
				scale = 1.4f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 37)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 38)
			{
				width = 14;
				height = 14;
				aiStyle = 0;
				hostile = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
			}
			else if (type == 39)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 40)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 41)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				penetrate = -1;
				ranged = true;
				light = 0.3f;
			}
			else if (type == 42)
			{
				knockBack = 8f;
				width = 10;
				height = 10;
				aiStyle = 10;
				ranged = true;
				friendly = true;
				extraUpdates = 1;
			}
			else if (type == 43)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 44)
			{
				width = 48;
				height = 48;
				alpha = 100;
				light = 0.2f;
				aiStyle = 18;
				hostile = true;
				penetrate = -1;
				tileCollide = true;
				scale = 0.9f;
			}
			else if (type == 45)
			{
				width = 48;
				height = 48;
				alpha = 100;
				light = 0.2f;
				aiStyle = 18;
				friendly = true;
				penetrate = 5;
				tileCollide = true;
				scale = 0.9f;
				magic = true;
			}
			else if (type == 46)
			{
				width = 20;
				height = 20;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 47)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 48)
			{
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				penetrate = 2;
				ranged = true;
			}
			else if (type == 49)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.2f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 50)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 5;
			}
			else if (type == 51)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				ranged = true;
				friendly = true;
			}
			else if (type == 52)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
			}
			else if (type == 53)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 5;
				tileCollide = false;
			}
			else if (type == 54)
			{
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				penetrate = 2;
				ranged = true;
			}
			else if (type == 55)
			{
				width = 10;
				height = 10;
				aiStyle = 0;
				hostile = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
			}
			else if (type == 56)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 57)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 58)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.08f;
			}
			else if (type == 59)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.9f;
			}
			else if (type == 60)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.9f;
			}
			else if (type == 61)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.16f;
			}
			else if (type == 62)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.9f;
			}
			else if (type == 63)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 64)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.25f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 65)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				ranged = true;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 66)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.27f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 67)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 68)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				ranged = true;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 69)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 70)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 621)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 71)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 72)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 73 || type == 74)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				light = 0.4f;
			}
			else if (type == 75)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 76 || type == 77 || type == 78)
			{
				if (type == 76)
				{
					width = 10;
					height = 22;
				}
				else if (type == 77)
				{
					width = 18;
					height = 24;
				}
				else
				{
					width = 22;
					height = 24;
				}
				aiStyle = 21;
				friendly = true;
				alpha = 100;
				light = 0.3f;
				penetrate = -1;
				timeLeft = 180;
				magic = true;
			}
			else if (type == 79)
			{
				width = 32;
				height = 32;
				aiStyle = 9;
				friendly = true;
				light = 0.8f;
				magic = true;
				penetrate = 3;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 12;
			}
			else if (type == 80)
			{
				width = 16;
				height = 16;
				aiStyle = 22;
				friendly = true;
				magic = true;
				tileCollide = false;
				light = 0.5f;
				coldDamage = true;
			}
			else if (type == 81)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
			}
			else if (type == 82)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
			}
			else if (type == 83)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.7f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 84)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 85)
			{
				width = 6;
				height = 6;
				aiStyle = 23;
				friendly = true;
				alpha = 255;
				penetrate = 3;
				extraUpdates = 2;
				ranged = true;
			}
			else if (type == 86)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 87)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 88)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 4;
				scale = 1.4f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 89)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 90)
			{
				width = 6;
				height = 6;
				aiStyle = 24;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 50;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				tileCollide = false;
			}
			else if (type == 91)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 92)
			{
				width = 24;
				height = 24;
				aiStyle = 5;
				friendly = true;
				penetrate = 1;
				alpha = 50;
				scale = 0.8f;
				tileCollide = false;
				ranged = true;
			}
			else if (type == 93)
			{
				light = 0.15f;
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				penetrate = 2;
				magic = true;
			}
			else if (type == 94)
			{
				ignoreWater = true;
				width = 8;
				height = 8;
				aiStyle = 24;
				friendly = true;
				light = 0.5f;
				alpha = 50;
				scale = 1.2f;
				timeLeft = 600;
				magic = true;
				tileCollide = true;
				penetrate = 1;
			}
			else if (type == 95)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
				penetrate = 2;
			}
			else if (type == 96)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				hostile = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
				penetrate = -1;
				scale = 0.9f;
				scale = 1.3f;
			}
			else if (type == 97)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 98)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				hostile = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 99 || type == 727)
			{
				width = 31;
				height = 31;
				aiStyle = 25;
				friendly = true;
				hostile = true;
				ranged = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 100)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.8f;
				timeLeft = 2700;
				magic = true;
			}
			else if (type == 101)
			{
				width = 6;
				height = 6;
				aiStyle = 23;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 3;
				magic = true;
			}
			else if (type == 102)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				hostile = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 103)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 104)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 105)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.3f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 106)
			{
				width = 32;
				height = 32;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				light = 0.4f;
			}
			else if (type == 107)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.1f;
			}
			else if (type == 108)
			{
				width = 260;
				height = 260;
				aiStyle = 16;
				friendly = true;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				timeLeft = 2;
				trap = true;
			}
			else if (type == 109)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				hostile = true;
				scale = 0.9f;
				penetrate = -1;
				coldDamage = true;
				ranged = true;
			}
			else if (type == 110)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 111)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 112)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 113)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				light = 0.4f;
				coldDamage = true;
			}
			else if (type == 114)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				magic = true;
				penetrate = 3;
				light = 0.5f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 115)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				hostile = true;
				magic = true;
				penetrate = -1;
				light = 0.5f;
				alpha = 255;
			}
			else if (type == 116)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 117)
			{
				arrow = true;
				extraUpdates = 2;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 118)
			{
				width = 10;
				height = 10;
				aiStyle = 28;
				alpha = 255;
				melee = true;
				penetrate = 1;
				friendly = true;
				coldDamage = true;
			}
			else if (type == 119)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				melee = true;
				penetrate = 2;
				friendly = true;
				coldDamage = true;
			}
			else if (type == 120)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				coldDamage = true;
				extraUpdates = 1;
				timeLeft = 1200;
			}
			else if (type == 121)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 122)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 123)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 124)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 125)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 126)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 127)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 128)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				coldDamage = true;
			}
			else if (type == 129)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				tileCollide = false;
			}
			else if (type == 130)
			{
				width = 22;
				height = 22;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.2f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 131)
			{
				width = 22;
				height = 22;
				aiStyle = 30;
				friendly = true;
				penetrate = 1;
				tileCollide = false;
				melee = true;
				light = 0.5f;
			}
			else if (type == 132)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				penetrate = 3;
				light = 0.5f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 133)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 134)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 135)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 136)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 137)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 138)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 139)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 140)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 141)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 142)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 143)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 144)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 145)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 146)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 147)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 148)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 149)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 150 || type == 151 || type == 152)
			{
				width = 28;
				height = 28;
				aiStyle = 4;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 153)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 154)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.8f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 155)
			{
				netImportant = true;
				width = 44;
				height = 44;
				aiStyle = 32;
				friendly = true;
			}
			else if (type == 156)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				light = 0.5f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 157)
			{
				width = 32;
				height = 32;
				aiStyle = 27;
				melee = true;
				light = 0.5f;
				alpha = 255;
				friendly = true;
				scale = 1.2f;
			}
			else if (type == 158)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 159)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 160)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 161)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 162)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				friendly = true;
				penetrate = 4;
				alpha = 255;
			}
			else if (type == 163)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 33;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 36000;
			}
			else if (type == 164)
			{
				width = 128;
				height = 128;
				aiStyle = 16;
				friendly = true;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				timeLeft = 2;
			}
			else if (type == 165)
			{
				netImportant = true;
				width = 12;
				height = 12;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 166)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				ranged = true;
				coldDamage = true;
			}
			else if (type == 167 || type == 168 || type == 169 || type == 170)
			{
				width = 14;
				height = 14;
				aiStyle = 34;
				friendly = true;
				ranged = true;
				timeLeft = 45;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 3;
			}
			else if (type == 171 || type == 505 || type == 506)
			{
				width = 14;
				height = 14;
				aiStyle = 35;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 400;
			}
			else if (type == 172)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
				coldDamage = true;
				timeLeft = 1200;
			}
			else if (type == 173)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				penetrate = 1;
				light = 0.2f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 174)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				coldDamage = true;
			}
			else if (type == 175)
			{
				width = 34;
				height = 34;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 176)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 177)
			{
				width = 10;
				height = 10;
				aiStyle = 28;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				coldDamage = true;
			}
			else if (type == 178)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				timeLeft = 2;
			}
			else if (type == 179)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 180)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				extraUpdates = 1;
			}
			else if (type == 181)
			{
				width = 8;
				height = 8;
				aiStyle = 36;
				friendly = true;
				penetrate = 3;
				alpha = 255;
				timeLeft = 600;
				extraUpdates = 3;
			}
			else if (type == 182)
			{
				light = 0.15f;
				width = 30;
				height = 30;
				aiStyle = 3;
				friendly = true;
				penetrate = 10;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 183)
			{
				width = 14;
				height = 22;
				aiStyle = 14;
				penetrate = 1;
				timeLeft = 180;
				ranged = true;
				friendly = true;
			}
			else if (type == 184)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				friendly = true;
				hostile = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 185)
			{
				width = 14;
				height = 14;
				aiStyle = 14;
				friendly = true;
				hostile = true;
				penetrate = -1;
				timeLeft = 900;
				trap = true;
			}
			else if (type == 186)
			{
				width = 10;
				height = 14;
				aiStyle = 37;
				friendly = true;
				tileCollide = false;
				ignoreWater = true;
				hostile = true;
				penetrate = -1;
				timeLeft = 300;
				trap = true;
			}
			else if (type == 187)
			{
				width = 6;
				height = 6;
				aiStyle = 38;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 60;
				trap = true;
			}
			else if (type == 188)
			{
				width = 6;
				height = 6;
				aiStyle = 23;
				friendly = true;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				trap = true;
			}
			else if (type == 189)
			{
				width = 8;
				height = 8;
				aiStyle = 36;
				friendly = true;
				penetrate = 3;
				alpha = 255;
				timeLeft = 600;
				magic = true;
				extraUpdates = 3;
			}
			else if (type == 190)
			{
				width = 22;
				height = 22;
				aiStyle = 39;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				ranged = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 14;
			}
			else if (type >= 191 && type <= 194)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 26;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				if (type == 192)
				{
					scale = 1.025f;
				}
				if (type == 193)
				{
					scale = 1.05f;
				}
				if (type == 194)
				{
					scale = 1.075f;
				}
			}
			else if (type == 195)
			{
				tileCollide = false;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
			}
			else if (type == 196)
			{
				width = 16;
				height = 16;
				aiStyle = 14;
				penetrate = -1;
				scale = 0.8f;
			}
			else if (type == 197)
			{
				netImportant = true;
				width = 42;
				height = 42;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 198)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 199)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
			}
			else if (type == 200)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 201)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 202)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 203)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 204)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 205)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 206)
			{
				width = 14;
				height = 14;
				aiStyle = 40;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 207)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 208)
			{
				netImportant = true;
				width = 18;
				height = 36;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 209)
			{
				width = 12;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
				light = 0.5f;
			}
			else if (type == 210)
			{
				netImportant = true;
				width = 14;
				height = 30;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 211)
			{
				netImportant = true;
				width = 24;
				height = 24;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
				light = 1f;
				ignoreWater = true;
			}
			else if (type == 212)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.12f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 213)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.92f;
			}
			else if (type == 214)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 215)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.27f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 216)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.93f;
			}
			else if (type == 217)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.12f;
			}
			else if (type == 218)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.28f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 219)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.95f;
			}
			else if (type == 220)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.2f;
			}
			else if (type == 221)
			{
				width = 20;
				height = 20;
				aiStyle = 41;
				friendly = true;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				penetrate = -1;
				scale = 1f + (float)Main.rand.Next(30) * 0.01f;
				extraUpdates = 2;
			}
			else if (type == 222)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.3f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 223)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1f;
			}
			else if (type == 224)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.1f;
			}
			else if (type == 225)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				extraUpdates = 1;
				timeLeft = 1200;
			}
			else if (type == 226)
			{
				netImportant = true;
				width = 22;
				height = 42;
				aiStyle = 42;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				light = 0.4f;
				ignoreWater = true;
			}
			else if (type == 227)
			{
				netImportant = true;
				tileCollide = false;
				light = 0.1f;
				width = 14;
				height = 14;
				aiStyle = 43;
				friendly = true;
				penetrate = 1;
				timeLeft = 180;
			}
			else if (type == 228)
			{
				tileCollide = false;
				width = 30;
				height = 30;
				aiStyle = 44;
				friendly = true;
				melee = true;
				scale = 1.1f;
				penetrate = -1;
				noEnchantmentVisuals = true;
			}
			else if (type == 229)
			{
				width = 30;
				height = 30;
				aiStyle = 44;
				friendly = true;
				melee = true;
				penetrate = -1;
				light = 0.2f;
				noEnchantmentVisuals = true;
			}
			else if (type >= 230 && type <= 235)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 236)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 237)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 238)
			{
				tileCollide = false;
				ignoreWater = true;
				width = 54;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 239)
			{
				ignoreWater = true;
				width = 4;
				height = 40;
				aiStyle = 45;
				friendly = true;
				penetrate = -1;
				timeLeft = 300;
				scale = 1.1f;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 240)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				hostile = true;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 241)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 242)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 7;
				scale = 1.18f;
				timeLeft = 600;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 243)
			{
				width = 28;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 244)
			{
				tileCollide = false;
				ignoreWater = true;
				width = 54;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 245)
			{
				ignoreWater = true;
				width = 4;
				height = 40;
				aiStyle = 45;
				friendly = true;
				penetrate = 2;
				timeLeft = 300;
				scale = 1.1f;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 246)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				alpha = 255;
				extraUpdates = 1;
			}
			else if (type == 247)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 248)
			{
				width = 18;
				height = 18;
				aiStyle = 1;
				friendly = true;
				melee = true;
			}
			else if (type == 249)
			{
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				ranged = true;
			}
			else if (type == 250)
			{
				width = 12;
				height = 12;
				aiStyle = 46;
				penetrate = -1;
				magic = true;
				alpha = 255;
				ignoreWater = true;
				scale = 1.25f;
			}
			else if (type == 251)
			{
				width = 14;
				height = 14;
				aiStyle = 46;
				friendly = true;
				penetrate = -1;
				magic = true;
				alpha = 255;
				light = 0.3f;
				tileCollide = false;
				ignoreWater = true;
				scale = 1.25f;
			}
			else if (type == 252)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.1f;
			}
			else if (type == 253)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
				coldDamage = true;
			}
			else if (type == 254)
			{
				width = 38;
				height = 38;
				aiStyle = 47;
				magic = true;
				timeLeft = 660;
				light = 0.5f;
			}
			else if (type == 255)
			{
				width = 8;
				height = 8;
				aiStyle = 48;
				friendly = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 100;
			}
			else if (type == 256)
			{
				netImportant = true;
				tileCollide = false;
				width = 6;
				height = 6;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				scale = 1f;
				timeLeft *= 10;
			}
			else if (type == 257)
			{
				ignoreWater = true;
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.75f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				magic = true;
				coldDamage = true;
				extraUpdates = 1;
			}
			else if (type == 258)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				hostile = true;
				penetrate = -1;
				alpha = 100;
				timeLeft = 300;
			}
			else if (type == 259)
			{
				ignoreWater = true;
				tileCollide = false;
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.3f;
				scale = 1.1f;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 260)
			{
				width = 8;
				height = 8;
				aiStyle = 48;
				friendly = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 200;
				penetrate = 1;
			}
			else if (type == 261)
			{
				width = 32;
				height = 34;
				aiStyle = 14;
				friendly = true;
				penetrate = 6;
				magic = true;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 262)
			{
				width = 30;
				height = 30;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 263)
			{
				width = 34;
				height = 34;
				alpha = 100;
				light = 0.5f;
				aiStyle = 18;
				friendly = true;
				penetrate = 5;
				tileCollide = true;
				scale = 1f;
				melee = true;
				timeLeft = 180;
				coldDamage = true;
			}
			else if (type == 264)
			{
				ignoreWater = true;
				width = 4;
				height = 40;
				aiStyle = 45;
				hostile = true;
				penetrate = -1;
				timeLeft = 120;
				scale = 1.1f;
				extraUpdates = 1;
			}
			else if (type == 265)
			{
				width = 12;
				height = 12;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				magic = true;
				penetrate = 3;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 6;
				timeLeft = 30;
			}
			else if (type == 266)
			{
				netImportant = true;
				alpha = 75;
				width = 24;
				height = 16;
				aiStyle = 26;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 12;
			}
			else if (type == 267)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 268)
			{
				netImportant = true;
				width = 18;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 269)
			{
				netImportant = true;
				width = 20;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 270)
			{
				width = 26;
				height = 26;
				aiStyle = 1;
				alpha = 255;
				hostile = true;
				penetrate = 3;
			}
			else if (type == 271)
			{
				width = 20;
				height = 20;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
				scale = 1.2f;
			}
			else if (type == 272)
			{
				width = 32;
				height = 32;
				aiStyle = 3;
				friendly = true;
				scale = 0.9f;
				penetrate = -1;
				melee = true;
			}
			else if (type == 273)
			{
				width = 26;
				height = 26;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
			}
			else if (type == 274)
			{
				width = 42;
				height = 42;
				alpha = 100;
				light = 0.5f;
				aiStyle = 18;
				friendly = true;
				penetrate = 5;
				tileCollide = false;
				scale = 1.1f;
				melee = true;
				timeLeft = 180;
			}
			else if (type == 275)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
			}
			else if (type == 276)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
			}
			else if (type == 277)
			{
				alpha = 255;
				width = 38;
				height = 38;
				aiStyle = 14;
				hostile = true;
			}
			else if (type == 278)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
				extraUpdates = 1;
				timeLeft = 1200;
			}
			else if (type == 279)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.25f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 280)
			{
				width = 32;
				height = 32;
				aiStyle = 12;
				friendly = true;
				alpha = 255;
				penetrate = 5;
				extraUpdates = 2;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 281)
			{
				width = 28;
				height = 28;
				aiStyle = 49;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
			}
			else if (type == 282)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				extraUpdates = 1;
				timeLeft = 1200;
			}
			else if (type == 283)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.25f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 284)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 285)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 286)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 287)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 288)
			{
				width = 32;
				height = 32;
				aiStyle = 12;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 289)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				timeLeft = 2;
			}
			else if (type == 290)
			{
				width = 4;
				height = 4;
				aiStyle = 48;
				hostile = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 100;
				penetrate = -1;
			}
			else if (type == 291)
			{
				width = 12;
				height = 12;
				aiStyle = 50;
				hostile = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 292)
			{
				width = 130;
				height = 130;
				aiStyle = 50;
				hostile = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 293)
			{
				width = 12;
				height = 12;
				aiStyle = 51;
				hostile = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 294)
			{
				width = 4;
				height = 4;
				aiStyle = 48;
				friendly = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 300;
				penetrate = -1;
			}
			else if (type == 295)
			{
				width = 12;
				height = 12;
				aiStyle = 50;
				friendly = true;
				alpha = 255;
				magic = true;
				tileCollide = true;
			}
			else if (type == 296)
			{
				width = 150;
				height = 150;
				aiStyle = 50;
				friendly = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 297)
			{
				width = 12;
				height = 12;
				aiStyle = 51;
				friendly = true;
				alpha = 255;
				magic = true;
				extraUpdates = 1;
				penetrate = 3;
			}
			else if (type == 298)
			{
				width = 6;
				height = 6;
				aiStyle = 52;
				alpha = 255;
				magic = true;
				tileCollide = false;
				extraUpdates = 3;
			}
			else if (type == 299)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				magic = true;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 300)
			{
				width = 38;
				height = 38;
				aiStyle = 2;
				hostile = true;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 301)
			{
				width = 38;
				height = 38;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				extraUpdates = 2;
			}
			else if (type == 302)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.3f;
				alpha = 255;
				extraUpdates = 7;
				scale = 1.18f;
				timeLeft = 300;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 303)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				hostile = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 304)
			{
				alpha = 255;
				width = 30;
				height = 30;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				melee = true;
				light = 0.2f;
				ignoreWater = true;
				extraUpdates = 0;
			}
			else if (type == 305)
			{
				width = 6;
				height = 6;
				aiStyle = 52;
				alpha = 255;
				tileCollide = false;
				extraUpdates = 10;
			}
			else if (type == 306)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				melee = true;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 307)
			{
				width = 16;
				height = 16;
				aiStyle = 36;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				melee = true;
				extraUpdates = 3;
			}
			else if (type == 308)
			{
				width = 80;
				height = 74;
				aiStyle = 53;
				timeLeft = 7200;
				light = 0.25f;
				ignoreWater = true;
				coldDamage = true;
				sentry = true;
			}
			else if (type == 309)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				penetrate = 1;
				friendly = true;
				extraUpdates = 3;
				coldDamage = true;
			}
			else if (type == 310)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 33;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 36000;
			}
			else if (type == 311)
			{
				width = 10;
				height = 12;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 312)
			{
				alpha = 255;
				width = 32;
				height = 32;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 300;
				glowMask = 257;
			}
			else if (type == 313)
			{
				netImportant = true;
				width = 30;
				height = 30;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 314)
			{
				netImportant = true;
				width = 24;
				height = 40;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 315)
			{
				netImportant = true;
				width = 14;
				height = 14;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 316)
			{
				alpha = 255;
				width = 16;
				height = 16;
				aiStyle = 36;
				friendly = true;
				penetrate = 1;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 317)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 54;
				penetrate = 1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 318)
			{
				width = 12;
				height = 14;
				aiStyle = 2;
				friendly = true;
				ranged = true;
			}
			else if (type == 319)
			{
				netImportant = true;
				width = 36;
				height = 30;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 320)
			{
				width = 34;
				height = 34;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
			}
			else if (type == 321)
			{
				width = 30;
				height = 30;
				aiStyle = 55;
				friendly = true;
				melee = true;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 322)
			{
				netImportant = true;
				width = 14;
				height = 14;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 323)
			{
				penetrate = 10;
				extraUpdates = 3;
				width = 14;
				height = 14;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				ranged = true;
				scale = 0.8f;
			}
			else if (type == 324)
			{
				netImportant = true;
				width = 26;
				height = 38;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 325)
			{
				alpha = 255;
				penetrate = -1;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
				tileCollide = false;
				timeLeft = 420;
			}
			else if (type >= 326 && type <= 328)
			{
				if (type == 326)
				{
					width = 14;
					height = 16;
				}
				else if (type == 327)
				{
					width = 12;
					height = 14;
				}
				else
				{
					width = 6;
					height = 12;
				}
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 360;
			}
			else if (type == 329)
			{
				width = 80;
				height = 80;
				light = 0.25f;
				aiStyle = 56;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 420;
			}
			else if (type == 330)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 6;
				ranged = true;
			}
			else if (type == 331)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 332)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				light = 0.5f;
			}
			else if (type == 333)
			{
				width = 38;
				height = 38;
				aiStyle = 3;
				friendly = true;
				scale = 0.9f;
				penetrate = -1;
				melee = true;
			}
			else if (type == 334)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 335)
			{
				width = 22;
				height = 22;
				aiStyle = 30;
				friendly = true;
				penetrate = 1;
				melee = true;
			}
			else if (type == 336)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				magic = true;
				scale = 0.8f;
				extraUpdates = 1;
			}
			else if (type == 337)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				magic = true;
				tileCollide = false;
				coldDamage = true;
				extraUpdates = 1;
			}
			else if (type == 338 || type == 339 || type == 340 || type == 341)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				penetrate = -1;
				friendly = true;
				ranged = true;
				scale = 0.9f;
			}
			else if (type == 342)
			{
				width = 22;
				height = 2;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				coldDamage = true;
			}
			else if (type == 343)
			{
				alpha = 255;
				width = 10;
				height = 10;
				aiStyle = 57;
				friendly = true;
				melee = true;
				scale = 1.1f;
				penetrate = 3;
				coldDamage = true;
			}
			else if (type == 344)
			{
				width = 26;
				height = 26;
				aiStyle = 1;
				friendly = true;
				scale = 0.9f;
				alpha = 255;
				melee = true;
				coldDamage = true;
				tileCollide = false;
				noEnchantmentVisuals = true;
			}
			else if (type == 345)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				scale = 0.8f;
			}
			else if (type == 346)
			{
				width = 18;
				height = 18;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 300;
			}
			else if (type == 347)
			{
				width = 6;
				height = 6;
				aiStyle = 2;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 348)
			{
				aiStyle = 1;
				width = 48;
				height = 48;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				coldDamage = true;
				extraUpdates = 1;
				timeLeft = 900;
			}
			else if (type == 349)
			{
				aiStyle = 1;
				width = 12;
				height = 12;
				hostile = true;
				penetrate = -1;
				coldDamage = true;
				timeLeft = 900;
			}
			else if (type == 350)
			{
				alpha = 255;
				penetrate = -1;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
				tileCollide = false;
				timeLeft /= 2;
			}
			else if (type == 351)
			{
				alpha = 255;
				penetrate = -1;
				width = 24;
				height = 24;
				aiStyle = 58;
				hostile = true;
				tileCollide = false;
			}
			else if (type == 352)
			{
				width = 30;
				height = 30;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft /= 3;
			}
			else if (type == 353)
			{
				netImportant = true;
				width = 18;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 354)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				ranged = true;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 355)
			{
				width = 12;
				height = 12;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				magic = true;
				penetrate = 5;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 6;
				timeLeft = 45;
			}
			else if (type == 356)
			{
				width = 6;
				height = 6;
				aiStyle = 59;
				alpha = 255;
				magic = true;
				tileCollide = false;
				extraUpdates = 3;
			}
			else if (type == 357)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 6;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 358)
			{
				width = 18;
				height = 18;
				aiStyle = 60;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
			}
			else if (type == 359)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
				coldDamage = true;
			}
			else if ((type >= 360 && type <= 366) || type == 381 || type == 382 || type == 760 || type == 775)
			{
				width = 14;
				height = 14;
				aiStyle = 61;
				penetrate = -1;
				netImportant = true;
				bobber = true;
			}
			else if (type == 367)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 368)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 369)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 370)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 371)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 372)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 373)
			{
				netImportant = true;
				width = 24;
				height = 26;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 374)
			{
				width = 10;
				height = 10;
				aiStyle = 0;
				friendly = true;
				penetrate = 1;
				aiStyle = 1;
				tileCollide = true;
				scale *= 0.9f;
			}
			else if (type == 375)
			{
				netImportant = true;
				width = 34;
				height = 26;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 376)
			{
				width = 12;
				height = 12;
				aiStyle = 0;
				friendly = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
				timeLeft = 100;
				alpha = 255;
				extraUpdates = 1;
			}
			else if (type == 377)
			{
				width = 66;
				height = 50;
				aiStyle = 53;
				timeLeft = 7200;
				ignoreWater = true;
				sentry = true;
			}
			else if (type == 378)
			{
				width = 16;
				height = 16;
				aiStyle = 14;
				friendly = true;
				penetrate = -1;
				timeLeft = 60;
				scale = 0.9f;
			}
			else if (type == 379)
			{
				width = 14;
				height = 10;
				aiStyle = 63;
				friendly = true;
				timeLeft = 300;
				penetrate = 1;
			}
			else if (type == 380)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 383)
			{
				width = 34;
				height = 34;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
			}
			else if (type == 384)
			{
				width = 150;
				height = 42;
				hostile = true;
				penetrate = -1;
				aiStyle = 64;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				timeLeft = 540;
			}
			else if (type == 385)
			{
				width = 30;
				height = 30;
				hostile = true;
				penetrate = -1;
				aiStyle = 65;
				alpha = 255;
				timeLeft = 300;
			}
			else if (type == 386)
			{
				width = 150;
				height = 42;
				hostile = true;
				penetrate = -1;
				aiStyle = 64;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				timeLeft = 840;
			}
			else if (type == 387)
			{
				netImportant = true;
				width = 40;
				height = 20;
				aiStyle = 66;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0.5f;
				tileCollide = false;
				ignoreWater = true;
				friendly = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 18;
			}
			else if (type == 388)
			{
				netImportant = true;
				width = 40;
				height = 20;
				aiStyle = 66;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0.5f;
				tileCollide = false;
				ignoreWater = true;
				friendly = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 18;
			}
			else if (type == 389)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
			}
			else if (type == 390 || type == 391 || type == 392)
			{
				width = 18;
				height = 18;
				aiStyle = 26;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 15;
			}
			else if (type == 393 || type == 394 || type == 395)
			{
				width = 20;
				height = 30;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 18;
				decidesManualFallThrough = true;
			}
			else if (type == 396)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				alpha = 100;
			}
			else if (type == 397)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				tileCollide = false;
			}
			else if (type == 398)
			{
				netImportant = true;
				width = 18;
				height = 38;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 399)
			{
				width = 14;
				height = 14;
				aiStyle = 68;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				ranged = true;
				noEnchantments = true;
			}
			else if (type >= 400 && type <= 402)
			{
				if (type == 400)
				{
					width = 14;
					height = 16;
				}
				else if (type == 401)
				{
					width = 12;
					height = 14;
				}
				else
				{
					width = 6;
					height = 12;
				}
				penetrate = 3;
				aiStyle = 14;
				friendly = true;
				timeLeft = 360;
				ranged = true;
				noEnchantments = true;
			}
			else if (type == 403)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 404)
			{
				width = 26;
				height = 26;
				aiStyle = 69;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
			}
			else if (type == 405)
			{
				width = 14;
				height = 14;
				aiStyle = 70;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 90;
				melee = true;
				noEnchantments = true;
			}
			else if (type == 406)
			{
				width = 14;
				height = 14;
				aiStyle = 60;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
			}
			else if (type == 407)
			{
				netImportant = true;
				width = 28;
				height = 40;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 408)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 409)
			{
				width = 30;
				height = 30;
				penetrate = -1;
				aiStyle = 71;
				alpha = 255;
				timeLeft = 360;
				friendly = true;
				tileCollide = true;
				extraUpdates = 2;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 410)
			{
				width = 14;
				height = 14;
				aiStyle = 72;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 50;
				magic = true;
				ignoreWater = true;
			}
			else if (type >= 411 && type <= 414)
			{
				switch (type)
				{
				}
				width = 10;
				height = 10;
				aiStyle = 10;
			}
			else if (type == 415 || type == 416 || type == 417 || type == 418)
			{
				width = 14;
				height = 14;
				aiStyle = 34;
				friendly = true;
				ranged = true;
				timeLeft = 45;
			}
			else if (type >= 419 && type <= 422)
			{
				width = 4;
				height = 4;
				aiStyle = 73;
				friendly = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 3;
			}
			else if (type == 423)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 1f;
				ignoreWater = true;
			}
			else if (type >= 424 && type <= 426)
			{
				width = 24;
				height = 24;
				aiStyle = 1;
				friendly = true;
				magic = true;
				tileCollide = false;
				extraUpdates = 2;
			}
			else if (type == 427)
			{
				width = 22;
				height = 56;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 2;
			}
			else if (type == 428)
			{
				width = 26;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 3;
			}
			else if (type == 429)
			{
				width = 18;
				height = 56;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 7;
			}
			else if (type == 430)
			{
				width = 30;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 8;
			}
			else if (type == 431)
			{
				width = 28;
				height = 64;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 432)
			{
				width = 30;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 610)
			{
				width = 28;
				height = 64;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 179;
			}
			else if (type == 609)
			{
				width = 30;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 180;
			}
			else if (type == 433)
			{
				width = 8;
				height = 8;
				aiStyle = 48;
				friendly = true;
				extraUpdates = 100;
				timeLeft = 100;
				ignoreWater = true;
			}
			else if (type == 434)
			{
				width = 1;
				height = 1;
				aiStyle = 74;
				friendly = true;
				extraUpdates = 100;
				penetrate = -1;
			}
			else if (type == 435)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				ignoreWater = true;
			}
			else if (type == 436)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				ignoreWater = true;
			}
			else if (type == 437)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				extraUpdates = 2;
				ignoreWater = true;
			}
			else if (type == 438)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 3;
				ignoreWater = true;
			}
			else if (type == 439)
			{
				width = 22;
				height = 22;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 440)
			{
				width = 5;
				height = 5;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				extraUpdates = 2;
				scale = 1f;
				timeLeft = 600;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 441)
			{
				width = 1;
				height = 1;
				aiStyle = 76;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 442)
			{
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				scale = 1f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 443)
			{
				width = 80;
				height = 80;
				aiStyle = 77;
				friendly = true;
				alpha = 255;
				scale = 1f;
				ranged = true;
				ignoreWater = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 444)
			{
				width = 10;
				height = 10;
				aiStyle = 78;
				friendly = true;
				alpha = 255;
				scale = 1f;
				ranged = true;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 445)
			{
				width = 10;
				height = 10;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				melee = true;
				ignoreWater = true;
				ownerHitCheck = true;
			}
			else if (type == 446)
			{
				netImportant = true;
				width = 14;
				height = 14;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				light = 0.7f;
			}
			else if (type == 447)
			{
				width = 30;
				height = 30;
				aiStyle = 79;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 240;
			}
			else if (type == 448)
			{
				width = 14;
				height = 14;
				aiStyle = 80;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 449)
			{
				width = 5;
				height = 5;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 1;
				scale = 1f;
				timeLeft = 600;
				ignoreWater = true;
			}
			else if (type == 450)
			{
				width = 14;
				height = 14;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 360;
			}
			else if (type == 451)
			{
				width = 16;
				height = 16;
				aiStyle = 81;
				melee = true;
				penetrate = 3;
				light = 0.2f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 452)
			{
				width = 14;
				height = 14;
				aiStyle = 82;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
			}
			else if (type == 453)
			{
				width = 1;
				height = 1;
				aiStyle = 76;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 454)
			{
				width = 46;
				height = 46;
				aiStyle = 83;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 455)
			{
				width = 36;
				height = 36;
				aiStyle = 84;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 456)
			{
				width = 16;
				height = 16;
				aiStyle = 85;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 459)
			{
				width = 22;
				height = 22;
				aiStyle = 1;
				friendly = true;
				magic = true;
				alpha = 255;
				scale = 1f;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 460)
			{
				width = 14;
				height = 18;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 461)
			{
				width = 18;
				height = 18;
				aiStyle = 84;
				friendly = true;
				magic = true;
				penetrate = -1;
				alpha = 255;
				tileCollide = false;
				hide = true;
			}
			else if (type == 462)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 3;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 463)
			{
				width = 48;
				height = 48;
				aiStyle = 6;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 464)
			{
				width = 60;
				height = 60;
				aiStyle = 86;
				hostile = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 467)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 468)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 465)
			{
				width = 80;
				height = 80;
				aiStyle = 88;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 466)
			{
				width = 14;
				height = 14;
				aiStyle = 88;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = true;
				extraUpdates = 4;
				timeLeft = 120 * (extraUpdates + 1);
			}
			else if (type == 491)
			{
				width = 26;
				height = 26;
				aiStyle = 9;
				friendly = true;
				melee = true;
				penetrate = -1;
			}
			else if (type == 500)
			{
				width = 20;
				height = 20;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 499)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 469)
			{
				alpha = 255;
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 470)
			{
				width = 10;
				height = 10;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 471)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				scale = 1.2f;
				hostile = true;
				ranged = true;
			}
			else if (type == 472)
			{
				width = 8;
				height = 8;
				aiStyle = 0;
				hostile = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
				timeLeft = 50;
			}
			else if (type == 474)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 1200;
				penetrate = 2;
			}
			else if (type == 473)
			{
				netImportant = true;
				width = 8;
				height = 8;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 2;
			}
			else if (type == 475)
			{
				width = 14;
				height = 14;
				aiStyle = 35;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 400;
			}
			else if (type == 476)
			{
				width = 200;
				height = 200;
				aiStyle = -1;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 3;
				magic = true;
			}
			else if (type == 477)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				penetrate = 7;
				extraUpdates = 1;
				ranged = true;
			}
			else if (type == 478)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				timeLeft = 300;
				ranged = true;
			}
			else if (type == 479)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 480)
			{
				alpha = 255;
				width = 12;
				height = 12;
				penetrate = 3;
				aiStyle = 14;
				friendly = true;
				timeLeft = 120;
				ranged = true;
				noEnchantments = true;
			}
			else if (type == 481)
			{
				width = 22;
				height = 22;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
				extraUpdates = 0;
			}
			else if (type == 482)
			{
				width = 16;
				height = 200;
				aiStyle = 87;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 2700;
				magic = true;
			}
			else if (type == 483)
			{
				width = 14;
				height = 14;
				aiStyle = 14;
				friendly = true;
				melee = true;
			}
			else if (type == 484)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 485)
			{
				arrow = true;
				width = 24;
				height = 24;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				penetrate = -1;
				timeLeft = 1200;
			}
			else if (type >= 486 && type <= 489)
			{
				if (type == 486)
				{
					width = 12;
					height = 12;
				}
				else if (type == 487)
				{
					width = 22;
					height = 22;
				}
				else if (type == 488)
				{
					width = 12;
					height = 12;
					light = 0.3f;
				}
				else if (type == 489)
				{
					width = 20;
					height = 16;
				}
				netImportant = true;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 492)
			{
				netImportant = true;
				width = 18;
				height = 32;
				aiStyle = 90;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 490)
			{
				width = 14;
				height = 14;
				aiStyle = 89;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = false;
				timeLeft = 600;
				netImportant = true;
			}
			else if (type == 493 || type == 494)
			{
				width = 32;
				height = 32;
				aiStyle = 4;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				magic = true;
				light = 0.2f;
			}
			else if (type == 495)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				penetrate = 3;
				timeLeft = 1200;
			}
			else if (type == 496)
			{
				alpha = 255;
				width = 40;
				height = 40;
				aiStyle = 91;
				friendly = true;
				magic = true;
				MaxUpdates = 3;
				penetrate = 3;
			}
			else if (type == 497)
			{
				width = 30;
				height = 30;
				aiStyle = 2;
				friendly = true;
				penetrate = 3;
				melee = true;
			}
			else if (type == 498)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				timeLeft = 180;
			}
			else if (type == 501)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				scale = 1.1f;
				hostile = true;
				ranged = true;
			}
			else if (type == 502)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				melee = true;
				penetrate = 5;
			}
			else if (type == 503)
			{
				width = 24;
				height = 24;
				aiStyle = 5;
				friendly = true;
				penetrate = 2;
				alpha = 255;
				tileCollide = false;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 504)
			{
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
				melee = true;
				alpha = 255;
				penetrate = 2;
				noEnchantmentVisuals = true;
			}
			else if (type == 507)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				penetrate = 3;
			}
			else if (type == 508)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 509)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.2f;
			}
			else if (type == 510)
			{
				width = 18;
				height = 18;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				magic = true;
			}
			else if (type == 511)
			{
				width = 32;
				height = 32;
				aiStyle = 92;
				friendly = true;
				penetrate = -1;
				scale = 1.1f;
				magic = true;
			}
			else if (type == 512)
			{
				width = 40;
				height = 38;
				aiStyle = 92;
				friendly = true;
				penetrate = -1;
				scale = 1.1f;
				magic = true;
			}
			else if (type == 513)
			{
				width = 30;
				height = 28;
				aiStyle = 92;
				friendly = true;
				penetrate = -1;
				scale = 1.1f;
				magic = true;
			}
			else if (type == 514)
			{
				width = 10;
				height = 10;
				aiStyle = 93;
				friendly = true;
				penetrate = 3;
				alpha = 255;
				ranged = true;
			}
			else if (type == 515)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 5;
			}
			else if (type == 516)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 517)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 518)
			{
				width = 32;
				height = 32;
				aiStyle = 94;
				friendly = true;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 519)
			{
				width = 24;
				height = 24;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 520)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 3;
				ranged = true;
				coldDamage = true;
			}
			else if (type == 521)
			{
				width = 14;
				height = 14;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 522)
			{
				width = 8;
				height = 8;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 523)
			{
				width = 32;
				height = 32;
				aiStyle = 95;
				alpha = 255;
				ranged = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 524)
			{
				width = 10;
				height = 10;
				aiStyle = 96;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				ignoreWater = true;
				melee = true;
				extraUpdates = 5;
			}
			else if (type == 525)
			{
				width = 30;
				height = 24;
				aiStyle = 97;
				tileCollide = false;
				timeLeft = 10800;
				hide = true;
			}
			else if (type == 526)
			{
				width = 8;
				height = 8;
				aiStyle = 98;
				tileCollide = false;
				timeLeft = 120;
				alpha = 255;
			}
			else if (type >= 527 && type <= 531)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 532)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				scale = 1f;
				friendly = true;
				ranged = true;
				penetrate = 3;
				extraUpdates = 1;
			}
			else if (type == 533)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 66;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
				friendly = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 10;
			}
			else if (type == 534)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
			}
			else if (type >= 541 && type <= 555)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
				if (type == 547)
				{
					scale = 1.1f;
				}
				if (type == 554)
				{
					scale = 1.2f;
				}
				if (type == 555)
				{
					scale = 1.15f;
				}
				if (type == 551 || type == 550)
				{
					scale = 1.1f;
				}
			}
			else if (type >= 562 && type <= 564)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
				if (type == 563)
				{
					scale = 1.05f;
				}
				if (type == 564)
				{
					scale = 1.075f;
				}
			}
			else if (type == 603)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1.15f;
			}
			else if (type == 604)
			{
				extraUpdates = 0;
				width = 14;
				height = 14;
				aiStyle = 115;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1.2f;
			}
			else if (type >= 556 && type <= 561)
			{
				extraUpdates = 0;
				width = 10;
				height = 10;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
				counterweight = true;
			}
			else if (type == 535)
			{
				width = 18;
				height = 18;
				aiStyle = 100;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 536)
			{
				width = 10;
				height = 10;
				aiStyle = 101;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 537)
			{
				width = 22;
				height = 22;
				aiStyle = 84;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 240;
				tileCollide = false;
			}
			else if (type == 538)
			{
				width = 12;
				height = 12;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 120;
				extraUpdates = 1;
				alpha = 255;
			}
			else if (type == 539)
			{
				width = 18;
				height = 30;
				aiStyle = 102;
				hostile = true;
				penetrate = -1;
				timeLeft = 600;
			}
			else if (type == 540)
			{
				width = 20;
				height = 20;
				aiStyle = 103;
				hostile = true;
				penetrate = -1;
				timeLeft = 300;
				alpha = 255;
			}
			else if (type == 565)
			{
				width = 28;
				height = 28;
				aiStyle = 104;
				penetrate = -1;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				scale = 0.8f;
			}
			else if (type == 566)
			{
				width = 16;
				height = 16;
				aiStyle = 36;
				friendly = true;
				penetrate = 4;
				alpha = 255;
				timeLeft = 660;
				extraUpdates = 3;
			}
			else if (type == 567 || type == 568)
			{
				if (type == 567)
				{
					width = 14;
					height = 14;
				}
				else
				{
					width = 16;
					height = 16;
				}
				aiStyle = 105;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 3600;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type >= 569 && type <= 571)
			{
				width = 32;
				height = 32;
				aiStyle = 106;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 3600;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 575)
			{
				width = 24;
				height = 24;
				aiStyle = 107;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 420;
				alpha = 255;
			}
			else if (type == 573)
			{
				width = 18;
				height = 30;
				aiStyle = 102;
				hostile = true;
				penetrate = -1;
				timeLeft = 600;
			}
			else if (type == 574)
			{
				width = 18;
				height = 18;
				aiStyle = 102;
				hostile = true;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 572)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 576)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
			}
			else if (type == 577)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
			}
			else if (type == 578 || type == 579 || type == 813)
			{
				width = 32;
				height = 32;
				aiStyle = 108;
				friendly = true;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				hostile = true;
				hide = true;
			}
			else if (type == 580)
			{
				width = 14;
				height = 14;
				aiStyle = 88;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = true;
				extraUpdates = 4;
				timeLeft = 600;
			}
			else if (type == 581)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 582)
			{
				width = 20;
				height = 20;
				aiStyle = 109;
				friendly = true;
				penetrate = -1;
				MaxUpdates = 2;
			}
			else if (type == 583)
			{
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
				scale = 0.8f;
			}
			else if (type == 589)
			{
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
			}
			else if (type == 584)
			{
				width = 10;
				height = 10;
				aiStyle = 110;
				friendly = true;
				scale = 0.8f;
				penetrate = 3;
			}
			else if (type == 585)
			{
				width = 26;
				height = 26;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				penetrate = 3;
			}
			else if (type == 586)
			{
				width = 26;
				height = 26;
				aiStyle = 111;
				alpha = 255;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 587)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				ranged = true;
			}
			else if (type == 588)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 590)
			{
				width = 14;
				height = 14;
				aiStyle = 112;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 900;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 591)
			{
				width = 8;
				height = 8;
				aiStyle = 101;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ignoreWater = true;
			}
			else if (type == 592)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 3;
				ignoreWater = true;
			}
			else if (type == 593)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 1;
				ignoreWater = true;
			}
			else if (type == 594)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				alpha = 255;
				extraUpdates = 2;
			}
			else if (type == 595)
			{
				width = 68;
				height = 64;
				aiStyle = 75;
				friendly = true;
				tileCollide = false;
				melee = true;
				penetrate = -1;
				ownerHitCheck = true;
			}
			else if (type == 596)
			{
				width = 8;
				height = 8;
				aiStyle = 107;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 180;
				tileCollide = false;
			}
			else if (type == 597)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 598)
			{
				width = 16;
				height = 16;
				aiStyle = 113;
				friendly = true;
				ranged = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
			}
			else if (type == 599)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 6;
				ranged = true;
			}
			else if (type == 600)
			{
				width = 14;
				height = 14;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ignoreWater = true;
			}
			else if (type == 601)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				extraUpdates = 30;
			}
			else if (type == 602)
			{
				width = 10;
				height = 10;
				aiStyle = 114;
				alpha = 255;
				friendly = true;
				tileCollide = false;
				netImportant = true;
			}
			else if (type == 605)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 606)
			{
				width = 5;
				height = 5;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				extraUpdates = 2;
				scale = 1f;
				timeLeft = 600;
				ignoreWater = true;
			}
			else if (type == 607)
			{
				width = 10;
				height = 10;
				aiStyle = 116;
				friendly = true;
				alpha = 255;
				timeLeft = 600;
				ignoreWater = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 608)
			{
				width = 160;
				height = 160;
				aiStyle = 117;
				friendly = true;
				alpha = 255;
				timeLeft = 3;
				ignoreWater = true;
				tileCollide = false;
				penetrate = -1;
				hide = true;
			}
			else if (type == 611)
			{
				width = 16;
				height = 16;
				aiStyle = 75;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				tileCollide = false;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				noEnchantmentVisuals = true;
			}
			else if (type == 612)
			{
				width = 8;
				height = 8;
				aiStyle = 117;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 60;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
			}
			else if (type == 613)
			{
				netImportant = true;
				width = 24;
				height = 24;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 1f;
				ignoreWater = true;
			}
			else if (type == 614)
			{
				width = 16;
				height = 16;
				aiStyle = 113;
				friendly = true;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 615)
			{
				width = 22;
				height = 22;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 616)
			{
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				ranged = true;
				extraUpdates = 2;
				timeLeft = 90 * MaxUpdates;
			}
			else if (type == 617)
			{
				width = 32;
				height = 32;
				aiStyle = 118;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				hide = true;
				magic = true;
				penetrate = 3;
				usesLocalNPCImmunity = true;
			}
			else if (type == 618)
			{
				tileCollide = false;
				width = 18;
				height = 30;
				aiStyle = 119;
				penetrate = -1;
				timeLeft = 420;
				magic = true;
				friendly = true;
				usesLocalNPCImmunity = true;
			}
			else if (type == 619)
			{
				width = 14;
				height = 14;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 620)
			{
				width = 8;
				height = 8;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 622)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				extraUpdates = 2;
			}
			else if (type == 623)
			{
				netImportant = true;
				width = 50;
				height = 80;
				aiStyle = 120;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 0f;
				ignoreWater = true;
				tileCollide = false;
				netImportant = true;
				manualDirectionChange = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 5;
			}
			else if (type == 624)
			{
				width = 8;
				height = 8;
				aiStyle = 117;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 60;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type >= 625 && type <= 628)
			{
				if (type == 625 || type == 628)
				{
					netImportant = true;
				}
				if (type == 626 || type == 627)
				{
					minionSlots = 0.5f;
				}
				width = 24;
				height = 24;
				aiStyle = 121;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				alpha = 255;
				hide = true;
				netImportant = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 7;
			}
			else if (type == 629)
			{
				width = 8;
				height = 8;
				aiStyle = 122;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 3600;
				tileCollide = false;
				penetrate = -1;
				extraUpdates = 2;
			}
			else if (type == 630 || type == 705)
			{
				width = 22;
				height = 22;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 631)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 122;
				friendly = true;
				ranged = true;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 1;
				timeLeft = 1200;
			}
			else if (type == 633)
			{
				width = 14;
				height = 18;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 632)
			{
				width = 18;
				height = 18;
				aiStyle = 84;
				friendly = true;
				magic = true;
				penetrate = -1;
				alpha = 255;
				tileCollide = false;
			}
			else if (type == 634)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 2;
				magic = true;
			}
			else if (type == 635)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				friendly = true;
				extraUpdates = 3;
				magic = true;
			}
			else if (type == 636)
			{
				width = 16;
				height = 16;
				aiStyle = 113;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				MaxUpdates = 2;
			}
			else if (type == 637)
			{
				width = 10;
				height = 10;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 638)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				extraUpdates = 5;
				timeLeft = 600;
				ranged = true;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				penetrate = -1;
			}
			else if (type == 639)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				MaxUpdates = 2;
				timeLeft = MaxUpdates * 45;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				alpha = 255;
				penetrate = 4;
			}
			else if (type == 640)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				MaxUpdates = 3;
				timeLeft = 90;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				alpha = 255;
				penetrate = 4;
			}
			else if (type == 642)
			{
				width = 18;
				height = 18;
				aiStyle = 84;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				tileCollide = false;
				usesLocalNPCImmunity = true;
			}
			else if (type == 641)
			{
				width = 32;
				height = 32;
				aiStyle = 123;
				timeLeft = 7200;
				ignoreWater = true;
				tileCollide = false;
				alpha = 255;
				hide = true;
				sentry = true;
			}
			else if (type == 643)
			{
				width = 32;
				height = 32;
				aiStyle = 123;
				timeLeft = 7200;
				ignoreWater = true;
				tileCollide = false;
				alpha = 255;
				sentry = true;
			}
			else if (type == 644)
			{
				width = 14;
				height = 14;
				aiStyle = 112;
				penetrate = 1;
				timeLeft = 900;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
			}
			else if (type == 645)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				magic = true;
				tileCollide = false;
				extraUpdates = 5;
				penetrate = -1;
				usesLocalNPCImmunity = true;
			}
			else if (type >= 646 && type <= 649)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 650)
			{
				width = 20;
				height = 20;
				aiStyle = 124;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type == 651)
			{
				width = 10;
				height = 10;
				aiStyle = 125;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 652)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 653)
			{
				width = 30;
				height = 30;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 654)
			{
				width = 30;
				height = 30;
				aiStyle = 126;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				friendly = true;
				hostile = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 655)
			{
				width = 31;
				height = 31;
				aiStyle = 25;
				friendly = true;
				hostile = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 656)
			{
				width = 10;
				height = 10;
				aiStyle = 127;
				friendly = true;
				magic = true;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				timeLeft = 1200;
			}
			else if (type == 657)
			{
				width = 10;
				height = 10;
				aiStyle = 127;
				hostile = true;
				tileCollide = false;
				penetrate = -1;
				timeLeft = 1200;
			}
			else if (type == 658)
			{
				width = 14;
				height = 14;
				aiStyle = 128;
				penetrate = 1;
				timeLeft = 900;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				hostile = true;
			}
			else if (type == 659)
			{
				width = 8;
				height = 8;
				aiStyle = 129;
				friendly = true;
				magic = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 180;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 660)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				timeLeft = 600;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 661)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				timeLeft = 40;
				extraUpdates = 1;
				ranged = true;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
			}
			else if (type == 662 || type == 685)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 663 || type == 665 || type == 667)
			{
				width = 30;
				height = 54;
				aiStyle = 130;
				timeLeft = 7200;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
				switch (type)
				{
				case 665:
					height = 58;
					width = 28;
					break;
				case 667:
					height = 60;
					width = 28;
					break;
				}
				sentry = true;
				netImportant = true;
			}
			else if (type == 664 || type == 666 || type == 668)
			{
				width = 16;
				height = 16;
				aiStyle = 131;
				friendly = true;
				alpha = 255;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 669)
			{
				width = 14;
				height = 14;
				aiStyle = 68;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				ranged = true;
				noEnchantments = true;
			}
			else if (type == 670)
			{
				width = 30;
				height = 30;
				aiStyle = 126;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 671)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 672)
			{
				width = 10;
				height = 10;
				aiStyle = 132;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 900;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 674 || type == 673)
			{
				width = 10;
				height = 10;
				aiStyle = 133;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 900;
				hostile = true;
				penetrate = -1;
				hide = true;
			}
			else if (type == 675)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 676)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 677 || type == 678 || type == 679)
			{
				width = 26;
				height = 54;
				aiStyle = 134;
				timeLeft = 7200;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
				sentry = true;
				netImportant = true;
			}
			else if (type == 680)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				friendly = true;
				penetrate = 4;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 681)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				hostile = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 682)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				ignoreWater = true;
				timeLeft = 30;
				scale = 1.2f;
			}
			else if (type == 683)
			{
				width = 30;
				height = 30;
				aiStyle = 135;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 684)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				melee = true;
				penetrate = 5;
				alpha = 255;
				friendly = true;
				tileCollide = false;
			}
			else if (type == 686)
			{
				width = 30;
				height = 30;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 687)
			{
				width = 30;
				height = 30;
				aiStyle = 136;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 688 || type == 689 || type == 690)
			{
				width = 16;
				height = 16;
				aiStyle = 137;
				friendly = true;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				timeLeft = 7200;
				localNPCHitCooldown = 3;
				tileCollide = false;
				penetrate = -1;
				sentry = true;
				netImportant = true;
			}
			else if (type == 691 || type == 692 || type == 693)
			{
				width = 16;
				height = 16;
				aiStyle = 138;
				ignoreWater = true;
				friendly = true;
				timeLeft = 7200;
				tileCollide = false;
				penetrate = -1;
				hide = true;
				sentry = true;
				netImportant = true;
			}
			else if (type == 694 || type == 695 || type == 696)
			{
				aiStyle = 139;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 30;
				alpha = 255;
				width = 96;
				height = 96;
			}
			else if (type == 697)
			{
				width = 16;
				height = 16;
				aiStyle = 140;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				tileCollide = false;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 12;
				ownerHitCheck = true;
			}
			else if (type == 698)
			{
				width = 50;
				height = 200;
				aiStyle = 141;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				friendly = true;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				melee = true;
			}
			else if (type == 699)
			{
				width = 24;
				height = 24;
				aiStyle = 142;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				tileCollide = false;
				ignoreWater = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 36;
				ownerHitCheck = true;
			}
			else if (type == 700)
			{
				width = 40;
				height = 40;
				aiStyle = 143;
				alpha = 255;
				penetrate = -1;
				friendly = true;
				melee = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 703 || type == 701 || type == 702)
			{
				width = 20;
				height = 20;
				aiStyle = 144;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				scale = 1f;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type == 704)
			{
				width = 60;
				height = 210;
				aiStyle = 145;
				friendly = true;
				magic = true;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				timeLeft = 600;
				localNPCHitCooldown = -1;
				ignoreWater = true;
			}
			else if (type == 706)
			{
				width = 66;
				height = 66;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				timeLeft = 300;
				ranged = true;
				usesLocalNPCImmunity = true;
				penetrate = -1;
				localNPCHitCooldown = 10;
			}
			else if (type == 707)
			{
				width = 16;
				height = 16;
				aiStyle = 140;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				tileCollide = false;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 6;
				ownerHitCheck = true;
			}
			else if (type == 708)
			{
				width = 24;
				height = 24;
				aiStyle = 142;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				tileCollide = false;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 6;
				ownerHitCheck = true;
			}
			else if (type == 709)
			{
				width = 12;
				height = 12;
				aiStyle = 1;
				friendly = true;
				melee = true;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 1;
				noEnchantments = true;
				scale = 0.6f;
			}
			else if (type == 710)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				ignoreWater = true;
				extraUpdates = 1;
				timeLeft = extraUpdates * 60 * 5;
				usesLocalNPCImmunity = true;
				alpha = 255;
				localNPCHitCooldown = -1;
			}
			else if (type == 711)
			{
				width = 30;
				height = 30;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				magic = true;
				extraUpdates = 1;
				scale = 0.7f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 712)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				timeLeft = 600;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 713)
			{
				width = 10;
				height = 10;
				aiStyle = 146;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 900;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 714)
			{
				width = 22;
				height = 22;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 715 || type == 717)
			{
				width = 14;
				height = 14;
				aiStyle = 147;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				ranged = true;
				extraUpdates = 2;
				timeLeft = 360 * MaxUpdates;
			}
			else if (type == 716 || type == 718)
			{
				width = 14;
				height = 14;
				aiStyle = 147;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				ranged = true;
				extraUpdates = 2;
				timeLeft = 360 * MaxUpdates;
			}
			else if (type == 719)
			{
				width = 10;
				height = 10;
				hostile = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
			}
			else if (type == 720)
			{
				width = 16;
				height = 16;
				aiStyle = 148;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 721 || type == 739 || type == 740 || type == 741 || type == 742 || type == 743 || type == 744 || type == 745 || type == 746 || type == 747 || type == 748 || type == 749 || type == 750 || type == 751 || type == 752)
			{
				netImportant = true;
				width = 7;
				height = 7;
				friendly = true;
				penetrate = -1;
				aiStyle = 149;
				tileCollide = false;
			}
			else if (type == 722)
			{
				width = 2;
				height = 2;
				aiStyle = 150;
				tileCollide = false;
				ignoreWater = true;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 723 || type == 724 || type == 725 || type == 726)
			{
				width = 24;
				height = 24;
				aiStyle = 5;
				friendly = true;
				penetrate = 2;
				alpha = 50;
				tileCollide = false;
			}
			else if (type == 728)
			{
				width = 24;
				height = 24;
				aiStyle = 151;
				alpha = 255;
				tileCollide = true;
				ranged = true;
				friendly = true;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 729)
			{
				width = 20;
				height = 20;
				aiStyle = 152;
				friendly = true;
				tileCollide = false;
				ignoreWater = true;
				ranged = true;
				penetrate = -1;
				scale = 1f + (float)Main.rand.Next(30) * 0.01f;
				extraUpdates = 2;
				timeLeft = 10 * MaxUpdates;
			}
			else if (type == 730)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 731)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				friendly = true;
				extraUpdates = 1;
				timeLeft = 90;
			}
			else if (type == 732)
			{
				tileCollide = true;
				width = 15;
				height = 15;
				aiStyle = 44;
				friendly = true;
				penetrate = 1;
				melee = true;
				noEnchantmentVisuals = true;
			}
			else if (type == 733)
			{
				width = 2;
				height = 2;
				aiStyle = 153;
				tileCollide = false;
				ignoreWater = true;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 734)
			{
				width = 30;
				height = 24;
				aiStyle = 154;
				tileCollide = false;
				timeLeft = 10800;
				alpha = 255;
				hide = true;
			}
			else if (type == 735)
			{
				width = 68;
				height = 64;
				aiStyle = 75;
				friendly = true;
				tileCollide = false;
				melee = true;
				penetrate = -1;
				ownerHitCheck = true;
			}
			else if (type == 736 || type == 737 || type == 738)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				penetrate = -1;
			}
			else if (type == 753)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 754)
			{
				width = 16;
				height = 16;
				aiStyle = 155;
				tileCollide = false;
				ignoreWater = true;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 755)
			{
				netImportant = true;
				width = 10;
				height = 10;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				minion = true;
				minionSlots = 1f;
				timeLeft *= 5;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 15;
				aiStyle = 156;
			}
			else if (type == 756)
			{
				width = 32;
				height = 32;
				aiStyle = 157;
				friendly = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				ignoreWater = true;
				penetrate = 2;
			}
			else if (type == 757)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 758)
			{
				width = 20;
				height = 30;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				decidesManualFallThrough = true;
			}
			else if (type == 759)
			{
				netImportant = true;
				width = 10;
				height = 10;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = true;
				friendly = true;
				minion = true;
				minionSlots = 1f;
				timeLeft *= 5;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 15;
				aiStyle = 158;
				hide = true;
			}
			else if (type == 761 || type == 762)
			{
				width = 10;
				height = 10;
				aiStyle = 159;
				friendly = true;
				manualDirectionChange = true;
			}
			else if (type == 763)
			{
				width = 10;
				height = 10;
				hostile = true;
				friendly = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
				extraUpdates = 1;
			}
			else if (type == 764)
			{
				width = 20;
				height = 20;
				aiStyle = 144;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type == 765)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if ((type >= 766 && type <= 770) || type == 771)
			{
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 772)
			{
				width = 22;
				height = 22;
				friendly = true;
				aiStyle = 1;
				tileCollide = true;
				extraUpdates = 1;
			}
			else if (type == 773)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 774)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 802)
			{
				width = 18;
				height = 18;
				aiStyle = 161;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1f;
				ownerHitCheck = true;
				melee = true;
				extraUpdates = 1;
				hide = true;
			}
			else if (type == 811 || type == 814)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if ((type >= 776 && type <= 801) || (type >= 803 && type <= 810))
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				if (type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 800)
				{
					usesLocalNPCImmunity = true;
					localNPCHitCooldown = -1;
				}
			}
			else if (type == 812)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 815)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 816)
			{
				netImportant = true;
				width = 26;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 817)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 819)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				extraUpdates = 1;
				hide = true;
				friendly = true;
			}
			else if (type == 818)
			{
				width = 32;
				height = 32;
				aiStyle = 162;
				friendly = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				ignoreWater = true;
				penetrate = -1;
				extraUpdates = 3;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 820)
			{
				width = 12;
				height = 12;
				friendly = true;
				aiStyle = 163;
				tileCollide = true;
				netImportant = true;
				penetrate = -1;
				timeLeft = 86400;
			}
			else if (type == 821)
			{
				netImportant = true;
				width = 20;
				height = 36;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type >= 822 && type <= 824)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 825)
			{
				netImportant = true;
				width = 26;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type >= 826 && type <= 830)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 836)
			{
				width = 4;
				height = 4;
				aiStyle = 112;
				hostile = true;
			}
			else if (type == 831)
			{
				netImportant = true;
				width = 10;
				height = 10;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				minion = true;
				minionSlots = 1f;
				timeLeft = 60;
				aiStyle = 164;
				hide = true;
			}
			else if (type == 833)
			{
				width = 26;
				height = 20;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0f;
				decidesManualFallThrough = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 834)
			{
				width = 20;
				height = 30;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0f;
				decidesManualFallThrough = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 835)
			{
				width = 20;
				height = 30;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0f;
				decidesManualFallThrough = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 837)
			{
				width = 26;
				height = 26;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				magic = true;
				penetrate = 3;
			}
			else if (type >= 838 && type <= 840)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 841)
			{
				DefaultToWhip();
			}
			else if (type == 842)
			{
				width = 18;
				height = 18;
				aiStyle = 161;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1f;
				ownerHitCheck = true;
				melee = true;
				extraUpdates = 1;
				hide = true;
			}
			else if (type >= 843 && type <= 846)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 847)
			{
				DefaultToWhip();
				extraUpdates = 2;
			}
			else if (type == 848)
			{
				DefaultToWhip();
			}
			else if (type == 849)
			{
				DefaultToWhip();
				extraUpdates = 2;
			}
			else if (type == 850)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 851)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 166;
				penetrate = -1;
				timeLeft = 300;
			}
			else if (type >= 852 && type <= 853)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 854)
			{
				netImportant = true;
				width = 26;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 855)
			{
				netImportant = true;
				width = 12;
				height = 12;
				aiStyle = 166;
				penetrate = -1;
				timeLeft = 1000;
			}
			else if (type == 856)
			{
				width = 32;
				height = 32;
				aiStyle = 167;
				friendly = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				ignoreWater = true;
				extraUpdates = 2;
				usesLocalNPCImmunity = true;
			}
			else if (type == 857)
			{
				width = 32;
				height = 32;
				aiStyle = 168;
				friendly = true;
				alpha = 255;
				melee = true;
				tileCollide = false;
				ignoreWater = true;
				extraUpdates = 1;
				usesLocalNPCImmunity = true;
				manualDirectionChange = true;
				penetrate = -1;
				hide = true;
			}
			else if (type == 858)
			{
				netImportant = true;
				width = 26;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 859)
			{
				netImportant = true;
				width = 20;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 860)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 861)
			{
				netImportant = true;
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
			}
			else if (type == 862 || type == 863)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 864)
			{
				netImportant = true;
				width = 10;
				height = 10;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				minion = true;
				minionSlots = 1f;
				timeLeft = 60;
				aiStyle = 169;
				localNPCHitCooldown = 40;
			}
			else if (type == 865)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 866)
			{
				light = 0.15f;
				width = 30;
				height = 30;
				aiStyle = 3;
				friendly = true;
				penetrate = 5;
				melee = true;
				extraUpdates = 1;
				usesLocalNPCImmunity = true;
			}
			else if (type == 867)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				light = 0.6f;
			}
			else if (type == 868 || type == 869)
			{
				width = 18;
				height = 18;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 870)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 5;
			}
			else if (type == 873)
			{
				width = 30;
				height = 30;
				aiStyle = 171;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 200;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 874)
			{
				width = 30;
				height = 30;
				aiStyle = 0;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 210;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 871)
			{
				width = 30;
				height = 30;
				aiStyle = 172;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 240;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 875)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 872)
			{
				width = 30;
				height = 30;
				aiStyle = 173;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 660;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 876)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 8;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 3;
				scale = 1.4f;
				timeLeft = 3600;
				magic = true;
			}
			else if (type >= 877 && type <= 879)
			{
				netImportant = true;
				width = 25;
				height = 25;
				aiStyle = 19;
				alpha = 255;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 880)
			{
				width = 32;
				height = 32;
				aiStyle = 183;
				penetrate = -1;
				timeLeft = 18;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				hostile = false;
				manualDirectionChange = true;
			}
			else if (type == 881)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 882)
			{
				width = 20;
				height = 20;
				aiStyle = 124;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type == 883)
			{
				width = 20;
				height = 20;
				aiStyle = 174;
				penetrate = -1;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				netImportant = true;
			}
			else if (type >= 884 && type <= 886)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 887)
			{
				width = 20;
				height = 20;
				aiStyle = 174;
				penetrate = -1;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				netImportant = true;
			}
			else if (type == 888)
			{
				width = 20;
				height = 20;
				aiStyle = 124;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type >= 889 && type <= 892)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 893)
			{
				width = 20;
				height = 20;
				aiStyle = 174;
				penetrate = -1;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				netImportant = true;
			}
			else if (type == 894)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type >= 895 && type <= 896)
			{
				width = 20;
				height = 20;
				aiStyle = 124;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type == 897)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 898)
			{
				width = 20;
				height = 20;
				aiStyle = 124;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type >= 899 && type <= 901)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 902)
			{
				width = 20;
				height = 20;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				MaxUpdates = 2;
			}
			else if (type >= 903 && type <= 906)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 907)
			{
				width = 22;
				height = 22;
				aiStyle = 30;
				friendly = true;
				penetrate = 2;
				melee = true;
			}
			else if (type == 908)
			{
				tileCollide = false;
				ignoreWater = true;
				width = 14;
				height = 14;
				aiStyle = 175;
				friendly = true;
				penetrate = 1;
				timeLeft = 3600;
				hide = true;
			}
			else if (type == 909)
			{
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = false;
				hostile = true;
				penetrate = 1;
			}
			else if (type == 910)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 911)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type >= 912 && type <= 915)
			{
				DefaultToWhip();
				if (type == 915)
				{
					extraUpdates = 2;
				}
			}
			else if (type == 916)
			{
				width = 18;
				height = 18;
				aiStyle = 176;
				friendly = true;
				tileCollide = false;
				penetrate = 2;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				extraUpdates = 2;
			}
			else if (type == 918)
			{
				aiStyle = 178;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				alpha = 255;
				width = 96;
				height = 96;
			}
			else if (type == 917)
			{
				width = 30;
				height = 30;
				aiStyle = 177;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 20;
			}
			else if (type == 919)
			{
				width = 8;
				height = 8;
				aiStyle = 179;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 240;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 920)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = 1;
			}
			else if (type == 921)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = 3;
			}
			else if (type == 922)
			{
				width = 30;
				height = 30;
				aiStyle = 135;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 923)
			{
				width = 30;
				height = 30;
				aiStyle = 180;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 180;
				tileCollide = false;
				ignoreWater = true;
				hide = true;
			}
			else if (type == 926)
			{
				alpha = 255;
				width = 12;
				height = 12;
				scale = 1f;
				aiStyle = 1;
				hostile = true;
				penetrate = 2;
			}
			else if (type == 927)
			{
				width = 40;
				height = 40;
				aiStyle = 75;
				friendly = true;
				tileCollide = false;
				melee = true;
				penetrate = -1;
				ownerHitCheck = true;
			}
			else if (type == 928)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 14;
				friendly = true;
				penetrate = 2;
				melee = true;
				timeLeft = 250;
			}
			else if (type == 929)
			{
				width = 32;
				height = 32;
				aiStyle = 183;
				penetrate = -1;
				timeLeft = 18;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				hostile = false;
				manualDirectionChange = true;
			}
			else if (type == 930)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 931)
			{
				width = 30;
				height = 30;
				aiStyle = 171;
				alpha = 255;
				penetrate = 3;
				friendly = true;
				timeLeft = 240;
				magic = true;
				tileCollide = true;
				ignoreWater = true;
				extraUpdates = 1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 60;
			}
			else if (type == 932)
			{
				ranged = true;
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 181;
				penetrate = 5;
				friendly = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				timeLeft = 120;
				alpha = 0;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 60;
			}
			else if (type == 933)
			{
				width = 32;
				height = 32;
				aiStyle = 182;
				friendly = true;
				melee = true;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				extraUpdates = 1;
				usesLocalNPCImmunity = true;
				manualDirectionChange = true;
				localNPCHitCooldown = 15;
				penetrate = -1;
				noEnchantmentVisuals = true;
			}
			else if (type == 934)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 935)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				extraUpdates = 3;
			}
			else if (type == 936)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				Opacity = 0.6f;
			}
			else if (type == 937)
			{
				alpha = 255;
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = false;
				friendly = true;
				penetrate = 3;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 10;
			}
			else if (type >= 938 && type <= 945)
			{
				width = 18;
				height = 18;
				aiStyle = 161;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1f;
				ownerHitCheck = true;
				melee = true;
				extraUpdates = 1;
				timeLeft = 360;
				hide = true;
			}
			else if (type == 946)
			{
				netImportant = true;
				width = 10;
				height = 10;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				minion = true;
				minionSlots = 1f;
				timeLeft *= 5;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 15;
				aiStyle = 156;
				scale = 0.75f;
				manualDirectionChange = true;
				hide = true;
			}
			else if (type == 947 || type == 948)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 949)
			{
				width = 4;
				height = 4;
				aiStyle = 184;
				penetrate = -1;
				hostile = true;
				tileCollide = false;
			}
			else
			{
				active = false;
			}
			width = (int)((float)width * scale);
			height = (int)((float)height * scale);
			maxPenetrate = penetrate;
		}

		private void DefaultToWhip()
		{
			width = 18;
			height = 18;
			aiStyle = 165;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			ownerHitCheck = true;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}

		public static int GetNextSlot()
		{
			int result = 1000;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].active)
				{
					result = i;
					break;
				}
			}
			return result;
		}

		public static int NewProjectile(Vector2 position, Vector2 velocity, int Type, int Damage, float KnockBack, int Owner = 255, float ai0 = 0f, float ai1 = 0f)
		{
			return NewProjectile(position.X, position.Y, velocity.X, velocity.Y, Type, Damage, KnockBack, Owner, ai0, ai1);
		}

		public static int FindOldestProjectile()
		{
			int result = 1000;
			int num = 9999999;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].netImportant && Main.projectile[i].timeLeft < num)
				{
					result = i;
					num = Main.projectile[i].timeLeft;
				}
			}
			return result;
		}

		public static int NewProjectile(float X, float Y, float SpeedX, float SpeedY, int Type, int Damage, float KnockBack, int Owner = 255, float ai0 = 0f, float ai1 = 0f)
		{
			int num = 1000;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].active)
				{
					num = i;
					break;
				}
			}
			if (num == 1000)
			{
				num = FindOldestProjectile();
			}
			Projectile projectile = Main.projectile[num];
			projectile.SetDefaults(Type);
			projectile.position.X = X - (float)projectile.width * 0.5f;
			projectile.position.Y = Y - (float)projectile.height * 0.5f;
			projectile.owner = Owner;
			projectile.velocity.X = SpeedX;
			projectile.velocity.Y = SpeedY;
			projectile.damage = Damage;
			projectile.knockBack = KnockBack;
			projectile.identity = num;
			projectile.gfxOffY = 0f;
			projectile.stepSpeed = 1f;
			projectile.wet = Collision.WetCollision(projectile.position, projectile.width, projectile.height);
			if (projectile.ignoreWater)
			{
				projectile.wet = false;
			}
			projectile.honeyWet = Collision.honey;
			Main.projectileIdentity[Owner, num] = num;
			if (projectile.aiStyle == 1)
			{
				while (projectile.velocity.X >= 16f || projectile.velocity.X <= -16f || projectile.velocity.Y >= 16f || projectile.velocity.Y < -16f)
				{
					projectile.velocity.X *= 0.97f;
					projectile.velocity.Y *= 0.97f;
				}
			}
			if (Owner == Main.myPlayer)
			{
				switch (Type)
				{
				case 206:
					projectile.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0005f;
					projectile.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0005f;
					break;
				case 335:
					projectile.ai[1] = Main.rand.Next(4);
					break;
				case 358:
					projectile.ai[1] = (float)Main.rand.Next(10, 31) * 0.1f;
					break;
				case 406:
					projectile.ai[1] = (float)Main.rand.Next(10, 21) * 0.1f;
					break;
				default:
					projectile.ai[0] = ai0;
					projectile.ai[1] = ai1;
					break;
				}
			}
			if (Type == 434)
			{
				projectile.ai[0] = projectile.position.X;
				projectile.ai[1] = projectile.position.Y;
			}
			if (Type > 0 && Type < 950)
			{
				if (ProjectileID.Sets.NeedsUUID[Type])
				{
					projectile.projUUID = projectile.identity;
				}
				if (ProjectileID.Sets.StardustDragon[Type])
				{
					int num2 = Main.projectile[(int)projectile.ai[0]].projUUID;
					if (num2 >= 0)
					{
						projectile.ai[0] = num2;
					}
				}
			}
			if (Main.netMode != 0 && Owner == Main.myPlayer)
			{
				NetMessage.SendData(27, -1, -1, null, num);
			}
			if (Owner == Main.myPlayer)
			{
				if (ProjectileID.Sets.IsAGolfBall[Type] && Damage <= 0)
				{
					int num3 = 0;
					int num4 = 0;
					int num5 = 99999999;
					for (int j = 0; j < 1000; j++)
					{
						if (Main.projectile[j].active && ProjectileID.Sets.IsAGolfBall[Main.projectile[j].type] && Main.projectile[j].owner == Owner && Main.projectile[j].damage <= 0)
						{
							num3++;
							if (num5 > Main.projectile[j].timeLeft)
							{
								num4 = j;
								num5 = Main.projectile[j].timeLeft;
							}
						}
					}
					if (num3 > 10)
					{
						Main.projectile[num4].Kill();
					}
				}
				if (Type == 28)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 516)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 519)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 29)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 470)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 637)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 30)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 517)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 37)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 773)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 75)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 133)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 136)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 139)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 142)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 397)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 419)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 420)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 421)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 422)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 588)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 779)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 783)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 862 || Type == 863)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 443)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 681)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 684)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 706)
				{
					projectile.timeLeft = 120;
				}
				if (Type == 680 && Main.player[projectile.owner].setSquireT2)
				{
					projectile.penetrate = 7;
				}
				if (Type == 777 || Type == 781 || Type == 794 || Type == 797 || Type == 800 || Type == 785 || Type == 788 || Type == 791 || Type == 903 || Type == 904 || Type == 905 || Type == 906 || Type == 910 || Type == 911)
				{
					projectile.timeLeft = 180;
				}
			}
			if (Type == 249)
			{
				projectile.frame = Main.rand.Next(5);
			}
			return num;
		}

		public static Color GetGolfTrailColor(Projectile proj)
		{
			return proj.type switch
			{
				739 => new Color(50, 50, 50, 80), 
				740 => new Color(30, 50, 255, 40), 
				741 => new Color(150, 90, 60, 90), 
				742 => new Color(30, 255, 170, 30), 
				743 => new Color(30, 255, 30, 40), 
				744 => new Color(190, 255, 30, 50), 
				745 => new Color(255, 130, 30, 50), 
				746 => new Color(255, 50, 110, 50), 
				747 => new Color(130, 10, 200, 40), 
				748 => new Color(255, 30, 50, 50), 
				749 => new Color(100, 180, 255, 30), 
				750 => new Color(50, 240, 160, 30), 
				751 => new Color(220, 80, 220, 70), 
				752 => new Color(255, 180, 50, 30), 
				_ => new Color(160, 160, 255, 50), 
			};
		}

		public void StatusNPC(int i)
		{
			NPC nPC = Main.npc[i];
			if (melee && Main.player[owner].meleeEnchant > 0 && !noEnchantments)
			{
				byte meleeEnchant = Main.player[owner].meleeEnchant;
				if (meleeEnchant == 1)
				{
					nPC.AddBuff(70, 60 * Main.rand.Next(5, 10));
				}
				if (meleeEnchant == 2)
				{
					nPC.AddBuff(39, 60 * Main.rand.Next(3, 7));
				}
				if (meleeEnchant == 3)
				{
					nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
				}
				if (meleeEnchant == 5)
				{
					nPC.AddBuff(69, 60 * Main.rand.Next(10, 20));
				}
				if (meleeEnchant == 6)
				{
					nPC.AddBuff(31, 60 * Main.rand.Next(1, 4));
				}
				if (meleeEnchant == 8)
				{
					nPC.AddBuff(20, 60 * Main.rand.Next(5, 10));
				}
				if (meleeEnchant == 4)
				{
					nPC.AddBuff(72, 120);
				}
			}
			if (type == 195)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(70, 60 * Main.rand.Next(5, 11));
				}
				else
				{
					nPC.AddBuff(20, 60 * Main.rand.Next(10, 21));
				}
			}
			switch (type)
			{
			case 841:
				nPC.AddBuff(307, 240);
				break;
			case 847:
				nPC.AddBuff(309, 240);
				break;
			case 849:
				nPC.AddBuff(310, 240);
				break;
			case 913:
				if (localAI[0] == 0f)
				{
					nPC.AddBuff(313, 240);
				}
				nPC.AddBuff(24, 240);
				break;
			case 914:
				nPC.AddBuff(20, 240);
				nPC.AddBuff(315, 240);
				break;
			case 848:
				nPC.AddBuff(319, 240);
				break;
			case 915:
				nPC.AddBuff(316, 240);
				break;
			}
			if (type == 664 && Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 6));
			}
			if (type == 666 && Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 9));
			}
			if (type == 668 && Main.rand.Next(3) != 0)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(6, 9));
			}
			if (type == 567 || type == 568)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(5, 11));
			}
			if (type == 598 && ai[1] == (float)i)
			{
				nPC.AddBuff(169, 900);
			}
			if (type == 636 && ai[1] == (float)i)
			{
				nPC.AddBuff(189, 300);
			}
			if (type == 611)
			{
				nPC.AddBuff(189, 300);
			}
			if (type == 612)
			{
				nPC.AddBuff(189, 300);
			}
			if (type == 711)
			{
				nPC.AddBuff(203, 600);
			}
			if (type == 706)
			{
				nPC.AddBuff(24, 480);
			}
			if (type == 614 && ai[1] == (float)i)
			{
				nPC.AddBuff(183, 900);
			}
			if (type == 585)
			{
				nPC.AddBuff(153, 60 * Main.rand.Next(5, 11));
			}
			if (type == 583)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(3, 6));
			}
			if (type == 524)
			{
				nPC.AddBuff(69, 60 * Main.rand.Next(3, 8));
			}
			if (type == 504 && Main.rand.Next(2) == 0)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(24, Main.rand.Next(60, 180));
				}
				else
				{
					nPC.AddBuff(24, Main.rand.Next(30, 120));
				}
			}
			if ((type == 694 || type == 695 || type == 696) && Main.player[owner].setHuntressT2 && Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(204, Main.rand.Next(8, 18) * 30);
			}
			if (type == 545 && Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, Main.rand.Next(60, 240));
			}
			if (type == 553)
			{
				nPC.AddBuff(24, Main.rand.Next(180, 480));
			}
			if (type == 552 && Main.rand.Next(3) != 0)
			{
				nPC.AddBuff(44, Main.rand.Next(120, 320));
			}
			if (type == 495)
			{
				nPC.AddBuff(153, Main.rand.Next(120, 300));
			}
			if (type == 497)
			{
				nPC.AddBuff(153, Main.rand.Next(60, 180));
			}
			if (type == 496)
			{
				nPC.AddBuff(153, Main.rand.Next(240, 480));
			}
			if (type == 476)
			{
				nPC.AddBuff(151, 30);
			}
			if (type == 523)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(10, 30));
			}
			if (type == 478 || type == 480)
			{
				nPC.AddBuff(39, 60 * Main.rand.Next(3, 7));
			}
			if (type == 479)
			{
				nPC.AddBuff(69, 60 * Main.rand.Next(7, 15));
			}
			if (type == 379)
			{
				nPC.AddBuff(70, 60 * Main.rand.Next(2, 5));
			}
			if (type >= 390 && type <= 392)
			{
				nPC.AddBuff(70, 60 * Main.rand.Next(2, 5));
			}
			if (type == 374)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(4, 7));
			}
			if (type == 376)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (type >= 399 && type <= 402)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (type == 295 || type == 296)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(8, 16));
			}
			if ((melee || ranged) && !npcProj && Main.player[owner].frostBurn && !noEnchantments)
			{
				nPC.AddBuff(44, 60 * Main.rand.Next(5, 15));
			}
			if (melee && Main.player[owner].magmaStone && !noEnchantments)
			{
				if (Main.rand.Next(7) == 0)
				{
					nPC.AddBuff(24, 360);
				}
				else if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(24, 120);
				}
				else
				{
					nPC.AddBuff(24, 60);
				}
			}
			if (type == 287)
			{
				nPC.AddBuff(72, 120);
			}
			if (type == 285)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(31, 180);
				}
				else
				{
					nPC.AddBuff(31, 60);
				}
			}
			if (type == 2 && Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, 180);
			}
			if (type == 172)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(44, 180);
				}
			}
			else if (type == 15)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(24, 300);
				}
			}
			else if (type == 253)
			{
				nPC.AddBuff(44, 480);
			}
			else if (type == 19)
			{
				if (Main.rand.Next(5) == 0)
				{
					nPC.AddBuff(24, 180);
				}
			}
			else if (type == 33)
			{
				if (Main.rand.Next(5) == 0)
				{
					nPC.AddBuff(20, 420);
				}
			}
			else if (type == 34)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(24, Main.rand.Next(240, 480));
				}
			}
			else if (type == 948)
			{
				if (Main.rand.Next(6) == 0)
				{
					nPC.AddBuff(24, 60 * Main.rand.Next(2, 4));
				}
			}
			else if (type == 35)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(24, 300);
				}
			}
			else if (type == 54)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(20, 600);
				}
			}
			else if (type == 267)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(20, 3600);
				}
				else
				{
					nPC.AddBuff(20, 1800);
				}
			}
			else if (type == 63)
			{
				if (Main.rand.Next(5) != 0)
				{
					nPC.AddBuff(31, 60 * Main.rand.Next(2, 5));
				}
			}
			else if (type == 85 || type == 188)
			{
				nPC.AddBuff(24, 1200);
			}
			else if (type == 95 || type == 103 || type == 104 || type == 482)
			{
				nPC.AddBuff(39, 420);
			}
			else if (type == 278 || type == 279 || type == 280)
			{
				nPC.AddBuff(69, 600);
			}
			else if (type == 282 || type == 283)
			{
				nPC.AddBuff(70, 600);
			}
			if (type == 163 || type == 310)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(24, 600);
				}
				else
				{
					nPC.AddBuff(24, 300);
				}
			}
			else if (type == 98)
			{
				nPC.AddBuff(20, 600);
			}
			else if (type == 184)
			{
				nPC.AddBuff(20, 900);
			}
			else if (type == 265)
			{
				nPC.AddBuff(20, 1800);
			}
			else if (type == 355)
			{
				nPC.AddBuff(70, 1800);
			}
		}

		public void StatusPvP(int i)
		{
			if (melee && Main.player[owner].meleeEnchant > 0 && !noEnchantments)
			{
				byte meleeEnchant = Main.player[owner].meleeEnchant;
				if (meleeEnchant == 1)
				{
					Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), quiet: false);
				}
				if (meleeEnchant == 2)
				{
					Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), quiet: false);
				}
				if (meleeEnchant == 3)
				{
					Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), quiet: false);
				}
				if (meleeEnchant == 5)
				{
					Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), quiet: false);
				}
				if (meleeEnchant == 6)
				{
					Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), quiet: false);
				}
				if (meleeEnchant == 8)
				{
					Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), quiet: false);
				}
			}
			if (type == 295 || type == 296)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16), quiet: false);
			}
			if (type >= 399 && type <= 402)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), quiet: false);
			}
			if (type == 478 || type == 480)
			{
				Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), quiet: false);
			}
			if ((melee || ranged) && Main.player[owner].frostBurn && !noEnchantments)
			{
				Main.player[i].AddBuff(44, 60 * Main.rand.Next(1, 8), quiet: false);
			}
			if (melee && Main.player[owner].magmaStone && !noEnchantments)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(24, 360, quiet: false);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 240, quiet: false);
				}
				else
				{
					Main.player[i].AddBuff(24, 120, quiet: false);
				}
			}
			if (type == 2 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 180, quiet: false);
			}
			if (type == 172)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(44, 240, quiet: false);
				}
			}
			else if (type == 15)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 300, quiet: false);
				}
			}
			else if (type == 253)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(44, 480, quiet: false);
				}
			}
			else if (type == 19)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(24, 180, quiet: false);
				}
			}
			else if (type == 33)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(20, 420, quiet: false);
				}
			}
			else if (type == 34)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 240, quiet: false);
				}
			}
			else if (type == 35)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(24, 180, quiet: false);
				}
			}
			else if (type == 54)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, 600, quiet: false);
				}
			}
			else if (type == 267)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(20, 3600, quiet: false);
				}
				else
				{
					Main.player[i].AddBuff(20, 1800, quiet: false);
				}
			}
			else if (type == 63)
			{
				if (Main.rand.Next(3) != 0)
				{
					Main.player[i].AddBuff(31, 120, quiet: false);
				}
			}
			else if (type == 85 || type == 188)
			{
				Main.player[i].AddBuff(24, 1200, quiet: false);
			}
			else if (type == 95 || type == 103 || type == 104 || type == 482)
			{
				Main.player[i].AddBuff(39, 420, quiet: false);
			}
			else if (type == 278 || type == 279 || type == 280)
			{
				Main.player[i].AddBuff(69, 900, quiet: false);
			}
			else if (type == 282 || type == 283)
			{
				Main.player[i].AddBuff(70, 600, quiet: false);
			}
			if (type == 163 || type == 310)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(24, 600, quiet: false);
				}
				else
				{
					Main.player[i].AddBuff(24, 300, quiet: false);
				}
			}
			else if (type == 265)
			{
				Main.player[i].AddBuff(20, 1200, quiet: false);
			}
			else if (type == 355)
			{
				Main.player[i].AddBuff(70, 1800, quiet: false);
			}
		}

		public void ghostHurt(int dmg, Vector2 Position)
		{
			if (!magic || damage <= 0)
			{
				return;
			}
			int num = damage;
			if (dmg <= 1)
			{
				return;
			}
			int num2 = -1;
			int num3 = 1000;
			if (Main.player[Main.myPlayer].ghostDmg > (float)num3)
			{
				return;
			}
			Main.player[Main.myPlayer].ghostDmg += num;
			int[] array = new int[200];
			int num4 = 0;
			_ = new int[200];
			int num5 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (!Main.npc[i].CanBeChasedBy(this))
				{
					continue;
				}
				float num6 = Math.Abs(Main.npc[i].position.X + (float)(Main.npc[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) - position.Y + (float)(height / 2));
				if (num6 < 800f)
				{
					if (Collision.CanHit(position, 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height) && num6 > 50f)
					{
						array[num5] = i;
						num5++;
					}
					else if (num5 == 0)
					{
						array[num4] = i;
						num4++;
					}
				}
			}
			if (num4 != 0 || num5 != 0)
			{
				num2 = ((num5 <= 0) ? array[Main.rand.Next(num4)] : array[Main.rand.Next(num5)]);
				float num7 = Main.rand.Next(-100, 101);
				float num8 = Main.rand.Next(-100, 101);
				float num9 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
				num9 = 4f / num9;
				num7 *= num9;
				num8 *= num9;
				NewProjectile(Position.X, Position.Y, num7, num8, 356, num, 0f, owner, num2);
			}
		}

		public void ghostHeal(int dmg, Vector2 Position)
		{
			float num = 0.2f;
			num -= (float)numHits * 0.05f;
			if (num <= 0f)
			{
				return;
			}
			float num2 = (float)dmg * num;
			if ((int)num2 <= 0 || Main.player[Main.myPlayer].lifeSteal <= 0f)
			{
				return;
			}
			Main.player[Main.myPlayer].lifeSteal -= num2;
			if (!magic)
			{
				return;
			}
			float num3 = 0f;
			int num4 = owner;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && ((!Main.player[owner].hostile && !Main.player[i].hostile) || Main.player[owner].team == Main.player[i].team) && Math.Abs(Main.player[i].position.X + (float)(Main.player[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[i].position.Y + (float)(Main.player[i].height / 2) - position.Y + (float)(height / 2)) < 1200f && (float)(Main.player[i].statLifeMax2 - Main.player[i].statLife) > num3)
				{
					num3 = Main.player[i].statLifeMax2 - Main.player[i].statLife;
					num4 = i;
				}
			}
			NewProjectile(Position.X, Position.Y, 0f, 0f, 298, 0, 0f, owner, num4, num2);
		}

		public void vampireHeal(int dmg, Vector2 Position)
		{
			float num = (float)dmg * 0.075f;
			if ((int)num != 0 && !(Main.player[Main.myPlayer].lifeSteal <= 0f))
			{
				Main.player[Main.myPlayer].lifeSteal -= num;
				int num2 = owner;
				NewProjectile(Position.X, Position.Y, 0f, 0f, 305, 0, 0f, owner, num2, num);
			}
		}

		public void StatusPlayer(int i)
		{
			if (Main.player[i].creativeGodMode)
			{
				return;
			}
			if (type == 472)
			{
				Main.player[i].AddBuff(149, Main.rand.Next(30, 150));
			}
			if (type == 467)
			{
				Main.player[i].AddBuff(24, Main.rand.Next(30, 150));
			}
			if (type == 581)
			{
				if (Main.expertMode)
				{
					Main.player[i].AddBuff(164, Main.rand.Next(300, 540));
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(164, Main.rand.Next(360, 720));
				}
			}
			if (type == 687)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(7, 11));
			}
			if (type == 258 && Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(5, 8));
			}
			if (type == 572 && Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(20, Main.rand.Next(120, 240));
			}
			if (type == 276)
			{
				if (Main.expertMode)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(120, 540));
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(180, 420));
				}
			}
			if (type == 436 && Main.rand.Next(5) >= 2)
			{
				Main.player[i].AddBuff(31, 300);
			}
			if (type == 435 && Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(144, 300);
			}
			if (type == 682)
			{
				Main.player[i].AddBuff(196, 300);
			}
			if (type == 437)
			{
				Main.player[i].AddBuff(144, 60 * Main.rand.Next(4, 9));
			}
			if (type == 348)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(46, 600);
				}
				else
				{
					Main.player[i].AddBuff(46, 300);
				}
				if (Main.rand.Next(3) != 0)
				{
					if (Main.rand.Next(16) == 0)
					{
						Main.player[i].AddBuff(47, 60);
					}
					else if (Main.rand.Next(12) == 0)
					{
						Main.player[i].AddBuff(47, 40);
					}
					else if (Main.rand.Next(8) == 0)
					{
						Main.player[i].AddBuff(47, 20);
					}
				}
			}
			if (type == 349)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(46, 600);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(46, 300);
				}
			}
			if (type >= 399 && type <= 402 && !hostile)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (type == 55 || type == 719)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(20, 600);
				}
				else if (Main.expertMode)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(60, 300));
				}
			}
			if (type == 44 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(22, 900);
			}
			if (type == 293)
			{
				Main.player[i].AddBuff(80, 60 * Main.rand.Next(2, 7));
			}
			if (type == 299)
			{
				Main.player[i].AddBuff(23, 240);
			}
			if (type == 82 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 420);
			}
			if (type == 285 && !hostile)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(31, 180);
				}
				else
				{
					Main.player[i].AddBuff(31, 60);
				}
			}
			if (type == 96 || type == 101)
			{
				if (Main.rand.Next(6) == 0)
				{
					Main.player[i].AddBuff(39, 180);
				}
				else if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(39, 180);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(39, 120);
				}
			}
			else if (type == 288)
			{
				Main.player[i].AddBuff(69, 900);
			}
			else if (type == 253 && !hostile)
			{
				Main.player[i].AddBuff(44, 600);
			}
			if (type == 291 || type == 292)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16));
			}
			if (type == 98)
			{
				Main.player[i].AddBuff(20, 600);
			}
			if (type == 184)
			{
				Main.player[i].AddBuff(20, 900);
			}
			if (type == 290)
			{
				Main.player[i].AddBuff(32, 60 * Main.rand.Next(5, 16));
			}
			if (type == 174)
			{
				Main.player[i].AddBuff(46, 1200);
				if (!Main.player[i].frozen && Main.rand.Next(20) == 0)
				{
					Main.player[i].AddBuff(47, 90);
				}
				else if (!Main.player[i].frozen && Main.expertMode && Main.rand.Next(20) == 0)
				{
					Main.player[i].AddBuff(47, 60);
				}
			}
			if (type == 257)
			{
				Main.player[i].AddBuff(46, 2700);
				if (!Main.player[i].frozen && Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(47, 60);
				}
			}
			if (type == 177)
			{
				Main.player[i].AddBuff(46, 1500);
				if (!Main.player[i].frozen && Main.rand.Next(10) == 0)
				{
					Main.player[i].AddBuff(47, Main.rand.Next(30, 120));
				}
			}
			if (type == 176)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(20, 1200);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, 300);
				}
			}
		}

		public bool CanHitWithMeleeWeapon(Entity ent)
		{
			if (Distance(ent.Center) > ownerHitCheckDistance)
			{
				return false;
			}
			if (!Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, ent.position, ent.width, ent.height) && !Collision.CanHitLine(Main.player[owner].Center + new Vector2(Main.player[owner].direction * Main.player[owner].width / 2, Main.player[owner].gravDir * (float)(-Main.player[owner].height) / 3f), 0, 0, ent.Center + new Vector2(0f, -ent.height / 3), 0, 0) && !Collision.CanHitLine(Main.player[owner].Center + new Vector2(Main.player[owner].direction * Main.player[owner].width / 2, Main.player[owner].gravDir * (float)(-Main.player[owner].height) / 3f), 0, 0, ent.Center, 0, 0))
			{
				return Collision.CanHitLine(Main.player[owner].Center + new Vector2(Main.player[owner].direction * Main.player[owner].width / 2, 0f), 0, 0, ent.Center + new Vector2(0f, ent.height / 3), 0, 0);
			}
			return true;
		}

		public bool CanHitWithOwnBody(Entity ent)
		{
			if (Distance(ent.Center) > ownerHitCheckDistance)
			{
				return false;
			}
			bool flag = Collision.CanHit(base.position, width, height, ent.position, ent.width, ent.height) || Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, -height / 3), 0, 0, ent.Center + new Vector2(0f, -ent.height / 3), 0, 0) || Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, -height / 3), 0, 0, ent.Center, 0, 0) || Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, 0f), 0, 0, ent.Center + new Vector2(0f, ent.height / 3), 0, 0);
			float num = ProjectileID.Sets.ExtendedCanHitCheckRange[type];
			if (num != 0f)
			{
				if (flag)
				{
					return flag;
				}
				GenSearch genSearch = ProjectileID.Sets.ExtendedCanHitCheckSearch[type];
				Vector2 position = base.Top + new Vector2(0f, 0f - num);
				Vector2 position2 = ent.Top + new Vector2(0f, 0f - num);
				if (genSearch != null)
				{
					if (WorldUtils.Find(base.Top.ToTileCoordinates(), Searches.Chain(genSearch, _cachedConditions_notNull, _cachedConditions_solid), out var result))
					{
						position = result.ToWorldCoordinates();
					}
					if (WorldUtils.Find(ent.Top.ToTileCoordinates(), Searches.Chain(genSearch, _cachedConditions_notNull, _cachedConditions_solid), out result))
					{
						position2 = result.ToWorldCoordinates();
					}
				}
				flag |= Collision.CanHitLine(position, 0, 0, position2, 0, 0);
			}
			return flag;
		}

		public void Damage()
		{
			if (type == 18 || type == 72 || type == 86 || type == 87 || aiStyle == 31 || aiStyle == 32 || type == 226 || type == 378 || type == 613 || type == 650 || type == 882 || type == 888 || type == 895 || type == 896 || (type == 434 && localAI[0] != 0f) || type == 439 || type == 444 || (type == 451 && ((int)(ai[0] - 1f) / penetrate == 0 || ai[1] < 5f) && ai[0] != 0f) || type == 500 || type == 653 || type == 460 || type == 633 || type == 600 || type == 601 || type == 602 || type == 535 || (type == 631 && localAI[1] == 0f) || type == 651 || (type == 188 && localAI[0] < 5f) || (aiStyle == 137 && ai[0] != 0f) || aiStyle == 138 || (type == 261 && velocity.Length() < 1.5f) || (type == 818 && ai[0] < 1f) || type == 831 || (type == 833 && ai[0] == 4f) || (type == 834 && ai[0] == 4f) || (type == 835 && ai[0] == 4f) || (type == 281 && ai[0] == -3f) || (type == 923 && localAI[0] <= 60f) || (type == 919 && localAI[0] <= 60f) || (aiStyle == 15 && ai[0] == 0f && localAI[1] <= 12f) || type == 861 || (aiStyle == 93 && ai[0] != 0f && ai[0] != 2f) || (aiStyle == 10 && localAI[1] == -1f) || (Main.projPet[type] && type != 266 && type != 407 && type != 317 && (type != 388 || ai[0] != 2f) && (type < 390 || type > 392) && (type < 393 || type > 395) && (type != 533 || !(ai[0] >= 6f) || !(ai[0] <= 8f)) && (type < 625 || type > 628) && (type != 755 || ai[0] == 0f) && (type != 946 || ai[0] == 0f) && type != 758 && (type != 759 || frame == Main.projFrames[type] - 1) && type != 833 && type != 834 && type != 835 && type != 864 && (type != 623 || ai[0] != 2f)))
			{
				return;
			}
			Rectangle myRect = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
			if (type == 85 || type == 101)
			{
				int num = 30;
				myRect.X -= num;
				myRect.Y -= num;
				myRect.Width += num * 2;
				myRect.Height += num * 2;
			}
			if (type == 188)
			{
				int num2 = 20;
				myRect.X -= num2;
				myRect.Y -= num2;
				myRect.Width += num2 * 2;
				myRect.Height += num2 * 2;
			}
			if (aiStyle == 29)
			{
				int num3 = 4;
				myRect.X -= num3;
				myRect.Y -= num3;
				myRect.Width += num3 * 2;
				myRect.Height += num3 * 2;
			}
			if (friendly && owner == Main.myPlayer && !npcProj)
			{
				if ((aiStyle == 16 && !ProjectileID.Sets.RocketsSkipDamageForPlayers[type] && (timeLeft <= 1 || type == 108 || type == 164)) || (type == 286 && localAI[1] == -1f))
				{
					int myPlayer = Main.myPlayer;
					if (Main.player[myPlayer].active && !Main.player[myPlayer].dead && !Main.player[myPlayer].immune && (!ownerHitCheck || CanHitWithMeleeWeapon(Main.player[myPlayer])))
					{
						Rectangle value = new Rectangle((int)Main.player[myPlayer].position.X, (int)Main.player[myPlayer].position.Y, Main.player[myPlayer].width, Main.player[myPlayer].height);
						if (myRect.Intersects(value))
						{
							if (Main.player[myPlayer].position.X + (float)(Main.player[myPlayer].width / 2) < base.position.X + (float)(width / 2))
							{
								base.direction = -1;
							}
							else
							{
								base.direction = 1;
							}
							int num4 = Main.DamageVar(damage, 0f - Main.player[myPlayer].luck);
							StatusPlayer(myPlayer);
							int playerIndex = owner;
							bool pvp = true;
							if (type == 108)
							{
								playerIndex = -1;
								pvp = false;
							}
							Main.player[myPlayer].Hurt(PlayerDeathReason.ByProjectile(playerIndex, whoAmI), num4, base.direction, pvp);
							if (trap)
							{
								Main.player[myPlayer].trapDebuffSource = true;
								if (Main.player[myPlayer].dead)
								{
									AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer], 4);
								}
							}
						}
					}
				}
				if (!minion)
				{
					CutTiles();
				}
			}
			if (owner == Main.myPlayer)
			{
				float num5 = 1f;
				if (ProjectileID.Sets.IsARocketThatDealsDoubleDamageToPrimaryEnemy[type] && timeLeft > 3)
				{
					num5 *= 2f;
				}
				if (ProjectileID.Sets.IsAMineThatDealsTripleDamageWhenStationary[type] && velocity.Length() < 0.5f)
				{
					num5 *= 3f;
				}
				if (type == 34 && penetrate == 1)
				{
					num5 *= 1f;
				}
				if (aiStyle == 15 && ai[0] == 0f)
				{
					num5 *= 1.2f;
				}
				if (aiStyle == 15 && (ai[0] == 1f || ai[0] == 2f))
				{
					num5 *= 2f;
				}
				if (type == 877 || type == 879 || type == 878)
				{
					num5 = 0.1f + Main.player[owner].velocity.Length() / 7f * 0.9f;
				}
				if (damage > 0)
				{
					int[] array = localNPCImmunity;
					if (type == 626 || type == 627 || type == 628)
					{
						Projectile projectile = FindStardustDragonHeadOfOwner();
						if (projectile != null)
						{
							array = projectile.localNPCImmunity;
						}
					}
					for (int i = 0; i < 200; i++)
					{
						bool flag = (!usesLocalNPCImmunity && !usesIDStaticNPCImmunity) || (usesLocalNPCImmunity && array[i] == 0) || (usesIDStaticNPCImmunity && IsNPCIndexImmuneToProjectileType(type, i));
						if (!(Main.npc[i].active && !Main.npc[i].dontTakeDamage && flag) || (Main.npc[i].aiStyle == 112 && Main.npc[i].ai[2] > 1f))
						{
							continue;
						}
						Main.npc[i].position += Main.npc[i].netOffset;
						bool flag2 = !Main.npc[i].friendly;
						flag2 |= type == 318;
						flag2 |= Main.npc[i].type == 22 && owner < 255 && Main.player[owner].killGuide;
						flag2 |= Main.npc[i].type == 54 && owner < 255 && Main.player[owner].killClothier;
						if (owner < 255 && !Main.player[owner].CanNPCBeHitByPlayerOrPlayerProjectile(Main.npc[i]))
						{
							flag2 = false;
						}
						bool flag3 = Main.npc[i].friendly && !Main.npc[i].dontTakeDamageFromHostiles;
						if (((friendly && flag2) || (hostile && flag3)) && (owner < 0 || Main.npc[i].immune[owner] == 0 || maxPenetrate == 1))
						{
							bool flag4 = false;
							if (type == 11 && (Main.npc[i].type == 47 || Main.npc[i].type == 57))
							{
								flag4 = true;
							}
							else if (type == 31 && Main.npc[i].type == 69)
							{
								flag4 = true;
							}
							else if (Main.npc[i].trapImmune && trap)
							{
								flag4 = true;
							}
							else if (Main.npc[i].immortal && npcProj)
							{
								flag4 = true;
							}
							if (!flag4 && (Main.npc[i].noTileCollide || !ownerHitCheck || CanHitWithMeleeWeapon(Main.npc[i])))
							{
								bool flag5 = false;
								if (Main.npc[i].type == 414)
								{
									Rectangle rect = Main.npc[i].getRect();
									int num6 = 8;
									rect.X -= num6;
									rect.Y -= num6;
									rect.Width += num6 * 2;
									rect.Height += num6 * 2;
									flag5 = Colliding(myRect, rect);
								}
								else
								{
									flag5 = Colliding(myRect, Main.npc[i].getRect());
								}
								if (flag5)
								{
									if (type == 876)
									{
										Vector2 position = base.position;
										if (Main.rand.Next(20) == 0)
										{
											tileCollide = false;
											base.position.X += Main.rand.Next(-256, 257);
										}
										if (Main.rand.Next(20) == 0)
										{
											tileCollide = false;
											base.position.Y += Main.rand.Next(-256, 257);
										}
										if (Main.rand.Next(2) == 0)
										{
											tileCollide = false;
										}
										if (Main.rand.Next(3) != 0)
										{
											position = base.position;
											base.position -= velocity * Main.rand.Next(0, 40);
											if (tileCollide && Collision.SolidTiles(base.position, width, height))
											{
												base.position = position;
												base.position -= velocity * Main.rand.Next(0, 40);
												if (tileCollide && Collision.SolidTiles(base.position, width, height))
												{
													base.position = position;
												}
											}
										}
										velocity *= 0.6f;
										if (Main.rand.Next(7) == 0)
										{
											velocity.X += (float)Main.rand.Next(30, 31) * 0.01f;
										}
										if (Main.rand.Next(7) == 0)
										{
											velocity.Y += (float)Main.rand.Next(30, 31) * 0.01f;
										}
										damage = (int)((double)damage * 0.9);
										knockBack *= 0.9f;
										if (Main.rand.Next(20) == 0)
										{
											knockBack *= 10f;
										}
										if (Main.rand.Next(50) == 0)
										{
											damage *= 10;
										}
										if (Main.rand.Next(7) == 0)
										{
											position = base.position;
											base.position.X += Main.rand.Next(-64, 65);
											if (tileCollide && Collision.SolidTiles(base.position, width, height))
											{
												base.position = position;
											}
										}
										if (Main.rand.Next(7) == 0)
										{
											position = base.position;
											base.position.Y += Main.rand.Next(-64, 65);
											if (tileCollide && Collision.SolidTiles(base.position, width, height))
											{
												base.position = position;
											}
										}
										if (Main.rand.Next(14) == 0)
										{
											velocity.X *= -1f;
										}
										if (Main.rand.Next(14) == 0)
										{
											velocity.Y *= -1f;
										}
										if (Main.rand.Next(10) == 0)
										{
											velocity *= (float)Main.rand.Next(1, 201) * 0.0005f;
										}
										if (tileCollide)
										{
											ai[1] = 0f;
										}
										else
										{
											ai[1] = 1f;
										}
										netUpdate = true;
									}
									NPC nPC = Main.npc[i];
									if (nPC.reflectsProjectiles && CanBeReflected() && nPC.CanReflectProjectile(this))
									{
										nPC.ReflectProjectile(this);
										Main.npc[i].position -= Main.npc[i].netOffset;
										return;
									}
									if (type == 604)
									{
										Main.player[owner].Counterweight(nPC.Center, damage, knockBack);
									}
									float num7 = knockBack;
									bool flag6 = false;
									int num8 = Main.player[owner].armorPenetration;
									bool flag7 = !npcProj && !trap;
									switch (type)
									{
									case 864:
										num8 += 25;
										break;
									case 916:
										num8 += 50;
										break;
									case 917:
										num8 += 30;
										break;
									case 877:
									case 878:
									case 879:
										num7 *= Main.player[owner].velocity.Length() / 7f;
										break;
									}
									int num9 = (int)((float)damage * num5);
									if (type > 0 && type < 950 && ProjectileID.Sets.StardustDragon[type])
									{
										float value2 = (scale - 1f) * 100f;
										value2 = Utils.Clamp(value2, 0f, 50f);
										num9 = (int)((float)num9 * (1f + value2 * 0.23f));
									}
									if (type > 0 && type < 950 && ProjectileID.Sets.StormTiger[type])
									{
										int num10 = Math.Max(0, Main.player[owner].ownedProjectileCounts[831] - 1);
										num9 = (int)((float)num9 * (1f + (float)num10 * 0.333333343f));
									}
									if (type == 818)
									{
										int num11 = Math.Max(0, Main.player[owner].ownedProjectileCounts[831] - 1);
										num9 = (int)((float)num9 * (1.5f + (float)num11 * 0.333333343f));
									}
									if (flag7)
									{
										if (melee && Main.rand.Next(1, 101) <= Main.player[owner].meleeCrit)
										{
											flag6 = true;
										}
										if (ranged && Main.rand.Next(1, 101) <= Main.player[owner].rangedCrit)
										{
											flag6 = true;
										}
										if (magic && Main.rand.Next(1, 101) <= Main.player[owner].magicCrit)
										{
											flag6 = true;
										}
										int num12 = type;
										if ((uint)(num12 - 688) <= 2u)
										{
											if (Main.player[owner].setMonkT3)
											{
												if (Main.rand.Next(4) == 0)
												{
													flag6 = true;
												}
											}
											else if (Main.player[owner].setMonkT2 && Main.rand.Next(6) == 0)
											{
												flag6 = true;
											}
										}
									}
									ParticleOrchestraSettings settings;
									if (flag7 && (minion || ProjectileID.Sets.MinionShot[type]))
									{
										bool flag8 = false;
										bool flag9 = false;
										bool flag10 = false;
										bool flag11 = false;
										bool flag12 = false;
										bool flag13 = false;
										bool flag14 = false;
										for (int j = 0; j < 5; j++)
										{
											if (nPC.buffTime[j] >= 1)
											{
												switch (nPC.buffType[j])
												{
												case 307:
													flag8 = true;
													break;
												case 309:
													flag9 = true;
													break;
												case 313:
													flag10 = true;
													break;
												case 310:
													flag11 = true;
													break;
												case 315:
													flag12 = true;
													break;
												case 319:
													flag13 = true;
													break;
												case 316:
													flag14 = true;
													break;
												}
											}
										}
										if (flag8)
										{
											num9 += 4;
										}
										if (flag12)
										{
											num9 += 6;
										}
										if (flag9)
										{
											num9 += 9;
										}
										if (flag13)
										{
											num9 += 5;
											if (Main.rand.Next(20) == 0)
											{
												flag6 = true;
											}
										}
										if (flag11)
										{
											int num13 = 10;
											int num14 = NewProjectile(nPC.Center, Vector2.Zero, 916, num13, 0f, owner);
											Main.projectile[num14].localNPCImmunity[i] = -1;
											EmitBlackLightningParticles(nPC);
										}
										if (flag14)
										{
											int num15 = 20;
											num9 += num15;
											if (Main.rand.Next(10) == 0)
											{
												flag6 = true;
											}
											settings = new ParticleOrchestraSettings
											{
												PositionInWorld = base.Center
											};
											ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.RainbowRodHit, settings);
										}
										if (flag10)
										{
											nPC.RequestBuffRemoval(313);
											int num16 = (int)((float)num9 * 2f);
											int num17 = NewProjectile(nPC.Center, Vector2.Zero, 918, num16, 0f, owner);
											Main.projectile[num17].localNPCImmunity[i] = -1;
											num9 += num16;
										}
									}
									int num18 = ((!flag7) ? Main.DamageVar(num9) : Main.DamageVar(num9, Main.player[owner].luck));
									if (trap && NPCID.Sets.BelongsToInvasionOldOnesArmy[nPC.type])
									{
										num18 /= 2;
									}
									if (type == 482 && (nPC.aiStyle == 6 || nPC.aiStyle == 37))
									{
										num18 /= 2;
									}
									if (type == 604)
									{
										friendly = false;
										ai[1] = 1000f;
									}
									if ((type == 400 || type == 401 || type == 402) && nPC.type >= 13 && nPC.type <= 15)
									{
										num18 = (int)((double)num18 * 0.65);
										if (penetrate > 1)
										{
											penetrate--;
										}
									}
									if (type == 710 && !WorldUtils.Find(base.Center.ToTileCoordinates(), Searches.Chain(new Searches.Down(12), _cachedConditions_notNull, _cachedConditions_solid), out var _))
									{
										num18 = (int)((float)num18 * 1.5f);
									}
									if (type == 504)
									{
										float num19 = (60f - ai[0]) / 2f;
										ai[0] += num19;
									}
									if (aiStyle == 3 && type != 301 && type != 866 && type != 902)
									{
										if (ai[0] == 0f)
										{
											velocity.X = 0f - velocity.X;
											velocity.Y = 0f - velocity.Y;
											netUpdate = true;
										}
										ai[0] = 1f;
									}
									else if (type == 582 || type == 902)
									{
										if (ai[0] != 0f)
										{
											base.direction *= -1;
										}
									}
									else if (type == 612)
									{
										base.direction = Main.player[owner].direction;
									}
									else if (type == 624)
									{
										float num20 = 1f;
										if (nPC.knockBackResist > 0f)
										{
											num20 = 1f / nPC.knockBackResist;
										}
										knockBack = 4f * num20;
										num7 = knockBack;
										if (nPC.Center.X < base.Center.X)
										{
											base.direction = 1;
										}
										else
										{
											base.direction = -1;
										}
									}
									else if (aiStyle == 16)
									{
										if (timeLeft > 3)
										{
											timeLeft = 3;
										}
										if (nPC.position.X + (float)(nPC.width / 2) < base.position.X + (float)(width / 2))
										{
											base.direction = -1;
										}
										else
										{
											base.direction = 1;
										}
									}
									else if (aiStyle == 68)
									{
										if (timeLeft > 3)
										{
											timeLeft = 3;
										}
										if (nPC.position.X + (float)(nPC.width / 2) < base.position.X + (float)(width / 2))
										{
											base.direction = -1;
										}
										else
										{
											base.direction = 1;
										}
									}
									else if (aiStyle == 50)
									{
										if (nPC.position.X + (float)(nPC.width / 2) < base.position.X + (float)(width / 2))
										{
											base.direction = -1;
										}
										else
										{
											base.direction = 1;
										}
									}
									else if (type == 908)
									{
										if (nPC.position.X + (float)(nPC.width / 2) < base.position.X + (float)(width / 2))
										{
											base.direction = -1;
										}
										else
										{
											base.direction = 1;
										}
									}
									if (type == 509)
									{
										int num21 = Main.rand.Next(2, 6);
										for (int k = 0; k < num21; k++)
										{
											Vector2 vector = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
											vector += velocity * 3f;
											vector.Normalize();
											vector *= (float)Main.rand.Next(35, 81) * 0.1f;
											int num22 = (int)((double)damage * 0.5);
											NewProjectile(base.Center.X, base.Center.Y, vector.X, vector.Y, 504, num22, knockBack * 0.2f, owner);
										}
									}
									if (type == 598 || type == 636 || type == 614)
									{
										ai[0] = 1f;
										ai[1] = i;
										velocity = (nPC.Center - base.Center) * 0.75f;
										netUpdate = true;
									}
									if (type >= 511 && type <= 513)
									{
										timeLeft = 0;
									}
									if (type == 659)
									{
										timeLeft = 0;
									}
									if (type == 524)
									{
										netUpdate = true;
										ai[0] += 50f;
									}
									if ((type == 688 || type == 689 || type == 690) && nPC.type != 68 && nPC.defense < 999)
									{
										num18 += nPC.defense / 2;
									}
									if (aiStyle == 39)
									{
										if (ai[1] == 0f)
										{
											ai[1] = i + 1;
											netUpdate = true;
										}
										if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < base.position.X + (float)(width / 2))
										{
											base.direction = 1;
										}
										else
										{
											base.direction = -1;
										}
									}
									if (type == 41 && timeLeft > 1)
									{
										timeLeft = 1;
									}
									if (aiStyle == 99)
									{
										Main.player[owner].Counterweight(nPC.Center, damage, knockBack);
										if (nPC.Center.X < Main.player[owner].Center.X)
										{
											base.direction = -1;
										}
										else
										{
											base.direction = 1;
										}
										if (ai[0] >= 0f)
										{
											Vector2 value3 = base.Center - nPC.Center;
											value3.Normalize();
											float scaleFactor = 16f;
											velocity *= -0.5f;
											velocity += value3 * scaleFactor;
											netUpdate = true;
											localAI[0] += 20f;
											if (!Collision.CanHit(base.position, width, height, Main.player[owner].position, Main.player[owner].width, Main.player[owner].height))
											{
												localAI[0] += 40f;
												num18 = (int)((double)num18 * 0.75);
											}
										}
									}
									if (type == 856 && !Collision.CanHit(base.position, width, height, Main.player[owner].position, Main.player[owner].width, Main.player[owner].height))
									{
										num18 = (int)((double)num18 * 0.75);
									}
									if (aiStyle == 93)
									{
										if (ai[0] == 0f)
										{
											ai[1] = 0f;
											int num23 = -i - 1;
											ai[0] = num23;
											velocity = nPC.Center - base.Center;
										}
										num18 = ((ai[0] != 2f) ? ((int)((double)num18 * 0.15)) : ((int)((double)num18 * 1.35)));
									}
									if (flag7)
									{
										int num24 = Item.NPCtoBanner(nPC.BannerID());
										if (num24 >= 0)
										{
											Main.player[Main.myPlayer].lastCreatureHit = num24;
										}
									}
									if (Main.netMode != 2 && flag7)
									{
										int num25 = Item.NPCtoBanner(nPC.BannerID());
										if (num25 > 0 && Main.player[owner].HasNPCBannerBuff(num25))
										{
											num18 = ((!Main.expertMode) ? ((int)((float)num18 * ItemID.Sets.BannerStrength[Item.BannerToItem(num25)].NormalDamageDealt)) : ((int)((float)num18 * ItemID.Sets.BannerStrength[Item.BannerToItem(num25)].ExpertDamageDealt)));
										}
									}
									if (Main.expertMode)
									{
										if ((type == 30 || type == 397 || type == 517 || type == 28 || type == 37 || type == 516 || type == 29 || type == 470 || type == 637 || type == 108 || type == 281 || type == 588 || type == 519 || type == 773 || type == 183 || type == 181 || type == 566) && nPC.type >= 13 && nPC.type <= 15)
										{
											num18 /= 5;
										}
										if (type == 280 && ((nPC.type >= 134 && nPC.type <= 136) || nPC.type == 139))
										{
											num18 = (int)((double)num18 * 0.75);
										}
									}
									if (Main.netMode != 2 && nPC.type == 439 && type >= 0 && type <= 950 && ProjectileID.Sets.CountsAsHoming[type])
									{
										num18 = (int)((float)num18 * 0.75f);
									}
									if (type == 497 && penetrate != 1)
									{
										ai[0] = 25f;
										float num26 = velocity.Length();
										Vector2 value4 = nPC.Center - base.Center;
										value4.Normalize();
										value4 *= num26;
										velocity = -value4 * 0.9f;
										netUpdate = true;
									}
									if (type == 323 && (nPC.type == 158 || nPC.type == 159))
									{
										num18 *= 10;
									}
									if (type == 294)
									{
										damage = (int)((double)damage * 0.8);
									}
									if (type == 265)
									{
										damage = (int)((double)damage * 0.75);
									}
									if (type == 355)
									{
										damage = (int)((double)damage * 0.75);
									}
									if (type == 85)
									{
										damage = (int)((double)damage * 0.85);
									}
									if (type == 866)
									{
										damage = (int)((double)damage * 0.7);
									}
									if (type == 841)
									{
										damage = (int)((double)damage * 0.5);
									}
									if (type == 914)
									{
										damage = (int)((double)damage * 0.6);
									}
									if (type == 913)
									{
										damage = (int)((double)damage * 0.66);
									}
									if (type == 912)
									{
										damage = (int)((double)damage * 0.66);
									}
									if (type == 847)
									{
										damage = (int)((double)damage * 0.7);
									}
									if (type == 848)
									{
										damage = (int)((double)damage * 0.75);
									}
									if (type == 849)
									{
										damage = (int)((double)damage * 0.7);
									}
									if (type == 915)
									{
										damage = (int)((double)damage * 0.85);
									}
									if (type == 931)
									{
										damage = (int)((double)damage * 0.8);
									}
									if (type == 477 && penetrate > 1)
									{
										int[] array2 = new int[10];
										int num27 = 0;
										int num28 = 700;
										int num29 = 20;
										for (int l = 0; l < 200; l++)
										{
											if (l == i || !Main.npc[l].CanBeChasedBy(this))
											{
												continue;
											}
											float num30 = (base.Center - Main.npc[l].Center).Length();
											if (num30 > (float)num29 && num30 < (float)num28 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[l].Center, 1, 1))
											{
												array2[num27] = l;
												num27++;
												if (num27 >= 9)
												{
													break;
												}
											}
										}
										if (num27 > 0)
										{
											num27 = Main.rand.Next(num27);
											Vector2 value5 = Main.npc[array2[num27]].Center - base.Center;
											float scaleFactor2 = velocity.Length();
											value5.Normalize();
											velocity = value5 * scaleFactor2;
											netUpdate = true;
										}
									}
									if (type == 261 && velocity.Length() < 3.5f)
									{
										num18 /= 2;
										num7 /= 2f;
									}
									if (flag7 && melee && Main.player[owner].parryDamageBuff && !ProjectileID.Sets.DontApplyParryDamageBuff[type])
									{
										num18 *= 5;
										Main.player[owner].parryDamageBuff = false;
										Main.player[owner].ClearBuff(198);
									}
									StatusNPC(i);
									if (flag7 && nPC.life > 5)
									{
										TryDoingOnHitEffects(nPC);
									}
									if (ProjectileID.Sets.ImmediatelyUpdatesNPCBuffFlags[type])
									{
										nPC.UpdateNPC_BuffSetFlags(lowerBuffTime: false);
									}
									if (type == 317)
									{
										ai[1] = -1f;
										netUpdate = true;
									}
									int num31 = base.direction;
									if (type == 697 || type == 699 || type == 707 || type == 708)
									{
										num31 = ((Main.player[owner].Center.X < nPC.Center.X) ? 1 : (-1));
									}
									if (aiStyle == 15)
									{
										num31 = ((Main.player[owner].Center.X < nPC.Center.X) ? 1 : (-1));
										if (ai[0] == 0f)
										{
											num7 *= 0.25f;
										}
										if (ai[0] == 6f)
										{
											num7 *= 0.5f;
										}
									}
									if (flag7 && !hostile && num8 > 0)
									{
										num18 += nPC.checkArmorPenetration(num8);
									}
									int num32 = ((!flag7) ? ((int)nPC.StrikeNPCNoInteraction(num18, num7, num31, flag6)) : ((int)nPC.StrikeNPC(num18, num7, num31, flag6)));
									if (flag7 && Main.player[owner].accDreamCatcher)
									{
										Main.player[owner].addDPS(num32);
									}
									if (flag7 && !nPC.immortal)
									{
										if (type == 756)
										{
											if (penetrate == 1)
											{
												damage = 0;
												penetrate = -1;
											}
											else
											{
												damage = (int)((double)damage * 0.7);
											}
										}
										if (type == 304 && num32 > 0 && nPC.lifeMax > 5 && !Main.player[owner].moonLeech)
										{
											vampireHeal(num32, new Vector2(nPC.Center.X, nPC.Center.Y));
										}
										if (nPC.value > 0f && Main.player[owner].coins && Main.rand.Next(5) == 0)
										{
											int num33 = 71;
											if (Main.rand.Next(10) == 0)
											{
												num33 = 72;
											}
											if (Main.rand.Next(100) == 0)
											{
												num33 = 73;
											}
											int num34 = Item.NewItem((int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height, num33);
											Main.item[num34].stack = Main.rand.Next(1, 11);
											Main.item[num34].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
											Main.item[num34].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)num31;
											if (Main.netMode == 1)
											{
												NetMessage.SendData(21, -1, -1, null, num34);
											}
										}
										if (num32 > 0 && nPC.lifeMax > 5 && friendly && !hostile && aiStyle != 59)
										{
											if (nPC.canGhostHeal)
											{
												if (Main.player[owner].ghostHeal && !Main.player[owner].moonLeech)
												{
													ghostHeal(num32, new Vector2(nPC.Center.X, nPC.Center.Y));
												}
												if (Main.player[owner].ghostHurt)
												{
													ghostHurt(num32, new Vector2(nPC.Center.X, nPC.Center.Y));
												}
												if (magic && Main.player[owner].setNebula && Main.player[owner].nebulaCD == 0 && Main.rand.Next(3) == 0)
												{
													Main.player[owner].nebulaCD = 30;
													int num35 = Utils.SelectRandom<int>(Main.rand, 3453, 3454, 3455);
													int num36 = Item.NewItem((int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height, num35);
													Main.item[num36].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
													Main.item[num36].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)num31;
													if (Main.netMode == 1)
													{
														NetMessage.SendData(21, -1, -1, null, num36);
													}
												}
											}
											if (melee && Main.player[owner].beetleOffense && !nPC.immortal)
											{
												if (Main.player[owner].beetleOrbs == 0)
												{
													Main.player[owner].beetleCounter += num32 * 3;
												}
												else if (Main.player[owner].beetleOrbs == 1)
												{
													Main.player[owner].beetleCounter += num32 * 2;
												}
												else
												{
													Main.player[owner].beetleCounter += num32;
												}
												Main.player[owner].beetleCountdown = 0;
											}
											if (arrow && type != 631 && Main.player[owner].phantasmTime > 0)
											{
												Vector2 source = Main.player[owner].position + Main.player[owner].Size * Utils.RandomVector2(Main.rand, 0f, 1f);
												Vector2 vector2 = nPC.DirectionFrom(source) * 6f;
												int num37 = (int)((float)damage * 0.3f);
												NewProjectile(source.X, source.Y, vector2.X, vector2.Y, 631, num37, 0f, owner, i);
												NewProjectile(source.X, source.Y, vector2.X, vector2.Y, 631, num37, 0f, owner, i, 15f);
												NewProjectile(source.X, source.Y, vector2.X, vector2.Y, 631, num37, 0f, owner, i, 30f);
											}
											Player player = Main.player[owner];
											switch (type)
											{
											case 914:
												player.AddBuff(314, 180);
												break;
											case 847:
												player.AddBuff(308, 180);
												break;
											case 849:
												player.AddBuff(311, 180);
												break;
											case 912:
											{
												int num38 = 10;
												if (!player.coolWhipBuff)
												{
													NewProjectile(nPC.Center, Vector2.Zero, 917, num38, 0f, owner);
													player.coolWhipBuff = true;
												}
												player.AddBuff(312, 180);
												break;
											}
											}
										}
									}
									if (flag7 && melee && Main.player[owner].meleeEnchant == 7)
									{
										NewProjectile(nPC.Center.X, nPC.Center.Y, nPC.velocity.X, nPC.velocity.Y, 289, 0, 0f, owner);
									}
									if (flag7 && type == 913)
									{
										localAI[0] = 1f;
									}
									if (Main.netMode != 0)
									{
										if (flag6)
										{
											NetMessage.SendData(28, -1, -1, null, i, num18, knockBack, num31, 1);
										}
										else
										{
											NetMessage.SendData(28, -1, -1, null, i, num18, knockBack, num31);
										}
									}
									if (type == 916)
									{
										EmitBlackLightningParticles(nPC);
									}
									if (type >= 390 && type <= 392)
									{
										localAI[1] = 20f;
									}
									if (usesIDStaticNPCImmunity)
									{
										nPC.immune[owner] = 0;
										perIDStaticNPCImmunity[type][i] = Main.GameUpdateCount + (uint)idStaticNPCHitCooldown;
									}
									else if (type == 434)
									{
										numUpdates = 0;
									}
									else if (type == 598 || type == 636 || type == 614)
									{
										damage = 0;
										int num39 = 6;
										if (type == 614)
										{
											num39 = 10;
										}
										if (type == 636)
										{
											num39 = 8;
										}
										Point[] array3 = new Point[num39];
										int num40 = 0;
										for (int m = 0; m < 1000; m++)
										{
											if (m != whoAmI && Main.projectile[m].active && Main.projectile[m].owner == Main.myPlayer && Main.projectile[m].type == type && Main.projectile[m].ai[0] == 1f && Main.projectile[m].ai[1] == (float)i)
											{
												array3[num40++] = new Point(m, Main.projectile[m].timeLeft);
												if (num40 >= array3.Length)
												{
													break;
												}
											}
										}
										if (num40 >= array3.Length)
										{
											int num41 = 0;
											for (int n = 1; n < array3.Length; n++)
											{
												if (array3[n].Y < array3[num41].Y)
												{
													num41 = n;
												}
											}
											Main.projectile[array3[num41].X].Kill();
										}
									}
									else if (type == 632)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 514)
									{
										nPC.immune[owner] = 1;
									}
									else if (type == 611)
									{
										if (localAI[1] <= 0f)
										{
											NewProjectile(nPC.Center.X, nPC.Center.Y, 0f, 0f, 612, damage, 10f, owner, 0f, 0.85f + Main.rand.NextFloat() * 1.15f);
										}
										localAI[1] = 4f;
									}
									else if (type == 595 || type == 735)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 927)
									{
										nPC.immune[owner] = 4;
									}
									else if (type == 286)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 443)
									{
										nPC.immune[owner] = 8;
									}
									else if (type >= 424 && type <= 426)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 634 || type == 635)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 659)
									{
										nPC.immune[owner] = 5;
									}
									else if (type == 246)
									{
										nPC.immune[owner] = 7;
									}
									else if (type == 249)
									{
										nPC.immune[owner] = 7;
									}
									else if (type == 16)
									{
										nPC.immune[owner] = 8;
									}
									else if (type == 409)
									{
										nPC.immune[owner] = 6;
									}
									else if (type == 407)
									{
										nPC.immune[owner] = 20;
									}
									else if (type == 311)
									{
										nPC.immune[owner] = 7;
									}
									else if (type == 582 || type == 902)
									{
										nPC.immune[owner] = 7;
										if (ai[0] != 1f)
										{
											ai[0] = 1f;
											netUpdate = true;
										}
									}
									else
									{
										if (type == 451)
										{
											if (ai[0] == 0f)
											{
												ai[0] += penetrate;
											}
											else
											{
												ai[0] -= penetrate + 1;
											}
											ai[1] = 0f;
											netUpdate = true;
											Main.npc[i].position -= Main.npc[i].netOffset;
											break;
										}
										if (type == 864)
										{
											array[i] = 10;
											nPC.immune[owner] = 0;
											if (ai[0] > 0f)
											{
												ai[0] = -1f;
												ai[1] = 0f;
												netUpdate = true;
											}
										}
										else if (type == 661 || type == 856)
										{
											array[i] = 8;
											nPC.immune[owner] = 0;
										}
										else if (type == 866)
										{
											array[i] = -1;
											nPC.immune[owner] = 0;
											penetrate--;
											if (penetrate == 0)
											{
												penetrate = 1;
												damage = 0;
												ai[1] = -1f;
												netUpdate = true;
												Main.npc[i].position -= Main.npc[i].netOffset;
												break;
											}
											if (owner == Main.myPlayer)
											{
												int num42 = FindTargetWithLineOfSight();
												float num43 = ai[1];
												ai[1] = num42;
												if (ai[1] != num43)
												{
													netUpdate = true;
												}
												if (num42 != -1)
												{
													velocity = velocity.Length() * DirectionTo(Main.npc[num42].Center);
												}
											}
										}
										else if (usesLocalNPCImmunity && localNPCHitCooldown != -2)
										{
											nPC.immune[owner] = 0;
											array[i] = localNPCHitCooldown;
										}
										else if (penetrate != 1)
										{
											nPC.immune[owner] = 10;
										}
									}
									if (type == 710)
									{
										BetsySharpnel(i);
									}
									if (penetrate > 0 && type != 317 && type != 866)
									{
										if (type == 357)
										{
											damage = (int)((double)damage * 0.8);
										}
										penetrate--;
										if (penetrate == 0)
										{
											Main.npc[i].position -= Main.npc[i].netOffset;
											break;
										}
									}
									if (aiStyle == 7)
									{
										ai[0] = 1f;
										damage = 0;
										netUpdate = true;
									}
									else if (aiStyle == 13)
									{
										ai[0] = 1f;
										netUpdate = true;
									}
									else if (aiStyle == 69)
									{
										ai[0] = 1f;
										netUpdate = true;
									}
									else if (type == 607)
									{
										ai[0] = 1f;
										netUpdate = true;
										friendly = false;
									}
									else if (type == 638 || type == 639 || type == 640)
									{
										array[i] = -1;
										nPC.immune[owner] = 0;
										damage = (int)((double)damage * 0.96);
									}
									else if (type == 617)
									{
										array[i] = 8;
										nPC.immune[owner] = 0;
									}
									else if (type == 656)
									{
										array[i] = 8;
										nPC.immune[owner] = 0;
										localAI[0] += 1f;
									}
									else if (type == 618)
									{
										array[i] = 20;
										nPC.immune[owner] = 0;
									}
									else if (type == 642)
									{
										array[i] = 10;
										nPC.immune[owner] = 0;
									}
									else if (type == 857)
									{
										array[i] = 10;
										nPC.immune[owner] = 0;
									}
									else if (type == 611 || type == 612)
									{
										array[i] = 6;
										nPC.immune[owner] = 4;
									}
									else if (type == 645)
									{
										array[i] = -1;
										nPC.immune[owner] = 0;
										if (ai[1] != -1f)
										{
											ai[0] = 0f;
											ai[1] = -1f;
											netUpdate = true;
										}
									}
									numHits++;
									if (type == 697)
									{
										if (ai[0] >= 42f)
										{
											localAI[1] = 1f;
										}
									}
									else if (type == 699)
									{
										SummonMonkGhast();
									}
									else if (type == 706)
									{
										damage = (int)((float)damage * 0.95f);
									}
									else if (type == 728)
									{
										SummonSuperStarSlash(nPC.Center);
									}
									else if (type == 34)
									{
										if (ai[0] == -1f)
										{
											ai[1] = -1f;
											netUpdate = true;
										}
									}
									else if (type == 79)
									{
										if (ai[0] == -1f)
										{
											ai[1] = -1f;
											netUpdate = true;
										}
										settings = new ParticleOrchestraSettings
										{
											PositionInWorld = nPC.Center,
											MovementVector = velocity
										};
										ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.RainbowRodHit, settings);
									}
									else if (type == 931)
									{
										int num44 = FindTargetWithLineOfSight();
										if (num44 != -1)
										{
											ai[0] = num44;
											netUpdate = true;
										}
									}
									else if (aiStyle == 165)
									{
										if (nPC.active)
										{
											Main.player[owner].MinionAttackTargetNPC = i;
										}
									}
									else if (type == 623)
									{
										settings = new ParticleOrchestraSettings
										{
											PositionInWorld = Vector2.Lerp(base.Center, nPC.Hitbox.ClosestPointInRect(base.Center), 0.5f) + new Vector2(0f, Main.rand.NextFloatDirection() * 10f),
											MovementVector = new Vector2(base.direction, Main.rand.NextFloatDirection() * 0.5f) * (3f + 3f * Main.rand.NextFloat())
										};
										ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.StardustPunch, settings);
									}
								}
							}
						}
						Main.npc[i].position -= Main.npc[i].netOffset;
					}
				}
				if (damage > 0 && Main.player[Main.myPlayer].hostile)
				{
					for (int num45 = 0; num45 < 255; num45++)
					{
						if (num45 == owner)
						{
							continue;
						}
						Player player2 = Main.player[num45];
						if (!player2.active || player2.dead || player2.immune || !player2.hostile || playerImmune[num45] > 0 || (Main.player[Main.myPlayer].team != 0 && Main.player[Main.myPlayer].team == player2.team))
						{
							continue;
						}
						bool flag15 = !ownerHitCheck;
						if (ownerHitCheck)
						{
							flag15 |= CanHitWithMeleeWeapon(player2);
						}
						if (!flag15 || !Colliding(myRect, player2.getRect()))
						{
							continue;
						}
						if (aiStyle == 3)
						{
							if (ai[0] == 0f)
							{
								velocity.X = 0f - velocity.X;
								velocity.Y = 0f - velocity.Y;
								netUpdate = true;
							}
							ai[0] = 1f;
						}
						else if (aiStyle == 16)
						{
							if (timeLeft > 3)
							{
								timeLeft = 3;
							}
							if (player2.position.X + (float)(player2.width / 2) < base.position.X + (float)(width / 2))
							{
								base.direction = -1;
							}
							else
							{
								base.direction = 1;
							}
						}
						else if (aiStyle == 68)
						{
							if (timeLeft > 3)
							{
								timeLeft = 3;
							}
							if (player2.position.X + (float)(player2.width / 2) < base.position.X + (float)(width / 2))
							{
								base.direction = -1;
							}
							else
							{
								base.direction = 1;
							}
						}
						PlayerDeathReason playerDeathReason = PlayerDeathReason.ByProjectile(owner, whoAmI);
						if (type == 41 && timeLeft > 1)
						{
							timeLeft = 1;
						}
						bool flag16 = false;
						if (melee && Main.rand.Next(1, 101) <= Main.player[owner].meleeCrit)
						{
							flag16 = true;
						}
						int num46 = Main.DamageVar((int)((float)damage * num5), Main.player[owner].luck);
						if (!player2.immune)
						{
							StatusPvP(num45);
						}
						TryDoingOnHitEffects(player2);
						int num47 = (int)player2.Hurt(playerDeathReason, num46, base.direction, pvp: true, quiet: false, flag16);
						if (num47 > 0 && Main.player[owner].ghostHeal && friendly && !hostile)
						{
							ghostHeal(num47, new Vector2(player2.Center.X, player2.Center.Y));
						}
						if (type == 304 && num47 > 0)
						{
							vampireHeal(num47, new Vector2(player2.Center.X, player2.Center.Y));
						}
						if (melee && Main.player[owner].meleeEnchant == 7)
						{
							NewProjectile(player2.Center.X, player2.Center.Y, player2.velocity.X, player2.velocity.Y, 289, 0, 0f, owner);
						}
						if (Main.netMode != 0)
						{
							NetMessage.SendPlayerHurt(num45, playerDeathReason, num46, base.direction, flag16, pvp: true, -1);
						}
						playerImmune[num45] = 40;
						if (penetrate > 0)
						{
							penetrate--;
							if (penetrate == 0)
							{
								break;
							}
						}
						if (aiStyle == 7)
						{
							ai[0] = 1f;
							damage = 0;
							netUpdate = true;
						}
						else if (aiStyle == 13)
						{
							ai[0] = 1f;
							netUpdate = true;
						}
						else if (aiStyle == 69)
						{
							ai[0] = 1f;
							netUpdate = true;
						}
					}
				}
			}
			if (type == 10 && Main.netMode != 1)
			{
				for (int num48 = 0; num48 < 200; num48++)
				{
					if (Main.npc[num48].active && Main.npc[num48].type == 534)
					{
						Rectangle value6 = new Rectangle((int)Main.npc[num48].position.X, (int)Main.npc[num48].position.Y, Main.npc[num48].width, Main.npc[num48].height);
						if (myRect.Intersects(value6))
						{
							Main.npc[num48].Transform(441);
						}
					}
				}
			}
			if (type == 11 && Main.netMode != 1)
			{
				for (int num49 = 0; num49 < 200; num49++)
				{
					if (!Main.npc[num49].active)
					{
						continue;
					}
					if (Main.npc[num49].type == 46 || Main.npc[num49].type == 303)
					{
						Rectangle value7 = new Rectangle((int)Main.npc[num49].position.X, (int)Main.npc[num49].position.Y, Main.npc[num49].width, Main.npc[num49].height);
						if (myRect.Intersects(value7))
						{
							Main.npc[num49].Transform(47);
						}
					}
					else if (Main.npc[num49].type == 55)
					{
						Rectangle value8 = new Rectangle((int)Main.npc[num49].position.X, (int)Main.npc[num49].position.Y, Main.npc[num49].width, Main.npc[num49].height);
						if (myRect.Intersects(value8))
						{
							Main.npc[num49].Transform(57);
						}
					}
					else if (Main.npc[num49].type == 148 || Main.npc[num49].type == 149)
					{
						Rectangle value9 = new Rectangle((int)Main.npc[num49].position.X, (int)Main.npc[num49].position.Y, Main.npc[num49].width, Main.npc[num49].height);
						if (myRect.Intersects(value9))
						{
							Main.npc[num49].Transform(168);
						}
					}
				}
			}
			if (type == 463 && Main.netMode != 1)
			{
				for (int num50 = 0; num50 < 200; num50++)
				{
					if (!Main.npc[num50].active)
					{
						continue;
					}
					if (Main.npc[num50].type == 46 || Main.npc[num50].type == 303)
					{
						Rectangle value10 = new Rectangle((int)Main.npc[num50].position.X, (int)Main.npc[num50].position.Y, Main.npc[num50].width, Main.npc[num50].height);
						if (myRect.Intersects(value10))
						{
							Main.npc[num50].Transform(464);
						}
					}
					else if (Main.npc[num50].type == 55)
					{
						Rectangle value11 = new Rectangle((int)Main.npc[num50].position.X, (int)Main.npc[num50].position.Y, Main.npc[num50].width, Main.npc[num50].height);
						if (myRect.Intersects(value11))
						{
							Main.npc[num50].Transform(465);
						}
					}
					else if (Main.npc[num50].type == 148 || Main.npc[num50].type == 149)
					{
						Rectangle value12 = new Rectangle((int)Main.npc[num50].position.X, (int)Main.npc[num50].position.Y, Main.npc[num50].width, Main.npc[num50].height);
						if (myRect.Intersects(value12))
						{
							Main.npc[num50].Transform(470);
						}
					}
				}
			}
			if (Main.netMode == 2 || !hostile || Main.myPlayer >= 255 || damage <= 0)
			{
				return;
			}
			int num51 = -1;
			switch (type)
			{
			case 452:
			case 454:
			case 455:
			case 462:
				num51 = 1;
				break;
			case 871:
			case 872:
			case 873:
			case 874:
			case 919:
			case 923:
			case 924:
				num51 = 1;
				break;
			}
			int myPlayer2 = Main.myPlayer;
			bool flag17 = Main.player[myPlayer2].active && !Main.player[myPlayer2].dead && (!Main.player[myPlayer2].immune || num51 != -1);
			if (flag17 && type == 281)
			{
				flag17 = ai[1] - 1f == (float)myPlayer2;
			}
			if (Main.getGoodWorld && type == 281)
			{
				flag17 = true;
			}
			if (!flag17 || !Colliding(myRect, Main.player[myPlayer2].getRect()))
			{
				return;
			}
			int direction = base.direction;
			direction = ((!(Main.player[myPlayer2].position.X + (float)(Main.player[myPlayer2].width / 2) < base.position.X + (float)(width / 2))) ? 1 : (-1));
			if (!Main.player[myPlayer2].CanParryAgainst(Main.player[myPlayer2].Hitbox, base.Hitbox, velocity))
			{
				int num52 = Main.DamageVar(damage, 0f - Main.player[owner].luck);
				if (!Main.player[myPlayer2].immune)
				{
					StatusPlayer(myPlayer2);
				}
				if (Main.player[myPlayer2].resistCold && coldDamage)
				{
					num52 = (int)((float)num52 * 0.7f);
				}
				float num53 = Main.GameModeInfo.EnemyDamageMultiplier;
				if (Main.GameModeInfo.IsJourneyMode)
				{
					CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
					if (power.GetIsUnlocked())
					{
						num53 = power.StrengthMultiplierToGiveNPCs;
					}
				}
				num52 = (int)((float)num52 * num53);
				int num54 = num52 * 2;
				Main.player[myPlayer2].Hurt(PlayerDeathReason.ByProjectile(-1, whoAmI), num54, direction, pvp: false, quiet: false, Crit: false, num51);
				if (trap)
				{
					Main.player[myPlayer2].trapDebuffSource = true;
					if (Main.player[myPlayer2].dead)
					{
						AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer2], 4);
					}
				}
			}
			if (true)
			{
				if (type == 435 || type == 682)
				{
					penetrate--;
				}
				if (type == 436)
				{
					penetrate--;
				}
				if (type == 681)
				{
					timeLeft = 0;
				}
				if (type == 437)
				{
					penetrate--;
				}
			}
		}

		private static void EmitBlackLightningParticles(NPC targetNPC)
		{
			ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.BlackLightningHit, new ParticleOrchestraSettings
			{
				PositionInWorld = targetNPC.Center
			});
		}

		private void TryDoingOnHitEffects(Entity entity)
		{
			switch (type)
			{
			case 221:
			case 227:
			case 614:
			case 729:
			case 908:
				return;
			}
			Main.player[owner].OnHit(entity.Center.X, entity.Center.Y, entity);
		}

		private void SummonSuperStarSlash(Vector2 target)
		{
			Vector2 v = Main.rand.NextVector2CircularEdge(200f, 200f);
			if (v.Y < 0f)
			{
				v.Y *= -1f;
			}
			v.Y += 100f;
			Vector2 vector = v.SafeNormalize(Vector2.UnitY) * 6f;
			NewProjectile(target - vector * 20f, vector, 729, damage / 2, 0f, owner, 0f, target.Y);
		}

		private void SummonMonkGhast()
		{
			if (localAI[0] > 0f)
			{
				return;
			}
			localAI[0] = 1000f;
			List<NPC> list = new List<NPC>();
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && Distance(nPC.Center) < 800f)
				{
					list.Add(nPC);
				}
			}
			Vector2 center = base.Center;
			Vector2 value = Vector2.Zero;
			if (list.Count > 0)
			{
				NPC nPC2 = list[Main.rand.Next(list.Count)];
				center = nPC2.Center;
				value = nPC2.velocity;
			}
			int num = Main.rand.Next(2) * 2 - 1;
			Vector2 velocity = new Vector2((float)num * (4f + (float)Main.rand.Next(3)), 0f);
			Vector2 vector = center + new Vector2(-num * 120, 0f);
			velocity += (center + value * 15f - vector).SafeNormalize(Vector2.Zero) * 2f;
			NewProjectile(vector, velocity, 700, damage, 0f, owner);
		}

		private void CutTiles()
		{
			if (!CanCutTiles())
			{
				return;
			}
			AchievementsHelper.CurrentlyMining = true;
			bool flag = true;
			if (type == 461 || type == 632 || type == 642)
			{
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CutTiles);
			}
			else if (ProjectileID.Sets.IsAWhip[type])
			{
				flag = false;
				_whipPointsForCollision.Clear();
				FillWhipControlPoints(this, _whipPointsForCollision);
				Vector2 value = new Vector2((float)width * scale / 2f, 0f);
				for (int i = 0; i < _whipPointsForCollision.Count; i++)
				{
					DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
					Utils.PlotTileLine(_whipPointsForCollision[i] - value, _whipPointsForCollision[i] + value, (float)height * scale, DelegateMethods.CutTiles);
				}
			}
			else if (type == 756)
			{
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Utils.PlotTileLine(base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 200f * scale, 22f * scale, DelegateMethods.CutTiles);
			}
			else if (type == 927)
			{
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Vector2 end = base.Center + velocity.SafeNormalize(Vector2.UnitX) * 220f * scale;
				Utils.PlotTileLine(base.Center, end, 80f * scale, DelegateMethods.CutTiles);
			}
			else if (type == 802 || type == 842 || type == 938 || type == 939 || type == 940 || type == 941 || type == 942 || type == 943 || type == 944 || type == 945)
			{
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Utils.PlotTileLine(base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 10f, 10f * scale, DelegateMethods.CutTiles);
			}
			else if (type == 611)
			{
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Utils.PlotTileLine(base.Center, base.Center + velocity + velocity.SafeNormalize(Vector2.Zero) * 48f, (float)width * scale, DelegateMethods.CutTiles);
			}
			else if (type == 697 || type == 707)
			{
				float num = 40f;
				if (type == 707)
				{
					num = 60f;
				}
				float f = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X);
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Utils.PlotTileLine(base.Center + f.ToRotationVector2() * (0f - num), base.Center + f.ToRotationVector2() * num, (float)width * scale, DelegateMethods.CutTiles);
			}
			if (flag)
			{
				int num2 = (int)(position.X / 16f);
				int num3 = (int)((position.X + (float)width) / 16f) + 1;
				int num4 = (int)(position.Y / 16f);
				int num5 = (int)((position.Y + (float)height) / 16f) + 1;
				if (num2 < 0)
				{
					num2 = 0;
				}
				if (num3 > Main.maxTilesX)
				{
					num3 = Main.maxTilesX;
				}
				if (num4 < 0)
				{
					num4 = 0;
				}
				if (num5 > Main.maxTilesY)
				{
					num5 = Main.maxTilesY;
				}
				for (int j = num2; j < num3; j++)
				{
					for (int k = num4; k < num5; k++)
					{
						if (Main.tile[j, k] != null && Main.tileCut[Main.tile[j, k].type] && WorldGen.CanCutTile(j, k, TileCuttingContext.AttackProjectile))
						{
							WorldGen.KillTile(j, k);
							if (Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 0, j, k);
							}
						}
					}
				}
			}
			AchievementsHelper.CurrentlyMining = false;
		}

		private bool CanCutTiles()
		{
			if (aiStyle != 45 && aiStyle != 137 && aiStyle != 92 && aiStyle != 105 && aiStyle != 106 && !ProjectileID.Sets.IsAGolfBall[type] && type != 463 && type != 69 && type != 70 && type != 621 && type != 10 && type != 11 && type != 379 && type != 407 && type != 476 && type != 623 && (type < 625 || type > 628) && type != 833 && type != 834 && type != 835 && type != 818 && type != 831 && type != 820)
			{
				return type != 864;
			}
			return false;
		}

		public bool Colliding(Rectangle myRect, Rectangle targetRect)
		{
			if (aiStyle == 15)
			{
				if (ai[0] == 0f)
				{
					Vector2 mountedCenter = Main.player[owner].MountedCenter;
					Vector2 vector = targetRect.ClosestPointInRect(mountedCenter) - mountedCenter;
					vector.Y /= 0.8f;
					float num = 55f;
					return vector.Length() <= num;
				}
			}
			else if (type == 623)
			{
				if (ai[0] == 2f)
				{
					Rectangle value = Utils.CenteredRectangle(base.Center + new Vector2(direction * 40, 0f), new Vector2(80f, 40f));
					if (targetRect.Intersects(value))
					{
						return true;
					}
				}
			}
			else
			{
				if (type == 933)
				{
					float collisionPoint = 0f;
					float scaleFactor = 40f;
					for (int i = 14; i < oldPos.Length; i += 15)
					{
						float num2 = localAI[0] - (float)i;
						if (!(num2 < 0f) && !(num2 > 60f))
						{
							Vector2 value2 = oldPos[i] + base.Size / 2f;
							Vector2 value3 = (oldRot[i] + (float)Math.PI / 2f).ToRotationVector2();
							_lanceHitboxBounds.X = (int)value2.X - _lanceHitboxBounds.Width / 2;
							_lanceHitboxBounds.Y = (int)value2.Y - _lanceHitboxBounds.Height / 2;
							if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), value2 - value3 * scaleFactor, value2 + value3 * scaleFactor, 20f, collisionPoint))
							{
								return true;
							}
						}
					}
					Vector2 value4 = (rotation + (float)Math.PI / 2f).ToRotationVector2();
					_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
					_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
					if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - value4 * scaleFactor, base.Center + value4 * scaleFactor, 20f, collisionPoint))
					{
						return true;
					}
					return false;
				}
				if (type == 927)
				{
					for (int j = 1; j <= 5; j++)
					{
						Rectangle rectangle = myRect;
						Vector2 vector2 = velocity.SafeNormalize(Vector2.Zero) * width * j;
						rectangle.Offset((int)vector2.X, (int)vector2.Y);
						if (rectangle.Intersects(targetRect))
						{
							return true;
						}
					}
				}
				else
				{
					if (type == 877 || type == 878 || type == 879)
					{
						float f = rotation - (float)Math.PI / 4f - (float)Math.PI / 2f - ((spriteDirection == 1) ? ((float)Math.PI) : 0f);
						float collisionPoint2 = 0f;
						float scaleFactor2 = 95f;
						_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
						_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
						if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + f.ToRotationVector2() * scaleFactor2, 23f * scale, collisionPoint2))
						{
							return true;
						}
						return false;
					}
					if (type == 919 || type == 932)
					{
						float f2 = rotation;
						float collisionPoint3 = 0f;
						float scaleFactor3 = 40f;
						Vector2 value5 = f2.ToRotationVector2();
						_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
						_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
						if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - value5 * scaleFactor3, base.Center + value5 * scaleFactor3, 8f, collisionPoint3))
						{
							return true;
						}
						return false;
					}
					if (type == 923)
					{
						float collisionPoint4 = 0f;
						_ = scale;
						float f3 = rotation;
						Vector2 objectPosition = targetRect.TopLeft();
						Vector2 objectDimensions = targetRect.Size();
						Vector2 value6 = f3.ToRotationVector2();
						float num3 = scale * 0.7f;
						if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + value6 * scale * 510f, num3 * 100f, collisionPoint4))
						{
							return true;
						}
						if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + value6 * scale * 660f, num3 * 60f, collisionPoint4))
						{
							return true;
						}
						if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + value6 * scale * 800f, num3 * 10f, collisionPoint4))
						{
							return true;
						}
						return false;
					}
					if (type == 598 && targetRect.Width > 8 && targetRect.Height > 8)
					{
						targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
					}
					else
					{
						if (type == 872)
						{
							Rectangle hitbox = base.Hitbox;
							int num4 = 80;
							for (int k = 0; k < num4; k += 2)
							{
								Vector2 value7 = oldPos[k];
								if (!(value7 == Vector2.Zero))
								{
									hitbox.X = (int)value7.X;
									hitbox.Y = (int)value7.Y;
									if (hitbox.Intersects(targetRect))
									{
										return true;
									}
								}
							}
							return false;
						}
						if (type == 871)
						{
							int num5 = AI_172_GetPelletStormsCount();
							for (int l = 0; l < num5; l++)
							{
								HallowBossPelletStormInfo hallowBossPelletStormInfo = AI_172_GetPelletStormInfo(l);
								for (int m = 0; m < hallowBossPelletStormInfo.BulletsInStorm; m++)
								{
									if (hallowBossPelletStormInfo.IsValid(m) && hallowBossPelletStormInfo.GetBulletHitbox(m, base.Center).Intersects(targetRect))
									{
										return true;
									}
								}
							}
							return false;
						}
						if (ProjectileID.Sets.IsAWhip[type])
						{
							_whipPointsForCollision.Clear();
							FillWhipControlPoints(this, _whipPointsForCollision);
							for (int n = 0; n < _whipPointsForCollision.Count; n++)
							{
								Point point = _whipPointsForCollision[n].ToPoint();
								myRect.Location = new Point(point.X - myRect.Width / 2, point.Y - myRect.Height / 2);
								if (myRect.Intersects(targetRect))
								{
									return true;
								}
							}
							return false;
						}
						if (type == 614 && targetRect.Width > 8 && targetRect.Height > 8)
						{
							targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
						}
						else if (type == 758)
						{
							if (ai[0] == 2f && Utils.CenteredRectangle(base.Center + new Vector2(spriteDirection * 30, 0f), new Vector2(50f, 20f)).Intersects(targetRect))
							{
								return true;
							}
						}
						else if (type == 636 && targetRect.Width > 8 && targetRect.Height > 8)
						{
							targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
						}
						else if (type == 607)
						{
							myRect.X += (int)velocity.X;
							myRect.Y += (int)velocity.Y;
						}
						else if (type == 661)
						{
							if (Vector2.Distance(myRect.Center.ToVector2(), targetRect.Center.ToVector2()) > 500f || !Collision.CanHitLine(myRect.Center.ToVector2(), 0, 0, targetRect.Center.ToVector2(), 0, 0))
							{
								return false;
							}
						}
						else if (aiStyle == 137)
						{
							if (myRect.Intersects(targetRect) && targetRect.Distance(base.Center) < (float)(height / 2 - 20))
							{
								if (AI_137_CanHit(targetRect.Center.ToVector2()))
								{
									return true;
								}
								if (AI_137_CanHit(targetRect.TopLeft() + new Vector2(targetRect.Width / 2, 0f)))
								{
									return true;
								}
							}
							return false;
						}
					}
				}
			}
			if (myRect.Intersects(targetRect))
			{
				return true;
			}
			if (type == 461)
			{
				float collisionPoint5 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, collisionPoint5))
				{
					return true;
				}
				return false;
			}
			if (type == 697 || type == 707)
			{
				float f4 = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X);
				float collisionPoint6 = 0f;
				float num6 = 50f;
				if (type == 707)
				{
					num6 = 110f;
				}
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center + f4.ToRotationVector2() * (0f - num6), base.Center + f4.ToRotationVector2() * num6, 23f * scale, collisionPoint6))
				{
					return true;
				}
				return false;
			}
			if (type == 699)
			{
				float f5 = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X) + ((spriteDirection == -1) ? ((float)Math.PI) : 0f);
				float collisionPoint7 = 0f;
				float scaleFactor4 = -95f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + f5.ToRotationVector2() * scaleFactor4, 23f * scale, collisionPoint7))
				{
					return true;
				}
				return false;
			}
			if (type == 642)
			{
				float collisionPoint8 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 30f * scale, collisionPoint8))
				{
					return true;
				}
				return false;
			}
			if (type == 802 || type == 842 || type == 938 || type == 939 || type == 940 || type == 941 || type == 942 || type == 943 || type == 944 || type == 945)
			{
				float collisionPoint9 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * 6f, 10f * scale, collisionPoint9))
				{
					return true;
				}
				return false;
			}
			if (type == 632)
			{
				float collisionPoint10 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, collisionPoint10))
				{
					return true;
				}
				return false;
			}
			if (type == 455)
			{
				float collisionPoint11 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 36f * scale, collisionPoint11))
				{
					return true;
				}
				return false;
			}
			if (type == 611)
			{
				float collisionPoint12 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity + velocity.SafeNormalize(Vector2.Zero) * 48f, 16f * scale, collisionPoint12))
				{
					return true;
				}
				return false;
			}
			if (type == 684)
			{
				float collisionPoint13 = 0f;
				Vector2 value8 = velocity.SafeNormalize(Vector2.UnitY).RotatedBy(-1.5707963705062866) * scale;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - value8 * 40f, base.Center + value8 * 40f, 16f * scale, collisionPoint13))
				{
					return true;
				}
				return false;
			}
			if (type == 537)
			{
				float collisionPoint14 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, collisionPoint14))
				{
					return true;
				}
				return false;
			}
			if (type == 756)
			{
				float collisionPoint15 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 200f * scale, 22f * scale, collisionPoint15))
				{
					return true;
				}
				return false;
			}
			if (type == 687)
			{
				float collisionPoint16 = 0f;
				float num7 = ai[0] / 25f;
				if (num7 > 1f)
				{
					num7 = 1f;
				}
				float num8 = (ai[0] - 38f) / 40f;
				if (num8 < 0f)
				{
					num8 = 0f;
				}
				Vector2 lineStart = base.Center + rotation.ToRotationVector2() * 400f * num8;
				Vector2 lineEnd = base.Center + rotation.ToRotationVector2() * 400f * num7;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), lineStart, lineEnd, 40f * scale, collisionPoint16))
				{
					return true;
				}
				return false;
			}
			if (type == 466 || type == 580 || type == 686)
			{
				for (int num9 = 0; num9 < oldPos.Length && (oldPos[num9].X != 0f || oldPos[num9].Y != 0f); num9++)
				{
					myRect.X = (int)oldPos[num9].X;
					myRect.Y = (int)oldPos[num9].Y;
					if (myRect.Intersects(targetRect))
					{
						return true;
					}
				}
				return false;
			}
			if (type == 711)
			{
				if (penetrate != -1)
				{
					for (int num10 = 0; num10 < oldPos.Length && (oldPos[num10].X != 0f || oldPos[num10].Y != 0f); num10++)
					{
						myRect.X = (int)oldPos[num10].X;
						myRect.Y = (int)oldPos[num10].Y;
						if (myRect.Intersects(targetRect))
						{
							return true;
						}
					}
				}
			}
			else if (type == 464 && ai[1] != 1f)
			{
				Vector2 value9 = new Vector2(0f, -720f).RotatedBy(velocity.ToRotation());
				float scaleFactor5 = ai[0] % 45f / 45f;
				Vector2 spinningpoint = value9 * scaleFactor5;
				for (int num11 = 0; num11 < 6; num11++)
				{
					float num12 = (float)num11 * ((float)Math.PI * 2f) / 6f;
					if (Utils.CenteredRectangle(base.Center + spinningpoint.RotatedBy(num12), new Vector2(30f, 30f)).Intersects(targetRect))
					{
						return true;
					}
				}
			}
			return false;
		}

		public void ProjLight()
		{
			if (!(light > 0f))
			{
				return;
			}
			float num = light;
			float num2 = light;
			float num3 = light;
			if (type == 446)
			{
				num *= 0f;
				num3 *= 0.8f;
			}
			else if (type == 493 || type == 494)
			{
				num2 *= 0.3f;
			}
			else if (type == 876)
			{
				num *= 0.1f;
				num2 *= 0.7f;
				num3 *= 1f;
			}
			else if (type == 867)
			{
				float num4 = (float)Main.rand.Next(28, 42) * 0.005f;
				num4 += (float)(270 - Main.mouseTextColor) / 500f;
				num = 0.1f;
				num2 = 0.3f + num4 / 2f;
				num3 = 0.6f + num4;
			}
			else if (type == 332)
			{
				num3 *= 0.1f;
				num2 *= 0.6f;
			}
			else if (type == 259)
			{
				num3 *= 0.1f;
			}
			else if (type == 329)
			{
				num3 *= 0.1f;
				num2 *= 0.9f;
			}
			else if (type == 2 || type == 82)
			{
				num2 *= 0.75f;
				num3 *= 0.55f;
			}
			else if (type == 172)
			{
				num2 *= 0.55f;
				num *= 0.35f;
			}
			else if (type == 308)
			{
				num2 *= 0.7f;
				num *= 0.1f;
			}
			else if (type == 304)
			{
				num2 *= 0.2f;
				num3 *= 0.1f;
			}
			else if (type == 263)
			{
				num2 *= 0.7f;
				num *= 0.1f;
			}
			else if (type == 274)
			{
				num2 *= 0.1f;
				num *= 0.7f;
			}
			else if (type == 254)
			{
				num *= 0.1f;
			}
			else if (type == 94)
			{
				num *= 0.5f;
				num2 *= 0f;
			}
			else if (type == 95 || type == 96 || type == 103 || type == 104)
			{
				num *= 0.35f;
				num2 *= 1f;
				num3 *= 0f;
			}
			else if (type == 4)
			{
				num2 *= 0.1f;
				num *= 0.5f;
			}
			else if (type == 257)
			{
				num2 *= 0.9f;
				num *= 0.1f;
			}
			else if (type == 9)
			{
				num2 *= 0.1f;
				num3 *= 0.6f;
			}
			else if (type == 488)
			{
				num = 0.3f;
				num3 = 0.25f;
				num2 = 0f;
			}
			else if (type == 92)
			{
				num2 *= 0.6f;
				num *= 0.8f;
			}
			else if (type == 93)
			{
				num2 *= 1f;
				num *= 1f;
				num3 *= 0.01f;
			}
			else if (type == 12)
			{
				num *= 0.9f;
				num2 *= 0.8f;
				num3 *= 0.1f;
			}
			else if (type == 14 || type == 110 || type == 180 || type == 242 || type == 302)
			{
				num2 *= 0.7f;
				num3 *= 0.1f;
			}
			else if (type == 15)
			{
				num2 *= 0.4f;
				num3 *= 0.1f;
				num = 1f;
			}
			else if (type == 16)
			{
				num *= 0.1f;
				num2 *= 0.4f;
				num3 = 1f;
			}
			else if (type == 18)
			{
				num2 *= 0.1f;
				num *= 0.6f;
			}
			else if (type == 19)
			{
				num2 *= 0.5f;
				num3 *= 0.1f;
			}
			else if (type == 20)
			{
				num *= 0.1f;
				num3 *= 0.3f;
			}
			else if (type == 22)
			{
				num = 0f;
				num2 = 0f;
			}
			else if (type == 27)
			{
				num *= 0f;
				num2 *= 0.3f;
				num3 = 1f;
			}
			else if (type == 34)
			{
				num2 *= 0.1f;
				num3 *= 0.1f;
			}
			else if (type == 36)
			{
				num = 0.8f;
				num2 *= 0.2f;
				num3 *= 0.6f;
			}
			else if (type == 41)
			{
				num2 *= 0.8f;
				num3 *= 0.6f;
			}
			else if (type == 44 || type == 45)
			{
				num3 = 1f;
				num *= 0.6f;
				num2 *= 0.1f;
			}
			else if (type == 50)
			{
				num *= 0.7f;
				num3 *= 0.8f;
			}
			else if (type == 515)
			{
				num2 *= 0.6f;
				num3 *= 0.85f;
			}
			else if (type == 870)
			{
				num *= 0.7f;
				num2 = 0f;
			}
			else if (type == 53)
			{
				num *= 0.7f;
				num2 *= 0.8f;
			}
			else if (type == 473)
			{
				num *= 1.05f;
				num2 *= 0.95f;
				num3 *= 0.55f;
			}
			else if (type == 72)
			{
				num *= 0.45f;
				num2 *= 0.75f;
				num3 = 1f;
			}
			else if (type == 86)
			{
				num *= 1f;
				num2 *= 0.45f;
				num3 = 0.75f;
			}
			else if (type == 87)
			{
				num *= 0.45f;
				num2 = 1f;
				num3 *= 0.75f;
			}
			else if (type == 73)
			{
				num *= 0.4f;
				num2 *= 0.6f;
				num3 *= 1f;
			}
			else if (type == 74)
			{
				num *= 1f;
				num2 *= 0.4f;
				num3 *= 0.6f;
			}
			else if (type == 284)
			{
				num *= 1f;
				num2 *= 0.1f;
				num3 *= 0.8f;
			}
			else if (type == 285)
			{
				num *= 0.1f;
				num2 *= 0.5f;
				num3 *= 1f;
			}
			else if (type == 286)
			{
				num *= 1f;
				num2 *= 0.5f;
				num3 *= 0.1f;
			}
			else if (type == 287)
			{
				num *= 0.9f;
				num2 *= 1f;
				num3 *= 0.4f;
			}
			else if (type == 283)
			{
				num *= 0.8f;
				num2 *= 0.1f;
			}
			else if (type == 76 || type == 77 || type == 78)
			{
				num *= 1f;
				num2 *= 0.3f;
				num3 *= 0.6f;
			}
			else if (type == 79)
			{
				num = (float)Main.DiscoR / 255f;
				num2 = (float)Main.DiscoG / 255f;
				num3 = (float)Main.DiscoB / 255f;
			}
			else if (type == 80)
			{
				num *= 0f;
				num2 *= 0.8f;
				num3 *= 1f;
			}
			else if (type == 83 || type == 88)
			{
				num *= 0.7f;
				num2 *= 0f;
				num3 *= 1f;
			}
			else if (type == 100)
			{
				num *= 1f;
				num2 *= 0.5f;
				num3 *= 0f;
			}
			else if (type == 84 || type == 389)
			{
				num *= 0.8f;
				num2 *= 0f;
				num3 *= 0.5f;
			}
			else if (type == 89 || type == 90)
			{
				num2 *= 0.2f;
				num3 *= 1f;
				num *= 0.05f;
			}
			else if (type == 106)
			{
				num *= 0f;
				num2 *= 0.5f;
				num3 *= 1f;
			}
			else if (type == 113)
			{
				num *= 0.25f;
				num2 *= 0.75f;
				num3 *= 1f;
			}
			else if (type == 114 || type == 115)
			{
				num *= 0.5f;
				num2 *= 0.05f;
				num3 *= 1f;
			}
			else if (type == 116)
			{
				num3 *= 0.25f;
			}
			else if (type == 131)
			{
				num *= 0.1f;
				num2 *= 0.4f;
			}
			else if (type == 132 || type == 157)
			{
				num *= 0.2f;
				num3 *= 0.6f;
			}
			else if (type == 156)
			{
				num *= 1f;
				num3 *= 0.6f;
				num2 = 0f;
			}
			else if (type == 173)
			{
				num *= 0.3f;
				num3 *= 1f;
				num2 = 0.4f;
			}
			else if (type == 207)
			{
				num *= 0.4f;
				num3 *= 0.4f;
			}
			else if (type == 253)
			{
				num = 0f;
				num2 *= 0.4f;
			}
			else if (type == 211)
			{
				num *= 0.5f;
				num2 *= 0.9f;
				num3 *= 1f;
				if (localAI[0] == 0f)
				{
					light = 1.5f;
				}
				else
				{
					light = 1f;
				}
			}
			else if (type == 209)
			{
				float num5 = (255f - (float)alpha) / 255f;
				num *= 0.3f;
				num2 *= 0.4f;
				num3 *= 1.75f;
				num3 *= num5;
				num *= num5;
				num2 *= num5;
			}
			else if (type == 226 || ((type == 227) | (type == 229)))
			{
				num *= 0.25f;
				num2 *= 1f;
				num3 *= 0.5f;
			}
			else if (type == 251)
			{
				num = (float)Main.DiscoR / 255f;
				num2 = (float)Main.DiscoG / 255f;
				num3 = (float)Main.DiscoB / 255f;
				num = (num + 1f) / 2f;
				num2 = (num2 + 1f) / 2f;
				num3 = (num3 + 1f) / 2f;
				num *= light;
				num2 *= light;
				num3 *= light;
			}
			else if (type == 278 || type == 279)
			{
				num *= 1f;
				num2 *= 1f;
				num3 *= 0f;
			}
			Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), num, num2, num3);
		}

		public Rectangle getRect()
		{
			return new Rectangle((int)position.X, (int)position.Y, width, height);
		}

		public void Update(int i)
		{
			if (!active)
			{
				return;
			}
			if (Main.netMode == 1 && (ProjectileID.Sets.IsAGolfBall[type] || type == 820))
			{
				int num = (int)(position.X + (float)(width / 2)) / 16;
				int num2 = (int)(position.Y + (float)(height / 2)) / 16;
				if (Main.tile[num, num2] == null)
				{
					return;
				}
			}
			numUpdates = extraUpdates;
			while (numUpdates >= 0)
			{
				numUpdates--;
				if (type == 640 && ai[1] > 0f)
				{
					ai[1] -= 1f;
					continue;
				}
				if (position.X <= Main.leftWorld || position.X + (float)width >= Main.rightWorld || position.Y <= Main.topWorld || position.Y + (float)height >= Main.bottomWorld)
				{
					active = false;
					return;
				}
				if (!noEnchantmentVisuals)
				{
					UpdateEnchantmentVisuals();
				}
				if (numUpdates == -1 && (minion || sentry))
				{
					Player player = Main.player[owner];
					damage = (int)((float)originalDamage * player.minionDamage);
				}
				if (minion && numUpdates == -1 && type != 625 && type != 628)
				{
					minionPos = Main.player[owner].numMinions;
					if (Main.player[owner].slotsMinions + minionSlots > (float)Main.player[owner].maxMinions && owner == Main.myPlayer)
					{
						if ((type == 627 || type == 626) && owner == Main.myPlayer)
						{
							int byUUID = GetByUUID(owner, ai[0]);
							if (byUUID != -1)
							{
								Projectile projectile = Main.projectile[byUUID];
								if (projectile.type != 625)
								{
									projectile.localAI[1] = localAI[1];
								}
								projectile = Main.projectile[(int)localAI[1]];
								projectile.ai[0] = ai[0];
								projectile.ai[1] = 1f;
								projectile.netUpdate = true;
							}
						}
						Kill();
					}
					else
					{
						Main.player[owner].numMinions++;
						Main.player[owner].slotsMinions += minionSlots;
					}
				}
				float num3 = 1f + Math.Abs(base.velocity.X) / 3f;
				if (gfxOffY > 0f)
				{
					gfxOffY -= num3 * stepSpeed;
					if (gfxOffY < 0f)
					{
						gfxOffY = 0f;
					}
				}
				else if (gfxOffY < 0f)
				{
					gfxOffY += num3 * stepSpeed;
					if (gfxOffY > 0f)
					{
						gfxOffY = 0f;
					}
				}
				if (gfxOffY > 16f)
				{
					gfxOffY = 16f;
				}
				if (gfxOffY < -16f)
				{
					gfxOffY = -16f;
				}
				Vector2 velocity = base.velocity;
				oldVelocity = base.velocity;
				whoAmI = i;
				if (soundDelay > 0)
				{
					soundDelay--;
				}
				netUpdate = false;
				for (int j = 0; j < 255; j++)
				{
					if (playerImmune[j] > 0)
					{
						playerImmune[j]--;
					}
				}
				if (usesLocalNPCImmunity)
				{
					for (int k = 0; k < 200; k++)
					{
						if (localNPCImmunity[k] > 0)
						{
							localNPCImmunity[k]--;
						}
					}
				}
				AI();
				if (ShouldUseWindPhysics() && (double)base.Center.Y < Main.worldSurface * 16.0 && Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16] != null && Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16].wall == 0 && ((base.velocity.X > 0f && Main.windSpeedCurrent < 0f) || (base.velocity.X < 0f && Main.windSpeedCurrent > 0f) || Math.Abs(base.velocity.X) < Math.Abs(Main.windSpeedCurrent * Main.windPhysicsStrength) * 180f) && Math.Abs(base.velocity.X) < 16f)
				{
					base.velocity.X += Main.windSpeedCurrent * Main.windPhysicsStrength;
					MathHelper.Clamp(base.velocity.X, -16f, 16f);
				}
				if (owner < 255 && !Main.player[owner].active)
				{
					Kill();
				}
				if (type == 242 || type == 302 || type == 638)
				{
					wet = false;
				}
				if (!ignoreWater)
				{
					bool flag;
					bool flag2;
					try
					{
						flag = Collision.LavaCollision(position, width, height);
						flag2 = Collision.WetCollision(position, width, height);
						if (flag)
						{
							lavaWet = true;
						}
						if (Collision.honey)
						{
							honeyWet = true;
						}
					}
					catch
					{
						active = false;
						return;
					}
					if (wet && !lavaWet)
					{
						if (type == 85 || type == 15 || type == 34 || type == 188)
						{
							Kill();
						}
						if (type == 2)
						{
							type = 1;
							light = 0f;
						}
					}
					if (type == 80)
					{
						flag2 = false;
						wet = false;
						if (flag && ai[0] >= 0f)
						{
							Kill();
						}
					}
					if (flag2)
					{
						if (type != 155 && wetCount == 0 && !wet)
						{
							if (!flag)
							{
								if (honeyWet)
								{
									for (int l = 0; l < 10; l++)
									{
										int num4 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
										Main.dust[num4].velocity.Y -= 1f;
										Main.dust[num4].velocity.X *= 2.5f;
										Main.dust[num4].scale = 1.3f;
										Main.dust[num4].alpha = 100;
										Main.dust[num4].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
								}
								else
								{
									for (int m = 0; m < 10; m++)
									{
										int num5 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, Dust.dustWater());
										Main.dust[num5].velocity.Y -= 4f;
										Main.dust[num5].velocity.X *= 2.5f;
										Main.dust[num5].scale = 1.3f;
										Main.dust[num5].alpha = 100;
										Main.dust[num5].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
								}
							}
							else
							{
								for (int n = 0; n < 10; n++)
								{
									int num6 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
									Main.dust[num6].velocity.Y -= 1.5f;
									Main.dust[num6].velocity.X *= 2.5f;
									Main.dust[num6].scale = 1.3f;
									Main.dust[num6].alpha = 100;
									Main.dust[num6].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
						wet = true;
					}
					else if (wet)
					{
						wet = false;
						if (type == 155)
						{
							base.velocity.Y *= 0.5f;
						}
						else if (wetCount == 0)
						{
							wetCount = 10;
							if (!lavaWet)
							{
								if (honeyWet)
								{
									for (int num7 = 0; num7 < 10; num7++)
									{
										int num8 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
										Main.dust[num8].velocity.Y -= 1f;
										Main.dust[num8].velocity.X *= 2.5f;
										Main.dust[num8].scale = 1.3f;
										Main.dust[num8].alpha = 100;
										Main.dust[num8].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
								}
								else
								{
									for (int num9 = 0; num9 < 10; num9++)
									{
										int num10 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2)), width + 12, 24, Dust.dustWater());
										Main.dust[num10].velocity.Y -= 4f;
										Main.dust[num10].velocity.X *= 2.5f;
										Main.dust[num10].scale = 1.3f;
										Main.dust[num10].alpha = 100;
										Main.dust[num10].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
								}
							}
							else
							{
								for (int num11 = 0; num11 < 10; num11++)
								{
									int num12 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
									Main.dust[num12].velocity.Y -= 1.5f;
									Main.dust[num12].velocity.X *= 2.5f;
									Main.dust[num12].scale = 1.3f;
									Main.dust[num12].alpha = 100;
									Main.dust[num12].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
					}
					if (!wet)
					{
						lavaWet = false;
						honeyWet = false;
					}
					if (wetCount > 0)
					{
						wetCount--;
					}
				}
				oldPosition = position;
				oldDirection = direction;
				HandleMovement(velocity, out var _, out var _);
				if (AutomaticallyChangesDirection())
				{
					if (base.velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
				}
				if (!active)
				{
					return;
				}
				ProjLight();
				if (!npcProj && friendly && Main.player[owner].magicQuiver && extraUpdates < 1 && arrow)
				{
					extraUpdates = 1;
				}
				if (type == 2 || type == 82)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100);
				}
				else if (type == 172)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, 0f, 0f, 100);
				}
				else if (type == 103)
				{
					int num13 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, 0f, 0f, 100);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num13].noGravity = true;
						Main.dust[num13].scale *= 2f;
					}
				}
				else if (type == 278)
				{
					int num14 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 169, 0f, 0f, 100);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num14].noGravity = true;
						Main.dust[num14].scale *= 1.5f;
					}
				}
				else if (type == 4)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 150, default(Color), 1.1f);
					}
				}
				else if (type == 5)
				{
					int num15 = Main.rand.Next(3);
					Dust.NewDust(position, width, height, num15 switch
					{
						0 => 15, 
						1 => 57, 
						_ => 58, 
					}, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 150, default(Color), 1.2f);
				}
				Damage();
				if (type == 434 && localAI[0] == 0f && numUpdates == 0)
				{
					extraUpdates = 1;
					base.velocity = Vector2.Zero;
					localAI[0] = 1f;
					localAI[1] = 0.9999f;
					netUpdate = true;
				}
				if (Main.netMode != 1 && (type == 99 || type == 655 || type == 727))
				{
					Collision.SwitchTiles(position, width, height, oldPosition, 3);
				}
				if (ProjectileID.Sets.TrailingMode[type] == 0)
				{
					for (int num16 = oldPos.Length - 1; num16 > 0; num16--)
					{
						oldPos[num16] = oldPos[num16 - 1];
					}
					oldPos[0] = position;
				}
				else if (ProjectileID.Sets.TrailingMode[type] == 1)
				{
					if (frameCounter == 0 || oldPos[0] == Vector2.Zero)
					{
						for (int num17 = oldPos.Length - 1; num17 > 0; num17--)
						{
							oldPos[num17] = oldPos[num17 - 1];
						}
						oldPos[0] = position;
						if (base.velocity == Vector2.Zero && type == 466)
						{
							float num18 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num19 = (float)Main.rand.NextDouble() * 2f + 2f;
							Vector2 vector = new Vector2((float)Math.Cos(num18) * num19, (float)Math.Sin(num18) * num19);
							int num20 = Dust.NewDust(oldPos[oldPos.Length - 1], 0, 0, 229, vector.X, vector.Y);
							Main.dust[num20].noGravity = true;
							Main.dust[num20].scale = 1.7f;
						}
						if (base.velocity == Vector2.Zero && type == 580)
						{
							float num21 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num22 = (float)Main.rand.NextDouble() * 2f + 2f;
							Vector2 vector2 = new Vector2((float)Math.Cos(num21) * num22, (float)Math.Sin(num21) * num22);
							int num23 = Dust.NewDust(oldPos[oldPos.Length - 1], 0, 0, 229, vector2.X, vector2.Y);
							Main.dust[num23].noGravity = true;
							Main.dust[num23].scale = 1.7f;
						}
					}
				}
				else if (ProjectileID.Sets.TrailingMode[type] == 2)
				{
					for (int num24 = oldPos.Length - 1; num24 > 0; num24--)
					{
						oldPos[num24] = oldPos[num24 - 1];
						oldRot[num24] = oldRot[num24 - 1];
						oldSpriteDirection[num24] = oldSpriteDirection[num24 - 1];
					}
					oldPos[0] = position;
					oldRot[0] = rotation;
					oldSpriteDirection[0] = spriteDirection;
				}
				else if (ProjectileID.Sets.TrailingMode[type] == 3)
				{
					for (int num25 = oldPos.Length - 1; num25 > 0; num25--)
					{
						oldPos[num25] = oldPos[num25 - 1];
						oldRot[num25] = oldRot[num25 - 1];
						oldSpriteDirection[num25] = oldSpriteDirection[num25 - 1];
					}
					oldPos[0] = position;
					oldRot[0] = rotation;
					oldSpriteDirection[0] = spriteDirection;
					float amount = 0.65f;
					int num26 = 1;
					for (int num27 = 0; num27 < num26; num27++)
					{
						for (int num28 = oldPos.Length - 1; num28 > 0; num28--)
						{
							if (!(oldPos[num28] == Vector2.Zero))
							{
								if (oldPos[num28].Distance(oldPos[num28 - 1]) > 2f)
								{
									oldPos[num28] = Vector2.Lerp(oldPos[num28], oldPos[num28 - 1], amount);
								}
								oldRot[num28] = (oldPos[num28 - 1] - oldPos[num28]).SafeNormalize(Vector2.Zero).ToRotation();
							}
						}
					}
				}
				else if (ProjectileID.Sets.TrailingMode[type] == 4)
				{
					Vector2 vector3 = Main.player[owner].position - Main.player[owner].oldPosition;
					for (int num29 = oldPos.Length - 1; num29 > 0; num29--)
					{
						oldPos[num29] = oldPos[num29 - 1];
						oldRot[num29] = oldRot[num29 - 1];
						oldSpriteDirection[num29] = oldSpriteDirection[num29 - 1];
						if (numUpdates == 0 && oldPos[num29] != Vector2.Zero)
						{
							oldPos[num29] += vector3;
						}
					}
					oldPos[0] = position;
					oldRot[0] = rotation;
					oldSpriteDirection[0] = spriteDirection;
				}
				if (ProjectileID.Sets.IsADD2Turret[type] && DD2Event.Ongoing)
				{
					timeLeft++;
				}
				timeLeft--;
				if (timeLeft <= 0)
				{
					Kill();
				}
				if (penetrate == 0)
				{
					Kill();
				}
				if (!active || owner != Main.myPlayer)
				{
					continue;
				}
				if (netUpdate2)
				{
					netUpdate = true;
				}
				if (!active)
				{
					netSpam = 0;
				}
				if (netUpdate)
				{
					if (netSpam < 60)
					{
						netSpam += 5;
						NetMessage.SendData(27, -1, -1, null, i);
						netUpdate2 = false;
					}
					else
					{
						netUpdate2 = true;
					}
				}
				if (netSpam > 0)
				{
					netSpam--;
				}
			}
			netUpdate = false;
		}

		private bool AutomaticallyChangesDirection()
		{
			if ((aiStyle != 3 || ai[0] != 1f) && (aiStyle != 7 || ai[0] != 1f) && (aiStyle != 13 || ai[0] != 1f) && aiStyle != 65 && aiStyle != 69 && aiStyle != 114 && aiStyle != 123 && aiStyle != 112 && !manualDirectionChange && aiStyle != 67 && aiStyle != 26 && aiStyle != 15)
			{
				return aiStyle != 150;
			}
			return false;
		}

		private void UpdateEnchantmentVisuals()
		{
			if (npcProj)
			{
				return;
			}
			if (Main.player[owner].frostBurn && (melee || ranged) && friendly && !hostile && !noEnchantments && Main.rand.Next(2 * (1 + extraUpdates)) == 0)
			{
				int num = Dust.NewDust(position, width, height, 135, base.velocity.X * 0.2f + (float)(direction * 3), base.velocity.Y * 0.2f, 100, default(Color), 2f);
				Main.dust[num].noGravity = true;
				Main.dust[num].velocity *= 0.7f;
				Main.dust[num].velocity.Y -= 0.5f;
			}
			if (melee && Main.player[owner].magmaStone && !noEnchantments && Main.rand.Next(3) != 0)
			{
				int num2 = Dust.NewDust(new Vector2(position.X - 4f, position.Y - 4f), width + 8, height + 8, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num2].scale = 1.5f;
				}
				Main.dust[num2].noGravity = true;
				Main.dust[num2].velocity.X *= 2f;
				Main.dust[num2].velocity.Y *= 2f;
			}
			if (!melee || Main.player[owner].meleeEnchant <= 0 || noEnchantments)
			{
				return;
			}
			if (Main.player[owner].meleeEnchant == 1 && Main.rand.Next(3) == 0)
			{
				int num3 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].fadeIn = 1.5f;
				Main.dust[num3].velocity *= 0.25f;
			}
			if (Main.player[owner].meleeEnchant == 1)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num4 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
					Main.dust[num4].noGravity = true;
					Main.dust[num4].fadeIn = 1.5f;
					Main.dust[num4].velocity *= 0.25f;
				}
			}
			else if (Main.player[owner].meleeEnchant == 2)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num5 = Dust.NewDust(position, width, height, 75, base.velocity.X * 0.2f + (float)(direction * 3), base.velocity.Y * 0.2f, 100, default(Color), 2.5f);
					Main.dust[num5].noGravity = true;
					Main.dust[num5].velocity *= 0.7f;
					Main.dust[num5].velocity.Y -= 0.5f;
				}
			}
			else if (Main.player[owner].meleeEnchant == 3)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num6 = Dust.NewDust(position, width, height, 6, base.velocity.X * 0.2f + (float)(direction * 3), base.velocity.Y * 0.2f, 100, default(Color), 2.5f);
					Main.dust[num6].noGravity = true;
					Main.dust[num6].velocity *= 0.7f;
					Main.dust[num6].velocity.Y -= 0.5f;
				}
			}
			else if (Main.player[owner].meleeEnchant == 4)
			{
				int num7 = 0;
				if (Main.rand.Next(2) == 0)
				{
					num7 = Dust.NewDust(position, width, height, 57, base.velocity.X * 0.2f + (float)(direction * 3), base.velocity.Y * 0.2f, 100, default(Color), 1.1f);
					Main.dust[num7].noGravity = true;
					Main.dust[num7].velocity.X /= 2f;
					Main.dust[num7].velocity.Y /= 2f;
				}
			}
			else if (Main.player[owner].meleeEnchant == 5)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num8 = Dust.NewDust(position, width, height, 169, 0f, 0f, 100);
					Main.dust[num8].velocity.X += direction;
					Main.dust[num8].velocity.Y += 0.2f;
					Main.dust[num8].noGravity = true;
				}
			}
			else if (Main.player[owner].meleeEnchant == 6)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num9 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
					Main.dust[num9].velocity.X += direction;
					Main.dust[num9].velocity.Y += 0.2f;
					Main.dust[num9].noGravity = true;
				}
			}
			else if (Main.player[owner].meleeEnchant == 7)
			{
				Vector2 velocity = base.velocity;
				if (velocity.Length() > 4f)
				{
					velocity *= 4f / velocity.Length();
				}
				if (Main.rand.Next(20) == 0)
				{
					int num10 = Main.rand.Next(139, 143);
					int num11 = Dust.NewDust(position, width, height, num10, velocity.X, velocity.Y, 0, default(Color), 1.2f);
					Main.dust[num11].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num11].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num11].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num11].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num11].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
				}
				if (Main.rand.Next(40) == 0)
				{
					int num12 = Main.rand.Next(276, 283);
					int num13 = Gore.NewGore(position, velocity, num12);
					Main.gore[num13].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num13].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num13].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Main.gore[num13].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.gore[num13].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				}
			}
			else if (Main.player[owner].meleeEnchant == 8 && Main.rand.Next(4) == 0)
			{
				int num14 = Dust.NewDust(position, width, height, 46, 0f, 0f, 100);
				Main.dust[num14].noGravity = true;
				Main.dust[num14].fadeIn = 1.5f;
				Main.dust[num14].velocity *= 0.25f;
			}
		}

		private void HandleMovement(Vector2 wetVelocity, out int overrideWidth, out int overrideHeight)
		{
			bool flag = false;
			overrideWidth = -1;
			overrideHeight = -1;
			bool flag2 = false;
			bool? flag3 = ProjectileID.Sets.ForcePlateDetection[type];
			bool flag4 = flag3.HasValue && !flag3.Value;
			bool flag5 = flag3.HasValue && flag3.Value;
			if (tileCollide)
			{
				Vector2 lastVelocity = base.velocity;
				bool flag6 = true;
				Vector2? vector = null;
				if (Main.projPet[type])
				{
					flag6 = false;
					if (Main.player[owner].position.Y + (float)Main.player[owner].height - 12f > base.position.Y + (float)base.height)
					{
						flag6 = true;
					}
				}
				if (type == 500)
				{
					flag6 = false;
					if (Main.player[owner].Bottom.Y > base.Bottom.Y + 4f)
					{
						flag6 = true;
					}
				}
				if (type == 653)
				{
					flag6 = false;
					if (Main.player[owner].Bottom.Y > base.Bottom.Y + 4f)
					{
						flag6 = true;
					}
				}
				if (aiStyle == 62)
				{
					flag6 = true;
				}
				if (aiStyle == 66)
				{
					flag6 = true;
				}
				if (type == 317)
				{
					flag6 = true;
				}
				if (type == 373)
				{
					flag6 = true;
				}
				if (aiStyle == 53)
				{
					flag6 = false;
				}
				if (type == 9 || type == 12 || type == 15 || type == 13 || type == 31 || type == 39 || type == 40)
				{
					flag6 = false;
				}
				if (type == 24)
				{
					flag6 = false;
				}
				switch (type)
				{
				case 663:
				case 665:
				case 667:
				case 677:
				case 678:
				case 679:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
					flag6 = false;
					break;
				case 759:
					flag6 = true;
					break;
				}
				if (decidesManualFallThrough)
				{
					flag6 = shouldFallThrough;
				}
				if (type == 771 || type == 822 || type == 823 || type == 843 || type == 846 || type == 845 || type == 852)
				{
					overrideWidth = base.width;
					overrideHeight = 34;
					vector = new Vector2(0.75f, 0.75f);
				}
				if (type == 824 || type == 839 || type == 840 || type == 850 || type == 853)
				{
					overrideWidth = base.width;
					overrideHeight = 58;
					vector = new Vector2(0.75f, 0.75f);
				}
				if (type == 826 || type == 830 || type == 838)
				{
					overrideWidth = base.width;
					overrideHeight = 38;
					vector = new Vector2(0.75f, 0.75f);
				}
				if (type == 828 || type == 829 || type == 827 || type == 844)
				{
					overrideWidth = base.width;
					overrideHeight = 22;
					vector = new Vector2(0.75f, 0.75f);
				}
				if (aiStyle == 29 || type == 28 || aiStyle == 49 || type == 906 || type == 903 || type == 904 || type == 910)
				{
					overrideWidth = base.width - 8;
					overrideHeight = base.height - 8;
				}
				else if (type == 250 || type == 267 || type == 297 || type == 323 || type == 3 || type == 711)
				{
					overrideWidth = 6;
					overrideHeight = 6;
				}
				else if (type == 308)
				{
					overrideWidth = 26;
					overrideHeight = base.height;
				}
				else if (type == 663 || type == 665 || type == 667 || type == 677 || type == 678 || type == 679 || type == 691 || type == 692 || type == 693)
				{
					overrideWidth = 16;
					overrideHeight = base.height;
				}
				else if (type == 688 || type == 689 || type == 690)
				{
					overrideWidth = 16;
					overrideHeight = base.height;
					vector = new Vector2(0.5f, 1f);
				}
				else if (type == 669 || type == 706)
				{
					overrideWidth = 10;
					overrideHeight = 10;
				}
				else if (type == 261 || type == 277)
				{
					overrideWidth = 26;
					overrideHeight = 26;
				}
				else if (type == 481 || type == 491 || type == 106 || type == 262 || type == 271 || type == 270 || type == 272 || type == 273 || type == 274 || type == 280 || type == 288 || type == 301 || type == 320 || type == 333 || type == 335 || type == 343 || type == 344 || type == 497 || type == 496 || type == 6 || type == 19 || type == 113 || type == 52 || type == 520 || type == 523 || type == 585 || type == 598 || type == 599 || type == 636 || type == 837 || type == 861 || type == 867)
				{
					overrideWidth = 10;
					overrideHeight = 10;
				}
				else if (type == 514)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				else if (type == 248 || type == 247 || type == 507 || type == 508 || type == 662 || type == 680 || type == 685 || type == 757 || type == 928)
				{
					overrideWidth = base.width - 12;
					overrideHeight = base.height - 12;
				}
				else if (aiStyle == 18 || type == 254)
				{
					overrideWidth = base.width - 36;
					overrideHeight = base.height - 36;
				}
				else if (type == 182 || type == 190 || type == 33 || type == 229 || type == 237 || type == 243 || type == 866)
				{
					overrideWidth = base.width - 20;
					overrideHeight = base.height - 20;
				}
				else if (aiStyle == 27)
				{
					overrideWidth = base.width - 12;
					overrideHeight = base.height - 12;
				}
				else if (type == 533 && ai[0] >= 6f)
				{
					overrideWidth = base.width + 6;
					overrideHeight = base.height + 6;
				}
				else if (type == 755 && ai[0] >= 0f)
				{
					overrideWidth = base.width + 6;
					overrideHeight = base.height + 6;
				}
				else if (type == 759)
				{
					if (base.velocity.X != lastVelocity.X)
					{
						base.velocity.X = 0f - lastVelocity.X;
					}
					if (base.velocity.Y != lastVelocity.Y)
					{
						base.velocity.Y = 0f - lastVelocity.Y;
					}
				}
				else if (type == 582 || type == 634 || type == 635 || type == 902)
				{
					overrideWidth = 8;
					overrideHeight = 8;
				}
				else if (type == 617)
				{
					overrideWidth = (int)(20f * scale);
					overrideHeight = (int)(20f * scale);
				}
				else if (type == 304)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				else if (aiStyle == 9)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				else if (type == 931)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				if (((type != 440 && type != 449 && type != 606) || ai[1] != 1f) && (type != 466 || localAI[1] != 1f) && (type != 580 || !(localAI[1] > 0f)) && (type != 640 || !(localAI[1] > 0f)))
				{
					if (aiStyle == 10)
					{
						if (type >= 736 && type <= 738)
						{
							base.velocity = Collision.TileCollision(base.position, base.velocity, base.width, base.height, flag6, flag6);
						}
						else if (type == 42 || type == 65 || type == 68 || type == 354 || (type == 31 && ai[0] == 2f))
						{
							base.velocity = Collision.TileCollision(base.position, base.velocity, base.width, base.height, flag6, flag6);
						}
						else
						{
							base.velocity = Collision.TileCollision(base.position, base.velocity, base.width, base.height, flag6, flag6);
						}
					}
					else
					{
						Vector2 vector2 = base.position;
						int num = ((overrideWidth != -1) ? overrideWidth : base.width);
						int num2 = ((overrideHeight != -1) ? overrideHeight : base.height);
						if (overrideHeight != -1 || overrideWidth != -1)
						{
							vector2 = (vector.HasValue ? (base.Center - new Vector2(num, num2) * vector.Value) : new Vector2(base.position.X + (float)(base.width / 2) - (float)(num / 2), base.position.Y + (float)(base.height / 2) - (float)(num2 / 2)));
						}
						if (wet)
						{
							if (honeyWet)
							{
								Vector2 velocity = base.velocity;
								base.velocity = Collision.TileCollision(vector2, base.velocity, num, num2, flag6, flag6);
								wetVelocity = base.velocity * 0.25f;
								if (base.velocity.X != velocity.X)
								{
									wetVelocity.X = base.velocity.X;
								}
								if (base.velocity.Y != velocity.Y)
								{
									wetVelocity.Y = base.velocity.Y;
								}
							}
							else
							{
								Vector2 velocity2 = base.velocity;
								base.velocity = Collision.TileCollision(vector2, base.velocity, num, num2, flag6, flag6);
								wetVelocity = base.velocity * 0.5f;
								if (base.velocity.X != velocity2.X)
								{
									wetVelocity.X = base.velocity.X;
								}
								if (base.velocity.Y != velocity2.Y)
								{
									wetVelocity.Y = base.velocity.Y;
								}
							}
							if (!Main.projPet[type])
							{
								Vector4 vector3 = Collision.SlopeCollision(vector2, base.velocity, num, num2, 0f, fall: true);
								Vector2 value = base.position - vector2;
								if (aiStyle == 137)
								{
									if (vector2.Y != vector3.Y)
									{
										flag = true;
									}
									if (base.velocity.Y != vector3.W)
									{
										flag = true;
									}
									vector2.Y = vector3.Y;
									base.position.Y = vector2.Y + value.Y;
									base.velocity.Y = vector3.W;
								}
								else
								{
									if (vector2.X != vector3.X)
									{
										flag = true;
									}
									if (vector2.Y != vector3.Y)
									{
										flag = true;
									}
									if (base.velocity.X != vector3.Z)
									{
										flag = true;
									}
									if (base.velocity.Y != vector3.W)
									{
										flag = true;
									}
									vector2.X = vector3.X;
									vector2.Y = vector3.Y;
									base.position = vector2 + value;
									base.velocity.X = vector3.Z;
									base.velocity.Y = vector3.W;
								}
							}
						}
						else
						{
							int num3 = Math.Min(num, num2);
							if (num3 < 3)
							{
								num3 = 3;
							}
							if (num3 > 16)
							{
								num3 = 16;
							}
							if (base.velocity.Length() > (float)num3)
							{
								Vector2 vector4 = Collision.TileCollision(vector2, base.velocity, num, num2, flag6, flag6);
								float num4 = base.velocity.Length();
								float num5 = num3;
								Vector2 value2 = Vector2.Normalize(base.velocity);
								if (vector4.Y == 0f)
								{
									value2.Y = 0f;
								}
								Vector2 zero = Vector2.Zero;
								_ = Vector2.Zero;
								_ = Vector2.Zero;
								Vector2 vector5 = vector2;
								int num6 = 0;
								while (num4 > 0f)
								{
									num6++;
									if (num6 > 300)
									{
										break;
									}
									vector5 = vector2;
									float num7 = num4;
									if (num7 > num5)
									{
										num7 = num5;
									}
									num4 -= num7;
									Vector2 velocity3 = value2 * num7;
									Vector2 vector6 = Collision.TileCollision(vector2, velocity3, num, num2, flag6, flag6);
									vector2 += vector6;
									base.velocity = vector6;
									if (!Main.projPet[type])
									{
										Vector4 vector7 = Collision.SlopeCollision(vector2, base.velocity, num, num2, 0f, fall: true);
										Vector2 value3 = base.position - vector2;
										if (aiStyle == 137)
										{
											if (vector2.Y != vector7.Y)
											{
												flag = true;
											}
											if (base.velocity.Y != vector7.W)
											{
												flag = true;
											}
											vector2.Y = vector7.Y;
											base.position.Y = vector2.Y + value3.Y;
											base.velocity.Y = vector7.W;
										}
										else
										{
											if (vector2.X != vector7.X)
											{
												flag = true;
											}
											if (vector2.Y != vector7.Y)
											{
												flag = true;
											}
											if (base.velocity.X != vector7.Z)
											{
												flag = true;
											}
											if (base.velocity.Y != vector7.W)
											{
												flag = true;
											}
											vector2.X = vector7.X;
											vector2.Y = vector7.Y;
											base.position = vector2 + value3;
											base.velocity.X = vector7.Z;
											base.velocity.Y = vector7.W;
										}
									}
									flag2 = true;
									if (owner == Main.myPlayer && vector2 != vector5 && !flag4)
									{
										Collision.SwitchTiles(vector2, num, num2, vector5, 4);
									}
									vector6 = base.velocity;
									zero += vector6;
								}
								base.velocity = zero;
								if (Math.Abs(base.velocity.X - lastVelocity.X) < 0.0001f)
								{
									base.velocity.X = lastVelocity.X;
								}
								if (Math.Abs(base.velocity.Y - lastVelocity.Y) < 0.0001f)
								{
									base.velocity.Y = lastVelocity.Y;
								}
								if (!Main.projPet[type])
								{
									Vector4 vector8 = Collision.SlopeCollision(vector2, base.velocity, num, num2, 0f, fall: true);
									Vector2 value4 = base.position - vector2;
									if (aiStyle == 137)
									{
										if (vector2.Y != vector8.Y)
										{
											flag = true;
										}
										if (base.velocity.Y != vector8.W)
										{
											flag = true;
										}
										vector2.Y = vector8.Y;
										base.position.Y = vector2.Y + value4.Y;
										base.velocity.Y = vector8.W;
									}
									else
									{
										if (vector2.X != vector8.X)
										{
											flag = true;
										}
										if (vector2.Y != vector8.Y)
										{
											flag = true;
										}
										if (base.velocity.X != vector8.Z)
										{
											flag = true;
										}
										if (base.velocity.Y != vector8.W)
										{
											flag = true;
										}
										vector2.X = vector8.X;
										vector2.Y = vector8.Y;
										base.position = vector2 + value4;
										base.velocity.X = vector8.Z;
										base.velocity.Y = vector8.W;
									}
								}
							}
							else
							{
								base.velocity = Collision.TileCollision(vector2, base.velocity, num, num2, flag6, flag6);
								if (!Main.projPet[type])
								{
									Vector4 vector9 = Collision.SlopeCollision(vector2, base.velocity, num, num2, 0f, fall: true);
									Vector2 value5 = base.position - vector2;
									if (aiStyle == 137)
									{
										if (vector2.Y != vector9.Y)
										{
											flag = true;
										}
										if (base.velocity.Y != vector9.W)
										{
											flag = true;
										}
										vector2.Y = vector9.Y;
										base.position.Y = vector2.Y + value5.Y;
										base.velocity.Y = vector9.W;
									}
									else
									{
										if (vector2.X != vector9.X)
										{
											flag = true;
										}
										if (vector2.Y != vector9.Y)
										{
											flag = true;
										}
										if (base.velocity.X != vector9.Z)
										{
											flag = true;
										}
										if (base.velocity.Y != vector9.W)
										{
											flag = true;
										}
										vector2.X = vector9.X;
										vector2.Y = vector9.Y;
										base.position = vector2 + value5;
										base.velocity.X = vector9.Z;
										base.velocity.Y = vector9.W;
									}
								}
							}
						}
					}
				}
				if (lastVelocity != base.velocity)
				{
					flag = true;
				}
				if (flag)
				{
					if (owner == Main.myPlayer && CanCutTiles() && (friendly || hostile) && damage > 0)
					{
						int num8 = (int)(base.position.X + base.velocity.X - 1f) / 16;
						int num9 = (int)((base.position.X + (float)base.width + base.velocity.X + 1f) / 16f) + 1;
						int num10 = (int)(base.position.Y + base.velocity.Y - 1f) / 16;
						int num11 = (int)((base.position.Y + (float)base.height + base.velocity.Y + 1f) / 16f) + 1;
						if (num8 < 0)
						{
							num8 = 0;
						}
						if (num9 > Main.maxTilesX)
						{
							num9 = Main.maxTilesX;
						}
						if (num10 < 0)
						{
							num10 = 0;
						}
						if (num11 > Main.maxTilesY)
						{
							num11 = Main.maxTilesY;
						}
						for (int i = num8; i < num9; i++)
						{
							for (int j = num10; j < num11; j++)
							{
								if (Main.tile[i, j] != null && Main.tile[i, j].type == 484 && WorldGen.CanCutTile(i, j, TileCuttingContext.AttackProjectile))
								{
									WorldGen.KillTile(i, j);
									if (Main.netMode != 0)
									{
										NetMessage.SendData(17, -1, -1, null, 0, i, j);
									}
								}
							}
						}
					}
					if (type == 663 || type == 665 || type == 667 || type == 677 || type == 678 || type == 679 || type == 691 || type == 692 || type == 693 || type == 688 || type == 689 || type == 690)
					{
						base.position += base.velocity;
						base.velocity = Vector2.Zero;
					}
					else if (type == 434)
					{
						base.position += base.velocity;
						numUpdates = 0;
					}
					else if (type == 601)
					{
						if (Main.netMode != 2 && alpha > 0)
						{
							if (ai[1] != 0f)
							{
								SoundEngine.PlaySound(SoundID.Item114, base.position);
							}
							else
							{
								SoundEngine.PlaySound(SoundID.Item115, base.position);
							}
						}
						if (owner == Main.myPlayer)
						{
							PortalHelper.TryPlacingPortal(this, lastVelocity, base.velocity);
						}
						base.position += base.velocity;
						Kill();
					}
					else if (type == 451)
					{
						ai[0] = 1f;
						ai[1] = 0f;
						netUpdate = true;
						base.velocity = lastVelocity / 2f;
					}
					else if (type == 645)
					{
						ai[0] = 0f;
						ai[1] = -1f;
						netUpdate = true;
					}
					else if (type == 584)
					{
						bool flag7 = false;
						if (base.velocity.X != lastVelocity.X)
						{
							base.velocity.X = lastVelocity.X * -0.75f;
							flag7 = true;
						}
						if ((base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f) || base.velocity.Y == 0f)
						{
							base.velocity.Y = lastVelocity.Y * -0.75f;
							flag7 = true;
						}
						if (flag7)
						{
							float num12 = lastVelocity.Length() / base.velocity.Length();
							if (num12 == 0f)
							{
								num12 = 1f;
							}
							base.velocity /= num12;
							penetrate--;
						}
					}
					else if (type == 532)
					{
						bool flag8 = false;
						if (base.velocity.X != lastVelocity.X)
						{
							base.velocity.X = lastVelocity.X * -0.75f;
							flag8 = true;
						}
						if ((base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f) || base.velocity.Y == 0f)
						{
							base.velocity.Y = lastVelocity.Y * -0.75f;
							flag8 = true;
						}
						if (flag8)
						{
							float num13 = lastVelocity.Length() / base.velocity.Length();
							if (num13 == 0f)
							{
								num13 = 1f;
							}
							base.velocity /= num13;
							penetrate--;
							Collision.HitTiles(base.position, lastVelocity, base.width, base.height);
						}
					}
					else if (type == 533)
					{
						float num14 = 1f;
						bool flag9 = false;
						if (base.velocity.X != lastVelocity.X)
						{
							base.velocity.X = lastVelocity.X * (0f - num14);
							flag9 = true;
						}
						if (base.velocity.Y != lastVelocity.Y || base.velocity.Y == 0f)
						{
							base.velocity.Y = lastVelocity.Y * (0f - num14) * 0.5f;
							flag9 = true;
						}
						if (flag9)
						{
							float num15 = lastVelocity.Length() / base.velocity.Length();
							if (num15 == 0f)
							{
								num15 = 1f;
							}
							base.velocity /= num15;
							if (ai[0] == 7f && (double)base.velocity.Y < -0.1)
							{
								base.velocity.Y += 0.1f;
							}
							if (ai[0] >= 6f && ai[0] < 9f)
							{
								Collision.HitTiles(base.position, lastVelocity, base.width, base.height);
							}
						}
					}
					else if (type == 502)
					{
						ai[0] += 1f;
						SoundEngine.PlaySound(37, (int)base.position.X, (int)base.position.Y, 5 + (int)ai[0]);
						if (ai[0] >= 5f)
						{
							base.position += base.velocity;
							Kill();
						}
						else
						{
							if (base.velocity.Y != lastVelocity.Y)
							{
								base.velocity.Y = 0f - lastVelocity.Y;
							}
							if (base.velocity.X != lastVelocity.X)
							{
								base.velocity.X = 0f - lastVelocity.X;
							}
						}
						Vector2 spinningpoint = new Vector2(0f, -3f - ai[0]).RotatedByRandom(3.1415927410125732);
						float num16 = 10f + ai[0] * 4f;
						Vector2 value6 = new Vector2(1.05f, 1f);
						for (float num17 = 0f; num17 < num16; num17 += 1f)
						{
							int num18 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent);
							Main.dust[num18].position = base.Center;
							Main.dust[num18].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num17 / num16) * value6 * (0.8f + Main.rand.NextFloat() * 0.4f);
							Main.dust[num18].color = Main.hslToRgb(num17 / num16, 1f, 0.5f);
							Main.dust[num18].noGravity = true;
							Main.dust[num18].scale = 1f + ai[0] / 3f;
						}
						if (Main.myPlayer == owner)
						{
							int width = base.width;
							int height = base.height;
							int num19 = penetrate;
							base.position = base.Center;
							base.width = (base.height = 40 + 8 * (int)ai[0]);
							base.Center = base.position;
							penetrate = -1;
							Damage();
							penetrate = num19;
							base.position = base.Center;
							base.width = width;
							base.height = height;
							base.Center = base.position;
						}
					}
					else if (type == 444)
					{
						if (base.velocity.X != lastVelocity.X)
						{
							base.velocity.X = 0f - lastVelocity.X;
						}
						if (base.velocity.Y != lastVelocity.Y)
						{
							base.velocity.Y = 0f - lastVelocity.Y;
						}
						ai[0] = base.velocity.ToRotation();
					}
					else if (type == 617)
					{
						if (base.velocity.X != lastVelocity.X)
						{
							base.velocity.X = (0f - lastVelocity.X) * 0.35f;
						}
						if (base.velocity.Y != lastVelocity.Y)
						{
							base.velocity.Y = (0f - lastVelocity.Y) * 0.35f;
						}
					}
					else if (type == 440 || type == 449 || type == 606)
					{
						if (ai[1] != 1f)
						{
							ai[1] = 1f;
							base.position += base.velocity;
							base.velocity = lastVelocity;
						}
					}
					else if (type == 466 || type == 580 || type == 640)
					{
						if (localAI[1] < 1f)
						{
							localAI[1] += 2f;
							base.position += base.velocity;
							base.velocity = Vector2.Zero;
						}
					}
					else if (type == 851)
					{
						if (base.velocity.X != lastVelocity.X)
						{
							base.velocity.X = (0f - lastVelocity.X) * 0.8f;
						}
						if (base.velocity.Y != lastVelocity.Y)
						{
							base.velocity.Y = (0f - lastVelocity.Y) * 0.5f;
						}
					}
					else if (type == 855)
					{
						if (base.velocity.X != lastVelocity.X)
						{
							base.velocity.X = 0f - lastVelocity.X;
						}
						if (base.velocity.Y != lastVelocity.Y)
						{
							base.velocity.Y = 0f - lastVelocity.Y;
							if (lastVelocity.Y < 0f)
							{
								base.velocity.Y *= 0.25f;
							}
						}
					}
					else if (aiStyle == 54)
					{
						if (base.velocity.X != lastVelocity.X)
						{
							base.velocity.X = lastVelocity.X * -0.6f;
						}
						if (base.velocity.Y != lastVelocity.Y)
						{
							base.velocity.Y = lastVelocity.Y * -0.6f;
						}
					}
					else if (type == 861)
					{
						float num20 = -1f;
						if (ai[1] == 1f)
						{
							num20 = -0.6f;
						}
						if (base.velocity.X != lastVelocity.X)
						{
							base.velocity.X = lastVelocity.X * num20;
						}
						if (base.velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 0.7)
						{
							base.velocity.Y = lastVelocity.Y * num20;
						}
						if (Math.Abs(base.velocity.Y) < 0.5f)
						{
							base.velocity.Y = 0f;
						}
						if (ai[1] != 1f)
						{
							netUpdate = true;
						}
						ai[1] = 1f;
					}
					else if (!Main.projPet[type] && type != 500 && type != 820 && aiStyle != 160 && type != 650 && type != 882 && type != 888 && type != 894 && type != 895 && type != 898 && type != 901)
					{
						if (aiStyle == 99)
						{
							if (type >= 556 && type <= 561)
							{
								bool flag10 = false;
								if (base.velocity.X != lastVelocity.X)
								{
									flag10 = true;
									base.velocity.X = lastVelocity.X * -1f;
								}
								if (base.velocity.Y != lastVelocity.Y)
								{
									flag10 = true;
									base.velocity.Y = lastVelocity.Y * -1f;
								}
								if (flag10)
								{
									Vector2 vector10 = Main.player[owner].Center - base.Center;
									vector10.Normalize();
									vector10 *= base.velocity.Length();
									vector10 *= 0.25f;
									base.velocity *= 0.75f;
									base.velocity += vector10;
									if (base.velocity.Length() > 6f)
									{
										base.velocity *= 0.5f;
									}
								}
							}
						}
						else if (type == 604)
						{
							if (base.velocity.X != lastVelocity.X)
							{
								base.velocity.X = 0f - lastVelocity.X;
							}
							if (base.velocity.Y != lastVelocity.Y)
							{
								base.velocity.Y = 0f - lastVelocity.Y;
							}
						}
						else if (type == 379)
						{
							if (base.velocity.X != lastVelocity.X)
							{
								base.velocity.X = lastVelocity.X * -0.6f;
							}
							if (base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f)
							{
								base.velocity.Y = lastVelocity.Y * -0.6f;
							}
						}
						else if (type == 491)
						{
							if (ai[0] <= 0f)
							{
								ai[0] = -10f;
							}
							if (base.velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 0f)
							{
								base.velocity.X = lastVelocity.X * -1f;
							}
							if (base.velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 0f)
							{
								base.velocity.Y = lastVelocity.Y * -1f;
							}
						}
						else if ((type >= 515 && type <= 517) || type == 637)
						{
							if (base.velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
							{
								base.velocity.X = lastVelocity.X * -0.9f;
							}
							if (base.velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
							{
								base.velocity.Y = lastVelocity.Y * -0.9f;
							}
						}
						else if (type == 921 || type == 926 || type == 937)
						{
							if (base.velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
							{
								base.velocity.X = lastVelocity.X * -0.95f;
							}
							if (base.velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
							{
								base.velocity.Y = lastVelocity.Y * -0.95f;
							}
							penetrate--;
						}
						else if (type == 681)
						{
							timeLeft = 4;
						}
						else if (type == 409)
						{
							if (base.velocity.X != lastVelocity.X)
							{
								base.velocity.X = lastVelocity.X * -1f;
							}
							if (base.velocity.Y != lastVelocity.Y)
							{
								base.velocity.Y = lastVelocity.Y * -1f;
							}
						}
						else if (type == 254)
						{
							tileCollide = false;
							base.velocity = lastVelocity;
							if (timeLeft > 30)
							{
								timeLeft = 30;
							}
						}
						else if (type == 225)
						{
							ai[1] += 1f;
							if (ai[1] == 1f)
							{
								damage = (int)((float)damage * 0.66f);
							}
							if (ai[1] >= 4f)
							{
								Kill();
								return;
							}
							base.velocity.X = 0f - lastVelocity.X;
							base.velocity.Y = 0f - lastVelocity.Y;
							int num21 = FindTargetWithLineOfSight();
							if (num21 != -1)
							{
								NPC nPC = Main.npc[num21];
								float t = Distance(nPC.Center);
								Vector2 value7 = -Vector2.UnitY * MathHelper.Lerp((float)nPC.height * 0.1f, (float)nPC.height * 0.5f, Utils.GetLerpValue(0f, 300f, t));
								base.velocity = DirectionTo(nPC.Center + value7).SafeNormalize(-Vector2.UnitY) * base.velocity.Length();
								netUpdate = true;
							}
						}
						else if (type == 155)
						{
							if (ai[1] > 10f)
							{
								NetworkText networkText = NetworkText.FromKey("Game.BallBounceResult", NetworkText.FromKey(Lang.GetProjectileName(type).Key), ai[1]);
								if (Main.netMode == 0)
								{
									Main.NewText(networkText.ToString(), byte.MaxValue, 240, 20);
								}
								else if (Main.netMode == 2)
								{
									ChatHelper.BroadcastChatMessage(networkText, new Color(255, 240, 20));
								}
							}
							ai[1] = 0f;
							if (base.velocity.X != lastVelocity.X)
							{
								base.velocity.X = lastVelocity.X * -0.6f;
							}
							if (base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f)
							{
								base.velocity.Y = lastVelocity.Y * -0.6f;
							}
						}
						else if (aiStyle == 33)
						{
							if (localAI[0] == 0f)
							{
								if (wet)
								{
									base.position += lastVelocity / 2f;
								}
								else
								{
									base.position += lastVelocity;
								}
								base.velocity *= 0f;
								localAI[0] = 1f;
							}
						}
						else if (type != 308 && type != 377)
						{
							if (type == 477)
							{
								if (base.velocity.Y != lastVelocity.Y || base.velocity.X != lastVelocity.X)
								{
									penetrate--;
									if (penetrate <= 0)
									{
										Kill();
									}
									if (base.velocity.X != lastVelocity.X)
									{
										base.velocity.X = 0f - lastVelocity.X;
									}
									if (base.velocity.Y != lastVelocity.Y)
									{
										base.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								if (penetrate > 0 && owner == Main.myPlayer)
								{
									int[] array = new int[10];
									int num22 = 0;
									int num23 = 700;
									int num24 = 20;
									for (int k = 0; k < 200; k++)
									{
										if (!Main.npc[k].CanBeChasedBy(this))
										{
											continue;
										}
										float num25 = (base.Center - Main.npc[k].Center).Length();
										if (num25 > (float)num24 && num25 < (float)num23 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[k].Center, 1, 1))
										{
											array[num22] = k;
											num22++;
											if (num22 >= 9)
											{
												break;
											}
										}
									}
									if (num22 > 0)
									{
										num22 = Main.rand.Next(num22);
										Vector2 value8 = Main.npc[array[num22]].Center - base.Center;
										float scaleFactor = base.velocity.Length();
										value8.Normalize();
										base.velocity = value8 * scaleFactor;
										netUpdate = true;
									}
								}
							}
							else if (type == 94)
							{
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = 0f - lastVelocity.X;
								}
								if (base.velocity.Y != lastVelocity.Y)
								{
									base.velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 496)
							{
								if (base.velocity.X != lastVelocity.X)
								{
									if (Math.Abs(base.velocity.X) < 1f)
									{
										base.velocity.X = 0f - lastVelocity.X;
									}
									else
									{
										Kill();
									}
								}
								if (base.velocity.Y != lastVelocity.Y)
								{
									if (Math.Abs(base.velocity.Y) < 1f)
									{
										base.velocity.Y = 0f - lastVelocity.Y;
									}
									else
									{
										Kill();
									}
								}
							}
							else if (type == 311)
							{
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = 0f - lastVelocity.X;
									ai[1] += 1f;
								}
								if (base.velocity.Y != lastVelocity.Y)
								{
									base.velocity.Y = 0f - lastVelocity.Y;
									ai[1] += 1f;
								}
								if (ai[1] > 4f)
								{
									Kill();
								}
							}
							else if (type == 312)
							{
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = 0f - lastVelocity.X;
									ai[1] += 1f;
								}
								if (base.velocity.Y != lastVelocity.Y)
								{
									base.velocity.Y = 0f - lastVelocity.Y;
									ai[1] += 1f;
								}
							}
							else if (type == 522 || type == 620)
							{
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = 0f - lastVelocity.X;
								}
								if (base.velocity.Y != lastVelocity.Y)
								{
									base.velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 524)
							{
								ai[0] += 100f;
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = 0f - lastVelocity.X;
								}
								if (base.velocity.Y != lastVelocity.Y)
								{
									base.velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (aiStyle == 93)
							{
								if (base.velocity != lastVelocity)
								{
									ai[1] = 0f;
									ai[0] = 1f;
									netUpdate = true;
									tileCollide = false;
									base.position += base.velocity;
									base.velocity = lastVelocity;
									base.velocity.Normalize();
									base.velocity *= 3f;
								}
							}
							else if (type == 281)
							{
								bool flag11 = Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 2f || ai[0] == -1f;
								if (ai[0] == -2f || ai[0] == -3f)
								{
									flag11 = false;
								}
								if (flag11)
								{
									if (Main.myPlayer == owner)
									{
										int num26 = ((base.velocity.X > 0f) ? 1 : 2);
										if (damage == 0)
										{
											num26 += 2;
										}
										NPC.ReleaseNPC((int)base.Center.X, (int)base.Bottom.Y - 4, 614, num26, owner);
										ai[0] = -3f;
										netUpdate = true;
									}
								}
								else
								{
									if (base.velocity.X != lastVelocity.X)
									{
										base.velocity.X = (0f - lastVelocity.X) * 0.5f;
									}
									if (base.velocity.Y != lastVelocity.Y)
									{
										base.velocity.Y = (0f - lastVelocity.Y) * 0.5f;
									}
								}
							}
							else if (type == 290 || type == 294)
							{
								if (base.velocity.X != lastVelocity.X)
								{
									base.position.X += base.velocity.X;
									base.velocity.X = 0f - lastVelocity.X;
								}
								if (base.velocity.Y != lastVelocity.Y)
								{
									base.position.Y += base.velocity.Y;
									base.velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if ((type == 181 || type == 189 || type == 357 || type == 566) && penetrate > 0)
							{
								if (type == 357)
								{
									damage = (int)((double)damage * 0.9);
								}
								penetrate--;
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = 0f - lastVelocity.X;
								}
								if (base.velocity.Y != lastVelocity.Y)
								{
									base.velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 307 && ai[1] < 5f)
							{
								ai[1] += 1f;
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = 0f - lastVelocity.X;
								}
								if (base.velocity.Y != lastVelocity.Y)
								{
									base.velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 99)
							{
								if (base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
								{
									Collision.HitTiles(base.position, base.velocity, base.width, base.height);
									SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
									base.velocity.Y = (0f - lastVelocity.Y) * 0.2f;
								}
								if (base.velocity.X != lastVelocity.X)
								{
									Kill();
								}
							}
							else if (type == 727)
							{
								int num27 = 20;
								float num28 = 2f;
								float scaleFactor2 = 2f;
								if (base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
								{
									Collision.HitTiles(base.position, base.velocity, base.width, base.height);
									SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
									base.velocity.Y = (0f - lastVelocity.Y) * 0.65f;
									if (owner == Main.myPlayer)
									{
										int num29 = Main.rand.Next(3, 6);
										float num30 = Main.rand.NextFloat();
										for (float num31 = 0f; num31 < 1f; num31 += 1f / (float)num29)
										{
											Vector2 velocity4 = ((num30 + num31) * ((float)Math.PI * 2f)).ToRotationVector2() * scaleFactor2;
											if (velocity4.Y > 0f)
											{
												velocity4 *= -0.7f;
											}
											NewProjectile(base.Center, velocity4, 763, num27, num28, Main.myPlayer);
										}
									}
								}
								if (base.velocity.X != lastVelocity.X)
								{
									Kill();
									if (owner == Main.myPlayer)
									{
										int num32 = Main.rand.Next(3, 6);
										float num33 = Main.rand.NextFloat();
										for (float num34 = 0f; num34 < 1f; num34 += 1f / (float)num32)
										{
											Vector2 velocity5 = ((num33 + num34) * ((float)Math.PI * 2f)).ToRotationVector2() * scaleFactor2;
											if (velocity5.Y > 0f)
											{
												velocity5 *= -0.7f;
											}
											NewProjectile(base.Center, velocity5, 763, num27, num28, Main.myPlayer);
										}
									}
								}
							}
							else if (type == 655)
							{
								if (base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
								{
									Collision.HitTiles(base.position, base.velocity, base.width, base.height);
									SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
									base.velocity.Y = (0f - lastVelocity.Y) * 0.2f;
								}
								if (base.velocity.X != lastVelocity.X)
								{
									Kill();
								}
							}
							else if (type == 36)
							{
								if (penetrate > 1)
								{
									Collision.HitTiles(base.position, base.velocity, base.width, base.height);
									SoundEngine.PlaySound(SoundID.Item10, base.position);
									penetrate--;
									if (base.velocity.X != lastVelocity.X)
									{
										base.velocity.X = 0f - lastVelocity.X;
									}
									if (base.velocity.Y != lastVelocity.Y)
									{
										base.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else
								{
									Kill();
								}
							}
							else if (aiStyle == 21)
							{
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = 0f - lastVelocity.X;
								}
								if (base.velocity.Y != lastVelocity.Y)
								{
									base.velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (aiStyle == 17)
							{
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = lastVelocity.X * -0.75f;
								}
								if (base.velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 1.5)
								{
									base.velocity.Y = lastVelocity.Y * -0.7f;
								}
							}
							else if (aiStyle == 15)
							{
								AI_015_HandleMovementCollision(wetVelocity, lastVelocity);
							}
							else if (aiStyle == 9)
							{
								bool flag12 = owner == Main.myPlayer;
								if (type == 79)
								{
									bool flag13 = ai[0] >= 0f;
									flag12 = flag12 && !flag13;
									if (flag13)
									{
										if (base.velocity.X != lastVelocity.X)
										{
											base.velocity.X *= 0.1f;
										}
										if (base.velocity.Y != lastVelocity.Y)
										{
											base.velocity.Y *= 0.1f;
										}
									}
								}
								if (flag12)
								{
									Kill();
								}
							}
							else if (aiStyle == 39)
							{
								Collision.HitTiles(base.position, base.velocity, base.width, base.height);
								if (type == 33 || type == 106)
								{
									if (base.velocity.X != lastVelocity.X)
									{
										base.velocity.X = 0f - lastVelocity.X;
									}
									if (base.velocity.Y != lastVelocity.Y)
									{
										base.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else
								{
									ai[0] = 1f;
									if (aiStyle == 3)
									{
										base.velocity.X = 0f - lastVelocity.X;
										base.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								netUpdate = true;
								SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
							}
							else if (aiStyle == 3 || aiStyle == 13 || aiStyle == 69 || aiStyle == 109)
							{
								Collision.HitTiles(base.position, base.velocity, base.width, base.height);
								if (type == 33 || type == 106 || type == 866)
								{
									if (base.velocity.X != lastVelocity.X)
									{
										base.velocity.X = 0f - lastVelocity.X;
									}
									if (base.velocity.Y != lastVelocity.Y)
									{
										base.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else
								{
									ai[0] = 1f;
									if ((aiStyle == 3 || aiStyle == 109) && type != 383)
									{
										base.velocity.X = 0f - lastVelocity.X;
										base.velocity.Y = 0f - lastVelocity.Y;
									}
								}
								netUpdate = true;
								SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
							}
							else if (aiStyle == 8 && type != 96)
							{
								SoundEngine.PlaySound(SoundID.Item10, base.position);
								ai[0] += 1f;
								if ((ai[0] >= 5f && type != 253) || (type == 253 && ai[0] >= 8f))
								{
									base.position += base.velocity;
									Kill();
								}
								else
								{
									if (type == 15 && base.velocity.Y > 4f)
									{
										if (base.velocity.Y != lastVelocity.Y)
										{
											base.velocity.Y = (0f - lastVelocity.Y) * 0.8f;
										}
									}
									else if (base.velocity.Y != lastVelocity.Y)
									{
										base.velocity.Y = 0f - lastVelocity.Y;
									}
									if (base.velocity.X != lastVelocity.X)
									{
										base.velocity.X = 0f - lastVelocity.X;
									}
								}
							}
							else if (aiStyle == 61)
							{
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = lastVelocity.X * -0.3f;
								}
								if (base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
								{
									base.velocity.Y = lastVelocity.Y * -0.3f;
								}
							}
							else if (aiStyle == 14)
							{
								if (type == 928)
								{
									int num35 = 0;
									for (int num36 = 1000; num36 >= 0; num36--)
									{
										if (num36 != whoAmI && Main.projectile[num36].active && Main.projectile[num36].owner == owner && Main.projectile[num36].type == type)
										{
											num35++;
											if (num35 >= 2 && timeLeft > Main.projectile[num36].timeLeft && Main.projectile[num36].timeLeft > 30)
											{
												Main.projectile[num36].timeLeft = 2;
											}
										}
									}
								}
								if (type == 261 && ((base.velocity.X != lastVelocity.X && (lastVelocity.X < -3f || lastVelocity.X > 3f)) || (base.velocity.Y != lastVelocity.Y && (lastVelocity.Y < -3f || lastVelocity.Y > 3f))))
								{
									for (int l = 0; l < 10; l++)
									{
										Collision.HitTiles(base.position, base.velocity, base.width, base.height);
									}
									SoundEngine.PlaySound(0, (int)base.Center.X, (int)base.Center.Y);
									MakeBoulderOfEarthExplosion();
								}
								if (type >= 326 && type <= 328 && base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = lastVelocity.X * -0.1f;
								}
								if (type >= 400 && type <= 402)
								{
									if (base.velocity.X != lastVelocity.X)
									{
										base.velocity.X = lastVelocity.X * -0.1f;
									}
								}
								else if (type == 870 && ai[1] == 0f)
								{
									if (base.velocity.X != lastVelocity.X || base.velocity.Y != lastVelocity.Y)
									{
										base.velocity = -lastVelocity;
										ai[1] = 1f;
									}
								}
								else if (type == 50)
								{
									if (base.velocity.X != lastVelocity.X)
									{
										base.velocity.X = lastVelocity.X * -0.2f;
									}
									if (base.velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 1.5)
									{
										base.velocity.Y = lastVelocity.Y * -0.2f;
									}
								}
								else if (type == 185)
								{
									if (base.velocity.X != lastVelocity.X)
									{
										base.velocity.X = lastVelocity.X * -0.9f;
									}
									if (base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
									{
										base.velocity.Y = lastVelocity.Y * -0.9f;
									}
								}
								else if (type == 277)
								{
									if (base.velocity.X != lastVelocity.X)
									{
										base.velocity.X = lastVelocity.X * -0.9f;
									}
									if (base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 3f)
									{
										base.velocity.Y = lastVelocity.Y * -0.9f;
									}
								}
								else if (type != 480)
								{
									if (type == 450)
									{
										if (base.velocity.X != lastVelocity.X)
										{
											base.velocity.X = lastVelocity.X * -0.1f;
										}
									}
									else
									{
										if (base.velocity.X != lastVelocity.X)
										{
											base.velocity.X = lastVelocity.X * -0.5f;
										}
										if (base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
										{
											base.velocity.Y = lastVelocity.Y * -0.5f;
										}
									}
								}
							}
							else if (aiStyle == 16)
							{
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = lastVelocity.X * -0.4f;
									if (type == 29)
									{
										base.velocity.X = base.velocity.X * 0.8f;
									}
								}
								if (base.velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 0.7 && type != 102)
								{
									base.velocity.Y = lastVelocity.Y * -0.4f;
									if (type == 29)
									{
										base.velocity.Y = base.velocity.Y * 0.8f;
									}
								}
								if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || (type >= 338 && type <= 341) || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
								{
									base.velocity *= 0f;
									alpha = 255;
									timeLeft = 3;
								}
							}
							else if (aiStyle == 68)
							{
								base.velocity *= 0f;
								alpha = 255;
								timeLeft = 3;
								netUpdate = true;
							}
							else if (type == 870)
							{
								if (base.velocity.X != lastVelocity.X)
								{
									base.velocity.X = lastVelocity.X * -0.2f;
								}
								if (base.velocity.Y != lastVelocity.Y && lastVelocity.Y > 0f)
								{
									base.velocity.Y = lastVelocity.Y * -0.2f;
								}
							}
							else
							{
								base.position += base.velocity;
								Kill();
							}
						}
					}
				}
			}
			UpdatePosition(wetVelocity);
			if (!flag2 && !flag4 && owner == Main.myPlayer && (tileCollide || flag5) && base.position != base.oldPosition)
			{
				Vector2 position = base.position;
				Vector2 oldPosition = base.oldPosition;
				int num37 = ((overrideWidth != -1) ? overrideWidth : base.width);
				int num38 = ((overrideHeight != -1) ? overrideHeight : base.height);
				if (overrideHeight != -1 || overrideWidth != -1)
				{
					position = new Vector2(base.position.X + (float)(base.width / 2) - (float)(num37 / 2), base.position.Y + (float)(base.height / 2) - (float)(num38 / 2));
					oldPosition = new Vector2(base.oldPosition.X + (float)(base.width / 2) - (float)(num37 / 2), base.oldPosition.Y + (float)(base.height / 2) - (float)(num38 / 2));
				}
				Collision.SwitchTiles(position, num37, num38, oldPosition, 4);
			}
		}

		private void AI_149_GolfBall()
		{
			if (!npcProj && timeLeft < 10)
			{
				timeLeft = 10;
			}
			if (ai[1] == -1f)
			{
				Tile tileSafely = Framing.GetTileSafely(base.Bottom.ToTileCoordinates());
				if (!tileSafely.active() || tileSafely.type != 494)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
				return;
			}
			BallStepResult ballStepResult = GolfHelper.StepGolfBall(this, localAI[0]);
			if (ballStepResult.State == BallState.Resting)
			{
				damage = 0;
				if (Main.netMode == 1 && owner == Main.myPlayer && localAI[1] != (float)ballStepResult.State)
				{
					netUpdate = true;
				}
			}
			localAI[1] = (float)ballStepResult.State;
			rotation += localAI[0];
			if (velocity.Y != 0f && ballStepResult.State == BallState.Moving)
			{
				rotation += velocity.X * 0.1f + velocity.Y * 0.1f;
			}
			if (ballStepResult.State == BallState.Moving && owner == Main.myPlayer)
			{
				bool? flag = ProjectileID.Sets.ForcePlateDetection[135];
				if ((!flag.HasValue || flag.Value) && localAI[1] != 0f)
				{
					Collision.SwitchTiles(position, width, height, oldPosition, 4);
				}
			}
			if (ballStepResult.State == BallState.Moving && Main.netMode == 2 && Main.player.IndexInRange(owner) && Main.player[owner].active)
			{
				RemoteClient.CheckSection(owner, position);
			}
		}

		private void MakeBoulderOfEarthExplosion()
		{
			localAI[0] = 40f;
			float mAX_SPREAD = 20f;
			int fluff = 10;
			int distFluff = 50;
			int layerStart = 1;
			int num = 6;
			if (velocity.Length() < 8f || Math.Abs(velocity.Y) < 4f)
			{
				mAX_SPREAD = 15f;
				fluff = 7;
				distFluff = 30;
				num = 4;
			}
			if (velocity.Length() < 4f || Math.Abs(velocity.Y) < 2f)
			{
				mAX_SPREAD = 15f;
				fluff = 7;
				distFluff = 30;
				num = 2;
				layerStart = 0;
			}
			int layerEnd = num;
			int num2 = num - 2;
			if (num2 < 1)
			{
				num2 = 1;
			}
			CreateGroundExplosion(mAX_SPREAD, fluff, distFluff, layerStart, layerEnd, num2);
			for (int i = 0; i < 10; i++)
			{
				Dust dust = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(width / 2, height / 2), 228, Main.rand.NextVector2Circular(3f, 3f));
				dust.scale = 0.6f;
				if (i < 5)
				{
					dust.noGravity = true;
					dust.scale = 1.8f;
				}
			}
		}

		private void UpdatePosition(Vector2 wetVelocity)
		{
			if (aiStyle != 4 && aiStyle != 38 && aiStyle != 84 && aiStyle != 148 && (aiStyle != 7 || ai[0] != 2f) && ((type != 440 && type != 449 && type != 606) || ai[1] != 1f) && (aiStyle != 93 || !(ai[0] < 0f)) && type != 540 && type != 756 && type != 818 && type != 856 && type != 933 && !ProjectileID.Sets.IsAGolfBall[type])
			{
				if (wet)
				{
					position += wetVelocity;
				}
				else
				{
					position += velocity;
				}
				if (Main.projPet[type] && tileCollide)
				{
					Vector4 vector = Collision.SlopeCollision(position, velocity, width, height);
					position.X = vector.X;
					position.Y = vector.Y;
					velocity.X = vector.Z;
					velocity.Y = vector.W;
				}
			}
		}

		public void FishingCheck()
		{
			if (Main.player[owner].wet)
			{
				return;
			}
			FishingAttempt fisher = default(FishingAttempt);
			fisher.X = (int)(base.Center.X / 16f);
			fisher.Y = (int)(base.Center.Y / 16f);
			fisher.bobberType = type;
			GetFishingPondState(fisher.X, fisher.Y, out fisher.inLava, out fisher.inHoney, out fisher.waterTilesCount, out fisher.chumsInWater);
			if (fisher.waterTilesCount < 75)
			{
				Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.NotEnoughWater");
				return;
			}
			fisher.playerFishingConditions = Main.player[owner].GetFishingConditions();
			int baitItemType = fisher.playerFishingConditions.BaitItemType;
			if (baitItemType == 2673)
			{
				Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
				if ((fisher.X < 380 || fisher.X > Main.maxTilesX - 380) && fisher.waterTilesCount > 1000 && !NPC.AnyNPCs(370))
				{
					ai[1] = Main.rand.Next(-180, -60) - 100;
					localAI[1] = 1f;
					netUpdate = true;
				}
				return;
			}
			fisher.fishingLevel = fisher.playerFishingConditions.FinalFishingLevel;
			if (fisher.fishingLevel == 0)
			{
				return;
			}
			fisher.CanFishInLava = ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType] || ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType] || Main.player[owner].accLavaFishing;
			if (fisher.chumsInWater > 0)
			{
				fisher.fishingLevel += 11;
			}
			if (fisher.chumsInWater > 1)
			{
				fisher.fishingLevel += 6;
			}
			if (fisher.chumsInWater > 2)
			{
				fisher.fishingLevel += 3;
			}
			Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", fisher.fishingLevel);
			fisher.waterNeededToFish = 300;
			float num = Main.maxTilesX / 4200;
			num *= num;
			fisher.atmo = (float)((double)(position.Y / 16f - (60f + 10f * num)) / (Main.worldSurface / 6.0));
			if ((double)fisher.atmo < 0.25)
			{
				fisher.atmo = 0.25f;
			}
			if (fisher.atmo > 1f)
			{
				fisher.atmo = 1f;
			}
			fisher.waterNeededToFish = (int)((float)fisher.waterNeededToFish * fisher.atmo);
			fisher.waterQuality = (float)fisher.waterTilesCount / (float)fisher.waterNeededToFish;
			if (fisher.waterQuality < 1f)
			{
				fisher.fishingLevel = (int)((float)fisher.fishingLevel * fisher.waterQuality);
			}
			fisher.waterQuality = 1f - fisher.waterQuality;
			if (fisher.waterTilesCount < fisher.waterNeededToFish)
			{
				Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FullFishingPower", fisher.fishingLevel, 0.0 - Math.Round(fisher.waterQuality * 100f));
			}
			if (Main.player[owner].luck < 0f)
			{
				if (Main.rand.NextFloat() < 0f - Main.player[owner].luck)
				{
					fisher.fishingLevel = (int)((double)fisher.fishingLevel * (0.9 - (double)Main.rand.NextFloat() * 0.3));
				}
			}
			else if (Main.rand.NextFloat() < Main.player[owner].luck)
			{
				fisher.fishingLevel = (int)((double)fisher.fishingLevel * (1.1 + (double)Main.rand.NextFloat() * 0.3));
			}
			if (fisher.fishingLevel > 50)
			{
				fisher.fishingLevel = (int)(50f + (float)(fisher.fishingLevel - 50) * 0.95f);
			}
			if (fisher.fishingLevel > 75)
			{
				fisher.fishingLevel = (int)(75f + (float)(fisher.fishingLevel - 75) * 0.9f);
			}
			if (fisher.fishingLevel > 100)
			{
				fisher.fishingLevel = (int)(100f + (float)(fisher.fishingLevel - 100) * 0.85f);
			}
			if (fisher.fishingLevel > 125)
			{
				fisher.fishingLevel = (int)(125f + (float)(fisher.fishingLevel - 125) * 0.8f);
			}
			if (fisher.fishingLevel > 150)
			{
				fisher.fishingLevel = (int)(150f + (float)(fisher.fishingLevel - 150) * 0.75f);
			}
			if (fisher.fishingLevel > 175)
			{
				fisher.fishingLevel = (int)(175f + (float)(fisher.fishingLevel - 175) * 0.7f);
			}
			if (fisher.fishingLevel > 200)
			{
				fisher.fishingLevel = (int)(200f + (float)(fisher.fishingLevel - 200) * 0.65f);
			}
			int num2 = (fisher.fishingLevel + 75) / 2;
			if (Main.rand.Next(100) > num2)
			{
				return;
			}
			fisher.heightLevel = 0;
			if ((double)fisher.Y < Main.worldSurface * 0.5)
			{
				fisher.heightLevel = 0;
			}
			else if ((double)fisher.Y < Main.worldSurface)
			{
				fisher.heightLevel = 1;
			}
			else if ((double)fisher.Y < Main.rockLayer)
			{
				fisher.heightLevel = 2;
			}
			else if (fisher.Y < Main.maxTilesY - 300)
			{
				fisher.heightLevel = 3;
			}
			else
			{
				fisher.heightLevel = 4;
			}
			FishingCheck_RollDropLevels(fisher.fishingLevel, out fisher.common, out fisher.uncommon, out fisher.rare, out fisher.veryrare, out fisher.legendary, out fisher.crate);
			FishingCheck_ProbeForQuestFish(fisher);
			FishingCheck_RollEnemySpawns(fisher);
			FishingCheck_RollItemDrop(fisher);
			bool flag = false;
			if (fisher.rolledItemDrop > 0)
			{
				if (Main.player[owner].sonarPotion)
				{
					Item item = new Item();
					item.SetDefaults(fisher.rolledItemDrop);
					item.position = position;
					PopupText.sonarText = PopupText.NewText(PopupTextContext.SonarAlert, item, 1, noStack: true);
					if (PopupText.sonarText > -1)
					{
						Main.popupText[PopupText.sonarText].sonar = true;
					}
				}
				float num3 = fisher.fishingLevel;
				ai[1] = (float)Main.rand.Next(-240, -90) - num3;
				localAI[1] = fisher.rolledItemDrop;
				netUpdate = true;
				flag = true;
			}
			if (fisher.rolledEnemySpawn > 0)
			{
				if (Main.player[owner].sonarPotion)
				{
					PopupText.sonarText = PopupText.NewText(PopupTextContext.SonarAlert, fisher.rolledEnemySpawn, base.Center, stay5TimesLonger: false);
					if (PopupText.sonarText > -1)
					{
						Main.popupText[PopupText.sonarText].sonar = true;
					}
				}
				float num4 = fisher.fishingLevel;
				ai[1] = (float)Main.rand.Next(-240, -90) - num4;
				localAI[1] = -fisher.rolledEnemySpawn;
				netUpdate = true;
				flag = true;
			}
			if (!flag)
			{
				int num5 = 0;
				if (ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType])
				{
					num5++;
				}
				if (ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType])
				{
					num5++;
				}
				if (Main.player[owner].accLavaFishing)
				{
					num5++;
				}
				if (num5 >= 2)
				{
					localAI[1] += 240f;
				}
			}
		}

		private void FishingCheck_RollEnemySpawns(FishingAttempt fisher)
		{
			if (fisher.inLava || fisher.inHoney || !Main.bloodMoon || Main.dayTime)
			{
				return;
			}
			int maxValue = 6;
			if (fisher.bobberType == 760)
			{
				maxValue = 3;
			}
			if (Main.rand.Next(maxValue) != 0)
			{
				return;
			}
			if (Main.hardMode)
			{
				fisher.rolledEnemySpawn = Utils.SelectRandom(Main.rand, new short[4]
				{
					620,
					621,
					586,
					587
				});
				if (Main.rand.Next(10) == 0)
				{
					fisher.rolledEnemySpawn = 618;
				}
			}
			else
			{
				fisher.rolledEnemySpawn = Utils.SelectRandom(Main.rand, new short[2]
				{
					586,
					587
				});
			}
		}

		private void FishingCheck_RollItemDrop(FishingAttempt fisher)
		{
			if (fisher.rolledEnemySpawn > 0)
			{
				return;
			}
			if (fisher.inLava)
			{
				if (fisher.CanFishInLava)
				{
					if (fisher.crate && Main.rand.Next(5) == 0)
					{
						fisher.rolledItemDrop = (Main.hardMode ? 4878 : 4877);
					}
					else if (fisher.legendary && Main.hardMode && Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = Main.rand.NextFromList(new short[4]
						{
							4819,
							4820,
							4872,
							2331
						});
					}
					else if (fisher.legendary && !Main.hardMode && Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = Main.rand.NextFromList(new short[3]
						{
							4819,
							4820,
							4872
						});
					}
					else if (fisher.veryrare)
					{
						fisher.rolledItemDrop = 2312;
					}
					else if (fisher.rare)
					{
						fisher.rolledItemDrop = 2315;
					}
				}
				return;
			}
			if (fisher.inHoney)
			{
				if (fisher.rare || (fisher.uncommon && Main.rand.Next(2) == 0))
				{
					fisher.rolledItemDrop = 2314;
				}
				else if (fisher.uncommon && fisher.questFish == 2451)
				{
					fisher.rolledItemDrop = 2451;
				}
				return;
			}
			if (Main.rand.Next(50) > fisher.fishingLevel && Main.rand.Next(50) > fisher.fishingLevel && fisher.waterTilesCount < fisher.waterNeededToFish)
			{
				fisher.rolledItemDrop = Main.rand.Next(2337, 2340);
				return;
			}
			if (fisher.crate)
			{
				bool hardMode = Main.hardMode;
				if (fisher.veryrare || fisher.legendary)
				{
					fisher.rolledItemDrop = (hardMode ? 3981 : 2336);
				}
				else if (fisher.rare && Main.player[owner].ZoneDungeon)
				{
					fisher.rolledItemDrop = (hardMode ? 3984 : 3205);
				}
				else if (fisher.rare && Main.player[owner].ZoneBeach)
				{
					fisher.rolledItemDrop = (hardMode ? 5003 : 5002);
				}
				else if (fisher.rare && Main.player[owner].ZoneCorrupt)
				{
					fisher.rolledItemDrop = (hardMode ? 3982 : 3203);
				}
				else if (fisher.rare && Main.player[owner].ZoneCrimson)
				{
					fisher.rolledItemDrop = (hardMode ? 3983 : 3204);
				}
				else if (fisher.rare && Main.player[owner].ZoneHallow)
				{
					fisher.rolledItemDrop = (hardMode ? 3986 : 3207);
				}
				else if (fisher.rare && Main.player[owner].ZoneJungle)
				{
					fisher.rolledItemDrop = (hardMode ? 3987 : 3208);
				}
				else if (fisher.rare && Main.player[owner].ZoneSnow)
				{
					fisher.rolledItemDrop = (hardMode ? 4406 : 4405);
				}
				else if (fisher.rare && Main.player[owner].ZoneDesert)
				{
					fisher.rolledItemDrop = (hardMode ? 4408 : 4407);
				}
				else if (fisher.rare && fisher.heightLevel == 0)
				{
					fisher.rolledItemDrop = (hardMode ? 3985 : 3206);
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = (hardMode ? 3980 : 2335);
				}
				else
				{
					fisher.rolledItemDrop = (hardMode ? 3979 : 2334);
				}
				return;
			}
			if (!NPC.combatBookWasUsed && Main.bloodMoon && fisher.legendary && Main.rand.Next(3) == 0)
			{
				fisher.rolledItemDrop = 4382;
				return;
			}
			if (fisher.legendary && Main.rand.Next(5) == 0)
			{
				fisher.rolledItemDrop = 2423;
				return;
			}
			if (fisher.legendary && Main.rand.Next(5) == 0)
			{
				fisher.rolledItemDrop = 3225;
				return;
			}
			if (fisher.legendary && Main.rand.Next(10) == 0)
			{
				fisher.rolledItemDrop = 2420;
				return;
			}
			if (!fisher.legendary && !fisher.veryrare && fisher.uncommon && Main.rand.Next(5) == 0)
			{
				fisher.rolledItemDrop = 3196;
				return;
			}
			bool flag = Main.player[owner].ZoneDesert;
			if (Main.player[owner].ZoneDungeon)
			{
				flag = false;
				if (fisher.rolledItemDrop == 0 && fisher.veryrare && Main.rand.Next(7) == 0)
				{
					fisher.rolledItemDrop = 3000;
				}
			}
			else
			{
				bool flag2 = Main.player[owner].ZoneCorrupt;
				bool flag3 = Main.player[owner].ZoneCrimson;
				if (flag2 && flag3)
				{
					if (Main.rand.Next(2) == 0)
					{
						flag3 = false;
					}
					else
					{
						flag2 = false;
					}
				}
				if (flag2)
				{
					if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
					{
						fisher.rolledItemDrop = 2429;
					}
					else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
					{
						fisher.rolledItemDrop = 3210;
					}
					else if (fisher.rare)
					{
						fisher.rolledItemDrop = 2330;
					}
					else if (fisher.uncommon && fisher.questFish == 2454)
					{
						fisher.rolledItemDrop = 2454;
					}
					else if (fisher.uncommon && fisher.questFish == 2485)
					{
						fisher.rolledItemDrop = 2485;
					}
					else if (fisher.uncommon && fisher.questFish == 2457)
					{
						fisher.rolledItemDrop = 2457;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2318;
					}
				}
				else if (flag3)
				{
					if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
					{
						fisher.rolledItemDrop = 2429;
					}
					else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
					{
						fisher.rolledItemDrop = 3211;
					}
					else if (fisher.uncommon && fisher.questFish == 2477)
					{
						fisher.rolledItemDrop = 2477;
					}
					else if (fisher.uncommon && fisher.questFish == 2463)
					{
						fisher.rolledItemDrop = 2463;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2319;
					}
					else if (fisher.common)
					{
						fisher.rolledItemDrop = 2305;
					}
				}
				else if (Main.player[owner].ZoneHallow)
				{
					if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
					{
						fisher.rolledItemDrop = 2429;
					}
					else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
					{
						fisher.rolledItemDrop = 3209;
					}
					else if (fisher.heightLevel > 1 && fisher.veryrare)
					{
						fisher.rolledItemDrop = 2317;
					}
					else if (fisher.heightLevel > 1 && fisher.rare && fisher.questFish == 2465)
					{
						fisher.rolledItemDrop = 2465;
					}
					else if (fisher.heightLevel < 2 && fisher.rare && fisher.questFish == 2468)
					{
						fisher.rolledItemDrop = 2468;
					}
					else if (fisher.rare)
					{
						fisher.rolledItemDrop = 2310;
					}
					else if (fisher.uncommon && fisher.questFish == 2471)
					{
						fisher.rolledItemDrop = 2471;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2307;
					}
				}
				if (fisher.rolledItemDrop == 0 && Main.player[owner].ZoneSnow)
				{
					if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2467)
					{
						fisher.rolledItemDrop = 2467;
					}
					else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2470)
					{
						fisher.rolledItemDrop = 2470;
					}
					else if (fisher.heightLevel >= 2 && fisher.uncommon && fisher.questFish == 2484)
					{
						fisher.rolledItemDrop = 2484;
					}
					else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2466)
					{
						fisher.rolledItemDrop = 2466;
					}
					else if ((fisher.common && Main.rand.Next(12) == 0) || (fisher.uncommon && Main.rand.Next(6) == 0))
					{
						fisher.rolledItemDrop = 3197;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2306;
					}
					else if (fisher.common)
					{
						fisher.rolledItemDrop = 2299;
					}
					else if (fisher.heightLevel > 1 && Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = 2309;
					}
				}
				if (fisher.rolledItemDrop == 0 && Main.player[owner].ZoneJungle)
				{
					if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2452)
					{
						fisher.rolledItemDrop = 2452;
					}
					else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2483)
					{
						fisher.rolledItemDrop = 2483;
					}
					else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2488)
					{
						fisher.rolledItemDrop = 2488;
					}
					else if (fisher.heightLevel >= 1 && fisher.uncommon && fisher.questFish == 2486)
					{
						fisher.rolledItemDrop = 2486;
					}
					else if (fisher.heightLevel > 1 && fisher.uncommon)
					{
						fisher.rolledItemDrop = 2311;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2313;
					}
					else if (fisher.common)
					{
						fisher.rolledItemDrop = 2302;
					}
				}
				if (fisher.rolledItemDrop == 0 && Main.player[owner].ZoneGlowshroom && fisher.uncommon && fisher.questFish == 2475)
				{
					fisher.rolledItemDrop = 2475;
				}
			}
			if (fisher.rolledItemDrop == 0)
			{
				if (fisher.heightLevel <= 1 && (fisher.X < 380 || fisher.X > Main.maxTilesX - 380) && fisher.waterTilesCount > 1000)
				{
					if (fisher.veryrare && Main.rand.Next(2) == 0)
					{
						fisher.rolledItemDrop = 2341;
					}
					else if (fisher.veryrare)
					{
						fisher.rolledItemDrop = 2342;
					}
					else if (fisher.rare && Main.rand.Next(5) == 0)
					{
						fisher.rolledItemDrop = 2438;
					}
					else if (fisher.rare && Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = 2332;
					}
					else if (fisher.uncommon && fisher.questFish == 2480)
					{
						fisher.rolledItemDrop = 2480;
					}
					else if (fisher.uncommon && fisher.questFish == 2481)
					{
						fisher.rolledItemDrop = 2481;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2316;
					}
					else if (fisher.common && Main.rand.Next(2) == 0)
					{
						fisher.rolledItemDrop = 2301;
					}
					else if (fisher.common)
					{
						fisher.rolledItemDrop = 2300;
					}
					else
					{
						fisher.rolledItemDrop = 2297;
					}
				}
				else if (flag)
				{
					if (fisher.uncommon && fisher.questFish == 4393)
					{
						fisher.rolledItemDrop = 4393;
					}
					else if (fisher.uncommon && fisher.questFish == 4394)
					{
						fisher.rolledItemDrop = 4394;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 4410;
					}
					else if (Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = 4402;
					}
					else
					{
						fisher.rolledItemDrop = 4401;
					}
				}
			}
			if (fisher.rolledItemDrop != 0)
			{
				return;
			}
			if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2461)
			{
				fisher.rolledItemDrop = 2461;
			}
			else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2453)
			{
				fisher.rolledItemDrop = 2453;
			}
			else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2473)
			{
				fisher.rolledItemDrop = 2473;
			}
			else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2476)
			{
				fisher.rolledItemDrop = 2476;
			}
			else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2458)
			{
				fisher.rolledItemDrop = 2458;
			}
			else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2459)
			{
				fisher.rolledItemDrop = 2459;
			}
			else if (fisher.heightLevel == 0 && fisher.uncommon)
			{
				fisher.rolledItemDrop = 2304;
			}
			else if (fisher.heightLevel > 0 && fisher.heightLevel < 3 && fisher.uncommon && fisher.questFish == 2455)
			{
				fisher.rolledItemDrop = 2455;
			}
			else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2479)
			{
				fisher.rolledItemDrop = 2479;
			}
			else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2456)
			{
				fisher.rolledItemDrop = 2456;
			}
			else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2474)
			{
				fisher.rolledItemDrop = 2474;
			}
			else if (fisher.heightLevel > 1 && fisher.rare && Main.rand.Next(5) == 0)
			{
				if (Main.hardMode && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 2437;
				}
				else
				{
					fisher.rolledItemDrop = 2436;
				}
			}
			else if (fisher.heightLevel > 1 && fisher.legendary && Main.rand.Next(3) != 0)
			{
				fisher.rolledItemDrop = 2308;
			}
			else if (fisher.heightLevel > 1 && fisher.veryrare && Main.rand.Next(2) == 0)
			{
				fisher.rolledItemDrop = 2320;
			}
			else if (fisher.heightLevel > 1 && fisher.rare)
			{
				fisher.rolledItemDrop = 2321;
			}
			else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2478)
			{
				fisher.rolledItemDrop = 2478;
			}
			else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2450)
			{
				fisher.rolledItemDrop = 2450;
			}
			else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2464)
			{
				fisher.rolledItemDrop = 2464;
			}
			else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2469)
			{
				fisher.rolledItemDrop = 2469;
			}
			else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2462)
			{
				fisher.rolledItemDrop = 2462;
			}
			else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2482)
			{
				fisher.rolledItemDrop = 2482;
			}
			else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2472)
			{
				fisher.rolledItemDrop = 2472;
			}
			else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2460)
			{
				fisher.rolledItemDrop = 2460;
			}
			else if (fisher.heightLevel > 1 && fisher.uncommon && Main.rand.Next(4) != 0)
			{
				fisher.rolledItemDrop = 2303;
			}
			else if (fisher.heightLevel > 1 && (fisher.uncommon || fisher.common || Main.rand.Next(4) == 0))
			{
				if (Main.rand.Next(4) == 0)
				{
					fisher.rolledItemDrop = 2303;
				}
				else
				{
					fisher.rolledItemDrop = 2309;
				}
			}
			else if (fisher.uncommon && fisher.questFish == 2487)
			{
				fisher.rolledItemDrop = 2487;
			}
			else if (fisher.waterTilesCount > 1000 && fisher.common)
			{
				fisher.rolledItemDrop = 2298;
			}
			else
			{
				fisher.rolledItemDrop = 2290;
			}
		}

		private void FishingCheck_ProbeForQuestFish(FishingAttempt fisher)
		{
			fisher.questFish = Main.anglerQuestItemNetIDs[Main.anglerQuest];
			if (Main.player[owner].HasItem(fisher.questFish))
			{
				fisher.questFish = -1;
			}
			if (!NPC.AnyNPCs(369))
			{
				fisher.questFish = -1;
			}
			if (Main.anglerQuestFinished)
			{
				fisher.questFish = -1;
			}
		}

		private void FishingCheck_RollDropLevels(int fishingLevel, out bool common, out bool uncommon, out bool rare, out bool veryrare, out bool legendary, out bool crate)
		{
			int num = 150 / fishingLevel;
			int num2 = 150 * 2 / fishingLevel;
			int num3 = 150 * 7 / fishingLevel;
			int num4 = 150 * 15 / fishingLevel;
			int num5 = 150 * 30 / fishingLevel;
			int num6 = 10;
			if (Main.player[owner].cratePotion)
			{
				num6 += 10;
			}
			if (num < 2)
			{
				num = 2;
			}
			if (num2 < 3)
			{
				num2 = 3;
			}
			if (num3 < 4)
			{
				num3 = 4;
			}
			if (num4 < 5)
			{
				num4 = 5;
			}
			if (num5 < 6)
			{
				num5 = 6;
			}
			common = false;
			uncommon = false;
			rare = false;
			veryrare = false;
			legendary = false;
			crate = false;
			if (Main.rand.Next(num) == 0)
			{
				common = true;
			}
			if (Main.rand.Next(num2) == 0)
			{
				uncommon = true;
			}
			if (Main.rand.Next(num3) == 0)
			{
				rare = true;
			}
			if (Main.rand.Next(num4) == 0)
			{
				veryrare = true;
			}
			if (Main.rand.Next(num5) == 0)
			{
				legendary = true;
			}
			if (Main.rand.Next(100) < num6)
			{
				crate = true;
			}
		}

		private static void GetFishingPondState(int x, int y, out bool lava, out bool honey, out int numWaters, out int chumCount)
		{
			lava = false;
			honey = false;
			numWaters = 0;
			chumCount = 0;
			Point tileCoords = new Point(0, 0);
			GetFishingPondWidth(x, y, out var minX, out var maxX);
			for (int i = minX; i <= maxX; i++)
			{
				int num = y;
				while (Main.tile[i, num].liquid > 0 && !WorldGen.SolidTile(i, num) && num < Main.maxTilesY - 10)
				{
					numWaters++;
					num++;
					if (Main.tile[i, num].lava())
					{
						lava = true;
					}
					else if (Main.tile[i, num].honey())
					{
						honey = true;
					}
					tileCoords.X = i;
					tileCoords.Y = num;
					chumCount += Main.instance.ChumBucketProjectileHelper.GetChumsInLocation(tileCoords);
				}
			}
			if (honey)
			{
				numWaters = (int)((double)numWaters * 1.5);
			}
		}

		private static void GetFishingPondWidth(int x, int y, out int minX, out int maxX)
		{
			minX = x;
			maxX = x;
			while (minX > 10 && Main.tile[minX, y].liquid > 0 && !WorldGen.SolidTile(minX, y))
			{
				minX--;
			}
			while (maxX < Main.maxTilesX - 10 && Main.tile[maxX, y].liquid > 0 && !WorldGen.SolidTile(maxX, y))
			{
				maxX++;
			}
		}

		public bool CanBeReflected()
		{
			if (active && friendly && !hostile && damage > 0 && (aiStyle == 1 || aiStyle == 2 || aiStyle == 8 || aiStyle == 21 || aiStyle == 24 || aiStyle == 28 || aiStyle == 29 || aiStyle == 131))
			{
				return true;
			}
			return false;
		}

		public Color GetFairyQueenWeaponsColor(float alphaChannelMultiplier = 1f, float lerpToWhite = 0f, float? rawHueOverride = null)
		{
			float num = ai[1];
			if (rawHueOverride.HasValue)
			{
				num = rawHueOverride.Value;
			}
			float num2 = (num + 0.5f) % 1f;
			float saturation = 1f;
			float luminosity = 0.5f;
			if (Main.player[owner].active)
			{
				switch (Main.player[owner].name)
				{
				case "Cenx":
				{
					float amount3 = Utils.PingPongFrom01To010(num2);
					amount3 = MathHelper.SmoothStep(0f, 1f, amount3);
					amount3 = MathHelper.SmoothStep(0f, 1f, amount3);
					Color color2 = Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, amount3);
					if (lerpToWhite != 0f)
					{
						color2 = Color.Lerp(color2, Color.White, lerpToWhite);
					}
					color2.A = (byte)((float)(int)color2.A * alphaChannelMultiplier);
					return color2;
				}
				case "Crowno":
					luminosity = MathHelper.Lerp(0.25f, 0.4f, Utils.Turn01ToCyclic010(num2));
					num2 = MathHelper.Lerp(127f / 180f, 47f / 60f, Utils.Turn01ToCyclic010(num2));
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "Yoraiz0r":
					num2 = MathHelper.Lerp(0.9f, 0.95f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					break;
				case "Jaxrud":
					num2 = MathHelper.Lerp(13f / 72f, 157f / 360f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					break;
				case "Lazure":
					num2 = MathHelper.Lerp(8f / 15f, 83f / 90f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					break;
				case "Leinfors":
					num2 = MathHelper.Lerp(0.7f, 0.77f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					break;
				case "Grox The Great":
					num2 = MathHelper.Lerp(0.31f, 0.5f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 1f, 0.8f);
					break;
				case "Acamaeda":
					num2 = MathHelper.Lerp(0.06f, 0.28f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Alchemystics":
					num2 = MathHelper.Lerp(0.74f, 0.96f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.6f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Antithesis":
				{
					num2 = 0.51f;
					float amount12 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.5f, amount12);
					break;
				}
				case "Aurora3500":
					num2 = MathHelper.Lerp(0.33f, 0.8f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "Criddle":
					num2 = MathHelper.Lerp(0.05f, 0.15f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "Darthkitten":
				{
					num2 = 1f;
					float amount11 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(1f, 0.4f, amount11);
					break;
				}
				case "darthmorf":
				{
					num2 = 0f;
					float amount10 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.2f, amount10);
					break;
				}
				case "Discipile":
					num2 = MathHelper.Lerp(0.1f, 0.15f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					break;
				case "Doylee":
					num2 = MathHelper.Lerp(0.68f, 1f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Ghostar":
				{
					num2 = 0.66f;
					float amount9 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0.15f, 0.85f, amount9);
					break;
				}
				case "Jenosis":
					num2 = MathHelper.Lerp(0.9f, 1.13f, Utils.Turn01ToCyclic010(num2)) % 1f;
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "Kazzymodus":
				{
					num2 = 0.33f;
					float amount8 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0.15f, 0.4f, amount8);
					break;
				}
				case "Khaios":
				{
					num2 = 0.33f;
					float amount7 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.2f, amount7);
					break;
				}
				case "Loki":
				{
					num2 = 0f;
					float amount6 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.25f, amount6);
					break;
				}
				case "ManaUser":
					num2 = MathHelper.Lerp(0.41f, 0.57f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					break;
				case "Mid":
				{
					num2 = 0f;
					float amount5 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.9f, amount5);
					break;
				}
				case "Nike Leon":
					num2 = MathHelper.Lerp(0.04f, 0.1f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "ppowersteef":
					num2 = MathHelper.Lerp(0f, 0.15f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "RBrandon":
					num2 = 0.03f;
					luminosity = 0.3f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Redigit":
					num2 = 0.7f;
					luminosity = 0.5f;
					break;
				case "Serenity":
				{
					num2 = 0.85f;
					float amount4 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(1f, 0.5f, amount4);
					break;
				}
				case "Sigma":
					num2 = MathHelper.Lerp(0f, 0.12f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Unit One":
				{
					float amount2 = Utils.PingPongFrom01To010(num2);
					amount2 = MathHelper.SmoothStep(0f, 1f, amount2);
					Color color = Color.Lerp(Color.Yellow, Color.Blue, amount2);
					if (lerpToWhite != 0f)
					{
						color = Color.Lerp(color, Color.White, lerpToWhite);
					}
					color.A = (byte)((float)(int)color.A * alphaChannelMultiplier);
					return color;
				}
				case "Vulpes Inculta":
					num2 = MathHelper.Lerp(0.65f, 0.75f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "Waze3174":
					num2 = MathHelper.Lerp(0.33f, 0f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.3f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Xman101":
				{
					num2 = 0.06f;
					float amount = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.5f, amount);
					break;
				}
				case "Zoomo":
					num2 = 0.77f;
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				}
			}
			Color color3 = Main.hslToRgb(num2, saturation, luminosity);
			color3 *= Opacity;
			if (lerpToWhite != 0f)
			{
				color3 = Color.Lerp(color3, Color.White, lerpToWhite);
			}
			color3.A = (byte)((float)(int)color3.A * alphaChannelMultiplier);
			return color3;
		}

		public float GetLastPrismHue(float laserIndex, float laserLuminance, float laserAlphaMultiplier)
		{
			if (Main.player[owner].active)
			{
				double timeForVisualEffects = Main.timeForVisualEffects;
				switch (Main.player[owner].name)
				{
				case "Cenx":
				{
					float amount = Utils.PingPongFrom01To010(laserIndex / 6f);
					amount = MathHelper.SmoothStep(0f, 1f, amount);
					amount = MathHelper.SmoothStep(0f, 1f, amount);
					return Main.rgbToHsl(Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, amount)).X;
				}
				case "Crowno":
					laserLuminance = MathHelper.Lerp(0.25f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.5f;
					return MathHelper.Lerp(127f / 180f, 47f / 60f, Utils.Turn01ToCyclic010(laserIndex / 6f));
				case "Tsuki":
				case "Yoraiz0r":
					return 0.92f;
				case "Lazure":
					return MathHelper.Lerp(8f / 15f, 83f / 90f, Utils.Turn01ToCyclic010(laserIndex / 6f));
				case "Jaxrud":
					return MathHelper.Lerp(13f / 72f, 157f / 360f, Utils.Turn01ToCyclic010(laserIndex / 6f));
				case "Ghostar":
					laserLuminance = MathHelper.Lerp(0.4f, 0.7f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.3f;
					return 0.66f;
				case "Devalaous":
					return 0.66f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.1f;
				case "Leinfors":
					return 0.73f + (float)Math.Cos(timeForVisualEffects / 3.0 * 6.2831854820251465) * 0.03f;
				case "Aeroblop":
					return 0.25f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.1f;
				case "Doylee":
					return 0.84f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.16f;
				case "Darkhalis":
				case "Arkhalis":
					return 0.75f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.07f;
				case "Nike Leon":
					return 0.07f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.04f;
				case "Suweeka":
					return 0.5f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.18f;
				case "W1K":
					return 0.75f + (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465) * 0.05f;
				case "Grox The Great":
					return 0.41f + (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465) * 0.1f;
				case "Acamaeda":
					return 0.18f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.1f;
				case "Alchemystics":
					return 0.73f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.18f;
				case "Antithesis":
					laserLuminance = 0.25f;
					laserAlphaMultiplier = 0.4f;
					return 0.7f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.05f;
				case "Aurora3500":
					laserLuminance = MathHelper.Lerp(0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.25f;
					return 0.35f;
				case "Criddle":
					return 0.91f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.19f;
				case "Darthkitten":
					laserLuminance = MathHelper.Lerp(0.4f, 0.9f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.3f;
					return 1f;
				case "darthmorf":
					laserLuminance = MathHelper.Lerp(0f, 0.2f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.4f;
					return 0f;
				case "Discipile":
					laserLuminance = MathHelper.Lerp(0f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.35f;
					return 0.55f;
				case "Jenosis":
					return 0.66f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.08f;
				case "Kazzymodus":
					laserLuminance = MathHelper.Lerp(0.6f, 0.8f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.3f;
					return 0.33f;
				case "Khaios":
					laserLuminance = MathHelper.Lerp(0f, 0.1f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.25f;
					return 0.35f;
				case "Loki":
					laserLuminance = MathHelper.Lerp(0f, 0.3f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 5.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.4f;
					return 0f;
				case "ManaUser":
					return 0.49f + (float)Math.Cos(timeForVisualEffects / 140.0 * 6.2831854820251465) * 0.08f;
				case "Mid":
					laserLuminance = 0.25f;
					laserAlphaMultiplier = 0.4f;
					return 0.86f + (float)Math.Cos(timeForVisualEffects / 270.0 * 6.2831854820251465) * 0.13f;
				case "ppowersteef":
					laserLuminance = MathHelper.Lerp(0.1f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.25f;
					return 0.6f;
				case "RBrandon":
					laserLuminance = MathHelper.Lerp(0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.4f;
					return 1f;
				case "Redigit":
					return 0.7f;
				case "Serenity":
					laserLuminance = MathHelper.Lerp(0.9f, 0.65f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.3f;
					return 0.85f;
				case "Sigma":
					return 0.06f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.06f;
				case "Unit One":
					return 0.38f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.24f;
				case "Vulpes Inculta":
					return 0.7f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.05f;
				case "Waze3174":
					return 0.38f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.24f;
				case "Xman101":
					laserLuminance = MathHelper.Lerp(0.9f, 0.55f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.2f;
					return 0.33f;
				case "Zoomo":
					return 0.77f;
				case "Random":
					return Main.rand.NextFloat();
				}
			}
			return (float)(int)laserIndex / 6f;
		}

		public static int GetByUUID(int owner, float uuid)
		{
			return GetByUUID(owner, (int)uuid);
		}

		public static int GetByUUID(int owner, int uuid)
		{
			if (uuid < 0 || uuid >= 1000 || owner < 0 || owner >= 255)
			{
				return -1;
			}
			int num = Main.projectileIdentity[owner, uuid];
			if (num >= 0 && Main.projectile[num].active)
			{
				return num;
			}
			return -1;
		}

		public void ProjectileFixDesperation()
		{
			if (owner < 0 || owner >= 1000)
			{
				return;
			}
			switch (type)
			{
			case 461:
			case 632:
			case 642:
			case 644:
			{
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].owner == owner && (float)Main.projectile[i].identity == ai[1] && Main.projectile[i].active)
					{
						ai[1] = i;
						break;
					}
				}
				break;
			}
			}
		}

		public bool ShouldUseWindPhysics()
		{
			if (Main.windPhysics)
			{
				bool? flag = ProjectileID.Sets.WindPhysicsImmunity[type];
				if (flag.HasValue)
				{
					return !flag.Value;
				}
				switch (aiStyle)
				{
				case 1:
				case 2:
				case 8:
				case 10:
				case 14:
				case 16:
				case 17:
				case 21:
				case 24:
				case 28:
				case 29:
				case 32:
				case 33:
				case 34:
				case 35:
				case 49:
				case 72:
				case 93:
				case 96:
				case 106:
					return true;
				}
			}
			return false;
		}

		private void AI_151_SuperStar()
		{
			alpha -= 10;
			int num = 100;
			if (alpha < num)
			{
				alpha = num;
			}
			if (soundDelay == 0)
			{
				soundDelay = 20 + Main.rand.Next(40);
				SoundEngine.PlaySound(SoundID.Item9, position);
			}
			rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.005f * (float)direction;
			Vector2 value = new Vector2(Main.screenWidth, Main.screenHeight);
			if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + value / 2f, value + new Vector2(400f))) && Main.rand.Next(6) == 0)
			{
				Gore.NewGore(position, velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17));
			}
			for (int i = 0; i < 2; i++)
			{
				if (Main.rand.Next(8) == 0)
				{
					int num2 = 228;
					Dust dust = Dust.NewDustDirect(position, width, height, num2, 0f, 0f, 127);
					dust.velocity *= 0.25f;
					dust.scale = 1.3f;
					dust.noGravity = true;
					dust.velocity += velocity.RotatedBy((float)Math.PI / 8f * (1f - (float)(2 * i))) * 0.2f;
				}
			}
		}

		public bool IsInterruptible(Player player)
		{
			int num = aiStyle;
			if (num == 160)
			{
				return true;
			}
			return false;
		}

		public void Interrupt(Player player)
		{
			int num = aiStyle;
			if (num == 160)
			{
				Kill();
				player.heldProj = -1;
				player.itemAnimation = 0;
				player.itemTime = 0;
			}
		}

		private void AI_152_SuperStarSlash()
		{
			alpha -= 10;
			int num = 100;
			if (alpha < num)
			{
				alpha = num;
			}
			if (soundDelay == 0)
			{
				soundDelay = 20 + Main.rand.Next(40);
				SoundEngine.PlaySound(SoundID.Item9, position);
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			tileCollide = false;
		}

		private void Resize(int newWidth, int newHeight)
		{
			position = base.Center;
			width = newWidth;
			height = newHeight;
			base.Center = position;
		}

		public void AI()
		{
			//IL_1952b: Unknown result type (might be due to invalid IL or missing references)
			//IL_19567: Unknown result type (might be due to invalid IL or missing references)
			//IL_1956c: Unknown result type (might be due to invalid IL or missing references)
			//IL_195ad: Unknown result type (might be due to invalid IL or missing references)
			//IL_195b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_2dba7: Unknown result type (might be due to invalid IL or missing references)
			//IL_2e339: Unknown result type (might be due to invalid IL or missing references)
			//IL_2e428: Unknown result type (might be due to invalid IL or missing references)
			if (aiStyle == 1)
			{
				AI_001();
			}
			else if (aiStyle == 2)
			{
				if (Main.windPhysics)
				{
					base.velocity.X += Main.windSpeedCurrent * Main.windPhysicsStrength;
				}
				if (type == 93 && Main.rand.Next(5) == 0)
				{
					int num = Dust.NewDust(base.position, base.width, base.height, 57, base.velocity.X * 0.2f + (float)(direction * 3), base.velocity.Y * 0.2f, 100, default(Color), 0.3f);
					Main.dust[num].velocity.X *= 0.3f;
					Main.dust[num].velocity.Y *= 0.3f;
				}
				if (type == 304 && localAI[0] == 0f)
				{
					localAI[0] += 1f;
					alpha = 0;
				}
				if (type == 510)
				{
					rotation += Math.Abs(base.velocity.X) * 0.04f * (float)direction;
				}
				else
				{
					rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.03f * (float)direction;
				}
				if (type == 909)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 30f)
					{
						base.velocity.Y += 0.4f;
						base.velocity.X *= 0.97f;
					}
					if (Main.netMode != 1 && this.ai[1] == 0f)
					{
						this.ai[1] = 1 + Main.rand.Next(6);
						netUpdate = true;
					}
					if (this.ai[1] > 0f)
					{
						frame = (int)this.ai[1] - 1;
					}
				}
				else if (type == 162)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item14, base.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						base.velocity.Y += 0.28f;
						base.velocity.X *= 0.99f;
					}
					if (this.ai[0] > 2f)
					{
						alpha = 0;
						if (this.ai[0] == 3f)
						{
							for (int i = 0; i < 10; i++)
							{
								int num2 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust = Main.dust[num2];
								dust.velocity *= 0.5f;
								dust = Main.dust[num2];
								dust.velocity += base.velocity * 0.1f;
							}
							for (int j = 0; j < 5; j++)
							{
								int num3 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num3].noGravity = true;
								Dust dust = Main.dust[num3];
								dust.velocity *= 3f;
								dust = Main.dust[num3];
								dust.velocity += base.velocity * 0.2f;
								num3 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100);
								dust = Main.dust[num3];
								dust.velocity *= 2f;
								dust = Main.dust[num3];
								dust.velocity += base.velocity * 0.3f;
							}
							for (int k = 0; k < 1; k++)
							{
								int num4 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
								Gore gore = Main.gore[num4];
								gore.position += base.velocity * 1.25f;
								Main.gore[num4].scale = 1.5f;
								gore = Main.gore[num4];
								gore.velocity += base.velocity * 0.5f;
								gore = Main.gore[num4];
								gore.velocity *= 0.02f;
							}
						}
					}
				}
				else if (type == 281)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item14, base.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						base.velocity.Y += 0.28f;
						base.velocity.X *= 0.99f;
					}
					if (this.ai[0] > 2f)
					{
						alpha = 0;
						if (this.ai[0] == 3f)
						{
							for (int l = 0; l < 10; l++)
							{
								int num5 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust = Main.dust[num5];
								dust.velocity *= 0.5f;
								dust = Main.dust[num5];
								dust.velocity += base.velocity * 0.1f;
							}
							for (int m = 0; m < 5; m++)
							{
								int num6 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num6].noGravity = true;
								Dust dust = Main.dust[num6];
								dust.velocity *= 3f;
								dust = Main.dust[num6];
								dust.velocity += base.velocity * 0.2f;
								num6 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100);
								dust = Main.dust[num6];
								dust.velocity *= 2f;
								dust = Main.dust[num6];
								dust.velocity += base.velocity * 0.3f;
							}
							for (int n = 0; n < 1; n++)
							{
								int num7 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
								Gore gore = Main.gore[num7];
								gore.position += base.velocity * 1.25f;
								Main.gore[num7].scale = 1.5f;
								gore = Main.gore[num7];
								gore.velocity += base.velocity * 0.5f;
								gore = Main.gore[num7];
								gore.velocity *= 0.02f;
							}
						}
					}
				}
				else if (type == 240)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item14, base.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 16f)
					{
						base.velocity.Y += 0.18f;
						base.velocity.X *= 0.991f;
					}
					if (this.ai[0] > 2f)
					{
						alpha = 0;
						if (this.ai[0] == 3f)
						{
							for (int num8 = 0; num8 < 7; num8++)
							{
								int num9 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust = Main.dust[num9];
								dust.velocity *= 0.5f;
								dust = Main.dust[num9];
								dust.velocity += base.velocity * 0.1f;
							}
							for (int num10 = 0; num10 < 3; num10++)
							{
								int num11 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num11].noGravity = true;
								Dust dust = Main.dust[num11];
								dust.velocity *= 3f;
								dust = Main.dust[num11];
								dust.velocity += base.velocity * 0.2f;
								num11 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100);
								dust = Main.dust[num11];
								dust.velocity *= 2f;
								dust = Main.dust[num11];
								dust.velocity += base.velocity * 0.3f;
							}
							for (int num12 = 0; num12 < 1; num12++)
							{
								int num13 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
								Gore gore = Main.gore[num13];
								gore.position += base.velocity * 1.25f;
								Main.gore[num13].scale = 1.25f;
								gore = Main.gore[num13];
								gore.velocity += base.velocity * 0.5f;
								gore = Main.gore[num13];
								gore.velocity *= 0.02f;
							}
						}
					}
				}
				else if (type == 497)
				{
					int num14 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num14].position = (Main.dust[num14].position + base.Center) / 2f;
					Main.dust[num14].noGravity = true;
					Dust dust = Main.dust[num14];
					dust.velocity *= 0.3f;
					dust = Main.dust[num14];
					dust.velocity -= base.velocity * 0.1f;
					this.ai[0] += 1f;
					if (this.ai[0] >= 30f)
					{
						base.velocity.X *= 0.99f;
						base.velocity.Y += 0.5f;
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				else if (type == 861)
				{
					if (Main.myPlayer == owner)
					{
						localAI[0]++;
						if (localAI[0] > 30f)
						{
							localAI[0] = 30f;
						}
						Player player = Main.player[owner];
						for (int num15 = 0; num15 < 255; num15++)
						{
							Player player2 = Main.player[num15];
							if (player2 != null && player2.active && !player2.dead && (player2.whoAmI != player.whoAmI || !(localAI[0] < 30f)) && Colliding(base.Hitbox, player2.Hitbox))
							{
								Kill();
								break;
							}
						}
					}
					if (base.velocity.Y == 0f)
					{
						base.velocity.X *= 0.95f;
					}
					else
					{
						base.velocity.X *= 0.995f;
					}
					if (Math.Abs(base.velocity.X) < 0.5f)
					{
						base.velocity.X = 0f;
					}
					if (base.velocity.X == 0f && base.velocity.Y == 0f)
					{
						Kill();
					}
					base.velocity.Y += 0.1f;
					if (this.ai[1] == 1f)
					{
						frame = (frameCounter = 0);
						rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.03f * (float)direction;
					}
					else
					{
						if (frame == 0)
						{
							frame = 1;
						}
						frameCounter++;
						if (frameCounter > 4)
						{
							frameCounter = 0;
							frame++;
							if (frame >= Main.projFrames[type])
							{
								frame = 1;
							}
						}
						rotation = base.velocity.ToRotation() + (float)Math.PI / 4f;
						spriteDirection = ((!(base.velocity.X < 0f)) ? 1 : (-1));
						if (spriteDirection == -1)
						{
							rotation += (float)Math.PI / 2f;
						}
					}
				}
				else if (type == 249)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 0f)
					{
						base.velocity.Y += 0.25f;
					}
				}
				else if (type == 347)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 5f)
					{
						base.velocity.Y += 0.25f;
					}
				}
				else if (type == 501)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						base.velocity.X *= 0.995f;
						base.velocity.Y += 0.2f;
					}
				}
				else if (type == 504)
				{
					alpha = 255;
					this.ai[0] += 1f;
					if (this.ai[0] > 3f)
					{
						int num16 = 100;
						if (this.ai[0] > 20f)
						{
							int num17 = 40;
							float num18 = this.ai[0] - 20f;
							num16 = (int)(100f * (1f - num18 / (float)num17));
							if (num18 >= (float)num17)
							{
								Kill();
							}
						}
						if (this.ai[0] <= 10f)
						{
							num16 = (int)this.ai[0] * 10;
						}
						if (Main.rand.Next(100) < num16)
						{
							int num19 = Dust.NewDust(base.position, base.width, base.height, 6, 0f, 0f, 150);
							Main.dust[num19].position = (Main.dust[num19].position + base.Center) / 2f;
							Main.dust[num19].noGravity = true;
							Dust dust = Main.dust[num19];
							dust.velocity *= 2f;
							dust = Main.dust[num19];
							dust.scale *= 1.2f;
							dust = Main.dust[num19];
							dust.velocity += base.velocity;
						}
					}
					if (this.ai[0] >= 20f)
					{
						base.velocity.X *= 0.99f;
						base.velocity.Y += 0.1f;
					}
				}
				else if (type == 69 || type == 70 || type == 621)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 10f)
					{
						base.velocity.Y += 0.25f;
						base.velocity.X *= 0.99f;
					}
				}
				else if (type == 166)
				{
					if (owner == Main.myPlayer && this.ai[1] == 1f)
					{
						for (int num20 = 0; num20 < 200; num20++)
						{
							if (Main.npc[num20].active && Main.npc[num20].townNPC && Colliding(base.Hitbox, Main.npc[num20].Hitbox))
							{
								Kill();
								return;
							}
						}
						if (Main.netMode == 1)
						{
							for (int num21 = 0; num21 < 255; num21++)
							{
								if (num21 != owner && Main.player[num21].active && !Main.player[owner].InOpposingTeam(Main.player[num21]) && Colliding(base.Hitbox, Main.player[num21].Hitbox))
								{
									Kill();
									return;
								}
							}
						}
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 20f)
					{
						base.velocity.Y += 0.3f;
						base.velocity.X *= 0.98f;
					}
				}
				else if (type == 300)
				{
					if (this.ai[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item1, base.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 60f)
					{
						base.velocity.Y += 0.2f;
						base.velocity.X *= 0.99f;
					}
				}
				else if (type == 306)
				{
					if (alpha <= 200)
					{
						for (int num22 = 0; num22 < 4; num22++)
						{
							float num23 = base.velocity.X / 4f * (float)num22;
							float num24 = base.velocity.Y / 4f * (float)num22;
							int num25 = Dust.NewDust(base.position, base.width, base.height, 184);
							Main.dust[num25].position.X = base.Center.X - num23;
							Main.dust[num25].position.Y = base.Center.Y - num24;
							Dust dust = Main.dust[num25];
							dust.velocity *= 0f;
							Main.dust[num25].scale = 0.7f;
						}
					}
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 0.785f;
				}
				else if (type == 304)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 30f)
					{
						alpha += 10;
						damage = (int)((double)damage * 0.9);
						knockBack = (int)((double)knockBack * 0.9);
						if (alpha >= 255)
						{
							active = false;
						}
					}
					if (this.ai[0] < 30f)
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				else if (type == 370 || type == 371 || type == 936)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 15f)
					{
						base.velocity.Y += 0.3f;
						base.velocity.X *= 0.98f;
					}
				}
				else
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 20f)
					{
						base.velocity.Y += 0.4f;
						base.velocity.X *= 0.97f;
					}
					else if (type == 48 || type == 54 || type == 93 || type == 520 || type == 599)
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
				if (type == 54 && Main.rand.Next(20) == 0)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 40, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 0, default(Color), 0.75f);
				}
			}
			else if (aiStyle == 3)
			{
				if (soundDelay == 0 && type != 383)
				{
					soundDelay = 8;
					SoundEngine.PlaySound(SoundID.Item7, base.position);
				}
				if (type == 19)
				{
					for (int num26 = 0; num26 < 2; num26++)
					{
						int num27 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num27].noGravity = true;
						Main.dust[num27].velocity.X *= 0.3f;
						Main.dust[num27].velocity.Y *= 0.3f;
					}
				}
				else if (type == 867)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num28 = Dust.NewDust(base.position, base.width, base.height, 165, base.velocity.X, base.velocity.Y, 50);
						Dust dust = Main.dust[num28];
						dust.velocity *= 0.5f;
						Main.dust[num28].noGravity = true;
					}
				}
				else if (type == 33)
				{
					if (Main.rand.Next(1) == 0)
					{
						int num29 = Dust.NewDust(base.position, base.width, base.height, 40, base.velocity.X * 0.25f, base.velocity.Y * 0.25f, 0, default(Color), 1.4f);
						Main.dust[num29].noGravity = true;
					}
				}
				else if (type == 320)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num30 = Dust.NewDust(base.position, base.width, base.height, 5, base.velocity.X * 0.25f, base.velocity.Y * 0.25f, 0, default(Color), 1.1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num30].scale = 0.9f;
							Dust dust = Main.dust[num30];
							dust.velocity *= 0.2f;
						}
						else
						{
							Main.dust[num30].noGravity = true;
						}
					}
				}
				else if (type == 6)
				{
					if (Main.rand.Next(5) == 0)
					{
						int num31 = Main.rand.Next(3);
						Dust.NewDust(base.position, base.width, base.height, num31 switch
						{
							0 => 15, 
							1 => 57, 
							_ => 58, 
						}, base.velocity.X * 0.25f, base.velocity.Y * 0.25f, 150, default(Color), 0.7f);
					}
				}
				else if (type == 113 && Main.rand.Next(1) == 0)
				{
					int num32 = Dust.NewDust(base.position, base.width, base.height, 76, base.velocity.X * 0.15f, base.velocity.Y * 0.15f, 0, default(Color), 1.1f);
					Main.dust[num32].noGravity = true;
					Dust.NewDust(base.position, base.width, base.height, 15, base.velocity.X * 0.05f, base.velocity.Y * 0.05f, 150, default(Color), 0.6f);
				}
				if (this.ai[0] == 0f)
				{
					bool flag = true;
					int num33 = type;
					if (num33 == 866)
					{
						flag = false;
					}
					if (flag)
					{
						this.ai[1] += 1f;
					}
					if (type == 106 && this.ai[1] >= 45f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					if (type == 320 || type == 383)
					{
						if (this.ai[1] >= 10f)
						{
							base.velocity.Y += 0.5f;
							if (type == 383 && base.velocity.Y < 0f)
							{
								base.velocity.Y += 0.35f;
							}
							base.velocity.X *= 0.95f;
							if (base.velocity.Y > 16f)
							{
								base.velocity.Y = 16f;
							}
							if (type == 383 && Vector2.Distance(base.Center, Main.player[owner].Center) > 800f)
							{
								this.ai[0] = 1f;
							}
						}
					}
					else if (type == 182)
					{
						if (Main.rand.Next(2) == 0)
						{
							int num34 = Dust.NewDust(base.position, base.width, base.height, 57, 0f, 0f, 255, default(Color), 0.75f);
							Dust dust = Main.dust[num34];
							dust.velocity *= 0.1f;
							Main.dust[num34].noGravity = true;
						}
						if (base.velocity.X > 0f)
						{
							spriteDirection = 1;
						}
						else if (base.velocity.X < 0f)
						{
							spriteDirection = -1;
						}
						float num35 = base.position.X;
						float num36 = base.position.Y;
						float num37 = 800f;
						bool flag2 = false;
						if (this.ai[1] > 10f && this.ai[1] < 360f)
						{
							for (int num38 = 0; num38 < 200; num38++)
							{
								if (Main.npc[num38].CanBeChasedBy(this))
								{
									float num39 = Main.npc[num38].position.X + (float)(Main.npc[num38].width / 2);
									float num40 = Main.npc[num38].position.Y + (float)(Main.npc[num38].height / 2);
									float num41 = Distance(Main.npc[num38].Center);
									if (num41 < num37 && Collision.CanHit(new Vector2(base.position.X + (float)(base.width / 2), base.position.Y + (float)(base.height / 2)), 1, 1, Main.npc[num38].position, Main.npc[num38].width, Main.npc[num38].height))
									{
										num37 = num41;
										num35 = num39;
										num36 = num40;
										flag2 = true;
									}
								}
							}
						}
						if (!flag2)
						{
							num35 = base.position.X + (float)(base.width / 2) + base.velocity.X * 100f;
							num36 = base.position.Y + (float)(base.height / 2) + base.velocity.Y * 100f;
							if (this.ai[1] >= 30f)
							{
								this.ai[0] = 1f;
								this.ai[1] = 0f;
								netUpdate = true;
							}
						}
						float num42 = 12f;
						float num43 = 0.25f;
						Vector2 vector = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
						float num44 = num35 - vector.X;
						float num45 = num36 - vector.Y;
						float num46 = (float)Math.Sqrt(num44 * num44 + num45 * num45);
						num46 = num42 / num46;
						num44 *= num46;
						num45 *= num46;
						if (base.velocity.X < num44)
						{
							base.velocity.X += num43;
							if (base.velocity.X < 0f && num44 > 0f)
							{
								base.velocity.X += num43 * 2f;
							}
						}
						else if (base.velocity.X > num44)
						{
							base.velocity.X -= num43;
							if (base.velocity.X > 0f && num44 < 0f)
							{
								base.velocity.X -= num43 * 2f;
							}
						}
						if (base.velocity.Y < num45)
						{
							base.velocity.Y += num43;
							if (base.velocity.Y < 0f && num45 > 0f)
							{
								base.velocity.Y += num43 * 2f;
							}
						}
						else if (base.velocity.Y > num45)
						{
							base.velocity.Y -= num43;
							if (base.velocity.Y > 0f && num45 < 0f)
							{
								base.velocity.Y -= num43 * 2f;
							}
						}
					}
					else if (type == 866)
					{
						if (owner == Main.myPlayer && damage > 0)
						{
							float num47 = this.ai[1];
							if (localAI[0] >= 10f && localAI[0] <= 360f)
							{
								int num48 = FindTargetWithLineOfSight();
								this.ai[1] = num48;
							}
							else
							{
								this.ai[1] = -1f;
							}
							if (this.ai[1] != num47)
							{
								netUpdate = true;
							}
						}
						localAI[0] += 1f;
						int num49 = (int)this.ai[1];
						Vector2 vector2;
						if (Main.npc.IndexInRange(num49) && Main.npc[num49].CanBeChasedBy(this))
						{
							vector2 = Main.npc[num49].Center;
						}
						else
						{
							vector2 = base.Center + base.velocity * 100f;
							int num50 = 30;
							if (owner != Main.myPlayer)
							{
								num50 = 60;
							}
							if (localAI[0] >= (float)num50)
							{
								this.ai[0] = 1f;
								this.ai[1] = 0f;
								netUpdate = true;
							}
						}
						float num51 = 12f;
						float num52 = 0.25f;
						Vector2 vector3 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
						float num53 = vector2.X - vector3.X;
						float num54 = vector2.Y - vector3.Y;
						float num55 = (float)Math.Sqrt(num53 * num53 + num54 * num54);
						num55 = num51 / num55;
						num53 *= num55;
						num54 *= num55;
						if (base.velocity.X < num53)
						{
							base.velocity.X += num52;
							if (base.velocity.X < 0f && num53 > 0f)
							{
								base.velocity.X += num52 * 2f;
							}
						}
						else if (base.velocity.X > num53)
						{
							base.velocity.X -= num52;
							if (base.velocity.X > 0f && num53 < 0f)
							{
								base.velocity.X -= num52 * 2f;
							}
						}
						if (base.velocity.Y < num54)
						{
							base.velocity.Y += num52;
							if (base.velocity.Y < 0f && num54 > 0f)
							{
								base.velocity.Y += num52 * 2f;
							}
						}
						else if (base.velocity.Y > num54)
						{
							base.velocity.Y -= num52;
							if (base.velocity.Y > 0f && num54 < 0f)
							{
								base.velocity.Y -= num52 * 2f;
							}
						}
					}
					else if (type == 301)
					{
						if (this.ai[1] >= 20f)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							netUpdate = true;
						}
					}
					else if (this.ai[1] >= 30f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				else
				{
					tileCollide = false;
					float num56 = 9f;
					float num57 = 0.4f;
					if (type == 19)
					{
						num56 = 13f;
						num57 = 0.6f;
					}
					else if (type == 33)
					{
						num56 = 15f;
						num57 = 0.8f;
					}
					else if (type == 182)
					{
						num56 = 16f;
						num57 = 1.2f;
					}
					else if (type == 866)
					{
						num56 = 16f;
						num57 = 1.2f;
					}
					else if (type == 106)
					{
						num56 = 16f;
						num57 = 1.2f;
					}
					else if (type == 272)
					{
						num56 = 15f;
						num57 = 1f;
					}
					else if (type == 333)
					{
						num56 = 12f;
						num57 = 0.6f;
					}
					else if (type == 301)
					{
						num56 = 15f;
						num57 = 3f;
					}
					else if (type == 320)
					{
						num56 = 15f;
						num57 = 3f;
					}
					else if (type == 383)
					{
						num56 = 16f;
						num57 = 4f;
					}
					Vector2 vector4 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
					float num58 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector4.X;
					float num59 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector4.Y;
					float num60 = (float)Math.Sqrt(num58 * num58 + num59 * num59);
					if (num60 > 3000f)
					{
						Kill();
					}
					num60 = num56 / num60;
					num58 *= num60;
					num59 *= num60;
					if (type == 383)
					{
						Vector2 vector5 = new Vector2(num58, num59) - base.velocity;
						if (vector5 != Vector2.Zero)
						{
							Vector2 value = vector5;
							value.Normalize();
							base.velocity += value * Math.Min(num57, vector5.Length());
						}
					}
					else
					{
						if (base.velocity.X < num58)
						{
							base.velocity.X += num57;
							if (base.velocity.X < 0f && num58 > 0f)
							{
								base.velocity.X += num57;
							}
						}
						else if (base.velocity.X > num58)
						{
							base.velocity.X -= num57;
							if (base.velocity.X > 0f && num58 < 0f)
							{
								base.velocity.X -= num57;
							}
						}
						if (base.velocity.Y < num59)
						{
							base.velocity.Y += num57;
							if (base.velocity.Y < 0f && num59 > 0f)
							{
								base.velocity.Y += num57;
							}
						}
						else if (base.velocity.Y > num59)
						{
							base.velocity.Y -= num57;
							if (base.velocity.Y > 0f && num59 < 0f)
							{
								base.velocity.Y -= num57;
							}
						}
					}
					if (Main.myPlayer == owner)
					{
						Rectangle rectangle = new Rectangle((int)base.position.X, (int)base.position.Y, base.width, base.height);
						Rectangle value2 = new Rectangle((int)Main.player[owner].position.X, (int)Main.player[owner].position.Y, Main.player[owner].width, Main.player[owner].height);
						if (rectangle.Intersects(value2))
						{
							Kill();
						}
					}
				}
				if (type == 106)
				{
					rotation += 0.3f * (float)direction;
				}
				else if (type == 866)
				{
					rotation = base.velocity.ToRotation();
					if (Main.rand.Next(2) == 0)
					{
						int num61 = Dust.NewDust(base.position, base.width, base.height, 212);
						Dust dust = Main.dust[num61];
						dust.velocity *= 0.1f;
						Main.dust[num61].noGravity = true;
					}
				}
				else if (type == 383)
				{
					if (this.ai[0] == 0f)
					{
						Vector2 velocity = base.velocity;
						velocity.Normalize();
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
					else
					{
						Vector2 vector6 = base.Center - Main.player[owner].Center;
						vector6.Normalize();
						rotation = (float)Math.Atan2(vector6.Y, vector6.X) + 1.57f;
					}
				}
				else
				{
					rotation += 0.4f * (float)direction;
				}
			}
			else if (aiStyle == 4)
			{
				if (Main.netMode != 2 && this.ai[1] == 0f && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					LegacySoundStyle legacySoundStyle = SoundID.Item8;
					if (type == 494)
					{
						legacySoundStyle = SoundID.Item101;
					}
					SoundEngine.PlaySound(legacySoundStyle, base.Center);
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				if (this.ai[0] == 0f)
				{
					if (type >= 150 && type <= 152 && this.ai[1] == 0f && alpha == 255 && Main.rand.Next(2) == 0)
					{
						type++;
						netUpdate = true;
					}
					alpha -= 50;
					if (type >= 150 && type <= 152)
					{
						alpha -= 25;
					}
					else if (type == 493 || type == 494)
					{
						alpha -= 50;
					}
					if (alpha > 0)
					{
						return;
					}
					alpha = 0;
					this.ai[0] = 1f;
					if (this.ai[1] == 0f)
					{
						this.ai[1] += 1f;
						base.position += base.velocity * 1f;
					}
					if (type == 7 && Main.myPlayer == owner)
					{
						int num62 = type;
						if (this.ai[1] >= 6f)
						{
							num62++;
						}
						int num63 = NewProjectile(base.position.X + base.velocity.X + (float)(base.width / 2), base.position.Y + base.velocity.Y + (float)(base.height / 2), base.velocity.X, base.velocity.Y, num62, damage, knockBack, owner);
						Main.projectile[num63].damage = damage;
						Main.projectile[num63].ai[1] = this.ai[1] + 1f;
						NetMessage.SendData(27, -1, -1, null, num63);
					}
					else if (type == 494 && Main.myPlayer == owner)
					{
						int num64 = type;
						if (this.ai[1] >= (float)(7 + Main.rand.Next(2)))
						{
							num64--;
						}
						int num65 = damage;
						float num66 = knockBack;
						if (num64 == 493)
						{
							num65 = (int)((double)damage * 1.25);
							num66 = knockBack * 1.25f;
						}
						int number = NewProjectile(base.position.X + base.velocity.X + (float)(base.width / 2), base.position.Y + base.velocity.Y + (float)(base.height / 2), base.velocity.X, base.velocity.Y, num64, num65, num66, owner, 0f, this.ai[1] + 1f);
						NetMessage.SendData(27, -1, -1, null, number);
					}
					else if ((type == 150 || type == 151) && Main.myPlayer == owner)
					{
						int num67 = type;
						if (type == 150)
						{
							num67 = 151;
						}
						else if (type == 151)
						{
							num67 = 150;
						}
						if (this.ai[1] >= 10f && type == 151)
						{
							num67 = 152;
						}
						int num68 = NewProjectile(base.position.X + base.velocity.X + (float)(base.width / 2), base.position.Y + base.velocity.Y + (float)(base.height / 2), base.velocity.X, base.velocity.Y, num67, damage, knockBack, owner);
						Main.projectile[num68].damage = damage;
						Main.projectile[num68].ai[1] = this.ai[1] + 1f;
						NetMessage.SendData(27, -1, -1, null, num68);
					}
					return;
				}
				if (alpha < 170 && alpha + 5 >= 170)
				{
					if (type >= 150 && type <= 152)
					{
						for (int num69 = 0; num69 < 8; num69++)
						{
							int num70 = Dust.NewDust(base.position, base.width, base.height, 7, base.velocity.X * 0.025f, base.velocity.Y * 0.025f, 200, default(Color), 1.3f);
							Main.dust[num70].noGravity = true;
							Dust dust = Main.dust[num70];
							dust.velocity *= 0.5f;
						}
					}
					else if (type == 493 || type == 494)
					{
						for (int num71 = 0; num71 < 8; num71++)
						{
							int num72 = Dust.NewDust(base.position, base.width, base.height, Main.rand.Next(68, 71), base.velocity.X * 0.025f, base.velocity.Y * 0.025f, 200, default(Color), 1.3f);
							Main.dust[num72].noGravity = true;
							Dust dust = Main.dust[num72];
							dust.velocity *= 0.5f;
						}
					}
					else
					{
						for (int num73 = 0; num73 < 3; num73++)
						{
							Dust.NewDust(base.position, base.width, base.height, 18, base.velocity.X * 0.025f, base.velocity.Y * 0.025f, 170, default(Color), 1.2f);
						}
						Dust.NewDust(base.position, base.width, base.height, 14, 0f, 0f, 170, default(Color), 1.1f);
					}
				}
				if (type >= 150 && type <= 152)
				{
					alpha += 3;
				}
				else if (type == 493 || type == 494)
				{
					alpha += 4;
				}
				else
				{
					alpha += 5;
				}
				if (alpha >= 255)
				{
					Kill();
				}
			}
			else if (aiStyle == 5)
			{
				if (type == 12 && Main.dayTime && damage == 1000)
				{
					Kill();
				}
				if (type == 503 || type == 723 || type == 724 || type == 725 || type == 726)
				{
					if (base.Center.Y > this.ai[1])
					{
						tileCollide = true;
					}
				}
				else if (type == 92)
				{
					if (base.position.Y > this.ai[1])
					{
						tileCollide = true;
					}
				}
				else
				{
					if (this.ai[1] == 0f && !Collision.SolidCollision(base.position, base.width, base.height))
					{
						this.ai[1] = 1f;
						netUpdate = true;
					}
					if (this.ai[1] != 0f)
					{
						tileCollide = true;
					}
				}
				if (soundDelay == 0)
				{
					soundDelay = 20 + Main.rand.Next(40);
					SoundEngine.PlaySound(SoundID.Item9, base.position);
				}
				if (type == 503)
				{
					alpha -= 15;
					int num74 = 150;
					if (base.Center.Y >= this.ai[1])
					{
						num74 = 0;
					}
					if (alpha < num74)
					{
						alpha = num74;
					}
					localAI[0] += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f * (float)direction;
				}
				else if (type == 723 || type == 724 || type == 725 || type == 726)
				{
					alpha -= 15;
					int num75 = 100;
					if (base.Center.Y >= this.ai[1])
					{
						num75 = 0;
					}
					if (alpha < num75)
					{
						alpha = num75;
					}
					localAI[0] += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f * (float)direction;
				}
				else
				{
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
					}
					alpha += (int)(25f * localAI[0]);
					if (alpha > 200)
					{
						alpha = 200;
						localAI[0] = -1f;
					}
					if (alpha < 0)
					{
						alpha = 0;
						localAI[0] = 1f;
					}
				}
				if (type == 503)
				{
					rotation = base.velocity.ToRotation() - (float)Math.PI / 2f;
				}
				else
				{
					rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f * (float)direction;
				}
				if (type == 503)
				{
					if (Main.rand.Next(16) == 0)
					{
						Vector2 value3 = Vector2.UnitX.RotatedByRandom(1.5707963705062866).RotatedBy(base.velocity.ToRotation());
						int num76 = Dust.NewDust(base.position, base.width, base.height, 58, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 150, default(Color), 1.2f);
						Main.dust[num76].velocity = value3 * 0.66f;
						Main.dust[num76].position = base.Center + value3 * 12f;
					}
					if (Main.rand.Next(48) == 0)
					{
						int num77 = Gore.NewGore(base.Center, new Vector2(base.velocity.X * 0.2f, base.velocity.Y * 0.2f), 16);
						Gore gore = Main.gore[num77];
						gore.velocity *= 0.66f;
						gore = Main.gore[num77];
						gore.velocity += base.velocity * 0.3f;
					}
				}
				if (type == 12)
				{
					Vector2 value4 = new Vector2(Main.screenWidth, Main.screenHeight);
					if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + value4 / 2f, value4 + new Vector2(400f))) && Main.rand.Next(6) == 0)
					{
						Gore.NewGore(base.position, base.velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17));
					}
					light = 0.9f;
					if (Main.rand.Next(20) == 0)
					{
						Dust.NewDust(base.position, base.width, base.height, 58, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 150, default(Color), 1.2f);
					}
				}
				else if (type == 723 || type == 724 || type == 725 || type == 726)
				{
					if (type == 726 || type == 725 || type == 726)
					{
						Vector2 value5 = new Vector2(Main.screenWidth, Main.screenHeight);
						if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + value5 / 2f, value5 + new Vector2(400f))) && Main.rand.Next(24) == 0)
						{
							Gore.NewGore(base.position, base.velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17));
						}
						if (Main.rand.Next(3) == 0)
						{
							Dust dust2 = Dust.NewDustDirect(base.position, base.width, base.height, 86, 0f, 0f, 127);
							Dust dust = dust2;
							dust.velocity *= 0.5f;
							dust2.noGravity = true;
						}
					}
					if (type == 723)
					{
						Vector2 value6 = new Vector2(Main.screenWidth, Main.screenHeight);
						if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + value6 / 2f, value6 + new Vector2(400f))) && Main.rand.Next(6) == 0)
						{
							Gore.NewGore(base.position, base.velocity * 0.2f, 17);
						}
						for (float num78 = 0f; num78 < 3f; num78 += 1f)
						{
							Vector2 position = base.Center + new Vector2(0f, 12f * scale).RotatedBy(base.position.Y / 200f + num78 * ((float)Math.PI * 2f) + rotation) - base.velocity * 0.5f;
							Dust dust3 = Dust.NewDustPerfect(position, 267, base.velocity * 0.2f * num78, 0, Color.Blue);
							dust3.noLight = true;
							dust3.noGravity = true;
							dust3 = Dust.NewDustPerfect(position, 267, base.velocity * 0.2f * num78, 0, Color.White, 0.4f);
							dust3.noLight = true;
							dust3.noGravity = true;
						}
					}
				}
				else if (this.ai[1] == 1f || type == 92)
				{
					light = 0.9f;
					if (Main.rand.Next(10) == 0)
					{
						Dust.NewDust(base.position, base.width, base.height, 58, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 150, default(Color), 1.2f);
					}
					if (Main.rand.Next(20) == 0)
					{
						Gore.NewGore(base.position, new Vector2(base.velocity.X * 0.2f, base.velocity.Y * 0.2f), Main.rand.Next(16, 18));
					}
				}
			}
			else if (aiStyle == 6)
			{
				base.velocity *= 0.95f;
				this.ai[0] += 1f;
				if (this.ai[0] == 180f)
				{
					Kill();
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					int num79 = 10 + type;
					if (type == 463)
					{
						num79 = 231;
					}
					for (int num80 = 0; num80 < 30; num80++)
					{
						Dust.NewDust(base.position, base.width, base.height, num79, base.velocity.X, base.velocity.Y, 50);
					}
				}
				if (type != 10 && type != 11 && type != 463)
				{
					return;
				}
				int num81 = (int)(base.position.X / 16f) - 1;
				int num82 = (int)((base.position.X + (float)base.width) / 16f) + 2;
				int num83 = (int)(base.position.Y / 16f) - 1;
				int num84 = (int)((base.position.Y + (float)base.height) / 16f) + 2;
				if (num81 < 0)
				{
					num81 = 0;
				}
				if (num82 > Main.maxTilesX)
				{
					num82 = Main.maxTilesX;
				}
				if (num83 < 0)
				{
					num83 = 0;
				}
				if (num84 > Main.maxTilesY)
				{
					num84 = Main.maxTilesY;
				}
				Vector2 vector7 = default(Vector2);
				for (int num85 = num81; num85 < num82; num85++)
				{
					for (int num86 = num83; num86 < num84; num86++)
					{
						vector7.X = num85 * 16;
						vector7.Y = num86 * 16;
						if (!(base.position.X + (float)base.width > vector7.X) || !(base.position.X < vector7.X + 16f) || !(base.position.Y + (float)base.height > vector7.Y) || !(base.position.Y < vector7.Y + 16f) || Main.myPlayer != owner || !Main.tile[num85, num86].active())
						{
							continue;
						}
						if (type == 10)
						{
							if (Main.tile[num85, num86].type == 23 || Main.tile[num85, num86].type == 199)
							{
								Main.tile[num85, num86].type = 2;
								WorldGen.SquareTileFrame(num85, num86);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num85, num86, 1);
								}
							}
							if (Main.tile[num85, num86].type == 25 || Main.tile[num85, num86].type == 203)
							{
								Main.tile[num85, num86].type = 1;
								WorldGen.SquareTileFrame(num85, num86);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num85, num86, 1);
								}
							}
							if (Main.tile[num85, num86].type == 112 || Main.tile[num85, num86].type == 234)
							{
								Main.tile[num85, num86].type = 53;
								WorldGen.SquareTileFrame(num85, num86);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num85, num86, 1);
								}
							}
							if (Main.tile[num85, num86].type == 163 || Main.tile[num85, num86].type == 200)
							{
								Main.tile[num85, num86].type = 161;
								WorldGen.SquareTileFrame(num85, num86);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num85, num86, 1);
								}
							}
							if (Main.tile[num85, num86].type == 400 || Main.tile[num85, num86].type == 401)
							{
								Main.tile[num85, num86].type = 396;
								WorldGen.SquareTileFrame(num85, num86);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num85, num86, 1);
								}
							}
							if (Main.tile[num85, num86].type == 398 || Main.tile[num85, num86].type == 399)
							{
								Main.tile[num85, num86].type = 397;
								WorldGen.SquareTileFrame(num85, num86);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num85, num86, 1);
								}
							}
						}
						if (type == 11 || type == 463)
						{
							if (type == 11)
							{
								WorldGen.Convert(num85, num86, 1, 1);
							}
							if (type == 463)
							{
								WorldGen.Convert(num85, num86, 4, 1);
							}
						}
					}
				}
			}
			else if (aiStyle == 7)
			{
				AI_007_GrapplingHooks();
			}
			else if (aiStyle == 8)
			{
				if (type == 258 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item20, base.position);
				}
				if (type == 96 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item20, base.position);
				}
				if (type == 27)
				{
					for (int num87 = 0; num87 < 5; num87++)
					{
						float num88 = base.velocity.X / 3f * (float)num87;
						float num89 = base.velocity.Y / 3f * (float)num87;
						int num90 = 4;
						int num91 = Dust.NewDust(new Vector2(base.position.X + (float)num90, base.position.Y + (float)num90), base.width - num90 * 2, base.height - num90 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num91].noGravity = true;
						Dust dust = Main.dust[num91];
						dust.velocity *= 0.1f;
						dust = Main.dust[num91];
						dust.velocity += base.velocity * 0.1f;
						Main.dust[num91].position.X -= num88;
						Main.dust[num91].position.Y -= num89;
					}
					if (Main.rand.Next(5) == 0)
					{
						int num92 = 4;
						int num93 = Dust.NewDust(new Vector2(base.position.X + (float)num92, base.position.Y + (float)num92), base.width - num92 * 2, base.height - num92 * 2, 172, 0f, 0f, 100, default(Color), 0.6f);
						Dust dust = Main.dust[num93];
						dust.velocity *= 0.25f;
						dust = Main.dust[num93];
						dust.velocity += base.velocity * 0.5f;
					}
				}
				else if (type == 502)
				{
					float num94 = (float)Main.DiscoR / 255f;
					float num95 = (float)Main.DiscoG / 255f;
					float num96 = (float)Main.DiscoB / 255f;
					num94 = (0.5f + num94) / 2f;
					num95 = (0.5f + num95) / 2f;
					num96 = (0.5f + num96) / 2f;
					Lighting.AddLight(base.Center, num94, num95, num96);
				}
				else if (type == 95 || type == 96)
				{
					int num97 = Dust.NewDust(new Vector2(base.position.X + base.velocity.X, base.position.Y + base.velocity.Y), base.width, base.height, 75, base.velocity.X, base.velocity.Y, 100, default(Color), 3f * scale);
					Main.dust[num97].noGravity = true;
				}
				else if (type == 253)
				{
					for (int num98 = 0; num98 < 2; num98++)
					{
						int num99 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 135, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num99].noGravity = true;
						Main.dust[num99].velocity.X *= 0.3f;
						Main.dust[num99].velocity.Y *= 0.3f;
					}
				}
				else
				{
					for (int num100 = 0; num100 < 2; num100++)
					{
						int num101 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num101].noGravity = true;
						Main.dust[num101].velocity.X *= 0.3f;
						Main.dust[num101].velocity.Y *= 0.3f;
					}
				}
				if (type != 27 && type != 96 && type != 258)
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] >= 20f)
				{
					base.velocity.Y += 0.2f;
				}
				if (type == 502)
				{
					rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
					if (base.velocity.X != 0f)
					{
						spriteDirection = (direction = Math.Sign(base.velocity.X));
					}
				}
				else
				{
					rotation += 0.3f * (float)direction;
				}
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
			}
			else if (aiStyle == 9)
			{
				AI_009_MagicMissiles();
			}
			else if (aiStyle == 10)
			{
				AI_010();
			}
			else if (aiStyle == 11)
			{
				if (type == 72 || type == 86 || type == 87)
				{
					if (base.velocity.X > 0f)
					{
						spriteDirection = -1;
					}
					else if (base.velocity.X < 0f)
					{
						spriteDirection = 1;
					}
					rotation = base.velocity.X * 0.1f;
					frameCounter++;
					if (frameCounter >= 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 4)
					{
						frame = 0;
					}
					if (Main.rand.Next(6) == 0)
					{
						int num102 = 56;
						if (type == 86)
						{
							num102 = 73;
						}
						else if (type == 87)
						{
							num102 = 74;
						}
						int num103 = Dust.NewDust(base.position, base.width, base.height, num102, 0f, 0f, 200, default(Color), 0.8f);
						Dust dust = Main.dust[num103];
						dust.velocity *= 0.3f;
						Main.dust[num103].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
					}
				}
				else
				{
					rotation += 0.02f;
				}
				if (type == 72)
				{
					if (Main.player[owner].blueFairy)
					{
						timeLeft = 2;
					}
				}
				else if (type == 86)
				{
					if (Main.player[owner].redFairy)
					{
						timeLeft = 2;
					}
				}
				else if (type == 87)
				{
					if (Main.player[owner].greenFairy)
					{
						timeLeft = 2;
					}
				}
				else if (Main.player[owner].lightOrb)
				{
					timeLeft = 2;
				}
				if (!Main.player[owner].dead)
				{
					float num104 = 3f;
					if (type == 72 || type == 86 || type == 87)
					{
						num104 = 3.75f;
					}
					Vector2 vector8 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
					float num105 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector8.X;
					float num106 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector8.Y;
					int num107 = 70;
					if (type == 18)
					{
						if (Main.player[owner].controlUp)
						{
							num106 = Main.player[owner].position.Y - 40f - vector8.Y;
							num105 -= 6f;
							num107 = 4;
						}
						else if (Main.player[owner].controlDown)
						{
							num106 = Main.player[owner].position.Y + (float)Main.player[owner].height + 40f - vector8.Y;
							num105 -= 6f;
							num107 = 4;
						}
					}
					float num108 = (float)Math.Sqrt(num105 * num105 + num106 * num106);
					num108 = (float)Math.Sqrt(num105 * num105 + num106 * num106);
					if (type == 72 || type == 86 || type == 87)
					{
						num107 = 40;
					}
					if (num108 > 800f)
					{
						base.position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(base.width / 2);
						base.position.Y = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - (float)(base.height / 2);
					}
					else if (num108 > (float)num107)
					{
						num108 = num104 / num108;
						num105 *= num108;
						num106 *= num108;
						base.velocity.X = num105;
						base.velocity.Y = num106;
					}
					else
					{
						base.velocity.X = 0f;
						base.velocity.Y = 0f;
					}
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 12)
			{
				if (type == 288 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, base.position);
				}
				if (type == 280 || type == 288)
				{
					scale -= 0.002f;
					if (scale <= 0f)
					{
						Kill();
					}
					if (type == 288)
					{
						this.ai[0] = 4f;
					}
					if (this.ai[0] > 3f)
					{
						base.velocity.Y += 0.075f;
						for (int num109 = 0; num109 < 3; num109++)
						{
							float num110 = base.velocity.X / 3f * (float)num109;
							float num111 = base.velocity.Y / 3f * (float)num109;
							int num112 = 14;
							int num113 = Dust.NewDust(new Vector2(base.position.X + (float)num112, base.position.Y + (float)num112), base.width - num112 * 2, base.height - num112 * 2, 170, 0f, 0f, 100);
							Main.dust[num113].noGravity = true;
							Dust dust = Main.dust[num113];
							dust.velocity *= 0.1f;
							dust = Main.dust[num113];
							dust.velocity += base.velocity * 0.5f;
							Main.dust[num113].position.X -= num110;
							Main.dust[num113].position.Y -= num111;
						}
						if (Main.rand.Next(8) == 0)
						{
							int num114 = 16;
							int num115 = Dust.NewDust(new Vector2(base.position.X + (float)num114, base.position.Y + (float)num114), base.width - num114 * 2, base.height - num114 * 2, 170, 0f, 0f, 100, default(Color), 0.5f);
							Dust dust = Main.dust[num115];
							dust.velocity *= 0.25f;
							dust = Main.dust[num115];
							dust.velocity += base.velocity * 0.5f;
						}
					}
					else
					{
						this.ai[0] += 1f;
					}
					return;
				}
				scale -= 0.02f;
				if (scale <= 0f)
				{
					Kill();
				}
				if (this.ai[0] > 3f)
				{
					base.velocity.Y += 0.2f;
					for (int num116 = 0; num116 < 1; num116++)
					{
						for (int num117 = 0; num117 < 3; num117++)
						{
							float num118 = base.velocity.X / 3f * (float)num117;
							float num119 = base.velocity.Y / 3f * (float)num117;
							int num120 = 6;
							int num121 = Dust.NewDust(new Vector2(base.position.X + (float)num120, base.position.Y + (float)num120), base.width - num120 * 2, base.height - num120 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
							Main.dust[num121].noGravity = true;
							Dust dust = Main.dust[num121];
							dust.velocity *= 0.3f;
							dust = Main.dust[num121];
							dust.velocity += base.velocity * 0.5f;
							Main.dust[num121].position.X -= num118;
							Main.dust[num121].position.Y -= num119;
						}
						if (Main.rand.Next(8) == 0)
						{
							int num122 = 6;
							int num123 = Dust.NewDust(new Vector2(base.position.X + (float)num122, base.position.Y + (float)num122), base.width - num122 * 2, base.height - num122 * 2, 172, 0f, 0f, 100, default(Color), 0.75f);
							Dust dust = Main.dust[num123];
							dust.velocity *= 0.5f;
							dust = Main.dust[num123];
							dust.velocity += base.velocity * 0.5f;
						}
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
			}
			else if (aiStyle == 13)
			{
				bool flag3 = Main.player[owner].dead;
				if (!flag3)
				{
					float num124 = (Main.player[owner].Center - base.Center).Length();
					flag3 = num124 > 2000f;
				}
				if (flag3)
				{
					Kill();
					return;
				}
				if (type != 481)
				{
					Main.player[owner].SetDummyItemTime(5);
				}
				if (alpha == 0)
				{
					if (base.position.X + (float)(base.width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
					{
						Main.player[owner].ChangeDir(1);
					}
					else
					{
						Main.player[owner].ChangeDir(-1);
					}
				}
				if (type == 481)
				{
					if (this.ai[0] == 0f)
					{
						extraUpdates = 0;
					}
					else
					{
						extraUpdates = 1;
					}
				}
				Vector2 vector9 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
				float num125 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector9.X;
				float num126 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector9.Y;
				float num127 = (float)Math.Sqrt(num125 * num125 + num126 * num126);
				if (this.ai[0] == 0f)
				{
					if (num127 > 700f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 262 && num127 > 500f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 271 && num127 > 200f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 273 && num127 > 150f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 481 && num127 > 350f)
					{
						this.ai[0] = 1f;
					}
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					this.ai[1] += 1f;
					if (this.ai[1] > 5f)
					{
						alpha = 0;
					}
					if (type == 262 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 271 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 273 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 481 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 404 && this.ai[1] > 8f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] >= 10f)
					{
						this.ai[1] = 15f;
						base.velocity.Y += 0.3f;
					}
					if (type == 262 && base.velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					else if (type == 262)
					{
						spriteDirection = 1;
					}
					if (type == 271 && base.velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					else if (type == 271)
					{
						spriteDirection = 1;
					}
				}
				else if (this.ai[0] == 1f)
				{
					tileCollide = false;
					rotation = (float)Math.Atan2(num126, num125) - 1.57f;
					float num128 = 20f;
					if (type == 262)
					{
						num128 = 30f;
					}
					if (num127 < 50f)
					{
						Kill();
					}
					num127 = num128 / num127;
					num125 *= num127;
					num126 *= num127;
					base.velocity.X = num125;
					base.velocity.Y = num126;
					if (type == 262 && base.velocity.X < 0f)
					{
						spriteDirection = 1;
					}
					else if (type == 262)
					{
						spriteDirection = -1;
					}
					if (type == 271 && base.velocity.X < 0f)
					{
						spriteDirection = 1;
					}
					else if (type == 271)
					{
						spriteDirection = -1;
					}
				}
			}
			else if (aiStyle == 14)
			{
				if (type == 870 && this.ai[1] > 0f)
				{
					aiStyle = 170;
				}
				if (type == 473 && Main.netMode != 2)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 10f)
					{
						localAI[0] = 0f;
						int num129 = 30;
						if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num129 * 16))
						{
							Main.instance.SpelunkerProjectileHelper.AddSpotToCheck(base.Center);
						}
					}
				}
				if (type == 352)
				{
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
					}
					alpha += (int)(25f * localAI[1]);
					if (alpha <= 0)
					{
						alpha = 0;
						localAI[1] = 1f;
					}
					else if (alpha >= 255)
					{
						alpha = 255;
						localAI[1] = -1f;
					}
					scale += localAI[1] * 0.01f;
				}
				if (type == 346)
				{
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
						SoundEngine.PlaySound(SoundID.Item1, base.position);
					}
					frame = (int)this.ai[1];
					if (frame == 0)
					{
						Lighting.AddLight(base.Center, 0.25f, 0.2f, 0f);
					}
					else
					{
						Lighting.AddLight(base.Center, 0.15f, 0.15f, 0.15f);
					}
					if (owner == Main.myPlayer && timeLeft == 1)
					{
						for (int num130 = 0; num130 < 5; num130++)
						{
							float num131 = 10f;
							Vector2 vector10 = new Vector2(base.Center.X, base.Center.Y);
							float num132 = Main.rand.Next(-20, 21);
							float num133 = Main.rand.Next(-20, 0);
							float num134 = (float)Math.Sqrt(num132 * num132 + num133 * num133);
							num134 = num131 / num134;
							num132 *= num134;
							num133 *= num134;
							num132 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num133 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							int num135 = NewProjectile(vector10.X, vector10.Y, num132, num133, 347, 40, 0f, Main.myPlayer, 0f, this.ai[1]);
						}
					}
				}
				if (type == 196)
				{
					int num136 = Main.rand.Next(1, 3);
					for (int num137 = 0; num137 < num136; num137++)
					{
						int num138 = Dust.NewDust(base.position, base.width, base.height, 31, 0f, 0f, 100);
						Dust dust = Main.dust[num138];
						dust.alpha += Main.rand.Next(100);
						dust = Main.dust[num138];
						dust.velocity *= 0.3f;
						Main.dust[num138].velocity.X += (float)Main.rand.Next(-10, 11) * 0.025f;
						Main.dust[num138].velocity.Y -= 0.4f + (float)Main.rand.Next(-3, 14) * 0.15f;
						Main.dust[num138].fadeIn = 1.25f + (float)Main.rand.Next(20) * 0.15f;
					}
				}
				if (type == 53)
				{
					try
					{
						int num139 = (int)(base.position.X / 16f) - 1;
						int num140 = (int)((base.position.X + (float)base.width) / 16f) + 2;
						int num141 = (int)(base.position.Y / 16f) - 1;
						int num142 = (int)((base.position.Y + (float)base.height) / 16f) + 2;
						if (num139 < 0)
						{
							num139 = 0;
						}
						if (num140 > Main.maxTilesX)
						{
							num140 = Main.maxTilesX;
						}
						if (num141 < 0)
						{
							num141 = 0;
						}
						if (num142 > Main.maxTilesY)
						{
							num142 = Main.maxTilesY;
						}
						Vector2 vector11 = default(Vector2);
						for (int num143 = num139; num143 < num140; num143++)
						{
							for (int num144 = num141; num144 < num142; num144++)
							{
								if (Main.tile[num143, num144] != null && Main.tile[num143, num144].nactive() && Main.tileSolid[Main.tile[num143, num144].type] && !Main.tileSolidTop[Main.tile[num143, num144].type])
								{
									vector11.X = num143 * 16;
									vector11.Y = num144 * 16;
									if (base.position.X + (float)base.width > vector11.X && base.position.X < vector11.X + 16f && base.position.Y + (float)base.height > vector11.Y && base.position.Y < vector11.Y + 16f)
									{
										base.velocity.X = 0f;
										base.velocity.Y = -0.2f;
									}
								}
							}
						}
					}
					catch
					{
					}
				}
				if (type == 277)
				{
					if (alpha > 0)
					{
						alpha -= 30;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (Main.expertMode)
					{
						float num145 = 12f;
						int num146 = Player.FindClosest(base.Center, 1, 1);
						Vector2 vector12 = Main.player[num146].Center - base.Center;
						vector12.Normalize();
						vector12 *= num145;
						int num147 = 200;
						base.velocity.X = (base.velocity.X * (float)(num147 - 1) + vector12.X) / (float)num147;
						if (base.velocity.Length() > 16f)
						{
							base.velocity.Normalize();
							base.velocity *= 16f;
						}
					}
				}
				if (type == 261)
				{
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
						localAI[0] = 80f;
					}
					rotation += base.velocity.X * 0.05f;
					if (base.velocity.Y != 0f)
					{
						rotation += (float)spriteDirection * 0.01f;
					}
					this.ai[0]++;
					if (this.ai[0] > 15f)
					{
						if (base.velocity.Y == 0f && base.velocity.X != 0f)
						{
							base.velocity.X *= 0.97f;
							Math.Abs(base.velocity.X);
							_ = 2f;
							if (Math.Abs(base.velocity.X) <= 0.01f)
							{
								Kill();
							}
						}
						this.ai[0] = 15f;
						base.velocity.Y += 0.2f;
					}
					if (localAI[0] > 0f)
					{
						localAI[0]--;
						int num148 = 5;
						int maxValue = num148;
						if (localAI[0] < 20f)
						{
							maxValue = num148 + num148;
						}
						if (localAI[0] < 10f)
						{
							maxValue = num148 + num148 + num148;
						}
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust4 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(base.width / 2, base.height / 2), 31);
							Dust dust = dust4;
							dust.velocity *= 0.33f;
							dust4.scale = 0.7f;
						}
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust5 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(base.width / 2, base.height / 2), 228, Main.rand.NextVector2Circular(3f, 3f));
							dust5.scale = 0.6f;
							Dust dust = dust5;
							dust.velocity *= 0.33f;
						}
					}
				}
				else if (type == 277)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 15f)
					{
						this.ai[0] = 15f;
						if (base.velocity.Y == 0f && base.velocity.X != 0f)
						{
							base.velocity.X *= 0.97f;
							if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
							{
								Kill();
							}
						}
						base.velocity.Y += 0.2f;
					}
					rotation += base.velocity.X * 0.05f;
				}
				else if (type == 378)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item17, base.position);
						localAI[0] += 1f;
					}
					Rectangle rectangle2 = new Rectangle((int)base.position.X, (int)base.position.Y, base.width, base.height);
					for (int num149 = 0; num149 < 200; num149++)
					{
						if (Main.npc[num149].CanBeChasedBy(this, ignoreDontTakeDamage: true))
						{
							Rectangle value7 = new Rectangle((int)Main.npc[num149].position.X, (int)Main.npc[num149].position.Y, Main.npc[num149].width, Main.npc[num149].height);
							if (rectangle2.Intersects(value7))
							{
								Kill();
								return;
							}
						}
					}
					this.ai[0] += 1f;
					if (this.ai[0] > 10f)
					{
						this.ai[0] = 90f;
						if (base.velocity.Y == 0f && base.velocity.X != 0f)
						{
							base.velocity.X *= 0.96f;
							if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
							{
								Kill();
							}
						}
						base.velocity.Y += 0.2f;
					}
					rotation += base.velocity.X * 0.1f;
				}
				else if (type == 483)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 5f)
					{
						if (owner == Main.myPlayer && this.ai[0] > (float)Main.rand.Next(20, 130))
						{
							Kill();
						}
						if (base.velocity.Y == 0f && base.velocity.X != 0f)
						{
							base.velocity.X *= 0.97f;
							if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
							{
								base.velocity.X = 0f;
								netUpdate = true;
							}
						}
						base.velocity.Y += 0.3f;
						base.velocity.X *= 0.99f;
					}
					rotation += base.velocity.X * 0.05f;
				}
				else if (type == 538)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 60f || base.velocity.Y >= 0f)
					{
						alpha += 6;
						base.velocity *= 0.5f;
					}
					else if (this.ai[0] > 5f)
					{
						base.velocity.Y += 0.1f;
						base.velocity.X *= 1.025f;
						alpha -= 23;
						scale = 0.8f * (255f - (float)alpha) / 255f;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (alpha >= 255 && this.ai[0] > 5f)
					{
						Kill();
						return;
					}
				}
				else
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 5f)
					{
						this.ai[0] = 5f;
						if (base.velocity.Y == 0f && base.velocity.X != 0f)
						{
							base.velocity.X *= 0.97f;
							if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
							{
								base.velocity.X = 0f;
								netUpdate = true;
							}
						}
						base.velocity.Y += 0.2f;
					}
					rotation += base.velocity.X * 0.1f;
				}
				if (type == 538)
				{
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
						SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 7);
					}
					if (base.velocity.Y < 0f && this.ai[0] < 60f)
					{
						if (Main.rand.Next(4) == 0)
						{
							int num150 = Dust.NewDust(base.position, base.width, base.height, 180, 0f, 0f, 100);
							Main.dust[num150].position = base.Center;
							Dust dust = Main.dust[num150];
							dust.scale += (float)Main.rand.Next(50) * 0.01f;
							Main.dust[num150].noGravity = true;
							Main.dust[num150].velocity.Y -= 2f;
						}
						if (Main.rand.Next(6) == 0)
						{
							int num151 = Dust.NewDust(base.position, base.width, base.height, 176, 0f, 0f, 100);
							Main.dust[num151].position = base.Center;
							Dust dust = Main.dust[num151];
							dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
							Main.dust[num151].noGravity = true;
							dust = Main.dust[num151];
							dust.velocity *= 0.1f;
						}
					}
				}
				if (type == 450)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item13, base.position);
					}
					if (Main.rand.Next(2) == 0)
					{
						int num152 = Dust.NewDust(base.position, base.width, base.height, 228, 0f, 0f, 100);
						Main.dust[num152].position.X -= 2f;
						Main.dust[num152].position.Y += 2f;
						Dust dust = Main.dust[num152];
						dust.scale += (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num152].noGravity = true;
						Main.dust[num152].velocity.Y -= 2f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num153 = Dust.NewDust(base.position, base.width, base.height, 228, 0f, 0f, 100);
						Main.dust[num153].position.X -= 2f;
						Main.dust[num153].position.Y += 2f;
						Dust dust = Main.dust[num153];
						dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num153].noGravity = true;
						dust = Main.dust[num153];
						dust.velocity *= 0.1f;
					}
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						if (++frame >= 5)
						{
							frame = 0;
						}
					}
					if ((double)base.velocity.Y < 0.25 && (double)base.velocity.Y > 0.15)
					{
						base.velocity.X *= 0.8f;
					}
					rotation = (0f - base.velocity.X) * 0.05f;
				}
				if (type == 480)
				{
					alpha = 255;
					int num154 = Dust.NewDust(base.position, base.width, base.height, 75, 0f, 0f, 100);
					Main.dust[num154].position.X -= 2f;
					Main.dust[num154].position.Y += 2f;
					Dust dust = Main.dust[num154];
					dust.scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num154].noGravity = true;
					Main.dust[num154].velocity.Y -= 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num155 = Dust.NewDust(base.position, base.width, base.height, 75, 0f, 0f, 100);
						Main.dust[num155].position.X -= 2f;
						Main.dust[num155].position.Y += 2f;
						dust = Main.dust[num155];
						dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num155].noGravity = true;
						dust = Main.dust[num155];
						dust.velocity *= 0.1f;
					}
				}
				if (type >= 326 && type <= 328)
				{
					if (wet)
					{
						Kill();
					}
					if (this.ai[1] == 0f && type >= 326 && type <= 328)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item13, base.position);
					}
					if (Main.rand.Next(3) != 0)
					{
						Dust dust6 = Dust.NewDustDirect(base.position, base.width, base.height, 6);
						dust6.velocity.Y -= 2f;
						dust6.noGravity = true;
						Dust dust = dust6;
						dust.scale += Main.rand.NextFloat() * 0.8f + 0.3f;
						dust = dust6;
						dust.velocity += base.velocity * 1f;
					}
					if ((double)base.velocity.Y < 0.25 && (double)base.velocity.Y > 0.15)
					{
						base.velocity.X *= 0.8f;
					}
					rotation = (0f - base.velocity.X) * 0.05f;
				}
				if (type >= 400 && type <= 402)
				{
					if (wet)
					{
						Kill();
					}
					if (this.ai[1] == 0f && type >= 326 && type <= 328)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item13, base.position);
					}
					int num156 = Dust.NewDust(base.position, base.width, base.height, 6, 0f, 0f, 100);
					Main.dust[num156].position.X -= 2f;
					Main.dust[num156].position.Y += 2f;
					Dust dust = Main.dust[num156];
					dust.scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num156].noGravity = true;
					Main.dust[num156].velocity.Y -= 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num157 = Dust.NewDust(base.position, base.width, base.height, 6, 0f, 0f, 100);
						Main.dust[num157].position.X -= 2f;
						Main.dust[num157].position.Y += 2f;
						dust = Main.dust[num157];
						dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num157].noGravity = true;
						dust = Main.dust[num157];
						dust.velocity *= 0.1f;
					}
					if ((double)base.velocity.Y < 0.25 && (double)base.velocity.Y > 0.15)
					{
						base.velocity.X *= 0.8f;
					}
					rotation = (0f - base.velocity.X) * 0.05f;
				}
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
			}
			else if (aiStyle == 15)
			{
				AI_015_Flails();
			}
			else if (aiStyle == 16)
			{
				AI_016();
			}
			else if (aiStyle == 17)
			{
				if (base.velocity.Y == 0f)
				{
					base.velocity.X *= 0.98f;
				}
				rotation += base.velocity.X * 0.1f;
				base.velocity.Y += 0.2f;
				if (owner != Main.myPlayer)
				{
					return;
				}
				int num158 = (int)((base.position.X + (float)(base.width / 2)) / 16f);
				int num159 = (int)((base.position.Y + (float)base.height - 4f) / 16f);
				if (Main.tile[num158, num159] == null)
				{
					return;
				}
				int style = 0;
				if (type >= 201 && type <= 205)
				{
					style = type - 200;
				}
				if (type >= 527 && type <= 531)
				{
					style = type - 527 + 6;
				}
				bool flag4 = false;
				TileObject objectData = default(TileObject);
				if (TileObject.CanPlace(num158, num159, 85, style, direction, out objectData))
				{
					flag4 = TileObject.Place(objectData);
				}
				if (flag4)
				{
					NetMessage.SendObjectPlacment(-1, num158, num159, objectData.type, objectData.style, objectData.alternate, objectData.random, direction);
					SoundEngine.PlaySound(0, num158 * 16, num159 * 16);
					int num160 = Sign.ReadSign(num158, num159);
					if (num160 >= 0)
					{
						Sign.TextSign(num160, miscText);
						NetMessage.SendData(47, -1, -1, null, num160, 0f, (int)(byte)new BitsByte(b1: true));
					}
					Kill();
				}
			}
			else if (aiStyle == 18)
			{
				if (this.ai[1] == 0f && type == 44)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, base.position);
				}
				if (type == 263 || type == 274)
				{
					if (type == 274 && base.velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					rotation += (float)direction * 0.05f;
					rotation += (float)direction * 0.5f * ((float)timeLeft / 180f);
					if (type == 274)
					{
						base.velocity *= 0.96f;
					}
					else
					{
						base.velocity *= 0.95f;
					}
					return;
				}
				rotation += (float)direction * 0.8f;
				this.ai[0] += 1f;
				if (!(this.ai[0] < 30f))
				{
					if (this.ai[0] < 100f)
					{
						base.velocity *= 1.06f;
					}
					else
					{
						this.ai[0] = 200f;
					}
				}
				for (int num161 = 0; num161 < 2; num161++)
				{
					int num162 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, 0f, 0f, 100);
					Main.dust[num162].noGravity = true;
				}
			}
			else if (aiStyle == 19)
			{
				AI_019_Spears();
			}
			else if (aiStyle == 20)
			{
				timeLeft = 60;
				if (type == 252)
				{
					frameCounter++;
					if (frameCounter >= 4)
					{
						frameCounter = 0;
						frame++;
					}
					if (frame > 3)
					{
						frame = 0;
					}
				}
				if (type == 509)
				{
					frameCounter++;
					if (frameCounter >= 2)
					{
						frameCounter = 0;
						frame++;
					}
					if (frame > 1)
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item22, base.position);
					soundDelay = 30;
				}
				Vector2 vector13 = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter);
				if (Main.myPlayer == owner)
				{
					if (Main.player[owner].channel)
					{
						float num163 = Main.player[owner].inventory[Main.player[owner].selectedItem].shootSpeed * scale;
						Vector2 vector14 = vector13;
						float num164 = (float)Main.mouseX + Main.screenPosition.X - vector14.X;
						float num165 = (float)Main.mouseY + Main.screenPosition.Y - vector14.Y;
						if (Main.player[owner].gravDir == -1f)
						{
							num165 = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector14.Y;
						}
						float num166 = (float)Math.Sqrt(num164 * num164 + num165 * num165);
						num166 = (float)Math.Sqrt(num164 * num164 + num165 * num165);
						num166 = num163 / num166;
						num164 *= num166;
						num165 *= num166;
						if (num164 != base.velocity.X || num165 != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity.X = num164;
						base.velocity.Y = num165;
					}
					else
					{
						Kill();
					}
				}
				if (base.velocity.X > 0f)
				{
					Main.player[owner].ChangeDir(1);
				}
				else if (base.velocity.X < 0f)
				{
					Main.player[owner].ChangeDir(-1);
				}
				spriteDirection = direction;
				Main.player[owner].ChangeDir(direction);
				Main.player[owner].heldProj = whoAmI;
				Main.player[owner].SetDummyItemTime(2);
				base.position.X = vector13.X - (float)(base.width / 2);
				base.position.Y = vector13.Y - (float)(base.height / 2);
				rotation = (float)(Math.Atan2(base.velocity.Y, base.velocity.X) + 1.5700000524520874);
				if (Main.player[owner].direction == 1)
				{
					Main.player[owner].itemRotation = (float)Math.Atan2(base.velocity.Y * (float)direction, base.velocity.X * (float)direction);
				}
				else
				{
					Main.player[owner].itemRotation = (float)Math.Atan2(base.velocity.Y * (float)direction, base.velocity.X * (float)direction);
				}
				base.velocity.X *= 1f + (float)Main.rand.Next(-3, 4) * 0.01f;
				if (Main.rand.Next(6) == 0)
				{
					int num167 = Dust.NewDust(base.position + base.velocity * Main.rand.Next(6, 10) * 0.1f, base.width, base.height, 31, 0f, 0f, 80, default(Color), 1.4f);
					Main.dust[num167].position.X -= 4f;
					Main.dust[num167].noGravity = true;
					Dust dust = Main.dust[num167];
					dust.velocity *= 0.2f;
					Main.dust[num167].velocity.Y = (float)(-Main.rand.Next(7, 13)) * 0.15f;
				}
			}
			else if (aiStyle == 21)
			{
				rotation = base.velocity.X * 0.1f;
				spriteDirection = -direction;
				if (Main.rand.Next(3) == 0)
				{
					int num168 = Dust.NewDust(base.position, base.width, base.height, 27, 0f, 0f, 80);
					Main.dust[num168].noGravity = true;
					Dust dust = Main.dust[num168];
					dust.velocity *= 0.2f;
				}
				if (this.ai[1] == 1f)
				{
					this.ai[1] = 0f;
					Main.musicPitch = this.ai[0];
					SoundEngine.PlaySound(SoundID.Item26, base.position);
				}
			}
			else if (aiStyle == 22)
			{
				if (base.velocity.X == 0f && base.velocity.Y == 0f)
				{
					alpha = 255;
				}
				Dust dust;
				if (this.ai[1] < 0f)
				{
					if (timeLeft > 60)
					{
						timeLeft = 60;
					}
					if (base.velocity.X > 0f)
					{
						rotation += 0.3f;
					}
					else
					{
						rotation -= 0.3f;
					}
					int num169 = (int)(base.position.X / 16f) - 1;
					int num170 = (int)((base.position.X + (float)base.width) / 16f) + 2;
					int num171 = (int)(base.position.Y / 16f) - 1;
					int num172 = (int)((base.position.Y + (float)base.height) / 16f) + 2;
					if (num169 < 0)
					{
						num169 = 0;
					}
					if (num170 > Main.maxTilesX)
					{
						num170 = Main.maxTilesX;
					}
					if (num171 < 0)
					{
						num171 = 0;
					}
					if (num172 > Main.maxTilesY)
					{
						num172 = Main.maxTilesY;
					}
					int num173 = (int)base.position.X + 4;
					int num174 = (int)base.position.Y + 4;
					Vector2 vector15 = default(Vector2);
					for (int num175 = num169; num175 < num170; num175++)
					{
						for (int num176 = num171; num176 < num172; num176++)
						{
							if (Main.tile[num175, num176] != null && Main.tile[num175, num176].active() && Main.tile[num175, num176].type != 127 && Main.tileSolid[Main.tile[num175, num176].type] && !Main.tileSolidTop[Main.tile[num175, num176].type])
							{
								vector15.X = num175 * 16;
								vector15.Y = num176 * 16;
								if ((float)(num173 + 8) > vector15.X && (float)num173 < vector15.X + 16f && (float)(num174 + 8) > vector15.Y && (float)num174 < vector15.Y + 16f)
								{
									Kill();
								}
							}
						}
					}
					int num177 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 67);
					Main.dust[num177].noGravity = true;
					dust = Main.dust[num177];
					dust.velocity *= 0.3f;
					return;
				}
				if (this.ai[0] < 0f)
				{
					if (this.ai[0] == -1f)
					{
						for (int num178 = 0; num178 < 10; num178++)
						{
							int num179 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 67, 0f, 0f, 0, default(Color), 1.1f);
							Main.dust[num179].noGravity = true;
							dust = Main.dust[num179];
							dust.velocity *= 1.3f;
						}
					}
					else if (Main.rand.Next(30) == 0)
					{
						int num180 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 67, 0f, 0f, 100);
						dust = Main.dust[num180];
						dust.velocity *= 0.2f;
					}
					int num181 = (int)base.position.X / 16;
					int num182 = (int)base.position.Y / 16;
					if (Main.tile[num181, num182] == null || !Main.tile[num181, num182].active())
					{
						Kill();
					}
					this.ai[0] -= 1f;
					if (this.ai[0] <= -900f && (Main.myPlayer == owner || Main.netMode == 2) && Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 127)
					{
						WorldGen.KillTile(num181, num182);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 0, num181, num182);
						}
						Kill();
					}
					return;
				}
				int num183 = (int)(base.position.X / 16f) - 1;
				int num184 = (int)((base.position.X + (float)base.width) / 16f) + 2;
				int num185 = (int)(base.position.Y / 16f) - 1;
				int num186 = (int)((base.position.Y + (float)base.height) / 16f) + 2;
				if (num183 < 0)
				{
					num183 = 0;
				}
				if (num184 > Main.maxTilesX)
				{
					num184 = Main.maxTilesX;
				}
				if (num185 < 0)
				{
					num185 = 0;
				}
				if (num186 > Main.maxTilesY)
				{
					num186 = Main.maxTilesY;
				}
				int num187 = (int)base.position.X + 4;
				int num188 = (int)base.position.Y + 4;
				Vector2 vector16 = default(Vector2);
				for (int num189 = num183; num189 < num184; num189++)
				{
					for (int num190 = num185; num190 < num186; num190++)
					{
						if (Main.tile[num189, num190] != null && Main.tile[num189, num190].nactive() && Main.tile[num189, num190].type != 127 && Main.tileSolid[Main.tile[num189, num190].type] && !Main.tileSolidTop[Main.tile[num189, num190].type])
						{
							vector16.X = num189 * 16;
							vector16.Y = num190 * 16;
							if ((float)(num187 + 8) > vector16.X && (float)num187 < vector16.X + 16f && (float)(num188 + 8) > vector16.Y && (float)num188 < vector16.Y + 16f)
							{
								Kill();
							}
						}
					}
				}
				if (lavaWet)
				{
					Kill();
				}
				if (!active)
				{
					return;
				}
				int num191 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 67);
				Main.dust[num191].noGravity = true;
				dust = Main.dust[num191];
				dust.velocity *= 0.3f;
				int num192 = (int)this.ai[0];
				int num193 = (int)this.ai[1];
				if (WorldGen.InWorld(num192, num193) && WorldGen.SolidTile(num192, num193))
				{
					if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
					{
						if (base.Center.Y < (float)(num193 * 16 + 8) && WorldGen.InWorld(num192, num193 - 1) && !WorldGen.SolidTile(num192, num193 - 1))
						{
							num193--;
						}
						else if (WorldGen.InWorld(num192, num193 + 1) && !WorldGen.SolidTile(num192, num193 + 1))
						{
							num193++;
						}
						else if (WorldGen.InWorld(num192, num193 - 1) && !WorldGen.SolidTile(num192, num193 - 1))
						{
							num193--;
						}
						else if (base.Center.X < (float)(num192 * 16 + 8) && WorldGen.InWorld(num192 - 1, num193) && !WorldGen.SolidTile(num192 - 1, num193))
						{
							num192--;
						}
						else if (WorldGen.InWorld(num192 + 1, num193) && !WorldGen.SolidTile(num192 + 1, num193))
						{
							num192++;
						}
						else if (WorldGen.InWorld(num192 - 1, num193) && !WorldGen.SolidTile(num192 - 1, num193))
						{
							num192--;
						}
					}
					else if (base.Center.X < (float)(num192 * 16 + 8) && WorldGen.InWorld(num192 - 1, num193) && !WorldGen.SolidTile(num192 - 1, num193))
					{
						num192--;
					}
					else if (WorldGen.InWorld(num192 + 1, num193) && !WorldGen.SolidTile(num192 + 1, num193))
					{
						num192++;
					}
					else if (WorldGen.InWorld(num192 - 1, num193) && !WorldGen.SolidTile(num192 - 1, num193))
					{
						num192--;
					}
					else if (base.Center.Y < (float)(num193 * 16 + 8) && WorldGen.InWorld(num192, num193 - 1) && !WorldGen.SolidTile(num192, num193 - 1))
					{
						num193--;
					}
					else if (WorldGen.InWorld(num192, num193 + 1) && !WorldGen.SolidTile(num192, num193 + 1))
					{
						num193++;
					}
					else if (WorldGen.InWorld(num192, num193 - 1) && !WorldGen.SolidTile(num192, num193 - 1))
					{
						num193--;
					}
				}
				if (base.velocity.X > 0f)
				{
					rotation += 0.3f;
				}
				else
				{
					rotation -= 0.3f;
				}
				if (Main.myPlayer != owner)
				{
					return;
				}
				int num194 = (int)((base.position.X + (float)(base.width / 2)) / 16f);
				int num195 = (int)((base.position.Y + (float)(base.height / 2)) / 16f);
				bool flag5 = false;
				if (num194 == num192 && num195 == num193)
				{
					flag5 = true;
				}
				if (((base.velocity.X <= 0f && num194 <= num192) || (base.velocity.X >= 0f && num194 >= num192)) && ((base.velocity.Y <= 0f && num195 <= num193) || (base.velocity.Y >= 0f && num195 >= num193)))
				{
					flag5 = true;
				}
				if (!flag5)
				{
					return;
				}
				if (WorldGen.PlaceTile(num192, num193, 127, mute: false, forced: false, owner))
				{
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 1, (int)this.ai[0], (int)this.ai[1], 127f);
					}
					damage = 0;
					this.ai[0] = -1f;
					base.velocity *= 0f;
					alpha = 255;
					base.position.X = num192 * 16;
					base.position.Y = num193 * 16;
					netUpdate = true;
				}
				else
				{
					this.ai[1] = -1f;
				}
			}
			else if (aiStyle == 23)
			{
				if (type == 188)
				{
					if (this.ai[0] < 8f)
					{
						this.ai[0] = 8f;
					}
					localAI[0]++;
				}
				if (timeLeft > 60)
				{
					timeLeft = 60;
				}
				if (this.ai[0] > 7f)
				{
					float num196 = 1f;
					if (this.ai[0] == 8f)
					{
						num196 = 0.25f;
					}
					else if (this.ai[0] == 9f)
					{
						num196 = 0.5f;
					}
					else if (this.ai[0] == 10f)
					{
						num196 = 0.75f;
					}
					this.ai[0] += 1f;
					int num197 = 6;
					if (type == 101)
					{
						num197 = 75;
					}
					if (num197 == 6 || Main.rand.Next(2) == 0)
					{
						for (int num198 = 0; num198 < 1; num198++)
						{
							int num199 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num197, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100);
							Dust dust;
							if (Main.rand.Next(3) != 0 || (num197 == 75 && Main.rand.Next(3) == 0))
							{
								Main.dust[num199].noGravity = true;
								dust = Main.dust[num199];
								dust.scale *= 3f;
								Main.dust[num199].velocity.X *= 2f;
								Main.dust[num199].velocity.Y *= 2f;
							}
							if (type == 188)
							{
								dust = Main.dust[num199];
								dust.scale *= 1.25f;
							}
							else
							{
								dust = Main.dust[num199];
								dust.scale *= 1.5f;
							}
							Main.dust[num199].velocity.X *= 1.2f;
							Main.dust[num199].velocity.Y *= 1.2f;
							dust = Main.dust[num199];
							dust.scale *= num196;
							if (num197 == 75)
							{
								dust = Main.dust[num199];
								dust.velocity += base.velocity;
								if (!Main.dust[num199].noGravity)
								{
									dust = Main.dust[num199];
									dust.velocity *= 0.5f;
								}
							}
						}
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
				rotation += 0.3f * (float)direction;
			}
			else if (aiStyle == 24)
			{
				light = scale * 0.5f;
				rotation += base.velocity.X * 0.2f;
				this.ai[1] += 1f;
				if (type == 94)
				{
					if (Main.rand.Next(4) == 0)
					{
						int num200 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 70);
						Main.dust[num200].noGravity = true;
						Dust dust = Main.dust[num200];
						dust.velocity *= 0.5f;
						dust = Main.dust[num200];
						dust.scale *= 0.9f;
					}
					base.velocity *= 0.985f;
					if (this.ai[1] > 130f)
					{
						scale -= 0.05f;
						if ((double)scale <= 0.2)
						{
							scale = 0.2f;
							Kill();
						}
					}
					return;
				}
				base.velocity *= 0.96f;
				if (this.ai[1] > 15f)
				{
					scale -= 0.05f;
					if ((double)scale <= 0.2)
					{
						scale = 0.2f;
						Kill();
					}
				}
			}
			else if (aiStyle == 25)
			{
				if (this.ai[0] != 0f && base.velocity.Y <= 0f && base.velocity.X == 0f)
				{
					float num201 = 0.5f;
					int i2 = (int)((base.position.X - 8f) / 16f);
					int num202 = (int)(base.position.Y / 16f);
					bool flag6 = false;
					bool flag7 = false;
					if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
					{
						flag6 = true;
					}
					i2 = (int)((base.position.X + (float)base.width + 8f) / 16f);
					if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
					{
						flag7 = true;
					}
					if (flag6)
					{
						base.velocity.X = num201;
					}
					else if (flag7)
					{
						base.velocity.X = 0f - num201;
					}
					else
					{
						i2 = (int)((base.position.X - 8f - 16f) / 16f);
						num202 = (int)(base.position.Y / 16f);
						flag6 = false;
						flag7 = false;
						if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
						{
							flag6 = true;
						}
						i2 = (int)((base.position.X + (float)base.width + 8f + 16f) / 16f);
						if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
						{
							flag7 = true;
						}
						if (flag6)
						{
							base.velocity.X = num201;
						}
						else if (flag7)
						{
							base.velocity.X = 0f - num201;
						}
						else
						{
							i2 = (int)((base.position.X - 8f - 32f) / 16f);
							num202 = (int)(base.position.Y / 16f);
							flag6 = false;
							flag7 = false;
							if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
							{
								flag6 = true;
							}
							i2 = (int)((base.position.X + (float)base.width + 8f + 32f) / 16f);
							if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
							{
								flag7 = true;
							}
							if (!flag6 && !flag7)
							{
								if ((int)(base.Center.X / 16f) % 2 == 0)
								{
									flag6 = true;
								}
								else
								{
									flag7 = true;
								}
							}
							if (flag6)
							{
								base.velocity.X = num201;
							}
							else if (flag7)
							{
								base.velocity.X = 0f - num201;
							}
						}
					}
				}
				rotation += base.velocity.X * 0.06f;
				this.ai[0] = 1f;
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
				if (base.velocity.Y <= 6f)
				{
					if (base.velocity.X > 0f && base.velocity.X < 7f)
					{
						base.velocity.X += 0.05f;
					}
					if (base.velocity.X < 0f && base.velocity.X > -7f)
					{
						base.velocity.X -= 0.05f;
					}
				}
				base.velocity.Y += 0.3f;
				if (type == 655 && wet)
				{
					Kill();
				}
			}
			else if (aiStyle == 26)
			{
				AI_026();
			}
			else if (aiStyle == 27)
			{
				if (type == 115)
				{
					this.ai[0] += 1f;
					if (this.ai[0] < 30f)
					{
						base.velocity *= 1.125f;
					}
				}
				if (type == 115 && localAI[1] < 5f)
				{
					localAI[1] = 5f;
					for (int num203 = 5; num203 < 25; num203++)
					{
						float num204 = base.velocity.X * (30f / (float)num203);
						float num205 = base.velocity.Y * (30f / (float)num203);
						num204 *= 80f;
						num205 *= 80f;
						int num206 = Dust.NewDust(new Vector2(base.position.X - num204, base.position.Y - num205), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.9f);
						Dust dust = Main.dust[num206];
						dust.velocity *= 0.25f;
						dust = Main.dust[num206];
						dust.velocity -= base.velocity * 5f;
					}
				}
				if (localAI[1] > 7f && type == 173)
				{
					int num207 = Main.rand.Next(3);
					int num208 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X * 4f + 2f, base.position.Y + 2f - base.velocity.Y * 4f), 8, 8, num207 switch
					{
						0 => 15, 
						1 => 57, 
						_ => 58, 
					}, 0f, 0f, 100, default(Color), 1.25f);
					Dust dust = Main.dust[num208];
					dust.velocity *= 0.1f;
				}
				if (localAI[1] > 7f && type == 132)
				{
					int num209 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X * 4f + 2f, base.position.Y + 2f - base.velocity.Y * 4f), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.25f);
					Dust dust = Main.dust[num209];
					dust.velocity *= -0.25f;
					num209 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X * 4f + 2f, base.position.Y + 2f - base.velocity.Y * 4f), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.25f);
					dust = Main.dust[num209];
					dust.velocity *= -0.25f;
					dust = Main.dust[num209];
					dust.position -= base.velocity * 0.5f;
				}
				if (localAI[1] < 15f)
				{
					localAI[1] += 1f;
				}
				else
				{
					if (type == 114 || type == 115)
					{
						int num210 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 4f), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.6f);
						Dust dust = Main.dust[num210];
						dust.velocity *= -0.25f;
					}
					else if (type == 116)
					{
						int num211 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X * 5f + 2f, base.position.Y + 2f - base.velocity.Y * 5f), 8, 8, 64, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num211];
						dust.velocity *= -0.25f;
						Main.dust[num211].noGravity = true;
					}
					if (localAI[0] == 0f)
					{
						scale -= 0.02f;
						alpha += 30;
						if (alpha >= 250)
						{
							alpha = 255;
							localAI[0] = 1f;
						}
					}
					else if (localAI[0] == 1f)
					{
						scale += 0.02f;
						alpha -= 30;
						if (alpha <= 0)
						{
							alpha = 0;
							localAI[0] = 0f;
						}
					}
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					if (type == 132)
					{
						SoundEngine.PlaySound(SoundID.Item60, base.position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item8, base.position);
					}
				}
				if (type == 157)
				{
					rotation += (float)direction * 0.4f;
					spriteDirection = direction;
				}
				else
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 0.785f;
				}
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
			}
			else if (aiStyle == 28)
			{
				if (type == 177)
				{
					for (int num212 = 0; num212 < 3; num212++)
					{
						int num213 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 137, base.velocity.X, base.velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
						Main.dust[num213].noGravity = true;
						Dust dust = Main.dust[num213];
						dust.velocity *= 0.3f;
					}
				}
				if (type == 118)
				{
					for (int num214 = 0; num214 < 2; num214++)
					{
						int num215 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 92, base.velocity.X, base.velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num215].noGravity = true;
						Dust dust = Main.dust[num215];
						dust.velocity *= 0.3f;
					}
				}
				if (type == 119 || type == 128 || type == 359)
				{
					for (int num216 = 0; num216 < 3; num216++)
					{
						int num217 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 92, base.velocity.X, base.velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num217].noGravity = true;
						Dust dust = Main.dust[num217];
						dust.velocity *= 0.3f;
					}
				}
				if (type == 309)
				{
					for (int num218 = 0; num218 < 3; num218++)
					{
						int num219 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 185, base.velocity.X, base.velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num219].noGravity = true;
						Dust dust = Main.dust[num219];
						dust.velocity *= 0.3f;
					}
				}
				if (type == 129)
				{
					for (int num220 = 0; num220 < 6; num220++)
					{
						int num221 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 106, base.velocity.X, base.velocity.Y, 100);
						Main.dust[num221].noGravity = true;
						Dust dust = Main.dust[num221];
						dust.velocity *= 0.1f + (float)Main.rand.Next(4) * 0.1f;
						dust = Main.dust[num221];
						dust.scale *= 1f + (float)Main.rand.Next(5) * 0.1f;
					}
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item28, base.position);
				}
			}
			else if (aiStyle == 29)
			{
				if (type == 619)
				{
					int num222 = (int)this.ai[0];
					for (int num223 = 0; num223 < 3; num223++)
					{
						int num224 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 254, base.velocity.X, base.velocity.Y, num222, default(Color), 1.2f);
						Main.dust[num224].position = (Main.dust[num224].position + base.Center) / 2f;
						Main.dust[num224].noGravity = true;
						Dust dust = Main.dust[num224];
						dust.velocity *= 0.5f;
					}
					for (int num225 = 0; num225 < 2; num225++)
					{
						int num224 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 255, base.velocity.X, base.velocity.Y, num222, default(Color), 0.4f);
						switch (num225)
						{
						case 0:
							Main.dust[num224].position = (Main.dust[num224].position + base.Center * 5f) / 6f;
							break;
						case 1:
							Main.dust[num224].position = (Main.dust[num224].position + (base.Center + base.velocity / 2f) * 5f) / 6f;
							break;
						}
						Dust dust = Main.dust[num224];
						dust.velocity *= 0.1f;
						Main.dust[num224].noGravity = true;
						Main.dust[num224].fadeIn = 1f;
					}
				}
				else if (type == 620)
				{
					int num226 = (int)this.ai[0];
					this.ai[1] += 1f;
					float num227 = (60f - this.ai[1]) / 60f;
					if (this.ai[1] > 40f)
					{
						Kill();
					}
					base.velocity.Y += 0.2f;
					if (base.velocity.Y > 18f)
					{
						base.velocity.Y = 18f;
					}
					base.velocity.X *= 0.98f;
					for (int num228 = 0; num228 < 2; num228++)
					{
						int num229 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num226, base.velocity.X, base.velocity.Y, 50, default(Color), 1.1f);
						Main.dust[num229].position = (Main.dust[num229].position + base.Center) / 2f;
						Main.dust[num229].noGravity = true;
						Dust dust = Main.dust[num229];
						dust.velocity *= 0.3f;
						dust = Main.dust[num229];
						dust.scale *= num227;
					}
					for (int num230 = 0; num230 < 1; num230++)
					{
						int num229 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num226, base.velocity.X, base.velocity.Y, 50, default(Color), 0.6f);
						Main.dust[num229].position = (Main.dust[num229].position + base.Center * 5f) / 6f;
						Dust dust = Main.dust[num229];
						dust.velocity *= 0.1f;
						Main.dust[num229].noGravity = true;
						Main.dust[num229].fadeIn = 0.9f * num227;
						dust = Main.dust[num229];
						dust.scale *= num227;
					}
				}
				else if (type == 521)
				{
					for (int num231 = 0; num231 < 3; num231++)
					{
						int num232 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 254, base.velocity.X, base.velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num232].position = (Main.dust[num232].position + base.Center) / 2f;
						Main.dust[num232].noGravity = true;
						Dust dust = Main.dust[num232];
						dust.velocity *= 0.5f;
					}
					for (int num233 = 0; num233 < 2; num233++)
					{
						int num232 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 255, base.velocity.X, base.velocity.Y, 50, default(Color), 0.4f);
						switch (num233)
						{
						case 0:
							Main.dust[num232].position = (Main.dust[num232].position + base.Center * 5f) / 6f;
							break;
						case 1:
							Main.dust[num232].position = (Main.dust[num232].position + (base.Center + base.velocity / 2f) * 5f) / 6f;
							break;
						}
						Dust dust = Main.dust[num232];
						dust.velocity *= 0.1f;
						Main.dust[num232].noGravity = true;
						Main.dust[num232].fadeIn = 1f;
					}
				}
				else if (type == 522)
				{
					this.ai[1] += 1f;
					float num234 = (60f - this.ai[1]) / 60f;
					if (this.ai[1] > 40f)
					{
						Kill();
					}
					base.velocity.Y += 0.2f;
					if (base.velocity.Y > 18f)
					{
						base.velocity.Y = 18f;
					}
					base.velocity.X *= 0.98f;
					for (int num235 = 0; num235 < 2; num235++)
					{
						int num236 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 254, base.velocity.X, base.velocity.Y, 50, default(Color), 1.1f);
						Main.dust[num236].position = (Main.dust[num236].position + base.Center) / 2f;
						Main.dust[num236].noGravity = true;
						Dust dust = Main.dust[num236];
						dust.velocity *= 0.3f;
						dust = Main.dust[num236];
						dust.scale *= num234;
					}
					for (int num237 = 0; num237 < 1; num237++)
					{
						int num236 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 255, base.velocity.X, base.velocity.Y, 50, default(Color), 0.6f);
						Main.dust[num236].position = (Main.dust[num236].position + base.Center * 5f) / 6f;
						Dust dust = Main.dust[num236];
						dust.velocity *= 0.1f;
						Main.dust[num236].noGravity = true;
						Main.dust[num236].fadeIn = 0.9f * num234;
						dust = Main.dust[num236];
						dust.scale *= num234;
					}
				}
				else if (type == 731)
				{
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					alpha -= 15;
					if (alpha < 0)
					{
						alpha = 0;
					}
					this.ai[0]++;
					if ((int)this.ai[0] % 2 != 0 && Main.rand.Next(4) == 0)
					{
						this.ai[0]++;
					}
					float num238 = 5f;
					switch ((int)this.ai[0])
					{
					case 10:
						base.velocity.Y -= num238;
						break;
					case 12:
						base.velocity.Y += num238;
						break;
					case 18:
						base.velocity.Y += num238;
						break;
					case 20:
						base.velocity.Y -= num238;
						this.ai[0] = 0f;
						break;
					}
					if (Main.rand.Next(3) == 0)
					{
						Dust dust7 = Dust.NewDustDirect(base.position, base.width, base.height, 226, base.velocity.X, base.velocity.Y, 50, default(Color), 0.4f);
						dust7.noGravity = true;
						dust7.velocity = dust7.velocity * 0f + base.velocity * 0.5f;
						if (Main.rand.Next(3) != 0)
						{
							Dust dust = dust7;
							dust.velocity *= 1.4f;
						}
					}
					Lighting.AddLight(base.Center, 0.2f, 0.5f, 0.7f);
				}
				else
				{
					int num239 = type - 121 + 86;
					if (type == 597)
					{
						num239 = 262;
					}
					for (int num240 = 0; num240 < 2; num240++)
					{
						int num241 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num239, base.velocity.X, base.velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num241].noGravity = true;
						Dust dust = Main.dust[num241];
						dust.velocity *= 0.3f;
					}
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item8, base.position);
					}
				}
			}
			else if (aiStyle == 30)
			{
				if (type == 907)
				{
					float num242 = 100f;
					float num243 = num242 - 50f;
					if (Main.rand.Next(Math.Max(4, 8 - (int)base.velocity.Length())) == 0)
					{
						int num244 = 5;
						int num245 = Dust.NewDust(base.position + new Vector2(num244, num244), base.width - num244 * 2, base.height - num244 * 2, 43, 0f, 0f, 254, new Color(255, 255, 0));
						Main.dust[num245].velocity = base.velocity * 0.75f;
					}
					if (this.ai[0] > num243)
					{
						base.velocity *= 0.9f;
						rotation *= 0.9f;
					}
					else
					{
						rotation += 0.2f;
						if (rotation > (float)Math.PI * 2f)
						{
							rotation -= (float)Math.PI * 2f;
						}
					}
					float num246 = this.ai[0];
					this.ai[0]++;
					if (Main.myPlayer == owner && this.ai[0] < num243 && this.ai[0] % 10f == 0f)
					{
						float num247 = (float)Math.PI / 2f * (float)((this.ai[0] % 20f != 0f) ? 1 : (-1));
						num247 *= (float)((whoAmI % 2 != 0) ? 1 : (-1));
						num247 += (float)Main.rand.Next(-5, 5) * MathHelper.Lerp(0.2f, 0.03f, this.ai[0] / num243);
						Vector2 v = base.velocity.RotatedBy(num247);
						v = v.SafeNormalize(Vector2.Zero);
						v *= Math.Max(2.5f, (num243 - this.ai[0]) / num243 * (7f + (-2f + (float)Main.rand.Next(2) * 2f)));
						int num248 = NewProjectile(base.Center, v, 335, damage, knockBack * 0.25f, owner, 0f, Main.rand.Next(4));
					}
					if (num246 <= num243 && this.ai[0] > num243)
					{
						netUpdate = true;
					}
					if (this.ai[0] > num242)
					{
						Kill();
					}
				}
				else if (type == 335)
				{
					int num249 = (frame = (int)this.ai[1]);
					if (this.ai[0] < 0f)
					{
						base.velocity.Y += 0.25f;
						if (base.velocity.Y > 14f)
						{
							base.velocity.Y = 14f;
						}
					}
					else
					{
						if (Main.rand.Next(Math.Max(4, 8 - (int)base.velocity.Length())) == 0)
						{
							Color newColor = Color.White;
							switch (num249)
							{
							case 0:
								newColor = new Color(255, 100, 100);
								break;
							case 1:
								newColor = new Color(100, 255, 100);
								break;
							case 2:
								newColor = new Color(100, 100, 255);
								break;
							case 3:
								newColor = new Color(255, 255, 100);
								break;
							}
							int num250 = 5;
							int num251 = Dust.NewDust(base.position + new Vector2(num250, num250), base.width - num250 * 2, base.height - num250 * 2, 43, 0f, 0f, 254, newColor);
							Main.dust[num251].velocity = base.velocity * 0.75f;
						}
						base.velocity *= 0.95f;
					}
					if (this.ai[0] >= 0f && base.velocity.Length() < 0.25f)
					{
						if (base.velocity != Vector2.Zero)
						{
							base.velocity = Vector2.Zero;
							if (Main.netMode != 1)
							{
								this.ai[0] = 50f;
								netUpdate = true;
							}
						}
						this.ai[0]--;
					}
					localAI[0]++;
					rotation = (float)Math.Sin(localAI[0] / 10f);
				}
				else
				{
					base.velocity *= 0.8f;
					rotation += 0.2f;
					alpha += 4;
					if (alpha >= 255)
					{
						Kill();
					}
				}
			}
			else if (aiStyle == 31)
			{
				int num252 = 110;
				int conversionType = 0;
				if (type == 146)
				{
					num252 = 111;
					conversionType = 2;
				}
				if (type == 147)
				{
					num252 = 112;
					conversionType = 1;
				}
				if (type == 148)
				{
					num252 = 113;
					conversionType = 3;
				}
				if (type == 149)
				{
					num252 = 114;
					conversionType = 4;
				}
				if (owner == Main.myPlayer)
				{
					WorldGen.Convert((int)(base.position.X + (float)(base.width / 2)) / 16, (int)(base.position.Y + (float)(base.height / 2)) / 16, conversionType, 2);
				}
				if (timeLeft > 133)
				{
					timeLeft = 133;
				}
				if (this.ai[0] > 7f)
				{
					float num253 = 1f;
					if (this.ai[0] == 8f)
					{
						num253 = 0.2f;
					}
					else if (this.ai[0] == 9f)
					{
						num253 = 0.4f;
					}
					else if (this.ai[0] == 10f)
					{
						num253 = 0.6f;
					}
					else if (this.ai[0] == 11f)
					{
						num253 = 0.8f;
					}
					this.ai[0] += 1f;
					for (int num254 = 0; num254 < 1; num254++)
					{
						int num255 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num252, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100);
						Main.dust[num255].noGravity = true;
						Dust dust = Main.dust[num255];
						dust.scale *= 1.75f;
						Main.dust[num255].velocity.X *= 2f;
						Main.dust[num255].velocity.Y *= 2f;
						dust = Main.dust[num255];
						dust.scale *= num253;
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
				rotation += 0.3f * (float)direction;
			}
			else if (aiStyle == 32)
			{
				timeLeft = 10;
				this.ai[0] += 1f;
				if (this.ai[0] >= 20f)
				{
					this.ai[0] = 18f;
					Rectangle rectangle3 = new Rectangle((int)base.position.X, (int)base.position.Y, base.width, base.height);
					for (int num256 = 0; num256 < 255; num256++)
					{
						Entity entity = Main.player[num256];
						if (entity.active && rectangle3.Intersects(entity.Hitbox))
						{
							this.ai[0] = 0f;
							base.velocity.Y = -4.5f;
							if (base.velocity.X > 2f)
							{
								base.velocity.X = 2f;
							}
							if (base.velocity.X < -2f)
							{
								base.velocity.X = -2f;
							}
							base.velocity.X = (base.velocity.X + (float)entity.direction * 1.75f) / 2f;
							base.velocity.X += entity.velocity.X * 3f;
							base.velocity.Y += entity.velocity.Y;
							if (base.velocity.X > 6f)
							{
								base.velocity.X = 6f;
							}
							if (base.velocity.X < -6f)
							{
								base.velocity.X = -6f;
							}
							netUpdate = true;
							this.ai[1] += 1f;
						}
					}
					for (int num257 = 0; num257 < 1000; num257++)
					{
						if (num257 == whoAmI)
						{
							continue;
						}
						Entity entity = Main.projectile[num257];
						if (entity.active && rectangle3.Intersects(entity.Hitbox))
						{
							this.ai[0] = 0f;
							base.velocity.Y = -4.5f;
							if (base.velocity.X > 2f)
							{
								base.velocity.X = 2f;
							}
							if (base.velocity.X < -2f)
							{
								base.velocity.X = -2f;
							}
							base.velocity.X = (base.velocity.X + (float)entity.direction * 1.75f) / 2f;
							base.velocity.X += entity.velocity.X * 3f;
							base.velocity.Y += entity.velocity.Y;
							if (base.velocity.X > 6f)
							{
								base.velocity.X = 6f;
							}
							if (base.velocity.X < -6f)
							{
								base.velocity.X = -6f;
							}
							netUpdate = true;
							this.ai[1] += 1f;
						}
					}
				}
				if (base.velocity.X == 0f && base.velocity.Y == 0f)
				{
					Kill();
				}
				rotation += 0.02f * base.velocity.X;
				if (base.velocity.Y == 0f)
				{
					base.velocity.X *= 0.98f;
				}
				else if (wet)
				{
					base.velocity.X *= 0.99f;
				}
				else
				{
					base.velocity.X *= 0.995f;
				}
				if ((double)base.velocity.X > -0.03 && (double)base.velocity.X < 0.03)
				{
					base.velocity.X = 0f;
				}
				if (wet)
				{
					this.ai[1] = 0f;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.1f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
					if (base.velocity.X == 0f)
					{
						Kill();
					}
				}
				else
				{
					base.velocity.Y += 0.1f;
				}
				if (base.velocity.Y > 10f)
				{
					base.velocity.Y = 10f;
				}
			}
			else if (aiStyle == 33)
			{
				if (alpha > 0)
				{
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				float num258 = 4f;
				float num259 = this.ai[0];
				float num260 = this.ai[1];
				if (num259 == 0f && num260 == 0f)
				{
					num259 = 1f;
				}
				float num261 = (float)Math.Sqrt(num259 * num259 + num260 * num260);
				num261 = num258 / num261;
				num259 *= num261;
				num260 *= num261;
				if (alpha < 70)
				{
					int num262 = 127;
					if (type == 310)
					{
						num262 = 187;
					}
					int num263 = Dust.NewDust(new Vector2(base.position.X, base.position.Y - 2f), 6, 6, num262, base.velocity.X, base.velocity.Y, 100, default(Color), 1.6f);
					Main.dust[num263].noGravity = true;
					Main.dust[num263].position.X -= num259 * 1f;
					Main.dust[num263].position.Y -= num260 * 1f;
					Main.dust[num263].velocity.X -= num259;
					Main.dust[num263].velocity.Y -= num260;
				}
				if (localAI[0] == 0f)
				{
					this.ai[0] = base.velocity.X;
					this.ai[1] = base.velocity.Y;
					localAI[1] += 1f;
					if (localAI[1] >= 30f)
					{
						base.velocity.Y += 0.09f;
						localAI[1] = 30f;
					}
				}
				else
				{
					if (!Collision.SolidCollision(base.position, base.width, base.height))
					{
						localAI[0] = 0f;
						localAI[1] = 30f;
					}
					damage = 0;
				}
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
				rotation = (float)Math.Atan2(this.ai[1], this.ai[0]) + 1.57f;
			}
			else if (aiStyle == 34)
			{
				rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
				if (this.ai[1] == 1f)
				{
					this.ai[0]++;
					if (this.ai[0] == 1f)
					{
						for (int num264 = 0; num264 < 8; num264++)
						{
							int num265 = Dust.NewDust(base.position, base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.8f);
							Main.dust[num265].noGravity = true;
							Dust dust = Main.dust[num265];
							dust.velocity *= 3f;
							Main.dust[num265].fadeIn = 0.5f;
							dust = Main.dust[num265];
							dust.position += base.velocity / 2f;
							dust = Main.dust[num265];
							dust.velocity += base.velocity / 4f + Main.player[owner].velocity * 0.1f;
						}
					}
					if (this.ai[0] > 2f)
					{
						int num266 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num266].noGravity = true;
						Dust dust = Main.dust[num266];
						dust.velocity *= 0.2f;
						Main.dust[num266].position = Main.dust[num266].position.RotatedBy(rotation, base.Center);
						num266 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 15f), 8, 8, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num266].noGravity = true;
						dust = Main.dust[num266];
						dust.velocity *= 0.2f;
						Main.dust[num266].position = Main.dust[num266].position.RotatedBy(rotation, base.Center);
						num266 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 10f), 8, 8, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num266].noGravity = true;
						dust = Main.dust[num266];
						dust.velocity *= 0.2f;
						Main.dust[num266].position = Main.dust[num266].position.RotatedBy(rotation, base.Center);
					}
				}
				else if (type >= 415 && type <= 418)
				{
					this.ai[0]++;
					if (this.ai[0] > 4f)
					{
						int num267 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num267].noGravity = true;
						Dust dust = Main.dust[num267];
						dust.velocity *= 0.2f;
						Main.dust[num267].position = Main.dust[num267].position.RotatedBy(rotation, base.Center);
					}
				}
				else
				{
					int num268 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num268].noGravity = true;
					Dust dust = Main.dust[num268];
					dust.velocity *= 0.2f;
					Main.dust[num268].position = Main.dust[num268].position.RotatedBy(rotation, base.Center);
				}
			}
			else if (aiStyle == 35)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 30f)
				{
					base.velocity.Y += 0.2f;
					base.velocity.X *= 0.985f;
					if (base.velocity.Y > 14f)
					{
						base.velocity.Y = 14f;
					}
				}
				rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * (float)direction * 0.02f;
				if (owner != Main.myPlayer)
				{
					return;
				}
				Vector2 vector17 = Collision.TileCollision(base.position, base.velocity, base.width, base.height, fallThrough: true, fall2: true);
				bool flag8 = false;
				if (vector17 != base.velocity)
				{
					flag8 = true;
				}
				else
				{
					int num269 = (int)(base.Center.X + base.velocity.X) / 16;
					int num270 = (int)(base.Center.Y + base.velocity.Y) / 16;
					if (Main.tile[num269, num270] != null && Main.tile[num269, num270].active() && Main.tile[num269, num270].bottomSlope())
					{
						flag8 = true;
						base.position.Y = num270 * 16 + 16 + 8;
						base.position.X = num269 * 16 + 8;
					}
				}
				if (!flag8)
				{
					return;
				}
				int num271 = 213;
				if (type == 475)
				{
					num271 = 353;
				}
				if (type == 506)
				{
					num271 = 366;
				}
				if (type == 505)
				{
					num271 = 365;
				}
				int num272 = (int)(base.position.X + (float)(base.width / 2)) / 16;
				int num273 = (int)(base.position.Y + (float)(base.height / 2)) / 16;
				base.position += vector17;
				int num274 = 10;
				if (Main.tile[num272, num273] == null)
				{
					return;
				}
				for (; Main.tile[num272, num273] != null && Main.tile[num272, num273].active() && Main.tileRope[Main.tile[num272, num273].type]; num273++)
				{
				}
				while (num274 > 0)
				{
					num274--;
					if (Main.tile[num272, num273] == null)
					{
						break;
					}
					if (Main.tile[num272, num273].active() && (Main.tileCut[Main.tile[num272, num273].type] || Main.tile[num272, num273].type == 165))
					{
						WorldGen.KillTile(num272, num273);
						NetMessage.SendData(17, -1, -1, null, 0, num272, num273);
					}
					if (!Main.tile[num272, num273].active())
					{
						WorldGen.PlaceTile(num272, num273, num271);
						NetMessage.SendData(17, -1, -1, null, 1, num272, num273, num271);
						this.ai[1] += 1f;
					}
					else
					{
						num274 = 0;
					}
					num273++;
				}
				Kill();
			}
			else if (aiStyle == 36)
			{
				if (type != 307 && wet && !honeyWet)
				{
					Kill();
				}
				if (alpha > 0)
				{
					alpha -= 50;
				}
				else
				{
					extraUpdates = 0;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (type == 307)
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					frameCounter++;
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 2)
					{
						frame = 0;
					}
					for (int num275 = 0; num275 < 3; num275++)
					{
						float num276 = base.velocity.X / 3f * (float)num275;
						float num277 = base.velocity.Y / 3f * (float)num275;
						int num278 = Dust.NewDust(base.position, base.width, base.height, 184);
						Main.dust[num278].position.X = base.Center.X - num276;
						Main.dust[num278].position.Y = base.Center.Y - num277;
						Dust dust = Main.dust[num278];
						dust.velocity *= 0f;
						Main.dust[num278].scale = 0.5f;
					}
				}
				else
				{
					if (type == 316)
					{
						if (base.velocity.X > 0f)
						{
							spriteDirection = -1;
						}
						else if (base.velocity.X < 0f)
						{
							spriteDirection = 1;
						}
					}
					else if (base.velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					else if (base.velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					rotation = base.velocity.X * 0.1f;
					frameCounter++;
					if (frameCounter >= 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 3)
					{
						frame = 0;
					}
				}
				float num279 = base.position.X;
				float num280 = base.position.Y;
				float num281 = 100000f;
				bool flag9 = false;
				this.ai[0] += 1f;
				if (this.ai[0] > 30f)
				{
					this.ai[0] = 30f;
					for (int num282 = 0; num282 < 200; num282++)
					{
						if (Main.npc[num282].CanBeChasedBy(this) && (!Main.npc[num282].wet || type == 307))
						{
							float num283 = Main.npc[num282].position.X + (float)(Main.npc[num282].width / 2);
							float num284 = Main.npc[num282].position.Y + (float)(Main.npc[num282].height / 2);
							float num285 = Math.Abs(base.position.X + (float)(base.width / 2) - num283) + Math.Abs(base.position.Y + (float)(base.height / 2) - num284);
							if (num285 < 800f && num285 < num281 && Collision.CanHit(base.position, base.width, base.height, Main.npc[num282].position, Main.npc[num282].width, Main.npc[num282].height))
							{
								num281 = num285;
								num279 = num283;
								num280 = num284;
								flag9 = true;
							}
						}
					}
				}
				if (!flag9)
				{
					num279 = base.position.X + (float)(base.width / 2) + base.velocity.X * 100f;
					num280 = base.position.Y + (float)(base.height / 2) + base.velocity.Y * 100f;
				}
				else if (type == 307)
				{
					friendly = true;
				}
				float num286 = 6f;
				float num287 = 0.1f;
				if (type == 189)
				{
					num286 = 7f;
					num287 = 0.15f;
				}
				if (type == 307)
				{
					num286 = 9f;
					num287 = 0.2f;
				}
				if (type == 316)
				{
					num286 = 10f;
					num287 = 0.25f;
				}
				if (type == 566)
				{
					num286 = 6.8f;
					num287 = 0.14f;
				}
				Vector2 vector18 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
				float num288 = num279 - vector18.X;
				float num289 = num280 - vector18.Y;
				float num290 = (float)Math.Sqrt(num288 * num288 + num289 * num289);
				float num291 = num290;
				num290 = num286 / num290;
				num288 *= num290;
				num289 *= num290;
				if (base.velocity.X < num288)
				{
					base.velocity.X += num287;
					if (base.velocity.X < 0f && num288 > 0f)
					{
						base.velocity.X += num287 * 2f;
					}
				}
				else if (base.velocity.X > num288)
				{
					base.velocity.X -= num287;
					if (base.velocity.X > 0f && num288 < 0f)
					{
						base.velocity.X -= num287 * 2f;
					}
				}
				if (base.velocity.Y < num289)
				{
					base.velocity.Y += num287;
					if (base.velocity.Y < 0f && num289 > 0f)
					{
						base.velocity.Y += num287 * 2f;
					}
				}
				else if (base.velocity.Y > num289)
				{
					base.velocity.Y -= num287;
					if (base.velocity.Y > 0f && num289 < 0f)
					{
						base.velocity.Y -= num287 * 2f;
					}
				}
			}
			else if (aiStyle == 37)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					localAI[0] = base.Center.X - base.velocity.X * 1.5f;
					localAI[1] = base.Center.Y - base.velocity.Y * 1.5f;
				}
				Vector2 value8 = new Vector2(localAI[0], localAI[1]);
				rotation = (base.Center - value8).ToRotation() - (float)Math.PI / 2f;
				if (this.ai[0] == 0f)
				{
					if (Collision.SolidCollision(base.position, base.width, base.height))
					{
						base.velocity *= -1f;
						this.ai[0] += 1f;
						return;
					}
					float num292 = Vector2.Distance(base.Center, value8);
					if (num292 > 300f)
					{
						base.velocity *= -1f;
						this.ai[0] += 1f;
					}
				}
				else if (Collision.SolidCollision(base.position, base.width, base.height) || Vector2.Distance(base.Center, value8) < base.velocity.Length())
				{
					Kill();
				}
			}
			else if (aiStyle == 38)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 6f)
				{
					this.ai[0] = 0f;
					SoundEngine.PlaySound(SoundID.Item34, base.position);
					if (Main.myPlayer == owner)
					{
						NewProjectile(base.position.X, base.position.Y, base.velocity.X, base.velocity.Y, 188, damage, knockBack, owner);
					}
				}
			}
			else if (aiStyle == 39)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (!active || !Main.player[owner].active || Main.player[owner].dead || Vector2.Distance(Main.player[owner].Center, base.Center) > 2000f)
				{
					Kill();
					return;
				}
				if (active && alpha == 0)
				{
					Main.player[owner].SetDummyItemTime(5);
					if (base.Center.X > Main.player[owner].Center.X)
					{
						Main.player[owner].ChangeDir(1);
					}
					else
					{
						Main.player[owner].ChangeDir(-1);
					}
				}
				Vector2 center = base.Center;
				float num293 = Main.player[owner].Center.X - center.X;
				float num294 = Main.player[owner].Center.Y - center.Y;
				float num295 = (float)Math.Sqrt(num293 * num293 + num294 * num294);
				if (!Main.player[owner].channel && active && alpha == 0)
				{
					this.ai[0] = 1f;
					this.ai[1] = -1f;
				}
				if (this.ai[1] > 0f && num295 > 1500f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 1f;
				}
				if (this.ai[1] > 0f)
				{
					tileCollide = false;
					int num296 = (int)this.ai[1] - 1;
					if (Main.npc[num296].active && Main.npc[num296].life > 0)
					{
						float num297 = 16f;
						center = base.Center;
						num293 = Main.npc[num296].Center.X - center.X;
						num294 = Main.npc[num296].Center.Y - center.Y;
						num295 = (float)Math.Sqrt(num293 * num293 + num294 * num294);
						if (num295 < num297)
						{
							base.velocity.X = num293;
							base.velocity.Y = num294;
							if (num295 > num297 / 3f)
							{
								if (base.velocity.X < 0f)
								{
									spriteDirection = -1;
									rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
								}
								else
								{
									spriteDirection = 1;
									rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
								}
								if (type == 190)
								{
									base.velocity.X = 0f;
									base.velocity.Y = 0f;
								}
							}
						}
						else
						{
							if (num295 == 0f)
							{
								num295 = 0.0001f;
							}
							num295 = num297 / num295;
							num293 *= num295;
							num294 *= num295;
							base.velocity.X = num293;
							base.velocity.Y = num294;
							if (base.velocity.X < 0f)
							{
								spriteDirection = -1;
								rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
							}
							else
							{
								spriteDirection = 1;
								rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
							}
						}
						if (type == 190)
						{
							for (int num298 = 0; num298 < 1000; num298++)
							{
								if (num298 != whoAmI && Main.projectile[num298].active && Main.projectile[num298].owner == owner && Main.projectile[num298].type == 190 && Vector2.Distance(base.Center, Main.projectile[num298].Center) < 8f)
								{
									if (base.position.X < Main.projectile[num298].position.X)
									{
										base.velocity.X -= 4f;
									}
									else
									{
										base.velocity.X += 4f;
									}
									if (base.position.Y < Main.projectile[num298].position.Y)
									{
										base.velocity.Y -= 4f;
									}
									else
									{
										base.velocity.Y += 4f;
									}
								}
							}
						}
						this.ai[0] = 1f;
					}
					else
					{
						this.ai[1] = 0f;
						float num299 = base.position.X;
						float num300 = base.position.Y;
						float num301 = 3000f;
						int num302 = -1;
						for (int num303 = 0; num303 < 200; num303++)
						{
							if (Main.npc[num303].CanBeChasedBy(this))
							{
								float x = Main.npc[num303].Center.X;
								float y = Main.npc[num303].Center.Y;
								float num304 = Math.Abs(base.Center.X - x) + Math.Abs(base.Center.Y - y);
								if (num304 < num301 && Collision.CanHit(base.position, base.width, base.height, Main.npc[num303].position, Main.npc[num303].width, Main.npc[num303].height))
								{
									num301 = num304;
									num299 = x;
									num300 = y;
									num302 = num303;
								}
							}
						}
						if (num302 >= 0)
						{
							float num305 = 16f;
							center = base.Center;
							num293 = num299 - center.X;
							num294 = num300 - center.Y;
							num295 = (float)Math.Sqrt(num293 * num293 + num294 * num294);
							if (num295 == 0f)
							{
								num295 = 0.0001f;
							}
							num295 = num305 / num295;
							num293 *= num295;
							num294 *= num295;
							base.velocity.X = num293;
							base.velocity.Y = num294;
							this.ai[0] = 0f;
							this.ai[1] = num302 + 1;
						}
					}
				}
				else if (this.ai[0] == 0f)
				{
					if (num295 > 700f)
					{
						this.ai[0] = 1f;
					}
					if (base.velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					}
				}
				else if (this.ai[0] == 1f)
				{
					tileCollide = false;
					if (base.velocity.X < 0f)
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
					}
					else
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					}
					if (base.velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					}
					float num306 = 20f;
					if (num295 < 70f)
					{
						Kill();
					}
					num295 = num306 / num295;
					num293 *= num295;
					num294 *= num295;
					base.velocity.X = num293;
					base.velocity.Y = num294;
					if (type == 190)
					{
						base.position += Main.player[owner].velocity;
					}
				}
				frameCounter++;
				if (frameCounter >= 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			else if (aiStyle == 40)
			{
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					localAI[0] = 100f;
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 5)
				{
					frame = 0;
				}
				base.velocity.X += this.ai[0];
				base.velocity.Y += this.ai[1];
				localAI[1] += 1f;
				if (localAI[1] == 50f)
				{
					localAI[1] = 51f;
					this.ai[0] = (float)Main.rand.Next(-100, 101) * 6E-05f;
					this.ai[1] = (float)Main.rand.Next(-100, 101) * 6E-05f;
				}
				if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) > 16f)
				{
					base.velocity.X *= 0.95f;
					base.velocity.Y *= 0.95f;
				}
				if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 12f)
				{
					base.velocity.X *= 1.05f;
					base.velocity.Y *= 1.05f;
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 3.14f;
			}
			else if (aiStyle == 41)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					frame = Main.rand.Next(3);
				}
				rotation += base.velocity.X * 0.01f;
			}
			else if (aiStyle == 42)
			{
				if (!Main.player[owner].crystalLeaf)
				{
					Kill();
					return;
				}
				base.position.X = Main.player[owner].Center.X - (float)(base.width / 2);
				base.position.Y = Main.player[owner].Center.Y - (float)(base.height / 2) + Main.player[owner].gfxOffY - 60f;
				if (Main.player[owner].gravDir == -1f)
				{
					base.position.Y += 120f;
					rotation = 3.14f;
				}
				else
				{
					rotation = 0f;
				}
				base.position.X = (int)base.position.X;
				base.position.Y = (int)base.position.Y;
				float num307 = (float)(int)Main.mouseTextColor / 200f - 0.35f;
				num307 *= 0.2f;
				scale = num307 + 0.95f;
				if (owner != Main.myPlayer)
				{
					return;
				}
				if (this.ai[0] == 0f)
				{
					float num308 = base.position.X;
					float num309 = base.position.Y;
					float num310 = 700f;
					bool flag10 = false;
					for (int num311 = 0; num311 < 200; num311++)
					{
						if (Main.npc[num311].CanBeChasedBy(this))
						{
							float num312 = Main.npc[num311].position.X + (float)(Main.npc[num311].width / 2);
							float num313 = Main.npc[num311].position.Y + (float)(Main.npc[num311].height / 2);
							float num314 = Math.Abs(base.position.X + (float)(base.width / 2) - num312) + Math.Abs(base.position.Y + (float)(base.height / 2) - num313);
							if (num314 < num310 && Collision.CanHit(base.position, base.width, base.height, Main.npc[num311].position, Main.npc[num311].width, Main.npc[num311].height))
							{
								num310 = num314;
								num308 = num312;
								num309 = num313;
								flag10 = true;
							}
						}
					}
					if (flag10)
					{
						float num315 = 12f;
						Vector2 vector19 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
						float num316 = num308 - vector19.X;
						float num317 = num309 - vector19.Y;
						float num318 = (float)Math.Sqrt(num316 * num316 + num317 * num317);
						float num319 = num318;
						num318 = num315 / num318;
						num316 *= num318;
						num317 *= num318;
						NewProjectile(base.Center.X - 4f, base.Center.Y, num316, num317, 227, Player.crystalLeafDamage, Player.crystalLeafKB, owner);
						this.ai[0] = 50f;
					}
				}
				else
				{
					this.ai[0] -= 1f;
				}
			}
			else if (aiStyle == 43)
			{
				Dust dust;
				if (localAI[1] == 0f)
				{
					SoundEngine.PlaySound(6, (int)base.position.X, (int)base.position.Y);
					localAI[1] += 1f;
					for (int num320 = 0; num320 < 5; num320++)
					{
						int num321 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 157);
						Main.dust[num321].noGravity = true;
						dust = Main.dust[num321];
						dust.velocity *= 3f;
						Main.dust[num321].scale = 1.5f;
					}
				}
				this.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0025f;
				this.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0025f;
				if (localAI[0] == 0f)
				{
					scale += 0.05f;
					if ((double)scale > 1.2)
					{
						localAI[0] = 1f;
					}
				}
				else
				{
					scale -= 0.05f;
					if ((double)scale < 0.8)
					{
						localAI[0] = 0f;
					}
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 3.14f;
				int num322 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 157);
				Main.dust[num322].noGravity = true;
				dust = Main.dust[num322];
				dust.velocity *= 0.1f;
				Main.dust[num322].scale = 1.5f;
			}
			else if (aiStyle == 44)
			{
				int num323 = 6;
				if (type == 228)
				{
					base.velocity *= 0.96f;
					alpha += 4;
					if (alpha > 255)
					{
						Kill();
					}
				}
				else if (type == 732)
				{
					num323 = 3;
					alpha += 20;
					if (alpha > 255)
					{
						Kill();
					}
					if (Main.rand.Next(5) == 0)
					{
						Dust dust8 = Dust.NewDustDirect(base.position, base.width, base.height, 226, 0f, 0f, 150, default(Color), 0.8f);
						dust8.noGravity = true;
						Dust dust = dust8;
						dust.velocity *= 1.2f;
					}
					rotation = base.velocity.ToRotation();
					Lighting.AddLight(base.Center, 0.3f, 0.6f, 0.8f);
				}
				else if (type == 229)
				{
					if (this.ai[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item8, base.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] > 20f)
					{
						base.velocity.Y += 0.3f;
						base.velocity.X *= 0.98f;
					}
				}
				if (++frameCounter >= num323)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			else if (aiStyle == 45)
			{
				if (type == 237 || type == 243)
				{
					float num324 = this.ai[0];
					float num325 = this.ai[1];
					if (num324 != 0f && num325 != 0f)
					{
						bool flag11 = false;
						bool flag12 = false;
						if ((base.velocity.X < 0f && base.Center.X < num324) || (base.velocity.X > 0f && base.Center.X > num324))
						{
							flag11 = true;
						}
						if ((base.velocity.Y < 0f && base.Center.Y < num325) || (base.velocity.Y > 0f && base.Center.Y > num325))
						{
							flag12 = true;
						}
						if (flag11 && flag12)
						{
							Kill();
						}
					}
					rotation += base.velocity.X * 0.02f;
					frameCounter++;
					if (frameCounter > 4)
					{
						frameCounter = 0;
						frame++;
						if (frame > 3)
						{
							frame = 0;
						}
					}
				}
				else if (type == 238 || type == 244)
				{
					bool flag13 = true;
					int num326 = (int)base.Center.X;
					int num327 = (int)(base.position.Y + (float)base.height);
					if (Collision.SolidTiles(new Vector2(num326, num327), 2, 20))
					{
						flag13 = false;
					}
					frameCounter++;
					if (frameCounter > 8)
					{
						frameCounter = 0;
						frame++;
						if ((!flag13 && frame > 2) || frame > 5)
						{
							frame = 0;
						}
					}
					this.ai[1] += 1f;
					if (type == 244 && this.ai[1] >= 3600f)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
							Kill();
						}
					}
					else if (type == 238 && this.ai[1] >= 7200f)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
							Kill();
						}
					}
					else if (flag13)
					{
						this.ai[0] += 1f;
						if (type == 244)
						{
							if (this.ai[0] > 10f)
							{
								this.ai[0] = 0f;
								if (owner == Main.myPlayer)
								{
									num326 += Main.rand.Next(-14, 15);
									NewProjectile(num326, num327, 0f, 5f, 245, damage, 0f, owner);
								}
							}
						}
						else if (this.ai[0] > 8f)
						{
							this.ai[0] = 0f;
							if (owner == Main.myPlayer)
							{
								num326 += Main.rand.Next(-14, 15);
								NewProjectile(num326, num327, 0f, 5f, 239, damage, 0f, owner);
							}
						}
					}
					localAI[0] += 1f;
					if (!(localAI[0] >= 10f))
					{
						return;
					}
					localAI[0] = 0f;
					int num328 = 0;
					int num329 = 0;
					float num330 = 0f;
					int num331 = type;
					for (int num332 = 0; num332 < 1000; num332++)
					{
						if (Main.projectile[num332].active && Main.projectile[num332].owner == owner && Main.projectile[num332].type == num331 && Main.projectile[num332].ai[1] < 3600f)
						{
							num328++;
							if (Main.projectile[num332].ai[1] > num330)
							{
								num329 = num332;
								num330 = Main.projectile[num332].ai[1];
							}
						}
					}
					if (type == 244)
					{
						if (num328 > 1)
						{
							Main.projectile[num329].netUpdate = true;
							Main.projectile[num329].ai[1] = 36000f;
						}
					}
					else if (num328 > 2)
					{
						Main.projectile[num329].netUpdate = true;
						Main.projectile[num329].ai[1] = 36000f;
					}
				}
				else if (type == 239)
				{
					alpha = 50;
				}
				else if (type == 245)
				{
					alpha = 100;
				}
				else if (type == 264)
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				}
			}
			else if (aiStyle == 46)
			{
				int num333 = 1200;
				if (type == 250)
				{
					if (owner == Main.myPlayer)
					{
						localAI[0] += 1f;
						if (localAI[0] > 4f)
						{
							localAI[0] = 3f;
							NewProjectile(base.Center.X, base.Center.Y, base.velocity.X * 0.001f, base.velocity.Y * 0.001f, 251, damage, knockBack, owner);
						}
						if (timeLeft > num333)
						{
							timeLeft = num333;
						}
					}
					float num334 = 1f;
					if (base.velocity.Y < 0f)
					{
						num334 -= base.velocity.Y / 3f;
					}
					this.ai[0] += num334;
					if (this.ai[0] > 30f)
					{
						base.velocity.Y += 0.5f;
						if (base.velocity.Y > 0f)
						{
							base.velocity.X *= 0.95f;
						}
						else
						{
							base.velocity.X *= 1.05f;
						}
					}
					float x2 = base.velocity.X;
					float y2 = base.velocity.Y;
					float num335 = (float)Math.Sqrt(x2 * x2 + y2 * y2);
					num335 = 15.95f * scale / num335;
					x2 *= num335;
					y2 *= num335;
					base.velocity.X = x2;
					base.velocity.Y = y2;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					return;
				}
				if (localAI[0] == 0f)
				{
					if (base.velocity.X > 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					}
					localAI[0] = 1f;
					timeLeft = num333;
				}
				base.velocity.X *= 0.98f;
				base.velocity.Y *= 0.98f;
				if (rotation == 0f)
				{
					alpha = 255;
				}
				else if (timeLeft < 10)
				{
					alpha = 255 - (int)(255f * (float)timeLeft / 10f);
				}
				else if (timeLeft > num333 - 10)
				{
					int num336 = num333 - timeLeft;
					alpha = 255 - (int)(255f * (float)num336 / 10f);
				}
				else
				{
					alpha = 0;
				}
			}
			else if (aiStyle == 47)
			{
				if (this.ai[0] == 0f)
				{
					this.ai[0] = base.velocity.X;
					this.ai[1] = base.velocity.Y;
				}
				if (base.velocity.X > 0f)
				{
					rotation += (Math.Abs(base.velocity.Y) + Math.Abs(base.velocity.X)) * 0.001f;
				}
				else
				{
					rotation -= (Math.Abs(base.velocity.Y) + Math.Abs(base.velocity.X)) * 0.001f;
				}
				frameCounter++;
				if (frameCounter > 6)
				{
					frameCounter = 0;
					frame++;
					if (frame > 4)
					{
						frame = 0;
					}
				}
				if (Math.Sqrt(base.velocity.X * base.velocity.X + base.velocity.Y * base.velocity.Y) > 2.0)
				{
					base.velocity *= 0.98f;
				}
				for (int num337 = 0; num337 < 1000; num337++)
				{
					if (num337 != whoAmI && Main.projectile[num337].active && Main.projectile[num337].owner == owner && Main.projectile[num337].type == type && timeLeft > Main.projectile[num337].timeLeft && Main.projectile[num337].timeLeft > 30)
					{
						Main.projectile[num337].timeLeft = 30;
					}
				}
				int[] array = new int[20];
				int num338 = 0;
				float num339 = 300f;
				bool flag14 = false;
				float num340 = 0f;
				float num341 = 0f;
				for (int num342 = 0; num342 < 200; num342++)
				{
					if (!Main.npc[num342].CanBeChasedBy(this))
					{
						continue;
					}
					float num343 = Main.npc[num342].position.X + (float)(Main.npc[num342].width / 2);
					float num344 = Main.npc[num342].position.Y + (float)(Main.npc[num342].height / 2);
					float num345 = Math.Abs(base.position.X + (float)(base.width / 2) - num343) + Math.Abs(base.position.Y + (float)(base.height / 2) - num344);
					if (num345 < num339 && Collision.CanHit(base.Center, 1, 1, Main.npc[num342].Center, 1, 1))
					{
						if (num338 < 20)
						{
							array[num338] = num342;
							num338++;
							num340 = num343;
							num341 = num344;
						}
						flag14 = true;
					}
				}
				if (timeLeft < 30)
				{
					flag14 = false;
				}
				if (flag14)
				{
					int num346 = Main.rand.Next(num338);
					num346 = array[num346];
					num340 = Main.npc[num346].position.X + (float)(Main.npc[num346].width / 2);
					num341 = Main.npc[num346].position.Y + (float)(Main.npc[num346].height / 2);
					localAI[0] += 1f;
					if (localAI[0] > 8f)
					{
						localAI[0] = 0f;
						float num347 = 6f;
						Vector2 vector20 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
						vector20 += base.velocity * 4f;
						float num348 = num340 - vector20.X;
						float num349 = num341 - vector20.Y;
						float num350 = (float)Math.Sqrt(num348 * num348 + num349 * num349);
						float num351 = num350;
						num350 = num347 / num350;
						num348 *= num350;
						num349 *= num350;
						NewProjectile(vector20.X, vector20.Y, num348, num349, 255, damage, knockBack, owner);
					}
				}
			}
			else if (aiStyle == 48)
			{
				if (type == 255)
				{
					for (int num352 = 0; num352 < 4; num352++)
					{
						Vector2 position2 = base.position;
						position2 -= base.velocity * ((float)num352 * 0.25f);
						alpha = 255;
						int num353 = Dust.NewDust(position2, 1, 1, 160);
						Main.dust[num353].position = position2;
						Main.dust[num353].position.X += base.width / 2;
						Main.dust[num353].position.Y += base.height / 2;
						Main.dust[num353].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Dust dust = Main.dust[num353];
						dust.velocity *= 0.2f;
					}
					return;
				}
				if (type == 433)
				{
					for (int num354 = 0; num354 < 2; num354++)
					{
						Vector2 position3 = base.position;
						position3 -= base.velocity * ((float)num354 * 0.25f);
						alpha = 255;
						int num355 = Dust.NewDust(position3, 1, 1, 160);
						Main.dust[num355].position = position3;
						Main.dust[num355].position.X += base.width / 2;
						Main.dust[num355].position.Y += base.height / 2;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num355].color = Color.LimeGreen;
						}
						else
						{
							Main.dust[num355].color = Color.CornflowerBlue;
						}
						Main.dust[num355].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Dust dust = Main.dust[num355];
						dust.velocity *= 0.2f;
					}
					return;
				}
				if (type == 290)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item8, base.position);
					}
					localAI[0] += 1f;
					if (localAI[0] > 3f)
					{
						for (int num356 = 0; num356 < 3; num356++)
						{
							Vector2 position4 = base.position;
							position4 -= base.velocity * ((float)num356 * 0.3334f);
							alpha = 255;
							int num357 = Dust.NewDust(position4, 1, 1, 173);
							Main.dust[num357].position = position4;
							Main.dust[num357].scale = (float)Main.rand.Next(70, 110) * 0.013f;
							Dust dust = Main.dust[num357];
							dust.velocity *= 0.2f;
						}
					}
					return;
				}
				if (type == 294)
				{
					localAI[0] += 1f;
					if (localAI[0] > 9f)
					{
						for (int num358 = 0; num358 < 4; num358++)
						{
							Vector2 position5 = base.position;
							position5 -= base.velocity * ((float)num358 * 0.25f);
							alpha = 255;
							int num359 = Dust.NewDust(position5, 1, 1, 173);
							Main.dust[num359].position = position5;
							Main.dust[num359].scale = (float)Main.rand.Next(70, 110) * 0.013f;
							Dust dust = Main.dust[num359];
							dust.velocity *= 0.2f;
						}
					}
					return;
				}
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					for (int num360 = 0; num360 < 4; num360++)
					{
						Vector2 position6 = base.position;
						position6 -= base.velocity * ((float)num360 * 0.25f);
						alpha = 255;
						int num361 = Dust.NewDust(position6, 1, 1, 162);
						Main.dust[num361].position = position6;
						Main.dust[num361].position.X += base.width / 2;
						Main.dust[num361].position.Y += base.height / 2;
						Main.dust[num361].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Dust dust = Main.dust[num361];
						dust.velocity *= 0.2f;
					}
				}
			}
			else if (aiStyle == 49)
			{
				if (this.ai[0] == -2f)
				{
					hostile = true;
					Kill();
					return;
				}
				if (this.ai[0] == -3f)
				{
					Kill();
					return;
				}
				if (soundDelay == 0)
				{
					soundDelay = 3000;
					SoundEngine.PlaySound(SoundID.Item14, base.position);
				}
				if (this.ai[0] >= 0f)
				{
					if (base.velocity.X > 0f)
					{
						direction = 1;
					}
					else if (base.velocity.X < 0f)
					{
						direction = -1;
					}
					spriteDirection = direction;
					this.ai[0] += 1f;
					rotation += base.velocity.X * 0.05f + (float)direction * 0.05f;
					if (this.ai[0] >= 18f)
					{
						base.velocity.Y += 0.28f;
						base.velocity.X *= 0.99f;
					}
					if ((double)base.velocity.Y > 15.9)
					{
						base.velocity.Y = 15.9f;
					}
					if (!(this.ai[0] > 2f))
					{
						return;
					}
					alpha = 0;
					if (this.ai[0] == 3f)
					{
						for (int num362 = 0; num362 < 10; num362++)
						{
							int num363 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num363];
							dust.velocity *= 0.5f;
							dust = Main.dust[num363];
							dust.velocity += base.velocity * 0.1f;
						}
						for (int num364 = 0; num364 < 5; num364++)
						{
							int num365 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num365].noGravity = true;
							Dust dust = Main.dust[num365];
							dust.velocity *= 3f;
							dust = Main.dust[num365];
							dust.velocity += base.velocity * 0.2f;
							num365 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100);
							dust = Main.dust[num365];
							dust.velocity *= 2f;
							dust = Main.dust[num365];
							dust.velocity += base.velocity * 0.3f;
						}
						for (int num366 = 0; num366 < 1; num366++)
						{
							int num367 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num367];
							gore.position += base.velocity * 1.25f;
							Main.gore[num367].scale = 1.5f;
							gore = Main.gore[num367];
							gore.velocity += base.velocity * 0.5f;
							gore = Main.gore[num367];
							gore.velocity *= 0.02f;
						}
					}
				}
				else if (this.ai[0] == -1f)
				{
					rotation = 0f;
					base.velocity.X *= 0.95f;
					base.velocity.Y += 0.2f;
				}
			}
			else if (aiStyle == 50)
			{
				if (type == 291)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item20, base.position);
						localAI[0] += 1f;
					}
					bool flag15 = false;
					bool flag16 = false;
					if (base.velocity.X < 0f && base.position.X < this.ai[0])
					{
						flag15 = true;
					}
					if (base.velocity.X > 0f && base.position.X > this.ai[0])
					{
						flag15 = true;
					}
					if (base.velocity.Y < 0f && base.position.Y < this.ai[1])
					{
						flag16 = true;
					}
					if (base.velocity.Y > 0f && base.position.Y > this.ai[1])
					{
						flag16 = true;
					}
					if (flag15 && flag16)
					{
						Kill();
					}
					for (int num368 = 0; num368 < 10; num368++)
					{
						int num369 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 174, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num369].noGravity = true;
						Dust dust = Main.dust[num369];
						dust.velocity *= 0.5f;
						dust = Main.dust[num369];
						dust.velocity += base.velocity * 0.1f;
					}
					return;
				}
				if (type == 295)
				{
					for (int num370 = 0; num370 < 8; num370++)
					{
						int num371 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 174, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num371].noGravity = true;
						Dust dust = Main.dust[num371];
						dust.velocity *= 0.5f;
						dust = Main.dust[num371];
						dust.velocity += base.velocity * 0.1f;
					}
					return;
				}
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item74, base.position);
					localAI[0] += 1f;
				}
				this.ai[0] += 1f;
				if (type == 296)
				{
					this.ai[0] += 3f;
				}
				float num372 = 25f;
				if (this.ai[0] > 180f)
				{
					num372 -= (this.ai[0] - 180f) / 2f;
				}
				if (num372 <= 0f)
				{
					num372 = 0f;
					Kill();
				}
				if (type == 296)
				{
					num372 *= 0.7f;
				}
				for (int num373 = 0; (float)num373 < num372; num373++)
				{
					float num374 = Main.rand.Next(-10, 11);
					float num375 = Main.rand.Next(-10, 11);
					float num376 = Main.rand.Next(3, 9);
					float num377 = (float)Math.Sqrt(num374 * num374 + num375 * num375);
					num377 = num376 / num377;
					num374 *= num377;
					num375 *= num377;
					int num378 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 174, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num378].noGravity = true;
					Main.dust[num378].position.X = base.Center.X;
					Main.dust[num378].position.Y = base.Center.Y;
					Main.dust[num378].position.X += Main.rand.Next(-10, 11);
					Main.dust[num378].position.Y += Main.rand.Next(-10, 11);
					Main.dust[num378].velocity.X = num374;
					Main.dust[num378].velocity.Y = num375;
				}
			}
			else if (aiStyle == 51)
			{
				if (type == 297)
				{
					localAI[0] += 1f;
					if (localAI[0] > 4f)
					{
						for (int num379 = 0; num379 < 5; num379++)
						{
							int num380 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 175, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num380].noGravity = true;
							Dust dust = Main.dust[num380];
							dust.velocity *= 0f;
						}
					}
				}
				else
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item8, base.position);
						localAI[0] += 1f;
					}
					for (int num381 = 0; num381 < 9; num381++)
					{
						int num382 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 175, 0f, 0f, 100, default(Color), 1.3f);
						Main.dust[num382].noGravity = true;
						Dust dust = Main.dust[num382];
						dust.velocity *= 0f;
					}
				}
				float num383 = base.Center.X;
				float num384 = base.Center.Y;
				float num385 = 400f;
				bool flag17 = false;
				int num386 = 0;
				if (type == 297)
				{
					for (int num387 = 0; num387 < 200; num387++)
					{
						if (Main.npc[num387].CanBeChasedBy(this) && Distance(Main.npc[num387].Center) < num385 && Collision.CanHit(base.Center, 1, 1, Main.npc[num387].Center, 1, 1))
						{
							float num388 = Main.npc[num387].position.X + (float)(Main.npc[num387].width / 2);
							float num389 = Main.npc[num387].position.Y + (float)(Main.npc[num387].height / 2);
							float num390 = Math.Abs(base.position.X + (float)(base.width / 2) - num388) + Math.Abs(base.position.Y + (float)(base.height / 2) - num389);
							if (num390 < num385)
							{
								num385 = num390;
								num383 = num388;
								num384 = num389;
								flag17 = true;
								num386 = num387;
							}
						}
					}
				}
				else
				{
					num385 = 200f;
					for (int num391 = 0; num391 < 255; num391++)
					{
						if (Main.player[num391].active && !Main.player[num391].dead)
						{
							float num392 = Main.player[num391].position.X + (float)(Main.player[num391].width / 2);
							float num393 = Main.player[num391].position.Y + (float)(Main.player[num391].height / 2);
							float num394 = Math.Abs(base.position.X + (float)(base.width / 2) - num392) + Math.Abs(base.position.Y + (float)(base.height / 2) - num393);
							if (num394 < num385)
							{
								num385 = num394;
								num383 = num392;
								num384 = num393;
								flag17 = true;
								num386 = num391;
							}
						}
					}
				}
				if (flag17)
				{
					float num395 = 3f;
					if (type == 297)
					{
						num395 = 6f;
					}
					Vector2 vector21 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
					float num396 = num383 - vector21.X;
					float num397 = num384 - vector21.Y;
					float num398 = (float)Math.Sqrt(num396 * num396 + num397 * num397);
					float num399 = num398;
					num398 = num395 / num398;
					num396 *= num398;
					num397 *= num398;
					if (type == 297)
					{
						base.velocity.X = (base.velocity.X * 20f + num396) / 21f;
						base.velocity.Y = (base.velocity.Y * 20f + num397) / 21f;
					}
					else
					{
						base.velocity.X = (base.velocity.X * 100f + num396) / 101f;
						base.velocity.Y = (base.velocity.Y * 100f + num397) / 101f;
					}
				}
			}
			else if (aiStyle == 52)
			{
				int num400 = (int)this.ai[0];
				float num401 = 4f;
				Vector2 vector22 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
				float num402 = Main.player[num400].Center.X - vector22.X;
				float num403 = Main.player[num400].Center.Y - vector22.Y;
				float num404 = (float)Math.Sqrt(num402 * num402 + num403 * num403);
				float num405 = num404;
				if (num404 < 50f && base.position.X < Main.player[num400].position.X + (float)Main.player[num400].width && base.position.X + (float)base.width > Main.player[num400].position.X && base.position.Y < Main.player[num400].position.Y + (float)Main.player[num400].height && base.position.Y + (float)base.height > Main.player[num400].position.Y)
				{
					if (owner == Main.myPlayer && !Main.player[Main.myPlayer].moonLeech)
					{
						int num406 = (int)this.ai[1];
						Main.player[num400].HealEffect(num406, broadcast: false);
						Player player3 = Main.player[num400];
						player3.statLife += num406;
						if (Main.player[num400].statLife > Main.player[num400].statLifeMax2)
						{
							Main.player[num400].statLife = Main.player[num400].statLifeMax2;
						}
						NetMessage.SendData(66, -1, -1, null, num400, num406);
					}
					Kill();
				}
				num404 = num401 / num404;
				num402 *= num404;
				num403 *= num404;
				base.velocity.X = (base.velocity.X * 15f + num402) / 16f;
				base.velocity.Y = (base.velocity.Y * 15f + num403) / 16f;
				if (type == 305)
				{
					for (int num407 = 0; num407 < 3; num407++)
					{
						float num408 = base.velocity.X * 0.334f * (float)num407;
						float num409 = (0f - base.velocity.Y * 0.334f) * (float)num407;
						int num410 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 183, 0f, 0f, 100, default(Color), 1.1f);
						Main.dust[num410].noGravity = true;
						Dust dust = Main.dust[num410];
						dust.velocity *= 0f;
						Main.dust[num410].position.X -= num408;
						Main.dust[num410].position.Y -= num409;
					}
				}
				else
				{
					for (int num411 = 0; num411 < 5; num411++)
					{
						float num412 = base.velocity.X * 0.2f * (float)num411;
						float num413 = (0f - base.velocity.Y * 0.2f) * (float)num411;
						int num414 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 175, 0f, 0f, 100, default(Color), 1.3f);
						Main.dust[num414].noGravity = true;
						Dust dust = Main.dust[num414];
						dust.velocity *= 0f;
						Main.dust[num414].position.X -= num412;
						Main.dust[num414].position.Y -= num413;
					}
				}
			}
			else if (aiStyle == 53)
			{
				if (localAI[0] == 0f)
				{
					localAI[1] = 1f;
					localAI[0] = 1f;
					this.ai[0] = 120f;
					int num415 = 80;
					SoundEngine.PlaySound(SoundID.Item46, base.position);
					if (type == 308)
					{
						for (int num416 = 0; num416 < num415; num416++)
						{
							int num417 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 16f), base.width, base.height - 16, 185);
							Dust dust = Main.dust[num417];
							dust.velocity *= 2f;
							Main.dust[num417].noGravity = true;
							dust = Main.dust[num417];
							dust.scale *= 1.15f;
						}
					}
					if (type == 377)
					{
						frame = 4;
						num415 = 40;
						for (int num418 = 0; num418 < num415; num418++)
						{
							int num419 = Dust.NewDust(base.position + Vector2.UnitY * 16f, base.width, base.height - 16, 171, 0f, 0f, 100);
							Main.dust[num419].scale = (float)Main.rand.Next(1, 10) * 0.1f;
							Main.dust[num419].noGravity = true;
							Main.dust[num419].fadeIn = 1.5f;
							Dust dust = Main.dust[num419];
							dust.velocity *= 0.75f;
						}
					}
				}
				base.velocity.X = 0f;
				base.velocity.Y += 0.2f;
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
				bool flag18 = false;
				float num420 = base.Center.X;
				float num421 = base.Center.Y;
				float num422 = 1000f;
				NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
				{
					float num423 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
					float num424 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
					float num425 = Math.Abs(base.position.X + (float)(base.width / 2) - num423) + Math.Abs(base.position.Y + (float)(base.height / 2) - num424);
					if (num425 < num422 && Collision.CanHit(base.position, base.width, base.height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
					{
						num422 = num425;
						num420 = num423;
						num421 = num424;
						flag18 = true;
					}
				}
				if (!flag18)
				{
					for (int num426 = 0; num426 < 200; num426++)
					{
						if (Main.npc[num426].CanBeChasedBy(this))
						{
							float num427 = Main.npc[num426].position.X + (float)(Main.npc[num426].width / 2);
							float num428 = Main.npc[num426].position.Y + (float)(Main.npc[num426].height / 2);
							float num429 = Math.Abs(base.position.X + (float)(base.width / 2) - num427) + Math.Abs(base.position.Y + (float)(base.height / 2) - num428);
							if (num429 < num422 && Collision.CanHit(base.position, base.width, base.height, Main.npc[num426].position, Main.npc[num426].width, Main.npc[num426].height))
							{
								num422 = num429;
								num420 = num427;
								num421 = num428;
								flag18 = true;
							}
						}
					}
				}
				if (flag18)
				{
					float num430 = num420;
					float num431 = num421;
					num420 -= base.Center.X;
					num421 -= base.Center.Y;
					int num432 = 0;
					if (frameCounter > 0)
					{
						frameCounter--;
					}
					if (frameCounter <= 0)
					{
						int num433 = spriteDirection;
						if (num420 < 0f)
						{
							spriteDirection = -1;
						}
						else
						{
							spriteDirection = 1;
						}
						num432 = ((!(num421 > 0f)) ? ((Math.Abs(num421) > Math.Abs(num420) * 3f) ? 4 : ((Math.Abs(num421) > Math.Abs(num420) * 2f) ? 3 : ((!(Math.Abs(num420) > Math.Abs(num421) * 3f)) ? ((Math.Abs(num420) > Math.Abs(num421) * 2f) ? 1 : 2) : 0))) : 0);
						int num434 = frame;
						if (type == 308)
						{
							frame = num432 * 2;
						}
						else if (type == 377)
						{
							frame = num432;
						}
						if (this.ai[0] > 40f && localAI[1] == 0f && type == 308)
						{
							frame++;
						}
						if (num434 != frame || num433 != spriteDirection)
						{
							frameCounter = 8;
							if (this.ai[0] <= 0f)
							{
								frameCounter = 4;
							}
						}
					}
					if (this.ai[0] <= 0f)
					{
						localAI[1] = 0f;
						this.ai[0] = 60f;
						if (Main.myPlayer == owner)
						{
							float num435 = 6f;
							int num436 = 309;
							if (type == 377)
							{
								num436 = 378;
								num435 = 9f;
							}
							Vector2 vector23 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
							switch (num432)
							{
							case 0:
								vector23.Y += 12f;
								vector23.X += 24 * spriteDirection;
								break;
							case 1:
								vector23.Y += 0f;
								vector23.X += 24 * spriteDirection;
								break;
							case 2:
								vector23.Y -= 2f;
								vector23.X += 24 * spriteDirection;
								break;
							case 3:
								vector23.Y -= 6f;
								vector23.X += 14 * spriteDirection;
								break;
							case 4:
								vector23.Y -= 14f;
								vector23.X += 2 * spriteDirection;
								break;
							}
							if (spriteDirection < 0)
							{
								vector23.X += 10f;
							}
							float num437 = num430 - vector23.X;
							float num438 = num431 - vector23.Y;
							float num439 = (float)Math.Sqrt(num437 * num437 + num438 * num438);
							float num440 = num439;
							num439 = num435 / num439;
							num437 *= num439;
							num438 *= num439;
							int num441 = damage;
							int num442 = NewProjectile(vector23.X, vector23.Y, num437, num438, num436, num441, knockBack, Main.myPlayer);
						}
					}
				}
				else if (this.ai[0] <= 60f && (frame == 1 || frame == 3 || frame == 5 || frame == 7 || frame == 9))
				{
					frame--;
				}
				if (this.ai[0] > 0f)
				{
					this.ai[0] -= 1f;
				}
			}
			else if (aiStyle == 54)
			{
				if (type == 317)
				{
					if (Main.player[Main.myPlayer].dead)
					{
						Main.player[Main.myPlayer].raven = false;
					}
					if (Main.player[Main.myPlayer].raven)
					{
						timeLeft = 2;
					}
				}
				for (int num443 = 0; num443 < 1000; num443++)
				{
					if (num443 != whoAmI && Main.projectile[num443].active && Main.projectile[num443].owner == owner && Main.projectile[num443].type == type && Math.Abs(base.position.X - Main.projectile[num443].position.X) + Math.Abs(base.position.Y - Main.projectile[num443].position.Y) < (float)base.width)
					{
						if (base.position.X < Main.projectile[num443].position.X)
						{
							base.velocity.X -= 0.05f;
						}
						else
						{
							base.velocity.X += 0.05f;
						}
						if (base.position.Y < Main.projectile[num443].position.Y)
						{
							base.velocity.Y -= 0.05f;
						}
						else
						{
							base.velocity.Y += 0.05f;
						}
					}
				}
				float num444 = base.position.X;
				float num445 = base.position.Y;
				float num446 = 900f;
				bool flag19 = false;
				int num447 = 500;
				if (this.ai[1] != 0f || friendly)
				{
					num447 = 1400;
				}
				if (Math.Abs(base.Center.X - Main.player[owner].Center.X) + Math.Abs(base.Center.Y - Main.player[owner].Center.Y) > (float)num447)
				{
					this.ai[0] = 1f;
				}
				if (this.ai[0] == 0f)
				{
					tileCollide = true;
					NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
					if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
					{
						float num448 = ownerMinionAttackTargetNPC2.position.X + (float)(ownerMinionAttackTargetNPC2.width / 2);
						float num449 = ownerMinionAttackTargetNPC2.position.Y + (float)(ownerMinionAttackTargetNPC2.height / 2);
						float num450 = Math.Abs(base.position.X + (float)(base.width / 2) - num448) + Math.Abs(base.position.Y + (float)(base.height / 2) - num449);
						if (num450 < num446 && Collision.CanHit(base.position, base.width, base.height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
						{
							num446 = num450;
							num444 = num448;
							num445 = num449;
							flag19 = true;
						}
					}
					if (!flag19)
					{
						for (int num451 = 0; num451 < 200; num451++)
						{
							if (Main.npc[num451].CanBeChasedBy(this))
							{
								float num452 = Main.npc[num451].position.X + (float)(Main.npc[num451].width / 2);
								float num453 = Main.npc[num451].position.Y + (float)(Main.npc[num451].height / 2);
								float num454 = Math.Abs(base.position.X + (float)(base.width / 2) - num452) + Math.Abs(base.position.Y + (float)(base.height / 2) - num453);
								if (num454 < num446 && Collision.CanHit(base.position, base.width, base.height, Main.npc[num451].position, Main.npc[num451].width, Main.npc[num451].height))
								{
									num446 = num454;
									num444 = num452;
									num445 = num453;
									flag19 = true;
								}
							}
						}
					}
				}
				else
				{
					tileCollide = false;
				}
				if (!flag19)
				{
					friendly = true;
					float num455 = 8f;
					if (this.ai[0] == 1f)
					{
						num455 = 12f;
					}
					Vector2 vector24 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
					float num456 = Main.player[owner].Center.X - vector24.X;
					float num457 = Main.player[owner].Center.Y - vector24.Y - 60f;
					float num458 = (float)Math.Sqrt(num456 * num456 + num457 * num457);
					float num459 = num458;
					if (num458 < 100f && this.ai[0] == 1f && !Collision.SolidCollision(base.position, base.width, base.height))
					{
						this.ai[0] = 0f;
					}
					if (num458 > 2000f)
					{
						base.position.X = Main.player[owner].Center.X - (float)(base.width / 2);
						base.position.Y = Main.player[owner].Center.Y - (float)(base.width / 2);
					}
					if (num458 > 70f)
					{
						num458 = num455 / num458;
						num456 *= num458;
						num457 *= num458;
						base.velocity.X = (base.velocity.X * 20f + num456) / 21f;
						base.velocity.Y = (base.velocity.Y * 20f + num457) / 21f;
					}
					else
					{
						if (base.velocity.X == 0f && base.velocity.Y == 0f)
						{
							base.velocity.X = -0.15f;
							base.velocity.Y = -0.05f;
						}
						base.velocity *= 1.01f;
					}
					friendly = false;
					rotation = base.velocity.X * 0.05f;
					frameCounter++;
					if (frameCounter >= 4)
					{
						frameCounter = 0;
						frame++;
					}
					if (frame > 3)
					{
						frame = 0;
					}
					if ((double)Math.Abs(base.velocity.X) > 0.2)
					{
						spriteDirection = -direction;
					}
					return;
				}
				if (this.ai[1] == -1f)
				{
					this.ai[1] = 17f;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				if (this.ai[1] == 0f)
				{
					friendly = true;
					float num460 = 16f;
					Vector2 vector25 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
					float num461 = num444 - vector25.X;
					float num462 = num445 - vector25.Y;
					float num463 = (float)Math.Sqrt(num461 * num461 + num462 * num462);
					float num464 = num463;
					if (num463 < 100f)
					{
						num460 = 10f;
					}
					num463 = num460 / num463;
					num461 *= num463;
					num462 *= num463;
					base.velocity.X = (base.velocity.X * 14f + num461) / 15f;
					base.velocity.Y = (base.velocity.Y * 14f + num462) / 15f;
				}
				else
				{
					friendly = false;
					if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 10f)
					{
						base.velocity *= 1.05f;
					}
				}
				rotation = base.velocity.X * 0.05f;
				frameCounter++;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
				}
				if (frame < 4)
				{
					frame = 4;
				}
				if (frame > 7)
				{
					frame = 4;
				}
				if ((double)Math.Abs(base.velocity.X) > 0.2)
				{
					spriteDirection = -direction;
				}
			}
			else if (aiStyle == 55)
			{
				frameCounter++;
				if (frameCounter > 0)
				{
					frame++;
					frameCounter = 0;
					if (frame > 2)
					{
						frame = 0;
					}
				}
				if (base.velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
				}
				if (this.ai[0] >= 0f && this.ai[0] < 200f)
				{
					int num465 = (int)this.ai[0];
					if (Main.npc[num465].active)
					{
						float num466 = 8f;
						Vector2 vector26 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
						float num467 = Main.npc[num465].position.X - vector26.X;
						float num468 = Main.npc[num465].position.Y - vector26.Y;
						float num469 = (float)Math.Sqrt(num467 * num467 + num468 * num468);
						float num470 = num469;
						num469 = num466 / num469;
						num467 *= num469;
						num468 *= num469;
						base.velocity.X = (base.velocity.X * 14f + num467) / 15f;
						base.velocity.Y = (base.velocity.Y * 14f + num468) / 15f;
					}
					else
					{
						float num471 = 1000f;
						for (int num472 = 0; num472 < 200; num472++)
						{
							if (Main.npc[num472].CanBeChasedBy(this))
							{
								float num473 = Main.npc[num472].position.X + (float)(Main.npc[num472].width / 2);
								float num474 = Main.npc[num472].position.Y + (float)(Main.npc[num472].height / 2);
								float num475 = Math.Abs(base.position.X + (float)(base.width / 2) - num473) + Math.Abs(base.position.Y + (float)(base.height / 2) - num474);
								if (num475 < num471 && Collision.CanHit(base.position, base.width, base.height, Main.npc[num472].position, Main.npc[num472].width, Main.npc[num472].height))
								{
									num471 = num475;
									this.ai[0] = num472;
								}
							}
						}
					}
					int num476 = 8;
					int num477 = Dust.NewDust(new Vector2(base.position.X + (float)num476, base.position.Y + (float)num476), base.width - num476 * 2, base.height - num476 * 2, 6);
					Dust dust = Main.dust[num477];
					dust.velocity *= 0.5f;
					dust = Main.dust[num477];
					dust.velocity += base.velocity * 0.5f;
					Main.dust[num477].noGravity = true;
					Main.dust[num477].noLight = true;
					Main.dust[num477].scale = 1.4f;
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 56)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					rotation = this.ai[0];
					spriteDirection = -(int)this.ai[1];
				}
				if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 16f)
				{
					base.velocity *= 1.05f;
				}
				if (base.velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.025f * (float)direction;
			}
			else if (aiStyle == 57)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 30f)
				{
					this.ai[0] = 30f;
					base.velocity.Y += 0.25f;
					if (base.velocity.Y > 16f)
					{
						base.velocity.Y = 16f;
					}
					base.velocity.X *= 0.995f;
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (owner != Main.myPlayer)
				{
					return;
				}
				localAI[0] += 1f;
				if (!(localAI[0] >= 4f))
				{
					return;
				}
				localAI[0] = 0f;
				int num478 = 0;
				for (int num479 = 0; num479 < 1000; num479++)
				{
					if (Main.projectile[num479].active && Main.projectile[num479].owner == owner && Main.projectile[num479].type == 344)
					{
						num478++;
					}
				}
				float num480 = (float)damage * 0.8f;
				float num481 = 1f;
				if (num478 > 100)
				{
					num481 = num478 - 100;
					num481 = 1f - num481 / 100f;
					num480 *= num481;
				}
				if (num478 > 100)
				{
					localAI[0] -= 1f;
				}
				if (num478 > 120)
				{
					localAI[0] -= 1f;
				}
				if (num478 > 140)
				{
					localAI[0] -= 1f;
				}
				if (num478 > 150)
				{
					localAI[0] -= 1f;
				}
				if (num478 > 160)
				{
					localAI[0] -= 1f;
				}
				if (num478 > 165)
				{
					localAI[0] -= 1f;
				}
				if (num478 > 170)
				{
					localAI[0] -= 2f;
				}
				if (num478 > 175)
				{
					localAI[0] -= 3f;
				}
				if (num478 > 180)
				{
					localAI[0] -= 4f;
				}
				if (num478 > 185)
				{
					localAI[0] -= 5f;
				}
				if (num478 > 190)
				{
					localAI[0] -= 6f;
				}
				if (num478 > 195)
				{
					localAI[0] -= 7f;
				}
				if (num480 > (float)damage * 0.1f)
				{
					NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 344, (int)num480, knockBack * 0.55f, owner, 0f, Main.rand.Next(3));
				}
			}
			else if (aiStyle == 58)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (this.ai[0] == 0f)
				{
					frame = 0;
					this.ai[1] += 1f;
					if (this.ai[1] > 30f)
					{
						base.velocity.Y += 0.1f;
					}
					if (base.velocity.Y >= 0f)
					{
						this.ai[0] = 1f;
					}
				}
				if (this.ai[0] == 1f)
				{
					frame = 1;
					base.velocity.Y += 0.1f;
					if (base.velocity.Y > 3f)
					{
						base.velocity.Y = 3f;
					}
					base.velocity.X *= 0.99f;
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
			}
			else if (aiStyle == 59)
			{
				this.ai[1] += 1f;
				if (this.ai[1] >= 60f)
				{
					friendly = true;
					int num482 = (int)this.ai[0];
					if (!Main.npc[num482].active)
					{
						num482 = -1;
						int[] array2 = new int[200];
						int num483 = 0;
						for (int num484 = 0; num484 < 200; num484++)
						{
							if (Main.npc[num484].CanBeChasedBy(this))
							{
								float num485 = Math.Abs(Main.npc[num484].position.X + (float)(Main.npc[num484].width / 2) - base.position.X + (float)(base.width / 2)) + Math.Abs(Main.npc[num484].position.Y + (float)(Main.npc[num484].height / 2) - base.position.Y + (float)(base.height / 2));
								if (num485 < 800f)
								{
									array2[num483] = num484;
									num483++;
								}
							}
						}
						if (num483 == 0)
						{
							Kill();
							return;
						}
						num482 = array2[Main.rand.Next(num483)];
						this.ai[0] = num482;
					}
					float num486 = 4f;
					Vector2 vector27 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
					float num487 = Main.npc[num482].Center.X - vector27.X;
					float num488 = Main.npc[num482].Center.Y - vector27.Y;
					float num489 = (float)Math.Sqrt(num487 * num487 + num488 * num488);
					float num490 = num489;
					num489 = num486 / num489;
					num487 *= num489;
					num488 *= num489;
					int num491 = 30;
					base.velocity.X = (base.velocity.X * (float)(num491 - 1) + num487) / (float)num491;
					base.velocity.Y = (base.velocity.Y * (float)(num491 - 1) + num488) / (float)num491;
				}
				for (int num492 = 0; num492 < 5; num492++)
				{
					float num493 = base.velocity.X * 0.2f * (float)num492;
					float num494 = (0f - base.velocity.Y * 0.2f) * (float)num492;
					int num495 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 175, 0f, 0f, 100, default(Color), 1.3f);
					Main.dust[num495].noGravity = true;
					Dust dust = Main.dust[num495];
					dust.velocity *= 0f;
					Main.dust[num495].position.X -= num493;
					Main.dust[num495].position.Y -= num494;
				}
			}
			else if (aiStyle == 60)
			{
				scale -= 0.015f;
				if (scale <= 0f)
				{
					base.velocity *= 5f;
					oldVelocity = base.velocity;
					Kill();
				}
				if (this.ai[0] > 3f)
				{
					int num496 = 103;
					if (type == 406)
					{
						num496 = 137;
					}
					if (owner == Main.myPlayer)
					{
						Rectangle rectangle4 = new Rectangle((int)base.position.X, (int)base.position.Y, base.width, base.height);
						for (int num497 = 0; num497 < 200; num497++)
						{
							if (Main.npc[num497].active && !Main.npc[num497].dontTakeDamage && Main.npc[num497].lifeMax > 1)
							{
								Rectangle value9 = new Rectangle((int)Main.npc[num497].position.X, (int)Main.npc[num497].position.Y, Main.npc[num497].width, Main.npc[num497].height);
								if (rectangle4.Intersects(value9))
								{
									Main.npc[num497].AddBuff(num496, 1500);
									Kill();
								}
							}
						}
						for (int num498 = 0; num498 < 255; num498++)
						{
							if (num498 != owner && Main.player[num498].active && !Main.player[num498].dead)
							{
								Rectangle value10 = new Rectangle((int)Main.player[num498].position.X, (int)Main.player[num498].position.Y, Main.player[num498].width, Main.player[num498].height);
								if (rectangle4.Intersects(value10))
								{
									Main.player[num498].AddBuff(num496, 1500, quiet: false);
									Kill();
								}
							}
						}
					}
					this.ai[0] += this.ai[1];
					if (this.ai[0] > 30f)
					{
						base.velocity.Y += 0.1f;
					}
					if (type == 358)
					{
						for (int num499 = 0; num499 < 1; num499++)
						{
							for (int num500 = 0; num500 < 6; num500++)
							{
								float num501 = base.velocity.X / 6f * (float)num500;
								float num502 = base.velocity.Y / 6f * (float)num500;
								int num503 = 6;
								int num504 = Dust.NewDust(new Vector2(base.position.X + (float)num503, base.position.Y + (float)num503), base.width - num503 * 2, base.height - num503 * 2, 211, 0f, 0f, 75, default(Color), 1.2f);
								Dust dust;
								if (Main.rand.Next(2) == 0)
								{
									dust = Main.dust[num504];
									dust.alpha += 25;
								}
								if (Main.rand.Next(2) == 0)
								{
									dust = Main.dust[num504];
									dust.alpha += 25;
								}
								if (Main.rand.Next(2) == 0)
								{
									dust = Main.dust[num504];
									dust.alpha += 25;
								}
								Main.dust[num504].noGravity = true;
								dust = Main.dust[num504];
								dust.velocity *= 0.3f;
								dust = Main.dust[num504];
								dust.velocity += base.velocity * 0.5f;
								Main.dust[num504].position = base.Center;
								Main.dust[num504].position.X -= num501;
								Main.dust[num504].position.Y -= num502;
								dust = Main.dust[num504];
								dust.velocity *= 0.2f;
							}
							if (Main.rand.Next(4) == 0)
							{
								int num505 = 6;
								int num506 = Dust.NewDust(new Vector2(base.position.X + (float)num505, base.position.Y + (float)num505), base.width - num505 * 2, base.height - num505 * 2, 211, 0f, 0f, 75, default(Color), 0.65f);
								Dust dust = Main.dust[num506];
								dust.velocity *= 0.5f;
								dust = Main.dust[num506];
								dust.velocity += base.velocity * 0.5f;
							}
						}
					}
					if (type != 406)
					{
						return;
					}
					int num507 = 175;
					Color newColor2 = new Color(0, 80, 255, 100);
					for (int num508 = 0; num508 < 6; num508++)
					{
						Vector2 vector28 = base.velocity * num508 / 6f;
						int num509 = 6;
						int num510 = Dust.NewDust(base.position + Vector2.One * 6f, base.width - num509 * 2, base.height - num509 * 2, 4, 0f, 0f, num507, newColor2, 1.2f);
						Dust dust;
						if (Main.rand.Next(2) == 0)
						{
							dust = Main.dust[num510];
							dust.alpha += 25;
						}
						if (Main.rand.Next(2) == 0)
						{
							dust = Main.dust[num510];
							dust.alpha += 25;
						}
						if (Main.rand.Next(2) == 0)
						{
							dust = Main.dust[num510];
							dust.alpha += 25;
						}
						Main.dust[num510].noGravity = true;
						dust = Main.dust[num510];
						dust.velocity *= 0.3f;
						dust = Main.dust[num510];
						dust.velocity += base.velocity * 0.5f;
						Main.dust[num510].position = base.Center;
						Main.dust[num510].position.X -= vector28.X;
						Main.dust[num510].position.Y -= vector28.Y;
						dust = Main.dust[num510];
						dust.velocity *= 0.2f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num511 = 6;
						int num512 = Dust.NewDust(base.position + Vector2.One * 6f, base.width - num511 * 2, base.height - num511 * 2, 4, 0f, 0f, num507, newColor2, 1.2f);
						Dust dust = Main.dust[num512];
						dust.velocity *= 0.5f;
						dust = Main.dust[num512];
						dust.velocity += base.velocity * 0.5f;
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
			}
			else if (aiStyle == 61)
			{
				AI_061_FishingBobber();
			}
			else if (aiStyle == 62)
			{
				AI_062();
			}
			else if (aiStyle == 63)
			{
				if (!Main.player[owner].active)
				{
					active = false;
					return;
				}
				Vector2 value11 = base.position;
				bool flag20 = false;
				float num513 = 500f;
				for (int num514 = 0; num514 < 200; num514++)
				{
					NPC nPC = Main.npc[num514];
					if (nPC.CanBeChasedBy(this))
					{
						float num515 = Vector2.Distance(nPC.Center, base.Center);
						if (((Vector2.Distance(base.Center, value11) > num515 && num515 < num513) || !flag20) && Collision.CanHit(base.position, base.width, base.height, nPC.position, nPC.width, nPC.height))
						{
							num513 = num515;
							value11 = nPC.Center;
							flag20 = true;
						}
					}
				}
				if (!flag20)
				{
					base.velocity.X *= 0.95f;
				}
				else
				{
					float num516 = 5f;
					float num517 = 0.08f;
					if (base.velocity.Y == 0f)
					{
						bool flag21 = false;
						if (base.Center.Y - 50f > value11.Y)
						{
							flag21 = true;
						}
						if (flag21)
						{
							base.velocity.Y = -6f;
						}
					}
					else
					{
						num516 = 8f;
						num517 = 0.12f;
					}
					base.velocity.X += (float)Math.Sign(value11.X - base.Center.X) * num517;
					if (base.velocity.X < 0f - num516)
					{
						base.velocity.X = 0f - num516;
					}
					if (base.velocity.X > num516)
					{
						base.velocity.X = num516;
					}
				}
				float num518 = 0f;
				Collision.StepUp(base.position, base.velocity, base.width, base.height, num518, gfxOffY);
				if (base.velocity.Y != 0f)
				{
					frame = 3;
				}
				else
				{
					if (Math.Abs(base.velocity.X) > 0.2f)
					{
						frameCounter++;
					}
					if (frameCounter >= 9)
					{
						frameCounter = 0;
					}
					if (frameCounter >= 6)
					{
						frame = 2;
					}
					else if (frameCounter >= 3)
					{
						frame = 1;
					}
					else
					{
						frame = 0;
					}
				}
				if (base.velocity.X != 0f)
				{
					direction = Math.Sign(base.velocity.X);
				}
				spriteDirection = -direction;
				base.velocity.Y += 0.2f;
				if (base.velocity.Y > 16f)
				{
					base.velocity.Y = 16f;
				}
			}
			else if (aiStyle == 64)
			{
				int num519 = 10;
				int num520 = 15;
				float num521 = 1f;
				int num522 = 150;
				int num523 = 42;
				if (type == 386)
				{
					num519 = 16;
					num520 = 16;
					num521 = 1.5f;
				}
				if (base.velocity.X != 0f)
				{
					direction = (spriteDirection = -Math.Sign(base.velocity.X));
				}
				frameCounter++;
				if (frameCounter > 2)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 6)
				{
					frame = 0;
				}
				if (localAI[0] == 0f && Main.myPlayer == owner)
				{
					localAI[0] = 1f;
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					scale = ((float)(num519 + num520) - this.ai[1]) * num521 / (float)(num520 + num519);
					base.width = (int)((float)num522 * scale);
					base.height = (int)((float)num523 * scale);
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					netUpdate = true;
				}
				if (this.ai[1] != -1f)
				{
					scale = ((float)(num519 + num520) - this.ai[1]) * num521 / (float)(num520 + num519);
					base.width = (int)((float)num522 * scale);
					base.height = (int)((float)num523 * scale);
				}
				if (!Collision.SolidCollision(base.position, base.width, base.height))
				{
					alpha -= 30;
					if (alpha < 60)
					{
						alpha = 60;
					}
					if (type == 386 && alpha < 100)
					{
						alpha = 100;
					}
				}
				else
				{
					alpha += 30;
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				if (this.ai[0] > 0f)
				{
					this.ai[0]--;
				}
				if (this.ai[0] == 1f && this.ai[1] > 0f && owner == Main.myPlayer)
				{
					netUpdate = true;
					Vector2 center2 = base.Center;
					center2.Y -= (float)num523 * scale / 2f;
					float num524 = ((float)(num519 + num520) - this.ai[1] + 1f) * num521 / (float)(num520 + num519);
					center2.Y -= (float)num523 * num524 / 2f;
					center2.Y += 2f;
					NewProjectile(center2.X, center2.Y, base.velocity.X, base.velocity.Y, type, damage, knockBack, owner, 10f, this.ai[1] - 1f);
					int num525 = 4;
					if (type == 386)
					{
						num525 = 2;
					}
					if ((int)this.ai[1] % num525 == 0 && this.ai[1] != 0f)
					{
						int num526 = 372;
						if (type == 386)
						{
							num526 = 373;
						}
						int num527 = NPC.NewNPC((int)center2.X, (int)center2.Y, num526);
						Main.npc[num527].velocity = base.velocity;
						Main.npc[num527].netUpdate = true;
						if (type == 386)
						{
							Main.npc[num527].ai[2] = base.width;
							Main.npc[num527].ai[3] = -1.5f;
						}
					}
				}
				if (this.ai[0] <= 0f)
				{
					float num528 = (float)Math.PI / 30f;
					float num529 = (float)base.width / 5f;
					if (type == 386)
					{
						num529 *= 2f;
					}
					float num530 = (float)(Math.Cos(num528 * (0f - this.ai[0])) - 0.5) * num529;
					base.position.X -= num530 * (float)(-direction);
					this.ai[0]--;
					num530 = (float)(Math.Cos(num528 * (0f - this.ai[0])) - 0.5) * num529;
					base.position.X += num530 * (float)(-direction);
				}
			}
			else if (aiStyle == 65)
			{
				if (this.ai[1] > 0f)
				{
					int num531 = (int)this.ai[1] - 1;
					if (num531 < 255)
					{
						localAI[0]++;
						if (localAI[0] > 10f)
						{
							int num532 = 6;
							for (int num533 = 0; num533 < num532; num533++)
							{
								Vector2 spinningpoint = Vector2.Normalize(base.velocity) * new Vector2((float)base.width / 2f, base.height) * 0.75f;
								spinningpoint = spinningpoint.RotatedBy((double)(num533 - (num532 / 2 - 1)) * Math.PI / (double)num532) + base.Center;
								Vector2 value12 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
								int num534 = Dust.NewDust(spinningpoint + value12, 0, 0, 172, value12.X * 2f, value12.Y * 2f, 100, default(Color), 1.4f);
								Main.dust[num534].noGravity = true;
								Main.dust[num534].noLight = true;
								Dust dust = Main.dust[num534];
								dust.velocity /= 4f;
								dust = Main.dust[num534];
								dust.velocity -= base.velocity;
							}
							alpha -= 5;
							if (alpha < 100)
							{
								alpha = 100;
							}
							rotation += base.velocity.X * 0.1f;
							frame = (int)(localAI[0] / 3f) % 3;
						}
						Vector2 value13 = Main.player[num531].Center - base.Center;
						float num535 = 4f;
						num535 += localAI[0] / 20f;
						base.velocity = Vector2.Normalize(value13) * num535;
						if (value13.Length() < 50f)
						{
							Kill();
						}
					}
				}
				else
				{
					float num536 = (float)Math.PI / 15f;
					float num537 = 4f;
					float num538 = (float)(Math.Cos(num536 * this.ai[0]) - 0.5) * num537;
					base.velocity.Y -= num538;
					this.ai[0]++;
					num538 = (float)(Math.Cos(num536 * this.ai[0]) - 0.5) * num537;
					base.velocity.Y += num538;
					localAI[0]++;
					if (localAI[0] > 10f)
					{
						alpha -= 5;
						if (alpha < 100)
						{
							alpha = 100;
						}
						rotation += base.velocity.X * 0.1f;
						frame = (int)(localAI[0] / 3f) % 3;
					}
				}
				if (wet)
				{
					base.position.Y -= 16f;
					Kill();
				}
			}
			else if (aiStyle == 66)
			{
				float num539 = 0f;
				float num540 = 0f;
				float num541 = 0f;
				float num542 = 0f;
				if (type == 387 || type == 388)
				{
					num539 = 700f;
					num540 = 800f;
					num541 = 1200f;
					num542 = 150f;
					if (Main.player[owner].dead)
					{
						Main.player[owner].twinsMinion = false;
					}
					if (Main.player[owner].twinsMinion)
					{
						timeLeft = 2;
					}
				}
				if (type == 533)
				{
					num539 = 1500f;
					num540 = 900f;
					num541 = 1500f;
					num542 = 450f;
					if (Main.player[owner].dead)
					{
						Main.player[owner].DeadlySphereMinion = false;
					}
					if (Main.player[owner].DeadlySphereMinion)
					{
						timeLeft = 2;
					}
				}
				float num543 = 0.05f;
				for (int num544 = 0; num544 < 1000; num544++)
				{
					bool flag22 = (Main.projectile[num544].type == 387 || Main.projectile[num544].type == 388) && (type == 387 || type == 388);
					if (!flag22)
					{
						flag22 = type == 533 && Main.projectile[num544].type == 533;
					}
					if (num544 != whoAmI && Main.projectile[num544].active && Main.projectile[num544].owner == owner && flag22 && Math.Abs(base.position.X - Main.projectile[num544].position.X) + Math.Abs(base.position.Y - Main.projectile[num544].position.Y) < (float)base.width)
					{
						if (base.position.X < Main.projectile[num544].position.X)
						{
							base.velocity.X -= num543;
						}
						else
						{
							base.velocity.X += num543;
						}
						if (base.position.Y < Main.projectile[num544].position.Y)
						{
							base.velocity.Y -= num543;
						}
						else
						{
							base.velocity.Y += num543;
						}
					}
				}
				if (type == 533)
				{
					if ((int)this.ai[0] % 3 != 2)
					{
						Lighting.AddLight(base.Center, 0.8f, 0.3f, 0.1f);
					}
					else
					{
						Lighting.AddLight(base.Center, 0.3f, 0.5f, 0.7f);
					}
				}
				bool flag23 = false;
				if (this.ai[0] == 2f && type == 388)
				{
					this.ai[1]++;
					extraUpdates = 1;
					rotation = base.velocity.ToRotation() + (float)Math.PI;
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 2)
					{
						frame = 0;
					}
					if (this.ai[1] > 40f)
					{
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						extraUpdates = 0;
						numUpdates = 0;
						netUpdate = true;
					}
					else
					{
						flag23 = true;
					}
				}
				if (type == 533 && this.ai[0] >= 3f && this.ai[0] <= 5f)
				{
					int num545 = 2;
					flag23 = true;
					base.velocity *= 0.9f;
					this.ai[1]++;
					int num546 = (int)this.ai[1] / num545 + (int)(this.ai[0] - 3f) * 8;
					if (num546 < 4)
					{
						frame = 17 + num546;
					}
					else if (num546 < 5)
					{
						frame = 0;
					}
					else if (num546 < 8)
					{
						frame = 1 + num546 - 5;
					}
					else if (num546 < 11)
					{
						frame = 11 - num546;
					}
					else if (num546 < 12)
					{
						frame = 0;
					}
					else if (num546 < 16)
					{
						frame = num546 - 2;
					}
					else if (num546 < 20)
					{
						frame = 29 - num546;
					}
					else if (num546 < 21)
					{
						frame = 0;
					}
					else
					{
						frame = num546 - 4;
					}
					if (this.ai[1] > (float)(num545 * 8))
					{
						this.ai[0] -= 3f;
						this.ai[1] = 0f;
					}
				}
				if (type == 533 && this.ai[0] >= 6f && this.ai[0] <= 8f)
				{
					this.ai[1]++;
					MaxUpdates = 2;
					if (this.ai[0] == 7f)
					{
						rotation = base.velocity.ToRotation() + (float)Math.PI;
					}
					else
					{
						rotation += (float)Math.PI / 6f;
					}
					int num547 = 0;
					switch ((int)this.ai[0])
					{
					case 6:
						frame = 5;
						num547 = 40;
						break;
					case 7:
						frame = 13;
						num547 = 30;
						break;
					case 8:
						frame = 17;
						num547 = 30;
						break;
					}
					if (this.ai[1] > (float)num547)
					{
						this.ai[1] = 1f;
						this.ai[0] -= 6f;
						localAI[0]++;
						extraUpdates = 0;
						numUpdates = 0;
						netUpdate = true;
					}
					else
					{
						flag23 = true;
					}
					if (this.ai[0] == 8f)
					{
						for (int num548 = 0; num548 < 4; num548++)
						{
							int num549 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
							int num550 = Dust.NewDust(base.Center, 0, 0, num549);
							Dust dust9 = Main.dust[num550];
							Vector2 value14 = Vector2.One.RotatedBy((float)num548 * ((float)Math.PI / 2f)).RotatedBy(rotation);
							dust9.position = base.Center + value14 * 10f;
							dust9.velocity = value14 * 1f;
							dust9.scale = 0.6f + Main.rand.NextFloat() * 0.5f;
							dust9.noGravity = true;
						}
					}
				}
				if (flag23)
				{
					return;
				}
				Vector2 vector29 = base.position;
				bool flag24 = false;
				if (this.ai[0] != 1f && (type == 387 || type == 388))
				{
					tileCollide = true;
				}
				if (type == 533 && this.ai[0] < 9f)
				{
					tileCollide = true;
				}
				if (tileCollide && WorldGen.SolidTile(Framing.GetTileSafely((int)base.Center.X / 16, (int)base.Center.Y / 16)))
				{
					tileCollide = false;
				}
				NPC ownerMinionAttackTargetNPC3 = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC3 != null && ownerMinionAttackTargetNPC3.CanBeChasedBy(this))
				{
					float num551 = Vector2.Distance(ownerMinionAttackTargetNPC3.Center, base.Center);
					if (((Vector2.Distance(base.Center, vector29) > num551 && num551 < num539) || !flag24) && Collision.CanHitLine(base.position, base.width, base.height, ownerMinionAttackTargetNPC3.position, ownerMinionAttackTargetNPC3.width, ownerMinionAttackTargetNPC3.height))
					{
						num539 = num551;
						vector29 = ownerMinionAttackTargetNPC3.Center;
						flag24 = true;
					}
				}
				if (!flag24)
				{
					for (int num552 = 0; num552 < 200; num552++)
					{
						NPC nPC2 = Main.npc[num552];
						if (nPC2.CanBeChasedBy(this))
						{
							float num553 = Vector2.Distance(nPC2.Center, base.Center);
							if (((Vector2.Distance(base.Center, vector29) > num553 && num553 < num539) || !flag24) && Collision.CanHitLine(base.position, base.width, base.height, nPC2.position, nPC2.width, nPC2.height))
							{
								num539 = num553;
								vector29 = nPC2.Center;
								flag24 = true;
							}
						}
					}
				}
				float num554 = num540;
				if (flag24)
				{
					num554 = num541;
				}
				Player player4 = Main.player[owner];
				if (Vector2.Distance(player4.Center, base.Center) > num554)
				{
					if (type == 387 || type == 388)
					{
						this.ai[0] = 1f;
					}
					if (type == 533 && this.ai[0] < 9f)
					{
						this.ai[0] += 3 * (3 - (int)(this.ai[0] / 3f));
					}
					tileCollide = false;
					netUpdate = true;
				}
				if ((type == 388 || type == 387) && flag24 && this.ai[0] == 0f)
				{
					Vector2 value15 = vector29 - base.Center;
					float num555 = value15.Length();
					value15.Normalize();
					if (num555 > 200f)
					{
						float num556 = 6f;
						if (type == 388)
						{
							num556 = 8f;
						}
						value15 *= num556;
						base.velocity = (base.velocity * 40f + value15) / 41f;
					}
					else
					{
						float num557 = 4f;
						value15 *= 0f - num557;
						base.velocity = (base.velocity * 40f + value15) / 41f;
					}
				}
				else
				{
					bool flag25 = false;
					if (!flag25)
					{
						flag25 = this.ai[0] == 1f && (type == 387 || type == 388);
					}
					if (!flag25)
					{
						flag25 = this.ai[0] >= 9f && type == 533;
					}
					float num558 = 6f;
					if (type == 533)
					{
						num558 = 12f;
					}
					if (flag25)
					{
						num558 = 15f;
					}
					Vector2 center3 = base.Center;
					Vector2 vector30 = player4.Center - center3 + new Vector2(0f, -60f);
					float num559 = vector30.Length();
					float num560 = num559;
					if (num559 > 200f && num558 < 8f)
					{
						num558 = 8f;
					}
					if (num559 < num542 && flag25 && !Collision.SolidCollision(base.position, base.width, base.height))
					{
						if (type == 387 || type == 388)
						{
							this.ai[0] = 0f;
						}
						if (type == 533)
						{
							this.ai[0] -= 9f;
						}
						netUpdate = true;
					}
					if (num559 > 2000f)
					{
						base.position.X = Main.player[owner].Center.X - (float)(base.width / 2);
						base.position.Y = Main.player[owner].Center.Y - (float)(base.height / 2);
						netUpdate = true;
					}
					if (num559 > 70f)
					{
						Vector2 vector31 = vector30;
						vector30.Normalize();
						vector30 *= num558;
						base.velocity = (base.velocity * 40f + vector30) / 41f;
					}
					else if (base.velocity.X == 0f && base.velocity.Y == 0f)
					{
						base.velocity.X = -0.15f;
						base.velocity.Y = -0.05f;
					}
				}
				if (type == 388)
				{
					rotation = base.velocity.ToRotation() + (float)Math.PI;
				}
				if (type == 387)
				{
					if (flag24)
					{
						rotation = (vector29 - base.Center).ToRotation() + (float)Math.PI;
					}
					else
					{
						rotation = base.velocity.ToRotation() + (float)Math.PI;
					}
				}
				if (type == 533 && (this.ai[0] < 3f || this.ai[0] >= 9f))
				{
					rotation += base.velocity.X * 0.04f;
				}
				if (type == 388 || type == 387)
				{
					frameCounter++;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 2)
					{
						frame = 0;
					}
				}
				else if (type == 533)
				{
					if (this.ai[0] < 3f || this.ai[0] >= 9f)
					{
						frameCounter++;
						if (frameCounter >= 24)
						{
							frameCounter = 0;
						}
						int num561 = frameCounter / 4;
						frame = 4 + num561;
						switch ((int)this.ai[0])
						{
						case 0:
						case 9:
							frame = 4 + num561;
							break;
						case 1:
						case 10:
							num561 = frameCounter / 8;
							frame = 14 + num561;
							break;
						case 2:
						case 11:
							num561 = frameCounter / 3;
							if (num561 >= 4)
							{
								num561 -= 4;
							}
							frame = 17 + num561;
							break;
						}
					}
					if (this.ai[0] == 2f && Main.rand.Next(2) == 0)
					{
						for (int num562 = 0; num562 < 4; num562++)
						{
							if (Main.rand.Next(2) != 0)
							{
								int num563 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
								int num564 = Dust.NewDust(base.Center, 0, 0, num563);
								Dust dust10 = Main.dust[num564];
								Vector2 value16 = Vector2.One.RotatedBy((float)num562 * ((float)Math.PI / 2f)).RotatedBy(rotation);
								dust10.position = base.Center + value16 * 10f;
								dust10.velocity = value16 * 1f;
								dust10.scale = 0.3f + Main.rand.NextFloat() * 0.5f;
								dust10.noGravity = true;
								dust10.customData = this;
								dust10.noLight = true;
							}
						}
					}
				}
				if (this.ai[1] > 0f && (type == 387 || type == 388))
				{
					this.ai[1] += Main.rand.Next(1, 4);
				}
				if (this.ai[1] > 90f && type == 387)
				{
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (this.ai[1] > 40f && type == 388)
				{
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (this.ai[1] > 0f && type == 533)
				{
					this.ai[1]++;
					int num565 = 10;
					if (this.ai[1] > (float)num565)
					{
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				if (this.ai[0] == 0f && (type == 387 || type == 388))
				{
					if (type == 387)
					{
						float num566 = 8f;
						int num567 = 389;
						if (flag24 && this.ai[1] == 0f)
						{
							this.ai[1]++;
							if (Main.myPlayer == owner && Collision.CanHitLine(base.position, base.width, base.height, vector29, 0, 0))
							{
								Vector2 vector32 = vector29 - base.Center;
								vector32.Normalize();
								vector32 *= num566;
								int num568 = NewProjectile(base.Center.X, base.Center.Y, vector32.X, vector32.Y, num567, (int)((float)damage * 0.8f), 0f, Main.myPlayer);
								Main.projectile[num568].timeLeft = 300;
								netUpdate = true;
							}
						}
					}
					if (type == 388 && this.ai[1] == 0f && flag24 && num539 < 500f)
					{
						this.ai[1]++;
						if (Main.myPlayer == owner)
						{
							this.ai[0] = 2f;
							Vector2 value17 = vector29 - base.Center;
							value17.Normalize();
							base.velocity = value17 * 8f;
							netUpdate = true;
						}
					}
				}
				else
				{
					if (type != 533 || !(this.ai[0] < 3f))
					{
						return;
					}
					int num569 = 0;
					switch ((int)this.ai[0])
					{
					case 0:
					case 3:
					case 6:
						num569 = 400;
						break;
					case 1:
					case 4:
					case 7:
						num569 = 400;
						break;
					case 2:
					case 5:
					case 8:
						num569 = 600;
						break;
					}
					if (!(this.ai[1] == 0f && flag24) || !(num539 < (float)num569))
					{
						return;
					}
					this.ai[1]++;
					if (Main.myPlayer != owner)
					{
						return;
					}
					if (localAI[0] >= 3f)
					{
						this.ai[0] += 4f;
						if (this.ai[0] == 6f)
						{
							this.ai[0] = 3f;
						}
						localAI[0] = 0f;
					}
					else
					{
						this.ai[0] += 6f;
						Vector2 value18 = vector29 - base.Center;
						value18.Normalize();
						float scaleFactor = ((this.ai[0] == 8f) ? 12f : 10f);
						base.velocity = value18 * scaleFactor;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 67)
			{
				AI_067_FreakingPirates();
			}
			else if (aiStyle == 68)
			{
				rotation += 0.25f * (float)direction;
				bool flag26 = type == 399;
				bool flag27 = type == 669;
				this.ai[0] += 1f;
				if (this.ai[0] >= 3f)
				{
					alpha -= 40;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (this.ai[0] >= 15f)
				{
					base.velocity.Y += 0.2f;
					if (base.velocity.Y > 16f)
					{
						base.velocity.Y = 16f;
					}
					base.velocity.X *= 0.99f;
				}
				if (alpha == 0)
				{
					if (flag26)
					{
						Vector2 vector33 = new Vector2(4f, -8f);
						float num570 = rotation;
						if (direction == -1)
						{
							vector33.X = -4f;
						}
						vector33 = vector33.RotatedBy(num570);
						for (int num571 = 0; num571 < 1; num571++)
						{
							int num572 = Dust.NewDust(base.Center + vector33 - Vector2.One * 5f, 4, 4, 6);
							Main.dust[num572].scale = 1.5f;
							Main.dust[num572].noGravity = true;
							Main.dust[num572].velocity = Main.dust[num572].velocity * 0.25f + Vector2.Normalize(vector33) * 1f;
							Main.dust[num572].velocity = Main.dust[num572].velocity.RotatedBy(-(float)Math.PI / 2f * (float)direction);
						}
					}
					if (flag27)
					{
						for (int num573 = 0; num573 < 2; num573++)
						{
							Vector2 spinningpoint2 = new Vector2(MathHelper.Lerp(-8f, 8f, Main.rand.NextFloat()), -4f);
							float num574 = rotation;
							spinningpoint2 = spinningpoint2.RotatedBy(num574);
							int num575 = Dust.NewDust(base.Center + spinningpoint2 - Vector2.One * 5f, 4, 4, 4);
							Main.dust[num575].scale = 0.8f - Main.rand.NextFloat() * 0.2f;
							Main.dust[num575].velocity = Main.dust[num575].velocity * 0.25f + Vector2.Normalize(spinningpoint2) * 1f;
							Main.dust[num575].velocity = Main.dust[num575].velocity.RotatedBy(-(float)Math.PI / 2f * (float)direction);
							Main.dust[num575].color = Utils.SelectRandom<Color>(Main.rand, new Color(255, 255, 255, 110), new Color(245, 200, 30, 110));
						}
					}
				}
				spriteDirection = direction;
				if (timeLeft <= 3)
				{
					tileCollide = false;
					alpha = 255;
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 80;
					base.height = 80;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					knockBack = 8f;
				}
				if (wet && timeLeft > 3)
				{
					timeLeft = 3;
				}
			}
			else if (aiStyle == 69)
			{
				Vector2 vector34 = Main.player[owner].Center - base.Center;
				rotation = vector34.ToRotation() - 1.57f;
				if (Main.player[owner].dead)
				{
					Kill();
					return;
				}
				Main.player[owner].SetDummyItemTime(10);
				_ = vector34.X;
				_ = 0f;
				if (vector34.X < 0f)
				{
					Main.player[owner].ChangeDir(1);
					direction = 1;
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
					direction = -1;
				}
				Main.player[owner].itemRotation = (vector34 * -1f * direction).ToRotation();
				spriteDirection = ((!(vector34.X > 0f)) ? 1 : (-1));
				if (this.ai[0] == 0f && vector34.Length() > 400f)
				{
					this.ai[0] = 1f;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					float num576 = vector34.Length();
					if (num576 > 1500f)
					{
						Kill();
						return;
					}
					if (num576 > 600f)
					{
						this.ai[0] = 2f;
					}
					tileCollide = false;
					float num577 = 20f;
					if (this.ai[0] == 2f)
					{
						num577 = 40f;
					}
					base.velocity = Vector2.Normalize(vector34) * num577;
					if (vector34.Length() < num577)
					{
						Kill();
						return;
					}
				}
				this.ai[1]++;
				if (this.ai[1] > 5f)
				{
					alpha = 0;
				}
				if ((int)this.ai[1] % 4 == 0 && owner == Main.myPlayer)
				{
					Vector2 spinningpoint3 = vector34 * -1f;
					spinningpoint3.Normalize();
					spinningpoint3 *= (float)Main.rand.Next(45, 65) * 0.1f;
					spinningpoint3 = spinningpoint3.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
					NewProjectile(base.Center.X, base.Center.Y, spinningpoint3.X, spinningpoint3.Y, 405, damage, knockBack, owner, -10f);
				}
			}
			else if (aiStyle == 70)
			{
				if (this.ai[0] == 0f)
				{
					float num578 = 500f;
					int num579 = -1;
					for (int num580 = 0; num580 < 200; num580++)
					{
						NPC nPC3 = Main.npc[num580];
						if (nPC3.CanBeChasedBy(this) && Collision.CanHit(base.position, base.width, base.height, nPC3.position, nPC3.width, nPC3.height))
						{
							float num581 = (nPC3.Center - base.Center).Length();
							if (num581 < num578)
							{
								num579 = num580;
								num578 = num581;
							}
						}
					}
					this.ai[0] = num579 + 1;
					if (this.ai[0] == 0f)
					{
						this.ai[0] = -15f;
					}
					if (this.ai[0] > 0f)
					{
						float scaleFactor2 = (float)Main.rand.Next(35, 75) / 30f;
						base.velocity = (base.velocity * 20f + Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center + new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101))) * scaleFactor2) / 21f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] > 0f)
				{
					Vector2 value19 = Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center);
					base.velocity = (base.velocity * 40f + value19 * 12f) / 41f;
				}
				else
				{
					this.ai[0]++;
					alpha -= 25;
					if (alpha < 50)
					{
						alpha = 50;
					}
					base.velocity *= 0.95f;
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = (float)Main.rand.Next(80, 121) / 100f;
					netUpdate = true;
				}
				scale = this.ai[1];
			}
			else if (aiStyle == 71)
			{
				localAI[1]++;
				if (localAI[1] > 10f && Main.rand.Next(3) == 0)
				{
					int num582 = 6;
					for (int num583 = 0; num583 < num582; num583++)
					{
						Vector2 spinningpoint4 = Vector2.Normalize(base.velocity) * new Vector2(base.width, base.height) / 2f;
						spinningpoint4 = spinningpoint4.RotatedBy((double)(num583 - (num582 / 2 - 1)) * Math.PI / (double)num582) + base.Center;
						Vector2 value20 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
						int num584 = Dust.NewDust(spinningpoint4 + value20, 0, 0, 217, value20.X * 2f, value20.Y * 2f, 100, default(Color), 1.4f);
						Main.dust[num584].noGravity = true;
						Main.dust[num584].noLight = true;
						Dust dust = Main.dust[num584];
						dust.velocity /= 4f;
						dust = Main.dust[num584];
						dust.velocity -= base.velocity;
					}
					alpha -= 5;
					if (alpha < 50)
					{
						alpha = 50;
					}
					rotation += base.velocity.X * 0.1f;
					frame = (int)(localAI[1] / 3f) % 3;
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.4f, 0.6f);
				}
				int num585 = -1;
				Vector2 vector35 = base.Center;
				float num586 = 500f;
				if (localAI[0] > 0f)
				{
					localAI[0]--;
				}
				if (this.ai[0] == 0f && localAI[0] == 0f)
				{
					for (int num587 = 0; num587 < 200; num587++)
					{
						NPC nPC4 = Main.npc[num587];
						if (nPC4.CanBeChasedBy(this) && (this.ai[0] == 0f || this.ai[0] == (float)(num587 + 1)))
						{
							Vector2 center4 = nPC4.Center;
							float num588 = Vector2.Distance(center4, vector35);
							if (num588 < num586 && Collision.CanHit(base.position, base.width, base.height, nPC4.position, nPC4.width, nPC4.height))
							{
								num586 = num588;
								vector35 = center4;
								num585 = num587;
							}
						}
					}
					if (num585 >= 0)
					{
						this.ai[0] = num585 + 1;
						netUpdate = true;
					}
					num585 = -1;
				}
				if (localAI[0] == 0f && this.ai[0] == 0f)
				{
					localAI[0] = 30f;
				}
				bool flag28 = false;
				if (this.ai[0] != 0f)
				{
					int num589 = (int)(this.ai[0] - 1f);
					if (Main.npc[num589].active && !Main.npc[num589].dontTakeDamage && Main.npc[num589].immune[owner] == 0)
					{
						float num590 = Main.npc[num589].position.X + (float)(Main.npc[num589].width / 2);
						float num591 = Main.npc[num589].position.Y + (float)(Main.npc[num589].height / 2);
						float num592 = Math.Abs(base.position.X + (float)(base.width / 2) - num590) + Math.Abs(base.position.Y + (float)(base.height / 2) - num591);
						if (num592 < 1000f)
						{
							flag28 = true;
							vector35 = Main.npc[num589].Center;
						}
					}
					else
					{
						this.ai[0] = 0f;
						flag28 = false;
						netUpdate = true;
					}
				}
				if (flag28)
				{
					Vector2 v2 = vector35 - base.Center;
					float num593 = base.velocity.ToRotation();
					float num594 = v2.ToRotation();
					double num595 = num594 - num593;
					if (num595 > Math.PI)
					{
						num595 -= Math.PI * 2.0;
					}
					if (num595 < -Math.PI)
					{
						num595 += Math.PI * 2.0;
					}
					base.velocity = base.velocity.RotatedBy(num595 * 0.10000000149011612);
				}
				float num596 = base.velocity.Length();
				base.velocity.Normalize();
				base.velocity *= num596 + 0.0025f;
			}
			else if (aiStyle == 72)
			{
				localAI[0]++;
				if (localAI[0] > 5f)
				{
					alpha -= 25;
					if (alpha < 50)
					{
						alpha = 50;
					}
				}
				base.velocity *= 0.96f;
				if (this.ai[1] == 0f)
				{
					this.ai[1] = (float)Main.rand.Next(60, 121) / 100f;
					netUpdate = true;
				}
				scale = this.ai[1];
				base.position = base.Center;
				int num597 = 14;
				int num598 = 14;
				base.width = (int)((float)num597 * this.ai[1]);
				base.height = (int)((float)num598 * this.ai[1]);
				base.position -= new Vector2(base.width / 2, base.height / 2);
			}
			else if (aiStyle == 73)
			{
				int num599 = (int)this.ai[0];
				int num600 = (int)this.ai[1];
				Tile tile = Main.tile[num599, num600];
				if (tile == null || !tile.active() || tile.type != 338)
				{
					Kill();
					return;
				}
				float num601 = 2f;
				float num602 = (float)timeLeft / 60f;
				if (num602 < 1f)
				{
					num601 *= num602;
				}
				if (type == 419)
				{
					for (int num603 = 0; num603 < 2; num603++)
					{
						Vector2 spinningpoint5 = new Vector2(0f, 0f - num601);
						spinningpoint5 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						spinningpoint5 = spinningpoint5.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
						int num604 = Dust.NewDust(base.position, base.width, base.height, 222, 0f, 0f, 100);
						Dust dust11 = Main.dust[num604];
						dust11.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
						Dust dust = dust11;
						dust.velocity *= 0.5f;
						if (dust11.velocity.Y > 0f)
						{
							dust11.velocity.Y *= -1f;
						}
						dust = dust11;
						dust.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
						dust = dust11;
						dust.velocity += spinningpoint5;
						dust11.scale = 0.6f;
						dust11.fadeIn = dust11.scale + 0.2f;
						dust11.velocity.Y *= 2f;
					}
				}
				if (type == 420)
				{
					for (int num605 = 0; num605 < 2; num605++)
					{
						Vector2 spinningpoint6 = new Vector2(0f, 0f - num601);
						spinningpoint6 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						spinningpoint6 = spinningpoint6.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
						int num606 = 219;
						if (Main.rand.Next(5) == 0)
						{
							num606 = 222;
						}
						int num607 = Dust.NewDust(base.position, base.width, base.height, num606, 0f, 0f, 100);
						Dust dust12 = Main.dust[num607];
						dust12.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
						Dust dust = dust12;
						dust.velocity *= 0.5f;
						if (dust12.velocity.Y > 0f)
						{
							dust12.velocity.Y *= -1f;
						}
						dust = dust12;
						dust.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
						dust = dust12;
						dust.velocity += spinningpoint6;
						dust12.velocity.X *= 0.5f;
						dust12.scale = 0.6f;
						dust12.fadeIn = dust12.scale + 0.2f;
						dust12.velocity.Y *= 2f;
					}
				}
				if (type == 421)
				{
					for (int num608 = 0; num608 < 2; num608++)
					{
						Vector2 spinningpoint7 = new Vector2(0f, 0f - num601);
						spinningpoint7 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						spinningpoint7 = spinningpoint7.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
						int num609 = Dust.NewDust(base.position, base.width, base.height, 221, 0f, 0f, 100);
						Dust dust13 = Main.dust[num609];
						dust13.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
						Dust dust = dust13;
						dust.velocity *= 0.1f;
						if (dust13.velocity.Y > 0f)
						{
							dust13.velocity.Y *= -1f;
						}
						dust = dust13;
						dust.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
						dust = dust13;
						dust.velocity += spinningpoint7;
						dust13.scale = 0.6f;
						dust13.fadeIn = dust13.scale + 0.2f;
						dust13.velocity.Y *= 2.5f;
					}
					if (timeLeft % 10 == 0)
					{
						float num610 = 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						for (int num611 = 0; num611 < 9; num611++)
						{
							Vector2 vector36 = new Vector2((float)(num611 - 4) / 5f, (0f - num601) * num610);
							int num612 = Dust.NewDust(base.position, base.width, base.height, 222, 0f, 0f, 100);
							Dust dust14 = Main.dust[num612];
							dust14.scale = 0.7f + (float)Main.rand.NextDouble() * 0.3f;
							Dust dust = dust14;
							dust.velocity *= 0f;
							if (dust14.velocity.Y > 0f)
							{
								dust14.velocity.Y *= -1f;
							}
							dust = dust14;
							dust.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
							dust = dust14;
							dust.velocity += vector36;
							dust14.scale = 0.6f;
							dust14.fadeIn = dust14.scale + 0.2f;
							dust14.velocity.Y *= 2f;
						}
					}
				}
				if (type != 422)
				{
					return;
				}
				for (int num613 = 0; num613 < 2; num613++)
				{
					Vector2 spinningpoint8 = new Vector2(0f, 0f - num601);
					spinningpoint8 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
					spinningpoint8 = spinningpoint8.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
					int num614 = Dust.NewDust(base.position, base.width, base.height, 219 + Main.rand.Next(5), 0f, 0f, 100);
					Dust dust15 = Main.dust[num614];
					dust15.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
					Dust dust = dust15;
					dust.velocity *= 0.5f;
					if (dust15.velocity.Y > 0f)
					{
						dust15.velocity.Y *= -1f;
					}
					dust = dust15;
					dust.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
					dust = dust15;
					dust.velocity += spinningpoint8;
					dust15.scale = 0.6f;
					dust15.fadeIn = dust15.scale + 0.2f;
					dust15.velocity.Y *= 2f;
				}
			}
			else if (aiStyle == 74)
			{
				if (extraUpdates == 1)
				{
					localAI[0] *= localAI[1];
					localAI[1] -= 0.001f;
					if ((double)localAI[0] < 0.01)
					{
						Kill();
					}
				}
			}
			else if (aiStyle == 75)
			{
				AI_075();
			}
			else if (aiStyle == 76)
			{
				Player player5 = Main.player[owner];
				player5.heldProj = whoAmI;
				if (type == 441)
				{
					if (player5.mount.Type != 9)
					{
						Kill();
						return;
					}
				}
				else if (type == 453 && player5.mount.Type != 8)
				{
					Kill();
					return;
				}
				if (Main.myPlayer == owner)
				{
					base.position.X = Main.screenPosition.X + (float)Main.mouseX;
					base.position.Y = Main.screenPosition.Y + (float)Main.mouseY;
					if (this.ai[0] != base.position.X - player5.position.X || this.ai[1] != base.position.Y - player5.position.Y)
					{
						netUpdate = true;
					}
					this.ai[0] = base.position.X - player5.position.X;
					this.ai[1] = base.position.Y - player5.position.Y;
					player5.mount.AimAbility(player5, base.position);
					if (!player5.channel)
					{
						player5.mount.UseAbility(player5, base.position, toggleOn: false);
						Kill();
					}
					return;
				}
				base.position.X = player5.position.X + this.ai[0];
				base.position.Y = player5.position.Y + this.ai[1];
				if (type == 441)
				{
					if (!player5.mount.AbilityCharging)
					{
						player5.mount.StartAbilityCharge(player5);
					}
				}
				else if (type == 453 && !player5.mount.AbilityActive)
				{
					player5.mount.UseAbility(player5, base.position, toggleOn: false);
				}
				player5.mount.AimAbility(player5, base.position);
			}
			else if (aiStyle == 77)
			{
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]));
				SlotId invalid;
				if (activeSound != null)
				{
					if (activeSound.Volume == 0f)
					{
						activeSound.Stop();
						float[] array3 = localAI;
						invalid = SlotId.Invalid;
						array3[0] = ((SlotId)(invalid)).ToFloat();
					}
					activeSound.Volume = Math.Max(0f, activeSound.Volume - 0.05f);
				}
				else
				{
					float[] array4 = localAI;
					invalid = SlotId.Invalid;
					array4[0] = ((SlotId)(invalid)).ToFloat();
				}
				if (this.ai[1] == 1f)
				{
					friendly = false;
					if (alpha < 255)
					{
						alpha += 51;
					}
					if (alpha >= 255)
					{
						alpha = 255;
						Kill();
						return;
					}
				}
				else
				{
					if (alpha > 0)
					{
						alpha -= 50;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				float num615 = 30f;
				float num616 = num615 * 4f;
				this.ai[0]++;
				if (this.ai[0] > num616)
				{
					this.ai[0] = 0f;
				}
				Vector2 vector37 = -Vector2.UnitY.RotatedBy((float)Math.PI * 2f * this.ai[0] / num615);
				float val = 0.75f + vector37.Y * 0.25f;
				float val2 = 0.8f - vector37.Y * 0.2f;
				float num617 = Math.Max(val, val2);
				base.position += new Vector2(base.width, base.height) / 2f;
				base.width = (base.height = (int)(80f * num617));
				base.position -= new Vector2(base.width, base.height) / 2f;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				for (int num618 = 0; num618 < 1; num618++)
				{
					float num619 = 55f * num617;
					float num620 = 11f * num617;
					float num621 = 0.5f;
					int num622 = Dust.NewDust(base.position, base.width, base.height, 226, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num622].noGravity = true;
					Dust dust = Main.dust[num622];
					dust.velocity *= 2f;
					Main.dust[num622].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num620 + num621 * (float)Main.rand.NextDouble() * num619) + base.Center;
					Main.dust[num622].velocity = Main.dust[num622].velocity / 2f + Vector2.Normalize(Main.dust[num622].position - base.Center);
					if (Main.rand.Next(2) == 0)
					{
						num622 = Dust.NewDust(base.position, base.width, base.height, 226, 0f, 0f, 100, default(Color), 0.9f);
						Main.dust[num622].noGravity = true;
						dust = Main.dust[num622];
						dust.velocity *= 1.2f;
						Main.dust[num622].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num620 + num621 * (float)Main.rand.NextDouble() * num619) + base.Center;
						Main.dust[num622].velocity = Main.dust[num622].velocity / 2f + Vector2.Normalize(Main.dust[num622].position - base.Center);
					}
					if (Main.rand.Next(4) == 0)
					{
						num622 = Dust.NewDust(base.position, base.width, base.height, 226, 0f, 0f, 100, default(Color), 0.7f);
						Main.dust[num622].noGravity = true;
						dust = Main.dust[num622];
						dust.velocity *= 1.2f;
						Main.dust[num622].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num620 + num621 * (float)Main.rand.NextDouble() * num619) + base.Center;
						Main.dust[num622].velocity = Main.dust[num622].velocity / 2f + Vector2.Normalize(Main.dust[num622].position - base.Center);
					}
				}
			}
			else if (aiStyle == 78)
			{
				if (alpha > 0)
				{
					alpha -= 30;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				Vector2 v3 = this.ai[0].ToRotationVector2();
				float num623 = base.velocity.ToRotation();
				float num624 = v3.ToRotation();
				double num625 = num624 - num623;
				if (num625 > Math.PI)
				{
					num625 -= Math.PI * 2.0;
				}
				if (num625 < -Math.PI)
				{
					num625 += Math.PI * 2.0;
				}
				base.velocity = base.velocity.RotatedBy(num625 * 0.05000000074505806);
				base.velocity *= 0.96f;
				rotation = base.velocity.ToRotation() - (float)Math.PI / 2f;
				if (Main.myPlayer == owner && timeLeft > 60)
				{
					timeLeft = 60;
				}
			}
			else if (aiStyle == 79)
			{
				bool flag29 = true;
				int num626 = (int)this.ai[0] - 1;
				if (type == 447 && (this.ai[0] == 0f || ((!Main.npc[num626].active || Main.npc[num626].type != 392) && (!Main.npc[num626].active || Main.npc[num626].type != 395 || !(Main.npc[num626].ai[3] % 120f >= 60f) || Main.npc[num626].ai[0] != 2f))))
				{
					flag29 = false;
				}
				if (!flag29)
				{
					Kill();
					return;
				}
				NPC nPC5 = Main.npc[num626];
				float num627 = nPC5.Center.Y + 46f;
				float num628 = num627;
				if (type == 447)
				{
					int target = nPC5.target;
					if (nPC5.type == 392)
					{
						target = Main.npc[(int)nPC5.ai[0]].target;
					}
					Player player6 = Main.player[target];
					if (player6 != null && player6.active && !player6.dead)
					{
						num628 = player6.Bottom.Y;
					}
				}
				num628 /= 16f;
				int num629 = (int)nPC5.Center.X / 16;
				int num630 = (int)num627 / 16;
				int num631 = 0;
				if ((float)num630 >= num628 && Main.tile[num629, num630].nactive() && Main.tileSolid[Main.tile[num629, num630].type] && !Main.tileSolidTop[Main.tile[num629, num630].type])
				{
					num631 = 1;
				}
				else
				{
					for (; num631 < 150 && num630 + num631 < Main.maxTilesY; num631++)
					{
						int num632 = num630 + num631;
						if ((float)num632 >= num628 && Main.tile[num629, num632].nactive() && Main.tileSolid[Main.tile[num629, num632].type] && !Main.tileSolidTop[Main.tile[num629, num632].type])
						{
							num631--;
							break;
						}
					}
				}
				base.position.X = nPC5.Center.X - (float)(base.width / 2);
				base.position.Y = num627;
				base.height = (num631 + 1) * 16;
				int num633 = (int)base.position.Y + base.height;
				if (Main.tile[num629, num633 / 16].nactive() && Main.tileSolid[Main.tile[num629, num633 / 16].type] && !Main.tileSolidTop[Main.tile[num629, num633 / 16].type])
				{
					int num634 = num633 % 16;
					base.height -= num634 - 2;
				}
				if (type == 447)
				{
					for (int num635 = 0; num635 < 2; num635++)
					{
						int num636 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)base.height - 16f), base.width, 16, 228);
						Main.dust[num636].noGravity = true;
						Dust dust = Main.dust[num636];
						dust.velocity *= 0.5f;
						Main.dust[num636].velocity.X -= (float)num635 - nPC5.velocity.X * 2f / 3f;
						Main.dust[num636].scale = 2.8f;
					}
					if (Main.rand.Next(5) == 0)
					{
						int num637 = Dust.NewDust(new Vector2(base.position.X + (float)(base.width / 2) - (float)(base.width / 2 * Math.Sign(nPC5.velocity.X)) - 4f, base.position.Y + (float)base.height - 16f), 4, 16, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num637];
						dust.velocity *= 0.5f;
						Main.dust[num637].velocity.X -= nPC5.velocity.X / 2f;
						Main.dust[num637].velocity.Y = 0f - Math.Abs(Main.dust[num637].velocity.Y);
					}
				}
				if (type == 447 && ++frameCounter >= 5)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
			}
			else if (aiStyle == 80)
			{
				if (this.ai[0] == 0f && this.ai[1] > 0f)
				{
					this.ai[1]--;
				}
				else if (this.ai[0] == 0f && this.ai[1] == 0f)
				{
					this.ai[0] = 1f;
					this.ai[1] = (int)Player.FindClosest(base.position, base.width, base.height);
					netUpdate = true;
					float num638 = base.velocity.Length();
					base.velocity = Vector2.Normalize(base.velocity) * (num638 + 4f);
					for (int num639 = 0; num639 < 8; num639++)
					{
						Vector2 spinningpoint9 = Vector2.UnitX * -8f;
						spinningpoint9 += -Vector2.UnitY.RotatedBy((float)num639 * (float)Math.PI / 4f) * new Vector2(2f, 8f);
						spinningpoint9 = spinningpoint9.RotatedBy(rotation - (float)Math.PI / 2f);
						int num640 = Dust.NewDust(base.Center, 0, 0, 228);
						Main.dust[num640].scale = 1.5f;
						Main.dust[num640].noGravity = true;
						Main.dust[num640].position = base.Center + spinningpoint9;
						Main.dust[num640].velocity = base.velocity * 0f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					tileCollide = true;
					localAI[1]++;
					float num641 = 180f;
					float num642 = 0f;
					float num643 = 30f;
					if (localAI[1] == num641)
					{
						Kill();
						return;
					}
					if (localAI[1] >= num642 && localAI[1] < num642 + num643)
					{
						Vector2 v4 = Main.player[(int)this.ai[1]].Center - base.Center;
						float num644 = base.velocity.ToRotation();
						float num645 = v4.ToRotation();
						double num646 = num645 - num644;
						if (num646 > Math.PI)
						{
							num646 -= Math.PI * 2.0;
						}
						if (num646 < -Math.PI)
						{
							num646 += Math.PI * 2.0;
						}
						base.velocity = base.velocity.RotatedBy(num646 * 0.20000000298023224);
					}
					if (localAI[1] % 5f == 0f)
					{
						for (int num647 = 0; num647 < 4; num647++)
						{
							Vector2 spinningpoint10 = Vector2.UnitX * -8f;
							spinningpoint10 += -Vector2.UnitY.RotatedBy((float)num647 * (float)Math.PI / 4f) * new Vector2(2f, 4f);
							spinningpoint10 = spinningpoint10.RotatedBy(rotation - (float)Math.PI / 2f);
							int num648 = Dust.NewDust(base.Center, 0, 0, 228);
							Main.dust[num648].scale = 1.5f;
							Main.dust[num648].noGravity = true;
							Main.dust[num648].position = base.Center + spinningpoint10;
							Main.dust[num648].velocity = base.velocity * 0f;
						}
					}
				}
				rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= 3)
					{
						frame = 0;
					}
				}
				for (int num649 = 0; (float)num649 < 1f + this.ai[0]; num649++)
				{
					Vector2 value21 = Vector2.UnitY.RotatedBy(rotation) * 8f * (num649 + 1);
					int num650 = Dust.NewDust(base.Center, 0, 0, 228);
					Main.dust[num650].position = base.Center + value21;
					Main.dust[num650].scale = 1f;
					Main.dust[num650].noGravity = true;
				}
				for (int num651 = 0; num651 < 255; num651++)
				{
					Player player7 = Main.player[num651];
					if (player7.active && !player7.dead && Vector2.Distance(player7.Center, base.Center) <= 42f)
					{
						Kill();
						break;
					}
				}
			}
			else if (aiStyle == 81)
			{
				int num652 = penetrate;
				if (this.ai[0] == 0f)
				{
					tileCollide = true;
					localAI[0]++;
					if (localAI[0] > 7f)
					{
						int num653 = Utils.SelectRandom<int>(Main.rand, 226, 229);
						Vector2 center5 = base.Center;
						Vector2 spinningpoint11 = new Vector2(-16f, 16f);
						float num654 = 1f;
						spinningpoint11 += new Vector2(-16f, 16f);
						spinningpoint11 = spinningpoint11.RotatedBy(rotation);
						int num655 = 4;
						int num656 = Dust.NewDust(center5 + spinningpoint11 + Vector2.One * -num655, num655 * 2, num655 * 2, num653, 0f, 0f, 100, default(Color), num654);
						Dust dust = Main.dust[num656];
						dust.velocity *= 0.1f;
						if (Main.rand.Next(6) != 0)
						{
							Main.dust[num656].noGravity = true;
						}
					}
					float num657 = 0.01f;
					int num658 = 5;
					int num659 = num658 * 15;
					int num660 = 0;
					if (localAI[0] > 7f)
					{
						if (localAI[1] == 0f)
						{
							scale -= num657;
							alpha += num658;
							if (alpha > num659)
							{
								alpha = num659;
								localAI[1] = 1f;
							}
						}
						else if (localAI[1] == 1f)
						{
							scale += num657;
							alpha -= num658;
							if (alpha <= num660)
							{
								alpha = num660;
								localAI[1] = 0f;
							}
						}
					}
					rotation = base.velocity.ToRotation() + (float)Math.PI / 4f;
				}
				else if (this.ai[0] >= 1f && this.ai[0] < (float)(1 + num652))
				{
					tileCollide = false;
					alpha += 15;
					base.velocity *= 0.98f;
					localAI[0] = 0f;
					if (alpha >= 255)
					{
						if (this.ai[0] == 1f)
						{
							Kill();
							return;
						}
						int num661 = -1;
						Vector2 value22 = base.Center;
						float num662 = 250f;
						for (int num663 = 0; num663 < 200; num663++)
						{
							NPC nPC6 = Main.npc[num663];
							if (nPC6.CanBeChasedBy(this))
							{
								Vector2 center6 = nPC6.Center;
								float num664 = Vector2.Distance(center6, base.Center);
								if (num664 < num662)
								{
									num662 = num664;
									value22 = center6;
									num661 = num663;
								}
							}
						}
						if (num661 >= 0)
						{
							netUpdate = true;
							this.ai[0] += num652;
							base.position = value22 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * 100f - new Vector2(base.width, base.height) / 2f;
							base.velocity = Vector2.Normalize(value22 - base.Center) * 15f;
							rotation = base.velocity.ToRotation() + (float)Math.PI / 4f;
						}
						else
						{
							Kill();
						}
					}
					if (Main.rand.Next(3) == 0)
					{
						int num665 = Utils.SelectRandom<int>(Main.rand, 226, 229);
						Vector2 center7 = base.Center;
						Vector2 vector38 = new Vector2(-16f, 16f);
						vector38 = vector38;
						float num666 = 0.6f;
						vector38 += new Vector2(-16f, 16f);
						vector38 = vector38.RotatedBy(rotation);
						int num667 = 4;
						int num668 = Dust.NewDust(center7 + vector38 + Vector2.One * -num667, num667 * 2, num667 * 2, num665, 0f, 0f, 100, default(Color), num666);
						Dust dust = Main.dust[num668];
						dust.velocity *= 0.1f;
						Main.dust[num668].noGravity = true;
					}
				}
				else if (this.ai[0] >= (float)(1 + num652) && this.ai[0] < (float)(1 + num652 * 2))
				{
					scale = 0.9f;
					tileCollide = false;
					rotation = base.velocity.ToRotation() + (float)Math.PI / 4f;
					this.ai[1]++;
					if (this.ai[1] >= 15f)
					{
						alpha += 51;
						base.velocity *= 0.8f;
						if (alpha >= 255)
						{
							Kill();
						}
					}
					else
					{
						alpha -= 125;
						if (alpha < 0)
						{
							alpha = 0;
						}
						base.velocity *= 0.98f;
					}
					localAI[0]++;
					int num669 = Utils.SelectRandom<int>(Main.rand, 226, 229);
					Vector2 center8 = base.Center;
					Vector2 spinningpoint12 = new Vector2(-16f, 16f);
					float num670 = 0.6f;
					spinningpoint12 += new Vector2(-16f, 16f);
					spinningpoint12 = spinningpoint12.RotatedBy(rotation);
					int num671 = 4;
					int num672 = Dust.NewDust(center8 + spinningpoint12 + Vector2.One * -num671, num671 * 2, num671 * 2, num669, 0f, 0f, 100, default(Color), num670);
					Dust dust = Main.dust[num672];
					dust.velocity *= 0.1f;
					Main.dust[num672].noGravity = true;
				}
				float num673 = (float)alpha / 255f;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f * num673, 0.4f * num673, 1f * num673);
			}
			else if (aiStyle == 82)
			{
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (this.ai[0] == 0f)
				{
					localAI[0]++;
					if (localAI[0] >= 45f)
					{
						localAI[0] = 0f;
						this.ai[0] = 1f;
						this.ai[1] = 0f - this.ai[1];
						netUpdate = true;
					}
					base.velocity.X = base.velocity.RotatedBy(this.ai[1]).X;
					base.velocity.X = MathHelper.Clamp(base.velocity.X, -6f, 6f);
					base.velocity.Y -= 0.08f;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y < -7f)
					{
						base.velocity.Y = -7f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					localAI[0]++;
					if (localAI[0] >= 90f)
					{
						localAI[0] = 0f;
						this.ai[0] = 2f;
						this.ai[1] = (int)Player.FindClosest(base.position, base.width, base.height);
						netUpdate = true;
					}
					base.velocity.X = base.velocity.RotatedBy(this.ai[1]).X;
					base.velocity.X = MathHelper.Clamp(base.velocity.X, -6f, 6f);
					base.velocity.Y -= 0.08f;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y < -7f)
					{
						base.velocity.Y = -7f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					Vector2 value23 = Main.player[(int)this.ai[1]].Center - base.Center;
					if (value23.Length() < 30f)
					{
						Kill();
						return;
					}
					value23.Normalize();
					value23 *= 14f;
					value23 = Vector2.Lerp(base.velocity, value23, 0.6f);
					if (value23.Y < 6f)
					{
						value23.Y = 6f;
					}
					float num674 = 0.4f;
					if (base.velocity.X < value23.X)
					{
						base.velocity.X += num674;
						if (base.velocity.X < 0f && value23.X > 0f)
						{
							base.velocity.X += num674;
						}
					}
					else if (base.velocity.X > value23.X)
					{
						base.velocity.X -= num674;
						if (base.velocity.X > 0f && value23.X < 0f)
						{
							base.velocity.X -= num674;
						}
					}
					if (base.velocity.Y < value23.Y)
					{
						base.velocity.Y += num674;
						if (base.velocity.Y < 0f && value23.Y > 0f)
						{
							base.velocity.Y += num674;
						}
					}
					else if (base.velocity.Y > value23.Y)
					{
						base.velocity.Y -= num674;
						if (base.velocity.Y > 0f && value23.Y < 0f)
						{
							base.velocity.Y -= num674;
						}
					}
				}
				if (alpha < 40)
				{
					int num675 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - base.velocity.X) / 3f, (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 1.2f);
					Main.dust[num675].noGravity = true;
				}
				rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
			}
			else if (aiStyle == 83)
			{
				if (alpha > 200)
				{
					alpha = 200;
				}
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num676 = (float)alpha / 255f;
				scale = 1f - num676;
				if (this.ai[0] >= 0f)
				{
					this.ai[0]++;
				}
				if (this.ai[0] == -1f)
				{
					frame = 1;
					extraUpdates = 1;
				}
				else if (this.ai[0] < 30f)
				{
					base.position = Main.npc[(int)this.ai[1]].Center - new Vector2(base.width, base.height) / 2f - base.velocity;
				}
				else
				{
					base.velocity *= 0.96f;
					if (++frameCounter >= 6)
					{
						frameCounter = 0;
						if (++frame >= 2)
						{
							frame = 0;
						}
					}
				}
				if (alpha >= 40)
				{
					return;
				}
				for (int num677 = 0; num677 < 2; num677++)
				{
					float num678 = (float)Main.rand.NextDouble() * 1f - 0.5f;
					if (num678 < -0.5f)
					{
						num678 = -0.5f;
					}
					if (num678 > 0.5f)
					{
						num678 = 0.5f;
					}
					Vector2 value24 = new Vector2((float)(-base.width) * 0.65f * scale, 0f).RotatedBy(num678 * ((float)Math.PI * 2f)).RotatedBy(base.velocity.ToRotation());
					int num679 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - base.velocity.X) / 3f, (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
					Main.dust[num679].velocity = Vector2.Zero;
					Main.dust[num679].position = base.Center + value24;
					Main.dust[num679].noGravity = true;
				}
			}
			else if (aiStyle == 84)
			{
				Vector2? vector39 = null;
				if (base.velocity.HasNaNs() || base.velocity == Vector2.Zero)
				{
					base.velocity = -Vector2.UnitY;
				}
				if (type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 396)
				{
					if (Main.npc[(int)this.ai[1]].ai[0] == -2f)
					{
						Kill();
						return;
					}
					Vector2 value25 = Utils.Vector2FromElipse(elipseSizes: new Vector2(27f, 59f) * Main.npc[(int)this.ai[1]].localAI[1], angleVector: Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2());
					base.position = Main.npc[(int)this.ai[1]].Center + value25 - new Vector2(base.width, base.height) / 2f;
				}
				else if (type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 400)
				{
					Vector2 value26 = Utils.Vector2FromElipse(elipseSizes: new Vector2(30f, 30f) * Main.npc[(int)this.ai[1]].localAI[1], angleVector: Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2());
					base.position = Main.npc[(int)this.ai[1]].Center + value26 - new Vector2(base.width, base.height) / 2f;
				}
				else if (type == 537 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 411)
				{
					Vector2 value27 = new Vector2(Main.npc[(int)this.ai[1]].direction * 6, -4f);
					base.position = Main.npc[(int)this.ai[1]].Center + value27 - base.Size / 2f + new Vector2(0f, 0f - Main.npc[(int)this.ai[1]].gfxOffY);
				}
				else if (type == 461 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 460)
				{
					Vector2 value28 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
					base.position = Main.projectile[(int)this.ai[1]].Center + value28 * 16f - new Vector2(base.width, base.height) / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
					base.velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
				}
				else if (type == 642 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 641)
				{
					base.Center = Main.projectile[(int)this.ai[1]].Center;
					base.velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].ai[1].ToRotationVector2());
				}
				else
				{
					if (type != 632 || !Main.projectile[(int)this.ai[1]].active || Main.projectile[(int)this.ai[1]].type != 633)
					{
						Kill();
						return;
					}
					float num680 = (float)(int)this.ai[0] - 2.5f;
					Vector2 value29 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
					Projectile projectile = Main.projectile[(int)this.ai[1]];
					float num681 = num680 * ((float)Math.PI / 6f);
					float num682 = 20f;
					Vector2 zero = Vector2.Zero;
					float num683 = 1f;
					float num684 = 15f;
					float num685 = -2f;
					if (projectile.ai[0] < 180f)
					{
						num683 = 1f - projectile.ai[0] / 180f;
						num684 = 20f - projectile.ai[0] / 180f * 14f;
						if (projectile.ai[0] < 120f)
						{
							num682 = 20f - 4f * (projectile.ai[0] / 120f);
							Opacity = projectile.ai[0] / 120f * 0.4f;
						}
						else
						{
							num682 = 16f - 10f * ((projectile.ai[0] - 120f) / 60f);
							Opacity = 0.4f + (projectile.ai[0] - 120f) / 60f * 0.6f;
						}
						num685 = -22f + projectile.ai[0] / 180f * 20f;
					}
					else
					{
						num683 = 0f;
						num682 = 1.75f;
						num684 = 6f;
						Opacity = 1f;
						num685 = -2f;
					}
					float num686 = (projectile.ai[0] + num680 * num682) / (num682 * 6f) * ((float)Math.PI * 2f);
					num681 = Vector2.UnitY.RotatedBy(num686).Y * ((float)Math.PI / 6f) * num683;
					zero = (Vector2.UnitY.RotatedBy(num686) * new Vector2(4f, num684)).RotatedBy(projectile.velocity.ToRotation());
					base.position = projectile.Center + value29 * 16f - base.Size / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
					base.position += projectile.velocity.ToRotation().ToRotationVector2() * num685;
					base.position += zero;
					base.velocity = Vector2.Normalize(projectile.velocity).RotatedBy(num681);
					scale = 1.4f * (1f - num683);
					damage = projectile.damage;
					if (projectile.ai[0] >= 180f)
					{
						damage *= 3;
						vector39 = projectile.Center;
					}
					if (!Collision.CanHitLine(Main.player[owner].Center, 0, 0, projectile.Center, 0, 0))
					{
						vector39 = Main.player[owner].Center;
					}
					friendly = projectile.ai[0] > 30f;
				}
				if (base.velocity.HasNaNs() || base.velocity == Vector2.Zero)
				{
					base.velocity = -Vector2.UnitY;
				}
				if (type == 461)
				{
					this.ai[0]++;
					if (this.ai[0] >= 300f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(this.ai[0] * (float)Math.PI / 300f) * 10f;
					if (scale > 1f)
					{
						scale = 1f;
					}
				}
				if (type == 455)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(29, (int)base.position.X, (int)base.position.Y, 104);
					}
					float num687 = 1f;
					if (Main.npc[(int)this.ai[1]].type == 400)
					{
						num687 = 0.4f;
					}
					localAI[0]++;
					if (localAI[0] >= 180f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 180f) * 10f * num687;
					if (scale > num687)
					{
						scale = num687;
					}
				}
				if (type == 642)
				{
					float num688 = 1f;
					localAI[0]++;
					if (localAI[0] >= 50f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 50f) * 10f * num688;
					if (scale > num688)
					{
						scale = num688;
					}
				}
				if (type == 537)
				{
					float num689 = 0.8f;
					localAI[0]++;
					if (localAI[0] >= 60f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 60f) * 10f * num689;
					if (scale > num689)
					{
						scale = num689;
					}
				}
				float num690 = base.velocity.ToRotation();
				if (type == 455)
				{
					num690 += this.ai[0];
				}
				rotation = num690 - (float)Math.PI / 2f;
				base.velocity = num690.ToRotationVector2();
				float num691 = 0f;
				float num692 = 0f;
				Vector2 samplingPoint = base.Center;
				if (vector39.HasValue)
				{
					samplingPoint = vector39.Value;
				}
				if (type == 455)
				{
					num691 = 3f;
					num692 = base.width;
				}
				else if (type == 461)
				{
					num691 = 2f;
					num692 = 0f;
				}
				else if (type == 642)
				{
					num691 = 2f;
					num692 = 0f;
				}
				else if (type == 632)
				{
					num691 = 2f;
					num692 = 0f;
				}
				else if (type == 537)
				{
					num691 = 2f;
					num692 = 0f;
				}
				float[] array5 = new float[(int)num691];
				Collision.LaserScan(samplingPoint, base.velocity, num692 * scale, 2400f, array5);
				float num693 = 0f;
				for (int num694 = 0; num694 < array5.Length; num694++)
				{
					num693 += array5[num694];
				}
				num693 /= num691;
				float amount = 0.5f;
				if (type == 455)
				{
					NPC nPC7 = Main.npc[(int)this.ai[1]];
					if (nPC7.type == 396)
					{
						Player player8 = Main.player[nPC7.target];
						if (!Collision.CanHitLine(nPC7.position, nPC7.width, nPC7.height, player8.position, player8.width, player8.height))
						{
							num693 = Math.Min(2400f, Vector2.Distance(nPC7.Center, player8.Center) + 150f);
							amount = 0.75f;
						}
					}
				}
				if (type == 632)
				{
					amount = 0.75f;
				}
				localAI[1] = MathHelper.Lerp(localAI[1], num693, amount);
				if (type == 455)
				{
					Vector2 vector40 = base.Center + base.velocity * (localAI[1] - 14f);
					for (int num695 = 0; num695 < 2; num695++)
					{
						float num696 = base.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num697 = (float)Main.rand.NextDouble() * 2f + 2f;
						Vector2 vector41 = new Vector2((float)Math.Cos(num696) * num697, (float)Math.Sin(num696) * num697);
						int num698 = Dust.NewDust(vector40, 0, 0, 229, vector41.X, vector41.Y);
						Main.dust[num698].noGravity = true;
						Main.dust[num698].scale = 1.7f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 value30 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * base.width;
						int num699 = Dust.NewDust(vector40 + value30 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num699];
						dust.velocity *= 0.5f;
						Main.dust[num699].velocity.Y = 0f - Math.Abs(Main.dust[num699].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
					Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1], (float)base.width * scale, DelegateMethods.CastLight);
				}
				else if (type == 642)
				{
					Vector2 vector42 = base.Center + base.velocity * (localAI[1] - 14f);
					for (int num700 = 0; num700 < 2; num700++)
					{
						float num701 = base.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num702 = (float)Main.rand.NextDouble() * 2f + 2f;
						Vector2 vector43 = new Vector2((float)Math.Cos(num701) * num702, (float)Math.Sin(num701) * num702);
						int num703 = Dust.NewDust(vector42, 0, 0, 229, vector43.X, vector43.Y);
						Main.dust[num703].noGravity = true;
						Main.dust[num703].scale = 1.7f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 value31 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * base.width;
						int num704 = Dust.NewDust(vector42 + value31 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num704];
						dust.velocity *= 0.5f;
						Main.dust[num704].velocity.Y = 0f - Math.Abs(Main.dust[num704].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
					Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1], (float)base.width * scale, DelegateMethods.CastLight);
				}
				if (type == 461)
				{
					Vector2 vector44 = base.Center + base.velocity * (localAI[1] - 8f);
					for (int num705 = 0; num705 < 2; num705++)
					{
						float num706 = base.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num707 = (float)Main.rand.NextDouble() * 0.8f + 1f;
						Vector2 vector45 = new Vector2((float)Math.Cos(num706) * num707, (float)Math.Sin(num706) * num707);
						int num708 = Dust.NewDust(vector44, 0, 0, 226, vector45.X, vector45.Y);
						Main.dust[num708].noGravity = true;
						Main.dust[num708].scale = 1.2f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 value32 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * base.width;
						int num709 = Dust.NewDust(vector44 + value32 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num709];
						dust.velocity *= 0.5f;
						Main.dust[num709].velocity.Y = 0f - Math.Abs(Main.dust[num709].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
					Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1], (float)base.width * scale, DelegateMethods.CastLight);
				}
				if (type == 537)
				{
					Vector2 vector46 = base.Center + base.velocity * (localAI[1] - 8f);
					for (int num710 = 0; num710 < 2; num710++)
					{
						float num711 = base.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num712 = (float)Main.rand.NextDouble() * 0.8f + 1f;
						Vector2 vector47 = new Vector2((float)Math.Cos(num711) * num712, (float)Math.Sin(num711) * num712);
						int num713 = Dust.NewDust(vector46, 0, 0, 226, vector47.X, vector47.Y);
						Main.dust[num713].noGravity = true;
						Main.dust[num713].scale = 1.2f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 value33 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * base.width;
						int num714 = Dust.NewDust(vector46 + value33 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num714];
						dust.velocity *= 0.5f;
						Main.dust[num714].velocity.Y = 0f - Math.Abs(Main.dust[num714].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
					Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1], (float)base.width * scale, DelegateMethods.CastLight);
				}
				if (type != 632 || !(Math.Abs(localAI[1] - num693) < 100f) || !(scale > 0.15f))
				{
					return;
				}
				float laserLuminance = 0.5f;
				float laserAlphaMultiplier = 0f;
				float lastPrismHue = GetLastPrismHue(this.ai[0], laserLuminance, laserAlphaMultiplier);
				Color color = Main.hslToRgb(lastPrismHue, 1f, laserLuminance);
				color.A = (byte)((float)(int)color.A * laserAlphaMultiplier);
				Color color2 = color;
				Vector2 vector48 = base.Center + base.velocity * (localAI[1] - 14.5f * scale);
				float x3 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
				for (int num715 = 0; num715 < 2; num715++)
				{
					float num716 = base.velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num717 = (float)Main.rand.NextDouble() * 0.8f + 1f;
					Vector2 vector49 = new Vector2((float)Math.Cos(num716) * num717, (float)Math.Sin(num716) * num717);
					int num718 = Dust.NewDust(vector48, 0, 0, 267, vector49.X, vector49.Y);
					Main.dust[num718].color = color;
					Main.dust[num718].scale = 1.2f;
					if (scale > 1f)
					{
						Dust dust = Main.dust[num718];
						dust.velocity *= scale;
						dust = Main.dust[num718];
						dust.scale *= scale;
					}
					Main.dust[num718].noGravity = true;
					if (scale != 1.4f && num718 != 6000)
					{
						Dust dust16 = Dust.CloneDust(num718);
						dust16.color = Color.White;
						Dust dust = dust16;
						dust.scale /= 2f;
					}
					float hue = (x3 + Main.rand.NextFloat() * 0.4f) % 1f;
					Main.dust[num718].color = Color.Lerp(color, Main.hslToRgb(hue, 1f, 0.75f), scale / 1.4f);
				}
				if (Main.rand.Next(5) == 0)
				{
					Vector2 value34 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * base.width;
					int num719 = Dust.NewDust(vector48 + value34 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num719];
					dust.velocity *= 0.5f;
					Main.dust[num719].velocity.Y = 0f - Math.Abs(Main.dust[num719].velocity.Y);
				}
				DelegateMethods.v3_1 = color.ToVector3() * 0.3f;
				float value35 = 0.1f * (float)Math.Sin(Main.GlobalTimeWrappedHourly * 20f);
				Vector2 size = new Vector2(base.velocity.Length() * localAI[1], (float)base.width * scale);
				float num720 = base.velocity.ToRotation();
				if (Main.netMode != 2)
				{
					((WaterShaderData)Filters.Scene["WaterDistortion"].GetShader()).QueueRipple(base.position + new Vector2(size.X * 0.5f, 0f).RotatedBy(num720), new Color(0.5f, 0.1f * (float)Math.Sign(value35) + 0.5f, 0f, 1f) * Math.Abs(value35), size, RippleShape.Square, num720);
				}
				Utils.PlotTileLine(base.Center, base.Center + base.velocity * localAI[1], (float)base.width * scale, DelegateMethods.CastLight);
			}
			else if (aiStyle == 85)
			{
				Vector2 value36 = new Vector2(0f, 216f);
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				int num721 = (int)Math.Abs(this.ai[0]) - 1;
				int num722 = (int)this.ai[1];
				if (!Main.npc[num721].active || Main.npc[num721].type != 396)
				{
					Kill();
					return;
				}
				localAI[0]++;
				if (localAI[0] >= 330f && this.ai[0] > 0f && Main.netMode != 1)
				{
					this.ai[0] *= -1f;
					netUpdate = true;
				}
				if (Main.netMode != 1 && this.ai[0] > 0f && (!Main.player[(int)this.ai[1]].active || Main.player[(int)this.ai[1]].dead))
				{
					this.ai[0] *= -1f;
					netUpdate = true;
				}
				rotation = (Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - Main.player[(int)this.ai[1]].Center + value36).ToRotation() + (float)Math.PI / 2f;
				if (this.ai[0] > 0f)
				{
					Vector2 value37 = Main.player[(int)this.ai[1]].Center - base.Center;
					if (value37.X != 0f || value37.Y != 0f)
					{
						base.velocity = Vector2.Normalize(value37) * Math.Min(16f, value37.Length());
					}
					else
					{
						base.velocity = Vector2.Zero;
					}
					if (value37.Length() < 20f && localAI[1] == 0f)
					{
						localAI[1] = 1f;
						int timeToAdd = 840;
						if (Main.expertMode)
						{
							timeToAdd = 960;
						}
						if (!Main.player[num722].creativeGodMode)
						{
							Main.player[num722].AddBuff(145, timeToAdd);
						}
					}
				}
				else
				{
					Vector2 value38 = Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - base.Center + value36;
					if (value38.X != 0f || value38.Y != 0f)
					{
						base.velocity = Vector2.Normalize(value38) * Math.Min(16f, value38.Length());
					}
					else
					{
						base.velocity = Vector2.Zero;
					}
					if (value38.Length() < 20f)
					{
						Kill();
					}
				}
			}
			else if (aiStyle == 86)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item120, base.position);
				}
				this.ai[0]++;
				if (this.ai[1] == 1f)
				{
					if (this.ai[0] >= 130f)
					{
						alpha += 10;
					}
					else
					{
						alpha -= 10;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha > 255)
					{
						alpha = 255;
					}
					if (this.ai[0] >= 150f)
					{
						Kill();
						return;
					}
					if (this.ai[0] % 30f == 0f && Main.netMode != 1)
					{
						Vector2 vector50 = rotation.ToRotationVector2();
						NewProjectile(base.Center.X, base.Center.Y, vector50.X, vector50.Y, 464, damage, knockBack, owner);
					}
					rotation += (float)Math.PI / 30f;
					Lighting.AddLight(base.Center, 0.3f, 0.75f, 0.9f);
					return;
				}
				base.position -= base.velocity;
				if (this.ai[0] >= 40f)
				{
					alpha += 3;
				}
				else
				{
					alpha -= 40;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 255)
				{
					alpha = 255;
				}
				if (this.ai[0] >= 45f)
				{
					Kill();
					return;
				}
				Vector2 value39 = new Vector2(0f, -720f).RotatedBy(base.velocity.ToRotation());
				float scaleFactor3 = this.ai[0] % 45f / 45f;
				Vector2 spinningpoint13 = value39 * scaleFactor3;
				for (int num723 = 0; num723 < 6; num723++)
				{
					Vector2 vector51 = base.Center + spinningpoint13.RotatedBy((float)num723 * ((float)Math.PI * 2f) / 6f);
					Lighting.AddLight(vector51, 0.3f, 0.75f, 0.9f);
					for (int num724 = 0; num724 < 2; num724++)
					{
						int num725 = Dust.NewDust(vector51 + Utils.RandomVector2(Main.rand, -8f, 8f) / 2f, 8, 8, 197, 0f, 0f, 100, Color.Transparent);
						Main.dust[num725].noGravity = true;
					}
				}
			}
			else if (aiStyle == 87)
			{
				base.position.Y = this.ai[0];
				base.height = (int)this.ai[1];
				if (base.Center.X > Main.player[owner].Center.X)
				{
					direction = 1;
				}
				else
				{
					direction = -1;
				}
				base.velocity.X = (float)direction * 1E-06f;
				if (owner == Main.myPlayer)
				{
					for (int num726 = 0; num726 < 1000; num726++)
					{
						if (Main.projectile[num726].active && num726 != whoAmI && Main.projectile[num726].type == type && Main.projectile[num726].owner == owner && Main.projectile[num726].timeLeft > timeLeft)
						{
							Kill();
							return;
						}
					}
				}
				float num727 = (float)(base.width * base.height) * 0.0045f;
				for (int num728 = 0; (float)num728 < num727; num728++)
				{
					int num729 = Dust.NewDust(base.position, base.width, base.height, 75, 0f, 0f, 100);
					Main.dust[num729].noGravity = true;
					Dust dust = Main.dust[num729];
					dust.velocity *= 0.5f;
					Main.dust[num729].velocity.Y -= 0.5f;
					Main.dust[num729].scale = 1.4f;
					Main.dust[num729].position.X += 6f;
					Main.dust[num729].position.Y -= 2f;
				}
			}
			else if (aiStyle == 88)
			{
				if (type == 465)
				{
					if (localAI[1] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item121, base.position);
						localAI[1] = 1f;
					}
					if (this.ai[0] < 180f)
					{
						alpha -= 5;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					else
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
							Kill();
							return;
						}
					}
					this.ai[0]++;
					if (this.ai[0] % 30f == 0f && this.ai[0] < 180f && Main.netMode != 1)
					{
						int[] array6 = new int[5];
						Vector2[] array7 = new Vector2[5];
						int num730 = 0;
						float num731 = 2000f;
						for (int num732 = 0; num732 < 255; num732++)
						{
							if (!Main.player[num732].active || Main.player[num732].dead)
							{
								continue;
							}
							Vector2 center9 = Main.player[num732].Center;
							float num733 = Vector2.Distance(center9, base.Center);
							if (num733 < num731 && Collision.CanHit(base.Center, 1, 1, center9, 1, 1))
							{
								array6[num730] = num732;
								array7[num730] = center9;
								int num33 = num730 + 1;
								num730 = num33;
								if (num33 >= array7.Length)
								{
									break;
								}
							}
						}
						for (int num734 = 0; num734 < num730; num734++)
						{
							Vector2 vector52 = array7[num734] - base.Center;
							float ai = Main.rand.Next(100);
							Vector2 vector53 = Vector2.Normalize(vector52.RotatedByRandom(0.78539818525314331)) * 7f;
							NewProjectile(base.Center.X, base.Center.Y, vector53.X, vector53.Y, 466, damage, 0f, Main.myPlayer, vector52.ToRotation(), ai);
						}
					}
					Lighting.AddLight(base.Center, 0.4f, 0.85f, 0.9f);
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (alpha >= 150 || !(this.ai[0] < 180f))
					{
						return;
					}
					for (int num735 = 0; num735 < 1; num735++)
					{
						float num736 = (float)Main.rand.NextDouble() * 1f - 0.5f;
						if (num736 < -0.5f)
						{
							num736 = -0.5f;
						}
						if (num736 > 0.5f)
						{
							num736 = 0.5f;
						}
						Vector2 value40 = new Vector2((float)(-base.width) * 0.2f * scale, 0f).RotatedBy(num736 * ((float)Math.PI * 2f)).RotatedBy(base.velocity.ToRotation());
						int num737 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - base.velocity.X) / 3f, (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
						Main.dust[num737].position = base.Center + value40;
						Main.dust[num737].velocity = Vector2.Normalize(Main.dust[num737].position - base.Center) * 2f;
						Main.dust[num737].noGravity = true;
					}
					for (int num738 = 0; num738 < 1; num738++)
					{
						float num739 = (float)Main.rand.NextDouble() * 1f - 0.5f;
						if (num739 < -0.5f)
						{
							num739 = -0.5f;
						}
						if (num739 > 0.5f)
						{
							num739 = 0.5f;
						}
						Vector2 value41 = new Vector2((float)(-base.width) * 0.6f * scale, 0f).RotatedBy(num739 * ((float)Math.PI * 2f)).RotatedBy(base.velocity.ToRotation());
						int num740 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - base.velocity.X) / 3f, (0f - base.velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
						Main.dust[num740].velocity = Vector2.Zero;
						Main.dust[num740].position = base.Center + value41;
						Main.dust[num740].noGravity = true;
					}
				}
				else if (type == 466)
				{
					frameCounter++;
					Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
					if (base.velocity == Vector2.Zero)
					{
						if (frameCounter >= extraUpdates * 2)
						{
							frameCounter = 0;
							bool flag30 = true;
							for (int num741 = 1; num741 < oldPos.Length; num741++)
							{
								if (oldPos[num741] != oldPos[0])
								{
									flag30 = false;
								}
							}
							if (flag30)
							{
								Kill();
								return;
							}
						}
						if (Main.rand.Next(extraUpdates) == 0)
						{
							for (int num742 = 0; num742 < 2; num742++)
							{
								float num743 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
								float num744 = (float)Main.rand.NextDouble() * 0.8f + 1f;
								Vector2 vector54 = new Vector2((float)Math.Cos(num743) * num744, (float)Math.Sin(num743) * num744);
								int num745 = Dust.NewDust(base.Center, 0, 0, 226, vector54.X, vector54.Y);
								Main.dust[num745].noGravity = true;
								Main.dust[num745].scale = 1.2f;
							}
							if (Main.rand.Next(5) == 0)
							{
								Vector2 value42 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * base.width;
								int num746 = Dust.NewDust(base.Center + value42 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust = Main.dust[num746];
								dust.velocity *= 0.5f;
								Main.dust[num746].velocity.Y = 0f - Math.Abs(Main.dust[num746].velocity.Y);
							}
						}
					}
					else
					{
						if (frameCounter < extraUpdates * 2)
						{
							return;
						}
						frameCounter = 0;
						float num747 = base.velocity.Length();
						UnifiedRandom unifiedRandom = new UnifiedRandom((int)this.ai[1]);
						int num748 = 0;
						Vector2 spinningpoint14 = -Vector2.UnitY;
						while (true)
						{
							int num749 = unifiedRandom.Next();
							this.ai[1] = num749;
							num749 %= 100;
							float f = (float)num749 / 100f * ((float)Math.PI * 2f);
							Vector2 vector55 = f.ToRotationVector2();
							if (vector55.Y > 0f)
							{
								vector55.Y *= -1f;
							}
							bool flag31 = false;
							if (vector55.Y > -0.02f)
							{
								flag31 = true;
							}
							if (vector55.X * (float)(extraUpdates + 1) * 2f * num747 + localAI[0] > 40f)
							{
								flag31 = true;
							}
							if (vector55.X * (float)(extraUpdates + 1) * 2f * num747 + localAI[0] < -40f)
							{
								flag31 = true;
							}
							if (flag31)
							{
								if (num748++ >= 100)
								{
									base.velocity = Vector2.Zero;
									localAI[1] = 1f;
									break;
								}
								continue;
							}
							spinningpoint14 = vector55;
							break;
						}
						if (base.velocity != Vector2.Zero)
						{
							localAI[0] += spinningpoint14.X * (float)(extraUpdates + 1) * 2f * num747;
							base.velocity = spinningpoint14.RotatedBy(this.ai[0] + (float)Math.PI / 2f) * num747;
							rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
						}
					}
				}
				else
				{
					if (type != 580)
					{
						return;
					}
					if (localAI[1] == 0f && this.ai[0] >= 900f)
					{
						this.ai[0] -= 1000f;
						localAI[1] = -1f;
					}
					frameCounter++;
					Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
					if (base.velocity == Vector2.Zero)
					{
						if (frameCounter >= extraUpdates * 2)
						{
							frameCounter = 0;
							bool flag32 = true;
							for (int num750 = 1; num750 < oldPos.Length; num750++)
							{
								if (oldPos[num750] != oldPos[0])
								{
									flag32 = false;
								}
							}
							if (flag32)
							{
								Kill();
								return;
							}
						}
						if (Main.rand.Next(extraUpdates) == 0 && (base.velocity != Vector2.Zero || Main.rand.Next((localAI[1] == 2f) ? 2 : 6) == 0))
						{
							for (int num751 = 0; num751 < 2; num751++)
							{
								float num752 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
								float num753 = (float)Main.rand.NextDouble() * 0.8f + 1f;
								Vector2 vector56 = new Vector2((float)Math.Cos(num752) * num753, (float)Math.Sin(num752) * num753);
								int num754 = Dust.NewDust(base.Center, 0, 0, 226, vector56.X, vector56.Y);
								Main.dust[num754].noGravity = true;
								Main.dust[num754].scale = 1.2f;
							}
							if (Main.rand.Next(5) == 0)
							{
								Vector2 value43 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * base.width;
								int num755 = Dust.NewDust(base.Center + value43 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust = Main.dust[num755];
								dust.velocity *= 0.5f;
								Main.dust[num755].velocity.Y = 0f - Math.Abs(Main.dust[num755].velocity.Y);
							}
						}
					}
					else
					{
						if (frameCounter < extraUpdates * 2)
						{
							return;
						}
						frameCounter = 0;
						float num756 = base.velocity.Length();
						UnifiedRandom unifiedRandom2 = new UnifiedRandom((int)this.ai[1]);
						int num757 = 0;
						Vector2 spinningpoint15 = -Vector2.UnitY;
						while (true)
						{
							int num758 = unifiedRandom2.Next();
							this.ai[1] = num758;
							num758 %= 100;
							float f2 = (float)num758 / 100f * ((float)Math.PI * 2f);
							Vector2 vector57 = f2.ToRotationVector2();
							if (vector57.Y > 0f)
							{
								vector57.Y *= -1f;
							}
							bool flag33 = false;
							if (vector57.Y > -0.02f)
							{
								flag33 = true;
							}
							if (vector57.X * (float)(extraUpdates + 1) * 2f * num756 + localAI[0] > 40f)
							{
								flag33 = true;
							}
							if (vector57.X * (float)(extraUpdates + 1) * 2f * num756 + localAI[0] < -40f)
							{
								flag33 = true;
							}
							if (flag33)
							{
								if (num757++ >= 100)
								{
									base.velocity = Vector2.Zero;
									if (localAI[1] < 1f)
									{
										localAI[1] += 2f;
									}
									break;
								}
								continue;
							}
							spinningpoint15 = vector57;
							break;
						}
						if (!(base.velocity != Vector2.Zero))
						{
							return;
						}
						localAI[0] += spinningpoint15.X * (float)(extraUpdates + 1) * 2f * num756;
						base.velocity = spinningpoint15.RotatedBy(this.ai[0] + (float)Math.PI / 2f) * num756;
						rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
						if (Main.rand.Next(4) == 0 && Main.netMode != 1 && localAI[1] == 0f)
						{
							float num759 = (float)Main.rand.Next(-3, 4) * ((float)Math.PI / 3f) / 3f;
							Vector2 vector58 = this.ai[0].ToRotationVector2().RotatedBy(num759) * base.velocity.Length();
							if (!Collision.CanHitLine(base.Center, 0, 0, base.Center + vector58 * 50f, 0, 0))
							{
								NewProjectile(base.Center.X - vector58.X, base.Center.Y - vector58.Y, vector58.X, vector58.Y, type, damage, knockBack, owner, vector58.ToRotation() + 1000f, this.ai[1]);
							}
						}
					}
				}
			}
			else if (aiStyle == 89)
			{
				if (this.ai[1] == -1f)
				{
					alpha += 12;
				}
				else if (this.ai[0] < 300f)
				{
					alpha -= 5;
				}
				else
				{
					alpha += 12;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 255)
				{
					alpha = 255;
				}
				scale = 1f - (float)alpha / 255f;
				scale *= 0.6f;
				rotation += (float)Math.PI / 210f;
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item123, base.position);
				}
				if (alpha == 0)
				{
					for (int num760 = 0; num760 < 2; num760++)
					{
						float num761 = Main.rand.Next(2, 4);
						float num762 = scale;
						if (num760 == 1)
						{
							num762 *= 0.42f;
							num761 *= -0.75f;
						}
						Vector2 value44 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
						value44.Normalize();
						int num763 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 228, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num763].noGravity = true;
						Main.dust[num763].noLight = true;
						Main.dust[num763].position = base.Center + value44 * 204f * num762;
						if (Main.rand.Next(8) == 0)
						{
							Main.dust[num763].velocity = value44 * (0f - num761) * 2f;
							Dust dust = Main.dust[num763];
							dust.scale += 0.5f;
						}
						else
						{
							Main.dust[num763].velocity = value44 * (0f - num761);
						}
					}
				}
				this.ai[0]++;
				if (this.ai[0] >= 60f)
				{
					int num764 = (int)(this.ai[0] - 0f) / 60;
					float num765 = scale * 0.4f;
					for (int num766 = 0; num766 < 1; num766++)
					{
						float scaleFactor4 = Main.rand.Next(1, 3);
						Vector2 value45 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
						value45.Normalize();
						int num767 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 228, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num767].noGravity = true;
						Main.dust[num767].noLight = true;
						Main.dust[num767].position = base.Center;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num767].velocity = value45 * scaleFactor4 * 2f;
							Dust dust = Main.dust[num767];
							dust.scale += 0.5f;
						}
						else
						{
							Main.dust[num767].velocity = value45 * scaleFactor4;
						}
						Main.dust[num767].fadeIn = 2f;
					}
				}
				if (this.ai[0] == 300f && this.ai[1] != -1f && Main.netMode != 1)
				{
					if (!NPC.AnyNPCs(454))
					{
						this.ai[1] = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 454);
					}
					else
					{
						this.ai[1] = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 521);
					}
				}
				else if (this.ai[0] == 320f)
				{
					Kill();
					return;
				}
				bool flag34 = false;
				if (this.ai[1] == -1f)
				{
					if (alpha == 255)
					{
						flag34 = true;
					}
				}
				else
				{
					flag34 = !(this.ai[1] >= 0f) || !Main.npc[(int)this.ai[1]].active;
					if ((flag34 || Main.npc[(int)this.ai[1]].type != 439) && (flag34 || Main.npc[(int)this.ai[1]].type != 454) && (flag34 || Main.npc[(int)this.ai[1]].type != 521))
					{
						flag34 = true;
					}
				}
				if (flag34)
				{
					Kill();
				}
				else
				{
					Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
				}
			}
			else if (aiStyle == 90)
			{
				if (Main.player[owner].dead)
				{
					Kill();
				}
				if (Main.player[owner].magicLantern)
				{
					timeLeft = 2;
				}
				if (tileCollide)
				{
					if (!Collision.CanHit(base.position, base.width, base.height, Main.player[owner].Center, 1, 1))
					{
						tileCollide = false;
					}
					else if (!Collision.SolidCollision(base.position, base.width, base.height) && Collision.CanHitLine(base.position, base.width, base.height, Main.player[owner].Center, 1, 1))
					{
						tileCollide = true;
					}
				}
				direction = Main.player[owner].direction;
				spriteDirection = direction;
				Lighting.AddLight(base.position, 0.35f, 0.35f, 0.1f);
				localAI[0] += 1f;
				if (localAI[0] >= 10f)
				{
					localAI[0] = 0f;
					int num768 = 17;
					if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num768 * 16))
					{
						int num769 = (int)base.Center.X / 16;
						int num770 = (int)base.Center.Y / 16;
						for (int num771 = num769 - num768; num771 <= num769 + num768; num771++)
						{
							for (int num772 = num770 - num768; num772 <= num770 + num768; num772++)
							{
								if (Main.rand.Next(4) == 0 && new Vector2(num769 - num771, num770 - num772).Length() < (float)num768 && num771 > 0 && num771 < Main.maxTilesX - 1 && num772 > 0 && num772 < Main.maxTilesY - 1 && Main.tile[num771, num772] != null && Main.tile[num771, num772].active() && Main.IsTileSpelunkable(Main.tile[num771, num772]))
								{
									int num773 = Dust.NewDust(new Vector2(num771 * 16, num772 * 16), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
									Main.dust[num773].fadeIn = 0.75f;
									Dust dust = Main.dust[num773];
									dust.velocity *= 0.1f;
									Main.dust[num773].noLight = true;
								}
							}
						}
					}
				}
				Vector2 value46 = Main.player[owner].Center - base.Center;
				value46.X += 40 * direction;
				value46.Y -= 40f;
				float num774 = value46.Length();
				if (num774 > 1000f)
				{
					base.Center = Main.player[owner].Center;
				}
				float num775 = 3f;
				float num776 = 4f;
				if (num774 > 200f)
				{
					num776 += (num774 - 200f) * 0.1f;
					tileCollide = false;
				}
				if (num774 < num776)
				{
					base.velocity *= 0.25f;
					num776 = num774;
				}
				if (value46.X != 0f || value46.Y != 0f)
				{
					value46.Normalize();
					value46 *= num776;
				}
				base.velocity = (base.velocity * (num775 - 1f) + value46) / num775;
				if (base.velocity.Length() > 6f)
				{
					float num777 = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					if ((double)Math.Abs(rotation - num777) >= 3.14)
					{
						if (num777 < rotation)
						{
							rotation -= 6.28f;
						}
						else
						{
							rotation += 6.28f;
						}
					}
					rotation = (rotation * 4f + num777) / 5f;
					frameCounter++;
					if (frameCounter > 4)
					{
						frameCounter = 0;
						frame++;
						if (frame > 7)
						{
							frame = 4;
						}
					}
					if (frame < 4)
					{
						frame = 7;
					}
					return;
				}
				if ((double)rotation > 3.14)
				{
					rotation -= 6.28f;
				}
				if ((double)rotation > -0.01 && (double)rotation < 0.01)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.9f;
				}
				frameCounter++;
				if (frameCounter > 6)
				{
					frameCounter = 0;
					frame++;
					if (frame > 3)
					{
						frame = 0;
					}
				}
			}
			else if (aiStyle == 91)
			{
				Vector2 center10 = base.Center;
				scale = 1f - localAI[0];
				base.width = (int)(20f * scale);
				base.height = base.width;
				base.position.X = center10.X - (float)(base.width / 2);
				base.position.Y = center10.Y - (float)(base.height / 2);
				if ((double)localAI[0] < 0.1)
				{
					localAI[0] += 0.01f;
				}
				else
				{
					localAI[0] += 0.025f;
				}
				if (localAI[0] >= 0.95f)
				{
					Kill();
				}
				base.velocity.X += this.ai[0] * 1.5f;
				base.velocity.Y += this.ai[1] * 1.5f;
				if (base.velocity.Length() > 16f)
				{
					base.velocity.Normalize();
					base.velocity *= 16f;
				}
				this.ai[0] *= 1.05f;
				this.ai[1] *= 1.05f;
				if (scale < 1f)
				{
					for (int num778 = 0; (float)num778 < scale * 10f; num778++)
					{
						int num779 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, base.velocity.X, base.velocity.Y, 100, default(Color), 1.1f);
						Main.dust[num779].position = (Main.dust[num779].position + base.Center) / 2f;
						Main.dust[num779].noGravity = true;
						Dust dust = Main.dust[num779];
						dust.velocity *= 0.1f;
						dust = Main.dust[num779];
						dust.velocity -= base.velocity * (1.3f - scale);
						Main.dust[num779].fadeIn = 100 + owner;
						dust = Main.dust[num779];
						dust.scale += scale * 0.75f;
					}
				}
			}
			else if (aiStyle == 92)
			{
				tileCollide = false;
				this.ai[1] += 1f;
				if (this.ai[1] > 60f)
				{
					this.ai[0] += 10f;
				}
				if (this.ai[0] > 255f)
				{
					Kill();
					this.ai[0] = 255f;
				}
				alpha = (int)(100.0 + (double)this.ai[0] * 0.7);
				rotation += base.velocity.X * 0.1f;
				rotation += (float)direction * 0.003f;
				base.velocity *= 0.96f;
				Rectangle rectangle5 = new Rectangle((int)base.position.X, (int)base.position.Y, base.width, base.height);
				for (int num780 = 0; num780 < 1000; num780++)
				{
					if (num780 == whoAmI || !Main.projectile[num780].active || Main.projectile[num780].type < 511 || Main.projectile[num780].type > 513)
					{
						continue;
					}
					Rectangle value47 = new Rectangle((int)Main.projectile[num780].position.X, (int)Main.projectile[num780].position.Y, Main.projectile[num780].width, Main.projectile[num780].height);
					if (!rectangle5.Intersects(value47))
					{
						continue;
					}
					Vector2 vector59 = Main.projectile[num780].Center - base.Center;
					if (vector59.X == 0f && vector59.Y == 0f)
					{
						if (num780 < whoAmI)
						{
							vector59.X = -1f;
							vector59.Y = 1f;
						}
						else
						{
							vector59.X = 1f;
							vector59.Y = -1f;
						}
					}
					vector59.Normalize();
					vector59 *= 0.005f;
					base.velocity -= vector59;
					Projectile projectile2 = Main.projectile[num780];
					projectile2.velocity += vector59;
				}
			}
			else if (aiStyle == 93)
			{
				if (alpha > 0)
				{
					alpha -= 25;
					if (alpha <= 0)
					{
						alpha = 0;
					}
				}
				if (base.velocity.Y > 18f)
				{
					base.velocity.Y = 18f;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] > 20f)
					{
						base.velocity.Y += 0.1f;
						base.velocity.X *= 0.992f;
					}
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					return;
				}
				tileCollide = false;
				if (this.ai[0] == 1f)
				{
					tileCollide = false;
					base.velocity *= 0.6f;
				}
				else
				{
					tileCollide = false;
					int num781 = (int)(0f - this.ai[0]);
					num781--;
					base.position = Main.npc[num781].Center - base.velocity;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					if (!Main.npc[num781].active || Main.npc[num781].life < 0)
					{
						tileCollide = true;
						this.ai[0] = 0f;
						this.ai[1] = 20f;
						base.velocity = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						base.velocity.Normalize();
						base.velocity *= 6f;
						netUpdate = true;
					}
					else if (base.velocity.Length() > (float)((Main.npc[num781].width + Main.npc[num781].height) / 3))
					{
						base.velocity *= 0.99f;
					}
				}
				if (this.ai[0] != 0f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] > 90f)
					{
						Kill();
					}
				}
			}
			else if (aiStyle == 94)
			{
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				this.ai[0]++;
				if (this.ai[0] <= 40f)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					base.velocity *= 0.85f;
					if (this.ai[0] == 40f)
					{
						netUpdate = true;
						switch (Main.rand.Next(3))
						{
						case 0:
							this.ai[1] = 10f;
							break;
						case 1:
							this.ai[1] = 15f;
							break;
						case 2:
							this.ai[1] = 30f;
							break;
						}
					}
				}
				else if (this.ai[0] <= 60f)
				{
					base.velocity = Vector2.Zero;
					if (this.ai[0] == 60f)
					{
						netUpdate = true;
					}
				}
				else if (this.ai[0] <= 210f)
				{
					if (Main.netMode != 1 && (localAI[0] += 1f) >= this.ai[1])
					{
						localAI[0] = 0f;
						int num782 = Item.NewItem((int)base.Center.X, (int)base.Center.Y, 0, 0, 73);
						Main.item[num782].velocity = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * new Vector2(3f, 2f) * (Main.rand.NextFloat() * 0.5f + 0.5f) - Vector2.UnitY * 1f;
					}
					if (this.ai[0] == 210f)
					{
						netUpdate = true;
					}
				}
				else
				{
					scale -= 71f / (678f * (float)Math.PI);
					alpha += 15;
					if (this.ai[0] == 239f)
					{
						netUpdate = true;
					}
					if (this.ai[0] == 240f)
					{
						Kill();
					}
				}
				if (alpha < 90 && Main.rand.Next(3) == 0)
				{
					Vector2 value48 = new Vector2(base.width, base.height) * scale * 0.85f;
					value48 /= 2f;
					Vector2 value49 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * value48;
					int num783 = Dust.NewDust(base.Center + value49, 0, 0, 246);
					Main.dust[num783].position = base.Center + value49;
					Main.dust[num783].velocity = Vector2.Zero;
				}
				float num784 = 0.8f;
				float num785 = 181f / 255f;
				float num786 = 24f / 85f;
				Lighting.AddLight(base.Center, num784 * 0.3f, num785 * 0.3f, num786 * 0.3f);
			}
			else if (aiStyle == 95)
			{
				if (localAI[0] > 2f)
				{
					alpha -= 20;
					if (alpha < 100)
					{
						alpha = 100;
					}
				}
				else
				{
					localAI[0] += 1f;
				}
				if (this.ai[0] > 30f)
				{
					if (base.velocity.Y > -8f)
					{
						base.velocity.Y -= 0.05f;
					}
					base.velocity.X *= 0.98f;
				}
				else
				{
					this.ai[0] += 1f;
				}
				rotation = base.velocity.X * 0.1f;
				if (wet)
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.98f;
					}
					if (base.velocity.Y > -8f)
					{
						base.velocity.Y -= 0.2f;
					}
					base.velocity.X *= 0.94f;
				}
			}
			else if (aiStyle == 96)
			{
				this.ai[0] += 0.6f;
				if (this.ai[0] > 500f)
				{
					Kill();
				}
				for (int num787 = 0; num787 < 2; num787++)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num788 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 170, 0f, 0f, 100);
						Main.dust[num788].position = (Main.dust[num788].position + base.Center) / 2f;
						Main.dust[num788].noGravity = true;
						Dust dust = Main.dust[num788];
						dust.velocity *= 0.1f;
						if (num787 == 1)
						{
							dust = Main.dust[num788];
							dust.position += base.velocity / 2f;
						}
						float num789 = (800f - this.ai[0]) / 800f;
						dust = Main.dust[num788];
						dust.scale *= num789 + 0.1f;
					}
				}
				base.velocity.Y += 0.008f;
			}
			else if (aiStyle == 97)
			{
				frameCounter++;
				float num790 = 4f;
				if ((float)frameCounter < num790 * 1f)
				{
					frame = 0;
				}
				else if ((float)frameCounter < num790 * 2f)
				{
					frame = 1;
				}
				else if ((float)frameCounter < num790 * 3f)
				{
					frame = 2;
				}
				else if ((float)frameCounter < num790 * 4f)
				{
					frame = 3;
				}
				else if ((float)frameCounter < num790 * 5f)
				{
					frame = 4;
				}
				else if ((float)frameCounter < num790 * 6f)
				{
					frame = 3;
				}
				else if ((float)frameCounter < num790 * 7f)
				{
					frame = 2;
				}
				else if ((float)frameCounter < num790 * 8f)
				{
					frame = 1;
				}
				else
				{
					frameCounter = 0;
					frame = 0;
				}
				Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
				if (owner == Main.myPlayer)
				{
					for (int num791 = 0; num791 < 1000; num791++)
					{
						if (num791 != whoAmI && Main.projectile[num791].active && Main.projectile[num791].owner == owner && Main.projectile[num791].type == type)
						{
							if (timeLeft >= Main.projectile[num791].timeLeft)
							{
								Main.projectile[num791].Kill();
							}
							else
							{
								Kill();
							}
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					if ((double)base.velocity.Length() < 0.1)
					{
						base.velocity.X = 0f;
						base.velocity.Y = 0f;
						this.ai[0] = 1f;
						this.ai[1] = 45f;
						return;
					}
					base.velocity *= 0.94f;
					if (base.velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					spriteDirection = direction;
					return;
				}
				if (Main.player[owner].Center.X < base.Center.X)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				spriteDirection = direction;
				this.ai[1] += 1f;
				float num792 = 0.005f;
				if (this.ai[1] > 0f)
				{
					base.velocity.Y -= num792;
				}
				else
				{
					base.velocity.Y += num792;
				}
				if (this.ai[1] >= 90f)
				{
					this.ai[1] *= -1f;
				}
			}
			else if (aiStyle == 98)
			{
				Vector2 value50 = new Vector2(this.ai[0], this.ai[1]);
				Vector2 value51 = value50 - base.Center;
				if (value51.Length() < base.velocity.Length())
				{
					Kill();
					return;
				}
				value51.Normalize();
				value51 *= 15f;
				base.velocity = Vector2.Lerp(base.velocity, value51, 0.1f);
				for (int num793 = 0; num793 < 2; num793++)
				{
					int num794 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 100);
					Main.dust[num794].noGravity = true;
					Dust dust = Main.dust[num794];
					dust.position += new Vector2(4f);
					dust = Main.dust[num794];
					dust.scale += Main.rand.NextFloat() * 1f;
				}
			}
			else if (aiStyle == 99 && type >= 556 && type <= 561)
			{
				AI_099_1();
			}
			else if (aiStyle == 99)
			{
				AI_099_2();
			}
			else if (aiStyle == 100)
			{
				AI_100_Medusa();
			}
			else if (aiStyle == 101)
			{
				float num795 = 20f;
				localAI[0]++;
				alpha = (int)MathHelper.Lerp(0f, 255f, localAI[0] / num795);
				int num796 = (int)this.ai[0];
				int num797 = -1;
				int num798 = -1;
				switch (type)
				{
				case 536:
					num797 = 535;
					num798 = 0;
					break;
				case 591:
					num798 = 1;
					break;
				}
				switch (num798)
				{
				case 1:
					if (localAI[0] >= num795 || num796 < 0 || num796 > 255 || !Main.player[num796].active || Main.player[num796].dead)
					{
						Kill();
						return;
					}
					if (type == 591)
					{
						base.Center = Mount.GetMinecartMechPoint(Main.player[num796], 20, -19) - base.velocity;
						rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
						if (Math.Sign(base.velocity.X) != Math.Sign(Main.player[num796].velocity.X) && Main.player[num796].velocity.X != 0f)
						{
							Kill();
							return;
						}
					}
					else
					{
						base.Center = Main.player[num796].Center - base.velocity;
					}
					break;
				case 0:
					if (localAI[0] >= num795 || num796 < 0 || num796 > 1000 || !Main.projectile[num796].active || Main.projectile[num796].type != num797)
					{
						Kill();
						return;
					}
					base.Center = Main.projectile[num796].Center - base.velocity;
					break;
				}
				rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
			}
			else if (aiStyle == 102)
			{
				int num799 = 0;
				float num800 = 0f;
				float x4 = 0f;
				float y3 = 0f;
				int num801 = -1;
				int num802 = 0;
				float num803 = 0f;
				bool flag35 = true;
				bool flag36 = false;
				bool flag37 = false;
				switch (type)
				{
				case 539:
					num799 = 407;
					num800 = 210f;
					x4 = 0.15f;
					y3 = 0.075f;
					num803 = 16f;
					break;
				case 573:
					num799 = 424;
					num800 = 90f;
					num803 = 20f;
					flag35 = false;
					flag36 = true;
					break;
				case 574:
					num799 = 420;
					num800 = 180f;
					x4 = 0.15f;
					y3 = 0.075f;
					num803 = 8f;
					flag35 = false;
					num801 = 576;
					num802 = 65;
					if (Main.expertMode)
					{
						num802 = 50;
					}
					flag37 = true;
					break;
				}
				if (flag37)
				{
					int num804 = (int)this.ai[1];
					if (!Main.npc[num804].active || Main.npc[num804].type != num799)
					{
						Kill();
						return;
					}
					timeLeft = 2;
				}
				this.ai[0]++;
				if (this.ai[0] < num800)
				{
					bool flag38 = true;
					int num805 = (int)this.ai[1];
					if (Main.npc[num805].active && Main.npc[num805].type == num799)
					{
						if (!flag36 && Main.npc[num805].oldPos[1] != Vector2.Zero)
						{
							base.position += Main.npc[num805].position - Main.npc[num805].oldPos[1];
						}
					}
					else
					{
						this.ai[0] = num800;
						flag38 = false;
					}
					if (flag38 && !flag36)
					{
						base.velocity += new Vector2(Math.Sign(Main.npc[num805].Center.X - base.Center.X), Math.Sign(Main.npc[num805].Center.Y - base.Center.Y)) * new Vector2(x4, y3);
						if (base.velocity.Length() > 6f)
						{
							base.velocity *= 6f / base.velocity.Length();
						}
					}
					if (type == 539)
					{
						if (Main.rand.Next(12) == 0)
						{
							int num806 = Dust.NewDust(base.Center, 8, 8, 180);
							Main.dust[num806].position = base.Center;
							Dust dust = Main.dust[num806];
							dust.velocity *= 0.2f;
							Main.dust[num806].noGravity = true;
						}
						if (++frameCounter >= 4)
						{
							frameCounter = 0;
							if (++frame >= Main.projFrames[type])
							{
								frame = 0;
							}
						}
						rotation = base.velocity.X * 0.1f;
					}
					if (type == 573)
					{
						if (Main.rand.Next(2) == 0)
						{
							int num807 = Dust.NewDust(base.Center, 8, 8, 242);
							Main.dust[num807].position = base.Center;
							Main.dust[num807].velocity = base.velocity;
							Main.dust[num807].noGravity = true;
							Main.dust[num807].scale = 1.5f;
						}
						alpha = 255;
					}
					if (type == 574)
					{
						if (Main.rand.Next(10) == 0)
						{
							int num808 = Dust.NewDust(base.Center, 8, 8, 242);
							Main.dust[num808].position = base.Center;
							Main.dust[num808].velocity = base.velocity;
							Main.dust[num808].noGravity = true;
							Main.dust[num808].scale = 1.5f;
						}
						if (flag38)
						{
							int target2 = Main.npc[num805].target;
							float num809 = base.velocity.ToRotation();
							if (Collision.CanHitLine(base.Center, 0, 0, Main.player[target2].Center, 0, 0))
							{
								num809 = DirectionTo(Main.player[target2].Center).ToRotation();
							}
							rotation = rotation.AngleLerp(num809 + (float)Math.PI / 2f, 0.2f);
						}
						frame = 1;
					}
				}
				if (this.ai[0] == num800)
				{
					bool flag39 = true;
					int num810 = -1;
					if (!flag35)
					{
						int num811 = (int)this.ai[1];
						if (Main.npc[num811].active && Main.npc[num811].type == num799)
						{
							num810 = Main.npc[num811].target;
						}
						else
						{
							flag39 = false;
						}
					}
					else
					{
						flag39 = false;
					}
					if (!flag39)
					{
						num810 = Player.FindClosest(base.position, base.width, base.height);
					}
					Vector2 value52 = Main.player[num810].Center - base.Center;
					value52.X += Main.rand.Next(-50, 51);
					value52.Y += Main.rand.Next(-50, 51);
					value52.X *= (float)Main.rand.Next(80, 121) * 0.01f;
					value52.Y *= (float)Main.rand.Next(80, 121) * 0.01f;
					Vector2 vector60 = Vector2.Normalize(value52);
					if (vector60.HasNaNs())
					{
						vector60 = Vector2.UnitY;
					}
					if (num801 == -1)
					{
						base.velocity = vector60 * num803;
						netUpdate = true;
					}
					else
					{
						if (Main.netMode != 1 && Collision.CanHitLine(base.Center, 0, 0, Main.player[num810].Center, 0, 0))
						{
							NewProjectile(base.Center.X, base.Center.Y, vector60.X * num803, vector60.Y * num803, num801, num802, 1f, Main.myPlayer);
						}
						this.ai[0] = 0f;
					}
				}
				if (!(this.ai[0] >= num800))
				{
					return;
				}
				rotation = rotation.AngleLerp(base.velocity.ToRotation() + (float)Math.PI / 2f, 0.4f);
				if (type == 539)
				{
					if (++frameCounter >= 2)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (Main.rand.Next(2) == 0)
					{
						int num812 = Dust.NewDust(base.position, base.width, base.height, 180, 0f, 0f, 100);
						Dust dust = Main.dust[num812];
						dust.scale += (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num812].noGravity = true;
						dust = Main.dust[num812];
						dust.velocity *= 0.1f;
						Main.dust[num812].fadeIn = Main.rand.NextFloat() * 1.5f;
					}
					if (Main.rand.Next(3) == 0)
					{
						int num813 = Dust.NewDust(base.position, base.width, base.height, 176, 0f, 0f, 100);
						Dust dust = Main.dust[num813];
						dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num813].noGravity = true;
						dust = Main.dust[num813];
						dust.velocity *= 0.1f;
						Main.dust[num813].fadeIn = Main.rand.NextFloat() * 1.5f;
					}
				}
				if (type == 573)
				{
					if (Main.rand.Next(4) == 0)
					{
						int num814 = Dust.NewDust(base.Center, 8, 8, 242);
						Main.dust[num814].position = base.Center;
						Dust dust = Main.dust[num814];
						dust.velocity *= 0.2f;
						Main.dust[num814].noGravity = true;
						Main.dust[num814].scale = 1.5f;
					}
					alpha = 0;
				}
			}
			else if (aiStyle == 103)
			{
				scale = this.ai[1];
				this.ai[0]++;
				if (this.ai[0] >= 30f)
				{
					alpha += 25;
					if (alpha >= 250)
					{
						Kill();
					}
				}
				else
				{
					if (!(this.ai[0] >= 0f))
					{
						return;
					}
					alpha -= 25;
					if (alpha < 0)
					{
						alpha = 0;
						if (localAI[1] == 0f && Main.netMode != 1 && localAI[0] != 0f)
						{
							localAI[1] = 1f;
							NPC.NewNPC((int)base.Center.X, (int)base.Bottom.Y, (int)localAI[0]);
						}
					}
				}
			}
			else if (aiStyle == 104)
			{
				if (this.ai[0] == 1f)
				{
					scale *= 0.995f;
					alpha += 3;
					if (alpha >= 250)
					{
						Kill();
					}
				}
				else
				{
					scale *= 1.01f;
					alpha -= 7;
					if (alpha < 0)
					{
						alpha = 0;
						this.ai[0] = 1f;
					}
				}
				frameCounter++;
				if (frameCounter > 6)
				{
					frameCounter = 0;
					frame++;
					if (frame > 3)
					{
						frame = 0;
					}
				}
				base.velocity.Y -= 0.03f;
				base.velocity.X *= 0.97f;
			}
			else if (aiStyle == 105)
			{
				float num815 = 1f - (float)alpha / 255f;
				num815 *= scale;
				Lighting.AddLight(base.Center, 0.2f * num815, 0.275f * num815, 0.075f * num815);
				localAI[0] += 1f;
				if (localAI[0] >= 90f)
				{
					localAI[0] *= -1f;
				}
				if (localAI[0] >= 0f)
				{
					scale += 0.003f;
				}
				else
				{
					scale -= 0.003f;
				}
				rotation += 0.0025f * scale;
				float num816 = 1f;
				float num817 = 1f;
				if (identity % 6 == 0)
				{
					num817 *= -1f;
				}
				if (identity % 6 == 1)
				{
					num816 *= -1f;
				}
				if (identity % 6 == 2)
				{
					num817 *= -1f;
					num816 *= -1f;
				}
				if (identity % 6 == 3)
				{
					num817 = 0f;
				}
				if (identity % 6 == 4)
				{
					num816 = 0f;
				}
				localAI[1] += 1f;
				if (localAI[1] > 60f)
				{
					localAI[1] = -180f;
				}
				if (localAI[1] >= -60f)
				{
					base.velocity.X += 0.002f * num817;
					base.velocity.Y += 0.002f * num816;
				}
				else
				{
					base.velocity.X -= 0.002f * num817;
					base.velocity.Y -= 0.002f * num816;
				}
				this.ai[0] += 1f;
				if (this.ai[0] > 5400f)
				{
					damage = 0;
					this.ai[1] = 1f;
					if (alpha < 255)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					else if (owner == Main.myPlayer)
					{
						Kill();
					}
				}
				else
				{
					float num818 = (base.Center - Main.player[owner].Center).Length() / 100f;
					if (num818 > 4f)
					{
						num818 *= 1.1f;
					}
					if (num818 > 5f)
					{
						num818 *= 1.2f;
					}
					if (num818 > 6f)
					{
						num818 *= 1.3f;
					}
					if (num818 > 7f)
					{
						num818 *= 1.4f;
					}
					if (num818 > 8f)
					{
						num818 *= 1.5f;
					}
					if (num818 > 9f)
					{
						num818 *= 1.6f;
					}
					if (num818 > 10f)
					{
						num818 *= 1.7f;
					}
					if (!Main.player[owner].sporeSac)
					{
						num818 += 100f;
					}
					this.ai[0] += num818;
					if (alpha > 50)
					{
						alpha -= 10;
						if (alpha < 50)
						{
							alpha = 50;
						}
					}
				}
				bool flag40 = false;
				Vector2 value53 = new Vector2(0f, 0f);
				float num819 = 280f;
				for (int num820 = 0; num820 < 200; num820++)
				{
					if (Main.npc[num820].CanBeChasedBy(this))
					{
						float num821 = Main.npc[num820].position.X + (float)(Main.npc[num820].width / 2);
						float num822 = Main.npc[num820].position.Y + (float)(Main.npc[num820].height / 2);
						float num823 = Math.Abs(base.position.X + (float)(base.width / 2) - num821) + Math.Abs(base.position.Y + (float)(base.height / 2) - num822);
						if (num823 < num819)
						{
							num819 = num823;
							value53 = Main.npc[num820].Center;
							flag40 = true;
						}
					}
				}
				if (flag40)
				{
					Vector2 value54 = value53 - base.Center;
					value54.Normalize();
					value54 *= 0.75f;
					base.velocity = (base.velocity * 10f + value54) / 11f;
				}
				else if ((double)base.velocity.Length() > 0.2)
				{
					base.velocity *= 0.98f;
				}
			}
			else if (aiStyle == 106)
			{
				rotation += base.velocity.X * 0.02f;
				if (base.velocity.X < 0f)
				{
					rotation -= Math.Abs(base.velocity.Y) * 0.02f;
				}
				else
				{
					rotation += Math.Abs(base.velocity.Y) * 0.02f;
				}
				base.velocity *= 0.98f;
				this.ai[0] += 1f;
				if (this.ai[0] >= 60f)
				{
					if (alpha < 255)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					else if (owner == Main.myPlayer)
					{
						Kill();
					}
				}
				else if (alpha > 80)
				{
					alpha -= 30;
					if (alpha < 80)
					{
						alpha = 80;
					}
				}
			}
			else if (aiStyle == 107)
			{
				float num824 = 10f;
				float scaleFactor5 = 5f;
				float num825 = 40f;
				if (type == 575)
				{
					if (timeLeft > 30 && alpha > 0)
					{
						alpha -= 25;
					}
					if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, base.width, base.height))
					{
						alpha = 128;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (++frameCounter > 4)
					{
						frameCounter = 0;
						if (++frame >= 4)
						{
							frame = 0;
						}
					}
					Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
				}
				else if (type == 596)
				{
					num824 = 10f;
					scaleFactor5 = 7.5f;
					if (timeLeft > 30 && alpha > 0)
					{
						alpha -= 25;
					}
					if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, base.width, base.height))
					{
						alpha = 128;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (++frameCounter > 4)
					{
						frameCounter = 0;
						if (++frame >= 4)
						{
							frame = 0;
						}
					}
					float num826 = 0.5f;
					if (timeLeft < 120)
					{
						num826 = 1.1f;
					}
					if (timeLeft < 60)
					{
						num826 = 1.6f;
					}
					this.ai[1]++;
					float num827 = this.ai[1] / 180f * ((float)Math.PI * 2f);
					for (float num828 = 0f; num828 < 3f; num828++)
					{
						if (Main.rand.Next(3) != 0)
						{
							return;
						}
						Dust dust17 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f)];
						dust17.position = base.Center + Vector2.UnitY.RotatedBy(num828 * ((float)Math.PI * 2f) / 3f + this.ai[1]) * 10f;
						dust17.noGravity = true;
						dust17.velocity = DirectionFrom(dust17.position);
						dust17.scale = num826;
						dust17.fadeIn = 0.5f;
						dust17.alpha = 200;
					}
					if (timeLeft < 4)
					{
						int num829 = 40;
						if (Main.expertMode)
						{
							num829 = 30;
						}
						base.position = base.Center;
						base.width = (base.height = 60);
						base.Center = base.position;
						damage = num829;
						for (int num830 = 0; num830 < 10; num830++)
						{
							Dust dust17 = Main.dust[Dust.NewDust(base.position, base.width, base.height, Utils.SelectRandom<int>(Main.rand, 27, 6), 0f, -2f)];
							dust17.noGravity = true;
							if (dust17.position != base.Center)
							{
								dust17.velocity = DirectionTo(dust17.position) * 3f;
							}
						}
					}
				}
				int num831 = (int)this.ai[0];
				if (num831 >= 0 && Main.player[num831].active && !Main.player[num831].dead)
				{
					if (Distance(Main.player[num831].Center) > num825)
					{
						Vector2 vector61 = DirectionTo(Main.player[num831].Center);
						if (vector61.HasNaNs())
						{
							vector61 = Vector2.UnitY;
						}
						base.velocity = (base.velocity * (num824 - 1f) + vector61 * scaleFactor5) / num824;
					}
				}
				else
				{
					if (timeLeft > 30)
					{
						timeLeft = 30;
					}
					if (this.ai[0] != -1f)
					{
						this.ai[0] = -1f;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 108)
			{
				if (type == 578 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					int num832 = Player.FindClosest(base.Center, 0, 0);
					Vector2 vector62 = Main.player[num832].Center - base.Center;
					if (vector62 == Vector2.Zero)
					{
						vector62 = Vector2.UnitY;
					}
					this.ai[1] = vector62.ToRotation();
					netUpdate = true;
				}
				this.ai[0]++;
				if (this.ai[0] <= 50f)
				{
					if (type == 579)
					{
						if (Main.rand.Next(4) == 0)
						{
							Vector2 vector63 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust18 = Main.dust[Dust.NewDust(base.Center - vector63 * 30f, 0, 0, 229)];
							dust18.noGravity = true;
							dust18.position = base.Center - vector63 * Main.rand.Next(10, 21);
							dust18.velocity = vector63.RotatedBy(1.5707963705062866) * 4f;
							dust18.scale = 0.5f + Main.rand.NextFloat();
							dust18.fadeIn = 0.5f;
						}
						if (Main.rand.Next(4) == 0)
						{
							Vector2 vector64 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust19 = Main.dust[Dust.NewDust(base.Center - vector64 * 30f, 0, 0, 240)];
							dust19.noGravity = true;
							dust19.position = base.Center - vector64 * 30f;
							dust19.velocity = vector64.RotatedBy(-1.5707963705062866) * 2f;
							dust19.scale = 0.5f + Main.rand.NextFloat();
							dust19.fadeIn = 0.5f;
						}
					}
					if (type == 578 && Main.rand.Next(2) == 0)
					{
						Vector2 vector65 = this.ai[1].ToRotationVector2();
						Vector2 vector66 = vector65.RotatedBy(1.5707963705062866) * (Main.rand.Next(2) == 0).ToDirectionInt() * Main.rand.Next(10, 21);
						Vector2 value55 = vector65 * Main.rand.Next(-80, 81);
						Vector2 velocity2 = value55 - vector66;
						velocity2 /= 10f;
						int num833 = 229;
						Dust dust20 = Main.dust[Dust.NewDust(base.Center, 0, 0, num833)];
						dust20.noGravity = true;
						dust20.position = base.Center + vector66;
						dust20.velocity = velocity2;
						dust20.scale = 0.5f + Main.rand.NextFloat();
						dust20.fadeIn = 0.5f;
						value55 = vector65 * Main.rand.Next(40, 121);
						velocity2 = value55 - vector66 / 2f;
						velocity2 /= 10f;
						dust20 = Main.dust[Dust.NewDust(base.Center, 0, 0, num833)];
						dust20.noGravity = true;
						dust20.position = base.Center + vector66 / 2f;
						dust20.velocity = velocity2;
						dust20.scale = 1f + Main.rand.NextFloat();
					}
					if (type == 813)
					{
						if (Main.rand.Next(4) == 0)
						{
							Vector2 vector67 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust21 = Main.dust[Dust.NewDust(base.Center - vector67 * 30f, 0, 0, 5)];
							dust21.noGravity = true;
							dust21.position = base.Center - vector67 * Main.rand.Next(10, 21);
							dust21.velocity = vector67.RotatedBy(1.5707963705062866) * 4f;
							dust21.scale = 0.5f + Main.rand.NextFloat();
							dust21.fadeIn = 0.5f;
						}
						if (Main.rand.Next(4) == 0)
						{
							Vector2 vector68 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust22 = Main.dust[Dust.NewDust(base.Center - vector68 * 30f, 0, 0, 240)];
							dust22.noGravity = true;
							dust22.position = base.Center - vector68 * 30f;
							dust22.velocity = vector68.RotatedBy(-1.5707963705062866) * 2f;
							dust22.scale = 0.5f + Main.rand.NextFloat();
							dust22.fadeIn = 0.5f;
						}
					}
				}
				else if (this.ai[0] <= 90f)
				{
					if (this.ai[0] == 90f)
					{
						SoundEngine.PlaySound(SoundID.Item8, base.position);
					}
					scale = (this.ai[0] - 50f) / 40f;
					alpha = 255 - (int)(255f * scale);
					rotation -= (float)Math.PI / 20f;
					if (type == 579)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector69 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust23 = Main.dust[Dust.NewDust(base.Center - vector69 * 30f, 0, 0, 229)];
							dust23.noGravity = true;
							dust23.position = base.Center - vector69 * Main.rand.Next(10, 21);
							dust23.velocity = vector69.RotatedBy(1.5707963705062866) * 6f;
							dust23.scale = 0.5f + Main.rand.NextFloat();
							dust23.fadeIn = 0.5f;
							dust23.customData = base.Center;
						}
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector70 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust24 = Main.dust[Dust.NewDust(base.Center - vector70 * 30f, 0, 0, 240)];
							dust24.noGravity = true;
							dust24.position = base.Center - vector70 * 30f;
							dust24.velocity = vector70.RotatedBy(-1.5707963705062866) * 3f;
							dust24.scale = 0.5f + Main.rand.NextFloat();
							dust24.fadeIn = 0.5f;
							dust24.customData = base.Center;
						}
					}
					if (type == 578)
					{
						Vector2 vector71 = this.ai[1].ToRotationVector2();
						Vector2 value56 = vector71.RotatedBy(1.5707963705062866) * (Main.rand.Next(2) == 0).ToDirectionInt() * Main.rand.Next(10, 21);
						vector71 *= (float)Main.rand.Next(-80, 81);
						Vector2 velocity3 = vector71 - value56;
						velocity3 /= 10f;
						int num834 = Utils.SelectRandom<int>(Main.rand, 229, 229);
						Dust dust25 = Main.dust[Dust.NewDust(base.Center, 0, 0, num834)];
						dust25.noGravity = true;
						dust25.position = base.Center + value56;
						dust25.velocity = velocity3;
						dust25.scale = 0.5f + Main.rand.NextFloat();
						dust25.fadeIn = 0.5f;
						if (this.ai[0] == 90f && Main.netMode != 1)
						{
							Vector2 vector72 = this.ai[1].ToRotationVector2() * 8f;
							float ai2 = Main.rand.Next(80);
							NewProjectile(base.Center.X - vector72.X, base.Center.Y - vector72.Y, vector72.X, vector72.Y, 580, 15, 1f, Main.myPlayer, this.ai[1], ai2);
						}
					}
					else if (type == 579)
					{
						if (this.ai[0] == 90f && Main.netMode != 1)
						{
							for (int num835 = 0; num835 < 2; num835++)
							{
								int num836 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 427, whoAmI);
								Main.npc[num836].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * Main.rand.Next(4, 9) - Vector2.UnitY * 2f;
								Main.npc[num836].netUpdate = true;
							}
						}
					}
					else if (type == 813)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector73 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust26 = Main.dust[Dust.NewDust(base.Center - vector73 * 30f, 0, 0, 5)];
							dust26.noGravity = true;
							dust26.position = base.Center - vector73 * Main.rand.Next(10, 21);
							dust26.velocity = vector73.RotatedBy(1.5707963705062866) * 6f;
							dust26.scale = 0.5f + Main.rand.NextFloat();
							dust26.fadeIn = 0.5f;
							dust26.customData = base.Center;
						}
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector74 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust27 = Main.dust[Dust.NewDust(base.Center - vector74 * 30f, 0, 0, 240)];
							dust27.noGravity = true;
							dust27.position = base.Center - vector74 * 30f;
							dust27.velocity = vector74.RotatedBy(-1.5707963705062866) * 3f;
							dust27.scale = 0.5f + Main.rand.NextFloat();
							dust27.fadeIn = 0.5f;
							dust27.customData = base.Center;
						}
						if (this.ai[0] == 90f && Main.netMode != 1)
						{
							int num837 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 619, whoAmI);
							Main.npc[num837].netUpdate = true;
						}
					}
				}
				else if (this.ai[0] <= 120f)
				{
					scale = 1f;
					alpha = 0;
					rotation -= (float)Math.PI / 60f;
					if (type == 813)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector75 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust28 = Main.dust[Dust.NewDust(base.Center - vector75 * 30f, 0, 0, 5)];
							dust28.noGravity = true;
							dust28.position = base.Center - vector75 * Main.rand.Next(10, 21);
							dust28.velocity = vector75.RotatedBy(1.5707963705062866) * 6f;
							dust28.scale = 0.5f + Main.rand.NextFloat();
							dust28.fadeIn = 0.5f;
							dust28.customData = base.Center;
						}
						else
						{
							Vector2 vector76 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust29 = Main.dust[Dust.NewDust(base.Center - vector76 * 30f, 0, 0, 240)];
							dust29.noGravity = true;
							dust29.position = base.Center - vector76 * 30f;
							dust29.velocity = vector76.RotatedBy(-1.5707963705062866) * 3f;
							dust29.scale = 0.5f + Main.rand.NextFloat();
							dust29.fadeIn = 0.5f;
							dust29.customData = base.Center;
						}
					}
					else if (Main.rand.Next(2) == 0)
					{
						Vector2 vector77 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust30 = Main.dust[Dust.NewDust(base.Center - vector77 * 30f, 0, 0, 229)];
						dust30.noGravity = true;
						dust30.position = base.Center - vector77 * Main.rand.Next(10, 21);
						dust30.velocity = vector77.RotatedBy(1.5707963705062866) * 6f;
						dust30.scale = 0.5f + Main.rand.NextFloat();
						dust30.fadeIn = 0.5f;
						dust30.customData = base.Center;
					}
					else
					{
						Vector2 vector78 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust31 = Main.dust[Dust.NewDust(base.Center - vector78 * 30f, 0, 0, 240)];
						dust31.noGravity = true;
						dust31.position = base.Center - vector78 * 30f;
						dust31.velocity = vector78.RotatedBy(-1.5707963705062866) * 3f;
						dust31.scale = 0.5f + Main.rand.NextFloat();
						dust31.fadeIn = 0.5f;
						dust31.customData = base.Center;
					}
				}
				else
				{
					scale = 1f - (this.ai[0] - 120f) / 60f;
					alpha = 255 - (int)(255f * scale);
					rotation -= (float)Math.PI / 30f;
					if (alpha >= 255)
					{
						Kill();
					}
					if (type == 813)
					{
						for (int num838 = 0; num838 < 2; num838++)
						{
							switch (Main.rand.Next(3))
							{
							case 0:
							{
								Vector2 vector80 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
								Dust dust33 = Main.dust[Dust.NewDust(base.Center - vector80 * 30f, 0, 0, 5)];
								dust33.noGravity = true;
								dust33.position = base.Center - vector80 * Main.rand.Next(10, 21);
								dust33.velocity = vector80.RotatedBy(1.5707963705062866) * 6f;
								dust33.scale = 0.5f + Main.rand.NextFloat();
								dust33.fadeIn = 0.5f;
								dust33.customData = base.Center;
								break;
							}
							case 1:
							{
								Vector2 vector79 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
								Dust dust32 = Main.dust[Dust.NewDust(base.Center - vector79 * 30f, 0, 0, 240)];
								dust32.noGravity = true;
								dust32.position = base.Center - vector79 * 30f;
								dust32.velocity = vector79.RotatedBy(-1.5707963705062866) * 3f;
								dust32.scale = 0.5f + Main.rand.NextFloat();
								dust32.fadeIn = 0.5f;
								dust32.customData = base.Center;
								break;
							}
							}
						}
					}
					else
					{
						for (int num839 = 0; num839 < 2; num839++)
						{
							switch (Main.rand.Next(3))
							{
							case 0:
							{
								Vector2 vector82 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
								Dust dust35 = Main.dust[Dust.NewDust(base.Center - vector82 * 30f, 0, 0, 229)];
								dust35.noGravity = true;
								dust35.position = base.Center - vector82 * Main.rand.Next(10, 21);
								dust35.velocity = vector82.RotatedBy(1.5707963705062866) * 6f;
								dust35.scale = 0.5f + Main.rand.NextFloat();
								dust35.fadeIn = 0.5f;
								dust35.customData = base.Center;
								break;
							}
							case 1:
							{
								Vector2 vector81 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
								Dust dust34 = Main.dust[Dust.NewDust(base.Center - vector81 * 30f, 0, 0, 240)];
								dust34.noGravity = true;
								dust34.position = base.Center - vector81 * 30f;
								dust34.velocity = vector81.RotatedBy(-1.5707963705062866) * 3f;
								dust34.scale = 0.5f + Main.rand.NextFloat();
								dust34.fadeIn = 0.5f;
								dust34.customData = base.Center;
								break;
							}
							}
						}
					}
				}
				if (type == 813 && Main.rand.NextFloat() < Opacity)
				{
					Dust dust36 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(3f, 20f), 90);
					dust36.velocity = Vector2.UnitY;
					dust36.noGravity = true;
					dust36.scale = scale;
				}
			}
			else if (aiStyle == 109)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = base.velocity.Length();
				}
				if (this.ai[0] == 0f)
				{
					localAI[0]++;
					if (localAI[0] > 30f)
					{
						this.ai[0] = 1f;
						localAI[0] = 0f;
						return;
					}
				}
				else if (this.ai[0] == 1f)
				{
					Vector2 zero2 = Vector2.Zero;
					if (type != 582 || !Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 124)
					{
						Kill();
						return;
					}
					NPC.lazyNPCOwnedProjectileSearchArray[(int)this.ai[1]] = whoAmI;
					zero2 = Main.npc[(int)this.ai[1]].Center;
					tileCollide = false;
					float num840 = localAI[1];
					Vector2 value57 = zero2 - base.Center;
					if (value57.Length() < num840)
					{
						Kill();
						return;
					}
					value57.Normalize();
					value57 *= num840;
					base.velocity = Vector2.Lerp(base.velocity, value57, 0.04f);
				}
				rotation += (float)Math.PI / 10f;
			}
			else if (aiStyle == 110)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = base.velocity.Length();
				}
				Vector2 zero3 = Vector2.Zero;
				if (Main.npc[(int)this.ai[0]].active && Main.npc[(int)this.ai[0]].townNPC)
				{
					zero3 = Main.npc[(int)this.ai[0]].Center;
					float num841 = localAI[1];
					Vector2 value58 = zero3 - base.Center;
					if (value58.Length() < num841 || base.Hitbox.Intersects(Main.npc[(int)this.ai[0]].Hitbox))
					{
						Kill();
						int num842 = Main.npc[(int)this.ai[0]].lifeMax - Main.npc[(int)this.ai[0]].life;
						if (num842 > 20)
						{
							num842 = 20;
						}
						if (num842 > 0)
						{
							NPC nPC8 = Main.npc[(int)this.ai[0]];
							nPC8.life += num842;
							Main.npc[(int)this.ai[0]].HealEffect(num842);
						}
					}
					else
					{
						value58.Normalize();
						value58 *= num841;
						if (value58.Y < base.velocity.Y)
						{
							value58.Y = base.velocity.Y;
						}
						value58.Y += 1f;
						base.velocity = Vector2.Lerp(base.velocity, value58, 0.04f);
						rotation += base.velocity.X * 0.05f;
					}
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 111)
			{
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 20 || Main.npc[(int)this.ai[1]].ai[0] != 14f)
				{
					Kill();
					return;
				}
				this.ai[0]++;
				rotation += (float)Math.PI / 300f;
				scale = this.ai[0] / 100f;
				if (scale > 1f)
				{
					scale = 1f;
				}
				alpha = (int)(255f * (1f - scale));
				float num843 = 300f;
				if (this.ai[0] >= 100f)
				{
					num843 = MathHelper.Lerp(300f, 600f, (this.ai[0] - 100f) / 200f);
				}
				if (num843 > 600f)
				{
					num843 = 600f;
				}
				if (this.ai[0] >= 500f)
				{
					alpha = (int)MathHelper.Lerp(0f, 255f, (this.ai[0] - 500f) / 100f);
					num843 = MathHelper.Lerp(600f, 1200f, (this.ai[0] - 500f) / 100f);
					rotation += (float)Math.PI / 300f;
				}
				if (Main.rand.Next(4) == 0)
				{
					float scaleFactor6 = num843;
					Vector2 value59 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
					float num844 = Main.rand.Next(3, 9);
					value59.Normalize();
					int num845 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 163, 0f, 0f, 100);
					Main.dust[num845].noGravity = true;
					Main.dust[num845].position = base.Center + value59 * scaleFactor6;
					if (Main.rand.Next(8) == 0)
					{
						Main.dust[num845].velocity = value59 * (0f - num844) * 3f;
						Dust dust = Main.dust[num845];
						dust.scale += 0.5f;
					}
					else
					{
						Main.dust[num845].velocity = value59 * (0f - num844);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 value60 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
					float num846 = Main.rand.Next(3, 9);
					value60.Normalize();
					int num847 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 163, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num847].noGravity = true;
					Main.dust[num847].position = base.Center + value60 * 30f;
					if (Main.rand.Next(8) == 0)
					{
						Main.dust[num847].velocity = value60 * (0f - num846) * 3f;
						Dust dust = Main.dust[num847];
						dust.scale += 0.5f;
					}
					else
					{
						Main.dust[num847].velocity = value60 * (0f - num846);
					}
				}
				if (this.ai[0] >= 30f && Main.netMode != 2)
				{
					Player player9 = Main.player[Main.myPlayer];
					if (player9.active && !player9.dead && Distance(player9.Center) <= num843 && player9.FindBuffIndex(165) == -1)
					{
						player9.AddBuff(165, 120);
					}
				}
				if (this.ai[0] >= 30f && this.ai[0] % 10f == 0f && Main.netMode != 1)
				{
					for (int num848 = 0; num848 < 200; num848++)
					{
						NPC nPC9 = Main.npc[num848];
						if (nPC9.type != 488 && nPC9.active && Distance(nPC9.Center) <= num843)
						{
							if (nPC9.townNPC && (nPC9.FindBuffIndex(165) == -1 || nPC9.buffTime[nPC9.FindBuffIndex(165)] <= 20))
							{
								nPC9.AddBuff(165, 120);
							}
							else if (!nPC9.friendly && nPC9.lifeMax > 5 && !nPC9.dontTakeDamage && (nPC9.FindBuffIndex(186) == -1 || nPC9.buffTime[nPC9.FindBuffIndex(186)] <= 20) && (nPC9.dryadBane || Collision.CanHit(base.Center, 1, 1, nPC9.position, nPC9.width, nPC9.height)))
							{
								nPC9.AddBuff(186, 120);
							}
						}
					}
				}
				if (this.ai[0] >= 570f)
				{
					Kill();
				}
			}
			else if (aiStyle == 112)
			{
				if (type == 836)
				{
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
						for (int num849 = 0; num849 < 3; num849++)
						{
							int num850 = Dust.NewDust(base.position, base.width, base.height, 31, 0f, 0f, 50, Color.White, 1.2f);
							Dust dust = Main.dust[num850];
							dust.velocity *= 0.3f;
							Main.dust[num850].noGravity = true;
						}
					}
					if (++frameCounter >= 6)
					{
						frameCounter = 0;
						if (++frame >= 4)
						{
							frame = 0;
						}
					}
					Player player10 = Main.player[(int)this.ai[1]];
					bool flag41 = player10.active && !player10.dead && Vector2.Distance(player10.Center, base.Center) < 800f;
					int num851 = (spriteDirection = ((Main.WindForVisuals > 0f) ? 1 : (-1)));
					direction = ((player10.Center.X > base.Center.X) ? 1 : (-1));
					bool flag42 = num851 != direction;
					float num852 = 2.5f;
					float num853 = 2f;
					if (flag42)
					{
						num852 = 1.5f;
						num853 = 1f;
					}
					if (flag41)
					{
						if (!flag42)
						{
							float num854 = player10.Center.X - base.Center.X;
							base.velocity.X += 0.05f * (float)direction * (0.6f + Math.Abs(Main.WindForVisuals));
							if (base.velocity.X > num852)
							{
								base.velocity.X -= 0.1f;
							}
							if (base.velocity.X < 0f - num852)
							{
								base.velocity.X += 0.1f;
							}
						}
						if (player10.Top.Y >= base.Center.Y || flag42)
						{
							base.velocity.Y += 0.05f;
							if (base.velocity.Y > num852)
							{
								base.velocity.Y -= 0.1f;
							}
						}
						else if (player10.Top.Y < base.Center.Y)
						{
							base.velocity.Y -= 0.1f;
							if (base.velocity.Y < 0f - num853)
							{
								base.velocity.Y += 0.2f;
							}
						}
					}
					else
					{
						base.velocity.Y += 0.2f;
						if (base.velocity.Y < 0f - num853)
						{
							base.velocity.Y += 0.2f;
						}
						if (base.velocity.Y > num853)
						{
							base.velocity.Y -= 0.2f;
						}
					}
					rotation = base.velocity.X * 0.125f;
				}
				if (type == 590)
				{
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= 3)
						{
							frame = 0;
						}
					}
					if (alpha > 0)
					{
						alpha -= 15;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha == 0)
					{
						float num855 = (float)Main.rand.Next(28, 42) * 0.005f;
						num855 += (float)(270 - Main.mouseTextColor) / 500f;
						float num856 = 0.1f;
						float num857 = 0.3f + num855 / 2f;
						float num858 = 0.6f + num855;
						float num859 = 0.35f;
						num856 *= num859;
						num857 *= num859;
						num858 *= num859;
						Lighting.AddLight(base.Center, num856, num857, num858);
					}
					base.velocity = new Vector2(0f, (float)Math.Sin((float)Math.PI * 2f * this.ai[0] / 180f) * 0.15f);
					this.ai[0]++;
					if (this.ai[0] >= 180f)
					{
						this.ai[0] = 0f;
					}
				}
				if (type != 644)
				{
					return;
				}
				Color newColor3 = Main.hslToRgb(this.ai[0], 1f, 0.5f);
				int num860 = (int)this.ai[1];
				if (num860 < 0 || num860 >= 1000 || (!Main.projectile[num860].active && Main.projectile[num860].type != 643))
				{
					this.ai[1] = -1f;
				}
				else
				{
					DelegateMethods.v3_1 = newColor3.ToVector3() * 0.5f;
					Utils.PlotTileLine(base.Center, Main.projectile[num860].Center, 8f, DelegateMethods.CastLight);
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = Main.rand.NextFloat() * 0.8f + 0.8f;
					direction = ((Main.rand.Next(2) > 0) ? 1 : (-1));
				}
				rotation = localAI[1] / 40f * ((float)Math.PI * 2f) * (float)direction;
				if (alpha > 0)
				{
					alpha -= 8;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center, newColor3.ToVector3() * 0.5f);
				}
				for (int num861 = 0; num861 < 2; num861++)
				{
					if (Main.rand.Next(10) == 0)
					{
						Vector2 value61 = Vector2.UnitY.RotatedBy((float)num861 * (float)Math.PI).RotatedBy(rotation);
						Dust dust37 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
						dust37.noGravity = true;
						dust37.noLight = true;
						dust37.scale = Opacity * localAI[0];
						dust37.position = base.Center;
						dust37.velocity = value61 * 2.5f;
					}
				}
				for (int num862 = 0; num862 < 2; num862++)
				{
					if (Main.rand.Next(10) == 0)
					{
						Vector2 value62 = Vector2.UnitY.RotatedBy((float)num862 * (float)Math.PI);
						Dust dust38 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
						dust38.noGravity = true;
						dust38.noLight = true;
						dust38.scale = Opacity * localAI[0];
						dust38.position = base.Center;
						dust38.velocity = value62 * 2.5f;
					}
				}
				if (Main.rand.Next(10) == 0)
				{
					float scaleFactor7 = 1f + Main.rand.NextFloat() * 2f;
					float fadeIn = 1f + Main.rand.NextFloat();
					float num863 = 1f + Main.rand.NextFloat();
					Vector2 vector83 = Utils.RandomVector2(Main.rand, -1f, 1f);
					if (vector83 != Vector2.Zero)
					{
						vector83.Normalize();
					}
					vector83 *= 20f + Main.rand.NextFloat() * 100f;
					Vector2 vector84 = base.Center + vector83;
					Point point = vector84.ToTileCoordinates();
					bool flag43 = true;
					if (!WorldGen.InWorld(point.X, point.Y))
					{
						flag43 = false;
					}
					if (flag43 && WorldGen.SolidTile(point.X, point.Y))
					{
						flag43 = false;
					}
					if (flag43)
					{
						Dust dust39 = Main.dust[Dust.NewDust(vector84, 0, 0, 267, 0f, 0f, 127, newColor3)];
						dust39.noGravity = true;
						dust39.position = vector84;
						dust39.velocity = -Vector2.UnitY * scaleFactor7 * (Main.rand.NextFloat() * 0.9f + 1.6f);
						dust39.fadeIn = fadeIn;
						dust39.scale = num863;
						dust39.noLight = true;
						if (dust39.dustIndex != 6000)
						{
							Dust dust40 = Dust.CloneDust(dust39);
							Dust dust = dust40;
							dust.scale *= 0.65f;
							dust = dust40;
							dust.fadeIn *= 0.65f;
							dust40.color = new Color(255, 255, 255, 255);
						}
					}
				}
				scale = Opacity / 2f * localAI[0];
				base.velocity = Vector2.Zero;
				localAI[1]++;
				if (localAI[1] >= 60f)
				{
					Kill();
				}
				if (localAI[1] == 30f)
				{
					DoRainbowCrystalStaffExplosion();
					if (Main.myPlayer == owner)
					{
						friendly = true;
						int width = base.width;
						int height = base.height;
						int num864 = penetrate;
						base.position = base.Center;
						base.width = (base.height = 60);
						base.Center = base.position;
						penetrate = -1;
						maxPenetrate = -1;
						Damage();
						penetrate = num864;
						base.position = base.Center;
						base.width = width;
						base.height = height;
						base.Center = base.position;
						friendly = false;
					}
				}
			}
			else if (aiStyle == 113)
			{
				int num865 = 25;
				if (type == 614)
				{
					num865 = 63;
				}
				if (alpha > 0)
				{
					alpha -= num865;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (this.ai[0] == 0f)
				{
					if (type == 614)
					{
						int num866 = (int)this.ai[1];
						if (!Main.npc[num866].CanBeChasedBy(this, ignoreDontTakeDamage: true))
						{
							Kill();
							return;
						}
						float num867 = base.velocity.ToRotation();
						Vector2 vector85 = Main.npc[num866].Center - base.Center;
						if (vector85 != Vector2.Zero)
						{
							vector85.Normalize();
							vector85 *= 14f;
						}
						float num868 = 5f;
						base.velocity = (base.velocity * (num868 - 1f) + vector85) / num868;
					}
					else
					{
						this.ai[1]++;
						if (this.ai[1] >= 45f)
						{
							float num869 = 0.98f;
							float num870 = 0.35f;
							if (type == 636)
							{
								num869 = 0.995f;
								num870 = 0.15f;
							}
							this.ai[1] = 45f;
							base.velocity.X *= num869;
							base.velocity.Y += num870;
						}
						rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
					}
				}
				if (this.ai[0] == 1f)
				{
					ignoreWater = true;
					tileCollide = false;
					int num871 = 15;
					if (type == 636)
					{
						num871 = 5 * MaxUpdates;
					}
					bool flag44 = false;
					bool flag45 = false;
					localAI[0]++;
					if (localAI[0] % 30f == 0f)
					{
						flag45 = true;
					}
					int num872 = (int)this.ai[1];
					if (localAI[0] >= (float)(60 * num871))
					{
						flag44 = true;
					}
					else if (num872 < 0 || num872 >= 200)
					{
						flag44 = true;
					}
					else if (Main.npc[num872].active && !Main.npc[num872].dontTakeDamage)
					{
						base.Center = Main.npc[num872].Center - base.velocity * 2f;
						gfxOffY = Main.npc[num872].gfxOffY;
						if (flag45)
						{
							Main.npc[num872].HitEffect(0, 1.0);
						}
					}
					else
					{
						flag44 = true;
					}
					if (flag44)
					{
						Kill();
					}
				}
				if (type == 614)
				{
					Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
				}
				if (type == 636)
				{
					Lighting.AddLight(base.Center, 0.8f, 0.7f, 0.4f);
				}
			}
			else if (aiStyle == 114)
			{
				if (Main.netMode == 2 && localAI[0] == 0f)
				{
					PortalHelper.SyncPortalSections(base.Center, 1);
					localAI[0] = 1f;
				}
				timeLeft = 3;
				bool flag46 = false;
				if (owner != 255 && (!Main.player[owner].active || Main.player[owner].dead || Distance(Main.player[owner].Center) > 12800f))
				{
					flag46 = true;
				}
				if (!flag46 && !WorldGen.InWorld((int)base.Center.X / 16, (int)base.Center.Y / 16, Lighting.OffScreenTiles))
				{
					flag46 = true;
				}
				if (!flag46 && !PortalHelper.SupportedTilesAreFine(base.Center, this.ai[0]))
				{
					flag46 = true;
				}
				if (flag46)
				{
					Kill();
					return;
				}
				Color portalColor = PortalHelper.GetPortalColor(owner, (int)this.ai[1]);
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center + base.velocity * 3f, portalColor.ToVector3() * 0.5f);
				}
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				rotation = this.ai[0] - (float)Math.PI / 2f;
			}
			else if (aiStyle == 115)
			{
				Lighting.AddLight(base.Center, new Vector3(0.075f, 0.3f, 0.15f));
				base.velocity *= 0.985f;
				rotation += base.velocity.X * 0.2f;
				if (base.velocity.X > 0f)
				{
					rotation += 0.08f;
				}
				else
				{
					rotation -= 0.08f;
				}
				this.ai[1] += 1f;
				if (this.ai[1] > 30f)
				{
					alpha += 10;
					if (alpha >= 255)
					{
						alpha = 255;
						Kill();
					}
				}
			}
			else if (aiStyle == 116)
			{
				if (localAI[0] == 0f)
				{
					rotation = this.ai[1];
					localAI[0] = 1f;
				}
				Player player11 = Main.player[owner];
				if (player11.setSolar)
				{
					timeLeft = 2;
				}
				float angle = (float)player11.miscCounter / 300f * ((float)Math.PI * 4f) + this.ai[1];
				angle = MathHelper.WrapAngle(angle);
				rotation = rotation.AngleLerp(angle, 0.05f);
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				base.velocity = rotation.ToRotationVector2() * 100f - player11.velocity;
				base.Center = player11.Center - base.velocity;
			}
			else if (aiStyle == 117)
			{
				this.ai[1] += 0.01f;
				scale = this.ai[1];
				this.ai[0]++;
				if (this.ai[0] >= (float)(3 * Main.projFrames[type]))
				{
					Kill();
					return;
				}
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						hide = true;
					}
				}
				alpha -= 63;
				if (alpha < 0)
				{
					alpha = 0;
				}
				bool flag47 = type == 612;
				bool flag48 = type == 624;
				if (flag47)
				{
					Lighting.AddLight(base.Center, 0.9f, 0.8f, 0.6f);
				}
				if (this.ai[0] != 1f)
				{
					return;
				}
				base.position = base.Center;
				base.width = (base.height = (int)(52f * scale));
				base.Center = base.position;
				Damage();
				if (flag47)
				{
					SoundEngine.PlaySound(SoundID.Item14, base.position);
					for (int num873 = 0; num873 < 4; num873++)
					{
						int num874 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num874].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					}
					for (int num875 = 0; num875 < 10; num875++)
					{
						int num876 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 200, default(Color), 2.7f);
						Main.dust[num876].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
						Main.dust[num876].noGravity = true;
						Dust dust = Main.dust[num876];
						dust.velocity *= 3f;
						num876 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num876].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
						dust = Main.dust[num876];
						dust.velocity *= 2f;
						Main.dust[num876].noGravity = true;
						Main.dust[num876].fadeIn = 2.5f;
					}
					for (int num877 = 0; num877 < 5; num877++)
					{
						int num878 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 0, default(Color), 2.7f);
						Main.dust[num878].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
						Main.dust[num878].noGravity = true;
						Dust dust = Main.dust[num878];
						dust.velocity *= 3f;
					}
					for (int num879 = 0; num879 < 10; num879++)
					{
						int num880 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num880].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
						Main.dust[num880].noGravity = true;
						Dust dust = Main.dust[num880];
						dust.velocity *= 3f;
					}
				}
				if (!flag48)
				{
					return;
				}
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				for (int num881 = 0; num881 < 20; num881++)
				{
					int num882 = Dust.NewDust(base.position, base.width, base.height, 135, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num882].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Dust dust = Main.dust[num882];
					dust.velocity *= 2f;
					Main.dust[num882].noGravity = true;
					Main.dust[num882].fadeIn = 2.5f;
					Main.dust[num882].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
				for (int num883 = 0; num883 < 15; num883++)
				{
					int num884 = Dust.NewDust(base.position, base.width, base.height, 135, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num884].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num884].noGravity = true;
					Dust dust = Main.dust[num884];
					dust.velocity *= 3f;
					Main.dust[num884].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
				float num885 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
				float num886 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
				float num887 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
				float num888 = 7f + (float)Main.rand.NextDouble() * 7f;
				float num889 = 7f + (float)Main.rand.NextDouble() * 7f;
				float num890 = 7f + (float)Main.rand.NextDouble() * 7f;
				float num891 = num888;
				if (num889 > num891)
				{
					num891 = num889;
				}
				if (num890 > num891)
				{
					num891 = num890;
				}
				for (int num892 = 0; num892 < 200; num892++)
				{
					int num893 = 135;
					float num894 = num891;
					if (num892 > 50)
					{
						num894 = num889;
					}
					if (num892 > 100)
					{
						num894 = num888;
					}
					if (num892 > 150)
					{
						num894 = num890;
					}
					int num895 = Dust.NewDust(base.position, 6, 6, num893, 0f, 0f, 100);
					Vector2 vector86 = Main.dust[num895].velocity;
					Main.dust[num895].position = base.Center;
					vector86.Normalize();
					vector86 *= num894;
					if (num892 > 150)
					{
						vector86.Y *= 0.5f;
						vector86 = vector86.RotatedBy(num887);
					}
					else if (num892 > 100)
					{
						vector86.X *= 0.5f;
						vector86 = vector86.RotatedBy(num885);
					}
					else if (num892 > 50)
					{
						vector86.Y *= 0.5f;
						vector86 = vector86.RotatedBy(num886);
					}
					Dust dust = Main.dust[num895];
					dust.velocity *= 0.2f;
					dust = Main.dust[num895];
					dust.velocity += vector86;
					Main.dust[num895].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					if (num892 <= 200)
					{
						Main.dust[num895].scale = 2f;
						Main.dust[num895].noGravity = true;
						Main.dust[num895].fadeIn = Main.rand.NextFloat() * 2f;
						if (Main.rand.Next(4) == 0)
						{
							Main.dust[num895].fadeIn = 2.5f;
						}
						Main.dust[num895].noLight = true;
						if (num892 < 100)
						{
							dust = Main.dust[num895];
							dust.position += Main.dust[num895].velocity * 20f;
							dust = Main.dust[num895];
							dust.velocity *= -1f;
						}
					}
				}
			}
			else if (aiStyle == 118)
			{
				this.ai[0]++;
				int num896 = 0;
				if (base.velocity.Length() <= 4f)
				{
					num896 = 1;
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				switch (num896)
				{
				case 0:
					rotation -= (float)Math.PI / 30f;
					if (Main.rand.Next(3) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector92 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust43 = Main.dust[Dust.NewDust(base.Center - vector92 * 30f, 0, 0, Utils.SelectRandom<int>(Main.rand, 86, 90))];
							dust43.noGravity = true;
							dust43.position = base.Center - vector92 * Main.rand.Next(10, 21);
							dust43.velocity = vector92.RotatedBy(1.5707963705062866) * 6f;
							dust43.scale = 0.5f + Main.rand.NextFloat();
							dust43.fadeIn = 0.5f;
							dust43.customData = this;
						}
						else
						{
							Vector2 vector93 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust44 = Main.dust[Dust.NewDust(base.Center - vector93 * 30f, 0, 0, 240)];
							dust44.noGravity = true;
							dust44.position = base.Center - vector93 * 30f;
							dust44.velocity = vector93.RotatedBy(-1.5707963705062866) * 3f;
							dust44.scale = 0.5f + Main.rand.NextFloat();
							dust44.fadeIn = 0.5f;
							dust44.customData = this;
						}
					}
					if (this.ai[0] >= 30f)
					{
						base.velocity *= 0.98f;
						scale += 0.00744680827f;
						if (scale > 1.3f)
						{
							scale = 1.3f;
						}
						rotation -= (float)Math.PI / 180f;
					}
					if (base.velocity.Length() < 4.1f)
					{
						base.velocity.Normalize();
						base.velocity *= 4f;
						this.ai[0] = 0f;
					}
					break;
				case 1:
				{
					rotation -= (float)Math.PI / 30f;
					for (int num897 = 0; num897 < 1; num897++)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector87 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust41 = Main.dust[Dust.NewDust(base.Center - vector87 * 30f, 0, 0, 86)];
							dust41.noGravity = true;
							dust41.position = base.Center - vector87 * Main.rand.Next(10, 21);
							dust41.velocity = vector87.RotatedBy(1.5707963705062866) * 6f;
							dust41.scale = 0.9f + Main.rand.NextFloat();
							dust41.fadeIn = 0.5f;
							dust41.customData = this;
							vector87 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							dust41 = Main.dust[Dust.NewDust(base.Center - vector87 * 30f, 0, 0, 90)];
							dust41.noGravity = true;
							dust41.position = base.Center - vector87 * Main.rand.Next(10, 21);
							dust41.velocity = vector87.RotatedBy(1.5707963705062866) * 6f;
							dust41.scale = 0.9f + Main.rand.NextFloat();
							dust41.fadeIn = 0.5f;
							dust41.customData = this;
							dust41.color = Color.Crimson;
						}
						else
						{
							Vector2 vector88 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust42 = Main.dust[Dust.NewDust(base.Center - vector88 * 30f, 0, 0, 240)];
							dust42.noGravity = true;
							dust42.position = base.Center - vector88 * Main.rand.Next(20, 31);
							dust42.velocity = vector88.RotatedBy(-1.5707963705062866) * 5f;
							dust42.scale = 0.9f + Main.rand.NextFloat();
							dust42.fadeIn = 0.5f;
							dust42.customData = this;
						}
					}
					if (this.ai[0] % 30f == 0f && this.ai[0] < 241f && Main.myPlayer == owner)
					{
						Vector2 vector89 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 12f;
						NewProjectile(base.Center.X, base.Center.Y, vector89.X, vector89.Y, 618, damage / 2, 0f, owner, 0f, whoAmI);
					}
					Vector2 vector90 = base.Center;
					float num898 = 800f;
					bool flag49 = false;
					int num899 = 0;
					if (this.ai[1] == 0f)
					{
						for (int num900 = 0; num900 < 200; num900++)
						{
							if (Main.npc[num900].CanBeChasedBy(this))
							{
								Vector2 center11 = Main.npc[num900].Center;
								if (Distance(center11) < num898 && Collision.CanHit(new Vector2(base.position.X + (float)(base.width / 2), base.position.Y + (float)(base.height / 2)), 1, 1, Main.npc[num900].position, Main.npc[num900].width, Main.npc[num900].height))
								{
									num898 = Distance(center11);
									vector90 = center11;
									flag49 = true;
									num899 = num900;
								}
							}
						}
						if (flag49)
						{
							if (this.ai[1] != (float)(num899 + 1))
							{
								netUpdate = true;
							}
							this.ai[1] = num899 + 1;
						}
						flag49 = false;
					}
					if (this.ai[1] != 0f)
					{
						int num901 = (int)(this.ai[1] - 1f);
						if (Main.npc[num901].active && Main.npc[num901].CanBeChasedBy(this, ignoreDontTakeDamage: true) && Distance(Main.npc[num901].Center) < 1000f)
						{
							flag49 = true;
							vector90 = Main.npc[num901].Center;
						}
					}
					if (!friendly)
					{
						flag49 = false;
					}
					if (flag49)
					{
						float num902 = 4f;
						int num903 = 8;
						Vector2 vector91 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
						float num904 = vector90.X - vector91.X;
						float num905 = vector90.Y - vector91.Y;
						float num906 = (float)Math.Sqrt(num904 * num904 + num905 * num905);
						float num907 = num906;
						num906 = num902 / num906;
						num904 *= num906;
						num905 *= num906;
						base.velocity.X = (base.velocity.X * (float)(num903 - 1) + num904) / (float)num903;
						base.velocity.Y = (base.velocity.Y * (float)(num903 - 1) + num905) / (float)num903;
					}
					break;
				}
				}
				if (alpha < 150)
				{
					Lighting.AddLight(base.Center, 0.7f, 0.2f, 0.6f);
				}
				if (this.ai[0] >= 600f)
				{
					Kill();
				}
			}
			else if (aiStyle == 119)
			{
				int num908 = 0;
				float num909 = 0f;
				float x5 = 0f;
				float y4 = 0f;
				bool flag50 = false;
				bool flag51 = false;
				int num33 = type;
				if (num33 == 618)
				{
					num908 = 617;
					num909 = 420f;
					x5 = 0.15f;
					y4 = 0.15f;
				}
				if (flag51)
				{
					int num910 = (int)this.ai[1];
					if (!Main.projectile[num910].active || Main.projectile[num910].type != num908)
					{
						Kill();
						return;
					}
					timeLeft = 2;
				}
				this.ai[0]++;
				if (!(this.ai[0] < num909))
				{
					return;
				}
				bool flag52 = true;
				int num911 = (int)this.ai[1];
				if (Main.projectile[num911].active && Main.projectile[num911].type == num908)
				{
					if (!flag50 && Main.projectile[num911].oldPos[1] != Vector2.Zero)
					{
						base.position += Main.projectile[num911].position - Main.projectile[num911].oldPos[1];
					}
					if (base.Center.HasNaNs())
					{
						Kill();
						return;
					}
				}
				else
				{
					this.ai[0] = num909;
					flag52 = false;
					Kill();
				}
				if (flag52 && !flag50)
				{
					base.velocity += new Vector2(Math.Sign(Main.projectile[num911].Center.X - base.Center.X), Math.Sign(Main.projectile[num911].Center.Y - base.Center.Y)) * new Vector2(x5, y4);
					if (base.velocity.Length() > 6f)
					{
						base.velocity *= 6f / base.velocity.Length();
					}
				}
				if (type == 618)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num912 = Dust.NewDust(base.Center, 8, 8, 86);
						Main.dust[num912].position = base.Center;
						Main.dust[num912].velocity = base.velocity;
						Main.dust[num912].noGravity = true;
						Main.dust[num912].scale = 1.5f;
						if (flag52)
						{
							Main.dust[num912].customData = Main.projectile[(int)this.ai[1]];
						}
					}
					alpha = 255;
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 120)
			{
				AI_120_StardustGuardian();
			}
			else if (aiStyle == 121)
			{
				AI_121_StardustDragon();
			}
			else if (aiStyle == 122)
			{
				int num913 = (int)this.ai[0];
				bool flag53 = false;
				if (num913 == -1 || !Main.npc[num913].active)
				{
					flag53 = true;
				}
				if (flag53)
				{
					if (type == 629)
					{
						Kill();
						return;
					}
					if (type == 631 && this.ai[0] != -1f)
					{
						this.ai[0] = -1f;
						netUpdate = true;
					}
				}
				if (!flag53 && base.Hitbox.Intersects(Main.npc[num913].Hitbox))
				{
					Kill();
					if (type == 631)
					{
						localAI[1] = 1f;
						Damage();
					}
					return;
				}
				if (type == 629)
				{
					Vector2 value63 = Main.npc[num913].Center - base.Center;
					base.velocity = Vector2.Normalize(value63) * 5f;
					Dust.QuickDust(base.Center, Color.Red);
				}
				if (type != 631)
				{
					return;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1]--;
					base.velocity = Vector2.Zero;
					return;
				}
				if (flag53)
				{
					if (base.velocity == Vector2.Zero)
					{
						Kill();
					}
					tileCollide = true;
					alpha += 10;
					if (alpha > 255)
					{
						Kill();
					}
				}
				else
				{
					Vector2 value64 = Main.npc[num913].Center - base.Center;
					base.velocity = Vector2.Normalize(value64) * 12f;
					alpha -= 15;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				rotation = base.velocity.ToRotation() - (float)Math.PI / 2f;
			}
			else if (aiStyle == 123)
			{
				bool flag54 = type == 641;
				bool flag55 = type == 643;
				float num914 = 1000f;
				base.velocity = Vector2.Zero;
				if (flag54)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (direction == 0)
					{
						direction = Main.player[owner].direction;
					}
					rotation -= (float)direction * ((float)Math.PI * 2f) / 120f;
					scale = Opacity;
					Lighting.AddLight(base.Center, new Vector3(0.3f, 0.9f, 0.7f) * Opacity);
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector94 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust45 = Main.dust[Dust.NewDust(base.Center - vector94 * 30f, 0, 0, 229)];
						dust45.noGravity = true;
						dust45.position = base.Center - vector94 * Main.rand.Next(10, 21);
						dust45.velocity = vector94.RotatedBy(1.5707963705062866) * 6f;
						dust45.scale = 0.5f + Main.rand.NextFloat();
						dust45.fadeIn = 0.5f;
						dust45.customData = base.Center;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector95 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust46 = Main.dust[Dust.NewDust(base.Center - vector95 * 30f, 0, 0, 240)];
						dust46.noGravity = true;
						dust46.position = base.Center - vector95 * 30f;
						dust46.velocity = vector95.RotatedBy(-1.5707963705062866) * 3f;
						dust46.scale = 0.5f + Main.rand.NextFloat();
						dust46.fadeIn = 0.5f;
						dust46.customData = base.Center;
					}
					if (this.ai[0] < 0f)
					{
						Vector2 center12 = base.Center;
						int num915 = Dust.NewDust(center12 - Vector2.One * 8f, 16, 16, 229, base.velocity.X / 2f, base.velocity.Y / 2f);
						Dust dust = Main.dust[num915];
						dust.velocity *= 2f;
						Main.dust[num915].noGravity = true;
						Main.dust[num915].scale = Utils.SelectRandom<float>(Main.rand, 0.8f, 1.65f);
						Main.dust[num915].customData = this;
					}
				}
				if (flag55)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (direction == 0)
					{
						direction = Main.player[owner].direction;
					}
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (alpha == 0 && Main.rand.Next(15) == 0)
					{
						Dust dust47 = Main.dust[Dust.NewDust(base.Top, 0, 0, 261, 0f, 0f, 100)];
						dust47.velocity.X = 0f;
						dust47.noGravity = true;
						dust47.fadeIn = 1f;
						dust47.position = base.Center + Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (4f * Main.rand.NextFloat() + 26f);
						dust47.scale = 0.5f;
					}
					localAI[0]++;
					if (localAI[0] >= 60f)
					{
						localAI[0] = 0f;
					}
				}
				if (this.ai[0] < 0f)
				{
					this.ai[0]++;
					if (flag54)
					{
						this.ai[1] -= (float)direction * ((float)Math.PI / 8f) / 50f;
					}
				}
				if (this.ai[0] == 0f)
				{
					int num916 = -1;
					float num917 = num914;
					NPC ownerMinionAttackTargetNPC4 = OwnerMinionAttackTargetNPC;
					if (ownerMinionAttackTargetNPC4 != null && ownerMinionAttackTargetNPC4.CanBeChasedBy(this))
					{
						float num918 = Distance(ownerMinionAttackTargetNPC4.Center);
						if (num918 < num917 && Collision.CanHitLine(base.Center, 0, 0, ownerMinionAttackTargetNPC4.Center, 0, 0))
						{
							num917 = num918;
							num916 = ownerMinionAttackTargetNPC4.whoAmI;
						}
					}
					if (num916 < 0)
					{
						for (int num919 = 0; num919 < 200; num919++)
						{
							NPC nPC10 = Main.npc[num919];
							if (nPC10.CanBeChasedBy(this))
							{
								float num920 = Distance(nPC10.Center);
								if (num920 < num917 && Collision.CanHitLine(base.Center, 0, 0, nPC10.Center, 0, 0))
								{
									num917 = num920;
									num916 = num919;
								}
							}
						}
					}
					if (num916 != -1)
					{
						this.ai[0] = 1f;
						this.ai[1] = num916;
						netUpdate = true;
						return;
					}
				}
				if (!(this.ai[0] > 0f))
				{
					return;
				}
				int num921 = (int)this.ai[1];
				if (!Main.npc[num921].CanBeChasedBy(this))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
					return;
				}
				this.ai[0]++;
				float num922 = 30f;
				if (flag55)
				{
					num922 = 5f;
				}
				if (!(this.ai[0] >= num922))
				{
					return;
				}
				Vector2 vector96 = DirectionTo(Main.npc[num921].Center);
				if (vector96.HasNaNs())
				{
					vector96 = Vector2.UnitY;
				}
				float num923 = vector96.ToRotation();
				int num924 = ((vector96.X > 0f) ? 1 : (-1));
				if (flag54)
				{
					direction = num924;
					this.ai[0] = -60f;
					this.ai[1] = num923 + (float)num924 * (float)Math.PI / 16f;
					netUpdate = true;
					if (owner == Main.myPlayer)
					{
						NewProjectile(base.Center.X, base.Center.Y, vector96.X, vector96.Y, 642, damage, knockBack, owner, 0f, whoAmI);
					}
				}
				if (!flag55)
				{
					return;
				}
				direction = num924;
				this.ai[0] = -20f;
				netUpdate = true;
				if (owner != Main.myPlayer)
				{
					return;
				}
				NPC nPC11 = Main.npc[num921];
				Vector2 vector97 = nPC11.position + nPC11.Size * Utils.RandomVector2(Main.rand, 0f, 1f) - base.Center;
				for (int num925 = 0; num925 < 3; num925++)
				{
					Vector2 other = base.Center + vector97;
					Vector2 vector98 = nPC11.velocity * 30f;
					other += vector98;
					float num926 = MathHelper.Lerp(0.1f, 0.75f, Utils.GetLerpValue(800f, 200f, Distance(other)));
					if (num925 > 0)
					{
						other = base.Center + vector97.RotatedByRandom(0.78539818525314331) * (Main.rand.NextFloat() * num926 + 0.5f);
					}
					float x6 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
					NewProjectile(other.X, other.Y, 0f, 0f, 644, damage, knockBack, owner, x6, whoAmI);
				}
			}
			else if (aiStyle == 124)
			{
				bool flag56 = type == 650;
				Player player12 = Main.player[owner];
				if (player12.dead)
				{
					Kill();
					return;
				}
				if (type == 650 && player12.suspiciouslookingTentacle)
				{
					timeLeft = 2;
				}
				if (type == 882 && player12.petFlagEyeOfCthulhuPet)
				{
					timeLeft = 2;
				}
				if (type == 888 && player12.petFlagTwinsPet)
				{
					timeLeft = 2;
				}
				if (type == 895 && player12.petFlagFairyQueenPet)
				{
					timeLeft = 2;
				}
				if (type == 896 && player12.petFlagPumpkingPet)
				{
					timeLeft = 2;
				}
				if (type == 898 && player12.petFlagIceQueenPet)
				{
					timeLeft = 2;
				}
				direction = (spriteDirection = player12.direction);
				if (type == 650)
				{
					Vector3 vector99 = (DelegateMethods.v3_1 = new Vector3(0.5f, 0.9f, 1f) * 1.5f);
					Utils.PlotTileLine(base.Center, base.Center + base.velocity * 6f, 20f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(player12.Center, player12.Center + player12.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(player12.Left, player12.Right, 40f, DelegateMethods.CastLightOpen);
				}
				if (type == 895)
				{
					Vector3 value65 = new Vector3(1f, 0.6f, 1f);
					DelegateMethods.v3_1 = value65 * 0.75f;
					Utils.PlotTileLine(player12.Center, player12.Center + player12.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(player12.Left, player12.Right, 40f, DelegateMethods.CastLightOpen);
					DelegateMethods.v3_1 = value65 * 1.5f;
					Utils.PlotTileLine(base.Center, base.Center + base.velocity * 6f, 30f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
				}
				if (type == 896)
				{
					Vector3 value66 = new Vector3(1f, 0.7f, 0.05f);
					DelegateMethods.v3_1 = value66 * 0.75f;
					Utils.PlotTileLine(player12.Center, player12.Center + player12.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(player12.Left, player12.Right, 40f, DelegateMethods.CastLightOpen);
					DelegateMethods.v3_1 = value66 * 1.5f;
					Utils.PlotTileLine(base.Center, base.Center + base.velocity * 6f, 30f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
				}
				float num927 = 30f;
				float y5 = -20f;
				int num928 = player12.direction;
				if (type == 882 && player12.ownedProjectileCounts[650] > 0)
				{
					num928 *= -1;
				}
				if (type == 888)
				{
					num927 = 30f;
					y5 = -50f;
					if (player12.ownedProjectileCounts[650] > 0)
					{
						y5 = -70f;
					}
				}
				if (type == 895)
				{
					num927 = -36f;
					y5 = -50f;
				}
				if (type == 896)
				{
					num927 = 30f;
					y5 = -60f;
					if (player12.ownedProjectileCounts[888] > 0)
					{
						num927 = -30f;
					}
				}
				if (type == 898)
				{
					num927 = -30f;
					y5 = -50f;
					if (player12.ownedProjectileCounts[895] > 0)
					{
						num927 = 30f;
					}
				}
				Vector2 value67 = new Vector2((float)num928 * num927, y5);
				Vector2 vector100 = player12.MountedCenter + value67;
				float num929 = Vector2.Distance(base.Center, vector100);
				if (num929 > 1000f)
				{
					base.Center = player12.Center + value67;
				}
				Vector2 vector101 = vector100 - base.Center;
				float num930 = 4f;
				if (num929 < num930)
				{
					base.velocity *= 0.25f;
				}
				if (vector101 != Vector2.Zero)
				{
					if (vector101.Length() < num930)
					{
						base.velocity = vector101;
					}
					else
					{
						base.velocity = vector101 * 0.1f;
					}
				}
				if (num929 > 50f && (type == 895 || type == 898))
				{
					direction = (spriteDirection = 1);
					if (base.velocity.X < 0f)
					{
						direction = (spriteDirection = -1);
					}
				}
				if (base.velocity.Length() > 6f)
				{
					if (type == 650)
					{
						float num931 = base.velocity.ToRotation() + (float)Math.PI / 2f;
						if (Math.Abs(rotation - num931) >= (float)Math.PI)
						{
							if (num931 < rotation)
							{
								rotation -= (float)Math.PI * 2f;
							}
							else
							{
								rotation += (float)Math.PI * 2f;
							}
						}
						float num932 = 12f;
						rotation = (rotation * (num932 - 1f) + num931) / num932;
						if (++frameCounter >= 4)
						{
							frameCounter = 0;
							if (++frame >= Main.projFrames[type])
							{
								frame = 0;
							}
						}
					}
					else if (type == 882)
					{
						rotation = base.velocity.X * 0.125f;
						if (++frameCounter >= 3)
						{
							frameCounter = 0;
							if (frame < 6)
							{
								frame = 6;
							}
							else
							{
								frame++;
								if (frame > 15)
								{
									frame = 10;
								}
							}
						}
					}
					else if (type == 888)
					{
						float num933 = base.velocity.ToRotation() + (float)Math.PI / 2f;
						if (Math.Abs(rotation - num933) >= (float)Math.PI)
						{
							if (num933 < rotation)
							{
								rotation -= (float)Math.PI * 2f;
							}
							else
							{
								rotation += (float)Math.PI * 2f;
							}
						}
						float num934 = 12f;
						rotation = (rotation * (num934 - 1f) + num933) / num934;
						if (++frameCounter >= 3)
						{
							frameCounter = 0;
							if (frame < 6)
							{
								frame = 6;
							}
							else
							{
								frame++;
								if (frame > 17)
								{
									frame = 6;
								}
							}
						}
					}
					else if (type == 895)
					{
						float num935 = base.velocity.X * 0.1f;
						if (Math.Abs(rotation - num935) >= (float)Math.PI)
						{
							if (num935 < rotation)
							{
								rotation -= (float)Math.PI * 2f;
							}
							else
							{
								rotation += (float)Math.PI * 2f;
							}
						}
						float num936 = 12f;
						rotation = (rotation * (num936 - 1f) + num935) / num936;
						if (++frameCounter >= 3)
						{
							frameCounter = 0;
							frame++;
							if (frame >= Main.projFrames[type])
							{
								frame = 0;
							}
						}
						if (frameCounter == 0)
						{
							int num937 = Dust.NewDust(base.position, base.width, base.height, 242, 0f, 0f, 50, default(Color), 2f);
							Main.dust[num937].noGravity = true;
						}
					}
					else if (type == 896)
					{
						float num938 = base.velocity.ToRotation() + (float)Math.PI / 2f;
						if (Math.Abs(rotation - num938) >= (float)Math.PI)
						{
							if (num938 < rotation)
							{
								rotation -= (float)Math.PI * 2f;
							}
							else
							{
								rotation += (float)Math.PI * 2f;
							}
						}
						float num939 = 12f;
						rotation = (rotation * (num939 - 1f) + num938) / num939;
						if (++frameCounter >= 4)
						{
							frameCounter = 0;
							if (frame < 8)
							{
								frame = 8;
							}
							else
							{
								frame++;
								if (frame >= Main.projFrames[type])
								{
									frame = 8;
								}
							}
						}
					}
					else if (type == 898)
					{
						float num940 = base.velocity.X * 0.1f;
						if (Math.Abs(rotation - num940) >= (float)Math.PI)
						{
							if (num940 < rotation)
							{
								rotation -= (float)Math.PI * 2f;
							}
							else
							{
								rotation += (float)Math.PI * 2f;
							}
						}
						float num941 = 12f;
						rotation = (rotation * (num941 - 1f) + num940) / num941;
						if (++frameCounter >= 3)
						{
							frameCounter = 0;
							frame++;
							if (frame >= Main.projFrames[type])
							{
								frame = 0;
							}
						}
						if (frameCounter == 0)
						{
							int num942 = Dust.NewDust(base.position, base.width, base.height, 80, 0f, 0f, 50);
							Main.dust[num942].noGravity = true;
						}
					}
				}
				else if (type == 650)
				{
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (++frameCounter >= 6)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				else if (type == 882)
				{
					rotation = base.velocity.X * 0.125f;
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						frame++;
						if (frame == 6 || frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				else if (type == 888)
				{
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						frame++;
						if (frame == 6 || frame >= 18)
						{
							frame = 0;
						}
					}
				}
				else if (type == 895)
				{
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				else if (type == 896)
				{
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						frame++;
						if (frame == 8 || frame >= Main.projFrames[type])
						{
							frame = 0;
							if (Main.rand.Next(15) == 0)
							{
								frame = 8;
							}
						}
					}
				}
				else if (type == 898)
				{
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				if (flag56 && this.ai[0] > 0f && (this.ai[0] += 1f) >= 60f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
				}
				if (flag56 && Main.rand.Next(15) == 0)
				{
					int num943 = -1;
					int num944 = -1;
					float num945 = -1f;
					int num946 = 17;
					if ((base.Center - player12.Center).Length() < (float)Main.screenWidth)
					{
						int num947 = (int)base.Center.X / 16;
						int num948 = (int)base.Center.Y / 16;
						num947 = (int)MathHelper.Clamp(num947, num946 + 1, Main.maxTilesX - num946 - 1);
						num948 = (int)MathHelper.Clamp(num948, num946 + 1, Main.maxTilesY - num946 - 1);
						for (int num949 = num947 - num946; num949 <= num947 + num946; num949++)
						{
							for (int num950 = num948 - num946; num950 <= num948 + num946; num950++)
							{
								int num951 = Main.rand.Next(8);
								if (num951 < 4 && new Vector2(num947 - num949, num948 - num950).Length() < (float)num946 && Main.tile[num949, num950] != null && Main.tile[num949, num950].active() && Main.IsTileSpelunkable(Main.tile[num949, num950]))
								{
									float num952 = Distance(new Vector2(num949 * 16 + 8, num950 * 16 + 8));
									if (num952 < num945 || num945 == -1f)
									{
										num945 = num952;
										num943 = num949;
										num944 = num950;
										this.ai[0] = 1f;
										this.ai[1] = AngleTo(new Vector2(num949 * 16 + 8, num950 * 16 + 8));
									}
									if (num951 < 2)
									{
										int num953 = Dust.NewDust(new Vector2(num949 * 16, num950 * 16), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
										Main.dust[num953].fadeIn = 0.75f;
										Dust dust = Main.dust[num953];
										dust.velocity *= 0.1f;
									}
								}
							}
						}
					}
				}
				if (!flag56)
				{
					return;
				}
				float f3 = localAI[0] % ((float)Math.PI * 2f) - (float)Math.PI;
				float num954 = (float)Math.IEEERemainder(localAI[1], 1.0);
				if (num954 < 0f)
				{
					num954 += 1f;
				}
				float num955 = (float)Math.Floor(localAI[1]);
				float max = 0.999f;
				float num956 = 0f;
				int num957 = 0;
				float amount2 = 0.1f;
				bool flag57 = player12.velocity.Length() > 3f;
				int num958 = -1;
				int num959 = -1;
				float num960 = 300f;
				float num961 = 500f;
				for (int num962 = 0; num962 < 200; num962++)
				{
					NPC nPC12 = Main.npc[num962];
					if (!nPC12.active || !nPC12.chaseable || nPC12.dontTakeDamage || nPC12.immortal)
					{
						continue;
					}
					float num963 = Distance(nPC12.Center);
					if (nPC12.friendly || nPC12.lifeMax <= 5)
					{
						if (num963 < num960 && !flag57)
						{
							num960 = num963;
							num959 = num962;
						}
					}
					else if (num963 < num961)
					{
						num961 = num963;
						num958 = num962;
					}
				}
				if (flag57)
				{
					num956 = AngleTo(base.Center + player12.velocity);
					num957 = 1;
					num954 = MathHelper.Clamp(num954 + 0.05f, 0f, max);
					num955 += (float)Math.Sign(-10f - num955);
				}
				else if (num958 != -1)
				{
					num956 = AngleTo(Main.npc[num958].Center);
					num957 = 2;
					num954 = MathHelper.Clamp(num954 + 0.05f, 0f, max);
					num955 += (float)Math.Sign(-12f - num955);
				}
				else if (num959 != -1)
				{
					num956 = AngleTo(Main.npc[num959].Center);
					num957 = 3;
					num954 = MathHelper.Clamp(num954 + 0.05f, 0f, max);
					num955 += (float)Math.Sign(6f - num955);
				}
				else if (this.ai[0] > 0f)
				{
					num956 = this.ai[1];
					num954 = MathHelper.Clamp(num954 + (float)Math.Sign(0.75f - num954) * 0.05f, 0f, max);
					num957 = 4;
					num955 += (float)Math.Sign(10f - num955);
					if (Main.rand.Next(10) == 0)
					{
						int num964 = Dust.NewDust(base.Center + f3.ToRotationVector2() * 6f * num954 - Vector2.One * 4f, 8, 8, 204, 0f, 0f, 150, default(Color), 0.3f);
						Main.dust[num964].fadeIn = 0.75f;
						Dust dust = Main.dust[num964];
						dust.velocity *= 0.1f;
					}
				}
				else
				{
					num956 = ((player12.direction == 1) ? 0f : 3.14160275f);
					num954 = MathHelper.Clamp(num954 + (float)Math.Sign(0.75f - num954) * 0.05f, 0f, max);
					num955 += (float)Math.Sign(0f - num955);
					amount2 = 0.12f;
				}
				Vector2 value68 = num956.ToRotationVector2();
				num956 = Vector2.Lerp(f3.ToRotationVector2(), value68, amount2).ToRotation();
				localAI[0] = num956 + (float)num957 * ((float)Math.PI * 2f) + (float)Math.PI;
				localAI[1] = num955 + num954;
			}
			else if (aiStyle == 125)
			{
				Player player13 = Main.player[owner];
				if (Main.myPlayer == owner)
				{
					if (localAI[1] > 0f)
					{
						localAI[1]--;
					}
					if (player13.noItems || player13.CCed || player13.dead)
					{
						Kill();
					}
					else if (Main.mouseRight && Main.mouseRightRelease)
					{
						Kill();
						player13.mouseInterface = true;
						Main.blockMouse = true;
					}
					else if (!player13.channel)
					{
						if (localAI[0] == 0f)
						{
							localAI[0] = 1f;
						}
						Kill();
					}
					else if (localAI[1] == 0f)
					{
						Vector2 vector102 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY);
						if (player13.gravDir == -1f)
						{
							vector102.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
						}
						if (vector102 != base.Center)
						{
							netUpdate = true;
							base.Center = vector102;
							localAI[1] = 1f;
						}
						if (this.ai[0] == 0f && this.ai[1] == 0f)
						{
							this.ai[0] = (int)base.Center.X / 16;
							this.ai[1] = (int)base.Center.Y / 16;
							netUpdate = true;
							base.velocity = Vector2.Zero;
						}
					}
					base.velocity = Vector2.Zero;
					Point point2 = new Vector2(this.ai[0], this.ai[1]).ToPoint();
					Point point3 = base.Center.ToTileCoordinates();
					int num965 = Math.Abs(point2.X - point3.X);
					int num966 = Math.Abs(point2.Y - point3.Y);
					int num967 = Math.Sign(point3.X - point2.X);
					int num968 = Math.Sign(point3.Y - point2.Y);
					Point point4 = default(Point);
					bool flag58 = false;
					bool flag59 = player13.direction == 1;
					int num969;
					int num970;
					int num971;
					if (flag59)
					{
						point4.X = point2.X;
						num969 = point2.Y;
						num970 = point3.Y;
						num971 = num968;
					}
					else
					{
						point4.Y = point2.Y;
						num969 = point2.X;
						num970 = point3.X;
						num971 = num967;
					}
					for (int num972 = num969; num972 != num970; num972 += num971)
					{
						if (flag58)
						{
							break;
						}
						if (flag59)
						{
							point4.Y = num972;
						}
						else
						{
							point4.X = num972;
						}
						if (WorldGen.InWorld(point4.X, point4.Y, 1))
						{
							Tile tile2 = Main.tile[point4.X, point4.Y];
						}
					}
					if (flag59)
					{
						point4.Y = point3.Y;
						num969 = point2.X;
						num970 = point3.X;
						num971 = num967;
					}
					else
					{
						point4.X = point3.X;
						num969 = point2.Y;
						num970 = point3.Y;
						num971 = num968;
					}
					for (int num973 = num969; num973 != num970; num973 += num971)
					{
						if (flag58)
						{
							break;
						}
						if (!flag59)
						{
							point4.Y = num973;
						}
						else
						{
							point4.X = num973;
						}
						if (WorldGen.InWorld(point4.X, point4.Y, 1))
						{
							Tile tile2 = Main.tile[point4.X, point4.Y];
						}
					}
				}
				int num974 = Math.Sign(player13.velocity.X);
				if (num974 != 0)
				{
					player13.ChangeDir(num974);
				}
				player13.heldProj = whoAmI;
				player13.SetDummyItemTime(2);
				player13.itemRotation = 0f;
			}
			else if (aiStyle == 126)
			{
				int num975 = Math.Sign(base.velocity.Y);
				int num976 = ((num975 != -1) ? 1 : 0);
				if (this.ai[0] == 0f)
				{
					if (!Collision.SolidCollision(base.position + new Vector2(0f, (num975 == -1) ? (base.height - 48) : 0), base.width, 48) && !Collision.WetCollision(base.position + new Vector2(0f, (num975 == -1) ? (base.height - 20) : 0), base.width, 20))
					{
						base.velocity = new Vector2(0f, (float)Math.Sign(base.velocity.Y) * 0.001f);
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						timeLeft = 60;
					}
					this.ai[1]++;
					if (this.ai[1] >= 60f)
					{
						Kill();
					}
					for (int num977 = 0; num977 < 3; num977++)
					{
						int num978 = Dust.NewDust(base.position, base.width, base.height, 31, 0f, 0f, 100);
						Main.dust[num978].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num978].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num978].noGravity = true;
						Main.dust[num978].position = base.Center + new Vector2(0f, -base.height / 2).RotatedBy(rotation) * 1.1f;
					}
				}
				if (this.ai[0] != 1f)
				{
					return;
				}
				base.velocity = new Vector2(0f, (float)Math.Sign(base.velocity.Y) * 0.001f);
				if (num975 != 0)
				{
					int num979 = 16;
					int num980 = 320;
					if (type == 670)
					{
						num980 -= (int)Math.Abs(localAI[1]) * 64;
					}
					for (; num979 < num980 && !Collision.SolidCollision(base.position + new Vector2(0f, (num975 == -1) ? (base.height - num979 - 16) : 0), base.width, num979 + 16); num979 += 16)
					{
					}
					if (num975 == -1)
					{
						base.position.Y += base.height;
						base.height = num979;
						base.position.Y -= num979;
					}
					else
					{
						base.height = num979;
					}
				}
				this.ai[1]++;
				if (type == 670 && owner == Main.myPlayer && this.ai[1] == 12f && localAI[1] < 3f && localAI[1] > -3f)
				{
					if (localAI[1] == 0f)
					{
						int num981 = NewProjectile(base.Bottom + new Vector2(-50f, -10f), -Vector2.UnitY, type, damage, knockBack, owner);
						Main.projectile[num981].localAI[1] = localAI[1] - 1f;
						num981 = NewProjectile(base.Bottom + new Vector2(50f, -10f), -Vector2.UnitY, type, damage, knockBack, owner);
						Main.projectile[num981].localAI[1] = localAI[1] + 1f;
					}
					else
					{
						int num982 = Math.Sign(localAI[1]);
						int num983 = NewProjectile(base.Bottom + new Vector2(50 * num982, -10f), -Vector2.UnitY, type, damage, knockBack, owner);
						Main.projectile[num983].localAI[1] = localAI[1] + (float)num982;
					}
				}
				if (this.ai[1] >= 60f)
				{
					Kill();
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num984 = 0; (float)num984 < 60f; num984++)
					{
						int num985 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num986 = Dust.NewDust(base.position, base.width, base.height, num985, 0f, -2.5f * (float)(-num975));
						Main.dust[num986].alpha = 200;
						Dust dust = Main.dust[num986];
						dust.velocity *= new Vector2(0.3f, 2f);
						Main.dust[num986].velocity.Y += 2 * num975;
						dust = Main.dust[num986];
						dust.scale += Main.rand.NextFloat();
						Main.dust[num986].position = new Vector2(base.Center.X, base.Center.Y + (float)base.height * 0.5f * (float)(-num975));
						Main.dust[num986].customData = num976;
						if (num975 == -1 && Main.rand.Next(4) != 0)
						{
							Main.dust[num986].velocity.Y -= 0.2f;
						}
					}
					SoundEngine.PlaySound(SoundID.Item34, base.position);
				}
				if (num975 == 1)
				{
					for (int num987 = 0; (float)num987 < 9f; num987++)
					{
						int num988 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num989 = Dust.NewDust(base.position, base.width, base.height, num988, 0f, -2.5f * (float)(-num975));
						Main.dust[num989].alpha = 200;
						Dust dust = Main.dust[num989];
						dust.velocity *= new Vector2(0.3f, 2f);
						Main.dust[num989].velocity.Y += 2 * num975;
						dust = Main.dust[num989];
						dust.scale += Main.rand.NextFloat();
						Main.dust[num989].position = new Vector2(base.Center.X, base.Center.Y + (float)base.height * 0.5f * (float)(-num975));
						Main.dust[num989].customData = num976;
						if (num975 == -1 && Main.rand.Next(4) != 0)
						{
							Main.dust[num989].velocity.Y -= 0.2f;
						}
					}
				}
				int num990 = (int)(this.ai[1] / 60f * (float)base.height) * 3;
				if (num990 > base.height)
				{
					num990 = base.height;
				}
				Vector2 position7 = base.position + ((num975 == -1) ? new Vector2(0f, base.height - num990) : Vector2.Zero);
				Vector2 vector103 = base.position + ((num975 == -1) ? new Vector2(0f, base.height) : Vector2.Zero);
				for (int num991 = 0; (float)num991 < 6f; num991++)
				{
					if (Main.rand.Next(3) < 2)
					{
						int num992 = Dust.NewDust(position7, base.width, num990, 6, 0f, 0f, 90, default(Color), 2.5f);
						Main.dust[num992].noGravity = true;
						Main.dust[num992].fadeIn = 1f;
						if (Main.dust[num992].velocity.Y > 0f)
						{
							Main.dust[num992].velocity.Y *= -1f;
						}
						if (Main.rand.Next(6) < 3)
						{
							Main.dust[num992].position.Y = MathHelper.Lerp(Main.dust[num992].position.Y, vector103.Y, 0.5f);
							Dust dust = Main.dust[num992];
							dust.velocity *= 5f;
							Main.dust[num992].velocity.Y -= 3f;
							Main.dust[num992].position.X = base.Center.X;
							Main.dust[num992].noGravity = false;
							Main.dust[num992].noLight = true;
							Main.dust[num992].fadeIn = 0.4f;
							dust = Main.dust[num992];
							dust.scale *= 0.3f;
						}
						else
						{
							Main.dust[num992].velocity = DirectionFrom(Main.dust[num992].position) * Main.dust[num992].velocity.Length() * 0.25f;
						}
						Main.dust[num992].velocity.Y *= -num975;
						Main.dust[num992].customData = num976;
					}
				}
				for (int num993 = 0; (float)num993 < 6f; num993++)
				{
					if (!(Main.rand.NextFloat() < 0.5f))
					{
						int num994 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num995 = Dust.NewDust(position7, base.width, num990, num994, 0f, -2.5f * (float)(-num975));
						Main.dust[num995].alpha = 200;
						Dust dust = Main.dust[num995];
						dust.velocity *= new Vector2(0.6f, 1.5f);
						dust = Main.dust[num995];
						dust.scale += Main.rand.NextFloat();
						if (num975 == -1 && Main.rand.Next(4) != 0)
						{
							Main.dust[num995].velocity.Y -= 0.2f;
						}
						Main.dust[num995].customData = num976;
					}
				}
			}
			else if (aiStyle == 127)
			{
				float num996 = 900f;
				if (type == 657)
				{
					num996 = 300f;
				}
				if (soundDelay == 0)
				{
					soundDelay = -1;
					SoundEngine.PlaySound(SoundID.Item82, base.Center);
				}
				this.ai[0]++;
				if (this.ai[0] >= num996)
				{
					Kill();
				}
				if (type == 656 && localAI[0] >= 30f)
				{
					damage = 0;
					if (this.ai[0] < num996 - 120f)
					{
						float num997 = this.ai[0] % 60f;
						this.ai[0] = num996 - 120f + num997;
						netUpdate = true;
					}
				}
				float num998 = 15f;
				float num999 = 15f;
				Point point5 = base.Center.ToTileCoordinates();
				Collision.ExpandVertically(point5.X, point5.Y, out var topY, out var bottomY, (int)num998, (int)num999);
				topY++;
				bottomY--;
				Vector2 value69 = new Vector2(point5.X, topY) * 16f + new Vector2(8f);
				Vector2 value70 = new Vector2(point5.X, bottomY) * 16f + new Vector2(8f);
				Vector2 vector104 = Vector2.Lerp(value69, value70, 0.5f);
				Vector2 value71 = new Vector2(0f, value70.Y - value69.Y);
				value71.X = value71.Y * 0.2f;
				base.width = (int)(value71.X * 0.65f);
				base.height = (int)value71.Y;
				base.Center = vector104;
				if (type == 656 && owner == Main.myPlayer)
				{
					bool flag60 = false;
					Vector2 center13 = Main.player[owner].Center;
					Vector2 top = Main.player[owner].Top;
					for (float num1000 = 0f; num1000 < 1f; num1000 += 0.05f)
					{
						Vector2 position8 = Vector2.Lerp(value69, value70, num1000);
						if (Collision.CanHitLine(position8, 0, 0, center13, 0, 0) || Collision.CanHitLine(position8, 0, 0, top, 0, 0))
						{
							flag60 = true;
							break;
						}
					}
					if (!flag60 && this.ai[0] < num996 - 120f)
					{
						float num1001 = this.ai[0] % 60f;
						this.ai[0] = num996 - 120f + num1001;
						netUpdate = true;
					}
				}
				if (!(this.ai[0] < num996 - 120f))
				{
					return;
				}
				for (int num1002 = 0; num1002 < 1; num1002++)
				{
					float value72 = -0.5f;
					float value73 = 0.9f;
					float amount3 = Main.rand.NextFloat();
					Vector2 value74 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value72, value73, amount3));
					value74.X *= MathHelper.Lerp(2.2f, 0.6f, amount3);
					value74.X *= -1f;
					Vector2 value75 = new Vector2(6f, 10f);
					Vector2 position9 = vector104 + value71 * value74 * 0.5f + value75;
					Dust dust48 = Main.dust[Dust.NewDust(position9, 0, 0, 269)];
					dust48.position = position9;
					dust48.customData = vector104 + value75;
					dust48.fadeIn = 1f;
					dust48.scale = 0.3f;
					if (value74.X > -1.2f)
					{
						dust48.velocity.X = 1f + Main.rand.NextFloat();
					}
					dust48.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
				}
			}
			else if (aiStyle == 128)
			{
				Color newColor4 = new Color(255, 255, 255);
				if (soundDelay == 0)
				{
					soundDelay = -1;
					SoundEngine.PlaySound(SoundID.Item60, base.Center);
				}
				if (localAI[1] < 30f)
				{
					for (int num1003 = 0; num1003 < 1; num1003++)
					{
						float value76 = -0.5f;
						float value77 = 0.9f;
						float amount4 = Main.rand.NextFloat();
						Vector2 value78 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value76, value77, amount4));
						value78.X *= MathHelper.Lerp(2.2f, 0.6f, amount4);
						value78.X *= -1f;
						Vector2 value79 = new Vector2(2f, 10f);
						Vector2 position10 = base.Center + new Vector2(60f, 200f) * value78 * 0.5f + value79;
						Dust dust49 = Main.dust[Dust.NewDust(position10, 0, 0, 269)];
						dust49.position = position10;
						dust49.customData = base.Center + value79;
						dust49.fadeIn = 1f;
						dust49.scale = 0.3f;
						if (value78.X > -1.2f)
						{
							dust49.velocity.X = 1f + Main.rand.NextFloat();
						}
						dust49.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
					}
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 0.8f;
					direction = 1;
					Point point6 = base.Center.ToTileCoordinates();
					base.Center = new Vector2(point6.X * 16 + 8, point6.Y * 16 + 8);
				}
				rotation = localAI[1] / 40f * ((float)Math.PI * 2f) * (float)direction;
				if (localAI[1] < 33f)
				{
					if (alpha > 0)
					{
						alpha -= 8;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (localAI[1] > 103f)
				{
					if (alpha < 255)
					{
						alpha += 16;
					}
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center, newColor4.ToVector3() * 0.5f);
				}
				for (int num1004 = 0; num1004 < 2; num1004++)
				{
					if (Main.rand.Next(10) == 0)
					{
						Vector2 value80 = Vector2.UnitY.RotatedBy((float)num1004 * (float)Math.PI).RotatedBy(rotation);
						Dust dust50 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
						dust50.noGravity = true;
						dust50.noLight = true;
						dust50.scale = Opacity * localAI[0];
						dust50.position = base.Center;
						dust50.velocity = value80 * 2.5f;
					}
				}
				for (int num1005 = 0; num1005 < 2; num1005++)
				{
					if (Main.rand.Next(10) == 0)
					{
						Vector2 value81 = Vector2.UnitY.RotatedBy((float)num1005 * (float)Math.PI);
						Dust dust51 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
						dust51.noGravity = true;
						dust51.noLight = true;
						dust51.scale = Opacity * localAI[0];
						dust51.position = base.Center;
						dust51.velocity = value81 * 2.5f;
					}
				}
				if (localAI[1] < 33f || localAI[1] > 87f)
				{
					scale = Opacity / 2f * localAI[0];
				}
				base.velocity = Vector2.Zero;
				localAI[1]++;
				if (localAI[1] == 60f && owner == Main.myPlayer)
				{
					int num1006 = 30;
					if (Main.expertMode)
					{
						num1006 = 22;
					}
					NewProjectile(base.Center, Vector2.Zero, 657, num1006, 3f, owner);
				}
				if (localAI[1] >= 120f)
				{
					Kill();
				}
			}
			else if (aiStyle == 129)
			{
				float num1007 = 10f;
				float scaleFactor8 = 5f;
				float num1008 = 40f;
				if (type == 659)
				{
					num1007 = 3f;
					scaleFactor8 = 7.5f;
					num1008 = 1f;
					if (localAI[0] > 0f)
					{
						localAI[0]--;
					}
					if (localAI[0] == 0f && this.ai[0] < 0f && owner == Main.myPlayer)
					{
						localAI[0] = 5f;
						for (int num1009 = 0; num1009 < 200; num1009++)
						{
							NPC nPC13 = Main.npc[num1009];
							if (nPC13.CanBeChasedBy(this))
							{
								bool flag61 = this.ai[0] < 0f || Main.npc[(int)this.ai[0]].Distance(base.Center) > nPC13.Distance(base.Center);
								if ((flag61 & (nPC13.Distance(base.Center) < 400f)) && (Collision.CanHitLine(base.Center, 0, 0, nPC13.Center, 0, 0) || Collision.CanHitLine(base.Center, 0, 0, nPC13.Top, 0, 0)))
								{
									this.ai[0] = num1009;
								}
							}
						}
						if (this.ai[0] >= 0f)
						{
							timeLeft = 300;
							netUpdate = true;
						}
					}
					if (timeLeft > 30 && alpha > 0)
					{
						alpha -= 12;
					}
					if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, base.width, base.height))
					{
						alpha = 128;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (++frameCounter > 4)
					{
						frameCounter = 0;
						if (++frame >= 4)
						{
							frame = 0;
						}
					}
					float num1010 = 0.5f;
					if (timeLeft < 120)
					{
						num1010 = 1.1f;
					}
					if (timeLeft < 60)
					{
						num1010 = 1.6f;
					}
					this.ai[1]++;
					float num1011 = this.ai[1] / 180f * ((float)Math.PI * 2f);
					for (float num1012 = 0f; num1012 < 3f; num1012++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust dust52 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f)];
							dust52.position = base.Center + Vector2.UnitY.RotatedBy(num1012 * ((float)Math.PI * 2f) / 3f + this.ai[1]) * 10f;
							dust52.noGravity = true;
							dust52.velocity = DirectionFrom(dust52.position);
							dust52.scale = num1010;
							dust52.fadeIn = 0.5f;
							dust52.alpha = 200;
						}
					}
				}
				if (timeLeft > 2 && Collision.SolidCollision(base.position, base.width, base.height))
				{
					timeLeft = 2;
				}
				int num1013 = (int)this.ai[0];
				if (num1013 >= 0 && Main.npc[num1013].active)
				{
					if (Distance(Main.npc[num1013].Center) > num1008)
					{
						Vector2 vector105 = DirectionTo(Main.npc[num1013].Center);
						if (vector105.HasNaNs())
						{
							vector105 = Vector2.UnitY;
						}
						base.velocity = (base.velocity * (num1007 - 1f) + vector105 * scaleFactor8) / num1007;
					}
					return;
				}
				if (this.ai[0] == -1f && timeLeft > 5)
				{
					timeLeft = 5;
				}
				if (this.ai[0] == -2f && timeLeft > 180)
				{
					timeLeft = 180;
				}
				if (this.ai[0] >= 0f)
				{
					this.ai[0] = -1f;
					netUpdate = true;
				}
			}
			else if (aiStyle == 130)
			{
				AI_130_FlameBurstTower();
			}
			else if (aiStyle == 131)
			{
				AI_131_FlameBurstShot();
			}
			else if (aiStyle == 132)
			{
				if (localAI[1] == 0f)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DefeatScene, base.Center);
					}
					if (localAI[0] == 105f)
					{
						for (int num1014 = 0; num1014 < 20; num1014++)
						{
							float num1015 = (float)num1014 / 20f;
							Vector2 vector106 = new Vector2(Main.rand.NextFloat() * 10f, 0f).RotatedBy(num1015 * -(float)Math.PI + Main.rand.NextFloat() * 0.1f - 0.05f);
							Gore gore2 = Gore.NewGoreDirect(base.Center + vector106 * 3f, vector106, Utils.SelectRandom<int>(Main.rand, 1027, 1028, 1029, 1030));
							if (gore2.velocity.Y > 0f)
							{
								Gore gore = gore2;
								gore.velocity *= -0.5f;
							}
							if (gore2.velocity.Y < -5f)
							{
								gore2.velocity.Y *= 0.8f;
							}
							gore2.velocity.Y *= 1.1f;
							gore2.velocity.X *= 0.88f;
						}
					}
					if (!Main.dedServ)
					{
						if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
						{
							Filters.Scene.Activate("CrystalDestructionVortex", default(Vector2));
						}
						if (!Filters.Scene["CrystalDestructionColor"].IsActive())
						{
							Filters.Scene.Activate("CrystalDestructionColor", default(Vector2));
						}
						float num1016 = Math.Min(1f, localAI[0] / 120f);
						Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num1016);
						Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num1016 * 2f).UseProgress(0f)
							.UseTargetPosition(base.Center);
					}
					if (localAI[0] == 120f)
					{
						localAI[0] = 0f;
						localAI[1]++;
					}
				}
				else if (localAI[1] == 1f)
				{
					if (!Main.dedServ)
					{
						float num1017 = localAI[0] / 300f;
						float num1018 = Math.Min(1f, localAI[0] / 150f);
						base.velocity.Y = num1018 * -0.25f;
						if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
						{
							Filters.Scene.Activate("CrystalDestructionVortex", default(Vector2));
						}
						if (!Filters.Scene["CrystalDestructionColor"].IsActive())
						{
							Filters.Scene.Activate("CrystalDestructionColor", default(Vector2));
						}
						num1018 = 1f;
						Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num1018);
						Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num1018 * 2f).UseProgress(0f)
							.UseTargetPosition(base.Center);
					}
					if (localAI[0] == 300f)
					{
						localAI[0] = 0f;
						localAI[1]++;
					}
				}
				else if (localAI[1] == 2f)
				{
					float num1019 = localAI[0] / 300f;
					if (Main.netMode != 2)
					{
						Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(2f).UseProgress(num1019 * 30f);
					}
					base.velocity.Y -= 1f;
					if (localAI[0] == 60f)
					{
						localAI[0] = 0f;
						localAI[1]++;
					}
				}
				else if (localAI[1] == 3f)
				{
					if (!Main.dedServ)
					{
						Filters.Scene.Deactivate("CrystalDestructionVortex");
						Filters.Scene.Deactivate("CrystalDestructionColor");
					}
					Kill();
				}
				if (localAI[1] >= 1f)
				{
					for (int num1020 = 0; num1020 < 1 + (int)(0f - base.velocity.Y); num1020++)
					{
						if (Main.rand.Next(2) == 0)
						{
							float num1021 = Main.rand.NextFloat() * (0f - base.velocity.Y);
							Vector2 value82 = new Vector2(Main.rand.NextFloat() * 0.1f - 0.05f, 0f);
							value82.X += (float)Math.Sin((double)((base.position.Y + num1021) * 0.01f) + 6.2831854820251465 * ((double)Main.rand.Next(3) / 3.0)) * 0.5f;
							value82.X = MathHelper.Lerp(Main.rand.NextFloat() - 0.5f, value82.X, MathHelper.Clamp(0f - base.velocity.Y, 0f, 1f));
							value82.Y = 0.5f - Math.Abs(value82.X);
							value82 *= new Vector2(100f, 50f);
							value82.Y += num1021;
							Vector2 position11 = base.Center + value82;
							Dust dust53 = Dust.NewDustPerfect(position11, 27, Vector2.Zero, 0, Color.White * 0.1f, 1.1f);
							dust53.velocity.Y = Main.rand.NextFloat() * 2f;
							dust53.fadeIn = 0.1f;
						}
					}
				}
				localAI[0]++;
			}
			else if (aiStyle == 133)
			{
				if (type == 673)
				{
					if (this.ai[0] == 70f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_SkeletonSummoned, base.Center);
					}
					this.ai[0]++;
					float opacity = 0f;
					if (this.ai[0] < 20f)
					{
						opacity = Utils.GetLerpValue(0f, 20f, this.ai[0], clamped: true);
					}
					else if (this.ai[0] < 60f)
					{
						opacity = 1f;
					}
					else if (this.ai[0] < 80f)
					{
						opacity = Utils.GetLerpValue(80f, 60f, this.ai[0], clamped: true);
					}
					else
					{
						Kill();
					}
					Opacity = opacity;
					_ = owner;
					_ = Main.myPlayer;
				}
				if (type != 674)
				{
					return;
				}
				if (this.ai[0] == 0f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageHealImpact, base.Center);
				}
				this.ai[0]++;
				if (!(this.ai[0] >= 40f))
				{
					return;
				}
				for (int num1022 = 0; num1022 < 200; num1022++)
				{
					NPC nPC14 = Main.npc[num1022];
					if (nPC14.active && nPC14.damage >= 1 && nPC14.lifeMax >= 30 && !(Distance(nPC14.Center) > 1000f) && nPC14.type != 564 && nPC14.type != 565)
					{
						int num1023 = 500;
						int num1024 = nPC14.lifeMax - nPC14.life;
						if (num1023 > num1024)
						{
							num1023 = num1024;
						}
						if (num1023 > 0)
						{
							NPC nPC8 = nPC14;
							nPC8.life += num1023;
							nPC14.HealEffect(num1023);
							nPC14.netUpdate = true;
						}
					}
				}
				Kill();
			}
			else if (aiStyle == 134)
			{
				AI_134_Ballista();
			}
			else if (aiStyle == 135)
			{
				AI_135_OgreStomp();
			}
			else if (aiStyle == 136)
			{
				AI_136_BetsyBreath();
			}
			else if (aiStyle == 137)
			{
				AI_137_LightningAura();
			}
			else if (aiStyle == 138)
			{
				AI_138_ExplosiveTrap();
			}
			else if (aiStyle == 139)
			{
				AI_139_ExplosiveTrapExplosion();
			}
			else if (aiStyle == 140)
			{
				AI_140_MonkStaffT1();
			}
			else if (aiStyle == 141)
			{
				AI_141_MonkStaffT1Explosion();
			}
			else if (aiStyle == 142)
			{
				AI_142_MonkStaffT2And3();
			}
			else if (aiStyle == 143)
			{
				AI_143_MonkStaffT2Ghast();
			}
			else if (aiStyle == 144)
			{
				AI_144_DD2Pet();
			}
			else if (aiStyle == 145)
			{
				AI_145_BookStaffStorm();
			}
			else if (aiStyle == 146)
			{
				AI_146_DD2Victory();
			}
			else if (aiStyle == 147)
			{
				AI_147_Celeb2Rocket();
			}
			else if (aiStyle == 148)
			{
				AI_148_StarSpawner();
			}
			else if (aiStyle == 149)
			{
				AI_149_GolfBall();
			}
			else if (aiStyle == 150)
			{
				AI_150_GolfClubHelper();
			}
			else if (aiStyle == 151)
			{
				AI_151_SuperStar();
			}
			else if (aiStyle == 152)
			{
				AI_152_SuperStarSlash();
			}
			else if (aiStyle == 153)
			{
				AI_153_ToiletPop();
			}
			else if (aiStyle == 154)
			{
				AI_154_VoidLens();
			}
			else if (aiStyle == 155)
			{
				AI_155_MysticSnakeCoil();
			}
			else if (aiStyle == 156)
			{
				AI_156_BatOfLight();
			}
			else if (aiStyle == 157)
			{
				AI_157_SharpTears();
			}
			else if (aiStyle == 158)
			{
				AI_158_BabyBird();
			}
			else if (aiStyle == 159)
			{
				AI_159_PaperAirplanes();
			}
			else if (aiStyle == 160)
			{
				AI_160_Kites();
			}
			else if (aiStyle == 161)
			{
				AI_161_RapierStabs();
			}
			else if (aiStyle == 162)
			{
				AI_162_TigerPounce();
			}
			else if (aiStyle == 163)
			{
				AI_163_Chum();
			}
			else if (aiStyle == 164)
			{
				AI_164_StormTigerGem();
			}
			else if (aiStyle == 165)
			{
				AI_165_Whip();
			}
			else if (aiStyle == 166)
			{
				AI_166_Dove();
			}
			else if (aiStyle == 167)
			{
				AI_167_SparkleGuitar();
			}
			else if (aiStyle == 168)
			{
				AI_168_FirstFractal();
			}
			else if (aiStyle == 169)
			{
				AI_169_Smolstars();
			}
			else if (aiStyle == 170)
			{
				AI_170_FairyGlowstick();
			}
			else if (aiStyle == 171)
			{
				AI_171_HallowBossRainbowStreak();
			}
			else if (aiStyle == 172)
			{
				AI_172_HallowBossRainbowPelletStorm();
			}
			else if (aiStyle == 173)
			{
				AI_173_HallowBossRainbowTrail();
			}
			else if (aiStyle == 174)
			{
				AI_174_MultisegmentPet();
			}
			else if (aiStyle == 175)
			{
				AI_175_TitaniumStormShards();
			}
			else if (aiStyle == 176)
			{
				AI_176_EdgyLightning();
			}
			else if (aiStyle == 177)
			{
				AI_177_IceWhipSlicer();
			}
			else if (aiStyle == 178)
			{
				AI_178_FireExplosion();
			}
			else if (aiStyle == 179)
			{
				AI_179_FairyQueenLance();
			}
			else if (aiStyle == 180)
			{
				AI_180_FairyQueenSunDance();
			}
			else if (aiStyle == 181)
			{
				AI_181_FairyQueenRangedItemShot();
			}
			else if (aiStyle == 182)
			{
				AI_182_FinalFractal();
			}
			else if (aiStyle == 183)
			{
				AI_183_ZoologistStrike();
			}
			else if (aiStyle == 184)
			{
				AI_184_BadTorchLuck();
			}
		}

		private void AI_184_BadTorchLuck()
		{
			owner = 255;
			if (Main.player[Main.myPlayer].unlockedBiomeTorches)
			{
				damage = 0;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item8, base.Center);
			}
			if (ai[1] > 0f)
			{
				ai[1] -= velocity.Length();
			}
			else
			{
				tileCollide = true;
			}
			int num = (int)ai[0];
			float num2 = 4f;
			for (float num3 = 0f; num3 < num2; num3 += 1f)
			{
				int num4 = Dust.NewDust(position + velocity / num2 * num3, 4, 4, num, 0f, 0f, 100);
				if (Main.rand.Next(3) != 0)
				{
					Main.dust[num4].noGravity = true;
				}
				Main.dust[num4].velocity *= 0.3f;
				if (num == 66)
				{
					Main.dust[num4].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
					Main.dust[num4].noGravity = true;
				}
			}
		}

		private void AI_121_StardustDragon()
		{
			Player player = Main.player[owner];
			if ((int)Main.timeForVisualEffects % 120 == 0)
			{
				netUpdate = true;
			}
			if (!player.active)
			{
				active = false;
				return;
			}
			bool num = type == 625;
			bool flag = type == 625 || type == 626 || type == 627 || type == 628;
			int num2 = 10;
			if (flag)
			{
				if (player.dead)
				{
					player.stardustDragon = false;
				}
				if (player.stardustDragon)
				{
					timeLeft = 2;
				}
				num2 = 30;
				if (Main.rand.Next(30) == 0)
				{
					int num3 = Dust.NewDust(position, width, height, 135, 0f, 0f, 0, default(Color), 2f);
					Main.dust[num3].noGravity = true;
					Main.dust[num3].fadeIn = 2f;
					Point point = Main.dust[num3].position.ToTileCoordinates();
					if (WorldGen.InWorld(point.X, point.Y, 5) && WorldGen.SolidTile(point.X, point.Y))
					{
						Main.dust[num3].noLight = true;
					}
				}
			}
			if (num)
			{
				Vector2 center = player.Center;
				float num4 = 700f;
				float num5 = 1000f;
				int num6 = -1;
				if (Distance(center) > 2000f)
				{
					base.Center = center;
					netUpdate = true;
				}
				if (true)
				{
					NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
					if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
					{
						float num7 = Distance(ownerMinionAttackTargetNPC.Center);
						if (num7 < num4 * 2f)
						{
							num6 = ownerMinionAttackTargetNPC.whoAmI;
							if (ownerMinionAttackTargetNPC.boss)
							{
								_ = ownerMinionAttackTargetNPC.whoAmI;
							}
							else
							{
								_ = ownerMinionAttackTargetNPC.whoAmI;
							}
						}
					}
					if (num6 < 0)
					{
						for (int i = 0; i < 200; i++)
						{
							NPC nPC = Main.npc[i];
							if (nPC.CanBeChasedBy(this) && player.Distance(nPC.Center) < num5)
							{
								float num8 = Distance(nPC.Center);
								if (num8 < num4)
								{
									num6 = i;
									_ = nPC.boss;
								}
							}
						}
					}
				}
				if (num6 != -1)
				{
					NPC nPC2 = Main.npc[num6];
					Vector2 vector = nPC2.Center - base.Center;
					(vector.X > 0f).ToDirectionInt();
					(vector.Y > 0f).ToDirectionInt();
					float scaleFactor = 0.4f;
					if (vector.Length() < 600f)
					{
						scaleFactor = 0.6f;
					}
					if (vector.Length() < 300f)
					{
						scaleFactor = 0.8f;
					}
					if (vector.Length() > nPC2.Size.Length() * 0.75f)
					{
						velocity += Vector2.Normalize(vector) * scaleFactor * 1.5f;
						if (Vector2.Dot(velocity, vector) < 0.25f)
						{
							velocity *= 0.8f;
						}
					}
					float num9 = 30f;
					if (velocity.Length() > num9)
					{
						velocity = Vector2.Normalize(velocity) * num9;
					}
				}
				else
				{
					float num10 = 0.2f;
					Vector2 vector2 = center - base.Center;
					if (vector2.Length() < 200f)
					{
						num10 = 0.12f;
					}
					if (vector2.Length() < 140f)
					{
						num10 = 0.06f;
					}
					if (vector2.Length() > 100f)
					{
						if (Math.Abs(center.X - base.Center.X) > 20f)
						{
							velocity.X += num10 * (float)Math.Sign(center.X - base.Center.X);
						}
						if (Math.Abs(center.Y - base.Center.Y) > 10f)
						{
							velocity.Y += num10 * (float)Math.Sign(center.Y - base.Center.Y);
						}
					}
					else if (velocity.Length() > 2f)
					{
						velocity *= 0.96f;
					}
					if (Math.Abs(velocity.Y) < 1f)
					{
						velocity.Y -= 0.1f;
					}
					float num11 = 15f;
					if (velocity.Length() > num11)
					{
						velocity = Vector2.Normalize(velocity) * num11;
					}
				}
				rotation = velocity.ToRotation() + (float)Math.PI / 2f;
				int direction = base.direction;
				base.direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
				if (direction != base.direction)
				{
					netUpdate = true;
				}
				float num12 = MathHelper.Clamp(localAI[0], 0f, 50f);
				position = base.Center;
				scale = 1f + num12 * 0.01f;
				width = (height = (int)((float)num2 * scale));
				base.Center = position;
				if (alpha > 0)
				{
					for (int j = 0; j < 2; j++)
					{
						int num13 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num13].noGravity = true;
						Main.dust[num13].noLight = true;
					}
					alpha -= 42;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
			}
			else
			{
				bool flag2 = false;
				Vector2 value = Vector2.Zero;
				_ = Vector2.Zero;
				float num14 = 0f;
				float scaleFactor2 = 0f;
				float scaleFactor3 = 1f;
				if (ai[1] == 1f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
				int byUUID = GetByUUID(owner, (int)ai[0]);
				if (Main.projectile.IndexInRange(byUUID))
				{
					Projectile projectile = Main.projectile[byUUID];
					if (flag && projectile.active && (projectile.type == 625 || projectile.type == 626 || projectile.type == 627))
					{
						flag2 = true;
						value = projectile.Center;
						_ = projectile.velocity;
						num14 = projectile.rotation;
						scaleFactor3 = MathHelper.Clamp(projectile.scale, 0f, 50f);
						scaleFactor2 = 16f;
						_ = projectile.alpha;
						projectile.localAI[0] = localAI[0] + 1f;
						if (projectile.type != 625)
						{
							projectile.localAI[1] = whoAmI;
						}
						if (owner == Main.myPlayer && type == 628 && projectile.type == 625)
						{
							projectile.Kill();
							Kill();
							return;
						}
					}
				}
				if (!flag2)
				{
					for (int k = 0; k < 1000; k++)
					{
						Projectile projectile2 = Main.projectile[k];
						if (projectile2.active && projectile2.owner == owner && ProjectileID.Sets.StardustDragon[projectile2.type] && projectile2.localAI[1] == ai[0])
						{
							ai[0] = projectile2.projUUID;
							projectile2.localAI[1] = whoAmI;
							netUpdate = true;
						}
					}
					return;
				}
				if (alpha > 0)
				{
					for (int l = 0; l < 2; l++)
					{
						int num15 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num15].noGravity = true;
						Main.dust[num15].noLight = true;
					}
				}
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
				velocity = Vector2.Zero;
				Vector2 vector3 = value - base.Center;
				if (num14 != rotation)
				{
					float num16 = MathHelper.WrapAngle(num14 - rotation);
					vector3 = vector3.RotatedBy(num16 * 0.1f);
				}
				rotation = vector3.ToRotation() + (float)Math.PI / 2f;
				position = base.Center;
				scale = scaleFactor3;
				width = (height = (int)((float)num2 * scale));
				base.Center = position;
				if (vector3 != Vector2.Zero)
				{
					base.Center = value - Vector2.Normalize(vector3) * scaleFactor2 * scaleFactor3;
				}
				spriteDirection = ((vector3.X > 0f) ? 1 : (-1));
			}
			position.X = MathHelper.Clamp(position.X, 160f, Main.maxTilesX * 16 - 160);
			position.Y = MathHelper.Clamp(position.Y, 160f, Main.maxTilesY * 16 - 160);
		}

		private Projectile FindStardustDragonHeadOfOwner()
		{
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == owner && projectile.type == 625)
				{
					return projectile;
				}
			}
			return null;
		}

		private void AI_183_ZoologistStrike()
		{
			velocity.X *= 0.2f;
			velocity.Y = 0f;
			spriteDirection = (direction = 1);
			if (velocity.X < 0f)
			{
				spriteDirection = (direction = -1);
			}
			frame++;
			if (frame >= Main.projFrames[type])
			{
				frame = Main.projFrames[type] - 1;
			}
		}

		private void AI_182_FinalFractal()
		{
			Player player = Main.player[owner];
			Vector2 mountedCenter = player.MountedCenter;
			float lerpValue = Utils.GetLerpValue(900f, 0f, velocity.Length() * 2f, clamped: true);
			float num = MathHelper.Lerp(0.7f, 2f, lerpValue);
			localAI[0] += num;
			if (localAI[0] >= 120f)
			{
				Kill();
				return;
			}
			float lerpValue2 = Utils.GetLerpValue(0f, 1f, localAI[0] / 60f, clamped: true);
			float num2 = localAI[0] / 60f;
			float num3 = ai[0];
			float num4 = velocity.ToRotation();
			float num5 = (float)Math.PI;
			float num6 = ((velocity.X > 0f) ? 1 : (-1));
			float num7 = num5 + num6 * lerpValue2 * ((float)Math.PI * 2f);
			float num8 = velocity.Length() + Utils.GetLerpValue(0.5f, 1f, lerpValue2, clamped: true) * 40f;
			float num9 = 60f;
			if (num8 < num9)
			{
				num8 = num9;
			}
			Vector2 value = mountedCenter + velocity;
			Vector2 spinningpoint = new Vector2(1f, 0f).RotatedBy(num7) * new Vector2(num8, num3 * MathHelper.Lerp(2f, 1f, lerpValue));
			Vector2 value2 = value + spinningpoint.RotatedBy(num4);
			Vector2 value3 = (1f - Utils.GetLerpValue(0f, 0.5f, lerpValue2, clamped: true)) * new Vector2((float)((velocity.X > 0f) ? 1 : (-1)) * (0f - num8) * 0.1f, (0f - ai[0]) * 0.3f);
			float num10 = num7 + num4;
			rotation = num10 + (float)Math.PI / 2f;
			base.Center = value2 + value3;
			spriteDirection = (direction = ((velocity.X > 0f) ? 1 : (-1)));
			if (num3 < 0f)
			{
				rotation = num5 + num6 * lerpValue2 * ((float)Math.PI * -2f) + num4;
				rotation += (float)Math.PI / 2f;
				spriteDirection = (direction = ((!(velocity.X > 0f)) ? 1 : (-1)));
			}
			if (num2 < 1f)
			{
				FinalFractalHelper.FinalFractalProfile finalFractalProfile = FinalFractalHelper.GetFinalFractalProfile((int)ai[1]);
				Vector2 value4 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				Vector2 center = base.Center;
				int num11 = 1 + (int)(velocity.Length() / 100f);
				num11 = (int)((float)num11 * Utils.GetLerpValue(0f, 0.5f, lerpValue2, clamped: true) * Utils.GetLerpValue(1f, 0.5f, lerpValue2, clamped: true));
				if (num11 < 1)
				{
					num11 = 1;
				}
				for (int i = 0; i < num11; i++)
				{
					finalFractalProfile.dustMethod(center + value4 * finalFractalProfile.trailWidth * MathHelper.Lerp(0.5f, 1f, Main.rand.NextFloat()), rotation - (float)Math.PI / 2f + (float)Math.PI / 2f * (float)spriteDirection, player.velocity);
				}
				Vector3 vector = finalFractalProfile.trailColor.ToVector3();
				Vector3 value5 = Vector3.Lerp(Vector3.One, vector, 0.7f);
				Lighting.AddLight(base.Center, vector * 0.5f * Opacity);
				Lighting.AddLight(mountedCenter, value5 * Opacity * 0.15f);
			}
			Opacity = Utils.GetLerpValue(0f, 5f, localAI[0], clamped: true) * Utils.GetLerpValue(120f, 115f, localAI[0], clamped: true);
		}

		private void AI_181_FairyQueenRangedItemShot()
		{
			ai[0] += 1f;
			alpha = (int)MathHelper.Lerp(255f, 0f, Utils.GetLerpValue(0f, 10f, ai[0], clamped: true));
			rotation = velocity.ToRotation();
			if (Main.rand.Next(6) == 0)
			{
				Dust dust = Dust.NewDustPerfect(base.Center, 267);
				dust.fadeIn = 1f;
				dust.noGravity = true;
				dust.alpha = 100;
				dust.color = GetFairyQueenWeaponsColor(1f, Main.rand.NextFloat() * 0.4f);
				dust.noLightEmittence = true;
				dust.scale *= 1.5f;
			}
		}

		private void AI_009_MagicMissiles()
		{
			if (type == 491)
			{
				AI_009_MagicMissiles_Old();
				return;
			}
			int num = 32;
			Player player = Main.player[owner];
			int num2 = Main.maxTilesY * 16;
			int num3 = 0;
			if (ai[0] >= 0f)
			{
				num3 = (int)(ai[1] / (float)num2);
			}
			bool flag = ai[0] == -1f || ai[0] == -2f;
			if (type == 34)
			{
				if (frameCounter++ >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (penetrate == 1 && ai[0] >= 0f && num3 == 0)
				{
					ai[1] += num2;
					num3 = 1;
					netUpdate = true;
				}
				if (penetrate == 1 && ai[0] == -1f)
				{
					ai[0] = -2f;
					netUpdate = true;
				}
				if (num3 > 0 || ai[0] == -2f)
				{
					localAI[0] += 1f;
				}
			}
			if (owner == Main.myPlayer)
			{
				if (ai[0] >= 0f)
				{
					if (player.channel)
					{
						Vector2 mouseWorld = Main.MouseWorld;
						if (ai[0] != mouseWorld.X || ai[1] != mouseWorld.Y)
						{
							netUpdate = true;
							ai[0] = mouseWorld.X;
							ai[1] = mouseWorld.Y + (float)(num2 * num3);
						}
					}
					else
					{
						netUpdate = true;
						ai[0] = -1f;
						ai[1] = -1f;
						int num4 = FindTargetWithLineOfSight();
						if (num4 != -1)
						{
							ai[1] = num4;
						}
						else if (velocity.Length() < 2f)
						{
							velocity = DirectionFrom(player.Center) * num;
						}
						else
						{
							velocity = velocity.SafeNormalize(Vector2.Zero) * num;
						}
					}
				}
				if (flag && ai[1] == -1f)
				{
					int num5 = FindTargetWithLineOfSight();
					if (num5 != -1)
					{
						ai[1] = num5;
						netUpdate = true;
					}
				}
			}
			Vector2? vector = null;
			float amount = 1f;
			if (ai[0] > 0f && ai[1] > 0f)
			{
				vector = new Vector2(ai[0], ai[1] % (float)num2);
			}
			if (flag && ai[1] >= 0f)
			{
				int num6 = (int)ai[1];
				if (Main.npc.IndexInRange(num6))
				{
					NPC nPC = Main.npc[num6];
					if (nPC.CanBeChasedBy(this))
					{
						vector = nPC.Center;
						float t = Distance(vector.Value);
						float num7 = Utils.GetLerpValue(0f, 100f, t, clamped: true) * Utils.GetLerpValue(600f, 400f, t, clamped: true);
						amount = MathHelper.Lerp(0f, 0.2f, Utils.GetLerpValue(200f, 20f, 1f - num7, clamped: true));
					}
					else
					{
						ai[1] = -1f;
						netUpdate = true;
					}
				}
			}
			bool flag2 = false;
			if (flag)
			{
				flag2 = true;
			}
			if (vector.HasValue)
			{
				Vector2 value = vector.Value;
				if (Distance(value) >= 64f)
				{
					flag2 = true;
					Vector2 v = value - base.Center;
					Vector2 value2 = v.SafeNormalize(Vector2.Zero);
					float scaleFactor = Math.Min(num, v.Length());
					Vector2 value3 = value2 * scaleFactor;
					if (velocity.Length() < 4f)
					{
						velocity += velocity.SafeNormalize(Vector2.Zero).RotatedBy(0.78539818525314331).SafeNormalize(Vector2.Zero) * 4f;
					}
					if (velocity.HasNaNs())
					{
						Kill();
					}
					velocity = Vector2.Lerp(velocity, value3, amount);
				}
				else
				{
					velocity *= 0.3f;
					velocity += (value - base.Center) * 0.3f;
					flag2 = velocity.Length() >= 2f;
				}
				if (timeLeft < 60)
				{
					timeLeft = 60;
				}
			}
			if (flag && ai[1] < 0f)
			{
				if (velocity.Length() != (float)num)
				{
					velocity = velocity.MoveTowards(velocity.SafeNormalize(Vector2.UnitY) * num, 4f);
				}
				if (timeLeft > 300)
				{
					timeLeft = 300;
				}
			}
			if (flag2 && velocity != Vector2.Zero)
			{
				rotation = rotation.AngleTowards(velocity.ToRotation(), (float)Math.PI / 4f);
			}
			else
			{
				rotation = rotation.AngleLerp(0f, 0.2f);
			}
			bool flag3 = velocity.Length() > 0.1f && Vector2.Dot(oldVelocity.SafeNormalize(Vector2.Zero), velocity.SafeNormalize(Vector2.Zero)) < 0.2f;
			if (type == 16)
			{
				if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
				{
					soundDelay = 10;
					SoundEngine.PlaySound(SoundID.Item9, position);
				}
				if (Main.rand.Next(9) == 0)
				{
					int num8 = Dust.NewDust(position, width, height, 15, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num8].velocity *= 0.3f;
					Main.dust[num8].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-4, 5);
					Main.dust[num8].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-4, 5);
					Main.dust[num8].noGravity = true;
					Main.dust[num8].velocity += Main.rand.NextVector2Circular(2f, 2f);
				}
				if (flag3)
				{
					int num9 = Main.rand.Next(2, 5);
					for (int i = 0; i < num9; i++)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 15, 0f, 0f, 100, default(Color), 1.5f);
						dust.velocity *= 0.3f;
						dust.position = base.Center;
						dust.noGravity = true;
						dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
						dust.fadeIn = 2.2f;
					}
				}
			}
			if (type != 34)
			{
				return;
			}
			float lerpValue = Utils.GetLerpValue(0f, 10f, localAI[0], clamped: true);
			Color newColor = Color.Lerp(Color.Transparent, Color.Crimson, lerpValue);
			if (Main.rand.Next(6) == 0)
			{
				Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, newColor, 3.5f);
				dust2.noGravity = true;
				dust2.velocity *= 1.4f;
				dust2.velocity += Main.rand.NextVector2Circular(1f, 1f);
				dust2.velocity += velocity * 0.15f;
			}
			if (Main.rand.Next(12) == 0)
			{
				Dust dust3 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, newColor, 1.5f);
				dust3.velocity += Main.rand.NextVector2Circular(1f, 1f);
				dust3.velocity += velocity * 0.15f;
			}
			if (flag3)
			{
				int num10 = Main.rand.Next(2, 5 + (int)(lerpValue * 4f));
				for (int j = 0; j < num10; j++)
				{
					Dust dust4 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100, newColor, 1.5f);
					dust4.velocity *= 0.3f;
					dust4.position = base.Center;
					dust4.noGravity = true;
					dust4.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust4.fadeIn = 2.2f;
					dust4.position += (dust4.position - base.Center) * lerpValue * 10f;
				}
			}
		}

		private void AI_009_MagicMissiles_Old()
		{
			if (Main.myPlayer == owner && ai[0] <= 0f)
			{
				if (Main.player[owner].channel)
				{
					float num = 12f;
					if (type == 16)
					{
						num = 15f;
					}
					if (type == 491)
					{
						num = 20f;
					}
					Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num2 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
					float num3 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
					if (Main.player[owner].gravDir == -1f)
					{
						num3 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
					}
					float num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
					if (ai[0] < 0f)
					{
						ai[0] += 1f;
					}
					if (type == 491 && num4 < 100f)
					{
						if (velocity.Length() < num)
						{
							velocity *= 1.1f;
							if (velocity.Length() > num)
							{
								velocity.Normalize();
								velocity *= num;
							}
						}
						if (ai[0] == 0f)
						{
							ai[0] = -10f;
						}
					}
					else if (num4 > num)
					{
						num4 = num / num4;
						num2 *= num4;
						num3 *= num4;
						int num5 = (int)(num2 * 1000f);
						int num6 = (int)(velocity.X * 1000f);
						int num7 = (int)(num3 * 1000f);
						int num8 = (int)(velocity.Y * 1000f);
						if (num5 != num6 || num7 != num8)
						{
							netUpdate = true;
						}
						if (type == 491)
						{
							Vector2 value = new Vector2(num2, num3);
							velocity = (velocity * 4f + value) / 5f;
						}
						else
						{
							velocity.X = num2;
							velocity.Y = num3;
						}
					}
					else
					{
						int num9 = (int)(num2 * 1000f);
						int num10 = (int)(velocity.X * 1000f);
						int num11 = (int)(num3 * 1000f);
						int num12 = (int)(velocity.Y * 1000f);
						if (num9 != num10 || num11 != num12)
						{
							netUpdate = true;
						}
						velocity.X = num2;
						velocity.Y = num3;
					}
				}
				else if (ai[0] <= 0f)
				{
					netUpdate = true;
					if (type != 491)
					{
						Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num13 = (float)Main.mouseX + Main.screenPosition.X - vector2.X;
						float num14 = (float)Main.mouseY + Main.screenPosition.Y - vector2.Y;
						if (Main.player[owner].gravDir == -1f)
						{
							num14 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector2.Y;
						}
						float num15 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
						if (num15 == 0f || ai[0] < 0f)
						{
							vector2 = new Vector2(Main.player[owner].position.X + (float)(Main.player[owner].width / 2), Main.player[owner].position.Y + (float)(Main.player[owner].height / 2));
							num13 = position.X + (float)width * 0.5f - vector2.X;
							num14 = position.Y + (float)height * 0.5f - vector2.Y;
							num15 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
						}
						num15 = 12f / num15;
						num13 *= num15;
						num14 *= num15;
						velocity.X = num13;
						velocity.Y = num14;
						if (velocity.X == 0f && velocity.Y == 0f)
						{
							Kill();
						}
					}
					ai[0] = 1f;
				}
			}
			bool flag = false;
			if (type == 491)
			{
				localAI[0] += 1f;
				if (ai[0] > 0f && localAI[0] > 15f)
				{
					tileCollide = false;
					Vector2 value2 = Main.player[owner].Center - base.Center;
					if (value2.Length() < 20f)
					{
						Kill();
					}
					value2.Normalize();
					value2 *= 25f;
					velocity = (velocity * 5f + value2) / 6f;
				}
				flag = true;
				if (ai[0] < 0f || (velocity.X == 0f && velocity.Y == 0f))
				{
					rotation += 0.3f;
				}
				else if (ai[0] > 0f)
				{
					rotation += 0.3f * (float)direction;
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
				if (Vector2.Distance(base.Center, Main.player[owner].Center) > 2000f)
				{
					Kill();
				}
				if (Main.rand.Next(2) == 0)
				{
					int num16 = Main.rand.Next(3);
					int num17 = Dust.NewDust(position, width, height, num16 switch
					{
						0 => 15, 
						1 => 57, 
						_ => 58, 
					}, velocity.X * 0.25f, velocity.Y * 0.25f, 255, default(Color), 0.7f);
					Main.dust[num17].velocity *= 0.25f;
					Main.dust[num17].position = (Main.dust[num17].position + position) / 2f;
				}
			}
			if (type == 79)
			{
				if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
				{
					soundDelay = 10;
					SoundEngine.PlaySound(SoundID.Item9, position);
				}
				for (int i = 0; i < 1; i++)
				{
					int num18 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2.5f);
					Main.dust[num18].velocity *= 0.1f;
					Main.dust[num18].velocity += velocity * 0.2f;
					Main.dust[num18].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-2, 3);
					Main.dust[num18].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-2, 3);
					Main.dust[num18].noGravity = true;
				}
			}
			if (type == 16)
			{
				if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
				{
					soundDelay = 10;
					SoundEngine.PlaySound(SoundID.Item9, position);
				}
				if (Main.rand.Next(9) == 0)
				{
					int num19 = Dust.NewDust(position, width, height, 15, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num19].velocity *= 0.3f;
					Main.dust[num19].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-4, 5);
					Main.dust[num19].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-4, 5);
					Main.dust[num19].noGravity = true;
					Main.dust[num19].velocity += Main.rand.NextVector2Circular(2f, 2f);
				}
				flag = true;
				if (velocity != Vector2.Zero)
				{
					rotation = velocity.ToRotation();
				}
			}
			if (type == 34)
			{
				if (Main.rand.Next(12) == 0)
				{
					Dust dust = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 3.5f);
					dust.noGravity = true;
					dust.velocity *= 1.4f;
					dust.velocity += Main.rand.NextVector2Circular(1f, 1f);
					dust.velocity += velocity * 0.15f;
				}
				if (Main.rand.Next(24) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.5f);
					dust2.velocity += Main.rand.NextVector2Circular(1f, 1f);
					dust2.velocity += velocity * 0.15f;
				}
				flag = true;
				if (velocity != Vector2.Zero)
				{
					rotation = velocity.ToRotation();
				}
			}
			if (!flag && velocity != Vector2.Zero)
			{
				rotation = velocity.ToRotation() - (float)Math.PI + (float)Math.PI / 4f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}

		private void AI_015_HandleMovementCollision(Vector2 wetVelocity, Vector2 lastVelocity)
		{
			int num = 10;
			int num2 = 0;
			Vector2 velocity = base.velocity;
			float num3 = 0.2f;
			if (ai[0] == 1f || ai[0] == 5f)
			{
				num3 = 0.4f;
			}
			if (ai[0] == 6f)
			{
				num3 = 0f;
			}
			if (lastVelocity.X != base.velocity.X)
			{
				if (Math.Abs(lastVelocity.X) > 4f)
				{
					num2 = 1;
				}
				base.velocity.X = (0f - lastVelocity.X) * num3;
				localAI[0] += 1f;
			}
			if (lastVelocity.Y != base.velocity.Y)
			{
				if (Math.Abs(lastVelocity.Y) > 4f)
				{
					num2 = 1;
				}
				base.velocity.Y = (0f - lastVelocity.Y) * num3;
				localAI[0] += 1f;
			}
			if (ai[0] == 1f)
			{
				ai[0] = 5f;
				localNPCHitCooldown = num;
				netUpdate = true;
				Point scanAreaStart = base.TopLeft.ToTileCoordinates();
				Point scanAreaEnd = base.BottomRight.ToTileCoordinates();
				num2 = 2;
				CreateImpactExplosion(2, base.Center, scanAreaStart, scanAreaEnd, width, out var causedShockwaves);
				CreateImpactExplosion2_FlailTileCollision(base.Center, causedShockwaves, velocity);
				position -= velocity;
			}
			if (num2 > 0)
			{
				netUpdate = true;
				for (int i = 0; i < num2; i++)
				{
					Collision.HitTiles(position, velocity, width, height);
				}
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			}
			if (ai[0] != 3f && ai[0] != 0f && ai[0] != 5f && ai[0] != 6f && localAI[0] >= 10f)
			{
				ai[0] = 4f;
				netUpdate = true;
			}
			if (wet)
			{
				wetVelocity = base.velocity;
			}
		}

		private void ResetLocalNPCHitImmunity()
		{
			for (int i = 0; i < 200; i++)
			{
				localNPCImmunity[i] = 0;
			}
		}

		private void AI_015_Flails()
		{
			Player player = Main.player[owner];
			if (!player.active || player.dead || player.noItems || player.CCed || Vector2.Distance(base.Center, player.Center) > 900f)
			{
				Kill();
				return;
			}
			if (Main.myPlayer == owner && Main.mapFullscreen)
			{
				Kill();
				return;
			}
			if (type == 948 && wet && !lavaWet)
			{
				type = 947;
				netUpdate = true;
			}
			Vector2 mountedCenter = player.MountedCenter;
			bool doFastThrowDust = false;
			bool flag = true;
			bool flag2 = false;
			int num = 10;
			float num2 = 24f;
			float num3 = 800f;
			float num4 = 3f;
			float num5 = 16f;
			float num6 = 6f;
			float num7 = 48f;
			float num8 = 1f;
			float num9 = 14f;
			int num10 = 60;
			int num11 = 10;
			int num12 = 20;
			int num13 = 10;
			int num14 = num + 5;
			switch (type)
			{
			case 947:
			case 948:
				num = 13;
				num2 = 12f;
				num5 = 8f;
				num7 = 13f;
				break;
			case 25:
				num = 15;
				num2 = 14f;
				num5 = 10f;
				num7 = 15f;
				break;
			case 154:
				num = 15;
				num2 = 15f;
				num5 = 11f;
				num7 = 16f;
				break;
			case 26:
				num = 15;
				num2 = 16f;
				num5 = 12f;
				num7 = 16f;
				break;
			case 35:
				num = 15;
				num2 = 17f;
				num5 = 14f;
				num7 = 18f;
				break;
			case 63:
				num = 13;
				num2 = 21f;
				num5 = 20f;
				num7 = 24f;
				num12 = 15;
				break;
			case 757:
				num = 13;
				num2 = 22f;
				num5 = 22f;
				num7 = 26f;
				num12 = 15;
				break;
			case 247:
				num = 13;
				num2 = 23f;
				num12 = 15;
				break;
			}
			float meleeSpeed = player.meleeSpeed;
			float num15 = 1f / meleeSpeed;
			num2 *= num15;
			num8 *= num15;
			num9 *= num15;
			num4 *= num15;
			num5 *= num15;
			num6 *= num15;
			num7 *= num15;
			float num16 = num2 * (float)num;
			float num17 = num16 + 160f;
			localNPCHitCooldown = num11;
			switch ((int)ai[0])
			{
			case 0:
			{
				flag2 = true;
				if (owner == Main.myPlayer)
				{
					Vector2 origin = mountedCenter;
					Vector2 mouseWorld = Main.MouseWorld;
					Vector2 value3 = origin.DirectionTo(mouseWorld).SafeNormalize(Vector2.UnitX * player.direction);
					player.ChangeDir((value3.X > 0f) ? 1 : (-1));
					if (!player.channel)
					{
						ai[0] = 1f;
						ai[1] = 0f;
						base.velocity = value3 * num2 + player.velocity;
						base.Center = mountedCenter;
						netUpdate = true;
						ResetLocalNPCHitImmunity();
						localNPCHitCooldown = num13;
						break;
					}
				}
				localAI[1] += 1f;
				Vector2 value4 = new Vector2(player.direction).RotatedBy((float)Math.PI * 10f * (localAI[1] / 60f) * (float)player.direction);
				value4.Y *= 0.8f;
				if (value4.Y * player.gravDir > 0f)
				{
					value4.Y *= 0.5f;
				}
				base.Center = mountedCenter + value4 * 30f;
				base.velocity = Vector2.Zero;
				localNPCHitCooldown = num12;
				break;
			}
			case 1:
			{
				doFastThrowDust = true;
				bool flag4 = ai[1]++ >= (float)num;
				flag4 |= Distance(mountedCenter) >= num3;
				if (player.controlUseItem)
				{
					ai[0] = 6f;
					ai[1] = 0f;
					netUpdate = true;
					base.velocity *= 0.2f;
					if (Main.myPlayer == owner && type == 757)
					{
						NewProjectile(base.Center, base.velocity, 928, damage, knockBack, Main.myPlayer);
					}
					break;
				}
				if (flag4)
				{
					ai[0] = 2f;
					ai[1] = 0f;
					netUpdate = true;
					base.velocity *= 0.3f;
					if (Main.myPlayer == owner && type == 757)
					{
						NewProjectile(base.Center, base.velocity, 928, damage, knockBack, Main.myPlayer);
					}
				}
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				localNPCHitCooldown = num13;
				break;
			}
			case 2:
			{
				Vector2 value2 = DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
				if (Distance(mountedCenter) <= num5)
				{
					Kill();
					return;
				}
				if (player.controlUseItem)
				{
					ai[0] = 6f;
					ai[1] = 0f;
					netUpdate = true;
					base.velocity *= 0.2f;
				}
				else
				{
					base.velocity *= 0.98f;
					base.velocity = base.velocity.MoveTowards(value2 * num5, num4);
					player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				}
				break;
			}
			case 3:
			{
				if (!player.controlUseItem)
				{
					ai[0] = 4f;
					ai[1] = 0f;
					netUpdate = true;
					break;
				}
				float num18 = Distance(mountedCenter);
				tileCollide = ai[1] == 1f;
				bool flag3 = num18 <= num16;
				if (flag3 != tileCollide)
				{
					tileCollide = flag3;
					ai[1] = (tileCollide ? 1 : 0);
					netUpdate = true;
				}
				if (num18 > (float)num10)
				{
					if (num18 >= num16)
					{
						base.velocity *= 0.5f;
						base.velocity = base.velocity.MoveTowards(DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * num9, num9);
					}
					base.velocity *= 0.98f;
					base.velocity = base.velocity.MoveTowards(DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * num9, num8);
				}
				else
				{
					if (base.velocity.Length() < 6f)
					{
						base.velocity.X *= 0.96f;
						base.velocity.Y += 0.2f;
					}
					if (player.velocity.X == 0f)
					{
						base.velocity.X *= 0.96f;
					}
				}
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				break;
			}
			case 4:
			{
				tileCollide = false;
				Vector2 vector = DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
				if (Distance(mountedCenter) <= num7)
				{
					Kill();
					return;
				}
				base.velocity *= 0.98f;
				base.velocity = base.velocity.MoveTowards(vector * num7, num6);
				Vector2 target = base.Center + base.velocity;
				Vector2 value = mountedCenter.DirectionFrom(target).SafeNormalize(Vector2.Zero);
				if (Vector2.Dot(vector, value) < 0f)
				{
					Kill();
					return;
				}
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				break;
			}
			case 5:
				if (ai[1]++ >= (float)num14)
				{
					ai[0] = 6f;
					ai[1] = 0f;
					netUpdate = true;
				}
				else
				{
					localNPCHitCooldown = num13;
					base.velocity.Y += 0.6f;
					base.velocity.X *= 0.95f;
					player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				}
				break;
			case 6:
				if (!player.controlUseItem || Distance(mountedCenter) > num17)
				{
					ai[0] = 4f;
					ai[1] = 0f;
					netUpdate = true;
				}
				else
				{
					base.velocity.Y += 0.8f;
					base.velocity.X *= 0.95f;
					player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				}
				break;
			}
			int num19 = type;
			if (num19 == 247)
			{
				flag = false;
				float num20 = (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f;
				rotation += ((base.velocity.X > 0f) ? num20 : (0f - num20));
				if (ai[0] == 0f)
				{
					rotation += (float)Math.PI * 2f / 15f * (float)player.direction;
				}
				float num21 = 600f;
				NPC nPC = null;
				if (owner == Main.myPlayer)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 20f)
					{
						localAI[0] = 17f;
						for (int i = 0; i < 200; i++)
						{
							NPC nPC2 = Main.npc[i];
							if (nPC2.CanBeChasedBy(this))
							{
								float num22 = Distance(nPC2.Center);
								if (!(num22 >= num21) && Collision.CanHit(position, width, height, nPC2.position, nPC2.width, nPC2.height))
								{
									nPC = nPC2;
									num21 = num22;
								}
							}
						}
					}
					if (nPC != null)
					{
						localAI[0] = 0f;
						float scaleFactor = 14f;
						Vector2 center = base.Center;
						Vector2 velocity = center.DirectionTo(nPC.Center) * scaleFactor;
						NewProjectile(center, velocity, 248, (int)((double)damage / 1.5), knockBack / 2f, Main.myPlayer);
					}
				}
			}
			direction = ((base.velocity.X > 0f) ? 1 : (-1));
			spriteDirection = direction;
			ownerHitCheck = flag2;
			if (flag)
			{
				if (base.velocity.Length() > 1f)
				{
					rotation = base.velocity.ToRotation() + base.velocity.X * 0.1f;
				}
				else
				{
					rotation += base.velocity.X * 0.1f;
				}
			}
			timeLeft = 2;
			player.heldProj = whoAmI;
			player.SetDummyItemTime(2);
			player.itemRotation = DirectionFrom(mountedCenter).ToRotation();
			if (base.Center.X < mountedCenter.X)
			{
				player.itemRotation += (float)Math.PI;
			}
			player.itemRotation = MathHelper.WrapAngle(player.itemRotation);
			AI_015_Flails_Dust(doFastThrowDust);
		}

		private void AI_015_HandleMovementCollision_Old(Vector2 wetVelocity, Vector2 lastVelocity)
		{
			bool flag = false;
			if (lastVelocity.X != velocity.X)
			{
				if (Math.Abs(lastVelocity.X) > 4f)
				{
					flag = true;
				}
				position.X += velocity.X;
				velocity.X = (0f - lastVelocity.X) * 0.2f;
			}
			if (lastVelocity.Y != velocity.Y)
			{
				if (Math.Abs(lastVelocity.Y) > 4f)
				{
					flag = true;
				}
				position.Y += velocity.Y;
				velocity.Y = (0f - lastVelocity.Y) * 0.2f;
			}
			ai[0] = 1f;
			if (flag)
			{
				netUpdate = true;
				Collision.HitTiles(position, velocity, width, height);
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			}
			if (wet)
			{
				wetVelocity = velocity;
			}
		}

		private void AI_015_Flails_Old()
		{
			AI_015_Flails_Dust(doFastThrowDust: false);
			bool flag = Main.player[owner].dead;
			if (!flag)
			{
				flag = (Main.player[owner].Center - base.Center).Length() > 2000f;
			}
			if (flag)
			{
				Kill();
				return;
			}
			Main.player[owner].SetDummyItemTime(10);
			if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
			{
				Main.player[owner].ChangeDir(1);
				direction = 1;
			}
			else
			{
				Main.player[owner].ChangeDir(-1);
				direction = -1;
			}
			Vector2 mountedCenter = Main.player[owner].MountedCenter;
			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num = mountedCenter.X - vector.X;
			float num2 = mountedCenter.Y - vector.Y;
			float num3 = (float)Math.Sqrt(num * num + num2 * num2);
			if (ai[0] == 0f)
			{
				float num4 = 160f;
				if (type == 63)
				{
					num4 *= 1.5f;
				}
				if (type == 247)
				{
					num4 *= 1.5f;
				}
				if (type == 757)
				{
					num4 *= 1.5f;
				}
				tileCollide = true;
				if (num3 > num4)
				{
					ai[0] = 1f;
					netUpdate = true;
				}
				else if (!Main.player[owner].channel)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.9f;
					}
					velocity.Y += 1f;
					velocity.X *= 0.9f;
				}
			}
			else if (ai[0] == 1f)
			{
				float meleeSpeed = Main.player[owner].meleeSpeed;
				float num5 = 14f / meleeSpeed;
				float num6 = 0.9f / meleeSpeed;
				float num7 = 300f / meleeSpeed;
				int num8 = 60;
				if (type == 63)
				{
					num7 *= 1.5f;
					num5 *= 1.5f;
					num6 *= 1.5f;
				}
				if (type == 247)
				{
					num7 *= 1.5f;
					num5 = 15.9f;
					num6 *= 2f;
					num8 = 100;
				}
				if (type == 757)
				{
					num7 *= 1.5f;
					num5 = 15.9f;
					num6 *= 2f;
					num8 = 100;
				}
				Math.Abs(num);
				Math.Abs(num2);
				if (ai[1] == 1f)
				{
					tileCollide = false;
				}
				if (!Main.player[owner].channel || num3 > num7 || !tileCollide)
				{
					ai[1] = 1f;
					if (tileCollide)
					{
						netUpdate = true;
					}
					tileCollide = false;
					if (num3 < 20f)
					{
						Kill();
					}
				}
				if (!tileCollide)
				{
					num6 *= 2f;
				}
				if (num3 > (float)num8 || !tileCollide)
				{
					num3 = num5 / num3;
					num *= num3;
					num2 *= num3;
					new Vector2(velocity.X, velocity.Y);
					float num9 = num - velocity.X;
					float num10 = num2 - velocity.Y;
					float num11 = (float)Math.Sqrt(num9 * num9 + num10 * num10);
					num11 = num6 / num11;
					num9 *= num11;
					num10 *= num11;
					velocity.X *= 0.98f;
					velocity.Y *= 0.98f;
					velocity.X += num9;
					velocity.Y += num10;
				}
				else
				{
					if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 6f)
					{
						velocity.X *= 0.96f;
						velocity.Y += 0.2f;
					}
					if (Main.player[owner].velocity.X == 0f)
					{
						velocity.X *= 0.96f;
					}
				}
			}
			if (type == 247)
			{
				if (velocity.X < 0f)
				{
					rotation -= (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
				}
				else
				{
					rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
				}
				float num12 = position.X;
				float num13 = position.Y;
				float num14 = 600f;
				bool flag2 = false;
				if (owner == Main.myPlayer)
				{
					localAI[1] += 1f;
					if (localAI[1] > 20f)
					{
						localAI[1] = 20f;
						for (int i = 0; i < 200; i++)
						{
							if (Main.npc[i].CanBeChasedBy(this))
							{
								float num15 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
								float num16 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
								float num17 = Math.Abs(position.X + (float)(width / 2) - num15) + Math.Abs(position.Y + (float)(height / 2) - num16);
								if (num17 < num14 && Collision.CanHit(position, width, height, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height))
								{
									num14 = num17;
									num12 = num15;
									num13 = num16;
									flag2 = true;
								}
							}
						}
					}
				}
				if (flag2)
				{
					localAI[1] = 0f;
					vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num = num12 - vector.X;
					num2 = num13 - vector.Y;
					num3 = (float)Math.Sqrt(num * num + num2 * num2);
					num3 = 14f / num3;
					num *= num3;
					num2 *= num3;
					NewProjectile(vector.X, vector.Y, num, num2, 248, (int)((double)damage / 1.5), knockBack / 2f, Main.myPlayer);
				}
			}
			else
			{
				rotation = (float)Math.Atan2(num2, num) - velocity.X * 0.1f;
			}
		}

		private void AI_015_Flails_Dust(bool doFastThrowDust)
		{
			if (type == 25)
			{
				int maxValue = 15;
				if (doFastThrowDust)
				{
					maxValue = 1;
				}
				if (Main.rand.Next(maxValue) == 0)
				{
					Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.3f);
				}
			}
			else if (type == 757)
			{
				int num = 4;
				if (velocity.Length() < 8f)
				{
					num = 10;
				}
				if (doFastThrowDust)
				{
					num /= 2;
				}
				for (int i = 0; i < 2; i++)
				{
					if (Main.rand.Next(num) == 0)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 5, 0f, 0f, 0, default(Color), 0.8f);
						dust.velocity += velocity / 4f;
						dust.fadeIn = 1.3f;
					}
				}
				num = 40;
				if (doFastThrowDust)
				{
					num /= 2;
				}
				for (float num2 = 0f; num2 < 1f; num2 += 0.1f)
				{
					if (Main.rand.Next(num) == 0)
					{
						Dust.NewDustDirect(Vector2.Lerp(Main.player[owner].Center, base.Center, Main.rand.NextFloat()) + new Vector2(-8f), 16, 16, 5, 0f, 0f, 0, default(Color), 1.3f).velocity += velocity / 4f;
					}
				}
			}
			else if (type == 26)
			{
				int num3 = Dust.NewDust(position, width, height, 172, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.5f);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].velocity.X /= 2f;
				Main.dust[num3].velocity.Y /= 2f;
			}
			else if (type == 948 && !wet)
			{
				int num4 = Dust.NewDust(position, width, height, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.2f);
				Main.dust[num4].noGravity = true;
				Main.dust[num4].velocity.X *= 4f;
				Main.dust[num4].velocity.Y *= 4f;
				Main.dust[num4].velocity = (Main.dust[num4].velocity + velocity) / 2f;
			}
			else if (type == 35)
			{
				int num5 = Dust.NewDust(position, width, height, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3f);
				Main.dust[num5].noGravity = true;
				Main.dust[num5].velocity.X *= 2f;
				Main.dust[num5].velocity.Y *= 2f;
			}
			else if (type == 154)
			{
				int num6 = Dust.NewDust(position, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140, default(Color), 1.5f);
				Main.dust[num6].noGravity = true;
				Main.dust[num6].velocity *= 0.25f;
			}
		}

		private void AI_100_Medusa()
		{
			Player player = Main.player[owner];
			Vector2 zero = Vector2.Zero;
			if (type == 535)
			{
				zero.X = (float)player.direction * 6f;
				zero.Y = player.gravDir * -14f;
				bool flag = true;
				bool flag2 = ai[0] > 0f;
				if (!player.dead)
				{
					timeLeft = 3;
				}
				if (ai[0] > 0f)
				{
					ai[0] -= 1f;
				}
				if (flag2)
				{
					if (frame < 8)
					{
						frame = 8;
					}
					if (frame >= 12)
					{
						frame = 8;
					}
					frameCounter++;
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						if (++frame >= 12)
						{
							frame = 8;
						}
					}
				}
				else if (++frameCounter >= 5)
				{
					frameCounter = 0;
					if (++frame >= 8)
					{
						frame = 0;
					}
				}
				Vector2 center = player.Center;
				Vector2 vector = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - center;
				if (player.gravDir == -1f)
				{
					vector.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - center.Y;
				}
				Vector2 velocity = new Vector2(Math.Sign((vector.X == 0f) ? ((float)player.direction) : vector.X), 0f);
				if (velocity.X != base.velocity.X || velocity.Y != base.velocity.Y)
				{
					netUpdate = true;
				}
				base.velocity = velocity;
				if (flag2 && soundDelay == 0)
				{
					SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 17);
				}
				soundDelay = (flag2 ? 4 : 0);
				if (Main.myPlayer == owner)
				{
					Vector2 position = player.Center + new Vector2(player.direction * 4, player.gravDir * 2f);
					if (!player.channel)
					{
						Kill();
						return;
					}
					if (!flag2 || ai[0] % 15f == 0f)
					{
						bool flag3 = false;
						for (int i = 0; i < 200; i++)
						{
							NPC nPC = Main.npc[i];
							if (nPC.active && Distance(nPC.Center) < 250f && nPC.CanBeChasedBy(this) && Collision.CanHitLine(nPC.position, nPC.width, nPC.height, position, 0, 0))
							{
								flag3 = true;
								break;
							}
						}
						if (flag3)
						{
							bool flag4 = false;
							if (!flag || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true))
							{
								int num = damage;
								position = base.Center;
								int num2 = 0;
								float num3 = 0f;
								_medusaHeadTargetList.Clear();
								for (int j = 0; j < 200; j++)
								{
									NPC nPC2 = Main.npc[j];
									float num4 = Distance(nPC2.Center);
									if (nPC2.active && num4 < 250f && nPC2.CanBeChasedBy(this) && Collision.CanHitLine(nPC2.position, nPC2.width, nPC2.height, position, 0, 0))
									{
										_medusaHeadTargetList.Add(Tuple.Create(j, num4));
									}
								}
								_medusaHeadTargetList.Sort(_medusaTargetComparer);
								for (int k = 0; k < _medusaHeadTargetList.Count && k < 3; k++)
								{
									Tuple<int, float> tuple = _medusaHeadTargetList[k];
									NPC nPC3 = Main.npc[tuple.Item1];
									Vector2 v = nPC3.Center - position;
									num3 += v.ToRotation();
									num2++;
									int num5 = NewProjectile(position.X, position.Y, v.X, v.Y, 536, 0, 0f, owner, whoAmI);
									Main.projectile[num5].Center = nPC3.Center;
									Main.projectile[num5].damage = num;
									Main.projectile[num5].Damage();
									Main.projectile[num5].damage = 0;
									Main.projectile[num5].Center = position;
									ai[0] = 180f;
								}
								num3 = ((num2 == 0) ? ((player.direction == 1) ? 0f : ((float)Math.PI)) : (num3 / (float)num2));
								for (int l = 0; l < 4; l++)
								{
									Vector2 zero2 = Vector2.Zero;
									zero2 = ((Main.rand.Next(4) == 0) ? (Vector2.UnitX.RotatedByRandom(6.2831854820251465) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)) : (Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(num3) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)));
									NewProjectile(position.X, position.Y, zero2.X, zero2.Y, 536, 0, 0f, owner, whoAmI);
								}
								ai[0] = 60f;
								netUpdate = true;
							}
						}
					}
				}
				Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
			}
			rotation = ((player.gravDir == 1f) ? 0f : ((float)Math.PI));
			spriteDirection = direction;
			timeLeft = 2;
			Vector2 value = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
			if (player.direction != 1)
			{
				value.X = (float)player.bodyFrame.Width - value.X;
			}
			value -= (player.bodyFrame.Size() - new Vector2(player.width, 42f)) / 2f;
			base.Center = (player.position + value + zero - base.velocity);
			player.ChangeDir(direction);
			player.heldProj = whoAmI;
			player.SetDummyItemTime(2);
		}

		private void AI_120_StardustGuardian()
		{
			Player player = Main.player[owner];
			if (!player.active)
			{
				active = false;
				return;
			}
			bool flag = type == 623;
			Vector2 vector = player.Center;
			float num = 100f;
			float num2 = 500f;
			float num3 = 500f;
			float num4 = 100f;
			bool flag2 = true;
			if (flag)
			{
				if (player.dead)
				{
					player.stardustGuardian = false;
				}
				if (player.stardustGuardian)
				{
					timeLeft = 2;
				}
				num = 150f;
				vector.X -= (5 + player.width / 2) * player.direction;
				vector.Y -= 25f;
				Lighting.AddLight(base.Center, 0.9f, 0.9f, 0.7f);
				if (ai[0] != 3f && alpha == 255)
				{
					alpha = 0;
					for (int i = 0; i < 30; i++)
					{
						int num5 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
						Main.dust[num5].noGravity = true;
						Main.dust[num5].velocity *= 3f;
						Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
						num5 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
						Main.dust[num5].velocity *= 2f;
						Main.dust[num5].noGravity = true;
						Main.dust[num5].fadeIn = 2.5f;
						Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					}
				}
			}
			if (ai[0] != 0f)
			{
				Main.player[owner].tankPet = whoAmI;
				Main.player[owner].tankPetReset = false;
			}
			if (ai[0] == 0f)
			{
				base.Center = Vector2.Lerp(base.Center, vector, 0.05f);
				velocity *= 0.5f;
				direction = (spriteDirection = player.direction);
				if (flag && ++frameCounter >= 9)
				{
					frameCounter = 0;
					if (++frame >= 8)
					{
						frame = 0;
					}
				}
				int targetNPCIndex = -1;
				float distanceToClosestTarget = num2;
				bool flag3 = flag2;
				if (flag && Math.Abs(base.Center.X - vector.X) > num + 20f)
				{
					flag3 = false;
				}
				if (flag3)
				{
					AI_120_StardustGuardian_FindTarget(num2, targetNPCIndex, distanceToClosestTarget);
				}
				if (targetNPCIndex != -1)
				{
					NPC nPC = Main.npc[targetNPCIndex];
					direction = (spriteDirection = (nPC.Center.X > base.Center.X).ToDirectionInt());
					float num6 = Math.Abs(vector.X - base.Center.X);
					float num7 = Math.Abs(nPC.Center.X - base.Center.X);
					float num8 = Math.Abs(vector.Y - base.Center.Y);
					float num9 = Math.Abs(nPC.Center.Y - base.Bottom.Y);
					float num10 = (nPC.Center.Y > base.Bottom.Y).ToDirectionInt();
					if ((num6 < num || (vector.X - base.Center.X) * (float)direction < 0f) && num7 > 20f && num7 < num - num6 + 100f)
					{
						velocity.X += 0.1f * (float)direction;
					}
					else
					{
						velocity.X *= 0.7f;
					}
					if ((num8 < num4 || (vector.Y - base.Bottom.Y) * num10 < 0f) && num9 > 10f && num9 < num4 - num8 + 10f)
					{
						velocity.Y += 0.1f * num10;
					}
					else
					{
						velocity.Y *= 0.7f;
					}
					if (owner == Main.myPlayer && num7 < num3)
					{
						ai[0] = 2f;
						ai[1] = targetNPCIndex;
						netUpdate = true;
					}
				}
			}
			else if (ai[0] == 1f)
			{
				if (player.HasMinionRestTarget)
				{
					vector = player.MinionRestTargetPoint;
				}
				else
				{
					ai[0] = 0f;
					netUpdate = true;
				}
				int targetNPCIndex2 = -1;
				float distanceToClosestTarget2 = num2;
				bool flag4 = true;
				if (flag && Math.Abs(base.Center.X - vector.X) > num + 20f)
				{
					flag4 = false;
				}
				if (flag4)
				{
					AI_120_StardustGuardian_FindTarget(num2, targetNPCIndex2, distanceToClosestTarget2);
				}
				if (targetNPCIndex2 != -1)
				{
					NPC nPC2 = Main.npc[targetNPCIndex2];
					direction = (spriteDirection = (nPC2.Center.X > base.Center.X).ToDirectionInt());
					float num11 = Math.Abs(vector.X - base.Center.X);
					float num12 = Math.Abs(nPC2.Center.X - base.Center.X);
					float num13 = Math.Abs(vector.Y - base.Center.Y);
					float num14 = Math.Abs(nPC2.Center.Y - base.Bottom.Y);
					float num15 = (nPC2.Center.Y > base.Bottom.Y).ToDirectionInt();
					if ((num11 < num || (vector.X - base.Center.X) * (float)direction < 0f) && num12 > 20f && num12 < num - num11 + 100f)
					{
						velocity.X += 0.1f * (float)direction;
					}
					else
					{
						velocity.X *= 0.7f;
					}
					if ((num13 < num4 || (vector.Y - base.Bottom.Y) * num15 < 0f) && num14 > 10f && num14 < num4 - num13 + 10f)
					{
						velocity.Y += 0.1f * num15;
					}
					else
					{
						velocity.Y *= 0.7f;
					}
					if (owner == Main.myPlayer && num12 < num3)
					{
						ai[0] = 2f;
						ai[1] = targetNPCIndex2;
						netUpdate = true;
					}
				}
				else
				{
					if (Math.Abs(vector.X - base.Center.X) > num + 40f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					else if (Math.Abs(vector.X - base.Center.X) > 20f)
					{
						direction = (spriteDirection = (vector.X > base.Center.X).ToDirectionInt());
						velocity.X += 0.06f * (float)direction;
					}
					else
					{
						velocity.X *= 0.8f;
						direction = (spriteDirection = (player.Center.X < base.Center.X).ToDirectionInt());
					}
					if (Math.Abs(vector.Y - base.Center.Y) > num4)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					else if (Math.Abs(vector.Y - base.Center.Y) > 10f)
					{
						velocity.Y += 0.06f * (float)Math.Sign(vector.Y - base.Center.Y);
					}
					else
					{
						velocity.Y *= 0.8f;
					}
				}
				if (flag && ++frameCounter >= 9)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type] - 4)
					{
						frame = 0;
					}
				}
			}
			else if (ai[0] == 2f)
			{
				if (flag)
				{
					int num16 = 3;
					if (frame < 12)
					{
						frame = 12;
					}
					if (frame == 12 || frame == 13)
					{
						num16 = 8;
					}
					if (++frameCounter >= num16)
					{
						frameCounter = 0;
						if (++frame >= 19)
						{
							frame = 14;
						}
					}
				}
				bool flag5 = false;
				if (flag2)
				{
					flag5 = Distance(player.Center) < num2;
				}
				NPC nPC3 = null;
				int num17 = (int)ai[1];
				if (Main.npc.IndexInRange(num17))
				{
					nPC3 = Main.npc[num17];
					if (!nPC3.CanBeChasedBy(this) || Distance(nPC3.Center) > num3)
					{
						nPC3 = null;
					}
				}
				if (!flag5 || nPC3 == null)
				{
					ai[1] = 0f;
					ai[0] = 0f;
					netUpdate = true;
					if (frame < 18)
					{
						frame = 18;
					}
				}
				else
				{
					int num18 = (((nPC3.Center - player.Center).X > 1f) ? 1 : (-1));
					Vector2 targetPosition = nPC3.Center + new Vector2((float)(-num18) * ((float)nPC3.width * 0.5f + 70f), -10f) - base.Center;
					float maxAmountAllowedToMove = 6f * Utils.Remap(targetPosition.Length(), 50f, 400f, 1f, 4f);
					int num19 = 32;
					Vector2 targetPosition2 = Vector2.Zero.MoveTowards(targetPosition, maxAmountAllowedToMove);
					velocity = velocity.MoveTowards(targetPosition2, num19);
					direction = (spriteDirection = num18);
					if (localAI[0]++ >= 3f)
					{
						localAI[0] = 0f;
						int targetNPCIndex3 = -1;
						float distanceToClosestTarget3 = -1f;
						AI_120_StardustGuardian_FindTarget(num2, targetNPCIndex3, distanceToClosestTarget3);
						if (targetNPCIndex3 != -1)
						{
							ai[1] = targetNPCIndex3;
							netUpdate = true;
						}
					}
				}
			}
			else
			{
				_ = ai[0];
				_ = 2f;
			}
			if (ai[0] != 3f)
			{
				return;
			}
			if (player.HasMinionRestTarget)
			{
				vector = player.MinionRestTargetPoint;
			}
			else
			{
				ai[0] = 0f;
				netUpdate = true;
			}
			if (alpha == 0)
			{
				alpha = 255;
				for (int j = 0; j < 30; j++)
				{
					int num20 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
					Main.dust[num20].noGravity = true;
					Main.dust[num20].velocity *= 3f;
					Main.dust[num20].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					num20 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
					Main.dust[num20].velocity *= 2f;
					Main.dust[num20].noGravity = true;
					Main.dust[num20].fadeIn = 2.5f;
					Main.dust[num20].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
			}
			else
			{
				for (int k = 0; k < 2; k++)
				{
					int num21 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
					Main.dust[num21].noGravity = true;
					Main.dust[num21].velocity *= 3f;
					Main.dust[num21].noLight = true;
					Main.dust[num21].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					num21 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
					Main.dust[num21].velocity *= 2f;
					Main.dust[num21].noGravity = true;
					Main.dust[num21].fadeIn = 2.5f;
					Main.dust[num21].noLight = true;
					Main.dust[num21].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
			}
			velocity *= 0.7f;
			base.Center = Vector2.Lerp(base.Center, vector, 0.2f);
			if (Distance(vector) < 10f)
			{
				ai[0] = 1f;
				netUpdate = true;
			}
		}

		private void AI_120_StardustGuardian_FindTarget(float lookupRange, int targetNPCIndex, float distanceToClosestTarget)
		{
			Vector2 center = Main.player[owner].Center;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this))
				{
					float num = center.Distance(nPC.Center);
					if (num < lookupRange)
					{
						targetNPCIndex = i;
						distanceToClosestTarget = num;
						lookupRange = num;
					}
				}
			}
		}

		private void AI_180_FairyQueenSunDance()
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item159, base.Center);
			}
			localAI[0] += 1f;
			float num = 180f;
			_ = ai[0] / ((float)Math.PI * 2f);
			float num2 = (float)Math.PI / 9f;
			if (localAI[0] >= num)
			{
				Kill();
				return;
			}
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			scale = Utils.GetLerpValue(0f, 20f, localAI[0], clamped: true) * Utils.GetLerpValue(num, num - 60f, localAI[0], clamped: true);
			float lerpValue = Utils.GetLerpValue(50f, num, localAI[0], clamped: true);
			rotation = ai[0] + lerpValue * num2;
			int num3 = (int)ai[1];
			if (Main.npc.IndexInRange(num3))
			{
				NPC nPC = Main.npc[num3];
				if (nPC.active && nPC.type == 636)
				{
					base.Center = nPC.Center;
				}
				velocity = Vector2.Zero;
				Vector2 value = rotation.ToRotationVector2();
				Vector3 v3_ = Main.hslToRgb((ai[0] / ((float)Math.PI * 2f) + localAI[0] / num) % 1f, 1f, 0.85f).ToVector3() * scale;
				float scaleFactor = 800f * scale;
				DelegateMethods.v3_1 = v3_;
				for (float num4 = 0f; num4 <= 1f; num4 += 0.0833333358f)
				{
					Point point = (base.Center + value * scaleFactor * num4).ToTileCoordinates();
					DelegateMethods.CastLightOpen(point.X, point.Y);
				}
			}
			else
			{
				Kill();
			}
		}

		private void AI_179_FairyQueenLance()
		{
			localAI[0] += 1f;
			if (localAI[0] >= 60f)
			{
				velocity = ai[0].ToRotationVector2() * 40f;
				if (Main.rand.Next(3) == 0)
				{
					Dust dust = Dust.NewDustPerfect(base.Center, 267);
					dust.fadeIn = 1f;
					dust.noGravity = true;
					dust.alpha = 100;
					dust.color = Color.Lerp(AI_171_GetColor(), Color.White, Main.rand.NextFloat() * 0.4f);
					dust.noLightEmittence = true;
					dust.scale *= 1.5f;
				}
			}
			if (localAI[0] >= 360f)
			{
				Kill();
				return;
			}
			alpha = (int)MathHelper.Lerp(255f, 0f, Utils.GetLerpValue(0f, 20f, localAI[0], clamped: true));
			rotation = ai[0];
		}

		private void AI_176_EdgyLightning()
		{
			int num = (int)ai[0] - 1;
			if (num != -1 && (!Main.npc[num].CanBeChasedBy(this) || localNPCImmunity[num] != 0))
			{
				ai[0] = 0f;
				num = -1;
			}
			if (num == -1)
			{
				NPC nPC = FindTargetWithinRange(400f);
				if (nPC != null)
				{
					num = nPC.whoAmI;
					ai[0] = num + 1;
					netUpdate = true;
				}
			}
			if (num != -1)
			{
				NPC nPC2 = Main.npc[num];
				Vector2 vector = DirectionTo(nPC2.Center);
				if (vector.HasNaNs())
				{
					Kill();
					return;
				}
				velocity = vector * 10f;
				rotation = velocity.ToRotation();
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					frame = Main.rand.Next(Main.projFrames[type]);
				}
			}
			else
			{
				Kill();
			}
		}

		private NPC FindTargetWithinRange(float maxRange)
		{
			NPC result = null;
			float num = maxRange;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && localNPCImmunity[i] == 0)
				{
					float num2 = Distance(nPC.Center);
					if (!(num <= num2))
					{
						num = num2;
						result = nPC;
					}
				}
			}
			return result;
		}

		private void AI_177_IceWhipSlicer()
		{
			Player player = Main.player[owner];
			if (!player.active || player.dead)
			{
				player.coolWhipBuff = false;
				Kill();
				return;
			}
			if (player.coolWhipBuff)
			{
				timeLeft = 2;
			}
			int num = (int)ai[0] - 1;
			if (num != -1 && (!Main.npc[num].CanBeChasedBy(this) || localNPCImmunity[num] > 0))
			{
				ai[0] = 0f;
				num = -1;
			}
			if (num == -1)
			{
				NPC nPC = FindTargetWithinRange(400f);
				if (nPC != null)
				{
					num = nPC.whoAmI;
					ai[0] = num + 1;
					netUpdate = true;
				}
			}
			float num2 = 8f;
			float amount = 0.3f;
			if (num != -1)
			{
				NPC nPC2 = Main.npc[num];
				float num3 = Distance(nPC2.Center);
				if (num2 > num3)
				{
					num2 = num3;
				}
				Vector2 vector = DirectionTo(nPC2.Center);
				if (!vector.HasNaNs())
				{
					velocity = Vector2.Lerp(velocity, vector * num2, amount);
				}
			}
			else
			{
				velocity *= 0.92f;
			}
			rotation += 0.0209439527f + Math.Abs(velocity.X) * 0.2f;
			if (Main.rand.Next(3) == 0)
			{
				Dust dust = Dust.NewDustDirect(base.Center, 0, 0, 43, velocity.X, velocity.Y, 254, Color.White, 0.5f);
				Vector2 vector2 = Main.rand.NextVector2Circular(1f, 1f);
				dust.position = base.Center + vector2 * 10f;
				dust.velocity = vector2;
			}
		}

		private void AI_178_FireExplosion()
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item14, position);
				for (int i = 0; i < 4; i++)
				{
					int num = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int j = 0; j < 30; j++)
				{
					int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num2].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num2].noGravity = true;
					Main.dust[num2].velocity *= 3f;
					num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num2].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num2].velocity *= 2f;
					Main.dust[num2].noGravity = true;
					Main.dust[num2].fadeIn = 2.5f;
				}
				for (int k = 0; k < 10; k++)
				{
					int num3 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num3].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num3].noGravity = true;
					Main.dust[num3].velocity *= 3f;
				}
				for (int l = 0; l < 10; l++)
				{
					int num4 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num4].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num4].noGravity = true;
					Main.dust[num4].velocity *= 3f;
				}
				for (int m = 0; m < 2; m++)
				{
					int num5 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num5].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.gore[num5].velocity *= 0.3f;
					Main.gore[num5].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num5].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			localAI[0] += 1f;
			if (localAI[0] >= 10f)
			{
				Kill();
			}
		}

		private void AI_175_TitaniumStormShards()
		{
			Player player = Main.player[owner];
			if (!player.active || player.dead || !player.hasTitaniumStormBuff)
			{
				Kill();
				return;
			}
			if (frameCounter == 0)
			{
				frameCounter = 1;
				frame = Main.rand.Next(12);
				rotation = Main.rand.NextFloat() * ((float)Math.PI * 2f);
			}
			rotation += (float)Math.PI / 200f;
			AI_GetMyGroupIndexAndFillBlackList(null, out var index, out var totalIndexesInGroup);
			float f = ((float)index / (float)totalIndexesInGroup + player.miscCounterNormalized * 6f) * ((float)Math.PI * 2f);
			float scaleFactor = 24f + (float)totalIndexesInGroup * 6f;
			Vector2 vector = player.position - player.oldPosition;
			base.Center += vector;
			Vector2 value = f.ToRotationVector2();
			localAI[0] = value.Y;
			Vector2 value2 = player.Center + value * new Vector2(1f, 0.05f) * scaleFactor;
			base.Center = Vector2.Lerp(base.Center, value2, 0.3f);
		}

		private void AI_174_MultisegmentPet()
		{
			Player player = Main.player[owner];
			if (!player.active)
			{
				active = false;
				return;
			}
			if (type == 883)
			{
				if (player.dead)
				{
					player.petFlagEaterOfWorldsPet = false;
				}
				if (player.petFlagEaterOfWorldsPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 887)
			{
				if (player.dead)
				{
					player.petFlagDestroyerPet = false;
				}
				if (player.petFlagDestroyerPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 893)
			{
				if (player.dead)
				{
					player.petFlagLunaticCultistPet = false;
				}
				if (player.petFlagLunaticCultistPet)
				{
					timeLeft = 2;
				}
			}
			Vector2 center = player.Center;
			if (Distance(center) > 2000f)
			{
				base.Center = center;
				velocity = Vector2.Zero;
				netUpdate = true;
			}
			float num = (center - base.Center).Length();
			float num2 = Math.Min(12f, Math.Max(4f, player.velocity.Length()));
			velocity.Length();
			if (velocity == Vector2.Zero)
			{
				velocity.X = 2f * (float)player.direction;
				Vector2 position = base.position;
				for (int i = 0; i < oldPos.Length; i++)
				{
					position -= velocity;
					oldPos[i] = position;
				}
			}
			if (!(num < 120f))
			{
				float targetAngle = AngleTo(center);
				float f = velocity.ToRotation().AngleTowards(targetAngle, MathHelper.ToRadians(5f));
				velocity = f.ToRotationVector2() * num2;
			}
			if (velocity.Length() > num2)
			{
				velocity = velocity.SafeNormalize(Vector2.Zero) * num2;
			}
			if (Math.Abs(velocity.Y) < 1f)
			{
				velocity.Y -= 0.1f;
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			int direction = base.direction;
			base.direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
			if (direction != base.direction)
			{
				netUpdate = true;
			}
			base.position.X = MathHelper.Clamp(base.position.X, 160f, Main.maxTilesX * 16 - 160);
			base.position.Y = MathHelper.Clamp(base.position.Y, 160f, Main.maxTilesY * 16 - 160);
		}

		private void AI_173_HallowBossRainbowTrail()
		{
			Opacity = Utils.GetLerpValue(0f, 60f, timeLeft, clamped: true) * Utils.GetLerpValue(660f, 600f, timeLeft, clamped: true);
			float num = (float)Math.PI / 360f;
			float num2 = 30f;
			velocity = velocity.RotatedBy(ai[0]);
			if (ai[0] < num)
			{
				ai[0] += num / num2;
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		}

		public Color AI_173_GetColor()
		{
			if (NPC.ShouldEmpressBeEnraged())
			{
				float lerpValue = Utils.GetLerpValue(0f, 60f, (int)Main.time, clamped: true);
				return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * Opacity;
			}
			return Main.hslToRgb((ai[1] + 0f) % 1f, 1f, 0.5f) * Opacity;
		}

		private void AI_171_HallowBossRainbowStreak()
		{
			bool flag = false;
			bool flag2 = false;
			float num = 140f;
			float num2 = 30f;
			float num3 = 0.98f;
			float value = 0.05f;
			float value2 = 0.1f;
			float scaleFactor = 30f;
			if (type == 931)
			{
				num = 180f;
				num2 = 20f;
				scaleFactor = 30f;
				num3 = 0.97f;
				value = 0.075f;
				value2 = 0.125f;
				if (timeLeft == 238)
				{
					int num4 = alpha;
					alpha = 0;
					Color fairyQueenWeaponsColor = GetFairyQueenWeaponsColor();
					alpha = num4;
					for (int i = 0; i < 3; i++)
					{
						Dust dust = Dust.NewDustPerfect(base.Center, 267, Main.rand.NextVector2CircularEdge(3f, 3f) * (Main.rand.NextFloat() * 0.5f + 0.5f), 0, fairyQueenWeaponsColor);
						dust.scale *= 1.2f;
						dust.noGravity = true;
					}
				}
			}
			if ((float)timeLeft > num)
			{
				flag = true;
			}
			else if ((float)timeLeft > num2)
			{
				flag2 = true;
			}
			if (flag)
			{
				float num5 = (float)Math.Cos((float)whoAmI % 6f / 6f + position.X / 320f + position.Y / 160f);
				velocity *= num3;
				velocity = velocity.RotatedBy(num5 * ((float)Math.PI * 2f) * 0.125f * 1f / 30f);
			}
			if (friendly)
			{
				int num6 = (int)ai[0];
				if (Main.npc.IndexInRange(num6) && !Main.npc[num6].CanBeChasedBy(this))
				{
					num6 = -1;
					ai[0] = -1f;
					netUpdate = true;
				}
				if (num6 == -1)
				{
					int num7 = FindTargetWithLineOfSight();
					if (num7 != -1)
					{
						num6 = num7;
						ai[0] = num7;
						netUpdate = true;
					}
				}
			}
			if (flag2)
			{
				int num8 = (int)ai[0];
				Vector2 value3 = velocity;
				if (hostile && Main.player.IndexInRange(num8))
				{
					Player player = Main.player[num8];
					value3 = DirectionTo(player.Center) * scaleFactor;
				}
				if (friendly)
				{
					if (Main.npc.IndexInRange(num8))
					{
						NPC nPC = Main.npc[num8];
						value3 = DirectionTo(nPC.Center) * scaleFactor;
					}
					else
					{
						timeLeft -= 2;
					}
				}
				float amount = MathHelper.Lerp(value, value2, Utils.GetLerpValue(num, 30f, timeLeft, clamped: true));
				velocity = Vector2.SmoothStep(velocity, value3, amount);
				if (type == 931)
				{
					velocity *= MathHelper.Lerp(0.85f, 1f, Utils.GetLerpValue(0f, 90f, timeLeft, clamped: true));
				}
			}
			Opacity = Utils.GetLerpValue(240f, 220f, timeLeft, clamped: true);
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		}

		public Color AI_171_GetColor()
		{
			if (NPC.ShouldEmpressBeEnraged())
			{
				float lerpValue = Utils.GetLerpValue(0f, 60f, (int)Main.time, clamped: true);
				return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * Opacity;
			}
			return Main.hslToRgb((ai[1] + 0.5f) % 1f, 1f, 0.5f) * Opacity;
		}

		private void AI_172_HallowBossRainbowPelletStorm()
		{
			if (localAI[1] <= 90f)
			{
				localAI[1] += 1f;
				scale = 0.5f;
				Opacity = 0.5f;
				float lerpValue = Utils.GetLerpValue(0f, 90f, localAI[1]);
				scale = MathHelper.Lerp(5f, 1f, lerpValue);
				Opacity = 1f - (1f - lerpValue * lerpValue);
				return;
			}
			scale = 1f;
			Opacity = 1f;
			float num = 150f + 10f * (float)AI_172_GetPelletStormsCount();
			localAI[0] += 1f;
			if (localAI[0] >= num)
			{
				Kill();
				return;
			}
			velocity = Vector2.Zero;
			rotation = 0f;
			int num2 = AI_172_GetPelletStormsCount();
			for (int i = 0; i < num2; i++)
			{
				HallowBossPelletStormInfo hallowBossPelletStormInfo = AI_172_GetPelletStormInfo(i);
				for (int j = 0; j < hallowBossPelletStormInfo.BulletsInStorm; j++)
				{
					if (hallowBossPelletStormInfo.IsValid(j))
					{
						hallowBossPelletStormInfo.GetBulletPosition(j, base.Center);
					}
				}
			}
		}

		public int AI_172_GetPelletStormsCount()
		{
			return 6;
		}

		public HallowBossPelletStormInfo AI_172_GetPelletStormInfo(int stormIndex)
		{
			float from = 0f + (float)stormIndex * 10f;
			float to = 90f + (float)stormIndex * 10f;
			HallowBossPelletStormInfo result = default(HallowBossPelletStormInfo);
			result.StartAngle = (float)stormIndex * ((float)Math.PI / 3f) - (float)Math.PI / 2f + (float)stormIndex * ((float)Math.PI / 5f);
			result.AnglePerBullet = (float)Math.PI * 2f / 3f;
			result.BulletsInStorm = 3;
			result.BulletsProgressInStormStartNormalized = Utils.GetLerpValue(from, to, localAI[0]);
			result.BulletsProgressInStormBonusByIndexNormalized = 0f;
			result.StormTotalRange = 500f;
			result.BulletSize = new Vector2(16f, 16f);
			return result;
		}

		private int FindTargetWithLineOfSight(float maxRange = 800f)
		{
			float num = maxRange;
			int result = -1;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				bool flag = nPC.CanBeChasedBy(this);
				if (localNPCImmunity[i] != 0)
				{
					flag = false;
				}
				if (flag)
				{
					float num2 = Distance(Main.npc[i].Center);
					if (num2 < num && Collision.CanHit(position, width, height, nPC.position, nPC.width, nPC.height))
					{
						num = num2;
						result = i;
					}
				}
			}
			return result;
		}

		private void AI_170_FairyGlowstick()
		{
			Point p = base.Center.ToTileCoordinates();
			Vector2 value = p.ToVector2();
			int num = 10;
			Vector2 zero = Vector2.Zero;
			int num2 = 0;
			float num3 = 3f;
			if (ai[1] == 1f)
			{
				SoundEngine.PlaySound(SoundID.Item28, position);
				rotation = 0f;
				velocity.X = 0f;
				ai[1] = 2f;
			}
			frameCounter++;
			if (frameCounter > 4)
			{
				frameCounter = 0;
				frame++;
				if (frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (velocity.Length() > 1f && timeLeft % 10 == 0)
			{
				for (int i = p.X - num; i < p.X + num + 1; i++)
				{
					for (int j = p.Y - num; j < p.Y + num + 1; j++)
					{
						if (WorldGen.SolidTile(i, j))
						{
							Vector2 v = value - new Vector2(i, j);
							Vector2 vector = v.SafeNormalize(Vector2.Zero) * Math.Max((float)num - v.Length(), 0f);
							vector *= num3;
							zero += vector;
							num2++;
						}
					}
				}
				if (num2 > 0)
				{
					zero /= (float)num2;
				}
				if (zero.Length() > 1f)
				{
					velocity = zero;
				}
			}
			velocity *= 0.95f;
			if (velocity.Length() < 1f)
			{
				velocity = Vector2.Zero;
				netUpdate = true;
			}
		}

		private void AI_169_Smolstars()
		{
			Player player = Main.player[owner];
			bool num = type == 864;
			Vector2 vector = player.Top + new Vector2(0f, -30f);
			if (num)
			{
				if (player.dead)
				{
					player.smolstar = false;
				}
				if (player.smolstar)
				{
					timeLeft = 2;
				}
				if (ai[0] == 0f)
				{
					AI_GetMyGroupIndexAndFillBlackList(null, out var index, out var totalIndexesInGroup);
					float num2 = (float)Math.PI * 2f / (float)totalIndexesInGroup;
					float num3 = (float)totalIndexesInGroup * 0.66f;
					Vector2 value = new Vector2(30f, 6f) / 5f * (totalIndexesInGroup - 1);
					Vector2 value2 = Vector2.UnitY.RotatedBy(num2 * (float)index + Main.GlobalTimeWrappedHourly % num3 / num3 * ((float)Math.PI * 2f));
					vector += value2 * value;
					vector.Y += player.gfxOffY;
					vector = vector;
				}
			}
			if (ai[0] == 0f)
			{
				Vector2 velocity = vector - base.Center;
				float num4 = 10f;
				float lerpValue = Utils.GetLerpValue(200f, 600f, velocity.Length(), clamped: true);
				num4 += lerpValue * 30f;
				if (velocity.Length() >= 3000f)
				{
					base.Center = vector;
				}
				base.velocity = velocity;
				if (base.velocity.Length() > num4)
				{
					base.velocity *= num4 / base.velocity.Length();
				}
				int startAttackRange = 800;
				int attackTarget = -1;
				Minion_FindTargetInRange(startAttackRange, attackTarget, skipIfCannotHitWithOwnBody: false);
				if (attackTarget != -1)
				{
					ai[0] = 60f;
					ai[1] = attackTarget;
					netUpdate = true;
				}
				float targetAngle = base.velocity.SafeNormalize(Vector2.UnitY).ToRotation() + (float)Math.PI / 2f;
				if (velocity.Length() < 40f)
				{
					targetAngle = Vector2.UnitY.ToRotation() + (float)Math.PI / 2f;
				}
				rotation = rotation.AngleLerp(targetAngle, 0.2f);
				return;
			}
			if (ai[0] == -1f)
			{
				if (ai[1] == 0f)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int i = 0; i < 2; i++)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 15, oldVelocity.X * 0.2f, oldVelocity.Y * 0.2f, 0, default(Color), 1.4f);
						if (Main.rand.Next(3) != 0)
						{
							dust.scale *= 1.3f;
							dust.velocity *= 1.1f;
						}
						dust.noGravity = true;
						dust.fadeIn = 0f;
					}
					base.velocity += Main.rand.NextVector2CircularEdge(4f, 4f);
				}
				ai[1] += 1f;
				rotation += base.velocity.X * 0.1f + base.velocity.Y * 0.05f;
				base.velocity *= 0.92f;
				if (ai[1] >= 9f)
				{
					ai[0] = 0f;
					ai[1] = 0f;
				}
				return;
			}
			NPC nPC = null;
			int num5 = (int)ai[1];
			if (Main.npc.IndexInRange(num5) && Main.npc[num5].CanBeChasedBy(this))
			{
				nPC = Main.npc[num5];
			}
			if (nPC == null)
			{
				ai[0] = -1f;
				ai[1] = 0f;
				netUpdate = true;
			}
			else if (player.Distance(nPC.Center) >= 900f)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				netUpdate = true;
			}
			else
			{
				Vector2 velocity2 = nPC.Center - base.Center;
				float num6 = 16f;
				base.velocity = velocity2;
				if (base.velocity.Length() > num6)
				{
					base.velocity *= num6 / base.velocity.Length();
				}
				float targetAngle2 = base.velocity.SafeNormalize(Vector2.UnitY).ToRotation() + (float)Math.PI / 2f;
				rotation = rotation.AngleLerp(targetAngle2, 0.4f);
			}
			float num7 = 0.1f;
			float num8 = width * 5;
			for (int j = 0; j < 1000; j++)
			{
				if (j != whoAmI && Main.projectile[j].active && Main.projectile[j].owner == owner && Main.projectile[j].type == type && Math.Abs(position.X - Main.projectile[j].position.X) + Math.Abs(position.Y - Main.projectile[j].position.Y) < num8)
				{
					if (position.X < Main.projectile[j].position.X)
					{
						base.velocity.X -= num7;
					}
					else
					{
						base.velocity.X += num7;
					}
					if (position.Y < Main.projectile[j].position.Y)
					{
						base.velocity.Y -= num7;
					}
					else
					{
						base.velocity.Y += num7;
					}
				}
			}
		}

		private void AI_019_Spears()
		{
			Player player = Main.player[owner];
			Vector2 center = player.RotatedRelativePoint(player.MountedCenter);
			direction = player.direction;
			player.heldProj = whoAmI;
			player.itemTime = player.itemAnimation;
			base.Center = center;
			bool flag = Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3;
			int itemAnimationMax = player.itemAnimationMax;
			int itemAnimation = player.itemAnimation;
			int num = Main.player[owner].itemAnimationMax / 3;
			float num2 = MathHelper.Min(itemAnimation, num);
			float num3 = (float)itemAnimation - num2;
			float num4 = 0f;
			float num5 = 0f;
			float num6 = 0f;
			bool flag2 = false;
			switch (type)
			{
			case 46:
				num4 = 3f;
				num6 = 1.6f;
				num5 = 1.4f;
				break;
			case 105:
				num4 = 3f;
				num6 = 2.4f;
				num5 = 2.1f;
				break;
			case 367:
				spriteDirection = -direction;
				num4 = 3f;
				num6 = 1.6f;
				num5 = 1.5f;
				break;
			case 368:
				spriteDirection = -direction;
				num4 = 3f;
				num6 = 1.5f;
				num5 = 1.4f;
				break;
			case 222:
				num4 = 3f;
				num6 = 2.4f;
				num5 = 2.1f;
				break;
			case 342:
				num4 = 3f;
				num6 = 2.4f;
				num5 = 2.1f;
				break;
			case 47:
				num4 = 4f;
				num6 = 1.2f;
				num5 = 0.9f;
				break;
			case 153:
				spriteDirection = -direction;
				num4 = 4f;
				num6 = 1.5f;
				num5 = 1.3f;
				break;
			case 49:
				spriteDirection = -direction;
				num4 = 4f;
				num6 = 1.1f;
				num5 = 0.85f;
				break;
			case 730:
				spriteDirection = -direction;
				num4 = 8f;
				num6 = 1.5f;
				num5 = 1.2f;
				break;
			case 877:
			case 878:
			case 879:
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				num4 = 28f;
				num6 = 0.4f;
				num5 = 0.4f;
				flag2 = true;
				break;
			case 64:
			case 215:
				spriteDirection = -direction;
				num4 = 3f;
				num6 = 1.9f;
				num5 = 1.7f;
				break;
			case 66:
			case 97:
			case 212:
			case 218:
				spriteDirection = -direction;
				num4 = 3f;
				num6 = 2.1f;
				num5 = 1.9f;
				break;
			case 130:
				spriteDirection = -direction;
				num4 = 3f;
				num6 = 1.3f;
				num5 = 1f;
				break;
			}
			float num7 = (float)(itemAnimationMax - num) - num3;
			float num8 = (float)num - num2;
			float scaleFactor = num4 + num5 * num7 - num6 * num8;
			position += velocity * scaleFactor;
			switch (type)
			{
			case 130:
				if ((localAI[0] == 0f || localAI[0] == 4f || localAI[0] == 8f || localAI[0] == 12f || localAI[0] == 16f || localAI[0] == 20f || localAI[0] == 24f) && owner == Main.myPlayer)
				{
					NewProjectile(base.Center.X, base.Center.Y, velocity.X, velocity.Y, 131, damage / 3, 0f, owner);
				}
				localAI[0] += 1f;
				break;
			case 730:
				if (localAI[0] == 0f && Main.myPlayer == owner)
				{
					localAI[0] = 1f;
					Vector2 vector = velocity * 4f;
					NewProjectile(base.Center.X, base.Center.Y, vector.X, vector.Y, 732, (int)((double)damage * 1.25), knockBack * 0.5f, owner);
				}
				break;
			case 342:
				if (flag && localAI[0] == 0f && Main.myPlayer == owner)
				{
					localAI[0] = 1f;
					if (Collision.CanHit(player.position, player.width, player.height, position, width, height))
					{
						NewProjectile(base.Center.X, base.Center.Y, velocity.X * 2.4f, velocity.Y * 2.4f, 343, (int)((double)damage * 0.8), knockBack * 0.85f, owner);
					}
				}
				break;
			case 222:
				if (flag && localAI[0] == 0f && Main.myPlayer == owner)
				{
					localAI[0] = 1f;
					NewProjectile(base.Center.X, base.Center.Y, velocity.X, velocity.Y, 228, damage, knockBack, owner);
				}
				break;
			}
			if (flag2 && player.channel && player.itemAnimation < num)
			{
				player.SetDummyItemTime(num);
			}
			if (player.itemAnimation == 0)
			{
				Kill();
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + (float)Math.PI / 2f + (float)Math.PI / 4f;
			if (spriteDirection == -1)
			{
				rotation -= (float)Math.PI / 2f;
			}
			if (type == 878 || type == 879)
			{
				float num9 = 6f;
				float num10 = 0.8f;
				float num11 = Vector2.Dot(velocity.SafeNormalize(Vector2.UnitX * player.direction), player.velocity.SafeNormalize(Vector2.UnitX * player.direction));
				float num12 = player.velocity.Length();
				if (num12 > num9 && num11 > num10)
				{
					int num13 = 8;
					if (num12 > num9 + 1f)
					{
						num13 = 5;
					}
					if (num12 > num9 + 2f)
					{
						num13 = 2;
					}
					int num14 = 14;
					int num15 = 27;
					int num16 = 4;
					if (type == 879)
					{
						num14 = 43;
						num15 = 57;
					}
					if (Main.rand.Next(num13 + 3) == 0)
					{
						Dust.NewDust(base.Center - new Vector2(num16, num16), num16 * 2, num16 * 2, num14, 0f, 0f, 150, default(Color), 1.4f);
					}
					if (Main.rand.Next(num13) == 0)
					{
						int num17 = Dust.NewDust(base.Center - new Vector2(num16, num16), num16 * 2, num16 * 2, num15, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
						Main.dust[num17].noGravity = true;
						Main.dust[num17].velocity *= 0.25f;
						num17 = Dust.NewDust(base.Center - new Vector2(num16, num16), num16 * 2, num16 * 2, num15, 0f, 0f, 150, default(Color), 1.4f);
						Main.dust[num17].velocity *= 0.25f;
					}
				}
			}
			if (type == 46)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.4f);
				}
				int num18 = Dust.NewDust(position, width, height, 27, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
				Main.dust[num18].noGravity = true;
				Main.dust[num18].velocity /= 2f;
				num18 = Dust.NewDust(position - velocity * 2f, width, height, 27, 0f, 0f, 150, default(Color), 1.4f);
				Main.dust[num18].velocity /= 5f;
			}
			if (type == 730)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.7f);
					dust.noGravity = true;
					dust.velocity *= 1.4f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.5f).velocity.Y -= 0.5f;
				}
			}
			else if (type == 105)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num19 = Dust.NewDust(position, width, height, 57, velocity.X * 0.2f, velocity.Y * 0.2f, 200, default(Color), 1.2f);
					Main.dust[num19].velocity += velocity * 0.3f;
					Main.dust[num19].velocity *= 0.2f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num20 = Dust.NewDust(position, width, height, 43, 0f, 0f, 254, default(Color), 0.3f);
					Main.dust[num20].velocity += velocity * 0.5f;
					Main.dust[num20].velocity *= 0.5f;
				}
			}
			else if (type == 153)
			{
				int num21 = Dust.NewDust(position - velocity * 3f, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140);
				Main.dust[num21].noGravity = true;
				Main.dust[num21].fadeIn = 1.25f;
				Main.dust[num21].velocity *= 0.25f;
			}
		}

		private void AI_019_Spears_Old()
		{
			Vector2 vector = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter);
			direction = Main.player[owner].direction;
			Main.player[owner].heldProj = whoAmI;
			Main.player[owner].itemTime = Main.player[owner].itemAnimation;
			position.X = vector.X - (float)(width / 2);
			position.Y = vector.Y - (float)(height / 2);
			bool flag = Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3;
			if (!Main.player[owner].frozen)
			{
				if (type == 46)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.6f;
					}
					else
					{
						ai[0] += 1.4f;
					}
				}
				else if (type == 105)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 2.4f;
					}
					else
					{
						ai[0] += 2.1f;
					}
				}
				else if (type == 367)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.6f;
					}
					else
					{
						ai[0] += 1.5f;
					}
				}
				else if (type == 368)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.5f;
					}
					else
					{
						ai[0] += 1.4f;
					}
				}
				else if (type == 222)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 2.4f;
						if (localAI[0] == 0f && Main.myPlayer == owner)
						{
							localAI[0] = 1f;
							NewProjectile(base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], velocity.X, velocity.Y, 228, damage, knockBack, owner);
						}
					}
					else
					{
						ai[0] += 2.1f;
					}
				}
				else if (type == 342)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 2.4f;
						if (localAI[0] == 0f && Main.myPlayer == owner)
						{
							localAI[0] = 1f;
							if (Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, new Vector2(base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0]), width, height))
							{
								NewProjectile(base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], velocity.X * 2.4f, velocity.Y * 2.4f, 343, (int)((double)damage * 0.8), knockBack * 0.85f, owner);
							}
						}
					}
					else
					{
						ai[0] += 2.1f;
					}
				}
				else if (type == 47)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 4f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.2f;
					}
					else
					{
						ai[0] += 0.9f;
					}
				}
				else if (type == 153)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 4f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.5f;
					}
					else
					{
						ai[0] += 1.3f;
					}
				}
				else if (type == 49)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 4f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.1f;
					}
					else
					{
						ai[0] += 0.85f;
					}
				}
				else if (type == 730)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 8f;
						netUpdate = true;
						if (localAI[0] == 0f && Main.myPlayer == owner)
						{
							localAI[0] = 1f;
							Vector2 vector2 = velocity * 4f;
							NewProjectile(base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], vector2.X, vector2.Y, 732, (int)((double)damage * 1.25), knockBack * 0.5f, owner);
						}
					}
					if (flag)
					{
						ai[0] -= 1.5f;
					}
					else
					{
						ai[0] += 1.2f;
					}
				}
				else if (type == 64 || type == 215)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.9f;
					}
					else
					{
						ai[0] += 1.7f;
					}
				}
				else if (type == 66 || type == 97 || type == 212 || type == 218)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 2.1f;
					}
					else
					{
						ai[0] += 1.9f;
					}
				}
				else if (type == 130)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.3f;
					}
					else
					{
						ai[0] += 1f;
					}
				}
			}
			position += velocity * ai[0];
			if (type == 130)
			{
				if (ai[1] == 0f || ai[1] == 4f || ai[1] == 8f || ai[1] == 12f || ai[1] == 16f || ai[1] == 20f || ai[1] == 24f)
				{
					NewProjectile(position.X + (float)(width / 2), position.Y + (float)(height / 2), velocity.X, velocity.Y, 131, damage / 3, 0f, owner);
				}
				ai[1] += 1f;
			}
			if (Main.player[owner].itemAnimation == 0)
			{
				Kill();
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 2.355f;
			if (spriteDirection == -1)
			{
				rotation -= 1.57f;
			}
			if (type == 46)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.4f);
				}
				int num = Dust.NewDust(position, width, height, 27, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
				Main.dust[num].noGravity = true;
				Main.dust[num].velocity.X /= 2f;
				Main.dust[num].velocity.Y /= 2f;
				num = Dust.NewDust(position - velocity * 2f, width, height, 27, 0f, 0f, 150, default(Color), 1.4f);
				Main.dust[num].velocity.X /= 5f;
				Main.dust[num].velocity.Y /= 5f;
			}
			if (type == 730)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.7f);
					dust.noGravity = true;
					dust.velocity *= 1.4f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.5f).velocity.Y -= 0.5f;
				}
			}
			else if (type == 105)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 57, velocity.X * 0.2f, velocity.Y * 0.2f, 200, default(Color), 1.2f);
					Main.dust[num2].velocity += velocity * 0.3f;
					Main.dust[num2].velocity *= 0.2f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num3 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 43, 0f, 0f, 254, default(Color), 0.3f);
					Main.dust[num3].velocity += velocity * 0.5f;
					Main.dust[num3].velocity *= 0.5f;
				}
			}
			else if (type == 153)
			{
				int num4 = Dust.NewDust(position - velocity * 3f, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140);
				Main.dust[num4].noGravity = true;
				Main.dust[num4].fadeIn = 1.25f;
				Main.dust[num4].velocity *= 0.25f;
			}
		}

		private void AI_168_FirstFractal()
		{
			float num = 60f;
			if ((localAI[0] += 1f) >= num - 1f)
			{
				Kill();
				return;
			}
			if (frameCounter == 0)
			{
				frameCounter = 1;
				frame = Main.rand.Next(15);
			}
			velocity = velocity.RotatedBy(ai[0]);
			Opacity = Utils.GetLerpValue(0f, 12f, localAI[0], clamped: true) * Utils.GetLerpValue(num, num - 12f, localAI[0], clamped: true);
			direction = ((velocity.X > 0f) ? 1 : (-1));
			spriteDirection = direction;
			rotation = (float)Math.PI / 4f * (float)spriteDirection + velocity.ToRotation();
			if (spriteDirection == -1)
			{
				rotation += (float)Math.PI;
			}
			if (localAI[0] > 7f)
			{
				int num2 = 5;
				_ = base.Center - new Vector2(num2);
				if (Main.rand.Next(15) == 0)
				{
					Dust dust = Dust.NewDustPerfect(base.Center, 278, null, 100, Color.Lerp(GetFirstFractalColor(), Color.White, Main.rand.NextFloat() * 0.3f));
					dust.scale = 0.7f;
					dust.noGravity = true;
					dust.velocity *= 0.5f;
					dust.velocity += velocity * 2f;
				}
			}
		}

		private void AI_167_SparkleGuitar()
		{
			float num = 90f;
			if ((localAI[0] += 1f) >= num - 1f)
			{
				Kill();
				return;
			}
			float num2 = localAI[0] / num;
			Vector2 center = Main.player[owner].Center;
			Vector2 vector = new Vector2(ai[0], ai[1]);
			Vector2 value = -velocity;
			Vector2 value2 = center + value * 2f;
			Vector2 value3 = vector + value * (1f - num2 * 3f);
			base.Center = Vector2.CatmullRom(value2, center, vector, value3, num2);
			int num3 = type;
			if (num3 == 856)
			{
				Lighting.AddLight(base.Center, Color.HotPink.ToVector3() * 0.3f);
				rotation = (float)Math.PI * 2f * num2 * 1f;
			}
		}

		private void AI_164_StormTigerGem()
		{
			Player player = Main.player[owner];
			if (type == 831)
			{
				if (player.dead)
				{
					player.stormTiger = false;
				}
				if (player.stormTiger)
				{
					timeLeft = 2;
				}
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= 6)
					{
						frame = 0;
					}
				}
			}
			List<int> ai164_blacklistedTargets = _ai164_blacklistedTargets;
			ai164_blacklistedTargets.Clear();
			AI_GetMyGroupIndexAndFillBlackList(ai164_blacklistedTargets, out var index, out var totalIndexesInGroup);
			Vector2 vector2 = (base.Center = AI_164_GetHomeLocation(player, index, totalIndexesInGroup));
		}

		public static Vector2 AI_164_GetHomeLocation(Player master, int stackedIndex, int totalIndexes)
		{
			int num = master.bodyFrame.Height;
			if (num == 0)
			{
				num = 1;
			}
			Vector2 value = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num];
			value.Y -= 2f;
			float num2 = master.miscCounterNormalized * 2f;
			int num3 = stackedIndex / 4;
			int num4 = totalIndexes / 4;
			if (totalIndexes % 4 > 0)
			{
				num4++;
			}
			int num5 = (totalIndexes - num3 * 4) % 4;
			if (num5 == 0)
			{
				num5 = 4;
			}
			if (num4 - 1 != num3)
			{
				num5 = 4;
			}
			int num6 = stackedIndex % num5;
			float num7 = (float)num6 / (float)num5;
			num2 += (float)num3 / 8f;
			if (stackedIndex >= (num4 - 1) * 4 && num3 > 0)
			{
				num2 = 0f;
				switch (num5)
				{
				case 1:
					num7 = 0f;
					break;
				case 2:
					num7 = 0.25f + (float)num6 * 0.5f;
					break;
				case 3:
					num7 = (float)(num6 - 1) / 6f;
					break;
				case 4:
					num7 = ((float)num6 - 1.5f) / 6f;
					break;
				}
			}
			Vector2 value2 = new Vector2(0f, -8 - 12 * num3).RotatedBy((num2 + num7) * ((float)Math.PI * 2f));
			value += value2 + new Vector2(0f, master.gravDir * -40f);
			Vector2 mountedCenter = master.MountedCenter;
			_ = master.direction;
			Vector2 vector = mountedCenter + new Vector2(0f, master.gravDir * -21f) + value;
			vector.Y += master.gfxOffY;
			vector = vector;
			return vector;
		}

		private void AI_162_TigerPounce()
		{
			if (ai[0] < 0f)
			{
				Opacity = 0f;
				ai[0] += 1f;
				return;
			}
			bool flag = false;
			flag = true;
			if (frameCounter == 0)
			{
				frameCounter = 1;
				localAI[0] = base.Center.X;
				localAI[1] = base.Center.Y;
				flag = true;
			}
			Vector2 vector = new Vector2(localAI[0], localAI[1]);
			Vector2 vector2 = vector + velocity;
			float y = Vector2.Distance(vector, vector2) * 1.5f;
			float num = 0.1f;
			Vector2 value = Vector2.Lerp(vector, vector2, 0f - num) + new Vector2(0f, y);
			Vector2 value2 = Vector2.Lerp(vector, vector2, 1f + num) + new Vector2(0f, y);
			if (Opacity < 1f)
			{
				Opacity += 0.1f;
			}
			int num2 = Math.Sign(vector2.X - vector.X);
			rotation += (float)num2 * -0.2f;
			spriteDirection = num2;
			if (ai[1] < 1f)
			{
				ai[1] = 60f;
			}
			ai[0] += 1f / ai[1];
			Vector2 vector3 = Vector2.CatmullRom(amount: Utils.Clamp(ai[0], 0f, 1f), value1: value, value2: vector, value3: vector2, value4: value2);
			if (flag)
			{
				for (float num3 = 0f; num3 < 1f; num3 += 0.5f)
				{
					if (Main.rand.Next(19) == 0)
					{
						Vector2 value3 = base.Center + DirectionTo(vector3).SafeNormalize(Vector2.UnitY) * 100f;
						Dust dust = Dust.NewDustPerfect(base.Center + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, Main.rand.NextVector2Circular(3f, 3f), 100, Color.White * 0.4f);
						dust.velocity.Y += -0.6f;
						dust.velocity += velocity * 0.1f;
						Main.rand.Next(5);
						dust.velocity = (value3 - base.Center) * 0.05f;
						dust.fadeIn = 0f;
						dust.scale = 0.7f;
						dust.noGravity = true;
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					Dust obj = Main.dust[Dust.NewDust(position, width, height, 269)];
					obj.fadeIn = 0.7f;
					obj.scale = 0.4f;
					obj.velocity += velocity * 0.001f;
					obj.noLight = true;
				}
			}
			base.Center = vector3;
			if (ai[0] >= 1f)
			{
				Kill();
			}
		}

		private void AI_016()
		{
			if (wet && (type == 799 || type == 800 || type == 801 || type == 810 || type == 906 || type == 784 || type == 785 || type == 786 || type == 805 || type == 903 || type == 787 || type == 788 || type == 789 || type == 806 || type == 904 || type == 790 || type == 791 || type == 792 || type == 807 || type == 905))
			{
				timeLeft = 1;
			}
			if (type == 108 || type == 164)
			{
				ai[0] += 1f;
				if (ai[0] > 3f)
				{
					Kill();
				}
			}
			if (type == 102)
			{
				int num = (int)(base.Center.X / 16f);
				int num2 = (int)(base.Center.Y / 16f);
				if (WorldGen.InWorld(num, num2) && Main.tile[num, num2].active() && TileID.Sets.Platforms[Main.tile[num, num2].type])
				{
					Kill();
					return;
				}
			}
			if (type == 75)
			{
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && !Main.player[i].dead && !Main.player[i].ghost && (base.Center - Main.player[i].Center).Length() < 40f)
					{
						Kill();
						return;
					}
				}
			}
			bool flag = false;
			if (type == 37 || type == 397 || type == 470 || type == 519 || type == 773 || type == 911)
			{
				try
				{
					int num3 = (int)(position.X / 16f) - 1;
					int num4 = (int)((position.X + (float)width) / 16f) + 2;
					int num5 = (int)(position.Y / 16f) - 1;
					int num6 = (int)((position.Y + (float)height) / 16f) + 2;
					if (num3 < 0)
					{
						num3 = 0;
					}
					if (num4 > Main.maxTilesX)
					{
						num4 = Main.maxTilesX;
					}
					if (num5 < 0)
					{
						num5 = 0;
					}
					if (num6 > Main.maxTilesY)
					{
						num6 = Main.maxTilesY;
					}
					Vector2 value = default(Vector2);
					for (int j = num3; j < num4; j++)
					{
						for (int k = num5; k < num6; k++)
						{
							if (Main.tile[j, k] == null || !Main.tile[j, k].nactive() || !Main.tileSolid[Main.tile[j, k].type] || Main.tileSolidTop[Main.tile[j, k].type])
							{
								continue;
							}
							value.X = j * 16;
							value.Y = k * 16;
							if (!(position.X + (float)width - 4f > value.X) || !(position.X + 4f < value.X + 16f) || !(position.Y + (float)height - 4f > value.Y) || !(position.Y + 4f < value.Y + 16f))
							{
								continue;
							}
							if (type == 911 && owner == Main.myPlayer && localAI[0] == 0f)
							{
								float num7 = 12f;
								Vector2 value2 = value + new Vector2(8f, 8f);
								if (Vector2.Distance(base.Center, value2) < num7)
								{
									base.Center += velocity.SafeNormalize(Vector2.Zero) * -4f;
								}
								localAI[0] = 1f;
								netUpdate = true;
							}
							velocity.X = 0f;
							velocity.Y = -0.2f;
							flag = true;
						}
					}
				}
				catch
				{
				}
			}
			if (flag && type == 911)
			{
				Point p = base.Center.ToTileCoordinates();
				if (WorldGen.SolidOrSlopedTile(Framing.GetTileSafely(p.X, p.Y)))
				{
					Vector2 v = p.ToWorldCoordinates() - base.Center;
					base.Center += v.SafeNormalize(Vector2.Zero) * -4f;
				}
			}
			if (flag && type == 773)
			{
				Player player = Main.player[owner];
				Vector2 v2 = DirectionTo(player.Center).SafeNormalize(Vector2.UnitX * player.direction);
				float num8 = rotation;
				float num9 = v2.ToRotation() + (float)Math.PI / 2f;
				rotation = rotation.AngleLerp(num9, 0.2f);
				rotation = rotation.AngleTowards(num9, 0.05f);
				Vector2 value3 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				if (Main.rand.Next(3) == 0)
				{
					Dust dust = Dust.NewDustPerfect(base.Center + value3 * 10f, 59, value3 * 2f + Main.rand.NextVector2Circular(0.25f, 0.25f), 0, default(Color), 2f);
					dust.noGravity = true;
					if (Main.rand.Next(3) == 0)
					{
						dust.velocity *= 1.5f;
						dust.noGravity = false;
						dust.scale /= 2f;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					Point scarabBombDigDirectionSnap = GetScarabBombDigDirectionSnap8();
					Dust.NewDustPerfect(base.Center + value3 * -10f, 59, scarabBombDigDirectionSnap.ToVector2() * 1.5f, 0, default(Color), 2f).noGravity = true;
				}
				if (Main.rand.Next(15) == 0)
				{
					Dust dust2 = Dust.NewDustPerfect(base.Center + value3 * 10f, 88, value3 * 3f + Main.rand.NextVector2Circular(0.25f, 0.25f), 0, default(Color), 2f);
					dust2.noGravity = true;
					if (Main.rand.Next(3) == 0)
					{
						dust2.velocity *= 1.5f;
					}
				}
				bool flag2 = Main.rand.Next(30) == 0;
				if (num8 != rotation && Main.rand.Next(40) == 0)
				{
					flag2 = true;
				}
				if (flag2)
				{
					float num10 = (float)Math.PI * 2f * Main.rand.NextFloat();
					for (float num11 = 0f; num11 < 1f; num11 += 0.142857149f)
					{
						Vector2 spinningpoint = (num11 * ((float)Math.PI * 2f) + num10).ToRotationVector2();
						spinningpoint *= new Vector2(1f, 0.3f);
						spinningpoint = spinningpoint.RotatedBy(num9);
						Dust dust3 = Dust.NewDustPerfect(base.Center + spinningpoint + value3 * 8f, 59, value3 * 3f + spinningpoint);
						dust3.noGravity = true;
						dust3.fadeIn = 1.6f;
					}
				}
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
			}
			if (type == 519)
			{
				localAI[1] += 1f;
				float num12 = 180f - localAI[1];
				if (num12 < 0f)
				{
					num12 = 0f;
				}
				frameCounter++;
				if (num12 < 15f)
				{
					frameCounter++;
				}
				if ((float)frameCounter >= (num12 / 10f + 6f) / 2f)
				{
					frame++;
					frameCounter = 0;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			if (type == 681 && localAI[1] == 0f)
			{
				localAI[1] = 1f;
			}
			int num13 = 6;
			if (type == 776 || type == 780 || type == 803 || type == 804)
			{
				num13 = 228;
			}
			else if (type == 784 || type == 805)
			{
				num13 = ((Main.rand.Next(3) == 0) ? 6 : Dust.dustWater());
			}
			else if (type == 787 || type == 806)
			{
				num13 = ((Main.rand.Next(3) == 0) ? 6 : 35);
			}
			else if (type == 790 || type == 807)
			{
				num13 = ((Main.rand.Next(3) == 0) ? 6 : 152);
			}
			if (type == 102)
			{
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item10, position);
				}
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 1)
				{
					frame = 0;
				}
				if (velocity.Y == 0f)
				{
					position.X += width / 2;
					position.Y += height / 2;
					width = 128;
					height = 128;
					position.X -= width / 2;
					position.Y -= height / 2;
					damage = 40;
					knockBack = 8f;
					timeLeft = 3;
					netUpdate = true;
				}
			}
			if (type == 303 && timeLeft <= 3 && hostile)
			{
				position.X += width / 2;
				position.Y += height / 2;
				width = 128;
				height = 128;
				position.X -= width / 2;
				position.Y -= height / 2;
			}
			if (owner == Main.myPlayer && timeLeft <= 3)
			{
				tileCollide = false;
				ai[1] = 0f;
				alpha = 255;
				if (type == 28 || type == 37 || type == 516 || type == 519)
				{
					Resize(128, 128);
					damage = 100;
					knockBack = 8f;
				}
				else if (type == 773)
				{
					Resize(48, 96);
					damage = 100;
					knockBack = 8f;
				}
				else if (type == 29 || type == 470 || type == 637)
				{
					Resize(250, 250);
					damage = 250;
					knockBack = 10f;
				}
				else if (type == 30 || type == 397 || type == 517 || type == 588)
				{
					Resize(128, 128);
					knockBack = 8f;
				}
				else if (type == 681)
				{
					Resize(80, 80);
					knockBack = 8f;
				}
				else if (type == 779 || type == 783 || type == 862 || type == 863)
				{
					Resize(48, 48);
					knockBack = 8f;
				}
				else if (type == 133 || type == 134 || type == 135 || type == 136 || type == 137 || type == 138 || type == 338 || type == 339 || type == 930)
				{
					Resize(128, 128);
					knockBack = 8f;
				}
				else if (type == 794 || type == 797 || type == 795 || type == 798 || type == 793 || type == 796 || type == 808 || type == 808)
				{
					Resize(250, 250);
					knockBack = 12f;
				}
				else if (type == 776 || type == 780 || type == 777 || type == 781 || type == 778 || type == 782 || type == 803 || type == 804)
				{
					Resize(128, 128);
					knockBack = 12f;
				}
				else if (type == 784 || type == 785 || type == 786 || type == 805 || type == 903 || type == 787 || type == 788 || type == 789 || type == 806 || type == 904 || type == 790 || type == 791 || type == 792 || type == 807 || type == 905 || type == 799 || type == 800 || type == 801 || type == 810 || type == 906 || type == 910 || type == 911)
				{
					if (type == 903 || type == 904 || type == 905 || type == 906 || type == 910 || type == 911)
					{
						damage = 100;
					}
					Resize(48, 48);
					knockBack = 12f;
				}
				else if (type == 139 || type == 140 || type == 141 || type == 142 || type == 143 || type == 144 || type == 340 || type == 341)
				{
					Resize(200, 200);
					knockBack = 10f;
				}
			}
			else
			{
				if (type != 30 && type != 75 && type != 517 && type != 681 && type != 588 && type != 397 && type != 108 && type != 133 && type != 134 && type != 135 && type != 136 && type != 137 && type != 138 && type != 139 && type != 140 && type != 141 && type != 142 && type != 143 && type != 144 && type != 164 && type != 303 && type != 338 && type != 339 && type != 340 && type != 341 && (type < 776 || type > 801) && (type < 803 || type > 810) && type != 930)
				{
					damage = 0;
				}
				if (type == 338 || type == 339 || type == 340 || type == 341 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
				{
					localAI[1] += 1f;
					if (localAI[1] > 6f)
					{
						alpha = 0;
					}
					else
					{
						alpha = (int)(255f - 42f * localAI[1]) + 100;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					for (int l = 0; l < 2; l++)
					{
						float num14 = 0f;
						float num15 = 0f;
						if (l == 1)
						{
							num14 = velocity.X * 0.5f;
							num15 = velocity.Y * 0.5f;
						}
						if (!(localAI[1] > 9f))
						{
							continue;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num16 = Dust.NewDust(new Vector2(position.X + 3f + num14, position.Y + 3f + num15) - velocity * 0.5f, width - 8, height - 8, num13, 0f, 0f, 100);
							Main.dust[num16].scale *= 1.4f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num16].velocity *= 0.2f;
							Main.dust[num16].noGravity = true;
							if (Main.dust[num16].type == 152)
							{
								Main.dust[num16].scale *= 0.5f;
								Main.dust[num16].velocity += velocity * 0.1f;
							}
							else if (Main.dust[num16].type == 35)
							{
								Main.dust[num16].scale *= 0.5f;
								Main.dust[num16].velocity += velocity * 0.1f;
							}
							else if (Main.dust[num16].type == Dust.dustWater())
							{
								Main.dust[num16].scale *= 0.65f;
								Main.dust[num16].velocity += velocity * 0.1f;
							}
							if (type == 808 || type == 809)
							{
								Dust dust4 = Main.dust[num16];
								if (dust4.dustIndex != 6000)
								{
									dust4 = Dust.NewDustPerfect(dust4.position, dust4.type, dust4.velocity, dust4.alpha, dust4.color, dust4.scale + 0.5f);
									dust4.velocity = Main.rand.NextVector2Circular(3f, 3f);
									dust4.noGravity = true;
								}
								if (dust4.dustIndex != 6000)
								{
									dust4 = Dust.NewDustPerfect(dust4.position, dust4.type, dust4.velocity, dust4.alpha, dust4.color, dust4.scale + 0.5f);
									dust4.velocity = ((float)Math.PI * 2f * ((float)timeLeft / 20f)).ToRotationVector2() * 3f;
									dust4.noGravity = true;
								}
							}
						}
						if (Main.rand.Next(2) == 0)
						{
							int num17 = Dust.NewDust(new Vector2(position.X + 3f + num14, position.Y + 3f + num15) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num17].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.1f;
							Main.dust[num17].velocity *= 0.05f;
						}
					}
					float num18 = position.X;
					float num19 = position.Y;
					float num20 = 600f;
					if (type == 930)
					{
						num20 = 650f;
					}
					bool flag3 = false;
					ai[0] += 1f;
					if (ai[0] > 30f)
					{
						ai[0] = 30f;
						for (int m = 0; m < 200; m++)
						{
							if (Main.npc[m].CanBeChasedBy(this))
							{
								float num21 = Main.npc[m].position.X + (float)(Main.npc[m].width / 2);
								float num22 = Main.npc[m].position.Y + (float)(Main.npc[m].height / 2);
								float num23 = Math.Abs(position.X + (float)(width / 2) - num21) + Math.Abs(position.Y + (float)(height / 2) - num22);
								if (num23 < num20 && Collision.CanHit(position, width, height, Main.npc[m].position, Main.npc[m].width, Main.npc[m].height))
								{
									num20 = num23;
									num18 = num21;
									num19 = num22;
									flag3 = true;
								}
							}
						}
					}
					if (!flag3)
					{
						num18 = position.X + (float)(width / 2) + velocity.X * 100f;
						num19 = position.Y + (float)(height / 2) + velocity.Y * 100f;
					}
					float num24 = 16f;
					if (type == 930)
					{
						num24 = 12f;
					}
					Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num25 = num18 - vector.X;
					float num26 = num19 - vector.Y;
					float num27 = (float)Math.Sqrt(num25 * num25 + num26 * num26);
					num27 = num24 / num27;
					num25 *= num27;
					num26 *= num27;
					velocity.X = (velocity.X * 11f + num25) / 12f;
					velocity.Y = (velocity.Y * 11f + num26) / 12f;
				}
				else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790)
				{
					if (Math.Abs(velocity.X) >= 8f || Math.Abs(velocity.Y) >= 8f)
					{
						for (int n = 0; n < 2; n++)
						{
							float num28 = 0f;
							float num29 = 0f;
							if (n == 1)
							{
								num28 = velocity.X * 0.5f;
								num29 = velocity.Y * 0.5f;
							}
							int num30 = Dust.NewDust(new Vector2(position.X + 3f + num28, position.Y + 3f + num29) - velocity * 0.5f, width - 8, height - 8, num13, 0f, 0f, 100);
							Main.dust[num30].scale *= 2f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num30].velocity *= 0.2f;
							Main.dust[num30].noGravity = true;
							if (Main.dust[num30].type == 152)
							{
								Main.dust[num30].scale *= 0.5f;
								Main.dust[num30].velocity += velocity * 0.1f;
							}
							else if (Main.dust[num30].type == 35)
							{
								Main.dust[num30].scale *= 0.5f;
								Main.dust[num30].velocity += velocity * 0.1f;
							}
							else if (Main.dust[num30].type == Dust.dustWater())
							{
								Main.dust[num30].scale *= 0.65f;
								Main.dust[num30].velocity += velocity * 0.1f;
							}
							if (type == 793 || type == 796)
							{
								Dust dust5 = Main.dust[num30];
								if (dust5.dustIndex != 6000)
								{
									dust5 = Dust.NewDustPerfect(dust5.position, dust5.type, dust5.velocity, dust5.alpha, dust5.color, dust5.scale);
									dust5.velocity = Main.rand.NextVector2Circular(3f, 3f);
									dust5.noGravity = true;
								}
								if (dust5.dustIndex != 6000)
								{
									dust5 = Dust.NewDustPerfect(dust5.position, dust5.type, dust5.velocity, dust5.alpha, dust5.color, dust5.scale);
									dust5.velocity = ((float)Math.PI * 2f * ((float)timeLeft / 20f)).ToRotationVector2() * 3f;
									dust5.noGravity = true;
								}
							}
							num30 = Dust.NewDust(new Vector2(position.X + 3f + num28, position.Y + 3f + num29) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num30].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
							Main.dust[num30].velocity *= 0.05f;
						}
					}
					if (Math.Abs(velocity.X) < 15f && Math.Abs(velocity.Y) < 15f)
					{
						velocity *= 1.1f;
					}
				}
				else if (type == 133 || type == 136 || type == 139 || type == 142 || type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 791)
				{
					int num31 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100);
					Main.dust[num31].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
					Main.dust[num31].velocity *= 0.2f;
					Main.dust[num31].noGravity = true;
				}
				else if (type == 135 || type == 138 || type == 141 || type == 144 || type == 778 || type == 782 || type == 795 || type == 798 || type == 801 || type == 786 || type == 789 || type == 792)
				{
					if ((double)velocity.X > -0.2 && (double)velocity.X < 0.2 && (double)velocity.Y > -0.2 && (double)velocity.Y < 0.2)
					{
						alpha += 2;
						if (alpha > 200)
						{
							alpha = 200;
						}
					}
					else
					{
						alpha = 0;
						int num32 = Dust.NewDust(new Vector2(position.X + 3f, position.Y + 3f) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100);
						Main.dust[num32].scale *= 1.6f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num32].velocity *= 0.05f;
						Main.dust[num32].noGravity = true;
					}
				}
				else if (type == 779 || type == 783 || type == 862 || type == 863)
				{
					if (Main.rand.Next(25) == 0)
					{
						Dust dust6 = Dust.NewDustDirect(position, width, height, 228, (0f - velocity.X) / 10f, (0f - velocity.Y) / 10f, 100);
						dust6.noGravity = true;
						dust6.velocity *= 0f;
						dust6.scale = 1.3f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Dust dust7 = Dust.NewDustDirect(position, width, height, 31, (0f - velocity.X) / 10f, (0f - velocity.Y) / 10f, 100);
						dust7.noGravity = true;
						dust7.velocity *= 0f;
						dust7.scale = 1.3f;
					}
					if (frameCounter == 0)
					{
						frameCounter = 1;
						frame = Main.rand.Next(4);
					}
				}
				else if (type != 30 && type != 517 && type != 681 && type != 397 && type != 519 && type != 588 && type != 779 && type != 783 && type != 862 && type != 863 && Main.rand.Next(2) == 0)
				{
					int num33 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100);
					Main.dust[num33].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num33].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num33].noGravity = true;
					Main.dust[num33].position = base.Center + new Vector2(0f, -height / 2).RotatedBy(rotation) * 1.1f;
					int num34 = 6;
					if (type == 773)
					{
						num34 = 59;
					}
					if (type == 903)
					{
						num34 = Dust.dustWater();
					}
					if (type == 904)
					{
						num34 = 35;
					}
					if (type == 905)
					{
						num34 = 152;
					}
					if (type == 910 || type == 911)
					{
						num34 = 0;
					}
					Dust dust8 = Dust.NewDustDirect(position, width, height, num34, 0f, 0f, 100);
					dust8.scale = 1f + (float)Main.rand.Next(5) * 0.1f;
					dust8.noGravity = true;
					dust8.position = base.Center + new Vector2(0f, -height / 2 - 6).RotatedBy(rotation) * 1.1f;
				}
				else if (type == 681)
				{
					Dust dust9 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100);
					dust9.scale = 1f + (float)Main.rand.Next(5) * 0.1f;
					dust9.noGravity = true;
					dust9.position = base.Center + new Vector2(6 * Math.Sign(velocity.X), -height / 2 - 6).RotatedBy(rotation) * 1.1f;
				}
			}
			ai[0] += 1f;
			if (type == 338 || type == 339 || type == 340 || type == 341 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
			{
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X) - 1.57f;
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790)
			{
				if (velocity != Vector2.Zero)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 135 || type == 138 || type == 141 || type == 144 || type == 778 || type == 782 || type == 795 || type == 798 || type == 801 || type == 786 || type == 789 || type == 792)
			{
				velocity.Y += 0.2f;
				velocity *= 0.97f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
				{
					velocity.Y = 0f;
				}
			}
			else if (type == 133 || type == 136 || type == 139 || type == 142 || type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 791)
			{
				if (ai[0] > 15f)
				{
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.95f;
					}
					velocity.Y += 0.2f;
				}
			}
			else if (((type == 30 || type == 397 || type == 517 || type == 681 || type == 588 || type == 779 || type == 783 || type == 862 || type == 863) && ai[0] > 10f) || (type != 30 && type != 397 && type != 517 && type != 588 && type != 779 && type != 783 && type != 862 && type != 863 && ai[0] > 5f))
			{
				ai[0] = 10f;
				if (velocity.Y == 0f && velocity.X != 0f)
				{
					velocity.X *= 0.97f;
					if (type == 29 || type == 470 || type == 637)
					{
						velocity.X *= 0.99f;
					}
					if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
					{
						velocity.X = 0f;
						netUpdate = true;
					}
				}
				velocity.Y += 0.2f;
				if (type == 911)
				{
					velocity.X = MathHelper.Clamp(velocity.X, -8f, 8f);
					velocity.Y = MathHelper.Clamp(velocity.Y, -8f, 8f);
				}
			}
			if (type == 519)
			{
				rotation += velocity.X * 0.06f;
			}
			else if (type != 134 && type != 137 && type != 140 && type != 143 && type != 303 && (type < 338 || type > 341) && type != 776 && type != 780 && type != 793 && type != 796 && type != 799 && type != 784 && type != 787 && type != 790 && type != 803 && type != 804 && type != 808 && type != 809 && type != 810 && type != 805 && type != 806 && type != 807 && type != 930)
			{
				rotation += velocity.X * 0.1f;
			}
		}

		private void AI_166_Dove()
		{
			bool num = type == 855;
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				frame = Main.rand.Next(4);
			}
			int num2 = 4;
			if (num)
			{
				num2 = 6;
			}
			if (++frameCounter > num2)
			{
				frameCounter = 0;
				if (++frame > 3)
				{
					frame = 0;
				}
			}
			spriteDirection = -1;
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
			}
			if (num)
			{
				float scaleFactor = 1f - (float)alpha / 255f;
				Vector3 rgb = new Vector3(1f, 0.6f, 0.1f) * scaleFactor;
				Lighting.AddLight(base.Center, rgb);
				rotation = velocity.X * 0.2f;
				if (velocity.Y < -1f)
				{
					velocity.Y *= 0.99f;
				}
				else
				{
					velocity.Y += (float)Math.Sin((float)(timeLeft % 200) / 200f * ((float)Math.PI * 2f)) * 0.25f;
					if (velocity.Y > 0.5f)
					{
						velocity.Y *= 0.8f;
					}
					velocity.Y = MathHelper.Clamp(velocity.Y, -1.5f, 1.5f);
				}
				float num3 = Main.WindForVisuals;
				if (num3 == 0f)
				{
					num3 = 0.1f;
				}
				velocity.X += 0.0525f * num3;
				velocity.X = MathHelper.Clamp(velocity.X, -2f, 2f);
			}
			else
			{
				rotation = velocity.X * 0.15f;
				velocity.Y -= 0.025f;
				if (velocity.Y < -3f)
				{
					velocity.Y = -3f;
				}
				velocity.X = MathHelper.Clamp(velocity.X, -5f, 5f);
			}
			if (timeLeft < 90)
			{
				alpha += 3;
			}
			if (alpha >= 255)
			{
				Kill();
			}
		}

		private void AI_161_RapierStabs()
		{
			Player player = Main.player[owner];
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			ai[0] += 1f;
			float num2 = (Opacity = Utils.GetLerpValue(0f, 7f, ai[0], clamped: true) * Utils.GetLerpValue(16f, 12f, ai[0], clamped: true));
			base.Center = player.RotatedRelativePoint(player.MountedCenter, reverseRotation: false, addGfxOffY: false) + velocity * (ai[0] - 1f);
			spriteDirection = ((!(Vector2.Dot(velocity, Vector2.UnitX) < 0f)) ? 1 : (-1));
			if (ai[0] >= 16f)
			{
				Kill();
			}
			else
			{
				player.heldProj = whoAmI;
			}
		}

		private void AI_165_Whip()
		{
			Player player = Main.player[owner];
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			ai[0] += 1f;
			GetWhipSettings(this, out var timeToFlyOut, out var _, out var _);
			base.Center = Main.GetPlayerArmPosition(this) + velocity * (ai[0] - 1f);
			spriteDirection = ((!(Vector2.Dot(velocity, Vector2.UnitX) < 0f)) ? 1 : (-1));
			if (ai[0] >= timeToFlyOut || player.itemAnimation == 0)
			{
				Kill();
				return;
			}
			player.heldProj = whoAmI;
			player.itemAnimation = player.itemAnimationMax - (int)(ai[0] / (float)MaxUpdates);
			player.itemTime = player.itemAnimation;
			if (ai[0] == (float)(int)(timeToFlyOut / 2f))
			{
				_whipPointsForCollision.Clear();
				FillWhipControlPoints(this, _whipPointsForCollision);
				Vector2 position = _whipPointsForCollision[_whipPointsForCollision.Count - 1];
				SoundEngine.PlaySound(SoundID.Item153, position);
			}
			switch (type)
			{
			case 848:
			{
				float t2 = ai[0] / timeToFlyOut;
				float num2 = Utils.GetLerpValue(0.1f, 0.7f, t2, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t2, clamped: true);
				if (num2 > 0.1f && Main.rand.NextFloat() < num2 / 2f)
				{
					_whipPointsForCollision.Clear();
					FillWhipControlPoints(this, _whipPointsForCollision);
					Rectangle r2 = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(30f, 30f));
					int num3 = Dust.NewDust(r2.TopLeft(), r2.Width, r2.Height, 172, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num3].noGravity = true;
					Main.dust[num3].velocity.X /= 2f;
					Main.dust[num3].velocity.Y /= 2f;
				}
				break;
			}
			case 847:
			{
				float t4 = ai[0] / timeToFlyOut;
				if (Utils.GetLerpValue(0.1f, 0.7f, t4, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t4, clamped: true) > 0.5f && Main.rand.Next(3) != 0)
				{
					_whipPointsForCollision.Clear();
					FillWhipControlPoints(this, _whipPointsForCollision);
					int num5 = Main.rand.Next(_whipPointsForCollision.Count - 10, _whipPointsForCollision.Count);
					Rectangle r4 = Utils.CenteredRectangle(_whipPointsForCollision[num5], new Vector2(30f, 30f));
					int num6 = 57;
					if (Main.rand.Next(3) == 0)
					{
						num6 = 43;
					}
					Dust dust4 = Dust.NewDustDirect(r4.TopLeft(), r4.Width, r4.Height, num6, 0f, 0f, 100, Color.White);
					dust4.position = _whipPointsForCollision[num5];
					dust4.fadeIn = 0.3f;
					Vector2 spinningpoint = _whipPointsForCollision[num5] - _whipPointsForCollision[num5 - 1];
					dust4.noGravity = true;
					dust4.velocity *= 0.5f;
					dust4.velocity += spinningpoint.RotatedBy((float)player.direction * ((float)Math.PI / 2f));
					dust4.velocity *= 0.5f;
				}
				break;
			}
			case 849:
			{
				float num8 = ai[0] / timeToFlyOut;
				Utils.GetLerpValue(0.1f, 0.7f, num8, clamped: true);
				Utils.GetLerpValue(0.9f, 0.7f, num8, clamped: true);
				if (num8 > 0.4f && Main.rand.Next(9) != 0)
				{
					_whipPointsForCollision.Clear();
					FillWhipControlPoints(this, _whipPointsForCollision);
					Rectangle r6 = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(30f, 30f));
					Vector2 vector = _whipPointsForCollision[_whipPointsForCollision.Count - 2].DirectionTo(_whipPointsForCollision[_whipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
					Dust dust7 = Dust.NewDustDirect(r6.TopLeft(), r6.Width, r6.Height, 191, 0f, 0f, 0, default(Color), 1.3f);
					dust7.noGravity = true;
					dust7.velocity += vector * 2f;
					if (Main.rand.Next(2) == 0)
					{
						ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.BlackLightningSmall, new ParticleOrchestraSettings
						{
							MovementVector = vector,
							PositionInWorld = r6.Center.ToVector2()
						}, owner);
					}
					Lighting.AddLight(r6.Center.ToVector2(), new Vector3(0.2f, 0f, 0.4f));
				}
				break;
			}
			case 915:
			{
				float t6 = ai[0] / timeToFlyOut;
				if (Utils.GetLerpValue(0.1f, 0.7f, t6, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t6, clamped: true) > 0.1f)
				{
					_whipPointsForCollision.Clear();
					FillWhipControlPoints(this, _whipPointsForCollision);
					Rectangle r7 = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(30f, 30f));
					Vector2 value4 = _whipPointsForCollision[_whipPointsForCollision.Count - 2].DirectionTo(_whipPointsForCollision[_whipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
					Dust dust8 = Dust.NewDustDirect(r7.TopLeft(), r7.Width, r7.Height, 267, 0f, 0f, 0, Main.hslToRgb(player.miscCounterNormalized * 9f % 1f, 1f, 0.5f), 1.3f);
					dust8.velocity *= Main.rand.NextFloat() * 0.8f;
					dust8.noGravity = true;
					dust8.scale = 0.9f + Main.rand.NextFloat() * 0.9f;
					dust8.fadeIn = Main.rand.NextFloat() * 0.9f;
					dust8.velocity += value4 * 2f;
					if (dust8.dustIndex != 6000)
					{
						Dust dust9 = Dust.CloneDust(dust8);
						dust9.scale /= 2f;
						dust9.fadeIn *= 0.85f;
						dust9.color = new Color(255, 255, 255, 255);
					}
				}
				break;
			}
			case 914:
			{
				float t3 = ai[0] / timeToFlyOut;
				float num4 = Utils.GetLerpValue(0.1f, 0.7f, t3, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t3, clamped: true);
				if (num4 > 0.1f && Main.rand.NextFloat() < num4 / 2f)
				{
					_whipPointsForCollision.Clear();
					FillWhipControlPoints(this, _whipPointsForCollision);
					Rectangle r3 = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(30f, 30f));
					Vector2 value2 = _whipPointsForCollision[_whipPointsForCollision.Count - 2].DirectionTo(_whipPointsForCollision[_whipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
					Dust dust3 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 39, 0f, 0f, 0, default(Color), 1.2f);
					dust3.noGravity = Main.rand.Next(3) == 0;
					dust3.velocity += value2 * 2f;
				}
				break;
			}
			case 912:
			{
				float t5 = ai[0] / timeToFlyOut;
				float num7 = Utils.GetLerpValue(0.1f, 0.7f, t5, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t5, clamped: true);
				if (!(num7 > 0.1f) || !(Main.rand.NextFloat() < num7 / 2f))
				{
					break;
				}
				_whipPointsForCollision.Clear();
				FillWhipControlPoints(this, _whipPointsForCollision);
				Rectangle r5 = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				Vector2 value3 = _whipPointsForCollision[_whipPointsForCollision.Count - 2].DirectionTo(_whipPointsForCollision[_whipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				for (int j = 0; j < 3; j++)
				{
					Dust dust5 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 16, 0f, 0f, 0, default(Color), 1.2f);
					dust5.noGravity = true;
					dust5.velocity += value3 * 2f;
				}
				for (int k = 0; k < 1; k++)
				{
					Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 13, 0f, 0f, 0, default(Color), 0.8f).velocity += value3 * 2f;
				}
				for (int l = 0; l < 3; l++)
				{
					if (Main.rand.Next(2) != 0)
					{
						Dust dust6 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 261, 0f, 0f, 0, Color.Transparent, 0.8f);
						dust6.velocity += value3 * 2f;
						dust6.velocity *= 0.3f;
						dust6.noGravity = true;
					}
				}
				Lighting.AddLight(r5.Center.ToVector2(), new Vector3(0.1f, 0.1f, 0.2f));
				break;
			}
			case 913:
			{
				float t = ai[0] / timeToFlyOut;
				float num = Utils.GetLerpValue(0.1f, 0.7f, t, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t, clamped: true);
				if (!(num > 0.1f) || !(Main.rand.NextFloat() < num))
				{
					break;
				}
				_whipPointsForCollision.Clear();
				FillWhipControlPoints(this, _whipPointsForCollision);
				Rectangle r = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(20f, 20f));
				Vector2 value = _whipPointsForCollision[_whipPointsForCollision.Count - 2].DirectionTo(_whipPointsForCollision[_whipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				for (int i = 0; i < 3; i++)
				{
					if (Main.rand.Next(3) != 0)
					{
						continue;
					}
					if (Main.rand.Next(7) == 0)
					{
						Dust dust = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 31);
						dust.velocity.X /= 2f;
						dust.velocity.Y /= 2f;
						dust.velocity += value * 2f;
						dust.fadeIn = 1f + Main.rand.NextFloat() * 0.6f;
						dust.noGravity = true;
						continue;
					}
					Dust dust2 = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 6, 0f, 0f, 0, default(Color), 1.2f);
					dust2.velocity += value * 2f;
					if (Main.rand.Next(3) != 0)
					{
						dust2.fadeIn = 0.7f + Main.rand.NextFloat() * 0.9f;
						dust2.scale = 0.6f;
						dust2.noGravity = true;
					}
				}
				break;
			}
			}
		}

		public static void FillWhipControlPoints(Projectile proj, List<Vector2> controlPoints)
		{
			GetWhipSettings(proj, out var timeToFlyOut, out var segments, out var rangeMultiplier);
			float num = proj.ai[0] / timeToFlyOut;
			float num2 = 0.5f;
			float num3 = 1f + num2;
			float num4 = (float)Math.PI * 10f * (1f - num * num3) * (float)(-proj.spriteDirection) / (float)segments;
			float num5 = num * num3;
			float num6 = 0f;
			if (num5 > 1f)
			{
				num6 = (num5 - 1f) / num2;
				num5 = MathHelper.Lerp(1f, 0f, num6);
			}
			float num7 = proj.ai[0] - 1f;
			num7 = (float)(Main.player[proj.owner].HeldItem.useAnimation * 2) * num;
			float num8 = proj.velocity.Length() * num7 * num5 * rangeMultiplier / (float)segments;
			float num9 = 1f;
			Vector2 playerArmPosition = Main.GetPlayerArmPosition(proj);
			Vector2 vector = playerArmPosition;
			float num10 = 0f - (float)Math.PI / 2f;
			Vector2 value = vector;
			float num11 = 0f + (float)Math.PI / 2f + (float)Math.PI / 2f * (float)proj.spriteDirection;
			Vector2 value2 = vector;
			float num12 = 0f + (float)Math.PI / 2f;
			controlPoints.Add(playerArmPosition);
			for (int i = 0; i < segments; i++)
			{
				float num13 = (float)i / (float)segments;
				float num14 = num4 * num13 * num9;
				Vector2 vector2 = vector + num10.ToRotationVector2() * num8;
				Vector2 vector3 = value2 + num12.ToRotationVector2() * (num8 * 2f);
				Vector2 vector4 = value + num11.ToRotationVector2() * (num8 * 2f);
				float num15 = 1f - num5;
				float num16 = 1f - num15 * num15;
				Vector2 value3 = Vector2.Lerp(vector3, vector2, num16 * 0.9f + 0.1f);
				Vector2 value4 = Vector2.Lerp(vector4, value3, num16 * 0.7f + 0.3f);
				Vector2 spinningpoint = playerArmPosition + (value4 - playerArmPosition) * new Vector2(1f, num3);
				float num17 = num6;
				num17 *= num17;
				Vector2 item = spinningpoint.RotatedBy(proj.rotation + 4.712389f * num17 * (float)proj.spriteDirection, playerArmPosition);
				controlPoints.Add(item);
				num10 += num14;
				num12 += num14;
				num11 += num14;
				vector = vector2;
				value2 = vector3;
				value = vector4;
			}
		}

		public static void GetWhipSettings(Projectile proj, out float timeToFlyOut, out int segments, out float rangeMultiplier)
		{
			timeToFlyOut = Main.player[proj.owner].itemAnimationMax * proj.MaxUpdates;
			segments = 20;
			rangeMultiplier = 1f;
			switch (proj.type)
			{
			case 913:
				rangeMultiplier *= 1.2f;
				break;
			case 912:
				rangeMultiplier *= 1.3f;
				break;
			case 841:
				rangeMultiplier *= 0.75f;
				break;
			case 914:
				rangeMultiplier *= 0.9f;
				break;
			case 847:
				segments = 20;
				rangeMultiplier *= 1.2f;
				break;
			case 849:
				segments = 30;
				rangeMultiplier = 1.2f;
				break;
			case 915:
				segments = 40;
				rangeMultiplier = 1.5f;
				break;
			case 848:
				rangeMultiplier = 0.7f;
				break;
			}
		}

		private void AI_160_Kites()
		{
			Player player = Main.player[owner];
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
			timeLeft = 60;
			bool flag = false;
			if (player.CCed || player.noItems)
			{
				flag = true;
			}
			else if (player.inventory[player.selectedItem].shoot != type)
			{
				flag = true;
			}
			else if (player.pulley)
			{
				flag = true;
			}
			else if (player.dead)
			{
				flag = true;
			}
			if (!flag)
			{
				flag = (player.Center - base.Center).Length() > 2000f;
			}
			if (flag)
			{
				Kill();
				return;
			}
			float num = 4f;
			float num2 = 500f;
			float num3 = num2 / 2f;
			if (owner == Main.myPlayer && extraUpdates == 0)
			{
				float num4 = ai[0];
				if (ai[0] == 0f)
				{
					ai[0] = num3;
				}
				float num5 = ai[0];
				if (Main.mouseRight)
				{
					num5 -= 5f;
				}
				if (Main.mouseLeft)
				{
					num5 += 5f;
				}
				ai[0] = MathHelper.Clamp(num5, num, num2);
				if (num4 != num5)
				{
					netUpdate = true;
				}
			}
			if (numUpdates == 1)
			{
				extraUpdates = 0;
			}
			int num6 = 0;
			float cloudAlpha = Main.cloudAlpha;
			float num7 = 0f;
			if (WorldGen.InAPlaceWithWind(position, width, height))
			{
				num7 = Main.WindForVisuals;
			}
			float num8 = Utils.GetLerpValue(0.2f, 0.5f, Math.Abs(num7), clamped: true) * 0.5f;
			switch (num6)
			{
			case 0:
			{
				Vector2 mouseWorld = Main.MouseWorld;
				mouseWorld = base.Center;
				mouseWorld += new Vector2(num7, (float)Math.Sin(Main.GlobalTimeWrappedHourly) + cloudAlpha * 5f) * 25f;
				Vector2 v = mouseWorld - base.Center;
				v = v.SafeNormalize(Vector2.Zero) * (3f + cloudAlpha * 7f);
				if (num8 == 0f)
				{
					v = velocity;
				}
				float num9 = Distance(mouseWorld);
				float lerpValue = Utils.GetLerpValue(5f, 10f, num9, clamped: true);
				float y = velocity.Y;
				if (num9 > 10f)
				{
					velocity = Vector2.Lerp(velocity, v, 0.075f * lerpValue);
				}
				velocity.Y = y;
				velocity.Y -= num8;
				velocity.Y += 0.02f + num8 * 0.25f;
				velocity.Y = MathHelper.Clamp(velocity.Y, -2f, 2f);
				if (base.Center.Y + velocity.Y < mouseWorld.Y)
				{
					velocity.Y = MathHelper.Lerp(velocity.Y, velocity.Y + num8 + 0.01f, 0.75f);
				}
				velocity.X *= 0.98f;
				float num10 = Distance(vector);
				float num11 = ai[0];
				if (num10 > num11)
				{
					Vector2 vector2 = DirectionTo(vector);
					float scaleFactor = num10 - num11;
					base.Center += vector2 * scaleFactor;
					bool num12 = Vector2.Dot(vector2, Vector2.UnitY) < 0.8f || num8 > 0f;
					velocity.Y += vector2.Y * 0.05f;
					if (num12)
					{
						velocity.Y -= 0.15f;
					}
					velocity.X += vector2.X * 0.2f;
					if (num11 == num && owner == Main.myPlayer)
					{
						Kill();
						return;
					}
				}
				break;
			}
			case 1:
			{
				Vector2 value = DirectionTo(vector);
				velocity = Vector2.Lerp(velocity, value * 16f, 1f);
				if (Distance(vector) < 10f && owner == Main.myPlayer)
				{
					Kill();
					return;
				}
				break;
			}
			}
			timeLeft = 2;
			Vector2 vector3 = base.Center - vector;
			int dir = ((vector3.X > 0f) ? 1 : (-1));
			if (Math.Abs(vector3.X) > Math.Abs(vector3.Y) / 2f)
			{
				player.ChangeDir(dir);
			}
			Vector2 value2 = DirectionTo(vector).SafeNormalize(Vector2.Zero);
			if (num8 == 0f && velocity.Y > -0.02f)
			{
				rotation *= 0.95f;
			}
			else
			{
				float num13 = (-value2).ToRotation() + (float)Math.PI / 4f;
				if (spriteDirection == -1)
				{
					num13 -= (float)Math.PI / 2f * (float)player.direction;
				}
				rotation = num13 + velocity.X * 0.05f;
			}
			float num14 = velocity.Length();
			switch (type)
			{
			case 771:
			case 822:
			case 823:
			case 827:
			case 830:
			case 838:
			case 843:
			case 844:
			case 845:
			case 846:
			case 850:
			case 852:
				frame = 0;
				break;
			case 828:
			case 829:
				if (num14 < 6f)
				{
					frame = 1;
				}
				else
				{
					frame = 0;
				}
				break;
			case 826:
				frame = (int)ai[1];
				break;
			case 824:
			case 839:
			case 840:
			case 853:
				if (num8 < 0.15f)
				{
					frame = 0;
					break;
				}
				frameCounter++;
				if ((float)frameCounter > (1f - num8) * 10f)
				{
					frameCounter = 0;
					frame = Main.rand.Next(4);
				}
				break;
			default:
				if (num14 < 3f)
				{
					frame = 0;
				}
				else if (num14 < 5f)
				{
					frame = 1;
				}
				else if (num14 < 7f)
				{
					frame = 2;
				}
				else
				{
					frame = 3;
				}
				break;
			}
			spriteDirection = player.direction;
		}

		private void AI_159_PaperAirplanes()
		{
			if (ai[1] == 0f)
			{
				direction = ((velocity.X > 0f) ? 1 : (-1));
				rotation = velocity.ToRotation();
				ai[1] = 1f;
				ai[0] = -Main.rand.Next(30, 80);
				netUpdate = true;
			}
			if (wet && owner == Main.myPlayer)
			{
				Kill();
			}
			ai[0] += 1f;
			Vector2 vector = rotation.ToRotationVector2() * 8f;
			float y = (float)Math.Sin((float)Math.PI * 2f * (float)(Main.timeForVisualEffects % 90.0 / 90.0)) * (float)direction * Main.WindForVisuals;
			Vector2 v = vector + new Vector2(Main.WindForVisuals, y);
			_ = Vector2.UnitX * direction;
			bool flag = direction == Math.Sign(Main.WindForVisuals) && velocity.Length() > 3f;
			bool num = ai[0] >= 20f && ai[0] <= 69f;
			if (ai[0] == 70f)
			{
				ai[0] = -Main.rand.Next(120, 600);
			}
			bool num2 = num && flag;
			if (num2)
			{
				float lerpValue = Utils.GetLerpValue(0f, 30f, ai[0], clamped: true);
				v = vector.RotatedBy((float)(-direction) * ((float)Math.PI * 2f) * 0.02f * lerpValue);
			}
			velocity = v.SafeNormalize(Vector2.UnitY) * velocity.Length();
			if (!num2)
			{
				float num3 = MathHelper.Lerp(0.15f, 0.05f, Math.Abs(Main.WindForVisuals));
				if (timeLeft % 40 < 20)
				{
					velocity.Y -= num3;
				}
				else
				{
					velocity.Y += num3;
				}
				if (velocity.Y < -2f)
				{
					velocity.Y = -2f;
				}
				if (velocity.Y > 2f)
				{
					velocity.Y = 2f;
				}
				velocity.X = MathHelper.Clamp(velocity.X + Main.WindForVisuals * 0.006f, -6f, 6f);
				if (velocity.X * oldVelocity.X < 0f)
				{
					direction *= -1;
					ai[0] = -Main.rand.Next(120, 300);
					netUpdate = true;
				}
			}
			rotation = velocity.ToRotation();
			spriteDirection = direction;
		}

		private void AI_158_BabyBird()
		{
			Player player = Main.player[owner];
			if (type == 759)
			{
				if (player.dead)
				{
					player.babyBird = false;
				}
				if (player.babyBird)
				{
					timeLeft = 2;
				}
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type] - 1)
					{
						frame = 0;
					}
				}
			}
			float num = 6f;
			float num2 = 8f;
			int num3 = 800;
			float num4 = 150f;
			int attackTarget = -1;
			Minion_FindTargetInRange(num3, attackTarget, skipIfCannotHitWithOwnBody: false);
			if (attackTarget != -1)
			{
				NPC nPC = Main.npc[attackTarget];
				if (player.Distance(nPC.Center) > (float)num3)
				{
					attackTarget = -1;
				}
			}
			if (attackTarget != -1)
			{
				if (!Collision.SolidCollision(position, width, height))
				{
					tileCollide = true;
				}
				NPC nPC2 = Main.npc[attackTarget];
				float num5 = Distance(nPC2.Center);
				Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
				Rectangle value = new Rectangle((int)nPC2.position.X, (int)nPC2.position.Y, nPC2.width, nPC2.height);
				if (rectangle.Intersects(value))
				{
					tileCollide = false;
					if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num2)
					{
						velocity *= 1.1f;
					}
					if (velocity.Length() > num2)
					{
						velocity *= num / velocity.Length();
					}
				}
				else if (num5 > num4)
				{
					Vector2 value2 = DirectionTo(nPC2.Center);
					velocity = Vector2.Lerp(velocity, value2 * num, 0.075f);
				}
				else
				{
					tileCollide = false;
					Vector2 vector = DirectionTo(nPC2.Center);
					velocity += new Vector2(Math.Sign(vector.X), Math.Sign(vector.Y)) * 0.3f;
					if (velocity.Length() > num2)
					{
						velocity *= num2 / velocity.Length();
					}
				}
				float num6 = 0.025f;
				float num7 = width * 3;
				for (int i = 0; i < 1000; i++)
				{
					if (i != whoAmI && Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].type == type && Math.Abs(position.X - Main.projectile[i].position.X) + Math.Abs(position.Y - Main.projectile[i].position.Y) < num7)
					{
						if (position.X < Main.projectile[i].position.X)
						{
							velocity.X -= num6;
						}
						else
						{
							velocity.X += num6;
						}
						if (position.Y < Main.projectile[i].position.Y)
						{
							velocity.Y -= num6;
						}
						else
						{
							velocity.Y += num6;
						}
					}
				}
				rotation = velocity.X * 0.1f;
				direction = ((velocity.X > 0f) ? 1 : (-1));
				spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
				return;
			}
			tileCollide = false;
			List<int> ai158_blacklistedTargets = _ai158_blacklistedTargets;
			ai158_blacklistedTargets.Clear();
			AI_GetMyGroupIndexAndFillBlackList(ai158_blacklistedTargets, out var index, out var _);
			localAI[0] = index;
			Vector2 vector2 = AI_158_GetHomeLocation(player, index);
			float num8 = Distance(vector2);
			bool flag = player.gravDir > 0f && player.fullRotation == 0f && player.headRotation == 0f;
			if (num8 > 2000f)
			{
				base.Center = vector2;
				frame = Main.projFrames[type] - 1;
				frameCounter = 0;
				velocity = Vector2.Zero;
				direction = (spriteDirection = player.direction);
				rotation = 0f;
			}
			else if (num8 > 40f)
			{
				float num9 = num + num8 * 0.006f;
				Vector2 value3 = DirectionTo(vector2);
				value3 *= MathHelper.Lerp(1f, 5f, Utils.GetLerpValue(40f, 800f, num8, clamped: true));
				velocity = Vector2.Lerp(velocity, value3 * num9, 0.025f);
				if (velocity.Length() > num9)
				{
					velocity *= num9 / velocity.Length();
				}
				float num10 = 0.05f;
				float num11 = width;
				for (int j = 0; j < 1000; j++)
				{
					if (j != whoAmI && Main.projectile[j].active && Main.projectile[j].owner == owner && Main.projectile[j].type == type && Math.Abs(position.X - Main.projectile[j].position.X) + Math.Abs(position.Y - Main.projectile[j].position.Y) < num11)
					{
						if (position.X < Main.projectile[j].position.X)
						{
							velocity.X -= num10;
						}
						else
						{
							velocity.X += num10;
						}
						if (position.Y < Main.projectile[j].position.Y)
						{
							velocity.Y -= num10;
						}
						else
						{
							velocity.Y += num10;
						}
					}
				}
				rotation = velocity.X * 0.04f;
				direction = ((velocity.X > 0f) ? 1 : (-1));
				spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
			}
			else if (num8 > 8f + player.velocity.Length())
			{
				Vector2 vector3 = DirectionTo(vector2);
				velocity += new Vector2(Math.Sign(vector3.X), Math.Sign(vector3.Y)) * 0.05f;
				if (velocity.Length() > num)
				{
					velocity *= num / velocity.Length();
				}
				rotation = velocity.X * 0.1f;
				direction = ((velocity.X > 0f) ? 1 : (-1));
				spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
			}
			else if (flag)
			{
				base.Center = vector2;
				frame = Main.projFrames[type] - 1;
				frameCounter = 0;
				velocity = Vector2.Zero;
				direction = (spriteDirection = player.direction);
				rotation = 0f;
			}
		}

		public static Vector2 AI_158_GetHomeLocation(Player master, int stackedIndex)
		{
			int num = master.bodyFrame.Height;
			if (num == 0)
			{
				num = 1;
			}
			Vector2 vector = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num];
			vector.Y -= 2f;
			switch (stackedIndex % 6)
			{
			case 1:
				vector += new Vector2(master.direction * 8, master.gravDir * -2f);
				break;
			case 2:
				vector += new Vector2(master.direction * -10, master.gravDir * -2f);
				break;
			case 4:
				vector += new Vector2(master.direction * 10, master.gravDir * -10f);
				break;
			case 5:
				vector += new Vector2(master.direction * -12, master.gravDir * -10f);
				break;
			case 3:
			{
				Vector2 value = vector;
				_ = master.direction;
				vector = value + new Vector2(0f, master.gravDir * -10f);
				break;
			}
			}
			vector += new Vector2(0f, master.gravDir * -16f) * (stackedIndex / 6);
			Vector2 value2 = master.RotatedRelativePoint(master.MountedCenter);
			_ = master.direction;
			return (value2 + new Vector2(0f, master.gravDir * -21f) + vector);
		}

		private void Minion_FindTargetInRange(int startAttackRange, int attackTarget, bool skipIfCannotHitWithOwnBody, Func<Entity, int, bool> customEliminationCheck = null)
		{
			float num = startAttackRange;
			float num2 = num;
			float num3 = num;
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this) && IsInRangeOfMeOrMyOwner(ownerMinionAttackTargetNPC, num, out var _, out var _, out var _))
			{
				attackTarget = ownerMinionAttackTargetNPC.whoAmI;
			}
			else
			{
				if (attackTarget >= 0)
				{
					return;
				}
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.CanBeChasedBy(this) && IsInRangeOfMeOrMyOwner(nPC, num, out var myDistance2, out var playerDistance2, out var closerIsMe2) && (!skipIfCannotHitWithOwnBody || CanHitWithOwnBody(nPC)) && (customEliminationCheck == null || customEliminationCheck(nPC, attackTarget)))
					{
						attackTarget = i;
						num = (closerIsMe2 ? myDistance2 : playerDistance2);
						if (num2 > myDistance2)
						{
							num2 = myDistance2;
						}
						if (num3 > playerDistance2)
						{
							num3 = playerDistance2;
						}
						num = Math.Max(num2, num3);
					}
				}
			}
		}

		private bool AI_067_CustomEliminationCheck_Pirates(Entity otherEntity, int currentTarget)
		{
			return true;
		}

		private bool AI_067_TigerSpecialAttack()
		{
			List<NPC> list = new List<NPC>();
			Vector2 center = Main.player[owner].Center;
			Rectangle value = Utils.CenteredRectangle(center, new Vector2(1600f, 800f));
			int num = Main.player[owner].ownedProjectileCounts[831] + 1;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && nPC.Hitbox.Intersects(value))
				{
					list.Add(nPC);
				}
			}
			if (list.Count == 0)
			{
				return false;
			}
			NPC nPC2 = list[0];
			for (int j = 1; j < list.Count; j++)
			{
				if (Vector2.Distance(nPC2.Center, center) > Vector2.Distance(list[j].Center, center))
				{
					nPC2 = list[j];
				}
			}
			list.Remove(nPC2);
			NPC nPC3 = null;
			if (list.Count > 0)
			{
				nPC3 = list[0];
				for (int k = 1; k < list.Count; k++)
				{
					if (Distance(nPC3.Center) > Distance(list[k].Center))
					{
						nPC3 = list[k];
					}
				}
				list.Remove(nPC3);
			}
			List<Vector2> list2 = new List<Vector2>();
			if (nPC3 != null)
			{
				list2.Add(nPC3.Center);
			}
			int num2 = 0;
			while (list.Count > 0 && list2.Count < num - 1)
			{
				int index = Main.rand.Next(list.Count);
				Vector2 value2 = list[index].velocity * 4f * (num2 + 1);
				list2.Add(list[index].Center + value2);
				list.RemoveAt(index);
				num2++;
			}
			if (nPC2 != null)
			{
				list2.Add(nPC2.Center);
			}
			Vector2 vector = base.Center;
			float num3 = Math.Min(20, 30 / list2.Count);
			float num4 = 0f;
			for (int l = 0; l < list2.Count; l++)
			{
				float num5 = 20f;
				Vector2 vector2 = list2[l];
				vector2.X += ((vector.X < vector2.X) ? num5 : (0f - num5));
				Vector2 velocity = vector2 - vector;
				int num6 = (int)Math.Min(num3, 4.0 + Math.Ceiling(velocity.Length() / 50f));
				if (num6 < 5)
				{
					num6 = 5;
				}
				NewProjectile(vector, velocity, 818, damage, 0f, owner, (0f - num4) * 4f, num6 * 4);
				vector = vector2;
				num4 += (float)num6;
			}
			base.Center = vector;
			ai[0] = 4f;
			ai[1] = num4;
			netUpdate = true;
			return true;
		}

		private void AI_067_FreakingPirates()
		{
			Player player = Main.player[owner];
			if (!player.active)
			{
				active = false;
				return;
			}
			bool flag = type == 393 || type == 394 || type == 395;
			bool flag2 = type == 758;
			bool flag3 = type == 833 || type == 834 || type == 835;
			bool flag4 = type == 834 || type == 835;
			int num = 450;
			float num2 = 500f;
			float num3 = 300f;
			if (flag)
			{
				if (player.dead)
				{
					player.pirateMinion = false;
				}
				if (player.pirateMinion)
				{
					timeLeft = 2;
				}
				num = 800;
			}
			if (flag3)
			{
				if (player.dead)
				{
					player.stormTiger = false;
				}
				if (player.stormTiger)
				{
					timeLeft = 2;
				}
				num = 800;
				if (ai[0] != 4f)
				{
					if (velocity != Vector2.Zero && Main.rand.Next(18) == 0)
					{
						Dust obj = Main.dust[Dust.NewDust(position, width, height, 269)];
						obj.fadeIn = 0.5f;
						obj.scale = 0.3f;
						obj.noLight = true;
						obj.velocity += velocity * 0.005f;
					}
					if (type == 833)
					{
						Lighting.AddLight(base.Center, Vector3.One * 0.5f);
					}
					if (type == 834)
					{
						Lighting.AddLight(base.Center, Vector3.One * 0.8f);
					}
					if (type == 835)
					{
						Lighting.AddLight(base.Center, Color.Lerp(Main.OurFavoriteColor, Color.White, 0.8f).ToVector3() * 1f);
					}
				}
				if (owner == Main.myPlayer)
				{
					if (localAI[0] <= 0f)
					{
						int num4 = type switch
						{
							834 => 300, 
							835 => 240, 
							_ => 360, 
						};
						if (damage != 0)
						{
							bool flag5 = AI_067_TigerSpecialAttack();
							localAI[0] = (flag5 ? num4 : 10);
						}
					}
					else
					{
						localAI[0] -= 1f;
					}
				}
			}
			if (flag2)
			{
				if (player.dead)
				{
					player.vampireFrog = false;
				}
				if (player.vampireFrog)
				{
					timeLeft = 2;
				}
				num = 800;
			}
			if (type == 500)
			{
				num2 = 200f;
				if (player.dead)
				{
					player.crimsonHeart = false;
				}
				if (player.crimsonHeart)
				{
					timeLeft = 2;
				}
			}
			if (type == 653)
			{
				num2 = 300f;
				if (player.dead)
				{
					player.companionCube = false;
				}
				if (player.companionCube)
				{
					timeLeft = 2;
				}
			}
			if (flag3 && ai[0] == 4f)
			{
				velocity = Vector2.Zero;
				frame = 9;
				if (flag4)
				{
					frame = 11;
				}
				ai[1] -= 1f;
				if (!(ai[1] <= 0f))
				{
					return;
				}
				ai[0] = 0f;
				ai[1] = 0f;
				netUpdate = true;
			}
			Vector2 vector = player.Center;
			if (flag)
			{
				vector.X -= (15 + player.width / 2) * player.direction;
				vector.X -= minionPos * 20 * player.direction;
			}
			else if (flag3)
			{
				vector.X -= (15 + player.width / 2) * player.direction;
				vector.X -= minionPos * 40 * player.direction;
			}
			else if (flag2)
			{
				vector.X -= (35 + player.width / 2) * player.direction;
				vector.X -= minionPos * 40 * player.direction;
			}
			else if (type == 500)
			{
				vector.X -= (15 + player.width / 2) * player.direction;
				vector.X -= 40 * player.direction;
			}
			else if (type == 653)
			{
				vector.X = player.Center.X;
			}
			if (type == 500)
			{
				Lighting.AddLight(base.Center, 0.9f, 0.1f, 0.3f);
				int num5 = 6;
				if (frame == 0 || frame == 2)
				{
					num5 = 12;
				}
				if (++frameCounter >= num5)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				rotation += velocity.X / 20f;
				Vector2 vector2 = (-Vector2.UnitY).RotatedBy(rotation).RotatedBy((float)direction * 0.2f);
				int num6 = Dust.NewDust(base.Center + vector2 * 10f - new Vector2(4f), 0, 0, 5, vector2.X, vector2.Y, 0, Color.Transparent);
				Main.dust[num6].scale = 1f;
				Main.dust[num6].velocity = vector2.RotatedByRandom(0.78539818525314331) * 3.5f;
				Main.dust[num6].noGravity = true;
				Main.dust[num6].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
			}
			if (type == 653)
			{
				rotation += velocity.X / 20f;
				if (owner >= 0 && owner < 255)
				{
					_CompanionCubeScreamCooldown[owner] -= 1f;
					if (_CompanionCubeScreamCooldown[owner] < 0f)
					{
						_CompanionCubeScreamCooldown[owner] = 0f;
					}
				}
				Tile tileSafely = Framing.GetTileSafely(base.Center);
				if (tileSafely.liquid > 0 && tileSafely.lava())
				{
					localAI[0] += 1f;
				}
				else
				{
					localAI[0] -= 1f;
				}
				localAI[0] = MathHelper.Clamp(localAI[0], 0f, 20f);
				if (localAI[0] >= 20f)
				{
					if (_CompanionCubeScreamCooldown[owner] == 0f)
					{
						_CompanionCubeScreamCooldown[owner] = 3600f;
						SoundEngine.PlaySound((Main.rand.Next(10) == 0) ? SoundID.NPCDeath61 : SoundID.NPCDeath59, position);
					}
					Kill();
				}
				Vector3 vector3 = Lighting.GetColor((int)base.Center.X / 16, (int)base.Center.Y / 16).ToVector3();
				Vector3 vector4 = Lighting.GetColor((int)player.Center.X / 16, (int)player.Center.Y / 16).ToVector3();
				if (vector3.Length() < 0.15f && vector4.Length() < 0.15f)
				{
					localAI[1] += 1f;
				}
				else if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				localAI[1] = MathHelper.Clamp(localAI[1], -3600f, 120f);
				if (localAI[1] > (float)Main.rand.Next(30, 120) && !player.immune && player.velocity == Vector2.Zero)
				{
					if (Main.rand.Next(5) == 0)
					{
						SoundEngine.PlaySound(SoundID.Item16, base.Center);
						localAI[1] = -600f;
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item1, base.Center);
						player.Hurt(PlayerDeathReason.ByOther(6), 3, 0);
						player.immune = false;
						player.immuneTime = 0;
						localAI[1] = -300 + Main.rand.Next(30) * -10;
					}
				}
			}
			bool flag6 = true;
			if (type == 500 || type == 653)
			{
				flag6 = false;
			}
			shouldFallThrough = player.position.Y + (float)player.height - 12f > position.Y + (float)height;
			friendly = false;
			int num7 = 0;
			int num8 = 15;
			int attackTarget = -1;
			bool flag7 = true;
			if (flag2)
			{
				num8 = 20;
				num7 = 60;
			}
			if (flag3)
			{
				flag7 = false;
				friendly = true;
				originalDamage = player.highestStormTigerGemOriginalDamage;
			}
			if (ai[0] == 0f && flag6)
			{
				Minion_FindTargetInRange(num, attackTarget, skipIfCannotHitWithOwnBody: true, AI_067_CustomEliminationCheck_Pirates);
			}
			if (ai[0] == 1f)
			{
				tileCollide = false;
				float num9 = 0.2f;
				float num10 = 10f;
				int num11 = 200;
				if (num10 < Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y))
				{
					num10 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
				}
				Vector2 vector5 = player.Center - base.Center;
				float num12 = vector5.Length();
				if (num12 > 2000f)
				{
					position = player.Center - new Vector2(width, height) / 2f;
				}
				if (num12 < (float)num11 && player.velocity.Y == 0f && position.Y + (float)height <= player.position.Y + (float)player.height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					netUpdate = true;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (!(num12 < 60f))
				{
					vector5.Normalize();
					vector5 *= num10;
					if (velocity.X < vector5.X)
					{
						velocity.X += num9;
						if (velocity.X < 0f)
						{
							velocity.X += num9 * 1.5f;
						}
					}
					if (velocity.X > vector5.X)
					{
						velocity.X -= num9;
						if (velocity.X > 0f)
						{
							velocity.X -= num9 * 1.5f;
						}
					}
					if (velocity.Y < vector5.Y)
					{
						velocity.Y += num9;
						if (velocity.Y < 0f)
						{
							velocity.Y += num9 * 1.5f;
						}
					}
					if (velocity.Y > vector5.Y)
					{
						velocity.Y -= num9;
						if (velocity.Y > 0f)
						{
							velocity.Y -= num9 * 1.5f;
						}
					}
				}
				if (velocity.X != 0f)
				{
					spriteDirection = Math.Sign(velocity.X);
				}
				if (flag)
				{
					frameCounter++;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if ((frame < 10) | (frame > 13))
					{
						frame = 10;
					}
					rotation = velocity.X * 0.1f;
				}
				if (flag2)
				{
					int num13 = 3;
					if (++frameCounter >= num13 * 4)
					{
						frameCounter = 0;
					}
					frame = 14 + frameCounter / num13;
					rotation = velocity.X * 0.15f;
				}
				if (flag3)
				{
					frame = 8;
					if (flag4)
					{
						frame = 10;
					}
					rotation += 0.6f * (float)spriteDirection;
				}
			}
			if (ai[0] == 2f && ai[1] < 0f)
			{
				friendly = false;
				ai[1] += 1f;
				if (num8 >= 0)
				{
					ai[1] = 0f;
					ai[0] = 0f;
					netUpdate = true;
					return;
				}
			}
			else if (ai[0] == 2f)
			{
				spriteDirection = direction;
				rotation = 0f;
				if (flag)
				{
					friendly = true;
					frame = 4 + (int)((float)num8 - ai[1]) / (num8 / 3);
					if (velocity.Y != 0f)
					{
						frame += 3;
					}
				}
				if (flag2)
				{
					float num14 = ((float)num8 - ai[1]) / (float)num8;
					if ((double)num14 > 0.25 && (double)num14 < 0.75)
					{
						friendly = true;
					}
					int num15 = (int)(num14 * 5f);
					if (num15 > 2)
					{
						num15 = 4 - num15;
					}
					if (velocity.Y != 0f)
					{
						frame = 21 + num15;
					}
					else
					{
						frame = 18 + num15;
					}
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.8f;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
				ai[1] -= 1f;
				if (ai[1] <= 0f)
				{
					if (num7 <= 0)
					{
						ai[1] = 0f;
						ai[0] = 0f;
						netUpdate = true;
						return;
					}
					ai[1] = -num7;
				}
			}
			if (attackTarget >= 0)
			{
				float maxDistance = num;
				float num16 = 20f;
				if (flag2)
				{
					num16 = 50f;
				}
				NPC nPC = Main.npc[attackTarget];
				Vector2 center = nPC.Center;
				vector = center;
				if (IsInRangeOfMeOrMyOwner(nPC, maxDistance, out var _, out var _, out var _))
				{
					shouldFallThrough = nPC.Center.Y > base.Bottom.Y;
					bool flag8 = velocity.Y == 0f;
					if (wet && velocity.Y > 0f && !shouldFallThrough)
					{
						flag8 = true;
					}
					if (center.Y < base.Center.Y - 30f && flag8)
					{
						float num17 = (center.Y - base.Center.Y) * -1f;
						float num18 = 0.4f;
						float num19 = (float)Math.Sqrt(num17 * 2f * num18);
						if (num19 > 26f)
						{
							num19 = 26f;
						}
						velocity.Y = 0f - num19;
					}
					if (flag7 && Vector2.Distance(base.Center, vector) < num16)
					{
						if (velocity.Length() > 10f)
						{
							velocity /= velocity.Length() / 10f;
						}
						ai[0] = 2f;
						ai[1] = num8;
						netUpdate = true;
						direction = ((center.X - base.Center.X > 0f) ? 1 : (-1));
					}
					if (flag3 && base.Hitbox.Intersects(nPC.Hitbox) && velocity.Y >= 0f)
					{
						velocity.Y = -4f;
						velocity.X = direction * 10;
					}
				}
				if (flag2)
				{
					int num20 = 1;
					if (center.X - base.Center.X < 0f)
					{
						num20 = -1;
					}
					vector.X += 20 * -num20;
				}
			}
			if (ai[0] == 0f && attackTarget < 0)
			{
				if (Main.player[owner].rocketDelay2 > 0)
				{
					ai[0] = 1f;
					netUpdate = true;
				}
				Vector2 vector6 = player.Center - base.Center;
				if (vector6.Length() > 2000f)
				{
					position = player.Center - new Vector2(width, height) / 2f;
				}
				else if (vector6.Length() > num2 || Math.Abs(vector6.Y) > num3)
				{
					ai[0] = 1f;
					netUpdate = true;
					if (velocity.Y > 0f && vector6.Y < 0f)
					{
						velocity.Y = 0f;
					}
					if (velocity.Y < 0f && vector6.Y > 0f)
					{
						velocity.Y = 0f;
					}
				}
			}
			if (ai[0] == 0f)
			{
				if (attackTarget < 0)
				{
					if (Distance(player.Center) > 60f && Distance(vector) > 60f && Math.Sign(vector.X - player.Center.X) != Math.Sign(base.Center.X - player.Center.X))
					{
						vector = player.Center;
					}
					Rectangle r = Utils.CenteredRectangle(vector, base.Size);
					for (int i = 0; i < 20; i++)
					{
						if (Collision.SolidCollision(r.TopLeft(), r.Width, r.Height))
						{
							break;
						}
						r.Y += 16;
						vector.Y += 16f;
					}
					Vector2 value = Collision.TileCollision(player.Center - base.Size / 2f, vector - player.Center, width, height);
					vector = player.Center - base.Size / 2f + value;
					if (Distance(vector) < 32f)
					{
						float num21 = player.Center.Distance(vector);
						if (player.Center.Distance(base.Center) < num21)
						{
							vector = base.Center;
						}
					}
					Vector2 vector7 = player.Center - vector;
					if (vector7.Length() > num2 || Math.Abs(vector7.Y) > num3)
					{
						Rectangle r2 = Utils.CenteredRectangle(player.Center, base.Size);
						Vector2 value2 = vector - player.Center;
						Vector2 value3 = r2.TopLeft();
						for (float num22 = 0f; num22 < 1f; num22 += 0.05f)
						{
							Vector2 vector8 = r2.TopLeft() + value2 * num22;
							if (Collision.SolidCollision(r2.TopLeft() + value2 * num22, r.Width, r.Height))
							{
								break;
							}
							value3 = vector8;
						}
						vector = value3 + base.Size / 2f;
					}
				}
				tileCollide = true;
				float num23 = 0.5f;
				float num24 = 4f;
				float num25 = 4f;
				float num26 = 0.1f;
				if (flag && attackTarget != -1)
				{
					num23 = 1f;
					num24 = 8f;
					num25 = 8f;
				}
				if (flag2 && attackTarget != -1)
				{
					num23 = 0.7f;
					num24 = 6f;
					num25 = 6f;
				}
				if (flag3 && attackTarget != -1)
				{
					num23 = 0.7f;
					num24 = 6f;
					num25 = 6f;
				}
				if (num25 < Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y))
				{
					num25 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
					num23 = 0.7f;
				}
				int num27 = 0;
				bool flag9 = false;
				float num28 = vector.X - base.Center.X;
				Vector2 vector9 = vector - base.Center;
				if (type == 653 && Math.Abs(num28) < 150f)
				{
					rotation = rotation.AngleTowards(0f, 0.2f);
					velocity.X *= 0.9f;
					if ((double)Math.Abs(velocity.X) < 0.1)
					{
						velocity.X = 0f;
					}
				}
				else if (Math.Abs(num28) > 5f)
				{
					if (num28 < 0f)
					{
						num27 = -1;
						if (velocity.X > 0f - num24)
						{
							velocity.X -= num23;
						}
						else
						{
							velocity.X -= num26;
						}
					}
					else
					{
						num27 = 1;
						if (velocity.X < num24)
						{
							velocity.X += num23;
						}
						else
						{
							velocity.X += num26;
						}
					}
					bool flag10 = true;
					if (flag)
					{
						flag10 = false;
					}
					if (type == 653)
					{
						flag10 = false;
					}
					if (flag2 && attackTarget == -1)
					{
						flag10 = false;
					}
					if (flag3)
					{
						flag10 = vector9.Y < -80f;
					}
					if (flag10)
					{
						flag9 = true;
					}
				}
				else
				{
					velocity.X *= 0.9f;
					if (Math.Abs(velocity.X) < num23 * 2f)
					{
						velocity.X = 0f;
					}
				}
				bool flag11 = Math.Abs(vector9.X) >= 64f || (vector9.Y <= -48f && Math.Abs(vector9.X) >= 8f);
				if (num27 != 0 && flag11)
				{
					int num29 = (int)(position.X + (float)(width / 2)) / 16;
					int num30 = (int)position.Y / 16;
					num29 += num27;
					num29 += (int)velocity.X;
					for (int j = num30; j < num30 + height / 16 + 1; j++)
					{
						if (WorldGen.SolidTile(num29, j))
						{
							flag9 = true;
						}
					}
				}
				if (type == 500 && velocity.X != 0f)
				{
					flag9 = true;
				}
				if (type == 653 && Math.Abs(velocity.X) > 3f)
				{
					flag9 = true;
				}
				Collision.StepUp(position, velocity, width, height, stepSpeed, gfxOffY);
				float num31 = Utils.GetLerpValue(0f, 100f, vector9.Y, clamped: true) * Utils.GetLerpValue(-2f, -6f, velocity.Y, clamped: true);
				if (velocity.Y == 0f && flag9)
				{
					for (int k = 0; k < 3; k++)
					{
						int num32 = (int)(position.X + (float)(width / 2)) / 16;
						if (k == 0)
						{
							num32 = (int)position.X / 16;
						}
						if (k == 2)
						{
							num32 = (int)(position.X + (float)width) / 16;
						}
						int num33 = (int)(position.Y + (float)height) / 16;
						if (!WorldGen.SolidTile(num32, num33) && !Main.tile[num32, num33].halfBrick() && Main.tile[num32, num33].slope() <= 0 && (!TileID.Sets.Platforms[Main.tile[num32, num33].type] || !Main.tile[num32, num33].active() || Main.tile[num32, num33].inActive()))
						{
							continue;
						}
						try
						{
							num32 = (int)(position.X + (float)(width / 2)) / 16;
							num33 = (int)(position.Y + (float)(height / 2)) / 16;
							num32 += num27;
							num32 += (int)velocity.X;
							if (!WorldGen.SolidTile(num32, num33 - 1) && !WorldGen.SolidTile(num32, num33 - 2))
							{
								velocity.Y = -5.1f;
							}
							else if (!WorldGen.SolidTile(num32, num33 - 2))
							{
								velocity.Y = -7.1f;
							}
							else if (WorldGen.SolidTile(num32, num33 - 5))
							{
								velocity.Y = -11.1f;
							}
							else if (WorldGen.SolidTile(num32, num33 - 4))
							{
								velocity.Y = -10.1f;
							}
							else
							{
								velocity.Y = -9.1f;
							}
						}
						catch
						{
							velocity.Y = -9.1f;
						}
					}
					if (vector.Y - base.Center.Y < -48f)
					{
						float num34 = vector.Y - base.Center.Y;
						num34 *= -1f;
						if (num34 < 60f)
						{
							velocity.Y = -6f;
						}
						else if (num34 < 80f)
						{
							velocity.Y = -7f;
						}
						else if (num34 < 100f)
						{
							velocity.Y = -8f;
						}
						else if (num34 < 120f)
						{
							velocity.Y = -9f;
						}
						else if (num34 < 140f)
						{
							velocity.Y = -10f;
						}
						else if (num34 < 160f)
						{
							velocity.Y = -11f;
						}
						else if (num34 < 190f)
						{
							velocity.Y = -12f;
						}
						else if (num34 < 210f)
						{
							velocity.Y = -13f;
						}
						else if (num34 < 270f)
						{
							velocity.Y = -14f;
						}
						else if (num34 < 310f)
						{
							velocity.Y = -15f;
						}
						else
						{
							velocity.Y = -16f;
						}
					}
					if (wet && num31 == 0f)
					{
						velocity.Y *= 2f;
					}
				}
				if (velocity.X > num25)
				{
					velocity.X = num25;
				}
				if (velocity.X < 0f - num25)
				{
					velocity.X = 0f - num25;
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				if (velocity.X == 0f)
				{
					direction = ((player.Center.X > base.Center.X) ? 1 : (-1));
				}
				if (velocity.X > num23 && num27 == 1)
				{
					direction = 1;
				}
				if (velocity.X < 0f - num23 && num27 == -1)
				{
					direction = -1;
				}
				spriteDirection = direction;
				if (flag)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						if (velocity.X == 0f)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if (Math.Abs(velocity.X) >= 0.5f)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 10)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 4)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y != 0f)
					{
						frameCounter = 0;
						frame = 14;
					}
				}
				if (flag2)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						if (velocity.X == 0f)
						{
							int num35 = 4;
							if (++frameCounter >= 7 * num35 && Main.rand.Next(50) == 0)
							{
								frameCounter = 0;
							}
							int num36 = frameCounter / num35;
							if (num36 >= 4)
							{
								num36 = 6 - num36;
							}
							if (num36 < 0)
							{
								num36 = 0;
							}
							frame = 1 + num36;
						}
						else if (Math.Abs(velocity.X) >= 0.5f)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							int num37 = 15;
							int num38 = 8;
							if (frameCounter >= num38 * num37)
							{
								frameCounter = 0;
							}
							int num39 = frameCounter / num37;
							frame = num39 + 5;
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y != 0f)
					{
						if (velocity.Y < 0f)
						{
							if (frame > 9 || frame < 5)
							{
								frame = 5;
								frameCounter = 0;
							}
							if (++frameCounter >= 1 && frame < 9)
							{
								frame++;
								frameCounter = 0;
							}
						}
						else
						{
							if (frame > 13 || frame < 9)
							{
								frame = 9;
								frameCounter = 0;
							}
							if (++frameCounter >= 2 && frame < 11)
							{
								frame++;
								frameCounter = 0;
							}
						}
					}
				}
				if (flag3)
				{
					int num40 = 8;
					if (flag4)
					{
						num40 = 10;
					}
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						if (velocity.X == 0f)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if (Math.Abs(velocity.X) >= 0.5f)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 10)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= num40 || frame < 2)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y != 0f)
					{
						frameCounter = 0;
						frame = 1;
						if (flag4)
						{
							frame = 9;
						}
					}
				}
				velocity.Y += 0.4f + num31 * 1f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			if (!flag)
			{
				return;
			}
			localAI[0] += 1f;
			if (velocity.X == 0f)
			{
				localAI[0] += 1f;
			}
			if (localAI[0] >= (float)Main.rand.Next(900, 1200))
			{
				localAI[0] = 0f;
				for (int l = 0; l < 6; l++)
				{
					int num41 = Dust.NewDust(base.Center + Vector2.UnitX * -direction * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, -direction, 1f);
					Main.dust[num41].velocity /= 2f;
					Main.dust[num41].scale = 0.8f;
				}
				int num42 = Gore.NewGore(base.Center + Vector2.UnitX * -direction * 8f, Vector2.Zero, Main.rand.Next(580, 583));
				Main.gore[num42].velocity /= 2f;
				Main.gore[num42].velocity.Y = Math.Abs(Main.gore[num42].velocity.Y);
				Main.gore[num42].velocity.X = (0f - Math.Abs(Main.gore[num42].velocity.X)) * (float)direction;
			}
		}

		private void AI_157_SharpTears()
		{
			bool flag = ai[0] < 20f;
			bool flag2 = ai[0] > 20f;
			bool flag3 = ai[0] >= 30f;
			ai[0] += 1f;
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				rotation = velocity.ToRotation();
				frame = Main.rand.Next(6);
				for (int i = 0; i < 30; i++)
				{
					Dust dust = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), 5, velocity * MathHelper.Lerp(0.2f, 0.7f, Main.rand.NextFloat()));
					dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				}
				for (int j = 0; j < 30; j++)
				{
					Dust dust2 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), 5, Main.rand.NextVector2Circular(2f, 2f) + velocity * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
					dust2.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust2.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
					dust2.fadeIn = 1f;
				}
				SoundEngine.PlaySound(SoundID.Item113, base.Center);
			}
			if (flag)
			{
				Opacity += 0.1f;
				scale = Opacity * ai[1];
				for (int k = 0; k < 2; k++)
				{
					Dust dust3 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f), 5, velocity * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
					dust3.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust3.velocity *= 0.5f;
					dust3.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				}
			}
			if (flag2)
			{
				Opacity -= 0.2f;
				for (int l = 0; l < 2; l++)
				{
					Dust dust4 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f), 5, velocity * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
					dust4.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust4.velocity *= 0.5f;
					dust4.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				}
			}
			if (flag3)
			{
				Kill();
			}
			Lighting.AddLight(base.Center, new Vector3(0.5f, 0.1f, 0.1f) * scale);
		}

		private bool IsInRangeOfMeOrMyOwner(Entity entity, float maxDistance, out float myDistance, out float playerDistance, out bool closerIsMe)
		{
			myDistance = Vector2.Distance(entity.Center, base.Center);
			if (myDistance < maxDistance && !CanHitWithOwnBody(entity))
			{
				myDistance = float.PositiveInfinity;
			}
			playerDistance = Vector2.Distance(entity.Center, Main.player[owner].Center);
			if (playerDistance < maxDistance && !CanHitWithMeleeWeapon(entity))
			{
				playerDistance = float.PositiveInfinity;
			}
			closerIsMe = myDistance < playerDistance;
			if (closerIsMe)
			{
				return myDistance <= maxDistance;
			}
			return playerDistance <= maxDistance;
		}

		private void AI_156_BatOfLight()
		{
			List<int> ai156_blacklistedTargets = _ai156_blacklistedTargets;
			Player player = Main.player[owner];
			bool num = type == 755;
			bool flag = type == 946;
			if (num)
			{
				if (player.dead)
				{
					player.batsOfLight = false;
				}
				if (player.batsOfLight)
				{
					timeLeft = 2;
				}
				DelegateMethods.v3_1 = AI_156_GetColor().ToVector3();
				Point point = base.Center.ToTileCoordinates();
				DelegateMethods.CastLightOpen(point.X, point.Y);
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type] - 1)
					{
						frame = 0;
					}
				}
				int num2 = player.direction;
				if (velocity.X != 0f)
				{
					num2 = Math.Sign(velocity.X);
				}
				spriteDirection = num2;
			}
			if (flag)
			{
				if (player.dead)
				{
					player.empressBlade = false;
				}
				if (player.empressBlade)
				{
					timeLeft = 2;
				}
				DelegateMethods.v3_1 = AI_156_GetColor().ToVector3();
				Point point2 = base.Center.ToTileCoordinates();
				DelegateMethods.CastLightOpen(point2.X, point2.Y);
			}
			ai156_blacklistedTargets.Clear();
			AI_156_Think(ai156_blacklistedTargets);
		}

		public Color AI_156_GetColor()
		{
			if (aiStyle != 156)
			{
				return Color.Transparent;
			}
			bool num = type == 755;
			_ = type;
			if (num)
			{
				return Color.Crimson;
			}
			return Color.Transparent;
		}

		private void AI_156_Think(List<int> blacklist)
		{
			bool flag = type == 755;
			bool flag2 = type == 946;
			int num = 60;
			int num2 = num - 1;
			int num3 = num + 60;
			int num4 = num3 - 1;
			int num5 = num + 1;
			if (flag2)
			{
				num = 40;
				num2 = num - 1;
				num3 = num + 40;
				num4 = num3 - 1;
				num5 = num + 1;
			}
			if (ai[0] == -1f)
			{
				AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index, out var totalIndexesInGroup);
				AI_156_GetIdlePosition(index, totalIndexesInGroup, out var idleSpot, out var idleRotation);
				velocity = Vector2.Zero;
				base.Center = base.Center.MoveTowards(idleSpot, 32f);
				rotation = rotation.AngleLerp(idleRotation, 0.2f);
				if (Distance(idleSpot) < 2f)
				{
					ai[0] = 0f;
					netUpdate = true;
				}
				return;
			}
			if (ai[0] == 0f)
			{
				if (flag)
				{
					AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index2, out var totalIndexesInGroup2);
					AI_156_GetIdlePosition(index2, totalIndexesInGroup2, out var idleSpot2, out var _);
					velocity = Vector2.Zero;
					base.Center = Vector2.SmoothStep(base.Center, idleSpot2, 0.45f);
					if (Main.rand.Next(20) == 0)
					{
						int num6 = AI_156_TryAttackingNPCs(blacklist);
						if (num6 != -1)
						{
							ai[0] = num;
							ai[1] = num6;
							netUpdate = true;
							return;
						}
					}
				}
				if (!flag2)
				{
					return;
				}
				AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index3, out var totalIndexesInGroup3);
				AI_156_GetIdlePosition(index3, totalIndexesInGroup3, out var idleSpot3, out var idleRotation3);
				velocity = Vector2.Zero;
				base.Center = Vector2.SmoothStep(base.Center, idleSpot3, 0.45f);
				rotation = rotation.AngleLerp(idleRotation3, 0.45f);
				if (Main.rand.Next(20) == 0)
				{
					int num7 = AI_156_TryAttackingNPCs(blacklist);
					if (num7 != -1)
					{
						ai[0] = Main.rand.NextFromList<int>(num, num3);
						ai[0] = num3;
						ai[1] = num7;
						netUpdate = true;
					}
				}
				return;
			}
			if (flag)
			{
				int num8 = (int)ai[1];
				if (!Main.npc.IndexInRange(num8))
				{
					ai[0] = 0f;
					netUpdate = true;
					return;
				}
				NPC nPC = Main.npc[num8];
				if (!nPC.CanBeChasedBy(this))
				{
					ai[0] = 0f;
					netUpdate = true;
					return;
				}
				ai[0] -= 1f;
				if (ai[0] >= (float)num2)
				{
					velocity *= 0.8f;
					if (ai[0] == (float)num2)
					{
						localAI[0] = base.Center.X;
						localAI[1] = base.Center.Y;
					}
					return;
				}
				float lerpValue = Utils.GetLerpValue(num2, 0f, ai[0], clamped: true);
				Vector2 vector = new Vector2(localAI[0], localAI[1]);
				if (lerpValue >= 0.5f)
				{
					vector = Main.player[owner].Center;
				}
				Vector2 center = nPC.Center;
				float num9 = (center - vector).ToRotation();
				float num10 = ((center.X > vector.X) ? (-(float)Math.PI) : ((float)Math.PI));
				float num11 = num10 + (0f - num10) * lerpValue * 2f;
				Vector2 vector2 = num11.ToRotationVector2();
				vector2.Y *= (float)Math.Sin((float)identity * 2.3f) * 0.5f;
				vector2 = vector2.RotatedBy(num9);
				float scaleFactor = (center - vector).Length() / 2f;
				Vector2 vector4 = (base.Center = Vector2.Lerp(vector, center, 0.5f) + vector2 * scaleFactor);
				Vector2 vector5 = (velocity = MathHelper.WrapAngle(num9 + num11 + 0f).ToRotationVector2() * 10f);
				position -= velocity;
				if (ai[0] == 0f)
				{
					int num12 = AI_156_TryAttackingNPCs(blacklist);
					if (num12 != -1)
					{
						ai[0] = num;
						ai[1] = num12;
						netUpdate = true;
						return;
					}
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			if (!flag2)
			{
				return;
			}
			bool skipBodyCheck = true;
			int num13 = 0;
			int num14 = num2;
			int num15 = 0;
			if (ai[0] >= (float)num5)
			{
				num13 = 1;
				num14 = num4;
				num15 = num5;
			}
			int num16 = (int)ai[1];
			if (!Main.npc.IndexInRange(num16))
			{
				int num17 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
				if (num17 != -1)
				{
					ai[0] = Main.rand.NextFromList<int>(num, num3);
					ai[1] = num17;
					netUpdate = true;
				}
				else
				{
					ai[0] = -1f;
					ai[1] = 0f;
					netUpdate = true;
				}
				return;
			}
			NPC nPC2 = Main.npc[num16];
			if (!nPC2.CanBeChasedBy(this))
			{
				int num18 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
				if (num18 != -1)
				{
					ai[0] = Main.rand.NextFromList<int>(num, num3);
					ai[1] = num18;
					netUpdate = true;
				}
				else
				{
					ai[0] = -1f;
					ai[1] = 0f;
					netUpdate = true;
				}
				return;
			}
			ai[0] -= 1f;
			if (ai[0] >= (float)num14)
			{
				direction = ((base.Center.X < nPC2.Center.X) ? 1 : (-1));
				if (ai[0] == (float)num14)
				{
					localAI[0] = base.Center.X;
					localAI[1] = base.Center.Y;
				}
			}
			float lerpValue2 = Utils.GetLerpValue(num14, num15, ai[0], clamped: true);
			if (num13 == 0)
			{
				Vector2 vector6 = new Vector2(localAI[0], localAI[1]);
				if (lerpValue2 >= 0.5f)
				{
					vector6 = Vector2.Lerp(nPC2.Center, Main.player[owner].Center, 0.5f);
				}
				Vector2 center2 = nPC2.Center;
				float num19 = (center2 - vector6).ToRotation();
				float num20 = ((direction == 1) ? (-(float)Math.PI) : ((float)Math.PI));
				float num21 = num20 + (0f - num20) * lerpValue2 * 2f;
				Vector2 vector7 = num21.ToRotationVector2();
				vector7.Y *= 0.5f;
				vector7.Y *= 0.8f + (float)Math.Sin((float)identity * 2.3f) * 0.2f;
				vector7 = vector7.RotatedBy(num19);
				float scaleFactor2 = (center2 - vector6).Length() / 2f;
				Vector2 vector9 = (base.Center = Vector2.Lerp(vector6, center2, 0.5f) + vector7 * scaleFactor2);
				float num22 = MathHelper.WrapAngle(num19 + num21 + 0f);
				rotation = num22 + (float)Math.PI / 2f;
				Vector2 vector10 = (velocity = num22.ToRotationVector2() * 10f);
				position -= velocity;
			}
			if (num13 == 1)
			{
				Vector2 vector11 = new Vector2(localAI[0], localAI[1]);
				vector11 += new Vector2(0f, Utils.GetLerpValue(0f, 0.4f, lerpValue2, clamped: true) * -100f);
				Vector2 v = nPC2.Center - vector11;
				Vector2 value = v.SafeNormalize(Vector2.Zero) * MathHelper.Clamp(v.Length(), 60f, 150f);
				Vector2 value2 = nPC2.Center + value;
				float lerpValue3 = Utils.GetLerpValue(0.4f, 0.6f, lerpValue2, clamped: true);
				float lerpValue4 = Utils.GetLerpValue(0.6f, 1f, lerpValue2, clamped: true);
				float targetAngle = v.SafeNormalize(Vector2.Zero).ToRotation() + (float)Math.PI / 2f;
				rotation = rotation.AngleTowards(targetAngle, (float)Math.PI / 5f);
				base.Center = Vector2.Lerp(vector11, nPC2.Center, lerpValue3);
				if (lerpValue4 > 0f)
				{
					base.Center = Vector2.Lerp(nPC2.Center, value2, lerpValue4);
				}
			}
			if (ai[0] == (float)num15)
			{
				int num23 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
				if (num23 != -1)
				{
					ai[0] = Main.rand.NextFromList<int>(num, num3);
					ai[1] = num23;
					netUpdate = true;
				}
				else
				{
					ai[0] = -1f;
					ai[1] = 0f;
					netUpdate = true;
				}
			}
		}

		private int AI_156_TryAttackingNPCs(List<int> blackListedTargets, bool skipBodyCheck = false)
		{
			Vector2 center = Main.player[owner].Center;
			int result = -1;
			float num = -1f;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && (nPC.boss || !blackListedTargets.Contains(i)))
				{
					float num2 = nPC.Distance(center);
					if (!(num2 > 1000f) && (!(num2 > num) || num == -1f) && (skipBodyCheck || CanHitWithOwnBody(nPC)))
					{
						num = num2;
						result = i;
					}
				}
			}
			return result;
		}

		private void AI_GetMyGroupIndexAndFillBlackList(List<int> blackListedTargets, out int index, out int totalIndexesInGroup)
		{
			index = 0;
			totalIndexesInGroup = 0;
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == owner && projectile.type == type && (projectile.type != 759 || projectile.frame == Main.projFrames[projectile.type] - 1))
				{
					if (whoAmI > i)
					{
						index++;
					}
					totalIndexesInGroup++;
				}
			}
		}

		private void AI_156_GetIdlePosition(int stackedIndex, int totalIndexes, out Vector2 idleSpot, out float idleRotation)
		{
			Player player = Main.player[owner];
			bool num = type == 755;
			bool flag = type == 946;
			idleRotation = 0f;
			idleSpot = Vector2.Zero;
			if (num)
			{
				float num2 = ((float)totalIndexes - 1f) / 2f;
				idleSpot = player.Center + -Vector2.UnitY.RotatedBy(4.3982296f / (float)totalIndexes * ((float)stackedIndex - num2)) * 40f;
				idleRotation = 0f;
			}
			if (flag)
			{
				int num3 = stackedIndex + 1;
				idleRotation = (float)num3 * ((float)Math.PI * 2f) * 0.0166666675f * (float)player.direction + (float)Math.PI / 2f;
				idleRotation = MathHelper.WrapAngle(idleRotation);
				int num4 = num3 % totalIndexes;
				Vector2 vector = new Vector2(0f, 0.5f).RotatedBy((player.miscCounterNormalized * (2f + (float)num4) + (float)num4 * 0.5f + (float)player.direction * 1.3f) * ((float)Math.PI * 2f)) * 4f;
				idleSpot = idleRotation.ToRotationVector2() * 10f + player.MountedCenter + new Vector2(player.direction * (num3 * -6 - 16), player.gravDir * -15f);
				idleSpot += vector;
				idleRotation += (float)Math.PI / 2f;
			}
		}

		private void AI_155_MysticSnakeCoil()
		{
			if (Main.netMode != 1 && !Main.player[owner].active)
			{
				float num = ai[0];
				float y = position.Y;
				Point point = base.Center.ToTileCoordinates();
				Point end = new Point(point.X, (int)y / 16);
				Point start = new Point(point.X, (int)num / 16);
				AI_155_RemoveRope(start, end);
				Kill();
				return;
			}
			int num2 = 80;
			int num3 = 1800;
			if (ai[1] == 0f)
			{
				spriteDirection = ((!(Main.player[owner].Center.X > base.Center.X)) ? 1 : (-1));
				ai[1] = 1f;
				velocity.Y = -5f;
			}
			if (ai[1] == 1f)
			{
				if (Main.rand.Next(6) == 0)
				{
					Dust dust = Dust.NewDustDirect(base.TopLeft + new Vector2(-6f, 0f), 24, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
					dust.velocity *= 1f;
					dust.velocity.X *= 0.5f;
					dust.velocity.Y = -3f;
					dust.fadeIn = 1.2f;
					dust.noGravity = true;
				}
				alpha = Utils.Clamp(alpha - 5, 0, 255);
				if (++frameCounter >= 12)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
				if (Main.myPlayer == owner)
				{
					float num4 = ai[0];
					float y2 = position.Y;
					Point point2 = base.Center.ToTileCoordinates();
					Point point3 = new Point(point2.X, (int)y2 / 16);
					Point point4 = new Point(point2.X, (int)num4 / 16);
					bool flag = point4.Y - point3.Y >= num2;
					int x = point4.X;
					if (!WorldGen.InWorld(x, point3.Y, 40) || !WorldGen.InWorld(x, point4.Y, 40))
					{
						flag = true;
					}
					if (!flag)
					{
						for (int num5 = point4.Y; num5 >= point3.Y; num5--)
						{
							if (Main.tile[x, num5].active() && !Main.tileCut[Main.tile[x, num5].type] && Main.tile[x, num5].type != 504)
							{
								flag = true;
								break;
							}
						}
					}
					if (flag)
					{
						int num6 = 0;
						for (int num7 = point4.Y; num7 > point3.Y; num7--)
						{
							if ((WorldGen.TileEmpty(x, num7) || Main.tileCut[Main.tile[x, num7].type]) && WorldGen.PlaceTile(x, num7, 504, mute: false, forced: false, owner))
							{
								num6++;
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 1, x, num7, 504f);
								}
							}
						}
						timeLeft = num3;
						ai[1] = 2f;
						netUpdate = true;
						base.Top = new Vector2(x * 16 + 8, point3.Y * 16 + 16);
						velocity = Vector2.Zero;
					}
				}
			}
			if (ai[1] != 2f)
			{
				return;
			}
			alpha = 0;
			_ = timeLeft;
			float num8 = ai[0];
			float y3 = position.Y;
			Point point5 = base.Center.ToTileCoordinates();
			Point end2 = new Point(point5.X, (int)y3 / 16);
			Point start2 = new Point(point5.X, (int)num8 / 16);
			int x2 = start2.X;
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num9 = start2.Y; num9 >= end2.Y; num9--)
				{
					Tile tile = Main.tile[x2, num9];
					if (tile.active() && tile.type == 504)
					{
						AI_155_SpawnRopeIn(x2, num9);
					}
				}
			}
			else
			{
				for (int num10 = start2.Y; num10 >= end2.Y; num10--)
				{
					Tile tile2 = Main.tile[x2, num10];
					if (tile2.active() && tile2.type == 504 && Main.rand.Next(80) == 0)
					{
						Dust dust2 = Dust.NewDustDirect(new Vector2(x2 * 16 - 6, num10 * 16), 28, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
						dust2.velocity *= 1f;
						dust2.velocity.X = 0f;
						dust2.fadeIn = 1.2f;
						dust2.noGravity = true;
					}
				}
			}
			if (timeLeft == 4)
			{
				for (int num11 = start2.Y; num11 >= end2.Y; num11--)
				{
					Tile tile3 = Main.tile[x2, num11];
					if (tile3.active() && tile3.type == 504)
					{
						AI_155_SpawnRopeIn(x2, num11);
					}
				}
			}
			if (timeLeft > 4)
			{
				return;
			}
			if (!WorldGen.InWorld(x2, end2.Y, 20) || !WorldGen.InWorld(x2, start2.Y, 20))
			{
				Kill();
				return;
			}
			if (Main.myPlayer == owner)
			{
				AI_155_RemoveRope(start2, end2);
			}
			Kill();
		}

		private void AI_155_RemoveRope(Point start, Point end)
		{
			int x = start.X;
			for (int num = start.Y; num >= end.Y; num--)
			{
				Tile tile = Main.tile[x, num];
				if (tile.active() && tile.type == 504)
				{
					WorldGen.KillTile(x, num);
					if (Main.netMode != 0)
					{
						NetMessage.SendData(17, -1, -1, null, 0, x, num);
					}
				}
			}
		}

		private void AI_155_SpawnRopeIn(int x, int y)
		{
			Vector2 vector = new Vector2(x * 16 + 8, y * 16 + 8);
			if (Main.rand.Next(4) != 0)
			{
				Gore gore = Gore.NewGoreDirect(vector, Vector2.Zero, Main.rand.Next(61, 64));
				gore.velocity = Main.rand.NextVector2Circular(1.5f, 0.8f);
				gore.velocity.X += 0.1f * (float)((gore.velocity.X > 0f) ? 1 : (-1));
				gore.position = vector - new Vector2(16f, 16f);
				gore.alpha = 170;
			}
			for (int i = 0; i < 5; i++)
			{
				if (Main.rand.Next(8) == 0)
				{
					Dust.NewDustDirect(vector + new Vector2(-8f), 16, 16, 31, 0f, 0f, 100, Color.Transparent).velocity *= 0.4f;
				}
				Dust dust = Dust.NewDustDirect(vector + new Vector2(-8f), 16, 16, 27, 0f, 0f, 100, Color.Transparent, 1.7f);
				dust.velocity *= 2f;
				dust.noGravity = true;
			}
		}

		private void AI_154_VoidLens()
		{
			Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
			if (owner == Main.myPlayer)
			{
				for (int i = 0; i < 1000; i++)
				{
					if (i == whoAmI)
					{
						continue;
					}
					Projectile projectile = Main.projectile[i];
					if (projectile.active && projectile.owner == owner && projectile.type == type)
					{
						if (timeLeft < Main.projectile[i].timeLeft)
						{
							Kill();
							return;
						}
						Main.projectile[i].Kill();
					}
				}
			}
			velocity *= 0.94f;
			direction = 1;
			if (++frameCounter >= 5)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (Opacity < 1f)
			{
				Opacity += 0.03f;
				if (Opacity > 1f)
				{
					Opacity = 1f;
				}
			}
			new VoidLensHelper(this).Update();
		}

		private void AI_153_ToiletPop()
		{
			Vector2 center = base.Center;
			float speedY = -2f;
			int num = 0;
			int num2 = 0;
			if (ai[0] == 0f)
			{
				num = 6;
				num2 = 1;
			}
			else
			{
				if (!(ai[0] <= 10f))
				{
					Kill();
					return;
				}
				if (Main.rand.Next(5) == 0)
				{
					num2 = 1;
				}
				num = 2;
			}
			ai[0] += 1f;
			for (int i = 0; i < num; i++)
			{
				Dust dust = Dust.NewDustDirect(center, 3, 6, 216, 0f, speedY);
				dust.velocity.X *= 0.5f;
				dust.velocity.Y = 0f - Math.Abs(dust.velocity.Y);
				dust.position -= dust.velocity;
				dust.scale = 0.8f;
			}
			for (int j = 0; j < num2; j++)
			{
				Gore gore = Gore.NewGoreDirect(center, Vector2.UnitY * -3f + Main.rand.NextVector2Circular(1f, 1f), Main.rand.Next(580, 583));
				gore.velocity.Y = 0f - Math.Abs(gore.velocity.Y);
			}
		}

		private void AI_150_GolfClubHelper()
		{
			Player player = Main.player[owner];
			if (!player.active)
			{
				Kill();
				return;
			}
			if (player.gravDir == -1f)
			{
				player.SetDummyItemTime(0);
				Kill();
				return;
			}
			bool flag = false;
			Rectangle rectangle = Utils.CenteredRectangle(player.Center, new Vector2(500f, 500f));
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == Main.myPlayer && ProjectileID.Sets.IsAGolfBall[projectile.type] && rectangle.Contains(projectile.Center.ToPoint()))
				{
					flag = true;
					break;
				}
			}
			if (!flag && owner == Main.myPlayer && ai[0] == 0f)
			{
				player.TryPlacingAGolfBallNearANearbyTee(Main.player[owner].Center);
			}
			if (!player.channel && ai[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item1, player.Center);
				for (int j = 0; j < 1000; j++)
				{
					Projectile projectile2 = Main.projectile[j];
					Vector2 shotVector = Main.MouseWorld - projectile2.Center;
					if (!projectile2.active || !ProjectileID.Sets.IsAGolfBall[projectile2.type] || projectile2.owner != owner || !GolfHelper.ValidateShot(projectile2, player, shotVector))
					{
						continue;
					}
					float num = Main.rand.NextFloatDirection();
					for (float num2 = 0f; num2 < 1f; num2 += 0.1f)
					{
						Dust dust = Dust.NewDustPerfect(projectile2.Center, 31, ((float)Math.PI * 2f * num2 + num).ToRotationVector2() * 0.8f, 127);
						dust.fadeIn = 0f;
						if (num2 % 0.2f == 0f)
						{
							dust.velocity *= 0.4f;
						}
					}
					SoundEngine.PlaySound(SoundID.Item126, projectile2.Center);
					if (owner == Main.myPlayer)
					{
						GolfHelper.ShotStrength shotStrength = GolfHelper.CalculateShotStrength(this, projectile2);
						Vector2 velocity = Vector2.Normalize(shotVector) * shotStrength.AbsoluteStrength;
						GolfHelper.HitGolfBall(projectile2, velocity, shotStrength.RoughLandResistance);
						NetMessage.SendData(27, -1, -1, null, j);
					}
				}
				ai[0] = 1f;
				ai[1] = 0f;
				netUpdate = true;
			}
			if (ai[0] == 1f)
			{
				ai[1] += 1f;
				float num3 = player.HeldItem.useAnimation + 30;
				if (ai[1] >= num3)
				{
					Kill();
					return;
				}
				base.velocity = Vector2.Zero;
				player.ChangeDir(direction);
				player.heldProj = whoAmI;
				int num4 = player.HeldItem.useAnimation - (int)ai[1];
				if (num4 < 2)
				{
					num4 = 2;
				}
				player.SetDummyItemTime(num4);
			}
			if (ai[0] != 0f)
			{
				return;
			}
			if (owner == Main.myPlayer)
			{
				Vector2 mouseWorld = Main.MouseWorld;
				if (mouseWorld != base.Center)
				{
					netUpdate = true;
					base.Center = mouseWorld;
				}
				if (Main.mouseRight && Main.mouseRightRelease)
				{
					Kill();
					player.mouseInterface = true;
					Main.blockMouse = true;
					player.SetItemTime(0);
					player.itemAnimation = 0;
					player.itemAnimationMax = 0;
					player.reuseDelay = 0;
					return;
				}
			}
			if (position != oldPosition)
			{
				if (base.Center.X - player.Center.X > 0f)
				{
					direction = 1;
				}
				else
				{
					direction = -1;
				}
			}
			base.velocity = Vector2.Zero;
			player.ChangeDir(direction);
			player.heldProj = whoAmI;
			ai[1] += 1f;
			int num5 = player.HeldItem.useAnimation * 4;
			if (ai[1] > (float)(num5 * 3))
			{
				ai[1] = num5;
			}
			int num6 = player.HeldItem.useAnimation + Math.Min(num5, (int)ai[1]);
			if (num6 < 2)
			{
				num6 = 2;
			}
			player.SetDummyItemTime(num6);
		}

		public Color GetCeleb2Color()
		{
			return (int)ai[0] switch
			{
				0 => Color.Red, 
				1 => Color.DarkOrange, 
				2 => Color.Gold, 
				3 => Color.LimeGreen, 
				4 => Color.RoyalBlue, 
				5 => new Color(80, 20, 180), 
				6 => Color.HotPink, 
				_ => Color.Transparent, 
			};
		}

		private void AI_007_GrapplingHooks()
		{
			if (Main.player[owner].dead || Main.player[owner].stoned || Main.player[owner].webbed || Main.player[owner].frozen)
			{
				Kill();
				return;
			}
			Vector2 mountedCenter = Main.player[owner].MountedCenter;
			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num = mountedCenter.X - vector.X;
			float num2 = mountedCenter.Y - vector.Y;
			float num3 = (float)Math.Sqrt(num * num + num2 * num2);
			rotation = (float)Math.Atan2(num2, num) - 1.57f;
			if (ai[0] == 2f && type == 865)
			{
				float num4 = (float)Math.PI / 2f;
				int num5 = (int)Math.Round(rotation / num4);
				rotation = (float)num5 * num4;
			}
			if (Main.myPlayer == owner)
			{
				int num6 = (int)(base.Center.X / 16f);
				int num7 = (int)(base.Center.Y / 16f);
				if (num6 > 0 && num7 > 0 && num6 < Main.maxTilesX && num7 < Main.maxTilesY && Main.tile[num6, num7].nactive() && Main.tile[num6, num7].type >= 481 && Main.tile[num6, num7].type <= 483 && Main.rand.Next(16) == 0)
				{
					WorldGen.KillTile(num6, num7);
					if (Main.netMode != 0)
					{
						NetMessage.SendData(17, -1, -1, null, 0, num6, num7);
					}
				}
			}
			if (num3 > 2500f)
			{
				Kill();
			}
			if (type == 256)
			{
				rotation = (float)Math.Atan2(num2, num) + 3.92500019f;
			}
			if (type == 446)
			{
				Lighting.AddLight(mountedCenter, 0f, 0.4f, 0.3f);
				localAI[0] += 1f;
				if (localAI[0] >= 28f)
				{
					localAI[0] = 0f;
				}
				DelegateMethods.v3_1 = new Vector3(0f, 0.4f, 0.3f);
				Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
			}
			if (type == 652 && ++frameCounter >= 7)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (type >= 646 && type <= 649)
			{
				Vector3 vector2 = Vector3.Zero;
				switch (type)
				{
				case 646:
					vector2 = new Vector3(0.7f, 0.5f, 0.1f);
					break;
				case 647:
					vector2 = new Vector3(0f, 0.6f, 0.7f);
					break;
				case 648:
					vector2 = new Vector3(0.6f, 0.2f, 0.6f);
					break;
				case 649:
					vector2 = new Vector3(0.6f, 0.6f, 0.9f);
					break;
				}
				Lighting.AddLight(mountedCenter, vector2);
				Lighting.AddLight(base.Center, vector2);
				DelegateMethods.v3_1 = vector2;
				Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
			}
			if (ai[0] == 0f)
			{
				if ((num3 > 300f && type == 13) || (num3 > 400f && type == 32) || (num3 > 440f && type == 73) || (num3 > 440f && type == 74) || (num3 > 300f && type == 165) || (num3 > 350f && type == 256) || (num3 > 500f && type == 315) || (num3 > 550f && type == 322) || (num3 > 400f && type == 331) || (num3 > 550f && type == 332) || (num3 > 400f && type == 372) || (num3 > 300f && type == 396) || (num3 > 550f && type >= 646 && type <= 649) || (num3 > 600f && type == 652) || (num3 > 300f && type == 865) || (num3 > 500f && type == 935) || (num3 > 480f && type >= 486 && type <= 489) || (num3 > 500f && type == 446))
				{
					ai[0] = 1f;
				}
				else if (type >= 230 && type <= 235)
				{
					int num8 = 300 + (type - 230) * 30;
					if (num3 > (float)num8)
					{
						ai[0] = 1f;
					}
				}
				else if (type == 753)
				{
					int num9 = 420;
					if (num3 > (float)num9)
					{
						ai[0] = 1f;
					}
				}
				Vector2 value = base.Center - new Vector2(5f);
				Vector2 value2 = base.Center + new Vector2(5f);
				Point point = (value - new Vector2(16f)).ToTileCoordinates();
				Point point2 = (value2 + new Vector2(32f)).ToTileCoordinates();
				int num10 = point.X;
				int num11 = point2.X;
				int num12 = point.Y;
				int num13 = point2.Y;
				if (num10 < 0)
				{
					num10 = 0;
				}
				if (num11 > Main.maxTilesX)
				{
					num11 = Main.maxTilesX;
				}
				if (num12 < 0)
				{
					num12 = 0;
				}
				if (num13 > Main.maxTilesY)
				{
					num13 = Main.maxTilesY;
				}
				Player player = Main.player[owner];
				List<Point> list = new List<Point>();
				for (int i = 0; i < player.grapCount; i++)
				{
					Projectile projectile = Main.projectile[player.grappling[i]];
					if (projectile.aiStyle != 7 || projectile.ai[0] != 2f)
					{
						continue;
					}
					Point pt = projectile.Center.ToTileCoordinates();
					Tile tileSafely = Framing.GetTileSafely(pt);
					if (tileSafely.type != 314 && !TileID.Sets.Platforms[tileSafely.type])
					{
						continue;
					}
					for (int j = -2; j <= 2; j++)
					{
						for (int k = -2; k <= 2; k++)
						{
							Point point3 = new Point(pt.X + j, pt.Y + k);
							Tile tileSafely2 = Framing.GetTileSafely(point3);
							if (tileSafely2.type == 314 || TileID.Sets.Platforms[tileSafely2.type])
							{
								list.Add(point3);
							}
						}
					}
				}
				Vector2 vector3 = default(Vector2);
				for (int l = num10; l < num11; l++)
				{
					for (int m = num12; m < num13; m++)
					{
						if (Main.tile[l, m] == null)
						{
							Main.tile[l, m] = new Tile();
						}
						vector3.X = l * 16;
						vector3.Y = m * 16;
						if (!(value.X + 10f > vector3.X) || !(value.X < vector3.X + 16f) || !(value.Y + 10f > vector3.Y) || !(value.Y < vector3.Y + 16f))
						{
							continue;
						}
						Tile tile = Main.tile[l, m];
						if (!tile.nactive() || !AI_007_GrapplingHooks_CanTileBeLatchedOnTo(tile) || list.Contains(new Point(l, m)) || (type == 403 && tile.type != 314) || Main.player[owner].IsBlacklistedForGrappling(new Point(l, m)))
						{
							continue;
						}
						if (Main.player[owner].grapCount < 10)
						{
							Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
							Main.player[owner].grapCount++;
						}
						if (Main.myPlayer != owner)
						{
							continue;
						}
						int num14 = 0;
						int num15 = -1;
						int num16 = 100000;
						if (type == 73 || type == 74)
						{
							for (int n = 0; n < 1000; n++)
							{
								if (n != whoAmI && Main.projectile[n].active && Main.projectile[n].owner == owner && Main.projectile[n].aiStyle == 7 && Main.projectile[n].ai[0] == 2f)
								{
									Main.projectile[n].Kill();
								}
							}
						}
						else
						{
							int num17 = 3;
							if (type == 165)
							{
								num17 = 8;
							}
							if (type == 256)
							{
								num17 = 2;
							}
							if (type == 372)
							{
								num17 = 2;
							}
							if (type == 652)
							{
								num17 = 1;
							}
							if (type >= 646 && type <= 649)
							{
								num17 = 4;
							}
							for (int num18 = 0; num18 < 1000; num18++)
							{
								if (Main.projectile[num18].active && Main.projectile[num18].owner == owner && Main.projectile[num18].aiStyle == 7)
								{
									if (Main.projectile[num18].timeLeft < num16)
									{
										num15 = num18;
										num16 = Main.projectile[num18].timeLeft;
									}
									num14++;
								}
							}
							if (num14 > num17)
							{
								Main.projectile[num15].Kill();
							}
						}
						WorldGen.KillTile(l, m, fail: true, effectOnly: true);
						SoundEngine.PlaySound(0, l * 16, m * 16);
						velocity.X = 0f;
						velocity.Y = 0f;
						ai[0] = 2f;
						position.X = l * 16 + 8 - width / 2;
						position.Y = m * 16 + 8 - height / 2;
						Rectangle? tileVisualHitbox = WorldGen.GetTileVisualHitbox(l, m);
						if (tileVisualHitbox.HasValue)
						{
							base.Center = tileVisualHitbox.Value.Center.ToVector2();
						}
						damage = 0;
						netUpdate = true;
						if (Main.myPlayer == owner)
						{
							if (type == 935)
							{
								Main.player[owner].DoQueenSlimeHookTeleport(base.Center);
							}
							NetMessage.SendData(13, -1, -1, null, owner);
						}
						break;
					}
					if (ai[0] == 2f)
					{
						break;
					}
				}
			}
			else if (ai[0] == 1f)
			{
				float num19 = 11f;
				if (type == 32)
				{
					num19 = 15f;
				}
				if (type == 73 || type == 74)
				{
					num19 = 17f;
				}
				if (type == 315)
				{
					num19 = 20f;
				}
				if (type == 322)
				{
					num19 = 22f;
				}
				if (type >= 230 && type <= 235)
				{
					num19 = 11f + (float)(type - 230) * 0.75f;
				}
				if (type == 753)
				{
					num19 = 15f;
				}
				if (type == 446)
				{
					num19 = 20f;
				}
				if (type >= 486 && type <= 489)
				{
					num19 = 18f;
				}
				if (type >= 646 && type <= 649)
				{
					num19 = 24f;
				}
				if (type == 652)
				{
					num19 = 24f;
				}
				if (type == 332)
				{
					num19 = 17f;
				}
				if (num3 < 24f)
				{
					Kill();
				}
				num3 = num19 / num3;
				num *= num3;
				num2 *= num3;
				velocity.X = num;
				velocity.Y = num2;
			}
			else if (ai[0] == 2f)
			{
				Point point4 = base.Center.ToTileCoordinates();
				if (Main.tile[point4.X, point4.Y] == null)
				{
					Main.tile[point4.X, point4.Y] = new Tile();
				}
				bool flag = true;
				if (Main.tile[point4.X, point4.Y].nactive() && AI_007_GrapplingHooks_CanTileBeLatchedOnTo(Main.tile[point4.X, point4.Y]))
				{
					flag = false;
				}
				if (flag)
				{
					ai[0] = 1f;
				}
				else if (Main.player[owner].grapCount < 10)
				{
					Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
					Main.player[owner].grapCount++;
				}
			}
		}

		private bool AI_007_GrapplingHooks_CanTileBeLatchedOnTo(Tile theTile)
		{
			return Main.tileSolid[theTile.type] | (theTile.type == 314) | (type == 865 && TileID.Sets.IsATreeTrunk[theTile.type]) | (type == 865 && theTile.type == 323);
		}

		private void AI_147_Celeb2Rocket()
		{
			int num = 0;
			int num2 = 1;
			int num3 = 1;
			localAI[num] += 1f;
			alpha = 0;
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			int num4 = (int)ai[0];
			Lighting.AddLight(base.Center, GetCeleb2Color().ToVector3() * 0.5f);
			switch (num4)
			{
			case 0:
				if (localAI[num] >= 20f)
				{
					velocity.Y += 0.12f;
					penetrate = -1;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				if (localAI[num] > 20f && localAI[num] % 20f == 0f)
				{
					AI_147_Explosion();
				}
				break;
			case 1:
			{
				if (localAI[num] == 10f)
				{
					velocity.Y -= 10f;
				}
				if (localAI[num] >= 10f)
				{
					velocity.Y += 0.25f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				if (!(localAI[num] >= 10f))
				{
					break;
				}
				scale += 0.015f;
				if (scale > 2.5f)
				{
					scale = 2.5f;
				}
				if (localAI[num] % 10f != 0f)
				{
					break;
				}
				_ = velocity.Y;
				_ = 0f;
				for (float num5 = 0f; num5 < 1f; num5 += 0.12f)
				{
					Vector2 spinningpoint = Vector2.UnitX * -8f;
					spinningpoint += -Vector2.UnitY.RotatedBy(num5 * ((float)Math.PI * 2f)) * new Vector2(2f, 4f);
					spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
					int num6 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, Color.Lerp(GetCeleb2Color(), Color.White, Main.rand.NextFloat() * 0.3f));
					Main.dust[num6].scale = 0.9f;
					Main.dust[num6].fadeIn = 1.1f;
					Main.dust[num6].noGravity = true;
					Main.dust[num6].position = base.Center + spinningpoint;
					Main.dust[num6].velocity = -velocity * 0.35f + spinningpoint * 0.35f;
					Main.dust[num6].velocity *= scale;
					if (localAI[num] == 10f)
					{
						Main.dust[num6].velocity = spinningpoint.RotatedBy(velocity.ToRotation()) * 0.3f;
					}
				}
				break;
			}
			case 2:
				if (localAI[num] >= 60f)
				{
					velocity.Y += 0.15f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				break;
			case 3:
			{
				float num7 = localAI[num2];
				if (num7 == 0f)
				{
					float num8 = velocity.Length();
					localAI[num2] = num8;
					num7 = num8;
				}
				if (localAI[num] >= 25f && ai[num3] == 0f)
				{
					if (localAI[num] >= 20f)
					{
						velocity.Y += 0.15f;
					}
					if (velocity.Y > 16f)
					{
						velocity.Y = 16f;
					}
				}
				if (!(localAI[num] >= 20f))
				{
					break;
				}
				float num9 = position.X;
				float num10 = position.Y;
				float num11 = 800f;
				bool flag = false;
				int num12 = 0;
				if (ai[num3] == 0f)
				{
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].CanBeChasedBy(this) && (ai[num3] == 0f || ai[num3] == (float)(i + 1)))
						{
							float num13 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
							float num14 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
							float num15 = Math.Abs(position.X + (float)(width / 2) - num13) + Math.Abs(position.Y + (float)(height / 2) - num14);
							if (num15 < num11 && Collision.CanHit(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height))
							{
								num11 = num15;
								num9 = num13;
								num10 = num14;
								flag = true;
								num12 = i;
							}
						}
					}
					if (flag)
					{
						ai[1] = num12 + 1;
					}
					flag = false;
				}
				if (ai[num3] != 0f)
				{
					int num16 = (int)(ai[num3] - 1f);
					if (Main.npc[num16].active && Main.npc[num16].CanBeChasedBy(this, ignoreDontTakeDamage: true))
					{
						float num17 = Main.npc[num16].position.X + (float)(Main.npc[num16].width / 2);
						float num18 = Main.npc[num16].position.Y + (float)(Main.npc[num16].height / 2);
						if (Math.Abs(position.X + (float)(width / 2) - num17) + Math.Abs(position.Y + (float)(height / 2) - num18) < 1000f)
						{
							flag = true;
							num9 = Main.npc[num16].position.X + (float)(Main.npc[num16].width / 2);
							num10 = Main.npc[num16].position.Y + (float)(Main.npc[num16].height / 2);
						}
					}
				}
				if (!friendly)
				{
					flag = false;
				}
				if (flag)
				{
					float num19 = num7;
					Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num20 = num9 - vector.X;
					float num21 = num10 - vector.Y;
					float num22 = (float)Math.Sqrt(num20 * num20 + num21 * num21);
					num22 = num19 / num22;
					num20 *= num22;
					num21 *= num22;
					int num23 = 8;
					velocity.X = (velocity.X * (float)(num23 - 1) + num20) / (float)num23;
					velocity.Y = (velocity.Y * (float)(num23 - 1) + num21) / (float)num23;
				}
				break;
			}
			case 4:
			{
				if (localAI[num] == 1f && ai[1] == 1f)
				{
					localAI[num] += 45f;
				}
				float x = velocity.SafeNormalize(Vector2.Zero).RotatedBy(localAI[num] * ((float)Math.PI / 45f)).X;
				Vector2 value = velocity.SafeNormalize(Vector2.Zero).RotatedBy(1.5707963705062866);
				position += value * x * 3f;
				scale = 2f;
				if (localAI[num] >= 10f)
				{
					velocity.Y += 0.04f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				break;
			}
			case 5:
				if (localAI[num] >= 40f)
				{
					velocity.Y += 0.08f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				break;
			case 6:
				if (localAI[num] >= 30f)
				{
					velocity.Y += 0.1f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				break;
			}
		}

		private void AI_148_StarSpawner()
		{
			if (Main.dayTime)
			{
				Kill();
				return;
			}
			ai[0] += Main.dayRate;
			if (localAI[0] == 0f && Main.netMode != 2)
			{
				localAI[0] = 1f;
				if ((double)Main.LocalPlayer.position.Y < Main.worldSurface * 16.0)
				{
					Star.StarFall(position.X);
				}
			}
			if (owner != Main.myPlayer || !(ai[0] >= 180f))
			{
				return;
			}
			if (ai[1] > -1f)
			{
				velocity.X *= 0.35f;
				if (base.Center.X < Main.player[(int)ai[1]].Center.X)
				{
					velocity.X = Math.Abs(velocity.X);
				}
				else
				{
					velocity.X = 0f - Math.Abs(velocity.X);
				}
			}
			NewProjectile(position.X, position.Y, velocity.X, velocity.Y, 12, 1000, 10f, Main.myPlayer);
			Kill();
		}

		private void AI_147_Explosion()
		{
			switch ((int)ai[0])
			{
			case 0:
			{
				for (int k = 0; k < 4; k++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int l = 0; l < 20; l++)
				{
					int num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 130, 0f, 0f, 200, default(Color), 1.2f);
					Main.dust[num5].noGravity = true;
					Main.dust[num5].velocity *= 3f;
					num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 130, 0f, 0f, 200, default(Color), 0.5f);
					Main.dust[num5].velocity *= 1.2f;
					Main.dust[num5].noGravity = true;
				}
				for (int m = 0; m < 1; m++)
				{
					int num6 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num6].velocity *= 0.3f;
					Main.gore[num6].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num6].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				break;
			}
			case 1:
			{
				Color celeb2Color2 = GetCeleb2Color();
				Vector2 center2 = base.Center;
				Main.rand.NextFloat();
				for (float num7 = 0f; num7 < 1f; num7 += 0.0125f)
				{
					Dust dust4 = Dust.NewDustPerfect(center2, 278, null, 200, Color.Lerp(celeb2Color2, Color.White, Main.rand.NextFloat() * 0.6f));
					dust4.scale = 1.1f;
					dust4.fadeIn = 1.3f;
					dust4.velocity *= Main.rand.NextFloat() * 2f + 2f;
					if (dust4.velocity.Y > 0f)
					{
						dust4.velocity *= 0.3f;
					}
					dust4.velocity *= 2f;
				}
				for (int n = 0; n < 3; n++)
				{
					int num8 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num8].velocity *= 0.3f;
					Main.gore[num8].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num8].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				int fluff = 20;
				int distFluff = 100;
				int layerStart = 2;
				int layerEnd = 10;
				int layerJump = 2;
				CreateGroundExplosion(40f, fluff, distFluff, layerStart, layerEnd, layerJump);
				break;
			}
			case 2:
			{
				Vector2 center3 = base.Center;
				Color celeb2Color3 = GetCeleb2Color();
				float scaleFactor = 0.05f;
				float num9 = 0.13f;
				bool flag = Main.rand.Next(4) == 0;
				if (flag)
				{
					scaleFactor = 0.1f;
					num9 = 0.1f;
				}
				float num10 = Main.rand.NextFloatDirection();
				for (float num11 = 0f; num11 < 5f; num11 += 1f)
				{
					Vector2 spinningpoint = new Vector2(0f, -100f);
					Vector2 vector4 = center3 + spinningpoint.RotatedBy(num10 + num11 * ((float)Math.PI * 2f / 5f));
					Vector2 vector5 = center3 + spinningpoint.RotatedBy(num10 + (num11 + 1f) * ((float)Math.PI * 2f / 5f));
					Vector2 vector6 = center3 + spinningpoint.RotatedBy(num10 + (num11 + 0.5f) * ((float)Math.PI * 2f / 5f)) * 0.4f;
					for (int num12 = 0; num12 < 2; num12++)
					{
						Vector2 value = vector4;
						Vector2 value2 = vector6;
						if (num12 == 1)
						{
							value = vector6;
							value2 = vector5;
						}
						for (float num13 = 0f; num13 < 1f; num13 += num9)
						{
							Vector2 value3 = Vector2.Lerp(value, value2, num13);
							Vector2 vector7 = Vector2.Lerp(value3, center3, 0.9f);
							Vector2 value4 = (value3 - vector7).SafeNormalize(Vector2.Zero);
							Dust dust5 = Dust.NewDustPerfect(vector7, 267, Vector2.Zero, 0, celeb2Color3, 0.5f);
							dust5.fadeIn = 1.2f;
							dust5.noGravity = true;
							dust5.velocity = value4 * Vector2.Distance(value3, vector7) * scaleFactor;
						}
					}
				}
				if (flag)
				{
					for (int num14 = 0; num14 < 4; num14++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					}
					for (int num15 = 0; num15 < 60; num15++)
					{
						int num16 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 2.5f);
						Main.dust[num16].noGravity = true;
						Main.dust[num16].velocity *= 8f;
						num16 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 1.5f);
						Main.dust[num16].velocity *= 4.2f;
						Main.dust[num16].noGravity = true;
					}
					for (int num17 = 0; num17 < 1; num17++)
					{
						int num18 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num18].velocity *= 0.3f;
						Main.gore[num18].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
						Main.gore[num18].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
					}
				}
				else
				{
					for (int num19 = 0; num19 < 4; num19++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					}
					for (int num20 = 0; num20 < 40; num20++)
					{
						int num21 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 2.5f);
						Main.dust[num21].noGravity = true;
						Main.dust[num21].velocity *= 4f;
						num21 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 1.5f);
						Main.dust[num21].velocity *= 2.2f;
						Main.dust[num21].noGravity = true;
					}
					for (int num22 = 0; num22 < 1; num22++)
					{
						int num23 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num23].velocity *= 0.3f;
						Main.gore[num23].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
						Main.gore[num23].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
					}
				}
				break;
			}
			case 3:
			{
				Color celeb2Color5 = GetCeleb2Color();
				Vector2 center4 = base.Center;
				for (int num26 = 0; num26 < 4; num26++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				float num27 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
				for (int num28 = 0; num28 < 40; num28++)
				{
					Dust dust6 = Dust.NewDustPerfect(center4, 278, null, 100, Color.Lerp(celeb2Color5, Color.White, Main.rand.NextFloat() * 0.3f));
					dust6.scale = 1.3f * (dust6.velocity.Length() / 2f);
					dust6.fadeIn = 1.5f * (dust6.velocity.Length() / 2f);
					dust6.noGravity = true;
					dust6.velocity *= 6f;
					if (Math.Abs(dust6.velocity.X) > Math.Abs(dust6.velocity.Y))
					{
						dust6.velocity.Y *= 0.1f;
					}
					else
					{
						dust6.velocity.X *= 0.1f;
					}
					dust6.velocity = dust6.velocity.RotatedBy(num27);
				}
				for (int num29 = 0; num29 < 1; num29++)
				{
					int num30 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num30].velocity *= 0.3f;
					Main.gore[num30].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num30].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				break;
			}
			case 4:
			{
				GetCeleb2Color();
				Vector2 center5 = base.Center;
				Main.rand.NextFloat();
				for (float num31 = 0f; num31 < 1f; num31 += 0.025f)
				{
					Dust dust7 = Dust.NewDustPerfect(center5, 132, null, 200);
					dust7.scale = 1.1f;
					dust7.fadeIn = 1.5f;
					dust7.velocity *= Main.rand.NextFloat() * 2f + 2f;
					if (dust7.velocity.Y > 0f)
					{
						dust7.velocity *= 0.3f;
					}
					dust7.velocity *= 2f;
				}
				for (int num32 = 0; num32 < 3; num32++)
				{
					int num33 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num33].velocity *= 0.3f;
					Main.gore[num33].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num33].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				break;
			}
			case 5:
			{
				Color celeb2Color4 = GetCeleb2Color();
				_ = base.Center;
				for (int num24 = 0; num24 < 20; num24++)
				{
					int num25 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 278, 0f, 0f, 200, Color.Lerp(celeb2Color4, Color.White, Main.rand.NextFloat() * 0.4f), 2.5f);
					Main.dust[num25].fadeIn = 1.3f;
					Main.dust[num25].scale = 1.1f;
					Main.dust[num25].velocity *= 2f;
					num25 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 200, celeb2Color4, 2.5f);
					Main.dust[num25].velocity *= 1.2f;
					Main.dust[num25].noGravity = true;
				}
				break;
			}
			case 6:
			{
				Color celeb2Color = GetCeleb2Color();
				Vector2 center = base.Center;
				for (int i = 0; i < 4; i++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (float num = 0f; num < 1f; num += 0.015f)
				{
					Vector2 vector = Vector2.UnitY.RotatedBy(num * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.1f);
					Dust dust = Dust.NewDustPerfect(center + vector, 134, Vector2.Zero, 0, celeb2Color);
					dust.scale = 1.4f;
					dust.velocity = vector * 5f;
					dust.velocity.Y += -3f;
					dust.velocity *= 2f;
				}
				for (float num2 = 0f; num2 < 1f; num2 += 0.025f)
				{
					Vector2 vector2 = Vector2.UnitY.RotatedBy(num2 * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.2f);
					Dust dust2 = Dust.NewDustPerfect(center + vector2, 267, Vector2.Zero, 0, celeb2Color);
					dust2.noGravity = true;
					dust2.scale = 0.4f;
					dust2.fadeIn = 1.2f;
					dust2.velocity = vector2 * 4f;
					dust2.velocity.Y += -3f;
					dust2.velocity *= 2f;
				}
				for (float num3 = 0f; num3 < 1f; num3 += 0.07f)
				{
					Vector2 vector3 = Vector2.UnitY.RotatedBy(num3 * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.3f);
					Dust dust3 = Dust.NewDustPerfect(center + vector3, 267, Vector2.Zero, 0, celeb2Color);
					dust3.noGravity = true;
					dust3.scale = 0.4f;
					dust3.fadeIn = 1.3f;
					dust3.velocity = vector3 * 7f;
					dust3.velocity.Y += -3f;
					dust3.velocity *= 2f;
				}
				for (int j = 0; j < 1; j++)
				{
					int num4 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num4].velocity *= 0.3f;
					Main.gore[num4].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num4].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				break;
			}
			}
		}

		private void CreateGroundExplosion(float MAX_SPREAD, int fluff, int distFluff, int layerStart, int layerEnd, int layerJump)
		{
			Point point = base.TopLeft.ToTileCoordinates();
			Point point2 = base.BottomRight.ToTileCoordinates();
			point.X -= fluff;
			point.Y -= fluff;
			point2.X += fluff;
			point2.Y += fluff;
			int num = point.X / 2 + point2.X / 2;
			int num2 = width / 2 + distFluff;
			for (int i = layerStart; i < layerEnd; i += layerJump)
			{
				int num3 = i;
				for (int j = point.X; j <= point2.X; j++)
				{
					for (int k = point.Y; k <= point2.Y; k++)
					{
						if (!WorldGen.InWorld(j, k, 10))
						{
							return;
						}
						if (Vector2.Distance(base.Center, new Vector2(j * 16, k * 16)) > (float)num2)
						{
							continue;
						}
						Tile tileSafely = Framing.GetTileSafely(j, k);
						if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
						{
							continue;
						}
						Tile tileSafely2 = Framing.GetTileSafely(j, k - 1);
						if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
						{
							continue;
						}
						int num4 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
						for (int l = 0; l < num4; l++)
						{
							Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(j, k, tileSafely)];
							obj.velocity.Y -= 3f + (float)num3 * 1.5f;
							obj.velocity.Y *= Main.rand.NextFloat();
							obj.scale += (float)num3 * 0.03f;
						}
						if (num3 >= 2)
						{
							for (int m = 0; m < num4 - 1; m++)
							{
								Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(j, k, tileSafely)];
								obj2.velocity.Y -= 1f + (float)num3;
								obj2.velocity.Y *= Main.rand.NextFloat();
							}
						}
						if (num4 > 0 && Main.rand.Next(3) != 0)
						{
							float num5 = (float)Math.Abs(num - j) / (MAX_SPREAD / 2f);
							Gore gore = Gore.NewGoreDirect(position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num3 * 0.15f + num5 * 0.5f);
							gore.velocity.Y -= 0.1f + (float)num3 * 0.5f + num5 * (float)num3 * 1f;
							gore.velocity.Y *= Main.rand.NextFloat();
							gore.position = new Vector2(j * 16 + 20, k * 16 + 20);
						}
					}
				}
			}
		}

		public void CheckUsability(Player player, bool currentlyUsable)
		{
			if (aiStyle == 160)
			{
				currentlyUsable = false;
			}
		}

		private void AI_163_Chum()
		{
			float num = 0.05f;
			float num2 = width / 2;
			for (int i = 0; i < 1000; i++)
			{
				if (i != whoAmI && Main.projectile[i].active && Main.projectile[i].type == type && Math.Abs(position.X - Main.projectile[i].position.X) + Math.Abs(position.Y - Main.projectile[i].position.Y) < num2)
				{
					if (position.X < Main.projectile[i].position.X)
					{
						velocity.X -= num;
					}
					else
					{
						velocity.X += num;
					}
					if (position.Y < Main.projectile[i].position.Y)
					{
						velocity.Y -= num;
					}
					else
					{
						velocity.Y += num;
					}
				}
			}
			if (wet)
			{
				velocity.X *= 0.9f;
				int num3 = (int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16;
				int num4 = (int)(base.Center.Y / 16f);
				_ = position.Y / 16f;
				int num5 = (int)((position.Y + (float)height) / 16f);
				if (Main.tile[num3, num4] == null)
				{
					Main.tile[num3, num4] = new Tile();
				}
				if (Main.tile[num3, num5] == null)
				{
					Main.tile[num3, num5] = new Tile();
				}
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.5f;
				}
				num3 = (int)(base.Center.X / 16f);
				num4 = (int)(base.Center.Y / 16f);
				float num6 = AI_061_FishingBobber_GetWaterLine(num3, num4);
				if (base.Center.Y > num6)
				{
					velocity.Y -= 0.1f;
					if (velocity.Y < -8f)
					{
						velocity.Y = -8f;
					}
					if (base.Center.Y + velocity.Y < num6)
					{
						velocity.Y = num6 - base.Center.Y;
					}
				}
				else
				{
					velocity.Y = num6 - base.Center.Y;
				}
			}
			else
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.95f;
				}
				velocity.X *= 0.98f;
				velocity.Y += 0.3f;
				if (velocity.Y > 15.9f)
				{
					velocity.Y = 15.9f;
				}
			}
			if (frameCounter == 0)
			{
				frameCounter = 1;
				frame = Main.rand.Next(4);
			}
			if (frameCounter < 10 && wet)
			{
				frameCounter++;
				for (float num7 = 0f; num7 < 1f; num7 += 0.5f)
				{
					Gore gore = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1201, scale * 0.7f);
					gore.velocity = Main.rand.NextVector2CircularEdge(10f, 10f);
					if (gore.velocity.Y > 0f)
					{
						gore.velocity.Y *= -1f;
					}
				}
				for (float num8 = 0f; num8 < 2f; num8 += 1f)
				{
					Gore gore2 = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1208, scale * 0.7f + Main.rand.NextFloat() * 0.15f);
					gore2.velocity = Main.rand.NextVector2CircularEdge(4f, 4f);
					if (gore2.velocity.Y > 0f)
					{
						gore2.velocity.Y *= -1f;
					}
				}
			}
			scale = Utils.GetLerpValue(0f, 60f, timeLeft, clamped: true);
			rotation += velocity.X * 0.14f;
			bool flag = !wet && velocity.Length() < 0.8f;
			int maxValue = (wet ? 90 : 5);
			if (Main.rand.Next(maxValue) == 0 && !flag)
			{
				Gore gore3 = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1201, scale * 0.7f);
				if (wet)
				{
					gore3.velocity = Vector2.UnitX * Main.rand.NextFloatDirection() * 0.75f + Vector2.UnitY * Main.rand.NextFloat();
				}
				else if (gore3.velocity.Y < 0f)
				{
					gore3.velocity.Y = 0f - gore3.velocity.Y;
				}
			}
			Vector2 spot = base.Center + Vector2.UnitY * 16f;
			if (ai[0] >= 10f && timeLeft > 60)
			{
				timeLeft = 60;
				netUpdate = true;
			}
			if (ai[0] < 10f && timeLeft > 60)
			{
				Main.instance.ChumBucketProjectileHelper.AddChumLocation(spot);
			}
		}

		private void ReduceRemainingChumsInPool()
		{
			int x = (int)base.Center.X / 16;
			int num = (int)base.Center.Y / 16;
			List<Tuple<int, Point>> list = new List<Tuple<int, Point>>();
			List<int> list2 = new List<int>();
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == Main.myPlayer && projectile.timeLeft > 60 && projectile.type == 820)
				{
					list.Add(new Tuple<int, Point>(i, (projectile.Center + Vector2.UnitY * 16f).ToTileCoordinates()));
				}
			}
			if (list.Count == 0)
			{
				return;
			}
			GetFishingPondWidth(x, num, out var minX, out var maxX);
			Point b = default(Point);
			for (int j = minX; j <= maxX; j++)
			{
				b.X = j;
				int num2 = num;
				while (Main.tile[j, num2].liquid > 0 && !WorldGen.SolidTile(j, num2) && num2 < Main.maxTilesY - 10)
				{
					num2 = (b.Y = num2 + 1);
					for (int num3 = list.Count - 1; num3 >= 0; num3--)
					{
						if (list[num3].Item2 == b)
						{
							list2.Add(list[num3].Item1);
							list.RemoveAt(num3);
						}
					}
					if (list.Count == 0)
					{
						break;
					}
				}
				if (list.Count == 0)
				{
					break;
				}
			}
			for (int k = 0; k < list2.Count; k++)
			{
				Projectile obj = Main.projectile[list2[k]];
				obj.ai[0] += 1f;
				obj.netUpdate = true;
			}
		}

		private void AI_061_FishingBobber()
		{
			Player player = Main.player[owner];
			timeLeft = 60;
			bool flag = false;
			if (player.inventory[player.selectedItem].fishingPole == 0 || player.CCed || player.noItems)
			{
				flag = true;
			}
			else if (player.inventory[player.selectedItem].shoot != type)
			{
				flag = true;
			}
			else if (player.pulley)
			{
				flag = true;
			}
			else if (player.dead)
			{
				flag = true;
			}
			if (flag)
			{
				Kill();
				return;
			}
			if (ai[1] > 0f && localAI[1] != 0f)
			{
				localAI[1] = 0f;
				if (!lavaWet && !honeyWet)
				{
					AI_061_FishingBobber_DoASplash();
				}
			}
			if (ai[0] >= 1f)
			{
				if (ai[0] == 2f)
				{
					ai[0] += 1f;
					SoundEngine.PlaySound(SoundID.Item17, position);
					if (!lavaWet && !honeyWet)
					{
						AI_061_FishingBobber_DoASplash();
					}
				}
				if (localAI[0] < 100f)
				{
					localAI[0] += 1f;
				}
				if (frameCounter == 0)
				{
					frameCounter = 1;
					ReduceRemainingChumsInPool();
				}
				tileCollide = false;
				int num = 10;
				Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num2 = player.position.X + (float)(player.width / 2) - vector.X;
				float num3 = player.position.Y + (float)(player.height / 2) - vector.Y;
				float num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
				if (num4 > 3000f)
				{
					Kill();
				}
				num4 = 15.9f / num4;
				num2 *= num4;
				num3 *= num4;
				velocity.X = (velocity.X * (float)(num - 1) + num2) / (float)num;
				velocity.Y = (velocity.Y * (float)(num - 1) + num3) / (float)num;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				if (Main.myPlayer == owner && base.Hitbox.Intersects(player.Hitbox))
				{
					Kill();
				}
				return;
			}
			bool flag2 = false;
			Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num5 = player.position.X + (float)(player.width / 2) - vector2.X;
			float num6 = player.position.Y + (float)(player.height / 2) - vector2.Y;
			rotation = (float)Math.Atan2(num6, num5) + 1.57f;
			if ((float)Math.Sqrt(num5 * num5 + num6 * num6) > 900f)
			{
				ai[0] = 1f;
			}
			if (wet)
			{
				rotation = 0f;
				velocity.X *= 0.9f;
				int num7 = (int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16;
				int num8 = (int)(base.Center.Y / 16f);
				_ = position.Y / 16f;
				int num9 = (int)((position.Y + (float)height) / 16f);
				if (Main.tile[num7, num8] == null)
				{
					Main.tile[num7, num8] = new Tile();
				}
				if (Main.tile[num7, num9] == null)
				{
					Main.tile[num7, num9] = new Tile();
				}
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.5f;
				}
				num7 = (int)(base.Center.X / 16f);
				num8 = (int)(base.Center.Y / 16f);
				float num10 = AI_061_FishingBobber_GetWaterLine(num7, num8);
				if (base.Center.Y > num10)
				{
					velocity.Y -= 0.1f;
					if (velocity.Y < -8f)
					{
						velocity.Y = -8f;
					}
					if (base.Center.Y + velocity.Y < num10)
					{
						velocity.Y = num10 - base.Center.Y;
					}
				}
				else
				{
					velocity.Y = num10 - base.Center.Y;
				}
				if ((double)velocity.Y >= -0.01 && (double)velocity.Y <= 0.01)
				{
					flag2 = true;
				}
			}
			else
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.95f;
				}
				velocity.X *= 0.98f;
				velocity.Y += 0.2f;
				if (velocity.Y > 15.9f)
				{
					velocity.Y = 15.9f;
				}
			}
			if (Main.myPlayer == owner && player.GetFishingConditions().BaitItemType == 2673)
			{
				player.displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
			}
			if (ai[1] != 0f)
			{
				flag2 = true;
			}
			if (!flag2)
			{
				return;
			}
			if (ai[1] == 0f && Main.myPlayer == owner)
			{
				int finalFishingLevel = player.GetFishingConditions().FinalFishingLevel;
				if (Main.rand.Next(300) < finalFishingLevel)
				{
					localAI[1] += Main.rand.Next(1, 3);
				}
				localAI[1] += finalFishingLevel / 30;
				localAI[1] += Main.rand.Next(1, 3);
				if (Main.rand.Next(60) == 0)
				{
					localAI[1] += 60f;
				}
				if (localAI[1] > 660f)
				{
					localAI[1] = 0f;
					FishingCheck();
				}
			}
			else if (ai[1] < 0f)
			{
				if (velocity.Y == 0f || (honeyWet && Math.Abs(velocity.Y) <= 0.01f))
				{
					velocity.Y = (float)Main.rand.Next(100, 500) * 0.015f;
					velocity.X = (float)Main.rand.Next(-100, 101) * 0.015f;
					wet = false;
					lavaWet = false;
					honeyWet = false;
				}
				ai[1] += Main.rand.Next(1, 5);
				if (ai[1] >= 0f)
				{
					ai[1] = 0f;
					localAI[1] = 0f;
					netUpdate = true;
				}
			}
		}

		private float AI_061_FishingBobber_GetWaterLine(int X, int Y)
		{
			float result = position.Y + (float)height;
			if (Main.tile[X, Y - 1] == null)
			{
				Main.tile[X, Y - 1] = new Tile();
			}
			if (Main.tile[X, Y] == null)
			{
				Main.tile[X, Y] = new Tile();
			}
			if (Main.tile[X, Y + 1] == null)
			{
				Main.tile[X, Y + 1] = new Tile();
			}
			if (Main.tile[X, Y - 1].liquid > 0)
			{
				result = Y * 16;
				result -= (float)((int)Main.tile[X, Y - 1].liquid / 16);
			}
			else if (Main.tile[X, Y].liquid > 0)
			{
				result = (Y + 1) * 16;
				result -= (float)((int)Main.tile[X, Y].liquid / 16);
			}
			else if (Main.tile[X, Y + 1].liquid > 0)
			{
				result = (Y + 2) * 16;
				result -= (float)((int)Main.tile[X, Y + 1].liquid / 16);
			}
			return result;
		}

		private void AI_061_FishingBobber_DoASplash()
		{
			for (int i = 0; i < 100; i++)
			{
				int num = Dust.NewDust(new Vector2(position.X - 6f, position.Y - 10f), width + 12, 24, Dust.dustWater());
				Main.dust[num].velocity.Y -= 4f;
				Main.dust[num].velocity.X *= 2.5f;
				Main.dust[num].scale = 0.8f;
				Main.dust[num].alpha = 100;
				Main.dust[num].noGravity = true;
			}
			SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
		}

		private void AI_061_FishingBobber_GiveItemToPlayer(Player thePlayer, int itemType)
		{
			Item item = new Item();
			item.SetDefaults(itemType);
			if (itemType == 3196)
			{
				int finalFishingLevel = thePlayer.GetFishingConditions().FinalFishingLevel;
				int minValue = (finalFishingLevel / 20 + 3) / 2;
				int num = (finalFishingLevel / 10 + 6) / 2;
				if (Main.rand.Next(50) < finalFishingLevel)
				{
					num++;
				}
				if (Main.rand.Next(100) < finalFishingLevel)
				{
					num++;
				}
				if (Main.rand.Next(150) < finalFishingLevel)
				{
					num++;
				}
				if (Main.rand.Next(200) < finalFishingLevel)
				{
					num++;
				}
				int num2 = (item.stack = Main.rand.Next(minValue, num + 1));
			}
			if (itemType == 3197)
			{
				int finalFishingLevel2 = thePlayer.GetFishingConditions().FinalFishingLevel;
				int minValue2 = (finalFishingLevel2 / 4 + 15) / 2;
				int num3 = (finalFishingLevel2 / 2 + 30) / 2;
				if (Main.rand.Next(50) < finalFishingLevel2)
				{
					num3 += 4;
				}
				if (Main.rand.Next(100) < finalFishingLevel2)
				{
					num3 += 4;
				}
				if (Main.rand.Next(150) < finalFishingLevel2)
				{
					num3 += 4;
				}
				if (Main.rand.Next(200) < finalFishingLevel2)
				{
					num3 += 4;
				}
				int num4 = (item.stack = Main.rand.Next(minValue2, num3 + 1));
			}
			item.newAndShiny = true;
			if (thePlayer.GetItem(owner, item, default(GetItemSettings)).stack > 0)
			{
				int number = Item.NewItem((int)position.X, (int)position.Y, width, height, itemType, 1, noBroadcast: false, 0, noGrabDelay: true);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f);
				}
			}
			else
			{
				item.position.X = base.Center.X - (float)(item.width / 2);
				item.position.Y = base.Center.Y - (float)(item.height / 2);
				item.active = true;
				PopupText.NewText(PopupTextContext.RegularItemPickup, item, 0);
			}
		}

		private void AI_146_DD2Victory()
		{
		}

		private void BetsySharpnel(int npcIndex)
		{
			if (ai[1] != -1f && owner == Main.myPlayer)
			{
				Vector2 spinningpoint = new Vector2(0f, 6f);
				Vector2 center = base.Center;
				float num = (float)Math.PI / 4f;
				int num2 = 5;
				float num3 = (0f - num * 2f) / (float)(num2 - 1);
				for (int i = 0; i < num2; i++)
				{
					int num4 = NewProjectile(center, spinningpoint.RotatedBy(num + num3 * (float)i), 710, damage, knockBack, owner, 0f, -1f);
					Projectile p = Main.projectile[num4];
					CopyLocalNPCImmunityTimes(p);
				}
			}
		}

		private void CopyLocalNPCImmunityTimes(Projectile p)
		{
			for (int i = 0; i < localNPCImmunity.Length; i++)
			{
				p.localNPCImmunity[i] = localNPCImmunity[i];
			}
		}

		private void AI_001()
		{
			//IL_21dc: Unknown result type (might be due to invalid IL or missing references)
			//IL_57e7: Unknown result type (might be due to invalid IL or missing references)
			//IL_57ec: Unknown result type (might be due to invalid IL or missing references)
			//IL_58cd: Unknown result type (might be due to invalid IL or missing references)
			//IL_58f3: Unknown result type (might be due to invalid IL or missing references)
			//IL_58f8: Unknown result type (might be due to invalid IL or missing references)
			//IL_7c51: Unknown result type (might be due to invalid IL or missing references)
			//IL_7e76: Unknown result type (might be due to invalid IL or missing references)
			if (type == 469 && wet && !honeyWet)
			{
				Kill();
			}
			if (type == 601)
			{
				Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[0]);
				Vector3 rgb = portalColor.ToVector3();
				rgb *= 0.5f;
				Lighting.AddLight(base.Center + base.velocity * 3f, rgb);
				if (alpha > 0 && alpha <= 15)
				{
					Color color = portalColor;
					color.A = byte.MaxValue;
					for (int i = 0; i < 4; i++)
					{
						Dust obj = Main.dust[Dust.NewDust(base.Center, 0, 0, 264)];
						obj.position = base.Center;
						obj.velocity = base.velocity * 2f + Utils.RandomVector2(Main.rand, -1f, 1f);
						obj.color = color;
						obj.scale = 1.2f;
						obj.noLight = true;
						obj.noGravity = true;
						obj.customData = Main.player[owner];
					}
					if (ai[0] != 0f)
					{
						SoundEngine.PlaySound(SoundID.Item114, base.position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item115, base.position);
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (alpha == 0)
				{
					Color color2 = portalColor;
					color2.A = byte.MaxValue;
					Dust obj2 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263)];
					obj2.position = base.Center;
					obj2.velocity = base.velocity / 4f;
					obj2.color = color2;
					obj2.noGravity = true;
					obj2.scale = 0.6f;
				}
			}
			if (type == 472)
			{
				int num = Dust.NewDust(base.position, width, height, 30);
				Main.dust[num].noGravity = true;
				Main.dust[num].velocity *= 0.25f;
				Main.dust[num].velocity += base.velocity * 0.75f;
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, base.position);
					for (int j = 0; j < 20; j++)
					{
						num = Dust.NewDust(base.position, width, height, 30);
						Main.dust[num].noGravity = true;
						Main.dust[num].velocity *= 0.25f;
						Main.dust[num].velocity += base.velocity;
						Main.dust[num].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					}
				}
			}
			if (type == 323)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 436)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item12, base.position);
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 1.1f, 0.5f);
			}
			if (type == 467)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item34, base.position);
				}
				else if (ai[1] == 1f && Main.netMode != 1)
				{
					int num2 = -1;
					float num3 = 2000f;
					for (int k = 0; k < 255; k++)
					{
						if (Main.player[k].active && !Main.player[k].dead)
						{
							Vector2 center = Main.player[k].Center;
							float num4 = Vector2.Distance(center, base.Center);
							if ((num4 < num3 || num2 == -1) && Collision.CanHit(base.Center, 1, 1, center, 1, 1))
							{
								num3 = num4;
								num2 = k;
							}
						}
					}
					if (num3 < 20f)
					{
						Kill();
						return;
					}
					if (num2 != -1)
					{
						ai[1] = 21f;
						ai[0] = num2;
						netUpdate = true;
					}
				}
				else if (ai[1] > 20f && ai[1] < 200f)
				{
					ai[1] += 1f;
					int num5 = (int)ai[0];
					if (!Main.player[num5].active || Main.player[num5].dead)
					{
						ai[1] = 1f;
						ai[0] = 0f;
						netUpdate = true;
					}
					else
					{
						float num6 = base.velocity.ToRotation();
						Vector2 vector = Main.player[num5].Center - base.Center;
						if (vector.Length() < 20f)
						{
							Kill();
							return;
						}
						float targetAngle = vector.ToRotation();
						if (vector == Vector2.Zero)
						{
							targetAngle = num6;
						}
						float num7 = num6.AngleLerp(targetAngle, 0.008f);
						base.velocity = new Vector2(base.velocity.Length(), 0f).RotatedBy(num7);
					}
				}
				if (ai[1] >= 1f && ai[1] < 20f)
				{
					ai[1] += 1f;
					if (ai[1] == 20f)
					{
						ai[1] = 1f;
					}
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
				localAI[0] += 1f;
				if (localAI[0] == 12f)
				{
					localAI[0] = 0f;
					for (int l = 0; l < 12; l++)
					{
						Vector2 spinningpoint = Vector2.UnitX * -width / 2f;
						spinningpoint += -Vector2.UnitY.RotatedBy((float)l * (float)Math.PI / 6f) * new Vector2(8f, 16f);
						spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
						int num8 = Dust.NewDust(base.Center, 0, 0, 6, 0f, 0f, 160);
						Main.dust[num8].scale = 1.1f;
						Main.dust[num8].noGravity = true;
						Main.dust[num8].position = base.Center + spinningpoint;
						Main.dust[num8].velocity = base.velocity * 0.1f;
						Main.dust[num8].velocity = Vector2.Normalize(base.Center - base.velocity * 3f - Main.dust[num8].position) * 1.25f;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int m = 0; m < 1; m++)
					{
						Vector2 value = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(base.velocity.ToRotation());
						int num9 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
						Main.dust[num9].velocity *= 0.1f;
						Main.dust[num9].position = base.Center + value * width / 2f;
						Main.dust[num9].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(32) == 0)
				{
					for (int n = 0; n < 1; n++)
					{
						Vector2 value2 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(base.velocity.ToRotation());
						int num10 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num10].velocity *= 0.3f;
						Main.dust[num10].position = base.Center + value2 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num10].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					for (int num11 = 0; num11 < 2; num11++)
					{
						Vector2 value3 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(base.velocity.ToRotation());
						int num12 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num12].velocity *= 0.3f;
						Main.dust[num12].noGravity = true;
						Main.dust[num12].position = base.Center + value3 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num12].fadeIn = 1.4f;
						}
					}
				}
			}
			if (type == 468)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item34, base.position);
				}
				else if (ai[1] == 1f && Main.netMode != 1)
				{
					int num13 = -1;
					float num14 = 2000f;
					for (int num15 = 0; num15 < 255; num15++)
					{
						if (Main.player[num15].active && !Main.player[num15].dead)
						{
							Vector2 center2 = Main.player[num15].Center;
							float num16 = Vector2.Distance(center2, base.Center);
							if ((num16 < num14 || num13 == -1) && Collision.CanHit(base.Center, 1, 1, center2, 1, 1))
							{
								num14 = num16;
								num13 = num15;
							}
						}
					}
					if (num14 < 20f)
					{
						Kill();
						return;
					}
					if (num13 != -1)
					{
						ai[1] = 21f;
						ai[0] = num13;
						netUpdate = true;
					}
				}
				else if (ai[1] > 20f && ai[1] < 200f)
				{
					ai[1] += 1f;
					int num17 = (int)ai[0];
					if (!Main.player[num17].active || Main.player[num17].dead)
					{
						ai[1] = 1f;
						ai[0] = 0f;
						netUpdate = true;
					}
					else
					{
						float num18 = base.velocity.ToRotation();
						Vector2 vector2 = Main.player[num17].Center - base.Center;
						if (vector2.Length() < 20f)
						{
							Kill();
							return;
						}
						float targetAngle2 = vector2.ToRotation();
						if (vector2 == Vector2.Zero)
						{
							targetAngle2 = num18;
						}
						float num19 = num18.AngleLerp(targetAngle2, 0.01f);
						base.velocity = new Vector2(base.velocity.Length(), 0f).RotatedBy(num19);
					}
				}
				if (ai[1] >= 1f && ai[1] < 20f)
				{
					ai[1] += 1f;
					if (ai[1] == 20f)
					{
						ai[1] = 1f;
					}
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 0.2f, 0.1f, 0.6f);
				localAI[0] += 1f;
				if (localAI[0] == 12f)
				{
					localAI[0] = 0f;
					for (int num20 = 0; num20 < 12; num20++)
					{
						Vector2 spinningpoint2 = Vector2.UnitX * -width / 2f;
						spinningpoint2 += -Vector2.UnitY.RotatedBy((float)num20 * (float)Math.PI / 6f) * new Vector2(8f, 16f);
						spinningpoint2 = spinningpoint2.RotatedBy(rotation - (float)Math.PI / 2f);
						int num21 = Dust.NewDust(base.Center, 0, 0, 27, 0f, 0f, 160);
						Main.dust[num21].scale = 1.1f;
						Main.dust[num21].noGravity = true;
						Main.dust[num21].position = base.Center + spinningpoint2;
						Main.dust[num21].velocity = base.velocity * 0.1f;
						Main.dust[num21].velocity = Vector2.Normalize(base.Center - base.velocity * 3f - Main.dust[num21].position) * 1.25f;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int num22 = 0; num22 < 1; num22++)
					{
						Vector2 value4 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(base.velocity.ToRotation());
						int num23 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
						Main.dust[num23].velocity *= 0.1f;
						Main.dust[num23].position = base.Center + value4 * width / 2f;
						Main.dust[num23].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(32) == 0)
				{
					for (int num24 = 0; num24 < 1; num24++)
					{
						Vector2 value5 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(base.velocity.ToRotation());
						int num25 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num25].velocity *= 0.3f;
						Main.dust[num25].position = base.Center + value5 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num25].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					for (int num26 = 0; num26 < 2; num26++)
					{
						Vector2 value6 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(base.velocity.ToRotation());
						int num27 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num27].velocity *= 0.3f;
						Main.dust[num27].noGravity = true;
						Main.dust[num27].position = base.Center + value6 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num27].fadeIn = 1.4f;
						}
					}
				}
			}
			if (type == 634 || type == 635)
			{
				float num28 = 5f;
				float num29 = 250f;
				float num30 = 6f;
				Vector2 value7 = new Vector2(8f, 10f);
				float num31 = 1.2f;
				Vector3 rgb2 = new Vector3(0.7f, 0.1f, 0.5f);
				int num32 = 4 * MaxUpdates;
				int num33 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
				int num34 = 255;
				if (type == 635)
				{
					value7 = new Vector2(10f, 20f);
					num31 = 1f;
					num29 = 500f;
					num34 = 88;
					num32 = 3 * MaxUpdates;
					rgb2 = new Vector3(0.4f, 0.6f, 0.9f);
					num33 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					localAI[0] = -Main.rand.Next(48);
					SoundEngine.PlaySound(SoundID.Item34, base.position);
				}
				else if (ai[1] == 1f && owner == Main.myPlayer)
				{
					int num35 = -1;
					float num36 = num29;
					for (int num37 = 0; num37 < 200; num37++)
					{
						if (Main.npc[num37].active && Main.npc[num37].CanBeChasedBy(this))
						{
							Vector2 center3 = Main.npc[num37].Center;
							float num38 = Vector2.Distance(center3, base.Center);
							if (num38 < num36 && num35 == -1 && Collision.CanHitLine(base.Center, 1, 1, center3, 1, 1))
							{
								num36 = num38;
								num35 = num37;
							}
						}
					}
					if (num36 < 20f)
					{
						Kill();
						return;
					}
					if (num35 != -1)
					{
						ai[1] = num28 + 1f;
						ai[0] = num35;
						netUpdate = true;
					}
				}
				else if (ai[1] > num28)
				{
					ai[1] += 1f;
					int num39 = (int)ai[0];
					if (!Main.npc[num39].active || !Main.npc[num39].CanBeChasedBy(this))
					{
						ai[1] = 1f;
						ai[0] = 0f;
						netUpdate = true;
					}
					else
					{
						base.velocity.ToRotation();
						Vector2 vector3 = Main.npc[num39].Center - base.Center;
						if (vector3.Length() < 20f)
						{
							Kill();
							return;
						}
						if (vector3 != Vector2.Zero)
						{
							vector3.Normalize();
							vector3 *= num30;
						}
						float num40 = 30f;
						base.velocity = (base.velocity * (num40 - 1f) + vector3) / num40;
					}
				}
				if (ai[1] >= 1f && ai[1] < num28)
				{
					ai[1] += 1f;
					if (ai[1] == num28)
					{
						ai[1] = 1f;
					}
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= num32)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight(base.Center, rgb2);
				rotation = base.velocity.ToRotation();
				localAI[0] += 1f;
				if (localAI[0] == 48f)
				{
					localAI[0] = 0f;
				}
				else if (alpha == 0)
				{
					for (int num41 = 0; num41 < 2; num41++)
					{
						Vector2 vector4 = Vector2.UnitX * -30f;
						vector4 = -Vector2.UnitY.RotatedBy(localAI[0] * ((float)Math.PI / 24f) + (float)num41 * (float)Math.PI) * value7 - rotation.ToRotationVector2() * 10f;
						int num42 = Dust.NewDust(base.Center, 0, 0, num34, 0f, 0f, 160);
						Main.dust[num42].scale = num31;
						Main.dust[num42].noGravity = true;
						Main.dust[num42].position = base.Center + vector4 + base.velocity * 2f;
						Main.dust[num42].velocity = Vector2.Normalize(base.Center + base.velocity * 2f * 8f - Main.dust[num42].position) * 2f + base.velocity * 2f;
					}
				}
				if (Main.rand.Next(12) == 0)
				{
					for (int num43 = 0; num43 < 1; num43++)
					{
						Vector2 value8 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(base.velocity.ToRotation());
						int num44 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
						Main.dust[num44].velocity *= 0.1f;
						Main.dust[num44].position = base.Center + value8 * width / 2f + base.velocity * 2f;
						Main.dust[num44].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(64) == 0)
				{
					for (int num45 = 0; num45 < 1; num45++)
					{
						Vector2 value9 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(base.velocity.ToRotation());
						int num46 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num46].velocity *= 0.3f;
						Main.dust[num46].position = base.Center + value9 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num46].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int num47 = 0; num47 < 2; num47++)
					{
						Vector2 value10 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(base.velocity.ToRotation());
						int num48 = Dust.NewDust(base.position, width, height, num33, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num48].velocity *= 0.3f;
						Main.dust[num48].noGravity = true;
						Main.dust[num48].position = base.Center + value10 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num48].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(12) == 0 && type == 634)
				{
					Vector2 value11 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(base.velocity.ToRotation());
					int num49 = Dust.NewDust(base.position, width, height, num34, 0f, 0f, 100);
					Main.dust[num49].velocity *= 0.3f;
					Main.dust[num49].position = base.Center + value11 * width / 2f;
					Main.dust[num49].fadeIn = 0.9f;
					Main.dust[num49].noGravity = true;
				}
				if (Main.rand.Next(3) == 0 && type == 635)
				{
					Vector2 value12 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(base.velocity.ToRotation());
					int num50 = Dust.NewDust(base.position, width, height, num34, 0f, 0f, 100);
					Main.dust[num50].velocity *= 0.3f;
					Main.dust[num50].position = base.Center + value12 * width / 2f;
					Main.dust[num50].fadeIn = 1.2f;
					Main.dust[num50].scale = 1.5f;
					Main.dust[num50].noGravity = true;
				}
			}
			if (type == 459)
			{
				alpha -= 30;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 3)
					{
						frame = 0;
					}
				}
				base.position = base.Center;
				scale = ai[1];
				width = (height = (int)(22f * scale));
				base.Center = base.position;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
				int num51 = 0;
				if ((double)scale < 0.85)
				{
					num51 = ((Main.rand.Next(3) == 0) ? 1 : 0);
				}
				else
				{
					num51 = 1;
					penetrate = -1;
					maxPenetrate = -1;
				}
				for (int num52 = 0; num52 < num51; num52++)
				{
					int num53 = Dust.NewDust(base.position, width, height, 226, base.velocity.X);
					Main.dust[num53].position -= Vector2.One * 3f;
					Main.dust[num53].scale = 0.5f;
					Main.dust[num53].noGravity = true;
					Main.dust[num53].velocity = base.velocity / 3f;
					Main.dust[num53].alpha = 255 - (int)(255f * scale);
				}
			}
			if (type == 709)
			{
				alpha -= 30;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 3)
					{
						frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
				if (ai[1] == 0f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_SkyDragonsFuryShot, base.Center);
				}
				ai[1] += 1f;
				if (ai[1] >= 30f)
				{
					Kill();
					return;
				}
			}
			if (type == 442)
			{
				frame = 0;
				if (alpha != 0)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 4f)
					{
						alpha -= 90;
						if (alpha < 0)
						{
							alpha = 0;
							localAI[0] = 2f;
						}
					}
				}
				if (Vector2.Distance(base.Center, new Vector2(ai[0], ai[1]) * 16f + Vector2.One * 8f) <= 16f)
				{
					Kill();
					return;
				}
				if (alpha == 0)
				{
					localAI[1] += 1f;
					if (localAI[1] >= 120f)
					{
						Kill();
						return;
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.45f, 0.8f);
					localAI[0] += 1f;
					if (localAI[0] == 3f)
					{
						localAI[0] = 0f;
						for (int num54 = 0; num54 < 8; num54++)
						{
							Vector2 spinningpoint3 = Vector2.UnitX * -8f;
							spinningpoint3 += -Vector2.UnitY.RotatedBy((float)num54 * (float)Math.PI / 4f) * new Vector2(2f, 4f);
							spinningpoint3 = spinningpoint3.RotatedBy(rotation - (float)Math.PI / 2f);
							int num55 = Dust.NewDust(base.Center, 0, 0, 135);
							Main.dust[num55].scale = 1.5f;
							Main.dust[num55].noGravity = true;
							Main.dust[num55].position = base.Center + spinningpoint3;
							Main.dust[num55].velocity = base.velocity * 0.66f;
						}
					}
				}
			}
			if (type == 440 || type == 449 || type == 606)
			{
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (type == 440)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.25f, 0.4f, 0.7f);
				}
				if (type == 449)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.7f, 0.65f, 0.3f);
				}
				if (type == 606)
				{
					Lighting.AddLight(base.Center, 0.7f, 0.3f, 0.3f);
				}
				float num56 = 100f;
				float num57 = 3f;
				if (type == 606)
				{
					num56 = 150f;
					num57 = 5f;
				}
				if (ai[1] == 0f)
				{
					localAI[0] += num57;
					if (localAI[0] == num57 * 1f && type == 606)
					{
						for (int num58 = 0; num58 < 4; num58++)
						{
							int num59 = Dust.NewDust(base.Center - base.velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.4f);
							Main.dust[num59].velocity *= 0.2f;
							Main.dust[num59].velocity += base.velocity / 10f;
							Main.dust[num59].noGravity = true;
						}
					}
					if (localAI[0] > num56)
					{
						localAI[0] = num56;
					}
				}
				else
				{
					localAI[0] -= num57;
					if (localAI[0] <= 0f)
					{
						Kill();
						return;
					}
				}
			}
			if (type == 438)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.2f);
			}
			if (type == 593)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.3f);
				if (++frameCounter >= 12)
				{
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
					frameCounter = 0;
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector5 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust obj3 = Main.dust[Dust.NewDust(base.Center - vector5 * 8f, 0, 0, 240)];
					obj3.noGravity = true;
					obj3.position = base.Center - vector5 * 8f * scale;
					obj3.velocity = vector5.RotatedBy(-1.5707963705062866) * 2f;
					obj3.velocity = Vector2.Zero;
					obj3.scale = 0.5f + Main.rand.NextFloat();
					obj3.fadeIn = 0.5f;
				}
			}
			if (type == 592)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.15f, 0.15f, 0.4f);
			}
			if (type == 462)
			{
				int num60 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
				Main.dust[num60].noLight = true;
				Main.dust[num60].noGravity = true;
				Main.dust[num60].velocity = base.velocity;
				Main.dust[num60].position -= Vector2.One * 4f;
				Main.dust[num60].scale = 0.8f;
				if (++frameCounter >= 9)
				{
					frameCounter = 0;
					if (++frame >= 5)
					{
						frame = 0;
					}
				}
			}
			if (type == 437)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item12, base.position);
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num61 = 0; num61 < 4; num61++)
					{
						int num62 = Dust.NewDust(base.position, width, height, 226, base.velocity.X);
						Main.dust[num62].position = Vector2.Lerp(Main.dust[num62].position, base.Center, 0.25f);
						Main.dust[num62].scale = 0.5f;
						Main.dust[num62].noGravity = true;
						Main.dust[num62].velocity /= 2f;
						Main.dust[num62].velocity += base.velocity * 0.66f;
					}
				}
				if (ai[0] < 16f)
				{
					for (int num63 = 0; num63 < 2; num63++)
					{
						int num64 = Dust.NewDust(base.position, width, height, 226, base.velocity.X);
						Main.dust[num64].position = base.position + new Vector2(((direction == 1) ? 1 : 0) * width, 2 + (height - 4) * num63);
						Main.dust[num64].scale = 0.3f;
						Main.dust[num64].noGravity = true;
						Main.dust[num64].velocity = Vector2.Zero;
					}
				}
			}
			if (type == 435)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item12, base.position);
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.8f, 1.1f);
			}
			if (type == 682)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.DD2_LightningBugZap, base.position);
					for (int num65 = 0; num65 < 8; num65++)
					{
						Dust dust = Dust.NewDustDirect(base.position, width, height, 272);
						dust.velocity *= 1f;
						dust.velocity += base.velocity * 0.65f;
						dust.scale = 0.6f;
						dust.fadeIn = 0.8f;
						dust.noGravity = true;
						dust.noLight = true;
						dust.position += dust.velocity * 3f;
					}
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.5f, 0.2f, 1.1f);
			}
			if (type == 684)
			{
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				localAI[0] += 1f;
				for (int num66 = 0; num66 < 1; num66++)
				{
					Vector2 spinningpoint4 = Utils.RandomVector2(Main.rand, -0.5f, 0.5f) * new Vector2(20f, 80f);
					spinningpoint4 = spinningpoint4.RotatedBy(base.velocity.ToRotation());
					Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 60);
					dust2.alpha = 127;
					dust2.fadeIn = 1.5f;
					dust2.scale = 1.3f;
					dust2.velocity *= 0.3f;
					dust2.position = base.Center + spinningpoint4;
					dust2.noGravity = true;
					dust2.noLight = true;
					dust2.color = new Color(255, 255, 255, 0);
				}
				Lighting.AddLight(base.Center, 1.1f, 0.3f, 0.4f);
			}
			if (type == 408)
			{
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
			}
			if (type == 282)
			{
				int num67 = Dust.NewDust(base.position, width, height, 171, 0f, 0f, 100);
				Main.dust[num67].scale = (float)Main.rand.Next(1, 10) * 0.1f;
				Main.dust[num67].noGravity = true;
				Main.dust[num67].fadeIn = 1.5f;
				Main.dust[num67].velocity *= 0.25f;
				Main.dust[num67].velocity += base.velocity * 0.25f;
			}
			if (type == 275 || type == 276)
			{
				frameCounter++;
				if (frameCounter > 1)
				{
					frameCounter = 0;
					frame++;
					if (frame > 1)
					{
						frame = 0;
					}
				}
			}
			if (type == 225 && Main.rand.Next(2) == 0)
			{
				int num68 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 40);
				Main.dust[num68].noGravity = true;
				Main.dust[num68].scale = 1.3f;
				Main.dust[num68].velocity *= 0.5f;
			}
			if (type == 174)
			{
				if (alpha == 0)
				{
					int num69 = Dust.NewDust(oldPosition - base.velocity * 3f, width, height, 76, 0f, 0f, 50);
					Main.dust[num69].noGravity = true;
					Main.dust[num69].noLight = true;
					Main.dust[num69].velocity *= 0.5f;
				}
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, base.position);
				}
			}
			else if (type == 605 || type == 920 || type == 921 || type == 926 || type == 937)
			{
				if (type == 920 && frameCounter == 0)
				{
					frameCounter = 1;
					frame = Main.rand.Next(3);
				}
				if (alpha == 0 && Main.rand.Next(3) == 0)
				{
					int num70 = 4;
					Color newColor = new Color(78, 136, 255, 150);
					float num71 = 1.2f;
					bool noGravity = true;
					int num72 = 0;
					if (type == 921)
					{
						num70 = 243;
						newColor = default(Color);
					}
					if (type == 926)
					{
						num70 = 4;
						newColor = NPC.AI_121_QueenSlime_GetDustColor();
						newColor.A = 150;
						num71 = 1.2f;
						num72 = 8;
						noGravity = Main.rand.Next(2) == 0;
					}
					if (type == 937)
					{
						num70 = 4;
						newColor = NPC.AI_121_QueenSlime_GetDustColor();
						newColor.A = 150;
					}
					int num73 = Dust.NewDust(base.position - new Vector2(num72, num72) + base.velocity, width + num72 * 2, height + num72 * 2, num70, 0f, 0f, 50, newColor, num71);
					Main.dust[num73].velocity *= 0.3f;
					Main.dust[num73].velocity += base.velocity * 0.3f;
					Main.dust[num73].noGravity = noGravity;
				}
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (type != 937 && ai[1] == 0f)
				{
					ai[1] = 1f;
					if (type == 926)
					{
						SoundEngine.PlaySound(SoundID.Item155, base.position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item154, base.position);
					}
				}
			}
			else if (type == 176)
			{
				if (alpha == 0)
				{
					int num74 = Dust.NewDust(oldPosition, width, height, 22, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num74].noGravity = true;
					Main.dust[num74].noLight = true;
					Main.dust[num74].velocity *= 0.15f;
					Main.dust[num74].fadeIn = 0.8f;
				}
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, base.position);
				}
			}
			if (type == 350)
			{
				alpha -= 100;
				if (alpha < 0)
				{
					alpha = 0;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				if (alpha == 0)
				{
					int num75 = 2;
					if (Main.rand.Next(3) != 0)
					{
						int num76 = Dust.NewDust(new Vector2(base.Center.X - (float)num75, base.Center.Y - (float)num75 - 2f) - base.velocity * 0.5f, num75 * 2, num75 * 2, 6, 0f, 0f, 100);
						Main.dust[num76].scale *= 1.3f + (float)Main.rand.Next(10) * 0.05f;
						Main.dust[num76].velocity *= 0.2f;
						Main.dust[num76].noGravity = true;
						Main.dust[num76].noLight = true;
						Main.dust[num76].velocity += base.velocity * 0.25f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num77 = (num77 = Dust.NewDust(new Vector2(base.Center.X - (float)num75, base.Center.Y - (float)num75 - 2f) - base.velocity * 0.5f, num75 * 2, num75 * 2, 31, 0f, 0f, 100, default(Color), 0.5f));
						Main.dust[num77].fadeIn = 0.6f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num77].velocity *= 0.05f;
						Main.dust[num77].velocity += base.velocity * 0.25f;
					}
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item42, base.position);
				}
			}
			if (type == 325)
			{
				alpha -= 100;
				if (alpha < 0)
				{
					alpha = 0;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				if (alpha == 0)
				{
					int num78 = 2;
					if (Main.rand.Next(3) != 0)
					{
						int num79 = Dust.NewDust(new Vector2(base.Center.X - (float)num78, base.Center.Y - (float)num78 - 2f) - base.velocity * 0.5f, num78 * 2, num78 * 2, 6, 0f, 0f, 100);
						Main.dust[num79].scale *= 1.2f + (float)Main.rand.Next(10) * 0.05f;
						Main.dust[num79].velocity *= 0.2f;
						Main.dust[num79].noGravity = true;
						Main.dust[num79].noLight = true;
						Main.dust[num79].velocity += base.velocity * 0.25f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num80 = (num80 = Dust.NewDust(new Vector2(base.Center.X - (float)num78, base.Center.Y - (float)num78 - 2f) - base.velocity * 0.5f, num78 * 2, num78 * 2, 31, 0f, 0f, 100, default(Color), 0.5f));
						Main.dust[num80].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.05f;
						Main.dust[num80].velocity *= 0.05f;
					}
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item42, base.position);
				}
			}
			if (type == 469)
			{
				localAI[1] += 1f;
				if (localAI[1] > 2f)
				{
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
			}
			else if (type == 83 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item33, base.position);
			}
			else if (type == 408 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 19);
			}
			else if (type == 259 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item33, base.position);
			}
			else if (type == 110 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item11, base.position);
			}
			else if (type == 302 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item11, base.position);
			}
			else if (type == 438 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, base.position);
			}
			else if (type == 593 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item11, base.position);
			}
			else if (type == 592 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, base.position);
			}
			else if (type == 462 && ai[1] == 0f)
			{
				ai[1] = 1f;
				if (Main.rand.Next(2) == 0)
				{
					SoundEngine.PlaySound(SoundID.Item124, base.position);
				}
				else
				{
					SoundEngine.PlaySound(SoundID.Item125, base.position);
				}
				Vector2 value13 = Vector2.Normalize(base.velocity);
				int num81 = Main.rand.Next(5, 10);
				for (int num82 = 0; num82 < num81; num82++)
				{
					int num83 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
					Main.dust[num83].velocity.Y -= 1f;
					Main.dust[num83].velocity += value13 * 2f;
					Main.dust[num83].position -= Vector2.One * 4f;
					Main.dust[num83].noGravity = true;
				}
			}
			else if (type == 84 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, base.position);
			}
			else if (type == 389 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, base.position);
			}
			else if (type == 257 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, base.position);
			}
			else if (type == 100 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item33, base.position);
			}
			else if (type == 98 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, base.position);
			}
			else if (type == 184 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, base.position);
			}
			else if (type == 195 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, base.position);
			}
			else if (type == 275 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, base.position);
			}
			else if (type == 276 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, base.position);
			}
			else if ((type == 81 || type == 82) && ai[1] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item5, base.position);
				ai[1] = 1f;
			}
			else if (type == 180 && ai[1] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item11, base.position);
				ai[1] = 1f;
			}
			else if (type == 248 && ai[1] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item17, base.position);
				ai[1] = 1f;
			}
			else if (type == 576 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, base.position);
			}
			else if (type == 577 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item36, base.position);
			}
			else if (type == 710)
			{
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num84;
					if (Main.rand.Next(2) == 0)
					{
						num84 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100, default(Color), 1.6f);
						Main.dust[num84].noGravity = true;
					}
					num84 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num84].noGravity = true;
					Main.dust[num84].velocity *= 2f;
					Main.dust[num84].velocity += base.velocity;
					if (ai[1] == -1f)
					{
						Main.dust[num84].fadeIn = 1.5f;
					}
					else
					{
						Main.dust[num84].fadeIn = 1.22f;
					}
					if (wet)
					{
						Kill();
					}
				}
			}
			else if (type == 639)
			{
				if (localAI[0] == 0f && localAI[1] == 0f)
				{
					localAI[0] = base.Center.X;
					localAI[1] = base.Center.Y;
					ai[0] = base.velocity.X;
					ai[1] = base.velocity.Y;
				}
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			else if (type == 640)
			{
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (base.velocity == Vector2.Zero)
				{
					ai[0] = 0f;
					bool flag = true;
					for (int num85 = 1; num85 < oldPos.Length; num85++)
					{
						if (oldPos[num85] != oldPos[0])
						{
							flag = false;
						}
					}
					if (flag)
					{
						Kill();
						return;
					}
					if (Main.rand.Next(extraUpdates) == 0 && (base.velocity != Vector2.Zero || Main.rand.Next((localAI[1] == 2f) ? 2 : 6) == 0))
					{
						for (int num86 = 0; num86 < 2; num86++)
						{
							float num87 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num88 = (float)Main.rand.NextDouble() * 0.8f + 1f;
							Vector2 vector6 = new Vector2((float)Math.Cos(num87) * num88, (float)Math.Sin(num87) * num88);
							int num89 = Dust.NewDust(base.Center, 0, 0, 229, vector6.X, vector6.Y);
							Main.dust[num89].noGravity = true;
							Main.dust[num89].scale = 1.2f;
						}
						if (Main.rand.Next(10) == 0)
						{
							Vector2 value14 = base.velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
							int num90 = Dust.NewDust(base.Center + value14 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num90].velocity *= 0.5f;
							Main.dust[num90].velocity.Y = 0f - Math.Abs(Main.dust[num90].velocity.Y);
						}
					}
				}
				else if (numUpdates == 1)
				{
					float num91 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num92 = (float)Main.rand.NextDouble() * 0.25f + 0.25f;
					Vector2 vector7 = new Vector2((float)Math.Cos(num91) * num92, (float)Math.Sin(num91) * num92);
					int num93 = Dust.NewDust(base.position, 0, 0, 229, vector7.X, vector7.Y);
					Main.dust[num93].noGravity = true;
					Main.dust[num93].scale = 1.2f;
				}
			}
			if (type == 41)
			{
				int num94 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.6f);
				Main.dust[num94].noGravity = true;
				num94 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num94].noGravity = true;
			}
			else if (type == 55)
			{
				int num95 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 18, 0f, 0f, 0, default(Color), 0.9f);
				Main.dust[num95].noGravity = true;
			}
			else if (type == 719)
			{
				if (Main.rand.Next(2) == 0)
				{
					Dust.NewDustDirect(base.position - base.velocity, width, height, 147, 0f, 0f, 0, default(Color), 0.9f).noGravity = true;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num96 = 0; num96 < 20; num96++)
					{
						Dust dust3 = Dust.NewDustDirect(base.position - base.velocity, width, height, 147, 0f, 0f, 0, default(Color), 1.3f);
						dust3.noGravity = true;
						dust3.velocity += base.velocity * 0.75f;
					}
					for (int num97 = 0; num97 < 10; num97++)
					{
						Dust dust4 = Dust.NewDustDirect(base.position - base.velocity, width, height, 147, 0f, 0f, 0, default(Color), 1.3f);
						dust4.noGravity = true;
						dust4.velocity *= 2f;
					}
				}
			}
			else if (type == 763)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num98 = 0; num98 < 5; num98++)
					{
						Dust dust5 = Dust.NewDustDirect(base.position - base.velocity, width, height, 40, 0f, 0f, 0, default(Color), 1.1f);
						dust5.noGravity = true;
						dust5.velocity *= 1.5f;
					}
				}
			}
			else if (type == 772)
			{
				if (Main.rand.Next(7) == 0)
				{
					for (int num99 = 0; num99 < 1; num99++)
					{
						Dust dust6 = Dust.NewDustDirect(base.position - base.velocity, width, height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90, 91, 138), 0f, 0f, 0, default(Color), 0.7f);
						dust6.noGravity = true;
						dust6.velocity = base.velocity * 0.6f;
						dust6.fadeIn = 0.8f;
					}
				}
			}
			else if (type == 374)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item17, base.position);
					localAI[0] = 1f;
				}
				if (Main.rand.Next(2) == 0)
				{
					int num100 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 18, 0f, 0f, 0, default(Color), 0.9f);
					Main.dust[num100].noGravity = true;
					Main.dust[num100].velocity *= 0.5f;
				}
			}
			else if (type == 376)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item20, base.position);
				}
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					int num101 = 1;
					if (localAI[0] > 5f)
					{
						num101 = 2;
					}
					for (int num102 = 0; num102 < num101; num102++)
					{
						int num103 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num103].noGravity = true;
						Main.dust[num103].velocity.X *= 0.3f;
						Main.dust[num103].velocity.Y *= 0.3f;
						Main.dust[num103].noLight = true;
					}
					if (wet && !lavaWet)
					{
						Kill();
						return;
					}
				}
			}
			else if (type == 91 && Main.rand.Next(2) == 0)
			{
				int num105 = Dust.NewDust(Type: (Main.rand.Next(2) != 0) ? 58 : 15, Position: base.position, Width: width, Height: height, SpeedX: base.velocity.X * 0.25f, SpeedY: base.velocity.Y * 0.25f, Alpha: 150, newColor: default(Color), Scale: 0.9f);
				Main.dust[num105].velocity *= 0.25f;
			}
			if (type == 163 || type == 310)
			{
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			switch (type)
			{
			case 14:
			case 20:
			case 36:
			case 83:
			case 84:
			case 89:
			case 100:
			case 104:
			case 110:
			case 158:
			case 159:
			case 160:
			case 161:
			case 180:
			case 279:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 389:
				if (alpha > 0)
				{
					alpha -= 15;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				break;
			case 576:
			case 577:
				localAI[1] += 1f;
				if (localAI[1] > 2f)
				{
					if (alpha > 0)
					{
						alpha -= 15;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				break;
			}
			if (type == 484)
			{
				int num106 = Dust.NewDust(base.position, width, height, 78);
				Main.dust[num106].noGravity = true;
				Main.dust[num106].velocity *= 0.1f;
				Main.dust[num106].scale = 0.75f;
				Main.dust[num106].position = (Main.dust[num106].position + base.Center) / 2f;
				Main.dust[num106].position += base.velocity * Main.rand.Next(0, 101) * 0.01f;
			}
			if (type == 242 || type == 302 || type == 438 || type == 462 || type == 592)
			{
				float num107 = (float)Math.Sqrt(base.velocity.X * base.velocity.X + base.velocity.Y * base.velocity.Y);
				if (alpha > 0)
				{
					alpha -= (byte)((double)num107 * 0.9);
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 660)
			{
				DelegateMethods.v3_1 = new Vector3(0.6f, 1f, 1f) * 0.2f;
				Utils.PlotTileLine(base.Center, base.Center + base.velocity * 10f, 8f, DelegateMethods.CastLightOpen);
				if (alpha > 0)
				{
					SoundEngine.PlaySound(SoundID.Item9, base.Center);
					alpha = 0;
					scale = 1.1f;
					frame = Main.rand.Next(14);
					float num108 = 16f;
					for (int num109 = 0; (float)num109 < num108; num109++)
					{
						Vector2 spinningpoint5 = Vector2.UnitX * 0f;
						spinningpoint5 += -Vector2.UnitY.RotatedBy((float)num109 * ((float)Math.PI * 2f / num108)) * new Vector2(1f, 4f);
						spinningpoint5 = spinningpoint5.RotatedBy(base.velocity.ToRotation());
						int num110 = Dust.NewDust(base.Center, 0, 0, 180);
						Main.dust[num110].scale = 1.5f;
						Main.dust[num110].noGravity = true;
						Main.dust[num110].position = base.Center + spinningpoint5;
						Main.dust[num110].velocity = base.velocity * 0f + spinningpoint5.SafeNormalize(Vector2.UnitY) * 1f;
					}
				}
			}
			if (type == 712)
			{
				DelegateMethods.v3_1 = new Vector3(0.4f, 0.4f, 0.4f) * 0.7f;
				Utils.PlotTileLine(base.Center, base.Center + base.velocity * 10f, 8f, DelegateMethods.CastLightOpen);
				if (alpha == 255)
				{
					frame = Main.rand.Next(2) * 4;
				}
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
					if (frame == 4)
					{
						frame = 0;
					}
					if (frame >= 8)
					{
						frame = 4;
					}
				}
				if (alpha > 0)
				{
					alpha = 0;
					scale = 1.1f;
					frame = Main.rand.Next(14);
					float num111 = 4f;
					for (int num112 = 0; (float)num112 < num111; num112++)
					{
						Vector2 spinningpoint6 = Vector2.UnitX * 0f;
						spinningpoint6 += -Vector2.UnitY.RotatedBy((float)num112 * ((float)Math.PI * 2f / num111)) * new Vector2(1f, 4f);
						spinningpoint6 = spinningpoint6.RotatedBy(base.velocity.ToRotation());
						int num113 = Dust.NewDust(base.Center, 0, 0, 15);
						Main.dust[num113].scale = 1.7f;
						Main.dust[num113].noGravity = true;
						Main.dust[num113].position = base.Center + spinningpoint6 + base.velocity.SafeNormalize(Vector2.Zero) * 50f;
						Main.dust[num113].velocity = Main.dust[num113].velocity * 2f + spinningpoint6.SafeNormalize(Vector2.UnitY) * 0.3f + base.velocity.SafeNormalize(Vector2.Zero) * 3f;
						Main.dust[num113].velocity *= 0.7f;
						Main.dust[num113].position += Main.dust[num113].velocity * 5f;
					}
				}
			}
			if (type == 661)
			{
				if (alpha <= 0)
				{
					for (int num114 = 0; num114 < 3; num114++)
					{
						int num115 = Dust.NewDust(base.position, width, height, 240);
						Main.dust[num115].noGravity = true;
						Main.dust[num115].velocity *= 0.3f;
						Main.dust[num115].noLight = true;
					}
				}
				if (alpha > 0)
				{
					alpha -= 55;
					scale = 1.3f;
					if (alpha < 0)
					{
						alpha = 0;
						float num116 = 16f;
						for (int num117 = 0; (float)num117 < num116; num117++)
						{
							Vector2 spinningpoint7 = Vector2.UnitX * 0f;
							spinningpoint7 += -Vector2.UnitY.RotatedBy((float)num117 * ((float)Math.PI * 2f / num116)) * new Vector2(1f, 4f);
							spinningpoint7 = spinningpoint7.RotatedBy(base.velocity.ToRotation());
							int num118 = Dust.NewDust(base.Center, 0, 0, 62);
							Main.dust[num118].scale = 1.5f;
							Main.dust[num118].noLight = true;
							Main.dust[num118].noGravity = true;
							Main.dust[num118].position = base.Center + spinningpoint7;
							Main.dust[num118].velocity = Main.dust[num118].velocity * 4f + base.velocity * 0.3f;
						}
					}
				}
			}
			if (type == 706)
			{
				if (wet)
				{
					Kill();
					return;
				}
				SlotId val;
				if (localAI[1] == 0f)
				{
					float[] array = localAI;
					val = SoundEngine.PlayTrackedSound(SoundID.DD2_PhantomPhoenixShot, base.Center);
					array[0] = ((SlotId)(val)).ToFloat();
					localAI[1] += 1f;
					for (int num119 = 0; num119 < 15; num119++)
					{
						if (Main.rand.Next(4) != 0)
						{
							Dust dust7 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, Utils.SelectRandom<int>(Main.rand, 6, 31, 31));
							dust7.noGravity = true;
							dust7.velocity *= 2.3f;
							dust7.fadeIn = 1.5f;
							dust7.noLight = true;
						}
					}
				}
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]));
				if (activeSound != null)
				{
					activeSound.Position = base.Center;
				}
				else
				{
					float[] array2 = localAI;
					val = SlotId.Invalid;
					array2[0] = ((SlotId)(val)).ToFloat();
				}
				if (alpha <= 0)
				{
					for (int num120 = 0; num120 < 2; num120++)
					{
						if (Main.rand.Next(4) != 0)
						{
							Dust dust8 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, Utils.SelectRandom<int>(Main.rand, 6, 31, 31));
							dust8.noGravity = true;
							dust8.velocity *= 2.3f;
							dust8.fadeIn = 1.5f;
							dust8.noLight = true;
						}
					}
					Vector2 spinningpoint8 = new Vector2(0f, (float)Math.Cos((float)frameCounter * ((float)Math.PI * 2f) / 40f - (float)Math.PI / 2f)) * 16f;
					spinningpoint8 = spinningpoint8.RotatedBy(rotation);
					Vector2 value15 = base.velocity.SafeNormalize(Vector2.Zero);
					for (int num121 = 0; num121 < 1; num121++)
					{
						Dust dust9 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, 6);
						dust9.noGravity = true;
						dust9.position = base.Center + spinningpoint8;
						dust9.velocity *= 0f;
						dust9.fadeIn = 1.4f;
						dust9.scale = 1.15f;
						dust9.noLight = true;
						dust9.position += base.velocity * 1.2f;
						dust9.velocity += value15 * 2f;
						Dust dust10 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, 6);
						dust10.noGravity = true;
						dust10.position = base.Center + spinningpoint8;
						dust10.velocity *= 0f;
						dust10.fadeIn = 1.4f;
						dust10.scale = 1.15f;
						dust10.noLight = true;
						dust10.position += base.velocity * 0.5f;
						dust10.position += base.velocity * 1.2f;
						dust10.velocity += value15 * 2f;
					}
				}
				if (++frameCounter >= 40)
				{
					frameCounter = 0;
				}
				frame = frameCounter / 5;
				if (alpha > 0)
				{
					alpha -= 55;
					if (alpha < 0)
					{
						alpha = 0;
						float num122 = 16f;
						for (int num123 = 0; (float)num123 < num122; num123++)
						{
							Vector2 spinningpoint9 = Vector2.UnitX * 0f;
							spinningpoint9 += -Vector2.UnitY.RotatedBy((float)num123 * ((float)Math.PI * 2f / num122)) * new Vector2(1f, 4f);
							spinningpoint9 = spinningpoint9.RotatedBy(base.velocity.ToRotation());
							int num124 = Dust.NewDust(base.Center, 0, 0, 6);
							Main.dust[num124].scale = 1.5f;
							Main.dust[num124].noLight = true;
							Main.dust[num124].noGravity = true;
							Main.dust[num124].position = base.Center + spinningpoint9;
							Main.dust[num124].velocity = Main.dust[num124].velocity * 4f + base.velocity * 0.3f;
						}
					}
				}
				DelegateMethods.v3_1 = new Vector3(1f, 0.6f, 0.2f);
				Utils.PlotTileLine(base.Center, base.Center + base.velocity * 4f, 40f, DelegateMethods.CastLightOpen);
			}
			if (type == 638)
			{
				float num125 = base.velocity.Length();
				if (alpha > 0)
				{
					alpha -= (byte)((double)num125 * 0.3);
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				Rectangle hitbox = base.Hitbox;
				hitbox.Offset((int)base.velocity.X, (int)base.velocity.Y);
				bool flag2 = false;
				for (int num126 = 0; num126 < 200; num126++)
				{
					NPC nPC = Main.npc[num126];
					if (nPC.active && !nPC.dontTakeDamage && nPC.immune[owner] == 0 && localNPCImmunity[num126] == 0 && nPC.Hitbox.Intersects(hitbox) && !nPC.friendly)
					{
						flag2 = true;
						break;
					}
				}
				if (flag2)
				{
					int num127 = Main.rand.Next(15, 31);
					for (int num128 = 0; num128 < num127; num128++)
					{
						int num129 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.8f);
						Main.dust[num129].velocity *= 1.6f;
						Main.dust[num129].velocity.Y -= 1f;
						Main.dust[num129].velocity += base.velocity;
						Main.dust[num129].noGravity = true;
					}
				}
			}
			if (type == 257 || type == 593)
			{
				if (alpha > 0)
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 876)
			{
				if (ai[1] == 0f)
				{
					tileCollide = true;
				}
				else
				{
					tileCollide = false;
				}
				if (alpha > 0)
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 88)
			{
				if (alpha > 0)
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 532)
			{
				ai[0] += 1f;
			}
			bool flag3 = true;
			switch (type)
			{
			case 5:
			case 14:
			case 20:
			case 36:
			case 38:
			case 55:
			case 83:
			case 84:
			case 88:
			case 89:
			case 98:
			case 100:
			case 104:
			case 110:
			case 158:
			case 159:
			case 160:
			case 161:
			case 180:
			case 184:
			case 242:
			case 248:
			case 257:
			case 259:
			case 265:
			case 270:
			case 279:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 299:
			case 302:
			case 323:
			case 325:
			case 348:
			case 349:
			case 350:
			case 355:
			case 374:
			case 376:
			case 389:
			case 435:
			case 436:
			case 438:
			case 440:
			case 442:
			case 449:
			case 459:
			case 462:
			case 467:
			case 468:
			case 469:
			case 472:
			case 483:
			case 484:
			case 485:
			case 498:
			case 576:
			case 577:
			case 585:
			case 592:
			case 593:
			case 601:
			case 606:
			case 616:
			case 634:
			case 635:
			case 638:
			case 639:
			case 660:
			case 661:
			case 682:
			case 684:
			case 706:
			case 709:
			case 710:
			case 712:
			case 876:
				flag3 = false;
				break;
			}
			if (flag3)
			{
				ai[0] += 1f;
			}
			if (type == 270)
			{
				int num130 = 0;
				num130 = Player.FindClosest(base.Center, 1, 1);
				ai[1] += 1f;
				if (ai[1] < 110f && ai[1] > 30f)
				{
					float num131 = base.velocity.Length();
					Vector2 value16 = Main.player[num130].Center - base.Center;
					value16.Normalize();
					value16 *= num131;
					base.velocity = (base.velocity * 24f + value16) / 25f;
					base.velocity.Normalize();
					base.velocity *= num131;
				}
				if (base.velocity.Length() < 18f)
				{
					base.velocity *= 1.02f;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, base.position);
					for (int num132 = 0; num132 < 10; num132++)
					{
						int num133 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 5, base.velocity.X, base.velocity.Y, 0, default(Color), 2f);
						Main.dust[num133].noGravity = true;
						Main.dust[num133].velocity = base.Center - Main.dust[num133].position;
						Main.dust[num133].velocity.Normalize();
						Main.dust[num133].velocity *= -5f;
						Main.dust[num133].velocity += base.velocity / 2f;
					}
				}
			}
			if (type == 585)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, base.position);
					for (int num134 = 0; num134 < 3; num134++)
					{
						int num135 = Dust.NewDust(base.position, width, height, 27, base.velocity.X, base.velocity.Y, 0, default(Color), 2f);
						Main.dust[num135].noGravity = true;
						Main.dust[num135].velocity = base.Center - Main.dust[num135].position;
						Main.dust[num135].velocity.Normalize();
						Main.dust[num135].velocity *= -5f;
						Main.dust[num135].velocity += base.velocity / 2f;
						Main.dust[num135].noLight = true;
					}
				}
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				frameCounter++;
				if (frameCounter >= 12)
				{
					frameCounter = 0;
				}
				frame = frameCounter / 2;
				if (frame > 3)
				{
					frame = 6 - frame;
				}
				Vector3 vector8 = NPCID.Sets.MagicAuraColor[54].ToVector3();
				Lighting.AddLight(base.Center, vector8.X, vector8.Y, vector8.Z);
				if (Main.rand.Next(3) == 0)
				{
					int num136 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, 27, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num136].position -= base.velocity * 2f;
					Main.dust[num136].noLight = true;
					Main.dust[num136].noGravity = true;
					Main.dust[num136].velocity.X *= 0.3f;
					Main.dust[num136].velocity.Y *= 0.3f;
				}
			}
			if (type == 594)
			{
				int num137 = (int)(43f - ai[1]) / 13;
				if (num137 < 1)
				{
					num137 = 1;
				}
				int num138 = ((ai[1] < 20f) ? 6 : 31);
				for (int num139 = 0; num139 < num137; num139++)
				{
					int num140 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, num138, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 0, default(Color), 2f);
					Main.dust[num140].position -= base.velocity * 2f;
					Main.dust[num140].noLight = true;
					Main.dust[num140].noGravity = true;
					Main.dust[num140].velocity.X *= 0.3f;
					Main.dust[num140].velocity.Y *= 0.3f;
					if (num138 == 6)
					{
						Main.dust[num140].fadeIn = Main.rand.NextFloat() * 2f;
					}
				}
				ai[1] += 1f;
				if (ai[1] > (float)(43 * MaxUpdates))
				{
					Kill();
					return;
				}
			}
			if (type == 622)
			{
				int num141 = 229;
				if (Main.rand.Next(3) != 0)
				{
					int num142 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, num141, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 0, default(Color), 1.2f);
					Main.dust[num142].position -= base.velocity * 2f;
					Main.dust[num142].noLight = true;
					Main.dust[num142].noGravity = true;
					Main.dust[num142].velocity.X *= 0.3f;
					Main.dust[num142].velocity.Y *= 0.3f;
				}
				ai[1] += 1f;
				if (ai[1] > (float)(23 * MaxUpdates))
				{
					Kill();
					return;
				}
			}
			if (type == 587)
			{
				Color newColor2 = Main.hslToRgb(ai[1], 1f, 0.5f);
				newColor2.A = 200;
				localAI[0] += 1f;
				if (!(localAI[0] < 2f))
				{
					if (localAI[0] == 2f)
					{
						SoundEngine.PlaySound(SoundID.Item5, base.position);
						for (int num143 = 0; num143 < 4; num143++)
						{
							int num144 = Dust.NewDust(base.position, width, height, 76, base.velocity.X, base.velocity.Y, 0, newColor2, 1.1f);
							Main.dust[num144].noGravity = true;
							Main.dust[num144].velocity = base.Center - Main.dust[num144].position;
							Main.dust[num144].velocity.Normalize();
							Main.dust[num144].velocity *= -3f;
							Main.dust[num144].velocity += base.velocity / 2f;
						}
					}
					else
					{
						frame++;
						if (frame > 2)
						{
							frame = 0;
						}
						for (int num145 = 0; num145 < 1; num145++)
						{
							int num146 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, 76, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 0, newColor2, 0.9f);
							Main.dust[num146].position = base.Center;
							Main.dust[num146].noGravity = true;
							Main.dust[num146].velocity = base.velocity * 0.5f;
						}
					}
				}
			}
			if (type == 349)
			{
				frame = (int)ai[0];
				base.velocity.Y += 0.2f;
				if (localAI[0] == 0f || localAI[0] == 2f)
				{
					scale += 0.01f;
					alpha -= 50;
					if (alpha <= 0)
					{
						localAI[0] = 1f;
						alpha = 0;
					}
				}
				else if (localAI[0] == 1f)
				{
					scale -= 0.01f;
					alpha += 50;
					if (alpha >= 255)
					{
						localAI[0] = 2f;
						alpha = 255;
					}
				}
			}
			if (type == 348)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, base.position);
				}
				if (ai[0] == 0f || ai[0] == 2f)
				{
					scale += 0.01f;
					alpha -= 50;
					if (alpha <= 0)
					{
						ai[0] = 1f;
						alpha = 0;
					}
				}
				else if (ai[0] == 1f)
				{
					scale -= 0.01f;
					alpha += 50;
					if (alpha >= 255)
					{
						ai[0] = 2f;
						alpha = 255;
					}
				}
			}
			if (type == 572)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, base.position);
				}
				for (int num147 = 0; num147 < 2; num147++)
				{
					int num148 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 40, base.velocity.X, base.velocity.Y, 100);
					Main.dust[num148].velocity *= 0.5f;
					Main.dust[num148].velocity += base.velocity;
					Main.dust[num148].velocity *= 0.5f;
					Main.dust[num148].noGravity = true;
					Main.dust[num148].scale = 1.2f;
					Main.dust[num148].position = (base.Center + base.position) / 2f;
				}
			}
			if (type == 577)
			{
				Lighting.AddLight(base.Center, 0.1f, 0.3f, 0.4f);
			}
			else if (type == 576)
			{
				Lighting.AddLight(base.Center, 0.4f, 0.2f, 0.4f);
				for (int num149 = 0; num149 < 5; num149++)
				{
					Dust obj4 = Main.dust[Dust.NewDust(base.position, width, height, 242, base.velocity.X, base.velocity.Y, 100)];
					obj4.velocity = Vector2.Zero;
					obj4.position -= base.velocity / 5f * num149;
					obj4.noGravity = true;
					obj4.scale = 0.8f;
					obj4.noLight = true;
				}
			}
			else if (type == 581)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, base.Center);
				}
				for (int num150 = 0; num150 < 2; num150++)
				{
					int num151 = Utils.SelectRandom<int>(Main.rand, 229, 161, 161);
					Dust obj5 = Main.dust[Dust.NewDust(base.position, width, height, num151, base.velocity.X, base.velocity.Y, 100)];
					obj5.velocity = obj5.velocity / 4f + base.velocity / 2f;
					obj5.noGravity = true;
					obj5.scale = 1.2f;
					obj5.position = base.Center;
					obj5.noLight = true;
				}
			}
			else if (type == 671)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num152 = 0; num152 < 8; num152++)
					{
						int num153 = Utils.SelectRandom<int>(Main.rand, 27, 62);
						Dust obj6 = Main.dust[Dust.NewDust(base.position, width, height, num153, base.velocity.X, base.velocity.Y, 100)];
						obj6.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + base.velocity.SafeNormalize(Vector2.Zero) * 3f;
						obj6.noGravity = true;
						obj6.scale = 1.5f;
						obj6.fadeIn = 1.2f;
						obj6.position = base.Center;
						obj6.noLight = true;
					}
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				for (int num154 = 0; num154 < 2; num154++)
				{
					int num155 = Utils.SelectRandom<int>(Main.rand, 27, 27, 62);
					Dust obj7 = Main.dust[Dust.NewDust(base.position, width, height, num155, base.velocity.X, base.velocity.Y, 100)];
					obj7.velocity = obj7.velocity / 4f + base.velocity / 2f;
					obj7.noGravity = true;
					obj7.scale = 1.2f;
					obj7.position = base.Center;
					obj7.noLight = true;
				}
			}
			else if (type == 811)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item17, base.Center);
					localAI[0] = 1f;
					for (int num156 = 0; num156 < 8; num156++)
					{
						Dust obj8 = Main.dust[Dust.NewDust(base.position, width, height, 5, base.velocity.X, base.velocity.Y, 100)];
						obj8.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + base.velocity.SafeNormalize(Vector2.Zero) * 3f;
						obj8.scale = 1.5f;
						obj8.fadeIn = 1.7f;
						obj8.position = base.Center;
					}
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				for (int num157 = 0; num157 < 2; num157++)
				{
					Dust obj9 = Main.dust[Dust.NewDust(base.position, width, height, 5, base.velocity.X, base.velocity.Y, 100)];
					obj9.velocity = obj9.velocity / 4f + base.velocity / 2f;
					obj9.scale = 1.2f;
					obj9.position = base.Center + Main.rand.NextFloat() * base.velocity * 2f;
				}
			}
			else if (type == 819)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num158 = 0; num158 < 8; num158++)
					{
						Dust obj10 = Main.dust[Dust.NewDust(base.position, width, height, 5, base.velocity.X, base.velocity.Y, 100)];
						obj10.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + base.velocity.SafeNormalize(Vector2.Zero) * 2f;
						obj10.scale = 0.9f;
						obj10.fadeIn = 1.1f;
						obj10.position = base.Center;
					}
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				for (int num159 = 1; num159 < 3; num159++)
				{
					Dust obj11 = Main.dust[Dust.NewDust(base.position, width, height, 5, base.velocity.X, base.velocity.Y, 100)];
					obj11.velocity = base.velocity;
					obj11.velocity *= 0.75f;
					obj11.scale = 1f;
					obj11.position = base.Center + base.velocity * num159;
				}
			}
			else if (type == 814)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item171, base.Center);
					localAI[0] = 1f;
					for (int num160 = 0; num160 < 8; num160++)
					{
						Dust obj12 = Main.dust[Dust.NewDust(base.position, width, height, 5, base.velocity.X, base.velocity.Y, 100)];
						obj12.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + base.velocity.SafeNormalize(Vector2.Zero) * 2f;
						obj12.scale = 0.9f;
						obj12.fadeIn = 1.1f;
						obj12.position = base.Center;
					}
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				for (int num161 = 0; num161 < 2; num161++)
				{
					Dust obj13 = Main.dust[Dust.NewDust(base.position, width, height, 5, base.velocity.X, base.velocity.Y, 100)];
					obj13.velocity = obj13.velocity / 4f + base.velocity / 2f;
					obj13.scale = 1.2f;
					obj13.position = base.Center + Main.rand.NextFloat() * base.velocity * 2f;
				}
				for (int num162 = 1; num162 < oldPos.Length && !(oldPos[num162] == Vector2.Zero); num162++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust obj14 = Main.dust[Dust.NewDust(oldPos[num162], width, height, 5, base.velocity.X, base.velocity.Y, 100)];
						obj14.velocity = obj14.velocity / 4f + base.velocity / 2f;
						obj14.scale = 1.2f;
						obj14.position = oldPos[num162] + base.Size / 2f + Main.rand.NextFloat() * base.velocity * 2f;
					}
				}
			}
			else if (type == 675)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageAttack, base.Center);
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			else if (type == 676)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, base.Center);
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				for (int num163 = 0; num163 < 2; num163++)
				{
					if (Main.rand.Next(5) != 0)
					{
						int num164 = Utils.SelectRandom<int>(Main.rand, 4, 256);
						Dust dust11 = Main.dust[Dust.NewDust(base.position, width, height, num164, base.velocity.X, base.velocity.Y, 100)];
						dust11.velocity = dust11.velocity / 4f + base.velocity / 2f;
						dust11.scale = 0.8f + Main.rand.NextFloat() * 0.4f;
						dust11.position = base.Center;
						dust11.position += new Vector2(width * 2, 0f).RotatedBy((float)Math.PI * 2f * Main.rand.NextFloat()) * Main.rand.NextFloat();
						dust11.noLight = true;
						if (dust11.type == 4)
						{
							dust11.color = new Color(80, 170, 40, 120);
						}
					}
				}
			}
			else if (type == 686)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFireballShot, base.Center);
				}
				if (ai[0] >= 2f)
				{
					alpha -= 25;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					Dust dust12 = Dust.NewDustDirect(base.position, width, height, 55, 0f, 0f, 200);
					dust12.scale *= 0.7f;
					dust12.velocity += base.velocity * 1f;
				}
				if (Main.rand.Next(3) == 0 && oldPos[9] != Vector2.Zero)
				{
					Dust dust13 = Dust.NewDustDirect(oldPos[9], width, height, 55, 0f, 0f, 50);
					dust13.scale *= 0.85f;
					dust13.velocity += base.velocity * 0.85f;
					dust13.color = Color.Purple;
				}
			}
			else if (type == 711)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num165 = 0; num165 < 10; num165++)
					{
						Dust dust14 = Dust.NewDustDirect(base.position, width, height, 55, 0f, 0f, 200);
						dust14.scale *= 0.65f;
						dust14.velocity *= 1.5f;
						dust14.velocity += base.velocity * 0.3f;
						dust14.fadeIn = 0.7f;
					}
				}
				if (ai[0] >= 2f)
				{
					alpha -= 25;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					Dust dust15 = Dust.NewDustDirect(base.position, width, height, 55, 0f, 0f, 200);
					dust15.scale *= 0.7f;
					dust15.velocity += base.velocity * 1f;
				}
				if (Main.rand.Next(3) == 0 && oldPos[9] != Vector2.Zero)
				{
					Dust dust16 = Dust.NewDustDirect(oldPos[9], width, height, 55, 0f, 0f, 50);
					dust16.scale *= 0.85f;
					dust16.velocity += base.velocity * 0.85f;
					dust16.color = Color.Purple;
				}
			}
			if (type == 299)
			{
				if (localAI[0] == 6f)
				{
					SoundEngine.PlaySound(SoundID.Item8, base.position);
					for (int num166 = 0; num166 < 40; num166++)
					{
						int num167 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 181, 0f, 0f, 100);
						Main.dust[num167].velocity *= 3f;
						Main.dust[num167].velocity += base.velocity * 0.75f;
						Main.dust[num167].scale *= 1.2f;
						Main.dust[num167].noGravity = true;
					}
				}
				localAI[0] += 1f;
				if (localAI[0] > 6f)
				{
					for (int num168 = 0; num168 < 3; num168++)
					{
						int num169 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 181, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100);
						Main.dust[num169].velocity *= 0.6f;
						Main.dust[num169].scale *= 1.4f;
						Main.dust[num169].noGravity = true;
					}
				}
			}
			else if (type == 270 || type == 837)
			{
				if (type == 270)
				{
					alpha = 0;
				}
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				frame++;
				if (frame > 2)
				{
					frame = 0;
				}
				if (type == 270)
				{
					for (int num170 = 0; num170 < 2; num170++)
					{
						int num171 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, 5, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 1.5f);
						Main.dust[num171].position -= base.velocity;
						Main.dust[num171].noGravity = true;
						Main.dust[num171].velocity.X *= 0.3f;
						Main.dust[num171].velocity.Y *= 0.3f;
					}
				}
				else
				{
					for (int num172 = 0; num172 < 2; num172++)
					{
						int num173 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), width - 8, height - 8, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num173].position -= base.velocity * 2f;
						Main.dust[num173].noGravity = true;
						Main.dust[num173].velocity.X *= 0.3f;
						Main.dust[num173].velocity.Y *= 0.3f;
					}
				}
			}
			if (type == 259)
			{
				if (alpha > 0)
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 265)
			{
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					int num174 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 163, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num174].noGravity = true;
					Main.dust[num174].velocity *= 0.3f;
					Main.dust[num174].velocity -= base.velocity * 0.4f;
				}
			}
			if (type == 355)
			{
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					int num175 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 205, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num175].noGravity = true;
					Main.dust[num175].velocity *= 0.3f;
					Main.dust[num175].velocity -= base.velocity * 0.4f;
				}
			}
			if (type == 357)
			{
				if (alpha < 170)
				{
					for (int num176 = 0; num176 < 10; num176++)
					{
						float x = base.position.X - base.velocity.X / 10f * (float)num176;
						float y = base.position.Y - base.velocity.Y / 10f * (float)num176;
						int num177 = Dust.NewDust(new Vector2(x, y), 1, 1, 206);
						Main.dust[num177].alpha = alpha;
						Main.dust[num177].position.X = x;
						Main.dust[num177].position.Y = y;
						Main.dust[num177].velocity *= 0f;
						Main.dust[num177].noGravity = true;
					}
				}
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			else if (type == 207 || type == 837)
			{
				if (type == 207 && alpha < 170)
				{
					for (int num178 = 0; num178 < 10; num178++)
					{
						float x2 = base.position.X - base.velocity.X / 10f * (float)num178;
						float y2 = base.position.Y - base.velocity.Y / 10f * (float)num178;
						int num179 = Dust.NewDust(new Vector2(x2, y2), 1, 1, 75);
						Main.dust[num179].alpha = alpha;
						Main.dust[num179].position.X = x2;
						Main.dust[num179].position.Y = y2;
						Main.dust[num179].velocity *= 0f;
						Main.dust[num179].noGravity = true;
					}
				}
				float num180 = (float)Math.Sqrt(base.velocity.X * base.velocity.X + base.velocity.Y * base.velocity.Y);
				float num181 = localAI[0];
				if (num181 == 0f)
				{
					localAI[0] = num180;
					num181 = num180;
				}
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num182 = base.position.X;
				float num183 = base.position.Y;
				float num184 = 300f;
				bool flag4 = false;
				int num185 = 0;
				if (ai[1] == 0f)
				{
					for (int num186 = 0; num186 < 200; num186++)
					{
						if (Main.npc[num186].CanBeChasedBy(this) && (ai[1] == 0f || ai[1] == (float)(num186 + 1)))
						{
							float num187 = Main.npc[num186].position.X + (float)(Main.npc[num186].width / 2);
							float num188 = Main.npc[num186].position.Y + (float)(Main.npc[num186].height / 2);
							float num189 = Math.Abs(base.position.X + (float)(width / 2) - num187) + Math.Abs(base.position.Y + (float)(height / 2) - num188);
							if (num189 < num184 && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num186].position, Main.npc[num186].width, Main.npc[num186].height))
							{
								num184 = num189;
								num182 = num187;
								num183 = num188;
								flag4 = true;
								num185 = num186;
							}
						}
					}
					if (flag4)
					{
						ai[1] = num185 + 1;
					}
					flag4 = false;
				}
				if (ai[1] > 0f)
				{
					int num190 = (int)(ai[1] - 1f);
					if (Main.npc[num190].active && Main.npc[num190].CanBeChasedBy(this, ignoreDontTakeDamage: true) && !Main.npc[num190].dontTakeDamage)
					{
						float num191 = Main.npc[num190].position.X + (float)(Main.npc[num190].width / 2);
						float num192 = Main.npc[num190].position.Y + (float)(Main.npc[num190].height / 2);
						if (Math.Abs(base.position.X + (float)(width / 2) - num191) + Math.Abs(base.position.Y + (float)(height / 2) - num192) < 1000f)
						{
							flag4 = true;
							num182 = Main.npc[num190].position.X + (float)(Main.npc[num190].width / 2);
							num183 = Main.npc[num190].position.Y + (float)(Main.npc[num190].height / 2);
						}
					}
					else
					{
						ai[1] = 0f;
					}
				}
				if (!friendly)
				{
					flag4 = false;
				}
				if (flag4)
				{
					float num193 = num181;
					Vector2 vector9 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num194 = num182 - vector9.X;
					float num195 = num183 - vector9.Y;
					float num196 = (float)Math.Sqrt(num194 * num194 + num195 * num195);
					num196 = num193 / num196;
					num194 *= num196;
					num195 *= num196;
					int num197 = 8;
					if (type == 837)
					{
						num197 = 32;
					}
					base.velocity.X = (base.velocity.X * (float)(num197 - 1) + num194) / (float)num197;
					base.velocity.Y = (base.velocity.Y * (float)(num197 - 1) + num195) / (float)num197;
				}
			}
			else if (type == 81 || type == 91)
			{
				if (ai[0] >= 20f)
				{
					ai[0] = 20f;
					base.velocity.Y += 0.07f;
				}
			}
			else if (type == 174 || type == 605 || type == 920 || type == 921 || type == 926 || type == 937)
			{
				if (ai[0] >= 5f)
				{
					ai[0] = 5f;
					base.velocity.Y += 0.15f;
				}
			}
			else if (type == 337)
			{
				if (base.position.Y > Main.player[owner].position.Y - 300f)
				{
					tileCollide = true;
				}
				if ((double)base.position.Y < Main.worldSurface * 16.0)
				{
					tileCollide = true;
				}
				frame = (int)ai[1];
				if (Main.rand.Next(2) == 0)
				{
					int num198 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 197);
					Main.dust[num198].velocity *= 0.5f;
					Main.dust[num198].noGravity = true;
				}
			}
			else if (type == 645)
			{
				if (ai[1] != -1f && base.position.Y > ai[1])
				{
					tileCollide = true;
				}
				if (base.position.HasNaNs())
				{
					Kill();
					return;
				}
				bool num199 = WorldGen.SolidTile(Framing.GetTileSafely((int)base.position.X / 16, (int)base.position.Y / 16));
				Dust dust17 = Main.dust[Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 229)];
				dust17.position = base.Center;
				dust17.velocity = Vector2.Zero;
				dust17.noGravity = true;
				if (num199)
				{
					dust17.noLight = true;
				}
				if (ai[1] == -1f)
				{
					ai[0] += 1f;
					base.velocity = Vector2.Zero;
					tileCollide = false;
					penetrate = -1;
					base.position = base.Center;
					width = (height = 140);
					base.Center = base.position;
					alpha -= 10;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (++frameCounter >= MaxUpdates * 3)
					{
						frameCounter = 0;
						frame++;
					}
					if (ai[0] >= (float)(Main.projFrames[type] * MaxUpdates * 3))
					{
						Kill();
					}
					return;
				}
				alpha = 255;
				if (numUpdates == 0)
				{
					int num200 = -1;
					float num201 = 60f;
					for (int num202 = 0; num202 < 200; num202++)
					{
						NPC nPC2 = Main.npc[num202];
						if (nPC2.CanBeChasedBy(this))
						{
							float num203 = Distance(nPC2.Center);
							if (num203 < num201 && Collision.CanHitLine(base.Center, 0, 0, nPC2.Center, 0, 0))
							{
								num201 = num203;
								num200 = num202;
							}
						}
					}
					if (num200 != -1)
					{
						ai[0] = 0f;
						ai[1] = -1f;
						netUpdate = true;
						return;
					}
				}
			}
			else if (type >= 424 && type <= 426)
			{
				if (base.position.Y > Main.player[owner].position.Y - 300f)
				{
					tileCollide = true;
				}
				if ((double)base.position.Y < Main.worldSurface * 16.0)
				{
					tileCollide = true;
				}
				scale = ai[1];
				rotation += base.velocity.X * 2f;
				Vector2 position = base.Center + Vector2.Normalize(base.velocity) * 10f;
				Dust obj15 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
				obj15.position = position;
				obj15.velocity = base.velocity.RotatedBy(1.5707963705062866) * 0.33f + base.velocity / 4f;
				obj15.position += base.velocity.RotatedBy(1.5707963705062866);
				obj15.fadeIn = 0.5f;
				obj15.noGravity = true;
				Dust obj16 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
				obj16.position = position;
				obj16.velocity = base.velocity.RotatedBy(-1.5707963705062866) * 0.33f + base.velocity / 4f;
				obj16.position += base.velocity.RotatedBy(-1.5707963705062866);
				obj16.fadeIn = 0.5f;
				obj16.noGravity = true;
				for (int num204 = 0; num204 < 1; num204++)
				{
					int num205 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6);
					Main.dust[num205].velocity *= 0.5f;
					Main.dust[num205].scale *= 1.3f;
					Main.dust[num205].fadeIn = 1f;
					Main.dust[num205].noGravity = true;
				}
			}
			else if (type == 344)
			{
				if (WorldGen.SolidTile((int)base.position.X / 16, (int)(base.position.Y + base.velocity.Y) / 16 + 1) || WorldGen.SolidTile((int)(base.position.X + (float)width) / 16, (int)(base.position.Y + base.velocity.Y) / 16 + 1))
				{
					Kill();
					return;
				}
				localAI[1] += 1f;
				if (localAI[1] > 5f)
				{
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				frame = (int)ai[1];
				if (localAI[1] > 20f)
				{
					localAI[1] = 20f;
					base.velocity.Y += 0.15f;
				}
				rotation += Main.windSpeedCurrent * 0.2f;
				base.velocity.X += Main.windSpeedCurrent * 0.1f;
			}
			else if (type == 336 || type == 345)
			{
				if (type == 345 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item1, base.position);
				}
				if (ai[0] >= 50f)
				{
					ai[0] = 50f;
					base.velocity.Y += 0.5f;
				}
			}
			else if (type == 246)
			{
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[0] >= 60f)
				{
					ai[0] = 60f;
					base.velocity.Y += 0.15f;
				}
			}
			else if (type == 311)
			{
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[0] >= 30f)
				{
					ai[0] = 30f;
					if (ai[1] == 0f)
					{
						ai[1] = 1f;
					}
					base.velocity.Y += 0.5f;
				}
			}
			else if (type == 312)
			{
				if (ai[0] >= 5f)
				{
					alpha = 0;
				}
				if (ai[0] >= 20f)
				{
					ai[0] = 30f;
					base.velocity.Y += 0.5f;
				}
				Lighting.AddLight(base.Center, 0.6f, 0.4f, 0.3f);
			}
			else if (type != 239 && type != 264)
			{
				if (type == 176)
				{
					if (ai[0] >= 15f)
					{
						ai[0] = 15f;
						base.velocity.Y += 0.05f;
					}
				}
				else if (type == 275 || type == 276)
				{
					if (alpha > 0)
					{
						alpha -= 30;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (ai[0] >= 35f)
					{
						ai[0] = 35f;
						base.velocity.Y += 0.025f;
					}
					if (Main.expertMode)
					{
						float num206 = 18f;
						int num207 = Player.FindClosest(base.Center, 1, 1);
						Vector2 value17 = Main.player[num207].Center - base.Center;
						value17.Normalize();
						value17 *= num206;
						int num208 = 70;
						base.velocity = (base.velocity * (num208 - 1) + value17) / num208;
						if (base.velocity.Length() < 14f)
						{
							base.velocity.Normalize();
							base.velocity *= 14f;
						}
						tileCollide = false;
						if (timeLeft > 180)
						{
							timeLeft = 180;
						}
					}
				}
				else if (type == 172)
				{
					if (ai[0] >= 17f)
					{
						ai[0] = 17f;
						base.velocity.Y += 0.085f;
					}
				}
				else if (type == 117)
				{
					if (ai[0] >= 35f)
					{
						ai[0] = 35f;
						base.velocity.Y += 0.06f;
					}
				}
				else if (type == 120)
				{
					int num209 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X, base.position.Y - base.velocity.Y), width, height, 67, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num209].noGravity = true;
					Main.dust[num209].velocity *= 0.3f;
					if (ai[0] >= 30f)
					{
						ai[0] = 30f;
						base.velocity.Y += 0.05f;
					}
				}
				else if (type == 195)
				{
					if (ai[0] >= 20f)
					{
						ai[0] = 20f;
						base.velocity.Y += 0.075f;
						tileCollide = true;
					}
					else
					{
						tileCollide = false;
					}
				}
				else if (type == 267 || type == 477 || type == 478 || type == 479)
				{
					localAI[0] += 1f;
					if (localAI[0] > 3f)
					{
						alpha = 0;
					}
					if (ai[0] >= 20f)
					{
						ai[0] = 20f;
						if (type != 477)
						{
							base.velocity.Y += 0.075f;
						}
					}
					if (type == 479 && Main.myPlayer == owner)
					{
						if (ai[1] >= 0f)
						{
							penetrate = -1;
						}
						else if (penetrate < 0)
						{
							penetrate = 1;
						}
						if (ai[1] >= 0f)
						{
							ai[1] += 1f;
						}
						if (ai[1] > (float)Main.rand.Next(5, 30))
						{
							ai[1] = -1000f;
							float num210 = base.velocity.Length();
							Vector2 velocity = base.velocity;
							velocity.Normalize();
							int num211 = Main.rand.Next(2, 4);
							if (Main.rand.Next(4) == 0)
							{
								num211++;
							}
							for (int num212 = 0; num212 < num211; num212++)
							{
								Vector2 vector10 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
								vector10.Normalize();
								vector10 += velocity * 2f;
								vector10.Normalize();
								vector10 *= num210;
								NewProjectile(base.Center.X, base.Center.Y, vector10.X, vector10.Y, type, damage, knockBack, owner, 0f, -1000f);
							}
						}
					}
					if (type == 478 && Main.myPlayer == owner)
					{
						ai[1] += 1f;
						if (ai[1] > (float)Main.rand.Next(5, 20))
						{
							if (timeLeft > 40)
							{
								timeLeft -= 20;
							}
							ai[1] = 0f;
							NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)damage * 0.8), knockBack * 0.5f, owner);
						}
					}
				}
				else if (type == 408)
				{
					if (ai[0] >= 45f)
					{
						ai[0] = 45f;
						base.velocity.Y += 0.05f;
					}
				}
				else if (type == 616)
				{
					if (alpha < 170)
					{
						float num213 = 3f;
						for (int num214 = 0; (float)num214 < num213; num214++)
						{
							int num215 = Dust.NewDust(base.position, 1, 1, 229);
							Main.dust[num215].position = base.Center - base.velocity / num213 * num214;
							Main.dust[num215].velocity *= 0f;
							Main.dust[num215].noGravity = true;
							Main.dust[num215].alpha = 200;
							Main.dust[num215].scale = 0.5f;
						}
					}
					float num216 = (float)Math.Sqrt(base.velocity.X * base.velocity.X + base.velocity.Y * base.velocity.Y);
					float num217 = localAI[0];
					if (num217 == 0f)
					{
						localAI[0] = num216;
						num217 = num216;
					}
					if (alpha > 0)
					{
						alpha -= 25;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					float num218 = base.position.X;
					float num219 = base.position.Y;
					float num220 = 800f;
					bool flag5 = false;
					int num221 = 0;
					ai[0] += 1f;
					if (ai[0] > 20f)
					{
						ai[0] -= 1f;
						if (ai[1] == 0f)
						{
							for (int num222 = 0; num222 < 200; num222++)
							{
								if (Main.npc[num222].CanBeChasedBy(this) && (ai[1] == 0f || ai[1] == (float)(num222 + 1)))
								{
									float num223 = Main.npc[num222].position.X + (float)(Main.npc[num222].width / 2);
									float num224 = Main.npc[num222].position.Y + (float)(Main.npc[num222].height / 2);
									float num225 = Math.Abs(base.position.X + (float)(width / 2) - num223) + Math.Abs(base.position.Y + (float)(height / 2) - num224);
									if (num225 < num220 && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num222].position, Main.npc[num222].width, Main.npc[num222].height))
									{
										num220 = num225;
										num218 = num223;
										num219 = num224;
										flag5 = true;
										num221 = num222;
									}
								}
							}
							if (flag5)
							{
								ai[1] = num221 + 1;
							}
							flag5 = false;
						}
						if (ai[1] != 0f)
						{
							int num226 = (int)(ai[1] - 1f);
							if (Main.npc[num226].active && Main.npc[num226].CanBeChasedBy(this, ignoreDontTakeDamage: true))
							{
								float num227 = Main.npc[num226].position.X + (float)(Main.npc[num226].width / 2);
								float num228 = Main.npc[num226].position.Y + (float)(Main.npc[num226].height / 2);
								if (Math.Abs(base.position.X + (float)(width / 2) - num227) + Math.Abs(base.position.Y + (float)(height / 2) - num228) < 1000f)
								{
									flag5 = true;
									num218 = Main.npc[num226].position.X + (float)(Main.npc[num226].width / 2);
									num219 = Main.npc[num226].position.Y + (float)(Main.npc[num226].height / 2);
								}
							}
						}
						if (!friendly)
						{
							flag5 = false;
						}
						if (flag5)
						{
							float num229 = num217;
							Vector2 vector11 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num230 = num218 - vector11.X;
							float num231 = num219 - vector11.Y;
							float num232 = (float)Math.Sqrt(num230 * num230 + num231 * num231);
							num232 = num229 / num232;
							num230 *= num232;
							num231 *= num232;
							int num233 = 8;
							base.velocity.X = (base.velocity.X * (float)(num233 - 1) + num230) / (float)num233;
							base.velocity.Y = (base.velocity.Y * (float)(num233 - 1) + num231) / (float)num233;
						}
					}
				}
				else if (type == 507 || type == 508 || type == 662 || type == 680 || type == 685)
				{
					if (ai[0] > 45f)
					{
						base.velocity.X *= 0.98f;
						base.velocity.Y += 0.3f;
					}
				}
				else if (type == 495)
				{
					int num234 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X, base.position.Y - base.velocity.Y), width, height, 27, base.velocity.X, base.velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num234].noGravity = true;
					Main.dust[num234].velocity *= 0.3f;
					if (ai[0] >= 30f)
					{
						ai[0] = 30f;
						base.velocity.Y += 0.04f;
					}
				}
				else if (type == 498)
				{
					if (localAI[0] == 0f)
					{
						localAI[0] += 1f;
						SoundEngine.PlaySound(SoundID.Item17, base.position);
					}
					ai[0] += 1f;
					if (ai[0] >= 50f)
					{
						base.velocity.X *= 0.98f;
						base.velocity.Y += 0.15f;
						rotation += (float)direction * 0.5f;
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				else if (type == 437)
				{
					if (ai[0] >= 12f)
					{
						if (ai[0] >= 20f)
						{
							Kill();
						}
						alpha += 30;
					}
				}
				else if (type != 442 && type != 634 && type != 635 && type != 675)
				{
					if (type == 686 || type == 711)
					{
						if (ai[0] >= 10f)
						{
							base.velocity.Y += 0.1f;
						}
						if (ai[0] >= 20f)
						{
							base.velocity.Y += 0.1f;
						}
						if (ai[0] > 20f)
						{
							ai[0] = 20f;
						}
						base.velocity.X *= 0.99f;
						if (base.velocity.Y > 32f)
						{
							base.velocity.Y = 32f;
						}
					}
					else if (type == 639)
					{
						if (timeLeft <= MaxUpdates * 45 - 14)
						{
							base.velocity.Y += 0.1f;
						}
					}
					else if (type == 710)
					{
						if (ai[0] >= 0f)
						{
							ai[0] += 1f;
							if (ai[0] >= 20f)
							{
								base.velocity.Y += 0.2f;
								if (base.velocity.Y > 0f)
								{
									base.velocity.X *= 0.98f;
								}
								if (base.velocity.Y > 12f)
								{
									base.velocity.Y = 12f;
								}
							}
						}
					}
					else if (ai[0] >= 15f)
					{
						ai[0] = 15f;
						base.velocity.Y += 0.1f;
					}
				}
			}
			if (type == 921 || type == 926 || type == 937)
			{
				rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.05f;
			}
			else if (type == 248)
			{
				if (base.velocity.X < 0f)
				{
					rotation -= (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.05f;
				}
				else
				{
					rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.05f;
				}
			}
			else if (type == 270 || type == 585 || type == 601 || type == 706 || type == 837)
			{
				spriteDirection = direction;
				if (direction < 0)
				{
					rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
				}
				else
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
				}
			}
			else if (type == 311)
			{
				if (ai[1] != 0f)
				{
					rotation += base.velocity.X * 0.1f + (float)Main.rand.Next(-10, 11) * 0.025f;
				}
				else
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				}
			}
			else if (type == 312)
			{
				rotation += base.velocity.X * 0.02f;
			}
			else if (type == 675)
			{
				rotation += base.velocity.X * 0.03f;
			}
			else if (type != 676)
			{
				if (type == 408)
				{
					rotation = base.velocity.ToRotation();
					if (direction == -1)
					{
						rotation += (float)Math.PI;
					}
				}
				else if (type == 435 || type == 459 || type == 682 || type == 709)
				{
					rotation = base.velocity.ToRotation();
					if (direction == -1)
					{
						rotation += (float)Math.PI;
					}
				}
				else if (type == 660)
				{
					rotation = base.velocity.ToRotation() + (float)Math.PI / 4f;
				}
				else if (type == 662 || type == 685)
				{
					rotation = base.velocity.ToRotation() - (float)Math.PI - (float)Math.PI / 4f;
				}
				else if (type == 680 || type == 684 || type == 686 || type == 711 || type == 712)
				{
					rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 436)
				{
					rotation = base.velocity.ToRotation();
					rotation += (float)Math.PI;
					if (direction == -1)
					{
						rotation += (float)Math.PI;
					}
				}
				else if (type == 469)
				{
					if (base.velocity.X > 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				else if (type == 477)
				{
					if (localAI[1] < 5f)
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
						localAI[1] += 1f;
					}
					else
					{
						rotation = (rotation * 2f + (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f) / 3f;
					}
				}
				else if (type == 532)
				{
					rotation += 0.2f + Math.Abs(base.velocity.X) * 0.1f;
				}
				else if (type == 483)
				{
					rotation += base.velocity.X * 0.05f;
				}
				else if (type == 772)
				{
					rotation += (float)Math.Sign(base.velocity.X) * (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.05f;
				}
				else if (type == 485)
				{
					Vector2 value18 = new Vector2(ai[0], ai[1]);
					base.velocity = (base.velocity * 39f + value18) / 40f;
					int num235 = Dust.NewDust(base.position, width, height, 6);
					Main.dust[num235].noGravity = true;
					Main.dust[num235].velocity *= 0.2f;
					Main.dust[num235].position = (Main.dust[num235].position + base.Center) / 2f;
					frameCounter++;
					if (frameCounter >= 2)
					{
						frameCounter = 0;
						frame++;
						if (frame >= 5)
						{
							frame = 0;
						}
					}
					if (base.velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					}
				}
				else if (type == 640)
				{
					if (base.velocity != Vector2.Zero)
					{
						rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
					}
				}
				else if (type == 325)
				{
					rotation = base.velocity.ToRotation() - (float)Math.PI / 2f;
				}
				else if (type != 344 && type != 498)
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
				}
			}
			if (base.velocity.Y > 16f)
			{
				base.velocity.Y = 16f;
			}
		}

		private void AI_010()
		{
			if (type == 31 && ai[0] != 2f)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 32, 0f, velocity.Y / 2f);
					Main.dust[num].velocity.X *= 0.4f;
				}
			}
			else if (type == 39)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 38, 0f, velocity.Y / 2f);
					Main.dust[num2].velocity.X *= 0.4f;
				}
			}
			else if (type >= 411 && type <= 414)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num3 = 9;
					if (type == 412 || type == 414)
					{
						num3 = 11;
					}
					if (type == 413)
					{
						num3 = 19;
					}
					int num4 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num3, 0f, velocity.Y / 2f);
					Main.dust[num4].noGravity = true;
					Main.dust[num4].velocity -= velocity * 0.5f;
				}
			}
			else if (type == 40)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 36, 0f, velocity.Y / 2f);
					Main.dust[num5].velocity *= 0.4f;
				}
			}
			else if (type == 42 || type == 31)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num6 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 32);
					Main.dust[num6].velocity.X *= 0.4f;
				}
			}
			else if (type == 56 || type == 65)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num7 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14);
					Main.dust[num7].velocity.X *= 0.4f;
				}
			}
			else if (type == 67 || type == 68)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num8 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 51);
					Main.dust[num8].velocity.X *= 0.4f;
				}
			}
			else if (type == 71)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num9 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 53);
					Main.dust[num9].velocity.X *= 0.4f;
				}
			}
			else if (type == 179)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num10 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 149);
					Main.dust[num10].velocity.X *= 0.4f;
				}
			}
			else if (type == 241 || type == 354)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num11 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 36);
					Main.dust[num11].velocity.X *= 0.4f;
				}
			}
			else if (type >= 736 && type <= 738)
			{
				if (Main.rand.Next(40) == 0)
				{
					int num12 = Dust.NewDust(position, width, height, type - 736 + 275);
					if (num12 >= 0)
					{
						Main.dust[num12].velocity = Main.dust[num12].velocity * 0.5f + velocity * 0.5f;
					}
				}
			}
			else if (type != 109 && Main.rand.Next(20) == 0)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0);
			}
			if (type >= 736 && type <= 738)
			{
				if (localAI[0] == 0f)
				{
					frame = Main.rand.Next(3);
					scale = 1f - (float)Main.rand.Next(30) * 0.01f;
				}
				localAI[0] += 1f;
			}
			tileCollide = true;
			localAI[1] = 0f;
			if (Main.myPlayer == owner && ai[0] == 0f)
			{
				tileCollide = false;
				if (Main.player[owner].channel && (type < 736 || type > 738) && type != 40)
				{
					localAI[1] = -1f;
					float num13 = 12f;
					Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num14 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
					float num15 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
					if (Main.player[owner].gravDir == -1f)
					{
						num15 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
					}
					float num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
					num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
					if (num16 > num13)
					{
						num16 = num13 / num16;
						num14 *= num16;
						num15 *= num16;
						if (num14 != velocity.X || num15 != velocity.Y)
						{
							netUpdate = true;
						}
						velocity.X = num14;
						velocity.Y = num15;
					}
					else
					{
						if (num14 != velocity.X || num15 != velocity.Y)
						{
							netUpdate = true;
						}
						velocity.X = num14;
						velocity.Y = num15;
					}
				}
				else
				{
					ai[0] = 1f;
					netUpdate = true;
				}
			}
			if (ai[0] == 1f && type != 109)
			{
				if (type == 42 || type == 65 || type == 68 || type == 354)
				{
					ai[1] += 1f;
					if (ai[1] >= 60f)
					{
						ai[1] = 60f;
						velocity.Y += 0.2f;
					}
				}
				else
				{
					velocity.Y += 0.41f;
				}
			}
			else if (ai[0] == 2f && type != 109)
			{
				velocity.Y += 0.2f;
				if ((double)velocity.X < -0.04)
				{
					velocity.X += 0.04f;
				}
				else if ((double)velocity.X > 0.04)
				{
					velocity.X -= 0.04f;
				}
				else
				{
					velocity.X = 0f;
				}
			}
			if (owner == Main.myPlayer)
			{
				for (int i = (int)(position.X / 16f); i <= (int)((position.X + (float)width) / 16f); i++)
				{
					for (int j = (int)(position.Y / 16f); j <= (int)((position.Y + (float)height) / 16f); j++)
					{
						if (WorldGen.InWorld(i, j) && Main.tile[i, j].active())
						{
							if ((Main.tile[i, j].type >= 185 && Main.tile[i, j].type <= 187) || Main.tile[i, j].type == 165 || Main.tile[i, j].type == 12 || Main.tile[i, j].type == 105 || Main.tile[i, j].type == 178)
							{
								WorldGen.KillTile(i, j);
							}
							else if (Main.tile[i, j].topSlope())
							{
								Main.tile[i, j].slope(0);
							}
						}
					}
				}
			}
			if (type >= 736 && type <= 738)
			{
				if (frame == 0)
				{
					rotation -= 0.1f;
				}
				else if (frame == 1)
				{
					rotation += 0.1f;
				}
				else
				{
					rotation += 0.15f;
				}
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else
			{
				rotation += 0.1f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
		}

		private void AI_026()
		{
			if (!Main.player[owner].active)
			{
				active = false;
				return;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			int num = 85;
			bool flag5 = type >= 191 && type <= 194;
			if (type == 324)
			{
				num = 120;
			}
			if (type == 112)
			{
				num = 100;
			}
			if (type == 127)
			{
				num = 50;
			}
			switch (type)
			{
			case 816:
			case 821:
			case 825:
			case 854:
			case 858:
			case 859:
			case 860:
			case 881:
			case 885:
			case 889:
			case 891:
			case 897:
			case 899:
			case 900:
			case 934:
				num = 95;
				break;
			case 884:
			case 890:
				num = 80;
				break;
			}
			if (flag5)
			{
				if (lavaWet)
				{
					ai[0] = 1f;
					ai[1] = 0f;
				}
				num = 60 + 30 * minionPos;
			}
			else if (type == 266)
			{
				num = 60 + 30 * minionPos;
			}
			if (type == 111)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].bunny = false;
				}
				if (Main.player[owner].bunny)
				{
					timeLeft = 2;
				}
			}
			if (type == 112)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].penguin = false;
				}
				if (Main.player[owner].penguin)
				{
					timeLeft = 2;
				}
			}
			if (type == 334)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].puppy = false;
				}
				if (Main.player[owner].puppy)
				{
					timeLeft = 2;
				}
			}
			if (type == 353)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].grinch = false;
				}
				if (Main.player[owner].grinch)
				{
					timeLeft = 2;
				}
			}
			if (type == 127)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].turtle = false;
				}
				if (Main.player[owner].turtle)
				{
					timeLeft = 2;
				}
			}
			if (type == 175)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].eater = false;
				}
				if (Main.player[owner].eater)
				{
					timeLeft = 2;
				}
			}
			if (type == 197)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].skeletron = false;
				}
				if (Main.player[owner].skeletron)
				{
					timeLeft = 2;
				}
			}
			if (type == 198)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].hornet = false;
				}
				if (Main.player[owner].hornet)
				{
					timeLeft = 2;
				}
			}
			if (type == 199)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].tiki = false;
				}
				if (Main.player[owner].tiki)
				{
					timeLeft = 2;
				}
			}
			if (type == 200)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].lizard = false;
				}
				if (Main.player[owner].lizard)
				{
					timeLeft = 2;
				}
			}
			if (type == 208)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].parrot = false;
				}
				if (Main.player[owner].parrot)
				{
					timeLeft = 2;
				}
			}
			if (type == 209)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].truffle = false;
				}
				if (Main.player[owner].truffle)
				{
					timeLeft = 2;
				}
			}
			if (type == 210)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].sapling = false;
				}
				if (Main.player[owner].sapling)
				{
					timeLeft = 2;
				}
			}
			if (type == 324)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].cSapling = false;
				}
				if (Main.player[owner].cSapling)
				{
					timeLeft = 2;
				}
			}
			if (type == 313)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].spider = false;
				}
				if (Main.player[owner].spider)
				{
					timeLeft = 2;
				}
			}
			if (type == 314)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].squashling = false;
				}
				if (Main.player[owner].squashling)
				{
					timeLeft = 2;
				}
			}
			if (type == 211)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].wisp = false;
				}
				if (Main.player[owner].wisp)
				{
					timeLeft = 2;
				}
			}
			if (type == 236)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].dino = false;
				}
				if (Main.player[owner].dino)
				{
					timeLeft = 2;
				}
			}
			if (type == 499)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].babyFaceMonster = false;
				}
				if (Main.player[owner].babyFaceMonster)
				{
					timeLeft = 2;
				}
			}
			if (type == 765)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagSugarGlider = false;
				}
				if (Main.player[owner].petFlagSugarGlider)
				{
					timeLeft = 2;
				}
			}
			if (type == 266)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].slime = false;
				}
				if (Main.player[owner].slime)
				{
					timeLeft = 2;
				}
			}
			if (type == 268)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].eyeSpring = false;
				}
				if (Main.player[owner].eyeSpring)
				{
					timeLeft = 2;
				}
			}
			if (type == 269)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].snowman = false;
				}
				if (Main.player[owner].snowman)
				{
					timeLeft = 2;
				}
			}
			if (type == 319)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].blackCat = false;
				}
				if (Main.player[owner].blackCat)
				{
					timeLeft = 2;
				}
			}
			if (type == 380)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].zephyrfish = false;
				}
				if (Main.player[owner].zephyrfish)
				{
					timeLeft = 2;
				}
			}
			if (type == 774)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagBabyShark = false;
				}
				if (Main.player[owner].petFlagBabyShark)
				{
					timeLeft = 2;
				}
			}
			if (type == 815)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagLilHarpy = false;
				}
				if (Main.player[owner].petFlagLilHarpy)
				{
					timeLeft = 2;
				}
			}
			if (type == 816)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagFennecFox = false;
				}
				if (Main.player[owner].petFlagFennecFox)
				{
					timeLeft = 2;
				}
			}
			if (type == 817)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagGlitteryButterfly = false;
				}
				if (Main.player[owner].petFlagGlitteryButterfly)
				{
					timeLeft = 2;
				}
			}
			if (type == 821)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagBabyImp = false;
				}
				if (Main.player[owner].petFlagBabyImp)
				{
					timeLeft = 2;
				}
			}
			if (type == 825)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagBabyRedPanda = false;
				}
				if (Main.player[owner].petFlagBabyRedPanda)
				{
					timeLeft = 2;
				}
			}
			if (type == 854)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagPlantero = false;
				}
				if (Main.player[owner].petFlagPlantero)
				{
					timeLeft = 2;
				}
			}
			if (type == 858)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagDynamiteKitten = false;
				}
				if (Main.player[owner].petFlagDynamiteKitten)
				{
					timeLeft = 2;
				}
			}
			if (type == 859)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagBabyWerewolf = false;
				}
				if (Main.player[owner].petFlagBabyWerewolf)
				{
					timeLeft = 2;
				}
			}
			if (type == 860)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagShadowMimic = false;
				}
				if (Main.player[owner].petFlagShadowMimic)
				{
					timeLeft = 2;
				}
			}
			if (type == 875)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagVoltBunny = false;
				}
				if (Main.player[owner].petFlagVoltBunny)
				{
					timeLeft = 2;
				}
			}
			if (type == 881)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagKingSlimePet = false;
				}
				if (Main.player[owner].petFlagKingSlimePet)
				{
					timeLeft = 2;
				}
			}
			if (type == 884)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagBrainOfCthulhuPet = false;
				}
				if (Main.player[owner].petFlagBrainOfCthulhuPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 885)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagSkeletronPet = false;
				}
				if (Main.player[owner].petFlagSkeletronPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 886)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagQueenBeePet = false;
				}
				if (Main.player[owner].petFlagQueenBeePet)
				{
					timeLeft = 2;
				}
			}
			if (type == 889)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagSkeletronPrimePet = false;
				}
				if (Main.player[owner].petFlagSkeletronPrimePet)
				{
					timeLeft = 2;
				}
			}
			if (type == 890)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagPlanteraPet = false;
				}
				if (Main.player[owner].petFlagPlanteraPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 891)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagGolemPet = false;
				}
				if (Main.player[owner].petFlagGolemPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 892)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagDukeFishronPet = false;
				}
				if (Main.player[owner].petFlagDukeFishronPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 894)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagMoonLordPet = false;
				}
				if (Main.player[owner].petFlagMoonLordPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 897)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagEverscreamPet = false;
				}
				if (Main.player[owner].petFlagEverscreamPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 899)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagMartianPet = false;
				}
				if (Main.player[owner].petFlagMartianPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 900)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagDD2OgrePet = false;
				}
				if (Main.player[owner].petFlagDD2OgrePet)
				{
					timeLeft = 2;
				}
			}
			if (type == 901)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagDD2BetsyPet = false;
				}
				if (Main.player[owner].petFlagDD2BetsyPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 934)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagQueenSlimePet = false;
				}
				if (Main.player[owner].petFlagQueenSlimePet)
				{
					timeLeft = 2;
				}
			}
			if (flag5)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].pygmy = false;
				}
				if (Main.player[owner].pygmy)
				{
					timeLeft = Main.rand.Next(2, 10);
				}
			}
			if (type >= 390 && type <= 392)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].spiderMinion = false;
				}
				if (Main.player[owner].spiderMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 398)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].miniMinotaur = false;
				}
				if (Main.player[owner].miniMinotaur)
				{
					timeLeft = 2;
				}
			}
			if (flag5 || type == 266 || (type >= 390 && type <= 392))
			{
				num = 10;
				int num2 = 40 * (minionPos + 1) * Main.player[owner].direction;
				if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2) - (float)num + (float)num2)
				{
					flag = true;
				}
				else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2) + (float)num + (float)num2)
				{
					flag2 = true;
				}
			}
			else if (type == 891)
			{
				num = 30;
				float num3 = -50 * -Main.player[owner].direction;
				float num4 = Main.player[owner].Center.X + num3;
				if (num4 < position.X + (float)(width / 2) - (float)num)
				{
					flag = true;
				}
				else if (num4 > position.X + (float)(width / 2) + (float)num)
				{
					flag2 = true;
				}
			}
			else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2) - (float)num)
			{
				flag = true;
			}
			else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2) + (float)num)
			{
				flag2 = true;
			}
			if (type == 175)
			{
				float num5 = 0.1f;
				tileCollide = false;
				int num6 = 300;
				Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num7 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector.X;
				float num8 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector.Y;
				if (type == 127)
				{
					num8 = Main.player[owner].position.Y - vector.Y;
				}
				float num9 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
				float num10 = 7f;
				float num11 = 2000f;
				bool num12 = num9 > num11;
				if (num9 < (float)num6 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (base.velocity.Y < -6f)
					{
						base.velocity.Y = -6f;
					}
				}
				if (num9 < 150f)
				{
					if (Math.Abs(base.velocity.X) > 2f || Math.Abs(base.velocity.Y) > 2f)
					{
						base.velocity *= 0.99f;
					}
					num5 = 0.01f;
					if (num7 < -2f)
					{
						num7 = -2f;
					}
					if (num7 > 2f)
					{
						num7 = 2f;
					}
					if (num8 < -2f)
					{
						num8 = -2f;
					}
					if (num8 > 2f)
					{
						num8 = 2f;
					}
				}
				else
				{
					if (num9 > 300f)
					{
						num5 = 0.2f;
					}
					num9 = num10 / num9;
					num7 *= num9;
					num8 *= num9;
				}
				if (num12)
				{
					int num13 = 17;
					for (int i = 0; i < 12; i++)
					{
						float speedX = 1f - Main.rand.NextFloat() * 2f;
						float speedY = 1f - Main.rand.NextFloat() * 2f;
						int num14 = Dust.NewDust(position, width, height, num13, speedX, speedY);
						Main.dust[num14].noLightEmittence = true;
						Main.dust[num14].noGravity = true;
					}
					base.Center = Main.player[owner].Center;
					base.velocity = Vector2.Zero;
					if (Main.myPlayer == owner)
					{
						netUpdate = true;
					}
				}
				if (Math.Abs(num7) > Math.Abs(num8) || num5 == 0.05f)
				{
					if (base.velocity.X < num7)
					{
						base.velocity.X += num5;
						if (num5 > 0.05f && base.velocity.X < 0f)
						{
							base.velocity.X += num5;
						}
					}
					if (base.velocity.X > num7)
					{
						base.velocity.X -= num5;
						if (num5 > 0.05f && base.velocity.X > 0f)
						{
							base.velocity.X -= num5;
						}
					}
				}
				if (Math.Abs(num7) <= Math.Abs(num8) || num5 == 0.05f)
				{
					if (base.velocity.Y < num8)
					{
						base.velocity.Y += num5;
						if (num5 > 0.05f && base.velocity.Y < 0f)
						{
							base.velocity.Y += num5;
						}
					}
					if (base.velocity.Y > num8)
					{
						base.velocity.Y -= num5;
						if (num5 > 0.05f && base.velocity.Y > 0f)
						{
							base.velocity.Y -= num5;
						}
					}
				}
				rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
				frameCounter++;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 1)
				{
					frame = 0;
				}
				return;
			}
			if (type == 197)
			{
				float num15 = 0.1f;
				tileCollide = false;
				int num16 = 300;
				Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num17 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector2.X;
				float num18 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector2.Y;
				if (type == 127)
				{
					num18 = Main.player[owner].position.Y - vector2.Y;
				}
				float num19 = (float)Math.Sqrt(num17 * num17 + num18 * num18);
				float num20 = 3f;
				if (num19 > 500f)
				{
					localAI[0] = 10000f;
				}
				if (localAI[0] >= 10000f)
				{
					num20 = 14f;
				}
				float num21 = 2000f;
				bool num22 = num19 > num21;
				if (num19 < (float)num16 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (base.velocity.Y < -6f)
					{
						base.velocity.Y = -6f;
					}
				}
				if (num19 < 150f)
				{
					if (Math.Abs(base.velocity.X) > 2f || Math.Abs(base.velocity.Y) > 2f)
					{
						base.velocity *= 0.99f;
					}
					num15 = 0.01f;
					if (num17 < -2f)
					{
						num17 = -2f;
					}
					if (num17 > 2f)
					{
						num17 = 2f;
					}
					if (num18 < -2f)
					{
						num18 = -2f;
					}
					if (num18 > 2f)
					{
						num18 = 2f;
					}
				}
				else
				{
					if (num19 > 300f)
					{
						num15 = 0.2f;
					}
					num19 = num20 / num19;
					num17 *= num19;
					num18 *= num19;
				}
				if (num22)
				{
					int num23 = 26;
					for (int j = 0; j < 12; j++)
					{
						float speedX2 = 1f - Main.rand.NextFloat() * 2f;
						float speedY2 = 1f - Main.rand.NextFloat() * 2f;
						int num24 = Dust.NewDust(position, width, height, num23, speedX2, speedY2);
						Main.dust[num24].noLightEmittence = true;
						Main.dust[num24].noGravity = true;
					}
					base.Center = Main.player[owner].Center;
					base.velocity = Vector2.Zero;
					if (Main.myPlayer == owner)
					{
						netUpdate = true;
					}
				}
				if (base.velocity.X < num17)
				{
					base.velocity.X += num15;
					if (num15 > 0.05f && base.velocity.X < 0f)
					{
						base.velocity.X += num15;
					}
				}
				if (base.velocity.X > num17)
				{
					base.velocity.X -= num15;
					if (num15 > 0.05f && base.velocity.X > 0f)
					{
						base.velocity.X -= num15;
					}
				}
				if (base.velocity.Y < num18)
				{
					base.velocity.Y += num15;
					if (num15 > 0.05f && base.velocity.Y < 0f)
					{
						base.velocity.Y += num15;
					}
				}
				if (base.velocity.Y > num18)
				{
					base.velocity.Y -= num15;
					if (num15 > 0.05f && base.velocity.Y > 0f)
					{
						base.velocity.Y -= num15;
					}
				}
				localAI[0] += Main.rand.Next(10);
				if (localAI[0] > 10000f)
				{
					if (localAI[1] == 0f)
					{
						if (base.velocity.X < 0f)
						{
							localAI[1] = -1f;
						}
						else
						{
							localAI[1] = 1f;
						}
					}
					rotation += 0.25f * localAI[1];
					if (localAI[0] > 12000f)
					{
						localAI[0] = 0f;
					}
				}
				else
				{
					localAI[1] = 0f;
					float num25 = base.velocity.X * 0.1f;
					if (rotation > num25)
					{
						rotation -= (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f;
						if (rotation < num25)
						{
							rotation = num25;
						}
					}
					if (rotation < num25)
					{
						rotation += (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) * 0.01f;
						if (rotation > num25)
						{
							rotation = num25;
						}
					}
				}
				if ((double)rotation > 6.28)
				{
					rotation -= 6.28f;
				}
				if ((double)rotation < -6.28)
				{
					rotation += 6.28f;
				}
				return;
			}
			if (type == 198 || type == 380 || type == 774 || type == 815 || type == 817 || type == 886 || type == 892 || type == 894 || type == 901)
			{
				float num26 = 0.4f;
				if (type == 380)
				{
					num26 = 0.3f;
				}
				if (type == 774)
				{
					num26 = 0.3f;
				}
				tileCollide = false;
				int num27 = 100;
				float num28 = 50f;
				float num29 = 400f;
				float num30 = num29 / 2f;
				float num31 = 2000f;
				bool flag6 = false;
				Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num32 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector3.X;
				float num33 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector3.Y;
				if (type == 774)
				{
					num28 = 2f;
					float num34 = (float)Math.Sin((float)Math.PI * 2f * ((float)Main.player[owner].miscCounter / 60f));
					float num35 = Utils.GetLerpValue(0.5f, 1f, num34, clamped: true);
					if (new Vector2(num32 - (float)(70 * Main.player[owner].direction), num33 - 60f).Length() > 50f)
					{
						num34 = 0f;
						num35 = 0f;
					}
					num33 += -60f + num35 * -8f + num34 * 8f;
					num32 += (float)(70 * -Main.player[owner].direction);
				}
				else
				{
					if (type != 892 && type != 894)
					{
						num33 += (float)Main.rand.Next(-10, 21);
						num32 += (float)Main.rand.Next(-10, 21);
					}
					num32 += (float)(60 * -Main.player[owner].direction);
					num33 -= 60f;
				}
				Vector2 vector4 = new Vector2(num32, num33);
				if (type == 127)
				{
					num33 = Main.player[owner].position.Y - vector3.Y;
				}
				float num36 = (float)Math.Sqrt(num32 * num32 + num33 * num33);
				float num37 = num36;
				float num38 = 14f;
				if (type == 380)
				{
					num38 = 6f;
				}
				if (type == 815 || type == 817)
				{
					num38 = ((!(num36 < num29)) ? 10f : 6f);
				}
				if (type == 892 || type == 894 || type == 901)
				{
					if (num36 < num30)
					{
						num38 = 6f;
					}
					num38 = ((!(num36 < num29)) ? 12f : 9f);
				}
				if (type == 774)
				{
					num38 = 5f;
				}
				if (num36 < (float)num27 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (base.velocity.Y < -6f)
					{
						base.velocity.Y = -6f;
					}
				}
				if (num36 < num28)
				{
					if (Math.Abs(base.velocity.X) > 2f || Math.Abs(base.velocity.Y) > 2f)
					{
						if (type == 892 || type == 892)
						{
							base.velocity *= 0.95f;
						}
						else
						{
							base.velocity *= 0.99f;
						}
					}
					num26 = 0.01f;
				}
				else
				{
					if (type == 892 || type == 894 || type == 901)
					{
						if (num36 < 100f)
						{
							num26 = 0.1f;
						}
						if (num36 > num31)
						{
							flag6 = true;
						}
						else if (num36 > num29)
						{
							num26 = 0.7f;
						}
						else if (num36 > num30)
						{
							num26 = 0.5f;
						}
					}
					else if (type == 815 || type == 817)
					{
						if (num36 < 100f)
						{
							num26 = 0.1f;
						}
						if (num36 > num31)
						{
							flag6 = true;
						}
						else if (type != 815 && num36 > num29)
						{
							num26 = 0.5f;
						}
					}
					else if (type == 380)
					{
						if (num36 < 100f)
						{
							num26 = 0.1f;
						}
						if (num36 > 300f)
						{
							num26 = 0.4f;
						}
						if (num36 > num31)
						{
							flag6 = true;
						}
					}
					else if (type == 198 || type == 886)
					{
						if (num36 < 100f)
						{
							num26 = 0.1f;
						}
						if (num36 > 300f)
						{
							num26 = 0.6f;
						}
						if (num36 > num31)
						{
							flag6 = true;
						}
					}
					else if (type == 774)
					{
						if (num36 < 40f)
						{
							num26 = 0.1f;
						}
						if (num36 > 300f)
						{
							num26 = 0.6f;
						}
						if (num36 > num31)
						{
							flag6 = true;
						}
					}
					num36 = num38 / num36;
					num32 *= num36;
					num33 *= num36;
				}
				if (base.velocity.X < num32)
				{
					base.velocity.X += num26;
					if (num26 > 0.05f && base.velocity.X < 0f)
					{
						base.velocity.X += num26;
					}
				}
				if (base.velocity.X > num32)
				{
					base.velocity.X -= num26;
					if (num26 > 0.05f && base.velocity.X > 0f)
					{
						base.velocity.X -= num26;
					}
				}
				if (base.velocity.Y < num33)
				{
					base.velocity.Y += num26;
					if (num26 > 0.05f && base.velocity.Y < 0f)
					{
						base.velocity.Y += num26 * 2f;
					}
				}
				if (base.velocity.Y > num33)
				{
					base.velocity.Y -= num26;
					if (num26 > 0.05f && base.velocity.Y > 0f)
					{
						base.velocity.Y -= num26 * 2f;
					}
				}
				if ((double)base.velocity.X > 0.25)
				{
					direction = -1;
				}
				else if ((double)base.velocity.X < -0.25)
				{
					direction = 1;
				}
				spriteDirection = direction;
				rotation = base.velocity.X * 0.05f;
				if (flag6)
				{
					int num39 = 33;
					if (type == 198 || type == 886)
					{
						num39 = 147;
					}
					if (type == 815)
					{
						num39 = 31;
					}
					if (type == 817)
					{
						num39 = 21;
					}
					for (int k = 0; k < 12; k++)
					{
						float speedX3 = 1f - Main.rand.NextFloat() * 2f;
						float speedY3 = 1f - Main.rand.NextFloat() * 2f;
						int num40 = Dust.NewDust(position, width, height, num39, speedX3, speedY3);
						Main.dust[num40].noLightEmittence = true;
						Main.dust[num40].noGravity = true;
					}
					base.Center = Main.player[owner].Center;
					base.velocity = Vector2.Zero;
					if (Main.myPlayer == owner)
					{
						netUpdate = true;
					}
				}
				int num41 = 3;
				int num42 = 0;
				int num43 = 3;
				if (type == 380)
				{
					num41 = 6;
				}
				if (type == 815)
				{
					num41 = 5;
					num42 = 0;
					num43 = 5;
					if (num37 > num29)
					{
						num42 = 6;
						num43 = 9;
					}
				}
				if (type == 817)
				{
					num41 = 6;
					num42 = 0;
					num43 = 2;
				}
				if (type == 901)
				{
					num41 = 4;
					num42 = 0;
					num43 = 5;
					if (num37 > num29 / 2f)
					{
						num41 = 3;
						num42 = 6;
						num43 = 11;
					}
				}
				if (type == 892)
				{
					num41 = 6;
					num42 = 0;
					num43 = Main.projFrames[type] - 1;
				}
				if (type == 886 || type == 894)
				{
					num41 = 4;
					num42 = 0;
					num43 = Main.projFrames[type] - 1;
				}
				if (type == 774)
				{
					if (Main.player[owner].velocity.Length() < 2f && vector4.Length() < 10f)
					{
						direction = -Main.player[owner].direction;
						spriteDirection = direction;
					}
					num41 = 6;
					if (!wet)
					{
						num42 += 4;
						num43 += 4;
					}
					rotation = base.velocity.X * 0.05f + Math.Abs(base.velocity.Y * -0.05f);
				}
				if (++frameCounter >= num41)
				{
					frameCounter = 0;
					frame++;
					if (frame < num42 || frame > num43)
					{
						frame = num42;
					}
				}
				return;
			}
			if (type == 211)
			{
				float num44 = 0.2f;
				float num45 = 5f;
				tileCollide = false;
				Vector2 vector5 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num46 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector5.X;
				float num47 = Main.player[owner].position.Y + Main.player[owner].gfxOffY + (float)(Main.player[owner].height / 2) - vector5.Y;
				if (Main.player[owner].controlLeft)
				{
					num46 -= 120f;
				}
				else if (Main.player[owner].controlRight)
				{
					num46 += 120f;
				}
				if (Main.player[owner].controlDown)
				{
					num47 += 120f;
				}
				else
				{
					if (Main.player[owner].controlUp)
					{
						num47 -= 120f;
					}
					num47 -= 60f;
				}
				float num48 = (float)Math.Sqrt(num46 * num46 + num47 * num47);
				if (num48 > 1000f)
				{
					position.X += num46;
					position.Y += num47;
				}
				if (localAI[0] == 1f)
				{
					if (num48 < 10f)
					{
						Player player = Main.player[owner];
						if (Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y) < num45 && (player.velocity.Y == 0f || (player.mount.Active && player.mount.CanFly())))
						{
							localAI[0] = 0f;
						}
					}
					num45 = 12f;
					if (num48 < num45)
					{
						base.velocity.X = num46;
						base.velocity.Y = num47;
					}
					else
					{
						num48 = num45 / num48;
						base.velocity.X = num46 * num48;
						base.velocity.Y = num47 * num48;
					}
					if ((double)base.velocity.X > 0.5)
					{
						direction = -1;
					}
					else if ((double)base.velocity.X < -0.5)
					{
						direction = 1;
					}
					spriteDirection = direction;
					rotation -= (0.2f + Math.Abs(base.velocity.X) * 0.025f) * (float)direction;
					frameCounter++;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 5)
					{
						frame = 5;
					}
					if (frame > 9)
					{
						frame = 5;
					}
					for (int l = 0; l < 2; l++)
					{
						int num49 = Dust.NewDust(new Vector2(position.X + 3f, position.Y + 4f), 14, 14, 156);
						Main.dust[num49].velocity *= 0.2f;
						Main.dust[num49].noGravity = true;
						Main.dust[num49].scale = 1.25f;
						Main.dust[num49].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
					}
					return;
				}
				if (num48 > 200f)
				{
					localAI[0] = 1f;
				}
				if ((double)base.velocity.X > 0.5)
				{
					direction = -1;
				}
				else if ((double)base.velocity.X < -0.5)
				{
					direction = 1;
				}
				spriteDirection = direction;
				if (num48 < 10f)
				{
					base.velocity.X = num46;
					base.velocity.Y = num47;
					rotation = base.velocity.X * 0.05f;
					if (num48 < num45)
					{
						position += base.velocity;
						base.velocity *= 0f;
						num44 = 0f;
					}
					direction = -Main.player[owner].direction;
				}
				num48 = num45 / num48;
				num46 *= num48;
				num47 *= num48;
				if (base.velocity.X < num46)
				{
					base.velocity.X += num44;
					if (base.velocity.X < 0f)
					{
						base.velocity.X *= 0.99f;
					}
				}
				if (base.velocity.X > num46)
				{
					base.velocity.X -= num44;
					if (base.velocity.X > 0f)
					{
						base.velocity.X *= 0.99f;
					}
				}
				if (base.velocity.Y < num47)
				{
					base.velocity.Y += num44;
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y *= 0.99f;
					}
				}
				if (base.velocity.Y > num47)
				{
					base.velocity.Y -= num44;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.99f;
					}
				}
				if (base.velocity.X != 0f || base.velocity.Y != 0f)
				{
					rotation = base.velocity.X * 0.05f;
				}
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 4)
				{
					frame = 0;
				}
				return;
			}
			if (type == 199)
			{
				float num50 = 0.1f;
				tileCollide = false;
				int num51 = 200;
				Vector2 vector6 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num52 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector6.X;
				float num53 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector6.Y;
				num53 -= 60f;
				num52 -= 2f;
				if (type == 127)
				{
					num53 = Main.player[owner].position.Y - vector6.Y;
				}
				float num54 = (float)Math.Sqrt(num52 * num52 + num53 * num53);
				float num55 = 4f;
				float num56 = num54;
				float num57 = 2000f;
				bool num58 = num54 > num57;
				if (num54 < (float)num51 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (base.velocity.Y < -6f)
					{
						base.velocity.Y = -6f;
					}
				}
				if (num54 < 4f)
				{
					base.velocity.X = num52;
					base.velocity.Y = num53;
					num50 = 0f;
				}
				else
				{
					if (num54 > 350f)
					{
						num50 = 0.2f;
						num55 = 10f;
					}
					num54 = num55 / num54;
					num52 *= num54;
					num53 *= num54;
				}
				if (num58)
				{
					int num59 = 2;
					for (int m = 0; m < 12; m++)
					{
						float speedX4 = 1f - Main.rand.NextFloat() * 2f;
						float speedY4 = 1f - Main.rand.NextFloat() * 2f;
						int num60 = Dust.NewDust(position, width, height, num59, speedX4, speedY4);
						Main.dust[num60].noLightEmittence = true;
						Main.dust[num60].noGravity = true;
					}
					base.Center = Main.player[owner].Center;
					base.velocity = Vector2.Zero;
					if (Main.myPlayer == owner)
					{
						netUpdate = true;
					}
				}
				if (base.velocity.X < num52)
				{
					base.velocity.X += num50;
					if (base.velocity.X < 0f)
					{
						base.velocity.X += num50;
					}
				}
				if (base.velocity.X > num52)
				{
					base.velocity.X -= num50;
					if (base.velocity.X > 0f)
					{
						base.velocity.X -= num50;
					}
				}
				if (base.velocity.Y < num53)
				{
					base.velocity.Y += num50;
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y += num50;
					}
				}
				if (base.velocity.Y > num53)
				{
					base.velocity.Y -= num50;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y -= num50;
					}
				}
				direction = -Main.player[owner].direction;
				spriteDirection = 1;
				rotation = base.velocity.Y * 0.05f * (float)(-direction);
				if (num56 >= 50f)
				{
					frameCounter++;
					if (frameCounter <= 6)
					{
						return;
					}
					frameCounter = 0;
					if (base.velocity.X < 0f)
					{
						if (frame < 2)
						{
							frame++;
						}
						if (frame > 2)
						{
							frame--;
						}
					}
					else
					{
						if (frame < 6)
						{
							frame++;
						}
						if (frame > 6)
						{
							frame--;
						}
					}
				}
				else
				{
					frameCounter++;
					if (frameCounter > 6)
					{
						frame += direction;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 0;
					}
					if (frame < 0)
					{
						frame = 7;
					}
				}
				return;
			}
			if (type == 885 || type == 889)
			{
				Player player2 = Main.player[owner];
				float num61 = 0.15f;
				tileCollide = false;
				int num62 = 150;
				Vector2 center = base.Center;
				float num63 = player2.Center.X - center.X;
				float num64 = player2.Center.Y - center.Y;
				num64 -= 65f;
				num63 -= (float)(30 * player2.direction);
				float num65 = (float)Math.Sqrt(num63 * num63 + num64 * num64);
				float num66 = 8f;
				float num67 = num65;
				float num68 = 2000f;
				bool num69 = num65 > num68;
				if (num65 < (float)num62 && player2.velocity.Y == 0f && position.Y + (float)height <= player2.position.Y + (float)player2.height && !Collision.SolidCollision(position, width, height) && base.velocity.Y < -6f)
				{
					base.velocity.Y = -6f;
				}
				if (num65 < 10f)
				{
					base.velocity *= 0.9f;
					if (base.velocity.Length() < 0.5f)
					{
						base.velocity = Vector2.Zero;
					}
					num61 = 0f;
				}
				else
				{
					if (num65 > (float)num62)
					{
						num61 = 0.2f;
						num66 = 12f;
					}
					num65 = num66 / num65;
					num63 *= num65;
					num64 *= num65;
				}
				if (num69)
				{
					int num70 = 234;
					if (type == 889)
					{
						num70 = 60;
					}
					for (int n = 0; n < 12; n++)
					{
						float speedX5 = 1f - Main.rand.NextFloat() * 2f;
						float speedY5 = 1f - Main.rand.NextFloat() * 2f;
						int num71 = Dust.NewDust(position, width, height, num70, speedX5, speedY5);
						Main.dust[num71].noLightEmittence = true;
						Main.dust[num71].noGravity = true;
					}
					base.Center = player2.Center;
					base.velocity = Vector2.Zero;
					if (Main.myPlayer == owner)
					{
						netUpdate = true;
					}
				}
				if (base.velocity.X < num63)
				{
					base.velocity.X += num61;
					if (base.velocity.X < 0f)
					{
						base.velocity.X += num61;
					}
				}
				if (base.velocity.X > num63)
				{
					base.velocity.X -= num61;
					if (base.velocity.X > 0f)
					{
						base.velocity.X -= num61;
					}
				}
				if (base.velocity.Y < num64)
				{
					base.velocity.Y += num61;
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y += num61;
					}
				}
				if (base.velocity.Y > num64)
				{
					base.velocity.Y -= num61;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y -= num61;
					}
				}
				direction = -player2.direction;
				spriteDirection = -direction;
				int num72 = 100;
				if (num67 >= (float)num62)
				{
					rotation += 0.5f;
					if (rotation > (float)Math.PI * 2f)
					{
						rotation -= (float)Math.PI * 2f;
					}
					frame = 6;
					frameCounter = 0;
					if (type == 885)
					{
						localAI[0] = 0f;
					}
					if (type == 889)
					{
						localAI[0] += 3f;
						if (localAI[0] > (float)num72)
						{
							localAI[0] = num72;
						}
					}
					return;
				}
				rotation *= 0.95f;
				if (rotation < 0.05f)
				{
					rotation = 0f;
				}
				frameCounter++;
				if (type == 885)
				{
					switch (frameCounter)
					{
					case 10:
						localAI[0] = 0f;
						break;
					case 20:
						localAI[0] = 1f;
						break;
					case 30:
						localAI[0] = 2f;
						break;
					case 40:
						localAI[0] = 1f;
						break;
					}
				}
				if (type == 889)
				{
					localAI[0] -= 3f;
					if (localAI[0] < 0f)
					{
						localAI[0] = 0f;
					}
				}
				if (frameCounter % 5 == 0)
				{
					frame++;
					if (frame > 5)
					{
						frame = 0;
					}
				}
				if (frameCounter >= 40)
				{
					frameCounter = 0;
				}
				return;
			}
			if (ai[1] == 0f)
			{
				int num73 = 500;
				if (type == 127)
				{
					num73 = 200;
				}
				if (type == 208)
				{
					num73 = 300;
				}
				switch (type)
				{
				case 816:
				case 825:
				case 854:
				case 858:
				case 859:
				case 860:
				case 881:
				case 884:
				case 890:
				case 891:
				case 897:
				case 900:
				case 934:
					num73 = 400;
					break;
				case 821:
				case 899:
					num73 = 500;
					break;
				}
				if (flag5 || type == 266 || (type >= 390 && type <= 392))
				{
					num73 += 40 * minionPos;
					if (localAI[0] > 0f)
					{
						num73 += 500;
					}
					if (type == 266 && localAI[0] > 0f)
					{
						num73 += 100;
					}
					if (type >= 390 && type <= 392 && localAI[0] > 0f)
					{
						num73 += 400;
					}
				}
				if (Main.player[owner].rocketDelay2 > 0)
				{
					ai[0] = 1f;
				}
				Vector2 vector7 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num74 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector7.X;
				float num75 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector7.Y;
				float num76 = (float)Math.Sqrt(num74 * num74 + num75 * num75);
				if (num76 > 2000f)
				{
					position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
					position.Y = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - (float)(height / 2);
				}
				else if (num76 > (float)num73 || (Math.Abs(num75) > 300f && ((!flag5 && type != 266 && (type < 390 || type > 392)) || !(localAI[0] > 0f))))
				{
					if (type != 324)
					{
						if (num75 > 0f && base.velocity.Y < 0f)
						{
							base.velocity.Y = 0f;
						}
						if (num75 < 0f && base.velocity.Y > 0f)
						{
							base.velocity.Y = 0f;
						}
					}
					ai[0] = 1f;
				}
			}
			if (type == 209 && ai[0] != 0f)
			{
				if (Main.player[owner].velocity.Y == 0f && alpha >= 100)
				{
					position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
					position.Y = Main.player[owner].position.Y + (float)Main.player[owner].height - (float)height;
					ai[0] = 0f;
				}
				else
				{
					base.velocity.X = 0f;
					base.velocity.Y = 0f;
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
			}
			else if (ai[0] != 0f)
			{
				float num77 = 0.2f;
				int num78 = 200;
				if (type == 127)
				{
					num78 = 100;
				}
				if (flag5 || type == 816 || type == 821 || type == 825 || type == 854 || type == 858 || type == 859 || type == 860)
				{
					num77 = 0.5f;
					num78 = 100;
				}
				if (type == 875)
				{
					num77 = 2f;
					num78 = 100;
				}
				tileCollide = false;
				Vector2 vector8 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num79 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector8.X;
				if (flag5 || type == 266 || (type >= 390 && type <= 392))
				{
					num79 -= (float)(40 * Main.player[owner].direction);
					float num80 = 700f;
					if (flag5)
					{
						num80 += 100f;
					}
					bool flag7 = false;
					int num81 = -1;
					for (int num82 = 0; num82 < 200; num82++)
					{
						if (!Main.npc[num82].CanBeChasedBy(this))
						{
							continue;
						}
						float num83 = Main.npc[num82].position.X + (float)(Main.npc[num82].width / 2);
						float num84 = Main.npc[num82].position.Y + (float)(Main.npc[num82].height / 2);
						if (Math.Abs(Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - num83) + Math.Abs(Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - num84) < num80)
						{
							if (Collision.CanHit(position, width, height, Main.npc[num82].position, Main.npc[num82].width, Main.npc[num82].height))
							{
								num81 = num82;
							}
							flag7 = true;
							break;
						}
					}
					if (!flag7)
					{
						num79 -= (float)(40 * minionPos * Main.player[owner].direction);
					}
					if (flag7 && num81 >= 0)
					{
						ai[0] = 0f;
					}
				}
				float num85 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector8.Y;
				if (type == 127)
				{
					num85 = Main.player[owner].position.Y - vector8.Y;
				}
				float num86 = (float)Math.Sqrt(num79 * num79 + num85 * num85);
				float num87 = num86;
				float num88 = 10f;
				float num89 = num86;
				if (type == 111)
				{
					num88 = 11f;
				}
				if (type == 127)
				{
					num88 = 9f;
				}
				if (type == 875)
				{
					num77 = 1.8f;
					num88 = 16f;
				}
				if (type == 324)
				{
					num88 = 20f;
				}
				if (flag5 || type == 816 || type == 821 || type == 825 || type == 854 || type == 858 || type == 859 || type == 860)
				{
					num77 = 0.4f;
					num88 = 12f;
					if (num88 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
					{
						num88 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
					}
				}
				if (type == 208 && Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y) > 4f)
				{
					num78 = -1;
				}
				if (num86 < (float)num78 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (base.velocity.Y < -6f)
					{
						base.velocity.Y = -6f;
					}
				}
				if (num86 < 60f)
				{
					num79 = base.velocity.X;
					num85 = base.velocity.Y;
				}
				else
				{
					num86 = num88 / num86;
					num79 *= num86;
					num85 *= num86;
				}
				if (type == 324)
				{
					if (num89 > 1000f)
					{
						if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) < (double)num88 - 1.25)
						{
							base.velocity *= 1.025f;
						}
						if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) > (double)num88 + 1.25)
						{
							base.velocity *= 0.975f;
						}
					}
					else if (num89 > 600f)
					{
						if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < num88 - 1f)
						{
							base.velocity *= 1.05f;
						}
						if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) > num88 + 1f)
						{
							base.velocity *= 0.95f;
						}
					}
					else if (num89 > 400f)
					{
						if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) < (double)num88 - 0.5)
						{
							base.velocity *= 1.075f;
						}
						if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) > (double)num88 + 0.5)
						{
							base.velocity *= 0.925f;
						}
					}
					else
					{
						if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) < (double)num88 - 0.25)
						{
							base.velocity *= 1.1f;
						}
						if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) > (double)num88 + 0.25)
						{
							base.velocity *= 0.9f;
						}
					}
					base.velocity.X = (base.velocity.X * 34f + num79) / 35f;
					base.velocity.Y = (base.velocity.Y * 34f + num85) / 35f;
				}
				else if (type == 875)
				{
					if (num87 < (float)num78)
					{
						if (base.velocity.X < num79)
						{
							base.velocity.X += num77;
						}
						else if (base.velocity.X > num79)
						{
							base.velocity.X -= num77;
						}
						if (base.velocity.Y < num85)
						{
							base.velocity.Y += num77;
						}
						else if (base.velocity.Y > num85)
						{
							base.velocity.Y -= num77;
						}
					}
					else
					{
						base.velocity = Vector2.Lerp(base.velocity, new Vector2(num79, num85), 0.75f);
					}
				}
				else
				{
					if (base.velocity.X < num79)
					{
						base.velocity.X += num77;
						if (base.velocity.X < 0f)
						{
							base.velocity.X += num77 * 1.5f;
						}
					}
					if (base.velocity.X > num79)
					{
						base.velocity.X -= num77;
						if (base.velocity.X > 0f)
						{
							base.velocity.X -= num77 * 1.5f;
						}
					}
					if (base.velocity.Y < num85)
					{
						base.velocity.Y += num77;
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y += num77 * 1.5f;
						}
					}
					if (base.velocity.Y > num85)
					{
						base.velocity.Y -= num77;
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y -= num77 * 1.5f;
						}
					}
				}
				if (type == 111)
				{
					frame = 7;
				}
				if (type == 112)
				{
					frame = 2;
				}
				if (flag5 && frame < 12)
				{
					frame = Main.rand.Next(12, 18);
					frameCounter = 0;
				}
				if (type != 313)
				{
					if ((double)base.velocity.X > 0.5)
					{
						spriteDirection = -1;
					}
					else if ((double)base.velocity.X < -0.5)
					{
						spriteDirection = 1;
					}
				}
				if (type == 900)
				{
					spriteDirection = -1;
					if (base.velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					frameCounter++;
					if (frame < 10)
					{
						frame = 10;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 10;
						}
					}
					rotation = base.velocity.X * 0.125f;
				}
				else if (type == 899)
				{
					spriteDirection = -1;
					if (base.velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					frameCounter++;
					if (frame < 10)
					{
						frame = 10;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 10;
						}
					}
					Vector2 velocity = base.velocity;
					velocity.Normalize();
					rotation = velocity.ToRotation();
					if (base.velocity.X < 0f)
					{
						rotation += (float)Math.PI;
					}
				}
				else if (type == 897)
				{
					spriteDirection = 1;
					frameCounter++;
					if (frame < 8)
					{
						frame = 8;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 8;
						}
					}
					Vector2 velocity2 = base.velocity;
					velocity2.Normalize();
					rotation = velocity2.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 891)
				{
					spriteDirection = 1;
					frameCounter++;
					if (frame < 9)
					{
						frame = 9;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 9;
						}
					}
					Vector2 velocity3 = base.velocity;
					velocity3.Normalize();
					rotation = velocity3.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 890)
				{
					spriteDirection = -1;
					if (base.velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					frameCounter++;
					if (frame < 9)
					{
						frame = 9;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 9;
						}
					}
					rotation = base.velocity.X * 0.025f;
				}
				else if (type == 884)
				{
					spriteDirection = -1;
					if (base.velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					frameCounter++;
					if (frame < 9)
					{
						frame = 9;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 9;
						}
					}
					Vector2 velocity4 = base.velocity;
					velocity4.Normalize();
					rotation = velocity4.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 881 || type == 934)
				{
					int num90 = 1226;
					if (type == 934)
					{
						num90 = 1261;
					}
					if (frame < 6 || frame > 11)
					{
						Gore.NewGore(new Vector2(base.Center.X, position.Y), base.velocity * 0.5f, num90);
					}
					frameCounter++;
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 6 || frame > 11)
					{
						frame = 6;
					}
					Vector2 velocity5 = base.velocity;
					velocity5.Normalize();
					rotation = velocity5.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 875)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 7 || frame > 10)
					{
						frame = 7;
					}
					Vector2 velocity6 = base.velocity;
					velocity6.Normalize();
					rotation = velocity6.ToRotation() + ((spriteDirection == -1) ? 0f : ((float)Math.PI));
				}
				else if (type == 825)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 21 || frame > 25)
					{
						frame = 21;
					}
					rotation = base.velocity.X * 0.025f;
				}
				else if (type == 854)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 13 || frame > 18)
					{
						frame = 13;
					}
					Vector2 velocity7 = base.velocity;
					velocity7.Normalize();
					rotation = velocity7.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 858)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 10 || frame > 13)
					{
						frame = 10;
					}
					Vector2 velocity8 = base.velocity;
					velocity8.Normalize();
					rotation = velocity8.ToRotation() + ((spriteDirection == -1) ? 0f : ((float)Math.PI));
				}
				else if (type == 859)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 18 || frame > 23)
					{
						frame = 18;
					}
					rotation = base.velocity.X * 0.025f;
				}
				else if (type == 860)
				{
					if (frame < 6)
					{
						frame = 8;
						frameCounter = 0;
					}
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 13)
					{
						frame = 6;
					}
					Vector2 velocity9 = base.velocity;
					velocity9.Normalize();
					rotation = velocity9.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 816)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 11 || frame > 16)
					{
						frame = 11;
					}
					rotation = base.velocity.X * 0.025f;
				}
				else if (type == 821)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 19 || frame > 22)
					{
						frame = 19;
					}
					rotation = base.velocity.X * 0.025f;
				}
				else if (type == 112)
				{
					if (spriteDirection == -1)
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
					}
				}
				else if (type >= 390 && type <= 392)
				{
					int num91 = (int)(base.Center.X / 16f);
					int num92 = (int)(base.Center.Y / 16f);
					if (Main.tile[num91, num92] != null && Main.tile[num91, num92].wall > 0)
					{
						rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
						frameCounter += (int)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y));
						if (frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 7)
						{
							frame = 4;
						}
						if (frame < 4)
						{
							frame = 7;
						}
					}
					else
					{
						frameCounter++;
						if (frameCounter > 2)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 8 || frame > 10)
						{
							frame = 8;
						}
						rotation = base.velocity.X * 0.1f;
					}
				}
				else if (type == 334)
				{
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 7 || frame > 10)
					{
						frame = 7;
					}
					rotation = base.velocity.X * 0.1f;
				}
				else if (type == 353)
				{
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 10 || frame > 13)
					{
						frame = 10;
					}
					rotation = base.velocity.X * 0.05f;
				}
				else if (type == 127)
				{
					frameCounter += 3;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame <= 5 || frame > 15)
					{
						frame = 6;
					}
					rotation = base.velocity.X * 0.1f;
				}
				else if (type == 269)
				{
					if (frame == 6)
					{
						frameCounter = 0;
					}
					else if (frame < 4 || frame > 6)
					{
						frameCounter = 0;
						frame = 4;
					}
					else
					{
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
					}
					rotation = base.velocity.X * 0.05f;
				}
				else if (type == 266)
				{
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 2 || frame > 5)
					{
						frame = 2;
					}
					rotation = base.velocity.X * 0.1f;
				}
				else if (type == 324)
				{
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 6 || frame > 9)
					{
						frame = 6;
					}
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.58f;
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
					for (int num93 = 0; num93 < 2; num93++)
					{
						int num94 = 4;
						int num95 = Dust.NewDust(new Vector2(base.Center.X - (float)num94, base.Center.Y - (float)num94) - base.velocity * 0f, num94 * 2, num94 * 2, 6, 0f, 0f, 100);
						Main.dust[num95].scale *= 1.8f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num95].velocity *= 0.2f;
						if (num93 == 1)
						{
							Main.dust[num95].position -= base.velocity * 0.5f;
						}
						Main.dust[num95].noGravity = true;
						num95 = Dust.NewDust(new Vector2(base.Center.X - (float)num94, base.Center.Y - (float)num94) - base.velocity * 0f, num94 * 2, num94 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num95].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num95].velocity *= 0.05f;
						if (num93 == 1)
						{
							Main.dust[num95].position -= base.velocity * 0.5f;
						}
					}
				}
				else if (type == 268)
				{
					frameCounter++;
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 6 || frame > 7)
					{
						frame = 6;
					}
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.58f;
				}
				else if (type == 200)
				{
					frameCounter += 3;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame <= 5 || frame > 9)
					{
						frame = 6;
					}
					rotation = base.velocity.X * 0.1f;
				}
				else if (type == 208)
				{
					rotation = base.velocity.X * 0.075f;
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 4)
					{
						frame = 1;
					}
					if (frame < 1)
					{
						frame = 1;
					}
				}
				else if (type == 236)
				{
					rotation = base.velocity.Y * 0.05f * (float)direction;
					if (base.velocity.Y < 0f)
					{
						frameCounter += 2;
					}
					else
					{
						frameCounter++;
					}
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 12)
					{
						frame = 9;
					}
					if (frame < 9)
					{
						frame = 9;
					}
				}
				else if (type == 499)
				{
					rotation = base.velocity.Y * 0.05f * (float)direction;
					if (base.velocity.Y < 0f)
					{
						frameCounter += 2;
					}
					else
					{
						frameCounter++;
					}
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 12)
					{
						frame = 8;
					}
					if (frame < 8)
					{
						frame = 8;
					}
				}
				else if (type == 765)
				{
					rotation = base.velocity.Y * 0.05f * (float)direction;
					frameCounter++;
					if (frameCounter >= 8)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 10)
					{
						frame = 8;
					}
					if (frame < 6)
					{
						frame = 6;
					}
				}
				else if (type == 314)
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.58f;
					frameCounter++;
					if (frameCounter >= 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 12)
					{
						frame = 7;
					}
					if (frame < 7)
					{
						frame = 7;
					}
				}
				else if (type == 319)
				{
					rotation = base.velocity.X * 0.05f;
					frameCounter++;
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 10)
					{
						frame = 6;
					}
					if (frame < 6)
					{
						frame = 6;
					}
				}
				else if (type == 210)
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.58f;
					frameCounter += 3;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 11)
					{
						frame = 7;
					}
					if (frame < 7)
					{
						frame = 7;
					}
				}
				else if (type == 313)
				{
					position.Y += height;
					height = 54;
					position.Y -= height;
					position.X += width / 2;
					width = 54;
					position.X -= width / 2;
					rotation += base.velocity.X * 0.01f;
					frameCounter = 0;
					frame = 11;
				}
				else if (type == 398)
				{
					if ((double)base.velocity.X > 0.5)
					{
						spriteDirection = 1;
					}
					else if ((double)base.velocity.X < -0.5)
					{
						spriteDirection = -1;
					}
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 6 || frame > 9)
					{
						frame = 6;
					}
					rotation = base.velocity.X * 0.1f;
				}
				else if (spriteDirection == -1)
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
				}
				else
				{
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 3.14f;
				}
				if (!flag5 && type != 499 && type != 765 && type != 816 && type != 821 && type != 825 && type != 859 && type != 881 && type != 884 && type != 890 && type != 891 && type != 900 && type != 934)
				{
					if (type == 899)
					{
						int num96 = 6;
						if (Main.rand.Next(4) == 0)
						{
							num96 = 31;
						}
						int num97 = Dust.NewDust(base.Center + new Vector2(-8f, 0f) - base.velocity * 0.25f, 15, 15, num96, (0f - base.velocity.X) * 0.5f, base.velocity.Y * 0.5f, 0, default(Color), 1.3f);
						Main.dust[num97].velocity.X = Main.dust[num97].velocity.X * 0.2f;
						Main.dust[num97].velocity.Y = Main.dust[num97].velocity.Y * 0.2f - 0.2f;
						Main.dust[num97].noGravity = true;
					}
					else if (type == 897)
					{
						int num98 = 6;
						if (Main.rand.Next(4) == 0)
						{
							num98 = 31;
						}
						int num99 = Dust.NewDust(base.Center + new Vector2(-8f, -8f) - base.velocity * 0.25f, 15, 15, num98, (0f - base.velocity.X) * 0.5f, base.velocity.Y * 0.5f, 0, default(Color), 1.3f);
						Main.dust[num99].velocity.X = Main.dust[num99].velocity.X * 0.2f;
						Main.dust[num99].velocity.Y = Main.dust[num99].velocity.Y * 0.2f - 0.2f;
						Main.dust[num99].noGravity = true;
					}
					else if (type == 875)
					{
						if (Main.rand.Next(3) == 0)
						{
							Gore.NewGorePerfect(base.Center + new Vector2(-10f + (float)Main.rand.Next(-20, 20) * 0.5f, -10f + (float)Main.rand.Next(-20, 20) * 0.5f), base.velocity * 0.1f, 1225, 0.5f + Main.rand.NextFloat() * 1f);
							Vector2 vector9 = Main.rand.NextVector2CircularEdge(2f, 2f) + base.velocity * -0.5f;
							vector9 *= 0.5f;
							int num100 = Dust.NewDust(base.Center - base.velocity * 1.5f - new Vector2(7f, 7f), 15, 15, 226, vector9.X, vector9.Y, 0, default(Color), 0.65f);
							Main.dust[num100].noGravity = true;
						}
					}
					else if (type == 860)
					{
						int num101 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) + base.velocity, 8, 8, 27, (0f - base.velocity.X) * 0.5f, base.velocity.Y * 0.5f);
						Main.dust[num101].velocity.X = Main.dust[num101].velocity.X * 0.2f;
						Main.dust[num101].velocity.Y = Main.dust[num101].velocity.Y * 0.2f - 0.2f;
						Main.dust[num101].velocity += new Vector2((float)Main.rand.Next(-10, 10) * 0.4f, (float)Main.rand.Next(-10, 10) * 0.4f) * 0.5f;
						Main.dust[num101].noGravity = true;
					}
					else if (type == 858)
					{
						int num102 = 6;
						if (Main.rand.Next(4) == 0)
						{
							num102 = 31;
						}
						int num103 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) - base.velocity, 10, 10, num102, (0f - base.velocity.X) * 0.5f, base.velocity.Y * 0.5f, 0, default(Color), 1.3f);
						Main.dust[num103].velocity.X = Main.dust[num103].velocity.X * 0.2f;
						Main.dust[num103].velocity.Y = Main.dust[num103].velocity.Y * 0.2f - 0.2f;
						Main.dust[num103].noGravity = true;
					}
					else if (type == 854)
					{
						if (Main.rand.Next(6) == 0)
						{
							Vector2 vector10 = base.Center / 16f;
							int i2 = (int)vector10.X;
							int num104 = (int)vector10.Y;
							Tile tileSafely = Framing.GetTileSafely(i2, num104 + 1);
							if (!WorldGen.SolidTile(tileSafely) && tileSafely.liquid == 0)
							{
								Gore gore = Gore.NewGorePerfect(base.Center + new Vector2((float)Main.rand.Next(-30, 30) * 0.5f, (float)Main.rand.Next(-30, 30) * 0.5f), base.velocity * -0.2f, 910);
								gore.Frame.CurrentColumn = 0;
								gore.timeLeft = 1;
							}
						}
					}
					else if (type != 398 && type != 390 && type != 391 && type != 392 && type != 127 && type != 200 && type != 208 && type != 210 && type != 236 && type != 266 && type != 268 && type != 269 && type != 313 && type != 314 && type != 319 && type != 324 && type != 334 && type != 353)
					{
						int num105 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) - base.velocity, 8, 8, 16, (0f - base.velocity.X) * 0.5f, base.velocity.Y * 0.5f, 50, default(Color), 1.7f);
						Main.dust[num105].velocity.X = Main.dust[num105].velocity.X * 0.2f;
						Main.dust[num105].velocity.Y = Main.dust[num105].velocity.Y * 0.2f;
						Main.dust[num105].noGravity = true;
					}
				}
			}
			else
			{
				if (flag5)
				{
					float num106 = 40 * minionPos;
					int num107 = 30;
					int num108 = 60;
					localAI[0] -= 1f;
					if (localAI[0] < 0f)
					{
						localAI[0] = 0f;
					}
					if (ai[1] > 0f)
					{
						ai[1] -= 1f;
					}
					else
					{
						float num109 = position.X;
						float num110 = position.Y;
						float num111 = 100000f;
						float num112 = num111;
						int num113 = -1;
						NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
						if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
						{
							float num114 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
							float num115 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
							float num116 = Math.Abs(position.X + (float)(width / 2) - num114) + Math.Abs(position.Y + (float)(height / 2) - num115);
							if (num116 < num111)
							{
								if (num113 == -1 && num116 <= num112)
								{
									num112 = num116;
									num109 = num114;
									num110 = num115;
								}
								if (Collision.CanHit(position, width, height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
								{
									num111 = num116;
									num109 = num114;
									num110 = num115;
									num113 = ownerMinionAttackTargetNPC.whoAmI;
								}
							}
						}
						if (num113 == -1)
						{
							for (int num117 = 0; num117 < 200; num117++)
							{
								if (!Main.npc[num117].CanBeChasedBy(this))
								{
									continue;
								}
								float num118 = Main.npc[num117].position.X + (float)(Main.npc[num117].width / 2);
								float num119 = Main.npc[num117].position.Y + (float)(Main.npc[num117].height / 2);
								float num120 = Math.Abs(position.X + (float)(width / 2) - num118) + Math.Abs(position.Y + (float)(height / 2) - num119);
								if (num120 < num111)
								{
									if (num113 == -1 && num120 <= num112)
									{
										num112 = num120;
										num109 = num118;
										num110 = num119;
									}
									if (Collision.CanHit(position, width, height, Main.npc[num117].position, Main.npc[num117].width, Main.npc[num117].height))
									{
										num111 = num120;
										num109 = num118;
										num110 = num119;
										num113 = num117;
									}
								}
							}
						}
						if (num113 == -1 && num112 < num111)
						{
							num111 = num112;
						}
						float num121 = 400f;
						if ((double)position.Y > Main.worldSurface * 16.0)
						{
							num121 = 200f;
						}
						if (num111 < num121 + num106 && num113 == -1)
						{
							float num122 = num109 - (position.X + (float)(width / 2));
							if (num122 < -5f)
							{
								flag = true;
								flag2 = false;
							}
							else if (num122 > 5f)
							{
								flag2 = true;
								flag = false;
							}
						}
						else if (num113 >= 0 && num111 < 800f + num106)
						{
							localAI[0] = num108;
							float num123 = num109 - (position.X + (float)(width / 2));
							if (num123 > 300f || num123 < -300f)
							{
								if (num123 < -50f)
								{
									flag = true;
									flag2 = false;
								}
								else if (num123 > 50f)
								{
									flag2 = true;
									flag = false;
								}
							}
							else if (owner == Main.myPlayer)
							{
								ai[1] = num107;
								Vector2 vector11 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)(height / 2) - 8f);
								float num124 = num109 - vector11.X + (float)Main.rand.Next(-20, 21);
								float num125 = Math.Abs(num124) * 0.1f;
								num125 = num125 * (float)Main.rand.Next(0, 100) * 0.001f;
								float num126 = num110 - vector11.Y + (float)Main.rand.Next(-20, 21) - num125;
								float num127 = (float)Math.Sqrt(num124 * num124 + num126 * num126);
								num127 = 12f / num127;
								num124 *= num127;
								num126 *= num127;
								int num128 = damage;
								int num129 = 195;
								int num130 = NewProjectile(vector11.X, vector11.Y, num124, num126, num129, num128, knockBack, Main.myPlayer);
								Main.projectile[num130].timeLeft = 300;
								if (num124 < 0f)
								{
									direction = -1;
								}
								if (num124 > 0f)
								{
									direction = 1;
								}
								netUpdate = true;
							}
						}
					}
				}
				bool flag8 = false;
				Vector2 vector12 = Vector2.Zero;
				bool flag9 = false;
				if (type == 266 || (type >= 390 && type <= 392))
				{
					float num131 = 40 * minionPos;
					int num132 = 60;
					localAI[0] -= 1f;
					if (localAI[0] < 0f)
					{
						localAI[0] = 0f;
					}
					if (ai[1] > 0f)
					{
						ai[1] -= 1f;
					}
					else
					{
						float num133 = position.X;
						float num134 = position.Y;
						float num135 = 100000f;
						float num136 = num135;
						int num137 = -1;
						NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
						if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
						{
							float x = ownerMinionAttackTargetNPC2.Center.X;
							float y = ownerMinionAttackTargetNPC2.Center.Y;
							float num138 = Math.Abs(position.X + (float)(width / 2) - x) + Math.Abs(position.Y + (float)(height / 2) - y);
							if (num138 < num135)
							{
								if (num137 == -1 && num138 <= num136)
								{
									num136 = num138;
									num133 = x;
									num134 = y;
								}
								if (Collision.CanHit(position, width, height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
								{
									num135 = num138;
									num133 = x;
									num134 = y;
									num137 = ownerMinionAttackTargetNPC2.whoAmI;
								}
							}
						}
						if (num137 == -1)
						{
							for (int num139 = 0; num139 < 200; num139++)
							{
								if (!Main.npc[num139].CanBeChasedBy(this))
								{
									continue;
								}
								float num140 = Main.npc[num139].position.X + (float)(Main.npc[num139].width / 2);
								float num141 = Main.npc[num139].position.Y + (float)(Main.npc[num139].height / 2);
								float num142 = Math.Abs(position.X + (float)(width / 2) - num140) + Math.Abs(position.Y + (float)(height / 2) - num141);
								if (num142 < num135)
								{
									if (num137 == -1 && num142 <= num136)
									{
										num136 = num142;
										num133 = num140;
										num134 = num141;
									}
									if (Collision.CanHit(position, width, height, Main.npc[num139].position, Main.npc[num139].width, Main.npc[num139].height))
									{
										num135 = num142;
										num133 = num140;
										num134 = num141;
										num137 = num139;
									}
								}
							}
						}
						if (type >= 390 && type <= 392 && !Collision.SolidCollision(position, width, height))
						{
							tileCollide = true;
						}
						if (num137 == -1 && num136 < num135)
						{
							num135 = num136;
						}
						else if (num137 >= 0)
						{
							flag8 = true;
							vector12 = new Vector2(num133, num134) - base.Center;
							if (type >= 390 && type <= 392)
							{
								if (Main.npc[num137].position.Y > position.Y + (float)height)
								{
									int num143 = (int)(base.Center.X / 16f);
									int num144 = (int)((position.Y + (float)height + 1f) / 16f);
									if (Main.tile[num143, num144] != null && Main.tile[num143, num144].active() && TileID.Sets.Platforms[Main.tile[num143, num144].type])
									{
										tileCollide = false;
									}
								}
								Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
								Rectangle value = new Rectangle((int)Main.npc[num137].position.X, (int)Main.npc[num137].position.Y, Main.npc[num137].width, Main.npc[num137].height);
								int num145 = 10;
								value.X -= num145;
								value.Y -= num145;
								value.Width += num145 * 2;
								value.Height += num145 * 2;
								if (rectangle.Intersects(value))
								{
									flag9 = true;
									Vector2 vector13 = Main.npc[num137].Center - base.Center;
									if (base.velocity.Y > 0f && vector13.Y < 0f)
									{
										base.velocity.Y *= 0.5f;
									}
									if (base.velocity.Y < 0f && vector13.Y > 0f)
									{
										base.velocity.Y *= 0.5f;
									}
									if (base.velocity.X > 0f && vector13.X < 0f)
									{
										base.velocity.X *= 0.5f;
									}
									if (base.velocity.X < 0f && vector13.X > 0f)
									{
										base.velocity.X *= 0.5f;
									}
									if (vector13.Length() > 14f)
									{
										vector13.Normalize();
										vector13 *= 14f;
									}
									rotation = (rotation * 5f + vector13.ToRotation() + (float)Math.PI / 2f) / 6f;
									base.velocity = (base.velocity * 9f + vector13) / 10f;
									for (int num146 = 0; num146 < 1000; num146++)
									{
										if (whoAmI != num146 && owner == Main.projectile[num146].owner && Main.projectile[num146].type >= 390 && Main.projectile[num146].type <= 392 && (Main.projectile[num146].Center - base.Center).Length() < 15f)
										{
											float num147 = 0.5f;
											if (base.Center.Y > Main.projectile[num146].Center.Y)
											{
												Main.projectile[num146].velocity.Y -= num147;
												base.velocity.Y += num147;
											}
											else
											{
												Main.projectile[num146].velocity.Y += num147;
												base.velocity.Y -= num147;
											}
											if (base.Center.X > Main.projectile[num146].Center.X)
											{
												base.velocity.X += num147;
												Main.projectile[num146].velocity.X -= num147;
											}
											else
											{
												base.velocity.X -= num147;
												Main.projectile[num146].velocity.Y += num147;
											}
										}
									}
								}
							}
						}
						float num148 = 300f;
						if ((double)position.Y > Main.worldSurface * 16.0)
						{
							num148 = 150f;
						}
						if (type >= 390 && type <= 392)
						{
							num148 = 500f;
							if ((double)position.Y > Main.worldSurface * 16.0)
							{
								num148 = 250f;
							}
						}
						if (num135 < num148 + num131 && num137 == -1)
						{
							float num149 = num133 - (position.X + (float)(width / 2));
							if (num149 < -5f)
							{
								flag = true;
								flag2 = false;
							}
							else if (num149 > 5f)
							{
								flag2 = true;
								flag = false;
							}
						}
						bool flag10 = false;
						if (type >= 390 && type <= 392 && localAI[1] > 0f)
						{
							flag10 = true;
							localAI[1] -= 1f;
						}
						if (num137 >= 0 && num135 < 800f + num131)
						{
							friendly = true;
							localAI[0] = num132;
							float num150 = num133 - (position.X + (float)(width / 2));
							if (num150 < -10f)
							{
								flag = true;
								flag2 = false;
							}
							else if (num150 > 10f)
							{
								flag2 = true;
								flag = false;
							}
							if (num134 < base.Center.Y - 100f && num150 > -50f && num150 < 50f && base.velocity.Y == 0f)
							{
								float num151 = Math.Abs(num134 - base.Center.Y);
								if (num151 < 120f)
								{
									base.velocity.Y = -10f;
								}
								else if (num151 < 210f)
								{
									base.velocity.Y = -13f;
								}
								else if (num151 < 270f)
								{
									base.velocity.Y = -15f;
								}
								else if (num151 < 310f)
								{
									base.velocity.Y = -17f;
								}
								else if (num151 < 380f)
								{
									base.velocity.Y = -18f;
								}
							}
							if (flag10)
							{
								friendly = false;
								if (base.velocity.X < 0f)
								{
									flag = true;
								}
								else if (base.velocity.X > 0f)
								{
									flag2 = true;
								}
							}
						}
						else
						{
							friendly = false;
						}
					}
				}
				if (ai[1] != 0f)
				{
					flag = false;
					flag2 = false;
				}
				else if (flag5 && localAI[0] == 0f)
				{
					direction = Main.player[owner].direction;
				}
				else if (type >= 390 && type <= 392)
				{
					int num152 = (int)(base.Center.X / 16f);
					int num153 = (int)(base.Center.Y / 16f);
					if (Main.tile[num152, num153] != null && Main.tile[num152, num153].wall > 0)
					{
						flag = (flag2 = false);
					}
				}
				if (type == 127)
				{
					if ((double)rotation > -0.1 && (double)rotation < 0.1)
					{
						rotation = 0f;
					}
					else if (rotation < 0f)
					{
						rotation += 0.1f;
					}
					else
					{
						rotation -= 0.1f;
					}
				}
				else if (type != 313 && !flag9)
				{
					rotation = 0f;
				}
				if (type < 390 || type > 392)
				{
					tileCollide = true;
				}
				float num154 = 0.08f;
				float num155 = 6.5f;
				if (type == 127)
				{
					num155 = 2f;
					num154 = 0.04f;
				}
				if (type == 112)
				{
					num155 = 6f;
					num154 = 0.06f;
				}
				if (type == 334)
				{
					num155 = 8f;
					num154 = 0.08f;
				}
				if (type == 268)
				{
					num155 = 8f;
					num154 = 0.4f;
				}
				if (type == 324)
				{
					num154 = 0.1f;
					num155 = 3f;
				}
				if (type == 858)
				{
					num154 = 0.3f;
					num155 = 7f;
				}
				if (flag5 || type == 266 || (type >= 390 && type <= 392) || type == 816 || type == 821 || type == 825 || type == 859 || type == 860 || type == 881 || type == 884 || type == 890 || type == 891 || type == 897 || type == 899 || type == 900 || type == 934)
				{
					num155 = 6f;
					num154 = 0.2f;
					if (num155 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
					{
						num155 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
						num154 = 0.3f;
					}
				}
				if (type == 875)
				{
					num155 = 7f;
					num154 = 0.25f;
					if (num155 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
					{
						num155 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
						num154 = 0.35f;
					}
				}
				if (type >= 390 && type <= 392)
				{
					num154 *= 2f;
				}
				if (flag)
				{
					if ((double)base.velocity.X > -3.5)
					{
						base.velocity.X -= num154;
					}
					else
					{
						base.velocity.X -= num154 * 0.25f;
					}
				}
				else if (flag2)
				{
					if ((double)base.velocity.X < 3.5)
					{
						base.velocity.X += num154;
					}
					else
					{
						base.velocity.X += num154 * 0.25f;
					}
				}
				else
				{
					base.velocity.X *= 0.9f;
					if (base.velocity.X >= 0f - num154 && base.velocity.X <= num154)
					{
						base.velocity.X = 0f;
					}
				}
				if (type == 208)
				{
					base.velocity.X *= 0.95f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					flag = false;
					flag2 = false;
				}
				if (flag || flag2)
				{
					int num156 = (int)(position.X + (float)(width / 2)) / 16;
					int j2 = (int)(position.Y + (float)(height / 2)) / 16;
					if (type == 236)
					{
						num156 += direction;
					}
					if (flag)
					{
						num156--;
					}
					if (flag2)
					{
						num156++;
					}
					num156 += (int)base.velocity.X;
					if (WorldGen.SolidTile(num156, j2))
					{
						flag4 = true;
					}
				}
				if (Main.player[owner].position.Y + (float)Main.player[owner].height - 8f > position.Y + (float)height)
				{
					flag3 = true;
				}
				if (type == 268 && frameCounter < 10)
				{
					flag4 = false;
				}
				if (type == 860 && base.velocity.X != 0f)
				{
					flag4 = true;
				}
				if ((type == 881 || type == 934) && base.velocity.X != 0f)
				{
					flag4 = true;
				}
				Collision.StepUp(position, base.velocity, width, height, stepSpeed, gfxOffY);
				if (base.velocity.Y == 0f || type == 200)
				{
					if (!flag3 && (base.velocity.X < 0f || base.velocity.X > 0f))
					{
						int num157 = (int)(position.X + (float)(width / 2)) / 16;
						int j3 = (int)(position.Y + (float)(height / 2)) / 16 + 1;
						if (flag)
						{
							num157--;
						}
						if (flag2)
						{
							num157++;
						}
						WorldGen.SolidTile(num157, j3);
					}
					if (flag4)
					{
						int num158 = (int)(position.X + (float)(width / 2)) / 16;
						int num159 = (int)(position.Y + (float)height) / 16;
						if (WorldGen.SolidTileAllowBottomSlope(num158, num159) || Main.tile[num158, num159].halfBrick() || Main.tile[num158, num159].slope() > 0 || type == 200)
						{
							if (type == 200)
							{
								base.velocity.Y = -3.1f;
							}
							else
							{
								try
								{
									num158 = (int)(position.X + (float)(width / 2)) / 16;
									num159 = (int)(position.Y + (float)(height / 2)) / 16;
									if (flag)
									{
										num158--;
									}
									if (flag2)
									{
										num158++;
									}
									num158 += (int)base.velocity.X;
									if (!WorldGen.SolidTile(num158, num159 - 1) && !WorldGen.SolidTile(num158, num159 - 2))
									{
										base.velocity.Y = -5.1f;
									}
									else if (!WorldGen.SolidTile(num158, num159 - 2))
									{
										base.velocity.Y = -7.1f;
									}
									else if (WorldGen.SolidTile(num158, num159 - 5))
									{
										base.velocity.Y = -11.1f;
									}
									else if (WorldGen.SolidTile(num158, num159 - 4))
									{
										base.velocity.Y = -10.1f;
									}
									else
									{
										base.velocity.Y = -9.1f;
									}
								}
								catch
								{
									base.velocity.Y = -9.1f;
								}
							}
							if (type == 127)
							{
								ai[0] = 1f;
							}
						}
					}
					else if (type == 266 && (flag || flag2))
					{
						base.velocity.Y -= 6f;
					}
				}
				if (base.velocity.X > num155)
				{
					base.velocity.X = num155;
				}
				if (base.velocity.X < 0f - num155)
				{
					base.velocity.X = 0f - num155;
				}
				if (base.velocity.X < 0f)
				{
					direction = -1;
				}
				if (base.velocity.X > 0f)
				{
					direction = 1;
				}
				if (base.velocity.X > num154 && flag2)
				{
					direction = 1;
				}
				if (base.velocity.X < 0f - num154 && flag)
				{
					direction = -1;
				}
				if (type != 313)
				{
					if (direction == -1)
					{
						spriteDirection = 1;
					}
					if (direction == 1)
					{
						spriteDirection = -1;
					}
				}
				if (type == 398)
				{
					spriteDirection = direction;
				}
				bool flag11 = position.X - oldPosition.X == 0f;
				if (type == 816)
				{
					if (base.velocity.Y != 0f)
					{
						frame = 4;
					}
					else if (flag11)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 0 || frame > 3)
						{
							frame = 0;
						}
					}
					else
					{
						int num160 = 5;
						float num161 = base.velocity.Length();
						if (num161 > 4f)
						{
							num160 = 3;
						}
						else if (num161 > 2f)
						{
							num160 = 4;
						}
						if (++frameCounter > num160)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 4 || frame > 10)
						{
							frame = 4;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				if (type == 860)
				{
					if (base.velocity.Y != 0f)
					{
						localAI[0] = 0f;
						if (frame >= 5)
						{
							frame = 5;
							frameCounter = 0;
						}
						else if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
					}
					else if (Math.Abs(base.velocity.X) < 1f)
					{
						if (localAI[0] > 800f)
						{
							frameCounter++;
							if (frameCounter > 3)
							{
								frameCounter = 0;
								frame++;
								if (frame > 3)
								{
									frame = 3;
								}
							}
							localAI[0] += 1f;
							if (localAI[0] > 850f)
							{
								localAI[0] = 0f;
							}
							if (frame == 3 && localAI[0] == 820f)
							{
								for (int num162 = 0; num162 < 3 + Main.rand.Next(3); num162++)
								{
									int num163 = Gore.NewGore(new Vector2(position.X, base.Center.Y - 10f), Vector2.Zero, 1218);
									Main.gore[num163].velocity = new Vector2((float)Main.rand.Next(1, 10) * 0.3f * (float)(-spriteDirection), 0f - (2f + (float)Main.rand.Next(4) * 0.3f));
								}
							}
						}
						else if (frame == 0)
						{
							localAI[0] += 1f;
							frame = 0;
							frameCounter = 0;
						}
						else
						{
							localAI[0] = 0f;
							if (frame > 5)
							{
								frame = 5;
								frameCounter = 0;
							}
							if (++frameCounter > 4)
							{
								frame--;
								frameCounter = 0;
							}
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				if (type == 859)
				{
					if (base.velocity.Y != 0f)
					{
						frame = 4;
					}
					else if (flag11)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						if (frame == 6)
						{
							if (++frameCounter > 5)
							{
								frame = 0;
								frameCounter = 0;
							}
						}
						else if (frame > 3)
						{
							frame = 6;
							frameCounter = 0;
						}
						else
						{
							if (++frameCounter > 5)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame < 0 || frame > 3)
							{
								frame = 0;
							}
						}
					}
					else
					{
						float num164 = base.velocity.Length();
						int num165 = 8;
						if (num164 < 3f)
						{
							num165 = 4;
						}
						if (num164 < 1f)
						{
							num165 = 2;
						}
						frameCounter += (int)num164;
						if (frameCounter > num165)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 5 || frame > 17)
						{
							frame = 5;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 858)
				{
					if (base.velocity.Y != 0f)
					{
						frame = 1;
					}
					else if (flag11)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						frame = 0;
					}
					else
					{
						float num166 = base.velocity.Length();
						frameCounter += (int)num166;
						if (frameCounter > 3)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 2 || frame > 9)
						{
							frame = 2;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 900)
				{
					spriteDirection = direction;
					if (base.velocity.Y != 0f)
					{
						frame = 1;
						frameCounter = 0;
					}
					else if (flag11)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(base.velocity.X * 0.3f);
						if (frame < 2)
						{
							frame = 2;
							frameCounter = 0;
						}
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 9)
						{
							frame = 2;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 899)
				{
					spriteDirection = direction;
					if (base.velocity.Y != 0f)
					{
						frame = 1;
						frameCounter = 0;
					}
					else if (flag11)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(base.velocity.X * 0.3f);
						if (frame < 2)
						{
							frame = 2;
							frameCounter = 0;
						}
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 9)
						{
							frame = 2;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 897)
				{
					spriteDirection = direction;
					if (base.velocity.Y != 0f)
					{
						frame = 1;
						frameCounter = 0;
					}
					else if (flag11)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(base.velocity.X * 0.3f);
						if (frame < 2)
						{
							frame = 2;
							frameCounter = 0;
						}
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 7)
						{
							frame = 2;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 891)
				{
					spriteDirection = direction;
					if (base.velocity.Y != 0f)
					{
						frame = 1;
						frameCounter = 0;
					}
					else if (flag11)
					{
						spriteDirection = Main.player[owner].direction;
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(base.velocity.X * 0.3f);
						if (frame < 2)
						{
							frame = 2;
							frameCounter = 0;
						}
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 8)
						{
							frame = 2;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 890)
				{
					spriteDirection = direction;
					if (base.velocity.Y != 0f)
					{
						frame = 1;
						frameCounter = 0;
					}
					else if (flag11)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(base.velocity.X * 0.3f);
						if (frame < 2)
						{
							frame = 2;
							frameCounter = 0;
						}
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 7)
						{
							frame = 2;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 884)
				{
					spriteDirection = direction;
					if (base.velocity.Y != 0f)
					{
						if (base.velocity.Y < 0f)
						{
							frame = 9;
						}
						else
						{
							frame = 1;
						}
						frameCounter = 0;
					}
					else if (flag11)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(base.velocity.X * 0.5f);
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 8)
						{
							frame = 2;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 881 || type == 934)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					if (base.velocity.Y > 0f)
					{
						frameCounter++;
						if (frameCounter > 2)
						{
							frame++;
							if (frame >= 2)
							{
								frame = 2;
							}
							frameCounter = 0;
						}
					}
					else if (base.velocity.Y < 0f)
					{
						frameCounter++;
						if (frameCounter > 2)
						{
							frame++;
							if (frame >= 5)
							{
								frame = 0;
							}
							frameCounter = 0;
						}
					}
					else if (frame == 0)
					{
						frame = 0;
					}
					else if (++frameCounter > 3)
					{
						frame++;
						if (frame >= 6)
						{
							frame = 0;
						}
						frameCounter = 0;
					}
					if (wet && Main.player[owner].position.Y + (float)Main.player[owner].height < position.Y + (float)height && localAI[0] == 0f)
					{
						if (base.velocity.Y > -4f)
						{
							base.velocity.Y -= 0.2f;
						}
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.95f;
						}
					}
					else
					{
						base.velocity.Y += 0.4f;
					}
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 875)
				{
					if (base.velocity.Y != 0f)
					{
						if (base.velocity.Y < 0f)
						{
							frame = 3;
						}
						else
						{
							frame = 6;
						}
						frameCounter = 0;
					}
					else if (flag11)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(base.velocity.X * 0.75f);
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 6)
						{
							frame = 0;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 854)
				{
					if (base.velocity.Y != 0f)
					{
						frame = 7;
					}
					else if (flag11)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 0 || frame > 3)
						{
							frame = 0;
						}
					}
					else
					{
						int num167 = 3;
						float num168 = base.velocity.Length();
						if (num168 > 4f)
						{
							num167 = 1;
						}
						else if (num168 > 2f)
						{
							num167 = 2;
						}
						if (++frameCounter > num167)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 4 || frame > 12)
						{
							frame = 4;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 825)
				{
					if (base.velocity.Y != 0f)
					{
						localAI[0] = 0f;
						frame = 12;
					}
					else if (flag11)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						if (frame >= 1 && frame <= 2)
						{
							localAI[0] = 0f;
							if (++frameCounter > 5)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 2)
							{
								frame = 0;
							}
						}
						else if (frame >= 3 && frame <= 11)
						{
							localAI[0] = 0f;
							if (++frameCounter > 5)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 11)
							{
								frame = 0;
							}
						}
						else
						{
							if (frame == 13)
							{
								if (++frameCounter > 8)
								{
									frame++;
									frameCounter = 0;
								}
								if (frame == 14)
								{
									frame = 0;
								}
							}
							if (frame != 0)
							{
								frame = 13;
							}
							else
							{
								frame = 0;
							}
							if (frame == 0)
							{
								localAI[0] += 1f;
								if (localAI[0] > 300f && Main.rand.Next(50) == 0)
								{
									switch (Main.rand.Next(2))
									{
									case 0:
										frame = 1;
										break;
									case 1:
										frame = 3;
										break;
									}
								}
							}
						}
					}
					else
					{
						localAI[0] = 0f;
						int num169 = 3;
						float num170 = base.velocity.Length();
						if (num170 > 4f)
						{
							num169 = 2;
						}
						else if (num170 > 2f)
						{
							num169 = 1;
						}
						if (++frameCounter > num169)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 13)
						{
							frame = 13;
						}
						if (frame > 19)
						{
							frame = 14;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 821)
				{
					if (base.velocity.Y != 0f)
					{
						localAI[0] = 0f;
						frame = 12;
					}
					else if (flag11)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						localAI[0] += 1f;
						if (localAI[0] > 400f)
						{
							int num171 = 7;
							if (frame == 9)
							{
								num171 = 25;
							}
							if (++frameCounter > num171)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame < 5)
							{
								frame = 5;
							}
							if (frame > 11)
							{
								localAI[0] = 0f;
								frame = 0;
							}
						}
						else
						{
							if (++frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame < 0 || frame > 4)
							{
								frame = 0;
							}
						}
					}
					else
					{
						localAI[0] = 0f;
						int num172 = 4;
						float num173 = base.velocity.Length();
						if (num173 > 3f)
						{
							num172 = 3;
						}
						if (num173 > 5f)
						{
							num172 = 2;
						}
						if (++frameCounter > num172)
						{
							frame++;
							if (num172 == 0)
							{
								frame++;
							}
							frameCounter = 0;
						}
						if (frame < 13 || frame > 18)
						{
							frame = 13;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (flag5)
				{
					if (ai[1] > 0f)
					{
						if (localAI[1] == 0f)
						{
							localAI[1] = 1f;
							frame = 1;
						}
						if (frame != 0)
						{
							frameCounter++;
							if (frameCounter > 4)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 4)
							{
								frame = 0;
							}
						}
					}
					else if (base.velocity.Y == 0f)
					{
						localAI[1] = 0f;
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame < 5)
							{
								frame = 5;
							}
							if (frame >= 11)
							{
								frame = 5;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (base.velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 4;
					}
					else if (base.velocity.Y > 0f)
					{
						frameCounter = 0;
						frame = 4;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
					_ = base.velocity;
				}
				else if (type == 268)
				{
					if (base.velocity.Y == 0f)
					{
						if (frame > 5)
						{
							frameCounter = 0;
						}
						if (flag11)
						{
							int num174 = 3;
							frameCounter++;
							if (frameCounter < num174)
							{
								frame = 0;
							}
							else if (frameCounter < num174 * 2)
							{
								frame = 1;
							}
							else if (frameCounter < num174 * 3)
							{
								frame = 2;
							}
							else if (frameCounter < num174 * 4)
							{
								frame = 3;
							}
							else
							{
								frameCounter = num174 * 4;
							}
						}
						else
						{
							base.velocity.X *= 0.8f;
							frameCounter++;
							int num175 = 3;
							if (frameCounter < num175)
							{
								frame = 0;
							}
							else if (frameCounter < num175 * 2)
							{
								frame = 1;
							}
							else if (frameCounter < num175 * 3)
							{
								frame = 2;
							}
							else if (frameCounter < num175 * 4)
							{
								frame = 3;
							}
							else if (flag || flag2)
							{
								base.velocity.X *= 2f;
								frame = 4;
								base.velocity.Y = -6.1f;
								frameCounter = 0;
								for (int num176 = 0; num176 < 4; num176++)
								{
									int num177 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), width, 4, 5);
									Main.dust[num177].velocity += base.velocity;
									Main.dust[num177].velocity *= 0.4f;
								}
							}
							else
							{
								frameCounter = num175 * 4;
							}
						}
					}
					else if (base.velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 5;
					}
					else
					{
						frame = 4;
						frameCounter = 3;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 269)
				{
					if (base.velocity.Y >= 0f && (double)base.velocity.Y <= 0.8)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							int num178 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), width, 6, 76);
							Main.dust[num178].noGravity = true;
							Main.dust[num178].velocity *= 0.3f;
							Main.dust[num178].noLight = true;
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 3)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 2;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 313)
				{
					int i3 = (int)(base.Center.X / 16f);
					int num179 = (int)(base.Center.Y / 16f);
					int num180 = 0;
					Tile tileSafely2 = Framing.GetTileSafely(i3, num179);
					Tile tileSafely3 = Framing.GetTileSafely(i3, num179 - 1);
					Tile tileSafely4 = Framing.GetTileSafely(i3, num179 + 1);
					if (tileSafely2.wall > 0)
					{
						num180++;
					}
					if (tileSafely3.wall > 0)
					{
						num180++;
					}
					if (tileSafely4.wall > 0)
					{
						num180++;
					}
					if (num180 > 1)
					{
						position.Y += height;
						height = 34;
						position.Y -= height;
						position.X += width / 2;
						width = 34;
						position.X -= width / 2;
						Vector2 vector14 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num181 = Main.player[owner].Center.X - vector14.X;
						float num182 = Main.player[owner].Center.Y - vector14.Y;
						float num183 = (float)Math.Sqrt(num181 * num181 + num182 * num182);
						float num184 = 4f / num183;
						num181 *= num184;
						num182 *= num184;
						if (num183 < 120f)
						{
							base.velocity.X *= 0.9f;
							base.velocity.Y *= 0.9f;
							if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) < 0.1)
							{
								base.velocity *= 0f;
							}
						}
						else
						{
							base.velocity.X = (base.velocity.X * 9f + num181) / 10f;
							base.velocity.Y = (base.velocity.Y * 9f + num182) / 10f;
						}
						if (num183 >= 120f)
						{
							spriteDirection = direction;
							rotation = (float)Math.Atan2(base.velocity.Y * (float)(-direction), base.velocity.X * (float)(-direction));
						}
						frameCounter += (int)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y));
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 10)
						{
							frame = 5;
						}
						if (frame < 5)
						{
							frame = 10;
						}
					}
					else
					{
						rotation = 0f;
						if (direction == -1)
						{
							spriteDirection = 1;
						}
						if (direction == 1)
						{
							spriteDirection = -1;
						}
						position.Y += height;
						height = 30;
						position.Y -= height;
						position.X += width / 2;
						width = 30;
						position.X -= width / 2;
						if (base.velocity.Y >= 0f && (double)base.velocity.Y <= 0.8)
						{
							if (flag11)
							{
								frame = 0;
								frameCounter = 0;
							}
							else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
							{
								frameCounter += (int)Math.Abs(base.velocity.X);
								frameCounter++;
								if (frameCounter > 6)
								{
									frame++;
									frameCounter = 0;
								}
								if (frame > 3)
								{
									frame = 0;
								}
							}
							else
							{
								frame = 0;
								frameCounter = 0;
							}
						}
						else
						{
							frameCounter = 0;
							frame = 4;
						}
						base.velocity.Y += 0.4f;
						if (base.velocity.Y > 10f)
						{
							base.velocity.Y = 10f;
						}
					}
				}
				else if (type >= 390 && type <= 392)
				{
					int i4 = (int)(base.Center.X / 16f);
					int num185 = (int)(base.Center.Y / 16f);
					int num186 = 0;
					Tile tileSafely5 = Framing.GetTileSafely(i4, num185);
					Tile tileSafely6 = Framing.GetTileSafely(i4, num185 - 1);
					Tile tileSafely7 = Framing.GetTileSafely(i4, num185 + 1);
					if (tileSafely5.wall > 0)
					{
						num186++;
					}
					if (tileSafely6.wall > 0)
					{
						num186++;
					}
					if (tileSafely7.wall > 0)
					{
						num186++;
					}
					if (num186 > 1)
					{
						position.Y += height;
						height = 34;
						position.Y -= height;
						position.X += width / 2;
						width = 34;
						position.X -= width / 2;
						float scaleFactor = 9f;
						float num187 = 40 * (minionPos + 1);
						Vector2 vector15 = Main.player[owner].Center - base.Center;
						if (flag8)
						{
							vector15 = vector12;
							num187 = 10f;
						}
						else if (!Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
						{
							ai[0] = 1f;
						}
						if (vector15.Length() < num187)
						{
							base.velocity *= 0.9f;
							if ((double)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) < 0.1)
							{
								base.velocity *= 0f;
							}
						}
						else if (vector15.Length() < 800f || !flag8)
						{
							base.velocity = (base.velocity * 9f + Vector2.Normalize(vector15) * scaleFactor) / 10f;
						}
						if (vector15.Length() >= num187)
						{
							spriteDirection = direction;
							rotation = base.velocity.ToRotation() + (float)Math.PI / 2f;
						}
						else
						{
							rotation = vector15.ToRotation() + (float)Math.PI / 2f;
						}
						frameCounter += (int)(Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y));
						if (frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 7)
						{
							frame = 4;
						}
						if (frame < 4)
						{
							frame = 7;
						}
					}
					else
					{
						if (!flag9)
						{
							rotation = 0f;
						}
						if (direction == -1)
						{
							spriteDirection = 1;
						}
						if (direction == 1)
						{
							spriteDirection = -1;
						}
						position.Y += height;
						height = 30;
						position.Y -= height;
						position.X += width / 2;
						width = 30;
						position.X -= width / 2;
						if (!flag8 && !Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
						{
							ai[0] = 1f;
						}
						if (!flag9 && frame >= 4 && frame <= 7)
						{
							Vector2 vector16 = Main.player[owner].Center - base.Center;
							if (flag8)
							{
								vector16 = vector12;
							}
							float num188 = 0f - vector16.Y;
							if (!(vector16.Y > 0f))
							{
								if (num188 < 120f)
								{
									base.velocity.Y = -10f;
								}
								else if (num188 < 210f)
								{
									base.velocity.Y = -13f;
								}
								else if (num188 < 270f)
								{
									base.velocity.Y = -15f;
								}
								else if (num188 < 310f)
								{
									base.velocity.Y = -17f;
								}
								else if (num188 < 380f)
								{
									base.velocity.Y = -18f;
								}
							}
						}
						if (flag9)
						{
							frameCounter++;
							if (frameCounter > 3)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 8)
							{
								frame = 4;
							}
							if (frame <= 3)
							{
								frame = 7;
							}
						}
						else if (base.velocity.Y >= 0f && (double)base.velocity.Y <= 0.8)
						{
							if (flag11)
							{
								frame = 0;
								frameCounter = 0;
							}
							else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
							{
								frameCounter += (int)Math.Abs(base.velocity.X);
								frameCounter++;
								if (frameCounter > 5)
								{
									frame++;
									frameCounter = 0;
								}
								if (frame > 2)
								{
									frame = 0;
								}
							}
							else
							{
								frame = 0;
								frameCounter = 0;
							}
						}
						else
						{
							frameCounter = 0;
							frame = 3;
						}
						base.velocity.Y += 0.4f;
						if (base.velocity.Y > 10f)
						{
							base.velocity.Y = 10f;
						}
					}
				}
				else if (type == 314)
				{
					if (base.velocity.Y >= 0f && (double)base.velocity.Y <= 0.8)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 6)
							{
								frame = 1;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 7;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 319)
				{
					if (base.velocity.Y >= 0f && (double)base.velocity.Y <= 0.8)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 8)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 5)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 1;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 236)
				{
					if (base.velocity.Y >= 0f && (double)base.velocity.Y <= 0.8)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							if (frame < 2)
							{
								frame = 2;
							}
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 8)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 1;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 499)
				{
					if (base.velocity.Y >= 0f && (double)base.velocity.Y <= 0.8)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							if (frame < 2)
							{
								frame = 2;
							}
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 8)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 1;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 765)
				{
					if (base.velocity.Y >= 0f && (double)base.velocity.Y <= 0.8)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							if (frame < 1)
							{
								frame = 1;
							}
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 6)
							{
								frame = 1;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 266)
				{
					if (base.velocity.Y >= 0f && (double)base.velocity.Y <= 0.8)
					{
						if (flag11)
						{
							frameCounter++;
						}
						else
						{
							frameCounter += 3;
						}
					}
					else
					{
						frameCounter += 5;
					}
					if (frameCounter >= 20)
					{
						frameCounter -= 20;
						frame++;
					}
					if (frame > 1)
					{
						frame = 0;
					}
					if (wet && Main.player[owner].position.Y + (float)Main.player[owner].height < position.Y + (float)height && localAI[0] == 0f)
					{
						if (base.velocity.Y > -4f)
						{
							base.velocity.Y -= 0.2f;
						}
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.95f;
						}
					}
					else
					{
						base.velocity.Y += 0.4f;
					}
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 334)
				{
					if (base.velocity.Y == 0f)
					{
						if (flag11)
						{
							if (frame > 0)
							{
								frameCounter += 2;
								if (frameCounter > 6)
								{
									frame++;
									frameCounter = 0;
								}
								if (frame >= 7)
								{
									frame = 0;
								}
							}
							else
							{
								frame = 0;
								frameCounter = 0;
							}
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs((double)base.velocity.X * 0.75);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 7 || frame < 1)
							{
								frame = 1;
							}
						}
						else if (frame > 0)
						{
							frameCounter += 2;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 7)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (base.velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 2;
					}
					else if (base.velocity.Y > 0f)
					{
						frameCounter = 0;
						frame = 4;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 353)
				{
					if (base.velocity.Y == 0f)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 9)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (base.velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 1;
					}
					else if (base.velocity.Y > 0f)
					{
						frameCounter = 0;
						frame = 1;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 111)
				{
					if (base.velocity.Y == 0f)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 7)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (base.velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 4;
					}
					else if (base.velocity.Y > 0f)
					{
						frameCounter = 0;
						frame = 6;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 112)
				{
					if (base.velocity.Y == 0f)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 3)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (base.velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 2;
					}
					else if (base.velocity.Y > 0f)
					{
						frameCounter = 0;
						frame = 2;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 127)
				{
					if (base.velocity.Y == 0f)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.1 || (double)base.velocity.X > 0.1)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 5)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 200)
				{
					if (base.velocity.Y == 0f)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.1 || (double)base.velocity.X > 0.1)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 5)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						rotation = base.velocity.X * 0.1f;
						frameCounter++;
						if (base.velocity.Y < 0f)
						{
							frameCounter += 2;
						}
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 9)
						{
							frame = 6;
						}
						if (frame < 6)
						{
							frame = 6;
						}
					}
					base.velocity.Y += 0.1f;
					if (base.velocity.Y > 4f)
					{
						base.velocity.Y = 4f;
					}
				}
				else if (type == 208)
				{
					if (base.velocity.Y == 0f && flag11)
					{
						if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2))
						{
							direction = -1;
						}
						else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2))
						{
							direction = 1;
						}
						rotation = 0f;
						frame = 0;
					}
					else
					{
						rotation = base.velocity.X * 0.075f;
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 4)
						{
							frame = 1;
						}
						if (frame < 1)
						{
							frame = 1;
						}
					}
					base.velocity.Y += 0.1f;
					if (base.velocity.Y > 4f)
					{
						base.velocity.Y = 4f;
					}
				}
				else if (type == 209)
				{
					if (alpha > 0)
					{
						alpha -= 5;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (base.velocity.Y == 0f)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.1 || (double)base.velocity.X > 0.1)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 11)
							{
								frame = 2;
							}
							if (frame < 2)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frame = 1;
						frameCounter = 0;
						rotation = 0f;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 324)
				{
					if (base.velocity.Y == 0f)
					{
						if ((double)base.velocity.X < -0.1 || (double)base.velocity.X > 0.1)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 5)
							{
								frame = 2;
							}
							if (frame < 2)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 1;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 14f)
					{
						base.velocity.Y = 14f;
					}
				}
				else if (type == 210)
				{
					if (base.velocity.Y == 0f)
					{
						if ((double)base.velocity.X < -0.1 || (double)base.velocity.X > 0.1)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 6)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						rotation = base.velocity.X * 0.05f;
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 11)
						{
							frame = 7;
						}
						if (frame < 7)
						{
							frame = 7;
						}
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
				else if (type == 398)
				{
					if (base.velocity.Y == 0f)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)base.velocity.X < -0.8 || (double)base.velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(base.velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 5)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (base.velocity.Y != 0f)
					{
						frameCounter = 0;
						frame = 5;
					}
					base.velocity.Y += 0.4f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
				}
			}
			if (type == 891)
			{
				_ = Main.player[owner];
				DelegateMethods.v3_1 = new Vector3(1f, 0.61f, 0.16f) * 1.5f;
				Utils.PlotTileLine(base.Center, base.Center + base.velocity * 6f, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
			}
		}

		private void AI_062()
		{
			if (type == 373)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].hornetMinion = false;
				}
				if (Main.player[owner].hornetMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 375)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].impMinion = false;
				}
				if (Main.player[owner].impMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 407)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].sharknadoMinion = false;
				}
				if (Main.player[owner].sharknadoMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 423)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].UFOMinion = false;
				}
				if (Main.player[owner].UFOMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 613)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].stardustMinion = false;
				}
				if (Main.player[owner].stardustMinion)
				{
					timeLeft = 2;
				}
				Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
				if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
			}
			if (type == 423)
			{
				if (ai[0] == 2f)
				{
					ai[1] -= 1f;
					tileCollide = false;
					if (ai[1] > 3f)
					{
						int num = Dust.NewDust(base.Center, 0, 0, 220 + Main.rand.Next(2), velocity.X, velocity.Y, 100);
						Main.dust[num].scale = 0.5f + (float)Main.rand.NextDouble() * 0.3f;
						Main.dust[num].velocity /= 2.5f;
						Main.dust[num].noGravity = true;
						Main.dust[num].noLight = true;
						Main.dust[num].frame.Y = 80;
					}
					if (ai[1] != 0f)
					{
						return;
					}
					ai[1] = 30f;
					ai[0] = 0f;
					velocity /= 5f;
					velocity.Y = 0f;
					extraUpdates = 0;
					numUpdates = 0;
					netUpdate = true;
					extraUpdates = 0;
					numUpdates = 0;
				}
				if (extraUpdates > 1)
				{
					extraUpdates = 0;
				}
				if (numUpdates > 1)
				{
					numUpdates = 0;
				}
			}
			if (type == 613)
			{
				if (ai[0] == 2f)
				{
					ai[1] -= 1f;
					tileCollide = false;
					if (ai[1] > 3f)
					{
						if (numUpdates < 20)
						{
							for (int i = 0; i < 3; i++)
							{
								Dust obj = Main.dust[Dust.NewDust(position, width, height, 229)];
								obj.noGravity = true;
								obj.position = base.Center;
								obj.velocity *= 3f;
								obj.velocity += velocity * 3f;
								obj.fadeIn = 1f;
							}
						}
						float num2 = 2f - (float)numUpdates / 30f;
						if (scale > 0f)
						{
							float num3 = 2f;
							for (int j = 0; (float)j < num3; j++)
							{
								Dust obj2 = Main.dust[Dust.NewDust(position, width, height, 229)];
								obj2.noGravity = true;
								obj2.position = base.Center + Vector2.UnitY.RotatedBy((float)numUpdates * ((float)Math.PI / 30f) + (float)whoAmI * ((float)Math.PI / 4f) + (float)Math.PI / 2f) * (height / 2) - velocity * ((float)j / num3);
								obj2.velocity = velocity / 3f;
								obj2.fadeIn = num2 / 2f;
								obj2.scale = num2;
							}
						}
					}
					if (ai[1] != 0f)
					{
						return;
					}
					ai[1] = 30f;
					ai[0] = 0f;
					velocity /= 5f;
					velocity.Y = 0f;
					extraUpdates = 0;
					numUpdates = 0;
					netUpdate = true;
					float num4 = 15f;
					for (int k = 0; (float)k < num4; k++)
					{
						Dust dust = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust.noGravity = true;
						dust.position = base.Center - velocity * 5f;
						dust.velocity *= 3f;
						dust.velocity += velocity * 3f;
						dust.fadeIn = 1f;
						if (Main.rand.Next(3) != 0)
						{
							dust.fadeIn = 2f;
							dust.scale = 2f;
							dust.velocity /= 8f;
						}
					}
					for (int l = 0; (float)l < num4; l++)
					{
						Dust dust2 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust2.noGravity = true;
						dust2.position = base.Center;
						dust2.velocity *= 3f;
						dust2.velocity += velocity * 3f;
						dust2.fadeIn = 1f;
						if (Main.rand.Next(3) != 0)
						{
							dust2.fadeIn = 2f;
							dust2.scale = 2f;
							dust2.velocity /= 8f;
						}
					}
					extraUpdates = 0;
					numUpdates = 0;
				}
				if (extraUpdates > 1)
				{
					extraUpdates = 0;
				}
				if (numUpdates > 1)
				{
					numUpdates = 0;
				}
			}
			if (type == 423 && localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (type == 613 && localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			float num5 = 0.05f;
			float num6 = width;
			if (type == 407)
			{
				num5 = 0.1f;
				num6 *= 2f;
			}
			for (int m = 0; m < 1000; m++)
			{
				if (m != whoAmI && Main.projectile[m].active && Main.projectile[m].owner == owner && Main.projectile[m].type == type && Math.Abs(position.X - Main.projectile[m].position.X) + Math.Abs(position.Y - Main.projectile[m].position.Y) < num6)
				{
					if (position.X < Main.projectile[m].position.X)
					{
						velocity.X -= num5;
					}
					else
					{
						velocity.X += num5;
					}
					if (position.Y < Main.projectile[m].position.Y)
					{
						velocity.Y -= num5;
					}
					else
					{
						velocity.Y += num5;
					}
				}
			}
			Vector2 vector = position;
			float num7 = 400f;
			if (type == 423)
			{
				num7 = 300f;
			}
			if (type == 613)
			{
				num7 = 300f;
			}
			bool flag = false;
			int num8 = -1;
			tileCollide = true;
			if (type == 407)
			{
				tileCollide = false;
				if (Collision.SolidCollision(position, width, height))
				{
					alpha += 20;
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				else
				{
					alpha -= 50;
					if (alpha < 60)
					{
						alpha = 60;
					}
				}
			}
			if (type == 407 || type == 613 || type == 423)
			{
				Vector2 center = Main.player[owner].Center;
				Vector2 value = new Vector2(0.5f);
				if (type == 423)
				{
					value.Y = 0f;
				}
				NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
				{
					Vector2 vector2 = ownerMinionAttackTargetNPC.position + ownerMinionAttackTargetNPC.Size * value;
					float num9 = Vector2.Distance(vector2, center);
					if (((Vector2.Distance(center, vector) > num9 && num9 < num7) || !flag) && Collision.CanHitLine(position, width, height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
					{
						num7 = num9;
						vector = vector2;
						flag = true;
						num8 = ownerMinionAttackTargetNPC.whoAmI;
					}
				}
				if (!flag)
				{
					for (int n = 0; n < 200; n++)
					{
						NPC nPC = Main.npc[n];
						if (nPC.CanBeChasedBy(this))
						{
							Vector2 vector3 = nPC.position + nPC.Size * value;
							float num10 = Vector2.Distance(vector3, center);
							if (((Vector2.Distance(center, vector) > num10 && num10 < num7) || !flag) && Collision.CanHitLine(position, width, height, nPC.position, nPC.width, nPC.height))
							{
								num7 = num10;
								vector = vector3;
								flag = true;
								num8 = n;
							}
						}
					}
				}
			}
			else
			{
				NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
				{
					float num11 = Vector2.Distance(ownerMinionAttackTargetNPC2.Center, base.Center);
					if (((Vector2.Distance(base.Center, vector) > num11 && num11 < num7) || !flag) && Collision.CanHitLine(position, width, height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
					{
						num7 = num11;
						vector = ownerMinionAttackTargetNPC2.Center;
						flag = true;
						num8 = ownerMinionAttackTargetNPC2.whoAmI;
					}
				}
				if (!flag)
				{
					for (int num12 = 0; num12 < 200; num12++)
					{
						NPC nPC2 = Main.npc[num12];
						if (nPC2.CanBeChasedBy(this))
						{
							float num13 = Vector2.Distance(nPC2.Center, base.Center);
							if (((Vector2.Distance(base.Center, vector) > num13 && num13 < num7) || !flag) && Collision.CanHitLine(position, width, height, nPC2.position, nPC2.width, nPC2.height))
							{
								num7 = num13;
								vector = nPC2.Center;
								flag = true;
								num8 = num12;
							}
						}
					}
				}
			}
			int num14 = 500;
			if (flag)
			{
				num14 = 1000;
			}
			if (flag && type == 423)
			{
				num14 = 1200;
			}
			if (flag && type == 613)
			{
				num14 = 1350;
			}
			Player player = Main.player[owner];
			if (Vector2.Distance(player.Center, base.Center) > (float)num14)
			{
				ai[0] = 1f;
				netUpdate = true;
			}
			if (ai[0] == 1f)
			{
				tileCollide = false;
			}
			if (flag && ai[0] == 0f)
			{
				Vector2 vector4 = vector - base.Center;
				float num15 = vector4.Length();
				vector4.Normalize();
				if (type == 423)
				{
					vector4 = vector - Vector2.UnitY * 80f;
					int num16 = (int)vector4.Y / 16;
					if (num16 < 0)
					{
						num16 = 0;
					}
					Tile tile = Main.tile[(int)vector4.X / 16, num16];
					if (tile != null && tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
					{
						vector4 += Vector2.UnitY * 16f;
						tile = Main.tile[(int)vector4.X / 16, (int)vector4.Y / 16];
						if (tile != null && tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
						{
							vector4 += Vector2.UnitY * 16f;
						}
					}
					vector4 -= base.Center;
					num15 = vector4.Length();
					vector4.Normalize();
					if (num15 > 300f && num15 <= 800f && localAI[0] == 0f)
					{
						ai[0] = 2f;
						ai[1] = (int)(num15 / 10f);
						extraUpdates = (int)ai[1];
						velocity = vector4 * 10f;
						localAI[0] = 60f;
						return;
					}
				}
				if (type == 613)
				{
					vector4 = vector;
					Vector2 vector5 = base.Center - vector4;
					if (vector5 == Vector2.Zero)
					{
						vector5 = -Vector2.UnitY;
					}
					vector5.Normalize();
					vector4 += vector5 * 60f;
					int num17 = (int)vector4.Y / 16;
					if (num17 < 0)
					{
						num17 = 0;
					}
					Tile tile2 = Main.tile[(int)vector4.X / 16, num17];
					if (tile2 != null && tile2.active() && Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type])
					{
						vector4 += Vector2.UnitY * 16f;
						tile2 = Main.tile[(int)vector4.X / 16, (int)vector4.Y / 16];
						if (tile2 != null && tile2.active() && Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type])
						{
							vector4 += Vector2.UnitY * 16f;
						}
					}
					vector4 -= base.Center;
					num15 = vector4.Length();
					vector4.Normalize();
					if (num15 > 400f && num15 <= 800f && localAI[0] == 0f)
					{
						ai[0] = 2f;
						ai[1] = (int)(num15 / 10f);
						extraUpdates = (int)ai[1];
						velocity = vector4 * 10f;
						localAI[0] = 60f;
						return;
					}
				}
				if (type == 407)
				{
					if (num15 > 400f)
					{
						float num18 = 2f;
						vector4 *= num18;
						velocity = (velocity * 20f + vector4) / 21f;
					}
					else
					{
						velocity *= 0.96f;
					}
				}
				if (num15 > 200f)
				{
					float num19 = 6f;
					vector4 *= num19;
					velocity.X = (velocity.X * 40f + vector4.X) / 41f;
					velocity.Y = (velocity.Y * 40f + vector4.Y) / 41f;
				}
				else if (type == 423 || type == 613)
				{
					if (num15 > 70f && num15 < 130f)
					{
						float num20 = 7f;
						if (num15 < 100f)
						{
							num20 = -3f;
						}
						vector4 *= num20;
						velocity = (velocity * 20f + vector4) / 21f;
						if (Math.Abs(vector4.X) > Math.Abs(vector4.Y))
						{
							velocity.X = (velocity.X * 10f + vector4.X) / 11f;
						}
					}
					else
					{
						velocity *= 0.97f;
					}
				}
				else if (type == 375)
				{
					if (num15 < 150f)
					{
						float num21 = 4f;
						vector4 *= 0f - num21;
						velocity.X = (velocity.X * 40f + vector4.X) / 41f;
						velocity.Y = (velocity.Y * 40f + vector4.Y) / 41f;
					}
					else
					{
						velocity *= 0.97f;
					}
				}
				else if (velocity.Y > -1f)
				{
					velocity.Y -= 0.1f;
				}
			}
			else
			{
				if (!Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
				{
					ai[0] = 1f;
				}
				float num22 = 6f;
				if (ai[0] == 1f)
				{
					num22 = 15f;
				}
				if (type == 407)
				{
					num22 = 9f;
				}
				Vector2 center2 = base.Center;
				Vector2 value2 = player.Center - center2 + new Vector2(0f, -60f);
				if (type == 407)
				{
					value2 += new Vector2(0f, 40f);
				}
				if (type == 375)
				{
					ai[1] = 3600f;
					netUpdate = true;
					value2 = player.Center - center2;
					int num23 = 1;
					for (int num24 = 0; num24 < whoAmI; num24++)
					{
						if (Main.projectile[num24].active && Main.projectile[num24].owner == owner && Main.projectile[num24].type == type)
						{
							num23++;
						}
					}
					value2.X -= 10 * Main.player[owner].direction;
					value2.X -= num23 * 40 * Main.player[owner].direction;
					value2.Y -= 10f;
				}
				float num25 = value2.Length();
				if (num25 > 200f && num22 < 9f)
				{
					num22 = 9f;
				}
				if (type == 375)
				{
					num22 = (int)((double)num22 * 0.75);
				}
				if (num25 < 100f && ai[0] == 1f && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					netUpdate = true;
				}
				if (num25 > 2000f)
				{
					position.X = Main.player[owner].Center.X - (float)(width / 2);
					position.Y = Main.player[owner].Center.Y - (float)(width / 2);
				}
				if (type == 375)
				{
					if (num25 > 10f)
					{
						value2.Normalize();
						if (num25 < 50f)
						{
							num22 /= 2f;
						}
						value2 *= num22;
						velocity = (velocity * 20f + value2) / 21f;
					}
					else
					{
						direction = Main.player[owner].direction;
						velocity *= 0.9f;
					}
				}
				else if (type == 407)
				{
					if (Math.Abs(value2.X) > 40f || Math.Abs(value2.Y) > 10f)
					{
						value2.Normalize();
						value2 *= num22;
						value2 *= new Vector2(1.25f, 0.65f);
						velocity = (velocity * 20f + value2) / 21f;
					}
					else
					{
						if (velocity.X == 0f && velocity.Y == 0f)
						{
							velocity.X = -0.15f;
							velocity.Y = -0.05f;
						}
						velocity *= 1.01f;
					}
				}
				else if (num25 > 70f)
				{
					value2.Normalize();
					value2 *= num22;
					velocity = (velocity * 20f + value2) / 21f;
				}
				else
				{
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						velocity.X = -0.15f;
						velocity.Y = -0.05f;
					}
					velocity *= 1.01f;
				}
			}
			rotation = velocity.X * 0.05f;
			frameCounter++;
			if (type == 373)
			{
				if (frameCounter > 1)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 2)
				{
					frame = 0;
				}
			}
			if (type == 375)
			{
				if (frameCounter >= 16)
				{
					frameCounter = 0;
				}
				frame = frameCounter / 4;
				if (ai[1] > 0f && ai[1] < 16f)
				{
					frame += 4;
				}
				if (Main.rand.Next(6) == 0)
				{
					int num26 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num26].velocity *= 0.3f;
					Main.dust[num26].noGravity = true;
					Main.dust[num26].noLight = true;
				}
			}
			if (type == 407)
			{
				int num27 = 2;
				if (frameCounter >= 6 * num27)
				{
					frameCounter = 0;
				}
				frame = frameCounter / num27;
				if (Main.rand.Next(5) == 0)
				{
					int num28 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 217, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num28].velocity *= 0.3f;
					Main.dust[num28].noGravity = true;
					Main.dust[num28].noLight = true;
				}
			}
			if (type == 423 || type == 613)
			{
				int num29 = 3;
				if (frameCounter >= 4 * num29)
				{
					frameCounter = 0;
				}
				frame = frameCounter / num29;
			}
			if (velocity.X > 0f)
			{
				spriteDirection = (direction = -1);
			}
			else if (velocity.X < 0f)
			{
				spriteDirection = (direction = 1);
			}
			if (type == 373)
			{
				if (ai[1] > 0f)
				{
					ai[1] += Main.rand.Next(1, 4);
				}
				if (ai[1] > 90f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 375)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) == 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > 90f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 407)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > 60f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 423)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > 30f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 613)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > 60f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			if (ai[0] != 0f)
			{
				return;
			}
			float num30 = 0f;
			int num31 = 0;
			if (type == 373)
			{
				num30 = 10f;
				num31 = 374;
			}
			else if (type == 375)
			{
				num30 = 11f;
				num31 = 376;
			}
			else if (type == 407)
			{
				num30 = 14f;
				num31 = 408;
			}
			else if (type == 423)
			{
				num30 = 4f;
				num31 = 433;
			}
			else if (type == 613)
			{
				num30 = 14f;
				num31 = 614;
			}
			if (!flag)
			{
				return;
			}
			if (type == 375)
			{
				if ((vector - base.Center).X > 0f)
				{
					spriteDirection = (direction = -1);
				}
				else if ((vector - base.Center).X < 0f)
				{
					spriteDirection = (direction = 1);
				}
			}
			if (type == 407 && Collision.SolidCollision(position, width, height))
			{
				return;
			}
			if (type == 423)
			{
				if (Math.Abs((vector - base.Center).ToRotation() - (float)Math.PI / 2f) > (float)Math.PI / 4f)
				{
					velocity += Vector2.Normalize(vector - base.Center - Vector2.UnitY * 80f);
				}
				else if (!((vector - base.Center).Length() > 400f) && ai[1] == 0f)
				{
					ai[1] += 1f;
					if (Main.myPlayer == owner)
					{
						Vector2 vector6 = vector - base.Center;
						vector6.Normalize();
						vector6 *= num30;
						NewProjectile(base.Center.X, base.Center.Y, vector6.X, vector6.Y, num31, damage, 0f, Main.myPlayer);
						netUpdate = true;
					}
				}
			}
			else if (ai[1] == 0f && type == 613)
			{
				if ((vector - base.Center).Length() > 500f || ai[1] != 0f)
				{
					return;
				}
				ai[1] += 1f;
				if (Main.myPlayer == owner)
				{
					Vector2 value3 = vector - base.Center;
					value3.Normalize();
					value3 *= num30;
					int num32 = NewProjectile(base.Center.X, base.Center.Y, value3.X, value3.Y, num31, damage, 0f, Main.myPlayer, 0f, num8);
					Main.projectile[num32].timeLeft = 300;
					Main.projectile[num32].netUpdate = true;
					velocity -= value3 / 3f;
					netUpdate = true;
				}
				for (int num33 = 0; num33 < 5; num33++)
				{
					int num34 = width / 4;
					_ = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
					int num35 = Dust.NewDust(base.Center - Vector2.One * num34, num34 * 2, num34 * 2, 88);
					Dust dust3 = Main.dust[num35];
					Vector2 value4 = Vector2.Normalize(dust3.position - base.Center);
					dust3.position = base.Center + value4 * num34 * scale - new Vector2(4f);
					if (num33 < 30)
					{
						dust3.velocity = value4 * dust3.velocity.Length() * 2f;
					}
					else
					{
						dust3.velocity = 2f * value4 * Main.rand.Next(45, 91) / 10f;
					}
					dust3.noGravity = true;
					dust3.scale = 0.7f + Main.rand.NextFloat();
				}
			}
			else if (ai[1] == 0f)
			{
				Vector2 vector7 = vector - base.Center;
				ai[1] += 1f;
				if (Main.myPlayer == owner)
				{
					vector7.Normalize();
					vector7 *= num30;
					int num36 = NewProjectile(base.Center.X, base.Center.Y, vector7.X, vector7.Y, num31, damage, 0f, Main.myPlayer);
					Main.projectile[num36].timeLeft = 300;
					Main.projectile[num36].netUpdate = true;
					netUpdate = true;
				}
			}
		}

		private void AI_075()
		{
			Player player = Main.player[owner];
			float num = (float)Math.PI / 2f;
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
			int num2 = 2;
			float num3 = 0f;
			if (type == 439)
			{
				ai[0] += 1f;
				int num4 = 0;
				if (ai[0] >= 40f)
				{
					num4++;
				}
				if (ai[0] >= 80f)
				{
					num4++;
				}
				if (ai[0] >= 120f)
				{
					num4++;
				}
				int num5 = 24;
				int num6 = 6;
				ai[1] += 1f;
				bool flag = false;
				if (ai[1] >= (float)(num5 - num6 * num4))
				{
					ai[1] = 0f;
					flag = true;
				}
				frameCounter += 1 + num4;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
					if (frame >= 6)
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					soundDelay = num5 - num6 * num4;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item91, base.position);
					}
				}
				if (ai[1] == 1f && ai[0] != 1f)
				{
					Vector2 spinningpoint = Vector2.UnitX * 24f;
					spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
					Vector2 value = base.Center + spinningpoint;
					for (int i = 0; i < 2; i++)
					{
						int num7 = Dust.NewDust(value - Vector2.One * 8f, 16, 16, 135, base.velocity.X / 2f, base.velocity.Y / 2f, 100);
						Main.dust[num7].velocity *= 0.66f;
						Main.dust[num7].noGravity = true;
						Main.dust[num7].scale = 1.4f;
					}
				}
				if (flag && Main.myPlayer == owner)
				{
					if (player.channel && player.CheckMana(player.inventory[player.selectedItem].mana, pay: true) && !player.noItems && !player.CCed)
					{
						float num8 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 value2 = vector;
						Vector2 value3 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value2;
						if (player.gravDir == -1f)
						{
							value3.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value2.Y;
						}
						Vector2 velocity = Vector2.Normalize(value3);
						if (float.IsNaN(velocity.X) || float.IsNaN(velocity.Y))
						{
							velocity = -Vector2.UnitY;
						}
						velocity *= num8;
						if (velocity.X != base.velocity.X || velocity.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = velocity;
						int num9 = 440;
						float scaleFactor = 14f;
						int num10 = 7;
						for (int j = 0; j < 2; j++)
						{
							value2 = base.Center + new Vector2(Main.rand.Next(-num10, num10 + 1), Main.rand.Next(-num10, num10 + 1));
							Vector2 spinningpoint2 = Vector2.Normalize(base.velocity) * scaleFactor;
							spinningpoint2 = spinningpoint2.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
							if (float.IsNaN(spinningpoint2.X) || float.IsNaN(spinningpoint2.Y))
							{
								spinningpoint2 = -Vector2.UnitY;
							}
							NewProjectile(value2.X, value2.Y, spinningpoint2.X, spinningpoint2.Y, num9, damage, knockBack, owner);
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 445)
			{
				if (soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item132, base.position);
					soundDelay = 23;
				}
				localAI[0] += 1f;
				if (localAI[0] >= 60f)
				{
					localAI[0] = 0f;
				}
				if (Vector2.Distance(vector, base.Center) >= 5f)
				{
					float num11 = localAI[0] / 60f;
					if (num11 > 0.5f)
					{
						num11 = 1f - num11;
					}
					Vector3 value4 = new Vector3(0f, 1f, 0.7f);
					Vector3 value5 = new Vector3(0f, 0.7f, 1f);
					Vector3 value6 = Vector3.Lerp(value4, value5, 1f - num11 * 2f) * 0.5f;
					if (Vector2.Distance(vector, base.Center) >= 30f)
					{
						Vector2 value7 = base.Center - vector;
						value7.Normalize();
						value7 *= Vector2.Distance(vector, base.Center) - 30f;
						DelegateMethods.v3_1 = value6 * 0.8f;
						Utils.PlotTileLine(base.Center - value7, base.Center, 8f, DelegateMethods.CastLightOpen);
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, value6.X, value6.Y, value6.Z);
				}
				if (Main.myPlayer == owner)
				{
					if (localAI[1] > 0f)
					{
						localAI[1] -= 1f;
					}
					if (!player.channel || player.noItems || player.CCed)
					{
						Kill();
					}
					else if (localAI[1] == 0f)
					{
						Vector2 value8 = vector;
						Vector2 vector2 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value8;
						if (player.gravDir == -1f)
						{
							vector2.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value8.Y;
						}
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
						{
							vector2 = new Vector2(Player.tileTargetX, Player.tileTargetY) * 16f + Vector2.One * 8f - value8;
							localAI[1] = 2f;
						}
						vector2 = Vector2.Lerp(vector2, base.velocity, 0.7f);
						if (float.IsNaN(vector2.X) || float.IsNaN(vector2.Y))
						{
							vector2 = -Vector2.UnitY;
						}
						float num12 = 30f;
						if (vector2.Length() < num12)
						{
							vector2 = Vector2.Normalize(vector2) * num12;
						}
						int tileBoost = player.inventory[player.selectedItem].tileBoost;
						int num13 = -Player.tileRangeX - tileBoost + 1;
						int num14 = Player.tileRangeX + tileBoost - 1;
						int num15 = -Player.tileRangeY - tileBoost;
						int num16 = Player.tileRangeY + tileBoost - 1;
						int num17 = 12;
						bool flag2 = false;
						if (vector2.X < (float)(num13 * 16 - num17))
						{
							flag2 = true;
						}
						if (vector2.Y < (float)(num15 * 16 - num17))
						{
							flag2 = true;
						}
						if (vector2.X > (float)(num14 * 16 + num17))
						{
							flag2 = true;
						}
						if (vector2.Y > (float)(num16 * 16 + num17))
						{
							flag2 = true;
						}
						if (flag2)
						{
							Vector2 value9 = Vector2.Normalize(vector2);
							float num18 = -1f;
							if (value9.X < 0f && ((float)(num13 * 16 - num17) / value9.X < num18 || num18 == -1f))
							{
								num18 = (float)(num13 * 16 - num17) / value9.X;
							}
							if (value9.X > 0f && ((float)(num14 * 16 + num17) / value9.X < num18 || num18 == -1f))
							{
								num18 = (float)(num14 * 16 + num17) / value9.X;
							}
							if (value9.Y < 0f && ((float)(num15 * 16 - num17) / value9.Y < num18 || num18 == -1f))
							{
								num18 = (float)(num15 * 16 - num17) / value9.Y;
							}
							if (value9.Y > 0f && ((float)(num16 * 16 + num17) / value9.Y < num18 || num18 == -1f))
							{
								num18 = (float)(num16 * 16 + num17) / value9.Y;
							}
							vector2 = value9 * num18;
						}
						if (vector2.X != base.velocity.X || vector2.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = vector2;
					}
				}
			}
			if (type == 460)
			{
				ai[0] += 1f;
				int num19 = 0;
				if (ai[0] >= 80f)
				{
					num19++;
				}
				if (ai[0] >= 180f)
				{
					num19++;
				}
				bool flag3 = false;
				_ = ai[0];
				if (ai[0] == 80f || ai[0] == 180f || (ai[0] > 180f && ai[0] % 20f == 0f))
				{
					flag3 = true;
				}
				bool flag4 = ai[0] >= 180f;
				int num20 = 5;
				if (!flag4)
				{
					ai[1] += 1f;
				}
				bool flag5 = false;
				if (ai[0] == 1f)
				{
					flag5 = true;
				}
				if (flag4 && ai[0] % 20f == 0f)
				{
					flag5 = true;
				}
				if (ai[1] >= (float)num20 && !flag4)
				{
					ai[1] = 0f;
					flag5 = true;
					if (!flag4)
					{
						float num21 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 value10 = vector;
						Vector2 value11 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value10;
						if (player.gravDir == -1f)
						{
							value11.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value10.Y;
						}
						Vector2 velocity2 = Vector2.Normalize(value11);
						if (float.IsNaN(velocity2.X) || float.IsNaN(velocity2.Y))
						{
							velocity2 = -Vector2.UnitY;
						}
						velocity2 *= num21;
						if (velocity2.X != base.velocity.X || velocity2.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = velocity2;
					}
				}
				if (soundDelay <= 0 && !flag4)
				{
					soundDelay = num20 - num19;
					soundDelay *= 2;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item15, base.position);
					}
				}
				if (ai[0] > 10f && !flag4)
				{
					Vector2 spinningpoint3 = Vector2.UnitX * 18f;
					spinningpoint3 = spinningpoint3.RotatedBy(rotation - (float)Math.PI / 2f);
					Vector2 value12 = base.Center + spinningpoint3;
					for (int k = 0; k < num19 + 1; k++)
					{
						int num22 = 226;
						float num23 = 0.4f;
						if (k % 2 == 1)
						{
							num22 = 226;
							num23 = 0.65f;
						}
						Vector2 vector3 = value12 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (12f - (float)(num19 * 2));
						int num24 = Dust.NewDust(vector3 - Vector2.One * 8f, 16, 16, num22, base.velocity.X / 2f, base.velocity.Y / 2f);
						Main.dust[num24].velocity = Vector2.Normalize(value12 - vector3) * 1.5f * (10f - (float)num19 * 2f) / 10f;
						Main.dust[num24].noGravity = true;
						Main.dust[num24].scale = num23;
						Main.dust[num24].customData = player;
					}
				}
				if (flag4)
				{
					Vector2 spinningpoint4 = Vector2.UnitX * 14f;
					spinningpoint4 = spinningpoint4.RotatedBy(rotation - (float)Math.PI / 2f);
					Vector2 vector4 = base.Center + spinningpoint4;
					for (int l = 0; l < 2; l++)
					{
						int num25 = 226;
						float num26 = 0.35f;
						if (l % 2 == 1)
						{
							num25 = 226;
							num26 = 0.45f;
						}
						float num27 = Main.rand.NextFloatDirection();
						Vector2 value13 = vector4 + (rotation + num27 * ((float)Math.PI / 4f) * 0.8f - (float)Math.PI / 2f).ToRotationVector2() * 6f;
						int num28 = 24;
						int num29 = Dust.NewDust(value13 - Vector2.One * (num28 / 2), num28, num28, num25, base.velocity.X / 2f, base.velocity.Y / 2f);
						Main.dust[num29].velocity = (value13 - vector4).SafeNormalize(Vector2.Zero) * MathHelper.Lerp(1.5f, 9f, Utils.GetLerpValue(1f, 0f, Math.Abs(num27), clamped: true));
						Main.dust[num29].noGravity = true;
						Main.dust[num29].scale = num26;
						Main.dust[num29].customData = player;
						Main.dust[num29].fadeIn = 0.5f;
					}
				}
				if (flag5 && Main.myPlayer == owner)
				{
					bool flag6 = false;
					flag6 = !flag3 || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true);
					if (player.channel && flag6 && !player.noItems && !player.CCed)
					{
						if (ai[0] == 180f)
						{
							Vector2 center = base.Center;
							Vector2 vector5 = Vector2.Normalize(base.velocity);
							if (float.IsNaN(vector5.X) || float.IsNaN(vector5.Y))
							{
								vector5 = -Vector2.UnitY;
							}
							int num30 = (int)((float)damage * 1.5f);
							int num31 = NewProjectile(center.X, center.Y, vector5.X, vector5.Y, 461, num30, knockBack, owner, 0f, whoAmI);
							ai[1] = num31;
							netUpdate = true;
						}
						else if (flag4)
						{
							Projectile projectile = Main.projectile[(int)ai[1]];
							if (!projectile.active || projectile.type != 461)
							{
								Kill();
								return;
							}
						}
						else
						{
							bool flag7 = false;
							if (ai[0] == 1f)
							{
								flag7 = true;
							}
							if (ai[0] <= 50f && ai[0] % 10f == 0f)
							{
								flag7 = true;
							}
							if (ai[0] >= 80f && ai[0] < 180f && ai[0] % 30f == 0f)
							{
								flag7 = true;
							}
							if (flag7)
							{
								Vector2 vector6 = vector;
								int num32 = 459;
								float scaleFactor2 = 10f;
								vector6 = base.Center;
								Vector2 vector7 = Vector2.Normalize(base.velocity) * scaleFactor2;
								if (float.IsNaN(vector7.X) || float.IsNaN(vector7.Y))
								{
									vector7 = -Vector2.UnitY;
								}
								float num33 = 0.7f + (float)num19 * 0.3f;
								int num34 = ((num33 < 1f) ? damage : ((int)((float)damage * 2.5f)));
								NewProjectile(vector6.X, vector6.Y, vector7.X, vector7.Y, num32, num34, knockBack, owner, 0f, num33);
							}
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 633)
			{
				float num35 = 30f;
				if (ai[0] > 90f)
				{
					num35 = 15f;
				}
				if (ai[0] > 120f)
				{
					num35 = 5f;
				}
				damage = (int)((float)player.inventory[player.selectedItem].damage * player.magicDamage);
				ai[0] += 1f;
				ai[1] += 1f;
				bool flag8 = false;
				if (ai[0] % num35 == 0f)
				{
					flag8 = true;
				}
				int num36 = 10;
				bool flag9 = false;
				if (ai[0] % num35 == 0f)
				{
					flag9 = true;
				}
				if (ai[1] >= 1f)
				{
					ai[1] = 0f;
					flag9 = true;
					if (Main.myPlayer == owner)
					{
						float num37 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 value14 = vector;
						Vector2 value15 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value14;
						if (player.gravDir == -1f)
						{
							value15.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value14.Y;
						}
						Vector2 value16 = Vector2.Normalize(value15);
						if (float.IsNaN(value16.X) || float.IsNaN(value16.Y))
						{
							value16 = -Vector2.UnitY;
						}
						value16 = Vector2.Normalize(Vector2.Lerp(value16, Vector2.Normalize(base.velocity), 0.92f));
						value16 *= num37;
						if (value16.X != base.velocity.X || value16.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = value16;
					}
				}
				frameCounter++;
				int num38 = ((!(ai[0] < 120f)) ? 1 : 4);
				if (frameCounter >= num38)
				{
					frameCounter = 0;
					if (++frame >= 5)
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					soundDelay = num36;
					soundDelay *= 2;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item15, base.position);
					}
				}
				if (flag9 && Main.myPlayer == owner)
				{
					bool flag10 = false;
					flag10 = !flag8 || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true);
					if (player.channel && flag10 && !player.noItems && !player.CCed)
					{
						if (ai[0] == 1f)
						{
							Vector2 center2 = base.Center;
							Vector2 vector8 = Vector2.Normalize(base.velocity);
							if (float.IsNaN(vector8.X) || float.IsNaN(vector8.Y))
							{
								vector8 = -Vector2.UnitY;
							}
							int num39 = damage;
							for (int m = 0; m < 6; m++)
							{
								NewProjectile(center2.X, center2.Y, vector8.X, vector8.Y, 632, num39, knockBack, owner, m, whoAmI);
							}
							netUpdate = true;
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 595)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
				soundDelay--;
				if (soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item1, base.Center);
					soundDelay = 12;
				}
				if (Main.myPlayer == owner)
				{
					if (player.channel && !player.noItems && !player.CCed)
					{
						float num40 = 1f;
						if (player.inventory[player.selectedItem].shoot == type)
						{
							num40 = player.inventory[player.selectedItem].shootSpeed * scale;
						}
						Vector2 vector9 = Main.MouseWorld - vector;
						vector9.Normalize();
						if (vector9.HasNaNs())
						{
							vector9 = Vector2.UnitX * player.direction;
						}
						vector9 *= num40;
						if (vector9.X != base.velocity.X || vector9.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = vector9;
					}
					else
					{
						Kill();
					}
				}
				Vector2 vector10 = base.Center + base.velocity * 3f;
				Lighting.AddLight(vector10, 0.8f, 0.8f, 0.8f);
				if (Main.rand.Next(3) == 0)
				{
					int num41 = Dust.NewDust(vector10 - base.Size / 2f, width, height, 63, base.velocity.X, base.velocity.Y, 100, default(Color), 2f);
					Main.dust[num41].noGravity = true;
					Main.dust[num41].position -= base.velocity;
				}
			}
			if (type == 735)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
				soundDelay--;
				if (soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item1, base.Center);
					soundDelay = 12;
				}
				if (Main.myPlayer == owner)
				{
					if (player.channel && !player.noItems && !player.CCed)
					{
						float num42 = 1f;
						if (player.inventory[player.selectedItem].shoot == type)
						{
							num42 = player.inventory[player.selectedItem].shootSpeed * scale;
						}
						Vector2 vector11 = Main.MouseWorld - vector;
						vector11.Normalize();
						if (vector11.HasNaNs())
						{
							vector11 = Vector2.UnitX * player.direction;
						}
						vector11 *= num42;
						if (vector11.X != base.velocity.X || vector11.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = vector11;
					}
					else
					{
						Kill();
					}
				}
				Vector2 vector12 = base.Center + base.velocity * 3f;
				Lighting.AddLight(vector12, 0.8f, 0.8f, 0.8f);
				if (Main.rand.Next(3) == 0)
				{
					int num43 = Dust.NewDust(vector12 - base.Size / 2f, width, height, 302, base.velocity.X, base.velocity.Y, 100, default(Color), 2f);
					Main.dust[num43].noGravity = true;
					Main.dust[num43].position -= base.velocity;
				}
			}
			if (type == 927)
			{
				num = 0f;
				ai[0] += 1f;
				if (ai[0] >= 8f)
				{
					ai[0] = 0f;
				}
				num2 = 9;
				num3 = Main.rand.NextFloatDirection() * ((float)Math.PI * 2f) * 0.05f;
				soundDelay--;
				if (soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item1, base.Center);
					soundDelay = 6;
				}
				if (Main.myPlayer == owner)
				{
					if (player.channel && !player.noItems && !player.CCed)
					{
						float num44 = 1f;
						if (player.inventory[player.selectedItem].shoot == type)
						{
							num44 = player.inventory[player.selectedItem].shootSpeed * scale;
						}
						Vector2 vector13 = Main.MouseWorld - vector;
						vector13.Normalize();
						if (vector13.HasNaNs())
						{
							vector13 = Vector2.UnitX * player.direction;
						}
						vector13 *= num44;
						if (vector13.X != base.velocity.X || vector13.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = vector13;
					}
					else
					{
						Kill();
					}
				}
				DelegateMethods.v3_1 = new Vector3(0.5f, 0.5f, 0.5f);
				Utils.PlotTileLine(base.Center - base.velocity, base.Center + base.velocity.SafeNormalize(Vector2.Zero) * 80f, 16f, DelegateMethods.CastLightOpen);
			}
			if (type == 600)
			{
				_ = ai[0];
				_ = 0f;
				ai[0] += 1f;
				if (Main.myPlayer == owner && ai[0] == 1f)
				{
					float num45 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 value17 = vector;
					Vector2 value18 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value17;
					if (player.gravDir == -1f)
					{
						value18.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value17.Y;
					}
					Vector2 velocity3 = Vector2.Normalize(value18);
					if (float.IsNaN(velocity3.X) || float.IsNaN(velocity3.Y))
					{
						velocity3 = -Vector2.UnitY;
					}
					velocity3 *= num45;
					if (velocity3.X != base.velocity.X || velocity3.Y != base.velocity.Y)
					{
						netUpdate = true;
					}
					base.velocity = velocity3;
					int num46 = 601;
					float scaleFactor3 = 3f;
					value17 = base.Center;
					Vector2 vector14 = Vector2.Normalize(base.velocity) * scaleFactor3;
					if (float.IsNaN(vector14.X) || float.IsNaN(vector14.Y))
					{
						vector14 = -Vector2.UnitY;
					}
					NewProjectile(value17.X, value17.Y, vector14.X, vector14.Y, num46, damage, knockBack, owner, ai[1]);
				}
				if (ai[0] >= 30f)
				{
					Kill();
				}
			}
			if (type == 611)
			{
				if (Main.netMode != 2 && localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item116, base.Center);
				}
				if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = base.velocity.ToRotation();
				}
				float num47 = ((localAI[0].ToRotationVector2().X >= 0f) ? 1 : (-1));
				if (ai[1] <= 0f)
				{
					num47 *= -1f;
				}
				Vector2 vector15 = (num47 * (ai[0] / 30f * ((float)Math.PI * 2f) - (float)Math.PI / 2f)).ToRotationVector2();
				vector15.Y *= (float)Math.Sin(ai[1]);
				if (ai[1] <= 0f)
				{
					vector15.Y *= -1f;
				}
				vector15 = vector15.RotatedBy(localAI[0]);
				ai[0] += 1f;
				if (ai[0] < 30f)
				{
					base.velocity += 48f * vector15;
				}
				else
				{
					Kill();
				}
			}
			if (type == 615)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				ai[0] += 1f;
				int num48 = 0;
				if (ai[0] >= 40f)
				{
					num48++;
				}
				if (ai[0] >= 80f)
				{
					num48++;
				}
				if (ai[0] >= 120f)
				{
					num48++;
				}
				int num49 = 5;
				int num50 = 0;
				ai[1] -= 1f;
				bool flag11 = false;
				int num51 = -1;
				if (ai[1] <= 0f)
				{
					ai[1] = num49 - num50 * num48;
					flag11 = true;
					if ((int)ai[0] / (num49 - num50 * num48) % 7 == 0)
					{
						num51 = 0;
					}
				}
				frameCounter += 1 + num48;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					soundDelay = num49 - num50 * num48;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item36, base.position);
					}
				}
				if (flag11 && Main.myPlayer == owner)
				{
					bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
					int projToShoot = 14;
					float speed = 14f;
					int Damage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float KnockBack = player.inventory[player.selectedItem].knockBack;
					if (canShoot)
					{
						player.PickAmmo(player.inventory[player.selectedItem], projToShoot, speed, canShoot, Damage, KnockBack);
						KnockBack = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack);
						float num52 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 value19 = vector;
						Vector2 value20 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value19;
						if (player.gravDir == -1f)
						{
							value20.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value19.Y;
						}
						Vector2 spinningpoint5 = Vector2.Normalize(value20);
						if (float.IsNaN(spinningpoint5.X) || float.IsNaN(spinningpoint5.Y))
						{
							spinningpoint5 = -Vector2.UnitY;
						}
						spinningpoint5 *= num52;
						spinningpoint5 = spinningpoint5.RotatedBy(Main.rand.NextDouble() * 0.13089969754219055 - 0.065449848771095276);
						if (spinningpoint5.X != base.velocity.X || spinningpoint5.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = spinningpoint5;
						for (int n = 0; n < 1; n++)
						{
							Vector2 spinningpoint6 = Vector2.Normalize(base.velocity) * speed;
							spinningpoint6 = spinningpoint6.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
							if (float.IsNaN(spinningpoint6.X) || float.IsNaN(spinningpoint6.Y))
							{
								spinningpoint6 = -Vector2.UnitY;
							}
							NewProjectile(value19.X, value19.Y, spinningpoint6.X, spinningpoint6.Y, projToShoot, Damage, KnockBack, owner);
						}
						if (num51 == 0)
						{
							projToShoot = 616;
							speed = 8f;
							for (int num53 = 0; num53 < 1; num53++)
							{
								Vector2 spinningpoint7 = Vector2.Normalize(base.velocity) * speed;
								spinningpoint7 = spinningpoint7.RotatedBy(Main.rand.NextDouble() * 0.39269909262657166 - 0.19634954631328583);
								if (float.IsNaN(spinningpoint7.X) || float.IsNaN(spinningpoint7.Y))
								{
									spinningpoint7 = -Vector2.UnitY;
								}
								NewProjectile(value19.X, value19.Y, spinningpoint7.X, spinningpoint7.Y, projToShoot, Damage + 20, KnockBack * 1.25f, owner);
							}
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 714)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				ai[0] += 1f;
				int num54 = 0;
				int num55 = 8;
				int num56 = 0;
				ai[1] -= 1f;
				bool flag12 = false;
				int num57 = -1;
				if (ai[1] <= 0f)
				{
					ai[1] = num55 - num56 * num54;
					flag12 = true;
					int num58 = (int)ai[0] / (num55 - num56 * num54);
					if (num58 % 7 == 0)
					{
						num57 = 0;
					}
					num57 = num58 % 7;
				}
				_ = rotation;
				Vector2 center3 = base.Center;
				_ = direction;
				Vector2 velocity4 = base.velocity;
				frameCounter += 1 + num54;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0 && Main.player[owner].controlUseItem)
				{
					soundDelay = num55 - num56 * num54;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item156, base.position);
					}
				}
				if (flag12 && Main.myPlayer == owner)
				{
					bool canShoot2 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
					int projToShoot2 = 134;
					float speed2 = 8f;
					int Damage2 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float KnockBack2 = player.inventory[player.selectedItem].knockBack;
					if (num57 == 3)
					{
						speed2 += 1f;
					}
					if (canShoot2)
					{
						player.PickAmmo(player.inventory[player.selectedItem], projToShoot2, speed2, canShoot2, Damage2, KnockBack2);
						KnockBack2 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack2);
						float num59 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 value21 = vector;
						Vector2 value22 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value21;
						if (player.gravDir == -1f)
						{
							value22.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - value21.Y;
						}
						Vector2 spinningpoint8 = Vector2.Normalize(value22);
						if (float.IsNaN(spinningpoint8.X) || float.IsNaN(spinningpoint8.Y))
						{
							spinningpoint8 = -Vector2.UnitY;
						}
						spinningpoint8 *= num59;
						spinningpoint8 = spinningpoint8.RotatedBy((Main.rand.NextDouble() * 0.13089969754219055 - 0.065449848771095276) * 0.5);
						if (spinningpoint8.X != base.velocity.X || spinningpoint8.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = spinningpoint8;
						for (int num60 = 0; num60 < 1; num60++)
						{
							Vector2 spinningpoint9 = Vector2.Normalize(base.velocity) * speed2;
							spinningpoint9 = spinningpoint9.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
							if (float.IsNaN(spinningpoint9.X) || float.IsNaN(spinningpoint9.Y))
							{
								spinningpoint9 = -Vector2.UnitY;
							}
							NewProjectile(value21.X, value21.Y, spinningpoint9.X, spinningpoint9.Y, projToShoot2, Damage2, KnockBack2, owner, num57);
							if (num57 == 5)
							{
								for (float num61 = -1f; num61 <= 1f; num61 += 2f)
								{
									Vector2 vector16 = spinningpoint9.RotatedBy((float)Math.PI * 2f * num61 * 1f / 80f);
									if (float.IsNaN(spinningpoint9.X) || float.IsNaN(spinningpoint9.Y))
									{
										vector16 = -Vector2.UnitY;
									}
									NewProjectile(value21.X, value21.Y, vector16.X, vector16.Y, projToShoot2, Damage2, KnockBack2, owner, num57);
								}
							}
							if (num57 == 4)
							{
								NewProjectile(value21.X, value21.Y, spinningpoint9.X, spinningpoint9.Y, projToShoot2, Damage2, KnockBack2, owner, num57, 1f);
							}
						}
					}
					else
					{
						Kill();
					}
				}
				Vector2 vector17 = base.Center + base.velocity.ToRotation().ToRotationVector2() * 40f;
				Vector2 value23 = center3 + velocity4.ToRotation().ToRotationVector2() * 40f;
				Color color = Main.hslToRgb(ai[0] / 90f % 1f, 1f, 0.5f);
				color.A = 120;
				int num62 = 267;
				Dust dust = Dust.NewDustPerfect(vector17, num62, Vector2.Zero);
				dust.color = color;
				dust.scale = 0.6f;
				dust.fadeIn = 0.9f;
				dust.noGravity = true;
				Dust dust2 = Dust.NewDustPerfect(vector17, num62, Vector2.Zero);
				dust2.color = color;
				dust2.scale = 0.6f;
				dust2.fadeIn = 0.7f;
				dust2.noGravity = true;
				dust2.velocity = -base.velocity.RotatedBy(2.0943951606750488) / 10f;
				Dust dust3 = Dust.NewDustPerfect(vector17, num62, Vector2.Zero);
				dust3.color = color;
				dust3.scale = 0.6f;
				dust3.fadeIn = 0.7f;
				dust3.noGravity = true;
				dust3.velocity = -base.velocity.RotatedBy(-2.0943951606750488) / 10f;
				if (vector17 != value23)
				{
					float num63 = -1f;
					Dust dust4 = Dust.NewDustPerfect(Vector2.Lerp(vector17, value23, 0.8f), num62, Vector2.Zero);
					dust4.velocity = (vector17 - value23).SafeNormalize(Vector2.Zero) * 2f;
					dust4.color = color;
					dust4.scale = 0.6f;
					dust4.fadeIn = 0.9f;
					dust4.velocity *= num63;
					dust4.noGravity = true;
					Dust dust5 = Dust.NewDustPerfect(Vector2.Lerp(vector17, value23, 0.5f), num62, Vector2.Zero);
					dust5.velocity = (vector17 - value23).SafeNormalize(Vector2.Zero) * 2f;
					dust5.color = color;
					dust5.scale = 0.6f;
					dust5.fadeIn = 0.9f;
					dust5.velocity *= num63;
					dust5.noGravity = true;
					Dust dust6 = Dust.NewDustPerfect(Vector2.Lerp(vector17, value23, 0.2f), num62, Vector2.Zero);
					dust6.velocity = (vector17 - value23).SafeNormalize(Vector2.Zero) * 2f;
					dust6.color = color;
					dust6.scale = 0.6f;
					dust6.fadeIn = 0.9f;
					dust6.velocity *= num63;
					dust6.noGravity = true;
				}
			}
			if (type == 630)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				ai[0] += 1f;
				int num64 = 0;
				if (ai[0] >= 40f)
				{
					num64++;
				}
				if (ai[0] >= 80f)
				{
					num64++;
				}
				if (ai[0] >= 120f)
				{
					num64++;
				}
				int num65 = 24;
				int num66 = 2;
				ai[1] -= 1f;
				bool flag13 = false;
				if (ai[1] <= 0f)
				{
					ai[1] = num65 - num66 * num64;
					flag13 = true;
					_ = (int)ai[0] / (num65 - num66 * num64);
				}
				bool canShoot3 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (soundDelay <= 0 && canShoot3)
				{
					soundDelay = num65 - num66 * num64;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item5, base.position);
					}
					localAI[0] = 12f;
				}
				player.phantasmTime = 2;
				if (flag13 && Main.myPlayer == owner)
				{
					int projToShoot3 = 14;
					float speed3 = 14f;
					int Damage3 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float KnockBack3 = player.inventory[player.selectedItem].knockBack;
					if (canShoot3)
					{
						player.PickAmmo(player.inventory[player.selectedItem], projToShoot3, speed3, canShoot3, Damage3, KnockBack3);
						KnockBack3 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack3);
						float num67 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 vector18 = vector;
						Vector2 value24 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector18;
						if (player.gravDir == -1f)
						{
							value24.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector18.Y;
						}
						Vector2 value25 = Vector2.Normalize(value24);
						if (float.IsNaN(value25.X) || float.IsNaN(value25.Y))
						{
							value25 = -Vector2.UnitY;
						}
						value25 *= num67;
						if (value25.X != base.velocity.X || value25.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = value25 * 0.55f;
						for (int num68 = 0; num68 < 4; num68++)
						{
							Vector2 vector19 = Vector2.Normalize(base.velocity) * speed3 * (0.6f + Main.rand.NextFloat() * 0.8f);
							if (float.IsNaN(vector19.X) || float.IsNaN(vector19.Y))
							{
								vector19 = -Vector2.UnitY;
							}
							Vector2 vector20 = vector18 + Utils.RandomVector2(Main.rand, -15f, 15f);
							int num69 = NewProjectile(vector20.X, vector20.Y, vector19.X, vector19.Y, projToShoot3, Damage3, KnockBack3, owner);
							Main.projectile[num69].noDropItem = true;
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 705)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				ai[0] += 1f;
				int itemAnimationMax = player.itemAnimationMax;
				ai[1] -= 1f;
				bool flag14 = false;
				if (ai[1] <= 0f)
				{
					ai[1] = itemAnimationMax;
					flag14 = true;
				}
				bool canShoot4 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (soundDelay <= 0 && canShoot4)
				{
					soundDelay = itemAnimationMax;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item5, base.position);
					}
					localAI[0] = 12f;
				}
				if (flag14 && Main.myPlayer == owner)
				{
					int projToShoot4 = 14;
					float speed4 = 12f;
					int Damage4 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float KnockBack4 = player.inventory[player.selectedItem].knockBack;
					int num70 = 2;
					float num71 = 1.5f;
					if (canShoot4)
					{
						player.PickAmmo(player.inventory[player.selectedItem], projToShoot4, speed4, canShoot4, Damage4, KnockBack4);
						KnockBack4 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack4);
						if (projToShoot4 == 1)
						{
							projToShoot4 = 2;
						}
						if (++player.phantomPhoneixCounter >= 3)
						{
							player.phantomPhoneixCounter = 0;
							num70 = 1;
							Damage4 *= 2;
							num71 = 0f;
							ai[1] *= 1.5f;
							projToShoot4 = 706;
							speed4 = 16f;
						}
						float num72 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 vector21 = vector;
						Vector2 value26 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector21;
						if (player.gravDir == -1f)
						{
							value26.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector21.Y;
						}
						Vector2 value27 = Vector2.Normalize(value26);
						if (float.IsNaN(value27.X) || float.IsNaN(value27.Y))
						{
							value27 = -Vector2.UnitY;
						}
						value27 *= num72;
						if (value27.X != base.velocity.X || value27.Y != base.velocity.Y)
						{
							netUpdate = true;
						}
						base.velocity = value27 * 0.55f;
						for (int num73 = 0; num73 < num70; num73++)
						{
							Vector2 vector22 = Vector2.Normalize(base.velocity) * speed4;
							vector22 += Main.rand.NextVector2Square(0f - num71, num71);
							if (float.IsNaN(vector22.X) || float.IsNaN(vector22.Y))
							{
								vector22 = -Vector2.UnitY;
							}
							Vector2 vector23 = vector21;
							int num74 = NewProjectile(vector23.X, vector23.Y, vector22.X, vector22.Y, projToShoot4, Damage4, KnockBack4, owner);
							Main.projectile[num74].noDropItem = true;
						}
					}
					else
					{
						Kill();
					}
				}
			}
			base.position = player.RotatedRelativePoint(player.MountedCenter, reverseRotation: false, addGfxOffY: false) - base.Size / 2f;
			rotation = base.velocity.ToRotation() + num;
			spriteDirection = direction;
			timeLeft = 2;
			player.ChangeDir(direction);
			player.heldProj = whoAmI;
			player.SetDummyItemTime(num2);
			player.itemRotation = MathHelper.WrapAngle((float)Math.Atan2(base.velocity.Y * (float)direction, base.velocity.X * (float)direction) + num3);
			if (type == 460 || type == 611)
			{
				Vector2 value28 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
				if (player.direction != 1)
				{
					value28.X = (float)player.bodyFrame.Width - value28.X;
				}
				if (player.gravDir != 1f)
				{
					value28.Y = (float)player.bodyFrame.Height - value28.Y;
				}
				value28 -= new Vector2(player.bodyFrame.Width - player.width, player.bodyFrame.Height - 42) / 2f;
				base.Center = player.RotatedRelativePoint(player.MountedCenter - new Vector2(20f, 42f) / 2f + value28, reverseRotation: false, addGfxOffY: false) - base.velocity;
			}
			if (type == 615)
			{
				base.position.Y += player.gravDir * 2f;
			}
			if (type == 714)
			{
				base.position.Y += player.gravDir * 2f;
			}
			if (type == 611 && alpha == 0)
			{
				for (int num75 = 0; num75 < 2; num75++)
				{
					Dust obj = Main.dust[Dust.NewDust(base.position + base.velocity * 2f, width, height, 6, 0f, 0f, 100, Color.Transparent, 2f)];
					obj.noGravity = true;
					obj.velocity *= 2f;
					obj.velocity += localAI[0].ToRotationVector2();
					obj.fadeIn = 1.5f;
				}
				float num76 = 18f;
				for (int num77 = 0; (float)num77 < num76; num77++)
				{
					if (Main.rand.Next(4) == 0)
					{
						Vector2 position = base.position + base.velocity + base.velocity * ((float)num77 / num76);
						Dust obj2 = Main.dust[Dust.NewDust(position, width, height, 6, 0f, 0f, 100, Color.Transparent)];
						obj2.noGravity = true;
						obj2.fadeIn = 0.5f;
						obj2.velocity += localAI[0].ToRotationVector2();
						obj2.noLight = true;
					}
				}
			}
			if (type == 927)
			{
				player.itemAnimation = num2 - (int)ai[0];
			}
		}

		private void AI_099_1()
		{
			timeLeft = 6;
			bool flag = true;
			float num = 250f;
			float scaleFactor = 0.1f;
			float num2 = 15f;
			float num3 = 12f;
			num *= 0.5f;
			num2 *= 0.8f;
			num3 *= 1.5f;
			if (owner == Main.myPlayer)
			{
				bool flag2 = false;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].aiStyle == 99 && (Main.projectile[i].type < 556 || Main.projectile[i].type > 561))
					{
						flag2 = true;
					}
				}
				if (!flag2)
				{
					ai[0] = -1f;
					netUpdate = true;
				}
			}
			if (Main.player[owner].yoyoString)
			{
				num += num * 0.25f + 10f;
			}
			rotation += 0.5f;
			if (Main.player[owner].dead)
			{
				Kill();
				return;
			}
			if (!flag)
			{
				Main.player[owner].heldProj = whoAmI;
				Main.player[owner].SetDummyItemTime(2);
				if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
				{
					Main.player[owner].ChangeDir(1);
					direction = 1;
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
					direction = -1;
				}
			}
			if (ai[0] == 0f || ai[0] == 1f)
			{
				if (ai[0] == 1f)
				{
					num *= 0.75f;
				}
				num3 *= 0.5f;
				bool flag3 = false;
				Vector2 value = Main.player[owner].Center - base.Center;
				if ((double)value.Length() > (double)num * 0.9)
				{
					flag3 = true;
				}
				if (value.Length() > num)
				{
					float num4 = value.Length() - num;
					Vector2 vector = default(Vector2);
					vector.X = value.Y;
					vector.Y = value.X;
					value.Normalize();
					value *= num;
					position = Main.player[owner].Center - value;
					position.X -= width / 2;
					position.Y -= height / 2;
					float num5 = base.velocity.Length();
					base.velocity.Normalize();
					if (num4 > num5 - 1f)
					{
						num4 = num5 - 1f;
					}
					base.velocity *= num5 - num4;
					num5 = base.velocity.Length();
					Vector2 vector2 = new Vector2(base.Center.X, base.Center.Y);
					Vector2 vector3 = new Vector2(Main.player[owner].Center.X, Main.player[owner].Center.Y);
					if (vector2.Y < vector3.Y)
					{
						vector.Y = Math.Abs(vector.Y);
					}
					else if (vector2.Y > vector3.Y)
					{
						vector.Y = 0f - Math.Abs(vector.Y);
					}
					if (vector2.X < vector3.X)
					{
						vector.X = Math.Abs(vector.X);
					}
					else if (vector2.X > vector3.X)
					{
						vector.X = 0f - Math.Abs(vector.X);
					}
					vector.Normalize();
					vector *= base.velocity.Length();
					new Vector2(vector.X, vector.Y);
					if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
					{
						Vector2 velocity = base.velocity;
						velocity.Y += vector.Y;
						velocity.Normalize();
						velocity *= base.velocity.Length();
						if ((double)Math.Abs(vector.X) < 0.1 || (double)Math.Abs(vector.Y) < 0.1)
						{
							base.velocity = velocity;
						}
						else
						{
							base.velocity = (velocity + base.velocity * 2f) / 3f;
						}
					}
					else
					{
						Vector2 velocity2 = base.velocity;
						velocity2.X += vector.X;
						velocity2.Normalize();
						velocity2 *= base.velocity.Length();
						if ((double)Math.Abs(vector.X) < 0.2 || (double)Math.Abs(vector.Y) < 0.2)
						{
							base.velocity = velocity2;
						}
						else
						{
							base.velocity = (velocity2 + base.velocity * 2f) / 3f;
						}
					}
				}
				if (Main.myPlayer == owner)
				{
					if (Main.player[owner].channel)
					{
						Vector2 value2 = new Vector2(Main.mouseX - Main.lastMouseX, Main.mouseY - Main.lastMouseY);
						if (base.velocity.X != 0f || base.velocity.Y != 0f)
						{
							if (flag)
							{
								value2 *= -1f;
							}
							if (flag3)
							{
								if (base.Center.X < Main.player[owner].Center.X && value2.X < 0f)
								{
									value2.X = 0f;
								}
								if (base.Center.X > Main.player[owner].Center.X && value2.X > 0f)
								{
									value2.X = 0f;
								}
								if (base.Center.Y < Main.player[owner].Center.Y && value2.Y < 0f)
								{
									value2.Y = 0f;
								}
								if (base.Center.Y > Main.player[owner].Center.Y && value2.Y > 0f)
								{
									value2.Y = 0f;
								}
							}
							base.velocity += value2 * scaleFactor;
							netUpdate = true;
						}
					}
					else
					{
						ai[0] = 10f;
						netUpdate = true;
					}
				}
				if (flag || type == 562 || type == 547 || type == 555 || type == 564 || type == 552 || type == 563 || type == 549 || type == 550 || type == 554 || type == 553 || type == 603)
				{
					float num6 = 800f;
					Vector2 value3 = default(Vector2);
					bool flag4 = false;
					if (type == 549)
					{
						num6 = 200f;
					}
					if (type == 554)
					{
						num6 = 400f;
					}
					if (type == 553)
					{
						num6 = 250f;
					}
					if (type == 603)
					{
						num6 = 320f;
					}
					for (int j = 0; j < 200; j++)
					{
						if (Main.npc[j].CanBeChasedBy(this))
						{
							float num7 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
							float num8 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
							float num9 = Math.Abs(position.X + (float)(width / 2) - num7) + Math.Abs(position.Y + (float)(height / 2) - num8);
							if (num9 < num6 && (type != 563 || !(num9 < 200f)) && Collision.CanHit(position, width, height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height) && (double)(Main.npc[j].Center - Main.player[owner].Center).Length() < (double)num * 0.9)
							{
								num6 = num9;
								value3.X = num7;
								value3.Y = num8;
								flag4 = true;
							}
						}
					}
					if (flag4)
					{
						value3 -= base.Center;
						value3.Normalize();
						if (type == 563)
						{
							value3 *= 4f;
							base.velocity = (base.velocity * 14f + value3) / 15f;
						}
						else if (type == 553)
						{
							value3 *= 5f;
							base.velocity = (base.velocity * 12f + value3) / 13f;
						}
						else if (type == 603)
						{
							value3 *= 16f;
							base.velocity = (base.velocity * 9f + value3) / 10f;
						}
						else if (type == 554)
						{
							value3 *= 8f;
							base.velocity = (base.velocity * 6f + value3) / 7f;
						}
						else
						{
							value3 *= 6f;
							base.velocity = (base.velocity * 7f + value3) / 8f;
						}
					}
				}
				if (base.velocity.Length() > num2)
				{
					base.velocity.Normalize();
					base.velocity *= num2;
				}
				if (base.velocity.Length() < num3)
				{
					base.velocity.Normalize();
					base.velocity *= num3;
				}
				return;
			}
			tileCollide = false;
			Vector2 vector4 = Main.player[owner].Center - base.Center;
			float num10 = vector4.Length();
			if (num10 < 40f || vector4.HasNaNs() || num10 > 2000f)
			{
				Kill();
				return;
			}
			float num11 = num2 * 1.5f;
			if (type == 546)
			{
				num11 *= 1.5f;
			}
			if (type == 554)
			{
				num11 *= 1.25f;
			}
			if (type == 555)
			{
				num11 *= 1.35f;
			}
			if (type == 562)
			{
				num11 *= 1.25f;
			}
			float num12 = 12f;
			vector4.Normalize();
			vector4 *= num11;
			base.velocity = (base.velocity * (num12 - 1f) + vector4) / num12;
		}

		private void AI_099_2()
		{
			bool flag = false;
			for (int i = 0; i < whoAmI; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].type == type)
				{
					flag = true;
				}
			}
			if (owner == Main.myPlayer)
			{
				localAI[0] += 1f;
				if (flag)
				{
					localAI[0] += (float)Main.rand.Next(10, 31) * 0.1f;
				}
				float num = localAI[0] / 60f;
				num /= (1f + Main.player[owner].meleeSpeed) / 2f;
				float num2 = ProjectileID.Sets.YoyosLifeTimeMultiplier[type];
				if (num2 != -1f && num > num2)
				{
					ai[0] = -1f;
				}
			}
			if (type == 603 && owner == Main.myPlayer)
			{
				localAI[1] += 1f;
				if (localAI[1] >= 6f)
				{
					float num3 = 400f;
					Vector2 velocity = base.velocity;
					Vector2 vector = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					vector.Normalize();
					vector *= (float)Main.rand.Next(10, 41) * 0.1f;
					if (Main.rand.Next(3) == 0)
					{
						vector *= 2f;
					}
					velocity *= 0.25f;
					velocity += vector;
					for (int j = 0; j < 200; j++)
					{
						if (Main.npc[j].CanBeChasedBy(this))
						{
							float num4 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
							float num5 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
							float num6 = Math.Abs(position.X + (float)(width / 2) - num4) + Math.Abs(position.Y + (float)(height / 2) - num5);
							if (num6 < num3 && Collision.CanHit(position, width, height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height))
							{
								num3 = num6;
								velocity.X = num4;
								velocity.Y = num5;
								velocity -= base.Center;
								velocity.Normalize();
								velocity *= 8f;
							}
						}
					}
					velocity *= 0.8f;
					NewProjectile(base.Center.X - velocity.X, base.Center.Y - velocity.Y, velocity.X, velocity.Y, 604, damage, knockBack, owner);
					localAI[1] = 0f;
				}
			}
			bool flag2 = false;
			if (type >= 556 && type <= 561)
			{
				flag2 = true;
			}
			if (Main.player[owner].dead)
			{
				Kill();
				return;
			}
			if (!flag2 && !flag)
			{
				Main.player[owner].heldProj = whoAmI;
				Main.player[owner].SetDummyItemTime(2);
				if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
				{
					Main.player[owner].ChangeDir(1);
					direction = 1;
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
					direction = -1;
				}
			}
			if (base.velocity.HasNaNs())
			{
				Kill();
			}
			timeLeft = 6;
			float num7 = 10f;
			float num8 = 10f;
			float num9 = 3f;
			float num10 = 200f;
			num10 = ProjectileID.Sets.YoyosMaximumRange[type];
			num8 = ProjectileID.Sets.YoyosTopSpeed[type];
			if (type == 545)
			{
				if (Main.rand.Next(6) == 0)
				{
					int num11 = Dust.NewDust(position, width, height, 6);
					Main.dust[num11].noGravity = true;
				}
			}
			else if (type == 553 && Main.rand.Next(2) == 0)
			{
				int num12 = Dust.NewDust(position, width, height, 6);
				Main.dust[num12].noGravity = true;
				Main.dust[num12].scale = 1.6f;
			}
			if (Main.player[owner].yoyoString)
			{
				num10 = num10 * 1.25f + 30f;
			}
			num10 /= (1f + Main.player[owner].meleeSpeed * 3f) / 4f;
			num8 /= (1f + Main.player[owner].meleeSpeed * 3f) / 4f;
			num7 = 14f - num8 / 2f;
			if (num7 < 1f)
			{
				num7 = 1f;
			}
			num9 = 5f + num8 / 2f;
			if (flag)
			{
				num9 += 20f;
			}
			if (ai[0] >= 0f)
			{
				if (base.velocity.Length() > num8)
				{
					base.velocity *= 0.98f;
				}
				bool flag3 = false;
				bool flag4 = false;
				Vector2 vector2 = Main.player[owner].Center - base.Center;
				if (vector2.Length() > num10)
				{
					flag3 = true;
					if ((double)vector2.Length() > (double)num10 * 1.3)
					{
						flag4 = true;
					}
				}
				if (owner == Main.myPlayer)
				{
					if (!Main.player[owner].channel || Main.player[owner].stoned || Main.player[owner].frozen)
					{
						ai[0] = -1f;
						ai[1] = 0f;
						netUpdate = true;
					}
					else
					{
						Vector2 vector3 = Main.ReverseGravitySupport(Main.MouseScreen) + Main.screenPosition;
						float x = vector3.X;
						float y = vector3.Y;
						Vector2 value = new Vector2(x, y) - Main.player[owner].Center;
						if (value.Length() > num10)
						{
							value.Normalize();
							value *= num10;
							value = Main.player[owner].Center + value;
							x = value.X;
							y = value.Y;
						}
						if (ai[0] != x || ai[1] != y)
						{
							Vector2 value2 = new Vector2(x, y) - Main.player[owner].Center;
							if (value2.Length() > num10 - 1f)
							{
								value2.Normalize();
								value2 *= num10 - 1f;
								Vector2 vector4 = Main.player[owner].Center + value2;
								x = vector4.X;
								y = vector4.Y;
							}
							ai[0] = x;
							ai[1] = y;
							netUpdate = true;
						}
					}
				}
				if (flag4 && owner == Main.myPlayer)
				{
					ai[0] = -1f;
					netUpdate = true;
				}
				if (ai[0] >= 0f)
				{
					if (flag3)
					{
						num7 /= 2f;
						num8 *= 2f;
						if (base.Center.X > Main.player[owner].Center.X && base.velocity.X > 0f)
						{
							base.velocity.X *= 0.5f;
						}
						if (base.Center.Y > Main.player[owner].Center.Y && base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.5f;
						}
						if (base.Center.X < Main.player[owner].Center.X && base.velocity.X < 0f)
						{
							base.velocity.X *= 0.5f;
						}
						if (base.Center.Y < Main.player[owner].Center.Y && base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.5f;
						}
					}
					Vector2 value3 = new Vector2(ai[0], ai[1]) - base.Center;
					if (flag3)
					{
						num7 = 1f;
					}
					base.velocity.Length();
					float num13 = value3.Length();
					if (num13 > num9)
					{
						value3.Normalize();
						float num14 = Math.Min(num13 / 2f, num8);
						if (flag3)
						{
							num14 = Math.Min(num14, num8 / 2f);
						}
						value3 *= num14;
						base.velocity = (base.velocity * (num7 - 1f) + value3) / num7;
					}
					else if (flag)
					{
						if ((double)base.velocity.Length() < (double)num8 * 0.6)
						{
							value3 = base.velocity;
							value3.Normalize();
							value3 *= num8 * 0.6f;
							base.velocity = (base.velocity * (num7 - 1f) + value3) / num7;
						}
					}
					else
					{
						base.velocity *= 0.8f;
					}
					if (flag && !flag3 && (double)base.velocity.Length() < (double)num8 * 0.6)
					{
						base.velocity.Normalize();
						base.velocity *= num8 * 0.6f;
					}
				}
			}
			else
			{
				num7 = (int)((double)num7 * 0.8);
				num8 *= 1.5f;
				tileCollide = false;
				Vector2 value4 = Main.player[owner].Center - base.Center;
				float num15 = value4.Length();
				if (num15 < num8 + 10f || num15 == 0f || num15 > 2000f)
				{
					Kill();
				}
				else
				{
					value4.Normalize();
					value4 *= num8;
					base.velocity = (base.velocity * (num7 - 1f) + value4) / num7;
				}
			}
			rotation += 0.45f;
		}

		private void AI_130_FlameBurstTower()
		{
			float num = 900f;
			float angleRatioMax = 1f;
			Vector2 vector = base.Center;
			int num2 = 664;
			int num3 = 12;
			float num4 = 12f;
			int num5 = 1;
			int num6 = 6;
			int num7 = 4;
			int num8 = 80;
			switch (type)
			{
			case 663:
			{
				Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f));
				Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f));
				vector = base.Bottom + new Vector2(direction * 6, -40f);
				if ((localAI[0] += 1f) >= 300f)
				{
					localAI[0] = 0f;
				}
				Rectangle r3 = new Rectangle((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 3, 6);
				if (direction == 1)
				{
					r3.X -= width / 4;
				}
				for (int m = 0; m < 1; m++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust dust5 = Dust.NewDustDirect(r3.TopLeft() + new Vector2(-2f, -2f), r3.Width + 4, r3.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
						dust5.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
						dust5.scale = 0.4f;
						dust5.noGravity = true;
						dust5.noLight = true;
						dust5.velocity = Vector2.Zero;
						dust5.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust5.fadeIn;
					}
				}
				r3 = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
				if (direction == -1)
				{
					r3.X -= r3.Width;
				}
				r3.X += direction * 4;
				r3.Y -= height - 10;
				for (int n = 0; n < 1; n++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust6 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 6);
						dust6.fadeIn = 1f;
						dust6.scale = 1f;
						dust6.noGravity = true;
						dust6.noLight = true;
						dust6.velocity *= 2f;
					}
				}
				break;
			}
			case 665:
			{
				Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
				Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
				num8 = 70;
				num4 += 3f;
				num6 = 8;
				num2 = 666;
				vector = base.Bottom + new Vector2(direction * 6, -44f);
				if ((localAI[0] += 1f) >= 300f)
				{
					localAI[0] = 0f;
				}
				Rectangle r2 = new Rectangle((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 2, 6);
				if (direction == 1)
				{
					r2.X -= width / 4;
				}
				for (int k = 0; k < 1; k++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust dust3 = Dust.NewDustDirect(r2.TopLeft() + new Vector2(-2f, -2f), r2.Width + 4, r2.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
						dust3.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
						dust3.scale = 0.4f;
						dust3.noGravity = true;
						dust3.noLight = true;
						dust3.velocity = Vector2.Zero;
						dust3.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust3.fadeIn;
					}
				}
				r2 = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
				if (direction == -1)
				{
					r2.X -= r2.Width;
				}
				r2.X += direction * 4;
				r2.Y -= height - 10;
				for (int l = 0; l < 2; l++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust4 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 6);
						dust4.fadeIn = 1f;
						dust4.scale = 1f;
						dust4.noGravity = true;
						dust4.noLight = true;
						dust4.velocity *= 2f;
					}
				}
				break;
			}
			case 667:
			{
				Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
				Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
				num8 = 60;
				num4 += 6f;
				num6 = 8;
				num2 = 668;
				vector = base.Bottom + new Vector2(direction * 6, -46f);
				if ((localAI[0] += 1f) >= 300f)
				{
					localAI[0] = 0f;
				}
				Rectangle r = new Rectangle((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 2, 6);
				if (direction == 1)
				{
					r.X -= width / 4;
				}
				for (int i = 0; i < 1; i++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust dust = Dust.NewDustDirect(r.TopLeft() + new Vector2(-2f, -2f), r.Width + 4, r.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
						dust.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
						dust.scale = 0.4f;
						dust.noGravity = true;
						dust.noLight = true;
						dust.velocity = Vector2.Zero;
						dust.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust.fadeIn;
					}
				}
				r = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
				if (direction == -1)
				{
					r.X -= r.Width;
				}
				r.X += direction * 4;
				r.Y -= height - 10;
				for (int j = 0; j < 3; j++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust2 = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 6);
						dust2.fadeIn = 1.1f;
						dust2.scale = 1f;
						dust2.noGravity = true;
						dust2.noLight = true;
						dust2.velocity *= 2.4f;
					}
				}
				break;
			}
			}
			if (Main.player[owner].setApprenticeT2)
			{
				angleRatioMax = 0.1f;
				num *= 1.5f;
				num4 *= 1.4f;
			}
			if (ai[0] == 0f)
			{
				direction = (spriteDirection = Main.player[owner].direction);
				ai[0] = 1f;
				ai[1] = 0f;
				netUpdate = true;
			}
			if (ai[0] == 1f)
			{
				frame = 0;
				bool flag = false;
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				else
				{
					flag = true;
				}
				if (flag && owner == Main.myPlayer)
				{
					int num9 = AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector);
					if (num9 != -1)
					{
						direction = Math.Sign(DirectionTo(Main.npc[num9].Center).X);
						ai[0] = 2f;
						ai[1] = 0f;
						netUpdate = true;
					}
				}
			}
			else if (ai[0] == 2f)
			{
				frame = num5 + (int)(ai[1] / (float)num7);
				if (ai[1] == (float)num3)
				{
					Vector2 value = new Vector2(direction, 0f);
					int num10 = AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector, canChangeDirection: false);
					if (num10 != -1)
					{
						value = (Main.npc[num10].Center - vector).SafeNormalize(Vector2.UnitX * direction);
					}
					Vector2 velocity = value * num4;
					if (owner == Main.myPlayer)
					{
						NewProjectile(vector, velocity, num2, damage, knockBack, owner);
					}
				}
				if ((ai[1] += 1f) >= (float)(num6 * num7))
				{
					ai[0] = 1f;
					ai[1] = num8;
				}
			}
			spriteDirection = direction;
			tileCollide = true;
			base.velocity.Y += 0.2f;
		}

		private int AI_130_FlameBurstTower_FindTarget(float shot_range, float angleRatioMax, Vector2 shootingSpot, bool canChangeDirection = true)
		{
			int num = -1;
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
			{
				for (int i = 0; i < 1; i++)
				{
					if (!ownerMinionAttackTargetNPC.CanBeChasedBy(this))
					{
						continue;
					}
					float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
					if (!(num2 > shot_range))
					{
						Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
						if (!(Math.Abs(vector.X) < Math.Abs(vector.Y) * angleRatioMax) && (canChangeDirection || !((float)direction * vector.X < 0f)) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
						{
							num = ownerMinionAttackTargetNPC.whoAmI;
						}
					}
				}
				if (num != -1)
				{
					return num;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				NPC nPC = Main.npc[j];
				if (!nPC.CanBeChasedBy(this))
				{
					continue;
				}
				float num3 = Vector2.Distance(shootingSpot, nPC.Center);
				if (!(num3 > shot_range))
				{
					Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
					if (!(Math.Abs(vector2.X) < Math.Abs(vector2.Y) * angleRatioMax) && (canChangeDirection || !((float)direction * vector2.X < 0f)) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
					{
						num = j;
					}
				}
			}
			return num;
		}

		private int AI_134_Ballista_FindTarget(float shot_range, float deadBottomAngle, Vector2 shootingSpot)
		{
			int num = -1;
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
			{
				for (int i = 0; i < 1; i++)
				{
					if (!ownerMinionAttackTargetNPC.CanBeChasedBy(this))
					{
						continue;
					}
					float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
					if (!(num2 > shot_range))
					{
						Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
						if ((!(Math.Abs(vector.X) < Math.Abs(vector.Y) * deadBottomAngle) || !(vector.Y > 0f)) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
						{
							num = ownerMinionAttackTargetNPC.whoAmI;
						}
					}
				}
				if (num != -1)
				{
					return num;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				NPC nPC = Main.npc[j];
				if (!nPC.CanBeChasedBy(this))
				{
					continue;
				}
				float num3 = Vector2.Distance(shootingSpot, nPC.Center);
				if (!(num3 > shot_range))
				{
					Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
					if ((!(Math.Abs(vector2.X) < Math.Abs(vector2.Y) * deadBottomAngle) || !(vector2.Y > 0f)) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
					{
						num = j;
					}
				}
			}
			return num;
		}

		private void AI_131_FlameBurstShot()
		{
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			if (type != 664 && type != 666 && type != 668)
			{
				return;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlayTrackedSound(SoundID.DD2_FlameburstTowerShot, base.Center);
			}
			if (alpha > 0)
			{
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			int num = 1;
			if (type == 666)
			{
				num = 2;
			}
			if (type == 668)
			{
				num = 3;
			}
			for (int i = 0; i < num; i++)
			{
				if (Main.rand.Next(2) != 0)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					dust.noGravity = true;
					dust.velocity *= 0.3f;
					if (Main.rand.Next(1) == 0)
					{
						dust.velocity.Y += (float)Math.Sign(dust.velocity.Y) * 1.2f;
						dust.fadeIn += 0.5f;
					}
				}
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		}

		private void AI_134_Ballista()
		{
			//IL_0329: Unknown result type (might be due to invalid IL or missing references)
			float shot_range = 900f;
			float deadBottomAngle = 0.75f;
			Vector2 center = base.Center;
			int num = 680;
			int num2 = 12;
			float scaleFactor = 16f;
			int num3 = 1;
			int num4 = 5;
			int num5 = 5;
			int num6 = 180;
			if (Main.player[owner].setSquireT2)
			{
				scaleFactor = 21f;
			}
			if (Main.player[owner].setSquireT3)
			{
				num6 = 100;
			}
			if (Main.player[owner].ballistaPanic)
			{
				num6 = 60;
			}
			if (Main.player[owner].ballistaPanic && Main.player[owner].setSquireT3)
			{
				num6 = 30;
			}
			num2 = num5;
			int num7 = type;
			if (num7 == 677)
			{
				center.Y -= 4f;
			}
			if (ai[0] == 0f)
			{
				direction = (spriteDirection = Main.player[owner].direction);
				ai[0] = 1f;
				ai[1] = 0f;
				netUpdate = true;
				if (direction == -1)
				{
					rotation = (float)Math.PI;
				}
			}
			if (ai[0] == 1f)
			{
				frame = 0;
				bool flag = false;
				if (Main.player[owner].ballistaPanic && ai[1] > 60f)
				{
					ai[1] = 60f;
				}
				if (Main.player[owner].ballistaPanic && Main.player[owner].setSquireT3 && ai[1] > 30f)
				{
					ai[1] = 30f;
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				else
				{
					flag = true;
				}
				int num8 = AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
				if (num8 != -1)
				{
					Vector2 vector = (vector = (Main.npc[num8].Center - center).SafeNormalize(Vector2.UnitY));
					rotation = rotation.AngleLerp(vector.ToRotation(), 0.08f);
					if (rotation > (float)Math.PI / 2f || rotation < -(float)Math.PI / 2f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					if (flag && owner == Main.myPlayer)
					{
						direction = Math.Sign(vector.X);
						ai[0] = 2f;
						ai[1] = 0f;
						netUpdate = true;
					}
				}
				else
				{
					float targetAngle = 0f;
					if (direction == -1)
					{
						targetAngle = (float)Math.PI;
					}
					rotation = rotation.AngleLerp(targetAngle, 0.05f);
				}
			}
			else if (ai[0] == 2f)
			{
				frame = num3 + (int)(ai[1] / (float)num5);
				if (ai[1] == (float)num2)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_BallistaTowerShot, base.Center);
					Vector2 vector2 = new Vector2(direction, 0f);
					int num9 = AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
					if (num9 != -1)
					{
						vector2 = (Main.npc[num9].Center - center).SafeNormalize(Vector2.UnitX * direction);
					}
					rotation = vector2.ToRotation();
					if (rotation > (float)Math.PI / 2f || rotation < -(float)Math.PI / 2f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					Vector2 velocity = vector2 * scaleFactor;
					if (owner == Main.myPlayer)
					{
						NewProjectile(center, velocity, num, damage, knockBack, owner);
					}
				}
				if ((ai[1] += 1f) >= (float)(num4 * num5))
				{
					ai[0] = 1f;
					ai[1] = num6;
				}
			}
			spriteDirection = direction;
			tileCollide = true;
			base.velocity.Y += 0.2f;
		}

		private void AI_135_OgreStomp()
		{
			float num = 40f;
			if (type == 922)
			{
				num = 30f;
			}
			ai[0] += 1f;
			if (ai[0] > 9f)
			{
				Kill();
				return;
			}
			velocity = Vector2.Zero;
			position = base.Center;
			base.Size = new Vector2(16f, 16f) * MathHelper.Lerp(5f, num, Utils.GetLerpValue(0f, 9f, ai[0]));
			base.Center = position;
			Point point = base.TopLeft.ToTileCoordinates();
			Point point2 = base.BottomRight.ToTileCoordinates();
			int num2 = point.X / 2 + point2.X / 2;
			int num3 = width / 2;
			if ((int)ai[0] % 3 != 0)
			{
				return;
			}
			int num4 = (int)ai[0] / 3;
			for (int i = point.X; i <= point2.X; i++)
			{
				for (int j = point.Y; j <= point2.Y; j++)
				{
					if (Vector2.Distance(base.Center, new Vector2(i * 16, j * 16)) > (float)num3)
					{
						continue;
					}
					Tile tileSafely = Framing.GetTileSafely(i, j);
					if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
					{
						continue;
					}
					Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
					if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
					{
						continue;
					}
					int num5 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
					for (int k = 0; k < num5; k++)
					{
						Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
						obj.velocity.Y -= 3f + (float)num4 * 1.5f;
						obj.velocity.Y *= Main.rand.NextFloat();
						obj.velocity.Y *= 0.75f;
						obj.scale += (float)num4 * 0.03f;
					}
					if (num4 >= 2)
					{
						if (type == 922)
						{
							Color newColor = NPC.AI_121_QueenSlime_GetDustColor();
							newColor.A = 150;
							for (int l = 0; l < num5 - 1; l++)
							{
								int num6 = Dust.NewDust(position, 12, 12, 4, 0f, 0f, 50, newColor, 1.5f);
								Main.dust[num6].velocity.Y -= 0.1f + (float)num4 * 0.5f;
								Main.dust[num6].velocity.Y *= Main.rand.NextFloat();
								Main.dust[num6].velocity.X *= Main.rand.NextFloatDirection() * 3f;
								Main.dust[num6].position = new Vector2(i * 16 + Main.rand.Next(16), j * 16 + Main.rand.Next(16));
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num6].velocity *= 0.5f;
									Main.dust[num6].noGravity = true;
								}
							}
						}
						else
						{
							for (int m = 0; m < num5 - 1; m++)
							{
								Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
								obj2.velocity.Y -= 1f + (float)num4;
								obj2.velocity.Y *= Main.rand.NextFloat();
								obj2.velocity.Y *= 0.75f;
							}
						}
					}
					if (num5 <= 0 || Main.rand.Next(3) == 0)
					{
						continue;
					}
					float num7 = (float)Math.Abs(num2 - i) / (num / 2f);
					if (type == 922)
					{
						Color newColor2 = NPC.AI_121_QueenSlime_GetDustColor();
						newColor2.A = 150;
						for (int n = 0; n < 3; n++)
						{
							int num8 = Dust.NewDust(position, width, height, 31, 0f, 0f, 50, newColor2, 2f - (float)num4 * 0.15f + num7 * 0.5f);
							Main.dust[num8].velocity.Y -= 0.1f + (float)num4 * 0.5f + num7 * (float)num4 * 1f;
							Main.dust[num8].velocity.Y *= Main.rand.NextFloat();
							Main.dust[num8].velocity.X *= Main.rand.NextFloatDirection() * 3f;
							Main.dust[num8].position = new Vector2(i * 16 + 20, j * 16 + 20);
							if (Main.rand.Next(3) != 0)
							{
								Main.dust[num8].velocity *= 0.5f;
								Main.dust[num8].noGravity = true;
							}
						}
					}
					else
					{
						Gore gore = Gore.NewGoreDirect(position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num4 * 0.15f + num7 * 0.5f);
						gore.velocity.Y -= 0.1f + (float)num4 * 0.5f + num7 * (float)num4 * 1f;
						gore.velocity.Y *= Main.rand.NextFloat();
						gore.position = new Vector2(i * 16 + 20, j * 16 + 20);
					}
				}
			}
		}

		private void AI_136_BetsyBreath()
		{
			if (ai[1] < 0f || ai[1] > 200f)
			{
				Kill();
				return;
			}
			NPC nPC = Main.npc[(int)ai[1]];
			float num = -8f;
			Vector2 vector2 = (base.Center = nPC.Center + new Vector2((110f + num) * (float)nPC.spriteDirection, 30f).RotatedBy(nPC.rotation));
			rotation = nPC.DirectionTo(base.Center).ToRotation();
			DelegateMethods.v3_1 = new Vector3(1.2f, 1f, 0.3f);
			float num2 = ai[0] / 40f;
			if (num2 > 1f)
			{
				num2 = 1f;
			}
			float num3 = (ai[0] - 38f) / 40f;
			if (num3 < 0f)
			{
				num3 = 0f;
			}
			Utils.PlotTileLine(base.Center + rotation.ToRotationVector2() * 400f * num3, base.Center + rotation.ToRotationVector2() * 400f * num2, 16f, DelegateMethods.CastLight);
			Utils.PlotTileLine(base.Center + rotation.ToRotationVector2().RotatedBy(0.19634954631328583) * 400f * num3, base.Center + rotation.ToRotationVector2().RotatedBy(0.19634954631328583) * 400f * num2, 16f, DelegateMethods.CastLight);
			Utils.PlotTileLine(base.Center + rotation.ToRotationVector2().RotatedBy(-0.19634954631328583) * 400f * num3, base.Center + rotation.ToRotationVector2().RotatedBy(-0.19634954631328583) * 400f * num2, 16f, DelegateMethods.CastLight);
			if (num3 == 0f && num2 > 0.1f)
			{
				for (int i = 0; i < 3; i++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 6);
					dust.fadeIn = 1.5f;
					dust.velocity = rotation.ToRotationVector2().RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 12f)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
					dust.velocity += nPC.velocity * 2f;
					dust.noLight = true;
					dust.noGravity = true;
					dust.alpha = 200;
				}
			}
			if (Main.rand.Next(5) == 0 && ai[0] >= 15f)
			{
				Gore gore = Gore.NewGoreDirect(base.Center + rotation.ToRotationVector2() * 300f - Utils.RandomVector2(Main.rand, -20f, 20f), Vector2.Zero, 61 + Main.rand.Next(3), 0.5f);
				gore.velocity *= 0.3f;
				gore.velocity += rotation.ToRotationVector2() * 4f;
			}
			for (int j = 0; j < 1; j++)
			{
				Dust dust2 = Dust.NewDustDirect(position, width, height, 31);
				dust2.fadeIn = 1.5f;
				dust2.scale = 0.4f;
				dust2.velocity = rotation.ToRotationVector2().RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 12f)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
				dust2.velocity += nPC.velocity * 2f;
				dust2.velocity *= 0.3f;
				dust2.noLight = true;
				dust2.noGravity = true;
				float num4 = Main.rand.NextFloat();
				dust2.position = Vector2.Lerp(base.Center + rotation.ToRotationVector2() * 400f * num3, base.Center + rotation.ToRotationVector2() * 400f * num2, num4);
				dust2.position += rotation.ToRotationVector2().RotatedBy(1.5707963705062866) * (20f + 100f * (num4 - 0.5f));
			}
			frameCounter++;
			ai[0] += 1f;
			if (ai[0] >= 78f)
			{
				Kill();
			}
		}

		private void AI_137_LightningAura()
		{
			//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
			int num = 10;
			int num2 = 999;
			int num3 = 30;
			int num4 = 40;
			int num5 = 4;
			knockBack = 0f;
			if (Main.player[owner].setMonkT2)
			{
				num3 -= 5;
			}
			if (Main.player[owner].setMonkT3)
			{
				num = 14;
				num5 = 8;
			}
			ai[0] += 1f;
			if (ai[0] >= (float)num3)
			{
				ai[0] = 0f;
			}
			if (ai[0] == 0f)
			{
				bool flag = false;
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.CanBeChasedBy(this) && nPC.Hitbox.Distance(base.Center) < (float)(width / 2) && Colliding(base.Hitbox, nPC.Hitbox))
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_LightningAuraZap, base.Center);
				}
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				velocity = Vector2.Zero;
				Point origin = base.Center.ToTileCoordinates();
				bool flag2 = true;
				if (!WorldUtils.Find(origin, Searches.Chain(new Searches.Down(500), _cachedConditions_notNull, _cachedConditions_solid), out var result))
				{
					flag2 = false;
					position.Y += 16f;
					return;
				}
				if (!WorldUtils.Find(new Point(result.X, result.Y - 1), Searches.Chain(new Searches.Up(num), _cachedConditions_notNull, _cachedConditions_solid), out var result2))
				{
					result2 = new Point(origin.X, origin.Y - num - 1);
				}
				int num6 = 0;
				if (flag2 && Main.tile[result.X, result.Y] != null && Main.tile[result.X, result.Y].blockType() == 1)
				{
					num6 += 8;
				}
				Vector2 center = result.ToWorldCoordinates(8f, num6);
				Vector2 vector = result2.ToWorldCoordinates(8f, 0f);
				base.Size = new Vector2(1f, center.Y - vector.Y);
				if (height > num * 16)
				{
					height = num * 16;
				}
				if (height < num5 * 16)
				{
					height = num5 * 16;
				}
				height *= 2;
				width = (int)((float)height * 1f);
				if (width > num2)
				{
					width = num2;
				}
				base.Center = center;
			}
			if (++frameCounter >= 8)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			DelegateMethods.v3_1 = new Vector3(0.2f, 0.7f, 1f);
			Utils.PlotTileLine(base.Center + Vector2.UnitX * -40f, base.Center + Vector2.UnitX * 40f, 80f, DelegateMethods.CastLightOpen);
			Vector2 value = new Vector2(base.Top.X, position.Y + (float)num4);
			for (int j = 0; j < 4; j++)
			{
				if (Main.rand.Next(6) != 0)
				{
					continue;
				}
				Vector2 value2 = Main.rand.NextVector2Unit();
				if (!(Math.Abs(value2.X) < 0.12f))
				{
					Vector2 vector2 = base.Center + value2 * new Vector2((height - num4) / 2);
					if (!WorldGen.SolidTile((int)vector2.X / 16, (int)vector2.Y / 16) && AI_137_CanHit(vector2))
					{
						Dust dust = Dust.NewDustDirect(vector2, 0, 0, 226, 0f, 0f, 100);
						dust.position = vector2;
						dust.velocity = (value - dust.position).SafeNormalize(Vector2.Zero);
						dust.scale = 0.7f;
						dust.fadeIn = 1f;
						dust.noGravity = true;
						dust.noLight = true;
					}
				}
			}
			for (int k = 0; k < 0; k++)
			{
				if (Main.rand.Next(10) != 0)
				{
					continue;
				}
				Vector2 value3 = Main.rand.NextVector2Unit();
				if (!(Math.Abs(value3.X) < 0.12f))
				{
					Vector2 vector3 = base.Center + value3 * new Vector2((height - num4) / 2) * Main.rand.NextFloat();
					if (!WorldGen.SolidTile((int)vector3.X / 16, (int)vector3.Y / 16) && AI_137_CanHit(vector3))
					{
						Dust dust2 = Dust.NewDustDirect(vector3, 0, 0, 226, 0f, 0f, 100);
						dust2.velocity *= 0.6f;
						dust2.velocity += Vector2.UnitY * -2f;
						dust2.noGravity = true;
						dust2.noLight = true;
					}
				}
			}
			for (int l = 0; l < 4; l++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(value - new Vector2(8f, 0f), 16, height / 2 - 40, 226, 0f, 0f, 100);
					dust3.velocity *= 0.6f;
					dust3.velocity += Vector2.UnitY * -2f;
					dust3.scale = 0.7f;
					dust3.noGravity = true;
					dust3.noLight = true;
				}
			}
			tileCollide = true;
			velocity.Y += 0.2f;
		}

		private void AI_138_ExplosiveTrap()
		{
			//IL_0190: Unknown result type (might be due to invalid IL or missing references)
			spriteDirection = (direction = 1);
			int num = 110;
			int num2 = 694;
			int num3 = 48;
			if (Main.player[owner].setHuntressT2)
			{
				num = 74;
			}
			if (Main.player[owner].setHuntressT3)
			{
				num = 40;
			}
			switch (type)
			{
			case 692:
				num2 = 695;
				break;
			case 693:
				num2 = 696;
				break;
			}
			Lighting.AddLight(base.Center, 0.6f, 0.5f, 0.3f);
			if (++frameCounter >= 12)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (localAI[0] <= 0f && owner == Main.myPlayer)
			{
				localAI[0] = 3f;
				bool flag = false;
				Rectangle rectangle = Utils.CenteredRectangle(base.Center + new Vector2(0f, -num3), new Vector2(num3 * 2));
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.CanBeChasedBy(this) && rectangle.Intersects(nPC.Hitbox))
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_ExplosiveTrapExplode);
					localAI[0] = num;
					NewProjectile(base.Center + new Vector2(0f, -num3), Vector2.Zero, num2, damage, knockBack, owner);
				}
			}
			tileCollide = true;
			velocity.Y += 0.2f;
		}

		private void AI_139_ExplosiveTrapExplosion()
		{
			int num = Main.projFrames[type];
			int num2 = 3;
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
			}
			if (++frameCounter >= num2)
			{
				frameCounter = 0;
				if (++frame >= num)
				{
					Kill();
					return;
				}
			}
			DelegateMethods.v3_1 = new Vector3(1.3f, 0.9f, 0.2f);
			Utils.PlotTileLine(base.Top, base.Bottom, 2f, DelegateMethods.CastLightOpen);
		}

		private void AI_140_MonkStaffT1()
		{
			//IL_04fa: Unknown result type (might be due to invalid IL or missing references)
			//IL_050d: Unknown result type (might be due to invalid IL or missing references)
			float num = 50f;
			float num2 = 2f;
			float scaleFactor = 20f;
			Player player = Main.player[owner];
			float num3 = -(float)Math.PI / 4f;
			Vector2 value = player.RotatedRelativePoint(player.MountedCenter);
			Vector2 vector = Vector2.Zero;
			if (player.dead)
			{
				Kill();
				return;
			}
			if (type == 697)
			{
				int num4 = damage * 3;
				int num5 = Math.Sign(velocity.X);
				velocity = new Vector2(num5, 0f);
				if (ai[0] == 0f)
				{
					rotation = new Vector2(num5, 0f - player.gravDir).ToRotation() + num3 + (float)Math.PI;
					if (velocity.X < 0f)
					{
						rotation -= (float)Math.PI / 2f;
					}
				}
				alpha -= 128;
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num6 = ai[0] / num;
				float num7 = 1f;
				ai[0] += num7;
				rotation += (float)Math.PI * 2f * num2 / num * (float)num5;
				bool flag = ai[0] == (float)(int)(num / 2f);
				if (ai[0] >= num || (flag && !player.controlUseItem))
				{
					Kill();
					player.reuseDelay = 10;
				}
				else if (flag)
				{
					Vector2 mouseWorld = Main.MouseWorld;
					int num8 = ((player.DirectionTo(mouseWorld).X > 0f) ? 1 : (-1));
					if ((float)num8 != velocity.X)
					{
						player.ChangeDir(num8);
						velocity = new Vector2(num8, 0f);
						netUpdate = true;
						rotation -= (float)Math.PI;
					}
				}
				float num9 = rotation - (float)Math.PI / 4f * (float)num5;
				vector = (num9 + ((num5 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * (ai[0] / num) * scaleFactor;
				Vector2 vector2 = base.Center + (num9 + ((num5 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * 30f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust = Dust.NewDustDirect(vector2 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150);
					dust.velocity = DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
				}
				if (num6 >= 0.75f)
				{
					Dust dust2 = Dust.NewDustDirect(vector2 - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50);
					dust2.velocity = DirectionTo(dust2.position) * 0.1f + dust2.velocity * 0.1f;
					dust2.noGravity = true;
					dust2.color = new Color(20, 255, 100, 160);
				}
				if (ai[0] >= num - 8f && ai[0] < num - 2f)
				{
					for (int i = 0; i < 5; i++)
					{
						Dust dust3 = Dust.NewDustDirect(vector2 - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50);
						dust3.velocity *= 1.2f;
						dust3.noGravity = true;
						dust3.scale += 0.1f;
						dust3.color = new Color(20, 255, 100, 160);
					}
				}
				if (ai[0] == num - 3f && owner == Main.myPlayer)
				{
					if (localAI[1] == 1f || WorldUtils.Find(vector2.ToTileCoordinates(), Searches.Chain(new Searches.Down(4), _cachedConditions_notNull, _cachedConditions_solid), out var _))
					{
						NewProjectile(vector2 + new Vector2(num5 * 20, -60f), Vector2.Zero, 698, num4, 0f, owner);
						SoundEngine.PlayTrackedSound(SoundID.DD2_MonkStaffGroundImpact, base.Center);
					}
					else
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_MonkStaffGroundMiss, base.Center);
					}
				}
			}
			if (type == 707)
			{
				Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
				int num10 = Math.Sign(velocity.X);
				velocity = new Vector2(num10, 0f);
				if (ai[0] == 0f)
				{
					rotation = new Vector2(num10, 0f - player.gravDir).ToRotation() + num3 + (float)Math.PI;
					if (velocity.X < 0f)
					{
						rotation -= (float)Math.PI / 2f;
					}
				}
				alpha -= 128;
				if (alpha < 0)
				{
					alpha = 0;
				}
				_ = ai[0] / num;
				float num11 = 1f;
				ai[0] += num11;
				rotation += (float)Math.PI * 2f * num2 / num * (float)num10;
				bool flag2 = ai[0] == (float)(int)(num / 2f);
				if (ai[0] >= num || (flag2 && !player.controlUseItem))
				{
					Kill();
					player.reuseDelay = 2;
				}
				else if (flag2)
				{
					Vector2 mouseWorld2 = Main.MouseWorld;
					int num12 = ((player.DirectionTo(mouseWorld2).X > 0f) ? 1 : (-1));
					if ((float)num12 != velocity.X)
					{
						player.ChangeDir(num12);
						velocity = new Vector2(num12, 0f);
						netUpdate = true;
						rotation -= (float)Math.PI;
					}
				}
				if ((ai[0] == num11 || (ai[0] == (float)(int)(num / 2f) && active)) && owner == Main.myPlayer)
				{
					Vector2 mouseWorld3 = Main.MouseWorld;
					_ = player.DirectionTo(mouseWorld3) * 0f;
				}
				float num13 = rotation - (float)Math.PI / 4f * (float)num10;
				vector = (num13 + ((num10 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * (ai[0] / num) * scaleFactor;
				Vector2 value2 = base.Center + (num13 + ((num10 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * 30f;
				Vector2 vector3 = num13.ToRotationVector2();
				Vector2 value3 = vector3.RotatedBy((float)Math.PI / 2f * (float)spriteDirection);
				if (Main.rand.Next(2) == 0)
				{
					Dust dust4 = Dust.NewDustDirect(value2 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150);
					dust4.velocity = DirectionTo(dust4.position) * 0.1f + dust4.velocity * 0.1f;
				}
				for (int j = 0; j < 4; j++)
				{
					float scaleFactor2 = 1f;
					float scaleFactor3 = 1f;
					switch (j)
					{
					case 1:
						scaleFactor3 = -1f;
						break;
					case 2:
						scaleFactor3 = 1.25f;
						scaleFactor2 = 0.5f;
						break;
					case 3:
						scaleFactor3 = -1.25f;
						scaleFactor2 = 0.5f;
						break;
					}
					if (Main.rand.Next(6) != 0)
					{
						Dust dust5 = Dust.NewDustDirect(position, 0, 0, 226, 0f, 0f, 100);
						dust5.position = base.Center + vector3 * (60f + Main.rand.NextFloat() * 20f) * scaleFactor3;
						dust5.velocity = value3 * (4f + 4f * Main.rand.NextFloat()) * scaleFactor3 * scaleFactor2;
						dust5.noGravity = true;
						dust5.noLight = true;
						dust5.scale = 0.5f;
						dust5.customData = this;
						if (Main.rand.Next(4) == 0)
						{
							dust5.noGravity = false;
						}
					}
				}
			}
			position = value - base.Size / 2f;
			position += vector;
			spriteDirection = direction;
			timeLeft = 2;
			player.ChangeDir(direction);
			player.heldProj = whoAmI;
			player.SetDummyItemTime(2);
			player.itemRotation = MathHelper.WrapAngle(rotation);
		}

		private void AI_141_MonkStaffT1Explosion()
		{
			Point scanAreaStart = base.TopLeft.ToTileCoordinates();
			Point scanAreaEnd = base.BottomRight.ToTileCoordinates();
			_ = scanAreaStart.X / 2;
			_ = scanAreaEnd.X / 2;
			int width = base.width;
			ai[0] += 1f;
			if (ai[0] > 20f)
			{
				Kill();
			}
			else if (ai[0] == 1f)
			{
				CreateImpactExplosion(6, base.Bottom, scanAreaStart, scanAreaEnd, width, out var causedShockwaves);
				CreateImpactExplosion2_SleepyOctopod(base.Bottom, causedShockwaves);
			}
		}

		private void CreateImpactExplosion(int dustAmountMultiplier, Vector2 explosionOrigin, Point scanAreaStart, Point scanAreaEnd, int explosionRange, out bool causedShockwaves)
		{
			causedShockwaves = false;
			int num = 4;
			for (int i = scanAreaStart.X; i <= scanAreaEnd.X; i++)
			{
				for (int j = scanAreaStart.Y; j <= scanAreaEnd.Y; j++)
				{
					if (Vector2.Distance(explosionOrigin, new Vector2(i * 16, j * 16)) > (float)explosionRange)
					{
						continue;
					}
					Tile tileSafely = Framing.GetTileSafely(i, j);
					if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
					{
						continue;
					}
					Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
					if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
					{
						continue;
					}
					int num2 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely) * dustAmountMultiplier;
					for (int k = 0; k < num2; k++)
					{
						Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
						obj.velocity.Y -= 3f + (float)num * 1.5f;
						obj.velocity.Y *= Main.rand.NextFloat();
						obj.scale += (float)num * 0.03f;
					}
					if (num >= 2)
					{
						for (int l = 0; l < num2 - 1; l++)
						{
							Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
							obj2.velocity.Y -= 1f + (float)num;
							obj2.velocity.Y *= Main.rand.NextFloat();
						}
					}
					if (num2 > 0)
					{
						causedShockwaves = true;
					}
				}
			}
		}

		private void CreateImpactExplosion2_SleepyOctopod(Vector2 explosionOrigin, bool causedShockwaves)
		{
			Vector2 spinningpoint = new Vector2(7f, 0f);
			Vector2 value = new Vector2(1f, 0.7f);
			Color color = new Color(20, 255, 100, 200);
			for (float num = 0f; num < 25f; num += 1f)
			{
				Vector2 value2 = spinningpoint.RotatedBy(num * ((float)Math.PI * 2f) / 25f) * value;
				Dust dust = Dust.NewDustDirect(position, width, height, 55);
				dust.alpha = 0;
				if (!causedShockwaves)
				{
					dust.alpha = 50;
				}
				dust.color = color;
				dust.position = explosionOrigin + value2;
				dust.velocity.Y -= 3f;
				dust.velocity.X *= 0.5f;
				dust.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
				dust.noLight = true;
			}
			if (!causedShockwaves)
			{
				for (float num2 = 0f; num2 < 25f; num2 += 1f)
				{
					Vector2 value3 = spinningpoint.RotatedBy(num2 * ((float)Math.PI * 2f) / 25f) * value;
					Dust dust2 = Dust.NewDustDirect(position, width, height, 55);
					dust2.alpha = 100;
					dust2.color = color;
					dust2.position = explosionOrigin + value3;
					dust2.velocity.Y -= 5f;
					dust2.velocity.X *= 0.8f;
					dust2.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
					dust2.noLight = true;
				}
			}
		}

		private void CreateImpactExplosion2_FlailTileCollision(Vector2 explosionOrigin, bool causedShockwaves, Vector2 velocityBeforeCollision)
		{
			Vector2 spinningpoint = new Vector2(7f, 0f);
			Vector2 value = new Vector2(1f, 0.7f);
			Color color = Color.White * 0.5f;
			Vector2 value2 = velocityBeforeCollision.SafeNormalize(Vector2.Zero);
			for (float num = 0f; num < 8f; num += 1f)
			{
				Vector2 value3 = spinningpoint.RotatedBy(num * ((float)Math.PI * 2f) / 8f) * value;
				Dust dust = Dust.NewDustDirect(position, width, height, 31);
				dust.alpha = 0;
				if (!causedShockwaves)
				{
					dust.alpha = 50;
				}
				dust.color = color;
				dust.position = explosionOrigin + value3;
				dust.velocity.Y -= 0.8f;
				dust.velocity.X *= 0.8f;
				dust.fadeIn = 0.3f + Main.rand.NextFloat() * 0.4f;
				dust.scale = 0.4f;
				dust.noLight = true;
				dust.velocity += value2 * 2f;
			}
			if (!causedShockwaves)
			{
				for (float num2 = 0f; num2 < 8f; num2 += 1f)
				{
					Vector2 value4 = spinningpoint.RotatedBy(num2 * ((float)Math.PI * 2f) / 8f) * value;
					Dust dust2 = Dust.NewDustDirect(position, width, height, 31);
					dust2.alpha = 100;
					dust2.color = color;
					dust2.position = explosionOrigin + value4;
					dust2.velocity.Y -= 1f;
					dust2.velocity.X *= 0.4f;
					dust2.fadeIn = 0.3f + Main.rand.NextFloat() * 0.4f;
					dust2.scale = 0.4f;
					dust2.noLight = true;
					dust2.velocity += value2 * 1.5f;
				}
			}
		}

		private void AI_142_MonkStaffT2And3()
		{
			Player player = Main.player[owner];
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
			direction = player.direction;
			player.heldProj = whoAmI;
			base.Center = vector;
			if (player.dead)
			{
				Kill();
				return;
			}
			if (!player.frozen)
			{
				if (type == 699)
				{
					spriteDirection = (direction = player.direction);
					Vector2 vector2 = vector;
					alpha -= 127;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (localAI[0] > 0f)
					{
						localAI[0] -= 1f;
					}
					float num = (float)player.itemAnimation / (float)player.itemAnimationMax;
					float num2 = 1f - num;
					float num3 = base.velocity.ToRotation();
					float num4 = base.velocity.Length();
					float num5 = 22f;
					Vector2 spinningpoint = new Vector2(1f, 0f).RotatedBy((float)Math.PI + num2 * ((float)Math.PI * 2f)) * new Vector2(num4, ai[0]);
					position += spinningpoint.RotatedBy(num3) + new Vector2(num4 + num5, 0f).RotatedBy(num3);
					Vector2 target = vector2 + spinningpoint.RotatedBy(num3) + new Vector2(num4 + num5 + 40f, 0f).RotatedBy(num3);
					rotation = vector2.AngleTo(target) + (float)Math.PI / 4f * (float)player.direction;
					if (spriteDirection == -1)
					{
						rotation += (float)Math.PI;
					}
					vector2.DirectionTo(base.Center);
					Vector2 value = vector2.DirectionTo(target);
					Vector2 vector3 = base.velocity.SafeNormalize(Vector2.UnitY);
					float num6 = 2f;
					for (int i = 0; (float)i < num6; i++)
					{
						Dust dust = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110);
						dust.velocity = vector2.DirectionTo(dust.position) * 2f;
						dust.position = base.Center + vector3.RotatedBy(num2 * ((float)Math.PI * 2f) * 2f + (float)i / num6 * ((float)Math.PI * 2f)) * 10f;
						dust.scale = 1f + 0.6f * Main.rand.NextFloat();
						dust.velocity += vector3 * 3f;
						dust.noGravity = true;
					}
					for (int j = 0; j < 1; j++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust dust2 = Dust.NewDustDirect(base.Center, 20, 20, 228, 0f, 0f, 110);
							dust2.velocity = vector2.DirectionTo(dust2.position) * 2f;
							dust2.position = base.Center + value * -110f;
							dust2.scale = 0.45f + 0.4f * Main.rand.NextFloat();
							dust2.fadeIn = 0.7f + 0.4f * Main.rand.NextFloat();
							dust2.noGravity = true;
							dust2.noLight = true;
						}
					}
				}
				else if (type == 708)
				{
					Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
					spriteDirection = (direction = player.direction);
					alpha -= 127;
					if (alpha < 0)
					{
						alpha = 0;
					}
					float num7 = (float)player.itemAnimation / (float)player.itemAnimationMax;
					float num8 = 1f - num7;
					float num9 = base.velocity.ToRotation();
					float num10 = base.velocity.Length();
					float num11 = 22f;
					Vector2 spinningpoint2 = new Vector2(1f, 0f).RotatedBy((float)Math.PI + num8 * ((float)Math.PI * 2f)) * new Vector2(num10, ai[0]);
					position += spinningpoint2.RotatedBy(num9) + new Vector2(num10 + num11, 0f).RotatedBy(num9);
					Vector2 value2 = vector + spinningpoint2.RotatedBy(num9) + new Vector2(num10 + num11 + 40f, 0f).RotatedBy(num9);
					rotation = (value2 - vector).SafeNormalize(Vector2.UnitX).ToRotation() + (float)Math.PI / 4f * (float)player.direction;
					if (spriteDirection == -1)
					{
						rotation += (float)Math.PI;
					}
					(base.Center - vector).SafeNormalize(Vector2.Zero);
					(value2 - vector).SafeNormalize(Vector2.Zero);
					Vector2 vector4 = base.velocity.SafeNormalize(Vector2.UnitY);
					if ((player.itemAnimation == 2 || player.itemAnimation == 6 || player.itemAnimation == 10) && owner == Main.myPlayer)
					{
						Vector2 velocity = vector4 + Main.rand.NextVector2Square(-0.2f, 0.2f);
						velocity *= 12f;
						switch (player.itemAnimation)
						{
						case 2:
							velocity = vector4.RotatedBy(0.38397246599197388);
							break;
						case 6:
							velocity = vector4.RotatedBy(-0.38397246599197388);
							break;
						case 10:
							velocity = vector4.RotatedBy(0.0);
							break;
						}
						velocity *= 10f + (float)Main.rand.Next(4);
						NewProjectile(base.Center, velocity, 709, damage, 0f, owner);
					}
					for (int k = 0; k < 3; k += 2)
					{
						float scaleFactor = 1f;
						float num12 = 1f;
						switch (k)
						{
						case 1:
							num12 = -1f;
							break;
						case 2:
							num12 = 1.25f;
							scaleFactor = 0.5f;
							break;
						case 3:
							num12 = -1.25f;
							scaleFactor = 0.5f;
							break;
						}
						if (Main.rand.Next(6) != 0)
						{
							num12 *= 1.2f;
							Dust dust3 = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 100);
							dust3.velocity = vector4 * (4f + 4f * Main.rand.NextFloat()) * num12 * scaleFactor;
							dust3.noGravity = true;
							dust3.noLight = true;
							dust3.scale = 0.75f;
							dust3.fadeIn = 0.8f;
							dust3.customData = this;
							if (Main.rand.Next(3) == 0)
							{
								dust3.noGravity = false;
								dust3.fadeIn = 0f;
							}
						}
					}
				}
			}
			if (player.itemAnimation == 2)
			{
				Kill();
				player.reuseDelay = 2;
			}
		}

		private void AI_143_MonkStaffT2Ghast()
		{
			//IL_0021: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			SlotId val;
			if (ai[0] == 0f)
			{
				float[] array = localAI;
				val = SoundEngine.PlayTrackedSound(SoundID.DD2_GhastlyGlaiveImpactGhost, base.Center);
				array[1] = ((SlotId)(val)).ToFloat();
			}
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
			if (activeSound == null)
			{
				float[] array2 = localAI;
				val = SlotId.Invalid;
				array2[1] = ((SlotId)(val)).ToFloat();
			}
			else
			{
				activeSound.Position = base.Center;
			}
			ai[0] += 1f;
			if (ai[0] > 50f)
			{
				alpha += 25;
				if (alpha > 255)
				{
					alpha = 255;
				}
			}
			else
			{
				alpha -= 25;
				if (alpha < 100)
				{
					alpha = 100;
				}
			}
			velocity *= 0.98f;
			if (++frameCounter >= 5)
			{
				frameCounter = 0;
				if (++frame >= 4)
				{
					frame = 0;
				}
			}
			if (ai[0] >= 60f)
			{
				Kill();
			}
			direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
			rotation = velocity.ToRotation();
			if (spriteDirection == -1)
			{
				rotation += (float)Math.PI;
			}
			if (ai[0] >= 10f && ai[0] < 34f)
			{
				Vector2 vector = velocity.SafeNormalize(Vector2.UnitY);
				float num = ai[0] / 60f;
				float num2 = 2f;
				for (int i = 0; (float)i < num2; i++)
				{
					Dust dust = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110);
					dust.velocity = vector * 2f;
					dust.position = base.Center + vector.RotatedBy(num * ((float)Math.PI * 2f) * 2f + (float)i / num2 * ((float)Math.PI * 2f)) * 7f;
					dust.scale = 1f + 0.6f * Main.rand.NextFloat();
					dust.velocity += vector * 3f;
					dust.noGravity = true;
				}
			}
		}

		private void AI_144_DD2Pet()
		{
			Player player = Main.player[owner];
			float num = 4f;
			int num2 = 6;
			int num3 = 4;
			int num4 = Main.projFrames[type];
			int num5 = 0;
			float num6 = 0.08f;
			bool flag = false;
			float scaleFactor = 0.1f;
			Vector2 value = new Vector2(player.direction * 30, -20f);
			if (player.dead)
			{
				Kill();
				return;
			}
			bool flag2 = true;
			switch (type)
			{
			case 702:
			{
				if (player.petFlagDD2Ghost)
				{
					timeLeft = 2;
				}
				value.Y += (float)Math.Cos(localAI[0] * ((float)Math.PI / 60f)) * 2f;
				num3 = 4;
				num2 = 10;
				flag2 = false;
				num = 6f;
				Vector2 value3 = new Vector2((spriteDirection == -1) ? (-6) : (-2), -26f).RotatedBy(rotation);
				if (Main.rand.Next(24) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(base.Center + value3, 4, 4, 135, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						dust2.noGravity = true;
						dust2.velocity.Y -= 3f;
						dust2.noLight = true;
					}
					else if (Main.rand.Next(2) != 0)
					{
						dust2.noLight = true;
					}
					dust2.velocity *= 0.5f;
					dust2.velocity.Y -= 0.9f;
					dust2.scale += 0.1f + Main.rand.NextFloat() * 0.6f;
				}
				DelegateMethods.v3_1 = new Vector3(0.3f, 0.5f, 1f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player.Left, player.Right, 40f, DelegateMethods.CastLightOpen);
				break;
			}
			case 703:
				if (player.petFlagDD2Gato)
				{
					timeLeft = 2;
				}
				value.Y += (float)Math.Cos(localAI[0] * ((float)Math.PI / 30f)) * 2f;
				num2 = 4;
				num3 = 2;
				num = 3f;
				num4 = 4;
				break;
			case 701:
				if (player.petFlagDD2Dragon)
				{
					timeLeft = 2;
				}
				break;
			case 764:
			{
				scaleFactor = 0.025f;
				num6 = 0.04f;
				flag = true;
				localAI[0] += 1f;
				if (localAI[0] > 120f)
				{
					localAI[0] = 0f;
				}
				localAI[1] += velocity.X * 0.01f;
				localAI[1] += 0.008333334f;
				if (localAI[1] < (float)Math.PI * -2f)
				{
					localAI[1] += (float)Math.PI * 2f;
				}
				if (localAI[1] > (float)Math.PI * 2f)
				{
					localAI[1] -= (float)Math.PI * 2f;
				}
				if (velocity.Length() < 4f)
				{
					localAI[1] *= 0.9f;
					if (velocity.Length() > 0.1f && Main.rand.Next(30) == 0)
					{
						Dust dust = Dust.NewDustDirect(position - velocity, width, height, 292, velocity.X * 0.5f, velocity.Y * 0.5f, 150);
						dust.velocity *= 0.3f;
						dust.noLightEmittence = true;
					}
				}
				else
				{
					Vector2 value2 = new Vector2(Main.screenWidth, Main.screenHeight);
					base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + value2 / 2f, value2 + new Vector2(400f)));
					if (Main.rand.Next(15) == 0)
					{
						Dust.NewDustDirect(position - velocity, width, height, 292, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 0.9f).noLightEmittence = true;
					}
				}
				float num7 = localAI[0] / 120f * 2f;
				if (num7 > 1f)
				{
					num7 = 2f - num7;
				}
				Opacity = MathHelper.Lerp(0.4f, 0.75f, num7);
				value.Y += (float)Math.Cos(localAI[0] / 120f * ((float)Math.PI * 2f)) * 2f;
				if (player.petFlagUpbeatStar)
				{
					timeLeft = 2;
				}
				break;
			}
			}
			if (flag2 && (player.suspiciouslookingTentacle || player.petFlagDD2Ghost))
			{
				value.X += -player.direction * 64;
			}
			direction = (spriteDirection = player.direction);
			Vector2 vector = player.MountedCenter + value;
			float num8 = Vector2.Distance(base.Center, vector);
			if (num8 > 1000f)
			{
				base.Center = player.Center + value;
			}
			Vector2 vector2 = vector - base.Center;
			if (num8 < num)
			{
				velocity *= 0.25f;
			}
			if (vector2 != Vector2.Zero)
			{
				if (vector2.Length() < num * 0.5f)
				{
					velocity = vector2;
				}
				else
				{
					velocity = vector2 * scaleFactor;
				}
			}
			if (velocity.Length() > 6f)
			{
				float num9 = velocity.X * num6 + velocity.Y * (float)spriteDirection * 0.02f;
				if (Math.Abs(rotation - num9) >= (float)Math.PI)
				{
					if (num9 < rotation)
					{
						rotation -= (float)Math.PI * 2f;
					}
					else
					{
						rotation += (float)Math.PI * 2f;
					}
				}
				float num10 = 12f;
				rotation = (rotation * (num10 - 1f) + num9) / num10;
				if (++frameCounter >= num3)
				{
					frameCounter = 0;
					if (++frame >= num4)
					{
						frame = num5;
					}
				}
			}
			else
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= num2)
				{
					frameCounter = 0;
					if (++frame >= num4)
					{
						frame = num5;
					}
				}
			}
			if (!flag)
			{
				localAI[0] += 1f;
				if (localAI[0] > 120f)
				{
					localAI[0] = 0f;
				}
			}
		}

		private void AI_145_BookStaffStorm()
		{
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_003e: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0092: Unknown result type (might be due to invalid IL or missing references)
			float num = 300f;
			SlotId val;
			if (soundDelay == 0)
			{
				soundDelay = -1;
				float[] array = localAI;
				val = SoundEngine.PlayTrackedSound(SoundID.DD2_BookStaffTwisterLoop, base.Center);
				array[1] = ((SlotId)(val)).ToFloat();
			}
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
			if (activeSound != null)
			{
				activeSound.Position = base.Center;
				activeSound.Volume = 1f - Math.Max(ai[0] - (num - 15f), 0f) / 15f;
			}
			else
			{
				float[] array2 = localAI;
				val = SlotId.Invalid;
				array2[1] = ((SlotId)(val)).ToFloat();
			}
			if (localAI[0] >= 16f && ai[0] < num - 15f)
			{
				ai[0] = num - 15f;
			}
			ai[0] += 1f;
			if (ai[0] >= num)
			{
				Kill();
			}
			Vector2 top = base.Top;
			Vector2 bottom = base.Bottom;
			Vector2 value = Vector2.Lerp(top, bottom, 0.5f);
			Vector2 value2 = new Vector2(0f, bottom.Y - top.Y);
			value2.X = value2.Y * 0.2f;
			int num2 = 16;
			int num3 = 160;
			for (int i = 0; i < 1; i++)
			{
				Vector2 position = new Vector2(base.Center.X - (float)(num2 / 2), base.position.Y + (float)height - (float)num3);
				if (Collision.SolidCollision(position, num2, num3) || Collision.WetCollision(position, num2, num3))
				{
					if (velocity.Y > 0f)
					{
						velocity.Y = 0f;
					}
					if (velocity.Y > -4f)
					{
						velocity.Y -= 2f;
					}
					else
					{
						velocity.Y -= 4f;
						localAI[0] += 2f;
					}
					if (velocity.Y < -16f)
					{
						velocity.Y = -16f;
					}
					continue;
				}
				localAI[0] -= 1f;
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
				if (velocity.Y < 0f)
				{
					velocity.Y = 0f;
				}
				if (velocity.Y < 4f)
				{
					velocity.Y += 2f;
				}
				else
				{
					velocity.Y += 4f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
			}
			if (ai[0] < num - 30f)
			{
				for (int j = 0; j < 1; j++)
				{
					float value3 = -1f;
					float value4 = 0.9f;
					float amount = Main.rand.NextFloat();
					Vector2 value5 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value3, value4, amount));
					value5.X *= MathHelper.Lerp(2.2f, 0.6f, amount);
					value5.X *= -1f;
					Vector2 value6 = new Vector2(6f, 10f);
					Vector2 position2 = value + value2 * value5 * 0.5f + value6;
					Dust dust = Main.dust[Dust.NewDust(position2, 0, 0, 274)];
					dust.position = position2;
					dust.fadeIn = 1.3f;
					dust.scale = 0.87f;
					dust.alpha = 211;
					if (value5.X > -1.2f)
					{
						dust.velocity.X = 1f + Main.rand.NextFloat();
					}
					dust.noGravity = true;
					dust.velocity.Y = Main.rand.NextFloat() * -0.5f - 1.3f;
					dust.velocity.X += velocity.X * 2.1f;
					dust.noLight = true;
				}
			}
			Vector2 position3 = base.Bottom + new Vector2(-25f, -25f);
			for (int k = 0; k < 4; k++)
			{
				Dust dust2 = Dust.NewDustDirect(position3, 50, 25, 31, velocity.X, -2f, 100);
				dust2.fadeIn = 1.1f;
				dust2.noGravity = true;
			}
			for (int l = 0; l < 1; l++)
			{
				if (Main.rand.Next(5) == 0)
				{
					Gore gore = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
					gore.timeLeft = 60;
					gore.alpha = 50;
					gore.velocity.X += velocity.X;
				}
			}
			for (int m = 0; m < 1; m++)
			{
				if (Main.rand.Next(7) == 0)
				{
					Gore gore2 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
					gore2.timeLeft = 0;
					gore2.alpha = 80;
				}
			}
			for (int n = 0; n < 1; n++)
			{
				if (Main.rand.Next(7) == 0)
				{
					Gore gore3 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
					gore3.timeLeft = 0;
					gore3.alpha = 80;
				}
			}
		}

		public bool AI_137_CanHit(Vector2 targetPosition)
		{
			if (WorldGen.SolidTile((int)targetPosition.X / 16, (int)targetPosition.Y / 16))
			{
				return false;
			}
			Vector2 vector = base.Top + Vector2.UnitY * 20f;
			bool flag = Collision.CanHitLine(vector, 0, 0, targetPosition, 0, 0);
			if (!flag)
			{
				Vector2 v = targetPosition - vector;
				Vector2 spinningpoint = v.SafeNormalize(Vector2.UnitY);
				Vector2 value = Vector2.Lerp(vector, targetPosition, 0.5f);
				Vector2 vector2 = value + spinningpoint.RotatedBy(1.5707963705062866) * v.Length() * 0.2f;
				if (Collision.CanHitLine(vector, 0, 0, vector2, 0, 0) && Collision.CanHitLine(vector2, 0, 0, targetPosition, 0, 0))
				{
					flag = true;
				}
				if (!flag)
				{
					Vector2 vector3 = value + spinningpoint.RotatedBy(-1.5707963705062866) * v.Length() * 0.2f;
					if (Collision.CanHitLine(vector, 0, 0, vector3, 0, 0) && Collision.CanHitLine(vector3, 0, 0, targetPosition, 0, 0))
					{
						flag = true;
					}
				}
			}
			return flag;
		}

		private Point GetScarabBombDigDirectionSnap8()
		{
			Player player = Main.player[owner];
			Vector2 vector = DirectionTo(player.Center);
			Point result = new Point((!(vector.X > 0f)) ? 1 : (-1), (!(vector.Y > 0f)) ? 1 : (-1));
			if (Math.Abs(vector.X) > Math.Abs(vector.Y) * 2f)
			{
				result.Y = 0;
			}
			else if (Math.Abs(vector.Y) > Math.Abs(vector.X) * 2f)
			{
				result.X = 0;
			}
			return result;
		}

		public Color GetFirstFractalColor()
		{
			return Main.hslToRgb(ai[1], 1f, 0.5f);
		}

		public void Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(Point pt, float size, Utils.TileActionAttempt plot)
		{
			Tile tile = Main.tile[pt.X, pt.Y];
			if (tile != null && tile.active() && tile.halfBrick())
			{
				int num = pt.Y - 1;
				if (num >= 0)
				{
					tile = Main.tile[pt.X, num];
					if (!WorldGen.SolidOrSlopedTile(tile))
					{
						pt.Y--;
					}
				}
			}
			DelegateMethods.v2_1 = pt.ToVector2();
			DelegateMethods.f_1 = size;
			Utils.PlotTileArea(pt.X, pt.Y, plot);
		}

		public void Kill()
		{
			//IL_2004: Unknown result type (might be due to invalid IL or missing references)
			//IL_2024: Unknown result type (might be due to invalid IL or missing references)
			//IL_2041: Unknown result type (might be due to invalid IL or missing references)
			//IL_bf47: Unknown result type (might be due to invalid IL or missing references)
			//IL_bf4c: Unknown result type (might be due to invalid IL or missing references)
			if (!active)
			{
				return;
			}
			Main.projectileIdentity[owner, identity] = -1;
			int num = timeLeft;
			timeLeft = 0;
			ParticleOrchestraSettings settings;
			if (type == 949)
			{
				SoundEngine.PlaySound(SoundID.Item10, base.Center);
				int num2 = (int)ai[0];
				float num3 = 20f;
				for (float num4 = 0f; num4 < num3; num4++)
				{
					Vector2 position = base.position;
					int num5 = Dust.NewDust(position, 4, 4, num2, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num5].noGravity = true;
					}
					Dust dust = Main.dust[num5];
					dust.velocity *= 0.8f;
					if (num2 == 66)
					{
						Main.dust[num5].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
						Main.dust[num5].noGravity = true;
					}
				}
			}
			else if (type == 756)
			{
				for (float num6 = 0f; num6 < 1f; num6 += 0.025f)
				{
					Dust dust2 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f) * scale + base.velocity.SafeNormalize(Vector2.UnitY) * num6 * 200f * scale, 5, Main.rand.NextVector2Circular(3f, 3f));
					dust2.velocity.Y += -0.3f;
					Dust dust = dust2;
					dust.velocity += base.velocity * 0.2f;
					dust2.scale = 1f;
					dust2.alpha = 100;
				}
			}
			else if (type == 932)
			{
				Color fairyQueenWeaponsColor = GetFairyQueenWeaponsColor();
				SoundEngine.PlaySound(SoundID.Item10, base.Center);
				Vector2 target = base.Center;
				Main.rand.NextFloat();
				int num7 = 10;
				for (int i = 0; i < num7; i++)
				{
					Vector2 vector = base.position - base.velocity * i;
					int num8 = Main.rand.Next(1, 3);
					float num9 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(num7, 0f, i, clamped: true));
					if ((float)i >= (float)oldPos.Length * 0.3f)
					{
						num8--;
					}
					if ((float)i >= (float)oldPos.Length * 0.75f)
					{
						num8 -= 2;
					}
					vector.DirectionTo(target).SafeNormalize(Vector2.Zero);
					target = vector;
					for (float num10 = 0f; num10 < (float)num8; num10++)
					{
						int num11 = Dust.NewDust(vector, base.width, base.height, 267, 0f, 0f, 0, fairyQueenWeaponsColor);
						Dust dust = Main.dust[num11];
						dust.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num11].noGravity = true;
						Main.dust[num11].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
						Main.dust[num11].fadeIn = Main.rand.NextFloat() * 1.2f * num9;
						dust = Main.dust[num11];
						dust.scale *= num9;
						if (num11 != 6000)
						{
							Dust dust3 = Dust.CloneDust(num11);
							dust = dust3;
							dust.scale /= 2f;
							dust = dust3;
							dust.fadeIn *= 0.85f;
							dust3.color = new Color(255, 255, 255, 255);
						}
					}
				}
			}
			else if (type == 931)
			{
				Color fairyQueenWeaponsColor2 = GetFairyQueenWeaponsColor();
				SoundEngine.PlaySound(SoundID.Item10, base.Center);
				Vector2 target2 = base.Center;
				Main.rand.NextFloat();
				for (int j = 0; j < oldPos.Length; j++)
				{
					Vector2 vector2 = oldPos[j];
					if (vector2 == Vector2.Zero)
					{
						break;
					}
					int num12 = Main.rand.Next(1, 3);
					float num13 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, j, clamped: true));
					if ((float)j >= (float)oldPos.Length * 0.3f)
					{
						num12--;
					}
					if ((float)j >= (float)oldPos.Length * 0.75f)
					{
						num12 -= 2;
					}
					vector2.DirectionTo(target2).SafeNormalize(Vector2.Zero);
					target2 = vector2;
					for (float num14 = 0f; num14 < (float)num12; num14++)
					{
						int num15 = Dust.NewDust(vector2, base.width, base.height, 267, 0f, 0f, 0, fairyQueenWeaponsColor2);
						Dust dust = Main.dust[num15];
						dust.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num15].noGravity = true;
						Main.dust[num15].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
						Main.dust[num15].fadeIn = Main.rand.NextFloat() * 1.2f * num13;
						dust = Main.dust[num15];
						dust.scale *= num13;
						if (num15 != 6000)
						{
							Dust dust4 = Dust.CloneDust(num15);
							dust = dust4;
							dust.scale /= 2f;
							dust = dust4;
							dust.fadeIn *= 0.85f;
							dust4.color = new Color(255, 255, 255, 255);
						}
					}
				}
			}
			else if (type == 79)
			{
				int width = base.width;
				int height = base.height;
				Resize(128, 128);
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				Resize(width, height);
				SoundEngine.PlaySound(SoundID.Item10, base.Center);
				Vector2 target3 = base.Center;
				float num16 = Main.rand.NextFloat();
				for (int k = 0; k < oldPos.Length; k++)
				{
					Vector2 vector3 = oldPos[k];
					if (vector3 == Vector2.Zero)
					{
						break;
					}
					Color newColor = Main.hslToRgb((num16 + Utils.GetLerpValue(oldPos.Length, 0f, k, clamped: true)) % 1f, 1f, 0.65f);
					int num17 = Main.rand.Next(1, 4);
					float lerpValue = Utils.GetLerpValue(oldPos.Length, 0f, k, clamped: true);
					float num18 = MathHelper.Lerp(0.3f, 1f, lerpValue);
					if ((float)k >= (float)oldPos.Length * 0.3f)
					{
						num17--;
					}
					if ((float)k >= (float)oldPos.Length * 0.65f)
					{
						num17 -= 2;
					}
					if ((float)k >= (float)oldPos.Length * 0.85f)
					{
						num17 -= 3;
					}
					Vector2 value = vector3.DirectionTo(target3).SafeNormalize(Vector2.Zero);
					target3 = vector3;
					Vector2 value2 = base.Size / 2f;
					for (float num19 = 0f; num19 < (float)num17; num19++)
					{
						int num20 = Dust.NewDust(vector3, base.width, base.height, 267, 0f, 0f, 0, newColor);
						Dust dust = Main.dust[num20];
						dust.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num20].noGravity = true;
						Main.dust[num20].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
						Main.dust[num20].fadeIn = Main.rand.NextFloat() * 1.2f * num18;
						dust = Main.dust[num20];
						dust.velocity += value * 6f;
						dust = Main.dust[num20];
						dust.scale *= num18;
						Main.dust[num20].position = Vector2.Lerp(vector3 + value2, Main.dust[num20].position, lerpValue);
						if (num20 != 6000)
						{
							Dust dust5 = Dust.CloneDust(num20);
							dust = dust5;
							dust.scale /= 2f;
							dust = dust5;
							dust.fadeIn *= 0.85f;
							dust5.color = new Color(255, 255, 255, 255);
						}
					}
				}
				for (float num21 = 0f; num21 < 0.5f; num21 += 0.25f)
				{
					settings = new ParticleOrchestraSettings
					{
						PositionInWorld = base.Center,
						MovementVector = Vector2.UnitX.RotatedBy(num21 * ((float)Math.PI * 2f)) * 16f
					};
					ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.RainbowRodHit, settings, owner);
				}
				for (int l = 0; l < 14; l++)
				{
					int num22 = Dust.NewDust(base.position, base.width, base.height, 66, 0f, 0f, 100, Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f), 1.7f);
					Main.dust[num22].noGravity = true;
					Dust dust = Main.dust[num22];
					dust.velocity *= 3f;
				}
			}
			else if (type == 16)
			{
				int width2 = base.width;
				int height2 = base.height;
				Resize(128, 128);
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				Resize(width2, height2);
				SoundEngine.PlaySound(SoundID.Item10, base.Center);
				Vector2 target4 = base.Center;
				for (int m = 0; m < oldPos.Length; m++)
				{
					Vector2 vector4 = oldPos[m];
					if (vector4 == Vector2.Zero)
					{
						break;
					}
					Color newColor2 = Main.hslToRgb(4f / 9f + Main.rand.NextFloat() * (2f / 9f), 1f, 0.65f);
					int num23 = Main.rand.Next(1, 4);
					float num24 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, m, clamped: true));
					if ((float)m >= (float)oldPos.Length * 0.3f)
					{
						num23--;
					}
					if ((float)m >= (float)oldPos.Length * 0.75f)
					{
						num23 -= 2;
					}
					Vector2 value3 = vector4.DirectionTo(target4).SafeNormalize(Vector2.Zero);
					target4 = vector4;
					for (float num25 = 0f; num25 < (float)num23; num25++)
					{
						if (Main.rand.Next(3) == 0)
						{
							int num26 = Dust.NewDust(vector4, base.width, base.height, 267, 0f, 0f, 0, newColor2);
							Dust dust = Main.dust[num26];
							dust.velocity *= Main.rand.NextFloat() * 0.8f;
							Main.dust[num26].noGravity = true;
							Main.dust[num26].scale = Main.rand.NextFloat() * 0.8f;
							Main.dust[num26].fadeIn = Main.rand.NextFloat() * 1.2f * num24;
							dust = Main.dust[num26];
							dust.velocity += value3 * 6f;
							dust = Main.dust[num26];
							dust.scale *= num24;
							if (num26 != 6000)
							{
								Dust dust6 = Dust.CloneDust(num26);
								dust = dust6;
								dust.scale /= 2f;
								dust = dust6;
								dust.fadeIn /= 2f;
								dust6.color = new Color(255, 255, 255, 255);
							}
						}
						else
						{
							Dust dust7 = Dust.NewDustDirect(vector4, base.width, base.height, 15, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100);
							Main.rand.Next(2);
							dust7.noGravity = true;
							Dust dust = dust7;
							dust.velocity *= 2f;
							dust = dust7;
							dust.velocity += value3 * 9f;
							dust = dust7;
							dust.scale *= num24;
							dust7.fadeIn = (0.6f + Main.rand.NextFloat() * 0.4f) * num24;
							dust7.noLightEmittence = (dust7.noLight = true);
						}
					}
				}
				for (int n = 0; n < 20; n++)
				{
					Dust dust8 = Dust.NewDustDirect(base.position, base.width, base.height, 15);
					dust8.noGravity = true;
					dust8.velocity = Main.rand.NextVector2Circular(1f, 1f) * 1.5f;
					dust8.scale = 1.2f + Main.rand.NextFloat() * 0.5f;
					dust8.noLightEmittence = (dust8.noLight = true);
					Dust dust = dust8;
					dust.velocity += base.velocity * 0.01f;
					dust = dust8;
					dust.position += dust8.velocity * Main.rand.Next(1, 16);
					dust8 = Dust.NewDustDirect(base.position, base.width, base.height, 15, 0f, 0f, 100);
					dust = dust8;
					dust.velocity *= 1.2f;
					dust8.noLightEmittence = (dust8.noLight = true);
					dust = dust8;
					dust.velocity += base.velocity * 0.01f;
					dust = dust8;
					dust.scale *= 0.8f + Main.rand.NextFloat() * 0.2f;
					dust = dust8;
					dust.position += dust8.velocity * Main.rand.Next(1, 16);
				}
			}
			else if (type == 34)
			{
				int width3 = base.width;
				int height3 = base.height;
				Resize(96, 96);
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				Resize(width3, height3);
				SoundEngine.PlaySound(SoundID.Item10, base.position);
				Vector2 target5 = base.Center;
				for (int num27 = 0; num27 < oldPos.Length; num27++)
				{
					Vector2 vector5 = oldPos[num27];
					if (vector5 == Vector2.Zero)
					{
						break;
					}
					Color newColor3 = Main.hslToRgb(Main.rand.NextFloat() * 0.111111112f, 1f, 0.5f);
					int num28 = Main.rand.Next(1, 5);
					float num29 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, num27, clamped: true));
					if ((float)num27 >= (float)oldPos.Length * 0.3f)
					{
						num28--;
					}
					if ((float)num27 >= (float)oldPos.Length * 0.75f)
					{
						num28 -= 2;
					}
					Vector2 value4 = vector5.DirectionTo(target5).SafeNormalize(Vector2.Zero);
					target5 = vector5;
					for (float num30 = 0f; num30 < (float)num28; num30++)
					{
						if (Main.rand.Next(3) == 0)
						{
							int num31 = Dust.NewDust(vector5, base.width, base.height, 267, 0f, 0f, 0, newColor3);
							Dust dust = Main.dust[num31];
							dust.velocity *= Main.rand.NextFloat() * 0.8f;
							Main.dust[num31].noGravity = true;
							Main.dust[num31].scale = Main.rand.NextFloat() * 1f;
							Main.dust[num31].fadeIn = Main.rand.NextFloat() * 2f;
							dust = Main.dust[num31];
							dust.velocity += value4 * 8f;
							dust = Main.dust[num31];
							dust.scale *= num29;
							if (num31 != 6000)
							{
								Dust dust9 = Dust.CloneDust(num31);
								dust = dust9;
								dust.scale /= 2f;
								dust = dust9;
								dust.fadeIn /= 2f;
								dust9.color = new Color(255, 255, 255, 255);
							}
						}
						else
						{
							Dust dust10 = Dust.NewDustDirect(vector5, base.width, base.height, 6, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100);
							Dust dust;
							if (Main.rand.Next(2) == 0)
							{
								dust10.noGravity = true;
								dust = dust10;
								dust.scale *= 2.5f;
							}
							dust = dust10;
							dust.velocity *= 2f;
							dust = dust10;
							dust.velocity += value4 * 6f;
							dust = dust10;
							dust.scale *= num29;
							dust10.noLightEmittence = (dust10.noLight = true);
						}
					}
				}
				for (int num32 = 0; num32 < 20; num32++)
				{
					Dust dust11 = Dust.NewDustDirect(base.position, base.width, base.height, 6, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100);
					dust11.noGravity = true;
					dust11.velocity = Main.rand.NextVector2Circular(1f, 1f) * 6f;
					dust11.scale = 1.6f;
					dust11.fadeIn = 1.3f + Main.rand.NextFloat() * 1f;
					dust11.noLightEmittence = (dust11.noLight = true);
					Dust dust = dust11;
					dust.velocity += base.velocity * 0.1f;
					dust11 = Dust.NewDustDirect(base.position, base.width, base.height, 6, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100);
					dust = dust11;
					dust.velocity *= 2f;
					dust11.noLightEmittence = (dust11.noLight = true);
					dust = dust11;
					dust.velocity += base.velocity * 0.1f;
				}
			}
			if (type == 873)
			{
				int num33 = 20;
				float num34 = (float)Math.PI * 2f / (float)num33;
				float num35 = base.velocity.ToRotation();
				Color value5 = AI_171_GetColor();
				for (int num36 = 0; num36 < num33; num36++)
				{
					Dust dust12 = Dust.NewDustPerfect(base.Center, 267);
					dust12.fadeIn = 1f;
					dust12.noGravity = true;
					dust12.alpha = 100;
					dust12.color = Color.Lerp(value5, Color.White, Main.rand.NextFloat() * 0.4f);
					if (num36 % 4 == 0)
					{
						dust12.velocity = num35.ToRotationVector2() * 3.2f;
						dust12.scale = 2.3f;
					}
					else if (num36 % 2 == 0)
					{
						dust12.velocity = num35.ToRotationVector2() * 1.8f;
						dust12.scale = 1.9f;
					}
					else
					{
						dust12.velocity = num35.ToRotationVector2();
						dust12.scale = 1.6f;
					}
					num35 += num34;
					Dust dust = dust12;
					dust.velocity += base.velocity * Main.rand.NextFloat() * 0.5f;
				}
			}
			_ = type;
			_ = 857;
			if (type == 920)
			{
				for (int num37 = 0; num37 < 6; num37++)
				{
					Vector2 vector6 = Vector2.UnitY.RotatedBy((float)num37 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (2f + Main.rand.NextFloat() * 0.5f);
					int num38 = Dust.NewDust(base.position + base.Size * Main.rand.NextVector2Square(0f, 1f), 4, 4, 4, vector6.X, vector6.Y, 80, new Color(78, 136, 255, 150), 1.5f);
					Main.dust[num38].noGravity = true;
				}
			}
			if (type == 921)
			{
				for (int num39 = 0; num39 < 12; num39++)
				{
					Vector2 vector7 = Vector2.UnitY.RotatedBy((float)num39 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (3f + Main.rand.NextFloat() * 0.5f);
					int num40 = Dust.NewDust(base.position + base.Size * Main.rand.NextVector2Square(0f, 1f), 6, 6, 243, vector7.X, vector7.Y, 80, default(Color), 1.5f);
					Main.dust[num40].noGravity = true;
				}
			}
			if (type == 926)
			{
				for (int num41 = 0; num41 < 22; num41++)
				{
					Vector2 vector8 = Vector2.UnitY.RotatedBy((float)num41 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (3f + Main.rand.NextFloat() * 0.5f);
					int num42 = Dust.NewDust(base.position - new Vector2(8f, 8f), base.width + 16, base.height + 16, 31, vector8.X, vector8.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
					Main.dust[num42].noGravity = true;
				}
			}
			if (type == 937)
			{
				for (int num43 = 0; num43 < 12; num43++)
				{
					Vector2 vector9 = Vector2.UnitY.RotatedBy((float)num43 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (3f + Main.rand.NextFloat() * 0.5f);
					int num44 = Dust.NewDust(base.position - new Vector2(8f, 8f), base.width + 16, base.height + 16, 31, vector9.X, vector9.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
					Main.dust[num44].noGravity = true;
				}
			}
			if (type == 818)
			{
				for (float num45 = 0f; num45 < 1f; num45 += 0.34f)
				{
					Dust.NewDustPerfect(base.position + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, Vector2.UnitY.RotatedBy(num45 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (2f + Main.rand.NextFloat() * 0.5f), 150, Color.Lerp(Color.White, Color.Gold, Main.rand.NextFloat()), 0.4f).noGravity = true;
				}
				for (float num46 = 0f; num46 < 1f; num46 += 0.34f)
				{
					Dust.NewDustPerfect(base.position + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, Vector2.UnitY.RotatedBy(num46 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (1f + Main.rand.NextFloat() * 0.5f), 150, Color.Lerp(Color.White, Main.OurFavoriteColor, Main.rand.NextFloat()), 0.7f).noGravity = true;
				}
			}
			if (type == 856)
			{
				for (int num47 = 0; num47 < 6; num47++)
				{
					Dust.NewDust(base.position, base.width, base.height, 58, 0f, 0f, 150, default(Color), 0.8f);
				}
				for (float num48 = 0f; num48 < 1f; num48 += 0.34f)
				{
					Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num48 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (4f + Main.rand.NextFloat() * 2f), 150, Color.Lerp(Color.White, Color.HotPink, Main.rand.NextFloat() * 0.5f + 0.5f)).noGravity = true;
				}
				for (float num49 = 0f; num49 < 1f; num49 += 0.34f)
				{
					Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num49 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (2f + Main.rand.NextFloat() * 1f), 150, Color.Lerp(Color.White, Color.Orange, Main.rand.NextFloat() * 0.5f + 0.5f)).noGravity = true;
				}
				Vector2 value6 = new Vector2(Main.screenWidth, Main.screenHeight);
				if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + value6 / 2f, value6 + new Vector2(400f))))
				{
					for (int num50 = 0; num50 < 1; num50++)
					{
						Gore.NewGore(base.position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * 3f, Utils.SelectRandom<int>(Main.rand, 16));
					}
				}
				settings = new ParticleOrchestraSettings
				{
					PositionInWorld = base.Center
				};
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.StellarTune, settings, owner);
				base.position = base.Center;
				base.width = (base.height = 128);
				base.Center = base.position;
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
			}
			if (type == 818)
			{
				Damage();
			}
			if (type == 686)
			{
				SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFireballImpact, base.Center);
			}
			else if (type == 711)
			{
				SoundEngine.PlayTrackedSound(SoundID.DD2_BetsysWrathImpact, base.Center);
			}
			else if (type == 704)
			{
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
				if (activeSound != null)
				{
					activeSound.Volume = 0f;
					activeSound.Stop();
				}
			}
			if (type == 710)
			{
				ai[1] = -1f;
				base.position = base.Center;
				base.width = (base.height = 40);
				base.Center = base.position;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				for (int num51 = 0; num51 < 2; num51++)
				{
					int num52 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num52].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num53 = 0; num53 < 10; num53++)
				{
					int num54 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num54].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num54].noGravity = true;
					Dust dust = Main.dust[num54];
					dust.velocity *= 2f;
				}
				for (int num55 = 0; num55 < 5; num55++)
				{
					int num56 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num56].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num56].noGravity = true;
					Dust dust = Main.dust[num56];
					dust.velocity *= 2f;
				}
			}
			else if (type == 711)
			{
				Rectangle hitbox = base.Hitbox;
				for (int num57 = 0; num57 < oldPos.Length / 2; num57 += 2)
				{
					hitbox.X = (int)oldPos[num57].X;
					hitbox.Y = (int)oldPos[num57].Y;
					for (int num58 = 0; num58 < 2; num58++)
					{
						int num59 = Utils.SelectRandom<int>(Main.rand, 6, 55, 158);
						int num60 = Dust.NewDust(hitbox.TopLeft(), base.width, base.height, num59, direction, -2.5f);
						Main.dust[num60].alpha = 200;
						Dust dust = Main.dust[num60];
						dust.velocity *= 2.4f;
						dust = Main.dust[num60];
						dust.scale += Main.rand.NextFloat();
						dust = Main.dust[num60];
						dust.scale -= 0.5f;
						if (Main.dust[num60].type == 55)
						{
							Main.dust[num60].color = Color.Lerp(new Color(128, 0, 180, 128), Color.Gold, Main.rand.NextFloat());
						}
						Main.dust[num60].noLight = true;
					}
				}
				for (int num61 = 10; num61 < oldPos.Length; num61 += 2)
				{
					hitbox.X = (int)oldPos[num61].X;
					hitbox.Y = (int)oldPos[num61].Y;
					for (int num62 = 0; num62 < 2; num62++)
					{
						if (Main.rand.Next(3) != 0)
						{
							int num63 = Utils.SelectRandom<int>(Main.rand, 55);
							int num64 = Dust.NewDust(hitbox.TopLeft(), base.width, base.height, num63, direction, -2.5f);
							Main.dust[num64].alpha = 120;
							Dust dust = Main.dust[num64];
							dust.velocity *= 2.4f;
							dust = Main.dust[num64];
							dust.scale += Main.rand.NextFloat() * 0.7f;
							dust = Main.dust[num64];
							dust.scale -= 0.5f;
							if (Main.dust[num64].type == 55)
							{
								Main.dust[num64].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
							}
							Main.dust[num64].noLight = true;
						}
					}
				}
				for (int num65 = 5; num65 < oldPos.Length; num65++)
				{
					hitbox.X = (int)oldPos[num65].X;
					hitbox.Y = (int)oldPos[num65].Y;
					for (int num66 = 0; num66 < 1; num66++)
					{
						if (Main.rand.Next(3) != 0)
						{
							int num67 = Utils.SelectRandom<int>(Main.rand, 55);
							int num68 = Dust.NewDust(hitbox.TopLeft(), base.width, base.height, num67, direction, -2.5f);
							Main.dust[num68].alpha = 80;
							Dust dust = Main.dust[num68];
							dust.velocity *= 0.3f;
							dust = Main.dust[num68];
							dust.velocity += base.velocity * 0.5f;
							dust = Main.dust[num68];
							dust.scale += Main.rand.NextFloat() * 0.7f;
							dust = Main.dust[num68];
							dust.scale -= 0.5f;
							if (Main.dust[num68].type == 55)
							{
								Main.dust[num68].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
							}
							Main.dust[num68].noLight = true;
						}
					}
				}
				for (int num69 = 0; num69 < 20; num69++)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num70 = 228;
						Dust dust13 = Main.dust[Dust.NewDust(base.position, base.width, base.height, num70)];
						dust13.noGravity = true;
						dust13.scale = 1.25f + Main.rand.NextFloat();
						dust13.fadeIn = 1.5f;
						Dust dust = dust13;
						dust.velocity *= 6f;
						dust13.noLight = true;
					}
				}
				for (int num71 = 0; num71 < 20; num71++)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num72 = 55;
						Dust dust14 = Main.dust[Dust.NewDust(base.position, base.width, base.height, num72)];
						dust14.noGravity = true;
						dust14.scale = 1.25f + Main.rand.NextFloat();
						dust14.fadeIn = 1.5f;
						Dust dust = dust14;
						dust.velocity *= 6f;
						dust14.noLight = true;
						dust14.color = new Color(0, 0, 220, 128);
					}
				}
				if (owner == Main.myPlayer)
				{
					base.position = base.Center;
					base.Size = new Vector2(140f);
					base.Center = base.position;
					penetrate = -1;
					usesLocalNPCImmunity = true;
					localNPCHitCooldown = -1;
					Damage();
				}
			}
			else if (type == 662 || type == 685)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				Vector2 value7 = base.oldVelocity.SafeNormalize(Vector2.Zero);
				Vector2 position2 = base.position + value7 * 16f;
				for (int num73 = 0; num73 < 16; num73++)
				{
					if (Main.rand.Next(2) == 0)
					{
						position2 -= value7 * 8f;
						continue;
					}
					Dust dust15 = Dust.NewDustDirect(position2, base.width, base.height, 11);
					dust15.position = (dust15.position + base.Center) / 2f;
					Dust dust = dust15;
					dust.velocity += base.oldVelocity * 0.4f;
					dust = dust15;
					dust.velocity *= 0.5f;
					dust15.noGravity = true;
					position2 -= value7 * 8f;
				}
			}
			if (type == 680)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				Vector2 value8 = base.oldVelocity.SafeNormalize(Vector2.Zero);
				Vector2 position3 = base.position + value8 * 16f;
				for (int num74 = 0; num74 < 16; num74++)
				{
					if (Main.rand.Next(2) == 0)
					{
						position3 -= value8 * 8f;
						continue;
					}
					Dust dust16 = Dust.NewDustDirect(position3, base.width, base.height, 11);
					dust16.position = (dust16.position + base.Center) / 2f;
					Dust dust = dust16;
					dust.velocity += base.oldVelocity * 0.4f;
					dust = dust16;
					dust.velocity *= 0.5f;
					dust16.noGravity = true;
					position3 -= value8 * 8f;
				}
				Dust.NewDustDirect(base.position, base.width, base.height, 11, 0f, 0f, 0, Color.Red, 1.6f).noGravity = true;
			}
			if (type == 664 || type == 666 || type == 668 || type == 706)
			{
				int num75 = 4;
				int num76 = 20;
				int num77 = 10;
				int num78 = 20;
				int num79 = 20;
				int num80 = 4;
				float num81 = 1.5f;
				int num82 = 6;
				int num83 = 6;
				if (Main.player[owner].setApprenticeT3)
				{
					num75 += 4;
					num79 += 10;
					num76 += 20;
					num78 += 30;
					num77 /= 2;
					num80 += 4;
					num81 += 0.5f;
					num82 += 7;
					num83 = 270;
				}
				base.position = base.Center;
				base.width = (base.height = 16 * num82);
				base.Center = base.position;
				Damage();
				SoundEngine.PlaySound(SoundID.Item100, base.position);
				for (int num84 = 0; num84 < num75; num84++)
				{
					int num85 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num85].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num86 = 0; num86 < num76; num86++)
				{
					Dust dust17 = Dust.NewDustDirect(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 200, default(Color), 2.5f);
					dust17.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 10f;
					Dust dust = dust17;
					dust.velocity *= 16f;
					if (dust17.velocity.Y > -2f)
					{
						dust17.velocity.Y *= -0.4f;
					}
					dust17.noLight = true;
					dust17.noGravity = true;
				}
				for (int num87 = 0; num87 < num78; num87++)
				{
					Dust dust18 = Dust.NewDustDirect(new Vector2(base.position.X, base.position.Y), base.width, base.height, num83, 0f, 0f, 100, default(Color), 1.5f);
					dust18.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Dust dust = dust18;
					dust.velocity *= 2f;
					dust18.noGravity = true;
					dust18.fadeIn = num81;
				}
				for (int num88 = 0; num88 < num77; num88++)
				{
					int num89 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num89].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num89].noGravity = true;
					Dust dust = Main.dust[num89];
					dust.velocity *= 3f;
				}
				for (int num90 = 0; num90 < num79; num90++)
				{
					int num91 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num91].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num91].noGravity = true;
					Dust dust = Main.dust[num91];
					dust.velocity *= 3f;
				}
				for (int num92 = 0; num92 < num80; num92++)
				{
					int num93 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num93].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Gore gore = Main.gore[num93];
					gore.position -= Vector2.One * 16f;
					if (Main.rand.Next(2) == 0)
					{
						Main.gore[num93].position.Y -= 30f;
					}
					gore = Main.gore[num93];
					gore.velocity *= 0.3f;
					Main.gore[num93].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num93].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			else if (type == 681)
			{
				base.position.X += base.width / 2;
				base.position.Y += base.height / 2;
				SoundEngine.PlaySound(SoundID.DD2_GoblinBomb, base.position);
				base.width = 22;
				base.height = 22;
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				for (int num94 = 0; num94 < 10; num94++)
				{
					int num95 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num95];
					dust.velocity *= 1.4f;
					num95 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num95];
					dust.velocity *= 1.4f;
					Main.dust[num95].noGravity = true;
					Main.dust[num95].fadeIn = 2f;
				}
				for (int num96 = 0; num96 < 10; num96++)
				{
					int num97 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num97].noGravity = true;
					Dust dust = Main.dust[num97];
					dust.velocity *= 5f;
					num97 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num97];
					dust.velocity *= 3f;
				}
				int num98 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num98];
				gore.velocity *= 0.4f;
				Main.gore[num98].velocity.X += 1f;
				Main.gore[num98].velocity.Y += 1f;
				num98 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num98];
				gore.velocity *= 0.4f;
				Main.gore[num98].velocity.X -= 1f;
				Main.gore[num98].velocity.Y += 1f;
				num98 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num98];
				gore.velocity *= 0.4f;
				Main.gore[num98].velocity.X += 1f;
				Main.gore[num98].velocity.Y -= 1f;
				num98 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num98];
				gore.velocity *= 0.4f;
				Main.gore[num98].velocity.X -= 1f;
				Main.gore[num98].velocity.Y -= 1f;
				base.position.X += base.width / 2;
				base.position.Y += base.height / 2;
				base.width = 80;
				base.height = 80;
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				Damage();
			}
			if (type == 669)
			{
				SoundEngine.PlaySound(13, (int)base.position.X, (int)base.position.Y);
				Vector2 value9 = new Vector2(20f, 20f);
				for (int num99 = 0; num99 < 10; num99++)
				{
					Dust dust19 = Dust.NewDustDirect(base.Center - value9 / 2f, (int)value9.X, (int)value9.Y, 4, 0f, 0f, 100, new Color(255, 255, 255, 110), 1.1f);
					Dust dust = dust19;
					dust.velocity *= 1.4f;
				}
				for (int num100 = 0; num100 < 40; num100++)
				{
					Dust dust20 = Dust.NewDustDirect(base.Center - value9 / 2f, (int)value9.X, (int)value9.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 1.2f);
					dust20.noGravity = true;
					Dust dust = dust20;
					dust.velocity *= 4f;
					dust20 = Dust.NewDustDirect(base.Center - value9 / 2f, (int)value9.X, (int)value9.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 0.8f);
					dust = dust20;
					dust.velocity *= 2f;
				}
			}
			if (Main.myPlayer == owner && bobber)
			{
				PopupText.ClearSonarText();
				if (ai[1] > 0f && ai[1] < 5045f)
				{
					AI_061_FishingBobber_GiveItemToPlayer(Main.player[owner], (int)ai[1]);
				}
				ai[1] = 0f;
			}
			if (type == 634 || type == 635)
			{
				int num101 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
				int num102 = 255;
				int num103 = 255;
				int height4 = 50;
				float num104 = 1.7f;
				float num105 = 0.8f;
				float num106 = 2f;
				Vector2 value10 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				Vector2 value11 = value10 * base.velocity.Length() * MaxUpdates;
				if (type == 635)
				{
					num102 = 88;
					num103 = 88;
					num101 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
					num104 = 3.7f;
					num105 = 1.5f;
					num106 = 2.2f;
					value11 *= 0.5f;
				}
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				base.position = base.Center;
				base.width = (base.height = height4);
				base.Center = base.position;
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				for (int num107 = 0; num107 < 40; num107++)
				{
					num101 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
					if (type == 635)
					{
						num101 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
					}
					int num108 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num101, 0f, 0f, 200, default(Color), num104);
					Main.dust[num108].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num108].noGravity = true;
					Dust dust = Main.dust[num108];
					dust.velocity *= 3f;
					dust = Main.dust[num108];
					dust.velocity += value11 * Main.rand.NextFloat();
					num108 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num102, 0f, 0f, 100, default(Color), num105);
					Main.dust[num108].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					dust = Main.dust[num108];
					dust.velocity *= 2f;
					Main.dust[num108].noGravity = true;
					Main.dust[num108].fadeIn = 1f;
					Main.dust[num108].color = Color.Crimson * 0.5f;
					dust = Main.dust[num108];
					dust.velocity += value11 * Main.rand.NextFloat();
				}
				for (int num109 = 0; num109 < 20; num109++)
				{
					int num110 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num103, 0f, 0f, 0, default(Color), num106);
					Main.dust[num110].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 3f;
					Main.dust[num110].noGravity = true;
					Dust dust = Main.dust[num110];
					dust.velocity *= 0.5f;
					dust = Main.dust[num110];
					dust.velocity += value11 * (0.6f + 0.6f * Main.rand.NextFloat());
				}
			}
			else if (type == 651)
			{
				if (localAI[0] == 1f && owner == Main.myPlayer)
				{
					Player master = Main.player[owner];
					Point ps = new Vector2(ai[0], ai[1]).ToPoint();
					Point pe = base.Center.ToTileCoordinates();
					if (Main.netMode == 1)
					{
						NetMessage.SendData(109, -1, -1, null, ps.X, ps.Y, pe.X, pe.Y, (int)WiresUI.Settings.ToolMode);
					}
					else
					{
						Wiring.MassWireOperation(ps, pe, master);
					}
				}
			}
			else if (type == 641)
			{
				if (owner == Main.myPlayer)
				{
					for (int num111 = 0; num111 < 1000; num111++)
					{
						if (Main.projectile[num111].active && Main.projectile[num111].owner == owner && Main.projectile[num111].type == 642)
						{
							Main.projectile[num111].Kill();
						}
					}
				}
			}
			else if (type == 643)
			{
				if (owner == Main.myPlayer)
				{
					for (int num112 = 0; num112 < 1000; num112++)
					{
						if (Main.projectile[num112].active && Main.projectile[num112].owner == owner && Main.projectile[num112].type == 644)
						{
							Main.projectile[num112].Kill();
						}
					}
				}
			}
			else if (type == 645)
			{
				bool flag = WorldGen.SolidTile(Framing.GetTileSafely((int)base.position.X / 16, (int)base.position.Y / 16));
				for (int num113 = 0; num113 < 4; num113++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num114 = 0; num114 < 4; num114++)
				{
					int num115 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num115].noGravity = true;
					Dust dust = Main.dust[num115];
					dust.velocity *= 3f;
					if (flag)
					{
						Main.dust[num115].noLight = true;
					}
					num115 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num115];
					dust.velocity *= 2f;
					Main.dust[num115].noGravity = true;
					if (flag)
					{
						Main.dust[num115].noLight = true;
					}
				}
				for (int num116 = 0; num116 < 1; num116++)
				{
					int num117 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num117];
					gore.velocity *= 0.3f;
					Main.gore[num117].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num117].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			else if (type == 636)
			{
				Rectangle hitbox2 = base.Hitbox;
				for (int num118 = 0; num118 < 6; num118 += 3)
				{
					hitbox2.X = (int)oldPos[num118].X;
					hitbox2.Y = (int)oldPos[num118].Y;
					for (int num119 = 0; num119 < 5; num119++)
					{
						int num120 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num121 = Dust.NewDust(hitbox2.TopLeft(), base.width, base.height, num120, 2.5f * (float)direction, -2.5f);
						Main.dust[num121].alpha = 200;
						Dust dust = Main.dust[num121];
						dust.velocity *= 2.4f;
						dust = Main.dust[num121];
						dust.scale += Main.rand.NextFloat();
					}
				}
			}
			else if (type == 614)
			{
				for (int num122 = 0; num122 < 10; num122++)
				{
					Dust dust21 = Main.dust[Dust.NewDust(base.position, base.width, base.height, 229)];
					dust21.noGravity = true;
					Dust dust = dust21;
					dust.velocity *= 3f;
				}
			}
			if (type == 644)
			{
				DoRainbowCrystalStaffExplosion();
				if (Main.myPlayer == owner)
				{
					friendly = true;
					int width4 = base.width;
					int height5 = base.height;
					int num123 = penetrate;
					base.position = base.Center;
					base.width = (base.height = 60);
					base.Center = base.position;
					penetrate = -1;
					maxPenetrate = -1;
					Damage();
					penetrate = num123;
					base.position = base.Center;
					base.width = width4;
					base.height = height5;
					base.Center = base.position;
				}
			}
			if (type == 608)
			{
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				for (int num124 = 0; num124 < 4; num124++)
				{
					int num125 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num125].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num126 = 0; num126 < 30; num126++)
				{
					int num127 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num127].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num127].noGravity = true;
					Dust dust = Main.dust[num127];
					dust.velocity *= 3f;
					Main.dust[num127].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
					num127 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num127].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					dust = Main.dust[num127];
					dust.velocity *= 2f;
					Main.dust[num127].noGravity = true;
					Main.dust[num127].fadeIn = 2.5f;
					Main.dust[num127].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
				}
				for (int num128 = 0; num128 < 10; num128++)
				{
					int num129 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num129].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num129].noGravity = true;
					Dust dust = Main.dust[num129];
					dust.velocity *= 3f;
					Main.dust[num129].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
				}
				for (int num130 = 0; num130 < 10; num130++)
				{
					int num131 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num131].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num131].noGravity = true;
					Dust dust = Main.dust[num131];
					dust.velocity *= 3f;
				}
				for (int num132 = 0; num132 < 2; num132++)
				{
					int num133 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num133].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Gore gore = Main.gore[num133];
					gore.velocity *= 0.3f;
					Main.gore[num133].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num133].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			else if (type == 661)
			{
				base.position = base.Center;
				base.width = (base.height = 160);
				base.Center = base.position;
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				Vector2 position4 = base.Center + Vector2.One * -20f;
				int num134 = 40;
				int height6 = num134;
				for (int num135 = 0; num135 < 4; num135++)
				{
					int num136 = Dust.NewDust(position4, num134, height6, 240, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num136].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * num134 / 2f;
				}
				for (int num137 = 0; num137 < 20; num137++)
				{
					int num138 = Dust.NewDust(position4, num134, height6, 62, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num138].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * num134 / 2f;
					Main.dust[num138].noGravity = true;
					Main.dust[num138].noLight = true;
					Dust dust = Main.dust[num138];
					dust.velocity *= 3f;
					dust = Main.dust[num138];
					dust.velocity += DirectionTo(Main.dust[num138].position) * (2f + Main.rand.NextFloat() * 4f);
					num138 = Dust.NewDust(position4, num134, height6, 62, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num138].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * num134 / 2f;
					dust = Main.dust[num138];
					dust.velocity *= 2f;
					Main.dust[num138].noGravity = true;
					Main.dust[num138].fadeIn = 1f;
					Main.dust[num138].color = Color.Crimson * 0.5f;
					Main.dust[num138].noLight = true;
					dust = Main.dust[num138];
					dust.velocity += DirectionTo(Main.dust[num138].position) * 8f;
				}
				for (int num139 = 0; num139 < 20; num139++)
				{
					int num140 = Dust.NewDust(position4, num134, height6, 62, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num140].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * num134 / 2f;
					Main.dust[num140].noGravity = true;
					Main.dust[num140].noLight = true;
					Dust dust = Main.dust[num140];
					dust.velocity *= 3f;
					dust = Main.dust[num140];
					dust.velocity += DirectionTo(Main.dust[num140].position) * 2f;
				}
				for (int num141 = 0; num141 < 70; num141++)
				{
					int num142 = Dust.NewDust(position4, num134, height6, 240, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num142].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * num134 / 2f;
					Main.dust[num142].noGravity = true;
					Dust dust = Main.dust[num142];
					dust.velocity *= 3f;
					dust = Main.dust[num142];
					dust.velocity += DirectionTo(Main.dust[num142].position) * 3f;
				}
			}
			else if (type == 617)
			{
				base.position = base.Center;
				base.width = (base.height = 176);
				base.Center = base.position;
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				for (int num143 = 0; num143 < 4; num143++)
				{
					int num144 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 240, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num144].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num145 = 0; num145 < 30; num145++)
				{
					int num146 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 62, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num146].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num146].noGravity = true;
					Dust dust = Main.dust[num146];
					dust.velocity *= 3f;
					num146 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 90, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num146].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					dust = Main.dust[num146];
					dust.velocity *= 2f;
					Main.dust[num146].noGravity = true;
					Main.dust[num146].fadeIn = 1f;
					Main.dust[num146].color = Color.Crimson * 0.5f;
				}
				for (int num147 = 0; num147 < 10; num147++)
				{
					int num148 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 62, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num148].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num148].noGravity = true;
					Dust dust = Main.dust[num148];
					dust.velocity *= 3f;
				}
				for (int num149 = 0; num149 < 10; num149++)
				{
					int num150 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 240, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num150].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num150].noGravity = true;
					Dust dust = Main.dust[num150];
					dust.velocity *= 3f;
				}
				for (int num151 = 0; num151 < 2; num151++)
				{
					int num152 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num152].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Gore gore = Main.gore[num152];
					gore.velocity *= 0.3f;
					Main.gore[num152].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num152].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				if (Main.myPlayer == owner)
				{
					for (int num153 = 0; num153 < 1000; num153++)
					{
						if (Main.projectile[num153].active && Main.projectile[num153].type == 618 && Main.projectile[num153].ai[1] == (float)whoAmI)
						{
							Main.projectile[num153].Kill();
						}
					}
					int num154 = Main.rand.Next(5, 9);
					int num155 = Main.rand.Next(5, 9);
					int num156 = Utils.SelectRandom<int>(Main.rand, 86, 90);
					int num157 = ((num156 == 86) ? 90 : 86);
					for (int num158 = 0; num158 < num154; num158++)
					{
						Vector2 vector10 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
						Vector2 vector11 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector11.X == 0f && vector11.Y == 0f)
						{
							vector11 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector11.Normalize();
						if (vector11.Y > 0.2f)
						{
							vector11.Y *= -1f;
						}
						vector11 *= (float)Main.rand.Next(70, 101) * 0.1f;
						NewProjectile(vector10.X, vector10.Y, vector11.X, vector11.Y, 620, (int)((double)damage * 0.65), knockBack * 0.8f, owner, num156);
					}
					for (int num159 = 0; num159 < num155; num159++)
					{
						Vector2 vector12 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
						Vector2 vector13 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector13.X == 0f && vector13.Y == 0f)
						{
							vector13 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector13.Normalize();
						if (vector13.Y > 0.4f)
						{
							vector13.Y *= -1f;
						}
						vector13 *= (float)Main.rand.Next(40, 81) * 0.1f;
						NewProjectile(vector12.X, vector12.Y, vector13.X, vector13.Y, 620, (int)((double)damage * 0.65), knockBack * 0.8f, owner, num157);
					}
				}
			}
			else if (type == 658)
			{
				for (int num160 = 0; num160 < 10; num160++)
				{
					int num161 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 269, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num161].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num161].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust = Main.dust[num161];
						dust.type++;
					}
					else
					{
						Main.dust[num161].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num161].noGravity = true;
					dust = Main.dust[num161];
					dust.velocity *= 1.25f;
					dust = Main.dust[num161];
					dust.velocity -= base.oldVelocity / 10f;
				}
			}
			else if (type == 620 || type == 618)
			{
				if (type == 618)
				{
					ai[0] = 86f;
				}
				for (int num162 = 0; num162 < 10; num162++)
				{
					int num163 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, (int)ai[0], base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num163].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num163].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust = Main.dust[num163];
						dust.type++;
					}
					else
					{
						Main.dust[num163].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num163].noGravity = true;
					dust = Main.dust[num163];
					dust.velocity *= 1.25f;
					dust = Main.dust[num163];
					dust.velocity -= base.oldVelocity / 10f;
				}
			}
			else if (type == 619)
			{
				SoundEngine.PlaySound(SoundID.Item50, base.position);
				for (int num164 = 0; num164 < 20; num164++)
				{
					int num165 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, (int)ai[0], base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num165].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num165].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
						dust = Main.dust[num165];
						dust.type++;
					}
					else
					{
						Main.dust[num165].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num165].noGravity = true;
					dust = Main.dust[num165];
					dust.velocity *= 2.5f;
					dust = Main.dust[num165];
					dust.velocity -= base.oldVelocity / 10f;
				}
				if (Main.myPlayer == owner)
				{
					int num166 = Main.rand.Next(3, 6);
					for (int num167 = 0; num167 < num166; num167++)
					{
						Vector2 vector14 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector14.X == 0f && vector14.Y == 0f)
						{
							vector14 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector14.Normalize();
						vector14 *= (float)Main.rand.Next(70, 101) * 0.1f;
						NewProjectile(oldPosition.X + (float)(base.width / 2), oldPosition.Y + (float)(base.height / 2), vector14.X, vector14.Y, 620, (int)((double)damage * 0.8), knockBack * 0.8f, owner, ai[0]);
					}
				}
			}
			if (type == 601)
			{
				Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[0]);
				Color color = portalColor;
				color.A = byte.MaxValue;
				for (int num168 = 0; num168 < 6; num168++)
				{
					Vector2 value12 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f * Main.rand.NextFloat());
					Dust dust22 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263)];
					dust22.position = base.Center;
					dust22.velocity = value12 + base.velocity / 5f;
					dust22.color = color;
					dust22.scale = 2f;
					dust22.noLight = true;
					dust22.noGravity = true;
				}
			}
			if (type == 596)
			{
				base.position = base.Center;
				base.width = (base.height = 60);
				base.Center = base.position;
				int num169 = 40;
				if (Main.expertMode)
				{
					num169 = 30;
				}
				damage = num169;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				for (int num170 = 0; num170 < 4; num170++)
				{
					int num171 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num171].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num172 = 0; num172 < 20; num172++)
				{
					int num173 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num173].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num173].noGravity = true;
					Dust dust = Main.dust[num173];
					dust.velocity *= 2f;
				}
				for (int num174 = 0; num174 < 10; num174++)
				{
					int num175 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num175].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num175].noGravity = true;
					Dust dust = Main.dust[num175];
					dust.velocity *= 2f;
				}
			}
			if (type == 659)
			{
				if (ai[0] >= 0f)
				{
					base.position = base.Center;
					base.width = (base.height = 40);
					base.Center = base.position;
					Damage();
					SoundEngine.PlaySound(SoundID.Item14, base.position);
					for (int num176 = 0; num176 < 2; num176++)
					{
						int num177 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num177].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					}
					for (int num178 = 0; num178 < 10; num178++)
					{
						int num179 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, 0f, 0f, 0, default(Color), 2.5f);
						Main.dust[num179].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
						Main.dust[num179].noGravity = true;
						Dust dust = Main.dust[num179];
						dust.velocity *= 2f;
					}
					for (int num180 = 0; num180 < 5; num180++)
					{
						int num181 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num181].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
						Main.dust[num181].noGravity = true;
						Dust dust = Main.dust[num181];
						dust.velocity *= 2f;
					}
				}
			}
			else if (type >= 625 && type <= 628)
			{
				for (int num182 = 0; num182 < 6; num182++)
				{
					int num183 = Dust.NewDust(base.position, base.width, base.height, 135, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num183].noGravity = true;
					Main.dust[num183].noLight = true;
				}
			}
			if (type == 631)
			{
				int num184 = Main.rand.Next(5, 10);
				for (int num185 = 0; num185 < num184; num185++)
				{
					int num186 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
					Dust dust = Main.dust[num186];
					dust.velocity *= 1.6f;
					Main.dust[num186].velocity.Y -= 1f;
					dust = Main.dust[num186];
					dust.position -= Vector2.One * 4f;
					Main.dust[num186].position = Vector2.Lerp(Main.dust[num186].position, base.Center, 0.5f);
					Main.dust[num186].noGravity = true;
				}
			}
			if (type == 539)
			{
				base.position = base.Center;
				base.width = (base.height = 80);
				base.Center = base.position;
				Damage();
				SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 7);
				for (int num187 = 0; num187 < 4; num187++)
				{
					int num188 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num188].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num189 = 0; num189 < 20; num189++)
				{
					int num190 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 176, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num190].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num190].noGravity = true;
					Dust dust = Main.dust[num190];
					dust.velocity *= 3f;
				}
				for (int num191 = 0; num191 < 20; num191++)
				{
					int num192 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 180, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num192].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num192].noGravity = true;
					Dust dust = Main.dust[num192];
					dust.velocity *= 3f;
				}
				for (int num193 = 0; num193 < 10; num193++)
				{
					int num194 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num194].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num194].noGravity = true;
					Dust dust = Main.dust[num194];
					dust.velocity *= 3f;
				}
			}
			else if (type == 585)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y, 27);
				for (int num195 = 0; num195 < 20; num195++)
				{
					int num196 = Dust.NewDust(base.position, base.width, base.height, 26, 0f, 0f, 100);
					Main.dust[num196].noGravity = true;
					Dust dust = Main.dust[num196];
					dust.velocity *= 1.2f;
					Main.dust[num196].scale = 1.3f;
					dust = Main.dust[num196];
					dust.velocity -= base.oldVelocity * 0.3f;
					num196 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), base.width - 8, base.height - 8, 27, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num196].noGravity = true;
					dust = Main.dust[num196];
					dust.velocity *= 3f;
				}
			}
			else if (type == 590)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y, 27);
				for (int num197 = 0; num197 < 10; num197++)
				{
					int num198 = Dust.NewDust(base.position, base.width, base.height, 165, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust = Main.dust[num198];
					dust.velocity *= 2f;
					Main.dust[num198].noGravity = true;
				}
				float num199 = 0.6f + Main.rand.NextFloat() * 0.4f;
				int num200 = Gore.NewGore(base.position, Vector2.Zero, 375, num199);
				Gore gore = Main.gore[num200];
				gore.velocity *= 0.3f;
				num200 = Gore.NewGore(base.position, Vector2.Zero, 376, num199);
				gore = Main.gore[num200];
				gore.velocity *= 0.3f;
				num200 = Gore.NewGore(base.position, Vector2.Zero, 377, num199);
				gore = Main.gore[num200];
				gore.velocity *= 0.3f;
			}
			else if (type == 587)
			{
				Color newColor4 = Main.hslToRgb(ai[1], 1f, 0.5f);
				newColor4.A = 200;
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num201 = 0; num201 < 10; num201++)
				{
					int num202 = Dust.NewDust(base.position, base.width, base.height, 76, 0f, 0f, 0, newColor4);
					Main.dust[num202].noGravity = true;
					Dust dust = Main.dust[num202];
					dust.velocity *= 1.2f;
					Main.dust[num202].scale = 0.9f;
					dust = Main.dust[num202];
					dust.velocity -= base.oldVelocity * 0.3f;
					num202 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), base.width - 8, base.height - 8, 76, 0f, 0f, 0, newColor4, 1.1f);
					Main.dust[num202].noGravity = true;
					dust = Main.dust[num202];
					dust.velocity *= 2f;
				}
			}
			else if (type == 572)
			{
				for (int num203 = 0; num203 < 15; num203++)
				{
					int num204 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 40, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 100);
					Dust dust = Main.dust[num204];
					dust.velocity *= 3f;
					Main.dust[num204].noGravity = true;
					Main.dust[num204].scale = 1.25f;
					Main.dust[num204].position = (base.Center + base.position) / 2f;
				}
			}
			else if (type == 581)
			{
				for (int num205 = 0; num205 < 30; num205++)
				{
					int num206 = Utils.SelectRandom<int>(Main.rand, 229, 229, 161);
					Dust dust23 = Main.dust[Dust.NewDust(base.position, base.width, base.height, num206)];
					dust23.noGravity = true;
					dust23.scale = 1.25f + Main.rand.NextFloat();
					dust23.fadeIn = 0.25f;
					Dust dust = dust23;
					dust.velocity *= 2f;
					dust23.noLight = true;
				}
			}
			else if (type == 671)
			{
				for (int num207 = 0; num207 < 30; num207++)
				{
					int num208 = Utils.SelectRandom<int>(Main.rand, 27, 27, 62);
					Dust dust24 = Main.dust[Dust.NewDust(base.position, base.width, base.height, num208)];
					dust24.noGravity = true;
					dust24.scale = 1.25f + Main.rand.NextFloat();
					dust24.fadeIn = 0.25f;
					Dust dust = dust24;
					dust.velocity *= 2f;
					dust24.noLight = true;
				}
			}
			else if (type == 811 || type == 814)
			{
				for (int num209 = 0; num209 < 30; num209++)
				{
					Dust dust25 = Main.dust[Dust.NewDust(base.position, base.width, base.height, 5)];
					dust25.scale = 1.25f + Main.rand.NextFloat();
					Dust dust = dust25;
					dust.velocity *= 2f;
				}
			}
			else if (type == 819)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num210 = 0; num210 < 20; num210++)
				{
					Dust dust26 = Main.dust[Dust.NewDust(base.position, base.width, base.height, 5)];
					dust26.scale = 1f + Main.rand.NextFloat() * 0.5f;
					Dust dust = dust26;
					dust.velocity *= 1.5f;
				}
			}
			else if (type == 675)
			{
				for (int num211 = 0; num211 < 40; num211++)
				{
					int num212 = Utils.SelectRandom<int>(Main.rand, 27, 242, 73, 72, 71, 255, 255, 255);
					Dust dust27 = Main.dust[Dust.NewDust(base.position, base.width, base.height, num212)];
					dust27.noGravity = true;
					dust27.scale = 1.25f + Main.rand.NextFloat();
					dust27.fadeIn = 0.25f;
					Dust dust = dust27;
					dust.velocity *= 3f;
					dust27.noLight = true;
				}
			}
			else if (type == 676)
			{
				for (int num213 = 0; num213 < 120; num213++)
				{
					int num214 = Utils.SelectRandom<int>(Main.rand, 4, 256);
					Dust dust28 = Main.dust[Dust.NewDust(base.position, base.width, base.height, num214, 0f, 0f, 100)];
					dust28.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
					dust28.fadeIn = 0.5f;
					Dust dust = dust28;
					dust.velocity *= 4.5f;
					dust28.noLight = true;
					if (dust28.velocity.Y > 0f)
					{
						dust = dust28;
						dust.velocity *= -0.5f;
					}
					if (dust28.type == 4)
					{
						dust28.color = new Color(80, 170, 40, 120);
					}
				}
				for (int num215 = 0; num215 < 10; num215++)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1024);
				}
				for (int num216 = 0; num216 < 10; num216++)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1025);
				}
				for (int num217 = 0; num217 < 10; num217++)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1026);
				}
				for (int num218 = 0; num218 < 20; num218++)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-0.5f, 0.5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 2f), 1026);
				}
				if (Main.netMode != 2)
				{
					Player player = Main.player[Main.myPlayer];
					if (!player.dead && player.active && (player.Center - base.Center).Length() < 300f && !player.creativeGodMode)
					{
						player.AddBuff(197, 900, quiet: false);
					}
				}
			}
			else if (type == 686)
			{
				Rectangle hitbox3 = base.Hitbox;
				for (int num219 = 0; num219 < oldPos.Length / 2; num219 += 2)
				{
					hitbox3.X = (int)oldPos[num219].X;
					hitbox3.Y = (int)oldPos[num219].Y;
					for (int num220 = 0; num220 < 3; num220++)
					{
						int num221 = Utils.SelectRandom<int>(Main.rand, 6, 55, 158);
						int num222 = Dust.NewDust(hitbox3.TopLeft(), base.width, base.height, num221, direction, -2.5f);
						Main.dust[num222].alpha = 200;
						Dust dust = Main.dust[num222];
						dust.velocity *= 2.4f;
						dust = Main.dust[num222];
						dust.scale += Main.rand.NextFloat();
						dust = Main.dust[num222];
						dust.scale -= 0.5f;
						if (Main.dust[num222].type == 55)
						{
							Main.dust[num222].color = Color.Lerp(Color.Red, Color.Gold, Main.rand.NextFloat());
						}
						Main.dust[num222].noLight = true;
					}
				}
				for (int num223 = 10; num223 < oldPos.Length; num223 += 2)
				{
					hitbox3.X = (int)oldPos[num223].X;
					hitbox3.Y = (int)oldPos[num223].Y;
					for (int num224 = 0; num224 < 2; num224++)
					{
						int num225 = Utils.SelectRandom<int>(Main.rand, 55);
						int num226 = Dust.NewDust(hitbox3.TopLeft(), base.width, base.height, num225, direction, -2.5f);
						Main.dust[num226].alpha = 120;
						Dust dust = Main.dust[num226];
						dust.velocity *= 2.4f;
						dust = Main.dust[num226];
						dust.scale += Main.rand.NextFloat() * 0.7f;
						dust = Main.dust[num226];
						dust.scale -= 0.5f;
						if (Main.dust[num226].type == 55)
						{
							Main.dust[num226].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num226].noLight = true;
					}
				}
				for (int num227 = 5; num227 < oldPos.Length; num227++)
				{
					hitbox3.X = (int)oldPos[num227].X;
					hitbox3.Y = (int)oldPos[num227].Y;
					for (int num228 = 0; num228 < 1; num228++)
					{
						int num229 = Utils.SelectRandom<int>(Main.rand, 55);
						int num230 = Dust.NewDust(hitbox3.TopLeft(), base.width, base.height, num229, direction, -2.5f);
						Main.dust[num230].alpha = 80;
						Dust dust = Main.dust[num230];
						dust.velocity *= 0.3f;
						dust = Main.dust[num230];
						dust.velocity += base.velocity * 0.5f;
						dust = Main.dust[num230];
						dust.scale += Main.rand.NextFloat() * 0.7f;
						dust = Main.dust[num230];
						dust.scale -= 0.5f;
						if (Main.dust[num230].type == 55)
						{
							Main.dust[num230].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num230].noLight = true;
					}
				}
				for (int num231 = 0; num231 < 30; num231++)
				{
					int num232 = 228;
					Dust dust29 = Main.dust[Dust.NewDust(base.position, base.width, base.height, num232)];
					dust29.noGravity = true;
					dust29.scale = 1.25f + Main.rand.NextFloat();
					dust29.fadeIn = 1.5f;
					Dust dust = dust29;
					dust.velocity *= 6f;
					dust29.noLight = true;
				}
			}
			if (type == 405)
			{
				SoundEngine.PlaySound(SoundID.Item54, base.position);
				_ = base.Center;
				for (int num233 = 0; num233 < 20; num233++)
				{
					int num234 = 10;
					int num235 = Dust.NewDust(base.Center - Vector2.One * num234, num234 * 2, num234 * 2, 212);
					Dust dust30 = Main.dust[num235];
					Vector2 value13 = Vector2.Normalize(dust30.position - base.Center);
					dust30.position = base.Center + value13 * num234 * scale;
					if (num233 < 30)
					{
						dust30.velocity = value13 * dust30.velocity.Length();
					}
					else
					{
						dust30.velocity = value13 * Main.rand.Next(45, 91) / 10f;
					}
					dust30.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
					dust30.color = Color.Lerp(dust30.color, Color.White, 0.3f);
					dust30.noGravity = true;
					dust30.scale = 0.7f;
				}
			}
			if (type == 501)
			{
				SoundEngine.PlaySound(13, (int)base.position.X, (int)base.position.Y);
				int num236 = 20;
				base.position.X -= num236;
				base.position.Y -= num236;
				base.width += num236 * 2;
				base.height += num236 * 2;
				num236 += 20;
				for (int num237 = 0; num237 < 20; num237++)
				{
					int num238 = Dust.NewDust(base.position, base.width, base.height, 188, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num238];
					dust.velocity *= 0.5f;
				}
				for (int num239 = 0; num239 < 5; num239++)
				{
					int num240 = Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(base.width), base.position.Y + (float)Main.rand.Next(base.height)), default(Vector2), Main.rand.Next(435, 438));
					Gore gore = Main.gore[num240];
					gore.velocity *= 0.5f;
					switch (num239)
					{
					case 0:
						Main.gore[num240].velocity.X += 1f;
						Main.gore[num240].velocity.Y += 1f;
						break;
					case 1:
						Main.gore[num240].velocity.X -= 1f;
						Main.gore[num240].velocity.Y += 1f;
						break;
					case 2:
						Main.gore[num240].velocity.X += 1f;
						Main.gore[num240].velocity.Y -= 1f;
						break;
					default:
						Main.gore[num240].velocity.X -= 1f;
						Main.gore[num240].velocity.Y -= 1f;
						break;
					}
					gore = Main.gore[num240];
					gore.velocity *= 0.5f;
				}
				base.position.X -= num236;
				base.position.Y -= num236;
				base.width += num236 * 2;
				base.height += num236 * 2;
				Damage();
			}
			if (type == 410)
			{
				SoundEngine.PlaySound(SoundID.Item54, base.position);
				_ = base.Center;
				for (int num241 = 0; num241 < 10; num241++)
				{
					int num242 = (int)(10f * ai[1]);
					int num243 = Dust.NewDust(base.Center - Vector2.One * num242, num242 * 2, num242 * 2, 212);
					Dust dust31 = Main.dust[num243];
					Vector2 value14 = Vector2.Normalize(dust31.position - base.Center);
					dust31.position = base.Center + value14 * num242 * scale;
					if (num241 < 30)
					{
						dust31.velocity = value14 * dust31.velocity.Length();
					}
					else
					{
						dust31.velocity = value14 * Main.rand.Next(45, 91) / 10f;
					}
					dust31.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
					dust31.color = Color.Lerp(dust31.color, Color.White, 0.3f);
					dust31.noGravity = true;
					dust31.scale = 0.7f;
				}
			}
			if (type == 629 && Main.netMode != 1)
			{
				switch (Main.npc[(int)ai[0]].type)
				{
				case 517:
					if (NPC.ShieldStrengthTowerSolar != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerSolar = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerSolar - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				case 422:
					if (NPC.ShieldStrengthTowerVortex != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerVortex = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerVortex - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				case 507:
					if (NPC.ShieldStrengthTowerNebula != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerNebula = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerNebula - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				case 493:
					if (NPC.ShieldStrengthTowerStardust != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerStardust = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerStardust - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				}
				Main.npc[(int)ai[0]].netUpdate = true;
				NetMessage.SendData(101);
			}
			if (aiStyle == 105 && owner == Main.myPlayer && ai[1] == 0f)
			{
				Vector2 vector15 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
				vector15.Normalize();
				vector15 *= 0.3f;
				NewProjectile(base.Center.X, base.Center.Y, vector15.X, vector15.Y, Main.rand.Next(569, 572), damage, 0f, owner);
			}
			if (type == 452)
			{
				SoundEngine.PlaySound(29, (int)base.position.X, (int)base.position.Y, 103);
				base.position = base.Center;
				base.width = (base.height = 144);
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				for (int num244 = 0; num244 < 4; num244++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num245 = 0; num245 < 40; num245++)
				{
					int num246 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num246].noGravity = true;
					Dust dust = Main.dust[num246];
					dust.velocity *= 3f;
					num246 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num246];
					dust.velocity *= 2f;
					Main.dust[num246].noGravity = true;
				}
				for (int num247 = 0; num247 < 1; num247++)
				{
					int num248 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num248];
					gore.velocity *= 0.3f;
					Main.gore[num248].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num248].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			if (type == 454)
			{
				SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 6);
				base.position = base.Center;
				base.width = (base.height = 208);
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				for (int num249 = 0; num249 < 7; num249++)
				{
					int num250 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num250].position = new Vector2(base.width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
				}
				for (int num251 = 0; num251 < 60; num251++)
				{
					int num252 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num252].position = new Vector2(base.width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
					Main.dust[num252].noGravity = true;
					Dust dust = Main.dust[num252];
					dust.velocity *= 1f;
					num252 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num252].position = new Vector2(base.width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
					dust = Main.dust[num252];
					dust.velocity *= 1f;
					Main.dust[num252].noGravity = true;
				}
				for (int num253 = 0; num253 < 3; num253++)
				{
					int num254 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num254];
					gore.velocity *= 0.3f;
					Main.gore[num254].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num254].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			if (type == 467)
			{
				base.position = base.Center;
				base.width = (base.height = 176);
				base.Center = base.position;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				for (int num255 = 0; num255 < 4; num255++)
				{
					int num256 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num256].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num257 = 0; num257 < 30; num257++)
				{
					int num258 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num258].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num258].noGravity = true;
					Dust dust = Main.dust[num258];
					dust.velocity *= 3f;
					num258 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num258].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					dust = Main.dust[num258];
					dust.velocity *= 2f;
					Main.dust[num258].noGravity = true;
					Main.dust[num258].fadeIn = 2.5f;
				}
				for (int num259 = 0; num259 < 10; num259++)
				{
					int num260 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num260].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num260].noGravity = true;
					Dust dust = Main.dust[num260];
					dust.velocity *= 3f;
				}
				for (int num261 = 0; num261 < 10; num261++)
				{
					int num262 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num262].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num262].noGravity = true;
					Dust dust = Main.dust[num262];
					dust.velocity *= 3f;
				}
				for (int num263 = 0; num263 < 2; num263++)
				{
					int num264 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num264].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Gore gore = Main.gore[num264];
					gore.velocity *= 0.3f;
					Main.gore[num264].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num264].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			if (type == 468)
			{
				base.position = base.Center;
				base.width = (base.height = 176);
				base.Center = base.position;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				for (int num265 = 0; num265 < 4; num265++)
				{
					int num266 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num266].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
				}
				for (int num267 = 0; num267 < 20; num267++)
				{
					int num268 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num268].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Main.dust[num268].noGravity = true;
					Dust dust = Main.dust[num268];
					dust.velocity *= 3f;
					num268 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num268].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					dust = Main.dust[num268];
					dust.velocity *= 2f;
					Main.dust[num268].noGravity = true;
					Main.dust[num268].fadeIn = 2.5f;
				}
				for (int num269 = 0; num269 < 10; num269++)
				{
					int num270 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num270].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num270].noGravity = true;
					Dust dust = Main.dust[num270];
					dust.velocity *= 3f;
				}
				for (int num271 = 0; num271 < 10; num271++)
				{
					int num272 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num272].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * base.width / 2f;
					Main.dust[num272].noGravity = true;
					Dust dust = Main.dust[num272];
					dust.velocity *= 3f;
				}
				for (int num273 = 0; num273 < 2; num273++)
				{
					int num274 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num274].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * base.width / 2f;
					Gore gore = Main.gore[num274];
					gore.velocity *= 0.3f;
					Main.gore[num274].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num274].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			if (type == 485)
			{
				for (int num275 = 0; num275 < 15; num275++)
				{
					int num276 = Dust.NewDust(base.position, base.width, base.height, 6);
					Main.dust[num276].noGravity = true;
					Dust dust = Main.dust[num276];
					dust.velocity -= base.oldVelocity * Main.rand.Next(20, 60) * 0.01f;
				}
			}
			else if (type == 484)
			{
				for (int num277 = 0; num277 < 5; num277++)
				{
					int num278 = Dust.NewDust(base.position, base.width, base.height, 78);
					Main.dust[num278].noGravity = true;
					Dust dust = Main.dust[num278];
					dust.velocity -= base.oldVelocity / 5f;
					Main.dust[num278].scale = 0.85f;
				}
			}
			else if (type == 483)
			{
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				if (owner == Main.myPlayer)
				{
					int num279 = Main.rand.Next(4, 8);
					int[] array = new int[num279];
					int num280 = 0;
					for (int num281 = 0; num281 < 200; num281++)
					{
						if (Main.npc[num281].CanBeChasedBy(this, ignoreDontTakeDamage: true) && Collision.CanHitLine(base.position, base.width, base.height, Main.npc[num281].position, Main.npc[num281].width, Main.npc[num281].height))
						{
							array[num280] = num281;
							num280++;
							if (num280 == num279)
							{
								break;
							}
						}
					}
					if (num280 > 1)
					{
						for (int num282 = 0; num282 < 100; num282++)
						{
							int num283 = Main.rand.Next(num280);
							int num284;
							for (num284 = num283; num284 == num283; num284 = Main.rand.Next(num280))
							{
							}
							int num285 = array[num283];
							array[num283] = array[num284];
							array[num284] = num285;
						}
					}
					Vector2 vector16 = new Vector2(-1f, -1f);
					for (int num286 = 0; num286 < num280; num286++)
					{
						Vector2 vector17 = Main.npc[array[num286]].Center - base.Center;
						vector17.Normalize();
						vector16 += vector17;
					}
					vector16.Normalize();
					for (int num287 = 0; num287 < num279; num287++)
					{
						float num288 = Main.rand.Next(8, 15);
						Vector2 vector18 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						vector18.Normalize();
						if (num280 > 0)
						{
							vector18 += vector16;
							vector18.Normalize();
						}
						vector18 *= num288;
						if (num280 > 0)
						{
							num280--;
							vector18 = Main.npc[array[num280]].Center - base.Center;
							vector18.Normalize();
							vector18 *= num288;
						}
						NewProjectile(base.Center.X, base.Center.Y, vector18.X, vector18.Y, 484, (int)((double)damage * 0.7), knockBack * 0.7f, owner);
					}
				}
				for (int num289 = 0; num289 < 20; num289++)
				{
					int num290 = Dust.NewDust(base.position, base.width, base.height, 78);
					Main.dust[num290].noGravity = true;
					Dust dust = Main.dust[num290];
					dust.velocity *= 4f;
				}
				for (int num291 = 0; num291 < 7; num291++)
				{
					int num292 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num292];
					dust.velocity *= 0.9f;
					Main.dust[num292].scale = 0.9f;
				}
				for (int num293 = 0; num293 < 3; num293++)
				{
					int num294 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num294].noGravity = true;
					Dust dust = Main.dust[num294];
					dust.velocity *= 3f;
					num294 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num294];
					dust.velocity *= 2f;
				}
				int num295 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num295];
				gore.velocity *= 0.3f;
				Main.gore[num295].velocity.X += Main.rand.Next(-1, 2);
				Main.gore[num295].velocity.Y += Main.rand.Next(-1, 2);
				if (owner == Main.myPlayer)
				{
					int num296 = 100;
					base.position.X -= num296 / 2;
					base.position.Y -= num296 / 2;
					base.width += num296;
					base.height++;
					penetrate = -1;
					Damage();
				}
			}
			if (type == 523)
			{
				SoundEngine.PlaySound(SoundID.Item54, base.position);
				for (int num297 = 0; num297 < 25; num297++)
				{
					int num298 = Dust.NewDust(base.position, base.width, base.height, 256);
					Main.dust[num298].noGravity = true;
					Main.dust[num298].position = (Main.dust[num298].position + base.position) / 2f;
					Main.dust[num298].velocity = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					Main.dust[num298].velocity.Normalize();
					Dust dust = Main.dust[num298];
					dust.velocity *= (float)Main.rand.Next(1, 30) * 0.1f;
					Main.dust[num298].alpha = alpha;
				}
			}
			else if (type == 522)
			{
				SoundEngine.PlaySound(SoundID.Item118, base.position);
				for (int num299 = 0; num299 < 10; num299++)
				{
					int num300 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 254, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num300].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num300].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust = Main.dust[num300];
						dust.type++;
					}
					else
					{
						Main.dust[num300].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num300].noGravity = true;
					dust = Main.dust[num300];
					dust.velocity *= 1.25f;
					dust = Main.dust[num300];
					dust.velocity -= base.oldVelocity / 10f;
				}
			}
			else if (type == 521)
			{
				SoundEngine.PlaySound(SoundID.Item110, base.position);
				for (int num301 = 0; num301 < 20; num301++)
				{
					int num302 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 254, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num302].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num302].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
						dust = Main.dust[num302];
						dust.type++;
					}
					else
					{
						Main.dust[num302].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num302].noGravity = true;
					dust = Main.dust[num302];
					dust.velocity *= 2.5f;
					dust = Main.dust[num302];
					dust.velocity -= base.oldVelocity / 10f;
				}
				if (Main.myPlayer == owner)
				{
					int num303 = Main.rand.Next(3, 6);
					for (int num304 = 0; num304 < num303; num304++)
					{
						Vector2 vector19 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector19.X == 0f && vector19.Y == 0f)
						{
							vector19 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector19.Normalize();
						vector19 *= (float)Main.rand.Next(70, 101) * 0.1f;
						NewProjectile(oldPosition.X + (float)(base.width / 2), oldPosition.Y + (float)(base.height / 2), vector19.X, vector19.Y, 522, (int)((double)damage * 0.8), knockBack * 0.8f, owner);
					}
				}
			}
			if (type == 520)
			{
				SoundEngine.PlaySound(SoundID.Item50, base.position);
				for (int num305 = 0; num305 < 10; num305++)
				{
					int num306 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 252, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 0, default(Color), 0.75f);
					Main.dust[num306].noGravity = true;
					Dust dust = Main.dust[num306];
					dust.velocity -= base.oldVelocity / 3f;
				}
			}
			if (type == 459 || type == 709)
			{
				int num307 = 3;
				int num308 = 10;
				int num309 = 0;
				if (scale >= 1f)
				{
					base.position = base.Center;
					base.width = (base.height = 144);
					base.Center = base.position;
					num307 = 7;
					num308 = 30;
					num309 = 2;
					Damage();
				}
				for (int num310 = 0; num310 < num307; num310++)
				{
					int num311 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num311].position = new Vector2(base.width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
				}
				for (int num312 = 0; num312 < num308; num312++)
				{
					int num313 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 226, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num313].position = new Vector2(base.width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
					Main.dust[num313].noGravity = true;
					Dust dust = Main.dust[num313];
					dust.velocity *= 1f;
				}
				for (int num314 = 0; num314 < num309; num314++)
				{
					int num315 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num315];
					gore.velocity *= 0.3f;
					Main.gore[num315].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num315].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				if (type == 709 && Main.myPlayer == owner)
				{
					Rectangle value15 = new Rectangle((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
					for (int num316 = 0; num316 < 1000; num316++)
					{
						if (num316 != whoAmI && Main.projectile[num316].active && Main.projectile[num316].owner == owner && Main.projectile[num316].type == 443 && Main.projectile[num316].getRect().Intersects(value15))
						{
							Main.projectile[num316].ai[1] = 1f;
							Main.projectile[num316].velocity = (base.Center - Main.projectile[num316].Center) / 5f;
							Main.projectile[num316].netUpdate = true;
						}
					}
					int num317 = NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 443, damage, 0f, owner);
					Main.projectile[num317].timeLeft = 30 * Main.rand.Next(2, 6);
					float[] array2 = Main.projectile[num317].localAI;
					SlotId val = SoundEngine.PlayTrackedSound(SoundID.DD2_SkyDragonsFuryCircle, base.Center);
					array2[0] = ((SlotId)(val)).ToFloat();
				}
			}
			if (owner != Main.myPlayer && type == 453 && Main.player[owner].mount.AbilityActive)
			{
				Main.player[owner].mount.UseAbility(Main.player[owner], base.position, toggleOn: false);
			}
			if (type == 441)
			{
				Main.player[owner].mount.StopAbilityCharge();
			}
			if (type == 444)
			{
				SoundEngine.PlaySound(SoundID.Item96, base.position);
				int num318 = Main.rand.Next(5, 9);
				for (int num319 = 0; num319 < num318; num319++)
				{
					int num320 = Dust.NewDust(base.Center, 0, 0, 171, 0f, 0f, 100, default(Color), 1.4f);
					Dust dust = Main.dust[num320];
					dust.velocity *= 0.8f;
					Main.dust[num320].position = Vector2.Lerp(Main.dust[num320].position, base.Center, 0.5f);
					Main.dust[num320].noGravity = true;
				}
				if (owner == Main.myPlayer)
				{
					Vector2 value16 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY);
					if (Main.player[owner].gravDir == -1f)
					{
						value16.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
					}
					Vector2 vector20 = Vector2.Normalize(value16 - base.Center);
					vector20 *= localAI[1];
					NewProjectile(base.Center.X, base.Center.Y, vector20.X, vector20.Y, (int)localAI[0], damage, knockBack, owner);
				}
			}
			if (type == 472)
			{
				for (int num321 = 0; num321 < 20; num321++)
				{
					int num322 = Dust.NewDust(base.position, base.width, base.height, 30);
					Main.dust[num322].noGravity = true;
					Dust dust = Main.dust[num322];
					dust.velocity *= 0.45f;
					dust = Main.dust[num322];
					dust.velocity += base.velocity * 0.9f;
				}
			}
			if (type == 639 || type == 640)
			{
				int num323 = Main.rand.Next(5, 10);
				for (int num324 = 0; num324 < num323; num324++)
				{
					int num325 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num325];
					dust.velocity *= 1.6f;
					Main.dust[num325].velocity.Y -= 1f;
					Main.dust[num325].position = Vector2.Lerp(Main.dust[num325].position, base.Center, 0.5f);
					Main.dust[num325].noGravity = true;
				}
				if (owner == Main.myPlayer && type == 639)
				{
					int num326 = num + 1;
					int nextSlot = GetNextSlot();
					if (Main.ProjectileUpdateLoopIndex < nextSlot && Main.ProjectileUpdateLoopIndex != -1)
					{
						num326++;
					}
					Vector2 vector21 = new Vector2(ai[0], ai[1]);
					NewProjectile(localAI[0], localAI[1], vector21.X, vector21.Y, 640, damage, knockBack, owner, 0f, num326);
				}
			}
			if (type == 684)
			{
				int num327 = Main.rand.Next(15, 25);
				for (int num328 = 0; num328 < num327; num328++)
				{
					int num329 = Dust.NewDust(base.Center, 0, 0, 60, 0f, 0f, 100, new Color(255, 255, 255, 0), 1.3f);
					Dust dust = Main.dust[num329];
					dust.velocity *= 8f * (0.3f + 0.7f * Main.rand.NextFloat());
					Main.dust[num329].fadeIn = 1.3f + Main.rand.NextFloat() * 0.2f;
					Main.dust[num329].noLight = true;
					Main.dust[num329].noGravity = true;
					dust = Main.dust[num329];
					dust.position += Main.dust[num329].velocity * 4f;
				}
			}
			if (type == 435)
			{
				int num330 = Main.rand.Next(5, 10);
				for (int num331 = 0; num331 < num330; num331++)
				{
					int num332 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num332];
					dust.velocity *= 1.6f;
					Main.dust[num332].velocity.Y -= 1f;
					Main.dust[num332].position = Vector2.Lerp(Main.dust[num332].position, base.Center, 0.5f);
					Main.dust[num332].noGravity = true;
				}
			}
			if (type == 732)
			{
				int num333 = Main.rand.Next(5, 10);
				for (int num334 = 0; num334 < num333; num334++)
				{
					int num335 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num335];
					dust.velocity *= 1.6f;
					Main.dust[num335].velocity.Y -= 1f;
					Main.dust[num335].velocity = Main.dust[num335].velocity * 0.5f + base.velocity * ((float)num334 / (float)num333) * 0.7f;
					Main.dust[num335].position = Vector2.Lerp(Main.dust[num335].position, base.Center, 0.5f);
					Main.dust[num335].noGravity = true;
				}
			}
			if (type == 682)
			{
				int num336 = 22;
				for (int num337 = 0; num337 < num336; num337++)
				{
					int num338 = Dust.NewDust(base.Center, 0, 0, 272, 0f, 0f, 0, default(Color), 0.5f);
					Dust dust = Main.dust[num338];
					dust.velocity *= 1.6f;
					Main.dust[num338].velocity.Y -= 1f;
					Main.dust[num338].position = Vector2.Lerp(Main.dust[num338].position, base.Center, 0.5f);
				}
			}
			if (type == 436)
			{
				int num339 = Main.rand.Next(5, 10);
				for (int num340 = 0; num340 < num339; num340++)
				{
					int num341 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num341];
					dust.velocity *= 1.6f;
					Main.dust[num341].velocity.Y -= 1f;
					Main.dust[num341].position = Vector2.Lerp(Main.dust[num341].position, base.Center, 0.5f);
					Main.dust[num341].noGravity = true;
				}
			}
			if (type == 462)
			{
				int num342 = Main.rand.Next(5, 10);
				for (int num343 = 0; num343 < num342; num343++)
				{
					int num344 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num344];
					dust.velocity *= 1.6f;
					Main.dust[num344].velocity.Y -= 1f;
					dust = Main.dust[num344];
					dust.position -= Vector2.One * 4f;
					Main.dust[num344].position = Vector2.Lerp(Main.dust[num344].position, base.Center, 0.5f);
					Main.dust[num344].noGravity = true;
				}
			}
			if (type == 442)
			{
				SoundEngine.PlaySound(SoundID.Item94, base.position);
				int num345 = Main.rand.Next(3, 7);
				for (int num346 = 0; num346 < num345; num346++)
				{
					int num347 = Dust.NewDust(base.position, base.width, base.height, 135, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust = Main.dust[num347];
					dust.velocity *= 2f;
					Main.dust[num347].noGravity = true;
				}
				if (Main.myPlayer == owner)
				{
					Rectangle value17 = new Rectangle((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
					for (int num348 = 0; num348 < 1000; num348++)
					{
						if (num348 != whoAmI && Main.projectile[num348].active && Main.projectile[num348].owner == owner && Main.projectile[num348].type == 443 && Main.projectile[num348].getRect().Intersects(value17))
						{
							Main.projectile[num348].ai[1] = 1f;
							Main.projectile[num348].velocity = (base.Center - Main.projectile[num348].Center) / 5f;
							Main.projectile[num348].netUpdate = true;
						}
					}
					NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 443, damage, 0f, owner);
				}
			}
			if (type == 440)
			{
				int num349 = Main.rand.Next(3, 7);
				for (int num350 = 0; num350 < num349; num350++)
				{
					int num351 = Dust.NewDust(base.Center - base.velocity / 2f, 0, 0, 135, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust = Main.dust[num351];
					dust.velocity *= 2f;
					Main.dust[num351].noGravity = true;
				}
			}
			if (type == 606)
			{
				int num352 = Main.rand.Next(3, 7);
				for (int num353 = 0; num353 < num352; num353++)
				{
					int num354 = Dust.NewDust(base.Center - base.velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.6f);
					Dust dust = Main.dust[num354];
					dust.velocity *= 1.5f;
					Main.dust[num354].noGravity = true;
				}
			}
			if (type == 449)
			{
				int num355 = Main.rand.Next(3, 7);
				for (int num356 = 0; num356 < num355; num356++)
				{
					int num357 = Dust.NewDust(base.Center - base.velocity / 2f, 0, 0, 228, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust = Main.dust[num357];
					dust.velocity *= 2f;
					Main.dust[num357].noGravity = true;
				}
			}
			if (type == 495)
			{
				for (int num358 = 0; num358 < 15; num358++)
				{
					int num359 = Dust.NewDust(base.Center, 10, 10, 27);
					Main.dust[num359].noGravity = true;
					Dust dust = Main.dust[num359];
					dust.velocity -= base.oldVelocity * 0.3f;
				}
			}
			if (type == 497)
			{
				for (int num360 = 0; num360 < 15; num360++)
				{
					int num361 = Dust.NewDust(base.Center, 10, 10, 27);
					Main.dust[num361].noGravity = true;
					Dust dust = Main.dust[num361];
					dust.velocity *= 2f;
					dust = Main.dust[num361];
					dust.velocity -= base.oldVelocity * 0.3f;
					dust = Main.dust[num361];
					dust.scale += (float)Main.rand.Next(150) * 0.001f;
				}
			}
			if (type == 448)
			{
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				base.position = base.Center;
				base.width = (base.height = 112);
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				for (int num362 = 0; num362 < 4; num362++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num363 = 0; num363 < 40; num363++)
				{
					int num364 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 228, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num364].noGravity = true;
					Dust dust = Main.dust[num364];
					dust.velocity *= 3f;
					num364 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 228, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num364];
					dust.velocity *= 2f;
					Main.dust[num364].noGravity = true;
				}
				for (int num365 = 0; num365 < 1; num365++)
				{
					int num366 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num366];
					gore.velocity *= 0.3f;
					Main.gore[num366].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num366].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			else if (type == 715 || type == 716 || type == 717 || type == 718)
			{
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				base.position = base.Center;
				base.width = (base.height = 128);
				if (type == 717 || type == 718)
				{
					base.width = (base.height = 240);
				}
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				Damage();
				AI_147_Explosion();
			}
			if (type == 616)
			{
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				base.position = base.Center;
				base.width = (base.height = 80);
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				for (int num367 = 0; num367 < 4; num367++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num368 = 0; num368 < 40; num368++)
				{
					int num369 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 200, default(Color), 2.5f);
					Main.dust[num369].noGravity = true;
					Dust dust = Main.dust[num369];
					dust.velocity *= 2f;
					num369 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 229, 0f, 0f, 200, default(Color), 1.5f);
					dust = Main.dust[num369];
					dust.velocity *= 1.2f;
					Main.dust[num369].noGravity = true;
				}
				for (int num370 = 0; num370 < 1; num370++)
				{
					int num371 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num371];
					gore.velocity *= 0.3f;
					Main.gore[num371].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num371].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			if (type == 502)
			{
				Vector2 value18 = new Vector2(base.width, base.height) / 2f;
				for (int num372 = 0; num372 < oldPos.Length; num372++)
				{
					if (!(oldPos[num372] == Vector2.Zero))
					{
						int num373 = Dust.NewDust(oldPos[num372] + value18, 0, 0, 66, 0f, 0f, 150, Color.Transparent, 0.7f);
						Main.dust[num373].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
						Main.dust[num373].noGravity = true;
					}
				}
			}
			if (type == 510)
			{
				SoundEngine.PlaySound(SoundID.Item107, base.position);
				Gore.NewGore(base.Center, -base.oldVelocity * 0.2f, 704);
				Gore.NewGore(base.Center, -base.oldVelocity * 0.2f, 705);
				if (owner == Main.myPlayer)
				{
					int num374 = Main.rand.Next(20, 31);
					for (int num375 = 0; num375 < num374; num375++)
					{
						Vector2 vector22 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						vector22.Normalize();
						vector22 *= (float)Main.rand.Next(10, 201) * 0.01f;
						NewProjectile(base.Center.X, base.Center.Y, vector22.X, vector22.Y, 511 + Main.rand.Next(3), damage, 1f, owner, 0f, Main.rand.Next(-45, 1));
					}
				}
			}
			if (type == 868 || type == 869)
			{
				SoundEngine.PlaySound(SoundID.Item107, base.position);
				for (int num376 = 0; num376 < 15; num376++)
				{
					Dust.NewDust(base.position, base.width, base.height, 13, 0f, -2f, 0, default(Color), 1.5f);
				}
				if (Main.netMode != 1 && type == 868)
				{
					WorldGen.TreeTops.RandomizeTreeStyleBasedOnWorldPosition(Main.rand, base.Center);
					NetMessage.SendData(7);
				}
				if (Main.netMode != 1 && type == 869)
				{
					WorldGen.RandomizeBackgroundBasedOnPlayer(Main.rand, Main.player[owner]);
					NetMessage.SendData(7);
				}
			}
			else if (type == 836)
			{
				for (int num377 = 0; num377 < 3; num377++)
				{
					int num378 = Dust.NewDust(base.position, base.width, base.height, 31, 0f, 0f, 50, Color.White, 0.8f);
					Dust dust = Main.dust[num378];
					dust.velocity *= 0.5f;
					Main.dust[num378].noGravity = true;
				}
			}
			if (type == 408)
			{
				for (int num379 = 0; num379 < 15; num379++)
				{
					int num380 = Dust.NewDust(base.Center - Vector2.One * 10f, 50, 50, 5, 0f, -2f);
					Dust dust = Main.dust[num380];
					dust.velocity /= 2f;
				}
				int num381 = 0;
				int num382 = 10;
				num381 = Gore.NewGore(base.Center, base.velocity * 0.8f, 584);
				Gore gore = Main.gore[num381];
				gore.timeLeft /= num382;
				num381 = Gore.NewGore(base.Center, base.velocity * 0.9f, 585);
				gore = Main.gore[num381];
				gore.timeLeft /= num382;
				num381 = Gore.NewGore(base.Center, base.velocity * 1f, 586);
				gore = Main.gore[num381];
				gore.timeLeft /= num382;
			}
			if (type == 385)
			{
				SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
				int num383 = 36;
				for (int num384 = 0; num384 < num383; num384++)
				{
					Vector2 spinningpoint = Vector2.Normalize(base.velocity) * new Vector2((float)base.width / 2f, base.height) * 0.75f;
					spinningpoint = spinningpoint.RotatedBy((float)(num384 - (num383 / 2 - 1)) * ((float)Math.PI * 2f) / (float)num383) + base.Center;
					Vector2 vector23 = spinningpoint - base.Center;
					int num385 = Dust.NewDust(spinningpoint + vector23, 0, 0, 172, vector23.X * 2f, vector23.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num385].noGravity = true;
					Main.dust[num385].noLight = true;
					Main.dust[num385].velocity = vector23;
				}
				if (owner == Main.myPlayer)
				{
					if (ai[1] < 1f)
					{
						int num386 = (Main.expertMode ? 25 : 40);
						int num387 = NewProjectile(base.Center.X - (float)(direction * 30), base.Center.Y - 4f, (float)(-direction) * 0.01f, 0f, 384, num386, 4f, owner, 16f, 15f);
						Main.projectile[num387].netUpdate = true;
					}
					else
					{
						int num388 = (int)(base.Center.Y / 16f);
						int num389 = (int)(base.Center.X / 16f);
						int num390 = 100;
						if (num389 < 10)
						{
							num389 = 10;
						}
						if (num389 > Main.maxTilesX - 10)
						{
							num389 = Main.maxTilesX - 10;
						}
						if (num388 < 10)
						{
							num388 = 10;
						}
						if (num388 > Main.maxTilesY - num390 - 10)
						{
							num388 = Main.maxTilesY - num390 - 10;
						}
						for (int num391 = num388; num391 < num388 + num390; num391++)
						{
							Tile tile = Main.tile[num389, num391];
							if (tile.active() && (Main.tileSolid[tile.type] || tile.liquid != 0))
							{
								num388 = num391;
								break;
							}
						}
						int num392 = (Main.expertMode ? 50 : 80);
						int num393 = NewProjectile(num389 * 16 + 8, num388 * 16 - 24, 0f, 0f, 386, num392, 4f, Main.myPlayer, 16f, 24f);
						Main.projectile[num393].netUpdate = true;
					}
				}
			}
			else if (type >= 424 && type <= 426)
			{
				SoundEngine.PlaySound(SoundID.Item89, base.position);
				base.position.X += base.width / 2;
				base.position.Y += base.height / 2;
				base.width = (int)(128f * scale);
				base.height = (int)(128f * scale);
				base.position.X -= base.width / 2;
				base.position.Y -= base.height / 2;
				for (int num394 = 0; num394 < 8; num394++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num395 = 0; num395 < 32; num395++)
				{
					int num396 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num396].noGravity = true;
					Dust dust = Main.dust[num396];
					dust.velocity *= 3f;
					num396 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num396];
					dust.velocity *= 2f;
					Main.dust[num396].noGravity = true;
				}
				for (int num397 = 0; num397 < 2; num397++)
				{
					int num398 = Gore.NewGore(base.position + new Vector2((float)(base.width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num398];
					gore.velocity *= 0.3f;
					Main.gore[num398].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num398].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				if (owner == Main.myPlayer)
				{
					localAI[1] = -1f;
					maxPenetrate = 0;
					Damage();
				}
				for (int num399 = 0; num399 < 5; num399++)
				{
					int num400 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num401 = Dust.NewDust(base.position, base.width, base.height, num400, 2.5f * (float)direction, -2.5f);
					Main.dust[num401].alpha = 200;
					Dust dust = Main.dust[num401];
					dust.velocity *= 2.4f;
					dust = Main.dust[num401];
					dust.scale += Main.rand.NextFloat();
				}
			}
			if (type == 399)
			{
				SoundEngine.PlaySound(13, (int)base.position.X, (int)base.position.Y);
				Vector2 value19 = new Vector2(20f, 20f);
				for (int num402 = 0; num402 < 5; num402++)
				{
					Dust.NewDust(base.Center - value19 / 2f, (int)value19.X, (int)value19.Y, 12, 0f, 0f, 0, Color.Red);
				}
				for (int num403 = 0; num403 < 10; num403++)
				{
					int num404 = Dust.NewDust(base.Center - value19 / 2f, (int)value19.X, (int)value19.Y, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num404];
					dust.velocity *= 1.4f;
				}
				for (int num405 = 0; num405 < 20; num405++)
				{
					int num406 = Dust.NewDust(base.Center - value19 / 2f, (int)value19.X, (int)value19.Y, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num406].noGravity = true;
					Dust dust = Main.dust[num406];
					dust.velocity *= 5f;
					num406 = Dust.NewDust(base.Center - value19 / 2f, (int)value19.X, (int)value19.Y, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num406];
					dust.velocity *= 3f;
				}
				if (Main.myPlayer == owner)
				{
					for (int num407 = 0; num407 < 6; num407++)
					{
						float num408 = (0f - base.velocity.X) * (float)Main.rand.Next(20, 50) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
						float num409 = (0f - Math.Abs(base.velocity.Y)) * (float)Main.rand.Next(30, 50) * 0.01f + (float)Main.rand.Next(-20, 5) * 0.4f;
						NewProjectile(base.Center.X + num408, base.Center.Y + num409, num408, num409, 400 + Main.rand.Next(3), (int)((double)damage * 0.5), 0f, owner);
					}
				}
			}
			if (type == 384 || type == 386)
			{
				for (int num410 = 0; num410 < 20; num410++)
				{
					int num411 = Dust.NewDust(base.position, base.width, base.height, 212, direction * 2, 0f, 100, default(Color), 1.4f);
					Dust dust32 = Main.dust[num411];
					dust32.color = Color.CornflowerBlue;
					dust32.color = Color.Lerp(dust32.color, Color.White, 0.3f);
					dust32.noGravity = true;
				}
			}
			if (type == 507 || type == 508)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				Vector2 position5 = base.position;
				Vector2 oldVelocity = base.oldVelocity;
				oldVelocity.Normalize();
				position5 += oldVelocity * 16f;
				for (int num412 = 0; num412 < 20; num412++)
				{
					int num413 = Dust.NewDust(position5, base.width, base.height, 81);
					Main.dust[num413].position = (Main.dust[num413].position + base.Center) / 2f;
					Dust dust = Main.dust[num413];
					dust.velocity += base.oldVelocity * 0.4f;
					dust = Main.dust[num413];
					dust.velocity *= 0.5f;
					Main.dust[num413].noGravity = true;
					position5 -= oldVelocity * 8f;
				}
			}
			if (type == 598)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				Vector2 position6 = base.position;
				Vector2 value20 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				position6 += value20 * 16f;
				for (int num414 = 0; num414 < 20; num414++)
				{
					int num415 = Dust.NewDust(position6, base.width, base.height, 81);
					Main.dust[num415].position = (Main.dust[num415].position + base.Center) / 2f;
					Dust dust = Main.dust[num415];
					dust.velocity += value20 * 2f;
					dust = Main.dust[num415];
					dust.velocity *= 0.5f;
					Main.dust[num415].noGravity = true;
					position6 -= value20 * 8f;
				}
			}
			if (type == 1 || type == 81 || type == 98)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num416 = 0; num416 < 10; num416++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 7);
				}
			}
			if (type == 336 || type == 345)
			{
				for (int num417 = 0; num417 < 6; num417++)
				{
					int num418 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 196);
					Main.dust[num418].noGravity = true;
					Main.dust[num418].scale = scale;
				}
			}
			if (type == 358)
			{
				base.velocity = base.oldVelocity * 0.2f;
				for (int num419 = 0; num419 < 100; num419++)
				{
					int num420 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 211, 0f, 0f, 75, default(Color), 1.2f);
					Dust dust;
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num420];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num420];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num420];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num420].scale = 0.6f;
					}
					else
					{
						Main.dust[num420].noGravity = true;
					}
					dust = Main.dust[num420];
					dust.velocity *= 0.3f;
					dust = Main.dust[num420];
					dust.velocity += base.velocity;
					dust = Main.dust[num420];
					dust.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
					Main.dust[num420].velocity.X += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num420].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num420].position = base.Center;
				}
			}
			if (type == 406)
			{
				int num421 = 175;
				Color newColor5 = new Color(0, 80, 255, 100);
				base.velocity = base.oldVelocity * 0.2f;
				for (int num422 = 0; num422 < 40; num422++)
				{
					int num423 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 4, 0f, 0f, num421, newColor5, 1.6f);
					Dust dust;
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num423];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num423];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num423];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num423].scale = 0.6f;
					}
					else
					{
						Main.dust[num423].noGravity = true;
					}
					dust = Main.dust[num423];
					dust.velocity *= 0.3f;
					dust = Main.dust[num423];
					dust.velocity += base.velocity;
					dust = Main.dust[num423];
					dust.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
					Main.dust[num423].velocity.X += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num423].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num423].position = base.Center;
				}
			}
			if (type == 344)
			{
				for (int num424 = 0; num424 < 3; num424++)
				{
					int num425 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 197);
					Main.dust[num425].noGravity = true;
					Main.dust[num425].scale = scale;
				}
			}
			else if (type == 343)
			{
				SoundEngine.PlaySound(SoundID.Item27, base.position);
				for (int num426 = 4; num426 < 31; num426++)
				{
					float num427 = base.oldVelocity.X * (30f / (float)num426);
					float num428 = base.oldVelocity.Y * (30f / (float)num426);
					int num429 = Dust.NewDust(new Vector2(oldPosition.X - num427, oldPosition.Y - num428), 8, 8, 197, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.2f);
					Main.dust[num429].noGravity = true;
					Dust dust = Main.dust[num429];
					dust.velocity *= 0.5f;
				}
			}
			else if (type == 349)
			{
				SoundEngine.PlaySound(SoundID.Item27, base.position);
				for (int num430 = 0; num430 < 3; num430++)
				{
					int num431 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 76);
					Main.dust[num431].noGravity = true;
					Main.dust[num431].noLight = true;
					Main.dust[num431].scale = 0.7f;
				}
			}
			if (type == 323)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num432 = 0; num432 < 20; num432++)
				{
					int num433 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 7);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num433].noGravity = true;
						Main.dust[num433].scale = 1.3f;
						Dust dust = Main.dust[num433];
						dust.velocity *= 1.5f;
						dust = Main.dust[num433];
						dust.velocity -= base.oldVelocity * 0.5f;
						dust = Main.dust[num433];
						dust.velocity *= 1.5f;
					}
					else
					{
						Dust dust = Main.dust[num433];
						dust.velocity *= 0.75f;
						dust = Main.dust[num433];
						dust.velocity -= base.oldVelocity * 0.25f;
						Main.dust[num433].scale = 0.8f;
					}
				}
			}
			if (type == 589)
			{
				SoundEngine.PlaySound(SoundID.Item27, base.position);
				Color newColor6 = Color.Red;
				if (ai[1] == 1f)
				{
					newColor6 = Color.Green;
				}
				if (ai[1] == 2f)
				{
					newColor6 = Color.Purple;
				}
				if (ai[1] == 3f)
				{
					newColor6 = Color.Gold;
				}
				if (ai[1] == 4f)
				{
					newColor6 = Color.White;
				}
				newColor6.A = 100;
				for (int num434 = 0; num434 < 30; num434++)
				{
					int num435 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 11, 0f, 0f, 0, newColor6);
					Dust dust = Main.dust[num435];
					dust.velocity *= 1f + Main.rand.NextFloat() * 1f;
					if (num434 < 10)
					{
						Main.dust[num435].noGravity = true;
						dust = Main.dust[num435];
						dust.velocity *= 0.5f;
					}
				}
			}
			if (type == 346)
			{
				SoundEngine.PlaySound(SoundID.Item27, base.position);
				for (int num436 = 0; num436 < 20; num436++)
				{
					int num437 = 10;
					if (ai[1] == 1f)
					{
						num437 = 4;
					}
					int num438 = Dust.NewDust(base.position, base.width, base.height, num437);
					Main.dust[num438].noGravity = true;
				}
			}
			if (type == 335)
			{
				SoundEngine.PlaySound(SoundID.Item27, base.position);
				for (int num439 = 0; num439 < 20; num439++)
				{
					int num440 = 90 - (int)ai[1];
					int num441 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num440);
					Main.dust[num441].noLight = true;
					Main.dust[num441].scale = 0.8f;
				}
			}
			if (type == 318)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num442 = 0; num442 < 10; num442++)
				{
					int num443 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 30);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num443].noGravity = true;
					}
				}
			}
			if (type == 378)
			{
				for (int num444 = 0; num444 < 10; num444++)
				{
					int num445 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 30);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num445].noGravity = true;
					}
				}
			}
			else if (type == 311)
			{
				for (int num446 = 0; num446 < 5; num446++)
				{
					int num447 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 189);
					Main.dust[num447].scale = 0.85f;
					Main.dust[num447].noGravity = true;
					Dust dust = Main.dust[num447];
					dust.velocity += base.velocity * 0.5f;
				}
			}
			else if (type == 316)
			{
				for (int num448 = 0; num448 < 5; num448++)
				{
					int num449 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 195);
					Main.dust[num449].scale = 0.85f;
					Main.dust[num449].noGravity = true;
					Dust dust = Main.dust[num449];
					dust.velocity += base.velocity * 0.5f;
				}
			}
			else if (type == 184 || type == 195)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num450 = 0; num450 < 5; num450++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 7);
				}
			}
			else if (type == 275 || type == 276)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num451 = 0; num451 < 5; num451++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 7);
				}
			}
			else if (type == 291)
			{
				if (owner == Main.myPlayer)
				{
					NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 292, damage, knockBack, owner);
				}
			}
			else if (type == 295)
			{
				if (owner == Main.myPlayer)
				{
					NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 296, (int)((double)damage * 0.65), knockBack, owner);
				}
			}
			else if (type == 270 || type == 837)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y, 27);
				if (type == 270)
				{
					for (int num452 = 0; num452 < 20; num452++)
					{
						int num453 = Dust.NewDust(base.position, base.width, base.height, 26, 0f, 0f, 100);
						Main.dust[num453].noGravity = true;
						Dust dust = Main.dust[num453];
						dust.velocity *= 1.2f;
						Main.dust[num453].scale = 1.3f;
						dust = Main.dust[num453];
						dust.velocity -= base.oldVelocity * 0.3f;
						num453 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), base.width - 8, base.height - 8, 5, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num453].noGravity = true;
						dust = Main.dust[num453];
						dust.velocity *= 3f;
					}
				}
				else
				{
					for (int num454 = 0; num454 < 20; num454++)
					{
						int num455 = Dust.NewDust(base.position, base.width, base.height, 26, 0f, 0f, 100);
						Main.dust[num455].noGravity = true;
						Dust dust = Main.dust[num455];
						dust.velocity *= 1.2f;
						Main.dust[num455].scale = 1.3f;
						dust = Main.dust[num455];
						dust.velocity -= base.oldVelocity * 0.3f;
						num455 = Dust.NewDust(new Vector2(base.position.X + 4f, base.position.Y + 4f), base.width - 8, base.height - 8, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num455].noGravity = true;
						dust = Main.dust[num455];
						dust.velocity *= 3f;
					}
				}
			}
			else if (type == 265)
			{
				for (int num456 = 0; num456 < 15; num456++)
				{
					int num457 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 163, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num457].noGravity = true;
					Dust dust = Main.dust[num457];
					dust.velocity *= 1.2f;
					dust = Main.dust[num457];
					dust.velocity -= base.oldVelocity * 0.3f;
				}
			}
			else if (type == 355)
			{
				for (int num458 = 0; num458 < 15; num458++)
				{
					int num459 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 205, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num459].noGravity = true;
					Dust dust = Main.dust[num459];
					dust.velocity *= 1.2f;
					dust = Main.dust[num459];
					dust.velocity -= base.oldVelocity * 0.3f;
				}
			}
			else if (type == 304)
			{
				for (int num460 = 0; num460 < 3; num460++)
				{
					int num461 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 182, 0f, 0f, 100, default(Color), 0.8f);
					Main.dust[num461].noGravity = true;
					Dust dust = Main.dust[num461];
					dust.velocity *= 1.2f;
					dust = Main.dust[num461];
					dust.velocity -= base.oldVelocity * 0.3f;
				}
			}
			else if (type == 263)
			{
				SoundEngine.PlaySound(SoundID.Item27, base.position);
				for (int num462 = 0; num462 < 15; num462++)
				{
					int num463 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 92, base.velocity.X, base.velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(40) * 0.01f);
					Main.dust[num463].noGravity = true;
					Dust dust = Main.dust[num463];
					dust.velocity *= 2f;
				}
			}
			else if (type == 261)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num464 = 0; num464 < 15; num464++)
				{
					Dust dust33 = Dust.NewDustDirect(new Vector2(base.position.X, base.position.Y), base.width, base.height, 148);
					Dust dust = dust33;
					dust.velocity *= 2f;
					dust33.velocity.Y -= 0.4f;
				}
				for (int num465 = 0; num465 < 3; num465++)
				{
					Dust dust34 = Dust.NewDustDirect(new Vector2(base.position.X, base.position.Y), base.width, base.height, 228);
					Dust dust = dust34;
					dust.velocity *= 2f;
					dust34.noLight = true;
					dust = dust34;
					dust.scale *= 0.8f;
					dust34.velocity.Y -= 0.3f;
				}
			}
			else if (type == 928)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num466 = 0; num466 < 25; num466++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 5, base.velocity.X, base.velocity.Y, 0, Color.White, 1.3f);
				}
			}
			else if (type == 229)
			{
				for (int num467 = 0; num467 < 25; num467++)
				{
					int num468 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 157);
					Main.dust[num468].noGravity = true;
					Dust dust = Main.dust[num468];
					dust.velocity *= 1.5f;
					Main.dust[num468].scale = 1.5f;
				}
			}
			else if (type == 239)
			{
				int num469 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)base.height - 2f), 2, 2, 154);
				Main.dust[num469].position.X -= 2f;
				Main.dust[num469].alpha = 38;
				Dust dust = Main.dust[num469];
				dust.velocity *= 0.1f;
				dust = Main.dust[num469];
				dust.velocity += -base.oldVelocity * 0.25f;
				Main.dust[num469].scale = 0.95f;
			}
			else if (type == 245)
			{
				int num470 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)base.height - 2f), 2, 2, 114);
				Main.dust[num470].noGravity = true;
				Main.dust[num470].position.X -= 2f;
				Main.dust[num470].alpha = 38;
				Dust dust = Main.dust[num470];
				dust.velocity *= 0.1f;
				dust = Main.dust[num470];
				dust.velocity += -base.oldVelocity * 0.25f;
				Main.dust[num470].scale = 0.95f;
			}
			else if (type == 264)
			{
				int num471 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)base.height - 2f), 2, 2, 54);
				Main.dust[num471].noGravity = true;
				Main.dust[num471].position.X -= 2f;
				Main.dust[num471].alpha = 38;
				Dust dust = Main.dust[num471];
				dust.velocity *= 0.1f;
				dust = Main.dust[num471];
				dust.velocity += -base.oldVelocity * 0.25f;
				Main.dust[num471].scale = 0.95f;
			}
			else if (type == 206 || type == 225)
			{
				SoundEngine.PlaySound(6, (int)base.position.X, (int)base.position.Y);
				for (int num472 = 0; num472 < 5; num472++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 40);
				}
			}
			else if (type == 227)
			{
				SoundEngine.PlaySound(6, (int)base.position.X, (int)base.position.Y);
				for (int num473 = 0; num473 < 15; num473++)
				{
					int num474 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 157);
					Main.dust[num474].noGravity = true;
					Dust dust = Main.dust[num474];
					dust.velocity += base.oldVelocity;
					Main.dust[num474].scale = 1.5f;
				}
			}
			else if (type == 237 && owner == Main.myPlayer)
			{
				NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 238, damage, knockBack, owner);
			}
			else if (type == 243 && owner == Main.myPlayer)
			{
				NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 244, damage, knockBack, owner);
			}
			else if (type == 120)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num475 = 0; num475 < 10; num475++)
				{
					int num476 = Dust.NewDust(new Vector2(base.position.X - base.velocity.X, base.position.Y - base.velocity.Y), base.width, base.height, 67, base.velocity.X, base.velocity.Y, 100);
					if (num475 < 5)
					{
						Main.dust[num476].noGravity = true;
					}
					Dust dust = Main.dust[num476];
					dust.velocity *= 0.2f;
				}
			}
			else if (type == 181 || type == 189 || type == 566)
			{
				for (int num477 = 0; num477 < 6; num477++)
				{
					int num478 = Dust.NewDust(base.position, base.width, base.height, 150, base.velocity.X, base.velocity.Y, 50);
					Main.dust[num478].noGravity = true;
					Main.dust[num478].scale = 1f;
				}
			}
			else if (type == 178)
			{
				for (int num479 = 0; num479 < 85; num479++)
				{
					int num480 = Main.rand.Next(139, 143);
					int num481 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num480, base.velocity.X, base.velocity.Y, 0, default(Color), 1.2f);
					Main.dust[num481].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num481].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num481].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num481].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num481].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num481].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust dust = Main.dust[num481];
					dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
				}
				for (int num482 = 0; num482 < 40; num482++)
				{
					int num483 = Main.rand.Next(276, 283);
					int num484 = Gore.NewGore(base.position, base.velocity, num483);
					Main.gore[num484].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num484].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num484].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num484].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore gore = Main.gore[num484];
					gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Main.gore[num484].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.gore[num484].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				}
			}
			else if (type == 289)
			{
				for (int num485 = 0; num485 < 30; num485++)
				{
					int num486 = Main.rand.Next(139, 143);
					int num487 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num486, base.velocity.X, base.velocity.Y, 0, default(Color), 1.2f);
					Main.dust[num487].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num487].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num487].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num487].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num487].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num487].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust dust = Main.dust[num487];
					dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
				}
				for (int num488 = 0; num488 < 15; num488++)
				{
					int num489 = Main.rand.Next(276, 283);
					int num490 = Gore.NewGore(base.position, base.velocity, num489);
					Main.gore[num490].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num490].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num490].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num490].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore gore = Main.gore[num490];
					gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Main.gore[num490].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.gore[num490].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				}
			}
			else if (type == 475 || type == 505 || type == 506)
			{
				if (ai[1] == 0f)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				}
				if (ai[1] < 10f)
				{
					Vector2 position7 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
					float num491 = 0f - base.velocity.X;
					float num492 = 0f - base.velocity.Y;
					float num493 = 1f;
					if (ai[0] <= 17f)
					{
						num493 = ai[0] / 17f;
					}
					int num494 = (int)(30f * num493);
					float num495 = 1f;
					if (ai[0] <= 30f)
					{
						num495 = ai[0] / 30f;
					}
					float num496 = 0.4f * num495;
					float num497 = num496;
					num492 += num497;
					for (int num498 = 0; num498 < num494; num498++)
					{
						float num499 = (float)Math.Sqrt(num491 * num491 + num492 * num492);
						float num500 = 5.6f;
						if (Math.Abs(num491) + Math.Abs(num492) < 1f)
						{
							num500 *= Math.Abs(num491) + Math.Abs(num492) / 1f;
						}
						num499 = num500 / num499;
						num491 *= num499;
						num492 *= num499;
						Math.Atan2(num492, num491);
						int num501 = 3;
						if (type == 506)
						{
							num501 = 30;
						}
						if (type == 505)
						{
							num501 = 239;
						}
						if ((float)num498 > ai[1])
						{
							for (int num502 = 0; num502 < 4; num502++)
							{
								int num503 = Dust.NewDust(position7, base.width, base.height, num501);
								Main.dust[num503].noGravity = true;
								Dust dust = Main.dust[num503];
								dust.velocity *= 0.3f;
							}
						}
						position7.X += num491;
						position7.Y += num492;
						num491 = 0f - base.velocity.X;
						num492 = 0f - base.velocity.Y;
						num497 += num496;
						num492 += num497;
					}
				}
			}
			else if (type == 171)
			{
				if (ai[1] == 0f)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				}
				if (ai[1] < 10f)
				{
					Vector2 position8 = new Vector2(base.position.X + (float)base.width * 0.5f, base.position.Y + (float)base.height * 0.5f);
					float num504 = 0f - base.velocity.X;
					float num505 = 0f - base.velocity.Y;
					float num506 = 1f;
					if (ai[0] <= 17f)
					{
						num506 = ai[0] / 17f;
					}
					int num507 = (int)(30f * num506);
					float num508 = 1f;
					if (ai[0] <= 30f)
					{
						num508 = ai[0] / 30f;
					}
					float num509 = 0.4f * num508;
					float num510 = num509;
					num505 += num510;
					for (int num511 = 0; num511 < num507; num511++)
					{
						float num512 = (float)Math.Sqrt(num504 * num504 + num505 * num505);
						float num513 = 5.6f;
						if (Math.Abs(num504) + Math.Abs(num505) < 1f)
						{
							num513 *= Math.Abs(num504) + Math.Abs(num505) / 1f;
						}
						num512 = num513 / num512;
						num504 *= num512;
						num505 *= num512;
						Math.Atan2(num505, num504);
						if ((float)num511 > ai[1])
						{
							for (int num514 = 0; num514 < 4; num514++)
							{
								int num515 = Dust.NewDust(position8, base.width, base.height, 129);
								Main.dust[num515].noGravity = true;
								Dust dust = Main.dust[num515];
								dust.velocity *= 0.3f;
							}
						}
						position8.X += num504;
						position8.Y += num505;
						num504 = 0f - base.velocity.X;
						num505 = 0f - base.velocity.Y;
						num510 += num509;
						num505 += num510;
					}
				}
			}
			else if (type == 117)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num516 = 0; num516 < 10; num516++)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 26);
				}
			}
			else if (type == 166)
			{
				SoundEngine.PlaySound(SoundID.Item51, base.position);
				for (int num517 = 0; num517 < 10; num517++)
				{
					int num518 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 76);
					Main.dust[num518].noGravity = true;
					Dust dust = Main.dust[num518];
					dust.velocity -= base.oldVelocity * 0.25f;
				}
			}
			else if (type == 158)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num519 = 0; num519 < 10; num519++)
				{
					int num520 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 9);
					Main.dust[num520].noGravity = true;
					Dust dust = Main.dust[num520];
					dust.velocity -= base.velocity * 0.5f;
				}
			}
			else if (type == 159)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num521 = 0; num521 < 10; num521++)
				{
					int num522 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 11);
					Main.dust[num522].noGravity = true;
					Dust dust = Main.dust[num522];
					dust.velocity -= base.velocity * 0.5f;
				}
			}
			else if (type == 160)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num523 = 0; num523 < 10; num523++)
				{
					int num524 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 19);
					Main.dust[num524].noGravity = true;
					Dust dust = Main.dust[num524];
					dust.velocity -= base.velocity * 0.5f;
				}
			}
			else if (type == 161)
			{
				SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
				for (int num525 = 0; num525 < 10; num525++)
				{
					int num526 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 11);
					Main.dust[num526].noGravity = true;
					Dust dust = Main.dust[num526];
					dust.velocity -= base.velocity * 0.5f;
				}
			}
			else if (type >= 191 && type <= 194)
			{
				int num527 = Gore.NewGore(new Vector2(base.position.X - (float)(base.width / 2), base.position.Y - (float)(base.height / 2)), new Vector2(0f, 0f), Main.rand.Next(61, 64), scale);
				Gore gore = Main.gore[num527];
				gore.velocity *= 0.1f;
			}
			else if (!Main.projPet[type])
			{
				if (type == 93)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num528 = 0; num528 < 10; num528++)
					{
						int num529 = Dust.NewDust(base.position, base.width, base.height, 57, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num529].velocity.X *= 2f;
						Main.dust[num529].velocity.Y *= 2f;
					}
				}
				else if (type == 99 || type == 727)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num530 = 0; num530 < 30; num530++)
					{
						int num531 = Dust.NewDust(base.position, base.width, base.height, (type == 99) ? 1 : 40);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num531];
							dust.scale *= 1.4f;
						}
						base.velocity *= 1.9f;
					}
				}
				else if (type == 772)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num532 = 0; num532 < 6; num532++)
					{
						Dust.NewDust(base.position, base.width, base.height, 1);
						base.velocity *= 1.9f;
					}
					for (int num533 = 0; num533 < 20; num533++)
					{
						Dust dust35 = Dust.NewDustDirect(base.position, base.width, base.height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90), 0f, 0f, 0, default(Color), 0.7f);
						dust35.noGravity = true;
						Dust dust = dust35;
						dust.velocity *= 2.9f;
						dust35.velocity.Y *= 0.8f;
						dust35.fadeIn = 1.1f;
					}
					for (int num534 = 0; num534 < 7; num534++)
					{
						Dust dust36 = Dust.NewDustDirect(base.position, base.width, base.height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90), 0f, 0f, 0, default(Color), 0.7f);
						dust36.noGravity = true;
						Dust dust = dust36;
						dust.velocity *= 2.9f;
						dust36.velocity.Y *= 0.8f;
						dust36.fadeIn = 1.1f;
						dust36.noLight = true;
					}
					if (owner == Main.myPlayer)
					{
						List<int> list = new List<int>();
						list.Add(181);
						list.Add(182);
						list.Add(180);
						list.Add(178);
						list.Add(179);
						list.Add(177);
						list.Add(999);
						List<int> list2 = list;
						int item = list2[Main.rand.Next(list2.Count)];
						list2.Remove(item);
						int stack = Main.rand.Next(3, 7);
						int item2 = list2[Main.rand.Next(list2.Count)];
						list2.Remove(item2);
						int stack2 = Main.rand.Next(3, 7);
						int num535 = Item.NewItem(base.position, base.Size, item, stack);
						Main.item[num535].noGrabDelay = 0;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, num535, 1f);
						}
						num535 = Item.NewItem(base.position, base.Size, item2, stack2);
						Main.item[num535].noGrabDelay = 0;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, num535, 1f);
						}
					}
				}
				else if (type == 763)
				{
					for (int num536 = 0; num536 < 4; num536++)
					{
						int num537 = Dust.NewDust(base.position, base.width, base.height, 40);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num537];
							dust.scale *= 0.8f;
						}
						Main.dust[num537].noGravity = true;
						base.velocity *= 1.9f;
					}
				}
				else if (type == 655)
				{
					SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y);
					for (int num538 = 0; num538 < 30; num538++)
					{
						int num539 = Dust.NewDust(base.position, base.width, base.height, 147);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num539];
							dust.scale *= 1.4f;
						}
						base.velocity *= 1.9f;
					}
					if (Main.netMode != 1 && !wet)
					{
						int num540 = 2;
						if (Main.rand.Next(3) == 0)
						{
							num540++;
						}
						if (Main.rand.Next(3) == 0)
						{
							num540++;
						}
						if (Main.rand.Next(3) == 0)
						{
							num540++;
						}
						for (int num541 = 0; num541 < num540; num541++)
						{
							int num542 = Main.rand.Next(210, 212);
							int num543 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, num542, 1);
							Main.npc[num543].velocity.X = (float)Main.rand.Next(-200, 201) * 0.002f;
							Main.npc[num543].velocity.Y = (float)Main.rand.Next(-200, 201) * 0.002f;
							Main.npc[num543].netUpdate = true;
						}
					}
				}
				else if (type == 728)
				{
					SoundEngine.PlaySound(SoundID.Item10, base.position);
					for (int num544 = 0; num544 < 7; num544++)
					{
						Dust.NewDust(base.position, base.width, base.height, 58, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 150, default(Color), 0.8f);
					}
					for (float num545 = 0f; num545 < 1f; num545 += 0.125f)
					{
						Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num545 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (4f + Main.rand.NextFloat() * 4f), 150, Color.CornflowerBlue).noGravity = true;
					}
					for (float num546 = 0f; num546 < 1f; num546 += 0.25f)
					{
						Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num546 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (2f + Main.rand.NextFloat() * 3f), 150, Color.Gold).noGravity = true;
					}
					Vector2 value21 = new Vector2(Main.screenWidth, Main.screenHeight);
					if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + value21 / 2f, value21 + new Vector2(400f))))
					{
						for (int num547 = 0; num547 < 7; num547++)
						{
							Gore.NewGore(base.position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * base.velocity.Length(), Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17, 17, 17, 17, 17));
						}
					}
				}
				else if (type == 729)
				{
					SoundEngine.PlaySound(SoundID.Item10, base.position);
					for (int num548 = 0; num548 < 10; num548++)
					{
						Dust dust37 = Dust.NewDustDirect(base.position, base.width, base.height, 279, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 150, default(Color), 1.2f);
						dust37.noGravity = true;
						dust37.velocity.X *= 2f;
					}
				}
				else if (type == 723 || type == 724 || type == 725 || type == 726 || type == 907)
				{
					if (type == 723)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num549 = 0; num549 < 10; num549++)
						{
							Dust dust38 = Dust.NewDustDirect(base.position, base.width, base.height, 88, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 150, default(Color), 1.2f);
							dust38.noGravity = true;
							dust38.velocity.X *= 2f;
						}
						for (int num550 = 0; num550 < 3; num550++)
						{
							Gore gore2 = Gore.NewGoreDirect(base.position, new Vector2(base.velocity.X * 0.05f, base.velocity.Y * 0.05f), Utils.SelectRandom<int>(Main.rand, 16, 17, 17));
							Gore gore = gore2;
							gore.velocity *= 2f;
						}
						if (owner == Main.myPlayer && Main.player[owner].starCloakCooldown == 0)
						{
							Main.player[owner].starCloakCooldown = 60;
							int number = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 4143);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number, 1f);
							}
						}
					}
					else
					{
						if (type == 907)
						{
							SoundEngine.PlaySound(SoundID.Item27, base.position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item10, base.position);
						}
						for (int num551 = 0; num551 < 10; num551++)
						{
							Dust dust39 = Main.dust[Dust.NewDust(base.position, base.width, base.height, 58, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 150, default(Color), 1.2f)];
							if (type == 907)
							{
								Dust dust = dust39;
								dust.velocity *= 0.75f;
							}
						}
						for (int num552 = 0; num552 < 3; num552++)
						{
							Gore gore3 = Main.gore[Gore.NewGore(base.position, new Vector2(base.velocity.X * 0.05f, base.velocity.Y * 0.05f), Main.rand.Next(16, 18))];
							if (type == 907)
							{
								Gore gore = gore3;
								gore.velocity *= 0.5f;
							}
						}
					}
				}
				else if (type == 91 || type == 92)
				{
					SoundEngine.PlaySound(SoundID.Item10, base.position);
					for (int num553 = 0; num553 < 10; num553++)
					{
						Dust.NewDust(base.position, base.width, base.height, 58, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 150, default(Color), 1.2f);
					}
					for (int num554 = 0; num554 < 3; num554++)
					{
						Gore.NewGore(base.position, new Vector2(base.velocity.X * 0.05f, base.velocity.Y * 0.05f), Main.rand.Next(16, 18));
					}
					if ((type == 91 || (type == 92 && ai[0] > 0f)) && owner == Main.myPlayer)
					{
						float x = base.position.X + (float)Main.rand.Next(-400, 400);
						float y = base.position.Y - (float)Main.rand.Next(600, 900);
						Vector2 vector24 = new Vector2(x, y);
						float num555 = base.position.X + (float)(base.width / 2) - vector24.X;
						float num556 = base.position.Y + (float)(base.height / 2) - vector24.Y;
						int num557 = 22;
						float num558 = (float)Math.Sqrt(num555 * num555 + num556 * num556);
						num558 = (float)num557 / num558;
						num555 *= num558;
						num556 *= num558;
						int num559 = damage;
						if (type == 91)
						{
							num559 /= 2;
						}
						int num560 = NewProjectile(x, y, num555, num556, 92, num559, knockBack, owner);
						if (type == 91)
						{
							Main.projectile[num560].ai[1] = base.position.Y;
							Main.projectile[num560].ai[0] = 1f;
						}
						else
						{
							Main.projectile[num560].ai[1] = base.position.Y;
						}
					}
				}
				else if (type == 89)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num561 = 0; num561 < 5; num561++)
					{
						int num562 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 68);
						Main.dust[num562].noGravity = true;
						Dust dust = Main.dust[num562];
						dust.velocity *= 1.5f;
						dust = Main.dust[num562];
						dust.scale *= 0.9f;
					}
					if (type == 89 && owner == Main.myPlayer)
					{
						for (int num563 = 0; num563 < 3; num563++)
						{
							float num564 = (0f - base.velocity.X) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
							float num565 = (0f - base.velocity.Y) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
							NewProjectile(base.position.X + num564, base.position.Y + num565, num564, num565, 90, (int)((double)damage * 0.5), 0f, owner);
						}
					}
				}
				else if (type == 177)
				{
					for (int num566 = 0; num566 < 20; num566++)
					{
						int num567 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 137, 0f, 0f, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
						Dust dust = Main.dust[num567];
						dust.velocity -= base.oldVelocity * 0.2f;
						if (Main.rand.Next(3) == 0)
						{
							dust = Main.dust[num567];
							dust.scale *= 0.8f;
							dust = Main.dust[num567];
							dust.velocity *= 0.5f;
						}
						else
						{
							Main.dust[num567].noGravity = true;
						}
					}
				}
				else if (type == 119 || type == 118 || type == 128 || type == 359)
				{
					int num568 = 10;
					if (type == 119 || type == 359)
					{
						num568 = 20;
					}
					SoundEngine.PlaySound(SoundID.Item27, base.position);
					for (int num569 = 0; num569 < num568; num569++)
					{
						int num570 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 92);
						if (Main.rand.Next(3) != 0)
						{
							Dust dust = Main.dust[num570];
							dust.velocity *= 2f;
							Main.dust[num570].noGravity = true;
							dust = Main.dust[num570];
							dust.scale *= 1.75f;
						}
						else
						{
							Dust dust = Main.dust[num570];
							dust.scale *= 0.5f;
						}
					}
				}
				else if (type == 309)
				{
					int num571 = 10;
					SoundEngine.PlaySound(SoundID.Item27, base.position);
					for (int num572 = 0; num572 < num571; num572++)
					{
						int num573 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 185);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num573];
							dust.velocity *= 2f;
							Main.dust[num573].noGravity = true;
							dust = Main.dust[num573];
							dust.scale *= 1.75f;
						}
					}
				}
				else if (type == 308)
				{
					int num574 = 80;
					SoundEngine.PlaySound(SoundID.Item27, base.position);
					for (int num575 = 0; num575 < num574; num575++)
					{
						int num576 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 16f), base.width, base.height - 16, 185);
						Dust dust = Main.dust[num576];
						dust.velocity *= 2f;
						Main.dust[num576].noGravity = true;
						dust = Main.dust[num576];
						dust.scale *= 1.15f;
					}
				}
				else if (aiStyle == 29 && type <= 126)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					int num577 = type - 121 + 86;
					for (int num578 = 0; num578 < 15; num578++)
					{
						int num579 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num577, base.oldVelocity.X, base.oldVelocity.Y, 50, default(Color), 1.2f);
						Main.dust[num579].noGravity = true;
						Dust dust = Main.dust[num579];
						dust.scale *= 1.25f;
						dust = Main.dust[num579];
						dust.velocity *= 0.5f;
					}
				}
				else if (type == 597)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num580 = 0; num580 < 15; num580++)
					{
						int num581 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 262, base.oldVelocity.X, base.oldVelocity.Y, 50, default(Color), 1.2f);
						Main.dust[num581].noGravity = true;
						Dust dust = Main.dust[num581];
						dust.scale *= 1.25f;
						dust = Main.dust[num581];
						dust.velocity *= 0.5f;
					}
				}
				else if (type == 731)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num582 = 0; num582 < 15; num582++)
					{
						Dust dust40 = Dust.NewDustDirect(base.position, base.width, base.height, 226, base.oldVelocity.X * 0.5f, base.oldVelocity.Y * 0.5f, 50, default(Color), 0.5f);
						if (Main.rand.Next(3) != 0)
						{
							dust40.noGravity = true;
							Dust dust = dust40;
							dust.scale *= 1.5f;
							dust = dust40;
							dust.velocity *= 0.5f;
						}
					}
				}
				else if (type == 337)
				{
					SoundEngine.PlaySound(SoundID.Item27, base.position);
					for (int num583 = 0; num583 < 10; num583++)
					{
						int num584 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 197);
						Main.dust[num584].noGravity = true;
					}
				}
				else if (type == 379 || type == 377)
				{
					for (int num585 = 0; num585 < 5; num585++)
					{
						int num586 = Dust.NewDust(base.position, base.width, base.height, 171, 0f, 0f, 100);
						Main.dust[num586].scale = (float)Main.rand.Next(1, 10) * 0.1f;
						Main.dust[num586].noGravity = true;
						Main.dust[num586].fadeIn = 1.5f;
						Dust dust = Main.dust[num586];
						dust.velocity *= 0.75f;
					}
				}
				else if (type == 80)
				{
					if (ai[0] >= 0f)
					{
						SoundEngine.PlaySound(SoundID.Item27, base.position);
						for (int num587 = 0; num587 < 10; num587++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 67);
						}
					}
					int num588 = (int)base.position.X / 16;
					int num589 = (int)base.position.Y / 16;
					if (Main.tile[num588, num589] == null)
					{
						Main.tile[num588, num589] = new Tile();
					}
					if (Main.tile[num588, num589].type == 127 && Main.tile[num588, num589].active())
					{
						WorldGen.KillTile(num588, num589);
					}
				}
				else if (type == 76 || type == 77 || type == 78)
				{
					for (int num590 = 0; num590 < 5; num590++)
					{
						int num591 = Dust.NewDust(base.position, base.width, base.height, 27, 0f, 0f, 80, default(Color), 1.5f);
						Main.dust[num591].noGravity = true;
					}
				}
				else if (type == 55 || type == 719)
				{
					for (int num592 = 0; num592 < 5; num592++)
					{
						int num593 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 18, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num593].noGravity = true;
					}
				}
				else if (type == 51 || type == 267)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num594 = 0; num594 < 5; num594++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 0, 0f, 0f, 0, default(Color), 0.7f);
					}
				}
				else if (type == 478)
				{
					if (owner == Main.myPlayer)
					{
						NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)damage * 0.8), knockBack * 0.5f, owner);
					}
				}
				else if (type == 477 || type == 479)
				{
					for (int num595 = 0; num595 < 5; num595++)
					{
					}
					Collision.HitTiles(base.position, base.velocity, base.width, base.height);
				}
				else if (type == 2 || type == 82)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num596 = 0; num596 < 10; num596++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100);
					}
				}
				else if (type == 474)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num597 = 0; num597 < 20; num597++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 26, 0f, 0f, 0, default(Color), 0.9f);
					}
				}
				else if (type == 172)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num598 = 0; num598 < 20; num598++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 135, 0f, 0f, 100);
					}
				}
				else if (type == 103)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num599 = 0; num599 < 20; num599++)
					{
						int num600 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 75, 0f, 0f, 100);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num600];
							dust.scale *= 2.5f;
							Main.dust[num600].noGravity = true;
							dust = Main.dust[num600];
							dust.velocity *= 5f;
						}
					}
				}
				else if (type == 278)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num601 = 0; num601 < 20; num601++)
					{
						int num602 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 169, 0f, 0f, 100);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num602];
							dust.scale *= 1.5f;
							Main.dust[num602].noGravity = true;
							dust = Main.dust[num602];
							dust.velocity *= 5f;
						}
					}
				}
				else if (type == 3 || type == 48 || type == 54 || type == 599 || type == 909)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num603 = 0; num603 < 10; num603++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 1, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 0, default(Color), 0.75f);
					}
				}
				else if (type == 330)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num604 = 0; num604 < 10; num604++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 0, base.velocity.X * 0.4f, base.velocity.Y * 0.4f, 0, default(Color), 0.75f);
					}
				}
				else if (type == 4)
				{
					SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
					for (int num605 = 0; num605 < 10; num605++)
					{
						Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 14, 0f, 0f, 150, default(Color), 1.1f);
					}
				}
				else if (type == 5)
				{
					SoundEngine.PlaySound(SoundID.Item10, base.position);
					for (int num606 = 0; num606 < 60; num606++)
					{
						int num607 = Main.rand.Next(3);
						Dust.NewDust(base.position, base.width, base.height, num607 switch
						{
							0 => 15, 
							1 => 57, 
							_ => 58, 
						}, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 150, default(Color), 1.5f);
					}
				}
				else if (type == 9 || type == 12 || type == 503)
				{
					SoundEngine.PlaySound(SoundID.Item10, base.position);
					if (type == 12)
					{
						for (int num608 = 0; num608 < 7; num608++)
						{
							Dust.NewDust(base.position, base.width, base.height, 58, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 150, default(Color), 0.8f);
						}
						for (float num609 = 0f; num609 < 1f; num609 += 0.125f)
						{
							Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num609 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (4f + Main.rand.NextFloat() * 4f), 150, Color.CornflowerBlue).noGravity = true;
						}
						for (float num610 = 0f; num610 < 1f; num610 += 0.25f)
						{
							Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num610 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (2f + Main.rand.NextFloat() * 3f), 150, Color.Gold).noGravity = true;
						}
						Vector2 value22 = new Vector2(Main.screenWidth, Main.screenHeight);
						if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + value22 / 2f, value22 + new Vector2(400f))))
						{
							for (int num611 = 0; num611 < 7; num611++)
							{
								Gore.NewGore(base.position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * base.velocity.Length(), Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17, 17, 17, 17, 17));
							}
						}
					}
					else
					{
						int num612 = 10;
						int num613 = 3;
						if (type == 503)
						{
							num612 = 40;
							num613 = 2;
							base.velocity /= 2f;
						}
						for (int num614 = 0; num614 < num612; num614++)
						{
							Dust.NewDust(base.position, base.width, base.height, 58, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 150, default(Color), 1.2f);
						}
						for (int num615 = 0; num615 < num613; num615++)
						{
							int num616 = Main.rand.Next(16, 18);
							if (type == 503)
							{
								num616 = 16;
							}
							Gore.NewGore(base.position, new Vector2(base.velocity.X * 0.05f, base.velocity.Y * 0.05f), num616);
						}
						if (type == 12 && damage < 100)
						{
							for (int num617 = 0; num617 < 10; num617++)
							{
								Dust.NewDust(base.position, base.width, base.height, 57, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 150, default(Color), 1.2f);
							}
							for (int num618 = 0; num618 < 3; num618++)
							{
								Gore.NewGore(base.position, new Vector2(base.velocity.X * 0.05f, base.velocity.Y * 0.05f), Main.rand.Next(16, 18));
							}
						}
					}
				}
				else if (type == 281)
				{
					if (ai[0] != -3f)
					{
						SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y);
						int num619 = Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 76);
						Gore gore = Main.gore[num619];
						gore.velocity -= base.velocity * 0.5f;
						num619 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 77);
						gore = Main.gore[num619];
						gore.velocity -= base.velocity * 0.5f;
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						for (int num620 = 0; num620 < 20; num620++)
						{
							int num621 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num621];
							dust.velocity *= 1.4f;
						}
						for (int num622 = 0; num622 < 10; num622++)
						{
							int num623 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num623].noGravity = true;
							Dust dust = Main.dust[num623];
							dust.velocity *= 5f;
							num623 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num623];
							dust.velocity *= 3f;
						}
						num619 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num619];
						gore.velocity *= 0.4f;
						Main.gore[num619].velocity.X += 1f;
						Main.gore[num619].velocity.Y += 1f;
						num619 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num619];
						gore.velocity *= 0.4f;
						Main.gore[num619].velocity.X -= 1f;
						Main.gore[num619].velocity.Y += 1f;
						num619 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num619];
						gore.velocity *= 0.4f;
						Main.gore[num619].velocity.X += 1f;
						Main.gore[num619].velocity.Y -= 1f;
						num619 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num619];
						gore.velocity *= 0.4f;
						Main.gore[num619].velocity.X -= 1f;
						Main.gore[num619].velocity.Y -= 1f;
						if (damage > 0)
						{
							base.position.X += base.width / 2;
							base.position.Y += base.height / 2;
							base.width = 128;
							base.height = 128;
							base.position.X -= base.width / 2;
							base.position.Y -= base.height / 2;
							if (ai[0] == -2f)
							{
								hostile = true;
							}
							Damage();
						}
					}
				}
				else if (type == 162)
				{
					SoundEngine.PlaySound(SoundID.Item14, base.position);
					for (int num624 = 0; num624 < 20; num624++)
					{
						int num625 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num625];
						dust.velocity *= 1.4f;
					}
					for (int num626 = 0; num626 < 10; num626++)
					{
						int num627 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num627].noGravity = true;
						Dust dust = Main.dust[num627];
						dust.velocity *= 5f;
						num627 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num627];
						dust.velocity *= 3f;
					}
					int num628 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num628];
					gore.velocity *= 0.4f;
					Main.gore[num628].velocity.X += 1f;
					Main.gore[num628].velocity.Y += 1f;
					num628 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num628];
					gore.velocity *= 0.4f;
					Main.gore[num628].velocity.X -= 1f;
					Main.gore[num628].velocity.Y += 1f;
					num628 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num628];
					gore.velocity *= 0.4f;
					Main.gore[num628].velocity.X += 1f;
					Main.gore[num628].velocity.Y -= 1f;
					num628 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num628];
					gore.velocity *= 0.4f;
					Main.gore[num628].velocity.X -= 1f;
					Main.gore[num628].velocity.Y -= 1f;
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 128;
					base.height = 128;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					Damage();
				}
				else if (type == 240)
				{
					SoundEngine.PlaySound(SoundID.Item14, base.position);
					for (int num629 = 0; num629 < 20; num629++)
					{
						int num630 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num630];
						dust.velocity *= 1.4f;
					}
					for (int num631 = 0; num631 < 10; num631++)
					{
						int num632 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num632].noGravity = true;
						Dust dust = Main.dust[num632];
						dust.velocity *= 5f;
						num632 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num632];
						dust.velocity *= 3f;
					}
					int num633 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num633];
					gore.velocity *= 0.4f;
					Main.gore[num633].velocity.X += 1f;
					Main.gore[num633].velocity.Y += 1f;
					num633 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num633];
					gore.velocity *= 0.4f;
					Main.gore[num633].velocity.X -= 1f;
					Main.gore[num633].velocity.Y += 1f;
					num633 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num633];
					gore.velocity *= 0.4f;
					Main.gore[num633].velocity.X += 1f;
					Main.gore[num633].velocity.Y -= 1f;
					num633 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num633];
					gore.velocity *= 0.4f;
					Main.gore[num633].velocity.X -= 1f;
					Main.gore[num633].velocity.Y -= 1f;
					base.position.X += base.width / 2;
					base.position.Y += base.height / 2;
					base.width = 96;
					base.height = 96;
					base.position.X -= base.width / 2;
					base.position.Y -= base.height / 2;
					Damage();
				}
				else
				{
					_ = type;
					_ = 162;
					if (type == 283 || type == 282)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num634 = 0; num634 < 10; num634++)
						{
							int num635 = Dust.NewDust(base.position, base.width, base.height, 171, 0f, 0f, 100);
							Main.dust[num635].scale = (float)Main.rand.Next(1, 10) * 0.1f;
							Main.dust[num635].noGravity = true;
							Main.dust[num635].fadeIn = 1.5f;
							Dust dust = Main.dust[num635];
							dust.velocity *= 0.75f;
						}
					}
					else if (type == 284)
					{
						for (int num636 = 0; num636 < 10; num636++)
						{
							int num637 = Main.rand.Next(139, 143);
							int num638 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num637, (0f - base.velocity.X) * 0.3f, (0f - base.velocity.Y) * 0.3f, 0, default(Color), 1.2f);
							Main.dust[num638].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.dust[num638].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.dust[num638].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.dust[num638].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.dust[num638].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
							Main.dust[num638].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
							Dust dust = Main.dust[num638];
							dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						}
						for (int num639 = 0; num639 < 5; num639++)
						{
							int num640 = Main.rand.Next(276, 283);
							int num641 = Gore.NewGore(base.position, -base.velocity * 0.3f, num640);
							Main.gore[num641].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.gore[num641].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.gore[num641].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.gore[num641].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							Gore gore = Main.gore[num641];
							gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							Main.gore[num641].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
							Main.gore[num641].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
						}
					}
					else if (type == 286)
					{
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						for (int num642 = 0; num642 < 7; num642++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						}
						for (int num643 = 0; num643 < 3; num643++)
						{
							int num644 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num644].noGravity = true;
							Dust dust = Main.dust[num644];
							dust.velocity *= 3f;
							num644 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num644];
							dust.velocity *= 2f;
						}
						int num645 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num645];
						gore.velocity *= 0.3f;
						Main.gore[num645].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
						Main.gore[num645].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
						if (owner == Main.myPlayer)
						{
							localAI[1] = -1f;
							maxPenetrate = 0;
							base.position.X += base.width / 2;
							base.position.Y += base.height / 2;
							base.width = 80;
							base.height = 80;
							base.position.X -= base.width / 2;
							base.position.Y -= base.height / 2;
							Damage();
						}
					}
					else if (type == 14 || type == 20 || type == 36 || type == 83 || type == 84 || type == 389 || type == 104 || type == 279 || type == 100 || type == 110 || type == 180 || type == 207 || type == 357 || type == 242 || type == 302 || type == 257 || type == 259 || type == 285 || type == 287 || type == 576 || type == 577 || type == 876)
					{
						Collision.HitTiles(base.position, base.velocity, base.width, base.height);
						SoundEngine.PlaySound(SoundID.Item10, base.position);
					}
					else if (type == 660)
					{
						Collision.HitTiles(base.position, base.velocity, base.width, base.height);
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						int num646 = Main.rand.Next(4, 10);
						for (int num647 = 0; num647 < num646; num647++)
						{
							int num648 = Dust.NewDust(base.Center, 0, 0, 180, 0f, 0f, 100);
							Dust dust = Main.dust[num648];
							dust.velocity *= 1.6f;
							Main.dust[num648].velocity.Y -= 1f;
							dust = Main.dust[num648];
							dust.velocity += -base.velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
							Main.dust[num648].scale = 2f;
							Main.dust[num648].fadeIn = 0.5f;
							Main.dust[num648].noGravity = true;
						}
					}
					else if (type == 761 || type == 762)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						if (owner == Main.myPlayer && !noDropItem)
						{
							int num649 = 4343;
							if (type == 762)
							{
								num649 = 4344;
							}
							int num650 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, num649);
							Main.item[num650].noGrabDelay = 0;
							if (Main.netMode == 1 && num650 >= 0)
							{
								NetMessage.SendData(21, -1, -1, null, num650, 1f);
							}
						}
					}
					else if (type == 712)
					{
						Collision.HitTiles(base.position, base.velocity, base.width, base.height);
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						int num651 = Main.rand.Next(6, 12);
						for (int num652 = 0; num652 < num651; num652++)
						{
							int num653 = Dust.NewDust(base.Center, 0, 0, 15, 0f, 0f, 100);
							Dust dust = Main.dust[num653];
							dust.velocity *= 1.6f;
							Main.dust[num653].velocity.Y -= 1f;
							dust = Main.dust[num653];
							dust.velocity += -base.velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
							Main.dust[num653].scale = 1f;
							Main.dust[num653].fadeIn = 1.5f;
							Main.dust[num653].noGravity = true;
							Main.dust[num653].color = new Color(255, 255, 255, 0) * 0.3f;
							dust = Main.dust[num653];
							dust.velocity *= 0.7f;
							dust = Main.dust[num653];
							dust.position += Main.dust[num653].velocity * 5f;
						}
						for (int num654 = 0; num654 < 3; num654++)
						{
							Gore gore4 = Gore.NewGoreDirect(base.position, Vector2.Zero, 1008, 1f + Main.rand.NextFloatDirection() * 0.2f);
							Gore gore = gore4;
							gore.velocity *= 4f;
						}
					}
					else if (type == 638)
					{
						Collision.HitTiles(base.position, base.velocity, base.width, base.height);
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						int num655 = Main.rand.Next(2, 5);
						for (int num656 = 0; num656 < num655; num656++)
						{
							int num657 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
							Dust dust = Main.dust[num657];
							dust.velocity *= 1.6f;
							Main.dust[num657].velocity.Y -= 1f;
							dust = Main.dust[num657];
							dust.position -= Vector2.One * 4f;
							Main.dust[num657].position = Vector2.Lerp(Main.dust[num657].position, base.Center, 0.5f);
							Main.dust[num657].noGravity = true;
						}
					}
					else if (type == 15 || type == 321)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num658 = 0; num658 < 20; num658++)
						{
							int num659 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 2f);
							Main.dust[num659].noGravity = true;
							Dust dust = Main.dust[num659];
							dust.velocity *= 2f;
							num659 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100);
							dust = Main.dust[num659];
							dust.velocity *= 2f;
						}
					}
					else if (type == 253)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num660 = 0; num660 < 20; num660++)
						{
							int num661 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 135, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 2f);
							Main.dust[num661].noGravity = true;
							Dust dust = Main.dust[num661];
							dust.velocity *= 2f;
							num661 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 135, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100);
							dust = Main.dust[num661];
							dust.velocity *= 2f;
						}
					}
					else if (type == 95 || type == 96)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num662 = 0; num662 < 20; num662++)
						{
							int num663 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 75, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 2f * scale);
							Main.dust[num663].noGravity = true;
							Dust dust = Main.dust[num663];
							dust.velocity *= 2f;
							num663 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 75, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1f * scale);
							dust = Main.dust[num663];
							dust.velocity *= 2f;
						}
					}
					else if (type == 17)
					{
						SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
						for (int num664 = 0; num664 < 5; num664++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 0);
						}
					}
					else if (type == 31 || type == 42)
					{
						SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
						for (int num665 = 0; num665 < 5; num665++)
						{
							int num666 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 32);
							Dust dust = Main.dust[num666];
							dust.velocity *= 0.6f;
						}
					}
					else if (type >= 411 && type <= 414)
					{
						int num667 = 9;
						if (type == 412 || type == 414)
						{
							num667 = 11;
						}
						if (type == 413)
						{
							num667 = 19;
						}
						for (int num668 = 0; num668 < 5; num668++)
						{
							int num669 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, num667, 0f, base.velocity.Y / 2f);
							Main.dust[num669].noGravity = true;
							Dust dust = Main.dust[num669];
							dust.velocity -= base.velocity * 0.5f;
						}
					}
					else if (type == 109)
					{
						SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
						for (int num670 = 0; num670 < 5; num670++)
						{
							int num671 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 51, 0f, 0f, 0, default(Color), 0.6f);
							Dust dust = Main.dust[num671];
							dust.velocity *= 0.6f;
						}
					}
					else if (type == 39)
					{
						SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
						for (int num672 = 0; num672 < 5; num672++)
						{
							int num673 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 38);
							Dust dust = Main.dust[num673];
							dust.velocity *= 0.6f;
						}
					}
					else if (type == 71)
					{
						SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
						for (int num674 = 0; num674 < 5; num674++)
						{
							int num675 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 53);
							Dust dust = Main.dust[num675];
							dust.velocity *= 0.6f;
						}
					}
					else if (type == 40)
					{
						SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
						for (int num676 = 0; num676 < 5; num676++)
						{
							int num677 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 36);
							Dust dust = Main.dust[num677];
							dust.velocity *= 0.6f;
						}
					}
					else if (type == 21 || type == 471 || type == 532)
					{
						SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
						for (int num678 = 0; num678 < 10; num678++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 26, 0f, 0f, 0, default(Color), 0.8f);
						}
					}
					else if (type == 583)
					{
						SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
						for (int num679 = 0; num679 < 10; num679++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 4, 0f, 0f, 100, new Color(20, 250, 20, 240), 0.8f);
						}
					}
					else if (type == 584)
					{
						SoundEngine.PlaySound(0, (int)base.position.X, (int)base.position.Y);
						for (int num680 = 0; num680 < 10; num680++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 4, 0f, 0f, 100, new Color(250, 20, 120, 240), 0.8f);
						}
					}
					else if (type == 24)
					{
						for (int num681 = 0; num681 < 10; num681++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 1, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 0, default(Color), 0.75f);
						}
					}
					else if (type == 27)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num682 = 0; num682 < 30; num682++)
						{
							int num683 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 172, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 100);
							Main.dust[num683].noGravity = true;
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 172, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 100, default(Color), 0.5f);
						}
					}
					else if (type == 38)
					{
						for (int num684 = 0; num684 < 10; num684++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 42, base.velocity.X * 0.1f, base.velocity.Y * 0.1f);
						}
					}
					else if (type == 44 || type == 45)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num685 = 0; num685 < 30; num685++)
						{
							int num686 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, base.velocity.X, base.velocity.Y, 100, default(Color), 1.7f);
							Main.dust[num686].noGravity = true;
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 27, base.velocity.X, base.velocity.Y, 100);
						}
					}
					else if (type == 41)
					{
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						for (int num687 = 0; num687 < 10; num687++)
						{
							int num688 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						}
						for (int num689 = 0; num689 < 5; num689++)
						{
							int num690 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num690].noGravity = true;
							Dust dust = Main.dust[num690];
							dust.velocity *= 3f;
							num690 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num690];
							dust.velocity *= 2f;
						}
						int num691 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num691];
						gore.velocity *= 0.4f;
						Main.gore[num691].velocity.X += (float)Main.rand.Next(-10, 11) * 0.1f;
						Main.gore[num691].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.1f;
						num691 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num691];
						gore.velocity *= 0.4f;
						Main.gore[num691].velocity.X += (float)Main.rand.Next(-10, 11) * 0.1f;
						Main.gore[num691].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.1f;
						if (owner == Main.myPlayer)
						{
							penetrate = -1;
							base.position.X += base.width / 2;
							base.position.Y += base.height / 2;
							base.width = 64;
							base.height = 64;
							base.position.X -= base.width / 2;
							base.position.Y -= base.height / 2;
							Damage();
						}
					}
					else if (type == 514)
					{
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						for (int num692 = 0; num692 < 10; num692++)
						{
							int num693 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.3f);
							Dust dust = Main.dust[num693];
							dust.velocity *= 1.4f;
						}
						for (int num694 = 0; num694 < 6; num694++)
						{
							int num695 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.1f);
							Main.dust[num695].noGravity = true;
							Dust dust = Main.dust[num695];
							dust.velocity *= 4.6f;
							num695 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.3f);
							dust = Main.dust[num695];
							dust.velocity *= 3.3f;
							if (Main.rand.Next(2) == 0)
							{
								num695 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.1f);
								dust = Main.dust[num695];
								dust.velocity *= 2.7f;
							}
						}
						if (owner == Main.myPlayer)
						{
							penetrate = -1;
							base.position.X += base.width / 2;
							base.position.Y += base.height / 2;
							base.width = 112;
							base.height = 112;
							base.position.X -= base.width / 2;
							base.position.Y -= base.height / 2;
							ai[0] = 2f;
							Damage();
						}
					}
					else if (type == 306)
					{
						SoundEngine.PlaySound(3, (int)base.position.X, (int)base.position.Y);
						for (int num696 = 0; num696 < 20; num696++)
						{
							int num697 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 184);
							Dust dust = Main.dust[num697];
							dust.scale *= 1.1f;
							Main.dust[num697].noGravity = true;
						}
						for (int num698 = 0; num698 < 30; num698++)
						{
							int num699 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 184);
							Dust dust = Main.dust[num699];
							dust.velocity *= 2.5f;
							dust = Main.dust[num699];
							dust.scale *= 0.8f;
							Main.dust[num699].noGravity = true;
						}
						if (owner == Main.myPlayer)
						{
							int num700 = 2;
							if (Main.rand.Next(3) == 0)
							{
								num700++;
							}
							if (Main.rand.Next(3) == 0)
							{
								num700++;
							}
							for (int num701 = 0; num701 < num700; num701++)
							{
								float num702 = (float)Main.rand.Next(-35, 36) * 0.02f;
								float num703 = (float)Main.rand.Next(-35, 36) * 0.02f;
								num702 *= 10f;
								num703 *= 10f;
								NewProjectile(base.position.X, base.position.Y, num702, num703, 307, (int)((double)damage * 0.7), (int)((double)knockBack * 0.35), Main.myPlayer);
							}
						}
					}
					else if (type == 469)
					{
						if (owner == Main.myPlayer)
						{
							int num704 = 6;
							for (int num705 = 0; num705 < num704; num705++)
							{
								if (num705 % 2 != 1 || Main.rand.Next(3) == 0)
								{
									Vector2 position9 = base.position;
									Vector2 oldVelocity2 = base.oldVelocity;
									oldVelocity2.Normalize();
									oldVelocity2 *= 8f;
									float num706 = (float)Main.rand.Next(-35, 36) * 0.01f;
									float num707 = (float)Main.rand.Next(-35, 36) * 0.01f;
									position9 -= oldVelocity2 * num705;
									num706 += base.oldVelocity.X / 6f;
									num707 += base.oldVelocity.Y / 6f;
									int num708 = NewProjectile(position9.X, position9.Y, num706, num707, Main.player[owner].beeType(), Main.player[owner].beeDamage(damage / 3), Main.player[owner].beeKB(0f), Main.myPlayer);
									Main.projectile[num708].magic = false;
									Main.projectile[num708].ranged = true;
									Main.projectile[num708].penetrate = 2;
								}
							}
						}
					}
					else if (type == 183)
					{
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						for (int num709 = 0; num709 < 20; num709++)
						{
							int num710 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num710];
							dust.velocity *= 1f;
						}
						int num711 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num711].velocity.X += 1f;
						Main.gore[num711].velocity.Y += 1f;
						Gore gore = Main.gore[num711];
						gore.velocity *= 0.3f;
						num711 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num711].velocity.X -= 1f;
						Main.gore[num711].velocity.Y += 1f;
						gore = Main.gore[num711];
						gore.velocity *= 0.3f;
						num711 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num711].velocity.X += 1f;
						Main.gore[num711].velocity.Y -= 1f;
						gore = Main.gore[num711];
						gore.velocity *= 0.3f;
						num711 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num711].velocity.X -= 1f;
						Main.gore[num711].velocity.Y -= 1f;
						gore = Main.gore[num711];
						gore.velocity *= 0.3f;
						if (owner == Main.myPlayer)
						{
							int num712 = Main.rand.Next(15, 25);
							for (int num713 = 0; num713 < num712; num713++)
							{
								float speedX = (float)Main.rand.Next(-35, 36) * 0.02f;
								float speedY = (float)Main.rand.Next(-35, 36) * 0.02f;
								NewProjectile(base.position.X, base.position.Y, speedX, speedY, Main.player[owner].beeType(), Main.player[owner].beeDamage(damage), Main.player[owner].beeKB(0f), Main.myPlayer);
							}
						}
					}
					else if (aiStyle == 34)
					{
						if (owner != Main.myPlayer)
						{
							timeLeft = 60;
						}
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						if (type == 167)
						{
							for (int num714 = 0; num714 < 400; num714++)
							{
								float num715 = 16f;
								if (num714 < 300)
								{
									num715 = 12f;
								}
								if (num714 < 200)
								{
									num715 = 8f;
								}
								if (num714 < 100)
								{
									num715 = 4f;
								}
								int num716 = 130;
								int num717 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num716, 0f, 0f, 100);
								float num718 = Main.dust[num717].velocity.X;
								float y2 = Main.dust[num717].velocity.Y;
								if (num718 == 0f && y2 == 0f)
								{
									num718 = 1f;
								}
								float num719 = (float)Math.Sqrt(num718 * num718 + y2 * y2);
								num719 = num715 / num719;
								num718 *= num719;
								y2 *= num719;
								Dust dust = Main.dust[num717];
								dust.velocity *= 0.5f;
								Main.dust[num717].velocity.X += num718;
								Main.dust[num717].velocity.Y += y2;
								Main.dust[num717].scale = 1.3f;
								Main.dust[num717].noGravity = true;
							}
						}
						if (type == 168)
						{
							for (int num720 = 0; num720 < 400; num720++)
							{
								float num721 = 2f * ((float)num720 / 100f);
								if (num720 > 100)
								{
									num721 = 10f;
								}
								if (num720 > 250)
								{
									num721 = 13f;
								}
								int num722 = 131;
								int num723 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num722, 0f, 0f, 100);
								float num724 = Main.dust[num723].velocity.X;
								float y3 = Main.dust[num723].velocity.Y;
								if (num724 == 0f && y3 == 0f)
								{
									num724 = 1f;
								}
								float num725 = (float)Math.Sqrt(num724 * num724 + y3 * y3);
								num725 = num721 / num725;
								if (num720 <= 200)
								{
									num724 *= num725;
									y3 *= num725;
								}
								else
								{
									num724 = num724 * num725 * 1.25f;
									y3 = y3 * num725 * 0.75f;
								}
								Dust dust = Main.dust[num723];
								dust.velocity *= 0.5f;
								Main.dust[num723].velocity.X += num724;
								Main.dust[num723].velocity.Y += y3;
								if (num720 > 100)
								{
									Main.dust[num723].scale = 1.3f;
									Main.dust[num723].noGravity = true;
								}
							}
						}
						if (type == 169)
						{
							Vector2 vector25 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
							float num726 = Main.rand.Next(5, 9);
							float num727 = Main.rand.Next(12, 17);
							float value23 = Main.rand.Next(3, 7);
							float num728 = 20f;
							for (float num729 = 0f; num729 < num726; num729++)
							{
								for (int num730 = 0; num730 < 2; num730++)
								{
									Vector2 value24 = vector25.RotatedBy(((num730 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num726 * 2f));
									for (float num731 = 0f; num731 < num728; num731++)
									{
										Vector2 value25 = Vector2.Lerp(vector25, value24, num731 / num728);
										float scaleFactor = MathHelper.Lerp(num727, value23, num731 / num728);
										int num732 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust = Main.dust[num732];
										dust.velocity *= 0.1f;
										Main.dust[num732].noGravity = true;
										dust = Main.dust[num732];
										dust.velocity += value25 * scaleFactor;
									}
								}
								vector25 = vector25.RotatedBy((float)Math.PI * 2f / num726);
							}
							for (float num733 = 0f; num733 < num726; num733++)
							{
								for (int num734 = 0; num734 < 2; num734++)
								{
									Vector2 value26 = vector25.RotatedBy(((num734 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num726 * 2f));
									for (float num735 = 0f; num735 < num728; num735++)
									{
										Vector2 value27 = Vector2.Lerp(vector25, value26, num735 / num728);
										float scaleFactor2 = MathHelper.Lerp(num727, value23, num735 / num728) / 2f;
										int num736 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust = Main.dust[num736];
										dust.velocity *= 0.1f;
										Main.dust[num736].noGravity = true;
										dust = Main.dust[num736];
										dust.velocity += value27 * scaleFactor2;
									}
								}
								vector25 = vector25.RotatedBy((float)Math.PI * 2f / num726);
							}
							for (int num737 = 0; num737 < 100; num737++)
							{
								float num738 = num727;
								int num739 = 132;
								int num740 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num739, 0f, 0f, 100);
								float num741 = Main.dust[num740].velocity.X;
								float y4 = Main.dust[num740].velocity.Y;
								if (num741 == 0f && y4 == 0f)
								{
									num741 = 1f;
								}
								float num742 = (float)Math.Sqrt(num741 * num741 + y4 * y4);
								num742 = num738 / num742;
								num741 *= num742;
								y4 *= num742;
								Dust dust = Main.dust[num740];
								dust.velocity *= 0.5f;
								Main.dust[num740].velocity.X += num741;
								Main.dust[num740].velocity.Y += y4;
								Main.dust[num740].scale = 1.3f;
								Main.dust[num740].noGravity = true;
							}
						}
						if (type == 170)
						{
							for (int num743 = 0; num743 < 400; num743++)
							{
								int num744 = 133;
								float num745 = 16f;
								if (num743 > 100)
								{
									num745 = 11f;
								}
								if (num743 > 100)
								{
									num744 = 134;
								}
								if (num743 > 200)
								{
									num745 = 8f;
								}
								if (num743 > 200)
								{
									num744 = 133;
								}
								if (num743 > 300)
								{
									num745 = 5f;
								}
								if (num743 > 300)
								{
									num744 = 134;
								}
								int num746 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num744, 0f, 0f, 100);
								float num747 = Main.dust[num746].velocity.X;
								float y5 = Main.dust[num746].velocity.Y;
								if (num747 == 0f && y5 == 0f)
								{
									num747 = 1f;
								}
								float num748 = (float)Math.Sqrt(num747 * num747 + y5 * y5);
								num748 = num745 / num748;
								if (num743 > 300)
								{
									num747 = num747 * num748 * 0.7f;
									y5 *= num748;
								}
								else if (num743 > 200)
								{
									num747 *= num748;
									y5 = y5 * num748 * 0.7f;
								}
								else if (num743 > 100)
								{
									num747 = num747 * num748 * 0.7f;
									y5 *= num748;
								}
								else
								{
									num747 *= num748;
									y5 = y5 * num748 * 0.7f;
								}
								Dust dust = Main.dust[num746];
								dust.velocity *= 0.5f;
								Main.dust[num746].velocity.X += num747;
								Main.dust[num746].velocity.Y += y5;
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num746].scale = 1.3f;
									Main.dust[num746].noGravity = true;
								}
							}
						}
						if (type == 415)
						{
							Vector2 vector26 = (vector26 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2());
							float num749 = Main.rand.Next(5, 9);
							float num750 = (float)Main.rand.Next(10, 15) * 0.66f;
							float num751 = (float)Main.rand.Next(4, 7) / 2f;
							int num752 = 30;
							for (int num753 = 0; (float)num753 < (float)num752 * num749; num753++)
							{
								if (num753 % num752 == 0)
								{
									vector26 = vector26.RotatedBy((float)Math.PI * 2f / num749);
								}
								float scaleFactor3 = MathHelper.Lerp(num751, num750, (float)(num753 % num752) / (float)num752);
								int num754 = 130;
								int num755 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num754, 0f, 0f, 100);
								Dust dust = Main.dust[num755];
								dust.velocity *= 0.1f;
								dust = Main.dust[num755];
								dust.velocity += vector26 * scaleFactor3;
								Main.dust[num755].scale = 1.3f;
								Main.dust[num755].noGravity = true;
							}
							for (int num756 = 0; num756 < 100; num756++)
							{
								float num757 = num750;
								if (num756 < 30)
								{
									num757 = (num751 + num750) / 2f;
								}
								int num758 = 130;
								int num759 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num758, 0f, 0f, 100);
								float num760 = Main.dust[num759].velocity.X;
								float y6 = Main.dust[num759].velocity.Y;
								if (num760 == 0f && y6 == 0f)
								{
									num760 = 1f;
								}
								float num761 = (float)Math.Sqrt(num760 * num760 + y6 * y6);
								num761 = num757 / num761;
								num760 *= num761;
								y6 *= num761;
								Dust dust = Main.dust[num759];
								dust.velocity *= 0.5f;
								Main.dust[num759].velocity.X += num760;
								Main.dust[num759].velocity.Y += y6;
								Main.dust[num759].scale = 1.3f;
								Main.dust[num759].noGravity = true;
							}
						}
						if (type == 416)
						{
							Vector2 vector27 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
							Vector2 vector28 = vector27;
							float num762 = Main.rand.Next(3, 6) * 2;
							int num763 = 20;
							float num764 = ((Main.rand.Next(2) == 0) ? 1f : (-1f));
							bool flag2 = true;
							for (int num765 = 0; (float)num765 < (float)num763 * num762; num765++)
							{
								if (num765 % num763 == 0)
								{
									vector28 = vector28.RotatedBy(num764 * ((float)Math.PI * 2f / num762));
									vector27 = vector28;
									flag2 = !flag2;
								}
								else
								{
									float num766 = (float)Math.PI * 2f / ((float)num763 * num762);
									vector27 = vector27.RotatedBy(num766 * num764 * 3f);
								}
								float scaleFactor4 = MathHelper.Lerp(1f, 8f, (float)(num765 % num763) / (float)num763);
								int num767 = 131;
								int num768 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num767, 0f, 0f, 100, default(Color), 1.4f);
								Dust dust = Main.dust[num768];
								dust.velocity *= 0.1f;
								dust = Main.dust[num768];
								dust.velocity += vector27 * scaleFactor4;
								if (flag2)
								{
									Main.dust[num768].scale = 0.9f;
								}
								Main.dust[num768].noGravity = true;
							}
						}
						if (type == 417)
						{
							float num769 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
							float num770 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
							float num771 = 4f + (float)Main.rand.NextDouble() * 3f;
							float num772 = 4f + (float)Main.rand.NextDouble() * 3f;
							float num773 = num771;
							if (num772 > num773)
							{
								num773 = num772;
							}
							for (int num774 = 0; num774 < 150; num774++)
							{
								int num775 = 132;
								float num776 = num773;
								if (num774 > 50)
								{
									num776 = num772;
								}
								if (num774 > 50)
								{
									num775 = 133;
								}
								if (num774 > 100)
								{
									num776 = num771;
								}
								if (num774 > 100)
								{
									num775 = 132;
								}
								int num777 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num775, 0f, 0f, 100);
								Vector2 vector29 = Main.dust[num777].velocity;
								vector29.Normalize();
								vector29 *= num776;
								if (num774 > 100)
								{
									vector29.X *= 0.5f;
									vector29 = vector29.RotatedBy(num769);
								}
								else if (num774 > 50)
								{
									vector29.Y *= 0.5f;
									vector29 = vector29.RotatedBy(num770);
								}
								Dust dust = Main.dust[num777];
								dust.velocity *= 0.2f;
								dust = Main.dust[num777];
								dust.velocity += vector29;
								if (num774 <= 200)
								{
									Main.dust[num777].scale = 1.3f;
									Main.dust[num777].noGravity = true;
								}
							}
						}
						if (type == 418)
						{
							Vector2 vector30 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
							float num778 = Main.rand.Next(5, 12);
							float num779 = (float)Main.rand.Next(9, 14) * 0.66f;
							float num780 = (float)Main.rand.Next(2, 4) * 0.66f;
							float num781 = 15f;
							for (float num782 = 0f; num782 < num778; num782++)
							{
								for (int num783 = 0; num783 < 2; num783++)
								{
									Vector2 value28 = vector30.RotatedBy(((num783 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num778 * 2f));
									for (float num784 = 0f; num784 < num781; num784++)
									{
										Vector2 value29 = Vector2.SmoothStep(vector30, value28, num784 / num781);
										float scaleFactor5 = MathHelper.SmoothStep(num779, num780, num784 / num781);
										int num785 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, 134, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust = Main.dust[num785];
										dust.velocity *= 0.1f;
										Main.dust[num785].noGravity = true;
										dust = Main.dust[num785];
										dust.velocity += value29 * scaleFactor5;
									}
								}
								vector30 = vector30.RotatedBy((float)Math.PI * 2f / num778);
							}
							for (int num786 = 0; num786 < 120; num786++)
							{
								float num787 = num779;
								int num788 = 133;
								if (num786 < 80)
								{
									num787 = num780 - 0.5f;
								}
								else
								{
									num788 = 131;
								}
								int num789 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), 6, 6, num788, 0f, 0f, 100);
								float num790 = Main.dust[num789].velocity.X;
								float y7 = Main.dust[num789].velocity.Y;
								if (num790 == 0f && y7 == 0f)
								{
									num790 = 1f;
								}
								float num791 = (float)Math.Sqrt(num790 * num790 + y7 * y7);
								num791 = num787 / num791;
								num790 *= num791;
								y7 *= num791;
								Dust dust = Main.dust[num789];
								dust.velocity *= 0.2f;
								Main.dust[num789].velocity.X += num790;
								Main.dust[num789].velocity.Y += y7;
								Main.dust[num789].scale = 1.3f;
								Main.dust[num789].noGravity = true;
							}
						}
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 192;
						base.height = 192;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						penetrate = -1;
						Damage();
					}
					else if (type == 312)
					{
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 22;
						base.height = 22;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						for (int num792 = 0; num792 < 30; num792++)
						{
							int num793 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num793];
							dust.velocity *= 1.4f;
						}
						for (int num794 = 0; num794 < 20; num794++)
						{
							int num795 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 3.5f);
							Main.dust[num795].noGravity = true;
							Dust dust = Main.dust[num795];
							dust.velocity *= 7f;
							num795 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num795];
							dust.velocity *= 3f;
						}
						for (int num796 = 0; num796 < 2; num796++)
						{
							float num797 = 0.4f;
							if (num796 == 1)
							{
								num797 = 0.8f;
							}
							int num798 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num798];
							gore.velocity *= num797;
							Main.gore[num798].velocity.X += 1f;
							Main.gore[num798].velocity.Y += 1f;
							num798 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num798];
							gore.velocity *= num797;
							Main.gore[num798].velocity.X -= 1f;
							Main.gore[num798].velocity.Y += 1f;
							num798 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num798];
							gore.velocity *= num797;
							Main.gore[num798].velocity.X += 1f;
							Main.gore[num798].velocity.Y -= 1f;
							num798 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num798];
							gore.velocity *= num797;
							Main.gore[num798].velocity.X -= 1f;
							Main.gore[num798].velocity.Y -= 1f;
						}
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 128;
						base.height = 128;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						Damage();
					}
					else if (type == 910 || type == 911)
					{
						Resize(22, 22);
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						Color transparent = Color.Transparent;
						int num799 = 0;
						for (int num800 = 0; num800 < 30; num800++)
						{
							Dust dust41 = Dust.NewDustDirect(base.position, base.width, base.height, 31, 0f, 0f, 100, transparent, 1.5f);
							Dust dust = dust41;
							dust.velocity *= 1.4f;
						}
						for (int num801 = 0; num801 < 80; num801++)
						{
							Dust dust42 = Dust.NewDustDirect(base.position, base.width, base.height, num799, 0f, 0f, 100, transparent, 2.2f);
							dust42.noGravity = true;
							dust42.velocity.Y -= 1.2f;
							Dust dust = dust42;
							dust.velocity *= 4f;
							dust42 = Dust.NewDustDirect(base.position, base.width, base.height, num799, 0f, 0f, 100, transparent, 1.3f);
							dust42.velocity.Y -= 1.2f;
							dust = dust42;
							dust.velocity *= 2f;
						}
						for (int num802 = 1; num802 <= 2; num802++)
						{
							for (int num803 = -1; num803 <= 1; num803 += 2)
							{
								for (int num804 = -1; num804 <= 1; num804 += 2)
								{
									Gore gore5 = Gore.NewGoreDirect(base.position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore5;
									gore.velocity *= ((num802 == 1) ? 0.4f : 0.8f);
									gore = gore5;
									gore.velocity += new Vector2(num803, num804);
								}
							}
						}
						if (Main.netMode != 1)
						{
							Point pt = base.Center.ToTileCoordinates();
							Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt, 4.2f, DelegateMethods.SpreadDirt);
						}
					}
					else if (type == 784 || type == 785 || type == 786 || type == 805 || type == 903)
					{
						Resize(22, 22);
						if (type == 785)
						{
							SoundEngine.PlaySound(SoundID.Item62, base.position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, base.position);
						}
						Color transparent2 = Color.Transparent;
						int num805 = Dust.dustWater();
						for (int num806 = 0; num806 < 30; num806++)
						{
							Dust dust43 = Dust.NewDustDirect(base.position, base.width, base.height, 31, 0f, 0f, 100, transparent2, 1.5f);
							Dust dust = dust43;
							dust.velocity *= 1.4f;
						}
						for (int num807 = 0; num807 < 80; num807++)
						{
							Dust dust44 = Dust.NewDustDirect(base.position, base.width, base.height, num805, 0f, 0f, 100, transparent2, 2.2f);
							dust44.noGravity = true;
							dust44.velocity.Y -= 1.2f;
							Dust dust = dust44;
							dust.velocity *= 7f;
							dust44 = Dust.NewDustDirect(base.position, base.width, base.height, num805, 0f, 0f, 100, transparent2, 1.3f);
							dust44.velocity.Y -= 1.2f;
							dust = dust44;
							dust.velocity *= 4f;
						}
						for (int num808 = 1; num808 <= 2; num808++)
						{
							for (int num809 = -1; num809 <= 1; num809 += 2)
							{
								for (int num810 = -1; num810 <= 1; num810 += 2)
								{
									Gore gore6 = Gore.NewGoreDirect(base.position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore6;
									gore.velocity *= ((num808 == 1) ? 0.4f : 0.8f);
									gore = gore6;
									gore.velocity += new Vector2(num809, num810);
								}
							}
						}
						if (Main.netMode != 1)
						{
							Point pt2 = base.Center.ToTileCoordinates();
							Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt2, 3f, DelegateMethods.SpreadWater);
						}
					}
					else if (type == 787 || type == 788 || type == 789 || type == 806 || type == 904)
					{
						Resize(22, 22);
						if (type == 788)
						{
							SoundEngine.PlaySound(SoundID.Item62, base.position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, base.position);
						}
						Color transparent3 = Color.Transparent;
						int num811 = 35;
						for (int num812 = 0; num812 < 30; num812++)
						{
							Dust dust45 = Dust.NewDustDirect(base.position, base.width, base.height, 31, 0f, 0f, 100, transparent3, 1.5f);
							Dust dust = dust45;
							dust.velocity *= 1.4f;
						}
						for (int num813 = 0; num813 < 80; num813++)
						{
							Dust dust46 = Dust.NewDustDirect(base.position, base.width, base.height, num811, 0f, 0f, 100, transparent3, 1.2f);
							Dust dust = dust46;
							dust.velocity *= 7f;
							dust46 = Dust.NewDustDirect(base.position, base.width, base.height, num811, 0f, 0f, 100, transparent3, 0.3f);
							dust = dust46;
							dust.velocity *= 4f;
						}
						for (int num814 = 1; num814 <= 2; num814++)
						{
							for (int num815 = -1; num815 <= 1; num815 += 2)
							{
								for (int num816 = -1; num816 <= 1; num816 += 2)
								{
									Gore gore7 = Gore.NewGoreDirect(base.position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore7;
									gore.velocity *= ((num814 == 1) ? 0.4f : 0.8f);
									gore = gore7;
									gore.velocity += new Vector2(num815, num816);
								}
							}
						}
						if (Main.netMode != 1)
						{
							Point pt3 = base.Center.ToTileCoordinates();
							Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt3, 3f, DelegateMethods.SpreadLava);
						}
					}
					else if (type == 790 || type == 791 || type == 792 || type == 807 || type == 905)
					{
						Resize(22, 22);
						if (type == 791)
						{
							SoundEngine.PlaySound(SoundID.Item62, base.position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, base.position);
						}
						Color transparent4 = Color.Transparent;
						int num817 = 152;
						for (int num818 = 0; num818 < 30; num818++)
						{
							Dust dust47 = Dust.NewDustDirect(base.position, base.width, base.height, 31, 0f, 0f, 100, transparent4, 1.5f);
							Dust dust = dust47;
							dust.velocity *= 1.4f;
						}
						for (int num819 = 0; num819 < 80; num819++)
						{
							Dust dust48 = Dust.NewDustDirect(base.position, base.width, base.height, num817, 0f, 0f, 100, transparent4, 2.2f);
							Dust dust = dust48;
							dust.velocity *= 7f;
							dust48 = Dust.NewDustDirect(base.position, base.width, base.height, num817, 0f, 0f, 100, transparent4, 1.3f);
							dust = dust48;
							dust.velocity *= 4f;
						}
						for (int num820 = 1; num820 <= 2; num820++)
						{
							for (int num821 = -1; num821 <= 1; num821 += 2)
							{
								for (int num822 = -1; num822 <= 1; num822 += 2)
								{
									Gore gore8 = Gore.NewGoreDirect(base.position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore8;
									gore.velocity *= ((num820 == 1) ? 0.4f : 0.8f);
									gore = gore8;
									gore.velocity += new Vector2(num821, num822);
								}
							}
						}
						if (Main.netMode != 1)
						{
							Point pt4 = base.Center.ToTileCoordinates();
							Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt4, 3f, DelegateMethods.SpreadHoney);
						}
					}
					else if (type == 799 || type == 800 || type == 801 || type == 810 || type == 906)
					{
						Resize(22, 22);
						if (type == 800)
						{
							SoundEngine.PlaySound(SoundID.Item62, base.position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, base.position);
						}
						Color transparent5 = Color.Transparent;
						int num823 = 31;
						for (int num824 = 0; num824 < 30; num824++)
						{
							Dust dust49 = Dust.NewDustDirect(base.position, base.width, base.height, 31, 0f, 0f, 100, transparent5, 1.5f);
							Dust dust = dust49;
							dust.velocity *= 1.4f;
						}
						for (int num825 = 0; num825 < 80; num825++)
						{
							Dust dust50 = Dust.NewDustDirect(base.position, base.width, base.height, num823, 0f, 0f, 100, transparent5, 1.2f);
							Dust dust = dust50;
							dust.velocity *= 7f;
							dust50 = Dust.NewDustDirect(base.position, base.width, base.height, num823, 0f, 0f, 100, transparent5, 0.3f);
							dust = dust50;
							dust.velocity *= 4f;
						}
						for (int num826 = 1; num826 <= 2; num826++)
						{
							for (int num827 = -1; num827 <= 1; num827 += 2)
							{
								for (int num828 = -1; num828 <= 1; num828 += 2)
								{
									Gore gore9 = Gore.NewGoreDirect(base.position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore9;
									gore.velocity *= ((num826 == 1) ? 0.4f : 0.8f);
									gore = gore9;
									gore.velocity += new Vector2(num827, num828);
								}
							}
						}
						if (Main.netMode != 1)
						{
							Point pt5 = base.Center.ToTileCoordinates();
							Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt5, 3.5f, DelegateMethods.SpreadDry);
						}
					}
					else if (type == 793 || type == 796 || type == 794 || type == 797 || type == 795 || type == 798 || type == 808 || type == 809)
					{
						if (type == 794 || type == 797)
						{
							SoundEngine.PlaySound(SoundID.Item62, base.Center);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, base.Center);
						}
						Resize(50, 50);
						float num829 = 3f;
						for (int num830 = 0; num830 < 50; num830++)
						{
							Dust dust51 = Dust.NewDustDirect(base.position, base.width, base.height, 31, 0f, 0f, 100, default(Color), 2f);
							dust51.velocity = (dust51.position - base.Center).SafeNormalize(Vector2.Zero);
							Dust dust = dust51;
							dust.velocity *= 2f + (float)Main.rand.Next(5) * 0.1f;
							dust51.velocity.Y -= num829 * 0.5f;
							dust51.color = Color.Black * 0.9f;
							if (Main.rand.Next(2) == 0)
							{
								dust51.scale = 0.5f;
								dust51.fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
								dust51.color = Color.Black * 0.8f;
							}
						}
						for (int num831 = 0; num831 < 30; num831++)
						{
							Dust dust52 = Dust.NewDustDirect(base.position, base.width, base.height, 6, 0f, 0f, 100);
							dust52.noGravity = true;
							dust52.fadeIn = 1.4f;
							dust52.velocity = (dust52.position - base.Center).SafeNormalize(Vector2.Zero);
							Dust dust = dust52;
							dust.velocity *= 5.5f + (float)Main.rand.Next(61) * 0.1f;
							dust52.velocity.Y -= num829 * 0.5f;
							dust52 = Dust.NewDustDirect(base.position, base.width, base.height, 6, 0f, 0f, 100);
							dust52.velocity = (dust52.position - base.Center).SafeNormalize(Vector2.Zero);
							dust52.velocity.Y -= num829 * 0.25f;
							dust = dust52;
							dust.velocity *= 1.5f + (float)Main.rand.Next(5) * 0.1f;
							dust52.fadeIn = 0f;
							dust52.scale = 0.6f;
							dust52 = Dust.NewDustDirect(base.position, base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust52.noGravity = num831 % 2 == 0;
							dust52.velocity = (dust52.position - base.Center).SafeNormalize(Vector2.Zero);
							dust = dust52;
							dust.velocity *= 3f + (float)Main.rand.Next(21) * 0.2f;
							dust52.velocity.Y -= num829 * 0.5f;
							dust52.fadeIn = 1.2f;
							if (!dust52.noGravity)
							{
								dust52.scale = 0.4f;
								dust52.fadeIn = 0f;
							}
							else
							{
								dust = dust52;
								dust.velocity *= 2f + (float)Main.rand.Next(5) * 0.2f;
								dust52.velocity.Y -= num829 * 0.5f;
							}
						}
						int num832 = 0;
						for (int num833 = 1; num833 <= 3; num833++)
						{
							float num834 = (float)Math.PI * 2f * Main.rand.NextFloat();
							for (float num835 = 0f; num835 < 1f; num835 += 0.09090909f)
							{
								float f = (float)Math.PI * 2f * num835 + num834;
								Vector2 spinningpoint2 = f.ToRotationVector2();
								spinningpoint2 *= new Vector2(1f, 0.4f);
								spinningpoint2 = spinningpoint2.RotatedBy((float)num832 - (float)Math.PI);
								Vector2 value30 = ((float)num832 - (float)Math.PI / 2f).ToRotationVector2();
								Vector2 position10 = base.Center + value30 * 16f * 0f;
								Dust dust53 = Dust.NewDustPerfect(position10, 6, spinningpoint2);
								dust53.fadeIn = 1.8f;
								dust53.noGravity = true;
								Dust dust = dust53;
								dust.velocity *= (float)num833 * (Main.rand.NextFloat() * 2f + 0.2f);
								dust = dust53;
								dust.velocity += value30 * 0.8f * num833;
								dust = dust53;
								dust.velocity *= 2f;
							}
						}
						for (int num836 = 1; num836 <= 3; num836++)
						{
							for (int num837 = -1; num837 <= 1; num837 += 2)
							{
								for (int num838 = -1; num838 <= 1; num838 += 2)
								{
									Gore gore10 = Gore.NewGoreDirect(base.position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore10;
									gore.velocity *= (float)num836 / 3f;
									gore = gore10;
									gore.velocity += new Vector2(num837, num838);
								}
							}
						}
						Resize(10, 10);
					}
					else if (type == 779 || type == 783 || type == 862 || type == 863)
					{
						Resize(22, 22);
						SoundEngine.PlaySound(SoundID.Item62, base.position);
						Color transparent6 = Color.Transparent;
						for (int num839 = 0; num839 < 15; num839++)
						{
							Dust dust54 = Dust.NewDustDirect(base.position, base.width, base.height, 31, 0f, 0f, 100, transparent6, 0.8f);
							dust54.fadeIn = 0f;
							Dust dust = dust54;
							dust.velocity *= 0.5f;
						}
						for (int num840 = 0; num840 < 5; num840++)
						{
							Dust dust55 = Dust.NewDustDirect(base.position, base.width, base.height, 228, 0f, 0f, 100, transparent6, 2.5f);
							dust55.noGravity = true;
							Dust dust = dust55;
							dust.velocity *= 2.5f;
							dust55 = Dust.NewDustDirect(base.position, base.width, base.height, 228, 0f, 0f, 100, transparent6, 1.1f);
							dust = dust55;
							dust.velocity *= 2f;
							dust55.noGravity = true;
						}
						for (int num841 = 0; num841 < 3; num841++)
						{
							Dust dust56 = Dust.NewDustDirect(base.position, base.width, base.height, 226, 0f, 0f, 100, transparent6, 1.1f);
							Dust dust = dust56;
							dust.velocity *= 2f;
							dust56.noGravity = true;
						}
						for (int num842 = -1; num842 <= 1; num842 += 2)
						{
							for (int num843 = -1; num843 <= 1; num843 += 2)
							{
								if (Main.rand.Next(5) == 0)
								{
									Gore gore11 = Gore.NewGoreDirect(base.position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore11;
									gore.velocity *= 0.2f;
									gore = gore11;
									gore.scale *= 0.65f;
									gore = gore11;
									gore.velocity += new Vector2(num842, num843) * 0.5f;
								}
							}
						}
					}
					else if (type == 776 || type == 780 || type == 777 || type == 781 || type == 778 || type == 782 || type == 803 || type == 804)
					{
						Resize(22, 22);
						if (type == 777 || type == 781)
						{
							SoundEngine.PlaySound(SoundID.Item62, base.position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, base.position);
						}
						Color transparent7 = Color.Transparent;
						for (int num844 = 0; num844 < 30; num844++)
						{
							Dust dust57 = Dust.NewDustDirect(base.position, base.width, base.height, 31, 0f, 0f, 100, transparent7, 1.5f);
							Dust dust = dust57;
							dust.velocity *= 1.4f;
						}
						for (int num845 = 0; num845 < 40; num845++)
						{
							Dust dust58 = Dust.NewDustDirect(base.position, base.width, base.height, 228, 0f, 0f, 100, transparent7, 3.5f);
							dust58.noGravity = true;
							Dust dust = dust58;
							dust.velocity *= 7f;
							dust58 = Dust.NewDustDirect(base.position, base.width, base.height, 228, 0f, 0f, 100, transparent7, 1.3f);
							dust = dust58;
							dust.velocity *= 4f;
							dust58.noGravity = true;
						}
						for (int num846 = 0; num846 < 8; num846++)
						{
							Dust dust59 = Dust.NewDustDirect(base.position, base.width, base.height, 226, 0f, 0f, 100, transparent7, 1.3f);
							Dust dust = dust59;
							dust.velocity *= 4f;
							dust59.noGravity = true;
						}
						for (int num847 = 2; num847 <= 2; num847++)
						{
							for (int num848 = -1; num848 <= 1; num848 += 2)
							{
								for (int num849 = -1; num849 <= 1; num849 += 2)
								{
									Gore gore12 = Gore.NewGoreDirect(base.position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore12;
									gore.velocity *= ((num847 == 1) ? 0.4f : 0.8f);
									gore = gore12;
									gore.velocity += new Vector2(num848, num849);
								}
							}
						}
						if (owner == Main.myPlayer)
						{
							int num850 = 779;
							if (type == 780 || type == 781 || type == 782)
							{
								num850 = 783;
							}
							if (type == 803)
							{
								num850 = 862;
							}
							if (type == 804)
							{
								num850 = 863;
							}
							float num851 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
							for (float num852 = 0f; num852 < 1f; num852 += 355f / (678f * (float)Math.PI))
							{
								float f2 = num851 + num852 * ((float)Math.PI * 2f);
								Vector2 velocity = f2.ToRotationVector2() * (4f + Main.rand.NextFloat() * 2f);
								velocity += Vector2.UnitY * -1f;
								int num853 = NewProjectile(base.Center, velocity, num850, damage / 3, 0f, owner);
								Projectile projectile = Main.projectile[num853];
								Projectile projectile2 = projectile;
								projectile2.timeLeft -= Main.rand.Next(30);
							}
						}
					}
					else if (type == 133 || type == 134 || type == 135 || type == 136 || type == 137 || type == 138 || type == 303 || type == 338 || type == 339 || type == 930)
					{
						if (type == 30 || type == 133 || type == 136)
						{
							SoundEngine.PlaySound(SoundID.Item62, base.position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, base.position);
						}
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 22;
						base.height = 22;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						for (int num854 = 0; num854 < 30; num854++)
						{
							int num855 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num855];
							dust.velocity *= 1.4f;
						}
						for (int num856 = 0; num856 < 20; num856++)
						{
							int num857 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 3.5f);
							Main.dust[num857].noGravity = true;
							Dust dust = Main.dust[num857];
							dust.velocity *= 7f;
							num857 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num857];
							dust.velocity *= 3f;
						}
						for (int num858 = 0; num858 < 2; num858++)
						{
							float num859 = 0.4f;
							if (num858 == 1)
							{
								num859 = 0.8f;
							}
							int num860 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num860];
							gore.velocity *= num859;
							Main.gore[num860].velocity.X += 1f;
							Main.gore[num860].velocity.Y += 1f;
							num860 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num860];
							gore.velocity *= num859;
							Main.gore[num860].velocity.X -= 1f;
							Main.gore[num860].velocity.Y += 1f;
							num860 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num860];
							gore.velocity *= num859;
							Main.gore[num860].velocity.X += 1f;
							Main.gore[num860].velocity.Y -= 1f;
							num860 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num860];
							gore.velocity *= num859;
							Main.gore[num860].velocity.X -= 1f;
							Main.gore[num860].velocity.Y -= 1f;
						}
					}
					else if (type == 139 || type == 140 || type == 141 || type == 142 || type == 143 || type == 144 || type == 340 || type == 341)
					{
						if (type == 139)
						{
							SoundEngine.PlaySound(SoundID.Item62, base.position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, base.position);
						}
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 80;
						base.height = 80;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						for (int num861 = 0; num861 < 40; num861++)
						{
							int num862 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust dust = Main.dust[num862];
							dust.velocity *= 3f;
							if (Main.rand.Next(2) == 0)
							{
								Main.dust[num862].scale = 0.5f;
								Main.dust[num862].fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
							}
						}
						for (int num863 = 0; num863 < 70; num863++)
						{
							int num864 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 3f);
							Main.dust[num864].noGravity = true;
							Dust dust = Main.dust[num864];
							dust.velocity *= 5f;
							num864 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2f);
							dust = Main.dust[num864];
							dust.velocity *= 2f;
						}
						for (int num865 = 0; num865 < 3; num865++)
						{
							float num866 = 0.33f;
							if (num865 == 1)
							{
								num866 = 0.66f;
							}
							if (num865 == 2)
							{
								num866 = 1f;
							}
							int num867 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num867];
							gore.velocity *= num866;
							Main.gore[num867].velocity.X += 1f;
							Main.gore[num867].velocity.Y += 1f;
							num867 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num867];
							gore.velocity *= num866;
							Main.gore[num867].velocity.X -= 1f;
							Main.gore[num867].velocity.Y += 1f;
							num867 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num867];
							gore.velocity *= num866;
							Main.gore[num867].velocity.X += 1f;
							Main.gore[num867].velocity.Y -= 1f;
							num867 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num867];
							gore.velocity *= num866;
							Main.gore[num867].velocity.X -= 1f;
							Main.gore[num867].velocity.Y -= 1f;
						}
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 10;
						base.height = 10;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
					}
					else if (type == 246)
					{
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						for (int num868 = 0; num868 < 10; num868++)
						{
							int num869 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num869];
							dust.velocity *= 0.9f;
						}
						for (int num870 = 0; num870 < 5; num870++)
						{
							int num871 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num871].noGravity = true;
							Dust dust = Main.dust[num871];
							dust.velocity *= 3f;
							num871 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num871];
							dust.velocity *= 2f;
						}
						int num872 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num872];
						gore.velocity *= 0.3f;
						Main.gore[num872].velocity.X += Main.rand.Next(-1, 2);
						Main.gore[num872].velocity.Y += Main.rand.Next(-1, 2);
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 150;
						base.height = 150;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						penetrate = -1;
						maxPenetrate = 0;
						Damage();
						if (owner == Main.myPlayer)
						{
							int num873 = Main.rand.Next(2, 6);
							for (int num874 = 0; num874 < num873; num874++)
							{
								float num875 = Main.rand.Next(-100, 101);
								num875 += 0.01f;
								float num876 = Main.rand.Next(-100, 101);
								num875 -= 0.01f;
								float num877 = (float)Math.Sqrt(num875 * num875 + num876 * num876);
								num877 = 8f / num877;
								num875 *= num877;
								num876 *= num877;
								int num878 = NewProjectile(base.Center.X - base.oldVelocity.X, base.Center.Y - base.oldVelocity.Y, num875, num876, 249, damage, knockBack, owner);
								Main.projectile[num878].maxPenetrate = 0;
							}
						}
					}
					else if (type == 249)
					{
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						for (int num879 = 0; num879 < 7; num879++)
						{
							int num880 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num880];
							dust.velocity *= 0.8f;
						}
						for (int num881 = 0; num881 < 2; num881++)
						{
							int num882 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num882].noGravity = true;
							Dust dust = Main.dust[num882];
							dust.velocity *= 2.5f;
							num882 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num882];
							dust.velocity *= 1.5f;
						}
						int num883 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num883];
						gore.velocity *= 0.2f;
						Main.gore[num883].velocity.X += Main.rand.Next(-1, 2);
						Main.gore[num883].velocity.Y += Main.rand.Next(-1, 2);
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 100;
						base.height = 100;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						penetrate = -1;
						Damage();
					}
					else if (type == 588)
					{
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						base.position = base.Center;
						base.width = (base.height = 22);
						base.Center = base.position;
						for (int num884 = 0; num884 < 8; num884++)
						{
							int num885 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 219 + Main.rand.Next(5));
							Dust dust = Main.dust[num885];
							dust.velocity *= 1.4f;
							Main.dust[num885].fadeIn = 1f;
							Main.dust[num885].noGravity = true;
						}
						for (int num886 = 0; num886 < 15; num886++)
						{
							int num887 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.6f);
							Main.dust[num887].noGravity = true;
							Dust dust = Main.dust[num887];
							dust.velocity *= 5f;
							num887 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.9f);
							dust = Main.dust[num887];
							dust.velocity *= 3f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num888 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(276, 283));
							Gore gore = Main.gore[num888];
							gore.velocity *= 0.4f;
							Main.gore[num888].velocity.X += 1f;
							Main.gore[num888].velocity.Y += 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num888 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(276, 283));
							Gore gore = Main.gore[num888];
							gore.velocity *= 0.4f;
							Main.gore[num888].velocity.X -= 1f;
							Main.gore[num888].velocity.Y += 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num888 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(276, 283));
							Gore gore = Main.gore[num888];
							gore.velocity *= 0.4f;
							Main.gore[num888].velocity.X += 1f;
							Main.gore[num888].velocity.Y -= 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num888 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(276, 283));
							Gore gore = Main.gore[num888];
							gore.velocity *= 0.4f;
							Main.gore[num888].velocity.X -= 1f;
							Main.gore[num888].velocity.Y -= 1f;
						}
					}
					else if (type == 773)
					{
						Player player2 = Main.player[owner];
						Vector2 v = DirectionTo(player2.Center);
						float num889 = v.ToRotation() + (float)Math.PI / 2f;
						num889 += (float)Math.PI;
						Point scarabBombDigDirectionSnap = GetScarabBombDigDirectionSnap8();
						num889 = scarabBombDigDirectionSnap.ToVector2().ToRotation() + (float)Math.PI / 2f;
						if (type == 794 || type == 797)
						{
							SoundEngine.PlaySound(SoundID.Item62, base.Center);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, base.Center);
						}
						Resize(80, 80);
						for (int num890 = 0; num890 < 60; num890++)
						{
							Dust dust60 = Dust.NewDustDirect(base.position, base.width, base.height, 31, 0f, 0f, 100, default(Color), 2f);
							dust60.velocity.Y -= 0.5f;
							Dust dust = dust60;
							dust.velocity *= 1.2f;
							dust60.color = Color.Black * 0.9f;
							if (Main.rand.Next(2) == 0)
							{
								dust60.scale = 0.5f;
								dust60.fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
								dust60.color = Color.Black * 0.8f;
							}
						}
						for (int num891 = 0; num891 < 30; num891++)
						{
							Dust dust61 = Dust.NewDustDirect(base.position, base.width, base.height, 59, 0f, 0f, 100);
							dust61.noGravity = true;
							if (Math.Abs(base.velocity.X) > 0.25f)
							{
								base.velocity.X *= 0.25f / Math.Abs(base.velocity.X);
							}
							dust61.velocity.Y -= 0.5f;
							dust61.fadeIn = 1.2f;
							Dust dust = dust61;
							dust.velocity *= 8f;
							dust61.velocity = dust61.velocity.RotatedBy(num889);
							dust61 = Dust.NewDustDirect(base.position, base.width, base.height, 59, 0f, 0f, 100, default(Color), 1.5f);
							dust = dust61;
							dust.velocity *= 2f;
							dust61.velocity = dust61.velocity.RotatedBy(num889);
							dust61.velocity.Y -= 1.5f;
							dust61 = Dust.NewDustDirect(base.position, base.width, base.height, 59, 0f, 0f, 100, default(Color), 1.5f);
							dust61.noGravity = true;
							dust61.velocity.Y -= 1f;
							dust61.fadeIn = 2f;
							dust = dust61;
							dust.velocity *= 4f;
							dust61.velocity = dust61.velocity.RotatedBy(num889);
						}
						bool flag3 = Math.Abs(scarabBombDigDirectionSnap.X) + Math.Abs(scarabBombDigDirectionSnap.Y) == 1;
						for (int num892 = 1; num892 <= 3; num892++)
						{
							float num893 = (float)Math.PI * 2f * Main.rand.NextFloat();
							for (float num894 = 0f; num894 < 1f; num894 += 0.0833333358f)
							{
								float f3 = (float)Math.PI * 2f * num894 + num893;
								Vector2 value31 = f3.ToRotationVector2();
								value31 *= new Vector2(0.7f, 0.3f);
								Dust dust62 = Dust.NewDustPerfect(base.Center, 59, value31);
								dust62.fadeIn = 2f;
								dust62.noGravity = true;
								Dust dust = dust62;
								dust.velocity *= (float)num892 + Main.rand.NextFloat() * 0.6f;
								dust62.velocity.Y -= (float)num892 * 0.8f;
								dust62.velocity = dust62.velocity.RotatedBy(num889);
								if (flag3)
								{
									dust = dust62;
									dust.velocity += scarabBombDigDirectionSnap.ToVector2() * (Main.rand.NextFloat() * 11f + 6f);
								}
								else
								{
									dust = dust62;
									dust.velocity += scarabBombDigDirectionSnap.ToVector2() * (Main.rand.NextFloat() * 7f + 5f);
								}
							}
						}
						Vector2 value32 = (num889 - (float)Math.PI / 2f).ToRotationVector2();
						for (int num895 = 1; num895 <= 1; num895++)
						{
							for (int num896 = -1; num896 <= 1; num896 += 2)
							{
								for (int num897 = -1; num897 <= 1; num897 += 2)
								{
									Gore gore13 = Gore.NewGoreDirect(base.Center - Vector2.One * 20f, Vector2.Zero, Main.rand.Next(61, 64));
									gore13.velocity = gore13.velocity * 0.5f + value32 * 3f;
									Gore gore = gore13;
									gore.velocity += new Vector2(num896, num897) * 0.2f;
								}
							}
						}
						Resize(10, 10);
						if (owner == Main.myPlayer)
						{
							Point p = base.Center.ToTileCoordinates();
							Vector2 value33 = p.ToWorldCoordinates();
							bool wallSplode = false;
							int num898 = 15;
							if (scarabBombDigDirectionSnap.X == 0 || scarabBombDigDirectionSnap.Y == 0)
							{
								num898 = (int)((double)num898 * Math.Sqrt(2.0));
							}
							for (int num899 = 0; num899 < num898; num899++)
							{
								Vector2 vec = value33 + scarabBombDigDirectionSnap.ToVector2() * 16f * num899 * 1f;
								Point p2 = vec.ToTileCoordinates();
								if (ShouldWallExplode(p2.ToWorldCoordinates(), 9999, p2.X - 1, p2.X + 1, p2.Y - 1, p2.Y + 1))
								{
									wallSplode = true;
									break;
								}
							}
							for (int num900 = 0; num900 < num898; num900++)
							{
								Vector2 vec2 = value33 + scarabBombDigDirectionSnap.ToVector2() * 16f * num900 * 1f;
								Point p3 = vec2.ToTileCoordinates();
								ExplodeTiles(p3.ToWorldCoordinates(), 9999, p3.X - 1, p3.X + 1, p3.Y - 1, p3.Y + 1, wallSplode);
							}
						}
					}
					else if (type == 28 || type == 30 || type == 37 || type == 75 || type == 102 || type == 164 || type == 397 || type == 517 || type == 516 || type == 519 || type == 773)
					{
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 22;
						base.height = 22;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
						int num901 = 6;
						if (type == 773)
						{
							num901 = 59;
						}
						for (int num902 = 0; num902 < 20; num902++)
						{
							int num903 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num903];
							dust.velocity *= 1.4f;
						}
						for (int num904 = 0; num904 < 10; num904++)
						{
							int num905 = Dust.NewDust(base.position, base.width, base.height, num901, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num905].noGravity = true;
							Dust dust = Main.dust[num905];
							dust.velocity *= 5f;
							num905 = Dust.NewDust(base.position, base.width, base.height, num901, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num905];
							dust.velocity *= 3f;
						}
						int num906 = Gore.NewGore(base.position, default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num906];
						gore.velocity *= 0.4f;
						Main.gore[num906].velocity.X += 1f;
						Main.gore[num906].velocity.Y += 1f;
						num906 = Gore.NewGore(base.position, default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num906];
						gore.velocity *= 0.4f;
						Main.gore[num906].velocity.X -= 1f;
						Main.gore[num906].velocity.Y += 1f;
						num906 = Gore.NewGore(base.position, default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num906];
						gore.velocity *= 0.4f;
						Main.gore[num906].velocity.X += 1f;
						Main.gore[num906].velocity.Y -= 1f;
						num906 = Gore.NewGore(base.position, default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num906];
						gore.velocity *= 0.4f;
						Main.gore[num906].velocity.X -= 1f;
						Main.gore[num906].velocity.Y -= 1f;
						if (type == 102)
						{
							Vector2 position11 = base.position;
							base.position.X += base.width / 2;
							base.position.Y += base.height / 2;
							base.width = 128;
							base.height = 128;
							base.position.X -= base.width / 2;
							base.position.Y -= base.height / 2;
							damage = 40;
							Damage();
							base.position = position11;
							base.width = 22;
							base.height = 22;
						}
						if (type == 75)
						{
							Resize(128, 128);
							damage = 80;
							knockBack = 8f;
							Damage();
							Resize(22, 22);
						}
					}
					else if (type == 29 || type == 108 || type == 470 || type == 637)
					{
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						if (type == 29)
						{
							base.position.X += base.width / 2;
							base.position.Y += base.height / 2;
							base.width = 200;
							base.height = 200;
							base.position.X -= base.width / 2;
							base.position.Y -= base.height / 2;
						}
						for (int num907 = 0; num907 < 50; num907++)
						{
							int num908 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust dust = Main.dust[num908];
							dust.velocity *= 1.4f;
						}
						for (int num909 = 0; num909 < 80; num909++)
						{
							int num910 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 3f);
							Main.dust[num910].noGravity = true;
							Dust dust = Main.dust[num910];
							dust.velocity *= 5f;
							num910 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 6, 0f, 0f, 100, default(Color), 2f);
							dust = Main.dust[num910];
							dust.velocity *= 3f;
						}
						for (int num911 = 0; num911 < 2; num911++)
						{
							int num912 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							Main.gore[num912].scale = 1.5f;
							Main.gore[num912].velocity.X += 1.5f;
							Main.gore[num912].velocity.Y += 1.5f;
							num912 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							Main.gore[num912].scale = 1.5f;
							Main.gore[num912].velocity.X -= 1.5f;
							Main.gore[num912].velocity.Y += 1.5f;
							num912 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							Main.gore[num912].scale = 1.5f;
							Main.gore[num912].velocity.X += 1.5f;
							Main.gore[num912].velocity.Y -= 1.5f;
							num912 = Gore.NewGore(new Vector2(base.position.X + (float)(base.width / 2) - 24f, base.position.Y + (float)(base.height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							Main.gore[num912].scale = 1.5f;
							Main.gore[num912].velocity.X -= 1.5f;
							Main.gore[num912].velocity.Y -= 1.5f;
						}
						base.position.X += base.width / 2;
						base.position.Y += base.height / 2;
						base.width = 10;
						base.height = 10;
						base.position.X -= base.width / 2;
						base.position.Y -= base.height / 2;
					}
					else if (type == 69)
					{
						SoundEngine.PlaySound(13, (int)base.position.X, (int)base.position.Y);
						for (int num913 = 0; num913 < 5; num913++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 13);
						}
						for (int num914 = 0; num914 < 30; num914++)
						{
							int num915 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 33, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num915].alpha = 100;
							Main.dust[num915].velocity.X *= 1.5f;
							Dust dust = Main.dust[num915];
							dust.velocity *= 3f;
						}
					}
					else if (type == 70)
					{
						SoundEngine.PlaySound(13, (int)base.position.X, (int)base.position.Y);
						for (int num916 = 0; num916 < 5; num916++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 13);
						}
						for (int num917 = 0; num917 < 30; num917++)
						{
							int num918 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 52, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num918].alpha = 100;
							Main.dust[num918].velocity.X *= 1.5f;
							Dust dust = Main.dust[num918];
							dust.velocity *= 3f;
						}
					}
					else if (type == 621)
					{
						SoundEngine.PlaySound(13, (int)base.position.X, (int)base.position.Y);
						for (int num919 = 0; num919 < 5; num919++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 13);
						}
						for (int num920 = 0; num920 < 30; num920++)
						{
							int num921 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 266, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num921].alpha = 100;
							Main.dust[num921].velocity.X *= 1.5f;
							Dust dust = Main.dust[num921];
							dust.velocity *= 3f;
						}
					}
					else if (type == 114 || type == 115)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num922 = 4; num922 < 31; num922++)
						{
							float num923 = base.oldVelocity.X * (30f / (float)num922);
							float num924 = base.oldVelocity.Y * (30f / (float)num922);
							int num925 = Dust.NewDust(new Vector2(base.position.X - num923, base.position.Y - num924), 8, 8, 27, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.4f);
							Main.dust[num925].noGravity = true;
							Dust dust = Main.dust[num925];
							dust.velocity *= 0.5f;
							num925 = Dust.NewDust(new Vector2(base.position.X - num923, base.position.Y - num924), 8, 8, 27, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 0.9f);
							dust = Main.dust[num925];
							dust.velocity *= 0.5f;
						}
					}
					else if (type == 116)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num926 = 4; num926 < 31; num926++)
						{
							float num927 = base.oldVelocity.X * (30f / (float)num926);
							float num928 = base.oldVelocity.Y * (30f / (float)num926);
							int num929 = Dust.NewDust(new Vector2(base.position.X - num927, base.position.Y - num928), 8, 8, 64, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num929].noGravity = true;
							num929 = Dust.NewDust(new Vector2(base.position.X - num927, base.position.Y - num928), 8, 8, 64, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.4f);
							Main.dust[num929].noGravity = true;
						}
					}
					else if (type == 173)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num930 = 4; num930 < 24; num930++)
						{
							float num931 = base.oldVelocity.X * (30f / (float)num930);
							float num932 = base.oldVelocity.Y * (30f / (float)num930);
							int num933 = Main.rand.Next(3);
							int num934 = Dust.NewDust(new Vector2(base.position.X - num931, base.position.Y - num932), 8, 8, num933 switch
							{
								0 => 15, 
								1 => 57, 
								_ => 58, 
							}, base.oldVelocity.X * 0.2f, base.oldVelocity.Y * 0.2f, 100, default(Color), 1.8f);
							Dust dust = Main.dust[num934];
							dust.velocity *= 1.5f;
							Main.dust[num934].noGravity = true;
						}
					}
					else if (type == 132)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num935 = 4; num935 < 31; num935++)
						{
							float num936 = base.oldVelocity.X * (30f / (float)num935);
							float num937 = base.oldVelocity.Y * (30f / (float)num935);
							int num938 = Dust.NewDust(new Vector2(oldPosition.X - num936, oldPosition.Y - num937), 8, 8, 107, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num938].noGravity = true;
							Dust dust = Main.dust[num938];
							dust.velocity *= 0.5f;
							num938 = Dust.NewDust(new Vector2(oldPosition.X - num936, oldPosition.Y - num937), 8, 8, 107, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.4f);
							dust = Main.dust[num938];
							dust.velocity *= 0.05f;
						}
					}
					else if (type == 156)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num939 = 4; num939 < 31; num939++)
						{
							float num940 = base.oldVelocity.X * (30f / (float)num939);
							float num941 = base.oldVelocity.Y * (30f / (float)num939);
							int num942 = Dust.NewDust(new Vector2(oldPosition.X - num940, oldPosition.Y - num941), 8, 8, 73, base.oldVelocity.X, base.oldVelocity.Y, 255, default(Color), 1.8f);
							Main.dust[num942].noGravity = true;
							Dust dust = Main.dust[num942];
							dust.velocity *= 0.5f;
							num942 = Dust.NewDust(new Vector2(oldPosition.X - num940, oldPosition.Y - num941), 8, 8, 73, base.oldVelocity.X, base.oldVelocity.Y, 255, default(Color), 1.4f);
							dust = Main.dust[num942];
							dust.velocity *= 0.05f;
							Main.dust[num942].noGravity = true;
						}
					}
					else if (type == 157)
					{
						SoundEngine.PlaySound(SoundID.Item10, base.position);
						for (int num943 = 4; num943 < 31; num943++)
						{
							int num944 = Dust.NewDust(base.position, base.width, base.height, 107, base.oldVelocity.X, base.oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num944].noGravity = true;
							Dust dust = Main.dust[num944];
							dust.velocity *= 0.5f;
						}
					}
					else if (type == 370)
					{
						SoundEngine.PlaySound(SoundID.Item4, base.position);
						for (int num945 = 0; num945 < 5; num945++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 13);
						}
						for (int num946 = 0; num946 < 30; num946++)
						{
							Vector2 value34 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
							value34.Normalize();
							int num947 = Gore.NewGore(base.Center + value34 * 10f, value34 * Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, 331, (float)Main.rand.Next(40, 141) * 0.01f);
							Main.gore[num947].sticky = false;
						}
					}
					else if (type == 371)
					{
						SoundEngine.PlaySound(13, (int)base.position.X, (int)base.position.Y);
						SoundEngine.PlaySound(SoundID.Item16, base.position);
						for (int num948 = 0; num948 < 5; num948++)
						{
							Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 13);
						}
						for (int num949 = 0; num949 < 30; num949++)
						{
							Vector2 value35 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
							value35.Normalize();
							value35 *= 0.4f;
							int num950 = Gore.NewGore(base.Center + value35 * 10f, value35 * Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, Main.rand.Next(435, 438), (float)Main.rand.Next(20, 100) * 0.01f);
							Main.gore[num950].sticky = false;
						}
					}
					else if (type == 936)
					{
						SoundEngine.PlaySound(SoundID.Item21, base.position);
						for (int num951 = 0; num951 < 20; num951++)
						{
							Color newColor7 = Main.hslToRgb(0.7f + 0.2f * Main.rand.NextFloat(), 1f, 0.7f);
							newColor7.A /= 2;
							int num952 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 4, 0f, 0f, 150, newColor7);
							Dust dust = Main.dust[num952];
							dust.velocity *= 1.5f;
							newColor7 = Main.hslToRgb(0.7f + 0.2f * Main.rand.NextFloat(), 1f, 0.5f);
							newColor7.A /= 2;
							num952 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), base.width, base.height, 4, 0f, 0f, 150, newColor7, 1.8f);
							dust = Main.dust[num952];
							dust.velocity *= 3f;
							Main.dust[num952].noGravity = true;
						}
					}
				}
			}
			if (owner == Main.myPlayer && (type == 370 || type == 371 || type == 936))
			{
				float num953 = 80f;
				int num954 = 119;
				if (type == 371)
				{
					num954 = 120;
				}
				if (type == 936)
				{
					num954 = 320;
				}
				for (int num955 = 0; num955 < 255; num955++)
				{
					Player player3 = Main.player[num955];
					if (player3.active && !player3.dead && Vector2.Distance(base.Center, player3.Center) < num953)
					{
						player3.AddBuff(num954, 1800, quiet: false);
					}
				}
				for (int num956 = 0; num956 < 200; num956++)
				{
					NPC nPC = Main.npc[num956];
					if (nPC.active && nPC.life > 0 && Vector2.Distance(base.Center, nPC.Center) < num953)
					{
						nPC.AddBuff(num954, 1800);
					}
				}
			}
			if (owner == Main.myPlayer)
			{
				if (type == 30 || type == 517 || type == 397 || type == 588)
				{
					int num957 = 4;
					Vector2 center = base.Center;
					int num958 = (int)(center.X / 16f - (float)num957);
					int num959 = (int)(center.X / 16f + (float)num957);
					int num960 = (int)(center.Y / 16f - (float)num957);
					int num961 = (int)(center.Y / 16f + (float)num957);
					if (num958 < 0)
					{
						num958 = 0;
					}
					if (num959 > Main.maxTilesX)
					{
						num959 = Main.maxTilesX;
					}
					if (num960 < 0)
					{
						num960 = 0;
					}
					if (num961 > Main.maxTilesY)
					{
						num961 = Main.maxTilesY;
					}
					ExplodeCrackedTiles(center, num957, num958, num959, num960, num961);
				}
				if (type == 28 || type == 29 || type == 37 || type == 108 || type == 136 || type == 137 || type == 138 || type == 142 || type == 143 || type == 144 || type == 339 || type == 341 || type == 470 || type == 516 || type == 519 || type == 637 || type == 716 || type == 718 || type == 780 || type == 781 || type == 782 || type == 804 || type == 783 || type == 796 || type == 797 || type == 798 || type == 809 || (type == 102 && Main.getGoodWorld))
				{
					int num962 = 3;
					if (type == 102)
					{
						num962 = 4;
					}
					if (type == 28 || type == 37 || type == 516 || type == 519)
					{
						num962 = 4;
					}
					if (type == 29 || type == 470 || type == 637 || type == 796 || type == 797 || type == 798 || type == 809)
					{
						num962 = 7;
					}
					if (type == 142 || type == 143 || type == 144 || type == 341)
					{
						num962 = 5;
					}
					if (type == 716 || type == 780 || type == 781 || type == 782 || type == 804 || type == 783)
					{
						num962 = 3;
					}
					if (type == 718)
					{
						num962 = 5;
					}
					if (type == 108)
					{
						num962 = 10;
					}
					Vector2 compareSpot = base.position;
					if (type == 716 || type == 718 || type == 773)
					{
						compareSpot = base.Center;
					}
					int num963 = num962;
					int num964 = num962;
					int num965 = (int)(compareSpot.X / 16f - (float)num963);
					int num966 = (int)(compareSpot.X / 16f + (float)num963);
					int num967 = (int)(compareSpot.Y / 16f - (float)num964);
					int num968 = (int)(compareSpot.Y / 16f + (float)num964);
					if (num965 < 0)
					{
						num965 = 0;
					}
					if (num966 > Main.maxTilesX)
					{
						num966 = Main.maxTilesX;
					}
					if (num967 < 0)
					{
						num967 = 0;
					}
					if (num968 > Main.maxTilesY)
					{
						num968 = Main.maxTilesY;
					}
					bool wallSplode2 = ShouldWallExplode(compareSpot, num962, num965, num966, num967, num968);
					ExplodeTiles(compareSpot, num962, num965, num966, num967, num968, wallSplode2);
				}
				if (Main.netMode != 0)
				{
					NetMessage.SendData(29, -1, -1, null, identity, owner);
				}
				if (!noDropItem)
				{
					int num969 = -1;
					if (type >= 736 && type <= 738)
					{
						SoundEngine.PlaySound(SoundID.Item127, base.position);
						for (int num970 = 0; num970 < 3; num970++)
						{
							Dust.NewDust(base.position, 16, 16, type - 736 + 275);
						}
						int num971 = (int)(base.Center.X / 16f);
						int num972 = (int)(base.Center.Y / 16f) + 1;
						if (Main.myPlayer == owner && Main.tile[num971, num972].active() && Main.tile[num971, num972].type >= 481 && Main.tile[num971, num972].type <= 483 && Main.rand.Next(2) == 0)
						{
							WorldGen.KillTile(num971, num972);
							if (Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 0, num971, num972);
							}
						}
					}
					else if (aiStyle == 10)
					{
						int num973 = (int)(base.position.X + (float)(base.width / 2)) / 16;
						int num974 = (int)(base.position.Y + (float)(base.width / 2)) / 16;
						int num975 = 0;
						int num976 = 2;
						if (type == 109)
						{
							num975 = 147;
							num976 = 0;
						}
						if (type == 31)
						{
							num975 = 53;
							num976 = 169;
						}
						if (type == 42)
						{
							num975 = 53;
							num976 = 0;
						}
						if (type == 56)
						{
							num975 = 112;
							num976 = 370;
						}
						if (type == 65)
						{
							num975 = 112;
							num976 = 0;
						}
						if (type == 67)
						{
							num975 = 116;
							num976 = 408;
						}
						if (type == 68)
						{
							num975 = 116;
							num976 = 0;
						}
						if (type == 71)
						{
							num975 = 123;
							num976 = 424;
						}
						if (type == 39)
						{
							num975 = 59;
							num976 = 0;
						}
						if (type == 40)
						{
							num975 = 57;
							num976 = 0;
						}
						if (type == 179)
						{
							num975 = 224;
							num976 = 1103;
						}
						if (type == 241)
						{
							num975 = 234;
							num976 = 1246;
						}
						if (type == 354)
						{
							num975 = 234;
							num976 = 0;
						}
						if (type == 411)
						{
							num975 = 330;
							num976 = 71;
						}
						if (type == 412)
						{
							num975 = 331;
							num976 = 72;
						}
						if (type == 413)
						{
							num975 = 332;
							num976 = 73;
						}
						if (type == 414)
						{
							num975 = 333;
							num976 = 74;
						}
						if (type == 812)
						{
							num975 = 495;
							num976 = 4090;
						}
						if (type == 109)
						{
							int num977 = Player.FindClosest(base.position, base.width, base.height);
							if ((double)(base.Center - Main.player[num977].Center).Length() > (double)Main.LogicCheckScreenWidth * 0.75)
							{
								num975 = -1;
								num976 = 593;
							}
						}
						if (Main.tile[num973, num974].nactive() && Main.tile[num973, num974].halfBrick() && base.velocity.Y > 0f && Math.Abs(base.velocity.Y) > Math.Abs(base.velocity.X))
						{
							num974--;
						}
						if (!Main.tile[num973, num974].active() && num975 >= 0)
						{
							bool flag4 = false;
							if (num974 < Main.maxTilesY - 2 && Main.tile[num973, num974 + 1] != null && Main.tile[num973, num974 + 1].active() && Main.tile[num973, num974 + 1].type == 314)
							{
								flag4 = true;
							}
							if (!flag4)
							{
								WorldGen.PlaceTile(num973, num974, num975, mute: false, forced: true);
							}
							if (!flag4 && Main.tile[num973, num974].active() && Main.tile[num973, num974].type == num975)
							{
								if (Main.tile[num973, num974 + 1].halfBrick() || Main.tile[num973, num974 + 1].slope() != 0)
								{
									WorldGen.SlopeTile(num973, num974 + 1);
									if (Main.netMode == 2)
									{
										NetMessage.SendData(17, -1, -1, null, 14, num973, num974 + 1);
									}
								}
								if (Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, null, 1, num973, num974, num975);
								}
							}
							else if (num976 > 0)
							{
								num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, num976);
							}
						}
						else if (num976 > 0)
						{
							num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, num976);
						}
					}
					if (type == 171)
					{
						if (ai[1] == 0f)
						{
							num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 985);
							Main.item[num969].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 965, (int)(10f - ai[1]));
							Main.item[num969].noGrabDelay = 0;
						}
					}
					if (type == 475)
					{
						if (ai[1] == 0f)
						{
							num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3005);
							Main.item[num969].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 2996, (int)(10f - ai[1]));
							Main.item[num969].noGrabDelay = 0;
						}
					}
					if (type == 505)
					{
						if (ai[1] == 0f)
						{
							num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3079);
							Main.item[num969].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3077, (int)(10f - ai[1]));
							Main.item[num969].noGrabDelay = 0;
						}
					}
					if (type == 506)
					{
						if (ai[1] == 0f)
						{
							num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3080);
							Main.item[num969].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 3078, (int)(10f - ai[1]));
							Main.item[num969].noGrabDelay = 0;
						}
					}
					if (type == 12 && damage > 500)
					{
						num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 75);
					}
					if (type == 155)
					{
						num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 859);
					}
					if (type == 861)
					{
						num969 = Item.NewItem((int)base.position.X, (int)base.position.Y, base.width, base.height, 4743);
					}
					if (Main.netMode == 1 && num969 >= 0)
					{
						NetMessage.SendData(21, -1, -1, null, num969, 1f);
					}
				}
				if (type == 69 || type == 70 || type == 621)
				{
					int i2 = (int)(base.position.X + (float)(base.width / 2)) / 16;
					int j2 = (int)(base.position.Y + (float)(base.height / 2)) / 16;
					if (type == 69)
					{
						WorldGen.Convert(i2, j2, 2);
					}
					if (type == 70)
					{
						WorldGen.Convert(i2, j2, 1);
					}
					if (type == 621)
					{
						WorldGen.Convert(i2, j2, 4);
					}
				}
				if (type == 378)
				{
					int num978 = Main.rand.Next(2, 4);
					if (Main.rand.Next(5) == 0)
					{
						num978++;
					}
					for (int num979 = 0; num979 < num978; num979++)
					{
						float x2 = base.velocity.X;
						float y8 = base.velocity.Y;
						x2 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						y8 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						NewProjectile(base.Center.X, base.Center.Y, x2, y8, 379, damage, knockBack, owner);
					}
				}
			}
			active = false;
		}

		private void DoRainbowCrystalStaffExplosion()
		{
			Vector2 spinningpoint = new Vector2(0f, -3f).RotatedByRandom(3.1415927410125732);
			float num = Main.rand.Next(7, 13);
			Vector2 value = new Vector2(2.1f, 2f);
			Color newColor = Main.hslToRgb(ai[0], 1f, 0.5f);
			newColor.A = byte.MaxValue;
			for (float num2 = 0f; num2 < num; num2 += 1f)
			{
				int num3 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor);
				Main.dust[num3].position = base.Center;
				Main.dust[num3].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num2 / num) * value * (0.8f + Main.rand.NextFloat() * 0.4f);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].scale = 2f;
				Main.dust[num3].fadeIn = Main.rand.NextFloat() * 2f;
				if (num3 != 6000)
				{
					Dust dust = Dust.CloneDust(num3);
					dust.scale /= 2f;
					dust.fadeIn /= 2f;
					dust.color = new Color(255, 255, 255, 255);
				}
			}
			for (float num4 = 0f; num4 < num; num4 += 1f)
			{
				int num5 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor);
				Main.dust[num5].position = base.Center;
				Main.dust[num5].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num4 / num) * value * (0.8f + Main.rand.NextFloat() * 0.4f);
				Main.dust[num5].velocity *= Main.rand.NextFloat() * 0.8f;
				Main.dust[num5].noGravity = true;
				Main.dust[num5].scale = Main.rand.NextFloat() * 1f;
				Main.dust[num5].fadeIn = Main.rand.NextFloat() * 2f;
				if (num5 != 6000)
				{
					Dust dust2 = Dust.CloneDust(num5);
					dust2.scale /= 2f;
					dust2.fadeIn /= 2f;
					dust2.color = new Color(255, 255, 255, 255);
				}
			}
		}

		private bool ShouldWallExplode(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ)
		{
			bool result = false;
			for (int i = minI; i <= maxI; i++)
			{
				for (int j = minJ; j <= maxJ; j++)
				{
					float num = Math.Abs((float)i - compareSpot.X / 16f);
					float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
					if (Math.Sqrt(num * num + num2 * num2) < (double)radius && Main.tile[i, j] != null && Main.tile[i, j].wall == 0)
					{
						result = true;
						break;
					}
				}
			}
			return result;
		}

		public Color GetFloatingDaggerMinionGlowColor()
		{
			float num = (float)(whoAmI % 6) / 6f;
			return Main.hslToRgb(0.66f + 0.33f * num, 0.7f, 0.6f) * 0.7f;
		}

		private bool CanExplodeTile(int x, int y)
		{
			if (Main.tileDungeon[Main.tile[x, y].type] || TileID.Sets.BasicChest[Main.tile[x, y].type])
			{
				return false;
			}
			switch (Main.tile[x, y].type)
			{
			case 26:
			case 37:
			case 88:
			case 107:
			case 108:
			case 111:
			case 211:
			case 221:
			case 222:
			case 223:
			case 226:
			case 237:
				return false;
			case 58:
				if (!Main.hardMode)
				{
					return false;
				}
				break;
			case 77:
				if (!Main.hardMode && y >= Main.UnderworldLayer)
				{
					return false;
				}
				break;
			case 137:
				if (!NPC.downedGolemBoss)
				{
					int num = Main.tile[x, y].frameY / 18;
					if ((uint)(num - 1) <= 3u)
					{
						return false;
					}
				}
				break;
			}
			return true;
		}

		private void ExplodeTiles(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ, bool wallSplode)
		{
			AchievementsHelper.CurrentlyMining = true;
			for (int i = minI; i <= maxI; i++)
			{
				for (int j = minJ; j <= maxJ; j++)
				{
					float num = Math.Abs((float)i - compareSpot.X / 16f);
					float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
					if (!(Math.Sqrt(num * num + num2 * num2) < (double)radius))
					{
						continue;
					}
					bool flag = true;
					if (Main.tile[i, j] != null && Main.tile[i, j].active())
					{
						flag = CanExplodeTile(i, j);
						if (flag)
						{
							WorldGen.KillTile(i, j);
							if (!Main.tile[i, j].active() && Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 0, i, j);
							}
						}
					}
					if (!flag)
					{
						continue;
					}
					for (int k = i - 1; k <= i + 1; k++)
					{
						for (int l = j - 1; l <= j + 1; l++)
						{
							if (Main.tile[k, l] != null && Main.tile[k, l].wall > 0 && wallSplode)
							{
								WorldGen.KillWall(k, l);
								if (Main.tile[k, l].wall == 0 && Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, null, 2, k, l);
								}
							}
						}
					}
				}
			}
			AchievementsHelper.CurrentlyMining = false;
		}

		private void ExplodeCrackedTiles(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ)
		{
			AchievementsHelper.CurrentlyMining = true;
			for (int i = minI; i <= maxI; i++)
			{
				for (int j = minJ; j <= maxJ; j++)
				{
					float num = Math.Abs((float)i - compareSpot.X / 16f);
					float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
					if (!(Math.Sqrt(num * num + num2 * num2) < (double)radius))
					{
						continue;
					}
					bool flag = false;
					if (Main.tile[i, j] == null || !Main.tile[i, j].active())
					{
						continue;
					}
					if (Main.tile[i, j].type >= 481 && Main.tile[i, j].type <= 483)
					{
						flag = true;
					}
					if (flag)
					{
						WorldGen.KillTile(i, j);
						if (!Main.tile[i, j].active() && Main.netMode != 0)
						{
							NetMessage.SendData(17, -1, -1, null, 0, i, j);
						}
					}
				}
			}
			AchievementsHelper.CurrentlyMining = false;
		}

		public bool TryGetContainerIndex(out int containerIndex)
		{
			containerIndex = -1;
			if (type == 525)
			{
				containerIndex = -2;
				return true;
			}
			if (type == 734)
			{
				containerIndex = -5;
				return true;
			}
			return false;
		}

		public bool IsInteractible()
		{
			int num = type;
			if (num == 525 || num == 734)
			{
				return true;
			}
			return false;
		}

		public Color GetAlpha(Color newColor)
		{
			if (type == 937)
			{
				newColor.A = (byte)((float)(int)newColor.A * 0.75f);
			}
			if (type == 880 || type == 929)
			{
				newColor.A /= 2;
			}
			if (type == 855)
			{
				newColor = Color.Lerp(newColor, new Color(255, 200, 60), 0.5f);
			}
			if (type == 933)
			{
				newColor = Color.White * Opacity;
			}
			if (type == 270)
			{
				return new Color(255, 255, 255, (int)Utils.WrappedLerp(0f, 255f, (float)(timeLeft % 40) / 40f));
			}
			if (type == 837)
			{
				if (alpha > 0)
				{
					return Color.Transparent;
				}
				return new Color(255, 255, 255, 200);
			}
			if (type == 180 || type == 345 || type == 586)
			{
				return Color.Lerp(newColor, Color.White, 0.75f);
			}
			if (type == 764 || type == 856 || type == 857 || type == 864)
			{
				return Color.White;
			}
			if (type == 873 || type == 872 || type == 931 || type == 913 || type == 34)
			{
				return Color.White * Opacity;
			}
			if (type == 756)
			{
				return Color.Lerp(newColor, Color.Black, 0.25f);
			}
			if (type == 895)
			{
				return Color.White * Opacity;
			}
			if (type == 893 || type == 907)
			{
				return new Color(255, 255, 255, 150);
			}
			if (type == 833 || type == 834 || type == 835 || type == 912)
			{
				return Color.Lerp(newColor, Color.White, 0.25f);
			}
			if (type == 351 || type == 350)
			{
				Point point = base.Center.ToTileCoordinates();
				if (WorldGen.InWorld(point.X, point.Y) && !WorldGen.SolidTile(point.X, point.Y))
				{
					return Color.Lerp(newColor, Color.White, 0.15f);
				}
				return Color.Lerp(newColor, Color.White, 0.05f);
			}
			if (type == 346 || type == 347 || type == 325 || type == 755)
			{
				return Color.Lerp(newColor, Color.White, 0.75f);
			}
			int num;
			int num2;
			int num3;
			if (type == 650)
			{
				num = (int)((double)(int)newColor.R * 1.5);
				num2 = (int)((double)(int)newColor.G * 1.5);
				num3 = (int)((double)(int)newColor.B * 1.5);
				if (num > 255)
				{
					num = 255;
				}
				if (num2 > 255)
				{
					num2 = 255;
				}
				if (num3 > 255)
				{
					num3 = 255;
				}
			}
			else
			{
				if (type == 948)
				{
					return Color.White;
				}
				if (type == 604 || type == 631)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 636)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 64 - alpha / 4);
				}
				if (type == 673 || type == 706)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 180 - alpha / 2 - alpha / 4);
				}
				if (type == 603 || type == 633)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 623 || (type >= 625 && type <= 628) || type == 710)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 645 || type == 643)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 127 - alpha / 2);
				}
				if (type == 611)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 640 || type == 644 || type == 658)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 612)
				{
					return new Color(255, 255, 255, 127);
				}
				if (aiStyle == 105)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 554)
				{
					return new Color(200, 200, 200, 200);
				}
				if (type == 601)
				{
					return PortalHelper.GetPortalColor(owner, (int)ai[0]);
				}
				if (type == 602)
				{
					Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[1]);
					portalColor.A = 227;
					return portalColor;
				}
				if (type == 585)
				{
					byte a = newColor.A;
					newColor = Color.Lerp(newColor, Color.White, 0.5f);
					newColor.A = a;
					return newColor;
				}
				if (type == 714)
				{
					byte a2 = newColor.A;
					newColor = Color.Lerp(newColor, Color.White, 0.8f);
					newColor.A = a2;
					newColor *= (float)(int)a2 / 255f;
					return newColor;
				}
				if (type == 573 || type == 578 || type == 579 || type == 617 || type == 641 || type == 707 || type == 813)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 9 || type == 490)
				{
					return Color.White;
				}
				if (type == 575 || type == 596 || type == 659)
				{
					if (timeLeft < 30)
					{
						float num4 = (float)timeLeft / 30f;
						alpha = (int)(255f - 255f * num4);
					}
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 128 - alpha / 2);
				}
				if (type == 546)
				{
					return new Color(255, 200, 255, 200);
				}
				if (type == 553)
				{
					return new Color(255, 255, 200, 200);
				}
				if (type == 540)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 498)
				{
					return new Color(255, 100, 20, 200);
				}
				if (type == 538)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 518)
				{
					float num5 = 1f - (float)alpha / 255f;
					return new Color((int)(200f * num5), (int)(200f * num5), (int)(200f * num5), (int)(100f * num5));
				}
				if (type == 518 || type == 595 || type == 735)
				{
					Color value = Color.Lerp(newColor, Color.White, 0.85f);
					value.A = 128;
					return value * (1f - (float)alpha / 255f);
				}
				if (type == 536 || type == 607)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 63 - alpha / 4);
				}
				if (type == 591)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 63 - alpha / 4);
				}
				if (type == 493 || type == 494)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 492)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 491)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 485 || type == 502)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 488)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 477 || type == 478 || type == 479)
				{
					if (alpha == 0)
					{
						return new Color(255, 255, 255, 200);
					}
					return new Color(0, 0, 0, 0);
				}
				if (type == 473)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 50 || type == 53 || type == 515 || type == 870)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 723 || type == 724 || type == 725 || type == 726 || type == 728)
				{
					return new Color(255, 255, 255, 0) * Opacity;
				}
				if (type == 92)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 91)
				{
					return new Color(200, 200, 200, 0);
				}
				if (type == 34 || type == 15 || type == 93 || type == 94 || type == 95 || type == 96 || type == 253 || type == 258 || (type == 102 && alpha < 255))
				{
					return new Color(200, 200, 200, 25);
				}
				if (type == 465)
				{
					return new Color(255, 255, 255, 0) * (1f - (float)alpha / 255f);
				}
				if (type == 503)
				{
					Color value2 = Color.Lerp(newColor, Color.White, 0.5f) * (1f - (float)alpha / 255f);
					Color value3 = Color.Lerp(Color.Purple, Color.White, 0.33f);
					float amount = 0.25f + (float)Math.Cos(localAI[0]) * 0.25f;
					return Color.Lerp(value2, value3, amount);
				}
				if (type == 467)
				{
					return new Color(255, 255, 255, 255) * (1f - (float)alpha / 255f);
				}
				if (type == 694 || type == 695 || type == 696)
				{
					return new Color(255, 255, 255, 127) * (1f - (float)alpha / 255f);
				}
				if (type == 634 || type == 635)
				{
					return new Color(255, 255, 255, 127) * Opacity;
				}
				if (type == 671)
				{
					return new Color(255, 255, 255, 255) * Opacity;
				}
				if (type == 664 || type == 666 || type == 668)
				{
					newColor = Color.Lerp(newColor, Color.White, 0.5f);
					return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 200) * Opacity;
				}
				if (type == 451)
				{
					return new Color(255, 255, 255, 200) * ((255f - (float)alpha) / 255f);
				}
				if (type == 684)
				{
					return new Color(255, 255, 255, 200) * ((255f - (float)alpha) / 255f);
				}
				if (type == 454 || type == 452)
				{
					return new Color(255, 255, 255, 255) * (1f - (float)alpha / 255f);
				}
				if (type == 464)
				{
					return new Color(255, 255, 255, 255) * ((255f - (float)alpha) / 255f);
				}
				if (type == 450)
				{
					return new Color(200, 200, 200, 255 - alpha);
				}
				if (type == 459 || type == 709)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 447)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 446)
				{
					return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)alpha / 255f);
				}
				if (type == 691 || type == 692 || type == 693)
				{
					return Color.Lerp(newColor, Color.White, 0.4f) * (1f - (float)alpha / 255f);
				}
				if (type >= 646 && type <= 649)
				{
					return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)alpha / 255f);
				}
				if (type == 445)
				{
					return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
				}
				if (type == 440 || type == 449 || type == 606)
				{
					num = 255 - alpha;
					num2 = 255 - alpha;
					num3 = 255 - alpha;
				}
				else
				{
					if (type == 444)
					{
						return newColor * (1f - (float)alpha / 255f);
					}
					if (type == 443 || type == 675 || type == 686 || type == 711)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 676)
					{
						return newColor * Opacity;
					}
					if (type == 438)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 592)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 437 || type == 700)
					{
						return new Color(255, 255, 255, 0) * (1f - (float)alpha / 255f);
					}
					if (type == 462)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 352)
					{
						Color color = Color.Lerp(newColor, Color.White, 0.5f);
						color.A = (byte)((float)(int)color.A * ((float)alpha / 255f));
						return new Color(color.R, color.G, color.B, color.A);
					}
					if (type == 435 || type == 732 || type == 731)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.8f);
						return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 25);
					}
					if (type == 682)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.8f);
						return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 127);
					}
					if (type == 436)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.8f);
						return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 25);
					}
					if (type == 409)
					{
						return new Color(250, 250, 250, 200);
					}
					if (type == 348 || type == 349)
					{
						return new Color(200, 200, 200, alpha);
					}
					if (type == 337)
					{
						return new Color(250, 250, 250, 150);
					}
					if (type >= 424 && type <= 426)
					{
						byte b = 150;
						if (newColor.R < b)
						{
							newColor.R = b;
						}
						if (newColor.G < b)
						{
							newColor.G = b;
						}
						if (newColor.B < b)
						{
							newColor.B = b;
						}
						return new Color((int)newColor.R, (int)newColor.G, (int)newColor.B, 255);
					}
					if (type == 431 || type == 432)
					{
						return new Color(250, 250, 250, 255 - alpha);
					}
					if (type == 343 || type == 344)
					{
						float num6 = 1f - (float)alpha / 255f;
						return new Color((int)(250f * num6), (int)(250f * num6), (int)(250f * num6), (int)(100f * num6));
					}
					if (type == 332)
					{
						return new Color(255, 255, 255, 255);
					}
					if (type == 329)
					{
						return new Color(200, 200, 200, 50);
					}
					if (type >= 326 && type <= 328)
					{
						return Color.Transparent;
					}
					if (type >= 400 && type <= 402)
					{
						return Color.Transparent;
					}
					if (type == 324 && frame >= 6 && frame <= 9)
					{
						return new Color(255, 255, 255, 255);
					}
					if (type == 16)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 321)
					{
						return new Color(200, 200, 200, 0);
					}
					if (type == 76 || type == 77 || type == 78)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 308)
					{
						return new Color(200, 200, 255, 125);
					}
					if (type == 263)
					{
						if (timeLeft < 255)
						{
							return new Color(255, 255, 255, (int)timeLeft);
						}
						return new Color(255, 255, 255, 255);
					}
					if (type == 274)
					{
						if (timeLeft < 85)
						{
							byte b2 = (byte)(timeLeft * 3);
							byte a3 = (byte)(100f * ((float)(int)b2 / 255f));
							return new Color(b2, b2, b2, a3);
						}
						return new Color(255, 255, 255, 100);
					}
					if (type == 5)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 300 || type == 301)
					{
						return new Color(250, 250, 250, 50);
					}
					if (type == 712)
					{
						return Color.Lerp(newColor, Color.White, 0.4f) * Opacity;
					}
					if (type == 304)
					{
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, (byte)((float)(255 - alpha) / 3f));
					}
					if (type == 116 || type == 132 || type == 156 || type == 157 || type == 157 || type == 173)
					{
						if (localAI[1] >= 15f)
						{
							return new Color(255, 255, 255, alpha);
						}
						if (localAI[1] < 5f)
						{
							return Color.Transparent;
						}
						int num7 = (int)((localAI[1] - 5f) / 10f * 255f);
						return new Color(num7, num7, num7, num7);
					}
					if (type == 254)
					{
						if (timeLeft < 30)
						{
							float num8 = (float)timeLeft / 30f;
							alpha = (int)(255f - 255f * num8);
						}
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type == 265 || type == 355)
					{
						if (alpha > 0)
						{
							return Color.Transparent;
						}
						return new Color(255, 255, 255, 0);
					}
					if (type == 257)
					{
						if (alpha > 200)
						{
							return Color.Transparent;
						}
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type == 259)
					{
						if (alpha > 200)
						{
							return Color.Transparent;
						}
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type >= 150 && type <= 152)
					{
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
					}
					if (type == 250)
					{
						return Color.Transparent;
					}
					if (type == 251)
					{
						num = 255 - alpha;
						num2 = 255 - alpha;
						num3 = 255 - alpha;
						return new Color(num, num2, num3, 0);
					}
					if (type == 131)
					{
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type == 211)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 229)
					{
						return new Color(255, 255, 255, 50);
					}
					if (type == 221 || type == 729)
					{
						return new Color(255, 255, 255, 200);
					}
					if (type == 20)
					{
						if (alpha <= 150)
						{
							return new Color(255, 255, 255, 0);
						}
						return new Color(0, 0, 0, 0);
					}
					if (type == 207)
					{
						num = 255 - alpha;
						num2 = 255 - alpha;
						num3 = 255 - alpha;
					}
					else
					{
						if (type == 242)
						{
							if (alpha < 140)
							{
								return new Color(255, 255, 255, 100);
							}
							return Color.Transparent;
						}
						if (type == 638)
						{
							return new Color(255, 255, 255, 100) * Opacity;
						}
						if (type == 660)
						{
							return new Color(150, 255, 255, 0) * Opacity;
						}
						if (type == 209)
						{
							num = newColor.R - alpha;
							num2 = newColor.G - alpha;
							num3 = newColor.B - alpha / 2;
						}
						else
						{
							if (type == 130)
							{
								return new Color(255, 255, 255, 175);
							}
							if (type == 182)
							{
								return new Color(255, 255, 255, 200);
							}
							if (type == 226)
							{
								num = 255;
								num2 = 255;
								num3 = 255;
								float num9 = (float)(int)Main.mouseTextColor / 200f - 0.3f;
								num = (int)((float)num * num9);
								num2 = (int)((float)num2 * num9);
								num3 = (int)((float)num3 * num9);
								num += 50;
								if (num > 255)
								{
									num = 255;
								}
								num2 += 50;
								if (num2 > 255)
								{
									num2 = 255;
								}
								num3 += 50;
								if (num3 > 255)
								{
									num3 = 255;
								}
								return new Color(num, num2, num3, 200);
							}
							if (type == 227)
							{
								num = (num2 = (num3 = 255));
								float num10 = (float)(int)Main.mouseTextColor / 100f - 1.6f;
								num = (int)((float)num * num10);
								num2 = (int)((float)num2 * num10);
								num3 = (int)((float)num3 * num10);
								int a4 = (int)(100f * num10);
								num += 50;
								if (num > 255)
								{
									num = 255;
								}
								num2 += 50;
								if (num2 > 255)
								{
									num2 = 255;
								}
								num3 += 50;
								if (num3 > 255)
								{
									num3 = 255;
								}
								return new Color(num, num2, num3, a4);
							}
							if (type == 114 || type == 115)
							{
								if (localAI[1] >= 15f)
								{
									return new Color(255, 255, 255, alpha);
								}
								if (localAI[1] < 5f)
								{
									return Color.Transparent;
								}
								int num11 = (int)((localAI[1] - 5f) / 10f * 255f);
								return new Color(num11, num11, num11, num11);
							}
							if (type == 83 || type == 88 || type == 89 || type == 90 || type == 100 || type == 104 || type == 279 || (type >= 283 && type <= 287) || type == 876)
							{
								if (alpha < 200)
								{
									return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
								}
								return Color.Transparent;
							}
							if (type == 34 || type == 35 || type == 15 || type == 19 || type == 44 || type == 45)
							{
								return Color.White;
							}
							if (type == 79)
							{
								num = Main.DiscoR;
								num2 = Main.DiscoG;
								num3 = Main.DiscoB;
								return default(Color);
							}
							if (type == 9 || type == 15 || type == 34 || type == 50 || type == 53 || type == 76 || type == 77 || type == 78 || type == 92 || type == 91)
							{
								num = newColor.R - alpha / 3;
								num2 = newColor.G - alpha / 3;
								num3 = newColor.B - alpha / 3;
							}
							else
							{
								if (type == 18)
								{
									return new Color(255, 255, 255, 50);
								}
								if (type == 16 || type == 44 || type == 45)
								{
									num = newColor.R;
									num2 = newColor.G;
									num3 = newColor.B;
								}
								else if (type == 12 || type == 72 || type == 86 || type == 87)
								{
									return new Color(255, 255, 255, newColor.A - alpha);
								}
							}
						}
					}
				}
			}
			float num12 = (float)(255 - alpha) / 255f;
			num = (int)((float)(int)newColor.R * num12);
			num2 = (int)((float)(int)newColor.G * num12);
			num3 = (int)((float)(int)newColor.B * num12);
			int num13 = newColor.A - alpha;
			if (num13 < 0)
			{
				num13 = 0;
			}
			if (num13 > 255)
			{
				num13 = 255;
			}
			return new Color(num, num2, num3, num13);
		}

		public override string ToString()
		{
			return "type:" + type + "name:" + Name + ", active:" + active.ToString() + ", whoAmI:" + whoAmI + ", identity:" + identity + ", ai0:" + ai[0] + " , uuid:" + projUUID;
		}
	}
}
