using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using ReLogic.Utilities;
using GameManager.Audio;
using GameManager.Chat;
using GameManager.DataStructures;
using GameManager.Enums;
using GameManager.GameContent;
using GameManager.GameContent.Achievements;
using GameManager.GameContent.Creative;
using GameManager.GameContent.Drawing;
using GameManager.GameContent.Events;
using GameManager.GameContent.ItemDropRules;
using GameManager.GameContent.RGB;
using GameManager.GameContent.Tile_Entities;
using GameManager.GameContent.UI;
using GameManager.Graphics.Effects;
using GameManager.ID;
using GameManager.Localization;
using GameManager.Utilities;
using GameManager.WorldBuilding;

namespace GameManager
{
	public class NPC : Entity
	{
		private const int NPC_TARGETS_START = 300;

		public bool IsABestiaryIconDummy;

		public bool ForcePartyHatOn;

		private float waterMovementSpeed = 0.5f;

		private float lavaMovementSpeed = 0.5f;

		private float honeyMovementSpeed = 0.25f;

		public static readonly int[,,,] MoonLordAttacksArray = InitializeMoonLordAttacks();

		public static readonly int[,] MoonLordAttacksArray2 = InitializeMoonLordAttacks2();

		public static int MoonLordFightingDistance = 4500;

		public static int MoonLordCountdown = 0;

		public const int MaxMoonLordCountdown = 3600;

		public int teleportStyle;

		public float teleportTime;

		public static int immuneTime = 20;

		public static int maxAI = 4;

		public int netSpam;

		public static int goldCritterChance = 400;

		public static int[] killCount = new int[663];

		public static float waveKills = 0f;

		public static int waveNumber = 0;

		public const float nameOverIncrement = 0.025f;

		public const float nameOverDistance = 350f;

		public float nameOver;

		public bool SpawnedFromStatue;

		public bool dripping;

		public bool drippingSlime;

		public bool drippingSparkleSlime;

		public static readonly int AFKTimeNeededForNoWorms = 300;

		public int altTexture;

		public int townNpcVariationIndex;

		public Vector2 netOffset = Vector2.Zero;

		public short catchItem;

		public short releaseOwner = 255;

		public int rarity;

		public static bool taxCollector = false;

		public bool[] playerInteraction = new bool[256];

		public int lastInteraction = 255;

		public float takenDamageMultiplier = 1f;

		public static bool freeCake = false;

		private static int spawnSpaceX = 3;

		private static int spawnSpaceY = 3;

		public float gfxOffY;

		public float stepSpeed;

		private static float gravity = 0.3f;

		public bool teleporting;

		private static int maxAttack = 20;

		private static int[] attackNPC = new int[maxAttack];

		public bool stairFall;

		public static int fireFlyFriendly = 0;

		public static int fireFlyChance = 0;

		public static int fireFlyMultiple = 0;

		public static int butterflyChance = 0;

		private byte netStream;

		private byte[] streamPlayer = new byte[255];

		private bool needsUniqueInfoUpdate = true;

		public Vector2[] oldPos = new Vector2[10];

		public float[] oldRot = new float[10];

		public bool setFrameSize;

		public static int golemBoss = -1;

		public static int plantBoss = -1;

		public static int crimsonBoss = -1;

		public int netSkip;

		public bool netAlways;

		public int realLife = -1;

		private string _givenName = "";

		public static int sWidth = 1920;

		public static int sHeight = 1080;

		private static int spawnRangeX = (int)((double)(sWidth / 16) * 0.7);

		private static int spawnRangeY = (int)((double)(sHeight / 16) * 0.7);

		public static int safeRangeX = (int)((double)(sWidth / 16) * 0.52);

		public static int safeRangeY = (int)((double)(sHeight / 16) * 0.52);

		private static int activeRangeX = (int)((double)sWidth * 2.1);

		private static int activeRangeY = (int)((double)sHeight * 2.1);

		private static int townRangeX = sWidth;

		private static int townRangeY = sHeight;

		public float npcSlots = 1f;

		private static bool noSpawnCycle = false;

		private static int activeTime = 750;

		private static int defaultSpawnRate = 600;

		private static int defaultMaxSpawns = 5;

		public bool dontCountMe;

		public const int maxBuffs = 5;

		public int[] buffType = new int[5];

		public int[] buffTime = new int[5];

		public bool[] buffImmune = new bool[323];

		public bool midas;

		public bool ichor;

		public bool onFire;

		public bool onFire2;

		public bool onFrostBurn;

		public bool poisoned;

		public bool markedByScytheWhip;

		public bool markedByThornWhip;

		public bool markedByFireWhip;

		public bool markedByRainbowWhip;

		public bool markedByBlandWhip;

		public bool markedBySwordWhip;

		public bool markedByMaceWhip;

		public bool venom;

		public bool shadowFlame;

		public bool soulDrain;

		public int lifeRegen;

		public int lifeRegenCount;

		public int lifeRegenExpectedLossPerSecond = -1;

		public bool confused;

		public bool loveStruck;

		public bool stinky;

		public bool dryadWard;

		public bool immortal;

		public bool chaseable = true;

		public bool canGhostHeal = true;

		public bool javelined;

		public bool celled;

		public bool dryadBane;

		public bool daybreak;

		public bool dontTakeDamageFromHostiles;

		public bool betsysCurse;

		public bool oiled;

		public static bool savedTaxCollector = false;

		public static bool savedGoblin = false;

		public static bool savedWizard = false;

		public static bool savedMech = false;

		public static bool savedAngler = false;

		public static bool savedStylist = false;

		public static bool savedBartender = false;

		public static bool savedGolfer = false;

		public static bool boughtCat = false;

		public static bool boughtDog = false;

		public static bool boughtBunny = false;

		public static bool combatBookWasUsed = false;

		public static bool downedBoss1 = false;

		public static bool downedBoss2 = false;

		public static bool downedBoss3 = false;

		public static bool downedQueenBee = false;

		public static bool downedSlimeKing = false;

		public static bool downedGoblins = false;

		public static bool downedFrost = false;

		public static bool downedPirates = false;

		public static bool downedClown = false;

		public static bool downedPlantBoss = false;

		public static bool downedGolemBoss = false;

		public static bool downedMartians = false;

		public static bool downedFishron = false;

		public static bool downedHalloweenTree = false;

		public static bool downedHalloweenKing = false;

		public static bool downedChristmasIceQueen = false;

		public static bool downedChristmasTree = false;

		public static bool downedChristmasSantank = false;

		public static bool downedAncientCultist = false;

		public static bool downedMoonlord = false;

		public static bool downedTowerSolar = false;

		public static bool downedTowerVortex = false;

		public static bool downedTowerNebula = false;

		public static bool downedTowerStardust = false;

		public static bool downedEmpressOfLight = false;

		public static bool downedQueenSlime = false;

		public static int ShieldStrengthTowerSolar = 0;

		public static int ShieldStrengthTowerVortex = 0;

		public static int ShieldStrengthTowerNebula = 0;

		public static int ShieldStrengthTowerStardust = 0;

		public static int LunarShieldPowerNormal = 100;

		public static int LunarShieldPowerExpert = 150;

		public static bool TowerActiveSolar = false;

		public static bool TowerActiveVortex = false;

		public static bool TowerActiveNebula = false;

		public static bool TowerActiveStardust = false;

		public static bool LunarApocalypseIsUp = false;

		public static bool downedMechBossAny = false;

		public static bool downedMechBoss1 = false;

		public static bool downedMechBoss2 = false;

		public static bool downedMechBoss3 = false;

		public static bool[] npcsFoundForCheckActive = new bool[663];

		public static int[] lazyNPCOwnedProjectileSearchArray = new int[200];

		private static int spawnRate = defaultSpawnRate;

		private static int maxSpawns = defaultMaxSpawns;

		public int soundDelay;

		public static CoinLossRevengeSystem RevengeManager = new CoinLossRevengeSystem();

		public int[] immune = new int[256];

		public int directionY = 1;

		public int type;

		public float[] ai = new float[maxAI];

		public float[] localAI = new float[maxAI];

		public int aiAction;

		public int aiStyle;

		public bool justHit;

		public int timeLeft;

		public int target = -1;

		public int damage;

		public int defense;

		public int defDamage;

		public int defDefense;

		public bool coldDamage;

		public bool trapImmune;

		public LegacySoundStyle HitSound;

		public LegacySoundStyle DeathSound;

		public int life;

		public int lifeMax;

		public Rectangle targetRect;

		public double frameCounter;

		public Rectangle frame;

		public Color color;

		public int alpha;

		public bool hide;

		public float scale = 1f;

		public float knockBackResist = 1f;

		public int oldDirectionY;

		public int oldTarget;

		public float rotation;

		public bool noGravity;

		public bool noTileCollide;

		public bool netUpdate;

		public bool netUpdate2;

		public bool collideX;

		public bool collideY;

		public bool boss;

		public int spriteDirection = -1;

		public bool behindTiles;

		public bool lavaImmune;

		public float value;

		public int extraValue;

		public bool dontTakeDamage;

		public int netID;

		public int statsAreScaledForThisManyPlayers;

		public float strengthMultiplier = 1f;

		public bool townNPC;

		public static bool travelNPC = false;

		public bool homeless;

		public int homeTileX = -1;

		public int homeTileY = -1;

		public int housingCategory;

		public bool oldHomeless;

		public int oldHomeTileX = -1;

		public int oldHomeTileY = -1;

		public bool friendly;

		public bool closeDoor;

		public int doorX;

		public int doorY;

		public int friendlyRegen;

		public int breath;

		public const int breathMax = 200;

		public int breathCounter;

		public bool reflectsProjectiles;

		public int lastPortalColorIndex;

		public bool despawnEncouraged;

		public static int[,] cavernMonsterType = new int[2, 3];

		private static bool EoCKilledToday;

		private static bool WoFKilledToday;

		public static bool fairyLog = false;

		private static int ignorePlayerInteractions = 0;

		public static int ladyBugGoodLuckTime = 43200;

		public static int ladyBugBadLuckTime = -10800;

		private static int ladyBugRainTime = 1800;

		public static int offSetDelayTime = 60;

		public bool CanTalk
		{
			get
			{
				if (isLikeATownNPC && aiStyle == 7 && velocity.Y == 0f)
				{
					return !NPCID.Sets.IsTownPet[type];
				}
				return false;
			}
		}

		public bool CanBeTalkedTo
		{
			get
			{
				if (isLikeATownNPC && aiStyle == 7)
				{
					return velocity.Y == 0f;
				}
				return false;
			}
		}

		public bool HasValidTarget
		{
			get
			{
				if (!HasPlayerTarget || !Main.player[target].active || Main.player[target].dead || Main.player[target].ghost)
				{
					if (SupportsNPCTargets && HasNPCTarget)
					{
						return Main.npc[TranslatedTargetIndex].active;
					}
					return false;
				}
				return true;
			}
		}

		public bool HasPlayerTarget
		{
			get
			{
				if (target >= 0)
				{
					return target < 255;
				}
				return false;
			}
		}

		public bool HasNPCTarget
		{
			get
			{
				if (target >= 300)
				{
					return target < 500;
				}
				return false;
			}
		}

		public bool SupportsNPCTargets => NPCID.Sets.UsesNewTargetting[type];

		public int TranslatedTargetIndex
		{
			get
			{
				if (HasNPCTarget)
				{
					return target - 300;
				}
				return target;
			}
		}

		public int WhoAmIToTargettingIndex => whoAmI + 300;

		public string TypeName => Lang.GetNPCNameValue(netID);

		public string FullName
		{
			get
			{
				if (!HasGivenName)
				{
					return TypeName;
				}
				return Language.GetTextValue("Game.NPCTitle", _givenName, TypeName);
			}
		}

		public bool HasGivenName => _givenName.Length != 0;

		public string GivenOrTypeName
		{
			get
			{
				if (!HasGivenName)
				{
					return TypeName;
				}
				return _givenName;
			}
		}

		public string GivenName
		{
			get
			{
				return _givenName;
			}
			set
			{
				_givenName = value ?? "";
			}
		}

		public static bool downedTowers
		{
			get
			{
				if (downedTowerSolar && downedTowerVortex && downedTowerNebula)
				{
					return downedTowerStardust;
				}
				return false;
			}
		}

		public static int ShieldStrengthTowerMax
		{
			get
			{
				if (!Main.expertMode)
				{
					return LunarShieldPowerNormal;
				}
				return LunarShieldPowerExpert;
			}
		}

		public static bool TowersDefeated
		{
			get
			{
				if (TowerActiveSolar && TowerActiveVortex && TowerActiveNebula)
				{
					return TowerActiveStardust;
				}
				return false;
			}
		}

		public float Opacity
		{
			get
			{
				return 1f - (float)alpha / 255f;
			}
			set
			{
				alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
			}
		}

		public bool isLikeATownNPC
		{
			get
			{
				if (type == 453)
				{
					return true;
				}
				return townNPC;
			}
		}

		public static bool TooWindyForButterflies => Math.Abs(Main.windSpeedTarget) >= 0.4f;

		public bool CountsAsACritter
		{
			get
			{
				if (lifeMax <= 5 && damage == 0)
				{
					return type != 594;
				}
				return false;
			}
		}

		public NPCAimedTarget GetTargetData(bool ignorePlayerTankPets = true)
		{
			if (!HasValidTarget)
			{
				return default(NPCAimedTarget);
			}
			if (SupportsNPCTargets && HasNPCTarget)
			{
				return new NPCAimedTarget(Main.npc[TranslatedTargetIndex]);
			}
			return new NPCAimedTarget(Main.player[target], ignorePlayerTankPets);
		}

		public static int[,,,] InitializeMoonLordAttacks()
		{
			int[,,,] array = null;
			if (MoonLordAttacksArray != null)
			{
				array = MoonLordAttacksArray;
				for (int i = 0; i < array.GetLength(0); i++)
				{
					for (int j = 0; j < array.GetLength(1); j++)
					{
						for (int k = 0; k < array.GetLength(2); k++)
						{
							for (int l = 0; l < array.GetLength(3); l++)
							{
								array[i, j, k, l] = 0;
							}
						}
					}
				}
			}
			else
			{
				array = new int[3, 3, 2, 5];
			}
			array[0, 0, 0, 0] = 0;
			array[0, 0, 1, 0] = 50;
			array[0, 0, 0, 1] = 1;
			array[0, 0, 1, 1] = 70;
			array[0, 0, 0, 2] = 2;
			array[0, 0, 1, 2] = 330;
			array[0, 0, 0, 3] = 0;
			array[0, 0, 1, 3] = 60;
			array[0, 0, 0, 4] = 3;
			array[0, 0, 1, 4] = 90;
			array[0, 1, 0, 0] = 1;
			array[0, 1, 1, 0] = 70;
			array[0, 1, 0, 1] = 0;
			array[0, 1, 1, 1] = 50;
			array[0, 1, 0, 2] = 3;
			array[0, 1, 1, 2] = 90;
			array[0, 1, 0, 3] = 0;
			array[0, 1, 1, 3] = 60;
			array[0, 1, 0, 4] = 2;
			array[0, 1, 1, 4] = 330;
			array[0, 2, 0, 0] = 3;
			array[0, 2, 1, 0] = 180;
			array[0, 2, 0, 1] = 0;
			array[0, 2, 1, 1] = 30;
			array[0, 2, 0, 2] = 2;
			array[0, 2, 1, 2] = 435;
			array[0, 2, 0, 3] = 3;
			array[0, 2, 1, 3] = 180;
			array[0, 2, 0, 4] = 1;
			array[0, 2, 1, 4] = 375;
			array[1, 0, 0, 0] = 0;
			array[1, 0, 1, 0] = 0;
			array[1, 0, 0, 1] = 0;
			array[1, 0, 1, 1] = 0;
			array[1, 0, 0, 2] = 0;
			array[1, 0, 1, 2] = 0;
			array[1, 0, 0, 3] = 0;
			array[1, 0, 1, 3] = 0;
			array[1, 0, 0, 4] = 0;
			array[1, 0, 1, 4] = 0;
			array[1, 1, 0, 0] = 0;
			array[1, 1, 1, 0] = 0;
			array[1, 1, 0, 1] = 0;
			array[1, 1, 1, 1] = 0;
			array[1, 1, 0, 2] = 0;
			array[1, 1, 1, 2] = 0;
			array[1, 1, 0, 3] = 0;
			array[1, 1, 1, 3] = 0;
			array[1, 1, 0, 4] = 0;
			array[1, 1, 1, 4] = 0;
			array[1, 2, 0, 0] = 0;
			array[1, 2, 1, 0] = 0;
			array[1, 2, 0, 1] = 0;
			array[1, 2, 1, 1] = 0;
			array[1, 2, 0, 2] = 0;
			array[1, 2, 1, 2] = 0;
			array[1, 2, 0, 3] = 0;
			array[1, 2, 1, 3] = 0;
			array[1, 2, 0, 4] = 0;
			array[1, 2, 1, 4] = 0;
			array[2, 0, 0, 0] = 0;
			array[2, 0, 1, 0] = 0;
			array[2, 0, 0, 1] = 0;
			array[2, 0, 1, 1] = 0;
			array[2, 0, 0, 2] = 0;
			array[2, 0, 1, 2] = 0;
			array[2, 0, 0, 3] = 0;
			array[2, 0, 1, 3] = 0;
			array[2, 0, 0, 4] = 0;
			array[2, 0, 1, 4] = 0;
			array[2, 1, 0, 0] = 0;
			array[2, 1, 1, 0] = 0;
			array[2, 1, 0, 1] = 0;
			array[2, 1, 1, 1] = 0;
			array[2, 1, 0, 2] = 0;
			array[2, 1, 1, 2] = 0;
			array[2, 1, 0, 3] = 0;
			array[2, 1, 1, 3] = 0;
			array[2, 1, 0, 4] = 0;
			array[2, 1, 1, 4] = 0;
			array[2, 2, 0, 0] = 0;
			array[2, 2, 1, 0] = 0;
			array[2, 2, 0, 1] = 0;
			array[2, 2, 1, 1] = 0;
			array[2, 2, 0, 2] = 0;
			array[2, 2, 1, 2] = 0;
			array[2, 2, 0, 3] = 0;
			array[2, 2, 1, 3] = 0;
			array[2, 2, 0, 4] = 0;
			array[2, 2, 1, 4] = 0;
			InitializeMoonLordAttacks2();
			return array;
		}

		public static int[,] InitializeMoonLordAttacks2()
		{
			int[,] array = null;
			if (MoonLordAttacksArray2 != null)
			{
				array = MoonLordAttacksArray2;
				for (int i = 0; i < array.GetLength(0); i++)
				{
					for (int j = 0; j < array.GetLength(1); j++)
					{
						array[i, j] = 0;
					}
				}
			}
			else
			{
				array = new int[2, 10];
			}
			array[0, 0] = 0;
			array[1, 0] = 90;
			array[0, 1] = 1;
			array[1, 1] = 90;
			array[0, 2] = 0;
			array[1, 2] = 90;
			array[0, 3] = 2;
			array[1, 3] = 135;
			array[0, 4] = 0;
			array[1, 4] = 90;
			array[0, 5] = 3;
			array[1, 5] = 200;
			array[0, 6] = 0;
			array[1, 6] = 90;
			array[0, 7] = 4;
			array[1, 7] = 375;
			array[0, 8] = 0;
			array[1, 8] = 90;
			array[0, 9] = 2;
			array[1, 9] = 135;
			return array;
		}

		public static string GetFullnameByID(int npcID)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == npcID)
				{
					return Main.npc[i].FullName;
				}
			}
			return Lang.GetNPCNameValue(npcID);
		}

		public static bool BusyWithAnyInvasionOfSorts()
		{
			if (Main.slimeRainTime == 0.0 && !Main.bloodMoon && !Main.eclipse && !Main.snowMoon && !Main.pumpkinMoon && Main.invasionType == 0)
			{
				return DD2Event.Ongoing;
			}
			return true;
		}

		public int GetAttackDamage_ScaledByStrength(float normalDamage)
		{
			return (int)(normalDamage * Main.GameModeInfo.EnemyDamageMultiplier * strengthMultiplier);
		}

		public float GetAttackDamage_LerpBetweenFinalValuesFloat(float normalDamage, float expertDamage)
		{
			float amount = (Main.expertMode ? 1 : 0);
			if (Main.GameModeInfo.IsJourneyMode)
			{
				amount = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 1f);
			}
			return MathHelper.Lerp(normalDamage, expertDamage, amount);
		}

		public int GetAttackDamage_LerpBetweenFinalValues(float normalDamage, float expertDamage)
		{
			float amount = (Main.expertMode ? 1 : 0);
			if (Main.GameModeInfo.IsJourneyMode)
			{
				amount = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 1f);
			}
			return (int)MathHelper.Lerp(normalDamage, expertDamage, amount);
		}

		public int GetAttackDamage_ForProjectiles(float normalDamage, float expertDamage)
		{
			float amount = (Main.expertMode ? 1 : 0);
			if (Main.GameModeInfo.IsJourneyMode)
			{
				amount = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 1f);
			}
			return (int)MathHelper.Lerp(normalDamage, expertDamage, amount);
		}

		public int GetAttackDamage_ForProjectiles_MultiLerp(float normalDamage, float expertDamage, float masterDamage)
		{
			float percent = (Main.masterMode ? 1f : (Main.expertMode ? 0.5f : 0f));
			if (Main.GameModeInfo.IsJourneyMode)
			{
				percent = MathHelper.Clamp(strengthMultiplier - 1f, 0f, 2f);
				percent /= 2f;
			}
			return (int)Utils.MultiLerp(percent, normalDamage, expertDamage, masterDamage);
		}

		public static void ClearFoundActiveNPCs()
		{
			for (int i = 0; i < npcsFoundForCheckActive.Length; i++)
			{
				npcsFoundForCheckActive[i] = false;
			}
		}

		public static void UpdateFoundActiveNPCs()
		{
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.active && nPC.type >= 0 && nPC.type < 663)
				{
					npcsFoundForCheckActive[nPC.type] = true;
				}
			}
			UpdateRGBPeriheralProbe();
		}

		public static void ClearFoundNPCTypesForBestiary()
		{
			for (int i = 0; i < npcsFoundForCheckActive.Length; i++)
			{
				npcsFoundForCheckActive[i] = false;
			}
		}

		public static void UpdateRGBPeriheralProbe()
		{
			int highestTierBossOrEvent = 0;
			bool zoneOverworldHeight = Main.LocalPlayer.ZoneOverworldHeight;
			if (npcsFoundForCheckActive[4])
			{
				highestTierBossOrEvent = 4;
			}
			if (npcsFoundForCheckActive[50])
			{
				highestTierBossOrEvent = 50;
			}
			if (zoneOverworldHeight && Main.invasionType == 1)
			{
				highestTierBossOrEvent = -1;
			}
			if (npcsFoundForCheckActive[13])
			{
				highestTierBossOrEvent = 13;
			}
			if (npcsFoundForCheckActive[266])
			{
				highestTierBossOrEvent = 266;
			}
			if (npcsFoundForCheckActive[222])
			{
				highestTierBossOrEvent = 222;
			}
			if (npcsFoundForCheckActive[35])
			{
				highestTierBossOrEvent = 35;
			}
			if (npcsFoundForCheckActive[113])
			{
				highestTierBossOrEvent = 113;
			}
			if (zoneOverworldHeight && Main.invasionType == 2)
			{
				highestTierBossOrEvent = -2;
			}
			if (npcsFoundForCheckActive[657])
			{
				highestTierBossOrEvent = 657;
			}
			if (npcsFoundForCheckActive[126] || npcsFoundForCheckActive[125])
			{
				highestTierBossOrEvent = 126;
			}
			if (npcsFoundForCheckActive[134])
			{
				highestTierBossOrEvent = 134;
			}
			if (npcsFoundForCheckActive[127])
			{
				highestTierBossOrEvent = 127;
			}
			if (zoneOverworldHeight && Main.invasionType == 3)
			{
				highestTierBossOrEvent = -3;
			}
			if (npcsFoundForCheckActive[262])
			{
				highestTierBossOrEvent = 262;
			}
			if (npcsFoundForCheckActive[245])
			{
				highestTierBossOrEvent = 245;
			}
			if (npcsFoundForCheckActive[636])
			{
				highestTierBossOrEvent = 636;
			}
			if (DD2Event.Ongoing)
			{
				highestTierBossOrEvent = -6;
			}
			if (zoneOverworldHeight && Main.invasionType == 4)
			{
				highestTierBossOrEvent = -4;
			}
			if (npcsFoundForCheckActive[439])
			{
				highestTierBossOrEvent = 439;
			}
			if (npcsFoundForCheckActive[370])
			{
				highestTierBossOrEvent = 370;
			}
			if (npcsFoundForCheckActive[398])
			{
				highestTierBossOrEvent = 398;
			}
			CommonConditions.Boss.HighestTierBossOrEvent = highestTierBossOrEvent;
		}

		public void SpawnWithHigherTime(int timeMult)
		{
			timeLeft = activeTime * timeMult;
		}

		public void EncourageDespawn(int despawnTime)
		{
			if (timeLeft > despawnTime)
			{
				timeLeft = despawnTime;
			}
			despawnEncouraged = true;
		}

		public void DiscourageDespawn(int despawnTime)
		{
			if (timeLeft < despawnTime)
			{
				timeLeft = despawnTime;
			}
			despawnEncouraged = false;
		}

		public static bool WouldBeEncouragedToDespawn(int aistyle, int type)
		{
			if (aistyle == 4)
			{
				return Main.dayTime;
			}
			return false;
		}

		public static string getNewNPCName(int npcType)
		{
			return getNewNPCNameInner(npcType);
		}

		private static string getNewNPCNameInner(int npcType)
		{
			return npcType switch
			{
				17 => WorldGen.genRand.Next(23) switch
				{
					0 => "Alfred", 
					1 => "Barney", 
					2 => "Calvin", 
					3 => "Edmund", 
					4 => "Edwin", 
					5 => "Eugene", 
					6 => "Frank", 
					7 => "Frederick", 
					8 => "Gilbert", 
					9 => "Gus", 
					10 => "Wilbur", 
					11 => "Seymour", 
					12 => "Louis", 
					13 => "Humphrey", 
					14 => "Harold", 
					15 => "Milton", 
					16 => "Mortimer", 
					17 => "Howard", 
					18 => "Walter", 
					19 => "Isaac", 
					20 => "Joseph", 
					21 => "Kristian", 
					_ => "Ralph", 
				}, 
				18 => WorldGen.genRand.Next(24) switch
				{
					0 => "Molly", 
					1 => "Amy", 
					2 => "Claire", 
					3 => "Emily", 
					4 => "Katie", 
					5 => "Madeline", 
					6 => "Katelyn", 
					7 => "Emma", 
					8 => "Abigail", 
					9 => "Carly", 
					10 => "Jenna", 
					11 => "Heather", 
					12 => "Katherine", 
					13 => "Caitlin", 
					14 => "Kaitlin", 
					15 => "Holly", 
					16 => "Kaitlyn", 
					17 => "Hannah", 
					18 => "Kathryn", 
					19 => "Lorraine", 
					20 => "Helen", 
					21 => "Kayla", 
					22 => "Lisa", 
					_ => "Allison", 
				}, 
				19 => WorldGen.genRand.Next(24) switch
				{
					0 => "DeShawn", 
					1 => "DeAndre", 
					2 => "Marquis", 
					3 => "Darnell", 
					4 => "Terrell", 
					5 => "Malik", 
					6 => "Trevon", 
					7 => "Tyrone", 
					8 => "Willie", 
					9 => "Dominique", 
					10 => "Demetrius", 
					11 => "Reginald", 
					12 => "Jamal", 
					13 => "Maurice", 
					14 => "Jalen", 
					15 => "Darius", 
					16 => "Xavier", 
					17 => "Terrance", 
					18 => "Andre", 
					19 => "Dante", 
					20 => "Brimst", 
					21 => "Bronson", 
					22 => "Tony", 
					_ => "Darryl", 
				}, 
				20 => WorldGen.genRand.Next(22) switch
				{
					0 => "Alalia", 
					1 => "Alalia", 
					2 => "Alura", 
					3 => "Ariella", 
					4 => "Caelia", 
					5 => "Calista", 
					6 => "Chryseis", 
					7 => "Emerenta", 
					8 => "Elysia", 
					9 => "Evvie", 
					10 => "Faye", 
					11 => "Felicitae", 
					12 => "Lunette", 
					13 => "Nata", 
					14 => "Nissa", 
					15 => "Tatiana", 
					16 => "Rosalva", 
					17 => "Shea", 
					18 => "Tania", 
					19 => "Isis", 
					20 => "Celestia", 
					_ => "Xylia", 
				}, 
				22 => WorldGen.genRand.Next(35) switch
				{
					0 => "Joe", 
					1 => "Connor", 
					2 => "Tanner", 
					3 => "Wyatt", 
					4 => "Cody", 
					5 => "Levi", 
					6 => "Luke", 
					7 => "Jack", 
					8 => "Scott", 
					9 => "Logan", 
					10 => "Cole", 
					11 => "Asher", 
					12 => "Bradley", 
					13 => "Jacob", 
					14 => "Garrett", 
					15 => "Dylan", 
					16 => "Maxwell", 
					17 => "Steve", 
					18 => "Brett", 
					19 => "Andrew", 
					20 => "Harley", 
					21 => "Kyle", 
					22 => "Jake", 
					23 => "Ryan", 
					24 => "Jeffrey", 
					25 => "Seth", 
					26 => "Marty", 
					27 => "Brandon", 
					28 => "Zach", 
					29 => "Jeff", 
					30 => "Daniel", 
					31 => "Trent", 
					32 => "Kevin", 
					33 => "Brian", 
					_ => "Colin", 
				}, 
				38 => WorldGen.genRand.Next(22) switch
				{
					0 => "Dolbere", 
					1 => "Bazdin", 
					2 => "Durim", 
					3 => "Tordak", 
					4 => "Garval", 
					5 => "Morthal", 
					6 => "Oten", 
					7 => "Dolgen", 
					8 => "Gimli", 
					9 => "Gimut", 
					10 => "Duerthen", 
					11 => "Beldin", 
					12 => "Jarut", 
					13 => "Ovbere", 
					14 => "Norkas", 
					15 => "Dolgrim", 
					16 => "Boften", 
					17 => "Norsun", 
					18 => "Dias", 
					19 => "Fikod", 
					20 => "Urist", 
					_ => "Darur", 
				}, 
				54 => WorldGen.genRand.Next(27) switch
				{
					0 => "Sebastian", 
					1 => "Rupert", 
					2 => "Clive", 
					3 => "Nigel", 
					4 => "Mervyn", 
					5 => "Cedric", 
					6 => "Pip", 
					7 => "Cyril", 
					8 => "Fitz", 
					9 => "Lloyd", 
					10 => "Arthur", 
					11 => "Rodney", 
					12 => "Graham", 
					13 => "Edward", 
					14 => "Alfred", 
					15 => "Edmund", 
					16 => "Henry", 
					17 => "Herald", 
					18 => "Roland", 
					19 => "Lincoln", 
					20 => "Lloyd", 
					21 => "Edgar", 
					22 => "Eustace", 
					23 => "Benjamin", 
					24 => "James", 
					_ => "Rodrick", 
				}, 
				107 => WorldGen.genRand.Next(25) switch
				{
					0 => "Grodax", 
					1 => "Sarx", 
					2 => "Xon", 
					3 => "Mrunok", 
					4 => "Nuxatk", 
					5 => "Tgerd", 
					6 => "Darz", 
					7 => "Smador", 
					8 => "Stazen", 
					9 => "Mobart", 
					10 => "Knogs", 
					11 => "Tkanus", 
					12 => "Negurk", 
					13 => "Nort", 
					14 => "Durnok", 
					15 => "Trogem", 
					16 => "Stezom", 
					17 => "Gnudar", 
					18 => "Ragz", 
					19 => "Fahd", 
					20 => "Xanos", 
					21 => "Arback", 
					22 => "Fjell", 
					23 => "Dalek", 
					_ => "Knub", 
				}, 
				108 => WorldGen.genRand.Next(22) switch
				{
					0 => "Dalamar", 
					1 => "Dulais", 
					2 => "Elric", 
					3 => "Arddun", 
					4 => "Maelor", 
					5 => "Leomund", 
					6 => "Hirael", 
					7 => "Gwentor", 
					8 => "Greum", 
					9 => "Gearroid", 
					10 => "Fizban", 
					11 => "Ningauble", 
					12 => "Seonag", 
					13 => "Sargon", 
					14 => "Merlyn", 
					15 => "Magius", 
					16 => "Berwyn", 
					17 => "Arwyn", 
					18 => "Alasdair", 
					19 => "Tagar", 
					20 => "Abram", 
					_ => "Xanadu", 
				}, 
				124 => WorldGen.genRand.Next(24) switch
				{
					0 => "Shayna", 
					1 => "Korrie", 
					2 => "Ginger", 
					3 => "Brooke", 
					4 => "Jenny", 
					5 => "Autumn", 
					6 => "Nancy", 
					7 => "Ella", 
					8 => "Kayla", 
					9 => "Selah", 
					10 => "Sophia", 
					11 => "Marshanna", 
					12 => "Lauren", 
					13 => "Trisha", 
					14 => "Shirlena", 
					15 => "Sheena", 
					16 => "Ellen", 
					17 => "Amy", 
					18 => "Dawn", 
					19 => "Susana", 
					20 => "Meredith", 
					21 => "Selene", 
					22 => "Terra", 
					_ => "Sally", 
				}, 
				160 => WorldGen.genRand.Next(12) switch
				{
					0 => "Reishi", 
					1 => "Maitake", 
					2 => "Chanterelle", 
					3 => "Porcini", 
					4 => "Shimeji", 
					5 => "Amanita", 
					6 => "Muscaria", 
					7 => "Agaric", 
					8 => "Cremini", 
					9 => "Morel", 
					10 => "Enoki", 
					_ => "Shiitake", 
				}, 
				178 => WorldGen.genRand.Next(20) switch
				{
					0 => "Whitney", 
					1 => "Verity", 
					2 => "Ada", 
					3 => "Cornelia", 
					4 => "Lydia", 
					5 => "Leila", 
					6 => "Minerva", 
					7 => "Emeline", 
					8 => "Cynthia", 
					9 => "Fidelia", 
					10 => "Lilly", 
					11 => "Phoebe", 
					12 => "Zylphia", 
					13 => "Zelda", 
					14 => "Selina", 
					15 => "Hope", 
					16 => "Isabella", 
					17 => "Judith", 
					18 => "Savannah", 
					_ => "Vivian", 
				}, 
				207 => WorldGen.genRand.Next(16) switch
				{
					0 => "Abdosir", 
					1 => "Akbar", 
					2 => "Bodashtart", 
					3 => "Danel", 
					4 => "Hanno", 
					5 => "Hiram", 
					6 => "Kanmi", 
					7 => "Philosir", 
					8 => "Tabnit", 
					9 => "Yutpan", 
					10 => "Ahirom", 
					11 => "Batnoam", 
					12 => "Sikarbaal", 
					13 => "Hannibal", 
					14 => "Yehomilk", 
					_ => "Ahinadab", 
				}, 
				208 => WorldGen.genRand.Next(17) switch
				{
					0 => "Candy", 
					1 => "Isis", 
					2 => "Trixy", 
					3 => "Destiny", 
					4 => "Lexus", 
					5 => "Bambi", 
					6 => "Bailey", 
					7 => "Glitter", 
					8 => "Sparkle", 
					9 => "Paris", 
					10 => "Dazzle", 
					11 => "Fantasy", 
					12 => "Bunny", 
					13 => "Sugar", 
					14 => "Fantasia", 
					15 => "Star", 
					_ => "Cherry", 
				}, 
				209 => WorldGen.genRand.Next(23) switch
				{
					0 => "Alpha", 
					1 => "Beta", 
					2 => "Delta", 
					3 => "Omega", 
					4 => "Gamma", 
					5 => "Theta", 
					6 => "Kappa", 
					7 => "Omicron", 
					8 => "Sigma", 
					9 => "Upsilon", 
					10 => "Phi", 
					11 => "Zeta", 
					12 => "Lambda", 
					13 => "Nu", 
					14 => "Ci", 
					15 => "Rho", 
					16 => "Phi", 
					17 => "Fender", 
					18 => "T-3E0", 
					19 => "Niner-7", 
					20 => "A.N.D.Y", 
					21 => "Syn-X", 
					_ => "Mu", 
				}, 
				227 => WorldGen.genRand.Next(18) switch
				{
					0 => "Marco", 
					1 => "Guido", 
					2 => "Enzo", 
					3 => "Martino", 
					4 => "Mauro", 
					5 => "Lorenzo", 
					6 => "Ludo", 
					7 => "Luciano", 
					8 => "Carlo", 
					9 => "Bruno", 
					10 => "Mario", 
					11 => "Leonardo", 
					12 => "Raphael", 
					13 => "Luigi", 
					14 => "Luca", 
					15 => "Darren", 
					16 => "Esreadel", 
					_ => "Stefano", 
				}, 
				228 => WorldGen.genRand.Next(10) switch
				{
					0 => "Abibe", 
					1 => "Jamundi", 
					2 => "U'wa", 
					3 => "Tairona", 
					4 => "Xirigua", 
					5 => "Zop'a", 
					6 => "Opuni", 
					7 => "Kogi-ghi", 
					8 => "Konah", 
					_ => "Gboto", 
				}, 
				229 => WorldGen.genRand.Next(11) switch
				{
					0 => "David", 
					1 => "Red Beard", 
					2 => "Jack", 
					3 => "Black Beard", 
					4 => "Captain Morgan", 
					5 => "Wet Beard", 
					6 => "James T. Beard", 
					7 => "Gunpowder Garry", 
					8 => "Captain Stoney Dirt", 
					9 => "Jake", 
					_ => "Captain Bullywort", 
				}, 
				353 => WorldGen.genRand.Next(20) switch
				{
					0 => "Bri", 
					1 => "Brianne", 
					2 => "Flora", 
					3 => "Iris", 
					4 => "Scarlett", 
					5 => "Lola", 
					6 => "Hazel", 
					7 => "Stella", 
					8 => "Pearl", 
					9 => "Tallulah", 
					10 => "Ruby", 
					11 => "Esmeralda", 
					12 => "Kylie", 
					13 => "Kati", 
					14 => "Biah", 
					15 => "Meliyah", 
					16 => "Petra", 
					17 => "Rox", 
					18 => "Roxanne", 
					_ => "Annabel", 
				}, 
				368 => WorldGen.genRand.Next(13) switch
				{
					0 => "Abraham", 
					1 => "Bohemas", 
					2 => "Eladon", 
					3 => "Aphraim", 
					4 => "Gallius", 
					5 => "Llewellyn", 
					6 => "Riley", 
					7 => "Rawleigh", 
					8 => "Shipton", 
					9 => "Romeo", 
					10 => "Aedan", 
					11 => "Mercer", 
					_ => "Willy", 
				}, 
				369 => WorldGen.genRand.Next(21) switch
				{
					0 => "Bobby", 
					1 => "Sammy", 
					2 => "Jimmy", 
					3 => "Danny", 
					4 => "Timmy", 
					5 => "Simon", 
					6 => "Johnny", 
					7 => "Billy", 
					8 => "Matty", 
					9 => "Bart", 
					10 => "Phillip", 
					11 => "Spencer", 
					12 => "Nathan", 
					13 => "Grayson", 
					14 => "Miles", 
					15 => "Charles", 
					16 => "Adam", 
					17 => "Tyler", 
					18 => "Jey", 
					19 => "Ivan", 
					_ => "Izzy", 
				}, 
				453 => WorldGen.genRand.Next(10) switch
				{
					0 => "Skellington", 
					1 => "Bones McGee", 
					2 => "Gloomy Mays", 
					3 => "Jack Sellington", 
					4 => "Billy Marrows", 
					5 => "Tom", 
					6 => "Rattles Magoo", 
					7 => "Mandible Calavera", 
					8 => "Mika", 
					_ => "No-Eyed Wiley", 
				}, 
				441 => WorldGen.genRand.Next(20) switch
				{
					0 => "McKinly", 
					1 => "Millard", 
					2 => "Fillmore", 
					3 => "Rutherford", 
					4 => "Chester", 
					5 => "Grover", 
					6 => "Cleveland", 
					7 => "Theodore", 
					8 => "Herbert", 
					9 => "Warren", 
					10 => "Lyndon", 
					11 => "Ronald", 
					12 => "Harrison", 
					13 => "Woodrow", 
					14 => "Tweed", 
					15 => "Blanton", 
					16 => "Dwyer", 
					17 => "Carroll", 
					_ => "Agnew", 
				}, 
				550 => Language.RandomFromCategory("BartenderNames", WorldGen.genRand).Value, 
				588 => Language.RandomFromCategory("GolferNames", WorldGen.genRand).Value, 
				633 => Language.RandomFromCategory("BestiaryGirlNames", WorldGen.genRand).Value, 
				637 => Language.RandomFromCategory("CatNames_Siamese", WorldGen.genRand).Value, 
				638 => Language.RandomFromCategory("DogNames_Labrador", WorldGen.genRand).Value, 
				656 => Language.RandomFromCategory("BunnyNames_White", WorldGen.genRand).Value, 
				_ => "", 
			};
		}

		public NetworkText GetTypeNetName()
		{
			return NetworkText.FromKey(Lang.GetNPCName(netID).Key);
		}

		public void GetLifeStats(out int statLife, out int statLifeMax)
		{
			statLife = life;
			statLifeMax = lifeMax;
			if (realLife != -1)
			{
				statLife = Main.npc[realLife].life;
				statLifeMax = Main.npc[realLife].lifeMax;
			}
		}

		public float GetLifePercent()
		{
			GetLifeStats(out var statLife, out var statLifeMax);
			return (float)statLife / (float)statLifeMax;
		}

		public NetworkText GetFullNetName()
		{
			if (!HasGivenName)
			{
				return GetTypeNetName();
			}
			return NetworkText.FromKey("Game.NPCTitle", GetGivenNetName(), GetTypeNetName());
		}

		public NetworkText GetGivenOrTypeNetName()
		{
			if (!HasGivenName)
			{
				return GetTypeNetName();
			}
			return GetGivenNetName();
		}

		public NetworkText GetGivenNetName()
		{
			return NetworkText.FromLiteral(_givenName);
		}

		public static void setNPCName(string newName, int npcType, bool resetExtras = false)
		{
			bool flag = false;
			for (int i = 0; i < 200; i++)
			{
				if (!Main.npc[i].active || Main.npc[i].type != npcType)
				{
					continue;
				}
				if (flag)
				{
					Main.npc[i].GivenName = getNewNPCName(npcType);
					Main.npc[i].needsUniqueInfoUpdate = true;
					continue;
				}
				Main.npc[i].GivenName = newName;
				if (!resetExtras)
				{
					break;
				}
				flag = true;
			}
		}

		public static string firstNPCName(int npcType)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == npcType)
				{
					return Main.npc[i].GivenOrTypeName;
				}
			}
			return getNewNPCName(npcType);
		}

		public static string GetFirstNPCNameOrNull(int npcType)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == npcType)
				{
					return Main.npc[i].GivenOrTypeName;
				}
			}
			return null;
		}

		public static bool MechSpawn(float x, float y, int type)
		{
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (!Main.npc[i].active)
				{
					continue;
				}
				bool flag = false;
				if (Main.npc[i].type == type)
				{
					flag = true;
				}
				else if (type == 46 || type == 540 || type == 303 || type == 337)
				{
					if (Main.npc[i].type == 46 || Main.npc[i].type == 540 || Main.npc[i].type == 303 || Main.npc[i].type == 337)
					{
						flag = true;
					}
				}
				else if (type == 362 || type == 364)
				{
					if (Main.npc[i].type == 362 || Main.npc[i].type == 363 || Main.npc[i].type == 364 || Main.npc[i].type == 365)
					{
						flag = true;
					}
				}
				else if (type == 602)
				{
					if (Main.npc[i].type == 602 || Main.npc[i].type == 603)
					{
						flag = true;
					}
				}
				else if (type == 608)
				{
					if (Main.npc[i].type == 608 || Main.npc[i].type == 609)
					{
						flag = true;
					}
				}
				else if (type == 616 || type == 617)
				{
					if (Main.npc[i].type == 616 || Main.npc[i].type == 617)
					{
						flag = true;
					}
				}
				else if (type == 55 && Main.npc[i].type == 230)
				{
					flag = true;
				}
				else if (NPCID.Sets.IsDragonfly[type] && NPCID.Sets.IsDragonfly[Main.npc[i].type])
				{
					flag = true;
				}
				if (flag)
				{
					num++;
					Vector2 vector = new Vector2(x, y);
					float num4 = Main.npc[i].position.X - vector.X;
					float num5 = Main.npc[i].position.Y - vector.Y;
					float num6 = (float)Math.Sqrt(num4 * num4 + num5 * num5);
					if (num6 < 200f)
					{
						num2++;
					}
					if (num6 < 600f)
					{
						num3++;
					}
				}
			}
			if (num2 >= 3 || num3 >= 6 || num >= 10)
			{
				return false;
			}
			return true;
		}

		public static int TypeToDefaultHeadIndex(int type)
		{
			return type switch
			{
				0 => 0, 
				17 => 2, 
				18 => 3, 
				19 => 6, 
				20 => 5, 
				22 => 1, 
				38 => 4, 
				54 => 7, 
				107 => 9, 
				108 => 10, 
				124 => 8, 
				142 => 11, 
				160 => 12, 
				178 => 13, 
				207 => 14, 
				208 => 15, 
				209 => 16, 
				227 => 17, 
				228 => 18, 
				229 => 19, 
				353 => 20, 
				368 => 21, 
				369 => 22, 
				441 => 23, 
				550 => 24, 
				588 => 25, 
				633 => 26, 
				637 => 27, 
				638 => 33, 
				656 => 39, 
				_ => -1, 
			};
		}

		public static int DefaultHeadIndexToType(int headIndex)
		{
			return headIndex switch
			{
				2 => 17, 
				3 => 18, 
				6 => 19, 
				5 => 20, 
				1 => 22, 
				4 => 38, 
				7 => 54, 
				9 => 107, 
				10 => 108, 
				8 => 124, 
				11 => 142, 
				12 => 160, 
				13 => 178, 
				14 => 207, 
				15 => 208, 
				16 => 209, 
				17 => 227, 
				18 => 228, 
				19 => 229, 
				20 => 353, 
				21 => 368, 
				22 => 369, 
				23 => 441, 
				24 => 550, 
				25 => 588, 
				26 => 633, 
				27 => 637, 
				33 => 638, 
				39 => 656, 
				_ => -1, 
			};
		}

		public int GetBossHeadTextureIndex()
		{
			int result = NPCID.Sets.BossHeadTextures[type];
			switch (type)
			{
			case 4:
				if (ai[0] >= 2f)
				{
					result = 1;
				}
				break;
			case 262:
				if (life <= lifeMax / 2)
				{
					result = 12;
				}
				break;
			case 125:
				if (ai[0] >= 3f)
				{
					result = 16;
				}
				break;
			case 126:
				if (ai[0] >= 3f)
				{
					result = 21;
				}
				break;
			case 439:
				if (ai[0] == 5f && alpha == 255)
				{
					result = -1;
				}
				break;
			case 440:
				if (ai[0] != 5f || alpha == 255)
				{
					result = -1;
				}
				break;
			}
			return result;
		}

		public float GetBossHeadRotation()
		{
			float result = 0f;
			switch (type)
			{
			case 68:
			case 262:
				result = rotation;
				break;
			case 35:
			case 127:
				if (ai[1] == 1f || ai[1] == 2f)
				{
					result = rotation;
				}
				break;
			case 345:
				if (ai[0] == 2f)
				{
					result = rotation;
				}
				break;
			}
			return result;
		}

		public SpriteEffects GetBossHeadSpriteEffects()
		{
			SpriteEffects result = SpriteEffects.None;
			int num = type;
			if (num == 491 && spriteDirection == 1)
			{
				result = SpriteEffects.FlipHorizontally;
			}
			return result;
		}

		public int BannerID()
		{
			if (netID >= -10)
			{
				return netID;
			}
			return type;
		}

		private void SetDefaultsFromNetId(int id, NPCSpawnParams spawnparams = default(NPCSpawnParams))
		{
			bool flag = false;
			int num = NPCID.FromNetId(id);
			SetDefaults(0);
			switch (id)
			{
			case -1:
				SetDefaults_ForNetId(num, 0.6f);
				flag = true;
				damage = 45;
				defense = 10;
				life = 90;
				knockBackResist *= 1.2f;
				value = 100f;
				break;
			case -2:
				SetDefaults_ForNetId(num, 0.9f);
				flag = true;
				damage = 45;
				defense = 20;
				life = 90;
				knockBackResist *= 1.2f;
				value = 100f;
				break;
			case -3:
				SetDefaults_ForNetId(num, 0.9f);
				flag = true;
				damage = 6;
				defense = 0;
				life = 14;
				knockBackResist *= 1.2f;
				color = new Color(0, 220, 40, 100);
				value = 3f;
				break;
			case -4:
				SetDefaults_ForNetId(num, 0.6f);
				flag = true;
				damage = 5;
				defense = 5;
				life = 150;
				knockBackResist *= 1.4f;
				color = new Color(250, 30, 90, 90);
				value = 10000f;
				rarity = 2;
				break;
			case -5:
				SetDefaults_ForNetId(num, 0.9f);
				flag = true;
				damage = 13;
				defense = 4;
				life = 30;
				knockBackResist *= 0.95f;
				alpha = 120;
				color = new Color(0, 0, 0, 50);
				value = 10f;
				break;
			case -6:
				SetDefaults_ForNetId(num, 1.05f);
				flag = true;
				damage = 15;
				defense = 4;
				life = 45;
				color = new Color(0, 0, 0, 50);
				value = 20f;
				break;
			case -7:
				SetDefaults_ForNetId(num, 1.2f);
				flag = true;
				damage = 12;
				defense = 6;
				life = 40;
				knockBackResist *= 0.9f;
				color = new Color(200, 0, 255, 150);
				value = 10f;
				break;
			case -8:
				SetDefaults_ForNetId(num, 1.025f);
				flag = true;
				damage = 12;
				defense = 4;
				life = 35;
				color = new Color(255, 30, 0, 100);
				value = 8f;
				break;
			case -9:
				SetDefaults_ForNetId(num, 1.2f);
				flag = true;
				damage = 15;
				defense = 7;
				life = 45;
				color = new Color(255, 255, 0, 100);
				value = 10f;
				break;
			case -10:
				SetDefaults_ForNetId(num, 1.1f);
				flag = true;
				damage = 18;
				defense = 6;
				life = 60;
				color = new Color(143, 215, 93, 100);
				value = 500f;
				break;
			case -11:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -12:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -13:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				break;
			case -14:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((double)((float)damage * scale) * 1.1);
				life = (int)((double)((float)life * scale) * 1.1);
				value = (int)(value * scale);
				npcSlots = 2f;
				knockBackResist *= 2f - scale;
				break;
			case -15:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((double)((float)damage * scale) * 1.1);
				life = 400;
				value = (int)(value * scale);
				npcSlots = 2f;
				knockBackResist *= 2f - scale;
				height = 44;
				break;
			case -16:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -17:
				SetDefaults_ForNetId(num, spawnparams, 1.2f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -18:
				SetDefaults_ForNetId(num, spawnparams, 0.8f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -19:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -20:
				SetDefaults_ForNetId(num, 1.1f);
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -21:
				SetDefaults_ForNetId(num, spawnparams, 1.2f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -22:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -23:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -24:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -25:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -26:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -27:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -28:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -29:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -30:
				SetDefaults_ForNetId(num, spawnparams, 0.93f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -31:
				SetDefaults_ForNetId(num, spawnparams, 1.13f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -32:
				SetDefaults_ForNetId(num, spawnparams, 0.89f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -33:
				SetDefaults_ForNetId(num, spawnparams, 1.11f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -34:
				SetDefaults_ForNetId(num, spawnparams, 0.87f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -35:
				SetDefaults_ForNetId(num, spawnparams, 1.13f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -36:
				SetDefaults_ForNetId(num, spawnparams, 0.92f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -37:
				SetDefaults_ForNetId(num, spawnparams, 1.08f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -38:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -39:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -40:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -41:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -42:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -43:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -44:
				SetDefaults_ForNetId(num, spawnparams, 0.87f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -45:
				SetDefaults_ForNetId(num, spawnparams, 1.05f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -46:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -47:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -48:
				SetDefaults_ForNetId(num, spawnparams, 0.93f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -49:
				SetDefaults_ForNetId(num, spawnparams, 1.07f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -50:
				SetDefaults_ForNetId(num, spawnparams, 0.87f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -51:
				SetDefaults_ForNetId(num, spawnparams, 1.13f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -52:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -53:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -54:
				SetDefaults_ForNetId(num, spawnparams, 0.9f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -55:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -56:
				SetDefaults_ForNetId(num, spawnparams, 0.85f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -57:
				SetDefaults_ForNetId(num, spawnparams, 1.25f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -58:
				SetDefaults_ForNetId(num, spawnparams, 0.8f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -59:
				SetDefaults_ForNetId(num, spawnparams, 1.15f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -60:
				SetDefaults_ForNetId(num, spawnparams, 0.92f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -61:
				SetDefaults_ForNetId(num, spawnparams, 1.1f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -62:
				SetDefaults_ForNetId(num, spawnparams, 0.78f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -63:
				SetDefaults_ForNetId(num, spawnparams, 1.16f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -64:
				SetDefaults_ForNetId(num, spawnparams, 0.87f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			case -65:
				SetDefaults_ForNetId(num, spawnparams, 1.21f);
				flag = false;
				defense = (int)((float)defense * scale);
				damage = (int)((float)damage * scale);
				life = (int)((float)life * scale);
				value = (int)(value * scale);
				npcSlots *= scale;
				knockBackResist *= 2f - scale;
				break;
			default:
				return;
			}
			netID = id;
			lifeMax = life;
			defDamage = damage;
			defDefense = defense;
			if (flag)
			{
				ScaleStats(spawnparams.playerCountForMultiplayerDifficultyOverride, spawnparams.gameModeData, spawnparams.strengthMultiplierOverride);
				life = lifeMax;
			}
		}

		public void SetDefaultsKeepPlayerInteraction(int Type)
		{
			bool[] array = new bool[playerInteraction.Length];
			for (int i = 0; i < playerInteraction.Length; i++)
			{
				array[i] = playerInteraction[i];
			}
			SetDefaults(Type);
			for (int j = 0; j < playerInteraction.Length; j++)
			{
				playerInteraction[j] = array[j];
			}
		}

		public void SetDefaults_ForNetId(int Type, float scaleOverride)
		{
			SetDefaults(Type, new NPCSpawnParams
			{
				playerCountForMultiplayerDifficultyOverride = 1,
				sizeScaleOverride = scaleOverride,
				strengthMultiplierOverride = 1f
			});
		}

		public void SetDefaults_ForNetId(int Type, NPCSpawnParams spawnparams, float scaleOverride)
		{
			SetDefaults(Type, spawnparams.WithScale(scaleOverride));
		}

		public void SetDefaults(int Type, NPCSpawnParams spawnparams = default(NPCSpawnParams))
		{
			if (spawnparams.gameModeData == null)
			{
				spawnparams.gameModeData = Main.GameModeInfo;
			}
			if (Main.getGoodWorld && spawnparams.sizeScaleOverride.HasValue)
			{
				spawnparams.sizeScaleOverride = (spawnparams.sizeScaleOverride + spawnparams.sizeScaleOverride * spawnparams.sizeScaleOverride) / 2f;
			}
			if (Type < 0)
			{
				SetDefaultsFromNetId(Type, spawnparams);
				return;
			}
			waterMovementSpeed = (lavaMovementSpeed = 0.5f);
			honeyMovementSpeed = 0.25f;
			netOffset *= 0f;
			altTexture = 0;
			townNpcVariationIndex = 0;
			nameOver = 0f;
			takenDamageMultiplier = 1f;
			extraValue = 0;
			for (int i = 0; i < playerInteraction.Length; i++)
			{
				playerInteraction[i] = false;
			}
			rarity = 0;
			dontCountMe = false;
			releaseOwner = 255;
			catchItem = 0;
			needsUniqueInfoUpdate = true;
			netStream = 32;
			bool flag = false;
			netID = 0;
			netAlways = false;
			netSpam = 0;
			SpawnedFromStatue = false;
			statsAreScaledForThisManyPlayers = 0;
			strengthMultiplier = 1f;
			int num = 10;
			if (Type >= 0)
			{
				num = NPCID.Sets.TrailCacheLength[Type];
			}
			if (num != oldPos.Length)
			{
				Array.Resize(ref oldPos, num);
				Array.Resize(ref oldRot, num);
			}
			for (int j = 0; j < oldPos.Length; j++)
			{
				oldRot[j] = 0f;
				oldPos[j].X = 0f;
				oldPos[j].Y = 0f;
			}
			for (int k = 0; k < 5; k++)
			{
				buffTime[k] = 0;
				buffType[k] = 0;
			}
			for (int l = 0; l < 323; l++)
			{
				buffImmune[l] = false;
			}
			setFrameSize = false;
			buffImmune[31] = true;
			netSkip = -2;
			realLife = -1;
			lifeRegen = 0;
			lifeRegenExpectedLossPerSecond = -1;
			lifeRegenCount = 0;
			markedByScytheWhip = false;
			markedByThornWhip = false;
			markedByFireWhip = false;
			markedByRainbowWhip = false;
			markedByBlandWhip = false;
			markedBySwordWhip = false;
			markedByMaceWhip = false;
			poisoned = false;
			soulDrain = false;
			venom = false;
			shadowFlame = false;
			onFire = false;
			midas = false;
			ichor = false;
			onFrostBurn = false;
			confused = false;
			loveStruck = false;
			dontTakeDamageFromHostiles = false;
			stinky = false;
			dryadWard = false;
			onFire2 = false;
			justHit = false;
			dontTakeDamage = false;
			npcSlots = 1f;
			lavaImmune = false;
			lavaWet = false;
			wetCount = 0;
			wet = false;
			townNPC = false;
			homeless = false;
			homeTileX = -1;
			homeTileY = -1;
			housingCategory = 0;
			friendly = false;
			behindTiles = false;
			boss = false;
			noTileCollide = false;
			rotation = 0f;
			active = true;
			alpha = 0;
			color = default(Color);
			collideX = false;
			collideY = false;
			direction = 0;
			oldDirection = direction;
			frameCounter = 0.0;
			netUpdate = true;
			netUpdate2 = false;
			knockBackResist = 1f;
			GivenName = "";
			noGravity = false;
			scale = 1f;
			HitSound = null;
			DeathSound = null;
			spriteDirection = -1;
			target = 255;
			oldTarget = target;
			targetRect = default(Rectangle);
			timeLeft = activeTime;
			type = Type;
			value = 0f;
			coldDamage = false;
			trapImmune = false;
			hide = false;
			immortal = false;
			chaseable = true;
			breath = 200;
			breathCounter = 0;
			reflectsProjectiles = false;
			canGhostHeal = true;
			javelined = false;
			daybreak = false;
			celled = false;
			dryadBane = false;
			betsysCurse = false;
			oiled = false;
			despawnEncouraged = false;
			for (int m = 0; m < maxAI; m++)
			{
				ai[m] = 0f;
			}
			for (int n = 0; n < maxAI; n++)
			{
				localAI[n] = 0f;
			}
			if (type == 1)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 7;
				defense = 2;
				lifeMax = 25;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 175;
				color = new Color(0, 80, 255, 100);
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 2)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 18;
				defense = 2;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 3)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
				buffImmune[31] = false;
			}
			else if (type == 430)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
				buffImmune[31] = false;
			}
			else if (type == 431)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 80f;
				buffImmune[31] = false;
			}
			else if (type == 432)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 65f;
				buffImmune[31] = false;
			}
			else if (type == 433)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 6;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 55f;
				buffImmune[31] = false;
			}
			else if (type == 434)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 8;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 80f;
				buffImmune[31] = false;
			}
			else if (type == 435)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 4;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 70f;
				buffImmune[31] = false;
			}
			else if (type == 436)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 12;
				defense = 4;
				lifeMax = 38;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 65f;
				buffImmune[31] = false;
			}
			else if (type == 4)
			{
				width = 100;
				height = 110;
				aiStyle = 4;
				damage = 15;
				defense = 12;
				lifeMax = 2800;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				SpawnWithHigherTime(30);
				boss = true;
				value = 30000f;
				npcSlots = 5f;
			}
			else if (type == 5)
			{
				width = 20;
				height = 20;
				aiStyle = 5;
				damage = 12;
				defense = 0;
				lifeMax = 8;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
			}
			else if (type == 6)
			{
				npcSlots = 1f;
				width = 30;
				height = 30;
				aiStyle = 5;
				damage = 22;
				defense = 8;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0.5f;
				value = 90f;
			}
			else if (type == 7)
			{
				npcSlots = 3.5f;
				width = 22;
				height = 22;
				aiStyle = 6;
				damage = 31;
				defense = 2;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
				netAlways = true;
			}
			else if (type == 8)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 16;
				defense = 6;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
				dontCountMe = true;
			}
			else if (type == 9)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 13;
				defense = 10;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 140f;
				dontCountMe = true;
			}
			else if (type == 10)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 8;
				defense = 0;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 40f;
			}
			else if (type == 11)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 4;
				defense = 4;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 40f;
				dontCountMe = true;
			}
			else if (type == 12)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 4;
				defense = 6;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 40f;
				dontCountMe = true;
			}
			else if (type == 13)
			{
				npcSlots = 5f;
				width = 38;
				height = 38;
				aiStyle = 6;
				netAlways = true;
				damage = 22;
				defense = 2;
				lifeMax = 150;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 800f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				alpha = 255;
			}
			else if (type == 14)
			{
				width = 38;
				height = 38;
				aiStyle = 6;
				netAlways = true;
				damage = 13;
				defense = 4;
				lifeMax = 150;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 800f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
				alpha = 255;
			}
			else if (type == 15)
			{
				width = 38;
				height = 38;
				aiStyle = 6;
				netAlways = true;
				damage = 11;
				defense = 8;
				lifeMax = 150;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 800f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
				alpha = 255;
			}
			else if (type == 16)
			{
				npcSlots = 2f;
				width = 36;
				height = 24;
				aiStyle = 1;
				damage = 20;
				defense = 7;
				lifeMax = 90;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 120;
				color = new Color(0, 0, 0, 50);
				value = 75f;
				scale = 1.25f;
				knockBackResist = 0.6f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 17)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 18)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 19)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 20)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 21)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 100f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 22)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 23)
			{
				width = 22;
				height = 22;
				aiStyle = 5;
				damage = 40;
				defense = 6;
				lifeMax = 26;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				value = 80f;
				knockBackResist = 0.4f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 24)
			{
				npcSlots = 3f;
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 30;
				defense = 16;
				lifeMax = 70;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				lavaImmune = true;
				value = 350f;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 25)
			{
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 30;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				alpha = 100;
			}
			else if (type == 31)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 26;
				defense = 8;
				lifeMax = 80;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.8f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 32)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 20;
				defense = 2;
				lifeMax = 50;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 140f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 33)
			{
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 20;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				alpha = 255;
				knockBackResist = 0f;
			}
			else if (type == 34)
			{
				width = 26;
				height = 28;
				aiStyle = 10;
				damage = 35;
				defense = 6;
				lifeMax = 40;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				noGravity = true;
				noTileCollide = true;
				value = 150f;
				knockBackResist = 0.2f;
				npcSlots = 0.75f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 35)
			{
				width = 80;
				height = 102;
				aiStyle = 11;
				damage = 32;
				defense = 10;
				lifeMax = 4400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				noGravity = true;
				noTileCollide = true;
				value = 50000f;
				knockBackResist = 0f;
				boss = true;
				npcSlots = 6f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				bool[] array = buffImmune;
				bool flag2;
				buffImmune[169] = (flag2 = (buffImmune[183] = true));
				array[189] = flag2;
			}
			else if (type == 36)
			{
				width = 52;
				height = 52;
				aiStyle = 12;
				damage = 20;
				defense = 14;
				lifeMax = 600;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 37)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 38)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 39)
			{
				npcSlots = 6f;
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 30;
				defense = 10;
				lifeMax = 250;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath5;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 1200f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 40)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 15;
				defense = 12;
				lifeMax = 250;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath5;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 1200f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 41)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 10;
				defense = 18;
				lifeMax = 250;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath5;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 1200f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 42)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 26;
				defense = 12;
				lifeMax = 48;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.5f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 43)
			{
				noGravity = true;
				noTileCollide = true;
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 34;
				defense = 10;
				lifeMax = 110;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath1;
				value = 350f;
				buffImmune[20] = true;
			}
			else if (type == 44)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 9;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 250f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 1;
			}
			else if (type == 45)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 20;
				defense = 4;
				lifeMax = 200;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 5000f;
				buffImmune[20] = true;
				rarity = 4;
			}
			else if (type == 46 || type == 303 || type == 337 || type == 540)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2019;
			}
			else if (type == 47)
			{
				width = 18;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 4;
				lifeMax = 70;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 48)
			{
				width = 24;
				height = 34;
				aiStyle = 14;
				damage = 25;
				defense = 8;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath1;
				value = 300f;
			}
			else if (type == 49)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 18;
				aiStyle = 14;
				damage = 13;
				defense = 2;
				lifeMax = 16;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath4;
				value = 90f;
				buffImmune[31] = false;
			}
			else if (type == 50)
			{
				boss = true;
				width = 98;
				height = 92;
				aiStyle = 15;
				damage = 40;
				defense = 10;
				lifeMax = 2000;
				knockBackResist = 0f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 30;
				value = 10000f;
				scale = 1.25f;
				buffImmune[20] = true;
				SpawnWithHigherTime(30);
			}
			else if (type == 51)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 18;
				aiStyle = 14;
				damage = 20;
				defense = 4;
				lifeMax = 34;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath4;
				value = 80f;
				buffImmune[31] = false;
			}
			else if (type == 52)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 1000f;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 53)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 8;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 1000f;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 54)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 55)
			{
				noGravity = true;
				width = 20;
				height = 18;
				aiStyle = 16;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				catchItem = 261;
			}
			else if (type == 56)
			{
				noTileCollide = true;
				noGravity = true;
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 25;
				defense = 10;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath1;
				value = 90f;
				buffImmune[20] = true;
			}
			else if (type == 57)
			{
				noGravity = true;
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 30;
				defense = 6;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 58)
			{
				npcSlots = 0.5f;
				noGravity = true;
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 25;
				defense = 2;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 50f;
			}
			else if (type == 59)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 15;
				defense = 10;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				scale = 1.1f;
				alpha = 50;
				lavaImmune = true;
				value = 120f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 60)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 18;
				aiStyle = 14;
				damage = 35;
				defense = 8;
				lifeMax = 46;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath4;
				value = 120f;
				scale = 1.1f;
				lavaImmune = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 61)
			{
				width = 36;
				height = 36;
				aiStyle = 17;
				damage = 15;
				defense = 4;
				lifeMax = 40;
				knockBackResist = 0.8f;
				HitSound = SoundID.NPCHit28;
				DeathSound = SoundID.NPCDeath31;
				value = 60f;
			}
			else if (type == 62)
			{
				npcSlots = 2f;
				width = 28;
				height = 48;
				aiStyle = 14;
				damage = 32;
				defense = 8;
				lifeMax = 120;
				HitSound = SoundID.NPCHit21;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath24;
				value = 300f;
				lavaImmune = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 63)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 25;
				defense = 4;
				lifeMax = 34;
				HitSound = SoundID.NPCHit25;
				DeathSound = SoundID.NPCDeath28;
				value = 100f;
				alpha = 20;
			}
			else if (type == 64)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 30;
				defense = 6;
				lifeMax = 70;
				HitSound = SoundID.NPCHit25;
				DeathSound = SoundID.NPCDeath28;
				value = 100f;
				alpha = 20;
			}
			else if (type == 65)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 16;
				damage = 40;
				defense = 2;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 400f;
				knockBackResist = 0.7f;
			}
			else if (type == 66)
			{
				npcSlots = 2f;
				width = 28;
				height = 48;
				aiStyle = 14;
				damage = 32;
				defense = 8;
				lifeMax = 140;
				HitSound = SoundID.NPCHit21;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath24;
				value = 1000f;
				lavaImmune = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 67)
			{
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 60f;
			}
			else if (type == 68)
			{
				width = 80;
				height = 102;
				aiStyle = 11;
				damage = 1000;
				defense = 9999;
				lifeMax = 9999;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				bool[] array2 = buffImmune;
				bool flag2;
				buffImmune[169] = (flag2 = (buffImmune[183] = true));
				array2[189] = flag2;
			}
			else if (type == 69)
			{
				width = 24;
				height = 24;
				aiStyle = 19;
				damage = 10;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit31;
				DeathSound = SoundID.NPCDeath34;
				knockBackResist = 0f;
				value = 60f;
				behindTiles = true;
			}
			else if (type == 70)
			{
				npcSlots = 0.3f;
				width = 34;
				height = 34;
				aiStyle = 20;
				damage = 32;
				defense = 100;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				scale = 1.5f;
			}
			else if (type == 71)
			{
				npcSlots = 2f;
				width = 36;
				height = 24;
				aiStyle = 1;
				damage = 30;
				defense = 7;
				lifeMax = 150;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 60;
				value = 150f;
				scale = 1.25f;
				knockBackResist = 0.6f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 1;
			}
			else if (type == 72)
			{
				npcSlots = 0.3f;
				width = 34;
				height = 34;
				aiStyle = 21;
				damage = 24;
				defense = 100;
				lifeMax = 100;
				alpha = 100;
				behindTiles = true;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				noGravity = true;
				dontTakeDamage = true;
				scale = 1.2f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 73)
			{
				scale = 0.95f;
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 80;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.7f;
				value = 200f;
				buffImmune[31] = false;
				rarity = 1;
			}
			else if (type == 74 || type == 297 || type == 298)
			{
				width = 14;
				height = 14;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				if (type == 74)
				{
					catchItem = 2015;
				}
				if (type == 297)
				{
					catchItem = 2016;
				}
				if (type == 298)
				{
					catchItem = 2017;
				}
				npcSlots = 0.4f;
			}
			else if (type == 75)
			{
				noGravity = true;
				width = 20;
				height = 20;
				aiStyle = 22;
				damage = 55;
				defense = 20;
				lifeMax = 150;
				HitSound = SoundID.NPCHit5;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath7;
				value = 350f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 77)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 28;
				lifeMax = 260;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 78)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 16;
				lifeMax = 130;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.6f;
				value = 600f;
				buffImmune[31] = false;
			}
			else if (type == 79)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 18;
				lifeMax = 180;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				value = 700f;
				buffImmune[31] = false;
			}
			else if (type == 80)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 55;
				defense = 18;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.55f;
				value = 700f;
				buffImmune[31] = false;
			}
			else if (type == 81)
			{
				width = 40;
				height = 30;
				aiStyle = 1;
				damage = 55;
				defense = 20;
				lifeMax = 170;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 55;
				value = 400f;
				scale = 1.1f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 82)
			{
				noGravity = true;
				noTileCollide = true;
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 65;
				defense = 16;
				lifeMax = 160;
				HitSound = SoundID.NPCHit54;
				DeathSound = SoundID.NPCDeath52;
				alpha = 100;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.7f;
			}
			else if (type == 83)
			{
				width = 40;
				height = 40;
				aiStyle = 23;
				damage = 80;
				defense = 18;
				lifeMax = 200;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.4f;
			}
			else if (type == 84)
			{
				width = 40;
				height = 40;
				aiStyle = 23;
				damage = 80;
				defense = 18;
				lifeMax = 200;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.4f;
			}
			else if (type == 85)
			{
				width = 24;
				height = 24;
				aiStyle = 25;
				damage = 80;
				defense = 30;
				lifeMax = 500;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 100000f;
				knockBackResist = 0.3f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				rarity = 4;
			}
			else if (type == 86)
			{
				width = 46;
				height = 42;
				aiStyle = 26;
				damage = 65;
				defense = 30;
				lifeMax = 400;
				HitSound = SoundID.NPCHit12;
				DeathSound = SoundID.NPCDeath18;
				knockBackResist = 0.3f;
				value = 1000f;
				buffImmune[31] = false;
			}
			else if (type == 87)
			{
				noTileCollide = true;
				npcSlots = 5f;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 80;
				defense = 10;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 88)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 89)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 2000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 90)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 91)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 92)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath8;
				noGravity = true;
				knockBackResist = 0f;
				value = 10000f;
				scale = 1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				dontCountMe = true;
			}
			else if (type == 93)
			{
				npcSlots = 0.5f;
				width = 26;
				height = 20;
				aiStyle = 14;
				damage = 45;
				defense = 16;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.75f;
				DeathSound = SoundID.NPCDeath4;
				value = 400f;
				buffImmune[31] = false;
			}
			else if (type == 94)
			{
				npcSlots = 1f;
				width = 44;
				height = 44;
				aiStyle = 5;
				damage = 60;
				defense = 32;
				lifeMax = 230;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0.55f;
				value = 500f;
			}
			else if (type == 95)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 45;
				defense = 10;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 0.9f;
				value = 300f;
			}
			else if (type == 96)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 28;
				defense = 20;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 0.9f;
				value = 300f;
				dontCountMe = true;
			}
			else if (type == 97)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 26;
				defense = 30;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 0.9f;
				value = 300f;
				dontCountMe = true;
			}
			else if (type == 98)
			{
				npcSlots = 3.5f;
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 70;
				defense = 36;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
			}
			else if (type == 99)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 55;
				defense = 40;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
			}
			else if (type == 100)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 44;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
			}
			else if (type == 101)
			{
				noGravity = true;
				noTileCollide = true;
				behindTiles = true;
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 70;
				defense = 30;
				lifeMax = 320;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.2f;
				DeathSound = SoundID.NPCDeath1;
				value = 600f;
			}
			else if (type == 102)
			{
				npcSlots = 0.5f;
				noGravity = true;
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 80;
				defense = 22;
				lifeMax = 90;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 103)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 80;
				defense = 30;
				lifeMax = 120;
				HitSound = SoundID.NPCHit25;
				DeathSound = SoundID.NPCDeath28;
				value = 800f;
				alpha = 20;
			}
			else if (type == 104)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 38;
				lifeMax = 350;
				HitSound = SoundID.NPCHit6;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[31] = false;
			}
			else if (type == 105)
			{
				friendly = true;
				width = 18;
				height = 34;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				rarity = 1;
			}
			else if (type == 106)
			{
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				rarity = 1;
			}
			else if (type == 107)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 108)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 109)
			{
				width = 34;
				height = 78;
				aiStyle = 3;
				damage = 60;
				defense = 25;
				lifeMax = 800;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.2f;
				value = 10000f;
				rarity = 1;
			}
			else if (type == 110)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 14;
				lifeMax = 210;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 112)
			{
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 65;
				defense = 0;
				lifeMax = 1;
				HitSound = null;
				DeathSound = SoundID.NPCDeath9;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				scale = 0.9f;
				alpha = 80;
			}
			else if (type == 113)
			{
				npcSlots = 10f;
				width = 100;
				height = 100;
				aiStyle = 27;
				damage = 50;
				defense = 12;
				lifeMax = 8000;
				HitSound = SoundID.NPCHit8;
				DeathSound = SoundID.NPCDeath10;
				noGravity = true;
				noTileCollide = true;
				behindTiles = true;
				knockBackResist = 0f;
				scale = 1.2f;
				boss = true;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				value = 80000f;
			}
			else if (type == 114)
			{
				width = 100;
				height = 100;
				aiStyle = 28;
				damage = 50;
				defense = 0;
				lifeMax = 8000;
				HitSound = SoundID.NPCHit8;
				DeathSound = SoundID.NPCDeath10;
				noGravity = true;
				noTileCollide = true;
				behindTiles = true;
				knockBackResist = 0f;
				scale = 1.2f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				value = 80000f;
			}
			else if (type == 115)
			{
				width = 30;
				height = 30;
				aiStyle = 29;
				damage = 30;
				defense = 10;
				lifeMax = 240;
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath11;
				noGravity = true;
				behindTiles = true;
				noTileCollide = true;
				knockBackResist = 1.1f;
			}
			else if (type == 116)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 30;
				defense = 6;
				lifeMax = 80;
				HitSound = SoundID.NPCHit9;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath12;
			}
			else if (type == 117)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 26;
				defense = 2;
				lifeMax = 60;
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath12;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
			}
			else if (type == 118)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 22;
				defense = 6;
				lifeMax = 60;
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath12;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
			}
			else if (type == 119)
			{
				width = 14;
				height = 14;
				aiStyle = 6;
				netAlways = true;
				damage = 18;
				defense = 10;
				lifeMax = 60;
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath12;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
			}
			else if (type == 120)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 30;
				lifeMax = 370;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.4f;
				value = 600f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 121)
			{
				width = 40;
				height = 30;
				aiStyle = 14;
				damage = 45;
				defense = 20;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				alpha = 55;
				knockBackResist = 0.8f;
				scale = 1.1f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 122)
			{
				noGravity = true;
				width = 20;
				height = 20;
				aiStyle = 22;
				damage = 60;
				defense = 22;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 600f;
				buffImmune[20] = true;
			}
			else if (type == 123)
			{
				friendly = true;
				width = 18;
				height = 34;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				scale = 0.9f;
				rarity = 1;
			}
			else if (type == 124)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 125)
			{
				width = 100;
				height = 110;
				aiStyle = 30;
				defense = 10;
				damage = 45;
				lifeMax = 20000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				SpawnWithHigherTime(30);
				boss = true;
				value = 120000f;
				npcSlots = 5f;
			}
			else if (type == 126)
			{
				width = 100;
				height = 110;
				aiStyle = 31;
				defense = 10;
				damage = 50;
				lifeMax = 23000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				SpawnWithHigherTime(30);
				boss = true;
				value = 120000f;
				npcSlots = 5f;
			}
			else if (type == 127)
			{
				width = 80;
				height = 102;
				aiStyle = 32;
				damage = 47;
				defense = 24;
				lifeMax = 28000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				value = 120000f;
				knockBackResist = 0f;
				boss = true;
				npcSlots = 6f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				bool[] array3 = buffImmune;
				bool flag2;
				buffImmune[169] = (flag2 = (buffImmune[183] = true));
				array3[189] = flag2;
				boss = true;
			}
			else if (type == 128)
			{
				width = 52;
				height = 52;
				aiStyle = 35;
				damage = 30;
				defense = 23;
				lifeMax = 7000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				netAlways = true;
			}
			else if (type == 129)
			{
				width = 52;
				height = 52;
				aiStyle = 33;
				damage = 56;
				defense = 38;
				lifeMax = 9000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				netAlways = true;
			}
			else if (type == 130)
			{
				width = 52;
				height = 52;
				aiStyle = 34;
				damage = 52;
				defense = 34;
				lifeMax = 9000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				netAlways = true;
			}
			else if (type == 131)
			{
				width = 52;
				height = 52;
				aiStyle = 36;
				damage = 29;
				defense = 20;
				lifeMax = 6000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				netAlways = true;
			}
			else if (type == 132)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 15;
				defense = 5;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 65f;
				buffImmune[31] = false;
			}
			else if (type == 133)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 40;
				defense = 20;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 134)
			{
				npcSlots = 5f;
				width = 38;
				height = 38;
				aiStyle = 37;
				defense = 0;
				damage = 70;
				lifeMax = 80000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 120000f;
				scale = 1.25f;
				boss = true;
				netAlways = true;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				flag = true;
				alpha = 255;
			}
			else if (type == 135)
			{
				npcSlots = 5f;
				width = 38;
				height = 38;
				aiStyle = 37;
				damage = 55;
				defense = 30;
				lifeMax = 80000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				netAlways = true;
				scale = 1.25f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				flag = true;
				dontCountMe = true;
				alpha = 255;
			}
			else if (type == 136)
			{
				npcSlots = 5f;
				width = 38;
				height = 38;
				aiStyle = 37;
				damage = 40;
				defense = 35;
				lifeMax = 80000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				scale = 1.25f;
				netAlways = true;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				flag = true;
				dontCountMe = true;
				alpha = 255;
			}
			else if (type == 139)
			{
				npcSlots = 1f;
				width = 30;
				height = 30;
				aiStyle = 5;
				damage = 50;
				defense = 20;
				lifeMax = 200;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				noGravity = true;
				knockBackResist = 0.8f;
				noTileCollide = true;
				flag = true;
			}
			else if (type == 137)
			{
				width = 26;
				height = 20;
				aiStyle = 14;
				damage = 75;
				defense = 30;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.75f;
				DeathSound = SoundID.NPCDeath6;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 138)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 70;
				defense = 30;
				lifeMax = 180;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				alpha = 100;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.85f;
				scale = 1.05f;
				buffImmune[31] = false;
			}
			else if (type == 140)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 55;
				defense = 28;
				lifeMax = 260;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.4f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				buffImmune[24] = true;
			}
			else if (type == 141)
			{
				width = 34;
				height = 28;
				aiStyle = 1;
				damage = 50;
				defense = 18;
				lifeMax = 150;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 55;
				value = 400f;
				scale = 1.1f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				knockBackResist = 0.8f;
			}
			else if (type == 142)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 143)
			{
				width = 26;
				height = 40;
				aiStyle = 38;
				damage = 50;
				defense = 20;
				lifeMax = 200;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 0.6f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				buffImmune[24] = true;
				buffImmune[39] = true;
				coldDamage = true;
			}
			else if (type == 144)
			{
				width = 26;
				height = 40;
				aiStyle = 38;
				damage = 65;
				defense = 26;
				lifeMax = 240;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 0.6f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				buffImmune[24] = true;
				buffImmune[39] = true;
				coldDamage = true;
			}
			else if (type == 145)
			{
				width = 26;
				height = 40;
				aiStyle = 38;
				damage = 55;
				defense = 22;
				lifeMax = 220;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 0.6f;
				value = 400f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				buffImmune[24] = true;
				buffImmune[39] = true;
				coldDamage = true;
			}
			else if (type == 147)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 8;
				defense = 4;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 50;
				value = 50f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				coldDamage = true;
			}
			else if (type == 148)
			{
				width = 16;
				height = 34;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2205;
			}
			else if (type == 149)
			{
				width = 16;
				height = 34;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2205;
			}
			else if (type == 150)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 22;
				aiStyle = 14;
				damage = 18;
				defense = 6;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath4;
				value = 250f;
				buffImmune[31] = false;
			}
			else if (type == 151)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 22;
				aiStyle = 14;
				damage = 50;
				defense = 16;
				lifeMax = 160;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath4;
				value = 400f;
				scale = 1.15f;
				lavaImmune = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
			}
			else if (type == 152)
			{
				npcSlots = 0.5f;
				width = 38;
				height = 34;
				aiStyle = 14;
				damage = 80;
				defense = 24;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.65f;
				DeathSound = SoundID.NPCDeath4;
				value = 400f;
				buffImmune[31] = false;
			}
			else if (type == 153)
			{
				npcSlots = 2f;
				width = 46;
				height = 32;
				aiStyle = 39;
				damage = 80;
				defense = 30;
				lifeMax = 470;
				HitSound = SoundID.NPCHit24;
				knockBackResist = 0.3f;
				DeathSound = SoundID.NPCDeath27;
				value = 500f;
				noGravity = false;
				buffImmune[31] = false;
			}
			else if (type == 154)
			{
				npcSlots = 1.5f;
				width = 46;
				height = 32;
				aiStyle = 39;
				damage = 55;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit24;
				knockBackResist = 0.3f;
				DeathSound = SoundID.NPCDeath27;
				value = 450f;
				noGravity = false;
				buffImmune[31] = false;
			}
			else if (type == 155)
			{
				width = 46;
				height = 30;
				aiStyle = 26;
				damage = 65;
				defense = 30;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 1000f;
				buffImmune[31] = false;
			}
			else if (type == 156)
			{
				npcSlots = 2f;
				width = 28;
				height = 48;
				aiStyle = 14;
				damage = 50;
				defense = 40;
				lifeMax = 600;
				HitSound = SoundID.NPCHit21;
				knockBackResist = 0.5f;
				DeathSound = SoundID.NPCDeath24;
				value = 1200f;
				lavaImmune = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 157)
			{
				npcSlots = 0.5f;
				noGravity = true;
				width = 74;
				height = 20;
				aiStyle = 16;
				damage = 75;
				defense = 30;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 160)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 161)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 80f;
				buffImmune[31] = false;
			}
			else if (type == 163)
			{
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 90;
				defense = 40;
				lifeMax = 350;
				HitSound = SoundID.NPCHit29;
				DeathSound = SoundID.NPCDeath32;
				knockBackResist = 0.25f;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				npcSlots = 0.5f;
				SpawnWithHigherTime(2);
			}
			else if (type == 238)
			{
				noGravity = true;
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 100;
				defense = 40;
				lifeMax = 350;
				HitSound = SoundID.NPCHit29;
				DeathSound = SoundID.NPCDeath32;
				knockBackResist = 0.25f;
				value = 500f;
				SpawnWithHigherTime(2);
				npcSlots = 0.5f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 164)
			{
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 30;
				defense = 10;
				lifeMax = 80;
				HitSound = SoundID.NPCHit29;
				DeathSound = SoundID.NPCDeath32;
				knockBackResist = 0.25f;
				value = 100f;
				SpawnWithHigherTime(2);
				npcSlots = 0.5f;
				buffImmune[20] = true;
			}
			else if (type == 165)
			{
				noGravity = true;
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 30;
				defense = 10;
				lifeMax = 80;
				HitSound = SoundID.NPCHit29;
				DeathSound = SoundID.NPCDeath32;
				knockBackResist = 0.25f;
				value = 100f;
				SpawnWithHigherTime(2);
				npcSlots = 0.5f;
				buffImmune[20] = true;
			}
			else if (type == 167)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 24;
				defense = 10;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 200f;
				buffImmune[31] = false;
				buffImmune[20] = true;
			}
			else if (type == 168)
			{
				width = 16;
				height = 34;
				aiStyle = 3;
				damage = 20;
				defense = 4;
				lifeMax = 70;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 169)
			{
				noGravity = true;
				width = 18;
				height = 40;
				aiStyle = 22;
				damage = 55;
				defense = 20;
				lifeMax = 200;
				HitSound = SoundID.NPCHit5;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath7;
				value = 1500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				buffImmune[31] = false;
				buffImmune[44] = true;
				coldDamage = true;
			}
			else if (type == 170)
			{
				width = 44;
				height = 36;
				aiStyle = 2;
				damage = 70;
				defense = 16;
				lifeMax = 210;
				HitSound = SoundID.NPCHit27;
				DeathSound = SoundID.NPCDeath30;
				knockBackResist = 0.5f;
				value = 2000f;
				buffImmune[31] = false;
			}
			else if (type == 171)
			{
				width = 44;
				height = 36;
				aiStyle = 2;
				damage = 70;
				defense = 16;
				lifeMax = 210;
				HitSound = SoundID.NPCHit27;
				DeathSound = SoundID.NPCDeath30;
				knockBackResist = 0.5f;
				value = 2000f;
				buffImmune[31] = false;
			}
			else if (type == 172)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 200;
				defense = 30;
				lifeMax = 600;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 5000f;
				buffImmune[20] = true;
				rarity = 2;
			}
			else if (type == 173)
			{
				npcSlots = 1f;
				width = 30;
				height = 30;
				aiStyle = 5;
				damage = 22;
				defense = 8;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0.5f;
				value = 90f;
			}
			else if (type == 174)
			{
				npcSlots = 1f;
				width = 52;
				height = 26;
				aiStyle = 41;
				damage = 65;
				defense = 26;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 450f;
			}
			else if (type == 175)
			{
				noGravity = true;
				noTileCollide = true;
				width = 30;
				height = 30;
				aiStyle = 13;
				damage = 100;
				defense = 30;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.25f;
				DeathSound = SoundID.NPCDeath1;
				value = 650f;
				buffImmune[20] = true;
			}
			else if (type == 176)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 70;
				defense = 22;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.5f;
				DeathSound = SoundID.NPCDeath1;
				value = 600f;
				noGravity = true;
				buffImmune[20] = true;
				npcSlots = 1.5f;
			}
			else if (type == 177)
			{
				npcSlots = 1f;
				width = 58;
				height = 44;
				aiStyle = 41;
				damage = 80;
				defense = 26;
				lifeMax = 300;
				HitSound = SoundID.NPCHit22;
				DeathSound = SoundID.NPCDeath25;
				knockBackResist = 0.5f;
				value = 500f;
			}
			else if (type == 178)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 179)
			{
				width = 40;
				height = 40;
				aiStyle = 23;
				damage = 80;
				defense = 18;
				lifeMax = 200;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.4f;
			}
			else if (type == 180)
			{
				width = 44;
				height = 36;
				aiStyle = 2;
				damage = 70;
				defense = 16;
				lifeMax = 210;
				HitSound = SoundID.NPCHit27;
				DeathSound = SoundID.NPCDeath30;
				knockBackResist = 0.5f;
				value = 4000f;
				buffImmune[31] = false;
			}
			else if (type == 181)
			{
				width = 18;
				height = 44;
				aiStyle = 3;
				damage = 25;
				defense = 10;
				lifeMax = 70;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 200f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 182)
			{
				noGravity = true;
				noTileCollide = true;
				width = 24;
				height = 62;
				aiStyle = 22;
				damage = 65;
				defense = 18;
				lifeMax = 240;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				alpha = 100;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.7f;
			}
			else if (type == 183)
			{
				width = 40;
				height = 30;
				aiStyle = 1;
				damage = 60;
				defense = 26;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 55;
				value = 400f;
				scale = 1.1f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 184)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 12;
				defense = 8;
				lifeMax = 60;
				scale = 1.1f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 50;
				value = 200f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				coldDamage = true;
			}
			else if (type == 185)
			{
				width = 28;
				height = 28;
				aiStyle = 3;
				damage = 26;
				defense = 12;
				lifeMax = 70;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 1.1f;
				value = 200f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				coldDamage = true;
			}
			else if (type == 186)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 65f;
				buffImmune[31] = false;
			}
			else if (type == 187)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 6;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 55f;
				buffImmune[31] = false;
			}
			else if (type == 188)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 13;
				defense = 8;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 80f;
				buffImmune[31] = false;
			}
			else if (type == 189)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 4;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 70f;
				buffImmune[31] = false;
			}
			else if (type == 190)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 18;
				defense = 4;
				lifeMax = 65;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.7f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 191)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 16;
				defense = 2;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.85f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 192)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 18;
				defense = 2;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 193)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 20;
				defense = 0;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 194)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 14;
				defense = 4;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 75f;
				buffImmune[31] = false;
			}
			else if (type == 195)
			{
				width = 18;
				height = 40;
				aiStyle = 42;
				damage = 10;
				defense = 30;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				rarity = 1;
				value = Item.buyPrice(0, 5);
			}
			else if (type == 196)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 35;
				defense = 16;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = Item.buyPrice(0, 5);
				buffImmune[31] = false;
				rarity = 1;
			}
			else if (type == 197)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 28;
				lifeMax = 280;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 198)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 38;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit26;
				DeathSound = SoundID.NPCDeath29;
				knockBackResist = 0.4f;
				value = 650f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 199)
			{
				width = 42;
				height = 30;
				aiStyle = 3;
				damage = 60;
				defense = 30;
				lifeMax = 400;
				HitSound = SoundID.NPCHit26;
				DeathSound = SoundID.NPCDeath29;
				knockBackResist = 0f;
				value = 650f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 200)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 12;
				defense = 4;
				lifeMax = 38;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 65f;
				buffImmune[31] = false;
			}
			else if (type == 201)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 12;
				lifeMax = 55;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 202)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 18;
				defense = 8;
				lifeMax = 65;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 120f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 203)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 110f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 204)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 28;
				defense = 8;
				lifeMax = 65;
				scale = 1.15f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 50;
				value = 300f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 205)
			{
				width = 40;
				height = 40;
				aiStyle = 5;
				damage = 70;
				defense = 28;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.4f;
				DeathSound = SoundID.NPCDeath1;
				value = 600f;
				noGravity = true;
				buffImmune[20] = true;
				rarity = 2;
			}
			else if (type == 206)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 30;
				lifeMax = 280;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				value = 500f;
				buffImmune[31] = false;
				coldDamage = true;
			}
			else if (type == 207)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 208)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 209)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 210)
			{
				width = 12;
				height = 12;
				aiStyle = 5;
				damage = 20;
				defense = 5;
				lifeMax = 20;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.5f;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 211)
			{
				width = 8;
				height = 8;
				aiStyle = 5;
				damage = 15;
				defense = 2;
				lifeMax = 10;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.5f;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 212)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 35;
				defense = 17;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
				value = 700f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 213)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 22;
				lifeMax = 450;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.2f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 214)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 30;
				defense = 14;
				lifeMax = 225;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 215)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 35;
				defense = 20;
				lifeMax = 350;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.35f;
				value = 1500f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 216)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 30;
				lifeMax = 3000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				value = 50000f;
				buffImmune[20] = true;
				buffImmune[31] = true;
				rarity = 1;
			}
			else if (type == 217)
			{
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath16;
				value = 60f;
				rarity = 1;
			}
			else if (type == 218)
			{
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath16;
				value = 60f;
				rarity = 1;
			}
			else if (type == 219)
			{
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath16;
				value = 60f;
				rarity = 1;
			}
			else if (type == 220)
			{
				width = 28;
				height = 20;
				aiStyle = 3;
				damage = 20;
				defense = 10;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 60f;
				rarity = 1;
			}
			else if (type == 221)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 20;
				defense = 2;
				lifeMax = 30;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 100f;
				alpha = 20;
				rarity = 1;
			}
			else if (type == 222)
			{
				width = 66;
				height = 66;
				aiStyle = 43;
				damage = 30;
				defense = 8;
				lifeMax = 3400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				SpawnWithHigherTime(30);
				boss = true;
				value = 50000f;
				npcSlots = 7f;
			}
			else if (type == 223)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 16;
				defense = 8;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.45f;
				value = 70f;
				buffImmune[31] = false;
			}
			else if (type == 224)
			{
				width = 32;
				height = 18;
				aiStyle = 44;
				damage = 9;
				defense = 4;
				lifeMax = 20;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				value = 300f;
				buffImmune[31] = false;
			}
			if (type == 225)
			{
				width = 38;
				height = 26;
				aiStyle = 1;
				damage = 10;
				defense = 5;
				lifeMax = 35;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.75f;
				value = 200f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 226)
			{
				npcSlots = 0.5f;
				width = 34;
				height = 50;
				aiStyle = 14;
				damage = 85;
				defense = 28;
				lifeMax = 260;
				HitSound = SoundID.NPCHit23;
				knockBackResist = 0.65f;
				DeathSound = SoundID.NPCDeath26;
				value = 400f;
				buffImmune[31] = false;
			}
			else if (type == 227)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 228)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 229)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 230)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 261;
			}
			else if (type == 231)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 22;
				defense = 16;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.3f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 232)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 28;
				defense = 12;
				lifeMax = 42;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 233)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 30;
				defense = 14;
				lifeMax = 38;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.45f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 234)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 32;
				defense = 6;
				lifeMax = 42;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.55f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 235)
			{
				width = 34;
				height = 32;
				aiStyle = 5;
				damage = 34;
				defense = 4;
				lifeMax = 38;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath1;
				value = 200f;
				noGravity = true;
				buffImmune[20] = true;
			}
			else if (type == 236)
			{
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 50;
				defense = 14;
				lifeMax = 120;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.25f;
				value = 1000f;
				SpawnWithHigherTime(2);
				npcSlots = 0.75f;
				buffImmune[20] = true;
			}
			else if (type == 237)
			{
				noGravity = true;
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 50;
				defense = 14;
				lifeMax = 120;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.25f;
				value = 1000f;
				SpawnWithHigherTime(2);
				npcSlots = 0.75f;
				buffImmune[20] = true;
			}
			else if (type == 239)
			{
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 30;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit20;
				DeathSound = SoundID.NPCDeath23;
				knockBackResist = 0.5f;
				value = 130f;
				SpawnWithHigherTime(2);
				buffImmune[20] = true;
			}
			else if (type == 240)
			{
				noGravity = true;
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 30;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit20;
				DeathSound = SoundID.NPCDeath23;
				knockBackResist = 0.5f;
				value = 130f;
				SpawnWithHigherTime(2);
				buffImmune[20] = true;
			}
			else if (type == 241)
			{
				npcSlots = 0.5f;
				noGravity = true;
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 30;
				defense = 4;
				lifeMax = 20;
				HitSound = SoundID.NPCHit13;
				DeathSound = SoundID.NPCDeath19;
				value = 350f;
			}
			else if (type == 242)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 75;
				defense = 20;
				lifeMax = 150;
				HitSound = SoundID.NPCHit13;
				DeathSound = SoundID.NPCDeath19;
				value = 800f;
				alpha = 20;
			}
			else if (type == 243)
			{
				width = 30;
				height = 114;
				aiStyle = 3;
				damage = 60;
				defense = 32;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit5;
				DeathSound = SoundID.NPCDeath7;
				knockBackResist = 0.05f;
				value = Item.buyPrice(0, 1, 50);
				buffImmune[20] = true;
				buffImmune[44] = true;
				coldDamage = true;
				rarity = 2;
			}
			else if (type == 244)
			{
				width = 60;
				height = 42;
				aiStyle = 1;
				damage = 85;
				defense = 26;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 175;
				value = Item.buyPrice(0, 0, 20);
				knockBackResist = 0.3f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 1;
			}
			else if (type == 245)
			{
				width = 140;
				height = 140;
				aiStyle = 45;
				damage = 72;
				defense = 26;
				lifeMax = 9000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
				value = Item.buyPrice(0, 15);
				alpha = 255;
				boss = true;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 246)
			{
				noGravity = true;
				width = 70;
				height = 70;
				aiStyle = 46;
				damage = 64;
				defense = 20;
				lifeMax = 16000;
				HitSound = SoundID.NPCHit4;
				DeathSound = null;
				knockBackResist = 0f;
				alpha = 255;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 247 || type == 248)
			{
				noGravity = true;
				width = 40;
				height = 30;
				aiStyle = 47;
				damage = 59;
				defense = 28;
				lifeMax = 7000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				alpha = 255;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 249)
			{
				noGravity = true;
				width = 70;
				height = 70;
				aiStyle = 48;
				damage = 80;
				defense = 32;
				lifeMax = 11000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
				dontTakeDamage = true;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 250)
			{
				width = 34;
				height = 26;
				aiStyle = 49;
				damage = 50;
				defense = 24;
				lifeMax = 300;
				HitSound = SoundID.NPCHit30;
				DeathSound = SoundID.NPCDeath33;
				knockBackResist = 0.3f;
				value = 300f;
				buffImmune[20] = true;
			}
			else if (type == 251)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 30;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = Item.buyPrice(0, 0, 50);
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 252)
			{
				noGravity = true;
				npcSlots = 0.5f;
				width = 32;
				height = 32;
				aiStyle = 5;
				damage = 80;
				defense = 12;
				lifeMax = 100;
				HitSound = SoundID.NPCHit46;
				knockBackResist = 0.7f;
				DeathSound = SoundID.NPCDeath48;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 254)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 10;
				lifeMax = 180;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[31] = false;
			}
			else if (type == 255)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 38;
				defense = 16;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.3f;
				value = 1200f;
				buffImmune[31] = false;
			}
			else if (type == 256)
			{
				noGravity = true;
				width = 26;
				height = 26;
				aiStyle = 18;
				damage = 90;
				defense = 20;
				lifeMax = 140;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				value = 1200f;
				alpha = 20;
				npcSlots = 0.3f;
			}
			else if (type == 257)
			{
				width = 44;
				height = 34;
				aiStyle = 3;
				damage = 38;
				defense = 24;
				lifeMax = 230;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.3f;
				value = 1300f;
				buffImmune[31] = false;
				npcSlots = 0.3f;
			}
			else if (type == 258)
			{
				width = 30;
				height = 24;
				aiStyle = 3;
				damage = 60;
				defense = 16;
				lifeMax = 220;
				HitSound = SoundID.NPCHit45;
				DeathSound = SoundID.NPCDeath47;
				knockBackResist = 0.3f;
				value = 1500f;
				buffImmune[31] = false;
				npcSlots = 0.3f;
			}
			else if (type == 259)
			{
				noGravity = true;
				noTileCollide = true;
				width = 20;
				height = 20;
				aiStyle = 13;
				damage = 24;
				defense = 4;
				lifeMax = 90;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath1;
				value = 350f;
				buffImmune[20] = true;
				npcSlots = 0.3f;
			}
			else if (type == 260)
			{
				noGravity = true;
				noTileCollide = true;
				width = 36;
				height = 36;
				aiStyle = 13;
				damage = 70;
				defense = 20;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath1;
				value = 1250f;
				buffImmune[20] = true;
				npcSlots = 0.3f;
			}
			else if (type == 261)
			{
				width = 12;
				height = 12;
				aiStyle = 50;
				damage = 80;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				npcSlots = 0f;
			}
			else if (type == 262)
			{
				noTileCollide = true;
				width = 86;
				height = 86;
				aiStyle = 51;
				damage = 50;
				defense = 14;
				lifeMax = 30000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				value = Item.buyPrice(0, 15);
				noGravity = true;
				boss = true;
				npcSlots = 16f;
				buffImmune[20] = true;
			}
			else if (type == 263)
			{
				noTileCollide = true;
				noGravity = true;
				width = 40;
				height = 40;
				aiStyle = 52;
				damage = 60;
				defense = 24;
				lifeMax = 4000;
				dontTakeDamage = true;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				buffImmune[20] = true;
			}
			else if (type == 264)
			{
				width = 24;
				height = 24;
				aiStyle = 53;
				damage = 60;
				defense = 20;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				buffImmune[20] = true;
			}
			else if (type == 265)
			{
				width = 18;
				height = 18;
				aiStyle = 50;
				damage = 70;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				npcSlots = 0f;
			}
			else if (type == 266)
			{
				dontTakeDamage = true;
				width = 160;
				height = 110;
				aiStyle = 54;
				damage = 30;
				defense = 14;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath11;
				knockBackResist = 0.5f;
				noGravity = true;
				noTileCollide = true;
				SpawnWithHigherTime(30);
				boss = true;
				value = 50000f;
				npcSlots = 6f;
			}
			else if (type == 267)
			{
				width = 30;
				height = 30;
				aiStyle = 55;
				damage = 20;
				defense = 10;
				lifeMax = 100;
				HitSound = SoundID.NPCHit9;
				DeathSound = SoundID.NPCDeath11;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.8f;
			}
			else if (type == 268)
			{
				noGravity = true;
				width = 28;
				height = 56;
				aiStyle = 22;
				damage = 55;
				defense = 20;
				lifeMax = 340;
				HitSound = SoundID.NPCHit13;
				DeathSound = SoundID.NPCDeath19;
				knockBackResist = 0.6f;
				value = 450f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 269)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 34;
				lifeMax = 550;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 270)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 55;
				defense = 50;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.2f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 271)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 40;
				lifeMax = 450;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.25f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 272)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 75;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.35f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 273)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 50;
				lifeMax = 500;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.15f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 274)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 34;
				lifeMax = 350;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 275)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 50;
				lifeMax = 550;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.15f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 276)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 85;
				defense = 54;
				lifeMax = 500;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.2f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 277)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 32;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[31] = false;
			}
			else if (type == 278)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 48;
				lifeMax = 450;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[31] = false;
			}
			else if (type == 279)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 54;
				lifeMax = 500;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.2f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[31] = false;
			}
			else if (type == 280)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 75;
				defense = 34;
				lifeMax = 500;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[31] = false;
			}
			else if (type == 281)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 40;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 282)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 35;
				defense = 28;
				lifeMax = 450;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 283)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 50;
				defense = 18;
				lifeMax = 300;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.55f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 284)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 35;
				defense = 24;
				lifeMax = 450;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 285)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 50;
				defense = 12;
				lifeMax = 200;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.7f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 286)
			{
				width = 18;
				height = 40;
				aiStyle = 8;
				damage = 60;
				defense = 10;
				lifeMax = 250;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.65f;
				value = 1500f;
				npcSlots = 2f;
				buffImmune[20] = true;
			}
			else if (type == 287)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 90;
				defense = 42;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 2000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 1;
			}
			else if (type == 288)
			{
				width = 20;
				height = 20;
				aiStyle = 56;
				damage = 70;
				defense = 30;
				lifeMax = 200;
				knockBackResist = 0.2f;
				HitSound = SoundID.NPCHit36;
				DeathSound = SoundID.NPCDeath39;
				value = 500f;
				noTileCollide = true;
				noGravity = true;
				flag = true;
			}
			else if (type == 289)
			{
				width = 44;
				height = 44;
				aiStyle = 10;
				damage = 60;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				noGravity = true;
				noTileCollide = true;
				value = 150f;
				knockBackResist = 0.2f;
				npcSlots = 0.75f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 290)
			{
				width = 34;
				height = 62;
				aiStyle = 3;
				damage = 100;
				defense = 50;
				lifeMax = 5000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0f;
				value = 50000f;
				buffImmune[20] = true;
				buffImmune[31] = true;
				rarity = 1;
			}
			else if (type == 291)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 292)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 293)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 28;
				lifeMax = 400;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 294)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 34;
				defense = 6;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.9f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 295)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 28;
				defense = 12;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.7f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 296)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 24;
				defense = 14;
				lifeMax = 120;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 299)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2018;
			}
			else if (type == 300)
			{
				width = 14;
				height = 12;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath4;
				npcSlots = 0.25f;
				catchItem = 2003;
			}
			else if (type == 301)
			{
				width = 36;
				height = 26;
				aiStyle = 17;
				damage = 12;
				defense = 2;
				lifeMax = 35;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.85f;
				DeathSound = SoundID.NPCDeath1;
				value = 50f;
			}
			if (type == 302)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 7;
				defense = 2;
				lifeMax = 25;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 304)
			{
				width = 34;
				height = 28;
				aiStyle = 1;
				damage = 80;
				defense = 20;
				lifeMax = 175;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
				scale = 1.1f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				knockBackResist = 0.5f;
				npcSlots = 0.3f;
			}
			else if (type >= 305 && type <= 314)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				value = 1200f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
				if (type == 305 || type == 310)
				{
					damage = 60;
					defense = 18;
					lifeMax = 500;
					knockBackResist = 0.4f;
				}
				else if (type == 306 || type == 311)
				{
					damage = 52;
					defense = 14;
					lifeMax = 400;
					knockBackResist = 0.2f;
					scale = 1.05f;
				}
				else if (type == 307 || type == 312)
				{
					damage = 78;
					defense = 16;
					lifeMax = 600;
					knockBackResist = 0.25f;
					scale = 0.9f;
				}
				else if (type == 308 || type == 313)
				{
					damage = 66;
					defense = 14;
					lifeMax = 650;
					knockBackResist = 0.35f;
					scale = 0.95f;
				}
				else if (type == 309 || type == 314)
				{
					damage = 52;
					defense = 26;
					lifeMax = 450;
					knockBackResist = 0.5f;
					scale = 1.1f;
				}
			}
			else if (type == 315)
			{
				width = 74;
				height = 70;
				aiStyle = 26;
				damage = 130;
				defense = 40;
				lifeMax = 10000;
				HitSound = SoundID.NPCHit12;
				DeathSound = SoundID.NPCDeath18;
				knockBackResist = 0f;
				value = 10000f;
				flag = true;
			}
			else if (type == 316)
			{
				noGravity = true;
				noTileCollide = true;
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 18;
				defense = 8;
				lifeMax = 70;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				alpha = 100;
				value = 90f;
				flag = true;
				knockBackResist = 0.6f;
			}
			else if (type == 317)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 16;
				defense = 6;
				lifeMax = 75;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.7f;
				DeathSound = SoundID.NPCDeath1;
				value = 100f;
				buffImmune[31] = false;
			}
			else if (type == 318)
			{
				width = 30;
				height = 32;
				aiStyle = 2;
				damage = 20;
				defense = 4;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.65f;
				DeathSound = SoundID.NPCDeath1;
				value = 100f;
				buffImmune[31] = false;
			}
			else if (type == 319)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.6f;
				value = 85f;
				buffImmune[31] = false;
				scale = 0.9f;
			}
			else if (type == 320)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 15;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 105f;
				buffImmune[31] = false;
				scale = 1.05f;
			}
			else if (type == 321)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 14;
				lifeMax = 34;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 120f;
				buffImmune[31] = false;
				scale = 1.1f;
			}
			else if (type == 322)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 23;
				defense = 0;
				lifeMax = 115;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.65f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 323)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 18;
				defense = 10;
				lifeMax = 65;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 120f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 324)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 10;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				scale = 1.05f;
			}
			else if (type == 325)
			{
				width = 164;
				height = 154;
				aiStyle = 57;
				damage = 120;
				defense = 28;
				lifeMax = 12000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0f;
				value = 10000f;
				flag = true;
			}
			else if (type == 326)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 100;
				defense = 32;
				lifeMax = 900;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.2f;
				value = 2000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 327)
			{
				width = 100;
				height = 100;
				aiStyle = 58;
				damage = 50;
				defense = 36;
				lifeMax = 22000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				value = 50000f;
				knockBackResist = 0f;
				flag = true;
			}
			else if (type == 328)
			{
				width = 80;
				height = 80;
				aiStyle = 59;
				damage = 65;
				defense = 14;
				lifeMax = 5000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				flag = true;
				dontTakeDamage = true;
				npcSlots = 0f;
				dontCountMe = true;
			}
			else if (type == 329)
			{
				width = 46;
				height = 30;
				aiStyle = 26;
				damage = 80;
				defense = 38;
				lifeMax = 1200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0.3f;
				value = 3000f;
				flag = true;
			}
			else if (type == 330)
			{
				noGravity = true;
				noTileCollide = true;
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 90;
				defense = 44;
				lifeMax = 2000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				alpha = 100;
				value = 4500f;
				flag = true;
				knockBackResist = 0.4f;
			}
			else if (type == 331)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
				buffImmune[31] = false;
			}
			else if (type == 332)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
				buffImmune[31] = false;
			}
			if (type == 333)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 7;
				defense = 2;
				lifeMax = 25;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			if (type == 334)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 6;
				defense = 2;
				lifeMax = 23;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				scale = 0.9f;
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			if (type == 335)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 8;
				defense = 3;
				lifeMax = 29;
				scale = 1.05f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			if (type == 336)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 5;
				defense = 1;
				lifeMax = 22;
				scale = 0.85f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 25f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type >= 338 && type <= 340)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 1200f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
				if (type == 338)
				{
					damage = 65;
					defense = 18;
					lifeMax = 600;
					knockBackResist = 0.4f;
				}
				else if (type == 339)
				{
					damage = 52;
					defense = 24;
					lifeMax = 700;
					knockBackResist = 0.2f;
					scale = 1.05f;
				}
				else if (type == 340)
				{
					damage = 78;
					defense = 14;
					lifeMax = 500;
					knockBackResist = 0.25f;
					scale = 0.9f;
				}
			}
			else if (type == 341)
			{
				width = 24;
				height = 24;
				aiStyle = 25;
				damage = 100;
				defense = 32;
				lifeMax = 900;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = Item.buyPrice(0, 0, 20);
				knockBackResist = 0.25f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 342)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 90;
				defense = 26;
				lifeMax = 750;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.2f;
				value = 1800f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 343)
			{
				width = 38;
				height = 78;
				aiStyle = 3;
				damage = 140;
				defense = 50;
				lifeMax = 3500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				value = 3000f;
				buffImmune[31] = false;
				npcSlots = 2f;
			}
			else if (type == 344)
			{
				width = 172;
				height = 130;
				aiStyle = 57;
				damage = 110;
				defense = 38;
				lifeMax = 13000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0f;
				value = 10000f;
				buffImmune[20] = true;
				npcSlots = 3f;
			}
			else if (type == 345)
			{
				width = 130;
				height = 140;
				aiStyle = 60;
				damage = 120;
				defense = 38;
				lifeMax = 34000;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0f;
				value = 50000f;
				buffImmune[20] = true;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 5f;
				coldDamage = true;
			}
			else if (type == 346)
			{
				width = 112;
				height = 140;
				aiStyle = 61;
				damage = 120;
				defense = 56;
				lifeMax = 18000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
				value = 10000f;
				buffImmune[20] = true;
				npcSlots = 4f;
			}
			else if (type == 347)
			{
				width = 50;
				height = 50;
				aiStyle = 62;
				damage = 60;
				defense = 28;
				lifeMax = 1200;
				HitSound = SoundID.NPCHit4;
				knockBackResist = 0.4f;
				DeathSound = SoundID.NPCDeath14;
				value = 1000f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 1.5f;
			}
			else if (type == 348)
			{
				width = 28;
				height = 76;
				aiStyle = 3;
				damage = 80;
				defense = 26;
				lifeMax = 1800;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
				value = 1500f;
				buffImmune[31] = false;
				npcSlots = 1.5f;
			}
			else if (type == 349)
			{
				width = 28;
				height = 76;
				aiStyle = 3;
				damage = 100;
				defense = 42;
				lifeMax = 1800;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.1f;
				value = 1500f;
				buffImmune[31] = false;
				npcSlots = 1.5f;
			}
			else if (type == 350)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 30;
				lifeMax = 900;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.45f;
				value = 900f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 351)
			{
				width = 18;
				height = 90;
				aiStyle = 3;
				damage = 100;
				defense = 40;
				lifeMax = 2500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.1f;
				value = 3000f;
				buffImmune[20] = true;
				buffImmune[31] = false;
				npcSlots = 1.75f;
			}
			else if (type == 352)
			{
				width = 54;
				height = 54;
				aiStyle = 63;
				damage = 75;
				defense = 8;
				lifeMax = 450;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.4f;
				noGravity = true;
				noTileCollide = true;
				npcSlots = 2f;
				coldDamage = true;
			}
			else if (type == 353)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 354)
			{
				friendly = true;
				width = 18;
				height = 34;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				scale = 0.9f;
				rarity = 1;
			}
			else if (type == 355)
			{
				width = 10;
				height = 10;
				aiStyle = 64;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.2f;
				noGravity = true;
				catchItem = 1992;
			}
			else if (type == 356)
			{
				width = 10;
				height = 10;
				aiStyle = 65;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				catchItem = 1994;
			}
			else if (type == 357)
			{
				width = 10;
				height = 4;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.1f;
				catchItem = 2002;
				friendly = true;
			}
			else if (type == 358)
			{
				width = 12;
				height = 12;
				aiStyle = 64;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.2f;
				noGravity = true;
				catchItem = 2004;
			}
			else if (type == 359)
			{
				width = 12;
				height = 12;
				aiStyle = 67;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.5f;
				noGravity = true;
				catchItem = 2006;
			}
			else if (type == 360)
			{
				width = 14;
				height = 14;
				aiStyle = 67;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.5f;
				noGravity = true;
				catchItem = 2007;
			}
			else if (type == 361)
			{
				width = 12;
				height = 10;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2121;
			}
			else if (type == 362)
			{
				width = 22;
				height = 26;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2122;
			}
			else if (type == 363)
			{
				width = 28;
				height = 22;
				aiStyle = 68;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2122;
			}
			else if (type == 364)
			{
				width = 22;
				height = 26;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2123;
			}
			else if (type == 365)
			{
				width = 28;
				height = 22;
				aiStyle = 68;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2123;
			}
			else if (type == 366 || type == 367)
			{
				width = 26;
				height = 18;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = (short)(2156 + type - 366);
			}
			else if (type == 368)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 369)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
			}
			else if (type == 370)
			{
				width = 150;
				height = 100;
				aiStyle = 69;
				damage = 100;
				defense = 50;
				lifeMax = 50000;
				knockBackResist = 0f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 10f;
				HitSound = SoundID.NPCHit14;
				DeathSound = SoundID.NPCDeath20;
				value = 250000f;
				boss = true;
				netAlways = true;
				SpawnWithHigherTime(30);
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[31] = true;
				buffImmune[44] = true;
			}
			else if (type == 371)
			{
				width = 36;
				height = 36;
				aiStyle = 70;
				damage = 100;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				alpha = 255;
			}
			else if (type == 372)
			{
				noGravity = true;
				width = 120;
				height = 24;
				aiStyle = 71;
				damage = 100;
				defense = 100;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				alpha = 255;
			}
			else if (type == 373)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 71;
				damage = 120;
				defense = 100;
				lifeMax = 100;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				alpha = 255;
			}
			else if (type == 374)
			{
				width = 20;
				height = 10;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.15f;
				catchItem = 2673;
				rarity = 4;
			}
			else if (type == 375)
			{
				width = 10;
				height = 10;
				aiStyle = 6;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				npcSlots = 0.15f;
				catchItem = 2673;
			}
			else if (type == 376)
			{
				friendly = true;
				width = 34;
				height = 8;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				scale = 0.9f;
				rarity = 1;
			}
			else if (type == 377)
			{
				width = 14;
				height = 10;
				aiStyle = 1;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				friendly = true;
				catchItem = 2740;
				npcSlots = 0.1f;
			}
			else if (type == 378)
			{
				npcSlots = 1f;
				width = 20;
				height = 26;
				aiStyle = 41;
				damage = 200;
				defense = 30;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				value = 450f;
			}
			else if (type >= 379 && type <= 380)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 45;
				defense = 14;
				lifeMax = 210;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.55f;
				value = 1000f;
				npcSlots = 0f;
				lavaImmune = true;
				netAlways = true;
				chaseable = false;
			}
			else if (type >= 381 && type <= 382)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 50;
				defense = 25;
				lifeMax = 350;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.35f;
				value = 1000f;
			}
			else if (type == 383)
			{
				lifeMax = 300;
				defense = 50;
				damage = 75;
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit43;
				DeathSound = SoundID.NPCDeath45;
				value = 1200f;
				knockBackResist = 0.25f;
				buffImmune[31] = false;
			}
			else if (type == 384)
			{
				lifeMax = 1000;
				width = 18;
				defense = 20;
				height = 40;
				aiStyle = 72;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				flag = true;
				npcSlots = 0f;
				noTileCollide = true;
				canGhostHeal = false;
			}
			else if (type == 385)
			{
				lifeMax = 750;
				defense = 30;
				damage = 80;
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit43;
				DeathSound = SoundID.NPCDeath45;
				value = 600f;
				knockBackResist = 0f;
				npcSlots = 0.75f;
			}
			else if (type == 386)
			{
				lifeMax = 400;
				defense = 34;
				damage = 40;
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit43;
				DeathSound = SoundID.NPCDeath45;
				value = 1200f;
				knockBackResist = 0.4f;
			}
			else if (type == 387)
			{
				width = 20;
				height = 50;
				aiStyle = 73;
				damage = 10;
				defense = 40;
				lifeMax = 200;
				HitSound = SoundID.NPCHit53;
				DeathSound = SoundID.NPCDeath56;
				knockBackResist = 0f;
				buffImmune[31] = true;
				canGhostHeal = false;
			}
			else if (type == 388)
			{
				width = 40;
				height = 30;
				aiStyle = 74;
				damage = 60;
				defense = 16;
				lifeMax = 300;
				HitSound = SoundID.NPCHit42;
				knockBackResist = 0.4f;
				DeathSound = SoundID.NPCDeath44;
				value = 1000f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 1.5f;
				canGhostHeal = false;
			}
			else if (type == 389)
			{
				lifeMax = 600;
				defense = 38;
				damage = 75;
				width = 18;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit39;
				DeathSound = SoundID.NPCDeath57;
				value = 1200f;
				npcSlots = 0.5f;
				knockBackResist = 0.3f;
			}
			else if (type == 390)
			{
				damage = 65;
				defense = 30;
				lifeMax = 350;
				width = 18;
				height = 40;
				aiStyle = 75;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 1200f;
				npcSlots = 0.5f;
			}
			else if (type == 391)
			{
				lifeMax = 600;
				defense = 30;
				damage = 85;
				width = 60;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit51;
				DeathSound = SoundID.NPCDeath54;
				value = 1200f;
				npcSlots = 0.5f;
				knockBackResist = 0.1f;
			}
			else if (type == 392)
			{
				lifeMax = 100;
				defense = 100;
				damage = 50;
				width = 150;
				height = 80;
				aiStyle = 75;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				flag = true;
				netAlways = true;
			}
			else if (type == 393)
			{
				lifeMax = 5000;
				defense = 20;
				damage = 60;
				width = 40;
				height = 16;
				aiStyle = 75;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 1f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				netAlways = true;
			}
			else if (type == 394)
			{
				lifeMax = 3500;
				defense = 20;
				damage = 60;
				width = 46;
				height = 36;
				aiStyle = 75;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 1f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				netAlways = true;
			}
			else if (type == 395)
			{
				lifeMax = 10000;
				defense = 0;
				damage = 80;
				width = 46;
				height = 36;
				aiStyle = 76;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				boss = true;
				flag = true;
				netAlways = true;
			}
			else if (type == 399)
			{
				defense = 5;
				damage = 5;
				lifeMax = 500;
				aiStyle = 80;
				width = 42;
				height = 72;
				value = 0f;
				knockBackResist = 0f;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				npcSlots = 0f;
				noGravity = true;
				SpawnWithHigherTime(30);
				chaseable = false;
				netAlways = true;
				rarity = 1;
			}
			else if (type == 396)
			{
				lifeMax = 45000;
				defense = 50;
				damage = 0;
				width = 38;
				height = 56;
				aiStyle = 79;
				HitSound = SoundID.NPCHit57;
				DeathSound = SoundID.NPCDeath62;
				value = 0f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				boss = true;
				hide = true;
				netAlways = true;
			}
			else if (type == 397)
			{
				lifeMax = 25000;
				defense = 40;
				damage = 0;
				width = 46;
				height = 66;
				aiStyle = 78;
				HitSound = SoundID.NPCHit57;
				DeathSound = SoundID.NPCDeath62;
				value = 0f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				boss = true;
				hide = true;
				netAlways = true;
			}
			else if (type == 398)
			{
				lifeMax = 50000;
				defense = 70;
				damage = 0;
				width = 46;
				height = 66;
				aiStyle = 77;
				HitSound = SoundID.NPCHit57;
				DeathSound = null;
				value = 1000000f;
				npcSlots = 6f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				boss = true;
				behindTiles = true;
				hide = true;
				netAlways = true;
			}
			else if (type == 400)
			{
				defense = 0;
				damage = 60;
				lifeMax = 100;
				aiStyle = 81;
				width = 60;
				height = 60;
				value = 0f;
				knockBackResist = 0f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0f;
				noGravity = true;
				dontTakeDamage = true;
				noTileCollide = true;
				netAlways = true;
			}
			else if (type == 401)
			{
				lifeMax = 400;
				defense = 0;
				damage = 0;
				width = 30;
				height = 30;
				aiStyle = 82;
				HitSound = SoundID.NPCHit57;
				DeathSound = SoundID.NPCDeath62;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				hide = true;
			}
			else if (type == 437)
			{
				lifeMax = 400;
				defense = 0;
				damage = 0;
				width = 54;
				height = 54;
				aiStyle = 83;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				dontTakeDamage = true;
				netAlways = true;
				chaseable = false;
			}
			else if (type == 438)
			{
				lifeMax = 400;
				defense = 0;
				damage = 0;
				width = 22;
				height = 40;
				aiStyle = 83;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				npcSlots = 0f;
				knockBackResist = 0f;
				lavaImmune = true;
				netAlways = true;
				chaseable = false;
			}
			else if (type == 439)
			{
				width = 24;
				height = 50;
				aiStyle = 84;
				damage = 50;
				defense = 42;
				lifeMax = 32000;
				knockBackResist = 0f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 10f;
				HitSound = SoundID.NPCHit55;
				DeathSound = SoundID.NPCDeath59;
				value = 100000f;
				boss = true;
				netAlways = true;
				SpawnWithHigherTime(30);
				flag = true;
			}
			else if (type == 440)
			{
				width = 24;
				height = 50;
				aiStyle = 84;
				damage = 0;
				defense = 35;
				lifeMax = 10000;
				knockBackResist = 0f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 0f;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				netAlways = true;
				SpawnWithHigherTime(30);
				flag = true;
				chaseable = false;
			}
			else if (type == 442)
			{
				width = 14;
				height = 14;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2889;
				npcSlots = 0.4f;
				rarity = 3;
			}
			else if (type == 443)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2890;
				rarity = 3;
			}
			else if (type == 444)
			{
				width = 10;
				height = 10;
				aiStyle = 65;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				catchItem = 2891;
				rarity = 3;
			}
			else if (type == 445)
			{
				width = 12;
				height = 10;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 2892;
				rarity = 3;
			}
			else if (type == 446)
			{
				width = 14;
				height = 10;
				aiStyle = 1;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				friendly = true;
				catchItem = 2893;
				npcSlots = 0.1f;
				rarity = 3;
			}
			else if (type == 447)
			{
				width = 14;
				height = 12;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath4;
				npcSlots = 0.25f;
				catchItem = 2894;
				rarity = 3;
			}
			else if (type == 448)
			{
				width = 10;
				height = 4;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.1f;
				catchItem = 2895;
				friendly = true;
				rarity = 3;
			}
			else if (type == 449)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 100f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 450)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 12;
				lifeMax = 55;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 130f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 451)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 18;
				defense = 8;
				lifeMax = 65;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 120f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 452)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 110f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 453)
			{
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 30;
				lifeMax = 250;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				npcSlots = 7f;
				rarity = 1;
			}
			else if (type == 454)
			{
				noTileCollide = true;
				npcSlots = 5f;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 80;
				defense = 10;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit56;
				DeathSound = SoundID.NPCDeath60;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
				flag = true;
				alpha = 255;
			}
			else if (type == 459)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit56;
				DeathSound = SoundID.NPCDeath60;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
				flag = true;
				alpha = 255;
				dontCountMe = true;
			}
			else if (type == 455 || type == 456 || type == 457 || type == 458)
			{
				noTileCollide = true;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 40;
				defense = 20;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit56;
				DeathSound = SoundID.NPCDeath60;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
				flag = true;
				alpha = 255;
				dontCountMe = true;
			}
			else if (type == 464)
			{
				width = 18;
				height = 20;
				aiStyle = 3;
				damage = 21;
				defense = 5;
				lifeMax = 75;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 465)
			{
				noGravity = true;
				width = 18;
				height = 20;
				aiStyle = 16;
				damage = 31;
				defense = 7;
				lifeMax = 110;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
			}
			else if (type == 470)
			{
				width = 16;
				height = 34;
				aiStyle = 3;
				damage = 21;
				defense = 5;
				lifeMax = 75;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 500f;
				buffImmune[31] = false;
			}
			else if (type == 473 || type == 474 || type == 475 || type == 476)
			{
				width = 28;
				height = 44;
				aiStyle = 87;
				damage = 90;
				defense = 34;
				lifeMax = 3500;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 30000f;
				knockBackResist = 0.1f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				rarity = 5;
			}
			else if (type == 480)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 30;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.15f;
				value = 1000f;
				rarity = 1;
			}
			else if (type == 481)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 22;
				defense = 10;
				lifeMax = 70;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.4f;
				value = 300f;
				buffImmune[31] = false;
				buffImmune[20] = true;
			}
			else if (type == 482)
			{
				width = 28;
				height = 48;
				aiStyle = 3;
				damage = 30;
				defense = 18;
				lifeMax = 110;
				HitSound = SoundID.NPCHit41;
				DeathSound = SoundID.NPCDeath43;
				knockBackResist = 0.35f;
				value = 500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 483)
			{
				npcSlots = 0.5f;
				width = 20;
				height = 30;
				aiStyle = 91;
				damage = 24;
				defense = 8;
				lifeMax = 40;
				HitSound = SoundID.NPCHit7;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath6;
				value = 1000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type >= 484 && type <= 487)
			{
				width = 10;
				height = 4;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.1f;
				catchItem = (short)(3191 + type - 484);
				friendly = true;
			}
			else if (type == 488)
			{
				width = 18;
				height = 40;
				aiStyle = 92;
				damage = 0;
				defense = 0;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit15;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0f;
				value = 0f;
				immortal = true;
				netAlways = true;
			}
			else if (type == 489)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 8;
				lifeMax = 75;
				HitSound = SoundID.NPCHit18;
				DeathSound = SoundID.NPCDeath21;
				knockBackResist = 0.4f;
				value = 150f;
				buffImmune[31] = false;
			}
			else if (type == 490)
			{
				noGravity = true;
				width = 28;
				height = 30;
				aiStyle = 22;
				damage = 28;
				defense = 14;
				lifeMax = 50;
				HitSound = SoundID.NPCHit19;
				knockBackResist = 0.6f;
				DeathSound = SoundID.NPCDeath22;
				value = 150f;
				buffImmune[31] = false;
			}
			else if (type == 491)
			{
				noGravity = true;
				width = 350;
				height = 120;
				aiStyle = 93;
				damage = 0;
				defense = 100;
				lifeMax = 50;
				HitSound = SoundID.NPCHit19;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath22;
				value = 0f;
				flag = true;
				dontTakeDamage = true;
				netAlways = true;
			}
			else if (type == 492)
			{
				lifeMax = 2000;
				defense = 20;
				damage = 30;
				width = 30;
				height = 30;
				aiStyle = 75;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				value = 0f;
				npcSlots = 1f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				hide = true;
				netAlways = true;
			}
			else if (type >= 494 && type <= 495)
			{
				width = 28;
				height = 22;
				aiStyle = 3;
				damage = 28;
				defense = 6;
				lifeMax = 50;
				HitSound = SoundID.NPCHit33;
				DeathSound = SoundID.NPCDeath36;
				value = 120f;
			}
			else if (type >= 496 && type <= 497)
			{
				width = 28;
				height = 22;
				aiStyle = 39;
				damage = 16;
				defense = 12;
				lifeMax = 50;
				HitSound = SoundID.NPCHit38;
				DeathSound = SoundID.NPCDeath41;
				knockBackResist = 0.75f;
				value = 120f;
			}
			else if (type >= 498 && type <= 506)
			{
				width = 24;
				height = 44;
				aiStyle = 3;
				damage = 18;
				defense = 10;
				lifeMax = 65;
				HitSound = SoundID.NPCHit50;
				DeathSound = SoundID.NPCDeath53;
				knockBackResist = 0.45f;
				value = 120f;
				buffImmune[31] = false;
			}
			else if (type == 441)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 513)
			{
				npcSlots = 4f;
				width = 22;
				height = 22;
				aiStyle = 6;
				damage = 18;
				defense = 0;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 130f;
			}
			else if (type == 514)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 7;
				defense = 16;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 130f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 515)
			{
				width = 22;
				height = 22;
				aiStyle = 6;
				netAlways = true;
				damage = 7;
				defense = 20;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 130f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 510)
			{
				npcSlots = 5f;
				width = 34;
				height = 34;
				aiStyle = 6;
				damage = 58;
				defense = 18;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
			}
			else if (type == 511)
			{
				width = 34;
				height = 34;
				aiStyle = 6;
				netAlways = true;
				damage = 54;
				defense = 28;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 512)
			{
				width = 34;
				height = 34;
				aiStyle = 6;
				netAlways = true;
				damage = 50;
				defense = 34;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = 700f;
				dontCountMe = true;
				npcSlots = 0f;
			}
			else if (type == 508)
			{
				width = 50;
				height = 31;
				aiStyle = 3;
				damage = 38;
				defense = 22;
				lifeMax = 110;
				HitSound = SoundID.NPCHit31;
				DeathSound = SoundID.NPCDeath34;
				knockBackResist = 0.4f;
				value = 175f;
				buffImmune[31] = false;
			}
			else if (type == 509)
			{
				width = 40;
				height = 31;
				aiStyle = 44;
				damage = 34;
				defense = 18;
				lifeMax = 90;
				knockBackResist = 0.3f;
				HitSound = SoundID.NPCHit32;
				DeathSound = SoundID.NPCDeath35;
				value = 1775f;
				buffImmune[31] = false;
			}
			else if (type == 580)
			{
				width = 26;
				height = 26;
				aiStyle = 3;
				damage = 25;
				defense = 10;
				lifeMax = 80;
				HitSound = SoundID.NPCHit31;
				DeathSound = SoundID.NPCDeath34;
				knockBackResist = 0.5f;
				value = 80f;
				buffImmune[31] = false;
				npcSlots = 0.8f;
			}
			else if (type == 581)
			{
				width = 30;
				height = 22;
				aiStyle = 44;
				damage = 29;
				defense = 8;
				lifeMax = 60;
				knockBackResist = 0.5f;
				HitSound = SoundID.NPCHit32;
				DeathSound = SoundID.NPCDeath35;
				value = 90f;
				buffImmune[31] = false;
				npcSlots = 0.8f;
			}
			else if (type >= 524 && type <= 527)
			{
				width = 24;
				height = 44;
				aiStyle = 3;
				damage = 50;
				defense = 26;
				lifeMax = 180;
				HitSound = SoundID.NPCHit37;
				DeathSound = SoundID.NPCDeath40;
				knockBackResist = 0.6f;
				value = 500f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
				switch (type - 524)
				{
				case 1:
					lifeMax += 70;
					defense += 4;
					damage += 10;
					knockBackResist -= 0.1f;
					value += 150f;
					break;
				case 2:
					lifeMax += 40;
					defense += 6;
					damage += 14;
					knockBackResist -= 0.1f;
					value += 150f;
					break;
				case 3:
					lifeMax += 120;
					defense += 6;
					damage += 4;
					knockBackResist -= 0.2f;
					value += 250f;
					break;
				}
			}
			else if (type >= 528 && type <= 529)
			{
				width = 24;
				height = 44;
				aiStyle = 3;
				damage = 52;
				defense = 28;
				lifeMax = 350;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.35f;
				value = 600f;
				buffImmune[31] = false;
			}
			else if (type == 530)
			{
				width = 50;
				height = 20;
				aiStyle = 3;
				damage = 66;
				defense = 24;
				lifeMax = 320;
				HitSound = SoundID.NPCHit13;
				DeathSound = SoundID.NPCDeath19;
				knockBackResist = 0.5f;
				value = 600f;
				SpawnWithHigherTime(2);
				buffImmune[20] = true;
				buffImmune[70] = true;
			}
			else if (type == 531)
			{
				noGravity = true;
				width = 36;
				height = 36;
				aiStyle = 40;
				damage = 66;
				defense = 24;
				lifeMax = 320;
				HitSound = SoundID.NPCHit13;
				DeathSound = SoundID.NPCDeath19;
				knockBackResist = 0.5f;
				value = 600f;
				SpawnWithHigherTime(2);
				buffImmune[20] = true;
				buffImmune[70] = true;
			}
			else if (type == 532)
			{
				width = 32;
				height = 31;
				aiStyle = 3;
				damage = 65;
				defense = 34;
				lifeMax = 270;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 800f;
				buffImmune[31] = false;
				npcSlots = 0.75f;
			}
			else if (type == 533)
			{
				width = 28;
				height = 62;
				aiStyle = 8;
				damage = 40;
				defense = 20;
				lifeMax = 220;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0f;
				value = 1200f;
				npcSlots = 2f;
				flag = true;
			}
			else if (type == 493)
			{
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				npcSlots = 0f;
			}
			else if (type == 402)
			{
				noTileCollide = true;
				npcSlots = 1f;
				width = 32;
				height = 32;
				aiStyle = 6;
				netAlways = true;
				damage = 80;
				defense = 10;
				lifeMax = 1200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0f;
				value = 0f;
				scale = 1f;
				flag = true;
			}
			else if (type == 405)
			{
				width = 44;
				height = 44;
				aiStyle = 85;
				damage = 120;
				defense = 50;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				noGravity = true;
				buffImmune[31] = true;
				npcSlots = 2f;
			}
			else if (type == 406)
			{
				width = 22;
				height = 22;
				aiStyle = 95;
				damage = 70;
				defense = 0;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
				noGravity = true;
				buffImmune[31] = true;
			}
			else if (type == 411)
			{
				width = 22;
				height = 56;
				aiStyle = 3;
				damage = 80;
				defense = 34;
				lifeMax = 700;
				HitSound = SoundID.NPCHit6;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
				buffImmune[31] = false;
			}
			else if (type == 409)
			{
				width = 34;
				height = 42;
				aiStyle = 3;
				damage = 70;
				defense = 40;
				lifeMax = 800;
				HitSound = SoundID.NPCHit6;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
				buffImmune[31] = false;
				npcSlots = 3f;
			}
			else if (type == 410)
			{
				width = 22;
				height = 22;
				aiStyle = 26;
				damage = 80;
				defense = 10;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0.3f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
			}
			else if (type == 407)
			{
				width = 40;
				height = 60;
				aiStyle = 96;
				damage = 70;
				defense = 38;
				lifeMax = 1500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0.03f;
				buffImmune[31] = true;
				npcSlots = 3f;
			}
			else if (type == 507)
			{
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				npcSlots = 0f;
			}
			else if (type == 423)
			{
				width = 50;
				height = 44;
				aiStyle = 26;
				damage = 90;
				defense = 46;
				lifeMax = 850;
				HitSound = SoundID.NPCHit6;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.2f;
				flag = true;
				npcSlots = 1f;
			}
			else if (type == 421)
			{
				width = 44;
				height = 44;
				aiStyle = 85;
				damage = 70;
				defense = 34;
				lifeMax = 330;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				noGravity = true;
				buffImmune[31] = true;
				npcSlots = 1f;
			}
			else if (type == 424)
			{
				width = 22;
				height = 56;
				aiStyle = 3;
				damage = 80;
				defense = 30;
				lifeMax = 700;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0.6f;
				buffImmune[31] = false;
				npcSlots = 2f;
			}
			else if (type == 420)
			{
				width = 40;
				height = 40;
				aiStyle = 97;
				damage = 75;
				defense = 20;
				lifeMax = 1300;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				noTileCollide = true;
				noGravity = true;
				npcSlots = 3f;
			}
			else if (type == 422)
			{
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				npcSlots = 0f;
			}
			else if (type == 425)
			{
				width = 30;
				height = 56;
				aiStyle = 3;
				damage = 100;
				defense = 40;
				lifeMax = 800;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.4f;
				buffImmune[31] = false;
			}
			else if (type == 429)
			{
				width = 22;
				height = 56;
				aiStyle = 3;
				damage = 90;
				defense = 34;
				lifeMax = 700;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath5;
				knockBackResist = 0.6f;
				buffImmune[31] = false;
				npcSlots = 2f;
			}
			else if (type == 428)
			{
				width = 24;
				height = 26;
				aiStyle = 3;
				damage = 50;
				defense = 6;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
			}
			else if (type == 427)
			{
				width = 40;
				height = 28;
				aiStyle = 3;
				damage = 75;
				defense = 20;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
			}
			else if (type == 426)
			{
				width = 50;
				height = 62;
				aiStyle = 3;
				damage = 100;
				defense = 44;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.3f;
				buffImmune[31] = false;
			}
			else if (type == 517)
			{
				lifeMax = 20000;
				defense = 20;
				damage = 0;
				width = 130;
				height = 270;
				aiStyle = 94;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				npcSlots = 0f;
			}
			else if (type == 412)
			{
				width = 20;
				height = 20;
				aiStyle = 6;
				netAlways = true;
				damage = 150;
				defense = 1000;
				lifeMax = 10000;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath22;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				dontTakeDamage = true;
				npcSlots = 2f;
			}
			else if (type == 413)
			{
				width = 20;
				height = 20;
				aiStyle = 6;
				netAlways = true;
				damage = 100;
				defense = 1000;
				lifeMax = 10000;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath22;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				dontCountMe = true;
				dontTakeDamage = true;
				npcSlots = 0f;
			}
			else if (type == 414)
			{
				width = 20;
				height = 20;
				aiStyle = 6;
				netAlways = true;
				damage = 50;
				defense = 0;
				lifeMax = 10000;
				HitSound = SoundID.NPCHit8;
				DeathSound = SoundID.NPCDeath22;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				dontCountMe = true;
				takenDamageMultiplier = 10f;
				npcSlots = 0f;
			}
			else if (type == 415)
			{
				lifeMax = 800;
				defense = 32;
				damage = 55;
				width = 60;
				height = 40;
				aiStyle = 3;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.2f;
			}
			else if (type == 416)
			{
				damage = 80;
				defense = 28;
				lifeMax = 800;
				width = 18;
				height = 40;
				aiStyle = 75;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.2f;
			}
			else if (type == 518)
			{
				lifeMax = 1000;
				defense = 28;
				damage = 80;
				width = 22;
				height = 56;
				aiStyle = 3;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
			}
			else if (type == 417)
			{
				npcSlots = 2f;
				width = 46;
				height = 52;
				aiStyle = 39;
				damage = 80;
				defense = 34;
				lifeMax = 700;
				HitSound = SoundID.NPCHit7;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath5;
			}
			else if (type == 418)
			{
				width = 38;
				height = 38;
				aiStyle = 74;
				damage = 70;
				defense = 26;
				lifeMax = 600;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.2f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
			}
			else if (type == 419)
			{
				lifeMax = 800;
				defense = 30;
				damage = 90;
				width = 22;
				height = 56;
				aiStyle = 3;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.4f;
			}
			else if (type == 516)
			{
				width = 26;
				height = 26;
				aiStyle = 9;
				damage = 100;
				defense = 0;
				lifeMax = 1;
				HitSound = null;
				DeathSound = null;
				noGravity = true;
				noTileCollide = false;
				alpha = 0;
				knockBackResist = 0f;
			}
			else if (type == 519)
			{
				width = 26;
				height = 26;
				aiStyle = 99;
				damage = 120;
				defense = 0;
				lifeMax = 1;
				HitSound = null;
				DeathSound = null;
				noGravity = true;
				noTileCollide = false;
				alpha = 0;
				knockBackResist = 0f;
			}
			else if (type == 162)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 18;
				lifeMax = 350;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.3f;
				value = 600f;
				buffImmune[31] = false;
			}
			else if (type == 166)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 26;
				lifeMax = 450;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.2f;
				value = 1000f;
				buffImmune[31] = false;
				buffImmune[20] = true;
			}
			else if (type == 253)
			{
				noGravity = true;
				noTileCollide = true;
				width = 24;
				height = 44;
				aiStyle = 22;
				damage = 80;
				defense = 22;
				lifeMax = 700;
				HitSound = SoundID.NPCHit49;
				DeathSound = SoundID.NPCDeath51;
				alpha = 100;
				value = 1500f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.6f;
			}
			else if (type == 158)
			{
				npcSlots = 2f;
				width = 22;
				height = 22;
				aiStyle = 14;
				damage = 60;
				defense = 32;
				lifeMax = 750;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.75f;
				DeathSound = SoundID.NPCDeath6;
				value = 5000f;
				buffImmune[31] = false;
			}
			else if (type == 159)
			{
				npcSlots = 2f;
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 80;
				defense = 24;
				lifeMax = 750;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.4f;
				value = 5000f;
				buffImmune[31] = false;
			}
			else if (type == 460)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 30;
				lifeMax = 700;
				HitSound = SoundID.NPCHit7;
				DeathSound = SoundID.NPCDeath17;
				knockBackResist = 0.25f;
				value = 1000f;
				buffImmune[31] = false;
			}
			else if (type == 461)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 22;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 1000f;
			}
			else if (type == 462)
			{
				width = 20;
				height = 24;
				aiStyle = 3;
				damage = 70;
				defense = 14;
				lifeMax = 270;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.7f;
				value = 600f;
				buffImmune[31] = false;
				npcSlots = 0.5f;
			}
			else if (type == 463)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 100;
				defense = 34;
				lifeMax = 4000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.1f;
				value = 3000f;
			}
			else if (type == 466)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 70;
				defense = 40;
				lifeMax = 550;
				HitSound = SoundID.NPCHit48;
				DeathSound = SoundID.NPCDeath50;
				knockBackResist = 0.5f;
				value = 1500f;
			}
			else if (type == 467)
			{
				width = 22;
				height = 22;
				aiStyle = 85;
				damage = 100;
				defense = 80;
				lifeMax = 350;
				HitSound = SoundID.NPCHit34;
				DeathSound = SoundID.NPCDeath37;
				value = 900f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				knockBackResist = 0.7f;
				noGravity = true;
			}
			else if (type == 469)
			{
				width = 38;
				height = 26;
				aiStyle = 3;
				damage = 68;
				defense = 28;
				lifeMax = 600;
				HitSound = SoundID.NPCHit47;
				DeathSound = SoundID.NPCDeath49;
				knockBackResist = 0.35f;
				value = 1300f;
			}
			else if (type == 468)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 65;
				defense = 24;
				lifeMax = 500;
				HitSound = SoundID.NPCHit35;
				DeathSound = SoundID.NPCDeath38;
				knockBackResist = 0.6f;
				value = 1300f;
			}
			else if (type == 477)
			{
				noGravity = true;
				netAlways = true;
				width = 80;
				height = 50;
				aiStyle = 88;
				damage = 80;
				defense = 30;
				lifeMax = 6000;
				HitSound = SoundID.NPCHit44;
				DeathSound = SoundID.NPCDeath46;
				value = 50000f;
				knockBackResist = 0.2f;
				buffImmune[20] = true;
				rarity = 1;
			}
			else if (type == 478)
			{
				width = 34;
				height = 34;
				aiStyle = 89;
				damage = 0;
				defense = 30;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0.7f;
				flag = true;
				npcSlots = 0f;
			}
			else if (type == 479)
			{
				width = 46;
				height = 30;
				aiStyle = 90;
				damage = 50;
				defense = 14;
				lifeMax = 700;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 0f;
				npcSlots = 0.1f;
			}
			else if (type == 26)
			{
				scale = 0.9f;
				width = 18;
				height = 38;
				aiStyle = 3;
				damage = 12;
				defense = 4;
				lifeMax = 60;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.8f;
				value = 100f;
				buffImmune[31] = false;
			}
			else if (type == 27)
			{
				scale = 0.95f;
				width = 18;
				height = 38;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 80;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.7f;
				value = 200f;
				buffImmune[31] = false;
			}
			else if (type == 28)
			{
				scale = 1.1f;
				width = 18;
				height = 38;
				aiStyle = 3;
				damage = 25;
				defense = 8;
				lifeMax = 110;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				value = 150f;
				buffImmune[31] = false;
			}
			else if (type == 29)
			{
				width = 18;
				height = 38;
				aiStyle = 8;
				damage = 20;
				defense = 2;
				lifeMax = 40;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.6f;
				value = 200f;
			}
			else if (type == 30)
			{
				width = 16;
				height = 16;
				aiStyle = 9;
				damage = 20;
				defense = 0;
				lifeMax = 1;
				HitSound = SoundID.NPCHit3;
				DeathSound = SoundID.NPCDeath3;
				noGravity = true;
				noTileCollide = true;
				alpha = 100;
				knockBackResist = 0f;
			}
			else if (type == 111)
			{
				scale = 0.95f;
				width = 18;
				height = 38;
				aiStyle = 3;
				damage = 20;
				defense = 6;
				lifeMax = 80;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.7f;
				value = 200f;
				buffImmune[31] = false;
			}
			else if (type == 471)
			{
				width = 18;
				height = 38;
				aiStyle = 3;
				damage = 80;
				defense = 26;
				lifeMax = 2000;
				HitSound = SoundID.NPCHit40;
				DeathSound = SoundID.NPCDeath42;
				knockBackResist = 0.15f;
				value = 5000f;
				flag = true;
				rarity = 1;
			}
			else if (type == 472)
			{
				width = 40;
				height = 24;
				aiStyle = 86;
				damage = 50;
				defense = 18;
				lifeMax = 180;
				HitSound = SoundID.NPCHit52;
				DeathSound = SoundID.NPCDeath55;
				knockBackResist = 0f;
				value = 0f;
				flag = true;
				npcSlots = 0.1f;
			}
			else if (type == 520)
			{
				width = 34;
				height = 110;
				aiStyle = 3;
				damage = 60;
				defense = 40;
				lifeMax = 2000;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath14;
				knockBackResist = 0f;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 521)
			{
				width = 60;
				height = 60;
				aiStyle = 86;
				damage = 90;
				defense = 30;
				lifeMax = 2000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0f;
				flag = true;
			}
			else if (type == 522)
			{
				width = 26;
				height = 26;
				aiStyle = 100;
				damage = 120;
				defense = 0;
				lifeMax = 1;
				HitSound = null;
				DeathSound = null;
				noGravity = true;
				noTileCollide = true;
				alpha = 0;
				knockBackResist = 0f;
				chaseable = false;
			}
			else if (type == 523)
			{
				width = 42;
				height = 42;
				aiStyle = 101;
				damage = 30;
				defense = 0;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				noGravity = true;
				noTileCollide = true;
				alpha = 0;
				knockBackResist = 0f;
				chaseable = false;
				alpha = 255;
				canGhostHeal = false;
			}
			else if (type == 534)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.3f;
				value = 0f;
				buffImmune[31] = false;
				lavaImmune = true;
				netAlways = true;
				rarity = 1;
			}
			else if (type == 535)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 14;
				defense = 5;
				lifeMax = 50;
				scale = 1.1f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 0;
				value = 40f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 536)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 8;
				lifeMax = 200;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 1000f;
				buffImmune[31] = false;
				rarity = 2;
			}
			else if (type == 537)
			{
				npcSlots = 2f;
				width = 30;
				height = 24;
				aiStyle = 1;
				damage = 15;
				defense = 5;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				alpha = 50;
				color = new Color(255, 250, 0, 0) * 0.2f;
				value = 75f;
				knockBackResist = 0.7f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 538)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 3563;
			}
			else if (type == 539)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 3564;
				rarity = 3;
			}
			else if (type == 541)
			{
				width = 30;
				height = 76;
				aiStyle = 102;
				damage = 40;
				defense = 30;
				lifeMax = 5000;
				HitSound = SoundID.NPCHit23;
				DeathSound = SoundID.NPCDeath39;
				knockBackResist = 0.05f;
				value = Item.buyPrice(0, 1, 50);
				buffImmune[20] = true;
				buffImmune[44] = true;
				rarity = 2;
			}
			else if (type == 542)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 103;
				damage = 50;
				defense = 20;
				lifeMax = 360;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 400f;
				knockBackResist = 0.9f;
				behindTiles = true;
			}
			else if (type == 543)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 103;
				damage = 60;
				defense = 24;
				lifeMax = 380;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 400f;
				knockBackResist = 0.8f;
				behindTiles = true;
			}
			else if (type == 544)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 103;
				damage = 64;
				defense = 22;
				lifeMax = 400;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 400f;
				knockBackResist = 0.8f;
				behindTiles = true;
			}
			else if (type == 545)
			{
				noGravity = true;
				width = 100;
				height = 24;
				aiStyle = 103;
				damage = 54;
				defense = 26;
				lifeMax = 450;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 400f;
				knockBackResist = 0.7f;
				behindTiles = true;
			}
			else if (type == 546)
			{
				width = 30;
				height = 30;
				aiStyle = 26;
				damage = 30;
				defense = 6;
				lifeMax = 50;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 0.8f;
				value = 100f;
			}
			else if (type == 547)
			{
				width = 16;
				height = 16;
				aiStyle = 104;
				defense = 10;
				lifeMax = 10;
				HitSound = SoundID.NPCHit11;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 1f;
				noGravity = true;
				noTileCollide = true;
			}
			else if (type == 548)
			{
				width = 40;
				height = 40;
				aiStyle = 105;
				defense = 14;
				lifeMax = 1000;
				HitSound = SoundID.DD2_CrystalCartImpact;
				DeathSound = SoundID.NPCDeath15;
				knockBackResist = 0f;
				friendly = true;
				npcSlots = 0f;
				hide = true;
				if (Main.hardMode && downedMechBossAny)
				{
					defense = 18;
					lifeMax = 3000;
				}
				if (downedGolemBoss && Main.hardMode)
				{
					defense = 20;
					lifeMax = 5000;
				}
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 549)
			{
				lifeMax = 5;
				defense = 20;
				damage = 0;
				width = 78;
				height = 130;
				aiStyle = 106;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				value = 0f;
				knockBackResist = 0f;
				noGravity = true;
				noTileCollide = true;
				flag = true;
				npcSlots = 0f;
				behindTiles = true;
				dontTakeDamage = true;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 552)
			{
				lifeMax = 30;
				defense = 14;
				damage = 18;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinHurt;
				DeathSound = SoundID.DD2_GoblinDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 553)
			{
				lifeMax = 170;
				defense = 20;
				damage = 46;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinHurt;
				DeathSound = SoundID.DD2_GoblinDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 554)
			{
				lifeMax = 560;
				defense = 28;
				damage = 70;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinHurt;
				DeathSound = SoundID.DD2_GoblinDeath;
				knockBackResist = 0.15f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 561)
			{
				lifeMax = 60;
				defense = 18;
				damage = 30;
				width = 26;
				height = 52;
				aiStyle = 107;
				HitSound = SoundID.DD2_JavelinThrowersHurt;
				DeathSound = SoundID.DD2_JavelinThrowersDeath;
				knockBackResist = 0.1f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 562)
			{
				lifeMax = 300;
				defense = 28;
				damage = 60;
				width = 26;
				height = 52;
				aiStyle = 107;
				HitSound = SoundID.DD2_JavelinThrowersHurt;
				DeathSound = SoundID.DD2_JavelinThrowersDeath;
				knockBackResist = 0.1f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 563)
			{
				lifeMax = 1000;
				defense = 38;
				damage = 80;
				width = 26;
				height = 52;
				aiStyle = 107;
				HitSound = SoundID.DD2_JavelinThrowersHurt;
				DeathSound = SoundID.DD2_JavelinThrowersDeath;
				knockBackResist = 0.05f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 555)
			{
				lifeMax = 50;
				defense = 16;
				damage = 26;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinBomberHurt;
				DeathSound = SoundID.DD2_GoblinBomberDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 556)
			{
				lifeMax = 200;
				defense = 26;
				damage = 55;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinBomberHurt;
				DeathSound = SoundID.DD2_GoblinBomberDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 557)
			{
				lifeMax = 700;
				defense = 34;
				damage = 75;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_GoblinBomberHurt;
				DeathSound = SoundID.DD2_GoblinBomberDeath;
				knockBackResist = 0.15f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 558)
			{
				width = 38;
				height = 38;
				aiStyle = 108;
				damage = 30;
				defense = 4;
				lifeMax = 60;
				HitSound = SoundID.DD2_WyvernHurt;
				DeathSound = SoundID.DD2_WyvernDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.2f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 559)
			{
				width = 38;
				height = 38;
				aiStyle = 108;
				damage = 75;
				defense = 16;
				lifeMax = 180;
				HitSound = SoundID.DD2_WyvernHurt;
				DeathSound = SoundID.DD2_WyvernDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.2f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 560)
			{
				width = 38;
				height = 38;
				aiStyle = 108;
				damage = 100;
				defense = 30;
				lifeMax = 600;
				HitSound = SoundID.DD2_WyvernHurt;
				DeathSound = SoundID.DD2_WyvernDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.05f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 550)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 576)
			{
				lifeMax = 5000;
				defense = 34;
				damage = 70;
				width = 96;
				height = 124;
				aiStyle = 107;
				HitSound = SoundID.DD2_OgreHurt;
				DeathSound = SoundID.DD2_OgreDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 577)
			{
				lifeMax = 13000;
				defense = 40;
				damage = 90;
				width = 96;
				height = 124;
				aiStyle = 107;
				HitSound = SoundID.DD2_OgreHurt;
				DeathSound = SoundID.DD2_OgreDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 568)
			{
				lifeMax = 500;
				defense = 30;
				damage = 50;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_WitherBeastHurt;
				DeathSound = SoundID.DD2_WitherBeastDeath;
				knockBackResist = 0.15f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 569)
			{
				lifeMax = 1400;
				defense = 40;
				damage = 80;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_WitherBeastHurt;
				DeathSound = SoundID.DD2_WitherBeastDeath;
				knockBackResist = 0.05f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 566)
			{
				lifeMax = 25;
				defense = 12;
				damage = 18;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_SkeletonHurt;
				DeathSound = SoundID.DD2_SkeletonDeath;
				knockBackResist = 0.3f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 567)
			{
				lifeMax = 480;
				defense = 22;
				damage = 70;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_SkeletonHurt;
				DeathSound = SoundID.DD2_SkeletonDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 572)
			{
				lifeMax = 260;
				defense = 26;
				damage = 60;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_KoboldHurt;
				DeathSound = SoundID.DD2_KoboldDeath;
				knockBackResist = 0.2f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 573)
			{
				lifeMax = 800;
				defense = 32;
				damage = 80;
				width = 18;
				height = 40;
				aiStyle = 107;
				HitSound = SoundID.DD2_KoboldHurt;
				DeathSound = SoundID.DD2_KoboldDeath;
				knockBackResist = 0.1f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 570)
			{
				lifeMax = 900;
				defense = 30;
				damage = 60;
				width = 42;
				height = 58;
				aiStyle = 107;
				HitSound = SoundID.DD2_DrakinHurt;
				DeathSound = SoundID.DD2_DrakinDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 571)
			{
				lifeMax = 3000;
				defense = 40;
				damage = 90;
				width = 42;
				height = 58;
				aiStyle = 107;
				HitSound = SoundID.DD2_DrakinHurt;
				DeathSound = SoundID.DD2_DrakinDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 564)
			{
				lifeMax = 800;
				defense = 18;
				damage = 40;
				width = 34;
				height = 62;
				aiStyle = 109;
				HitSound = SoundID.DD2_DarkMageHurt;
				DeathSound = SoundID.DD2_DarkMageDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				noGravity = true;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 565)
			{
				lifeMax = 4000;
				defense = 38;
				damage = 90;
				width = 34;
				height = 62;
				aiStyle = 109;
				HitSound = SoundID.DD2_DarkMageHurt;
				DeathSound = SoundID.DD2_DarkMageDeath;
				knockBackResist = 0f;
				value = 0f;
				npcSlots = 0f;
				noGravity = true;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 574)
			{
				width = 38;
				height = 38;
				aiStyle = 108;
				damage = 50;
				defense = 16;
				lifeMax = 170;
				HitSound = SoundID.DD2_KoboldFlyerHurt;
				DeathSound = SoundID.DD2_KoboldFlyerDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.4f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 575)
			{
				width = 38;
				height = 38;
				aiStyle = 108;
				damage = 80;
				defense = 32;
				lifeMax = 580;
				HitSound = SoundID.DD2_KoboldFlyerHurt;
				DeathSound = SoundID.DD2_KoboldFlyerDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.25f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 551)
			{
				damage = 80;
				defense = 38;
				lifeMax = 50000;
				width = 190;
				height = 90;
				aiStyle = 110;
				HitSound = SoundID.DD2_BetsyHurt;
				DeathSound = SoundID.DD2_BetsyDeath;
				knockBackResist = 0f;
				value = 0f;
				noGravity = true;
				noTileCollide = true;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 578)
			{
				width = 30;
				height = 24;
				aiStyle = 111;
				damage = 80;
				defense = 36;
				lifeMax = 500;
				HitSound = SoundID.DD2_LightningBugHurt;
				DeathSound = SoundID.DD2_LightningBugDeath;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0.8f;
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
			}
			else if (type == 579)
			{
				friendly = true;
				width = 34;
				height = 8;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				scale = 1f;
				rarity = 1;
			}
			else if (type == 582)
			{
				width = 18;
				height = 18;
				aiStyle = 3;
				damage = 12;
				defense = 4;
				lifeMax = 45;
				HitSound = SoundID.NPCHit31;
				DeathSound = SoundID.NPCDeath34;
				knockBackResist = 0.75f;
				value = 40f;
				buffImmune[31] = false;
				npcSlots = 0.4f;
			}
			else if (type == 583 || type == 584 || type == 585)
			{
				width = 18;
				height = 20;
				aiStyle = 112;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				switch (type)
				{
				case 583:
					catchItem = 4068;
					break;
				case 584:
					catchItem = 4069;
					break;
				case 585:
					catchItem = 4070;
					break;
				}
				noGravity = true;
				rarity = 2;
				for (int num2 = 0; num2 < 323; num2++)
				{
					buffImmune[num2] = true;
				}
			}
			else if (type == 586)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 40;
				defense = 20;
				lifeMax = 400;
				HitSound = SoundID.NPCHit18;
				DeathSound = SoundID.NPCDeath21;
				knockBackResist = 0f;
				value = 1000f;
				buffImmune[31] = false;
				alpha = 255;
				rarity = 1;
			}
			else if (type == 587)
			{
				width = 32;
				height = 18;
				aiStyle = 44;
				damage = 35;
				defense = 18;
				lifeMax = 300;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0f;
				DeathSound = SoundID.NPCDeath1;
				value = 1000f;
				buffImmune[31] = false;
				alpha = 255;
				rarity = 1;
			}
			else if (type == 588)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 589)
			{
				friendly = true;
				width = 18;
				height = 34;
				aiStyle = 0;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				rarity = 1;
			}
			else if (type == 590 || type == 591)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
				buffImmune[31] = false;
			}
			else if (type == 592)
			{
				noGravity = true;
				width = 20;
				height = 18;
				aiStyle = 16;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				catchItem = 4274;
				rarity = 3;
			}
			else if (type == 593)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4274;
				rarity = 3;
			}
			else if (type == 594)
			{
				width = 20;
				height = 20;
				aiStyle = 113;
				damage = 0;
				defense = 0;
				knockBackResist = 0.3f;
				lifeMax = 1;
				DeathSound = SoundID.NPCDeath63;
				value = 0f;
				noGravity = true;
			}
			else if (type >= 595 && type <= 601)
			{
				timeLeft *= 3;
				width = 10;
				height = 10;
				aiStyle = 114;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				int num3 = type;
				if (num3 == 601)
				{
					rarity = 3;
				}
				catchItem = (short)(type - 595 + 4334);
			}
			else if (type == 602)
			{
				width = 22;
				height = 26;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4359;
			}
			else if (type == 603)
			{
				width = 28;
				height = 22;
				aiStyle = 68;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4359;
			}
			else if (type == 604 || type == 605)
			{
				width = 10;
				height = 10;
				aiStyle = 115;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				int num3 = type;
				if (num3 == 605)
				{
					rarity = 3;
				}
				catchItem = (short)(type - 604 + 4361);
			}
			else if (type == 606)
			{
				width = 10;
				height = 4;
				aiStyle = 66;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.1f;
				catchItem = 4363;
				friendly = true;
			}
			else if (type == 607)
			{
				noGravity = true;
				width = 20;
				height = 18;
				aiStyle = 16;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				catchItem = 4373;
			}
			else if (type == 608)
			{
				width = 22;
				height = 26;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4374;
			}
			else if (type == 609)
			{
				width = 28;
				height = 22;
				aiStyle = 68;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4374;
			}
			else if (type == 610)
			{
				width = 14;
				height = 12;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath4;
				npcSlots = 0.25f;
				catchItem = 4375;
			}
			else if (type == 611)
			{
				width = 18;
				height = 34;
				aiStyle = 24;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath1;
				catchItem = 4395;
				npcSlots = 0.4f;
			}
			else if (type == 612 || type == 613)
			{
				width = 10;
				height = 10;
				aiStyle = 116;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				int num3 = type;
				if (num3 == 613)
				{
					rarity = 3;
				}
				catchItem = (short)(type - 612 + 4418);
				waterMovementSpeed = 1f;
				lavaMovementSpeed = 1f;
				honeyMovementSpeed = 1f;
			}
			else if (type == 614)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = null;
				catchItem = 1338;
			}
			else if (type == 615)
			{
				noGravity = true;
				width = 20;
				height = 18;
				aiStyle = 16;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 616 || type == 617)
			{
				width = 22;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
				catchItem = (short)(type - 616 + 4464);
			}
			else if (type == 618)
			{
				noGravity = true;
				width = 100;
				height = 100;
				aiStyle = 117;
				damage = 55;
				defense = 24;
				lifeMax = 7000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				value = Item.buyPrice(0, 2);
				noTileCollide = true;
				rarity = 1;
			}
			else if (type == 619)
			{
				npcSlots = 1f;
				width = 44;
				height = 44;
				aiStyle = 5;
				damage = 60;
				defense = 16;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				knockBackResist = 0f;
				value = 500f;
				alpha = 255;
			}
			else if (type == 620)
			{
				lifeMax = 5000;
				defense = 30;
				damage = 70;
				width = 34;
				height = 58;
				aiStyle = 107;
				HitSound = SoundID.DD2_DrakinHurt;
				DeathSound = SoundID.DD2_DrakinDeath;
				knockBackResist = 0f;
				value = Item.buyPrice(0, 0, 75);
				npcSlots = 0f;
				lavaImmune = true;
				LazySetLiquidMovementDD2();
				netAlways = true;
				alpha = 255;
				rarity = 1;
			}
			else if (type == 621)
			{
				npcSlots = 5f;
				width = 28;
				height = 28;
				aiStyle = 6;
				damage = 90;
				defense = 0;
				lifeMax = 6000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				value = Item.buyPrice(0, 0, 75);
				alpha = 255;
				rarity = 1;
			}
			else if (type == 622)
			{
				width = 28;
				height = 28;
				aiStyle = 6;
				netAlways = true;
				damage = 60;
				defense = 30;
				lifeMax = 6000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				dontCountMe = true;
				npcSlots = 0f;
				alpha = 255;
			}
			else if (type == 623)
			{
				width = 28;
				height = 28;
				aiStyle = 6;
				netAlways = true;
				damage = 50;
				defense = 40;
				lifeMax = 6000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				behindTiles = true;
				dontCountMe = true;
				npcSlots = 0f;
				alpha = 255;
			}
			else if (type == 624)
			{
				width = 14;
				height = 30;
				aiStyle = 3;
				damage = 10;
				defense = 0;
				lifeMax = 25;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 1f;
				rarity = 1;
			}
			else if (type == 625)
			{
				width = 22;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 626 || type == 627)
			{
				width = 16;
				height = 20;
				aiStyle = 118;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 1f;
				int num3 = type;
				if (num3 == 627)
				{
					rarity = 3;
				}
				catchItem = 4480;
				if (type == 627)
				{
					catchItem = 4482;
				}
			}
			else if (type == 628)
			{
				width = 22;
				height = 40;
				aiStyle = 119;
				damage = 15;
				defense = 0;
				lifeMax = 50;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0f;
				value = 50f;
			}
			else if (type == 629)
			{
				width = 24;
				height = 24;
				aiStyle = 25;
				damage = 80;
				defense = 30;
				lifeMax = 500;
				HitSound = SoundID.NPCHit4;
				DeathSound = SoundID.NPCDeath6;
				value = 100000f;
				knockBackResist = 0.3f;
				buffImmune[20] = true;
				buffImmune[24] = true;
				buffImmune[39] = true;
				rarity = 4;
			}
			else if (type == 630)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 60;
				defense = 18;
				lifeMax = 180;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				value = 700f;
				buffImmune[31] = false;
			}
			else if (type == 631)
			{
				width = 36;
				height = 48;
				scale = 1.1f;
				aiStyle = 3;
				damage = 85;
				defense = 35;
				lifeMax = 1000;
				HitSound = SoundID.NPCHit41;
				DeathSound = SoundID.NPCDeath43;
				knockBackResist = 0.1f;
				value = 50000f;
				buffImmune[20] = true;
				buffImmune[24] = true;
			}
			else if (type == 632)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 14;
				defense = 6;
				lifeMax = 45;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 60f;
				buffImmune[31] = false;
			}
			else if (type == 633)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 40;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.5f;
			}
			else if (type == 634)
			{
				npcSlots = 0.5f;
				width = 22;
				height = 18;
				aiStyle = 14;
				damage = 13;
				defense = 2;
				lifeMax = 16;
				HitSound = SoundID.NPCHit1;
				knockBackResist = 0.8f;
				DeathSound = SoundID.NPCDeath4;
				value = 90f;
				buffImmune[31] = false;
			}
			else if (type == 635)
			{
				width = 18;
				height = 40;
				aiStyle = 3;
				damage = 20;
				defense = 8;
				lifeMax = 60;
				HitSound = SoundID.NPCHit2;
				DeathSound = SoundID.NPCDeath2;
				knockBackResist = 0.5f;
				value = 100f;
				buffImmune[20] = true;
				buffImmune[31] = false;
			}
			else if (type == 636)
			{
				noGravity = true;
				width = 100;
				height = 100;
				aiStyle = 120;
				damage = 80;
				defense = 50;
				lifeMax = 70000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath65;
				knockBackResist = 0f;
				value = 250000f;
				noTileCollide = true;
				boss = true;
				Opacity = 0f;
			}
			else if (type == 637 || type == 638)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 28;
				if (type == 637)
				{
					height = 20;
				}
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				housingCategory = 1;
			}
			else if (type >= 639 && type <= 645)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = (short)(4831 + (type - 639));
			}
			else if (type >= 646 && type <= 652)
			{
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				catchItem = (short)(4838 + (type - 646));
			}
			else if (type == 653)
			{
				width = 10;
				height = 10;
				aiStyle = 65;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				lavaImmune = true;
				catchItem = 4845;
			}
			else if (type == 654)
			{
				width = 10;
				height = 10;
				aiStyle = 64;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.2f;
				noGravity = true;
				lavaImmune = true;
				catchItem = 4847;
			}
			else if (type == 655)
			{
				width = 14;
				height = 14;
				aiStyle = 67;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.5f;
				noGravity = true;
				lavaImmune = true;
				catchItem = 4849;
			}
			else if (type == 656)
			{
				townNPC = true;
				friendly = true;
				width = 18;
				height = 20;
				aiStyle = 7;
				damage = 10;
				defense = 15;
				lifeMax = 250;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.5f;
				housingCategory = 1;
			}
			else if (type == 657)
			{
				width = 114;
				height = 100;
				aiStyle = 121;
				damage = 60;
				defense = 26;
				lifeMax = 18000;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath64;
				lavaImmune = true;
				knockBackResist = 0f;
				value = 60000f;
				buffImmune[20] = true;
				buffImmune[31] = true;
				boss = true;
			}
			else if (type == 658 || type == 659)
			{
				width = 24;
				height = 18;
				aiStyle = 1;
				damage = 40;
				defense = 35;
				lifeMax = 150;
				scale = 1f;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				buffImmune[20] = true;
			}
			else if (type == 660)
			{
				width = 40;
				height = 30;
				aiStyle = 14;
				damage = 50;
				defense = 30;
				lifeMax = 120;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				knockBackResist = 0.8f;
				scale = 1f;
				buffImmune[20] = true;
			}
			else if (type == 661)
			{
				width = 10;
				height = 10;
				aiStyle = 65;
				damage = 0;
				defense = 0;
				lifeMax = 5;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath1;
				npcSlots = 0.25f;
				noGravity = true;
				lavaImmune = true;
				catchItem = 4961;
				rarity = 4;
			}
			else if (type == 662)
			{
				width = 18;
				height = 40;
				aiStyle = 122;
				damage = 75;
				defense = 22;
				lifeMax = 500;
				HitSound = SoundID.NPCHit1;
				DeathSound = SoundID.NPCDeath6;
				knockBackResist = 0.2f;
				value = 0f;
				flag = true;
				noTileCollide = true;
				lavaImmune = true;
				trapImmune = true;
				noGravity = true;
			}
			if (flag)
			{
				for (int num4 = 0; num4 < 323; num4++)
				{
					buffImmune[num4] = true;
				}
			}
			if (Main.dedServ)
			{
				frame = default(Rectangle);
			}
			else if (TextureAssets.Npc[type] != null && TextureAssets.Npc[type].IsLoaded)
			{
				frame = new Rectangle(0, 0, TextureAssets.Npc[type].Width(), TextureAssets.Npc[type].Height() / Main.npcFrameCount[type]);
			}
			else
			{
				setFrameSize = true;
			}
			if (spawnparams.sizeScaleOverride.HasValue)
			{
				int num5 = (int)((float)width * scale);
				int num6 = (int)((float)height * scale);
				position.X += num5 / 2;
				position.Y += num6;
				scale = spawnparams.sizeScaleOverride.Value;
				width = (int)((float)width * scale);
				height = (int)((float)height * scale);
				if (height == 16 || height == 32)
				{
					height++;
				}
				position.X -= width / 2;
				position.Y -= height;
			}
			else
			{
				width = (int)((float)width * scale);
				height = (int)((float)height * scale);
			}
			if (buffImmune[20])
			{
				buffImmune[70] = true;
			}
			if (buffImmune[39])
			{
				buffImmune[153] = true;
			}
			life = lifeMax;
			defDamage = damage;
			defDefense = defense;
			netID = type;
			if (Main.getGoodWorld)
			{
				getGoodAdjustments();
			}
			ScaleStats(spawnparams.playerCountForMultiplayerDifficultyOverride, spawnparams.gameModeData, spawnparams.strengthMultiplierOverride);
			life = lifeMax;
		}

		private void getGoodAdjustments()
		{
			if (type == 13)
			{
				scale *= 1.4f;
				defense += 2;
			}
			else if (type == 14)
			{
				scale *= 1.4f;
				defense += 2;
			}
			else if (type == 15)
			{
				scale *= 1.4f;
				defense += 2;
			}
			else if (type == 35)
			{
				scale *= 1.25f;
			}
			else if (type == 36)
			{
				scale *= 1.15f;
			}
			else if (type == 113)
			{
				scale *= 0.65f;
				lifeMax = (int)((double)lifeMax * 1.5);
				defense += 3;
			}
			else if (type == 114)
			{
				scale *= 0.65f;
				lifeMax = (int)((double)lifeMax * 1.5);
				defense += 3;
			}
			else if (type == 115)
			{
				scale *= 1.4f;
			}
			else if (type == 116)
			{
				scale *= 1.4f;
			}
			else if (type == 125)
			{
				scale *= 0.8f;
			}
			else if (type == 126)
			{
				scale *= 0.8f;
			}
			else if (type == 127)
			{
				scale *= 1.1f;
			}
			else if (type == 128)
			{
				scale *= 1.1f;
			}
			else if (type == 129)
			{
				scale *= 1.1f;
			}
			else if (type == 130)
			{
				scale *= 1.1f;
			}
			else if (type == 131)
			{
				scale *= 1.1f;
			}
			else if (type == 134)
			{
				scale *= 1.3f;
			}
			else if (type == 135)
			{
				scale *= 1.3f;
			}
			else if (type == 136)
			{
				scale *= 1.3f;
			}
			else if (type == 139)
			{
				scale *= 1.3f;
			}
			else if (type == 222)
			{
				scale *= 1.2f;
			}
			else if (type == 245)
			{
				scale *= 0.5f;
			}
			else if (type == 246)
			{
				scale *= 0.5f;
			}
			else if (type == 247 || type == 248)
			{
				scale *= 0.5f;
			}
			else if (type == 249)
			{
				scale *= 0.5f;
			}
			else if (type == 262)
			{
				scale *= 1.3f;
			}
			else if (type == 266)
			{
				defense = (int)((double)defense * 1.5);
				damage = (int)((double)damage * 1.2);
				scale *= 1.1f;
			}
		}

		private void LazySetLiquidMovementDD2()
		{
			waterMovementSpeed = 1f;
			lavaMovementSpeed = 1f;
			honeyMovementSpeed = 1f;
		}

		public static void SetWorldSpecificMonstersByWorldID()
		{
			UnifiedRandom unifiedRandom = new UnifiedRandom(Main.worldID);
			int num = unifiedRandom.Next(3);
			int num2 = unifiedRandom.Next(3);
			while (num == num2)
			{
				num = unifiedRandom.Next(3);
			}
			for (int i = 0; i < 2; i++)
			{
				int num3 = num;
				if (i == 1)
				{
					num3 = num2;
				}
				for (int j = 0; j < 3; j++)
				{
					switch (num3)
					{
					case 0:
						cavernMonsterType[i, j] = unifiedRandom.Next(494, 496);
						break;
					case 1:
						cavernMonsterType[i, j] = unifiedRandom.Next(496, 498);
						break;
					default:
						cavernMonsterType[i, j] = unifiedRandom.Next(498, 507);
						break;
					}
				}
			}
		}

		public NPCSpawnParams GetMatchingSpawnParams()
		{
			NPCSpawnParams result = default(NPCSpawnParams);
			result.sizeScaleOverride = -1f;
			result.playerCountForMultiplayerDifficultyOverride = statsAreScaledForThisManyPlayers;
			result.strengthMultiplierOverride = strengthMultiplier;
			return result;
		}

		public void ScaleStats(int? activePlayersCount, GameModeData gameModeData, float? strengthOverride)
		{
			if ((!NPCID.Sets.NeedsExpertScaling.IndexInRange(type) || !NPCID.Sets.NeedsExpertScaling[type]) && (lifeMax <= 5 || damage == 0 || friendly || townNPC))
			{
				return;
			}
			float strength = 1f;
			if (strengthOverride.HasValue)
			{
				strength = strengthOverride.Value;
			}
			else if (gameModeData.IsJourneyMode)
			{
				CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
				if (power != null && power.GetIsUnlocked())
				{
					strength = power.StrengthMultiplierToGiveNPCs;
				}
			}
			NPCStrengthHelper nPCStrengthHelper = new NPCStrengthHelper(gameModeData, strength);
			if (nPCStrengthHelper.IsExpertMode)
			{
				ScaleStats_ApplyExpertTweaks();
			}
			ScaleStats_ApplyGameMode(gameModeData);
			if (nPCStrengthHelper.IsExpertMode)
			{
				int num = 1;
				num = (statsAreScaledForThisManyPlayers = ((!activePlayersCount.HasValue) ? GetActivePlayerCount() : activePlayersCount.Value));
				GetStatScalingFactors(num, out var balance, out var boost);
				float bossAdjustment = 1f;
				if (nPCStrengthHelper.IsMasterMode)
				{
					bossAdjustment = 0.85f;
				}
				ScaleStats_ApplyMultiplayerStats(num, balance, boost, bossAdjustment);
			}
			strengthMultiplier = strength;
			ScaleStats_UseStrengthMultiplier(strengthMultiplier);
			if ((type < 0 || !NPCID.Sets.ProjectileNPC[type]) && lifeMax < 6)
			{
				lifeMax = 6;
			}
			life = lifeMax;
			defDamage = damage;
			defDefense = defense;
		}

		public void ScaleStats_UseStrengthMultiplier(float strength)
		{
			if (type < 0 || !NPCID.Sets.ProjectileNPC[type])
			{
				lifeMax = (int)((float)lifeMax * strength);
			}
			damage = (int)((float)damage * strength);
		}

		public void ScaleStats_Old(int? activePlayersCount, GameModeData gameModeData)
		{
			if (gameModeData.IsExpertMode && ((type >= 0 && NPCID.Sets.NeedsExpertScaling[type]) || (life > 5 && damage != 0 && !friendly && !townNPC)))
			{
				ScaleStats_ApplyExpertTweaks();
				ScaleStats_ApplyGameMode(gameModeData);
				int num = 1;
				num = (statsAreScaledForThisManyPlayers = ((!activePlayersCount.HasValue) ? GetActivePlayerCount() : activePlayersCount.Value));
				GetStatScalingFactors(num, out var balance, out var boost);
				float bossAdjustment = 1f;
				if (gameModeData.IsMasterMode)
				{
					bossAdjustment = 0.85f;
				}
				ScaleStats_ApplyMultiplayerStats(num, balance, boost, bossAdjustment);
			}
		}

		public static float GetBalance()
		{
			GetStatScalingFactors(GetActivePlayerCount(), out var balance, out var _);
			return balance;
		}

		private float GetMyBalance()
		{
			if (statsAreScaledForThisManyPlayers <= 1)
			{
				return 1f;
			}
			GetStatScalingFactors(statsAreScaledForThisManyPlayers, out var balance, out var _);
			return balance;
		}

		private static int GetActivePlayerCount()
		{
			if (Main.netMode == 0)
			{
				return 1;
			}
			int num = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i] != null && Main.player[i].active)
				{
					num++;
				}
			}
			return num;
		}

		private void ScaleStats_ApplyExpertTweaks()
		{
			bool flag = type >= 0 && NPCID.Sets.ProjectileNPC[type];
			if (!NPCID.Sets.DontDoHardmodeScaling[type] && Main.hardMode && !boss && lifeMax < 1000)
			{
				int num = damage + defense + lifeMax / 4;
				if (num == 0)
				{
					num = 1;
				}
				int num2 = 80;
				if (downedPlantBoss)
				{
					num2 += 20;
				}
				if (num < num2)
				{
					float num3 = num2 / num;
					damage = (int)((double)((float)damage * num3) * 0.9);
					if (!flag)
					{
						defense = (int)((float)defense * num3);
						lifeMax = (int)((double)((float)lifeMax * num3) * 1.1);
						value = (int)((double)(value * num3) * 0.8);
					}
				}
			}
			if (type == 210 || type == 211)
			{
				damage = (int)((float)damage * 0.6f);
				lifeMax = (int)((float)lifeMax * 0.8f);
				defense = (int)((float)defense * 0.8f);
			}
		}

		private void ScaleStats_ApplyGameMode(GameModeData gameModeData)
		{
			bool num = type >= 0 && NPCID.Sets.ProjectileNPC[type];
			int num2 = 0;
			if (Main.getGoodWorld)
			{
				num2++;
			}
			if (!num)
			{
				value = (int)(value * (gameModeData.EnemyMoneyDropMultiplier + (float)num2));
				lifeMax = (int)((float)lifeMax * (gameModeData.EnemyMaxLifeMultiplier + (float)num2));
			}
			damage = (int)((float)damage * (gameModeData.EnemyDamageMultiplier + (float)num2));
			knockBackResist *= gameModeData.KnockbackToEnemiesMultiplier;
			if (Main.getGoodWorld)
			{
				damage += damage / 3;
			}
		}

		private void ScaleStats_ApplyMultiplayerStats(int numPlayers, float balance, float boost, float bossAdjustment)
		{
			if (type == 5)
			{
				lifeMax = (int)((float)lifeMax * 0.75f * bossAdjustment);
			}
			if (type == 4)
			{
				lifeMax = (int)((double)lifeMax * 0.65 * (double)balance * (double)bossAdjustment);
			}
			if (type >= 13 && type <= 15)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				if (type == 13)
				{
					damage = (int)((double)damage * 1.1);
				}
				if (type == 14)
				{
					damage = (int)((double)damage * 0.8);
				}
				if (type == 15)
				{
					damage = (int)((double)damage * 0.8);
				}
				scale *= 1.2f;
				defense += 2;
			}
			if (type == 266 || type == 267)
			{
				lifeMax = (int)((double)lifeMax * 0.85 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.9);
				scale *= 1.05f;
				for (float num = 1f; num < balance; num += 0.34f)
				{
					if ((double)knockBackResist < 0.1)
					{
						knockBackResist = 0f;
						break;
					}
					knockBackResist *= 0.8f;
				}
			}
			if (type == 50)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.8);
			}
			if (type == 471)
			{
				lifeMax = (int)((double)lifeMax * 0.85 * (double)(balance * 2f + 1f) / 3.0);
			}
			if (type == 472)
			{
				lifeMax = (int)((double)lifeMax * 0.85 * (double)(balance + 1f) / 2.0);
				damage = (int)((double)damage * 0.8);
			}
			if (type == 222)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.9);
			}
			if (type == 210 || type == 211)
			{
				lifeMax = (int)((double)lifeMax * 0.75);
			}
			if (type == 35)
			{
				lifeMax = (int)((float)lifeMax * balance * bossAdjustment);
				damage = (int)((double)damage * 1.1);
			}
			else if (type == 36)
			{
				lifeMax = (int)((double)lifeMax * 1.3 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 1.1);
			}
			if (type == 113 || type == 114)
			{
				defense += 6;
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 1.5);
			}
			else if (type == 115)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance);
				if (numPlayers > 4)
				{
					knockBackResist = 0f;
				}
				else if (numPlayers > 1)
				{
					knockBackResist *= 1f - boost;
				}
				defense += 6;
			}
			else if (type == 116)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance);
				if (numPlayers > 4)
				{
					knockBackResist = 0f;
				}
				else if (numPlayers > 1)
				{
					knockBackResist *= 1f - boost;
				}
			}
			else if (type == 117 || type == 118 || type == 119)
			{
				lifeMax = (int)((double)lifeMax * 0.8);
			}
			if (type == 657)
			{
				lifeMax = (int)((float)lifeMax * 0.8f * balance * bossAdjustment);
			}
			if (type >= 658 && type <= 660)
			{
				lifeMax = (int)((float)lifeMax * 0.75f * balance * bossAdjustment);
			}
			if (type >= 134 && type <= 136)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				if (type == 134)
				{
					damage *= 2;
				}
				if (type == 135)
				{
					damage = (int)((double)damage * 0.85);
				}
				if (type == 136)
				{
					damage = (int)((double)damage * 0.85);
				}
				scale *= 1.05f;
			}
			else if (type == 139)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)(balance * 2f + 1f) / 3.0);
				damage = (int)((double)damage * 0.8);
				scale *= 1.05f;
			}
			if (type >= 127 && type <= 131)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.85);
			}
			if (type >= 125 && type <= 126)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.85);
			}
			if (type == 262)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 1.15);
			}
			else if (type == 264)
			{
				lifeMax = (int)((float)lifeMax * balance * bossAdjustment);
				damage = (int)((double)damage * 1.15);
			}
			if (type == 636)
			{
				lifeMax = (int)((double)lifeMax * 0.7 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 1.15);
			}
			if (type >= 245 && type <= 249)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.8);
			}
			if (type == 370)
			{
				lifeMax = (int)((double)lifeMax * 0.6 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.7);
			}
			else if (type == 371 || type == 372 || type == 373)
			{
				if (type != 371)
				{
					lifeMax = (int)((double)lifeMax * 0.75);
				}
				damage = (int)((double)damage * 0.75);
			}
			if (type == 439 || type == 440 || (type >= 454 && type <= 459) || type == 522 || type == 523)
			{
				if (type != 522)
				{
					lifeMax = (int)((float)lifeMax * 0.625f * balance * bossAdjustment);
				}
				damage = (int)((double)damage * 0.75);
			}
			if (type == 397 || type == 396 || type == 398)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.75);
			}
			if (type == 551)
			{
				lifeMax = (int)((double)lifeMax * 0.75 * (double)balance * (double)bossAdjustment);
				damage = (int)((double)damage * 0.65);
			}
			else if (NPCID.Sets.BelongsToInvasionOldOnesArmy[type])
			{
				int num2 = 7;
				float num3 = (balance * (float)(num2 - 1) + 1f) / (float)num2;
				lifeMax = (int)((float)lifeMax * num3 * bossAdjustment);
			}
			switch (type)
			{
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 326:
			case 329:
			case 330:
				lifeMax = (int)((double)lifeMax * 0.75);
				damage = (int)((double)damage * 0.75);
				break;
			case 325:
			case 327:
				lifeMax = (int)((double)lifeMax * 0.65 * (double)bossAdjustment);
				damage = (int)((double)damage * 0.75);
				break;
			}
			switch (type)
			{
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 347:
			case 348:
			case 349:
			case 350:
				lifeMax = (int)((double)lifeMax * 0.75);
				damage = (int)((double)damage * 0.75);
				break;
			case 344:
			case 345:
			case 346:
				lifeMax = (int)((double)lifeMax * 0.65 * (double)bossAdjustment);
				damage = (int)((double)damage * 0.75);
				break;
			}
			defDefense = defense;
			defDamage = damage;
			life = lifeMax;
		}

		private static void GetStatScalingFactors(int numPlayers, out float balance, out float boost)
		{
			balance = 1f;
			boost = 0.35f;
			for (int i = 1; i < numPlayers; i++)
			{
				balance += boost;
				boost += (1f - boost) / 3f;
			}
			if (balance > 8f)
			{
				balance = (balance * 2f + 8f) / 3f;
			}
			if (balance > 1000f)
			{
				balance = 1000f;
			}
		}

		public static bool GetNPCLocation(int i, bool seekHead, bool averageDirection, out int index, out Vector2 pos)
		{
			int num = Main.npc[i].type;
			int num2 = -1;
			int num3 = -1;
			switch (num)
			{
			case 13:
				num3 = 15;
				num2 = 0;
				break;
			case 14:
			case 15:
				num3 = 13;
				num2 = 1;
				break;
			case 134:
				num3 = 136;
				num2 = 0;
				break;
			case 135:
			case 136:
				num3 = 134;
				num2 = 1;
				break;
			case 454:
				num3 = 459;
				num2 = 0;
				break;
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
				num3 = 454;
				num2 = 1;
				break;
			case 98:
				num3 = 100;
				num2 = 0;
				break;
			case 99:
			case 100:
				num3 = 98;
				num2 = 1;
				break;
			case 39:
				num3 = 41;
				num2 = 0;
				break;
			case 40:
			case 41:
				num3 = 39;
				num2 = 1;
				break;
			case 510:
				num3 = 512;
				num2 = 0;
				break;
			case 511:
			case 512:
				num3 = 510;
				num2 = 1;
				break;
			case 621:
				num3 = 623;
				num2 = 0;
				break;
			case 622:
			case 623:
				num3 = 621;
				num2 = 1;
				break;
			case 513:
				num3 = 515;
				num2 = 0;
				break;
			case 514:
			case 515:
				num3 = 513;
				num2 = 1;
				break;
			case 87:
				num3 = 92;
				num2 = 0;
				break;
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
				num3 = 87;
				num2 = 1;
				break;
			case 117:
				num3 = 119;
				num2 = 0;
				break;
			case 118:
			case 119:
				num3 = 117;
				num2 = 1;
				break;
			case 7:
				num3 = 9;
				num2 = 0;
				break;
			case 8:
			case 9:
				num3 = 7;
				num2 = 1;
				break;
			case 95:
				num3 = 97;
				num2 = 0;
				break;
			case 96:
			case 97:
				num3 = 95;
				num2 = 1;
				break;
			case 10:
				num3 = 12;
				num2 = 0;
				break;
			case 11:
			case 12:
				num3 = 10;
				num2 = 1;
				break;
			}
			if (num2 != -1)
			{
				if (seekHead && num2 == 1)
				{
					index = -1;
					pos = Vector2.Zero;
					return false;
				}
				Vector2 center = Main.npc[i].Center;
				int num4 = -1;
				float num5 = -1f;
				int num6 = -1;
				Vector2 center2 = Main.player[Main.myPlayer].Center;
				int num7 = (int)Main.npc[i].ai[num2];
				int num8 = 0;
				while (num7 >= 0 && num7 < 200 && ++num8 < 100 && Main.npc[num7].active)
				{
					if (!averageDirection && (num6 == -1 || Main.npc[num7].Distance(center2) < num5))
					{
						num5 = Main.npc[num7].Distance(center2);
						num6 = num7;
					}
					if (Main.npc[num7].type == num3)
					{
						num4 = num7;
						break;
					}
					num7 = (int)Main.npc[num7].ai[num2];
				}
				if (num4 >= 0)
				{
					if (!averageDirection)
					{
						pos = Main.npc[num6].Center;
						index = num6;
					}
					else
					{
						center += Main.npc[num4].Center;
						pos = center / 2f;
						index = num4;
					}
					return true;
				}
				pos = Vector2.Zero;
				index = -1;
				return false;
			}
			pos = Main.npc[i].Center;
			index = i;
			return true;
		}

		public void AI()
		{
			//IL_4f812: Unknown result type (might be due to invalid IL or missing references)
			//IL_503aa: Unknown result type (might be due to invalid IL or missing references)
			//IL_503b7: Unknown result type (might be due to invalid IL or missing references)
			//IL_503bc: Unknown result type (might be due to invalid IL or missing references)
			//IL_503e5: Unknown result type (might be due to invalid IL or missing references)
			//IL_5040f: Unknown result type (might be due to invalid IL or missing references)
			//IL_50414: Unknown result type (might be due to invalid IL or missing references)
			//IL_505dc: Unknown result type (might be due to invalid IL or missing references)
			//IL_50606: Unknown result type (might be due to invalid IL or missing references)
			//IL_5060b: Unknown result type (might be due to invalid IL or missing references)
			//IL_50625: Unknown result type (might be due to invalid IL or missing references)
			if (aiStyle == 0)
			{
				if (Main.netMode != 1)
				{
					for (int i = 0; i < 255; i++)
					{
						if (Main.player[i].active && Main.player[i].talkNPC == whoAmI)
						{
							if (type == 589)
							{
								AI_000_TransformBoundNPC(i, 588);
							}
							if (type == 105)
							{
								AI_000_TransformBoundNPC(i, 107);
							}
							if (type == 106)
							{
								AI_000_TransformBoundNPC(i, 108);
							}
							if (type == 123)
							{
								AI_000_TransformBoundNPC(i, 124);
							}
							if (type == 354)
							{
								AI_000_TransformBoundNPC(i, 353);
							}
							if (type == 376)
							{
								AI_000_TransformBoundNPC(i, 369);
							}
							if (type == 579)
							{
								AI_000_TransformBoundNPC(i, 550);
							}
						}
					}
				}
				if (type != 376 && type != 579)
				{
					TargetClosest();
					spriteDirection = base.direction;
				}
				if (type == 376 || type == 579)
				{
					if (wet || Main.tile[(int)(base.Center.X / 16f), (int)(base.position.Y - 4f) / 16].liquid > 0)
					{
						base.velocity.Y = -0.4f;
						int num = 1;
						if (base.Center.X / 16f > (float)(Main.maxTilesX / 2))
						{
							num = -1;
						}
						int num2 = 12;
						int num3 = (int)base.Center.X / 16;
						int j = (int)base.Center.Y / 16;
						bool flag = false;
						if (num > 0)
						{
							for (int k = num3; k < num3 + num2; k++)
							{
								if (WorldGen.SolidTile(k, j))
								{
									flag = true;
								}
							}
						}
						else
						{
							for (int l = num3; l > num3 - num2; l--)
							{
								if (WorldGen.SolidTile(l, j))
								{
									flag = true;
								}
							}
						}
						if (type == 579)
						{
							flag = true;
						}
						if (flag)
						{
							base.velocity.X *= 0.99f;
							if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
							{
								base.velocity.X = 0f;
							}
							return;
						}
						base.velocity.X += (float)num * 0.01f;
						if (base.velocity.X > 0.2f)
						{
							base.velocity.X *= 0.95f;
						}
						if (base.velocity.X < -0.2f)
						{
							base.velocity.X *= 0.95f;
						}
					}
					else
					{
						base.velocity.X *= 0.93f;
						if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
						{
							base.velocity.X = 0f;
						}
					}
				}
				else
				{
					base.velocity.X *= 0.93f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
				}
			}
			else if (aiStyle == 1)
			{
				AI_001_Slimes();
			}
			else if (aiStyle == 2)
			{
				AI_002_FloatingEye();
			}
			else if (aiStyle == 3)
			{
				AI_003_Fighters();
			}
			else if (aiStyle == 4)
			{
				bool flag2 = false;
				if (Main.expertMode && (double)life < (double)lifeMax * 0.12)
				{
					flag2 = true;
				}
				bool flag3 = false;
				if (Main.expertMode && (double)life < (double)lifeMax * 0.04)
				{
					flag3 = true;
				}
				float num4 = 20f;
				if (flag3)
				{
					num4 = 10f;
				}
				if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				bool dead = Main.player[target].dead;
				float num5 = base.position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
				float num6 = base.position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
				float num7 = (float)Math.Atan2(num6, num5) + 1.57f;
				if (num7 < 0f)
				{
					num7 += 6.283f;
				}
				else if ((double)num7 > 6.283)
				{
					num7 -= 6.283f;
				}
				float num8 = 0f;
				if (this.ai[0] == 0f && this.ai[1] == 0f)
				{
					num8 = 0.02f;
				}
				if (this.ai[0] == 0f && this.ai[1] == 2f && this.ai[2] > 40f)
				{
					num8 = 0.05f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 0f)
				{
					num8 = 0.05f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 2f && this.ai[2] > 40f)
				{
					num8 = 0.08f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 4f && this.ai[2] > num4)
				{
					num8 = 0.15f;
				}
				if (this.ai[0] == 3f && this.ai[1] == 5f)
				{
					num8 = 0.05f;
				}
				if (Main.expertMode)
				{
					num8 *= 1.5f;
				}
				if (flag3 && Main.expertMode)
				{
					num8 = 0f;
				}
				if (rotation < num7)
				{
					if ((double)(num7 - rotation) > 3.1415)
					{
						rotation -= num8;
					}
					else
					{
						rotation += num8;
					}
				}
				else if (rotation > num7)
				{
					if ((double)(rotation - num7) > 3.1415)
					{
						rotation += num8;
					}
					else
					{
						rotation -= num8;
					}
				}
				if (rotation > num7 - num8 && rotation < num7 + num8)
				{
					rotation = num7;
				}
				if (rotation < 0f)
				{
					rotation += 6.283f;
				}
				else if ((double)rotation > 6.283)
				{
					rotation -= 6.283f;
				}
				if (rotation > num7 - num8 && rotation < num7 + num8)
				{
					rotation = num7;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num9 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, base.velocity.X, 2f);
					Main.dust[num9].velocity.X *= 0.5f;
					Main.dust[num9].velocity.Y *= 0.1f;
				}
				if (Main.dayTime || dead)
				{
					base.velocity.Y -= 0.04f;
					EncourageDespawn(10);
					return;
				}
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] == 0f)
					{
						float num10 = 5f;
						float num11 = 0.04f;
						if (Main.expertMode)
						{
							num11 = 0.15f;
							num10 = 7f;
						}
						if (Main.getGoodWorld)
						{
							num11 += 0.05f;
							num10 += 1f;
						}
						Vector2 vector = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num12 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector.X;
						float num13 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector.Y;
						float num14 = (float)Math.Sqrt(num12 * num12 + num13 * num13);
						float num15 = num14;
						num14 = num10 / num14;
						num12 *= num14;
						num13 *= num14;
						if (base.velocity.X < num12)
						{
							base.velocity.X += num11;
							if (base.velocity.X < 0f && num12 > 0f)
							{
								base.velocity.X += num11;
							}
						}
						else if (base.velocity.X > num12)
						{
							base.velocity.X -= num11;
							if (base.velocity.X > 0f && num12 < 0f)
							{
								base.velocity.X -= num11;
							}
						}
						if (base.velocity.Y < num13)
						{
							base.velocity.Y += num11;
							if (base.velocity.Y < 0f && num13 > 0f)
							{
								base.velocity.Y += num11;
							}
						}
						else if (base.velocity.Y > num13)
						{
							base.velocity.Y -= num11;
							if (base.velocity.Y > 0f && num13 < 0f)
							{
								base.velocity.Y -= num11;
							}
						}
						this.ai[2] += 1f;
						float num16 = 600f;
						if (Main.expertMode)
						{
							num16 *= 0.35f;
						}
						if (this.ai[2] >= num16)
						{
							this.ai[1] = 1f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							target = 255;
							netUpdate = true;
						}
						else if ((base.position.Y + (float)height < Main.player[target].position.Y && num15 < 500f) || (Main.expertMode && num15 < 500f))
						{
							if (!Main.player[target].dead)
							{
								this.ai[3] += 1f;
							}
							float num17 = 110f;
							if (Main.expertMode)
							{
								num17 *= 0.4f;
							}
							if (Main.getGoodWorld)
							{
								num17 *= 0.8f;
							}
							if (this.ai[3] >= num17)
							{
								this.ai[3] = 0f;
								rotation = num7;
								float num18 = 5f;
								if (Main.expertMode)
								{
									num18 = 6f;
								}
								float num19 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector.X;
								float num20 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector.Y;
								float num21 = (float)Math.Sqrt(num19 * num19 + num20 * num20);
								num21 = num18 / num21;
								Vector2 position = vector;
								Vector2 vector2 = default(Vector2);
								vector2.X = num19 * num21;
								vector2.Y = num20 * num21;
								position.X += vector2.X * 10f;
								position.Y += vector2.Y * 10f;
								if (Main.netMode != 1)
								{
									int num22 = NewNPC((int)position.X, (int)position.Y, 5);
									Main.npc[num22].velocity.X = vector2.X;
									Main.npc[num22].velocity.Y = vector2.Y;
									if (Main.netMode == 2 && num22 < 200)
									{
										NetMessage.SendData(23, -1, -1, null, num22);
									}
								}
								SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
								for (int m = 0; m < 10; m++)
								{
									Dust.NewDust(position, 20, 20, 5, vector2.X * 0.4f, vector2.Y * 0.4f);
								}
							}
						}
					}
					else if (this.ai[1] == 1f)
					{
						rotation = num7;
						float num23 = 6f;
						if (Main.expertMode)
						{
							num23 = 7f;
						}
						if (Main.getGoodWorld)
						{
							num23 += 1f;
						}
						Vector2 vector3 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num24 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector3.X;
						float num25 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector3.Y;
						float num26 = (float)Math.Sqrt(num24 * num24 + num25 * num25);
						num26 = num23 / num26;
						base.velocity.X = num24 * num26;
						base.velocity.Y = num25 * num26;
						this.ai[1] = 2f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
					else if (this.ai[1] == 2f)
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 40f)
						{
							base.velocity *= 0.98f;
							if (Main.expertMode)
							{
								base.velocity *= 0.985f;
							}
							if (Main.getGoodWorld)
							{
								base.velocity *= 0.99f;
							}
							if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
							{
								base.velocity.X = 0f;
							}
							if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
							{
								base.velocity.Y = 0f;
							}
						}
						else
						{
							rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
						}
						int num27 = 150;
						if (Main.expertMode)
						{
							num27 = 100;
						}
						if (Main.getGoodWorld)
						{
							num27 -= 15;
						}
						if (this.ai[2] >= (float)num27)
						{
							this.ai[3] += 1f;
							this.ai[2] = 0f;
							target = 255;
							rotation = num7;
							if (this.ai[3] >= 3f)
							{
								this.ai[1] = 0f;
								this.ai[3] = 0f;
							}
							else
							{
								this.ai[1] = 1f;
							}
						}
					}
					float num28 = 0.5f;
					if (Main.expertMode)
					{
						num28 = 0.65f;
					}
					if ((float)life < (float)lifeMax * num28)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
					return;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					if (this.ai[0] == 1f)
					{
						this.ai[2] += 0.005f;
						if ((double)this.ai[2] > 0.5)
						{
							this.ai[2] = 0.5f;
						}
					}
					else
					{
						this.ai[2] -= 0.005f;
						if (this.ai[2] < 0f)
						{
							this.ai[2] = 0f;
						}
					}
					rotation += this.ai[2];
					this.ai[1] += 1f;
					if (Main.expertMode && this.ai[1] % 20f == 0f)
					{
						float num29 = 5f;
						Vector2 vector4 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num30 = Main.rand.Next(-200, 200);
						float num31 = Main.rand.Next(-200, 200);
						float num32 = (float)Math.Sqrt(num30 * num30 + num31 * num31);
						num32 = num29 / num32;
						Vector2 position2 = vector4;
						Vector2 vector5 = default(Vector2);
						vector5.X = num30 * num32;
						vector5.Y = num31 * num32;
						position2.X += vector5.X * 10f;
						position2.Y += vector5.Y * 10f;
						if (Main.netMode != 1)
						{
							int num33 = NewNPC((int)position2.X, (int)position2.Y, 5);
							Main.npc[num33].velocity.X = vector5.X;
							Main.npc[num33].velocity.Y = vector5.Y;
							if (Main.netMode == 2 && num33 < 200)
							{
								NetMessage.SendData(23, -1, -1, null, num33);
							}
						}
						for (int n = 0; n < 10; n++)
						{
							Dust.NewDust(position2, 20, 20, 5, vector5.X * 0.4f, vector5.Y * 0.4f);
						}
					}
					if (this.ai[1] == 100f)
					{
						this.ai[0] += 1f;
						this.ai[1] = 0f;
						if (this.ai[0] == 3f)
						{
							this.ai[2] = 0f;
						}
						else
						{
							SoundEngine.PlaySound(3, (int)base.position.X, (int)base.position.Y);
							for (int num34 = 0; num34 < 2; num34++)
							{
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 8);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
							}
							for (int num35 = 0; num35 < 20; num35++)
							{
								Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
							}
							SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
						}
					}
					Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
					base.velocity.X *= 0.98f;
					base.velocity.Y *= 0.98f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
					{
						base.velocity.Y = 0f;
					}
					return;
				}
				defense = 0;
				int num36 = 23;
				int num37 = 18;
				if (Main.expertMode)
				{
					if (flag2)
					{
						defense = -15;
					}
					if (flag3)
					{
						num37 = 20;
						defense = -30;
					}
				}
				damage = GetAttackDamage_LerpBetweenFinalValues(num36, num37);
				damage = GetAttackDamage_ScaledByStrength(damage);
				if (this.ai[1] == 0f && flag2)
				{
					this.ai[1] = 5f;
				}
				if (this.ai[1] == 0f)
				{
					float num38 = 6f;
					float num39 = 0.07f;
					Vector2 vector6 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num40 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector6.X;
					float num41 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 120f - vector6.Y;
					float num42 = (float)Math.Sqrt(num40 * num40 + num41 * num41);
					if (num42 > 400f && Main.expertMode)
					{
						num38 += 1f;
						num39 += 0.05f;
						if (num42 > 600f)
						{
							num38 += 1f;
							num39 += 0.05f;
							if (num42 > 800f)
							{
								num38 += 1f;
								num39 += 0.05f;
							}
						}
					}
					if (Main.getGoodWorld)
					{
						num38 += 1f;
						num39 += 0.1f;
					}
					num42 = num38 / num42;
					num40 *= num42;
					num41 *= num42;
					if (base.velocity.X < num40)
					{
						base.velocity.X += num39;
						if (base.velocity.X < 0f && num40 > 0f)
						{
							base.velocity.X += num39;
						}
					}
					else if (base.velocity.X > num40)
					{
						base.velocity.X -= num39;
						if (base.velocity.X > 0f && num40 < 0f)
						{
							base.velocity.X -= num39;
						}
					}
					if (base.velocity.Y < num41)
					{
						base.velocity.Y += num39;
						if (base.velocity.Y < 0f && num41 > 0f)
						{
							base.velocity.Y += num39;
						}
					}
					else if (base.velocity.Y > num41)
					{
						base.velocity.Y -= num39;
						if (base.velocity.Y > 0f && num41 < 0f)
						{
							base.velocity.Y -= num39;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 200f)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						if (Main.expertMode && (double)life < (double)lifeMax * 0.35)
						{
							this.ai[1] = 3f;
						}
						target = 255;
						netUpdate = true;
					}
					if (Main.expertMode && flag3)
					{
						TargetClosest();
						netUpdate = true;
						this.ai[1] = 3f;
						this.ai[2] = 0f;
						this.ai[3] -= 1000f;
					}
				}
				else if (this.ai[1] == 1f)
				{
					SoundEngine.PlaySound(36, (int)base.position.X, (int)base.position.Y, 0);
					rotation = num7;
					float num43 = 6.8f;
					if (Main.expertMode && this.ai[3] == 1f)
					{
						num43 *= 1.15f;
					}
					if (Main.expertMode && this.ai[3] == 2f)
					{
						num43 *= 1.3f;
					}
					if (Main.getGoodWorld)
					{
						num43 *= 1.2f;
					}
					Vector2 vector7 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num44 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector7.X;
					float num45 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector7.Y;
					float num46 = (float)Math.Sqrt(num44 * num44 + num45 * num45);
					num46 = num43 / num46;
					base.velocity.X = num44 * num46;
					base.velocity.Y = num45 * num46;
					this.ai[1] = 2f;
					netUpdate = true;
					if (netSpam > 10)
					{
						netSpam = 10;
					}
				}
				else if (this.ai[1] == 2f)
				{
					float num47 = 40f;
					this.ai[2] += 1f;
					if (Main.expertMode)
					{
						num47 = 50f;
					}
					if (this.ai[2] >= num47)
					{
						base.velocity *= 0.97f;
						if (Main.expertMode)
						{
							base.velocity *= 0.98f;
						}
						if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
						{
							base.velocity.X = 0f;
						}
						if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
						{
							base.velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					}
					int num48 = 130;
					if (Main.expertMode)
					{
						num48 = 90;
					}
					if (this.ai[2] >= (float)num48)
					{
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						target = 255;
						rotation = num7;
						if (this.ai[3] >= 3f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
							if (Main.expertMode && Main.netMode != 1 && (double)life < (double)lifeMax * 0.5)
							{
								this.ai[1] = 3f;
								this.ai[3] += Main.rand.Next(1, 4);
							}
							netUpdate = true;
							if (netSpam > 10)
							{
								netSpam = 10;
							}
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
				else if (this.ai[1] == 3f)
				{
					if (this.ai[3] == 4f && flag2 && base.Center.Y > Main.player[target].Center.Y)
					{
						TargetClosest();
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
					else if (Main.netMode != 1)
					{
						TargetClosest();
						float num49 = 20f;
						Vector2 vector8 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num50 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector8.X;
						float num51 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector8.Y;
						float num52 = Math.Abs(Main.player[target].velocity.X) + Math.Abs(Main.player[target].velocity.Y) / 4f;
						num52 += 10f - num52;
						if (num52 < 5f)
						{
							num52 = 5f;
						}
						if (num52 > 15f)
						{
							num52 = 15f;
						}
						if (this.ai[2] == -1f && !flag3)
						{
							num52 *= 4f;
							num49 *= 1.3f;
						}
						if (flag3)
						{
							num52 *= 2f;
						}
						num50 -= Main.player[target].velocity.X * num52;
						num51 -= Main.player[target].velocity.Y * num52 / 4f;
						num50 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						num51 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						if (flag3)
						{
							num50 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
							num51 *= 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						}
						float num53 = (float)Math.Sqrt(num50 * num50 + num51 * num51);
						float num54 = num53;
						num53 = num49 / num53;
						base.velocity.X = num50 * num53;
						base.velocity.Y = num51 * num53;
						base.velocity.X += (float)Main.rand.Next(-20, 21) * 0.1f;
						base.velocity.Y += (float)Main.rand.Next(-20, 21) * 0.1f;
						if (flag3)
						{
							base.velocity.X += (float)Main.rand.Next(-50, 51) * 0.1f;
							base.velocity.Y += (float)Main.rand.Next(-50, 51) * 0.1f;
							float num55 = Math.Abs(base.velocity.X);
							float num56 = Math.Abs(base.velocity.Y);
							if (base.Center.X > Main.player[target].Center.X)
							{
								num56 *= -1f;
							}
							if (base.Center.Y > Main.player[target].Center.Y)
							{
								num55 *= -1f;
							}
							base.velocity.X = num56 + base.velocity.X;
							base.velocity.Y = num55 + base.velocity.Y;
							base.velocity.Normalize();
							base.velocity *= num49;
							base.velocity.X += (float)Main.rand.Next(-20, 21) * 0.1f;
							base.velocity.Y += (float)Main.rand.Next(-20, 21) * 0.1f;
						}
						else if (num54 < 100f)
						{
							if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
							{
								float num57 = Math.Abs(base.velocity.X);
								float num58 = Math.Abs(base.velocity.Y);
								if (base.Center.X > Main.player[target].Center.X)
								{
									num58 *= -1f;
								}
								if (base.Center.Y > Main.player[target].Center.Y)
								{
									num57 *= -1f;
								}
								base.velocity.X = num58;
								base.velocity.Y = num57;
							}
						}
						else if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
						{
							float num59 = (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y)) / 2f;
							float num60 = num59;
							if (base.Center.X > Main.player[target].Center.X)
							{
								num60 *= -1f;
							}
							if (base.Center.Y > Main.player[target].Center.Y)
							{
								num59 *= -1f;
							}
							base.velocity.X = num60;
							base.velocity.Y = num59;
						}
						this.ai[1] = 4f;
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
					}
				}
				else if (this.ai[1] == 4f)
				{
					if (this.ai[2] == 0f)
					{
						SoundEngine.PlaySound(36, (int)base.position.X, (int)base.position.Y, -1);
					}
					float num61 = num4;
					this.ai[2] += 1f;
					if (this.ai[2] == num61 && Vector2.Distance(base.position, Main.player[target].position) < 200f)
					{
						this.ai[2] -= 1f;
					}
					if (this.ai[2] >= num61)
					{
						base.velocity *= 0.95f;
						if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
						{
							base.velocity.X = 0f;
						}
						if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
						{
							base.velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					}
					float num62 = num61 + 13f;
					if (this.ai[2] >= num62)
					{
						netUpdate = true;
						if (netSpam > 10)
						{
							netSpam = 10;
						}
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						if (this.ai[3] >= 5f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
						}
						else
						{
							this.ai[1] = 3f;
						}
					}
				}
				else if (this.ai[1] == 5f)
				{
					float num63 = 600f;
					float num64 = 9f;
					float num65 = 0.3f;
					Vector2 vector9 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num66 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector9.X;
					float num67 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) + num63 - vector9.Y;
					float num68 = (float)Math.Sqrt(num66 * num66 + num67 * num67);
					num68 = num64 / num68;
					num66 *= num68;
					num67 *= num68;
					if (base.velocity.X < num66)
					{
						base.velocity.X += num65;
						if (base.velocity.X < 0f && num66 > 0f)
						{
							base.velocity.X += num65;
						}
					}
					else if (base.velocity.X > num66)
					{
						base.velocity.X -= num65;
						if (base.velocity.X > 0f && num66 < 0f)
						{
							base.velocity.X -= num65;
						}
					}
					if (base.velocity.Y < num67)
					{
						base.velocity.Y += num65;
						if (base.velocity.Y < 0f && num67 > 0f)
						{
							base.velocity.Y += num65;
						}
					}
					else if (base.velocity.Y > num67)
					{
						base.velocity.Y -= num65;
						if (base.velocity.Y > 0f && num67 < 0f)
						{
							base.velocity.Y -= num65;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 70f)
					{
						TargetClosest();
						this.ai[1] = 3f;
						this.ai[2] = -1f;
						this.ai[3] = Main.rand.Next(-3, 1);
						netUpdate = true;
					}
				}
				if (flag3 && this.ai[1] == 5f)
				{
					this.ai[1] = 3f;
				}
			}
			else if (aiStyle == 5)
			{
				AI_005_EaterOfSouls();
			}
			else if (aiStyle == 6)
			{
				AI_006_Worms();
			}
			else if (aiStyle == 7)
			{
				AI_007_TownEntities();
			}
			else if (aiStyle == 8)
			{
				TargetClosest();
				base.velocity.X *= 0.93f;
				if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
				{
					base.velocity.X = 0f;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[0] = 500f;
				}
				if (type == 172)
				{
					if (alpha < 255)
					{
						alpha++;
					}
					if (justHit)
					{
						alpha = 0;
					}
				}
				if (this.ai[2] != 0f && this.ai[3] != 0f)
				{
					base.position += netOffset;
					if (type == 172)
					{
						alpha = 255;
					}
					SoundEngine.PlaySound(SoundID.Item8, base.position);
					for (int num69 = 0; num69 < 50; num69++)
					{
						if (type == 29 || type == 45)
						{
							int num70 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, 0f, 0f, 100, default(Color), Main.rand.Next(1, 3));
							Dust dust = Main.dust[num70];
							dust.velocity *= 3f;
							if (Main.dust[num70].scale > 1f)
							{
								Main.dust[num70].noGravity = true;
							}
						}
						else if (type == 32)
						{
							int num71 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 172, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num71];
							dust.velocity *= 3f;
							Main.dust[num71].noGravity = true;
						}
						else if (type == 283 || type == 284)
						{
							int num72 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 173);
							Dust dust = Main.dust[num72];
							dust.velocity *= 2f;
							Main.dust[num72].scale = 1.4f;
						}
						else if (type == 285 || type == 286)
						{
							int num73 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num73];
							dust.velocity *= 3f;
							Main.dust[num73].noGravity = true;
						}
						else if (type == 281 || type == 282)
						{
							int num74 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num74];
							dust.velocity *= 3f;
							Main.dust[num74].noGravity = true;
						}
						else if (type == 172)
						{
							int num75 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 106, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num75];
							dust.velocity *= 3f;
							Main.dust[num75].noGravity = true;
						}
						else if (type == 533)
						{
							int num76 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num76];
							dust.velocity *= 3f;
							Main.dust[num76].noGravity = true;
						}
						else
						{
							int num77 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num77];
							dust.velocity *= 3f;
							Main.dust[num77].noGravity = true;
						}
					}
					base.position -= netOffset;
					base.position.X = this.ai[2] * 16f - (float)(width / 2) + 8f;
					base.position.Y = this.ai[3] * 16f - (float)height;
					netOffset *= 0f;
					base.velocity.X = 0f;
					base.velocity.Y = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					SoundEngine.PlaySound(SoundID.Item8, base.position);
					for (int num78 = 0; num78 < 50; num78++)
					{
						if (type == 29 || type == 45)
						{
							int num79 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, 0f, 0f, 100, default(Color), Main.rand.Next(1, 3));
							Dust dust = Main.dust[num79];
							dust.velocity *= 3f;
							if (Main.dust[num79].scale > 1f)
							{
								Main.dust[num79].noGravity = true;
							}
						}
						else if (type == 32)
						{
							int num80 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 172, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num80];
							dust.velocity *= 3f;
							Main.dust[num80].noGravity = true;
						}
						else if (type == 172)
						{
							int num81 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 106, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num81];
							dust.velocity *= 3f;
							Main.dust[num81].noGravity = true;
						}
						else if (type == 283 || type == 284)
						{
							int num82 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 173);
							Dust dust = Main.dust[num82];
							dust.velocity *= 2f;
							Main.dust[num82].scale = 1.4f;
						}
						else if (type == 285 || type == 286)
						{
							int num83 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num83];
							dust.velocity *= 3f;
							Main.dust[num83].noGravity = true;
						}
						else if (type == 281 || type == 282)
						{
							int num84 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num84];
							dust.velocity *= 3f;
							Main.dust[num84].noGravity = true;
						}
						else if (type == 533)
						{
							int num85 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num85];
							dust.velocity *= 3f;
							Main.dust[num85].noGravity = true;
						}
						else
						{
							int num86 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Dust dust = Main.dust[num86];
							dust.velocity *= 3f;
							Main.dust[num86].noGravity = true;
						}
					}
				}
				this.ai[0] += 1f;
				if (type == 283 || type == 284)
				{
					if (this.ai[0] == 50f || this.ai[0] == 100f || this.ai[0] == 150f || this.ai[0] == 200f || this.ai[0] == 250f)
					{
						this.ai[1] = 30f;
						netUpdate = true;
					}
					if (this.ai[0] >= 400f)
					{
						this.ai[0] = 700f;
					}
				}
				else if (type == 172)
				{
					if (this.ai[0] == 75f || this.ai[0] == 150f || this.ai[0] == 225f || this.ai[0] == 300f || this.ai[0] == 375f || this.ai[0] == 450f)
					{
						this.ai[1] = 30f;
						netUpdate = true;
					}
				}
				else if (type == 533)
				{
					if (this.ai[0] == 180f)
					{
						this.ai[1] = 181f;
						netUpdate = true;
					}
				}
				else if (type == 281 || type == 282)
				{
					if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 120f || this.ai[0] == 140f || this.ai[0] == 160f || this.ai[0] == 220f || this.ai[0] == 240f || this.ai[0] == 260f)
					{
						this.ai[1] = 30f;
						netUpdate = true;
					}
					if (this.ai[0] >= 460f)
					{
						this.ai[0] = 700f;
					}
				}
				else if (this.ai[0] == 100f || this.ai[0] == 200f || this.ai[0] == 300f)
				{
					this.ai[1] = 30f;
					netUpdate = true;
				}
				if ((type == 285 || type == 286) && this.ai[0] > 400f)
				{
					this.ai[0] = 650f;
				}
				if (type == 533 && this.ai[0] >= 360f)
				{
					this.ai[0] = 650f;
				}
				if (this.ai[0] >= 650f && Main.netMode != 1)
				{
					this.ai[0] = 1f;
					int num87 = (int)Main.player[target].position.X / 16;
					int num88 = (int)Main.player[target].position.Y / 16;
					int num89 = (int)base.position.X / 16;
					int num90 = (int)base.position.Y / 16;
					int num91 = 20;
					int num92 = 0;
					bool flag4 = false;
					if (Math.Abs(base.position.X - Main.player[target].position.X) + Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
					{
						num92 = 100;
						flag4 = true;
					}
					while (!flag4 && num92 < 100)
					{
						num92++;
						int num93 = Main.rand.Next(num87 - num91, num87 + num91);
						int num94 = Main.rand.Next(num88 - num91, num88 + num91);
						for (int num95 = num94; num95 < num88 + num91; num95++)
						{
							if ((num95 < num88 - 4 || num95 > num88 + 4 || num93 < num87 - 4 || num93 > num87 + 4) && (num95 < num90 - 1 || num95 > num90 + 1 || num93 < num89 - 1 || num93 > num89 + 1) && Main.tile[num93, num95].nactive())
							{
								bool flag5 = true;
								if ((type == 32 || (type >= 281 && type <= 286)) && !Main.wallDungeon[Main.tile[num93, num95 - 1].wall])
								{
									flag5 = false;
								}
								else if (Main.tile[num93, num95 - 1].lava())
								{
									flag5 = false;
								}
								if (flag5 && Main.tileSolid[Main.tile[num93, num95].type] && !Collision.SolidTiles(num93 - 1, num93 + 1, num95 - 4, num95 - 1))
								{
									this.ai[1] = 20f;
									this.ai[2] = num93;
									this.ai[3] = num95;
									flag4 = true;
									break;
								}
							}
						}
					}
					netUpdate = true;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
					if (type == 533)
					{
						if (this.ai[1] % 30f == 0f && this.ai[1] / 30f < 5f)
						{
							SoundEngine.PlaySound(SoundID.Item8, base.position);
							if (Main.netMode != 1)
							{
								Point point = base.Center.ToTileCoordinates();
								Point point2 = Main.player[target].Center.ToTileCoordinates();
								Vector2 vector10 = Main.player[target].Center - base.Center;
								int num96 = 6;
								int num97 = 6;
								int num98 = 0;
								int num99 = 2;
								int num100 = 0;
								bool flag6 = false;
								if (vector10.Length() > 2000f)
								{
									flag6 = true;
								}
								while (!flag6 && num100 < 50)
								{
									num100++;
									int num101 = Main.rand.Next(point2.X - num96, point2.X + num96 + 1);
									int num102 = Main.rand.Next(point2.Y - num96, point2.Y + num96 + 1);
									if ((num102 < point2.Y - num98 || num102 > point2.Y + num98 || num101 < point2.X - num98 || num101 > point2.X + num98) && (num102 < point.Y - num97 || num102 > point.Y + num97 || num101 < point.X - num97 || num101 > point.X + num97) && !Main.tile[num101, num102].nactive())
									{
										bool flag7 = true;
										if (flag7 && Main.tile[num101, num102].lava())
										{
											flag7 = false;
										}
										if (flag7 && Collision.SolidTiles(num101 - num99, num101 + num99, num102 - num99, num102 + num99))
										{
											flag7 = false;
										}
										if (flag7)
										{
											Projectile.NewProjectile(num101 * 16 + 8, num102 * 16 + 8, 0f, 0f, 596, 0, 1f, Main.myPlayer, target);
											flag6 = true;
											break;
										}
									}
								}
							}
						}
					}
					else if (this.ai[1] == 25f)
					{
						if (type >= 281 && type <= 286)
						{
							if (Main.netMode != 1)
							{
								float num103 = 6f;
								if (type == 285 || type == 286)
								{
									num103 = 8f;
								}
								if (type == 281 || type == 282)
								{
									num103 = 4f;
								}
								Vector2 vector11 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y);
								float num104 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector11.X;
								float num105 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector11.Y;
								if (type == 283 || type == 284)
								{
									num104 += (float)Main.rand.Next(-30, 31);
									num105 += (float)Main.rand.Next(-30, 31);
									num104 -= Main.player[target].velocity.X * 10f;
									num105 -= Main.player[target].velocity.Y * 10f;
								}
								float num106 = (float)Math.Sqrt(num104 * num104 + num105 * num105);
								num106 = num103 / num106;
								num104 *= num106;
								num105 *= num106;
								int num107 = 30;
								int num108 = 290;
								if (type == 285 || type == 286)
								{
									num108 = 291;
									num107 = 40;
								}
								if (type == 281 || type == 282)
								{
									num108 = 293;
									num107 = 40;
								}
								num107 = GetAttackDamage_ForProjectiles(num107, (float)num107 * 0.8f);
								int num109 = Projectile.NewProjectile(vector11.X, vector11.Y, num104, num105, num108, num107, 0f, Main.myPlayer);
								Main.projectile[num109].timeLeft = 300;
								if (num108 == 291)
								{
									Main.projectile[num109].ai[0] = Main.player[target].Center.X;
									Main.projectile[num109].ai[1] = Main.player[target].Center.Y;
									Main.projectile[num109].netUpdate = true;
								}
								localAI[0] = 0f;
							}
						}
						else
						{
							if (type != 172)
							{
								SoundEngine.PlaySound(SoundID.Item8, base.position);
							}
							if (Main.netMode != 1)
							{
								if (type == 29 || type == 45)
								{
									NewNPC((int)base.position.X + width / 2, (int)base.position.Y - 8, 30);
								}
								else if (type == 32)
								{
									NewNPC((int)base.position.X + width / 2, (int)base.position.Y - 8, 33);
								}
								else if (type == 172)
								{
									float num110 = 10f;
									Vector2 vector12 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
									float num111 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector12.X + (float)Main.rand.Next(-10, 11);
									float num112 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector12.Y + (float)Main.rand.Next(-10, 11);
									float num113 = (float)Math.Sqrt(num111 * num111 + num112 * num112);
									num113 = num110 / num113;
									num111 *= num113;
									num112 *= num113;
									int num114 = 40;
									int num115 = 129;
									int num116 = Projectile.NewProjectile(vector12.X, vector12.Y, num111, num112, num115, num114, 0f, Main.myPlayer);
									Main.projectile[num116].timeLeft = 300;
									localAI[0] = 0f;
								}
								else
								{
									NewNPC((int)base.position.X + width / 2 + base.direction * 8, (int)base.position.Y + 20, 25);
								}
							}
						}
					}
				}
				base.position += netOffset;
				if (type == 29 || type == 45)
				{
					if (Main.rand.Next(5) == 0)
					{
						int num117 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 27, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 1.5f);
						Main.dust[num117].noGravity = true;
						Main.dust[num117].velocity.X *= 0.5f;
						Main.dust[num117].velocity.Y = -2f;
					}
				}
				else if (type == 32)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num118 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 172, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 0.9f);
						Main.dust[num118].noGravity = true;
						Main.dust[num118].velocity.X *= 0.3f;
						Main.dust[num118].velocity.Y *= 0.2f;
						Main.dust[num118].velocity.Y -= 1f;
					}
				}
				else if (type == 172)
				{
					int num119 = 1;
					if (alpha == 255)
					{
						num119 = 2;
					}
					for (int num120 = 0; num120 < num119; num120++)
					{
						if (Main.rand.Next(255) > 255 - alpha)
						{
							int num121 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 106, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 1.2f);
							Main.dust[num121].noGravity = true;
							Main.dust[num121].velocity.X *= 0.1f + (float)Main.rand.Next(30) * 0.01f;
							Main.dust[num121].velocity.Y *= 0.1f + (float)Main.rand.Next(30) * 0.01f;
							Dust dust = Main.dust[num121];
							dust.scale *= 1f + (float)Main.rand.Next(6) * 0.1f;
						}
					}
				}
				else if (type == 283 || type == 284)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num122 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 173);
						Main.dust[num122].velocity.X *= 0.5f;
						Main.dust[num122].velocity.Y *= 0.5f;
					}
				}
				else if (type == 285 || type == 286)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num123 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 174, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100);
						Main.dust[num123].noGravity = true;
						Dust dust = Main.dust[num123];
						dust.velocity *= 0.4f;
						Main.dust[num123].velocity.Y -= 0.7f;
					}
				}
				else if (type == 281 || type == 282)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num124 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 175, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 0.1f);
						Main.dust[num124].noGravity = true;
						Dust dust = Main.dust[num124];
						dust.velocity *= 0.5f;
						Main.dust[num124].fadeIn = 1.2f;
					}
				}
				else if (type == 533)
				{
					Lighting.AddLight(base.Top, 0.6f, 0.6f, 0.3f);
				}
				else if (Main.rand.Next(2) == 0)
				{
					int num125 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num125].noGravity = true;
					Main.dust[num125].velocity.X *= 1f;
					Main.dust[num125].velocity.Y *= 1f;
				}
				base.position -= netOffset;
			}
			else if (aiStyle == 9)
			{
				if (type == 516)
				{
					if (alpha < 220)
					{
						alpha += 40;
					}
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 1f;
						Vector2 vector13 = Main.player[target].Center - base.Center;
						vector13.Normalize();
						if (vector13.HasNaNs())
						{
							vector13 = -Vector2.UnitY;
						}
						vector13 = vector13.RotatedByRandom(1.5707963705062866).RotatedBy(-0.78539818525314331);
						if (vector13.Y > 0.2f)
						{
							vector13.Y = 0.2f;
						}
						base.velocity = vector13 * (6f + Main.rand.NextFloat() * 4f);
					}
					if (collideX || collideY || Distance(Main.player[target].Center) < 20f)
					{
						StrikeNPCNoInteraction(9999, 0f, base.direction);
					}
				}
				if (target == 255)
				{
					TargetClosest();
					float num126 = 6f;
					if (type == 25)
					{
						num126 = 5f;
					}
					if (type == 112)
					{
						num126 = 7f;
					}
					Vector2 vector14 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num127 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector14.X;
					float num128 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector14.Y;
					float num129 = (float)Math.Sqrt(num127 * num127 + num128 * num128);
					num129 = num126 / num129;
					base.velocity.X = num127 * num129;
					base.velocity.Y = num128 * num129;
				}
				if (type == 112)
				{
					damage = defDamage;
					if (this.ai[1] == 1f)
					{
						damage = GetAttackDamage_ScaledByStrength(32f);
					}
					this.ai[0] += 1f;
					if (this.ai[0] > 3f)
					{
						this.ai[0] = 3f;
					}
					if (this.ai[0] == 2f)
					{
						base.position += base.velocity;
						SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 9);
						for (int num130 = 0; num130 < 20; num130++)
						{
							int num131 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f) + netOffset, width, height, 18, 0f, 0f, 100, default(Color), 1.8f);
							Dust dust = Main.dust[num131];
							dust.velocity *= 1.3f;
							dust = Main.dust[num131];
							dust.velocity += base.velocity;
							Main.dust[num131].noGravity = true;
						}
					}
				}
				if (type == 112 && Collision.SolidCollision(base.position, width, height))
				{
					_ = Main.netMode;
					_ = 1;
					StrikeNPCNoInteraction(9999, 0f, 0);
				}
				EncourageDespawn(100);
				if (type == 516)
				{
					rotation += 0.1f * (float)base.direction;
					float num132 = 15f;
					float num133 = 0.0833333358f;
					Vector2 center = base.Center;
					Vector2 center2 = Main.player[target].Center;
					Vector2 vec = center2 - center;
					vec.Normalize();
					if (vec.HasNaNs())
					{
						vec = new Vector2(base.direction, 0f);
					}
					base.velocity = (base.velocity * (num132 - 1f) + vec * (base.velocity.Length() + num133)) / num132;
					if (base.velocity.Length() < 6f)
					{
						base.velocity *= 1.05f;
					}
					return;
				}
				base.position += netOffset;
				for (int num134 = 0; num134 < 2; num134++)
				{
					if (type == 30)
					{
						alpha = 255;
						for (int num135 = 0; num135 < 2; num135++)
						{
							int num136 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 27, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 1.3f);
							Main.dust[num136].noGravity = true;
							Dust dust = Main.dust[num136];
							dust.velocity *= 0.3f;
							Main.dust[num136].velocity.X -= base.velocity.X * 0.2f;
							Main.dust[num136].velocity.Y -= base.velocity.Y * 0.2f;
						}
					}
					else if (type == 33)
					{
						for (int num137 = 0; num137 < 3; num137++)
						{
							float num138 = base.velocity.X / 3f * (float)num134;
							float num139 = base.velocity.Y / 3f * (float)num134;
							int num140 = 2;
							int num141 = Dust.NewDust(new Vector2(base.position.X + (float)num140, base.position.Y + (float)num140), width - num140 * 2, height - num140 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
							Main.dust[num141].noGravity = true;
							Dust dust = Main.dust[num141];
							dust.velocity *= 0.1f;
							dust = Main.dust[num141];
							dust.velocity += base.velocity * 0.5f;
							Main.dust[num141].position.X -= num138;
							Main.dust[num141].position.Y -= num139;
						}
						if (Main.rand.Next(5) == 0)
						{
							int num142 = 2;
							int num143 = Dust.NewDust(new Vector2(base.position.X + (float)num142, base.position.Y + (float)num142), width - num142 * 2, height - num142 * 2, 172, 0f, 0f, 100, default(Color), 0.6f);
							Dust dust = Main.dust[num143];
							dust.velocity *= 0.25f;
							dust = Main.dust[num143];
							dust.velocity += base.velocity * 0.5f;
						}
					}
					else if (type == 112)
					{
						int num144 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 18, base.velocity.X * 0.1f, base.velocity.Y * 0.1f, 80, default(Color), 1.3f);
						Dust dust = Main.dust[num144];
						dust.velocity *= 0.3f;
						Main.dust[num144].noGravity = true;
					}
					else
					{
						Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 1f, 0.3f, 0.1f);
						int num145 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num145].noGravity = true;
						Main.dust[num145].velocity.X *= 0.3f;
						Main.dust[num145].velocity.Y *= 0.3f;
					}
				}
				rotation += 0.4f * (float)base.direction;
				base.position -= netOffset;
			}
			else if (aiStyle == 10)
			{
				float num146 = 1f;
				float num147 = 0.011f;
				TargetClosest();
				Vector2 vector15 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num148 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector15.X;
				float num149 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector15.Y;
				float num150 = (float)Math.Sqrt(num148 * num148 + num149 * num149);
				float num151 = num150;
				this.ai[1] += 1f;
				if (this.ai[1] > 600f)
				{
					num147 *= 8f;
					num146 = 4f;
					if (this.ai[1] > 650f)
					{
						this.ai[1] = 0f;
					}
				}
				else if (num151 < 250f)
				{
					this.ai[0] += 0.9f;
					if (this.ai[0] > 0f)
					{
						base.velocity.Y += 0.019f;
					}
					else
					{
						base.velocity.Y -= 0.019f;
					}
					if (this.ai[0] < -100f || this.ai[0] > 100f)
					{
						base.velocity.X += 0.019f;
					}
					else
					{
						base.velocity.X -= 0.019f;
					}
					if (this.ai[0] > 200f)
					{
						this.ai[0] = -200f;
					}
				}
				if (num151 > 350f)
				{
					num146 = 5f;
					num147 = 0.3f;
				}
				else if (num151 > 300f)
				{
					num146 = 3f;
					num147 = 0.2f;
				}
				else if (num151 > 250f)
				{
					num146 = 1.5f;
					num147 = 0.1f;
				}
				num150 = num146 / num150;
				num148 *= num150;
				num149 *= num150;
				if (Main.player[target].dead)
				{
					num148 = (float)base.direction * num146 / 2f;
					num149 = (0f - num146) / 2f;
				}
				if (base.velocity.X < num148)
				{
					base.velocity.X += num147;
				}
				else if (base.velocity.X > num148)
				{
					base.velocity.X -= num147;
				}
				if (base.velocity.Y < num149)
				{
					base.velocity.Y += num147;
				}
				else if (base.velocity.Y > num149)
				{
					base.velocity.Y -= num147;
				}
				if (num148 > 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num149, num148);
				}
				if (num148 < 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num149, num148) + 3.14f;
				}
				if (type != 289)
				{
					return;
				}
				if (justHit)
				{
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				vector15 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				num148 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector15.X;
				num149 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector15.Y;
				num150 = (float)Math.Sqrt(num148 * num148 + num149 * num149);
				if (num150 <= 500f)
				{
					this.ai[2] += 1f;
					if (this.ai[3] == 0f)
					{
						if (this.ai[2] > 120f)
						{
							this.ai[2] = 0f;
							this.ai[3] = 1f;
							netUpdate = true;
						}
						return;
					}
					if (this.ai[2] > 40f)
					{
						this.ai[3] = 0f;
					}
					if (Main.netMode != 1 && this.ai[2] == 20f)
					{
						float num152 = 6f;
						int num153 = 25;
						int num154 = 299;
						num150 = num152 / num150;
						num148 *= num150;
						num149 *= num150;
						int num155 = Projectile.NewProjectile(vector15.X, vector15.Y, num148, num149, num154, num153, 0f, Main.myPlayer);
					}
				}
				else
				{
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
			}
			else if (aiStyle == 11)
			{
				defense = defDefense;
				if (this.ai[0] == 0f && Main.netMode != 1)
				{
					TargetClosest();
					this.ai[0] = 1f;
					if (type != 68)
					{
						int num156 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 36, whoAmI);
						Main.npc[num156].ai[0] = -1f;
						Main.npc[num156].ai[1] = whoAmI;
						Main.npc[num156].target = target;
						Main.npc[num156].netUpdate = true;
						num156 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 36, whoAmI);
						Main.npc[num156].ai[0] = 1f;
						Main.npc[num156].ai[1] = whoAmI;
						Main.npc[num156].ai[3] = 150f;
						Main.npc[num156].target = target;
						Main.npc[num156].netUpdate = true;
					}
				}
				if ((type == 68 || Main.netMode == 1) && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
				}
				if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 2000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
				{
					TargetClosest();
					if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 2000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
					{
						this.ai[1] = 3f;
					}
				}
				if ((type == 68 || Main.dayTime) && this.ai[1] != 3f && this.ai[1] != 2f)
				{
					this.ai[1] = 2f;
					SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
				}
				int num157 = 0;
				if (Main.expertMode)
				{
					for (int num158 = 0; num158 < 200; num158++)
					{
						if (Main.npc[num158].active && Main.npc[num158].type == type + 1)
						{
							num157++;
						}
					}
					defense += num157 * 25;
					if ((num157 < 2 || (double)life < (double)lifeMax * 0.75) && this.ai[1] == 0f)
					{
						float num159 = 80f;
						if (num157 == 0)
						{
							num159 /= 2f;
						}
						if (Main.getGoodWorld)
						{
							num159 *= 0.8f;
						}
						if (Main.netMode != 1 && this.ai[2] % num159 == 0f)
						{
							Vector2 center3 = base.Center;
							float num160 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - center3.X;
							float num161 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - center3.Y;
							float num162 = (float)Math.Sqrt(num160 * num160 + num161 * num161);
							if (Collision.CanHit(center3, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
							{
								float num163 = 3f;
								if (num157 == 0)
								{
									num163 += 2f;
								}
								float num164 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - center3.X + (float)Main.rand.Next(-20, 21);
								float num165 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - center3.Y + (float)Main.rand.Next(-20, 21);
								float num166 = (float)Math.Sqrt(num164 * num164 + num165 * num165);
								num166 = num163 / num166;
								num164 *= num166;
								num165 *= num166;
								Vector2 vector16 = new Vector2(num164 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f, num165 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f);
								vector16.Normalize();
								vector16 *= num163;
								vector16 += base.velocity;
								num164 = vector16.X;
								num165 = vector16.Y;
								int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(17f, 17f);
								int num167 = 270;
								center3 += vector16 * 5f;
								int num168 = Projectile.NewProjectile(center3.X, center3.Y, num164, num165, num167, attackDamage_ForProjectiles, 0f, Main.myPlayer, -1f);
								Main.projectile[num168].timeLeft = 300;
							}
						}
					}
				}
				if (this.ai[1] == 0f)
				{
					damage = defDamage;
					this.ai[2] += 1f;
					if (this.ai[2] >= 800f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 1f;
						TargetClosest();
						netUpdate = true;
					}
					rotation = base.velocity.X / 15f;
					float num169 = 0.02f;
					float num170 = 2f;
					float num171 = 0.05f;
					float num172 = 8f;
					if (Main.expertMode)
					{
						num169 = 0.03f;
						num170 = 4f;
						num171 = 0.07f;
						num172 = 9.5f;
					}
					if (Main.getGoodWorld)
					{
						num169 += 0.01f;
						num170 += 1f;
						num171 += 0.05f;
						num172 += 2f;
					}
					if (base.position.Y > Main.player[target].position.Y - 250f)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.98f;
						}
						base.velocity.Y -= num169;
						if (base.velocity.Y > num170)
						{
							base.velocity.Y = num170;
						}
					}
					else if (base.position.Y < Main.player[target].position.Y - 250f)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.98f;
						}
						base.velocity.Y += num169;
						if (base.velocity.Y < 0f - num170)
						{
							base.velocity.Y = 0f - num170;
						}
					}
					if (base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2))
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.98f;
						}
						base.velocity.X -= num171;
						if (base.velocity.X > num172)
						{
							base.velocity.X = num172;
						}
					}
					if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.98f;
						}
						base.velocity.X += num171;
						if (base.velocity.X < 0f - num172)
						{
							base.velocity.X = 0f - num172;
						}
					}
				}
				else if (this.ai[1] == 1f)
				{
					defense -= 10;
					this.ai[2] += 1f;
					if (this.ai[2] == 2f)
					{
						SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
					}
					if (this.ai[2] >= 400f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 0f;
					}
					rotation += (float)base.direction * 0.3f;
					Vector2 vector17 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num173 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector17.X;
					float num174 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector17.Y;
					float num175 = (float)Math.Sqrt(num173 * num173 + num174 * num174);
					float num176 = 1.5f;
					damage = GetAttackDamage_LerpBetweenFinalValues(defDamage, (float)defDamage * 1.3f);
					if (Main.expertMode)
					{
						num176 = 3.5f;
						if (num175 > 150f)
						{
							num176 *= 1.05f;
						}
						if (num175 > 200f)
						{
							num176 *= 1.1f;
						}
						if (num175 > 250f)
						{
							num176 *= 1.1f;
						}
						if (num175 > 300f)
						{
							num176 *= 1.1f;
						}
						if (num175 > 350f)
						{
							num176 *= 1.1f;
						}
						if (num175 > 400f)
						{
							num176 *= 1.1f;
						}
						if (num175 > 450f)
						{
							num176 *= 1.1f;
						}
						if (num175 > 500f)
						{
							num176 *= 1.1f;
						}
						if (num175 > 550f)
						{
							num176 *= 1.1f;
						}
						if (num175 > 600f)
						{
							num176 *= 1.1f;
						}
						switch (num157)
						{
						case 0:
							num176 *= 1.1f;
							break;
						case 1:
							num176 *= 1.05f;
							break;
						}
					}
					if (Main.getGoodWorld)
					{
						num176 *= 1.3f;
					}
					num175 = num176 / num175;
					base.velocity.X = num173 * num175;
					base.velocity.Y = num174 * num175;
				}
				else if (this.ai[1] == 2f)
				{
					damage = 1000;
					defense = 9999;
					rotation += (float)base.direction * 0.3f;
					Vector2 vector18 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num177 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector18.X;
					float num178 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector18.Y;
					float num179 = (float)Math.Sqrt(num177 * num177 + num178 * num178);
					num179 = 8f / num179;
					base.velocity.X = num177 * num179;
					base.velocity.Y = num178 * num179;
				}
				else if (this.ai[1] == 3f)
				{
					base.velocity.Y += 0.1f;
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.X *= 0.95f;
					EncourageDespawn(50);
				}
				if (this.ai[1] != 2f && this.ai[1] != 3f && type != 68 && (num157 != 0 || !Main.expertMode))
				{
					int num180 = Dust.NewDust(new Vector2(base.position.X + (float)(width / 2) - 15f - base.velocity.X * 5f, base.position.Y + (float)height - 2f), 30, 10, 5, (0f - base.velocity.X) * 0.2f, 3f, 0, default(Color), 2f);
					Main.dust[num180].noGravity = true;
					Main.dust[num180].velocity.X *= 1.3f;
					Main.dust[num180].velocity.X += base.velocity.X * 0.4f;
					Main.dust[num180].velocity.Y += 2f + base.velocity.Y;
					for (int num181 = 0; num181 < 2; num181++)
					{
						num180 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 120f), width, 60, 5, base.velocity.X, base.velocity.Y, 0, default(Color), 2f);
						Main.dust[num180].noGravity = true;
						Dust dust = Main.dust[num180];
						dust.velocity -= base.velocity;
						Main.dust[num180].velocity.Y += 5f;
					}
				}
			}
			else if (aiStyle == 12)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 11)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.07f;
							if (base.velocity.Y > 6f)
							{
								base.velocity.Y = 6f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.07f;
							if (base.velocity.Y < -6f)
							{
								base.velocity.Y = -6f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.1f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (Main.expertMode)
						{
							this.ai[3] += 0.5f;
						}
						if (this.ai[3] >= 300f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (Main.expertMode)
						{
							if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
							{
								if (base.velocity.Y > 0f)
								{
									base.velocity.Y *= 0.96f;
								}
								base.velocity.Y -= 0.04f;
								if (base.velocity.Y > 3f)
								{
									base.velocity.Y = 3f;
								}
							}
							else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
							{
								if (base.velocity.Y < 0f)
								{
									base.velocity.Y *= 0.96f;
								}
								base.velocity.Y += 0.04f;
								if (base.velocity.Y < -3f)
								{
									base.velocity.Y = -3f;
								}
							}
							if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
							{
								if (base.velocity.X > 0f)
								{
									base.velocity.X *= 0.96f;
								}
								base.velocity.X -= 0.07f;
								if (base.velocity.X > 8f)
								{
									base.velocity.X = 8f;
								}
							}
							if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
							{
								if (base.velocity.X < 0f)
								{
									base.velocity.X *= 0.96f;
								}
								base.velocity.X += 0.07f;
								if (base.velocity.X < -8f)
								{
									base.velocity.X = -8f;
								}
							}
						}
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.04f;
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.04f;
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.07f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.07f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					Vector2 vector19 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num182 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector19.X;
					float num183 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector19.Y;
					float num184 = (float)Math.Sqrt(num182 * num182 + num183 * num183);
					rotation = (float)Math.Atan2(num183, num182) + 1.57f;
				}
				else if (this.ai[2] == 1f)
				{
					Vector2 vector20 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num185 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector20.X;
					float num186 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector20.Y;
					float num187 = (float)Math.Sqrt(num185 * num185 + num186 * num186);
					rotation = (float)Math.Atan2(num186, num185) + 1.57f;
					base.velocity.X *= 0.95f;
					base.velocity.Y -= 0.1f;
					if (Main.expertMode)
					{
						base.velocity.Y -= 0.06f;
						if (base.velocity.Y < -13f)
						{
							base.velocity.Y = -13f;
						}
					}
					else if (base.velocity.Y < -8f)
					{
						base.velocity.Y = -8f;
					}
					if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector20 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num185 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector20.X;
						num186 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector20.Y;
						num187 = (float)Math.Sqrt(num185 * num185 + num186 * num186);
						num187 = ((!Main.expertMode) ? (18f / num187) : (21f / num187));
						base.velocity.X = num185 * num187;
						base.velocity.Y = num186 * num187;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f)
					{
						this.ai[2] = 3f;
					}
				}
				else if (this.ai[2] == 4f)
				{
					Vector2 vector21 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num188 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector21.X;
					float num189 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector21.Y;
					float num190 = (float)Math.Sqrt(num188 * num188 + num189 * num189);
					rotation = (float)Math.Atan2(num189, num188) + 1.57f;
					base.velocity.Y *= 0.95f;
					base.velocity.X += 0.1f * (0f - this.ai[0]);
					if (Main.expertMode)
					{
						base.velocity.X += 0.07f * (0f - this.ai[0]);
						if (base.velocity.X < -12f)
						{
							base.velocity.X = -12f;
						}
						else if (base.velocity.X > 12f)
						{
							base.velocity.X = 12f;
						}
					}
					else if (base.velocity.X < -8f)
					{
						base.velocity.X = -8f;
					}
					else if (base.velocity.X > 8f)
					{
						base.velocity.X = 8f;
					}
					if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
					{
						TargetClosest();
						this.ai[2] = 5f;
						vector21 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num188 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector21.X;
						num189 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector21.Y;
						num190 = (float)Math.Sqrt(num188 * num188 + num189 * num189);
						num190 = ((!Main.expertMode) ? (17f / num190) : (22f / num190));
						base.velocity.X = num188 * num190;
						base.velocity.Y = num189 * num190;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 5f && ((base.velocity.X > 0f && base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (base.velocity.X < 0f && base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))))
				{
					this.ai[2] = 0f;
				}
			}
			else if (aiStyle == 13)
			{
				if (this.ai[0] < 0f || this.ai[0] >= (float)Main.maxTilesX || this.ai[1] < 0f || this.ai[1] >= (float)Main.maxTilesX)
				{
					return;
				}
				if (Main.tile[(int)this.ai[0], (int)this.ai[1]] == null)
				{
					Main.tile[(int)this.ai[0], (int)this.ai[1]] = new Tile();
				}
				if (!Main.tile[(int)this.ai[0], (int)this.ai[1]].active())
				{
					life = -1;
					HitEffect();
					active = false;
					return;
				}
				FixExploitManEaters.ProtectSpot((int)this.ai[0], (int)this.ai[1]);
				TargetClosest();
				float num191 = 0.035f;
				float num192 = 150f;
				if (type == 43)
				{
					num192 = 250f;
				}
				if (type == 101)
				{
					num192 = 175f;
				}
				if (type == 259)
				{
					num192 = 100f;
				}
				if (type == 175)
				{
					num192 = 500f;
					num191 = 0.05f;
				}
				if (type == 260)
				{
					num192 = 350f;
					num191 = 0.15f;
				}
				this.ai[2] += 1f;
				if (this.ai[2] > 300f)
				{
					num192 = (int)((double)num192 * 1.3);
					if (this.ai[2] > 450f)
					{
						this.ai[2] = 0f;
					}
				}
				Vector2 vector22 = new Vector2(this.ai[0] * 16f + 8f, this.ai[1] * 16f + 8f);
				float num193 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - (float)(width / 2) - vector22.X;
				float num194 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - (float)(height / 2) - vector22.Y;
				float num195 = (float)Math.Sqrt(num193 * num193 + num194 * num194);
				if (num195 > num192)
				{
					num195 = num192 / num195;
					num193 *= num195;
					num194 *= num195;
				}
				if (base.position.X < this.ai[0] * 16f + 8f + num193)
				{
					base.velocity.X += num191;
					if (base.velocity.X < 0f && num193 > 0f)
					{
						base.velocity.X += num191 * 1.5f;
					}
				}
				else if (base.position.X > this.ai[0] * 16f + 8f + num193)
				{
					base.velocity.X -= num191;
					if (base.velocity.X > 0f && num193 < 0f)
					{
						base.velocity.X -= num191 * 1.5f;
					}
				}
				if (base.position.Y < this.ai[1] * 16f + 8f + num194)
				{
					base.velocity.Y += num191;
					if (base.velocity.Y < 0f && num194 > 0f)
					{
						base.velocity.Y += num191 * 1.5f;
					}
				}
				else if (base.position.Y > this.ai[1] * 16f + 8f + num194)
				{
					base.velocity.Y -= num191;
					if (base.velocity.Y > 0f && num194 < 0f)
					{
						base.velocity.Y -= num191 * 1.5f;
					}
				}
				if (type == 43)
				{
					if (base.velocity.X > 3f)
					{
						base.velocity.X = 3f;
					}
					if (base.velocity.X < -3f)
					{
						base.velocity.X = -3f;
					}
					if (base.velocity.Y > 3f)
					{
						base.velocity.Y = 3f;
					}
					if (base.velocity.Y < -3f)
					{
						base.velocity.Y = -3f;
					}
				}
				else if (type == 175)
				{
					if (base.velocity.X > 4f)
					{
						base.velocity.X = 4f;
					}
					if (base.velocity.X < -4f)
					{
						base.velocity.X = -4f;
					}
					if (base.velocity.Y > 4f)
					{
						base.velocity.Y = 4f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				else
				{
					if (base.velocity.X > 2f)
					{
						base.velocity.X = 2f;
					}
					if (base.velocity.X < -2f)
					{
						base.velocity.X = -2f;
					}
					if (base.velocity.Y > 2f)
					{
						base.velocity.Y = 2f;
					}
					if (base.velocity.Y < -2f)
					{
						base.velocity.Y = -2f;
					}
				}
				if (type == 259 || type == 260)
				{
					rotation = (float)Math.Atan2(num194, num193) + 1.57f;
				}
				else
				{
					if (num193 > 0f)
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(num194, num193);
					}
					if (num193 < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(num194, num193) + 3.14f;
					}
				}
				if (collideX)
				{
					netUpdate = true;
					base.velocity.X = oldVelocity.X * -0.7f;
					if (base.velocity.X > 0f && base.velocity.X < 2f)
					{
						base.velocity.X = 2f;
					}
					if (base.velocity.X < 0f && base.velocity.X > -2f)
					{
						base.velocity.X = -2f;
					}
				}
				if (collideY)
				{
					netUpdate = true;
					base.velocity.Y = oldVelocity.Y * -0.7f;
					if (base.velocity.Y > 0f && base.velocity.Y < 2f)
					{
						base.velocity.Y = 2f;
					}
					if (base.velocity.Y < 0f && base.velocity.Y > -2f)
					{
						base.velocity.Y = -2f;
					}
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (type == 101 && !Main.player[target].dead)
				{
					if (justHit)
					{
						localAI[0] = 0f;
					}
					localAI[0] += 1f;
					if (localAI[0] >= 120f)
					{
						if (!Collision.SolidCollision(base.position, width, height) && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							float num196 = 10f;
							vector22 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							num193 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector22.X + (float)Main.rand.Next(-10, 11);
							num194 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector22.Y + (float)Main.rand.Next(-10, 11);
							num195 = (float)Math.Sqrt(num193 * num193 + num194 * num194);
							num195 = num196 / num195;
							num193 *= num195;
							num194 *= num195;
							int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(22f, 17.6f);
							int num197 = 96;
							int num198 = Projectile.NewProjectile(vector22.X, vector22.Y, num193, num194, num197, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
							Main.projectile[num198].timeLeft = 300;
							localAI[0] = 0f;
						}
						else
						{
							localAI[0] = 100f;
						}
					}
				}
				if (type != 260 || Main.player[target].dead)
				{
					return;
				}
				if (justHit)
				{
					localAI[0] = 0f;
				}
				localAI[0] += 1f;
				if (!(localAI[0] >= 150f))
				{
					return;
				}
				if (!Collision.SolidCollision(base.position, width, height))
				{
					float num199 = 14f;
					vector22 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					num193 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector22.X + (float)Main.rand.Next(-10, 11);
					float num200 = Math.Abs(num193 * 0.1f);
					if (num194 > 0f)
					{
						num200 = 0f;
					}
					num194 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector22.Y + (float)Main.rand.Next(-10, 11) - num200;
					num195 = (float)Math.Sqrt(num193 * num193 + num194 * num194);
					num195 = num199 / num195;
					num193 *= num195;
					num194 *= num195;
					int num201 = NewNPC((int)base.Center.X, (int)base.Center.Y, 261);
					Main.npc[num201].velocity.X = num193;
					Main.npc[num201].velocity.Y = num194;
					Main.npc[num201].netUpdate = true;
					localAI[0] = 0f;
				}
				else
				{
					localAI[0] = 250f;
				}
			}
			else if (aiStyle == 14)
			{
				noGravity = true;
				if (collideX)
				{
					base.velocity.X = oldVelocity.X * -0.5f;
					if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
					{
						base.velocity.X = 2f;
					}
					if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
					{
						base.velocity.X = -2f;
					}
				}
				if (collideY)
				{
					base.velocity.Y = oldVelocity.Y * -0.5f;
					if (base.velocity.Y > 0f && base.velocity.Y < 1f)
					{
						base.velocity.Y = 1f;
					}
					if (base.velocity.Y < 0f && base.velocity.Y > -1f)
					{
						base.velocity.Y = -1f;
					}
				}
				if (type == 226)
				{
					int direction = 1;
					int num202 = 1;
					if (base.velocity.X < 0f)
					{
						direction = -1;
					}
					if (base.velocity.Y < 0f)
					{
						num202 = -1;
					}
					TargetClosest();
					if (!Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						base.direction = direction;
						directionY = num202;
					}
				}
				else
				{
					TargetClosest();
				}
				if (type == 158)
				{
					if ((double)base.position.Y < Main.worldSurface * 16.0 && Main.dayTime && !Main.eclipse)
					{
						directionY = -1;
						base.direction *= -1;
					}
					if (base.direction == -1 && base.velocity.X > -7f)
					{
						base.velocity.X -= 0.2f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X < -7f)
						{
							base.velocity.X = -7f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 7f)
					{
						base.velocity.X += 0.2f;
						if (base.velocity.X < -4f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X > 7f)
						{
							base.velocity.X = 7f;
						}
					}
					if (directionY == -1 && base.velocity.Y > -7f)
					{
						base.velocity.Y -= 0.2f;
						if (base.velocity.Y > 4f)
						{
							base.velocity.Y -= 0.1f;
						}
						else if (base.velocity.Y > 0f)
						{
							base.velocity.Y += 0.05f;
						}
						if (base.velocity.Y < -7f)
						{
							base.velocity.Y = -7f;
						}
					}
					else if (directionY == 1 && base.velocity.Y < 7f)
					{
						base.velocity.Y += 0.2f;
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y += 0.1f;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y -= 0.05f;
						}
						if (base.velocity.Y > 7f)
						{
							base.velocity.Y = 7f;
						}
					}
				}
				else if (type == 226)
				{
					if (base.direction == -1 && base.velocity.X > -4f)
					{
						base.velocity.X -= 0.2f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 4f)
					{
						base.velocity.X += 0.2f;
						if (base.velocity.X < -4f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
					}
					if (directionY == -1 && (double)base.velocity.Y > -2.5)
					{
						base.velocity.Y -= 0.1f;
						if ((double)base.velocity.Y > 2.5)
						{
							base.velocity.Y -= 0.05f;
						}
						else if (base.velocity.Y > 0f)
						{
							base.velocity.Y += 0.03f;
						}
						if ((double)base.velocity.Y < -2.5)
						{
							base.velocity.Y = -2.5f;
						}
					}
					else if (directionY == 1 && (double)base.velocity.Y < 2.5)
					{
						base.velocity.Y += 0.1f;
						if ((double)base.velocity.Y < -2.5)
						{
							base.velocity.Y += 0.05f;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y -= 0.03f;
						}
						if ((double)base.velocity.Y > 2.5)
						{
							base.velocity.Y = 2.5f;
						}
					}
				}
				else if (type == 660)
				{
					float num203 = 0.1f;
					float num204 = 0.04f;
					float num205 = 4f;
					float num206 = 1.5f;
					int num207 = type;
					if (num207 == 660)
					{
						num203 = 0.35f;
						num204 = 0.3f;
						num205 = 6f;
						num206 = 5f;
					}
					if (base.direction == -1 && base.velocity.X > 0f - num205)
					{
						base.velocity.X -= num203;
						if (base.velocity.X > num205)
						{
							base.velocity.X -= num203;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X += num203 * 0.5f;
						}
						if (base.velocity.X < 0f - num205)
						{
							base.velocity.X = 0f - num205;
						}
					}
					else if (base.direction == 1 && base.velocity.X < num205)
					{
						base.velocity.X += num203;
						if (base.velocity.X < 0f - num205)
						{
							base.velocity.X += num203;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X -= num203 * 0.5f;
						}
						if (base.velocity.X > num205)
						{
							base.velocity.X = num205;
						}
					}
					if (directionY == -1 && base.velocity.Y > 0f - num206)
					{
						base.velocity.Y -= num204;
						if (base.velocity.Y > num206)
						{
							base.velocity.Y -= num204;
						}
						else if (base.velocity.Y > 0f)
						{
							base.velocity.Y += num204 * 0.75f;
						}
						if (base.velocity.Y < 0f - num206)
						{
							base.velocity.Y = 0f - num206;
						}
					}
					else if (directionY == 1 && base.velocity.Y < num206)
					{
						base.velocity.Y += num204;
						if (base.velocity.Y < 0f - num206)
						{
							base.velocity.Y += num204;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y -= num204 * 0.75f;
						}
						if (base.velocity.Y > num206)
						{
							base.velocity.Y = num206;
						}
					}
				}
				else
				{
					if (base.direction == -1 && base.velocity.X > -4f)
					{
						base.velocity.X -= 0.1f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 4f)
					{
						base.velocity.X += 0.1f;
						if (base.velocity.X < -4f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
					}
					if (directionY == -1 && (double)base.velocity.Y > -1.5)
					{
						base.velocity.Y -= 0.04f;
						if ((double)base.velocity.Y > 1.5)
						{
							base.velocity.Y -= 0.05f;
						}
						else if (base.velocity.Y > 0f)
						{
							base.velocity.Y += 0.03f;
						}
						if ((double)base.velocity.Y < -1.5)
						{
							base.velocity.Y = -1.5f;
						}
					}
					else if (directionY == 1 && (double)base.velocity.Y < 1.5)
					{
						base.velocity.Y += 0.04f;
						if ((double)base.velocity.Y < -1.5)
						{
							base.velocity.Y += 0.05f;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y -= 0.03f;
						}
						if ((double)base.velocity.Y > 1.5)
						{
							base.velocity.Y = 1.5f;
						}
					}
				}
				if (type == 49 || type == 51 || type == 60 || type == 62 || type == 66 || type == 93 || type == 137 || type == 150 || type == 151 || type == 152 || type == 634)
				{
					if (wet)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.95f;
						}
						base.velocity.Y -= 0.5f;
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y = -4f;
						}
						TargetClosest();
					}
					if (type == 60)
					{
						if (base.direction == -1 && base.velocity.X > -4f)
						{
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 4f)
							{
								base.velocity.X -= 0.07f;
							}
							else if (base.velocity.X > 0f)
							{
								base.velocity.X += 0.03f;
							}
							if (base.velocity.X < -4f)
							{
								base.velocity.X = -4f;
							}
						}
						else if (base.direction == 1 && base.velocity.X < 4f)
						{
							base.velocity.X += 0.1f;
							if (base.velocity.X < -4f)
							{
								base.velocity.X += 0.07f;
							}
							else if (base.velocity.X < 0f)
							{
								base.velocity.X -= 0.03f;
							}
							if (base.velocity.X > 4f)
							{
								base.velocity.X = 4f;
							}
						}
						if (directionY == -1 && (double)base.velocity.Y > -1.5)
						{
							base.velocity.Y -= 0.04f;
							if ((double)base.velocity.Y > 1.5)
							{
								base.velocity.Y -= 0.03f;
							}
							else if (base.velocity.Y > 0f)
							{
								base.velocity.Y += 0.02f;
							}
							if ((double)base.velocity.Y < -1.5)
							{
								base.velocity.Y = -1.5f;
							}
						}
						else if (directionY == 1 && (double)base.velocity.Y < 1.5)
						{
							base.velocity.Y += 0.04f;
							if ((double)base.velocity.Y < -1.5)
							{
								base.velocity.Y += 0.03f;
							}
							else if (base.velocity.Y < 0f)
							{
								base.velocity.Y -= 0.02f;
							}
							if ((double)base.velocity.Y > 1.5)
							{
								base.velocity.Y = 1.5f;
							}
						}
					}
					else
					{
						if (base.direction == -1 && base.velocity.X > -4f)
						{
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 4f)
							{
								base.velocity.X -= 0.1f;
							}
							else if (base.velocity.X > 0f)
							{
								base.velocity.X += 0.05f;
							}
							if (base.velocity.X < -4f)
							{
								base.velocity.X = -4f;
							}
						}
						else if (base.direction == 1 && base.velocity.X < 4f)
						{
							base.velocity.X += 0.1f;
							if (base.velocity.X < -4f)
							{
								base.velocity.X += 0.1f;
							}
							else if (base.velocity.X < 0f)
							{
								base.velocity.X -= 0.05f;
							}
							if (base.velocity.X > 4f)
							{
								base.velocity.X = 4f;
							}
						}
						if (directionY == -1 && (double)base.velocity.Y > -1.5)
						{
							base.velocity.Y -= 0.04f;
							if ((double)base.velocity.Y > 1.5)
							{
								base.velocity.Y -= 0.05f;
							}
							else if (base.velocity.Y > 0f)
							{
								base.velocity.Y += 0.03f;
							}
							if ((double)base.velocity.Y < -1.5)
							{
								base.velocity.Y = -1.5f;
							}
						}
						else if (directionY == 1 && (double)base.velocity.Y < 1.5)
						{
							base.velocity.Y += 0.04f;
							if ((double)base.velocity.Y < -1.5)
							{
								base.velocity.Y += 0.05f;
							}
							else if (base.velocity.Y < 0f)
							{
								base.velocity.Y -= 0.03f;
							}
							if ((double)base.velocity.Y > 1.5)
							{
								base.velocity.Y = 1.5f;
							}
						}
					}
				}
				if (type == 48 && wet)
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.5f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
					TargetClosest();
				}
				if (type == 158 && Main.netMode != 1)
				{
					Vector2 vector23 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num208 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector23.X;
					float num209 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector23.Y;
					float num210 = (float)Math.Sqrt(num208 * num208 + num209 * num209);
					if (num210 < 200f && base.position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						Transform(159);
					}
				}
				this.ai[1] += 1f;
				if (type == 158)
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] > 200f)
				{
					if (!Main.player[target].wet && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						this.ai[1] = 0f;
					}
					float num211 = 0.2f;
					float num212 = 0.1f;
					float num213 = 4f;
					float num214 = 1.5f;
					if (type == 48 || type == 62 || type == 66)
					{
						num211 = 0.12f;
						num212 = 0.07f;
						num213 = 3f;
						num214 = 1.25f;
					}
					if (this.ai[1] > 1000f)
					{
						this.ai[1] = 0f;
					}
					this.ai[2] += 1f;
					if (this.ai[2] > 0f)
					{
						if (base.velocity.Y < num214)
						{
							base.velocity.Y += num212;
						}
					}
					else if (base.velocity.Y > 0f - num214)
					{
						base.velocity.Y -= num212;
					}
					if (this.ai[2] < -150f || this.ai[2] > 150f)
					{
						if (base.velocity.X < num213)
						{
							base.velocity.X += num211;
						}
					}
					else if (base.velocity.X > 0f - num213)
					{
						base.velocity.X -= num211;
					}
					if (this.ai[2] > 300f)
					{
						this.ai[2] = -300f;
					}
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (type == 48)
				{
					this.ai[0] += 1f;
					if (this.ai[0] == 30f || this.ai[0] == 60f || this.ai[0] == 90f)
					{
						if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							float num215 = 6f;
							Vector2 vector24 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num216 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector24.X + (float)Main.rand.Next(-100, 101);
							float num217 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector24.Y + (float)Main.rand.Next(-100, 101);
							float num218 = (float)Math.Sqrt(num216 * num216 + num217 * num217);
							num218 = num215 / num218;
							num216 *= num218;
							num217 *= num218;
							int num219 = 15;
							int num220 = 38;
							int num221 = Projectile.NewProjectile(vector24.X, vector24.Y, num216, num217, num220, num219, 0f, Main.myPlayer);
							Main.projectile[num221].timeLeft = 300;
						}
					}
					else if (this.ai[0] >= (float)(400 + Main.rand.Next(400)))
					{
						this.ai[0] = 0f;
					}
				}
				if (type == 62 || type == 66)
				{
					this.ai[0] += 1f;
					if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f)
					{
						if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							float num222 = 0.2f;
							Vector2 vector25 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num223 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector25.X + (float)Main.rand.Next(-100, 101);
							float num224 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector25.Y + (float)Main.rand.Next(-100, 101);
							float num225 = (float)Math.Sqrt(num223 * num223 + num224 * num224);
							num225 = num222 / num225;
							num223 *= num225;
							num224 *= num225;
							int num226 = 21;
							int num227 = 44;
							int num228 = Projectile.NewProjectile(vector25.X, vector25.Y, num223, num224, num227, num226, 0f, Main.myPlayer);
							Main.projectile[num228].timeLeft = 300;
						}
					}
					else if (this.ai[0] >= (float)(300 + Main.rand.Next(300)))
					{
						this.ai[0] = 0f;
					}
				}
				if (type != 156)
				{
					return;
				}
				this.ai[0] += 1f;
				if (this.ai[0] == 20f || this.ai[0] == 40f || this.ai[0] == 60f || this.ai[0] == 80f || this.ai[0] == 100f)
				{
					if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num229 = 0.2f;
						Vector2 vector26 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num230 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector26.X + (float)Main.rand.Next(-50, 51);
						float num231 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector26.Y + (float)Main.rand.Next(-50, 51);
						float num232 = (float)Math.Sqrt(num230 * num230 + num231 * num231);
						num232 = num229 / num232;
						num230 *= num232;
						num231 *= num232;
						int num233 = 80;
						int num234 = 115;
						vector26 += base.velocity * 5f;
						int num235 = Projectile.NewProjectile(vector26.X + num230 * 100f, vector26.Y + num231 * 100f, num230, num231, num234, num233, 0f, Main.myPlayer);
						Main.projectile[num235].timeLeft = 300;
					}
				}
				else if (this.ai[0] >= (float)(250 + Main.rand.Next(250)))
				{
					this.ai[0] = 0f;
				}
			}
			else if (aiStyle == 15)
			{
				float num236 = 1f;
				bool flag8 = false;
				bool flag9 = false;
				float num237 = 2f;
				if (Main.getGoodWorld)
				{
					num237 -= 1f - (float)life / (float)lifeMax;
					num236 *= num237;
				}
				aiAction = 0;
				if (this.ai[3] == 0f && life > 0)
				{
					this.ai[3] = lifeMax;
				}
				if (localAI[3] == 0f && Main.netMode != 1)
				{
					this.ai[0] = -100f;
					localAI[3] = 1f;
					TargetClosest();
					netUpdate = true;
				}
				int num238 = 3000;
				if (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > (float)num238)
				{
					TargetClosest();
					if (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > (float)num238)
					{
						EncourageDespawn(10);
						if (Main.player[target].Center.X < base.Center.X)
						{
							base.direction = 1;
						}
						else
						{
							base.direction = -1;
						}
						if (Main.netMode != 1 && this.ai[1] != 5f)
						{
							netUpdate = true;
							this.ai[2] = 0f;
							this.ai[0] = 0f;
							this.ai[1] = 5f;
							localAI[1] = Main.maxTilesX * 16;
							localAI[2] = Main.maxTilesY * 16;
						}
					}
				}
				if (!Main.player[target].dead && timeLeft > 10 && this.ai[2] >= 300f && this.ai[1] < 5f && base.velocity.Y == 0f)
				{
					this.ai[2] = 0f;
					this.ai[0] = 0f;
					this.ai[1] = 5f;
					if (Main.netMode != 1)
					{
						TargetClosest(faceTarget: false);
						Point point3 = base.Center.ToTileCoordinates();
						Point point4 = Main.player[target].Center.ToTileCoordinates();
						Vector2 vector27 = Main.player[target].Center - base.Center;
						int num239 = 10;
						int num240 = 0;
						int num241 = 7;
						int num242 = 0;
						bool flag10 = false;
						if (localAI[0] >= 360f || vector27.Length() > 2000f)
						{
							if (localAI[0] >= 360f)
							{
								localAI[0] = 360f;
							}
							flag10 = true;
							num242 = 100;
						}
						while (!flag10 && num242 < 100)
						{
							num242++;
							int num243 = Main.rand.Next(point4.X - num239, point4.X + num239 + 1);
							int num244 = Main.rand.Next(point4.Y - num239, point4.Y + 1);
							if ((num244 >= point4.Y - num241 && num244 <= point4.Y + num241 && num243 >= point4.X - num241 && num243 <= point4.X + num241) || (num244 >= point3.Y - num240 && num244 <= point3.Y + num240 && num243 >= point3.X - num240 && num243 <= point3.X + num240) || Main.tile[num243, num244].nactive())
							{
								continue;
							}
							int num245 = num244;
							int num246 = 0;
							if (Main.tile[num243, num245].nactive() && Main.tileSolid[Main.tile[num243, num245].type] && !Main.tileSolidTop[Main.tile[num243, num245].type])
							{
								num246 = 1;
							}
							else
							{
								for (; num246 < 150 && num245 + num246 < Main.maxTilesY; num246++)
								{
									int num247 = num245 + num246;
									if (Main.tile[num243, num247].nactive() && Main.tileSolid[Main.tile[num243, num247].type] && !Main.tileSolidTop[Main.tile[num243, num247].type])
									{
										num246--;
										break;
									}
								}
							}
							num244 += num246;
							bool flag11 = true;
							if (flag11 && Main.tile[num243, num244].lava())
							{
								flag11 = false;
							}
							if (flag11 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
							{
								flag11 = false;
							}
							if (flag11)
							{
								localAI[1] = num243 * 16 + 8;
								localAI[2] = num244 * 16 + 16;
								flag10 = true;
								break;
							}
						}
						if (num242 >= 100)
						{
							Vector2 bottom = Main.player[Player.FindClosest(base.position, width, height)].Bottom;
							localAI[1] = bottom.X;
							localAI[2] = bottom.Y;
						}
					}
				}
				if (!Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0) || Math.Abs(base.Top.Y - Main.player[target].Bottom.Y) > 160f)
				{
					this.ai[2]++;
					if (Main.netMode != 1)
					{
						localAI[0]++;
					}
				}
				else if (Main.netMode != 1)
				{
					localAI[0]--;
					if (localAI[0] < 0f)
					{
						localAI[0] = 0f;
					}
				}
				if (timeLeft < 10 && (this.ai[0] != 0f || this.ai[1] != 0f))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
					flag8 = false;
				}
				Dust dust;
				if (this.ai[1] == 5f)
				{
					flag8 = true;
					aiAction = 1;
					this.ai[0]++;
					num236 = MathHelper.Clamp((60f - this.ai[0]) / 60f, 0f, 1f);
					num236 = 0.5f + num236 * 0.5f;
					if (Main.getGoodWorld)
					{
						num236 *= num237;
					}
					if (this.ai[0] >= 60f)
					{
						flag9 = true;
					}
					if (this.ai[0] == 60f)
					{
						Gore.NewGore(base.Center + new Vector2(-40f, -height / 2), base.velocity, 734);
					}
					if (this.ai[0] >= 60f && Main.netMode != 1)
					{
						base.Bottom = new Vector2(localAI[1], localAI[2]);
						this.ai[1] = 6f;
						this.ai[0] = 0f;
						netUpdate = true;
					}
					if (Main.netMode == 1 && this.ai[0] >= 120f)
					{
						this.ai[1] = 6f;
						this.ai[0] = 0f;
					}
					if (!flag9)
					{
						for (int num248 = 0; num248 < 10; num248++)
						{
							int num249 = Dust.NewDust(base.position + Vector2.UnitX * -20f, width + 40, height, 4, base.velocity.X, base.velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
							Main.dust[num249].noGravity = true;
							dust = Main.dust[num249];
							dust.velocity *= 0.5f;
						}
					}
				}
				else if (this.ai[1] == 6f)
				{
					flag8 = true;
					aiAction = 0;
					this.ai[0]++;
					num236 = MathHelper.Clamp(this.ai[0] / 30f, 0f, 1f);
					num236 = 0.5f + num236 * 0.5f;
					if (Main.getGoodWorld)
					{
						num236 *= num237;
					}
					if (this.ai[0] >= 30f && Main.netMode != 1)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						netUpdate = true;
						TargetClosest();
					}
					if (Main.netMode == 1 && this.ai[0] >= 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						TargetClosest();
					}
					for (int num250 = 0; num250 < 10; num250++)
					{
						int num251 = Dust.NewDust(base.position + Vector2.UnitX * -20f, width + 40, height, 4, base.velocity.X, base.velocity.Y, 150, new Color(78, 136, 255, 80), 2f);
						Main.dust[num251].noGravity = true;
						dust = Main.dust[num251];
						dust.velocity *= 2f;
					}
				}
				dontTakeDamage = (hide = flag9);
				if (base.velocity.Y == 0f)
				{
					base.velocity.X *= 0.8f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if (!flag8)
					{
						this.ai[0] += 2f;
						if ((double)life < (double)lifeMax * 0.8)
						{
							this.ai[0] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.6)
						{
							this.ai[0] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.4)
						{
							this.ai[0] += 2f;
						}
						if ((double)life < (double)lifeMax * 0.2)
						{
							this.ai[0] += 3f;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							this.ai[0] += 4f;
						}
						if (this.ai[0] >= 0f)
						{
							netUpdate = true;
							TargetClosest();
							if (this.ai[1] == 3f)
							{
								base.velocity.Y = -13f;
								base.velocity.X += 3.5f * (float)base.direction;
								this.ai[0] = -200f;
								this.ai[1] = 0f;
							}
							else if (this.ai[1] == 2f)
							{
								base.velocity.Y = -6f;
								base.velocity.X += 4.5f * (float)base.direction;
								this.ai[0] = -120f;
								this.ai[1] += 1f;
							}
							else
							{
								base.velocity.Y = -8f;
								base.velocity.X += 4f * (float)base.direction;
								this.ai[0] = -120f;
								this.ai[1] += 1f;
							}
						}
						else if (this.ai[0] >= -30f)
						{
							aiAction = 1;
						}
					}
				}
				else if (target < 255)
				{
					float num252 = 3f;
					if (Main.getGoodWorld)
					{
						num252 = 6f;
					}
					if ((base.direction == 1 && base.velocity.X < num252) || (base.direction == -1 && base.velocity.X > 0f - num252))
					{
						if ((base.direction == -1 && (double)base.velocity.X < 0.1) || (base.direction == 1 && (double)base.velocity.X > -0.1))
						{
							base.velocity.X += 0.2f * (float)base.direction;
						}
						else
						{
							base.velocity.X *= 0.93f;
						}
					}
				}
				int num253 = Dust.NewDust(base.position, width, height, 4, base.velocity.X, base.velocity.Y, 255, new Color(0, 80, 255, 80), scale * 1.2f);
				Main.dust[num253].noGravity = true;
				dust = Main.dust[num253];
				dust.velocity *= 0.5f;
				if (life <= 0)
				{
					return;
				}
				float num254 = (float)life / (float)lifeMax;
				num254 = num254 * 0.5f + 0.75f;
				num254 *= num236;
				if (num254 != scale)
				{
					base.position.X += width / 2;
					base.position.Y += height;
					scale = num254;
					width = (int)(98f * scale);
					height = (int)(92f * scale);
					base.position.X -= width / 2;
					base.position.Y -= height;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				int num255 = (int)((double)lifeMax * 0.05);
				if (!((float)(life + num255) < this.ai[3]))
				{
					return;
				}
				this.ai[3] = life;
				int num256 = Main.rand.Next(1, 4);
				for (int num257 = 0; num257 < num256; num257++)
				{
					int x = (int)(base.position.X + (float)Main.rand.Next(width - 32));
					int y = (int)(base.position.Y + (float)Main.rand.Next(height - 32));
					int num258 = 1;
					if (Main.expertMode && Main.rand.Next(4) == 0)
					{
						num258 = 535;
					}
					int num259 = NewNPC(x, y, num258);
					Main.npc[num259].SetDefaults(num258);
					Main.npc[num259].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
					Main.npc[num259].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
					Main.npc[num259].ai[0] = -1000 * Main.rand.Next(3);
					Main.npc[num259].ai[1] = 0f;
					if (Main.netMode == 2 && num259 < 200)
					{
						NetMessage.SendData(23, -1, -1, null, num259);
					}
				}
			}
			else if (aiStyle == 16)
			{
				if (base.direction == 0)
				{
					TargetClosest();
				}
				if (type == 615)
				{
					if (this.ai[2] == 0f)
					{
						int num260 = Main.rand.Next(300, 1200);
						if ((this.ai[3] += 1f) >= (float)num260)
						{
							this.ai[2] = Main.rand.Next(1, 3);
							if (this.ai[2] == 1f && !Collision.CanHitLine(base.position, width, height, new Vector2(base.position.X, base.position.Y - 128f), width, height))
							{
								this.ai[2] = 2f;
							}
							if (this.ai[2] == 2f)
							{
								TargetClosest();
							}
							this.ai[3] = 0f;
							netUpdate = true;
						}
					}
					if (this.ai[2] == 1f)
					{
						if (collideY || collideX)
						{
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						else if (wet)
						{
							base.velocity.Y -= 0.4f;
							if (base.velocity.Y < -6f)
							{
								base.velocity.Y = -6f;
							}
							rotation = base.velocity.Y * (float)base.direction * 0.3f;
							if (rotation < (float)Math.PI * -2f / 5f)
							{
								rotation = (float)Math.PI * -2f / 5f;
							}
							if (rotation > (float)Math.PI * 2f / 5f)
							{
								rotation = (float)Math.PI * 2f / 5f;
							}
							if (this.ai[3] == 1f)
							{
								this.ai[2] = 0f;
								this.ai[3] = 0f;
								netUpdate = true;
							}
						}
						else
						{
							rotation += (float)base.direction * 0.2f;
							this.ai[3] = 1f;
							base.velocity.Y += 0.3f;
							if (base.velocity.Y > 10f)
							{
								base.velocity.Y = 10f;
							}
						}
						return;
					}
					if (this.ai[2] == 2f)
					{
						if (collideY || collideX)
						{
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						else if (wet)
						{
							base.velocity.Y -= 0.4f;
							if (base.velocity.Y < -6f)
							{
								base.velocity.Y = -6f;
							}
							rotation = base.velocity.Y * (float)base.direction * 0.3f;
							if (rotation < (float)Math.PI * -2f / 5f)
							{
								rotation = (float)Math.PI * -2f / 5f;
							}
							if (rotation > (float)Math.PI * 2f / 5f)
							{
								rotation = (float)Math.PI * 2f / 5f;
							}
							if (Collision.GetWaterLine(base.Top.ToTileCoordinates(), out var waterLineHeight))
							{
								float y2 = waterLineHeight + 0f - base.position.Y;
								base.velocity.Y = y2;
								base.velocity.Y = MathHelper.Clamp(base.velocity.Y, -2f, 0.5f);
								rotation = -(float)Math.PI / 5f * (float)base.direction;
								base.velocity.X *= 0.95f;
								if (this.ai[3] == 0f)
								{
									netUpdate = true;
								}
								this.ai[3]++;
								if (this.ai[3] >= 300f)
								{
									this.ai[2] = 0f;
									this.ai[3] = 0f;
									netUpdate = true;
									base.velocity.Y = 4f;
								}
								if (this.ai[3] == 60f && Main.rand.Next(2) == 0)
								{
									SoundEngine.PlaySound(45, (int)base.position.X, (int)base.position.Y);
								}
							}
						}
						else
						{
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
							base.velocity.Y += 0.3f;
							if (base.velocity.Y > 10f)
							{
								base.velocity.Y = 10f;
							}
						}
						return;
					}
				}
				if (wet)
				{
					bool flag12 = false;
					if (type != 55 && type != 592 && type != 607 && type != 615)
					{
						TargetClosest(faceTarget: false);
						if (Main.player[target].wet && !Main.player[target].dead && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							flag12 = true;
						}
					}
					int num261 = (int)base.Center.X / 16;
					int num262 = (int)(base.position.Y + (float)height) / 16;
					if (Main.tile[num261, num262].topSlope())
					{
						if (Main.tile[num261, num262].leftSlope())
						{
							base.direction = -1;
							base.velocity.X = Math.Abs(base.velocity.X) * -1f;
						}
						else
						{
							base.direction = 1;
							base.velocity.X = Math.Abs(base.velocity.X);
						}
					}
					else if (Main.tile[num261, num262 + 1].topSlope())
					{
						if (Main.tile[num261, num262 + 1].leftSlope())
						{
							base.direction = -1;
							base.velocity.X = Math.Abs(base.velocity.X) * -1f;
						}
						else
						{
							base.direction = 1;
							base.velocity.X = Math.Abs(base.velocity.X);
						}
					}
					if (!flag12)
					{
						if (collideX)
						{
							base.velocity.X *= -1f;
							base.direction *= -1;
							netUpdate = true;
						}
						if (collideY)
						{
							netUpdate = true;
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y = Math.Abs(base.velocity.Y) * -1f;
								directionY = -1;
								this.ai[0] = -1f;
							}
							else if (base.velocity.Y < 0f)
							{
								base.velocity.Y = Math.Abs(base.velocity.Y);
								directionY = 1;
								this.ai[0] = 1f;
							}
						}
					}
					if (type == 102)
					{
						Lighting.AddLight((int)(base.position.X + (float)(width / 2) + (float)(base.direction * (width + 8))) / 16, (int)(base.position.Y + 2f) / 16, 0.07f, 0.04f, 0.025f);
					}
					if (flag12)
					{
						TargetClosest();
						if (type == 157)
						{
							if (base.velocity.X > 0f && base.direction < 0)
							{
								base.velocity.X *= 0.95f;
							}
							if (base.velocity.X < 0f && base.direction > 0)
							{
								base.velocity.X *= 0.95f;
							}
							base.velocity.X += (float)base.direction * 0.25f;
							base.velocity.Y += (float)directionY * 0.2f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 7f;
							}
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -7f;
							}
							if (base.velocity.Y > 5f)
							{
								base.velocity.Y = 4f;
							}
							if (base.velocity.Y < -5f)
							{
								base.velocity.Y = -4f;
							}
						}
						else if (type == 65 || type == 102)
						{
							base.velocity.X += (float)base.direction * 0.15f;
							base.velocity.Y += (float)directionY * 0.15f;
							if (base.velocity.X > 5f)
							{
								base.velocity.X = 5f;
							}
							if (base.velocity.X < -5f)
							{
								base.velocity.X = -5f;
							}
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						else
						{
							base.velocity.X += (float)base.direction * 0.1f;
							base.velocity.Y += (float)directionY * 0.1f;
							if (base.velocity.X > 3f)
							{
								base.velocity.X = 3f;
							}
							if (base.velocity.X < -3f)
							{
								base.velocity.X = -3f;
							}
							if (base.velocity.Y > 2f)
							{
								base.velocity.Y = 2f;
							}
							if (base.velocity.Y < -2f)
							{
								base.velocity.Y = -2f;
							}
						}
					}
					else
					{
						if (type == 157)
						{
							if (Main.player[target].position.Y > base.position.Y)
							{
								directionY = 1;
							}
							else
							{
								directionY = -1;
							}
							base.velocity.X += (float)base.direction * 0.2f;
							if (base.velocity.X < -2f || base.velocity.X > 2f)
							{
								base.velocity.X *= 0.95f;
							}
							if (this.ai[0] == -1f)
							{
								float num263 = -0.6f;
								if (directionY < 0)
								{
									num263 = -1f;
								}
								if (directionY > 0)
								{
									num263 = -0.2f;
								}
								base.velocity.Y -= 0.02f;
								if (base.velocity.Y < num263)
								{
									this.ai[0] = 1f;
								}
							}
							else
							{
								float num264 = 0.6f;
								if (directionY < 0)
								{
									num264 = 0.2f;
								}
								if (directionY > 0)
								{
									num264 = 1f;
								}
								base.velocity.Y += 0.02f;
								if (base.velocity.Y > num264)
								{
									this.ai[0] = -1f;
								}
							}
						}
						else
						{
							base.velocity.X += (float)base.direction * 0.1f;
							float num265 = 1f;
							if (type == 615)
							{
								num265 = 3f;
							}
							if (base.velocity.X < 0f - num265 || base.velocity.X > num265)
							{
								base.velocity.X *= 0.95f;
							}
							if (this.ai[0] == -1f)
							{
								base.velocity.Y -= 0.01f;
								if ((double)base.velocity.Y < -0.3)
								{
									this.ai[0] = 1f;
								}
							}
							else
							{
								base.velocity.Y += 0.01f;
								if ((double)base.velocity.Y > 0.3)
								{
									this.ai[0] = -1f;
								}
							}
						}
						int num266 = (int)(base.position.X + (float)(width / 2)) / 16;
						int num267 = (int)(base.position.Y + (float)(height / 2)) / 16;
						if (Main.tile[num266, num267 - 1] == null)
						{
							Main.tile[num266, num267 - 1] = new Tile();
						}
						if (Main.tile[num266, num267 + 1] == null)
						{
							Main.tile[num266, num267 + 1] = new Tile();
						}
						if (Main.tile[num266, num267 + 2] == null)
						{
							Main.tile[num266, num267 + 2] = new Tile();
						}
						if (Main.tile[num266, num267 - 1].liquid > 128)
						{
							if (Main.tile[num266, num267 + 1].active())
							{
								this.ai[0] = -1f;
							}
							else if (Main.tile[num266, num267 + 2].active())
							{
								this.ai[0] = -1f;
							}
						}
						if (type != 157 && ((double)base.velocity.Y > 0.4 || (double)base.velocity.Y < -0.4))
						{
							base.velocity.Y *= 0.95f;
						}
					}
				}
				else
				{
					if (base.velocity.Y == 0f)
					{
						if (type == 65)
						{
							base.velocity.X *= 0.94f;
							if ((double)base.velocity.X > -0.2 && (double)base.velocity.X < 0.2)
							{
								base.velocity.X = 0f;
							}
						}
						else if (Main.netMode != 1)
						{
							base.velocity.Y = (float)Main.rand.Next(-50, -20) * 0.1f;
							base.velocity.X = (float)Main.rand.Next(-20, 20) * 0.1f;
							netUpdate = true;
						}
					}
					base.velocity.Y += 0.3f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
					this.ai[0] = 1f;
				}
				rotation = base.velocity.Y * (float)base.direction * 0.1f;
				if ((double)rotation < -0.2)
				{
					rotation = -0.2f;
				}
				if ((double)rotation > 0.2)
				{
					rotation = 0.2f;
				}
			}
			else if (aiStyle == 17)
			{
				noGravity = true;
				if (this.ai[0] == 0f)
				{
					noGravity = false;
					TargetClosest();
					if (Main.netMode != 1)
					{
						if (base.velocity.X != 0f || base.velocity.Y < 0f || (double)base.velocity.Y > 0.3)
						{
							this.ai[0] = 1f;
							netUpdate = true;
						}
						else
						{
							Rectangle rectangle = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
							if (new Rectangle((int)base.position.X - 100, (int)base.position.Y - 100, width + 200, height + 200).Intersects(rectangle) || life < lifeMax)
							{
								this.ai[0] = 1f;
								base.velocity.Y -= 6f;
								netUpdate = true;
							}
						}
					}
				}
				else if (!Main.player[target].dead)
				{
					if (collideX)
					{
						base.velocity.X = oldVelocity.X * -0.5f;
						if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
						{
							base.velocity.X = 2f;
						}
						if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
						{
							base.velocity.X = -2f;
						}
					}
					if (collideY)
					{
						base.velocity.Y = oldVelocity.Y * -0.5f;
						if (base.velocity.Y > 0f && base.velocity.Y < 1f)
						{
							base.velocity.Y = 1f;
						}
						if (base.velocity.Y < 0f && base.velocity.Y > -1f)
						{
							base.velocity.Y = -1f;
						}
					}
					TargetClosest();
					if (base.direction == -1 && base.velocity.X > -3f)
					{
						base.velocity.X -= 0.1f;
						if (base.velocity.X > 3f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X < -3f)
						{
							base.velocity.X = -3f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 3f)
					{
						base.velocity.X += 0.1f;
						if (base.velocity.X < -3f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X > 3f)
						{
							base.velocity.X = 3f;
						}
					}
					float num268 = Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2)));
					float num269 = Main.player[target].position.Y - (float)(height / 2);
					if (num268 > 50f)
					{
						num269 -= 100f;
					}
					if (base.position.Y < num269)
					{
						base.velocity.Y += 0.05f;
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y += 0.01f;
						}
					}
					else
					{
						base.velocity.Y -= 0.05f;
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y -= 0.01f;
						}
					}
					if (base.velocity.Y < -3f)
					{
						base.velocity.Y = -3f;
					}
					if (base.velocity.Y > 3f)
					{
						base.velocity.Y = 3f;
					}
				}
				if (wet)
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.5f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
					TargetClosest();
				}
			}
			else if (aiStyle == 18)
			{
				bool flag13 = false;
				if (wet && this.ai[1] == 1f)
				{
					flag13 = true;
				}
				else
				{
					dontTakeDamage = false;
				}
				if (Main.expertMode && (type == 63 || type == 64 || type == 103 || type == 242))
				{
					if (wet)
					{
						if (target >= 0 && Main.player[target].wet && !Main.player[target].dead && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && (Main.player[target].Center - base.Center).Length() < 150f)
						{
							if (this.ai[1] == 0f)
							{
								this.ai[2] += 2f;
							}
							else
							{
								this.ai[2] -= 0.25f;
							}
						}
						if (flag13)
						{
							dontTakeDamage = true;
							this.ai[2] += 1f;
							if (this.ai[2] >= 120f)
							{
								this.ai[1] = 0f;
							}
						}
						else
						{
							this.ai[2] += 1f;
							if (this.ai[2] >= 420f)
							{
								this.ai[1] = 1f;
								this.ai[2] = 0f;
							}
						}
					}
					else
					{
						this.ai[1] = 0f;
						this.ai[2] = 0f;
					}
				}
				float num270 = 1f;
				if (flag13)
				{
					num270 += 0.5f;
				}
				if (type == 63)
				{
					Lighting.AddLight((int)(base.position.X + (float)(height / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, 0.05f * num270, 0.15f * num270, 0.4f * num270);
				}
				else if (type == 103)
				{
					Lighting.AddLight((int)(base.position.X + (float)(height / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, 0.05f * num270, 0.45f * num270, 0.1f * num270);
				}
				else if (type != 221 && type != 242)
				{
					Lighting.AddLight((int)(base.position.X + (float)(height / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, 0.35f * num270, 0.05f * num270, 0.2f * num270);
				}
				if (base.direction == 0)
				{
					TargetClosest();
				}
				if (flag13)
				{
					return;
				}
				if (wet)
				{
					int num271 = (int)base.Center.X / 16;
					int num272 = (int)(base.position.Y + (float)height) / 16;
					if (Main.tile[num271, num272].topSlope())
					{
						if (Main.tile[num271, num272].leftSlope())
						{
							base.direction = -1;
							base.velocity.X = Math.Abs(base.velocity.X) * -1f;
						}
						else
						{
							base.direction = 1;
							base.velocity.X = Math.Abs(base.velocity.X);
						}
					}
					else if (Main.tile[num271, num272 + 1].topSlope())
					{
						if (Main.tile[num271, num272 + 1].leftSlope())
						{
							base.direction = -1;
							base.velocity.X = Math.Abs(base.velocity.X) * -1f;
						}
						else
						{
							base.direction = 1;
							base.velocity.X = Math.Abs(base.velocity.X);
						}
					}
					if (collideX)
					{
						base.velocity.X *= -1f;
						base.direction *= -1;
					}
					if (collideY)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y = Math.Abs(base.velocity.Y) * -1f;
							directionY = -1;
							this.ai[0] = -1f;
						}
						else if (base.velocity.Y < 0f)
						{
							base.velocity.Y = Math.Abs(base.velocity.Y);
							directionY = 1;
							this.ai[0] = 1f;
						}
					}
					bool flag14 = false;
					if (!friendly)
					{
						TargetClosest(faceTarget: false);
						if (Main.player[target].wet && !Main.player[target].dead && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							flag14 = true;
						}
					}
					if (flag14)
					{
						localAI[2] = 1f;
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 1.57f;
						base.velocity *= 0.98f;
						float num273 = 0.2f;
						if (type == 103)
						{
							base.velocity *= 0.98f;
							num273 = 0.6f;
						}
						if (type == 221)
						{
							base.velocity *= 0.99f;
							num273 = 1f;
						}
						if (type == 242)
						{
							base.velocity *= 0.995f;
							num273 = 3f;
						}
						if (base.velocity.X > 0f - num273 && base.velocity.X < num273 && base.velocity.Y > 0f - num273 && base.velocity.Y < num273)
						{
							if (type == 221)
							{
								localAI[0] = 1f;
							}
							TargetClosest();
							float num274 = 7f;
							if (type == 103)
							{
								num274 = 9f;
							}
							Vector2 vector28 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num275 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector28.X;
							float num276 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector28.Y;
							float num277 = (float)Math.Sqrt(num275 * num275 + num276 * num276);
							num277 = num274 / num277;
							num275 *= num277;
							num276 *= num277;
							base.velocity.X = num275;
							base.velocity.Y = num276;
						}
						return;
					}
					localAI[2] = 0f;
					base.velocity.X += (float)base.direction * 0.02f;
					rotation = base.velocity.X * 0.4f;
					if (base.velocity.X < -1f || base.velocity.X > 1f)
					{
						base.velocity.X *= 0.95f;
					}
					if (this.ai[0] == -1f)
					{
						base.velocity.Y -= 0.01f;
						if (base.velocity.Y < -1f)
						{
							this.ai[0] = 1f;
						}
					}
					else
					{
						base.velocity.Y += 0.01f;
						if (base.velocity.Y > 1f)
						{
							this.ai[0] = -1f;
						}
					}
					int num278 = (int)(base.position.X + (float)(width / 2)) / 16;
					int num279 = (int)(base.position.Y + (float)(height / 2)) / 16;
					if (Main.tile[num278, num279 - 1] == null)
					{
						Main.tile[num278, num279 - 1] = new Tile();
					}
					if (Main.tile[num278, num279 + 1] == null)
					{
						Main.tile[num278, num279 + 1] = new Tile();
					}
					if (Main.tile[num278, num279 + 2] == null)
					{
						Main.tile[num278, num279 + 2] = new Tile();
					}
					if (Main.tile[num278, num279 - 1].liquid > 128)
					{
						if (Main.tile[num278, num279 + 1].active())
						{
							this.ai[0] = -1f;
						}
						else if (Main.tile[num278, num279 + 2].active())
						{
							this.ai[0] = -1f;
						}
					}
					else
					{
						this.ai[0] = 1f;
					}
					if ((double)base.velocity.Y > 1.2 || (double)base.velocity.Y < -1.2)
					{
						base.velocity.Y *= 0.99f;
					}
					return;
				}
				rotation += base.velocity.X * 0.1f;
				if (base.velocity.Y == 0f)
				{
					base.velocity.X *= 0.98f;
					if ((double)base.velocity.X > -0.01 && (double)base.velocity.X < 0.01)
					{
						base.velocity.X = 0f;
					}
				}
				base.velocity.Y += 0.2f;
				if (base.velocity.Y > 10f)
				{
					base.velocity.Y = 10f;
				}
				this.ai[0] = 1f;
			}
			else if (aiStyle == 19)
			{
				TargetClosest();
				float num280 = 12f;
				Vector2 vector29 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num281 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector29.X;
				float num282 = Main.player[target].position.Y - vector29.Y;
				float num283 = (float)Math.Sqrt(num281 * num281 + num282 * num282);
				num283 = num280 / num283;
				num281 *= num283;
				num282 *= num283;
				bool flag15 = false;
				if (directionY < 0)
				{
					rotation = (float)(Math.Atan2(num282, num281) + 1.57);
					flag15 = ((!((double)rotation < -1.2) && !((double)rotation > 1.2)) ? true : false);
					if ((double)rotation < -0.8)
					{
						rotation = -0.8f;
					}
					else if ((double)rotation > 0.8)
					{
						rotation = 0.8f;
					}
					if (base.velocity.X != 0f)
					{
						base.velocity.X *= 0.9f;
						if ((double)base.velocity.X > -0.1 || (double)base.velocity.X < 0.1)
						{
							netUpdate = true;
							base.velocity.X = 0f;
						}
					}
				}
				if (this.ai[0] > 0f)
				{
					if (this.ai[0] == 200f)
					{
						SoundEngine.PlaySound(SoundID.Item5, base.position);
					}
					this.ai[0] -= 1f;
				}
				if (Main.netMode != 1 && flag15 && this.ai[0] == 0f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					this.ai[0] = 200f;
					int num284 = 10;
					int num285 = 31;
					int num286 = Projectile.NewProjectile(vector29.X, vector29.Y, num281, num282, num285, num284, 0f, Main.myPlayer);
					Main.projectile[num286].ai[0] = 2f;
					Main.projectile[num286].timeLeft = 300;
					Main.projectile[num286].friendly = false;
					NetMessage.SendData(27, -1, -1, null, num286);
					netUpdate = true;
				}
				try
				{
					int num287 = (int)base.position.X / 16;
					int num288 = (int)(base.position.X + (float)(width / 2)) / 16;
					int num289 = (int)(base.position.X + (float)width) / 16;
					int num290 = (int)(base.position.Y + (float)height) / 16;
					bool flag16 = false;
					if (Main.tile[num287, num290] == null)
					{
						Main.tile[num287, num290] = new Tile();
					}
					if (Main.tile[num288, num290] == null)
					{
						Main.tile[num287, num290] = new Tile();
					}
					if (Main.tile[num289, num290] == null)
					{
						Main.tile[num287, num290] = new Tile();
					}
					if ((Main.tile[num287, num290].nactive() && Main.tileSolid[Main.tile[num287, num290].type]) || (Main.tile[num288, num290].nactive() && Main.tileSolid[Main.tile[num288, num290].type]) || (Main.tile[num289, num290].nactive() && Main.tileSolid[Main.tile[num289, num290].type]))
					{
						flag16 = true;
					}
					if (flag16)
					{
						noGravity = true;
						noTileCollide = true;
						base.velocity.Y = -0.2f;
						return;
					}
					noGravity = false;
					noTileCollide = false;
					if (Main.rand.Next(2) == 0)
					{
						base.position += netOffset;
						int num291 = Dust.NewDust(new Vector2(base.position.X - 4f, base.position.Y + (float)height - 8f), width + 8, 24, 32, 0f, base.velocity.Y / 2f);
						Main.dust[num291].velocity.X *= 0.4f;
						Main.dust[num291].velocity.Y *= -1f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num291].noGravity = true;
							Dust dust = Main.dust[num291];
							dust.scale += 0.2f;
						}
						base.position -= netOffset;
					}
				}
				catch
				{
				}
			}
			else if (aiStyle == 20)
			{
				if (this.ai[0] == 0f)
				{
					if (Main.netMode != 1)
					{
						TargetClosest();
						base.direction *= -1;
						directionY *= -1;
						base.position.Y += height / 2 + 8;
						this.ai[1] = base.position.X + (float)(width / 2);
						this.ai[2] = base.position.Y + (float)(height / 2);
						if (base.direction == 0)
						{
							base.direction = 1;
						}
						if (directionY == 0)
						{
							directionY = 1;
						}
						this.ai[3] = 1f + (float)Main.rand.Next(15) * 0.1f;
						base.velocity.Y = (float)(directionY * 6) * this.ai[3];
						this.ai[0] += 1f;
						netUpdate = true;
					}
					else
					{
						this.ai[1] = base.position.X + (float)(width / 2);
						this.ai[2] = base.position.Y + (float)(height / 2);
					}
					return;
				}
				float num292 = 6f * this.ai[3];
				float num293 = 0.2f * this.ai[3];
				float num294 = num292 / num293 / 2f;
				if (this.ai[0] >= 1f && this.ai[0] < (float)(int)num294)
				{
					base.velocity.Y = (float)directionY * num292;
					this.ai[0] += 1f;
					return;
				}
				if (this.ai[0] >= (float)(int)num294)
				{
					base.velocity.Y = 0f;
					directionY *= -1;
					base.velocity.X = num292 * (float)base.direction;
					this.ai[0] = -1f;
					return;
				}
				if (directionY > 0)
				{
					if (base.velocity.Y >= num292)
					{
						directionY *= -1;
						base.velocity.Y = num292;
					}
				}
				else if (directionY < 0 && base.velocity.Y <= 0f - num292)
				{
					directionY *= -1;
					base.velocity.Y = 0f - num292;
				}
				if (base.direction > 0)
				{
					if (base.velocity.X >= num292)
					{
						base.direction *= -1;
						base.velocity.X = num292;
					}
				}
				else if (base.direction < 0 && base.velocity.X <= 0f - num292)
				{
					base.direction *= -1;
					base.velocity.X = 0f - num292;
				}
				base.velocity.X += num293 * (float)base.direction;
				base.velocity.Y += num293 * (float)directionY;
			}
			else if (aiStyle == 21)
			{
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					directionY = 1;
					this.ai[0] = 1f;
				}
				int num295 = 6;
				if (this.ai[1] == 0f)
				{
					rotation += (float)(base.direction * directionY) * 0.13f;
					if (collideY)
					{
						this.ai[0] = 2f;
					}
					if (!collideY && this.ai[0] == 2f)
					{
						base.direction = -base.direction;
						this.ai[1] = 1f;
						this.ai[0] = 1f;
					}
					if (collideX)
					{
						directionY = -directionY;
						this.ai[1] = 1f;
					}
				}
				else
				{
					rotation -= (float)(base.direction * directionY) * 0.13f;
					if (collideX)
					{
						this.ai[0] = 2f;
					}
					if (!collideX && this.ai[0] == 2f)
					{
						directionY = -directionY;
						this.ai[1] = 0f;
						this.ai[0] = 1f;
					}
					if (collideY)
					{
						base.direction = -base.direction;
						this.ai[1] = 0f;
					}
				}
				base.velocity.X = num295 * base.direction;
				base.velocity.Y = num295 * directionY;
				float num296 = (float)(270 - Main.mouseTextColor) / 400f;
				Lighting.AddLight((int)(base.position.X + (float)(width / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, 0.9f, 0.3f + num296, 0.2f);
			}
			else if (aiStyle == 22)
			{
				bool flag17 = false;
				bool flag18 = type == 330 && !Main.pumpkinMoon;
				if (type == 253 && !Main.eclipse)
				{
					flag18 = true;
				}
				if (type == 490 && Main.dayTime)
				{
					flag18 = true;
				}
				if (justHit)
				{
					this.ai[2] = 0f;
				}
				if (type == 316 && (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 3000f))
				{
					TargetClosest();
					if (Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 3000f)
					{
						EncourageDespawn(10);
						flag17 = true;
						flag18 = true;
					}
				}
				if (flag18)
				{
					if (base.velocity.X == 0f)
					{
						base.velocity.X = (float)Main.rand.Next(-1, 2) * 1.5f;
						netUpdate = true;
					}
				}
				else if (this.ai[2] >= 0f)
				{
					int num297 = 16;
					bool flag19 = false;
					bool flag20 = false;
					if (base.position.X > this.ai[0] - (float)num297 && base.position.X < this.ai[0] + (float)num297)
					{
						flag19 = true;
					}
					else if ((base.velocity.X < 0f && base.direction > 0) || (base.velocity.X > 0f && base.direction < 0))
					{
						flag19 = true;
					}
					num297 += 24;
					if (base.position.Y > this.ai[1] - (float)num297 && base.position.Y < this.ai[1] + (float)num297)
					{
						flag20 = true;
					}
					if (flag19 && flag20)
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 30f && num297 == 16)
						{
							flag17 = true;
						}
						if (this.ai[2] >= 60f)
						{
							this.ai[2] = -200f;
							base.direction *= -1;
							base.velocity.X *= -1f;
							collideX = false;
						}
					}
					else
					{
						this.ai[0] = base.position.X;
						this.ai[1] = base.position.Y;
						this.ai[2] = 0f;
					}
					TargetClosest();
				}
				else if (type == 253)
				{
					TargetClosest();
					this.ai[2] += 2f;
				}
				else
				{
					if (type == 330)
					{
						this.ai[2] += 0.1f;
					}
					else
					{
						this.ai[2] += 1f;
					}
					if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > base.position.X + (float)(width / 2))
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
				}
				int num298 = (int)((base.position.X + (float)(width / 2)) / 16f) + base.direction * 2;
				int num299 = (int)((base.position.Y + (float)height) / 16f);
				bool flag21 = true;
				bool flag22 = false;
				int num300 = 3;
				if (type == 122)
				{
					if (justHit)
					{
						this.ai[3] = 0f;
						localAI[1] = 0f;
					}
					float num301 = 7f;
					Vector2 vector30 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num302 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector30.X;
					float num303 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector30.Y;
					float num304 = (float)Math.Sqrt(num302 * num302 + num303 * num303);
					float num305 = num304;
					num304 = num301 / num304;
					num302 *= num304;
					num303 *= num304;
					if (Main.netMode != 1 && this.ai[3] == 32f && !Main.player[target].npcTypeNoAggro[type])
					{
						int num306 = 25;
						int num307 = 84;
						int num308 = Projectile.NewProjectile(vector30.X, vector30.Y, num302, num303, num307, num306, 0f, Main.myPlayer);
					}
					num300 = 8;
					if (this.ai[3] > 0f)
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 64f)
						{
							this.ai[3] = 0f;
						}
					}
					if (Main.netMode != 1 && this.ai[3] == 0f)
					{
						localAI[1] += 1f;
						if (localAI[1] > 120f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && !Main.player[target].npcTypeNoAggro[type])
						{
							localAI[1] = 0f;
							this.ai[3] = 1f;
							netUpdate = true;
						}
					}
				}
				else if (type == 75)
				{
					num300 = 4;
					base.position += netOffset;
					if (Main.rand.Next(6) == 0)
					{
						int num309 = Dust.NewDust(base.position, width, height, 55, 0f, 0f, 200, this.color);
						Dust dust = Main.dust[num309];
						dust.velocity *= 0.3f;
					}
					if (Main.rand.Next(40) == 0)
					{
						SoundEngine.PlaySound(27, (int)base.position.X, (int)base.position.Y);
					}
					base.position -= netOffset;
				}
				else if (type == 169)
				{
					base.position += netOffset;
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0f, 0.6f, 0.75f);
					alpha = 30;
					if (Main.rand.Next(3) == 0)
					{
						int num310 = Dust.NewDust(base.position, width, height, 92, 0f, 0f, 200);
						Dust dust = Main.dust[num310];
						dust.velocity *= 0.3f;
						Main.dust[num310].noGravity = true;
					}
					base.position -= netOffset;
					if (justHit)
					{
						this.ai[3] = 0f;
						localAI[1] = 0f;
					}
					float num311 = 5f;
					Vector2 vector31 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num312 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector31.X;
					float num313 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector31.Y;
					float num314 = (float)Math.Sqrt(num312 * num312 + num313 * num313);
					float num315 = num314;
					num314 = num311 / num314;
					num312 *= num314;
					num313 *= num314;
					if (num312 > 0f)
					{
						base.direction = 1;
					}
					else
					{
						base.direction = -1;
					}
					spriteDirection = base.direction;
					if (base.direction < 0)
					{
						rotation = (float)Math.Atan2(0f - num313, 0f - num312);
					}
					else
					{
						rotation = (float)Math.Atan2(num313, num312);
					}
					if (Main.netMode != 1 && this.ai[3] == 16f)
					{
						int num316 = 45;
						int num317 = 128;
						int num318 = Projectile.NewProjectile(vector31.X, vector31.Y, num312, num313, num317, num316, 0f, Main.myPlayer);
					}
					num300 = 10;
					if (this.ai[3] > 0f)
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 64f)
						{
							this.ai[3] = 0f;
						}
					}
					if (Main.netMode != 1 && this.ai[3] == 0f)
					{
						localAI[1] += 1f;
						if (localAI[1] > 120f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							localAI[1] = 0f;
							this.ai[3] = 1f;
							netUpdate = true;
						}
					}
				}
				else if (type == 268)
				{
					rotation = base.velocity.X * 0.1f;
					num300 = ((!(Main.player[target].Center.Y < base.Center.Y)) ? 6 : 12);
					if (Main.netMode != 1 && !confused)
					{
						this.ai[3] += 1f;
						if (justHit)
						{
							this.ai[3] = -45f;
							localAI[1] = 0f;
						}
						if (Main.netMode != 1 && this.ai[3] >= (float)(60 + Main.rand.Next(60)))
						{
							this.ai[3] = 0f;
							if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
							{
								float num319 = 10f;
								Vector2 vector32 = new Vector2(base.position.X + (float)width * 0.5f - 4f, base.position.Y + (float)height * 0.7f);
								float num320 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector32.X;
								float num321 = Math.Abs(num320) * 0.1f;
								float num322 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector32.Y - num321;
								num320 += (float)Main.rand.Next(-10, 11);
								num322 += (float)Main.rand.Next(-30, 21);
								float num323 = (float)Math.Sqrt(num320 * num320 + num322 * num322);
								float num324 = num323;
								num323 = num319 / num323;
								num320 *= num323;
								num322 *= num323;
								int num325 = 40;
								int num326 = 288;
								int num327 = Projectile.NewProjectile(vector32.X, vector32.Y, num320, num322, num326, num325, 0f, Main.myPlayer);
							}
						}
					}
				}
				if (type == 490)
				{
					num300 = 4;
					if (target >= 0)
					{
						float num328 = (Main.player[target].Center - base.Center).Length();
						num328 /= 70f;
						if (num328 > 8f)
						{
							num328 = 8f;
						}
						num300 += (int)num328;
					}
				}
				if (base.position.Y + (float)height > Main.player[target].position.Y)
				{
					for (int num329 = num299; num329 < num299 + num300; num329++)
					{
						if (Main.tile[num298, num329] == null)
						{
							Main.tile[num298, num329] = new Tile();
						}
						if ((Main.tile[num298, num329].nactive() && Main.tileSolid[Main.tile[num298, num329].type]) || Main.tile[num298, num329].liquid > 0)
						{
							if (num329 <= num299 + 1)
							{
								flag22 = true;
							}
							flag21 = false;
							break;
						}
					}
				}
				if (Main.player[target].npcTypeNoAggro[type])
				{
					bool flag23 = false;
					for (int num330 = num299; num330 < num299 + num300 - 2; num330++)
					{
						if (Main.tile[num298, num330] == null)
						{
							Main.tile[num298, num330] = new Tile();
						}
						if ((Main.tile[num298, num330].nactive() && Main.tileSolid[Main.tile[num298, num330].type]) || Main.tile[num298, num330].liquid > 0)
						{
							flag23 = true;
							break;
						}
					}
					directionY = (!flag23).ToDirectionInt();
				}
				if (type == 169 || type == 268)
				{
					for (int num331 = num299 - 3; num331 < num299; num331++)
					{
						if (Main.tile[num298, num331] == null)
						{
							Main.tile[num298, num331] = new Tile();
						}
						if ((Main.tile[num298, num331].nactive() && Main.tileSolid[Main.tile[num298, num331].type]) || Main.tile[num298, num331].liquid > 0)
						{
							flag22 = false;
							flag17 = true;
							break;
						}
					}
				}
				if (flag17)
				{
					flag22 = false;
					flag21 = true;
					if (type == 268)
					{
						base.velocity.Y += 2f;
					}
				}
				if (flag21)
				{
					if (type == 75 || type == 169)
					{
						base.velocity.Y += 0.2f;
						if (base.velocity.Y > 2f)
						{
							base.velocity.Y = 2f;
						}
					}
					else if (type == 490)
					{
						base.velocity.Y += 0.03f;
						if ((double)base.velocity.Y > 0.75)
						{
							base.velocity.Y = 0.75f;
						}
					}
					else
					{
						base.velocity.Y += 0.1f;
						if (type == 316 && flag18)
						{
							base.velocity.Y -= 0.05f;
							if (base.velocity.Y > 6f)
							{
								base.velocity.Y = 6f;
							}
						}
						else if (base.velocity.Y > 3f)
						{
							base.velocity.Y = 3f;
						}
					}
				}
				else
				{
					if (type == 75 || type == 169)
					{
						if ((directionY < 0 && base.velocity.Y > 0f) || flag22)
						{
							base.velocity.Y -= 0.2f;
						}
					}
					else if (type == 490)
					{
						if ((directionY < 0 && base.velocity.Y > 0f) || flag22)
						{
							base.velocity.Y -= 0.075f;
						}
						if (base.velocity.Y < -0.75f)
						{
							base.velocity.Y = -0.75f;
						}
					}
					else if (directionY < 0 && base.velocity.Y > 0f)
					{
						base.velocity.Y -= 0.1f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				if (type == 75 && wet)
				{
					base.velocity.Y -= 0.2f;
					if (base.velocity.Y < -2f)
					{
						base.velocity.Y = -2f;
					}
				}
				if (collideX)
				{
					base.velocity.X = oldVelocity.X * -0.4f;
					if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 1f)
					{
						base.velocity.X = 1f;
					}
					if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -1f)
					{
						base.velocity.X = -1f;
					}
				}
				if (collideY)
				{
					base.velocity.Y = oldVelocity.Y * -0.25f;
					if (base.velocity.Y > 0f && base.velocity.Y < 1f)
					{
						base.velocity.Y = 1f;
					}
					if (base.velocity.Y < 0f && base.velocity.Y > -1f)
					{
						base.velocity.Y = -1f;
					}
				}
				float num332 = 2f;
				if (type == 75)
				{
					num332 = 3f;
				}
				if (type == 253)
				{
					num332 = 4f;
				}
				if (type == 490)
				{
					num332 = 1.5f;
				}
				if (type == 330)
				{
					alpha = 0;
					num332 = 4f;
					if (!flag18)
					{
						TargetClosest();
					}
					else
					{
						EncourageDespawn(10);
					}
					if (base.direction < 0 && base.velocity.X > 0f)
					{
						base.velocity.X *= 0.9f;
					}
					if (base.direction > 0 && base.velocity.X < 0f)
					{
						base.velocity.X *= 0.9f;
					}
				}
				if (base.direction == -1 && base.velocity.X > 0f - num332)
				{
					base.velocity.X -= 0.1f;
					if (base.velocity.X > num332)
					{
						base.velocity.X -= 0.1f;
					}
					else if (base.velocity.X > 0f)
					{
						base.velocity.X += 0.05f;
					}
					if (base.velocity.X < 0f - num332)
					{
						base.velocity.X = 0f - num332;
					}
				}
				else if (base.direction == 1 && base.velocity.X < num332)
				{
					base.velocity.X += 0.1f;
					if (base.velocity.X < 0f - num332)
					{
						base.velocity.X += 0.1f;
					}
					else if (base.velocity.X < 0f)
					{
						base.velocity.X -= 0.05f;
					}
					if (base.velocity.X > num332)
					{
						base.velocity.X = num332;
					}
				}
				num332 = ((type != 490) ? 1.5f : 1f);
				if (directionY == -1 && base.velocity.Y > 0f - num332)
				{
					base.velocity.Y -= 0.04f;
					if (base.velocity.Y > num332)
					{
						base.velocity.Y -= 0.05f;
					}
					else if (base.velocity.Y > 0f)
					{
						base.velocity.Y += 0.03f;
					}
					if (base.velocity.Y < 0f - num332)
					{
						base.velocity.Y = 0f - num332;
					}
				}
				else if (directionY == 1 && base.velocity.Y < num332)
				{
					base.velocity.Y += 0.04f;
					if (base.velocity.Y < 0f - num332)
					{
						base.velocity.Y += 0.05f;
					}
					else if (base.velocity.Y < 0f)
					{
						base.velocity.Y -= 0.03f;
					}
					if (base.velocity.Y > num332)
					{
						base.velocity.Y = num332;
					}
				}
				if (type == 122)
				{
					Lighting.AddLight((int)base.position.X / 16, (int)base.position.Y / 16, 0.4f, 0f, 0.25f);
				}
			}
			else if (aiStyle == 23)
			{
				noGravity = true;
				noTileCollide = true;
				if (type == 83)
				{
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0.2f, 0.05f, 0.3f);
				}
				else if (type == 179)
				{
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0.3f, 0.15f, 0.05f);
				}
				else
				{
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0.05f, 0.2f, 0.3f);
				}
				if (target < 0 || target == 255 || Main.player[target].dead)
				{
					TargetClosest();
				}
				if (this.ai[0] == 0f)
				{
					float num333 = 9f;
					Vector2 vector33 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num334 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector33.X;
					float num335 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector33.Y;
					float num336 = (float)Math.Sqrt(num334 * num334 + num335 * num335);
					float num337 = num336;
					num336 = num333 / num336;
					num334 *= num336;
					num335 *= num336;
					base.velocity.X = num334;
					base.velocity.Y = num335;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 0.785f;
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				else if (this.ai[0] == 1f)
				{
					if (justHit)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
					}
					base.velocity *= 0.99f;
					this.ai[1] += 1f;
					if (this.ai[1] >= 100f)
					{
						netUpdate = true;
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						base.velocity.X = 0f;
						base.velocity.Y = 0f;
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) + 0.785f;
					}
				}
				else
				{
					if (justHit)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
					}
					base.velocity *= 0.96f;
					this.ai[1] += 1f;
					float num338 = this.ai[1] / 120f;
					num338 = 0.1f + num338 * 0.4f;
					rotation += num338 * (float)base.direction;
					if (this.ai[1] >= 120f)
					{
						netUpdate = true;
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
				}
			}
			else if (aiStyle == 24)
			{
				noGravity = true;
				if (type == 611)
				{
					if (localAI[0] == 0f)
					{
						TargetClosest();
						this.ai[0] = 1f;
						localAI[0] = 1f;
						netUpdate = true;
					}
					else if (this.ai[0] == 1f && Main.cloudAlpha == 0f && !Main.dayTime)
					{
						for (int num339 = 0; num339 < 200; num339++)
						{
							if (num339 == whoAmI || !Main.npc[num339].active)
							{
								continue;
							}
							if (Main.npc[num339].townNPC)
							{
								if (Math.Abs(base.Center.X - Main.npc[num339].Center.X) < 96f)
								{
									float num340 = Main.npc[num339].Center.Y - base.Center.Y;
									if (num340 > 32f && num340 < 320f && !Collision.CanHit(this, Main.npc[num339]))
									{
										this.ai[0] = 2f;
									}
								}
							}
							else if (Main.npc[num339].type == type && Main.npc[num339].ai[0] != 1f && Math.Abs(base.Center.X - Main.npc[num339].Center.X) < 320f)
							{
								this.ai[0] = 1f;
								break;
							}
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					noGravity = false;
					if (type == 611 && (Main.cloudAlpha > 0f || Main.dayTime))
					{
						this.ai[0] = 1f;
					}
					TargetClosest();
					if (Main.netMode != 1)
					{
						if (releaseOwner != 255 || base.velocity.X != 0f || base.velocity.Y < 0f || (double)base.velocity.Y > 0.3)
						{
							this.ai[0] = 1f;
							netUpdate = true;
							base.direction = -base.direction;
						}
						else if (type != 611)
						{
							Rectangle rectangle2 = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
							if (new Rectangle((int)base.position.X - 100, (int)base.position.Y - 100, width + 200, height + 200).Intersects(rectangle2) || life < lifeMax)
							{
								this.ai[0] = 1f;
								base.velocity.Y -= 6f;
								netUpdate = true;
								base.direction = -base.direction;
							}
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					base.velocity.X *= 0.98f;
					if (base.velocity.Y == 0f)
					{
						this.ai[0] = 0f;
						base.velocity.X = 0f;
					}
					base.velocity.Y += 0.05f;
					if (base.velocity.Y > 2f)
					{
						base.velocity.Y = 2f;
					}
				}
				else if (!Main.player[target].dead)
				{
					if (collideX)
					{
						base.direction *= -1;
						base.velocity.X = oldVelocity.X * -0.5f;
						if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
						{
							base.velocity.X = 2f;
						}
						if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
						{
							base.velocity.X = -2f;
						}
					}
					if (collideY)
					{
						base.velocity.Y = oldVelocity.Y * -0.5f;
						if (base.velocity.Y > 0f && base.velocity.Y < 1f)
						{
							base.velocity.Y = 1f;
						}
						if (base.velocity.Y < 0f && base.velocity.Y > -1f)
						{
							base.velocity.Y = -1f;
						}
					}
					if (base.direction == -1 && base.velocity.X > -3f)
					{
						base.velocity.X -= 0.1f;
						if (base.velocity.X > 3f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X < -3f)
						{
							base.velocity.X = -3f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 3f)
					{
						base.velocity.X += 0.1f;
						if (base.velocity.X < -3f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X > 3f)
						{
							base.velocity.X = 3f;
						}
					}
					int num341 = (int)((base.position.X + (float)(width / 2)) / 16f) + base.direction;
					int num342 = (int)((base.position.Y + (float)height) / 16f);
					bool flag24 = true;
					int num343 = 15;
					bool flag25 = false;
					for (int num344 = num342; num344 < num342 + num343; num344++)
					{
						if (!WorldGen.InWorld(num341, num344))
						{
							continue;
						}
						if (Main.tile[num341, num344] == null)
						{
							Main.tile[num341, num344] = new Tile();
						}
						if ((Main.tile[num341, num344].nactive() && Main.tileSolid[Main.tile[num341, num344].type]) || Main.tile[num341, num344].liquid > 0)
						{
							if (num344 < num342 + 5)
							{
								flag25 = true;
							}
							flag24 = false;
							break;
						}
					}
					if (flag24)
					{
						base.velocity.Y += 0.05f;
					}
					else
					{
						base.velocity.Y -= 0.1f;
					}
					if (flag25)
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y > 2f)
					{
						base.velocity.Y = 2f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				if (wet)
				{
					this.ai[1] = 0f;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.5f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
					TargetClosest();
				}
			}
			else if (aiStyle == 25)
			{
				bool flag26 = type == 341 && !Main.snowMoon;
				if (this.ai[3] == 0f)
				{
					base.position.X += 8f;
					if (base.position.Y / 16f > (float)Main.UnderworldLayer)
					{
						this.ai[3] = 3f;
					}
					else if ((double)(base.position.Y / 16f) > Main.worldSurface)
					{
						TargetClosest();
						this.ai[3] = 2f;
					}
					else
					{
						this.ai[3] = 1f;
					}
				}
				if (type == 341 || type == 629)
				{
					this.ai[3] = 1f;
				}
				if (this.ai[0] == 0f)
				{
					if (!flag26)
					{
						TargetClosest();
					}
					if (Main.netMode == 1)
					{
						return;
					}
					if (base.velocity.X != 0f || base.velocity.Y < 0f || (double)base.velocity.Y > 0.3)
					{
						this.ai[0] = 1f;
						netUpdate = true;
						return;
					}
					Rectangle rectangle3 = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
					if (new Rectangle((int)base.position.X - 100, (int)base.position.Y - 100, width + 200, height + 200).Intersects(rectangle3) || life < lifeMax)
					{
						this.ai[0] = 1f;
						netUpdate = true;
					}
				}
				else if (base.velocity.Y == 0f)
				{
					this.ai[2] += 1f;
					int num345 = 20;
					if (this.ai[1] == 0f)
					{
						num345 = 12;
					}
					if (this.ai[2] < (float)num345)
					{
						base.velocity.X *= 0.9f;
						return;
					}
					this.ai[2] = 0f;
					if (!flag26)
					{
						TargetClosest();
					}
					if (base.direction == 0)
					{
						base.direction = -1;
					}
					spriteDirection = base.direction;
					this.ai[1] += 1f;
					if (this.ai[1] == 2f)
					{
						base.velocity.X = (float)base.direction * 2.5f;
						base.velocity.Y = -8f;
						this.ai[1] = 0f;
					}
					else
					{
						base.velocity.X = (float)base.direction * 3.5f;
						base.velocity.Y = -4f;
					}
					netUpdate = true;
				}
				else if (base.direction == 1 && base.velocity.X < 1f)
				{
					base.velocity.X += 0.1f;
				}
				else if (base.direction == -1 && base.velocity.X > -1f)
				{
					base.velocity.X -= 0.1f;
				}
			}
			else if (aiStyle == 26)
			{
				AI_026_Unicorns();
			}
			else if (aiStyle == 27)
			{
				if (base.position.X < 160f || base.position.X > (float)((Main.maxTilesX - 10) * 16))
				{
					active = false;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					Main.wofDrawAreaBottom = -1;
					Main.wofDrawAreaTop = -1;
				}
				this.ai[1] += 1f;
				if (this.ai[2] == 0f)
				{
					if ((double)life < (double)lifeMax * 0.5)
					{
						this.ai[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.2)
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] > 2700f)
					{
						this.ai[2] = 1f;
					}
				}
				if (this.ai[2] > 0f && this.ai[1] > 60f)
				{
					int num346 = 3;
					if ((double)life < (double)lifeMax * 0.3)
					{
						num346++;
					}
					this.ai[2] += 1f;
					this.ai[1] = 0f;
					if (this.ai[2] > (float)num346)
					{
						this.ai[2] = 0f;
					}
					if (Main.netMode != 1)
					{
						int num347 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)(height / 2) + 20f), 117, 1);
						Main.npc[num347].velocity.X = base.direction * 8;
					}
				}
				localAI[3] += 1f;
				if (localAI[3] >= (float)(600 + Main.rand.Next(1000)))
				{
					localAI[3] = -Main.rand.Next(200);
					SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 10);
				}
				Main.wofNPCIndex = whoAmI;
				int num348 = (int)(base.position.X / 16f);
				int num349 = (int)((base.position.X + (float)width) / 16f);
				int num350 = (int)((base.position.Y + (float)(height / 2)) / 16f);
				int num351 = 0;
				int num352 = num350 + 7;
				while (num351 < 15 && num352 > Main.UnderworldLayer)
				{
					num352++;
					for (int num353 = num348; num353 <= num349; num353++)
					{
						try
						{
							if (WorldGen.SolidTile(num353, num352) || Main.tile[num353, num352].liquid > 0)
							{
								num351++;
							}
						}
						catch
						{
							num351 += 15;
						}
					}
				}
				num352 += 4;
				if (Main.wofDrawAreaBottom == -1)
				{
					Main.wofDrawAreaBottom = num352 * 16;
				}
				else if (Main.wofDrawAreaBottom > num352 * 16)
				{
					Main.wofDrawAreaBottom--;
					if (Main.wofDrawAreaBottom < num352 * 16)
					{
						Main.wofDrawAreaBottom = num352 * 16;
					}
				}
				else if (Main.wofDrawAreaBottom < num352 * 16)
				{
					Main.wofDrawAreaBottom++;
					if (Main.wofDrawAreaBottom > num352 * 16)
					{
						Main.wofDrawAreaBottom = num352 * 16;
					}
				}
				num351 = 0;
				num352 = num350 - 7;
				while (num351 < 15 && num352 < Main.maxTilesY - 10)
				{
					num352--;
					for (int num354 = num348; num354 <= num349; num354++)
					{
						try
						{
							if (WorldGen.SolidTile(num354, num352) || Main.tile[num354, num352].liquid > 0)
							{
								num351++;
							}
						}
						catch
						{
							num351 += 15;
						}
					}
				}
				num352 -= 4;
				if (Main.wofDrawAreaTop == -1)
				{
					Main.wofDrawAreaTop = num352 * 16;
				}
				else if (Main.wofDrawAreaTop > num352 * 16)
				{
					Main.wofDrawAreaTop--;
					if (Main.wofDrawAreaTop < num352 * 16)
					{
						Main.wofDrawAreaTop = num352 * 16;
					}
				}
				else if (Main.wofDrawAreaTop < num352 * 16)
				{
					Main.wofDrawAreaTop++;
					if (Main.wofDrawAreaTop > num352 * 16)
					{
						Main.wofDrawAreaTop = num352 * 16;
					}
				}
				float num355 = (Main.wofDrawAreaBottom + Main.wofDrawAreaTop) / 2 - height / 2;
				if (base.position.Y > num355 + 1f)
				{
					base.velocity.Y = -1f;
				}
				else if (base.position.Y < num355 - 1f)
				{
					base.velocity.Y = 1f;
				}
				base.velocity.Y = 0f;
				int num356 = (Main.maxTilesY - 180) * 16;
				if (num355 < (float)num356)
				{
					num355 = num356;
				}
				base.position.Y = num355;
				float num357 = 1.5f;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num357 += 0.25f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num357 += 0.4f;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					num357 += 0.5f;
				}
				if ((double)life < (double)lifeMax * 0.1)
				{
					num357 += 0.6f;
				}
				if ((double)life < (double)lifeMax * 0.66 && Main.expertMode)
				{
					num357 += 0.3f;
				}
				if ((double)life < (double)lifeMax * 0.33 && Main.expertMode)
				{
					num357 += 0.3f;
				}
				if ((double)life < (double)lifeMax * 0.05 && Main.expertMode)
				{
					num357 += 0.6f;
				}
				if ((double)life < (double)lifeMax * 0.035 && Main.expertMode)
				{
					num357 += 0.6f;
				}
				if ((double)life < (double)lifeMax * 0.025 && Main.expertMode)
				{
					num357 += 0.6f;
				}
				if (Main.expertMode)
				{
					num357 *= 1.35f;
					num357 += 0.35f;
				}
				if (Main.getGoodWorld)
				{
					num357 *= 1.1f;
					num357 += 0.2f;
				}
				if (base.velocity.X == 0f)
				{
					TargetClosest();
					if (Main.player[target].dead)
					{
						float num358 = float.PositiveInfinity;
						int direction2 = 0;
						for (int num359 = 0; num359 < 255; num359++)
						{
							Player player = Main.player[target];
							if (player.active)
							{
								float num360 = Distance(player.Center);
								if (num358 > num360)
								{
									num358 = num360;
									direction2 = ((base.Center.X < player.Center.X) ? 1 : (-1));
								}
							}
						}
						base.direction = direction2;
					}
					base.velocity.X = base.direction;
				}
				if (base.velocity.X < 0f)
				{
					base.velocity.X = 0f - num357;
					base.direction = -1;
				}
				else
				{
					base.velocity.X = num357;
					base.direction = 1;
				}
				spriteDirection = base.direction;
				Vector2 vector34 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num361 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector34.X;
				float num362 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector34.Y;
				float num363 = (float)Math.Sqrt(num361 * num361 + num362 * num362);
				float num364 = num363;
				num361 *= num363;
				num362 *= num363;
				if (base.direction > 0)
				{
					if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > base.position.X + (float)(width / 2))
					{
						rotation = (float)Math.Atan2(0f - num362, 0f - num361) + 3.14f;
					}
					else
					{
						rotation = 0f;
					}
				}
				else if (Main.player[target].position.X + (float)(Main.player[target].width / 2) < base.position.X + (float)(width / 2))
				{
					rotation = (float)Math.Atan2(num362, num361) + 3.14f;
				}
				else
				{
					rotation = 0f;
				}
				if (Main.expertMode && Main.netMode != 1)
				{
					int num365 = (int)(1f + (float)life / (float)lifeMax * 10f);
					num365 *= num365;
					if (num365 < 400)
					{
						num365 = (num365 * 19 + 400) / 20;
					}
					if (num365 < 60)
					{
						num365 = (num365 * 3 + 60) / 4;
					}
					if (num365 < 20)
					{
						num365 = (num365 + 20) / 2;
					}
					num365 = (int)((double)num365 * 0.7);
					if (Main.rand.Next(num365) == 0)
					{
						int num366 = 0;
						float[] array = new float[10];
						for (int num367 = 0; num367 < 200; num367++)
						{
							if (num366 < 10 && Main.npc[num367].active && Main.npc[num367].type == 115)
							{
								array[num366] = Main.npc[num367].ai[0];
								num366++;
							}
						}
						int maxValue = 1 + num366 * 2;
						if (num366 < 10 && Main.rand.Next(maxValue) <= 1)
						{
							int num368 = -1;
							for (int num369 = 0; num369 < 1000; num369++)
							{
								int num370 = Main.rand.Next(10);
								float num371 = (float)num370 * 0.1f - 0.05f;
								bool flag27 = true;
								for (int num372 = 0; num372 < num366; num372++)
								{
									if (num371 == array[num372])
									{
										flag27 = false;
										break;
									}
								}
								if (flag27)
								{
									num368 = num370;
									break;
								}
							}
							if (num368 >= 0)
							{
								int num373 = NewNPC((int)base.position.X, (int)num355, 115, whoAmI);
								Main.npc[num373].ai[0] = (float)num368 * 0.1f - 0.05f;
							}
						}
					}
				}
				if (localAI[0] == 1f && Main.netMode != 1)
				{
					localAI[0] = 2f;
					num355 = (Main.wofDrawAreaBottom + Main.wofDrawAreaTop) / 2;
					num355 = (num355 + (float)Main.wofDrawAreaTop) / 2f;
					int num374 = NewNPC((int)base.position.X, (int)num355, 114, whoAmI);
					Main.npc[num374].ai[0] = 1f;
					num355 = (Main.wofDrawAreaBottom + Main.wofDrawAreaTop) / 2;
					num355 = (num355 + (float)Main.wofDrawAreaBottom) / 2f;
					num374 = NewNPC((int)base.position.X, (int)num355, 114, whoAmI);
					Main.npc[num374].ai[0] = -1f;
					num355 = (Main.wofDrawAreaBottom + Main.wofDrawAreaTop) / 2;
					num355 = (num355 + (float)Main.wofDrawAreaBottom) / 2f;
					for (int num375 = 0; num375 < 11; num375++)
					{
						num374 = NewNPC((int)base.position.X, (int)num355, 115, whoAmI);
						Main.npc[num374].ai[0] = (float)num375 * 0.1f - 0.05f;
					}
				}
			}
			else if (aiStyle == 28)
			{
				if (Main.wofNPCIndex < 0)
				{
					active = false;
					return;
				}
				realLife = Main.wofNPCIndex;
				if (Main.npc[Main.wofNPCIndex].life > 0)
				{
					life = Main.npc[Main.wofNPCIndex].life;
				}
				TargetClosest();
				base.position.X = Main.npc[Main.wofNPCIndex].position.X;
				base.direction = Main.npc[Main.wofNPCIndex].direction;
				spriteDirection = base.direction;
				float num376 = (Main.wofDrawAreaBottom + Main.wofDrawAreaTop) / 2;
				num376 = ((!(this.ai[0] > 0f)) ? ((num376 + (float)Main.wofDrawAreaBottom) / 2f) : ((num376 + (float)Main.wofDrawAreaTop) / 2f));
				num376 -= (float)(height / 2);
				if (base.position.Y > num376 + 1f)
				{
					base.velocity.Y = -1f;
				}
				else if (base.position.Y < num376 - 1f)
				{
					base.velocity.Y = 1f;
				}
				else
				{
					base.velocity.Y = 0f;
					base.position.Y = num376;
				}
				if (base.velocity.Y > 5f)
				{
					base.velocity.Y = 5f;
				}
				if (base.velocity.Y < -5f)
				{
					base.velocity.Y = -5f;
				}
				Vector2 vector35 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num377 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector35.X;
				float num378 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector35.Y;
				float num379 = (float)Math.Sqrt(num377 * num377 + num378 * num378);
				float num380 = num379;
				num377 *= num379;
				num378 *= num379;
				bool flag28 = true;
				if (base.direction > 0)
				{
					if (Main.player[target].position.X + (float)(Main.player[target].width / 2) > base.position.X + (float)(width / 2))
					{
						rotation = (float)Math.Atan2(0f - num378, 0f - num377) + 3.14f;
					}
					else
					{
						rotation = 0f;
						flag28 = false;
					}
				}
				else if (Main.player[target].position.X + (float)(Main.player[target].width / 2) < base.position.X + (float)(width / 2))
				{
					rotation = (float)Math.Atan2(num378, num377) + 3.14f;
				}
				else
				{
					rotation = 0f;
					flag28 = false;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				int num381 = 4;
				localAI[1] += 1f;
				if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.75)
				{
					localAI[1] += 1f;
					num381++;
				}
				if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.5)
				{
					localAI[1] += 1f;
					num381++;
				}
				if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.25)
				{
					localAI[1] += 1f;
					num381 += 2;
				}
				if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.1)
				{
					localAI[1] += 2f;
					num381 += 3;
				}
				if (Main.expertMode)
				{
					localAI[1] += 0.5f;
					num381++;
					if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.1)
					{
						localAI[1] += 2f;
						num381 += 3;
					}
				}
				if (localAI[2] == 0f)
				{
					if (localAI[1] > 600f)
					{
						localAI[2] = 1f;
						localAI[1] = 0f;
					}
				}
				else
				{
					if (!(localAI[1] > 45f) || !Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						return;
					}
					localAI[1] = 0f;
					localAI[2] += 1f;
					if (localAI[2] >= (float)num381)
					{
						localAI[2] = 0f;
					}
					if (flag28)
					{
						float num382 = 9f;
						int num383 = 11;
						int num384 = 83;
						if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.5)
						{
							num383++;
							num382 += 1f;
						}
						if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.25)
						{
							num383++;
							num382 += 1f;
						}
						if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.1)
						{
							num383 += 2;
							num382 += 2f;
						}
						vector35 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num377 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector35.X;
						num378 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector35.Y;
						num379 = (float)Math.Sqrt(num377 * num377 + num378 * num378);
						num379 = num382 / num379;
						num377 *= num379;
						num378 *= num379;
						vector35.X += num377;
						vector35.Y += num378;
						int num385 = Projectile.NewProjectile(vector35.X, vector35.Y, num377, num378, num384, num383, 0f, Main.myPlayer);
					}
				}
			}
			else if (aiStyle == 29)
			{
				if (justHit)
				{
					this.ai[1] = 10f;
				}
				if (Main.wofNPCIndex < 0)
				{
					active = false;
					return;
				}
				TargetClosest();
				float num386 = 0.1f;
				float num387 = 300f;
				damage = defDamage;
				int num388 = 0;
				if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.25)
				{
					num388 = 75;
					defense = 40;
					if (!Main.expertMode)
					{
						num387 = 900f;
					}
					else
					{
						num386 += 0.1f;
					}
				}
				else if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.5)
				{
					num388 = 60;
					defense = 30;
					if (!Main.expertMode)
					{
						num387 = 700f;
					}
					else
					{
						num386 += 0.066f;
					}
				}
				else if ((double)Main.npc[Main.wofNPCIndex].life < (double)Main.npc[Main.wofNPCIndex].lifeMax * 0.75)
				{
					num388 = 45;
					defense = 20;
					if (!Main.expertMode)
					{
						num387 = 500f;
					}
					else
					{
						num386 += 0.033f;
					}
				}
				if (num388 > 0)
				{
					damage = GetAttackDamage_ScaledByStrength(num388);
				}
				if (Main.expertMode)
				{
					defense = defDefense;
					if (whoAmI % 4 == 0)
					{
						num387 *= 1.75f;
					}
					if (whoAmI % 4 == 1)
					{
						num387 *= 1.5f;
					}
					if (whoAmI % 4 == 2)
					{
						num387 *= 1.25f;
					}
					if (whoAmI % 3 == 0)
					{
						num387 *= 1.5f;
					}
					if (whoAmI % 3 == 1)
					{
						num387 *= 1.25f;
					}
					num387 *= 0.75f;
				}
				float num389 = Main.npc[Main.wofNPCIndex].position.X + (float)(Main.npc[Main.wofNPCIndex].width / 2);
				float y3 = Main.npc[Main.wofNPCIndex].position.Y;
				float num390 = Main.wofDrawAreaBottom - Main.wofDrawAreaTop;
				y3 = (float)Main.wofDrawAreaTop + num390 * this.ai[0];
				this.ai[2] += 1f;
				if (this.ai[2] > 100f)
				{
					num387 = (int)(num387 * 1.3f);
					if (this.ai[2] > 200f)
					{
						this.ai[2] = 0f;
					}
				}
				Vector2 vector36 = new Vector2(num389, y3);
				float num391 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - (float)(width / 2) - vector36.X;
				float num392 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - (float)(height / 2) - vector36.Y;
				float num393 = (float)Math.Sqrt(num391 * num391 + num392 * num392);
				if (this.ai[1] == 0f)
				{
					if (num393 > num387)
					{
						num393 = num387 / num393;
						num391 *= num393;
						num392 *= num393;
					}
					if (base.position.X < num389 + num391)
					{
						base.velocity.X += num386;
						if (base.velocity.X < 0f && num391 > 0f)
						{
							base.velocity.X += num386 * 2.5f;
						}
					}
					else if (base.position.X > num389 + num391)
					{
						base.velocity.X -= num386;
						if (base.velocity.X > 0f && num391 < 0f)
						{
							base.velocity.X -= num386 * 2.5f;
						}
					}
					if (base.position.Y < y3 + num392)
					{
						base.velocity.Y += num386;
						if (base.velocity.Y < 0f && num392 > 0f)
						{
							base.velocity.Y += num386 * 2.5f;
						}
					}
					else if (base.position.Y > y3 + num392)
					{
						base.velocity.Y -= num386;
						if (base.velocity.Y > 0f && num392 < 0f)
						{
							base.velocity.Y -= num386 * 2.5f;
						}
					}
					float num394 = 4f;
					if (Main.expertMode && Main.wofNPCIndex >= 0)
					{
						float num395 = 1.5f;
						float num396 = Main.npc[Main.wofNPCIndex].life / Main.npc[Main.wofNPCIndex].lifeMax;
						if ((double)num396 < 0.75)
						{
							num395 += 0.7f;
						}
						if ((double)num396 < 0.5)
						{
							num395 += 0.7f;
						}
						if ((double)num396 < 0.25)
						{
							num395 += 0.9f;
						}
						if ((double)num396 < 0.1)
						{
							num395 += 0.9f;
						}
						num395 *= 1.25f;
						num395 += 0.3f;
						num394 += num395 * 0.35f;
						if (base.Center.X < Main.npc[Main.wofNPCIndex].Center.X && Main.npc[Main.wofNPCIndex].velocity.X > 0f)
						{
							num394 += 6f;
						}
						if (base.Center.X > Main.npc[Main.wofNPCIndex].Center.X && Main.npc[Main.wofNPCIndex].velocity.X < 0f)
						{
							num394 += 6f;
						}
					}
					if (base.velocity.X > num394)
					{
						base.velocity.X = num394;
					}
					if (base.velocity.X < 0f - num394)
					{
						base.velocity.X = 0f - num394;
					}
					if (base.velocity.Y > num394)
					{
						base.velocity.Y = num394;
					}
					if (base.velocity.Y < 0f - num394)
					{
						base.velocity.Y = 0f - num394;
					}
				}
				else if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				else
				{
					this.ai[1] = 0f;
				}
				if (num391 > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num392, num391);
				}
				if (num391 < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num392, num391) + 3.14f;
				}
				Lighting.AddLight((int)(base.position.X + (float)(width / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, 0.3f, 0.2f, 0.1f);
			}
			else if (aiStyle == 30)
			{
				if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				bool dead2 = Main.player[target].dead;
				float num397 = base.position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
				float num398 = base.position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
				float num399 = (float)Math.Atan2(num398, num397) + 1.57f;
				if (num399 < 0f)
				{
					num399 += 6.283f;
				}
				else if ((double)num399 > 6.283)
				{
					num399 -= 6.283f;
				}
				float num400 = 0.1f;
				if (rotation < num399)
				{
					if ((double)(num399 - rotation) > 3.1415)
					{
						rotation -= num400;
					}
					else
					{
						rotation += num400;
					}
				}
				else if (rotation > num399)
				{
					if ((double)(rotation - num399) > 3.1415)
					{
						rotation += num400;
					}
					else
					{
						rotation -= num400;
					}
				}
				if (rotation > num399 - num400 && rotation < num399 + num400)
				{
					rotation = num399;
				}
				if (rotation < 0f)
				{
					rotation += 6.283f;
				}
				else if ((double)rotation > 6.283)
				{
					rotation -= 6.283f;
				}
				if (rotation > num399 - num400 && rotation < num399 + num400)
				{
					rotation = num399;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num401 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, base.velocity.X, 2f);
					Main.dust[num401].velocity.X *= 0.5f;
					Main.dust[num401].velocity.Y *= 0.1f;
				}
				if (Main.netMode != 1 && !Main.dayTime && !dead2 && timeLeft < 10)
				{
					for (int num402 = 0; num402 < 200; num402++)
					{
						if (num402 != whoAmI && Main.npc[num402].active && (Main.npc[num402].type == 125 || Main.npc[num402].type == 126))
						{
							DiscourageDespawn(Main.npc[num402].timeLeft - 1);
						}
					}
				}
				if (Main.dayTime || dead2)
				{
					base.velocity.Y -= 0.04f;
					EncourageDespawn(10);
					return;
				}
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] == 0f)
					{
						float num403 = 7f;
						float num404 = 0.1f;
						if (Main.expertMode)
						{
							num403 = 8.25f;
							num404 = 0.115f;
						}
						if (Main.getGoodWorld)
						{
							num403 *= 1.15f;
							num404 *= 1.15f;
						}
						int num405 = 1;
						if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
						{
							num405 = -1;
						}
						Vector2 vector37 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num406 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num405 * 300) - vector37.X;
						float num407 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector37.Y;
						float num408 = (float)Math.Sqrt(num406 * num406 + num407 * num407);
						float num409 = num408;
						num408 = num403 / num408;
						num406 *= num408;
						num407 *= num408;
						if (base.velocity.X < num406)
						{
							base.velocity.X += num404;
							if (base.velocity.X < 0f && num406 > 0f)
							{
								base.velocity.X += num404;
							}
						}
						else if (base.velocity.X > num406)
						{
							base.velocity.X -= num404;
							if (base.velocity.X > 0f && num406 < 0f)
							{
								base.velocity.X -= num404;
							}
						}
						if (base.velocity.Y < num407)
						{
							base.velocity.Y += num404;
							if (base.velocity.Y < 0f && num407 > 0f)
							{
								base.velocity.Y += num404;
							}
						}
						else if (base.velocity.Y > num407)
						{
							base.velocity.Y -= num404;
							if (base.velocity.Y > 0f && num407 < 0f)
							{
								base.velocity.Y -= num404;
							}
						}
						this.ai[2] += 1f;
						if (this.ai[2] >= 600f)
						{
							this.ai[1] = 1f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							target = 255;
							netUpdate = true;
						}
						else if (base.position.Y + (float)height < Main.player[target].position.Y && num409 < 400f)
						{
							if (!Main.player[target].dead)
							{
								this.ai[3] += 1f;
								if (Main.expertMode && (double)life < (double)lifeMax * 0.9)
								{
									this.ai[3] += 0.3f;
								}
								if (Main.expertMode && (double)life < (double)lifeMax * 0.8)
								{
									this.ai[3] += 0.3f;
								}
								if (Main.expertMode && (double)life < (double)lifeMax * 0.7)
								{
									this.ai[3] += 0.3f;
								}
								if (Main.expertMode && (double)life < (double)lifeMax * 0.6)
								{
									this.ai[3] += 0.3f;
								}
								if (Main.getGoodWorld)
								{
									this.ai[3] += 0.5f;
								}
							}
							if (this.ai[3] >= 60f)
							{
								this.ai[3] = 0f;
								vector37 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
								num406 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector37.X;
								num407 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector37.Y;
								if (Main.netMode != 1)
								{
									float num410 = 9f;
									int attackDamage_ForProjectiles3 = GetAttackDamage_ForProjectiles(20f, 19f);
									int num411 = 83;
									if (Main.expertMode)
									{
										num410 = 10.5f;
									}
									num408 = (float)Math.Sqrt(num406 * num406 + num407 * num407);
									num408 = num410 / num408;
									num406 *= num408;
									num407 *= num408;
									num406 += (float)Main.rand.Next(-40, 41) * 0.08f;
									num407 += (float)Main.rand.Next(-40, 41) * 0.08f;
									vector37.X += num406 * 15f;
									vector37.Y += num407 * 15f;
									int num412 = Projectile.NewProjectile(vector37.X, vector37.Y, num406, num407, num411, attackDamage_ForProjectiles3, 0f, Main.myPlayer);
								}
							}
						}
					}
					else if (this.ai[1] == 1f)
					{
						rotation = num399;
						float num413 = 12f;
						if (Main.expertMode)
						{
							num413 = 15f;
						}
						if (Main.getGoodWorld)
						{
							num413 += 2f;
						}
						Vector2 vector38 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num414 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector38.X;
						float num415 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector38.Y;
						float num416 = (float)Math.Sqrt(num414 * num414 + num415 * num415);
						num416 = num413 / num416;
						base.velocity.X = num414 * num416;
						base.velocity.Y = num415 * num416;
						this.ai[1] = 2f;
					}
					else if (this.ai[1] == 2f)
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 25f)
						{
							base.velocity.X *= 0.96f;
							base.velocity.Y *= 0.96f;
							if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
							{
								base.velocity.X = 0f;
							}
							if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
							{
								base.velocity.Y = 0f;
							}
						}
						else
						{
							rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
						}
						if (this.ai[2] >= 70f)
						{
							this.ai[3] += 1f;
							this.ai[2] = 0f;
							target = 255;
							rotation = num399;
							if (this.ai[3] >= 4f)
							{
								this.ai[1] = 0f;
								this.ai[3] = 0f;
							}
							else
							{
								this.ai[1] = 1f;
							}
						}
					}
					if ((double)life < (double)lifeMax * 0.4)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					return;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					if (this.ai[0] == 1f)
					{
						this.ai[2] += 0.005f;
						if ((double)this.ai[2] > 0.5)
						{
							this.ai[2] = 0.5f;
						}
					}
					else
					{
						this.ai[2] -= 0.005f;
						if (this.ai[2] < 0f)
						{
							this.ai[2] = 0f;
						}
					}
					rotation += this.ai[2];
					this.ai[1] += 1f;
					if (this.ai[1] == 100f)
					{
						this.ai[0] += 1f;
						this.ai[1] = 0f;
						if (this.ai[0] == 3f)
						{
							this.ai[2] = 0f;
						}
						else
						{
							SoundEngine.PlaySound(3, (int)base.position.X, (int)base.position.Y);
							for (int num417 = 0; num417 < 2; num417++)
							{
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 143);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
							}
							for (int num418 = 0; num418 < 20; num418++)
							{
								Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
							}
							SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
						}
					}
					Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
					base.velocity.X *= 0.98f;
					base.velocity.Y *= 0.98f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
					{
						base.velocity.Y = 0f;
					}
					return;
				}
				damage = (int)((double)defDamage * 1.5);
				defense = defDefense + 10;
				HitSound = SoundID.NPCHit4;
				if (this.ai[1] == 0f)
				{
					float num419 = 8f;
					float num420 = 0.15f;
					if (Main.expertMode)
					{
						num419 = 9.5f;
						num420 = 0.175f;
					}
					if (Main.getGoodWorld)
					{
						num419 *= 1.15f;
						num420 *= 1.15f;
					}
					Vector2 vector39 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num421 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector39.X;
					float num422 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector39.Y;
					float num423 = (float)Math.Sqrt(num421 * num421 + num422 * num422);
					num423 = num419 / num423;
					num421 *= num423;
					num422 *= num423;
					if (base.velocity.X < num421)
					{
						base.velocity.X += num420;
						if (base.velocity.X < 0f && num421 > 0f)
						{
							base.velocity.X += num420;
						}
					}
					else if (base.velocity.X > num421)
					{
						base.velocity.X -= num420;
						if (base.velocity.X > 0f && num421 < 0f)
						{
							base.velocity.X -= num420;
						}
					}
					if (base.velocity.Y < num422)
					{
						base.velocity.Y += num420;
						if (base.velocity.Y < 0f && num422 > 0f)
						{
							base.velocity.Y += num420;
						}
					}
					else if (base.velocity.Y > num422)
					{
						base.velocity.Y -= num420;
						if (base.velocity.Y > 0f && num422 < 0f)
						{
							base.velocity.Y -= num420;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 300f)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						TargetClosest();
						netUpdate = true;
					}
					vector39 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					num421 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector39.X;
					num422 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector39.Y;
					rotation = (float)Math.Atan2(num422, num421) - 1.57f;
					if (Main.netMode == 1)
					{
						return;
					}
					localAI[1] += 1f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						localAI[1] += 2f;
					}
					if (localAI[1] > 180f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						localAI[1] = 0f;
						float num424 = 8.5f;
						int attackDamage_ForProjectiles4 = GetAttackDamage_ForProjectiles(25f, 23f);
						int num425 = 100;
						if (Main.expertMode)
						{
							num424 = 10f;
						}
						num423 = (float)Math.Sqrt(num421 * num421 + num422 * num422);
						num423 = num424 / num423;
						num421 *= num423;
						num422 *= num423;
						vector39.X += num421 * 15f;
						vector39.Y += num422 * 15f;
						int num426 = Projectile.NewProjectile(vector39.X, vector39.Y, num421, num422, num425, attackDamage_ForProjectiles4, 0f, Main.myPlayer);
					}
					return;
				}
				int num427 = 1;
				if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
				{
					num427 = -1;
				}
				float num428 = 8f;
				float num429 = 0.2f;
				if (Main.expertMode)
				{
					num428 = 9.5f;
					num429 = 0.25f;
				}
				if (Main.getGoodWorld)
				{
					num428 *= 1.15f;
					num429 *= 1.15f;
				}
				Vector2 vector40 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num430 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num427 * 340) - vector40.X;
				float num431 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector40.Y;
				float num432 = (float)Math.Sqrt(num430 * num430 + num431 * num431);
				num432 = num428 / num432;
				num430 *= num432;
				num431 *= num432;
				if (base.velocity.X < num430)
				{
					base.velocity.X += num429;
					if (base.velocity.X < 0f && num430 > 0f)
					{
						base.velocity.X += num429;
					}
				}
				else if (base.velocity.X > num430)
				{
					base.velocity.X -= num429;
					if (base.velocity.X > 0f && num430 < 0f)
					{
						base.velocity.X -= num429;
					}
				}
				if (base.velocity.Y < num431)
				{
					base.velocity.Y += num429;
					if (base.velocity.Y < 0f && num431 > 0f)
					{
						base.velocity.Y += num429;
					}
				}
				else if (base.velocity.Y > num431)
				{
					base.velocity.Y -= num429;
					if (base.velocity.Y > 0f && num431 < 0f)
					{
						base.velocity.Y -= num429;
					}
				}
				vector40 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				num430 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector40.X;
				num431 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector40.Y;
				rotation = (float)Math.Atan2(num431, num430) - 1.57f;
				if (Main.netMode != 1)
				{
					localAI[1] += 1f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						localAI[1] += 0.5f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						localAI[1] += 0.75f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						localAI[1] += 1.5f;
					}
					if (Main.expertMode)
					{
						localAI[1] += 1.5f;
					}
					if (localAI[1] > 60f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						localAI[1] = 0f;
						float num433 = 9f;
						int attackDamage_ForProjectiles5 = GetAttackDamage_ForProjectiles(18f, 17f);
						int num434 = 100;
						num432 = (float)Math.Sqrt(num430 * num430 + num431 * num431);
						num432 = num433 / num432;
						num430 *= num432;
						num431 *= num432;
						vector40.X += num430 * 15f;
						vector40.Y += num431 * 15f;
						int num435 = Projectile.NewProjectile(vector40.X, vector40.Y, num430, num431, num434, attackDamage_ForProjectiles5, 0f, Main.myPlayer);
					}
				}
				this.ai[2] += 1f;
				if (this.ai[2] >= 180f)
				{
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					TargetClosest();
					netUpdate = true;
				}
			}
			else if (aiStyle == 31)
			{
				if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				bool dead3 = Main.player[target].dead;
				float num436 = base.position.X + (float)(width / 2) - Main.player[target].position.X - (float)(Main.player[target].width / 2);
				float num437 = base.position.Y + (float)height - 59f - Main.player[target].position.Y - (float)(Main.player[target].height / 2);
				float num438 = (float)Math.Atan2(num437, num436) + 1.57f;
				if (num438 < 0f)
				{
					num438 += 6.283f;
				}
				else if ((double)num438 > 6.283)
				{
					num438 -= 6.283f;
				}
				float num439 = 0.15f;
				if (rotation < num438)
				{
					if ((double)(num438 - rotation) > 3.1415)
					{
						rotation -= num439;
					}
					else
					{
						rotation += num439;
					}
				}
				else if (rotation > num438)
				{
					if ((double)(rotation - num438) > 3.1415)
					{
						rotation += num439;
					}
					else
					{
						rotation -= num439;
					}
				}
				if (rotation > num438 - num439 && rotation < num438 + num439)
				{
					rotation = num438;
				}
				if (rotation < 0f)
				{
					rotation += 6.283f;
				}
				else if ((double)rotation > 6.283)
				{
					rotation -= 6.283f;
				}
				if (rotation > num438 - num439 && rotation < num438 + num439)
				{
					rotation = num438;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num440 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, base.velocity.X, 2f);
					Main.dust[num440].velocity.X *= 0.5f;
					Main.dust[num440].velocity.Y *= 0.1f;
				}
				if (Main.netMode != 1 && !Main.dayTime && !dead3 && timeLeft < 10)
				{
					for (int num441 = 0; num441 < 200; num441++)
					{
						if (num441 != whoAmI && Main.npc[num441].active && (Main.npc[num441].type == 125 || Main.npc[num441].type == 126))
						{
							DiscourageDespawn(Main.npc[num441].timeLeft - 1);
						}
					}
				}
				if (Main.dayTime || dead3)
				{
					base.velocity.Y -= 0.04f;
					EncourageDespawn(10);
					return;
				}
				if (this.ai[0] == 0f)
				{
					if (this.ai[1] == 0f)
					{
						TargetClosest();
						float num442 = 12f;
						float num443 = 0.4f;
						if (Main.getGoodWorld)
						{
							num442 *= 1.15f;
							num443 *= 1.15f;
						}
						int num444 = 1;
						if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
						{
							num444 = -1;
						}
						Vector2 vector41 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num445 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num444 * 400) - vector41.X;
						float num446 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector41.Y;
						float num447 = (float)Math.Sqrt(num445 * num445 + num446 * num446);
						float num448 = num447;
						num447 = num442 / num447;
						num445 *= num447;
						num446 *= num447;
						if (base.velocity.X < num445)
						{
							base.velocity.X += num443;
							if (base.velocity.X < 0f && num445 > 0f)
							{
								base.velocity.X += num443;
							}
						}
						else if (base.velocity.X > num445)
						{
							base.velocity.X -= num443;
							if (base.velocity.X > 0f && num445 < 0f)
							{
								base.velocity.X -= num443;
							}
						}
						if (base.velocity.Y < num446)
						{
							base.velocity.Y += num443;
							if (base.velocity.Y < 0f && num446 > 0f)
							{
								base.velocity.Y += num443;
							}
						}
						else if (base.velocity.Y > num446)
						{
							base.velocity.Y -= num443;
							if (base.velocity.Y > 0f && num446 < 0f)
							{
								base.velocity.Y -= num443;
							}
						}
						this.ai[2] += 1f;
						if (this.ai[2] >= 600f)
						{
							this.ai[1] = 1f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							target = 255;
							netUpdate = true;
						}
						else
						{
							if (!Main.player[target].dead)
							{
								this.ai[3] += 1f;
								if (Main.expertMode && (double)life < (double)lifeMax * 0.8)
								{
									this.ai[3] += 0.6f;
								}
								if (Main.getGoodWorld)
								{
									this.ai[3] += 0.4f;
								}
							}
							if (this.ai[3] >= 60f)
							{
								this.ai[3] = 0f;
								vector41 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
								num445 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector41.X;
								num446 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector41.Y;
								if (Main.netMode != 1)
								{
									float num449 = 12f;
									int attackDamage_ForProjectiles6 = GetAttackDamage_ForProjectiles(25f, 22f);
									int num450 = 96;
									if (Main.expertMode)
									{
										num449 = 14f;
									}
									num447 = (float)Math.Sqrt(num445 * num445 + num446 * num446);
									num447 = num449 / num447;
									num445 *= num447;
									num446 *= num447;
									num445 += (float)Main.rand.Next(-40, 41) * 0.05f;
									num446 += (float)Main.rand.Next(-40, 41) * 0.05f;
									vector41.X += num445 * 4f;
									vector41.Y += num446 * 4f;
									int num451 = Projectile.NewProjectile(vector41.X, vector41.Y, num445, num446, num450, attackDamage_ForProjectiles6, 0f, Main.myPlayer);
								}
							}
						}
					}
					else if (this.ai[1] == 1f)
					{
						rotation = num438;
						float num452 = 13f;
						if (Main.expertMode)
						{
							if ((double)life < (double)lifeMax * 0.9)
							{
								num452 += 0.5f;
							}
							if ((double)life < (double)lifeMax * 0.8)
							{
								num452 += 0.5f;
							}
							if ((double)life < (double)lifeMax * 0.7)
							{
								num452 += 0.55f;
							}
							if ((double)life < (double)lifeMax * 0.6)
							{
								num452 += 0.6f;
							}
							if ((double)life < (double)lifeMax * 0.5)
							{
								num452 += 0.65f;
							}
						}
						if (Main.getGoodWorld)
						{
							num452 *= 1.2f;
						}
						Vector2 vector42 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num453 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector42.X;
						float num454 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector42.Y;
						float num455 = (float)Math.Sqrt(num453 * num453 + num454 * num454);
						num455 = num452 / num455;
						base.velocity.X = num453 * num455;
						base.velocity.Y = num454 * num455;
						this.ai[1] = 2f;
					}
					else if (this.ai[1] == 2f)
					{
						this.ai[2] += 1f;
						if (this.ai[2] >= 8f)
						{
							base.velocity.X *= 0.9f;
							base.velocity.Y *= 0.9f;
							if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
							{
								base.velocity.X = 0f;
							}
							if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
							{
								base.velocity.Y = 0f;
							}
						}
						else
						{
							rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
						}
						if (this.ai[2] >= 42f)
						{
							this.ai[3] += 1f;
							this.ai[2] = 0f;
							target = 255;
							rotation = num438;
							if (this.ai[3] >= 10f)
							{
								this.ai[1] = 0f;
								this.ai[3] = 0f;
							}
							else
							{
								this.ai[1] = 1f;
							}
						}
					}
					if ((double)life < (double)lifeMax * 0.4)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					return;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					if (this.ai[0] == 1f)
					{
						this.ai[2] += 0.005f;
						if ((double)this.ai[2] > 0.5)
						{
							this.ai[2] = 0.5f;
						}
					}
					else
					{
						this.ai[2] -= 0.005f;
						if (this.ai[2] < 0f)
						{
							this.ai[2] = 0f;
						}
					}
					rotation += this.ai[2];
					this.ai[1] += 1f;
					if (this.ai[1] == 100f)
					{
						this.ai[0] += 1f;
						this.ai[1] = 0f;
						if (this.ai[0] == 3f)
						{
							this.ai[2] = 0f;
						}
						else
						{
							SoundEngine.PlaySound(3, (int)base.position.X, (int)base.position.Y);
							for (int num456 = 0; num456 < 2; num456++)
							{
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 144);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
								Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 6);
							}
							for (int num457 = 0; num457 < 20; num457++)
							{
								Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
							}
							SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
						}
					}
					Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
					base.velocity.X *= 0.98f;
					base.velocity.Y *= 0.98f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
					{
						base.velocity.Y = 0f;
					}
					return;
				}
				HitSound = SoundID.NPCHit4;
				damage = (int)((double)defDamage * 1.5);
				defense = defDefense + 18;
				if (this.ai[1] == 0f)
				{
					float num458 = 4f;
					float num459 = 0.1f;
					int num460 = 1;
					if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)Main.player[target].width)
					{
						num460 = -1;
					}
					Vector2 vector43 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num461 = Main.player[target].position.X + (float)(Main.player[target].width / 2) + (float)(num460 * 180) - vector43.X;
					float num462 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector43.Y;
					float num463 = (float)Math.Sqrt(num461 * num461 + num462 * num462);
					if (Main.expertMode)
					{
						if (num463 > 300f)
						{
							num458 += 0.5f;
						}
						if (num463 > 400f)
						{
							num458 += 0.5f;
						}
						if (num463 > 500f)
						{
							num458 += 0.55f;
						}
						if (num463 > 600f)
						{
							num458 += 0.55f;
						}
						if (num463 > 700f)
						{
							num458 += 0.6f;
						}
						if (num463 > 800f)
						{
							num458 += 0.6f;
						}
					}
					if (Main.getGoodWorld)
					{
						num458 *= 1.15f;
						num459 *= 1.15f;
					}
					num463 = num458 / num463;
					num461 *= num463;
					num462 *= num463;
					if (base.velocity.X < num461)
					{
						base.velocity.X += num459;
						if (base.velocity.X < 0f && num461 > 0f)
						{
							base.velocity.X += num459;
						}
					}
					else if (base.velocity.X > num461)
					{
						base.velocity.X -= num459;
						if (base.velocity.X > 0f && num461 < 0f)
						{
							base.velocity.X -= num459;
						}
					}
					if (base.velocity.Y < num462)
					{
						base.velocity.Y += num459;
						if (base.velocity.Y < 0f && num462 > 0f)
						{
							base.velocity.Y += num459;
						}
					}
					else if (base.velocity.Y > num462)
					{
						base.velocity.Y -= num459;
						if (base.velocity.Y > 0f && num462 < 0f)
						{
							base.velocity.Y -= num459;
						}
					}
					this.ai[2] += 1f;
					if (this.ai[2] >= 400f)
					{
						this.ai[1] = 1f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						target = 255;
						netUpdate = true;
					}
					if (!Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						return;
					}
					localAI[2] += 1f;
					if (localAI[2] > 22f)
					{
						localAI[2] = 0f;
						SoundEngine.PlaySound(SoundID.Item34, base.position);
					}
					if (Main.netMode != 1)
					{
						localAI[1] += 1f;
						if ((double)life < (double)lifeMax * 0.75)
						{
							localAI[1] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							localAI[1] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							localAI[1] += 1f;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							localAI[1] += 2f;
						}
						if (localAI[1] > 8f)
						{
							localAI[1] = 0f;
							float num464 = 6f;
							int attackDamage_ForProjectiles7 = GetAttackDamage_ForProjectiles(30f, 27f);
							int num465 = 101;
							vector43 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							num461 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector43.X;
							num462 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector43.Y;
							num463 = (float)Math.Sqrt(num461 * num461 + num462 * num462);
							num463 = num464 / num463;
							num461 *= num463;
							num462 *= num463;
							num462 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num461 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num462 += base.velocity.Y * 0.5f;
							num461 += base.velocity.X * 0.5f;
							vector43.X -= num461 * 1f;
							vector43.Y -= num462 * 1f;
							int num466 = Projectile.NewProjectile(vector43.X, vector43.Y, num461, num462, num465, attackDamage_ForProjectiles7, 0f, Main.myPlayer);
						}
					}
				}
				else if (this.ai[1] == 1f)
				{
					SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
					rotation = num438;
					float num467 = 14f;
					if (Main.expertMode)
					{
						num467 += 2.5f;
					}
					Vector2 vector44 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num468 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector44.X;
					float num469 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector44.Y;
					float num470 = (float)Math.Sqrt(num468 * num468 + num469 * num469);
					num470 = num467 / num470;
					base.velocity.X = num468 * num470;
					base.velocity.Y = num469 * num470;
					this.ai[1] = 2f;
				}
				else
				{
					if (this.ai[1] != 2f)
					{
						return;
					}
					this.ai[2] += 1f;
					if (Main.expertMode)
					{
						this.ai[2] += 0.5f;
					}
					if (this.ai[2] >= 50f)
					{
						base.velocity.X *= 0.93f;
						base.velocity.Y *= 0.93f;
						if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
						{
							base.velocity.X = 0f;
						}
						if ((double)base.velocity.Y > -0.1 && (double)base.velocity.Y < 0.1)
						{
							base.velocity.Y = 0f;
						}
					}
					else
					{
						rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X) - 1.57f;
					}
					if (this.ai[2] >= 80f)
					{
						this.ai[3] += 1f;
						this.ai[2] = 0f;
						target = 255;
						rotation = num438;
						if (this.ai[3] >= 6f)
						{
							this.ai[1] = 0f;
							this.ai[3] = 0f;
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
			}
			else if (aiStyle == 32)
			{
				damage = defDamage;
				defense = defDefense;
				if (this.ai[0] == 0f && Main.netMode != 1)
				{
					TargetClosest();
					this.ai[0] = 1f;
					int num471 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 128, whoAmI);
					Main.npc[num471].ai[0] = -1f;
					Main.npc[num471].ai[1] = whoAmI;
					Main.npc[num471].target = target;
					Main.npc[num471].netUpdate = true;
					num471 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 129, whoAmI);
					Main.npc[num471].ai[0] = 1f;
					Main.npc[num471].ai[1] = whoAmI;
					Main.npc[num471].target = target;
					Main.npc[num471].netUpdate = true;
					num471 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 130, whoAmI);
					Main.npc[num471].ai[0] = -1f;
					Main.npc[num471].ai[1] = whoAmI;
					Main.npc[num471].target = target;
					Main.npc[num471].ai[3] = 150f;
					Main.npc[num471].netUpdate = true;
					num471 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 131, whoAmI);
					Main.npc[num471].ai[0] = 1f;
					Main.npc[num471].ai[1] = whoAmI;
					Main.npc[num471].target = target;
					Main.npc[num471].netUpdate = true;
					Main.npc[num471].ai[3] = 150f;
				}
				if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 6000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 6000f)
				{
					TargetClosest();
					if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 6000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 6000f)
					{
						this.ai[1] = 3f;
					}
				}
				if (Main.dayTime && this.ai[1] != 3f && this.ai[1] != 2f)
				{
					this.ai[1] = 2f;
					SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
				}
				if (this.ai[1] == 0f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 600f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 1f;
						TargetClosest();
						netUpdate = true;
					}
					rotation = base.velocity.X / 15f;
					float num472 = 0.1f;
					float num473 = 2f;
					float num474 = 0.1f;
					float num475 = 8f;
					if (Main.expertMode)
					{
						num472 = 0.03f;
						num473 = 4f;
						num474 = 0.07f;
						num475 = 9.5f;
					}
					if (base.position.Y > Main.player[target].position.Y - 200f)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.98f;
						}
						base.velocity.Y -= num472;
						if (base.velocity.Y > num473)
						{
							base.velocity.Y = num473;
						}
					}
					else if (base.position.Y < Main.player[target].position.Y - 500f)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.98f;
						}
						base.velocity.Y += num472;
						if (base.velocity.Y < 0f - num473)
						{
							base.velocity.Y = 0f - num473;
						}
					}
					if (base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2) + 100f)
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.98f;
						}
						base.velocity.X -= num474;
						if (base.velocity.X > num475)
						{
							base.velocity.X = num475;
						}
					}
					if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) - 100f)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.98f;
						}
						base.velocity.X += num474;
						if (base.velocity.X < 0f - num475)
						{
							base.velocity.X = 0f - num475;
						}
					}
				}
				else if (this.ai[1] == 1f)
				{
					defense *= 2;
					damage *= 2;
					this.ai[2] += 1f;
					if (this.ai[2] == 2f)
					{
						SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
					}
					if (this.ai[2] >= 400f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 0f;
					}
					rotation += (float)base.direction * 0.3f;
					Vector2 vector45 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num476 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector45.X;
					float num477 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector45.Y;
					float num478 = (float)Math.Sqrt(num476 * num476 + num477 * num477);
					float num479 = 2f;
					if (Main.expertMode)
					{
						num479 = 6f;
						if (num478 > 150f)
						{
							num479 *= 1.05f;
						}
						if (num478 > 200f)
						{
							num479 *= 1.1f;
						}
						if (num478 > 250f)
						{
							num479 *= 1.1f;
						}
						if (num478 > 300f)
						{
							num479 *= 1.1f;
						}
						if (num478 > 350f)
						{
							num479 *= 1.1f;
						}
						if (num478 > 400f)
						{
							num479 *= 1.1f;
						}
						if (num478 > 450f)
						{
							num479 *= 1.1f;
						}
						if (num478 > 500f)
						{
							num479 *= 1.1f;
						}
						if (num478 > 550f)
						{
							num479 *= 1.1f;
						}
						if (num478 > 600f)
						{
							num479 *= 1.1f;
						}
					}
					num478 = num479 / num478;
					base.velocity.X = num476 * num478;
					base.velocity.Y = num477 * num478;
				}
				else if (this.ai[1] == 2f)
				{
					damage = 1000;
					defense = 9999;
					rotation += (float)base.direction * 0.3f;
					Vector2 vector46 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num480 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector46.X;
					float num481 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector46.Y;
					float num482 = (float)Math.Sqrt(num480 * num480 + num481 * num481);
					float num483 = 10f;
					num483 += num482 / 100f;
					if (num483 < 8f)
					{
						num483 = 8f;
					}
					if (num483 > 32f)
					{
						num483 = 32f;
					}
					num482 = num483 / num482;
					base.velocity.X = num480 * num482;
					base.velocity.Y = num481 * num482;
				}
				else if (this.ai[1] == 3f)
				{
					base.velocity.Y += 0.1f;
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.X *= 0.95f;
					EncourageDespawn(500);
				}
			}
			else if (aiStyle == 33)
			{
				Vector2 vector47 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num484 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector47.X;
				float num485 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector47.Y;
				float num486 = (float)Math.Sqrt(num484 * num484 + num485 * num485);
				if (this.ai[2] != 99f)
				{
					if (num486 > 800f)
					{
						this.ai[2] = 99f;
					}
				}
				else if (num486 < 400f)
				{
					this.ai[2] = 0f;
				}
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 99f)
				{
					if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.96f;
						}
						base.velocity.Y -= 0.1f;
						if (base.velocity.Y > 8f)
						{
							base.velocity.Y = 8f;
						}
					}
					else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.96f;
						}
						base.velocity.Y += 0.1f;
						if (base.velocity.Y < -8f)
						{
							base.velocity.Y = -8f;
						}
					}
					if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.96f;
						}
						base.velocity.X -= 0.5f;
						if (base.velocity.X > 12f)
						{
							base.velocity.X = 12f;
						}
					}
					if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.96f;
						}
						base.velocity.X += 0.5f;
						if (base.velocity.X < -12f)
						{
							base.velocity.X = -12f;
						}
					}
				}
				else if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						TargetClosest();
						if (Main.player[target].dead)
						{
							base.velocity.Y += 0.1f;
							if (base.velocity.Y > 16f)
							{
								base.velocity.Y = 16f;
							}
						}
						else
						{
							Vector2 vector48 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num487 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector48.X;
							float num488 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector48.Y;
							float num489 = (float)Math.Sqrt(num487 * num487 + num488 * num488);
							num489 = 7f / num489;
							num487 *= num489;
							num488 *= num489;
							rotation = (float)Math.Atan2(num488, num487) - 1.57f;
							if (base.velocity.X > num487)
							{
								if (base.velocity.X > 0f)
								{
									base.velocity.X *= 0.97f;
								}
								base.velocity.X -= 0.05f;
							}
							if (base.velocity.X < num487)
							{
								if (base.velocity.X < 0f)
								{
									base.velocity.X *= 0.97f;
								}
								base.velocity.X += 0.05f;
							}
							if (base.velocity.Y > num488)
							{
								if (base.velocity.Y > 0f)
								{
									base.velocity.Y *= 0.97f;
								}
								base.velocity.Y -= 0.05f;
							}
							if (base.velocity.Y < num488)
							{
								if (base.velocity.Y < 0f)
								{
									base.velocity.Y *= 0.97f;
								}
								base.velocity.Y += 0.05f;
							}
						}
						this.ai[3] += 1f;
						if (this.ai[3] >= 600f)
						{
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 300f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y + 320f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.04f;
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y + 260f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.04f;
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.3f;
							if (base.velocity.X > 12f)
							{
								base.velocity.X = 12f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 250f)
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.3f;
							if (base.velocity.X < -12f)
							{
								base.velocity.X = -12f;
							}
						}
					}
					Vector2 vector49 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num490 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector49.X;
					float num491 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector49.Y;
					float num492 = (float)Math.Sqrt(num490 * num490 + num491 * num491);
					rotation = (float)Math.Atan2(num491, num490) + 1.57f;
				}
				else if (this.ai[2] == 1f)
				{
					Vector2 vector50 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num493 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector50.X;
					float num494 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector50.Y;
					float num495 = (float)Math.Sqrt(num493 * num493 + num494 * num494);
					rotation = (float)Math.Atan2(num494, num493) + 1.57f;
					base.velocity.X *= 0.95f;
					base.velocity.Y -= 0.1f;
					if (base.velocity.Y < -8f)
					{
						base.velocity.Y = -8f;
					}
					if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector50 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num493 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector50.X;
						num494 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector50.Y;
						num495 = (float)Math.Sqrt(num493 * num493 + num494 * num494);
						num495 = 22f / num495;
						base.velocity.X = num493 * num495;
						base.velocity.Y = num494 * num495;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f)
					{
						this.ai[2] = 3f;
					}
				}
				else if (this.ai[2] == 4f)
				{
					TargetClosest();
					Vector2 vector51 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num496 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector51.X;
					float num497 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector51.Y;
					float num498 = (float)Math.Sqrt(num496 * num496 + num497 * num497);
					num498 = 7f / num498;
					num496 *= num498;
					num497 *= num498;
					if (base.velocity.X > num496)
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.97f;
						}
						base.velocity.X -= 0.05f;
					}
					if (base.velocity.X < num496)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.97f;
						}
						base.velocity.X += 0.05f;
					}
					if (base.velocity.Y > num497)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.97f;
						}
						base.velocity.Y -= 0.05f;
					}
					if (base.velocity.Y < num497)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.97f;
						}
						base.velocity.Y += 0.05f;
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 600f)
					{
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					vector51 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					num496 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector51.X;
					num497 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector51.Y;
					num498 = (float)Math.Sqrt(num496 * num496 + num497 * num497);
					rotation = (float)Math.Atan2(num497, num496) + 1.57f;
				}
				else if (this.ai[2] == 5f && ((base.velocity.X > 0f && base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (base.velocity.X < 0f && base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))))
				{
					this.ai[2] = 0f;
				}
			}
			else if (aiStyle == 34)
			{
				spriteDirection = -(int)this.ai[0];
				Vector2 vector52 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num499 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector52.X;
				float num500 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector52.Y;
				float num501 = (float)Math.Sqrt(num499 * num499 + num500 * num500);
				if (this.ai[2] != 99f)
				{
					if (num501 > 800f)
					{
						this.ai[2] = 99f;
					}
				}
				else if (num501 < 400f)
				{
					this.ai[2] = 0f;
				}
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 99f)
				{
					if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.96f;
						}
						base.velocity.Y -= 0.1f;
						if (base.velocity.Y > 8f)
						{
							base.velocity.Y = 8f;
						}
					}
					else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.96f;
						}
						base.velocity.Y += 0.1f;
						if (base.velocity.Y < -8f)
						{
							base.velocity.Y = -8f;
						}
					}
					if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.96f;
						}
						base.velocity.X -= 0.5f;
						if (base.velocity.X > 12f)
						{
							base.velocity.X = 12f;
						}
					}
					if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.96f;
						}
						base.velocity.X += 0.5f;
						if (base.velocity.X < -12f)
						{
							base.velocity.X = -12f;
						}
					}
				}
				else if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						TargetClosest();
						TargetClosest();
						if (Main.player[target].dead)
						{
							base.velocity.Y += 0.1f;
							if (base.velocity.Y > 16f)
							{
								base.velocity.Y = 16f;
							}
						}
						else
						{
							Vector2 vector53 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num502 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector53.X;
							float num503 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector53.Y;
							float num504 = (float)Math.Sqrt(num502 * num502 + num503 * num503);
							num504 = 12f / num504;
							num502 *= num504;
							num503 *= num504;
							rotation = (float)Math.Atan2(num503, num502) - 1.57f;
							if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 2f)
							{
								rotation = (float)Math.Atan2(num503, num502) - 1.57f;
								base.velocity.X = num502;
								base.velocity.Y = num503;
								netUpdate = true;
							}
							else
							{
								base.velocity *= 0.97f;
							}
							this.ai[3] += 1f;
							if (this.ai[3] >= 600f)
							{
								this.ai[2] = 0f;
								this.ai[3] = 0f;
								netUpdate = true;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 600f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y + 300f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.1f;
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.1f;
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 250f)
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.94f;
							}
							base.velocity.X -= 0.3f;
							if (base.velocity.X > 9f)
							{
								base.velocity.X = 9f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2))
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.94f;
							}
							base.velocity.X += 0.2f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					Vector2 vector54 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num505 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector54.X;
					float num506 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector54.Y;
					float num507 = (float)Math.Sqrt(num505 * num505 + num506 * num506);
					rotation = (float)Math.Atan2(num506, num505) + 1.57f;
				}
				else if (this.ai[2] == 1f)
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.9f;
					}
					Vector2 vector55 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num508 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 280f * this.ai[0] - vector55.X;
					float num509 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector55.Y;
					float num510 = (float)Math.Sqrt(num508 * num508 + num509 * num509);
					rotation = (float)Math.Atan2(num509, num508) + 1.57f;
					base.velocity.X = (base.velocity.X * 5f + Main.npc[(int)this.ai[1]].velocity.X) / 6f;
					base.velocity.X += 0.5f;
					base.velocity.Y -= 0.5f;
					if (base.velocity.Y < -9f)
					{
						base.velocity.Y = -9f;
					}
					if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 280f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector55 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num508 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector55.X;
						num509 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector55.Y;
						num510 = (float)Math.Sqrt(num508 * num508 + num509 * num509);
						num510 = 20f / num510;
						base.velocity.X = num508 * num510;
						base.velocity.Y = num509 * num510;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f)
					{
						if (this.ai[3] >= 4f)
						{
							this.ai[2] = 3f;
							this.ai[3] = 0f;
						}
						else
						{
							this.ai[2] = 1f;
							this.ai[3] += 1f;
						}
					}
				}
				else if (this.ai[2] == 4f)
				{
					Vector2 vector56 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num511 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector56.X;
					float num512 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector56.Y;
					float num513 = (float)Math.Sqrt(num511 * num511 + num512 * num512);
					rotation = (float)Math.Atan2(num512, num511) + 1.57f;
					base.velocity.Y = (base.velocity.Y * 5f + Main.npc[(int)this.ai[1]].velocity.Y) / 6f;
					base.velocity.X += 0.5f;
					if (base.velocity.X > 12f)
					{
						base.velocity.X = 12f;
					}
					if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
					{
						TargetClosest();
						this.ai[2] = 5f;
						vector56 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num511 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector56.X;
						num512 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector56.Y;
						num513 = (float)Math.Sqrt(num511 * num511 + num512 * num512);
						num513 = 17f / num513;
						base.velocity.X = num511 * num513;
						base.velocity.Y = num512 * num513;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 5f && base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) - 100f)
				{
					if (this.ai[3] >= 4f)
					{
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					else
					{
						this.ai[2] = 4f;
						this.ai[3] += 1f;
					}
				}
			}
			else if (aiStyle == 35)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 0f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						localAI[0] += 2f;
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.07f;
							if (base.velocity.Y > 6f)
							{
								base.velocity.Y = 6f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.07f;
							if (base.velocity.Y < -6f)
							{
								base.velocity.Y = -6f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.1f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 1100f)
						{
							localAI[0] = 0f;
							this.ai[2] = 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y - 150f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.04f;
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 150f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.04f;
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 200f)
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.2f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 160f)
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.2f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					Vector2 vector57 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num514 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector57.X;
					float num515 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector57.Y;
					float num516 = (float)Math.Sqrt(num514 * num514 + num515 * num515);
					rotation = (float)Math.Atan2(num515, num514) + 1.57f;
					if (Main.netMode != 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 140f)
						{
							localAI[0] = 0f;
							float num517 = 12f;
							int num518 = 0;
							int num519 = 102;
							num516 = num517 / num516;
							num514 = (0f - num514) * num516;
							num515 = (0f - num515) * num516;
							num514 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num515 += (float)Main.rand.Next(-40, 41) * 0.01f;
							vector57.X += num514 * 4f;
							vector57.Y += num515 * 4f;
							int num520 = Projectile.NewProjectile(vector57.X, vector57.Y, num514, num515, num519, num518, 0f, Main.myPlayer);
						}
					}
				}
				else
				{
					if (this.ai[2] != 1f)
					{
						return;
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 300f)
					{
						localAI[0] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					Vector2 vector58 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num521 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - vector58.X;
					float num522 = Main.npc[(int)this.ai[1]].position.Y - vector58.Y;
					num522 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 80f - vector58.Y;
					float num523 = (float)Math.Sqrt(num521 * num521 + num522 * num522);
					num523 = 6f / num523;
					num521 *= num523;
					num522 *= num523;
					if (base.velocity.X > num521)
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.9f;
						}
						base.velocity.X -= 0.04f;
					}
					if (base.velocity.X < num521)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.9f;
						}
						base.velocity.X += 0.04f;
					}
					if (base.velocity.Y > num522)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.9f;
						}
						base.velocity.Y -= 0.08f;
					}
					if (base.velocity.Y < num522)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.9f;
						}
						base.velocity.Y += 0.08f;
					}
					TargetClosest();
					vector58 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					num521 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector58.X;
					num522 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector58.Y;
					num523 = (float)Math.Sqrt(num521 * num521 + num522 * num522);
					rotation = (float)Math.Atan2(num522, num521) - 1.57f;
					if (Main.netMode != 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 40f)
						{
							localAI[0] = 0f;
							float num524 = 10f;
							int num525 = 0;
							int num526 = 102;
							num523 = num524 / num523;
							num521 *= num523;
							num522 *= num523;
							num521 += (float)Main.rand.Next(-40, 41) * 0.01f;
							num522 += (float)Main.rand.Next(-40, 41) * 0.01f;
							vector58.X += num521 * 4f;
							vector58.Y += num522 * 4f;
							int num527 = Projectile.NewProjectile(vector58.X, vector58.Y, num521, num522, num526, num525, 0f, Main.myPlayer);
						}
					}
				}
			}
			else if (aiStyle == 36)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 32)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
					{
						localAI[0] += 3f;
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.07f;
							if (base.velocity.Y > 6f)
							{
								base.velocity.Y = 6f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.07f;
							if (base.velocity.Y < -6f)
							{
								base.velocity.Y = -6f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.1f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.1f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					else
					{
						this.ai[3] += 1f;
						if (this.ai[3] >= 800f)
						{
							this.ai[2] += 1f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						if (base.position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y -= 0.1f;
							if (base.velocity.Y > 3f)
							{
								base.velocity.Y = 3f;
							}
						}
						else if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
						{
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.96f;
							}
							base.velocity.Y += 0.1f;
							if (base.velocity.Y < -3f)
							{
								base.velocity.Y = -3f;
							}
						}
						if (base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 180f * this.ai[0])
						{
							if (base.velocity.X > 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X -= 0.14f;
							if (base.velocity.X > 8f)
							{
								base.velocity.X = 8f;
							}
						}
						if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 180f * this.ai[0])
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X *= 0.96f;
							}
							base.velocity.X += 0.14f;
							if (base.velocity.X < -8f)
							{
								base.velocity.X = -8f;
							}
						}
					}
					TargetClosest();
					Vector2 vector59 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num528 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector59.X;
					float num529 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector59.Y;
					float num530 = (float)Math.Sqrt(num528 * num528 + num529 * num529);
					rotation = (float)Math.Atan2(num529, num528) - 1.57f;
					if (Main.netMode != 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 200f)
						{
							localAI[0] = 0f;
							float num531 = 8f;
							int num532 = 25;
							int num533 = 100;
							num530 = num531 / num530;
							num528 *= num530;
							num529 *= num530;
							num528 += (float)Main.rand.Next(-40, 41) * 0.05f;
							num529 += (float)Main.rand.Next(-40, 41) * 0.05f;
							vector59.X += num528 * 8f;
							vector59.Y += num529 * 8f;
							int num534 = Projectile.NewProjectile(vector59.X, vector59.Y, num528, num529, num533, num532, 0f, Main.myPlayer);
						}
					}
				}
				else
				{
					if (this.ai[2] != 1f)
					{
						return;
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 200f)
					{
						localAI[0] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					Vector2 vector60 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num535 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - 350f - vector60.X;
					float num536 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 20f - vector60.Y;
					float num537 = (float)Math.Sqrt(num535 * num535 + num536 * num536);
					num537 = 7f / num537;
					num535 *= num537;
					num536 *= num537;
					if (base.velocity.X > num535)
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.9f;
						}
						base.velocity.X -= 0.1f;
					}
					if (base.velocity.X < num535)
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.9f;
						}
						base.velocity.X += 0.1f;
					}
					if (base.velocity.Y > num536)
					{
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.9f;
						}
						base.velocity.Y -= 0.03f;
					}
					if (base.velocity.Y < num536)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.9f;
						}
						base.velocity.Y += 0.03f;
					}
					TargetClosest();
					vector60 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					num535 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector60.X;
					num536 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector60.Y;
					num537 = (float)Math.Sqrt(num535 * num535 + num536 * num536);
					rotation = (float)Math.Atan2(num536, num535) - 1.57f;
					if (Main.netMode == 1)
					{
						localAI[0] += 1f;
						if (localAI[0] > 80f)
						{
							localAI[0] = 0f;
							float num538 = 10f;
							int num539 = 25;
							int num540 = 100;
							num537 = num538 / num537;
							num535 *= num537;
							num536 *= num537;
							num535 += (float)Main.rand.Next(-40, 41) * 0.05f;
							num536 += (float)Main.rand.Next(-40, 41) * 0.05f;
							vector60.X += num535 * 8f;
							vector60.Y += num536 * 8f;
							int num541 = Projectile.NewProjectile(vector60.X, vector60.Y, num535, num536, num540, num539, 0f, Main.myPlayer);
						}
					}
				}
			}
			else if (aiStyle == 37)
			{
				AI_037_Destroyer();
			}
			else if (aiStyle == 38)
			{
				float num542 = 4f;
				float num543 = 1f;
				if (type == 143)
				{
					num542 = 3f;
					num543 = 0.7f;
				}
				if (type == 145)
				{
					num542 = 3.5f;
					num543 = 0.8f;
				}
				if (type == 143)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 120f)
					{
						this.ai[2] = 0f;
						if (Main.netMode != 1)
						{
							Vector2 vector61 = new Vector2(base.position.X + (float)width * 0.5f - (float)(base.direction * 12), base.position.Y + (float)height * 0.5f);
							float speedX = 12 * spriteDirection;
							float speedY = 0f;
							if (Main.netMode != 1)
							{
								int num544 = 25;
								int num545 = 110;
								int num546 = Projectile.NewProjectile(vector61.X, vector61.Y, speedX, speedY, num545, num544, 0f, Main.myPlayer);
								Main.projectile[num546].ai[0] = 2f;
								Main.projectile[num546].timeLeft = 300;
								Main.projectile[num546].friendly = false;
								NetMessage.SendData(27, -1, -1, null, num546);
								netUpdate = true;
							}
						}
					}
				}
				if (type == 144 && this.ai[1] >= 3f)
				{
					TargetClosest();
					spriteDirection = base.direction;
					if (base.velocity.Y == 0f)
					{
						base.velocity.X *= 0.9f;
						this.ai[2] += 1f;
						if ((double)base.velocity.X > -0.3 && (double)base.velocity.X < 0.3)
						{
							base.velocity.X = 0f;
						}
						if (this.ai[2] >= 200f)
						{
							this.ai[2] = 0f;
							this.ai[1] = 0f;
						}
					}
				}
				else if (type == 145 && this.ai[1] >= 3f)
				{
					TargetClosest();
					if (base.velocity.Y == 0f)
					{
						base.velocity.X *= 0.9f;
						this.ai[2] += 1f;
						if ((double)base.velocity.X > -0.3 && (double)base.velocity.X < 0.3)
						{
							base.velocity.X = 0f;
						}
						if (this.ai[2] >= 16f)
						{
							this.ai[2] = 0f;
							this.ai[1] = 0f;
						}
					}
					if (base.velocity.X == 0f && base.velocity.Y == 0f && this.ai[2] == 8f)
					{
						float num547 = 10f;
						Vector2 vector62 = new Vector2(base.position.X + (float)width * 0.5f - (float)(base.direction * 12), base.position.Y + (float)height * 0.25f);
						float num548 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector62.X;
						float num549 = Main.player[target].position.Y - vector62.Y;
						float num550 = (float)Math.Sqrt(num548 * num548 + num549 * num549);
						num550 = num547 / num550;
						num548 *= num550;
						num549 *= num550;
						if (Main.netMode != 1)
						{
							int num551 = 35;
							int num552 = 109;
							int num553 = Projectile.NewProjectile(vector62.X, vector62.Y, num548, num549, num552, num551, 0f, Main.myPlayer);
							Main.projectile[num553].ai[0] = 2f;
							Main.projectile[num553].timeLeft = 300;
							Main.projectile[num553].friendly = false;
							NetMessage.SendData(27, -1, -1, null, num553);
							netUpdate = true;
						}
					}
				}
				else
				{
					if (base.velocity.Y == 0f)
					{
						if (localAI[2] == base.position.X)
						{
							base.direction *= -1;
							this.ai[3] = 60f;
						}
						localAI[2] = base.position.X;
						if (this.ai[3] == 0f)
						{
							TargetClosest();
						}
						this.ai[0] += 1f;
						if (this.ai[0] > 2f)
						{
							this.ai[0] = 0f;
							this.ai[1] += 1f;
							base.velocity.Y = -8.2f;
							base.velocity.X += (float)base.direction * num543 * 1.1f;
						}
						else
						{
							base.velocity.Y = -6f;
							base.velocity.X += (float)base.direction * num543 * 0.9f;
						}
						spriteDirection = base.direction;
					}
					base.velocity.X += (float)base.direction * num543 * 0.01f;
				}
				if (this.ai[3] > 0f)
				{
					this.ai[3] -= 1f;
				}
				if (base.velocity.X > num542 && base.direction > 0)
				{
					base.velocity.X = 4f;
				}
				if (base.velocity.X < 0f - num542 && base.direction < 0)
				{
					base.velocity.X = -4f;
				}
			}
			else if (aiStyle == 39)
			{
				if (target < 0 || Main.player[target].dead || base.direction == 0)
				{
					TargetClosest();
				}
				bool flag29 = true;
				int num554 = 0;
				if (base.velocity.X < 0f)
				{
					num554 = -1;
				}
				if (base.velocity.X > 0f)
				{
					num554 = 1;
				}
				Vector2 position3 = base.position;
				position3.X += base.velocity.X;
				int num555 = (int)((position3.X + (float)(width / 2) + (float)((width / 2 + 1) * num554)) / 16f);
				int num556 = (int)((position3.Y + (float)height - 1f) / 16f);
				if ((float)(num555 * 16) < position3.X + (float)width && (float)(num555 * 16 + 16) > position3.X)
				{
					Tile tileSafely = Framing.GetTileSafely(num555, num556 - 4);
					Tile tileSafely2 = Framing.GetTileSafely(num555 - num554, num556 - 3);
					Tile tileSafely3 = Framing.GetTileSafely(num555, num556 - 3);
					Tile tileSafely4 = Framing.GetTileSafely(num555, num556 - 2);
					Tile tileSafely5 = Framing.GetTileSafely(num555, num556 - 1);
					Tile tileSafely6 = Framing.GetTileSafely(num555, num556);
					if (((tileSafely6.nactive() && !tileSafely6.topSlope() && !tileSafely5.topSlope() && ((Main.tileSolid[tileSafely6.type] && !Main.tileSolidTop[tileSafely6.type]) || (flag29 && Main.tileSolidTop[tileSafely6.type] && (!Main.tileSolid[tileSafely5.type] || !tileSafely5.nactive()) && tileSafely6.type != 16 && tileSafely6.type != 18 && tileSafely6.type != 134))) || (tileSafely5.halfBrick() && tileSafely5.nactive())) && (!tileSafely5.nactive() || !Main.tileSolid[tileSafely5.type] || Main.tileSolidTop[tileSafely5.type] || (tileSafely5.halfBrick() && (!tileSafely.nactive() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type]))) && (!tileSafely4.nactive() || !Main.tileSolid[tileSafely4.type] || Main.tileSolidTop[tileSafely4.type]) && (!tileSafely3.nactive() || !Main.tileSolid[tileSafely3.type] || Main.tileSolidTop[tileSafely3.type]) && (!tileSafely2.nactive() || !Main.tileSolid[tileSafely2.type] || Main.tileSolidTop[tileSafely2.type]))
					{
						float num557 = num556 * 16;
						if (tileSafely6.halfBrick())
						{
							num557 += 8f;
						}
						if (tileSafely5.halfBrick())
						{
							num557 -= 8f;
						}
						if (num557 < position3.Y + (float)height)
						{
							float num558 = position3.Y + (float)height - num557;
							if ((double)num558 <= 16.1)
							{
								gfxOffY += base.position.Y + (float)height - num557;
								base.position.Y = num557 - (float)height;
								if (num558 < 9f)
								{
									stepSpeed = 0.75f;
								}
								else
								{
									stepSpeed = 1.5f;
								}
							}
						}
					}
				}
				if (justHit && type != 417)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					TargetClosest();
				}
				if (type == 154)
				{
					base.position += netOffset;
					if (Main.rand.Next(10) == 0)
					{
						int num559 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 1.5f);
						Main.dust[num559].noGravity = true;
						Dust dust = Main.dust[num559];
						dust.velocity *= 0.2f;
					}
					base.position -= netOffset;
				}
				if (this.ai[0] == 0f)
				{
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					Vector2 vector63 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num560 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector63.X;
					float num561 = Main.player[target].position.Y - vector63.Y;
					float num562 = (float)Math.Sqrt(num560 * num560 + num561 * num561);
					bool flag30 = Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					if (type >= 496 && type <= 497)
					{
						if (num562 > 200f && flag30)
						{
							this.ai[1] += 2f;
						}
						if (num562 > 600f && (flag30 || base.position.Y + (float)height > Main.player[target].position.Y - 200f))
						{
							this.ai[1] += 4f;
						}
					}
					else
					{
						if (num562 > 200f && flag30)
						{
							this.ai[1] += 4f;
						}
						if (num562 > 600f && (flag30 || base.position.Y + (float)height > Main.player[target].position.Y - 200f))
						{
							this.ai[1] += 10f;
						}
						if (wet)
						{
							this.ai[1] = 1000f;
						}
					}
					defense = defDefense;
					damage = defDamage;
					if (type >= 496 && type <= 497)
					{
						knockBackResist = 0.75f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
					}
					else
					{
						knockBackResist = 0.3f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 400f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 1f;
					}
					if (!justHit && base.velocity.X != oldVelocity.X)
					{
						base.direction *= -1;
					}
					if (base.velocity.Y == 0f && Main.player[target].position.Y < base.position.Y + (float)height)
					{
						int num563;
						int num564;
						if (base.direction > 0)
						{
							num563 = (int)(((double)base.position.X + (double)width * 0.5) / 16.0);
							num564 = num563 + 3;
						}
						else
						{
							num564 = (int)(((double)base.position.X + (double)width * 0.5) / 16.0);
							num563 = num564 - 3;
						}
						int num565 = (int)((base.position.Y + (float)height + 2f) / 16f) - 1;
						int num566 = num565 + 4;
						bool flag31 = false;
						for (int num567 = num563; num567 <= num564; num567++)
						{
							for (int num568 = num565; num568 <= num566; num568++)
							{
								if (Main.tile[num567, num568] != null && Main.tile[num567, num568].nactive() && Main.tileSolid[Main.tile[num567, num568].type])
								{
									flag31 = true;
								}
							}
						}
						if (!flag31)
						{
							base.direction *= -1;
							base.velocity.X = 0.1f * (float)base.direction;
						}
					}
					if (type >= 496 && type <= 497)
					{
						float num569 = 0.5f;
						if (base.velocity.X < 0f - num569 || base.velocity.X > num569)
						{
							if (base.velocity.Y == 0f)
							{
								base.velocity *= 0.8f;
							}
						}
						else if (base.velocity.X < num569 && base.direction == 1)
						{
							base.velocity.X += 0.07f;
							if (base.velocity.X > num569)
							{
								base.velocity.X = num569;
							}
						}
						else if (base.velocity.X > 0f - num569 && base.direction == -1)
						{
							base.velocity.X -= 0.07f;
							if (base.velocity.X < 0f - num569)
							{
								base.velocity.X = 0f - num569;
							}
						}
						return;
					}
					float num570 = 1f;
					if (num562 < 400f)
					{
						if (base.velocity.X < 0f - num570 || base.velocity.X > num570)
						{
							if (base.velocity.Y == 0f)
							{
								base.velocity *= 0.8f;
							}
						}
						else if (base.velocity.X < num570 && base.direction == 1)
						{
							base.velocity.X += 0.07f;
							if (base.velocity.X > num570)
							{
								base.velocity.X = num570;
							}
						}
						else if (base.velocity.X > 0f - num570 && base.direction == -1)
						{
							base.velocity.X -= 0.07f;
							if (base.velocity.X < 0f - num570)
							{
								base.velocity.X = 0f - num570;
							}
						}
					}
					else if (base.velocity.X < -1.5f || base.velocity.X > 1.5f)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < 1.5f && base.direction == 1)
					{
						base.velocity.X += 0.07f;
						if (base.velocity.X > 1.5f)
						{
							base.velocity.X = 1.5f;
						}
					}
					else if (base.velocity.X > -1.5f && base.direction == -1)
					{
						base.velocity.X -= 0.07f;
						if (base.velocity.X < -1.5f)
						{
							base.velocity.X = -1.5f;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					base.velocity.X *= 0.5f;
					if (type >= 496 && type <= 497)
					{
						this.ai[1] += 0.5f;
					}
					else
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] >= 30f)
					{
						netUpdate = true;
						TargetClosest();
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[0] = 3f;
						if (type == 417)
						{
							base.position.Y += height;
							height = 32;
							base.position.Y -= height;
							this.ai[0] = 6f;
							this.ai[2] = Main.rand.Next(2, 5);
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					if (type == 154 && Main.rand.Next(3) < 2)
					{
						base.position += netOffset;
						int num571 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 1.5f);
						Main.dust[num571].noGravity = true;
						Dust dust = Main.dust[num571];
						dust.velocity *= 0.2f;
						base.position -= netOffset;
					}
					float num572 = 2f;
					if (type >= 496 && type <= 497)
					{
						num572 = 1.5f;
					}
					damage = GetAttackDamage_LerpBetweenFinalValues((float)defDamage * num572, (float)defDamage * num572 * 0.9f);
					defense = defDefense * 2;
					this.ai[1] += 1f;
					if (this.ai[1] == 1f)
					{
						netUpdate = true;
						TargetClosest();
						this.ai[2] += 0.3f;
						rotation += this.ai[2] * (float)base.direction;
						this.ai[1] += 1f;
						bool flag32 = Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
						float num573 = 10f;
						if (!flag32)
						{
							num573 = 6f;
						}
						if (type >= 496 && type <= 497)
						{
							num573 *= 0.75f;
						}
						Vector2 vector64 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num574 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector64.X;
						float num575 = Math.Abs(num574) * 0.2f;
						if (directionY > 0)
						{
							num575 = 0f;
						}
						float num576 = Main.player[target].position.Y - vector64.Y - num575;
						float num577 = (float)Math.Sqrt(num574 * num574 + num576 * num576);
						netUpdate = true;
						num577 = num573 / num577;
						num574 *= num577;
						num576 *= num577;
						if (!flag32)
						{
							num576 = -10f;
						}
						base.velocity.X = num574;
						base.velocity.Y = num576;
						this.ai[3] = base.velocity.X;
					}
					else
					{
						if (base.position.X + (float)width > Main.player[target].position.X && base.position.X < Main.player[target].position.X + (float)Main.player[target].width && base.position.Y < Main.player[target].position.Y + (float)Main.player[target].height)
						{
							base.velocity.X *= 0.8f;
							this.ai[3] = 0f;
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y += 0.2f;
							}
						}
						if (this.ai[3] != 0f)
						{
							base.velocity.X = this.ai[3];
							base.velocity.Y -= 0.22f;
						}
						if (this.ai[1] >= 90f)
						{
							noGravity = false;
							this.ai[1] = 0f;
							this.ai[0] = 4f;
						}
					}
					if (wet && directionY < 0)
					{
						base.velocity.Y -= 0.3f;
					}
					rotation += this.ai[2] * (float)base.direction;
				}
				else if (this.ai[0] == 4f)
				{
					if (wet && directionY < 0)
					{
						base.velocity.Y -= 0.3f;
					}
					base.velocity.X *= 0.96f;
					if (this.ai[2] > 0f)
					{
						this.ai[2] -= 0.01f;
						rotation += this.ai[2] * (float)base.direction;
					}
					else if (base.velocity.Y >= 0f)
					{
						rotation = 0f;
					}
					if (this.ai[2] <= 0f && (base.velocity.Y == 0f || wet))
					{
						netUpdate = true;
						rotation = 0f;
						this.ai[2] = 0f;
						this.ai[1] = 0f;
						this.ai[0] = 5f;
					}
				}
				else if (this.ai[0] == 6f)
				{
					damage = GetAttackDamage_LerpBetweenFinalValues((float)defDamage * 1.8f, (float)defDamage * 1.4f);
					defense = defDefense * 2;
					knockBackResist = 0f;
					if (Main.rand.Next(3) < 2)
					{
						base.position += netOffset;
						int num578 = Dust.NewDust(base.Center - new Vector2(30f), 60, 60, 6, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 1.5f);
						Main.dust[num578].noGravity = true;
						Dust dust = Main.dust[num578];
						dust.velocity *= 0.2f;
						Main.dust[num578].fadeIn = 1f;
						base.position -= netOffset;
					}
					this.ai[1] += 1f;
					if (this.ai[3] > 0f)
					{
						base.position += netOffset;
						if (this.ai[3] == 1f)
						{
							Vector2 vector65 = base.Center - new Vector2(50f);
							for (int num579 = 0; num579 < 32; num579++)
							{
								int num580 = Dust.NewDust(vector65, 100, 100, 6, 0f, 0f, 100, default(Color), 2.5f);
								Main.dust[num580].noGravity = true;
								Dust dust = Main.dust[num580];
								dust.velocity *= 3f;
								num580 = Dust.NewDust(vector65, 100, 100, 6, 0f, 0f, 100, default(Color), 1.5f);
								dust = Main.dust[num580];
								dust.velocity *= 2f;
								Main.dust[num580].noGravity = true;
							}
							for (int num581 = 0; num581 < 4; num581++)
							{
								int num582 = Gore.NewGore(vector65 + new Vector2((float)(50 * Main.rand.Next(100)) / 100f, (float)(50 * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
								Gore gore = Main.gore[num582];
								gore.velocity *= 0.3f;
								Main.gore[num582].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
								Main.gore[num582].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
							}
						}
						for (int num583 = 0; num583 < 5; num583++)
						{
							int num584 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num584].velocity = Main.dust[num584].velocity * Main.rand.NextFloat();
						}
						this.ai[3]++;
						if (this.ai[3] >= 10f)
						{
							this.ai[3] = 0f;
						}
						base.position -= netOffset;
					}
					if (this.ai[1] == 1f)
					{
						netUpdate = true;
						TargetClosest();
						bool flag33 = Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
						float num585 = 16f;
						if (!flag33)
						{
							num585 = 10f;
						}
						Vector2 vector66 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num586 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector66.X;
						float num587 = Math.Abs(num586) * 0.2f;
						if (directionY > 0)
						{
							num587 = 0f;
						}
						float num588 = Main.player[target].position.Y - vector66.Y - num587;
						float num589 = (float)Math.Sqrt(num586 * num586 + num588 * num588);
						netUpdate = true;
						num589 = num585 / num589;
						num586 *= num589;
						num588 *= num589;
						if (!flag33)
						{
							num588 = -12f;
						}
						base.velocity.X = num586;
						base.velocity.Y = num588;
					}
					else
					{
						if (base.position.X + (float)width > Main.player[target].position.X && base.position.X < Main.player[target].position.X + (float)Main.player[target].width && base.position.Y < Main.player[target].position.Y + (float)Main.player[target].height)
						{
							base.velocity.X *= 0.9f;
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y += 0.2f;
							}
						}
						if (this.ai[2] == 0f || this.ai[1] >= 1200f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 5f;
						}
					}
					if (wet && directionY < 0)
					{
						base.velocity.Y -= 0.3f;
					}
					rotation += MathHelper.Clamp(base.velocity.X / 10f * (float)base.direction, -(float)Math.PI / 10f, (float)Math.PI / 10f);
				}
				else if (this.ai[0] == 5f)
				{
					if (type == 417)
					{
						base.position.Y += height;
						height = 52;
						base.position.Y -= height;
					}
					rotation = 0f;
					base.velocity.X = 0f;
					if (type >= 496 && type <= 497)
					{
						this.ai[1] += 0.5f;
					}
					else
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] >= 30f)
					{
						TargetClosest();
						netUpdate = true;
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
					if (wet)
					{
						this.ai[0] = 3f;
						this.ai[1] = 0f;
					}
				}
			}
			else if (aiStyle == 40)
			{
				if (target < 0 || target == 255 || Main.player[target].dead)
				{
					TargetClosest();
				}
				float num590 = 2f;
				float num591 = 0.08f;
				if (type == 531)
				{
					num590 = 4f;
					num591 = 0.16f;
				}
				Vector2 vector67 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num592 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
				float num593 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
				num592 = (int)(num592 / 8f) * 8;
				num593 = (int)(num593 / 8f) * 8;
				vector67.X = (int)(vector67.X / 8f) * 8;
				vector67.Y = (int)(vector67.Y / 8f) * 8;
				num592 -= vector67.X;
				num593 -= vector67.Y;
				if (confused)
				{
					num592 *= -2f;
					num593 *= -2f;
				}
				float num594 = (float)Math.Sqrt(num592 * num592 + num593 * num593);
				float num595 = num594;
				if (num594 == 0f)
				{
					num592 = base.velocity.X;
					num593 = base.velocity.Y;
				}
				else
				{
					num594 = num590 / num594;
					num592 *= num594;
					num593 *= num594;
				}
				if (Main.player[target].dead)
				{
					num592 = (float)base.direction * num590 / 2f;
					num593 = (0f - num590) / 2f;
				}
				spriteDirection = -1;
				if (!Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 0f)
					{
						base.velocity.Y += 0.023f;
					}
					else
					{
						base.velocity.Y -= 0.023f;
					}
					if (this.ai[0] < -100f || this.ai[0] > 100f)
					{
						base.velocity.X += 0.023f;
					}
					else
					{
						base.velocity.X -= 0.023f;
					}
					if (this.ai[0] > 200f)
					{
						this.ai[0] = -200f;
					}
					base.velocity.X += num592 * 0.007f;
					base.velocity.Y += num593 * 0.007f;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					if ((double)base.velocity.X > 1.5)
					{
						base.velocity.X *= 0.9f;
					}
					if ((double)base.velocity.X < -1.5)
					{
						base.velocity.X *= 0.9f;
					}
					if ((double)base.velocity.Y > 1.5)
					{
						base.velocity.Y *= 0.9f;
					}
					if ((double)base.velocity.Y < -1.5)
					{
						base.velocity.Y *= 0.9f;
					}
					if (base.velocity.X > 3f)
					{
						base.velocity.X = 3f;
					}
					if (base.velocity.X < -3f)
					{
						base.velocity.X = -3f;
					}
					if (base.velocity.Y > 3f)
					{
						base.velocity.Y = 3f;
					}
					if (base.velocity.Y < -3f)
					{
						base.velocity.Y = -3f;
					}
				}
				else
				{
					if (base.velocity.X < num592)
					{
						base.velocity.X += num591;
						if (base.velocity.X < 0f && num592 > 0f)
						{
							base.velocity.X += num591;
						}
					}
					else if (base.velocity.X > num592)
					{
						base.velocity.X -= num591;
						if (base.velocity.X > 0f && num592 < 0f)
						{
							base.velocity.X -= num591;
						}
					}
					if (base.velocity.Y < num593)
					{
						base.velocity.Y += num591;
						if (base.velocity.Y < 0f && num593 > 0f)
						{
							base.velocity.Y += num591;
						}
					}
					else if (base.velocity.Y > num593)
					{
						base.velocity.Y -= num591;
						if (base.velocity.Y > 0f && num593 < 0f)
						{
							base.velocity.Y -= num591;
						}
					}
					rotation = (float)Math.Atan2(num593, num592);
				}
				if (type == 531)
				{
					rotation += (float)Math.PI / 2f;
				}
				float num596 = 0.5f;
				if (collideX)
				{
					netUpdate = true;
					base.velocity.X = oldVelocity.X * (0f - num596);
					if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
					{
						base.velocity.X = 2f;
					}
					if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
					{
						base.velocity.X = -2f;
					}
				}
				if (collideY)
				{
					netUpdate = true;
					base.velocity.Y = oldVelocity.Y * (0f - num596);
					if (base.velocity.Y > 0f && (double)base.velocity.Y < 1.5)
					{
						base.velocity.Y = 2f;
					}
					if (base.velocity.Y < 0f && (double)base.velocity.Y > -1.5)
					{
						base.velocity.Y = -2f;
					}
				}
				if (((base.velocity.X > 0f && oldVelocity.X < 0f) || (base.velocity.X < 0f && oldVelocity.X > 0f) || (base.velocity.Y > 0f && oldVelocity.Y < 0f) || (base.velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
				{
					netUpdate = true;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (Main.netMode != 1 && Main.expertMode && target >= 0 && (type == 163 || type == 238) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					localAI[0] += 1f;
					if (justHit)
					{
						localAI[0] -= Main.rand.Next(20, 60);
						if (localAI[0] < 0f)
						{
							localAI[0] = 0f;
						}
					}
					if (localAI[0] > (float)Main.rand.Next(180, 900))
					{
						localAI[0] = 0f;
						Vector2 vector68 = Main.player[target].Center - base.Center;
						vector68.Normalize();
						vector68 *= 8f;
						int attackDamage_ForProjectiles8 = GetAttackDamage_ForProjectiles(18f, 18f);
						int num597 = Projectile.NewProjectile(base.Center.X, base.Center.Y, vector68.X, vector68.Y, 472, attackDamage_ForProjectiles8, 0f, Main.myPlayer);
					}
				}
				if (!NPCCanStickToWalls())
				{
					int newType = type;
					switch (type)
					{
					case 165:
						newType = 164;
						break;
					case 237:
						newType = 236;
						break;
					case 238:
						newType = 163;
						break;
					case 240:
						newType = 239;
						break;
					case 531:
						newType = 530;
						break;
					}
					Transform(newType);
				}
			}
			else if (aiStyle == 41)
			{
				if (this.ai[2] > 1f)
				{
					this.ai[2] -= 1f;
				}
				if (this.ai[2] == 0f)
				{
					this.ai[0] = -100f;
					this.ai[2] = 1f;
					TargetClosest();
					spriteDirection = base.direction;
				}
				if (type == 378)
				{
					Vector2 value = new Vector2(-6f, -10f);
					value.X *= spriteDirection;
					if (this.ai[1] != 5f && Main.rand.Next(3) == 0)
					{
						base.position += netOffset;
						int num598 = Dust.NewDust(base.Center + value - Vector2.One * 5f, 4, 4, 6);
						Main.dust[num598].scale = 1.5f;
						Main.dust[num598].noGravity = true;
						Main.dust[num598].velocity = Main.dust[num598].velocity * 0.25f + Vector2.Normalize(value) * 1f;
						Main.dust[num598].velocity = Main.dust[num598].velocity.RotatedBy(-(float)Math.PI / 2f * (float)base.direction);
						base.position -= netOffset;
					}
					if (this.ai[1] == 5f)
					{
						base.velocity = Vector2.Zero;
						base.position.X += width / 2;
						base.position.Y += height / 2;
						width = 160;
						height = 160;
						base.position.X -= width / 2;
						base.position.Y -= height / 2;
						dontTakeDamage = true;
						base.position += netOffset;
						for (int num599 = 0; num599 < 8; num599++)
						{
							int num600 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						}
						for (int num601 = 0; num601 < 32; num601++)
						{
							int num602 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num602].noGravity = true;
							Dust dust = Main.dust[num602];
							dust.velocity *= 3f;
							num602 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num602];
							dust.velocity *= 2f;
							Main.dust[num602].noGravity = true;
						}
						for (int num603 = 0; num603 < 2; num603++)
						{
							int num604 = Gore.NewGore(base.position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num604];
							gore.velocity *= 0.3f;
							Main.gore[num604].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
							Main.gore[num604].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
						}
						if (this.ai[2] == 1f)
						{
							SoundEngine.PlaySound(SoundID.Item14, base.position);
							life = -1;
							HitEffect();
							active = false;
						}
						base.position -= netOffset;
						return;
					}
				}
				if (type == 378 && this.ai[1] != 5f)
				{
					if (wet || Vector2.Distance(base.Center, Main.player[target].Center) < 64f)
					{
						this.ai[1] = 5f;
						this.ai[2] = 3f;
						netUpdate = true;
						return;
					}
				}
				else if (wet && type != 177)
				{
					if (collideX)
					{
						base.direction *= -base.direction;
						spriteDirection = base.direction;
					}
					if (collideY)
					{
						TargetClosest();
						if (oldVelocity.Y < 0f)
						{
							base.velocity.Y = 5f;
						}
						else
						{
							base.velocity.Y -= 2f;
						}
						spriteDirection = base.direction;
					}
					if (base.velocity.Y > 4f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.3f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				if (base.velocity.Y == 0f)
				{
					if (this.ai[3] == base.position.X)
					{
						base.direction *= -1;
						this.ai[2] = 300f;
					}
					this.ai[3] = 0f;
					base.velocity.X *= 0.8f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					if (type == 177)
					{
						this.ai[0] += 2f;
					}
					else
					{
						this.ai[0] += 5f;
					}
					Vector2 vector69 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num605 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector69.X;
					float num606 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector69.Y;
					float num607 = (float)Math.Sqrt(num605 * num605 + num606 * num606);
					float num608 = 400f / num607;
					num608 = ((type != 177) ? (num608 * 10f) : (num608 * 5f));
					if (num608 > 30f)
					{
						num608 = 30f;
					}
					this.ai[0] += (int)num608;
					if (this.ai[0] >= 0f)
					{
						netUpdate = true;
						if (this.ai[2] == 1f)
						{
							TargetClosest();
						}
						if (type == 177)
						{
							if (this.ai[1] == 2f)
							{
								base.velocity.Y = -11.5f;
								base.velocity.X += 2f * (float)base.direction;
								if (num607 < 350f && num607 > 200f)
								{
									base.velocity.X += base.direction;
								}
								this.ai[0] = -200f;
								this.ai[1] = 0f;
								this.ai[3] = base.position.X;
							}
							else
							{
								base.velocity.Y = -7.5f;
								base.velocity.X += 4 * base.direction;
								if (num607 < 350f && num607 > 200f)
								{
									base.velocity.X += base.direction;
								}
								this.ai[0] = -120f;
								this.ai[1] += 1f;
							}
						}
						else if (this.ai[1] == 3f)
						{
							base.velocity.Y = -9f;
							base.velocity.X += 3 * base.direction;
							if (num607 < 350f && num607 > 200f)
							{
								base.velocity.X += base.direction;
							}
							this.ai[0] = -200f;
							this.ai[1] = 0f;
							this.ai[3] = base.position.X;
						}
						else
						{
							base.velocity.Y = -5f;
							base.velocity.X += 5 * base.direction;
							if (num607 < 350f && num607 > 200f)
							{
								base.velocity.X += base.direction;
							}
							this.ai[0] = -120f;
							this.ai[1] += 1f;
						}
					}
					else if (this.ai[0] >= -30f)
					{
						aiAction = 1;
					}
					spriteDirection = base.direction;
				}
				else
				{
					if (target >= 255)
					{
						return;
					}
					if (type == 177)
					{
						bool flag34 = false;
						if (base.position.Y + (float)height < Main.player[target].position.Y && base.position.X + (float)width > Main.player[target].position.X && base.position.X < Main.player[target].position.X + (float)Main.player[target].width)
						{
							flag34 = true;
							base.velocity.X *= 0.92f;
							if (base.velocity.Y < 0f)
							{
								base.velocity.Y *= 0.9f;
								base.velocity.Y += 0.1f;
							}
						}
						if (!flag34 && ((base.direction == 1 && base.velocity.X < 4f) || (base.direction == -1 && base.velocity.X > -4f)))
						{
							if ((base.direction == -1 && (double)base.velocity.X < 0.1) || (base.direction == 1 && (double)base.velocity.X > -0.1))
							{
								base.velocity.X += 0.2f * (float)base.direction;
							}
							else
							{
								base.velocity.X *= 0.93f;
							}
						}
					}
					else if ((base.direction == 1 && base.velocity.X < 3f) || (base.direction == -1 && base.velocity.X > -3f))
					{
						if ((base.direction == -1 && (double)base.velocity.X < 0.1) || (base.direction == 1 && (double)base.velocity.X > -0.1))
						{
							base.velocity.X += 0.2f * (float)base.direction;
						}
						else
						{
							base.velocity.X *= 0.93f;
						}
					}
				}
			}
			else if (aiStyle == 42)
			{
				TargetClosest();
				if (this.ai[0] == 0f)
				{
					if (target >= 0)
					{
						Vector2 vector70 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num609 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector70.X;
						float num610 = Main.player[target].position.Y - vector70.Y;
						float num611 = (float)Math.Sqrt(num609 * num609 + num610 * num610);
						if (num611 < 200f && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							this.ai[0] = 1f;
						}
					}
					if (base.velocity.X != 0f || base.velocity.Y < 0f || base.velocity.Y > 2f || life != lifeMax)
					{
						this.ai[0] = 1f;
					}
				}
				else
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 21f)
					{
						this.ai[0] = 21f;
						Transform(196);
					}
				}
			}
			else if (aiStyle == 43)
			{
				if (Main.expertMode)
				{
					int num612 = (int)(20f * (1f - (float)life / (float)lifeMax));
					defense = defDefense + num612;
				}
				if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
				}
				bool dead4 = Main.player[target].dead;
				float num613 = 0f;
				if ((double)(base.position.Y / 16f) < Main.worldSurface)
				{
					num613 += 1f;
				}
				if (!Main.player[target].ZoneJungle)
				{
					num613 += 1f;
				}
				if (Main.getGoodWorld)
				{
					num613 += 0.5f;
				}
				float num614 = Vector2.Distance(base.Center, Main.player[target].Center);
				if (this.ai[0] != 5f)
				{
					if (timeLeft < 60)
					{
						timeLeft = 60;
					}
					if (num614 > 3000f)
					{
						this.ai[0] = 4f;
					}
				}
				if (dead4)
				{
					this.ai[0] = 5f;
				}
				if (this.ai[0] == 5f)
				{
					base.velocity.Y *= 0.98f;
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					if (base.position.X < (float)(Main.maxTilesX * 8))
					{
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.98f;
						}
						else
						{
							localAI[0] = 1f;
						}
						base.velocity.X -= 0.08f;
					}
					else
					{
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.98f;
						}
						else
						{
							localAI[0] = 1f;
						}
						base.velocity.X += 0.08f;
					}
					EncourageDespawn(10);
				}
				else if (this.ai[0] == -1f)
				{
					if (Main.netMode == 1)
					{
						return;
					}
					float num615 = this.ai[1];
					int num616;
					do
					{
						num616 = Main.rand.Next(3);
						switch (num616)
						{
						case 1:
							num616 = 2;
							break;
						case 2:
							num616 = 3;
							break;
						}
					}
					while ((float)num616 == num615);
					this.ai[0] = num616;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
				}
				else if (this.ai[0] == 0f)
				{
					int num617 = 2;
					if (Main.expertMode)
					{
						if (life < lifeMax / 2)
						{
							num617++;
						}
						if (life < lifeMax / 3)
						{
							num617++;
						}
						if (life < lifeMax / 5)
						{
							num617++;
						}
					}
					num617 += (int)(1f * num613);
					if (this.ai[1] > (float)(2 * num617) && this.ai[1] % 2f == 0f)
					{
						this.ai[0] = -1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						netUpdate = true;
						return;
					}
					if (this.ai[1] % 2f == 0f)
					{
						TargetClosest();
						float num618 = 20f;
						num618 += 20f * num613;
						if (Math.Abs(base.Center.Y - Main.player[target].Center.Y) < num618)
						{
							localAI[0] = 1f;
							this.ai[1] += 1f;
							this.ai[2] = 0f;
							float num619 = 12f;
							if (Main.expertMode)
							{
								num619 = 16f;
								if ((double)life < (double)lifeMax * 0.75)
								{
									num619 += 2f;
								}
								if ((double)life < (double)lifeMax * 0.5)
								{
									num619 += 2f;
								}
								if ((double)life < (double)lifeMax * 0.25)
								{
									num619 += 2f;
								}
								if ((double)life < (double)lifeMax * 0.1)
								{
									num619 += 2f;
								}
							}
							num619 += 7f * num613;
							Vector2 vector71 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							float num620 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector71.X;
							float num621 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector71.Y;
							float num622 = (float)Math.Sqrt(num620 * num620 + num621 * num621);
							num622 = num619 / num622;
							base.velocity.X = num620 * num622;
							base.velocity.Y = num621 * num622;
							spriteDirection = base.direction;
							SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
							return;
						}
						localAI[0] = 0f;
						float num623 = 12f;
						float num624 = 0.15f;
						if (Main.expertMode)
						{
							if ((double)life < (double)lifeMax * 0.75)
							{
								num623 += 1f;
								num624 += 0.05f;
							}
							if ((double)life < (double)lifeMax * 0.5)
							{
								num623 += 1f;
								num624 += 0.05f;
							}
							if ((double)life < (double)lifeMax * 0.25)
							{
								num623 += 2f;
								num624 += 0.05f;
							}
							if ((double)life < (double)lifeMax * 0.1)
							{
								num623 += 2f;
								num624 += 0.1f;
							}
						}
						num623 += 3f * num613;
						num624 += 0.5f * num613;
						if (base.position.Y + (float)(height / 2) < Main.player[target].position.Y + (float)(Main.player[target].height / 2))
						{
							base.velocity.Y += num624;
						}
						else
						{
							base.velocity.Y -= num624;
						}
						if (base.velocity.Y < 0f - num623)
						{
							base.velocity.Y = 0f - num623;
						}
						if (base.velocity.Y > num623)
						{
							base.velocity.Y = num623;
						}
						if (Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) > 600f)
						{
							base.velocity.X += 0.15f * (float)base.direction;
						}
						else if (Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < 300f)
						{
							base.velocity.X -= 0.15f * (float)base.direction;
						}
						else
						{
							base.velocity.X *= 0.8f;
						}
						if (base.velocity.X < -16f)
						{
							base.velocity.X = -16f;
						}
						if (base.velocity.X > 16f)
						{
							base.velocity.X = 16f;
						}
						spriteDirection = base.direction;
						return;
					}
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					int num625 = 600;
					if (Main.expertMode)
					{
						if ((double)life < (double)lifeMax * 0.1)
						{
							num625 = 300;
						}
						else if ((double)life < (double)lifeMax * 0.25)
						{
							num625 = 450;
						}
						else if ((double)life < (double)lifeMax * 0.5)
						{
							num625 = 500;
						}
						else if ((double)life < (double)lifeMax * 0.75)
						{
							num625 = 550;
						}
					}
					int num626 = 1;
					if (base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))
					{
						num626 = -1;
					}
					num625 -= (int)(100f * num613);
					bool flag35 = false;
					if (base.direction == num626 && Math.Abs(base.Center.X - Main.player[target].Center.X) > (float)num625)
					{
						this.ai[2] = 1f;
						flag35 = true;
					}
					if (Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num625 * 1.5f)
					{
						this.ai[2] = 1f;
						flag35 = true;
					}
					if (num613 > 0f && flag35)
					{
						base.velocity *= 0.5f;
					}
					if (this.ai[2] == 1f)
					{
						TargetClosest();
						spriteDirection = base.direction;
						localAI[0] = 0f;
						base.velocity *= 0.9f;
						float num627 = 0.1f;
						if (Main.expertMode)
						{
							if (life < lifeMax / 2)
							{
								base.velocity *= 0.9f;
								num627 += 0.05f;
							}
							if (life < lifeMax / 3)
							{
								base.velocity *= 0.9f;
								num627 += 0.05f;
							}
							if (life < lifeMax / 5)
							{
								base.velocity *= 0.9f;
								num627 += 0.05f;
							}
						}
						if (num613 > 0f)
						{
							base.velocity *= 0.7f;
						}
						if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < num627)
						{
							this.ai[2] = 0f;
							this.ai[1] += 1f;
						}
					}
					else
					{
						localAI[0] = 1f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					TargetClosest();
					spriteDirection = base.direction;
					float num628 = 12f;
					float num629 = 0.07f;
					if (Main.expertMode)
					{
						num629 = 0.1f;
					}
					Vector2 vector72 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num630 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector72.X;
					float num631 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector72.Y;
					float num632 = (float)Math.Sqrt(num630 * num630 + num631 * num631);
					if (num632 < 200f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
						return;
					}
					num632 = num628 / num632;
					if (base.velocity.X < num630)
					{
						base.velocity.X += num629;
						if (base.velocity.X < 0f && num630 > 0f)
						{
							base.velocity.X += num629;
						}
					}
					else if (base.velocity.X > num630)
					{
						base.velocity.X -= num629;
						if (base.velocity.X > 0f && num630 < 0f)
						{
							base.velocity.X -= num629;
						}
					}
					if (base.velocity.Y < num631)
					{
						base.velocity.Y += num629;
						if (base.velocity.Y < 0f && num631 > 0f)
						{
							base.velocity.Y += num629;
						}
					}
					else if (base.velocity.Y > num631)
					{
						base.velocity.Y -= num629;
						if (base.velocity.Y > 0f && num631 < 0f)
						{
							base.velocity.Y -= num629;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					localAI[0] = 0f;
					TargetClosest();
					Vector2 vector73 = new Vector2(base.position.X + (float)(width / 2) + (float)(Main.rand.Next(20) * base.direction), base.position.Y + (float)height * 0.8f);
					Vector2 vector74 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num633 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector74.X;
					float num634 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector74.Y;
					float num635 = (float)Math.Sqrt(num633 * num633 + num634 * num634);
					this.ai[1] += 1f;
					if (Main.expertMode)
					{
						int num636 = 0;
						for (int num637 = 0; num637 < 255; num637++)
						{
							if (Main.player[num637].active && !Main.player[num637].dead && (base.Center - Main.player[num637].Center).Length() < 1000f)
							{
								num636++;
							}
						}
						this.ai[1] += num636 / 2;
						if ((double)life < (double)lifeMax * 0.75)
						{
							this.ai[1] += 0.25f;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							this.ai[1] += 0.25f;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							this.ai[1] += 0.25f;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							this.ai[1] += 0.25f;
						}
					}
					bool flag36 = false;
					int num638 = (int)(40f - 18f * num613);
					if (this.ai[1] > (float)num638)
					{
						this.ai[1] = 0f;
						this.ai[2]++;
						flag36 = true;
					}
					if (Collision.CanHit(vector73, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height) && flag36)
					{
						SoundEngine.PlaySound(3, (int)base.position.X, (int)base.position.Y);
						if (Main.netMode != 1)
						{
							int num639 = Main.rand.Next(210, 212);
							int num640 = NewNPC((int)vector73.X, (int)vector73.Y, num639);
							Main.npc[num640].velocity = Main.player[target].Center - base.Center;
							Main.npc[num640].velocity.Normalize();
							NPC nPC = Main.npc[num640];
							nPC.velocity *= 5f;
							Main.npc[num640].localAI[0] = 60f;
							Main.npc[num640].netUpdate = true;
						}
					}
					if (num635 > 400f || !Collision.CanHit(new Vector2(vector73.X, vector73.Y - 30f), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num641 = 14f;
						float num642 = 0.1f;
						vector74 = vector73;
						num633 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector74.X;
						num634 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector74.Y;
						num635 = (float)Math.Sqrt(num633 * num633 + num634 * num634);
						num635 = num641 / num635;
						if (base.velocity.X < num633)
						{
							base.velocity.X += num642;
							if (base.velocity.X < 0f && num633 > 0f)
							{
								base.velocity.X += num642;
							}
						}
						else if (base.velocity.X > num633)
						{
							base.velocity.X -= num642;
							if (base.velocity.X > 0f && num633 < 0f)
							{
								base.velocity.X -= num642;
							}
						}
						if (base.velocity.Y < num634)
						{
							base.velocity.Y += num642;
							if (base.velocity.Y < 0f && num634 > 0f)
							{
								base.velocity.Y += num642;
							}
						}
						else if (base.velocity.Y > num634)
						{
							base.velocity.Y -= num642;
							if (base.velocity.Y > 0f && num634 < 0f)
							{
								base.velocity.Y -= num642;
							}
						}
					}
					else
					{
						base.velocity *= 0.9f;
					}
					spriteDirection = base.direction;
					if (this.ai[2] > 5f)
					{
						this.ai[0] = -1f;
						this.ai[1] = 1f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 3f)
				{
					float num643 = 4f;
					float num644 = 0.05f;
					if (Main.expertMode)
					{
						num644 = 0.075f;
						num643 = 6f;
					}
					num644 += 0.2f * num613;
					num643 += 6f * num613;
					Vector2 vector75 = new Vector2(base.position.X + (float)(width / 2) + (float)(Main.rand.Next(20) * base.direction), base.position.Y + (float)height * 0.8f);
					Vector2 vector76 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num645 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector76.X;
					float num646 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 300f - vector76.Y;
					float num647 = (float)Math.Sqrt(num645 * num645 + num646 * num646);
					this.ai[1] += 1f;
					bool flag37 = false;
					int num648 = 40;
					if (Main.expertMode)
					{
						num648 = (((double)life < (double)lifeMax * 0.1) ? 15 : ((life < lifeMax / 3) ? 25 : ((life >= lifeMax / 2) ? 35 : 30)));
					}
					num648 -= (int)(5f * num613);
					if (this.ai[1] % (float)num648 == (float)(num648 - 1) && base.position.Y + (float)height < Main.player[target].position.Y && Collision.CanHit(vector75, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						SoundEngine.PlaySound(SoundID.Item17, base.position);
						if (Main.netMode != 1)
						{
							float num649 = 8f;
							if (Main.expertMode)
							{
								num649 += 2f;
							}
							if (Main.expertMode && (double)life < (double)lifeMax * 0.1)
							{
								num649 += 3f;
							}
							num649 += 7f * num613;
							int num650 = (int)(80f - 39f * num613);
							int num651 = (int)(40f - 19f * num613);
							float num652 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector75.X + (float)Main.rand.Next(-num650, num650 + 1);
							float num653 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector75.Y + (float)Main.rand.Next(-num651, num651 + 1);
							float num654 = (float)Math.Sqrt(num652 * num652 + num653 * num653);
							num654 = num649 / num654;
							num652 *= num654;
							num653 *= num654;
							int num655 = 11;
							int num656 = 719;
							int num657 = Projectile.NewProjectile(vector75.X, vector75.Y, num652, num653, num656, num655, 0f, Main.myPlayer);
							Main.projectile[num657].timeLeft = 300;
						}
					}
					if (!Collision.CanHit(new Vector2(vector75.X, vector75.Y - 30f), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						num643 = 14f;
						num644 = 0.1f;
						if (num613 > 0f)
						{
							num644 = 0.5f;
						}
						vector76 = vector75;
						num645 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector76.X;
						num646 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector76.Y;
						num647 = (float)Math.Sqrt(num645 * num645 + num646 * num646);
						num647 = num643 / num647;
						if (base.velocity.X < num645)
						{
							base.velocity.X += num644;
							if (base.velocity.X < 0f && num645 > 0f)
							{
								base.velocity.X += num644;
							}
						}
						else if (base.velocity.X > num645)
						{
							base.velocity.X -= num644;
							if (base.velocity.X > 0f && num645 < 0f)
							{
								base.velocity.X -= num644;
							}
						}
						if (base.velocity.Y < num646)
						{
							base.velocity.Y += num644;
							if (base.velocity.Y < 0f && num646 > 0f)
							{
								base.velocity.Y += num644;
							}
						}
						else if (base.velocity.Y > num646)
						{
							base.velocity.Y -= num644;
							if (base.velocity.Y > 0f && num646 < 0f)
							{
								base.velocity.Y -= num644;
							}
						}
					}
					else if (num647 > 100f)
					{
						TargetClosest();
						spriteDirection = base.direction;
						num647 = num643 / num647;
						if (base.velocity.X < num645)
						{
							base.velocity.X += num644;
							if (base.velocity.X < 0f && num645 > 0f)
							{
								base.velocity.X += num644 * 2f;
							}
						}
						else if (base.velocity.X > num645)
						{
							base.velocity.X -= num644;
							if (base.velocity.X > 0f && num645 < 0f)
							{
								base.velocity.X -= num644 * 2f;
							}
						}
						if (base.velocity.Y < num646)
						{
							base.velocity.Y += num644;
							if (base.velocity.Y < 0f && num646 > 0f)
							{
								base.velocity.Y += num644 * 2f;
							}
						}
						else if (base.velocity.Y > num646)
						{
							base.velocity.Y -= num644;
							if (base.velocity.Y > 0f && num646 < 0f)
							{
								base.velocity.Y -= num644 * 2f;
							}
						}
					}
					float num658 = 20f;
					num658 -= 5f * num613;
					if (this.ai[1] > (float)num648 * num658)
					{
						this.ai[0] = -1f;
						this.ai[1] = 3f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 4f)
				{
					localAI[0] = 1f;
					float num659 = 14f;
					float num660 = 14f;
					Vector2 value2 = Main.player[target].Center - base.Center;
					value2.Normalize();
					value2 *= num659;
					base.velocity = (base.velocity * num660 + value2) / (num660 + 1f);
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					if (num614 < 2000f)
					{
						this.ai[0] = -1f;
						localAI[0] = 0f;
					}
				}
			}
			else if (aiStyle == 44)
			{
				noGravity = true;
				if (collideX)
				{
					if (oldVelocity.X > 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					base.velocity.X = base.direction;
				}
				if (collideY)
				{
					if (oldVelocity.Y > 0f)
					{
						directionY = -1;
					}
					else
					{
						directionY = 1;
					}
					base.velocity.Y = directionY;
				}
				if (type == 587)
				{
					base.position += netOffset;
					if (alpha == 255)
					{
						base.velocity.Y = -6f;
						netUpdate = true;
						for (int num661 = 0; num661 < 15; num661++)
						{
							Dust dust2 = Dust.NewDustDirect(base.position, width, height, 5);
							Dust dust = dust2;
							dust.velocity *= 0.5f;
							dust2.scale = 1f + Main.rand.NextFloat() * 0.5f;
							dust2.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
							dust = dust2;
							dust.velocity += base.velocity * 0.5f;
						}
					}
					alpha -= 15;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha != 0)
					{
						for (int num662 = 0; num662 < 2; num662++)
						{
							Dust dust3 = Dust.NewDustDirect(base.position, width, height, 5);
							Dust dust = dust3;
							dust.velocity *= 1f;
							dust3.scale = 1f + Main.rand.NextFloat() * 0.5f;
							dust3.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
							dust = dust3;
							dust.velocity += base.velocity * 0.3f;
						}
					}
					if (Main.rand.Next(3) == 0)
					{
						Dust dust4 = Dust.NewDustDirect(base.position, width, height, 5);
						Dust dust = dust4;
						dust.velocity *= 0f;
						dust4.alpha = 120;
						dust4.scale = 0.7f + Main.rand.NextFloat() * 0.5f;
						dust = dust4;
						dust.velocity += base.velocity * 0.3f;
					}
					base.position -= netOffset;
				}
				int num663 = target;
				int direction3 = base.direction;
				if (target == 255 || (type != 587 && Main.player[target].wet) || Main.player[target].dead || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					this.ai[0] = 90f;
					TargetClosest();
				}
				else if (this.ai[0] > 0f)
				{
					this.ai[0] -= 1f;
					TargetClosest();
				}
				if (netUpdate && num663 == target && direction3 == base.direction)
				{
					netUpdate = false;
				}
				float num664 = 0.05f;
				float num665 = 0.01f;
				float num666 = 3f;
				float num667 = 1f;
				float num668 = 30f;
				float num669 = 100f;
				float num670 = Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2)));
				float num671 = Main.player[target].position.Y - (float)(height / 2);
				if (type == 509)
				{
					num664 = 0.08f;
					num665 = 0.03f;
					num666 = 4.5f;
					num667 = 2f;
					num668 = 40f;
					num669 = 150f;
					num671 = Main.player[target].Center.Y - (float)(height / 2);
					rotation = base.velocity.X * 0.1f;
					for (int num672 = 0; num672 < 200; num672++)
					{
						if (num672 != whoAmI && Main.npc[num672].active && Main.npc[num672].type == type && Math.Abs(base.position.X - Main.npc[num672].position.X) + Math.Abs(base.position.Y - Main.npc[num672].position.Y) < (float)width)
						{
							if (base.position.X < Main.npc[num672].position.X)
							{
								base.velocity.X -= 0.05f;
							}
							else
							{
								base.velocity.X += 0.05f;
							}
							if (base.position.Y < Main.npc[num672].position.Y)
							{
								base.velocity.Y -= 0.05f;
							}
							else
							{
								base.velocity.Y += 0.05f;
							}
						}
					}
				}
				else if (type == 581)
				{
					num664 = 0.06f;
					num665 = 0.02f;
					num666 = 4f;
					num667 = 2f;
					num668 = 40f;
					num669 = 150f;
					num671 = Main.player[target].Center.Y - (float)(height / 2);
					rotation = base.velocity.X * 0.1f;
					for (int num673 = 0; num673 < 200; num673++)
					{
						if (num673 != whoAmI && Main.npc[num673].active && Main.npc[num673].type == type && Math.Abs(base.position.X - Main.npc[num673].position.X) + Math.Abs(base.position.Y - Main.npc[num673].position.Y) < (float)width)
						{
							if (base.position.X < Main.npc[num673].position.X)
							{
								base.velocity.X -= 0.05f;
							}
							else
							{
								base.velocity.X += 0.05f;
							}
							if (base.position.Y < Main.npc[num673].position.Y)
							{
								base.velocity.Y -= 0.05f;
							}
							else
							{
								base.velocity.Y += 0.05f;
							}
						}
					}
				}
				else if (type == 587)
				{
					num664 = 0.13f;
					num665 = 0.09f;
					num666 = 6.5f;
					num667 = 3.5f;
					num668 = 0f;
					num669 = 250f;
					num671 = Main.player[target].position.Y;
					if (Main.dayTime)
					{
						num671 = 0f;
						base.direction *= -1;
					}
				}
				if (this.ai[0] <= 0f)
				{
					num666 *= 0.8f;
					num664 *= 0.7f;
					num671 = base.Center.Y + (float)(directionY * 1000);
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f || base.direction == 0)
					{
						base.direction = 1;
					}
				}
				if (num670 > num668)
				{
					if (base.direction == -1 && base.velocity.X > 0f - num666)
					{
						base.velocity.X -= num664;
						if (base.velocity.X > num666)
						{
							base.velocity.X -= num664;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X -= num664 / 2f;
						}
						if (base.velocity.X < 0f - num666)
						{
							base.velocity.X = 0f - num666;
						}
					}
					else if (base.direction == 1 && base.velocity.X < num666)
					{
						base.velocity.X += num664;
						if (base.velocity.X < 0f - num666)
						{
							base.velocity.X += num664;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X += num664 / 2f;
						}
						if (base.velocity.X > num666)
						{
							base.velocity.X = num666;
						}
					}
				}
				if (num670 > num669)
				{
					num671 -= num669 / 2f;
				}
				if (base.position.Y < num671)
				{
					base.velocity.Y += num665;
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y += num665;
					}
				}
				else
				{
					base.velocity.Y -= num665;
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y -= num665;
					}
				}
				if (base.velocity.Y < 0f - num667)
				{
					base.velocity.Y = 0f - num667;
				}
				if (base.velocity.Y > num667)
				{
					base.velocity.Y = num667;
				}
				if (type != 587 && wet)
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.Y -= 0.5f;
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
			}
			else if (aiStyle == 45)
			{
				golemBoss = whoAmI;
				float num674 = GetMyBalance();
				if (Main.getGoodWorld)
				{
					num674 += 2f;
				}
				if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
				{
					num674 *= 2f;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					NewNPC((int)base.Center.X - 84, (int)base.Center.Y - 9, 247);
					NewNPC((int)base.Center.X + 78, (int)base.Center.Y - 9, 248);
					NewNPC((int)base.Center.X - 3, (int)base.Center.Y - 57, 246);
				}
				if (target >= 0 && Main.player[target].dead)
				{
					TargetClosest();
					if (Main.player[target].dead)
					{
						noTileCollide = true;
					}
				}
				if (alpha > 0)
				{
					alpha -= 10;
					if (alpha < 0)
					{
						alpha = 0;
					}
					this.ai[1] = 0f;
				}
				bool flag38 = false;
				bool flag39 = false;
				bool flag40 = false;
				dontTakeDamage = false;
				for (int num675 = 0; num675 < 200; num675++)
				{
					if (Main.npc[num675].active && Main.npc[num675].type == 246)
					{
						flag38 = true;
					}
					if (Main.npc[num675].active && Main.npc[num675].type == 247)
					{
						flag39 = true;
					}
					if (Main.npc[num675].active && Main.npc[num675].type == 248)
					{
						flag40 = true;
					}
				}
				dontTakeDamage = flag38;
				base.position += netOffset;
				if (!flag39)
				{
					int num676 = Dust.NewDust(new Vector2(base.Center.X - 80f * scale, base.Center.Y - 9f), 8, 8, 31, 0f, 0f, 100);
					Dust dust = Main.dust[num676];
					dust.alpha += Main.rand.Next(100);
					dust = Main.dust[num676];
					dust.velocity *= 0.2f;
					Main.dust[num676].velocity.Y -= 0.5f + (float)Main.rand.Next(10) * 0.1f;
					Main.dust[num676].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
					if (Main.rand.Next(10) == 0)
					{
						num676 = Dust.NewDust(new Vector2(base.Center.X - 80f * scale, base.Center.Y - 9f), 8, 8, 6);
						if (Main.rand.Next(20) != 0)
						{
							Main.dust[num676].noGravity = true;
							dust = Main.dust[num676];
							dust.scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num676].velocity.Y -= 1f;
						}
					}
				}
				if (!flag40)
				{
					int num677 = Dust.NewDust(new Vector2(base.Center.X + 62f * scale, base.Center.Y - 9f), 8, 8, 31, 0f, 0f, 100);
					Dust dust = Main.dust[num677];
					dust.alpha += Main.rand.Next(100);
					dust = Main.dust[num677];
					dust.velocity *= 0.2f;
					Main.dust[num677].velocity.Y -= 0.5f + (float)Main.rand.Next(10) * 0.1f;
					Main.dust[num677].fadeIn = 0.5f + (float)Main.rand.Next(10) * 0.1f;
					if (Main.rand.Next(10) == 0)
					{
						num677 = Dust.NewDust(new Vector2(base.Center.X + 62f * scale, base.Center.Y - 9f), 8, 8, 6);
						if (Main.rand.Next(20) != 0)
						{
							Main.dust[num677].noGravity = true;
							dust = Main.dust[num677];
							dust.scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num677].velocity.Y -= 1f;
						}
					}
				}
				base.position -= netOffset;
				if (noTileCollide && !Main.player[target].dead)
				{
					if (base.velocity.Y > 0f && base.Bottom.Y > Main.player[target].Top.Y)
					{
						noTileCollide = false;
					}
					else if (Collision.CanHit(base.position, width, height, Main.player[target].Center, 1, 1) && !Collision.SolidTiles(base.position, width, height))
					{
						noTileCollide = false;
					}
				}
				if (this.ai[0] == 0f)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity.X *= 0.8f;
						float num678 = 1f;
						if (this.ai[1] > 0f)
						{
							if (!flag39)
							{
								num678 += 2f;
							}
							if (!flag40)
							{
								num678 += 2f;
							}
							if (!flag38)
							{
								num678 += 2f;
							}
							if (life < lifeMax)
							{
								num678 += 1f;
							}
							if (life < lifeMax / 2)
							{
								num678 += 4f;
							}
							if (life < lifeMax / 3)
							{
								num678 += 8f;
							}
							num678 *= num674;
							if (Main.getGoodWorld)
							{
								num678 += 100f;
							}
						}
						this.ai[1] += num678;
						if (this.ai[1] >= 300f)
						{
							this.ai[1] = -20f;
							frameCounter = 0.0;
						}
						else if (this.ai[1] == -1f)
						{
							noTileCollide = true;
							TargetClosest();
							base.velocity.X = 4 * base.direction;
							if (life < lifeMax)
							{
								base.velocity.Y = -12.1f * (num674 + 9f) / 10f;
								if ((double)base.velocity.Y < -19.1)
								{
									base.velocity.Y = -19.1f;
								}
							}
							else
							{
								base.velocity.Y = -12.1f;
							}
							this.ai[0] = 1f;
							this.ai[1] = 0f;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					if (base.velocity.Y == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item14, base.position);
						this.ai[0] = 0f;
						for (int num679 = (int)base.position.X - 20; num679 < (int)base.position.X + width + 40; num679 += 20)
						{
							for (int num680 = 0; num680 < 4; num680++)
							{
								int num681 = Dust.NewDust(new Vector2(base.position.X - 20f, base.position.Y + (float)height), width + 20, 4, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust = Main.dust[num681];
								dust.velocity *= 0.2f;
							}
							int num682 = Gore.NewGore(new Vector2(num679 - 20, base.position.Y + (float)height - 8f), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num682];
							gore.velocity *= 0.4f;
						}
					}
					else
					{
						TargetClosest();
						if (base.position.X < Main.player[target].position.X && base.position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width)
						{
							base.velocity.X *= 0.9f;
							if (base.Bottom.Y < Main.player[target].position.Y)
							{
								base.velocity.Y += 0.2f * (num674 + 1f) / 2f;
							}
						}
						else
						{
							if (base.direction < 0)
							{
								base.velocity.X -= 0.2f;
							}
							else if (base.direction > 0)
							{
								base.velocity.X += 0.2f;
							}
							float num683 = 3f;
							if (life < lifeMax)
							{
								num683 += 1f;
							}
							if (life < lifeMax / 2)
							{
								num683 += 1f;
							}
							if (life < lifeMax / 4)
							{
								num683 += 1f;
							}
							num683 *= (num674 + 1f) / 2f;
							if (base.velocity.X < 0f - num683)
							{
								base.velocity.X = 0f - num683;
							}
							if (base.velocity.X > num683)
							{
								base.velocity.X = num683;
							}
						}
					}
				}
				if (target <= 0 || target == 255 || Main.player[target].dead)
				{
					TargetClosest();
				}
				int num684 = 3000;
				if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num684)
				{
					TargetClosest();
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num684)
					{
						active = false;
					}
				}
			}
			else if (aiStyle == 46)
			{
				float num685 = GetMyBalance();
				if (Main.getGoodWorld)
				{
					num685 += 3f;
				}
				if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
				{
					num685 *= 2f;
				}
				noTileCollide = true;
				if (golemBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					return;
				}
				float num686 = 100f;
				Vector2 vector77 = new Vector2(base.Center.X, base.Center.Y);
				float num687 = Main.npc[golemBoss].Center.X - vector77.X;
				float num688 = Main.npc[golemBoss].Center.Y - vector77.Y;
				num688 -= 57f;
				num687 -= 3f;
				if (Main.getGoodWorld)
				{
					num687 += 1f;
					num688 += 20f;
				}
				float num689 = (float)Math.Sqrt(num687 * num687 + num688 * num688);
				if (num689 < num686)
				{
					rotation = 0f;
					base.velocity.X = num687;
					base.velocity.Y = num688;
				}
				else
				{
					num689 = num686 / num689;
					base.velocity.X = num687 * num689;
					base.velocity.Y = num688 * num689;
					rotation = base.velocity.X * 0.1f;
				}
				if (alpha > 0)
				{
					alpha -= 10;
					if (alpha < 0)
					{
						alpha = 0;
					}
					this.ai[1] = 30f;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					int num690 = 300;
					if (this.ai[1] < 20f || this.ai[1] > (float)(num690 - 20))
					{
						this.ai[1] += 2f * (num685 - 1f) / 3f;
						localAI[0] = 1f;
					}
					else
					{
						this.ai[1] += 1f * (num685 - 1f) / 2f;
						localAI[0] = 0f;
					}
					if (this.ai[1] >= (float)num690)
					{
						TargetClosest();
						this.ai[1] = 0f;
						Vector2 vector78 = new Vector2(base.Center.X, base.Center.Y + 10f);
						float num691 = 8f;
						float num692 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector78.X;
						float num693 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector78.Y;
						float num694 = (float)Math.Sqrt(num692 * num692 + num693 * num693);
						num694 = num691 / num694;
						num692 *= num694;
						num693 *= num694;
						int num695 = 18;
						int num696 = 258;
						if (Main.netMode != 1)
						{
							int num697 = Projectile.NewProjectile(vector78.X, vector78.Y, num692, num693, num696, num695, 0f, Main.myPlayer);
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					TargetClosest();
					Vector2 vector79 = new Vector2(base.Center.X, base.Center.Y + 10f);
					if (Main.player[target].Center.X < base.Center.X - (float)width)
					{
						localAI[1] = -1f;
						vector79.X -= 40f;
					}
					else if (Main.player[target].Center.X > base.Center.X + (float)width)
					{
						localAI[1] = 1f;
						vector79.X += 40f;
					}
					else
					{
						localAI[1] = 0f;
					}
					float num698 = (num685 + 3f) / 4f;
					this.ai[1] += num698;
					if ((double)life < (double)lifeMax * 0.4)
					{
						this.ai[1] += num698;
					}
					if ((double)life < (double)lifeMax * 0.2)
					{
						this.ai[1] += num698;
					}
					int num699 = 300;
					if (this.ai[1] < 20f || this.ai[1] > (float)(num699 - 20))
					{
						localAI[0] = 1f;
					}
					else
					{
						localAI[0] = 0f;
					}
					if (this.ai[1] >= (float)num699)
					{
						TargetClosest();
						this.ai[1] = 0f;
						float num700 = 8f;
						float num701 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector79.X;
						float num702 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector79.Y;
						float num703 = (float)Math.Sqrt(num701 * num701 + num702 * num702);
						num703 = num700 / num703;
						num701 *= num703;
						num702 *= num703;
						int num704 = 24;
						int num705 = 258;
						if (Main.netMode != 1)
						{
							int num706 = Projectile.NewProjectile(vector79.X, vector79.Y, num701, num702, num705, num704, 0f, Main.myPlayer);
						}
					}
					this.ai[2] += num698;
					if (life < lifeMax / 3)
					{
						this.ai[2] += num698;
					}
					if (life < lifeMax / 4)
					{
						this.ai[2] += num698;
					}
					if (life < lifeMax / 5)
					{
						this.ai[2] += num698;
					}
					if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[2] += 4f;
					}
					if (this.ai[2] > (float)(60 + Main.rand.Next(600)))
					{
						this.ai[2] = 0f;
						int num707 = 28;
						int num708 = 259;
						if (localAI[1] == 0f)
						{
							for (int num709 = 0; num709 < 2; num709++)
							{
								vector79 = new Vector2(base.Center.X, base.Center.Y - 22f);
								if (num709 == 0)
								{
									vector79.X -= 18f;
								}
								else
								{
									vector79.X += 18f;
								}
								float num710 = 11f;
								float num711 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector79.X;
								float num712 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector79.Y;
								float num713 = (float)Math.Sqrt(num711 * num711 + num712 * num712);
								num713 = num710 / num713;
								num711 *= num713;
								num712 *= num713;
								vector79.X += num711 * 3f;
								vector79.Y += num712 * 3f;
								if (Main.netMode != 1)
								{
									int num714 = Projectile.NewProjectile(vector79.X, vector79.Y, num711, num712, num708, num707, 0f, Main.myPlayer);
									Main.projectile[num714].timeLeft = 300;
								}
							}
						}
						else if (localAI[1] != 0f)
						{
							vector79 = new Vector2(base.Center.X, base.Center.Y - 22f);
							if (localAI[1] == -1f)
							{
								vector79.X -= 30f;
							}
							else if (localAI[1] == 1f)
							{
								vector79.X += 30f;
							}
							float num715 = 12f;
							float num716 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector79.X;
							float num717 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector79.Y;
							float num718 = (float)Math.Sqrt(num716 * num716 + num717 * num717);
							num718 = num715 / num718;
							num716 *= num718;
							num717 *= num718;
							vector79.X += num716 * 3f;
							vector79.Y += num717 * 3f;
							if (Main.netMode != 1)
							{
								int num719 = Projectile.NewProjectile(vector79.X, vector79.Y, num716, num717, num708, num707, 0f, Main.myPlayer);
								Main.projectile[num719].timeLeft = 300;
							}
						}
					}
				}
				if (life < lifeMax / 2)
				{
					this.ai[0] = 1f;
				}
				else
				{
					this.ai[0] = 0f;
				}
			}
			else if (aiStyle == 47)
			{
				float num720 = GetMyBalance();
				if (Main.getGoodWorld)
				{
					num720 += 3f;
				}
				if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
				{
					num720 *= 2f;
				}
				if (golemBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					return;
				}
				if (alpha > 0)
				{
					alpha -= 10;
					if (alpha < 0)
					{
						alpha = 0;
					}
					this.ai[1] = 0f;
				}
				if (this.ai[0] == 0f)
				{
					noTileCollide = true;
					float num721 = 14f;
					if (life < lifeMax / 2)
					{
						num721 += 3f;
					}
					if (life < lifeMax / 4)
					{
						num721 += 3f;
					}
					if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
					{
						num721 += 8f;
					}
					num721 *= (num720 + 3f) / 4f;
					if (num721 > 32f)
					{
						num721 = 32f;
					}
					Vector2 vector80 = new Vector2(base.Center.X, base.Center.Y);
					float num722 = Main.npc[golemBoss].Center.X - vector80.X;
					float num723 = Main.npc[golemBoss].Center.Y - vector80.Y;
					num723 -= 9f;
					num722 = ((type != 247) ? (num722 + 78f) : (num722 - 84f));
					if (Main.getGoodWorld)
					{
						num722 = ((type != 247) ? (num722 - 40f) : (num722 + 40f));
					}
					float num724 = (float)Math.Sqrt(num722 * num722 + num723 * num723);
					if (num724 < 12f + num721)
					{
						rotation = 0f;
						base.velocity.X = num722;
						base.velocity.Y = num723;
						float num725 = num720;
						this.ai[1] += num725;
						if (life < lifeMax / 2)
						{
							this.ai[1] += num725;
						}
						if (life < lifeMax / 4)
						{
							this.ai[1] += num725;
						}
						if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
						{
							this.ai[1] += 10f * num725;
						}
						if (this.ai[1] >= 60f)
						{
							TargetClosest();
							if ((type == 247 && base.Center.X + 100f > Main.player[target].Center.X) || (type == 248 && base.Center.X - 100f < Main.player[target].Center.X))
							{
								this.ai[1] = 0f;
								this.ai[0] = 1f;
							}
							else
							{
								this.ai[1] = 0f;
							}
						}
					}
					else
					{
						num724 = num721 / num724;
						base.velocity.X = num722 * num724;
						base.velocity.Y = num723 * num724;
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
						if (type == 247)
						{
							rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					noTileCollide = true;
					collideX = false;
					collideY = false;
					float num726 = 12f;
					if (life < lifeMax / 2)
					{
						num726 += 4f;
					}
					if (life < lifeMax / 4)
					{
						num726 += 4f;
					}
					if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
					{
						num726 += 10f;
					}
					num726 *= (num720 + 3f) / 4f;
					if (num726 > 48f)
					{
						num726 = 48f;
					}
					Vector2 vector81 = new Vector2(base.Center.X, base.Center.Y);
					float num727 = Main.player[target].Center.X - vector81.X;
					float num728 = Main.player[target].Center.Y - vector81.Y;
					float num729 = (float)Math.Sqrt(num727 * num727 + num728 * num728);
					num729 = num726 / num729;
					base.velocity.X = num727 * num729;
					base.velocity.Y = num728 * num729;
					this.ai[0] = 2f;
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					if (type == 247)
					{
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
					}
				}
				else if (this.ai[0] == 2f)
				{
					if (Math.Abs(base.velocity.X) > Math.Abs(base.velocity.Y))
					{
						if (base.velocity.X > 0f && base.Center.X > Main.player[target].Center.X)
						{
							noTileCollide = false;
						}
						if (base.velocity.X < 0f && base.Center.X < Main.player[target].Center.X)
						{
							noTileCollide = false;
						}
					}
					else
					{
						if (base.velocity.Y > 0f && base.Center.Y > Main.player[target].Center.Y)
						{
							noTileCollide = false;
						}
						if (base.velocity.Y < 0f && base.Center.Y < Main.player[target].Center.Y)
						{
							noTileCollide = false;
						}
					}
					Vector2 vector82 = new Vector2(base.Center.X, base.Center.Y);
					float num730 = Main.npc[golemBoss].Center.X - vector82.X;
					float num731 = Main.npc[golemBoss].Center.Y - vector82.Y;
					num730 += Main.npc[golemBoss].velocity.X;
					num731 += Main.npc[golemBoss].velocity.Y;
					num731 -= 9f;
					num730 = ((type != 247) ? (num730 + 78f) : (num730 - 84f));
					float num732 = (float)Math.Sqrt(num730 * num730 + num731 * num731);
					if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax)
					{
						knockBackResist = 0f;
						if (num732 > 700f || collideX || collideY)
						{
							noTileCollide = true;
							this.ai[0] = 0f;
						}
						return;
					}
					bool flag41 = justHit;
					if (flag41)
					{
						for (int num733 = 0; num733 < 200; num733++)
						{
							if (!Main.npc[num733].active || Main.npc[num733].type != 246)
							{
								continue;
							}
							if (Main.npc[num733].life < Main.npc[num733].lifeMax / 2)
							{
								if (knockBackResist == 0f)
								{
									flag41 = false;
								}
								knockBackResist = 0f;
							}
							break;
						}
					}
					if (num732 > 600f || collideX || collideY || flag41)
					{
						noTileCollide = true;
						this.ai[0] = 0f;
					}
				}
				else
				{
					if (this.ai[0] != 3f)
					{
						return;
					}
					noTileCollide = true;
					float num734 = 12f;
					float num735 = 0.4f;
					Vector2 vector83 = new Vector2(base.Center.X, base.Center.Y);
					float num736 = Main.player[target].Center.X - vector83.X;
					float num737 = Main.player[target].Center.Y - vector83.Y;
					float num738 = (float)Math.Sqrt(num736 * num736 + num737 * num737);
					num738 = num734 / num738;
					num736 *= num738;
					num737 *= num738;
					if (base.velocity.X < num736)
					{
						base.velocity.X += num735;
						if (base.velocity.X < 0f && num736 > 0f)
						{
							base.velocity.X += num735 * 2f;
						}
					}
					else if (base.velocity.X > num736)
					{
						base.velocity.X -= num735;
						if (base.velocity.X > 0f && num736 < 0f)
						{
							base.velocity.X -= num735 * 2f;
						}
					}
					if (base.velocity.Y < num737)
					{
						base.velocity.Y += num735;
						if (base.velocity.Y < 0f && num737 > 0f)
						{
							base.velocity.Y += num735 * 2f;
						}
					}
					else if (base.velocity.Y > num737)
					{
						base.velocity.Y -= num735;
						if (base.velocity.Y > 0f && num737 < 0f)
						{
							base.velocity.Y -= num735 * 2f;
						}
					}
					rotation = (float)Math.Atan2(base.velocity.Y, base.velocity.X);
					if (type == 247)
					{
						rotation = (float)Math.Atan2(0f - base.velocity.Y, 0f - base.velocity.X);
					}
				}
			}
			else if (aiStyle == 48)
			{
				bool flag42 = false;
				float num739 = GetMyBalance();
				if (Main.getGoodWorld)
				{
					num739 += 3f;
				}
				if ((!Main.player[target].ZoneLihzhardTemple && !Main.player[target].ZoneJungle) || (double)Main.player[target].Center.Y < Main.worldSurface * 16.0)
				{
					num739 *= 2f;
				}
				if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					noTileCollide = true;
					flag42 = true;
				}
				else if (noTileCollide && Collision.SolidTiles(base.position, width, height))
				{
					noTileCollide = false;
				}
				if (golemBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					return;
				}
				TargetClosest();
				float num740 = 7f;
				float num741 = 0.05f;
				Vector2 vector84 = new Vector2(base.Center.X, base.Center.Y);
				float num742 = Main.player[target].Center.X - vector84.X;
				float num743 = Main.player[target].Center.Y - vector84.Y - 300f;
				float num744 = (float)Math.Sqrt(num742 * num742 + num743 * num743);
				num744 = num740 / num744;
				num742 *= num744;
				num743 *= num744;
				if (base.velocity.X < num742)
				{
					base.velocity.X += num741;
					if (base.velocity.X < 0f && num742 > 0f)
					{
						base.velocity.X += num741;
					}
				}
				else if (base.velocity.X > num742)
				{
					base.velocity.X -= num741;
					if (base.velocity.X > 0f && num742 < 0f)
					{
						base.velocity.X -= num741;
					}
				}
				if (base.velocity.Y < num743)
				{
					base.velocity.Y += num741;
					if (base.velocity.Y < 0f && num743 > 0f)
					{
						base.velocity.Y += num741;
					}
				}
				else if (base.velocity.Y > num743)
				{
					base.velocity.Y -= num741;
					if (base.velocity.Y > 0f && num743 < 0f)
					{
						base.velocity.Y -= num741;
					}
				}
				float num745 = (num739 + 4f) / 5f;
				this.ai[1] += num745;
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.8)
				{
					this.ai[1] += num745;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.6)
				{
					this.ai[1] += num745;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.2)
				{
					this.ai[1] += num745;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.1)
				{
					this.ai[1] += num745;
				}
				int num746 = 300;
				if (this.ai[1] < 20f || this.ai[1] > (float)(num746 - 20))
				{
					localAI[0] = 1f;
				}
				else
				{
					localAI[0] = 0f;
				}
				if (flag42)
				{
					this.ai[1] = 20f;
				}
				if (this.ai[1] >= (float)num746)
				{
					TargetClosest();
					this.ai[1] = 0f;
					Vector2 vector85 = new Vector2(base.Center.X, base.Center.Y - 10f);
					float num747 = 8f;
					int num748 = 20;
					int num749 = 258;
					float num750 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector85.X;
					float num751 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector85.Y;
					float num752 = (float)Math.Sqrt(num750 * num750 + num751 * num751);
					num752 = num747 / num752;
					num750 *= num752;
					num751 *= num752;
					if (Main.netMode != 1)
					{
						int num753 = Projectile.NewProjectile(vector85.X, vector85.Y, num750, num751, num749, num748, 0f, Main.myPlayer);
					}
				}
				float num754 = num739;
				this.ai[2] += num754;
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax / 1.25)
				{
					this.ai[2] += num754;
				}
				if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax / 1.5)
				{
					this.ai[2] += num754;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 2)
				{
					this.ai[2] += num754;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 3)
				{
					this.ai[2] += num754;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 4)
				{
					this.ai[2] += num754;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 5)
				{
					this.ai[2] += num754;
				}
				if (Main.npc[golemBoss].life < Main.npc[golemBoss].lifeMax / 6)
				{
					this.ai[2] += num754;
				}
				bool flag43 = false;
				if (!Collision.CanHit(Main.npc[golemBoss].Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					flag43 = true;
				}
				if (flag43)
				{
					this.ai[2] += num754 * 10f;
				}
				if (this.ai[2] > (float)(100 + Main.rand.Next(4800)))
				{
					this.ai[2] = 0f;
					for (int num755 = 0; num755 < 2; num755++)
					{
						Vector2 vector86 = new Vector2(base.Center.X, base.Center.Y - 50f);
						if (Main.getGoodWorld)
						{
							vector86.Y += 30f;
						}
						switch (num755)
						{
						case 0:
							vector86.X -= 14f;
							break;
						case 1:
							vector86.X += 14f;
							break;
						}
						float num756 = 11f;
						int num757 = 24;
						int num758 = 259;
						if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.5)
						{
							num757++;
							num756 += 0.25f;
						}
						if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.4)
						{
							num757++;
							num756 += 0.25f;
						}
						if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.3)
						{
							num757++;
							num756 += 0.25f;
						}
						if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.2)
						{
							num757++;
							num756 += 0.25f;
						}
						if ((double)Main.npc[golemBoss].life < (double)Main.npc[golemBoss].lifeMax * 0.1)
						{
							num757++;
							num756 += 0.25f;
						}
						float num759 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f;
						float num760 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f;
						if (flag43)
						{
							num757 = (int)((double)num757 * 1.5);
							num756 *= 2.5f;
							num759 += Main.player[target].velocity.X * Main.rand.NextFloat() * 50f;
							num760 += Main.player[target].velocity.Y * Main.rand.NextFloat() * 50f;
						}
						num759 -= vector86.X;
						num760 -= vector86.Y;
						float num761 = (float)Math.Sqrt(num759 * num759 + num760 * num760);
						num761 = num756 / num761;
						num759 *= num761;
						num760 *= num761;
						vector86.X += num759 * 3f;
						vector86.Y += num760 * 3f;
						if (Main.netMode != 1)
						{
							int num762 = Projectile.NewProjectile(vector86.X, vector86.Y, num759, num760, num758, num757, 0f, Main.myPlayer);
							Main.projectile[num762].timeLeft = 300;
						}
					}
				}
				base.position += netOffset;
				int num763 = Main.rand.Next(2) * 2 - 1;
				Vector2 position4 = base.Bottom + new Vector2(num763 * 22, -22f);
				Dust dust5 = Dust.NewDustPerfect(position4, 228, ((float)Math.PI / 2f + -(float)Math.PI / 2f * (float)num763 + Main.rand.NextFloatDirection() * ((float)Math.PI / 4f)).ToRotationVector2() * (2f + Main.rand.NextFloat()));
				Dust dust = dust5;
				dust.velocity += base.velocity;
				dust5.noGravity = true;
				dust5 = Dust.NewDustPerfect(base.Bottom + new Vector2(Main.rand.NextFloatDirection() * 6f, Main.rand.NextFloat() * -4f - 8f), 228, Vector2.UnitY * (2f + Main.rand.NextFloat()));
				dust5.fadeIn = 0f;
				dust5.scale = 0.7f + Main.rand.NextFloat() * 0.5f;
				dust5.noGravity = true;
				dust = dust5;
				dust.velocity += base.velocity;
				base.position -= netOffset;
			}
			else if (aiStyle == 49)
			{
				noGravity = true;
				TargetClosest();
				float num764 = 4f;
				float num765 = 0.25f;
				Vector2 vector87 = new Vector2(base.Center.X, base.Center.Y);
				float num766 = Main.player[target].Center.X - vector87.X;
				float num767 = Main.player[target].Center.Y - vector87.Y - 200f;
				float num768 = (float)Math.Sqrt(num766 * num766 + num767 * num767);
				if (num768 < 20f)
				{
					num766 = base.velocity.X;
					num767 = base.velocity.Y;
				}
				else
				{
					num768 = num764 / num768;
					num766 *= num768;
					num767 *= num768;
				}
				if (base.velocity.X < num766)
				{
					base.velocity.X += num765;
					if (base.velocity.X < 0f && num766 > 0f)
					{
						base.velocity.X += num765 * 2f;
					}
				}
				else if (base.velocity.X > num766)
				{
					base.velocity.X -= num765;
					if (base.velocity.X > 0f && num766 < 0f)
					{
						base.velocity.X -= num765 * 2f;
					}
				}
				if (base.velocity.Y < num767)
				{
					base.velocity.Y += num765;
					if (base.velocity.Y < 0f && num767 > 0f)
					{
						base.velocity.Y += num765 * 2f;
					}
				}
				else if (base.velocity.Y > num767)
				{
					base.velocity.Y -= num765;
					if (base.velocity.Y > 0f && num767 < 0f)
					{
						base.velocity.Y -= num765 * 2f;
					}
				}
				if (base.position.X + (float)width > Main.player[target].position.X && base.position.X < Main.player[target].position.X + (float)Main.player[target].width && base.position.Y + (float)height < Main.player[target].position.Y && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && Main.netMode != 1)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 8f)
					{
						this.ai[0] = 0f;
						int num769 = (int)(base.position.X + 10f + (float)Main.rand.Next(width - 20));
						int num770 = (int)(base.position.Y + (float)height + 4f);
						Projectile.NewProjectile(num769, num770, 0f, 5f, 264, 20, 0f, Main.myPlayer);
					}
				}
			}
			else if (aiStyle == 50)
			{
				EncourageDespawn(5);
				noTileCollide = true;
				base.velocity.Y += 0.02f;
				TargetClosest();
				if (base.velocity.Y < 0f && Main.player[target].position.Y > base.position.Y + 100f)
				{
					base.velocity.Y *= 0.95f;
				}
				if (base.velocity.Y > 1f)
				{
					base.velocity.Y = 1f;
				}
				if (base.position.X + (float)width < Main.player[target].position.X)
				{
					if (base.velocity.X < 0f)
					{
						base.velocity.X *= 0.98f;
					}
					if (Main.expertMode && base.velocity.X < 0f)
					{
						base.velocity.X *= 0.98f;
					}
					base.velocity.X += 0.1f;
					if (Main.expertMode)
					{
						base.velocity.X += 0.1f;
					}
				}
				else if (base.position.X > Main.player[target].position.X + (float)Main.player[target].width)
				{
					if (base.velocity.X > 0f)
					{
						base.velocity.X *= 0.98f;
					}
					if (Main.expertMode && base.velocity.X > 0f)
					{
						base.velocity.X *= 0.98f;
					}
					base.velocity.X -= 0.1f;
					if (Main.expertMode)
					{
						base.velocity.X -= 0.1f;
					}
				}
				if (base.velocity.X > 5f || base.velocity.X < -5f)
				{
					base.velocity.X *= 0.97f;
				}
				rotation = base.velocity.X * 0.2f;
			}
			else if (aiStyle == 51)
			{
				bool flag44 = false;
				bool flag45 = false;
				TargetClosest();
				if (Main.player[target].dead)
				{
					flag45 = true;
					flag44 = true;
				}
				if (Main.netMode != 1)
				{
					int num771 = 6000;
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num771)
					{
						active = false;
						life = 0;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(23, -1, -1, null, whoAmI);
						}
					}
				}
				plantBoss = whoAmI;
				if (localAI[0] == 0f && Main.netMode != 1)
				{
					localAI[0] = 1f;
					int num772 = NewNPC((int)base.Center.X, (int)base.Center.Y, 263, whoAmI);
					num772 = NewNPC((int)base.Center.X, (int)base.Center.Y, 263, whoAmI);
					num772 = NewNPC((int)base.Center.X, (int)base.Center.Y, 263, whoAmI);
				}
				int[] array2 = new int[3];
				float num773 = 0f;
				float num774 = 0f;
				int num775 = 0;
				for (int num776 = 0; num776 < 200; num776++)
				{
					if (Main.npc[num776].active && Main.npc[num776].aiStyle == 52)
					{
						num773 += Main.npc[num776].Center.X;
						num774 += Main.npc[num776].Center.Y;
						array2[num775] = num776;
						num775++;
						if (num775 > 2)
						{
							break;
						}
					}
				}
				num773 /= (float)num775;
				num774 /= (float)num775;
				float num777 = 2.5f;
				float num778 = 0.025f;
				if (life < lifeMax / 2)
				{
					num777 = 5f;
					num778 = 0.05f;
				}
				if (life < lifeMax / 4)
				{
					num777 = 7f;
				}
				if (!Main.player[target].ZoneJungle || (double)Main.player[target].position.Y < Main.worldSurface * 16.0 || Main.player[target].position.Y > (float)(Main.UnderworldLayer * 16))
				{
					flag44 = true;
					num777 += 8f;
					num778 = 0.15f;
				}
				if (Main.expertMode)
				{
					num777 += 1f;
					num777 *= 1.1f;
					num778 += 0.01f;
					num778 *= 1.1f;
				}
				if (Main.getGoodWorld)
				{
					num777 *= 1.15f;
					num778 *= 1.15f;
				}
				Vector2 vector88 = new Vector2(num773, num774);
				float num779 = Main.player[target].Center.X - vector88.X;
				float num780 = Main.player[target].Center.Y - vector88.Y;
				if (flag45)
				{
					num780 *= -1f;
					num779 *= -1f;
					num777 += 8f;
				}
				float num781 = (float)Math.Sqrt(num779 * num779 + num780 * num780);
				int num782 = 500;
				if (flag44)
				{
					num782 += 350;
				}
				if (Main.expertMode)
				{
					num782 += 150;
				}
				if (num781 >= (float)num782)
				{
					num781 = (float)num782 / num781;
					num779 *= num781;
					num780 *= num781;
				}
				num773 += num779;
				num774 += num780;
				vector88 = new Vector2(base.Center.X, base.Center.Y);
				num779 = num773 - vector88.X;
				num780 = num774 - vector88.Y;
				num781 = (float)Math.Sqrt(num779 * num779 + num780 * num780);
				if (num781 < num777)
				{
					num779 = base.velocity.X;
					num780 = base.velocity.Y;
				}
				else
				{
					num781 = num777 / num781;
					num779 *= num781;
					num780 *= num781;
				}
				if (base.velocity.X < num779)
				{
					base.velocity.X += num778;
					if (base.velocity.X < 0f && num779 > 0f)
					{
						base.velocity.X += num778 * 2f;
					}
				}
				else if (base.velocity.X > num779)
				{
					base.velocity.X -= num778;
					if (base.velocity.X > 0f && num779 < 0f)
					{
						base.velocity.X -= num778 * 2f;
					}
				}
				if (base.velocity.Y < num780)
				{
					base.velocity.Y += num778;
					if (base.velocity.Y < 0f && num780 > 0f)
					{
						base.velocity.Y += num778 * 2f;
					}
				}
				else if (base.velocity.Y > num780)
				{
					base.velocity.Y -= num778;
					if (base.velocity.Y > 0f && num780 < 0f)
					{
						base.velocity.Y -= num778 * 2f;
					}
				}
				Vector2 vector89 = new Vector2(base.Center.X, base.Center.Y);
				float num783 = Main.player[target].Center.X - vector89.X;
				float num784 = Main.player[target].Center.Y - vector89.Y;
				rotation = (float)Math.Atan2(num784, num783) + 1.57f;
				if (life > lifeMax / 2)
				{
					defense = 36;
					int num785 = 50;
					if (flag44)
					{
						defense *= 2;
						num785 *= 2;
					}
					damage = GetAttackDamage_ScaledByStrength(num785);
					if (Main.netMode == 1)
					{
						return;
					}
					localAI[1] += 1f;
					if ((double)life < (double)lifeMax * 0.9)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.8)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.7)
					{
						localAI[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.6)
					{
						localAI[1] += 1f;
					}
					if (flag44)
					{
						localAI[1] += 3f;
					}
					if (Main.expertMode)
					{
						localAI[1] += 1f;
					}
					if (Main.expertMode && justHit && Main.rand.Next(2) == 0)
					{
						localAI[3] = 1f;
					}
					if (Main.getGoodWorld)
					{
						localAI[1] += 1f;
					}
					if (!(localAI[1] > 80f))
					{
						return;
					}
					localAI[1] = 0f;
					bool flag46 = Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					if (localAI[3] > 0f)
					{
						flag46 = true;
						localAI[3] = 0f;
					}
					if (flag46)
					{
						Vector2 vector90 = new Vector2(base.Center.X, base.Center.Y);
						float num786 = 15f;
						if (Main.expertMode)
						{
							num786 = 17f;
						}
						float num787 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector90.X;
						float num788 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector90.Y;
						float num789 = (float)Math.Sqrt(num787 * num787 + num788 * num788);
						num789 = num786 / num789;
						num787 *= num789;
						num788 *= num789;
						int num790 = 22;
						int num791 = 275;
						int maxValue2 = 4;
						int maxValue3 = 8;
						if (Main.expertMode)
						{
							maxValue2 = 2;
							maxValue3 = 6;
						}
						if ((double)life < (double)lifeMax * 0.8 && Main.rand.Next(maxValue2) == 0)
						{
							num790 = 27;
							localAI[1] = -30f;
							num791 = 276;
						}
						else if ((double)life < (double)lifeMax * 0.8 && Main.rand.Next(maxValue3) == 0)
						{
							num790 = 31;
							localAI[1] = -120f;
							num791 = 277;
						}
						if (flag44)
						{
							num790 *= 2;
						}
						num790 = GetAttackDamage_ForProjectiles(num790, (float)num790 * 0.9f);
						vector90.X += num787 * 3f;
						vector90.Y += num788 * 3f;
						int num792 = Projectile.NewProjectile(vector90.X, vector90.Y, num787, num788, num791, num790, 0f, Main.myPlayer);
						if (num791 != 277)
						{
							Main.projectile[num792].timeLeft = 300;
						}
					}
					return;
				}
				defense = 10;
				int num793 = 70;
				if (flag44)
				{
					defense *= 4;
					num793 *= 2;
				}
				damage = GetAttackDamage_ScaledByStrength(num793);
				if (Main.netMode != 1)
				{
					if (localAI[0] == 1f)
					{
						localAI[0] = 2f;
						int num794 = 8;
						if (Main.getGoodWorld)
						{
							num794 += 6;
						}
						for (int num795 = 0; num795 < num794; num795++)
						{
							int num796 = NewNPC((int)base.Center.X, (int)base.Center.Y, 264, whoAmI);
						}
						if (Main.expertMode)
						{
							for (int num797 = 0; num797 < 200; num797++)
							{
								if (Main.npc[num797].active && Main.npc[num797].aiStyle == 52)
								{
									for (int num798 = 0; num798 < num794 / 2 - 1; num798++)
									{
										int num799 = NewNPC((int)base.Center.X, (int)base.Center.Y, 264, whoAmI);
										Main.npc[num799].ai[3] = num797 + 1;
									}
								}
							}
						}
					}
					else if (Main.expertMode && Main.rand.Next(60) == 0)
					{
						int num800 = 0;
						for (int num801 = 0; num801 < 200; num801++)
						{
							if (Main.npc[num801].active && Main.npc[num801].type == 264 && Main.npc[num801].ai[3] == 0f)
							{
								num800++;
							}
						}
						if (num800 < 8 && Main.rand.Next((num800 + 1) * 10) <= 1)
						{
							int num802 = NewNPC((int)base.Center.X, (int)base.Center.Y, 264, whoAmI);
						}
					}
				}
				if (localAI[2] == 0f)
				{
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 378, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 379, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 380, scale);
					localAI[2] = 1f;
				}
				localAI[1] += 1f;
				if ((double)life < (double)lifeMax * 0.4)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.3)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.2)
				{
					localAI[1] += 1f;
				}
				if ((double)life < (double)lifeMax * 0.1)
				{
					localAI[1] += 1f;
				}
				if (localAI[1] >= 350f)
				{
					float num803 = 8f;
					Vector2 vector91 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num804 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector91.X + (float)Main.rand.Next(-10, 11);
					float num805 = Math.Abs(num804 * 0.2f);
					float num806 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector91.Y + (float)Main.rand.Next(-10, 11);
					if (num806 > 0f)
					{
						num805 = 0f;
					}
					num806 -= num805;
					float num807 = (float)Math.Sqrt(num804 * num804 + num806 * num806);
					num807 = num803 / num807;
					num804 *= num807;
					num806 *= num807;
					int num808 = NewNPC((int)base.Center.X, (int)base.Center.Y, 265);
					Main.npc[num808].velocity.X = num804;
					Main.npc[num808].velocity.Y = num806;
					Main.npc[num808].netUpdate = true;
					localAI[1] = 0f;
				}
			}
			else if (aiStyle == 52)
			{
				bool flag47 = false;
				bool flag48 = false;
				if (plantBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					netUpdate = true;
					return;
				}
				if (Main.player[Main.npc[plantBoss].target].dead)
				{
					flag48 = true;
				}
				if ((plantBoss != -1 && !Main.player[Main.npc[plantBoss].target].ZoneJungle) || (double)Main.player[Main.npc[plantBoss].target].position.Y < Main.worldSurface * 16.0 || Main.player[Main.npc[plantBoss].target].position.Y > (float)(Main.UnderworldLayer * 16) || flag48)
				{
					localAI[0] -= 4f;
					flag47 = true;
				}
				if (Main.netMode == 1)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = (int)(base.Center.X / 16f);
					}
					if (this.ai[1] == 0f)
					{
						this.ai[1] = (int)(base.Center.X / 16f);
					}
				}
				if (Main.netMode != 1)
				{
					if (this.ai[0] == 0f || this.ai[1] == 0f)
					{
						localAI[0] = 0f;
					}
					localAI[0] -= 1f;
					if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
					{
						localAI[0] -= 2f;
					}
					if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 4)
					{
						localAI[0] -= 2f;
					}
					if (flag47)
					{
						localAI[0] -= 6f;
					}
					if (!flag48 && localAI[0] <= 0f && this.ai[0] != 0f)
					{
						for (int num809 = 0; num809 < 200; num809++)
						{
							if (num809 != whoAmI && Main.npc[num809].active && Main.npc[num809].type == type && (Main.npc[num809].velocity.X != 0f || Main.npc[num809].velocity.Y != 0f))
							{
								localAI[0] = Main.rand.Next(60, 300);
							}
						}
					}
					if (localAI[0] <= 0f)
					{
						localAI[0] = Main.rand.Next(300, 600);
						bool flag49 = false;
						int num810 = 0;
						while (!flag49 && num810 <= 1000)
						{
							num810++;
							int num811 = (int)(Main.player[Main.npc[plantBoss].target].Center.X / 16f);
							int num812 = (int)(Main.player[Main.npc[plantBoss].target].Center.Y / 16f);
							if (this.ai[0] == 0f)
							{
								num811 = (int)((Main.player[Main.npc[plantBoss].target].Center.X + Main.npc[plantBoss].Center.X) / 32f);
								num812 = (int)((Main.player[Main.npc[plantBoss].target].Center.Y + Main.npc[plantBoss].Center.Y) / 32f);
							}
							if (flag48)
							{
								num811 = (int)Main.npc[plantBoss].position.X / 16;
								num812 = (int)(Main.npc[plantBoss].position.Y + 400f) / 16;
							}
							int num813 = 20;
							num813 += (int)(100f * ((float)num810 / 1000f));
							int num814 = num811 + Main.rand.Next(-num813, num813 + 1);
							int num815 = num812 + Main.rand.Next(-num813, num813 + 1);
							if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2 && Main.rand.Next(6) == 0)
							{
								TargetClosest();
								int num816 = (int)(Main.player[target].Center.X / 16f);
								int num817 = (int)(Main.player[target].Center.Y / 16f);
								if (Main.tile[num816, num817].wall > 0)
								{
									num814 = num816;
									num815 = num817;
								}
							}
							try
							{
								if (WorldGen.InWorld(num814, num815) && (WorldGen.SolidTile(num814, num815) || (Main.tile[num814, num815].wall > 0 && (num810 > 500 || Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2))))
								{
									flag49 = true;
									this.ai[0] = num814;
									this.ai[1] = num815;
									netUpdate = true;
								}
							}
							catch
							{
							}
						}
					}
				}
				if (this.ai[0] > 0f && this.ai[1] > 0f)
				{
					float num818 = 6f;
					if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
					{
						num818 = 8f;
					}
					if (Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 4)
					{
						num818 = 10f;
					}
					if (Main.expertMode)
					{
						num818 += 1f;
					}
					if (Main.expertMode && Main.npc[plantBoss].life < Main.npc[plantBoss].lifeMax / 2)
					{
						num818 += 1f;
					}
					if (flag47)
					{
						num818 *= 2f;
					}
					if (flag48)
					{
						num818 *= 2f;
					}
					Vector2 vector92 = new Vector2(base.Center.X, base.Center.Y);
					float num819 = this.ai[0] * 16f - 8f - vector92.X;
					float num820 = this.ai[1] * 16f - 8f - vector92.Y;
					float num821 = (float)Math.Sqrt(num819 * num819 + num820 * num820);
					if (num821 < 12f + num818)
					{
						base.velocity.X = num819;
						base.velocity.Y = num820;
					}
					else
					{
						num821 = num818 / num821;
						base.velocity.X = num819 * num821;
						base.velocity.Y = num820 * num821;
					}
					Vector2 vector93 = new Vector2(base.Center.X, base.Center.Y);
					float num822 = Main.npc[plantBoss].Center.X - vector93.X;
					float num823 = Main.npc[plantBoss].Center.Y - vector93.Y;
					rotation = (float)Math.Atan2(num823, num822) - 1.57f;
				}
			}
			else if (aiStyle == 53)
			{
				if (plantBoss < 0)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					netUpdate = true;
					return;
				}
				int num824 = plantBoss;
				if (this.ai[3] > 0f)
				{
					num824 = (int)this.ai[3] - 1;
				}
				if (Main.netMode != 1)
				{
					localAI[0] -= 1f;
					if (localAI[0] <= 0f)
					{
						localAI[0] = Main.rand.Next(120, 480);
						this.ai[0] = Main.rand.Next(-100, 101);
						this.ai[1] = Main.rand.Next(-100, 101);
						netUpdate = true;
					}
				}
				TargetClosest();
				float num825 = 0.2f;
				float num826 = 200f;
				if ((double)Main.npc[plantBoss].life < (double)Main.npc[plantBoss].lifeMax * 0.25)
				{
					num826 += 100f;
				}
				if ((double)Main.npc[plantBoss].life < (double)Main.npc[plantBoss].lifeMax * 0.1)
				{
					num826 += 100f;
				}
				if (Main.expertMode)
				{
					float num827 = 1f - (float)life / (float)lifeMax;
					num826 += num827 * 300f;
					num825 += 0.3f;
				}
				if (Main.getGoodWorld)
				{
					num825 += 4f;
				}
				if (!Main.npc[num824].active || plantBoss < 0)
				{
					active = false;
					return;
				}
				float num828 = Main.npc[num824].position.X + (float)(Main.npc[num824].width / 2);
				float num829 = Main.npc[num824].position.Y + (float)(Main.npc[num824].height / 2);
				Vector2 vector94 = new Vector2(num828, num829);
				float num830 = num828 + this.ai[0];
				float num831 = num829 + this.ai[1];
				float num832 = num830 - vector94.X;
				float num833 = num831 - vector94.Y;
				float num834 = (float)Math.Sqrt(num832 * num832 + num833 * num833);
				num834 = num826 / num834;
				num832 *= num834;
				num833 *= num834;
				if (base.position.X < num828 + num832)
				{
					base.velocity.X += num825;
					if (base.velocity.X < 0f && num832 > 0f)
					{
						base.velocity.X *= 0.9f;
					}
				}
				else if (base.position.X > num828 + num832)
				{
					base.velocity.X -= num825;
					if (base.velocity.X > 0f && num832 < 0f)
					{
						base.velocity.X *= 0.9f;
					}
				}
				if (base.position.Y < num829 + num833)
				{
					base.velocity.Y += num825;
					if (base.velocity.Y < 0f && num833 > 0f)
					{
						base.velocity.Y *= 0.9f;
					}
				}
				else if (base.position.Y > num829 + num833)
				{
					base.velocity.Y -= num825;
					if (base.velocity.Y > 0f && num833 < 0f)
					{
						base.velocity.Y *= 0.9f;
					}
				}
				if (base.velocity.X > 8f)
				{
					base.velocity.X = 8f;
				}
				if (base.velocity.X < -8f)
				{
					base.velocity.X = -8f;
				}
				if (base.velocity.Y > 8f)
				{
					base.velocity.Y = 8f;
				}
				if (base.velocity.Y < -8f)
				{
					base.velocity.Y = -8f;
				}
				if (num832 > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num833, num832);
				}
				if (num832 < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num833, num832) + 3.14f;
				}
			}
			else if (aiStyle == 54)
			{
				crimsonBoss = whoAmI;
				if (Main.netMode != 1 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					int brainOfCthuluCreepersCount = GetBrainOfCthuluCreepersCount();
					for (int num835 = 0; num835 < brainOfCthuluCreepersCount; num835++)
					{
						float x2 = base.Center.X;
						float y4 = base.Center.Y;
						x2 += (float)Main.rand.Next(-width, width);
						y4 += (float)Main.rand.Next(-height, height);
						int num836 = NewNPC((int)x2, (int)y4, 267);
						Main.npc[num836].velocity = new Vector2((float)Main.rand.Next(-30, 31) * 0.1f, (float)Main.rand.Next(-30, 31) * 0.1f);
						Main.npc[num836].netUpdate = true;
					}
				}
				if (Main.netMode != 1)
				{
					TargetClosest();
					int num837 = 6000;
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) + Math.Abs(base.Center.Y - Main.player[target].Center.Y) > (float)num837)
					{
						active = false;
						life = 0;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(23, -1, -1, null, whoAmI);
						}
					}
				}
				if (this.ai[0] < 0f)
				{
					if (localAI[2] == 0f)
					{
						SoundEngine.PlaySound(3, (int)base.position.X, (int)base.position.Y);
						localAI[2] = 1f;
						Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 392);
						Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 393);
						Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 394);
						Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 395);
						for (int num838 = 0; num838 < 20; num838++)
						{
							Dust.NewDust(base.position, width, height, 5, (float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f);
						}
						SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
					}
					dontTakeDamage = false;
					TargetClosest();
					Vector2 vector95 = new Vector2(base.Center.X, base.Center.Y);
					float num839 = Main.player[target].Center.X - vector95.X;
					float num840 = Main.player[target].Center.Y - vector95.Y;
					float num841 = (float)Math.Sqrt(num839 * num839 + num840 * num840);
					float num842 = 8f;
					num841 = num842 / num841;
					num839 *= num841;
					num840 *= num841;
					base.velocity.X = (base.velocity.X * 50f + num839) / 51f;
					base.velocity.Y = (base.velocity.Y * 50f + num840) / 51f;
					if (this.ai[0] == -1f)
					{
						if (Main.netMode != 1)
						{
							localAI[1] += 1f;
							if (justHit)
							{
								localAI[1] -= Main.rand.Next(5);
							}
							int num843 = 60 + Main.rand.Next(120);
							if (Main.netMode != 0)
							{
								num843 += Main.rand.Next(30, 90);
							}
							if (localAI[1] >= (float)num843)
							{
								localAI[1] = 0f;
								TargetClosest();
								int num844 = 0;
								do
								{
									num844++;
									int num845 = (int)Main.player[target].Center.X / 16;
									int num846 = (int)Main.player[target].Center.Y / 16;
									num845 = ((Main.rand.Next(2) != 0) ? (num845 - Main.rand.Next(7, 13)) : (num845 + Main.rand.Next(7, 13)));
									num846 = ((Main.rand.Next(2) != 0) ? (num846 - Main.rand.Next(7, 13)) : (num846 + Main.rand.Next(7, 13)));
									if (!WorldGen.SolidTile(num845, num846))
									{
										this.ai[3] = 0f;
										this.ai[0] = -2f;
										this.ai[1] = num845;
										this.ai[2] = num846;
										netUpdate = true;
										netSpam = 0;
										break;
									}
								}
								while (num844 <= 100);
							}
						}
					}
					else if (this.ai[0] == -2f)
					{
						base.velocity *= 0.9f;
						if (Main.netMode != 0)
						{
							this.ai[3] += 15f;
						}
						else
						{
							this.ai[3] += 25f;
						}
						if (this.ai[3] >= 255f)
						{
							this.ai[3] = 255f;
							base.position.X = this.ai[1] * 16f - (float)(width / 2);
							base.position.Y = this.ai[2] * 16f - (float)(height / 2);
							SoundEngine.PlaySound(SoundID.Item8, base.Center);
							this.ai[0] = -3f;
							netUpdate = true;
							netSpam = 0;
						}
						alpha = (int)this.ai[3];
					}
					else if (this.ai[0] == -3f)
					{
						if (Main.netMode != 0)
						{
							this.ai[3] -= 15f;
						}
						else
						{
							this.ai[3] -= 25f;
						}
						if (this.ai[3] <= 0f)
						{
							this.ai[3] = 0f;
							this.ai[0] = -1f;
							netUpdate = true;
							netSpam = 0;
						}
						alpha = (int)this.ai[3];
					}
				}
				else
				{
					TargetClosest();
					Vector2 vector96 = new Vector2(base.Center.X, base.Center.Y);
					float num847 = Main.player[target].Center.X - vector96.X;
					float num848 = Main.player[target].Center.Y - vector96.Y;
					float num849 = (float)Math.Sqrt(num847 * num847 + num848 * num848);
					float num850 = 1f;
					if (Main.getGoodWorld)
					{
						num850 *= 3f;
					}
					if (num849 < num850)
					{
						base.velocity.X = num847;
						base.velocity.Y = num848;
					}
					else
					{
						num849 = num850 / num849;
						base.velocity.X = num847 * num849;
						base.velocity.Y = num848 * num849;
					}
					if (this.ai[0] == 0f)
					{
						if (Main.netMode != 1)
						{
							int num851 = 0;
							for (int num852 = 0; num852 < 200; num852++)
							{
								if (Main.npc[num852].active && Main.npc[num852].type == 267)
								{
									num851++;
								}
							}
							if (num851 == 0)
							{
								this.ai[0] = -1f;
								localAI[1] = 0f;
								alpha = 0;
								netUpdate = true;
							}
							localAI[1] += 1f;
							if (localAI[1] >= (float)(120 + Main.rand.Next(300)))
							{
								localAI[1] = 0f;
								TargetClosest();
								int num853 = 0;
								do
								{
									num853++;
									int num854 = (int)Main.player[target].Center.X / 16;
									int num855 = (int)Main.player[target].Center.Y / 16;
									num854 += Main.rand.Next(-50, 51);
									num855 += Main.rand.Next(-50, 51);
									if (!WorldGen.SolidTile(num854, num855) && Collision.CanHit(new Vector2(num854 * 16, num855 * 16), 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
									{
										this.ai[0] = 1f;
										this.ai[1] = num854;
										this.ai[2] = num855;
										netUpdate = true;
										break;
									}
								}
								while (num853 <= 100);
							}
						}
					}
					else if (this.ai[0] == 1f)
					{
						alpha += 5;
						if (alpha >= 255)
						{
							SoundEngine.PlaySound(SoundID.Item8, base.Center);
							alpha = 255;
							base.position.X = this.ai[1] * 16f - (float)(width / 2);
							base.position.Y = this.ai[2] * 16f - (float)(height / 2);
							this.ai[0] = 2f;
						}
					}
					else if (this.ai[0] == 2f)
					{
						alpha -= 5;
						if (alpha <= 0)
						{
							alpha = 0;
							this.ai[0] = 0f;
						}
					}
				}
				if (Main.player[target].dead || !Main.player[target].ZoneCrimson)
				{
					if (localAI[3] < 120f)
					{
						localAI[3]++;
					}
					if (localAI[3] > 60f)
					{
						base.velocity.Y += (localAI[3] - 60f) * 0.25f;
					}
					this.ai[0] = 2f;
					alpha = 10;
				}
				else if (localAI[3] > 0f)
				{
					localAI[3]--;
				}
			}
			else if (aiStyle == 55)
			{
				if (crimsonBoss < 0)
				{
					active = false;
					netUpdate = true;
					return;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] = 0f;
					Vector2 vector97 = new Vector2(base.Center.X, base.Center.Y);
					float num856 = Main.npc[crimsonBoss].Center.X - vector97.X;
					float num857 = Main.npc[crimsonBoss].Center.Y - vector97.Y;
					float num858 = (float)Math.Sqrt(num856 * num856 + num857 * num857);
					if (num858 > 90f)
					{
						num858 = 8f / num858;
						num856 *= num858;
						num857 *= num858;
						base.velocity.X = (base.velocity.X * 15f + num856) / 16f;
						base.velocity.Y = (base.velocity.Y * 15f + num857) / 16f;
						return;
					}
					if (Math.Abs(base.velocity.X) + Math.Abs(base.velocity.Y) < 8f)
					{
						base.velocity.Y *= 1.05f;
						base.velocity.X *= 1.05f;
					}
					if (Main.netMode != 1 && ((Main.expertMode && Main.rand.Next(100) == 0) || Main.rand.Next(200) == 0))
					{
						TargetClosest();
						vector97 = new Vector2(base.Center.X, base.Center.Y);
						num856 = Main.player[target].Center.X - vector97.X;
						num857 = Main.player[target].Center.Y - vector97.Y;
						num858 = (float)Math.Sqrt(num856 * num856 + num857 * num857);
						num858 = 8f / num858;
						base.velocity.X = num856 * num858;
						base.velocity.Y = num857 * num858;
						this.ai[0] = 1f;
						netUpdate = true;
					}
					return;
				}
				if (Main.expertMode)
				{
					Vector2 value3 = Main.player[target].Center - base.Center;
					value3.Normalize();
					if (Main.getGoodWorld)
					{
						value3 *= 12f;
						base.velocity = (base.velocity * 49f + value3) / 50f;
					}
					else
					{
						value3 *= 9f;
						base.velocity = (base.velocity * 99f + value3) / 100f;
					}
				}
				Vector2 vector98 = new Vector2(base.Center.X, base.Center.Y);
				float num859 = Main.npc[crimsonBoss].Center.X - vector98.X;
				float num860 = Main.npc[crimsonBoss].Center.Y - vector98.Y;
				float num861 = (float)Math.Sqrt(num859 * num859 + num860 * num860);
				if (num861 > 700f)
				{
					this.ai[0] = 0f;
				}
				else
				{
					if (!justHit)
					{
						return;
					}
					if (knockBackResist == 0f)
					{
						this.ai[1] += 1f;
						if (this.ai[1] > 5f)
						{
							this.ai[0] = 0f;
						}
					}
					else
					{
						this.ai[0] = 0f;
					}
				}
			}
			else if (aiStyle == 56)
			{
				TargetClosest();
				Vector2 vector99 = new Vector2(base.Center.X, base.Center.Y);
				float num862 = Main.player[target].Center.X - vector99.X;
				float num863 = Main.player[target].Center.Y - vector99.Y;
				float num864 = (float)Math.Sqrt(num862 * num862 + num863 * num863);
				float num865 = 12f;
				num864 = num865 / num864;
				num862 *= num864;
				num863 *= num864;
				base.velocity.X = (base.velocity.X * 100f + num862) / 101f;
				base.velocity.Y = (base.velocity.Y * 100f + num863) / 101f;
				rotation = (float)Math.Atan2(num863, num862) - 1.57f;
				base.position += netOffset;
				int num866 = Dust.NewDust(base.position, width, height, 180);
				Dust dust = Main.dust[num866];
				dust.velocity *= 0.1f;
				Main.dust[num866].scale = 1.3f;
				Main.dust[num866].noGravity = true;
				base.position -= netOffset;
			}
			else if (aiStyle == 57)
			{
				float num867 = 2f;
				noGravity = true;
				noTileCollide = true;
				if (!Main.dayTime)
				{
					TargetClosest();
				}
				bool flag50 = false;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num867 = 3f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num867 = 4f;
				}
				if (type == 344)
				{
					Lighting.AddLight(base.Bottom + new Vector2(0f, -30f), 0.3f, 0.16f, 0.125f);
				}
				if (type == 325)
				{
					Lighting.AddLight(base.Bottom + new Vector2(0f, -30f), 0.3f, 0.125f, 0.06f);
				}
				if (Main.dayTime)
				{
					EncourageDespawn(10);
					num867 = 8f;
				}
				else if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if ((double)life < (double)lifeMax * 0.5)
					{
						this.ai[1] += 1f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						this.ai[1] += 1f;
					}
					if (this.ai[1] >= 300f && Main.netMode != 1)
					{
						this.ai[1] = 0f;
						if ((double)life < (double)lifeMax * 0.25 && type != 344)
						{
							this.ai[0] = Main.rand.Next(3, 5);
						}
						else
						{
							this.ai[0] = Main.rand.Next(1, 3);
						}
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					if (type == 344)
					{
						if (Main.rand.Next(5) == 0)
						{
							int num868 = Dust.NewDust(base.position + Main.rand.NextVector2Square(0f, 1f) * base.Size - new Vector2(1f, 2f), 10, 14, 245, 0f, 0f, 254, Color.Transparent, 0.25f);
							Dust dust = Main.dust[num868];
							dust.velocity *= 0.2f;
						}
						flag50 = true;
						this.ai[1] += 1f;
						if (this.ai[1] % 5f == 0f)
						{
							Vector2 vector100 = new Vector2(base.position.X + 20f + (float)Main.rand.Next(width - 40), base.position.Y + 20f + (float)Main.rand.Next(height - 40));
							float num869 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector100.X;
							float num870 = Main.player[target].position.Y - vector100.Y;
							num869 += (float)Main.rand.Next(-50, 51);
							num870 += (float)Main.rand.Next(-50, 51);
							num870 -= Math.Abs(num869) * ((float)Main.rand.Next(0, 21) * 0.01f);
							float num871 = (float)Math.Sqrt(num869 * num869 + num870 * num870);
							float num872 = 12.5f;
							num871 = num872 / num871;
							num869 *= num871;
							num870 *= num871;
							num869 *= 1f + (float)Main.rand.Next(-20, 21) * 0.02f;
							num870 *= 1f + (float)Main.rand.Next(-20, 21) * 0.02f;
							int num873 = Projectile.NewProjectile(vector100.X, vector100.Y, num869, num870, 345, 43, 0f, Main.myPlayer, Main.rand.Next(0, 31));
						}
						if (this.ai[1] >= 180f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
					else
					{
						flag50 = true;
						this.ai[1] += 1f;
						if (this.ai[1] % 15f == 0f)
						{
							Vector2 vector101 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
							float num874 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector101.X;
							float num875 = Main.player[target].position.Y - vector101.Y;
							float num876 = (float)Math.Sqrt(num874 * num874 + num875 * num875);
							float num877 = 10f;
							num876 = num877 / num876;
							num874 *= num876;
							num875 *= num876;
							num874 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							num875 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							int num878 = Projectile.NewProjectile(vector101.X, vector101.Y, num874, num875, 325, 50, 0f, Main.myPlayer);
						}
						if (this.ai[1] >= 120f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					if (type == 344)
					{
						flag50 = true;
						this.ai[1] += 1f;
						if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 15f == 0f)
						{
							float num879 = 4.5f;
							Vector2 vector102 = new Vector2(base.position.X + 20f + (float)Main.rand.Next(width - 40), base.position.Y + 60f + (float)Main.rand.Next(height - 80));
							float num880 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector102.X;
							float num881 = Main.player[target].position.Y - vector102.Y;
							num881 -= Math.Abs(num880) * 0.3f;
							num879 += Math.Abs(num880) * 0.004f;
							num880 += (float)Main.rand.Next(-50, 51);
							num881 -= (float)Main.rand.Next(50, 201);
							float num882 = (float)Math.Sqrt(num880 * num880 + num881 * num881);
							num882 = num879 / num882;
							num880 *= num882;
							num881 *= num882;
							num880 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num881 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							int num883 = Projectile.NewProjectile(vector102.X, vector102.Y, num880, num881, 346, 57, 0f, Main.myPlayer, 0f, Main.rand.Next(2));
						}
						if (this.ai[1] >= 300f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
					else
					{
						flag50 = true;
						this.ai[1] += 1f;
						if (this.ai[1] > 60f && this.ai[1] < 240f && this.ai[1] % 8f == 0f)
						{
							float num884 = 10f;
							Vector2 vector103 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
							float num885 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector103.X;
							float num886 = Main.player[target].position.Y - vector103.Y;
							num886 -= Math.Abs(num885) * 0.3f;
							num884 += Math.Abs(num885) * 0.004f;
							if (num884 > 14f)
							{
								num884 = 14f;
							}
							num885 += (float)Main.rand.Next(-50, 51);
							num886 -= (float)Main.rand.Next(50, 201);
							float num887 = (float)Math.Sqrt(num885 * num885 + num886 * num886);
							num887 = num884 / num887;
							num885 *= num887;
							num886 *= num887;
							num885 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num886 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							int num888 = Projectile.NewProjectile(vector103.X, vector103.Y, num885, num886, Main.rand.Next(326, 329), 40, 0f, Main.myPlayer);
						}
						if (this.ai[1] >= 300f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 0f;
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					num867 = 4f;
					this.ai[1] += 1f;
					if (this.ai[1] % 30f == 0f)
					{
						Vector2 vector104 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
						float num889 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector104.X;
						float num890 = Main.player[target].position.Y - vector104.Y;
						float num891 = (float)Math.Sqrt(num889 * num889 + num890 * num890);
						float num892 = 16f;
						num891 = num892 / num891;
						num889 *= num891;
						num890 *= num891;
						num889 *= 1f + (float)Main.rand.Next(-20, 21) * 0.001f;
						num890 *= 1f + (float)Main.rand.Next(-20, 21) * 0.001f;
						int num893 = Projectile.NewProjectile(vector104.X, vector104.Y, num889, num890, 325, 75, 0f, Main.myPlayer);
					}
					if (this.ai[1] >= 120f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 4f)
				{
					num867 = 4f;
					this.ai[1] += 1f;
					if (this.ai[1] % 10f == 0f)
					{
						float num894 = 12f;
						Vector2 vector105 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
						float num895 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector105.X;
						float num896 = Main.player[target].position.Y - vector105.Y;
						num896 -= Math.Abs(num895) * 0.2f;
						num894 += Math.Abs(num895) * 0.002f;
						if (num894 > 16f)
						{
							num894 = 16f;
						}
						num895 += (float)Main.rand.Next(-50, 51);
						num896 -= (float)Main.rand.Next(50, 201);
						float num897 = (float)Math.Sqrt(num895 * num895 + num896 * num896);
						num897 = num894 / num897;
						num895 *= num897;
						num896 *= num897;
						num895 *= 1f + (float)Main.rand.Next(-30, 31) * 0.005f;
						num896 *= 1f + (float)Main.rand.Next(-30, 31) * 0.005f;
						int num898 = Projectile.NewProjectile(vector105.X, vector105.Y, num895, num896, Main.rand.Next(326, 329), 50, 0f, Main.myPlayer);
					}
					if (this.ai[1] >= 240f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
					}
				}
				if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 50f)
				{
					flag50 = true;
				}
				if (flag50)
				{
					base.velocity.X *= 0.9f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
				}
				else
				{
					if (base.direction > 0)
					{
						base.velocity.X = (base.velocity.X * 20f + num867) / 21f;
					}
					if (base.direction < 0)
					{
						base.velocity.X = (base.velocity.X * 20f - num867) / 21f;
					}
				}
				int num899 = 80;
				int num900 = 20;
				Vector2 position5 = new Vector2(base.Center.X - (float)(num899 / 2), base.position.Y + (float)height - (float)num900);
				bool flag51 = false;
				if (base.position.X < Main.player[target].position.X && base.position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width && base.position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height - 16f)
				{
					flag51 = true;
				}
				if (flag51)
				{
					base.velocity.Y += 0.5f;
				}
				else if (Collision.SolidCollision(position5, num899, num900))
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y = 0f;
					}
					if ((double)base.velocity.Y > -0.2)
					{
						base.velocity.Y -= 0.025f;
					}
					else
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				else
				{
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y = 0f;
					}
					if ((double)base.velocity.Y < 0.1)
					{
						base.velocity.Y += 0.025f;
					}
					else
					{
						base.velocity.Y += 0.5f;
					}
				}
				if (base.velocity.Y > 10f)
				{
					base.velocity.Y = 10f;
				}
			}
			else if (aiStyle == 58)
			{
				localAI[0] += 1f;
				if (localAI[0] > 6f)
				{
					localAI[0] = 0f;
					localAI[1] += 1f;
					if (localAI[1] > 4f)
					{
						localAI[1] = 0f;
					}
				}
				if (type == 327)
				{
					Lighting.AddLight(base.Center, 0.4f, 0.4f, 0.2f);
				}
				if (Main.netMode != 1)
				{
					localAI[2] += 1f;
					if (localAI[2] > 300f)
					{
						this.ai[3] = Main.rand.Next(3);
						localAI[2] = 0f;
					}
					else if (this.ai[3] == 0f && localAI[2] % 30f == 0f && localAI[2] > 30f)
					{
						float num901 = 5f;
						Vector2 vector106 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
						if (!WorldGen.SolidTile((int)vector106.X / 16, (int)vector106.Y / 16))
						{
							float num902 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector106.X;
							float num903 = Main.player[target].position.Y - vector106.Y;
							num902 += (float)Main.rand.Next(-50, 51);
							num903 += (float)Main.rand.Next(50, 201);
							num903 *= 0.2f;
							float num904 = (float)Math.Sqrt(num902 * num902 + num903 * num903);
							num904 = num901 / num904;
							num902 *= num904;
							num903 *= num904;
							num902 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num903 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							int num905 = Projectile.NewProjectile(vector106.X, vector106.Y, num902, num903, Main.rand.Next(326, 329), 40, 0f, Main.myPlayer);
						}
					}
				}
				if (this.ai[0] == 0f && Main.netMode != 1)
				{
					TargetClosest();
					this.ai[0] = 1f;
					int num906 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 328, whoAmI);
					Main.npc[num906].ai[0] = -1f;
					Main.npc[num906].ai[1] = whoAmI;
					Main.npc[num906].target = target;
					Main.npc[num906].netUpdate = true;
					num906 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + height / 2, 328, whoAmI);
					Main.npc[num906].ai[0] = 1f;
					Main.npc[num906].ai[1] = whoAmI;
					Main.npc[num906].ai[3] = 150f;
					Main.npc[num906].target = target;
					Main.npc[num906].netUpdate = true;
				}
				if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 2000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
				{
					TargetClosest();
					if (Main.player[target].dead || Math.Abs(base.position.X - Main.player[target].position.X) > 2000f || Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
					{
						this.ai[1] = 2f;
					}
				}
				if (Main.dayTime)
				{
					base.velocity.Y += 0.3f;
					base.velocity.X *= 0.9f;
				}
				else if (this.ai[1] == 0f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 300f)
					{
						if (this.ai[3] != 1f)
						{
							this.ai[1] = 0f;
							this.ai[2] = 0f;
						}
						else
						{
							this.ai[2] = 0f;
							this.ai[1] = 1f;
							TargetClosest();
							netUpdate = true;
						}
					}
					Vector2 vector107 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num907 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector107.X;
					float num908 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - 200f - vector107.Y;
					float num909 = (float)Math.Sqrt(num907 * num907 + num908 * num908);
					float num910 = 6f;
					if (this.ai[3] == 1f)
					{
						if (num909 > 900f)
						{
							num910 = 12f;
						}
						else if (num909 > 600f)
						{
							num910 = 10f;
						}
						else if (num909 > 300f)
						{
							num910 = 8f;
						}
					}
					if (num909 > 50f)
					{
						num909 = num910 / num909;
						base.velocity.X = (base.velocity.X * 14f + num907 * num909) / 15f;
						base.velocity.Y = (base.velocity.Y * 14f + num908 * num909) / 15f;
					}
				}
				else if (this.ai[1] == 1f)
				{
					this.ai[2] += 1f;
					if (this.ai[2] >= 600f || this.ai[3] != 1f)
					{
						this.ai[2] = 0f;
						this.ai[1] = 0f;
					}
					Vector2 vector108 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num911 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector108.X;
					float num912 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector108.Y;
					float num913 = (float)Math.Sqrt(num911 * num911 + num912 * num912);
					num913 = 16f / num913;
					base.velocity.X = (base.velocity.X * 49f + num911 * num913) / 50f;
					base.velocity.Y = (base.velocity.Y * 49f + num912 * num913) / 50f;
				}
				else if (this.ai[1] == 2f)
				{
					this.ai[1] = 3f;
					base.velocity.Y += 0.1f;
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y *= 0.95f;
					}
					base.velocity.X *= 0.95f;
					EncourageDespawn(500);
				}
				rotation = base.velocity.X * -0.02f;
			}
			else if (aiStyle == 59)
			{
				spriteDirection = -(int)this.ai[0];
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 58)
				{
					this.ai[2] += 10f;
					if (this.ai[2] > 50f || Main.netMode != 2)
					{
						life = -1;
						HitEffect();
						active = false;
					}
				}
				if (Main.netMode != 1 && Main.npc[(int)this.ai[1]].ai[3] == 2f)
				{
					localAI[1] += 1f;
					if (localAI[1] > 90f)
					{
						localAI[1] = 0f;
						float num914 = 0.01f;
						Vector2 vector109 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f + 30f);
						float num915 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector109.X;
						float num916 = Main.player[target].position.Y - vector109.Y;
						float num917 = (float)Math.Sqrt(num915 * num915 + num916 * num916);
						num917 = num914 / num917;
						num915 *= num917;
						num916 *= num917;
						int num918 = Projectile.NewProjectile(base.Center.X, base.Center.Y, num915, num916, 329, 60, 0f, Main.myPlayer, rotation, spriteDirection);
					}
				}
				if (Main.dayTime)
				{
					base.velocity.Y += 0.3f;
					base.velocity.X *= 0.9f;
				}
				else if (this.ai[2] == 0f || this.ai[2] == 3f)
				{
					if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
					{
						EncourageDespawn(10);
					}
					this.ai[3] += 1f;
					if (this.ai[3] >= 180f)
					{
						this.ai[2] += 1f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					Vector2 vector110 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num919 = (Main.player[target].Center.X + Main.npc[(int)this.ai[1]].Center.X) / 2f;
					float num920 = (Main.player[target].Center.Y + Main.npc[(int)this.ai[1]].Center.Y) / 2f;
					num919 += -170f * this.ai[0] - vector110.X;
					num920 += 90f - vector110.Y;
					float num921 = Math.Abs(Main.player[target].Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(Main.player[target].Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
					if (num921 > 700f)
					{
						num919 = Main.npc[(int)this.ai[1]].Center.X - 170f * this.ai[0] - vector110.X;
						num920 = Main.npc[(int)this.ai[1]].Center.Y + 90f - vector110.Y;
					}
					float num922 = (float)Math.Sqrt(num919 * num919 + num920 * num920);
					float num923 = 6f;
					if (num922 > 1000f)
					{
						num923 = 21f;
					}
					else if (num922 > 800f)
					{
						num923 = 18f;
					}
					else if (num922 > 600f)
					{
						num923 = 15f;
					}
					else if (num922 > 400f)
					{
						num923 = 12f;
					}
					else if (num922 > 200f)
					{
						num923 = 9f;
					}
					if (this.ai[0] < 0f && base.Center.X > Main.npc[(int)this.ai[1]].Center.X)
					{
						num919 -= 4f;
					}
					if (this.ai[0] > 0f && base.Center.X < Main.npc[(int)this.ai[1]].Center.X)
					{
						num919 += 4f;
					}
					num922 = num923 / num922;
					base.velocity.X = (base.velocity.X * 14f + num919 * num922) / 15f;
					base.velocity.Y = (base.velocity.Y * 14f + num920 * num922) / 15f;
					num922 = (float)Math.Sqrt(num919 * num919 + num920 * num920);
					if (num922 > 20f)
					{
						rotation = (float)Math.Atan2(num920, num919) + 1.57f;
					}
				}
				else if (this.ai[2] == 1f)
				{
					Vector2 vector111 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num924 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector111.X;
					float num925 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector111.Y;
					float num926 = (float)Math.Sqrt(num924 * num924 + num925 * num925);
					rotation = (float)Math.Atan2(num925, num924) + 1.57f;
					base.velocity.X *= 0.95f;
					base.velocity.Y -= 0.3f;
					if (base.velocity.Y < -14f)
					{
						base.velocity.Y = -14f;
					}
					if (base.position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
					{
						TargetClosest();
						this.ai[2] = 2f;
						vector111 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num924 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector111.X;
						num925 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector111.Y;
						num926 = (float)Math.Sqrt(num924 * num924 + num925 * num925);
						num926 = 18f / num926;
						base.velocity.X = num924 * num926;
						base.velocity.Y = num925 * num926;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 2f)
				{
					float num927 = Math.Abs(base.Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(base.Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
					if (base.position.Y > Main.player[target].position.Y || base.velocity.Y < 0f || num927 > 800f)
					{
						this.ai[2] = 3f;
					}
				}
				else if (this.ai[2] == 4f)
				{
					Vector2 vector112 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num928 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector112.X;
					float num929 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector112.Y;
					float num930 = (float)Math.Sqrt(num928 * num928 + num929 * num929);
					rotation = (float)Math.Atan2(num929, num928) + 1.57f;
					base.velocity.Y *= 0.95f;
					base.velocity.X += 0.3f * (0f - this.ai[0]);
					if (base.velocity.X < -14f)
					{
						base.velocity.X = -14f;
					}
					if (base.velocity.X > 14f)
					{
						base.velocity.X = 14f;
					}
					if (base.position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || base.position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
					{
						TargetClosest();
						this.ai[2] = 5f;
						vector112 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						num928 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector112.X;
						num929 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector112.Y;
						num930 = (float)Math.Sqrt(num928 * num928 + num929 * num929);
						num930 = 17f / num930;
						base.velocity.X = num928 * num930;
						base.velocity.Y = num929 * num930;
						netUpdate = true;
					}
				}
				else if (this.ai[2] == 5f)
				{
					float num931 = Math.Abs(base.Center.X - Main.npc[(int)this.ai[1]].Center.X) + Math.Abs(base.Center.Y - Main.npc[(int)this.ai[1]].Center.Y);
					if ((base.velocity.X > 0f && base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (base.velocity.X < 0f && base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2)) || num931 > 800f)
					{
						this.ai[2] = 0f;
					}
				}
			}
			else if (aiStyle == 60)
			{
				if (Main.dayTime)
				{
					if (base.velocity.X > 0f)
					{
						base.velocity.X += 0.25f;
					}
					else
					{
						base.velocity.X -= 0.25f;
					}
					base.velocity.Y -= 0.1f;
					rotation = base.velocity.X * 0.05f;
				}
				else if (this.ai[0] == 0f)
				{
					if (this.ai[2] == 0f)
					{
						TargetClosest();
						if (base.Center.X < Main.player[target].Center.X)
						{
							this.ai[2] = 1f;
						}
						else
						{
							this.ai[2] = -1f;
						}
					}
					TargetClosest();
					int num932 = 800;
					float num933 = Math.Abs(base.Center.X - Main.player[target].Center.X);
					if (base.Center.X < Main.player[target].Center.X && this.ai[2] < 0f && num933 > (float)num932)
					{
						this.ai[2] = 0f;
					}
					if (base.Center.X > Main.player[target].Center.X && this.ai[2] > 0f && num933 > (float)num932)
					{
						this.ai[2] = 0f;
					}
					float num934 = 0.45f;
					float num935 = 7f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						num934 = 0.55f;
						num935 = 8f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						num934 = 0.7f;
						num935 = 10f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						num934 = 0.8f;
						num935 = 11f;
					}
					base.velocity.X += this.ai[2] * num934;
					if (base.velocity.X > num935)
					{
						base.velocity.X = num935;
					}
					if (base.velocity.X < 0f - num935)
					{
						base.velocity.X = 0f - num935;
					}
					float num936 = Main.player[target].position.Y - (base.position.Y + (float)height);
					if (num936 < 150f)
					{
						base.velocity.Y -= 0.2f;
					}
					if (num936 > 200f)
					{
						base.velocity.Y += 0.2f;
					}
					if (base.velocity.Y > 8f)
					{
						base.velocity.Y = 8f;
					}
					if (base.velocity.Y < -8f)
					{
						base.velocity.Y = -8f;
					}
					rotation = base.velocity.X * 0.05f;
					if ((num933 < 500f || this.ai[3] < 0f) && base.position.Y < Main.player[target].position.Y)
					{
						this.ai[3] += 1f;
						int num937 = 13;
						if ((double)life < (double)lifeMax * 0.75)
						{
							num937 = 12;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							num937 = 11;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							num937 = 10;
						}
						num937++;
						if (this.ai[3] > (float)num937)
						{
							this.ai[3] = -num937;
						}
						if (this.ai[3] == 0f && Main.netMode != 1)
						{
							Vector2 vector113 = new Vector2(base.Center.X, base.Center.Y);
							vector113.X += base.velocity.X * 7f;
							float num938 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector113.X;
							float num939 = Main.player[target].Center.Y - vector113.Y;
							float num940 = (float)Math.Sqrt(num938 * num938 + num939 * num939);
							float num941 = 6f;
							if ((double)life < (double)lifeMax * 0.75)
							{
								num941 = 7f;
							}
							if ((double)life < (double)lifeMax * 0.5)
							{
								num941 = 8f;
							}
							if ((double)life < (double)lifeMax * 0.25)
							{
								num941 = 9f;
							}
							num940 = num941 / num940;
							num938 *= num940;
							num939 *= num940;
							int num942 = Projectile.NewProjectile(vector113.X, vector113.Y, num938, num939, 348, 42, 0f, Main.myPlayer);
						}
					}
					else if (this.ai[3] < 0f)
					{
						this.ai[3] += 1f;
					}
					if (Main.netMode != 1)
					{
						this.ai[1] += Main.rand.Next(1, 4);
						if (this.ai[1] > 800f && num933 < 600f)
						{
							this.ai[0] = -1f;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					TargetClosest();
					float num943 = 0.15f;
					float num944 = 7f;
					if ((double)life < (double)lifeMax * 0.75)
					{
						num943 = 0.17f;
						num944 = 8f;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						num943 = 0.2f;
						num944 = 9f;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						num943 = 0.25f;
						num944 = 10f;
					}
					num943 -= 0.05f;
					num944 -= 1f;
					if (base.Center.X < Main.player[target].Center.X)
					{
						base.velocity.X += num943;
						if (base.velocity.X < 0f)
						{
							base.velocity.X *= 0.98f;
						}
					}
					if (base.Center.X > Main.player[target].Center.X)
					{
						base.velocity.X -= num943;
						if (base.velocity.X > 0f)
						{
							base.velocity.X *= 0.98f;
						}
					}
					if (base.velocity.X > num944 || base.velocity.X < 0f - num944)
					{
						base.velocity.X *= 0.95f;
					}
					float num945 = Main.player[target].position.Y - (base.position.Y + (float)height);
					if (num945 < 180f)
					{
						base.velocity.Y -= 0.1f;
					}
					if (num945 > 200f)
					{
						base.velocity.Y += 0.1f;
					}
					if (base.velocity.Y > 6f)
					{
						base.velocity.Y = 6f;
					}
					if (base.velocity.Y < -6f)
					{
						base.velocity.Y = -6f;
					}
					rotation = base.velocity.X * 0.01f;
					if (Main.netMode != 1)
					{
						this.ai[3] += 1f;
						int num946 = 15;
						if ((double)life < (double)lifeMax * 0.75)
						{
							num946 = 14;
						}
						if ((double)life < (double)lifeMax * 0.5)
						{
							num946 = 12;
						}
						if ((double)life < (double)lifeMax * 0.25)
						{
							num946 = 10;
						}
						if ((double)life < (double)lifeMax * 0.1)
						{
							num946 = 8;
						}
						num946 += 3;
						if (this.ai[3] >= (float)num946)
						{
							this.ai[3] = 0f;
							Vector2 vector114 = new Vector2(base.Center.X, base.position.Y + (float)height - 14f);
							int i2 = (int)(vector114.X / 16f);
							int j2 = (int)(vector114.Y / 16f);
							if (!WorldGen.SolidTile(i2, j2))
							{
								float num947 = base.velocity.Y;
								if (num947 < 0f)
								{
									num947 = 0f;
								}
								num947 += 3f;
								float speedX2 = base.velocity.X * 0.25f;
								int num948 = Projectile.NewProjectile(vector114.X, vector114.Y, speedX2, num947, 349, 37, 0f, Main.myPlayer, Main.rand.Next(5));
							}
						}
					}
					if (Main.netMode != 1)
					{
						this.ai[1] += Main.rand.Next(1, 4);
						if (this.ai[1] > 600f)
						{
							this.ai[0] = -1f;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					TargetClosest();
					Vector2 vector115 = new Vector2(base.Center.X, base.Center.Y - 20f);
					float num949 = Main.rand.Next(-1000, 1001);
					float num950 = Main.rand.Next(-1000, 1001);
					float num951 = (float)Math.Sqrt(num949 * num949 + num950 * num950);
					float num952 = 15f;
					base.velocity *= 0.95f;
					num951 = num952 / num951;
					num949 *= num951;
					num950 *= num951;
					rotation += 0.2f;
					vector115.X += num949 * 4f;
					vector115.Y += num950 * 4f;
					this.ai[3] += 1f;
					int num953 = 7;
					if ((double)life < (double)lifeMax * 0.75)
					{
						num953--;
					}
					if ((double)life < (double)lifeMax * 0.5)
					{
						num953 -= 2;
					}
					if ((double)life < (double)lifeMax * 0.25)
					{
						num953 -= 3;
					}
					if ((double)life < (double)lifeMax * 0.1)
					{
						num953 -= 4;
					}
					if (this.ai[3] > (float)num953)
					{
						this.ai[3] = 0f;
						int num954 = Projectile.NewProjectile(vector115.X, vector115.Y, num949, num950, 349, 35, 0f, Main.myPlayer);
					}
					if (Main.netMode != 1)
					{
						this.ai[1] += Main.rand.Next(1, 4);
						if (this.ai[1] > 500f)
						{
							this.ai[0] = -1f;
						}
					}
				}
				if (this.ai[0] == -1f)
				{
					int num955 = Main.rand.Next(3);
					TargetClosest();
					if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 1000f)
					{
						num955 = 0;
					}
					this.ai[0] = num955;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
			}
			else if (aiStyle == 61)
			{
				float num956 = 2f;
				noGravity = true;
				noTileCollide = true;
				if (!Main.dayTime)
				{
					TargetClosest();
				}
				bool flag52 = false;
				if ((double)life < (double)lifeMax * 0.75)
				{
					num956 = 3f;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					num956 = 4f;
				}
				if ((double)life < (double)lifeMax * 0.25)
				{
					num956 = 5f;
				}
				Vector2 center4 = base.Center;
				Point point5 = center4.ToTileCoordinates();
				if (WorldGen.InWorld(point5.X, point5.Y) && !WorldGen.SolidTile(point5.X, point5.Y))
				{
					Lighting.AddLight(center4, 0.3f, 0.26f, 0.05f);
				}
				if (Main.dayTime)
				{
					EncourageDespawn(10);
					num956 = 8f;
					if (base.velocity.X == 0f)
					{
						base.velocity.X = 0.1f;
					}
				}
				else if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] >= 300f && Main.netMode != 1)
					{
						TargetClosest();
						this.ai[1] = 0f;
						this.ai[0] = 1f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.ai[1] += 1f;
					flag52 = true;
					int num957 = 16;
					if ((double)life < (double)lifeMax * 0.25)
					{
						num957 = 8;
					}
					else if ((double)life < (double)lifeMax * 0.5)
					{
						num957 = 11;
					}
					else if ((double)life < (double)lifeMax * 0.75)
					{
						num957 = 14;
					}
					if (this.ai[1] % (float)num957 == 0f)
					{
						Vector2 vector116 = new Vector2(base.Center.X + (float)(base.direction * 50), base.Center.Y + (float)Main.rand.Next(15, 36));
						float num958 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector116.X;
						float num959 = Main.player[target].Center.Y - vector116.Y;
						num958 += (float)Main.rand.Next(-40, 41);
						num959 += (float)Main.rand.Next(-40, 41);
						float num960 = (float)Math.Sqrt(num958 * num958 + num959 * num959);
						float num961 = 15f;
						num960 = num961 / num960;
						num958 *= num960;
						num959 *= num960;
						num958 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						num959 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						int num962 = Projectile.NewProjectile(vector116.X, vector116.Y, num958, num959, 180, 36, 0f, Main.myPlayer);
					}
					if (this.ai[1] > 240f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
				}
				if (Main.netMode != 1)
				{
					int num963 = 600;
					int num964 = 1200;
					int num965 = 2700;
					if ((double)life < (double)lifeMax * 0.25)
					{
						num963 = (int)((double)num963 * 0.5);
						num964 = (int)((double)num964 * 0.5);
						num965 = (int)((double)num965 * 0.5);
					}
					else if ((double)life < (double)lifeMax * 0.5)
					{
						num963 = (int)((double)num963 * 0.75);
						num964 = (int)((double)num964 * 0.75);
						num965 = (int)((double)num965 * 0.75);
					}
					else if ((double)life < (double)lifeMax * 0.75)
					{
						num963 = (int)((double)num963 * 0.9);
						num964 = (int)((double)num964 * 0.9);
						num965 = (int)((double)num965 * 0.9);
					}
					if (Main.rand.Next(num963) == 0)
					{
						Vector2 vector117 = new Vector2(base.Center.X - (float)(base.direction * 24), base.Center.Y - 64f);
						float num966 = Main.rand.Next(1, 100) * base.direction;
						float num967 = 1f;
						float num968 = (float)Math.Sqrt(num966 * num966 + num967 * num967);
						float num969 = 1f;
						num968 = num969 / num968;
						num966 *= num968;
						num967 *= num968;
						int num970 = Projectile.NewProjectile(vector117.X, vector117.Y, num966, num967, 352, 80, 0f, Main.myPlayer);
					}
					if (Main.rand.Next(num964) == 0)
					{
						localAI[1] = 1f;
					}
					if (localAI[1] >= 1f)
					{
						localAI[1] += 1f;
						int num971 = 12;
						if (localAI[1] % (float)num971 == 0f)
						{
							Vector2 vector118 = new Vector2(base.Center.X - (float)(base.direction * 24), base.Center.Y - 64f);
							float num972 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector118.X;
							float num973 = Main.player[target].Center.Y - vector118.Y;
							num972 += (float)Main.rand.Next(-50, 51);
							num973 += (float)Main.rand.Next(-50, 51);
							float num974 = (float)Math.Sqrt(num972 * num972 + num973 * num973);
							float num975 = 12.5f;
							num974 = num975 / num974;
							num972 *= num974;
							num973 *= num974;
							num972 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
							num973 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
							int num976 = Projectile.NewProjectile(vector118.X, vector118.Y, num972, num973, 350, 42, 0f, Main.myPlayer);
						}
						if (localAI[1] >= 100f)
						{
							localAI[1] = 0f;
						}
					}
					if (Main.rand.Next(num965) == 0)
					{
						localAI[2] = 2f;
					}
					if (localAI[2] > 0f)
					{
						localAI[2] += 1f;
						int num977 = 9;
						if (localAI[2] % (float)num977 == 0f)
						{
							Vector2 vector119 = new Vector2(base.Center.X - (float)(base.direction * 24), base.Center.Y - 64f);
							float num978 = Main.rand.Next(-100, 101);
							float num979 = -300f;
							float num980 = (float)Math.Sqrt(num978 * num978 + num979 * num979);
							float num981 = 11f;
							num980 = num981 / num980;
							num978 *= num980;
							num979 *= num980;
							num978 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							num979 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							int num982 = Projectile.NewProjectile(vector119.X, vector119.Y, num978, num979, 351, 50, 0f, Main.myPlayer);
						}
						if (localAI[2] >= 100f)
						{
							localAI[2] = 0f;
						}
					}
				}
				if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 50f)
				{
					flag52 = true;
				}
				if (flag52)
				{
					base.velocity.X *= 0.9f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
				}
				else
				{
					if (base.direction > 0)
					{
						base.velocity.X = (base.velocity.X * 20f + num956) / 21f;
					}
					if (base.direction < 0)
					{
						base.velocity.X = (base.velocity.X * 20f - num956) / 21f;
					}
				}
				int num983 = 80;
				int num984 = 20;
				Vector2 position6 = new Vector2(base.Center.X - (float)(num983 / 2), base.position.Y + (float)height - (float)num984);
				bool flag53 = false;
				if (base.position.X < Main.player[target].position.X && base.position.X + (float)width > Main.player[target].position.X + (float)Main.player[target].width && base.position.Y + (float)height < Main.player[target].position.Y + (float)Main.player[target].height - 16f)
				{
					flag53 = true;
				}
				if (flag53)
				{
					base.velocity.Y += 0.5f;
				}
				else if (Collision.SolidCollision(position6, num983, num984))
				{
					if (base.velocity.Y > 0f)
					{
						base.velocity.Y = 0f;
					}
					if ((double)base.velocity.Y > -0.2)
					{
						base.velocity.Y -= 0.025f;
					}
					else
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
				else
				{
					if (base.velocity.Y < 0f)
					{
						base.velocity.Y = 0f;
					}
					if ((double)base.velocity.Y < 0.1)
					{
						base.velocity.Y += 0.025f;
					}
					else
					{
						base.velocity.Y += 0.5f;
					}
				}
				if (base.velocity.Y > 10f)
				{
					base.velocity.Y = 10f;
				}
			}
			else if (aiStyle == 62)
			{
				TargetClosest();
				rotation = Math.Abs(base.velocity.X) * (float)base.direction * 0.1f;
				spriteDirection = base.direction;
				float num985 = 7f;
				Vector2 vector120 = new Vector2(base.Center.X + (float)(base.direction * 20), base.Center.Y + 6f);
				float num986 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector120.X;
				float num987 = Main.player[target].position.Y - vector120.Y;
				float num988 = (float)Math.Sqrt(num986 * num986 + num987 * num987);
				float num989 = num985 / num988;
				num986 *= num989;
				num987 *= num989;
				bool flag54 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
				if (Main.dayTime)
				{
					int num990 = 60;
					base.velocity.X = (base.velocity.X * (float)(num990 - 1) - num986) / (float)num990;
					base.velocity.Y = (base.velocity.Y * (float)(num990 - 1) - num987) / (float)num990;
					EncourageDespawn(10);
					return;
				}
				if (num988 > 600f || !flag54)
				{
					int num991 = 60;
					base.velocity.X = (base.velocity.X * (float)(num991 - 1) + num986) / (float)num991;
					base.velocity.Y = (base.velocity.Y * (float)(num991 - 1) + num987) / (float)num991;
					return;
				}
				base.velocity *= 0.98f;
				if (Math.Abs(base.velocity.X) < 1f && Math.Abs(base.velocity.Y) < 1f && Main.netMode != 1)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 15f)
					{
						localAI[0] = 0f;
						num986 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector120.X;
						num987 = Main.player[target].Center.Y - vector120.Y;
						num986 += (float)Main.rand.Next(-35, 36);
						num987 += (float)Main.rand.Next(-35, 36);
						num986 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						num987 *= 1f + (float)Main.rand.Next(-20, 21) * 0.015f;
						num988 = (float)Math.Sqrt(num986 * num986 + num987 * num987);
						num985 = 10f;
						num989 = num985 / num988;
						num986 *= num989;
						num987 *= num989;
						num986 *= 1f + (float)Main.rand.Next(-20, 21) * 0.0125f;
						num987 *= 1f + (float)Main.rand.Next(-20, 21) * 0.0125f;
						int num992 = Projectile.NewProjectile(vector120.X, vector120.Y, num986, num987, 180, 32, 0f, Main.myPlayer);
					}
				}
			}
			else if (aiStyle == 63)
			{
				TargetClosest();
				float num993 = 11f;
				Vector2 vector121 = new Vector2(base.Center.X + (float)(base.direction * 20), base.Center.Y + 6f);
				float num994 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector121.X;
				float num995 = Main.player[target].Center.Y - vector121.Y;
				float num996 = (float)Math.Sqrt(num994 * num994 + num995 * num995);
				float num997 = num993 / num996;
				num994 *= num997;
				num995 *= num997;
				if (Main.dayTime)
				{
					num994 = 0f - num994;
					num995 = 0f - num995;
				}
				this.ai[0] -= 1f;
				if (num996 < 200f || this.ai[0] > 0f)
				{
					if (num996 < 200f)
					{
						this.ai[0] = 20f;
					}
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					rotation += (float)base.direction * 0.3f;
					return;
				}
				base.velocity.X = (base.velocity.X * 50f + num994) / 51f;
				base.velocity.Y = (base.velocity.Y * 50f + num995) / 51f;
				if (num996 < 350f)
				{
					base.velocity.X = (base.velocity.X * 10f + num994) / 11f;
					base.velocity.Y = (base.velocity.Y * 10f + num995) / 11f;
				}
				if (num996 < 300f)
				{
					base.velocity.X = (base.velocity.X * 7f + num994) / 8f;
					base.velocity.Y = (base.velocity.Y * 7f + num995) / 8f;
				}
				rotation = base.velocity.X * 0.15f;
			}
			else if (aiStyle == 64)
			{
				float num998 = this.ai[0];
				float num999 = this.ai[1];
				if (Main.netMode != 1)
				{
					localAI[0] -= 1f;
					if (this.ai[3] == 0f)
					{
						this.ai[3] = (float)Main.rand.Next(75, 111) * 0.01f;
					}
					if (localAI[0] <= 0f)
					{
						TargetClosest();
						localAI[0] = Main.rand.Next(60, 180);
						float num1000 = Math.Abs(base.Center.X - Main.player[target].Center.X);
						if (num1000 > 700f && localAI[3] == 0f)
						{
							float num1001 = (float)Main.rand.Next(50, 151) * 0.01f;
							if (num1000 > 1000f)
							{
								num1001 = (float)Main.rand.Next(150, 201) * 0.01f;
							}
							else if (num1000 > 850f)
							{
								num1001 = (float)Main.rand.Next(100, 151) * 0.01f;
							}
							int num1002 = base.direction * Main.rand.Next(100, 251);
							int num1003 = Main.rand.Next(-50, 51);
							if (base.position.Y > Main.player[target].position.Y - 100f)
							{
								num1003 -= Main.rand.Next(100, 251);
							}
							float num1004 = num1001 / (float)Math.Sqrt(num1002 * num1002 + num1003 * num1003);
							num998 = (float)num1002 * num1004;
							num999 = (float)num1003 * num1004;
						}
						else
						{
							localAI[3] = 1f;
							float num1005 = (float)Main.rand.Next(5, 151) * 0.01f;
							int num1006 = Main.rand.Next(-100, 101);
							int num1007 = Main.rand.Next(-100, 101);
							float num1008 = num1005 / (float)Math.Sqrt(num1006 * num1006 + num1007 * num1007);
							num998 = (float)num1006 * num1008;
							num999 = (float)num1007 * num1008;
						}
						netUpdate = true;
					}
				}
				scale = this.ai[3];
				if (localAI[2] > 0f)
				{
					int i3 = (int)base.Center.X / 16;
					int j3 = (int)base.Center.Y / 16;
					if (localAI[2] > 3f)
					{
						if (type == 358)
						{
							Lighting.AddLight(i3, j3, 0.101249993f * scale, 0.21374999f * scale, 0.225f * scale);
						}
						else if (type == 654)
						{
							Lighting.AddLight(i3, j3, 0.225f * scale, 0.105000004f * scale, 0.0600000024f * scale);
						}
						else
						{
							Lighting.AddLight(i3, j3, 0.109500006f * scale, 0.15f * scale, 0.0615f * scale);
						}
					}
					localAI[2] -= 1f;
				}
				else if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				else
				{
					localAI[1] = Main.rand.Next(30, 180);
					if (!Main.dayTime || (double)(base.position.Y / 16f) > Main.worldSurface + 10.0)
					{
						localAI[2] = Main.rand.Next(10, 30);
					}
				}
				int num1009 = 80;
				base.velocity.X = (base.velocity.X * (float)(num1009 - 1) + num998) / (float)num1009;
				base.velocity.Y = (base.velocity.Y * (float)(num1009 - 1) + num999) / (float)num1009;
				if (base.velocity.Y > 0f)
				{
					int num1010 = 4;
					int num1011 = (int)base.Center.X / 16;
					int num1012 = (int)base.Center.Y / 16;
					for (int num1013 = num1012; num1013 < num1012 + num1010; num1013++)
					{
						if (Main.tile[num1011, num1013] != null && ((Main.tile[num1011, num1013].nactive() && Main.tileSolid[Main.tile[num1011, num1013].type]) || Main.tile[num1011, num1013].liquid > 0))
						{
							num999 *= -1f;
							if (base.velocity.Y > 0f)
							{
								base.velocity.Y *= 0.9f;
							}
						}
					}
				}
				if (base.velocity.Y < 0f)
				{
					int num1014 = 30;
					bool flag55 = false;
					int num1015 = (int)base.Center.X / 16;
					int num1016 = (int)base.Center.Y / 16;
					for (int num1017 = num1016; num1017 < num1016 + num1014; num1017++)
					{
						if (Main.tile[num1015, num1017] != null && Main.tile[num1015, num1017].nactive() && Main.tileSolid[Main.tile[num1015, num1017].type])
						{
							flag55 = true;
						}
					}
					if (!flag55)
					{
						num999 *= -1f;
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.9f;
						}
					}
				}
				if (collideX)
				{
					num998 = ((!(base.velocity.X < 0f)) ? (0f - Math.Abs(num998)) : Math.Abs(num998));
					base.velocity.X *= -0.2f;
				}
				if (base.velocity.X < 0f)
				{
					base.direction = -1;
				}
				if (base.velocity.X > 0f)
				{
					base.direction = 1;
				}
				this.ai[0] = num998;
				this.ai[1] = num999;
			}
			else if (aiStyle == 65)
			{
				AI_065_Butterflies();
			}
			else if (aiStyle == 66)
			{
				if (type == 484)
				{
					float num1018 = (float)Main.rand.Next(90, 111) * 0.01f;
					num1018 *= (Main.essScale + 0.5f) / 2f;
					Lighting.AddLight((int)((base.position.X + (float)(width / 2)) / 16f), (int)((base.position.Y + (float)(height / 2)) / 16f), 0.3f * num1018, 0.1f * num1018, 0.25f * num1018);
				}
				if (type == 357 || type == 448 || (type >= 484 && type <= 487) || type == 606)
				{
					if (localAI[2] < 90f)
					{
						localAI[2] += 1f;
					}
					else
					{
						friendly = false;
					}
				}
				if (base.velocity.Y == 0f)
				{
					if (this.ai[0] == 1f)
					{
						if (base.direction == 0)
						{
							TargetClosest();
						}
						if (collideX)
						{
							base.direction *= -1;
						}
						float num1019 = 0.2f;
						if (type == 485)
						{
							num1019 = 0.25f;
						}
						if (type == 486)
						{
							num1019 = 0.325f;
						}
						if (type == 487)
						{
							num1019 = 0.4f;
						}
						base.velocity.X = num1019 * (float)base.direction;
						if (type == 374)
						{
							base.velocity.X *= 3f;
						}
					}
					else
					{
						base.velocity.X = 0f;
					}
					if (Main.netMode != 1)
					{
						localAI[1] -= 1f;
						if (localAI[1] <= 0f)
						{
							if (this.ai[0] == 1f)
							{
								this.ai[0] = 0f;
								localAI[1] = Main.rand.Next(300, 900);
							}
							else
							{
								this.ai[0] = 1f;
								localAI[1] = Main.rand.Next(600, 1800);
							}
							netUpdate = true;
						}
					}
				}
				else if (base.direction == 0)
				{
					base.direction = 1;
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
				}
				if (type != 374)
				{
					return;
				}
				spriteDirection = base.direction;
				bool flag56 = false;
				for (int num1020 = 0; num1020 < 255; num1020++)
				{
					Player player2 = Main.player[num1020];
					if (player2.active && !player2.dead && !(Vector2.Distance(player2.Center, base.Center) > 160f))
					{
						flag56 = true;
						break;
					}
				}
				int num1021 = 90;
				if (flag56 && this.ai[1] < (float)num1021)
				{
					this.ai[1]++;
				}
				if (this.ai[1] == (float)num1021 && Main.netMode != 1)
				{
					base.position.Y += 16f;
					Transform(375);
					netUpdate = true;
				}
			}
			else if (aiStyle == 67)
			{
				if (type == 359)
				{
					if (this.ai[3] != 0f)
					{
						scale = this.ai[3];
						int num1022 = (int)(12f * scale);
						int num1023 = (int)(12f * scale);
						if (num1022 != width)
						{
							base.position.X = base.position.X + (float)(width / 2) - (float)num1022 - 2f;
							width = num1022;
						}
						if (num1023 != height)
						{
							base.position.Y = base.position.Y + (float)height - (float)num1023;
							height = num1023;
						}
					}
					if (this.ai[3] == 0f && Main.netMode != 1)
					{
						this.ai[3] = (float)Main.rand.Next(80, 111) * 0.01f;
						netUpdate = true;
					}
				}
				if (type == 360)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.2f, 0.7f);
				}
				if (type == 655)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.6f, 0.3f, 0.1f);
				}
				float num1024 = 0.3f;
				if (type == 360 || type == 655)
				{
					num1024 = 0.6f;
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					directionY = 1;
					this.ai[0] = 1f;
					if (base.direction > 0)
					{
						spriteDirection = 1;
					}
				}
				bool flag57 = false;
				if (Main.netMode != 1)
				{
					if (this.ai[2] == 0f && Main.rand.Next(7200) == 0)
					{
						this.ai[2] = 2f;
						netUpdate = true;
					}
					if (!collideX && !collideY)
					{
						localAI[3] += 1f;
						if (localAI[3] > 5f)
						{
							this.ai[2] = 2f;
							netUpdate = true;
						}
					}
					else
					{
						localAI[3] = 0f;
					}
				}
				if (this.ai[2] > 0f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 1f;
					directionY = 1;
					if (base.velocity.Y > num1024)
					{
						rotation += (float)base.direction * 0.1f;
					}
					else
					{
						rotation = 0f;
					}
					spriteDirection = base.direction;
					base.velocity.X = num1024 * (float)base.direction;
					noGravity = false;
					int num1025 = (int)(base.Center.X + (float)(width / 2 * -base.direction)) / 16;
					int num1026 = (int)(base.position.Y + (float)height + 8f) / 16;
					if (Main.tile[num1025, num1026] != null && !Main.tile[num1025, num1026].topSlope() && collideY)
					{
						this.ai[2] -= 1f;
					}
					num1026 = (int)(base.position.Y + (float)height - 4f) / 16;
					num1025 = (int)(base.Center.X + (float)(width / 2 * base.direction)) / 16;
					if (Main.tile[num1025, num1026] != null && Main.tile[num1025, num1026].bottomSlope())
					{
						base.direction *= -1;
					}
					if (collideX && base.velocity.Y == 0f)
					{
						flag57 = true;
						this.ai[2] = 0f;
						directionY = -1;
						this.ai[1] = 1f;
					}
					if (base.velocity.Y == 0f)
					{
						if (localAI[1] == base.position.X)
						{
							localAI[2] += 1f;
							if (localAI[2] > 10f)
							{
								base.direction = 1;
								base.velocity.X = (float)base.direction * num1024;
								localAI[2] = 0f;
							}
						}
						else
						{
							localAI[2] = 0f;
							localAI[1] = base.position.X;
						}
					}
				}
				if (this.ai[2] != 0f)
				{
					return;
				}
				noGravity = true;
				if (this.ai[1] == 0f)
				{
					if (collideY)
					{
						this.ai[0] = 2f;
					}
					if (!collideY && this.ai[0] == 2f)
					{
						base.direction = -base.direction;
						this.ai[1] = 1f;
						this.ai[0] = 1f;
					}
					if (collideX)
					{
						directionY = -directionY;
						this.ai[1] = 1f;
					}
				}
				else
				{
					if (collideX)
					{
						this.ai[0] = 2f;
					}
					if (!collideX && this.ai[0] == 2f)
					{
						directionY = -directionY;
						this.ai[1] = 0f;
						this.ai[0] = 1f;
					}
					if (collideY)
					{
						base.direction = -base.direction;
						this.ai[1] = 0f;
					}
				}
				if (!flag57)
				{
					float num1027 = rotation;
					if (directionY < 0)
					{
						if (base.direction < 0)
						{
							if (collideX)
							{
								rotation = 1.57f;
								spriteDirection = -1;
							}
							else if (collideY)
							{
								rotation = 3.14f;
								spriteDirection = 1;
							}
						}
						else if (collideY)
						{
							rotation = 3.14f;
							spriteDirection = -1;
						}
						else if (collideX)
						{
							rotation = 4.71f;
							spriteDirection = 1;
						}
					}
					else if (base.direction < 0)
					{
						if (collideY)
						{
							rotation = 0f;
							spriteDirection = -1;
						}
						else if (collideX)
						{
							rotation = 1.57f;
							spriteDirection = 1;
						}
					}
					else if (collideX)
					{
						rotation = 4.71f;
						spriteDirection = -1;
					}
					else if (collideY)
					{
						rotation = 0f;
						spriteDirection = 1;
					}
					float num1028 = rotation;
					rotation = num1027;
					if ((double)rotation > 6.28)
					{
						rotation -= 6.28f;
					}
					if (rotation < 0f)
					{
						rotation += 6.28f;
					}
					float num1029 = Math.Abs(rotation - num1028);
					float num1030 = 0.1f;
					if (rotation > num1028)
					{
						if ((double)num1029 > 3.14)
						{
							rotation += num1030;
						}
						else
						{
							rotation -= num1030;
							if (rotation < num1028)
							{
								rotation = num1028;
							}
						}
					}
					if (rotation < num1028)
					{
						if ((double)num1029 > 3.14)
						{
							rotation -= num1030;
						}
						else
						{
							rotation += num1030;
							if (rotation > num1028)
							{
								rotation = num1028;
							}
						}
					}
				}
				base.velocity.X = num1024 * (float)base.direction;
				base.velocity.Y = num1024 * (float)directionY;
			}
			else if (aiStyle == 68)
			{
				noGravity = true;
				if (this.ai[0] == 0f)
				{
					noGravity = false;
					int direction4 = base.direction;
					int num1031 = target;
					TargetClosest();
					if (num1031 >= 0 && direction4 != 0)
					{
						base.direction = direction4;
					}
					if (wet)
					{
						float num1032 = 2f;
						base.velocity.X = (base.velocity.X * 19f + num1032 * (float)base.direction) / 20f;
						int num1033 = (int)(base.Center.X + (float)((width / 2 + 8) * base.direction)) / 16;
						int num1034 = (int)(base.Center.Y / 16f);
						int j4 = (int)(base.position.Y / 16f);
						int num1035 = (int)((base.position.Y + (float)height) / 16f);
						if (Main.tile[num1033, num1034] == null)
						{
							Main.tile[num1033, num1034] = new Tile();
						}
						if (Main.tile[num1033, num1035] == null)
						{
							Main.tile[num1033, num1035] = new Tile();
						}
						if (WorldGen.SolidTile(num1033, num1034) || WorldGen.SolidTile(num1033, j4) || WorldGen.SolidTile(num1033, num1035) || Main.tile[num1033, num1035].liquid == 0)
						{
							base.direction *= -1;
						}
						spriteDirection = base.direction;
						if (base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.5f;
						}
						noGravity = true;
						num1033 = (int)(base.Center.X / 16f);
						num1034 = (int)(base.Center.Y / 16f);
						float num1036 = base.position.Y + (float)height;
						if (Main.tile[num1033, num1034 - 1] == null)
						{
							Main.tile[num1033, num1034 - 1] = new Tile();
						}
						if (Main.tile[num1033, num1034] == null)
						{
							Main.tile[num1033, num1034] = new Tile();
						}
						if (Main.tile[num1033, num1034 + 1] == null)
						{
							Main.tile[num1033, num1034 + 1] = new Tile();
						}
						if (Main.tile[num1033, num1034 - 1].liquid > 0)
						{
							num1036 = num1034 * 16;
							num1036 -= (float)((int)Main.tile[num1033, num1034 - 1].liquid / 16);
						}
						else if (Main.tile[num1033, num1034].liquid > 0)
						{
							num1036 = (num1034 + 1) * 16;
							num1036 -= (float)((int)Main.tile[num1033, num1034].liquid / 16);
						}
						else if (Main.tile[num1033, num1034 + 1].liquid > 0)
						{
							num1036 = (num1034 + 2) * 16;
							num1036 -= (float)((int)Main.tile[num1033, num1034 + 1].liquid / 16);
						}
						num1036 -= 6f;
						if (base.Center.Y > num1036)
						{
							base.velocity.Y -= 0.1f;
							if (base.velocity.Y < -8f)
							{
								base.velocity.Y = -8f;
							}
							if (base.Center.Y + base.velocity.Y < num1036)
							{
								base.velocity.Y = num1036 - base.Center.Y;
							}
						}
						else
						{
							base.velocity.Y = num1036 - base.Center.Y;
						}
					}
					if (Main.netMode == 1)
					{
						return;
					}
					if (!wet)
					{
						this.ai[0] = 1f;
						netUpdate = true;
						base.direction = -base.direction;
						return;
					}
					Rectangle rectangle4 = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
					if (new Rectangle((int)base.position.X - 100, (int)base.position.Y - 100, width + 200, height + 200).Intersects(rectangle4) || life < lifeMax)
					{
						this.ai[0] = 1f;
						base.velocity.Y -= 6f;
						netUpdate = true;
						base.direction = -base.direction;
					}
				}
				else
				{
					if (Main.player[target].dead)
					{
						return;
					}
					bool flag58 = false;
					this.ai[1] += 1f;
					if (this.ai[1] >= 300f)
					{
						flag58 = true;
					}
					if (flag58)
					{
						if (base.velocity.Y == 0f || collideY || wet)
						{
							base.velocity.X = 0f;
							base.velocity.Y = 0f;
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							if (Main.netMode != 1)
							{
								if ((type == 363 || type == 365 || type == 603 || type == 609) && !wet)
								{
									int direction5 = base.direction;
									Transform(type - 1);
									TargetClosest();
									base.direction = direction5;
									this.ai[0] = 0f;
									this.ai[1] = 200 + Main.rand.Next(200);
								}
								netUpdate = true;
							}
						}
						else
						{
							base.velocity.X *= 0.98f;
							base.velocity.Y += 0.1f;
							if (base.velocity.Y > 2f)
							{
								base.velocity.Y = 2f;
							}
						}
						return;
					}
					if (collideX)
					{
						base.direction *= -1;
						base.velocity.X = oldVelocity.X * -0.5f;
						if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 2f)
						{
							base.velocity.X = 2f;
						}
						if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -2f)
						{
							base.velocity.X = -2f;
						}
					}
					if (collideY)
					{
						base.velocity.Y = oldVelocity.Y * -0.5f;
						if (base.velocity.Y > 0f && base.velocity.Y < 1f)
						{
							base.velocity.Y = 1f;
						}
						if (base.velocity.Y < 0f && base.velocity.Y > -1f)
						{
							base.velocity.Y = -1f;
						}
					}
					if (base.direction == -1 && base.velocity.X > -3f)
					{
						base.velocity.X -= 0.1f;
						if (base.velocity.X > 3f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (base.velocity.X > 0f)
						{
							base.velocity.X -= 0.05f;
						}
						if (base.velocity.X < -3f)
						{
							base.velocity.X = -3f;
						}
					}
					else if (base.direction == 1 && base.velocity.X < 3f)
					{
						base.velocity.X += 0.1f;
						if (base.velocity.X < -3f)
						{
							base.velocity.X += 0.1f;
						}
						else if (base.velocity.X < 0f)
						{
							base.velocity.X += 0.05f;
						}
						if (base.velocity.X > 3f)
						{
							base.velocity.X = 3f;
						}
					}
					int num1037 = (int)((base.position.X + (float)(width / 2)) / 16f) + base.direction;
					int num1038 = (int)((base.position.Y + (float)height) / 16f);
					bool flag59 = true;
					int num1039 = 15;
					bool flag60 = false;
					for (int num1040 = num1038; num1040 < num1038 + num1039; num1040++)
					{
						if (Main.tile[num1037, num1040] == null)
						{
							Main.tile[num1037, num1040] = new Tile();
						}
						if ((Main.tile[num1037, num1040].nactive() && Main.tileSolid[Main.tile[num1037, num1040].type]) || Main.tile[num1037, num1040].liquid > 0)
						{
							if (num1040 < num1038 + 5)
							{
								flag60 = true;
							}
							flag59 = false;
							break;
						}
					}
					if (flag59)
					{
						base.velocity.Y += 0.1f;
					}
					else
					{
						base.velocity.Y -= 0.1f;
					}
					if (flag60)
					{
						base.velocity.Y -= 0.2f;
					}
					if (base.velocity.Y > 3f)
					{
						base.velocity.Y = 3f;
					}
					if (base.velocity.Y < -4f)
					{
						base.velocity.Y = -4f;
					}
				}
			}
			else if (aiStyle == 69)
			{
				AI_069_DukeFishron();
			}
			else if (aiStyle == 70)
			{
				if (target == 255)
				{
					TargetClosest();
					this.ai[3] = (float)Main.rand.Next(80, 121) / 100f;
					float scaleFactor = (float)Main.rand.Next(165, 265) / 15f;
					base.velocity = Vector2.Normalize(Main.player[target].Center - base.Center + new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101))) * scaleFactor;
					netUpdate = true;
				}
				Vector2 vector122 = Vector2.Normalize(Main.player[target].Center - base.Center);
				base.velocity = (base.velocity * 40f + vector122 * 20f) / 41f;
				scale = this.ai[3];
				alpha -= 30;
				if (alpha < 50)
				{
					alpha = 50;
				}
				alpha = 50;
				base.velocity.X = (base.velocity.X * 50f + Main.windSpeedCurrent * 2f + (float)Main.rand.Next(-10, 11) * 0.1f) / 51f;
				base.velocity.Y = (base.velocity.Y * 50f + -0.25f + (float)Main.rand.Next(-10, 11) * 0.2f) / 51f;
				if (base.velocity.Y > 0f)
				{
					base.velocity.Y -= 0.04f;
				}
				if (this.ai[0] == 0f)
				{
					int num1041 = 40;
					Rectangle rect = getRect();
					rect.X -= num1041 + width / 2;
					rect.Y -= num1041 + height / 2;
					rect.Width += num1041 * 2;
					rect.Height += num1041 * 2;
					for (int num1042 = 0; num1042 < 255; num1042++)
					{
						Player player3 = Main.player[num1042];
						if (player3.active && !player3.dead && rect.Intersects(player3.getRect()))
						{
							this.ai[0] = 1f;
							this.ai[1] = 4f;
							netUpdate = true;
							break;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1]++;
					if (this.ai[1] >= 150f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 4f;
					}
				}
				if (this.ai[0] == 1f)
				{
					this.ai[1]--;
					if (this.ai[1] <= 0f)
					{
						life = 0;
						HitEffect();
						active = false;
						return;
					}
				}
				if (justHit || this.ai[0] == 1f)
				{
					dontTakeDamage = true;
					base.position = base.Center;
					width = (height = 100);
					base.position = new Vector2(base.position.X - (float)(width / 2), base.position.Y - (float)(height / 2));
					EncourageDespawn(3);
				}
			}
			else if (aiStyle == 71)
			{
				noTileCollide = true;
				int num1043 = 90;
				if (target < 0 || target == 255 || Main.player[target].dead)
				{
					TargetClosest(faceTarget: false);
					base.direction = 1;
					netUpdate = true;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1]++;
					_ = type;
					_ = 372;
					noGravity = true;
					dontTakeDamage = true;
					base.velocity.Y = this.ai[3];
					if (type == 373)
					{
						float num1044 = (float)Math.PI / 30f;
						float num1045 = this.ai[2];
						float num1046 = (float)(Math.Cos(num1044 * localAI[1]) - 0.5) * num1045;
						base.position.X -= num1046 * (float)(-base.direction);
						localAI[1]++;
						num1046 = (float)(Math.Cos(num1044 * localAI[1]) - 0.5) * num1045;
						base.position.X += num1046 * (float)(-base.direction);
						if (Math.Abs(Math.Cos(num1044 * localAI[1]) - 0.5) > 0.25)
						{
							spriteDirection = ((!(Math.Cos(num1044 * localAI[1]) - 0.5 >= 0.0)) ? 1 : (-1));
						}
						rotation = base.velocity.Y * (float)spriteDirection * 0.1f;
						if ((double)rotation < -0.2)
						{
							rotation = -0.2f;
						}
						if ((double)rotation > 0.2)
						{
							rotation = 0.2f;
						}
						alpha -= 6;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (this.ai[1] >= (float)num1043)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						if (!Collision.SolidCollision(base.position, width, height))
						{
							this.ai[1] = 1f;
						}
						SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
						TargetClosest();
						spriteDirection = base.direction;
						Vector2 vector123 = Main.player[target].Center - base.Center;
						vector123.Normalize();
						base.velocity = vector123 * 16f;
						rotation = base.velocity.ToRotation();
						if (base.direction == -1)
						{
							rotation += (float)Math.PI;
						}
						netUpdate = true;
					}
				}
				else
				{
					if (this.ai[0] != 1f)
					{
						return;
					}
					noGravity = true;
					if (!Collision.SolidCollision(base.position, width, height))
					{
						if (this.ai[1] < 1f)
						{
							this.ai[1] = 1f;
						}
					}
					else
					{
						alpha -= 15;
						if (alpha < 150)
						{
							alpha = 150;
						}
					}
					if (this.ai[1] >= 1f)
					{
						alpha -= 60;
						if (alpha < 0)
						{
							alpha = 0;
						}
						dontTakeDamage = false;
						this.ai[1]++;
						if (Collision.SolidCollision(base.position, width, height))
						{
							if (DeathSound != null)
							{
								SoundEngine.PlaySound(DeathSound, base.position);
							}
							life = 0;
							HitEffect();
							active = false;
							return;
						}
					}
					if (this.ai[1] >= 60f)
					{
						noGravity = false;
					}
					rotation = base.velocity.ToRotation();
					if (base.direction == -1)
					{
						rotation += (float)Math.PI;
					}
				}
			}
			else if (aiStyle == 72)
			{
				if (type == 384)
				{
					int num1047 = (int)this.ai[0];
					if (Main.npc[num1047].active && Main.npc[num1047].type == 383)
					{
						base.velocity = Vector2.Zero;
						base.position = Main.npc[num1047].Center;
						base.position.X -= width / 2;
						base.position.Y -= height / 2;
						gfxOffY = Main.npc[num1047].gfxOffY;
						Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.5f, 0.7f);
					}
					else
					{
						life = 0;
						HitEffect();
						active = false;
					}
				}
			}
			else if (aiStyle == 73)
			{
				TargetClosest(faceTarget: false);
				spriteDirection = base.direction;
				base.velocity.X *= 0.93f;
				if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
				{
					base.velocity.X = 0f;
				}
				if (type == 387)
				{
					float num1048 = 120f;
					float num1049 = 60f;
					if (this.ai[1] < num1048)
					{
						this.ai[1]++;
						if (this.ai[1] > 60f)
						{
							float num1050 = (this.ai[1] - num1049) / (num1048 - num1049);
							alpha = (int)((1f - num1050) * 255f);
						}
						else
						{
							alpha = 255;
						}
						dontTakeDamage = true;
						frameCounter = 0.0;
						frame.Y = 0;
						float num1051 = this.ai[1] / num1049;
						Vector2 spinningpoint = new Vector2(0f, -30f);
						spinningpoint = spinningpoint.RotatedBy(num1051 * 1.5f * ((float)Math.PI * 2f)) * new Vector2(1f, 0.4f);
						for (int num1052 = 0; num1052 < 4; num1052++)
						{
							Vector2 value4 = Vector2.Zero;
							float scaleFactor2 = 1f;
							if (num1052 == 0)
							{
								value4 = Vector2.UnitY * -15f;
								scaleFactor2 = 0.15f;
							}
							if (num1052 == 1)
							{
								value4 = Vector2.UnitY * -5f;
								scaleFactor2 = 0.3f;
							}
							if (num1052 == 2)
							{
								value4 = Vector2.UnitY * 5f;
								scaleFactor2 = 0.6f;
							}
							if (num1052 == 3)
							{
								value4 = Vector2.UnitY * 20f;
								scaleFactor2 = 0.45f;
							}
							int num1053 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num1053].noGravity = true;
							Main.dust[num1053].position = base.Center + spinningpoint * scaleFactor2 + value4;
							Main.dust[num1053].velocity = Vector2.Zero;
							spinningpoint *= -1f;
							num1053 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num1053].noGravity = true;
							Main.dust[num1053].position = base.Center + spinningpoint * scaleFactor2 + value4;
							Main.dust[num1053].velocity = Vector2.Zero;
						}
						Lighting.AddLight((int)base.Center.X / 16, (int)(base.Center.Y - 10f) / 16, 0.1f * num1051, 0.5f * num1051, 0.7f * num1051);
						return;
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)(base.Center.Y - 10f) / 16, 0.1f, 0.5f, 0.7f);
					dontTakeDamage = false;
				}
				if (this.ai[0] < 60f)
				{
					this.ai[0]++;
				}
				if (justHit)
				{
					this.ai[0] = -30f;
				}
				if (this.ai[0] == 60f)
				{
					this.ai[0] = -120f;
					Vector2 center5 = Main.player[target].Center;
					Vector2 value5 = base.Center - Vector2.UnitY * 10f;
					Vector2 vector124 = center5 - value5;
					vector124.X += Main.rand.Next(-100, 101);
					vector124.Y += Main.rand.Next(-100, 101);
					vector124.X *= (float)Main.rand.Next(70, 131) * 0.01f;
					vector124.Y *= (float)Main.rand.Next(70, 131) * 0.01f;
					vector124.Normalize();
					if (float.IsNaN(vector124.X) || float.IsNaN(vector124.Y))
					{
						vector124 = -Vector2.UnitY;
					}
					vector124 *= 14f;
					int num1054 = 35;
					float num1055 = 1f;
					if (type >= 381 && type <= 392)
					{
						num1055 = 0.8f;
					}
					num1054 = GetAttackDamage_ForProjectiles(num1054, (float)num1054 * num1055);
					Projectile.NewProjectile(value5.X, value5.Y, vector124.X, vector124.Y, 435, num1054, 0f, Main.myPlayer);
				}
			}
			else if (aiStyle == 74)
			{
				TargetClosest(faceTarget: false);
				rotation = base.velocity.ToRotation();
				if (Math.Sign(base.velocity.X) != 0)
				{
					spriteDirection = -Math.Sign(base.velocity.X);
				}
				if (rotation < -(float)Math.PI / 2f)
				{
					rotation += (float)Math.PI;
				}
				if (rotation > (float)Math.PI / 2f)
				{
					rotation -= (float)Math.PI;
				}
				if (type == 418)
				{
					spriteDirection = Math.Sign(base.velocity.X);
				}
				float num1056 = 0.4f;
				float num1057 = 10f;
				float scaleFactor3 = 200f;
				float num1058 = 750f;
				float num1059 = 30f;
				float num1060 = 30f;
				float num1061 = 0.95f;
				int num1062 = 50;
				float num1063 = 14f;
				float num1064 = 30f;
				float num1065 = 100f;
				float num1066 = 20f;
				float num1067 = 0f;
				float num1068 = 7f;
				bool flag61 = true;
				if (type == 418)
				{
					num1056 = 0.3f;
					num1057 = 8f;
					scaleFactor3 = 300f;
					num1058 = 800f;
					num1059 = 60f;
					num1060 = 5f;
					num1061 = 0.8f;
					num1062 = 0;
					num1063 = 10f;
					num1064 = 30f;
					num1065 = 150f;
					num1066 = 60f;
					num1067 = 0.333333343f;
					num1068 = 8f;
					flag61 = false;
				}
				num1067 *= num1066;
				if (Main.expertMode)
				{
					num1056 *= Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				}
				if (type == 388 && this.ai[0] != 3f)
				{
					base.position += netOffset;
					int num1069 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num1069].noGravity = true;
					Main.dust[num1069].velocity = base.velocity / 5f;
					Vector2 vector125 = new Vector2(-10f, 10f);
					if (spriteDirection == 1)
					{
						vector125.X *= -1f;
					}
					vector125 = vector125.RotatedBy(rotation);
					Main.dust[num1069].position = base.Center + vector125;
					base.position -= netOffset;
				}
				if (type == 418)
				{
					int num1070 = ((this.ai[0] != 2f) ? 1 : 2);
					int num1071 = ((this.ai[0] == 2f) ? 30 : 20);
					for (int num1072 = 0; num1072 < 2; num1072++)
					{
						if (Main.rand.Next(3) < num1070)
						{
							base.position += netOffset;
							int num1073 = Dust.NewDust(base.Center - new Vector2(num1071), num1071 * 2, num1071 * 2, 6, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 1.5f);
							Main.dust[num1073].noGravity = true;
							Dust dust = Main.dust[num1073];
							dust.velocity *= 0.2f;
							Main.dust[num1073].fadeIn = 1f;
							base.position -= netOffset;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					knockBackResist = num1056;
					float scaleFactor4 = num1057;
					Vector2 center6 = base.Center;
					Vector2 center7 = Main.player[target].Center;
					Vector2 value6 = center7 - center6;
					Vector2 vector126 = value6 - Vector2.UnitY * scaleFactor3;
					float num1074 = value6.Length();
					value6 = Vector2.Normalize(value6) * scaleFactor4;
					vector126 = Vector2.Normalize(vector126) * scaleFactor4;
					bool flag62 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
					if (this.ai[3] >= 120f)
					{
						flag62 = true;
					}
					float num1075 = 8f;
					flag62 = flag62 && value6.ToRotation() > (float)Math.PI / num1075 && value6.ToRotation() < (float)Math.PI - (float)Math.PI / num1075;
					if (num1074 > num1058 || !flag62)
					{
						base.velocity.X = (base.velocity.X * (num1059 - 1f) + vector126.X) / num1059;
						base.velocity.Y = (base.velocity.Y * (num1059 - 1f) + vector126.Y) / num1059;
						if (!flag62)
						{
							this.ai[3]++;
							if (this.ai[3] == 120f)
							{
								netUpdate = true;
							}
						}
						else
						{
							this.ai[3] = 0f;
						}
					}
					else
					{
						this.ai[0] = 1f;
						this.ai[2] = value6.X;
						this.ai[3] = value6.Y;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					knockBackResist = 0f;
					base.velocity *= num1061;
					this.ai[1]++;
					if (this.ai[1] >= num1060)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						netUpdate = true;
						Vector2 velocity = new Vector2(this.ai[2], this.ai[3]) + new Vector2(Main.rand.Next(-num1062, num1062 + 1), Main.rand.Next(-num1062, num1062 + 1)) * 0.04f;
						velocity.Normalize();
						velocity *= num1063;
						base.velocity = velocity;
					}
					if (type == 388 && Main.rand.Next(4) == 0)
					{
						base.position += netOffset;
						int num1076 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num1076].noGravity = true;
						Dust dust = Main.dust[num1076];
						dust.velocity *= 2f;
						Main.dust[num1076].velocity = Main.dust[num1076].velocity / 2f + Vector2.Normalize(Main.dust[num1076].position - base.Center);
						base.position -= netOffset;
					}
				}
				else if (this.ai[0] == 2f)
				{
					knockBackResist = 0f;
					float num1077 = num1064;
					this.ai[1]++;
					bool flag63 = Vector2.Distance(base.Center, Main.player[target].Center) > num1065 && base.Center.Y > Main.player[target].Center.Y;
					if ((this.ai[1] >= num1077 && flag63) || base.velocity.Length() < num1068)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						base.velocity /= 2f;
						netUpdate = true;
						if (type == 418)
						{
							this.ai[1] = 45f;
							this.ai[0] = 4f;
						}
					}
					else
					{
						Vector2 center8 = base.Center;
						Vector2 center9 = Main.player[target].Center;
						Vector2 vec2 = center9 - center8;
						vec2.Normalize();
						if (vec2.HasNaNs())
						{
							vec2 = new Vector2(base.direction, 0f);
						}
						base.velocity = (base.velocity * (num1066 - 1f) + vec2 * (base.velocity.Length() + num1067)) / num1066;
					}
					if (flag61 && Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 3f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 4f)
				{
					this.ai[1] -= 3f;
					if (this.ai[1] <= 0f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					base.velocity *= 0.95f;
				}
				if (flag61 && this.ai[0] != 3f && Vector2.Distance(base.Center, Main.player[target].Center) < 64f)
				{
					this.ai[0] = 3f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				if (this.ai[0] != 3f)
				{
					return;
				}
				base.position = base.Center;
				width = (height = 192);
				base.position.X -= width / 2;
				base.position.Y -= height / 2;
				base.velocity = Vector2.Zero;
				damage = GetAttackDamage_ScaledByStrength(80f);
				alpha = 255;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.2f, 0.7f, 1.1f);
				for (int num1078 = 0; num1078 < 10; num1078++)
				{
					int num1079 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num1079];
					dust.velocity *= 1.4f;
					Main.dust[num1079].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
				}
				for (int num1080 = 0; num1080 < 40; num1080++)
				{
					int num1081 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num1081].noGravity = true;
					Dust dust = Main.dust[num1081];
					dust.velocity *= 2f;
					Main.dust[num1081].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
					Main.dust[num1081].velocity = Main.dust[num1081].velocity / 2f + Vector2.Normalize(Main.dust[num1081].position - base.Center);
					if (Main.rand.Next(2) == 0)
					{
						num1081 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.9f);
						Main.dust[num1081].noGravity = true;
						dust = Main.dust[num1081];
						dust.velocity *= 1.2f;
						Main.dust[num1081].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
						Main.dust[num1081].velocity = Main.dust[num1081].velocity / 2f + Vector2.Normalize(Main.dust[num1081].position - base.Center);
					}
					if (Main.rand.Next(4) == 0)
					{
						num1081 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.7f);
						dust = Main.dust[num1081];
						dust.velocity *= 1.2f;
						Main.dust[num1081].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * ((float)Main.rand.NextDouble() * 96f) + base.Center;
						Main.dust[num1081].velocity = Main.dust[num1081].velocity / 2f + Vector2.Normalize(Main.dust[num1081].position - base.Center);
					}
				}
				this.ai[1]++;
				if (this.ai[1] >= 3f)
				{
					SoundEngine.PlaySound(SoundID.Item14, base.position);
					life = 0;
					HitEffect();
					active = false;
				}
			}
			else if (aiStyle == 75)
			{
				int num1082 = -1;
				Vector2 vector127 = Vector2.Zero;
				int num1083 = 0;
				if (type == 390)
				{
					if (localAI[0] == 0f && Main.netMode != 1)
					{
						localAI[0] = 1f;
						int num1084 = NewNPC((int)base.Center.X, (int)base.Center.Y, 391, whoAmI);
						this.ai[0] = num1084;
						netUpdate = true;
					}
					int num1085 = (int)this.ai[0];
					if (Main.npc[num1085].active && Main.npc[num1085].type == 391)
					{
						DiscourageDespawn(60);
						num1082 = num1085;
						vector127 = Vector2.UnitY * -14f;
					}
				}
				if (type == 416)
				{
					if (localAI[0] == 0f && Main.netMode != 1)
					{
						localAI[0] = 1f;
						int num1086 = NewNPC((int)base.Center.X, (int)base.Center.Y, 415, whoAmI);
						this.ai[0] = num1086;
						netUpdate = true;
					}
					int num1087 = (int)this.ai[0];
					if (Main.npc[num1087].active && Main.npc[num1087].type == 415)
					{
						DiscourageDespawn(60);
						num1082 = num1087;
						vector127 = new Vector2(-Main.npc[num1087].spriteDirection * 10, -30f);
					}
				}
				else if (type == 392)
				{
					int num1088 = (int)this.ai[0];
					if (Main.npc[num1088].active && Main.npc[num1088].type == 395)
					{
						DiscourageDespawn(60);
						num1082 = num1088;
						vector127 = Vector2.UnitY * 2f;
						vector127 *= Main.npc[num1088].scale;
						float num1089 = Main.npc[num1088].rotation;
						vector127 = vector127.RotatedBy(num1089);
						rotation = num1089;
						if (Main.netMode != 1)
						{
							bool flag64 = true;
							if (Main.npc[num1088].ai[0] >= 1f || Main.npc[num1088].ai[0] < 0f)
							{
								flag64 = false;
							}
							if (flag64)
							{
								for (int num1090 = 0; num1090 < 2; num1090++)
								{
									if (Main.npc[(int)localAI[num1090]].active && Main.npc[(int)localAI[num1090]].type == 393)
									{
										flag64 = false;
									}
								}
								for (int num1091 = 2; num1091 < 4; num1091++)
								{
									if (Main.npc[(int)localAI[num1091]].active && Main.npc[(int)localAI[num1091]].type == 394)
									{
										flag64 = false;
									}
								}
							}
							if (Main.npc[num1088].ai[3] % 200f == 0f && Main.npc[num1088].ai[0] != 1f)
							{
								for (int num1092 = 0; num1092 < 2; num1092++)
								{
									if (Main.npc[(int)localAI[num1092]].active && Main.npc[(int)localAI[num1092]].type == 393)
									{
										Main.npc[(int)localAI[num1092]].netUpdate = true;
									}
								}
								for (int num1093 = 2; num1093 < 4; num1093++)
								{
									if (Main.npc[(int)localAI[num1093]].active && Main.npc[(int)localAI[num1093]].type == 394)
									{
										Main.npc[(int)localAI[num1093]].netUpdate = true;
									}
								}
								netUpdate = true;
							}
							if (flag64)
							{
								if (!Main.expertMode)
								{
									Main.npc[num1088].ai[0] = 3f;
									Main.npc[num1088].ai[1] = 0f;
									Main.npc[num1088].ai[2] = 0f;
									Main.npc[num1088].ai[3] = 0f;
									Main.npc[num1088].netUpdate = true;
								}
								else
								{
									Main.npc[num1088].ai[0] = 1f;
									Main.npc[num1088].ai[1] = 0f;
									Main.npc[num1088].ai[2] = 0f;
									Main.npc[num1088].ai[3] = 0f;
									Main.npc[num1088].netUpdate = true;
								}
							}
						}
					}
				}
				else if (type == 393)
				{
					int num1094 = (int)this.ai[0];
					if (Main.npc[num1094].active && Main.npc[num1094].type == 395)
					{
						DiscourageDespawn(60);
						num1082 = num1094;
						vector127 = Vector2.UnitY * 29f + ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 60f;
						vector127 *= Main.npc[num1094].scale;
						float num1095 = Main.npc[num1094].rotation;
						vector127 = vector127.RotatedBy(num1095);
						rotation = num1095;
					}
				}
				else if (type == 394)
				{
					int num1096 = (int)this.ai[0];
					if (Main.npc[num1096].active && Main.npc[num1096].type == 395)
					{
						DiscourageDespawn(60);
						num1082 = num1096;
						vector127 = Vector2.UnitY * -13f + ((this.ai[1] == 1f) ? Vector2.UnitX : (-Vector2.UnitX)) * 49f;
						vector127 *= Main.npc[num1096].scale;
						float num1097 = Main.npc[num1096].rotation;
						vector127 = vector127.RotatedBy(num1097);
						rotation = num1097;
						num1083 = ((this.ai[1] == 1f) ? 1 : (-1));
					}
				}
				else if (type == 492)
				{
					int num1098 = (int)this.ai[0];
					if (Main.npc[num1098].active && Main.npc[num1098].type == 491)
					{
						DiscourageDespawn(60);
						num1082 = num1098;
						vector127 = new Vector2((-122f + 68f * this.ai[1]) * (float)((Main.npc[num1098].spriteDirection != 1) ? 1 : (-1)), -6f);
						vector127 *= Main.npc[num1098].scale;
						float num1099 = Main.npc[num1098].rotation;
						vector127 = vector127.RotatedBy(num1099);
						rotation = num1099;
					}
				}
				if (num1082 != -1)
				{
					NPC nPC2 = Main.npc[num1082];
					base.velocity = Vector2.Zero;
					base.position = nPC2.Center;
					base.position.X -= width / 2;
					base.position.Y -= height / 2;
					base.position += vector127;
					gfxOffY = nPC2.gfxOffY;
					base.direction = nPC2.direction;
					if (num1083 == 0)
					{
						spriteDirection = nPC2.spriteDirection;
					}
					else
					{
						spriteDirection = num1083;
					}
					if (type == 390)
					{
						timeLeft = nPC2.timeLeft;
						base.velocity = nPC2.velocity;
						target = nPC2.target;
						if (this.ai[1] < 60f)
						{
							this.ai[1]++;
						}
						if (justHit)
						{
							this.ai[1] = -30f;
						}
						int num1100 = 438;
						int num1101 = 30;
						float num1102 = 7f;
						if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							Vector2 vector128 = Main.player[target].Center - base.Center;
							Vector2 vector129 = Vector2.Normalize(vector128);
							float num1103 = vector128.Length();
							float num1104 = 700f;
							if (type == 214)
							{
								num1104 = 550f;
							}
							if (type == 215)
							{
								num1104 = 800f;
							}
							if (num1103 < num1104)
							{
								if (this.ai[1] == 60f && Math.Sign(vector128.X) == base.direction)
								{
									this.ai[1] = -60f;
									Vector2 center10 = Main.player[target].Center;
									Vector2 value7 = base.Center - Vector2.UnitY * 4f;
									Vector2 vector130 = center10 - value7;
									vector130.X += Main.rand.Next(-50, 51);
									vector130.Y += Main.rand.Next(-50, 51);
									vector130.X *= (float)Main.rand.Next(80, 121) * 0.01f;
									vector130.Y *= (float)Main.rand.Next(80, 121) * 0.01f;
									vector130.Normalize();
									if (float.IsNaN(vector130.X) || float.IsNaN(vector130.Y))
									{
										vector130 = -Vector2.UnitY;
									}
									vector130 *= num1102;
									Projectile.NewProjectile(value7.X, value7.Y, vector130.X, vector130.Y, num1100, num1101, 0f, Main.myPlayer);
									netUpdate = true;
								}
								else
								{
									float num1105 = this.ai[2];
									base.velocity.X *= 0.5f;
									this.ai[2] = 3f;
									if (Math.Abs(vector129.Y) > Math.Abs(vector129.X) * 2f)
									{
										if (vector129.Y > 0f)
										{
											this.ai[2] = 1f;
										}
										else
										{
											this.ai[2] = 5f;
										}
									}
									else if (Math.Abs(vector129.X) > Math.Abs(vector129.Y) * 2f)
									{
										this.ai[2] = 3f;
									}
									else if (vector129.Y > 0f)
									{
										this.ai[2] = 2f;
									}
									else
									{
										this.ai[2] = 4f;
									}
									if (this.ai[2] != num1105)
									{
										netUpdate = true;
									}
								}
							}
						}
					}
					if (type == 492)
					{
						timeLeft = nPC2.timeLeft;
						base.velocity = nPC2.velocity;
						if (this.ai[3] < 240f)
						{
							this.ai[3]++;
						}
						if (this.ai[3] == 2f)
						{
							TargetClosest(faceTarget: false);
						}
						if (Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							Vector2 vector131 = Main.player[target].Center - base.Center;
							Vector2 vector132 = Vector2.Normalize(vector131);
							if (this.ai[3] >= 240f)
							{
								this.ai[3] = 0f;
								Vector2 center11 = Main.player[target].Center;
								Vector2 center12 = base.Center;
								Vector2 vector133 = Vector2.Normalize(center11 - center12);
								if (float.IsNaN(vector133.X) || float.IsNaN(vector133.Y))
								{
									vector133 = Vector2.UnitY;
								}
								vector133 *= 14f;
								vector133 += Vector2.UnitY * -5f;
								if (Main.netMode != 1)
								{
									Projectile.NewProjectile(center12.X, center12.Y, vector133.X, vector133.Y, 240, 30, 0f, Main.myPlayer);
								}
								netUpdate = true;
							}
							else
							{
								float num1106 = this.ai[2];
								float[] array3 = new float[8];
								for (int num1107 = 0; num1107 < array3.Length; num1107++)
								{
									array3[num1107] = Vector2.Distance(base.Center + Vector2.UnitY.RotatedBy((float)num1107 * (-(float)Math.PI / 4f)) * 50f, Main.player[target].Center);
								}
								int num1108 = 0;
								for (int num1109 = 1; num1109 < array3.Length; num1109++)
								{
									if (array3[num1108] > array3[num1109])
									{
										num1108 = num1109;
									}
								}
								this.ai[2] = num1108 + 1;
								if (spriteDirection == 1)
								{
									this.ai[2] = 9f - this.ai[2];
								}
								if (this.ai[2] != num1106)
								{
									netUpdate = true;
								}
							}
						}
						else
						{
							if (this.ai[2] != 0f)
							{
								netUpdate = true;
							}
							this.ai[2] = 0f;
						}
					}
					if (type == 394)
					{
						timeLeft = nPC2.timeLeft;
						int attackDamage_ForProjectiles9 = GetAttackDamage_ForProjectiles(50f, 37f);
						this.ai[3] = nPC2.ai[3];
						float num1110 = 440f;
						float num1111 = 140f;
						if (this.ai[3] >= num1110 && this.ai[3] < num1110 + num1111)
						{
							float num1112 = this.ai[3] - num1110;
							if (num1112 % 20f == 0f)
							{
								if (Main.netMode != 1)
								{
									Vector2 spinningpoint2 = num1083 * Vector2.UnitX;
									spinningpoint2 = spinningpoint2.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
									spinningpoint2 *= 8f;
									Vector2 vector134 = num1083 * Vector2.UnitX * 36f + base.Center + Vector2.UnitY * 8f;
									Projectile.NewProjectile(vector134.X, vector134.Y, spinningpoint2.X, spinningpoint2.Y, 448, attackDamage_ForProjectiles9, 0f, Main.myPlayer, 0f, 20f);
								}
								SoundEngine.PlaySound(SoundID.Item39, base.Center);
							}
						}
					}
					if (type == 393)
					{
						timeLeft = nPC2.timeLeft;
						int attackDamage_ForProjectiles10 = GetAttackDamage_ForProjectiles(35f, 30f);
						this.ai[3] = nPC2.ai[3];
						float num1113 = 280f;
						float num1114 = 140f;
						bool flag65 = this.ai[3] >= num1113 && this.ai[3] < num1113 + num1114;
						if (!flag65)
						{
							TargetClosest(faceTarget: false);
							Player player4 = Main.player[target];
							Vector2 v = player4.Center - base.Center;
							if (v.Y < 0f)
							{
								v.Y = 0f;
							}
							v.Normalize();
							if (float.IsNaN(v.X) || float.IsNaN(v.Y))
							{
								v = Vector2.UnitY;
							}
							this.ai[2] = v.ToRotation();
						}
						if (flag65)
						{
							float num1115 = this.ai[3] - num1113;
							if (num1115 % 6f == 0f)
							{
								if (Main.netMode != 1)
								{
									Vector2 spinningpoint3 = this.ai[2].ToRotationVector2();
									spinningpoint3 = spinningpoint3.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331 / 3.0);
									spinningpoint3 *= 16f;
									Vector2 vector135 = base.Center + spinningpoint3 * 1f;
									Projectile.NewProjectile(vector135.X, vector135.Y, spinningpoint3.X, spinningpoint3.Y, 449, attackDamage_ForProjectiles10, 0f, Main.myPlayer);
								}
								SoundEngine.PlaySound(SoundID.Item12, base.Center);
							}
						}
					}
					if (type != 392)
					{
						return;
					}
					timeLeft = nPC2.timeLeft;
					int attackDamage_ForProjectiles11 = GetAttackDamage_ForProjectiles(50f, 50f);
					this.ai[3] = nPC2.ai[3];
					float num1116 = 20f;
					float num1117 = 240f;
					if (this.ai[3] >= num1116 && this.ai[3] < num1116 + num1117 && nPC2.ai[0] == 0f)
					{
						float num1118 = this.ai[3] - num1116;
						if (num1118 == 0f)
						{
							if (Main.netMode != 1)
							{
								Vector2 center13 = base.Center;
								Projectile.NewProjectile(center13.X, center13.Y, 0f, 0f, 447, attackDamage_ForProjectiles11, 0f, Main.myPlayer, whoAmI + 1);
							}
							SoundEngine.PlaySound(SoundID.Item12, base.Center);
						}
					}
					bool flag66 = false;
					int maxValue4 = 1000;
					int maxValue5 = 1000;
					int num1119 = 450;
					int attackDamage_ForProjectiles12 = GetAttackDamage_ForProjectiles(30f, 25f);
					if (nPC2.ai[0] == 2f)
					{
						flag66 = true;
						maxValue5 = 120;
						maxValue4 = 120;
					}
					if (!flag66)
					{
						num1116 = 280f;
						num1117 = 120f;
						flag66 = flag66 || (this.ai[3] >= num1116 && this.ai[3] < num1116 + num1117);
						if (flag66)
						{
							maxValue5 = 90;
							maxValue4 = 60;
						}
					}
					if (!flag66)
					{
						num1116 = 440f;
						num1117 = 140f;
						flag66 = flag66 || (this.ai[3] >= num1116 && this.ai[3] < num1116 + num1117);
						if (flag66)
						{
							maxValue5 = 60;
							maxValue4 = 90;
						}
					}
					bool flag67 = true;
					bool flag68 = true;
					bool flag69 = true;
					bool flag70 = true;
					if (Main.npc[(int)localAI[0]].active && Main.npc[(int)localAI[0]].type == 393)
					{
						flag67 = false;
					}
					if (Main.npc[(int)localAI[1]].active && Main.npc[(int)localAI[1]].type == 393)
					{
						flag68 = false;
					}
					if (Main.npc[(int)localAI[2]].active && Main.npc[(int)localAI[2]].type == 394)
					{
						flag69 = false;
					}
					if (Main.npc[(int)localAI[3]].active && Main.npc[(int)localAI[3]].type == 394)
					{
						flag70 = false;
					}
					if (flag66)
					{
						bool flag71 = true;
						if (flag67 && Main.rand.Next(maxValue4) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint4 = new Vector2(-1f * (float)Main.rand.NextDouble() * 3f, 1f);
								spinningpoint4 = spinningpoint4.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
								spinningpoint4 *= 3f;
								Vector2 vector136 = -1f * Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(30, 45);
								Projectile.NewProjectile(vector136.X, vector136.Y, spinningpoint4.X, spinningpoint4.Y, num1119, attackDamage_ForProjectiles12, 0f, Main.myPlayer);
							}
							SoundEngine.PlaySound(SoundID.Item39, base.Center);
						}
						if (flag68 && Main.rand.Next(maxValue4) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint5 = new Vector2(1f * (float)Main.rand.NextDouble() * 3f, 1f);
								spinningpoint5 = spinningpoint5.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
								spinningpoint5 *= 3f;
								Vector2 vector137 = 1f * Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(30, 45);
								Projectile.NewProjectile(vector137.X, vector137.Y, spinningpoint5.X, spinningpoint5.Y, num1119, attackDamage_ForProjectiles12, 0f, Main.myPlayer);
							}
							SoundEngine.PlaySound(SoundID.Item39, base.Center);
						}
					}
					if (flag66)
					{
						bool flag72 = true;
						if (flag69 && Main.rand.Next(maxValue5) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint6 = new Vector2(-1f * (float)Main.rand.NextDouble() * 2f, -1f);
								spinningpoint6 = spinningpoint6.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
								spinningpoint6 *= 3f;
								Vector2 vector138 = -1f * Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10);
								Projectile.NewProjectile(vector138.X, vector138.Y, spinningpoint6.X, spinningpoint6.Y, num1119, attackDamage_ForProjectiles12, 0f, Main.myPlayer);
							}
							SoundEngine.PlaySound(SoundID.Item39, base.Center);
						}
						if (flag70 && Main.rand.Next(maxValue5) == 0)
						{
							if (Main.netMode != 1)
							{
								Vector2 spinningpoint7 = new Vector2(1f * (float)Main.rand.NextDouble() * 2f, -1f);
								spinningpoint7 = spinningpoint7.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
								spinningpoint7 *= 3f;
								Vector2 vector139 = 1f * Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10);
								Projectile.NewProjectile(vector139.X, vector139.Y, spinningpoint7.X, spinningpoint7.Y, num1119, attackDamage_ForProjectiles12, 0f, Main.myPlayer);
							}
							SoundEngine.PlaySound(SoundID.Item39, base.Center);
						}
					}
					if (flag67 && Main.rand.Next(8) == 0)
					{
						int num1120 = Dust.NewDust(-1f * Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(15, 30), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1120].velocity = new Vector2(-1f * (float)Main.rand.NextDouble() * 3f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
						Dust dust = Main.dust[num1120];
						dust.velocity *= 0.5f;
						Main.dust[num1120].velocity.Y = 0f - Math.Abs(Main.dust[num1120].velocity.Y);
					}
					if (flag68 && Main.rand.Next(8) == 0)
					{
						int num1121 = Dust.NewDust(Vector2.UnitX * Main.rand.Next(50, 70) + base.Center + Vector2.UnitY * Main.rand.Next(15, 30), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1121].velocity = new Vector2((float)Main.rand.NextDouble() * 3f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
						Dust dust = Main.dust[num1121];
						dust.velocity *= 0.5f;
						Main.dust[num1121].velocity.Y = 0f - Math.Abs(Main.dust[num1121].velocity.Y);
					}
					if (flag69 && Main.rand.Next(8) == 0)
					{
						int num1122 = Dust.NewDust(-1f * Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1122].velocity = new Vector2(-1f * (float)Main.rand.NextDouble() * 2f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
						Dust dust = Main.dust[num1122];
						dust.velocity *= 0.5f;
						Main.dust[num1122].velocity.Y = 0f - Math.Abs(Main.dust[num1122].velocity.Y);
					}
					if (flag70 && Main.rand.Next(8) == 0)
					{
						int num1123 = Dust.NewDust(Vector2.UnitX * Main.rand.Next(30, 60) + base.Center + Vector2.UnitY * Main.rand.Next(-30, -10), 4, 16, (Main.rand.Next(4) != 0) ? 31 : 228, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num1123].velocity = new Vector2((float)Main.rand.NextDouble() * 2f, 1f).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
						Dust dust = Main.dust[num1123];
						dust.velocity *= 0.5f;
						Main.dust[num1123].velocity.Y = 0f - Math.Abs(Main.dust[num1123].velocity.Y);
					}
				}
				else if (type == 390)
				{
					Transform(382);
				}
				else if (type == 416)
				{
					Transform(518);
				}
				else
				{
					life = 0;
					HitEffect();
					active = false;
				}
			}
			else if (aiStyle == 76)
			{
				if (localAI[3] == 0f && Main.netMode != 1 && type == 395)
				{
					localAI[3] = 1f;
					int[] array4 = new int[4];
					int num1124 = 0;
					for (int num1125 = 0; num1125 < 2; num1125++)
					{
						int num1126 = NewNPC((int)base.Center.X + num1125 * 300 - 150, (int)base.Center.Y, 393, whoAmI);
						Main.npc[num1126].ai[1] = num1125;
						Main.npc[num1126].netUpdate = true;
						array4[num1124++] = num1126;
					}
					for (int num1127 = 0; num1127 < 2; num1127++)
					{
						int num1128 = NewNPC((int)base.Center.X + num1127 * 300 - 150, (int)base.Center.Y, 394, whoAmI);
						Main.npc[num1128].ai[1] = num1127;
						Main.npc[num1128].netUpdate = true;
						array4[num1124++] = num1128;
					}
					int num1129 = NewNPC((int)base.Center.X, (int)base.Center.Y, 392, whoAmI);
					Main.npc[num1129].ai[0] = whoAmI;
					Main.npc[num1129].netUpdate = true;
					for (int num1130 = 0; num1130 < 4; num1130++)
					{
						Main.npc[array4[num1130]].ai[0] = whoAmI;
					}
					for (int num1131 = 0; num1131 < 4; num1131++)
					{
						Main.npc[num1129].localAI[num1131] = array4[num1131];
					}
				}
				if (this.ai[0] == 3f)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
					return;
				}
				Vector2 center14 = base.Center;
				Player player5 = Main.player[target];
				if (target < 0 || target == 255 || player5.dead || !player5.active)
				{
					TargetClosest();
					player5 = Main.player[target];
					netUpdate = true;
				}
				if ((player5.dead || Vector2.Distance(player5.Center, center14) > 5600f) && this.ai[0] != 1f)
				{
					if (this.ai[0] == 0f)
					{
						this.ai[0] = -1f;
					}
					if (this.ai[0] == 2f)
					{
						this.ai[0] = -2f;
					}
					netUpdate = true;
				}
				if (this.ai[0] == -1f || this.ai[0] == -2f)
				{
					base.velocity.Y -= 0.4f;
					EncourageDespawn(10);
					if (!player5.dead)
					{
						timeLeft = 300;
						if (this.ai[0] == -2f)
						{
							this.ai[0] = 2f;
						}
						if (this.ai[0] == 0f)
						{
							this.ai[0] = 0f;
						}
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 0f)
				{
					int num1132 = 0;
					int num1133 = 0;
					if (this.ai[3] >= 580f)
					{
						num1132 = 0;
					}
					else if (this.ai[3] >= 440f)
					{
						num1132 = 5;
					}
					else if (this.ai[3] >= 420f)
					{
						num1132 = 4;
					}
					else if (this.ai[3] >= 280f)
					{
						num1132 = 3;
					}
					else if (this.ai[3] >= 260f)
					{
						num1132 = 2;
					}
					else if (this.ai[3] >= 20f)
					{
						num1132 = 1;
					}
					this.ai[3]++;
					if (this.ai[3] >= 600f)
					{
						this.ai[3] = 0f;
					}
					num1133 = num1132;
					if (this.ai[3] >= 580f)
					{
						num1132 = 0;
					}
					else if (this.ai[3] >= 440f)
					{
						num1132 = 5;
					}
					else if (this.ai[3] >= 420f)
					{
						num1132 = 4;
					}
					else if (this.ai[3] >= 280f)
					{
						num1132 = 3;
					}
					else if (this.ai[3] >= 260f)
					{
						num1132 = 2;
					}
					else if (this.ai[3] >= 20f)
					{
						num1132 = 1;
					}
					if (num1132 != num1133)
					{
						if (num1132 == 0)
						{
							this.ai[2] = 0f;
						}
						if (num1132 == 1)
						{
							this.ai[2] = ((Math.Sign((player5.Center - center14).X) == 1) ? 1 : (-1));
						}
						if (num1132 == 2)
						{
							this.ai[2] = 0f;
						}
						netUpdate = true;
					}
					if (num1132 == 0)
					{
						if (this.ai[2] == 0f)
						{
							this.ai[2] = -600 * Math.Sign((center14 - player5.Center).X);
						}
						Vector2 vector140 = player5.Center + new Vector2(this.ai[2], -250f) - center14;
						if (vector140.Length() < 50f)
						{
							this.ai[3] = 19f;
						}
						else
						{
							vector140.Normalize();
							base.velocity = Vector2.Lerp(base.velocity, vector140 * 16f, 0.1f);
						}
					}
					if (num1132 == 1)
					{
						int num1134 = (int)base.Center.X / 16;
						int num1135 = (int)(base.position.Y + (float)height) / 16;
						int num1136 = 0;
						if (Main.tile[num1134, num1135].nactive() && Main.tileSolid[Main.tile[num1134, num1135].type] && !Main.tileSolidTop[Main.tile[num1134, num1135].type])
						{
							num1136 = 1;
						}
						else
						{
							for (; num1136 < 150 && num1135 + num1136 < Main.maxTilesY; num1136++)
							{
								int num1137 = num1135 + num1136;
								if (Main.tile[num1134, num1137].nactive() && Main.tileSolid[Main.tile[num1134, num1137].type] && !Main.tileSolidTop[Main.tile[num1134, num1137].type])
								{
									num1136--;
									break;
								}
							}
						}
						float num1138 = num1136 * 16;
						float num1139 = 250f;
						if (num1138 < num1139)
						{
							float num1140 = -4f;
							if (0f - num1140 > num1138)
							{
								num1140 = 0f - num1138;
							}
							base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1140, 0.05f);
						}
						else
						{
							base.velocity.Y *= 0.95f;
						}
						base.velocity.X = 3.5f * this.ai[2];
					}
					switch (num1132)
					{
					case 2:
					{
						if (this.ai[2] == 0f)
						{
							this.ai[2] = 300 * Math.Sign((center14 - player5.Center).X);
						}
						Vector2 vector141 = player5.Center + new Vector2(this.ai[2], -170f) - center14;
						int num1149 = (int)base.Center.X / 16;
						int num1150 = (int)(base.position.Y + (float)height) / 16;
						int num1151 = 0;
						if (Main.tile[num1149, num1150].nactive() && Main.tileSolid[Main.tile[num1149, num1150].type] && !Main.tileSolidTop[Main.tile[num1149, num1150].type])
						{
							num1151 = 1;
						}
						else
						{
							for (; num1151 < 150 && num1150 + num1151 < Main.maxTilesY; num1151++)
							{
								int num1152 = num1150 + num1151;
								if (Main.tile[num1149, num1152].nactive() && Main.tileSolid[Main.tile[num1149, num1152].type] && !Main.tileSolidTop[Main.tile[num1149, num1152].type])
								{
									num1151--;
									break;
								}
							}
						}
						float num1153 = num1151 * 16;
						float num1154 = 170f;
						if (num1153 < num1154)
						{
							vector141.Y -= num1154 - num1153;
						}
						if (vector141.Length() < 70f)
						{
							this.ai[3] = 279f;
							break;
						}
						vector141.Normalize();
						base.velocity = Vector2.Lerp(base.velocity, vector141 * 20f, 0.1f);
						break;
					}
					case 3:
					{
						float num1141 = 0.85f;
						int num1142 = (int)base.Center.X / 16;
						int num1143 = (int)(base.position.Y + (float)height) / 16;
						int num1144 = 0;
						if (Main.tile[num1142, num1143].nactive() && Main.tileSolid[Main.tile[num1142, num1143].type] && !Main.tileSolidTop[Main.tile[num1142, num1143].type])
						{
							num1144 = 1;
						}
						else
						{
							for (; num1144 < 150 && num1143 + num1144 < Main.maxTilesY; num1144++)
							{
								int num1145 = num1143 + num1144;
								if (Main.tile[num1142, num1145].nactive() && Main.tileSolid[Main.tile[num1142, num1145].type] && !Main.tileSolidTop[Main.tile[num1142, num1145].type])
								{
									num1144--;
									break;
								}
							}
						}
						float num1146 = num1144 * 16;
						float num1147 = 170f;
						if (num1146 < num1147)
						{
							float num1148 = -4f;
							if (0f - num1148 > num1146)
							{
								num1148 = 0f - num1146;
							}
							base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1148, 0.05f);
						}
						else
						{
							base.velocity.Y *= num1141;
						}
						base.velocity.X *= num1141;
						break;
					}
					}
					switch (num1132)
					{
					case 4:
					{
						Vector2 vector142 = player5.Center + new Vector2(0f, -250f) - center14;
						if (vector142.Length() < 50f)
						{
							this.ai[3] = 439f;
							break;
						}
						vector142.Normalize();
						base.velocity = Vector2.Lerp(base.velocity, vector142 * 16f, 0.1f);
						break;
					}
					case 5:
						base.velocity *= 0.85f;
						break;
					}
				}
				else if (this.ai[0] == 1f)
				{
					dontTakeDamage = false;
					base.velocity *= 0.96f;
					float num1155 = 150f;
					this.ai[1]++;
					if (this.ai[1] >= num1155)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						rotation = 0f;
						netUpdate = true;
					}
					else if (this.ai[1] < 40f)
					{
						rotation = Vector2.UnitY.RotatedBy(this.ai[1] / 40f * ((float)Math.PI * 2f)).Y * 0.2f;
					}
					else if (this.ai[1] < 80f)
					{
						rotation = Vector2.UnitY.RotatedBy(this.ai[1] / 20f * ((float)Math.PI * 2f)).Y * 0.3f;
					}
					else if (this.ai[1] < 120f)
					{
						rotation = Vector2.UnitY.RotatedBy(this.ai[1] / 10f * ((float)Math.PI * 2f)).Y * 0.4f;
					}
					else
					{
						rotation = (this.ai[1] - 120f) / 30f * ((float)Math.PI * 2f);
					}
				}
				else if (this.ai[0] == 2f)
				{
					int num1156 = 80;
					float num1157 = 3600f;
					float num1158 = 120f;
					float num1159 = 60f;
					int num1160 = 0;
					if (this.ai[3] % num1158 >= num1159)
					{
						num1160 = 1;
					}
					int num1161 = num1160;
					num1160 = 0;
					this.ai[3]++;
					if (this.ai[3] % num1158 >= num1159)
					{
						num1160 = 1;
					}
					if (num1160 != num1161)
					{
						if (num1160 == 1)
						{
							this.ai[2] = ((Math.Sign((player5.Center - center14).X) == 1) ? 1 : (-1));
							if (Main.netMode != 1)
							{
								Vector2 center15 = base.Center;
								Projectile.NewProjectile(center15.X, center15.Y, 0f, 0f, 447, num1156, 0f, Main.myPlayer, whoAmI + 1);
							}
							SoundEngine.PlaySound(SoundID.Item12, base.Center);
						}
						netUpdate = true;
					}
					if (this.ai[3] >= num1157)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					else if (num1160 == 0)
					{
						Vector2 vector143 = player5.Center + new Vector2(this.ai[2] * 350f, -250f) - center14;
						vector143.Normalize();
						base.velocity = Vector2.Lerp(base.velocity, vector143 * 16f, 0.1f);
					}
					else
					{
						int num1162 = (int)base.Center.X / 16;
						int num1163 = (int)(base.position.Y + (float)height) / 16;
						int num1164 = 0;
						if (Main.tile[num1162, num1163].nactive() && Main.tileSolid[Main.tile[num1162, num1163].type] && !Main.tileSolidTop[Main.tile[num1162, num1163].type])
						{
							num1164 = 1;
						}
						else
						{
							for (; num1164 < 150 && num1163 + num1164 < Main.maxTilesY; num1164++)
							{
								int num1165 = num1163 + num1164;
								if (Main.tile[num1162, num1165].nactive() && Main.tileSolid[Main.tile[num1162, num1165].type] && !Main.tileSolidTop[Main.tile[num1162, num1165].type])
								{
									num1164--;
									break;
								}
							}
						}
						float num1166 = num1164 * 16;
						float num1167 = 250f;
						if (num1166 < num1167)
						{
							float num1168 = -4f;
							if (0f - num1168 > num1166)
							{
								num1168 = 0f - num1166;
							}
							base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1168, 0.05f);
						}
						else
						{
							base.velocity.Y *= 0.95f;
						}
						base.velocity.X = 8f * this.ai[2];
					}
					rotation = 0f;
				}
				bool flag73 = false;
				if (base.position.Y < -100f)
				{
					flag73 = true;
				}
				if (base.position.X < -100f)
				{
					flag73 = true;
				}
				if (base.position.Y > (float)(Main.maxTilesY * 16 + 100))
				{
					flag73 = true;
				}
				if (base.position.X > (float)(Main.maxTilesX * 16 + 100))
				{
					flag73 = true;
				}
				if (flag73)
				{
					base.position = Vector2.Clamp(base.position, new Vector2(-100f), new Vector2(100f) + new Vector2(Main.maxTilesX, Main.maxTilesY) * 16f);
					active = false;
					netUpdate = true;
				}
			}
			else if (aiStyle == 77)
			{
				if (this.ai[0] != -1f && this.ai[0] != 2f && Main.rand.Next(200) == 0)
				{
					SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, Main.rand.Next(93, 100));
				}
				if (localAI[3] == 0f)
				{
					netUpdate = true;
					localAI[3] = 1f;
					this.ai[0] = -1f;
				}
				if (this.ai[0] == -2f)
				{
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] == 30f)
					{
						SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 92);
					}
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
					}
					if (this.ai[1] == 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						if (Main.netMode != 1 && type == 398)
						{
							this.ai[2] = Main.rand.Next(3);
							this.ai[2] = 0f;
							netUpdate = true;
						}
					}
				}
				if (this.ai[0] == -1f)
				{
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] == 30f)
					{
						SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 92);
					}
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 30f, base.Center);
					}
					if (this.ai[1] == 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 0f;
						if (Main.netMode != 1 && type == 398)
						{
							this.ai[2] = Main.rand.Next(3);
							this.ai[2] = 0f;
							netUpdate = true;
							int[] array5 = new int[3];
							int num1169 = 0;
							for (int num1170 = 0; num1170 < 2; num1170++)
							{
								int num1171 = NewNPC((int)base.Center.X + num1170 * 800 - 400, (int)base.Center.Y - 100, 397, whoAmI);
								Main.npc[num1171].ai[2] = num1170;
								Main.npc[num1171].netUpdate = true;
								array5[num1169++] = num1171;
							}
							int num1172 = NewNPC((int)base.Center.X, (int)base.Center.Y - 400, 396, whoAmI);
							Main.npc[num1172].netUpdate = true;
							array5[num1169++] = num1172;
							for (int num1173 = 0; num1173 < 3; num1173++)
							{
								Main.npc[array5[num1173]].ai[3] = whoAmI;
							}
							for (int num1174 = 0; num1174 < 3; num1174++)
							{
								localAI[num1174] = array5[num1174];
							}
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					dontTakeDamage = true;
					TargetClosest(faceTarget: false);
					Vector2 value8 = Main.player[target].Center - base.Center + new Vector2(0f, 130f);
					if (value8.Length() > 20f)
					{
						Vector2 desiredVelocity = Vector2.Normalize(value8 - base.velocity) * 8f;
						Vector2 velocity2 = base.velocity;
						SimpleFlyMovement(desiredVelocity, 0.5f);
						base.velocity = Vector2.Lerp(base.velocity, velocity2, 0.5f);
					}
					if (Main.netMode != 1)
					{
						bool flag74 = false;
						if (localAI[0] < 0f || localAI[1] < 0f || localAI[2] < 0f)
						{
							flag74 = true;
						}
						else if (!Main.npc[(int)localAI[0]].active || Main.npc[(int)localAI[0]].type != 397)
						{
							flag74 = true;
						}
						else if (!Main.npc[(int)localAI[1]].active || Main.npc[(int)localAI[1]].type != 397)
						{
							flag74 = true;
						}
						else if (!Main.npc[(int)localAI[2]].active || Main.npc[(int)localAI[2]].type != 396)
						{
							flag74 = true;
						}
						if (flag74)
						{
							life = 0;
							HitEffect();
							active = false;
						}
						bool flag75 = true;
						if (Main.npc[(int)localAI[0]].ai[0] != -2f)
						{
							flag75 = false;
						}
						if (Main.npc[(int)localAI[1]].ai[0] != -2f)
						{
							flag75 = false;
						}
						if (Main.npc[(int)localAI[2]].ai[0] != -2f)
						{
							flag75 = false;
						}
						if (flag75)
						{
							this.ai[0] = 1f;
							dontTakeDamage = false;
							netUpdate = true;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					dontTakeDamage = false;
					TargetClosest(faceTarget: false);
					Vector2 value9 = Main.player[target].Center - base.Center + new Vector2(0f, 130f);
					if (value9.Length() > 20f)
					{
						Vector2 desiredVelocity2 = Vector2.Normalize(value9 - base.velocity) * 8f;
						Vector2 velocity3 = base.velocity;
						SimpleFlyMovement(desiredVelocity2, 0.5f);
						base.velocity = Vector2.Lerp(base.velocity, velocity3, 0.5f);
					}
				}
				else if (this.ai[0] == 2f)
				{
					dontTakeDamage = true;
					base.velocity = Vector2.Lerp(value2: new Vector2(base.direction, -0.5f), value1: base.velocity, amount: 0.98f);
					this.ai[1]++;
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 60f, base.Center);
					}
					if (this.ai[1] == 60f)
					{
						for (int num1175 = 0; num1175 < 1000; num1175++)
						{
							Projectile projectile = Main.projectile[num1175];
							if (projectile.active && (projectile.type == 456 || projectile.type == 462 || projectile.type == 455 || projectile.type == 452 || projectile.type == 454))
							{
								projectile.Kill();
							}
						}
						for (int num1176 = 0; num1176 < 200; num1176++)
						{
							NPC nPC3 = Main.npc[num1176];
							if (nPC3.active && nPC3.type == 400)
							{
								nPC3.HitEffect(0, 9999.0);
								nPC3.active = false;
							}
						}
					}
					if (this.ai[1] % 3f == 0f && this.ai[1] < 580f && this.ai[1] > 60f)
					{
						Vector2 vector144 = Utils.RandomVector2(Main.rand, -1f, 1f);
						if (vector144 != Vector2.Zero)
						{
							vector144.Normalize();
						}
						vector144 *= 20f + Main.rand.NextFloat() * 400f;
						bool flag76 = true;
						Vector2 vector145 = base.Center + vector144;
						Point point6 = vector145.ToTileCoordinates();
						if (!WorldGen.InWorld(point6.X, point6.Y))
						{
							flag76 = false;
						}
						if (flag76 && WorldGen.SolidTile(point6.X, point6.Y))
						{
							flag76 = false;
						}
						float num1177 = Main.rand.Next(6, 19);
						float num1178 = (float)Math.PI * 2f / num1177;
						float num1179 = (float)Math.PI * 2f * Main.rand.NextFloat();
						float scaleFactor5 = 1f + Main.rand.NextFloat() * 2f;
						float num1180 = 1f + Main.rand.NextFloat();
						float fadeIn = 0.4f + Main.rand.NextFloat();
						int num1181 = Utils.SelectRandom<int>(Main.rand, 31, 229);
						if (flag76)
						{
							MoonlordDeathDrama.AddExplosion(vector145);
							for (float num1182 = 0f; num1182 < num1177 * 2f; num1182++)
							{
								Dust dust6 = Main.dust[Dust.NewDust(vector145, 0, 0, 229)];
								dust6.noGravity = true;
								dust6.position = vector145;
								dust6.velocity = Vector2.UnitY.RotatedBy(num1179 + num1178 * num1182) * scaleFactor5 * (Main.rand.NextFloat() * 1.6f + 1.6f);
								dust6.fadeIn = fadeIn;
								dust6.scale = num1180;
							}
						}
						for (float num1183 = 0f; num1183 < this.ai[1] / 60f; num1183++)
						{
							Vector2 vector146 = Utils.RandomVector2(Main.rand, -1f, 1f);
							if (vector146 != Vector2.Zero)
							{
								vector146.Normalize();
							}
							vector146 *= 20f + Main.rand.NextFloat() * 800f;
							Vector2 vector147 = base.Center + vector146;
							Point point7 = vector147.ToTileCoordinates();
							bool flag77 = true;
							if (!WorldGen.InWorld(point7.X, point7.Y))
							{
								flag77 = false;
							}
							if (flag77 && WorldGen.SolidTile(point7.X, point7.Y))
							{
								flag77 = false;
							}
							if (flag77)
							{
								Dust dust7 = Main.dust[Dust.NewDust(vector147, 0, 0, num1181)];
								dust7.noGravity = true;
								dust7.position = vector147;
								dust7.velocity = -Vector2.UnitY * scaleFactor5 * (Main.rand.NextFloat() * 0.9f + 1.6f);
								dust7.fadeIn = fadeIn;
								dust7.scale = num1180;
							}
						}
					}
					if (this.ai[1] % 15f == 0f && this.ai[1] < 480f && this.ai[1] >= 90f && Main.netMode != 1)
					{
						Vector2 vector148 = Utils.RandomVector2(Main.rand, -1f, 1f);
						if (vector148 != Vector2.Zero)
						{
							vector148.Normalize();
						}
						vector148 *= 20f + Main.rand.NextFloat() * 400f;
						bool flag78 = true;
						Vector2 vec3 = base.Center + vector148;
						Point point8 = vec3.ToTileCoordinates();
						if (!WorldGen.InWorld(point8.X, point8.Y))
						{
							flag78 = false;
						}
						if (flag78 && WorldGen.SolidTile(point8.X, point8.Y))
						{
							flag78 = false;
						}
						if (flag78)
						{
							float num1184 = (float)(Main.rand.Next(4) < 2).ToDirectionInt() * ((float)Math.PI / 8f + (float)Math.PI / 4f * Main.rand.NextFloat());
							Vector2 vector149 = new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.5f - 0.5f).RotatedBy(num1184) * 6f;
							Projectile.NewProjectile(vec3.X, vec3.Y, vector149.X, vector149.Y, 622, 0, 0f, Main.myPlayer);
						}
					}
					if (this.ai[1] == 1f)
					{
						SoundEngine.PlaySound(SoundID.NPCDeath61, base.Center);
					}
					if (this.ai[1] >= 480f)
					{
						MoonlordDeathDrama.RequestLight((this.ai[1] - 480f) / 120f, base.Center);
					}
					if (this.ai[1] >= 600f)
					{
						life = 0;
						HitEffect(0, 1337.0);
						checkDead();
						return;
					}
				}
				else if (this.ai[0] == 3f)
				{
					dontTakeDamage = true;
					base.velocity = Vector2.Lerp(value2: new Vector2(base.direction, -0.5f), value1: base.velocity, amount: 0.98f);
					this.ai[1]++;
					if (this.ai[1] < 60f)
					{
						MoonlordDeathDrama.RequestLight(this.ai[1] / 40f, base.Center);
					}
					if (this.ai[1] == 40f)
					{
						for (int num1185 = 0; num1185 < 1000; num1185++)
						{
							Projectile projectile2 = Main.projectile[num1185];
							if (projectile2.active && (projectile2.type == 456 || projectile2.type == 462 || projectile2.type == 455 || projectile2.type == 452 || projectile2.type == 454))
							{
								projectile2.active = false;
								if (Main.netMode != 1)
								{
									NetMessage.SendData(27, -1, -1, null, num1185);
								}
							}
						}
						for (int num1186 = 0; num1186 < 200; num1186++)
						{
							NPC nPC4 = Main.npc[num1186];
							if (nPC4.active && nPC4.type == 400)
							{
								nPC4.active = false;
								if (Main.netMode != 1)
								{
									NetMessage.SendData(23, -1, -1, null, nPC4.whoAmI);
								}
							}
						}
						for (int num1187 = 0; num1187 < 600; num1187++)
						{
							Gore gore2 = Main.gore[num1187];
							if (gore2.active && gore2.type >= 619 && gore2.type <= 622)
							{
								gore2.active = false;
							}
						}
					}
					if (this.ai[1] >= 60f)
					{
						for (int num1188 = 0; num1188 < 200; num1188++)
						{
							NPC nPC5 = Main.npc[num1188];
							if (nPC5.active && (nPC5.type == 400 || nPC5.type == 397 || nPC5.type == 396))
							{
								nPC5.active = false;
								if (Main.netMode != 1)
								{
									NetMessage.SendData(23, -1, -1, null, nPC5.whoAmI);
								}
							}
						}
						active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(23, -1, -1, null, whoAmI);
						}
						LunarApocalypseIsUp = false;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(7);
						}
						return;
					}
				}
				bool flag79 = false;
				if (this.ai[0] == -2f || this.ai[0] == -1f || this.ai[0] == 2f || this.ai[0] == 3f)
				{
					flag79 = true;
				}
				if (Main.player[target].active && !Main.player[target].dead)
				{
					flag79 = true;
				}
				if (!flag79)
				{
					for (int num1189 = 0; num1189 < 255; num1189++)
					{
						if (Main.player[num1189].active && !Main.player[num1189].dead)
						{
							flag79 = true;
							break;
						}
					}
				}
				if (!flag79)
				{
					this.ai[0] = 3f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (!(this.ai[0] >= 0f) || !(this.ai[0] < 2f) || Main.netMode == 1 || !(Distance(Main.player[target].Center) > 2400f))
				{
					return;
				}
				this.ai[0] = -2f;
				netUpdate = true;
				Vector2 vector150 = Main.player[target].Center - Vector2.UnitY * 150f - base.Center;
				base.position += vector150;
				if (Main.npc[(int)localAI[0]].active)
				{
					NPC nPC = Main.npc[(int)localAI[0]];
					nPC.position += vector150;
					Main.npc[(int)localAI[0]].netUpdate = true;
				}
				if (Main.npc[(int)localAI[1]].active)
				{
					NPC nPC = Main.npc[(int)localAI[1]];
					nPC.position += vector150;
					Main.npc[(int)localAI[1]].netUpdate = true;
				}
				if (Main.npc[(int)localAI[2]].active)
				{
					NPC nPC = Main.npc[(int)localAI[2]];
					nPC.position += vector150;
					Main.npc[(int)localAI[2]].netUpdate = true;
				}
				for (int num1190 = 0; num1190 < 200; num1190++)
				{
					NPC nPC6 = Main.npc[num1190];
					if (nPC6.active && nPC6.type == 400)
					{
						NPC nPC = nPC6;
						nPC.position += vector150;
						nPC6.netUpdate = true;
					}
				}
			}
			else if (aiStyle == 78)
			{
				InitializeMoonLordAttacks();
				if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
				{
					life = 0;
					HitEffect();
					active = false;
				}
				bool flag80 = this.ai[2] == 0f;
				float num1191 = -flag80.ToDirectionInt();
				spriteDirection = (int)num1191;
				dontTakeDamage = frameCounter >= 21.0;
				Vector2 vector151 = new Vector2(30f, 66f);
				float num1192 = 0f;
				float num1193 = 0f;
				bool flag81 = true;
				int num1194 = 0;
				if (this.ai[0] != -2f)
				{
					float num1195 = this.ai[0];
					this.ai[1]++;
					int num1196 = (int)Main.npc[(int)this.ai[3]].ai[2];
					int num1197 = ((!flag80) ? 1 : 0);
					int num1198 = 0;
					int num1199 = 0;
					for (; num1198 < 5; num1198++)
					{
						num1193 = MoonLordAttacksArray[num1196, num1197, 1, num1198];
						if (!(num1193 + (float)num1199 <= this.ai[1]))
						{
							break;
						}
						num1199 += (int)num1193;
					}
					if (num1198 == 5)
					{
						num1198 = 0;
						this.ai[1] = 0f;
						num1193 = MoonLordAttacksArray[num1196, num1197, 1, num1198];
						num1199 = 0;
					}
					this.ai[0] = MoonLordAttacksArray[num1196, num1197, 0, num1198];
					num1192 = (int)this.ai[1] - num1199;
					if (this.ai[0] != num1195)
					{
						netUpdate = true;
					}
				}
				if (this.ai[0] == -2f)
				{
					damage = 80;
					num1194 = 0;
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] >= 32f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] < 0f)
					{
						this.ai[1] = 0f;
					}
					Vector2 center16 = Main.npc[(int)this.ai[3]].Center;
					Vector2 value12 = center16 + new Vector2(350f * num1191, -100f);
					Vector2 vector152 = value12 - base.Center;
					if (vector152.Length() > 20f)
					{
						vector152.Normalize();
						vector152 *= 6f;
						Vector2 velocity4 = base.velocity;
						if (vector152 != Vector2.Zero)
						{
							SimpleFlyMovement(vector152, 0.3f);
						}
						base.velocity = Vector2.Lerp(velocity4, base.velocity, 0.5f);
					}
				}
				else if (this.ai[0] == 0f)
				{
					num1194 = 3;
					localAI[1] -= 0.05f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					Vector2 center17 = Main.npc[(int)this.ai[3]].Center;
					Vector2 value13 = center17 + new Vector2(350f * num1191, -100f);
					Vector2 vector153 = value13 - base.Center;
					if (vector153.Length() > 20f)
					{
						vector153.Normalize();
						vector153 *= 6f;
						Vector2 velocity5 = base.velocity;
						if (vector153 != Vector2.Zero)
						{
							SimpleFlyMovement(vector153, 0.3f);
						}
						base.velocity = Vector2.Lerp(velocity5, base.velocity, 0.5f);
					}
				}
				else if (this.ai[0] == 1f)
				{
					num1194 = 0;
					int num1200 = 7;
					int num1201 = 4;
					if (num1192 >= (float)(num1200 * num1201 * 2))
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
					}
					else if (num1192 >= (float)(num1200 * num1201))
					{
						localAI[1] += 0.05f;
						if (localAI[1] > 0.75f)
						{
							localAI[1] = 0.75f;
						}
						float num1202 = (float)Math.PI * 2f * (num1192 % (float)(num1200 * num1201)) / (float)(num1200 * num1201) - (float)Math.PI / 2f;
						localAI[0] = new Vector2((float)Math.Cos(num1202) * vector151.X, (float)Math.Sin(num1202) * vector151.Y).ToRotation();
						if (num1192 % (float)num1201 == 0f)
						{
							Vector2 value14 = new Vector2(1f * (0f - num1191), 3f);
							Vector2 vector154 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector151 * localAI[1]);
							Vector2 vector155 = base.Center + Vector2.Normalize(vector154) * vector151.Length() * 0.4f + value14;
							Vector2 vector156 = Vector2.Normalize(vector154) * 8f;
							float ai = ((float)Math.PI * 2f * (float)Main.rand.NextDouble() - (float)Math.PI) / 30f + (float)Math.PI / 180f * num1191;
							Projectile.NewProjectile(vector155.X, vector155.Y, vector156.X, vector156.Y, 452, 30, 0f, Main.myPlayer, 0f, ai);
						}
					}
					else
					{
						localAI[1] += 0.02f;
						if (localAI[1] > 0.75f)
						{
							localAI[1] = 0.75f;
						}
						float num1203 = (float)Math.PI * 2f * (num1192 % (float)(num1200 * num1201)) / (float)(num1200 * num1201) - (float)Math.PI / 2f;
						localAI[0] = new Vector2((float)Math.Cos(num1203) * vector151.X, (float)Math.Sin(num1203) * vector151.Y).ToRotation();
					}
				}
				else if (this.ai[0] == 2f)
				{
					localAI[1] -= 0.05f;
					if (localAI[1] < 0f)
					{
						localAI[1] = 0f;
					}
					Vector2 center18 = Main.npc[(int)this.ai[3]].Center;
					Vector2 value15 = new Vector2(220f * num1191, -60f) + center18;
					value15 += new Vector2(num1191 * 100f, -50f);
					Vector2 value16 = new Vector2(400f * num1191, -60f);
					if (num1192 < 30f)
					{
						Vector2 vector157 = value15 - base.Center;
						if (vector157 != Vector2.Zero)
						{
							Vector2 vector158 = vector157;
							vector158.Normalize();
							base.velocity = Vector2.SmoothStep(base.velocity, vector158 * Math.Min(8f, vector157.Length()), 0.2f);
						}
					}
					else if (num1192 < 210f)
					{
						num1194 = 1;
						int num1204 = (int)num1192 - 30;
						if (num1204 % 30 == 0 && Main.netMode != 1)
						{
							Vector2 vector159 = new Vector2(5f * num1191, -8f);
							int num1205 = num1204 / 30;
							vector159.X += ((float)num1205 - 3.5f) * num1191 * 3f;
							vector159.Y += ((float)num1205 - 4.5f) * 1f;
							vector159 *= 1.2f;
							int num1206 = Projectile.NewProjectile(base.Center.X, base.Center.Y, vector159.X, vector159.Y, 454, 50, 1f, Main.myPlayer, 0f, whoAmI);
						}
						Vector2 vector160 = Vector2.SmoothStep(value15, value15 + value16, (num1192 - 30f) / 180f) - base.Center;
						if (vector160 != Vector2.Zero)
						{
							Vector2 vector161 = vector160;
							vector161.Normalize();
							base.velocity = Vector2.Lerp(base.velocity, vector161 * Math.Min(20f, vector160.Length()), 0.5f);
						}
					}
					else if (num1192 < 282f)
					{
						num1194 = 0;
						base.velocity *= 0.9f;
					}
					else if (num1192 < 287f)
					{
						num1194 = 1;
						base.velocity *= 0.9f;
					}
					else if (num1192 < 292f)
					{
						num1194 = 2;
						base.velocity *= 0.9f;
					}
					else if (num1192 < 300f)
					{
						num1194 = 3;
						if (num1192 == 292f && Main.netMode != 1)
						{
							int num1207 = Player.FindClosest(base.position, width, height);
							Vector2 velocity6 = Vector2.Normalize(Main.player[num1207].Center - (base.Center + Vector2.UnitY * -350f));
							if (float.IsNaN(velocity6.X) || float.IsNaN(velocity6.Y))
							{
								velocity6 = Vector2.UnitY;
							}
							velocity6 *= 12f;
							for (int num1208 = 0; num1208 < 1000; num1208++)
							{
								Projectile projectile3 = Main.projectile[num1208];
								if (projectile3.active && projectile3.type == 454 && projectile3.ai[1] == (float)whoAmI && projectile3.ai[0] != -1f)
								{
									projectile3.ai[0] = -1f;
									projectile3.velocity = velocity6;
									projectile3.netUpdate = true;
								}
							}
						}
						Vector2 vector162 = Vector2.SmoothStep(value15, value15 + value16, 1f - (num1192 - 270f) / 30f) - base.Center;
						if (vector162 != Vector2.Zero)
						{
							Vector2 vector163 = vector162;
							vector163.Normalize();
							base.velocity = Vector2.Lerp(base.velocity, vector163 * Math.Min(14f, vector162.Length()), 0.1f);
						}
					}
					else
					{
						num1194 = 3;
						Vector2 vector164 = value15 - base.Center;
						if (vector164 != Vector2.Zero)
						{
							Vector2 vector165 = vector164;
							vector165.Normalize();
							base.velocity = Vector2.SmoothStep(base.velocity, vector165 * Math.Min(8f, vector164.Length()), 0.2f);
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					if (num1192 == 0f)
					{
						TargetClosest(faceTarget: false);
						netUpdate = true;
					}
					Vector2 v2 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v2.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					if (num1192 == num1193 - 35f)
					{
						SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 6);
					}
					if ((num1192 == num1193 - 14f || num1192 == num1193 - 7f || num1192 == num1193) && Main.netMode != 1)
					{
						Vector2 vector166 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector151 * localAI[1]);
						Vector2 vector167 = Vector2.Normalize(v2) * 8f;
						Projectile.NewProjectile(base.Center.X + vector166.X, base.Center.Y + vector166.Y, vector167.X, vector167.Y, 462, 30, 0f, Main.myPlayer);
					}
				}
				if (flag81)
				{
					Vector2 center19 = Main.npc[(int)this.ai[3]].Center;
					Vector2 value17 = new Vector2(220f * num1191, -60f) + center19;
					Vector2 vector168 = value17 + new Vector2(num1191 * 110f, -150f);
					Vector2 max = vector168 + new Vector2(num1191 * 370f, 150f);
					if (vector168.X > max.X)
					{
						Utils.Swap(vector168.X, max.X);
					}
					if (vector168.Y > max.Y)
					{
						Utils.Swap(vector168.Y, max.Y);
					}
					Vector2 value18 = Vector2.Clamp(base.Center + base.velocity, vector168, max);
					if (value18 != base.Center + base.velocity)
					{
						base.Center = value18 - base.velocity;
					}
				}
				int num1209 = num1194 * 7;
				if ((double)num1209 > frameCounter)
				{
					frameCounter++;
				}
				if ((double)num1209 < frameCounter)
				{
					frameCounter--;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > 21.0)
				{
					frameCounter = 21.0;
				}
				int num1210 = 0;
				if (flag80)
				{
					num1210 = 0;
				}
				switch (num1210)
				{
				case 1:
					if (this.ai[0] == 0f)
					{
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 1f;
							netUpdate = true;
						}
						base.velocity = Vector2.UnitX * 4f;
					}
					else if (this.ai[0] == 1f)
					{
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 2f;
							netUpdate = true;
						}
						base.velocity = Vector2.UnitX * -4f;
					}
					else if (this.ai[0] == 2f || this.ai[0] == 4f)
					{
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0]++;
							netUpdate = true;
						}
						base.velocity = Vector2.UnitY * -4f * (flag80 ? 1 : (-1));
					}
					else
					{
						if (this.ai[0] != 3f && this.ai[0] != 5f)
						{
							break;
						}
						if ((this.ai[1] += 1f) >= 20f)
						{
							this.ai[1] = 0f;
							this.ai[0]++;
							if (this.ai[0] == 6f)
							{
								this.ai[0] = 0f;
							}
							netUpdate = true;
						}
						base.velocity = Vector2.UnitY * 4f * (flag80 ? 1 : (-1));
					}
					break;
				case 2:
				{
					Vector2 vector169 = new Vector2(30f, 66f);
					TargetClosest(faceTarget: false);
					Vector2 v3 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - base.Center;
					float num1211 = v3.Length() / 200f;
					if (num1211 > 1f)
					{
						num1211 = 1f;
					}
					num1211 = 1f - num1211;
					num1211 *= 2f;
					if (num1211 > 1f)
					{
						num1211 = 1f;
					}
					localAI[0] = v3.ToRotation();
					localAI[1] = num1211;
					localAI[1] = 1f;
					break;
				}
				case 3:
				{
					int num1217 = 7;
					int num1218 = 4;
					this.ai[1]++;
					if (this.ai[1] >= (float)(num1217 * num1218 * 10))
					{
						this.ai[1] = 0f;
						break;
					}
					if (this.ai[1] >= (float)(num1217 * num1218))
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						break;
					}
					localAI[1] += 0.05f;
					if (localAI[1] > 0.75f)
					{
						localAI[1] = 0.75f;
					}
					float num1219 = (float)Math.PI * 2f * (this.ai[1] % (float)(num1217 * num1218)) / (float)(num1217 * num1218) - (float)Math.PI / 2f;
					localAI[0] = new Vector2((float)Math.Cos(num1219) * vector151.X, (float)Math.Sin(num1219) * vector151.Y).ToRotation();
					if (this.ai[1] % (float)num1218 == 0f)
					{
						Vector2 value21 = new Vector2(1f * (0f - num1191), 3f);
						Vector2 vector177 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), vector151 * localAI[1]);
						Vector2 vector178 = base.Center + Vector2.Normalize(vector177) * vector151.Length() * 0.4f + value21;
						Vector2 vector179 = Vector2.Normalize(vector177) * 8f;
						float ai2 = ((float)Math.PI * 2f * (float)Main.rand.NextDouble() - (float)Math.PI) / 30f + (float)Math.PI / 180f * num1191;
						Projectile.NewProjectile(vector178.X, vector178.Y, vector179.X, vector179.Y, 452, 5, 0f, Main.myPlayer, 0f, ai2);
					}
					break;
				}
				case 4:
				{
					Vector2 center20 = Main.npc[(int)this.ai[3]].Center;
					Vector2 value19 = new Vector2(220f * num1191, -60f) + center20;
					value19 += new Vector2(num1191 * 100f, -50f);
					Vector2 value20 = new Vector2(400f * num1191, -60f);
					this.ai[1]++;
					if (this.ai[1] < 30f)
					{
						Vector2 vector170 = value19 - base.Center;
						if (vector170 != Vector2.Zero)
						{
							Vector2 vector171 = vector170;
							vector171.Normalize();
							base.velocity = Vector2.SmoothStep(base.velocity, vector171 * Math.Min(8f, vector170.Length()), 0.2f);
						}
					}
					else if (this.ai[1] < 210f)
					{
						int num1212 = (int)this.ai[1] - 30;
						if (num1212 % 30 == 0 && Main.netMode != 1)
						{
							Vector2 vector172 = new Vector2(5f * num1191, -8f);
							int num1213 = num1212 / 30;
							vector172.X += ((float)num1213 - 3.5f) * num1191 * 3f;
							vector172.Y += ((float)num1213 - 4.5f) * 1f;
							vector172 *= 1.2f;
							int num1214 = Projectile.NewProjectile(base.Center.X, base.Center.Y, vector172.X, vector172.Y, 454, 1, 1f, Main.myPlayer, 0f, whoAmI);
						}
						Vector2 vector173 = Vector2.SmoothStep(value19, value19 + value20, (this.ai[1] - 30f) / 180f) - base.Center;
						if (vector173 != Vector2.Zero)
						{
							Vector2 vector174 = vector173;
							vector174.Normalize();
							base.velocity = Vector2.Lerp(base.velocity, vector174 * Math.Min(4f, vector173.Length()), 0.1f);
						}
					}
					else if (this.ai[1] < 270f)
					{
						base.velocity *= 0.9f;
					}
					else if (this.ai[1] < 300f)
					{
						if (this.ai[1] == 270f && Main.netMode != 1)
						{
							int num1215 = Player.FindClosest(base.position, width, height);
							Vector2 velocity7 = Vector2.Normalize(Main.player[num1215].Center - (base.Center + Vector2.UnitY * -350f));
							if (float.IsNaN(velocity7.X) || float.IsNaN(velocity7.Y))
							{
								velocity7 = Vector2.UnitY;
							}
							velocity7 *= 12f;
							for (int num1216 = 0; num1216 < 1000; num1216++)
							{
								Projectile projectile4 = Main.projectile[num1216];
								if (projectile4.active && projectile4.type == 454 && projectile4.ai[1] == (float)whoAmI && projectile4.ai[0] != -1f)
								{
									projectile4.ai[0] = -1f;
									projectile4.velocity = velocity7;
									projectile4.netUpdate = true;
								}
							}
						}
						Vector2 vector175 = Vector2.SmoothStep(value19, value19 + value20, 1f - (this.ai[1] - 270f) / 30f) - base.Center;
						if (vector175 != Vector2.Zero)
						{
							Vector2 vector176 = vector175;
							vector176.Normalize();
							base.velocity = Vector2.Lerp(base.velocity, vector176 * Math.Min(14f, vector175.Length()), 0.1f);
						}
					}
					else
					{
						this.ai[1] = 0f;
					}
					break;
				}
				case 5:
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] >= 40f)
					{
						this.ai[1] = 0f;
					}
					break;
				}
			}
			else if (aiStyle == 79)
			{
				if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
				{
					life = 0;
					HitEffect();
					active = false;
				}
				dontTakeDamage = localAI[3] >= 15f;
				base.velocity = Vector2.Zero;
				base.Center = Main.npc[(int)this.ai[3]].Center + new Vector2(0f, -400f);
				Vector2 value22 = new Vector2(27f, 59f);
				float num1220 = 0f;
				float num1221 = 0f;
				int num1222 = 0;
				int num1223 = 0;
				if (this.ai[0] >= 0f)
				{
					float num1224 = this.ai[0];
					this.ai[1]++;
					int num1225 = (int)Main.npc[(int)this.ai[3]].ai[2];
					int num1226 = 2;
					int num1227 = 0;
					int num1228 = 0;
					for (; num1227 < 5; num1227++)
					{
						num1221 = MoonLordAttacksArray[num1225, num1226, 1, num1227];
						if (!(num1221 + (float)num1228 <= this.ai[1]))
						{
							break;
						}
						num1228 += (int)num1221;
					}
					if (num1227 == 5)
					{
						num1227 = 0;
						this.ai[1] = 0f;
						num1221 = MoonLordAttacksArray[num1225, num1226, 1, num1227];
						num1228 = 0;
					}
					this.ai[0] = MoonLordAttacksArray[num1225, num1226, 0, num1227];
					num1220 = (int)this.ai[1] - num1228;
					if (this.ai[0] != num1224)
					{
						netUpdate = true;
					}
				}
				if (this.ai[0] == -3f)
				{
					damage = 0;
					dontTakeDamage = true;
					rotation = MathHelper.Lerp(rotation, (float)Math.PI / 12f, 0.07f);
					this.ai[1]++;
					if (this.ai[1] >= 32f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] < 0f)
					{
						this.ai[1] = 0f;
					}
					if (localAI[2] < 14f)
					{
						localAI[2]++;
					}
				}
				else if (this.ai[0] == -2f)
				{
					if (Main.npc[(int)this.ai[3]].ai[0] == 2f)
					{
						this.ai[0] = -3f;
						return;
					}
					damage = 80;
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] >= 32f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] < 0f)
					{
						this.ai[1] = 0f;
					}
					this.ai[2]++;
					if (this.ai[2] >= 555f)
					{
						this.ai[2] = 0f;
					}
					if (this.ai[2] >= 120f)
					{
						num1220 = this.ai[2] - 120f;
						num1221 = 555f;
						num1222 = 2;
						Vector2 value23 = new Vector2(0f, 216f);
						if (num1220 == 0f && Main.netMode != 1)
						{
							Vector2 value24 = base.Center + value23;
							for (int num1229 = 0; num1229 < 255; num1229++)
							{
								Player player6 = Main.player[num1229];
								if (player6.active && !player6.dead && Vector2.Distance(player6.Center, value24) <= 3000f)
								{
									Vector2 value25 = Main.player[target].Center - value24;
									if (value25 != Vector2.Zero)
									{
										value25.Normalize();
									}
									Projectile.NewProjectile(value24.X, value24.Y, value25.X, value25.Y, 456, 0, 0f, Main.myPlayer, whoAmI + 1, num1229);
								}
							}
						}
						if ((num1220 == 120f || num1220 == 180f || num1220 == 240f) && Main.netMode != 1)
						{
							for (int num1230 = 0; num1230 < 1000; num1230++)
							{
								Projectile projectile5 = Main.projectile[num1230];
								if (projectile5.active && projectile5.type == 456 && Main.player[(int)projectile5.ai[1]].FindBuffIndex(145) != -1)
								{
									Vector2 center21 = Main.player[target].Center;
									int num1231 = NewNPC((int)center21.X, (int)center21.Y, 401);
									Main.npc[num1231].netUpdate = true;
									Main.npc[num1231].ai[0] = whoAmI + 1;
									Main.npc[num1231].ai[1] = num1230;
								}
							}
						}
					}
				}
				else if (this.ai[0] == 0f)
				{
					num1223 = 3;
					TargetClosest(faceTarget: false);
					Vector2 v4 = Main.player[target].Center - base.Center - new Vector2(0f, -22f);
					float num1232 = v4.Length() / 500f;
					if (num1232 > 1f)
					{
						num1232 = 1f;
					}
					num1232 = 1f - num1232;
					num1232 *= 2f;
					if (num1232 > 1f)
					{
						num1232 = 1f;
					}
					localAI[0] = v4.ToRotation();
					localAI[1] = num1232;
					localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
				}
				if (this.ai[0] == 1f)
				{
					if (num1220 < 180f)
					{
						localAI[1] -= 0.05f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						if (num1220 >= 60f)
						{
							Vector2 center22 = base.Center;
							int num1233 = 0;
							if (num1220 >= 120f)
							{
								num1233 = 1;
							}
							for (int num1234 = 0; num1234 < 1 + num1233; num1234++)
							{
								int num1235 = 229;
								float num1236 = 0.8f;
								if (num1234 % 2 == 1)
								{
									num1235 = 229;
									num1236 = 1.65f;
								}
								Vector2 vector180 = center22 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * value22 / 2f;
								int num1237 = Dust.NewDust(vector180 - Vector2.One * 8f, 16, 16, num1235, base.velocity.X / 2f, base.velocity.Y / 2f);
								Main.dust[num1237].velocity = Vector2.Normalize(center22 - vector180) * 3.5f * (10f - (float)num1233 * 2f) / 10f;
								Main.dust[num1237].noGravity = true;
								Main.dust[num1237].scale = num1236;
								Main.dust[num1237].customData = this;
							}
						}
					}
					else if (num1220 < num1221 - 15f)
					{
						if (num1220 == 180f && Main.netMode != 1)
						{
							TargetClosest(faceTarget: false);
							Vector2 spinningpoint8 = Main.player[target].Center - base.Center;
							spinningpoint8.Normalize();
							float num1238 = -1f;
							if (spinningpoint8.X < 0f)
							{
								num1238 = 1f;
							}
							spinningpoint8 = spinningpoint8.RotatedBy((0f - num1238) * ((float)Math.PI * 2f) / 6f);
							Projectile.NewProjectile(base.Center.X, base.Center.Y, spinningpoint8.X, spinningpoint8.Y, 455, 75, 0f, Main.myPlayer, num1238 * ((float)Math.PI * 2f) / 540f, whoAmI);
							this.ai[2] = (spinningpoint8.ToRotation() + (float)Math.PI * 3f) * num1238;
							netUpdate = true;
						}
						localAI[1] += 0.05f;
						if (localAI[1] > 1f)
						{
							localAI[1] = 1f;
						}
						float num1239 = (this.ai[2] >= 0f).ToDirectionInt();
						float num1240 = this.ai[2];
						if (num1240 < 0f)
						{
							num1240 *= -1f;
						}
						num1240 += (float)Math.PI * -3f;
						num1240 += num1239 * ((float)Math.PI * 2f) / 540f;
						localAI[0] = num1240;
						this.ai[2] = (num1240 + (float)Math.PI * 3f) * num1239;
					}
					else
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						num1223 = 3;
					}
				}
				else if (this.ai[0] == 2f)
				{
					num1222 = 2;
					num1223 = 3;
					Vector2 value26 = new Vector2(0f, 216f);
					if (num1220 == 0f && Main.netMode != 1)
					{
						Vector2 value27 = base.Center + value26;
						for (int num1241 = 0; num1241 < 255; num1241++)
						{
							Player player7 = Main.player[num1241];
							if (player7.active && !player7.dead && Vector2.Distance(player7.Center, value27) <= 3000f)
							{
								Vector2 value28 = Main.player[target].Center - value27;
								if (value28 != Vector2.Zero)
								{
									value28.Normalize();
								}
								Projectile.NewProjectile(value27.X, value27.Y, value28.X, value28.Y, 456, 0, 0f, Main.myPlayer, whoAmI + 1, num1241);
							}
						}
					}
					if ((num1220 == 120f || num1220 == 180f || num1220 == 240f) && Main.netMode != 1)
					{
						for (int num1242 = 0; num1242 < 1000; num1242++)
						{
							Projectile projectile6 = Main.projectile[num1242];
							if (projectile6.active && projectile6.type == 456 && Main.player[(int)projectile6.ai[1]].FindBuffIndex(145) != -1)
							{
								Vector2 center23 = Main.player[target].Center;
								int num1243 = NewNPC((int)center23.X, (int)center23.Y, 401);
								Main.npc[num1243].netUpdate = true;
								Main.npc[num1243].ai[0] = whoAmI + 1;
								Main.npc[num1243].ai[1] = num1242;
							}
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					if ((double)num1220 == 1.0)
					{
						TargetClosest(faceTarget: false);
						netUpdate = true;
					}
					Vector2 v5 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v5.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					if (num1220 == num1221 - 35f)
					{
						SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 6);
					}
					if ((num1220 == num1221 - 14f || num1220 == num1221 - 7f || num1220 == num1221) && Main.netMode != 1)
					{
						Vector2 vector181 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), value22 * localAI[1]);
						Vector2 vector182 = Vector2.Normalize(v5) * 8f;
						Projectile.NewProjectile(base.Center.X + vector181.X, base.Center.Y + vector181.Y, vector182.X, vector182.Y, 462, 30, 0f, Main.myPlayer);
					}
				}
				int num1244 = num1222 * 7;
				if ((float)num1244 > localAI[2])
				{
					localAI[2]++;
				}
				if ((float)num1244 < localAI[2])
				{
					localAI[2]--;
				}
				if (localAI[2] < 0f)
				{
					localAI[2] = 0f;
				}
				if (localAI[2] > 14f)
				{
					localAI[2] = 14f;
				}
				int num1245 = num1223 * 5;
				if ((float)num1245 > localAI[3])
				{
					localAI[3]++;
				}
				if ((float)num1245 < localAI[3])
				{
					localAI[3]--;
				}
				if (localAI[3] < 0f)
				{
					localAI[2] = 0f;
				}
				if (localAI[3] > 15f)
				{
					localAI[2] = 15f;
				}
				int num1246 = 0;
				if (num1246 == 1)
				{
					Vector2 vector183 = new Vector2(27f, 59f);
					TargetClosest(faceTarget: false);
					Vector2 v6 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - base.Center;
					float num1247 = v6.Length() / 200f;
					if (num1247 > 1f)
					{
						num1247 = 1f;
					}
					num1247 = 1f - num1247;
					num1247 *= 2f;
					if (num1247 > 1f)
					{
						num1247 = 1f;
					}
					localAI[0] = v6.ToRotation();
					localAI[1] = num1247;
					localAI[1] = 1f;
				}
				if (num1246 == 2)
				{
					Vector2 vector184 = new Vector2(27f, 59f);
					float num1248 = (float)Math.PI * 2f * ((float)Main.timeForVisualEffects % 600f) / 600f;
					localAI[0] = new Vector2((float)Math.Cos(num1248) * vector184.X, (float)Math.Sin(num1248) * vector184.Y).ToRotation();
					localAI[1] = 0.75f;
					if (this.ai[1] == 0f)
					{
						Vector2 vector185 = num1248.ToRotationVector2();
						vector185 = Vector2.One;
						Projectile.NewProjectile(base.Center.X, base.Center.Y, vector185.X, vector185.Y, 455, 1, 0f, Main.myPlayer, (float)Math.PI / 300f, whoAmI);
					}
					this.ai[1]++;
					if (this.ai[1] >= 600f)
					{
						this.ai[1] = 0f;
					}
				}
				if (num1246 == 3)
				{
					Vector2 vector186 = new Vector2(0f, 216f);
					if (this.ai[1] == 0f)
					{
						TargetClosest(faceTarget: false);
						Vector2 vector187 = Main.player[target].Center - base.Center;
						vector187.Normalize();
						Projectile.NewProjectile(base.Center.X + vector186.X, base.Center.Y + vector186.Y, vector187.X, vector187.Y, 456, 0, 0f, Main.myPlayer, whoAmI + 1, target);
					}
					this.ai[1]++;
					if (this.ai[1] >= 600f)
					{
						this.ai[1] = 0f;
					}
				}
				if (num1246 == 4)
				{
					Vector2 vector188 = new Vector2(27f, 59f);
					TargetClosest(faceTarget: false);
					Vector2 v7 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v7.ToRotation(), 0.5f);
					localAI[1] = 1f;
					this.ai[1]++;
					if (this.ai[1] == 55f)
					{
						SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 6);
					}
					if (this.ai[1] == 76f || this.ai[1] == 83f || this.ai[1] == 90f)
					{
						Vector2 vector189 = Utils.Vector2FromElipse(elipseSizes: new Vector2(27f, 59f) * localAI[1], angleVector: localAI[0].ToRotationVector2());
						Vector2 vector190 = Vector2.Normalize(v7) * 8f;
						Projectile.NewProjectile(base.Center.X + vector189.X, base.Center.Y + vector189.Y, vector190.X, vector190.Y, 462, 5, 0f, Main.myPlayer);
					}
					if (this.ai[1] >= 90f)
					{
						this.ai[1] = 0f;
					}
				}
			}
			else if (aiStyle == 80)
			{
				if (this.ai[0] == 0f)
				{
					if (base.direction == 0)
					{
						TargetClosest();
						netUpdate = true;
					}
					if (collideX)
					{
						base.direction = -base.direction;
						netUpdate = true;
					}
					base.velocity.X = 3f * (float)base.direction;
					Vector2 center24 = base.Center;
					Point point9 = center24.ToTileCoordinates();
					int num1249 = 30;
					if (WorldGen.InWorld(point9.X, point9.Y, 30))
					{
						for (int num1250 = 0; num1250 < 30; num1250++)
						{
							if (WorldGen.SolidTile(point9.X, point9.Y + num1250))
							{
								num1249 = num1250;
								break;
							}
						}
					}
					if (num1249 < 15)
					{
						base.velocity.Y = Math.Max(base.velocity.Y - 0.05f, -3.5f);
					}
					else if (num1249 < 20)
					{
						base.velocity.Y *= 0.95f;
					}
					else
					{
						base.velocity.Y = Math.Min(base.velocity.Y + 0.05f, 1.5f);
					}
					float distanceToPlayer;
					int num1251 = FindClosestPlayer(out distanceToPlayer);
					if (num1251 == -1 || Main.player[num1251].dead)
					{
						return;
					}
					if (distanceToPlayer < 352f && Main.player[num1251].Center.Y > base.Center.Y)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.ai[1]++;
					base.velocity *= 0.95f;
					if (this.ai[1] >= 60f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 2f;
						int num1252 = FindClosestPlayer();
						if (num1252 != -1)
						{
							this.ai[3] = ((Main.player[num1252].Center.X > base.Center.X) ? (-1f) : 1f);
						}
						else
						{
							this.ai[3] = 1f;
						}
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 2f)
				{
					noTileCollide = true;
					this.ai[1]++;
					base.velocity.Y = Math.Max(base.velocity.Y - 0.1f, -10f);
					base.velocity.X = Math.Min(base.velocity.X + this.ai[3] * 0.05f, 4f);
					if ((base.position.Y < (float)(-height) || this.ai[1] >= 180f) && Main.netMode != 1)
					{
						Main.StartInvasion(4);
						active = false;
						netUpdate = true;
					}
				}
				Vector3 rgb = Color.SkyBlue.ToVector3();
				if (this.ai[0] == 2f)
				{
					rgb = Color.Red.ToVector3();
				}
				rgb *= 0.65f;
				Lighting.AddLight(base.Center, rgb);
			}
			else if (aiStyle == 81)
			{
				if (Main.rand.Next(420) == 0)
				{
					SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, Main.rand.Next(100, 101));
				}
				Vector2 value29 = new Vector2(30f);
				if (!Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 398)
				{
					life = 0;
					HitEffect();
					active = false;
				}
				float num1253 = 0f;
				float num1254 = 0f;
				float num1255 = this.ai[0];
				this.ai[1]++;
				int num1256 = 0;
				int num1257 = 0;
				for (; num1256 < 10; num1256++)
				{
					num1254 = MoonLordAttacksArray2[1, num1256];
					if (!(num1254 + (float)num1257 <= this.ai[1]))
					{
						break;
					}
					num1257 += (int)num1254;
				}
				if (num1256 == 10)
				{
					num1256 = 0;
					this.ai[1] = 0f;
					num1254 = MoonLordAttacksArray2[1, num1256];
					num1257 = 0;
				}
				this.ai[0] = MoonLordAttacksArray2[0, num1256];
				num1253 = (int)this.ai[1] - num1257;
				if (this.ai[0] != num1255)
				{
					netUpdate = true;
				}
				if (this.ai[0] == -1f)
				{
					this.ai[1]++;
					if (this.ai[1] > 180f)
					{
						this.ai[1] = 0f;
					}
					float num1258 = 1f;
					if (this.ai[1] < 60f)
					{
						num1258 = 0.75f;
						localAI[0] = 0f;
						localAI[1] = (float)Math.Sin(this.ai[1] * ((float)Math.PI * 2f) / 15f) * 0.35f;
						if (localAI[1] < 0f)
						{
							localAI[0] = (float)Math.PI;
						}
					}
					else if (this.ai[1] < 120f)
					{
						num1258 = 1f;
						if (localAI[1] < 0.5f)
						{
							localAI[1] += 0.025f;
						}
						localAI[0] += (float)Math.PI / 15f;
					}
					else
					{
						num1258 = 1.15f;
						localAI[1] -= 0.05f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
					}
					localAI[2] = MathHelper.Lerp(localAI[2], num1258, 0.3f);
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest(faceTarget: false);
					Vector2 v8 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v8.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 0.7f)
					{
						localAI[1] = 0.7f;
					}
					localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
					float scaleFactor6 = 24f;
					Vector2 center25 = base.Center;
					Vector2 center26 = Main.player[target].Center;
					Vector2 value30 = center26 - center25;
					Vector2 vector191 = value30 - Vector2.UnitY * 200f;
					vector191 = Vector2.Normalize(vector191) * scaleFactor6;
					int num1259 = 30;
					base.velocity.X = (base.velocity.X * (float)(num1259 - 1) + vector191.X) / (float)num1259;
					base.velocity.Y = (base.velocity.Y * (float)(num1259 - 1) + vector191.Y) / (float)num1259;
					float num1260 = 0.25f;
					for (int num1261 = 0; num1261 < 200; num1261++)
					{
						if (num1261 != whoAmI && Main.npc[num1261].active && Main.npc[num1261].type == 400 && Vector2.Distance(base.Center, Main.npc[num1261].Center) < 150f)
						{
							if (base.position.X < Main.npc[num1261].position.X)
							{
								base.velocity.X -= num1260;
							}
							else
							{
								base.velocity.X += num1260;
							}
							if (base.position.Y < Main.npc[num1261].position.Y)
							{
								base.velocity.Y -= num1260;
							}
							else
							{
								base.velocity.Y += num1260;
							}
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					if (num1253 == 0f)
					{
						TargetClosest(faceTarget: false);
						netUpdate = true;
					}
					base.velocity *= 0.95f;
					if (base.velocity.Length() < 1f)
					{
						base.velocity = Vector2.Zero;
					}
					Vector2 v9 = Main.player[target].Center + Main.player[target].velocity * 20f - base.Center;
					localAI[0] = localAI[0].AngleLerp(v9.ToRotation(), 0.5f);
					localAI[1] += 0.05f;
					if (localAI[1] > 1f)
					{
						localAI[1] = 1f;
					}
					if (num1253 < 20f)
					{
						localAI[2] = MathHelper.Lerp(localAI[2], 1.1f, 0.2f);
					}
					else
					{
						localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
					}
					if (num1253 == num1254 - 35f)
					{
						SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 6);
					}
					if ((num1253 == num1254 - 14f || num1253 == num1254 - 7f || num1253 == num1254) && Main.netMode != 1)
					{
						Vector2 vector192 = Utils.Vector2FromElipse(localAI[0].ToRotationVector2(), value29 * localAI[1]);
						Vector2 vector193 = Vector2.Normalize(v9) * 8f;
						Projectile.NewProjectile(base.Center.X + vector192.X, base.Center.Y + vector192.Y, vector193.X, vector193.Y, 462, 35, 0f, Main.myPlayer);
					}
				}
				else if (this.ai[0] == 2f)
				{
					if (num1253 < 15f)
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
						base.velocity *= 0.8f;
						if (base.velocity.Length() < 1f)
						{
							base.velocity = Vector2.Zero;
						}
					}
					else if (num1253 < 75f)
					{
						float num1262 = (num1253 - 15f) / 10f;
						int num1263 = 0;
						int num1264 = 0;
						switch ((int)num1262)
						{
						case 0:
							num1263 = 0;
							num1264 = 2;
							break;
						case 1:
							num1263 = 2;
							num1264 = 5;
							break;
						case 2:
							num1263 = 5;
							num1264 = 3;
							break;
						case 3:
							num1263 = 3;
							num1264 = 1;
							break;
						case 4:
							num1263 = 1;
							num1264 = 4;
							break;
						case 5:
							num1263 = 4;
							num1264 = 0;
							break;
						}
						Vector2 spinningpoint9 = Vector2.UnitY * -30f;
						Vector2 value31 = spinningpoint9.RotatedBy((float)num1263 * ((float)Math.PI * 2f) / 6f);
						Vector2 value32 = spinningpoint9.RotatedBy((float)num1264 * ((float)Math.PI * 2f) / 6f);
						Vector2 vector194 = Vector2.Lerp(value31, value32, num1262 - (float)(int)num1262);
						float value33 = vector194.Length() / 30f;
						localAI[0] = vector194.ToRotation();
						localAI[1] = MathHelper.Lerp(localAI[1], value33, 0.5f);
						for (int num1265 = 0; num1265 < 2; num1265++)
						{
							int num1266 = Dust.NewDust(base.Center + vector194 - Vector2.One * 4f, 0, 0, 229);
							Dust dust = Main.dust[num1266];
							dust.velocity += vector194 / 15f;
							Main.dust[num1266].noGravity = true;
						}
						if ((num1253 - 15f) % 10f == 0f && Main.netMode != 1)
						{
							Vector2 vec4 = Vector2.Normalize(vector194);
							if (vec4.HasNaNs())
							{
								vec4 = Vector2.UnitY * -1f;
							}
							vec4 *= 4f;
							int num1267 = Projectile.NewProjectile(base.Center.X + vector194.X, base.Center.Y + vector194.Y, vec4.X, vec4.Y, 454, 55, 0f, Main.myPlayer, 30f, whoAmI);
						}
					}
					else if (num1253 < 105f)
					{
						localAI[0] = localAI[0].AngleLerp(this.ai[2] - (float)Math.PI / 2f, 0.2f);
						localAI[2] = MathHelper.Lerp(localAI[2], 0.75f, 0.2f);
						if (num1253 == 75f)
						{
							TargetClosest(faceTarget: false);
							netUpdate = true;
							base.velocity = Vector2.UnitY * -7f;
							for (int num1268 = 0; num1268 < 1000; num1268++)
							{
								Projectile projectile7 = Main.projectile[num1268];
								if (projectile7.active && projectile7.type == 454 && projectile7.ai[1] == (float)whoAmI && projectile7.ai[0] != -1f)
								{
									Projectile projectile8 = projectile7;
									projectile8.velocity += base.velocity;
									projectile7.netUpdate = true;
								}
							}
						}
						base.velocity.Y *= 0.96f;
						this.ai[2] = (Main.player[target].Center - base.Center).ToRotation() + (float)Math.PI / 2f;
						rotation = rotation.AngleTowards(this.ai[2], (float)Math.PI / 30f);
					}
					else if (num1253 < 120f)
					{
						SoundEngine.PlaySound(29, (int)base.Center.X, (int)base.Center.Y, 102);
						if (num1253 == 105f)
						{
							netUpdate = true;
						}
						Vector2 velocity8 = (this.ai[2] - (float)Math.PI / 2f).ToRotationVector2() * 12f;
						base.velocity = velocity8 * 2f;
						for (int num1269 = 0; num1269 < 1000; num1269++)
						{
							Projectile projectile9 = Main.projectile[num1269];
							if (projectile9.active && projectile9.type == 454 && projectile9.ai[1] == (float)whoAmI && projectile9.ai[0] != -1f)
							{
								projectile9.ai[0] = -1f;
								projectile9.velocity = velocity8;
								projectile9.netUpdate = true;
							}
						}
					}
					else
					{
						base.velocity *= 0.92f;
						rotation = rotation.AngleLerp(0f, 0.2f);
					}
				}
				else if (this.ai[0] == 3f)
				{
					if (num1253 < 15f)
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						localAI[2] = MathHelper.Lerp(localAI[2], 0.4f, 0.2f);
						base.velocity *= 0.9f;
						if (base.velocity.Length() < 1f)
						{
							base.velocity = Vector2.Zero;
						}
					}
					else if (num1253 < 45f)
					{
						localAI[0] = 0f;
						localAI[1] = (float)Math.Sin((num1253 - 15f) * ((float)Math.PI * 2f) / 15f) * 0.5f;
						if (localAI[1] < 0f)
						{
							localAI[0] = (float)Math.PI;
						}
					}
					else if (num1253 < 185f)
					{
						if (num1253 == 45f)
						{
							this.ai[2] = (float)(Main.rand.Next(2) == 0).ToDirectionInt() * ((float)Math.PI * 2f) / 40f;
							netUpdate = true;
						}
						if ((num1253 - 15f - 30f) % 40f == 0f)
						{
							this.ai[2] *= 0.95f;
						}
						localAI[0] += this.ai[2];
						localAI[1] += 0.05f;
						if (localAI[1] > 1f)
						{
							localAI[1] = 1f;
						}
						Vector2 vector195 = localAI[0].ToRotationVector2() * value29 * localAI[1];
						float scaleFactor7 = MathHelper.Lerp(8f, 20f, (num1253 - 15f - 30f) / 140f);
						base.velocity = Vector2.Normalize(vector195) * scaleFactor7;
						rotation = rotation.AngleLerp(base.velocity.ToRotation() + (float)Math.PI / 2f, 0.2f);
						if ((num1253 - 15f - 30f) % 10f == 0f && Main.netMode != 1)
						{
							Vector2 vector196 = base.Center + Vector2.Normalize(vector195) * value29.Length() * 0.4f;
							Vector2 vector197 = Vector2.Normalize(vector195) * 8f;
							float ai3 = ((float)Math.PI * 2f * (float)Main.rand.NextDouble() - (float)Math.PI) / 30f + (float)Math.PI / 180f * this.ai[2];
							Projectile.NewProjectile(vector196.X, vector196.Y, vector197.X, vector197.Y, 452, 35, 0f, Main.myPlayer, 0f, ai3);
						}
					}
					else
					{
						base.velocity *= 0.88f;
						rotation = rotation.AngleLerp(0f, 0.2f);
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
					}
				}
				else
				{
					if (this.ai[0] != 4f)
					{
						return;
					}
					if (num1253 == 0f)
					{
						TargetClosest(faceTarget: false);
						netUpdate = true;
					}
					if (num1253 < 180f)
					{
						localAI[2] = MathHelper.Lerp(localAI[2], 1f, 0.2f);
						localAI[1] -= 0.05f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
						base.velocity *= 0.95f;
						if (base.velocity.Length() < 1f)
						{
							base.velocity = Vector2.Zero;
						}
						if (!(num1253 >= 60f))
						{
							return;
						}
						Vector2 center27 = base.Center;
						int num1270 = 0;
						if (num1253 >= 120f)
						{
							num1270 = 1;
						}
						for (int num1271 = 0; num1271 < 1 + num1270; num1271++)
						{
							int num1272 = 229;
							float num1273 = 0.8f;
							if (num1271 % 2 == 1)
							{
								num1272 = 229;
								num1273 = 1.65f;
							}
							Vector2 vector198 = center27 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * value29 / 2f;
							int num1274 = Dust.NewDust(vector198 - Vector2.One * 8f, 16, 16, num1272, base.velocity.X / 2f, base.velocity.Y / 2f);
							Main.dust[num1274].velocity = Vector2.Normalize(center27 - vector198) * 3.5f * (10f - (float)num1270 * 2f) / 10f;
							Main.dust[num1274].noGravity = true;
							Main.dust[num1274].scale = num1273;
							Main.dust[num1274].customData = this;
						}
					}
					else if (num1253 < num1254 - 15f)
					{
						if (num1253 == 180f && Main.netMode != 1)
						{
							TargetClosest(faceTarget: false);
							Vector2 spinningpoint10 = Main.player[target].Center - base.Center;
							spinningpoint10.Normalize();
							float num1275 = -1f;
							if (spinningpoint10.X < 0f)
							{
								num1275 = 1f;
							}
							spinningpoint10 = spinningpoint10.RotatedBy((0f - num1275) * ((float)Math.PI * 2f) / 6f);
							Projectile.NewProjectile(base.Center.X, base.Center.Y, spinningpoint10.X, spinningpoint10.Y, 455, 50, 0f, Main.myPlayer, num1275 * ((float)Math.PI * 2f) / 540f, whoAmI);
							this.ai[2] = (spinningpoint10.ToRotation() + (float)Math.PI * 3f) * num1275;
							netUpdate = true;
						}
						localAI[1] += 0.05f;
						if (localAI[1] > 1f)
						{
							localAI[1] = 1f;
						}
						float num1276 = (this.ai[2] >= 0f).ToDirectionInt();
						float num1277 = this.ai[2];
						if (num1277 < 0f)
						{
							num1277 *= -1f;
						}
						num1277 += (float)Math.PI * -3f;
						num1277 += num1276 * ((float)Math.PI * 2f) / 540f;
						localAI[0] = num1277;
						this.ai[2] = (num1277 + (float)Math.PI * 3f) * num1276;
					}
					else
					{
						localAI[1] -= 0.07f;
						if (localAI[1] < 0f)
						{
							localAI[1] = 0f;
						}
					}
				}
			}
			else if (aiStyle == 82)
			{
				float num1278 = 90f;
				Vector2 value34 = new Vector2(0f, 216f);
				int num1279 = (int)Math.Abs(this.ai[0]) - 1;
				int num1280 = (int)this.ai[1];
				if (!Main.npc[num1279].active || Main.npc[num1279].type != 396)
				{
					life = 0;
					HitEffect();
					active = false;
					return;
				}
				this.ai[2]++;
				if (this.ai[2] >= num1278)
				{
					if (Main.netMode != 1)
					{
						int num1281 = (int)Main.npc[num1279].ai[3];
						int num1282 = -1;
						int num1283 = -1;
						int num1284 = num1279;
						for (int num1285 = 0; num1285 < 200; num1285++)
						{
							if (Main.npc[num1285].active && Main.npc[num1285].ai[3] == (float)num1281)
							{
								if (num1282 == -1 && Main.npc[num1285].type == 397 && Main.npc[num1285].ai[2] == 0f)
								{
									num1282 = num1285;
								}
								if (num1283 == -1 && Main.npc[num1285].type == 397 && Main.npc[num1285].ai[2] == 1f)
								{
									num1283 = num1285;
								}
								if (num1282 != -1 && num1283 != -1 && num1284 != -1)
								{
									break;
								}
							}
						}
						int num1286 = 1000;
						int num1287 = Main.npc[num1281].lifeMax - Main.npc[num1281].life;
						int num1288 = Main.npc[num1282].lifeMax - Main.npc[num1282].life;
						int num1289 = Main.npc[num1283].lifeMax - Main.npc[num1283].life;
						int num1290 = Main.npc[num1284].lifeMax - Main.npc[num1284].life;
						if (num1290 > 0 && num1286 > 0)
						{
							int num1291 = num1290 - num1286;
							if (num1291 > 0)
							{
								num1291 = 0;
							}
							int num1292 = num1286 + num1291;
							num1286 -= num1292;
							NPC nPC = Main.npc[num1284];
							nPC.life += num1292;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1284].Center, new Vector2(50f)), num1292);
						}
						if (num1287 > 0 && num1286 > 0)
						{
							int num1293 = num1287 - num1286;
							if (num1293 > 0)
							{
								num1293 = 0;
							}
							int num1294 = num1286 + num1293;
							num1286 -= num1294;
							NPC nPC = Main.npc[num1281];
							nPC.life += num1294;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1281].Center, new Vector2(50f)), num1294);
						}
						if (num1288 > 0 && num1286 > 0)
						{
							int num1295 = num1288 - num1286;
							if (num1295 > 0)
							{
								num1295 = 0;
							}
							int num1296 = num1286 + num1295;
							num1286 -= num1296;
							NPC nPC = Main.npc[num1282];
							nPC.life += num1296;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1282].Center, new Vector2(50f)), num1296);
						}
						if (num1289 > 0 && num1286 > 0)
						{
							int num1297 = num1289 - num1286;
							if (num1297 > 0)
							{
								num1297 = 0;
							}
							int num1298 = num1286 + num1297;
							num1286 -= num1298;
							NPC nPC = Main.npc[num1283];
							nPC.life += num1298;
							HealEffect(Utils.CenteredRectangle(Main.npc[num1283].Center, new Vector2(50f)), num1298);
						}
					}
					life = 0;
					HitEffect();
					active = false;
				}
				else
				{
					base.velocity = Vector2.Zero;
					base.Center = Vector2.Lerp(Main.projectile[num1280].Center, Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center + value34, this.ai[2] / num1278);
					Vector2 spinningpoint11 = Vector2.UnitY * -height / 2f;
					for (int num1299 = 0; num1299 < 6; num1299++)
					{
						int num1300 = Dust.NewDust(base.Center - Vector2.One * 4f + spinningpoint11.RotatedBy((float)num1299 * ((float)Math.PI * 2f) / 6f), 0, 0, 229);
						Main.dust[num1300].velocity = -Vector2.UnitY;
						Main.dust[num1300].noGravity = true;
						Main.dust[num1300].scale = 0.7f;
						Main.dust[num1300].customData = this;
					}
					spinningpoint11 = Vector2.UnitY * -height / 6f;
					for (int num1301 = 0; num1301 < 3; num1301++)
					{
						int num1302 = Dust.NewDust(base.Center - Vector2.One * 4f + spinningpoint11.RotatedBy((float)num1301 * ((float)Math.PI * 2f) / 6f), 0, 0, 229, 0f, -2f);
						Main.dust[num1302].noGravity = true;
						Main.dust[num1302].scale = 1.5f;
						Main.dust[num1302].customData = this;
					}
				}
			}
			else if (aiStyle == 83)
			{
				if (type == 437)
				{
					if (localAI[3] == 0f && Main.netMode != 1)
					{
						localAI[3] = 1f;
						netUpdate = true;
						Point[] spawnPoints = null;
						if (!CultistRitual.CheckFloor(base.Center, out spawnPoints))
						{
							life = 0;
							HitEffect();
							active = false;
							return;
						}
						int num1303 = 0;
						int num1304 = 1;
						for (int num1305 = 0; num1305 < 4; num1305++)
						{
							int num1306 = 0;
							bool flag82 = num1305 == 1 || num1305 == 2;
							num1306 = ((!flag82) ? 379 : 438);
							int num1307 = NewNPC(spawnPoints[num1305].X * 16 + 8, spawnPoints[num1305].Y * 16 - 48, num1306);
							if (flag82)
							{
								localAI[num1304++] = num1307 + 1;
								Main.npc[num1307].ai[3] = -(whoAmI + 1);
							}
							else
							{
								this.ai[num1303++] = num1307 + 1;
								Main.npc[num1307].ai[3] = -(whoAmI + 1);
							}
							Main.npc[num1307].netUpdate = true;
						}
					}
					if (localAI[0] == 1f && Main.netMode != 1)
					{
						localAI[0] = 2f;
						for (int num1308 = 0; num1308 < 2; num1308++)
						{
							Main.npc[(int)localAI[num1308 + 1] - 1].ai[1] = 1f;
							Main.npc[(int)localAI[num1308 + 1] - 1].netUpdate = true;
							Main.npc[(int)this.ai[num1308] - 1].ai[3] = 0f;
							Main.npc[(int)this.ai[num1308] - 1].TargetClosest();
							Main.npc[(int)this.ai[num1308] - 1].netUpdate = true;
						}
					}
					if (this.ai[0] != -1f && Main.netMode != 1)
					{
						bool flag83 = true;
						for (int num1309 = 0; num1309 < 2; num1309++)
						{
							if (Main.npc[(int)localAI[num1309 + 1] - 1].active && Main.npc[(int)localAI[num1309 + 1] - 1].type == 438)
							{
								flag83 = false;
							}
							if (Main.npc[(int)this.ai[num1309] - 1].active && Main.npc[(int)this.ai[num1309] - 1].type == 379)
							{
								flag83 = false;
							}
						}
						if (flag83)
						{
							this.ai[0] = -1f;
							this.ai[1] = 0f;
							this.ai[3] = 0f;
							int num1310 = (int)base.Center.X / 16 + 11 * (Main.rand.Next(2) == 0).ToDirectionInt();
							int num1311 = 0;
							for (int num1312 = -5; num1312 < 12; num1312++)
							{
								int num1313 = num1310;
								int num1314 = (int)base.Center.Y / 16 + num1312;
								if (WorldGen.SolidTile(num1313, num1314) && !Collision.SolidTiles(num1313 - 1, num1313 + 1, num1314 - 3, num1314 - 1))
								{
									num1311 = num1314;
									break;
								}
								if (num1312 == 11)
								{
									num1311 = num1314;
								}
							}
							int num1315 = NewNPC(num1310 * 16 + 10, num1311 * 16 - 2, 439);
							Main.npc[num1315].direction = (Main.npc[num1315].spriteDirection = Math.Sign(base.Center.X - (float)(num1310 * 16) - 10f));
							this.ai[2] = num1315;
							netUpdate = true;
							CultistRitual.TabletDestroyed();
						}
					}
					if (this.ai[0] == -1f)
					{
						this.ai[3]++;
						if (this.ai[3] > 300f)
						{
							life = 0;
							HitEffect(0, 9999.0);
							active = false;
							if (Main.netMode != 1)
							{
								for (int num1316 = 0; num1316 < 6; num1316++)
								{
									float num1317 = 3f + Main.rand.NextFloat() * 6f;
									Vector2 vector199 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
									Vector2 center28 = base.Center;
									center28 += vector199 * 30f;
									Projectile.NewProjectile(center28.X, center28.Y, vector199.X * num1317, vector199.Y * num1317, 526, 0, 0f, Main.myPlayer, Main.npc[(int)this.ai[2]].Center.X, Main.npc[(int)this.ai[2]].Center.Y);
								}
								for (int num1318 = 0; num1318 < 20; num1318++)
								{
									if (Main.rand.Next(2) != 0)
									{
										float num1319 = 3f + Main.rand.NextFloat() * 6f;
										Vector2 vector200 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
										Vector2 center29 = base.Center;
										center29 += vector200 * 30f;
										Vector2 vector201 = base.Center + vector200 * (Main.rand.NextFloat() * 45f + 45f) + Vector2.UnitY * 20f;
										Projectile.NewProjectile(center29.X, center29.Y, vector200.X * num1319, -20f, 526, 0, 0f, Main.myPlayer, vector201.X, vector201.Y);
									}
								}
							}
						}
						else if (this.ai[3] % 10f == 1f && this.ai[3] > 120f && Main.netMode != 1)
						{
							float num1320 = 3f + Main.rand.NextFloat() * 6f;
							Vector2 vector202 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Vector2 center30 = base.Center;
							center30 += vector202 * 25f;
							Projectile.NewProjectile(center30.X, center30.Y, vector202.X * num1320, vector202.Y * num1320, 526, 0, 0f, Main.myPlayer, Main.npc[(int)this.ai[2]].Center.X, Main.npc[(int)this.ai[2]].Center.Y);
						}
					}
				}
				if (type == 438)
				{
					base.velocity.X *= 0.93f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					int num1321 = (int)(0f - this.ai[3] - 1f);
					if (num1321 == -1)
					{
						life = 0;
						HitEffect();
						active = false;
						return;
					}
					int num1322 = Math.Sign(Main.npc[num1321].Center.X - base.Center.X);
					if (num1322 != base.direction)
					{
						base.velocity.X = 0f;
						base.direction = (spriteDirection = num1322);
						netUpdate = true;
					}
					if (justHit && Main.netMode != 1 && Main.npc[num1321].localAI[0] == 0f)
					{
						Main.npc[num1321].localAI[0] = 1f;
					}
					if ((this.ai[0] += 1f) >= 300f)
					{
						this.ai[0] = 0f;
						netUpdate = true;
					}
				}
				if (type == 437)
				{
					Lighting.AddLight(base.Center, 0.8f, 0.75f, 0.55f);
				}
			}
			else if (aiStyle == 84)
			{
				AI_084_LunaticCultist();
			}
			else if (aiStyle == 85)
			{
				noTileCollide = false;
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 1f;
					}
					else
					{
						Vector2 vector203 = Main.player[target].Center - base.Center;
						vector203.Y -= Main.player[target].height / 4;
						float num1323 = vector203.Length();
						if (num1323 > 800f)
						{
							this.ai[0] = 2f;
						}
						else
						{
							Vector2 center31 = base.Center;
							center31.X = Main.player[target].Center.X;
							Vector2 vector204 = center31 - base.Center;
							if (vector204.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center31, 1, 1))
							{
								this.ai[0] = 3f;
								this.ai[1] = center31.X;
								this.ai[2] = center31.Y;
								Vector2 center32 = base.Center;
								center32.Y = Main.player[target].Center.Y;
								if (vector204.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center32, 1, 1) && Collision.CanHit(center32, 1, 1, Main.player[target].position, 1, 1))
								{
									this.ai[0] = 3f;
									this.ai[1] = center32.X;
									this.ai[2] = center32.Y;
								}
							}
							else
							{
								center31 = base.Center;
								center31.Y = Main.player[target].Center.Y;
								if ((center31 - base.Center).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center31, 1, 1))
								{
									this.ai[0] = 3f;
									this.ai[1] = center31.X;
									this.ai[2] = center31.Y;
								}
							}
							if (this.ai[0] == 0f)
							{
								localAI[0] = 0f;
								vector203.Normalize();
								vector203 *= 0.5f;
								base.velocity += vector203;
								this.ai[0] = 4f;
								this.ai[1] = 0f;
							}
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					rotation += (float)base.direction * 0.3f;
					Vector2 value35 = Main.player[target].Center - base.Center;
					if (type == 421)
					{
						value35 = Main.player[target].Top - base.Center;
					}
					float num1324 = value35.Length();
					float num1325 = 5.5f;
					num1325 += num1324 / 100f;
					int num1326 = 50;
					value35.Normalize();
					value35 *= num1325;
					base.velocity = (base.velocity * (num1326 - 1) + value35) / num1326;
					if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
					if (type == 421 && num1324 < 40f && Main.player[target].active && !Main.player[target].dead)
					{
						bool flag84 = true;
						for (int num1327 = 0; num1327 < 200; num1327++)
						{
							NPC nPC7 = Main.npc[num1327];
							if (nPC7.active && nPC7.type == type && nPC7.ai[0] == 5f && nPC7.target == target)
							{
								flag84 = false;
								break;
							}
						}
						if (flag84)
						{
							base.Center = Main.player[target].Top;
							base.velocity = Vector2.Zero;
							this.ai[0] = 5f;
							this.ai[1] = 0f;
							netUpdate = true;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					rotation = base.velocity.X * 0.1f;
					noTileCollide = true;
					Vector2 value36 = Main.player[target].Center - base.Center;
					float num1328 = value36.Length();
					float num1329 = 3f;
					int num1330 = 3;
					value36.Normalize();
					value36 *= num1329;
					base.velocity = (base.velocity * (num1330 - 1) + value36) / num1330;
					if (num1328 < 600f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 3f)
				{
					rotation = base.velocity.X * 0.1f;
					Vector2 value37 = new Vector2(this.ai[1], this.ai[2]);
					Vector2 value38 = value37 - base.Center;
					float num1331 = value38.Length();
					float num1332 = 2f;
					float num1333 = 3f;
					value38.Normalize();
					value38 *= num1332;
					base.velocity = (base.velocity * (num1333 - 1f) + value38) / num1333;
					if (collideX || collideY)
					{
						this.ai[0] = 4f;
						this.ai[1] = 0f;
					}
					if (num1331 < num1332 || num1331 > 800f || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 4f)
				{
					rotation = base.velocity.X * 0.1f;
					if (collideX)
					{
						base.velocity.X *= -0.8f;
					}
					if (collideY)
					{
						base.velocity.Y *= -0.8f;
					}
					Vector2 value39;
					if (base.velocity.X == 0f && base.velocity.Y == 0f)
					{
						value39 = Main.player[target].Center - base.Center;
						value39.Y -= Main.player[target].height / 4;
						value39.Normalize();
						base.velocity = value39 * 0.1f;
					}
					float num1334 = 2f;
					float num1335 = 20f;
					value39 = base.velocity;
					value39.Normalize();
					value39 *= num1334;
					base.velocity = (base.velocity * (num1335 - 1f) + value39) / num1335;
					this.ai[1] += 1f;
					if (this.ai[1] > 180f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
					localAI[0] += 1f;
					if (localAI[0] >= 5f && !Collision.SolidCollision(base.position - new Vector2(10f, 10f), width + 20, height + 20))
					{
						localAI[0] = 0f;
						Vector2 center33 = base.Center;
						center33.X = Main.player[target].Center.X;
						if (Collision.CanHit(base.Center, 1, 1, center33, 1, 1) && Collision.CanHit(base.Center, 1, 1, center33, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center33, 1, 1))
						{
							this.ai[0] = 3f;
							this.ai[1] = center33.X;
							this.ai[2] = center33.Y;
						}
						else
						{
							center33 = base.Center;
							center33.Y = Main.player[target].Center.Y;
							if (Collision.CanHit(base.Center, 1, 1, center33, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center33, 1, 1))
							{
								this.ai[0] = 3f;
								this.ai[1] = center33.X;
								this.ai[2] = center33.Y;
							}
						}
					}
				}
				else if (this.ai[0] == 5f)
				{
					Player player8 = Main.player[target];
					if (!player8.active || player8.dead)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					else
					{
						base.Center = ((player8.gravDir == 1f) ? player8.Top : player8.Bottom) + new Vector2(player8.direction * 4, 0f);
						gfxOffY = player8.gfxOffY;
						base.velocity = Vector2.Zero;
						if (!player8.creativeGodMode)
						{
							player8.AddBuff(163, 59);
						}
					}
				}
				if (type == 405)
				{
					rotation = 0f;
					for (int num1336 = 0; num1336 < 200; num1336++)
					{
						if (num1336 != whoAmI && Main.npc[num1336].active && Main.npc[num1336].type == type && Math.Abs(base.position.X - Main.npc[num1336].position.X) + Math.Abs(base.position.Y - Main.npc[num1336].position.Y) < (float)width)
						{
							if (base.position.X < Main.npc[num1336].position.X)
							{
								base.velocity.X -= 0.05f;
							}
							else
							{
								base.velocity.X += 0.05f;
							}
							if (base.position.Y < Main.npc[num1336].position.Y)
							{
								base.velocity.Y -= 0.05f;
							}
							else
							{
								base.velocity.Y += 0.05f;
							}
						}
					}
				}
				else
				{
					if (type != 421)
					{
						return;
					}
					hide = this.ai[0] == 5f;
					rotation = base.velocity.X * 0.1f;
					for (int num1337 = 0; num1337 < 200; num1337++)
					{
						if (num1337 != whoAmI && Main.npc[num1337].active && Main.npc[num1337].type == type && Math.Abs(base.position.X - Main.npc[num1337].position.X) + Math.Abs(base.position.Y - Main.npc[num1337].position.Y) < (float)width)
						{
							if (base.position.X < Main.npc[num1337].position.X)
							{
								base.velocity.X -= 0.05f;
							}
							else
							{
								base.velocity.X += 0.05f;
							}
							if (base.position.Y < Main.npc[num1337].position.Y)
							{
								base.velocity.Y -= 0.05f;
							}
							else
							{
								base.velocity.Y += 0.05f;
							}
						}
					}
				}
			}
			else if (aiStyle == 86)
			{
				if (alpha > 0)
				{
					alpha -= 30;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				noGravity = true;
				noTileCollide = true;
				knockBackResist = 0f;
				for (int num1338 = 0; num1338 < 200; num1338++)
				{
					if (num1338 == whoAmI || !Main.npc[num1338].active || Main.npc[num1338].type != type)
					{
						continue;
					}
					Vector2 vector205 = Main.npc[num1338].Center - base.Center;
					if (!(vector205.Length() < 50f))
					{
						continue;
					}
					vector205.Normalize();
					if (vector205.X == 0f && vector205.Y == 0f)
					{
						if (num1338 > whoAmI)
						{
							vector205.X = 1f;
						}
						else
						{
							vector205.X = -1f;
						}
					}
					vector205 *= 0.4f;
					base.velocity -= vector205;
					NPC nPC = Main.npc[num1338];
					nPC.velocity += vector205;
				}
				if (type == 472)
				{
					float num1339 = 120f;
					if (localAI[0] < num1339)
					{
						if (localAI[0] == 0f)
						{
							SoundEngine.PlaySound(SoundID.Item8, base.Center);
							TargetClosest();
							if (base.direction > 0)
							{
								base.velocity.X += 2f;
							}
							else
							{
								base.velocity.X -= 2f;
							}
							base.position += netOffset;
							for (int num1340 = 0; num1340 < 20; num1340++)
							{
								Vector2 center34 = base.Center;
								center34.Y -= 18f;
								Vector2 vector206 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
								vector206.Normalize();
								vector206 *= (float)Main.rand.Next(0, 100) * 0.1f;
								center34 += vector206;
								vector206.Normalize();
								vector206 *= (float)Main.rand.Next(50, 90) * 0.2f;
								int num1341 = Dust.NewDust(center34, 1, 1, 27);
								Main.dust[num1341].velocity = -vector206 * 0.3f;
								Main.dust[num1341].alpha = 100;
								if (Main.rand.Next(2) == 0)
								{
									Main.dust[num1341].noGravity = true;
									Dust dust = Main.dust[num1341];
									dust.scale += 0.3f;
								}
							}
							base.position -= netOffset;
						}
						localAI[0] += 1f;
						float num1342 = 1f - localAI[0] / num1339;
						float num1343 = num1342 * 20f;
						for (int num1344 = 0; (float)num1344 < num1343; num1344++)
						{
							if (Main.rand.Next(5) == 0)
							{
								base.position += netOffset;
								int num1345 = Dust.NewDust(base.position, width, height, 27);
								Main.dust[num1345].alpha = 100;
								Dust dust = Main.dust[num1345];
								dust.velocity *= 0.3f;
								dust = Main.dust[num1345];
								dust.velocity += base.velocity * 0.75f;
								Main.dust[num1345].noGravity = true;
								base.position -= netOffset;
							}
						}
					}
				}
				if (type == 521)
				{
					float num1346 = 120f;
					if (localAI[0] < num1346)
					{
						if (localAI[0] == 0f)
						{
							SoundEngine.PlaySound(SoundID.Item8, base.Center);
							TargetClosest();
							if (base.direction > 0)
							{
								base.velocity.X += 2f;
							}
							else
							{
								base.velocity.X -= 2f;
							}
						}
						localAI[0] += 1f;
						int num1347 = 10;
						for (int num1348 = 0; num1348 < 2; num1348++)
						{
							base.position += netOffset;
							int num1349 = Dust.NewDust(base.position - new Vector2(num1347), width + num1347 * 2, height + num1347 * 2, 228, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num1349].noGravity = true;
							Main.dust[num1349].noLight = true;
							base.position -= netOffset;
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					this.ai[0] = 1f;
					this.ai[1] = base.direction;
				}
				else if (this.ai[0] == 1f)
				{
					TargetClosest();
					float num1350 = 0.3f;
					float num1351 = 7f;
					float num1352 = 4f;
					float num1353 = 660f;
					float num1354 = 4f;
					if (type == 521)
					{
						num1350 = 0.7f;
						num1351 = 14f;
						num1353 = 500f;
						num1352 = 6f;
						num1354 = 3f;
					}
					base.velocity.X += this.ai[1] * num1350;
					if (base.velocity.X > num1351)
					{
						base.velocity.X = num1351;
					}
					if (base.velocity.X < 0f - num1351)
					{
						base.velocity.X = 0f - num1351;
					}
					float num1355 = Main.player[target].Center.Y - base.Center.Y;
					if (Math.Abs(num1355) > num1352)
					{
						num1354 = 15f;
					}
					if (num1355 > num1352)
					{
						num1355 = num1352;
					}
					else if (num1355 < 0f - num1352)
					{
						num1355 = 0f - num1352;
					}
					base.velocity.Y = (base.velocity.Y * (num1354 - 1f) + num1355) / num1354;
					if ((this.ai[1] > 0f && Main.player[target].Center.X - base.Center.X < 0f - num1353) || (this.ai[1] < 0f && Main.player[target].Center.X - base.Center.X > num1353))
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						if (base.Center.Y + 20f > Main.player[target].Center.Y)
						{
							this.ai[1] = -1f;
						}
						else
						{
							this.ai[1] = 1f;
						}
					}
				}
				else if (this.ai[0] == 2f)
				{
					float num1356 = 0.4f;
					float num1357 = 0.95f;
					float num1358 = 5f;
					if (type == 521)
					{
						num1356 = 0.3f;
						num1358 = 7f;
						num1357 = 0.9f;
					}
					base.velocity.Y += this.ai[1] * num1356;
					if (base.velocity.Length() > num1358)
					{
						base.velocity *= num1357;
					}
					if (base.velocity.X > -1f && base.velocity.X < 1f)
					{
						TargetClosest();
						this.ai[0] = 3f;
						this.ai[1] = base.direction;
					}
				}
				else if (this.ai[0] == 3f)
				{
					float num1359 = 0.4f;
					float num1360 = 0.2f;
					float num1361 = 5f;
					float num1362 = 0.95f;
					if (type == 521)
					{
						num1359 = 0.6f;
						num1360 = 0.3f;
						num1361 = 7f;
						num1362 = 0.9f;
					}
					base.velocity.X += this.ai[1] * num1359;
					if (base.Center.Y > Main.player[target].Center.Y)
					{
						base.velocity.Y -= num1360;
					}
					else
					{
						base.velocity.Y += num1360;
					}
					if (base.velocity.Length() > num1361)
					{
						base.velocity *= num1362;
					}
					if (base.velocity.Y > -1f && base.velocity.Y < 1f)
					{
						TargetClosest();
						this.ai[0] = 0f;
						this.ai[1] = base.direction;
					}
				}
				if (type == 521)
				{
					int num1363 = 10;
					base.position += netOffset;
					for (int num1364 = 0; num1364 < 1; num1364++)
					{
						int num1365 = Dust.NewDust(base.position - new Vector2(num1363), width + num1363 * 2, height + num1363 * 2, 228, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num1365].noGravity = true;
						Main.dust[num1365].noLight = true;
					}
					base.position -= netOffset;
				}
			}
			else if (aiStyle == 87)
			{
				knockBackResist = 0.2f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				dontTakeDamage = false;
				noTileCollide = false;
				noGravity = false;
				reflectsProjectiles = false;
				if (this.ai[0] != 7f && Main.player[target].dead)
				{
					TargetClosest();
					if (Main.player[target].dead)
					{
						this.ai[0] = 7f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
				}
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					Vector2 vector207 = Main.player[target].Center - base.Center;
					if (base.velocity.X != 0f || base.velocity.Y > 100f || justHit || vector207.Length() < 80f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] > 36f)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					if ((Main.player[target].Center - base.Center).Length() > 600f)
					{
						this.ai[0] = 5f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					if (base.velocity.Y == 0f)
					{
						TargetClosest();
						base.velocity.X *= 0.85f;
						this.ai[1] += 1f;
						float num1366 = 15f + 30f * ((float)life / (float)lifeMax);
						float num1367 = 3f + 4f * (1f - (float)life / (float)lifeMax);
						float num1368 = 4f;
						if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							num1368 += 2f;
						}
						if (this.ai[1] > num1366)
						{
							this.ai[3] += 1f;
							if (this.ai[3] >= 3f)
							{
								this.ai[3] = 0f;
								num1368 *= 2f;
								num1367 /= 2f;
							}
							this.ai[1] = 0f;
							base.velocity.Y -= num1368;
							base.velocity.X = num1367 * (float)base.direction;
						}
					}
					else
					{
						knockBackResist = 0f;
						base.velocity.X *= 0.99f;
						if (base.direction < 0 && base.velocity.X > -1f)
						{
							base.velocity.X = -1f;
						}
						if (base.direction > 0 && base.velocity.X < 1f)
						{
							base.velocity.X = 1f;
						}
					}
					this.ai[2] += 1f;
					if ((double)this.ai[2] > 210.0 && base.velocity.Y == 0f && Main.netMode != 1)
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							this.ai[0] = 3f;
							break;
						case 1:
							this.ai[0] = 4f;
							noTileCollide = true;
							base.velocity.Y = -8f;
							break;
						case 2:
							this.ai[0] = 6f;
							break;
						default:
							this.ai[0] = 2f;
							break;
						}
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
				}
				else if (this.ai[0] == 3f)
				{
					base.velocity.X *= 0.85f;
					dontTakeDamage = true;
					this.ai[1] += 1f;
					if (this.ai[1] >= 180f)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
					}
					if (Main.expertMode)
					{
						ReflectProjectiles(base.Hitbox);
						reflectsProjectiles = true;
					}
				}
				else if (this.ai[0] == 4f)
				{
					noTileCollide = true;
					noGravity = true;
					knockBackResist = 0f;
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					TargetClosest();
					Vector2 center35 = Main.player[target].Center;
					center35.Y -= 350f;
					Vector2 value40 = center35 - base.Center;
					if (this.ai[2] == 1f)
					{
						this.ai[1] += 1f;
						value40 = Main.player[target].Center - base.Center;
						value40.Normalize();
						value40 *= 8f;
						base.velocity = (base.velocity * 4f + value40) / 5f;
						if (this.ai[1] > 6f)
						{
							this.ai[1] = 0f;
							this.ai[0] = 4.1f;
							this.ai[2] = 0f;
							base.velocity = value40;
						}
					}
					else if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 40f && base.Center.Y < Main.player[target].Center.Y - 300f)
					{
						this.ai[1] = 0f;
						this.ai[2] = 1f;
					}
					else
					{
						value40.Normalize();
						value40 *= 12f;
						base.velocity = (base.velocity * 5f + value40) / 6f;
					}
				}
				else if (this.ai[0] == 4.1f)
				{
					knockBackResist = 0f;
					if (this.ai[2] == 0f && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1) && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[2] = 1f;
					}
					if (base.position.Y + (float)height >= Main.player[target].position.Y || base.velocity.Y <= 0f)
					{
						this.ai[1] += 1f;
						if (this.ai[1] > 10f)
						{
							this.ai[0] = 2f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							if (Collision.SolidCollision(base.position, width, height))
							{
								this.ai[0] = 5f;
							}
						}
					}
					else if (this.ai[2] == 0f)
					{
						noTileCollide = true;
						noGravity = true;
						knockBackResist = 0f;
					}
					base.velocity.Y += 0.2f;
					if (base.velocity.Y > 16f)
					{
						base.velocity.Y = 16f;
					}
				}
				else if (this.ai[0] == 5f)
				{
					if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					else
					{
						base.direction = -1;
					}
					spriteDirection = base.direction;
					noTileCollide = true;
					noGravity = true;
					knockBackResist = 0f;
					Vector2 value41 = Main.player[target].Center - base.Center;
					value41.Y -= 4f;
					if (value41.Length() < 200f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					if (value41.Length() > 10f)
					{
						value41.Normalize();
						value41 *= 10f;
					}
					base.velocity = (base.velocity * 4f + value41) / 5f;
				}
				else if (this.ai[0] == 6f)
				{
					knockBackResist = 0f;
					if (base.velocity.Y == 0f)
					{
						TargetClosest();
						base.velocity.X *= 0.8f;
						this.ai[1] += 1f;
						if (this.ai[1] > 5f)
						{
							this.ai[1] = 0f;
							base.velocity.Y -= 4f;
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y)
							{
								base.velocity.Y -= 1.25f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 40f)
							{
								base.velocity.Y -= 1.5f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 80f)
							{
								base.velocity.Y -= 1.75f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 120f)
							{
								base.velocity.Y -= 2f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 160f)
							{
								base.velocity.Y -= 2.25f;
							}
							if (Main.player[target].position.Y + (float)Main.player[target].height < base.Center.Y - 200f)
							{
								base.velocity.Y -= 2.5f;
							}
							if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
							{
								base.velocity.Y -= 2f;
							}
							base.velocity.X = 12 * base.direction;
							this.ai[2] += 1f;
						}
					}
					else
					{
						base.velocity.X *= 0.98f;
						if (base.direction < 0 && base.velocity.X > -8f)
						{
							base.velocity.X = -8f;
						}
						if (base.direction > 0 && base.velocity.X < 8f)
						{
							base.velocity.X = 8f;
						}
					}
					if (this.ai[2] >= 3f && base.velocity.Y == 0f)
					{
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
				}
				else if (this.ai[0] == 7f)
				{
					damage = 0;
					life = lifeMax;
					defense = 9999;
					noTileCollide = true;
					alpha += 7;
					if (alpha > 255)
					{
						alpha = 255;
					}
					base.velocity.X *= 0.98f;
				}
			}
			else if (aiStyle == 88)
			{
				int num1369 = 7;
				noTileCollide = false;
				noGravity = true;
				knockBackResist = 0.2f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				damage = defDamage;
				if (!Main.eclipse && Main.netMode != 1)
				{
					if (this.ai[0] != -1f)
					{
						netUpdate = true;
					}
					this.ai[0] = -1f;
				}
				else if (target < 0 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
					Vector2 vector208 = Main.player[target].Center - base.Center;
					if (Main.netMode != 1 && (Main.player[target].dead || vector208.Length() > 3000f))
					{
						if (this.ai[0] != -1f)
						{
							netUpdate = true;
						}
						this.ai[0] = -1f;
					}
				}
				else
				{
					Vector2 vector209 = Main.player[target].Center - base.Center;
					if (Main.netMode != 1 && this.ai[0] > 1f && vector209.Length() > 1000f)
					{
						if (this.ai[0] != 1f)
						{
							netUpdate = true;
						}
						this.ai[0] = 1f;
					}
				}
				if (this.ai[0] == -1f)
				{
					Vector2 value42 = new Vector2(0f, -8f);
					base.velocity = (base.velocity * 9f + value42) / 10f;
					noTileCollide = true;
					dontTakeDamage = true;
				}
				else if (this.ai[0] == 0f)
				{
					TargetClosest();
					if (base.Center.X < Main.player[target].Center.X - 2f)
					{
						base.direction = 1;
					}
					if (base.Center.X > Main.player[target].Center.X + 2f)
					{
						base.direction = -1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
					if (collideX)
					{
						base.velocity.X *= (0f - oldVelocity.X) * 0.5f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
					if (collideY)
					{
						base.velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
						if (base.velocity.Y > 4f)
						{
							base.velocity.Y = 4f;
						}
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y = -4f;
						}
					}
					Vector2 value43 = Main.player[target].Center - base.Center;
					value43.Y -= 200f;
					if (value43.Length() > 800f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					else if (value43.Length() > 80f)
					{
						float num1370 = 6f;
						float num1371 = 30f;
						value43.Normalize();
						value43 *= num1370;
						base.velocity = (base.velocity * (num1371 - 1f) + value43) / num1371;
					}
					else if (base.velocity.Length() > 2f)
					{
						base.velocity *= 0.95f;
					}
					else if (base.velocity.Length() < 1f)
					{
						base.velocity *= 1.05f;
					}
					if (Main.netMode == 1)
					{
						return;
					}
					this.ai[1] += 1f;
					if (justHit)
					{
						this.ai[1] += Main.rand.Next(10, 30);
					}
					if (!(this.ai[1] >= 180f))
					{
						return;
					}
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
					while (this.ai[0] == 0f)
					{
						int num1372 = Main.rand.Next(3);
						if (num1372 == 0 && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							this.ai[0] = 2f;
							continue;
						}
						switch (num1372)
						{
						case 1:
							this.ai[0] = 3f;
							break;
						case 2:
							if (CountNPCS(478) + CountNPCS(479) < num1369)
							{
								this.ai[0] = 4f;
							}
							break;
						}
					}
				}
				else if (this.ai[0] == 1f)
				{
					collideX = false;
					collideY = false;
					noTileCollide = true;
					knockBackResist = 0f;
					if (target < 0 || !Main.player[target].active || Main.player[target].dead)
					{
						TargetClosest();
					}
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 9f + base.velocity.X * 0.08f) / 10f;
					Vector2 value44 = Main.player[target].Center - base.Center;
					if (Main.netMode != 1 && value44.Length() < 300f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					float num1373 = 7f + value44.Length() / 100f;
					float num1374 = 25f;
					value44.Normalize();
					value44 *= num1373;
					base.velocity = (base.velocity * (num1374 - 1f) + value44) / num1374;
				}
				else if (this.ai[0] == 2f)
				{
					damage = (int)((double)defDamage * 0.5);
					knockBackResist = 0f;
					if (target < 0 || !Main.player[target].active || Main.player[target].dead)
					{
						TargetClosest();
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
						netUpdate = true;
					}
					if (Main.player[target].Center.X - 10f < base.Center.X)
					{
						base.direction = -1;
					}
					else if (Main.player[target].Center.X + 10f > base.Center.X)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 4f + base.velocity.X * 0.1f) / 5f;
					if (collideX)
					{
						base.velocity.X *= (0f - oldVelocity.X) * 0.5f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
					if (collideY)
					{
						base.velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
						if (base.velocity.Y > 4f)
						{
							base.velocity.Y = 4f;
						}
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y = -4f;
						}
					}
					Vector2 value45 = Main.player[target].Center - base.Center;
					value45.Y -= 20f;
					this.ai[2] += 0.0222222228f;
					if (Main.expertMode)
					{
						this.ai[2] += 0.0166666675f;
					}
					float num1375 = 4f + this.ai[2] + value45.Length() / 120f;
					float num1376 = 20f;
					value45.Normalize();
					value45 *= num1375;
					base.velocity = (base.velocity * (num1376 - 1f) + value45) / num1376;
					if (Main.netMode != 1)
					{
						this.ai[1] += 1f;
						if (this.ai[1] > 240f || !Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
					}
				}
				else if (this.ai[0] == 3f)
				{
					knockBackResist = 0f;
					noTileCollide = true;
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 4f + base.velocity.X * 0.07f) / 5f;
					Vector2 value46 = Main.player[target].Center - base.Center;
					value46.Y -= 12f;
					if (base.Center.X > Main.player[target].Center.X)
					{
						value46.X += 400f;
					}
					else
					{
						value46.X -= 400f;
					}
					if (Main.netMode != 1 && Math.Abs(base.Center.X - Main.player[target].Center.X) > 350f && Math.Abs(base.Center.Y - Main.player[target].Center.Y) < 20f)
					{
						this.ai[0] = 3.1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					this.ai[1] += 71f / (678f * (float)Math.PI);
					float num1377 = 8f + this.ai[1];
					float num1378 = 4f;
					value46.Normalize();
					value46 *= num1377;
					base.velocity = (base.velocity * (num1378 - 1f) + value46) / num1378;
				}
				else if (this.ai[0] == 3.1f)
				{
					knockBackResist = 0f;
					noTileCollide = true;
					rotation = (rotation * 4f + base.velocity.X * 0.07f) / 5f;
					Vector2 vector210 = Main.player[target].Center - base.Center;
					vector210.Y -= 12f;
					float num1379 = 16f;
					float num1380 = 8f;
					vector210.Normalize();
					vector210 *= num1379;
					base.velocity = (base.velocity * (num1380 - 1f) + vector210) / num1380;
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					this.ai[1] += 1f;
					if (Main.netMode != 1 && this.ai[1] > 10f)
					{
						base.velocity = vector210;
						if (base.velocity.X < 0f)
						{
							base.direction = -1;
						}
						else
						{
							base.direction = 1;
						}
						this.ai[0] = 3.2f;
						this.ai[1] = 0f;
						this.ai[1] = base.direction;
						netUpdate = true;
					}
				}
				else if (this.ai[0] == 3.2f)
				{
					damage = (int)((double)defDamage * 1.3);
					collideX = false;
					collideY = false;
					knockBackResist = 0f;
					noTileCollide = true;
					this.ai[2] += 71f / (678f * (float)Math.PI);
					base.velocity.X = (16f + this.ai[2]) * this.ai[1];
					if ((this.ai[1] > 0f && base.Center.X > Main.player[target].Center.X + 260f) || (this.ai[1] < 0f && base.Center.X < Main.player[target].Center.X - 260f))
					{
						if (Main.netMode != 1 && !Collision.SolidCollision(base.position, width, height))
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
						else if (Main.netMode != 1 && Math.Abs(base.Center.X - Main.player[target].Center.X) > 800f)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
						}
					}
					rotation = (rotation * 4f + base.velocity.X * 0.07f) / 5f;
				}
				else if (this.ai[0] == 4f)
				{
					TargetClosest();
					if (Main.netMode != 1)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						for (int num1381 = 0; num1381 < 1000; num1381++)
						{
							int num1382 = (int)Main.player[target].Center.X / 16;
							int num1383 = (int)Main.player[target].Center.Y / 16;
							int num1384 = 30 + num1381 / 50;
							int num1385 = 20 + num1381 / 75;
							num1382 += Main.rand.Next(-num1384, num1384 + 1);
							num1383 += Main.rand.Next(-num1385, num1385 + 1);
							if (!WorldGen.SolidTile(num1382, num1383))
							{
								for (; !WorldGen.SolidTile(num1382, num1383) && (double)num1383 < Main.worldSurface; num1383++)
								{
								}
								if ((new Vector2(num1382 * 16 + 8, num1383 * 16 + 8) - Main.player[target].Center).Length() < 600f)
								{
									this.ai[0] = 4.1f;
									this.ai[1] = num1382;
									this.ai[2] = num1383;
									break;
								}
							}
						}
					}
					netUpdate = true;
				}
				else if (this.ai[0] == 4.1f)
				{
					if (base.velocity.X < -2f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 2f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
					noTileCollide = true;
					int num1386 = (int)this.ai[1];
					int num1387 = (int)this.ai[2];
					float x3 = num1386 * 16 + 8;
					float y5 = num1387 * 16 - 20;
					Vector2 v10 = new Vector2(x3, y5);
					v10 -= base.Center;
					float num1388 = 6f + v10.Length() / 150f;
					if (num1388 > 10f)
					{
						num1388 = 10f;
					}
					float num1389 = 10f;
					if (v10.Length() < 10f)
					{
						this.ai[0] = 4.2f;
						netUpdate = true;
					}
					v10 = v10.SafeNormalize(Vector2.Zero);
					v10 *= num1388;
					base.velocity = (base.velocity * (num1389 - 1f) + v10) / num1389;
					if (base.velocity.Length() > num1388)
					{
						base.velocity.Normalize();
						base.velocity *= num1388;
					}
				}
				else
				{
					if (this.ai[0] != 4.2f)
					{
						return;
					}
					rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
					knockBackResist = 0f;
					noTileCollide = true;
					int num1390 = (int)this.ai[1];
					int num1391 = (int)this.ai[2];
					float x4 = num1390 * 16 + 8;
					float y6 = num1391 * 16 - 20;
					Vector2 value47 = new Vector2(x4, y6);
					value47 -= base.Center;
					float num1392 = 4f;
					float num1393 = 2f;
					if (Main.netMode != 1 && value47.Length() < 4f)
					{
						int num1394 = 70;
						if (Main.expertMode)
						{
							num1394 = (int)((double)num1394 * 0.75);
						}
						this.ai[3] += 1f;
						if (this.ai[3] == (float)num1394)
						{
							int num1395 = NewNPC(num1390 * 16 + 8, num1391 * 16, 478, whoAmI);
							Main.npc[num1395].netUpdate = true;
						}
						else if (this.ai[3] == (float)(num1394 * 2))
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
							this.ai[3] = 0f;
							netUpdate = true;
							if (CountNPCS(478) + CountNPCS(479) < num1369 && Main.rand.Next(3) != 0)
							{
								this.ai[0] = 4f;
							}
							else if (Collision.SolidCollision(base.position, width, height))
							{
								this.ai[0] = 1f;
							}
						}
					}
					if (value47.Length() > num1392)
					{
						value47.Normalize();
						value47 *= num1392;
					}
					base.velocity = (base.velocity * (num1393 - 1f) + value47) / num1393;
					if (base.velocity.Length() > num1392)
					{
						base.velocity.Normalize();
						base.velocity *= num1392;
					}
				}
			}
			else if (aiStyle == 89)
			{
				if (base.velocity.Y == 0f)
				{
					base.velocity.X *= 0.9f;
					rotation += base.velocity.X * 0.02f;
				}
				else
				{
					base.velocity.X *= 0.99f;
					rotation += base.velocity.X * 0.04f;
				}
				int num1396 = 900;
				if (Main.expertMode)
				{
					num1396 = 600;
				}
				if (justHit)
				{
					this.ai[0] -= Main.rand.Next(10, 21);
					if (!Main.expertMode)
					{
						this.ai[0] -= Main.rand.Next(10, 21);
					}
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= (float)num1396)
				{
					Transform(479);
				}
				if (Main.netMode != 1 && base.velocity.Y == 0f && (double)Math.Abs(base.velocity.X) < 0.2 && (double)this.ai[0] >= (double)num1396 * 0.75)
				{
					float num1397 = this.ai[0] - (float)num1396 * 0.75f;
					num1397 /= (float)num1396 * 0.25f;
					if ((float)Main.rand.Next(-10, 120) < num1397 * 100f)
					{
						base.velocity.Y -= (float)Main.rand.Next(20, 40) * 0.025f;
						base.velocity.X += (float)Main.rand.Next(-20, 20) * 0.025f;
						base.velocity *= 1f + num1397 * 2f;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 90)
			{
				noTileCollide = false;
				knockBackResist = 0.4f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				noGravity = true;
				rotation = (rotation * 9f + base.velocity.X * 0.1f) / 10f;
				if (!Main.eclipse)
				{
					EncourageDespawn(5);
					base.velocity.Y -= 0.2f;
					if (base.velocity.Y < -8f)
					{
						base.velocity.Y = -8f;
					}
					noTileCollide = true;
					return;
				}
				if (this.ai[0] == 0f || this.ai[0] == 1f)
				{
					for (int num1398 = 0; num1398 < 200; num1398++)
					{
						if (num1398 != whoAmI && Main.npc[num1398].active && Main.npc[num1398].type == type)
						{
							Vector2 vector211 = Main.npc[num1398].Center - base.Center;
							if (vector211.Length() < (float)(width + height))
							{
								vector211.Normalize();
								vector211 *= -0.1f;
								base.velocity += vector211;
								NPC nPC = Main.npc[num1398];
								nPC.velocity -= vector211;
							}
						}
					}
				}
				if (target < 0 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest();
					Vector2 vector212 = Main.player[target].Center - base.Center;
					if (Main.player[target].dead || vector212.Length() > 3000f)
					{
						this.ai[0] = -1f;
					}
				}
				else
				{
					Vector2 vector213 = Main.player[target].Center - base.Center;
					if (this.ai[0] > 1f && vector213.Length() > 1000f)
					{
						this.ai[0] = 1f;
					}
				}
				if (this.ai[0] == -1f)
				{
					Vector2 value48 = new Vector2(0f, -8f);
					base.velocity = (base.velocity * 9f + value48) / 10f;
					noTileCollide = true;
					dontTakeDamage = true;
				}
				else if (this.ai[0] == 0f)
				{
					TargetClosest();
					spriteDirection = base.direction;
					if (collideX)
					{
						base.velocity.X *= (0f - oldVelocity.X) * 0.5f;
						if (base.velocity.X > 4f)
						{
							base.velocity.X = 4f;
						}
						if (base.velocity.X < -4f)
						{
							base.velocity.X = -4f;
						}
					}
					if (collideY)
					{
						base.velocity.Y *= (0f - oldVelocity.Y) * 0.5f;
						if (base.velocity.Y > 4f)
						{
							base.velocity.Y = 4f;
						}
						if (base.velocity.Y < -4f)
						{
							base.velocity.Y = -4f;
						}
					}
					Vector2 value49 = Main.player[target].Center - base.Center;
					if (value49.Length() > 800f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					else if (value49.Length() > 200f)
					{
						float num1399 = 5.5f + value49.Length() / 100f + this.ai[1] / 15f;
						float num1400 = 40f;
						value49.Normalize();
						value49 *= num1399;
						base.velocity = (base.velocity * (num1400 - 1f) + value49) / num1400;
					}
					else if (base.velocity.Length() > 2f)
					{
						base.velocity *= 0.95f;
					}
					else if (base.velocity.Length() < 1f)
					{
						base.velocity *= 1.05f;
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 90f)
					{
						this.ai[1] = 0f;
						this.ai[0] = 2f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					collideX = false;
					collideY = false;
					noTileCollide = true;
					knockBackResist = 0f;
					if (target < 0 || !Main.player[target].active || Main.player[target].dead)
					{
						TargetClosest();
					}
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 9f + base.velocity.X * 0.08f) / 10f;
					Vector2 value50 = Main.player[target].Center - base.Center;
					if (value50.Length() < 300f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
						this.ai[2] = 0f;
						this.ai[3] = 0f;
					}
					this.ai[2] += 0.0166666675f;
					float num1401 = 5.5f + this.ai[2] + value50.Length() / 150f;
					float num1402 = 35f;
					value50.Normalize();
					value50 *= num1401;
					base.velocity = (base.velocity * (num1402 - 1f) + value50) / num1402;
				}
				else if (this.ai[0] == 2f)
				{
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					rotation = (rotation * 7f + base.velocity.X * 0.1f) / 8f;
					knockBackResist = 0f;
					noTileCollide = true;
					Vector2 vector214 = Main.player[target].Center - base.Center;
					vector214.Y -= 8f;
					float num1403 = 9f;
					float num1404 = 8f;
					vector214.Normalize();
					vector214 *= num1403;
					base.velocity = (base.velocity * (num1404 - 1f) + vector214) / num1404;
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					this.ai[1] += 1f;
					if (this.ai[1] > 10f)
					{
						base.velocity = vector214;
						if (base.velocity.X < 0f)
						{
							base.direction = -1;
						}
						else
						{
							base.direction = 1;
						}
						this.ai[0] = 2.1f;
						this.ai[1] = 0f;
					}
				}
				else
				{
					if (this.ai[0] != 2.1f)
					{
						return;
					}
					if (base.velocity.X < 0f)
					{
						base.direction = -1;
					}
					else if (base.velocity.X > 0f)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
					base.velocity *= 1.01f;
					knockBackResist = 0f;
					noTileCollide = true;
					this.ai[1] += 1f;
					int num1405 = 45;
					if (this.ai[1] > (float)num1405)
					{
						if (!Collision.SolidCollision(base.position, width, height))
						{
							this.ai[0] = 0f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
						}
						else if (this.ai[1] > (float)(num1405 * 2))
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							this.ai[2] = 0f;
						}
					}
				}
			}
			else if (aiStyle == 91)
			{
				noGravity = true;
				noTileCollide = false;
				dontTakeDamage = false;
				if (justHit && Main.netMode != 1 && Main.expertMode && Main.rand.Next(6) == 0)
				{
					netUpdate = true;
					this.ai[0] = -1f;
					this.ai[1] = 0f;
				}
				if (this.ai[0] == -1f)
				{
					dontTakeDamage = true;
					noGravity = false;
					base.velocity.X *= 0.98f;
					this.ai[1] += 1f;
					if (this.ai[1] >= 120f)
					{
						this.ai[0] = (this.ai[1] = (this.ai[2] = (this.ai[3] = 0f)));
					}
				}
				else if (this.ai[0] == 0f)
				{
					TargetClosest();
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 1f;
						return;
					}
					Vector2 vector215 = Main.player[target].Center - base.Center;
					vector215.Y -= Main.player[target].height / 4;
					float num1406 = vector215.Length();
					Vector2 center36 = base.Center;
					center36.X = Main.player[target].Center.X;
					Vector2 vector216 = center36 - base.Center;
					if (vector216.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center36, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center36.X;
						this.ai[2] = center36.Y;
						Vector2 center37 = base.Center;
						center37.Y = Main.player[target].Center.Y;
						if (vector216.Length() > 8f && Collision.CanHit(base.Center, 1, 1, center37, 1, 1) && Collision.CanHit(center37, 1, 1, Main.player[target].position, 1, 1))
						{
							this.ai[0] = 3f;
							this.ai[1] = center37.X;
							this.ai[2] = center37.Y;
						}
					}
					else
					{
						center36 = base.Center;
						center36.Y = Main.player[target].Center.Y;
						if ((center36 - base.Center).Length() > 8f && Collision.CanHit(base.Center, 1, 1, center36, 1, 1))
						{
							this.ai[0] = 3f;
							this.ai[1] = center36.X;
							this.ai[2] = center36.Y;
						}
					}
					if (this.ai[0] == 0f)
					{
						localAI[0] = 0f;
						vector215.Normalize();
						vector215 *= 0.5f;
						base.velocity += vector215;
						this.ai[0] = 4f;
						this.ai[1] = 0f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					Vector2 value51 = Main.player[target].Center - base.Center;
					float num1407 = value51.Length();
					float num1408 = 2f;
					num1408 += num1407 / 200f;
					int num1409 = 50;
					value51.Normalize();
					value51 *= num1408;
					base.velocity = (base.velocity * (num1409 - 1) + value51) / num1409;
					if (!Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					noTileCollide = true;
					Vector2 value52 = Main.player[target].Center - base.Center;
					float num1410 = value52.Length();
					float num1411 = 2f;
					int num1412 = 4;
					value52.Normalize();
					value52 *= num1411;
					base.velocity = (base.velocity * (num1412 - 1) + value52) / num1412;
					if (num1410 < 600f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 3f)
				{
					Vector2 value53 = new Vector2(this.ai[1], this.ai[2]);
					Vector2 value54 = value53 - base.Center;
					float num1413 = value54.Length();
					float num1414 = 1f;
					float num1415 = 3f;
					value54.Normalize();
					value54 *= num1414;
					base.velocity = (base.velocity * (num1415 - 1f) + value54) / num1415;
					if (collideX || collideY)
					{
						this.ai[0] = 4f;
						this.ai[1] = 0f;
					}
					if (num1413 < num1414 || num1413 > 800f || Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
				}
				else
				{
					if (this.ai[0] != 4f)
					{
						return;
					}
					if (collideX)
					{
						base.velocity.X *= -0.8f;
					}
					if (collideY)
					{
						base.velocity.Y *= -0.8f;
					}
					Vector2 value55;
					if (base.velocity.X == 0f && base.velocity.Y == 0f)
					{
						value55 = Main.player[target].Center - base.Center;
						value55.Y -= Main.player[target].height / 4;
						value55.Normalize();
						base.velocity = value55 * 0.1f;
					}
					float num1416 = 1.5f;
					float num1417 = 20f;
					value55 = base.velocity;
					value55.Normalize();
					value55 *= num1416;
					base.velocity = (base.velocity * (num1417 - 1f) + value55) / num1417;
					this.ai[1] += 1f;
					if (this.ai[1] > 180f)
					{
						this.ai[0] = 0f;
						this.ai[1] = 0f;
					}
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						this.ai[0] = 0f;
					}
					localAI[0] += 1f;
					if (!(localAI[0] >= 5f) || Collision.SolidCollision(base.position - new Vector2(10f, 10f), width + 20, height + 20))
					{
						return;
					}
					localAI[0] = 0f;
					Vector2 center38 = base.Center;
					center38.X = Main.player[target].Center.X;
					if (Collision.CanHit(base.Center, 1, 1, center38, 1, 1) && Collision.CanHit(base.Center, 1, 1, center38, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center38, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center38.X;
						this.ai[2] = center38.Y;
						return;
					}
					center38 = base.Center;
					center38.Y = Main.player[target].Center.Y;
					if (Collision.CanHit(base.Center, 1, 1, center38, 1, 1) && Collision.CanHit(Main.player[target].Center, 1, 1, center38, 1, 1))
					{
						this.ai[0] = 3f;
						this.ai[1] = center38.X;
						this.ai[2] = center38.Y;
					}
				}
			}
			else if (aiStyle == 92)
			{
				if (Main.rand.Next(20) == 0)
				{
					switch (Main.rand.Next(15, 18))
					{
					case 15:
						HitSound = SoundID.NPCHit15;
						break;
					case 16:
						HitSound = SoundID.NPCHit16;
						break;
					case 17:
						HitSound = SoundID.NPCHit17;
						break;
					}
				}
				if (Main.netMode == 1)
				{
					return;
				}
				bool flag85 = false;
				int num1418 = (int)this.ai[0];
				int num1419 = (int)this.ai[1];
				if (!flag85 && (!Main.tile[num1418, num1419].active() || Main.tile[num1418, num1419].type != 378))
				{
					flag85 = true;
				}
				if (!flag85 && (target == 255 || Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 160000f))
				{
					TargetClosest(faceTarget: false);
					if (target == 255 || Main.player[target].dead || Vector2.Distance(base.Center, Main.player[target].Center) > 160000f)
					{
						flag85 = true;
					}
				}
				if (flag85)
				{
					life = 0;
					HitEffect();
					active = false;
					int num1420 = TETrainingDummy.Find((int)this.ai[0], (int)this.ai[1]);
					if (num1420 != -1)
					{
						((TETrainingDummy)TileEntity.ByID[num1420]).Deactivate();
					}
				}
			}
			else if (aiStyle == 93)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num1421 = 0; num1421 < 4; num1421++)
					{
						int num1422 = NewNPC((int)base.Center.X + num1421 * 40 - 150, (int)base.Center.Y, 492, whoAmI);
						Main.npc[num1422].netUpdate = true;
						Main.npc[num1422].ai[0] = whoAmI;
						Main.npc[num1422].ai[1] = num1421;
						Main.npc[num1422].ai[3] = 60 * num1421;
						Main.npc[num1422].TargetClosest(faceTarget: false);
						Main.npc[num1422].timeLeft = 600;
						this.ai[num1421] = num1422;
					}
				}
				bool flag86 = true;
				for (int num1423 = 0; num1423 < 4; num1423++)
				{
					if (this.ai[num1423] >= 0f && (!Main.npc[(int)this.ai[num1423]].active || Main.npc[(int)this.ai[num1423]].type != 492))
					{
						this.ai[num1423] = -1f;
						netUpdate = true;
					}
					else if (this.ai[num1423] >= 0f)
					{
						flag86 = false;
					}
				}
				if (flag86)
				{
					life = 0;
					HitEffect(9999);
					checkDead();
					return;
				}
				if (Main.netMode != 1 && Main.rand.Next(300) == 0)
				{
					Vector2 vector217 = new Vector2((Main.rand.NextFloat() - 0.5f) * (float)(width - 70), (Main.rand.NextFloat() - 0.5f) * 20f - (float)(height / 2) - 20f).RotatedBy(rotation);
					vector217 += base.Center;
					int num1424 = NewNPC((int)vector217.X, (int)vector217.Y, Utils.SelectRandom<int>(Main.rand, 213, 215, 214, 212));
					Main.npc[num1424].velocity = new Vector2((Main.rand.NextFloat() - 0.5f) * 5f, -8.01f) + base.velocity;
					Main.npc[num1424].netUpdate = true;
					Main.npc[num1424].timeLeft = 600;
				}
				if ((localAI[3] += 1f) >= 64f)
				{
					localAI[3] = 0f;
				}
				TargetClosest();
				int num1425 = (int)base.Center.X / 16 + Math.Sign(base.velocity.X) * 10;
				int num1426 = (int)(base.position.Y + (float)height) / 16;
				int num1427 = 0;
				if (Main.tile[num1425, num1426].nactive() && Main.tileSolid[Main.tile[num1425, num1426].type] && !Main.tileSolidTop[Main.tile[num1425, num1426].type])
				{
					num1427 = 1;
				}
				else
				{
					for (; num1427 < 150 && num1426 + num1427 < Main.maxTilesY; num1427++)
					{
						int num1428 = num1426 + num1427;
						if (Main.tile[num1425, num1428].nactive() && Main.tileSolid[Main.tile[num1425, num1428].type] && !Main.tileSolidTop[Main.tile[num1425, num1428].type])
						{
							num1427--;
							break;
						}
					}
				}
				float num1429 = num1427 * 16;
				if (num1429 < 350f)
				{
					float num1430 = num1429 - 350f;
					if (num1430 < -4f)
					{
						num1430 = -4f;
					}
					base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1430, 0.05f);
				}
				else if (num1429 > 450f)
				{
					float num1431 = num1429 - 350f;
					if (num1431 > 4f)
					{
						num1431 = 4f;
					}
					base.velocity.Y = MathHelper.Lerp(base.velocity.Y, num1431, 0.05f);
				}
				else
				{
					base.velocity.Y *= 0.95f;
				}
				float num1432 = Main.player[target].Center.X - base.Center.X;
				if (Math.Abs(num1432) >= 300f && (Math.Abs(base.velocity.X) < 6f || Math.Sign(base.velocity.X) != base.direction))
				{
					base.velocity.X += (float)base.direction * 0.06f;
				}
				rotation = base.velocity.X * 0.025f;
				spriteDirection = -Math.Sign(base.velocity.X);
				for (int num1433 = 0; num1433 < 2; num1433++)
				{
					if (Main.rand.Next(2) != 0)
					{
						Vector2 value56 = new Vector2((Main.rand.NextFloat() - 0.5f) * (float)(width - 70), (Main.rand.NextFloat() - 0.5f) * 20f + (float)(height / 2) + 10f).RotatedBy(rotation);
						Dust dust8 = Main.dust[Dust.NewDust(base.Center, 0, 0, 228)];
						dust8.position = base.Center + value56;
						dust8.velocity = Vector2.Zero;
						dust8.noGravity = true;
						dust8.noLight = true;
						dust8.fadeIn = 1.5f;
						dust8.scale = 0.5f;
					}
				}
			}
			else if (aiStyle == 94)
			{
				if (this.ai[2] == 1f)
				{
					base.velocity = Vector2.UnitY * base.velocity.Length();
					if (base.velocity.Y < 0.25f)
					{
						base.velocity.Y += 0.02f;
					}
					if (base.velocity.Y > 0.25f)
					{
						base.velocity.Y -= 0.02f;
					}
					dontTakeDamage = true;
					this.ai[1]++;
					if (this.ai[1] > 120f)
					{
						Opacity = 1f - (this.ai[1] - 120f) / 60f;
					}
					int num1434 = 6;
					switch (type)
					{
					case 517:
						num1434 = 127;
						break;
					case 422:
						num1434 = 229;
						break;
					case 507:
						num1434 = 242;
						break;
					case 493:
						num1434 = 135;
						break;
					}
					if (Main.rand.Next(5) == 0 && this.ai[1] < 120f)
					{
						for (int num1435 = 0; num1435 < 3; num1435++)
						{
							Dust dust9 = Main.dust[Dust.NewDust(base.Left, width, height / 2, num1434)];
							dust9.position = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) * new Vector2((float)width * 1.5f, (float)height * 1.1f) * 0.8f * (0.8f + Main.rand.NextFloat() * 0.2f);
							dust9.velocity.X = 0f;
							dust9.velocity.Y = (0f - Math.Abs(dust9.velocity.Y - (float)num1435 + base.velocity.Y - 4f)) * 3f;
							dust9.noGravity = true;
							dust9.fadeIn = 1f;
							dust9.scale = 1f + Main.rand.NextFloat() + (float)num1435 * 0.3f;
						}
					}
					if (this.ai[1] < 150f)
					{
						for (int num1436 = 0; num1436 < 3; num1436++)
						{
							if (Main.rand.Next(4) == 0)
							{
								Dust dust10 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1436), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1436)), 20, num1434)];
								dust10.velocity.X = 0f;
								dust10.velocity.Y = (0f - Math.Abs(dust10.velocity.Y - (float)num1436 + base.velocity.Y - 4f)) * (1f + this.ai[1] / 180f * 0.5f);
								dust10.noGravity = true;
								dust10.fadeIn = 1f;
								dust10.scale = 1f + Main.rand.NextFloat() + (float)num1436 * 0.3f;
							}
						}
					}
					if (Main.rand.Next(5) == 0 && this.ai[1] < 150f)
					{
						for (int num1437 = 0; num1437 < 3; num1437++)
						{
							Vector2 position7 = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) * new Vector2(width, height) * 0.7f * Main.rand.NextFloat();
							float num1438 = 1f + Main.rand.NextFloat() * 2f + this.ai[1] / 180f * 4f;
							for (int num1439 = 0; num1439 < 6; num1439++)
							{
								Dust dust11 = Main.dust[Dust.NewDust(position7, 4, 4, num1434)];
								dust11.position = position7;
								dust11.velocity.X *= num1438;
								dust11.velocity.Y = (0f - Math.Abs(dust11.velocity.Y)) * num1438;
								dust11.noGravity = true;
								dust11.fadeIn = 1f;
								dust11.scale = 1.5f + Main.rand.NextFloat() + (float)num1439 * 0.13f;
							}
							SoundEngine.PlaySound(3, position7, Utils.SelectRandom<int>(Main.rand, 1, 18));
						}
					}
					if (Main.rand.Next(3) != 0 && this.ai[1] < 150f)
					{
						Dust dust12 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust12.position = base.Center + Vector2.UnitY.RotatedByRandom(4.1887903213500977) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust12.velocity.X = 0f;
						dust12.velocity.Y = Math.Abs(dust12.velocity.Y) * 0.25f;
					}
					if (this.ai[1] % 60f == 1f)
					{
						SoundEngine.PlaySound(4, base.Center, 22);
					}
					if (this.ai[1] >= 180f)
					{
						life = 0;
						HitEffect(0, 1337.0);
						checkDead();
					}
					return;
				}
				if (this.ai[3] > 0f)
				{
					bool flag87 = dontTakeDamage;
					switch (type)
					{
					case 517:
						flag87 = ShieldStrengthTowerSolar != 0;
						break;
					case 422:
						flag87 = ShieldStrengthTowerVortex != 0;
						break;
					case 507:
						flag87 = ShieldStrengthTowerNebula != 0;
						break;
					case 493:
						flag87 = ShieldStrengthTowerStardust != 0;
						break;
					}
					if (flag87 != dontTakeDamage)
					{
						SoundEngine.PlaySound(SoundID.NPCDeath58, base.position);
					}
					else if (this.ai[3] == 1f)
					{
						SoundEngine.PlaySound(SoundID.NPCDeath3, base.position);
					}
					this.ai[3]++;
					if (this.ai[3] > 120f)
					{
						this.ai[3] = 0f;
					}
				}
				switch (type)
				{
				case 517:
					dontTakeDamage = ShieldStrengthTowerSolar != 0;
					break;
				case 422:
					dontTakeDamage = ShieldStrengthTowerVortex != 0;
					break;
				case 507:
					dontTakeDamage = ShieldStrengthTowerNebula != 0;
					break;
				case 493:
					dontTakeDamage = ShieldStrengthTowerStardust != 0;
					break;
				}
				TargetClosest(faceTarget: false);
				if (Main.player[target].Distance(base.Center) > 2000f)
				{
					localAI[0]++;
				}
				if (localAI[0] >= 60f && Main.netMode != 1)
				{
					localAI[0] = 0f;
					netUpdate = true;
					life = (int)MathHelper.Clamp(life + 200, 0f, lifeMax);
				}
				else
				{
					localAI[0] = 0f;
				}
				base.velocity = new Vector2(0f, (float)Math.Sin((float)Math.PI * 2f * this.ai[0] / 300f) * 0.5f);
				Point origin = base.Bottom.ToTileCoordinates();
				int maxDistance = 10;
				int num1440 = 20;
				int num1441 = 30;
				if (WorldGen.InWorld(origin.X, origin.Y, 20) && Main.tile[origin.X, origin.Y] != null)
				{
					if (WorldUtils.Find(origin, Searches.Chain(new Searches.Down(maxDistance), new GameManager.WorldBuilding.Conditions.IsSolid()), out var result))
					{
						float num1442 = 1f - (float)Math.Abs(origin.Y - result.Y) / 10f;
						base.position.Y -= 1.5f * num1442;
					}
					else if (!WorldUtils.Find(origin, Searches.Chain(new Searches.Down(num1440), new GameManager.WorldBuilding.Conditions.IsSolid()), out result))
					{
						float num1443 = 1f;
						if (WorldUtils.Find(origin, Searches.Chain(new Searches.Down(num1441), new GameManager.WorldBuilding.Conditions.IsSolid()), out result))
						{
							num1443 = Utils.GetLerpValue(num1440, num1441, Math.Abs(origin.Y - result.Y), clamped: true);
						}
						base.position.Y += 1.5f * num1443;
					}
				}
				if ((double)base.Bottom.Y > Main.worldSurface * 16.0 - 100.0)
				{
					base.position.Y = (float)Main.worldSurface * 16f - (float)height - 100f;
				}
				this.ai[0]++;
				if (this.ai[0] >= 300f)
				{
					this.ai[0] = 0f;
					netUpdate = true;
				}
				if (type == 493)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust13 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust13.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust13.velocity.X = 0f;
						dust13.velocity.Y = Math.Abs(dust13.velocity.Y) * 0.25f;
					}
					for (int num1444 = 0; num1444 < 3; num1444++)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust dust14 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1444), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1444)), 20, 135)];
							dust14.velocity.X = 0f;
							dust14.velocity.Y = (0f - Math.Abs(dust14.velocity.Y - (float)num1444 + base.velocity.Y - 4f)) * 1f;
							dust14.noGravity = true;
							dust14.fadeIn = 1f;
							dust14.scale = 1f + Main.rand.NextFloat() + (float)num1444 * 0.3f;
						}
					}
					if (this.ai[1] > 0f)
					{
						this.ai[1]--;
					}
					if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - base.position.Y < 400f)
					{
						List<int> list = new List<int>();
						if (CountNPCS(405) + CountNPCS(406) < 2)
						{
							list.Add(405);
						}
						if (CountNPCS(402) < 2)
						{
							list.Add(402);
						}
						if (CountNPCS(407) < 1)
						{
							list.Add(407);
						}
						if (list.Count > 0)
						{
							int num1445 = Utils.SelectRandom(Main.rand, list.ToArray());
							this.ai[1] = 30 * Main.rand.Next(5, 16);
							int num1446 = Main.rand.Next(3, 6);
							int num1447 = Main.rand.Next(0, 4);
							int num1448 = 0;
							List<Tuple<Vector2, int, int>> list2 = new List<Tuple<Vector2, int, int>>();
							List<Vector2> list3 = new List<Vector2>();
							list2.Add(Tuple.Create(base.Top - Vector2.UnitY * 120f, num1446, 0));
							int num1449 = 0;
							int num1450 = list2.Count;
							while (list2.Count > 0)
							{
								Vector2 item = list2[0].Item1;
								int num1451 = 1;
								int num1452 = 1;
								if (num1449 > 0 && num1447 > 0 && (Main.rand.Next(3) != 0 || num1449 == 1))
								{
									num1452 = Main.rand.Next(Math.Max(1, list2[0].Item2));
									num1451++;
									num1447--;
								}
								for (int num1453 = 0; num1453 < num1451; num1453++)
								{
									int num1454 = list2[0].Item3;
									if (num1449 == 0)
									{
										num1454 = Utils.SelectRandom<int>(Main.rand, -1, 1);
									}
									else if (num1453 == 1)
									{
										num1454 *= -1;
									}
									float num1455 = ((num1449 % 2 == 0) ? 0f : ((float)Math.PI)) + (0.5f - Main.rand.NextFloat()) * ((float)Math.PI / 4f) + (float)num1454 * ((float)Math.PI / 4f) * (float)(num1449 % 2 == 0).ToDirectionInt();
									float scaleFactor8 = 100f + 50f * Main.rand.NextFloat();
									int num1456 = list2[0].Item2;
									if (num1453 != 0)
									{
										num1456 = num1452;
									}
									if (num1449 == 0)
									{
										num1455 = (0.5f - Main.rand.NextFloat()) * ((float)Math.PI / 4f);
										scaleFactor8 = 100f + 100f * Main.rand.NextFloat();
									}
									Vector2 value57 = (-Vector2.UnitY).RotatedBy(num1455) * scaleFactor8;
									if (num1456 - 1 < 0)
									{
										value57 = Vector2.Zero;
									}
									num1448 = Projectile.NewProjectile(item.X, item.Y, value57.X, value57.Y, 540, 0, 0f, Main.myPlayer, (float)(-num1449) * 10f, 0.5f + Main.rand.NextFloat() * 0.5f);
									list3.Add(item + value57);
									if (num1449 < num1446 && list2[0].Item2 > 0)
									{
										list2.Add(Tuple.Create(item + value57, num1456 - 1, num1454));
									}
								}
								list2.Remove(list2[0]);
								int num207 = num1450 - 1;
								num1450 = num207;
								if (num207 == 0)
								{
									num1450 = list2.Count;
									num1449++;
								}
							}
							Main.projectile[num1448].localAI[0] = num1445;
						}
						else
						{
							this.ai[1] = 30f;
						}
					}
				}
				if (type == 507)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust15 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust15.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust15.velocity.X = 0f;
						dust15.velocity.Y = Math.Abs(dust15.velocity.Y) * 0.25f;
					}
					for (int num1457 = 0; num1457 < 3; num1457++)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust dust16 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1457), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1457)), 20, 242)];
							dust16.velocity.X = 0f;
							dust16.velocity.Y = (0f - Math.Abs(dust16.velocity.Y - (float)num1457 + base.velocity.Y - 4f)) * 1f;
							dust16.noGravity = true;
							dust16.fadeIn = 1f;
							dust16.color = Color.Black;
							dust16.scale = 1f + Main.rand.NextFloat() + (float)num1457 * 0.3f;
						}
					}
				}
				if (type == 422)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust17 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
						dust17.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
						dust17.velocity.X = 0f;
						dust17.velocity.Y = Math.Abs(dust17.velocity.Y) * 0.25f;
					}
					for (int num1458 = 0; num1458 < 3; num1458++)
					{
						if (Main.rand.Next(5) == 0)
						{
							Dust dust18 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1458), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1458)), 20, 229)];
							dust18.velocity.X = 0f;
							dust18.velocity.Y = (0f - Math.Abs(dust18.velocity.Y - (float)num1458 + base.velocity.Y - 4f)) * 1f;
							dust18.noGravity = true;
							dust18.fadeIn = 1f;
							dust18.color = Color.Black;
							dust18.scale = 1f + Main.rand.NextFloat() + (float)num1458 * 0.3f;
						}
					}
					if (this.ai[1] > 0f)
					{
						this.ai[1]--;
					}
					if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 3240f && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						this.ai[1] = 60 + Main.rand.Next(120);
						Point point10 = Main.player[target].Top.ToTileCoordinates();
						bool flag88 = CountNPCS(427) + CountNPCS(426) < 14;
						for (int num1459 = 0; num1459 < 10; num1459++)
						{
							if (WorldGen.SolidTile(point10.X, point10.Y))
							{
								break;
							}
							if (point10.Y <= 10)
							{
								break;
							}
							point10.Y--;
						}
						if (flag88)
						{
							Projectile.NewProjectile(point10.X * 16 + 8, point10.Y * 16 + 24, 0f, 0f, 579, 0, 0f, Main.myPlayer);
						}
						else
						{
							Projectile.NewProjectile(point10.X * 16 + 8, point10.Y * 16 + 17, 0f, 0f, 578, 0, 1f, Main.myPlayer);
						}
					}
					if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - base.position.Y < 400f && CountNPCS(427) + CountNPCS(426) * 3 + CountNPCS(428) < 20)
					{
						this.ai[1] = 420 + Main.rand.Next(360);
						Point point11 = base.Center.ToTileCoordinates();
						Point point12 = Main.player[target].Center.ToTileCoordinates();
						Vector2 vector218 = Main.player[target].Center - base.Center;
						int num1460 = 20;
						int num1461 = 3;
						int num1462 = 8;
						int num1463 = 2;
						int num1464 = 0;
						bool flag89 = false;
						if (vector218.Length() > 2000f)
						{
							flag89 = true;
						}
						while (!flag89 && num1464 < 100)
						{
							num1464++;
							int num1465 = Main.rand.Next(point12.X - num1460, point12.X + num1460 + 1);
							int num1466 = Main.rand.Next(point12.Y - num1460, point12.Y + num1460 + 1);
							if ((num1466 < point12.Y - num1462 || num1466 > point12.Y + num1462 || num1465 < point12.X - num1462 || num1465 > point12.X + num1462) && (num1466 < point11.Y - num1461 || num1466 > point11.Y + num1461 || num1465 < point11.X - num1461 || num1465 > point11.X + num1461) && !Main.tile[num1465, num1466].nactive())
							{
								bool flag90 = true;
								if (flag90 && Main.tile[num1465, num1466].lava())
								{
									flag90 = false;
								}
								if (flag90 && Collision.SolidTiles(num1465 - num1463, num1465 + num1463, num1466 - num1463, num1466 + num1463))
								{
									flag90 = false;
								}
								if (flag90 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
								{
									flag90 = false;
								}
								if (flag90)
								{
									Projectile.NewProjectile(num1465 * 16 + 8, num1466 * 16 + 8, 0f, 0f, 579, 0, 0f, Main.myPlayer);
									flag89 = true;
									break;
								}
							}
						}
					}
				}
				if (type != 517)
				{
					return;
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust dust19 = Main.dust[Dust.NewDust(base.Left, width, height / 2, 241)];
					dust19.position = base.Center + Vector2.UnitY.RotatedByRandom(2.0943951606750488) * new Vector2(width / 2, height / 2) * (0.8f + Main.rand.NextFloat() * 0.2f);
					dust19.velocity.X = 0f;
					dust19.velocity.Y = Math.Abs(dust19.velocity.Y) * 0.25f;
				}
				for (int num1467 = 0; num1467 < 3; num1467++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust20 = Main.dust[Dust.NewDust(base.Top + new Vector2((float)(-width) * (0.33f - 0.11f * (float)num1467), -20f), (int)((float)width * (0.66f - 0.22f * (float)num1467)), 20, 6)];
						dust20.velocity.X = 0f;
						dust20.velocity.Y = (0f - Math.Abs(dust20.velocity.Y - (float)num1467 + base.velocity.Y - 4f)) * 1f;
						dust20.noGravity = true;
						dust20.fadeIn = 1f;
						dust20.scale = 1f + Main.rand.NextFloat() + (float)num1467 * 0.3f;
					}
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1]--;
				}
				if (Main.netMode != 1 && this.ai[1] <= 0f && Main.player[target].active && !Main.player[target].dead && Distance(Main.player[target].Center) < 1080f && Main.player[target].position.Y - base.position.Y < 700f)
				{
					Vector2 vector219 = base.Top + new Vector2((float)(-width) * 0.33f, -20f) + new Vector2((float)width * 0.66f, 20f) * Utils.RandomVector2(Main.rand, 0f, 1f);
					Vector2 velocity9 = -Vector2.UnitY.RotatedByRandom(0.78539818525314331) * (7f + Main.rand.NextFloat() * 5f);
					int num1468 = NewNPC((int)vector219.X, (int)vector219.Y, 519, whoAmI);
					Main.npc[num1468].velocity = velocity9;
					Main.npc[num1468].netUpdate = true;
					this.ai[1] = 60f;
				}
			}
			else if (aiStyle == 95)
			{
				float num1469 = 300f;
				if (base.velocity.Length() > 4f)
				{
					base.velocity *= 0.95f;
				}
				base.velocity *= 0.99f;
				this.ai[0]++;
				float num1470 = MathHelper.Clamp(this.ai[0] / num1469, 0f, 1f);
				scale = 1f + 0.3f * num1470;
				if (this.ai[0] >= num1469)
				{
					if (Main.netMode != 1)
					{
						Transform(405);
						netUpdate = true;
					}
					return;
				}
				rotation += base.velocity.X * 0.1f;
				if (!(this.ai[0] > 20f))
				{
					return;
				}
				Vector2 center39 = base.Center;
				int num1471 = (int)(this.ai[0] / (num1469 / 2f));
				for (int num1472 = 0; num1472 < num1471 + 1; num1472++)
				{
					if (Main.rand.Next(2) != 0)
					{
						int num1473 = 226;
						float num1474 = 0.4f;
						if (num1472 % 2 == 1)
						{
							num1473 = 226;
							num1474 = 0.65f;
						}
						Vector2 vector220 = center39 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (12f - (float)(num1471 * 2));
						int num1475 = Dust.NewDust(vector220 - Vector2.One * 12f, 24, 24, num1473, base.velocity.X / 2f, base.velocity.Y / 2f);
						Dust dust = Main.dust[num1475];
						dust.position -= new Vector2(2f);
						Main.dust[num1475].velocity = Vector2.Normalize(center39 - vector220) * 1.5f * (10f - (float)num1471 * 2f) / 10f;
						Main.dust[num1475].noGravity = true;
						Main.dust[num1475].scale = num1474;
						Main.dust[num1475].customData = this;
					}
				}
			}
			else if (aiStyle == 96)
			{
				float num1476 = 5f;
				float moveSpeed = 0.15f;
				TargetClosest();
				Vector2 desiredVelocity3 = Main.player[target].Center - base.Center + new Vector2(0f, -250f);
				float num1477 = desiredVelocity3.Length();
				if (num1477 < 20f)
				{
					desiredVelocity3 = base.velocity;
				}
				else if (num1477 < 40f)
				{
					desiredVelocity3.Normalize();
					desiredVelocity3 *= num1476 * 0.35f;
				}
				else if (num1477 < 80f)
				{
					desiredVelocity3.Normalize();
					desiredVelocity3 *= num1476 * 0.65f;
				}
				else
				{
					desiredVelocity3.Normalize();
					desiredVelocity3 *= num1476;
				}
				SimpleFlyMovement(desiredVelocity3, moveSpeed);
				rotation = base.velocity.X * 0.1f;
				if (!((this.ai[0] += 1f) >= 70f))
				{
					return;
				}
				this.ai[0] = 0f;
				if (Main.netMode != 1)
				{
					Vector2 vector221 = Vector2.Zero;
					while (Math.Abs(vector221.X) < 1.5f)
					{
						vector221 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(5f, 3f);
					}
					Projectile.NewProjectile(base.Center.X, base.Center.Y, vector221.X, vector221.Y, 539, 60, 0f, Main.myPlayer, 0f, whoAmI);
				}
			}
			else if (aiStyle == 97)
			{
				float num1478 = 7f;
				int num1479 = 480;
				if (localAI[2] < 180f)
				{
					localAI[2]++;
					if (Main.netMode != 1 && localAI[2] % 60f == 0f)
					{
						Vector2 vector222 = Vector2.Zero;
						while (Math.Abs(vector222.X) < 1.5f)
						{
							vector222 = Vector2.UnitY.RotatedByRandom(1.5707963705062866) * new Vector2(4f, 2.5f);
						}
						Projectile.NewProjectile(base.Center.X, base.Center.Y, vector222.X, vector222.Y, 574, 0, 0f, Main.myPlayer, 0f, whoAmI);
					}
				}
				if (localAI[1] == 1f)
				{
					localAI[1] = 0f;
					if (Main.rand.Next(4) == 0)
					{
						this.ai[0] = num1479;
					}
				}
				TargetClosest();
				if (Main.netMode != 1 && (!Main.player[target].active || Main.player[target].dead))
				{
					this.ai[0] = 0f;
					this.ai[1] = 1f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				rotation = Math.Abs(base.velocity.X) * (float)base.direction * 0.1f;
				spriteDirection = -base.direction;
				Vector2 value58 = base.Center + new Vector2(base.direction * 20, 6f);
				Vector2 vector223 = Main.player[target].Center - value58;
				bool flag91 = Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1);
				bool flag92 = false;
				if (this.ai[1] == 1f)
				{
					if (localAI[3] == 0f)
					{
						localAI[3] = 1f;
						this.ai[3] = 3f;
						SoundEngine.PlaySound(SoundID.Item8, base.Center);
						for (int num1480 = 0; num1480 < 20; num1480++)
						{
							int num1481 = Dust.NewDust(base.position, width, height, 242);
							Dust dust = Main.dust[num1481];
							dust.velocity *= 3f;
							Main.dust[num1481].noGravity = true;
							Main.dust[num1481].scale = 2.5f;
						}
					}
					this.ai[3]--;
					if (this.ai[3] <= 0f)
					{
						active = false;
						netUpdate = true;
					}
					return;
				}
				if (vector223.Length() > 400f || !flag91)
				{
					Vector2 value59 = vector223;
					if (value59.Length() > num1478)
					{
						value59.Normalize();
						value59 *= num1478;
					}
					int num1482 = 30;
					base.velocity = (base.velocity * (num1482 - 1) + value59) / num1482;
				}
				else
				{
					base.velocity *= 0.98f;
					flag92 = true;
				}
				if (this.ai[2] != 0f && this.ai[3] != 0f)
				{
					SoundEngine.PlaySound(SoundID.Item8, base.Center);
					for (int num1483 = 0; num1483 < 20; num1483++)
					{
						int num1484 = Dust.NewDust(base.position, width, height, 242);
						Dust dust = Main.dust[num1484];
						dust.velocity *= 3f;
						Main.dust[num1484].noGravity = true;
						Main.dust[num1484].scale = 2.5f;
					}
					base.Center = new Vector2(this.ai[2] * 16f, this.ai[3] * 16f);
					base.velocity = Vector2.Zero;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
					SoundEngine.PlaySound(SoundID.Item8, base.Center);
					for (int num1485 = 0; num1485 < 20; num1485++)
					{
						int num1486 = Dust.NewDust(base.position, width, height, 242);
						Dust dust = Main.dust[num1486];
						dust.velocity *= 3f;
						Main.dust[num1486].noGravity = true;
						Main.dust[num1486].scale = 2.5f;
					}
				}
				this.ai[0]++;
				if (this.ai[0] >= (float)num1479 && Main.netMode != 1)
				{
					this.ai[0] = 0f;
					Point point13 = base.Center.ToTileCoordinates();
					Point point14 = Main.player[target].Center.ToTileCoordinates();
					int num1487 = 20;
					int num1488 = 3;
					int num1489 = 10;
					int num1490 = 1;
					int num1491 = 0;
					bool flag93 = false;
					if (vector223.Length() > 2000f)
					{
						flag93 = true;
					}
					while (!flag93 && num1491 < 100)
					{
						num1491++;
						int num1492 = Main.rand.Next(point14.X - num1487, point14.X + num1487 + 1);
						int num1493 = Main.rand.Next(point14.Y - num1487, point14.Y + num1487 + 1);
						if ((num1493 < point14.Y - num1489 || num1493 > point14.Y + num1489 || num1492 < point14.X - num1489 || num1492 > point14.X + num1489) && (num1493 < point13.Y - num1488 || num1493 > point13.Y + num1488 || num1492 < point13.X - num1488 || num1492 > point13.X + num1488) && !Main.tile[num1492, num1493].nactive())
						{
							bool flag94 = true;
							if (flag94 && Main.tile[num1492, num1493].lava())
							{
								flag94 = false;
							}
							if (flag94 && Collision.SolidTiles(num1492 - num1490, num1492 + num1490, num1493 - num1490, num1493 + num1490))
							{
								flag94 = false;
							}
							if (flag94)
							{
								this.ai[1] = 20f;
								this.ai[2] = num1492;
								this.ai[3] = num1493;
								flag93 = true;
								break;
							}
						}
					}
					netUpdate = true;
				}
				if (flag92 && base.velocity.Length() < 2f && Main.netMode != 1)
				{
					localAI[0] += 1f;
					_ = localAI[0];
					_ = 13f;
				}
			}
			else if (aiStyle == 98)
			{
				noTileCollide = false;
				if (this.ai[0] == 0f)
				{
					TargetClosest();
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				bool flag95 = Collision.CanHit(base.Center, 1, 1, Main.player[target].position, 1, 1);
				bool flag96 = true;
				if (!flag95 || Main.player[target].dead)
				{
					flag96 = false;
				}
				else
				{
					int num1494 = (int)(Main.player[target].Center.X / 16f);
					int num1495 = (int)(Main.player[target].Center.Y / 16f);
					for (int num1496 = num1494 - 2; num1496 <= num1494 + 2; num1496++)
					{
						for (int num1497 = num1495; num1497 <= num1495 + 25; num1497++)
						{
							if (WorldGen.SolidTile2(num1496, num1497))
							{
								flag96 = false;
							}
						}
					}
				}
				if (this.ai[0] < 0f)
				{
					Vector2 vector224 = Main.player[target].Center - base.Center;
					float num1498 = vector224.Length();
					if (this.ai[0] == -1f)
					{
						vector224.Normalize();
						if (vector224.HasNaNs())
						{
							vector224 = new Vector2(base.direction, 0f);
						}
						float num1499 = 8f + num1498 / 100f;
						float num1500 = 12f;
						if (Main.player[target].velocity.Length() > num1500)
						{
							num1500 = Main.player[target].velocity.Length();
						}
						if (num1499 > num1500)
						{
							num1499 = num1500;
						}
						vector224 *= num1499;
						float num1501 = 10f;
						base.velocity = (base.velocity * (num1501 - 1f) + vector224) / num1501;
						for (int num1502 = 0; num1502 < 200; num1502++)
						{
							if (Main.npc[num1502].active && Main.npc[num1502].type == type && num1502 != whoAmI)
							{
								Vector2 vector225 = Main.npc[num1502].Center - base.Center;
								if (vector225.Length() < 40f)
								{
									vector225.Normalize();
									vector225 *= 1f;
									base.velocity -= vector225;
								}
							}
						}
						rotation += base.velocity.X * 0.03f;
						if ((double)rotation < -6.2831)
						{
							rotation += 6.2831f;
						}
						if ((double)rotation > 6.2831)
						{
							rotation -= 6.2831f;
						}
						if (base.velocity.X > 0f)
						{
							base.direction = 1;
						}
						else if (base.velocity.X < 0f)
						{
							base.direction = -1;
						}
						spriteDirection = base.direction;
					}
					this.ai[1] += 1f;
					if (this.ai[1] >= 60f && !flag96)
					{
						this.ai[0] = 0f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					rotation *= 0.92f;
					if ((double)Math.Abs(rotation) < 0.02)
					{
						rotation = 0f;
					}
					int num1503 = 300;
					float num1504 = Math.Abs(base.Center.X - Main.player[target].Center.X);
					if (num1504 < (float)num1503 && Collision.CanHit(base.Center, 1, 1, Main.player[target].position, 1, 1))
					{
						base.velocity.X *= 0.96f;
						base.velocity.Y *= 0.96f;
						this.ai[1] += 1f;
						if (this.ai[1] == 20f)
						{
							if (Main.netMode != 1)
							{
								int num1505 = NewNPC((int)base.Center.X, (int)base.Center.Y + 26, 516, 0, 0f, 0f, 0f, 0f, target);
							}
						}
						else if (this.ai[1] >= 30f)
						{
							this.ai[1] = 0f;
						}
						for (int num1506 = 0; num1506 < 200; num1506++)
						{
							if (Main.npc[num1506].active && Main.npc[num1506].type == type && num1506 != whoAmI)
							{
								Vector2 vector226 = Main.npc[num1506].Center - base.Center;
								if (vector226.Length() < 100f)
								{
									vector226.Normalize();
									vector226 *= 0.1f;
									base.velocity -= vector226;
								}
							}
						}
					}
					else
					{
						this.ai[0] = 0f;
					}
					if (Main.player[target].Center.X < base.Center.X)
					{
						base.direction = -1;
					}
					else if (Main.player[target].Center.X > base.Center.X)
					{
						base.direction = 1;
					}
					spriteDirection = base.direction;
				}
				if (this.ai[0] != 1f)
				{
					return;
				}
				rotation *= 0.92f;
				if ((double)Math.Abs(rotation) < 0.02)
				{
					rotation = 0f;
				}
				if (flag96)
				{
					this.ai[0] = -1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					this.ai[3] = 0f;
				}
				int num1507 = 300;
				for (int num1508 = 0; num1508 < 200; num1508++)
				{
					if (Main.npc[num1508].active && Main.npc[num1508].type == type && num1508 != whoAmI)
					{
						Vector2 vector227 = Main.npc[num1508].Center - base.Center;
						if (vector227.Length() < 50f)
						{
							vector227.Normalize();
							vector227 *= 0.1f;
							base.velocity -= vector227;
							base.velocity.X -= vector227.X * 1f;
						}
					}
				}
				int num1509 = 800;
				float num1510 = Math.Abs(base.Center.X - Main.player[target].Center.X);
				if (num1510 < (float)num1507 && flag95)
				{
					this.ai[0] = 2f;
					this.ai[1] = 0f;
				}
				else
				{
					if (collideX)
					{
						base.velocity.X *= -0.5f;
						this.ai[1] = 60f;
						base.direction *= -1;
					}
					if (this.ai[1] > 0f)
					{
						this.ai[1] -= 1f;
					}
					else if (flag95)
					{
						if (base.Center.X > Main.player[target].Center.X)
						{
							base.direction = -1;
						}
						else
						{
							base.direction = 1;
						}
					}
					else if (num1510 > (float)num1509)
					{
						if (base.Center.X > Main.player[target].Center.X)
						{
							base.direction = -1;
						}
						else
						{
							base.direction = 1;
						}
					}
					float num1511 = 2f;
					float num1512 = 0.1f;
					if (base.velocity.X > num1511 || base.velocity.X < 0f - num1511)
					{
						if (Math.Abs(base.velocity.X) < num1511 + num1512 * 2f)
						{
							if (base.velocity.X < 0f)
							{
								base.velocity.X = 0f - num1511;
							}
							else
							{
								base.velocity.X = num1511;
							}
						}
						else
						{
							base.velocity.X *= 0.99f;
						}
					}
					else
					{
						base.velocity.X += (float)base.direction * num1512;
					}
					spriteDirection = base.direction;
				}
				if (collideY)
				{
					this.ai[2] = 60f;
					directionY *= -1;
					base.velocity.Y *= -0.5f;
				}
				if (this.ai[2] > 0f)
				{
					this.ai[2] -= 1f;
				}
				else
				{
					int num1513 = (int)(base.Center.Y / 16f);
					int num1514 = (int)((base.Center.X - 8f) / 16f);
					int num1515 = 30;
					int num1516 = 15;
					int num1517 = 0;
					for (int num1518 = num1513; num1518 < num1513 + num1515; num1518++)
					{
						for (int num1519 = num1514; num1519 <= num1514 + 1; num1519++)
						{
							if (WorldGen.SolidTile(num1519, num1518) || Main.tile[num1519, num1518].liquid > 0)
							{
								num1517 = num1518 - num1513;
								break;
							}
						}
						if (num1517 != 0)
						{
							break;
						}
					}
					if (num1517 == 0)
					{
						directionY = 1;
					}
					else if (num1517 < num1516)
					{
						directionY = -1;
					}
				}
				float num1520 = 2f;
				float num1521 = 0.1f;
				if (base.velocity.Y > num1520 || base.velocity.Y < 0f - num1520)
				{
					if (Math.Abs(base.velocity.Y) < num1520 + num1521 * 2f)
					{
						if (base.velocity.Y < 0f)
						{
							base.velocity.Y = 0f - num1520;
						}
						else
						{
							base.velocity.Y = num1520;
						}
					}
					else
					{
						base.velocity.Y *= 0.99f;
					}
				}
				else
				{
					base.velocity.Y += (float)directionY * num1521;
				}
			}
			else if (aiStyle == 99)
			{
				if (base.velocity.Y == 0f && this.ai[0] == 0f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
					return;
				}
				if (this.ai[0] == 1f)
				{
					base.velocity = Vector2.Zero;
					base.position = oldPosition;
					this.ai[1]++;
					if (this.ai[1] >= 5f)
					{
						HitEffect(0, 9999.0);
						active = false;
					}
					return;
				}
				base.velocity.Y += 0.2f;
				if (base.velocity.Y > 12f)
				{
					base.velocity.Y = 12f;
				}
				rotation = base.velocity.ToRotation() - (float)Math.PI / 2f;
				if (type != 519)
				{
					return;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num1522 = 0; num1522 < 13; num1522++)
					{
						int num1523 = Dust.NewDust(base.position, width, height, 6, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num1523].noGravity = true;
						Main.dust[num1523].fadeIn = 1f;
						Dust dust = Main.dust[num1523];
						dust.velocity *= 4f;
						Main.dust[num1523].noLight = true;
					}
				}
				for (int num1524 = 0; num1524 < 3; num1524++)
				{
					if (Main.rand.Next(3) < 2)
					{
						int num1525 = Dust.NewDust(base.position, width, height, 6, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num1525].noGravity = true;
						Dust dust = Main.dust[num1525];
						dust.velocity *= 0.2f;
						Main.dust[num1525].fadeIn = 1f;
						if (Main.rand.Next(6) == 0)
						{
							dust = Main.dust[num1525];
							dust.velocity *= 30f;
							Main.dust[num1525].noGravity = false;
							Main.dust[num1525].noLight = true;
						}
						else
						{
							Main.dust[num1525].velocity = DirectionFrom(Main.dust[num1525].position) * Main.dust[num1525].velocity.Length();
						}
					}
				}
			}
			else if (aiStyle == 100)
			{
				if (base.velocity.Y == 0f && this.ai[0] >= 0f)
				{
					this.ai[0] = -1f;
					this.ai[1] = 0f;
					netUpdate = true;
					return;
				}
				if (this.ai[0] == -1f)
				{
					base.velocity = Vector2.Zero;
					base.position = oldPosition;
					this.ai[1]++;
					if (this.ai[1] >= 5f)
					{
						HitEffect(0, 9999.0);
						active = false;
					}
					return;
				}
				rotation = base.velocity.ToRotation() - (float)Math.PI / 2f;
				if (type != 522)
				{
					return;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					base.velocity.X = this.ai[2];
					base.velocity.Y = this.ai[3];
					for (int num1526 = 0; num1526 < 13; num1526++)
					{
						int num1527 = Dust.NewDust(base.position, width, height, 261, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num1527].noGravity = true;
						Main.dust[num1527].fadeIn = 1f;
						Dust dust = Main.dust[num1527];
						dust.velocity *= 4f;
						Main.dust[num1527].noLight = true;
					}
				}
				for (int num1528 = 0; num1528 < 2; num1528++)
				{
					if (Main.rand.Next(10 - (int)Math.Min(7f, base.velocity.Length())) < 1)
					{
						int num1529 = Dust.NewDust(base.position, width, height, 261, base.velocity.X * 0.5f, base.velocity.Y * 0.5f, 90, default(Color), 2.5f);
						Main.dust[num1529].noGravity = true;
						Dust dust = Main.dust[num1529];
						dust.velocity *= 0.2f;
						Main.dust[num1529].fadeIn = 0.4f;
						if (Main.rand.Next(6) == 0)
						{
							dust = Main.dust[num1529];
							dust.velocity *= 5f;
							Main.dust[num1529].noLight = true;
						}
						else
						{
							Main.dust[num1529].velocity = DirectionFrom(Main.dust[num1529].position) * Main.dust[num1529].velocity.Length();
						}
					}
				}
				dontTakeDamage = this.ai[0] >= 0f && this.ai[0] <= 20f;
				if (this.ai[0] >= 0f)
				{
					this.ai[0]++;
					if (this.ai[0] > 60f)
					{
						base.velocity = base.velocity.RotatedBy(this.ai[1]);
					}
					if (this.ai[0] > 120f)
					{
						base.velocity *= 0.98f;
					}
					if (base.velocity.Length() < 0.2f)
					{
						base.velocity = Vector2.Zero;
					}
				}
			}
			else if (aiStyle == 101)
			{
				float num1530 = 420f;
				float num1531 = 120f;
				int num1532 = 1;
				float value60 = 0f;
				float value61 = 1f;
				float num1533 = 4f;
				bool flag97 = !(this.ai[1] >= 0f) || !Main.npc[(int)this.ai[0]].active;
				if (Main.npc[(int)this.ai[0]].type == 439)
				{
					if (Main.npc[(int)this.ai[0]].life < Main.npc[(int)this.ai[0]].lifeMax / 2)
					{
						num1532 = 2;
					}
					if (Main.npc[(int)this.ai[0]].life < Main.npc[(int)this.ai[0]].lifeMax / 4)
					{
						num1532 = 3;
					}
				}
				else
				{
					flag97 = true;
				}
				this.ai[1] += num1532;
				float num1534 = this.ai[1] / num1531;
				num1534 = MathHelper.Clamp(num1534, 0f, 1f);
				base.position = base.Center;
				scale = MathHelper.Lerp(value60, value61, num1534);
				base.Center = base.position;
				alpha = (int)(255f - num1534 * 255f);
				if (Main.rand.Next(6) == 0)
				{
					Vector2 spinningpoint12 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust21 = Main.dust[Dust.NewDust(base.Center - spinningpoint12 * 20f, 0, 0, 27)];
					dust21.noGravity = true;
					dust21.position = base.Center - spinningpoint12 * Main.rand.Next(10, 21) * scale;
					dust21.velocity = spinningpoint12.RotatedBy(1.5707963705062866) * 4f;
					dust21.scale = 0.5f + Main.rand.NextFloat();
					dust21.fadeIn = 0.5f;
				}
				if (Main.rand.Next(6) == 0)
				{
					Vector2 spinningpoint13 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust22 = Main.dust[Dust.NewDust(base.Center - spinningpoint13 * 30f, 0, 0, 240)];
					dust22.noGravity = true;
					dust22.position = base.Center - spinningpoint13 * 20f * scale;
					dust22.velocity = spinningpoint13.RotatedBy(-1.5707963705062866) * 2f;
					dust22.scale = 0.5f + Main.rand.NextFloat();
					dust22.fadeIn = 0.5f;
				}
				if (Main.rand.Next(6) == 0)
				{
					Vector2 vector228 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust23 = Main.dust[Dust.NewDust(base.Center - vector228 * 30f, 0, 0, 240)];
					dust23.position = base.Center - vector228 * 20f * scale;
					dust23.velocity = Vector2.Zero;
					dust23.scale = 0.5f + Main.rand.NextFloat();
					dust23.fadeIn = 0.5f;
					dust23.noLight = true;
				}
				localAI[0] += (float)Math.PI / 60f;
				localAI[1] = 0.25f + Vector2.UnitY.RotatedBy(this.ai[1] * ((float)Math.PI * 2f) / 60f).Y * 0.25f;
				if (this.ai[1] >= num1530)
				{
					flag97 = true;
					if (Main.netMode != 1)
					{
						for (int num1535 = 0; num1535 < 4; num1535++)
						{
							Vector2 vector229 = new Vector2(0f, 0f - num1533).RotatedBy((float)Math.PI / 2f * (float)num1535);
							Projectile.NewProjectile(base.Center.X, base.Center.Y, vector229.X, vector229.Y, 593, damage, 0f, Main.myPlayer);
						}
					}
				}
				if (flag97)
				{
					HitEffect(0, 9999.0);
					active = false;
				}
			}
			else if (aiStyle == 102)
			{
				bool flag98 = false;
				bool flag99 = false;
				bool flag100 = true;
				bool flag101 = false;
				int num1536 = 4;
				int num1537 = 3;
				int num1538 = 0;
				float num1539 = 0.2f;
				float num1540 = 2f;
				float num1541 = -0.2f;
				float num1542 = -4f;
				bool flag102 = true;
				float num1543 = 2f;
				float num1544 = 0.1f;
				float num1545 = 1f;
				float num1546 = 0.04f;
				bool flag103 = false;
				float num1547 = 0.96f;
				bool flag104 = true;
				if (type == 541)
				{
					flag102 = false;
					rotation = base.velocity.X * 0.04f;
					spriteDirection = ((base.direction > 0) ? 1 : (-1));
					num1538 = 3;
					num1541 = -0.1f;
					num1539 = 0.1f;
					float num1548 = (float)life / (float)lifeMax;
					num1543 += (1f - num1548) * 2f;
					num1544 += (1f - num1548) * 0.02f;
					if (num1548 < 0.5f)
					{
						knockBackResist = 0f;
					}
					base.position += netOffset;
					Vector2 vector230 = base.BottomLeft + new Vector2(0f, -12f);
					Vector2 bottomRight = base.BottomRight;
					Vector2 value62 = new Vector2(-spriteDirection * 10, -4f);
					Color color = new Color(222, 108, 48) * 0.7f;
					float num1549 = -0.3f + MathHelper.Max(base.velocity.Y * 2f, 0f);
					for (int num1550 = 0; num1550 < 2; num1550++)
					{
						if (Main.rand.Next(2) != 0)
						{
							Dust dust24 = Main.dust[Dust.NewDust(base.Bottom, 0, 0, 268)];
							dust24.position = new Vector2(MathHelper.Lerp(vector230.X, bottomRight.X, Main.rand.NextFloat()), MathHelper.Lerp(vector230.Y, bottomRight.Y, Main.rand.NextFloat())) + value62;
							if (num1550 == 1)
							{
								dust24.position = base.Bottom + Utils.RandomVector2(Main.rand, -6f, 6f);
							}
							dust24.color = color;
							dust24.scale = 0.8f;
							dust24.velocity.Y += num1549;
							dust24.velocity.X += (float)spriteDirection * 0.2f;
						}
					}
					base.position -= netOffset;
					localAI[2] = 0f;
					if (this.ai[0] < 0f)
					{
						this.ai[0] = MathHelper.Min(this.ai[0] + 1f, 0f);
					}
					if (this.ai[0] > 0f)
					{
						flag104 = false;
						flag103 = true;
						this.ai[0]++;
						if (this.ai[0] >= 135f)
						{
							this.ai[0] = -300f;
							netUpdate = true;
						}
						Vector2 vector231 = base.Center + Vector2.UnitX * base.direction * 200f;
						Vector2 vector232 = base.Center + Vector2.UnitX * base.direction * 50f - Vector2.UnitY * 6f;
						if (this.ai[0] == 54f && Main.netMode != 1)
						{
							List<Point> list4 = new List<Point>();
							Vector2 vector233 = Main.player[target].Center + new Vector2(Main.player[target].velocity.X * 30f, 0f);
							if (Distance(vector233) < 2000f)
							{
								Point point15 = vector233.ToTileCoordinates();
								for (int num1551 = 0; num1551 < 1000; num1551++)
								{
									if (list4.Count >= 3)
									{
										break;
									}
									bool flag105 = false;
									int num1552 = Main.rand.Next(point15.X - 30, point15.X + 30 + 1);
									foreach (Point item2 in list4)
									{
										if (Math.Abs(item2.X - num1552) < 10)
										{
											flag105 = true;
											break;
										}
									}
									if (!flag105)
									{
										int startY = point15.Y - 20;
										Collision.ExpandVertically(num1552, startY, out var _, out var bottomY, 1, 51);
										if (StrayMethods.CanSpawnSandstormHostile(new Vector2(num1552, bottomY - 15) * 16f, 15, 15))
										{
											list4.Add(new Point(num1552, bottomY - 15));
										}
									}
								}
								foreach (Point item3 in list4)
								{
									Projectile.NewProjectile(item3.X * 16, item3.Y * 16, 0f, 0f, 658, 0, 0f, Main.myPlayer);
								}
							}
							else
							{
								this.ai[0] = -200f;
								netUpdate = true;
							}
						}
						Vector2 vector234 = new Vector2(0.9f, 2f);
						if (this.ai[0] < 114f && this.ai[0] > 0f)
						{
							List<Vector2> list5 = new List<Vector2>();
							for (int num1553 = 0; num1553 < 1000; num1553++)
							{
								Projectile projectile10 = Main.projectile[num1553];
								if (projectile10.active && projectile10.type == 658)
								{
									list5.Add(projectile10.Center);
								}
							}
							Vector2 value63 = new Vector2(0f, 1500f);
							float num1554 = (this.ai[0] - 54f) / 30f;
							if (num1554 < 0.95f && num1554 >= 0f)
							{
								foreach (Vector2 item4 in list5)
								{
									Vector2 value64 = Vector2.CatmullRom(vector232 + value63, vector232, item4, item4 + value63, num1554);
									Vector2 value65 = Vector2.CatmullRom(vector232 + value63, vector232, item4, item4 + value63, num1554 + 0.05f);
									float num1555 = num1554;
									if (num1555 > 0.5f)
									{
										num1555 = 1f - num1555;
									}
									float num1556 = 2f;
									if (Vector2.Distance(value64, value65) > 5f)
									{
										num1556 = 3f;
									}
									if (Vector2.Distance(value64, value65) > 10f)
									{
										num1556 = 4f;
									}
									for (float num1557 = 0f; num1557 < num1556; num1557++)
									{
										Dust dust25 = Main.dust[Dust.NewDust(vector232, 0, 0, 269)];
										dust25.position = Vector2.Lerp(value64, value65, num1557 / num1556) + Utils.RandomVector2(Main.rand, -2f, 2f);
										dust25.noLight = true;
										dust25.scale = 0.3f + num1554;
									}
								}
							}
						}
						_ = this.ai[0];
						_ = 100f;
					}
					if (this.ai[0] == 0f)
					{
						this.ai[0] = 1f;
						netUpdate = true;
						flag103 = true;
					}
				}
				if (justHit)
				{
					localAI[2] = 0f;
				}
				if (!flag99)
				{
					if (localAI[2] >= 0f)
					{
						float num1558 = 16f;
						bool flag106 = false;
						bool flag107 = false;
						if (base.position.X > localAI[0] - num1558 && base.position.X < localAI[0] + num1558)
						{
							flag106 = true;
						}
						else if ((base.velocity.X < 0f && base.direction > 0) || (base.velocity.X > 0f && base.direction < 0))
						{
							flag106 = true;
							num1558 += 24f;
						}
						if (base.position.Y > localAI[1] - num1558 && base.position.Y < localAI[1] + num1558)
						{
							flag107 = true;
						}
						if (flag106 && flag107)
						{
							localAI[2] += 1f;
							if (localAI[2] >= 30f && num1558 == 16f)
							{
								flag98 = true;
							}
							if (localAI[2] >= 60f)
							{
								localAI[2] = -180f;
								base.direction *= -1;
								base.velocity.X *= -1f;
								collideX = false;
							}
						}
						else
						{
							localAI[0] = base.position.X;
							localAI[1] = base.position.Y;
							localAI[2] = 0f;
						}
						if (flag104)
						{
							TargetClosest();
						}
					}
					else
					{
						localAI[2] += 1f;
						base.direction = ((Main.player[target].Center.X > base.Center.X) ? 1 : (-1));
					}
				}
				int num1559 = (int)((base.position.X + (float)(width / 2)) / 16f) + base.direction * 2;
				int num1560 = (int)((base.position.Y + (float)height) / 16f);
				int num1561 = (int)base.Bottom.Y / 16;
				int num1562 = (int)base.Bottom.X / 16;
				if (flag103)
				{
					base.velocity *= num1547;
					return;
				}
				for (int num1563 = num1560; num1563 < num1560 + num1536; num1563++)
				{
					if (Main.tile[num1559, num1563] == null)
					{
						Main.tile[num1559, num1563] = new Tile();
					}
					if ((Main.tile[num1559, num1563].nactive() && Main.tileSolid[Main.tile[num1559, num1563].type]) || Main.tile[num1559, num1563].liquid > 0)
					{
						if (num1563 <= num1560 + 1)
						{
							flag101 = true;
						}
						flag100 = false;
						break;
					}
				}
				for (int num1564 = num1561; num1564 < num1561 + num1538; num1564++)
				{
					if (Main.tile[num1562, num1564] == null)
					{
						Main.tile[num1562, num1564] = new Tile();
					}
					if ((Main.tile[num1562, num1564].nactive() && Main.tileSolid[Main.tile[num1562, num1564].type]) || Main.tile[num1562, num1564].liquid > 0)
					{
						flag101 = true;
						flag100 = false;
						break;
					}
				}
				if (flag102)
				{
					for (int num1565 = num1560 - num1537; num1565 < num1560; num1565++)
					{
						if (Main.tile[num1559, num1565] == null)
						{
							Main.tile[num1559, num1565] = new Tile();
						}
						if ((Main.tile[num1559, num1565].nactive() && Main.tileSolid[Main.tile[num1559, num1565].type]) || Main.tile[num1559, num1565].liquid > 0)
						{
							flag101 = false;
							flag98 = true;
							break;
						}
					}
				}
				if (flag98)
				{
					flag101 = false;
					flag100 = true;
				}
				if (flag100)
				{
					base.velocity.Y += num1539;
					if (base.velocity.Y > num1540)
					{
						base.velocity.Y = num1540;
					}
				}
				else
				{
					if ((directionY < 0 && base.velocity.Y > 0f) || flag101)
					{
						base.velocity.Y += num1541;
					}
					if (base.velocity.Y < num1542)
					{
						base.velocity.Y = num1542;
					}
				}
				if (collideX)
				{
					base.velocity.X = oldVelocity.X * -0.4f;
					if (base.direction == -1 && base.velocity.X > 0f && base.velocity.X < 1f)
					{
						base.velocity.X = 1f;
					}
					if (base.direction == 1 && base.velocity.X < 0f && base.velocity.X > -1f)
					{
						base.velocity.X = -1f;
					}
				}
				if (collideY)
				{
					base.velocity.Y = oldVelocity.Y * -0.25f;
					if (base.velocity.Y > 0f && base.velocity.Y < 1f)
					{
						base.velocity.Y = 1f;
					}
					if (base.velocity.Y < 0f && base.velocity.Y > -1f)
					{
						base.velocity.Y = -1f;
					}
				}
				if (base.direction == -1 && base.velocity.X > 0f - num1543)
				{
					base.velocity.X -= num1544;
					if (base.velocity.X > num1543)
					{
						base.velocity.X -= num1544;
					}
					else if (base.velocity.X > 0f)
					{
						base.velocity.X += num1544 / 2f;
					}
					if (base.velocity.X < 0f - num1543)
					{
						base.velocity.X = 0f - num1543;
					}
				}
				else if (base.direction == 1 && base.velocity.X < num1543)
				{
					base.velocity.X += num1544;
					if (base.velocity.X < 0f - num1543)
					{
						base.velocity.X += num1544;
					}
					else if (base.velocity.X < 0f)
					{
						base.velocity.X -= num1544 / 2f;
					}
					if (base.velocity.X > num1543)
					{
						base.velocity.X = num1543;
					}
				}
				if (directionY == -1 && base.velocity.Y > 0f - num1545)
				{
					base.velocity.Y -= num1546;
					if (base.velocity.Y > num1545)
					{
						base.velocity.Y -= num1546 * 1.25f;
					}
					else if (base.velocity.Y > 0f)
					{
						base.velocity.Y += num1546 * 0.75f;
					}
					if (base.velocity.Y < 0f - num1545)
					{
						base.velocity.Y = 0f - num1543;
					}
				}
				else if (directionY == 1 && base.velocity.Y < num1545)
				{
					base.velocity.Y += num1546;
					if (base.velocity.Y < 0f - num1545)
					{
						base.velocity.Y += num1546 * 1.25f;
					}
					else if (base.velocity.Y < 0f)
					{
						base.velocity.Y -= num1546 * 0.75f;
					}
					if (base.velocity.Y > num1545)
					{
						base.velocity.Y = num1545;
					}
				}
			}
			else if (aiStyle == 103)
			{
				if (base.direction == 0)
				{
					TargetClosest();
				}
				bool flag108 = true;
				Point pt = base.Center.ToTileCoordinates();
				Tile tileSafely7 = Framing.GetTileSafely(pt);
				flag108 = tileSafely7.nactive() && (TileID.Sets.Conversion.Sand[tileSafely7.type] || TileID.Sets.Conversion.Sandstone[tileSafely7.type] || TileID.Sets.Conversion.HardenedSand[tileSafely7.type]);
				flag108 |= wet;
				bool flag109 = false;
				TargetClosest(faceTarget: false);
				Vector2 vector235 = targetRect.Center.ToVector2();
				if (Main.player[target].velocity.Y > -0.1f && !Main.player[target].dead && Distance(vector235) > 150f)
				{
					flag109 = true;
				}
				if (localAI[0] == -1f && !flag108)
				{
					localAI[0] = 20f;
				}
				if (localAI[0] > 0f)
				{
					localAI[0]--;
				}
				if (flag108)
				{
					if (soundDelay == 0)
					{
						float num1566 = Distance(vector235) / 40f;
						if (num1566 < 10f)
						{
							num1566 = 10f;
						}
						if (num1566 > 20f)
						{
							num1566 = 20f;
						}
						soundDelay = (int)num1566;
						SoundEngine.PlaySound(15, base.Center, 4);
					}
					float num1567 = this.ai[1];
					bool flag110 = false;
					pt = (base.Center + new Vector2(0f, 24f)).ToTileCoordinates();
					tileSafely7 = Framing.GetTileSafely(pt.X, pt.Y - 2);
					if (tileSafely7.nactive() && (TileID.Sets.Conversion.Sand[tileSafely7.type] || TileID.Sets.Conversion.Sandstone[tileSafely7.type] || TileID.Sets.Conversion.HardenedSand[tileSafely7.type]))
					{
						flag110 = true;
					}
					this.ai[1] = flag110.ToInt();
					if (this.ai[2] < 30f)
					{
						this.ai[2]++;
					}
					if (flag109)
					{
						TargetClosest();
						base.velocity.X += (float)base.direction * 0.15f;
						base.velocity.Y += (float)directionY * 0.15f;
						if (base.velocity.X > 5f)
						{
							base.velocity.X = 5f;
						}
						if (base.velocity.X < -5f)
						{
							base.velocity.X = -5f;
						}
						if (base.velocity.Y > 3f)
						{
							base.velocity.Y = 3f;
						}
						if (base.velocity.Y < -3f)
						{
							base.velocity.Y = -3f;
						}
						Vector2 vec5 = base.Center + base.velocity.SafeNormalize(Vector2.Zero) * base.Size.Length() / 2f + base.velocity;
						pt = vec5.ToTileCoordinates();
						tileSafely7 = Framing.GetTileSafely(pt);
						bool flag111 = tileSafely7.nactive() && (TileID.Sets.Conversion.Sand[tileSafely7.type] || TileID.Sets.Conversion.Sandstone[tileSafely7.type] || TileID.Sets.Conversion.HardenedSand[tileSafely7.type]);
						if (!flag111 && wet)
						{
							flag111 = tileSafely7.liquid > 0;
						}
						if (!flag111 && Math.Sign(base.velocity.X) == base.direction && Distance(vector235) < 400f && (this.ai[2] >= 30f || this.ai[2] < 0f))
						{
							if (localAI[0] == 0f)
							{
								SoundEngine.PlaySound(14, base.Center, 542);
								localAI[0] = -1f;
							}
							this.ai[2] = -30f;
							Vector2 vector236 = DirectionTo(vector235 + new Vector2(0f, -80f));
							base.velocity = vector236 * 12f;
						}
					}
					else
					{
						if (collideX)
						{
							base.velocity.X *= -1f;
							base.direction *= -1;
							netUpdate = true;
						}
						if (collideY)
						{
							netUpdate = true;
							base.velocity.Y *= -1f;
							directionY = Math.Sign(base.velocity.Y);
							this.ai[0] = directionY;
						}
						float num1568 = 6f;
						base.velocity.X += (float)base.direction * 0.1f;
						if (base.velocity.X < 0f - num1568 || base.velocity.X > num1568)
						{
							base.velocity.X *= 0.95f;
						}
						if (flag110)
						{
							this.ai[0] = -1f;
						}
						else
						{
							this.ai[0] = 1f;
						}
						float num1569 = 0.06f;
						float num1570 = 0.01f;
						if (this.ai[0] == -1f)
						{
							base.velocity.Y -= num1570;
							if (base.velocity.Y < 0f - num1569)
							{
								this.ai[0] = 1f;
							}
						}
						else
						{
							base.velocity.Y += num1570;
							if (base.velocity.Y > num1569)
							{
								this.ai[0] = -1f;
							}
						}
						if (base.velocity.Y > 0.4f || base.velocity.Y < -0.4f)
						{
							base.velocity.Y *= 0.95f;
						}
					}
				}
				else
				{
					if (base.velocity.Y == 0f)
					{
						if (flag109)
						{
							TargetClosest();
						}
						float num1571 = 1f;
						base.velocity.X += (float)base.direction * 0.1f;
						if (base.velocity.X < 0f - num1571 || base.velocity.X > num1571)
						{
							base.velocity.X *= 0.95f;
						}
					}
					base.velocity.Y += 0.3f;
					if (base.velocity.Y > 10f)
					{
						base.velocity.Y = 10f;
					}
					this.ai[0] = 1f;
				}
				rotation = base.velocity.Y * (float)base.direction * 0.1f;
				if (rotation < -0.2f)
				{
					rotation = -0.2f;
				}
				if (rotation > 0.2f)
				{
					rotation = 0.2f;
				}
			}
			else if (aiStyle == 104)
			{
				active = false;
			}
			else if (aiStyle == 105)
			{
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center, 1.3f, 0.5f, 1.5f);
				}
				if (this.ai[1] == 0f)
				{
					if (this.ai[0] > 0f)
					{
						this.ai[0]--;
					}
					if (this.ai[0] != 0f)
					{
						return;
					}
					this.ai[0] = 180f;
					netUpdate = true;
					if (localAI[0] == 0f)
					{
						StrayMethods.CheckArenaScore(base.Bottom, out var xLeftEnd, out var xRightEnd);
						localAI[0] = 1f;
						xLeftEnd.X += 2;
						xRightEnd.X -= 2;
						int num1572 = NewNPC(xLeftEnd.X, xLeftEnd.Y, 549);
						Main.npc[num1572].Bottom = xLeftEnd.ToWorldCoordinates(8f, 16f);
						num1572 = NewNPC(xRightEnd.X, xRightEnd.Y, 549);
						Main.npc[num1572].Bottom = xRightEnd.ToWorldCoordinates(8f, 16f);
						if (Main.netMode != 1)
						{
							DD2Event.FindArenaHitbox();
						}
					}
				}
				else if (this.ai[1] == 2f)
				{
					dontTakeDamageFromHostiles = true;
					life = lifeMax;
					if (this.ai[0] == 3f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_WinScene, base.Center);
						for (int num1573 = 0; num1573 < 200; num1573++)
						{
							NPC nPC8 = Main.npc[num1573];
							if (nPC8.active && nPC8.type == 549)
							{
								nPC8.ai[1] = 1f;
								nPC8.ai[0] = 0f;
								nPC8.netUpdate = true;
							}
						}
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(base.Center - Vector2.UnitY * 40f, Vector2.Zero, 713, 0, 0f, Main.myPlayer);
						}
					}
					this.ai[0]++;
					noGravity = true;
					if (this.ai[0] <= 120f)
					{
						float num1574 = this.ai[0] / 120f;
						base.velocity.Y = (float)Math.Cos(num1574 * ((float)Math.PI * 2f)) * 0.25f - 0.25f;
					}
					else
					{
						base.velocity.Y = 0f;
					}
					float lerpValue = Utils.GetLerpValue(480f, 570f, this.ai[0], clamped: true);
					if (lerpValue != 0f)
					{
						MoonlordDeathDrama.RequestLight(lerpValue, base.Center);
					}
					if (this.ai[0] >= 600f)
					{
						DD2Event.StopInvasion(win: true);
						dontTakeDamage = false;
						life = 0;
						checkDead();
						netUpdate = true;
					}
					if (true)
					{
						Vector2 value66 = base.Center + new Vector2(0f, -20f);
						float num1575 = 0.99f;
						if (this.ai[0] >= 60f)
						{
							num1575 = 0.79f;
						}
						if (this.ai[0] >= 120f)
						{
							num1575 = 0.58f;
						}
						if (this.ai[0] >= 180f)
						{
							num1575 = 0.43f;
						}
						if (this.ai[0] >= 240f)
						{
							num1575 = 0.33f;
						}
						if (this.ai[0] >= 540f)
						{
							num1575 = 1f;
						}
						for (int num1576 = 0; num1576 < 9; num1576++)
						{
							if (!(Main.rand.NextFloat() < num1575))
							{
								float num1577 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
								float num1578 = Main.rand.NextFloat();
								Vector2 position8 = value66 + num1577.ToRotationVector2() * (110f + 600f * num1578);
								Vector2 vector237 = (num1577 - (float)Math.PI).ToRotationVector2() * (14f + 0f * Main.rand.NextFloat() + 8f * num1578);
								Dust dust26 = Dust.NewDustPerfect(position8, 264, vector237);
								dust26.scale = 0.9f;
								dust26.fadeIn = 1.15f + num1578 * 0.3f;
								dust26.color = new Color(1f, 1f, 1f, num1575) * (1f - num1575);
								dust26.noGravity = true;
								dust26.noLight = true;
							}
						}
					}
					if (this.ai[0] == 100f || this.ai[0] == 160f || this.ai[0] == 220f || this.ai[0] == 280f || this.ai[0] == 340f || this.ai[0] == 370f || this.ai[0] == 400f || this.ai[0] == 430f || this.ai[0] == 460f || this.ai[0] == 500f || this.ai[0] == 520f || this.ai[0] == 540f)
					{
						float num1579 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
						float num1580 = 120f;
						for (int num1581 = 0; (float)num1581 < num1580; num1581++)
						{
							float num1582 = (float)num1581 / num1580 * ((float)Math.PI * 2f);
							float num1583 = Main.rand.NextFloat();
							Vector2 position9 = base.Center + new Vector2(0f, -20f) + num1582.ToRotationVector2() * (810f - this.ai[0]);
							Vector2 vector238 = (num1582 - (float)Math.PI).ToRotationVector2() * (14f + 5f * (this.ai[0] / 600f) + 8f * num1583);
							Dust dust27 = Dust.NewDustPerfect(position9, 264, vector238);
							dust27.scale = 0.9f;
							dust27.fadeIn = 1.15f + num1583 * 0.3f;
							dust27.color = new Color(1f, 1f, 1f, 0f);
							dust27.noGravity = true;
							dust27.noLight = true;
						}
					}
				}
				else
				{
					if (this.ai[1] != 1f)
					{
						return;
					}
					dontTakeDamageFromHostiles = true;
					life = lifeMax;
					if (this.ai[0] == 0f)
					{
						for (int num1584 = 0; num1584 < 200; num1584++)
						{
							NPC nPC9 = Main.npc[num1584];
							if (nPC9.active && nPC9.type == 549)
							{
								nPC9.ai[1] = 1f;
								nPC9.ai[0] = 0f;
								nPC9.netUpdate = true;
							}
						}
						if (Main.netMode != 1)
						{
							DD2Event.ReportLoss();
							Projectile.NewProjectile(base.Center - Vector2.UnitY * 40f, Vector2.Zero, 672, 0, 0f, Main.myPlayer);
						}
					}
					this.ai[0]++;
					float lerpValue2 = Utils.GetLerpValue(480f, 600f, this.ai[0], clamped: true);
					if (lerpValue2 != 0f)
					{
						MoonlordDeathDrama.RequestLight(lerpValue2, base.Center);
					}
					float num1585 = 96f;
					if (this.ai[0] < num1585)
					{
						base.velocity.Y = MathHelper.Lerp(0f, -1f, this.ai[0] / num1585);
					}
					if (this.ai[0] >= num1585)
					{
						alpha += 50;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					if (true)
					{
						Vector2 value67 = base.Center + new Vector2(0f, MathHelper.Lerp(0f, -70f, Utils.GetLerpValue(0f, 300f, this.ai[0], clamped: true)));
						float num1586 = 0.99f;
						if (this.ai[0] >= 60f)
						{
							num1586 = 0.79f;
						}
						if (this.ai[0] >= 120f)
						{
							num1586 = 0.58f;
						}
						if (this.ai[0] >= 180f)
						{
							num1586 = 0.23f;
						}
						if (this.ai[0] >= 240f)
						{
							num1586 = 0.35f;
						}
						if (this.ai[0] >= 300f)
						{
							num1586 = 0.6f;
						}
						if (this.ai[0] >= 360f)
						{
							num1586 = 0.98f;
						}
						if (this.ai[0] >= 420f)
						{
							num1586 = 0.995f;
						}
						if (this.ai[0] >= 450f)
						{
							num1586 = 1f;
						}
						for (int num1587 = 0; num1587 < 12; num1587++)
						{
							if (!(Main.rand.NextFloat() < num1586))
							{
								float num1588 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
								float num1589 = Main.rand.NextFloat();
								Vector2 position10 = value67 + num1588.ToRotationVector2() * (70f + 600f * num1589);
								Vector2 vector239 = (num1588 - (float)Math.PI / 2f - (float)Math.PI / 8f).ToRotationVector2() * (12f + 9f * Main.rand.NextFloat() + 4f * num1589);
								Dust dust28 = Dust.NewDustPerfect(position10, 240, vector239);
								dust28.scale = 0.8f;
								dust28.fadeIn = 0.95f + num1589 * 0.3f;
								dust28.noGravity = true;
							}
						}
					}
					if (this.ai[0] >= 600f)
					{
						DD2Event.StopInvasion();
						if (!Main.dedServ)
						{
							Filters.Scene.Deactivate("CrystalDestructionVortex");
							Filters.Scene.Deactivate("CrystalDestructionColor");
							Filters.Scene.Deactivate("CrystalWin");
						}
						dontTakeDamage = false;
						life = 0;
						checkDead();
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 106)
			{
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
				}
				SlotId val;
				if (this.ai[1] == 0f)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalOpen, base.Center);
						float[] array6 = localAI;
						val = SlotId.Invalid;
						array6[3] = ((SlotId)(val)).ToFloat();
					}
					if (localAI[0] > 150f)
					{
						ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[3]));
						if (activeSound == null)
						{
							float[] array7 = localAI;
							val = SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalIdleLoop, base.Center);
							array7[3] = ((SlotId)(val)).ToFloat();
						}
					}
					if (!DD2Event.EnemySpawningIsOnHold)
					{
						this.ai[0]++;
					}
					if (this.ai[0] >= (float)DD2Event.LaneSpawnRate)
					{
						if (this.ai[0] >= (float)(DD2Event.LaneSpawnRate * 3))
						{
							this.ai[0] = 0f;
						}
						netUpdate = true;
						if (Main.netMode != 1 && (int)this.ai[0] % DD2Event.LaneSpawnRate == 0)
						{
							DD2Event.SpawnMonsterFromGate(base.Bottom);
							if (DD2Event.EnemySpawningIsOnHold)
							{
								this.ai[0] += 1f;
							}
						}
					}
					localAI[0]++;
					if (localAI[0] > 180f)
					{
						localAI[0] = 180f;
					}
					if (Main.netMode != 1 && localAI[0] >= 180f)
					{
						if (AnyNPCs(548))
						{
							dontTakeDamage = true;
							return;
						}
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						dontTakeDamage = true;
					}
				}
				else if (this.ai[1] == 1f)
				{
					this.ai[0]++;
					scale = MathHelper.Lerp(1f, 0.05f, Utils.GetLerpValue(500f, 600f, this.ai[0], clamped: true));
					ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[3]));
					if (activeSound2 == null)
					{
						float[] array8 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalIdleLoop, base.Center);
						array8[3] = ((SlotId)(val)).ToFloat();
					}
					activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[3]));
					if (activeSound2 != null)
					{
						activeSound2.Volume = scale;
					}
					if (this.ai[0] >= 550f)
					{
						dontTakeDamage = false;
						life = 0;
						checkDead();
						netUpdate = true;
						activeSound2?.Stop();
					}
				}
			}
			else if (aiStyle == 107)
			{
				AI_107_ImprovedWalkers();
			}
			else if (aiStyle == 108)
			{
				AI_108_DivingFlyer();
			}
			else if (aiStyle == 109)
			{
				AI_109_DarkMage();
			}
			else if (aiStyle == 110)
			{
				AI_110_Betsy();
			}
			else if (aiStyle == 111)
			{
				AI_111_DD2LightningBug();
			}
			else if (aiStyle == 112)
			{
				AI_112_FairyCritter();
			}
			else if (aiStyle == 113)
			{
				AI_113_WindyBalloon();
			}
			else if (aiStyle == 114)
			{
				AI_114_Dragonflies();
			}
			else if (aiStyle == 115)
			{
				AI_115_LadyBugs();
			}
			else if (aiStyle == 116)
			{
				AI_116_WaterStriders();
			}
			else if (aiStyle == 117)
			{
				AI_117_BloodNautilus();
			}
			else if (aiStyle == 118)
			{
				AI_118_Seahorses();
			}
			else if (aiStyle == 119)
			{
				AI_119_Dandelion();
			}
			else if (aiStyle == 120)
			{
				AI_120_HallowBoss();
			}
			else if (aiStyle == 121)
			{
				AI_121_QueenSlime();
			}
			else if (aiStyle == 122)
			{
				AI_122_PirateGhost();
			}
		}

		public void AI_122_PirateGhost()
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.NPCHit6, position);
			}
			NPCAimedTarget targetData = GetTargetData();
			if (targetData.Invalid)
			{
				TargetClosest();
				targetData = GetTargetData();
			}
			if (targetData.Invalid)
			{
				velocity *= 0.9f;
				alpha = Utils.Clamp(alpha + 5, 0, 255);
				if (alpha >= 255)
				{
					StrikeNPCNoInteraction(9999, 0f, 0);
				}
				return;
			}
			alpha = Utils.Clamp(alpha - 5, 0, 255);
			Vector2 targetPosition = Vector2.Zero.MoveTowards(targetData.Center - base.Center, 4f);
			velocity = velocity.MoveTowards(targetPosition, 142f / (339f * (float)Math.PI));
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == type && i != whoAmI)
				{
					Vector2 vector = Main.npc[i].Center - base.Center;
					if (vector.Length() < 50f)
					{
						vector.Normalize();
						vector *= 0.1f;
						velocity -= vector;
						velocity.X -= vector.X * 1f;
					}
				}
			}
		}

		public void AI_000_TransformBoundNPC(int playerID, int npcType)
		{
			Transform(npcType);
			Main.BestiaryTracker.Chats.RegisterChatStartWith(this);
			Main.player[playerID].SetTalkNPC(whoAmI);
			if (Main.netMode == 2)
			{
				NetMessage.SendData(40, -1, -1, null, playerID);
			}
		}

		private void AI_065_Butterflies()
		{
			float num = ai[0];
			float num2 = ai[1];
			if (type == 661)
			{
				Vector3 rgb = Main.hslToRgb(Main.GlobalTimeWrappedHourly * 0.33f % 1f, 1f, 0.5f).ToVector3() * 0.3f;
				rgb += Vector3.One * 0.1f;
				Lighting.AddLight(base.Center, rgb);
				int num3 = 60;
				bool flag = false;
				int num4 = 50;
				NPCAimedTarget targetData = GetTargetData();
				if (targetData.Invalid || targetData.Center.Distance(base.Center) >= 300f)
				{
					flag = true;
				}
				if (!targetData.Invalid && targetData.Type == NPCTargetType.Player && !Main.player[target].ZoneHallow)
				{
					num4 = num3;
					flag = true;
				}
				ai[2] = MathHelper.Clamp(ai[2] + (float)flag.ToDirectionInt(), 0f, num4);
				if (ai[2] >= (float)num3)
				{
					active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(23, -1, -1, null, whoAmI);
					}
					return;
				}
				Opacity = Utils.GetLerpValue(num3, (float)num4 / 2f, ai[2], clamped: true);
				if (ai[2] > 0f)
				{
					int num5 = 1;
					for (int i = 0; i < num5; i++)
					{
						if (Main.rand.Next(5) == 0)
						{
							float num6 = MathHelper.Lerp(0.9f, 0.6f, Opacity);
							Color newColor = Main.hslToRgb(Main.GlobalTimeWrappedHourly * 0.3f % 1f, 1f, 0.5f) * 0.5f;
							int num7 = Dust.NewDust(position, width, height, 267, 0f, 0f, 0, newColor);
							Main.dust[num7].position = base.Center + Main.rand.NextVector2Circular(width, height);
							Main.dust[num7].velocity *= Main.rand.NextFloat() * 0.8f;
							Main.dust[num7].velocity += velocity * 0.6f;
							Main.dust[num7].noGravity = true;
							Main.dust[num7].fadeIn = 0.6f + Main.rand.NextFloat() * 0.7f * num6;
							Main.dust[num7].scale = 0.35f;
							if (num7 != 6000)
							{
								Dust dust = Dust.CloneDust(num7);
								dust.scale /= 2f;
								dust.fadeIn *= 0.85f;
								dust.color = new Color(255, 255, 255, 255) * 0.5f;
							}
						}
					}
				}
				dontTakeDamage = ai[2] >= (float)(num4 / 2);
			}
			if (Main.netMode != 1)
			{
				if (ai[2] == 0f && type != 661)
				{
					int num8 = 0;
					int num9 = 4;
					int num10 = 6;
					int num11 = 3;
					int num12 = 7;
					int num13 = 2;
					int num14 = 1;
					int num15 = 5;
					int num16 = Main.rand.Next(100);
					num16 = ((num16 == 0) ? num15 : ((num16 < 3) ? num14 : ((num16 < 9) ? num13 : ((num16 < 19) ? num12 : ((num16 < 34) ? num11 : ((num16 < 53) ? num10 : ((num16 >= 75) ? num8 : num9)))))));
					ai[2] = 1 + num16;
				}
				if (ai[3] == 0f)
				{
					ai[3] = (float)Main.rand.Next(75, 111) * 0.01f;
				}
				localAI[0] -= 1f;
				if (localAI[0] <= 0f)
				{
					localAI[0] = Main.rand.Next(90, 240);
					TargetClosest();
					float num17 = Math.Abs(base.Center.X - Main.player[target].Center.X);
					if (num17 > 700f && localAI[3] == 0f)
					{
						float num18 = (float)Main.rand.Next(50, 151) * 0.01f;
						if (num17 > 1000f)
						{
							num18 = (float)Main.rand.Next(150, 201) * 0.01f;
						}
						else if (num17 > 850f)
						{
							num18 = (float)Main.rand.Next(100, 151) * 0.01f;
						}
						int num19 = direction * Main.rand.Next(100, 251);
						int num20 = Main.rand.Next(-50, 51);
						if (position.Y > Main.player[target].position.Y - 100f)
						{
							num20 -= Main.rand.Next(100, 251);
						}
						float num21 = num18 / (float)Math.Sqrt(num19 * num19 + num20 * num20);
						num = (float)num19 * num21;
						num2 = (float)num20 * num21;
					}
					else
					{
						localAI[3] = 1f;
						float num22 = (float)Main.rand.Next(26, 301) * 0.01f;
						int num23 = Main.rand.Next(-100, 101);
						int num24 = Main.rand.Next(-100, 101);
						float num25 = num22 / (float)Math.Sqrt(num23 * num23 + num24 * num24);
						num = (float)num23 * num25;
						num2 = (float)num24 * num25;
					}
					netUpdate = true;
				}
			}
			scale = ai[3];
			int num26 = 60;
			velocity.X = (velocity.X * (float)(num26 - 1) + num) / (float)num26;
			velocity.Y = (velocity.Y * (float)(num26 - 1) + num2) / (float)num26;
			if (velocity.Y > 0f)
			{
				int num27 = 3;
				int num28 = (int)base.Center.X / 16;
				int num29 = (int)base.Center.Y / 16;
				for (int j = num29; j < num29 + num27; j++)
				{
					if (Main.tile[num28, j] != null && ((Main.tile[num28, j].nactive() && Main.tileSolid[Main.tile[num28, j].type]) || Main.tile[num28, j].liquid > 0))
					{
						num2 *= -1f;
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.9f;
						}
					}
				}
			}
			if (velocity.Y < 0f)
			{
				int num30 = 30;
				bool flag2 = false;
				int num31 = (int)base.Center.X / 16;
				int num32 = (int)base.Center.Y / 16;
				for (int k = num32; k < num32 + num30; k++)
				{
					if (Main.tile[num31, k] != null && Main.tile[num31, k].nactive() && Main.tileSolid[Main.tile[num31, k].type])
					{
						flag2 = true;
					}
				}
				if (!flag2)
				{
					num2 *= -1f;
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.9f;
					}
				}
			}
			if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
			}
			else
			{
				localAI[1] = 15f;
				if (type == 661)
				{
					localAI[1] = 10f;
				}
				float num33 = 0f;
				Vector2 zero = Vector2.Zero;
				for (int l = 0; l < 200; l++)
				{
					NPC nPC = Main.npc[l];
					if (nPC.active && nPC.damage > 0 && !nPC.friendly && nPC.Hitbox.Distance(base.Center) <= 100f)
					{
						num33 += 1f;
						zero += DirectionFrom(nPC.Center);
					}
				}
				if (num33 > 0f)
				{
					zero /= num33;
					zero *= 2f;
					velocity += zero;
					if (velocity.Length() > 16f)
					{
						velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
					}
				}
			}
			if (collideX)
			{
				num = ((!(velocity.X < 0f)) ? (0f - Math.Abs(num)) : Math.Abs(num));
				velocity.X *= -0.2f;
			}
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			if (velocity.X > 0f)
			{
				direction = 1;
			}
			ai[0] = num;
			ai[1] = num2;
			if (type == 356)
			{
				catchItem = (short)(1994f + ai[2] - 1f);
			}
			if (type == 653)
			{
				position += netOffset;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.6f, 0.3f, 0.1f);
				if (Main.rand.Next(60) == 0)
				{
					int num34 = Dust.NewDust(position, width, height, 6, 0f, 0f, 254);
					Main.dust[num34].velocity *= 0f;
				}
				position -= netOffset;
			}
		}

		public static Color AI_121_QueenSlime_GetDustColor()
		{
			Color value = new Color(0, 160, 255);
			Color value3 = Color.Lerp(value2: new Color(255, 80, 255), value1: new Color(200, 200, 200), amount: Main.rand.NextFloat());
			return Color.Lerp(value, value3, Main.rand.NextFloat());
		}

		private void AI_121_QueenSlime_FlyMovement()
		{
			noTileCollide = true;
			noGravity = true;
			float num = 14f;
			float moveSpeed = 0.1f;
			float num2 = 250f;
			TargetClosest();
			Vector2 desiredVelocity = base.Center;
			if (timeLeft > 10)
			{
				if (!Collision.CanHit(this, Main.player[target]))
				{
					bool flag = false;
					Vector2 center = Main.player[target].Center;
					for (int i = 0; i < 16; i++)
					{
						float num3 = 16 * i;
						Point point = (center + new Vector2(0f, 0f - num3)).ToTileCoordinates();
						if (WorldGen.SolidOrSlopedTile(point.X, point.Y))
						{
							desiredVelocity = center + new Vector2(0f, 0f - num3 + 16f) - base.Center;
							flag = true;
							break;
						}
					}
					if (!flag)
					{
						desiredVelocity = center - base.Center;
					}
				}
				else
				{
					desiredVelocity = Main.player[target].Center + new Vector2(0f, 0f - num2) - base.Center;
				}
			}
			else
			{
				desiredVelocity = base.Center + new Vector2(500f * (float)direction, 0f - num2) - base.Center;
			}
			float num4 = desiredVelocity.Length();
			if (Math.Abs(desiredVelocity.X) < 40f)
			{
				desiredVelocity.X = velocity.X;
			}
			if (num4 > 100f && ((velocity.X < -12f && desiredVelocity.X > 0f) || (velocity.X > 12f && desiredVelocity.X < 0f)))
			{
				moveSpeed = 0.2f;
			}
			if (num4 < 40f)
			{
				desiredVelocity = velocity;
			}
			else if (num4 < 80f)
			{
				desiredVelocity.Normalize();
				desiredVelocity *= num * 0.65f;
			}
			else
			{
				desiredVelocity.Normalize();
				desiredVelocity *= num;
			}
			SimpleFlyMovement(desiredVelocity, moveSpeed);
			rotation = velocity.X * 0.1f;
			if (rotation > 0.5f)
			{
				rotation = 0.5f;
			}
			if (rotation < -0.5f)
			{
				rotation = -0.5f;
			}
		}

		private void AI_121_QueenSlime()
		{
			int num = 30;
			int num2 = 40;
			_ = Main.expertMode;
			float num3 = 1f;
			bool flag = false;
			bool flag2 = life <= lifeMax / 2;
			if (localAI[0] == 0f)
			{
				ai[1] = -100f;
				localAI[0] = lifeMax;
				TargetClosest();
				netUpdate = true;
			}
			Lighting.AddLight(base.Center, 1f, 0.7f, 0.9f);
			int num4 = 500;
			if (Main.player[target].dead || Math.Abs(base.Center.X - Main.player[target].Center.X) / 16f > (float)num4)
			{
				TargetClosest();
				if (Main.player[target].dead || Math.Abs(base.Center.X - Main.player[target].Center.X) / 16f > (float)num4)
				{
					EncourageDespawn(10);
					if (Main.player[target].Center.X < base.Center.X)
					{
						direction = 1;
					}
					else
					{
						direction = -1;
					}
				}
			}
			if (!Main.player[target].dead && timeLeft > 10 && !flag2 && ai[3] >= 300f && ai[0] == 0f && velocity.Y == 0f)
			{
				ai[0] = 2f;
				ai[1] = 0f;
				if (Main.netMode != 1)
				{
					netUpdate = true;
					TargetClosest(faceTarget: false);
					Point point = base.Center.ToTileCoordinates();
					Point point2 = Main.player[target].Center.ToTileCoordinates();
					Vector2 vector = Main.player[target].Center - base.Center;
					int num5 = 10;
					int num6 = 0;
					int num7 = 7;
					int num8 = 0;
					bool flag3 = false;
					if (ai[3] >= 360f || vector.Length() > 2000f)
					{
						if (ai[3] > 360f)
						{
							ai[3] = 360f;
						}
						flag3 = true;
						num8 = 100;
					}
					while (!flag3 && num8 < 100)
					{
						num8++;
						int num9 = Main.rand.Next(point2.X - num5, point2.X + num5 + 1);
						int num10 = Main.rand.Next(point2.Y - num5, point2.Y + 1);
						if ((num10 >= point2.Y - num7 && num10 <= point2.Y + num7 && num9 >= point2.X - num7 && num9 <= point2.X + num7) || (num10 >= point.Y - num6 && num10 <= point.Y + num6 && num9 >= point.X - num6 && num9 <= point.X + num6) || Main.tile[num9, num10].nactive())
						{
							continue;
						}
						int num11 = num10;
						int i = 0;
						if (Main.tile[num9, num11].nactive() && Main.tileSolid[Main.tile[num9, num11].type] && !Main.tileSolidTop[Main.tile[num9, num11].type])
						{
							i = 1;
						}
						else
						{
							for (; i < 150 && num11 + i < Main.maxTilesY; i++)
							{
								int num12 = num11 + i;
								if (Main.tile[num9, num12].nactive() && Main.tileSolid[Main.tile[num9, num12].type] && !Main.tileSolidTop[Main.tile[num9, num12].type])
								{
									i--;
									break;
								}
							}
						}
						num10 += i;
						bool flag4 = true;
						if (flag4 && Main.tile[num9, num10].lava())
						{
							flag4 = false;
						}
						if (flag4 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
						{
							flag4 = false;
						}
						if (flag4)
						{
							localAI[1] = num9 * 16 + 8;
							localAI[2] = num10 * 16 + 16;
							flag3 = true;
							break;
						}
					}
					if (num8 >= 100)
					{
						Vector2 bottom = Main.player[Player.FindClosest(base.position, width, height)].Bottom;
						localAI[1] = bottom.X;
						localAI[2] = bottom.Y;
						ai[3] = 0f;
					}
				}
			}
			if (!flag2 && (!Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0) || Math.Abs(base.Top.Y - Main.player[target].Bottom.Y) > 320f))
			{
				ai[3] += 1.5f;
			}
			else
			{
				float num13 = ai[3];
				ai[3] -= 1f;
				if (ai[3] < 0f)
				{
					if (Main.netMode != 1 && num13 > 0f)
					{
						netUpdate = true;
					}
					ai[3] = 0f;
				}
			}
			if (timeLeft <= 10 && ((flag2 && ai[0] != 0f) || (!flag2 && ai[0] != 3f)))
			{
				if (flag2)
				{
					ai[0] = 0f;
				}
				else
				{
					ai[0] = 3f;
				}
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] = 0f;
				netUpdate = true;
			}
			noTileCollide = false;
			noGravity = false;
			if (flag2)
			{
				localAI[3] += 1f;
				if (localAI[3] >= 24f)
				{
					localAI[3] = 0f;
				}
				if (ai[0] == 4f && ai[2] == 1f)
				{
					localAI[3] = 6f;
				}
				if (ai[0] == 5f && ai[2] != 1f)
				{
					localAI[3] = 7f;
				}
			}
			switch ((int)ai[0])
			{
			case 0:
			{
				if (flag2)
				{
					AI_121_QueenSlime_FlyMovement();
				}
				else
				{
					noTileCollide = false;
					noGravity = false;
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.8f;
						if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
						{
							velocity.X = 0f;
						}
					}
				}
				if (timeLeft <= 10 || (!flag2 && velocity.Y != 0f))
				{
					break;
				}
				ai[1] += 1f;
				int num18 = 60;
				if (flag2)
				{
					num18 = 120;
				}
				if (!(ai[1] > (float)num18))
				{
					break;
				}
				ai[1] = 0f;
				if (flag2)
				{
					Player player = Main.player[target];
					int num19 = Main.rand.Next(2);
					if (num19 != 1)
					{
						ai[0] = 4f;
					}
					else
					{
						ai[0] = 5f;
					}
					if (ai[0] == 4f)
					{
						ai[2] = 1f;
						if (player != null && player.active && !player.dead && (player.Bottom.Y < base.Bottom.Y || Math.Abs(player.Center.X - base.Center.X) > 250f))
						{
							ai[0] = 5f;
							ai[2] = 0f;
						}
					}
				}
				else
				{
					switch (Main.rand.Next(3))
					{
					default:
						ai[0] = 3f;
						break;
					case 1:
						ai[0] = 4f;
						break;
					case 2:
						ai[0] = 5f;
						break;
					}
				}
				netUpdate = true;
				break;
			}
			case 1:
			{
				rotation = 0f;
				ai[1] += 1f;
				num3 = MathHelper.Clamp(ai[1] / 30f, 0f, 1f);
				num3 = 0.5f + num3 * 0.5f;
				if (ai[1] >= 30f && Main.netMode != 1)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					netUpdate = true;
					TargetClosest();
				}
				if (Main.netMode == 1 && ai[1] >= 60f)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					TargetClosest();
				}
				Color newColor2 = AI_121_QueenSlime_GetDustColor();
				newColor2.A = 150;
				for (int num27 = 0; num27 < 10; num27++)
				{
					int num28 = Dust.NewDust(base.position + Vector2.UnitX * -20f, width + 40, height, 4, velocity.X, velocity.Y, 50, newColor2, 1.5f);
					Main.dust[num28].noGravity = true;
					Main.dust[num28].velocity *= 2f;
				}
				break;
			}
			case 2:
				rotation = 0f;
				ai[1] += 1f;
				num3 = MathHelper.Clamp((60f - ai[1]) / 60f, 0f, 1f);
				num3 = 0.5f + num3 * 0.5f;
				if (ai[1] >= 60f)
				{
					flag = true;
				}
				if (ai[1] == 60f)
				{
					Gore.NewGore(base.Center + new Vector2(-40f, -height / 2), velocity, 1258);
				}
				if (ai[1] >= 60f && Main.netMode != 1)
				{
					base.Bottom = new Vector2(localAI[1], localAI[2]);
					ai[0] = 1f;
					ai[1] = 0f;
					netUpdate = true;
				}
				if (Main.netMode == 1 && ai[1] >= 120f)
				{
					ai[0] = 1f;
					ai[1] = 0f;
				}
				if (!flag)
				{
					Color newColor = AI_121_QueenSlime_GetDustColor();
					newColor.A = 150;
					for (int n = 0; n < 10; n++)
					{
						int num26 = Dust.NewDust(base.position + Vector2.UnitX * -20f, width + 40, height, 4, velocity.X, velocity.Y, 50, newColor, 1.5f);
						Main.dust[num26].noGravity = true;
						Main.dust[num26].velocity *= 0.5f;
					}
				}
				break;
			case 3:
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.8f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					ai[1] += 4f;
					if ((double)life < (double)lifeMax * 0.66)
					{
						ai[1] += 4f;
					}
					if ((double)life < (double)lifeMax * 0.33)
					{
						ai[1] += 4f;
					}
					if (!(ai[1] >= 0f))
					{
						break;
					}
					netUpdate = true;
					TargetClosest();
					if (ai[2] == 3f)
					{
						velocity.Y = -13f;
						velocity.X += 3.5f * (float)direction;
						ai[1] = 0f;
						ai[2] = 0f;
						if (timeLeft > 10)
						{
							ai[0] = 0f;
						}
						else
						{
							ai[1] = -60f;
						}
					}
					else if (ai[2] == 2f)
					{
						velocity.Y = -6f;
						velocity.X += 4.5f * (float)direction;
						ai[1] = -40f;
						ai[2] += 1f;
					}
					else
					{
						velocity.Y = -8f;
						velocity.X += 4f * (float)direction;
						ai[1] = -40f;
						ai[2] += 1f;
					}
				}
				else
				{
					if (target >= 255)
					{
						break;
					}
					float num20 = 3f;
					if (Main.getGoodWorld)
					{
						num20 = 7f;
					}
					if ((direction == 1 && velocity.X < num20) || (direction == -1 && velocity.X > 0f - num20))
					{
						if ((direction == -1 && (double)velocity.X < 0.1) || (direction == 1 && (double)velocity.X > -0.1))
						{
							velocity.X += 0.2f * (float)direction;
						}
						else
						{
							velocity.X *= 0.93f;
						}
					}
				}
				break;
			case 4:
			{
				rotation *= 0.9f;
				noTileCollide = true;
				noGravity = true;
				if (ai[2] == 1f)
				{
					noTileCollide = false;
					noGravity = false;
					int num21 = 30;
					if (flag2)
					{
						num21 = 10;
					}
					if (Main.getGoodWorld)
					{
						num21 = 0;
					}
					Player player2 = Main.player[target];
					_ = base.Center;
					if (!player2.dead && player2.active && Math.Abs(base.Center.X - player2.Center.X) / 16f <= (float)num4)
					{
						_ = player2.Center;
					}
					if (velocity.Y == 0f)
					{
						ai[0] = 0f;
						ai[1] = 0f;
						ai[2] = 0f;
						netUpdate = true;
						SoundEngine.PlaySound(SoundID.Item167, base.Center);
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(base.Bottom, Vector2.Zero, 922, num2, 0f, Main.myPlayer);
						}
						for (int l = 0; l < 20; l++)
						{
							int num22 = Dust.NewDust(base.Bottom - new Vector2(width / 2, 30f), width, 30, 31, velocity.X, velocity.Y, 40, AI_121_QueenSlime_GetDustColor());
							Main.dust[num22].noGravity = true;
							Main.dust[num22].velocity.Y = -5f + Main.rand.NextFloat() * -3f;
							Main.dust[num22].velocity.X *= 7f;
						}
					}
					else if (ai[1] >= (float)num21)
					{
						for (int m = 0; m < 4; m++)
						{
							Vector2 position = base.Bottom - new Vector2(Main.rand.NextFloatDirection() * 16f, Main.rand.Next(8));
							int num23 = Dust.NewDust(position, 2, 2, 31, velocity.X, velocity.Y, 40, AI_121_QueenSlime_GetDustColor(), 1.4f);
							Main.dust[num23].position = position;
							Main.dust[num23].noGravity = true;
							Main.dust[num23].velocity.Y = velocity.Y * 0.9f;
							Main.dust[num23].velocity.X = ((Main.rand.Next(2) == 0) ? (-10f) : 10f) + Main.rand.NextFloatDirection() * 3f;
						}
					}
					velocity.X *= 0.8f;
					float num24 = ai[1];
					ai[1] += 1f;
					if (ai[1] >= (float)num21)
					{
						if (num24 < (float)num21)
						{
							netUpdate = true;
						}
						if (flag2 && ai[1] > (float)(num21 + 120))
						{
							ai[0] = 0f;
							ai[1] = 0f;
							ai[2] = 0f;
							velocity.Y *= 0.8f;
							netUpdate = true;
							break;
						}
						velocity.Y += 1f;
						float num25 = 14f;
						if (Main.getGoodWorld)
						{
							velocity.Y += 1f;
							num25 = 15.99f;
						}
						if (velocity.Y == 0f)
						{
							velocity.Y = 0.01f;
						}
						if (velocity.Y >= num25)
						{
							velocity.Y = num25;
						}
					}
					else
					{
						velocity.Y *= 0.8f;
					}
					break;
				}
				if (Main.netMode != 1 && ai[1] == 0f)
				{
					TargetClosest();
					netUpdate = true;
				}
				ai[1] += 1f;
				if (!(ai[1] >= 30f))
				{
					break;
				}
				if (ai[1] >= 60f)
				{
					ai[1] = 60f;
					if (Main.netMode != 1)
					{
						ai[1] = 0f;
						ai[2] = 1f;
						velocity.Y = -3f;
						netUpdate = true;
					}
				}
				Player player3 = Main.player[target];
				Vector2 center = base.Center;
				if (!player3.dead && player3.active && Math.Abs(base.Center.X - player3.Center.X) / 16f <= (float)num4)
				{
					center = player3.Center;
				}
				center.Y -= 384f;
				if (velocity.Y == 0f)
				{
					velocity = center - base.Center;
					velocity = velocity.SafeNormalize(Vector2.Zero);
					velocity *= 20f;
				}
				else
				{
					velocity.Y *= 0.95f;
				}
				break;
			}
			case 5:
			{
				rotation *= 0.9f;
				noTileCollide = true;
				noGravity = true;
				if (flag2)
				{
					ai[3] = 0f;
				}
				if (ai[2] == 1f)
				{
					ai[1] += 1f;
					if (!(ai[1] >= 10f))
					{
						break;
					}
					if (Main.netMode != 1)
					{
						int num14 = 10;
						if (Main.getGoodWorld)
						{
							num14 = 15;
						}
						int num15 = num14;
						if (!flag2)
						{
							num15 = 6;
						}
						for (int j = 0; j < num15; j++)
						{
							Vector2 spinningpoint = new Vector2(9f, 0f);
							spinningpoint = spinningpoint.RotatedBy((float)(-j) * ((float)Math.PI * 2f) / (float)num14, Vector2.Zero);
							Projectile.NewProjectile(base.Center.X, base.Center.Y, spinningpoint.X, spinningpoint.Y, 926, num, 0f, Main.myPlayer);
						}
					}
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
					break;
				}
				if (Main.netMode != 1 && ai[1] == 0f)
				{
					TargetClosest();
					netUpdate = true;
				}
				ai[1] += 1f;
				if (ai[1] >= 50f)
				{
					ai[1] = 50f;
					if (Main.netMode != 1)
					{
						ai[1] = 0f;
						ai[2] = 1f;
						netUpdate = true;
					}
				}
				float num16 = 100f;
				for (int k = 0; k < 4; k++)
				{
					Vector2 vector2 = base.Center + Main.rand.NextVector2CircularEdge(num16, num16);
					if (!flag2)
					{
						vector2 += new Vector2(0f, 20f);
					}
					Vector2 v = vector2 - base.Center;
					v = v.SafeNormalize(Vector2.Zero) * -8f;
					int num17 = Dust.NewDust(vector2, 2, 2, 31, v.X, v.Y, 40, AI_121_QueenSlime_GetDustColor(), 1.8f);
					Main.dust[num17].position = vector2;
					Main.dust[num17].noGravity = true;
					Main.dust[num17].alpha = 250;
					Main.dust[num17].velocity = v;
					Main.dust[num17].customData = this;
				}
				if (flag2)
				{
					AI_121_QueenSlime_FlyMovement();
				}
				break;
			}
			}
			dontTakeDamage = (hide = flag);
			if (num3 != scale)
			{
				base.position.X += width / 2;
				base.position.Y += height;
				scale = num3;
				width = (int)(114f * scale);
				height = (int)(100f * scale);
				base.position.X -= width / 2;
				base.position.Y -= height;
			}
			if (life <= 0)
			{
				return;
			}
			if (Main.rand.Next(360) == 0)
			{
				SoundEngine.PlaySound(65, base.position);
			}
			if (Main.netMode == 1)
			{
				return;
			}
			if (localAI[0] >= (float)(lifeMax / 2) && life < lifeMax / 2)
			{
				localAI[0] = life;
				ai[0] = 0f;
				ai[1] = 0f;
				ai[2] = 0f;
				netUpdate = true;
			}
			int num29 = (int)((float)lifeMax * 0.02f);
			if (flag2)
			{
				num29 = (int)((float)lifeMax * 0.015f);
			}
			if (!((float)(life + num29) < localAI[0]))
			{
				return;
			}
			localAI[0] = life;
			int num30 = Main.rand.Next(1, 3);
			for (int num31 = 0; num31 < num30; num31++)
			{
				int x = (int)(base.position.X + (float)Main.rand.Next(width - 32));
				int y = (int)(base.position.Y + (float)Main.rand.Next(height - 32));
				int num32 = 658;
				switch (Main.rand.Next(3))
				{
				case 0:
					num32 = 658;
					break;
				case 1:
					num32 = 659;
					break;
				case 2:
					num32 = 660;
					break;
				}
				int num33 = NewNPC(x, y, num32);
				Main.npc[num33].SetDefaults(num32);
				Main.npc[num33].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
				Main.npc[num33].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
				Main.npc[num33].ai[0] = -500 * Main.rand.Next(3);
				Main.npc[num33].ai[1] = 0f;
				if (Main.netMode == 2 && num33 < 200)
				{
					NetMessage.SendData(23, -1, -1, null, num33);
				}
			}
		}

		public bool AI_120_HallowBoss_IsInPhase2()
		{
			if (ai[3] != 1f)
			{
				return ai[3] == 3f;
			}
			return true;
		}

		public bool AI_120_HallowBoss_IsGenuinelyEnraged()
		{
			if (ai[3] != 2f)
			{
				return ai[3] == 3f;
			}
			return true;
		}

		private void AI_120_HallowBoss_DoMagicEffect(Vector2 spot, int effectType, float progress)
		{
			float num = 4f;
			float num2 = 1f;
			float fadeIn = 0f;
			float num3 = 0.5f;
			int num4 = 2;
			int num5 = 267;
			switch (effectType)
			{
			case 1:
				num2 = 0.5f;
				fadeIn = 2f;
				num3 = 0f;
				break;
			case 2:
			case 4:
				num = 50f;
				num2 = 0.5f;
				fadeIn = 0f;
				num3 = 0f;
				num4 = 4;
				break;
			case 3:
				num = 30f;
				num2 = 0.1f;
				fadeIn = 2.5f;
				num3 = 0f;
				break;
			case 5:
				if (progress == 0f)
				{
					num4 = 0;
				}
				else
				{
					num4 = 5;
					num5 = Main.rand.Next(86, 92);
				}
				if (progress >= 1f)
				{
					num4 = 0;
				}
				break;
			}
			for (int i = 0; i < num4; i++)
			{
				Dust dust = Dust.NewDustPerfect(spot, num5, Main.rand.NextVector2CircularEdge(num, num) * (Main.rand.NextFloat() * (1f - num3) + num3), 0, Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f), (Main.rand.NextFloat() * 2f + 2f) * num2);
				dust.fadeIn = fadeIn;
				dust.noGravity = true;
				switch (effectType)
				{
				case 2:
				case 4:
				{
					dust.velocity *= 0.005f;
					dust.scale = 3f * Utils.GetLerpValue(0.7f, 0f, progress, clamped: true) * Utils.GetLerpValue(0f, 0.3f, progress, clamped: true);
					dust.velocity = ((float)Math.PI * 2f * ((float)i / 4f) + (float)Math.PI / 4f).ToRotationVector2() * 8f * Utils.GetLerpValue(1f, 0f, progress, clamped: true);
					dust.velocity += velocity * 0.3f;
					float num6 = 0f;
					if (effectType == 4)
					{
						num6 = 0.5f;
					}
					dust.color = Main.hslToRgb(((float)i / 5f + num6 + progress * 0.5f) % 1f, 1f, 0.5f);
					dust.color.A /= 2;
					dust.alpha = 127;
					break;
				}
				case 5:
					if (progress == 0f)
					{
						dust.customData = this;
						dust.scale = 1.5f;
						dust.fadeIn = 0f;
						dust.velocity = new Vector2(0f, -1f) + Main.rand.NextVector2Circular(1f, 1f);
						dust.color = new Color(255, 255, 255, 80) * 0.3f;
					}
					else
					{
						dust.color = Main.hslToRgb(progress * 2f % 1f, 1f, 0.5f);
						dust.alpha = 0;
						dust.scale = 1f;
						dust.fadeIn = 1.3f;
						dust.velocity *= 3f;
						dust.velocity.X *= 0.1f;
						dust.velocity += velocity * 1f;
					}
					break;
				}
			}
		}

		public static bool ShouldEmpressBeEnraged()
		{
			return Main.dayTime;
		}

		private void AI_120_HallowBoss()
		{
			Vector2 value = new Vector2(-150f, -250f);
			Vector2 value2 = new Vector2(150f, -250f);
			Vector2 value3 = new Vector2(0f, -350f);
			Vector2 value4 = new Vector2(0f, -350f);
			Vector2 value5 = new Vector2(-80f, -500f);
			float num = 0.5f;
			float scaleFactor = 12f;
			float num2 = 40f;
			float num3 = 6400f;
			int num4 = 40;
			int num5 = 50;
			int num6 = 70;
			int num7 = 45;
			int num8 = 45;
			int num9 = 50;
			bool flag = AI_120_HallowBoss_IsInPhase2();
			bool flag2 = Main.expertMode;
			bool flag3 = flag && flag2;
			bool flag4 = ShouldEmpressBeEnraged();
			if (life == lifeMax && flag4 && !AI_120_HallowBoss_IsGenuinelyEnraged())
			{
				this.ai[3] += 2f;
			}
			bool flag5 = true;
			int num10 = 30;
			int num11 = 30;
			int num12 = 30;
			int num13 = 35;
			int num14 = 65;
			if (flag)
			{
				num5 = 60;
				num7 = 50;
				num8 = 50;
				num9 = 60;
				num6 = 65;
				num10 = 35;
				num11 = 35;
				num12 = 35;
				num13 = 40;
				num14 = 30;
			}
			num5 = GetAttackDamage_ForProjectiles(num5, num10);
			num7 = GetAttackDamage_ForProjectiles(num7, num11);
			num8 = GetAttackDamage_ForProjectiles(num8, num12);
			num9 = GetAttackDamage_ForProjectiles(num9, num13);
			num6 = GetAttackDamage_ForProjectiles(num6, num14);
			if (flag4)
			{
				num5 = 9999;
				num7 = 9999;
				num8 = 9999;
				num9 = 9999;
				num6 = 9999;
				flag2 = true;
			}
			float num15 = (flag2 ? 0.3f : 1f);
			bool flag6 = true;
			int num16 = 0;
			if (flag)
			{
				num16 += 15;
			}
			if (flag2)
			{
				num16 += 5;
			}
			switch ((int)this.ai[0])
			{
			case 0:
				if (this.ai[1] == 0f)
				{
					base.velocity = new Vector2(0f, 5f);
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(base.Center + new Vector2(0f, -80f), Vector2.Zero, 874, 0, 0f, Main.myPlayer);
					}
				}
				if (this.ai[1] == 10f)
				{
					SoundEngine.PlaySound(SoundID.Item161, base.Center);
				}
				base.velocity *= 0.95f;
				if (this.ai[1] > 10f && this.ai[1] < 150f)
				{
					int num67 = 2;
					for (int m = 0; m < num67; m++)
					{
						float num68 = MathHelper.Lerp(1.3f, 0.7f, Opacity) * Utils.GetLerpValue(0f, 120f, this.ai[1], clamped: true);
						Color newColor2 = Main.hslToRgb(this.ai[1] / 180f, 1f, 0.5f);
						int num69 = Dust.NewDust(base.position, width, height, 267, 0f, 0f, 0, newColor2);
						Main.dust[num69].position = base.Center + Main.rand.NextVector2Circular((float)width * 3f, (float)height * 3f) + new Vector2(0f, -150f);
						Main.dust[num69].velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num69].noGravity = true;
						Main.dust[num69].fadeIn = 0.6f + Main.rand.NextFloat() * 0.7f * num68;
						Main.dust[num69].velocity += Vector2.UnitY * 3f;
						Main.dust[num69].scale = 0.35f;
						if (num69 != 6000)
						{
							Dust dust2 = Dust.CloneDust(num69);
							dust2.scale /= 2f;
							dust2.fadeIn *= 0.85f;
							dust2.color = new Color(255, 255, 255, 255);
						}
					}
				}
				this.ai[1] += 1f;
				flag5 = false;
				flag6 = false;
				Opacity = MathHelper.Clamp(this.ai[1] / 180f, 0f, 1f);
				if (this.ai[1] >= 180f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
					TargetClosest();
				}
				break;
			case 1:
			{
				float num33 = (flag ? 20f : 45f);
				if (Main.getGoodWorld)
				{
					num33 /= 2f;
				}
				if (this.ai[1] <= 10f)
				{
					if (this.ai[1] == 0f)
					{
						TargetClosest();
					}
					NPCAimedTarget targetData4 = GetTargetData();
					if (targetData4.Invalid)
					{
						this.ai[0] = 13f;
						this.ai[1] = 0f;
						this.ai[2] += 1f;
						base.velocity /= 4f;
						netUpdate = true;
						break;
					}
					Vector2 center = targetData4.Center;
					center += new Vector2(0f, -300f);
					if (Distance(center) > 200f)
					{
						center -= DirectionTo(center) * 100f;
					}
					Vector2 vector2 = center - base.Center;
					float lerpValue = Utils.GetLerpValue(100f, 600f, vector2.Length());
					float num34 = vector2.Length();
					if (num34 > 18f)
					{
						num34 = 18f;
					}
					base.velocity = Vector2.Lerp(vector2.SafeNormalize(Vector2.Zero) * num34, vector2 / 6f, lerpValue);
					netUpdate = true;
				}
				base.velocity *= 0.92f;
				this.ai[1] += 1f;
				if (!(this.ai[1] >= num33))
				{
					break;
				}
				int num35 = (int)this.ai[2];
				int num36 = 2;
				int num37 = 0;
				if (!flag)
				{
					int num38 = num37++;
					int num39 = num37++;
					int num40 = num37++;
					int num41 = num37++;
					int num42 = num37++;
					int num43 = num37++;
					int num44 = num37++;
					int num45 = num37++;
					int num46 = num37++;
					int num47 = num37++;
					if (num35 % num37 == num38)
					{
						num36 = 2;
					}
					if (num35 % num37 == num39)
					{
						num36 = 8;
					}
					if (num35 % num37 == num40)
					{
						num36 = 6;
					}
					if (num35 % num37 == num41)
					{
						num36 = 8;
					}
					if (num35 % num37 == num42)
					{
						num36 = 5;
					}
					if (num35 % num37 == num43)
					{
						num36 = 2;
					}
					if (num35 % num37 == num44)
					{
						num36 = 8;
					}
					if (num35 % num37 == num45)
					{
						num36 = 4;
					}
					if (num35 % num37 == num46)
					{
						num36 = 8;
					}
					if (num35 % num37 == num47)
					{
						num36 = 5;
					}
					if ((float)life / (float)lifeMax <= 0.5f)
					{
						num36 = 10;
					}
				}
				if (flag)
				{
					int num48 = num37++;
					int num49 = num37++;
					int num50 = num37++;
					int num51 = -1;
					if (flag2)
					{
						num51 = num37++;
					}
					int num52 = num37++;
					int num53 = num37++;
					int num54 = num37++;
					int num55 = num37++;
					int num56 = num37++;
					int num57 = num37++;
					if (num35 % num37 == num48)
					{
						num36 = 7;
					}
					if (num35 % num37 == num49)
					{
						num36 = 2;
					}
					if (num35 % num37 == num50)
					{
						num36 = 8;
					}
					if (num35 % num37 == num52)
					{
						num36 = 5;
					}
					if (num35 % num37 == num53)
					{
						num36 = 2;
					}
					if (num35 % num37 == num54)
					{
						num36 = 6;
					}
					if (num35 % num37 == num54)
					{
						num36 = 6;
					}
					if (num35 % num37 == num55)
					{
						num36 = 4;
					}
					if (num35 % num37 == num56)
					{
						num36 = 8;
					}
					if (num35 % num37 == num51)
					{
						num36 = 11;
					}
					if (num35 % num37 == num57)
					{
						num36 = 12;
					}
				}
				TargetClosest();
				NPCAimedTarget targetData5 = GetTargetData();
				bool flag12 = false;
				if (AI_120_HallowBoss_IsGenuinelyEnraged())
				{
					if (!Main.dayTime)
					{
						flag12 = true;
					}
					if (Main.dayTime && Main.time >= 53400.0)
					{
						flag12 = true;
					}
				}
				if (targetData5.Invalid || Distance(targetData5.Center) > num3 || flag12)
				{
					num36 = 13;
				}
				if (num36 == 8 && targetData5.Center.X > base.Center.X)
				{
					num36 = 9;
				}
				if (flag2 && num36 != 5 && num36 != 12)
				{
					base.velocity = DirectionFrom(targetData5.Center).SafeNormalize(Vector2.Zero).RotatedBy((float)Math.PI / 2f * (float)(targetData5.Center.X > base.Center.X).ToDirectionInt()) * 20f;
				}
				this.ai[0] = num36;
				this.ai[1] = 0f;
				this.ai[2] += 1f;
				netUpdate = true;
				break;
			}
			case 2:
			{
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item164, base.Center);
				}
				float num90 = 90f - (float)num16;
				Vector2 value29 = new Vector2(-55f, -30f);
				NPCAimedTarget targetData11 = GetTargetData();
				Vector2 value30 = (targetData11.Invalid ? base.Center : targetData11.Center);
				if (Distance(value30 + value) > num2)
				{
					SimpleFlyMovement(DirectionTo(value30 + value).SafeNormalize(Vector2.Zero) * scaleFactor, num);
				}
				if (this.ai[1] < 60f)
				{
					AI_120_HallowBoss_DoMagicEffect(base.Center + value29, 1, Utils.GetLerpValue(0f, 60f, this.ai[1], clamped: true));
				}
				int num91 = 3;
				if (flag2)
				{
					num91 = 2;
				}
				if ((int)this.ai[1] % num91 == 0 && this.ai[1] < 60f)
				{
					float ai3 = this.ai[1] / 60f;
					Vector2 velocity = new Vector2(0f, -6f).RotatedBy((float)Math.PI / 2f * Main.rand.NextFloatDirection());
					if (flag3)
					{
						velocity = new Vector2(0f, -10f).RotatedBy((float)Math.PI * 2f * Main.rand.NextFloat());
					}
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(base.Center + value29, velocity, 873, num7, 0f, Main.myPlayer, target, ai3);
					}
					if (Main.netMode != 1)
					{
						int num92 = (int)(this.ai[1] / (float)num91);
						for (int num93 = 0; num93 < 255; num93++)
						{
							if (AI_120_HallowBoss_CanShootExtraAt(num93, num92 % 3, 3, 2400f))
							{
								Projectile.NewProjectile(base.Center + value29, velocity, 873, num7, 0f, Main.myPlayer, num93, ai3);
							}
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 60f + num90)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 3:
			{
				this.ai[1] += 1f;
				NPCAimedTarget targetData8 = GetTargetData();
				Vector2 value19 = (targetData8.Invalid ? base.Center : targetData8.Center);
				if (Distance(value19 + value2) > num2)
				{
					SimpleFlyMovement(DirectionTo(value19 + value2).SafeNormalize(Vector2.Zero) * scaleFactor, num);
				}
				if ((int)this.ai[1] % 180 == 0)
				{
					Vector2 value20 = new Vector2(0f, -100f);
					Projectile.NewProjectile(targetData8.Center + value20, Vector2.Zero, 874, num4, 0f, Main.myPlayer);
				}
				if (this.ai[1] >= 120f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 4:
			{
				float num81 = 20 - num16;
				new Vector2(0f, -100f);
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item162, base.Center);
				}
				if (this.ai[1] >= 6f && this.ai[1] < 54f)
				{
					AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(-55f, -20f), 2, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
					AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(55f, -20f), 4, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
				}
				NPCAimedTarget targetData10 = GetTargetData();
				Vector2 value24 = (targetData10.Invalid ? base.Center : targetData10.Center);
				if (Distance(value24 + value3) > num2)
				{
					SimpleFlyMovement(DirectionTo(value24 + value3).SafeNormalize(Vector2.Zero) * scaleFactor, num);
				}
				int num82 = 4;
				if (flag2)
				{
					num82 = 5;
				}
				if ((int)this.ai[1] % 4 == 0 && this.ai[1] < 100f)
				{
					int num83 = 1;
					int num84 = 0;
					for (int n = 0; n < num83; n++)
					{
						int num85 = (int)this.ai[1] / 4;
						Vector2 vector8 = Vector2.UnitX.RotatedBy((float)Math.PI / (float)(num82 * 2) + (float)num85 * ((float)Math.PI / (float)num82) + 0f);
						if (!flag2)
						{
							vector8.X += ((vector8.X > 0f) ? 0.5f : (-0.5f));
						}
						vector8.Normalize();
						float num86 = 300f;
						if (flag2)
						{
							num86 = 450f;
						}
						Vector2 center4 = targetData10.Center;
						if (Distance(center4) > 2400f)
						{
							continue;
						}
						if (Vector2.Dot(targetData10.Velocity.SafeNormalize(Vector2.UnitY), vector8) > 0f)
						{
							vector8 *= -1f;
						}
						int num87 = 90;
						Vector2 value25 = center4 + targetData10.Velocity * num87;
						Vector2 vector9 = center4 + vector8 * num86 - targetData10.Velocity * 30f;
						if (vector9.Distance(center4) < num86)
						{
							Vector2 value26 = center4 - vector9;
							if (value26 == Vector2.Zero)
							{
								value26 = vector8;
							}
							vector9 = center4 - Vector2.Normalize(value26) * num86;
						}
						Vector2 v3 = value25 - vector9;
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(vector9, Vector2.Zero, 919, num5, 0f, Main.myPlayer, v3.ToRotation(), this.ai[1] / 100f);
						}
						if (Main.netMode == 1)
						{
							continue;
						}
						int num88 = (int)(this.ai[1] / 4f);
						for (int num89 = 0; num89 < 255; num89++)
						{
							if (!AI_120_HallowBoss_CanShootExtraAt(num89, num88 % 3, 3, 2400f))
							{
								continue;
							}
							Player player2 = Main.player[num89];
							center4 = player2.Center;
							if (Vector2.Dot(player2.velocity.SafeNormalize(Vector2.UnitY), vector8) > 0f)
							{
								vector8 *= -1f;
							}
							Vector2 value27 = center4 + player2.velocity * num87;
							vector9 = center4 + vector8 * num86 - player2.velocity * 30f;
							if (vector9.Distance(center4) < num86)
							{
								Vector2 value28 = center4 - vector9;
								if (value28 == Vector2.Zero)
								{
									value28 = vector8;
								}
								vector9 = center4 - Vector2.Normalize(value28) * num86;
							}
							v3 = value27 - vector9;
							Projectile.NewProjectile(vector9, Vector2.Zero, 919, num5, 0f, Main.myPlayer, v3.ToRotation(), this.ai[1] / 100f);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 100f + num81)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 5:
			{
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item163, base.Center);
				}
				float num63 = 30f;
				num63 -= (float)num16;
				Vector2 value16 = new Vector2(55f, -30f);
				Vector2 value17 = base.Center + value16;
				if (this.ai[1] < 42f)
				{
					AI_120_HallowBoss_DoMagicEffect(base.Center + value16, 3, Utils.GetLerpValue(0f, 42f, this.ai[1], clamped: true));
				}
				NPCAimedTarget targetData7 = GetTargetData();
				Vector2 value18 = (targetData7.Invalid ? base.Center : targetData7.Center);
				if (Distance(value18 + value4) > num2)
				{
					SimpleFlyMovement(DirectionTo(value18 + value4).SafeNormalize(Vector2.Zero) * scaleFactor, num);
				}
				if ((int)this.ai[1] % 42 == 0 && this.ai[1] < 42f)
				{
					float num64 = (float)Math.PI * 2f * Main.rand.NextFloat();
					for (float num65 = 0f; num65 < 1f; num65 += 0.07692308f)
					{
						float num66 = num65;
						Vector2 spinningpoint = Vector2.UnitY.RotatedBy((float)Math.PI / 2f + (float)Math.PI * 2f * num66 + num64);
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(value17 + spinningpoint.RotatedBy(-1.5707963705062866) * 30f, spinningpoint * 8f, 872, num8, 0f, Main.myPlayer, 0f, num66);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 42f + num63)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 6:
			{
				float num24 = 120 - num16;
				Vector2 value7 = new Vector2(0f, -100f);
				Vector2 position = base.Center + value7;
				NPCAimedTarget targetData2 = GetTargetData();
				Vector2 value8 = (targetData2.Invalid ? base.Center : targetData2.Center);
				if (Distance(value8 + value5) > num2)
				{
					SimpleFlyMovement(DirectionTo(value8 + value5).SafeNormalize(Vector2.Zero) * scaleFactor * 0.3f, num * 0.7f);
				}
				if ((int)this.ai[1] % 60 == 0 && this.ai[1] < 180f)
				{
					int num25 = (int)this.ai[1] / 60;
					int num26 = ((targetData2.Center.X > base.Center.X) ? 1 : 0);
					float num27 = 6f;
					if (flag2)
					{
						num27 = 8f;
					}
					float num28 = 1f / num27;
					for (float num29 = 0f; num29 < 1f; num29 += num28)
					{
						float num30 = (num29 + num28 * 0.5f + (float)num25 * num28 * 0.5f) % 1f;
						float ai = (float)Math.PI * 2f * (num30 + (float)num26);
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(position, Vector2.Zero, 923, num9, 0f, Main.myPlayer, ai, whoAmI);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 180f + num24)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 7:
			{
				float num70 = 20f;
				float num71 = 60f;
				float num72 = num71 * 4f;
				if (flag2)
				{
					num70 = 40f;
					num71 = 40f;
					num72 = num71 * 6f;
				}
				num70 -= (float)num16;
				NPCAimedTarget targetData9 = GetTargetData();
				Vector2 value21 = (targetData9.Invalid ? base.Center : targetData9.Center);
				if (Distance(value21 + value4) > num2)
				{
					SimpleFlyMovement(DirectionTo(value21 + value4).SafeNormalize(Vector2.Zero) * scaleFactor * 0.4f, num);
				}
				if ((float)(int)this.ai[1] % num71 == 0f && this.ai[1] < num72)
				{
					SoundEngine.PlaySound(SoundID.Item162, base.Center);
					Main.rand.NextFloat();
					int num73 = (int)this.ai[1] / (int)num71;
					float num74 = 13f;
					float num75 = 150f;
					float num76 = num74 * num75;
					Vector2 center3 = targetData9.Center;
					if (Distance(center3) <= 3200f)
					{
						Vector2 vector5 = Vector2.Zero;
						Vector2 vector6 = Vector2.UnitY;
						float num77 = 0.4f;
						float num78 = 1.4f;
						float num79 = 1f;
						if (flag2)
						{
							num74 += 5f;
							num75 += 50f;
							num79 *= 1f;
							num76 *= 0.5f;
						}
						switch (num73)
						{
						case 0:
							center3 += new Vector2((0f - num76) / 2f, 0f) * num79;
							vector5 = new Vector2(0f, num76);
							vector6 = Vector2.UnitX;
							break;
						case 1:
							center3 += new Vector2(num76 / 2f, num75 / 2f) * num79;
							vector5 = new Vector2(0f, num76);
							vector6 = -Vector2.UnitX;
							break;
						case 2:
							center3 += new Vector2(0f - num76, 0f - num76) * num77 * num79;
							vector5 = new Vector2(num76 * num78, 0f);
							vector6 = new Vector2(1f, 1f);
							break;
						case 3:
							center3 += new Vector2(num76 * num77 + num75 / 2f, (0f - num76) * num77) * num79;
							vector5 = new Vector2((0f - num76) * num78, 0f);
							vector6 = new Vector2(-1f, 1f);
							break;
						case 4:
							center3 += new Vector2(0f - num76, num76) * num77 * num79;
							vector5 = new Vector2(num76 * num78, 0f);
							vector6 = center3.DirectionTo(targetData9.Center);
							break;
						case 5:
							center3 += new Vector2(num76 * num77 + num75 / 2f, num76 * num77) * num79;
							vector5 = new Vector2((0f - num76) * num78, 0f);
							vector6 = center3.DirectionTo(targetData9.Center);
							break;
						}
						for (float num80 = 0f; num80 <= 1f; num80 += 1f / num74)
						{
							Vector2 vector7 = center3 + vector5 * (num80 - 0.5f);
							Vector2 v2 = vector6;
							if (flag2)
							{
								Vector2 value22 = targetData9.Velocity * 20f * num80;
								Vector2 value23 = vector7.DirectionTo(targetData9.Center + value22);
								v2 = Vector2.Lerp(vector6, value23, 0.75f).SafeNormalize(Vector2.UnitY);
							}
							float ai2 = num80;
							if (Main.netMode != 1)
							{
								Projectile.NewProjectile(vector7, Vector2.Zero, 919, num6, 0f, Main.myPlayer, v2.ToRotation(), ai2);
							}
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= num72 + num70)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 8:
			case 9:
			{
				float num31 = 20 - num16;
				Vector2 value9 = new Vector2(0f, -100f);
				_ = base.Center + value9;
				flag6 = !(this.ai[1] >= 6f) || !(this.ai[1] <= 40f);
				int num32 = ((this.ai[0] != 8f) ? 1 : (-1));
				AI_120_HallowBoss_DoMagicEffect(base.Center, 5, Utils.GetLerpValue(40f, 90f, this.ai[1], clamped: true));
				if (this.ai[1] <= 40f)
				{
					if (this.ai[1] == 20f)
					{
						SoundEngine.PlaySound(SoundID.Item160, base.Center);
					}
					NPCAimedTarget targetData3 = GetTargetData();
					Vector2 destination = (targetData3.Invalid ? base.Center : targetData3.Center) + new Vector2(num32 * -550, 0f);
					SimpleFlyMovement(DirectionTo(destination).SafeNormalize(Vector2.Zero) * scaleFactor, num * 2f);
					if (this.ai[1] == 40f)
					{
						base.velocity *= 0.3f;
					}
				}
				else if (this.ai[1] <= 90f)
				{
					base.velocity = Vector2.Lerp(value2: new Vector2(num32 * 50, 0f), value1: base.velocity, amount: 0.05f);
					if (this.ai[1] == 90f)
					{
						base.velocity *= 0.7f;
					}
					num15 *= 1.5f;
				}
				else
				{
					base.velocity *= 0.92f;
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 90f + num31)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 10:
			{
				float num94 = 20 - num16;
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item161, base.Center);
				}
				flag6 = !(this.ai[1] >= 30f) || !(this.ai[1] <= 170f);
				base.velocity *= 0.95f;
				if (this.ai[1] == 90f)
				{
					if (this.ai[3] == 0f)
					{
						this.ai[3] = 1f;
					}
					if (this.ai[3] == 2f)
					{
						this.ai[3] = 3f;
					}
					base.Center = GetTargetData().Center + new Vector2(0f, -250f);
					netUpdate = true;
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 180f + num94)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					this.ai[2] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 11:
			{
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item162, base.Center);
				}
				float num58 = 20 - num16;
				new Vector2(0f, -100f);
				if (this.ai[1] >= 6f && this.ai[1] < 54f)
				{
					AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(-55f, -20f), 2, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
					AI_120_HallowBoss_DoMagicEffect(base.Center + new Vector2(55f, -20f), 4, Utils.GetLerpValue(0f, 100f, this.ai[1], clamped: true));
				}
				NPCAimedTarget targetData6 = GetTargetData();
				Vector2 value11 = (targetData6.Invalid ? base.Center : targetData6.Center);
				if (Distance(value11 + value3) > num2)
				{
					SimpleFlyMovement(DirectionTo(value11 + value3).SafeNormalize(Vector2.Zero) * scaleFactor, num);
				}
				if ((int)this.ai[1] % 3 == 0 && this.ai[1] < 100f)
				{
					int num59 = 1;
					for (int k = 0; k < num59; k++)
					{
						Vector2 vector3 = -targetData6.Velocity;
						vector3.SafeNormalize(-Vector2.UnitY);
						float num60 = 100f;
						Vector2 center2 = targetData6.Center;
						if (Distance(center2) > 2400f)
						{
							continue;
						}
						int num61 = 90;
						Vector2 value12 = center2 + targetData6.Velocity * num61;
						Vector2 vector4 = center2 + vector3 * num60;
						if (vector4.Distance(center2) < num60)
						{
							Vector2 value13 = center2 - vector4;
							if (value13 == Vector2.Zero)
							{
								value13 = vector3;
							}
							vector4 = center2 - Vector2.Normalize(value13) * num60;
						}
						Vector2 v = value12 - vector4;
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(vector4, Vector2.Zero, 919, num5, 0f, Main.myPlayer, v.ToRotation(), this.ai[1] / 100f);
						}
						if (Main.netMode == 1)
						{
							continue;
						}
						int num62 = (int)(this.ai[1] / 3f);
						for (int l = 0; l < 255; l++)
						{
							if (!AI_120_HallowBoss_CanShootExtraAt(l, num62 % 3, 3, 2400f))
							{
								continue;
							}
							Player player = Main.player[l];
							vector3 = -player.velocity;
							vector3.SafeNormalize(-Vector2.UnitY);
							num60 = 100f;
							center2 = player.Center;
							num61 = 90;
							Vector2 value14 = center2 + player.velocity * num61;
							vector4 = center2 + vector3 * num60;
							if (vector4.Distance(center2) < num60)
							{
								Vector2 value15 = center2 - vector4;
								if (value15 == Vector2.Zero)
								{
									value15 = vector3;
								}
								vector4 = center2 - Vector2.Normalize(value15) * num60;
							}
							v = value14 - vector4;
							Projectile.NewProjectile(vector4, Vector2.Zero, 919, num5, 0f, Main.myPlayer, v.ToRotation(), this.ai[1] / 100f);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 100f + num58)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 12:
			{
				float num20 = 90f - (float)num16;
				Vector2 value6 = new Vector2(-55f, -30f);
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item165, base.Center);
					base.velocity = new Vector2(0f, -12f);
				}
				base.velocity *= 0.95f;
				bool flag11 = this.ai[1] < 60f && this.ai[1] >= 10f;
				if (flag11)
				{
					AI_120_HallowBoss_DoMagicEffect(base.Center + value6, 1, Utils.GetLerpValue(0f, 60f, this.ai[1], clamped: true));
				}
				int num21 = 6;
				if (flag2)
				{
					num21 = 4;
				}
				float num22 = (this.ai[1] - 10f) / 50f;
				if ((int)this.ai[1] % num21 == 0 && flag11)
				{
					_ = this.ai[1] / 60f;
					Vector2 vector = (vector = new Vector2(0f, -20f).RotatedBy((float)Math.PI * 2f * num22));
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(base.Center + value6, vector, 873, num7, 0f, Main.myPlayer, target, num22);
					}
					if (Main.netMode != 1)
					{
						int num23 = (int)(this.ai[1] % (float)num21);
						for (int j = 0; j < 255; j++)
						{
							if (AI_120_HallowBoss_CanShootExtraAt(j, num23 % 3, 3, 2400f))
							{
								Projectile.NewProjectile(base.Center + value6, vector, 873, num7, 0f, Main.myPlayer, j, num22);
							}
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 60f + num20)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 13:
			{
				new Vector2(-55f, -30f);
				if (this.ai[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item165, base.Center);
					base.velocity = new Vector2(0f, -7f);
				}
				base.velocity *= 0.95f;
				TargetClosest();
				NPCAimedTarget targetData = GetTargetData();
				flag5 = false;
				bool flag7 = false;
				bool flag8 = false;
				if (!flag7)
				{
					if (AI_120_HallowBoss_IsGenuinelyEnraged())
					{
						if (!Main.dayTime)
						{
							flag8 = true;
						}
						if (Main.dayTime && Main.time >= 53400.0)
						{
							flag8 = true;
						}
					}
					flag7 = flag7 || flag8;
				}
				if (!flag7)
				{
					bool flag9 = targetData.Invalid || Distance(targetData.Center) > num3;
					flag7 = flag7 || flag9;
				}
				alpha = Utils.Clamp(alpha + flag7.ToDirectionInt() * 5, 0, 255);
				bool flag10 = alpha == 0 || alpha == 255;
				int num17 = 5;
				for (int i = 0; i < num17; i++)
				{
					float num18 = MathHelper.Lerp(1.3f, 0.7f, Opacity);
					Color newColor = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
					int num19 = Dust.NewDust(base.position - base.Size * 0.5f, width * 2, height * 2, 267, 0f, 0f, 0, newColor);
					Main.dust[num19].position = base.Center + Main.rand.NextVector2Circular(width, height);
					Main.dust[num19].velocity *= Main.rand.NextFloat() * 0.8f;
					Main.dust[num19].noGravity = true;
					Main.dust[num19].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
					Main.dust[num19].fadeIn = 0.4f + Main.rand.NextFloat() * 1.2f * num18;
					Main.dust[num19].velocity += Vector2.UnitY * -2f;
					Main.dust[num19].scale = 0.35f;
					if (num19 != 6000)
					{
						Dust dust = Dust.CloneDust(num19);
						dust.scale /= 2f;
						dust.fadeIn *= 0.85f;
						dust.color = new Color(255, 255, 255, 255);
					}
				}
				this.ai[1] += 1f;
				if (!(this.ai[1] >= 20f && flag10))
				{
					break;
				}
				if (alpha == 255)
				{
					active = false;
					if (Main.netMode != 1)
					{
						NetMessage.SendData(23, -1, -1, null, whoAmI);
					}
					return;
				}
				this.ai[0] = 1f;
				this.ai[1] = 0f;
				netUpdate = true;
				break;
			}
			}
			dontTakeDamage = !flag6;
			damage = GetAttackDamage_ScaledByStrength((float)defDamage * num15);
			if (flag4)
			{
				damage = 9999;
			}
			if (flag)
			{
				defense = (int)((float)defDefense * 1.2f);
			}
			else
			{
				defense = defDefense;
			}
			if ((localAI[0] += 1f) >= 44f)
			{
				localAI[0] = 0f;
			}
			if (flag5)
			{
				alpha = Utils.Clamp(alpha - 5, 0, 255);
			}
			Lighting.AddLight(base.Center, Vector3.One * Opacity);
		}

		private static void AI_120_HallowBoss_DeprecatedShot(NPCAimedTarget targetData, float stormsCount, int stormIndexInSeries, Vector2 offsetDirection, float distance)
		{
			int num = 1;
			Vector2 vector = offsetDirection * distance * num;
			vector *= new Vector2(3f, 1f);
			vector -= targetData.Velocity * 90f;
			vector += targetData.Center;
			Vector2 vector2 = vector - targetData.Center;
			if (Vector2.Dot(targetData.Velocity.SafeNormalize(Vector2.Zero), vector2.SafeNormalize(Vector2.Zero)) > 0.97f)
			{
				vector2 = vector2.RotatedBy((float)Math.PI / 4f * (float)(Main.rand.Next(2) * 2 - 1));
				vector = targetData.Center + vector2;
			}
			Vector2 vector3 = vector;
			Vector2 velocity = (targetData.Center - vector3) / 90f;
			Projectile.NewProjectile(vector3, velocity, 871, 1, 0f, Main.myPlayer);
			if (stormIndexInSeries == 0)
			{
				vector = vector3;
			}
			Projectile.NewProjectile(vector, Vector2.Zero, 871, 1, 0f, Main.myPlayer, 0f, (float)stormIndexInSeries * (1f / stormsCount));
		}

		private bool AI_120_HallowBoss_CanShootExtraAt(int playerIndex, int rotationIndexToAttack, int rotationSize, float attackScanDistance)
		{
			if (playerIndex == target)
			{
				return false;
			}
			if (playerIndex % rotationSize != rotationIndexToAttack)
			{
				return false;
			}
			Player player = Main.player[playerIndex];
			if (!player.active || player.dead || !playerInteraction[playerIndex])
			{
				return false;
			}
			if (Distance(player.Center) > attackScanDistance)
			{
				return false;
			}
			return true;
		}

		private void AI_119_Dandelion()
		{
			TargetClosest();
			Player player = Main.player[target];
			float windSpeedCurrent = Main.windSpeedCurrent;
			float num = player.Center.X - base.Center.X;
			float num2 = Math.Abs(num);
			float num3 = Math.Abs(player.Center.Y - base.Center.Y);
			if (!Main.IsItAHappyWindyDay && timeLeft > 10)
			{
				timeLeft = 10;
			}
			bool flag = player.active && !player.dead && num3 < 100f && num2 < 600f && ((num > 0f && windSpeedCurrent > 0f) || (num < 0f && windSpeedCurrent < 0f));
			if (ai[0] == 1f)
			{
				localAI[0] = 0f;
				if (num2 < 500f)
				{
					localAI[0] = 1f;
				}
				if (Main.netMode == 1)
				{
					return;
				}
				if (!flag)
				{
					ai[0] = 0f;
					netUpdate = true;
				}
				else
				{
					if (localAI[0] != 1f)
					{
						return;
					}
					localAI[1] += 1f;
					if (localAI[1] > 80f)
					{
						ai[0] = 0f;
						netUpdate = true;
					}
					else
					{
						if (localAI[1] != 40f)
						{
							return;
						}
						for (int i = 0; i < 1 + Main.rand.Next(3); i++)
						{
							int num4 = -1;
							if (num > 0f)
							{
								num4 = 1;
							}
							Vector2 velocity = new Vector2(2f * (float)num4, -2f);
							Vector2 value = new Vector2(num4 * Main.rand.Next(-2, 10), 10 + Main.rand.Next(-6, 6));
							velocity += value * 0.25f;
							Vector2 position = base.Center + value;
							position.X += num4 * 6;
							if (velocity.Y > 0f)
							{
								velocity.Y *= -1f;
							}
							Projectile.NewProjectile(position, velocity, 836, damage / 2, 1f, 255, target);
						}
						netUpdate = true;
					}
				}
			}
			else if (ai[0] == 0f)
			{
				localAI[0] = 0f;
				localAI[1] = 0f;
				if (Main.netMode != 1 && flag)
				{
					ai[0] = 1f;
					netUpdate = true;
				}
			}
		}

		private void AI_118_Seahorses()
		{
			noGravity = wet;
			Collision.GetWaterLineIterate(base.Center.ToTileCoordinates(), out var waterLineHeight);
			bool flag = waterLineHeight > 0f && base.Top.Y - waterLineHeight < 20f;
			if (!wet)
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.95f;
				}
				rotation += (velocity.X + velocity.Y) / 2f * 0.05f;
			}
			else
			{
				ai[1] -= 1f;
				if (ai[1] <= 0f)
				{
					velocity += ai[0].ToRotationVector2() * 0.06f;
					float num = velocity.Length();
					if (num > 3f || num < -3f)
					{
						velocity.X = Math.Min(3f, Math.Max(-3f, velocity.X));
						ai[1] = Main.rand.Next(450, 600);
						ai[0] = Main.rand.NextFloat() * ((float)Math.PI * 2f);
						if (flag && ai[0] > (float)Math.PI)
						{
							ai[0] -= (float)Math.PI;
						}
						netUpdate = true;
					}
				}
				else
				{
					velocity *= 0.95f;
				}
				rotation = velocity.X * 0.1f;
			}
			bool flag2 = collideY && wet && (!flag || velocity.Y < 0f);
			if (collideX || flag2)
			{
				Vector2 v = ai[0].ToRotationVector2();
				if (collideX)
				{
					v.X *= -1f;
				}
				if (flag2)
				{
					v.Y *= -1f;
				}
				ai[0] = v.ToRotation();
				velocity = ai[0].ToRotationVector2() * velocity.Length();
				netUpdate = true;
			}
		}

		private void AI_117_BloodNautilus()
		{
			float moveSpeed = 0.15f;
			float scaleFactor = 7.5f;
			float num = 60f;
			float num2 = 90f;
			float num3 = 180f;
			float num4 = 90f;
			float num5 = 90f;
			int num6 = 3;
			float num7 = 180f;
			bool flag = false;
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				alpha = 255;
				if (Main.netMode != 1)
				{
					ai[0] = -1f;
					netUpdate = true;
				}
			}
			if (ai[0] != -1f && Main.rand.Next(4) == 0)
			{
				position += netOffset;
				Dust dust = Dust.NewDustDirect(position + new Vector2(5f), width - 10, height - 10, 5);
				dust.velocity *= 0.5f;
				if (dust.velocity.Y < 0f)
				{
					dust.velocity.Y *= -1f;
				}
				dust.alpha = 120;
				dust.scale = 1f + Main.rand.NextFloat() * 0.4f;
				dust.velocity += base.velocity * 0.3f;
				position -= netOffset;
			}
			if (target == 255)
			{
				TargetClosest();
				ai[2] = direction;
			}
			if (Main.player[target].dead || Vector2.Distance(Main.player[target].Center, base.Center) > 2000f)
			{
				TargetClosest();
			}
			NPCAimedTarget nPCAimedTarget = GetTargetData();
			if (Main.dayTime || !Main.bloodMoon)
			{
				nPCAimedTarget = default(NPCAimedTarget);
			}
			int num8 = -1;
			switch ((int)ai[0])
			{
			case -1:
			{
				base.velocity *= 0.98f;
				int num15 = Math.Sign(nPCAimedTarget.Center.X - base.Center.X);
				if (num15 != 0)
				{
					direction = num15;
					spriteDirection = -direction;
				}
				if (localAI[1] == 0f && alpha < 100)
				{
					localAI[1] = 1f;
					int num16 = 36;
					for (int l = 0; l < num16; l++)
					{
						position += netOffset;
						Vector2 value3 = (Vector2.Normalize(base.velocity) * new Vector2((float)width / 2f, height) * 0.75f * 0.5f).RotatedBy((float)(l - (num16 / 2 - 1)) * ((float)Math.PI * 2f) / (float)num16) + base.Center;
						Vector2 value4 = value3 - base.Center;
						int num17 = Dust.NewDust(value3 + value4, 0, 0, 5, value4.X * 2f, value4.Y * 2f, 100, default(Color), 1.4f);
						Main.dust[num17].noGravity = true;
						Main.dust[num17].velocity = Vector2.Normalize(value4) * 3f;
						position -= netOffset;
					}
				}
				if (ai[2] > 5f)
				{
					base.velocity.Y = -2.5f;
					alpha -= 10;
					if (Collision.SolidCollision(position, width, height))
					{
						alpha += 15;
						if (alpha > 150)
						{
							alpha = 150;
						}
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				ai[2] += 1f;
				if (ai[2] >= 50f)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 0:
			{
				Vector2 destination = nPCAimedTarget.Center + new Vector2((0f - ai[2]) * 300f, -200f);
				if (base.Center.Distance(destination) > 50f)
				{
					Vector2 desiredVelocity = DirectionTo(destination) * scaleFactor;
					SimpleFlyMovement(desiredVelocity, moveSpeed);
				}
				direction = ((base.Center.X < nPCAimedTarget.Center.X) ? 1 : (-1));
				float num13 = base.Center.DirectionTo(nPCAimedTarget.Center).ToRotation() - 213f / 452f * (float)spriteDirection;
				if (spriteDirection == -1)
				{
					num13 += (float)Math.PI;
				}
				if (spriteDirection != direction)
				{
					spriteDirection = direction;
					rotation = 0f - rotation;
					num13 = 0f - num13;
				}
				rotation = rotation.AngleTowards(num13, 0.02f);
				ai[1] += 1f;
				if (ai[1] > num)
				{
					num8 = 1;
					int num14 = (int)ai[3];
					if (num14 % 7 == 3)
					{
						num8 = 3;
					}
					else if (num14 % 2 == 0)
					{
						SoundEngine.PlaySound(SoundID.Item170, base.Center);
						num8 = 2;
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item170, base.Center);
						num8 = 1;
					}
				}
				break;
			}
			case 1:
			{
				direction = ((!(base.Center.X < nPCAimedTarget.Center.X)) ? 1 : (-1));
				float num18 = base.Center.DirectionFrom(nPCAimedTarget.Center).ToRotation() - 213f / 452f * (float)spriteDirection;
				if (spriteDirection == -1)
				{
					num18 += (float)Math.PI;
				}
				bool flag2 = ai[1] < num2;
				if (spriteDirection != direction && flag2)
				{
					spriteDirection = direction;
					rotation = 0f - rotation;
					num18 = 0f - num18;
				}
				if (ai[1] < num2)
				{
					if (ai[1] == num2 - 1f)
					{
						SoundEngine.PlaySound(SoundID.Item172, base.Center);
					}
					flag = true;
					base.velocity *= 0.95f;
					rotation = rotation.AngleLerp(num18, 0.02f);
					position += netOffset;
					BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition4, out var mouthDirection4);
					Dust dust6 = Dust.NewDustDirect(mouthPosition4 + mouthDirection4 * 60f - new Vector2(40f), 80, 80, 16, 0f, 0f, 150, Color.Transparent, 0.6f);
					dust6.fadeIn = 1f;
					dust6.velocity = dust6.position.DirectionTo(mouthPosition4 + Main.rand.NextVector2Circular(15f, 15f)) * dust6.velocity.Length();
					dust6.noGravity = true;
					dust6 = Dust.NewDustDirect(mouthPosition4 + mouthDirection4 * 100f - new Vector2(30f), 60, 60, 16, 0f, 0f, 100, Color.Transparent, 0.9f);
					dust6.fadeIn = 1.5f;
					dust6.velocity = dust6.position.DirectionTo(mouthPosition4 + Main.rand.NextVector2Circular(15f, 15f)) * (dust6.velocity.Length() + 5f);
					dust6.noGravity = true;
					position -= netOffset;
				}
				else if (ai[1] < num2 + num3)
				{
					position += netOffset;
					rotation = rotation.AngleLerp(num18, 0.07f);
					BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition5, out var mouthDirection5);
					if (base.Center.Distance(nPCAimedTarget.Center) > 30f)
					{
						base.velocity = mouthDirection5 * -16f + base.Center.DirectionTo(nPCAimedTarget.Center) * 2f;
					}
					for (int m = 0; m < 4; m++)
					{
						Dust dust7 = Dust.NewDustDirect(mouthPosition5 + mouthDirection5 * 60f - new Vector2(15f), 30, 30, 5, 0f, 0f, 0, Color.Transparent, 1.5f);
						dust7.velocity = dust7.position.DirectionFrom(mouthPosition5 + Main.rand.NextVector2Circular(5f, 5f)) * dust7.velocity.Length();
						dust7.position -= mouthDirection5 * 60f;
						dust7 = Dust.NewDustDirect(mouthPosition5 + mouthDirection5 * 100f - new Vector2(20f), 40, 40, 5, 0f, 0f, 100, Color.Transparent, 1.5f);
						dust7.velocity = dust7.position.DirectionFrom(mouthPosition5 + Main.rand.NextVector2Circular(10f, 10f)) * (dust7.velocity.Length() + 5f);
						dust7.position -= mouthDirection5 * 100f;
					}
					position -= netOffset;
				}
				ai[1] += 1f;
				if (ai[1] >= num2 + num3)
				{
					num8 = 0;
				}
				break;
			}
			case 2:
			{
				direction = ((base.Center.X < nPCAimedTarget.Center.X) ? 1 : (-1));
				float num10 = base.Center.DirectionTo(nPCAimedTarget.Center).ToRotation() - 213f / 452f * (float)spriteDirection;
				if (spriteDirection == -1)
				{
					num10 += (float)Math.PI;
				}
				if (spriteDirection != direction)
				{
					spriteDirection = direction;
					rotation = 0f - rotation;
					num10 = 0f - num10;
				}
				rotation = rotation.AngleLerp(num10, 0.2f);
				if (ai[1] < num4)
				{
					position += netOffset;
					base.velocity *= 0.95f;
					BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition2, out var mouthDirection2);
					if (Main.rand.Next(4) != 0)
					{
						Dust dust3 = Dust.NewDustDirect(mouthPosition2 + mouthDirection2 * 60f - new Vector2(60f), 120, 120, 16, 0f, 0f, 150, Color.Transparent, 0.6f);
						dust3.fadeIn = 1f;
						dust3.velocity = dust3.position.DirectionTo(mouthPosition2 + Main.rand.NextVector2Circular(15f, 15f)) * (dust3.velocity.Length() + 3f);
						dust3.noGravity = true;
						dust3 = Dust.NewDustDirect(mouthPosition2 + mouthDirection2 * 100f - new Vector2(80f), 160, 160, 16, 0f, 0f, 100, Color.Transparent, 0.9f);
						dust3.fadeIn = 1.5f;
						dust3.velocity = dust3.position.DirectionTo(mouthPosition2 + Main.rand.NextVector2Circular(15f, 15f)) * (dust3.velocity.Length() + 5f);
						dust3.noGravity = true;
					}
					position -= netOffset;
				}
				else if (ai[1] < num4 + num5)
				{
					position += netOffset;
					base.velocity *= 0.9f;
					float num11 = (ai[1] - num4) % (num5 / (float)num6);
					BloodNautilus_GetMouthPositionAndRotation(out var mouthPosition3, out var mouthDirection3);
					if (num11 < num5 / (float)num6 * 0.8f)
					{
						for (int i = 0; i < 5; i++)
						{
							Dust dust4 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 50f - new Vector2(15f), 30, 30, 5, 0f, 0f, 0, Color.Transparent, 1.5f);
							dust4.velocity = dust4.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(5f, 5f)) * dust4.velocity.Length();
							dust4.position -= mouthDirection3 * 60f;
							dust4 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 90f - new Vector2(20f), 40, 40, 5, 0f, 0f, 100, Color.Transparent, 1.5f);
							dust4.velocity = dust4.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(10f, 10f)) * (dust4.velocity.Length() + 5f);
							dust4.position -= mouthDirection3 * 100f;
						}
					}
					if ((int)num11 == 0)
					{
						base.velocity += mouthDirection3 * -8f;
						for (int j = 0; j < 20; j++)
						{
							Dust dust5 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 60f - new Vector2(15f), 30, 30, 5, 0f, 0f, 0, Color.Transparent, 1.5f);
							dust5.velocity = dust5.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(5f, 5f)) * dust5.velocity.Length();
							dust5.position -= mouthDirection3 * 60f;
							dust5 = Dust.NewDustDirect(mouthPosition3 + mouthDirection3 * 100f - new Vector2(20f), 40, 40, 5, 0f, 0f, 100, Color.Transparent, 1.5f);
							dust5.velocity = dust5.position.DirectionFrom(mouthPosition3 + Main.rand.NextVector2Circular(10f, 10f)) * (dust5.velocity.Length() + 5f);
							dust5.position -= mouthDirection3 * 100f;
						}
						if (Main.netMode != 1)
						{
							int num12 = Main.rand.Next(5, 11);
							Vector2 value2 = mouthDirection3 * 10f;
							int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(30f, 25f);
							for (int k = 0; k < num12; k++)
							{
								Vector2 velocity = value2 + Main.rand.NextVector2Square(-6f, 6f);
								Projectile.NewProjectile(mouthPosition3 - mouthDirection3 * 5f, velocity, 814, attackDamage_ForProjectiles, 0f, Main.myPlayer);
							}
						}
					}
					position -= netOffset;
				}
				ai[1] += 1f;
				if (ai[1] >= num4 + num5)
				{
					num8 = 0;
				}
				break;
			}
			case 3:
			{
				direction = ((base.Center.X < nPCAimedTarget.Center.X) ? 1 : (-1));
				float targetAngle = 0f;
				spriteDirection = direction;
				if (ai[1] < num7)
				{
					position += netOffset;
					float num9 = MathHelper.Clamp(1f - ai[1] / num7 * 1.5f, 0f, 1f);
					base.velocity = Vector2.Lerp(value2: new Vector2(0f, num9 * -1.5f), value1: base.velocity, amount: 0.03f);
					base.velocity = Vector2.Zero;
					rotation = rotation.AngleLerp(targetAngle, 0.02f);
					BloodNautilus_GetMouthPositionAndRotation(out var _, out var _);
					float t = ai[1] / num7;
					float scaleFactor2 = Utils.GetLerpValue(0f, 0.5f, t) * Utils.GetLerpValue(1f, 0.5f, t);
					Lighting.AddLight(base.Center, new Vector3(1f, 0.5f, 0.5f) * scaleFactor2);
					if (Main.rand.Next(3) != 0)
					{
						Dust dust2 = Dust.NewDustDirect(base.Center - new Vector2(6f), 12, 12, 5, 0f, 0f, 60, Color.Transparent, 1.4f);
						dust2.position += new Vector2(spriteDirection * 12, 12f);
						dust2.velocity *= 0.1f;
					}
					position -= netOffset;
				}
				if (ai[1] == 10f || ai[1] == 20f || ai[1] == 30f)
				{
					BloodNautilus_CallForHelp();
				}
				ai[1] += 1f;
				if (ai[1] >= num7)
				{
					num8 = 0;
				}
				break;
			}
			}
			if (num8 != -1)
			{
				ai[0] = num8;
				ai[1] = 0f;
				ai[2] = 0f;
				netUpdate = true;
				TargetClosest();
				if (num8 == 0)
				{
					ai[2] = direction;
				}
				else
				{
					ai[3] += 1f;
				}
			}
			reflectsProjectiles = flag;
		}

		private void BloodNautilus_CallForHelp()
		{
			if (Main.netMode == 1 || !Main.player[target].active || Main.player[target].dead || Distance(Main.player[target].Center) > 2000f || CountNPCS(619) >= 3)
			{
				return;
			}
			Point point = base.Center.ToTileCoordinates();
			Point point2 = point;
			int num = 20;
			int num2 = 3;
			int num3 = 8;
			int num4 = 2;
			int num5 = 0;
			bool flag = false;
			while (!flag && num5 < 100)
			{
				num5++;
				int num6 = Main.rand.Next(point2.X - num, point2.X + num + 1);
				int num7 = Main.rand.Next(point2.Y - num, point2.Y + num + 1);
				if ((num7 < point2.Y - num3 || num7 > point2.Y + num3 || num6 < point2.X - num3 || num6 > point2.X + num3) && (num7 < point.Y - num2 || num7 > point.Y + num2 || num6 < point.X - num2 || num6 > point.X + num2) && !Main.tile[num6, num7].nactive())
				{
					bool flag2 = true;
					if (flag2 && Main.tile[num6, num7].lava())
					{
						flag2 = false;
					}
					if (flag2 && Collision.SolidTiles(num6 - num4, num6 + num4, num7 - num4, num7 + num4))
					{
						flag2 = false;
					}
					if (flag2 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						flag2 = false;
					}
					if (flag2)
					{
						Projectile.NewProjectile(num6 * 16 + 8, num7 * 16 + 8, 0f, 0f, 813, 0, 0f, Main.myPlayer);
						flag = true;
						break;
					}
				}
			}
		}

		private void AI_116_WaterStriders()
		{
			bool flag = false;
			if (Collision.GetWaterLine(base.Center.ToTileCoordinates(), out var waterLineHeight))
			{
				float num = base.Bottom.Y - 1f;
				if (base.Center.Y > waterLineHeight)
				{
					velocity.Y -= 0.8f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
					if (num + velocity.Y < waterLineHeight)
					{
						velocity.Y = waterLineHeight - num;
					}
				}
				else
				{
					velocity.Y = MathHelper.Min(velocity.Y, waterLineHeight - num);
					flag = true;
				}
			}
			else if (wet)
			{
				velocity.Y -= 0.2f;
			}
			if ((int)ai[0] != 0)
			{
				return;
			}
			ai[1] += 1f;
			velocity.X *= 0.9f;
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.6f;
			}
			bool flag2 = wet || flag;
			bool flag3 = flag2 || velocity.Y == 0f;
			int num2 = Main.rand.Next(120, 241);
			if (!flag2)
			{
				num2 = Main.rand.Next(60, 241);
			}
			if (!flag3 || !(ai[1] >= (float)num2))
			{
				return;
			}
			ai[1] = 0f;
			velocity.X = Main.rand.NextFloatDirection() * 5f;
			netUpdate = true;
			if (!flag2)
			{
				if (velocity.Y == 0f)
				{
					velocity.Y = -2f;
				}
				ai[1] = 60f;
			}
		}

		private void AI_115_LadyBugs()
		{
			if (Main.netMode != 1)
			{
				if (ai[1] == 0f)
				{
					ai[1] = Main.rand.NextFloat() * 0.2f + 0.7f;
					netUpdate = true;
				}
				if ((localAI[0] -= 1f) <= 0f)
				{
					localAI[0] = Main.rand.Next(60, 181);
					if (Main.rand.Next(5) == 0)
					{
						if (ai[2] == 0f)
						{
							ai[2] = 1f;
							ai[0] = 0f;
							netUpdate = true;
						}
						else if (ai[2] == 1f)
						{
							TargetClosest();
							ai[2] = 0f;
							ai[0] = Main.rand.NextFloat() * ((float)Math.PI * 2f);
							if (Distance(Main.player[target].Center) > 700f)
							{
								ai[0] = AngleTo(Main.player[target].Center) + Main.rand.NextFloatDirection() * 0.3f;
							}
							netUpdate = true;
						}
					}
					TargetClosest();
					ai[0] = Main.rand.NextFloat() * ((float)Math.PI * 2f);
					if (Distance(Main.player[target].Center) > 700f)
					{
						ai[0] = AngleTo(Main.player[target].Center) + Main.rand.NextFloatDirection() * 0.3f;
					}
					netUpdate = true;
				}
			}
			scale = ai[1];
			if (ai[2] == 0f)
			{
				Vector2 value = ai[0].ToRotationVector2() * 1f;
				value.X += Main.windSpeedTarget * 0.8f;
				velocity = Vector2.Lerp(velocity, value, 0.0125f);
				if (velocity.Y > 0f)
				{
					int num = 4;
					int num2 = (int)base.Center.X / 16;
					int num3 = (int)base.Center.Y / 16;
					for (int i = num3; i < num3 + num; i++)
					{
						if (Main.tile[num2, i] != null && ((Main.tile[num2, i].nactive() && Main.tileSolid[Main.tile[num2, i].type]) || Main.tile[num2, i].liquid > 0))
						{
							ai[0] = 0f - ai[0];
							if (velocity.Y > 0f)
							{
								velocity.Y *= 0.9f;
							}
						}
					}
				}
				if (velocity.Y < 0f)
				{
					int num4 = 30;
					bool flag = false;
					int num5 = (int)base.Center.X / 16;
					int num6 = (int)base.Center.Y / 16;
					for (int j = num6; j < num6 + num4; j++)
					{
						if (Main.tile[num5, j] != null && ((Main.tile[num5, j].nactive() && Main.tileSolid[Main.tile[num5, j].type]) || Main.tile[num5, j].liquid > 0))
						{
							flag = true;
						}
					}
					if (!flag)
					{
						ai[0] = 0f - ai[0];
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.9f;
						}
					}
				}
				if (collideX)
				{
					ai[0] = 0f - ai[0] + (float)Math.PI;
					velocity.X *= -0.2f;
				}
			}
			else
			{
				if (velocity.Y > 0f)
				{
					int num7 = 4;
					int num8 = (int)base.Center.X / 16 + direction;
					int num9 = (int)base.Center.Y / 16;
					for (int k = num9; k < num9 + num7; k++)
					{
						if (Main.tile[num8, k] != null && Main.tile[num8, k].liquid > 0)
						{
							TargetClosest();
							velocity.Y = -1f;
							ai[2] = 0f;
							ai[0] = Main.rand.NextFloat() * ((float)Math.PI / 4f) - (float)Math.PI / 2f;
							if (Distance(Main.player[target].Center) > 700f)
							{
								ai[0] = AngleTo(Main.player[target].Center) + Main.rand.NextFloatDirection() * 0.3f;
							}
							netUpdate = true;
							return;
						}
					}
				}
				if (velocity.Y != 0f)
				{
					velocity.X *= 0.98f;
					velocity.Y = MathHelper.Lerp(velocity.Y, 2f, 0.005f);
				}
				else
				{
					velocity = Vector2.Lerp(velocity, Vector2.UnitX * direction, 0.05f);
					velocity.Y += 0.2f;
					if (collideX)
					{
						direction *= -1;
						velocity.X *= -0.2f;
						netUpdate = true;
					}
				}
			}
			direction = ((velocity.X > 0f) ? 1 : (-1));
		}

		private void AI_114_Dragonflies()
		{
			if (localAI[0] == 0f && Main.netMode != 1)
			{
				localAI[0] = 1f;
				Vector2 center = base.Center;
				ai[2] = center.X;
				ai[3] = center.Y;
				velocity = (Main.rand.NextVector2Circular(5f, 3f) + Main.rand.NextVector2CircularEdge(5f, 3f)) * 0.4f;
				ai[1] = 0f;
				ai[0] = 1f;
				netUpdate = true;
			}
			switch ((int)ai[0])
			{
			case 0:
				velocity *= 0.94f;
				if (Main.netMode != 1 && (ai[1] += 1f) >= (float)(60 + Main.rand.Next(60)))
				{
					Vector2 vector = new Vector2(ai[2], ai[3]);
					if (Distance(vector) > 96f)
					{
						velocity = DirectionTo(vector) * 3f;
					}
					else if (Distance(vector) > 16f)
					{
						velocity = DirectionTo(vector) * 1f + Main.rand.NextVector2Circular(1f, 0.5f);
					}
					else
					{
						velocity = (Main.rand.NextVector2Circular(5f, 3f) + Main.rand.NextVector2CircularEdge(5f, 3f)) * 0.4f;
					}
					ai[1] = 0f;
					ai[0] = 1f;
					netUpdate = true;
				}
				break;
			case 1:
			{
				int num = 4;
				Vector2 other = new Vector2(ai[2], ai[3]);
				if (Distance(other) > 112f)
				{
					num = 200;
				}
				if ((ai[1] += 1f) >= (float)num)
				{
					ai[1] = 0f;
					ai[0] = 0f;
					netUpdate = true;
				}
				int num2 = (int)base.Center.X / 16;
				int num3 = (int)base.Center.Y / 16;
				int num4 = 3;
				for (int i = num3; i < num3 + num4; i++)
				{
					if (Main.tile[num2, i] != null && ((Main.tile[num2, i].nactive() && Main.tileSolid[Main.tile[num2, i].type]) || Main.tile[num2, i].liquid > 0))
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.9f;
						}
						velocity.Y -= 0.2f;
					}
				}
				if (!(velocity.Y < 0f))
				{
					break;
				}
				int num5 = 30;
				bool flag = false;
				for (int j = num3; j < num3 + num5; j++)
				{
					if (Main.tile[num2, j] != null && Main.tile[num2, j].nactive() && Main.tileSolid[Main.tile[num2, j].type])
					{
						flag = true;
						break;
					}
				}
				if (!flag && velocity.Y < 0f)
				{
					velocity.Y *= 0.9f;
				}
				break;
			}
			}
			if (velocity.X != 0f)
			{
				direction = ((velocity.X > 0f) ? 1 : (-1));
			}
			if (wet)
			{
				velocity.Y = -3f;
			}
			if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
				return;
			}
			localAI[1] = 15f;
			float num6 = 0f;
			Vector2 zero = Vector2.Zero;
			for (int k = 0; k < 200; k++)
			{
				NPC nPC = Main.npc[k];
				if (nPC.active && nPC.damage > 0 && !nPC.friendly && nPC.Hitbox.Distance(base.Center) <= 100f)
				{
					num6 += 1f;
					zero += DirectionFrom(nPC.Center);
				}
			}
			for (int l = 0; l < 255; l++)
			{
				Player player = Main.player[l];
				if (player.active && player.Hitbox.Distance(base.Center) <= 150f)
				{
					num6 += 1f;
					zero += DirectionFrom(player.Center);
				}
			}
			if (num6 > 0f)
			{
				float num7 = 2f;
				zero /= num6;
				zero *= num7;
				velocity += zero;
				if (velocity.Length() > 16f)
				{
					velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
				}
				Vector2 vector2 = base.Center + zero * 10f;
				ai[1] = -10f;
				ai[0] = 1f;
				ai[2] = vector2.X;
				ai[3] = vector2.Y;
				netUpdate = true;
			}
			else
			{
				if (Main.netMode == 1 || !((new Vector2(ai[2], ai[3]) - base.Center).Length() < 16f))
				{
					return;
				}
				int maxValue = 30;
				if (Main.tile[(int)ai[2] / 16, (int)ai[3] / 16].type != 519)
				{
					maxValue = 4;
				}
				if (Main.rand.Next(maxValue) != 0)
				{
					return;
				}
				int cattailX = (int)ai[2];
				int cattailY = (int)ai[2];
				if (FindCattailTop((int)ai[2] / 16, (int)ai[3] / 16, out cattailX, out cattailY))
				{
					ai[2] = cattailX * 16;
					ai[3] = cattailY * 16;
					netUpdate = true;
					return;
				}
				int num8 = (int)(base.Center.X / 16f);
				int m;
				for (m = (int)(base.Center.Y / 16f); !WorldGen.SolidTile(num8, m) && (double)m < Main.worldSurface; m++)
				{
				}
				m -= Main.rand.Next(3, 6);
				ai[2] = num8 * 16;
				ai[3] = m * 16;
				netUpdate = true;
			}
		}

		private void AI_113_WindyBalloon()
		{
			if (localAI[0] == 0f && Main.netMode != 1)
			{
				TargetClosest();
				localAI[0] = 1f;
				ai[2] = Main.rand.Next(7) + 1;
				int num = NewNPC((int)position.X, (int)position.Y, 1);
				if (Main.rand.Next(180) == 0)
				{
					Main.npc[num].SetDefaults(-4);
				}
				else if (Main.rand.Next(10) == 0)
				{
					Main.npc[num].SetDefaults(-7);
				}
				else if (Main.rand.Next(3) == 0)
				{
					Main.npc[num].SetDefaults(-3);
				}
				Main.npc[num].ai[0] = -999f;
				Main.npc[num].netUpdate = true;
				ai[3] = num;
				netUpdate = true;
				ai[1] = Main.npc[num].scale;
			}
			position = base.Center;
			base.Size = new Vector2(20f, 20f) * ai[1];
			scale = ai[1];
			base.Center = position;
			NPC nPC = AI_113_WindyBalloon_GetSlaveNPC();
			rotation = velocity.X * 0.05f;
			if (nPC != null)
			{
				NPCAimedTarget targetData = GetTargetData();
				float num2 = float.PositiveInfinity;
				int num3 = 0;
				Vector2 zero = Vector2.Zero;
				if (!targetData.Invalid)
				{
					zero = targetData.Center - base.Bottom;
					if (zero.Y < 0f)
					{
						num3 = (int)zero.Y / -16;
					}
					num2 = zero.Length();
					if (direction != Math.Sign(zero.X))
					{
						num3 = 0;
					}
				}
				if (wet || nPC.wet || collideX || (collideY && oldVelocity.Y < 0f))
				{
					float num4 = oldVelocity.X + (float)(direction * 8);
					position.X -= num4;
					nPC.position.X -= num4;
					TargetClosest(faceTarget: false);
					direction *= -1;
					velocity.X = direction * 2;
					life = -1;
					HitEffect();
					active = false;
					netUpdate = true;
					SoundEngine.PlaySound(DeathSound, position);
					return;
				}
				if (collideY)
				{
					velocity.Y = ((oldVelocity.Y > 0f) ? 1 : (-1));
					TargetClosest(faceTarget: false);
				}
				float num5 = 2f + Math.Abs(Main.windSpeedTarget) * 2f;
				if (Math.Sign(velocity.X) != direction || Math.Abs(velocity.X) < num5)
				{
					velocity.X += (float)direction * 0.01f;
					if (velocity.X * (float)direction < 0f)
					{
						if (Math.Abs(velocity.X) > num5)
						{
							velocity.X += (float)direction * 0.1f;
						}
						else
						{
							velocity.X += (float)direction * 0.05f;
						}
					}
					else if (Math.Abs(velocity.X) > num5)
					{
						velocity.X = (float)direction * num5;
					}
				}
				int num6 = (int)((position.X + (float)(width / 2)) / 16f) + direction;
				int num7 = (int)((position.Y + (float)height) / 16f);
				bool flag = true;
				int num8 = 8 + num3;
				bool flag2 = false;
				for (int i = num7; i < num7 + num8; i++)
				{
					if (Main.tile[num6, i] == null)
					{
						Main.tile[num6, i] = new Tile();
					}
					if ((Main.tile[num6, i].nactive() && Main.tileSolid[Main.tile[num6, i].type]) || Main.tile[num6, i].liquid > 0)
					{
						if (i < num7 + 5 + num3)
						{
							flag2 = true;
						}
						flag = false;
						break;
					}
				}
				if (num2 < 400f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					float num9 = 2f;
					float num10 = 0.035f;
					if (base.Center.Y + (float)(height / 4) > Main.player[target].position.Y + (float)(Main.player[target].height / 4) && velocity.Y > 0f - num9)
					{
						velocity.Y -= num10;
						if (velocity.Y > 0f)
						{
							velocity.Y -= num10;
						}
					}
					else if (base.Center.Y + (float)(height / 4) < Main.player[target].position.Y + (float)(Main.player[target].height / 4) && velocity.Y < num9)
					{
						velocity.Y += num10;
						if (velocity.Y < 0f)
						{
							velocity.Y += num10;
						}
					}
				}
				else
				{
					if (flag)
					{
						velocity.Y += 0.05f;
					}
					else
					{
						velocity.Y -= 0.1f;
					}
					if (flag2)
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y > 2f)
					{
						velocity.Y = 2f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				nPC.Center = base.Bottom + new Vector2(0f, -8f) + new Vector2(0f, 56f * ai[1]);
				nPC.velocity = velocity;
			}
			else
			{
				velocity.Y = MathHelper.Clamp(velocity.Y - 0.2f, -8f, 8f);
				velocity.X = MathHelper.Clamp(velocity.X + Main.windSpeedTarget * 0.3f, -4f, 4f);
				if (collideX || collideY)
				{
					float num11 = oldVelocity.X + (float)(direction * 8);
					position.X -= num11;
					TargetClosest(faceTarget: false);
					direction *= -1;
					velocity.X = direction * 2;
					life = -1;
					HitEffect();
					active = false;
					netUpdate = true;
					SoundEngine.PlaySound(DeathSound, position);
				}
			}
		}

		public NPC AI_113_WindyBalloon_GetSlaveNPC()
		{
			NPC nPC = null;
			int num = (int)ai[3];
			if (num >= 0 && num < 200)
			{
				nPC = Main.npc[num];
				if (!nPC.active || nPC.type != 1 || nPC.ai[0] != -999f)
				{
					nPC = null;
					ai[3] = -1f;
					netUpdate = true;
				}
			}
			else
			{
				nPC = null;
			}
			return nPC;
		}

		private void AI_112_FairyCritter()
		{
			bool flag = false;
			lavaImmune = true;
			if (Main.netMode != 1 && ai[2] > 1f)
			{
				int num = 18000;
				localAI[1] += 1f;
				if (localAI[1] >= (float)num)
				{
					ai[2] = 7f;
					if (Main.player[target].Center.X < base.Center.X)
					{
						direction = 1;
					}
					else
					{
						direction = -1;
					}
					netUpdate = true;
				}
			}
			switch ((int)ai[2])
			{
			case 0:
			{
				lavaImmune = false;
				noTileCollide = false;
				if (ai[0] == 0f && ai[1] == 0f)
				{
					ai[0] = base.Center.X;
					ai[1] = base.Center.Y;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					velocity = new Vector2(MathHelper.Lerp(2f, 4f, Main.rand.NextFloat()) * (float)(Main.rand.Next(2) * 2 - 1), MathHelper.Lerp(1f, 2f, Main.rand.NextFloat()) * (float)(Main.rand.Next(2) * 2 - 1));
					velocity *= 0.7f;
					netUpdate = true;
				}
				Vector2 vector4 = new Vector2(ai[0], ai[1]) - base.Center;
				if (vector4.Length() > 20f)
				{
					Vector2 vector5 = new Vector2((vector4.X > 0f) ? 1 : (-1), (vector4.Y > 0f) ? 1 : (-1));
					velocity += vector5 * 0.04f;
					if (Math.Abs(velocity.Y) > 2f)
					{
						velocity.Y *= 0.95f;
					}
				}
				TargetClosest();
				Player player = Main.player[target];
				if (!player.dead && player.Distance(base.Center) < 250f)
				{
					ai[2] = 1f;
					direction = ((!(player.Center.X > base.Center.X)) ? 1 : (-1));
					if (velocity.X * (float)direction < 0f)
					{
						velocity.X = direction * 2;
					}
					ai[3] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 1:
			{
				lavaImmune = false;
				noTileCollide = false;
				if (collideX)
				{
					direction *= -1;
					velocity.X = direction * 2;
				}
				if (collideY)
				{
					velocity.Y = ((oldVelocity.Y > 0f) ? 1 : (-1));
				}
				float num12 = 4.5f;
				if (Math.Sign(velocity.X) != direction || Math.Abs(velocity.X) < num12)
				{
					velocity.X += (float)direction * 0.04f;
					if (velocity.X * (float)direction < 0f)
					{
						if (Math.Abs(velocity.X) > num12)
						{
							velocity.X += (float)direction * 0.4f;
						}
						else
						{
							velocity.X += (float)direction * 0.2f;
						}
					}
					else if (Math.Abs(velocity.X) > num12)
					{
						velocity.X = (float)direction * num12;
					}
				}
				int num13 = (int)((position.X + (float)(width / 2)) / 16f);
				int num14 = 20;
				if (direction < 0)
				{
					num13 -= num14;
				}
				int num15 = (int)((position.Y + (float)height) / 16f);
				bool flag5 = true;
				int num16 = 8;
				bool flag6 = false;
				for (int i = num13; i <= num13 + num14; i++)
				{
					for (int j = num15; j < num15 + num16; j++)
					{
						if (Main.tile[i, j] == null)
						{
							Main.tile[i, j] = new Tile();
						}
						if ((Main.tile[i, j].nactive() && Main.tileSolid[Main.tile[i, j].type]) || Main.tile[i, j].liquid > 0)
						{
							if (j < num15 + 5)
							{
								flag6 = true;
							}
							flag5 = false;
							break;
						}
					}
				}
				if (flag5)
				{
					velocity.Y += 0.05f;
				}
				else
				{
					velocity.Y -= 0.2f;
				}
				if (flag6)
				{
					velocity.Y -= 0.3f;
				}
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
				if (velocity.Y < -5f)
				{
					velocity.Y = -5f;
				}
				break;
			}
			case 2:
			{
				noTileCollide = true;
				NPCAimedTarget targetData = GetTargetData();
				bool flag3 = false;
				if (targetData.Type == NPCTargetType.Player)
				{
					flag3 = Main.player[target].dead;
				}
				if (flag3)
				{
					ai[2] = 1f;
					direction = ((!(targetData.Center.X > base.Center.X)) ? 1 : (-1));
					if (velocity.X * (float)direction < 0f)
					{
						velocity.X = direction * 2;
					}
					ai[3] = 0f;
					netUpdate = true;
					break;
				}
				Rectangle r = Utils.CenteredRectangle(targetData.Center, new Vector2(targetData.Width + 60, targetData.Height / 2));
				if (Main.netMode != 1 && base.Hitbox.Intersects(r))
				{
					if (GetFairyTreasureCoords(out var treasureCoords2))
					{
						ai[0] = treasureCoords2.X;
						ai[1] = treasureCoords2.Y;
						ai[2] = 3f;
						ai[3] = 0f;
						netUpdate = true;
					}
					else
					{
						ai[2] = 6f;
						ai[3] = 0f;
						netUpdate = true;
					}
					break;
				}
				Vector2 vector3 = r.ClosestPointInRect(base.Center);
				Vector2 value = DirectionTo(vector3) * 2f;
				float num8 = Distance(vector3);
				if (num8 > 150f)
				{
					value *= 2f;
				}
				else if (num8 > 80f)
				{
					value *= 1.5f;
				}
				velocity = Vector2.Lerp(velocity, value, 0.07f);
				Point point = base.Center.ToTileCoordinates();
				if (ai[3] < 300f)
				{
					GetBirdFlightRecommendation(6, 3, point, out var goDownwards, out var goUpwards);
					if (goDownwards)
					{
						velocity.Y += 0.05f;
					}
					if (goUpwards)
					{
						velocity.Y -= 0.02f;
					}
					if (velocity.Y > 2f)
					{
						velocity.Y = 2f;
					}
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				if (WorldGen.InWorld(point.X, point.Y))
				{
					if (WorldGen.SolidTile(point))
					{
						ai[3] = Math.Min(ai[3] + 2f, 400f);
					}
					else
					{
						ai[3] = Math.Max(ai[3] - 1f, 0f);
					}
				}
				break;
			}
			case 3:
				noTileCollide = true;
				if (ai[3] == 15f)
				{
					SoundEngine.PlaySound(27, (int)position.X, (int)position.Y);
				}
				if (ai[3] <= 15f)
				{
					velocity *= 0.9f;
				}
				else
				{
					if (Main.player[target].Center.X > base.Center.X)
					{
						spriteDirection = -1;
					}
					else
					{
						spriteDirection = 1;
					}
					flag = true;
					float num6 = 0f;
					float num7 = ai[3] - 15f;
					float circleHeight = 22f;
					if (num7 <= 65f)
					{
						num6 = (float)Math.PI / 8f;
						circleHeight = 14f;
					}
					else if (num7 <= 130f)
					{
						num6 = -(float)Math.PI / 8f;
						circleHeight = 18f;
					}
					num6 *= (float)direction;
					Vector2 fairyCircleOffset3 = GetFairyCircleOffset(num7 / 65f, num6, circleHeight);
					Vector2 fairyCircleOffset4 = GetFairyCircleOffset(num7 / 65f + 0.0153846154f, num6, circleHeight);
					velocity = fairyCircleOffset4 - fairyCircleOffset3;
				}
				ai[3] += 1f;
				if (ai[3] >= 210f)
				{
					ai[2] = 4f;
					TargetClosest();
					ai[3] = 0f;
					netUpdate = true;
				}
				break;
			case 6:
			{
				noTileCollide = true;
				Vector2 vector = Main.player[target].Center - base.Center;
				if (vector.Length() > 100f)
				{
					ai[2] = 2f;
					TargetClosest();
					ai[3] = 0f;
					netUpdate = true;
					break;
				}
				if (!Collision.SolidCollision(position, width, height))
				{
					noTileCollide = false;
					if (collideX)
					{
						velocity.X *= -1f;
					}
					if (collideY)
					{
						velocity.Y *= -1f;
					}
				}
				if (vector.Length() > 20f)
				{
					Vector2 vector2 = new Vector2((vector.X > 0f) ? 1 : (-1), (vector.Y > 0f) ? 1 : (-1));
					velocity += vector2 * 0.04f;
					if (Math.Abs(velocity.Y) > 2f)
					{
						velocity.Y *= 0.95f;
					}
				}
				if (Main.netMode != 1 && GetFairyTreasureCoords(out var treasureCoords))
				{
					ai[0] = treasureCoords.X;
					ai[1] = treasureCoords.Y;
					ai[2] = 3f;
					ai[3] = 0f;
					netUpdate = true;
				}
				break;
			}
			case 4:
			{
				noTileCollide = true;
				NPCAimedTarget targetData2 = GetTargetData();
				bool flag4 = false;
				if (targetData2.Type == NPCTargetType.Player)
				{
					flag4 = Main.player[target].dead;
				}
				if (flag4)
				{
					ai[2] = 1f;
					direction = ((!(targetData2.Center.X > base.Center.X)) ? 1 : (-1));
					if (velocity.X * (float)direction < 0f)
					{
						velocity.X = direction * 2;
					}
					ai[3] = 0f;
					netUpdate = true;
					break;
				}
				Rectangle r2 = Utils.CenteredRectangle(new Vector2(ai[0] * 16f + 8f, ai[1] * 16f + 8f), Vector2.One * 5f);
				if (base.Hitbox.Intersects(r2))
				{
					ai[2] = 5f;
					ai[3] = 0f;
					netUpdate = true;
					break;
				}
				float num9 = Distance(targetData2.Center);
				float num10 = 300f;
				if (num9 > num10)
				{
					if (num9 < num10 + 100f && !Collision.SolidCollision(position, width, height))
					{
						noTileCollide = false;
						if (collideX)
						{
							velocity.X *= -1f;
						}
						if (collideY)
						{
							velocity.Y *= -1f;
						}
					}
					flag = true;
					if (Main.player[target].Center.X > base.Center.X)
					{
						spriteDirection = -1;
					}
					else
					{
						spriteDirection = 1;
					}
					Vector2 vector6 = DirectionFrom(targetData2.Center);
					if (num9 > num10 + 60f)
					{
						velocity += vector6 * -0.1f;
						if (Main.rand.Next(30) == 0)
						{
							SoundEngine.PlaySound(27, (int)position.X, (int)position.Y);
						}
					}
					else if (num9 < num10 + 30f)
					{
						Vector2 destination = r2.ClosestPointInRect(base.Center);
						Vector2 vector7 = DirectionTo(destination);
						velocity += vector7 * 0.1f;
					}
					if (velocity.Length() > 1f)
					{
						velocity *= 1f / velocity.Length();
					}
					break;
				}
				Vector2 vector8 = r2.ClosestPointInRect(base.Center);
				Vector2 value2 = DirectionTo(vector8);
				float num11 = Distance(vector8);
				if (num11 > 150f)
				{
					value2 *= 3f;
				}
				else if (num11 > 80f)
				{
					value2 *= 2f;
				}
				Point point2 = base.Center.ToTileCoordinates();
				if (ai[3] < 300f)
				{
					velocity = Vector2.Lerp(velocity, value2, 0.07f);
					GetBirdFlightRecommendation(4, 2, point2, out var goDownwards2, out var goUpwards2);
					if (goDownwards2)
					{
						velocity.Y += 0.05f;
					}
					if (goUpwards2)
					{
						velocity.Y -= 0.05f;
					}
					if (velocity.Y > 1f)
					{
						velocity.Y = 1f;
					}
					if (velocity.Y < -1f)
					{
						velocity.Y = -1f;
					}
				}
				else
				{
					velocity = Vector2.Lerp(velocity, value2, 0.07f);
				}
				if (WorldGen.SolidTile(point2))
				{
					ai[3] = Math.Min(ai[3] + 2f, 400f);
				}
				else
				{
					ai[3] = Math.Max(ai[3] - 1f, 0f);
				}
				break;
			}
			case 5:
			{
				localAI[1] = 0f;
				noTileCollide = true;
				bool flag2 = false;
				Tile tileSafely = Framing.GetTileSafely(new Point((int)ai[0], (int)ai[1]));
				if (!tileSafely.active() || !SceneMetrics.IsValidForOreFinder(tileSafely))
				{
					flag2 = true;
				}
				if (ai[3] == 15f)
				{
					SoundEngine.PlaySound(27, (int)position.X, (int)position.Y);
				}
				if (ai[3] <= 15f)
				{
					velocity *= 0.9f;
				}
				else
				{
					flag = true;
					float num2 = 0f;
					float num3 = ai[3] - 15f;
					float num4 = 22f;
					int num5 = (int)(num3 / 50f);
					num2 = (float)Math.Cos((float)num5 * 1f) * ((float)Math.PI * 2f) / 16f;
					num4 = (float)Math.Cos((float)num5 * 2f) * 10f + 8f;
					num2 *= (float)direction;
					Vector2 fairyCircleOffset = GetFairyCircleOffset(num3 / 50f, num2, num4);
					Vector2 fairyCircleOffset2 = GetFairyCircleOffset(num3 / 50f + 0.02f, num2, num4);
					velocity = fairyCircleOffset2 - fairyCircleOffset;
					if (Main.player[target].Center.X > base.Center.X)
					{
						spriteDirection = -1;
					}
					else
					{
						spriteDirection = 1;
					}
				}
				ai[3] += 1f;
				if (Main.netMode != 1 && ((ai[3] > 200f) ? true : false))
				{
					active = false;
					if (Main.netMode == 0)
					{
						FairyEffects(base.Center, type - 583);
					}
					else if (Main.netMode == 2)
					{
						netSkip = -1;
						life = 0;
						NetMessage.SendData(23, -1, -1, null, whoAmI);
						NetMessage.SendData(112, -1, -1, null, 2, (int)base.Center.X, (int)base.Center.Y, type - 583);
					}
				}
				break;
			}
			case 7:
				noTileCollide = true;
				velocity.X += 0.05f * (float)direction;
				velocity.X = MathHelper.Clamp(velocity.X, -10f, 10f);
				velocity.Y -= 0.025f;
				velocity.Y = MathHelper.Clamp(velocity.Y, -5f, 5f);
				EncourageDespawn(10);
				break;
			}
			dontTakeDamage = (dontTakeDamageFromHostiles = ai[2] > 1f);
			for (int k = 0; k < 200; k++)
			{
				if (k != whoAmI && Main.npc[k].active && Main.npc[k].aiStyle == 112 && Math.Abs(position.X - Main.npc[k].position.X) + Math.Abs(position.Y - Main.npc[k].position.Y) < (float)width * 1.5f)
				{
					if (position.Y < Main.npc[k].position.Y)
					{
						velocity.Y -= 0.05f;
					}
					else
					{
						velocity.Y += 0.05f;
					}
				}
			}
			if (!flag)
			{
				direction = ((velocity.X >= 0f) ? 1 : (-1));
				spriteDirection = -direction;
			}
			Color value3 = Color.HotPink;
			Color value4 = Color.LightPink;
			int num17 = 4;
			if (type == 584)
			{
				value3 = Color.LimeGreen;
				value4 = Color.LightSeaGreen;
			}
			if (type == 585)
			{
				value3 = Color.RoyalBlue;
				value4 = Color.LightBlue;
			}
			if ((int)Main.timeForVisualEffects % 2 == 0)
			{
				position += netOffset;
				Dust dust = Dust.NewDustDirect(base.Center - new Vector2(num17) * 0.5f, num17 + 4, num17 + 4, 278, 0f, 0f, 200, Color.Lerp(value3, value4, Main.rand.NextFloat()), 0.65f);
				dust.velocity *= 0f;
				dust.velocity += velocity * 0.3f;
				dust.noGravity = true;
				dust.noLight = true;
				position -= netOffset;
			}
			Lighting.AddLight(base.Center, value3.ToVector3() * 0.7f);
		}

		public static void FairyEffects(Vector2 Position, int type)
		{
			Color value = Color.HotPink;
			Color value2 = Color.LightPink;
			int num = 4;
			if (type == 1)
			{
				value = Color.LimeGreen;
				value2 = Color.LightSeaGreen;
			}
			if (type == 2)
			{
				value = Color.RoyalBlue;
				value2 = Color.LightBlue;
			}
			for (int i = 0; i < 40; i++)
			{
				Dust dust = Dust.NewDustDirect(Position - new Vector2(num) * 0.5f, num + 4, num + 4, 278, 0f, 0f, 200, Color.Lerp(value, value2, Main.rand.NextFloat()), 0.65f);
				dust.velocity *= 1.5f;
				if (i >= 30)
				{
					dust.velocity *= 3.5f;
				}
				else if (i >= 20)
				{
					dust.velocity *= 2f;
				}
				dust.fadeIn = (float)Main.rand.Next(0, 17) * 0.1f;
				dust.noGravity = true;
			}
			SoundEngine.PlaySound(SoundID.Item4, (int)Position.X, (int)Position.Y);
		}

		private void GetBirdFlightRecommendation(int downScanRange, int upRange, Point tCoords, out bool goDownwards, out bool goUpwards)
		{
			tCoords.X += direction;
			goDownwards = true;
			goUpwards = false;
			int x = tCoords.X;
			for (int i = tCoords.Y; i < tCoords.Y + downScanRange && WorldGen.InWorld(x, i); i++)
			{
				Tile tile = Main.tile[x, i];
				if (tile == null)
				{
					break;
				}
				if ((tile.nactive() && Main.tileSolid[tile.type]) || tile.liquid > 0)
				{
					if (i < tCoords.Y + upRange)
					{
						goUpwards = true;
					}
					goDownwards = false;
					break;
				}
			}
		}

		private Vector2 GetFairyCircleOffset(float elapsedTime, float circleRotation, float circleHeight)
		{
			return ((((float)Math.PI * 2f * elapsedTime + (float)Math.PI / 2f).ToRotationVector2() + new Vector2(0f, -1f)) * new Vector2(6 * -direction, circleHeight)).RotatedBy(circleRotation);
		}

		private bool GetFairyTreasureCoords(out Point treasureCoords)
		{
			treasureCoords = default(Point);
			Point point = base.Center.ToTileCoordinates();
			Rectangle value = new Rectangle(point.X, point.Y, 1, 1);
			value.Inflate(75, 50);
			int blackEdgeWidth = Main.Map.BlackEdgeWidth;
			Rectangle value2 = new Rectangle(0, 0, Main.maxTilesX, Main.maxTilesY);
			value2.Inflate(-blackEdgeWidth, -blackEdgeWidth);
			value = Rectangle.Intersect(value, value2);
			int num = -1;
			float num2 = -1f;
			for (int i = value.Left; i <= value.Right; i++)
			{
				for (int j = value.Top; j <= value.Bottom; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile == null || !tile.active() || !TileID.Sets.FriendlyFairyCanLureTo[tile.type] || !SceneMetrics.IsValidForOreFinder(tile))
					{
						continue;
					}
					short num3 = Main.tileOreFinderPriority[tile.type];
					if (TileID.Sets.Ore[tile.type])
					{
						int num4 = 3;
						int num5 = 3;
						int num6 = 40;
						int num7 = 0;
						for (int k = i - num4; k <= i + num4; k++)
						{
							for (int l = j - num5; l <= j + num5; l++)
							{
								if (Main.tile[k, l].active() && Main.tile[k, l].type == tile.type)
								{
									num7++;
								}
							}
						}
						if (num7 < num6)
						{
							num3 = -1;
						}
					}
					if (num <= num3)
					{
						float num8 = Distance(new Vector2(i * 16 + 8, j * 16 + 8));
						if (num != num3 || !(num8 >= num2))
						{
							num = num3;
							num2 = num8;
							treasureCoords.X = i;
							treasureCoords.Y = j;
						}
					}
				}
			}
			return num != -1;
		}

		private void AI_069_DukeFishron()
		{
			bool expertMode = Main.expertMode;
			float num = (expertMode ? 1.2f : 1f);
			bool flag = (double)life <= (double)lifeMax * 0.5;
			bool flag2 = expertMode && (double)life <= (double)lifeMax * 0.15;
			bool flag3 = ai[0] > 4f;
			bool flag4 = ai[0] > 9f;
			bool flag5 = ai[3] < 10f;
			if (flag4)
			{
				damage = (int)((float)defDamage * 1.1f * num);
				defense = 0;
			}
			else if (flag3)
			{
				damage = (int)((float)defDamage * 1.2f * num);
				defense = (int)((float)defDefense * 0.8f);
			}
			else
			{
				damage = defDamage;
				defense = defDefense;
			}
			int num2 = (expertMode ? 40 : 60);
			float num3 = (expertMode ? 0.55f : 0.45f);
			float scaleFactor = (expertMode ? 8.5f : 7.5f);
			if (flag4)
			{
				num3 = 0.7f;
				scaleFactor = 12f;
				num2 = 30;
			}
			else if (flag3 && flag5)
			{
				num3 = (expertMode ? 0.6f : 0.5f);
				scaleFactor = (expertMode ? 10f : 8f);
				num2 = (expertMode ? 40 : 20);
			}
			else if (flag5 && !flag3 && !flag4)
			{
				num2 = 30;
			}
			int num4 = (expertMode ? 28 : 30);
			float num5 = (expertMode ? 17f : 16f);
			if (flag4)
			{
				num4 = 25;
				num5 = 27f;
			}
			else if (flag5 && flag3)
			{
				num4 = (expertMode ? 27 : 30);
				if (expertMode)
				{
					num5 = 21f;
				}
			}
			int num6 = 80;
			int num7 = 4;
			float num8 = 0.3f;
			float scaleFactor2 = 5f;
			int num9 = 90;
			int num10 = 180;
			int num11 = 180;
			int num12 = 30;
			int num13 = 120;
			int num14 = 4;
			float scaleFactor3 = 6f;
			float scaleFactor4 = 20f;
			float num15 = (float)Math.PI * 2f / (float)(num13 / 2);
			int num16 = 75;
			Vector2 center = base.Center;
			Player player = Main.player[target];
			if (target < 0 || target == 255 || player.dead || !player.active || Vector2.Distance(player.Center, center) > 5600f)
			{
				TargetClosest();
				player = Main.player[target];
				netUpdate = true;
			}
			if (player.dead || Vector2.Distance(player.Center, center) > 5600f)
			{
				velocity.Y -= 0.4f;
				EncourageDespawn(10);
				if (ai[0] > 4f)
				{
					ai[0] = 5f;
				}
				else
				{
					ai[0] = 0f;
				}
				ai[2] = 0f;
			}
			if (player.position.Y < 800f || (double)player.position.Y > Main.worldSurface * 16.0 || (player.position.X > 6400f && player.position.X < (float)(Main.maxTilesX * 16 - 6400)))
			{
				num2 = 20;
				damage = defDamage * 2;
				defense = defDefense * 2;
				ai[3] = 0f;
				num5 += 6f;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				alpha = 255;
				rotation = 0f;
				if (Main.netMode != 1)
				{
					ai[0] = -1f;
					netUpdate = true;
				}
			}
			float num17 = (float)Math.Atan2(player.Center.Y - center.Y, player.Center.X - center.X);
			if (spriteDirection == 1)
			{
				num17 += (float)Math.PI;
			}
			if (num17 < 0f)
			{
				num17 += (float)Math.PI * 2f;
			}
			if (num17 > (float)Math.PI * 2f)
			{
				num17 -= (float)Math.PI * 2f;
			}
			if (ai[0] == -1f)
			{
				num17 = 0f;
			}
			if (ai[0] == 3f)
			{
				num17 = 0f;
			}
			if (ai[0] == 4f)
			{
				num17 = 0f;
			}
			if (ai[0] == 8f)
			{
				num17 = 0f;
			}
			float num18 = 0.04f;
			if (ai[0] == 1f || ai[0] == 6f)
			{
				num18 = 0f;
			}
			if (ai[0] == 7f)
			{
				num18 = 0f;
			}
			if (ai[0] == 3f)
			{
				num18 = 0.01f;
			}
			if (ai[0] == 4f)
			{
				num18 = 0.01f;
			}
			if (ai[0] == 8f)
			{
				num18 = 0.01f;
			}
			if (rotation < num17)
			{
				if ((double)(num17 - rotation) > Math.PI)
				{
					rotation -= num18;
				}
				else
				{
					rotation += num18;
				}
			}
			if (rotation > num17)
			{
				if ((double)(rotation - num17) > Math.PI)
				{
					rotation += num18;
				}
				else
				{
					rotation -= num18;
				}
			}
			if (rotation > num17 - num18 && rotation < num17 + num18)
			{
				rotation = num17;
			}
			if (rotation < 0f)
			{
				rotation += (float)Math.PI * 2f;
			}
			if (rotation > (float)Math.PI * 2f)
			{
				rotation -= (float)Math.PI * 2f;
			}
			if (rotation > num17 - num18 && rotation < num17 + num18)
			{
				rotation = num17;
			}
			if (ai[0] != -1f && ai[0] < 9f)
			{
				if (Collision.SolidCollision(position, width, height))
				{
					alpha += 15;
				}
				else
				{
					alpha -= 15;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 150)
				{
					alpha = 150;
				}
			}
			if (ai[0] == -1f)
			{
				velocity *= 0.98f;
				int num19 = Math.Sign(player.Center.X - center.X);
				if (num19 != 0)
				{
					direction = num19;
					spriteDirection = -direction;
				}
				if (ai[2] > 20f)
				{
					velocity.Y = -2f;
					alpha -= 5;
					if (Collision.SolidCollision(position, width, height))
					{
						alpha += 15;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				if (ai[2] == (float)(num9 - 30))
				{
					int num20 = 36;
					for (int i = 0; i < num20; i++)
					{
						Vector2 value = (Vector2.Normalize(velocity) * new Vector2((float)width / 2f, height) * 0.75f * 0.5f).RotatedBy((float)(i - (num20 / 2 - 1)) * ((float)Math.PI * 2f) / (float)num20) + base.Center;
						Vector2 value2 = value - base.Center;
						int num21 = Dust.NewDust(value + value2, 0, 0, 172, value2.X * 2f, value2.Y * 2f, 100, default(Color), 1.4f);
						Main.dust[num21].noGravity = true;
						Main.dust[num21].noLight = true;
						Main.dust[num21].velocity = Vector2.Normalize(value2) * 3f;
					}
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num16)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 0f && !player.dead)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 300 * Math.Sign((center - player.Center).X);
				}
				Vector2 vector = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * scaleFactor;
				if (velocity.X < vector.X)
				{
					velocity.X += num3;
					if (velocity.X < 0f && vector.X > 0f)
					{
						velocity.X += num3;
					}
				}
				else if (velocity.X > vector.X)
				{
					velocity.X -= num3;
					if (velocity.X > 0f && vector.X < 0f)
					{
						velocity.X -= num3;
					}
				}
				if (velocity.Y < vector.Y)
				{
					velocity.Y += num3;
					if (velocity.Y < 0f && vector.Y > 0f)
					{
						velocity.Y += num3;
					}
				}
				else if (velocity.Y > vector.Y)
				{
					velocity.Y -= num3;
					if (velocity.Y > 0f && vector.Y < 0f)
					{
						velocity.Y -= num3;
					}
				}
				int num22 = Math.Sign(player.Center.X - center.X);
				if (num22 != 0)
				{
					if (ai[2] == 0f && num22 != direction)
					{
						rotation += (float)Math.PI;
					}
					direction = num22;
					if (spriteDirection != -direction)
					{
						rotation += (float)Math.PI;
					}
					spriteDirection = -direction;
				}
				ai[2] += 1f;
				if (!(ai[2] >= (float)num2))
				{
					return;
				}
				int num23 = 0;
				switch ((int)ai[3])
				{
				case 0:
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
					num23 = 1;
					break;
				case 10:
					ai[3] = 1f;
					num23 = 2;
					break;
				case 11:
					ai[3] = 0f;
					num23 = 3;
					break;
				}
				if (flag)
				{
					num23 = 4;
				}
				switch (num23)
				{
				case 1:
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
					velocity = Vector2.Normalize(player.Center - center) * num5;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					if (num22 != 0)
					{
						direction = num22;
						if (spriteDirection == 1)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -direction;
					}
					break;
				case 2:
					ai[0] = 2f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				case 3:
					ai[0] = 3f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				case 4:
					ai[0] = 4f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				}
				netUpdate = true;
			}
			else if (ai[0] == 1f)
			{
				int num24 = 7;
				for (int j = 0; j < num24; j++)
				{
					Vector2 value3 = (Vector2.Normalize(velocity) * new Vector2((float)(width + 50) / 2f, height) * 0.75f).RotatedBy((double)(j - (num24 / 2 - 1)) * Math.PI / (double)(float)num24) + center;
					Vector2 value4 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
					int num25 = Dust.NewDust(value3 + value4, 0, 0, 172, value4.X * 2f, value4.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num25].noGravity = true;
					Main.dust[num25].noLight = true;
					Main.dust[num25].velocity /= 4f;
					Main.dust[num25].velocity -= velocity;
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num4)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 2f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 2f)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 300 * Math.Sign((center - player.Center).X);
				}
				Vector2 vector2 = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * scaleFactor2;
				if (velocity.X < vector2.X)
				{
					velocity.X += num8;
					if (velocity.X < 0f && vector2.X > 0f)
					{
						velocity.X += num8;
					}
				}
				else if (velocity.X > vector2.X)
				{
					velocity.X -= num8;
					if (velocity.X > 0f && vector2.X < 0f)
					{
						velocity.X -= num8;
					}
				}
				if (velocity.Y < vector2.Y)
				{
					velocity.Y += num8;
					if (velocity.Y < 0f && vector2.Y > 0f)
					{
						velocity.Y += num8;
					}
				}
				else if (velocity.Y > vector2.Y)
				{
					velocity.Y -= num8;
					if (velocity.Y > 0f && vector2.Y < 0f)
					{
						velocity.Y -= num8;
					}
				}
				if (ai[2] == 0f)
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				if (ai[2] % (float)num7 == 0f)
				{
					SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
					if (Main.netMode != 1)
					{
						Vector2 vector3 = Vector2.Normalize(player.Center - center) * (width + 20) / 2f + center;
						NewNPC((int)vector3.X, (int)vector3.Y + 45, 371);
					}
				}
				int num26 = Math.Sign(player.Center.X - center.X);
				if (num26 != 0)
				{
					direction = num26;
					if (spriteDirection != -direction)
					{
						rotation += (float)Math.PI;
					}
					spriteDirection = -direction;
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num6)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 3f)
			{
				velocity *= 0.98f;
				velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
				if (ai[2] == (float)(num9 - 30))
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 9);
				}
				if (Main.netMode != 1 && ai[2] == (float)(num9 - 30))
				{
					Vector2 vector4 = rotation.ToRotationVector2() * (Vector2.UnitX * direction) * (width + 20) / 2f + center;
					Projectile.NewProjectile(vector4.X, vector4.Y, direction * 2, 8f, 385, 0, 0f, Main.myPlayer);
					Projectile.NewProjectile(vector4.X, vector4.Y, -direction * 2, 8f, 385, 0, 0f, Main.myPlayer);
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num9)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 4f)
			{
				velocity *= 0.98f;
				velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
				if (ai[2] == (float)(num10 - 60))
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num10)
				{
					ai[0] = 5f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 5f && !player.dead)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 300 * Math.Sign((center - player.Center).X);
				}
				Vector2 vector5 = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * scaleFactor;
				if (velocity.X < vector5.X)
				{
					velocity.X += num3;
					if (velocity.X < 0f && vector5.X > 0f)
					{
						velocity.X += num3;
					}
				}
				else if (velocity.X > vector5.X)
				{
					velocity.X -= num3;
					if (velocity.X > 0f && vector5.X < 0f)
					{
						velocity.X -= num3;
					}
				}
				if (velocity.Y < vector5.Y)
				{
					velocity.Y += num3;
					if (velocity.Y < 0f && vector5.Y > 0f)
					{
						velocity.Y += num3;
					}
				}
				else if (velocity.Y > vector5.Y)
				{
					velocity.Y -= num3;
					if (velocity.Y > 0f && vector5.Y < 0f)
					{
						velocity.Y -= num3;
					}
				}
				int num27 = Math.Sign(player.Center.X - center.X);
				if (num27 != 0)
				{
					if (ai[2] == 0f && num27 != direction)
					{
						rotation += (float)Math.PI;
					}
					direction = num27;
					if (spriteDirection != -direction)
					{
						rotation += (float)Math.PI;
					}
					spriteDirection = -direction;
				}
				ai[2] += 1f;
				if (!(ai[2] >= (float)num2))
				{
					return;
				}
				int num28 = 0;
				switch ((int)ai[3])
				{
				case 0:
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
					num28 = 1;
					break;
				case 6:
					ai[3] = 1f;
					num28 = 2;
					break;
				case 7:
					ai[3] = 0f;
					num28 = 3;
					break;
				}
				if (flag2)
				{
					num28 = 4;
				}
				switch (num28)
				{
				case 1:
					ai[0] = 6f;
					ai[1] = 0f;
					ai[2] = 0f;
					velocity = Vector2.Normalize(player.Center - center) * num5;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					if (num27 != 0)
					{
						direction = num27;
						if (spriteDirection == 1)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -direction;
					}
					break;
				case 2:
					velocity = Vector2.Normalize(player.Center - center) * scaleFactor4;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					if (num27 != 0)
					{
						direction = num27;
						if (spriteDirection == 1)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -direction;
					}
					ai[0] = 7f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				case 3:
					ai[0] = 8f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				case 4:
					ai[0] = 9f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				}
				netUpdate = true;
			}
			else if (ai[0] == 6f)
			{
				int num29 = 7;
				for (int k = 0; k < num29; k++)
				{
					Vector2 value5 = (Vector2.Normalize(velocity) * new Vector2((float)(width + 50) / 2f, height) * 0.75f).RotatedBy((double)(k - (num29 / 2 - 1)) * Math.PI / (double)(float)num29) + center;
					Vector2 value6 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
					int num30 = Dust.NewDust(value5 + value6, 0, 0, 172, value6.X * 2f, value6.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num30].noGravity = true;
					Main.dust[num30].noLight = true;
					Main.dust[num30].velocity /= 4f;
					Main.dust[num30].velocity -= velocity;
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num4)
				{
					ai[0] = 5f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 2f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 7f)
			{
				if (ai[2] == 0f)
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				if (ai[2] % (float)num14 == 0f)
				{
					SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
					if (Main.netMode != 1)
					{
						Vector2 vector6 = Vector2.Normalize(velocity) * (width + 20) / 2f + center;
						int num31 = NewNPC((int)vector6.X, (int)vector6.Y + 45, 371);
						Main.npc[num31].target = target;
						Main.npc[num31].velocity = Vector2.Normalize(velocity).RotatedBy((float)Math.PI / 2f * (float)direction) * scaleFactor3;
						Main.npc[num31].netUpdate = true;
						Main.npc[num31].ai[3] = (float)Main.rand.Next(80, 121) / 100f;
					}
				}
				velocity = velocity.RotatedBy((0f - num15) * (float)direction);
				rotation -= num15 * (float)direction;
				ai[2] += 1f;
				if (ai[2] >= (float)num13)
				{
					ai[0] = 5f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 8f)
			{
				velocity *= 0.98f;
				velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
				if (ai[2] == (float)(num9 - 30))
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				if (Main.netMode != 1 && ai[2] == (float)(num9 - 30))
				{
					Projectile.NewProjectile(center.X, center.Y, 0f, 0f, 385, 0, 0f, Main.myPlayer, 1f, target + 1);
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num9)
				{
					ai[0] = 5f;
					ai[1] = 0f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 9f)
			{
				if (ai[2] < (float)(num11 - 90))
				{
					if (Collision.SolidCollision(position, width, height))
					{
						alpha += 15;
					}
					else
					{
						alpha -= 15;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				else if (alpha < 255)
				{
					alpha += 4;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				velocity *= 0.98f;
				velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
				if (ai[2] == (float)(num11 - 60))
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num11)
				{
					ai[0] = 10f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 10f && !player.dead)
			{
				dontTakeDamage = false;
				chaseable = false;
				if (alpha < 255)
				{
					alpha += 25;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				if (ai[1] == 0f)
				{
					ai[1] = 360 * Math.Sign((center - player.Center).X);
				}
				Vector2 desiredVelocity = Vector2.Normalize(player.Center + new Vector2(ai[1], -200f) - center - velocity) * scaleFactor;
				SimpleFlyMovement(desiredVelocity, num3);
				int num32 = Math.Sign(player.Center.X - center.X);
				if (num32 != 0)
				{
					if (ai[2] == 0f && num32 != direction)
					{
						rotation += (float)Math.PI;
						for (int l = 0; l < oldPos.Length; l++)
						{
							oldPos[l] = Vector2.Zero;
						}
					}
					direction = num32;
					if (spriteDirection != -direction)
					{
						rotation += (float)Math.PI;
					}
					spriteDirection = -direction;
				}
				ai[2] += 1f;
				if (!(ai[2] >= (float)num2))
				{
					return;
				}
				int num33 = 0;
				switch ((int)ai[3])
				{
				case 0:
				case 2:
				case 3:
				case 5:
				case 6:
				case 7:
					num33 = 1;
					break;
				case 1:
				case 4:
				case 8:
					num33 = 2;
					break;
				}
				switch (num33)
				{
				case 1:
					ai[0] = 11f;
					ai[1] = 0f;
					ai[2] = 0f;
					velocity = Vector2.Normalize(player.Center - center) * num5;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					if (num32 != 0)
					{
						direction = num32;
						if (spriteDirection == 1)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -direction;
					}
					break;
				case 2:
					ai[0] = 12f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				case 3:
					ai[0] = 13f;
					ai[1] = 0f;
					ai[2] = 0f;
					break;
				}
				netUpdate = true;
			}
			else if (ai[0] == 11f)
			{
				dontTakeDamage = false;
				chaseable = true;
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
				int num34 = 7;
				for (int m = 0; m < num34; m++)
				{
					Vector2 value7 = (Vector2.Normalize(velocity) * new Vector2((float)(width + 50) / 2f, height) * 0.75f).RotatedBy((double)(m - (num34 / 2 - 1)) * Math.PI / (double)(float)num34) + center;
					Vector2 value8 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
					int num35 = Dust.NewDust(value7 + value8, 0, 0, 172, value8.X * 2f, value8.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num35].noGravity = true;
					Main.dust[num35].noLight = true;
					Main.dust[num35].velocity /= 4f;
					Main.dust[num35].velocity -= velocity;
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num4)
				{
					ai[0] = 10f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 1f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 12f)
			{
				dontTakeDamage = true;
				chaseable = false;
				if (alpha < 255)
				{
					alpha += 17;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				velocity *= 0.98f;
				velocity.Y = MathHelper.Lerp(velocity.Y, 0f, 0.02f);
				if (ai[2] == (float)(num12 / 2))
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				if (Main.netMode != 1 && ai[2] == (float)(num12 / 2))
				{
					if (ai[1] == 0f)
					{
						ai[1] = 300 * Math.Sign((center - player.Center).X);
					}
					Vector2 vector7 = player.Center + new Vector2(0f - ai[1], -200f);
					Vector2 vector9 = (base.Center = vector7);
					center = vector9;
					int num36 = Math.Sign(player.Center.X - center.X);
					if (num36 != 0)
					{
						if (ai[2] == 0f && num36 != direction)
						{
							rotation += (float)Math.PI;
							for (int n = 0; n < oldPos.Length; n++)
							{
								oldPos[n] = Vector2.Zero;
							}
						}
						direction = num36;
						if (spriteDirection != -direction)
						{
							rotation += (float)Math.PI;
						}
						spriteDirection = -direction;
					}
				}
				ai[2] += 1f;
				if (ai[2] >= (float)num12)
				{
					ai[0] = 10f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 1f;
					if (ai[3] >= 9f)
					{
						ai[3] = 0f;
					}
					netUpdate = true;
				}
			}
			else if (ai[0] == 13f)
			{
				if (ai[2] == 0f)
				{
					SoundEngine.PlaySound(29, (int)center.X, (int)center.Y, 20);
				}
				velocity = velocity.RotatedBy((0f - num15) * (float)direction);
				rotation -= num15 * (float)direction;
				ai[2] += 1f;
				if (ai[2] >= (float)num13)
				{
					ai[0] = 10f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 1f;
					netUpdate = true;
				}
			}
		}

		private void AI_037_Destroyer()
		{
			if (ai[3] > 0f)
			{
				realLife = (int)ai[3];
			}
			if (target < 0 || target == 255 || Main.player[target].dead)
			{
				TargetClosest();
			}
			if (type >= 134 && type <= 136)
			{
				velocity.Length();
				if (type == 134 || (type != 134 && Main.npc[(int)ai[1]].alpha < 128))
				{
					if (alpha != 0)
					{
						for (int i = 0; i < 2; i++)
						{
							int num = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 182, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num].noGravity = true;
							Main.dust[num].noLight = true;
						}
					}
					alpha -= 42;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
			}
			if (type > 134)
			{
				bool flag = false;
				if (ai[1] <= 0f)
				{
					flag = true;
				}
				else if (Main.npc[(int)ai[1]].life <= 0)
				{
					flag = true;
				}
				if (flag)
				{
					life = 0;
					HitEffect();
					checkDead();
				}
			}
			if (Main.netMode != 1)
			{
				if (ai[0] == 0f && type == 134)
				{
					ai[3] = whoAmI;
					realLife = whoAmI;
					int num2 = 0;
					int num3 = whoAmI;
					int num4 = 80;
					if (Main.getGoodWorld)
					{
						num4 *= 2;
					}
					for (int j = 0; j <= num4; j++)
					{
						int num5 = 135;
						if (j == num4)
						{
							num5 = 136;
						}
						num2 = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num5, whoAmI);
						Main.npc[num2].ai[3] = whoAmI;
						Main.npc[num2].realLife = whoAmI;
						Main.npc[num2].ai[1] = num3;
						Main.npc[num3].ai[0] = num2;
						NetMessage.SendData(23, -1, -1, null, num2);
						num3 = num2;
					}
				}
				if (type == 135)
				{
					localAI[0] += Main.rand.Next(4);
					if (localAI[0] >= (float)Main.rand.Next(1400, 26000))
					{
						localAI[0] = 0f;
						TargetClosest();
						if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
						{
							Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)(height / 2));
							float num6 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector.X + (float)Main.rand.Next(-20, 21);
							float num7 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector.Y + (float)Main.rand.Next(-20, 21);
							float num8 = (float)Math.Sqrt(num6 * num6 + num7 * num7);
							num8 = 8f / num8;
							num6 *= num8;
							num7 *= num8;
							num6 += (float)Main.rand.Next(-20, 21) * 0.05f;
							num7 += (float)Main.rand.Next(-20, 21) * 0.05f;
							int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(22f, 18f);
							int num9 = 100;
							vector.X += num6 * 5f;
							vector.Y += num7 * 5f;
							int num10 = Projectile.NewProjectile(vector.X, vector.Y, num6, num7, num9, attackDamage_ForProjectiles, 0f, Main.myPlayer);
							Main.projectile[num10].timeLeft = 300;
							netUpdate = true;
						}
					}
				}
			}
			int num11 = (int)(position.X / 16f) - 1;
			int num12 = (int)((position.X + (float)width) / 16f) + 2;
			int num13 = (int)(position.Y / 16f) - 1;
			int num14 = (int)((position.Y + (float)height) / 16f) + 2;
			if (num11 < 0)
			{
				num11 = 0;
			}
			if (num12 > Main.maxTilesX)
			{
				num12 = Main.maxTilesX;
			}
			if (num13 < 0)
			{
				num13 = 0;
			}
			if (num14 > Main.maxTilesY)
			{
				num14 = Main.maxTilesY;
			}
			bool flag2 = false;
			if (!flag2)
			{
				Vector2 vector2 = default(Vector2);
				for (int k = num11; k < num12; k++)
				{
					for (int l = num13; l < num14; l++)
					{
						if (Main.tile[k, l] != null && ((Main.tile[k, l].nactive() && (Main.tileSolid[Main.tile[k, l].type] || (Main.tileSolidTop[Main.tile[k, l].type] && Main.tile[k, l].frameY == 0))) || Main.tile[k, l].liquid > 64))
						{
							vector2.X = k * 16;
							vector2.Y = l * 16;
							if (position.X + (float)width > vector2.X && position.X < vector2.X + 16f && position.Y + (float)height > vector2.Y && position.Y < vector2.Y + 16f)
							{
								flag2 = true;
								break;
							}
						}
					}
				}
			}
			if (!flag2)
			{
				if (type != 135 || ai[2] != 1f)
				{
					Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.3f, 0.1f, 0.05f);
				}
				localAI[1] = 1f;
				if (type == 134)
				{
					Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
					int num15 = 1000;
					bool flag3 = true;
					if (position.Y > Main.player[target].position.Y)
					{
						for (int m = 0; m < 255; m++)
						{
							if (Main.player[m].active)
							{
								Rectangle rectangle2 = new Rectangle((int)Main.player[m].position.X - num15, (int)Main.player[m].position.Y - num15, num15 * 2, num15 * 2);
								if (rectangle.Intersects(rectangle2))
								{
									flag3 = false;
									break;
								}
							}
						}
						if (flag3)
						{
							flag2 = true;
						}
					}
				}
			}
			else
			{
				localAI[1] = 0f;
			}
			float num16 = 16f;
			if (Main.dayTime || Main.player[target].dead)
			{
				flag2 = false;
				velocity.Y += 1f;
				if ((double)position.Y > Main.worldSurface * 16.0)
				{
					velocity.Y += 1f;
					num16 = 32f;
				}
				if ((double)position.Y > Main.rockLayer * 16.0)
				{
					for (int n = 0; n < 200; n++)
					{
						if (Main.npc[n].aiStyle == aiStyle)
						{
							Main.npc[n].active = false;
						}
					}
				}
			}
			float num17 = 0.1f;
			float num18 = 0.15f;
			if (Main.getGoodWorld)
			{
				num17 *= 1.2f;
				num18 *= 1.2f;
			}
			Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num19 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
			float num20 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
			num19 = (int)(num19 / 16f) * 16;
			num20 = (int)(num20 / 16f) * 16;
			vector3.X = (int)(vector3.X / 16f) * 16;
			vector3.Y = (int)(vector3.Y / 16f) * 16;
			num19 -= vector3.X;
			num20 -= vector3.Y;
			float num21 = (float)Math.Sqrt(num19 * num19 + num20 * num20);
			if (ai[1] > 0f && ai[1] < (float)Main.npc.Length)
			{
				try
				{
					vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num19 = Main.npc[(int)ai[1]].position.X + (float)(Main.npc[(int)ai[1]].width / 2) - vector3.X;
					num20 = Main.npc[(int)ai[1]].position.Y + (float)(Main.npc[(int)ai[1]].height / 2) - vector3.Y;
				}
				catch
				{
				}
				rotation = (float)Math.Atan2(num20, num19) + 1.57f;
				num21 = (float)Math.Sqrt(num19 * num19 + num20 * num20);
				int num22 = (int)(44f * scale);
				num21 = (num21 - (float)num22) / num21;
				num19 *= num21;
				num20 *= num21;
				velocity = Vector2.Zero;
				position.X += num19;
				position.Y += num20;
				return;
			}
			if (!flag2)
			{
				TargetClosest();
				velocity.Y += 0.15f;
				if (velocity.Y > num16)
				{
					velocity.Y = num16;
				}
				if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num16 * 0.4)
				{
					if (velocity.X < 0f)
					{
						velocity.X -= num17 * 1.1f;
					}
					else
					{
						velocity.X += num17 * 1.1f;
					}
				}
				else if (velocity.Y == num16)
				{
					if (velocity.X < num19)
					{
						velocity.X += num17;
					}
					else if (velocity.X > num19)
					{
						velocity.X -= num17;
					}
				}
				else if (velocity.Y > 4f)
				{
					if (velocity.X < 0f)
					{
						velocity.X += num17 * 0.9f;
					}
					else
					{
						velocity.X -= num17 * 0.9f;
					}
				}
			}
			else
			{
				if (soundDelay == 0)
				{
					float num23 = num21 / 40f;
					if (num23 < 10f)
					{
						num23 = 10f;
					}
					if (num23 > 20f)
					{
						num23 = 20f;
					}
					soundDelay = (int)num23;
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y);
				}
				num21 = (float)Math.Sqrt(num19 * num19 + num20 * num20);
				float num24 = Math.Abs(num19);
				float num25 = Math.Abs(num20);
				float num26 = num16 / num21;
				num19 *= num26;
				num20 *= num26;
				if (((velocity.X > 0f && num19 > 0f) || (velocity.X < 0f && num19 < 0f)) && ((velocity.Y > 0f && num20 > 0f) || (velocity.Y < 0f && num20 < 0f)))
				{
					if (velocity.X < num19)
					{
						velocity.X += num18;
					}
					else if (velocity.X > num19)
					{
						velocity.X -= num18;
					}
					if (velocity.Y < num20)
					{
						velocity.Y += num18;
					}
					else if (velocity.Y > num20)
					{
						velocity.Y -= num18;
					}
				}
				if ((velocity.X > 0f && num19 > 0f) || (velocity.X < 0f && num19 < 0f) || (velocity.Y > 0f && num20 > 0f) || (velocity.Y < 0f && num20 < 0f))
				{
					if (velocity.X < num19)
					{
						velocity.X += num17;
					}
					else if (velocity.X > num19)
					{
						velocity.X -= num17;
					}
					if (velocity.Y < num20)
					{
						velocity.Y += num17;
					}
					else if (velocity.Y > num20)
					{
						velocity.Y -= num17;
					}
					if ((double)Math.Abs(num20) < (double)num16 * 0.2 && ((velocity.X > 0f && num19 < 0f) || (velocity.X < 0f && num19 > 0f)))
					{
						if (velocity.Y > 0f)
						{
							velocity.Y += num17 * 2f;
						}
						else
						{
							velocity.Y -= num17 * 2f;
						}
					}
					if ((double)Math.Abs(num19) < (double)num16 * 0.2 && ((velocity.Y > 0f && num20 < 0f) || (velocity.Y < 0f && num20 > 0f)))
					{
						if (velocity.X > 0f)
						{
							velocity.X += num17 * 2f;
						}
						else
						{
							velocity.X -= num17 * 2f;
						}
					}
				}
				else if (num24 > num25)
				{
					if (velocity.X < num19)
					{
						velocity.X += num17 * 1.1f;
					}
					else if (velocity.X > num19)
					{
						velocity.X -= num17 * 1.1f;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num16 * 0.5)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y += num17;
						}
						else
						{
							velocity.Y -= num17;
						}
					}
				}
				else
				{
					if (velocity.Y < num20)
					{
						velocity.Y += num17 * 1.1f;
					}
					else if (velocity.Y > num20)
					{
						velocity.Y -= num17 * 1.1f;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num16 * 0.5)
					{
						if (velocity.X > 0f)
						{
							velocity.X += num17;
						}
						else
						{
							velocity.X -= num17;
						}
					}
				}
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			if (type != 134)
			{
				return;
			}
			if (flag2)
			{
				if (localAI[0] != 1f)
				{
					netUpdate = true;
				}
				localAI[0] = 1f;
			}
			else
			{
				if (localAI[0] != 0f)
				{
					netUpdate = true;
				}
				localAI[0] = 0f;
			}
			if (((velocity.X > 0f && oldVelocity.X < 0f) || (velocity.X < 0f && oldVelocity.X > 0f) || (velocity.Y > 0f && oldVelocity.Y < 0f) || (velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
			{
				netUpdate = true;
			}
		}

		private void AI_005_EaterOfSouls()
		{
			if (type == 210 || type == 211)
			{
				NPCUtils.TargetClosestNonBees(this);
			}
			else if (target < 0 || target <= 255 || Main.player[target].dead)
			{
				TargetClosest();
			}
			if (type == 619)
			{
				if (Main.dayTime)
				{
					velocity.Y -= 0.3f;
					EncourageDespawn(60);
				}
				position += netOffset;
				if (alpha == 255)
				{
					spriteDirection = direction;
					velocity.Y = -6f;
					for (int i = 0; i < 35; i++)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 5);
						dust.velocity *= 1f;
						dust.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust.velocity += velocity * 0.5f;
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha != 0)
				{
					for (int j = 0; j < 2; j++)
					{
						Dust dust2 = Dust.NewDustDirect(position, width, height, 5);
						dust2.velocity *= 1f;
						dust2.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust2.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust2.velocity += velocity * 0.3f;
					}
				}
				position -= netOffset;
			}
			NPCAimedTarget targetData = GetTargetData();
			bool flag = false;
			if (targetData.Type == NPCTargetType.Player)
			{
				flag = Main.player[target].dead;
			}
			float num = 6f;
			float num2 = 0.05f;
			if (type == 6 || type == 173)
			{
				num = 4f;
				num2 = 0.02f;
				if (type == 6 && Main.expertMode)
				{
					num2 = 0.035f;
				}
			}
			else if (type == 94)
			{
				num = 4.2f;
				num2 = 0.022f;
			}
			else if (type == 619)
			{
				num = 6f;
				num2 = 0.1f;
			}
			else if (type == 252)
			{
				if (targetData.Type != 0 && Collision.CanHit(this, targetData))
				{
					num = 6f;
					num2 = 0.1f;
				}
				else
				{
					num2 = 0.01f;
					num = 2f;
				}
			}
			else if (type == 42 || (type >= 231 && type <= 235))
			{
				num = 3.5f;
				num2 = 0.021f;
				if (type == 231)
				{
					num = 3f;
					num2 = 0.017f;
				}
				num *= 1f - scale;
				num2 *= 1f - scale;
				if ((double)(position.Y / 16f) < Main.worldSurface)
				{
					if (Main.player[target].position.Y - position.Y > 300f && velocity.Y < 0f)
					{
						velocity.Y *= 0.97f;
					}
					if (Main.player[target].position.Y - position.Y < 80f && velocity.Y > 0f)
					{
						velocity.Y *= 0.97f;
					}
				}
			}
			else if (type == 205)
			{
				num = 3.25f;
				num2 = 0.018f;
			}
			else if (type == 176)
			{
				num = 4f;
				num2 = 0.017f;
			}
			else if (type == 23)
			{
				num = 1f;
				num2 = 0.03f;
			}
			else if (type == 5)
			{
				num = 5f;
				num2 = 0.03f;
			}
			else if (type == 210 || type == 211)
			{
				ai[1] += 1f;
				float num3 = (ai[1] - 60f) / 60f;
				if (num3 > 1f)
				{
					num3 = 1f;
				}
				else
				{
					if (velocity.X > 6f)
					{
						velocity.X = 6f;
					}
					if (velocity.X < -6f)
					{
						velocity.X = -6f;
					}
					if (velocity.Y > 6f)
					{
						velocity.Y = 6f;
					}
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				num = 5f;
				num2 = 0.1f;
				num2 *= num3;
			}
			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num4 = targetData.Position.X + (float)(targetData.Width / 2);
			float num5 = targetData.Position.Y + (float)(targetData.Height / 2);
			num4 = (int)(num4 / 8f) * 8;
			num5 = (int)(num5 / 8f) * 8;
			vector.X = (int)(vector.X / 8f) * 8;
			vector.Y = (int)(vector.Y / 8f) * 8;
			num4 -= vector.X;
			num5 -= vector.Y;
			float num6 = (float)Math.Sqrt(num4 * num4 + num5 * num5);
			float num7 = num6;
			bool flag2 = false;
			if (num6 > 600f)
			{
				flag2 = true;
			}
			if (num6 == 0f)
			{
				num4 = velocity.X;
				num5 = velocity.Y;
			}
			else
			{
				num6 = num / num6;
				num4 *= num6;
				num5 *= num6;
			}
			bool num8 = type == 6 || type == 139 || type == 173 || type == 205;
			bool flag3 = type == 42 || type == 94 || type == 619 || type == 176 || type == 210 || type == 211 || (type >= 231 && type <= 235);
			bool flag4 = type != 173 && type != 6 && type != 42 && (type < 231 || type > 235) && type != 94 && type != 139 && type != 619;
			if (num8 || flag3)
			{
				if (num7 > 100f || flag3)
				{
					ai[0] += 1f;
					if (ai[0] > 0f)
					{
						velocity.Y += 0.023f;
					}
					else
					{
						velocity.Y -= 0.023f;
					}
					if (ai[0] < -100f || ai[0] > 100f)
					{
						velocity.X += 0.023f;
					}
					else
					{
						velocity.X -= 0.023f;
					}
					if (ai[0] > 200f)
					{
						ai[0] = -200f;
					}
				}
				if (num7 < 150f && (type == 6 || type == 94 || type == 173 || type == 619))
				{
					velocity.X += num4 * 0.007f;
					velocity.Y += num5 * 0.007f;
				}
			}
			if (flag)
			{
				num4 = (float)direction * num / 2f;
				num5 = (0f - num) / 2f;
			}
			else if (type == 619 && base.Center.Y > targetData.Center.Y - 200f)
			{
				velocity.Y -= 0.3f;
			}
			if (velocity.X < num4)
			{
				velocity.X += num2;
				if (flag4 && velocity.X < 0f && num4 > 0f)
				{
					velocity.X += num2;
				}
			}
			else if (velocity.X > num4)
			{
				velocity.X -= num2;
				if (flag4 && velocity.X > 0f && num4 < 0f)
				{
					velocity.X -= num2;
				}
			}
			if (velocity.Y < num5)
			{
				velocity.Y += num2;
				if (flag4 && velocity.Y < 0f && num5 > 0f)
				{
					velocity.Y += num2;
				}
			}
			else if (velocity.Y > num5)
			{
				velocity.Y -= num2;
				if (flag4 && velocity.Y > 0f && num5 < 0f)
				{
					velocity.Y -= num2;
				}
			}
			if (type == 23)
			{
				if (num4 > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num5, num4);
				}
				else if (num4 < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num5, num4) + 3.14f;
				}
			}
			else if (type == 139)
			{
				localAI[0] += 1f;
				if (justHit)
				{
					localAI[0] = 0f;
				}
				if (Main.netMode != 1 && localAI[0] >= 120f)
				{
					localAI[0] = 0f;
					if (targetData.Type != 0 && Collision.CanHit(this, targetData))
					{
						int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(25f, 22f);
						int num9 = 84;
						Projectile.NewProjectile(vector.X, vector.Y, num4, num5, num9, attackDamage_ForProjectiles, 0f, Main.myPlayer);
					}
				}
				int num10 = (int)position.X + width / 2;
				int num11 = (int)position.Y + height / 2;
				int i2 = num10 / 16;
				num11 /= 16;
				if (!WorldGen.SolidTile(i2, num11))
				{
					Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 0.3f, 0.1f, 0.05f);
				}
				if (num4 > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(num5, num4);
				}
				if (num4 < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(num5, num4) + 3.14f;
				}
			}
			else if (type == 6 || type == 94 || type == 173 || type == 619)
			{
				rotation = (float)Math.Atan2(num5, num4) - 1.57f;
			}
			else if (type == 42 || type == 176 || type == 205 || (type >= 231 && type <= 235))
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
			}
			if (type == 6 || type == 619 || type == 23 || type == 42 || type == 94 || type == 139 || type == 173 || type == 176 || type == 205 || type == 210 || type == 211 || (type >= 231 && type <= 235))
			{
				float num12 = 0.7f;
				if (type == 6 || type == 173)
				{
					num12 = 0.4f;
				}
				if (collideX)
				{
					netUpdate = true;
					velocity.X = oldVelocity.X * (0f - num12);
					if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
					{
						velocity.X = 2f;
					}
					if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
					{
						velocity.X = -2f;
					}
				}
				if (collideY)
				{
					netUpdate = true;
					velocity.Y = oldVelocity.Y * (0f - num12);
					if (velocity.Y > 0f && (double)velocity.Y < 1.5)
					{
						velocity.Y = 2f;
					}
					if (velocity.Y < 0f && (double)velocity.Y > -1.5)
					{
						velocity.Y = -2f;
					}
				}
				position += netOffset;
				if (type == 619)
				{
					int num13 = Dust.NewDust(position, width, height, 5, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
					Main.dust[num13].velocity *= 0.5f;
				}
				else if (type != 42 && type != 139 && type != 176 && type != 205 && type != 210 && type != 211 && type != 252 && (type < 231 || type > 235) && Main.rand.Next(20) == 0)
				{
					int num14 = 18;
					if (type == 173)
					{
						num14 = 5;
					}
					int num15 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), num14, velocity.X, 2f, 75, color, scale);
					Main.dust[num15].velocity.X *= 0.5f;
					Main.dust[num15].velocity.Y *= 0.1f;
				}
				position -= netOffset;
			}
			else if (type != 252 && Main.rand.Next(40) == 0)
			{
				int num16 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
				Main.dust[num16].velocity.X *= 0.5f;
				Main.dust[num16].velocity.Y *= 0.1f;
			}
			if ((type == 6 || type == 94 || type == 173 || type == 619) && wet)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.3f;
				if (velocity.Y < -2f)
				{
					velocity.Y = -2f;
				}
			}
			if (type == 205 && wet)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				TargetClosest();
			}
			if (type == 42 || type == 176 || (type >= 231 && type <= 235))
			{
				if (wet)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.Y -= 0.5f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
					TargetClosest();
				}
				if (ai[1] == 101f)
				{
					SoundEngine.PlaySound(SoundID.Item17, position);
					ai[1] = 0f;
				}
				if (Main.netMode != 1)
				{
					ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * scale;
					if (type == 176)
					{
						ai[1] += (float)Main.rand.Next(5, 20) * 0.1f * scale;
					}
					if (targetData.Type == NPCTargetType.Player)
					{
						Player player = Main.player[target];
						if (player != null && player.stealth == 0f && player.itemAnimation == 0)
						{
							ai[1] = 0f;
						}
					}
					if (ai[1] >= 130f)
					{
						if (targetData.Type != 0 && Collision.CanHit(this, targetData))
						{
							float num17 = 8f;
							Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)(height / 2));
							float num18 = targetData.Center.X - vector2.X + (float)Main.rand.Next(-20, 21);
							float num19 = targetData.Center.Y - vector2.Y + (float)Main.rand.Next(-20, 21);
							if ((num18 < 0f && velocity.X < 0f) || (num18 > 0f && velocity.X > 0f))
							{
								float num20 = (float)Math.Sqrt(num18 * num18 + num19 * num19);
								num20 = num17 / num20;
								num18 *= num20;
								num19 *= num20;
								int num21 = (int)(10f * scale);
								if (type == 176)
								{
									num21 = (int)(30f * scale);
								}
								int num22 = 55;
								int num23 = Projectile.NewProjectile(vector2.X, vector2.Y, num18, num19, num22, num21, 0f, Main.myPlayer);
								Main.projectile[num23].timeLeft = 300;
								ai[1] = 101f;
								netUpdate = true;
							}
							else
							{
								ai[1] = 0f;
							}
						}
						else
						{
							ai[1] = 0f;
						}
					}
				}
			}
			if (type == 139 && flag2)
			{
				if ((velocity.X > 0f && num4 > 0f) || (velocity.X < 0f && num4 < 0f))
				{
					if (Math.Abs(velocity.X) < 12f)
					{
						velocity.X *= 1.05f;
					}
				}
				else
				{
					velocity.X *= 0.9f;
				}
			}
			if (Main.netMode != 1)
			{
				if (type == 94 && !flag)
				{
					if (justHit)
					{
						localAI[0] = 0f;
					}
					localAI[0] += 1f;
					if (localAI[0] == 180f)
					{
						if (targetData.Type != 0 && Collision.CanHit(this, targetData))
						{
							NewNPC((int)(position.X + (float)(width / 2) + velocity.X), (int)(position.Y + (float)(height / 2) + velocity.Y), 112);
						}
						localAI[0] = 0f;
					}
				}
				if (type == 619 && !flag)
				{
					if (justHit)
					{
						localAI[0] += 10f;
					}
					localAI[0] += 1f;
					if (localAI[0] >= 120f)
					{
						if (targetData.Type != 0 && Collision.CanHit(this, targetData))
						{
							if ((base.Center - targetData.Center).Length() < 400f)
							{
								Vector2 vector3 = DirectionTo(new Vector2(targetData.Center.X, targetData.Position.Y));
								velocity = -vector3 * 5f;
								netUpdate = true;
								localAI[0] = 0f;
								vector3 = DirectionTo(new Vector2(targetData.Center.X + (float)Main.rand.Next(-100, 101), targetData.Position.Y + (float)Main.rand.Next(-100, 101)));
								Projectile.NewProjectile(base.Center, vector3 * 15f, 811, 50, 1f, Main.myPlayer);
							}
							else
							{
								localAI[0] = 50f;
							}
						}
						else
						{
							localAI[0] = 50f;
						}
					}
				}
			}
			if ((Main.dayTime && type != 173 && type != 619 && type != 6 && type != 23 && type != 42 && type != 94 && type != 176 && type != 205 && type != 210 && type != 211 && type != 252 && (type < 231 || type > 235)) || flag)
			{
				velocity.Y -= num2 * 2f;
				EncourageDespawn(10);
			}
			if (((velocity.X > 0f && oldVelocity.X < 0f) || (velocity.X < 0f && oldVelocity.X > 0f) || (velocity.Y > 0f && oldVelocity.Y < 0f) || (velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
			{
				netUpdate = true;
			}
		}

		public void CopyInteractions(NPC npc)
		{
			for (int i = 0; i < playerInteraction.Length; i++)
			{
				playerInteraction[i] = npc.playerInteraction[i];
			}
			lastInteraction = npc.lastInteraction;
		}

		public static int GetEaterOfWorldsSegmentsCount()
		{
			if (!Main.expertMode)
			{
				return 65;
			}
			return 70;
		}

		public static int GetEaterOfWorldsSegmentsCountByGamemode(int gamemode)
		{
			if (!Main.RegisterdGameModes.TryGetValue(gamemode, out var gameModeData))
			{
				return 65;
			}
			if (!gameModeData.IsExpertMode)
			{
				return 65;
			}
			return 70;
		}

		public static int GetBrainOfCthuluCreepersCount()
		{
			if (Main.getGoodWorld)
			{
				return 40;
			}
			return 20;
		}

		private void AI_006_Worms()
		{
			if (type == 117 && localAI[1] == 0f)
			{
				localAI[1] = 1f;
				SoundEngine.PlaySound(SoundID.NPCDeath13, position);
				int num = 1;
				if (velocity.X < 0f)
				{
					num = -1;
				}
				for (int i = 0; i < 20; i++)
				{
					Dust.NewDust(new Vector2(position.X - 20f, position.Y - 20f), width + 40, height + 40, 5, num * 8, -1f);
				}
			}
			if (type == 454 && localAI[3] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item119, position);
				localAI[3] = 1f;
			}
			if (type >= 454 && type <= 459)
			{
				dontTakeDamage = alpha > 0;
				if (type == 454 || (type != 454 && Main.npc[(int)ai[1]].alpha < 85))
				{
					if (dontTakeDamage)
					{
						for (int j = 0; j < 2; j++)
						{
							int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num2].noGravity = true;
							Main.dust[num2].noLight = true;
						}
					}
					alpha -= 42;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
			}
			if (type >= 621 && type <= 623)
			{
				position += netOffset;
				dontTakeDamage = alpha > 0;
				if (type == 621 || (type != 621 && Main.npc[(int)ai[1]].alpha < 85))
				{
					if (dontTakeDamage)
					{
						for (int k = 0; k < 2; k++)
						{
							Dust.NewDust(position, width, height, 5, 0f, 0f, 100);
						}
					}
					alpha -= 42;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (alpha == 0 && Main.rand.Next(5) == 0)
				{
					Dust.NewDust(position, width, height, 5, 0f, 0f, 100);
				}
				position -= netOffset;
			}
			else if (type == 402 && ai[1] == 0f)
			{
				ai[1] = Main.rand.Next(-2, 0);
				netUpdate = true;
			}
			if (Main.netMode != 1 && Main.expertMode)
			{
				if (type == 14 && ((double)(position.Y / 16f) < Main.worldSurface || Main.getGoodWorld))
				{
					int num3 = (int)(base.Center.X / 16f);
					int num4 = (int)(base.Center.Y / 16f);
					if (WorldGen.InWorld(num3, num4) && Main.tile[num3, num4].wall == 0 && Main.rand.Next(900) == 0)
					{
						TargetClosest();
						if (Collision.CanHitLine(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							NewNPC((int)(position.X + (float)(width / 2) + velocity.X), (int)(position.Y + (float)(height / 2) + velocity.Y), 112, 0, 0f, 1f);
						}
					}
				}
				else if (type == 13)
				{
					int num5 = 90;
					num5 += (int)((float)life / (float)lifeMax * 60f * 5f);
					if (Main.rand.Next(num5) == 0)
					{
						TargetClosest();
						if (Collision.CanHitLine(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							NewNPC((int)(position.X + (float)(width / 2) + velocity.X), (int)(position.Y + (float)(height / 2) + velocity.Y), 112, 0, 0f, 1f);
						}
					}
				}
			}
			bool flag = false;
			float num6 = 0.2f;
			switch (type)
			{
			case 513:
				flag = !Main.player[target].ZoneUndergroundDesert;
				num6 = 0.1f;
				break;
			case 10:
			case 39:
			case 95:
			case 117:
			case 510:
				flag = true;
				break;
			case 621:
				flag = false;
				break;
			}
			if (type >= 13 && type <= 15)
			{
				realLife = -1;
			}
			else if (ai[3] > 0f)
			{
				realLife = (int)ai[3];
			}
			if (target < 0 || target == 255 || Main.player[target].dead || (flag && (double)Main.player[target].position.Y < Main.worldSurface * 16.0))
			{
				TargetClosest();
			}
			if (Main.player[target].dead || (flag && (double)Main.player[target].position.Y < Main.worldSurface * 16.0))
			{
				EncourageDespawn(300);
				if (flag)
				{
					velocity.Y += num6;
				}
			}
			if (type == 621 && Main.dayTime)
			{
				EncourageDespawn(60);
				velocity.Y += 1f;
			}
			if (Main.netMode != 1)
			{
				if (type == 87 && ai[0] == 0f)
				{
					ai[3] = base.whoAmI;
					realLife = base.whoAmI;
					int num7 = 0;
					int num8 = base.whoAmI;
					for (int l = 0; l < 14; l++)
					{
						int num9 = 89;
						switch (l)
						{
						case 1:
						case 8:
							num9 = 88;
							break;
						case 11:
							num9 = 90;
							break;
						case 12:
							num9 = 91;
							break;
						case 13:
							num9 = 92;
							break;
						}
						num7 = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num9, base.whoAmI);
						Main.npc[num7].ai[3] = base.whoAmI;
						Main.npc[num7].realLife = base.whoAmI;
						Main.npc[num7].ai[1] = num8;
						Main.npc[num7].CopyInteractions(this);
						Main.npc[num8].ai[0] = num7;
						NetMessage.SendData(23, -1, -1, null, num7);
						num8 = num7;
					}
				}
				if (type == 454 && ai[0] == 0f)
				{
					ai[3] = base.whoAmI;
					realLife = base.whoAmI;
					int num10 = 0;
					int num11 = base.whoAmI;
					for (int m = 0; m < 30; m++)
					{
						int num12 = 456;
						if ((m - 2) % 4 == 0 && m < 26)
						{
							num12 = 455;
						}
						else
						{
							switch (m)
							{
							case 27:
								num12 = 457;
								break;
							case 28:
								num12 = 458;
								break;
							case 29:
								num12 = 459;
								break;
							}
						}
						num10 = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num12, base.whoAmI);
						Main.npc[num10].ai[3] = base.whoAmI;
						Main.npc[num10].realLife = base.whoAmI;
						Main.npc[num10].ai[1] = num11;
						Main.npc[num10].CopyInteractions(this);
						Main.npc[num11].ai[0] = num10;
						NetMessage.SendData(23, -1, -1, null, num10);
						num11 = num10;
					}
				}
				if (type == 513 && ai[0] == 0f)
				{
					ai[3] = base.whoAmI;
					realLife = base.whoAmI;
					int num13 = 0;
					int num14 = base.whoAmI;
					int num15 = Main.rand.Next(6, 10);
					for (int n = 0; n < num15; n++)
					{
						int num16 = 514;
						if (n == num15 - 1)
						{
							num16 = 515;
						}
						num13 = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num16, base.whoAmI);
						Main.npc[num13].ai[3] = base.whoAmI;
						Main.npc[num13].realLife = base.whoAmI;
						Main.npc[num13].ai[1] = num14;
						Main.npc[num13].CopyInteractions(this);
						Main.npc[num14].ai[0] = num13;
						NetMessage.SendData(23, -1, -1, null, num13);
						num14 = num13;
					}
				}
				if (type == 510 && ai[0] == 0f)
				{
					ai[3] = base.whoAmI;
					realLife = base.whoAmI;
					int num17 = 0;
					int num18 = base.whoAmI;
					int num19 = Main.rand.Next(12, 21);
					for (int num20 = 0; num20 < num19; num20++)
					{
						int num21 = 511;
						if (num20 == num19 - 1)
						{
							num21 = 512;
						}
						num17 = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num21, base.whoAmI);
						Main.npc[num17].ai[3] = base.whoAmI;
						Main.npc[num17].realLife = base.whoAmI;
						Main.npc[num17].ai[1] = num18;
						Main.npc[num17].CopyInteractions(this);
						Main.npc[num18].ai[0] = num17;
						NetMessage.SendData(23, -1, -1, null, num17);
						num18 = num17;
					}
				}
				if (type == 621 && ai[0] == 0f)
				{
					ai[3] = base.whoAmI;
					realLife = base.whoAmI;
					int num22 = 0;
					int num23 = base.whoAmI;
					int num24 = 16;
					for (int num25 = 0; num25 < num24; num25++)
					{
						int num26 = 622;
						if (num25 == num24 - 1)
						{
							num26 = 623;
						}
						num22 = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num26, base.whoAmI);
						Main.npc[num22].ai[3] = base.whoAmI;
						Main.npc[num22].realLife = base.whoAmI;
						Main.npc[num22].ai[1] = num23;
						Main.npc[num22].CopyInteractions(this);
						Main.npc[num23].ai[0] = num22;
						NetMessage.SendData(23, -1, -1, null, num22);
						num23 = num22;
					}
				}
				else if ((type == 7 || type == 8 || type == 10 || type == 11 || type == 13 || type == 14 || type == 39 || type == 40 || type == 95 || type == 96 || type == 98 || type == 99 || type == 117 || type == 118) && ai[0] == 0f)
				{
					if (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117)
					{
						if (type < 13 || type > 15)
						{
							ai[3] = base.whoAmI;
							realLife = base.whoAmI;
						}
						ai[2] = Main.rand.Next(8, 13);
						if (type == 10)
						{
							ai[2] = Main.rand.Next(4, 7);
						}
						if (type == 13)
						{
							ai[2] = GetEaterOfWorldsSegmentsCount();
						}
						if (type == 39)
						{
							ai[2] = Main.rand.Next(12, 19);
						}
						if (type == 95)
						{
							ai[2] = Main.rand.Next(6, 12);
						}
						if (type == 98)
						{
							ai[2] = Main.rand.Next(20, 26);
						}
						if (type == 117)
						{
							ai[2] = Main.rand.Next(3, 6);
						}
						ai[0] = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), type + 1, base.whoAmI);
						Main.npc[(int)ai[0]].CopyInteractions(this);
					}
					else if ((type == 8 || type == 11 || type == 14 || type == 40 || type == 96 || type == 99 || type == 118) && ai[2] > 0f)
					{
						ai[0] = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), type, base.whoAmI);
						Main.npc[(int)ai[0]].CopyInteractions(this);
					}
					else
					{
						ai[0] = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), type + 1, base.whoAmI);
						Main.npc[(int)ai[0]].CopyInteractions(this);
					}
					if (type < 13 || type > 15)
					{
						Main.npc[(int)ai[0]].ai[3] = ai[3];
						Main.npc[(int)ai[0]].realLife = realLife;
					}
					Main.npc[(int)ai[0]].ai[1] = base.whoAmI;
					Main.npc[(int)ai[0]].ai[2] = ai[2] - 1f;
					netUpdate = true;
				}
				if (type == 412 && ai[0] == 0f)
				{
					ai[3] = base.whoAmI;
					realLife = base.whoAmI;
					int num27 = 0;
					int num28 = base.whoAmI;
					int num29 = 30;
					for (int num30 = 0; num30 < num29; num30++)
					{
						int num31 = 413;
						if (num30 == num29 - 1)
						{
							num31 = 414;
						}
						num27 = NewNPC((int)(position.X + (float)(width / 2)), (int)(position.Y + (float)height), num31, base.whoAmI);
						Main.npc[num27].ai[3] = base.whoAmI;
						Main.npc[num27].realLife = base.whoAmI;
						Main.npc[num27].ai[1] = num28;
						Main.npc[num27].CopyInteractions(this);
						Main.npc[num28].ai[0] = num27;
						NetMessage.SendData(23, -1, -1, null, num27);
						num28 = num27;
					}
				}
				switch (type)
				{
				case 8:
				case 9:
				case 11:
				case 12:
				case 40:
				case 41:
				case 88:
				case 89:
				case 90:
				case 91:
				case 92:
				case 96:
				case 97:
				case 99:
				case 100:
				case 118:
				case 119:
				case 413:
				case 414:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 511:
				case 512:
				case 514:
				case 515:
				case 622:
				case 623:
					if (!Main.npc[(int)ai[1]].active || Main.npc[(int)ai[1]].aiStyle != aiStyle)
					{
						life = 0;
						HitEffect();
						active = false;
						NetMessage.SendData(28, -1, -1, null, base.whoAmI, -1f);
					}
					break;
				}
				switch (type)
				{
				case 7:
				case 8:
				case 10:
				case 11:
				case 39:
				case 40:
				case 87:
				case 88:
				case 89:
				case 90:
				case 91:
				case 95:
				case 96:
				case 98:
				case 99:
				case 117:
				case 118:
				case 412:
				case 413:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 510:
				case 511:
				case 513:
				case 514:
				case 621:
				case 622:
					if (!Main.npc[(int)ai[0]].active || Main.npc[(int)ai[0]].aiStyle != aiStyle)
					{
						life = 0;
						HitEffect();
						active = false;
						NetMessage.SendData(28, -1, -1, null, base.whoAmI, -1f);
					}
					break;
				}
				if (type == 13 || type == 14 || type == 15)
				{
					if (!Main.npc[(int)ai[1]].active && !Main.npc[(int)ai[0]].active)
					{
						life = 0;
						HitEffect();
						checkDead();
						active = false;
						NetMessage.SendData(28, -1, -1, null, base.whoAmI, -1f);
					}
					if (type == 13 && !Main.npc[(int)ai[0]].active)
					{
						life = 0;
						HitEffect();
						checkDead();
						active = false;
						NetMessage.SendData(28, -1, -1, null, base.whoAmI, -1f);
					}
					if (type == 15 && !Main.npc[(int)ai[1]].active)
					{
						life = 0;
						HitEffect();
						checkDead();
						active = false;
						NetMessage.SendData(28, -1, -1, null, base.whoAmI, -1f);
					}
					if (type == 14 && (!Main.npc[(int)ai[1]].active || Main.npc[(int)ai[1]].aiStyle != aiStyle))
					{
						type = 13;
						int whoAmI = base.whoAmI;
						float num32 = (float)life / (float)lifeMax;
						float num33 = ai[0];
						SetDefaultsKeepPlayerInteraction(type);
						life = (int)((float)lifeMax * num32);
						ai[0] = num33;
						TargetClosest();
						netUpdate = true;
						base.whoAmI = whoAmI;
						alpha = 0;
					}
					if (type == 14 && (!Main.npc[(int)ai[0]].active || Main.npc[(int)ai[0]].aiStyle != aiStyle))
					{
						type = 15;
						int whoAmI2 = base.whoAmI;
						float num34 = (float)life / (float)lifeMax;
						float num35 = ai[1];
						SetDefaultsKeepPlayerInteraction(type);
						life = (int)((float)lifeMax * num34);
						ai[1] = num35;
						TargetClosest();
						netUpdate = true;
						base.whoAmI = whoAmI2;
						alpha = 0;
					}
				}
				if (!active && Main.netMode == 2)
				{
					NetMessage.SendData(28, -1, -1, null, base.whoAmI, -1f);
				}
			}
			int num36 = (int)(position.X / 16f) - 1;
			int num37 = (int)((position.X + (float)width) / 16f) + 2;
			int num38 = (int)(position.Y / 16f) - 1;
			int num39 = (int)((position.Y + (float)height) / 16f) + 2;
			if (num36 < 0)
			{
				num36 = 0;
			}
			if (num37 > Main.maxTilesX)
			{
				num37 = Main.maxTilesX;
			}
			if (num38 < 0)
			{
				num38 = 0;
			}
			if (num39 > Main.maxTilesY)
			{
				num39 = Main.maxTilesY;
			}
			bool flag2 = false;
			if (type >= 87 && type <= 92)
			{
				flag2 = true;
			}
			if (type >= 454 && type <= 459)
			{
				flag2 = true;
			}
			if (type >= 621 && type <= 623)
			{
				flag2 = true;
			}
			if (type == 402 && ai[1] == -1f)
			{
				flag2 = true;
			}
			if (type >= 412 && type <= 414)
			{
				flag2 = true;
			}
			if (!flag2)
			{
				Vector2 vector = default(Vector2);
				for (int num40 = num36; num40 < num37; num40++)
				{
					for (int num41 = num38; num41 < num39; num41++)
					{
						if (Main.tile[num40, num41] == null || ((!Main.tile[num40, num41].nactive() || (!Main.tileSolid[Main.tile[num40, num41].type] && (!Main.tileSolidTop[Main.tile[num40, num41].type] || Main.tile[num40, num41].frameY != 0))) && Main.tile[num40, num41].liquid <= 64))
						{
							continue;
						}
						vector.X = num40 * 16;
						vector.Y = num41 * 16;
						if (position.X + (float)width > vector.X && position.X < vector.X + 16f && position.Y + (float)height > vector.Y && position.Y < vector.Y + 16f)
						{
							flag2 = true;
							if (Main.rand.Next(100) == 0 && type != 117 && Main.tile[num40, num41].nactive() && Main.tileSolid[Main.tile[num40, num41].type])
							{
								WorldGen.KillTile(num40, num41, fail: true, effectOnly: true);
							}
						}
					}
				}
			}
			if (!flag2 && (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117 || type == 375 || type == 454 || type == 510 || type == 513 || type == 621))
			{
				Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
				int num42 = 1000;
				bool flag3 = true;
				for (int num43 = 0; num43 < 255; num43++)
				{
					if (Main.player[num43].active)
					{
						Rectangle rectangle2 = new Rectangle((int)Main.player[num43].position.X - num42, (int)Main.player[num43].position.Y - num42, num42 * 2, num42 * 2);
						if (rectangle.Intersects(rectangle2))
						{
							flag3 = false;
							break;
						}
					}
				}
				if (flag3)
				{
					flag2 = true;
				}
			}
			if ((type >= 87 && type <= 92) || (type >= 454 && type <= 459) || (type >= 621 && type <= 623))
			{
				if (velocity.X < 0f)
				{
					spriteDirection = 1;
				}
				else if (velocity.X > 0f)
				{
					spriteDirection = -1;
				}
			}
			if (type == 414)
			{
				if (justHit)
				{
					localAI[3] = 3f;
				}
				if (localAI[2] > 0f)
				{
					localAI[2] -= 16f;
					if (localAI[2] == 0f)
					{
						localAI[2] = -128f;
					}
				}
				else if (localAI[2] < 0f)
				{
					localAI[2] += 16f;
				}
				else if (localAI[3] > 0f)
				{
					localAI[2] = 128f;
					localAI[3] -= 1f;
				}
			}
			if (type == 412)
			{
				position += netOffset;
				Vector2 value = base.Center + (rotation - (float)Math.PI / 2f).ToRotationVector2() * 8f;
				Vector2 value2 = rotation.ToRotationVector2() * 16f;
				Dust obj = Main.dust[Dust.NewDust(value + value2, 0, 0, 6, velocity.X, velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 3f)];
				obj.noGravity = true;
				obj.noLight = true;
				obj.position -= new Vector2(4f);
				obj.fadeIn = 1f;
				obj.velocity = Vector2.Zero;
				Dust obj2 = Main.dust[Dust.NewDust(value - value2, 0, 0, 6, velocity.X, velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 3f)];
				obj2.noGravity = true;
				obj2.noLight = true;
				obj2.position -= new Vector2(4f);
				obj2.fadeIn = 1f;
				obj2.velocity = Vector2.Zero;
				position -= netOffset;
			}
			float num44 = 8f;
			float num45 = 0.07f;
			if (type == 95)
			{
				num44 = 5.5f;
				num45 = 0.045f;
			}
			if (type == 10)
			{
				num44 = 6f;
				num45 = 0.05f;
			}
			if (type == 513)
			{
				num44 = 7f;
				num45 = 0.1f;
			}
			if (type == 13)
			{
				num44 = 10f;
				num45 = 0.07f;
				if (Main.expertMode)
				{
					num44 = 12f;
					num45 = 0.15f;
				}
				if (Main.getGoodWorld)
				{
					num44 += 4f;
					num45 += 0.05f;
				}
			}
			if (type == 510)
			{
				if (!Main.player[target].dead && Main.player[target].ZoneSandstorm)
				{
					num44 = 16f;
					num45 = 0.35f;
				}
				else
				{
					num44 = 10f;
					num45 = 0.25f;
				}
			}
			if (type == 87)
			{
				num44 = 11f;
				num45 = 0.25f;
			}
			if (type == 621)
			{
				num44 = 15f;
				num45 = 0.45f;
			}
			if (type == 375)
			{
				num44 = 6f;
				num45 = 0.15f;
			}
			if (type == 454)
			{
				num44 = 20f;
				num45 = 0.55f;
			}
			if (type == 402)
			{
				num44 = 6f;
				num45 = 0.2f;
			}
			if (type == 117 && Main.wofNPCIndex >= 0)
			{
				float num46 = (float)Main.npc[Main.wofNPCIndex].life / (float)Main.npc[Main.wofNPCIndex].lifeMax;
				if ((double)num46 < 0.5)
				{
					num44 += 1f;
					num45 += 0.1f;
				}
				if ((double)num46 < 0.25)
				{
					num44 += 1f;
					num45 += 0.1f;
				}
				if ((double)num46 < 0.1)
				{
					num44 += 2f;
					num45 += 0.1f;
				}
			}
			Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num47 = Main.player[target].position.X + (float)(Main.player[target].width / 2);
			float num48 = Main.player[target].position.Y + (float)(Main.player[target].height / 2);
			if (type == 412)
			{
				num44 = 10f;
				num45 = 0.3f;
				int num49 = -1;
				int num50 = (int)(Main.player[target].Center.X / 16f);
				int num51 = (int)(Main.player[target].Center.Y / 16f);
				for (int num52 = num50 - 2; num52 <= num50 + 2; num52++)
				{
					for (int num53 = num51; num53 <= num51 + 15; num53++)
					{
						if (WorldGen.SolidTile2(num52, num53))
						{
							num49 = num53;
							break;
						}
					}
					if (num49 > 0)
					{
						break;
					}
				}
				if (num49 > 0)
				{
					num49 *= 16;
					float num54 = num49 - 800;
					if (Main.player[target].position.Y > num54)
					{
						num48 = num54;
						if (Math.Abs(base.Center.X - Main.player[target].Center.X) < 500f)
						{
							num47 = ((!(velocity.X > 0f)) ? (Main.player[target].Center.X - 600f) : (Main.player[target].Center.X + 600f));
						}
					}
				}
				else
				{
					num44 = 14f;
					num45 = 0.5f;
				}
				float num55 = num44 * 1.3f;
				float num56 = num44 * 0.7f;
				float num57 = velocity.Length();
				if (num57 > 0f)
				{
					if (num57 > num55)
					{
						velocity.Normalize();
						velocity *= num55;
					}
					else if (num57 < num56)
					{
						velocity.Normalize();
						velocity *= num56;
					}
				}
				if (num49 > 0)
				{
					for (int num58 = 0; num58 < 200; num58++)
					{
						if (Main.npc[num58].active && Main.npc[num58].type == type && num58 != base.whoAmI)
						{
							Vector2 vector3 = Main.npc[num58].Center - base.Center;
							if (vector3.Length() < 400f)
							{
								vector3.Normalize();
								vector3 *= 1000f;
								num47 -= vector3.X;
								num48 -= vector3.Y;
							}
						}
					}
				}
				else
				{
					for (int num59 = 0; num59 < 200; num59++)
					{
						if (Main.npc[num59].active && Main.npc[num59].type == type && num59 != base.whoAmI)
						{
							Vector2 vector4 = Main.npc[num59].Center - base.Center;
							if (vector4.Length() < 60f)
							{
								vector4.Normalize();
								vector4 *= 200f;
								num47 -= vector4.X;
								num48 -= vector4.Y;
							}
						}
					}
				}
			}
			num47 = (int)(num47 / 16f) * 16;
			num48 = (int)(num48 / 16f) * 16;
			vector2.X = (int)(vector2.X / 16f) * 16;
			vector2.Y = (int)(vector2.Y / 16f) * 16;
			num47 -= vector2.X;
			num48 -= vector2.Y;
			if (type == 375)
			{
				num47 *= -1f;
				num48 *= -1f;
			}
			float num60 = (float)Math.Sqrt(num47 * num47 + num48 * num48);
			if (ai[1] > 0f && ai[1] < (float)Main.npc.Length)
			{
				try
				{
					vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num47 = Main.npc[(int)ai[1]].position.X + (float)(Main.npc[(int)ai[1]].width / 2) - vector2.X;
					num48 = Main.npc[(int)ai[1]].position.Y + (float)(Main.npc[(int)ai[1]].height / 2) - vector2.Y;
				}
				catch
				{
				}
				rotation = (float)Math.Atan2(num48, num47) + 1.57f;
				num60 = (float)Math.Sqrt(num47 * num47 + num48 * num48);
				int num61 = width;
				if (type >= 87 && type <= 92)
				{
					num61 = 42;
				}
				if (type >= 454 && type <= 459)
				{
					num61 = 36;
				}
				if (type >= 13 && type <= 15)
				{
					num61 = (int)((float)num61 * scale);
				}
				if (type >= 513 && type <= 515)
				{
					num61 -= 6;
				}
				if (type >= 412 && type <= 414)
				{
					num61 += 6;
				}
				if (type >= 621 && type <= 623)
				{
					num61 = 24;
				}
				if (Main.getGoodWorld && type >= 13 && type <= 15)
				{
					num61 = 62;
				}
				num60 = (num60 - (float)num61) / num60;
				num47 *= num60;
				num48 *= num60;
				velocity = Vector2.Zero;
				position.X += num47;
				position.Y += num48;
				if (type >= 87 && type <= 92)
				{
					if (num47 < 0f)
					{
						spriteDirection = 1;
					}
					else if (num47 > 0f)
					{
						spriteDirection = -1;
					}
				}
				if (type >= 454 && type <= 459)
				{
					if (num47 < 0f)
					{
						spriteDirection = 1;
					}
					else if (num47 > 0f)
					{
						spriteDirection = -1;
					}
				}
				if (type >= 621 && type <= 623)
				{
					if (num47 < 0f)
					{
						spriteDirection = 1;
					}
					else if (num47 > 0f)
					{
						spriteDirection = -1;
					}
				}
			}
			else
			{
				if (!flag2)
				{
					TargetClosest();
					velocity.Y += 0.11f;
					if (velocity.Y > num44)
					{
						velocity.Y = num44;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num44 * 0.4)
					{
						if (velocity.X < 0f)
						{
							velocity.X -= num45 * 1.1f;
						}
						else
						{
							velocity.X += num45 * 1.1f;
						}
					}
					else if (velocity.Y == num44)
					{
						if (velocity.X < num47)
						{
							velocity.X += num45;
						}
						else if (velocity.X > num47)
						{
							velocity.X -= num45;
						}
					}
					else if (velocity.Y > 4f)
					{
						if (velocity.X < 0f)
						{
							velocity.X += num45 * 0.9f;
						}
						else
						{
							velocity.X -= num45 * 0.9f;
						}
					}
				}
				else
				{
					if (type != 621 && type != 87 && type != 117 && type != 454 && type != 412 && soundDelay == 0)
					{
						float num62 = num60 / 40f;
						if (num62 < 10f)
						{
							num62 = 10f;
						}
						if (num62 > 20f)
						{
							num62 = 20f;
						}
						soundDelay = (int)num62;
						SoundEngine.PlaySound(15, (int)position.X, (int)position.Y);
					}
					num60 = (float)Math.Sqrt(num47 * num47 + num48 * num48);
					float num63 = Math.Abs(num47);
					float num64 = Math.Abs(num48);
					float num65 = num44 / num60;
					num47 *= num65;
					num48 *= num65;
					bool flag4 = false;
					if ((type == 7 || type == 13) && ((!Main.player[target].ZoneCorrupt && !Main.player[target].ZoneCrimson) || Main.player[target].dead))
					{
						flag4 = true;
					}
					if ((type == 513 && (double)Main.player[target].position.Y < Main.worldSurface * 16.0 && !Main.player[target].ZoneSandstorm && !Main.player[target].ZoneUndergroundDesert) || Main.player[target].dead)
					{
						flag4 = true;
					}
					if ((type == 510 && (double)Main.player[target].position.Y < Main.worldSurface * 16.0 && !Main.player[target].ZoneSandstorm && !Main.player[target].ZoneUndergroundDesert) || Main.player[target].dead)
					{
						flag4 = true;
					}
					if (flag4)
					{
						bool flag5 = true;
						for (int num66 = 0; num66 < 255; num66++)
						{
							if (Main.player[num66].active && !Main.player[num66].dead && Main.player[num66].ZoneCorrupt)
							{
								flag5 = false;
							}
						}
						if (flag5)
						{
							if (Main.netMode != 1 && (double)(position.Y / 16f) > (Main.rockLayer + (double)Main.maxTilesY) / 2.0)
							{
								active = false;
								int num67 = (int)ai[0];
								while (num67 > 0 && num67 < 200 && Main.npc[num67].active && Main.npc[num67].aiStyle == aiStyle)
								{
									int num68 = (int)Main.npc[num67].ai[0];
									Main.npc[num67].active = false;
									life = 0;
									if (Main.netMode == 2)
									{
										NetMessage.SendData(23, -1, -1, null, num67);
									}
									num67 = num68;
								}
								if (Main.netMode == 2)
								{
									NetMessage.SendData(23, -1, -1, null, base.whoAmI);
								}
							}
							num47 = 0f;
							num48 = num44;
						}
					}
					bool flag6 = false;
					if (type == 87)
					{
						if (((velocity.X > 0f && num47 < 0f) || (velocity.X < 0f && num47 > 0f) || (velocity.Y > 0f && num48 < 0f) || (velocity.Y < 0f && num48 > 0f)) && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > num45 / 2f && num60 < 300f)
						{
							flag6 = true;
							if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num44)
							{
								velocity *= 1.1f;
							}
						}
						if (position.Y > Main.player[target].position.Y || (double)(Main.player[target].position.Y / 16f) > Main.worldSurface || Main.player[target].dead)
						{
							flag6 = true;
							if (Math.Abs(velocity.X) < num44 / 2f)
							{
								if (velocity.X == 0f)
								{
									velocity.X -= direction;
								}
								velocity.X *= 1.1f;
							}
							else if (velocity.Y > 0f - num44)
							{
								velocity.Y -= num45;
							}
						}
					}
					if (type == 454 || type == 621)
					{
						float num69 = 300f;
						if (type == 621)
						{
							num69 = 120f;
						}
						if (((velocity.X > 0f && num47 < 0f) || (velocity.X < 0f && num47 > 0f) || (velocity.Y > 0f && num48 < 0f) || (velocity.Y < 0f && num48 > 0f)) && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > num45 / 2f && num60 < num69)
						{
							flag6 = true;
							if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num44)
							{
								velocity *= 1.1f;
							}
						}
						if (position.Y > Main.player[target].position.Y || Main.player[target].dead)
						{
							flag6 = true;
							if (Math.Abs(velocity.X) < num44 / 2f)
							{
								if (velocity.X == 0f)
								{
									velocity.X -= direction;
								}
								velocity.X *= 1.1f;
							}
							else if (velocity.Y > 0f - num44)
							{
								velocity.Y -= num45;
							}
						}
					}
					if (!flag6)
					{
						if ((velocity.X > 0f && num47 > 0f) || (velocity.X < 0f && num47 < 0f) || (velocity.Y > 0f && num48 > 0f) || (velocity.Y < 0f && num48 < 0f))
						{
							if (velocity.X < num47)
							{
								velocity.X += num45;
							}
							else if (velocity.X > num47)
							{
								velocity.X -= num45;
							}
							if (velocity.Y < num48)
							{
								velocity.Y += num45;
							}
							else if (velocity.Y > num48)
							{
								velocity.Y -= num45;
							}
							if ((double)Math.Abs(num48) < (double)num44 * 0.2 && ((velocity.X > 0f && num47 < 0f) || (velocity.X < 0f && num47 > 0f)))
							{
								if (velocity.Y > 0f)
								{
									velocity.Y += num45 * 2f;
								}
								else
								{
									velocity.Y -= num45 * 2f;
								}
							}
							if ((double)Math.Abs(num47) < (double)num44 * 0.2 && ((velocity.Y > 0f && num48 < 0f) || (velocity.Y < 0f && num48 > 0f)))
							{
								if (velocity.X > 0f)
								{
									velocity.X += num45 * 2f;
								}
								else
								{
									velocity.X -= num45 * 2f;
								}
							}
						}
						else if (num63 > num64)
						{
							if (velocity.X < num47)
							{
								velocity.X += num45 * 1.1f;
							}
							else if (velocity.X > num47)
							{
								velocity.X -= num45 * 1.1f;
							}
							if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num44 * 0.5)
							{
								if (velocity.Y > 0f)
								{
									velocity.Y += num45;
								}
								else
								{
									velocity.Y -= num45;
								}
							}
						}
						else
						{
							if (velocity.Y < num48)
							{
								velocity.Y += num45 * 1.1f;
							}
							else if (velocity.Y > num48)
							{
								velocity.Y -= num45 * 1.1f;
							}
							if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num44 * 0.5)
							{
								if (velocity.X > 0f)
								{
									velocity.X += num45;
								}
								else
								{
									velocity.X -= num45;
								}
							}
						}
					}
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				if (type == 7 || type == 10 || type == 13 || type == 39 || type == 95 || type == 98 || type == 117 || type == 510 || type == 513 || type == 621)
				{
					if (flag2)
					{
						if (localAI[0] != 1f)
						{
							netUpdate = true;
						}
						localAI[0] = 1f;
					}
					else
					{
						if (localAI[0] != 0f)
						{
							netUpdate = true;
						}
						localAI[0] = 0f;
					}
					if (((velocity.X > 0f && oldVelocity.X < 0f) || (velocity.X < 0f && oldVelocity.X > 0f) || (velocity.Y > 0f && oldVelocity.Y < 0f) || (velocity.Y < 0f && oldVelocity.Y > 0f)) && !justHit)
					{
						netUpdate = true;
					}
				}
				if (type == 454)
				{
					float num70 = Vector2.Distance(Main.player[target].Center, base.Center);
					int num71 = 0;
					if (Vector2.Normalize(Main.player[target].Center - base.Center).ToRotation().AngleTowards(velocity.ToRotation(), (float)Math.PI / 2f) == velocity.ToRotation() && num70 < 350f)
					{
						num71 = 4;
					}
					if ((double)num71 > frameCounter)
					{
						frameCounter += 1.0;
					}
					if ((double)num71 < frameCounter)
					{
						frameCounter -= 1.0;
					}
					if (frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					if (frameCounter > 4.0)
					{
						frameCounter = 4.0;
					}
				}
			}
			if (type < 13 || type > 15 || (type != 13 && (type == 13 || Main.npc[(int)ai[1]].alpha >= 85)))
			{
				return;
			}
			if (alpha > 0 && life > 0)
			{
				for (int num72 = 0; num72 < 2; num72++)
				{
					int num73 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num73].noGravity = true;
					Main.dust[num73].noLight = true;
				}
			}
			if ((position - oldPosition).Length() > 2f)
			{
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
		}

		private void AI_002_FloatingEye()
		{
			if ((type == 170 || type == 171 || type == 180) && Main.rand.Next(1000) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 9);
			}
			noGravity = true;
			if (!noTileCollide)
			{
				if (collideX)
				{
					velocity.X = oldVelocity.X * -0.5f;
					if (direction == -1 && velocity.X > 0f && velocity.X < 2f)
					{
						velocity.X = 2f;
					}
					if (direction == 1 && velocity.X < 0f && velocity.X > -2f)
					{
						velocity.X = -2f;
					}
				}
				if (collideY)
				{
					velocity.Y = oldVelocity.Y * -0.5f;
					if (velocity.Y > 0f && velocity.Y < 1f)
					{
						velocity.Y = 1f;
					}
					if (velocity.Y < 0f && velocity.Y > -1f)
					{
						velocity.Y = -1f;
					}
				}
			}
			if (DespawnEncouragement_AIStyle2_FloatingEye_IsDiscouraged(type, position, target))
			{
				EncourageDespawn(10);
				directionY = -1;
				if (velocity.Y > 0f)
				{
					direction = 1;
				}
				direction = -1;
				if (velocity.X > 0f)
				{
					direction = 1;
				}
			}
			else
			{
				TargetClosest();
			}
			if (type == 170 || type == 171 || type == 180)
			{
				if (Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					if (ai[1] > 0f && !Collision.SolidCollision(position, width, height))
					{
						ai[1] = 0f;
						ai[0] = 0f;
						netUpdate = true;
					}
				}
				else if (ai[1] == 0f)
				{
					ai[0] += 1f;
				}
				if (ai[0] >= 300f)
				{
					ai[1] = 1f;
					ai[0] = 0f;
					netUpdate = true;
				}
				if (ai[1] == 0f)
				{
					alpha = 0;
					noTileCollide = false;
				}
				else
				{
					wet = false;
					alpha = 200;
					noTileCollide = true;
				}
				rotation = velocity.Y * 0.1f * (float)direction;
				TargetClosest();
				if (direction == -1 && velocity.X > -4f && position.X > Main.player[target].position.X + (float)Main.player[target].width)
				{
					velocity.X -= 0.08f;
					if (velocity.X > 4f)
					{
						velocity.X -= 0.04f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X -= 0.2f;
					}
					if (velocity.X < -4f)
					{
						velocity.X = -4f;
					}
				}
				else if (direction == 1 && velocity.X < 4f && position.X + (float)width < Main.player[target].position.X)
				{
					velocity.X += 0.08f;
					if (velocity.X < -4f)
					{
						velocity.X += 0.04f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X += 0.2f;
					}
					if (velocity.X > 4f)
					{
						velocity.X = 4f;
					}
				}
				if (directionY == -1 && (double)velocity.Y > -2.5 && position.Y > Main.player[target].position.Y + (float)Main.player[target].height)
				{
					velocity.Y -= 0.1f;
					if ((double)velocity.Y > 2.5)
					{
						velocity.Y -= 0.05f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y -= 0.15f;
					}
					if ((double)velocity.Y < -2.5)
					{
						velocity.Y = -2.5f;
					}
				}
				else if (directionY == 1 && (double)velocity.Y < 2.5 && position.Y + (float)height < Main.player[target].position.Y)
				{
					velocity.Y += 0.1f;
					if ((double)velocity.Y < -2.5)
					{
						velocity.Y += 0.05f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y += 0.15f;
					}
					if ((double)velocity.Y > 2.5)
					{
						velocity.Y = 2.5f;
					}
				}
			}
			else if (type == 116)
			{
				TargetClosest();
				Lighting.AddLight((int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.3f, 0.2f, 0.1f);
				if (direction == -1 && velocity.X > -6f)
				{
					velocity.X -= 0.1f;
					if (velocity.X > 6f)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X -= 0.2f;
					}
					if (velocity.X < -6f)
					{
						velocity.X = -6f;
					}
				}
				else if (direction == 1 && velocity.X < 6f)
				{
					velocity.X += 0.1f;
					if (velocity.X < -6f)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X += 0.2f;
					}
					if (velocity.X > 6f)
					{
						velocity.X = 6f;
					}
				}
				if (directionY == -1 && (double)velocity.Y > -2.5)
				{
					velocity.Y -= 0.04f;
					if ((double)velocity.Y > 2.5)
					{
						velocity.Y -= 0.05f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y -= 0.15f;
					}
					if ((double)velocity.Y < -2.5)
					{
						velocity.Y = -2.5f;
					}
				}
				else if (directionY == 1 && (double)velocity.Y < 1.5)
				{
					velocity.Y += 0.04f;
					if ((double)velocity.Y < -2.5)
					{
						velocity.Y += 0.05f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y += 0.15f;
					}
					if ((double)velocity.Y > 2.5)
					{
						velocity.Y = 2.5f;
					}
				}
				if (Main.rand.Next(40) == 0)
				{
					position += netOffset;
					int num = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
					Main.dust[num].velocity.X *= 0.5f;
					Main.dust[num].velocity.Y *= 0.1f;
					position -= netOffset;
				}
			}
			else if (type == 133)
			{
				if ((double)life < (double)lifeMax * 0.5)
				{
					if (direction == -1 && velocity.X > -6f)
					{
						velocity.X -= 0.1f;
						if (velocity.X > 6f)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X += 0.05f;
						}
						if (velocity.X < -6f)
						{
							velocity.X = -6f;
						}
					}
					else if (direction == 1 && velocity.X < 6f)
					{
						velocity.X += 0.1f;
						if (velocity.X < -6f)
						{
							velocity.X += 0.1f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X -= 0.05f;
						}
						if (velocity.X > 6f)
						{
							velocity.X = 6f;
						}
					}
					if (directionY == -1 && velocity.Y > -4f)
					{
						velocity.Y -= 0.1f;
						if (velocity.Y > 4f)
						{
							velocity.Y -= 0.1f;
						}
						else if (velocity.Y > 0f)
						{
							velocity.Y += 0.05f;
						}
						if (velocity.Y < -4f)
						{
							velocity.Y = -4f;
						}
					}
					else if (directionY == 1 && velocity.Y < 4f)
					{
						velocity.Y += 0.1f;
						if (velocity.Y < -4f)
						{
							velocity.Y += 0.1f;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y -= 0.05f;
						}
						if (velocity.Y > 4f)
						{
							velocity.Y = 4f;
						}
					}
				}
				else
				{
					if (direction == -1 && velocity.X > -4f)
					{
						velocity.X -= 0.1f;
						if (velocity.X > 4f)
						{
							velocity.X -= 0.1f;
						}
						else if (velocity.X > 0f)
						{
							velocity.X += 0.05f;
						}
						if (velocity.X < -4f)
						{
							velocity.X = -4f;
						}
					}
					else if (direction == 1 && velocity.X < 4f)
					{
						velocity.X += 0.1f;
						if (velocity.X < -4f)
						{
							velocity.X += 0.1f;
						}
						else if (velocity.X < 0f)
						{
							velocity.X -= 0.05f;
						}
						if (velocity.X > 4f)
						{
							velocity.X = 4f;
						}
					}
					if (directionY == -1 && (double)velocity.Y > -1.5)
					{
						velocity.Y -= 0.04f;
						if ((double)velocity.Y > 1.5)
						{
							velocity.Y -= 0.05f;
						}
						else if (velocity.Y > 0f)
						{
							velocity.Y += 0.03f;
						}
						if ((double)velocity.Y < -1.5)
						{
							velocity.Y = -1.5f;
						}
					}
					else if (directionY == 1 && (double)velocity.Y < 1.5)
					{
						velocity.Y += 0.04f;
						if ((double)velocity.Y < -1.5)
						{
							velocity.Y += 0.05f;
						}
						else if (velocity.Y < 0f)
						{
							velocity.Y -= 0.03f;
						}
						if ((double)velocity.Y > 1.5)
						{
							velocity.Y = 1.5f;
						}
					}
				}
			}
			else
			{
				float num2 = 4f;
				float num3 = 1.5f;
				num2 *= 1f + (1f - scale);
				num3 *= 1f + (1f - scale);
				if (direction == -1 && velocity.X > 0f - num2)
				{
					velocity.X -= 0.1f;
					if (velocity.X > num2)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X > 0f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X < 0f - num2)
					{
						velocity.X = 0f - num2;
					}
				}
				else if (direction == 1 && velocity.X < num2)
				{
					velocity.X += 0.1f;
					if (velocity.X < 0f - num2)
					{
						velocity.X += 0.1f;
					}
					else if (velocity.X < 0f)
					{
						velocity.X -= 0.05f;
					}
					if (velocity.X > num2)
					{
						velocity.X = num2;
					}
				}
				if (directionY == -1 && velocity.Y > 0f - num3)
				{
					velocity.Y -= 0.04f;
					if (velocity.Y > num3)
					{
						velocity.Y -= 0.05f;
					}
					else if (velocity.Y > 0f)
					{
						velocity.Y += 0.03f;
					}
					if (velocity.Y < 0f - num3)
					{
						velocity.Y = 0f - num3;
					}
				}
				else if (directionY == 1 && velocity.Y < num3)
				{
					velocity.Y += 0.04f;
					if (velocity.Y < 0f - num3)
					{
						velocity.Y += 0.05f;
					}
					else if (velocity.Y < 0f)
					{
						velocity.Y -= 0.03f;
					}
					if (velocity.Y > num3)
					{
						velocity.Y = num3;
					}
				}
			}
			if ((type == 2 || type == 133 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194) && Main.rand.Next(40) == 0)
			{
				position += netOffset;
				int num4 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height * 0.25f), width, (int)((float)height * 0.5f), 5, velocity.X, 2f);
				Main.dust[num4].velocity.X *= 0.5f;
				Main.dust[num4].velocity.Y *= 0.1f;
				position -= netOffset;
			}
			if (wet && type != 170 && type != 171 && type != 172)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				TargetClosest();
			}
		}

		public static bool DespawnEncouragement_AIStyle2_FloatingEye_IsDiscouraged(int npcID, Vector2 npcPosition, int target = 255)
		{
			if (!Main.player[target].ZoneGraveyard && Main.dayTime && (double)npcPosition.Y <= Main.worldSurface * 16.0)
			{
				if (npcID != 2 && npcID != 133 && npcID != 190 && npcID != 191 && npcID != 192 && npcID != 193 && npcID != 194 && npcID != 317)
				{
					return npcID == 318;
				}
				return true;
			}
			return false;
		}

		private bool AI_007_TownEntities_IsInAGoodRestingSpot(int tileX, int tileY, int idealRestX, int idealRestY)
		{
			if (!Main.dayTime && ai[0] == 5f)
			{
				if (Math.Abs(tileX - idealRestX) < 7)
				{
					return Math.Abs(tileY - idealRestY) < 7;
				}
				return false;
			}
			if ((type == 361 || type == 445) && wet)
			{
				return false;
			}
			if (tileX == idealRestX)
			{
				return tileY == idealRestY;
			}
			return false;
		}

		private void AI_007_FindGoodRestingSpot(int myTileX, int myTileY, out int floorX, out int floorY)
		{
			floorX = homeTileX;
			floorY = homeTileY;
			if (floorX == -1 || floorY == -1)
			{
				return;
			}
			while (!WorldGen.SolidOrSlopedTile(floorX, floorY) && floorY < Main.maxTilesY - 20)
			{
				floorY++;
			}
			if (Main.dayTime || (ai[0] == 5f && Math.Abs(myTileX - floorX) < 7 && Math.Abs(myTileY - floorY) < 7))
			{
				return;
			}
			Point point = new Point(floorX, floorY);
			Point point2 = new Point(-1, -1);
			int num = -1;
			int num2 = 7;
			int num3 = 6;
			int num4 = 2;
			int num5 = 1;
			int num6 = 2;
			for (int i = point.X - num2; i <= point.X + num2; i += num5)
			{
				for (int num7 = point.Y + num4; num7 >= point.Y - num3; num7 -= num6)
				{
					Tile tile = Main.tile[i, num7];
					if (tile != null && tile.active() && (!TileID.Sets.CanBeSatOnForNPCs[tile.type] || tile.frameY % 40 != 0 || num7 + 1 <= point.Y + num4))
					{
						int num8 = Math.Abs(i - point.X) + Math.Abs(num7 - point.Y);
						if (num == -1 || num8 < num)
						{
							num = num8;
							point2.X = i;
							point2.Y = num7;
						}
					}
				}
			}
			if (num == -1)
			{
				return;
			}
			Tile tile2 = Main.tile[point2.X, point2.Y];
			if (tile2.type == 497 || tile2.type == 15)
			{
				if (tile2.frameY % 40 != 0)
				{
					point2.Y--;
				}
				point2.Y += 2;
			}
			floorX = point2.X;
			floorY = point2.Y;
		}

		private void AI_007_TryForcingSitting(int homeFloorX, int homeFloorY)
		{
			Tile tile = Main.tile[homeFloorX, homeFloorY - 1];
			bool flag = type != 638 && type != 656 && ai[0] != 5f;
			if (flag)
			{
				flag &= tile != null && tile.active() && (tile.type == 15 || tile.type == 497);
			}
			if (flag)
			{
				flag &= tile.type != 15 || tile.frameY != 1080;
			}
			if (flag)
			{
				ai[0] = 5f;
				ai[1] = 900 + Main.rand.Next(10800);
				direction = ((tile.frameX != 0) ? 1 : (-1));
				base.Bottom = new Vector2(homeFloorX * 16 + 8 + 2 * direction, homeFloorY * 16);
				velocity = Vector2.Zero;
				localAI[3] = 0f;
				netUpdate = true;
			}
		}

		private void AI_007_TownEntities()
		{
			int num = 300;
			if (type == 638 || type == 656)
			{
				num = 0;
			}
			bool flag = Main.raining;
			if (!Main.dayTime)
			{
				flag = true;
			}
			if (Main.eclipse)
			{
				flag = true;
			}
			if (Main.slimeRain)
			{
				flag = true;
			}
			float num2 = 1f;
			if (Main.masterMode)
			{
				defense = (dryadWard ? (defDefense + 14) : defDefense);
			}
			else if (Main.expertMode)
			{
				defense = (dryadWard ? (defDefense + 10) : defDefense);
			}
			else
			{
				defense = (dryadWard ? (defDefense + 6) : defDefense);
			}
			if (isLikeATownNPC)
			{
				if (combatBookWasUsed)
				{
					num2 += 0.2f;
					defense += 6;
				}
				if (downedBoss1)
				{
					num2 += 0.1f;
					defense += 3;
				}
				if (downedBoss2)
				{
					num2 += 0.1f;
					defense += 3;
				}
				if (downedBoss3)
				{
					num2 += 0.1f;
					defense += 3;
				}
				if (downedQueenBee)
				{
					num2 += 0.1f;
					defense += 3;
				}
				if (Main.hardMode)
				{
					num2 += 0.4f;
					defense += 12;
				}
				if (downedQueenSlime)
				{
					num2 += 0.15f;
					defense += 6;
				}
				if (downedMechBoss1)
				{
					num2 += 0.15f;
					defense += 6;
				}
				if (downedMechBoss2)
				{
					num2 += 0.15f;
					defense += 6;
				}
				if (downedMechBoss3)
				{
					num2 += 0.15f;
					defense += 6;
				}
				if (downedPlantBoss)
				{
					num2 += 0.15f;
					defense += 8;
				}
				if (downedQueenSlime)
				{
					num2 += 0.15f;
					defense += 8;
				}
				if (downedGolemBoss)
				{
					num2 += 0.15f;
					defense += 8;
				}
				if (downedAncientCultist)
				{
					num2 += 0.15f;
					defense += 8;
				}
			}
			if (type == 142 && Main.netMode != 1 && !Main.xMas)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(28, -1, -1, null, whoAmI, 9999f);
				}
			}
			if ((type == 148 || type == 149) && localAI[0] == 0f)
			{
				localAI[0] = Main.rand.Next(1, 5);
			}
			if (type == 124)
			{
				int num3 = lazyNPCOwnedProjectileSearchArray[whoAmI];
				bool flag2 = false;
				if (Main.projectile.IndexInRange(num3))
				{
					Projectile projectile = Main.projectile[num3];
					if (projectile.active && projectile.type == 582 && projectile.ai[1] == (float)whoAmI)
					{
						flag2 = true;
					}
				}
				localAI[0] = flag2.ToInt();
			}
			if ((type == 362 || type == 364 || type == 602 || type == 608) && Main.netMode != 1 && (velocity.Y > 4f || velocity.Y < -4f || wet))
			{
				int direction = base.direction;
				Transform(type + 1);
				TargetClosest();
				base.direction = direction;
				netUpdate = true;
				return;
			}
			switch (type)
			{
			case 588:
				savedGolfer = true;
				break;
			case 441:
				savedTaxCollector = true;
				break;
			case 107:
				savedGoblin = true;
				break;
			case 108:
				savedWizard = true;
				break;
			case 124:
				savedMech = true;
				break;
			case 353:
				savedStylist = true;
				break;
			case 369:
				savedAngler = true;
				break;
			case 550:
				savedBartender = true;
				break;
			}
			if (type >= 0 && type < 663 && NPCID.Sets.TownCritter[type] && target == 255)
			{
				TargetClosest();
				if (position.X < Main.player[target].position.X)
				{
					base.direction = 1;
					spriteDirection = base.direction;
				}
				if (position.X > Main.player[target].position.X)
				{
					base.direction = -1;
					spriteDirection = base.direction;
				}
				if (homeTileX == -1)
				{
					homeTileX = (int)((position.X + (float)(width / 2)) / 16f);
				}
			}
			else if (homeTileX == -1 && homeTileY == -1 && velocity.Y == 0f)
			{
				homeTileX = (int)base.Center.X / 16;
				homeTileY = (int)(position.Y + (float)height + 4f) / 16;
			}
			bool flag3 = false;
			int num4 = (int)(position.X + (float)(width / 2)) / 16;
			int num5 = (int)(position.Y + (float)height + 1f) / 16;
			AI_007_FindGoodRestingSpot(num4, num5, out var floorX, out var floorY);
			if (type == 441)
			{
				taxCollector = true;
			}
			directionY = -1;
			if (base.direction == 0)
			{
				base.direction = 1;
			}
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && Main.player[i].talkNPC == whoAmI)
				{
					flag3 = true;
					if (ai[0] != 0f)
					{
						netUpdate = true;
					}
					ai[0] = 0f;
					ai[1] = 300f;
					localAI[3] = 100f;
					if (Main.player[i].position.X + (float)(Main.player[i].width / 2) < position.X + (float)(width / 2))
					{
						base.direction = -1;
					}
					else
					{
						base.direction = 1;
					}
				}
			}
			if (ai[3] == 1f)
			{
				life = -1;
				HitEffect();
				active = false;
				netUpdate = true;
				if (type == 37)
				{
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				}
				return;
			}
			if (type == 37 && Main.netMode != 1)
			{
				homeless = false;
				homeTileX = Main.dungeonX;
				homeTileY = Main.dungeonY;
				if (downedBoss3)
				{
					ai[3] = 1f;
					netUpdate = true;
				}
			}
			if (type == 368)
			{
				homeless = true;
				if (!Main.dayTime)
				{
					homeTileX = (int)(base.Center.X / 16f);
					homeTileY = (int)(position.Y + (float)height + 2f) / 16;
					if (!flag3 && ai[0] == 0f)
					{
						ai[0] = 1f;
						ai[1] = 200f;
					}
					flag = false;
				}
			}
			if (type == 369 && homeless && wet)
			{
				if (base.Center.X / 16f < 380f || base.Center.X / 16f > (float)(Main.maxTilesX - 380))
				{
					homeTileX = Main.spawnTileX;
					homeTileY = Main.spawnTileY;
					ai[0] = 1f;
					ai[1] = 200f;
				}
				if (position.X / 16f < 300f)
				{
					base.direction = 1;
				}
				else if (position.X / 16f > (float)(Main.maxTilesX - 300))
				{
					base.direction = -1;
				}
			}
			if (!WorldGen.InWorld(num4, num5) || Main.tile[num4, num5] == null)
			{
				return;
			}
			if (!homeless && Main.netMode != 1 && townNPC && (flag || Main.tileDungeon[Main.tile[num4, num5].type]) && !AI_007_TownEntities_IsInAGoodRestingSpot(num4, num5, floorX, floorY))
			{
				bool flag4 = true;
				for (int j = 0; j < 2; j++)
				{
					if (!flag4)
					{
						break;
					}
					Rectangle rectangle = new Rectangle((int)(position.X + (float)(width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(position.Y + (float)(height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
					if (j == 1)
					{
						rectangle = new Rectangle(floorX * 16 + 8 - sWidth / 2 - safeRangeX, floorY * 16 + 8 - sHeight / 2 - safeRangeY, sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
					}
					for (int k = 0; k < 255; k++)
					{
						if (Main.player[k].active && new Rectangle((int)Main.player[k].position.X, (int)Main.player[k].position.Y, Main.player[k].width, Main.player[k].height).Intersects(rectangle))
						{
							flag4 = false;
							break;
						}
					}
				}
				if (flag4)
				{
					if (type == 37 || !Collision.SolidTiles(floorX - 1, floorX + 1, floorY - 3, floorY - 1))
					{
						velocity.X = 0f;
						velocity.Y = 0f;
						position.X = floorX * 16 + 8 - width / 2;
						position.Y = (float)(floorY * 16 - height) - 0.1f;
						netUpdate = true;
						AI_007_TryForcingSitting(floorX, floorY);
					}
					else
					{
						homeless = true;
						WorldGen.QuickFindHome(whoAmI);
					}
				}
			}
			bool flag5 = type == 300 || type == 447 || type == 610;
			bool flag6 = type == 616 || type == 617 || type == 625;
			bool flag7 = type == 361 || type == 445;
			bool flag8 = flag6 || flag7;
			_ = NPCID.Sets.IsTownPet[type];
			bool flag9 = flag6 || flag7;
			float num6 = 200f;
			if (NPCID.Sets.DangerDetectRange[type] != -1)
			{
				num6 = NPCID.Sets.DangerDetectRange[type];
			}
			bool flag10 = false;
			bool flag11 = false;
			float num7 = -1f;
			float num8 = -1f;
			int num9 = 0;
			int num10 = -1;
			int num11 = -1;
			if (!flag6 && Main.netMode != 1 && !flag3)
			{
				for (int l = 0; l < 200; l++)
				{
					if (!Main.npc[l].active || Main.npc[l].friendly || Main.npc[l].damage <= 0 || !(Main.npc[l].Distance(base.Center) < num6) || (type == 453 && NPCID.Sets.Skeletons[Main.npc[l].type]) || (!Main.npc[l].noTileCollide && !Collision.CanHit(base.Center, 0, 0, Main.npc[l].Center, 0, 0)))
					{
						continue;
					}
					flag10 = true;
					float num12 = Main.npc[l].Center.X - base.Center.X;
					if (type == 614)
					{
						if (num12 < 0f && (num7 == -1f || num12 > num7))
						{
							num8 = num12;
							num11 = l;
						}
						if (num12 > 0f && (num8 == -1f || num12 < num8))
						{
							num7 = num12;
							num10 = l;
						}
					}
					else
					{
						if (num12 < 0f && (num7 == -1f || num12 > num7))
						{
							num7 = num12;
							num10 = l;
						}
						if (num12 > 0f && (num8 == -1f || num12 < num8))
						{
							num8 = num12;
							num11 = l;
						}
					}
				}
				if (flag10)
				{
					num9 = ((num7 == -1f) ? 1 : ((num8 != -1f) ? (num8 < 0f - num7).ToDirectionInt() : (-1)));
					float num13 = 0f;
					if (num7 != -1f)
					{
						num13 = 0f - num7;
					}
					if (num13 == 0f || (num8 < num13 && num8 > 0f))
					{
						num13 = num8;
					}
					if (ai[0] == 8f)
					{
						if (base.direction == -num9)
						{
							ai[0] = 1f;
							ai[1] = 300 + Main.rand.Next(300);
							ai[2] = 0f;
							localAI[3] = 0f;
							netUpdate = true;
						}
					}
					else if (ai[0] != 10f && ai[0] != 12f && ai[0] != 13f && ai[0] != 14f && ai[0] != 15f)
					{
						if (NPCID.Sets.PrettySafe[type] != -1 && (float)NPCID.Sets.PrettySafe[type] < num13)
						{
							flag10 = false;
							flag11 = NPCID.Sets.AttackType[type] > -1;
						}
						else if (ai[0] != 1f)
						{
							int tileX = (int)((position.X + (float)(width / 2) + (float)(15 * base.direction)) / 16f);
							int tileY = (int)((position.Y + (float)height - 16f) / 16f);
							bool currentlyDrowning = wet && !flag8;
							AI_007_TownEntities_GetWalkPrediction(num4, floorX, flag8, currentlyDrowning, tileX, tileY, out var _, out var avoidFalling);
							if (!avoidFalling)
							{
								if (ai[0] == 3f || ai[0] == 4f || ai[0] == 16f || ai[0] == 17f)
								{
									NPC nPC = Main.npc[(int)ai[2]];
									if (nPC.active)
									{
										nPC.ai[0] = 1f;
										nPC.ai[1] = 120 + Main.rand.Next(120);
										nPC.ai[2] = 0f;
										nPC.localAI[3] = 0f;
										nPC.direction = -num9;
										nPC.netUpdate = true;
									}
								}
								ai[0] = 1f;
								ai[1] = 120 + Main.rand.Next(120);
								ai[2] = 0f;
								localAI[3] = 0f;
								base.direction = -num9;
								netUpdate = true;
							}
						}
						else if (ai[0] == 1f && base.direction != -num9)
						{
							base.direction = -num9;
							netUpdate = true;
						}
					}
				}
			}
			if (ai[0] == 0f)
			{
				if (localAI[3] > 0f)
				{
					localAI[3] -= 1f;
				}
				int num14 = 120;
				if (type == 638)
				{
					num14 = 60;
				}
				if (flag7 && wet)
				{
					ai[0] = 1f;
					ai[1] = 200 + Main.rand.Next(500, 700);
					ai[2] = 0f;
					localAI[3] = 0f;
					netUpdate = true;
				}
				else if (flag && !flag3 && !NPCID.Sets.TownCritter[type])
				{
					if (Main.netMode != 1)
					{
						if (num4 == floorX && num5 == floorY)
						{
							if (velocity.X != 0f)
							{
								netUpdate = true;
							}
							if (velocity.X > 0.1f)
							{
								velocity.X -= 0.1f;
							}
							else if (velocity.X < -0.1f)
							{
								velocity.X += 0.1f;
							}
							else
							{
								velocity.X = 0f;
								AI_007_TryForcingSitting(floorX, floorY);
							}
							if (NPCID.Sets.IsTownPet[type])
							{
								AI_007_AttemptToPlayIdleAnimationsForPets(num14 * 4);
							}
						}
						else
						{
							if (num4 > floorX)
							{
								base.direction = -1;
							}
							else
							{
								base.direction = 1;
							}
							ai[0] = 1f;
							ai[1] = 200 + Main.rand.Next(200);
							ai[2] = 0f;
							localAI[3] = 0f;
							netUpdate = true;
						}
					}
				}
				else
				{
					if (flag5)
					{
						velocity.X *= 0.5f;
					}
					if (velocity.X > 0.1f)
					{
						velocity.X -= 0.1f;
					}
					else if (velocity.X < -0.1f)
					{
						velocity.X += 0.1f;
					}
					else
					{
						velocity.X = 0f;
					}
					if (Main.netMode != 1)
					{
						if (!flag3 && NPCID.Sets.IsTownPet[type] && ai[1] >= 100f && ai[1] <= 150f)
						{
							AI_007_AttemptToPlayIdleAnimationsForPets(num14);
						}
						if (ai[1] > 0f)
						{
							ai[1] -= 1f;
						}
						bool flag12 = true;
						int tileX2 = (int)((position.X + (float)(width / 2) + (float)(15 * base.direction)) / 16f);
						int tileY2 = (int)((position.Y + (float)height - 16f) / 16f);
						bool currentlyDrowning2 = wet && !flag8;
						AI_007_TownEntities_GetWalkPrediction(num4, floorX, flag8, currentlyDrowning2, tileX2, tileY2, out var _, out var avoidFalling2);
						if (avoidFalling2)
						{
							flag12 = false;
						}
						if (ai[1] <= 0f)
						{
							if (flag12)
							{
								ai[0] = 1f;
								ai[1] = 200 + Main.rand.Next(300);
								ai[2] = 0f;
								if (NPCID.Sets.TownCritter[type])
								{
									ai[1] += Main.rand.Next(200, 400);
								}
								localAI[3] = 0f;
								netUpdate = true;
							}
							else
							{
								base.direction *= -1;
								ai[1] = 60 + Main.rand.Next(120);
								netUpdate = true;
							}
						}
					}
				}
				if (Main.netMode != 1 && (!flag || AI_007_TownEntities_IsInAGoodRestingSpot(num4, num5, floorX, floorY)))
				{
					if (num4 < floorX - 25 || num4 > floorX + 25)
					{
						if (localAI[3] == 0f)
						{
							if (num4 < floorX - 50 && base.direction == -1)
							{
								base.direction = 1;
								netUpdate = true;
							}
							else if (num4 > floorX + 50 && base.direction == 1)
							{
								base.direction = -1;
								netUpdate = true;
							}
						}
					}
					else if (Main.rand.Next(80) == 0 && localAI[3] == 0f)
					{
						localAI[3] = 200f;
						base.direction *= -1;
						netUpdate = true;
					}
				}
			}
			else if (ai[0] == 1f)
			{
				if (Main.netMode != 1 && flag && AI_007_TownEntities_IsInAGoodRestingSpot(num4, num5, floorX, floorY) && !NPCID.Sets.TownCritter[type])
				{
					ai[0] = 0f;
					ai[1] = 200 + Main.rand.Next(200);
					localAI[3] = 60f;
					netUpdate = true;
				}
				else
				{
					bool flag13 = !flag8 && Collision.DrownCollision(position, width, height, 1f, includeSlopes: true);
					if (!flag13)
					{
						if (Main.netMode != 1 && !homeless && !Main.tileDungeon[Main.tile[num4, num5].type] && (num4 < floorX - 35 || num4 > floorX + 35))
						{
							if (position.X < (float)(floorX * 16) && base.direction == -1)
							{
								ai[1] -= 5f;
							}
							else if (position.X > (float)(floorX * 16) && base.direction == 1)
							{
								ai[1] -= 5f;
							}
						}
						ai[1] -= 1f;
					}
					if (ai[1] <= 0f)
					{
						ai[0] = 0f;
						ai[1] = 300 + Main.rand.Next(300);
						ai[2] = 0f;
						if (NPCID.Sets.TownCritter[type])
						{
							ai[1] -= Main.rand.Next(100);
						}
						else
						{
							ai[1] += Main.rand.Next(900);
						}
						localAI[3] = 60f;
						netUpdate = true;
					}
					if (closeDoor && ((position.X + (float)(width / 2)) / 16f > (float)(doorX + 2) || (position.X + (float)(width / 2)) / 16f < (float)(doorX - 2)))
					{
						Tile tileSafely = Framing.GetTileSafely(doorX, doorY);
						if (tileSafely.type == 11)
						{
							if (WorldGen.CloseDoor(doorX, doorY))
							{
								closeDoor = false;
								NetMessage.SendData(19, -1, -1, null, 1, doorX, doorY, base.direction);
							}
							if ((position.X + (float)(width / 2)) / 16f > (float)(doorX + 4) || (position.X + (float)(width / 2)) / 16f < (float)(doorX - 4) || (position.Y + (float)(height / 2)) / 16f > (float)(doorY + 4) || (position.Y + (float)(height / 2)) / 16f < (float)(doorY - 4))
							{
								closeDoor = false;
							}
						}
						else if (tileSafely.type == 389)
						{
							if (WorldGen.ShiftTallGate(doorX, doorY, closing: true))
							{
								closeDoor = false;
								NetMessage.SendData(19, -1, -1, null, 5, doorX, doorY);
							}
							if ((position.X + (float)(width / 2)) / 16f > (float)(doorX + 4) || (position.X + (float)(width / 2)) / 16f < (float)(doorX - 4) || (position.Y + (float)(height / 2)) / 16f > (float)(doorY + 4) || (position.Y + (float)(height / 2)) / 16f < (float)(doorY - 4))
							{
								closeDoor = false;
							}
						}
						else
						{
							closeDoor = false;
						}
					}
					float num15 = 1f;
					float num16 = 0.07f;
					if (type == 614 && flag10)
					{
						num15 = 1.5f;
						num16 = 0.1f;
					}
					else if (type == 299 || type == 539 || type == 538 || (type >= 639 && type <= 645))
					{
						num15 = 1.5f;
					}
					else if (flag6)
					{
						if (wet)
						{
							num16 = 1f;
							num15 = 2f;
						}
						else
						{
							num16 = 0.07f;
							num15 = 0.5f;
						}
					}
					if (type == 625)
					{
						if (wet)
						{
							num16 = 1f;
							num15 = 2.5f;
						}
						else
						{
							num16 = 0.07f;
							num15 = 0.2f;
						}
					}
					if (flag5)
					{
						num15 = 2f;
						num16 = 1f;
					}
					if (friendly && (flag10 || flag13))
					{
						num15 = 1.5f;
						float num17 = 1f - (float)life / (float)lifeMax;
						num15 += num17 * 0.9f;
						num16 = 0.1f;
					}
					if (flag7 && wet)
					{
						if (Math.Abs(velocity.X) < 0.05f && Math.Abs(velocity.Y) < 0.05f)
						{
							velocity.X += num15 * 10f * (float)base.direction;
						}
						else
						{
							velocity.X *= 0.9f;
						}
					}
					else if (velocity.X < 0f - num15 || velocity.X > num15)
					{
						if (velocity.Y == 0f)
						{
							velocity *= 0.8f;
						}
					}
					else if (velocity.X < num15 && base.direction == 1)
					{
						velocity.X += num16;
						if (velocity.X > num15)
						{
							velocity.X = num15;
						}
					}
					else if (velocity.X > 0f - num15 && base.direction == -1)
					{
						velocity.X -= num16;
						if (velocity.X > num15)
						{
							velocity.X = num15;
						}
					}
					bool flag14 = true;
					if ((float)(homeTileY * 16 - 32) > position.Y)
					{
						flag14 = false;
					}
					if (!flag14 && velocity.Y == 0f)
					{
						Collision.StepDown(position, velocity, width, height, stepSpeed, gfxOffY);
					}
					if (velocity.Y >= 0f)
					{
						Collision.StepUp(position, velocity, width, height, stepSpeed, gfxOffY, 1, flag14, 1);
					}
					if (velocity.Y == 0f)
					{
						int num18 = (int)((position.X + (float)(width / 2) + (float)(15 * base.direction)) / 16f);
						int num19 = (int)((position.Y + (float)height - 16f) / 16f);
						AI_007_TownEntities_GetWalkPrediction(num4, floorX, flag8, flag13, num18, num19, out var keepwalking3, out var avoidFalling3);
						if (!avoidFalling3 && wet && !flag8 && AI_007_TownEntities_CheckIfWillDrown(flag13) && localAI[3] <= 0f)
						{
							avoidFalling3 = true;
							localAI[3] = 600f;
						}
						if (avoidFalling3)
						{
							int num20 = (int)((position.X + (float)(width / 2)) / 16f);
							int num21 = 0;
							for (int m = -1; m <= 1; m++)
							{
								Tile tileSafely2 = Framing.GetTileSafely(num20 + m, num19 + 1);
								if (tileSafely2.nactive() && Main.tileSolid[tileSafely2.type])
								{
									num21++;
								}
							}
							if (num21 <= 2)
							{
								if (velocity.X != 0f)
								{
									netUpdate = true;
								}
								keepwalking3 = (avoidFalling3 = false);
								ai[0] = 0f;
								ai[1] = 50 + Main.rand.Next(50);
								ai[2] = 0f;
								localAI[3] = 40f;
							}
						}
						if (position.X == localAI[3])
						{
							base.direction *= -1;
							netUpdate = true;
							localAI[3] = 600f;
						}
						if (flag13)
						{
							if (localAI[3] > 0f)
							{
								localAI[3] -= 1f;
							}
						}
						else
						{
							localAI[3] = -1f;
						}
						Tile tileSafely3 = Framing.GetTileSafely(num18, num19);
						Tile tileSafely4 = Framing.GetTileSafely(num18, num19 - 1);
						Tile tileSafely5 = Framing.GetTileSafely(num18, num19 - 2);
						bool flag15 = height / 16 < 3;
						if (townNPC && tileSafely5.nactive() && (tileSafely5.type == 10 || tileSafely5.type == 388) && (Main.rand.Next(10) == 0 || flag))
						{
							if (Main.netMode != 1)
							{
								if (WorldGen.OpenDoor(num18, num19 - 2, base.direction))
								{
									closeDoor = true;
									doorX = num18;
									doorY = num19 - 2;
									NetMessage.SendData(19, -1, -1, null, 0, num18, num19 - 2, base.direction);
									netUpdate = true;
									ai[1] += 80f;
								}
								else if (WorldGen.OpenDoor(num18, num19 - 2, -base.direction))
								{
									closeDoor = true;
									doorX = num18;
									doorY = num19 - 2;
									NetMessage.SendData(19, -1, -1, null, 0, num18, num19 - 2, -base.direction);
									netUpdate = true;
									ai[1] += 80f;
								}
								else if (WorldGen.ShiftTallGate(num18, num19 - 2, closing: false))
								{
									closeDoor = true;
									doorX = num18;
									doorY = num19 - 2;
									NetMessage.SendData(19, -1, -1, null, 4, num18, num19 - 2);
									netUpdate = true;
									ai[1] += 80f;
								}
								else
								{
									base.direction *= -1;
									netUpdate = true;
								}
							}
						}
						else
						{
							if ((velocity.X < 0f && spriteDirection == -1) || (velocity.X > 0f && spriteDirection == 1))
							{
								bool flag16 = false;
								bool flag17 = false;
								if (tileSafely5.nactive() && Main.tileSolid[tileSafely5.type] && !Main.tileSolidTop[tileSafely5.type] && (!flag15 || (tileSafely4.nactive() && Main.tileSolid[tileSafely4.type] && !Main.tileSolidTop[tileSafely4.type])))
								{
									if (!Collision.SolidTilesVersatile(num18 - base.direction * 2, num18 - base.direction, num19 - 5, num19 - 1) && !Collision.SolidTiles(num18, num18, num19 - 5, num19 - 3))
									{
										velocity.Y = -6f;
										netUpdate = true;
									}
									else if (flag5)
									{
										if (WorldGen.SolidTile((int)(base.Center.X / 16f) + base.direction, (int)(base.Center.Y / 16f)))
										{
											base.direction *= -1;
											velocity.X *= 0f;
											netUpdate = true;
										}
									}
									else if (flag10)
									{
										flag17 = true;
										flag16 = true;
									}
									else
									{
										flag16 = true;
									}
								}
								else if (tileSafely4.nactive() && Main.tileSolid[tileSafely4.type] && !Main.tileSolidTop[tileSafely4.type])
								{
									if (!Collision.SolidTilesVersatile(num18 - base.direction * 2, num18 - base.direction, num19 - 4, num19 - 1) && !Collision.SolidTiles(num18, num18, num19 - 4, num19 - 2))
									{
										velocity.Y = -5f;
										netUpdate = true;
									}
									else if (flag10)
									{
										flag17 = true;
										flag16 = true;
									}
									else
									{
										flag16 = true;
									}
								}
								else if (position.Y + (float)height - (float)(num19 * 16) > 20f && tileSafely3.nactive() && Main.tileSolid[tileSafely3.type] && !tileSafely3.topSlope())
								{
									if (!Collision.SolidTilesVersatile(num18 - base.direction * 2, num18, num19 - 3, num19 - 1))
									{
										velocity.Y = -4.4f;
										netUpdate = true;
									}
									else if (flag10)
									{
										flag17 = true;
										flag16 = true;
									}
									else
									{
										flag16 = true;
									}
								}
								else if (avoidFalling3)
								{
									flag16 = true;
									if (flag10)
									{
										flag17 = true;
									}
								}
								if (flag17)
								{
									keepwalking3 = false;
									velocity.X = 0f;
									ai[0] = 8f;
									ai[1] = 240f;
									netUpdate = true;
								}
								if (flag16)
								{
									base.direction *= -1;
									velocity.X *= -1f;
									netUpdate = true;
								}
								if (keepwalking3)
								{
									ai[1] = 90f;
									netUpdate = true;
								}
								if (velocity.Y < 0f)
								{
									localAI[3] = position.X;
								}
							}
							if (velocity.Y < 0f && wet)
							{
								velocity.Y *= 1.2f;
							}
							if (velocity.Y < 0f && NPCID.Sets.TownCritter[type] && !flag5)
							{
								velocity.Y *= 1.2f;
							}
						}
					}
				}
			}
			else if (ai[0] == 2f || ai[0] == 11f)
			{
				if (Main.netMode != 1)
				{
					localAI[3] -= 1f;
					if (Main.rand.Next(60) == 0 && localAI[3] == 0f)
					{
						localAI[3] = 60f;
						base.direction *= -1;
						netUpdate = true;
					}
				}
				ai[1] -= 1f;
				velocity.X *= 0.8f;
				if (ai[1] <= 0f)
				{
					localAI[3] = 40f;
					ai[0] = 0f;
					ai[1] = 60 + Main.rand.Next(60);
					netUpdate = true;
				}
			}
			else if (ai[0] == 3f || ai[0] == 4f || ai[0] == 5f || ai[0] == 8f || ai[0] == 9f || ai[0] == 16f || ai[0] == 17f || ai[0] == 20f || ai[0] == 21f || ai[0] == 22f || ai[0] == 23f)
			{
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				if (ai[0] == 8f && ai[1] < 60f && flag10)
				{
					ai[1] = 180f;
					netUpdate = true;
				}
				if (ai[0] == 5f)
				{
					Point coords = (base.Bottom + Vector2.UnitY * -2f).ToTileCoordinates();
					Tile tile = Main.tile[coords.X, coords.Y];
					if (tile.type != 15 && tile.type != 497)
					{
						ai[1] = 0f;
					}
					else
					{
						Main.sittingManager.AddNPC(whoAmI, coords);
					}
				}
				if (ai[1] <= 0f)
				{
					ai[0] = 0f;
					ai[1] = 60 + Main.rand.Next(60);
					ai[2] = 0f;
					localAI[3] = 30 + Main.rand.Next(60);
					netUpdate = true;
				}
			}
			else if (ai[0] == 6f || ai[0] == 7f || ai[0] == 18f || ai[0] == 19f)
			{
				if (ai[0] == 18f && (localAI[3] < 1f || localAI[3] > 2f))
				{
					localAI[3] = 2f;
				}
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				int num22 = (int)ai[2];
				if (num22 < 0 || num22 > 255 || !Main.player[num22].CanBeTalkedTo || Main.player[num22].Distance(base.Center) > 200f || !Collision.CanHitLine(base.Top, 0, 0, Main.player[num22].Top, 0, 0))
				{
					ai[1] = 0f;
				}
				if (ai[1] > 0f)
				{
					int num23 = ((base.Center.X < Main.player[num22].Center.X) ? 1 : (-1));
					if (num23 != base.direction)
					{
						netUpdate = true;
					}
					base.direction = num23;
				}
				else
				{
					ai[0] = 0f;
					ai[1] = 60 + Main.rand.Next(60);
					ai[2] = 0f;
					localAI[3] = 30 + Main.rand.Next(60);
					netUpdate = true;
				}
			}
			else if (ai[0] == 10f)
			{
				int num24 = 0;
				int num25 = 0;
				float knockBack = 0f;
				float num26 = 0f;
				int num27 = 0;
				int num28 = 0;
				int maxValue = 0;
				float num29 = 0f;
				float num30 = NPCID.Sets.DangerDetectRange[type];
				float num31 = 0f;
				if ((float)NPCID.Sets.AttackTime[type] == ai[1])
				{
					frameCounter = 0.0;
					localAI[3] = 0f;
				}
				if (type == 38)
				{
					num24 = 30;
					num26 = 6f;
					num25 = 20;
					num27 = 10;
					num28 = 180;
					maxValue = 120;
					num29 = 16f;
					knockBack = 7f;
				}
				else if (type == 633)
				{
					num24 = 880;
					num26 = 24f;
					num25 = 15;
					num27 = 1;
					num29 = 0f;
					knockBack = 7f;
					num28 = 15;
					maxValue = 10;
					if (ShouldBestiaryGirlBeLycantrope())
					{
						num24 = 929;
						num25 = (int)((float)num25 * 1.5f);
					}
				}
				else if (type == 550)
				{
					num24 = 669;
					num26 = 6f;
					num25 = 24;
					num27 = 10;
					num28 = 120;
					maxValue = 60;
					num29 = 16f;
					knockBack = 9f;
				}
				else if (type == 588)
				{
					num24 = 721;
					num26 = 8f;
					num25 = 15;
					num27 = 5;
					num28 = 20;
					maxValue = 10;
					num29 = 16f;
					knockBack = 9f;
				}
				else if (type == 208)
				{
					num24 = 588;
					num26 = 6f;
					num25 = 30;
					num27 = 10;
					num28 = 60;
					maxValue = 120;
					num29 = 16f;
					knockBack = 6f;
				}
				else if (type == 17)
				{
					num24 = 48;
					num26 = 9f;
					num25 = 12;
					num27 = 10;
					num28 = 60;
					maxValue = 60;
					num29 = 16f;
					knockBack = 1.5f;
				}
				else if (type == 369)
				{
					num24 = 520;
					num26 = 12f;
					num25 = 10;
					num27 = 10;
					num28 = 0;
					maxValue = 1;
					num29 = 16f;
					knockBack = 3f;
				}
				else if (type == 453)
				{
					num24 = 21;
					num26 = 14f;
					num25 = 14;
					num27 = 10;
					num28 = 0;
					maxValue = 1;
					num29 = 16f;
					knockBack = 3f;
				}
				else if (type == 107)
				{
					num24 = 24;
					num26 = 5f;
					num25 = 15;
					num27 = 10;
					num28 = 60;
					maxValue = 60;
					num29 = 16f;
					knockBack = 1f;
				}
				else if (type == 124)
				{
					num24 = 582;
					num26 = 10f;
					num25 = 11;
					num27 = 1;
					num28 = 30;
					maxValue = 30;
					knockBack = 3.5f;
				}
				else if (type == 18)
				{
					num24 = 583;
					num26 = 8f;
					num25 = 8;
					num27 = 1;
					num28 = 15;
					maxValue = 10;
					knockBack = 2f;
					num29 = 10f;
				}
				else if (type == 142)
				{
					num24 = 589;
					num26 = 7f;
					num25 = 22;
					num27 = 1;
					num28 = 10;
					maxValue = 1;
					knockBack = 2f;
					num29 = 10f;
				}
				if (Main.expertMode)
				{
					num25 = (int)((float)num25 * Main.GameModeInfo.TownNPCDamageMultiplier);
				}
				num25 = (int)((float)num25 * num2);
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				localAI[3] += 1f;
				if (localAI[3] == (float)num27 && Main.netMode != 1)
				{
					Vector2 vec = -Vector2.UnitY;
					if (num9 == 1 && spriteDirection == 1 && num11 != -1)
					{
						vec = DirectionTo(Main.npc[num11].Center + new Vector2(0f, (0f - num29) * MathHelper.Clamp(Distance(Main.npc[num11].Center) / num30, 0f, 1f)));
					}
					if (num9 == -1 && spriteDirection == -1 && num10 != -1)
					{
						vec = DirectionTo(Main.npc[num10].Center + new Vector2(0f, (0f - num29) * MathHelper.Clamp(Distance(Main.npc[num10].Center) / num30, 0f, 1f)));
					}
					if (vec.HasNaNs() || Math.Sign(vec.X) != spriteDirection)
					{
						vec = new Vector2(spriteDirection, -1f);
					}
					vec *= num26;
					vec += Utils.RandomVector2(Main.rand, 0f - num31, num31);
					int num32 = 1000;
					num32 = ((type == 124) ? Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec.X, vec.Y, num24, num25, knockBack, Main.myPlayer, 0f, whoAmI) : ((type != 142) ? Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec.X, vec.Y, num24, num25, knockBack, Main.myPlayer) : Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec.X, vec.Y, num24, num25, knockBack, Main.myPlayer, 0f, Main.rand.Next(5))));
					Main.projectile[num32].npcProj = true;
					Main.projectile[num32].noDropItem = true;
					if (type == 588)
					{
						Main.projectile[num32].timeLeft = 480;
					}
				}
				if (ai[1] <= 0f && 0 == 0)
				{
					ai[0] = ((localAI[2] == 8f && flag10) ? 8 : 0);
					ai[1] = num28 + Main.rand.Next(maxValue);
					ai[2] = 0f;
					localAI[1] = (localAI[3] = num28 / 2 + Main.rand.Next(maxValue));
					netUpdate = true;
				}
			}
			else if (ai[0] == 12f)
			{
				int num33 = 0;
				int num34 = 0;
				float num35 = 0f;
				int num36 = 0;
				int num37 = 0;
				int maxValue2 = 0;
				float knockBack2 = 0f;
				int num38 = 0;
				bool flag18 = false;
				float num39 = 0f;
				if ((float)NPCID.Sets.AttackTime[type] == ai[1])
				{
					frameCounter = 0.0;
					localAI[3] = 0f;
				}
				int num40 = -1;
				if (num9 == 1 && spriteDirection == 1)
				{
					num40 = num11;
				}
				if (num9 == -1 && spriteDirection == -1)
				{
					num40 = num10;
				}
				if (type == 19)
				{
					num33 = 14;
					num35 = 13f;
					num34 = 24;
					num37 = 14;
					maxValue2 = 4;
					knockBack2 = 3f;
					num36 = 1;
					num39 = 0.5f;
					if ((float)NPCID.Sets.AttackTime[type] == ai[1])
					{
						frameCounter = 0.0;
						localAI[3] = 0f;
					}
					if (Main.hardMode)
					{
						num34 = 15;
						if (localAI[3] > (float)num36)
						{
							num36 = 10;
							flag18 = true;
						}
						if (localAI[3] > (float)num36)
						{
							num36 = 20;
							flag18 = true;
						}
						if (localAI[3] > (float)num36)
						{
							num36 = 30;
							flag18 = true;
						}
					}
				}
				else if (type == 227)
				{
					num33 = 587;
					num35 = 10f;
					num34 = 8;
					num37 = 10;
					maxValue2 = 1;
					knockBack2 = 1.75f;
					num36 = 1;
					num39 = 0.5f;
					if (localAI[3] > (float)num36)
					{
						num36 = 12;
						flag18 = true;
					}
					if (localAI[3] > (float)num36)
					{
						num36 = 24;
						flag18 = true;
					}
					if (Main.hardMode)
					{
						num34 += 2;
					}
				}
				else if (type == 368)
				{
					num33 = 14;
					num35 = 13f;
					num34 = 24;
					num37 = 12;
					maxValue2 = 5;
					knockBack2 = 2f;
					num36 = 1;
					num39 = 0.2f;
					if (Main.hardMode)
					{
						num34 = 30;
						num33 = 357;
					}
				}
				else if (type == 22)
				{
					num35 = 10f;
					num34 = 8;
					num36 = 1;
					if (Main.hardMode)
					{
						num33 = 2;
						num37 = 15;
						maxValue2 = 10;
						num34 += 6;
					}
					else
					{
						num33 = 1;
						num37 = 30;
						maxValue2 = 20;
					}
					knockBack2 = 2.75f;
					num38 = 4;
					num39 = 0.7f;
				}
				else if (type == 228)
				{
					num33 = 267;
					num35 = 14f;
					num34 = 20;
					num36 = 1;
					num37 = 10;
					maxValue2 = 1;
					knockBack2 = 3f;
					num38 = 6;
					num39 = 0.4f;
				}
				else if (type == 178)
				{
					num33 = 242;
					num35 = 13f;
					num34 = 15;
					num37 = 10;
					maxValue2 = 1;
					knockBack2 = 2f;
					num36 = 1;
					if (localAI[3] > (float)num36)
					{
						num36 = 8;
						flag18 = true;
					}
					if (localAI[3] > (float)num36)
					{
						num36 = 16;
						flag18 = true;
					}
					num39 = 0.3f;
				}
				else if (type == 229)
				{
					num33 = 14;
					num35 = 14f;
					num34 = 24;
					num37 = 10;
					maxValue2 = 1;
					knockBack2 = 2f;
					num36 = 1;
					num39 = 0.7f;
					if (localAI[3] > (float)num36)
					{
						num36 = 16;
						flag18 = true;
					}
					if (localAI[3] > (float)num36)
					{
						num36 = 24;
						flag18 = true;
					}
					if (localAI[3] > (float)num36)
					{
						num36 = 32;
						flag18 = true;
					}
					if (localAI[3] > (float)num36)
					{
						num36 = 40;
						flag18 = true;
					}
					if (localAI[3] > (float)num36)
					{
						num36 = 48;
						flag18 = true;
					}
					if (localAI[3] == 0f && num40 != -1 && Distance(Main.npc[num40].Center) < (float)NPCID.Sets.PrettySafe[type])
					{
						num39 = 0.1f;
						num33 = 162;
						num34 = 50;
						knockBack2 = 10f;
						num35 = 24f;
					}
				}
				else if (type == 209)
				{
					num33 = Utils.SelectRandom<int>(Main.rand, 134, 133, 135);
					num36 = 1;
					switch (num33)
					{
					case 135:
						num35 = 12f;
						num34 = 30;
						num37 = 30;
						maxValue2 = 10;
						knockBack2 = 7f;
						num39 = 0.2f;
						break;
					case 133:
						num35 = 10f;
						num34 = 25;
						num37 = 10;
						maxValue2 = 1;
						knockBack2 = 6f;
						num39 = 0.2f;
						break;
					case 134:
						num35 = 13f;
						num34 = 20;
						num37 = 20;
						maxValue2 = 10;
						knockBack2 = 4f;
						num39 = 0.1f;
						break;
					}
				}
				if (Main.expertMode)
				{
					num34 = (int)((float)num34 * Main.GameModeInfo.TownNPCDamageMultiplier);
				}
				num34 = (int)((float)num34 * num2);
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				localAI[3] += 1f;
				if (localAI[3] == (float)num36 && Main.netMode != 1)
				{
					Vector2 vec2 = Vector2.Zero;
					if (num40 != -1)
					{
						vec2 = DirectionTo(Main.npc[num40].Center + new Vector2(0f, -num38));
					}
					if (vec2.HasNaNs() || Math.Sign(vec2.X) != spriteDirection)
					{
						vec2 = new Vector2(spriteDirection, 0f);
					}
					vec2 *= num35;
					vec2 += Utils.RandomVector2(Main.rand, 0f - num39, num39);
					int num41 = 1000;
					num41 = ((type != 227) ? Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec2.X, vec2.Y, num33, num34, knockBack2, Main.myPlayer) : Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec2.X, vec2.Y, num33, num34, knockBack2, Main.myPlayer, 0f, (float)Main.rand.Next(12) / 6f));
					Main.projectile[num41].npcProj = true;
					Main.projectile[num41].noDropItem = true;
				}
				if (localAI[3] == (float)num36 && flag18 && num40 != -1)
				{
					Vector2 vector = DirectionTo(Main.npc[num40].Center);
					if (vector.Y <= 0.5f && vector.Y >= -0.5f)
					{
						ai[2] = vector.Y;
					}
				}
				if (ai[1] <= 0f && 0 == 0)
				{
					ai[0] = ((localAI[2] == 8f && flag10) ? 8 : 0);
					ai[1] = num37 + Main.rand.Next(maxValue2);
					ai[2] = 0f;
					localAI[1] = (localAI[3] = num37 / 2 + Main.rand.Next(maxValue2));
					netUpdate = true;
				}
			}
			else if (ai[0] == 13f)
			{
				velocity.X *= 0.8f;
				if ((float)NPCID.Sets.AttackTime[type] == ai[1])
				{
					frameCounter = 0.0;
				}
				ai[1] -= 1f;
				localAI[3] += 1f;
				if (localAI[3] == 1f && Main.netMode != 1)
				{
					Vector2 vec3 = DirectionTo(Main.npc[(int)ai[2]].Center + new Vector2(0f, -20f));
					if (vec3.HasNaNs() || Math.Sign(vec3.X) == -spriteDirection)
					{
						vec3 = new Vector2(spriteDirection, -1f);
					}
					vec3 *= 8f;
					int num42 = Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec3.X, vec3.Y, 584, 0, 0f, Main.myPlayer, ai[2]);
					Main.projectile[num42].npcProj = true;
					Main.projectile[num42].noDropItem = true;
				}
				if (ai[1] <= 0f)
				{
					ai[0] = 0f;
					ai[1] = 10 + Main.rand.Next(10);
					ai[2] = 0f;
					localAI[3] = 5 + Main.rand.Next(10);
					netUpdate = true;
				}
			}
			else if (ai[0] == 14f)
			{
				int num43 = 0;
				int num44 = 0;
				float num45 = 0f;
				int n = 0;
				int num46 = 0;
				int maxValue3 = 0;
				float knockBack3 = 0f;
				float num47 = 0f;
				float num48 = NPCID.Sets.DangerDetectRange[type];
				float num49 = 1f;
				float num50 = 0f;
				if ((float)NPCID.Sets.AttackTime[type] == ai[1])
				{
					frameCounter = 0.0;
					localAI[3] = 0f;
				}
				int num51 = -1;
				if (num9 == 1 && spriteDirection == 1)
				{
					num51 = num11;
				}
				if (num9 == -1 && spriteDirection == -1)
				{
					num51 = num10;
				}
				if (type == 54)
				{
					num43 = 585;
					num45 = 10f;
					num44 = 16;
					n = 30;
					num46 = 20;
					maxValue3 = 15;
					knockBack3 = 2f;
					num50 = 1f;
				}
				else if (type == 108)
				{
					num43 = 15;
					num45 = 6f;
					num44 = 18;
					n = 15;
					num46 = 15;
					maxValue3 = 5;
					knockBack3 = 3f;
					num47 = 20f;
				}
				else if (type == 160)
				{
					num43 = 590;
					num44 = 40;
					n = 15;
					num46 = 10;
					maxValue3 = 1;
					knockBack3 = 3f;
					for (; localAI[3] > (float)n; n += 15)
					{
					}
				}
				else if (type == 20)
				{
					num43 = 586;
					n = 24;
					num46 = 10;
					maxValue3 = 1;
					knockBack3 = 3f;
				}
				if (Main.expertMode)
				{
					num44 = (int)((float)num44 * Main.GameModeInfo.TownNPCDamageMultiplier);
				}
				num44 = (int)((float)num44 * num2);
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				localAI[3] += 1f;
				if (localAI[3] == (float)n && Main.netMode != 1)
				{
					Vector2 vec4 = Vector2.Zero;
					if (num51 != -1)
					{
						vec4 = DirectionTo(Main.npc[num51].Center + new Vector2(0f, (0f - num47) * MathHelper.Clamp(Distance(Main.npc[num51].Center) / num48, 0f, 1f)));
					}
					if (vec4.HasNaNs() || Math.Sign(vec4.X) != spriteDirection)
					{
						vec4 = new Vector2(spriteDirection, 0f);
					}
					vec4 *= num45;
					vec4 += Utils.RandomVector2(Main.rand, 0f - num50, num50);
					if (type == 108)
					{
						int num52 = Utils.SelectRandom<int>(Main.rand, 1, 1, 1, 1, 2, 2, 3);
						for (int num53 = 0; num53 < num52; num53++)
						{
							Vector2 vector2 = Utils.RandomVector2(Main.rand, -3.4f, 3.4f);
							int num54 = Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec4.X + vector2.X, vec4.Y + vector2.Y, num43, num44, knockBack3, Main.myPlayer);
							Main.projectile[num54].npcProj = true;
							Main.projectile[num54].noDropItem = true;
						}
					}
					else if (type == 160)
					{
						if (num51 != -1)
						{
							Vector2 vector3 = Main.npc[num51].position - Main.npc[num51].Size * 2f + Main.npc[num51].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 5f;
							int num55 = 10;
							while (num55 > 0 && WorldGen.SolidTile(Framing.GetTileSafely((int)vector3.X / 16, (int)vector3.Y / 16)))
							{
								num55--;
								vector3 = Main.npc[num51].position - Main.npc[num51].Size * 2f + Main.npc[num51].Size * Utils.RandomVector2(Main.rand, 0f, 1f) * 5f;
							}
							int num56 = Projectile.NewProjectile(vector3.X, vector3.Y, 0f, 0f, num43, num44, knockBack3, Main.myPlayer);
							Main.projectile[num56].npcProj = true;
							Main.projectile[num56].noDropItem = true;
						}
					}
					else if (type == 20)
					{
						int num57 = Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec4.X, vec4.Y, num43, num44, knockBack3, Main.myPlayer, 0f, whoAmI);
						Main.projectile[num57].npcProj = true;
						Main.projectile[num57].noDropItem = true;
					}
					else
					{
						int num58 = Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * 16), base.Center.Y - 2f, vec4.X, vec4.Y, num43, num44, knockBack3, Main.myPlayer);
						Main.projectile[num58].npcProj = true;
						Main.projectile[num58].noDropItem = true;
					}
				}
				if (num49 > 0f)
				{
					Vector3 vector4 = NPCID.Sets.MagicAuraColor[type].ToVector3() * num49;
					Lighting.AddLight(base.Center, vector4.X, vector4.Y, vector4.Z);
				}
				if (ai[1] <= 0f && 0 == 0)
				{
					ai[0] = ((localAI[2] == 8f && flag10) ? 8 : 0);
					ai[1] = num46 + Main.rand.Next(maxValue3);
					ai[2] = 0f;
					localAI[1] = (localAI[3] = num46 / 2 + Main.rand.Next(maxValue3));
					netUpdate = true;
				}
			}
			else if (ai[0] == 15f)
			{
				int num59 = 0;
				int maxValue4 = 0;
				if ((float)NPCID.Sets.AttackTime[type] == ai[1])
				{
					frameCounter = 0.0;
					localAI[3] = 0f;
				}
				int num60 = 0;
				float num61 = 0f;
				int num62 = 0;
				int num63 = 0;
				if (num9 == 1)
				{
					_ = spriteDirection;
					_ = 1;
				}
				if (num9 == -1)
				{
					_ = spriteDirection;
					_ = -1;
				}
				if (type == 207)
				{
					num60 = 11;
					num62 = (num63 = 32);
					num59 = 12;
					maxValue4 = 6;
					num61 = 4.25f;
				}
				else if (type == 441)
				{
					num60 = 9;
					num62 = (num63 = 28);
					num59 = 9;
					maxValue4 = 3;
					num61 = 3.5f;
				}
				else if (type == 353)
				{
					num60 = 10;
					num62 = (num63 = 32);
					num59 = 15;
					maxValue4 = 8;
					num61 = 5f;
				}
				else if (type == 637 || type == 638 || type == 656)
				{
					num60 = 10;
					num62 = (num63 = 32);
					num59 = 15;
					maxValue4 = 8;
					num61 = 3f;
				}
				if (Main.expertMode)
				{
					num60 = (int)((float)num60 * Main.GameModeInfo.TownNPCDamageMultiplier);
				}
				num60 = (int)((float)num60 * num2);
				velocity.X *= 0.8f;
				ai[1] -= 1f;
				if (Main.netMode != 1)
				{
					Tuple<Vector2, float> swingStats = GetSwingStats(NPCID.Sets.AttackTime[type] * 2, (int)ai[1], spriteDirection, num62, num63);
					Rectangle itemRectangle = new Rectangle((int)swingStats.Item1.X, (int)swingStats.Item1.Y, num62, num63);
					if (spriteDirection == -1)
					{
						itemRectangle.X -= num62;
					}
					itemRectangle.Y -= num63;
					TweakSwingStats(NPCID.Sets.AttackTime[type] * 2, (int)ai[1], spriteDirection, itemRectangle);
					int myPlayer = Main.myPlayer;
					for (int num64 = 0; num64 < 200; num64++)
					{
						NPC nPC2 = Main.npc[num64];
						if (nPC2.active && nPC2.immune[myPlayer] == 0 && !nPC2.dontTakeDamage && !nPC2.friendly && nPC2.damage > 0 && itemRectangle.Intersects(nPC2.Hitbox) && (nPC2.noTileCollide || Collision.CanHit(position, width, height, nPC2.position, nPC2.width, nPC2.height)))
						{
							nPC2.StrikeNPCNoInteraction(num60, num61, spriteDirection);
							if (Main.netMode != 0)
							{
								NetMessage.SendData(28, -1, -1, null, num64, num60, num61, spriteDirection);
							}
							nPC2.netUpdate = true;
							nPC2.immune[myPlayer] = (int)ai[1] + 2;
						}
					}
				}
				if (ai[1] <= 0f)
				{
					bool flag19 = false;
					if (flag10)
					{
						int num65 = -num9;
						if (!Collision.CanHit(base.Center, 0, 0, base.Center + Vector2.UnitX * num65 * 32f, 0, 0) || localAI[2] == 8f)
						{
							flag19 = true;
						}
						if (flag19)
						{
							int num66 = NPCID.Sets.AttackTime[type];
							int num67 = ((num9 == 1) ? num11 : num10);
							int num68 = ((num9 == 1) ? num10 : num11);
							if (num67 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num67].Center, 0, 0))
							{
								num67 = ((num68 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num68].Center, 0, 0)) ? (-1) : num68);
							}
							if (num67 != -1)
							{
								ai[0] = 15f;
								ai[1] = num66;
								ai[2] = 0f;
								localAI[3] = 0f;
								base.direction = ((position.X < Main.npc[num67].position.X) ? 1 : (-1));
								netUpdate = true;
							}
							else
							{
								flag19 = false;
							}
						}
					}
					if (!flag19)
					{
						ai[0] = ((localAI[2] == 8f && flag10) ? 8 : 0);
						ai[1] = num59 + Main.rand.Next(maxValue4);
						ai[2] = 0f;
						localAI[1] = (localAI[3] = num59 / 2 + Main.rand.Next(maxValue4));
						netUpdate = true;
					}
				}
			}
			if (flag9 && wet)
			{
				if (flag7)
				{
					ai[1] = 50f;
				}
				if (collideX)
				{
					base.direction *= -1;
					velocity.X *= -0.25f;
				}
				if (Collision.GetWaterLine(base.Center.ToTileCoordinates(), out var waterLineHeight))
				{
					float num69 = base.Center.Y + 1f;
					if (base.Center.Y > waterLineHeight)
					{
						velocity.Y -= 0.8f;
						if (velocity.Y < -4f)
						{
							velocity.Y = -4f;
						}
						if (num69 + velocity.Y < waterLineHeight)
						{
							velocity.Y = waterLineHeight - num69;
						}
					}
					else
					{
						velocity.Y = MathHelper.Min(velocity.Y, waterLineHeight - num69);
					}
				}
				else
				{
					velocity.Y -= 0.2f;
				}
			}
			if (Main.netMode == 1 || !isLikeATownNPC || flag3)
			{
				return;
			}
			bool flag20 = ai[0] < 2f && !flag10;
			bool flag21 = (ai[0] < 2f || ai[0] == 8f) && (flag10 || flag11);
			if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
			}
			if (localAI[1] > 0f)
			{
				flag21 = false;
			}
			if (flag21 && type == 124 && localAI[0] == 1f)
			{
				flag21 = false;
			}
			if (flag21 && type == 20)
			{
				flag21 = false;
				for (int num70 = 0; num70 < 200; num70++)
				{
					NPC nPC3 = Main.npc[num70];
					if (nPC3.active && nPC3.townNPC && !(Distance(nPC3.Center) > 1200f) && nPC3.FindBuffIndex(165) == -1)
					{
						flag21 = true;
						break;
					}
				}
			}
			if (CanTalk && flag20 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(300) == 0)
			{
				int num71 = 420;
				num71 = ((Main.rand.Next(2) != 0) ? (num71 * Main.rand.Next(1, 3)) : (num71 * Main.rand.Next(1, 4)));
				int num72 = 100;
				int num73 = 20;
				for (int num74 = 0; num74 < 200; num74++)
				{
					NPC nPC4 = Main.npc[num74];
					bool flag22 = (nPC4.ai[0] == 1f && nPC4.closeDoor) || (nPC4.ai[0] == 1f && nPC4.ai[1] > 200f) || nPC4.ai[0] > 1f;
					if (nPC4 != this && nPC4.active && nPC4.CanBeTalkedTo && !flag22 && nPC4.Distance(base.Center) < (float)num72 && nPC4.Distance(base.Center) > (float)num73 && Collision.CanHit(base.Center, 0, 0, nPC4.Center, 0, 0))
					{
						int num75 = (position.X < nPC4.position.X).ToDirectionInt();
						ai[0] = 3f;
						ai[1] = num71;
						ai[2] = num74;
						base.direction = num75;
						netUpdate = true;
						nPC4.ai[0] = 4f;
						nPC4.ai[1] = num71;
						nPC4.ai[2] = whoAmI;
						nPC4.direction = -num75;
						nPC4.netUpdate = true;
						break;
					}
				}
			}
			else if (CanTalk && flag20 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1800) == 0)
			{
				int num76 = 420;
				num76 = ((Main.rand.Next(2) != 0) ? (num76 * Main.rand.Next(1, 3)) : (num76 * Main.rand.Next(1, 4)));
				int num77 = 100;
				int num78 = 20;
				for (int num79 = 0; num79 < 200; num79++)
				{
					NPC nPC5 = Main.npc[num79];
					bool flag23 = (nPC5.ai[0] == 1f && nPC5.closeDoor) || (nPC5.ai[0] == 1f && nPC5.ai[1] > 200f) || nPC5.ai[0] > 1f;
					if (nPC5 != this && nPC5.active && nPC5.CanBeTalkedTo && !NPCID.Sets.IsTownPet[nPC5.type] && !flag23 && nPC5.Distance(base.Center) < (float)num77 && nPC5.Distance(base.Center) > (float)num78 && Collision.CanHit(base.Center, 0, 0, nPC5.Center, 0, 0))
					{
						int num80 = (position.X < nPC5.position.X).ToDirectionInt();
						ai[0] = 16f;
						ai[1] = num76;
						ai[2] = num79;
						localAI[2] = Main.rand.Next(4);
						localAI[3] = Main.rand.Next(3 - (int)localAI[2]);
						base.direction = num80;
						netUpdate = true;
						nPC5.ai[0] = 17f;
						nPC5.ai[1] = num76;
						nPC5.ai[2] = whoAmI;
						nPC5.localAI[2] = 0f;
						nPC5.localAI[3] = 0f;
						nPC5.direction = -num80;
						nPC5.netUpdate = true;
						break;
					}
				}
			}
			else if (!NPCID.Sets.IsTownPet[type] && flag20 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1200) == 0 && (type == 208 || (BirthdayParty.PartyIsUp && NPCID.Sets.AttackType[type] == NPCID.Sets.AttackType[208])))
			{
				int num81 = 300;
				int num82 = 150;
				for (int num83 = 0; num83 < 255; num83++)
				{
					Player player = Main.player[num83];
					if (player.active && !player.dead && player.Distance(base.Center) < (float)num82 && Collision.CanHitLine(base.Top, 0, 0, player.Top, 0, 0))
					{
						int direction2 = (position.X < player.position.X).ToDirectionInt();
						ai[0] = 6f;
						ai[1] = num81;
						ai[2] = num83;
						base.direction = direction2;
						netUpdate = true;
						break;
					}
				}
			}
			else if (flag20 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(600) == 0 && type == 550)
			{
				int num84 = 300;
				int num85 = 150;
				for (int num86 = 0; num86 < 255; num86++)
				{
					Player player2 = Main.player[num86];
					if (player2.active && !player2.dead && player2.Distance(base.Center) < (float)num85 && Collision.CanHitLine(base.Top, 0, 0, player2.Top, 0, 0))
					{
						int direction3 = (position.X < player2.position.X).ToDirectionInt();
						ai[0] = 18f;
						ai[1] = num84;
						ai[2] = num86;
						base.direction = direction3;
						netUpdate = true;
						break;
					}
				}
			}
			else if (!NPCID.Sets.IsTownPet[type] && flag20 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1800) == 0)
			{
				ai[0] = 2f;
				ai[1] = 45 * Main.rand.Next(1, 2);
				netUpdate = true;
			}
			else if (flag20 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(600) == 0 && type == 229 && !flag11)
			{
				ai[0] = 11f;
				ai[1] = 30 * Main.rand.Next(1, 4);
				netUpdate = true;
			}
			else if (flag20 && ai[0] == 0f && velocity.Y == 0f && Main.rand.Next(1200) == 0)
			{
				int num87 = 220;
				int num88 = 150;
				for (int num89 = 0; num89 < 255; num89++)
				{
					Player player3 = Main.player[num89];
					if (player3.CanBeTalkedTo && player3.Distance(base.Center) < (float)num88 && Collision.CanHitLine(base.Top, 0, 0, player3.Top, 0, 0))
					{
						int direction4 = (position.X < player3.position.X).ToDirectionInt();
						ai[0] = 7f;
						ai[1] = num87;
						ai[2] = num89;
						base.direction = direction4;
						netUpdate = true;
						break;
					}
				}
			}
			else if (flag20 && ai[0] == 1f && velocity.Y == 0f && num > 0 && Main.rand.Next(num) == 0)
			{
				Point b = (base.Bottom + Vector2.UnitY * -2f).ToTileCoordinates();
				bool flag24 = WorldGen.InWorld(b.X, b.Y, 1);
				if (flag24)
				{
					for (int num90 = 0; num90 < 200; num90++)
					{
						if (Main.npc[num90].active && Main.npc[num90].aiStyle == 7 && Main.npc[num90].townNPC && Main.npc[num90].ai[0] == 5f && (Main.npc[num90].Bottom + Vector2.UnitY * -2f).ToTileCoordinates() == b)
						{
							flag24 = false;
							break;
						}
					}
					for (int num91 = 0; num91 < 255; num91++)
					{
						if (Main.player[num91].active && Main.player[num91].sitting.isSitting && Main.player[num91].Center.ToTileCoordinates() == b)
						{
							flag24 = false;
							break;
						}
					}
				}
				if (flag24)
				{
					Tile tile2 = Main.tile[b.X, b.Y];
					flag24 = tile2.type == 15 || tile2.type == 497;
					if (flag24 && tile2.type == 15 && tile2.frameY == 1098)
					{
						flag24 = false;
					}
					if (flag24)
					{
						ai[0] = 5f;
						ai[1] = 900 + Main.rand.Next(10800);
						base.direction = ((tile2.frameX != 0) ? 1 : (-1));
						base.Bottom = new Vector2(b.X * 16 + 8 + 2 * base.direction, b.Y * 16 + 16);
						velocity = Vector2.Zero;
						localAI[3] = 0f;
						netUpdate = true;
					}
				}
			}
			else if (flag20 && ai[0] == 1f && velocity.Y == 0f && Main.rand.Next(600) == 0 && Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.SearchAvoidedByNPCs))
			{
				Point point = (base.Center + new Vector2(base.direction * 10, 0f)).ToTileCoordinates();
				bool flag25 = WorldGen.InWorld(point.X, point.Y, 1);
				if (flag25)
				{
					Tile tileSafely6 = Framing.GetTileSafely(point.X, point.Y);
					if (!tileSafely6.nactive() || !TileID.Sets.InteractibleByNPCs[tileSafely6.type])
					{
						flag25 = false;
					}
				}
				if (flag25)
				{
					ai[0] = 9f;
					ai[1] = 40 + Main.rand.Next(90);
					velocity = Vector2.Zero;
					localAI[3] = 0f;
					netUpdate = true;
				}
			}
			if (Main.netMode != 1 && ai[0] < 2f && velocity.Y == 0f && type == 18 && breath > 0)
			{
				int num92 = -1;
				for (int num93 = 0; num93 < 200; num93++)
				{
					NPC nPC6 = Main.npc[num93];
					if (nPC6.active && nPC6.townNPC && nPC6.life != nPC6.lifeMax && (num92 == -1 || nPC6.lifeMax - nPC6.life > Main.npc[num92].lifeMax - Main.npc[num92].life) && Collision.CanHitLine(position, width, height, nPC6.position, nPC6.width, nPC6.height) && Distance(nPC6.Center) < 500f)
					{
						num92 = num93;
					}
				}
				if (num92 != -1)
				{
					ai[0] = 13f;
					ai[1] = 34f;
					ai[2] = num92;
					localAI[3] = 0f;
					base.direction = ((position.X < Main.npc[num92].position.X) ? 1 : (-1));
					netUpdate = true;
				}
			}
			if (flag21 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 0 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
			{
				int num94 = NPCID.Sets.AttackTime[type];
				int num95 = ((num9 == 1) ? num11 : num10);
				int num96 = ((num9 == 1) ? num10 : num11);
				if (num95 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num95].Center, 0, 0))
				{
					num95 = ((num96 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num96].Center, 0, 0)) ? (-1) : num96);
				}
				bool flag26 = num95 != -1;
				if (flag26 && type == 633)
				{
					flag26 = Vector2.Distance(base.Center, Main.npc[num95].Center) <= 50f;
				}
				if (flag26)
				{
					localAI[2] = ai[0];
					ai[0] = 10f;
					ai[1] = num94;
					ai[2] = 0f;
					localAI[3] = 0f;
					base.direction = ((position.X < Main.npc[num95].position.X) ? 1 : (-1));
					netUpdate = true;
				}
			}
			else if (flag21 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 1 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
			{
				int num97 = NPCID.Sets.AttackTime[type];
				int num98 = ((num9 == 1) ? num11 : num10);
				int num99 = ((num9 == 1) ? num10 : num11);
				if (num98 != -1 && !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num98].Center, 0, 0))
				{
					num98 = ((num99 == -1 || !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num99].Center, 0, 0)) ? (-1) : num99);
				}
				if (num98 != -1)
				{
					Vector2 vector5 = DirectionTo(Main.npc[num98].Center);
					if (vector5.Y <= 0.5f && vector5.Y >= -0.5f)
					{
						localAI[2] = ai[0];
						ai[0] = 12f;
						ai[1] = num97;
						ai[2] = vector5.Y;
						localAI[3] = 0f;
						base.direction = ((position.X < Main.npc[num98].position.X) ? 1 : (-1));
						netUpdate = true;
					}
				}
			}
			if (flag21 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 2 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
			{
				int num100 = NPCID.Sets.AttackTime[type];
				int num101 = ((num9 == 1) ? num11 : num10);
				int num102 = ((num9 == 1) ? num10 : num11);
				if (num101 != -1 && !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num101].Center, 0, 0))
				{
					num101 = ((num102 == -1 || !Collision.CanHitLine(base.Center, 0, 0, Main.npc[num102].Center, 0, 0)) ? (-1) : num102);
				}
				if (num101 != -1)
				{
					localAI[2] = ai[0];
					ai[0] = 14f;
					ai[1] = num100;
					ai[2] = 0f;
					localAI[3] = 0f;
					base.direction = ((position.X < Main.npc[num101].position.X) ? 1 : (-1));
					netUpdate = true;
				}
				else if (type == 20)
				{
					localAI[2] = ai[0];
					ai[0] = 14f;
					ai[1] = num100;
					ai[2] = 0f;
					localAI[3] = 0f;
					netUpdate = true;
				}
			}
			if (flag21 && velocity.Y == 0f && NPCID.Sets.AttackType[type] == 3 && NPCID.Sets.AttackAverageChance[type] > 0 && Main.rand.Next(NPCID.Sets.AttackAverageChance[type] * 2) == 0)
			{
				int num103 = NPCID.Sets.AttackTime[type];
				int num104 = ((num9 == 1) ? num11 : num10);
				int num105 = ((num9 == 1) ? num10 : num11);
				if (num104 != -1 && !Collision.CanHit(base.Center, 0, 0, Main.npc[num104].Center, 0, 0))
				{
					num104 = ((num105 == -1 || !Collision.CanHit(base.Center, 0, 0, Main.npc[num105].Center, 0, 0)) ? (-1) : num105);
				}
				if (num104 != -1)
				{
					localAI[2] = ai[0];
					ai[0] = 15f;
					ai[1] = num103;
					ai[2] = 0f;
					localAI[3] = 0f;
					base.direction = ((position.X < Main.npc[num104].position.X) ? 1 : (-1));
					netUpdate = true;
				}
			}
		}

		private void AI_007_TownEntities_GetWalkPrediction(int myTileX, int homeFloorX, bool canBreathUnderWater, bool currentlyDrowning, int tileX, int tileY, out bool keepwalking, out bool avoidFalling)
		{
			keepwalking = false;
			avoidFalling = true;
			bool flag = myTileX >= homeFloorX - 35 && myTileX <= homeFloorX + 35;
			if (townNPC && ai[1] < 30f)
			{
				keepwalking = !Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.SearchAvoidedByNPCs);
				if (!keepwalking)
				{
					Rectangle hitbox = base.Hitbox;
					hitbox.X -= 20;
					hitbox.Width += 40;
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].active && Main.npc[i].friendly && i != whoAmI && Main.npc[i].velocity.X == 0f && hitbox.Intersects(Main.npc[i].Hitbox))
						{
							keepwalking = true;
							break;
						}
					}
				}
			}
			if (!keepwalking && currentlyDrowning)
			{
				keepwalking = true;
			}
			if (avoidFalling && (NPCID.Sets.TownCritter[type] || (!flag && direction == Math.Sign(homeFloorX - myTileX))))
			{
				avoidFalling = false;
			}
			if (!avoidFalling)
			{
				return;
			}
			int num = 0;
			for (int j = -1; j <= 4; j++)
			{
				Tile tileSafely = Framing.GetTileSafely(tileX - direction * num, tileY + j);
				if (tileSafely.lava() && tileSafely.liquid > 0)
				{
					avoidFalling = true;
					break;
				}
				if (tileSafely.nactive() && Main.tileSolid[tileSafely.type])
				{
					avoidFalling = false;
					break;
				}
			}
		}

		private bool AI_007_TownEntities_CheckIfWillDrown(bool currentlyDrowning)
		{
			bool flag = currentlyDrowning;
			bool flag2 = false;
			if (!flag)
			{
				flag2 = Collision.DrownCollision(position + new Vector2(width * direction, 0f), width, height, 1f);
			}
			return flag2 || Collision.DrownCollision(position + new Vector2(width * direction, height * 2 - 16 - (flag ? 16 : 0)), width, 16 + (flag ? 16 : 0), 1f);
		}

		private void AI_007_AttemptToPlayIdleAnimationsForPets(int petIdleChance)
		{
			if (velocity.X == 0f && Main.netMode != 1 && Main.rand.Next(petIdleChance) == 0)
			{
				int num = 3;
				if (type == 638)
				{
					num = 2;
				}
				ai[0] = Main.rand.Next(20, 20 + num);
				ai[1] = 200 + Main.rand.Next(300);
				if (ai[0] == 20f && type == 637)
				{
					ai[1] = 500 + Main.rand.Next(200);
				}
				if (ai[0] == 21f && type == 638)
				{
					ai[1] = 100 + Main.rand.Next(100);
				}
				if (ai[0] == 22f && type == 656)
				{
					ai[1] = 200 + Main.rand.Next(200);
				}
				ai[2] = 0f;
				localAI[3] = 0f;
				netUpdate = true;
			}
		}

		public bool NPCCanStickToWalls()
		{
			int num = (int)base.Center.X / 16;
			int num2 = (int)base.Center.Y / 16;
			int num3 = 0;
			for (int i = num - 1; i <= num + 1; i++)
			{
				for (int j = num2 - 1; j <= num2 + 1; j++)
				{
					Tile tileSafely = Framing.GetTileSafely(i, j);
					if ((!tileSafely.active() || !Main.tileSolid[tileSafely.type] || TileID.Sets.Platforms[tileSafely.type]) && tileSafely.wall > 0)
					{
						num3++;
						if (num3 > 4)
						{
							return true;
						}
					}
				}
			}
			return false;
		}

		private void AI_003_Fighters()
		{
			if (Main.player[target].position.Y + (float)Main.player[target].height == base.position.Y + (float)height)
			{
				directionY = -1;
			}
			bool flag = false;
			if (type == 624)
			{
				int num = (int)(base.Center.X / 16f);
				int num2 = (int)(base.Bottom.Y / 16f);
				if (Main.dayTime && WorldGen.InAPlaceWithWind(base.position, width, height))
				{
					base.position += netOffset;
					int num3 = Dust.NewDust(base.position, width, height, 43, 0f, 0f, 254, Color.White, 0.5f);
					Main.dust[num3].velocity *= 0.2f;
					base.position -= netOffset;
					if (WorldGen.SolidTileAllowBottomSlope(num, num2))
					{
						for (int i = 0; i < 5; i++)
						{
							base.position += netOffset;
							int num4 = Dust.NewDust(base.position, width, height, 43, 0f, 0f, 254, Color.White, 0.5f);
							Main.dust[num4].velocity *= 0.2f;
							base.position -= netOffset;
						}
						if (Main.netMode != 1 && TileObject.CanPlace(num, num2 - 1, 567, 0, direction, out var _, onlyCheck: true) && WorldGen.PlaceTile(num, num2 - 1, 567, mute: false, forced: false, -1, Main.rand.Next(5)))
						{
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, num, num2 - 1, 3);
							}
							if (Main.netMode != 1)
							{
								if (IsNPCValidForBestiaryKillCredit())
								{
									Main.BestiaryTracker.Kills.RegisterKill(this);
								}
								CountKillForBannersAndDropThem();
							}
							life = 0;
							active = false;
							return;
						}
					}
				}
			}
			if (type == 466)
			{
				int num5 = 200;
				if (ai[2] == 0f)
				{
					alpha = num5;
					TargetClosest();
					if (!Main.player[target].dead && (Main.player[target].Center - base.Center).Length() < 170f)
					{
						ai[2] = -16f;
					}
					if (base.velocity.X != 0f || base.velocity.Y < 0f || base.velocity.Y > 2f || justHit)
					{
						ai[2] = -16f;
					}
					return;
				}
				if (ai[2] < 0f)
				{
					if (alpha > 0)
					{
						alpha -= num5 / 16;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					ai[2] += 1f;
					if (ai[2] == 0f)
					{
						ai[2] = 1f;
						base.velocity.X = direction * 2;
					}
					return;
				}
				alpha = 0;
			}
			if (type == 166)
			{
				if (Main.netMode != 1 && Main.rand.Next(240) == 0)
				{
					ai[2] = Main.rand.Next(-480, -60);
					netUpdate = true;
				}
				if (ai[2] < 0f)
				{
					TargetClosest();
					if (justHit)
					{
						ai[2] = 0f;
					}
					if (Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						ai[2] = 0f;
					}
				}
				if (ai[2] < 0f)
				{
					base.velocity.X *= 0.9f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					ai[2] += 1f;
					if (ai[2] == 0f)
					{
						base.velocity.X = (float)direction * 0.1f;
					}
					return;
				}
			}
			if (type == 461)
			{
				if (wet)
				{
					knockBackResist = 0f;
					ai[3] = -0.10101f;
					noGravity = true;
					Vector2 center = base.Center;
					width = 34;
					height = 24;
					base.position.X = center.X - (float)(width / 2);
					base.position.Y = center.Y - (float)(height / 2);
					TargetClosest();
					if (collideX)
					{
						base.velocity.X = 0f - oldVelocity.X;
					}
					if (base.velocity.X < 0f)
					{
						direction = -1;
					}
					if (base.velocity.X > 0f)
					{
						direction = 1;
					}
					if (Collision.CanHit(base.position, width, height, Main.player[target].Center, 1, 1))
					{
						Vector2 value = Main.player[target].Center - base.Center;
						value.Normalize();
						value *= 5f;
						base.velocity = (base.velocity * 19f + value) / 20f;
						return;
					}
					float num6 = 5f;
					if (base.velocity.Y > 0f)
					{
						num6 = 3f;
					}
					if (base.velocity.Y < 0f)
					{
						num6 = 8f;
					}
					Vector2 value2 = new Vector2(direction, -1f);
					value2.Normalize();
					value2 *= num6;
					if (num6 < 5f)
					{
						base.velocity = (base.velocity * 24f + value2) / 25f;
					}
					else
					{
						base.velocity = (base.velocity * 9f + value2) / 10f;
					}
					return;
				}
				knockBackResist = 0.4f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				noGravity = false;
				Vector2 center2 = base.Center;
				width = 18;
				height = 40;
				base.position.X = center2.X - (float)(width / 2);
				base.position.Y = center2.Y - (float)(height / 2);
				if (ai[3] == -0.10101f)
				{
					ai[3] = 0f;
					float num7 = base.velocity.Length();
					num7 *= 2f;
					if (num7 > 10f)
					{
						num7 = 10f;
					}
					base.velocity.Normalize();
					base.velocity *= num7;
					if (base.velocity.X < 0f)
					{
						direction = -1;
					}
					if (base.velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
				}
			}
			if (type == 586)
			{
				if (alpha == 255)
				{
					TargetClosest();
					spriteDirection = direction;
					base.velocity.Y = -6f;
					netUpdate = true;
					for (int j = 0; j < 35; j++)
					{
						Dust dust = Dust.NewDustDirect(base.position, width, height, 5);
						dust.velocity *= 1f;
						dust.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust.velocity += base.velocity * 0.5f;
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				base.position += netOffset;
				if (alpha != 0)
				{
					for (int k = 0; k < 2; k++)
					{
						Dust dust2 = Dust.NewDustDirect(base.position, width, height, 5);
						dust2.velocity *= 1f;
						dust2.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust2.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust2.velocity += base.velocity * 0.3f;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(base.position, width, height, 5);
					dust3.velocity *= 0f;
					dust3.alpha = 120;
					dust3.scale = 0.7f + Main.rand.NextFloat() * 0.5f;
					dust3.velocity += base.velocity * 0.3f;
				}
				base.position -= netOffset;
				if (wet)
				{
					knockBackResist = 0f;
					ai[3] = -0.10101f;
					noGravity = true;
					Vector2 center3 = base.Center;
					base.position.X = center3.X - (float)(width / 2);
					base.position.Y = center3.Y - (float)(height / 2);
					TargetClosest();
					if (collideX)
					{
						base.velocity.X = 0f - oldVelocity.X;
					}
					if (base.velocity.X < 0f)
					{
						direction = -1;
					}
					if (base.velocity.X > 0f)
					{
						direction = 1;
					}
					if (Collision.CanHit(base.position, width, height, Main.player[target].Center, 1, 1))
					{
						Vector2 value3 = Main.player[target].Center - base.Center;
						value3.Normalize();
						float num8 = 1f;
						num8 += Math.Abs(base.Center.Y - Main.player[target].Center.Y) / 40f;
						num8 = MathHelper.Clamp(num8, 5f, 20f);
						value3 *= num8;
						if (base.velocity.Y > 0f)
						{
							base.velocity = (base.velocity * 29f + value3) / 30f;
						}
						else
						{
							base.velocity = (base.velocity * 4f + value3) / 5f;
						}
						return;
					}
					float num9 = 5f;
					if (base.velocity.Y > 0f)
					{
						num9 = 3f;
					}
					if (base.velocity.Y < 0f)
					{
						num9 = 8f;
					}
					Vector2 value4 = new Vector2(direction, -1f);
					value4.Normalize();
					value4 *= num9;
					if (num9 < 5f)
					{
						base.velocity = (base.velocity * 24f + value4) / 25f;
					}
					else
					{
						base.velocity = (base.velocity * 9f + value4) / 10f;
					}
					return;
				}
				noGravity = false;
				Vector2 center4 = base.Center;
				base.position.X = center4.X - (float)(width / 2);
				base.position.Y = center4.Y - (float)(height / 2);
				if (ai[3] == -0.10101f)
				{
					ai[3] = 0f;
					float num10 = base.velocity.Length();
					num10 *= 2f;
					if (num10 > 15f)
					{
						num10 = 15f;
					}
					base.velocity.Normalize();
					base.velocity *= num10;
					if (base.velocity.X < 0f)
					{
						direction = -1;
					}
					if (base.velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
				}
			}
			if (type == 379 || type == 380)
			{
				if (ai[3] < 0f)
				{
					directionY = -1;
					flag = false;
					damage = 0;
					base.velocity.X *= 0.93f;
					if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
					{
						base.velocity.X = 0f;
					}
					int num11 = (int)(0f - ai[3] - 1f);
					int num12 = Math.Sign(Main.npc[num11].Center.X - base.Center.X);
					if (num12 != direction)
					{
						base.velocity.X = 0f;
						direction = num12;
						netUpdate = true;
					}
					if (justHit && Main.netMode != 1 && Main.npc[num11].localAI[0] == 0f)
					{
						Main.npc[num11].localAI[0] = 1f;
					}
					if (ai[0] < 1000f)
					{
						ai[0] = 1000f;
					}
					if ((ai[0] += 1f) >= 1300f)
					{
						ai[0] = 1000f;
						netUpdate = true;
					}
					return;
				}
				if (ai[0] >= 1000f)
				{
					ai[0] = 0f;
				}
				damage = defDamage;
			}
			if (type == 383 && ai[2] == 0f && localAI[0] == 0f && Main.netMode != 1)
			{
				int num13 = NewNPC((int)base.Center.X, (int)base.Center.Y, 384, whoAmI);
				ai[2] = num13 + 1;
				localAI[0] = -1f;
				netUpdate = true;
				Main.npc[num13].ai[0] = whoAmI;
				Main.npc[num13].netUpdate = true;
			}
			if (type == 383)
			{
				int num14 = (int)ai[2] - 1;
				if (num14 != -1 && Main.npc[num14].active && Main.npc[num14].type == 384)
				{
					dontTakeDamage = true;
				}
				else
				{
					dontTakeDamage = false;
					ai[2] = 0f;
					if (localAI[0] == -1f)
					{
						localAI[0] = 180f;
					}
					if (localAI[0] > 0f)
					{
						localAI[0] -= 1f;
					}
				}
			}
			if (type == 482)
			{
				int num15 = 300;
				int num16 = 120;
				dontTakeDamage = false;
				if (ai[2] < 0f)
				{
					dontTakeDamage = true;
					ai[2] += 1f;
					base.velocity.X *= 0.9f;
					if ((double)Math.Abs(base.velocity.X) < 0.001)
					{
						base.velocity.X = 0.001f * (float)direction;
					}
					if (Math.Abs(base.velocity.Y) > 1f)
					{
						ai[2] += 10f;
					}
					if (ai[2] >= 0f)
					{
						netUpdate = true;
						base.velocity.X += (float)direction * 0.3f;
					}
					return;
				}
				if (ai[2] < (float)num15)
				{
					if (justHit)
					{
						ai[2] += 15f;
					}
					ai[2] += 1f;
				}
				else if (base.velocity.Y == 0f)
				{
					ai[2] = -num16;
					netUpdate = true;
				}
			}
			if (type == 631)
			{
				if (target < 0 || target == 255 || Main.player[target].dead || !Main.player[target].active)
				{
					TargetClosest(ai[2] > 0f);
				}
				Player player = Main.player[target];
				bool flag2 = !player.dead && player.active && base.Center.Distance(player.Center) < 320f;
				int num17 = 24;
				if (ai[2] == 0f)
				{
					ai[3] = 65f;
					if (flag2 && Collision.CanHit(player, this))
					{
						ai[2] = 100f;
						ai[3] = 0f;
						base.velocity.X = (float)direction * 0.01f;
						netUpdate = true;
					}
				}
				else
				{
					if (ai[2] < 100f)
					{
						ai[2] += 1f;
						base.velocity.X *= 0.9f;
						if ((double)Math.Abs(base.velocity.X) < 0.001)
						{
							base.velocity.X = 0f;
						}
						if (Math.Abs(base.velocity.Y) > 1f)
						{
							ai[2] = 0f;
						}
						if (ai[2] == (float)(100 - num17 / 2) && Main.netMode != 1 && !player.Hitbox.Intersects(base.Hitbox) && Collision.CanHit(player, this))
						{
							float num18 = 10f;
							Vector2 center5 = base.Center;
							Vector2 vector = DirectionTo(Main.player[target].Center) * num18;
							if (vector.HasNaNs())
							{
								vector = new Vector2((float)direction * num18, 0f);
							}
							int num19 = damage / 4;
							Vector2 v = vector + Utils.RandomVector2(Main.rand, -0.8f, 0.8f);
							v = v.SafeNormalize(Vector2.Zero);
							v *= num18;
							Projectile.NewProjectile(center5.X, center5.Y, v.X, v.Y, 909, num19, 1f, Main.myPlayer);
						}
						if (ai[2] >= 100f)
						{
							ai[2] = 100f;
							ai[3] = 0f;
							base.velocity.X = (float)direction * 0.01f;
							netUpdate = true;
						}
						return;
					}
					if (base.velocity.Y == 0f && flag2 && (player.Hitbox.Intersects(base.Hitbox) || Collision.CanHit(player, this)))
					{
						ai[2] = 100 - num17;
						netUpdate = true;
					}
				}
			}
			if (type == 480)
			{
				int num20 = 180;
				int num21 = 300;
				int num22 = 180;
				int num23 = 60;
				int num24 = 20;
				if (life < lifeMax / 3)
				{
					num20 = 120;
					num21 = 240;
					num22 = 240;
					num23 = 90;
				}
				if (ai[2] > 0f)
				{
					ai[2] -= 1f;
				}
				else if (ai[2] == 0f)
				{
					if (((Main.player[target].Center.X < base.Center.X && direction < 0) || (Main.player[target].Center.X > base.Center.X && direction > 0)) && base.velocity.Y == 0f && Distance(Main.player[target].Center) < 900f && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						ai[2] = -num22 - num24;
						netUpdate = true;
					}
				}
				else
				{
					if (ai[2] < 0f && ai[2] < (float)(-num22))
					{
						base.position += netOffset;
						base.velocity.X *= 0.9f;
						if (base.velocity.Y < -2f || base.velocity.Y > 4f || justHit)
						{
							ai[2] = num20;
						}
						else
						{
							ai[2] += 1f;
							if (ai[2] == 0f)
							{
								ai[2] = num21;
							}
						}
						float num25 = ai[2] + (float)num22 + (float)num24;
						if (num25 == 1f)
						{
							SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 17);
						}
						if (num25 < (float)num24)
						{
							Vector2 vector2 = base.Top + new Vector2(spriteDirection * 6, 6f);
							float scaleFactor = MathHelper.Lerp(20f, 30f, (num25 * 3f + 50f) / 182f);
							Main.rand.NextFloat();
							for (float num26 = 0f; num26 < 2f; num26 += 1f)
							{
								Vector2 vector3 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
								Dust obj = Main.dust[Dust.NewDust(vector2, 0, 0, 228)];
								obj.position = vector2 + vector3 * scaleFactor;
								obj.noGravity = true;
								obj.velocity = vector3 * 2f;
								obj.scale = 0.5f + Main.rand.NextFloat() * 0.5f;
							}
						}
						Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
						base.position -= netOffset;
						return;
					}
					if (ai[2] < 0f && ai[2] >= (float)(-num22))
					{
						base.position += netOffset;
						Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
						base.velocity.X *= 0.9f;
						if (base.velocity.Y < -2f || base.velocity.Y > 4f || justHit)
						{
							ai[2] = num20;
						}
						else
						{
							ai[2] += 1f;
							if (ai[2] == 0f)
							{
								ai[2] = num21;
							}
						}
						float num27 = ai[2] + (float)num22;
						if (num27 < 180f && (Main.rand.Next(3) == 0 || ai[2] % 3f == 0f))
						{
							Vector2 vector4 = base.Top + new Vector2(spriteDirection * 10, 10f);
							float scaleFactor2 = MathHelper.Lerp(20f, 30f, (num27 * 3f + 50f) / 182f);
							Main.rand.NextFloat();
							for (float num28 = 0f; num28 < 1f; num28 += 1f)
							{
								Vector2 vector5 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (Main.rand.NextFloat() * 0.5f + 0.5f);
								Dust obj2 = Main.dust[Dust.NewDust(vector4, 0, 0, 228)];
								obj2.position = vector4 + vector5 * scaleFactor2;
								obj2.noGravity = true;
								obj2.velocity = vector5 * 4f;
								obj2.scale = 0.5f + Main.rand.NextFloat();
							}
						}
						base.position -= netOffset;
						if (Main.netMode == 2)
						{
							return;
						}
						Player player2 = Main.player[Main.myPlayer];
						_ = Main.myPlayer;
						if (player2.dead || !player2.active || player2.FindBuffIndex(156) != -1)
						{
							return;
						}
						Vector2 vector6 = player2.Center - base.Center;
						if (!(vector6.Length() < 700f))
						{
							return;
						}
						bool flag3 = vector6.Length() < 30f;
						if (!flag3)
						{
							float x = ((float)Math.PI / 4f).ToRotationVector2().X;
							Vector2 vector7 = Vector2.Normalize(vector6);
							if (vector7.X > x || vector7.X < 0f - x)
							{
								flag3 = true;
							}
						}
						if (((player2.Center.X < base.Center.X && direction < 0 && player2.direction > 0) || (player2.Center.X > base.Center.X && direction > 0 && player2.direction < 0)) && flag3 && (Collision.CanHitLine(base.Center, 1, 1, player2.Center, 1, 1) || Collision.CanHitLine(base.Center - Vector2.UnitY * 16f, 1, 1, player2.Center, 1, 1) || Collision.CanHitLine(base.Center + Vector2.UnitY * 8f, 1, 1, player2.Center, 1, 1)) && !player2.creativeGodMode)
						{
							player2.AddBuff(156, num23 + (int)ai[2] * -1);
						}
						return;
					}
				}
			}
			if (type == 471)
			{
				if (ai[3] < 0f)
				{
					knockBackResist = 0f;
					defense = (int)((double)defDefense * 1.1);
					noGravity = true;
					noTileCollide = true;
					if (base.velocity.X < 0f)
					{
						direction = -1;
					}
					else if (base.velocity.X > 0f)
					{
						direction = 1;
					}
					rotation = base.velocity.X * 0.1f;
					if (Main.netMode != 1)
					{
						localAI[3] += 1f;
						if (localAI[3] > (float)Main.rand.Next(20, 180))
						{
							localAI[3] = 0f;
							Vector2 center6 = base.Center;
							center6 += base.velocity;
							NewNPC((int)center6.X, (int)center6.Y, 30);
						}
					}
				}
				else
				{
					localAI[3] = 0f;
					knockBackResist = 0.35f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
					rotation *= 0.9f;
					defense = defDefense;
					noGravity = false;
					noTileCollide = false;
				}
				if (ai[3] == 1f)
				{
					knockBackResist = 0f;
					defense += 10;
				}
				if (ai[3] == -1f)
				{
					TargetClosest();
					float num29 = 8f;
					float num30 = 40f;
					Vector2 value5 = Main.player[target].Center - base.Center;
					float num31 = value5.Length();
					num29 += num31 / 200f;
					value5.Normalize();
					value5 *= num29;
					base.velocity = (base.velocity * (num30 - 1f) + value5) / num30;
					if (num31 < 500f && !Collision.SolidCollision(base.position, width, height))
					{
						ai[3] = 0f;
						ai[2] = 0f;
					}
					return;
				}
				if (ai[3] == -2f)
				{
					base.velocity.Y -= 0.2f;
					if (base.velocity.Y < -10f)
					{
						base.velocity.Y = -10f;
					}
					if (Main.player[target].Center.Y - base.Center.Y > 200f)
					{
						TargetClosest();
						ai[3] = -3f;
						if (Main.player[target].Center.X > base.Center.X)
						{
							ai[2] = 1f;
						}
						else
						{
							ai[2] = -1f;
						}
					}
					base.velocity.X *= 0.99f;
					return;
				}
				if (ai[3] == -3f)
				{
					if (direction == 0)
					{
						TargetClosest();
					}
					if (ai[2] == 0f)
					{
						ai[2] = direction;
					}
					base.velocity.Y *= 0.9f;
					base.velocity.X += ai[2] * 0.3f;
					if (base.velocity.X > 10f)
					{
						base.velocity.X = 10f;
					}
					if (base.velocity.X < -10f)
					{
						base.velocity.X = -10f;
					}
					float num32 = Main.player[target].Center.X - base.Center.X;
					if ((ai[2] < 0f && num32 > 300f) || (ai[2] > 0f && num32 < -300f))
					{
						ai[3] = -4f;
						ai[2] = 0f;
					}
					else if (Math.Abs(num32) > 800f)
					{
						ai[3] = -1f;
						ai[2] = 0f;
					}
					return;
				}
				if (ai[3] == -4f)
				{
					ai[2] += 1f;
					base.velocity.Y += 0.1f;
					if (base.velocity.Length() > 4f)
					{
						base.velocity *= 0.9f;
					}
					int num33 = (int)base.Center.X / 16;
					int num34 = (int)(base.position.Y + (float)height + 12f) / 16;
					bool flag4 = false;
					for (int l = num33 - 1; l <= num33 + 1; l++)
					{
						if (Main.tile[l, num34] == null)
						{
							Main.tile[num33, num34] = new Tile();
						}
						if (Main.tile[l, num34].active() && Main.tileSolid[Main.tile[l, num34].type])
						{
							flag4 = true;
						}
					}
					if (flag4 && !Collision.SolidCollision(base.position, width, height))
					{
						ai[3] = 0f;
						ai[2] = 0f;
					}
					else if (ai[2] > 300f || base.Center.Y > Main.player[target].Center.Y + 200f)
					{
						ai[3] = -1f;
						ai[2] = 0f;
					}
				}
				else
				{
					if (ai[3] == 1f)
					{
						Vector2 center7 = base.Center;
						center7.Y -= 70f;
						base.velocity.X *= 0.8f;
						ai[2] += 1f;
						if (ai[2] == 60f)
						{
							if (Main.netMode != 1)
							{
								NewNPC((int)center7.X, (int)center7.Y + 18, 472);
							}
						}
						else if (ai[2] >= 90f)
						{
							ai[3] = -2f;
							ai[2] = 0f;
						}
						for (int m = 0; m < 2; m++)
						{
							Vector2 value6 = center7;
							Vector2 value7 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
							value7.Normalize();
							value7 *= (float)Main.rand.Next(0, 100) * 0.1f;
							Vector2 position = value6 + value7;
							value7.Normalize();
							value7 *= (float)Main.rand.Next(50, 90) * 0.1f;
							int num35 = Dust.NewDust(position, 1, 1, 27);
							Main.dust[num35].velocity = -value7 * 0.3f;
							Main.dust[num35].alpha = 100;
							if (Main.rand.Next(2) == 0)
							{
								Main.dust[num35].noGravity = true;
								Main.dust[num35].scale += 0.3f;
							}
						}
						return;
					}
					ai[2] += 1f;
					int num36 = 10;
					if (base.velocity.Y == 0f && CountNPCS(472) < num36)
					{
						if (ai[2] >= 180f)
						{
							ai[2] = 0f;
							ai[3] = 1f;
						}
					}
					else
					{
						if (CountNPCS(472) >= num36)
						{
							ai[2] += 1f;
						}
						if (ai[2] >= 360f)
						{
							ai[2] = 0f;
							ai[3] = -2f;
							base.velocity.Y -= 3f;
						}
					}
					if (target >= 0 && !Main.player[target].dead && (Main.player[target].Center - base.Center).Length() > 800f)
					{
						ai[3] = -1f;
						ai[2] = 0f;
					}
				}
				if (Main.player[target].dead)
				{
					TargetClosest();
					if (Main.player[target].dead)
					{
						EncourageDespawn(1);
					}
				}
			}
			if (type == 419)
			{
				reflectsProjectiles = false;
				takenDamageMultiplier = 1f;
				int num37 = 6;
				int num38 = 10;
				float scaleFactor3 = 16f;
				if (ai[2] > 0f)
				{
					ai[2] -= 1f;
				}
				if (ai[2] == 0f)
				{
					if (((Main.player[target].Center.X < base.Center.X && direction < 0) || (Main.player[target].Center.X > base.Center.X && direction > 0)) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						ai[2] = -1f;
						netUpdate = true;
						TargetClosest();
					}
				}
				else
				{
					if (ai[2] < 0f && ai[2] > (float)(-num37))
					{
						ai[2] -= 1f;
						base.velocity.X *= 0.9f;
						return;
					}
					if (ai[2] == (float)(-num37))
					{
						ai[2] -= 1f;
						TargetClosest();
						Vector2 vec = DirectionTo(Main.player[target].Top + new Vector2(0f, -30f));
						if (vec.HasNaNs())
						{
							vec = Vector2.Normalize(new Vector2(spriteDirection, -1f));
						}
						base.velocity = vec * scaleFactor3;
						netUpdate = true;
						return;
					}
					if (ai[2] < (float)(-num37))
					{
						ai[2] -= 1f;
						if (base.velocity.Y == 0f)
						{
							ai[2] = 60f;
						}
						else if (ai[2] < (float)(-num37 - num38))
						{
							base.velocity.Y += 0.15f;
							if (base.velocity.Y > 24f)
							{
								base.velocity.Y = 24f;
							}
						}
						reflectsProjectiles = true;
						takenDamageMultiplier = 3f;
						if (justHit)
						{
							ai[2] = 60f;
							netUpdate = true;
						}
						return;
					}
				}
			}
			if (type == 415)
			{
				int num39 = 42;
				int num40 = 18;
				if (justHit)
				{
					ai[2] = 120f;
					netUpdate = true;
				}
				if (ai[2] > 0f)
				{
					ai[2] -= 1f;
				}
				if (ai[2] == 0f)
				{
					int num41 = 0;
					for (int n = 0; n < 200; n++)
					{
						if (Main.npc[n].active && Main.npc[n].type == 516)
						{
							num41++;
						}
					}
					if (num41 > 6)
					{
						ai[2] = 90f;
					}
					else if (((Main.player[target].Center.X < base.Center.X && direction < 0) || (Main.player[target].Center.X > base.Center.X && direction > 0)) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
					{
						ai[2] = -1f;
						netUpdate = true;
						TargetClosest();
					}
				}
				else if (ai[2] < 0f && ai[2] > (float)(-num39))
				{
					ai[2] -= 1f;
					if (ai[2] == (float)(-num39))
					{
						ai[2] = 180 + 30 * Main.rand.Next(10);
					}
					base.velocity.X *= 0.8f;
					if (ai[2] == (float)(-num40) || ai[2] == (float)(-num40 - 8) || ai[2] == (float)(-num40 - 16))
					{
						base.position += netOffset;
						for (int num42 = 0; num42 < 20; num42++)
						{
							Vector2 vector8 = base.Center + Vector2.UnitX * spriteDirection * 40f;
							Dust obj3 = Main.dust[Dust.NewDust(vector8, 0, 0, 259)];
							Vector2 vector9 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							obj3.position = vector8 + vector9 * 4f;
							obj3.velocity = vector9 * 2f + Vector2.UnitX * Main.rand.NextFloat() * spriteDirection * 3f;
							obj3.scale = 0.3f + vector9.X * (float)(-spriteDirection);
							obj3.fadeIn = 0.7f;
							obj3.noGravity = true;
						}
						base.position -= netOffset;
						if (base.velocity.X > -0.5f && base.velocity.X < 0.5f)
						{
							base.velocity.X = 0f;
						}
						if (Main.netMode != 1)
						{
							NewNPC((int)base.Center.X + spriteDirection * 45, (int)base.Center.Y + 8, 516, 0, 0f, 0f, 0f, 0f, target);
						}
					}
					return;
				}
			}
			if (type == 428)
			{
				localAI[0] += 1f;
				if (localAI[0] >= 300f)
				{
					int num43 = (int)base.Center.X / 16 - 1;
					int num44 = (int)base.Center.Y / 16 - 1;
					if (!Collision.SolidTiles(num43, num43 + 2, num44, num44 + 1) && Main.netMode != 1)
					{
						Transform(427);
						life = lifeMax;
						localAI[0] = 0f;
						return;
					}
				}
				int num45 = 0;
				num45 = ((localAI[0] < 60f) ? 16 : ((localAI[0] < 120f) ? 8 : ((localAI[0] < 180f) ? 4 : ((localAI[0] < 240f) ? 2 : ((!(localAI[0] < 300f)) ? 1 : 1)))));
				if (Main.rand.Next(num45) == 0)
				{
					base.position += netOffset;
					Dust dust4 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
					dust4.noGravity = true;
					dust4.scale = 1f;
					dust4.noLight = true;
					dust4.velocity = DirectionFrom(dust4.position) * dust4.velocity.Length();
					dust4.position -= dust4.velocity * 5f;
					dust4.position.X += direction * 6;
					dust4.position.Y += 4f;
					base.position -= netOffset;
				}
			}
			if (type == 427)
			{
				localAI[0] += 1f;
				localAI[0] += Math.Abs(base.velocity.X) / 2f;
				if (localAI[0] >= 1200f && Main.netMode != 1)
				{
					int num46 = (int)base.Center.X / 16 - 2;
					int num47 = (int)base.Center.Y / 16 - 3;
					if (!Collision.SolidTiles(num46, num46 + 4, num47, num47 + 4))
					{
						Transform(426);
						life = lifeMax;
						localAI[0] = 0f;
						return;
					}
				}
				int num48 = 0;
				num48 = ((localAI[0] < 360f) ? 32 : ((localAI[0] < 720f) ? 16 : ((localAI[0] < 1080f) ? 6 : ((localAI[0] < 1440f) ? 2 : ((!(localAI[0] < 1800f)) ? 1 : 1)))));
				if (Main.rand.Next(num48) == 0)
				{
					base.position += netOffset;
					Dust obj4 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
					obj4.noGravity = true;
					obj4.scale = 1f;
					obj4.noLight = true;
					base.position -= netOffset;
				}
			}
			if (type == 590)
			{
				base.position += netOffset;
				int num49 = (int)(base.position.Y + 6f) / 16;
				if (spriteDirection < 0)
				{
					int num50 = (int)(base.Center.X - 22f) / 16;
					Tile tileSafely = Framing.GetTileSafely(num50, num49);
					Tile tileSafely2 = Framing.GetTileSafely(num50 + 1, num49);
					if (WorldGen.InWorld(num50, num49) && tileSafely2.liquid == 0 && tileSafely.liquid == 0)
					{
						Lighting.AddLight(num50, num49, 1f, 0.95f, 0.8f);
						if (Main.rand.Next(30) == 0)
						{
							Dust.NewDust(new Vector2(base.Center.X - 22f, base.position.Y + 6f), 1, 1, 6);
						}
					}
				}
				else
				{
					int num51 = (int)(base.Center.X + 14f) / 16;
					Tile tileSafely3 = Framing.GetTileSafely(num51, num49);
					Tile tileSafely4 = Framing.GetTileSafely(num51 - 1, num49);
					if (WorldGen.InWorld(num51, num49) && tileSafely4.liquid == 0 && tileSafely3.liquid == 0)
					{
						Lighting.AddLight(num51, num49, 1f, 0.95f, 0.8f);
						if (Main.rand.Next(30) == 0)
						{
							Dust.NewDust(new Vector2(base.Center.X + 14f, base.position.Y + 6f), 1, 1, 6);
						}
					}
				}
				base.position -= netOffset;
			}
			else if (type == 591)
			{
				base.position += netOffset;
				if (!wet)
				{
					if (spriteDirection < 0)
					{
						Lighting.AddLight(new Vector2(base.Center.X - 36f, base.position.Y + 24f), 1f, 0.95f, 0.8f);
						if (ai[2] == 0f && Main.rand.Next(30) == 0)
						{
							Dust.NewDust(new Vector2(base.Center.X - 36f, base.position.Y + 24f), 1, 1, 6);
						}
					}
					else
					{
						Lighting.AddLight(new Vector2(base.Center.X + 28f, base.position.Y + 24f), 1f, 0.95f, 0.8f);
						if (ai[2] == 0f && Main.rand.Next(30) == 0)
						{
							Dust.NewDust(new Vector2(base.Center.X + 28f, base.position.Y + 24f), 1, 1, 6);
						}
					}
				}
				base.position -= netOffset;
			}
			bool flag5 = false;
			bool flag6 = false;
			if (base.velocity.X == 0f)
			{
				flag6 = true;
			}
			if (justHit)
			{
				flag6 = false;
			}
			if (Main.netMode != 1 && type == 198 && (double)life <= (double)lifeMax * 0.55)
			{
				Transform(199);
			}
			if (Main.netMode != 1 && type == 348 && (double)life <= (double)lifeMax * 0.55)
			{
				Transform(349);
			}
			int num52 = 60;
			if (type == 120)
			{
				num52 = 180;
				if (ai[3] == -120f)
				{
					base.velocity *= 0f;
					ai[3] = 0f;
					base.position += netOffset;
					SoundEngine.PlaySound(SoundID.Item8, base.position);
					Vector2 vector10 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num53 = oldPos[2].X + (float)width * 0.5f - vector10.X;
					float num54 = oldPos[2].Y + (float)height * 0.5f - vector10.Y;
					float num55 = (float)Math.Sqrt(num53 * num53 + num54 * num54);
					num55 = 2f / num55;
					num53 *= num55;
					num54 *= num55;
					for (int num56 = 0; num56 < 20; num56++)
					{
						int num57 = Dust.NewDust(base.position, width, height, 71, num53, num54, 200, default(Color), 2f);
						Main.dust[num57].noGravity = true;
						Main.dust[num57].velocity.X *= 2f;
					}
					for (int num58 = 0; num58 < 20; num58++)
					{
						int num59 = Dust.NewDust(oldPos[2], width, height, 71, 0f - num53, 0f - num54, 200, default(Color), 2f);
						Main.dust[num59].noGravity = true;
						Main.dust[num59].velocity.X *= 2f;
					}
					base.position -= netOffset;
				}
			}
			bool flag7 = false;
			bool flag8 = true;
			if (type == 343 || type == 47 || type == 67 || type == 109 || type == 110 || type == 111 || type == 120 || type == 163 || type == 164 || type == 239 || type == 168 || type == 199 || type == 206 || type == 214 || type == 215 || type == 216 || type == 217 || type == 218 || type == 219 || type == 220 || type == 226 || type == 243 || type == 251 || type == 257 || type == 258 || type == 290 || type == 291 || type == 292 || type == 293 || type == 305 || type == 306 || type == 307 || type == 308 || type == 309 || type == 348 || type == 349 || type == 350 || type == 351 || type == 379 || (type >= 430 && type <= 436) || type == 591 || type == 380 || type == 381 || type == 382 || type == 383 || type == 386 || type == 391 || (type >= 449 && type <= 452) || type == 466 || type == 464 || type == 166 || type == 469 || type == 468 || type == 471 || type == 470 || type == 480 || type == 481 || type == 482 || type == 411 || type == 424 || type == 409 || (type >= 494 && type <= 506) || type == 425 || type == 427 || type == 426 || type == 428 || type == 580 || type == 508 || type == 415 || type == 419 || type == 520 || (type >= 524 && type <= 527) || type == 528 || type == 529 || type == 530 || type == 532 || type == 582 || type == 624 || type == 631)
			{
				flag8 = false;
			}
			bool flag9 = false;
			int num60 = type;
			if (num60 == 425 || num60 == 471)
			{
				flag9 = true;
			}
			bool flag10 = true;
			switch (type)
			{
			case 110:
			case 111:
			case 206:
			case 214:
			case 215:
			case 216:
			case 291:
			case 292:
			case 293:
			case 350:
			case 379:
			case 380:
			case 381:
			case 382:
			case 409:
			case 411:
			case 424:
			case 426:
			case 466:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
			case 520:
				if (ai[2] > 0f)
				{
					flag10 = false;
				}
				break;
			}
			if (!flag9 && flag10)
			{
				if (base.velocity.Y == 0f && ((base.velocity.X > 0f && direction < 0) || (base.velocity.X < 0f && direction > 0)))
				{
					flag7 = true;
				}
				if (base.position.X == oldPosition.X || ai[3] >= (float)num52 || flag7)
				{
					ai[3] += 1f;
				}
				else if ((double)Math.Abs(base.velocity.X) > 0.9 && ai[3] > 0f)
				{
					ai[3] -= 1f;
				}
				if (ai[3] > (float)(num52 * 10))
				{
					ai[3] = 0f;
				}
				if (justHit)
				{
					ai[3] = 0f;
				}
				if (ai[3] == (float)num52)
				{
					netUpdate = true;
				}
				if (Main.player[target].Hitbox.Intersects(base.Hitbox))
				{
					ai[3] = 0f;
				}
			}
			if (type == 463 && Main.netMode != 1)
			{
				if (localAI[3] > 0f)
				{
					localAI[3] -= 1f;
				}
				if (justHit && localAI[3] <= 0f && Main.rand.Next(3) == 0)
				{
					localAI[3] = 30f;
					int num61 = Main.rand.Next(3, 6);
					int[] array = new int[num61];
					int num62 = 0;
					for (int num63 = 0; num63 < 255; num63++)
					{
						if (Main.player[num63].active && !Main.player[num63].dead && Collision.CanHitLine(base.position, width, height, Main.player[num63].position, Main.player[num63].width, Main.player[num63].height))
						{
							array[num62] = num63;
							num62++;
							if (num62 == num61)
							{
								break;
							}
						}
					}
					if (num62 > 1)
					{
						for (int num64 = 0; num64 < 100; num64++)
						{
							int num65 = Main.rand.Next(num62);
							int num66;
							for (num66 = num65; num66 == num65; num66 = Main.rand.Next(num62))
							{
							}
							int num67 = array[num65];
							array[num65] = array[num66];
							array[num66] = num67;
						}
					}
					Vector2 vector11 = new Vector2(-1f, -1f);
					for (int num68 = 0; num68 < num62; num68++)
					{
						Vector2 vector12 = Main.npc[array[num68]].Center - base.Center;
						vector12.Normalize();
						vector11 += vector12;
					}
					vector11.Normalize();
					for (int num69 = 0; num69 < num61; num69++)
					{
						float num70 = Main.rand.Next(8, 13);
						Vector2 vector13 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						vector13.Normalize();
						if (num62 > 0)
						{
							vector13 += vector11;
							vector13.Normalize();
						}
						vector13 *= num70;
						if (num62 > 0)
						{
							num62--;
							vector13 = Main.player[array[num62]].Center - base.Center;
							vector13.Normalize();
							vector13 *= num70;
						}
						Projectile.NewProjectile(base.Center.X, base.position.Y + (float)(width / 4), vector13.X, vector13.Y, 498, (int)((double)damage * 0.15), 1f);
					}
				}
			}
			if (type == 460)
			{
				if (base.velocity.Y < 0f - gravity || base.velocity.Y > gravity)
				{
					knockBackResist = 0f;
				}
				else
				{
					knockBackResist = 0.25f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				}
			}
			if (type == 469)
			{
				knockBackResist = 0.45f * Main.GameModeInfo.KnockbackToEnemiesMultiplier;
				if (ai[2] == 1f)
				{
					knockBackResist = 0f;
				}
				bool flag11 = false;
				int num71 = (int)base.Center.X / 16;
				int num72 = (int)base.Center.Y / 16;
				for (int num73 = num71 - 1; num73 <= num71 + 1; num73++)
				{
					for (int num74 = num72 - 1; num74 <= num72 + 1; num74++)
					{
						if (Main.tile[num73, num74] != null && Main.tile[num73, num74].wall > 0)
						{
							flag11 = true;
							break;
						}
					}
					if (flag11)
					{
						break;
					}
				}
				if (ai[2] == 0f && flag11)
				{
					if (base.velocity.Y == 0f)
					{
						flag = true;
						base.velocity.Y = -4.6f;
						base.velocity.X *= 1.3f;
					}
					else if (base.velocity.Y > 0f && !Main.player[target].dead)
					{
						ai[2] = 1f;
					}
				}
				if (flag11 && ai[2] == 1f && !Main.player[target].dead && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					Vector2 value8 = Main.player[target].Center - base.Center;
					float num75 = value8.Length();
					value8.Normalize();
					value8 *= 4.5f + num75 / 300f;
					base.velocity = (base.velocity * 29f + value8) / 30f;
					noGravity = true;
					ai[2] = 1f;
					return;
				}
				noGravity = false;
				ai[2] = 0f;
			}
			if (type == 462 && base.velocity.Y == 0f && (Main.player[target].Center - base.Center).Length() < 150f && Math.Abs(base.velocity.X) > 3f && ((base.velocity.X < 0f && base.Center.X > Main.player[target].Center.X) || (base.velocity.X > 0f && base.Center.X < Main.player[target].Center.X)))
			{
				flag = true;
				base.velocity.X *= 1.75f;
				base.velocity.Y -= 4.5f;
				if (base.Center.Y - Main.player[target].Center.Y > 20f)
				{
					base.velocity.Y -= 0.5f;
				}
				if (base.Center.Y - Main.player[target].Center.Y > 40f)
				{
					base.velocity.Y -= 1f;
				}
				if (base.Center.Y - Main.player[target].Center.Y > 80f)
				{
					base.velocity.Y -= 1.5f;
				}
				if (base.Center.Y - Main.player[target].Center.Y > 100f)
				{
					base.velocity.Y -= 1.5f;
				}
				if (Math.Abs(base.velocity.X) > 7f)
				{
					if (base.velocity.X < 0f)
					{
						base.velocity.X = -7f;
					}
					else
					{
						base.velocity.X = 7f;
					}
				}
			}
			if (type == 624 && target < 255)
			{
				if (!Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					ai[3] = num52;
					directionY = -1;
					if (type == 624 && (!Main.dayTime || !WorldGen.InAPlaceWithWind(base.position, width, height)) && (base.Center - Main.player[target].Center).Length() > 500f)
					{
						base.velocity.X *= 0.95f;
						if ((double)base.velocity.X > -0.1 && (double)base.velocity.X < 0.1)
						{
							base.velocity.X = 0f;
						}
						return;
					}
				}
				else if (Main.player[target].Center.Y > base.Center.Y - 128f)
				{
					ai[3] = 0f;
				}
			}
			if (ai[3] < (float)num52 && DespawnEncouragement_AIStyle3_Fighters_NotDiscouraged(type, base.position, this))
			{
				if ((type == 3 || type == 591 || type == 590 || type == 331 || type == 332 || type == 21 || (type >= 449 && type <= 452) || type == 31 || type == 294 || type == 295 || type == 296 || type == 77 || type == 110 || type == 132 || type == 167 || type == 161 || type == 162 || type == 186 || type == 187 || type == 188 || type == 189 || type == 197 || type == 200 || type == 201 || type == 202 || type == 203 || type == 223 || type == 291 || type == 292 || type == 293 || type == 320 || type == 321 || type == 319 || type == 481 || type == 632 || type == 635) && Main.rand.Next(1000) == 0)
				{
					SoundEngine.PlaySound(14, (int)base.position.X, (int)base.position.Y);
				}
				if ((type == 489 || type == 586) && Main.rand.Next(800) == 0)
				{
					SoundEngine.PlaySound(14, (int)base.position.X, (int)base.position.Y, type);
				}
				if ((type == 78 || type == 79 || type == 80 || type == 630) && Main.rand.Next(500) == 0)
				{
					SoundEngine.PlaySound(26, (int)base.position.X, (int)base.position.Y);
				}
				if (type == 159 && Main.rand.Next(500) == 0)
				{
					SoundEngine.PlaySound(29, (int)base.position.X, (int)base.position.Y, 7);
				}
				if (type == 162 && Main.rand.Next(500) == 0)
				{
					SoundEngine.PlaySound(29, (int)base.position.X, (int)base.position.Y, 6);
				}
				if (type == 181 && Main.rand.Next(500) == 0)
				{
					SoundEngine.PlaySound(29, (int)base.position.X, (int)base.position.Y, 8);
				}
				if (type >= 269 && type <= 280 && Main.rand.Next(1000) == 0)
				{
					SoundEngine.PlaySound(14, (int)base.position.X, (int)base.position.Y);
				}
				TargetClosest();
				if (directionY > 0 && Main.player[target].Center.Y <= base.Bottom.Y)
				{
					directionY = -1;
				}
			}
			else if (!(ai[2] > 0f) || !DespawnEncouragement_AIStyle3_Fighters_CanBeBusyWithAction(type))
			{
				if (Main.dayTime && (double)(base.position.Y / 16f) < Main.worldSurface && type != 624 && type != 631)
				{
					EncourageDespawn(10);
				}
				if (base.velocity.X == 0f)
				{
					if (base.velocity.Y == 0f)
					{
						ai[0] += 1f;
						if (ai[0] >= 2f)
						{
							direction *= -1;
							spriteDirection = direction;
							ai[0] = 0f;
						}
					}
				}
				else
				{
					ai[0] = 0f;
				}
				if (direction == 0)
				{
					direction = 1;
				}
			}
			if (type == 159 || type == 349)
			{
				if (type == 159 && ((base.velocity.X > 0f && direction < 0) || (base.velocity.X < 0f && direction > 0)))
				{
					base.velocity.X *= 0.95f;
				}
				if (base.velocity.X < -6f || base.velocity.X > 6f)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.8f;
					}
				}
				else if (base.velocity.X < 6f && direction == 1)
				{
					if (base.velocity.Y == 0f && base.velocity.X < 0f)
					{
						base.velocity.X *= 0.99f;
					}
					base.velocity.X += 0.07f;
					if (base.velocity.X > 6f)
					{
						base.velocity.X = 6f;
					}
				}
				else if (base.velocity.X > -6f && direction == -1)
				{
					if (base.velocity.Y == 0f && base.velocity.X > 0f)
					{
						base.velocity.X *= 0.99f;
					}
					base.velocity.X -= 0.07f;
					if (base.velocity.X < -6f)
					{
						base.velocity.X = -6f;
					}
				}
			}
			else if (type == 199)
			{
				if (base.velocity.X < -4f || base.velocity.X > 4f)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.8f;
					}
				}
				else if (base.velocity.X < 4f && direction == 1)
				{
					if (base.velocity.Y == 0f && base.velocity.X < 0f)
					{
						base.velocity.X *= 0.8f;
					}
					base.velocity.X += 0.1f;
					if (base.velocity.X > 4f)
					{
						base.velocity.X = 4f;
					}
				}
				else if (base.velocity.X > -4f && direction == -1)
				{
					if (base.velocity.Y == 0f && base.velocity.X > 0f)
					{
						base.velocity.X *= 0.8f;
					}
					base.velocity.X -= 0.1f;
					if (base.velocity.X < -4f)
					{
						base.velocity.X = -4f;
					}
				}
			}
			else if (type == 120 || type == 166 || type == 213 || type == 258 || type == 528 || type == 529)
			{
				if (base.velocity.X < -3f || base.velocity.X > 3f)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.8f;
					}
				}
				else if (base.velocity.X < 3f && direction == 1)
				{
					if (base.velocity.Y == 0f && base.velocity.X < 0f)
					{
						base.velocity.X *= 0.99f;
					}
					base.velocity.X += 0.07f;
					if (base.velocity.X > 3f)
					{
						base.velocity.X = 3f;
					}
				}
				else if (base.velocity.X > -3f && direction == -1)
				{
					if (base.velocity.Y == 0f && base.velocity.X > 0f)
					{
						base.velocity.X *= 0.99f;
					}
					base.velocity.X -= 0.07f;
					if (base.velocity.X < -3f)
					{
						base.velocity.X = -3f;
					}
				}
			}
			else if (type == 461 || type == 27 || type == 77 || type == 104 || type == 163 || type == 162 || type == 196 || type == 197 || type == 212 || type == 257 || type == 326 || type == 343 || type == 348 || type == 351 || (type >= 524 && type <= 527) || type == 530)
			{
				if (base.velocity.X < -2f || base.velocity.X > 2f)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.8f;
					}
				}
				else if (base.velocity.X < 2f && direction == 1)
				{
					base.velocity.X += 0.07f;
					if (base.velocity.X > 2f)
					{
						base.velocity.X = 2f;
					}
				}
				else if (base.velocity.X > -2f && direction == -1)
				{
					base.velocity.X -= 0.07f;
					if (base.velocity.X < -2f)
					{
						base.velocity.X = -2f;
					}
				}
			}
			else if (type == 109)
			{
				if (base.velocity.X < -2f || base.velocity.X > 2f)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.8f;
					}
				}
				else if (base.velocity.X < 2f && direction == 1)
				{
					base.velocity.X += 0.04f;
					if (base.velocity.X > 2f)
					{
						base.velocity.X = 2f;
					}
				}
				else if (base.velocity.X > -2f && direction == -1)
				{
					base.velocity.X -= 0.04f;
					if (base.velocity.X < -2f)
					{
						base.velocity.X = -2f;
					}
				}
			}
			else if (type == 21 || type == 26 || type == 31 || type == 294 || type == 295 || type == 296 || type == 47 || type == 73 || type == 140 || type == 164 || type == 239 || type == 167 || type == 168 || type == 185 || type == 198 || type == 201 || type == 202 || type == 203 || type == 217 || type == 218 || type == 219 || type == 226 || type == 181 || type == 254 || type == 338 || type == 339 || type == 340 || type == 342 || type == 385 || type == 389 || type == 462 || type == 463 || type == 466 || type == 464 || type == 469 || type == 470 || type == 480 || type == 482 || type == 425 || type == 429 || type == 586 || type == 631 || type == 635)
			{
				float num76 = 1.5f;
				if (type == 294)
				{
					num76 = 2f;
				}
				else if (type == 295)
				{
					num76 = 1.75f;
				}
				else if (type == 296)
				{
					num76 = 1.25f;
				}
				else if (type == 201)
				{
					num76 = 1.1f;
				}
				else if (type == 202)
				{
					num76 = 0.9f;
				}
				else if (type == 203)
				{
					num76 = 1.2f;
				}
				else if (type == 338)
				{
					num76 = 1.75f;
				}
				else if (type == 339)
				{
					num76 = 1.25f;
				}
				else if (type == 340)
				{
					num76 = 2f;
				}
				else if (type == 385)
				{
					num76 = 1.8f;
				}
				else if (type == 389)
				{
					num76 = 2.25f;
				}
				else if (type == 462)
				{
					num76 = 4f;
				}
				else if (type == 463)
				{
					num76 = 0.75f;
				}
				else if (type == 466)
				{
					num76 = 3.75f;
				}
				else if (type == 469)
				{
					num76 = 3.25f;
				}
				else if (type == 480)
				{
					num76 = 1.5f + (1f - (float)life / (float)lifeMax) * 2f;
				}
				else if (type == 425)
				{
					num76 = 6f;
				}
				else if (type == 429)
				{
					num76 = 4f;
				}
				else if (type == 631)
				{
					num76 = 0.9f;
				}
				else if (type == 586)
				{
					num76 = 1.5f + (1f - (float)life / (float)lifeMax) * 3.5f;
				}
				if (type == 21 || type == 201 || type == 202 || type == 203 || type == 342 || type == 635)
				{
					num76 *= 1f + (1f - scale);
				}
				if (base.velocity.X < 0f - num76 || base.velocity.X > num76)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.8f;
					}
				}
				else if (base.velocity.X < num76 && direction == 1)
				{
					if (type == 466 && base.velocity.X < -2f)
					{
						base.velocity.X *= 0.9f;
					}
					if (type == 586 && base.velocity.Y == 0f && base.velocity.X < -1f)
					{
						base.velocity.X *= 0.9f;
					}
					base.velocity.X += 0.07f;
					if (base.velocity.X > num76)
					{
						base.velocity.X = num76;
					}
				}
				else if (base.velocity.X > 0f - num76 && direction == -1)
				{
					if (type == 466 && base.velocity.X > 2f)
					{
						base.velocity.X *= 0.9f;
					}
					if (type == 586 && base.velocity.Y == 0f && base.velocity.X > 1f)
					{
						base.velocity.X *= 0.9f;
					}
					base.velocity.X -= 0.07f;
					if (base.velocity.X < 0f - num76)
					{
						base.velocity.X = 0f - num76;
					}
				}
				if (base.velocity.Y == 0f && type == 462 && ((direction > 0 && base.velocity.X < 0f) || (direction < 0 && base.velocity.X > 0f)))
				{
					base.velocity.X *= 0.9f;
				}
			}
			else if (type >= 269 && type <= 280)
			{
				float num77 = 1.5f;
				if (type == 269)
				{
					num77 = 2f;
				}
				if (type == 270)
				{
					num77 = 1f;
				}
				if (type == 271)
				{
					num77 = 1.5f;
				}
				if (type == 272)
				{
					num77 = 3f;
				}
				if (type == 273)
				{
					num77 = 1.25f;
				}
				if (type == 274)
				{
					num77 = 3f;
				}
				if (type == 275)
				{
					num77 = 3.25f;
				}
				if (type == 276)
				{
					num77 = 2f;
				}
				if (type == 277)
				{
					num77 = 2.75f;
				}
				if (type == 278)
				{
					num77 = 1.8f;
				}
				if (type == 279)
				{
					num77 = 1.3f;
				}
				if (type == 280)
				{
					num77 = 2.5f;
				}
				num77 *= 1f + (1f - scale);
				if (base.velocity.X < 0f - num77 || base.velocity.X > num77)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.8f;
					}
				}
				else if (base.velocity.X < num77 && direction == 1)
				{
					base.velocity.X += 0.07f;
					if (base.velocity.X > num77)
					{
						base.velocity.X = num77;
					}
				}
				else if (base.velocity.X > 0f - num77 && direction == -1)
				{
					base.velocity.X -= 0.07f;
					if (base.velocity.X < 0f - num77)
					{
						base.velocity.X = 0f - num77;
					}
				}
			}
			else if (type >= 305 && type <= 314)
			{
				float num78 = 1.5f;
				if (type == 305 || type == 310)
				{
					num78 = 2f;
				}
				if (type == 306 || type == 311)
				{
					num78 = 1.25f;
				}
				if (type == 307 || type == 312)
				{
					num78 = 2.25f;
				}
				if (type == 308 || type == 313)
				{
					num78 = 1.5f;
				}
				if (type == 309 || type == 314)
				{
					num78 = 1f;
				}
				if (type < 310)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity.X *= 0.85f;
						if ((double)base.velocity.X > -0.3 && (double)base.velocity.X < 0.3)
						{
							flag = true;
							base.velocity.Y = -7f;
							base.velocity.X = num78 * (float)direction;
						}
					}
					else if (spriteDirection == direction)
					{
						base.velocity.X = (base.velocity.X * 10f + num78 * (float)direction) / 11f;
					}
				}
				else if (base.velocity.X < 0f - num78 || base.velocity.X > num78)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.8f;
					}
				}
				else if (base.velocity.X < num78 && direction == 1)
				{
					base.velocity.X += 0.07f;
					if (base.velocity.X > num78)
					{
						base.velocity.X = num78;
					}
				}
				else if (base.velocity.X > 0f - num78 && direction == -1)
				{
					base.velocity.X -= 0.07f;
					if (base.velocity.X < 0f - num78)
					{
						base.velocity.X = 0f - num78;
					}
				}
			}
			else if (type == 67 || type == 220 || type == 428)
			{
				if (base.velocity.X < -0.5f || base.velocity.X > 0.5f)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.7f;
					}
				}
				else if (base.velocity.X < 0.5f && direction == 1)
				{
					base.velocity.X += 0.03f;
					if (base.velocity.X > 0.5f)
					{
						base.velocity.X = 0.5f;
					}
				}
				else if (base.velocity.X > -0.5f && direction == -1)
				{
					base.velocity.X -= 0.03f;
					if (base.velocity.X < -0.5f)
					{
						base.velocity.X = -0.5f;
					}
				}
			}
			else if (type == 78 || type == 79 || type == 80 || type == 630)
			{
				float num79 = 1f;
				float num80 = 0.05f;
				if (life < lifeMax / 2)
				{
					num79 = 2f;
					num80 = 0.1f;
				}
				if (type == 79 || type == 630)
				{
					num79 *= 1.5f;
				}
				if (base.velocity.X < 0f - num79 || base.velocity.X > num79)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.7f;
					}
				}
				else if (base.velocity.X < num79 && direction == 1)
				{
					base.velocity.X += num80;
					if (base.velocity.X > num79)
					{
						base.velocity.X = num79;
					}
				}
				else if (base.velocity.X > 0f - num79 && direction == -1)
				{
					base.velocity.X -= num80;
					if (base.velocity.X < 0f - num79)
					{
						base.velocity.X = 0f - num79;
					}
				}
			}
			else if (type == 287)
			{
				float num81 = 5f;
				float num82 = 0.2f;
				if (base.velocity.X < 0f - num81 || base.velocity.X > num81)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.7f;
					}
				}
				else if (base.velocity.X < num81 && direction == 1)
				{
					base.velocity.X += num82;
					if (base.velocity.X > num81)
					{
						base.velocity.X = num81;
					}
				}
				else if (base.velocity.X > 0f - num81 && direction == -1)
				{
					base.velocity.X -= num82;
					if (base.velocity.X < 0f - num81)
					{
						base.velocity.X = 0f - num81;
					}
				}
			}
			else if (type == 243)
			{
				float num83 = 1f;
				float num84 = 0.07f;
				num83 += (1f - (float)life / (float)lifeMax) * 1.5f;
				num84 += (1f - (float)life / (float)lifeMax) * 0.15f;
				if (base.velocity.X < 0f - num83 || base.velocity.X > num83)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.7f;
					}
				}
				else if (base.velocity.X < num83 && direction == 1)
				{
					base.velocity.X += num84;
					if (base.velocity.X > num83)
					{
						base.velocity.X = num83;
					}
				}
				else if (base.velocity.X > 0f - num83 && direction == -1)
				{
					base.velocity.X -= num84;
					if (base.velocity.X < 0f - num83)
					{
						base.velocity.X = 0f - num83;
					}
				}
			}
			else if (type == 251)
			{
				float num85 = 1f;
				float num86 = 0.08f;
				num85 += (1f - (float)life / (float)lifeMax) * 2f;
				num86 += (1f - (float)life / (float)lifeMax) * 0.2f;
				if (base.velocity.X < 0f - num85 || base.velocity.X > num85)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.7f;
					}
				}
				else if (base.velocity.X < num85 && direction == 1)
				{
					base.velocity.X += num86;
					if (base.velocity.X > num85)
					{
						base.velocity.X = num85;
					}
				}
				else if (base.velocity.X > 0f - num85 && direction == -1)
				{
					base.velocity.X -= num86;
					if (base.velocity.X < 0f - num85)
					{
						base.velocity.X = 0f - num85;
					}
				}
			}
			else if (type == 386)
			{
				if (ai[2] > 0f)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity.X *= 0.8f;
					}
				}
				else
				{
					float num87 = 0.15f;
					float num88 = 1.5f;
					if (base.velocity.X < 0f - num88 || base.velocity.X > num88)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.7f;
						}
					}
					else if (base.velocity.X < num88 && direction == 1)
					{
						base.velocity.X += num87;
						if (base.velocity.X > num88)
						{
							base.velocity.X = num88;
						}
					}
					else if (base.velocity.X > 0f - num88 && direction == -1)
					{
						base.velocity.X -= num87;
						if (base.velocity.X < 0f - num88)
						{
							base.velocity.X = 0f - num88;
						}
					}
				}
			}
			else if (type == 460)
			{
				float num89 = 3f;
				float num90 = 0.1f;
				if (Math.Abs(base.velocity.X) > 2f)
				{
					num90 *= 0.8f;
				}
				if ((double)Math.Abs(base.velocity.X) > 2.5)
				{
					num90 *= 0.8f;
				}
				if (Math.Abs(base.velocity.X) > 3f)
				{
					num90 *= 0.8f;
				}
				if ((double)Math.Abs(base.velocity.X) > 3.5)
				{
					num90 *= 0.8f;
				}
				if (Math.Abs(base.velocity.X) > 4f)
				{
					num90 *= 0.8f;
				}
				if ((double)Math.Abs(base.velocity.X) > 4.5)
				{
					num90 *= 0.8f;
				}
				if (Math.Abs(base.velocity.X) > 5f)
				{
					num90 *= 0.8f;
				}
				if ((double)Math.Abs(base.velocity.X) > 5.5)
				{
					num90 *= 0.8f;
				}
				num89 += (1f - (float)life / (float)lifeMax) * 3f;
				if (base.velocity.X < 0f - num89 || base.velocity.X > num89)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.7f;
					}
				}
				else if (base.velocity.X < num89 && direction == 1)
				{
					if (base.velocity.X < 0f)
					{
						base.velocity.X *= 0.93f;
					}
					base.velocity.X += num90;
					if (base.velocity.X > num89)
					{
						base.velocity.X = num89;
					}
				}
				else if (base.velocity.X > 0f - num89 && direction == -1)
				{
					if (base.velocity.X > 0f)
					{
						base.velocity.X *= 0.93f;
					}
					base.velocity.X -= num90;
					if (base.velocity.X < 0f - num89)
					{
						base.velocity.X = 0f - num89;
					}
				}
			}
			else if (type == 508 || type == 580 || type == 582)
			{
				float num91 = 2.5f;
				float num92 = 10f;
				float num93 = Math.Abs(base.velocity.X);
				if (type == 582)
				{
					num91 = 2.5f;
					num92 = 7f;
					if (num93 > 2.75f)
					{
						num91 = 3.5f;
						num92 += 75f;
					}
					else if ((double)num93 > 2.25)
					{
						num91 = 2f;
						num92 += 55f;
					}
				}
				else if (num93 > 2.75f)
				{
					num91 = 3.5f;
					num92 += 80f;
				}
				else if ((double)num93 > 2.25)
				{
					num91 = 3f;
					num92 += 60f;
				}
				if ((double)Math.Abs(base.velocity.Y) < 0.5)
				{
					if (base.velocity.X > 0f && direction < 0)
					{
						base.velocity *= 0.95f;
					}
					if (base.velocity.X < 0f && direction > 0)
					{
						base.velocity *= 0.95f;
					}
				}
				if (Math.Abs(base.velocity.Y) > gravity)
				{
					num92 *= 3f;
				}
				if (base.velocity.X <= 0f && direction < 0)
				{
					base.velocity.X = (base.velocity.X * num92 - num91) / (num92 + 1f);
				}
				else if (base.velocity.X >= 0f && direction > 0)
				{
					base.velocity.X = (base.velocity.X * num92 + num91) / (num92 + 1f);
				}
				else if (Math.Abs(base.Center.X - Main.player[target].Center.X) > 20f && Math.Abs(base.velocity.Y) <= gravity)
				{
					base.velocity.X *= 0.99f;
					base.velocity.X += (float)direction * 0.025f;
				}
			}
			else if (type == 391 || type == 427 || type == 415 || type == 419 || type == 518 || type == 532)
			{
				float num94 = 5f;
				float num95 = 0.25f;
				float num96 = 0.7f;
				if (type == 427)
				{
					num94 = 6f;
					num95 = 0.2f;
					num96 = 0.8f;
				}
				else if (type == 415)
				{
					num94 = 4f;
					num95 = 0.1f;
					num96 = 0.95f;
				}
				else if (type == 419)
				{
					num94 = 6f;
					num95 = 0.15f;
					num96 = 0.85f;
				}
				else if (type == 518)
				{
					num94 = 5f;
					num95 = 0.1f;
					num96 = 0.95f;
				}
				else if (type == 532)
				{
					num94 = 5f;
					num95 = 0.15f;
					num96 = 0.98f;
				}
				if (base.velocity.X < 0f - num94 || base.velocity.X > num94)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= num96;
					}
				}
				else if (base.velocity.X < num94 && direction == 1)
				{
					base.velocity.X += num95;
					if (base.velocity.X > num94)
					{
						base.velocity.X = num94;
					}
				}
				else if (base.velocity.X > 0f - num94 && direction == -1)
				{
					base.velocity.X -= num95;
					if (base.velocity.X < 0f - num94)
					{
						base.velocity.X = 0f - num94;
					}
				}
			}
			else if ((type >= 430 && type <= 436) || type == 494 || type == 495 || type == 591)
			{
				if (ai[2] == 0f)
				{
					damage = defDamage;
					float num97 = 1f;
					num97 *= 1f + (1f - scale);
					if (base.velocity.X < 0f - num97 || base.velocity.X > num97)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= 0.8f;
						}
					}
					else if (base.velocity.X < num97 && direction == 1)
					{
						base.velocity.X += 0.07f;
						if (base.velocity.X > num97)
						{
							base.velocity.X = num97;
						}
					}
					else if (base.velocity.X > 0f - num97 && direction == -1)
					{
						base.velocity.X -= 0.07f;
						if (base.velocity.X < 0f - num97)
						{
							base.velocity.X = 0f - num97;
						}
					}
					if (base.velocity.Y == 0f && (!Main.dayTime || (double)base.position.Y > Main.worldSurface * 16.0) && !Main.player[target].dead)
					{
						Vector2 vector14 = base.Center - Main.player[target].Center;
						int num98 = 50;
						if (type >= 494 && type <= 495)
						{
							num98 = 42;
						}
						if (vector14.Length() < (float)num98 && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
						{
							base.velocity.X *= 0.7f;
							ai[2] = 1f;
						}
					}
				}
				else
				{
					damage = (int)((double)defDamage * 1.5);
					ai[3] = 1f;
					base.velocity.X *= 0.9f;
					if ((double)Math.Abs(base.velocity.X) < 0.1)
					{
						base.velocity.X = 0f;
					}
					ai[2] += 1f;
					if (ai[2] >= 20f || base.velocity.Y != 0f || (Main.dayTime && (double)base.position.Y < Main.worldSurface * 16.0))
					{
						ai[2] = 0f;
					}
				}
			}
			else if (type != 110 && type != 111 && type != 206 && type != 214 && type != 215 && type != 216 && type != 290 && type != 291 && type != 292 && type != 293 && type != 350 && type != 379 && type != 380 && type != 381 && type != 382 && (type < 449 || type > 452) && type != 468 && type != 481 && type != 411 && type != 409 && (type < 498 || type > 506) && type != 424 && type != 426 && type != 520)
			{
				float num99 = 1f;
				if (type == 624)
				{
					num99 = 2.5f;
				}
				if (type == 186)
				{
					num99 = 1.1f;
				}
				if (type == 187)
				{
					num99 = 0.9f;
				}
				if (type == 188)
				{
					num99 = 1.2f;
				}
				if (type == 189)
				{
					num99 = 0.8f;
				}
				if (type == 132)
				{
					num99 = 0.95f;
				}
				if (type == 200)
				{
					num99 = 0.87f;
				}
				if (type == 223)
				{
					num99 = 1.05f;
				}
				if (type == 632)
				{
					num99 = 0.8f;
				}
				if (type == 489)
				{
					float num100 = (Main.player[target].Center - base.Center).Length();
					num100 *= 0.0025f;
					if ((double)num100 > 1.5)
					{
						num100 = 1.5f;
					}
					num99 = ((!Main.expertMode) ? (2.5f - num100) : (3f - num100));
					num99 *= 0.8f;
				}
				if (type == 489 || type == 3 || type == 132 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 331 || type == 332)
				{
					num99 *= 1f + (1f - scale);
				}
				if (base.velocity.X < 0f - num99 || base.velocity.X > num99)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= 0.8f;
					}
				}
				else if (base.velocity.X < num99 && direction == 1)
				{
					base.velocity.X += 0.07f;
					if (base.velocity.X > num99)
					{
						base.velocity.X = num99;
					}
				}
				else if (base.velocity.X > 0f - num99 && direction == -1)
				{
					base.velocity.X -= 0.07f;
					if (base.velocity.X < 0f - num99)
					{
						base.velocity.X = 0f - num99;
					}
				}
			}
			if (type >= 277 && type <= 280)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.2f, 0.1f, 0f);
			}
			else if (type == 520)
			{
				Lighting.AddLight(base.Top + new Vector2(0f, 20f), 0.3f, 0.3f, 0.7f);
			}
			else if (type == 525)
			{
				Vector3 rgb = new Vector3(0.7f, 1f, 0.2f) * 0.5f;
				Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb);
			}
			else if (type == 526)
			{
				Vector3 rgb2 = new Vector3(1f, 1f, 0.5f) * 0.4f;
				Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb2);
			}
			else if (type == 527)
			{
				Vector3 rgb3 = new Vector3(0.6f, 0.3f, 1f) * 0.4f;
				Lighting.AddLight(base.Top + new Vector2(0f, 15f), rgb3);
			}
			else if (type == 415)
			{
				hide = false;
				for (int num101 = 0; num101 < 200; num101++)
				{
					if (Main.npc[num101].active && Main.npc[num101].type == 416 && Main.npc[num101].ai[0] == (float)whoAmI)
					{
						hide = true;
						break;
					}
				}
			}
			else if (type == 258)
			{
				if (base.velocity.Y != 0f)
				{
					TargetClosest();
					spriteDirection = direction;
					if (Main.player[target].Center.X < base.position.X && base.velocity.X > 0f)
					{
						base.velocity.X *= 0.95f;
					}
					else if (Main.player[target].Center.X > base.position.X + (float)width && base.velocity.X < 0f)
					{
						base.velocity.X *= 0.95f;
					}
					if (Main.player[target].Center.X < base.position.X && base.velocity.X > -5f)
					{
						base.velocity.X -= 0.1f;
					}
					else if (Main.player[target].Center.X > base.position.X + (float)width && base.velocity.X < 5f)
					{
						base.velocity.X += 0.1f;
					}
				}
				else if (Main.player[target].Center.Y + 50f < base.position.Y && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					flag = true;
					base.velocity.Y = -7f;
				}
			}
			else if (type == 425)
			{
				if (base.velocity.Y == 0f)
				{
					ai[2] = 0f;
				}
				if (base.velocity.Y != 0f && ai[2] == 1f)
				{
					TargetClosest();
					spriteDirection = -direction;
					if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						float num102 = Main.player[target].Center.X - (float)(direction * 400) - base.Center.X;
						float num103 = Main.player[target].Bottom.Y - base.Bottom.Y;
						if (num102 < 0f && base.velocity.X > 0f)
						{
							base.velocity.X *= 0.9f;
						}
						else if (num102 > 0f && base.velocity.X < 0f)
						{
							base.velocity.X *= 0.9f;
						}
						if (num102 < 0f && base.velocity.X > -5f)
						{
							base.velocity.X -= 0.1f;
						}
						else if (num102 > 0f && base.velocity.X < 5f)
						{
							base.velocity.X += 0.1f;
						}
						if (base.velocity.X > 6f)
						{
							base.velocity.X = 6f;
						}
						if (base.velocity.X < -6f)
						{
							base.velocity.X = -6f;
						}
						if (num103 < -20f && base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.8f;
						}
						else if (num103 > 20f && base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.8f;
						}
						if (num103 < -20f && base.velocity.Y > -5f)
						{
							base.velocity.Y -= 0.3f;
						}
						else if (num103 > 20f && base.velocity.Y < 5f)
						{
							base.velocity.Y += 0.3f;
						}
					}
					if (Main.rand.Next(3) == 0)
					{
						base.position += netOffset;
						Vector2 position2 = base.Center + new Vector2(direction * -14, -8f) - Vector2.One * 4f;
						Vector2 velocity = new Vector2(direction * -6, 12f) * 0.2f + Utils.RandomVector2(Main.rand, -1f, 1f) * 0.1f;
						Dust obj5 = Main.dust[Dust.NewDust(position2, 8, 8, 229, velocity.X, velocity.Y, 100, Color.Transparent, 1f + Main.rand.NextFloat() * 0.5f)];
						obj5.noGravity = true;
						obj5.velocity = velocity;
						obj5.customData = this;
						base.position -= netOffset;
					}
					for (int num104 = 0; num104 < 200; num104++)
					{
						if (num104 != whoAmI && Main.npc[num104].active && Main.npc[num104].type == type && Math.Abs(base.position.X - Main.npc[num104].position.X) + Math.Abs(base.position.Y - Main.npc[num104].position.Y) < (float)width)
						{
							if (base.position.X < Main.npc[num104].position.X)
							{
								base.velocity.X -= 0.05f;
							}
							else
							{
								base.velocity.X += 0.05f;
							}
							if (base.position.Y < Main.npc[num104].position.Y)
							{
								base.velocity.Y -= 0.05f;
							}
							else
							{
								base.velocity.Y += 0.05f;
							}
						}
					}
				}
				else if (Main.player[target].Center.Y + 100f < base.position.Y && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					flag = true;
					base.velocity.Y = -5f;
					ai[2] = 1f;
				}
				if (Main.netMode != 1)
				{
					localAI[2] += 1f;
					if (localAI[2] >= (float)(360 + Main.rand.Next(360)) && Distance(Main.player[target].Center) < 400f && Math.Abs(DirectionTo(Main.player[target].Center).Y) < 0.5f && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						localAI[2] = 0f;
						Vector2 vector15 = base.Center + new Vector2(direction * 30, 2f);
						Vector2 vector16 = DirectionTo(Main.player[target].Center) * 7f;
						if (vector16.HasNaNs())
						{
							vector16 = new Vector2(direction * 8, 0f);
						}
						int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(75f, 50f);
						for (int num105 = 0; num105 < 4; num105++)
						{
							Vector2 vector17 = vector16 + Utils.RandomVector2(Main.rand, -0.8f, 0.8f);
							Projectile.NewProjectile(vector15.X, vector15.Y, vector17.X, vector17.Y, 577, attackDamage_ForProjectiles, 1f, Main.myPlayer);
						}
					}
				}
			}
			else if (type == 427)
			{
				if (base.velocity.Y == 0f)
				{
					ai[2] = 0f;
					rotation = 0f;
				}
				else
				{
					rotation = base.velocity.X * 0.1f;
				}
				if (base.velocity.Y != 0f && ai[2] == 1f)
				{
					TargetClosest();
					spriteDirection = -direction;
					if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						float num106 = Main.player[target].Center.X - base.Center.X;
						float num107 = Main.player[target].Center.Y - base.Center.Y;
						if (num106 < 0f && base.velocity.X > 0f)
						{
							base.velocity.X *= 0.98f;
						}
						else if (num106 > 0f && base.velocity.X < 0f)
						{
							base.velocity.X *= 0.98f;
						}
						if (num106 < -20f && base.velocity.X > -6f)
						{
							base.velocity.X -= 0.015f;
						}
						else if (num106 > 20f && base.velocity.X < 6f)
						{
							base.velocity.X += 0.015f;
						}
						if (base.velocity.X > 6f)
						{
							base.velocity.X = 6f;
						}
						if (base.velocity.X < -6f)
						{
							base.velocity.X = -6f;
						}
						if (num107 < -20f && base.velocity.Y > 0f)
						{
							base.velocity.Y *= 0.98f;
						}
						else if (num107 > 20f && base.velocity.Y < 0f)
						{
							base.velocity.Y *= 0.98f;
						}
						if (num107 < -20f && base.velocity.Y > -6f)
						{
							base.velocity.Y -= 0.15f;
						}
						else if (num107 > 20f && base.velocity.Y < 6f)
						{
							base.velocity.Y += 0.15f;
						}
					}
					for (int num108 = 0; num108 < 200; num108++)
					{
						if (num108 != whoAmI && Main.npc[num108].active && Main.npc[num108].type == type && Math.Abs(base.position.X - Main.npc[num108].position.X) + Math.Abs(base.position.Y - Main.npc[num108].position.Y) < (float)width)
						{
							if (base.position.X < Main.npc[num108].position.X)
							{
								base.velocity.X -= 0.05f;
							}
							else
							{
								base.velocity.X += 0.05f;
							}
							if (base.position.Y < Main.npc[num108].position.Y)
							{
								base.velocity.Y -= 0.05f;
							}
							else
							{
								base.velocity.Y += 0.05f;
							}
						}
					}
				}
				else if (Main.player[target].Center.Y + 100f < base.position.Y && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					flag = true;
					base.velocity.Y = -5f;
					ai[2] = 1f;
				}
			}
			else if (type == 426)
			{
				if (ai[1] > 0f && base.velocity.Y > 0f)
				{
					base.velocity.Y *= 0.85f;
					if (base.velocity.Y == 0f)
					{
						base.velocity.Y = -0.4f;
					}
				}
				if (base.velocity.Y != 0f)
				{
					TargetClosest();
					spriteDirection = direction;
					if (Collision.CanHit(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						float num109 = Main.player[target].Center.X - (float)(direction * 300) - base.Center.X;
						if (num109 < 40f && base.velocity.X > 0f)
						{
							base.velocity.X *= 0.98f;
						}
						else if (num109 > 40f && base.velocity.X < 0f)
						{
							base.velocity.X *= 0.98f;
						}
						if (num109 < 40f && base.velocity.X > -5f)
						{
							base.velocity.X -= 0.2f;
						}
						else if (num109 > 40f && base.velocity.X < 5f)
						{
							base.velocity.X += 0.2f;
						}
						if (base.velocity.X > 6f)
						{
							base.velocity.X = 6f;
						}
						if (base.velocity.X < -6f)
						{
							base.velocity.X = -6f;
						}
					}
				}
				else if (Main.player[target].Center.Y + 100f < base.position.Y && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					flag = true;
					base.velocity.Y = -6f;
				}
				for (int num110 = 0; num110 < 200; num110++)
				{
					if (num110 != whoAmI && Main.npc[num110].active && Main.npc[num110].type == type && Math.Abs(base.position.X - Main.npc[num110].position.X) + Math.Abs(base.position.Y - Main.npc[num110].position.Y) < (float)width)
					{
						if (base.position.X < Main.npc[num110].position.X)
						{
							base.velocity.X -= 0.1f;
						}
						else
						{
							base.velocity.X += 0.1f;
						}
						if (base.position.Y < Main.npc[num110].position.Y)
						{
							base.velocity.Y -= 0.1f;
						}
						else
						{
							base.velocity.Y += 0.1f;
						}
					}
				}
				if (Main.rand.Next(6) == 0 && ai[1] <= 20f)
				{
					base.position += netOffset;
					Dust obj6 = Main.dust[Dust.NewDust(base.Center + new Vector2((spriteDirection == 1) ? 8 : (-20), -20f), 8, 8, 229, base.velocity.X, base.velocity.Y, 100)];
					obj6.velocity = obj6.velocity / 4f + base.velocity / 2f;
					obj6.scale = 0.6f;
					obj6.noLight = true;
					base.position -= netOffset;
				}
				if (ai[1] >= 57f)
				{
					base.position += netOffset;
					int num111 = Utils.SelectRandom<int>(Main.rand, 161, 229);
					Dust obj7 = Main.dust[Dust.NewDust(base.Center + new Vector2((spriteDirection == 1) ? 8 : (-20), -20f), 8, 8, num111, base.velocity.X, base.velocity.Y, 100)];
					obj7.velocity = obj7.velocity / 4f + DirectionTo(Main.player[target].Top);
					obj7.scale = 1.2f;
					obj7.noLight = true;
					base.position -= netOffset;
				}
				if (Main.rand.Next(6) == 0)
				{
					base.position += netOffset;
					Dust dust5 = Main.dust[Dust.NewDust(base.Center, 2, 2, 229)];
					dust5.position = base.Center + new Vector2((spriteDirection == 1) ? 26 : (-26), 24f);
					dust5.velocity.X = 0f;
					if (dust5.velocity.Y < 0f)
					{
						dust5.velocity.Y = 0f;
					}
					dust5.noGravity = true;
					dust5.scale = 1f;
					dust5.noLight = true;
					base.position -= netOffset;
				}
			}
			else if (type == 185)
			{
				if (base.velocity.Y == 0f)
				{
					rotation = 0f;
					localAI[0] = 0f;
				}
				else if (localAI[0] == 1f)
				{
					rotation += base.velocity.X * 0.05f;
				}
			}
			else if (type == 428)
			{
				if (base.velocity.Y == 0f)
				{
					rotation = 0f;
				}
				else
				{
					rotation += base.velocity.X * 0.08f;
				}
			}
			if (type == 159 && Main.netMode != 1)
			{
				Vector2 vector18 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num112 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector18.X;
				float num113 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector18.Y;
				if ((float)Math.Sqrt(num112 * num112 + num113 * num113) > 300f)
				{
					Transform(158);
				}
			}
			if (Main.netMode != 1)
			{
				if (Main.expertMode && target >= 0 && (type == 163 || type == 238) && Collision.CanHit(base.Center, 1, 1, Main.player[target].Center, 1, 1))
				{
					localAI[0] += 1f;
					if (justHit)
					{
						localAI[0] -= Main.rand.Next(20, 60);
						if (localAI[0] < 0f)
						{
							localAI[0] = 0f;
						}
					}
					if (localAI[0] > (float)Main.rand.Next(180, 900))
					{
						localAI[0] = 0f;
						Vector2 vector19 = Main.player[target].Center - base.Center;
						vector19.Normalize();
						vector19 *= 8f;
						int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(18f, 18f);
						Projectile.NewProjectile(base.Center.X, base.Center.Y, vector19.X, vector19.Y, 472, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
					}
				}
				if (base.velocity.Y == 0f)
				{
					int num114 = -1;
					switch (type)
					{
					case 164:
						num114 = 165;
						break;
					case 236:
						num114 = 237;
						break;
					case 163:
						num114 = 238;
						break;
					case 239:
						num114 = 240;
						break;
					case 530:
						num114 = 531;
						break;
					}
					if (num114 != -1 && NPCCanStickToWalls())
					{
						Transform(num114);
					}
				}
			}
			if (type == 243)
			{
				if (justHit && Main.rand.Next(3) == 0)
				{
					ai[2] -= Main.rand.Next(30);
				}
				if (ai[2] < 0f)
				{
					ai[2] = 0f;
				}
				if (confused)
				{
					ai[2] = 0f;
				}
				ai[2] += 1f;
				float num115 = Main.rand.Next(30, 900);
				num115 *= (float)life / (float)lifeMax;
				num115 += 30f;
				if (Main.netMode != 1 && ai[2] >= num115 && base.velocity.Y == 0f && !Main.player[target].dead && !Main.player[target].frozen && ((direction > 0 && base.Center.X < Main.player[target].Center.X) || (direction < 0 && base.Center.X > Main.player[target].Center.X)) && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					Vector2 vector20 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + 20f);
					vector20.X += 10 * direction;
					float num116 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector20.X;
					float num117 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector20.Y;
					num116 += (float)Main.rand.Next(-40, 41);
					num117 += (float)Main.rand.Next(-40, 41);
					float num118 = (float)Math.Sqrt(num116 * num116 + num117 * num117);
					netUpdate = true;
					num118 = 15f / num118;
					num116 *= num118;
					num117 *= num118;
					int num119 = 32;
					int num120 = 257;
					vector20.X += num116 * 3f;
					vector20.Y += num117 * 3f;
					Projectile.NewProjectile(vector20.X, vector20.Y, num116, num117, num120, num119, 0f, Main.myPlayer);
					ai[2] = 0f;
				}
			}
			if (type == 251)
			{
				if (justHit)
				{
					ai[2] -= Main.rand.Next(30);
				}
				if (ai[2] < 0f)
				{
					ai[2] = 0f;
				}
				if (confused)
				{
					ai[2] = 0f;
				}
				ai[2] += 1f;
				float num121 = Main.rand.Next(60, 1800);
				num121 *= (float)life / (float)lifeMax;
				num121 += 15f;
				if (Main.netMode != 1 && ai[2] >= num121 && base.velocity.Y == 0f && !Main.player[target].dead && !Main.player[target].frozen && ((direction > 0 && base.Center.X < Main.player[target].Center.X) || (direction < 0 && base.Center.X > Main.player[target].Center.X)) && Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height))
				{
					Vector2 vector21 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + 12f);
					vector21.X += 6 * direction;
					float num122 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector21.X;
					float num123 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector21.Y;
					num122 += (float)Main.rand.Next(-40, 41);
					num123 += (float)Main.rand.Next(-30, 0);
					float num124 = (float)Math.Sqrt(num122 * num122 + num123 * num123);
					netUpdate = true;
					num124 = 15f / num124;
					num122 *= num124;
					num123 *= num124;
					int num125 = 30;
					int num126 = 83;
					vector21.X += num122 * 3f;
					vector21.Y += num123 * 3f;
					Projectile.NewProjectile(vector21.X, vector21.Y, num122, num123, num126, num125, 0f, Main.myPlayer);
					ai[2] = 0f;
				}
			}
			if (type == 386)
			{
				if (confused)
				{
					ai[2] = -60f;
				}
				else
				{
					if (ai[2] < 60f)
					{
						ai[2] += 1f;
					}
					if (ai[2] > 0f && CountNPCS(387) >= 4 * CountNPCS(386))
					{
						ai[2] = 0f;
					}
					if (justHit)
					{
						ai[2] = -30f;
					}
					if (ai[2] == 30f)
					{
						int num127 = (int)base.position.X / 16;
						int num128 = (int)base.position.Y / 16;
						int num129 = (int)base.position.X / 16;
						int num130 = (int)base.position.Y / 16;
						int num131 = 5;
						int num132 = 0;
						bool flag12 = false;
						int num133 = 2;
						int num134 = 0;
						while (!flag12 && num132 < 100)
						{
							num132++;
							int num135 = Main.rand.Next(num127 - num131, num127 + num131);
							for (int num136 = Main.rand.Next(num128 - num131, num128 + num131); num136 < num128 + num131; num136++)
							{
								if ((num136 < num128 - num133 || num136 > num128 + num133 || num135 < num127 - num133 || num135 > num127 + num133) && (num136 < num130 - num134 || num136 > num130 + num134 || num135 < num129 - num134 || num135 > num129 + num134) && Main.tile[num135, num136].nactive())
								{
									bool flag13 = true;
									if (Main.tile[num135, num136 - 1].lava())
									{
										flag13 = false;
									}
									if (flag13 && Main.tileSolid[Main.tile[num135, num136].type] && !Collision.SolidTiles(num135 - 1, num135 + 1, num136 - 4, num136 - 1))
									{
										int num137 = NewNPC(num135 * 16 - width / 2, num136 * 16, 387);
										Main.npc[num137].position.Y = num136 * 16 - Main.npc[num137].height;
										flag12 = true;
										netUpdate = true;
										break;
									}
								}
							}
						}
					}
					if (ai[2] == 60f)
					{
						ai[2] = -120f;
					}
				}
			}
			if (type == 389)
			{
				if (confused)
				{
					ai[2] = -60f;
				}
				else
				{
					if (ai[2] < 20f)
					{
						ai[2] += 1f;
					}
					if (justHit)
					{
						ai[2] = -30f;
					}
					if (ai[2] == 20f && Main.netMode != 1)
					{
						ai[2] = -10 + Main.rand.Next(3) * -10;
						Projectile.NewProjectile(base.Center.X, base.Center.Y + 8f, direction * 6, 0f, 437, 25, 1f, Main.myPlayer);
					}
				}
			}
			if (type == 110 || type == 111 || type == 206 || type == 214 || type == 215 || type == 216 || type == 290 || type == 291 || type == 292 || type == 293 || type == 350 || type == 379 || type == 380 || type == 381 || type == 382 || (type >= 449 && type <= 452) || type == 468 || type == 481 || type == 411 || type == 409 || (type >= 498 && type <= 506) || type == 424 || type == 426 || type == 520)
			{
				bool flag14 = type == 381 || type == 382 || type == 520;
				bool flag15 = type == 426;
				bool flag16 = true;
				int num138 = -1;
				int num139 = -1;
				if (type == 411)
				{
					flag14 = true;
					num138 = 90;
					num139 = 90;
					if (ai[1] <= 150f)
					{
						flag16 = false;
					}
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				if (justHit)
				{
					ai[1] = 30f;
					ai[2] = 0f;
				}
				int num140 = 70;
				if (type == 379 || type == 380)
				{
					num140 = 80;
				}
				if (type == 381 || type == 382)
				{
					num140 = 80;
				}
				if (type == 520)
				{
					num140 = 15;
				}
				if (type == 350)
				{
					num140 = 110;
				}
				if (type == 291)
				{
					num140 = 200;
				}
				if (type == 292)
				{
					num140 = 120;
				}
				if (type == 293)
				{
					num140 = 90;
				}
				if (type == 111)
				{
					num140 = 180;
				}
				if (type == 206)
				{
					num140 = 50;
				}
				if (type == 481)
				{
					num140 = 100;
				}
				if (type == 214)
				{
					num140 = 40;
				}
				if (type == 215)
				{
					num140 = 80;
				}
				if (type == 290)
				{
					num140 = 30;
				}
				if (type == 411)
				{
					num140 = 300;
				}
				if (type == 409)
				{
					num140 = 60;
				}
				if (type == 424)
				{
					num140 = 180;
				}
				if (type == 426)
				{
					num140 = 60;
				}
				bool flag17 = false;
				if (type == 216)
				{
					if (localAI[2] >= 20f)
					{
						flag17 = true;
					}
					num140 = ((!flag17) ? 8 : 60);
				}
				int num141 = num140 / 2;
				if (type == 424)
				{
					num141 = num140 - 1;
				}
				if (type == 426)
				{
					num141 = num140 - 1;
				}
				if (confused)
				{
					ai[2] = 0f;
				}
				if (ai[2] > 0f)
				{
					if (flag16)
					{
						TargetClosest();
					}
					if (ai[1] == (float)num141)
					{
						if (type == 216)
						{
							localAI[2] += 1f;
						}
						float num142 = 11f;
						if (type == 111)
						{
							num142 = 9f;
						}
						if (type == 206)
						{
							num142 = 7f;
						}
						if (type == 290)
						{
							num142 = 9f;
						}
						if (type == 293)
						{
							num142 = 4f;
						}
						if (type == 214)
						{
							num142 = 14f;
						}
						if (type == 215)
						{
							num142 = 16f;
						}
						if (type == 382)
						{
							num142 = 7f;
						}
						if (type == 520)
						{
							num142 = 8f;
						}
						if (type == 409)
						{
							num142 = 4f;
						}
						if (type >= 449 && type <= 452)
						{
							num142 = 7f;
						}
						if (type == 481)
						{
							num142 = 8f;
						}
						if (type == 468)
						{
							num142 = 7.5f;
						}
						if (type == 411)
						{
							num142 = 1f;
						}
						if (type >= 498 && type <= 506)
						{
							num142 = 7f;
						}
						Vector2 vector22 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						if (type == 481)
						{
							vector22.Y -= 14f;
						}
						if (type == 206)
						{
							vector22.Y -= 10f;
						}
						if (type == 290)
						{
							vector22.Y -= 10f;
						}
						if (type == 381 || type == 382)
						{
							vector22.Y += 6f;
						}
						if (type == 520)
						{
							vector22.Y = base.position.Y + 20f;
						}
						if (type >= 498 && type <= 506)
						{
							vector22.Y -= 8f;
						}
						if (type == 426)
						{
							vector22 += new Vector2(spriteDirection * 2, -12f);
						}
						float num143 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector22.X;
						float num144 = Math.Abs(num143) * 0.1f;
						if (type == 291 || type == 292)
						{
							num144 = 0f;
						}
						if (type == 215)
						{
							num144 = Math.Abs(num143) * 0.08f;
						}
						if (type == 214 || (type == 216 && !flag17))
						{
							num144 = 0f;
						}
						if (type == 381 || type == 382 || type == 520)
						{
							num144 = 0f;
						}
						if (type >= 449 && type <= 452)
						{
							num144 = Math.Abs(num143) * (float)Main.rand.Next(10, 50) * 0.01f;
						}
						if (type == 468)
						{
							num144 = Math.Abs(num143) * (float)Main.rand.Next(10, 50) * 0.01f;
						}
						if (type == 481)
						{
							num144 = Math.Abs(num143) * (float)Main.rand.Next(-10, 11) * 0.0035f;
						}
						if (type >= 498 && type <= 506)
						{
							num144 = Math.Abs(num143) * (float)Main.rand.Next(1, 11) * 0.0025f;
						}
						float num145 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector22.Y - num144;
						if (type == 291)
						{
							num143 += (float)Main.rand.Next(-40, 41) * 0.2f;
							num145 += (float)Main.rand.Next(-40, 41) * 0.2f;
						}
						else if (type == 381 || type == 382 || type == 520)
						{
							num143 += (float)Main.rand.Next(-100, 101) * 0.4f;
							num145 += (float)Main.rand.Next(-100, 101) * 0.4f;
							num143 *= (float)Main.rand.Next(85, 116) * 0.01f;
							num145 *= (float)Main.rand.Next(85, 116) * 0.01f;
							if (type == 520)
							{
								num143 += (float)Main.rand.Next(-100, 101) * 0.6f;
								num145 += (float)Main.rand.Next(-100, 101) * 0.6f;
								num143 *= (float)Main.rand.Next(85, 116) * 0.015f;
								num145 *= (float)Main.rand.Next(85, 116) * 0.015f;
							}
						}
						else if (type == 481)
						{
							num143 += (float)Main.rand.Next(-40, 41) * 0.4f;
							num145 += (float)Main.rand.Next(-40, 41) * 0.4f;
						}
						else if (type >= 498 && type <= 506)
						{
							num143 += (float)Main.rand.Next(-40, 41) * 0.3f;
							num145 += (float)Main.rand.Next(-40, 41) * 0.3f;
						}
						else if (type != 292)
						{
							num143 += (float)Main.rand.Next(-40, 41);
							num145 += (float)Main.rand.Next(-40, 41);
						}
						float num146 = (float)Math.Sqrt(num143 * num143 + num145 * num145);
						netUpdate = true;
						num146 = num142 / num146;
						num143 *= num146;
						num145 *= num146;
						int num147 = 35;
						int num148 = 82;
						if (type == 111)
						{
							num147 = 11;
						}
						if (type == 206)
						{
							num147 = 37;
						}
						if (type == 379 || type == 380)
						{
							num147 = 40;
						}
						if (type == 350)
						{
							num147 = 45;
						}
						if (type == 468)
						{
							num147 = 50;
						}
						if (type == 111)
						{
							num148 = 81;
						}
						if (type == 379 || type == 380)
						{
							num148 = 81;
						}
						if (type == 381)
						{
							num148 = 436;
							num147 = 24;
						}
						if (type == 382)
						{
							num148 = 438;
							num147 = 30;
						}
						if (type == 520)
						{
							num148 = 592;
							num147 = 35;
						}
						if (type >= 449 && type <= 452)
						{
							num148 = 471;
							num147 = 15;
						}
						if (type >= 498 && type <= 506)
						{
							num148 = 572;
							num147 = 14;
						}
						if (type == 481)
						{
							num148 = 508;
							num147 = 18;
						}
						if (type == 206)
						{
							num148 = 177;
						}
						if (type == 468)
						{
							num148 = 501;
						}
						if (type == 411)
						{
							num148 = 537;
							num147 = GetAttackDamage_ForProjectiles(60f, 45f);
						}
						if (type == 424)
						{
							num148 = 573;
							num147 = GetAttackDamage_ForProjectiles(60f, 45f);
						}
						if (type == 426)
						{
							num148 = 581;
							num147 = GetAttackDamage_ForProjectiles(60f, 45f);
						}
						if (type == 291)
						{
							num148 = 302;
							num147 = 100;
						}
						if (type == 290)
						{
							num148 = 300;
							num147 = 60;
						}
						if (type == 293)
						{
							num148 = 303;
							num147 = 60;
						}
						if (type == 214)
						{
							num148 = 180;
							num147 = 25;
						}
						if (type == 215)
						{
							num148 = 82;
							num147 = 40;
						}
						if (type == 292)
						{
							num147 = 50;
							num148 = 180;
						}
						if (type == 216)
						{
							num148 = 180;
							num147 = 30;
							if (flag17)
							{
								num147 = 100;
								num148 = 240;
								localAI[2] = 0f;
							}
						}
						vector22.X += num143;
						vector22.Y += num145;
						if (type == 290)
						{
							num147 = GetAttackDamage_ForProjectiles(num147, (float)num147 * 0.75f);
						}
						if (type >= 381 && type <= 392)
						{
							num147 = GetAttackDamage_ForProjectiles(num147, (float)num147 * 0.8f);
						}
						if (Main.netMode != 1)
						{
							if (type == 292)
							{
								for (int num149 = 0; num149 < 4; num149++)
								{
									num143 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector22.X;
									num145 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector22.Y;
									num146 = (float)Math.Sqrt(num143 * num143 + num145 * num145);
									num146 = 12f / num146;
									num143 = (num143 += (float)Main.rand.Next(-40, 41));
									num145 = (num145 += (float)Main.rand.Next(-40, 41));
									num143 *= num146;
									num145 *= num146;
									Projectile.NewProjectile(vector22.X, vector22.Y, num143, num145, num148, num147, 0f, Main.myPlayer);
								}
							}
							else if (type == 411)
							{
								Projectile.NewProjectile(vector22.X, vector22.Y, num143, num145, num148, num147, 0f, Main.myPlayer, 0f, whoAmI);
							}
							else if (type == 424)
							{
								for (int num150 = 0; num150 < 4; num150++)
								{
									Projectile.NewProjectile(base.Center.X - (float)(spriteDirection * 4), base.Center.Y + 6f, (float)(-3 + 2 * num150) * 0.15f, (float)(-Main.rand.Next(0, 3)) * 0.2f - 0.1f, num148, num147, 0f, Main.myPlayer, 0f, whoAmI);
								}
							}
							else if (type == 409)
							{
								int num151 = NewNPC((int)base.Center.X, (int)base.Center.Y, 410, whoAmI);
								Main.npc[num151].velocity = new Vector2(num143, -6f + num145);
							}
							else
							{
								Projectile.NewProjectile(vector22.X, vector22.Y, num143, num145, num148, num147, 0f, Main.myPlayer);
							}
						}
						if (Math.Abs(num145) > Math.Abs(num143) * 2f)
						{
							if (num145 > 0f)
							{
								ai[2] = 1f;
							}
							else
							{
								ai[2] = 5f;
							}
						}
						else if (Math.Abs(num143) > Math.Abs(num145) * 2f)
						{
							ai[2] = 3f;
						}
						else if (num145 > 0f)
						{
							ai[2] = 2f;
						}
						else
						{
							ai[2] = 4f;
						}
					}
					if ((base.velocity.Y != 0f && !flag15) || ai[1] <= 0f)
					{
						ai[2] = 0f;
						ai[1] = 0f;
					}
					else if (!flag14 || (num138 != -1 && ai[1] >= (float)num138 && ai[1] < (float)(num138 + num139) && (!flag15 || base.velocity.Y == 0f)))
					{
						base.velocity.X *= 0.9f;
						spriteDirection = direction;
					}
				}
				if (type == 468 && !Main.eclipse)
				{
					flag14 = true;
				}
				else if ((ai[2] <= 0f || flag14) && (base.velocity.Y == 0f || flag15) && ai[1] <= 0f && !Main.player[target].dead)
				{
					bool flag18 = Collision.CanHit(base.position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					if (type == 520)
					{
						flag18 = Collision.CanHitLine(base.Top + new Vector2(0f, 20f), 0, 0, Main.player[target].position, Main.player[target].width, Main.player[target].height);
					}
					if (Main.player[target].stealth == 0f && Main.player[target].itemAnimation == 0)
					{
						flag18 = false;
					}
					if (flag18)
					{
						float num152 = 10f;
						Vector2 vector23 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num153 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector23.X;
						float num154 = Math.Abs(num153) * 0.1f;
						float num155 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - vector23.Y - num154;
						num153 += (float)Main.rand.Next(-40, 41);
						num155 += (float)Main.rand.Next(-40, 41);
						float num156 = (float)Math.Sqrt(num153 * num153 + num155 * num155);
						float num157 = 700f;
						if (type == 214)
						{
							num157 = 550f;
						}
						if (type == 215)
						{
							num157 = 800f;
						}
						if (type >= 498 && type <= 506)
						{
							num157 = 190f;
						}
						if (type >= 449 && type <= 452)
						{
							num157 = 200f;
						}
						if (type == 481)
						{
							num157 = 400f;
						}
						if (type == 468)
						{
							num157 = 400f;
						}
						if (num156 < num157)
						{
							netUpdate = true;
							base.velocity.X *= 0.5f;
							num156 = num152 / num156;
							num153 *= num156;
							num155 *= num156;
							ai[2] = 3f;
							ai[1] = num140;
							if (Math.Abs(num155) > Math.Abs(num153) * 2f)
							{
								if (num155 > 0f)
								{
									ai[2] = 1f;
								}
								else
								{
									ai[2] = 5f;
								}
							}
							else if (Math.Abs(num153) > Math.Abs(num155) * 2f)
							{
								ai[2] = 3f;
							}
							else if (num155 > 0f)
							{
								ai[2] = 2f;
							}
							else
							{
								ai[2] = 4f;
							}
						}
					}
				}
				if (ai[2] <= 0f || (flag14 && (num138 == -1 || !(ai[1] >= (float)num138) || !(ai[1] < (float)(num138 + num139)))))
				{
					float num158 = 1f;
					float num159 = 0.07f;
					float num160 = 0.8f;
					if (type == 214)
					{
						num158 = 2f;
						num159 = 0.09f;
					}
					else if (type == 215)
					{
						num158 = 1.5f;
						num159 = 0.08f;
					}
					else if (type == 381 || type == 382)
					{
						num158 = 2f;
						num159 = 0.5f;
					}
					else if (type == 520)
					{
						num158 = 4f;
						num159 = 1f;
						num160 = 0.7f;
					}
					else if (type == 411)
					{
						num158 = 2f;
						num159 = 0.5f;
					}
					else if (type == 409)
					{
						num158 = 2f;
						num159 = 0.5f;
					}
					bool flag19 = false;
					if ((type == 381 || type == 382) && Vector2.Distance(base.Center, Main.player[target].Center) < 300f && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						flag19 = true;
						ai[3] = 0f;
					}
					if (type == 520 && Vector2.Distance(base.Center, Main.player[target].Center) < 400f && Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
					{
						flag19 = true;
						ai[3] = 0f;
					}
					if (base.velocity.X < 0f - num158 || base.velocity.X > num158 || flag19)
					{
						if (base.velocity.Y == 0f)
						{
							base.velocity *= num160;
						}
					}
					else if (base.velocity.X < num158 && direction == 1)
					{
						base.velocity.X += num159;
						if (base.velocity.X > num158)
						{
							base.velocity.X = num158;
						}
					}
					else if (base.velocity.X > 0f - num158 && direction == -1)
					{
						base.velocity.X -= num159;
						if (base.velocity.X < 0f - num158)
						{
							base.velocity.X = 0f - num158;
						}
					}
				}
				if (type == 520)
				{
					localAI[2] += 1f;
					if (localAI[2] >= 6f)
					{
						localAI[2] = 0f;
						localAI[3] = Main.player[target].DirectionFrom(base.Top + new Vector2(0f, 20f)).ToRotation();
					}
				}
			}
			if (type == 109 && Main.netMode != 1 && !Main.player[target].dead)
			{
				if (justHit)
				{
					ai[2] = 0f;
				}
				ai[2] += 1f;
				if (ai[2] > 60f)
				{
					Vector2 vector24 = new Vector2(base.position.X + (float)width * 0.5f - (float)(direction * 24), base.position.Y + 4f);
					if (Main.rand.Next(5) != 0 || AnyNPCs(378))
					{
						int num161 = Main.rand.Next(3, 8) * direction;
						int num162 = Main.rand.Next(-8, -5);
						int num163 = Projectile.NewProjectile(vector24.X, vector24.Y, num161, num162, 75, 80, 0f, Main.myPlayer);
						Main.projectile[num163].timeLeft = 300;
						ai[2] = 0f;
					}
					else
					{
						ai[2] = -120f;
						int number = NewNPC((int)vector24.X, (int)vector24.Y, 378);
						NetMessage.SendData(23, -1, -1, null, number);
					}
				}
			}
			if (base.velocity.Y == 0f || flag)
			{
				int num164 = (int)(base.position.Y + (float)height + 7f) / 16;
				int num165 = (int)(base.position.Y - 9f) / 16;
				int num166 = (int)base.position.X / 16;
				int num167 = (int)(base.position.X + (float)width) / 16;
				int num168 = (int)(base.position.X + 8f) / 16;
				int num169 = (int)(base.position.X + (float)width - 8f) / 16;
				bool flag20 = false;
				for (int num170 = num168; num170 <= num169; num170++)
				{
					if (num170 >= num166 && num170 <= num167 && Main.tile[num170, num164] == null)
					{
						flag20 = true;
						continue;
					}
					if (Main.tile[num170, num165] != null && Main.tile[num170, num165].nactive() && Main.tileSolid[Main.tile[num170, num165].type])
					{
						flag5 = false;
						break;
					}
					if (!flag20 && num170 >= num166 && num170 <= num167 && Main.tile[num170, num164].nactive() && Main.tileSolid[Main.tile[num170, num164].type])
					{
						flag5 = true;
					}
				}
				if (!flag5 && base.velocity.Y < 0f)
				{
					base.velocity.Y = 0f;
				}
				if (flag20)
				{
					return;
				}
			}
			if (type == 428)
			{
				flag5 = false;
			}
			if (base.velocity.Y >= 0f && (type != 580 || directionY != 1))
			{
				int num171 = 0;
				if (base.velocity.X < 0f)
				{
					num171 = -1;
				}
				if (base.velocity.X > 0f)
				{
					num171 = 1;
				}
				Vector2 position3 = base.position;
				position3.X += base.velocity.X;
				int num172 = (int)((position3.X + (float)(width / 2) + (float)((width / 2 + 1) * num171)) / 16f);
				int num173 = (int)((position3.Y + (float)height - 1f) / 16f);
				if (WorldGen.InWorld(num172, num173, 4))
				{
					if (Main.tile[num172, num173] == null)
					{
						Main.tile[num172, num173] = new Tile();
					}
					if (Main.tile[num172, num173 - 1] == null)
					{
						Main.tile[num172, num173 - 1] = new Tile();
					}
					if (Main.tile[num172, num173 - 2] == null)
					{
						Main.tile[num172, num173 - 2] = new Tile();
					}
					if (Main.tile[num172, num173 - 3] == null)
					{
						Main.tile[num172, num173 - 3] = new Tile();
					}
					if (Main.tile[num172, num173 + 1] == null)
					{
						Main.tile[num172, num173 + 1] = new Tile();
					}
					if (Main.tile[num172 - num171, num173 - 3] == null)
					{
						Main.tile[num172 - num171, num173 - 3] = new Tile();
					}
					if ((float)(num172 * 16) < position3.X + (float)width && (float)(num172 * 16 + 16) > position3.X && ((Main.tile[num172, num173].nactive() && !Main.tile[num172, num173].topSlope() && !Main.tile[num172, num173 - 1].topSlope() && Main.tileSolid[Main.tile[num172, num173].type] && !Main.tileSolidTop[Main.tile[num172, num173].type]) || (Main.tile[num172, num173 - 1].halfBrick() && Main.tile[num172, num173 - 1].nactive())) && (!Main.tile[num172, num173 - 1].nactive() || !Main.tileSolid[Main.tile[num172, num173 - 1].type] || Main.tileSolidTop[Main.tile[num172, num173 - 1].type] || (Main.tile[num172, num173 - 1].halfBrick() && (!Main.tile[num172, num173 - 4].nactive() || !Main.tileSolid[Main.tile[num172, num173 - 4].type] || Main.tileSolidTop[Main.tile[num172, num173 - 4].type]))) && (!Main.tile[num172, num173 - 2].nactive() || !Main.tileSolid[Main.tile[num172, num173 - 2].type] || Main.tileSolidTop[Main.tile[num172, num173 - 2].type]) && (!Main.tile[num172, num173 - 3].nactive() || !Main.tileSolid[Main.tile[num172, num173 - 3].type] || Main.tileSolidTop[Main.tile[num172, num173 - 3].type]) && (!Main.tile[num172 - num171, num173 - 3].nactive() || !Main.tileSolid[Main.tile[num172 - num171, num173 - 3].type]))
					{
						float num174 = num173 * 16;
						if (Main.tile[num172, num173].halfBrick())
						{
							num174 += 8f;
						}
						if (Main.tile[num172, num173 - 1].halfBrick())
						{
							num174 -= 8f;
						}
						if (num174 < position3.Y + (float)height)
						{
							float num175 = position3.Y + (float)height - num174;
							float num176 = 16.1f;
							if (type == 163 || type == 164 || type == 236 || type == 239 || type == 530)
							{
								num176 += 8f;
							}
							if (num175 <= num176)
							{
								gfxOffY += base.position.Y + (float)height - num174;
								base.position.Y = num174 - (float)height;
								if (num175 < 9f)
								{
									stepSpeed = 1f;
								}
								else
								{
									stepSpeed = 2f;
								}
							}
						}
					}
				}
			}
			if (flag5)
			{
				int num177 = (int)((base.position.X + (float)(width / 2) + (float)(15 * direction)) / 16f);
				int num178 = (int)((base.position.Y + (float)height - 15f) / 16f);
				if (type == 109 || type == 163 || type == 164 || type == 199 || type == 236 || type == 239 || type == 257 || type == 258 || type == 290 || type == 391 || type == 425 || type == 427 || type == 426 || type == 580 || type == 508 || type == 415 || type == 530 || type == 532 || type == 582)
				{
					num177 = (int)((base.position.X + (float)(width / 2) + (float)((width / 2 + 16) * direction)) / 16f);
				}
				if (Main.tile[num177, num178] == null)
				{
					Main.tile[num177, num178] = new Tile();
				}
				if (Main.tile[num177, num178 - 1] == null)
				{
					Main.tile[num177, num178 - 1] = new Tile();
				}
				if (Main.tile[num177, num178 - 2] == null)
				{
					Main.tile[num177, num178 - 2] = new Tile();
				}
				if (Main.tile[num177, num178 - 3] == null)
				{
					Main.tile[num177, num178 - 3] = new Tile();
				}
				if (Main.tile[num177, num178 + 1] == null)
				{
					Main.tile[num177, num178 + 1] = new Tile();
				}
				if (Main.tile[num177 + direction, num178 - 1] == null)
				{
					Main.tile[num177 + direction, num178 - 1] = new Tile();
				}
				if (Main.tile[num177 + direction, num178 + 1] == null)
				{
					Main.tile[num177 + direction, num178 + 1] = new Tile();
				}
				if (Main.tile[num177 - direction, num178 + 1] == null)
				{
					Main.tile[num177 - direction, num178 + 1] = new Tile();
				}
				Main.tile[num177, num178 + 1].halfBrick();
				if (Main.tile[num177, num178 - 1].nactive() && (Main.tile[num177, num178 - 1].type == 10 || Main.tile[num177, num178 - 1].type == 388) && flag8)
				{
					ai[2] += 1f;
					ai[3] = 0f;
					if (ai[2] >= 60f)
					{
						bool flag21 = type == 3 || type == 430 || type == 590 || type == 331 || type == 332 || type == 132 || type == 161 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 320 || type == 321 || type == 319 || type == 21 || type == 324 || type == 323 || type == 322 || type == 44 || type == 196 || type == 167 || type == 77 || type == 197 || type == 202 || type == 203 || type == 449 || type == 450 || type == 451 || type == 452 || type == 481 || type == 201 || type == 635;
						bool flag22 = Main.player[target].ZoneGraveyard && Main.rand.Next(60) == 0;
						if ((!Main.bloodMoon || Main.getGoodWorld) && !flag22 && flag21)
						{
							ai[1] = 0f;
						}
						base.velocity.X = 0.5f * (float)(-direction);
						int num179 = 5;
						if (Main.tile[num177, num178 - 1].type == 388)
						{
							num179 = 2;
						}
						ai[1] += num179;
						if (type == 27)
						{
							ai[1] += 1f;
						}
						if (type == 31 || type == 294 || type == 295 || type == 296)
						{
							ai[1] += 6f;
						}
						ai[2] = 0f;
						bool flag23 = false;
						if (ai[1] >= 10f)
						{
							flag23 = true;
							ai[1] = 10f;
						}
						if (type == 460)
						{
							flag23 = true;
						}
						WorldGen.KillTile(num177, num178 - 1, fail: true);
						if ((Main.netMode != 1 || !flag23) && flag23 && Main.netMode != 1)
						{
							if (type == 26)
							{
								WorldGen.KillTile(num177, num178 - 1);
								if (Main.netMode == 2)
								{
									NetMessage.SendData(17, -1, -1, null, 0, num177, num178 - 1);
								}
							}
							else
							{
								if (Main.tile[num177, num178 - 1].type == 10)
								{
									bool flag24 = WorldGen.OpenDoor(num177, num178 - 1, direction);
									if (!flag24)
									{
										ai[3] = num52;
										netUpdate = true;
									}
									if (Main.netMode == 2 && flag24)
									{
										NetMessage.SendData(19, -1, -1, null, 0, num177, num178 - 1, direction);
									}
								}
								if (Main.tile[num177, num178 - 1].type == 388)
								{
									bool flag25 = WorldGen.ShiftTallGate(num177, num178 - 1, closing: false);
									if (!flag25)
									{
										ai[3] = num52;
										netUpdate = true;
									}
									if (Main.netMode == 2 && flag25)
									{
										NetMessage.SendData(19, -1, -1, null, 4, num177, num178 - 1);
									}
								}
							}
						}
					}
				}
				else
				{
					int num180 = spriteDirection;
					if (type == 425)
					{
						num180 *= -1;
					}
					if ((base.velocity.X < 0f && num180 == -1) || (base.velocity.X > 0f && num180 == 1))
					{
						if (height >= 32 && Main.tile[num177, num178 - 2].nactive() && Main.tileSolid[Main.tile[num177, num178 - 2].type])
						{
							if (Main.tile[num177, num178 - 3].nactive() && Main.tileSolid[Main.tile[num177, num178 - 3].type])
							{
								base.velocity.Y = -8f;
								netUpdate = true;
							}
							else
							{
								base.velocity.Y = -7f;
								netUpdate = true;
							}
						}
						else if (Main.tile[num177, num178 - 1].nactive() && Main.tileSolid[Main.tile[num177, num178 - 1].type])
						{
							if (type == 624)
							{
								base.velocity.Y = -8f;
								int num181 = (int)(base.position.Y + (float)height) / 16;
								if (WorldGen.SolidTile((int)base.Center.X / 16, num181 - 8))
								{
									direction *= -1;
									spriteDirection = direction;
									base.velocity.X = 3 * direction;
								}
							}
							else
							{
								base.velocity.Y = -6f;
							}
							netUpdate = true;
						}
						else if (base.position.Y + (float)height - (float)(num178 * 16) > 20f && Main.tile[num177, num178].nactive() && !Main.tile[num177, num178].topSlope() && Main.tileSolid[Main.tile[num177, num178].type])
						{
							base.velocity.Y = -5f;
							netUpdate = true;
						}
						else if (directionY < 0 && type != 67 && (!Main.tile[num177, num178 + 1].nactive() || !Main.tileSolid[Main.tile[num177, num178 + 1].type]) && (!Main.tile[num177 + direction, num178 + 1].nactive() || !Main.tileSolid[Main.tile[num177 + direction, num178 + 1].type]))
						{
							base.velocity.Y = -8f;
							base.velocity.X *= 1.5f;
							netUpdate = true;
						}
						else if (flag8)
						{
							ai[1] = 0f;
							ai[2] = 0f;
						}
						if (base.velocity.Y == 0f && flag6 && ai[3] == 1f)
						{
							base.velocity.Y = -5f;
						}
						if (base.velocity.Y == 0f && (Main.expertMode || type == 586) && Main.player[target].Bottom.Y < base.Top.Y && Math.Abs(base.Center.X - Main.player[target].Center.X) < (float)(Main.player[target].width * 3) && Collision.CanHit(this, Main.player[target]))
						{
							if (type == 586)
							{
								int num182 = (int)((base.Bottom.Y - 16f - Main.player[target].Bottom.Y) / 16f);
								if (num182 < 14 && Collision.CanHit(this, Main.player[target]))
								{
									if (num182 < 7)
									{
										base.velocity.Y = -8.8f;
									}
									else if (num182 < 8)
									{
										base.velocity.Y = -9.2f;
									}
									else if (num182 < 9)
									{
										base.velocity.Y = -9.7f;
									}
									else if (num182 < 10)
									{
										base.velocity.Y = -10.3f;
									}
									else if (num182 < 11)
									{
										base.velocity.Y = -10.6f;
									}
									else
									{
										base.velocity.Y = -11f;
									}
								}
							}
							if (base.velocity.Y == 0f)
							{
								int num183 = 6;
								if (Main.player[target].Bottom.Y > base.Top.Y - (float)(num183 * 16))
								{
									base.velocity.Y = -7.9f;
								}
								else
								{
									int num184 = (int)(base.Center.X / 16f);
									int num185 = (int)(base.Bottom.Y / 16f) - 1;
									for (int num186 = num185; num186 > num185 - num183; num186--)
									{
										if (Main.tile[num184, num186].nactive() && TileID.Sets.Platforms[Main.tile[num184, num186].type])
										{
											base.velocity.Y = -7.9f;
											break;
										}
									}
								}
							}
						}
					}
					if ((type == 31 || type == 294 || type == 295 || type == 296 || type == 47 || type == 77 || type == 104 || type == 168 || type == 196 || type == 385 || type == 389 || type == 464 || type == 470 || (type >= 524 && type <= 527)) && base.velocity.Y == 0f)
					{
						int num187 = 100;
						int num188 = 50;
						if (type == 586)
						{
							num187 = 150;
							num188 = 150;
						}
						if (Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < (float)num187 && Math.Abs(base.position.Y + (float)(height / 2) - (Main.player[target].position.Y + (float)(Main.player[target].height / 2))) < (float)num188 && ((direction > 0 && base.velocity.X >= 1f) || (direction < 0 && base.velocity.X <= -1f)))
						{
							if (type == 586)
							{
								base.velocity.X += direction;
								base.velocity.X *= 2f;
								if (base.velocity.X > 8f)
								{
									base.velocity.X = 8f;
								}
								if (base.velocity.X < -8f)
								{
									base.velocity.X = -8f;
								}
								base.velocity.Y = -4.5f;
								if (base.position.Y > Main.player[target].position.Y + 40f)
								{
									base.velocity.Y -= 2f;
								}
								if (base.position.Y > Main.player[target].position.Y + 80f)
								{
									base.velocity.Y -= 2f;
								}
								if (base.position.Y > Main.player[target].position.Y + 120f)
								{
									base.velocity.Y -= 2f;
								}
							}
							else
							{
								base.velocity.X *= 2f;
								if (base.velocity.X > 3f)
								{
									base.velocity.X = 3f;
								}
								if (base.velocity.X < -3f)
								{
									base.velocity.X = -3f;
								}
								base.velocity.Y = -4f;
							}
							netUpdate = true;
						}
					}
					if (type == 120 && base.velocity.Y < 0f)
					{
						base.velocity.Y *= 1.1f;
					}
					if (type == 287 && base.velocity.Y == 0f && Math.Abs(base.position.X + (float)(width / 2) - (Main.player[target].position.X + (float)(Main.player[target].width / 2))) < 150f && Math.Abs(base.position.Y + (float)(height / 2) - (Main.player[target].position.Y + (float)(Main.player[target].height / 2))) < 50f && ((direction > 0 && base.velocity.X >= 1f) || (direction < 0 && base.velocity.X <= -1f)))
					{
						base.velocity.X = 8 * direction;
						base.velocity.Y = -4f;
						netUpdate = true;
					}
					if (type == 287 && base.velocity.Y < 0f)
					{
						base.velocity.X *= 1.2f;
						base.velocity.Y *= 1.1f;
					}
					if (type == 460 && base.velocity.Y < 0f)
					{
						base.velocity.X *= 1.3f;
						base.velocity.Y *= 1.1f;
					}
				}
			}
			else if (flag8)
			{
				ai[1] = 0f;
				ai[2] = 0f;
			}
			if (Main.netMode == 1 || type != 120 || !(ai[3] >= (float)num52))
			{
				return;
			}
			int num189 = (int)Main.player[target].position.X / 16;
			int num190 = (int)Main.player[target].position.Y / 16;
			int num191 = (int)base.position.X / 16;
			int num192 = (int)base.position.Y / 16;
			int num193 = 20;
			int num194 = 0;
			bool flag26 = false;
			if (Math.Abs(base.position.X - Main.player[target].position.X) + Math.Abs(base.position.Y - Main.player[target].position.Y) > 2000f)
			{
				num194 = 100;
				flag26 = true;
			}
			while (!flag26 && num194 < 100)
			{
				num194++;
				int num195 = Main.rand.Next(num189 - num193, num189 + num193);
				for (int num196 = Main.rand.Next(num190 - num193, num190 + num193); num196 < num190 + num193; num196++)
				{
					if ((num196 < num190 - 4 || num196 > num190 + 4 || num195 < num189 - 4 || num195 > num189 + 4) && (num196 < num192 - 1 || num196 > num192 + 1 || num195 < num191 - 1 || num195 > num191 + 1) && Main.tile[num195, num196].nactive())
					{
						bool flag27 = true;
						if (type == 32 && Main.tile[num195, num196 - 1].wall == 0)
						{
							flag27 = false;
						}
						else if (Main.tile[num195, num196 - 1].lava())
						{
							flag27 = false;
						}
						if (flag27 && Main.tileSolid[Main.tile[num195, num196].type] && !Collision.SolidTiles(num195 - 1, num195 + 1, num196 - 4, num196 - 1))
						{
							base.position.X = num195 * 16 - width / 2;
							base.position.Y = num196 * 16 - height;
							netUpdate = true;
							ai[3] = -120f;
						}
					}
				}
			}
		}

		public static bool DespawnEncouragement_AIStyle3_Fighters_NotDiscouraged(int npcID, Vector2 position, NPC npcInstance)
		{
			if (!Main.eclipse && Main.dayTime && (npcInstance == null || !npcInstance.SpawnedFromStatue) && !((double)position.Y > Main.worldSurface * 16.0) && (npcInstance == null || !Main.player[npcInstance.target].ZoneGraveyard) && (!Main.snowMoon || (npcID != 343 && npcID != 350)) && (Main.invasionType != 1 || (npcID != 26 && npcID != 27 && npcID != 28 && npcID != 111 && npcID != 471)) && npcID != 73 && npcID != 624 && (npcID != 631 || !(npcInstance.ai[2] > 0f)) && (Main.invasionType != 3 || npcID < 212 || npcID > 216) && (Main.invasionType != 4 || (npcID != 381 && npcID != 382 && npcID != 383 && npcID != 385 && npcID != 386 && npcID != 389 && npcID != 391 && npcID != 520)) && npcID != 31 && npcID != 294 && npcID != 295 && npcID != 296 && npcID != 47 && npcID != 67 && npcID != 77 && npcID != 78 && npcID != 79 && npcID != 80 && npcID != 630 && npcID != 110 && npcID != 120 && npcID != 168 && npcID != 181 && npcID != 185 && npcID != 198 && npcID != 199 && npcID != 206 && npcID != 217 && npcID != 218 && npcID != 219 && npcID != 220 && npcID != 239 && npcID != 243 && npcID != 254 && npcID != 255 && npcID != 257 && npcID != 258 && npcID != 291 && npcID != 292 && npcID != 293 && npcID != 379 && npcID != 380 && npcID != 464 && npcID != 470 && npcID != 424 && (npcID != 411 || (npcInstance != null && !(npcInstance.ai[1] >= 180f) && !(npcInstance.ai[1] < 90f))))
			{
				switch (npcID)
				{
				default:
					if (npcID != 528 && npcID != 529 && npcID != 530)
					{
						return npcID == 532;
					}
					break;
				case 409:
				case 415:
				case 419:
				case 425:
				case 427:
				case 428:
				case 429:
				case 508:
				case 524:
				case 525:
				case 526:
				case 527:
				case 580:
				case 582:
					break;
				}
			}
			return true;
		}

		public static bool DespawnEncouragement_AIStyle3_Fighters_CanBeBusyWithAction(int npcID)
		{
			if (npcID != 110 && npcID != 111 && npcID != 206 && npcID != 216 && npcID != 214 && npcID != 215 && npcID != 291 && npcID != 292 && npcID != 293 && npcID != 350 && npcID != 381 && npcID != 382 && npcID != 383 && npcID != 385 && npcID != 386 && npcID != 389 && npcID != 391 && npcID != 469 && npcID != 166 && npcID != 466 && npcID != 471 && npcID != 411 && npcID != 409 && npcID != 424 && npcID != 425 && npcID != 426 && npcID != 415 && npcID != 419)
			{
				return npcID == 520;
			}
			return true;
		}

		private void AI_001_Slimes()
		{
			if (type == 1 && (ai[1] == 1f || ai[1] == 2f || ai[1] == 3f))
			{
				ai[1] = -1f;
			}
			if (type == 1 && ai[1] == 0f && Main.netMode != 1 && value > 0f)
			{
				ai[1] = -1f;
				if (Main.rand.Next(20) == 0)
				{
					int num = AI_001_Slimes_GenerateItemInsideBody(ai[0] == -999f);
					ai[1] = num;
					netUpdate = true;
				}
			}
			if (type == 1 && ai[0] == -999f)
			{
				frame.Y = 0;
				frameCounter = 0.0;
				rotation = 0f;
				return;
			}
			if (type == 244)
			{
				float num2 = (float)Main.DiscoR / 255f;
				float num3 = (float)Main.DiscoG / 255f;
				float num4 = (float)Main.DiscoB / 255f;
				num2 *= 1f;
				num3 *= 1f;
				num4 *= 1f;
				Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), num2, num3, num4);
				AI_001_SetRainbowSlimeColor();
			}
			bool flag = false;
			if (!Main.dayTime || life != lifeMax || (double)position.Y > Main.worldSurface * 16.0 || Main.slimeRain)
			{
				flag = true;
			}
			if (type == 81)
			{
				flag = true;
				if (Main.rand.Next(30) == 0)
				{
					position += netOffset;
					int num5 = Dust.NewDust(position, width, height, 14, 0f, 0f, alpha, color);
					Main.dust[num5].velocity *= 0.3f;
					position -= netOffset;
				}
			}
			if ((type == 377 || type == 446) && target != 255 && !Main.player[target].dead && Vector2.Distance(base.Center, Main.player[target].Center) <= 200f && !wet)
			{
				flag = true;
			}
			if (type == 183)
			{
				flag = true;
			}
			if (type == 304)
			{
				flag = true;
			}
			if (type == 244)
			{
				flag = true;
				ai[0] += 2f;
			}
			if (type == 147 && Main.rand.Next(10) == 0)
			{
				position += netOffset;
				int num6 = Dust.NewDust(position, width, height, 76);
				Main.dust[num6].noGravity = true;
				Main.dust[num6].velocity *= 0.1f;
				position -= netOffset;
			}
			if (type == 184)
			{
				if (Main.rand.Next(8) == 0)
				{
					position += netOffset;
					int num7 = Dust.NewDust(position - velocity, width, height, 76);
					Main.dust[num7].noGravity = true;
					Main.dust[num7].velocity *= 0.15f;
					position -= netOffset;
				}
				flag = true;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (!wet && !Main.player[target].npcTypeNoAggro[type])
				{
					Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num8 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector.X;
					float num9 = Main.player[target].position.Y - vector.Y;
					float num10 = (float)Math.Sqrt(num8 * num8 + num9 * num9);
					if (Main.expertMode && num10 < 120f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							for (int i = 0; i < 5; i++)
							{
								Vector2 vector2 = new Vector2(i - 2, -4f);
								vector2.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector2.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector2.Normalize();
								vector2 *= 4f + (float)Main.rand.Next(-50, 51) * 0.01f;
								int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(9f, 9f);
								Projectile.NewProjectile(vector.X, vector.Y, vector2.X, vector2.Y, 174, attackDamage_ForProjectiles, 0f, Main.myPlayer);
								localAI[0] = 30f;
							}
						}
					}
					else if (num10 < 200f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							num9 = Main.player[target].position.Y - vector.Y - (float)Main.rand.Next(0, 200);
							num10 = (float)Math.Sqrt(num8 * num8 + num9 * num9);
							num10 = 4.5f / num10;
							num8 *= num10;
							num9 *= num10;
							localAI[0] = 50f;
							Projectile.NewProjectile(vector.X, vector.Y, num8, num9, 174, 9, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (type == 535)
			{
				flag = true;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (!wet && !Main.player[target].npcTypeNoAggro[type])
				{
					Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num11 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector3.X;
					float num12 = Main.player[target].position.Y - vector3.Y;
					float num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
					if (Main.expertMode && num13 < 120f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							for (int j = 0; j < 5; j++)
							{
								Vector2 vector4 = new Vector2(j - 2, -4f);
								vector4.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector4.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector4.Normalize();
								vector4 *= 4f + (float)Main.rand.Next(-50, 51) * 0.01f;
								int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(9f, 9f);
								Projectile.NewProjectile(vector3.X, vector3.Y, vector4.X, vector4.Y, 605, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
								localAI[0] = 30f;
							}
						}
					}
					else if (num13 < 200f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							num12 = Main.player[target].position.Y - vector3.Y - (float)Main.rand.Next(0, 200);
							num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
							num13 = 4.5f / num13;
							num11 *= num13;
							num12 *= num13;
							localAI[0] = 50f;
							Projectile.NewProjectile(vector3.X, vector3.Y, num11, num12, 605, 9, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (type == 658)
			{
				flag = true;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (!wet && Main.player[target].active && !Main.player[target].dead && !Main.player[target].npcTypeNoAggro[type])
				{
					Player obj = Main.player[target];
					Vector2 center = base.Center;
					float num14 = obj.Center.X - center.X;
					float num15 = obj.Center.Y - center.Y;
					float num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
					int num17 = CountNPCS(658);
					if (Main.expertMode && num17 < 5 && Math.Abs(num14) < 500f && Math.Abs(num15) < 550f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							for (int k = 0; k < 3; k++)
							{
								Vector2 vector5 = new Vector2(k - 1, -4f);
								vector5.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector5.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.005f;
								vector5.Normalize();
								vector5 *= 6f + (float)Main.rand.Next(-50, 51) * 0.01f;
								if (num16 > 350f)
								{
									vector5 *= 2f;
								}
								else if (num16 > 250f)
								{
									vector5 *= 1.5f;
								}
								int attackDamage_ForProjectiles_MultiLerp = GetAttackDamage_ForProjectiles_MultiLerp(15f, 20f, 25f);
								Projectile.NewProjectile(center.X, center.Y, vector5.X, vector5.Y, 920, attackDamage_ForProjectiles_MultiLerp, 0f, Main.myPlayer);
								localAI[0] = 25f;
								if (num17 > 4)
								{
									break;
								}
							}
						}
					}
					else if (Math.Abs(num14) < 500f && Math.Abs(num15) < 550f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						float num18 = num16;
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							num15 = Main.player[target].position.Y - center.Y - (float)Main.rand.Next(0, 200);
							num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
							num16 = 4.5f / num16;
							num16 *= 2f;
							if (num18 > 350f)
							{
								num16 *= 2f;
							}
							else if (num18 > 250f)
							{
								num16 *= 1.5f;
							}
							num14 *= num16;
							num15 *= num16;
							localAI[0] = 50f;
							int attackDamage_ForProjectiles_MultiLerp2 = GetAttackDamage_ForProjectiles_MultiLerp(15f, 20f, 25f);
							Projectile.NewProjectile(center.X, center.Y, num14, num15, 920, attackDamage_ForProjectiles_MultiLerp2, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (type == 659)
			{
				flag = true;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (!wet && Main.player[target].active && !Main.player[target].dead && !Main.player[target].npcTypeNoAggro[type])
				{
					Player obj2 = Main.player[target];
					Vector2 center2 = base.Center;
					float num19 = obj2.Center.X - center2.X;
					float num20 = obj2.Center.Y - center2.Y;
					float num21 = (float)Math.Sqrt(num19 * num19 + num20 * num20);
					float num22 = num21;
					if (Math.Abs(num19) < 500f && Math.Abs(num20) < 550f && Collision.CanHit(position, width, height, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							num20 = Main.player[target].position.Y - center2.Y - (float)Main.rand.Next(0, 200);
							num21 = (float)Math.Sqrt(num19 * num19 + num20 * num20);
							num21 = 4.5f / num21;
							num21 *= 2f;
							if (num22 > 350f)
							{
								num21 *= 1.75f;
							}
							else if (num22 > 250f)
							{
								num21 *= 1.25f;
							}
							num19 *= num21;
							num20 *= num21;
							localAI[0] = 40f;
							if (Main.expertMode)
							{
								localAI[0] = 30f;
							}
							int attackDamage_ForProjectiles_MultiLerp3 = GetAttackDamage_ForProjectiles_MultiLerp(15f, 20f, 25f);
							Projectile.NewProjectile(center2.X, center2.Y, num19, num20, 921, attackDamage_ForProjectiles_MultiLerp3, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (type == 204)
			{
				flag = true;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (!wet && !Main.player[target].npcTypeNoAggro[type])
				{
					Vector2 vector6 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num23 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector6.X;
					float num24 = Main.player[target].position.Y - vector6.Y;
					float num25 = (float)Math.Sqrt(num23 * num23 + num24 * num24);
					if (Main.expertMode && num25 < 200f && Collision.CanHit(new Vector2(position.X, position.Y - 20f), width, height + 20, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -40f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							for (int l = 0; l < 5; l++)
							{
								Vector2 vector7 = new Vector2(l - 2, -2f);
								vector7.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.02f;
								vector7.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.02f;
								vector7.Normalize();
								vector7 *= 3f + (float)Main.rand.Next(-50, 51) * 0.01f;
								int attackDamage_ForProjectiles3 = GetAttackDamage_ForProjectiles(13f, 13f);
								Projectile.NewProjectile(vector6.X, vector6.Y, vector7.X, vector7.Y, 176, attackDamage_ForProjectiles3, 0f, Main.myPlayer);
								localAI[0] = 80f;
							}
						}
					}
					if (num25 < 400f && Collision.CanHit(new Vector2(position.X, position.Y - 20f), width, height + 20, Main.player[target].position, Main.player[target].width, Main.player[target].height) && velocity.Y == 0f)
					{
						ai[0] = -80f;
						if (velocity.Y == 0f)
						{
							velocity.X *= 0.9f;
						}
						if (Main.netMode != 1 && localAI[0] == 0f)
						{
							num24 = Main.player[target].position.Y - vector6.Y - (float)Main.rand.Next(-30, 20);
							num24 -= num25 * 0.05f;
							num23 = Main.player[target].position.X - vector6.X - (float)Main.rand.Next(-20, 20);
							num25 = (float)Math.Sqrt(num23 * num23 + num24 * num24);
							num25 = 7f / num25;
							num23 *= num25;
							num24 *= num25;
							localAI[0] = 65f;
							Projectile.NewProjectile(vector6.X, vector6.Y, num23, num24, 176, 13, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (type == 377 || type == 446)
			{
				if (localAI[2] < 90f)
				{
					localAI[2] += 1f;
				}
				else
				{
					friendly = false;
				}
			}
			if (type == 59)
			{
				position += netOffset;
				Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), 1f, 0.3f, 0.1f);
				int num26 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.7f);
				Main.dust[num26].noGravity = true;
				position -= netOffset;
			}
			if (ai[2] > 1f)
			{
				ai[2] -= 1f;
			}
			if (wet)
			{
				if (collideY)
				{
					velocity.Y = -2f;
				}
				if (velocity.Y < 0f && ai[3] == position.X)
				{
					direction *= -1;
					ai[2] = 200f;
				}
				if (velocity.Y > 0f)
				{
					ai[3] = position.X;
				}
				if (type == 59)
				{
					if (velocity.Y > 2f)
					{
						velocity.Y *= 0.9f;
					}
					else if (directionY < 0)
					{
						velocity.Y -= 0.8f;
					}
					velocity.Y -= 0.5f;
					if (velocity.Y < -10f)
					{
						velocity.Y = -10f;
					}
				}
				else
				{
					if (velocity.Y > 2f)
					{
						velocity.Y *= 0.9f;
					}
					velocity.Y -= 0.5f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
				}
				if (ai[2] == 1f && flag)
				{
					TargetClosest();
				}
			}
			aiAction = 0;
			if (ai[2] == 0f)
			{
				ai[0] = -100f;
				ai[2] = 1f;
				TargetClosest();
			}
			if (velocity.Y == 0f)
			{
				if (collideY && oldVelocity.Y != 0f && Collision.SolidCollision(position, width, height))
				{
					position.X -= velocity.X + (float)direction;
				}
				if (ai[3] == position.X)
				{
					direction *= -1;
					ai[2] = 200f;
				}
				ai[3] = 0f;
				velocity.X *= 0.8f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				if (flag)
				{
					ai[0] += 1f;
				}
				ai[0] += 1f;
				if (type == 59)
				{
					ai[0] += 2f;
				}
				if (type == 71)
				{
					ai[0] += 3f;
				}
				if (type == 138)
				{
					ai[0] += 2f;
				}
				if (type == 183)
				{
					ai[0] += 1f;
				}
				if (type == 658)
				{
					ai[0] += 5f;
				}
				if (type == 659)
				{
					ai[0] += 3f;
				}
				if (type == 304)
				{
					float num27 = (1 - life / lifeMax) * 10;
					ai[0] += num27;
				}
				if (type == 377 || type == 446)
				{
					ai[0] += 3f;
				}
				if (type == 81)
				{
					if (scale >= 0f)
					{
						ai[0] += 4f;
					}
					else
					{
						ai[0] += 1f;
					}
				}
				float num28 = -1000f;
				if (type == 659)
				{
					num28 = -500f;
				}
				int num29 = 0;
				if (ai[0] >= 0f)
				{
					num29 = 1;
				}
				if (ai[0] >= num28 && ai[0] <= num28 * 0.5f)
				{
					num29 = 2;
				}
				if (ai[0] >= num28 * 2f && ai[0] <= num28 * 1.5f)
				{
					num29 = 3;
				}
				if (num29 > 0)
				{
					netUpdate = true;
					if (flag && ai[2] == 1f)
					{
						TargetClosest();
					}
					if (num29 == 3)
					{
						velocity.Y = -8f;
						if (type == 59)
						{
							velocity.Y -= 2f;
						}
						velocity.X += 3 * direction;
						if (type == 59)
						{
							velocity.X += 0.5f * (float)direction;
						}
						ai[0] = -200f;
						ai[3] = position.X;
					}
					else
					{
						velocity.Y = -6f;
						velocity.X += 2 * direction;
						if (type == 59)
						{
							velocity.X += 2 * direction;
						}
						ai[0] = -120f;
						if (num29 == 1)
						{
							ai[0] += num28;
						}
						else
						{
							ai[0] += num28 * 2f;
						}
					}
					if (type == 659)
					{
						velocity.Y *= 1.6f;
						velocity.X *= 1.2f;
					}
					if (type == 141)
					{
						velocity.Y *= 1.3f;
						velocity.X *= 1.2f;
					}
					if (type == 377 || type == 446)
					{
						velocity.Y *= 0.9f;
						velocity.X *= 0.6f;
						if (flag)
						{
							direction = -direction;
							velocity.X *= -1f;
						}
						int i2 = (int)(base.Center.X / 16f);
						int j2 = (int)(base.Center.Y / 16f) - 1;
						if (WorldGen.SolidTile(i2, j2) && 0f - velocity.Y + (float)height > 16f)
						{
							velocity.Y = -(16 - height);
						}
					}
				}
				else if (ai[0] >= -30f)
				{
					aiAction = 1;
				}
			}
			else if (target < 255 && ((direction == 1 && velocity.X < 3f) || (direction == -1 && velocity.X > -3f)))
			{
				if (collideX && Math.Abs(velocity.X) == 0.2f)
				{
					position.X -= 1.4f * (float)direction;
				}
				if (collideY && oldVelocity.Y != 0f && Collision.SolidCollision(position, width, height))
				{
					position.X -= velocity.X + (float)direction;
				}
				if ((direction == -1 && (double)velocity.X < 0.01) || (direction == 1 && (double)velocity.X > -0.01))
				{
					velocity.X += 0.2f * (float)direction;
				}
				else
				{
					velocity.X *= 0.93f;
				}
			}
		}

		public void AI_001_SetRainbowSlimeColor()
		{
			color.R = (byte)Main.DiscoR;
			color.G = (byte)Main.DiscoG;
			color.B = (byte)Main.DiscoB;
			color.A = 100;
			alpha = 175;
		}

		private static int AI_001_Slimes_GenerateItemInsideBody(bool isBallooned)
		{
			int num = Main.rand.Next(4);
			if (isBallooned)
			{
				switch (Main.rand.Next(13))
				{
				default:
					return 4367;
				case 1:
					return 4368;
				case 2:
					return 4369;
				case 3:
					return 4370;
				case 4:
					return 4371;
				case 5:
					return 4612;
				case 6:
					return 4674;
				case 7:
				case 8:
				case 9:
					return 4343;
				case 10:
				case 11:
				case 12:
					return 4344;
				}
			}
			switch (num)
			{
			case 0:
				switch (Main.rand.Next(7))
				{
				case 0:
					return 290;
				case 1:
					return 292;
				case 2:
					return 296;
				case 3:
					return 2322;
				default:
					if (Main.netMode != 0 && Main.rand.Next(2) == 0)
					{
						return 2997;
					}
					return 2350;
				}
			case 1:
				return Main.rand.Next(4) switch
				{
					0 => 8, 
					1 => 166, 
					2 => 965, 
					_ => 58, 
				};
			case 2:
				if (Main.rand.Next(2) == 0)
				{
					return Main.rand.Next(11, 15);
				}
				return Main.rand.Next(699, 703);
			default:
				return Main.rand.Next(3) switch
				{
					0 => 71, 
					1 => 72, 
					_ => 73, 
				};
			}
		}

		private void AI_110_Betsy()
		{
			//IL_0486: Unknown result type (might be due to invalid IL or missing references)
			//IL_04f4: Unknown result type (might be due to invalid IL or missing references)
			//IL_0688: Unknown result type (might be due to invalid IL or missing references)
			//IL_068d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0afd: Unknown result type (might be due to invalid IL or missing references)
			//IL_0c6d: Unknown result type (might be due to invalid IL or missing references)
			//IL_108b: Unknown result type (might be due to invalid IL or missing references)
			//IL_115a: Unknown result type (might be due to invalid IL or missing references)
			//IL_133e: Unknown result type (might be due to invalid IL or missing references)
			//IL_1351: Unknown result type (might be due to invalid IL or missing references)
			//IL_1356: Unknown result type (might be due to invalid IL or missing references)
			NPCUtils.TargetClosestBetsy(this, faceTarget: false);
			NPCAimedTarget targetData = GetTargetData();
			int num = -1;
			float num2 = 1f;
			int num3 = 35;
			int num4 = 35;
			float num5 = 10f;
			float num6 = 0.45f;
			float scaleFactor = 7.5f;
			float num7 = 30f;
			float num8 = 30f;
			float scaleFactor2 = 23f;
			float num9 = 600f;
			float num10 = 12f;
			float num11 = 40f;
			float num12 = 80f;
			float num13 = num11 + num12;
			float num14 = 1500f;
			float num15 = 60f;
			float scaleFactor3 = 13f;
			float amount = 71f / (678f * (float)Math.PI);
			float scaleFactor4 = 12f;
			int num16 = 10;
			int num17 = 6 * num16;
			float num18 = 60f;
			float num19 = num15 + (float)num17 + num18;
			float num20 = 60f;
			float num21 = 1f;
			float num22 = (float)Math.PI * 2f * (num21 / num20);
			float num23 = 0.1f;
			float scaleFactor5 = 32f;
			float num24 = 90f;
			float num25 = 20f;
			_ = ai[0];
			_ = -1f;
			SlotId val;
			if (ai[0] == 0f)
			{
				if ((ai[1] += 1f) >= num5)
				{
					ai[1] = 0f;
					ai[0] = 1f;
					ai[2] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 1f)
			{
				if (ai[2] == 0f)
				{
					ai[2] = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
				}
				Vector2 destination = targetData.Center + new Vector2((0f - ai[2]) * 300f, -200f);
				Vector2 desiredVelocity = DirectionTo(destination) * scaleFactor;
				SimpleFlyMovement(desiredVelocity, num6);
				int num26 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
				direction = (spriteDirection = num26);
				if ((ai[1] += 1f) >= num7)
				{
					int num27 = 1;
					if (ai[3] == 5f && Main.rand.Next(3) == 0)
					{
						ai[3] += 1f;
					}
					switch ((int)ai[3])
					{
					case 0:
					case 1:
					case 3:
						num27 = 2;
						break;
					case 2:
						num27 = 3;
						break;
					case 4:
						num27 = 4;
						break;
					case 5:
						num27 = 5;
						break;
					case 6:
						num27 = 3;
						break;
					case 7:
						num27 = 6;
						break;
					}
					ai[0] = num27;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] += 1f;
					netUpdate = true;
					if (ai[3] >= 8f)
					{
						ai[3] = 0f;
					}
					switch (num27)
					{
					case 2:
					{
						Vector2 v2 = DirectionTo(targetData.Center);
						spriteDirection = ((v2.X > 0f) ? 1 : (-1));
						rotation = v2.ToRotation();
						if (spriteDirection == -1)
						{
							rotation += (float)Math.PI;
						}
						velocity = v2 * scaleFactor2;
						break;
					}
					case 3:
					{
						Vector2 vector = new Vector2((targetData.Center.X > base.Center.X) ? 1 : (-1), 0f);
						spriteDirection = ((vector.X > 0f) ? 1 : (-1));
						velocity = vector * -2f;
						break;
					}
					case 5:
					{
						Vector2 v = DirectionTo(targetData.Center);
						spriteDirection = ((v.X > 0f) ? 1 : (-1));
						rotation = v.ToRotation();
						if (spriteDirection == -1)
						{
							rotation += (float)Math.PI;
						}
						velocity = v * scaleFactor5;
						break;
					}
					}
				}
			}
			else if (ai[0] == 2f)
			{
				if (ai[1] == 0f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyWindAttack, base.Center);
				}
				if ((ai[1] += 1f) >= num8)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
				}
			}
			else if (ai[0] == 3f)
			{
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]));
				if (activeSound != null)
				{
					activeSound.Position = base.Center;
				}
				ai[1] += 1f;
				int num28 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
				ai[2] = num28;
				if (ai[1] < num11)
				{
					Vector2 vector2 = targetData.Center + new Vector2((float)num28 * (0f - num9), -250f);
					Vector2 vector3 = DirectionTo(vector2) * num10;
					if (Distance(vector2) < num10)
					{
						base.Center = vector2;
					}
					else
					{
						base.position += vector3;
					}
					if (Vector2.Distance(vector2, base.Center) < 16f)
					{
						ai[1] = num11 - 1f;
					}
					num2 = 1.5f;
				}
				if (ai[1] == num11)
				{
					int num29 = ((targetData.Center.X > base.Center.X) ? 1 : (-1));
					velocity = new Vector2(num29, 0f) * 10f;
					direction = (spriteDirection = num29);
					if (Main.netMode != 1)
					{
						Projectile.NewProjectile(base.Center, velocity, 687, num3, 0f, Main.myPlayer, 0f, whoAmI);
					}
					float[] array = localAI;
					val = SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFlameBreath, base.Center);
					array[2] = ((SlotId)(val)).ToFloat();
				}
				if (ai[1] >= num11)
				{
					num2 = 1.5f;
					if (Math.Abs(targetData.Center.X - base.Center.X) > 550f && Math.Abs(velocity.X) < 20f)
					{
						velocity.X += (float)Math.Sign(velocity.X) * 0.5f;
					}
				}
				if (ai[1] >= num13)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
				}
			}
			else if (ai[0] == 4f)
			{
				int num30 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
				ai[2] = num30;
				if (ai[1] < num15)
				{
					Vector2 vector4 = targetData.Center + new Vector2((float)num30 * (0f - num14), -350f);
					Vector2 value = DirectionTo(vector4) * scaleFactor3;
					velocity = Vector2.Lerp(velocity, value, amount);
					int num31 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
					direction = (spriteDirection = num31);
					if (Vector2.Distance(vector4, base.Center) < 16f)
					{
						ai[1] = num15 - 1f;
					}
					num2 = 1.5f;
				}
				else if (ai[1] == num15)
				{
					Vector2 v3 = DirectionTo(targetData.Center);
					v3.Y *= 0.25f;
					v3 = v3.SafeNormalize(Vector2.UnitX * direction);
					spriteDirection = ((v3.X > 0f) ? 1 : (-1));
					rotation = v3.ToRotation();
					if (spriteDirection == -1)
					{
						rotation += (float)Math.PI;
					}
					velocity = v3 * scaleFactor4;
				}
				else
				{
					base.position.X += DirectionTo(targetData.Center).X * 7f;
					base.position.Y += DirectionTo(targetData.Center + new Vector2(0f, -400f)).Y * 6f;
					if (ai[1] <= num19 - num18)
					{
						num2 = 1.5f;
					}
					float num32 = 30f;
					Vector2 position = base.Center + new Vector2((110f + num32) * (float)direction, 20f).RotatedBy(rotation);
					int num33 = (int)(ai[1] - num15 + 1f);
					if (num33 <= num17 && num33 % num16 == 0 && Main.netMode != 1)
					{
						Projectile.NewProjectile(position, velocity, 686, num4, 0f, Main.myPlayer);
					}
				}
				if (ai[1] > num19 - num18)
				{
					velocity.Y -= 0.1f;
				}
				ai[1] += 1f;
				if (ai[1] >= num19)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
				}
			}
			else if (ai[0] == 5f)
			{
				velocity = velocity.RotatedBy((0f - num22) * (float)direction);
				base.position.Y -= num23;
				base.position += DirectionTo(targetData.Center) * 10f;
				rotation -= num22 * (float)direction;
				num2 *= 0.7f;
				if (ai[1] == 1f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFlyingCircleAttack, base.Center);
				}
				if ((ai[1] += 1f) >= num20)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
					velocity /= 2f;
				}
			}
			else if (ai[0] == 6f)
			{
				if (ai[1] == 0f)
				{
					Vector2 destination2 = targetData.Center + new Vector2(0f, -200f);
					Vector2 desiredVelocity2 = DirectionTo(destination2) * scaleFactor * 2f;
					SimpleFlyMovement(desiredVelocity2, num6 * 2f);
					int num34 = ((base.Center.X < targetData.Center.X) ? 1 : (-1));
					direction = (spriteDirection = num34);
					ai[2] += 1f;
					if (Distance(targetData.Center) < 350f || ai[2] >= 180f)
					{
						ai[1] = 1f;
						netUpdate = true;
					}
				}
				else
				{
					if (ai[1] == 1f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyScream);
					}
					if (ai[1] < num25)
					{
						velocity *= 0.95f;
					}
					else
					{
						velocity *= 0.98f;
					}
					if (ai[1] == num25)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y /= 3f;
						}
						velocity.Y -= 3f;
					}
					num2 *= 0.85f;
					if (ai[1] == 20f || ai[1] == 25f || ai[1] == 30f)
					{
						Point point = base.Center.ToTileCoordinates();
						int num35 = 30;
						int num36 = 35;
						int num37 = 4;
						for (int i = point.X - num35; i <= point.X + num35; i++)
						{
							bool flag = false;
							for (int j = point.Y - num36 / 3; j < point.Y + num36; j++)
							{
								Tile tileSafely = Framing.GetTileSafely(i, j);
								bool flag2 = tileSafely.active() && Main.tileSolid[tileSafely.type] && !Main.tileFrameImportant[tileSafely.type];
								if (flag && flag2)
								{
									int num38 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
									for (int k = 0; k < num38; k++)
									{
										Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
										obj.velocity.Y -= 3f + (float)num37 * 1.5f;
										obj.velocity.Y *= Main.rand.NextFloat();
										obj.scale += (float)num37 * 0.03f;
									}
									for (int l = 0; l < num38 - 1; l++)
									{
										Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
										obj2.velocity.Y -= 1f + (float)num37;
										obj2.velocity.Y *= Main.rand.NextFloat();
									}
									if (num38 > 0 && Main.rand.Next(3) != 0)
									{
										float num39 = Math.Abs(point.X - i) / (num35 / 2);
										Gore gore = Gore.NewGoreDirect(base.position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num37 * 0.15f + num39 * 0.5f);
										gore.velocity.Y -= 0.1f + (float)num37 * 0.5f + num39 * (float)num37 * 1f;
										gore.velocity.Y *= Main.rand.NextFloat();
										gore.position = new Vector2(i * 16 + 20, j * 16 + 20);
									}
								}
								flag = !flag2;
							}
						}
					}
					bool flag3 = ai[1] == 20f || ai[1] == 45f || ai[1] == 70f;
					if (CountNPCS(560) > 4)
					{
						flag3 = false;
					}
					if (flag3 && Main.netMode != 1)
					{
						for (int m = 0; m < 1; m++)
						{
							Vector2 vector5 = base.Center + ((float)Math.PI * 2f * Main.rand.NextFloat()).ToRotationVector2() * new Vector2(2f, 1f) * 300f * (0.6f + Main.rand.NextFloat() * 0.4f);
							if (Vector2.Distance(vector5, targetData.Center) > 100f)
							{
								Point point2 = vector5.ToPoint();
								NewNPC(point2.X, point2.Y, 560, whoAmI);
								SoundEngine.PlayTrackedSound(SoundID.DD2_BetsySummon, vector5);
							}
						}
						List<NPC> list = new List<NPC>();
						for (int n = 0; n < 200; n++)
						{
							NPC nPC = Main.npc[n];
							if (nPC.active && nPC.type == 549)
							{
								list.Add(nPC);
							}
						}
						if (list.Count > 0)
						{
							for (int num40 = 0; num40 < 3; num40++)
							{
								NPC nPC2 = list[Main.rand.Next(list.Count)];
								Point point3 = nPC2.Center.ToPoint();
								NewNPC(point3.X, point3.Y, 560);
								SoundEngine.PlayTrackedSound(SoundID.DD2_BetsySummon, nPC2.Center);
							}
						}
					}
					ai[1] += 1f;
				}
				if (ai[1] >= num24)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					ai[2] = 0f;
				}
			}
			localAI[0] += num2;
			if (localAI[0] >= 36f)
			{
				localAI[0] = 0f;
			}
			if (num != -1)
			{
				localAI[0] = num * 4;
			}
			if ((localAI[1] += 1f) >= 60f)
			{
				localAI[1] = 0f;
			}
			float num41 = DirectionTo(targetData.Center).ToRotation();
			float num42 = 0.04f;
			switch ((int)ai[0])
			{
			case 2:
			case 5:
				num42 = 0f;
				break;
			case 3:
				num42 = 0.01f;
				num41 = 0f;
				if (spriteDirection == -1)
				{
					num41 -= (float)Math.PI;
				}
				if (ai[1] >= num11)
				{
					num41 += (float)spriteDirection * (float)Math.PI / 12f;
					num42 = 0.05f;
				}
				break;
			case 4:
				num42 = 0.01f;
				num41 = (float)Math.PI;
				if (spriteDirection == 1)
				{
					num41 += (float)Math.PI;
				}
				break;
			case 6:
				num42 = 0.02f;
				num41 = 0f;
				if (spriteDirection == -1)
				{
					num41 -= (float)Math.PI;
				}
				break;
			}
			if (spriteDirection == -1)
			{
				num41 += (float)Math.PI;
			}
			if (num42 != 0f)
			{
				rotation = rotation.AngleTowards(num41, num42);
			}
			if (SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2])) == null)
			{
				float[] array2 = localAI;
				val = SlotId.Invalid;
				array2[2] = ((SlotId)(val)).ToFloat();
			}
		}

		private void AI_026_Unicorns()
		{
			int num = 30;
			int num2 = 10;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			if (velocity.Y == 0f && ((velocity.X > 0f && base.direction < 0) || (velocity.X < 0f && base.direction > 0)))
			{
				flag2 = true;
				ai[3] += 1f;
			}
			if (type == 546)
			{
				num2 = 4;
				bool flag4 = velocity.Y == 0f;
				for (int i = 0; i < 200; i++)
				{
					if (i != whoAmI && Main.npc[i].active && Main.npc[i].type == type && Math.Abs(base.position.X - Main.npc[i].position.X) + Math.Abs(base.position.Y - Main.npc[i].position.Y) < (float)width)
					{
						if (base.position.X < Main.npc[i].position.X)
						{
							velocity.X -= 0.05f;
						}
						else
						{
							velocity.X += 0.05f;
						}
						if (base.position.Y < Main.npc[i].position.Y)
						{
							velocity.Y -= 0.05f;
						}
						else
						{
							velocity.Y += 0.05f;
						}
					}
				}
				if (flag4)
				{
					velocity.Y = 0f;
				}
			}
			if (type == 315)
			{
				Lighting.AddLight(base.Center, 0.4f, 0.36f, 0.2f);
				int num3 = frame.Height;
				if (num3 < 1)
				{
					num3 = 1;
				}
				int num4 = frame.Y / num3;
				if (num4 >= 4 && num4 <= 7)
				{
					Vector2 value = base.Bottom + new Vector2(-30f, -8f);
					Vector2 vector = new Vector2(60f, 8f);
					if (Main.rand.Next(3) != 0)
					{
						Dust dust = Dust.NewDustPerfect(value + new Vector2(Main.rand.NextFloat() * vector.X, Main.rand.NextFloat() * vector.Y), 6, velocity);
						dust.scale = 0.6f;
						dust.fadeIn = 1.1f;
						dust.noGravity = true;
						dust.noLight = true;
					}
				}
			}
			if (base.position.X == oldPosition.X || ai[3] >= (float)num || flag2)
			{
				ai[3] += 1f;
				flag3 = true;
			}
			else if (ai[3] > 0f)
			{
				ai[3] -= 1f;
			}
			if (ai[3] > (float)(num * num2))
			{
				ai[3] = 0f;
			}
			if (justHit)
			{
				ai[3] = 0f;
			}
			if (ai[3] == (float)num)
			{
				netUpdate = true;
			}
			Vector2 vector2 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
			float num5 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - vector2.X;
			float num6 = Main.player[target].position.Y - vector2.Y;
			float num7 = (float)Math.Sqrt(num5 * num5 + num6 * num6);
			if (num7 < 200f && !flag3)
			{
				ai[3] = 0f;
			}
			if (type == 410)
			{
				ai[1] += 1f;
				bool flag5 = ai[1] >= 240f;
				if (!flag5 && velocity.Y == 0f)
				{
					for (int j = 0; j < 255; j++)
					{
						if (Main.player[j].active && !Main.player[j].dead && Main.player[j].Distance(base.Center) < 800f && Main.player[j].Center.Y < base.Center.Y && Math.Abs(Main.player[j].Center.X - base.Center.X) < 20f)
						{
							flag5 = true;
							break;
						}
					}
				}
				if (flag5 && Main.netMode != 1)
				{
					for (int k = 0; k < 3; k++)
					{
						Projectile.NewProjectile(base.Center.X, base.Center.Y, (Main.rand.NextFloat() - 0.5f) * 2f, -4f - 10f * Main.rand.NextFloat(), 538, 50, 0f, Main.myPlayer);
					}
					HitEffect(9999);
					active = false;
					return;
				}
			}
			else if (type == 423)
			{
				if (ai[2] == 1f)
				{
					ai[1] += 1f;
					velocity.X *= 0.7f;
					if (ai[1] < 30f)
					{
						Vector2 vector3 = base.Center + Vector2.UnitX * spriteDirection * -20f;
						Dust obj = Main.dust[Dust.NewDust(vector3, 0, 0, 242)];
						Vector2 vector4 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						obj.position = vector3 + vector4 * 20f;
						obj.velocity = -vector4 * 2f;
						obj.scale = 0.5f + vector4.X * (float)(-spriteDirection);
						obj.fadeIn = 1f;
						obj.noGravity = true;
					}
					else if (ai[1] == 30f)
					{
						for (int l = 0; l < 20; l++)
						{
							Vector2 vector5 = base.Center + Vector2.UnitX * spriteDirection * -20f;
							Dust obj2 = Main.dust[Dust.NewDust(vector5, 0, 0, 242)];
							Vector2 vector6 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							obj2.position = vector5 + vector6 * 4f;
							obj2.velocity = vector6 * 4f + Vector2.UnitX * Main.rand.NextFloat() * spriteDirection * -5f;
							obj2.scale = 0.5f + vector6.X * (float)(-spriteDirection);
							obj2.fadeIn = 1f;
							obj2.noGravity = true;
						}
					}
					if (velocity.X > -0.5f && velocity.X < 0.5f)
					{
						velocity.X = 0f;
					}
					if (ai[1] == 30f && Main.netMode != 1)
					{
						int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(50f, 35f);
						Projectile.NewProjectile(base.Center.X + (float)(spriteDirection * -20), base.Center.Y, spriteDirection * -7, 0f, 575, attackDamage_ForProjectiles, 0f, Main.myPlayer, target);
					}
					if (ai[1] >= 60f)
					{
						ai[1] = -Main.rand.Next(320, 601);
						ai[2] = 0f;
					}
				}
				else
				{
					ai[1] += 1f;
					if (ai[1] >= 180f && num7 < 500f && velocity.Y == 0f)
					{
						flag = true;
						ai[1] = 0f;
						ai[2] = 1f;
						netUpdate = true;
					}
					else if (velocity.Y == 0f && num7 < 100f && Math.Abs(velocity.X) > 3f && ((base.Center.X < Main.player[target].Center.X && velocity.X > 0f) || (base.Center.X > Main.player[target].Center.X && velocity.X < 0f)))
					{
						velocity.Y -= 4f;
					}
				}
			}
			else if (type == 155 || type == 329)
			{
				if (velocity.Y == 0f && num7 < 100f && Math.Abs(velocity.X) > 3f && ((base.position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2) && velocity.X > 0f) || (base.position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2) && velocity.X < 0f)))
				{
					velocity.Y -= 4f;
				}
			}
			else if (type == 546 && velocity.Y == 0f && Math.Abs(velocity.X) > 3f && ((base.Center.X < Main.player[target].Center.X && velocity.X > 0f) || (base.Center.X > Main.player[target].Center.X && velocity.X < 0f)))
			{
				velocity.Y -= 4f;
				SoundEngine.PlaySound(3, base.Center, 11);
			}
			if (type == 546 && !Main.player[target].ZoneDesert)
			{
				int direction = base.direction;
				TargetClosest();
				if (!Main.player[target].ZoneDesert)
				{
					EncourageDespawn(10);
					ai[3] = num;
					base.direction = direction;
				}
			}
			if (ai[3] < (float)num)
			{
				if ((type == 329 || type == 315) && !Main.pumpkinMoon)
				{
					EncourageDespawn(10);
				}
				else
				{
					TargetClosest();
				}
			}
			else
			{
				if (velocity.X == 0f)
				{
					if (velocity.Y == 0f)
					{
						ai[0] += 1f;
						if (ai[0] >= 2f)
						{
							base.direction *= -1;
							spriteDirection = base.direction;
							ai[0] = 0f;
						}
					}
				}
				else
				{
					ai[0] = 0f;
				}
				directionY = -1;
				if (base.direction == 0)
				{
					base.direction = 1;
				}
			}
			float num8 = 6f;
			float num9 = 0.07f;
			if (!flag && (velocity.Y == 0f || wet || (velocity.X <= 0f && base.direction < 0) || (velocity.X >= 0f && base.direction > 0)))
			{
				if (type == 155)
				{
					if (velocity.X > 0f && base.direction < 0)
					{
						velocity.X *= 0.95f;
					}
					if (velocity.X < 0f && base.direction > 0)
					{
						velocity.X *= 0.95f;
					}
				}
				else if (type == 329)
				{
					if (velocity.X > 0f && base.direction < 0)
					{
						velocity.X *= 0.9f;
					}
					if (velocity.X < 0f && base.direction > 0)
					{
						velocity.X *= 0.9f;
					}
					if (base.direction > 0 && velocity.X < 3f)
					{
						velocity.X += 0.1f;
					}
					if (base.direction < 0 && velocity.X > -3f)
					{
						velocity.X -= 0.1f;
					}
				}
				else if (type == 315)
				{
					if (velocity.X > 0f && base.direction < 0)
					{
						velocity.X *= 0.95f;
					}
					if (velocity.X < 0f && base.direction > 0)
					{
						velocity.X *= 0.95f;
					}
					if (velocity.X < 0f - num8 || velocity.X > num8)
					{
						if (velocity.Y == 0f)
						{
							velocity *= 0.8f;
						}
					}
					else if (velocity.X < num8 && base.direction == 1)
					{
						velocity.X += 0.07f;
						if (velocity.X > num8)
						{
							velocity.X = num8;
						}
					}
					else if (velocity.X > 0f - num8 && base.direction == -1)
					{
						velocity.X -= 0.07f;
						if (velocity.X < 0f - num8)
						{
							velocity.X = 0f - num8;
						}
					}
				}
				else if (type == 410)
				{
					if (Math.Sign(velocity.X) != base.direction)
					{
						velocity.X *= 0.9f;
					}
					num8 = 6f;
					num9 = 0.2f;
				}
				else if (type == 423)
				{
					if (Math.Sign(velocity.X) != base.direction)
					{
						velocity.X *= 0.85f;
					}
					num8 = 10f;
					num9 = 0.2f;
				}
				else if (type == 546)
				{
					if (Math.Sign(velocity.X) != base.direction)
					{
						velocity.X *= 0.92f;
					}
					float num10 = MathHelper.Lerp(0.6f, 1f, Math.Abs(Main.windSpeedTarget)) * (float)Math.Sign(Main.windSpeedTarget);
					if (!Main.player[target].ZoneSandstorm)
					{
						num10 = 0f;
					}
					num8 = 4f + num10 * (float)base.direction * 3f;
					num9 = 0.05f;
				}
				if (velocity.X < 0f - num8 || velocity.X > num8)
				{
					if (velocity.Y == 0f)
					{
						velocity *= 0.8f;
					}
				}
				else if (velocity.X < num8 && base.direction == 1)
				{
					velocity.X += num9;
					if (velocity.X > num8)
					{
						velocity.X = num8;
					}
				}
				else if (velocity.X > 0f - num8 && base.direction == -1)
				{
					velocity.X -= num9;
					if (velocity.X < 0f - num8)
					{
						velocity.X = 0f - num8;
					}
				}
			}
			if (velocity.Y >= 0f)
			{
				int num11 = 0;
				if (velocity.X < 0f)
				{
					num11 = -1;
				}
				if (velocity.X > 0f)
				{
					num11 = 1;
				}
				Vector2 position = base.position;
				position.X += velocity.X;
				int num12 = (int)((position.X + (float)(width / 2) + (float)((width / 2 + 1) * num11)) / 16f);
				int num13 = (int)((position.Y + (float)height - 1f) / 16f);
				if (Main.tile[num12, num13] == null)
				{
					Main.tile[num12, num13] = new Tile();
				}
				if (Main.tile[num12, num13 - 1] == null)
				{
					Main.tile[num12, num13 - 1] = new Tile();
				}
				if (Main.tile[num12, num13 - 2] == null)
				{
					Main.tile[num12, num13 - 2] = new Tile();
				}
				if (Main.tile[num12, num13 - 3] == null)
				{
					Main.tile[num12, num13 - 3] = new Tile();
				}
				if (Main.tile[num12, num13 + 1] == null)
				{
					Main.tile[num12, num13 + 1] = new Tile();
				}
				if ((float)(num12 * 16) < position.X + (float)width && (float)(num12 * 16 + 16) > position.X && ((Main.tile[num12, num13].nactive() && !Main.tile[num12, num13].topSlope() && !Main.tile[num12, num13 - 1].topSlope() && Main.tileSolid[Main.tile[num12, num13].type] && !Main.tileSolidTop[Main.tile[num12, num13].type]) || (Main.tile[num12, num13 - 1].halfBrick() && Main.tile[num12, num13 - 1].nactive())) && (!Main.tile[num12, num13 - 1].nactive() || !Main.tileSolid[Main.tile[num12, num13 - 1].type] || Main.tileSolidTop[Main.tile[num12, num13 - 1].type] || (Main.tile[num12, num13 - 1].halfBrick() && (!Main.tile[num12, num13 - 4].nactive() || !Main.tileSolid[Main.tile[num12, num13 - 4].type] || Main.tileSolidTop[Main.tile[num12, num13 - 4].type]))) && (!Main.tile[num12, num13 - 2].nactive() || !Main.tileSolid[Main.tile[num12, num13 - 2].type] || Main.tileSolidTop[Main.tile[num12, num13 - 2].type]) && (!Main.tile[num12, num13 - 3].nactive() || !Main.tileSolid[Main.tile[num12, num13 - 3].type] || Main.tileSolidTop[Main.tile[num12, num13 - 3].type]) && (!Main.tile[num12 - num11, num13 - 3].nactive() || !Main.tileSolid[Main.tile[num12 - num11, num13 - 3].type]))
				{
					float num14 = num13 * 16;
					if (Main.tile[num12, num13].halfBrick())
					{
						num14 += 8f;
					}
					if (Main.tile[num12, num13 - 1].halfBrick())
					{
						num14 -= 8f;
					}
					if (num14 < position.Y + (float)height)
					{
						float num15 = position.Y + (float)height - num14;
						if ((double)num15 <= 16.1)
						{
							gfxOffY += base.position.Y + (float)height - num14;
							base.position.Y = num14 - (float)height;
							if (num15 < 9f)
							{
								stepSpeed = 1f;
							}
							else
							{
								stepSpeed = 2f;
							}
						}
					}
				}
			}
			if (velocity.Y == 0f)
			{
				bool flag6 = true;
				int num16 = (int)(base.position.Y - 7f) / 16;
				int num17 = (int)(base.position.X - 7f) / 16;
				int num18 = (int)(base.position.X + (float)width + 7f) / 16;
				for (int m = num17; m <= num18; m++)
				{
					if (Main.tile[m, num16] != null && Main.tile[m, num16].nactive() && Main.tileSolid[Main.tile[m, num16].type])
					{
						flag6 = false;
						break;
					}
				}
				if (flag6)
				{
					int num19 = (int)((base.position.X + (float)(width / 2) + (float)((width / 2 + 2) * base.direction) + velocity.X * 5f) / 16f);
					int num20 = (int)((base.position.Y + (float)height - 15f) / 16f);
					if (Main.tile[num19, num20] == null)
					{
						Main.tile[num19, num20] = new Tile();
					}
					if (Main.tile[num19, num20 - 1] == null)
					{
						Main.tile[num19, num20 - 1] = new Tile();
					}
					if (Main.tile[num19, num20 - 2] == null)
					{
						Main.tile[num19, num20 - 2] = new Tile();
					}
					if (Main.tile[num19, num20 - 3] == null)
					{
						Main.tile[num19, num20 - 3] = new Tile();
					}
					if (Main.tile[num19, num20 + 1] == null)
					{
						Main.tile[num19, num20 + 1] = new Tile();
					}
					if (Main.tile[num19 + base.direction, num20 - 1] == null)
					{
						Main.tile[num19 + base.direction, num20 - 1] = new Tile();
					}
					if (Main.tile[num19 + base.direction, num20 + 1] == null)
					{
						Main.tile[num19 + base.direction, num20 + 1] = new Tile();
					}
					if (Main.tile[num19 - base.direction, num20 + 1] == null)
					{
						Main.tile[num19 - base.direction, num20 + 1] = new Tile();
					}
					if (Main.tile[num19 + base.direction, num20 + 3] == null)
					{
						Main.tile[num19 + base.direction, num20 + 3] = new Tile();
					}
					int num21 = spriteDirection;
					if (type == 423 || type == 410 || type == 546)
					{
						num21 *= -1;
					}
					if ((velocity.X < 0f && num21 == -1) || (velocity.X > 0f && num21 == 1))
					{
						bool flag7 = type == 410 || type == 423;
						float num22 = 3f;
						if (Main.tile[num19, num20 - 2].nactive() && Main.tileSolid[Main.tile[num19, num20 - 2].type])
						{
							if (Main.tile[num19, num20 - 3].nactive() && Main.tileSolid[Main.tile[num19, num20 - 3].type])
							{
								velocity.Y = -8.5f;
								netUpdate = true;
							}
							else
							{
								velocity.Y = -7.5f;
								netUpdate = true;
							}
						}
						else if (Main.tile[num19, num20 - 1].nactive() && !Main.tile[num19, num20 - 1].topSlope() && Main.tileSolid[Main.tile[num19, num20 - 1].type])
						{
							velocity.Y = -7f;
							netUpdate = true;
						}
						else if (base.position.Y + (float)height - (float)(num20 * 16) > 20f && Main.tile[num19, num20].nactive() && !Main.tile[num19, num20].topSlope() && Main.tileSolid[Main.tile[num19, num20].type])
						{
							velocity.Y = -6f;
							netUpdate = true;
						}
						else if ((directionY < 0 || Math.Abs(velocity.X) > num22) && (!flag7 || !Main.tile[num19, num20 + 1].nactive() || !Main.tileSolid[Main.tile[num19, num20 + 1].type]) && (!Main.tile[num19, num20 + 2].nactive() || !Main.tileSolid[Main.tile[num19, num20 + 2].type]) && (!Main.tile[num19 + base.direction, num20 + 3].nactive() || !Main.tileSolid[Main.tile[num19 + base.direction, num20 + 3].type]))
						{
							velocity.Y = -8f;
							netUpdate = true;
						}
					}
				}
			}
			if (type == 423 && Math.Abs(velocity.X) >= num8 * 0.95f)
			{
				Rectangle hitbox = base.Hitbox;
				for (int n = 0; n < 2; n++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust obj3 = Main.dust[Dust.NewDust(hitbox.TopLeft(), hitbox.Width, hitbox.Height, 242)];
						obj3.velocity = Vector2.Zero;
						obj3.noGravity = true;
						obj3.fadeIn = 1f;
						obj3.scale = 0.5f + Main.rand.NextFloat();
					}
				}
			}
			if (type == 546)
			{
				rotation += velocity.X * 0.05f;
				spriteDirection = -base.direction;
			}
		}

		private void AI_107_ImprovedWalkers()
		{
			//IL_0509: Unknown result type (might be due to invalid IL or missing references)
			//IL_0589: Unknown result type (might be due to invalid IL or missing references)
			//IL_05f1: Unknown result type (might be due to invalid IL or missing references)
			//IL_0813: Unknown result type (might be due to invalid IL or missing references)
			//IL_0835: Unknown result type (might be due to invalid IL or missing references)
			//IL_0890: Unknown result type (might be due to invalid IL or missing references)
			//IL_0895: Unknown result type (might be due to invalid IL or missing references)
			//IL_08a6: Unknown result type (might be due to invalid IL or missing references)
			//IL_08ab: Unknown result type (might be due to invalid IL or missing references)
			//IL_08d6: Unknown result type (might be due to invalid IL or missing references)
			//IL_08f5: Unknown result type (might be due to invalid IL or missing references)
			//IL_0f1e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0f7b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0f80: Unknown result type (might be due to invalid IL or missing references)
			//IL_0f9d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0fa2: Unknown result type (might be due to invalid IL or missing references)
			//IL_0fe2: Unknown result type (might be due to invalid IL or missing references)
			//IL_0fe7: Unknown result type (might be due to invalid IL or missing references)
			//IL_1003: Unknown result type (might be due to invalid IL or missing references)
			//IL_1008: Unknown result type (might be due to invalid IL or missing references)
			//IL_10a1: Unknown result type (might be due to invalid IL or missing references)
			//IL_10c3: Unknown result type (might be due to invalid IL or missing references)
			//IL_10c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_10e9: Unknown result type (might be due to invalid IL or missing references)
			//IL_110b: Unknown result type (might be due to invalid IL or missing references)
			//IL_1110: Unknown result type (might be due to invalid IL or missing references)
			//IL_139a: Unknown result type (might be due to invalid IL or missing references)
			//IL_139f: Unknown result type (might be due to invalid IL or missing references)
			//IL_145b: Unknown result type (might be due to invalid IL or missing references)
			//IL_147d: Unknown result type (might be due to invalid IL or missing references)
			//IL_1482: Unknown result type (might be due to invalid IL or missing references)
			//IL_16d7: Unknown result type (might be due to invalid IL or missing references)
			//IL_196e: Unknown result type (might be due to invalid IL or missing references)
			//IL_1e7c: Unknown result type (might be due to invalid IL or missing references)
			//IL_1e9e: Unknown result type (might be due to invalid IL or missing references)
			//IL_23c4: Unknown result type (might be due to invalid IL or missing references)
			//IL_2c29: Unknown result type (might be due to invalid IL or missing references)
			bool flag = base.velocity.X == 0f && base.velocity.Y == 0f && !justHit;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			int num = 32;
			int num2 = 15;
			float num3 = 9f;
			bool flag5 = false;
			float num4 = 40f;
			int num5 = 30;
			int num6 = 0;
			bool flag6 = false;
			bool flag7 = true;
			float num7 = 0.9f;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = true;
			int num8 = 70;
			int num9 = num8 / 2;
			float scaleFactor = 11f;
			Vector2 value = Vector2.Zero;
			int num10 = 1;
			int num11 = 81;
			float num12 = 700f;
			float num13 = 0f;
			float num14 = 0.1f;
			Vector2? vector = null;
			float num15 = 0.5f;
			int num16 = 1;
			float scaleFactor2 = 1f;
			bool flag16 = false;
			float num17 = 30f;
			float num18 = 0f;
			bool flag17 = false;
			bool flag18 = true;
			bool flag19 = false;
			int num19 = 30;
			bool flag20 = false;
			bool flag21 = false;
			bool flag22 = false;
			bool flag23 = false;
			LegacySoundStyle style = null;
			int num20 = 0;
			bool flag24 = false;
			float num21 = 1f;
			float num22 = 0.07f;
			float num23 = 0.8f;
			float num24 = width / 2 + 6;
			bool flag25 = directionY < 0;
			bool flag26 = false;
			int num25 = 1;
			bool flag27 = false;
			float num26 = 5f;
			float num27 = 3f;
			float num28 = 8f;
			float amount = 0.05f;
			float amount2 = 0.04f;
			float amount3 = 0.1f;
			bool flag28 = false;
			float num29 = 0.025f;
			NPCAimedTarget targetData = GetTargetData();
			NPCUtils.NPCTargetingMethod nPCTargetingMethod = NPCUtils.TargetClosestCommon;
			if (NPCID.Sets.BelongsToInvasionOldOnesArmy[type])
			{
				nPCTargetingMethod = NPCUtils.TargetClosestOldOnesInvasion;
			}
			if (targetData.Type == NPCTargetType.NPC && Main.npc[TranslatedTargetIndex].type == 548 && Main.npc[TranslatedTargetIndex].dontTakeDamageFromHostiles)
			{
				nPCTargetingMethod(this, faceTarget: true, null);
				targetData = GetTargetData();
			}
			if (NPCID.Sets.FighterUsesDD2PortalAppearEffect[type])
			{
				if (!targetData.Invalid)
				{
					flag2 = !Collision.CanHit(base.Center, 0, 0, targetData.Center, 0, 0) && (direction == Math.Sign(targetData.Center.X - base.Center.X) || (noGravity && Distance(targetData.Center) > 50f && base.Center.Y > targetData.Center.Y));
				}
				flag2 &= ai[0] <= 0f;
			}
			if (flag2)
			{
				if (base.velocity.Y == 0f || Math.Abs(targetData.Center.Y - base.Center.Y) > 800f)
				{
					noGravity = true;
					noTileCollide = true;
				}
			}
			else
			{
				noGravity = false;
				noTileCollide = false;
			}
			bool flag29 = NPCID.Sets.FighterUsesDD2PortalAppearEffect[type];
			bool flag30 = true;
			SlotId val;
			switch (type)
			{
			case 576:
			case 577:
				num20 = 700;
				style = SoundID.DD2_OgreRoar;
				num24 -= 32f;
				flag5 = true;
				num6 = 60;
				num4 = 130f;
				num5 = 44;
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				num7 = 0.7f;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (ai[0] <= 0f)
				{
					float num32 = ai[1];
					float num33 = Distance(targetData.Center);
					if (localAI[3] >= 60f)
					{
						if (num33 <= num4 + 300f && localAI[0] <= 0f)
						{
							ai[1] = 2f;
						}
						else if (num33 > num4 + 30f)
						{
							ai[1] = 1f;
						}
						else if (!(num33 > num4))
						{
							ai[1] = 0f;
							if (num32 == 1f)
							{
								ai[0] = 0f;
							}
						}
					}
					if (num32 != ai[1])
					{
						netUpdate = true;
					}
				}
				else if (ai[1] == 2f)
				{
					localAI[0] = 300f;
				}
				switch ((int)ai[1])
				{
				case 0:
					num5 = 44;
					if (ai[0] == 40f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_OgreAttack, base.Center);
					}
					break;
				case 2:
					num5 = 90;
					num4 = 250f;
					flag4 = true;
					num10 = GetAttackDamage_ForProjectiles(60f, 40f);
					num9 = 36;
					num = 56;
					num2 = 41;
					num3 = 13f;
					flag3 = true;
					num11 = 683;
					flag15 = false;
					value = new Vector2(-direction * 20, base.height / 2 - 1);
					if (ai[0] == 40f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_OgreGroundPound, base.Center);
					}
					break;
				case 1:
					flag3 = true;
					num5 = 90;
					num4 = 1000f;
					num6 = 240;
					num10 = GetAttackDamage_ForProjectiles(40f, 30f);
					flag15 = false;
					value = new Vector2(direction * 30, -70f);
					num11 = 676;
					if (ai[0] == 80f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_OgreSpit, base.Center);
					}
					break;
				}
				if (ai[0] < (float)(-num6))
				{
					ai[0] = -num6;
				}
				break;
			case 552:
			case 553:
			case 554:
				style = SoundID.DD2_GoblinScream;
				num20 = 1000;
				flag5 = true;
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				if (type == 553)
				{
					num22 += 0.01f;
					num21 += 0.2f;
				}
				if (type == 554)
				{
					num22 += 0.02f;
					num21 += 0.4f;
				}
				if (!(localAI[3] >= 60f))
				{
					num22 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				break;
			case 570:
			case 571:
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				flag24 = true;
				flag12 = true;
				flag15 = ai[1] > 40f;
				num8 = 60;
				num9 = 40;
				if (type == 571 && ai[1] > 10f && ai[1] <= 40f && (int)ai[1] % 6 == 0)
				{
					num9 = (int)ai[1] - 1;
				}
				if (type == 570 && ai[1] > 10f && ai[1] <= 40f && (int)ai[1] % 9 == 0)
				{
					num9 = (int)ai[1] - 1;
				}
				num11 = 671;
				value.X += 22 * direction;
				num14 = 0.15f;
				num15 = 1.5f;
				num12 = 600f;
				scaleFactor = 13f;
				num16 = 1;
				scaleFactor2 = 0f;
				if (type == 570)
				{
					num15 = 2.5f;
				}
				num10 = GetAttackDamage_ForProjectiles(35f, 25f);
				if (type == 571)
				{
					num10 = GetAttackDamage_ForProjectiles(60f, 45f);
				}
				num21 = 0.77f;
				if (ai[0] > 0f)
				{
					if (ai[1] == 40f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DrakinShot, base.Center);
					}
					else if (ai[1] == 60f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DrakinBreathIn, base.Center);
					}
				}
				if (!(localAI[3] >= 60f))
				{
					num12 = 1f;
					num22 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				break;
			case 572:
			case 573:
				if (localAI[3] == 0f)
				{
					float[] array = localAI;
					val = SlotId.Invalid;
					array[0] = ((SlotId)(val)).ToFloat();
					float[] array2 = localAI;
					val = SlotId.Invalid;
					array2[1] = ((SlotId)(val)).ToFloat();
				}
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				if (ai[1] == 2f)
				{
					SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]))?.Stop();
					SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]))?.Stop();
					base.position = base.Center;
					width = (base.height = 192);
					base.Center = base.position;
					base.velocity = Vector2.Zero;
					damage = GetAttackDamage_ScaledByStrength(80f);
					alpha = 255;
					for (int k = 0; k < 4; k++)
					{
						int num35 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, base.height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num35].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					}
					for (int l = 0; l < 20; l++)
					{
						int num36 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, base.height, 6, 0f, 0f, 200, default(Color), 3.7f);
						Main.dust[num36].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
						Main.dust[num36].noGravity = true;
						Main.dust[num36].velocity *= 3f;
						num36 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, base.height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num36].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 4f;
						Main.dust[num36].velocity *= 2f;
						Main.dust[num36].noGravity = true;
						Main.dust[num36].fadeIn = 2.5f;
					}
					for (int m = 0; m < 6; m++)
					{
						int num37 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, base.height, 6, 0f, 0f, 0, default(Color), 2.7f);
						Main.dust[num37].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * width / 2f;
						Main.dust[num37].noGravity = true;
						Main.dust[num37].velocity *= 3f;
					}
					for (int n = 0; n < 12; n++)
					{
						int num38 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, base.height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num38].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * width / 2f;
						Main.dust[num38].noGravity = true;
						Main.dust[num38].velocity *= 3f;
					}
					for (int num39 = 0; num39 < 5; num39++)
					{
						int num40 = Gore.NewGore(base.position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(base.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num40].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
						Main.gore[num40].velocity *= 0.3f;
						Main.gore[num40].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
						Main.gore[num40].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
					}
					ai[0] += 1f;
					if (ai[0] >= 3f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldExplosion, base.Center);
						life = 0;
						HitEffect();
						active = false;
					}
					return;
				}
				if (ai[0] > 0f && ai[1] == 0f && life > 0)
				{
					SlotId val2 = SlotId.FromFloat(localAI[0]);
					if (!((SlotId)(val2)).IsValid)
					{
						float[] array3 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldIgnite, base.Center);
						array3[0] = ((SlotId)(val)).ToFloat();
					}
					localAI[2] += 1f;
					if (localAI[2] == 30f)
					{
						float[] array4 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldIgniteLoop, base.Center);
						array4[0] = ((SlotId)(val)).ToFloat();
						float[] array5 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldScreamChargeLoop, base.Center);
						array5[1] = ((SlotId)(val)).ToFloat();
					}
				}
				if (ai[0] > 0f && ai[1] == 1f)
				{
					ai[0] = 0f;
					ai[1] = 2f;
					netUpdate = true;
					return;
				}
				num21 = 0.88f;
				if (ai[0] == 1f)
				{
					ai[1] = 1f;
				}
				if (ai[0] == 0f && ai[1] == 1f)
				{
					ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]));
					if (activeSound == null)
					{
						float[] array6 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldIgniteLoop, base.Center);
						array6[0] = ((SlotId)(val)).ToFloat();
					}
					else
					{
						activeSound.Position = base.Center;
					}
					ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
					if (activeSound2 == null)
					{
						float[] array7 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldScreamChargeLoop, base.Center);
						array7[1] = ((SlotId)(val)).ToFloat();
					}
					else
					{
						activeSound2.Position = base.Center;
					}
				}
				if (ai[1] > 0f && ai[0] == 0f)
				{
					flag5 = true;
					num5 = 40;
					num4 = 64f;
					num22 = 0.3f;
					num21 = 4f;
					Vector2 position = base.Center + new Vector2(spriteDirection * 12, 0f);
					if (Main.rand.Next(6) == 0)
					{
						Dust dust3 = Dust.NewDustDirect(position, 1, 1, 213, Main.rand.Next(-2, 3), Main.rand.Next(-2, 3), 100, new Color(255, 255, 255, 0));
						dust3.noGravity = true;
						dust3.fadeIn = dust3.scale + 1f + 0.01f * (float)Main.rand.Next(0, 51);
						dust3.velocity *= 0.3f;
						dust3.velocity.X += (float)(-spriteDirection) * 1.2f;
						dust3.velocity.Y += -3.5f;
						dust3.velocity.X += base.velocity.X;
					}
					if (Main.rand.Next(12) == 0)
					{
						Dust dust4 = Dust.NewDustPerfect(position, 6, base.velocity, 100);
						dust4.noGravity = true;
						dust4.velocity.Y -= 1f + Main.rand.NextFloat();
						dust4.scale = 1.1f;
						dust4.fadeIn = 0.5f;
						dust4.customData = this;
					}
				}
				else
				{
					flag5 = true;
					num5 = 40;
					num4 = 700f;
				}
				if (!(localAI[3] >= 60f))
				{
					num22 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				break;
			case 568:
			case 569:
			{
				num5 = 110;
				num22 = 0.16f;
				num23 = 0.7f;
				num21 = 1.4f;
				flag5 = true;
				num4 = 600f;
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				if (!(localAI[3] >= 60f))
				{
					num22 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				if (ai[0] == 0f)
				{
					float[] array8 = localAI;
					val = SlotId.Invalid;
					array8[1] = ((SlotId)(val)).ToFloat();
				}
				if (ai[0] != 1f)
				{
					break;
				}
				HitSound = SoundID.DD2_WitherBeastCrystalImpact;
				ai[0] += 1f;
				if (Main.rand.Next(10) == 0)
				{
					Dust dust7 = Dust.NewDustDirect(base.TopLeft, width, base.height, 271, 0f, -3f, 0, Color.Transparent, 0.6f);
					dust7.velocity.X /= 2f;
					dust7.noGravity = true;
					dust7.fadeIn = 1.5f;
					dust7.position.Y += 4f;
				}
				ActiveSound activeSound3 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
				if (activeSound3 == null)
				{
					float[] array9 = localAI;
					val = SoundEngine.PlayTrackedSound(SoundID.DD2_WitherBeastAuraPulse, base.Center);
					array9[1] = ((SlotId)(val)).ToFloat();
				}
				else
				{
					activeSound3.Position = base.Center;
				}
				localAI[0] += 1f;
				if (localAI[0] > 60f && Main.rand.Next(10) == 0)
				{
					Vector2 vector2 = base.Center + (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2() * 400f * (0.3f + 0.7f * Main.rand.NextFloat());
					Point point = vector2.ToTileCoordinates();
					if (!WorldGen.SolidTile(point.X, point.Y))
					{
						Dust dust8 = Dust.NewDustPerfect(vector2, 27, new Vector2(0f, -3f), 0, new Color(255, 255, 255, 127), 1.5f);
						dust8.velocity = DirectionTo(dust8.position) * dust8.velocity.Length();
						dust8.fadeIn = 1.5f;
					}
				}
				if (Main.netMode != 2)
				{
					Player player = Main.player[Main.myPlayer];
					if (!player.dead && player.active && (player.Center - base.Center).Length() < 400f && !player.creativeGodMode)
					{
						player.AddBuff(195, 3, quiet: false);
					}
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				if (!(ai[1] <= 0f))
				{
					break;
				}
				ai[1] = 60f;
				if (Main.netMode != 1)
				{
					int num49 = lifeMax / 20;
					if (num49 > lifeMax - life)
					{
						num49 = lifeMax - life;
					}
					if (num49 > 0)
					{
						life += num49;
						HealEffect(num49);
						netUpdate = true;
					}
				}
				break;
			}
			case 561:
			case 562:
			case 563:
			{
				bool num34 = localAI[3] >= 60f;
				if (ai[1] == 82f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_JavelinThrowersAttack, base.Center);
					num20 = 7;
					style = SoundID.DD2_JavelinThrowersTaunt;
				}
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				flag24 = true;
				flag12 = true;
				flag15 = ai[1] > 82f;
				num8 = 90;
				num9 = 82;
				num11 = 662;
				if (type == 563)
				{
					num11 = 685;
				}
				value.Y -= 14f;
				num14 = 0f;
				num15 = 0.5f;
				num12 = 600f;
				scaleFactor = 13f;
				if (!num34)
				{
					num12 = 1f;
					num22 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				if (type == 561)
				{
					num21 = 0.88f;
					num15 = 0.6f;
					num10 = GetAttackDamage_ForProjectiles(15f, 10f);
					scaleFactor = 11.5f;
					num12 -= 100f;
				}
				if (type == 562)
				{
					num21 = 0.94f;
					num15 = 0.5f;
					num10 = GetAttackDamage_ForProjectiles(30f, 20f);
					scaleFactor = 12.2f;
					num12 -= 50f;
				}
				if (type == 563)
				{
					num21 = 1f;
					num15 = 0.4f;
					num10 = GetAttackDamage_ForProjectiles(45f, 30f);
				}
				break;
			}
			case 555:
			case 556:
			case 557:
			{
				num20 = 800;
				style = SoundID.DD2_GoblinBomberScream;
				bool num31 = localAI[3] >= 60f;
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				flag24 = true;
				flag12 = true;
				flag15 = ai[1] > 18f;
				num8 = 42;
				num9 = 18;
				num11 = 681;
				num10 = 10;
				value.Y -= 14f;
				num14 = 0.4f;
				num15 = 0.5f;
				num12 = 280f;
				scaleFactor = 6f;
				if (!num31)
				{
					num12 = 1f;
					num22 = 0.01f + localAI[3] / 60f * 0.05f;
				}
				if (type == 555)
				{
					num21 = 0.88f;
					num15 = 0.6f;
					num10 = GetAttackDamage_ForProjectiles(20f, 15f);
				}
				if (type == 555)
				{
					num21 = 0.88f;
					num15 = 0.6f;
					num10 = GetAttackDamage_ForProjectiles(30f, 25f);
				}
				if (type == 557)
				{
					num21 = 1.12f;
					num15 = 0.4f;
					num10 = GetAttackDamage_ForProjectiles(40f, 35f);
				}
				if (ai[1] == (float)num9)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_GoblinBomberThrow, base.Center);
				}
				break;
			}
			case 566:
			case 567:
			{
				DelegateMethods.v3_1 = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
				Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.CastLightOpen);
				flag21 = DD2Event.EnemiesShouldChasePlayers;
				bool num41 = localAI[3] >= 120f;
				if (!num41)
				{
					num22 = 0f;
				}
				if (num41)
				{
					dontTakeDamage = false;
					break;
				}
				dontTakeDamage = true;
				base.velocity.X = 0f;
				flag24 = true;
				flag20 = true;
				ai[3] = 0f;
				if (localAI[3] == 0f)
				{
					alpha = 255;
				}
				localAI[3] += 1f;
				float num42 = localAI[3];
				if (num42 >= 110f)
				{
					alpha -= 26;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (num42 >= 100f)
				{
					int num43 = (int)localAI[3] / 20;
					float num44 = base.Size.Length() / 2f;
					num44 /= 20f;
					int maxValue = 5;
					for (int num45 = 0; num45 < num43 * 2; num45++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust5 = Dust.NewDustDirect(base.position, width, base.height, 236, base.velocity.X * 1f);
							dust5.scale = 1f;
							dust5.fadeIn = 0.3f;
							dust5.velocity = new Vector2(Main.rand.NextFloatDirection() * 1f, 0f - dust5.velocity.Length()) * 1.25f * num44;
						}
					}
				}
				else
				{
					int num46 = (int)localAI[3] / 10;
					float num47 = base.Size.Length() / 2f;
					num47 /= 20f;
					int maxValue2 = 5;
					for (int num48 = 0; (float)num48 < (float)num46 * 1.3f; num48++)
					{
						if (Main.rand.Next(maxValue2) == 0)
						{
							Dust dust6 = Dust.NewDustDirect(base.position + new Vector2(-width / 2, 8f), width + width, base.height, 27, base.velocity.X * 1f, 0f, 100);
							dust6.scale = 1.1f;
							dust6.fadeIn = 0.1f;
							dust6.velocity = new Vector2(Main.rand.NextFloatDirection() * 0.1f, 0f - dust6.velocity.Length()) * 1.05f * num47 * Main.rand.NextFloat();
							dust6.velocity.Y *= Utils.GetLerpValue((float)width * 0.75f, 0f, Math.Abs(dust6.position.X - base.Center.X), clamped: true);
						}
					}
				}
				if (num42 > 100f && (int)num42 % 4 == 0)
				{
					Gore.NewGoreDirect(base.Left, new Vector2(0f, -3f), Utils.SelectRandom<int>(Main.rand, 971, 972), 0.85f).velocity.X *= 0.8f;
				}
				break;
			}
			case 620:
			{
				flag27 = wet;
				flag30 = false;
				flag16 = true;
				num18 = 150f;
				num17 = 20f;
				bool dayTime = Main.dayTime;
				flag21 = !dayTime;
				flag24 = true;
				flag12 = true;
				flag15 = ai[1] > 40f;
				num8 = 60;
				num9 = 40;
				if (ai[1] > 10f && ai[1] <= 40f && (int)ai[1] % 5 == 0)
				{
					num9 = (int)ai[1] - 1;
				}
				num11 = 811;
				value.X -= 4 * direction;
				value.Y -= 20f;
				num14 = 0.15f;
				num15 = 2.5f;
				num12 = 600f;
				scaleFactor = 13f;
				num16 = 1;
				scaleFactor2 = 0f;
				num10 = GetAttackDamage_ForProjectiles(40f, 30f);
				num21 = 8f;
				num22 *= 3f;
				num23 = 0.9f;
				if (ai[0] > 0f)
				{
					if (ai[1] == 40f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DrakinShot, base.Center);
					}
					else if (ai[1] == 60f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DrakinBreathIn, base.Center);
					}
				}
				base.position += netOffset;
				if (alpha == 255)
				{
					spriteDirection = direction;
					base.velocity.Y = -6f;
					netUpdate = true;
					for (int i = 0; i < 35; i++)
					{
						Dust dust = Dust.NewDustDirect(base.position, width, base.height, 5);
						dust.velocity *= 1f;
						dust.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust.velocity += base.velocity * 0.5f;
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha != 0)
				{
					for (int j = 0; j < 2; j++)
					{
						Dust dust2 = Dust.NewDustDirect(base.position, width, base.height, 5);
						dust2.velocity *= 1f;
						dust2.scale = 1f + Main.rand.NextFloat() * 0.5f;
						dust2.fadeIn = 1.5f + Main.rand.NextFloat() * 0.5f;
						dust2.velocity += base.velocity * 0.3f;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					Dust.NewDustDirect(base.position, width, base.height, 5, 0f, 0f, 50, default(Color), 1.3f).velocity = Vector2.Zero;
				}
				base.position -= netOffset;
				if (dayTime)
				{
					flag12 = false;
					flag24 = false;
					flag23 = true;
				}
				else
				{
					if (base.velocity.Y != 0f || !((float)targetData.Hitbox.Bottom < base.Top.Y) || !(Math.Abs(base.Center.X - (float)targetData.Hitbox.Center.X) < (float)(width * 3)) || !Collision.CanHit(base.Hitbox.TopLeft(), base.Hitbox.Width, base.Hitbox.Height, targetData.Hitbox.TopLeft(), targetData.Hitbox.Width, targetData.Hitbox.Height))
					{
						break;
					}
					int num30 = (int)((base.Bottom.Y - 16f - (float)targetData.Hitbox.Bottom) / 16f);
					if (num30 < 27)
					{
						if (num30 < 11)
						{
							base.velocity.Y = -11f;
						}
						else if (num30 < 15)
						{
							base.velocity.Y = -13f;
						}
						else if (num30 < 19)
						{
							base.velocity.Y = -14f;
						}
						else
						{
							base.velocity.Y = -15.9f;
						}
					}
				}
				break;
			}
			}
			if (flag28)
			{
				bool flag31 = base.velocity.Y == 0f;
				for (int num50 = 0; num50 < 200; num50++)
				{
					if (num50 != whoAmI && Main.npc[num50].active && Main.npc[num50].type == type && Math.Abs(base.position.X - Main.npc[num50].position.X) + Math.Abs(base.position.Y - Main.npc[num50].position.Y) < (float)width)
					{
						if (base.position.X < Main.npc[num50].position.X)
						{
							base.velocity.X -= num29;
						}
						else
						{
							base.velocity.X += num29;
						}
						if (base.position.Y < Main.npc[num50].position.Y)
						{
							base.velocity.Y -= num29;
						}
						else
						{
							base.velocity.Y += num29;
						}
					}
				}
				if (flag31)
				{
					base.velocity.Y = 0f;
				}
			}
			if (flag29)
			{
				if (localAI[3] == 0f)
				{
					alpha = 255;
				}
				if (localAI[3] == 30f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (localAI[3] < 60f)
				{
					localAI[3] += 1f;
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					int num51 = (int)localAI[3] / 10;
					float num52 = base.Size.Length() / 2f;
					num52 /= 20f;
					int maxValue3 = 5;
					if (type == 576 || type == 577)
					{
						maxValue3 = 1;
					}
					for (int num53 = 0; num53 < num51; num53++)
					{
						if (Main.rand.Next(maxValue3) == 0)
						{
							Dust dust9 = Dust.NewDustDirect(base.position, width, base.height, 27, base.velocity.X * 1f, 0f, 100);
							dust9.scale = 0.55f;
							dust9.fadeIn = 0.7f;
							dust9.velocity *= 0.1f * num52;
							dust9.velocity += base.velocity;
						}
					}
				}
			}
			if (flag27)
			{
				noGravity = true;
				TargetClosest(faceTarget: false);
				if (collideX)
				{
					base.velocity.X = 0f - oldVelocity.X;
				}
				if (base.velocity.X != 0f)
				{
					direction = Math.Sign(direction);
				}
				if (Collision.CanHit(base.position, width, base.height, targetData.Position, targetData.Width, targetData.Height))
				{
					Vector2 value2 = targetData.Center - base.Center;
					value2.Normalize();
					value2 *= num26;
					base.velocity = Vector2.Lerp(base.velocity, value2, amount);
					return;
				}
				float num54 = num26;
				if (base.velocity.Y > 0f)
				{
					num54 = num27;
				}
				if (base.velocity.Y < 0f)
				{
					num54 = num28;
				}
				Vector2 value3 = new Vector2(direction, -1f);
				value3.Normalize();
				value3 *= num54;
				if (num54 < num26)
				{
					base.velocity = Vector2.Lerp(base.velocity, value3, amount2);
				}
				else
				{
					base.velocity = Vector2.Lerp(base.velocity, value3, amount3);
				}
				return;
			}
			bool flag32 = false;
			if ((flag12 || flag5) && ai[0] > 0f)
			{
				flag18 = false;
			}
			if (flag12 && ai[1] > 0f)
			{
				flag22 = true;
			}
			if (flag5 && ai[0] > 0f)
			{
				flag22 = true;
			}
			if (flag5)
			{
				if (ai[0] < 0f)
				{
					ai[0] += 1f;
					flag = false;
				}
				if (ai[0] == 0f && (base.velocity.Y == 0f || flag6) && targetData.Type != 0 && (Collision.CanHit(base.position, width, base.height, targetData.Position, targetData.Width, targetData.Height) || Collision.CanHitLine(base.position, width, base.height, targetData.Position, targetData.Width, targetData.Height)) && (targetData.Center - base.Center).Length() < num4)
				{
					ai[0] = num5;
					netUpdate = true;
				}
				if (ai[0] > 0f)
				{
					spriteDirection = direction * num25;
					if (flag7)
					{
						base.velocity.X *= num7;
						flag24 = true;
						flag20 = true;
						ai[3] = 0f;
						netUpdate = true;
					}
					ai[0] -= 1f;
					if (ai[0] == 0f)
					{
						ai[0] = -num6;
						netUpdate = true;
					}
				}
			}
			if (flag3 && ai[0] > 0f)
			{
				if (flag15)
				{
					nPCTargetingMethod(this, faceTarget: true, null);
					targetData = GetTargetData();
				}
				if (ai[0] == (float)num9)
				{
					Vector2 vector3 = base.Center + value;
					Vector2 v = targetData.Center - vector3;
					v.Y -= Math.Abs(v.X) * num14;
					Vector2 vector4 = v.SafeNormalize(-Vector2.UnitY) * scaleFactor;
					for (int num55 = 0; num55 < num16; num55++)
					{
						Vector2 velocity = vector4;
						Vector2 position2 = vector3;
						if (vector.HasValue)
						{
							velocity += vector.Value;
						}
						else
						{
							velocity += Utils.RandomVector2(Main.rand, 0f - num15, num15);
						}
						position2 += vector4 * scaleFactor2;
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(position2, velocity, num11, num10, 0f, Main.myPlayer);
						}
					}
				}
			}
			if (flag4 && ai[0] > 0f)
			{
				if (base.velocity.Y != 0f && ai[0] < (float)num2)
				{
					ai[0] = num2;
				}
				if (ai[0] == (float)num)
				{
					base.velocity.Y = 0f - num3;
				}
			}
			if (!flag17 && flag18)
			{
				if (base.velocity.Y == 0f && base.velocity.X * (float)direction < 0f)
				{
					flag19 = true;
				}
				if (base.position.X == oldPosition.X || ai[3] >= (float)num19 || flag19)
				{
					ai[3] += 1f;
				}
				else if (Math.Abs(base.velocity.X) > 0.9f && ai[3] > 0f)
				{
					ai[3] -= 1f;
				}
				if (ai[3] > (float)(num19 * 10))
				{
					ai[3] = 0f;
				}
				if (justHit && !flag30)
				{
					ai[3] = 0f;
				}
				if (targetData.Hitbox.Intersects(base.Hitbox))
				{
					ai[3] = 0f;
				}
				if (ai[3] == (float)num19)
				{
					netUpdate = true;
					if (flag30)
					{
						noGravity = true;
						noTileCollide = true;
						base.position.X += direction * width * 2;
						int num56 = 20;
						float num57 = base.Size.Length() / 2f;
						num57 /= 20f;
						int maxValue4 = 5;
						if (type == 576 || type == 577)
						{
							maxValue4 = 1;
						}
						for (int num58 = 0; num58 < num56; num58++)
						{
							if (Main.rand.Next(maxValue4) == 0)
							{
								Dust dust10 = Dust.NewDustDirect(base.position, width, base.height, 27, base.velocity.X * 1f, 0f, 100);
								dust10.scale = 0.55f;
								dust10.fadeIn = 0.7f;
								dust10.velocity *= 3f * num57;
								dust10.noGravity = true;
								dust10.fadeIn = 1.5f;
								dust10.velocity *= 3f;
							}
						}
						return;
					}
				}
			}
			if (!flag20)
			{
				if (ai[3] < (float)num19 && flag21)
				{
					if (num20 > 0 && Main.rand.Next(num20) == 0)
					{
						SoundEngine.PlayTrackedSound(style, base.Center);
					}
					bool hasValidTarget = HasValidTarget;
					nPCTargetingMethod(this, faceTarget: true, null);
					targetData = GetTargetData();
					if (hasValidTarget != HasValidTarget)
					{
						netUpdate = true;
					}
				}
				else if (!flag22)
				{
					if (flag23)
					{
						EncourageDespawn(10);
					}
					if (base.velocity.X == 0f)
					{
						if (base.velocity.Y == 0f)
						{
							ai[2] += 1f;
							if (ai[2] >= 2f)
							{
								direction *= -1;
								spriteDirection = direction * num25;
								ai[2] = 0f;
								netUpdate = true;
							}
						}
					}
					else if (ai[2] != 0f)
					{
						ai[2] = 0f;
						netUpdate = true;
					}
					if (direction == 0)
					{
						direction = 1;
					}
				}
			}
			if (!flag24)
			{
				if (base.velocity.X < 0f - num21 || base.velocity.X > num21)
				{
					if (base.velocity.Y == 0f)
					{
						base.velocity *= num23;
					}
				}
				else if ((base.velocity.X < num21 && direction == 1) || (base.velocity.X > 0f - num21 && direction == -1))
				{
					base.velocity.X = MathHelper.Clamp(base.velocity.X + num22 * (float)direction, 0f - num21, num21);
				}
			}
			if (flag12)
			{
				if (confused)
				{
					ai[0] = 0f;
				}
				else
				{
					if (ai[1] > 0f)
					{
						ai[1] -= 1f;
					}
					if (justHit)
					{
						ai[1] = num17;
						ai[0] = 0f;
					}
					if (ai[0] > 0f)
					{
						if (flag15)
						{
							nPCTargetingMethod(this, faceTarget: true, null);
							targetData = GetTargetData();
						}
						if (ai[1] == (float)num9)
						{
							Vector2 vector5 = base.Center + value;
							Vector2 v2 = targetData.Center - vector5;
							v2.Y -= Math.Abs(v2.X) * num14;
							Vector2 vector6 = v2.SafeNormalize(-Vector2.UnitY) * scaleFactor;
							for (int num59 = 0; num59 < num16; num59++)
							{
								Vector2 position3 = vector5;
								Vector2 velocity2 = vector6;
								if (vector.HasValue)
								{
									velocity2 += vector.Value;
								}
								else
								{
									velocity2 += Utils.RandomVector2(Main.rand, 0f - num15, num15);
								}
								position3 += velocity2 * scaleFactor2;
								if (Main.netMode != 1)
								{
									Projectile.NewProjectile(position3, velocity2, num11, num10, 0f, Main.myPlayer);
								}
							}
							if (Math.Abs(vector6.Y) > Math.Abs(vector6.X) * 2f)
							{
								ai[0] = ((vector6.Y > 0f) ? 1 : 5);
							}
							else if (Math.Abs(vector6.X) > Math.Abs(vector6.Y) * 2f)
							{
								ai[0] = 3f;
							}
							else
							{
								ai[0] = ((vector6.Y > 0f) ? 2 : 4);
							}
							if (flag16)
							{
								direction = ((vector6.X > 0f) ? 1 : (-1));
							}
						}
						bool flag33 = true;
						if ((base.velocity.Y != 0f && !flag14) || ai[1] <= 0f)
						{
							bool flag34 = false;
							if (num18 != 0f && ai[1] <= 0f)
							{
								flag34 = true;
							}
							ai[0] = 0f;
							ai[1] = (flag34 ? num18 : 0f);
						}
						else if (!flag13 || (!flag33 && (!flag14 || base.velocity.Y == 0f)))
						{
							base.velocity.X *= 0.9f;
							spriteDirection = direction * num25;
						}
					}
					if ((ai[0] <= 0f || flag13) && (base.velocity.Y == 0f || flag14) && ai[1] <= 0f && targetData.Type != 0 && Collision.CanHit(base.position, width, base.height, targetData.Position, targetData.Width, targetData.Height))
					{
						Vector2 vector7 = targetData.Center - base.Center;
						if (vector7.Length() < num12)
						{
							netUpdate = true;
							base.velocity.X *= 0.5f;
							ai[0] = 3f;
							ai[1] = num8;
							if (Math.Abs(vector7.Y) > Math.Abs(vector7.X) * 2f)
							{
								ai[0] = ((vector7.Y > 0f) ? 1 : 5);
							}
							else if (Math.Abs(vector7.X) > Math.Abs(vector7.Y) * 2f)
							{
								ai[0] = 3f;
							}
							else
							{
								ai[0] = ((vector7.Y > 0f) ? 2 : 4);
							}
							if (flag16)
							{
								direction = ((vector7.X > 0f) ? 1 : (-1));
							}
						}
					}
					if (ai[0] <= 0f || flag13)
					{
						bool flag35 = Distance(targetData.Center) < num13;
						if (flag35 && Collision.CanHitLine(base.position, width, base.height, targetData.Position, targetData.Width, targetData.Height))
						{
							ai[3] = 0f;
						}
						if (base.velocity.X < 0f - num21 || base.velocity.X > num21 || flag35)
						{
							if (base.velocity.Y == 0f)
							{
								base.velocity.X *= num23;
							}
						}
						else if ((base.velocity.X < num21 && direction == 1) || (base.velocity.X > 0f - num21 && direction == -1))
						{
							base.velocity.X = MathHelper.Clamp(base.velocity.X + num22 * (float)direction, 0f - num21, num21);
						}
					}
				}
			}
			if (base.velocity.Y == 0f)
			{
				int num60 = (int)(base.Bottom.Y + 7f) / 16;
				int num61 = (int)base.Left.X / 16;
				int num62 = (int)base.Right.X / 16;
				int num63;
				for (num63 = num61; num63 <= num62; num63++)
				{
					num63 = Utils.Clamp(num63, 0, Main.maxTilesX);
					num60 = Utils.Clamp(num60, 0, Main.maxTilesY);
					Tile tile = Main.tile[num63, num60];
					if (tile == null)
					{
						return;
					}
					if (tile.nactive() && Main.tileSolid[tile.type])
					{
						flag32 = true;
						break;
					}
				}
			}
			Point point2 = base.Center.ToTileCoordinates();
			if (WorldGen.InWorld(point2.X, point2.Y, 5) && !noGravity)
			{
				GetTileCollisionParameters(out var cPosition, out var cWidth, out var cHeight);
				Vector2 value4 = base.position - cPosition;
				Collision.StepUp(cPosition, base.velocity, cWidth, cHeight, stepSpeed, gfxOffY);
				base.position = cPosition + value4;
			}
			if (flag32)
			{
				int num64 = (int)(base.Center.X + num24 * (float)direction) / 16;
				int num65 = ((int)base.Bottom.Y - 15) / 16;
				bool flag36 = base.position.Y + (float)base.height - (float)(num65 * 16) > 20f;
				Tile tileSafely = Framing.GetTileSafely(num64 + direction, num65 + 1);
				Tile tileSafely2 = Framing.GetTileSafely(num64, num65 + 1);
				Tile tileSafely3 = Framing.GetTileSafely(num64, num65);
				Tile tileSafely4 = Framing.GetTileSafely(num64, num65 - 1);
				Tile tileSafely5 = Framing.GetTileSafely(num64, num65 - 2);
				Tile tileSafely6 = Framing.GetTileSafely(num64, num65 - 3);
				if (flag8 && tileSafely4.nactive() && (tileSafely4.type == 10 || tileSafely4.type == 388))
				{
					ai[0] += 1f;
					ai[3] = 0f;
					if (ai[0] >= 60f)
					{
						if (flag9)
						{
							ai[1] = 0f;
						}
						int num66 = 5;
						if (Main.tile[num64, num65 - 1].type == 388)
						{
							num66 = 2;
						}
						base.velocity.X = 0.5f * (float)(-direction);
						ai[1] += num66;
						bool flag37 = false;
						if (ai[1] >= 10f)
						{
							flag37 = true;
							ai[1] = 10f;
						}
						if (flag10)
						{
							flag37 = true;
						}
						WorldGen.KillTile(num64, num65 - 1, fail: true);
						if (Main.netMode != 1 && flag37)
						{
							if (flag11)
							{
								WorldGen.KillTile(num64, num65 - 1);
								if (Main.netMode == 2)
								{
									NetMessage.SendData(17, -1, -1, null, 0, num64, num65 - 1);
								}
							}
							else
							{
								if (tileSafely4.type == 10)
								{
									bool flag38 = WorldGen.OpenDoor(num64, num65 - 1, direction);
									if (!flag38)
									{
										ai[3] = num19;
										netUpdate = true;
									}
									if (Main.netMode == 2 && flag38)
									{
										NetMessage.SendData(19, -1, -1, null, 0, num64, num65 - 1, direction);
									}
								}
								if (tileSafely4.type == 388)
								{
									bool flag39 = WorldGen.ShiftTallGate(num64, num65 - 1, closing: false);
									if (!flag39)
									{
										ai[3] = num19;
										netUpdate = true;
									}
									if (Main.netMode == 2 && flag39)
									{
										NetMessage.SendData(19, -1, -1, null, 4, num64, num65 - 1, direction);
									}
								}
							}
						}
					}
				}
				else
				{
					int num67 = spriteDirection * num25;
					if (base.velocity.X * (float)num67 > 0f)
					{
						if (base.height >= 32 && tileSafely5.nactive() && Main.tileSolid[tileSafely5.type])
						{
							netUpdate = true;
							base.velocity.Y = -7f;
							if (tileSafely6.nactive() && Main.tileSolid[tileSafely6.type])
							{
								base.velocity.Y = -8f;
							}
						}
						else if (tileSafely4.nactive() && Main.tileSolid[tileSafely4.type])
						{
							base.velocity.Y = -6f;
							netUpdate = true;
						}
						else if (flag36 && tileSafely3.nactive() && !tileSafely3.topSlope() && Main.tileSolid[tileSafely3.type])
						{
							base.velocity.Y = -5f;
							netUpdate = true;
						}
						else if (flag25 && (!tileSafely2.nactive() || !Main.tileSolid[tileSafely2.type]) && (!tileSafely.nactive() || !Main.tileSolid[tileSafely.type]))
						{
							base.velocity.X *= 1.5f;
							base.velocity.Y = -8f;
							netUpdate = true;
						}
						else if (flag8)
						{
							ai[0] = 0f;
							ai[1] = 0f;
						}
						if (base.velocity.Y == 0f && flag && ai[3] == 1f)
						{
							base.velocity.Y = -5f;
							netUpdate = true;
						}
					}
					if (flag26 && base.velocity.Y == 0f && Math.Abs(targetData.Center.X - base.Center.X) < 100f && Math.Abs(targetData.Center.Y - base.Center.Y) < 50f && Math.Abs(base.velocity.X) >= 1f && base.velocity.X * (float)direction > 0f)
					{
						base.velocity.X = MathHelper.Clamp(base.velocity.X * 2f, -3f, 3f);
						base.velocity.Y = -4f;
						netAlways = true;
					}
				}
			}
			else if (flag8)
			{
				ai[0] = 0f;
				ai[1] = 0f;
			}
			if (!flag2 || !noTileCollide)
			{
				return;
			}
			wet = false;
			if (flag29)
			{
				if (alpha < 60)
				{
					alpha += 20;
				}
				localAI[3] = 40f;
			}
			bool num68 = base.velocity.Y == 0f;
			if (Math.Abs(base.Center.X - targetData.Center.X) > 200f)
			{
				spriteDirection = (direction = ((targetData.Center.X > base.Center.X) ? 1 : (-1)));
				base.velocity.X = MathHelper.Lerp(base.velocity.X, direction, 0.05f);
			}
			int num69 = 80;
			int height = base.height;
			Vector2 position4 = new Vector2(base.Center.X - (float)(num69 / 2), base.position.Y + (float)base.height - (float)height);
			bool flag40 = false;
			if (base.position.Y + (float)base.height < targetData.Position.Y + (float)targetData.Height - 16f)
			{
				flag40 = true;
			}
			if (flag40)
			{
				base.velocity.Y += 0.5f;
			}
			else if (Collision.SolidCollision(position4, num69, height) || targetData.Center.Y - base.Center.Y < -100f || (targetData.Center.Y - base.Center.Y < 10f && Math.Abs(targetData.Center.X - base.Center.X) < 60f))
			{
				if (base.velocity.Y > 0f)
				{
					base.velocity.Y = 0f;
				}
				if ((double)base.velocity.Y > -0.2)
				{
					base.velocity.Y -= 0.025f;
				}
				else
				{
					base.velocity.Y -= 0.2f;
				}
				if (base.velocity.Y < -4f)
				{
					base.velocity.Y = -4f;
				}
			}
			else
			{
				if (base.velocity.Y < 0f)
				{
					base.velocity.Y = 0f;
				}
				if ((double)base.velocity.Y < 0.1)
				{
					base.velocity.Y += 0.025f;
				}
				else
				{
					base.velocity.Y += 0.5f;
				}
			}
			if (base.velocity.Y > 10f)
			{
				base.velocity.Y = 10f;
			}
			if (num68)
			{
				base.velocity.Y = 0f;
			}
		}

		private void AI_084_LunaticCultist()
		{
			if (this.ai[0] != -1f && Main.rand.Next(1000) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(88, 92));
			}
			bool expertMode = Main.expertMode;
			bool flag = life <= lifeMax / 2;
			int num = 120;
			int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(35f, 25f);
			if (expertMode)
			{
				num = 90;
			}
			if (Main.getGoodWorld)
			{
				num -= 30;
			}
			int num2 = 18;
			int num3 = 3;
			int attackDamage_ForProjectiles2 = GetAttackDamage_ForProjectiles(30f, 20f);
			if (expertMode)
			{
				num2 = 12;
				num3 = 4;
			}
			if (Main.getGoodWorld)
			{
				num2 = 10;
				num3 = 5;
			}
			int num4 = 80;
			int attackDamage_ForProjectiles3 = GetAttackDamage_ForProjectiles(45f, 30f);
			if (expertMode)
			{
				num4 = 40;
			}
			if (Main.getGoodWorld)
			{
				num4 -= 20;
			}
			int num5 = 20;
			int num6 = 2;
			if (expertMode)
			{
				num5 = 30;
				num6 = 2;
			}
			int num7 = 20;
			int num8 = 3;
			bool flag2 = type == 439;
			bool flag3 = false;
			bool flag4 = false;
			if (flag)
			{
				defense = (int)((float)defDefense * 0.65f);
			}
			if (!flag2)
			{
				if (this.ai[3] < 0f || !Main.npc[(int)this.ai[3]].active || Main.npc[(int)this.ai[3]].type != 439)
				{
					life = 0;
					HitEffect();
					active = false;
					return;
				}
				this.ai[0] = Main.npc[(int)this.ai[3]].ai[0];
				this.ai[1] = Main.npc[(int)this.ai[3]].ai[1];
				if (this.ai[0] == 5f)
				{
					if (justHit)
					{
						life = 0;
						HitEffect();
						active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(23, -1, -1, null, whoAmI);
						}
						NPC obj = Main.npc[(int)this.ai[3]];
						obj.ai[0] = 6f;
						obj.ai[1] = 0f;
						obj.netUpdate = true;
					}
				}
				else
				{
					flag3 = true;
					flag4 = true;
				}
			}
			else if (this.ai[0] == 5f && this.ai[1] >= 120f && this.ai[1] < 420f && justHit)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				this.ai[3] += 1f;
				velocity = Vector2.Zero;
				netUpdate = true;
				List<int> list = new List<int>();
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && Main.npc[i].type == 440 && Main.npc[i].ai[3] == (float)whoAmI)
					{
						list.Add(i);
					}
				}
				int num9 = 10;
				if (Main.expertMode)
				{
					num9 = 3;
				}
				foreach (int item in list)
				{
					NPC nPC = Main.npc[item];
					if (nPC.localAI[1] == localAI[1] && num9 > 0)
					{
						num9--;
						nPC.life = 0;
						nPC.HitEffect();
						nPC.active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(23, -1, -1, null, item);
						}
					}
					else if (num9 > 0)
					{
						num9--;
						nPC.life = 0;
						nPC.HitEffect();
						nPC.active = false;
					}
				}
				Main.projectile[(int)this.ai[2]].ai[1] = -1f;
				Main.projectile[(int)this.ai[2]].netUpdate = true;
			}
			Vector2 center = base.Center;
			Player player = Main.player[target];
			if (target < 0 || target == 255 || player.dead || !player.active)
			{
				TargetClosest(faceTarget: false);
				player = Main.player[target];
				netUpdate = true;
			}
			if (player.dead || Vector2.Distance(player.Center, center) > 5600f)
			{
				life = 0;
				HitEffect();
				active = false;
				if (Main.netMode != 1)
				{
					NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
				}
				new List<int>().Add(whoAmI);
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].active && Main.npc[j].type == 440 && Main.npc[j].ai[3] == (float)whoAmI)
					{
						Main.npc[j].life = 0;
						Main.npc[j].HitEffect();
						Main.npc[j].active = false;
						if (Main.netMode != 1)
						{
							NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
						}
					}
				}
			}
			float num10 = this.ai[3];
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 89);
				localAI[0] = 1f;
				alpha = 255;
				rotation = 0f;
				if (Main.netMode != 1)
				{
					this.ai[0] = -1f;
					netUpdate = true;
				}
			}
			if (this.ai[0] == -1f)
			{
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 420f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				else if (this.ai[1] > 360f)
				{
					velocity *= 0.95f;
					if (localAI[2] != 13f)
					{
						SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 105);
					}
					localAI[2] = 13f;
				}
				else if (this.ai[1] > 300f)
				{
					velocity = -Vector2.UnitY;
					localAI[2] = 10f;
				}
				else if (this.ai[1] > 120f)
				{
					localAI[2] = 1f;
				}
				else
				{
					localAI[2] = 0f;
				}
				flag3 = true;
				flag4 = true;
			}
			if (this.ai[0] == 0f)
			{
				if (this.ai[1] == 0f)
				{
					TargetClosest(faceTarget: false);
				}
				localAI[2] = 10f;
				int num11 = Math.Sign(player.Center.X - center.X);
				if (num11 != 0)
				{
					direction = (spriteDirection = num11);
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 40f && flag2)
				{
					int num12 = 0;
					if (flag)
					{
						switch ((int)this.ai[3])
						{
						case 0:
							num12 = 0;
							break;
						case 1:
							num12 = 1;
							break;
						case 2:
							num12 = 0;
							break;
						case 3:
							num12 = 5;
							break;
						case 4:
							num12 = 0;
							break;
						case 5:
							num12 = 3;
							break;
						case 6:
							num12 = 0;
							break;
						case 7:
							num12 = 5;
							break;
						case 8:
							num12 = 0;
							break;
						case 9:
							num12 = 2;
							break;
						case 10:
							num12 = 0;
							break;
						case 11:
							num12 = 3;
							break;
						case 12:
							num12 = 0;
							break;
						case 13:
							num12 = 4;
							this.ai[3] = -1f;
							break;
						default:
							this.ai[3] = -1f;
							break;
						}
					}
					else
					{
						switch ((int)this.ai[3])
						{
						case 0:
							num12 = 0;
							break;
						case 1:
							num12 = 1;
							break;
						case 2:
							num12 = 0;
							break;
						case 3:
							num12 = 2;
							break;
						case 4:
							num12 = 0;
							break;
						case 5:
							num12 = 3;
							break;
						case 6:
							num12 = 0;
							break;
						case 7:
							num12 = 1;
							break;
						case 8:
							num12 = 0;
							break;
						case 9:
							num12 = 2;
							break;
						case 10:
							num12 = 0;
							break;
						case 11:
							num12 = 4;
							this.ai[3] = -1f;
							break;
						default:
							this.ai[3] = -1f;
							break;
						}
					}
					int maxValue = 6;
					if (life < lifeMax / 3)
					{
						maxValue = 4;
					}
					if (life < lifeMax / 4)
					{
						maxValue = 3;
					}
					if (expertMode && flag && Main.rand.Next(maxValue) == 0 && num12 != 0 && num12 != 4 && num12 != 5 && CountNPCS(523) < 10)
					{
						num12 = 6;
					}
					if (num12 == 0)
					{
						float num13 = (float)Math.Ceiling((player.Center + new Vector2(0f, -100f) - center).Length() / 50f);
						if (num13 == 0f)
						{
							num13 = 1f;
						}
						List<int> list2 = new List<int>();
						int num14 = 0;
						list2.Add(whoAmI);
						for (int k = 0; k < 200; k++)
						{
							if (Main.npc[k].active && Main.npc[k].type == 440 && Main.npc[k].ai[3] == (float)whoAmI)
							{
								list2.Add(k);
							}
						}
						bool flag5 = list2.Count % 2 == 0;
						foreach (int item2 in list2)
						{
							NPC nPC2 = Main.npc[item2];
							Vector2 center2 = nPC2.Center;
							float num15 = (float)((num14 + flag5.ToInt() + 1) / 2) * ((float)Math.PI * 2f) * 0.4f / (float)list2.Count;
							if (num14 % 2 == 1)
							{
								num15 *= -1f;
							}
							if (list2.Count == 1)
							{
								num15 = 0f;
							}
							Vector2 value = new Vector2(0f, -1f).RotatedBy(num15) * new Vector2(300f, 200f);
							Vector2 value2 = player.Center + value - center2;
							nPC2.ai[0] = 1f;
							nPC2.ai[1] = num13 * 2f;
							nPC2.velocity = value2 / num13;
							if (whoAmI >= nPC2.whoAmI)
							{
								nPC2.position -= nPC2.velocity;
							}
							nPC2.netUpdate = true;
							num14++;
						}
					}
					switch (num12)
					{
					case 1:
						this.ai[0] = 3f;
						this.ai[1] = 0f;
						break;
					case 2:
						this.ai[0] = 2f;
						this.ai[1] = 0f;
						break;
					case 3:
						this.ai[0] = 4f;
						this.ai[1] = 0f;
						break;
					case 4:
						this.ai[0] = 5f;
						this.ai[1] = 0f;
						break;
					}
					if (num12 == 5)
					{
						this.ai[0] = 7f;
						this.ai[1] = 0f;
					}
					if (num12 == 6)
					{
						this.ai[0] = 8f;
						this.ai[1] = 0f;
					}
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 1f)
			{
				flag3 = true;
				localAI[2] = 10f;
				if ((float)(int)this.ai[1] % 2f != 0f && this.ai[1] != 1f)
				{
					position -= velocity;
				}
				this.ai[1] -= 1f;
				if (this.ai[1] <= 0f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 2f)
			{
				localAI[2] = 11f;
				Vector2 vec = Vector2.Normalize(player.Center - center);
				if (vec.HasNaNs())
				{
					vec = new Vector2(direction, 0f);
				}
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num == 0)
				{
					if (Main.netMode != 1)
					{
						List<int> list3 = new List<int>();
						for (int l = 0; l < 200; l++)
						{
							if (Main.npc[l].active && Main.npc[l].type == 440 && Main.npc[l].ai[3] == (float)whoAmI)
							{
								list3.Add(l);
							}
						}
						foreach (int item3 in list3)
						{
							NPC nPC3 = Main.npc[item3];
							Vector2 center3 = nPC3.Center;
							int num16 = Math.Sign(player.Center.X - center3.X);
							if (num16 != 0)
							{
								nPC3.direction = (nPC3.spriteDirection = num16);
							}
							if (Main.netMode != 1)
							{
								vec = Vector2.Normalize(player.Center - center3 + player.velocity * 20f);
								if (vec.HasNaNs())
								{
									vec = new Vector2(direction, 0f);
								}
								Vector2 vector = center3 + new Vector2(direction * 30, 12f);
								for (int m = 0; m < 1; m++)
								{
									Vector2 spinninpoint = vec * (6f + (float)Main.rand.NextDouble() * 4f);
									spinninpoint = spinninpoint.RotatedByRandom(0.52359879016876221);
									Projectile.NewProjectile(vector.X, vector.Y, spinninpoint.X, spinninpoint.Y, 468, 18, 0f, Main.myPlayer);
								}
							}
						}
					}
					if (Main.netMode != 1)
					{
						vec = Vector2.Normalize(player.Center - center + player.velocity * 20f);
						if (vec.HasNaNs())
						{
							vec = new Vector2(direction, 0f);
						}
						Vector2 vector2 = base.Center + new Vector2(direction * 30, 12f);
						for (int n = 0; n < 1; n++)
						{
							Vector2 vector3 = vec * 4f;
							Projectile.NewProjectile(vector2.X, vector2.Y, vector3.X, vector3.Y, 464, attackDamage_ForProjectiles, 0f, Main.myPlayer, 0f, 1f);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 3f)
			{
				localAI[2] = 11f;
				Vector2 vec2 = Vector2.Normalize(player.Center - center);
				if (vec2.HasNaNs())
				{
					vec2 = new Vector2(direction, 0f);
				}
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num2 == 0)
				{
					if ((int)(this.ai[1] - 4f) / num2 == 2)
					{
						List<int> list4 = new List<int>();
						for (int num17 = 0; num17 < 200; num17++)
						{
							if (Main.npc[num17].active && Main.npc[num17].type == 440 && Main.npc[num17].ai[3] == (float)whoAmI)
							{
								list4.Add(num17);
							}
						}
						if (Main.netMode != 1)
						{
							foreach (int item4 in list4)
							{
								NPC nPC4 = Main.npc[item4];
								Vector2 center4 = nPC4.Center;
								int num18 = Math.Sign(player.Center.X - center4.X);
								if (num18 != 0)
								{
									nPC4.direction = (nPC4.spriteDirection = num18);
								}
								if (Main.netMode != 1)
								{
									vec2 = Vector2.Normalize(player.Center - center4 + player.velocity * 20f);
									if (vec2.HasNaNs())
									{
										vec2 = new Vector2(direction, 0f);
									}
									Vector2 vector4 = center4 + new Vector2(direction * 30, 12f);
									for (int num19 = 0; num19 < 1; num19++)
									{
										Vector2 spinninpoint2 = vec2 * (6f + (float)Main.rand.NextDouble() * 4f);
										spinninpoint2 = spinninpoint2.RotatedByRandom(0.52359879016876221);
										Projectile.NewProjectile(vector4.X, vector4.Y, spinninpoint2.X, spinninpoint2.Y, 468, 18, 0f, Main.myPlayer);
									}
								}
							}
						}
					}
					int num20 = Math.Sign(player.Center.X - center.X);
					if (num20 != 0)
					{
						direction = (spriteDirection = num20);
					}
					if (Main.netMode != 1)
					{
						vec2 = Vector2.Normalize(player.Center - center + player.velocity * 20f);
						if (vec2.HasNaNs())
						{
							vec2 = new Vector2(direction, 0f);
						}
						Vector2 vector5 = base.Center + new Vector2(direction * 30, 12f);
						for (int num21 = 0; num21 < 1; num21++)
						{
							Vector2 spinninpoint3 = vec2 * (6f + (float)Main.rand.NextDouble() * 4f);
							spinninpoint3 = spinninpoint3.RotatedByRandom(0.52359879016876221);
							Projectile.NewProjectile(vector5.X, vector5.Y, spinninpoint3.X, spinninpoint3.Y, 467, attackDamage_ForProjectiles2, 0f, Main.myPlayer);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num2 * num3))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 4f)
			{
				if (flag2)
				{
					localAI[2] = 12f;
				}
				else
				{
					localAI[2] = 11f;
				}
				if (this.ai[1] == 20f && flag2 && Main.netMode != 1)
				{
					List<int> list5 = new List<int>();
					for (int num22 = 0; num22 < 200; num22++)
					{
						if (Main.npc[num22].active && Main.npc[num22].type == 440 && Main.npc[num22].ai[3] == (float)whoAmI)
						{
							list5.Add(num22);
						}
					}
					foreach (int item5 in list5)
					{
						NPC nPC5 = Main.npc[item5];
						Vector2 center5 = nPC5.Center;
						int num23 = Math.Sign(player.Center.X - center5.X);
						if (num23 != 0)
						{
							nPC5.direction = (nPC5.spriteDirection = num23);
						}
						if (Main.netMode != 1)
						{
							Vector2 vec3 = Vector2.Normalize(player.Center - center5 + player.velocity * 20f);
							if (vec3.HasNaNs())
							{
								vec3 = new Vector2(direction, 0f);
							}
							Vector2 vector6 = center5 + new Vector2(direction * 30, 12f);
							for (int num24 = 0; num24 < 1; num24++)
							{
								Vector2 spinninpoint4 = vec3 * (6f + (float)Main.rand.NextDouble() * 4f);
								spinninpoint4 = spinninpoint4.RotatedByRandom(0.52359879016876221);
								Projectile.NewProjectile(vector6.X, vector6.Y, spinninpoint4.X, spinninpoint4.Y, 468, 18, 0f, Main.myPlayer);
							}
						}
					}
					if ((int)(this.ai[1] - 20f) % num4 == 0)
					{
						Projectile.NewProjectile(base.Center.X, base.Center.Y - 100f, 0f, 0f, 465, attackDamage_ForProjectiles3, 0f, Main.myPlayer);
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(20 + num4))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 5f)
			{
				localAI[2] = 10f;
				if (Vector2.Normalize(player.Center - center).HasNaNs())
				{
					new Vector2(direction, 0f);
				}
				if (this.ai[1] >= 0f && this.ai[1] < 30f)
				{
					flag3 = true;
					flag4 = true;
					float num25 = (this.ai[1] - 0f) / 30f;
					alpha = (int)(num25 * 255f);
				}
				else if (this.ai[1] >= 30f && this.ai[1] < 90f)
				{
					if (this.ai[1] == 30f && Main.netMode != 1 && flag2)
					{
						localAI[1] += 1f;
						Vector2 spinningpoint = new Vector2(180f, 0f);
						List<int> list6 = new List<int>();
						for (int num26 = 0; num26 < 200; num26++)
						{
							if (Main.npc[num26].active && Main.npc[num26].type == 440 && Main.npc[num26].ai[3] == (float)whoAmI)
							{
								list6.Add(num26);
							}
						}
						int num27 = 6 - list6.Count;
						if (num27 > 2)
						{
							num27 = 2;
						}
						int num28 = list6.Count + num27 + 1;
						float[] array = new float[num28];
						for (int num29 = 0; num29 < array.Length; num29++)
						{
							array[num29] = Vector2.Distance(base.Center + spinningpoint.RotatedBy((float)num29 * ((float)Math.PI * 2f) / (float)num28 - (float)Math.PI / 2f), player.Center);
						}
						int num30 = 0;
						for (int num31 = 1; num31 < array.Length; num31++)
						{
							if (array[num30] > array[num31])
							{
								num30 = num31;
							}
						}
						num30 = ((num30 >= num28 / 2) ? (num30 - num28 / 2) : (num30 + num28 / 2));
						int num32 = num27;
						for (int num33 = 0; num33 < array.Length; num33++)
						{
							if (num30 != num33)
							{
								Vector2 center6 = base.Center + spinningpoint.RotatedBy((float)num33 * ((float)Math.PI * 2f) / (float)num28 - (float)Math.PI / 2f);
								if (num32-- > 0)
								{
									int num34 = NewNPC((int)center6.X, (int)center6.Y + height / 2, 440, whoAmI);
									Main.npc[num34].ai[3] = whoAmI;
									Main.npc[num34].netUpdate = true;
									Main.npc[num34].localAI[1] = localAI[1];
								}
								else
								{
									int num35 = list6[-num32 - 1];
									Main.npc[num35].Center = center6;
									NetMessage.SendData(23, -1, -1, null, num35);
								}
							}
						}
						this.ai[2] = Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 490, 0, 0f, Main.myPlayer, 0f, whoAmI);
						base.Center += spinningpoint.RotatedBy((float)num30 * ((float)Math.PI * 2f) / (float)num28 - (float)Math.PI / 2f);
						netUpdate = true;
						list6.Clear();
					}
					flag3 = true;
					flag4 = true;
					alpha = 255;
					if (flag2)
					{
						Vector2 value3 = Main.projectile[(int)this.ai[2]].Center;
						value3 -= base.Center;
						if (value3 == Vector2.Zero)
						{
							value3 = -Vector2.UnitY;
						}
						value3.Normalize();
						if (Math.Abs(value3.Y) < 0.77f)
						{
							localAI[2] = 11f;
						}
						else if (value3.Y < 0f)
						{
							localAI[2] = 12f;
						}
						else
						{
							localAI[2] = 10f;
						}
						int num36 = Math.Sign(value3.X);
						if (num36 != 0)
						{
							direction = (spriteDirection = num36);
						}
					}
					else
					{
						Vector2 value4 = Main.projectile[(int)Main.npc[(int)this.ai[3]].ai[2]].Center;
						value4 -= base.Center;
						if (value4 == Vector2.Zero)
						{
							value4 = -Vector2.UnitY;
						}
						value4.Normalize();
						if (Math.Abs(value4.Y) < 0.77f)
						{
							localAI[2] = 11f;
						}
						else if (value4.Y < 0f)
						{
							localAI[2] = 12f;
						}
						else
						{
							localAI[2] = 10f;
						}
						int num37 = Math.Sign(value4.X);
						if (num37 != 0)
						{
							direction = (spriteDirection = num37);
						}
					}
				}
				else if (this.ai[1] >= 90f && this.ai[1] < 120f)
				{
					flag3 = true;
					flag4 = true;
					float num38 = (this.ai[1] - 90f) / 30f;
					alpha = 255 - (int)(num38 * 255f);
				}
				else if (this.ai[1] >= 120f && this.ai[1] < 420f)
				{
					flag4 = true;
					alpha = 0;
					if (flag2)
					{
						Vector2 value5 = Main.projectile[(int)this.ai[2]].Center;
						value5 -= base.Center;
						if (value5 == Vector2.Zero)
						{
							value5 = -Vector2.UnitY;
						}
						value5.Normalize();
						if (Math.Abs(value5.Y) < 0.77f)
						{
							localAI[2] = 11f;
						}
						else if (value5.Y < 0f)
						{
							localAI[2] = 12f;
						}
						else
						{
							localAI[2] = 10f;
						}
						int num39 = Math.Sign(value5.X);
						if (num39 != 0)
						{
							direction = (spriteDirection = num39);
						}
					}
					else
					{
						Vector2 value6 = Main.projectile[(int)Main.npc[(int)this.ai[3]].ai[2]].Center;
						value6 -= base.Center;
						if (value6 == Vector2.Zero)
						{
							value6 = -Vector2.UnitY;
						}
						value6.Normalize();
						if (Math.Abs(value6.Y) < 0.77f)
						{
							localAI[2] = 11f;
						}
						else if (value6.Y < 0f)
						{
							localAI[2] = 12f;
						}
						else
						{
							localAI[2] = 10f;
						}
						int num40 = Math.Sign(value6.X);
						if (num40 != 0)
						{
							direction = (spriteDirection = num40);
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= 420f)
				{
					flag4 = true;
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 6f)
			{
				localAI[2] = 13f;
				this.ai[1] += 1f;
				if (this.ai[1] >= 120f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 7f)
			{
				localAI[2] = 11f;
				Vector2 vec4 = Vector2.Normalize(player.Center - center);
				if (vec4.HasNaNs())
				{
					vec4 = new Vector2(direction, 0f);
				}
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num5 == 0)
				{
					if ((int)(this.ai[1] - 4f) / num5 == 2)
					{
						List<int> list7 = new List<int>();
						for (int num41 = 0; num41 < 200; num41++)
						{
							if (Main.npc[num41].active && Main.npc[num41].type == 440 && Main.npc[num41].ai[3] == (float)whoAmI)
							{
								list7.Add(num41);
							}
						}
						foreach (int item6 in list7)
						{
							NPC nPC6 = Main.npc[item6];
							Vector2 center7 = nPC6.Center;
							int num42 = Math.Sign(player.Center.X - center7.X);
							if (num42 != 0)
							{
								nPC6.direction = (nPC6.spriteDirection = num42);
							}
							if (Main.netMode != 1)
							{
								vec4 = Vector2.Normalize(player.Center - center7 + player.velocity * 20f);
								if (vec4.HasNaNs())
								{
									vec4 = new Vector2(direction, 0f);
								}
								Vector2 vector7 = center7 + new Vector2(direction * 30, 12f);
								for (int num43 = 0; (float)num43 < 5f; num43++)
								{
									Vector2 spinninpoint5 = vec4 * (6f + (float)Main.rand.NextDouble() * 4f);
									spinninpoint5 = spinninpoint5.RotatedByRandom(1.2566370964050293);
									Projectile.NewProjectile(vector7.X, vector7.Y, spinninpoint5.X, spinninpoint5.Y, 468, 18, 0f, Main.myPlayer);
								}
							}
						}
					}
					int num44 = Math.Sign(player.Center.X - center.X);
					if (num44 != 0)
					{
						direction = (spriteDirection = num44);
					}
					if (Main.netMode != 1)
					{
						vec4 = Vector2.Normalize(player.Center - center + player.velocity * 20f);
						if (vec4.HasNaNs())
						{
							vec4 = new Vector2(direction, 0f);
						}
						Vector2 vector8 = base.Center + new Vector2(direction * 30, 12f);
						float scaleFactor = 8f;
						float num45 = (float)Math.PI * 2f / 25f;
						for (int num46 = 0; (float)num46 < 5f; num46++)
						{
							Vector2 spinningpoint2 = vec4 * scaleFactor;
							spinningpoint2 = spinningpoint2.RotatedBy(num45 * (float)num46 - ((float)Math.PI * 2f / 5f - num45) / 2f);
							float ai = (Main.rand.NextFloat() - 0.5f) * 0.3f * ((float)Math.PI * 2f) / 60f;
							int num47 = NewNPC((int)vector8.X, (int)vector8.Y + 7, 522, 0, 0f, ai, spinningpoint2.X, spinningpoint2.Y);
							Main.npc[num47].velocity = spinningpoint2;
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num5 * num6))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			else if (this.ai[0] == 8f)
			{
				localAI[2] = 13f;
				if (this.ai[1] >= 4f && flag2 && (int)(this.ai[1] - 4f) % num7 == 0)
				{
					List<int> list8 = new List<int>();
					for (int num48 = 0; num48 < 200; num48++)
					{
						if (Main.npc[num48].active && Main.npc[num48].type == 440 && Main.npc[num48].ai[3] == (float)whoAmI)
						{
							list8.Add(num48);
						}
					}
					int num49 = list8.Count + 1;
					if (num49 > 3)
					{
						num49 = 3;
					}
					int num50 = Math.Sign(player.Center.X - center.X);
					if (num50 != 0)
					{
						direction = (spriteDirection = num50);
					}
					if (Main.netMode != 1)
					{
						for (int num51 = 0; num51 < num49; num51++)
						{
							Point point = base.Center.ToTileCoordinates();
							Point point2 = Main.player[target].Center.ToTileCoordinates();
							Vector2 vector9 = Main.player[target].Center - base.Center;
							int num52 = 20;
							int num53 = 3;
							int num54 = 7;
							int num55 = 2;
							int num56 = 0;
							bool flag6 = false;
							if (vector9.Length() > 2000f)
							{
								flag6 = true;
							}
							while (!flag6 && num56 < 100)
							{
								num56++;
								int num57 = Main.rand.Next(point2.X - num52, point2.X + num52 + 1);
								int num58 = Main.rand.Next(point2.Y - num52, point2.Y + num52 + 1);
								if ((num58 < point2.Y - num54 || num58 > point2.Y + num54 || num57 < point2.X - num54 || num57 > point2.X + num54) && (num58 < point.Y - num53 || num58 > point.Y + num53 || num57 < point.X - num53 || num57 > point.X + num53) && !Main.tile[num57, num58].nactive())
								{
									bool flag7 = true;
									if (flag7 && Collision.SolidTiles(num57 - num55, num57 + num55, num58 - num55, num58 + num55))
									{
										flag7 = false;
									}
									if (flag7)
									{
										NewNPC(num57 * 16 + 8, num58 * 16 + 8, 523, 0, whoAmI);
										flag6 = true;
										break;
									}
								}
							}
						}
					}
				}
				this.ai[1] += 1f;
				if (this.ai[1] >= (float)(4 + num7 * num8))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					this.ai[3] += 1f;
					velocity = Vector2.Zero;
					netUpdate = true;
				}
			}
			if (!flag2)
			{
				this.ai[3] = num10;
			}
			dontTakeDamage = flag3;
			chaseable = !flag4;
		}

		private void AI_108_DivingFlyer()
		{
			//IL_0210: Unknown result type (might be due to invalid IL or missing references)
			//IL_0753: Unknown result type (might be due to invalid IL or missing references)
			//IL_0758: Unknown result type (might be due to invalid IL or missing references)
			//IL_0781: Unknown result type (might be due to invalid IL or missing references)
			//IL_0786: Unknown result type (might be due to invalid IL or missing references)
			//IL_07be: Unknown result type (might be due to invalid IL or missing references)
			//IL_07c3: Unknown result type (might be due to invalid IL or missing references)
			//IL_07d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_08bf: Unknown result type (might be due to invalid IL or missing references)
			//IL_08e1: Unknown result type (might be due to invalid IL or missing references)
			//IL_08e6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0b3c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0b62: Unknown result type (might be due to invalid IL or missing references)
			//IL_0b67: Unknown result type (might be due to invalid IL or missing references)
			//IL_0ba0: Unknown result type (might be due to invalid IL or missing references)
			//IL_0bc6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0bcb: Unknown result type (might be due to invalid IL or missing references)
			rotation = base.velocity.ToRotation();
			float num = 0.4f;
			float num2 = 10f;
			float scaleFactor = 200f;
			float num3 = 750f;
			float num4 = 30f;
			float num5 = 30f;
			float num6 = 0.95f;
			int num7 = 50;
			float num8 = 14f;
			float num9 = 30f;
			float num10 = 100f;
			float num11 = 20f;
			float num12 = 0f;
			float num13 = 7f;
			bool flag = true;
			bool flag2 = true;
			int num14 = 120;
			bool flag3 = false;
			bool flag4 = false;
			float num15 = 0.05f;
			float num16 = 0f;
			bool flag5 = false;
			switch (type)
			{
			case 558:
			case 559:
			case 560:
				flag4 = true;
				num = 0.7f;
				if (type == 559)
				{
					num = 0.5f;
				}
				if (type == 560)
				{
					num = 0.2f;
				}
				num2 = 3f;
				scaleFactor = 400f;
				num3 = 500f;
				num4 = 90f;
				num5 = 20f;
				num6 = 0.95f;
				num7 = 0;
				num8 = 8f;
				num9 = 30f;
				num10 = 150f;
				num11 = 60f;
				num12 = 0.05f;
				num13 = 6f;
				flag2 = false;
				flag5 = true;
				break;
			case 574:
			case 575:
				flag4 = true;
				num = 0.6f;
				if (type == 575)
				{
					num = 0.4f;
				}
				num2 = 4f;
				scaleFactor = 400f;
				num3 = 500f;
				num4 = 90f;
				num5 = 30f;
				num6 = 0.95f;
				num7 = 3;
				num8 = 8f;
				num9 = 30f;
				num10 = 150f;
				num11 = 10f;
				num12 = 0.05f;
				num13 = 0f;
				num16 = -0.1f;
				flag3 = true;
				flag5 = true;
				break;
			}
			NPCUtils.TargetClosestOldOnesInvasion(this);
			NPCAimedTarget targetData = GetTargetData();
			if (flag5)
			{
				if (localAI[0] == 0f)
				{
					alpha = 255;
				}
				if (localAI[0] == 30f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (localAI[0] < 60f)
				{
					localAI[0] += 1f;
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					int num17 = (int)localAI[0] / 10;
					float num18 = base.Size.Length() / 2f;
					num18 /= 20f;
					int maxValue = 5;
					if (type == 576 || type == 577)
					{
						maxValue = 1;
					}
					for (int i = 0; i < num17; i++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust = Dust.NewDustDirect(position, width, height, 27, base.velocity.X * 1f, 0f, 100);
							dust.scale = 0.55f;
							dust.fadeIn = 0.7f;
							dust.velocity *= 0.1f * num18;
							dust.velocity += base.velocity;
						}
					}
				}
			}
			if (flag4)
			{
				for (int j = 0; j < 200; j++)
				{
					if (j != whoAmI && Main.npc[j].active && Main.npc[j].type == type && Math.Abs(position.X - Main.npc[j].position.X) + Math.Abs(position.Y - Main.npc[j].position.Y) < (float)width)
					{
						if (position.X < Main.npc[j].position.X)
						{
							base.velocity.X -= num15;
						}
						else
						{
							base.velocity.X += num15;
						}
						if (position.Y < Main.npc[j].position.Y)
						{
							base.velocity.Y -= num15;
						}
						else
						{
							base.velocity.Y += num15;
						}
					}
				}
			}
			if (Math.Sign(base.velocity.X) != 0)
			{
				spriteDirection = -Math.Sign(base.velocity.X);
			}
			if (rotation < -(float)Math.PI / 2f)
			{
				rotation += (float)Math.PI;
			}
			if (rotation > (float)Math.PI / 2f)
			{
				rotation -= (float)Math.PI;
			}
			num12 *= num11;
			if (Main.expertMode)
			{
				num *= Main.GameModeInfo.KnockbackToEnemiesMultiplier;
			}
			SlotId val;
			if (ai[0] == 0f)
			{
				knockBackResist = num;
				float scaleFactor2 = num2;
				Vector2 center = base.Center;
				Vector2 value = targetData.Center - center;
				Vector2 vector = value - Vector2.UnitY * scaleFactor;
				float num19 = value.Length();
				value = Vector2.Normalize(value) * scaleFactor2;
				vector = Vector2.Normalize(vector) * scaleFactor2;
				bool flag6 = Collision.CanHit(base.Center, 1, 1, targetData.Center, 1, 1);
				if (ai[3] >= (float)num14)
				{
					flag6 = true;
				}
				float num20 = 8f;
				flag6 = flag6 && value.ToRotation() > (float)Math.PI / num20 && value.ToRotation() < (float)Math.PI - (float)Math.PI / num20;
				if (num19 > num3 || !flag6)
				{
					base.velocity.X = (base.velocity.X * (num4 - 1f) + vector.X) / num4;
					base.velocity.Y = (base.velocity.Y * (num4 - 1f) + vector.Y) / num4;
					if (!flag6)
					{
						ai[3] += 1f;
						if (ai[3] == (float)num14)
						{
							netUpdate = true;
						}
					}
					else
					{
						ai[3] = 0f;
					}
				}
				else
				{
					ai[0] = 1f;
					ai[2] = value.X;
					ai[3] = value.Y;
					netUpdate = true;
				}
			}
			else if (ai[0] == 1f)
			{
				knockBackResist = 0f;
				base.velocity *= num6;
				base.velocity.Y += num16;
				ai[1] += 1f;
				if (ai[1] == num5)
				{
					if (type == 558 || type == 559 || type == 560)
					{
						float[] array = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_WyvernDiveDown, base.Center);
						array[1] = ((SlotId)(val)).ToFloat();
						if (Main.rand.Next(5) == 0)
						{
							float[] array2 = localAI;
							val = SoundEngine.PlayTrackedSound(SoundID.DD2_WyvernScream, base.Center);
							array2[2] = ((SlotId)(val)).ToFloat();
						}
					}
					else if (type == 574 || type == 575)
					{
						float[] array3 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldFlyerChargeScream, base.Center);
						array3[1] = ((SlotId)(val)).ToFloat();
						SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldIgnite, base.Center);
					}
				}
				if (ai[1] >= num5)
				{
					ai[0] = 2f;
					ai[1] = 0f;
					netUpdate = true;
					Vector2 velocity = new Vector2(ai[2], ai[3]) + new Vector2(Main.rand.Next(-num7, num7 + 1), Main.rand.Next(-num7, num7 + 1)) * 0.04f;
					velocity.Normalize();
					velocity *= num8;
					base.velocity = velocity;
				}
			}
			else if (ai[0] == 2f)
			{
				if (ai[1] >= 20f && (type == 574 || type == 575))
				{
					ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]));
					if (activeSound == null)
					{
						float[] array4 = localAI;
						val = SoundEngine.PlayTrackedSound(SoundID.DD2_KoboldIgniteLoop, base.Center);
						array4[2] = ((SlotId)(val)).ToFloat();
					}
					else
					{
						activeSound.Position = base.Center;
					}
				}
				knockBackResist = 0f;
				float num21 = num9;
				ai[1] += 1f;
				bool flag7 = Vector2.Distance(base.Center, targetData.Center) > num10 && base.Center.Y > targetData.Center.Y;
				if (flag3)
				{
					flag7 = false;
				}
				if ((ai[1] >= num21 && flag7) || base.velocity.Length() < num13)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] = 0f;
					base.velocity /= 2f;
					netUpdate = true;
					if (flag)
					{
						ai[1] = 45f;
						ai[0] = 4f;
					}
				}
				else
				{
					Vector2 center2 = base.Center;
					Vector2 vec = targetData.Center - center2;
					vec.Normalize();
					if (vec.HasNaNs())
					{
						vec = new Vector2(direction, 0f);
					}
					base.velocity = (base.velocity * (num11 - 1f) + vec * (base.velocity.Length() + num12)) / num11;
				}
				if (flag2 && Collision.SolidCollision(position, width, height))
				{
					ai[0] = 3f;
					ai[1] = 0f;
					ai[2] = 0f;
					ai[3] = 0f;
					netUpdate = true;
				}
			}
			else if (ai[0] == 4f)
			{
				ai[1] -= 3f;
				if (ai[1] <= 0f)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					netUpdate = true;
				}
				base.velocity *= 0.95f;
			}
			ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
			if (activeSound2 != null)
			{
				activeSound2.Position = base.Center;
			}
			else
			{
				float[] array5 = localAI;
				val = SlotId.Invalid;
				array5[1] = ((SlotId)(val)).ToFloat();
			}
			if (type == 558 || type == 559 || type == 560)
			{
				activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]));
				if (activeSound2 != null)
				{
					activeSound2.Position = base.Center;
				}
				else
				{
					float[] array6 = localAI;
					val = SlotId.Invalid;
					array6[2] = ((SlotId)(val)).ToFloat();
				}
			}
			if (flag2 && ai[0] != 3f && Vector2.Distance(base.Center, targetData.Center) < 64f)
			{
				ai[0] = 3f;
				ai[1] = 0f;
				ai[2] = 0f;
				ai[3] = 0f;
				netUpdate = true;
			}
			if (ai[0] != 3f)
			{
				return;
			}
			position = base.Center;
			width = (height = 192);
			position.X -= width / 2;
			position.Y -= height / 2;
			base.velocity = Vector2.Zero;
			damage = GetAttackDamage_ScaledByStrength(80f);
			alpha = 255;
			if (ai[1] == 0f && (type == 574 || type == 575))
			{
				for (int k = 0; k < 4; k++)
				{
					int num22 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num22].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int l = 0; l < 20; l++)
				{
					int num23 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num23].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num23].noGravity = true;
					Main.dust[num23].velocity *= 3f;
					num23 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num23].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 4f;
					Main.dust[num23].velocity *= 2f;
					Main.dust[num23].noGravity = true;
					Main.dust[num23].fadeIn = 2.5f;
				}
				for (int m = 0; m < 6; m++)
				{
					int num24 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num24].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * width / 2f;
					Main.dust[num24].noGravity = true;
					Main.dust[num24].velocity *= 3f;
				}
				for (int n = 0; n < 12; n++)
				{
					int num25 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num25].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(base.velocity.ToRotation()) * width / 2f;
					Main.dust[num25].noGravity = true;
					Main.dust[num25].velocity *= 3f;
				}
				for (int num26 = 0; num26 < 5; num26++)
				{
					int num27 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num27].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.gore[num27].velocity *= 0.3f;
					Main.gore[num27].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num27].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			ai[1] += 1f;
			if (ai[1] >= 3f)
			{
				SoundEngine.PlaySound(SoundID.Item14, position);
				life = 0;
				HitEffect();
				active = false;
			}
		}

		private void AI_109_DarkMage()
		{
			//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_0333: Unknown result type (might be due to invalid IL or missing references)
			//IL_063f: Unknown result type (might be due to invalid IL or missing references)
			bool flag = false;
			bool flag2 = false;
			bool flag3 = true;
			bool flag4 = false;
			int num = 4;
			int num2 = 3;
			int num3 = 0;
			float num4 = 0.2f;
			float num5 = 2f;
			float num6 = -0.2f;
			float num7 = -4f;
			bool flag5 = true;
			float num8 = 2f;
			float num9 = 0.1f;
			float num10 = 1f;
			float num11 = 0.04f;
			bool flag6 = false;
			float num12 = 0.96f;
			bool flag7 = true;
			NPCAimedTarget targetData = GetTargetData();
			if (type == 564 || type == 565)
			{
				flag5 = false;
				rotation = base.velocity.X * 0.04f;
				spriteDirection = ((direction > 0) ? 1 : (-1));
				num3 = 2;
				num6 = -0.05f;
				num7 = -0.4f;
				num4 = 0.05f;
				num5 = 0.2f;
				num10 = 0.5f;
				num11 = 0.02f;
				num8 = 0.5f;
				num9 = 0.1f;
				localAI[2] = 0f;
				DelegateMethods.v3_1 = new Vector3(0.3f, 0.05f, 0.45f) * 1.5f;
				Utils.PlotTileLine(base.Top, base.Bottom, width, DelegateMethods.CastLightOpen);
				if (ai[0] < 0f)
				{
					ai[0] = MathHelper.Min(ai[0] + 1f, 0f);
				}
				if (ai[0] > 0f)
				{
					flag7 = false;
					flag6 = true;
					num12 = 0.9f;
					ai[0] -= 1f;
					if (ai[0] == 80f && ai[1] == 2f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageSummonSkeleton, base.Center);
					}
					if (ai[1] == 2f && ai[0] == 64f && Main.netMode != 1)
					{
						Projectile.NewProjectile(base.Center + new Vector2(direction * 24, -40f), Vector2.Zero, 673, 0, 0f, Main.myPlayer);
						DD2Event.RaiseGoblins(base.Center);
					}
					if (ai[1] == 0f && ai[0] == 32f)
					{
						Vector2 velocity = (targetData.Center - (base.Center + new Vector2(direction * 10, -16f))).SafeNormalize(Vector2.UnitY) * 14f;
						direction = ((velocity.X > 0f) ? 1 : (-1));
						if (Main.netMode != 1)
						{
							Projectile.NewProjectile(base.Center + new Vector2(direction * 10, -16f), velocity, 675, 40, 0f, Main.myPlayer);
						}
					}
					if (ai[0] == 126f && ai[1] == 1f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageCastHeal, base.Center);
					}
					if (ai[1] == 1f && Main.netMode != 1 && (ai[0] == 40f || ai[0] == 48f || ai[0] == 56f) && WorldUtils.Find(new Vector2(base.Center.X + (float)(direction * 240), base.Center.Y).ToTileCoordinates(), Searches.Chain(new Searches.Down(50), new GameManager.WorldBuilding.Conditions.IsSolid()), out var result))
					{
						Projectile.NewProjectile(result.ToWorldCoordinates(8f, 0f), Vector2.Zero, 674, 0, 0f, Main.myPlayer);
					}
					if (ai[0] <= 0f)
					{
						float num13 = ai[1];
						ai[1] += 1f;
						if (ai[1] >= 3f)
						{
							ai[1] = 0f;
						}
						ai[0] = -120f;
						if (num13 == 0f)
						{
							ai[0] = -20f;
						}
						netUpdate = true;
					}
				}
				if (ai[0] == 0f && localAI[3] >= 60f)
				{
					bool flag8 = false;
					Vector2 minimum = base.Center + new Vector2(-600f, -200f);
					Vector2 maximum = base.Center + new Vector2(600f, 200f);
					int num14 = 0;
					for (int i = 0; i < 200; i++)
					{
						NPC nPC = Main.npc[i];
						if (nPC.active && nPC.lifeMax != nPC.life && nPC.Center.Between(minimum, maximum) && ++num14 >= 2)
						{
							flag8 = true;
							break;
						}
					}
					if (!flag8)
					{
						ai[1] = 2f;
					}
					if (ai[1] == 2f && !DD2Event.CanRaiseGoblinsHere(base.Center))
					{
						ai[1] = 0f;
					}
					bool flag9 = true;
					if (ai[1] == 0f && (Distance(targetData.Center) >= 1000f || !Collision.CanHitLine(base.Center, 0, 0, targetData.Center, 0, 0)))
					{
						flag9 = false;
					}
					if (flag9)
					{
						switch ((int)ai[1])
						{
						case 0:
							ai[0] = 97f;
							break;
						case 1:
							ai[0] = 127f;
							break;
						case 2:
							ai[0] = 183f;
							break;
						}
						netUpdate = true;
						flag6 = true;
					}
				}
				if (localAI[3] == 0f)
				{
					alpha = 255;
				}
				if (localAI[3] == 30f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (localAI[3] < 60f)
				{
					localAI[3] += 1f;
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					int num15 = (int)localAI[3] / 10;
					float num16 = base.Size.Length() / 2f;
					num16 /= 20f;
					int maxValue = 5;
					if (type == 576 || type == 577)
					{
						maxValue = 1;
					}
					for (int j = 0; j < num15; j++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust = Dust.NewDustDirect(position, width, height, 27, base.velocity.X * 1f, 0f, 100);
							dust.scale = 0.55f;
							dust.fadeIn = 0.7f;
							dust.velocity *= 0.1f * num16;
							dust.velocity += base.velocity;
						}
					}
				}
			}
			if (justHit)
			{
				localAI[2] = 0f;
			}
			if (!flag2)
			{
				if (localAI[2] >= 0f)
				{
					float num17 = 16f;
					bool flag10 = false;
					bool flag11 = false;
					if (position.X > localAI[0] - num17 && position.X < localAI[0] + num17)
					{
						flag10 = true;
					}
					else if ((base.velocity.X < 0f && direction > 0) || (base.velocity.X > 0f && direction < 0))
					{
						flag10 = true;
						num17 += 24f;
					}
					if (position.Y > localAI[1] - num17 && position.Y < localAI[1] + num17)
					{
						flag11 = true;
					}
					if (flag10 && flag11)
					{
						localAI[2] += 1f;
						if (localAI[2] >= 30f && num17 == 16f)
						{
							flag = true;
						}
						if (localAI[2] >= 60f)
						{
							localAI[2] = -180f;
							direction *= -1;
							base.velocity.X *= -1f;
							collideX = false;
						}
					}
					else
					{
						localAI[0] = position.X;
						localAI[1] = position.Y;
						localAI[2] = 0f;
					}
					if (flag7)
					{
						NPCUtils.TargetClosestOldOnesInvasion(this);
					}
				}
				else
				{
					localAI[2] += 1f;
					direction = ((targetData.Center.X > base.Center.X) ? 1 : (-1));
				}
			}
			int num18 = (int)((position.X + (float)(width / 2)) / 16f) + direction * 2;
			int num19 = (int)((position.Y + (float)height) / 16f);
			int num20 = (int)base.Bottom.Y / 16;
			int num21 = (int)base.Bottom.X / 16;
			if (flag6)
			{
				base.velocity *= num12;
				return;
			}
			for (int k = num19; k < num19 + num; k++)
			{
				if (Main.tile[num18, k] == null)
				{
					Main.tile[num18, k] = new Tile();
				}
				if ((Main.tile[num18, k].nactive() && Main.tileSolid[Main.tile[num18, k].type]) || Main.tile[num18, k].liquid > 0)
				{
					if (k <= num19 + 1)
					{
						flag4 = true;
					}
					flag3 = false;
					break;
				}
			}
			for (int l = num20; l < num20 + num3; l++)
			{
				if (Main.tile[num21, l] == null)
				{
					Main.tile[num21, l] = new Tile();
				}
				if ((Main.tile[num21, l].nactive() && Main.tileSolid[Main.tile[num21, l].type]) || Main.tile[num21, l].liquid > 0)
				{
					flag4 = true;
					flag3 = false;
					break;
				}
			}
			if (flag5)
			{
				for (int m = num19 - num2; m < num19; m++)
				{
					if (Main.tile[num18, m] == null)
					{
						Main.tile[num18, m] = new Tile();
					}
					if ((Main.tile[num18, m].nactive() && Main.tileSolid[Main.tile[num18, m].type]) || Main.tile[num18, m].liquid > 0)
					{
						flag4 = false;
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				flag4 = false;
				flag3 = true;
			}
			if (flag3)
			{
				base.velocity.Y += num4;
				if (base.velocity.Y > num5)
				{
					base.velocity.Y = num5;
				}
			}
			else
			{
				if ((directionY < 0 && base.velocity.Y > 0f) || flag4)
				{
					base.velocity.Y += num6;
				}
				if (base.velocity.Y < num7)
				{
					base.velocity.Y = num7;
				}
			}
			if (collideX)
			{
				base.velocity.X = oldVelocity.X * -0.4f;
				if (direction == -1 && base.velocity.X > 0f && base.velocity.X < 1f)
				{
					base.velocity.X = 1f;
				}
				if (direction == 1 && base.velocity.X < 0f && base.velocity.X > -1f)
				{
					base.velocity.X = -1f;
				}
			}
			if (collideY)
			{
				base.velocity.Y = oldVelocity.Y * -0.25f;
				if (base.velocity.Y > 0f && base.velocity.Y < 1f)
				{
					base.velocity.Y = 1f;
				}
				if (base.velocity.Y < 0f && base.velocity.Y > -1f)
				{
					base.velocity.Y = -1f;
				}
			}
			if (direction == -1 && base.velocity.X > 0f - num8)
			{
				base.velocity.X -= num9;
				if (base.velocity.X > num8)
				{
					base.velocity.X -= num9;
				}
				else if (base.velocity.X > 0f)
				{
					base.velocity.X += num9 / 2f;
				}
				if (base.velocity.X < 0f - num8)
				{
					base.velocity.X = 0f - num8;
				}
			}
			else if (direction == 1 && base.velocity.X < num8)
			{
				base.velocity.X += num9;
				if (base.velocity.X < 0f - num8)
				{
					base.velocity.X += num9;
				}
				else if (base.velocity.X < 0f)
				{
					base.velocity.X -= num9 / 2f;
				}
				if (base.velocity.X > num8)
				{
					base.velocity.X = num8;
				}
			}
			if (directionY == -1 && base.velocity.Y > 0f - num10)
			{
				base.velocity.Y -= num11;
				if (base.velocity.Y > num10)
				{
					base.velocity.Y -= num11 * 1.25f;
				}
				else if (base.velocity.Y > 0f)
				{
					base.velocity.Y += num11 * 0.75f;
				}
				if (base.velocity.Y < 0f - num10)
				{
					base.velocity.Y = 0f - num8;
				}
			}
			else if (directionY == 1 && base.velocity.Y < num10)
			{
				base.velocity.Y += num11;
				if (base.velocity.Y < 0f - num10)
				{
					base.velocity.Y += num11 * 1.25f;
				}
				else if (base.velocity.Y < 0f)
				{
					base.velocity.Y -= num11 * 0.75f;
				}
				if (base.velocity.Y > num10)
				{
					base.velocity.Y = num10;
				}
			}
		}

		private void AI_111_DD2LightningBug()
		{
			//IL_02f6: Unknown result type (might be due to invalid IL or missing references)
			bool flag = true;
			float scaleFactor = 7f;
			float num = 60f;
			float num2 = 60f;
			float num3 = 1f;
			float num4 = 0.96f;
			int num5 = 30;
			int num6 = 20;
			float num7 = 200f;
			int num8 = 40;
			int num9 = 438;
			float scaleFactor2 = 10f;
			float num10 = 100f;
			bool flag2 = false;
			float num11 = 0.05f;
			Vector2 center = base.Center;
			NPCUtils.TargetClosestOldOnesInvasion(this);
			NPCAimedTarget targetData = GetTargetData();
			bool flag3 = false;
			int num12 = type;
			if (num12 == 578)
			{
				scaleFactor = 4f;
				num = 20f;
				num2 = 20f;
				flag3 = true;
				flag2 = true;
				num11 = 0.1f;
				num9 = 682;
				num8 = 50;
				scaleFactor2 = 10f;
				num10 = 50f;
				num5 = 5;
				num6 = 30;
				center += new Vector2(-spriteDirection * 20, 10f);
				base.position += netOffset;
				if (Main.rand.Next(15) == 0)
				{
					Vector2 position = base.position;
					if (direction == -1)
					{
						position.X += width / 2;
					}
					Dust dust = Dust.NewDustDirect(position, width / 2, height, 272);
					dust.scale = 0.65f;
					dust.velocity.Y -= 0.8f;
					if (dust.velocity.X * (float)direction > 0f)
					{
						dust.velocity.X *= -1f;
					}
					if (dust.velocity.Y > 0f)
					{
						dust.velocity *= -0.5f;
					}
				}
				if (Main.rand.Next(80) == 0)
				{
					Vector2 vector = (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2();
					Dust dust2 = Dust.NewDustPerfect(base.Center, 272, vector);
					dust2.velocity *= 1.1f;
					dust2.noGravity = true;
					dust2.customData = this;
					Dust dust3 = Dust.NewDustPerfect(base.Center, 272, vector);
					dust3.velocity *= 1.5f;
					dust3.noGravity = true;
					dust3.customData = this;
				}
				base.position -= netOffset;
			}
			if (flag3)
			{
				if (localAI[1] == 0f)
				{
					alpha = 255;
				}
				if (localAI[1] == 30f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_EtherianPortalSpawnEnemy, base.Center);
				}
				if (localAI[1] < 60f)
				{
					localAI[1] += 1f;
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					int num13 = (int)localAI[1] / 10;
					float num14 = base.Size.Length() / 2f;
					num14 /= 20f;
					int maxValue = 5;
					if (type == 576 || type == 577)
					{
						maxValue = 1;
					}
					for (int i = 0; i < num13; i++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust4 = Dust.NewDustDirect(base.position, width, height, 27, velocity.X * 1f, 0f, 100);
							dust4.scale = 0.55f;
							dust4.fadeIn = 0.7f;
							dust4.velocity *= 0.1f * num14;
							dust4.velocity += velocity;
						}
					}
				}
			}
			if (flag2)
			{
				for (int j = 0; j < 200; j++)
				{
					if (j != whoAmI && Main.npc[j].active && Main.npc[j].type == type && Math.Abs(base.position.X - Main.npc[j].position.X) + Math.Abs(base.position.Y - Main.npc[j].position.Y) < (float)width)
					{
						if (base.position.X < Main.npc[j].position.X)
						{
							velocity.X -= num11;
						}
						else
						{
							velocity.X += num11;
						}
						if (base.position.Y < Main.npc[j].position.Y)
						{
							velocity.Y -= num11;
						}
						else
						{
							velocity.Y += num11;
						}
					}
				}
			}
			rotation = Math.Abs(velocity.X) * (float)direction * 0.1f;
			spriteDirection = direction;
			Vector2 vector2 = center;
			Vector2 vector3 = targetData.Center - vector2;
			Vector2 vector4 = vector3.SafeNormalize(Vector2.UnitY) * scaleFactor;
			bool flag4 = Collision.CanHit(base.Center, 1, 1, targetData.Center, 1, 1);
			if (localAI[0] < 0f)
			{
				localAI[0] += 1f;
			}
			if (!flag)
			{
				velocity = (velocity * (num - 1f) + vector4) / num;
				EncourageDespawn(10);
			}
			else if (vector3.Length() > num7 || !flag4)
			{
				velocity = (velocity * (num2 - 1f) + vector4) / num2;
			}
			else if (vector3.Y < num10)
			{
				velocity.Y -= 0.03f;
			}
			else
			{
				if (!(localAI[0] >= 0f))
				{
					return;
				}
				velocity *= num4;
				if (velocity.Length() < num3 && Main.netMode != 1)
				{
					localAI[0] += 1f;
					if (localAI[0] >= (float)num5)
					{
						localAI[0] = -num6;
						direction = (spriteDirection = ((vector4.X > 0f) ? 1 : (-1)));
						vector4 = vector3 + Utils.RandomVector2(Main.rand, -25f, 25f);
						vector4.X *= 1f + (float)Main.rand.Next(-20, 21) * 0.005f;
						vector4.Y *= 1f + (float)Main.rand.Next(-20, 21) * 0.005f;
						vector4 = vector4.SafeNormalize(Vector2.UnitY) * scaleFactor2;
						vector4.X *= 1f + (float)Main.rand.Next(-20, 21) * 0.00625f;
						vector4.Y *= 1f + (float)Main.rand.Next(-20, 21) * 0.00625f;
						Projectile.NewProjectile(vector2, vector4, num9, num8, 0f, Main.myPlayer);
					}
				}
			}
		}

		public void ReflectProjectiles(Rectangle myRect)
		{
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].CanBeReflected() && CanReflectProjectile(Main.projectile[i]))
				{
					ReflectProjectile(Main.projectile[i]);
				}
			}
		}

		public bool CanReflectProjectile(Projectile proj)
		{
			bool result = proj.Hitbox.Intersects(base.Hitbox);
			int num = type;
			if (num == 618)
			{
				BloodNautilus_GetMouthPositionAndRotation(out var _, out var _);
			}
			return result;
		}

		public void BloodNautilus_GetMouthPositionAndRotation(out Vector2 mouthPosition, out Vector2 mouthDirection)
		{
			float num = rotation + 213f / 452f * (float)spriteDirection;
			if (spriteDirection == -1)
			{
				num += (float)Math.PI;
			}
			mouthDirection = num.ToRotationVector2();
			mouthPosition = base.Center + mouthDirection * 50f;
		}

		public void ReflectProjectile(Projectile proj)
		{
			SoundEngine.PlaySound(SoundID.Item150, proj.position);
			for (int i = 0; i < 3; i++)
			{
				int num = Dust.NewDust(proj.position, proj.width, proj.height, 31);
				Main.dust[num].velocity *= 0.3f;
			}
			proj.hostile = true;
			proj.friendly = false;
			Vector2 vector = Main.player[proj.owner].Center - proj.Center;
			vector.Normalize();
			vector *= proj.oldVelocity.Length();
			proj.velocity = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
			proj.velocity.Normalize();
			proj.velocity *= vector.Length();
			proj.velocity += vector * 20f;
			proj.velocity.Normalize();
			proj.velocity *= vector.Length();
			proj.damage /= 2;
			proj.penetrate = 1;
		}

		public int GetShootingFrame(float circleY)
		{
			int num = -4;
			if (circleY < -0.3f)
			{
				num = 1;
			}
			if (circleY < -0.1f)
			{
				num = 0;
			}
			if (circleY > 0.1f)
			{
				num = 2;
			}
			if (circleY > 0.3f)
			{
				num = 3;
			}
			if (type == 228 || type == 229 || type == 209 || type == 22 || type == 368)
			{
				if (num == -4)
				{
					num = 1;
				}
				if (circleY >= -0.1f)
				{
					num++;
				}
			}
			return num;
		}

		public Tuple<Vector2, float> GetSwingStats(int swingMax, int swingCurrent, int aimDir, int itemWidth, int itemHeight)
		{
			Vector2 zero = Vector2.Zero;
			if ((double)swingCurrent < (double)swingMax * 0.333)
			{
				float num = 10f;
				if (itemWidth > 32)
				{
					num = 14f;
				}
				if (itemWidth >= 52)
				{
					num = 24f;
				}
				if (itemWidth >= 64)
				{
					num = 28f;
				}
				if (itemWidth >= 92)
				{
					num = 38f;
				}
				zero.X = base.Center.X + ((float)itemWidth * 0.5f - num) * (float)aimDir;
				zero.Y = position.Y + 24f;
			}
			else if ((double)swingCurrent < (double)swingMax * 0.666)
			{
				float num2 = 10f;
				if (itemWidth > 32)
				{
					num2 = 18f;
				}
				if (itemWidth >= 52)
				{
					num2 = 24f;
				}
				if (itemWidth >= 64)
				{
					num2 = 28f;
				}
				if (itemWidth >= 92)
				{
					num2 = 38f;
				}
				zero.X = base.Center.X + ((float)itemWidth * 0.5f - num2) * (float)aimDir;
				num2 = 10f;
				if (itemHeight > 32)
				{
					num2 = 8f;
				}
				if (itemHeight > 52)
				{
					num2 = 12f;
				}
				if (itemHeight > 64)
				{
					num2 = 14f;
				}
				zero.Y = position.Y + num2;
			}
			else
			{
				float num3 = 6f;
				if (itemWidth > 32)
				{
					num3 = 14f;
				}
				if (itemWidth >= 48)
				{
					num3 = 18f;
				}
				if (itemWidth >= 52)
				{
					num3 = 24f;
				}
				if (itemWidth >= 64)
				{
					num3 = 28f;
				}
				if (itemWidth >= 92)
				{
					num3 = 38f;
				}
				zero.X = base.Center.X - ((float)itemWidth * 0.5f - num3) * (float)aimDir;
				num3 = 10f;
				if (itemHeight > 32)
				{
					num3 = 10f;
				}
				if (itemHeight > 52)
				{
					num3 = 12f;
				}
				if (itemHeight > 64)
				{
					num3 = 14f;
				}
				zero.Y = position.Y + num3;
			}
			float item = ((float)swingCurrent / (float)swingMax - 0.5f) * (float)(-aimDir) * 3.5f - (float)aimDir * 0.3f;
			return Tuple.Create(zero, item);
		}

		public void TweakSwingStats(int swingMax, int swingCurrent, int aimDir, Rectangle itemRectangle)
		{
			if ((double)swingCurrent < (double)swingMax * 0.333)
			{
				if (aimDir == -1)
				{
					itemRectangle.X -= (int)((double)itemRectangle.Width * 1.4 - (double)itemRectangle.Width);
				}
				itemRectangle.Width = (int)((double)itemRectangle.Width * 1.4);
				itemRectangle.Y += (int)((double)itemRectangle.Height * 0.5);
				itemRectangle.Height = (int)((double)itemRectangle.Height * 1.1);
			}
			else if (!((double)swingCurrent < (double)swingMax * 0.666))
			{
				if (aimDir == 1)
				{
					itemRectangle.X -= (int)((double)itemRectangle.Width * 1.2);
				}
				itemRectangle.Width *= 2;
				itemRectangle.Y -= (int)((double)itemRectangle.Height * 1.4 - (double)itemRectangle.Height);
				itemRectangle.Height = (int)((double)itemRectangle.Height * 1.4);
			}
		}

		public bool UsesPartyHat()
		{
			if (type == 441 || type == 37 || type == 633)
			{
				return false;
			}
			if (ForcePartyHatOn)
			{
				return true;
			}
			if (IsABestiaryIconDummy)
			{
				return false;
			}
			if (frame.Height > 0 && townNPC)
			{
				return BirthdayParty.PartyIsUp;
			}
			return false;
		}

		public PartyHatColor GetPartyHatColor()
		{
			if (!UsesPartyHat() || string.IsNullOrEmpty(GivenOrTypeName))
			{
				return PartyHatColor.None;
			}
			int num = GivenOrTypeName.Length + GivenOrTypeName[0];
			int num2 = Main.moonPhase;
			if (Main.dayTime)
			{
				num2--;
			}
			num += whoAmI;
			num += num2 * (whoAmI % 2 == 0).ToDirectionInt();
			if (num < 0)
			{
				num += 5;
			}
			num %= 5;
			if (num == 0)
			{
				num++;
			}
			return (PartyHatColor)num;
		}

		public void SetFrameSize()
		{
			Main.instance.LoadNPC(type);
			if (setFrameSize)
			{
				frame = new Rectangle(0, 0, TextureAssets.Npc[type].Width(), TextureAssets.Npc[type].Height() / Main.npcFrameCount[type]);
				setFrameSize = false;
			}
		}

		public void FindFrame()
		{
			base.position += netOffset;
			int num = 1;
			if (!Main.dedServ)
			{
				if (!TextureAssets.Npc[type].IsLoaded)
				{
					return;
				}
				num = TextureAssets.Npc[type].Height() / Main.npcFrameCount[type];
			}
			int num2 = 0;
			if (aiAction == 0)
			{
				num2 = ((velocity.Y < 0f) ? 2 : ((velocity.Y > 0f) ? 3 : ((velocity.X != 0f) ? 1 : 0)));
			}
			else if (aiAction == 1)
			{
				num2 = 4;
			}
			switch (type)
			{
			case 657:
			{
				bool flag7 = life <= lifeMax / 2;
				frame.Width = 180;
				int num165 = frame.Y / num;
				if ((flag7 && noGravity) || velocity.Y < 0f)
				{
					if (num165 < 20 || num165 > 23)
					{
						if (num165 < 4 || num165 > 7)
						{
							num165 = 4;
							frameCounter = -1.0;
						}
						if ((frameCounter += 1.0) >= 4.0)
						{
							frameCounter = 0.0;
							num165++;
							if (num165 >= 7)
							{
								num165 = ((!flag7) ? 7 : 22);
							}
						}
					}
					else if ((frameCounter += 1.0) >= 5.0)
					{
						frameCounter = 0.0;
						num165++;
						if (num165 >= 24)
						{
							num165 = 20;
						}
					}
					frame.Y = num165 * num;
				}
				else if (velocity.Y > 0f)
				{
					if (num165 < 8 || num165 > 10)
					{
						num165 = 8;
						frameCounter = -1.0;
					}
					if ((frameCounter += 1.0) >= 8.0)
					{
						frameCounter = 0.0;
						num165++;
						if (num165 >= 10)
						{
							num165 = 10;
						}
					}
					frame.Y = num165 * num;
				}
				else
				{
					if (velocity.Y != 0f)
					{
						break;
					}
					if (ai[0] == 5f)
					{
						frameCounter = 0.0;
						num165 = ((int)ai[1] / 3 % 3) switch
						{
							1 => 14, 
							2 => 15, 
							_ => 13, 
						};
					}
					else if (ai[0] == 4f)
					{
						frameCounter = 0.0;
						switch ((int)ai[1] / 15)
						{
						default:
							num165 = 12;
							break;
						case 1:
							num165 = 11;
							break;
						case 2:
						case 3:
							num165 = 10;
							break;
						}
					}
					else
					{
						bool flag8 = num165 >= 10 && num165 <= 12;
						int num166 = 10;
						if (flag8)
						{
							num166 = 6;
						}
						if (!flag8 && num165 >= 4)
						{
							num165 = 0;
							frameCounter = -1.0;
						}
						if ((frameCounter += 1.0) >= (double)num166)
						{
							frameCounter = 0.0;
							num165++;
							if ((!flag8 || num165 == 13) && num165 >= 4)
							{
								num165 = 0;
							}
						}
					}
					frame.Y = num165 * num;
				}
				break;
			}
			case 604:
			case 605:
			{
				spriteDirection = direction;
				int num94 = 2;
				int num95 = 4;
				if ((frameCounter += 1.0) >= (double)(num95 * num94))
				{
					frameCounter = 0.0;
				}
				if (velocity.Y == 0f)
				{
					frame.Y = num * ((int)frameCounter / num94);
				}
				else
				{
					frame.Y = num * (4 + (int)frameCounter / num94);
				}
				break;
			}
			case 618:
				if ((frameCounter += 1.0) >= 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 619:
				if ((frameCounter += 1.0) >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 636:
				frame.Y = (AI_120_HallowBoss_IsInPhase2() ? num : 0);
				break;
			case 568:
			case 569:
				if (ai[0] > 0f)
				{
					int num211 = frame.Y / num;
					spriteDirection = direction;
					if (num211 < 5 || num211 > 16)
					{
						frameCounter = 0.0;
					}
					num211 = 7;
					frameCounter += 1.0;
					int num212 = 0;
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 8;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 9;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 10;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 7;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 8;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 9;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 10;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 7;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 8;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 9;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 10;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 7;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 8;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 9;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 10;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 7;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 8;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 9;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 10;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 7;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 8;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 9;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 10;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 11;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 12;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 13;
					}
					if (frameCounter >= (double)(5 * ++num212))
					{
						num211 = 14;
					}
					if (frameCounter >= 270.0)
					{
						num211 = 14;
						frameCounter -= 10.0;
					}
					frame.Y = num * num211;
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 6;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 56.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0);
				break;
			case 551:
			{
				int num183 = frame.Y / num;
				if (ai[0] == 4f)
				{
					float num184 = 60f;
					int num185 = 10;
					int num186 = 6 * num185;
					if (num183 < 5)
					{
						frameCounter = 0.0;
					}
					num183 = 5;
					frameCounter = (int)ai[1];
					int num187 = 0;
					if (frameCounter >= (double)(5 * ++num187))
					{
						num183 = 6;
					}
					num187 = 0;
					if (frameCounter >= (double)(num184 - 6f))
					{
						num183 = 7;
					}
					if (frameCounter >= (double)(num184 - 3f))
					{
						num183 = 8;
					}
					if (frameCounter >= (double)num184)
					{
						num183 = 9 + (int)frameCounter / 3 % 2;
					}
					num187 = 0;
					if (frameCounter >= (double)(num184 + (float)num186 + 3f))
					{
						num183 = 8;
					}
					if (frameCounter >= (double)(num184 + (float)num186 + 3f + (float)(5 * ++num187)))
					{
						num183 = 7;
					}
					if (frameCounter >= (double)(num184 + (float)num186 + 3f + (float)(5 * ++num187)))
					{
						num183 = 0;
					}
				}
				else if (ai[0] == 3f)
				{
					float num188 = 40f;
					float num189 = 80f;
					float num190 = num188 + num189;
					float num191 = 25f;
					if (num183 < 5)
					{
						frameCounter = 0.0;
					}
					num183 = 5;
					frameCounter = (int)ai[1];
					int num192 = 0;
					if (frameCounter >= (double)(5 * ++num192))
					{
						num183 = 6;
					}
					num192 = 0;
					if (frameCounter >= (double)(num188 - 6f))
					{
						num183 = 7;
					}
					if (frameCounter >= (double)(num188 - 3f))
					{
						num183 = 8;
					}
					if (frameCounter >= (double)num188)
					{
						num183 = 9 + (int)frameCounter / 3 % 2;
					}
					num192 = 0;
					if (frameCounter >= (double)(num190 - num191 + 3f))
					{
						num183 = 8;
					}
					if (frameCounter >= (double)(num190 - num191 + 3f + (float)(5 * ++num192)))
					{
						num183 = 7;
					}
					if (frameCounter >= (double)(num190 - num191 + 3f + (float)(5 * ++num192)))
					{
						num183 = 0;
					}
				}
				else if (ai[0] == 5f)
				{
					num183 = 3;
				}
				else if (ai[0] == 6f)
				{
					if (num183 > 4)
					{
						frameCounter = 0.0;
					}
					num183 = 1;
					frameCounter = (int)ai[1];
					int num193 = 0;
					if (frameCounter >= (double)(8 * ++num193))
					{
						num183 = 2;
					}
					if (frameCounter >= (double)(8 * ++num193))
					{
						num183 = 3;
					}
					if (frameCounter >= (double)(8 * ++num193))
					{
						num183 = 4;
					}
					if (frameCounter >= (double)(8 * ++num193))
					{
						num183 = 3;
					}
					if (frameCounter >= (double)(8 * ++num193))
					{
						num183 = 4;
					}
					if (frameCounter >= (double)(8 * ++num193))
					{
						num183 = 3;
					}
					if (frameCounter >= (double)(8 * ++num193))
					{
						num183 = 2;
					}
					if (frameCounter >= (double)(8 * ++num193))
					{
						num183 = 1;
					}
					if (frameCounter >= (double)(8 * ++num193))
					{
						num183 = 0;
					}
				}
				else
				{
					num183 = 0;
				}
				frame.Y = num * num183;
				break;
			}
			case 552:
			case 553:
			case 554:
				if (ai[0] > 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 10 || frame.Y > num * 13 || ai[1] == 29f)
					{
						frame.Y = num * 10;
						frameCounter = 0.0;
					}
					if ((frameCounter += 1.0) >= 6.0 && frame.Y < num * 13)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 9;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0);
				break;
			case 572:
			case 573:
				if (ai[0] > 0f && ai[1] == 0f)
				{
					spriteDirection = direction;
					if (frame.Y != num * 8 || frameCounter > 2.0)
					{
						frame.Y = num * 8;
						frameCounter = 0.0;
					}
					if (frameCounter == 0.0)
					{
						frameCounter = 1.0;
						EmoteBubble.NewBubble(3, new WorldUIAnchor(this), 60);
					}
					break;
				}
				if (ai[1] == 1f)
				{
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
					{
						frameCounter = 0.0;
						frame.Y = num * 17;
						break;
					}
					if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = num * 8;
						break;
					}
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 64.0 || frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = num * ((int)(frameCounter / 8.0) + 8);
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 16;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0);
				break;
			case 566:
			case 567:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0);
				break;
			case 576:
			case 577:
			{
				int num177 = frame.Y;
				frame.Width = 80;
				if (ai[0] > 0f && ai[1] == 0f)
				{
					spriteDirection = direction;
					if (num177 < 11 || num177 > 20)
					{
						num177 = 11;
						frameCounter = 0.0;
					}
					int num178 = 4;
					if (num177 == 13 || num177 == 19)
					{
						num178 = 8;
					}
					if (num177 == 14 || num177 == 18)
					{
						num178 = 2;
					}
					if ((frameCounter += 1.0) >= (double)num178 && num177 < 20)
					{
						frameCounter = 0.0;
						num177++;
					}
				}
				else if (ai[0] > 0f && ai[1] == 2f)
				{
					spriteDirection = direction;
					if (num177 < 37 || num177 > 47)
					{
						num177 = 39;
						frameCounter = 0.0;
					}
					int num179 = 5;
					if (num177 == 42)
					{
						num179 = 6;
					}
					if (num177 == 45)
					{
						num179 = 8;
					}
					if (num177 == 46)
					{
						num179 = 4;
					}
					if (num177 == 47)
					{
						num179 = 26;
					}
					if (num177 == 37 || num177 == 38)
					{
						num179 = 7;
					}
					bool flag12 = true;
					if (num177 == 46 && velocity.Y != 0f)
					{
						flag12 = false;
					}
					if (num177 == 38)
					{
						flag12 = false;
					}
					if (flag12)
					{
						frameCounter += 1.0;
					}
					if (frameCounter >= (double)num179)
					{
						if (num177 < 47)
						{
							frameCounter = 0.0;
							num177++;
						}
						else
						{
							num177 = 37;
							frameCounter = 0.0;
						}
					}
				}
				else if (ai[0] > 0f && ai[1] == 1f)
				{
					spriteDirection = direction;
					if (num177 < 21 || num177 > 38)
					{
						num177 = 21;
						frameCounter = 0.0;
					}
					int num180 = 5;
					if ((frameCounter += 1.0) >= (double)num180 && num177 < 38)
					{
						frameCounter = 0.0;
						num177++;
					}
				}
				else
				{
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					if (velocity.Y != 0f)
					{
						frameCounter = 0.0;
						num177 = 43;
					}
					else if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						num177 = 0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X);
						if (frameCounter >= 60.0 || frameCounter < 0.0)
						{
							frameCounter = 0.0;
						}
						num177 = 1 + (int)(frameCounter / 6.0);
					}
				}
				frame.Y = num177;
				break;
			}
			case 570:
			case 571:
				if (ai[1] > 0f && ai[0] > 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 10 || frame.Y > num * 15 || ai[1] == 59f)
					{
						frame.Y = num * 10;
						frameCounter = 0.0;
					}
					int num80 = 5;
					if (frame.Y == num * 14)
					{
						num80 = 35;
					}
					if ((frameCounter += 1.0) >= (double)num80 && frame.Y < num * 15)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 9;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0 + 2.0);
				break;
			case 561:
			case 562:
			case 563:
				if (ai[1] > 0f && ai[0] > 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 10 || frame.Y > num * 13 || ai[1] == 89f)
					{
						frame.Y = num * 10;
						frameCounter = 0.0;
					}
					if ((frameCounter += 1.0) >= 6.0 && frame.Y < num * 13)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 9;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 8.0);
				break;
			case 555:
			case 556:
			case 557:
				if (ai[1] > 0f && ai[0] > 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 10 || frame.Y > num * 16 || ai[1] == 41f)
					{
						frame.Y = num * 10;
						frameCounter = 0.0;
					}
					if ((frameCounter += 1.0) >= 6.0 && frame.Y < num * 16)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 64.0 || frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * ((int)(frameCounter / 8.0) + 2);
				break;
			case 558:
			case 559:
			case 560:
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				float num156 = velocity.ToRotation();
				if (velocity.X < 0f)
				{
					num156 += (float)Math.PI;
				}
				if (ai[0] != 2f)
				{
					num156 = velocity.X * 0.1f;
				}
				rotation = num156;
				if (ai[0] == 2f)
				{
					frame.Y = num * 4;
				}
				else if ((frameCounter += 1.0) >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			case 578:
				rotation = velocity.X * 0.1f;
				if ((frameCounter += 1.0) >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			case 574:
			case 575:
			{
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				float num88 = velocity.ToRotation();
				if (velocity.X < 0f)
				{
					num88 += (float)Math.PI;
				}
				rotation = rotation.AngleTowards(num88, 0.02f);
				if (ai[0] != 0f)
				{
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
					}
					int num89 = 4;
					if (frame.Y >= num * 5)
					{
						num89 = 8;
					}
					Vector2 vector = base.Center + new Vector2(56 * spriteDirection, -30f).RotatedBy(rotation);
					if ((frameCounter += 1.0) >= (double)num89 && frame.Y < num * 9)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y == num * 9)
						{
							for (int k = 0; k < 8; k++)
							{
								Dust dust2 = Dust.NewDustDirect(vector, 0, 0, 6, 0f, 0f, 100);
								Dust dust = dust2;
								dust.velocity *= 3f;
								dust2.scale = 0.6f;
								dust2.fadeIn = 1.2f;
								dust2.noGravity = true;
								dust2.noLight = true;
							}
						}
					}
					if (frame.Y < num * 9 || !(ai[0] < 3f))
					{
						break;
					}
					Vector2 value = vector;
					Vector2 value2 = vector + (oldPos[3] - base.position);
					int maxValue = 5;
					if (frameCounter > 60.0)
					{
						maxValue = 4;
					}
					if (frameCounter > 180.0)
					{
						maxValue = 3;
					}
					if (frameCounter > 300.0)
					{
						maxValue = 2;
					}
					if (frameCounter > 600.0)
					{
						maxValue = 1;
					}
					for (int l = 0; l < 2; l++)
					{
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust3 = Dust.NewDustDirect(Vector2.Lerp(value2, value, (float)l / 10f + 0.1f), 0, 0, 6, 0f, 0f, 50);
							dust3.scale = 0.3f;
							dust3.fadeIn = 1.5f;
							dust3.noGravity = true;
							dust3.noLight = true;
						}
					}
				}
				else if ((frameCounter += 1.0) >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			case 549:
				spriteDirection = 1;
				rotation = 0f;
				if ((frameCounter += 1.0) >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 594:
				spriteDirection = 1;
				frame.Y = (int)ai[2];
				frame.Width = 32;
				break;
			case 564:
			case 565:
			{
				int y = frame.Y;
				frame.Width = 80;
				frame.Height = 80;
				if (ai[0] > 0f && ai[1] == 0f)
				{
					spriteDirection = direction;
					if (y < 5 || y > 13)
					{
						frameCounter = 0.0;
					}
					y = 5;
					frameCounter += 1.0;
					int num97 = 0;
					if (frameCounter >= (double)(7 * ++num97))
					{
						y = 6;
					}
					if (frameCounter >= (double)(7 * ++num97))
					{
						y = 7;
					}
					if (frameCounter >= (double)(7 * ++num97))
					{
						y = 5;
					}
					if (frameCounter >= (double)(7 * ++num97))
					{
						y = 6;
					}
					if (frameCounter >= (double)(7 * ++num97))
					{
						y = 7;
					}
					if (frameCounter >= (double)(7 * ++num97))
					{
						y = 5;
					}
					if (frameCounter >= (double)(7 * ++num97))
					{
						y = 6;
					}
					if (frameCounter >= (double)(7 * ++num97))
					{
						y = 7;
					}
					if (frameCounter >= (double)(7 * ++num97))
					{
						y = 8;
					}
					if (frameCounter >= (double)(7 * ++num97))
					{
						y = 9;
					}
					double num98 = frameCounter;
					int num29 = num97 + 1;
					num97 = num29;
					if (num98 >= (double)(7 * num29))
					{
						y = 10;
					}
					double num99 = frameCounter;
					num29 = num97 + 1;
					num97 = num29;
					if (num99 >= (double)(7 * num29))
					{
						y = 11;
					}
					double num100 = frameCounter;
					num29 = num97 + 1;
					num97 = num29;
					if (num100 >= (double)(7 * num29))
					{
						y = 12;
					}
					double num101 = frameCounter;
					num29 = num97 + 1;
					num97 = num29;
					if (num101 >= (double)(7 * num29))
					{
						y = 5;
						frameCounter = 0.0;
					}
				}
				else if (ai[0] > 0f && ai[1] == 1f)
				{
					spriteDirection = direction;
					if (y < 13 || y > 25)
					{
						frameCounter = 0.0;
					}
					y = 13;
					frameCounter += 1.0;
					int num102 = 0;
					double num103 = frameCounter;
					int num29 = num102 + 1;
					num102 = num29;
					if (num103 >= (double)(8 * num29))
					{
						y = 14;
					}
					double num104 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num104 >= (double)(8 * num29))
					{
						y = 15;
					}
					double num105 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num105 >= (double)(8 * num29))
					{
						y = 16;
					}
					double num106 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num106 >= (double)(8 * num29))
					{
						y = 17;
					}
					double num107 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num107 >= (double)(8 * num29))
					{
						y = 18;
					}
					double num108 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num108 >= (double)(8 * num29))
					{
						y = 19;
					}
					double num109 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num109 >= (double)(8 * num29))
					{
						y = 20;
					}
					double num110 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num110 >= (double)(8 * num29))
					{
						y = 18;
					}
					double num111 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num111 >= (double)(8 * num29))
					{
						y = 19;
					}
					double num112 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num112 >= (double)(8 * num29))
					{
						y = 20;
					}
					double num113 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num113 >= (double)(8 * num29))
					{
						y = 21;
					}
					double num114 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num114 >= (double)(8 * num29))
					{
						y = 22;
					}
					double num115 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num115 >= (double)(8 * num29))
					{
						y = 23;
					}
					double num116 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num116 >= (double)(8 * num29))
					{
						y = 24;
					}
					double num117 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num117 >= (double)(8 * num29))
					{
						y = 25;
					}
					double num118 = frameCounter;
					num29 = num102 + 1;
					num102 = num29;
					if (num118 >= (double)(8 * num29))
					{
						y = 14;
						frameCounter = 0.0;
					}
				}
				else if (ai[0] > 0f && ai[1] == 2f)
				{
					spriteDirection = direction;
					if (y < 26 || y > 40)
					{
						frameCounter = 0.0;
					}
					y = 26;
					frameCounter += 1.0;
					int num119 = 0;
					double num120 = frameCounter;
					int num29 = num119 + 1;
					num119 = num29;
					if (num120 >= (double)(8 * num29))
					{
						y = 27;
					}
					double num121 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num121 >= (double)(8 * num29))
					{
						y = 28;
					}
					double num122 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num122 >= (double)(8 * num29))
					{
						y = 29;
					}
					double num123 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num123 >= (double)(8 * num29))
					{
						y = 26;
					}
					double num124 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num124 >= (double)(8 * num29))
					{
						y = 27;
					}
					double num125 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num125 >= (double)(8 * num29))
					{
						y = 28;
					}
					double num126 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num126 >= (double)(8 * num29))
					{
						y = 29;
					}
					double num127 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num127 >= (double)(8 * num29))
					{
						y = 26;
					}
					double num128 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num128 >= (double)(8 * num29))
					{
						y = 27;
					}
					double num129 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num129 >= (double)(8 * num29))
					{
						y = 28;
					}
					double num130 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num130 >= (double)(8 * num29))
					{
						y = 29;
					}
					double num131 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num131 >= (double)(8 * num29))
					{
						y = 30;
					}
					double num132 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num132 >= (double)(8 * num29))
					{
						y = 31;
					}
					double num133 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num133 >= (double)(8 * num29))
					{
						y = 32;
					}
					double num134 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num134 >= (double)(8 * num29))
					{
						y = 33;
					}
					double num135 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num135 >= (double)(8 * num29))
					{
						y = 34;
					}
					double num136 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num136 >= (double)(8 * num29))
					{
						y = 35;
					}
					double num137 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num137 >= (double)(8 * num29))
					{
						y = 36;
					}
					double num138 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num138 >= (double)(8 * num29))
					{
						y = 37;
					}
					double num139 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num139 >= (double)(8 * num29))
					{
						y = 38;
					}
					double num140 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num140 >= (double)(8 * num29))
					{
						y = 39;
					}
					double num141 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num141 >= (double)(8 * num29))
					{
						y = 40;
					}
					double num142 = frameCounter;
					num29 = num119 + 1;
					num119 = num29;
					if (num142 >= (double)(8 * num29))
					{
						y = 26;
						frameCounter = 0.0;
					}
				}
				else
				{
					frameCounter = frameCounter + (double)(velocity.Length() * 0.1f) + 1.0;
					if (frameCounter >= 40.0 || frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					y = (int)(frameCounter / 8.0);
				}
				frame.Y = y;
				break;
			}
			case 620:
				if (ai[1] > 0f && ai[0] > 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 14 || frame.Y > num * 20 || ai[1] == 59f)
					{
						frame.Y = num * 14;
						frameCounter = 0.0;
					}
					int num151 = 5;
					if (frame.Y == num * 17 || frame.Y == num * 16)
					{
						num151 = 3;
					}
					if ((frameCounter += 1.0) >= (double)num151 && frame.Y < num * 20)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (ai[1] > 0f && frame.Y == num * 18)
						{
							frame.Y = num * 16;
						}
					}
					break;
				}
				if (wet)
				{
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					if (spriteDirection != direction)
					{
						rotation *= -1f;
						spriteDirection = direction;
					}
					float num152 = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
					if (Math.Abs(rotation - num152) >= (float)Math.PI)
					{
						if (num152 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					rotation = (rotation * 4f + num152) / 5f;
					frameCounter += Math.Abs(velocity.Length());
					frameCounter += 1.0;
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 13)
					{
						frame.Y = num * 8;
					}
					else if (frame.Y / num < 8)
					{
						frame.Y = num * 13;
					}
					break;
				}
				if ((double)rotation > 3.14)
				{
					rotation -= 6.28f;
				}
				if ((double)rotation > -0.01 && (double)rotation < 0.01)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.9f;
				}
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 7)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 17:
			case 18:
			case 19:
			case 20:
			case 21:
			case 22:
			case 26:
			case 27:
			case 28:
			case 31:
			case 37:
			case 38:
			case 44:
			case 54:
			case 73:
			case 77:
			case 78:
			case 79:
			case 80:
			case 104:
			case 107:
			case 108:
			case 120:
			case 124:
			case 140:
			case 142:
			case 159:
			case 160:
			case 162:
			case 167:
			case 178:
			case 181:
			case 185:
			case 196:
			case 197:
			case 198:
			case 201:
			case 202:
			case 203:
			case 207:
			case 208:
			case 209:
			case 212:
			case 213:
			case 227:
			case 228:
			case 229:
			case 287:
			case 294:
			case 295:
			case 296:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 322:
			case 323:
			case 324:
			case 326:
			case 338:
			case 339:
			case 340:
			case 353:
			case 368:
			case 369:
			case 441:
			case 453:
			case 460:
			case 462:
			case 463:
			case 489:
			case 534:
			case 550:
			case 588:
			case 630:
			case 632:
			case 633:
			case 635:
			case 637:
			case 638:
			case 656:
			{
				int num21 = (isLikeATownNPC ? NPCID.Sets.ExtraFramesCount[type] : 0);
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					int num22 = Main.npcFrameCount[type] - NPCID.Sets.AttackFrameCount[type];
					if (ai[0] >= 20f && ai[0] <= 22f)
					{
						int num23 = frame.Y / num;
						switch ((int)ai[0])
						{
						case 20:
							if (type == 656)
							{
								if (ai[1] > 30f && (num23 < 7 || num23 > 9))
								{
									num23 = 7;
								}
								if (num23 > 0)
								{
									frameCounter += 1.0;
								}
								if (frameCounter > 4.0)
								{
									frameCounter = 0.0;
									num23++;
									if (num23 > 8 && ai[1] > 30f)
									{
										num23 = 8;
									}
									if (num23 > 9)
									{
										num23 = 0;
									}
								}
							}
							if (type == 637)
							{
								if (ai[1] > 30f && (num23 < 10 || num23 > 16))
								{
									num23 = 10;
								}
								if (num23 > 0)
								{
									frameCounter += 1.0;
								}
								if (frameCounter > 4.0)
								{
									frameCounter = 0.0;
									num23++;
									if (num23 > 13 && ai[1] > 30f)
									{
										num23 = 13;
									}
									if (num23 > 16)
									{
										num23 = 0;
									}
								}
							}
							if (type != 638)
							{
								break;
							}
							if (ai[1] > 30f && (num23 < 23 || num23 > 27))
							{
								num23 = 23;
							}
							if (num23 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num23++;
								if (num23 > 26 && ai[1] > 30f)
								{
									num23 = 24;
								}
								if (num23 > 27)
								{
									num23 = 0;
								}
							}
							break;
						case 21:
							if (type == 656)
							{
								if (ai[1] > 30f && (num23 < 10 || num23 > 16))
								{
									num23 = 10;
								}
								if (num23 > 0)
								{
									frameCounter += 1.0;
								}
								if (frameCounter > 4.0)
								{
									frameCounter = 0.0;
									num23++;
									if (num23 > 13 && ai[1] > 30f)
									{
										num23 = 13;
									}
									if (num23 > 16)
									{
										num23 = 0;
									}
								}
							}
							if (type == 637)
							{
								if (ai[1] > 30f && (num23 < 17 || num23 > 21))
								{
									num23 = 17;
								}
								if (num23 > 0)
								{
									frameCounter += 1.0;
								}
								if (frameCounter > 4.0)
								{
									frameCounter = 0.0;
									num23++;
									if (num23 > 19 && ai[1] > 30f)
									{
										num23 = 19;
									}
									if (num23 > 21)
									{
										num23 = 0;
									}
								}
							}
							if (type != 638)
							{
								break;
							}
							if (ai[1] > 30f && (num23 < 17 || num23 > 22))
							{
								num23 = 17;
							}
							if (num23 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num23++;
								if (num23 > 21 && ai[1] > 30f)
								{
									num23 = 18;
								}
								if (num23 > 22)
								{
									num23 = 0;
								}
							}
							break;
						case 22:
							if (type == 656)
							{
								int num24 = Main.npcFrameCount[type];
								if (ai[1] > 40f && (num23 < 17 || num23 >= num24))
								{
									num23 = 17;
								}
								if (num23 > 0)
								{
									frameCounter += 1.0;
								}
								if (frameCounter > 4.0)
								{
									frameCounter = 0.0;
									num23++;
									if (num23 > 20 && ai[1] > 40f)
									{
										num23 = 19;
									}
									if (num23 >= num24)
									{
										num23 = 0;
									}
								}
							}
							if (type != 637)
							{
								break;
							}
							if (ai[1] > 30f && (num23 < 17 || num23 > 27))
							{
								num23 = 17;
							}
							if (num23 > 0)
							{
								frameCounter += 1.0;
							}
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num23++;
								if (num23 > 27)
								{
									num23 = ((!(ai[1] <= 30f)) ? 22 : 20);
								}
								else if (ai[1] <= 30f && num23 == 22)
								{
									num23 = 0;
								}
								else if (ai[1] > 30f && num23 > 19 && num23 < 22)
								{
									num23 = 22;
								}
							}
							break;
						}
						frame.Y = num23 * num;
					}
					else if (ai[0] == 2f)
					{
						frameCounter += 1.0;
						if (frame.Y / num == num22 - 1 && frameCounter >= 5.0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						else if (frame.Y / num == 0 && frameCounter >= 40.0)
						{
							frame.Y = num * (num22 - 1);
							frameCounter = 0.0;
						}
						else if (frame.Y != 0 && frame.Y != num * (num22 - 1))
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
					}
					else if (ai[0] == 11f)
					{
						frameCounter += 1.0;
						if (frame.Y / num == num22 - 1 && frameCounter >= 50.0)
						{
							if (frameCounter == 50.0)
							{
								int num25 = Main.rand.Next(4);
								for (int i = 0; i < 3 + num25; i++)
								{
									int num26 = Dust.NewDust(base.Center + Vector2.UnitX * -direction * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, -direction, 1f);
									Dust dust = Main.dust[num26];
									dust.velocity /= 2f;
									Main.dust[num26].scale = 0.8f;
								}
								if (Main.rand.Next(30) == 0)
								{
									int num27 = Gore.NewGore(base.Center + Vector2.UnitX * -direction * 8f, Vector2.Zero, Main.rand.Next(580, 583));
									Gore gore = Main.gore[num27];
									gore.velocity /= 2f;
									Main.gore[num27].velocity.Y = Math.Abs(Main.gore[num27].velocity.Y);
									Main.gore[num27].velocity.X = (0f - Math.Abs(Main.gore[num27].velocity.X)) * (float)direction;
								}
							}
							if (frameCounter >= 100.0 && Main.rand.Next(20) == 0)
							{
								frame.Y = 0;
								frameCounter = 0.0;
							}
						}
						else if (frame.Y / num == 0 && frameCounter >= 20.0)
						{
							frame.Y = num * (num22 - 1);
							frameCounter = 0.0;
							if (Main.netMode != 1)
							{
								EmoteBubble.NewBubble(89, new WorldUIAnchor(this), 90);
							}
						}
						else if (frame.Y != 0 && frame.Y != num * (num22 - 1))
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
					}
					else if (ai[0] == 5f)
					{
						frame.Y = num * (num22 - 3);
						if (type == 637)
						{
							frame.Y = num * 19;
						}
						frameCounter = 0.0;
					}
					else if (ai[0] == 6f)
					{
						frameCounter += 1.0;
						int num28 = frame.Y / num;
						int num29 = num22 - num28;
						if ((uint)(num29 - 1) > 1u && (uint)(num29 - 4) > 1u && num28 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num30 = 0;
						num30 = ((!(frameCounter < 10.0)) ? ((frameCounter < 16.0) ? (num22 - 5) : ((frameCounter < 46.0) ? (num22 - 4) : ((frameCounter < 60.0) ? (num22 - 5) : ((!(frameCounter < 66.0)) ? ((frameCounter < 72.0) ? (num22 - 5) : ((frameCounter < 102.0) ? (num22 - 4) : ((frameCounter < 108.0) ? (num22 - 5) : ((!(frameCounter < 114.0)) ? ((frameCounter < 120.0) ? (num22 - 5) : ((frameCounter < 150.0) ? (num22 - 4) : ((frameCounter < 156.0) ? (num22 - 5) : ((!(frameCounter < 162.0)) ? ((frameCounter < 168.0) ? (num22 - 5) : ((frameCounter < 198.0) ? (num22 - 4) : ((frameCounter < 204.0) ? (num22 - 5) : ((!(frameCounter < 210.0)) ? ((frameCounter < 216.0) ? (num22 - 5) : ((frameCounter < 246.0) ? (num22 - 4) : ((frameCounter < 252.0) ? (num22 - 5) : ((!(frameCounter < 258.0)) ? ((frameCounter < 264.0) ? (num22 - 5) : ((frameCounter < 294.0) ? (num22 - 4) : ((frameCounter < 300.0) ? (num22 - 5) : 0))) : 0)))) : 0)))) : 0)))) : 0)))) : 0)))) : 0);
						if (num30 == num22 - 4 && num28 == num22 - 5)
						{
							Vector2 position = base.Center + new Vector2(10 * direction, -4f);
							for (int j = 0; j < 8; j++)
							{
								int num31 = Main.rand.Next(139, 143);
								int num32 = Dust.NewDust(position, 0, 0, num31, velocity.X + (float)direction, velocity.Y - 2.5f, 0, default(Color), 1.2f);
								Main.dust[num32].velocity.X += (float)direction * 1.5f;
								Dust dust = Main.dust[num32];
								dust.position -= new Vector2(4f);
								dust = Main.dust[num32];
								dust.velocity *= 2f;
								Main.dust[num32].scale = 0.7f + Main.rand.NextFloat() * 0.3f;
							}
						}
						frame.Y = num * num30;
						if (frameCounter >= 300.0)
						{
							frameCounter = 0.0;
						}
					}
					else if ((ai[0] == 7f || ai[0] == 19f) && !NPCID.Sets.IsTownPet[type])
					{
						frameCounter += 1.0;
						int num33 = frame.Y / num;
						int num29 = num22 - num33;
						if ((uint)(num29 - 1) > 1u && (uint)(num29 - 4) > 1u && num33 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num34 = 0;
						if (frameCounter < 16.0)
						{
							num34 = 0;
						}
						else if (frameCounter == 16.0 && Main.netMode != 1)
						{
							EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), 112);
						}
						else if (frameCounter < 128.0)
						{
							num34 = ((frameCounter % 16.0 < 8.0) ? (num22 - 2) : 0);
						}
						else if (frameCounter < 160.0)
						{
							num34 = 0;
						}
						else if (frameCounter != 160.0 || Main.netMode == 1)
						{
							num34 = ((frameCounter < 220.0) ? ((frameCounter % 12.0 < 6.0) ? (num22 - 2) : 0) : 0);
						}
						else
						{
							EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), 60);
						}
						frame.Y = num * num34;
						if (frameCounter >= 220.0)
						{
							frameCounter = 0.0;
						}
					}
					else if (ai[0] == 9f)
					{
						frameCounter += 1.0;
						int num35 = frame.Y / num;
						int num29 = num22 - num35;
						if ((uint)(num29 - 1) > 1u && (uint)(num29 - 4) > 1u && num35 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num36 = 0;
						num36 = ((!(frameCounter < 10.0)) ? ((!(frameCounter < 16.0)) ? (num22 - 4) : (num22 - 5)) : 0);
						if (ai[1] < 16f)
						{
							num36 = num22 - 5;
						}
						if (ai[1] < 10f)
						{
							num36 = 0;
						}
						frame.Y = num * num36;
					}
					else if (ai[0] == 18f)
					{
						frameCounter += 1.0;
						int num37 = frame.Y / num;
						int num29 = num22 - num37;
						if ((uint)(num29 - 1) > 1u && (uint)(num29 - 4) > 1u && num37 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num38 = 0;
						if (frameCounter < 10.0)
						{
							num38 = 0;
						}
						else if (frameCounter < 16.0)
						{
							num38 = num22 - 1;
						}
						else
						{
							num38 = num22 - 2;
						}
						if (ai[1] < 16f)
						{
							num38 = num22 - 1;
						}
						if (ai[1] < 10f)
						{
							num38 = 0;
						}
						num38 = Main.npcFrameCount[type] - 2;
						frame.Y = num * num38;
					}
					else if (ai[0] == 10f || ai[0] == 13f)
					{
						frameCounter += 1.0;
						int num39 = frame.Y / num;
						int num29 = num39 - num22;
						if ((uint)num29 > 3u && num39 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num40 = 10;
						int num41 = 6;
						if (type == 633)
						{
							num40 = 0;
							num41 = 2;
						}
						int num42 = 0;
						num42 = ((!(frameCounter < (double)num40)) ? ((frameCounter < (double)(num40 + num41)) ? num22 : ((frameCounter < (double)(num40 + num41 * 2)) ? (num22 + 1) : ((frameCounter < (double)(num40 + num41 * 3)) ? (num22 + 2) : ((frameCounter < (double)(num40 + num41 * 4)) ? (num22 + 3) : 0)))) : 0);
						frame.Y = num * num42;
					}
					else if (ai[0] == 15f)
					{
						frameCounter += 1.0;
						int num43 = frame.Y / num;
						int num29 = num43 - num22;
						if ((uint)num29 > 3u && num43 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						float num44 = ai[1] / (float)NPCID.Sets.AttackTime[type];
						int num45 = 0;
						num45 = ((num44 > 0.65f) ? num22 : ((num44 > 0.5f) ? (num22 + 1) : ((num44 > 0.35f) ? (num22 + 2) : ((num44 > 0f) ? (num22 + 3) : 0))));
						frame.Y = num * num45;
					}
					else if (ai[0] == 12f)
					{
						frameCounter += 1.0;
						int num46 = frame.Y / num;
						int num29 = num46 - num22;
						if ((uint)num29 > 4u && num46 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num47 = num22 + GetShootingFrame(ai[2]);
						frame.Y = num * num47;
					}
					else if (ai[0] == 14f)
					{
						frameCounter += 1.0;
						int num48 = frame.Y / num;
						int num29 = num48 - num22;
						if ((uint)num29 > 1u && num48 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						int num49 = 12;
						int num50 = ((frameCounter % (double)num49 * 2.0 < (double)num49) ? num22 : (num22 + 1));
						frame.Y = num * num50;
					}
					else if (CanTalk && (ai[0] == 3f || ai[0] == 4f))
					{
						frameCounter += 1.0;
						int num51 = frame.Y / num;
						int num29 = num22 - num51;
						if ((uint)(num29 - 1) > 1u && (uint)(num29 - 4) > 1u && num51 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						bool flag = ai[0] == 3f;
						int num52 = 0;
						int num53 = 0;
						int num54 = -1;
						int num55 = -1;
						if (frameCounter < 10.0)
						{
							num52 = 0;
						}
						else if (frameCounter < 16.0)
						{
							num52 = num22 - 5;
						}
						else if (frameCounter < 46.0)
						{
							num52 = num22 - 4;
						}
						else if (frameCounter < 60.0)
						{
							num52 = num22 - 5;
						}
						else if (frameCounter < 216.0)
						{
							num52 = 0;
						}
						else if (frameCounter == 216.0 && Main.netMode != 1)
						{
							num54 = 70;
						}
						else if (frameCounter < 286.0)
						{
							num52 = ((frameCounter % 12.0 < 6.0) ? (num22 - 2) : 0);
						}
						else if (frameCounter < 320.0)
						{
							num52 = 0;
						}
						else if (frameCounter != 320.0 || Main.netMode == 1)
						{
							num52 = ((frameCounter < 420.0) ? ((frameCounter % 16.0 < 8.0) ? (num22 - 2) : 0) : 0);
						}
						else
						{
							num54 = 100;
						}
						if (frameCounter < 70.0)
						{
							num53 = 0;
						}
						else if (frameCounter != 70.0 || Main.netMode == 1)
						{
							num53 = ((frameCounter < 160.0) ? ((frameCounter % 16.0 < 8.0) ? (num22 - 2) : 0) : ((frameCounter < 166.0) ? (num22 - 5) : ((frameCounter < 186.0) ? (num22 - 4) : ((frameCounter < 200.0) ? (num22 - 5) : ((!(frameCounter < 320.0)) ? ((frameCounter < 326.0) ? (num22 - 1) : 0) : 0)))));
						}
						else
						{
							num55 = 90;
						}
						if (flag)
						{
							NPC nPC = Main.npc[(int)ai[2]];
							if (num54 != -1)
							{
								EmoteBubble.NewBubbleNPC(new WorldUIAnchor(this), num54, new WorldUIAnchor(nPC));
							}
							if (num55 != -1 && nPC.CanTalk)
							{
								EmoteBubble.NewBubbleNPC(new WorldUIAnchor(nPC), num55, new WorldUIAnchor(this));
							}
						}
						frame.Y = num * (flag ? num52 : num53);
						if (frameCounter >= 420.0)
						{
							frameCounter = 0.0;
						}
					}
					else if (CanTalk && (ai[0] == 16f || ai[0] == 17f))
					{
						frameCounter += 1.0;
						int num56 = frame.Y / num;
						int num29 = num22 - num56;
						if ((uint)(num29 - 1) > 1u && (uint)(num29 - 4) > 1u && num56 != 0)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						bool flag2 = ai[0] == 16f;
						int num57 = 0;
						int num58 = -1;
						if (frameCounter < 10.0)
						{
							num57 = 0;
						}
						else if (frameCounter < 16.0)
						{
							num57 = num22 - 5;
						}
						else if (frameCounter < 22.0)
						{
							num57 = num22 - 4;
						}
						else if (frameCounter < 28.0)
						{
							num57 = num22 - 5;
						}
						else if (frameCounter < 34.0)
						{
							num57 = num22 - 4;
						}
						else if (frameCounter < 40.0)
						{
							num57 = num22 - 5;
						}
						else if (frameCounter == 40.0 && Main.netMode != 1)
						{
							num58 = 45;
						}
						else if (frameCounter < 70.0)
						{
							num57 = num22 - 4;
						}
						else if (frameCounter < 76.0)
						{
							num57 = num22 - 5;
						}
						else if (frameCounter < 82.0)
						{
							num57 = num22 - 4;
						}
						else if (frameCounter < 88.0)
						{
							num57 = num22 - 5;
						}
						else if (frameCounter < 94.0)
						{
							num57 = num22 - 4;
						}
						else if (frameCounter < 100.0)
						{
							num57 = num22 - 5;
						}
						else if (frameCounter == 100.0 && Main.netMode != 1)
						{
							num58 = 45;
						}
						else if (frameCounter < 130.0)
						{
							num57 = num22 - 4;
						}
						else if (frameCounter < 136.0)
						{
							num57 = num22 - 5;
						}
						else if (frameCounter < 142.0)
						{
							num57 = num22 - 4;
						}
						else if (frameCounter < 148.0)
						{
							num57 = num22 - 5;
						}
						else if (frameCounter < 154.0)
						{
							num57 = num22 - 4;
						}
						else if (frameCounter < 160.0)
						{
							num57 = num22 - 5;
						}
						else if (frameCounter != 160.0 || Main.netMode == 1)
						{
							num57 = ((frameCounter < 220.0) ? (num22 - 4) : ((frameCounter < 226.0) ? (num22 - 5) : 0));
						}
						else
						{
							num58 = 75;
						}
						if (flag2 && num58 != -1)
						{
							int num59 = (int)localAI[2];
							int num60 = (int)localAI[3];
							int num61 = (int)Main.npc[(int)ai[2]].localAI[3];
							int num62 = (int)Main.npc[(int)ai[2]].localAI[2];
							int num63 = 3 - num59 - num60;
							int num64 = 0;
							if (frameCounter == 40.0)
							{
								num64 = 1;
							}
							if (frameCounter == 100.0)
							{
								num64 = 2;
							}
							if (frameCounter == 160.0)
							{
								num64 = 3;
							}
							int num65 = 3 - num64;
							int num66 = -1;
							int num67 = 0;
							while (num66 < 0)
							{
								num29 = num67 + 1;
								num67 = num29;
								if (num29 >= 100)
								{
									break;
								}
								num66 = Main.rand.Next(2);
								if (num66 == 0 && num62 >= num60)
								{
									num66 = -1;
								}
								if (num66 == 1 && num61 >= num59)
								{
									num66 = -1;
								}
								if (num66 == -1 && num65 <= num63)
								{
									num66 = 2;
								}
							}
							if (num66 == 0)
							{
								Main.npc[(int)ai[2]].localAI[3] += 1f;
								num61++;
							}
							if (num66 == 1)
							{
								Main.npc[(int)ai[2]].localAI[2] += 1f;
								num62++;
							}
							int num68 = Utils.SelectRandom<int>(Main.rand, 38, 37, 36);
							int num69 = num68;
							switch (num66)
							{
							case 0:
								switch (num68)
								{
								case 38:
									num69 = 37;
									break;
								case 37:
									num69 = 36;
									break;
								case 36:
									num69 = 38;
									break;
								}
								break;
							case 1:
								switch (num68)
								{
								case 38:
									num69 = 36;
									break;
								case 37:
									num69 = 38;
									break;
								case 36:
									num69 = 37;
									break;
								}
								break;
							}
							if (num65 == 0)
							{
								if (num61 >= 2)
								{
									num68 -= 3;
								}
								if (num62 >= 2)
								{
									num69 -= 3;
								}
							}
							EmoteBubble.NewBubble(num68, new WorldUIAnchor(this), num58);
							EmoteBubble.NewBubble(num69, new WorldUIAnchor(Main.npc[(int)ai[2]]), num58);
						}
						frame.Y = num * (flag2 ? num57 : num57);
						if (frameCounter >= 420.0)
						{
							frameCounter = 0.0;
						}
					}
					else if (velocity.X == 0f)
					{
						if (type == 638)
						{
							int num70 = frame.Y / num;
							if (num70 > 7)
							{
								num70 = 0;
							}
							frameCounter += 1.0;
							if (frameCounter > 4.0)
							{
								frameCounter = 0.0;
								num70++;
								if (num70 > 7)
								{
									num70 = 0;
								}
							}
							frame.Y = num70 * num;
						}
						else if (type == 140 || type == 489)
						{
							frame.Y = num;
							frameCounter = 0.0;
						}
						else
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
					}
					else
					{
						int num71 = 6;
						if (type == 632)
						{
							num71 = 12;
						}
						if (type == 534)
						{
							num71 = 12;
						}
						if (type == 638)
						{
							num71 = 12;
						}
						if (type == 656)
						{
							num71 = 12;
						}
						if (type == 489)
						{
							num71 = 8;
							frameCounter += Math.Abs(velocity.X) * 1f;
							frameCounter += 0.5;
						}
						else
						{
							frameCounter += Math.Abs(velocity.X) * 2f;
							frameCounter += 1.0;
						}
						if (type == 462)
						{
							num71 = 9;
						}
						int num72 = num * 2;
						if (type == 638)
						{
							num72 = num * 9;
						}
						if (type == 656)
						{
							num72 = num;
						}
						if (frame.Y < num72)
						{
							frame.Y = num72;
						}
						if (frameCounter > (double)num71)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - num21)
						{
							frame.Y = num72;
						}
					}
				}
				else if (type == 462)
				{
					frameCounter = 0.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
					if (type == 489 || type == 21 || type == 31 || type == 294 || type == 326 || type == 295 || type == 296 || type == 44 || type == 77 || type == 120 || type == 140 || type == 159 || type == 167 || type == 197 || type == 201 || type == 202)
					{
						frame.Y = 0;
					}
					if (type == 638)
					{
						frame.Y = num * 8;
					}
				}
				break;
			}
			case 494:
			case 495:
				if (ai[2] > 0f)
				{
					if (ai[2] < 7f)
					{
						frame.Y = num * 5;
					}
					else if (ai[2] < 14f)
					{
						frame.Y = num * 6;
					}
					else if (ai[2] < 20f)
					{
						frame.Y = num * 7;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num * 2;
					}
					else
					{
						frame.Y = num * 3;
					}
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter < 8.0)
				{
					frame.Y = 0;
					break;
				}
				if (frameCounter < 16.0)
				{
					frame.Y = num;
					break;
				}
				if (frameCounter < 24.0)
				{
					frame.Y = num * 2;
					break;
				}
				if (frameCounter < 32.0)
				{
					frame.Y = num * 3;
					break;
				}
				if (frameCounter < 39.0)
				{
					frame.Y = num * 4;
					break;
				}
				frame.Y = num * 4;
				frameCounter = 0.0;
				break;
			case 541:
				if (ai[0] > 0f)
				{
					float num9 = ai[0];
					if (num9 < 6f)
					{
						frame.Y = num * 4;
					}
					else if (num9 < 105f)
					{
						frame.Y = num * (int)(num9 / 8f % 4f + 5f);
					}
					else if (num9 < 114f)
					{
						frame.Y = num * 9;
					}
					else if (num9 < 135f)
					{
						frame.Y = num * (int)((num9 - 99f - 15f) / 7f + 10f);
					}
					else
					{
						frame.Y = num;
					}
				}
				else
				{
					frameCounter = frameCounter + (double)(velocity.Length() * 0.1f) + 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			case 612:
			case 613:
			{
				if (IsABestiaryIconDummy)
				{
					frameCounter += 1.0;
					if (frameCounter > 50.0)
					{
						frameCounter = 0.0;
						frame.Y = 0;
					}
					frame.Y = (int)Utils.WrappedLerp(0f, 4f, (float)frameCounter / 50f) * num;
					break;
				}
				bool flag9 = true;
				if (frame.Y == 0 && Main.rand.Next(180) != 0)
				{
					flag9 = false;
				}
				if (flag9)
				{
					frameCounter += 1.0;
				}
				if (velocity.X != 0f)
				{
					spriteDirection = Math.Sign(velocity.X);
				}
				int num172 = 10;
				bool flag10 = Math.Abs(velocity.X) > 1f;
				if (ai[1] == 1f)
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
				}
				if (Math.Abs(velocity.Y) > 0.1f || flag10)
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
				}
				else if (frame.Y == 0)
				{
					num172 = 2;
				}
				if (frame.Y == num * 4)
				{
					num172 = 60;
					if (!flag10)
					{
						num172 = 2;
					}
				}
				if (frameCounter >= (double)num172)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= 5)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			case 583:
			case 584:
			case 585:
				rotation = velocity.X * 0.1f;
				if ((frameCounter += 1.0) >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						if (ai[1] < 12f)
						{
							frame.Y = num * 8;
						}
						else if (ai[1] < 34f)
						{
							frame.Y = num * 9;
						}
						else
						{
							frame.Y = num * 8;
						}
						frameCounter = 0.0;
						break;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 7)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 10;
				}
				break;
			case 524:
			case 525:
			case 526:
			case 527:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y <= num)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				break;
			case 528:
			case 529:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 1)
					{
						frame.Y = num;
					}
				}
				else
				{
					frame.Y = num * (Main.npcFrameCount[type] - 1);
					frameCounter = 0.0;
				}
				break;
			case 533:
				if (velocity.Y == 0f && direction != 0)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 48.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = (int)(frameCounter / 6.0) * num;
				if (ai[1] > 0f)
				{
					frame.Y += num * 8;
				}
				break;
			case 496:
			case 497:
				if (ai[0] == 0f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0.0;
					}
					frameCounter += Math.Abs(velocity.X) * 1.1f;
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 4;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
				}
				else if (ai[0] == 5f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 10;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 11;
					}
					else
					{
						frame.Y = num * 3;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 7;
				}
				break;
			case 508:
			case 532:
			case 580:
			case 582:
				if (velocity.Y != 0f)
				{
					frame.Y = num;
					break;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					break;
				}
				if (direction < 0 && velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				if (direction > 0 && velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (frame.Y / num < 2)
				{
					frame.Y = num * 2;
				}
				frameCounter += 1f + Math.Abs(velocity.X) / 2f;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 2;
				}
				break;
			case 509:
			case 581:
				if ((velocity.X > 0f && direction > 0) || (velocity.X < 0f && direction < 0))
				{
					spriteDirection = direction;
				}
				if ((frameCounter += 1.0) >= 3.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 415:
				if (ai[2] < 0f)
				{
					if (frame.Y / num != 8 && frame.Y / num != 9 && frame.Y / num != 0)
					{
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					int num15 = 0;
					int num16 = 18;
					int num17 = 4;
					if (frameCounter > (double)(num16 - num17 * 2))
					{
						num15 = 8 + (int)frameCounter / 4 % 2;
					}
					if (frameCounter > (double)(num16 + num17 * 6))
					{
						num15 = 0;
						frameCounter = 0.0;
					}
					frame.Y = num * num15;
				}
				else if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 2)
					{
						frame.Y = num * 2;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 416:
				if (IsABestiaryIconDummy)
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y < num * 2 || frame.Y > num * 7)
					{
						frame.Y = num * 2;
					}
				}
				else if (Main.netMode != 2 && !Main.dedServ)
				{
					int num204 = (int)ai[0];
					if (Main.npc[num204].active && Main.npc[num204].type == 415 && TextureAssets.Npc[415].IsLoaded)
					{
						frame.Y = Main.npc[num204].frame.Y / (TextureAssets.Npc[415].Height() / Main.npcFrameCount[415]) * num;
					}
				}
				break;
			case 417:
				if (ai[0] == 0f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0.0;
					}
					frameCounter += Math.Abs(velocity.X) * 1.1f;
					frame.Y = (int)(frameCounter / 6.0) * num;
					if (frameCounter >= 48.0)
					{
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter = 0.0;
					frame.Y = num * (9 + (int)(ai[1] / 6f));
				}
				else if (ai[0] == 5f)
				{
					frameCounter = 0.0;
					frame.Y = num * (13 - (int)(ai[1] / 6f));
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 14;
				}
				break;
			case 518:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				break;
			case 419:
				if (ai[2] < 0f)
				{
					int num150 = 1;
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (frame.Y / num >= 9)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
					}
					if (frame.Y / num < 2)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					if (frameCounter >= (double)(num150 * 4 + 6))
					{
						frameCounter = 8.0;
					}
					if (frameCounter < 6.0)
					{
						frame.Y = num * (int)(2.0 + frameCounter / 3.0);
					}
					else
					{
						frame.Y = num * (int)(4.0 + (frameCounter - 6.0) / (double)num150);
					}
				}
				else if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 9;
					}
					if (frame.Y / num < 9)
					{
						frame.Y = num * 9;
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				break;
			case 425:
				if (direction != 0)
				{
					spriteDirection = -direction;
				}
				if (ai[2] == 1f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 3.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 12 || frame.Y < num * 10)
					{
						frame.Y = num * 10;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 9 || frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
				}
				break;
			case 427:
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (velocity.Y != 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 2.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 9 || frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 5 || frame.Y < num)
					{
						frame.Y = num;
					}
				}
				break;
			case 426:
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				if (ai[1] >= 45f)
				{
					if (velocity.Y == 0f)
					{
						frame.Y = num * 8;
						break;
					}
					frameCounter += 1.0;
					if (frameCounter >= 2.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 15 || frame.Y < num * 12)
					{
						frame.Y = num * 12;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 2.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 12 || frame.Y < num * 9)
					{
						frame.Y = num * 9;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 10.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 7 || frame.Y < num)
					{
						frame.Y = num;
					}
				}
				break;
			case 429:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				break;
			case 428:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					if ((frameCounter += 1.0) > 10.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 1)
					{
						frame.Y = 0;
					}
				}
				else if (frame.Y / num != 4)
				{
					if (frameCounter > 0.0)
					{
						frameCounter = 0.0;
					}
					if ((frameCounter -= 1.0) < -10.0 || velocity.Y > 0.6f)
					{
						frame.Y = num * 4;
						frameCounter = 0.0;
					}
				}
				break;
			case 423:
				if (ai[2] == 1f)
				{
					int num147 = 2;
					if (ai[1] >= 30f && ai[1] < 45f)
					{
						num147 = 3;
					}
					frame.Y = num147 * num;
					break;
				}
				if (velocity.Y != 0f)
				{
					frame.Y = num;
					break;
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					break;
				}
				if (velocity.X != 0f)
				{
					spriteDirection = Math.Sign(0f - velocity.X);
				}
				if (frame.Y / num < 4)
				{
					frame.Y = num * 4;
				}
				frameCounter += 1f + Math.Abs(velocity.X) / 2f;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = num * 4;
				}
				break;
			case 421:
				if (ai[0] == 5f)
				{
					frameCounter += 1.0;
				}
				if ((frameCounter += 1.0) >= 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 424:
				if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = -direction;
					}
					if (ai[2] > 0f)
					{
						frame.Y = num * ((ai[1] > 90f) ? (Main.npcFrameCount[type] - 2) : (Main.npcFrameCount[type] - 1));
						frameCounter = 0.0;
						break;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X * 1.3f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 2)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 420:
				if ((frameCounter += 1.0) >= 5.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 411:
				if (ai[1] >= 90f && ai[1] < 180f)
				{
					spriteDirection = -direction;
					frame.Y = num * (Main.npcFrameCount[type] - 1);
					frameCounter = 0.0;
				}
				else if (velocity.Y == 0f)
				{
					if (direction != 0)
					{
						spriteDirection = -direction;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 1)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frame.Y = num;
					frameCounter = 0.0;
				}
				break;
			case 409:
				if (velocity.Y == 0f && ai[1] <= 30f && ai[1] > 0f)
				{
					frame.Y = num * (Main.npcFrameCount[type] - 1);
					frameCounter = 0.0;
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if ((frameCounter += 1.0) >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type] - 2)
					{
						frame.Y = 0;
					}
				}
				break;
			case 410:
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 10.0)
				{
					frameCounter -= 10.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 407:
				if ((frameCounter += 1.0) >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 405:
			case 406:
				if ((frameCounter += 1.0) >= 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 516:
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					frame.Y = num * Main.rand.Next(3);
					frameCounter += Main.rand.Next(3);
				}
				frameCounter += 1.0;
				if (frameCounter > 3.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 3)
					{
						frame.Y = 0;
					}
				}
				break;
			case 418:
				if (ai[0] == 0f || ai[0] == 1f || ai[0] == -1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4)
					{
						frame.Y = 0;
					}
				}
				else if (ai[0] == 2f)
				{
					if (ai[1] < 10f)
					{
						frame.Y = num * 5;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				else if (ai[0] == -2f)
				{
					frameCounter += 1.0;
					if (frameCounter > 12.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 7)
					{
						frame.Y = num * 5;
					}
				}
				break;
			case 1:
			case 16:
			case 59:
			case 71:
			case 81:
			case 138:
			case 147:
			case 183:
			case 184:
			case 204:
			case 225:
			case 302:
			case 304:
			case 333:
			case 334:
			case 335:
			case 336:
			case 535:
			case 537:
			case 658:
			case 659:
				if (type == 302 || type == 304)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (num2 > 0)
				{
					frameCounter += 1.0;
				}
				if (num2 == 4)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 488:
			{
				int num214 = (int)localAI[1];
				if (Framing.GetTileSafely((int)ai[0], (int)ai[1]).frameX >= 36)
				{
					num214 *= -1;
				}
				if (localAI[0] > 24f)
				{
					localAI[0] = 24f;
				}
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
				int num215 = ((num214 == -1) ? 4 : 6);
				int num216 = (int)localAI[0] / num215;
				if (localAI[0] % (float)num215 != 0f)
				{
					num216++;
				}
				if (num216 != 0 && num214 == 1)
				{
					num216 += 5;
				}
				frame.Y = num216 * num;
				break;
			}
			case 430:
			case 431:
			case 432:
			case 433:
			case 434:
			case 435:
			case 436:
			case 591:
				if (ai[2] > 0f)
				{
					if (ai[2] < 5f)
					{
						frame.Y = num * 3;
					}
					else if (ai[2] < 10f)
					{
						frame.Y = num * 4;
					}
					else if (ai[2] < 15f)
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter < 8.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 16.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 32.0)
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 454:
			{
				int num217 = (int)(frameCounter / 2.0);
				frame.Y = num * num217;
				break;
			}
			case 377:
			case 446:
				if (IsABestiaryIconDummy)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num)
					{
						frame.Y = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
				spriteDirection = direction;
				break;
			case 378:
			{
				if (velocity.Y != 0f && frame.Y < num * 2)
				{
					frame.Y += num * 2;
				}
				if (velocity.Y == 0f && frame.Y > num * 2)
				{
					frame.Y -= num * 2;
				}
				frameCounter += 1.0;
				int num79 = 6;
				if (frameCounter >= (double)num79)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (velocity.Y != 0f && frame.Y >= num * 4)
					{
						frame.Y = num * 2;
					}
					if (velocity.Y == 0f && frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			case 376:
				frameCounter += 1.0;
				if (frameCounter > 30.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
				break;
			case 589:
			{
				int num157 = frame.Y / num;
				frameCounter += 1.0;
				if (velocity.Y != 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
				}
				if (num157 >= 12)
				{
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y >= num * Main.npcFrameCount[type])
						{
							frame.Y = 0;
						}
					}
				}
				else if (num157 >= 11)
				{
					if (frameCounter > (double)Main.rand.Next(40, 140))
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
				else if (num157 >= 8)
				{
					if (!(frameCounter > 3.0))
					{
						break;
					}
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y == num * 9)
					{
						Vector2 position2 = base.position;
						position2.Y += height - 6;
						if (direction == 1)
						{
							position2.X += 30f;
						}
						else
						{
							position2.X -= 22f;
						}
						for (int n = 0; n < 4; n++)
						{
							Dust.NewDust(position2, 1, 1, 32);
						}
					}
				}
				else if (num157 >= 7)
				{
					if (frameCounter > (double)Main.rand.Next(30, 90))
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
				else if (num157 >= 4)
				{
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
				else if (num157 >= 1)
				{
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y >= num * 4 && Main.rand.Next(3) != 0)
						{
							frame.Y = 0;
						}
					}
				}
				else if (frameCounter > (double)Main.rand.Next(90, 450))
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				break;
			}
			case 375:
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			case 374:
				localAI[0] = -2f;
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y >= num * 4)
						{
							frame.Y = num;
						}
					}
					break;
				}
				rotation += (float)direction * 0.1f;
				frameCounter += 1.0;
				if (frameCounter > 3.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 4)
					{
						frame.Y = num;
					}
				}
				break;
			case 492:
				frame.Y = num * (int)ai[2];
				break;
			case 473:
			case 474:
			case 475:
			case 476:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (ai[0] == 0f || ai[0] == 7f)
				{
					rotation = 0f;
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else if (ai[0] == 1f)
				{
					rotation = 0f;
					frameCounter = 0.0;
					int num161 = 6;
					if (ai[1] < (float)num161)
					{
						frame.Y = num;
					}
					else if (ai[1] < (float)(num161 * 2))
					{
						frame.Y = num * 2;
					}
					else if (ai[1] < (float)(num161 * 3))
					{
						frame.Y = num * 3;
					}
					else if (ai[1] < (float)(num161 * 4))
					{
						frame.Y = num * 4;
					}
					else if (ai[1] < (float)(num161 * 5))
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
				}
				else if (ai[0] == 2f || ai[0] == 6f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						int num162 = 6;
						frameCounter += 1.0;
						if (frame.Y < num * 7)
						{
							frame.Y = num * 12;
						}
						if (frame.Y < num * 10)
						{
							if (frameCounter > 8.0)
							{
								frame.Y += num;
								frameCounter = 0.0;
								if (frame.Y == num * 10)
								{
									frameCounter = num162 * 2;
								}
							}
						}
						else if (frameCounter < (double)num162)
						{
							frame.Y = num * 12;
						}
						else if (frameCounter < (double)(num162 * 2))
						{
							frame.Y = num * 11;
						}
						else if (frameCounter < (double)(num162 * 3))
						{
							frame.Y = num * 10;
						}
						else
						{
							frame.Y = num * 11;
							if (frameCounter >= (double)(num162 * 4 - 1))
							{
								frameCounter = 0.0;
							}
						}
					}
					else
					{
						frame.Y = num * 13;
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 3f)
				{
					rotation = 0f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						if (frame.Y > num * 7)
						{
							frame.Y -= num;
						}
					}
				}
				else if (ai[0] == 4f || ai[0] == 5f)
				{
					if (ai[0] == 4f && ai[2] == 1f)
					{
						rotation = 0f;
					}
					frame.Y = num * 13;
					frameCounter = 0.0;
				}
				else
				{
					if (ai[0] != 4.1f)
					{
						break;
					}
					rotation = 0f;
					if (frame.Y > num * 6)
					{
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					int num163 = 4;
					if (frameCounter < (double)num163)
					{
						frame.Y = num * 6;
						break;
					}
					if (frameCounter < (double)(num163 * 2))
					{
						frame.Y = num * 5;
						break;
					}
					if (frameCounter < (double)(num163 * 3))
					{
						frame.Y = num * 4;
						break;
					}
					if (frameCounter < (double)(num163 * 4))
					{
						frame.Y = num * 3;
						break;
					}
					if (frameCounter < (double)(num163 * 5))
					{
						frame.Y = num * 4;
						break;
					}
					frame.Y = num * 5;
					if (frameCounter >= (double)(num163 * 6 - 1))
					{
						frameCounter = 0.0;
					}
				}
				break;
			case 477:
				frameCounter += velocity.Length() / 4f;
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y / num > 5)
				{
					frame.Y = 0;
				}
				break;
			case 479:
			{
				frameCounter += 1.0;
				int num96 = 4;
				if (frameCounter < (double)num96)
				{
					frame.Y = 0;
				}
				else if (frameCounter < (double)(num96 * 2))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num96 * 3))
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < (double)(num96 * 4 - 1))
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			}
			case 472:
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				if (direction == 1)
				{
					spriteDirection = 1;
				}
				if (direction == -1)
				{
					spriteDirection = -1;
				}
				rotation = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= 6)
				{
					frame.Y = 0;
				}
				break;
			case 449:
			case 450:
			case 451:
			case 452:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						int num197 = 0;
						int num198 = Main.npcFrameCount[type] - 5;
						int num199 = 5;
						int num200 = 7;
						num197 = ((ai[1] >= 50f) ? 1 : ((ai[1] >= (float)(50 - num200)) ? 2 : ((ai[1] >= (float)(50 - num200 * 2)) ? 3 : ((ai[1] >= (float)(50 - num200 * 3)) ? 4 : 0))));
						frame.Y = num * (num198 + num197);
						frameCounter = 0.0;
						break;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= 15)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 481:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						int num149 = 0;
						if (ai[1] < 22f)
						{
							num149 = -14;
						}
						else if (ai[1] < 28f)
						{
							num149 = 3;
						}
						else if (ai[1] < 34f)
						{
							num149 = 2;
						}
						else if (ai[1] < 40f)
						{
							num149 = 1;
						}
						frame.Y = num * (15 + num149);
						frameCounter = 0.0;
					}
					else if (velocity.X == 0f)
					{
						frame.Y = num;
					}
					else
					{
						if (frame.Y < num * 2)
						{
							frame.Y = num * 2;
						}
						frameCounter += Math.Abs(velocity.X) * 2f;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= 15)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			case 468:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						int num93 = 0;
						if (ai[1] < 22f)
						{
							num93 = -15;
						}
						else if (ai[1] < 28f)
						{
							num93 = 3;
						}
						else if (ai[1] < 34f)
						{
							num93 = 2;
						}
						else if (ai[1] < 40f)
						{
							num93 = 1;
						}
						frame.Y = num * (15 + num93);
						frameCounter = 0.0;
					}
					else if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
					else
					{
						if (frame.Y < num * 2)
						{
							frame.Y = num * 2;
						}
						frameCounter += Math.Abs(velocity.X) * 2f;
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= 15)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 379:
			case 380:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * ((int)ai[2] - 1 + 2);
						frameCounter = 0.0;
						break;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						break;
					}
					if (frame.Y < num * 7)
					{
						frame.Y = num * 7;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 381:
			case 382:
			case 383:
			case 385:
			case 389:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					if (type == 389 || type == 385)
					{
						frameCounter += (double)Math.Abs(velocity.X) * 1.2;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X) * 2f;
					}
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 387:
				if (ai[0] > 0f)
				{
					frameCounter += 1.0;
					if (ai[0] >= 20f)
					{
						frameCounter += 1.0;
					}
					if (ai[0] >= 40f)
					{
						frameCounter += 1.0;
					}
					if (frameCounter >= 10.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y >= num * 2)
						{
							frame.Y = 0;
						}
					}
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 15.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
				break;
			case 386:
				if (ai[2] > 0f)
				{
					int num148 = (int)ai[2] / 12;
					frame.Y = num * (9 + num148 % 2);
				}
				else if (velocity.Y == 0f)
				{
					spriteDirection = direction;
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= 9)
					{
						frame.Y = num * 2;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 388:
			{
				frameCounter += 1.0;
				int num164 = 6;
				if (frameCounter >= (double)num164)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y >= num * 2)
					{
						frame.Y = 0;
					}
				}
				break;
			}
			case 391:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = -1;
					}
					if (direction == -1)
					{
						spriteDirection = 1;
					}
					if (frame.Y < num)
					{
						frame.Y = num;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			case 390:
				if (IsABestiaryIconDummy)
				{
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						localAI[3] += 1f;
						if (localAI[3] >= (float)Main.npcFrameCount[391])
						{
							localAI[3] = 0f;
						}
					}
				}
				if (direction != 0)
				{
					spriteDirection = -direction;
				}
				if (ai[2] > 0f)
				{
					frame.Y = num * ((int)ai[2] - 1);
				}
				else
				{
					frame.Y = num * 2;
				}
				break;
			case 393:
			{
				int num201 = 0;
				Vector2 vector2 = ai[2].ToRotationVector2();
				num201 = ((vector2.Y > Math.Abs(vector2.X) * 2f) ? 4 : ((vector2.Y > Math.Abs(vector2.X) * 1.5f) ? ((vector2.X > 0f) ? 5 : 3) : ((Math.Abs(vector2.X) > vector2.Y * 2f) ? ((vector2.X > 0f) ? 8 : 0) : ((!(Math.Abs(vector2.X) > vector2.Y * 1.5f)) ? ((vector2.X > 0f) ? 6 : 2) : ((!(vector2.X > 0f)) ? 1 : 7)))));
				frame.Y = num * num201;
				float num202 = 280f;
				float num203 = 140f;
				if (ai[3] >= num202 && ai[3] < num202 + num203 && (int)ai[3] % 6 <= 2)
				{
					frame.Y += num * 9;
				}
				break;
			}
			case 394:
			{
				int num194 = (int)ai[3] - 300;
				if (num194 >= 120)
				{
					num194 -= 120;
					if (num194 >= 160)
					{
						frame.Y = num * (7 - (num194 - 160) / 5);
					}
					else if (num194 >= 20)
					{
						frame.Y = num * (num194 / 4 % 4);
					}
					else
					{
						frame.Y = num * (4 + num194 / 5);
					}
				}
				else
				{
					frame.Y = num * 4;
				}
				break;
			}
			case 395:
			{
				float num174 = 20f;
				float num175 = 240f;
				bool flag11 = ai[3] >= num174 && ai[3] < num174 + num175;
				frameCounter += 1.0;
				if (frameCounter >= 66.0)
				{
					frameCounter = 0.0;
				}
				if (flag11)
				{
					frameCounter += 1.0;
					if (frameCounter >= 54.0 || frameCounter < 36.0)
					{
						frameCounter = 36.0;
					}
				}
				int num176 = (int)frameCounter % 66;
				num176 /= 6;
				frame.Y = num * num176;
				break;
			}
			case 392:
			{
				float num153 = 20f;
				float num154 = 240f;
				bool flag5 = ai[3] >= num153 && ai[3] < num153 + num154;
				frameCounter += 1.0;
				if (flag5)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 12.0)
				{
					frameCounter = 0.0;
				}
				int num155 = (int)frameCounter % 12;
				num155 /= 3;
				frame.Y = num * num155;
				break;
			}
			case 399:
				frameCounter = (frameCounter + 0.25) % 4.0 + (double)((ai[0] != 0f) ? 4 : 0);
				frame.Y = num * (int)frameCounter;
				break;
			case 520:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.X) * 1f;
					if (frameCounter > 6.0)
					{
						if (Math.Abs(velocity.X) < 0.2f)
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						else
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 398:
			{
				if (ai[0] <= 0f)
				{
					frame.Y = 0;
					break;
				}
				if (frame.Y == 0)
				{
					Gore.NewGore(base.position + new Vector2(-10f, -15f), velocity, 619);
					Gore.NewGore(base.position + new Vector2(10f, -15f), velocity, 620);
					Gore.NewGore(base.position + new Vector2(-10f, 15f), velocity, 621);
					Gore.NewGore(base.position + new Vector2(10f, 15f), velocity, 622);
					for (int m = 0; m < 50; m++)
					{
						frame.Y = num;
						Dust.NewDust(base.position, width, height, 209);
					}
				}
				frameCounter += 1.0;
				if (frameCounter >= 30.0)
				{
					frameCounter = 6.0;
				}
				int num90 = (int)frameCounter % 30;
				num90 /= 6;
				frame.Y = num * num90;
				break;
			}
			case 397:
			{
				int num87 = (int)frameCounter / 7;
				frame.Y = num * num87;
				break;
			}
			case 400:
			{
				frameCounter += 1.0;
				if (ai[0] == 0f || ai[0] == 3f)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 16.0)
				{
					frameCounter = 0.0;
				}
				int num85 = (int)frameCounter % 16;
				num85 /= 4;
				frame.Y = num * num85;
				break;
			}
			case 437:
			{
				frameCounter += 1.0;
				if (frameCounter >= 20.0)
				{
					frameCounter = 0.0;
				}
				int num86 = (int)frameCounter % 20;
				num86 /= 5;
				frame.Y = num * num86;
				break;
			}
			case 438:
			{
				frameCounter += 1.0;
				if (ai[1] == 1f)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 49.0)
				{
					frameCounter = 0.0;
				}
				int num78 = (int)frameCounter % 49;
				num78 /= 7;
				if (num78 >= 4)
				{
					num78 = 6 - num78;
				}
				frame.Y = num * num78;
				break;
			}
			case 439:
			case 440:
			{
				int num18 = (int)localAI[2];
				if (IsABestiaryIconDummy)
				{
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y < num * 4 || frame.Y > num * 6)
					{
						frame.Y = num * 4;
					}
				}
				else
				{
					switch (num18)
					{
					case 0:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
							frame.Y = 0;
						}
						else if (frame.Y != 0)
						{
							frame.Y = ((int)frameCounter / 5 + 4) * num;
						}
						break;
					case 10:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
						}
						frame.Y = ((int)frameCounter / 5 + 4) * num;
						break;
					case 1:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
							frame.Y = num;
						}
						else if (frame.Y != num)
						{
							frame.Y = ((int)frameCounter / 5 + 10) * num;
						}
						break;
					case 11:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
						}
						frame.Y = ((int)frameCounter / 5 + 10) * num;
						break;
					case 2:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
							frame.Y = num * 2;
						}
						else if (frame.Y != num * 2)
						{
							frame.Y = ((int)frameCounter / 5 + 7) * num;
						}
						break;
					case 12:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
						}
						frame.Y = ((int)frameCounter / 5 + 7) * num;
						break;
					case 13:
						if (frameCounter >= 15.0)
						{
							frameCounter = 0.0;
						}
						frame.Y = ((int)frameCounter / 5 + 13) * num;
						break;
					}
				}
				frameCounter += 1.0;
				break;
			}
			case 521:
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				if (direction != 0)
				{
					spriteDirection = direction;
				}
				rotation = (float)Math.Atan2(velocity.Y * (float)spriteDirection, velocity.X * (float)spriteDirection) + velocity.X * 0.1f;
				if ((frameCounter += 1.0) >= 5.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 523:
				if ((frameCounter += 1.0) >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 371:
			case 372:
			case 373:
				frame.Y = num;
				break;
			case 370:
			{
				if (ai[0] == 0f || ai[0] == 5f)
				{
					int num167 = 5;
					if (ai[0] == 5f)
					{
						num167 = 4;
					}
					frameCounter += 1.0;
					if (frameCounter > (double)num167)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y >= num * 6)
					{
						frame.Y = 0;
					}
				}
				if (ai[0] == 1f || ai[0] == 6f)
				{
					if (ai[2] < 10f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				if (ai[0] == 2f || ai[0] == 7f)
				{
					if (ai[2] < 10f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				if (ai[0] == 3f || ai[0] == 8f || ai[0] == -1f)
				{
					int num168 = 90;
					if (ai[2] < (float)(num168 - 30) || ai[2] > (float)(num168 - 10))
					{
						frameCounter += 1.0;
						if (frameCounter > 5.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
						}
						if (frame.Y >= num * 6)
						{
							frame.Y = 0;
						}
					}
					else
					{
						frame.Y = num * 6;
						if (ai[2] > (float)(num168 - 20) && ai[2] < (float)(num168 - 15))
						{
							frame.Y = num * 7;
						}
					}
				}
				if (ai[0] != 4f && ai[0] != 9f)
				{
					break;
				}
				int num169 = 180;
				if (ai[2] < (float)(num169 - 60) || ai[2] > (float)(num169 - 20))
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y >= num * 6)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frame.Y = num * 6;
					if (ai[2] > (float)(num169 - 50) && ai[2] < (float)(num169 - 25))
					{
						frame.Y = num * 7;
					}
				}
				break;
			}
			case 359:
			case 360:
			case 655:
			{
				if (velocity.Y > 1f)
				{
					frameCounter += 1.0;
					int num91 = 6;
					if (frameCounter < (double)num91)
					{
						frame.Y = num * 4;
						break;
					}
					frame.Y = num * 5;
					if (frameCounter >= (double)(num91 * 2 - 1))
					{
						frameCounter = 0.0;
					}
					break;
				}
				frameCounter += 1.0;
				int num92 = 10;
				if (frameCounter < (double)num92)
				{
					frame.Y = 0;
					break;
				}
				if (frameCounter < (double)(num92 * 2))
				{
					frame.Y = num;
					break;
				}
				if (frameCounter < (double)(num92 * 3))
				{
					frame.Y = num * 2;
					break;
				}
				if (frameCounter < (double)(num92 * 4))
				{
					frame.Y = num * 3;
					break;
				}
				if (frameCounter < (double)(num92 * 5))
				{
					frame.Y = num * 2;
					break;
				}
				frame.Y = num;
				if (frameCounter >= (double)(num92 * 6 - 1))
				{
					frameCounter = 0.0;
				}
				break;
			}
			case 327:
				if (ai[3] == 0f)
				{
					if (frame.Y > num * 5)
					{
						frameCounter += 1.0;
					}
					else if (frame.Y > 0)
					{
						frameCounter -= 1.0;
					}
				}
				else if (ai[3] == 1f)
				{
					if (frame.Y > num * 10)
					{
						frameCounter += 1.0;
					}
					else if (frame.Y > num * 4)
					{
						frameCounter -= 1.0;
					}
					else if (frame.Y < num * 4)
					{
						frameCounter += 1.0;
					}
				}
				else if (ai[3] == 2f)
				{
					if (frame.Y < num * 2)
					{
						frameCounter -= 1.0;
					}
					else if (frame.Y > num * 8)
					{
						frameCounter -= 1.0;
					}
					else if (frame.Y < num * 8)
					{
						frameCounter += 1.0;
					}
				}
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 11)
					{
						frame.Y = 0;
					}
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 6.0;
					frame.Y -= num;
					if (frame.Y < 0)
					{
						frame.Y = num * 11;
					}
				}
				break;
			case 347:
				frameCounter += 1.0;
				if (frameCounter > 1.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 3)
				{
					frame.Y = 0;
				}
				break;
			case 346:
				if (ai[0] == 1f)
				{
					spriteDirection = direction;
					frameCounter += 1.0;
					if (frameCounter > 2.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 8)
					{
						frame.Y = num * 6;
					}
					if (frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
					break;
				}
				if (velocity.X == 0f)
				{
					int y2 = frame.Y;
					y2 = y2;
					frameCounter = 0.0;
					break;
				}
				spriteDirection = direction;
				frameCounter += 1.0;
				frameCounter += Math.Abs(velocity.X) / 2f;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 5)
				{
					frame.Y = num;
				}
				if (frame.Y < num)
				{
					frame.Y = num;
				}
				break;
			case 352:
				frameCounter += 1.0;
				if (frameCounter > 3.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 5)
				{
					frame.Y = 0;
				}
				break;
			case 345:
				if (ai[0] == 0f)
				{
					if (ai[3] >= 0f)
					{
						frame.Y = 0;
					}
					else if (velocity.X < 0f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num * 2;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4)
					{
						frame.Y = num * 3;
					}
					if (frame.Y < num * 3)
					{
						frame.Y = num * 3;
					}
				}
				else if (ai[0] == 2f)
				{
					frame.Y = num * 5;
				}
				break;
			case 344:
				if (velocity.X == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 9)
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter += Math.Max(1f, Math.Abs(velocity.X) * 0.75f);
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 9)
					{
						frame.Y = 0;
					}
				}
				break;
			case 325:
				if (velocity.X == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4)
					{
						frame.Y = 0;
					}
					break;
				}
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y < num * 5)
				{
					frame.Y = num * 5;
				}
				if (frame.Y > num * 9)
				{
					frame.Y = num * 5;
				}
				break;
			case 490:
				rotation = velocity.X * 0.15f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 266:
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (ai[0] >= 0f)
				{
					if (frame.Y > num * 3)
					{
						frame.Y = 0;
					}
					break;
				}
				if (frame.Y < num * 4)
				{
					frame.Y = num * 4;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = num * 4;
				}
				break;
			case 262:
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (life > lifeMax / 2)
				{
					if (frame.Y > num * 3)
					{
						frame.Y = 0;
					}
					break;
				}
				if (frame.Y < num * 4)
				{
					frame.Y = num * 4;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = num * 4;
				}
				break;
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.Y < -3f)
				{
					frame.Y = num * 5;
				}
				else if (velocity.Y <= 0f)
				{
					frame.Y = 0;
				}
				else if (velocity.Y < 2f)
				{
					frame.Y = num * 3;
				}
				else
				{
					frame.Y = num;
				}
				rotation = velocity.X * 0.1f;
				break;
			case 263:
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					if (frame.Y > 0)
					{
						frameCounter += 1.0;
						if (frameCounter > 4.0)
						{
							frameCounter = 0.0;
							frame.Y -= num;
						}
					}
				}
				else if (frame.Y < 2)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
				break;
			case 244:
				frameCounter += 1.0;
				if (num2 > 0)
				{
					frameCounter += 1.0;
				}
				if (num2 == 4)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 289:
				frameCounter += 1.0;
				if (frameCounter < 4.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 8.0)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = num * 2;
					frameCounter = 0.0;
					if (frameCounter > 12.0)
					{
						frameCounter = 0.0;
					}
				}
				if (ai[3] == 1f)
				{
					frame.Y += num * 3;
				}
				break;
			case 288:
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 355:
			case 358:
			case 654:
				spriteDirection = direction;
				frameCounter += 1.0;
				if (frameCounter < 4.0)
				{
					frame.Y = 0;
				}
				else
				{
					frame.Y = num;
					if (frameCounter >= 7.0)
					{
						frameCounter = 0.0;
					}
				}
				if (localAI[2] <= 0f)
				{
					frame.Y += num * 2;
				}
				break;
			case 595:
			case 596:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			{
				spriteDirection = direction;
				int num213 = 3;
				if ((frameCounter += 1.0) >= (double)(Main.npcFrameCount[type] * num213))
				{
					frameCounter = 0.0;
				}
				frame.Y = num * ((int)frameCounter / num213);
				break;
			}
			case 356:
			case 444:
			case 653:
			case 661:
			{
				int num14 = 7;
				rotation = velocity.X * 0.3f;
				spriteDirection = direction;
				frameCounter = frameCounter + 1.0 + (double)((Math.Abs(velocity.X) + Math.Abs(velocity.Y)) / 2f);
				if (frameCounter < (double)num14)
				{
					frame.Y = 0;
				}
				else if (frameCounter < (double)(num14 * 2))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num14 * 3))
				{
					frame.Y = num * 2;
				}
				else
				{
					frame.Y = num;
					if (frameCounter >= (double)(num14 * 4 - 1))
					{
						frameCounter = 0.0;
					}
				}
				if (type != 444 && type != 653 && type != 661)
				{
					frame.Y += (int)((float)(num * 3) * (ai[2] - 1f));
				}
				break;
			}
			case 357:
			case 448:
			case 484:
			case 606:
			{
				localAI[0] = -2f;
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (velocity.X == 0f)
					{
						frame.Y = num;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += 1.0;
						if (frameCounter > 12.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
							if (frame.Y > num)
							{
								frame.Y = 0;
							}
						}
					}
				}
				else
				{
					rotation += (float)direction * 0.1f;
					frame.Y = num;
				}
				int i3 = (int)base.Center.X / 16;
				int j3 = (int)base.position.Y / 16;
				Tile tileSafely2 = Framing.GetTileSafely(i3, j3);
				if (tileSafely2 != null)
				{
					if (tileSafely2.slope() == 0)
					{
						j3++;
						tileSafely2 = Framing.GetTileSafely(i3, j3);
					}
					if (tileSafely2.slope() == 1)
					{
						rotation = 0.785f;
						localAI[0] = 0f;
					}
					else if (tileSafely2.slope() == 2)
					{
						rotation = -0.785f;
						localAI[0] = 0f;
					}
				}
				break;
			}
			case 485:
			case 486:
			case 487:
			{
				spriteDirection = direction;
				localAI[0] = -2f;
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (velocity.X == 0f)
					{
						frame.Y = num;
						frameCounter = 0.0;
					}
					else
					{
						frameCounter += Math.Abs(velocity.X * 5f);
						if (frameCounter > 10.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
							if (frame.Y > num * 3)
							{
								frame.Y = 0;
							}
						}
					}
				}
				else
				{
					rotation += (float)direction * 0.1f;
					frame.Y = num;
				}
				int i2 = (int)base.Center.X / 16;
				int j2 = (int)base.position.Y / 16;
				Tile tileSafely = Framing.GetTileSafely(i2, j2);
				if (tileSafely != null)
				{
					if (tileSafely.slope() == 0)
					{
						j2++;
						tileSafely = Framing.GetTileSafely(i2, j2);
					}
					if (tileSafely.slope() == 1)
					{
						rotation = 0.785f;
						localAI[0] = 0f;
					}
					else if (tileSafely.slope() == 2)
					{
						rotation = -0.785f;
						localAI[0] = 0f;
					}
				}
				break;
			}
			case 250:
			case 264:
			case 268:
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 245:
				if (ai[0] == 0f)
				{
					if (ai[1] < -16f)
					{
						frame.Y = 0;
					}
					else if (ai[1] < -12f)
					{
						frame.Y = num;
					}
					else if (ai[1] < -8f)
					{
						frame.Y = num * 2;
					}
					else if (ai[1] < -4f)
					{
						frame.Y = num * 3;
					}
					else if (ai[1] < 0f)
					{
						frame.Y = num * 4;
					}
					else
					{
						frame.Y = 0;
					}
				}
				else if (ai[0] == 1f)
				{
					frame.Y = 1;
				}
				break;
			case 246:
				if (ai[0] == 0f)
				{
					if (localAI[0] == 1f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = 0;
					}
				}
				else if (ai[0] == 1f)
				{
					if (localAI[0] == 1f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = 0;
					}
					if (localAI[1] == -1f)
					{
						frame.Y += num * 4;
					}
					if (localAI[1] == 1f)
					{
						frame.Y += num * 2;
					}
				}
				break;
			case 249:
				if (localAI[0] == 1f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
				if ((frameCounter += 1.0) >= 16.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 141:
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame.Y = num * 2;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num)
				{
					frame.Y = 0;
				}
				break;
			case 243:
				if (frameCounter < 0.0)
				{
					if (velocity.Y == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter < -12.0)
						{
							if (frame.Y > num * 9)
							{
								frame.Y = num * 11;
							}
						}
						else if (frameCounter < -6.0)
						{
							if (frame.Y > num * 9)
							{
								frame.Y = num * 12;
							}
						}
						else if (frameCounter < 0.0)
						{
							frameCounter = 0.0;
							if (frame.Y > num * 9)
							{
								frame.Y = num * 11;
							}
						}
					}
					else
					{
						frameCounter = -18.0;
						if (velocity.Y < 0f)
						{
							frame.Y = num * 14;
						}
						else
						{
							frame.Y = num * 13;
						}
					}
					break;
				}
				spriteDirection = direction;
				frameCounter += Math.Abs(velocity.X * 1.1f);
				if (frameCounter >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 9)
					{
						frame.Y = 0;
					}
				}
				if (velocity.Y < -2f || velocity.Y > 5f)
				{
					frameCounter = -18.0;
				}
				break;
			case 222:
				frameCounter += 1.0;
				if (localAI[0] == 1f)
				{
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
					break;
				}
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y < num * 4)
				{
					frame.Y = num * 4;
				}
				if (frame.Y >= num * 12)
				{
					frame.Y = num * 4;
				}
				break;
			case 164:
			case 239:
			case 530:
				if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num * 4;
					}
					else
					{
						frame.Y = 0;
					}
					break;
				}
				spriteDirection = direction;
				frameCounter += Math.Abs(velocity.X) * 1.1f;
				if (frameCounter < 6.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 236:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				else
				{
					frame.Y = 0;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num || velocity.Y != 0f)
				{
					frame.Y = 0;
				}
				break;
			case 165:
			case 237:
			case 238:
			case 240:
			case 531:
			{
				float num196 = 0.5f;
				if (type == 531)
				{
					num196 = 0.4f;
				}
				frameCounter += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * num196;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			}
			case 195:
				if (ai[0] < 3f)
				{
					frame.Y = 0;
				}
				else if (ai[0] < 6f)
				{
					frame.Y = num;
				}
				else if (ai[0] < 9f)
				{
					frame.Y = num * 2;
				}
				else if (ai[0] < 12f)
				{
					frame.Y = num * 3;
				}
				else if (ai[0] < 15f)
				{
					frame.Y = num * 4;
				}
				else
				{
					frame.Y = num * 5;
				}
				break;
			case 174:
				if (IsABestiaryIconDummy)
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 4)
					{
						frame.Y = 0;
					}
				}
				else if (velocity.Y == 0f)
				{
					frame.Y = 0;
				}
				else if ((double)velocity.Y < -1.5)
				{
					frame.Y = num;
				}
				else if ((double)velocity.Y > 1.5)
				{
					frame.Y = num * 3;
				}
				else
				{
					frame.Y = num * 2;
				}
				break;
			case 177:
				if (velocity.Y == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 10.0)
					{
						frameCounter = 30.0;
						frame.Y = 0;
					}
					else
					{
						frame.Y = num;
					}
				}
				else if (velocity.Y < 0f)
				{
					frame.Y = num * 2;
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
				}
				break;
			case 163:
				if (velocity.Y != 0f)
				{
					frameCounter = -12.0;
					if (velocity.Y < 0f)
					{
						frame.Y = num * 5;
					}
					else
					{
						frame.Y = num * 6;
					}
					break;
				}
				spriteDirection = direction;
				frameCounter += Math.Abs(velocity.X) * 1.1f;
				if (frameCounter < -6.0)
				{
					frame.Y = num * 6;
				}
				else if (frameCounter < 0.0)
				{
					frame.Y = num * 7;
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 143:
				if (velocity.Y > 0f)
				{
					frameCounter += 1.0;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter -= 1.0;
				}
				if (frameCounter < 6.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 3;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > 17.0)
				{
					frameCounter = 17.0;
				}
				break;
			case 144:
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					localAI[3] += 1f;
					if (localAI[3] < 6f)
					{
						frame.Y = 0;
					}
					else if (localAI[3] < 12f)
					{
						frame.Y = num;
					}
					if (localAI[3] >= 11f)
					{
						localAI[3] = 0f;
					}
					break;
				}
				if (velocity.Y > 0f)
				{
					frameCounter += 1.0;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter -= 1.0;
				}
				if (frameCounter < 6.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 3;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 4;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > 17.0)
				{
					frameCounter = 17.0;
				}
				break;
			case 145:
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					if (ai[2] < 4f)
					{
						frame.Y = 0;
					}
					else if (ai[2] < 8f)
					{
						frame.Y = num;
					}
					else if (ai[2] < 12f)
					{
						frame.Y = num * 2;
					}
					else if (ai[2] < 16f)
					{
						frame.Y = num * 3;
					}
					break;
				}
				if (velocity.Y > 0f)
				{
					frameCounter += 1.0;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter -= 1.0;
				}
				if (frameCounter < 6.0)
				{
					frame.Y = num * 4;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 5;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 6;
				}
				if (frameCounter < 0.0)
				{
					frameCounter = 0.0;
				}
				if (frameCounter > 17.0)
				{
					frameCounter = 17.0;
				}
				break;
			case 50:
				if (velocity.Y != 0f)
				{
					if (frame.Y < num * 4)
					{
						frame.Y = num * 4;
						frameCounter = 0.0;
					}
					if ((frameCounter += 1.0) >= 4.0)
					{
						frame.Y = num * 5;
					}
					break;
				}
				if (frame.Y >= num * 5)
				{
					frame.Y = num * 4;
					frameCounter = 0.0;
				}
				frameCounter += 1.0;
				if (num2 > 0)
				{
					frameCounter += 1.0;
				}
				if (num2 == 4)
				{
					frameCounter += 1.0;
				}
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
					if (frame.Y >= num * 4)
					{
						frame.Y = 0;
					}
				}
				break;
			case 170:
			case 171:
			case 180:
				spriteDirection = direction;
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 14)
				{
					frame.Y = 0;
				}
				break;
			case 135:
				if (ai[2] == 0f)
				{
					frame.Y = 0;
				}
				else
				{
					frame.Y = num;
				}
				break;
			case 85:
			case 341:
			case 629:
				if (ai[0] == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					int num173 = 3;
					if (velocity.Y == 0f)
					{
						frameCounter -= 1.0;
					}
					else
					{
						frameCounter += 1.0;
					}
					if (frameCounter < 0.0)
					{
						frameCounter = 0.0;
					}
					if (frameCounter > (double)(num173 * 4))
					{
						frameCounter = num173 * 4;
					}
					if (frameCounter < (double)num173)
					{
						frame.Y = num;
					}
					else if (frameCounter < (double)(num173 * 2))
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < (double)(num173 * 3))
					{
						frame.Y = num * 3;
					}
					else if (frameCounter < (double)(num173 * 4))
					{
						frame.Y = num * 4;
					}
					else if (frameCounter < (double)(num173 * 5))
					{
						frame.Y = num * 5;
					}
					else if (frameCounter < (double)(num173 * 6))
					{
						frame.Y = num * 4;
					}
					else if (frameCounter < (double)(num173 * 7))
					{
						frame.Y = num * 3;
					}
					else
					{
						frame.Y = num * 2;
						if (frameCounter >= (double)(num173 * 8))
						{
							frameCounter = num173;
						}
					}
				}
				if (ai[3] == 2f || (IsABestiaryIconDummy && type == 85))
				{
					frame.Y += num * 6;
				}
				else if (ai[3] == 3f)
				{
					frame.Y += num * 12;
				}
				break;
			case 113:
			case 114:
				if (ai[2] == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 12.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				else
				{
					frame.Y = 0;
					frameCounter = -60.0;
				}
				break;
			case 61:
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				int num158 = 5;
				int num159 = 5;
				frameCounter += 1.0;
				if (frameCounter >= (double)(num158 * num159))
				{
					frameCounter = 0.0;
				}
				int num160 = (int)(frameCounter / (double)num158);
				frame.Y = (num160 + 1) * num;
				break;
			}
			case 252:
			case 301:
				if (type == 301)
				{
					if (velocity.Y == 0f)
					{
						spriteDirection = -direction;
					}
					else
					{
						if ((double)velocity.X > 0.5)
						{
							spriteDirection = -1;
						}
						if ((double)velocity.X < -0.5)
						{
							spriteDirection = 1;
						}
					}
				}
				else
				{
					if ((double)velocity.X > 0.5)
					{
						spriteDirection = 1;
					}
					if ((double)velocity.X < -0.5)
					{
						spriteDirection = -1;
					}
				}
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
				}
				if (frame.Y > num * 4 || frame.Y == 0)
				{
					frame.Y = num;
				}
				break;
			case 122:
				spriteDirection = direction;
				rotation = velocity.X * 0.05f;
				if (ai[3] > 0f)
				{
					int num144 = (int)(ai[3] / 8f);
					frameCounter = 0.0;
					frame.Y = (num144 + 3) * num;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 3)
				{
					frame.Y = 0;
				}
				break;
			case 74:
			case 297:
			case 298:
			case 442:
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = num * 4;
					frameCounter = 0.0;
					break;
				}
				int num143 = Main.npcFrameCount[type] - 1;
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * num143)
				{
					frame.Y = 0;
				}
				break;
			}
			case 611:
				spriteDirection = -direction;
				rotation = velocity.X * 0.1f;
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					int num81 = frame.Y / num;
					if (num81 < 0 || num81 >= 8)
					{
						frame.Y = 0;
					}
					if ((int)frameCounter % 40 != 0 || Main.rand.Next(80) == 0)
					{
						frameCounter += 1.0;
					}
					if ((frameCounter + 1.0) % 40.0 == 39.0)
					{
						frameCounter = 40 * Main.rand.Next(3);
					}
					int num82 = (int)frameCounter % 40 / 10;
					int num83 = (int)frameCounter / 40;
					int num84 = 0;
					switch (num83)
					{
					case 0:
						if (num82 == 3)
						{
							num82 = 1;
						}
						num84 = num82;
						break;
					case 1:
						if (num82 == 3)
						{
							num82 = 1;
						}
						num84 = 0;
						if (num82 != 0)
						{
							num84 = 2 + num82;
						}
						break;
					case 2:
						num84 = 0;
						if (num82 != 0)
						{
							num84 = 4 + num82;
						}
						break;
					}
					frame.Y = num * num84;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter >= 5.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type] || frame.Y < num * 8)
					{
						frame.Y = num * 8;
					}
				}
				break;
			case 362:
			case 364:
			case 608:
				spriteDirection = direction;
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 10)
				{
					frame.Y = num * 3;
				}
				if (frame.Y < num * 3)
				{
					frame.Y = num * 3;
				}
				break;
			case 363:
			case 365:
			case 609:
				spriteDirection = direction;
				if (wet)
				{
					frameCounter += 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 2)
					{
						frame.Y = num;
					}
					if (frame.Y < num)
					{
						frame.Y = num;
					}
					rotation = 0f;
				}
				else if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = num;
					frameCounter = 0.0;
					rotation = 0f;
				}
				else
				{
					rotation = velocity.X * 0.1f;
					frameCounter += 1.0;
					if (frameCounter >= 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = num * 11;
					}
					if (frame.Y < num * 11)
					{
						frame.Y = num * 11;
					}
				}
				break;
			case 602:
				spriteDirection = direction;
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 10)
				{
					frame.Y = num * 3;
				}
				if (frame.Y < num * 3)
				{
					frame.Y = num * 3;
				}
				break;
			case 603:
				spriteDirection = direction;
				if (wet)
				{
					frameCounter += 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 2)
					{
						frame.Y = num;
					}
					if (frame.Y < num)
					{
						frame.Y = num;
					}
					rotation = 0f;
				}
				else if (velocity.X == 0f && velocity.Y == 0f)
				{
					frame.Y = num;
					frameCounter = 0.0;
					rotation = 0f;
				}
				else
				{
					rotation = velocity.X * 0.1f;
					frameCounter += 1.0;
					if (frameCounter >= 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = num * 11;
					}
					if (frame.Y < num * 11)
					{
						frame.Y = num * 11;
					}
				}
				break;
			case 62:
			case 66:
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				int num206 = 5;
				int num207 = 5;
				frameCounter += 1.0;
				if (frameCounter >= (double)(num206 * num207))
				{
					frameCounter = 0.0;
				}
				int num208 = (int)(frameCounter / (double)num206);
				frame.Y = num208 * num;
				break;
			}
			case 156:
			{
				spriteDirection = direction;
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter >= 20.0)
				{
					frameCounter = 0.0;
				}
				int num205 = (int)frameCounter / 4;
				frame.Y = num205 * num;
				break;
			}
			case 63:
			case 64:
			case 103:
			case 242:
			case 256:
				if ((type == 63 || type == 64 || type == 103 || type == 242) && ai[1] == 1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 6)
					{
						frame.Y = num * 4;
					}
					if (frame.Y < num * 4)
					{
						frame.Y = num * 4;
					}
					return;
				}
				frameCounter += 1.0;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
					break;
				}
				if (frameCounter < 12.0)
				{
					frame.Y = num;
					break;
				}
				if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
					break;
				}
				frame.Y = num * 3;
				if (frameCounter >= 23.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 221:
				if (localAI[2] == 1f)
				{
					if (localAI[0] == 1f)
					{
						frame.Y = 0;
						localAI[0] = 0f;
					}
					frameCounter += 1.0;
					if (frameCounter >= 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = num * Main.npcFrameCount[type] - num;
					}
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter >= 13.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y >= num * Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 2:
			case 23:
			case 121:
			case 169:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 317:
			case 318:
			case 660:
			{
				if (type == 23)
				{
					int num145 = Dust.NewDust(new Vector2(base.position.X - velocity.X, base.position.Y - velocity.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num145].noGravity = true;
					Main.dust[num145].velocity.X *= 0.3f;
					Main.dust[num145].velocity.Y *= 0.3f;
				}
				if ((type == 121 || type == 660) && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					frame.Y = num * 2;
				}
				if (type == 2 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318)
				{
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					}
					if (velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
					}
				}
				else if (type == 2 || type == 121 || type == 660)
				{
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					if (velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					rotation = velocity.X * 0.1f;
				}
				frameCounter += 1.0;
				float num146 = 8f;
				if (type == 660)
				{
					num146 = 6f;
				}
				if (frameCounter >= (double)num146)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			}
			case 133:
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
				if (frameCounter >= 16.0)
				{
					frame.Y = 0;
					frameCounter = 0.0;
				}
				if ((double)life < (double)lifeMax * 0.5)
				{
					frame.Y += num * 2;
				}
				break;
			case 116:
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 5.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 75:
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				else
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 157:
			{
				spriteDirection = direction;
				frameCounter += 1.0;
				if (!wet)
				{
					frameCounter += 1.0;
				}
				int num77 = 5;
				if (frameCounter < (double)num77)
				{
					frame.Y = 0;
				}
				else if (frameCounter < (double)(num77 * 2))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num77 * 3))
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < (double)(num77 * 4))
				{
					frame.Y = num;
				}
				else if (frameCounter < (double)(num77 * 5))
				{
					frame.Y = num * 3;
				}
				else if (frameCounter < (double)(num77 * 6))
				{
					frame.Y = num * 4;
				}
				else if (frameCounter < (double)(num77 * 7))
				{
					frame.Y = num * 5;
				}
				else if (frameCounter < (double)(num77 * 8))
				{
					frame.Y = num * 4;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			}
			case 55:
			case 57:
			case 58:
			case 102:
			case 241:
			case 465:
			case 592:
			case 607:
				spriteDirection = direction;
				frameCounter += 1.0;
				if (wet)
				{
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num * 4;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 5;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 615:
				spriteDirection = direction;
				if (!wet && ai[2] == 1f)
				{
					frame.Y = 4 * num;
					break;
				}
				if (!wet)
				{
					frameCounter += 1.0;
				}
				if ((frameCounter += 1.0) >= (double)(7 * (Main.npcFrameCount[type] - 1)))
				{
					frameCounter = 0.0;
				}
				frame.Y = (int)(frameCounter / 7.0) * num;
				break;
			case 69:
				if (ai[0] < 190f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= Main.npcFrameCount[type] - 1)
						{
							frame.Y = 0;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * (Main.npcFrameCount[type] - 1);
				}
				break;
			case 155:
			{
				int num210 = frame.Y / num;
				if (IsABestiaryIconDummy && num210 < 3)
				{
					num210 = 3;
				}
				if (velocity.Y < 0f)
				{
					num210 = 10;
				}
				else if (velocity.Y > 0f)
				{
					num210 = 11;
				}
				else if (velocity.X == 0f)
				{
					num210 = 0;
					frameCounter = 0.0;
				}
				else if (((direction > 0 && velocity.X < 0f) || (direction < 0 && velocity.X > 0f)) && Math.Abs(velocity.X) < 4f)
				{
					spriteDirection = direction;
					if (num210 > 2)
					{
						num210 = 0;
						frameCounter = 0.0;
					}
					if (num210 < 2)
					{
						frameCounter += 1.0;
						if (frameCounter > 5.0)
						{
							frameCounter = 0.0;
							num210++;
						}
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				else
				{
					spriteDirection = ((!(velocity.X < 0f)) ? 1 : (-1));
					frameCounter += Math.Abs(velocity.X) * 0.4f;
					if (num210 == 10 || num210 == 11)
					{
						num210 = 12;
						frameCounter = 0.0;
					}
					else if (frameCounter > 8.0)
					{
						frameCounter -= 8.0;
						num210++;
						if (num210 > 9)
						{
							num210 = 3;
						}
					}
				}
				frame.Y = num210 * num;
				break;
			}
			case 329:
				if (velocity.Y > 0f)
				{
					frame.Y = num * 3;
					frameCounter = 0.0;
					break;
				}
				if (velocity.Y < 0f)
				{
					frame.Y = num * 2;
					frameCounter = 0.0;
					break;
				}
				spriteDirection = direction;
				frameCounter += Math.Abs(velocity.X) * 0.4f;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					if (frame.Y > num * 9)
					{
						frame.Y = num * 2;
					}
				}
				break;
			case 86:
				if (velocity.Y == 0f || wet)
				{
					if (velocity.X < -2f)
					{
						spriteDirection = -1;
					}
					else if (velocity.X > 2f)
					{
						spriteDirection = 1;
					}
					else
					{
						spriteDirection = direction;
					}
				}
				if (velocity.Y != 0f)
				{
					frame.Y = num * 15;
					frameCounter = 0.0;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				if (Math.Abs(velocity.X) < 3f)
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter >= 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= 9)
						{
							frame.Y = num;
						}
						if (frame.Y / num <= 0)
						{
							frame.Y = num;
						}
					}
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 10.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= 15)
					{
						frame.Y = num * 9;
					}
					if (frame.Y / num <= 8)
					{
						frame.Y = num * 9;
					}
				}
				break;
			case 315:
				if (velocity.Y == 0f || wet)
				{
					if (velocity.X < -1f)
					{
						spriteDirection = -1;
					}
					else if (velocity.X > 1f)
					{
						spriteDirection = 1;
					}
					else
					{
						spriteDirection = direction;
					}
				}
				if (velocity.Y != 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 8.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num > 10)
					{
						frame.Y = num;
					}
				}
				break;
			case 127:
				if (ai[1] == 0f)
				{
					frameCounter += 1.0;
					if (frameCounter >= 12.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y / num >= 2)
						{
							frame.Y = 0;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
				}
				break;
			case 129:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 2.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 130:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 67:
			case 217:
			case 218:
			case 219:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 220:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				frameCounter += 1.0;
				if (frameCounter >= 10.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 109:
				if (velocity.Y == 0f && ((velocity.X <= 0f && direction < 0) || (velocity.X >= 0f && direction > 0)))
				{
					spriteDirection = direction;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter >= 7.0)
				{
					frameCounter -= 7.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 83:
			case 84:
			case 179:
				if (ai[0] == 2f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 72:
				frameCounter += 1.0;
				if (frameCounter >= 3.0)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				break;
			case 65:
				spriteDirection = direction;
				frameCounter += 1.0;
				if (wet && type == 65)
				{
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				break;
			case 542:
			case 543:
			case 544:
			case 545:
				spriteDirection = direction;
				frameCounter += 1.0;
				if (frameCounter >= 16.0)
				{
					frameCounter = 0.0;
				}
				frame.Y = num * (int)(frameCounter / 4.0);
				break;
			case 224:
			case 587:
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
					rotation = velocity.Y * 0.2f;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (0f - velocity.Y) * 0.2f;
				}
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
				break;
			case 150:
			case 151:
			case 152:
			case 158:
			case 226:
				if (type == 151)
				{
					int num73 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num73].noGravity = true;
				}
				if (type == 150 && Main.rand.Next(10) == 0)
				{
					int num74 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, velocity.X * 0.5f, velocity.Y * 0.5f, 90, default(Color), 1.5f);
					Main.dust[num74].noGravity = true;
					Dust dust = Main.dust[num74];
					dust.velocity *= 0.2f;
					Main.dust[num74].noLight = true;
				}
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
				frameCounter += 1.0;
				if (frameCounter >= 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * 4)
				{
					frame.Y = 0;
				}
				break;
			case 48:
			case 49:
			case 51:
			case 60:
			case 82:
			case 93:
			case 137:
			case 182:
			case 210:
			case 211:
			case 253:
			case 316:
			case 634:
			case 662:
			{
				if (type == 60)
				{
					int num10 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num10].noGravity = true;
				}
				if (type == 634 && Main.rand.Next(10) == 0)
				{
					int num11 = Dust.NewDust(base.position, width, height, 165, velocity.X, velocity.Y, 50);
					Dust dust = Main.dust[num11];
					dust.velocity *= 0.1f;
					Main.dust[num11].noGravity = true;
				}
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
				if (type == 210 || type == 211)
				{
					frameCounter += 1.0;
					rotation = velocity.X * 0.2f;
				}
				frameCounter += 1.0;
				int num12 = 6;
				int num13 = Main.npcFrameCount[type];
				if (type == 49 || type == 51 || type == 60 || type == 634)
				{
					num13--;
				}
				if (type == 48)
				{
					num12 = 5;
				}
				if (frameCounter >= (double)num12)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * num13)
				{
					frame.Y = 0;
				}
				break;
			}
			case 330:
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.15f;
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 42:
			case 231:
			case 232:
			case 233:
			case 234:
			case 235:
				frameCounter += 1.0;
				if (frameCounter < 2.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 4.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 8.0)
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 205:
				frameCounter += 0.5;
				if (frameCounter < 2.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 4.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 8.0)
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 176:
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num)
				{
					frame.Y = 0;
				}
				break;
			case 43:
			case 56:
			case 175:
				frameCounter += 1.0;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num;
				}
				if (frameCounter == 23.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 115:
				frameCounter += 1.0;
				if (frameCounter < 3.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 6.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 12.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 15.0)
				{
					frame.Y = num;
				}
				if (frameCounter == 15.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 101:
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num * 2;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 2)
				{
					frame.Y = 0;
				}
				break;
			case 199:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (frame.Y < num * 3)
				{
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
				}
				else
				{
					if (velocity.Y != 0f)
					{
						break;
					}
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter > 12.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y > num * 7)
						{
							frame.Y = num * 3;
						}
					}
				}
				break;
			case 467:
				if (ai[0] == 1f || IsABestiaryIconDummy)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frameCounter = 0.0;
						if (frame.Y < num * 6)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						else if (IsABestiaryIconDummy)
						{
							frame.Y = 0;
						}
					}
					break;
				}
				frameCounter += 1.0;
				if (frameCounter > 4.0)
				{
					frameCounter = 0.0;
					if (frame.Y > num * 3)
					{
						frame.Y = num * 3;
					}
					if (frame.Y > 0)
					{
						frame.Y -= num;
						frameCounter = 0.0;
					}
				}
				break;
			case 480:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] < 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 3.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y >= Main.npcFrameCount[type] * num)
						{
							frame.Y = num * 21;
						}
						else if (frame.Y < num * 21)
						{
							frame.Y = num * 21;
						}
					}
					else if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 4.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num > 7)
						{
							frame.Y = 0;
						}
					}
					else
					{
						frameCounter += 1f + Math.Abs(velocity.X);
						if (frameCounter > 6.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - 4)
						{
							frame.Y = num * 10;
						}
						else if (frame.Y / num < 10)
						{
							frame.Y = num * 10;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
				}
				break;
			case 483:
				if (ai[0] == -1f)
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 21)
					{
						frame.Y = num * 21;
					}
					else if (frame.Y < num * 13)
					{
						frame.Y = num * 13;
					}
					rotation += velocity.X * 0.2f;
				}
				else
				{
					frameCounter += 1.0;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 11)
					{
						frame.Y = 0;
					}
					rotation = velocity.X * 0.1f;
				}
				break;
			case 482:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] < 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 3.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y >= Main.npcFrameCount[type] * num)
						{
							frame.Y = num * 11;
						}
						else if (frame.Y < num * 11)
						{
							frame.Y = num * 11;
						}
					}
					else if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						frame.Y = 0;
					}
					else
					{
						frameCounter += 0.2f + Math.Abs(velocity.X);
						if (frameCounter > 8.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num >= Main.npcFrameCount[type] - 10)
						{
							frame.Y = num * 2;
						}
						else if (frame.Y / num < 2)
						{
							frame.Y = num * 2;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 631:
			{
				int num75 = 8;
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
					if (ai[2] != 0f && ai[2] < 100f)
					{
						float num76 = ai[2] - 76f;
						float amount = num76 / 24f;
						Player player = Main.player[target];
						bool flag3 = player != null && ((player.Center.X < base.Center.X) ? (direction == -1) : (direction == 1));
						bool flag4 = player?.Hitbox.Intersects(base.Hitbox) ?? false;
						if (player != null && flag3 && !flag4 && Collision.CanHit(player, this))
						{
							frame.Y = (int)MathHelper.Lerp(15f, Main.npcFrameCount[type], amount) * num;
						}
						else if (flag3 && flag4)
						{
							frame.Y = (int)MathHelper.Lerp(10f, 15f, amount) * num;
						}
						else
						{
							frame.Y = 0;
						}
					}
					else if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = 0;
					}
					else
					{
						frameCounter += 0.2f + Math.Abs(velocity.X);
						if (frameCounter > 8.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y >= num75 * num)
						{
							frame.Y = num;
						}
						else if (frame.Y / num < 1)
						{
							frame.Y = num;
						}
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			}
			case 461:
				if (wet)
				{
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					if (spriteDirection != direction)
					{
						rotation *= -1f;
						spriteDirection = direction;
					}
					float num218 = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
					if ((double)Math.Abs(rotation - num218) >= 3.14)
					{
						if (num218 < rotation)
						{
							rotation -= 6.28f;
						}
						else
						{
							rotation += 6.28f;
						}
					}
					rotation = (rotation * 4f + num218) / 5f;
					frameCounter += Math.Abs(velocity.Length());
					frameCounter += 1.0;
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 20)
					{
						frame.Y = num * 16;
					}
					else if (frame.Y / num < 16)
					{
						frame.Y = num * 19;
					}
					break;
				}
				if ((double)rotation > 3.14)
				{
					rotation -= 6.28f;
				}
				if ((double)rotation > -0.01 && (double)rotation < 0.01)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.9f;
				}
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 15)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 586:
			{
				if (wet)
				{
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.Length());
					frameCounter += 1.0;
					if (frameCounter > 60.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 1)
					{
						frame.Y = 0;
					}
					else if (frame.Y / num < 0)
					{
						frame.Y = 0;
					}
					break;
				}
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.X == 0f)
				{
					frame.Y = num;
					frameCounter = 0.0;
					break;
				}
				int num209 = 6;
				num209 = 8;
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 0.5;
				if (frameCounter > (double)num209)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			}
			case 466:
				if (!IsABestiaryIconDummy && ai[2] <= 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] == 0f)
					{
						frame.Y = 0;
					}
					else if (ai[2] < -8f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num * 2;
					}
				}
				else if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y / num < 4)
					{
						frame.Y = num * 4;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 7.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 17)
					{
						frame.Y = num * 4;
					}
					if (frame.Y / num < 4)
					{
						frame.Y = num * 4;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 3;
				}
				break;
			case 471:
			{
				bool flag6 = false;
				if (ai[3] < 0f)
				{
					flag6 = true;
				}
				if (flag6)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					frameCounter += Math.Abs(velocity.Length()) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter < 6.0)
					{
						frame.Y = num * 17;
						break;
					}
					if (frameCounter < 12.0)
					{
						frame.Y = num * 18;
						break;
					}
					if (frameCounter < 18.0)
					{
						frame.Y = num * 19;
						break;
					}
					if (frameCounter < 23.0)
					{
						frame.Y = num * 18;
						break;
					}
					frame.Y = num * 18;
					frameCounter = 0.0;
				}
				else if (ai[3] == 1f)
				{
					frame.Y = num * 16;
					frameCounter = 0.0;
				}
				else if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 7.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 15)
					{
						frame.Y = num * 2;
					}
					if (frame.Y / num < 2)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			}
			case 166:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frameCounter += 2.0;
						if (frameCounter > 7.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num > 5)
						{
							frame.Y = 0;
						}
						break;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 12)
					{
						frame.Y = num * 7;
					}
					if (frame.Y / num < 7)
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 6;
				}
				break;
			case 469:
				if (ai[2] == 1f)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					spriteDirection = direction;
					frameCounter += Math.Abs(velocity.Length());
					if (frameCounter > 11.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 5)
					{
						frame.Y = num * 2;
					}
					if (frame.Y / num < 2)
					{
						frame.Y = num * 2;
					}
					break;
				}
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = 0;
						break;
					}
					frameCounter += Math.Abs(velocity.X);
					frameCounter += 1.0;
					if (frameCounter > 9.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num > 11)
					{
						frame.Y = num * 6;
					}
					if (frame.Y / num < 6)
					{
						frame.Y = num * 6;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 351:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 8.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					if (velocity.Y < 0f)
					{
						frame.Y = num;
					}
					else
					{
						frame.Y = num;
					}
					frameCounter = 0.0;
				}
				break;
			case 343:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = num * 2;
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					if (velocity.Y < 0f)
					{
						frame.Y = 0;
					}
					else
					{
						frame.Y = num;
					}
					frameCounter = 0.0;
				}
				break;
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						if (type == 140)
						{
							frame.Y = num;
							frameCounter = 0.0;
						}
						else
						{
							frame.Y = 0;
							frameCounter = 0.0;
						}
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			case 230:
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 10.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
					if (velocity.Y > 4f)
					{
						rotation -= velocity.Y * 0.01f;
					}
				}
				break;
			case 593:
				if (velocity.Y == 0f)
				{
					rotation = 0f;
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += 1.0;
					if (frameCounter > 10.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
					if (velocity.Y > 4f)
					{
						rotation -= velocity.Y * 0.01f;
					}
				}
				break;
			case 290:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						if (ai[1] < 10f)
						{
							frame.Y = num * 11;
						}
						else if (ai[1] < 20f)
						{
							frame.Y = num * 10;
						}
						else
						{
							frame.Y = num * 9;
						}
						break;
					}
					if (velocity.X == 0f)
					{
						frameCounter = 0.0;
						frame.Y = 0;
						break;
					}
					if (frame.Y < num * 2)
					{
						frame.Y = num * 2;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 8)
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num;
				}
				break;
			case 110:
			case 214:
			case 215:
			case 216:
			case 293:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * (int)ai[2];
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 6;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			case 206:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * (int)ai[2];
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 6;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			case 350:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * ((int)ai[2] - 1);
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 7)
					{
						frame.Y = num * 7;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X * 1.3f;
					if (frameCounter > 4.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 5;
				}
				break;
			case 111:
			case 291:
			case 292:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (ai[2] > 0f)
					{
						spriteDirection = direction;
						frame.Y = num * ((int)ai[2] - 1);
						frameCounter = 0.0;
						break;
					}
					if (frame.Y < num * 7)
					{
						frame.Y = num * 7;
					}
					frameCounter += Math.Abs(velocity.X) * 2f;
					frameCounter += velocity.X * 1.3f;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 7;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 6;
				}
				break;
			case 257:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter < 8.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 16.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 32.0)
				{
					frame.Y = num * 3;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 258:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter += 1.0;
					if (frameCounter > 1.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y > num * 5 || frame.Y < num * 3)
					{
						frame.Y = num * 3;
					}
				}
				else if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				else
				{
					frameCounter += Math.Abs(velocity.X);
					if (frameCounter < 8.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 16.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 2;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				break;
			case 348:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = num;
				}
				break;
			case 349:
				frameCounter += 1.0;
				if (frameCounter > 3.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y > num * 7)
				{
					frame.Y = 0;
				}
				break;
			case 3:
			case 52:
			case 53:
			case 132:
			case 161:
			case 186:
			case 187:
			case 188:
			case 189:
			case 200:
			case 223:
			case 251:
			case 254:
			case 255:
			case 319:
			case 320:
			case 321:
			case 331:
			case 332:
			case 342:
			case 536:
			case 590:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.Y != 0f || (direction == -1 && velocity.X > 0f) || (direction == 1 && velocity.X < 0f))
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
					break;
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter < 8.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 16.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 24.0)
				{
					frame.Y = num * 2;
				}
				else if (frameCounter < 32.0)
				{
					frame.Y = num;
				}
				else
				{
					frameCounter = 0.0;
				}
				break;
			case 148:
			case 149:
			case 168:
			case 470:
			{
				int num19 = 0;
				if (localAI[0] == 2f)
				{
					num19 = 3;
				}
				if (localAI[0] == 3f)
				{
					num19 = 6;
				}
				if (localAI[0] == 4f)
				{
					num19 = 9;
				}
				num19 *= num;
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = num19;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					if (frameCounter < 6.0)
					{
						frame.Y = num19;
						break;
					}
					if (frameCounter < 12.0)
					{
						frame.Y = num + num19;
						break;
					}
					if (frameCounter < 15.0)
					{
						frame.Y = num * 2 + num19;
						break;
					}
					frameCounter = 0.0;
					frame.Y = num * 2 + num19;
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 2 + num19;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 2 + num19;
				}
				break;
			}
			case 299:
			case 538:
			case 539:
			case 639:
			case 640:
			case 641:
			case 642:
			case 643:
			case 644:
			case 645:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type] - 1)
					{
						frame.Y = num;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 2;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
				}
				break;
			case 300:
			case 447:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 8.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num > 1)
						{
							frame.Y = 0;
						}
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				break;
			case 610:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 8.0)
						{
							frame.Y += num;
							frameCounter = 0.0;
						}
						if (frame.Y / num > 1)
						{
							frame.Y = 0;
						}
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				else
				{
					frameCounter += Math.Abs(velocity.X) * 0.5f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = num * 2;
					}
				}
				break;
			case 361:
			case 445:
				spriteDirection = direction;
				if (wet)
				{
					frameCounter = 0.0;
					if (velocity.X > 0.25f || velocity.X < -0.25f)
					{
						frame.Y = num * 10;
					}
					else if (velocity.X > 0.15f || velocity.X < -0.15f)
					{
						frame.Y = num * 11;
					}
					else
					{
						frame.Y = num * 12;
					}
				}
				else if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frameCounter += 1.0;
						if (frameCounter > 6.0)
						{
							frameCounter = 0.0;
							frame.Y += num;
						}
						if (frame.Y > num * 5)
						{
							frame.Y = 0;
						}
						break;
					}
					frameCounter += 1.0;
					int num195 = 6;
					if (frameCounter < (double)num195)
					{
						frame.Y = 0;
						break;
					}
					if (frameCounter < (double)(num195 * 2))
					{
						frame.Y = num * 6;
						break;
					}
					if (frameCounter < (double)(num195 * 3))
					{
						frame.Y = num * 8;
						break;
					}
					frame.Y = num * 9;
					if (frameCounter >= (double)(num195 * 4 - 1))
					{
						frameCounter = 0.0;
					}
				}
				else if (velocity.Y > 0f)
				{
					frame.Y = num * 9;
				}
				else
				{
					frame.Y = num * 8;
				}
				break;
			case 616:
			case 617:
			{
				int num181 = 8;
				int num182 = 5;
				if (velocity.X == 0f)
				{
					num182 = 10;
				}
				spriteDirection = direction;
				if (wet)
				{
					frameCounter += 1.0;
					if (frameCounter > (double)num182)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y > num * 13)
						{
							frame.Y = num * 8;
						}
					}
					break;
				}
				frameCounter += 1.0;
				if (frameCounter > (double)num181)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 7)
					{
						frame.Y = 0;
					}
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				if (velocity.Y != 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 8;
				}
				break;
			}
			case 625:
			{
				int num170 = 7;
				int num171 = 4;
				if (velocity.X == 0f)
				{
					num171 = 8;
				}
				spriteDirection = direction;
				if (wet)
				{
					if (frame.Y < num * 6)
					{
						frame.Y = num * 6;
					}
					frameCounter += 1.0;
					if (frameCounter > (double)num171)
					{
						frameCounter = 0.0;
						frame.Y += num;
						if (frame.Y > num * 11)
						{
							frame.Y = num * 6;
						}
					}
					break;
				}
				if (frame.Y > num * 5)
				{
					frame.Y = 0;
				}
				frameCounter += 1.0;
				if (frameCounter > (double)num170)
				{
					frameCounter = 0.0;
					frame.Y += num;
					if (frame.Y > num * 5)
					{
						frame.Y = 0;
					}
				}
				if (velocity.X == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				break;
			}
			case 626:
			case 627:
				if (velocity.X != 0f)
				{
					spriteDirection = ((!(velocity.X < 0f)) ? 1 : (-1));
				}
				if (IsABestiaryIconDummy)
				{
					frameCounter += 1.0;
					if (frameCounter > 5.0)
					{
						frameCounter = 0.0;
						frame.Y += num;
					}
					if (frame.Y > num * 5)
					{
						frame.Y = 0;
					}
				}
				else if (!wet)
				{
					frame.Y = 0;
				}
				else if (velocity.Length() > 0.15f)
				{
					frame.Y = num * 3;
				}
				else if (velocity.Length() > 0.05f)
				{
					frame.Y = num * 2;
				}
				else if (velocity.Length() > 0.025f)
				{
					frame.Y = num;
				}
				else
				{
					frame.Y = 0;
				}
				break;
			case 366:
			case 367:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (velocity.X == 0f)
				{
					frame.Y = 0;
					frameCounter = 0.0;
					break;
				}
				frameCounter += Math.Abs(velocity.X) * 1f;
				frameCounter += 1.0;
				if (frameCounter > 6.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y / num >= Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 46:
			case 47:
			case 303:
			case 337:
			case 443:
			case 464:
			case 540:
			case 614:
			case 646:
			case 647:
			case 648:
			case 649:
			case 650:
			case 651:
			case 652:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
					if (velocity.X == 0f)
					{
						frame.Y = 0;
						frameCounter = 0.0;
						break;
					}
					frameCounter += Math.Abs(velocity.X) * 1f;
					frameCounter += 1.0;
					if (frameCounter > 6.0)
					{
						frame.Y += num;
						frameCounter = 0.0;
					}
					if (frame.Y / num >= Main.npcFrameCount[type])
					{
						frame.Y = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 4;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0.0;
					frame.Y = num * 6;
				}
				break;
			case 4:
			case 125:
			case 126:
				frameCounter += 1.0;
				if (frameCounter < 7.0)
				{
					frame.Y = 0;
				}
				else if (frameCounter < 14.0)
				{
					frame.Y = num;
				}
				else if (frameCounter < 21.0)
				{
					frame.Y = num * 2;
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = 0;
				}
				if (ai[0] > 1f)
				{
					frame.Y += num * 3;
				}
				break;
			case 5:
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 94:
				frameCounter += 1.0;
				if (frameCounter < 6.0)
				{
					frame.Y = 0;
					break;
				}
				if (frameCounter < 12.0)
				{
					frame.Y = num;
					break;
				}
				if (frameCounter < 18.0)
				{
					frame.Y = num * 2;
					break;
				}
				frame.Y = num;
				if (frameCounter >= 23.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 6:
			case 173:
				frameCounter += 1.0;
				if (frameCounter >= 8.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 24:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				if (ai[1] > 0f)
				{
					if (frame.Y < 4)
					{
						frameCounter = 0.0;
					}
					frameCounter += 1.0;
					if (frameCounter <= 4.0)
					{
						frame.Y = num * 4;
						break;
					}
					if (frameCounter <= 8.0)
					{
						frame.Y = num * 5;
						break;
					}
					if (frameCounter <= 12.0)
					{
						frame.Y = num * 6;
						break;
					}
					if (frameCounter <= 16.0)
					{
						frame.Y = num * 7;
						break;
					}
					if (frameCounter <= 20.0)
					{
						frame.Y = num * 8;
						break;
					}
					frame.Y = num * 9;
					frameCounter = 100.0;
					break;
				}
				frameCounter += 1.0;
				if (frameCounter <= 4.0)
				{
					frame.Y = 0;
					break;
				}
				if (frameCounter <= 8.0)
				{
					frame.Y = num;
					break;
				}
				if (frameCounter <= 12.0)
				{
					frame.Y = num * 2;
					break;
				}
				frame.Y = num * 3;
				if (frameCounter >= 16.0)
				{
					frameCounter = 0.0;
				}
				break;
			case 29:
			case 32:
			case 45:
			case 172:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
				if (velocity.Y == 0f)
				{
					if (direction == 1)
					{
						spriteDirection = 1;
					}
					if (direction == -1)
					{
						spriteDirection = -1;
					}
				}
				frame.Y = 0;
				if (velocity.Y != 0f)
				{
					frame.Y += num * 2;
				}
				else if (ai[1] > 0f)
				{
					frame.Y += num;
				}
				break;
			case 34:
				frameCounter += 1.0;
				if (frameCounter >= 4.0)
				{
					frame.Y += num;
					frameCounter = 0.0;
				}
				if (frame.Y >= num * Main.npcFrameCount[type])
				{
					frame.Y = 0;
				}
				break;
			case 624:
				if (velocity.Y == 0f)
				{
					spriteDirection = direction;
				}
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					frameCounter = 0.0;
					frame.Y = 0;
					break;
				}
				if (velocity.Y < 0f)
				{
					frameCounter = 0.0;
					frame.Y = 9 * num;
					break;
				}
				if (velocity.Y > 0f)
				{
					frameCounter = 0.0;
					frame.Y = 10 * num;
					break;
				}
				frameCounter += Math.Abs(velocity.X);
				if (frameCounter > 8.0)
				{
					int num20 = frame.Y / num;
					frameCounter -= 8.0;
					num20++;
					if (num20 > 8)
					{
						num20 = 1;
					}
					frame.Y = num20 * num;
				}
				break;
			case 628:
				spriteDirection = ((!(Main.WindForVisuals > 0f)) ? 1 : (-1));
				if (IsABestiaryIconDummy)
				{
					int num3 = frame.Y / num;
					int num4 = 5;
					spriteDirection = 1;
					frameCounter += 1.0;
					if (frameCounter > (double)num4)
					{
						frameCounter -= num4;
						num3++;
						if (num3 > 5)
						{
							num3 = 0;
						}
						frame.Y = num3 * num;
					}
				}
				else if (ai[0] == 0f)
				{
					int num5 = frame.Y / num;
					int num6 = 8;
					if (num5 == 6)
					{
						frameCounter += 1f + 0.5f * Math.Abs(Main.WindForVisuals);
						if (frameCounter > (double)num6)
						{
							frameCounter -= num6;
							num5 = 0;
							frame.Y = num5 * num;
						}
						break;
					}
					if (num5 > 5)
					{
						num5 = 6;
						frameCounter = 0.0;
						frame.Y = num5 * num;
						break;
					}
					frameCounter += 1f + 0.5f * Math.Abs(Main.WindForVisuals);
					if (frameCounter > (double)num6)
					{
						frameCounter -= num6;
						num5++;
						if (num5 > 5)
						{
							num5 = 0;
						}
						frame.Y = num5 * num;
					}
				}
				else if (localAI[0] == 0f)
				{
					frameCounter += 1.0;
					if (!(frameCounter > 4.0))
					{
						break;
					}
					frameCounter = 0.0;
					int num7 = frame.Y / num;
					if (num7 == 6)
					{
						num7 = 7;
					}
					else if (num7 < 7)
					{
						num7 = 6;
					}
					else
					{
						num7++;
						if (num7 > 10)
						{
							num7 = 7;
						}
					}
					frame.Y = num7 * num;
				}
				else if (localAI[0] == 1f)
				{
					int num8 = frame.Y / num;
					num8 = (int)MathHelper.Lerp(7f, 20f, (float)frameCounter / 80f);
					if (num8 > 19)
					{
						num8 = 19;
					}
					if (num8 > 16)
					{
						num8 -= 9;
					}
					frameCounter += 1.0;
					if (frameCounter > 80.0)
					{
						frameCounter = 0.0;
					}
					frame.Y = num8 * num;
				}
				break;
			}
			if (aiStyle == 39 && type != 417)
			{
				if (ai[0] == 0f)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						spriteDirection = direction;
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0.0;
					}
					frameCounter += Math.Abs(velocity.X) * 1.1f;
					if (frameCounter < 6.0)
					{
						frame.Y = 0;
					}
					else if (frameCounter < 12.0)
					{
						frame.Y = num;
					}
					else if (frameCounter < 18.0)
					{
						frame.Y = num * 2;
					}
					else if (frameCounter < 24.0)
					{
						frame.Y = num * 3;
					}
					else if (frameCounter < 32.0)
					{
						frame.Y = num * 4;
					}
					else
					{
						frameCounter = 0.0;
					}
				}
				else if (ai[0] == 1f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 5;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 7;
					}
				}
				else if (ai[0] == 5f)
				{
					frameCounter = 0.0;
					if (ai[1] < 10f)
					{
						frame.Y = num * 7;
					}
					else if (ai[1] < 20f)
					{
						frame.Y = num * 6;
					}
					else
					{
						frame.Y = num * 5;
					}
				}
				else
				{
					frameCounter = 0.0;
					frame.Y = num * 7;
				}
			}
			base.position -= netOffset;
		}

		public void SimpleFlyMovement(Vector2 desiredVelocity, float moveSpeed)
		{
			if (velocity.X < desiredVelocity.X)
			{
				velocity.X += moveSpeed;
				if (velocity.X < 0f && desiredVelocity.X > 0f)
				{
					velocity.X += moveSpeed;
				}
			}
			else if (velocity.X > desiredVelocity.X)
			{
				velocity.X -= moveSpeed;
				if (velocity.X > 0f && desiredVelocity.X < 0f)
				{
					velocity.X -= moveSpeed;
				}
			}
			if (velocity.Y < desiredVelocity.Y)
			{
				velocity.Y += moveSpeed;
				if (velocity.Y < 0f && desiredVelocity.Y > 0f)
				{
					velocity.Y += moveSpeed;
				}
			}
			else if (velocity.Y > desiredVelocity.Y)
			{
				velocity.Y -= moveSpeed;
				if (velocity.Y > 0f && desiredVelocity.Y < 0f)
				{
					velocity.Y -= moveSpeed;
				}
			}
		}

		public void HealEffect(int healAmount, bool broadcast = true)
		{
			int num = CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.HealLife, healAmount);
			if (broadcast && Main.netMode == 2 && num != 100)
			{
				CombatText combatText = Main.combatText[num];
				NetMessage.SendData(81, -1, -1, null, (int)combatText.color.PackedValue, combatText.position.X, combatText.position.Y, healAmount);
			}
		}

		public static void HealEffect(Rectangle r, int healAmount, bool broadcast = true)
		{
			int num = CombatText.NewText(r, CombatText.HealLife, healAmount);
			if (broadcast && Main.netMode == 2 && num != 100)
			{
				CombatText combatText = Main.combatText[num];
				NetMessage.SendData(81, -1, -1, null, (int)combatText.color.PackedValue, combatText.position.X, combatText.position.Y, healAmount);
			}
		}

		public int FindClosestPlayer()
		{
			float distanceToPlayer;
			return FindClosestPlayer(out distanceToPlayer);
		}

		public int FindClosestPlayer(out float distanceToPlayer)
		{
			Vector2 center = base.Center;
			float num = float.MaxValue;
			int num2 = -1;
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (player.active && !player.dead && !player.ghost)
				{
					float num3 = Vector2.DistanceSquared(center, player.Center);
					if (num3 < num)
					{
						num = num3;
						num2 = i;
					}
				}
			}
			if (num2 < 0)
			{
				for (int j = 0; j < 255; j++)
				{
					Player player = Main.player[j];
					if (player.active)
					{
						float num4 = Vector2.DistanceSquared(center, player.Center);
						if (num4 < num)
						{
							num = num4;
							num2 = j;
						}
					}
				}
			}
			distanceToPlayer = (float)Math.Sqrt(num);
			return num2;
		}

		public void BigMimicSpawnSmoke()
		{
			if (Main.netMode == 2)
			{
				NetMessage.SendData(51, -1, -1, null, whoAmI, 4f);
				return;
			}
			for (int i = 0; i < 20; i++)
			{
				int num = Dust.NewDust(position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
				Main.dust[num].velocity *= 2f;
				Main.dust[num].noGravity = true;
			}
			for (int j = 0; j < 3; j++)
			{
				for (int k = 0; k < 2; k++)
				{
					int num2 = Gore.NewGore(new Vector2(position.X + (float)(width * j) * 0.45f - 20f, position.Y + (float)(height * k) * 0.5f + 10f), new Vector2(0f, 0f), 99, 1.1f);
					Main.gore[num2].velocity *= 0.3f;
				}
			}
		}

		public static bool BigMimicSummonCheck(int x, int y)
		{
			if (Main.netMode == 1 || !Main.hardMode)
			{
				return false;
			}
			int num = Chest.FindChest(x, y);
			if (num < 0)
			{
				return false;
			}
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < 40; i++)
			{
				ushort num5 = Main.tile[Main.chest[num].x, Main.chest[num].y].type;
				int num6 = Main.tile[Main.chest[num].x, Main.chest[num].y].frameX / 36;
				if (TileID.Sets.BasicChest[num5] && (num5 != 21 || num6 < 5 || num6 > 6) && Main.chest[num].item[i] != null && Main.chest[num].item[i].type > 0)
				{
					if (Main.chest[num].item[i].type == 3092)
					{
						num2 += Main.chest[num].item[i].stack;
					}
					else if (Main.chest[num].item[i].type == 3091)
					{
						num3 += Main.chest[num].item[i].stack;
					}
					else
					{
						num4++;
					}
				}
			}
			if (num4 == 0 && num2 + num3 == 1)
			{
				if (num2 != 1)
				{
					_ = 1;
				}
				if (TileID.Sets.BasicChest[Main.tile[x, y].type])
				{
					if (Main.tile[x, y].frameX % 36 != 0)
					{
						x--;
					}
					if (Main.tile[x, y].frameY % 36 != 0)
					{
						y--;
					}
					int number = Chest.FindChest(x, y);
					for (int j = 0; j < 40; j++)
					{
						Main.chest[num].item[j] = new Item();
					}
					Chest.DestroyChest(x, y);
					for (int k = x; k <= x + 1; k++)
					{
						for (int l = y; l <= y + 1; l++)
						{
							if (TileID.Sets.BasicChest[Main.tile[k, l].type])
							{
								Main.tile[k, l].ClearTile();
							}
						}
					}
					int number2 = 1;
					if (Main.tile[x, y].type == 467)
					{
						number2 = 5;
					}
					NetMessage.SendData(34, -1, -1, null, number2, x, y, 0f, number);
					NetMessage.SendTileSquare(-1, x, y, 3);
				}
				int num7 = 475;
				if (num3 == 1)
				{
					num7 = ((!WorldGen.crimson) ? 473 : 474);
				}
				int num8 = NewNPC(x * 16 + 16, y * 16 + 32, num7);
				Main.npc[num8].whoAmI = num8;
				NetMessage.SendData(23, -1, -1, null, num8);
				Main.npc[num8].BigMimicSpawnSmoke();
			}
			return false;
		}

		public bool ShouldFaceTarget(NPCUtils.TargetSearchResults searchResults, NPCUtils.TargetType? overrideTargetType = null)
		{
			NPCUtils.TargetType nearestTargetType = searchResults.NearestTargetType;
			if (overrideTargetType.HasValue)
			{
				nearestTargetType = overrideTargetType.Value;
			}
			switch (nearestTargetType)
			{
			case NPCUtils.TargetType.NPC:
			case NPCUtils.TargetType.TankPet:
				return true;
			case NPCUtils.TargetType.Player:
			{
				bool flag = true;
				Player nearestTankOwner = searchResults.NearestTankOwner;
				if (nearestTankOwner.dead || (nearestTankOwner.npcTypeNoAggro[type] && direction != 0))
				{
					flag = false;
				}
				if (!flag)
				{
					break;
				}
				float num = (float)(nearestTankOwner.width + nearestTankOwner.height + width + height) / 4f + 800f;
				if (nearestTankOwner.itemAnimation == 0 && nearestTankOwner.aggro < 0 && searchResults.NearestTankDistance > num)
				{
					if (oldTarget >= 0)
					{
						return oldTarget >= 255;
					}
					return true;
				}
				return true;
			}
			}
			return false;
		}

		public void FaceTarget()
		{
			direction = ((!((float)targetRect.Center.X < base.Center.X)) ? 1 : (-1));
			directionY = ((!((float)targetRect.Center.Y < base.Center.Y)) ? 1 : (-1));
		}

		public void TargetClosestUpgraded(bool faceTarget = true, Vector2? checkPosition = null)
		{
			int num = -1;
			int num2 = -1;
			int num3 = -1;
			Vector2 center = base.Center;
			if (checkPosition.HasValue)
			{
				center = checkPosition.Value;
			}
			bool flag = direction == 0;
			float num4 = 9999999f;
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (!player.active || player.dead || player.ghost)
				{
					continue;
				}
				float num5 = Vector2.Distance(center, player.Center);
				num5 -= (float)player.aggro;
				bool flag2 = player.npcTypeNoAggro[type];
				if (flag2 && !flag)
				{
					num5 += 1000f;
				}
				if (num5 < num4)
				{
					num = i;
					num2 = -1;
					num4 = num5;
				}
				if (player.tankPet >= 0 && !flag2)
				{
					num5 = Vector2.Distance(center, Main.projectile[player.tankPet].Center);
					num5 -= 200f;
					if (num5 < num4 && num5 < 200f && Collision.CanHit(base.Center, 0, 0, Main.projectile[player.tankPet].Center, 0, 0))
					{
						num2 = player.tankPet;
						num4 = num5;
					}
				}
			}
			for (int j = 0; j < 200; j++)
			{
				NPC nPC = Main.npc[j];
				if (nPC.active && nPC.type == 548)
				{
					float num6 = Vector2.Distance(center, nPC.Center);
					if (num4 > num6)
					{
						num3 = j;
						num = -1;
						num2 = -1;
						num4 = num6;
					}
				}
			}
			if (num4 == 9999999f)
			{
				return;
			}
			if (num3 >= 0)
			{
				target = Main.npc[num3].WhoAmIToTargettingIndex;
				targetRect = Main.npc[num3].Hitbox;
				direction = ((!((float)targetRect.Center.X < base.Center.X)) ? 1 : (-1));
				directionY = ((!((float)targetRect.Center.Y < base.Center.Y)) ? 1 : (-1));
				return;
			}
			if (num2 >= 0)
			{
				target = Main.projectile[num2].owner;
				targetRect = Main.projectile[num2].Hitbox;
				direction = ((!((float)targetRect.Center.X < base.Center.X)) ? 1 : (-1));
				directionY = ((!((float)targetRect.Center.Y < base.Center.Y)) ? 1 : (-1));
				return;
			}
			if (num < 0 || num >= 255)
			{
				num = 0;
			}
			Player player2 = Main.player[num];
			targetRect = player2.Hitbox;
			target = num;
			if (player2.dead || (player2.npcTypeNoAggro[type] && !flag))
			{
				faceTarget = false;
			}
			if (faceTarget)
			{
				float num7 = (float)(player2.width + player2.height + width + height) / 4f + 800f;
				float num8 = num4 - (float)player2.aggro;
				if (player2.itemAnimation != 0 || player2.aggro >= 0 || !(num8 > num7) || oldTarget < 0 || oldTarget >= 255)
				{
					direction = ((!((float)targetRect.Center.X < base.Center.X)) ? 1 : (-1));
					directionY = ((!((float)targetRect.Center.Y < base.Center.Y)) ? 1 : (-1));
				}
			}
		}

		public void TargetClosest(bool faceTarget = true)
		{
			float num = 0f;
			float num2 = 0f;
			bool flag = false;
			int num3 = -1;
			for (int i = 0; i < 255; i++)
			{
				if (!Main.player[i].active || Main.player[i].dead || Main.player[i].ghost)
				{
					continue;
				}
				float num4 = Math.Abs(Main.player[i].position.X + (float)(Main.player[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[i].position.Y + (float)(Main.player[i].height / 2) - position.Y + (float)(height / 2));
				num4 -= (float)Main.player[i].aggro;
				if (Main.player[i].npcTypeNoAggro[type] && direction != 0)
				{
					num4 += 1000f;
				}
				if (!flag || num4 < num)
				{
					flag = true;
					num3 = -1;
					num2 = Math.Abs(Main.player[i].position.X + (float)(Main.player[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[i].position.Y + (float)(Main.player[i].height / 2) - position.Y + (float)(height / 2));
					num = num4;
					target = i;
				}
				if (Main.player[i].tankPet >= 0 && !Main.player[i].npcTypeNoAggro[type])
				{
					int tankPet = Main.player[i].tankPet;
					float num5 = Math.Abs(Main.projectile[tankPet].position.X + (float)(Main.projectile[tankPet].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.projectile[tankPet].position.Y + (float)(Main.projectile[tankPet].height / 2) - position.Y + (float)(height / 2));
					num5 -= 200f;
					if (num5 < num && num5 < 200f && Collision.CanHit(base.Center, 1, 1, Main.projectile[tankPet].Center, 1, 1))
					{
						num3 = tankPet;
					}
				}
			}
			if (num3 >= 0)
			{
				int num6 = num3;
				targetRect = new Rectangle((int)Main.projectile[num6].position.X, (int)Main.projectile[num6].position.Y, Main.projectile[num6].width, Main.projectile[num6].height);
				direction = 1;
				if ((float)(targetRect.X + targetRect.Width / 2) < position.X + (float)(width / 2))
				{
					direction = -1;
				}
				directionY = 1;
				if ((float)(targetRect.Y + targetRect.Height / 2) < position.Y + (float)(height / 2))
				{
					directionY = -1;
				}
			}
			else
			{
				if (target < 0 || target >= 255)
				{
					target = 0;
				}
				targetRect = new Rectangle((int)Main.player[target].position.X, (int)Main.player[target].position.Y, Main.player[target].width, Main.player[target].height);
				if (Main.player[target].dead)
				{
					faceTarget = false;
				}
				if (Main.player[target].npcTypeNoAggro[type] && direction != 0)
				{
					faceTarget = false;
				}
				if (faceTarget)
				{
					_ = Main.player[target].aggro;
					_ = (Main.player[target].height + Main.player[target].width + height + width) / 4;
					if (Main.player[target].itemAnimation != 0 || Main.player[target].aggro >= 0 || oldTarget < 0 || oldTarget > 254)
					{
						direction = 1;
						if ((float)(targetRect.X + targetRect.Width / 2) < position.X + (float)(width / 2))
						{
							direction = -1;
						}
						directionY = 1;
						if ((float)(targetRect.Y + targetRect.Height / 2) < position.Y + (float)(height / 2))
						{
							directionY = -1;
						}
					}
				}
			}
			if (confused)
			{
				direction *= -1;
			}
			if ((direction != oldDirection || directionY != oldDirectionY || target != oldTarget) && !collideX && !collideY)
			{
				netUpdate = true;
			}
		}

		public bool DoesntDespawnToInactivity()
		{
			switch (type)
			{
			case 8:
			case 9:
			case 11:
			case 12:
			case 14:
			case 15:
			case 36:
			case 40:
			case 41:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 96:
			case 97:
			case 99:
			case 100:
			case 113:
			case 114:
			case 115:
			case 118:
			case 119:
			case 128:
			case 129:
			case 130:
			case 131:
			case 134:
			case 135:
			case 136:
			case 246:
			case 247:
			case 248:
			case 249:
			case 263:
			case 267:
			case 328:
			case 379:
			case 380:
			case 392:
			case 393:
			case 394:
			case 396:
			case 397:
			case 398:
			case 400:
			case 422:
			case 437:
			case 438:
			case 439:
			case 440:
			case 488:
			case 492:
			case 493:
			case 507:
			case 517:
			case 548:
			case 549:
			case 551:
			case 564:
			case 565:
				return true;
			case 139:
				if (npcsFoundForCheckActive[134])
				{
					return true;
				}
				break;
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 559:
			case 560:
			case 561:
			case 562:
			case 563:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
				if (npcsFoundForCheckActive[548])
				{
					return true;
				}
				break;
			}
			return false;
		}

		public void CheckActive()
		{
			if (!active || DoesntDespawnToInactivity())
			{
				return;
			}
			if (townNPC)
			{
				AddIntoPlayersTownNPCSlots();
				return;
			}
			bool flag = false;
			Rectangle rectangle = new Rectangle((int)(position.X + (float)(width / 2) - (float)activeRangeX), (int)(position.Y + (float)(height / 2) - (float)activeRangeY), activeRangeX * 2, activeRangeY * 2);
			Rectangle rectangle2 = new Rectangle((int)((double)(position.X + (float)(width / 2)) - (double)sWidth * 0.5 - (double)width), (int)((double)(position.Y + (float)(height / 2)) - (double)sHeight * 0.5 - (double)height), sWidth + width * 2, sHeight + height * 2);
			for (int i = 0; i < 255; i++)
			{
				if (!Main.player[i].active)
				{
					continue;
				}
				Rectangle hitbox = Main.player[i].Hitbox;
				if (rectangle.Intersects(hitbox))
				{
					flag = true;
					if (type != 25 && type != 30 && type != 33 && releaseOwner == 255 && lifeMax > 0)
					{
						if (Main.slimeRain && Main.slimeRainNPC[type])
						{
							Main.player[i].nearbyActiveNPCs += npcSlots * Main.slimeRainNPCSlots;
						}
						else
						{
							Main.player[i].nearbyActiveNPCs += npcSlots;
						}
					}
				}
				if (rectangle2.Intersects(hitbox))
				{
					timeLeft = activeTime;
					despawnEncouraged = false;
					if (i == Main.myPlayer && (type == 604 || type == 605))
					{
						LadyBugLuck(i, type == 605);
					}
				}
				if (boss)
				{
					flag = true;
				}
				switch (type)
				{
				case 7:
				case 10:
				case 13:
				case 35:
				case 36:
				case 39:
				case 87:
				case 127:
				case 128:
				case 129:
				case 130:
				case 131:
				case 392:
				case 393:
				case 394:
				case 491:
				case 492:
					flag = true;
					break;
				case 399:
					if (ai[0] == 2f || ai[0] == 1f)
					{
						timeLeft = activeTime;
					}
					flag = true;
					break;
				case 583:
				case 584:
				case 585:
					if (!Main.dayTime && ai[2] == 0f)
					{
						flag = true;
						timeLeft = activeTime;
					}
					break;
				}
			}
			timeLeft--;
			if (timeLeft <= 0)
			{
				flag = false;
			}
			if (flag || Main.netMode == 1)
			{
				return;
			}
			noSpawnCycle = true;
			active = false;
			if (Main.netMode == 2)
			{
				netSkip = -1;
				life = 0;
				NetMessage.SendData(23, -1, -1, null, whoAmI);
			}
			if (extraValue > 0)
			{
				RevengeManager.CacheEnemy(this);
			}
			if (aiStyle != 6)
			{
				return;
			}
			for (int num = (int)ai[0]; num > 0; num = (int)Main.npc[num].ai[0])
			{
				if (Main.npc[num].active)
				{
					Main.npc[num].active = false;
					if (Main.netMode == 2)
					{
						Main.npc[num].life = 0;
						Main.npc[num].netSkip = -1;
						NetMessage.SendData(23, -1, -1, null, num);
					}
				}
			}
		}

		private void AddIntoPlayersTownNPCSlots()
		{
			Rectangle rectangle = new Rectangle((int)(position.X + (float)(width / 2) - (float)townRangeX), (int)(position.Y + (float)(height / 2) - (float)townRangeY), townRangeX * 2, townRangeY * 2);
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && rectangle.Intersects(Main.player[i].Hitbox))
				{
					Main.player[i].townNPCs += npcSlots;
				}
			}
		}

		public void checkDead()
		{
			if (!active || (realLife >= 0 && realLife != whoAmI) || life > 0)
			{
				return;
			}
			if (type == 604 || type == 605)
			{
				LadyBugKilled(base.Center, type == 605);
			}
			if (type == 397 || type == 396)
			{
				if (ai[0] != -2f)
				{
					ai[0] = -2f;
					life = lifeMax;
					netUpdate = true;
					dontTakeDamage = true;
					if (Main.netMode != 1)
					{
						int num = NewNPC((int)base.Center.X, (int)base.Center.Y, 400);
						Main.npc[num].ai[3] = ai[3];
						Main.npc[num].netUpdate = true;
					}
				}
				return;
			}
			if (type == 398 && ai[0] != 2f)
			{
				ai[0] = 2f;
				life = lifeMax;
				netUpdate = true;
				dontTakeDamage = true;
				return;
			}
			if ((type == 517 || type == 422 || type == 507 || type == 493) && ai[2] != 1f)
			{
				ai[2] = 1f;
				ai[1] = 0f;
				life = lifeMax;
				dontTakeDamage = true;
				netUpdate = true;
				return;
			}
			if (type == 548 && ai[1] != 1f)
			{
				ai[1] = 1f;
				ai[0] = 0f;
				life = lifeMax;
				dontTakeDamageFromHostiles = true;
				netUpdate = true;
				return;
			}
			noSpawnCycle = true;
			if (townNPC && type != 37 && type != 453)
			{
				if (Main.netMode != 2)
				{
					NPCLuck();
				}
				bool flag = true;
				NetworkText fullNetName = GetFullNetName();
				int num2 = 19;
				if (type == 369 || NPCID.Sets.IsTownPet[type])
				{
					num2 = 36;
					flag = false;
				}
				NetworkText networkText = NetworkText.FromKey(Lang.misc[num2].Key, fullNetName);
				if (flag)
				{
					for (int i = 0; i < 255; i++)
					{
						Player player = Main.player[i];
						if (player != null && player.active && player.difficulty != 2)
						{
							flag = false;
							break;
						}
					}
				}
				if (flag)
				{
					DropTombstoneTownNPC(networkText);
				}
				if (Main.netMode == 0)
				{
					Main.NewText(networkText.ToString(), byte.MaxValue, 25, 25);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(networkText, new Color(255, 25, 25));
				}
			}
			if (Main.netMode != 1 && !Main.dayTime && type == 54 && !AnyNPCs(35))
			{
				for (int j = 0; j < 255; j++)
				{
					if (Main.player[j].active && !Main.player[j].dead && Main.player[j].killClothier)
					{
						SpawnSkeletron();
						break;
					}
				}
			}
			if (townNPC && Main.netMode != 1 && homeless && WorldGen.prioritizedTownNPCType == type)
			{
				WorldGen.prioritizedTownNPCType = 0;
			}
			if (DeathSound != null)
			{
				SoundEngine.PlaySound(DeathSound, base.position);
			}
			if (type == 13 || type == 14 || type == 15)
			{
				DropEoWLoot();
			}
			else if (type == 134)
			{
				Vector2 position = base.position;
				Vector2 center = Main.player[target].Center;
				float num3 = 1E+08f;
				Vector2 position2 = base.position;
				for (int k = 0; k < 200; k++)
				{
					if (Main.npc[k].active && (Main.npc[k].type == 134 || Main.npc[k].type == 135 || Main.npc[k].type == 136))
					{
						float num4 = Math.Abs(Main.npc[k].Center.X - center.X) + Math.Abs(Main.npc[k].Center.Y - center.Y);
						if (num4 < num3)
						{
							num3 = num4;
							position2 = Main.npc[k].position;
						}
					}
				}
				base.position = position2;
				NPCLoot();
				base.position = position;
			}
			else
			{
				NPCLoot();
			}
			active = false;
			DD2Event.CheckProgress(type);
			CheckProgressFrostMoon();
			CheckProgressPumpkinMoon();
			int nPCInvasionGroup = GetNPCInvasionGroup(type);
			if (nPCInvasionGroup <= 0 || nPCInvasionGroup != Main.invasionType)
			{
				return;
			}
			int num5 = 1;
			switch (type)
			{
			case 216:
				num5 = 5;
				break;
			case 395:
				num5 = 10;
				break;
			case 491:
				num5 = 10;
				break;
			case 471:
				num5 = 10;
				break;
			case 472:
				num5 = 0;
				break;
			case 387:
				num5 = 0;
				break;
			}
			if (num5 > 0)
			{
				Main.invasionSize -= num5;
				if (Main.invasionSize < 0)
				{
					Main.invasionSize = 0;
				}
				if (Main.netMode != 1)
				{
					Main.ReportInvasionProgress(Main.invasionSizeStart - Main.invasionSize, Main.invasionSizeStart, nPCInvasionGroup + 3, 0);
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(78, -1, -1, null, Main.invasionProgress, Main.invasionProgressMax, Main.invasionProgressIcon);
				}
			}
		}

		public void DropTombstoneTownNPC(NetworkText deathText)
		{
			if (Main.netMode != 1)
			{
				float num = 0.1f;
				if (Main.rand.Next(2) == 0)
				{
					num = -0.1f;
				}
				float num2;
				for (num2 = (float)Main.rand.Next(-35, 36) * 0.1f; num2 < 2f && num2 > -2f; num2 += (float)Main.rand.Next(-30, 31) * 0.1f)
				{
				}
				int num3 = Main.rand.Next(6);
				if (type != 17 && type != 441)
				{
					num3 = ((num3 != 0) ? (num3 + 200) : 43);
				}
				else
				{
					num3 = Main.rand.Next(5);
					num3 += 527;
				}
				int num4 = Projectile.NewProjectile(position.X + (float)(width / 2), position.Y + (float)(height / 2), (float)Main.rand.Next(10, 30) * num + num2, (float)Main.rand.Next(-40, -20) * 0.1f, num3, 0, 0f, Main.myPlayer);
				Main.projectile[num4].miscText = deathText.ToString();
			}
		}

		public static int GetNPCInvasionGroup(int npcID)
		{
			int result = 0;
			switch (npcID)
			{
			case 26:
			case 27:
			case 28:
			case 29:
			case 111:
			case 471:
			case 472:
				result = 1;
				break;
			case 143:
			case 144:
			case 145:
				result = 2;
				break;
			case 212:
			case 213:
			case 214:
			case 215:
			case 216:
			case 491:
				result = 3;
				break;
			case 381:
			case 382:
			case 383:
			case 385:
			case 386:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 395:
				result = 4;
				break;
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
				result = -1;
				break;
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 325:
			case 326:
			case 327:
			case 329:
			case 330:
				result = -2;
				break;
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 559:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
				result = -3;
				break;
			}
			return result;
		}

		private void DropEoWLoot(bool fromCheckDead = true)
		{
			bool flag = true;
			for (int i = 0; i < 200; i++)
			{
				if (i != whoAmI && Main.npc[i].active && (Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15))
				{
					flag = false;
					break;
				}
			}
			if (flag)
			{
				boss = true;
				NPCLoot();
			}
			else
			{
				NPCLoot();
			}
		}

		private void CheckProgressFrostMoon()
		{
			if (!Main.snowMoon)
			{
				return;
			}
			int num = 0;
			NetworkText networkText = NetworkText.Empty;
			int[] array = new int[21]
			{
				0,
				25,
				15,
				10,
				30,
				100,
				160,
				180,
				200,
				250,
				300,
				375,
				450,
				525,
				675,
				850,
				1025,
				1325,
				1550,
				2000,
				0
			};
			num = array[waveNumber];
			switch (waveNumber)
			{
			case 1:
				networkText = Lang.GetInvasionWaveText(2, 338, 350);
				break;
			case 2:
				networkText = Lang.GetInvasionWaveText(3, 338, 350, 342, 348);
				break;
			case 3:
				networkText = Lang.GetInvasionWaveText(4, 344, 338, 350, 342);
				break;
			case 4:
				networkText = Lang.GetInvasionWaveText(5, 344, 338, 350, 348);
				break;
			case 5:
				networkText = Lang.GetInvasionWaveText(6, 344, 350, 348, 347);
				break;
			case 6:
				networkText = Lang.GetInvasionWaveText(7, 346, 342, 350, 338);
				break;
			case 7:
				networkText = Lang.GetInvasionWaveText(8, 346, 347, 350, 348, 351);
				break;
			case 8:
				networkText = Lang.GetInvasionWaveText(9, 346, 344, 348, 347, 342);
				break;
			case 9:
				networkText = Lang.GetInvasionWaveText(10, 346, 344, 351, 338, 347);
				break;
			case 10:
				networkText = Lang.GetInvasionWaveText(11, 345, 352, 338, 342);
				break;
			case 11:
				networkText = Lang.GetInvasionWaveText(12, 345, 344, 342, 343, 338);
				break;
			case 12:
				networkText = Lang.GetInvasionWaveText(13, 345, 346, 342, 352, 343, 347);
				break;
			case 13:
				networkText = Lang.GetInvasionWaveText(14, 345, 346, 344, 343, 351);
				break;
			case 14:
				networkText = Lang.GetInvasionWaveText(15, 345, 346, 344, 343, 347);
				break;
			case 15:
				networkText = Lang.GetInvasionWaveText(16, 345, 346, 344, 343, 352);
				break;
			case 16:
				networkText = Lang.GetInvasionWaveText(17, 345, 346, 344, 343, 351, 347);
				break;
			case 17:
				networkText = Lang.GetInvasionWaveText(18, 345, 346, 344, 343, 348, 351);
				break;
			case 18:
				networkText = Lang.GetInvasionWaveText(19, 345, 346, 344, 343);
				break;
			case 19:
				networkText = Lang.GetInvasionWaveText(-1, 345, 346, 344);
				break;
			}
			float num2 = 0f;
			switch (type)
			{
			case 338:
			case 339:
			case 340:
				num2 = 1f;
				break;
			case 341:
				num2 = 20f;
				break;
			case 342:
				num2 = 2f;
				break;
			case 343:
				num2 = 18f;
				break;
			case 344:
				num2 = 50f;
				break;
			case 345:
				num2 = 150f;
				break;
			case 346:
				num2 = 100f;
				break;
			case 347:
				num2 = 8f;
				break;
			case 348:
			case 349:
				num2 = 4f;
				break;
			case 350:
				num2 = 3f;
				break;
			}
			if (Main.expertMode)
			{
				num2 *= 2f;
			}
			float num3 = waveKills;
			waveKills += num2;
			if (waveKills >= (float)num && num != 0)
			{
				waveKills = 0f;
				waveNumber++;
				num = array[waveNumber];
				if (networkText != NetworkText.Empty)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(networkText.ToString(), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(networkText, new Color(175, 75, 255));
					}
					if (waveNumber == 15)
					{
						AchievementsHelper.NotifyProgressionEvent(14);
					}
				}
			}
			if (waveKills != num3 && num2 != 0f)
			{
				if (Main.netMode != 1)
				{
					Main.ReportInvasionProgress((int)waveKills, num, 1, waveNumber);
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(78, -1, -1, null, Main.invasionProgress, Main.invasionProgressMax, 1f, waveNumber);
				}
			}
		}

		private void CheckProgressPumpkinMoon()
		{
			if (!Main.pumpkinMoon)
			{
				return;
			}
			int num = 0;
			NetworkText networkText = NetworkText.Empty;
			int[] array = new int[16]
			{
				0,
				25,
				40,
				50,
				80,
				100,
				160,
				180,
				200,
				250,
				300,
				375,
				450,
				525,
				675,
				0
			};
			num = array[waveNumber];
			switch (waveNumber)
			{
			case 1:
				networkText = Lang.GetInvasionWaveText(2, 305, 326);
				break;
			case 2:
				networkText = Lang.GetInvasionWaveText(3, 305, 326, 329);
				break;
			case 3:
				networkText = Lang.GetInvasionWaveText(4, 305, 326, 329, 325);
				break;
			case 4:
				networkText = Lang.GetInvasionWaveText(5, 305, 326, 329, 330, 325);
				break;
			case 5:
				networkText = Lang.GetInvasionWaveText(6, 326, 329, 330, 325);
				break;
			case 6:
				networkText = Lang.GetInvasionWaveText(7, 305, 329, 330, 327);
				break;
			case 7:
				networkText = Lang.GetInvasionWaveText(8, 326, 329, 330, 327);
				break;
			case 8:
				networkText = Lang.GetInvasionWaveText(9, 305, 315, 325, 327);
				break;
			case 9:
				networkText = Lang.GetInvasionWaveText(10, 326, 329, 330, 315, 325, 327);
				break;
			case 10:
				networkText = Lang.GetInvasionWaveText(11, 305, 326, 329, 330, 315, 325, 327);
				break;
			case 11:
				networkText = Lang.GetInvasionWaveText(12, 326, 329, 330, 315, 325, 327);
				break;
			case 12:
				networkText = Lang.GetInvasionWaveText(13, 329, 330, 315, 325, 327);
				break;
			case 13:
				networkText = Lang.GetInvasionWaveText(14, 315, 325, 327);
				break;
			case 14:
				networkText = Lang.GetInvasionWaveText(-1, 325, 327);
				break;
			}
			float num2 = 0f;
			switch (type)
			{
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
				num2 = 1f;
				break;
			case 315:
				num2 = 25f;
				break;
			case 325:
				num2 = 75f;
				break;
			case 326:
				num2 = 2f;
				break;
			case 327:
				num2 = 150f;
				break;
			case 329:
				num2 = 4f;
				break;
			case 330:
				num2 = 8f;
				break;
			}
			if (Main.expertMode)
			{
				num2 *= 2f;
			}
			float num3 = waveKills;
			waveKills += num2;
			if (waveKills >= (float)num && num != 0)
			{
				waveKills = 0f;
				waveNumber++;
				num = array[waveNumber];
				if (networkText != NetworkText.Empty)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(networkText.ToString(), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(networkText, new Color(175, 75, 255));
					}
					if (waveNumber == 15)
					{
						AchievementsHelper.NotifyProgressionEvent(15);
					}
				}
			}
			if (waveKills != num3 && num2 != 0f)
			{
				if (Main.netMode != 1)
				{
					Main.ReportInvasionProgress((int)waveKills, num, 2, waveNumber);
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(78, -1, -1, null, Main.invasionProgress, Main.invasionProgressMax, 2f, waveNumber);
				}
			}
		}

		public static void ResetKillCount()
		{
			for (int i = 0; i < 663; i++)
			{
				killCount[i] = 0;
			}
		}

		public bool AnyInteractions()
		{
			if (Main.netMode == 0)
			{
				if (playerInteraction[Main.myPlayer])
				{
					return true;
				}
			}
			else
			{
				for (int i = 0; i < 255; i++)
				{
					if (playerInteraction[i])
					{
						return true;
					}
				}
			}
			return false;
		}

		public static void SetEventFlagCleared(bool eventFlag, int gameEventId)
		{
			bool flag = eventFlag;
			eventFlag = true;
			if (eventFlag != flag)
			{
				OnGameEventClearedForTheFirstTime(gameEventId);
			}
		}

		public static void OnGameEventClearedForTheFirstTime(int gameEventId)
		{
			if (gameEventId != 4 && (uint)(gameEventId - 21) > 1u)
			{
				LanternNight.NextNightIsLanternNight = true;
			}
		}

		public void NPCLootOld()
		{
			if (Main.netMode == 1 || type >= 663)
			{
				return;
			}
			bool flag = false;
			bool flag2 = downedMechBoss1 && downedMechBoss2 && downedMechBoss3;
			Player player = Main.player[Player.FindClosest(position, width, height)];
			if (!flag)
			{
				CountKillForAchievements();
				if (GetWereThereAnyInteractions())
				{
					CountKillForBannersAndDropThem();
				}
			}
			if ((type == 23 && Main.hardMode) || (SpawnedFromStatue && NPCID.Sets.NoEarlymodeLootWhenSpawnedFromStatue[type] && !Main.hardMode) || (SpawnedFromStatue && NPCID.Sets.StatueSpawnedDropRarity[type] != -1f && (Main.rand.NextFloat() >= NPCID.Sets.StatueSpawnedDropRarity[type] || !AnyInteractions())))
			{
				return;
			}
			NPCLoot_DropFood(player);
			int num = type;
			if (num == 86)
			{
				int range = (Main.expertMode ? 30 : 40);
				if (player.RollLuck(range) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3260);
				}
			}
			if (Main.slimeRain && Main.slimeRainNPC[type] && !flag && !AnyNPCs(50))
			{
				int num2 = 150;
				if (downedSlimeKing)
				{
					num2 /= 2;
				}
				Main.slimeRainKillCount++;
				if (Main.slimeRainKillCount >= num2)
				{
					SpawnOnPlayer(player.whoAmI, 50);
					Main.slimeRainKillCount = -num2 / 2;
				}
			}
			if (!player.ZoneDungeon && !flag)
			{
				bool flag3 = false;
				if (Main.expertMode && player.RollLuck(5) == 0)
				{
					flag3 = true;
				}
				else if (player.RollLuck(5) == 0)
				{
					flag3 = true;
				}
				if (boss)
				{
					flag3 = false;
				}
				num = type;
				if (num == 1 || (uint)(num - 13) <= 2u || num == 535)
				{
					flag3 = false;
				}
				if (Main.hardMode && lifeMax > 1 && damage > 0 && !friendly && (double)position.Y > Main.rockLayer * 16.0 && flag3 && type != 121 && value > 0f)
				{
					if (player.ZoneCorrupt || player.ZoneCrimson)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 521);
					}
					if (player.ZoneHallow)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 520);
					}
				}
			}
			if (type == 1 && ai[1] > 0f)
			{
				int num3 = (int)ai[1];
				if (num3 > 0 && num3 < 5045)
				{
					int stackForSlimeItemDrop = GetStackForSlimeItemDrop(num3);
					Item.NewItem((int)position.X, (int)position.Y, width, height, num3, stackForSlimeItemDrop);
				}
			}
			if (type == 22 && GivenOrTypeName == "Andrew")
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 867);
			}
			if (type == 178 && GivenOrTypeName == "Whitney")
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4372);
			}
			if (type == 353 && player.RollLuck(8) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3352);
			}
			if (type == 441 && player.RollLuck(8) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3351);
			}
			if (type == 227 && player.RollLuck(10) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3350);
			}
			if (type == 550 && player.RollLuck(6) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3821);
			}
			if (type == 208 && player.RollLuck(4) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3548, Main.rand.Next(30, 61));
			}
			if (type == 207 && player.RollLuck(8) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3349);
			}
			if (Main.hardMode && !flag && value > 0f)
			{
				if (!downedMechBoss1 && player.RollLuck(2500) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 556);
				}
				else if (!downedMechBoss2 && player.RollLuck(2500) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 544);
				}
				else if (!downedMechBoss3 && player.RollLuck(2500) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 557);
				}
			}
			if (Main.halloween && value > 0f && value < 500f && damage < 40 && defense < 20 && !flag)
			{
				if (player.RollLuck(2000) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1825);
				}
				else if (player.RollLuck(2000) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1827);
				}
			}
			if (Main.hardMode && value > 0f && !flag)
			{
				if (player.RollLuck(2500) == 0 && player.ZoneJungle)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1533);
				}
				if (player.RollLuck(2500) == 0 && player.ZoneCorrupt)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1534);
				}
				if (player.RollLuck(2500) == 0 && player.ZoneCrimson)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1535);
				}
				if (player.RollLuck(2500) == 0 && player.ZoneHallow)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1536);
				}
				if (player.RollLuck(2500) == 0 && player.ZoneSnow)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1537);
				}
			}
			if (DD2Event.Ongoing)
			{
				switch (type)
				{
				case 552:
				case 553:
				case 554:
					DD2Event.AnnounceGoblinDeath(this);
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(position, base.Size, 3822);
					}
					break;
				case 555:
				case 556:
				case 557:
				case 561:
				case 562:
				case 563:
				case 570:
				case 571:
				case 572:
				case 573:
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(position, base.Size, 3822);
					}
					break;
				case 576:
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem(position, base.Size, 3865);
					}
					if (Main.rand.Next(Main.expertMode ? 2 : 3) == 0)
					{
						Item.NewItem(position, base.Size, Utils.SelectRandom(Main.rand, new short[4]
						{
							3809,
							3811,
							3810,
							3812
						}));
					}
					if (Main.rand.Next(Main.expertMode ? 2 : 3) == 0)
					{
						Item.NewItem(position, base.Size, Utils.SelectRandom(Main.rand, new short[5]
						{
							3852,
							3854,
							3823,
							3835,
							3836
						}));
					}
					if (Main.rand.Next(Main.expertMode ? 4 : 5) == 0)
					{
						Item.NewItem(position, base.Size, 3856);
					}
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(position, base.Size, 3822);
					}
					break;
				case 577:
					if (Main.rand.Next(14) == 0)
					{
						Item.NewItem(position, base.Size, 3865);
					}
					if (Main.rand.Next(6) == 0)
					{
						Item.NewItem(position, base.Size, Utils.SelectRandom(Main.rand, new short[4]
						{
							3809,
							3811,
							3810,
							3812
						}));
					}
					if (Main.rand.Next(6) == 0)
					{
						Item.NewItem(position, base.Size, Utils.SelectRandom(Main.rand, new short[5]
						{
							3852,
							3854,
							3823,
							3835,
							3836
						}));
					}
					if (Main.rand.Next(10) == 0)
					{
						Item.NewItem(position, base.Size, 3856);
					}
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(position, base.Size, 3822);
					}
					break;
				case 558:
				case 559:
				case 560:
				case 568:
				case 569:
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(position, base.Size, 3822);
					}
					break;
				case 564:
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem(position, base.Size, 3864);
					}
					if (Main.rand.Next(5) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Item.NewItem(position, base.Size, 3815, 4);
						}
						else
						{
							Item.NewItem(position, base.Size, 3814);
						}
					}
					if (Main.rand.Next(Main.expertMode ? 2 : 3) == 0)
					{
						Item.NewItem(position, base.Size, Utils.SelectRandom(Main.rand, new short[2]
						{
							3857,
							3855
						}));
					}
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(position, base.Size, 3822);
					}
					break;
				case 565:
					if (Main.rand.Next(14) == 0)
					{
						Item.NewItem(position, base.Size, 3864);
					}
					if (Main.rand.Next(10) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Item.NewItem(position, base.Size, 3815, 4);
						}
						else
						{
							Item.NewItem(position, base.Size, 3814);
						}
					}
					if (Main.rand.Next(6) == 0)
					{
						Item.NewItem(position, base.Size, Utils.SelectRandom(Main.rand, new short[2]
						{
							3857,
							3855
						}));
					}
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(position, base.Size, 3822);
					}
					break;
				case 574:
				case 575:
				case 578:
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(position, base.Size, 3822);
					}
					break;
				}
			}
			if (type == 68)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1169);
			}
			if (Main.snowMoon)
			{
				int num4 = waveNumber;
				if (Main.expertMode)
				{
					num4 += 7;
				}
				int num5 = (int)((double)(30 - num4) / 2.5);
				if (Main.expertMode)
				{
					num5 -= 2;
				}
				if (num5 < 1)
				{
					num5 = 1;
				}
				if (type == 344)
				{
					SetEventFlagCleared(downedChristmasTree, 21);
				}
				if (type == 345)
				{
					SetEventFlagCleared(downedChristmasIceQueen, 20);
				}
				if (type == 346)
				{
					SetEventFlagCleared(downedChristmasSantank, 22);
				}
				if ((type == 344 || type == 345 || type == 346) && player.RollLuck(num5) == 0 && num4 >= 15)
				{
					int num6 = 4;
					if (num4 == 16)
					{
						num6 = 4;
					}
					if (num4 == 17)
					{
						num6 = 3;
					}
					if (num4 == 18)
					{
						num6 = 3;
					}
					if (num4 == 19)
					{
						num6 = 2;
					}
					if (num4 >= 20)
					{
						num6 = 2;
					}
					if (Main.expertMode && Main.rand.Next(3) == 0)
					{
						num6--;
					}
					if (Main.rand.Next(num6) == 0)
					{
						if (type == 344)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1962);
						}
						if (type == 345)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1960);
						}
						if (type == 346)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1961);
						}
					}
				}
				if (player.RollLuck(num5) == 0)
				{
					if (type == 344)
					{
						int num7 = Main.rand.Next(3);
						if (player.RollLuck(15) == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1871, 1, noBroadcast: false, -1);
						}
						else
						{
							if (num7 == 0)
							{
								Item.NewItem((int)position.X, (int)position.Y, width, height, 1916);
							}
							if (num7 == 1)
							{
								Item.NewItem((int)position.X, (int)position.Y, width, height, 1928, 1, noBroadcast: false, -1);
							}
							if (num7 == 2)
							{
								Item.NewItem((int)position.X, (int)position.Y, width, height, 1930, 1, noBroadcast: false, -1);
							}
						}
					}
					if (type == 346)
					{
						int num8 = Main.rand.Next(2);
						if (num8 == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1910, 1, noBroadcast: false, -1);
						}
						if (num8 == 1)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1929, 1, noBroadcast: false, -1);
						}
					}
					if (type == 345)
					{
						if (waveNumber >= 15 && player.RollLuck(30) == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1914);
						}
						else if (player.RollLuck(15) == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1959);
						}
						else
						{
							int num9 = Main.rand.Next(3);
							if (num9 == 0)
							{
								Item.NewItem((int)position.X, (int)position.Y, width, height, 1931, 1, noBroadcast: false, -1);
							}
							if (num9 == 1)
							{
								Item.NewItem((int)position.X, (int)position.Y, width, height, 1946, 1, noBroadcast: false, -1);
							}
							if (num9 == 2)
							{
								Item.NewItem((int)position.X, (int)position.Y, width, height, 1947, 1, noBroadcast: false, -1);
							}
						}
					}
				}
			}
			if (type == 341)
			{
				int num10 = Main.rand.Next(5, 11);
				for (int i = 0; i < num10; i++)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				if (Main.xMas)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1869);
				}
			}
			if (type >= 338 && type <= 340 && player.RollLuck(5) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
			}
			if (type >= 338 && type <= 340 && player.RollLuck(200) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1943 + Main.rand.Next(3));
			}
			if (type == 342 && Main.rand.Next(3) != 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
			}
			if (Main.pumpkinMoon)
			{
				if (type == 325)
				{
					SetEventFlagCleared(downedHalloweenTree, 4);
				}
				if (type == 327)
				{
					SetEventFlagCleared(downedHalloweenKing, 5);
				}
				int num11 = waveNumber;
				if (Main.expertMode)
				{
					num11 += 6;
				}
				int num12 = (int)((double)(17 - num11) / 1.25);
				if (Main.expertMode)
				{
					num12--;
				}
				if (num12 < 1)
				{
					num12 = 1;
				}
				if (num11 >= 15)
				{
					if (type == 325)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1855);
					}
					if (type == 327)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1856);
					}
				}
				if (Main.rand.Next(num12) == 0)
				{
					if (type == 315 && Main.rand.Next(20) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1857);
					}
					if (type >= 305 && type <= 314 && Main.rand.Next(10) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, Main.rand.Next(1788, 1791));
					}
					if (type == 325)
					{
						int num13 = Main.rand.Next(5);
						if (num13 == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1829);
						}
						if (num13 == 1)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1831);
						}
						if (num13 == 2)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1835, 1, noBroadcast: false, -1);
						}
						if (num13 == 2)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1836, Main.rand.Next(30, 61));
						}
						if (num13 == 3)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1837);
						}
						if (num13 == 4)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1845, 1, noBroadcast: false, -1);
						}
						if (Main.expertMode && Main.rand.Next(5) == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 4444);
						}
					}
					if (type == 327)
					{
						int num14 = Main.rand.Next(7);
						if (num14 == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1782, 1, noBroadcast: false, -1);
						}
						if (num14 == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1783, Main.rand.Next(50, 101));
						}
						if (num14 == 1)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1784, 1, noBroadcast: false, -1);
						}
						if (num14 == 1)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1785, Main.rand.Next(25, 51));
						}
						if (num14 == 2)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1811);
						}
						if (num14 == 3)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1826, 1, noBroadcast: false, -1);
						}
						if (num14 == 4)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1801, 1, noBroadcast: false, -1);
						}
						if (num14 == 5)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1802, 1, noBroadcast: false, -1);
						}
						if (num14 == 6)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1798);
						}
					}
				}
			}
			if (type == 325)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1729, Main.rand.Next(30, 51));
			}
			if (type == 326)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1729, Main.rand.Next(1, 5));
			}
			if (type >= 305 && type <= 314 && Main.rand.Next(4) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
			}
			if (type == 326 && Main.rand.Next(6) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
			}
			if (type == 329 && Main.rand.Next(4) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
			}
			if (type == 330 && Main.rand.Next(4) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
			}
			if (type == 315)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
			}
			if (Main.halloween && lifeMax > 1 && damage > 0 && !friendly && type != 121 && type != 23 && value > 0f && player.RollLuck(80) == 0 && !flag)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1774);
			}
			if (Main.xMas && lifeMax > 1 && damage > 0 && !friendly && type != 121 && value > 0f && player.RollLuck(13) == 0 && !flag)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1869);
			}
			if (lifeMax > 5 && value > 0f && !friendly && Main.hardMode && position.Y / 16f > (float)Main.UnderworldLayer && !flag && player.RollLuck(50) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 2701, Main.rand.Next(20, 51));
			}
			if (type == 325 || type == 327 || type == 344 || type == 345 || type == 346)
			{
				int num15 = Main.rand.Next(6) + 6;
				for (int j = 0; j < num15; j++)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
			}
			if (type == 156 && player.RollLuck(75) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1518);
			}
			if (type == 243 && player.RollLuck(3) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1519);
			}
			if (type >= 269 && type <= 280 && player.RollLuck(450) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1517);
			}
			if ((type == 158 || type == 159) && player.RollLuck(40) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1520);
			}
			if (type == 48 && player.RollLuck(200) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1516);
			}
			if (type == 176 && player.RollLuck(150) == 0 && downedMechBossAny)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1521);
			}
			if (type == 205 && player.RollLuck(2) == 0 && downedMechBossAny)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1611);
			}
			if (type == 483 || type == 482)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3086, Main.rand.Next(5, 11), noBroadcast: false, -1);
			}
			if (!Main.hardMode && player.RollLuck(100) == 0 && HasPlayerTarget && lifeMax > 5 && !friendly && !flag && player.RollLuck(4) == 0 && position.Y / 16f > (float)(Main.maxTilesY - 350) && downedBoss3)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3282, 1, noBroadcast: false, -1);
			}
			if (Main.hardMode && HasPlayerTarget && Main.player[target].ZoneSnow && player.RollLuck(300) == 0 && HasPlayerTarget && lifeMax > 5 && !friendly && value > 0f && !flag)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3289, 1, noBroadcast: false, -1);
			}
			else if (Main.hardMode && player.RollLuck(200) == 0 && HasPlayerTarget && lifeMax > 5 && !friendly && value > 0f && !flag)
			{
				if (Main.player[target].ZoneJungle && downedMechBossAny)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3286, 1, noBroadcast: false, -1);
				}
				else if (Main.player[target].ZoneDungeon && downedPlantBoss && Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3291, 1, noBroadcast: false, -1);
				}
				else if ((double)(position.Y / 16f) > (Main.rockLayer + (double)(Main.maxTilesY * 2)) / 3.0 && !Main.player[target].ZoneDungeon && Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3290, 1, noBroadcast: false, -1);
				}
			}
			int num16 = 1;
			if (Main.expertMode && Main.rand.Next(2) == 0)
			{
				num16 = 2;
			}
			for (int k = 0; k < num16; k++)
			{
				if (type == 461 && player.RollLuck(50) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 497, 1, noBroadcast: false, -1);
				}
				if ((type == 159 || type == 158) && player.RollLuck(35) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 900, 1, noBroadcast: false, -1);
				}
				if (type == 251 && player.RollLuck(15) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1311, 1, noBroadcast: false, -1);
				}
				if (downedMechBoss1 && downedMechBoss2 && downedMechBoss3)
				{
					if (type == 477)
					{
						if (player.RollLuck(20) == 0 && downedPlantBoss)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 2770, 1, noBroadcast: false, -1);
							k++;
						}
						if (player.RollLuck(4) == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1570, 1, noBroadcast: false, -1);
							k++;
						}
						else if (player.RollLuck(3) == 0 && downedPlantBoss)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 3292, 1, noBroadcast: false, -1);
							k++;
						}
					}
					if (type == 253 && player.RollLuck(40) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1327, 1, noBroadcast: false, -1);
					}
				}
				if (downedPlantBoss)
				{
					if (type == 460 && player.RollLuck(40) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3098, 1, noBroadcast: false, -1);
					}
					if (type == 468 && player.RollLuck(40) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3105, 1, noBroadcast: false, -1);
					}
					if (type == 466 && player.RollLuck(40) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3106, 1, noBroadcast: false, -1);
					}
					if (type == 467 && player.RollLuck(40) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3249, 1, noBroadcast: false, -1);
					}
					if (type == 463 && player.RollLuck(25) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3107, 1, noBroadcast: false, -1);
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3108, Main.rand.Next(100, 201), noBroadcast: false, -1);
					}
				}
			}
			if (Main.bloodMoon && Main.hardMode && player.RollLuck(1000) == 0 && value > 0f && !flag)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1314, 1, noBroadcast: false, -1);
			}
			if (type == 77 && player.RollLuck(150) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 723, 1, noBroadcast: false, -1);
			}
			if (type == 47 && player.RollLuck(25) == 0 && Main.IsItAHappyWindyDay)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4670, 1, noBroadcast: false, -1);
			}
			if (type == 464 && player.RollLuck(25) == 0 && Main.IsItAHappyWindyDay)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4671, 1, noBroadcast: false, -1);
			}
			if (player.RollLuck(100) == 0 || (Main.expertMode && player.RollLuck(100) == 0))
			{
				int num17 = -1;
				int num18 = -1;
				switch (type)
				{
				case 480:
					num17 = 3781;
					break;
				case 102:
				case 104:
				case 269:
				case 270:
				case 271:
				case 272:
					num17 = 885;
					break;
				case 77:
				case 273:
				case 274:
				case 275:
				case 276:
					num17 = 886;
					break;
				case 42:
				case 141:
				case 176:
				case 231:
				case 232:
				case 233:
				case 234:
				case 235:
					num17 = 887;
					break;
				case 81:
				case 183:
					num17 = 888;
					break;
				case 78:
				case 82:
					num17 = 889;
					break;
				case 103:
					num17 = 890;
					break;
				case 34:
				case 83:
				case 84:
				case 179:
				case 289:
					num17 = 891;
					break;
				case 94:
				case 182:
					num17 = 892;
					break;
				case 80:
				case 93:
				case 109:
					num17 = 893;
					break;
				case 75:
					num17 = ((Main.rand.Next(2) != 0) ? 890 : 889);
					if (player.RollLuck(100) == 0)
					{
						num18 = ((num17 != 889) ? 889 : 890);
					}
					break;
				case 79:
					num17 = ((Main.rand.Next(2) != 0) ? 890 : 888);
					if (player.RollLuck(100) == 0)
					{
						num18 = ((num17 != 888) ? 888 : 890);
					}
					break;
				}
				if (num17 != -1)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, num17, 1, noBroadcast: false, -1);
				}
				if (num18 != -1)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, num18, 1, noBroadcast: false, -1);
				}
			}
			int num19 = 1;
			if (Main.expertMode && Main.rand.Next(2) == 0)
			{
				num19 = 2;
			}
			for (int l = 0; l < num19; l++)
			{
				if (type == 290)
				{
					if (player.RollLuck(15) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1513, 1, noBroadcast: false, -1);
					}
					else if (player.RollLuck(10) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 938, 1, noBroadcast: false, -1);
					}
				}
				if (type == 287 && player.RollLuck(6) == 0)
				{
					if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 963, 1, noBroadcast: false, -1);
					}
					else
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 977, 1, noBroadcast: false, -1);
					}
				}
				if (type == 291)
				{
					if (player.RollLuck(12) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1300, 1, noBroadcast: false, -1);
					}
					else if (player.RollLuck(12) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1254, 1, noBroadcast: false, -1);
					}
				}
				if (type == 292)
				{
					if (player.RollLuck(12) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1514, 1, noBroadcast: false, -1);
					}
					else if (player.RollLuck(12) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 679, 1, noBroadcast: false, -1);
					}
				}
				if (type == 293 && player.RollLuck(18) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 759, 1, noBroadcast: false, -1);
				}
				if ((type == 281 || type == 282) && player.RollLuck(20) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1446, 1, noBroadcast: false, -1);
				}
				if ((type == 283 || type == 284) && player.RollLuck(20) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1444, 1, noBroadcast: false, -1);
				}
				if ((type == 285 || type == 286) && player.RollLuck(20) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1445, 1, noBroadcast: false, -1);
				}
				if (type >= 269 && type <= 280)
				{
					if (player.RollLuck(400) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1183, 1, noBroadcast: false, -1);
					}
					else if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1266, 1, noBroadcast: false, -1);
					}
					else if (player.RollLuck(200) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 671, 1, noBroadcast: false, -1);
					}
				}
			}
			if (lifeMax > 100 && type != 288 && value > 0f && HasPlayerTarget && Main.hardMode && downedPlantBoss && Main.player[target].ZoneDungeon && !flag)
			{
				int range2 = 13;
				if (Main.expertMode)
				{
					range2 = 9;
				}
				if (player.RollLuck(range2) == 0 && Main.wallDungeon[Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16].wall])
				{
					NewNPC((int)base.Center.X, (int)base.Center.Y, 288);
				}
			}
			if (type == 288)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1508, Main.rand.Next(1, 3), noBroadcast: false, -1);
			}
			if (type == 156 && player.RollLuck(30) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 683, 1, noBroadcast: false, -1);
			}
			if ((type == 195 || type == 196) && (Main.expertMode || player.RollLuck(2) == 0))
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3102, 1, noBroadcast: false, -1);
			}
			if (type == 245)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (player.RollLuck(7) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2110, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(4) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1294, 1, noBroadcast: false, -1);
					}
					switch (Main.rand.Next(7))
					{
					case 0:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1258, 1, noBroadcast: false, -1);
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1261, Main.rand.Next(60, 100));
						break;
					case 1:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1122, 1, noBroadcast: false, -1);
						break;
					case 2:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 899, 1, noBroadcast: false, -1);
						break;
					case 3:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1248, 1, noBroadcast: false, -1);
						break;
					case 4:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1295, 1, noBroadcast: false, -1);
						break;
					case 5:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1296, 1, noBroadcast: false, -1);
						break;
					case 6:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1297, 1, noBroadcast: false, -1);
						break;
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2218, Main.rand.Next(4, 9), noBroadcast: false, -1);
				}
				SetEventFlagCleared(downedGolemBoss, 6);
			}
			if (type == 471 && (Main.expertMode || player.RollLuck(2) == 0))
			{
				if (Main.rand.Next(3) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3052, 1, noBroadcast: false, -1);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3053, 1, noBroadcast: false, -1);
				}
				else
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3054, 1, noBroadcast: false, -1);
				}
			}
			if (type == 268)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1332, Main.rand.Next(2, 6));
			}
			if (type == 370)
			{
				SetEventFlagCleared(downedFishron, 7);
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (player.RollLuck(7) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2588, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(15) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2609, 1, noBroadcast: false, -1);
					}
					switch (Main.rand.Next(5))
					{
					case 0:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2611, 1, noBroadcast: false, -1);
						break;
					case 1:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2624, 1, noBroadcast: false, -1);
						break;
					case 2:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2622, 1, noBroadcast: false, -1);
						break;
					case 3:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2621, 1, noBroadcast: false, -1);
						break;
					case 4:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2623, 1, noBroadcast: false, -1);
						break;
					}
				}
			}
			if (type == 614)
			{
				Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 281, 175, 0f, Main.myPlayer, -2f, releaseOwner + 1);
			}
			if (type == 109 && !downedClown)
			{
				downedClown = true;
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			if (type == 153 && player.RollLuck(17) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1328, 1, noBroadcast: false, -1);
			}
			if (type == 120)
			{
				if (Main.expertMode)
				{
					if (player.RollLuck(400) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1326, 1, noBroadcast: false, -1);
					}
				}
				else if (player.RollLuck(500) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1326, 1, noBroadcast: false, -1);
				}
			}
			if (type == 49 && player.RollLuck(250) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1325, 1, noBroadcast: false, -1);
			}
			if (type == 185 && player.RollLuck(150) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 951, 1, noBroadcast: false, -1);
			}
			if (type == 44 && player.RollLuck(50) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1320, 1, noBroadcast: false, -1);
			}
			if (type == 44 && player.RollLuck(20) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 88, 1, noBroadcast: false, -1);
			}
			if (type == 110 && player.RollLuck(80) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1321, 1, noBroadcast: false, -1);
			}
			if (type == 60 && player.RollLuck(150) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1322, 1, noBroadcast: false, -1);
			}
			if (type == 151 && player.RollLuck(50) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1322, 1, noBroadcast: false, -1);
			}
			if (type == 24 && player.RollLuck(50) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1323, 1, noBroadcast: false, -1);
			}
			if (type == 109 && player.RollLuck(30) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1324, Main.rand.Next(1, 5), noBroadcast: false, -1);
			}
			if (type == 163 || type == 238)
			{
				if (player.RollLuck(40) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1308, 1, noBroadcast: false, -1);
				}
				if (Main.expertMode)
				{
					if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2607, Main.rand.Next(2, 4));
					}
					else if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2607, Main.rand.Next(1, 4));
					}
					else
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2607);
					}
				}
				else if (Main.rand.Next(4) != 0)
				{
					if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2607, Main.rand.Next(1, 4));
					}
					else if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2607, Main.rand.Next(1, 3));
					}
					else
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2607);
					}
				}
			}
			if (Main.hardMode && (type == 197 || type == 206 || type == 169 || type == 154) && player.RollLuck(180) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1306, 1, noBroadcast: false, -1);
			}
			if (type == 244)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 23, Main.rand.Next(1, 6));
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 23, Main.rand.Next(1, 6));
				}
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 23, Main.rand.Next(1, 6));
				}
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 23, Main.rand.Next(1, 6));
				}
				Item.NewItem((int)position.X, (int)position.Y, width, height, 662, Main.rand.Next(30, 60));
			}
			if (type == 250 && player.RollLuck(15) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1244, 1, noBroadcast: false, -1);
			}
			if (type == 172)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 754, 1, noBroadcast: false, -1);
				Item.NewItem((int)position.X, (int)position.Y, width, height, 755, 1, noBroadcast: false, -1);
			}
			if (type == 110 && player.RollLuck(200) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 682, 1, noBroadcast: false, -1);
			}
			if (type == 170 || type == 180 || type == 171)
			{
				if (player.RollLuck(100) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4428, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(25) == 0 && Main.IsItAHappyWindyDay)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4613);
				}
			}
			if (type == 154 && player.RollLuck(100) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1253, 1, noBroadcast: false, -1);
			}
			if ((type == 169 || type == 206) && player.RollLuck(50) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 726, 1, noBroadcast: false, -1);
			}
			if (type == 243)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 2161, 1, noBroadcast: false, -1);
			}
			if (type == 480 && player.RollLuck(50) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3269, 1, noBroadcast: false, -1);
			}
			if (type == 198 || type == 199 || type == 226)
			{
				if (player.RollLuck(1000) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1172, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(50) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1293, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(7) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2766, Main.rand.Next(1, 3), noBroadcast: false, -1);
				}
			}
			if (type == 78 || type == 79 || type == 80)
			{
				if (player.RollLuck(75) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 870, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(75) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 871, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(75) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 872, 1, noBroadcast: false, -1);
				}
			}
			if (type == 473)
			{
				switch (Main.rand.Next(5))
				{
				case 0:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3008, 1, noBroadcast: false, -1);
					break;
				case 1:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3014, 1, noBroadcast: false, -1);
					break;
				case 2:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3012, 1, noBroadcast: false, -1);
					break;
				case 3:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3015, 1, noBroadcast: false, -1);
					break;
				case 4:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3023, 1, noBroadcast: false, -1);
					break;
				}
			}
			else if (type == 474)
			{
				switch (Main.rand.Next(5))
				{
				case 0:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3006, 1, noBroadcast: false, -1);
					break;
				case 1:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3007, 1, noBroadcast: false, -1);
					break;
				case 2:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3013, 1, noBroadcast: false, -1);
					break;
				case 3:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3016, 1, noBroadcast: false, -1);
					break;
				case 4:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3020, 1, noBroadcast: false, -1);
					break;
				}
			}
			else if (type == 475)
			{
				switch (Main.rand.Next(4))
				{
				case 0:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3029, 1, noBroadcast: false, -1);
					break;
				case 1:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3030, 1, noBroadcast: false, -1);
					break;
				case 2:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3051, 1, noBroadcast: false, -1);
					break;
				case 3:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3022, 1, noBroadcast: false, -1);
					break;
				}
			}
			else
			{
				_ = type;
				_ = 476;
			}
			if (type == 473 || type == 474 || type == 475 || type == 476)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 499, Main.rand.Next(5, 11), noBroadcast: false, -1);
				Item.NewItem((int)position.X, (int)position.Y, width, height, 500, Main.rand.Next(5, 16), noBroadcast: false, -1);
			}
			if (type == 85 && value > 0f)
			{
				if (ai[3] == 4f)
				{
					if (player.RollLuck(20) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1312, 1, noBroadcast: false, -1);
					}
					else
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 676, 1, noBroadcast: false, -1);
							break;
						case 1:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 725, 1, noBroadcast: false, -1);
							break;
						case 2:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1264, 1, noBroadcast: false, -1);
							break;
						}
					}
				}
				else
				{
					switch (Main.rand.Next(6))
					{
					case 0:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 437, 1, noBroadcast: false, -1);
						break;
					case 1:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 517, 1, noBroadcast: false, -1);
						break;
					case 2:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 535, 1, noBroadcast: false, -1);
						break;
					case 3:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 536, 1, noBroadcast: false, -1);
						break;
					case 4:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 532, 1, noBroadcast: false, -1);
						break;
					default:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 554, 1, noBroadcast: false, -1);
						break;
					}
				}
			}
			if (type == 87)
			{
				if (player.RollLuck(25) == 0 && Main.IsItAHappyWindyDay)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4379);
				}
				else if (Main.expertMode)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 575, Main.rand.Next(5, 11) * 2);
				}
				else
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 575, Main.rand.Next(5, 11));
				}
			}
			if (type >= 212 && type <= 215)
			{
				if (!flag)
				{
					if (player.RollLuck(8000) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 905, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(4000) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 855, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(2000) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 854, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(2000) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2584, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(1000) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3033, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(200) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 672, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(500) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1277);
					}
					if (player.RollLuck(500) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1278);
					}
					if (player.RollLuck(500) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1279);
					}
					if (player.RollLuck(500) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1280);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1704);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1705);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1710);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1716);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1720);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2379);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2389);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2405);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2843);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3885);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2663);
					}
					if (player.RollLuck(150) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3904, Main.rand.Next(6, 11) * 5);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3910);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2238);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2133);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2137);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2143);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2147);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2151);
					}
					if (player.RollLuck(300) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2155);
					}
					if (player.RollLuck(500) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3263);
					}
					if (player.RollLuck(500) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3264);
					}
					if (player.RollLuck(500) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3265);
					}
				}
			}
			else if (type == 216)
			{
				if (player.RollLuck(2000) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 905, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(1000) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 855, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(500) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 854, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(500) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2584, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(250) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3033, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(50) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 672, 1, noBroadcast: false, -1);
				}
			}
			else if (type == 491)
			{
				if (player.RollLuck(400) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 905, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(200) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 855, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(100) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 854, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(100) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2584, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(50) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3033, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(20) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4471, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(10) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 672, 1, noBroadcast: false, -1);
				}
			}
			if ((type == 161 || type == 431) && player.RollLuck(50) == 0)
			{
				int num20 = Main.rand.Next(3);
				Item.NewItem((int)position.X, (int)position.Y, width, height, 803 + num20);
			}
			if (type == 217)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1115, 1, noBroadcast: false, -1);
			}
			if (type == 218)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1116, 1, noBroadcast: false, -1);
			}
			if (type == 219)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1117, 1, noBroadcast: false, -1);
			}
			if (type == 220)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1118, 1, noBroadcast: false, -1);
			}
			if (type == 221)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1119, 1, noBroadcast: false, -1);
			}
			if (type == 167 && player.RollLuck(50) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 879, 1, noBroadcast: false, -1);
			}
			if (type == 143 || type == 144 || type == 145)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 593, Main.rand.Next(5, 11));
			}
			if (type == 79)
			{
				if (player.RollLuck(10) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 527);
				}
			}
			else if (type == 80 && player.RollLuck(10) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 528);
			}
			if (type == 524 && player.RollLuck(10) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3794, Main.rand.Next(1, 4));
			}
			if (type == 525)
			{
				if (player.RollLuck(10) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3794);
				}
				if (player.RollLuck(3) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 522, Main.rand.Next(1, 4));
				}
				if (player.RollLuck(15) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 527);
				}
			}
			if (type == 526)
			{
				if (player.RollLuck(10) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3794);
				}
				if (player.RollLuck(3) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1332, Main.rand.Next(1, 4));
				}
				if (player.RollLuck(15) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 527);
				}
			}
			if (type == 527)
			{
				if (player.RollLuck(10) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3794);
				}
				if (player.RollLuck(15) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 528);
				}
			}
			if (type == 532)
			{
				if (player.RollLuck(3) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3380);
				}
				if (player.RollLuck(50) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3771);
				}
			}
			if (type == 528)
			{
				if (player.RollLuck(25) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2802);
				}
				if (player.RollLuck(60) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3784 + Main.rand.Next(3));
				}
			}
			else if (type == 529)
			{
				if (player.RollLuck(25) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2801);
				}
				if (player.RollLuck(40) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3784 + Main.rand.Next(3));
				}
			}
			if ((type == 49 || type == 51 || type == 150 || type == 93) && player.RollLuck(100) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 18, 1, noBroadcast: false, -1);
			}
			if ((type == 16 || type == 185 || type == 167 || type == 197) && player.RollLuck(50) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 393, 1, noBroadcast: false, -1);
			}
			if (type == 58 && player.RollLuck(75) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 393, 1, noBroadcast: false, -1);
			}
			if (type >= 494 && type <= 506)
			{
				if (player.RollLuck(80) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 18, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(80) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 393, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(25) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3285, 1, noBroadcast: false, -1);
				}
			}
			if (type == 21 || type == 201 || type == 202 || type == 203 || type == 322 || type == 323 || type == 324 || (type >= 449 && type <= 452))
			{
				if (player.RollLuck(100) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 954, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(200) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 955, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(200) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1166, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(500) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1274, 1, noBroadcast: false, -1);
				}
			}
			else if (type == 6)
			{
				if (player.RollLuck(175) == 0)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 956, 1, noBroadcast: false, -1);
						break;
					case 1:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 957, 1, noBroadcast: false, -1);
						break;
					default:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 958, 1, noBroadcast: false, -1);
						break;
					}
				}
			}
			else if (type == 42 || type == 43 || (type >= 231 && type <= 235))
			{
				if (player.RollLuck(100) == 0)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 960, 1, noBroadcast: false, -1);
						break;
					case 1:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 961, 1, noBroadcast: false, -1);
						break;
					default:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 962, 1, noBroadcast: false, -1);
						break;
					}
				}
			}
			else if (type == 31 || type == 32 || type == 294 || type == 295 || type == 296)
			{
				if (player.RollLuck(450) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 959, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(300) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1307, 1, noBroadcast: false, -1);
				}
			}
			if ((type == 174 || type == 179 || type == 182 || type == 183) && player.RollLuck(200) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 996);
			}
			if ((type == 98 || type == 83 || type == 94 || type == 81) && player.RollLuck(200) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 996);
			}
			if (type == 101 || type == 98)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 522, Main.rand.Next(2, 6));
			}
			if (type == 98 && player.RollLuck(25) == 0 && Main.IsItAHappyWindyDay)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4611);
			}
			if (type == 86)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 526);
				if (player.RollLuck(100) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 856);
				}
			}
			if (type == 224 && player.RollLuck(100) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4057);
			}
			if (type == 186 || type == 432)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 40, Main.rand.Next(1, 10));
			}
			if (type == 225)
			{
				if (player.RollLuck(45) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1243);
				}
				else
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 23, Main.rand.Next(2, 7));
				}
			}
			if (type == 537)
			{
				int stack = Main.rand.Next(2, 4);
				Item.NewItem((int)position.X, (int)position.Y, width, height, 23, stack);
				int num21 = 8000;
				if (Main.expertMode)
				{
					num21 = (int)((double)num21 * 0.7);
				}
				if (player.RollLuck(num21) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1309, 1, noBroadcast: false, -1);
				}
			}
			if (type >= 333 && type <= 336 && player.RollLuck(20) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1906);
			}
			if (netID == -4)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3111, Main.rand.Next(25, 51));
				int num22 = 100;
				if (Main.expertMode)
				{
					num22 = (int)((double)num22 * 0.7);
				}
				if (player.RollLuck(num22) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1309, 1, noBroadcast: false, -1);
				}
			}
			else if (type == 1 || type == 16 || type == 138 || type == 141 || type == 147 || type == 184 || type == 187 || type == 204 || type == 302 || (type >= 333 && type <= 336) || type == 535)
			{
				int num23 = Main.rand.Next(1, 3);
				if (netID == -6 || netID == -7 || netID == -8 || netID == -9)
				{
					num23 += Main.rand.Next(1, 4);
				}
				int num24 = Item.NewItem((int)position.X, (int)position.Y, width, height, 23, num23);
				if (netID <= 1 && netID != -1 && netID != -2 && netID != -5 && netID != -6)
				{
					Main.item[num24].color = color;
					NetMessage.SendData(88, -1, -1, null, num24, 1f);
				}
				int num25 = 10000;
				if (Main.expertMode)
				{
					num25 = (int)((double)num25 * 0.7);
				}
				if (player.RollLuck(num25) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1309, 1, noBroadcast: false, -1);
				}
			}
			if (type == 75)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 501, Main.rand.Next(1, 4));
			}
			if (type == 81 || type == 183)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 23, Main.rand.Next(2, 5));
			}
			if (type == 122)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 23, Main.rand.Next(5, 11));
			}
			if (type == 71)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 327);
			}
			if (type == 2 || type == 317 || type == 318 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 133)
			{
				if (player.RollLuck(100) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 236);
				}
				else if (player.RollLuck(3) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 38);
				}
			}
			if (type == 104 && player.RollLuck(60) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 485, 1, noBroadcast: false, -1);
			}
			if (type == 58)
			{
				if (player.RollLuck(250) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 263);
				}
				else if (player.RollLuck(30) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 118);
				}
			}
			if (type == 102 && player.RollLuck(250) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 263);
			}
			if (type == 3 || type == 591 || type == 590 || type == 331 || type == 332 || type == 132 || type == 161 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 319 || type == 320 || type == 321 || (type >= 430 && type <= 436))
			{
				if (player.RollLuck(50) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 216, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(250) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1304, 1, noBroadcast: false, -1);
				}
				if (type == 590 || type == 591)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 8, Main.rand.Next(5, 21));
				}
			}
			if ((type == 587 || type == 586) && player.RollLuck(3) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4608, Main.rand.Next(5, 7));
			}
			if ((type == 620 || type == 621) && player.RollLuck(2) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4608, Main.rand.Next(7, 11));
			}
			if ((type == 587 || type == 586) && player.RollLuck(15) == 0)
			{
				switch (Main.rand.Next(3))
				{
				case 0:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4273);
					break;
				case 1:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4381);
					break;
				case 2:
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4325);
					break;
				}
			}
			if (type == 620)
			{
				if (player.RollLuck(15) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4270);
				}
				if (player.RollLuck(15) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4317);
				}
			}
			if (type == 621)
			{
				if (player.RollLuck(15) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4272);
				}
				if (player.RollLuck(15) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4317);
				}
			}
			if (type == 618)
			{
				if (player.RollLuck(5) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4269);
				}
				if (player.RollLuck(10) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4054);
				}
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4608, Main.rand.Next(7, 11));
			}
			if (!Main.dayTime && Main.bloodMoon && !SpawnedFromStatue && !flag)
			{
				if ((type == 587 || type == 586 || type == 489 || type == 490 || type == 109 || type == 621 || type == 620 || type == 619) && player.RollLuck(200) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4271);
				}
				if ((type == 53 || type == 536 || type == 618) && player.RollLuck(10) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4271);
				}
			}
			if ((type == 489 || type == 490) && (Main.expertMode || player.RollLuck(2) == 0))
			{
				if (player.RollLuck(75) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3212, 1, noBroadcast: false, -1);
				}
				if (player.RollLuck(100) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3213, 1, noBroadcast: false, -1);
				}
			}
			if (type == 223 && player.RollLuck(20) == 0)
			{
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1135, 1, noBroadcast: false, -1);
				}
				else
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1136, 1, noBroadcast: false, -1);
				}
			}
			if (type == 66)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 267);
			}
			if ((type == 62 || type == 66) && player.RollLuck(35) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 272, 1, noBroadcast: false, -1);
			}
			if (value > 0f && Main.hardMode && (double)(position.Y / 16f) < Main.worldSurface + 10.0 && (base.Center.X / 16f < 380f || base.Center.X / 16f > (float)(Main.maxTilesX - 380)) && !flag && player.RollLuck(100) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1315);
			}
			if (type == 52)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 251);
			}
			if (type == 53)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 239);
			}
			if (type == 536)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3478);
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3479);
			}
			if (type == 54)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 260);
			}
			if (type == 368)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 2222);
			}
			if ((type == 69 || type == 581 || type == 580 || type == 508 || type == 509) && player.RollLuck(3) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 323, Main.rand.Next(1, 3));
			}
			if (type == 582 && player.RollLuck(6) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 323);
			}
			if ((type == 580 || type == 508 || type == 581 || type == 509) && player.RollLuck(50) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3772);
			}
			if (type == 73)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 362, Main.rand.Next(1, 3));
			}
			if (type == 483 || type == 482)
			{
				if (player.RollLuck(30) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3109);
				}
				if (player.RollLuck(20) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4400);
				}
			}
			if ((type == 6 || type == 94) && player.RollLuck(3) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 68);
			}
			if ((type == 181 || type == 173 || type == 239 || type == 182 || type == 240) && player.RollLuck(3) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1330);
			}
			if (type == 7 || type == 8 || type == 9)
			{
				if (player.RollLuck(3) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 68, Main.rand.Next(1, 3));
				}
				Item.NewItem((int)position.X, (int)position.Y, width, height, 69, Main.rand.Next(3, 9));
			}
			if ((type == 10 || type == 11 || type == 12 || type == 95 || type == 96 || type == 97) && (player.RollLuck(50) == 0 || (Main.expertMode && player.RollLuck(50) == 0)))
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 215);
			}
			if ((type == 47 || type == 464) && player.RollLuck(75) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 243);
			}
			if ((type == 168 || type == 470) && player.RollLuck(50) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, Utils.SelectRandom(Main.rand, new short[3]
				{
					3757,
					3758,
					3759
				}));
			}
			if (type == 533)
			{
				if (player.RollLuck(40) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3795);
				}
				else if (player.RollLuck(30) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3770);
				}
			}
			if (type == 551)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3859, 1, noBroadcast: false, -1);
						break;
					case 1:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3827, 1, noBroadcast: false, -1);
						break;
					case 2:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3870, 1, noBroadcast: false, -1);
						break;
					default:
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3858, 1, noBroadcast: false, -1);
						break;
					}
					if (Main.rand.Next(7) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3863, 1, noBroadcast: false, -1);
					}
					if (Main.rand.Next(4) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3883, 1, noBroadcast: false, -1);
					}
				}
			}
			if (type == 4)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (player.RollLuck(7) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2112, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(40) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1299);
					}
					int num26 = 1;
					for (int m = 0; m < num26; m++)
					{
						if (WorldGen.crimson)
						{
							int stack2 = Main.rand.Next(20) + 10;
							Item.NewItem((int)position.X, (int)position.Y, width, height, 880, stack2);
							stack2 = Main.rand.Next(20) + 10;
							Item.NewItem((int)position.X, (int)position.Y, width, height, 880, stack2);
							stack2 = Main.rand.Next(20) + 10;
							Item.NewItem((int)position.X, (int)position.Y, width, height, 880, stack2);
							stack2 = Main.rand.Next(3) + 1;
							Item.NewItem((int)position.X, (int)position.Y, width, height, 2171, stack2);
						}
						else
						{
							int stack3 = Main.rand.Next(30) + 20;
							Item.NewItem((int)position.X, (int)position.Y, width, height, 47, stack3);
							stack3 = Main.rand.Next(20) + 10;
							Item.NewItem((int)position.X, (int)position.Y, width, height, 56, stack3);
							stack3 = Main.rand.Next(20) + 10;
							Item.NewItem((int)position.X, (int)position.Y, width, height, 56, stack3);
							stack3 = Main.rand.Next(20) + 10;
							Item.NewItem((int)position.X, (int)position.Y, width, height, 56, stack3);
							stack3 = Main.rand.Next(3) + 1;
							Item.NewItem((int)position.X, (int)position.Y, width, height, 59, stack3);
						}
					}
				}
			}
			if (type == 266)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					int stack4 = Main.rand.Next(20, 46);
					Item.NewItem((int)position.X, (int)position.Y, width, height, 880, stack4);
					stack4 = Main.rand.Next(20, 46);
					Item.NewItem((int)position.X, (int)position.Y, width, height, 880, stack4);
					if (player.RollLuck(7) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2104, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(20) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3060);
					}
				}
			}
			if (type == 267 && AnyNPCs(266))
			{
				int num27 = Main.rand.Next(2, 6);
				if (Main.rand.Next(3) != 0)
				{
					if (Main.expertMode)
					{
						num27 += Main.rand.Next(2, 6);
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1329, num27);
				}
				if (Main.rand.Next(3) != 0)
				{
					num27 = Main.rand.Next(5, 13);
					if (Main.expertMode)
					{
						num27 += Main.rand.Next(6, 14);
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, 880, num27);
				}
				if (Main.rand.Next(2) == 0 && player.statLife < player.statLifeMax2)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
			}
			if (type == 13 || type == 14 || type == 15)
			{
				int num28 = Main.rand.Next(1, 3);
				if (Main.rand.Next(2) == 0)
				{
					if (Main.expertMode)
					{
						num28++;
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, 86, num28);
				}
				if (Main.rand.Next(2) == 0)
				{
					num28 = Main.rand.Next(2, 6);
					Item.NewItem((int)position.X, (int)position.Y, width, height, 56, num28);
				}
				if (boss)
				{
					if (Main.expertMode)
					{
						DropBossBags();
					}
					else
					{
						num28 = Main.rand.Next(10, 30);
						Item.NewItem((int)position.X, (int)position.Y, width, height, 56, num28);
						num28 = Main.rand.Next(10, 31);
						Item.NewItem((int)position.X, (int)position.Y, width, height, 56, num28);
						if (player.RollLuck(20) == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 994);
						}
						if (player.RollLuck(7) == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 2111, 1, noBroadcast: false, -1);
						}
					}
				}
				if (Main.rand.Next(4) == 0 && player.statLife < player.statLifeMax2)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
			}
			if (type == 222)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (player.RollLuck(7) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2108, 1, noBroadcast: false, -1);
					}
					int num29 = Main.rand.Next(3);
					switch (num29)
					{
					case 0:
						num29 = 1121;
						break;
					case 1:
						num29 = 1123;
						break;
					case 2:
						num29 = 2888;
						break;
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, num29, 1, noBroadcast: false, -1);
					if (player.RollLuck(3) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1132, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(15) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1170);
					}
					if (player.RollLuck(20) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2502);
					}
					if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1129);
					}
					else if (Main.rand.Next(2) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, Main.rand.Next(842, 845));
					}
					if (Main.rand.Next(4) != 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1130, Main.rand.Next(10, 30));
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2431, Main.rand.Next(16, 27));
				}
				SetEventFlagCleared(downedQueenBee, 8);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			if (type == 35)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else if (player.RollLuck(7) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1281, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(7) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1273, 1, noBroadcast: false, -1);
				}
				else if (player.RollLuck(7) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1313, 1, noBroadcast: false, -1);
				}
			}
			if (type == 113)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (player.RollLuck(7) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2105, 1, noBroadcast: false, -1);
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, 367, 1, noBroadcast: false, -1);
					if (Main.rand.Next(2) == 0)
					{
						int num30 = Main.rand.Next(4);
						num30 = ((num30 != 3) ? (489 + num30) : 2998);
						Item.NewItem((int)position.X, (int)position.Y, width, height, num30, 1, noBroadcast: false, -1);
					}
					else
					{
						switch (Main.rand.Next(3))
						{
						case 0:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 514, 1, noBroadcast: false, -1);
							break;
						case 1:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 426, 1, noBroadcast: false, -1);
							break;
						case 2:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 434, 1, noBroadcast: false, -1);
							break;
						}
					}
				}
				if (Main.netMode != 1 && !flag)
				{
					int num31 = (int)(position.X + (float)(width / 2)) / 16;
					int num32 = (int)(position.Y + (float)(height / 2)) / 16;
					int num33 = width / 2 / 16 + 1;
					for (int n = num31 - num33; n <= num31 + num33; n++)
					{
						for (int num34 = num32 - num33; num34 <= num32 + num33; num34++)
						{
							if ((n == num31 - num33 || n == num31 + num33 || num34 == num32 - num33 || num34 == num32 + num33) && !Main.tile[n, num34].active())
							{
								Main.tile[n, num34].type = (ushort)(WorldGen.crimson ? 347 : 140);
								Main.tile[n, num34].active(active: true);
							}
							Main.tile[n, num34].lava(lava: false);
							Main.tile[n, num34].liquid = 0;
							if (Main.netMode == 2)
							{
								NetMessage.SendTileSquare(-1, n, num34, 1);
							}
							else
							{
								WorldGen.SquareTileFrame(n, num34);
							}
						}
					}
				}
			}
			if (type == 439)
			{
				SetEventFlagCleared(downedAncientCultist, 9);
				if (player.RollLuck(7) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3372, 1, noBroadcast: false, -1);
				}
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3549, 1, noBroadcast: false, -1);
				WorldGen.TriggerLunarApocalypse();
			}
			if (type == 398)
			{
				SetEventFlagCleared(downedMoonlord, 10);
				LunarApocalypseIsUp = false;
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (player.RollLuck(7) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3373, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(10) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 4469, 1, noBroadcast: false, -1);
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3384, 1, noBroadcast: false, -1);
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3460, Main.rand.Next(70, 91), noBroadcast: false, -1);
					int num35 = Utils.SelectRandom<int>(Main.rand, 3063, 3389, 3065, 1553, 3930, 3541, 3570, 3571, 3569);
					Item.NewItem((int)position.X, (int)position.Y, width, height, num35, 1, noBroadcast: false, -1);
				}
			}
			switch (type)
			{
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 518:
				if (ShieldStrengthTowerSolar > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(517));
				}
				break;
			case 425:
			case 426:
			case 427:
			case 429:
				if (ShieldStrengthTowerVortex > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(422));
				}
				break;
			case 420:
			case 421:
			case 423:
			case 424:
				if (ShieldStrengthTowerNebula > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(507));
				}
				break;
			case 402:
			case 405:
			case 407:
			case 409:
			case 411:
				if ((type != 406 || Main.rand.Next(3) == 0) && ShieldStrengthTowerStardust > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(493));
				}
				break;
			case 517:
			{
				int num38 = Main.rand.Next(25, 41) / 2;
				if (Main.expertMode)
				{
					num38 = (int)((float)num38 * 1.5f);
				}
				for (int num39 = 0; num39 < num38; num39++)
				{
					Item.NewItem((int)position.X + Main.rand.Next(width), (int)position.Y + Main.rand.Next(height), 2, 2, 3458, Main.rand.Next(1, 4));
				}
				downedTowerSolar = true;
				TowerActiveSolar = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			}
			case 422:
			{
				int num40 = Main.rand.Next(25, 41) / 2;
				if (Main.expertMode)
				{
					num40 = (int)((float)num40 * 1.5f);
				}
				for (int num41 = 0; num41 < num40; num41++)
				{
					Item.NewItem((int)position.X + Main.rand.Next(width), (int)position.Y + Main.rand.Next(height), 2, 2, 3456, Main.rand.Next(1, 4));
				}
				downedTowerVortex = true;
				TowerActiveVortex = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			}
			case 507:
			{
				int num42 = Main.rand.Next(25, 41) / 2;
				if (Main.expertMode)
				{
					num42 = (int)((float)num42 * 1.5f);
				}
				for (int num43 = 0; num43 < num42; num43++)
				{
					Item.NewItem((int)position.X + Main.rand.Next(width), (int)position.Y + Main.rand.Next(height), 2, 2, 3457, Main.rand.Next(1, 4));
				}
				downedTowerNebula = true;
				TowerActiveNebula = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			}
			case 493:
			{
				int num36 = Main.rand.Next(25, 41) / 2;
				if (Main.expertMode)
				{
					num36 = (int)((float)num36 * 1.5f);
				}
				for (int num37 = 0; num37 < num36; num37++)
				{
					Item.NewItem((int)position.X + Main.rand.Next(width), (int)position.Y + Main.rand.Next(height), 2, 2, 3459, Main.rand.Next(1, 4));
				}
				downedTowerStardust = true;
				TowerActiveStardust = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			}
			}
			switch (type)
			{
			case 381:
			case 382:
			case 383:
			case 385:
			case 386:
			case 389:
			case 390:
			case 520:
				if (player.RollLuck(8) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2860, Main.rand.Next(8, 21));
				}
				break;
			}
			switch (type)
			{
			case 381:
			case 382:
			case 383:
			case 385:
			case 386:
			case 389:
			case 390:
			case 520:
				if (player.RollLuck(600) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2798);
				}
				if (player.RollLuck(600) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2800);
				}
				if (player.RollLuck(600) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2882);
				}
				break;
			}
			num = type;
			if (num == 383 || num == 386 || num == 389)
			{
				if (player.RollLuck(200) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2806);
				}
				if (player.RollLuck(200) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2807);
				}
				if (player.RollLuck(200) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2808);
				}
			}
			num = type;
			if ((uint)(num - 381) <= 1u || num == 385 || num == 390)
			{
				if (player.RollLuck(200) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2803);
				}
				if (player.RollLuck(200) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2804);
				}
				if (player.RollLuck(200) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2805);
				}
			}
			if (type == 395)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, Utils.SelectRandom<int>(Main.rand, 2797, 2749, 2795, 2796, 2880, 2769));
			}
			if (type == 390 && player.RollLuck(100) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 2771);
			}
			if ((type == 116 || type == 117 || type == 118 || type == 119) && (!Main.expertMode || Main.rand.Next(5) == 0))
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
			}
			if (type == 139 && Main.rand.Next(2) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
			}
			if (type == 63 || type == 64 || type == 103)
			{
				if (player.RollLuck(100) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1303, 1, noBroadcast: false, -1);
				}
				Item.NewItem((int)position.X, (int)position.Y, width, height, 282, Main.rand.Next(1, 5));
			}
			if (type == 63 && player.RollLuck(50) == 0 && Main.IsItAHappyWindyDay)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4649);
			}
			if (type == 64 && player.RollLuck(50) == 0 && Main.IsItAHappyWindyDay)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4650);
			}
			if (type == 481 && Main.rand.Next(2) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3094, Main.rand.Next(40, 81));
			}
			if (type == 481 && player.RollLuck(20) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3187 + Main.rand.Next(3));
			}
			if (type == 481 && player.RollLuck(40) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4463);
			}
			if (type == 21 || type == 44 || type == 167 || type == 201 || type == 202 || type == 481 || type == 203 || type == 322 || type == 323 || type == 324 || (type >= 449 && type <= 452))
			{
				if (player.RollLuck(25) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 118);
				}
				else if (type == 44)
				{
					if (player.RollLuck(20) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, Main.rand.Next(410, 412));
					}
					else
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 166, Main.rand.Next(1, 4));
					}
				}
			}
			if (type == 45)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 238);
			}
			if (type == 50)
			{
				if (Main.slimeRain)
				{
					Main.StopSlimeRain();
					AchievementsHelper.NotifyProgressionEvent(16);
				}
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (player.RollLuck(4) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2430);
					}
					if (player.RollLuck(7) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2493, 1, noBroadcast: false, -1);
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, Main.rand.Next(256, 259));
					Main.rand.Next(2);
					if (Main.rand.Next(3) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2585);
					}
					else
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2610);
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, 998);
				}
				SetEventFlagCleared(downedSlimeKing, 11);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			if (type == 23 && player.RollLuck(50) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 116);
			}
			if (type == 24 && player.RollLuck(250) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 244);
			}
			if (type == 31 || type == 32 || type == 34 || (type >= 294 && type <= 296))
			{
				if (player.RollLuck(250) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 932);
				}
				else if (player.RollLuck(100) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3095);
				}
				else if (player.RollLuck(65) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 327);
				}
				else if (!Main.expertMode)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 154, Main.rand.Next(1, 4));
				}
				if (Main.expertMode)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 154, Main.rand.Next(2, 7));
				}
			}
			if (type == 26 || type == 27 || type == 28 || type == 29 || type == 111)
			{
				if (player.RollLuck(200) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 160);
				}
				else if (Main.rand.Next(2) == 0)
				{
					int stack5 = Main.rand.Next(1, 6);
					Item.NewItem((int)position.X, (int)position.Y, width, height, 161, stack5);
				}
			}
			if (type == 175 && player.RollLuck(100) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1265, 1, noBroadcast: false, -1);
			}
			if ((type == 42 || (type >= 231 && type <= 235)) && (Main.expertMode || Main.rand.Next(3) != 0))
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 209);
			}
			if (type == 204 && (Main.expertMode || Main.rand.Next(2) == 0))
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 209);
			}
			if (type == 43)
			{
				if (player.RollLuck(25) == 0 && Main.IsItAHappyWindyDay)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4648);
				}
				else if (Main.expertMode || Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 210);
				}
			}
			if (type == 39 && player.RollLuck(25) == 0 && Main.IsItAHappyWindyDay)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4610);
			}
			if (type == 65)
			{
				if (player.RollLuck(50) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 268);
				}
				else if (player.RollLuck(25) == 0 && Main.IsItAHappyWindyDay)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 4651);
				}
				else
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 319);
				}
			}
			if (type == 48 && Main.rand.Next(2) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 320);
			}
			if (type == 541)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 3783);
			}
			if ((type == 542 || type == 543 || type == 544 || type == 545) && player.RollLuck(10) == 0 && Main.IsItAHappyWindyDay)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 4669);
			}
			if (type == 542 && player.RollLuck(8) == 0)
			{
				int num44 = Item.NewItem((int)position.X, (int)position.Y, width, height, 319);
				Main.item[num44].color = new Color(189, 148, 96, 255);
				NetMessage.SendData(88, -1, -1, null, num44, 1f);
			}
			if (type == 543 || type == 544)
			{
				if (player.RollLuck(25) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 527);
				}
				if (player.RollLuck(8) == 0)
				{
					int num45 = Item.NewItem((int)position.X, (int)position.Y, width, height, 319);
					if (type == 544)
					{
						Main.item[num45].color = new Color(145, 27, 40, 255);
					}
					else
					{
						Main.item[num45].color = new Color(112, 85, 89, 255);
					}
					NetMessage.SendData(88, -1, -1, null, num45, 1f);
				}
			}
			if (type == 545)
			{
				if (player.RollLuck(25) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 528);
				}
				if (player.RollLuck(8) == 0)
				{
					int num46 = Item.NewItem((int)position.X, (int)position.Y, width, height, 319);
					Main.item[num46].color = new Color(158, 113, 164, 255);
					NetMessage.SendData(88, -1, -1, null, num46, 1f);
				}
			}
			if (type == 125 || type == 126)
			{
				int num47 = 125;
				if (type == 125)
				{
					num47 = 126;
				}
				if (!AnyNPCs(num47))
				{
					if (Main.expertMode)
					{
						DropBossBags();
					}
					else
					{
						if (player.RollLuck(7) == 0)
						{
							Item.NewItem((int)position.X, (int)position.Y, width, height, 2106, 1, noBroadcast: false, -1);
						}
						Item.NewItem((int)position.X, (int)position.Y, width, height, 549, Main.rand.Next(25, 41));
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1225, Main.rand.Next(15, 31));
					}
				}
				else
				{
					value = 0f;
					boss = false;
				}
			}
			else if (Main.expertMode)
			{
				if (type == 127 || type == 134)
				{
					DropBossBags();
				}
			}
			else if (type == 127)
			{
				if (player.RollLuck(7) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2107, 1, noBroadcast: false, -1);
				}
				Item.NewItem((int)position.X, (int)position.Y, width, height, 547, Main.rand.Next(25, 41));
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1225, Main.rand.Next(15, 31));
			}
			else if (type == 134)
			{
				if (Main.rand.Next(7) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2113, 1, noBroadcast: false, -1);
				}
				Item.NewItem((int)position.X, (int)position.Y, width, height, 548, Main.rand.Next(25, 41));
				Item.NewItem((int)position.X, (int)position.Y, width, height, 1225, Main.rand.Next(15, 31));
			}
			if (type == 262)
			{
				if (Main.expertMode)
				{
					DropBossBags();
				}
				else
				{
					if (player.RollLuck(7) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 2109, 1, noBroadcast: false, -1);
					}
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1141, 1, noBroadcast: false, -1);
					if (player.RollLuck(20) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1182, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(50) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1305, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(4) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 1157, 1, noBroadcast: false, -1);
					}
					if (player.RollLuck(10) == 0)
					{
						Item.NewItem((int)position.X, (int)position.Y, width, height, 3021, 1, noBroadcast: false, -1);
					}
					int num48 = 1;
					for (int num49 = 0; num49 < num48; num49++)
					{
						int num50 = Main.rand.Next(7);
						if (!downedPlantBoss)
						{
							num50 = 0;
						}
						switch (num50)
						{
						case 0:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 758, 1, noBroadcast: false, -1);
							Item.NewItem((int)position.X, (int)position.Y, width, height, 771, Main.rand.Next(50, 150));
							break;
						case 1:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1255, 1, noBroadcast: false, -1);
							break;
						case 2:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 788, 1, noBroadcast: false, -1);
							break;
						case 3:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1178, 1, noBroadcast: false, -1);
							break;
						case 4:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1259, 1, noBroadcast: false, -1);
							break;
						case 5:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 1155, 1, noBroadcast: false, -1);
							break;
						case 6:
							Item.NewItem((int)position.X, (int)position.Y, width, height, 3018, 1, noBroadcast: false, -1);
							break;
						}
					}
				}
				bool num51 = downedPlantBoss;
				SetEventFlagCleared(downedPlantBoss, 12);
				if (!num51)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Lang.misc[33].Value, 50, byte.MaxValue, 130);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[33].Key), new Color(50, 255, 130));
					}
				}
			}
			if ((boss || type == 125 || type == 126 || type == 491 || type == 551 || type == 576 || type == 577 || type == 564 || type == 565) && player.RollLuck(10) == 0)
			{
				if (type == 4)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1360);
				}
				if (type == 13 || type == 14 || type == 15)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1361);
				}
				if (type == 266)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1362);
				}
				if (type == 35)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1363);
				}
				if (type == 222)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1364);
				}
				if (type == 113)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1365);
				}
				if (type == 134)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1366);
				}
				if (type == 127)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1367);
				}
				if (type == 125)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1368);
				}
				if (type == 126)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1369);
				}
				if (type == 262)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1370);
				}
				if (type == 245)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 1371);
				}
				if (type == 50)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2489);
				}
				if (type == 370)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 2589);
				}
				if (type == 439)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3357);
				}
				if (type == 491)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3359);
				}
				if (type == 395)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3358);
				}
				if (type == 398)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3595);
				}
				if (type == 551)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3866);
				}
				if (type == 564 || type == 565)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3867);
				}
				if (type == 576 || type == 577)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 3868);
				}
			}
			if (boss)
			{
				if (type == 4)
				{
					SetEventFlagCleared(downedBoss1, 13);
				}
				else if (type == 13 || type == 14 || type == 15)
				{
					SetEventFlagCleared(downedBoss2, 14);
				}
				else if (type == 266)
				{
					SetEventFlagCleared(downedBoss2, 14);
				}
				else if (type == 35)
				{
					SetEventFlagCleared(downedBoss3, 15);
				}
				if (type == 127)
				{
					SetEventFlagCleared(downedMechBoss3, 18);
					downedMechBossAny = true;
				}
				if (type == 134)
				{
					SetEventFlagCleared(downedMechBoss1, 16);
					downedMechBossAny = true;
				}
				string typeName = TypeName;
				int stack6 = Main.rand.Next(5, 16);
				int num52 = 28;
				if (type == 113)
				{
					num52 = 188;
				}
				else if (type == 222)
				{
					num52 = 1134;
				}
				else if (type > 113 && type < 222)
				{
					num52 = 499;
				}
				else if (type == 245 || type == 262)
				{
					num52 = 499;
				}
				else if (type == 370)
				{
					num52 = 499;
				}
				else if (type == 395)
				{
					num52 = 499;
				}
				else if (type == 439)
				{
					num52 = 499;
				}
				else if (type == 398)
				{
					num52 = 3544;
				}
				Item.NewItem((int)position.X, (int)position.Y, width, height, num52, stack6);
				int num53 = Main.rand.Next(5) + 5;
				for (int num54 = 0; num54 < num53; num54++)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				if (type == 125 || type == 126)
				{
					SetEventFlagCleared(downedMechBoss2, 17);
					downedMechBossAny = true;
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Plural", Language.GetTextValue("Enemies.TheTwins")), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Plural", NetworkText.FromKey("Enemies.TheTwins")), new Color(175, 75, 255));
					}
				}
				else if (type == 398)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", Language.GetTextValue("Enemies.MoonLord")), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Single", NetworkText.FromKey("Enemies.MoonLord")), new Color(175, 75, 255));
					}
				}
				else if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", typeName), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Single", GetTypeNetName()), new Color(175, 75, 255));
				}
				if (type == 113 && Main.netMode != 1)
				{
					bool eventFlag = Main.hardMode;
					if (!flag)
					{
						WorldGen.StartHardmode();
					}
					if (downedMechBoss1 && downedMechBoss2 && downedMechBoss3 && !eventFlag)
					{
						if (Main.netMode == 0)
						{
							Main.NewText(Lang.misc[32].Value, 50, byte.MaxValue, 130);
						}
						else if (Main.netMode == 2)
						{
							ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key), new Color(50, 255, 130));
						}
					}
					SetEventFlagCleared(eventFlag, 19);
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
			if (!flag2 && downedMechBoss1 && downedMechBoss2 && downedMechBoss3 && Main.hardMode)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[32].Value, 50, byte.MaxValue, 130);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key), new Color(50, 255, 130));
				}
			}
			NPCLoot_DropCommonLifeAndMana(player);
			NPCLoot_DropMoney(player);
		}

		public void NPCLoot()
		{
			if (Main.netMode == 1 || type >= 663)
			{
				return;
			}
			Player closestPlayer = Main.player[Player.FindClosest(position, width, height)];
			if (0 == 0)
			{
				CountKillForAchievements();
				if (GetWereThereAnyInteractions())
				{
					if (IsNPCValidForBestiaryKillCredit())
					{
						Main.BestiaryTracker.Kills.RegisterKill(this);
					}
					CountKillForBannersAndDropThem();
				}
			}
			if ((type == 23 && Main.hardMode) || (SpawnedFromStatue && NPCID.Sets.NoEarlymodeLootWhenSpawnedFromStatue[type] && !Main.hardMode) || (SpawnedFromStatue && NPCID.Sets.StatueSpawnedDropRarity[type] != -1f && (Main.rand.NextFloat() >= NPCID.Sets.StatueSpawnedDropRarity[type] || !AnyInteractions())))
			{
				return;
			}
			bool num = downedMechBoss1 && downedMechBoss2 && downedMechBoss3;
			DoDeathEvents_BeforeLoot(closestPlayer);
			NPCLoot_DropItems(closestPlayer);
			DoDeathEvents(closestPlayer);
			if (!num && downedMechBoss1 && downedMechBoss2 && downedMechBoss3 && Main.hardMode)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[32].Value, 50, byte.MaxValue, 130);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key), new Color(50, 255, 130));
				}
			}
			NPCLoot_DropMoney(closestPlayer);
			NPCLoot_DropHeals(closestPlayer);
		}

		private bool IsNPCValidForBestiaryKillCredit()
		{
			int num = type;
			if ((uint)(num - 13) <= 2u)
			{
				return boss;
			}
			return true;
		}

		private void DoDeathEvents_BeforeLoot(Player closestPlayer)
		{
			int num = type;
			if ((uint)(num - 125) <= 1u && AnyNPCs((type == 125) ? 126 : 125))
			{
				value = 0f;
				boss = false;
			}
		}

		private void NPCLoot_DropItems(Player closestPlayer)
		{
			DropAttemptInfo dropAttemptInfo = default(DropAttemptInfo);
			dropAttemptInfo.player = closestPlayer;
			dropAttemptInfo.npc = this;
			dropAttemptInfo.IsExpertMode = Main.expertMode;
			dropAttemptInfo.IsMasterMode = Main.masterMode;
			dropAttemptInfo.IsInSimulation = false;
			dropAttemptInfo.rng = Main.rand;
			DropAttemptInfo info = dropAttemptInfo;
			Main.ItemDropSolver.TryDropping(info);
		}

		public static void ResetBadgerHatTime()
		{
			EoCKilledToday = false;
			WoFKilledToday = false;
		}

		private void DoDeathEvents_DropBossPotionsAndHearts()
		{
			int stack = Main.rand.Next(5, 16);
			int num = 28;
			if (type == 113)
			{
				num = 188;
			}
			else if (type == 222)
			{
				num = 1134;
			}
			else if (type == 657)
			{
				num = 499;
			}
			else if (type > 113 && type < 222)
			{
				num = 499;
			}
			else if (type == 636)
			{
				num = 499;
			}
			else if (type == 245 || type == 262)
			{
				num = 499;
			}
			else if (type == 370)
			{
				num = 499;
			}
			else if (type == 395)
			{
				num = 499;
			}
			else if (type == 439)
			{
				num = 499;
			}
			else if (type == 398)
			{
				num = 3544;
			}
			Item.NewItem((int)position.X, (int)position.Y, width, height, num, stack);
			int num2 = Main.rand.Next(5) + 5;
			for (int i = 0; i < num2; i++)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
			}
			if (type == 4)
			{
				EoCKilledToday = true;
			}
			else if (type == 113)
			{
				WoFKilledToday = true;
			}
			if (EoCKilledToday && WoFKilledToday)
			{
				ResetBadgerHatTime();
				Item.NewItem((int)position.X, (int)position.Y, width, height, 5004);
			}
		}

		private void DoDeathEvents_CelebrateBossDeath()
		{
			if (type == 125 || type == 126)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Plural", Language.GetTextValue("Enemies.TheTwins")), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Plural", NetworkText.FromKey("Enemies.TheTwins")), new Color(175, 75, 255));
				}
			}
			else if (type == 398)
			{
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", Language.GetTextValue("Enemies.MoonLord")), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Single", NetworkText.FromKey("Enemies.MoonLord")), new Color(175, 75, 255));
				}
			}
			else if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasBeenDefeated_Single", TypeName), 175, 75);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasBeenDefeated_Single", GetTypeNetName()), new Color(175, 75, 255));
			}
		}

		private void CreateBrickBoxForWallOfFlesh()
		{
			int num = (int)(position.X + (float)(width / 2)) / 16;
			int num2 = (int)(position.Y + (float)(height / 2)) / 16;
			int num3 = width / 2 / 16 + 1;
			for (int i = num - num3; i <= num + num3; i++)
			{
				for (int j = num2 - num3; j <= num2 + num3; j++)
				{
					if ((i == num - num3 || i == num + num3 || j == num2 - num3 || j == num2 + num3) && !Main.tile[i, j].active())
					{
						Main.tile[i, j].type = (ushort)(WorldGen.crimson ? 347 : 140);
						Main.tile[i, j].active(active: true);
					}
					Main.tile[i, j].lava(lava: false);
					Main.tile[i, j].liquid = 0;
					if (Main.netMode == 2)
					{
						NetMessage.SendTileSquare(-1, i, j, 1);
					}
					else
					{
						WorldGen.SquareTileFrame(i, j);
					}
				}
			}
		}

		private void DoDeathEvents_SummonDungeonSpirit(Player closestPlayer)
		{
			if (lifeMax > 100 && type != 288 && value > 0f && HasPlayerTarget && Main.hardMode && downedPlantBoss && Main.player[target].ZoneDungeon)
			{
				int range = 13;
				if (Main.expertMode)
				{
					range = 9;
				}
				if (closestPlayer.RollLuck(range) == 0 && Main.wallDungeon[Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16].wall])
				{
					NewNPC((int)base.Center.X, (int)base.Center.Y, 288);
				}
			}
		}

		private void DoDeathEvents_AdvanceSlimeRain(Player closestPlayer)
		{
			if (Main.slimeRain && Main.slimeRainNPC[type] && !AnyNPCs(50))
			{
				int num = 150;
				if (downedSlimeKing)
				{
					num /= 2;
				}
				Main.slimeRainKillCount++;
				if (Main.slimeRainKillCount >= num)
				{
					SpawnOnPlayer(closestPlayer.whoAmI, 50);
					Main.slimeRainKillCount = -num / 2;
				}
			}
		}

		private void NPCLoot_DropHeals(Player closestPlayer)
		{
			NPCLoot_DropCommonLifeAndMana(closestPlayer);
			switch (type)
			{
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 329:
			case 330:
				if (closestPlayer.RollLuck(4) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 326:
				if (closestPlayer.RollLuck(6) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 315:
				Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				break;
			case 341:
			{
				int num2 = Main.rand.Next(5, 11);
				for (int j = 0; j < num2; j++)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			}
			case 338:
			case 339:
			case 340:
				if (closestPlayer.RollLuck(5) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 342:
				if (Main.rand.Next(3) != 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 325:
			case 327:
			case 344:
			case 345:
			case 346:
			{
				int num = Main.rand.Next(6) + 6;
				for (int i = 0; i < num; i++)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			}
			case 267:
				if (Main.rand.Next(2) == 0 && closestPlayer.statLife < closestPlayer.statLifeMax2)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 13:
			case 14:
			case 15:
				if (Main.rand.Next(4) == 0 && closestPlayer.statLife < closestPlayer.statLifeMax2)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 116:
			case 117:
			case 118:
			case 119:
				if (!Main.expertMode || Main.rand.Next(5) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			case 139:
				if (Main.rand.Next(2) == 0)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
				break;
			}
		}

		private void DoDeathEvents(Player closestPlayer)
		{
			DoDeathEvents_AdvanceSlimeRain(closestPlayer);
			DoDeathEvents_SummonDungeonSpirit(closestPlayer);
			switch (type)
			{
			case 216:
				SpawnBoss((int)position.X, (int)position.Y, 662, target);
				break;
			case 327:
				if (Main.pumpkinMoon)
				{
					SetEventFlagCleared(downedHalloweenKing, 5);
				}
				break;
			case 325:
				if (Main.pumpkinMoon)
				{
					SetEventFlagCleared(downedHalloweenTree, 4);
				}
				break;
			case 344:
				if (Main.snowMoon)
				{
					SetEventFlagCleared(downedChristmasTree, 21);
				}
				break;
			case 345:
				if (Main.snowMoon)
				{
					SetEventFlagCleared(downedChristmasIceQueen, 20);
				}
				break;
			case 346:
				if (Main.snowMoon)
				{
					SetEventFlagCleared(downedChristmasSantank, 22);
				}
				break;
			case 552:
			case 553:
			case 554:
				if (DD2Event.Ongoing)
				{
					DD2Event.AnnounceGoblinDeath(this);
					if (DD2Event.ShouldDropCrystals())
					{
						Item.NewItem(position, base.Size, 3822);
					}
				}
				break;
			case 555:
			case 556:
			case 557:
			case 558:
			case 559:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
				if (DD2Event.ShouldDropCrystals())
				{
					Item.NewItem(position, base.Size, 3822);
				}
				break;
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 518:
				if (ShieldStrengthTowerSolar > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(517));
				}
				break;
			case 425:
			case 426:
			case 427:
			case 429:
				if (ShieldStrengthTowerVortex > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(422));
				}
				break;
			case 420:
			case 421:
			case 423:
			case 424:
				if (ShieldStrengthTowerNebula > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(507));
				}
				break;
			case 402:
			case 405:
			case 407:
			case 409:
			case 411:
				if (ShieldStrengthTowerStardust > 0)
				{
					Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 629, 0, 0f, Main.myPlayer, FindFirstNPC(493));
				}
				break;
			case 517:
				downedTowerSolar = true;
				TowerActiveSolar = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			case 422:
				downedTowerVortex = true;
				TowerActiveVortex = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			case 507:
				downedTowerNebula = true;
				TowerActiveNebula = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			case 493:
				downedTowerStardust = true;
				TowerActiveStardust = false;
				WorldGen.UpdateLunarApocalypse();
				WorldGen.MessageLunarApocalypse();
				break;
			case 245:
				SetEventFlagCleared(downedGolemBoss, 6);
				break;
			case 370:
				SetEventFlagCleared(downedFishron, 7);
				break;
			case 636:
				SetEventFlagCleared(downedEmpressOfLight, 23);
				break;
			case 657:
				SetEventFlagCleared(downedQueenSlime, 24);
				break;
			case 22:
				if (Collision.LavaCollision(position, width, height))
				{
					SpawnWOF(position);
				}
				break;
			case 614:
			{
				int num2 = 175;
				if (SpawnedFromStatue)
				{
					num2 = 0;
				}
				Projectile.NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 281, num2, 0f, Main.myPlayer, -2f, releaseOwner + 1);
				break;
			}
			case 109:
				if (!downedClown)
				{
					downedClown = true;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7);
					}
				}
				break;
			case 222:
				SetEventFlagCleared(downedQueenBee, 8);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
				break;
			case 439:
				SetEventFlagCleared(downedAncientCultist, 9);
				WorldGen.TriggerLunarApocalypse();
				break;
			case 398:
				SetEventFlagCleared(downedMoonlord, 10);
				LunarApocalypseIsUp = false;
				break;
			case 50:
				if (Main.slimeRain)
				{
					Main.StopSlimeRain();
					AchievementsHelper.NotifyProgressionEvent(16);
				}
				SetEventFlagCleared(downedSlimeKing, 11);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
				break;
			case 125:
			case 126:
				if (boss)
				{
					SetEventFlagCleared(downedMechBoss2, 17);
					downedMechBossAny = true;
				}
				break;
			case 262:
			{
				bool num3 = downedPlantBoss;
				SetEventFlagCleared(downedPlantBoss, 12);
				if (!num3)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Lang.misc[33].Value, 50, byte.MaxValue, 130);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[33].Key), new Color(50, 255, 130));
					}
				}
				break;
			}
			case 4:
				SetEventFlagCleared(downedBoss1, 13);
				break;
			case 13:
			case 14:
			case 15:
			case 266:
				if (boss)
				{
					if (!downedBoss2 || Main.rand.Next(2) == 0)
					{
						WorldGen.spawnMeteor = true;
					}
					SetEventFlagCleared(downedBoss2, 14);
				}
				break;
			case 35:
				if (boss)
				{
					SetEventFlagCleared(downedBoss3, 15);
				}
				break;
			case 127:
				if (boss)
				{
					SetEventFlagCleared(downedMechBoss3, 18);
					downedMechBossAny = true;
				}
				break;
			case 134:
				if (boss)
				{
					SetEventFlagCleared(downedMechBoss1, 16);
					downedMechBossAny = true;
				}
				break;
			case 113:
			{
				if (Main.netMode == 1)
				{
					break;
				}
				CreateBrickBoxForWallOfFlesh();
				bool eventFlag = Main.hardMode;
				WorldGen.StartHardmode();
				if (downedMechBoss1 && downedMechBoss2 && downedMechBoss3 && !eventFlag)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Lang.misc[32].Value, 50, byte.MaxValue, 130);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[32].Key), new Color(50, 255, 130));
					}
				}
				SetEventFlagCleared(eventFlag, 19);
				break;
			}
			case 661:
				if (Main.netMode != 1 && GetWereThereAnyInteractions())
				{
					int num = 636;
					if (!AnyNPCs(num))
					{
						Vector2 vector = base.Center + new Vector2(0f, -200f) + Main.rand.NextVector2Circular(50f, 50f);
						SpawnBoss((int)vector.X, (int)vector.Y, num, closestPlayer.whoAmI);
					}
				}
				break;
			}
			if (boss)
			{
				DoDeathEvents_DropBossPotionsAndHearts();
				DoDeathEvents_CelebrateBossDeath();
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7);
				}
			}
		}

		private void NPCLoot_DropCommonLifeAndMana(Player closestPlayer)
		{
			if (type != 16 && type != 81 && type != 121 && closestPlayer.RollLuck(6) == 0 && lifeMax > 1 && damage > 0)
			{
				if (Main.rand.Next(2) == 0 && closestPlayer.statMana < closestPlayer.statManaMax2)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 184);
				}
				else if (Main.rand.Next(2) == 0 && closestPlayer.statLife < closestPlayer.statLifeMax2)
				{
					Item.NewItem((int)position.X, (int)position.Y, width, height, 58);
				}
			}
			if (type != 16 && type != 81 && type != 121 && closestPlayer.RollLuck(2) == 0 && lifeMax > 1 && damage > 0 && closestPlayer.statMana < closestPlayer.statManaMax2)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, 184);
			}
		}

		private void NPCLoot_DropMoney(Player closestPlayer)
		{
			float num = 0f;
			float luck = closestPlayer.luck;
			int num2 = 1;
			if (Main.rand.NextFloat() < Math.Abs(luck))
			{
				num2 = 2;
			}
			for (int i = 0; i < num2; i++)
			{
				float num3 = value;
				if (midas)
				{
					num3 *= 1f + (float)Main.rand.Next(10, 51) * 0.01f;
				}
				num3 *= 1f + (float)Main.rand.Next(-20, 76) * 0.01f;
				if (Main.rand.Next(2) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(5, 11) * 0.01f;
				}
				if (Main.rand.Next(4) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(10, 21) * 0.01f;
				}
				if (Main.rand.Next(8) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(15, 31) * 0.01f;
				}
				if (Main.rand.Next(16) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(20, 41) * 0.01f;
				}
				if (Main.rand.Next(32) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(25, 51) * 0.01f;
				}
				if (Main.rand.Next(64) == 0)
				{
					num3 *= 1f + (float)Main.rand.Next(50, 101) * 0.01f;
				}
				if (Main.bloodMoon)
				{
					num3 *= 1f + (float)Main.rand.Next(101) * 0.01f;
				}
				if (i == 0)
				{
					num = num3;
				}
				else if (luck < 0f)
				{
					if (num3 < num)
					{
						num = num3;
					}
				}
				else if (num3 > num)
				{
					num = num3;
				}
			}
			num += (float)extraValue;
			while ((int)num > 0)
			{
				if (num > 1000000f)
				{
					int num4 = (int)(num / 1000000f);
					if (num4 > 50 && Main.rand.Next(5) == 0)
					{
						num4 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num4 /= Main.rand.Next(3) + 1;
					}
					int num5 = num4;
					while (num5 > 999)
					{
						num5 -= 999;
						Item.NewItem((int)position.X, (int)position.Y, width, height, 74, 999);
					}
					num -= (float)(1000000 * num4);
					Item.NewItem((int)position.X, (int)position.Y, width, height, 74, num5);
				}
				else if (num > 10000f)
				{
					int num6 = (int)(num / 10000f);
					if (num6 > 50 && Main.rand.Next(5) == 0)
					{
						num6 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num6 /= Main.rand.Next(3) + 1;
					}
					num -= (float)(10000 * num6);
					Item.NewItem((int)position.X, (int)position.Y, width, height, 73, num6);
				}
				else if (num > 100f)
				{
					int num7 = (int)(num / 100f);
					if (num7 > 50 && Main.rand.Next(5) == 0)
					{
						num7 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num7 /= Main.rand.Next(3) + 1;
					}
					num -= (float)(100 * num7);
					Item.NewItem((int)position.X, (int)position.Y, width, height, 72, num7);
				}
				else
				{
					int num8 = (int)num;
					if (num8 > 50 && Main.rand.Next(5) == 0)
					{
						num8 /= Main.rand.Next(3) + 1;
					}
					if (Main.rand.Next(5) == 0)
					{
						num8 /= Main.rand.Next(4) + 1;
					}
					if (num8 < 1)
					{
						num8 = 1;
					}
					num -= (float)num8;
					Item.NewItem((int)position.X, (int)position.Y, width, height, 71, num8);
				}
			}
		}

		public static int GetStackForSlimeItemDrop(int item)
		{
			int num = 1;
			if (item == 8)
			{
				num = Main.rand.Next(5, 11);
			}
			else if (item == 166)
			{
				num = Main.rand.Next(2, 7);
			}
			else if (item == 965)
			{
				num = Main.rand.Next(20, 46);
			}
			else if ((item >= 11 && item <= 14) || (item >= 699 && item <= 702))
			{
				num = Main.rand.Next(3, 9);
				if (Main.rand.Next(2) == 0)
				{
					num += 5;
				}
			}
			else
			{
				switch (item)
				{
				case 71:
					num = Main.rand.Next(50, 100);
					break;
				case 72:
					num = Main.rand.Next(20, 100);
					break;
				case 73:
					num = Main.rand.Next(1, 3);
					break;
				}
			}
			return num;
		}

		public bool ExcludedFromDeathTally()
		{
			if (netID < 0)
			{
				if (netID != -5)
				{
					return netID == -1;
				}
				return true;
			}
			return NPCID.Sets.PositiveNPCTypesExcludedFromDeathTally[netID];
		}

		private void CountKillForBannersAndDropThem()
		{
			int num = Item.NPCtoBanner(BannerID());
			if (num <= 0 || ExcludedFromDeathTally())
			{
				return;
			}
			killCount[num]++;
			if (Main.netMode == 2)
			{
				NetMessage.SendData(83, -1, -1, null, num);
			}
			int num2 = ItemID.Sets.KillsToBanner[Item.BannerToItem(num)];
			if (killCount[num] % num2 == 0 && num > 0)
			{
				int num3 = Item.BannerToNPC(num);
				int num4 = lastInteraction;
				if (!Main.player[num4].active || Main.player[num4].dead)
				{
					num4 = FindClosestPlayer();
				}
				NetworkText networkText = NetworkText.FromKey("Game.EnemiesDefeatedAnnouncement", killCount[num], NetworkText.FromKey(Lang.GetNPCName(num3).Key));
				if (num4 >= 0 && num4 < 255)
				{
					networkText = NetworkText.FromKey("Game.EnemiesDefeatedByAnnouncement", Main.player[num4].name, killCount[num], NetworkText.FromKey(Lang.GetNPCName(num3).Key));
				}
				if (Main.netMode == 0)
				{
					Main.NewText(networkText.ToString(), 250, 250, 0);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(networkText, new Color(250, 250, 0));
				}
				int num5 = Item.BannerToItem(num);
				Vector2 position = base.position;
				if (num4 >= 0 && num4 < 255)
				{
					position = Main.player[num4].position;
				}
				Item.NewItem((int)position.X, (int)position.Y, width, height, num5);
			}
		}

		private bool GetWereThereAnyInteractions()
		{
			bool flag = false;
			if (realLife >= 0)
			{
				return Main.npc[realLife].AnyInteractions();
			}
			return AnyInteractions();
		}

		private void CountKillForAchievements()
		{
			switch (type)
			{
			case 125:
			case 126:
				if (!AnyNPCs((type == 126) ? 125 : 126))
				{
					AchievementsHelper.NotifyNPCKilled(this);
					AchievementsHelper.CheckMechaMayhem(type);
				}
				break;
			case 127:
			case 134:
				AchievementsHelper.CheckMechaMayhem(type);
				AchievementsHelper.NotifyNPCKilled(this);
				break;
			case 13:
			case 14:
			case 15:
				if (boss)
				{
					AchievementsHelper.NotifyNPCKilled(this);
				}
				break;
			default:
				AchievementsHelper.NotifyNPCKilled(this);
				break;
			}
		}

		private void NPCLoot_DropFood(Player closestPlayer)
		{
			int num = 0;
			int num2 = 0;
			switch (type)
			{
			case 48:
				num = 4016;
				num2 = 50;
				break;
			case 224:
				num = 4021;
				num2 = 50;
				break;
			case 44:
				num = 4037;
				num2 = 10;
				break;
			case 469:
				num = 4037;
				num2 = 100;
				break;
			case 163:
			case 164:
			case 165:
			case 238:
			case 530:
			case 531:
				num = 4020;
				num2 = 30;
				break;
			case 480:
			case 481:
				num = 4029;
				num2 = 50;
				break;
			case 494:
			case 495:
			case 496:
			case 497:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
				num = 4030;
				num2 = 75;
				break;
			case 482:
			case 483:
				num = 4036;
				num2 = 50;
				break;
			case 6:
			case 173:
				num = 4015;
				num2 = 100;
				break;
			case 150:
			case 184:
				num = 4026;
				num2 = 150;
				break;
			case 154:
			case 206:
				num = 4027;
				num2 = 75;
				break;
			case 170:
			case 171:
			case 180:
				num = 3532;
				num2 = 15;
				break;
			case 289:
				num = 4018;
				num2 = 50;
				break;
			case 34:
				num = 4018;
				num2 = 100;
				break;
			case 291:
			case 292:
			case 293:
				num = 4013;
				num2 = 7;
				break;
			case 290:
				num = 4013;
				num2 = 21;
				break;
			case 39:
			case 156:
				num = 4025;
				num2 = 30;
				break;
			case 152:
			case 177:
				num = 4023;
				num2 = 15;
				break;
			case 69:
			case 508:
			case 509:
			case 580:
			case 581:
				num = 4012;
				num2 = 15;
				break;
			case 542:
			case 543:
			case 544:
			case 545:
			case 546:
				num = 4028;
				num2 = 30;
				break;
			case 65:
			case 67:
				num = 4035;
				num2 = 50;
				break;
			case 120:
			case 137:
			case 138:
				num = 4011;
				num2 = 150;
				break;
			case 122:
				num = 4017;
				num2 = 75;
				break;
			}
			if (!SpawnedFromStatue && num != 0 && num2 != 0 && closestPlayer.RollLuck(num2) == 0)
			{
				Item.NewItem((int)position.X, (int)position.Y, width, height, num);
			}
		}

		public static void CatchNPC(int i, int who = -1)
		{
			if (!Main.npc[i].active)
			{
				return;
			}
			if (Main.netMode == 1)
			{
				Main.npc[i].active = false;
				NetMessage.SendData(70, -1, -1, null, i, who);
			}
			else if (Main.npc[i].catchItem > 0)
			{
				if (Main.npc[i].SpawnedFromStatue)
				{
					Vector2 position = Main.npc[i].Center - new Vector2(20f);
					Utils.PoofOfSmoke(position);
					Main.npc[i].active = false;
					NetMessage.SendData(23, -1, -1, null, i);
					NetMessage.SendData(106, -1, -1, null, (int)position.X, position.Y);
				}
				else
				{
					new Item().SetDefaults(Main.npc[i].catchItem);
					Item.NewItem((int)Main.player[who].Center.X, (int)Main.player[who].Center.Y, 0, 0, Main.npc[i].catchItem, 1, noBroadcast: false, 0, noGrabDelay: true);
					Main.npc[i].active = false;
					NetMessage.SendData(23, -1, -1, null, i);
				}
			}
		}

		public void DropBossBags()
		{
			int itemType = -1;
			if (type == 50)
			{
				itemType = 3318;
			}
			if (type == 4)
			{
				itemType = 3319;
			}
			if (type >= 13 && type <= 15)
			{
				itemType = 3320;
			}
			if (type == 266)
			{
				itemType = 3321;
			}
			if (type == 222)
			{
				itemType = 3322;
			}
			if (type == 35)
			{
				itemType = 3323;
			}
			if (type == 113)
			{
				itemType = 3324;
			}
			if (type == 134)
			{
				itemType = 3325;
			}
			if (type == 125 || type == 126)
			{
				itemType = 3326;
			}
			if (type == 127)
			{
				itemType = 3327;
			}
			if (type == 262)
			{
				itemType = 3328;
			}
			if (type == 245)
			{
				itemType = 3329;
			}
			if (type == 370)
			{
				itemType = 3330;
			}
			if (type == 439)
			{
				itemType = 3331;
			}
			if (type == 398)
			{
				itemType = 3332;
			}
			if (type == 551)
			{
				itemType = 3860;
			}
			DropItemInstanced(position, base.Size, itemType);
		}

		public void DropItemInstanced(Vector2 Position, Vector2 HitboxSize, int itemType, int itemStack = 1, bool interactionRequired = true)
		{
			if (itemType <= 0)
			{
				return;
			}
			if (Main.netMode == 2)
			{
				int num = Item.NewItem((int)Position.X, (int)Position.Y, (int)HitboxSize.X, (int)HitboxSize.Y, itemType, itemStack, noBroadcast: true);
				Main.timeItemSlotCannotBeReusedFor[num] = 54000;
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && (playerInteraction[i] || !interactionRequired))
					{
						NetMessage.SendData(90, i, -1, null, num);
					}
				}
				Main.item[num].active = false;
			}
			else if (Main.netMode == 0)
			{
				Item.NewItem((int)Position.X, (int)Position.Y, (int)HitboxSize.X, (int)HitboxSize.Y, itemType, itemStack);
			}
			value = 0f;
		}

		public void PlayerInteraction(int player)
		{
			bool flag = false;
			if ((realLife < 0) ? playerInteraction[player] : Main.npc[realLife].playerInteraction[player])
			{
				return;
			}
			if (type == 13 || type == 14 || type == 15)
			{
				for (int i = 0; i < 200; i++)
				{
					if (i != whoAmI && Main.npc[i].active && (Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15))
					{
						Main.npc[i].ApplyInteraction(player);
					}
				}
			}
			if (type == 134 || type == 135 || type == 136)
			{
				for (int j = 0; j < 200; j++)
				{
					if (j != whoAmI && Main.npc[j].active && (Main.npc[j].type == 134 || Main.npc[j].type == 135 || Main.npc[j].type == 136))
					{
						Main.npc[j].ApplyInteraction(player);
					}
				}
			}
			if (type == 35 || type == 36)
			{
				for (int k = 0; k < 200; k++)
				{
					if (k != whoAmI && Main.npc[k].active && (Main.npc[k].type == 35 || Main.npc[k].type == 36))
					{
						Main.npc[k].ApplyInteraction(player);
					}
				}
			}
			if (type == 113 || type == 114)
			{
				for (int l = 0; l < 200; l++)
				{
					if (l != whoAmI && Main.npc[l].active && (Main.npc[l].type == 113 || Main.npc[l].type == 114))
					{
						Main.npc[l].ApplyInteraction(player);
					}
				}
			}
			if (type >= 127 && type <= 131)
			{
				for (int m = 0; m < 200; m++)
				{
					if (m != whoAmI && Main.npc[m].active && Main.npc[m].type >= 127 && Main.npc[m].type <= 131)
					{
						Main.npc[m].ApplyInteraction(player);
					}
				}
			}
			if (type >= 245 && type <= 249)
			{
				for (int n = 0; n < 200; n++)
				{
					if (n != whoAmI && Main.npc[n].active && Main.npc[n].type >= 245 && Main.npc[n].type <= 249)
					{
						Main.npc[n].ApplyInteraction(player);
					}
				}
			}
			if ((type == 396 || type == 397) && Main.npc[(int)ai[3]].active && Main.npc[(int)ai[3]].type == 398)
			{
				Main.npc[(int)ai[3]].ApplyInteraction(player);
			}
			if ((type == 393 || type == 394) && Main.npc[(int)ai[0]].active && Main.npc[(int)ai[0]].type == 395)
			{
				Main.npc[(int)ai[0]].ApplyInteraction(player);
			}
			if (type == 492 && Main.npc[(int)ai[0]].active && Main.npc[(int)ai[0]].type == 491)
			{
				Main.npc[(int)ai[0]].ApplyInteraction(player);
			}
			ApplyInteraction(player);
		}

		public void ApplyInteraction(int player)
		{
			if (realLife >= 0)
			{
				Main.npc[realLife].playerInteraction[player] = true;
			}
			else
			{
				playerInteraction[player] = true;
			}
			if (player < 255)
			{
				if (realLife >= 0)
				{
					Main.npc[realLife].lastInteraction = player;
				}
				else
				{
					lastInteraction = player;
				}
			}
		}

		public static bool CanReleaseNPCs(int who)
		{
			float num = 0.7f;
			if (Main.netMode != 1)
			{
				num += 0.05f;
			}
			int num2 = 0;
			int num3 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					num3++;
					if (Main.npc[i].releaseOwner == who)
					{
						num2++;
					}
				}
			}
			int num4 = 0;
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active)
				{
					num4++;
				}
			}
			int num5 = (int)(200f * num / (float)num4);
			if ((float)num3 < 200f * num && num2 < num5)
			{
				return true;
			}
			return false;
		}

		public static void ReleaseNPC(int x, int y, int Type, int Style, int who)
		{
			if (Main.netMode == 1)
			{
				NetMessage.SendData(71, -1, -1, null, x, y, Type, Style);
			}
			else
			{
				if (Type < 0 || Type >= 663 || !Main.npcCatchable[Type] || !CanReleaseNPCs(who))
				{
					return;
				}
				switch (Type)
				{
				case 583:
				case 584:
				case 585:
				{
					int num3 = NewNPC(x, y, Type);
					Main.npc[num3].releaseOwner = (short)who;
					Main.npc[num3].ai[2] = 2f;
					Main.npc[num3].TargetClosest();
					Main.npc[num3].ai[3] = 0f;
					Main.npc[num3].netUpdate = true;
					break;
				}
				case 356:
				{
					int num4 = NewNPC(x, y, Type);
					Main.npc[num4].ai[2] = Style;
					Main.npc[num4].releaseOwner = (short)who;
					break;
				}
				case 148:
				{
					int num5 = Type + Main.rand.Next(2);
					int num6 = NewNPC(x, y, num5);
					Main.npc[num6].releaseOwner = (short)who;
					break;
				}
				case 614:
				{
					int num2 = NewNPC(x, y, Type);
					Main.npc[num2].releaseOwner = (short)who;
					int direction = Main.player[who].direction;
					if (Style > 2)
					{
						Style -= 2;
						Main.npc[num2].SpawnedFromStatue = true;
					}
					if (Style == 1)
					{
						direction = 1;
					}
					if (Style == 2)
					{
						direction = -1;
					}
					Main.npc[num2].direction = direction;
					Main.npc[num2].spriteDirection = direction;
					Main.npc[num2].netUpdate = true;
					break;
				}
				default:
				{
					int num = NewNPC(x, y, Type);
					Main.npc[num].releaseOwner = (short)who;
					break;
				}
				}
			}
		}

		public static void SlimeRainSpawns(int plr)
		{
			int logicCheckScreenHeight = Main.LogicCheckScreenHeight;
			int logicCheckScreenWidth = Main.LogicCheckScreenWidth;
			float num = 15f;
			Player player = Main.player[plr];
			if ((double)player.position.Y > Main.worldSurface * 16.0 + (double)(logicCheckScreenHeight / 2) || player.nearbyActiveNPCs > num)
			{
				return;
			}
			float num2 = player.nearbyActiveNPCs / num;
			int num3 = 45 + (int)(450f * num2);
			if (Main.expertMode)
			{
				num3 = (int)((double)num3 * 0.85);
			}
			if (Main.rand.Next(num3) != 0)
			{
				return;
			}
			int num4 = (int)(player.Center.X - (float)logicCheckScreenWidth);
			int maxValue = num4 + logicCheckScreenWidth * 2;
			int minValue = (int)((double)player.Center.Y - (double)logicCheckScreenHeight * 1.5);
			int maxValue2 = (int)((double)player.Center.Y - (double)logicCheckScreenHeight * 0.75);
			int num5 = Main.rand.Next(num4, maxValue);
			int num6 = Main.rand.Next(minValue, maxValue2);
			num5 /= 16;
			num6 /= 16;
			if (num5 < 10 || num5 > Main.maxTilesX + 10 || (double)num6 < Main.worldSurface * 0.3 || (double)num6 > Main.worldSurface || Collision.SolidTiles(num5 - 3, num5 + 3, num6 - 5, num6 + 2) || Main.wallHouse[Main.tile[num5, num6].wall])
			{
				return;
			}
			int num7 = NewNPC(num5 * 16 + 8, num6 * 16, 1);
			if (Main.rand.Next(200) == 0)
			{
				Main.npc[num7].SetDefaults(-4);
			}
			else if (Main.expertMode)
			{
				if (Main.rand.Next(7) == 0)
				{
					Main.npc[num7].SetDefaults(-7);
				}
				else if (Main.rand.Next(3) == 0)
				{
					Main.npc[num7].SetDefaults(-3);
				}
			}
			else if (Main.rand.Next(10) == 0)
			{
				Main.npc[num7].SetDefaults(-7);
			}
			else if (Main.rand.Next(5) < 2)
			{
				Main.npc[num7].SetDefaults(-3);
			}
		}

		public static bool Spawning_SandstoneCheck(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 10))
			{
				return false;
			}
			int num = 0;
			for (int i = 0; i < 8; i++)
			{
				Tile tile = Main.tile[x, y + i];
				if (!tile.active() || !TileID.Sets.Conversion.Sand[tile.type])
				{
					break;
				}
				num++;
				for (int j = 1; j <= 4; j++)
				{
					tile = Main.tile[x + j, y + i];
					if (!tile.active() || !TileID.Sets.Conversion.Sand[tile.type])
					{
						break;
					}
					num++;
				}
				for (int k = 1; k <= 4; k++)
				{
					tile = Main.tile[x - k, y + i];
					if (!tile.active() || !TileID.Sets.Conversion.Sand[tile.type])
					{
						break;
					}
					num++;
				}
			}
			return num >= 40;
		}

		public static bool Spawning_FlyingAntlionCheck(int x, int y)
		{
			if (!WorldGen.InWorld(x, y, 10))
			{
				return false;
			}
			for (int i = 0; i < 50; i++)
			{
				if (y - i < 10)
				{
					return true;
				}
				Tile tile = Main.tile[x, y - i];
				if (!WallID.Sets.Conversion.HardenedSand[tile.wall] && !WallID.Sets.Conversion.Sandstone[tile.wall])
				{
					return false;
				}
			}
			return true;
		}

		private static int RollDragonflyType(int tileType = 2)
		{
			if (tileType == 53)
			{
				return Main.rand.NextFromList(new short[3]
				{
					595,
					598,
					600
				});
			}
			return Main.rand.NextFromList(new short[3]
			{
				596,
				597,
				599
			});
		}

		public static void SpawnNPC()
		{
			if (noSpawnCycle)
			{
				noSpawnCycle = false;
				return;
			}
			bool tooWindyForButterflies = TooWindyForButterflies;
			bool flag = (double)Main.windSpeedTarget < -0.2 || (double)Main.windSpeedTarget > 0.2;
			RevengeManager.CheckRespawns();
			bool flag2 = false;
			bool flag3 = false;
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					num4++;
				}
			}
			float num5 = 0f;
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active)
				{
					switch (Main.npc[j].type)
					{
					case 315:
					case 325:
					case 327:
					case 328:
					case 344:
					case 345:
					case 346:
						num5 += Main.npc[j].npcSlots;
						break;
					}
				}
			}
			float num6 = (int)((float)defaultMaxSpawns * (2f + 0.3f * (float)num4));
			for (int k = 0; k < 255; k++)
			{
				if (!Main.player[k].active || Main.player[k].dead)
				{
					continue;
				}
				flag3 = false;
				if (Main.player[k].isNearNPC(398, MoonLordFightingDistance))
				{
					continue;
				}
				if (Main.slimeRain)
				{
					SlimeRainSpawns(k);
				}
				bool flag4 = false;
				bool flag5 = false;
				bool flag6 = false;
				bool flag7 = false;
				bool flag8 = false;
				bool flag9 = false;
				bool flag10 = false;
				bool flag11 = false;
				bool flag12 = false;
				bool flag13 = false;
				bool flag14 = downedPlantBoss && Main.hardMode;
				bool isItAHappyWindyDay = Main.IsItAHappyWindyDay;
				if (Main.player[k].active && Main.invasionType > 0 && Main.invasionDelay == 0 && Main.invasionSize > 0 && (double)Main.player[k].position.Y < Main.worldSurface * 16.0 + (double)sHeight)
				{
					int num7 = 3000;
					if ((double)Main.player[k].position.X > Main.invasionX * 16.0 - (double)num7 && (double)Main.player[k].position.X < Main.invasionX * 16.0 + (double)num7)
					{
						flag6 = true;
					}
					else if (Main.invasionX >= (double)(Main.maxTilesX / 2 - 5) && Main.invasionX <= (double)(Main.maxTilesX / 2 + 5))
					{
						for (int l = 0; l < 200; l++)
						{
							if (Main.npc[l].townNPC && Math.Abs(Main.player[k].position.X - Main.npc[l].Center.X) < (float)num7)
							{
								if (Main.rand.Next(3) != 0)
								{
									flag6 = true;
								}
								break;
							}
						}
					}
				}
				if (Main.player[k].ZoneTowerSolar || Main.player[k].ZoneTowerNebula || Main.player[k].ZoneTowerVortex || Main.player[k].ZoneTowerStardust)
				{
					flag6 = true;
				}
				int num8 = (int)(Main.player[k].position.X + (float)(Main.player[k].width / 2)) / 16;
				int num9 = (int)(Main.player[k].position.Y + (float)(Main.player[k].height / 2)) / 16;
				if (Main.wallHouse[Main.tile[num8, num9].wall])
				{
					flag5 = true;
				}
				if (Main.tile[num8, num9].wall == 87)
				{
					flag4 = true;
				}
				flag2 = false;
				spawnRate = defaultSpawnRate;
				maxSpawns = defaultMaxSpawns;
				if (Main.hardMode)
				{
					spawnRate = (int)((double)defaultSpawnRate * 0.9);
					maxSpawns = defaultMaxSpawns + 1;
				}
				if (Main.player[k].position.Y > (float)(Main.UnderworldLayer * 16))
				{
					maxSpawns = (int)((float)maxSpawns * 2f);
				}
				else if ((double)Main.player[k].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
				{
					spawnRate = (int)((double)spawnRate * 0.4);
					maxSpawns = (int)((float)maxSpawns * 1.9f);
				}
				else if ((double)Main.player[k].position.Y > Main.worldSurface * 16.0 + (double)sHeight)
				{
					if (Main.hardMode)
					{
						spawnRate = (int)((double)spawnRate * 0.45);
						maxSpawns = (int)((float)maxSpawns * 1.8f);
					}
					else
					{
						spawnRate = (int)((double)spawnRate * 0.5);
						maxSpawns = (int)((float)maxSpawns * 1.7f);
					}
				}
				else if (!Main.dayTime)
				{
					spawnRate = (int)((double)spawnRate * 0.6);
					maxSpawns = (int)((float)maxSpawns * 1.3f);
					if (Main.bloodMoon)
					{
						spawnRate = (int)((double)spawnRate * 0.3);
						maxSpawns = (int)((float)maxSpawns * 1.8f);
					}
					if ((Main.pumpkinMoon || Main.snowMoon) && (double)Main.player[k].position.Y < Main.worldSurface * 16.0)
					{
						spawnRate = (int)((double)spawnRate * 0.2);
						maxSpawns *= 2;
					}
				}
				else if (Main.dayTime && Main.eclipse)
				{
					spawnRate = (int)((double)spawnRate * 0.2);
					maxSpawns = (int)((float)maxSpawns * 1.9f);
				}
				if (Main.player[k].ZoneSnow && (double)(Main.player[k].position.Y / 16f) < Main.worldSurface)
				{
					maxSpawns = (int)((float)maxSpawns + (float)maxSpawns * Main.cloudAlpha);
					spawnRate = (int)((float)spawnRate * (1f - Main.cloudAlpha + 1f) / 2f);
				}
				if (Main.drunkWorld && Main.tile[num8, num9].wall == 86)
				{
					spawnRate = (int)((double)spawnRate * 0.3);
					maxSpawns = (int)((float)maxSpawns * 1.8f);
				}
				if (Main.player[k].ZoneDungeon)
				{
					spawnRate = (int)((double)spawnRate * 0.3);
					maxSpawns = (int)((float)maxSpawns * 1.8f);
				}
				else if (Main.player[k].ZoneSandstorm)
				{
					spawnRate = (int)((float)spawnRate * (Main.hardMode ? 0.4f : 0.9f));
					maxSpawns = (int)((float)maxSpawns * (Main.hardMode ? 1.5f : 1.2f));
				}
				else if (Main.player[k].ZoneUndergroundDesert)
				{
					spawnRate = (int)((float)spawnRate * 0.2f);
					maxSpawns = (int)((float)maxSpawns * 3f);
				}
				else if (Main.player[k].ZoneJungle)
				{
					spawnRate = (int)((double)spawnRate * 0.4);
					maxSpawns = (int)((float)maxSpawns * 1.5f);
				}
				else if (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson)
				{
					spawnRate = (int)((double)spawnRate * 0.65);
					maxSpawns = (int)((float)maxSpawns * 1.3f);
				}
				else if (Main.player[k].ZoneMeteor)
				{
					spawnRate = (int)((double)spawnRate * 0.4);
					maxSpawns = (int)((float)maxSpawns * 1.1f);
				}
				if (Main.player[k].ZoneHallow && (double)Main.player[k].position.Y > Main.rockLayer * 16.0 + (double)sHeight)
				{
					spawnRate = (int)((double)spawnRate * 0.65);
					maxSpawns = (int)((float)maxSpawns * 1.3f);
				}
				if (Main.wofNPCIndex >= 0 && Main.player[k].position.Y > (float)(Main.UnderworldLayer * 16))
				{
					maxSpawns = (int)((float)maxSpawns * 0.3f);
					spawnRate *= 3;
				}
				if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.2)
				{
					spawnRate = (int)((float)spawnRate * 0.6f);
				}
				else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.4)
				{
					spawnRate = (int)((float)spawnRate * 0.7f);
				}
				else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.6)
				{
					spawnRate = (int)((float)spawnRate * 0.8f);
				}
				else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.8)
				{
					spawnRate = (int)((float)spawnRate * 0.9f);
				}
				if ((double)(Main.player[k].position.Y / 16f) > (Main.worldSurface + Main.rockLayer) / 2.0 || Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson)
				{
					if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.2)
					{
						spawnRate = (int)((float)spawnRate * 0.7f);
					}
					else if ((double)Main.player[k].nearbyActiveNPCs < (double)maxSpawns * 0.4)
					{
						spawnRate = (int)((float)spawnRate * 0.9f);
					}
				}
				if (Main.player[k].invis)
				{
					spawnRate = (int)((float)spawnRate * 1.2f);
					maxSpawns = (int)((float)maxSpawns * 0.8f);
				}
				if (Main.player[k].calmed)
				{
					spawnRate = (int)((float)spawnRate * 1.3f);
					maxSpawns = (int)((float)maxSpawns * 0.7f);
				}
				if (Main.player[k].sunflower)
				{
					spawnRate = (int)((float)spawnRate * 1.2f);
					maxSpawns = (int)((float)maxSpawns * 0.8f);
				}
				if (Main.player[k].enemySpawns)
				{
					spawnRate = (int)((double)spawnRate * 0.5);
					maxSpawns = (int)((float)maxSpawns * 2f);
				}
				if (Main.player[k].ZoneWaterCandle || Main.player[k].inventory[Main.player[k].selectedItem].type == 148)
				{
					if (!Main.player[k].ZonePeaceCandle && Main.player[k].inventory[Main.player[k].selectedItem].type != 3117)
					{
						spawnRate = (int)((double)spawnRate * 0.75);
						maxSpawns = (int)((float)maxSpawns * 1.5f);
					}
				}
				else if (Main.player[k].ZonePeaceCandle || Main.player[k].inventory[Main.player[k].selectedItem].type == 3117)
				{
					spawnRate = (int)((double)spawnRate * 1.3);
					maxSpawns = (int)((float)maxSpawns * 0.7f);
				}
				if (Main.player[k].ZoneWaterCandle && (double)(Main.player[k].position.Y / 16f) < Main.worldSurface * 0.34999999403953552)
				{
					spawnRate = (int)((double)spawnRate * 0.5);
				}
				if (Main.player[k].isNearFairy())
				{
					spawnRate = (int)((float)spawnRate * 1.2f);
					maxSpawns = (int)((float)maxSpawns * 0.8f);
				}
				if ((double)spawnRate < (double)defaultSpawnRate * 0.1)
				{
					spawnRate = (int)((double)defaultSpawnRate * 0.1);
				}
				if (maxSpawns > defaultMaxSpawns * 3)
				{
					maxSpawns = defaultMaxSpawns * 3;
				}
				if (Main.getGoodWorld)
				{
					spawnRate = (int)((float)spawnRate * 0.8f);
					maxSpawns = (int)((float)maxSpawns * 1.2f);
				}
				if (Main.GameModeInfo.IsJourneyMode)
				{
					CreativePowers.SpawnRateSliderPerPlayerPower power = CreativePowerManager.Instance.GetPower<CreativePowers.SpawnRateSliderPerPlayerPower>();
					if (power != null && power.GetIsUnlocked())
					{
						if (power.GetShouldDisableSpawnsFor(k))
						{
							continue;
						}
						if (power.GetRemappedSliderValueFor(k, out var num10))
						{
							spawnRate = (int)((float)spawnRate / num10);
							maxSpawns = (int)((float)maxSpawns * num10);
						}
					}
				}
				if ((Main.pumpkinMoon || Main.snowMoon) && (double)Main.player[k].position.Y < Main.worldSurface * 16.0)
				{
					maxSpawns = (int)((double)defaultMaxSpawns * (2.0 + 0.3 * (double)num4));
					spawnRate = 20;
				}
				if (DD2Event.Ongoing && Main.player[k].ZoneOldOneArmy)
				{
					maxSpawns = defaultMaxSpawns;
					spawnRate = defaultSpawnRate;
				}
				if (flag6)
				{
					maxSpawns = (int)((double)defaultMaxSpawns * (2.0 + 0.3 * (double)num4));
					spawnRate = 20;
				}
				if (Main.player[k].ZoneDungeon && !downedBoss3)
				{
					spawnRate = 10;
				}
				if (!flag6 && ((!Main.bloodMoon && !Main.pumpkinMoon && !Main.snowMoon) || Main.dayTime) && (!Main.eclipse || !Main.dayTime) && !Main.player[k].ZoneDungeon && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneMeteor && !Main.player[k].ZoneOldOneArmy)
				{
					if (Main.player[k].Center.Y / 16f > (float)Main.UnderworldLayer)
					{
						if (Main.player[k].townNPCs == 1f)
						{
							if (Main.rand.Next(2) == 0)
							{
								flag5 = true;
							}
							if (Main.rand.Next(10) == 0)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.5);
							}
							else
							{
								spawnRate = (int)((double)(float)spawnRate * 1.25);
							}
						}
						else if (Main.player[k].townNPCs == 2f)
						{
							if (Main.rand.Next(4) != 0)
							{
								flag5 = true;
							}
							if (Main.rand.Next(5) == 0)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.5);
							}
							else
							{
								spawnRate = (int)((double)(float)spawnRate * 1.5);
							}
						}
						else if (Main.player[k].townNPCs >= 3f)
						{
							if (Main.rand.Next(10) != 0)
							{
								flag5 = true;
							}
							if (Main.rand.Next(3) == 0)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.5);
							}
							else
							{
								spawnRate = (int)((float)spawnRate * 2f);
							}
						}
					}
					else if (Main.player[k].townNPCs == 1f)
					{
						flag5 = true;
						if (Main.player[k].ZoneGraveyard)
						{
							spawnRate = (int)((double)(float)spawnRate * 1.66);
							if (Main.rand.Next(9) == 1)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.6);
							}
						}
						else if (Main.rand.Next(3) == 1)
						{
							flag12 = true;
							maxSpawns = (int)((double)(float)maxSpawns * 0.6);
						}
						else
						{
							spawnRate = (int)((float)spawnRate * 2f);
						}
					}
					else if (Main.player[k].townNPCs == 2f)
					{
						flag5 = true;
						if (Main.player[k].ZoneGraveyard)
						{
							spawnRate = (int)((double)(float)spawnRate * 2.33);
							if (Main.rand.Next(6) == 1)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.6);
							}
						}
						else if (Main.rand.Next(3) != 0)
						{
							flag12 = true;
							maxSpawns = (int)((double)(float)maxSpawns * 0.6);
						}
						else
						{
							spawnRate = (int)((float)spawnRate * 3f);
						}
					}
					else if (Main.player[k].townNPCs >= 3f)
					{
						flag5 = true;
						if (Main.player[k].ZoneGraveyard)
						{
							spawnRate = (int)((float)spawnRate * 3f);
							if (Main.rand.Next(3) == 1)
							{
								flag12 = true;
								maxSpawns = (int)((double)(float)maxSpawns * 0.6);
							}
						}
						else
						{
							if (!Main.expertMode || Main.rand.Next(30) != 0)
							{
								flag12 = true;
							}
							maxSpawns = (int)((double)(float)maxSpawns * 0.6);
						}
					}
				}
				bool flag15 = false;
				if (Main.player[k].active && !Main.player[k].dead && Main.player[k].nearbyActiveNPCs < (float)maxSpawns && Main.rand.Next(spawnRate) == 0)
				{
					bool flag16 = Main.player[k].ZoneTowerNebula || Main.player[k].ZoneTowerSolar || Main.player[k].ZoneTowerStardust || Main.player[k].ZoneTowerVortex;
					spawnRangeX = (int)((double)(sWidth / 16) * 0.7);
					spawnRangeY = (int)((double)(sHeight / 16) * 0.7);
					safeRangeX = (int)((double)(sWidth / 16) * 0.52);
					safeRangeY = (int)((double)(sHeight / 16) * 0.52);
					if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1254 || Main.player[k].inventory[Main.player[k].selectedItem].type == 1299 || Main.player[k].scope)
					{
						float num11 = 1.5f;
						if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1254 && Main.player[k].scope)
						{
							num11 = 1.25f;
						}
						else if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1254)
						{
							num11 = 1.5f;
						}
						else if (Main.player[k].inventory[Main.player[k].selectedItem].type == 1299)
						{
							num11 = 1.5f;
						}
						else if (Main.player[k].scope)
						{
							num11 = 2f;
						}
						spawnRangeX += (int)((double)(sWidth / 16) * 0.5 / (double)num11);
						spawnRangeY += (int)((double)(sHeight / 16) * 0.5 / (double)num11);
						safeRangeX += (int)((double)(sWidth / 16) * 0.5 / (double)num11);
						safeRangeY += (int)((double)(sHeight / 16) * 0.5 / (double)num11);
					}
					int num12 = (int)(Main.player[k].position.X / 16f) - spawnRangeX;
					int num13 = (int)(Main.player[k].position.X / 16f) + spawnRangeX;
					int num14 = (int)(Main.player[k].position.Y / 16f) - spawnRangeY;
					int num15 = (int)(Main.player[k].position.Y / 16f) + spawnRangeY;
					int num16 = (int)(Main.player[k].position.X / 16f) - safeRangeX;
					int num17 = (int)(Main.player[k].position.X / 16f) + safeRangeX;
					int num18 = (int)(Main.player[k].position.Y / 16f) - safeRangeY;
					int num19 = (int)(Main.player[k].position.Y / 16f) + safeRangeY;
					if (num12 < 0)
					{
						num12 = 0;
					}
					if (num13 > Main.maxTilesX)
					{
						num13 = Main.maxTilesX;
					}
					if (num14 < 0)
					{
						num14 = 0;
					}
					if (num15 > Main.maxTilesY)
					{
						num15 = Main.maxTilesY;
					}
					for (int m = 0; m < 50; m++)
					{
						int num20 = Main.rand.Next(num12, num13);
						int num21 = Main.rand.Next(num14, num15);
						if (!Main.tile[num20, num21].nactive() || !Main.tileSolid[Main.tile[num20, num21].type])
						{
							if (!flag16 && Main.wallHouse[Main.tile[num20, num21].wall])
							{
								continue;
							}
							if (!flag6 && (double)num21 < Main.worldSurface * 0.34999999403953552 && !flag12 && ((double)num20 < (double)Main.maxTilesX * 0.45 || (double)num20 > (double)Main.maxTilesX * 0.55 || Main.hardMode))
							{
								num3 = Main.tile[num20, num21].type;
								num = num20;
								num2 = num21;
								flag2 = true;
								flag3 = true;
							}
							else if (!flag6 && (double)num21 < Main.worldSurface * 0.44999998807907104 && !flag12 && Main.hardMode && Main.rand.Next(10) == 0)
							{
								num3 = Main.tile[num20, num21].type;
								num = num20;
								num2 = num21;
								flag2 = true;
								flag3 = true;
							}
							else
							{
								for (int n = num21; n < Main.maxTilesY && n < num15; n++)
								{
									if (Main.tile[num20, n].nactive() && Main.tileSolid[Main.tile[num20, n].type])
									{
										if (num20 < num16 || num20 > num17 || n < num18 || n > num19)
										{
											num3 = Main.tile[num20, n].type;
											num = num20;
											num2 = n;
											flag2 = true;
										}
										break;
									}
								}
							}
							if (!flag3 && Main.player[k].afkCounter >= AFKTimeNeededForNoWorms)
							{
								flag5 = true;
							}
							if (flag2)
							{
								int num22 = num - spawnSpaceX / 2;
								int num23 = num + spawnSpaceX / 2;
								int num24 = num2 - spawnSpaceY;
								int num25 = num2;
								if (num22 < 0)
								{
									flag2 = false;
								}
								if (num23 > Main.maxTilesX)
								{
									flag2 = false;
								}
								if (num24 < 0)
								{
									flag2 = false;
								}
								if (num25 > Main.maxTilesY)
								{
									flag2 = false;
								}
								if (flag2)
								{
									for (int num26 = num22; num26 < num23; num26++)
									{
										for (int num27 = num24; num27 < num25; num27++)
										{
											if (Main.tile[num26, num27].nactive() && Main.tileSolid[Main.tile[num26, num27].type])
											{
												flag2 = false;
												break;
											}
											if (Main.tile[num26, num27].lava())
											{
												flag2 = false;
												break;
											}
										}
									}
								}
								if (num >= num16 && num <= num17)
								{
									flag15 = true;
								}
							}
						}
						if (flag2 || flag2)
						{
							break;
						}
					}
				}
				if (flag2)
				{
					Rectangle rectangle = new Rectangle(num * 16, num2 * 16, 16, 16);
					for (int num28 = 0; num28 < 255; num28++)
					{
						if (Main.player[num28].active)
						{
							Rectangle rectangle2 = new Rectangle((int)(Main.player[num28].position.X + (float)(Main.player[num28].width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(Main.player[num28].position.Y + (float)(Main.player[num28].height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
							if (rectangle.Intersects(rectangle2))
							{
								flag2 = false;
							}
						}
					}
				}
				if (flag2)
				{
					if (Main.player[k].ZoneDungeon && (!Main.tileDungeon[Main.tile[num, num2].type] || Main.tile[num, num2 - 1].wall == 0))
					{
						flag2 = false;
					}
					if (Main.tile[num, num2 - 1].liquid > 0 && Main.tile[num, num2 - 2].liquid > 0 && !Main.tile[num, num2 - 1].lava())
					{
						if (Main.tile[num, num2 - 1].honey())
						{
							flag8 = true;
						}
						else
						{
							flag7 = true;
						}
					}
					int num29 = (int)Main.player[k].Center.X / 16;
					int num30 = (int)(Main.player[k].Bottom.Y + 8f) / 16;
					if (Main.tile[num, num2].type == 367)
					{
						flag10 = true;
					}
					else if (Main.tile[num, num2].type == 368)
					{
						flag9 = true;
					}
					else if (Main.tile[num29, num30].type == 367)
					{
						flag10 = true;
					}
					else if (Main.tile[num29, num30].type == 368)
					{
						flag9 = true;
					}
					else
					{
						int num31 = Main.rand.Next(20, 31);
						int num32 = Main.rand.Next(1, 4);
						if (num - num31 < 0)
						{
							num31 = num;
						}
						if (num2 - num31 < 0)
						{
							num31 = num2;
						}
						if (num + num31 >= Main.maxTilesX)
						{
							num31 = Main.maxTilesX - num - 1;
						}
						if (num2 + num31 >= Main.maxTilesY)
						{
							num31 = Main.maxTilesY - num2 - 1;
						}
						for (int num33 = num - num31; num33 <= num + num31; num33 += num32)
						{
							int num34 = Main.rand.Next(1, 4);
							for (int num35 = num2 - num31; num35 <= num2 + num31; num35 += num34)
							{
								if (Main.tile[num33, num35].type == 367)
								{
									flag10 = true;
								}
								if (Main.tile[num33, num35].type == 368)
								{
									flag9 = true;
								}
							}
						}
						num31 = Main.rand.Next(30, 61);
						num32 = Main.rand.Next(3, 7);
						if (num29 - num31 < 0)
						{
							num31 = num29;
						}
						if (num30 - num31 < 0)
						{
							num31 = num30;
						}
						if (num29 + num31 >= Main.maxTilesX)
						{
							num31 = Main.maxTilesX - num29 - 2;
						}
						if (num30 + num31 >= Main.maxTilesY)
						{
							num31 = Main.maxTilesY - num30 - 2;
						}
						for (int num36 = num29 - num31; num36 <= num29 + num31; num36 += num32)
						{
							int num37 = Main.rand.Next(3, 7);
							for (int num38 = num30 - num31; num38 <= num30 + num31; num38 += num37)
							{
								if (Main.tile[num36, num38].type == 367)
								{
									flag10 = true;
								}
								if (Main.tile[num36, num38].type == 368)
								{
									flag9 = true;
								}
							}
						}
					}
					if (flag8)
					{
						flag2 = false;
					}
					if ((num3 == 477 || num3 == 492) && !Main.bloodMoon && !Main.eclipse && Main.invasionType <= 0 && !Main.pumpkinMoon && !Main.snowMoon && !Main.slimeRain && Main.rand.Next(100) < 10)
					{
						flag2 = false;
					}
				}
				if (!flag2)
				{
					continue;
				}
				if ((double)num2 > Main.rockLayer && num2 < Main.UnderworldLayer && !Main.player[k].ZoneDungeon && !flag6)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num39 = Main.rand.Next(5, 15);
						if (num - num39 >= 0 && num + num39 < Main.maxTilesX)
						{
							for (int num40 = num - num39; num40 < num + num39; num40++)
							{
								for (int num41 = num2 - num39; num41 < num2 + num39; num41++)
								{
									if (Main.tile[num40, num41].wall == 62)
									{
										flag11 = true;
									}
								}
							}
						}
					}
					else
					{
						int num42 = (int)Main.player[k].position.X / 16;
						int num43 = (int)Main.player[k].position.Y / 16;
						if (Main.tile[num42, num43].wall == 62)
						{
							flag11 = true;
						}
					}
				}
				if ((double)num2 < Main.rockLayer && num2 > 200 && !Main.player[k].ZoneDungeon && !flag6)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num44 = Main.rand.Next(5, 15);
						if (num - num44 >= 0 && num + num44 < Main.maxTilesX)
						{
							for (int num45 = num - num44; num45 < num + num44; num45++)
							{
								for (int num46 = num2 - num44; num46 < num2 + num44; num46++)
								{
									if (WallID.Sets.Conversion.Sandstone[Main.tile[num45, num46].wall] || WallID.Sets.Conversion.HardenedSand[Main.tile[num45, num46].wall])
									{
										flag13 = true;
									}
								}
							}
						}
					}
					else
					{
						int num47 = (int)Main.player[k].position.X / 16;
						int num48 = (int)Main.player[k].position.Y / 16;
						if (WallID.Sets.Conversion.Sandstone[Main.tile[num47, num48].wall] || WallID.Sets.Conversion.HardenedSand[Main.tile[num47, num48].wall])
						{
							flag13 = true;
						}
					}
				}
				flag2 = false;
				int spawnTileType = Main.tile[num, num2].type;
				int num49 = Main.tile[num, num2 - 1].wall;
				if (Main.tile[num, num2 - 2].wall == 244 || Main.tile[num, num2].wall == 244)
				{
					num49 = 244;
				}
				bool flag17 = (float)new Point(num8 - num, num9 - num2).X * Main.windSpeedTarget > 0f;
				spawnTileType = SpawnNPC_TryFindingProperGroundTileType(spawnTileType, num, num2);
				int newNPC = 200;
				int cattailX;
				int cattailY;
				if (Main.player[k].ZoneTowerNebula)
				{
					bool flag18 = true;
					int num50 = 0;
					while (flag18)
					{
						num50 = Utils.SelectRandom<int>(Main.rand, 424, 424, 424, 423, 423, 423, 421, 421, 421, 421, 421, 420);
						flag18 = false;
						if (num50 == 424 && CountNPCS(num50) >= 2)
						{
							flag18 = true;
						}
						if (num50 == 423 && CountNPCS(num50) >= 3)
						{
							flag18 = true;
						}
						if (num50 == 420 && CountNPCS(num50) >= 2)
						{
							flag18 = true;
						}
					}
					if (num50 != 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, num50, 1);
					}
				}
				else if (Main.player[k].ZoneTowerVortex)
				{
					bool flag19 = true;
					int num51 = 0;
					while (flag19)
					{
						num51 = Utils.SelectRandom<int>(Main.rand, 429, 429, 429, 429, 427, 427, 425, 425, 426);
						flag19 = false;
						if (num51 == 425 && CountNPCS(num51) >= 3)
						{
							flag19 = true;
						}
						if (num51 == 426 && CountNPCS(num51) >= 3)
						{
							flag19 = true;
						}
						if (num51 == 429 && CountNPCS(num51) >= 4)
						{
							flag19 = true;
						}
					}
					if (num51 != 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, num51, 1);
					}
				}
				else if (Main.player[k].ZoneTowerStardust)
				{
					int num52 = Utils.SelectRandom<int>(Main.rand, 411, 411, 411, 409, 409, 407, 402, 405);
					if (num52 != 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, num52, 1);
					}
				}
				else if (Main.player[k].ZoneTowerSolar)
				{
					bool flag20 = true;
					int num53 = 0;
					while (flag20)
					{
						num53 = Utils.SelectRandom<int>(Main.rand, 518, 419, 418, 412, 417, 416, 415);
						flag20 = false;
						if (num53 == 415 && CountNPCS(num53) >= 2)
						{
							flag20 = true;
						}
						if (num53 == 416 && CountNPCS(num53) >= 1)
						{
							flag20 = true;
						}
						if (num53 == 518 && CountNPCS(num53) >= 2)
						{
							flag20 = true;
						}
						if (num53 == 412 && CountNPCS(num53) >= 1)
						{
							flag20 = true;
						}
					}
					if (num53 != 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, num53, 1);
					}
				}
				else if (flag3)
				{
					int maxValue = 8;
					int maxValue2 = 30;
					bool flag21 = (float)Math.Abs(num - Main.maxTilesX / 2) / (float)(Main.maxTilesX / 2) > 0.33f && (Main.wallLight[Main.tile[num8, num9].wall] || Main.tile[num8, num9].wall == 73);
					if (flag21 && AnyDanger())
					{
						flag21 = false;
					}
					if (Main.player[k].ZoneWaterCandle)
					{
						maxValue = 3;
						maxValue2 = 10;
					}
					if (flag6 && Main.invasionType == 4)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 388);
					}
					else if (flag21 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(maxValue) == 0) || Main.rand.Next(maxValue2) == 0) && !AnyNPCs(399))
					{
						NewNPC(num * 16 + 8, num2 * 16, 399);
					}
					else if (flag21 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(maxValue) == 0) || Main.rand.Next(maxValue2) == 0) && !AnyNPCs(399) && (Main.player[k].inventory[Main.player[k].selectedItem].type == 148 || Main.player[k].ZoneWaterCandle))
					{
						NewNPC(num * 16 + 8, num2 * 16, 399);
					}
					else if (Main.hardMode && !AnyNPCs(87) && !flag5 && Main.rand.Next(10) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 87, 1);
					}
					else if (Main.hardMode && !AnyNPCs(87) && !flag5 && Main.rand.Next(10) == 0 && (Main.player[k].inventory[Main.player[k].selectedItem].type == 148 || Main.player[k].ZoneWaterCandle))
					{
						NewNPC(num * 16 + 8, num2 * 16, 87, 1);
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 48);
					}
				}
				else if (flag6)
				{
					if (Main.invasionType == 1)
					{
						if (Main.hardMode && !AnyNPCs(471) && Main.rand.Next(30) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 471);
						}
						else if (Main.rand.Next(9) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 29);
						}
						else if (Main.rand.Next(5) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 26);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 111);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 27);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 28);
						}
					}
					else if (Main.invasionType == 2)
					{
						if (Main.rand.Next(7) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 145);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 143);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 144);
						}
					}
					else if (Main.invasionType == 3)
					{
						if (Main.invasionSize < Main.invasionSizeStart / 2 && Main.rand.Next(20) == 0 && !AnyNPCs(491) && !Collision.SolidTiles(num - 20, num + 20, num2 - 40, num2 - 10))
						{
							NewNPC(num * 16 + 8, (num2 - 10) * 16, 491);
						}
						else if (Main.rand.Next(30) == 0 && !AnyNPCs(216))
						{
							NewNPC(num * 16 + 8, num2 * 16, 216);
						}
						else if (Main.rand.Next(11) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 215);
						}
						else if (Main.rand.Next(9) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 252);
						}
						else if (Main.rand.Next(7) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 214);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 213);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 212);
						}
					}
					else if (Main.invasionType == 4)
					{
						int num54 = 0;
						int num55 = Main.rand.Next(7);
						bool flag22 = (float)(Main.invasionSizeStart - Main.invasionSize) / (float)Main.invasionSizeStart >= 0.3f && !AnyNPCs(395);
						if (Main.rand.Next(45) == 0 && flag22)
						{
							num54 = 395;
						}
						else if (num55 >= 6)
						{
							if (Main.rand.Next(20) == 0 && flag22)
							{
								num54 = 395;
							}
							else
							{
								int num56 = Main.rand.Next(2);
								if (num56 == 0)
								{
									num54 = 390;
								}
								if (num56 == 1)
								{
									num54 = 386;
								}
							}
						}
						else if (num55 >= 4)
						{
							int num57 = Main.rand.Next(5);
							num54 = ((num57 < 2) ? 382 : ((num57 >= 4) ? 388 : 381));
						}
						else
						{
							int num58 = Main.rand.Next(4);
							if (num58 == 3)
							{
								if (!AnyNPCs(520))
								{
									num54 = 520;
								}
								else
								{
									num58 = Main.rand.Next(3);
								}
							}
							if (num58 == 0)
							{
								num54 = 385;
							}
							if (num58 == 1)
							{
								num54 = 389;
							}
							if (num58 == 2)
							{
								num54 = 383;
							}
						}
						if (num54 != 0)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, num54, 1);
						}
					}
				}
				else if (num49 == 244)
				{
					if (flag7)
					{
						NewNPC(num * 16 + 8, num2 * 16, 55);
					}
					else if ((double)num2 > Main.worldSurface)
					{
						if (Main.rand.Next(3) == 0)
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 447);
							}
							else
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 300);
							}
						}
						else if (Main.rand.Next(2) == 0)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 359);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 448);
						}
						else if (Main.rand.Next(3) != 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 357);
						}
					}
					else if (Main.player[k].RollLuck(2) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 624);
						Main.npc[newNPC].timeLeft *= 10;
					}
					else if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 443);
					}
					else if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 539);
					}
					else if (Main.halloween && Main.rand.Next(3) != 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 303);
					}
					else if (Main.xMas && Main.rand.Next(3) != 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 337);
					}
					else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 540);
					}
					else if (Main.rand.Next(3) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, Utils.SelectRandom(Main.rand, new short[2]
						{
							299,
							538
						}));
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 46);
					}
				}
				else if (!savedBartender && DD2Event.ReadyToFindBartender && !AnyNPCs(579) && Main.rand.Next(80) == 0 && !flag7)
				{
					NewNPC(num * 16 + 8, num2 * 16, 579);
				}
				else if (Main.tile[num, num2].wall == 62 || flag11)
				{
					if (Main.tile[num, num2].wall == 62 && Main.rand.Next(8) == 0 && !flag7 && (double)num2 >= Main.rockLayer && num2 < Main.maxTilesY - 210 && !savedStylist && !AnyNPCs(354))
					{
						NewNPC(num * 16 + 8, num2 * 16, 354);
					}
					else if (Main.hardMode && Main.rand.Next(10) != 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 163);
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 164);
					}
				}
				else if ((WallID.Sets.Conversion.HardenedSand[Main.tile[num, num2].wall] || WallID.Sets.Conversion.Sandstone[Main.tile[num, num2].wall] || flag13) && WorldGen.checkUnderground(num, num2) && Spawning_FlyingAntlionCheck(num, num2))
				{
					float num59 = 1f;
					if ((double)num2 > (Main.rockLayer * 2.0 + (double)Main.maxTilesY) / 3.0)
					{
						num59 *= 0.5f;
					}
					else if ((double)num2 > Main.rockLayer)
					{
						num59 *= 0.75f;
					}
					if (Main.rand.Next(20) == 0 && !flag7 && !savedGolfer && !AnyNPCs(589))
					{
						NewNPC(num * 16 + 8, num2 * 16, 589);
					}
					else if (Main.hardMode && Main.rand.Next((int)(33f * num59)) == 0 && !flag5 && (double)num2 > Main.worldSurface + 100.0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 510);
					}
					else if (Main.rand.Next((int)(33f * num59)) == 0 && !flag5 && (double)num2 > Main.worldSurface + 100.0 && CountNPCS(513) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 513);
					}
					else if (Main.hardMode && Main.rand.Next(5) != 0)
					{
						List<int> list = new List<int>();
						if (Main.player[k].ZoneCorrupt)
						{
							list.Add(525);
							list.Add(525);
						}
						if (Main.player[k].ZoneCrimson)
						{
							list.Add(526);
							list.Add(526);
						}
						if (Main.player[k].ZoneHallow)
						{
							list.Add(527);
							list.Add(527);
						}
						if (list.Count == 0)
						{
							list.Add(524);
							list.Add(524);
						}
						if (Main.player[k].ZoneCorrupt || Main.player[k].ZoneCrimson)
						{
							list.Add(533);
							list.Add(529);
						}
						else
						{
							list.Add(530);
							list.Add(528);
						}
						list.Add(532);
						int num60 = Utils.SelectRandom(Main.rand, list.ToArray());
						NewNPC(num * 16 + 8, num2 * 16, num60);
						list.Clear();
					}
					else
					{
						int num61 = Utils.SelectRandom<int>(Main.rand, 69, 580, 580, 580, 581);
						if (Main.rand.Next(15) == 0)
						{
							num61 = 537;
						}
						else if (Main.rand.Next(10) == 0)
						{
							switch (num61)
							{
							case 580:
								num61 = 508;
								break;
							case 581:
								num61 = 509;
								break;
							}
						}
						NewNPC(num * 16 + 8, num2 * 16, num61);
					}
				}
				else if (Main.hardMode && flag7 && Main.player[k].ZoneJungle && Main.rand.Next(3) != 0)
				{
					NewNPC(num * 16 + 8, num2 * 16, 157);
				}
				else if (Main.hardMode && flag7 && Main.player[k].ZoneCrimson && Main.rand.Next(3) != 0)
				{
					NewNPC(num * 16 + 8, num2 * 16, 242);
				}
				else if (Main.hardMode && flag7 && Main.player[k].ZoneCrimson && Main.rand.Next(3) != 0)
				{
					NewNPC(num * 16 + 8, num2 * 16, 241);
				}
				else if ((!flag12 || (!savedAngler && !AnyNPCs(376))) && flag7 && (((num < WorldGen.oceanDistance || num > Main.maxTilesX - WorldGen.oceanDistance) && Main.tileSand[spawnTileType] && (double)num2 < Main.rockLayer) || (num3 == 53 && WorldGen.oceanDepths(num, num2))))
				{
					bool flag23 = false;
					if (!savedAngler && !AnyNPCs(376) && (double)num2 < Main.worldSurface - 10.0)
					{
						int num62 = -1;
						for (int num63 = num2 - 1; num63 > num2 - 50; num63--)
						{
							if (Main.tile[num, num63].liquid == 0 && !WorldGen.SolidTile(num, num63) && !WorldGen.SolidTile(num, num63 + 1) && !WorldGen.SolidTile(num, num63 + 2))
							{
								num62 = num63 + 2;
								break;
							}
						}
						if (num62 > num2)
						{
							num62 = num2;
						}
						if (num62 > 0 && !flag15)
						{
							NewNPC(num * 16 + 8, num62 * 16, 376);
							flag23 = true;
						}
					}
					if (!flag23)
					{
						int num64 = -1;
						int num65 = -1;
						if ((double)num2 < Main.worldSurface && num2 > 50)
						{
							for (int num66 = num2 - 1; num66 > num2 - 50; num66--)
							{
								if (Main.tile[num, num66].liquid == 0 && !WorldGen.SolidTile(num, num66) && !WorldGen.SolidTile(num, num66 + 1) && !WorldGen.SolidTile(num, num66 + 2))
								{
									num64 = num66 + 2;
									if (!WorldGen.SolidTile(num, num64 + 1) && !WorldGen.SolidTile(num, num64 + 2))
									{
										num65 = num64 + 2;
									}
									break;
								}
							}
							if (num64 > num2)
							{
								num64 = num2;
							}
							if (num65 > num2)
							{
								num65 = num2;
							}
						}
						if (num64 > 0 && !flag15 && Main.rand.Next(10) == 0)
						{
							NewNPC(num * 16 + 8, num64 * 16, 602);
						}
						else if (Main.rand.Next(10) == 0)
						{
							int num67 = Main.rand.Next(3);
							if (num67 == 0 && num64 > 0)
							{
								NewNPC(num * 16 + 8, num64 * 16, 625);
							}
							else if (num67 == 1 && num65 > 0)
							{
								NewNPC(num * 16 + 8, num65 * 16, 615);
							}
							else if (num67 == 2 && num65 > 0)
							{
								if (Main.player[k].RollLuck(goldCritterChance) == 0)
								{
									NewNPC(num * 16 + 8, num65 * 16, 627);
								}
								else
								{
									NewNPC(num * 16 + 8, num65 * 16, 626);
								}
							}
						}
						else if (Main.rand.Next(40) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 220);
						}
						else if (Main.rand.Next(18) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 221);
						}
						else if (Main.rand.Next(8) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 65);
						}
						else if (Main.rand.Next(3) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 67);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 64);
						}
					}
				}
				else if (!flag7 && !savedAngler && !AnyNPCs(376) && (num < WorldGen.beachDistance || num > Main.maxTilesX - WorldGen.beachDistance) && Main.tileSand[spawnTileType] && (double)num2 < Main.worldSurface)
				{
					NewNPC(num * 16 + 8, num2 * 16, 376);
				}
				else if (!flag12 && flag7 && (((double)num2 > Main.rockLayer && Main.rand.Next(2) == 0) || spawnTileType == 60))
				{
					bool flag24 = false;
					if (spawnTileType == 60 && (double)num2 < Main.worldSurface && num2 > 50 && Main.rand.Next(3) == 0 && Main.dayTime)
					{
						int num68 = -1;
						for (int num69 = num2 - 1; num69 > num2 - 50; num69--)
						{
							if (Main.tile[num, num69].liquid == 0 && !WorldGen.SolidTile(num, num69) && !WorldGen.SolidTile(num, num69 + 1) && !WorldGen.SolidTile(num, num69 + 2))
							{
								num68 = num69 + 2;
								break;
							}
						}
						if (num68 > num2)
						{
							num68 = num2;
						}
						if (num68 > 0 && !flag15)
						{
							flag24 = true;
							if (Main.rand.Next(4) == 0)
							{
								flag24 = true;
								NewNPC(num * 16 + 8, num68 * 16, 617);
							}
							else if (!flag && Main.cloudAlpha == 0f)
							{
								flag24 = true;
								int num70 = Main.rand.Next(1, 4);
								for (int num71 = 0; num71 < num70; num71++)
								{
									if (Main.player[k].RollLuck(goldCritterChance) == 0)
									{
										NewNPC(num * 16 + 8 + Main.rand.Next(-16, 17), num68 * 16 - 16, 613);
									}
									else
									{
										NewNPC(num * 16 + 8 + Main.rand.Next(-16, 17), num68 * 16 - 16, 612);
									}
								}
							}
						}
					}
					if (!flag24)
					{
						if (Main.hardMode && Main.rand.Next(3) > 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 102);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 58);
						}
					}
				}
				else if (!flag12 && flag7 && (double)num2 > Main.worldSurface && Main.rand.Next(3) == 0)
				{
					if (Main.hardMode && Main.rand.Next(3) > 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 103);
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 63);
					}
				}
				else if (flag7 && Main.rand.Next(4) == 0 && ((num > WorldGen.oceanDistance && num < Main.maxTilesX - WorldGen.oceanDistance) || (double)num2 > Main.worldSurface + 50.0))
				{
					if (Main.player[k].ZoneCorrupt)
					{
						NewNPC(num * 16 + 8, num2 * 16, 57);
					}
					else if ((double)num2 < Main.worldSurface && num2 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
					{
						int num72 = -1;
						for (int num73 = num2 - 1; num73 > num2 - 50; num73--)
						{
							if (Main.tile[num, num73].liquid == 0 && !WorldGen.SolidTile(num, num73) && !WorldGen.SolidTile(num, num73 + 1) && !WorldGen.SolidTile(num, num73 + 2))
							{
								num72 = num73 + 2;
								break;
							}
						}
						if (num72 > num2)
						{
							num72 = num2;
						}
						if (num72 > 0 && !flag15)
						{
							if (Main.rand.Next(5) == 0 && (num3 == 2 || num3 == 477))
							{
								NewNPC(num * 16 + 8, num72 * 16, 616);
							}
							else if (num3 == 53)
							{
								if (Main.rand.Next(2) == 0 && !flag && Main.cloudAlpha == 0f)
								{
									int num74 = Main.rand.Next(1, 4);
									for (int num75 = 0; num75 < num74; num75++)
									{
										if (Main.player[k].RollLuck(goldCritterChance) == 0)
										{
											NewNPC(num * 16 + 8 + Main.rand.Next(-16, 17), num72 * 16 - 16, 613);
										}
										else
										{
											NewNPC(num * 16 + 8 + Main.rand.Next(-16, 17), num72 * 16 - 16, 612);
										}
									}
								}
								else
								{
									NewNPC(num * 16 + 8, num72 * 16, 608);
								}
							}
							else if (Main.rand.Next(2) == 0)
							{
								NewNPC(num * 16 + 8, num72 * 16, 362);
							}
							else
							{
								NewNPC(num * 16 + 8, num72 * 16, 364);
							}
						}
						else if (num3 == 53)
						{
							NewNPC(num * 16 + 8, num72 * 16, 607);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 592);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 55);
						}
					}
					else if (num3 == 53)
					{
						NewNPC(num * 16 + 8, num2 * 16, 607);
					}
					else if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 592);
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 55);
					}
				}
				else if (downedGoblins && Main.player[k].RollLuck(20) == 0 && !flag7 && (double)num2 >= Main.rockLayer && num2 < Main.maxTilesY - 210 && !savedGoblin && !AnyNPCs(105))
				{
					NewNPC(num * 16 + 8, num2 * 16, 105);
				}
				else if (Main.hardMode && Main.player[k].RollLuck(20) == 0 && !flag7 && (double)num2 >= Main.rockLayer && num2 < Main.maxTilesY - 210 && !savedWizard && !AnyNPCs(106))
				{
					NewNPC(num * 16 + 8, num2 * 16, 106);
				}
				else if (flag12)
				{
					if (Main.player[k].ZoneGraveyard)
					{
						if (!flag7)
						{
							if (Main.rand.Next(2) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 606);
							}
							else
							{
								NewNPC(num * 16 + 8, num2 * 16, 610);
							}
						}
					}
					else if ((double)num2 <= Main.worldSurface && (num < WorldGen.beachDistance || num > Main.maxTilesX - WorldGen.beachDistance))
					{
						if (flag7)
						{
							int num76 = -1;
							int num77 = -1;
							if ((double)num2 < Main.worldSurface && num2 > 50)
							{
								for (int num78 = num2 - 1; num78 > num2 - 50; num78--)
								{
									if (Main.tile[num, num78].liquid == 0 && !WorldGen.SolidTile(num, num78) && !WorldGen.SolidTile(num, num78 + 1) && !WorldGen.SolidTile(num, num78 + 2))
									{
										num76 = num78 + 2;
										if (!WorldGen.SolidTile(num, num76 + 1) && !WorldGen.SolidTile(num, num76 + 2))
										{
											num77 = num76 + 2;
										}
										break;
									}
								}
								if (num76 > num2)
								{
									num76 = num2;
								}
								if (num77 > num2)
								{
									num77 = num2;
								}
							}
							if (Main.rand.Next(2) == 0)
							{
								int num79 = Main.rand.Next(3);
								if (num79 == 0 && num76 > 0)
								{
									NewNPC(num * 16 + 8, num76 * 16, 625);
								}
								else if (num79 == 1 && num77 > 0)
								{
									NewNPC(num * 16 + 8, num77 * 16, 615);
								}
								else if (num79 == 2 && num77 > 0)
								{
									if (Main.player[k].RollLuck(goldCritterChance) == 0)
									{
										NewNPC(num * 16 + 8, num77 * 16, 627);
									}
									else
									{
										NewNPC(num * 16 + 8, num77 * 16, 626);
									}
								}
							}
							else if (num76 > 0 && !flag15)
							{
								NewNPC(num * 16 + 8, num76 * 16, 602);
							}
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 602);
						}
					}
					else if ((spawnTileType == 2 || spawnTileType == 477 || spawnTileType == 53) && !tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(2) == 0 && (double)num2 <= Main.worldSurface && FindCattailTop(num, num2, out cattailX, out cattailY))
					{
						if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(cattailX * 16 + 8, cattailY * 16, 601);
						}
						else
						{
							NewNPC(cattailX * 16 + 8, cattailY * 16, RollDragonflyType(spawnTileType));
						}
						if (Main.rand.Next(3) == 0)
						{
							NewNPC(cattailX * 16 + 8 - 16, cattailY * 16, RollDragonflyType(spawnTileType));
						}
						if (Main.rand.Next(3) == 0)
						{
							NewNPC(cattailX * 16 + 8 + 16, cattailY * 16, RollDragonflyType(spawnTileType));
						}
					}
					else if (flag7)
					{
						if ((double)num2 < Main.worldSurface && num2 > 50 && Main.rand.Next(3) != 0 && Main.dayTime)
						{
							int num80 = -1;
							for (int num81 = num2 - 1; num81 > num2 - 50; num81--)
							{
								if (Main.tile[num, num81].liquid == 0 && !WorldGen.SolidTile(num, num81) && !WorldGen.SolidTile(num, num81 + 1) && !WorldGen.SolidTile(num, num81 + 2))
								{
									num80 = num81 + 2;
									break;
								}
							}
							if (num80 > num2)
							{
								num80 = num2;
							}
							if (num80 > 0 && !flag15)
							{
								switch (num3)
								{
								case 60:
									if (Main.rand.Next(2) == 0 && !flag && Main.cloudAlpha == 0f)
									{
										int num84 = Main.rand.Next(1, 4);
										for (int num85 = 0; num85 < num84; num85++)
										{
											if (Main.player[k].RollLuck(goldCritterChance) == 0)
											{
												NewNPC(num * 16 + 8 + Main.rand.Next(-16, 17), num80 * 16 - 16, 613);
											}
											else
											{
												NewNPC(num * 16 + 8 + Main.rand.Next(-16, 17), num80 * 16 - 16, 612);
											}
										}
									}
									else
									{
										NewNPC(num * 16 + 8, num80 * 16, 617);
									}
									break;
								case 53:
									if (Main.rand.Next(2) == 0 && !flag && Main.cloudAlpha == 0f)
									{
										int num82 = Main.rand.Next(1, 4);
										for (int num83 = 0; num83 < num82; num83++)
										{
											if (Main.player[k].RollLuck(goldCritterChance) == 0)
											{
												NewNPC(num * 16 + 8 + Main.rand.Next(-16, 17), num80 * 16 - 16, 613);
											}
											else
											{
												NewNPC(num * 16 + 8 + Main.rand.Next(-16, 17), num80 * 16 - 16, 612);
											}
										}
									}
									else
									{
										NewNPC(num * 16 + 8, num80 * 16, 608);
									}
									break;
								default:
									if (Main.rand.Next(5) == 0 && (num3 == 2 || num3 == 477))
									{
										NewNPC(num * 16 + 8, num80 * 16, 616);
									}
									else if (Main.rand.Next(2) == 0)
									{
										NewNPC(num * 16 + 8, num80 * 16, 362);
									}
									else
									{
										NewNPC(num * 16 + 8, num80 * 16, 364);
									}
									break;
								}
							}
							else if (num3 == 53)
							{
								NewNPC(num * 16 + 8, num2 * 16, 607);
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 592);
							}
							else
							{
								NewNPC(num * 16 + 8, num2 * 16, 55);
							}
						}
						else if (num3 == 53)
						{
							NewNPC(num * 16 + 8, num2 * 16, 607);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 592);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 55);
						}
					}
					else if (spawnTileType == 147 || spawnTileType == 161)
					{
						if (Main.rand.Next(2) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 148);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 149);
						}
					}
					else if (spawnTileType == 60)
					{
						if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 445);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 361);
						}
					}
					else if (spawnTileType == 53)
					{
						NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(366, 368));
					}
					else
					{
						if (spawnTileType != 2 && spawnTileType != 477 && spawnTileType != 109 && spawnTileType != 492 && !((double)num2 > Main.worldSurface))
						{
							break;
						}
						bool flag25 = (double)num2 <= Main.worldSurface;
						if (Main.raining && num2 <= Main.UnderworldLayer)
						{
							if ((double)num2 >= Main.rockLayer && Main.rand.Next(5) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(639, 646));
							}
							else if ((double)num2 >= Main.rockLayer && Main.rand.Next(5) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(646, 653));
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 448);
							}
							else if (Main.rand.Next(3) != 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 357);
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 593);
							}
							else
							{
								NewNPC(num * 16 + 8, num2 * 16, 230);
							}
						}
						else if (!Main.dayTime && Main.numClouds <= 55 && Main.cloudBGActive == 0f && Star.starfallBoost > 3f && flag25 && Main.player[k].RollLuck(2) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 484);
						}
						else if (!tooWindyForButterflies && !Main.dayTime && Main.rand.Next(fireFlyFriendly) == 0 && flag25)
						{
							int num86 = 355;
							if (spawnTileType == 109)
							{
								num86 = 358;
							}
							NewNPC(num * 16 + 8, num2 * 16, num86);
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(num * 16 + 8 - 16, num2 * 16, num86);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(num * 16 + 8 + 16, num2 * 16, num86);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16 - 16, num86);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16 + 16, num86);
							}
						}
						else if (Main.cloudAlpha == 0f && !Main.dayTime && Main.rand.Next(5) == 0 && flag25)
						{
							NewNPC(num * 16 + 8, num2 * 16, 611);
						}
						else if (Main.dayTime && Main.time < 18000.0 && Main.rand.Next(3) != 0 && flag25)
						{
							int num87 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 442);
							}
							else
							{
								switch (num87)
								{
								case 0:
									NewNPC(num * 16 + 8, num2 * 16, 297);
									break;
								case 1:
									NewNPC(num * 16 + 8, num2 * 16, 298);
									break;
								default:
									NewNPC(num * 16 + 8, num2 * 16, 74);
									break;
								}
							}
						}
						else if (!tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance) == 0 && flag25)
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 444);
							}
							else
							{
								NewNPC(num * 16 + 8, num2 * 16, 356);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(num * 16 + 8 - 16, num2 * 16, 356);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(num * 16 + 8 + 16, num2 * 16, 356);
							}
						}
						else if (tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance / 2) == 0 && flag25)
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 605);
							}
							else
							{
								NewNPC(num * 16 + 8, num2 * 16, 604);
							}
							if (Main.rand.Next(3) != 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 604);
							}
							if (Main.rand.Next(2) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 604);
							}
							if (Main.rand.Next(3) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 604);
							}
							if (Main.rand.Next(4) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 604);
							}
						}
						else if (Main.rand.Next(2) == 0 && flag25)
						{
							int num88 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 442);
							}
							else
							{
								switch (num88)
								{
								case 0:
									NewNPC(num * 16 + 8, num2 * 16, 297);
									break;
								case 1:
									NewNPC(num * 16 + 8, num2 * 16, 298);
									break;
								default:
									NewNPC(num * 16 + 8, num2 * 16, 74);
									break;
								}
							}
						}
						else if (num2 > Main.UnderworldLayer)
						{
							newNPC = SpawnNPC_SpawnLavaBaitCritters(num, num2);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 443);
						}
						else if (Main.player[k].RollLuck(goldCritterChance) == 0 && flag25)
						{
							NewNPC(num * 16 + 8, num2 * 16, 539);
						}
						else if (Main.halloween && Main.rand.Next(3) != 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 303);
						}
						else if (Main.xMas && Main.rand.Next(3) != 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 337);
						}
						else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 540);
						}
						else if (Main.rand.Next(3) == 0)
						{
							if ((double)num2 >= Main.rockLayer && num2 <= Main.UnderworldLayer)
							{
								if (Main.rand.Next(5) == 0)
								{
									NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(639, 646));
								}
							}
							else if (flag25)
							{
								NewNPC(num * 16 + 8, num2 * 16, Utils.SelectRandom(Main.rand, new short[2]
								{
									299,
									538
								}));
							}
						}
						else if ((double)num2 >= Main.rockLayer && num2 <= Main.UnderworldLayer)
						{
							if (Main.rand.Next(5) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(646, 653));
							}
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 46);
						}
					}
				}
				else if (Main.player[k].ZoneDungeon)
				{
					int num89 = 0;
					if (Main.tile[num, num2].wall == 94 || Main.tile[num, num2].wall == 96 || Main.tile[num, num2].wall == 98)
					{
						num89 = 1;
					}
					if (Main.tile[num, num2].wall == 95 || Main.tile[num, num2].wall == 97 || Main.tile[num, num2].wall == 99)
					{
						num89 = 2;
					}
					if (Main.player[k].RollLuck(7) == 0)
					{
						num89 = Main.rand.Next(3);
					}
					bool flag26 = !downedBoss3;
					if (Main.drunkWorld && Main.player[k].position.Y / 16f < (float)(Main.dungeonY + 40))
					{
						flag26 = false;
					}
					if (flag26)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 68);
					}
					else if (!savedMech && Main.rand.Next(5) == 0 && !flag7 && !AnyNPCs(123) && (double)num2 > Main.rockLayer)
					{
						NewNPC(num * 16 + 8, num2 * 16, 123);
					}
					else if (flag14 && Main.rand.Next(30) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 287);
					}
					else if (flag14 && num89 == 0 && Main.rand.Next(15) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 293);
					}
					else if (flag14 && num89 == 1 && Main.rand.Next(15) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 291);
					}
					else if (flag14 && num89 == 2 && Main.rand.Next(15) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 292);
					}
					else if (flag14 && !AnyNPCs(290) && num89 == 0 && Main.rand.Next(35) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 290);
					}
					else if (flag14 && (num89 == 1 || num89 == 2) && Main.rand.Next(30) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 289);
					}
					else if (flag14 && Main.rand.Next(20) == 0)
					{
						int num90 = 281;
						if (num89 == 0)
						{
							num90 += 2;
						}
						if (num89 == 2)
						{
							num90 += 4;
						}
						num90 += Main.rand.Next(2);
						if (!AnyNPCs(num90))
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, num90);
						}
					}
					else if (flag14 && Main.rand.Next(3) != 0)
					{
						int num91 = 269;
						if (num89 == 0)
						{
							num91 += 4;
						}
						if (num89 == 2)
						{
							num91 += 8;
						}
						newNPC = NewNPC(num * 16 + 8, num2 * 16, num91 + Main.rand.Next(4));
					}
					else if (Main.player[k].RollLuck(35) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 71);
					}
					else if (num89 == 1 && Main.rand.Next(3) == 0 && !NearSpikeBall(num, num2))
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 70);
					}
					else if (num89 == 2 && Main.rand.Next(5) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 72);
					}
					else if (num89 == 0 && Main.rand.Next(7) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 34);
					}
					else if (Main.rand.Next(7) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 32);
					}
					else
					{
						switch (Main.rand.Next(5))
						{
						case 0:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 294);
							break;
						case 1:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 295);
							break;
						case 2:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 296);
							break;
						default:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 31);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-14);
							}
							else if (Main.rand.Next(5) == 0)
							{
								Main.npc[newNPC].SetDefaults(-13);
							}
							break;
						}
					}
				}
				else if (Main.player[k].ZoneMeteor)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 23);
				}
				else if (DD2Event.Ongoing && Main.player[k].ZoneOldOneArmy)
				{
					DD2Event.SpawnNPC(newNPC);
				}
				else if ((double)num2 <= Main.worldSurface && !Main.dayTime && Main.snowMoon)
				{
					int num92 = waveNumber;
					if (Main.rand.Next(30) == 0 && CountNPCS(341) < 4)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 341);
					}
					else if (num92 >= 20)
					{
						int num93 = Main.rand.Next(3);
						if (!(num5 >= (float)num4 * num6))
						{
							newNPC = num93 switch
							{
								0 => NewNPC(num * 16 + 8, num2 * 16, 345), 
								1 => NewNPC(num * 16 + 8, num2 * 16, 346), 
								_ => NewNPC(num * 16 + 8, num2 * 16, 344), 
							};
						}
					}
					else if (num92 >= 19)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 4) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 5) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) != 0 || CountNPCS(344) >= 7) ? NewNPC(num * 16 + 8, num2 * 16, 343) : NewNPC(num * 16 + 8, num2 * 16, 344))));
					}
					else if (num92 >= 18)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 3) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 4) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 6) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 348) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 343) : NewNPC(num * 16 + 8, num2 * 16, 351))))));
					}
					else if (num92 >= 17)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 3) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 5) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 347) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 343) : NewNPC(num * 16 + 8, num2 * 16, 351))))));
					}
					else if (num92 >= 16)
					{
						newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(345) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 4) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 343) : NewNPC(num * 16 + 8, num2 * 16, 352)))));
					}
					else if (num92 >= 15)
					{
						newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && CountNPCS(346) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 3) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 343) : NewNPC(num * 16 + 8, num2 * 16, 347)))));
					}
					else
					{
						switch (num92)
						{
						case 14:
							if (Main.rand.Next(10) == 0 && !AnyNPCs(345))
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 345);
							}
							else if (Main.rand.Next(10) == 0 && !AnyNPCs(346))
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 346);
							}
							else if (Main.rand.Next(10) == 0 && !AnyNPCs(344))
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 344);
							}
							else if (Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 343);
							}
							break;
						case 13:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(3) != 0) ? ((Main.rand.Next(6) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 347) : NewNPC(num * 16 + 8, num2 * 16, 342)) : NewNPC(num * 16 + 8, num2 * 16, 343)) : NewNPC(num * 16 + 8, num2 * 16, 352))));
							break;
						case 12:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(8) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 342)) : NewNPC(num * 16 + 8, num2 * 16, 343))));
							break;
						case 11:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(345)) ? NewNPC(num * 16 + 8, num2 * 16, 345) : ((Main.rand.Next(6) != 0) ? ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 342)) : NewNPC(num * 16 + 8, num2 * 16, 352)));
							break;
						case 10:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && CountNPCS(344) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(6) != 0) ? ((Main.rand.Next(3) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 347)) : NewNPC(num * 16 + 8, num2 * 16, 348)) : NewNPC(num * 16 + 8, num2 * 16, 351))));
							break;
						case 9:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(2) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 342) : NewNPC(num * 16 + 8, num2 * 16, 347)) : NewNPC(num * 16 + 8, num2 * 16, 348))));
							break;
						case 8:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(8) != 0) ? ((Main.rand.Next(3) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 350) : NewNPC(num * 16 + 8, num2 * 16, 347)) : NewNPC(num * 16 + 8, num2 * 16, 348)) : NewNPC(num * 16 + 8, num2 * 16, 351)));
							break;
						case 7:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(346)) ? NewNPC(num * 16 + 8, num2 * 16, 346) : ((Main.rand.Next(3) != 0) ? ((Main.rand.Next(4) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 350)) : NewNPC(num * 16 + 8, num2 * 16, 342)));
							break;
						case 6:
							newNPC = ((Main.rand.Next(10) == 0 && CountNPCS(344) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) != 0) ? ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 350) : NewNPC(num * 16 + 8, num2 * 16, 348)) : NewNPC(num * 16 + 8, num2 * 16, 347)));
							break;
						case 5:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) != 0) ? ((Main.rand.Next(8) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 348)) : NewNPC(num * 16 + 8, num2 * 16, 350)));
							break;
						case 4:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(344)) ? NewNPC(num * 16 + 8, num2 * 16, 344) : ((Main.rand.Next(4) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 342)) : NewNPC(num * 16 + 8, num2 * 16, 350)));
							break;
						case 3:
							newNPC = ((Main.rand.Next(8) != 0) ? ((Main.rand.Next(4) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 342)) : NewNPC(num * 16 + 8, num2 * 16, 350)) : NewNPC(num * 16 + 8, num2 * 16, 348));
							break;
						case 2:
							newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 350));
							break;
						default:
							newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(338, 341)) : NewNPC(num * 16 + 8, num2 * 16, 342));
							break;
						}
					}
				}
				else if ((double)num2 <= Main.worldSurface && !Main.dayTime && Main.pumpkinMoon)
				{
					int num94 = waveNumber;
					if (waveNumber >= 15)
					{
						if (!(num5 >= (float)num4 * num6))
						{
							newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 325) : NewNPC(num * 16 + 8, num2 * 16, 327));
						}
					}
					else
					{
						switch (num94)
						{
						case 14:
							if (Main.rand.Next(5) == 0 && CountNPCS(327) < 3)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 327);
							}
							else if (Main.rand.Next(5) == 0 && CountNPCS(325) < 3)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 325);
							}
							else if (!(num5 >= (float)num4 * num6))
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 315);
							}
							break;
						case 13:
							if (Main.rand.Next(7) == 0 && CountNPCS(327) < 2)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 327);
							}
							newNPC = ((Main.rand.Next(5) == 0 && CountNPCS(325) < 3) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(5) == 0 && CountNPCS(315) < 3) ? NewNPC(num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 329) : NewNPC(num * 16 + 8, num2 * 16, 330))));
							break;
						case 12:
							if (Main.rand.Next(7) == 0 && CountNPCS(327) < 2)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 327);
							}
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(7) == 0 && CountNPCS(315) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(7) != 0) ? ((Main.rand.Next(5) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 326) : NewNPC(num * 16 + 8, num2 * 16, 329)) : NewNPC(num * 16 + 8, num2 * 16, 330))));
							break;
						case 11:
							if (Main.rand.Next(10) == 0 && !AnyNPCs(327))
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 327);
							}
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(10) == 0 && !AnyNPCs(315)) ? NewNPC(num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(10) != 0) ? ((Main.rand.Next(7) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 326)) : NewNPC(num * 16 + 8, num2 * 16, 329)) : NewNPC(num * 16 + 8, num2 * 16, 330))));
							break;
						case 10:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(327)) ? NewNPC(num * 16 + 8, num2 * 16, 327) : ((Main.rand.Next(10) == 0 && !AnyNPCs(325)) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(10) == 0 && !AnyNPCs(315)) ? NewNPC(num * 16 + 8, num2 * 16, 315) : ((Main.rand.Next(8) != 0) ? ((Main.rand.Next(5) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 326) : NewNPC(num * 16 + 8, num2 * 16, 329)) : NewNPC(num * 16 + 8, num2 * 16, 330)))));
							break;
						case 9:
							newNPC = ((Main.rand.Next(8) == 0 && !AnyNPCs(327)) ? NewNPC(num * 16 + 8, num2 * 16, 327) : ((Main.rand.Next(8) == 0 && !AnyNPCs(325)) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(10) != 0 || AnyNPCs(315)) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 315))));
							break;
						case 8:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(327)) ? NewNPC(num * 16 + 8, num2 * 16, 327) : ((Main.rand.Next(5) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 326) : NewNPC(num * 16 + 8, num2 * 16, 329)) : NewNPC(num * 16 + 8, num2 * 16, 330)));
							break;
						case 7:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(327)) ? NewNPC(num * 16 + 8, num2 * 16, 327) : ((Main.rand.Next(8) != 0) ? ((Main.rand.Next(5) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 329)) : NewNPC(num * 16 + 8, num2 * 16, 330)));
							break;
						case 6:
							newNPC = ((Main.rand.Next(7) == 0 && CountNPCS(325) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(6) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 326) : NewNPC(num * 16 + 8, num2 * 16, 329)) : NewNPC(num * 16 + 8, num2 * 16, 330)));
							break;
						case 5:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(325)) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(8) != 0) ? ((Main.rand.Next(5) != 0) ? ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 326)) : NewNPC(num * 16 + 8, num2 * 16, 329)) : NewNPC(num * 16 + 8, num2 * 16, 330)));
							break;
						case 4:
							newNPC = ((Main.rand.Next(10) == 0 && !AnyNPCs(325)) ? NewNPC(num * 16 + 8, num2 * 16, 325) : ((Main.rand.Next(10) != 0) ? ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 326)) : NewNPC(num * 16 + 8, num2 * 16, 329)));
							break;
						case 3:
							newNPC = ((Main.rand.Next(6) != 0) ? ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 326)) : NewNPC(num * 16 + 8, num2 * 16, 329));
							break;
						case 2:
							newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315)) : NewNPC(num * 16 + 8, num2 * 16, 326));
							break;
						default:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(305, 315));
							break;
						}
					}
				}
				else if ((double)num2 <= Main.worldSurface && Main.dayTime && Main.eclipse)
				{
					bool flag27 = false;
					if (downedMechBoss1 && downedMechBoss2 && downedMechBoss3)
					{
						flag27 = true;
					}
					newNPC = ((flag27 && Main.rand.Next(80) == 0 && !AnyNPCs(477)) ? NewNPC(num * 16 + 8, num2 * 16, 477) : ((Main.rand.Next(50) == 0 && !AnyNPCs(251)) ? NewNPC(num * 16 + 8, num2 * 16, 251) : ((downedPlantBoss && Main.rand.Next(5) == 0 && !AnyNPCs(466)) ? NewNPC(num * 16 + 8, num2 * 16, 466) : ((downedPlantBoss && Main.rand.Next(20) == 0 && !AnyNPCs(463)) ? NewNPC(num * 16 + 8, num2 * 16, 463) : ((downedPlantBoss && Main.rand.Next(20) == 0 && CountNPCS(467) < 2) ? NewNPC(num * 16 + 8, num2 * 16, 467) : ((Main.rand.Next(15) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 159) : ((flag27 && Main.rand.Next(13) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 253) : ((Main.rand.Next(8) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 469) : ((downedPlantBoss && Main.rand.Next(7) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 468) : ((downedPlantBoss && Main.rand.Next(5) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 460) : ((Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 162) : ((Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 461) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 166) : NewNPC(num * 16 + 8, num2 * 16, 462))))))))))))));
				}
				else if (fairyLog && Main.player[k].RollLuck(500) == 0 && !AnyHelpfulFairies() && (double)num2 >= (Main.worldSurface + Main.rockLayer) / 2.0 && num2 < Main.maxTilesY - 300)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(583, 586));
					Main.npc[newNPC].ai[2] = 2f;
					Main.npc[newNPC].TargetClosest();
					Main.npc[newNPC].ai[3] = 0f;
				}
				else if (!flag7 && (!Main.dayTime || Main.tile[num, num2].wall > 0) && Main.tile[num8, num9].wall == 244 && !Main.eclipse && !Main.bloodMoon && Main.player[k].RollLuck(30) == 0 && CountNPCS(624) <= Main.rand.Next(3))
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 624);
				}
				else if (!flag7 && !Main.eclipse && !Main.bloodMoon && Main.player[k].RollLuck(10) == 0 && (double)num2 >= Main.worldSurface * 0.800000011920929 && (double)num2 < Main.worldSurface * 1.1000000238418579 && CountNPCS(624) <= Main.rand.Next(3) && (!Main.dayTime || Main.tile[num, num2].wall > 0) && (Main.tile[num, num2].wall == 2 || Main.tile[num, num2].wall == 196 || Main.tile[num, num2].wall == 197 || Main.tile[num, num2].wall == 198 || Main.tile[num, num2].wall == 199))
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 624);
				}
				else if (Main.hardMode && num3 == 70 && flag7)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 256);
				}
				else if (num3 == 70 && (double)num2 <= Main.worldSurface && Main.rand.Next(3) != 0)
				{
					if ((!Main.hardMode && Main.rand.Next(6) == 0) || Main.rand.Next(12) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 360);
					}
					else if (Main.rand.Next(3) != 0)
					{
						newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 255) : NewNPC(num * 16 + 8, num2 * 16, 254));
					}
					else if (Main.rand.Next(4) != 0)
					{
						newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 258) : NewNPC(num * 16 + 8, num2 * 16, 257));
					}
					else if (Main.hardMode && Main.rand.Next(3) != 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 260);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 259);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
				}
				else if (num3 == 70 && Main.hardMode && (double)num2 >= Main.worldSurface && Main.rand.Next(3) != 0)
				{
					if (Main.hardMode && Main.rand.Next(5) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 374);
					}
					else if ((!Main.hardMode && Main.rand.Next(4) == 0) || Main.rand.Next(8) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 360);
					}
					else if (Main.rand.Next(4) != 0)
					{
						newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 258) : NewNPC(num * 16 + 8, num2 * 16, 257));
					}
					else if (Main.hardMode && Main.rand.Next(3) != 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 260);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 259);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
				}
				else if (Main.player[k].ZoneCorrupt && Main.rand.Next(65) == 0 && !flag5)
				{
					newNPC = ((!Main.hardMode || Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 7, 1) : NewNPC(num * 16 + 8, num2 * 16, 98, 1));
				}
				else if (Main.hardMode && (double)num2 > Main.worldSurface && Main.player[k].RollLuck(75) == 0)
				{
					newNPC = ((Main.rand.Next(2) == 0 && Main.player[k].ZoneCorrupt && !AnyNPCs(473)) ? NewNPC(num * 16 + 8, num2 * 16, 473) : ((Main.rand.Next(2) == 0 && Main.player[k].ZoneCrimson && !AnyNPCs(474)) ? NewNPC(num * 16 + 8, num2 * 16, 474) : ((Main.rand.Next(2) == 0 && Main.player[k].ZoneHallow && !AnyNPCs(475)) ? NewNPC(num * 16 + 8, num2 * 16, 475) : ((!Main.player[k].ZoneSnow) ? NewNPC(num * 16 + 8, num2 * 16, 85) : NewNPC(num * 16 + 8, num2 * 16, 629)))));
				}
				else if (Main.hardMode && (double)num2 <= Main.worldSurface && !Main.dayTime && (Main.rand.Next(20) == 0 || (Main.rand.Next(5) == 0 && Main.moonPhase == 4)))
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 82);
				}
				else if (Main.hardMode && Main.halloween && (double)num2 <= Main.worldSurface && !Main.dayTime && Main.rand.Next(10) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 304);
				}
				else if (spawnTileType == 60 && Main.player[k].RollLuck(500) == 0 && !Main.dayTime)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 52);
				}
				else if (spawnTileType == 60 && (double)num2 > Main.worldSurface && Main.rand.Next(60) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 219);
				}
				else if ((double)num2 > Main.worldSurface && num2 < Main.maxTilesY - 210 && !Main.player[k].ZoneSnow && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneJungle && !Main.player[k].ZoneHallow && Main.rand.Next(8) == 0)
				{
					if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 448);
					}
					else
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 357);
					}
				}
				else if ((double)num2 > Main.worldSurface && num2 < Main.maxTilesY - 210 && !Main.player[k].ZoneSnow && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneJungle && !Main.player[k].ZoneHallow && Main.rand.Next(13) == 0)
				{
					if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 447);
					}
					else
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 300);
					}
				}
				else if ((double)num2 > Main.worldSurface && (double)num2 < (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && !Main.player[k].ZoneSnow && !Main.player[k].ZoneCrimson && !Main.player[k].ZoneCorrupt && !Main.player[k].ZoneHallow && Main.rand.Next(13) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 359);
				}
				else if ((double)num2 < Main.worldSurface && Main.player[k].ZoneJungle && Main.rand.Next(7) == 0)
				{
					if (Main.player[k].RollLuck(goldCritterChance) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 445);
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 361);
					}
				}
				else if (spawnTileType == 225 && Main.rand.Next(2) == 0)
				{
					if (Main.hardMode && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 176);
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-18);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-19);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-20);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-21);
						}
					}
					else
					{
						switch (Main.rand.Next(8))
						{
						case 0:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 231);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-56);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-57);
							}
							break;
						case 1:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 232);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-58);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-59);
							}
							break;
						case 2:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 233);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-60);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-61);
							}
							break;
						case 3:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 234);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-62);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-63);
							}
							break;
						case 4:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 235);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-64);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-65);
							}
							break;
						default:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 42);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-16);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-17);
							}
							break;
						}
					}
				}
				else if (spawnTileType == 60 && Main.hardMode && Main.rand.Next(3) != 0)
				{
					if ((double)num2 < Main.worldSurface && !Main.dayTime && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 152);
					}
					else if ((double)num2 < Main.worldSurface && Main.dayTime && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 177);
					}
					else if ((double)num2 > Main.worldSurface && Main.rand.Next(100) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 205);
					}
					else if ((double)num2 > Main.worldSurface && Main.rand.Next(5) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 236);
					}
					else if ((double)num2 > Main.worldSurface && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 176);
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-18);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-19);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-20);
						}
						if (Main.rand.Next(10) == 0)
						{
							Main.npc[newNPC].SetDefaults(-21);
						}
					}
					else if (Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 175);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 153);
					}
				}
				else if (spawnTileType == 226 && flag4)
				{
					newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 198) : NewNPC(num * 16 + 8, num2 * 16, 226));
				}
				else if (num49 == 86 && Main.rand.Next(8) != 0)
				{
					switch (Main.rand.Next(8))
					{
					case 0:
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 231);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-56);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-57);
						}
						break;
					case 1:
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 232);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-58);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-59);
						}
						break;
					case 2:
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 233);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-60);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-61);
						}
						break;
					case 3:
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 234);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-62);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-63);
						}
						break;
					case 4:
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 235);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-64);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-65);
						}
						break;
					default:
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 42);
						if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-16);
						}
						else if (Main.rand.Next(4) == 0)
						{
							Main.npc[newNPC].SetDefaults(-17);
						}
						break;
					}
				}
				else if (spawnTileType == 60 && (double)num2 > (Main.worldSurface + Main.rockLayer) / 2.0)
				{
					if (Main.rand.Next(4) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 204);
					}
					else if (Main.rand.Next(4) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 43);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
					else
					{
						switch (Main.rand.Next(8))
						{
						case 0:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 231);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-56);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-57);
							}
							break;
						case 1:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 232);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-58);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-59);
							}
							break;
						case 2:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 233);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-60);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-61);
							}
							break;
						case 3:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 234);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-62);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-63);
							}
							break;
						case 4:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 235);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-64);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-65);
							}
							break;
						default:
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 42);
							if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-16);
							}
							else if (Main.rand.Next(4) == 0)
							{
								Main.npc[newNPC].SetDefaults(-17);
							}
							break;
						}
					}
				}
				else if (spawnTileType == 60 && Main.rand.Next(4) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 51);
				}
				else if (spawnTileType == 60 && Main.rand.Next(8) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 56);
					Main.npc[newNPC].ai[0] = num;
					Main.npc[newNPC].ai[1] = num2;
					Main.npc[newNPC].netUpdate = true;
				}
				else if (Sandstorm.Happening && Main.player[k].ZoneSandstorm && TileID.Sets.Conversion.Sand[spawnTileType] && Spawning_SandstoneCheck(num, num2))
				{
					if (!downedBoss1 && !Main.hardMode)
					{
						newNPC = ((Main.rand.Next(2) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 546) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 69) : NewNPC(num * 16 + 8, num2 * 16, 61)));
					}
					else if (Main.hardMode && Main.rand.Next(20) == 0 && !AnyNPCs(541))
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 541);
					}
					else if (Main.hardMode && !flag5 && Main.rand.Next(3) == 0 && CountNPCS(510) < 4)
					{
						newNPC = NewNPC(num * 16 + 8, (num2 + 10) * 16, 510);
					}
					else if (!Main.hardMode || flag5 || Main.rand.Next(2) != 0)
					{
						newNPC = ((Main.hardMode && spawnTileType == 53 && Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 78) : ((Main.hardMode && spawnTileType == 112 && Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 79) : ((Main.hardMode && spawnTileType == 234 && Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 630) : ((Main.hardMode && spawnTileType == 116 && Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 80) : ((Main.rand.Next(2) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 546) : ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 581) : NewNPC(num * 16 + 8, num2 * 16, 580)))))));
					}
					else
					{
						int num95 = 542;
						if (TileID.Sets.Corrupt[spawnTileType])
						{
							num95 = 543;
						}
						if (TileID.Sets.Crimson[spawnTileType])
						{
							num95 = 544;
						}
						if (TileID.Sets.Hallow[spawnTileType])
						{
							num95 = 545;
						}
						newNPC = NewNPC(num * 16 + 8, num2 * 16, num95);
					}
				}
				else if (Main.hardMode && spawnTileType == 53 && Main.rand.Next(3) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 78);
				}
				else if (Main.hardMode && spawnTileType == 112 && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 79);
				}
				else if (Main.hardMode && spawnTileType == 234 && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 630);
				}
				else if (Main.hardMode && spawnTileType == 116 && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 80);
				}
				else if (Main.hardMode && !flag7 && (double)num2 < Main.rockLayer && (spawnTileType == 116 || spawnTileType == 117 || spawnTileType == 109 || spawnTileType == 164))
				{
					if (downedPlantBoss && !Main.dayTime && Main.time < 16200.0 && (double)num2 < Main.worldSurface && Main.rand.Next(10) == 0 && !AnyNPCs(661))
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 661);
					}
					else if (!(Main.cloudAlpha > 0f) || AnyNPCs(244) || Main.rand.Next(12) != 0)
					{
						newNPC = ((!Main.dayTime && Main.rand.Next(2) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 122) : ((Main.rand.Next(10) != 0 && (!Main.player[k].ZoneWaterCandle || Main.rand.Next(10) != 0)) ? NewNPC(num * 16 + 8, num2 * 16, 75) : NewNPC(num * 16 + 8, num2 * 16, 86)));
					}
					else
					{
						NewNPC(num * 16 + 8, num2 * 16, 244);
					}
				}
				else if (!flag5 && Main.hardMode && Main.rand.Next(50) == 0 && !flag7 && (double)num2 >= Main.rockLayer && (spawnTileType == 116 || spawnTileType == 117 || spawnTileType == 109 || spawnTileType == 164))
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 84);
				}
				else if ((spawnTileType == 204 && Main.player[k].ZoneCrimson) || spawnTileType == 199 || spawnTileType == 200 || spawnTileType == 203 || spawnTileType == 234)
				{
					if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(5) == 0 && !flag5)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 182);
					}
					else if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(2) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 268);
					}
					else if (Main.hardMode && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 183);
						if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-24);
						}
						else if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-25);
						}
					}
					else if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(40) == 0 && !flag5)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 179);
					}
					else if (Main.hardMode && (Main.rand.Next(2) == 0 || (double)num2 > Main.worldSurface))
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 174);
					}
					else if ((Main.tile[num, num2].wall > 0 && Main.rand.Next(4) != 0) || Main.rand.Next(8) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 239);
					}
					else if (Main.rand.Next(2) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 181);
					}
					else
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 173);
						if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-22);
						}
						else if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-23);
						}
					}
				}
				else if ((spawnTileType == 22 && Main.player[k].ZoneCorrupt) || spawnTileType == 23 || spawnTileType == 25 || spawnTileType == 112 || spawnTileType == 163)
				{
					if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 101);
						Main.npc[newNPC].ai[0] = num;
						Main.npc[newNPC].ai[1] = num2;
						Main.npc[newNPC].netUpdate = true;
					}
					else if (Main.hardMode && Main.rand.Next(3) == 0)
					{
						newNPC = ((Main.rand.Next(3) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 81) : NewNPC(num * 16 + 8, num2 * 16, 121));
					}
					else if (Main.hardMode && (double)num2 >= Main.rockLayer && Main.rand.Next(40) == 0 && !flag5)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 83);
					}
					else if (Main.hardMode && (Main.rand.Next(2) == 0 || (double)num2 > Main.rockLayer))
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 94);
					}
					else
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 6);
						if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-11);
						}
						else if (Main.rand.Next(3) == 0)
						{
							Main.npc[newNPC].SetDefaults(-12);
						}
					}
				}
				else if ((double)num2 <= Main.worldSurface)
				{
					bool flag28 = (float)Math.Abs(num - Main.maxTilesX / 2) / (float)(Main.maxTilesX / 2) > 0.33f;
					if (flag28 && AnyDanger())
					{
						flag28 = false;
					}
					if (Main.player[k].ZoneGraveyard && !flag7 && (num3 == 2 || num3 == 477) && Main.rand.Next(10) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							NewNPC(num * 16 + 8, num2 * 16, 606);
						}
						else
						{
							NewNPC(num * 16 + 8, num2 * 16, 610);
						}
					}
					else if (Main.player[k].ZoneSnow && Main.hardMode && Main.cloudAlpha > 0f && !AnyNPCs(243) && Main.player[k].RollLuck(20) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 243);
					}
					else if (!Main.player[k].ZoneSnow && Main.hardMode && Main.cloudAlpha > 0f && CountNPCS(250) < 2 && Main.rand.Next(10) == 0)
					{
						NewNPC(num * 16 + 8, num2 * 16, 250);
					}
					else if (flag28 && Main.hardMode && downedGolemBoss && ((!downedMartians && Main.rand.Next(100) == 0) || Main.rand.Next(400) == 0) && !AnyNPCs(399))
					{
						NewNPC(num * 16 + 8, num2 * 16, 399);
					}
					else if (!Main.player[k].ZoneGraveyard && Main.dayTime)
					{
						int num96 = Math.Abs(num - Main.spawnTileX);
						if (!flag7 && num96 < Main.maxTilesX / 2 && Main.rand.Next(15) == 0 && (spawnTileType == 2 || spawnTileType == 477 || spawnTileType == 109 || spawnTileType == 492 || spawnTileType == 147 || spawnTileType == 161))
						{
							if (spawnTileType == 147 || spawnTileType == 161)
							{
								if (Main.rand.Next(2) == 0)
								{
									NewNPC(num * 16 + 8, num2 * 16, 148);
								}
								else
								{
									NewNPC(num * 16 + 8, num2 * 16, 149);
								}
							}
							else if (!tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance / 2) == 0 && (double)num2 <= Main.worldSurface)
							{
								if (Main.player[k].RollLuck(goldCritterChance) == 0)
								{
									NewNPC(num * 16 + 8, num2 * 16, 444);
								}
								else
								{
									NewNPC(num * 16 + 8, num2 * 16, 356);
								}
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(num * 16 + 8 - 16, num2 * 16, 356);
								}
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(num * 16 + 8 + 16, num2 * 16, 356);
								}
							}
							else if (tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(butterflyChance) == 0 && (double)num2 <= Main.worldSurface)
							{
								if (Main.player[k].RollLuck(goldCritterChance) == 0)
								{
									NewNPC(num * 16 + 8, num2 * 16, 605);
								}
								else
								{
									NewNPC(num * 16 + 8, num2 * 16, 604);
								}
								if (Main.rand.Next(3) != 0)
								{
									NewNPC(num * 16 + 8, num2 * 16, 604);
								}
								if (Main.rand.Next(2) == 0)
								{
									NewNPC(num * 16 + 8, num2 * 16, 604);
								}
								if (Main.rand.Next(3) == 0)
								{
									NewNPC(num * 16 + 8, num2 * 16, 604);
								}
								if (Main.rand.Next(4) == 0)
								{
									NewNPC(num * 16 + 8, num2 * 16, 604);
								}
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 443);
							}
							else if (Main.player[k].RollLuck(goldCritterChance) == 0 && (double)num2 <= Main.worldSurface)
							{
								NewNPC(num * 16 + 8, num2 * 16, 539);
							}
							else if (Main.halloween && Main.rand.Next(3) != 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 303);
							}
							else if (Main.xMas && Main.rand.Next(3) != 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 337);
							}
							else if (BirthdayParty.PartyIsUp && Main.rand.Next(3) != 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 540);
							}
							else if (Main.rand.Next(3) == 0 && (double)num2 <= Main.worldSurface)
							{
								NewNPC(num * 16 + 8, num2 * 16, Utils.SelectRandom(Main.rand, new short[2]
								{
									299,
									538
								}));
							}
							else
							{
								NewNPC(num * 16 + 8, num2 * 16, 46);
							}
						}
						else if (!flag7 && num > WorldGen.beachDistance && num < Main.maxTilesX - WorldGen.beachDistance && Main.rand.Next(12) == 0 && spawnTileType == 53)
						{
							NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(366, 368));
						}
						else if ((spawnTileType == 2 || spawnTileType == 477 || spawnTileType == 53) && !tooWindyForButterflies && !Main.raining && Main.dayTime && Main.rand.Next(3) != 0 && (double)num2 <= Main.worldSurface && FindCattailTop(num, num2, out cattailX, out cattailY))
						{
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(cattailX * 16 + 8, cattailY * 16, 601);
							}
							else
							{
								NewNPC(cattailX * 16 + 8, cattailY * 16, RollDragonflyType(spawnTileType));
							}
							if (Main.rand.Next(3) == 0)
							{
								NewNPC(cattailX * 16 + 8 - 16, cattailY * 16, RollDragonflyType(spawnTileType));
							}
							if (Main.rand.Next(3) == 0)
							{
								NewNPC(cattailX * 16 + 8 + 16, cattailY * 16, RollDragonflyType(spawnTileType));
							}
						}
						else if (!flag7 && num96 < Main.maxTilesX / 3 && Main.dayTime && Main.time < 18000.0 && (spawnTileType == 2 || spawnTileType == 477 || spawnTileType == 109 || spawnTileType == 492) && Main.rand.Next(4) == 0 && (double)num2 <= Main.worldSurface && CountNPCS(74) + CountNPCS(297) + CountNPCS(298) < 6)
						{
							int num97 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 442);
							}
							else
							{
								switch (num97)
								{
								case 0:
									NewNPC(num * 16 + 8, num2 * 16, 297);
									break;
								case 1:
									NewNPC(num * 16 + 8, num2 * 16, 298);
									break;
								default:
									NewNPC(num * 16 + 8, num2 * 16, 74);
									break;
								}
							}
						}
						else if (!flag7 && num96 < Main.maxTilesX / 3 && Main.rand.Next(15) == 0 && (spawnTileType == 2 || spawnTileType == 477 || spawnTileType == 109 || spawnTileType == 492 || spawnTileType == 147))
						{
							int num98 = Main.rand.Next(4);
							if (Main.player[k].RollLuck(goldCritterChance) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 442);
							}
							else
							{
								switch (num98)
								{
								case 0:
									NewNPC(num * 16 + 8, num2 * 16, 297);
									break;
								case 1:
									NewNPC(num * 16 + 8, num2 * 16, 298);
									break;
								default:
									NewNPC(num * 16 + 8, num2 * 16, 74);
									break;
								}
							}
						}
						else if (!flag7 && num96 > Main.maxTilesX / 3 && spawnTileType == 2 && Main.rand.Next(300) == 0 && !AnyNPCs(50))
						{
							SpawnOnPlayer(k, 50);
						}
						else if (spawnTileType == 53 && (num < WorldGen.beachDistance || num > Main.maxTilesX - WorldGen.beachDistance))
						{
							if (!flag7 && Main.rand.Next(10) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16, 602);
							}
							else if (flag7)
							{
								int num99 = -1;
								int num100 = -1;
								if ((double)num2 < Main.worldSurface && num2 > 50)
								{
									for (int num101 = num2 - 1; num101 > num2 - 50; num101--)
									{
										if (Main.tile[num, num101].liquid == 0 && !WorldGen.SolidTile(num, num101) && !WorldGen.SolidTile(num, num101 + 1) && !WorldGen.SolidTile(num, num101 + 2))
										{
											num99 = num101 + 2;
											if (!WorldGen.SolidTile(num, num99 + 1) && !WorldGen.SolidTile(num, num99 + 2))
											{
												num100 = num99 + 2;
											}
											break;
										}
									}
									if (num99 > num2)
									{
										num99 = num2;
									}
									if (num100 > num2)
									{
										num100 = num2;
									}
								}
								if (Main.rand.Next(10) == 0)
								{
									int num102 = Main.rand.Next(3);
									if (num102 == 0 && num99 > 0)
									{
										NewNPC(num * 16 + 8, num99 * 16, 625);
									}
									else if (num102 == 1 && num100 > 0)
									{
										NewNPC(num * 16 + 8, num100 * 16, 615);
									}
									else if (num102 == 2 && num100 > 0)
									{
										if (Main.player[k].RollLuck(goldCritterChance) == 0)
										{
											NewNPC(num * 16 + 8, num100 * 16, 627);
										}
										else
										{
											NewNPC(num * 16 + 8, num100 * 16, 626);
										}
									}
								}
							}
						}
						else if (!flag7 && spawnTileType == 53 && Main.rand.Next(5) == 0 && Spawning_SandstoneCheck(num, num2) && !flag7)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 69);
						}
						else if (spawnTileType == 53 && !flag7)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 61);
						}
						else if (!flag7 && num96 > Main.maxTilesX / 3 && (Main.rand.Next(15) == 0 || (!downedGoblins && WorldGen.shadowOrbSmashed && Main.rand.Next(7) == 0)))
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 73);
						}
						else if (Main.raining && Main.rand.Next(4) == 0)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 224);
						}
						else if (!flag7 && Main.raining && Main.rand.Next(2) == 0)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 225);
						}
						else if (!flag7 && num49 == 0 && isItAHappyWindyDay && flag17 && Main.rand.Next(3) != 0)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 594);
						}
						else if (!flag7 && num49 == 0 && (num3 == 2 || num3 == 477) && isItAHappyWindyDay && flag17 && Main.rand.Next(10) != 0)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 628);
						}
						else if (!flag7)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 1);
							switch (spawnTileType)
							{
							case 60:
								Main.npc[newNPC].SetDefaults(-10);
								break;
							case 147:
							case 161:
								Main.npc[newNPC].SetDefaults(147);
								break;
							default:
								if (Main.halloween && Main.rand.Next(3) != 0)
								{
									Main.npc[newNPC].SetDefaults(302);
								}
								else if (Main.xMas && Main.rand.Next(3) != 0)
								{
									Main.npc[newNPC].SetDefaults(Main.rand.Next(333, 337));
								}
								else if (Main.rand.Next(3) == 0 || (num96 < 200 && !Main.expertMode))
								{
									Main.npc[newNPC].SetDefaults(-3);
								}
								else if (Main.rand.Next(10) == 0 && (num96 > 400 || Main.expertMode))
								{
									Main.npc[newNPC].SetDefaults(-7);
								}
								break;
							}
						}
					}
					else
					{
						if (!Main.player[k].ZoneGraveyard && !tooWindyForButterflies && (spawnTileType == 2 || spawnTileType == 477 || spawnTileType == 109 || spawnTileType == 492) && !Main.raining && Main.rand.Next(fireFlyChance) == 0 && (double)num2 <= Main.worldSurface)
						{
							int num103 = 355;
							if (spawnTileType == 109)
							{
								num103 = 358;
							}
							NewNPC(num * 16 + 8, num2 * 16, num103);
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(num * 16 + 8 - 16, num2 * 16, num103);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(num * 16 + 8 + 16, num2 * 16, num103);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16 - 16, num103);
							}
							if (Main.rand.Next(fireFlyMultiple) == 0)
							{
								NewNPC(num * 16 + 8, num2 * 16 + 16, num103);
							}
						}
						else if ((Main.halloween || Main.player[k].ZoneGraveyard) && Main.rand.Next(12) == 0)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 301);
						}
						else if (Main.player[k].ZoneGraveyard && Main.rand.Next(30) == 0)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 316);
						}
						else if (Main.rand.Next(6) == 0 || (Main.moonPhase == 4 && Main.rand.Next(2) == 0))
						{
							if (Main.hardMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 133);
							}
							else if (Main.halloween && Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(317, 319));
							}
							else if (Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 2);
								if (Main.rand.Next(4) == 0)
								{
									Main.npc[newNPC].SetDefaults(-43);
								}
							}
							else
							{
								switch (Main.rand.Next(5))
								{
								case 0:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 190);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-38);
									}
									break;
								case 1:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 191);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-39);
									}
									break;
								case 2:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 192);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-40);
									}
									break;
								case 3:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 193);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-41);
									}
									break;
								case 4:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 194);
									if (Main.rand.Next(3) == 0)
									{
										Main.npc[newNPC].SetDefaults(-42);
									}
									break;
								}
							}
						}
						else if (Main.hardMode && Main.rand.Next(50) == 0 && Main.bloodMoon && !AnyNPCs(109))
						{
							NewNPC(num * 16 + 8, num2 * 16, 109);
						}
						else if (Main.rand.Next(250) == 0 && (Main.bloodMoon || Main.player[k].ZoneGraveyard))
						{
							NewNPC(num * 16 + 8, num2 * 16, 53);
						}
						else if (Main.rand.Next(250) == 0 && (Main.bloodMoon || Main.player[k].ZoneGraveyard))
						{
							NewNPC(num * 16 + 8, num2 * 16, 536);
						}
						else if (!Main.dayTime && Main.moonPhase == 0 && Main.hardMode && Main.rand.Next(3) != 0)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 104);
						}
						else if (!Main.dayTime && Main.hardMode && Main.rand.Next(3) == 0)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 140);
						}
						else if (Main.bloodMoon && Main.rand.Next(5) < 2)
						{
							newNPC = ((Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 490) : NewNPC(num * 16 + 8, num2 * 16, 489));
						}
						else if (num3 == 147 || num3 == 161 || num3 == 163 || num3 == 164 || num3 == 162)
						{
							newNPC = ((!Main.player[k].ZoneGraveyard && Main.hardMode && Main.rand.Next(4) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 169) : ((!Main.player[k].ZoneGraveyard && Main.hardMode && Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 155) : ((!Main.expertMode || Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 161) : NewNPC(num * 16 + 8, num2 * 16, 431))));
						}
						else if (Main.raining && Main.rand.Next(2) == 0)
						{
							newNPC = NewNPC(num * 16 + 8, num2 * 16, 223);
							if (Main.rand.Next(3) == 0)
							{
								if (Main.rand.Next(2) == 0)
								{
									Main.npc[newNPC].SetDefaults(-54);
								}
								else
								{
									Main.npc[newNPC].SetDefaults(-55);
								}
							}
						}
						else
						{
							int num104 = Main.rand.Next(7);
							int num105 = 12;
							int maxValue3 = 20;
							if (Main.player[k].statLifeMax <= 100)
							{
								num105 = 5;
								num105 -= Main.CurrentFrameFlags.ActivePlayersCount / 2;
								if (num105 < 2)
								{
									num105 = 2;
								}
							}
							if (Main.player[k].ZoneGraveyard && Main.rand.Next(maxValue3) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 632);
							}
							else if (Main.rand.Next(num105) == 0)
							{
								newNPC = ((!Main.expertMode || Main.rand.Next(2) != 0) ? NewNPC(num * 16 + 8, num2 * 16, 590) : NewNPC(num * 16 + 8, num2 * 16, 591));
							}
							else if (Main.halloween && Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(319, 322));
							}
							else if (Main.xMas && Main.rand.Next(2) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(331, 333));
							}
							else if (num104 == 0 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 430);
							}
							else if (num104 == 2 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 432);
							}
							else if (num104 == 3 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 433);
							}
							else if (num104 == 4 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 434);
							}
							else if (num104 == 5 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 435);
							}
							else if (num104 == 6 && Main.expertMode && Main.rand.Next(3) == 0)
							{
								newNPC = NewNPC(num * 16 + 8, num2 * 16, 436);
							}
							else
							{
								switch (num104)
								{
								case 0:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 3);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-26);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-27);
										}
									}
									break;
								case 1:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 132);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-28);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-29);
										}
									}
									break;
								case 2:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 186);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-30);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-31);
										}
									}
									break;
								case 3:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 187);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-32);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-33);
										}
									}
									break;
								case 4:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 188);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-34);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-35);
										}
									}
									break;
								case 5:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 189);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-36);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-37);
										}
									}
									break;
								case 6:
									newNPC = NewNPC(num * 16 + 8, num2 * 16, 200);
									if (Main.rand.Next(3) == 0)
									{
										if (Main.rand.Next(2) == 0)
										{
											Main.npc[newNPC].SetDefaults(-44);
										}
										else
										{
											Main.npc[newNPC].SetDefaults(-45);
										}
									}
									break;
								}
							}
						}
						if (Main.player[k].ZoneGraveyard)
						{
							Main.npc[newNPC].target = k;
						}
					}
				}
				else if ((double)num2 <= Main.rockLayer)
				{
					if (!flag5 && Main.rand.Next(50) == 0 && !Main.player[k].ZoneSnow)
					{
						newNPC = ((!Main.hardMode) ? NewNPC(num * 16 + 8, num2 * 16, 10, 1) : ((Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 10, 1) : NewNPC(num * 16 + 8, num2 * 16, 95, 1)));
					}
					else if (Main.hardMode && Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 140);
					}
					else if (Main.hardMode && Main.rand.Next(4) != 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 141);
					}
					else if (spawnTileType == 147 || spawnTileType == 161 || Main.player[k].ZoneSnow)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 147);
					}
					else
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 1);
						if (Main.rand.Next(5) == 0)
						{
							Main.npc[newNPC].SetDefaults(-9);
						}
						else if (Main.rand.Next(2) == 0)
						{
							Main.npc[newNPC].SetDefaults(1);
						}
						else
						{
							Main.npc[newNPC].SetDefaults(-8);
						}
					}
				}
				else if (num2 > Main.maxTilesY - 190)
				{
					newNPC = ((Main.hardMode && !savedTaxCollector && Main.rand.Next(20) == 0 && !AnyNPCs(534)) ? NewNPC(num * 16 + 8, num2 * 16, 534) : ((Main.rand.Next(8) == 0) ? SpawnNPC_SpawnLavaBaitCritters(num, num2) : ((Main.rand.Next(40) == 0 && !AnyNPCs(39)) ? NewNPC(num * 16 + 8, num2 * 16, 39, 1) : ((Main.rand.Next(14) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 24) : ((Main.rand.Next(7) == 0) ? ((Main.rand.Next(10) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 66) : ((!Main.hardMode || !downedMechBossAny || Main.rand.Next(5) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 62) : NewNPC(num * 16 + 8, num2 * 16, 156))) : ((Main.rand.Next(3) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 59) : ((!Main.hardMode || !downedMechBossAny || Main.rand.Next(5) == 0) ? NewNPC(num * 16 + 8, num2 * 16, 60) : NewNPC(num * 16 + 8, num2 * 16, 151))))))));
				}
				else if (SpawnNPC_CheckToSpawnRockGolem(num, num2, spawnTileType, k))
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 631);
				}
				else if (Main.rand.Next(60) == 0)
				{
					newNPC = ((!Main.player[k].ZoneSnow) ? NewNPC(num * 16 + 8, num2 * 16, 217) : NewNPC(num * 16 + 8, num2 * 16, 218));
				}
				else if ((spawnTileType == 116 || spawnTileType == 117 || spawnTileType == 164) && Main.hardMode && !flag5 && Main.rand.Next(8) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 120);
				}
				else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164 || num3 == 200) && !flag5 && Main.hardMode && Main.player[k].ZoneCorrupt && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 170);
				}
				else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164 || num3 == 200) && !flag5 && Main.hardMode && Main.player[k].ZoneHallow && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 171);
				}
				else if ((num3 == 147 || num3 == 161 || num3 == 162 || num3 == 163 || num3 == 164 || num3 == 200) && !flag5 && Main.hardMode && Main.player[k].ZoneCrimson && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 180);
				}
				else if (Main.hardMode && Main.player[k].ZoneSnow && Main.rand.Next(10) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 154);
				}
				else if (!flag5 && Main.rand.Next(100) == 0 && !Main.player[k].ZoneHallow)
				{
					newNPC = (Main.hardMode ? NewNPC(num * 16 + 8, num2 * 16, 95, 1) : ((!Main.player[k].ZoneSnow) ? NewNPC(num * 16 + 8, num2 * 16, 10, 1) : NewNPC(num * 16 + 8, num2 * 16, 185)));
				}
				else if (Main.player[k].ZoneSnow && Main.rand.Next(20) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 185);
				}
				else if ((!Main.hardMode && Main.rand.Next(10) == 0) || (Main.hardMode && Main.rand.Next(20) == 0))
				{
					if (Main.player[k].ZoneSnow)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 184);
					}
					else if (Main.rand.Next(3) == 0)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 1);
						Main.npc[newNPC].SetDefaults(-6);
					}
					else
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 16);
					}
				}
				else if (!Main.hardMode && Main.rand.Next(4) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 1);
					if (Main.player[k].ZoneJungle)
					{
						Main.npc[newNPC].SetDefaults(-10);
					}
					else if (Main.player[k].ZoneSnow)
					{
						Main.npc[newNPC].SetDefaults(184);
					}
					else
					{
						Main.npc[newNPC].SetDefaults(-6);
					}
				}
				else if (Main.rand.Next(2) != 0)
				{
					newNPC = ((Main.hardMode && (Main.player[k].ZoneHallow & (Main.rand.Next(2) == 0))) ? NewNPC(num * 16 + 8, num2 * 16, 138) : (Main.player[k].ZoneJungle ? NewNPC(num * 16 + 8, num2 * 16, 51) : ((Main.player[k].ZoneGlowshroom && (num3 == 70 || num3 == 190)) ? NewNPC(num * 16 + 8, num2 * 16, 634) : ((Main.hardMode && Main.player[k].ZoneHallow) ? NewNPC(num * 16 + 8, num2 * 16, 137) : ((Main.hardMode && Main.rand.Next(6) > 0) ? ((Main.rand.Next(3) != 0 || (num3 != 147 && num3 != 161 && num3 != 162)) ? NewNPC(num * 16 + 8, num2 * 16, 93) : NewNPC(num * 16 + 8, num2 * 16, 150)) : ((num3 != 147 && num3 != 161 && num3 != 162) ? NewNPC(num * 16 + 8, num2 * 16, 49) : ((!Main.hardMode) ? NewNPC(num * 16 + 8, num2 * 16, 150) : NewNPC(num * 16 + 8, num2 * 16, 169))))))));
				}
				else if (Main.rand.Next(35) == 0 && CountNPCS(453) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 453);
				}
				else if ((!Main.hardMode && Main.rand.Next(80) == 0) || Main.rand.Next(200) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 195);
				}
				else if (Main.hardMode && (double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && Main.rand.Next(300) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 172);
				}
				else if ((double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && (Main.rand.Next(200) == 0 || (Main.rand.Next(50) == 0 && (Main.player[k].armor[1].type == 4256 || (Main.player[k].armor[1].type >= 1282 && Main.player[k].armor[1].type <= 1287)) && Main.player[k].armor[0].type != 238)))
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 45);
				}
				else if (flag10 && Main.rand.Next(4) != 0)
				{
					newNPC = ((Main.rand.Next(6) == 0 || AnyNPCs(480) || !Main.hardMode) ? NewNPC(num * 16 + 8, num2 * 16, 481) : NewNPC(num * 16 + 8, num2 * 16, 480));
				}
				else if (flag9 && Main.rand.Next(5) != 0)
				{
					newNPC = ((Main.rand.Next(6) == 0 || AnyNPCs(483)) ? NewNPC(num * 16 + 8, num2 * 16, 482) : NewNPC(num * 16 + 8, num2 * 16, 483));
				}
				else if (Main.hardMode && Main.rand.Next(10) != 0)
				{
					if (Main.rand.Next(2) != 0)
					{
						newNPC = ((!Main.player[k].ZoneSnow) ? NewNPC(num * 16 + 8, num2 * 16, 110) : NewNPC(num * 16 + 8, num2 * 16, 206));
					}
					else if (Main.player[k].ZoneSnow)
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 197);
					}
					else
					{
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 77);
						if ((double)num2 > (Main.rockLayer + (double)Main.maxTilesY) / 2.0 && Main.rand.Next(5) == 0)
						{
							Main.npc[newNPC].SetDefaults(-15);
						}
					}
				}
				else if (!flag5 && (Main.halloween || Main.player[k].ZoneGraveyard) && Main.rand.Next(30) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 316);
				}
				else if (Main.rand.Next(20) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 44);
				}
				else if (num3 == 147 || num3 == 161 || num3 == 162)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 167);
				}
				else if (Main.player[k].ZoneSnow)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 185);
				}
				else if (Main.rand.Next(3) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, cavernMonsterType[Main.rand.Next(2), Main.rand.Next(3)]);
				}
				else if (Main.player[k].ZoneGlowshroom && (num3 == 70 || num3 == 190))
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, 635);
				}
				else if (Main.halloween && Main.rand.Next(2) == 0)
				{
					newNPC = NewNPC(num * 16 + 8, num2 * 16, Main.rand.Next(322, 325));
				}
				else if (Main.expertMode && Main.rand.Next(3) == 0)
				{
					int num106 = Main.rand.Next(4);
					newNPC = ((num106 == 0) ? NewNPC(num * 16 + 8, num2 * 16, 449) : ((num106 == 0) ? NewNPC(num * 16 + 8, num2 * 16, 450) : ((num106 != 0) ? NewNPC(num * 16 + 8, num2 * 16, 452) : NewNPC(num * 16 + 8, num2 * 16, 451))));
				}
				else
				{
					switch (Main.rand.Next(4))
					{
					case 0:
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 21);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-47);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-46);
							}
						}
						break;
					case 1:
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 201);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-49);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-48);
							}
						}
						break;
					case 2:
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 202);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-51);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-50);
							}
						}
						break;
					case 3:
						newNPC = NewNPC(num * 16 + 8, num2 * 16, 203);
						if (Main.rand.Next(3) == 0)
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.npc[newNPC].SetDefaults(-53);
							}
							else
							{
								Main.npc[newNPC].SetDefaults(-52);
							}
						}
						break;
					}
				}
				if (Main.npc[newNPC].type == 1 && Main.player[k].RollLuck(180) == 0)
				{
					Main.npc[newNPC].SetDefaults(-4);
				}
				if (Main.netMode == 2 && newNPC < 200)
				{
					NetMessage.SendData(23, -1, -1, null, newNPC);
				}
				break;
			}
		}

		private static bool SpawnNPC_CheckToSpawnRockGolem(int spawnTileX, int spawnTileY, int tileType, int plr)
		{
			if (!Main.hardMode || (tileType != 1 && !TileID.Sets.Conversion.Moss[tileType]) || Main.player[plr].ZoneSnow)
			{
				return false;
			}
			if (Main.rand.Next(30) != 0)
			{
				return false;
			}
			if (WorldGen.SolidTile(spawnTileX - 1, spawnTileY - 4) || WorldGen.SolidTile(spawnTileX, spawnTileY - 4) || WorldGen.SolidTile(spawnTileX + 1, spawnTileY - 4))
			{
				return false;
			}
			return true;
		}

		private static int SpawnNPC_SpawnLavaBaitCritters(int spawnTileX, int spawnTileY)
		{
			if (Main.rand.Next(3) != 0)
			{
				if (Main.dayTime)
				{
					return NewNPC(spawnTileX * 16 + 8, spawnTileY * 16, 653);
				}
				if (Main.rand.Next(fireFlyMultiple) == 0)
				{
					NewNPC(spawnTileX * 16 + 8 - 16, spawnTileY * 16, 654);
				}
				if (Main.rand.Next(fireFlyMultiple) == 0)
				{
					NewNPC(spawnTileX * 16 + 8 + 16, spawnTileY * 16, 654);
				}
				if (Main.rand.Next(fireFlyMultiple) == 0)
				{
					NewNPC(spawnTileX * 16 + 8, spawnTileY * 16 - 16, 654);
				}
				if (Main.rand.Next(fireFlyMultiple) == 0)
				{
					NewNPC(spawnTileX * 16 + 8, spawnTileY * 16 + 16, 654);
				}
				return NewNPC(spawnTileX * 16 + 8, spawnTileY * 16, 654);
			}
			return NewNPC(spawnTileX * 16 + 8, spawnTileY * 16, 655);
		}

		private static int SpawnNPC_TryFindingProperGroundTileType(int spawnTileType, int x, int y)
		{
			if (!IsValidSpawningGroundTile(x, y))
			{
				for (int i = y + 1; i < y + 30; i++)
				{
					if (IsValidSpawningGroundTile(x, i))
					{
						return Main.tile[x, i].type;
					}
				}
			}
			return spawnTileType;
		}

		private static bool IsValidSpawningGroundTile(int x, int y)
		{
			Tile tile = Main.tile[x, y];
			if (!tile.nactive())
			{
				return false;
			}
			if (!Main.tileSolid[tile.type] || Main.tileSolidTop[tile.type])
			{
				return false;
			}
			if (TileID.Sets.IsSkippedForNPCSpawningGroundTypeCheck[tile.type])
			{
				return false;
			}
			return true;
		}

		public static bool FindCattailTop(int landX, int landY, out int cattailX, out int cattailY)
		{
			cattailX = landX;
			cattailY = landY;
			if (!WorldGen.InWorld(landX, landY, 31))
			{
				return false;
			}
			int num = 1;
			for (int i = landX - 30; i <= landX + 30; i++)
			{
				for (int j = landY - 20; j <= landY + 20; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null && tile.active() && tile.type == 519 && tile.frameX >= 180 && Main.rand.Next(num) == 0)
					{
						cattailX = i;
						cattailY = j;
						num++;
					}
				}
			}
			if (cattailX != landX || cattailY != landY)
			{
				return true;
			}
			return false;
		}

		public static bool FindTreeBranch(int landX, int landY, out int treeBranchX, out int treeBranchY)
		{
			treeBranchX = landX;
			treeBranchY = landY;
			if (!WorldGen.InWorld(landX, landY, 11))
			{
				return false;
			}
			int num = 1;
			for (int i = landX - 10; i <= landX + 10; i++)
			{
				for (int j = landY - 30; j <= landY + 30; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile != null && tile.active() && TileID.Sets.IsATreeTrunk[tile.type])
					{
						int num2 = tile.frameX / 22;
						int num3 = tile.frameY / 66;
						if (((num2 == 3 && num3 == 0) || (num2 == 3 && num3 == 3) || (num2 == 4 && num3 == 1) || (num2 == 4 && num3 == 3) || (num2 == 2 && num3 == 3)) && Main.rand.Next(num) == 0)
						{
							treeBranchX = i;
							treeBranchY = j;
							num++;
						}
					}
				}
			}
			if (treeBranchX != landX || treeBranchY != landY)
			{
				return true;
			}
			return false;
		}

		public static bool AnyDanger(bool quickBossNPCCheck = false)
		{
			bool flag = false;
			if (MoonLordCountdown > 0)
			{
				flag = true;
			}
			if (Main.invasionType > 0)
			{
				flag = true;
			}
			if (Main.snowMoon || Main.pumpkinMoon || DD2Event.Ongoing)
			{
				flag = true;
			}
			if (!flag)
			{
				if (quickBossNPCCheck)
				{
					flag |= Main.CurrentFrameFlags.AnyActiveBossNPC;
				}
				else
				{
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].active && (Main.npc[i].boss || NPCID.Sets.DangerThatPreventsOtherDangers[Main.npc[i].type]))
						{
							flag = true;
						}
					}
				}
			}
			return flag;
		}

		public static bool AnyoneNearCultists()
		{
			int num = FindFirstNPC(437);
			if (num == -1)
			{
				return false;
			}
			Rectangle rectangle = Utils.CenteredRectangle(Main.npc[num].Center, new Vector2(2500f, 1500f));
			Rectangle r = new Rectangle(0, 0, 2500, 1500);
			Vector2 vector = r.Size() / 2f;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active)
				{
					r.X = (int)Main.player[i].Center.X - (int)vector.X;
					r.Y = (int)Main.player[i].Center.Y - (int)vector.Y;
					if (rectangle.Intersects(r))
					{
						return true;
					}
				}
			}
			return false;
		}

		public static void SpawnWOF(Vector2 pos)
		{
			if (pos.Y / 16f < (float)(Main.maxTilesY - 205) || Main.wofNPCIndex >= 0 || Main.netMode == 1 || AnyNPCs(113))
			{
				return;
			}
			Player.FindClosest(pos, 16, 16);
			int num = 1;
			if (pos.X / 16f > (float)(Main.maxTilesX / 2))
			{
				num = -1;
			}
			bool flag = false;
			int num2 = (int)pos.X;
			while (!flag)
			{
				flag = true;
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && Main.player[i].position.X > (float)(num2 - 1200) && Main.player[i].position.X < (float)(num2 + 1200))
					{
						num2 -= num * 16;
						flag = false;
					}
				}
				if (num2 / 16 < 20 || num2 / 16 > Main.maxTilesX - 20)
				{
					flag = true;
				}
			}
			int num3 = (int)pos.Y;
			int num4 = num2 / 16;
			int num5 = num3 / 16;
			int num6 = 0;
			while (true)
			{
				try
				{
					if (!WorldGen.SolidTile(num4, num5 - num6) && Main.tile[num4, num5 - num6].liquid < 100)
					{
						num5 -= num6;
						break;
					}
					if (!WorldGen.SolidTile(num4, num5 + num6) && Main.tile[num4, num5 + num6].liquid < 100)
					{
						num5 += num6;
						break;
					}
					num6++;
					continue;
				}
				catch
				{
				}
				break;
			}
			if (num5 < Main.maxTilesY - 180)
			{
				num5 = Main.maxTilesY - 180;
			}
			num3 = num5 * 16;
			int num7 = NewNPC(num2, num3, 113);
			if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Main.npc[num7].TypeName), 175, 75);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num7].GetTypeNetName()), new Color(175, 75, 255));
			}
		}

		public static void SpawnSkeletron()
		{
			bool flag = true;
			bool flag2 = false;
			Vector2 vector = Vector2.Zero;
			int num = 0;
			int num2 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == 35)
				{
					flag = false;
					break;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				if (!Main.npc[j].active)
				{
					continue;
				}
				if (Main.npc[j].type == 37)
				{
					flag2 = true;
					Main.npc[j].ai[3] = 1f;
					vector = Main.npc[j].position;
					num = Main.npc[j].width;
					num2 = Main.npc[j].height;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(23, -1, -1, null, j);
					}
				}
				else if (Main.npc[j].type == 54)
				{
					flag2 = true;
					vector = Main.npc[j].position;
					num = Main.npc[j].width;
					num2 = Main.npc[j].height;
				}
			}
			if (flag && flag2)
			{
				int num3 = NewNPC((int)vector.X + num / 2, (int)vector.Y + num2 / 2, 35);
				Main.npc[num3].netUpdate = true;
				string nPCNameValue = Lang.GetNPCNameValue(35);
				if (Main.netMode == 0)
				{
					Main.NewText(Language.GetTextValue("Announcement.HasAwoken", nPCNameValue), 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Lang.GetNPCName(35).ToNetworkText()), new Color(175, 75, 255));
				}
			}
		}

		public static void SpawnOnPlayer(int plr, int Type)
		{
			if (Main.netMode == 1 || (Type == 262 && AnyNPCs(262)))
			{
				return;
			}
			switch (Type)
			{
			case 245:
				if (AnyNPCs(245))
				{
					return;
				}
				try
				{
					int num2 = (int)Main.player[plr].Center.X / 16;
					int num3 = (int)Main.player[plr].Center.Y / 16;
					int num4 = 0;
					int num5 = 0;
					for (int j = num2 - 20; j < num2 + 20; j++)
					{
						for (int k = num3 - 20; k < num3 + 20; k++)
						{
							if (Main.tile[j, k].active() && Main.tile[j, k].type == 237 && Main.tile[j, k].frameX == 18 && Main.tile[j, k].frameY == 0)
							{
								num4 = j;
								num5 = k;
							}
						}
					}
					if (num4 <= 0 || num5 <= 0)
					{
						return;
					}
					int num6 = num5 - 15;
					int num7 = num5 - 15;
					for (int num8 = num5; num8 > num5 - 50; num8--)
					{
						if (WorldGen.SolidTile(num4, num8))
						{
							num6 = num8;
							break;
						}
					}
					for (int l = num5; l < num5 + 50; l++)
					{
						if (WorldGen.SolidTile(num4, l))
						{
							num7 = l;
							break;
						}
					}
					num5 = (num6 + num6 + num7) / 3;
					int num9 = NewNPC(num4 * 16 + 8, num5 * 16, 245, 100);
					Main.npc[num9].target = plr;
					string typeName2 = Main.npc[num9].TypeName;
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName2), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num9].GetTypeNetName()), new Color(175, 75, 255));
					}
				}
				catch
				{
				}
				return;
			case 370:
			{
				Player player2 = Main.player[plr];
				if (!player2.active || player2.dead)
				{
					return;
				}
				for (int i = 0; i < 1000; i++)
				{
					Projectile projectile = Main.projectile[i];
					if (projectile.active && projectile.bobber && projectile.owner == plr)
					{
						int num = NewNPC((int)projectile.Center.X, (int)projectile.Center.Y + 100, 370);
						string typeName = Main.npc[num].TypeName;
						if (Main.netMode == 0)
						{
							Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName), 175, 75);
						}
						else if (Main.netMode == 2)
						{
							ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num].GetTypeNetName()), new Color(175, 75, 255));
						}
						break;
					}
				}
				return;
			}
			case 398:
				if (!AnyNPCs(Type))
				{
					Player player = Main.player[plr];
					NewNPC((int)player.Center.X, (int)player.Center.Y - 150, Type);
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Language.GetTextValue("Enemies.MoonLord")), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", NetworkText.FromKey("Enemies.MoonLord")), new Color(175, 75, 255));
					}
				}
				return;
			}
			bool flag = false;
			int num10 = 0;
			int num11 = 0;
			int num12 = (int)(Main.player[plr].position.X / 16f) - spawnRangeX * 2;
			int num13 = (int)(Main.player[plr].position.X / 16f) + spawnRangeX * 2;
			int num14 = (int)(Main.player[plr].position.Y / 16f) - spawnRangeY * 2;
			int num15 = (int)(Main.player[plr].position.Y / 16f) + spawnRangeY * 2;
			int num16 = (int)(Main.player[plr].position.X / 16f) - safeRangeX;
			int num17 = (int)(Main.player[plr].position.X / 16f) + safeRangeX;
			int num18 = (int)(Main.player[plr].position.Y / 16f) - safeRangeY;
			int num19 = (int)(Main.player[plr].position.Y / 16f) + safeRangeY;
			if (num12 < 0)
			{
				num12 = 0;
			}
			if (num13 > Main.maxTilesX)
			{
				num13 = Main.maxTilesX;
			}
			if (num14 < 0)
			{
				num14 = 0;
			}
			if (num15 > Main.maxTilesY)
			{
				num15 = Main.maxTilesY;
			}
			for (int m = 0; m < 1000; m++)
			{
				for (int n = 0; n < 100; n++)
				{
					int num20 = Main.rand.Next(num12, num13);
					int num21 = Main.rand.Next(num14, num15);
					if (!Main.tile[num20, num21].nactive() || !Main.tileSolid[Main.tile[num20, num21].type])
					{
						if ((Main.wallHouse[Main.tile[num20, num21].wall] && m < 999) || (Type == 50 && m < 500 && Main.tile[num21, num21].wall > 0))
						{
							continue;
						}
						for (int num22 = num21; num22 < Main.maxTilesY; num22++)
						{
							if (Main.tile[num20, num22].nactive() && Main.tileSolid[Main.tile[num20, num22].type])
							{
								if (num20 < num16 || num20 > num17 || num22 < num18 || num22 > num19 || m == 999)
								{
									_ = Main.tile[num20, num22].type;
									num10 = num20;
									num11 = num22;
									flag = true;
								}
								break;
							}
						}
						if (flag && Type == 50 && m < 900)
						{
							int num23 = 20;
							if (!Collision.CanHit(new Vector2(num10, num11 - 1) * 16f, 16, 16, new Vector2(num10, num11 - 1 - num23) * 16f, 16, 16) || !Collision.CanHit(new Vector2(num10, num11 - 1 - num23) * 16f, 16, 16, Main.player[plr].Center, 0, 0))
							{
								num10 = 0;
								num11 = 0;
								flag = false;
							}
						}
						if (flag && m < 999)
						{
							int num24 = num10 - spawnSpaceX / 2;
							int num25 = num10 + spawnSpaceX / 2;
							int num26 = num11 - spawnSpaceY;
							int num27 = num11;
							if (num24 < 0)
							{
								flag = false;
							}
							if (num25 > Main.maxTilesX)
							{
								flag = false;
							}
							if (num26 < 0)
							{
								flag = false;
							}
							if (num27 > Main.maxTilesY)
							{
								flag = false;
							}
							if (flag)
							{
								for (int num28 = num24; num28 < num25; num28++)
								{
									for (int num29 = num26; num29 < num27; num29++)
									{
										if (Main.tile[num28, num29].nactive() && Main.tileSolid[Main.tile[num28, num29].type])
										{
											flag = false;
											break;
										}
									}
								}
							}
						}
					}
					if (flag || flag)
					{
						break;
					}
				}
				if (flag && m < 999)
				{
					Rectangle rectangle = new Rectangle(num10 * 16, num11 * 16, 16, 16);
					for (int num30 = 0; num30 < 255; num30++)
					{
						if (Main.player[num30].active)
						{
							Rectangle rectangle2 = new Rectangle((int)(Main.player[num30].position.X + (float)(Main.player[num30].width / 2) - (float)(sWidth / 2) - (float)safeRangeX), (int)(Main.player[num30].position.Y + (float)(Main.player[num30].height / 2) - (float)(sHeight / 2) - (float)safeRangeY), sWidth + safeRangeX * 2, sHeight + safeRangeY * 2);
							if (rectangle.Intersects(rectangle2))
							{
								flag = false;
							}
						}
					}
				}
				if (flag)
				{
					break;
				}
			}
			if (flag)
			{
				int spawnPositionX = num10 * 16 + 8;
				int spawnPositionY = num11 * 16;
				SpawnBoss(spawnPositionX, spawnPositionY, Type, plr);
			}
		}

		public static void SpawnBoss(int spawnPositionX, int spawnPositionY, int Type, int targetPlayerIndex)
		{
			int num = 200;
			num = NewNPC(spawnPositionX, spawnPositionY, Type, 1);
			if (num == 200)
			{
				return;
			}
			Main.npc[num].target = targetPlayerIndex;
			Main.npc[num].timeLeft *= 20;
			string typeName = Main.npc[num].TypeName;
			if (Main.netMode == 2 && num < 200)
			{
				NetMessage.SendData(23, -1, -1, null, num);
			}
			if (Type == 134 || Type == 127 || Type == 126 || Type == 125)
			{
				AchievementsHelper.CheckMechaMayhem();
			}
			switch (Type)
			{
			case 125:
				if (Main.netMode == 0)
				{
					Main.NewText(Lang.misc[48].Value, 175, 75);
				}
				else if (Main.netMode == 2)
				{
					ChatHelper.BroadcastChatMessage(Lang.misc[48].ToNetworkText(), new Color(175, 75, 255));
				}
				return;
			case 50:
			case 82:
			case 126:
			case 316:
			case 398:
			case 551:
			case 662:
				return;
			}
			if (Main.netMode == 0)
			{
				Main.NewText(Language.GetTextValue("Announcement.HasAwoken", typeName), 175, 75);
			}
			else if (Main.netMode == 2)
			{
				ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num].GetTypeNetName()), new Color(175, 75, 255));
			}
		}

		public static int NewNPC(int X, int Y, int Type, int Start = 0, float ai0 = 0f, float ai1 = 0f, float ai2 = 0f, float ai3 = 0f, int Target = 255)
		{
			if (Main.getGoodWorld)
			{
				if (Type == 46)
				{
					Type = 614;
				}
				if (Type == 62)
				{
					Type = 66;
				}
			}
			int num = -1;
			if (Type == 222)
			{
				for (int num2 = 199; num2 >= 0; num2--)
				{
					if (!Main.npc[num2].active)
					{
						num = num2;
						break;
					}
				}
			}
			else
			{
				for (int i = Start; i < 200; i++)
				{
					if (!Main.npc[i].active)
					{
						num = i;
						break;
					}
				}
			}
			if (num >= 0)
			{
				Main.npc[num] = new NPC();
				Main.npc[num].SetDefaults(Type);
				Main.npc[num].whoAmI = num;
				GiveTownUniqueDataToNPCsThatNeedIt(Type, num);
				Main.npc[num].position.X = X - Main.npc[num].width / 2;
				Main.npc[num].position.Y = Y - Main.npc[num].height;
				Main.npc[num].active = true;
				Main.npc[num].timeLeft = (int)((double)activeTime * 1.25);
				Main.npc[num].wet = Collision.WetCollision(Main.npc[num].position, Main.npc[num].width, Main.npc[num].height);
				Main.npc[num].ai[0] = ai0;
				Main.npc[num].ai[1] = ai1;
				Main.npc[num].ai[2] = ai2;
				Main.npc[num].ai[3] = ai3;
				Main.npc[num].target = Target;
				if (Type == 50)
				{
					if (Main.netMode == 0)
					{
						Main.NewText(Language.GetTextValue("Announcement.HasAwoken", Main.npc[num].TypeName), 175, 75);
					}
					else if (Main.netMode == 2)
					{
						ChatHelper.BroadcastChatMessage(NetworkText.FromKey("Announcement.HasAwoken", Main.npc[num].GetTypeNetName()), new Color(175, 75, 255));
					}
				}
				return num;
			}
			return 200;
		}

		private static void GiveTownUniqueDataToNPCsThatNeedIt(int Type, int nextNPC)
		{
			if (TypeToDefaultHeadIndex(Type) != -1 || Type == 453)
			{
				Main.npc[nextNPC].GivenName = getNewNPCName(Type);
				if (TownNPCProfiles.Instance.GetProfile(Type, out var profile))
				{
					Main.npc[nextNPC].townNpcVariationIndex = profile.RollVariation();
					Main.npc[nextNPC].GivenName = profile.GetNameForVariant(Main.npc[nextNPC]);
				}
				Main.npc[nextNPC].needsUniqueInfoUpdate = true;
			}
		}

		public void TransformVisuals(int oldType, int newType)
		{
			position += netOffset;
			if ((oldType == 158 && newType == 159) || (oldType == 159 && newType == 158))
			{
				SoundEngine.PlaySound(SoundID.Item8, position);
				int num = Gore.NewGore(new Vector2(position.X, position.Y - 10f), velocity, 99, scale);
				Main.gore[num].velocity *= 0.3f;
				num = Gore.NewGore(new Vector2(position.X, position.Y + (float)(height / 2) - 10f), velocity, 99, scale);
				Main.gore[num].velocity *= 0.3f;
				num = Gore.NewGore(new Vector2(position.X, position.Y + (float)height - 10f), velocity, 99, scale);
				Main.gore[num].velocity *= 0.3f;
			}
			else if (oldType == 478 && newType == 479)
			{
				for (int i = 0; i < 30; i++)
				{
					int num2 = Dust.NewDust(position, width, height, 238, 0f, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num2].noGravity = true;
					}
				}
				Gore.NewGore(position, velocity, 684, scale);
				Gore.NewGore(position, velocity, 685, scale);
				Gore.NewGore(position, velocity, 686, scale);
				Gore.NewGore(position, velocity, 684 + Main.rand.Next(3), scale);
			}
			else if (oldType == 406 && newType == 405)
			{
				float num3 = Main.rand.Next(10, 21);
				float num4 = (float)Math.PI * 2f * Main.rand.NextFloat();
				Vector2 value = new Vector2(22f, 22f);
				for (float num5 = 0f; num5 < num3; num5 += 1f)
				{
					Dust dust = Main.dust[Dust.NewDust(base.Center, 0, 0, 229)];
					Vector2 vector = Vector2.UnitY.RotatedBy(num5 * ((float)Math.PI * 2f) / num3 + num4);
					dust.position = base.Center + vector * value / 2f;
					dust.velocity = vector;
					dust.noGravity = true;
					dust.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust.velocity *= dust.scale;
					dust.fadeIn = Main.rand.NextFloat() * 2f;
				}
			}
			if (oldType == 428 && newType == 427)
			{
				for (int j = 0; j < 20; j++)
				{
					int num6 = Utils.SelectRandom<int>(Main.rand, 229, 240);
					Dust dust2 = Main.dust[Dust.NewDust(position, width, height, num6)];
					dust2.noGravity = true;
					dust2.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust2.fadeIn = 0.25f;
					dust2.velocity *= dust2.scale / 2f;
				}
			}
			if (oldType == 427 && newType == 426)
			{
				for (int k = 0; k < 30; k++)
				{
					int num7 = Utils.SelectRandom<int>(Main.rand, 229, 240, 240);
					Dust dust3 = Main.dust[Dust.NewDust(position, width, height, num7)];
					dust3.noGravity = true;
					dust3.scale = 0.6f + Main.rand.NextFloat() * 1.8f;
					dust3.fadeIn = 0.25f;
					dust3.velocity *= dust3.scale * 0.75f;
				}
			}
			position -= netOffset;
		}

		public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
		{
			int extraInfo2 = 0;
			if (Style == 4)
			{
				extraInfo2 = lastPortalColorIndex;
			}
			float dustCountMult = ((teleportTime > 0f) ? 0.3f : 1f);
			Vector2 position = base.position;
			Main.TeleportEffect(getRect(), Style, extraInfo2, dustCountMult, TeleportationSide.Entry, newPos);
			base.position = newPos;
			if (Style == 4)
			{
				lastPortalColorIndex = extraInfo;
				extraInfo2 = lastPortalColorIndex;
			}
			Main.TeleportEffect(getRect(), Style, extraInfo2, dustCountMult, TeleportationSide.Exit, position);
			teleportTime = 1f;
			teleportStyle = Style;
			if (Main.netMode == 2 && Style != 4)
			{
				NetMessage.SendData(65, -1, -1, null, 1, whoAmI, newPos.X, newPos.Y, Style);
			}
		}

		public void Transform(int newType)
		{
			if (Main.netMode != 1)
			{
				int num = extraValue;
				bool flag = false;
				if (value == 0f)
				{
					flag = true;
				}
				int[] array = new int[5];
				int[] array2 = new int[5];
				for (int i = 0; i < 5; i++)
				{
					array[i] = buffType[i];
					array2[i] = buffTime[i];
				}
				_ = height;
				int oldType = type;
				int num2 = life;
				int num3 = lifeMax;
				Vector2 velocity = base.velocity;
				position.Y += height;
				int num4 = spriteDirection;
				bool spawnedFromStatue = SpawnedFromStatue;
				SetDefaults(newType);
				SpawnedFromStatue = spawnedFromStatue;
				spriteDirection = num4;
				TargetClosest();
				base.velocity = velocity;
				position.Y -= height;
				for (int j = 0; j < 5; j++)
				{
					buffType[j] = array[j];
					buffTime[j] = array2[j];
				}
				if (flag)
				{
					value = 0f;
				}
				if (lifeMax == num3)
				{
					life = num2;
				}
				if (newType == 107 || newType == 108)
				{
					homeTileX = (int)(position.X + (float)(width / 2)) / 16;
					homeTileY = (int)(position.Y + (float)height) / 16;
					homeless = true;
				}
				extraValue = num;
				if (Main.netMode == 2)
				{
					netUpdate = true;
					NetMessage.SendData(23, -1, -1, null, whoAmI);
					NetMessage.SendData(54, -1, -1, null, whoAmI);
				}
				TransformVisuals(oldType, newType);
				GiveTownUniqueDataToNPCsThatNeedIt(type, whoAmI);
				if (townNPC)
				{
					homeless = true;
					WorldGen.CheckAchievement_RealEstate();
				}
				altTexture = 0;
			}
		}

		public int checkArmorPenetration(int armorPenetration)
		{
			if (armorPenetration <= 0)
			{
				return 0;
			}
			if (armorPenetration > defense && defense >= 0)
			{
				return defense / 2;
			}
			return armorPenetration / 2;
		}

		public double StrikeNPCNoInteraction(int Damage, float knockBack, int hitDirection, bool crit = false, bool noEffect = false, bool fromNet = false)
		{
			if (Main.netMode == 0)
			{
				ignorePlayerInteractions++;
			}
			return StrikeNPC(Damage, knockBack, hitDirection, crit, noEffect, fromNet);
		}

		public double StrikeNPC(int Damage, float knockBack, int hitDirection, bool crit = false, bool noEffect = false, bool fromNet = false)
		{
			bool flag = Main.netMode == 0;
			if (flag && ignorePlayerInteractions > 0)
			{
				ignorePlayerInteractions--;
				flag = false;
			}
			if (!active || life <= 0)
			{
				return 0.0;
			}
			double num = Damage;
			int num2 = defense;
			if (ichor)
			{
				num2 -= 20;
			}
			if (betsysCurse)
			{
				num2 -= 40;
			}
			if (num2 < 0)
			{
				num2 = 0;
			}
			num = Main.CalculateDamageNPCsTake((int)num, num2);
			if (crit)
			{
				num *= 2.0;
			}
			if (takenDamageMultiplier > 1f)
			{
				num *= (double)takenDamageMultiplier;
			}
			if ((takenDamageMultiplier > 1f || Damage != 9999) && lifeMax > 1)
			{
				if (friendly)
				{
					Color color = (crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly);
					CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), color, (int)num, crit);
				}
				else
				{
					Color color2 = (crit ? CombatText.DamagedHostileCrit : CombatText.DamagedHostile);
					if (fromNet)
					{
						color2 = (crit ? CombatText.OthersDamagedHostileCrit : CombatText.OthersDamagedHostile);
					}
					CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), color2, (int)num, crit);
				}
			}
			if (num >= 1.0)
			{
				if (flag)
				{
					PlayerInteraction(Main.myPlayer);
				}
				justHit = true;
				if ((type == 438 || type == 379) && Main.netMode != 1)
				{
					int num3 = (int)(0f - ai[3] - 1f);
					if (num3 > -1 && Main.npc[num3].localAI[0] == 0f)
					{
						Main.npc[num3].localAI[0] = 1f;
					}
				}
				if (townNPC)
				{
					if (aiStyle == 7 && (ai[0] == 3f || ai[0] == 4f || ai[0] == 16f || ai[0] == 17f))
					{
						NPC nPC = Main.npc[(int)ai[2]];
						if (nPC.active)
						{
							nPC.ai[0] = 1f;
							nPC.ai[1] = 300 + Main.rand.Next(300);
							nPC.ai[2] = 0f;
							nPC.localAI[3] = 0f;
							nPC.direction = hitDirection;
							nPC.netUpdate = true;
						}
					}
					ai[0] = 1f;
					ai[1] = 300 + Main.rand.Next(300);
					ai[2] = 0f;
					localAI[3] = 0f;
					direction = hitDirection;
					netUpdate = true;
				}
				if (aiStyle == 8 && Main.netMode != 1)
				{
					if (type == 172)
					{
						ai[0] = 450f;
					}
					else if (type == 283 || type == 284)
					{
						if (Main.rand.Next(2) == 0)
						{
							ai[0] = 390f;
							netUpdate = true;
						}
					}
					else if (type == 533)
					{
						if (Main.rand.Next(3) != 0)
						{
							ai[0] = 181f;
							netUpdate = true;
						}
					}
					else
					{
						ai[0] = 400f;
					}
					TargetClosest();
				}
				if (aiStyle == 97 && Main.netMode != 1)
				{
					localAI[1] = 1f;
					TargetClosest();
				}
				if (type == 371)
				{
					num = 0.0;
					ai[0] = 1f;
					ai[1] = 4f;
					dontTakeDamage = true;
				}
				if (type == 346 && (double)life >= (double)lifeMax * 0.5 && (double)life - num < (double)lifeMax * 0.5)
				{
					Gore.NewGore(position, velocity, 517);
				}
				if (type == 184)
				{
					localAI[0] = 60f;
				}
				if (type == 535)
				{
					localAI[0] = 60f;
				}
				if (type == 185)
				{
					localAI[0] = 1f;
				}
				if (!immortal)
				{
					if (realLife >= 0)
					{
						Main.npc[realLife].life -= (int)num;
						life = Main.npc[realLife].life;
						lifeMax = Main.npc[realLife].lifeMax;
					}
					else
					{
						life -= (int)num;
					}
				}
				if (knockBack > 0f && knockBackResist > 0f)
				{
					float num4 = knockBack * knockBackResist;
					if (onFire2)
					{
						num4 *= 1.1f;
					}
					if (num4 > 8f)
					{
						float num5 = num4 - 8f;
						num5 *= 0.9f;
						num4 = 8f + num5;
					}
					if (num4 > 10f)
					{
						float num6 = num4 - 10f;
						num6 *= 0.8f;
						num4 = 10f + num6;
					}
					if (num4 > 12f)
					{
						float num7 = num4 - 12f;
						num7 *= 0.7f;
						num4 = 12f + num7;
					}
					if (num4 > 14f)
					{
						float num8 = num4 - 14f;
						num8 *= 0.6f;
						num4 = 14f + num8;
					}
					if (num4 > 16f)
					{
						num4 = 16f;
					}
					if (crit)
					{
						num4 *= 1.4f;
					}
					int num9 = (int)num * 10;
					if (Main.expertMode)
					{
						num9 = (int)num * 15;
					}
					if (num9 > lifeMax)
					{
						if (hitDirection < 0 && velocity.X > 0f - num4)
						{
							if (velocity.X > 0f)
							{
								velocity.X -= num4;
							}
							velocity.X -= num4;
							if (velocity.X < 0f - num4)
							{
								velocity.X = 0f - num4;
							}
						}
						else if (hitDirection > 0 && velocity.X < num4)
						{
							if (velocity.X < 0f)
							{
								velocity.X += num4;
							}
							velocity.X += num4;
							if (velocity.X > num4)
							{
								velocity.X = num4;
							}
						}
						if (type == 185)
						{
							num4 *= 1.5f;
						}
						num4 = (noGravity ? (num4 * -0.5f) : (num4 * -0.75f));
						if (velocity.Y > num4)
						{
							velocity.Y += num4;
							if (velocity.Y < num4)
							{
								velocity.Y = num4;
							}
						}
					}
					else
					{
						if (!noGravity)
						{
							velocity.Y = (0f - num4) * 0.75f * knockBackResist;
						}
						else
						{
							velocity.Y = (0f - num4) * 0.5f * knockBackResist;
						}
						velocity.X = num4 * (float)hitDirection * knockBackResist;
					}
				}
				if ((type == 113 || type == 114) && life <= 0)
				{
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].active && (Main.npc[i].type == 113 || Main.npc[i].type == 114))
						{
							Main.npc[i].HitEffect(hitDirection, num);
						}
					}
				}
				else
				{
					HitEffect(hitDirection, num);
				}
				if (HitSound != null)
				{
					SoundEngine.PlaySound(HitSound, position);
				}
				if (realLife >= 0)
				{
					Main.npc[realLife].checkDead();
				}
				else
				{
					checkDead();
				}
				return num;
			}
			return 0.0;
		}

		public static void LadyBugKilled(Vector2 Position, bool GoldLadyBug = false)
		{
			Main.ladyBugRainBoost += ladyBugRainTime;
			int myPlayer = Main.myPlayer;
			if (!Main.player[myPlayer].active || Main.player[myPlayer].dead)
			{
				return;
			}
			Vector2 vector = Position - Main.player[myPlayer].Center;
			int num = 400;
			if (vector.Length() < (float)num)
			{
				if (vector.Length() < 100f)
				{
					vector = default(Vector2);
				}
				double num2 = 1.0 - (double)vector.Length() / (double)num;
				int num3 = (int)((double)ladyBugBadLuckTime * num2);
				if (GoldLadyBug)
				{
					num3 *= 2;
				}
				if (num3 < Main.player[myPlayer].ladyBugLuckTimeLeft)
				{
					Main.player[myPlayer].ladyBugLuckTimeLeft = num3;
					Main.player[myPlayer].luckNeedsSync = true;
				}
			}
		}

		private void LadyBugLuck(int plr, bool GoldLadyBug = false)
		{
			if (releaseOwner != 255 || Main.player[plr].ladyBugLuckTimeLeft < 0)
			{
				return;
			}
			Vector2 vector = base.Center - Main.player[plr].Center;
			int num = 800;
			if (vector.Length() < (float)num)
			{
				if (vector.Length() < 30f)
				{
					vector = default(Vector2);
				}
				double x = 1.0 - (double)vector.Length() / (double)num;
				x = Math.Pow(x, 6.0);
				int num2 = (int)((double)ladyBugGoodLuckTime * x);
				if (GoldLadyBug)
				{
					num2 *= 2;
				}
				if (num2 > Main.player[plr].ladyBugLuckTimeLeft)
				{
					Main.player[plr].ladyBugLuckTimeLeft = num2;
					Main.player[plr].luckNeedsSync = true;
				}
			}
		}

		private void NPCLuck()
		{
			int myPlayer = Main.myPlayer;
			if (type == 22)
			{
				if (Main.player[myPlayer].ladyBugLuckTimeLeft >= 0 && Main.player[myPlayer].active && !Main.player[myPlayer].dead)
				{
					int num = ladyBugGoodLuckTime / 3;
					if (num > Main.player[myPlayer].ladyBugLuckTimeLeft)
					{
						Main.player[myPlayer].ladyBugLuckTimeLeft = num;
						Main.player[myPlayer].luckNeedsSync = true;
					}
				}
			}
			else if (type != 54 && Main.player[myPlayer].active && !Main.player[myPlayer].dead)
			{
				int num2 = ladyBugBadLuckTime / 3;
				if (num2 < Main.player[myPlayer].ladyBugLuckTimeLeft)
				{
					Main.player[myPlayer].ladyBugLuckTimeLeft = num2;
					Main.player[myPlayer].luckNeedsSync = true;
				}
			}
		}

		public void HitEffect(int hitDirection = 0, double dmg = 10.0)
		{
			//IL_1d2c: Unknown result type (might be due to invalid IL or missing references)
			//IL_1d4b: Unknown result type (might be due to invalid IL or missing references)
			//IL_1f2b: Unknown result type (might be due to invalid IL or missing references)
			if (!active)
			{
				return;
			}
			if (townNPC && life <= 0 && UsesPartyHat())
			{
				bool flag = true;
				switch (type)
				{
				case 38:
					Gore.NewGore(base.position, base.velocity, 927);
					break;
				case 207:
					Gore.NewGore(base.position, base.velocity, 928);
					break;
				case 17:
					Gore.NewGore(base.position, base.velocity, 929);
					break;
				case 18:
					Gore.NewGore(base.position, base.velocity, 930);
					break;
				case 227:
					Gore.NewGore(base.position, base.velocity, 931);
					break;
				case 229:
					Gore.NewGore(base.position, base.velocity, 932);
					break;
				case 142:
					Gore.NewGore(base.position, base.velocity, 933);
					break;
				case 453:
					Gore.NewGore(base.position, base.velocity, 934);
					break;
				case 178:
					Gore.NewGore(base.position, base.velocity, 935);
					break;
				case 353:
					Gore.NewGore(base.position, base.velocity, 936);
					break;
				case 368:
					Gore.NewGore(base.position, base.velocity, 937);
					break;
				case 108:
					Gore.NewGore(base.position, base.velocity, 938);
					break;
				case 588:
					Gore.NewGore(base.position, base.velocity, 1112);
					break;
				default:
					flag = false;
					break;
				}
				if (flag)
				{
					int num = 926;
					switch (GetPartyHatColor())
					{
					case PartyHatColor.Cyan:
						num = 940;
						break;
					case PartyHatColor.Pink:
						num = 939;
						break;
					case PartyHatColor.Purple:
						num = 941;
						break;
					case PartyHatColor.White:
						num = 942;
						break;
					}
					Gore.NewGore(base.position, base.velocity, num);
				}
			}
			if (daybreak && life <= 0)
			{
				Rectangle hitbox = base.Hitbox;
				for (int i = 0; i < 20; i++)
				{
					int num2 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num3 = Dust.NewDust(hitbox.TopLeft(), width, height, num2, 0f, -2.5f);
					Main.dust[num3].alpha = 200;
					Dust dust = Main.dust[num3];
					dust.velocity *= 1.4f;
					dust = Main.dust[num3];
					dust.scale += Main.rand.NextFloat();
				}
				if (Main.netMode != 1)
				{
					for (int j = 0; j < 200; j++)
					{
						NPC nPC = Main.npc[j];
						if (nPC.active && !nPC.buffImmune[189] && Distance(nPC.Center) < 100f && !nPC.dontTakeDamage && nPC.lifeMax > 5 && !nPC.friendly && !nPC.townNPC)
						{
							nPC.AddBuff(189, 300);
						}
					}
				}
			}
			if (type == 594 && life <= 0)
			{
				int num4 = 1125;
				num4 += (int)(ai[2] - 1f) * 3;
				Vector2 value = base.Bottom + (-Vector2.UnitY * 50f).RotatedBy(rotation);
				for (int k = 0; k < 3; k++)
				{
					Vector2 position = value + Main.rand.NextVector2Circular(15f, 15f);
					Gore gore = Gore.NewGorePerfect(position, Main.rand.NextVector2Circular(2f, 2f), num4 + Main.rand.Next(3));
					gore.velocity.Y -= Main.rand.NextFloat();
					Gore gore2 = gore;
					gore2.velocity *= 4f;
				}
				for (int l = 0; l < 1; l++)
				{
					Vector2 position2 = base.Bottom + (-Vector2.UnitY * 50f).RotatedBy(rotation) + Main.rand.NextVector2Circular(5f, 5f);
					Gore gore3 = Gore.NewGorePerfect(position2, Main.rand.NextVector2Circular(2f, 2f), 1146);
					gore3.velocity.Y -= Main.rand.NextFloat();
					Gore gore2 = gore3;
					gore2.velocity *= 4f;
				}
				NPC nPC2 = AI_113_WindyBalloon_GetSlaveNPC();
				if (nPC2 != null)
				{
					nPC2.ai[0] = 0f;
					nPC2.position.Y -= 10f;
					nPC2.netUpdate = true;
				}
			}
			if (type == 661)
			{
				if (life > 0)
				{
					for (int m = 0; (double)m < dmg / (double)lifeMax * 100.0; m++)
					{
						if (Main.rand.Next(5) == 0)
						{
							int num5 = 1;
							Color newColor = Main.hslToRgb((float)m / 100f % 1f, 1f, 0.5f) * 0.5f;
							int num6 = Dust.NewDust(base.position, width, height, 267, 0f, 0f, 0, newColor);
							Main.dust[num6].position = base.Center + Main.rand.NextVector2Circular(width, height);
							Main.dust[num6].velocity = Main.dust[num6].position - base.Center;
							Main.dust[num6].noGravity = true;
							Main.dust[num6].fadeIn = 0.6f + Main.rand.NextFloat() * 0.7f * (float)num5;
							Main.dust[num6].scale = 0.35f;
							if (num6 != 6000)
							{
								Dust dust2 = Dust.CloneDust(num6);
								Dust dust = dust2;
								dust.scale /= 2f;
								dust = dust2;
								dust.fadeIn *= 0.85f;
								dust2.color = new Color(255, 255, 255, 255) * 0.5f;
							}
						}
					}
				}
				else
				{
					for (int n = 0; (float)n < 100f; n++)
					{
						if (Main.rand.Next(5) == 0)
						{
							int num7 = 1;
							Color newColor2 = Main.hslToRgb((float)n / 100f % 1f, 1f, 0.5f) * 0.5f;
							int num8 = Dust.NewDust(base.position, width, height, 267, 0f, 0f, 0, newColor2);
							Main.dust[num8].position = base.Center + Main.rand.NextVector2Circular(width, height);
							Main.dust[num8].velocity = (Main.dust[num8].position - base.Center) * 0.6f;
							Main.dust[num8].noGravity = true;
							Main.dust[num8].fadeIn = 0.7f + Main.rand.NextFloat() * 1.1f * (float)num7;
							Main.dust[num8].scale = 0.35f;
							if (num8 != 6000)
							{
								Dust dust3 = Dust.CloneDust(num8);
								Dust dust = dust3;
								dust.scale /= 2f;
								dust = dust3;
								dust.fadeIn *= 0.85f;
								dust3.color = new Color(255, 255, 255, 255) * 0.5f;
							}
						}
					}
				}
			}
			if (type == 521)
			{
				if (life > 0)
				{
					for (int num9 = 0; (double)num9 < dmg / (double)lifeMax * 200.0; num9++)
					{
						Dust dust4 = Dust.NewDustDirect(base.position, width, height, 228, 6 * hitDirection, base.velocity.Y, 0, Color.Transparent, 3f);
						dust4.noGravity = true;
						Dust dust = dust4;
						dust.velocity *= 5f;
					}
				}
				else
				{
					for (int num10 = 0; (float)num10 < 200f; num10++)
					{
						Dust dust5 = Dust.NewDustDirect(base.position, width, height, 228, 6 * hitDirection, base.velocity.Y, 0, Color.Transparent, 3f);
						dust5.noGravity = true;
						Dust dust = dust5;
						dust.velocity *= 5f;
					}
				}
			}
			if (type == 636)
			{
				if (life > 0)
				{
					for (int num11 = 0; (double)num11 < dmg / (double)lifeMax * 100.0; num11++)
					{
						if (Main.rand.Next(2) == 0)
						{
							Dust.NewDust(base.position, width, height, 67, hitDirection, -1f);
						}
						else
						{
							Dust.NewDust(base.position, width, height, 69, hitDirection, -1f);
						}
					}
				}
				else
				{
					for (int num12 = 0; num12 < 50; num12++)
					{
						if (Main.rand.Next(2) == 0)
						{
							Dust.NewDust(base.position, width, height, 67, hitDirection, -1f);
						}
						else
						{
							Dust.NewDust(base.position, width, height, 69, 2 * hitDirection, -1f);
						}
					}
					Vector2 velocity = base.velocity * 0.6f;
					Gore.NewGore(base.position + new Vector2(10f, -20f), velocity, 1262, scale);
					Gore.NewGore(base.position + new Vector2(10f, 40f), velocity, 1263, scale);
					Gore.NewGore(base.position + new Vector2(50f, 20f), velocity, 1264, scale);
					Gore.NewGore(base.position + new Vector2(-10f, -20f), velocity, 1265, scale);
					Gore.NewGore(base.position, velocity, 1266, scale);
					Gore.NewGore(base.position + new Vector2(-20f, -20f), velocity, 1267, scale);
					Gore.NewGore(base.position + new Vector2(-20f, 10f), velocity, 1268, scale);
					Gore.NewGore(base.position + new Vector2(60f, -20f), velocity, 1267, scale);
					Gore.NewGore(base.position + new Vector2(60f, 10f), velocity, 1268, scale);
				}
			}
			if (type == 657)
			{
				if (life <= 0)
				{
					Gore.NewGore(base.position, base.velocity, 1259, 0.8f);
					Gore.NewGore(base.position + base.Size * 0.5f, base.velocity, 1259, 0.8f);
					Gore.NewGore(base.position, base.velocity, 1258, scale);
					int num13 = 10;
					for (int num14 = 0; num14 < 150; num14++)
					{
						Color newColor3 = AI_121_QueenSlime_GetDustColor();
						newColor3.A = 200;
						int num15 = Dust.NewDust(base.position - new Vector2(num13, num13), width + num13 * 2, height + num13 * 2, 4, 8f * Main.rand.NextFloatDirection(), -2f + 6f * Main.rand.NextFloatDirection(), 50, newColor3, 1f + Main.rand.NextFloat() * 0.5f);
						Dust dust = Main.dust[num15];
						dust.velocity *= 0.65f;
						dust = Main.dust[num15];
						dust.velocity += base.velocity * 0.5f;
						if (Main.rand.Next(5) == 0)
						{
							Main.dust[num15].noGravity = true;
							dust = Main.dust[num15];
							dust.scale *= 1.2f;
						}
					}
				}
				else
				{
					for (int num16 = 0; num16 < 12; num16++)
					{
						Color newColor4 = AI_121_QueenSlime_GetDustColor();
						newColor4.A = 150;
						int num17 = Dust.NewDust(base.position, width, height, 4, 2 * hitDirection, -1f, 50, newColor4);
						Dust dust = Main.dust[num17];
						dust.velocity *= 0.3f;
						dust = Main.dust[num17];
						dust.velocity += base.velocity * 0.3f;
						if (Main.rand.Next(3) == 0)
						{
							Main.dust[num17].noGravity = true;
							dust = Main.dust[num17];
							dust.scale *= 1.2f;
						}
					}
				}
			}
			if (type >= 658 && type <= 660)
			{
				int num18 = 7;
				float num19 = 1f;
				int num20 = 4;
				Color newColor5 = new Color(78, 136, 255, 150);
				if (type == 659)
				{
					num20 = 243;
					newColor5 = default(Color);
				}
				if (type == 660)
				{
					newColor5 = new Color(150, 100, 200, 150);
				}
				if (life <= 0)
				{
					num19 = 1.5f;
					num18 = 40;
					if (type == 660)
					{
						Gore.NewGore(base.position, base.velocity, 1260, scale);
						Gore.NewGore(base.position, base.velocity, 1260, scale);
					}
				}
				for (int num21 = 0; num21 < num18; num21++)
				{
					int num22 = Dust.NewDust(base.position, width, height, num20, 2 * hitDirection, -1f, 80, newColor5, num19);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num22].noGravity = true;
					}
				}
			}
			if (type == 552 || type == 553 || type == 554)
			{
				if (life > 0)
				{
					for (int num23 = 0; (double)num23 < dmg / (double)lifeMax * 20.0; num23++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num24 = 0; (float)num24 < 20f; num24++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					int num25 = 983;
					if (type == 553)
					{
						num25 = 1067;
					}
					else if (type == 554)
					{
						num25 = 1071;
					}
					Gore.NewGore(base.position, base.velocity, num25, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num25 + 3, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num25 + 2, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num25 + 1, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num25 + 1, scale);
				}
			}
			else if (type == 561 || type == 562 || type == 563)
			{
				if (life > 0)
				{
					for (int num26 = 0; (double)num26 < dmg / (double)lifeMax * 20.0; num26++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num27 = 0; (float)num27 < 20f; num27++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					int num28 = 987;
					if (type == 562)
					{
						num28 = 1055;
					}
					else if (type == 563)
					{
						num28 = 1061;
					}
					Gore.NewGore(base.position, base.velocity, num28 + 3, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num28, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num28 + 4, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num28 + 5, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num28 + 2, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num28 + 1, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num28 + 1, scale);
				}
			}
			else if (type == 555 || type == 556 || type == 557)
			{
				if (life > 0)
				{
					for (int num29 = 0; (double)num29 < dmg / (double)lifeMax * 20.0; num29++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					int num30 = 1031;
					if (type == 556)
					{
						num30 = 1034;
					}
					if (type == 557)
					{
						num30 = 1037;
					}
					for (int num31 = 0; (float)num31 < 20f; num31++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, num30, scale);
					Gore.NewGore(new Vector2(base.position.X + 10f, base.position.Y + 20f), base.velocity, num30 + 1, scale);
					Gore.NewGore(new Vector2(base.position.X + 10f, base.position.Y + 30f), base.velocity, num30 + 2, scale);
				}
			}
			else if (type == 551)
			{
				int num32 = (int)((float)life / (float)lifeMax * 100f);
				int num33 = (int)(((double)life + dmg) / (double)(float)lifeMax * 100.0);
				if (num32 != num33 && life > 0 && Main.netMode != 1)
				{
					DD2Event.CheckProgress(type);
				}
				if (life > 0)
				{
					for (int num34 = 0; (double)num34 < dmg / (double)lifeMax * 20.0; num34++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num35 = 0; (float)num35 < 20f; num35++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					if (spriteDirection != -1)
					{
						Gore.NewGore(base.position + new Vector2(0f, 54f), base.velocity, 1079, scale);
						Gore.NewGore(base.position + new Vector2(72f, 90f), base.velocity, 1080, scale);
						Gore.NewGore(base.position + new Vector2(102f, 94f), base.velocity, 1080, scale);
						Gore.NewGore(base.position + new Vector2(178f, 0f), base.velocity, 1081, scale);
						Gore.NewGore(base.position + new Vector2(136f, 12f), base.velocity, 1082, scale);
						Gore.NewGore(base.position + new Vector2(82f, 18f), base.velocity, 1083, scale);
						Gore.NewGore(base.position + new Vector2(100f, 26f), base.velocity, 1084, scale);
						Gore.NewGore(base.position + new Vector2(170f, 16f), base.velocity, 1085, scale);
						Gore.NewGore(base.position + new Vector2(190f, 10f), base.velocity, 1085, scale);
						Gore.NewGore(base.position + new Vector2(100f, 36f), base.velocity, 1086, scale);
					}
					else
					{
						Gore.NewGore(base.position + new Vector2(176f, 54f), base.velocity, 1079, scale);
						Gore.NewGore(base.position + new Vector2(158f, 90f), base.velocity, 1080, scale);
						Gore.NewGore(base.position + new Vector2(128f, 94f), base.velocity, 1080, scale);
						Gore.NewGore(base.position + new Vector2(0f, 0f), base.velocity, 1081, scale);
						Gore.NewGore(base.position + new Vector2(60f, 12f), base.velocity, 1082, scale);
						Gore.NewGore(base.position + new Vector2(88f, 18f), base.velocity, 1083, scale);
						Gore.NewGore(base.position + new Vector2(86f, 26f), base.velocity, 1084, scale);
						Gore.NewGore(base.position + new Vector2(40f, 16f), base.velocity, 1085, scale);
						Gore.NewGore(base.position + new Vector2(20f, 10f), base.velocity, 1085, scale);
						Gore.NewGore(base.position + new Vector2(142f, 36f), base.velocity, 1086, scale);
					}
				}
			}
			else if (type == 572 || type == 573)
			{
				if (life > 0)
				{
					for (int num36 = 0; (double)num36 < dmg / (double)lifeMax * 20.0; num36++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]))?.Stop();
					SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]))?.Stop();
					for (int num37 = 0; (float)num37 < 20f; num37++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					Vector2 position3 = base.Center - new Vector2(10f, 10f);
					Gore.NewGore(position3, base.velocity, 993, scale);
					Gore.NewGore(new Vector2(position3.X, position3.Y + 20f), base.velocity, 996, scale);
					Gore.NewGore(new Vector2(position3.X, position3.Y + 20f), base.velocity, 995, scale);
					Gore.NewGore(new Vector2(position3.X, position3.Y + 34f), base.velocity, 994, scale);
					Gore.NewGore(new Vector2(position3.X, position3.Y + 34f), base.velocity, 994, scale);
				}
			}
			else if (type == 574 || type == 575)
			{
				if (life > 0)
				{
					for (int num38 = 0; (double)num38 < dmg / (double)lifeMax * 20.0; num38++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[2]))?.Stop();
					for (int num39 = 0; (float)num39 < 20f; num39++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					int num40 = 1050;
					Vector2 vector = base.Center - new Vector2(30f, 10f);
					Gore.NewGore(new Vector2(vector.X, vector.Y + 10f), base.velocity, num40, scale);
					Gore.NewGore(new Vector2(vector.X, vector.Y + 30f), base.velocity, num40 + 1, scale);
					Gore.NewGore(new Vector2(vector.X, vector.Y + 30f), base.velocity, num40 + 2, scale);
					Gore.NewGore(new Vector2(vector.X, vector.Y + 0f), base.velocity, num40 + 3, scale);
					Gore.NewGore(new Vector2(vector.X, vector.Y + 0f), base.velocity, num40 + 4, scale);
				}
			}
			else if (type == 570 || type == 571)
			{
				if (life > 0)
				{
					for (int num41 = 0; (double)num41 < dmg / (double)lifeMax * 20.0; num41++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num42 = 0; (float)num42 < 20f; num42++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					int num43 = ((type == 570) ? 1075 : 979);
					Gore.NewGore(base.position, base.velocity, num43, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num43 + 2, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num43 + 2, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num43 + 3, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num43 + 1, scale);
				}
			}
			else if (type == 568 || type == 569)
			{
				if (life > 0)
				{
					for (int num44 = 0; (double)num44 < dmg / (double)lifeMax * 20.0; num44++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num45 = 0; (float)num45 < 20f; num45++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					Gore.NewGore(base.position, base.velocity, 1020, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 1021, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 1023, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 1022, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 1022, scale);
				}
			}
			else if (type == 558 || type == 559 || type == 560)
			{
				if (life > 0)
				{
					for (int num46 = 0; (double)num46 < dmg / (double)lifeMax * 20.0; num46++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num47 = 0; (float)num47 < 20f; num47++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					int num48 = 974;
					if (type == 559)
					{
						num48 = 1040;
					}
					if (type == 560)
					{
						num48 = 1045;
					}
					Gore.NewGore(base.position, base.velocity, num48 + 2, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, num48, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, num48, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, num48 + 4, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 24f), base.velocity, num48 + 1, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 24f), base.velocity, num48 + 3, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 24f), base.velocity, num48 + 3, scale);
				}
			}
			else if (type == 566 || type == 567)
			{
				if (life > 0)
				{
					for (int num49 = 0; (double)num49 < dmg / (double)lifeMax * 20.0; num49++)
					{
						Dust.NewDust(base.position, width, height, 236, hitDirection, -1f);
					}
				}
				else
				{
					for (int num50 = 0; (float)num50 < 20f; num50++)
					{
						Dust.NewDust(base.position, width, height, 236, hitDirection, -1f);
					}
					Gore.NewGore(base.position, base.velocity, 970, scale);
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 972, scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 972, scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 973, scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 973, scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 971, scale);
					}
					if (Main.rand.Next(2) == 0)
					{
						Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 971, scale);
					}
				}
			}
			else if (type == 576 || type == 577)
			{
				if (life > 0)
				{
					for (int num51 = 0; (double)num51 < dmg / (double)lifeMax * 20.0; num51++)
					{
						Dust.NewDust(base.position, width, height, 273, hitDirection, -1f);
					}
				}
				else
				{
					for (int num52 = 0; (float)num52 < 20f; num52++)
					{
						Dust.NewDust(base.position, width, height, 273, hitDirection, -1f);
					}
					if (spriteDirection == -1)
					{
						Gore.NewGore(base.position + new Vector2(0f, 0f), base.velocity, 1005 + ((Main.rand.Next(5) == 0) ? 1 : 0), scale);
						Gore.NewGore(base.position + new Vector2(18f, 28f), base.velocity, 1000, scale);
						int num53 = Gore.NewGore(base.position + new Vector2(-40f, 70f), base.velocity, 1001, scale);
						Main.gore[num53].rotation = (float)Math.PI;
						num53 = Gore.NewGore(base.position + new Vector2(4f, 28f), base.velocity, 1002, scale);
						Main.gore[num53].rotation = (float)Math.PI;
						Gore.NewGore(base.position + new Vector2(36f, 90f), base.velocity, 1003, scale);
						Gore.NewGore(base.position + new Vector2(32f, 90f), base.velocity, 1004, scale);
					}
					else
					{
						Gore.NewGore(base.position + new Vector2(48f, 0f), base.velocity, 1005 + ((Main.rand.Next(5) == 0) ? 1 : 0), scale);
						Gore.NewGore(base.position + new Vector2(22f, 28f), base.velocity, 1000, scale);
						Gore.NewGore(base.position + new Vector2(48f, 70f), base.velocity, 1001, scale);
						Gore.NewGore(base.position + new Vector2(4f, 28f), base.velocity, 1002, scale);
						Gore.NewGore(base.position + new Vector2(36f, 90f), base.velocity, 1003, scale);
						Gore.NewGore(base.position + new Vector2(32f, 90f), base.velocity, 1004, scale);
					}
				}
			}
			else if (type == 564 || type == 565)
			{
				if (life > 0)
				{
					for (int num54 = 0; (double)num54 < dmg / (double)lifeMax * 20.0; num54++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num55 = 0; (float)num55 < 20f; num55++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					int num56 = 1009;
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, num56, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 15f), base.velocity, num56 + 1, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 15f), base.velocity, num56 + 2, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 15f), base.velocity, num56 + 3, scale);
					Gore.NewGore(new Vector2(base.position.X - 20f, base.position.Y + 35f), base.velocity, num56 + 4, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 35f), base.velocity, num56 + 5, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 35f), base.velocity, num56 + 6, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 35f), base.velocity, num56 + 10, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 25f), base.velocity, num56 + 7, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 25f), base.velocity, num56 + 8, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 25f), base.velocity, num56 + 9, scale);
				}
			}
			else if (type == 578)
			{
				if (life > 0)
				{
					for (int num57 = 0; (double)num57 < dmg / (double)lifeMax * 20.0; num57++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num58 = 0; (float)num58 < 20f; num58++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					Gore.NewGore(base.position, base.velocity, 999, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 998, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 998, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 997, scale);
				}
			}
			else if (type == 620)
			{
				if (life > 0)
				{
					for (int num59 = 0; (double)num59 < dmg / (double)lifeMax * 150.0; num59++)
					{
						Dust dust6 = Dust.NewDustDirect(base.position, width, height, 5, hitDirection, -1f);
						Dust dust = dust6;
						dust.velocity *= 2.5f;
						dust6.scale = 1.7f;
					}
				}
				else
				{
					for (int num60 = 0; (float)num60 < 150f; num60++)
					{
						Dust dust7 = Dust.NewDustDirect(base.position, width, height, 5, hitDirection, -1f);
						Dust dust = dust7;
						dust.velocity *= 2.5f;
						dust7.scale = 1.7f;
					}
					int num61 = 1183;
					Gore.NewGore(base.position, base.velocity, num61, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num61 + 2, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num61 + 3, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num61 + 1, scale);
				}
			}
			else if (type == 619)
			{
				if (life > 0)
				{
					for (int num62 = 0; (double)num62 < dmg / (double)lifeMax * 150.0; num62++)
					{
						Dust dust8 = Dust.NewDustDirect(base.position, width, height, 5, hitDirection, -1f);
						Dust dust = dust8;
						dust.velocity *= 2.5f;
						dust8.fadeIn = 1.7f;
					}
				}
				else
				{
					for (int num63 = 0; (float)num63 < 150f; num63++)
					{
						Dust dust9 = Dust.NewDustDirect(base.position, width, height, 5, hitDirection, -1f);
						Dust dust = dust9;
						dust.velocity *= 2.5f;
						dust9.fadeIn = 1.7f;
					}
					int num64 = 1179;
					Gore.NewGore(base.position, base.velocity, num64, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num64 + 2, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num64 + 3, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num64 + 1, scale);
				}
			}
			else if (type == 618)
			{
				if (life > 0)
				{
					for (int num65 = 0; (double)num65 < dmg / (double)lifeMax * 200.0; num65++)
					{
						Dust dust10 = Dust.NewDustDirect(base.position, width, height, 5, hitDirection, -1f);
						Dust dust = dust10;
						dust.velocity *= 2.5f;
						dust10.scale = 2f;
					}
				}
				else
				{
					for (int num66 = 0; (float)num66 < 200f; num66++)
					{
						Dust dust11 = Dust.NewDustDirect(base.position, width, height, 5, hitDirection, -1f);
						Dust dust = dust11;
						dust.velocity *= 2.5f;
						dust11.scale = 2.5f;
					}
					int num67 = 1172;
					Gore.NewGore(new Vector2(base.Right.X - 30f, base.position.Y), base.velocity, num67, scale);
					Gore.NewGore(base.position, base.velocity, num67, scale);
					Gore.NewGore(new Vector2(base.Right.X - 30f, base.position.Y), base.velocity, num67 + 1, scale);
					Gore.NewGore(base.position, base.velocity, num67 + 1, scale);
					Gore.NewGore(base.position, base.velocity, num67 + 2, scale);
					Gore.NewGore(base.position, base.velocity, num67 + 3, scale);
					Gore.NewGore(base.position, base.velocity, num67 + 4, scale);
					Gore.NewGore(base.position, base.velocity, num67 + 4, scale);
					Gore.NewGore(base.position, base.velocity, num67 + 5, scale);
					Gore.NewGore(base.position, base.velocity, num67 + 5, scale);
					Gore.NewGore(base.position, base.velocity, num67 + 6, scale);
					Gore.NewGore(base.position, base.velocity, num67 + 6, scale);
				}
			}
			else if (type == 541)
			{
				Color color = new Color(222, 108, 48) * 0.7f;
				if (life > 0)
				{
					for (int num68 = 0; (double)num68 < dmg / (double)lifeMax * 200.0; num68++)
					{
						Dust dust12 = Main.dust[Dust.NewDust(base.position, width, height, 268)];
						dust12.color = color;
						dust12.noGravity = true;
						dust12.scale = 1.5f;
						dust12.fadeIn = 0.7f;
						Dust dust = dust12;
						dust.velocity *= 3f;
						dust12 = Main.dust[Dust.NewDust(base.position, width, height, 268)];
						dust12.color = color;
						dust12.noGravity = true;
						dust12.scale = 1.5f;
						dust12.fadeIn = 0.7f;
						dust = dust12;
						dust.velocity *= 3f;
					}
				}
				else
				{
					for (int num69 = 0; num69 < 30; num69++)
					{
						Dust dust13 = Main.dust[Dust.NewDust(base.position, width, height, 268)];
						dust13.color = color;
						dust13.noGravity = true;
						dust13.scale = 1.5f;
						dust13.fadeIn = 0.7f;
						Dust dust = dust13;
						dust.velocity *= 3f;
						dust13 = Main.dust[Dust.NewDust(base.position, width, height, 268)];
						dust13.color = color;
						dust13.noGravity = true;
						dust13.scale = 1.5f;
						dust13.fadeIn = 0.7f;
						dust = dust13;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.position, base.velocity, 960, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 961, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 963, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 40f), base.velocity, 962, scale);
				}
			}
			else if (type == 546)
			{
				Color color2 = new Color(150, 108, 78) * 0.7f;
				if (life > 0)
				{
					for (int num70 = 0; (double)num70 < dmg / (double)lifeMax * 50.0; num70++)
					{
						Dust dust14 = Main.dust[Dust.NewDust(base.position, width, height, 268)];
						dust14.color = color2;
						dust14.noGravity = true;
						dust14.scale = 1.5f;
						dust14.fadeIn = 0.7f;
						Dust dust = dust14;
						dust.velocity *= 3f;
						dust14 = Main.dust[Dust.NewDust(base.position, width, height, 268)];
						dust14.color = color2;
						dust14.noGravity = true;
						dust14.scale = 1.5f;
						dust14.fadeIn = 0.7f;
						dust = dust14;
						dust.velocity *= 3f;
					}
				}
				else
				{
					for (int num71 = 0; num71 < 20; num71++)
					{
						Dust dust15 = Main.dust[Dust.NewDust(base.position, width, height, 268)];
						dust15.color = color2;
						dust15.noGravity = true;
						dust15.scale = 1.5f;
						dust15.fadeIn = 0.7f;
						Dust dust = dust15;
						dust.velocity *= 3f;
						dust15 = Main.dust[Dust.NewDust(base.position, width, height, 268)];
						dust15.color = color2;
						dust15.noGravity = true;
						dust15.scale = 1.5f;
						dust15.fadeIn = 0.7f;
						dust = dust15;
						dust.velocity *= 3f;
					}
					for (int num72 = 0; num72 < 20; num72++)
					{
						int num73 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num73];
						dust.velocity *= 2f;
						Main.dust[num73].noGravity = true;
					}
					Gore.NewGore(base.position, base.velocity, 964, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 965, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 966, scale);
				}
			}
			if (type == 378)
			{
				if (life > 0)
				{
					for (int num74 = 0; (double)num74 < dmg / (double)lifeMax * 50.0; num74++)
					{
						Dust.NewDust(base.position, width, height, 7);
					}
				}
				else
				{
					for (int num75 = 0; num75 < 20; num75++)
					{
						Dust.NewDust(base.position, width, height, 7);
					}
				}
			}
			if (type == 437 && dmg == 9999.0)
			{
				for (int num76 = 0; num76 < 6; num76++)
				{
					Gore.NewGore(base.Center - new Vector2(10f), Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 5f, 728 + num76);
				}
			}
			if (type == 398 && dmg == 1337.0 && Main.netMode != 2)
			{
				MoonlordDeathDrama.ThrowPieces(base.Center, Main.rand.Next(100));
			}
			if (type == 488)
			{
				localAI[0] = (int)dmg;
				if (localAI[0] < 20f)
				{
					localAI[0] = 20f;
				}
				if (localAI[0] > 120f)
				{
					localAI[0] = 120f;
				}
				localAI[1] = hitDirection;
			}
			if (type == 583 || type == 584 || type == 585)
			{
				Color value2 = Color.HotPink;
				Color value3 = Color.LightPink;
				int num77 = 4;
				if (type == 584)
				{
					value2 = Color.LimeGreen;
					value3 = Color.LightSeaGreen;
				}
				if (type == 585)
				{
					value2 = Color.RoyalBlue;
					value3 = Color.LightBlue;
				}
				if (life > 0)
				{
					for (int num78 = 0; (double)num78 < dmg / (double)lifeMax * 50.0; num78++)
					{
						Dust dust16 = Dust.NewDustDirect(base.Center - new Vector2(num77) * 0.5f, num77 + 4, num77 + 4, 278, 0f, 0f, 200, Color.Lerp(value2, value3, Main.rand.NextFloat()), 0.65f);
						dust16.noGravity = true;
					}
				}
				else
				{
					for (int num79 = 0; num79 < 20; num79++)
					{
						Dust dust17 = Dust.NewDustDirect(base.Center - new Vector2(num77) * 0.5f, num77 + 4, num77 + 4, 278, 0f, 0f, 200, Color.Lerp(value2, value3, Main.rand.NextFloat()), 0.65f);
						Dust dust = dust17;
						dust.velocity *= 1.5f;
						dust17.noGravity = true;
					}
				}
			}
			else if (type >= 513 && type <= 515)
			{
				if (life > 0)
				{
					for (int num80 = 0; (double)num80 < dmg / (double)lifeMax * 100.0; num80++)
					{
						Dust.NewDust(base.position, width, height, 250, hitDirection, -1f, alpha, this.color, scale);
					}
				}
				else
				{
					for (int num81 = 0; num81 < 50; num81++)
					{
						Dust.NewDust(base.position, width, height, 250, hitDirection, -2f, alpha, this.color, scale);
					}
					int num82 = Gore.NewGore(base.position, base.velocity, type - 513 + 822);
					Main.gore[num82].alpha = alpha;
				}
			}
			else if (type >= 510 && type <= 512)
			{
				if (life > 0)
				{
					for (int num83 = 0; (double)num83 < dmg / (double)lifeMax * 100.0; num83++)
					{
						Dust.NewDust(base.position, width, height, 250, hitDirection, -1f, alpha, this.color, scale);
					}
				}
				else
				{
					for (int num84 = 0; num84 < 50; num84++)
					{
						Dust.NewDust(base.position, width, height, 250, hitDirection, -2f, alpha, this.color, scale);
					}
					int num85 = Gore.NewGore(base.position, base.velocity, type - 510 + 819);
					Main.gore[num85].alpha = alpha;
				}
			}
			else if (type >= 621 && type <= 623)
			{
				if (life > 0)
				{
					for (int num86 = 0; (double)num86 < dmg / (double)lifeMax * 100.0; num86++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f, alpha, this.color, scale);
					}
				}
				else
				{
					for (int num87 = 0; num87 < 50; num87++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -2f, alpha, this.color, scale);
					}
					int num88 = Gore.NewGore(base.position, base.velocity, type - 621 + 1187);
					Main.gore[num88].alpha = alpha;
				}
			}
			else if (type == 518 || type == 416)
			{
				if (life > 0)
				{
					for (int num89 = 0; (double)num89 < dmg / (double)lifeMax * 20.0; num89++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust18 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
							dust18.noGravity = true;
							dust18.scale = 1.5f;
							dust18.fadeIn = 1f;
							Dust dust = dust18;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num90 = 0; num90 < 20; num90++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust19 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
							dust19.noGravity = true;
							dust19.scale = 1.5f;
							dust19.fadeIn = 1f;
							Dust dust = dust19;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(base.position, base.velocity, 844, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 845, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 847, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 835, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 836, scale);
				}
			}
			else if (type == 419)
			{
				if (life > 0)
				{
					for (int num91 = 0; (double)num91 < dmg / (double)lifeMax * 20.0; num91++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust20 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
							dust20.noGravity = true;
							dust20.scale = 1.5f;
							dust20.fadeIn = 1f;
							Dust dust = dust20;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num92 = 0; num92 < 20; num92++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust21 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
							dust21.noGravity = true;
							dust21.scale = 1.5f;
							dust21.fadeIn = 1f;
							Dust dust = dust21;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(base.position, base.velocity, 844, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 845, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 846, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 846, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 847, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 847, scale);
				}
			}
			else if (type == 412 || type == 413 || type == 414)
			{
				if (life > 0)
				{
					for (int num93 = 0; (double)num93 < dmg / (double)lifeMax * 50.0; num93++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
					}
				}
				else
				{
					for (int num94 = 0; num94 < 6; num94++)
					{
						Dust.NewDust(base.position, width, height, 241, 2.5f * (float)hitDirection, -2.5f);
					}
					for (int num95 = 0; num95 < 2; num95++)
					{
						Dust.NewDust(base.position, width, height, 6, 2.5f * (float)hitDirection, -2.5f, 100, Color.Transparent, 2f);
					}
					Gore.NewGore(base.position, base.velocity, type - 412 + 828);
				}
			}
			else if (type == 415)
			{
				if (life > 0)
				{
					for (int num96 = 0; (double)num96 < dmg / (double)lifeMax * 20.0; num96++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust22 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
							dust22.noGravity = true;
							dust22.scale = 1.5f;
							dust22.fadeIn = 1f;
							Dust dust = dust22;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num97 = 0; num97 < 40; num97++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						Dust dust23 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
						dust23.noGravity = true;
						dust23.scale = 1.5f;
						dust23.fadeIn = 1f;
						Dust dust = dust23;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 831);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 832);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 833);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 834);
				}
			}
			else if (type == 417)
			{
				if (life > 0)
				{
					for (int num98 = 0; (double)num98 < dmg / (double)lifeMax * 20.0; num98++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust24 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
							dust24.noGravity = true;
							dust24.scale = 1.5f;
							dust24.fadeIn = 1f;
							Dust dust = dust24;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num99 = 0; num99 < 30; num99++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust25 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
							dust25.noGravity = true;
							dust25.scale = 1.5f;
							dust25.fadeIn = 1f;
							Dust dust = dust25;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(base.position, base.velocity, 837, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 838, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 838, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 838, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 839, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 839, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 38f), base.velocity, 840, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 38f), base.velocity, 840, scale);
				}
			}
			else if (type == 418)
			{
				if (life > 0)
				{
					for (int num100 = 0; (double)num100 < dmg / (double)lifeMax * 20.0; num100++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust26 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
							dust26.noGravity = true;
							dust26.scale = 1.5f;
							dust26.fadeIn = 1f;
							Dust dust = dust26;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num101 = 0; num101 < 20; num101++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						Dust dust27 = Main.dust[Dust.NewDust(base.position, width, height, 6)];
						dust27.noGravity = true;
						dust27.scale = 1.5f;
						dust27.fadeIn = 1f;
						Dust dust = dust27;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 841);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 842);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 842);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 843);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 843);
				}
			}
			if (type == 516)
			{
				for (int num102 = 0; num102 < 20; num102++)
				{
					int num103 = Dust.NewDust(base.position, width, height, 6, 2.5f * (float)hitDirection, -2.5f);
					Dust dust = Main.dust[num103];
					dust.velocity *= 3f;
					dust = Main.dust[num103];
					dust.scale += Main.rand.NextFloat();
					if (Main.rand.Next(2) == 0)
					{
						num103 = Dust.NewDust(base.position, width, height, 259, 2.5f * (float)hitDirection, -2.5f);
						Main.dust[num103].noGravity = true;
					}
				}
			}
			if (type == 519)
			{
				Rectangle hitbox2 = base.Hitbox;
				for (int num104 = 0; num104 < oldPos.Length; num104 += 3)
				{
					hitbox2.X = (int)oldPos[num104].X;
					hitbox2.Y = (int)oldPos[num104].Y;
					for (int num105 = 0; num105 < 5; num105++)
					{
						int num106 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num107 = Dust.NewDust(hitbox2.TopLeft(), width, height, num106, 2.5f * (float)hitDirection, -2.5f);
						Main.dust[num107].alpha = 200;
						Dust dust = Main.dust[num107];
						dust.velocity *= 2.4f;
						dust = Main.dust[num107];
						dust.scale += Main.rand.NextFloat();
					}
				}
			}
			if (type == 522)
			{
				Vector2 spinningpoint = new Vector2(0f, -3f).RotatedByRandom(3.1415927410125732);
				float num108 = 24f;
				Vector2 value4 = new Vector2(1.05f, 1f);
				for (float num109 = 0f; num109 < num108; num109++)
				{
					int num110 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent);
					Main.dust[num110].position = base.Center;
					Main.dust[num110].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num109 / num108) * value4 * (0.8f + Main.rand.NextFloat() * 0.4f) * 2f;
					Main.dust[num110].color = Color.SkyBlue;
					Main.dust[num110].noGravity = true;
					Dust dust = Main.dust[num110];
					dust.scale += 0.5f + Main.rand.NextFloat();
				}
			}
			else if (type == 426)
			{
				if (life > 0)
				{
					for (int num111 = 0; (double)num111 < dmg / (double)lifeMax * 50.0; num111++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust28 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust28.noGravity = true;
							dust28.scale = 1.5f;
							dust28.fadeIn = 1f;
							Dust dust = dust28;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num112 = 0; num112 < 20; num112++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
					}
					for (int num113 = 0; num113 < 30; num113++)
					{
						int num114 = Utils.SelectRandom<int>(Main.rand, 229, 240, 161);
						Dust dust29 = Main.dust[Dust.NewDust(base.position, width, height, num114)];
						dust29.noGravity = true;
						dust29.scale = 1.25f + Main.rand.NextFloat();
						dust29.fadeIn = 0.25f;
						Dust dust = dust29;
						dust.velocity *= 2f;
						dust29.noLight = true;
					}
					Gore.NewGore(base.Top, base.velocity * 0.7f, 799);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 800);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 801);
					if (Main.netMode != 1)
					{
						for (int num115 = 0; num115 < 3; num115++)
						{
							int num116 = NewNPC((int)base.Center.X, (int)base.Center.Y, 428, whoAmI);
							Main.npc[num116].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * Main.rand.Next(3, 6) - Vector2.UnitY * 2f;
							Main.npc[num116].netUpdate = true;
						}
					}
				}
			}
			else if (type == 427)
			{
				if (life > 0)
				{
					for (int num117 = 0; (double)num117 < dmg / (double)lifeMax * 20.0; num117++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust30 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust30.noGravity = true;
							dust30.scale = 1.5f;
							dust30.fadeIn = 1f;
							Dust dust = dust30;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num118 = 0; num118 < 10; num118++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
					}
					for (int num119 = 0; num119 < 20; num119++)
					{
						int num120 = Utils.SelectRandom<int>(Main.rand, 229, 229, 240);
						Dust dust31 = Main.dust[Dust.NewDust(base.position, width, height, num120)];
						dust31.noGravity = true;
						dust31.scale = 1.25f + Main.rand.NextFloat();
						dust31.fadeIn = 0.25f;
						Dust dust = dust31;
						dust.velocity *= 3f;
						dust31.noLight = true;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 802);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 803);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 804);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 805);
				}
			}
			else if (type == 429)
			{
				if (life > 0)
				{
					for (int num121 = 0; (double)num121 < dmg / (double)lifeMax * 20.0; num121++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust32 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust32.noGravity = true;
							dust32.scale = 1.5f;
							dust32.fadeIn = 1f;
							Dust dust = dust32;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num122 = 0; num122 < 20; num122++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust33 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust33.noGravity = true;
							dust33.scale = 1.5f;
							dust33.fadeIn = 1f;
							Dust dust = dust33;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(base.position, base.velocity, 808, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 809, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 809, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 810, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 810, scale);
					if (Main.netMode != 1)
					{
						Point point = base.Center.ToTileCoordinates();
						Point point2 = Main.player[target].Center.ToTileCoordinates();
						Vector2 vector2 = Main.player[target].Center - base.Center;
						int num123 = 20;
						int num124 = 3;
						int num125 = 7;
						int num126 = 2;
						int num127 = 0;
						bool flag2 = false;
						if (vector2.Length() > 2000f)
						{
							flag2 = true;
						}
						while (!flag2 && num127 < 100)
						{
							num127++;
							int num128 = Main.rand.Next(point2.X - num123, point2.X + num123 + 1);
							int num129 = Main.rand.Next(point2.Y - num123, point2.Y - Math.Abs(num128 - point2.X) + 1);
							if ((num129 < point2.Y - num125 || num129 > point2.Y + num125 || num128 < point2.X - num125 || num128 > point2.X + num125) && (num129 < point.Y - num124 || num129 > point.Y + num124 || num128 < point.X - num124 || num128 > point.X + num124) && !Main.tile[num128, num129].nactive())
							{
								bool flag3 = true;
								if (flag3 && Main.tile[num128, num129].lava())
								{
									flag3 = false;
								}
								if (flag3 && Collision.SolidTiles(num128 - num126, num128 + num126, num129 - num126, num129 + num126))
								{
									flag3 = false;
								}
								if (flag3 && !Collision.CanHitLine(base.Center, 0, 0, Main.player[target].Center, 0, 0))
								{
									flag3 = false;
								}
								if (flag3)
								{
									Projectile.NewProjectile(num128 * 16 + 8, num129 * 16 + 8, 0f, 0f, 578, 0, 1f, Main.myPlayer);
									flag2 = true;
									break;
								}
							}
						}
					}
				}
			}
			else if (type == 425)
			{
				if (life > 0)
				{
					for (int num130 = 0; (double)num130 < dmg / (double)lifeMax * 20.0; num130++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust34 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust34.noGravity = true;
							dust34.scale = 1.5f;
							dust34.fadeIn = 1f;
							Dust dust = dust34;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num131 = 0; num131 < 20; num131++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust35 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust35.noGravity = true;
							dust35.scale = 1.5f;
							dust35.fadeIn = 1f;
							Dust dust = dust35;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(base.position, base.velocity, 796, scale);
					Gore.NewGore(base.Center, base.velocity, 797, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 798, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 809, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 809, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 810, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 810, scale);
				}
			}
			else if (type == 428)
			{
				if (life > 0)
				{
					for (int num132 = 0; (double)num132 < dmg / (double)lifeMax * 20.0; num132++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
					}
				}
				else
				{
					for (int num133 = 0; num133 < 10; num133++)
					{
						Dust.NewDust(base.position, width, height, 241, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust.NewDust(base.position, width, height, 229);
						}
						else
						{
							Dust.NewDust(base.position, width, height, 240);
						}
					}
					Gore.NewGore(base.position, base.velocity * 0.8f, 806);
					Gore.NewGore(base.position, base.velocity * 0.8f, 807);
				}
			}
			else if (type == 424)
			{
				if (life > 0)
				{
					for (int num134 = 0; (double)num134 < dmg / (double)lifeMax * 20.0; num134++)
					{
						Dust.NewDust(base.position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust36 = Main.dust[Dust.NewDust(base.position, width, height, 242)];
							dust36.noGravity = true;
							dust36.scale = 1.5f;
							dust36.fadeIn = 1f;
							Dust dust = dust36;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num135 = 0; num135 < 20; num135++)
					{
						Dust.NewDust(base.position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(3) == 0)
						{
							Dust dust37 = Main.dust[Dust.NewDust(base.position, width, height, 242)];
							dust37.noGravity = true;
							dust37.scale = 1.5f;
							dust37.fadeIn = 1f;
							Dust dust = dust37;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(base.position, base.velocity, 793, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 794, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 794, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 795, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 795, scale);
				}
			}
			else if (type == 423)
			{
				if (life > 0)
				{
					for (int num136 = 0; (double)num136 < dmg / (double)lifeMax * 50.0; num136++)
					{
						Dust.NewDust(base.position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust38 = Main.dust[Dust.NewDust(base.position, width, height, 242)];
							dust38.noGravity = true;
							dust38.scale = 1.5f;
							dust38.fadeIn = 1f;
							Dust dust = dust38;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num137 = 0; num137 < 20; num137++)
					{
						Dust.NewDust(base.position, width, height, 249, hitDirection, -1f);
						Dust dust39 = Main.dust[Dust.NewDust(base.position, width, height, 242)];
						dust39.noGravity = true;
						dust39.scale = 1.5f;
						dust39.fadeIn = 1f;
						Dust dust = dust39;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 790);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 791);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 792);
				}
			}
			else if (type == 421)
			{
				if (life > 0)
				{
					for (int num138 = 0; (double)num138 < dmg / (double)lifeMax * 20.0; num138++)
					{
						Dust.NewDust(base.position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust40 = Main.dust[Dust.NewDust(base.position, width, height, 242)];
							dust40.noGravity = true;
							dust40.scale = 1.5f;
							dust40.fadeIn = 1f;
							Dust dust = dust40;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num139 = 0; num139 < 10; num139++)
					{
						Dust.NewDust(base.position, width, height, 249, hitDirection, -1f);
						Dust dust41 = Main.dust[Dust.NewDust(base.position, width, height, 242)];
						dust41.noGravity = true;
						dust41.scale = 1.5f;
						dust41.fadeIn = 1f;
						Dust dust = dust41;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 785);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 786);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 787);
				}
			}
			else if (type == 420)
			{
				if (life > 0)
				{
					for (int num140 = 0; (double)num140 < dmg / (double)lifeMax * 20.0; num140++)
					{
						Dust.NewDust(base.position, width, height, 249, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust42 = Main.dust[Dust.NewDust(base.position, width, height, 242)];
							dust42.noGravity = true;
							dust42.scale = 1.5f;
							dust42.fadeIn = 1f;
							Dust dust = dust42;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num141 = 0; num141 < 10; num141++)
					{
						Dust.NewDust(base.position, width, height, 249, hitDirection, -1f);
						Dust dust43 = Main.dust[Dust.NewDust(base.position, width, height, 242)];
						dust43.noGravity = true;
						dust43.scale = 1.5f;
						dust43.fadeIn = 1f;
						Dust dust = dust43;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 782);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 783);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 784);
				}
			}
			else if (type == 406 || type == 405)
			{
				if (life > 0)
				{
					for (int num142 = 0; (double)num142 < 10.0 + dmg / 10.0; num142++)
					{
						int num143 = width / 4;
						Vector2 vector3 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
						int num144 = Dust.NewDust(base.Center - Vector2.One * num143, num143 * 2, num143 * 2, 229);
						Dust dust44 = Main.dust[num144];
						Vector2 vector4 = Vector2.Normalize(dust44.position - base.Center);
						dust44.position = base.Center + vector4 * num143 * scale - new Vector2(4f);
						if (num142 < 30)
						{
							dust44.velocity = vector4 * dust44.velocity.Length() * 2f;
						}
						else
						{
							dust44.velocity = 2f * vector4 * Main.rand.Next(45, 91) / 10f;
						}
						dust44.noGravity = true;
						dust44.scale = 0.7f + Main.rand.NextFloat();
					}
				}
				else
				{
					for (int num145 = 0; num145 < 60; num145++)
					{
						int num146 = width / 4;
						Vector2 vector5 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
						int num147 = Dust.NewDust(base.Center - Vector2.One * num146, num146 * 2, num146 * 2, 229);
						Dust dust45 = Main.dust[num147];
						Vector2 vector6 = Vector2.Normalize(dust45.position - base.Center);
						dust45.position = base.Center + vector6 * num146 * scale - new Vector2(4f);
						if (num145 < 30)
						{
							dust45.velocity = vector6 * dust45.velocity.Length() * 2f;
						}
						else
						{
							dust45.velocity = 2f * vector6 * Main.rand.Next(45, 91) / 10f;
						}
						dust45.noGravity = true;
						dust45.scale = 0.7f;
					}
					if (type == 405)
					{
						int num148 = CountNPCS(406) + CountNPCS(405);
						int num149 = 4;
						if (num148 >= 4)
						{
							num149 = 3;
						}
						if (num148 >= 7)
						{
							num149 = 2;
						}
						if (num148 >= 10)
						{
							num149 = 1;
						}
						for (int num150 = 0; num150 < num149; num150++)
						{
							Vector2 velocity2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f + Main.rand.NextFloat() * 4f);
							int num151 = NewNPC((int)base.Center.X, (int)base.Bottom.Y, 406, whoAmI);
							Main.npc[num151].velocity = velocity2;
						}
					}
				}
			}
			else if (type == 409)
			{
				if (life > 0)
				{
					for (int num152 = 0; (double)num152 < dmg / (double)lifeMax * 50.0; num152++)
					{
						Dust.NewDust(base.position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust46 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust46.noGravity = true;
						}
					}
				}
				else
				{
					for (int num153 = 0; num153 < 20; num153++)
					{
						Dust.NewDust(base.position, width, height, 17, hitDirection, -1f);
						Dust dust47 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
						dust47.noGravity = true;
						Dust dust = dust47;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 775);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 776);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 777);
				}
			}
			else if (type == 410)
			{
				if (life > 0)
				{
					for (int num154 = 0; (double)num154 < dmg / (double)lifeMax * 10.0; num154++)
					{
						Dust.NewDust(base.position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust48 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust48.noGravity = true;
						}
					}
				}
				else
				{
					for (int num155 = 0; num155 < 5; num155++)
					{
						Dust.NewDust(base.position, width, height, 17, hitDirection, -1f);
						Dust dust49 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
						dust49.noGravity = true;
						Dust dust = dust49;
						dust.velocity *= 3f;
					}
				}
			}
			else if (type == 407)
			{
				if (life > 0)
				{
					for (int num156 = 0; (double)num156 < dmg / (double)lifeMax * 50.0; num156++)
					{
						Dust.NewDust(base.position, width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust50 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust50.noGravity = true;
						}
					}
				}
				else
				{
					for (int num157 = 0; num157 < 20; num157++)
					{
						if (Main.rand.Next(3) != 0)
						{
							Dust.NewDust(base.position, width, height, 17, hitDirection, -1f);
						}
						Dust dust51 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
						dust51.noGravity = true;
						Dust dust = dust51;
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.Top, base.velocity * 0.8f, 778);
					Gore.NewGore(base.Top, base.velocity * 0.8f, 779);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 780);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 781);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 780);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 781);
				}
			}
			else if (type == 402)
			{
				if (life > 0)
				{
					for (int num158 = 0; (double)num158 < dmg / (double)lifeMax * 3.0; num158++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust.NewDust(base.position, width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
						}
						if (Main.rand.Next(2) == 0)
						{
							Dust dust52 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust52.noGravity = true;
						}
						for (int num159 = 0; num159 < oldPos.Length; num159++)
						{
							if (Main.rand.Next(4) == 0)
							{
								if (oldPos[num159] == Vector2.Zero)
								{
									break;
								}
								if (Main.rand.Next(3) == 0)
								{
									Dust.NewDust(oldPos[num159], width, height, 17, hitDirection, -1f, 0, Color.Transparent, 0.75f);
								}
								if (Main.rand.Next(2) == 0)
								{
									Dust dust53 = Main.dust[Dust.NewDust(oldPos[num159], width, height, 229)];
									dust53.noGravity = true;
								}
							}
						}
					}
				}
				else
				{
					for (int num160 = 0; num160 < 5; num160++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust.NewDust(base.position, width, height, 17, hitDirection, -1f);
						}
						Dust dust54 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
						dust54.noGravity = true;
						Dust dust = dust54;
						dust.velocity *= 3f;
					}
					for (int num161 = 0; num161 < oldPos.Length; num161++)
					{
						if (Main.rand.Next(4) != 0)
						{
							continue;
						}
						if (oldPos[num161] == Vector2.Zero)
						{
							break;
						}
						for (int num162 = 0; num162 < 2; num162++)
						{
							if (Main.rand.Next(3) == 0)
							{
								Dust.NewDust(oldPos[num161], width, height, 17, hitDirection, -1f);
							}
							Dust dust55 = Main.dust[Dust.NewDust(oldPos[num161], width, height, 229)];
							dust55.noGravity = true;
							Dust dust = dust55;
							dust.velocity *= 3f;
						}
					}
				}
			}
			else if (type == 411)
			{
				if (life > 0)
				{
					for (int num163 = 0; (double)num163 < dmg / (double)lifeMax * 20.0; num163++)
					{
						Dust.NewDust(base.position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(4) == 0)
						{
							Dust dust56 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust56.noGravity = true;
						}
					}
				}
				else
				{
					for (int num164 = 0; num164 < 20; num164++)
					{
						Dust.NewDust(base.position, width, height, 17, hitDirection, -1f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust57 = Main.dust[Dust.NewDust(base.position, width, height, 229)];
							dust57.noGravity = true;
						}
					}
					Gore.NewGore(base.position, base.velocity, 772, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 773, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 773, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 774, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 774, scale);
				}
			}
			else if (type == 491)
			{
				if (life <= 0)
				{
					Vector2 value5 = base.Center - new Vector2(60f);
					Vector2 vector7 = new Vector2((spriteDirection != 1) ? 1 : (-1), 0f).RotatedBy(rotation);
					Gore.NewGore(value5 + vector7 * (width / 2), base.velocity, 858, scale);
					Gore.NewGore(value5 + vector7 * (width / 3), base.velocity, 857, scale);
					for (int num165 = -1; num165 < 2; num165++)
					{
						Gore.NewGore(value5 + vector7 * ((float)width * (0.45f + (float)num165 * 0.1f)), base.velocity, 859, scale);
						Gore.NewGore(value5 + vector7 * ((float)width * (0.4f + (float)num165 * 0.1f)), base.velocity, 859, scale);
						Gore.NewGore(value5 + vector7 * ((float)width * (0.35f + (float)num165 * 0.1f)), base.velocity, 859, scale);
					}
					for (int num166 = -1; num166 < 2; num166++)
					{
						Gore.NewGore(value5 + vector7 * ((float)width * 0.35f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(value5 + vector7 * ((float)width * 0.15f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(value5 + vector7 * ((float)width * -0.35f) - new Vector2(0f, 200f) + Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(value5 + vector7 * ((float)width * -0.15f) - new Vector2(0f, 300f) + Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
						Gore.NewGore(value5 + vector7 * ((float)width * -0.15f) - new Vector2(0f, 300f) + Utils.RandomVector2(Main.rand, -40f, 40f), base.velocity, Utils.SelectRandom<int>(Main.rand, 860, 892, 893), scale);
					}
					for (int num167 = 0; num167 < 2; num167++)
					{
						Gore.NewGore(value5 + vector7 * ((float)width * 0.15f) - new Vector2(0f, 160 + 60 * num167), base.velocity, 855, scale);
						Gore.NewGore(value5 + vector7 * ((float)width * -0.15f) - new Vector2(0f, 160 + 60 * num167), base.velocity, 855, scale);
					}
					for (int num168 = -1; num168 < 2; num168++)
					{
						Gore.NewGore(value5 + vector7 * ((float)width * (0.25f + (float)num168 * 0.1f)) - new Vector2(0f, 20 + 40 * num168), base.velocity, 854, scale);
						Gore.NewGore(value5 + vector7 * ((float)width * (-0.45f + (float)num168 * 0.1f)) - new Vector2(0f, 20 + 40 * num168), base.velocity, 853, scale);
						Gore.NewGore(value5 + vector7 * ((float)width * (0.05f + (float)num168 * 0.1f)) - new Vector2(0f, 20 + 40 * num168), base.velocity, 856, scale);
					}
					for (int num169 = 0; num169 < 30; num169++)
					{
						int num170 = Main.rand.Next(861, 863);
						int num171 = Gore.NewGore(base.Center - new Vector2(60f), Vector2.Zero, num170);
						Main.gore[num171].alpha = 100;
						Main.gore[num171].velocity = Vector2.Transform(new Vector2(4f, 0f), Matrix.CreateRotationZ((float)(Main.rand.NextDouble() * 6.2831854820251465)));
						Main.gore[num171].position = new Vector2(base.position.X - 20f + ((float)width + 40f) * Main.rand.NextFloat(), base.position.Y - 240f + (float)(height + 240 - 20) * Main.rand.NextFloat());
					}
					for (int num172 = 0; num172 < 120; num172++)
					{
						int num173 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num173].noGravity = true;
						Dust dust = Main.dust[num173];
						dust.velocity *= 5f;
						num173 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num173];
						dust.velocity *= 4f;
						Main.dust[num173].noGravity = true;
					}
					if (Main.netMode != 1)
					{
						for (int num174 = 0; num174 < 4; num174++)
						{
							float num175 = (float)(num174 < 2).ToDirectionInt() * ((float)Math.PI / 8f + (float)Math.PI / 4f * Main.rand.NextFloat());
							Vector2 vector8 = new Vector2(0f, (0f - Main.rand.NextFloat()) * 0.5f - 0.5f).RotatedBy(num175) * 6f;
							Projectile.NewProjectile(base.Center.X, base.Center.Y, vector8.X, vector8.Y, 594, 0, 0f, Main.myPlayer);
						}
					}
				}
			}
			else if (type == 492)
			{
				if (life <= 0)
				{
					for (int num176 = 0; num176 < 7; num176++)
					{
						int num177 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num177];
						dust.velocity *= 1.4f;
					}
					for (int num178 = 0; num178 < 10; num178++)
					{
						int num179 = Main.rand.Next(61, 64);
						int num180 = Gore.NewGore(base.position, Vector2.Zero, num179);
						Main.gore[num180].alpha = 100;
						Main.gore[num180].velocity = Vector2.Transform(new Vector2(1f, 0f), Matrix.CreateRotationZ((float)(Main.rand.NextDouble() * 6.2831854820251465)));
					}
				}
			}
			else if (type >= 524 && type <= 527)
			{
				int num181 = 0;
				int num182 = 5;
				int num183 = 863;
				if (type == 525)
				{
					num181 = 75;
					num183 = 867;
				}
				else if (type == 526)
				{
					num181 = 170;
					num183 = 871;
				}
				else if (type == 527)
				{
					num181 = 67;
					num183 = 879;
				}
				if (life > 0)
				{
					for (int num184 = 0; (double)num184 < dmg / (double)lifeMax * 20.0; num184++)
					{
						Dust.NewDust(base.position, width, height, num182, hitDirection, -1f);
						if (Main.rand.Next(4) == 0 && num181 > 0)
						{
							Dust dust58 = Main.dust[Dust.NewDust(base.position, width, height, num181)];
							dust58.noGravity = true;
							dust58.scale = 1.5f;
							dust58.fadeIn = 1f;
							Dust dust = dust58;
							dust.velocity *= 3f;
						}
					}
				}
				else
				{
					for (int num185 = 0; num185 < 20; num185++)
					{
						Dust.NewDust(base.position, width, height, num182, hitDirection, -1f);
						if (Main.rand.Next(3) == 0 && num181 > 0)
						{
							Dust dust59 = Main.dust[Dust.NewDust(base.position, width, height, num181)];
							dust59.noGravity = true;
							dust59.scale = 1.5f;
							dust59.fadeIn = 1f;
							Dust dust = dust59;
							dust.velocity *= 3f;
						}
					}
					Gore.NewGore(base.position, base.velocity, num183, scale);
					Gore.NewGore(base.position, base.velocity, num183 + 1, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num183 + 2, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num183 + 2, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num183 + 3, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num183 + 3, scale);
				}
			}
			else if (type >= 528 && type <= 529)
			{
				int num186 = 5;
				int num187 = 875;
				if (type == 529)
				{
					num187 = 876;
				}
				if (life > 0)
				{
					for (int num188 = 0; (double)num188 < dmg / (double)lifeMax * 20.0; num188++)
					{
						Dust.NewDust(base.position, width, height, num186, hitDirection, -1f);
					}
				}
				else
				{
					for (int num189 = 0; num189 < 20; num189++)
					{
						Dust.NewDust(base.position, width, height, num186, hitDirection, -1f);
					}
					Gore.NewGore(base.position, base.velocity, num187, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 877, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 877, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 878, scale);
				}
			}
			else if (type == 530 || type == 531)
			{
				if (life > 0)
				{
					for (int num190 = 0; (double)num190 < dmg / (double)lifeMax * 30.0; num190++)
					{
						Dust.NewDust(base.position, width, height, 250, hitDirection, -1f, 100);
					}
				}
				else
				{
					for (int num191 = 0; num191 < 20; num191++)
					{
						Dust.NewDust(base.position, width, height, 250, 2.5f * (float)hitDirection, -2.5f, 100);
					}
					Gore.NewGore(base.position, base.velocity, 883);
					Gore.NewGore(base.position, base.velocity, 884);
					Gore.NewGore(base.position, base.velocity, 885);
					Gore.NewGore(base.position, base.velocity, 886);
					Gore.NewGore(base.position, base.velocity, 887);
				}
			}
			else if (type == 532)
			{
				if (life > 0)
				{
					for (int num192 = 0; (double)num192 < dmg / (double)lifeMax * 50.0; num192++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f, 100);
					}
				}
				else
				{
					for (int num193 = 0; num193 < 50; num193++)
					{
						Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f, 100);
					}
					Gore.NewGore(base.position, base.velocity, 888);
					Gore.NewGore(base.position, base.velocity, 889);
					Gore.NewGore(base.position, base.velocity, 890);
					Gore.NewGore(base.position, base.velocity, 891);
				}
			}
			else if (type == 533)
			{
				if (life > 0)
				{
					for (int num194 = 0; (double)num194 < dmg / (double)lifeMax * 50.0; num194++)
					{
						int num195 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num195];
						dust.velocity *= 2f;
						Main.dust[num195].noGravity = true;
					}
				}
				else
				{
					for (int num196 = 0; num196 < 40; num196++)
					{
						int num197 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num197];
						dust.velocity *= 2f;
						Main.dust[num197].noGravity = true;
						Main.dust[num197].fadeIn = 1f;
					}
				}
			}
			else if (type == 460)
			{
				if (life > 0)
				{
					for (int num198 = 0; (double)num198 < dmg / (double)lifeMax * 100.0; num198++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num199 = 0; num199 < 50; num199++)
					{
						Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 643, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 645, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 644, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 646, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 646, scale);
				}
			}
			else if (type == 477)
			{
				if (life > 0)
				{
					for (int num200 = 0; (double)num200 < dmg / (double)lifeMax * 100.0; num200++)
					{
						Dust.NewDust(base.position, width, height, 237, hitDirection, -1f);
					}
				}
				else
				{
					for (int num201 = 0; num201 < 50; num201++)
					{
						Dust.NewDust(base.position, width, height, 237, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 687, scale);
					Gore.NewGore(base.position, base.velocity, 688, scale);
					Gore.NewGore(base.position, base.velocity, 689, scale);
					Gore.NewGore(base.position, base.velocity, 690, scale);
					Gore.NewGore(base.position, base.velocity, 691, scale);
				}
			}
			else if (type == 479)
			{
				if (life > 0)
				{
					for (int num202 = 0; (double)num202 < dmg / (double)lifeMax * 100.0; num202++)
					{
						Dust.NewDust(base.position, width, height, 237, hitDirection, -1f);
					}
				}
				else
				{
					for (int num203 = 0; num203 < 50; num203++)
					{
						Dust.NewDust(base.position, width, height, 237, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 681, scale);
					Gore.NewGore(base.position, base.velocity, 682, scale);
					Gore.NewGore(base.position, base.velocity, 683, scale);
				}
			}
			else if (type == 478)
			{
				if (life > 0)
				{
					for (int num204 = 0; num204 < 10; num204++)
					{
						int num205 = Dust.NewDust(base.position, width, height, 238, hitDirection, -1f);
						Main.dust[num205].noGravity = true;
					}
				}
				else
				{
					for (int num206 = 0; num206 < 50; num206++)
					{
						Dust.NewDust(base.position, width, height, 237 + Main.rand.Next(2), 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 684, scale);
					Gore.NewGore(base.position, base.velocity, 685, scale);
					Gore.NewGore(base.position, base.velocity, 686, scale);
					Gore.NewGore(base.position, base.velocity, 684 + Main.rand.Next(3), scale);
				}
			}
			else if (type == 466)
			{
				if (life > 0)
				{
					for (int num207 = 0; (double)num207 < dmg / (double)lifeMax * 100.0; num207++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num208 = 0; num208 < 50; num208++)
					{
						Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 656, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 657, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 659, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 658, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 658, scale);
				}
			}
			else if (type == 468)
			{
				if (life > 0)
				{
					for (int num209 = 0; (double)num209 < dmg / (double)lifeMax * 100.0; num209++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num210 = 0; num210 < 50; num210++)
					{
						Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 662, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 663, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 663, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 664, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 664, scale);
				}
			}
			else if (type == 469)
			{
				if (life > 0)
				{
					for (int num211 = 0; (double)num211 < dmg / (double)lifeMax * 100.0; num211++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num212 = 0; num212 < 50; num212++)
					{
						Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 665, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 666, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 666, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 667, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 667, scale);
				}
			}
			else if (type == 463)
			{
				if (life > 0)
				{
					for (int num213 = 0; (double)num213 < dmg / (double)lifeMax * 100.0; num213++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num214 = 0; num214 < 50; num214++)
					{
						Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 653, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 654, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 654, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 655, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 655, scale);
				}
			}
			else if (type == 461)
			{
				if (life > 0)
				{
					for (int num215 = 0; (double)num215 < dmg / (double)lifeMax * 100.0; num215++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num216 = 0; num216 < 50; num216++)
					{
						Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 647, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 648, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 648, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 649, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 649, scale);
				}
			}
			else if (type == 462)
			{
				if (life > 0)
				{
					for (int num217 = 0; (double)num217 < dmg / (double)lifeMax * 100.0; num217++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num218 = 0; num218 < 50; num218++)
					{
						Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 650, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 651, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 651, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 652, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 652, scale);
				}
			}
			else if (type == 379 || type == 438)
			{
				if (life > 0)
				{
					for (int num219 = 0; (double)num219 < dmg / (double)(lifeMax * 50); num219++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num220 = 0; num220 < 30; num220++)
					{
						Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 900, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 901, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 901, scale);
				}
			}
			else if (type == 439)
			{
				if (life > 0)
				{
					for (int num221 = 0; (double)num221 < dmg / (double)lifeMax * 100.0; num221++)
					{
						int num222 = Dust.NewDust(base.position, width, height, 5, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num222];
						dust.velocity *= 1.5f;
						Main.dust[num222].noGravity = true;
					}
				}
				else
				{
					for (int num223 = 0; num223 < 30; num223++)
					{
						Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					for (int num224 = 0; num224 < 10; num224++)
					{
						int num225 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num225];
						dust.velocity *= 2f;
						Main.dust[num225].noGravity = true;
					}
					int num226 = Main.rand.Next(1, 4);
					for (int num227 = 0; num227 < num226; num227++)
					{
						int num228 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
						Gore gore2 = Main.gore[num228];
						gore2.velocity *= 0.8f;
					}
					Gore.NewGore(base.position, base.velocity, 902, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 903, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 901, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 901, scale);
				}
			}
			else if (type == 440)
			{
				if (life <= 0)
				{
					for (int num229 = 0; num229 < 10; num229++)
					{
						int num230 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num230];
						dust.velocity *= 2f;
						Main.dust[num230].noGravity = true;
					}
					int num231 = Main.rand.Next(1, 4);
					for (int num232 = 0; num232 < num231; num232++)
					{
						int num233 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
						Gore gore2 = Main.gore[num233];
						gore2.velocity *= 0.8f;
					}
				}
			}
			else if (type >= 454 && type <= 459)
			{
				if (life > 0)
				{
					for (int num234 = 0; (double)num234 < dmg / (double)lifeMax * 50.0; num234++)
					{
						int num235 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num235];
						dust.velocity *= 1.5f;
						Main.dust[num235].noGravity = true;
					}
				}
				else
				{
					for (int num236 = 0; num236 < 10; num236++)
					{
						int num237 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num237];
						dust.velocity *= 2f;
						Main.dust[num237].noGravity = true;
					}
					int num238 = Main.rand.Next(1, 4);
					for (int num239 = 0; num239 < num238; num239++)
					{
						int num240 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
						Gore gore2 = Main.gore[num240];
						gore2.velocity *= 0.8f;
					}
				}
			}
			if (type == 372 || type == 373)
			{
				if (life > 0)
				{
					for (int num241 = 0; (double)num241 < dmg / (double)lifeMax * 100.0; num241++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num242 = 0; num242 < 75; num242++)
					{
						int num243 = Dust.NewDust(base.Center - Vector2.One * 25f, 50, 50, 5, 2 * hitDirection, -2f);
						Dust dust = Main.dust[num243];
						dust.velocity /= 2f;
					}
					Gore.NewGore(base.Center, base.velocity * 0.8f, 583);
					Gore.NewGore(base.Center, base.velocity * 0.8f, 577);
					Gore.NewGore(base.Center, base.velocity * 0.9f, 578);
					Gore.NewGore(base.Center, base.velocity, 579);
				}
			}
			if (type == 371)
			{
				SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 3);
				if (life <= 0)
				{
					Vector2 center = base.Center;
					for (int num244 = 0; num244 < 60; num244++)
					{
						int num245 = 25;
						Vector2 vector9 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
						int num246 = Dust.NewDust(base.Center - Vector2.One * num245, num245 * 2, num245 * 2, 212);
						Dust dust60 = Main.dust[num246];
						Vector2 vector10 = Vector2.Normalize(dust60.position - base.Center);
						dust60.position = base.Center + vector10 * 25f * scale;
						if (num244 < 30)
						{
							dust60.velocity = vector10 * dust60.velocity.Length();
						}
						else
						{
							dust60.velocity = vector10 * Main.rand.Next(45, 91) / 10f;
						}
						dust60.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
						dust60.color = Color.Lerp(dust60.color, Color.White, 0.3f);
						dust60.noGravity = true;
						dust60.scale = 0.7f;
					}
				}
			}
			if (type == 370)
			{
				if (life > 0)
				{
					for (int num247 = 0; (double)num247 < dmg / (double)lifeMax * 100.0; num247++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
				}
				else
				{
					for (int num248 = 0; num248 < 150; num248++)
					{
						Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(base.Center - Vector2.UnitX * 20f * direction, base.velocity, 576, scale);
					Gore.NewGore(base.Center - Vector2.UnitY * 30f, base.velocity, 574, scale);
					Gore.NewGore(base.Center, base.velocity, 575, scale);
					Gore.NewGore(base.Center + Vector2.UnitX * 20f * direction, base.velocity, 573, scale);
					Gore.NewGore(base.Center - Vector2.UnitY * 30f, base.velocity, 574, scale);
					Gore.NewGore(base.Center, base.velocity, 575, scale);
				}
			}
			else if (type == 381)
			{
				if (life > 0)
				{
					for (int num249 = 0; (double)num249 < dmg / (double)(lifeMax * 50); num249++)
					{
						Dust.NewDust(base.position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num250 = 0; num250 < 30; num250++)
					{
						Dust.NewDust(base.position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 587, scale);
					Gore.NewGore(base.position, base.velocity, 590, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 588, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 589, scale);
				}
			}
			else if (type == 382 || type == 390)
			{
				if (life > 0)
				{
					for (int num251 = 0; (double)num251 < dmg / (double)(lifeMax * 50); num251++)
					{
						Dust.NewDust(base.position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num252 = 0; num252 < 30; num252++)
					{
						Dust.NewDust(base.position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 591, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 592, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 593, scale);
				}
			}
			else if (type == 383)
			{
				if (life > 0)
				{
					for (int num253 = 0; (double)num253 < dmg / (double)(lifeMax * 50); num253++)
					{
						Dust.NewDust(base.position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num254 = 0; num254 < 30; num254++)
					{
						Dust.NewDust(base.position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 594, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 595, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 596, scale);
				}
			}
			else if (type == 384)
			{
				if (life > 0)
				{
					for (int num255 = 0; (double)num255 < dmg / (double)lifeMax * 50.0; num255++)
					{
						int num256 = Dust.NewDust(base.position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num256].position = Vector2.Lerp(Main.dust[num256].position, base.Center, 0.25f);
						Main.dust[num256].scale = 0.5f;
					}
				}
				else
				{
					for (int num257 = 0; num257 < 70; num257++)
					{
						int num258 = Dust.NewDust(base.position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
						Main.dust[num258].scale = 0.5f;
					}
				}
			}
			else if (type == 385)
			{
				if (life > 0)
				{
					for (int num259 = 0; (double)num259 < dmg / (double)(lifeMax * 50); num259++)
					{
						Dust.NewDust(base.position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num260 = 0; num260 < 30; num260++)
					{
						Dust.NewDust(base.position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 597, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 598, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 599, scale);
				}
			}
			else if (type == 386)
			{
				if (life > 0)
				{
					for (int num261 = 0; (double)num261 < dmg / (double)(lifeMax * 50); num261++)
					{
						Dust.NewDust(base.position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num262 = 0; num262 < 30; num262++)
					{
						Dust.NewDust(base.position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 600, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 601, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 602, scale);
				}
			}
			if (type == 387)
			{
				if (life > 0)
				{
					for (int num263 = 0; (double)num263 < dmg / (double)lifeMax * 20.0; num263++)
					{
						int num264 = Dust.NewDust(base.position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num264].position = Vector2.Lerp(Main.dust[num264].position, base.Center, 0.25f);
						Main.dust[num264].scale = 0.5f;
					}
				}
				else
				{
					for (int num265 = 0; num265 < 30; num265++)
					{
						int num266 = Dust.NewDust(base.position, width, height, 226, -1.5f * (float)hitDirection, -1.5f);
						Main.dust[num266].scale = 0.5f;
					}
					Gore.NewGore(base.position, base.velocity, 603, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 603, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 604, scale);
				}
			}
			if (type == 520)
			{
				if (life > 0)
				{
					for (int num267 = 0; (double)num267 < dmg / (double)lifeMax * 20.0; num267++)
					{
						int num268 = Dust.NewDust(base.position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num268].position = Vector2.Lerp(Main.dust[num268].position, base.Center, 0.25f);
						Main.dust[num268].scale = 0.5f;
					}
				}
				else
				{
					for (int num269 = 0; num269 < 30; num269++)
					{
						int num270 = Dust.NewDust(base.position, width, height, 226, -1.5f * (float)hitDirection, -1.5f);
						Main.dust[num270].scale = 0.5f;
					}
					Gore.NewGore(base.position, base.velocity, 851, scale);
					Gore.NewGore(base.position, base.velocity, 852, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 80f), base.velocity, 848, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 80f), base.velocity, 849, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 80f), base.velocity, 850, scale);
				}
			}
			else if (type == 389)
			{
				if (life > 0)
				{
					for (int num271 = 0; (double)num271 < dmg / (double)(lifeMax * 50); num271++)
					{
						Dust.NewDust(base.position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num272 = 0; num272 < 30; num272++)
					{
						Dust.NewDust(base.position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 904, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 905, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 906, scale);
				}
			}
			else if (type == 388)
			{
				if (life > 0)
				{
					for (int num273 = 0; (double)num273 < dmg / (double)(lifeMax * 50); num273++)
					{
						int num274 = Dust.NewDust(base.position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num274].position = Vector2.Lerp(Main.dust[num274].position, base.Center, 0.25f);
						Main.dust[num274].scale = 0.5f;
					}
				}
				else
				{
					for (int num275 = 0; num275 < 10; num275++)
					{
						int num276 = Dust.NewDust(base.position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
						Main.dust[num276].scale = 0.5f;
					}
					Vector2 velocity3 = base.velocity;
					if (ai[0] == 3f)
					{
						velocity3 = rotation.ToRotationVector2();
						if (spriteDirection == 1)
						{
							velocity3.X *= -1f;
						}
						velocity3 *= 5f;
					}
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity3, 605, scale);
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity3, 606, scale);
				}
			}
			else if (type == 399)
			{
				if (life > 0)
				{
					for (int num277 = 0; (double)num277 < dmg / (double)(lifeMax * 50); num277++)
					{
						int num278 = Dust.NewDust(base.position, width, height, 226, -1 * hitDirection, -1f);
						Main.dust[num278].position = Vector2.Lerp(Main.dust[num278].position, base.Center, 0.25f);
						Main.dust[num278].scale = 0.5f;
					}
				}
				else
				{
					for (int num279 = 0; num279 < 10; num279++)
					{
						int num280 = Dust.NewDust(base.position, width, height, 226, -2.5f * (float)hitDirection, -2.5f);
						Main.dust[num280].scale = 0.5f;
					}
					Vector2 velocity4 = base.velocity;
					if (ai[0] == 3f)
					{
						velocity4 = rotation.ToRotationVector2();
						if (spriteDirection == 1)
						{
							velocity4.X *= -1f;
						}
						velocity4 *= 5f;
					}
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity4, 898, scale);
					Gore.NewGore(base.Center - new Vector2(10f, 10f), velocity4, 899, scale);
				}
			}
			else if (type == 391)
			{
				if (life > 0)
				{
					for (int num281 = 0; (double)num281 < dmg / (double)(lifeMax * 50); num281++)
					{
						Dust.NewDust(base.position, width, height, 227, hitDirection, -1f);
					}
				}
				else
				{
					for (int num282 = 0; num282 < 30; num282++)
					{
						Dust.NewDust(base.position, width, height, 227, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position + Vector2.UnitX * width / 2f, base.velocity, 607, scale);
					Gore.NewGore(base.position + Vector2.UnitX * width / 2f, base.velocity, 608, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 609, scale);
				}
			}
			if (type == 392 || type == 394 || type == 393 || type == 395)
			{
				if (life > 0)
				{
					for (int num283 = 0; (double)num283 < dmg / (double)lifeMax * 20.0; num283++)
					{
						int num284 = Dust.NewDust(base.position, width, height, 228, -1 * hitDirection, -1f);
						Main.dust[num284].position = Vector2.Lerp(Main.dust[num284].position, base.Center, 0.25f);
						Main.dust[num284].scale = 0.5f;
					}
				}
				else
				{
					for (int num285 = 0; num285 < 30; num285++)
					{
						int num286 = Dust.NewDust(base.position, width, height, 228, -1.5f * (float)hitDirection, -1.5f);
						Main.dust[num286].scale = 0.5f;
					}
					Vector2 center2 = base.Center;
					if (type == 395)
					{
						Gore.NewGore(center2 + new Vector2(-20f, -10f), base.velocity, 610, scale);
						Gore.NewGore(center2 + new Vector2(20f, -10f), base.velocity, 611, scale);
						Gore.NewGore(center2 + new Vector2(-50f, 0f), base.velocity, 612, scale);
						Gore.NewGore(center2 + new Vector2(50f, 0f), base.velocity, 613, scale);
						Gore.NewGore(center2 + new Vector2(-60f, 10f), base.velocity, 614, scale);
						Gore.NewGore(center2 + new Vector2(0f, 30f), base.velocity, 615, scale);
					}
					if (type == 393)
					{
						Gore.NewGore(center2, base.velocity, 616, scale);
					}
					if (type == 394)
					{
						Gore.NewGore(center2, base.velocity, 617, scale);
					}
				}
			}
			else if (type == 482 || type == 483)
			{
				if (life > 0)
				{
					for (int num287 = 0; (double)num287 < dmg / (double)(lifeMax * 50); num287++)
					{
						Dust.NewDust(base.position, width, height, 240, hitDirection, -1f);
					}
				}
				else
				{
					for (int num288 = 0; num288 < 30; num288++)
					{
						Dust.NewDust(base.position, width, height, 240, 2.5f * (float)hitDirection, -2.5f);
					}
					if (type == 482)
					{
						Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 718, scale);
						Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 719, scale);
						Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 720, scale);
						Gore.NewGore(new Vector2(base.position.X, base.position.Y + 40f), base.velocity, 721, scale);
					}
				}
			}
			else if (type == 631)
			{
				if (life > 0)
				{
					for (int num289 = 0; (double)num289 < dmg / (double)(lifeMax * 50); num289++)
					{
						Dust.NewDust(base.position, width, height, 1, hitDirection, -1f);
					}
				}
				else
				{
					for (int num290 = 0; num290 < 30; num290++)
					{
						Dust.NewDust(base.position, width, height, 1, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 1210, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 1211, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 1212, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 40f), base.velocity, 1213, scale);
				}
			}
			if ((type >= 442 && type <= 448) || type == 539 || type == 592 || type == 593 || type == 601 || type == 605 || type == 627)
			{
				if (life > 0)
				{
					for (int num291 = 0; num291 < 10; num291++)
					{
						Dust.NewDust(base.position, width, height, Main.rand.Next(232, 234), hitDirection, -1f);
					}
				}
				else
				{
					for (int num292 = 0; num292 < 20; num292++)
					{
						Dust.NewDust(base.position, width, height, Main.rand.Next(232, 234), 2 * hitDirection, -2f);
					}
				}
			}
			if (type == 653 && life <= 0)
			{
				for (int num293 = 0; num293 < 6; num293++)
				{
					int num294 = Dust.NewDust(base.position, width, height, 174, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num294].noGravity = true;
						Main.dust[num294].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num294].scale = 0.8f * scale;
					}
				}
			}
			if (type == 333 || type == 334 || type == 335 || type == 336)
			{
				Color newColor6 = Color.White;
				if (type == 333)
				{
					newColor6 = new Color(73, 147, 221, 200);
				}
				if (type == 334)
				{
					newColor6 = new Color(24, 146, 79, 200);
				}
				if (type == 335)
				{
					newColor6 = new Color(194, 46, 50, 200);
				}
				if (type == 336)
				{
					newColor6 = new Color(228, 200, 1, 200);
				}
				if (life > 0)
				{
					for (int num295 = 0; (double)num295 < dmg / (double)lifeMax * 100.0; num295++)
					{
						Dust.NewDust(base.position, width, height, 4, hitDirection, -1f, 150, newColor6);
					}
				}
				else
				{
					for (int num296 = 0; num296 < 50; num296++)
					{
						Dust.NewDust(base.position, width, height, 4, 2 * hitDirection, -2f, 150, newColor6);
					}
				}
			}
			if (type == 537)
			{
				if (life > 0)
				{
					for (int num297 = 0; (double)num297 < dmg / (double)lifeMax * 100.0; num297++)
					{
						Dust.NewDust(base.position, width, height, 32, hitDirection, -1f);
					}
				}
				else
				{
					for (int num298 = 0; num298 < 50; num298++)
					{
						Dust.NewDust(base.position, width, height, 32, 2 * hitDirection, -2f);
					}
				}
			}
			if (type == 1 || type == 16 || type == 71 || type == 244 || type == 535)
			{
				if (life > 0)
				{
					for (int num299 = 0; (double)num299 < dmg / (double)lifeMax * 100.0; num299++)
					{
						Dust.NewDust(base.position, width, height, 4, hitDirection, -1f, alpha, this.color);
					}
				}
				else
				{
					for (int num300 = 0; num300 < 50; num300++)
					{
						Dust.NewDust(base.position, width, height, 4, 2 * hitDirection, -2f, alpha, this.color);
					}
					if (Main.netMode != 1 && type == 16)
					{
						int num301 = Main.rand.Next(2) + 2;
						for (int num302 = 0; num302 < num301; num302++)
						{
							int num303 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), 1);
							Main.npc[num303].SetDefaults(-5);
							Main.npc[num303].velocity.X = base.velocity.X * 2f;
							Main.npc[num303].velocity.Y = base.velocity.Y;
							Main.npc[num303].velocity.X += (float)Main.rand.Next(-20, 20) * 0.1f + (float)(num302 * direction) * 0.3f;
							Main.npc[num303].velocity.Y -= (float)Main.rand.Next(0, 10) * 0.1f + (float)num302;
							Main.npc[num303].ai[0] = -1000 * Main.rand.Next(3);
							if (Main.netMode == 2 && num303 < 200)
							{
								NetMessage.SendData(23, -1, -1, null, num303);
							}
						}
					}
				}
			}
			if (type == 352)
			{
				if (life > 0)
				{
					for (int num304 = 0; (double)num304 < dmg / (double)lifeMax * 100.0; num304++)
					{
						int num305 = Dust.NewDust(base.position, width, height, 67, hitDirection, -1f);
						Main.dust[num305].noGravity = true;
					}
				}
				else
				{
					for (int num306 = 0; num306 < 60; num306++)
					{
						int num307 = Dust.NewDust(base.position, width, height, 67, 2 * hitDirection, -2f);
						Main.dust[num307].noGravity = true;
					}
				}
			}
			if (type >= 305 && type <= 314)
			{
				if (life > 0)
				{
					for (int num308 = 0; (double)num308 < dmg / (double)lifeMax * 100.0; num308++)
					{
						Dust.NewDust(base.position, width, height, 194, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num309 = 0; num309 < 60; num309++)
					{
						Dust.NewDust(base.position, width, height, 194, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
					Gore.NewGore(base.position, base.velocity, 441, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 442, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 443, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 444, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 445, scale);
				}
			}
			if (type == 327)
			{
				if (life > 0)
				{
					for (int num310 = 0; (double)num310 < dmg / (double)lifeMax * 100.0; num310++)
					{
						Dust.NewDust(base.position, width, height, 189, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num311 = 0; num311 < 60; num311++)
					{
						Dust.NewDust(base.position, width, height, 189, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
					for (int num312 = 476; num312 <= 484; num312++)
					{
						Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, num312, scale);
					}
				}
			}
			if (type == 325)
			{
				if (life > 0)
				{
					for (int num313 = 0; (double)num313 < dmg / (double)lifeMax * 100.0; num313++)
					{
						Dust.NewDust(base.position, width, height, 191, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num314 = 0; num314 < 60; num314++)
					{
						Dust.NewDust(base.position, width, height, 191, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
					for (int num315 = 469; num315 <= 475; num315++)
					{
						Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, num315, scale);
					}
				}
			}
			if (type == 345 && life <= 0)
			{
				Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, 513, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, 514, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, 514, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, 515, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, 516, scale);
			}
			if (type == 344)
			{
				if (life > 0)
				{
					for (int num316 = 0; (double)num316 < dmg / (double)lifeMax * 100.0; num316++)
					{
						Dust.NewDust(base.position, width, height, 196, hitDirection, -1f);
					}
				}
				else
				{
					for (int num317 = 0; num317 < 60; num317++)
					{
						Dust.NewDust(base.position, width, height, 196, 2 * hitDirection, -2f);
					}
					for (int num318 = 508; num318 <= 512; num318++)
					{
						Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, num318, scale);
					}
					for (int num319 = 509; num319 <= 512; num319++)
					{
						Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity * 0f, num319, scale);
					}
				}
			}
			if (type == 326)
			{
				if (life > 0)
				{
					for (int num320 = 0; (double)num320 < dmg / (double)lifeMax * 100.0; num320++)
					{
						Dust.NewDust(base.position, width, height, 191, hitDirection, -1f, 0, default(Color), 1.1f);
					}
				}
				else
				{
					for (int num321 = 0; num321 < 60; num321++)
					{
						Dust.NewDust(base.position, width, height, 191, 2 * hitDirection, -2f, 0, default(Color), 1.1f);
					}
				}
			}
			if (type == 304)
			{
				if (life > 0)
				{
					for (int num322 = 0; (double)num322 < dmg / (double)lifeMax * 100.0; num322++)
					{
						Dust.NewDust(base.position, width, height, 189, hitDirection, -1f, 0, default(Color), 1.3f);
					}
				}
				else
				{
					for (int num323 = 0; num323 < 60; num323++)
					{
						Dust.NewDust(base.position, width, height, 189, 2 * hitDirection, -2f, 0, default(Color), 1.3f);
					}
				}
			}
			if (type == 302)
			{
				if (life > 0)
				{
					for (int num324 = 0; (double)num324 < dmg / (double)lifeMax * 100.0; num324++)
					{
						Dust.NewDust(base.position, width, height, 192, hitDirection, -1f, 100, new Color(100, 100, 100, 100));
					}
				}
				else
				{
					for (int num325 = 0; num325 < 50; num325++)
					{
						Dust.NewDust(base.position, width, height, 192, 2 * hitDirection, -2f, 100, new Color(100, 100, 100, 100));
					}
					Gore.NewGore(base.position, base.velocity, 440, scale);
				}
			}
			if (type >= 245 && type <= 249)
			{
				if (life > 0)
				{
					for (int num326 = 0; (double)num326 < dmg / (double)lifeMax * 100.0; num326++)
					{
						Dust.NewDust(base.position, width, height, 148, hitDirection, -1f);
					}
				}
				else if (type == 246)
				{
					if (Main.netMode != 1)
					{
						NewNPC((int)base.Center.X, (int)base.position.Y + height, 249, whoAmI);
					}
				}
				else
				{
					for (int num327 = 0; num327 < 50; num327++)
					{
						Dust.NewDust(base.position, width, height, 148, 2 * hitDirection, -2f);
					}
					if (type == 245)
					{
						Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 368, scale);
						Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 370, scale);
						Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 368, scale);
						Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 370, scale);
						Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 368, scale);
						Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 370, scale);
						Gore.NewGore(base.position, base.velocity, 360, scale);
						Gore.NewGore(base.position, base.velocity, 361, scale);
						Gore.NewGore(base.position, base.velocity, 362, scale);
						Gore.NewGore(base.position, base.velocity, 363, scale);
						Gore.NewGore(base.position, base.velocity, 364, scale);
						Gore.NewGore(base.position, base.velocity, 367, scale);
						Gore.NewGore(base.position, base.velocity, 366, scale);
					}
					else if (type == 249)
					{
						Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 368, scale);
						Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 370, scale);
						Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 368, scale);
						Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 370, scale);
						Gore.NewGore(base.position, base.velocity, 365, scale);
						Gore.NewGore(base.position, base.velocity, 363, scale);
						Gore.NewGore(base.position, base.velocity, 362, scale);
					}
					else
					{
						Gore.NewGore(base.position, base.velocity, 369, scale);
						Gore.NewGore(base.position, base.velocity, 371, scale);
						Gore.NewGore(base.position, base.velocity, 370, scale);
					}
				}
			}
			if (type == 288 && life <= 0)
			{
				for (int num328 = 0; num328 < 50; num328++)
				{
					int num329 = Dust.NewDust(base.position, width, height, 180, base.velocity.X, base.velocity.Y);
					Dust dust = Main.dust[num329];
					dust.velocity *= 2f;
					Main.dust[num329].noGravity = true;
					Main.dust[num329].scale = 1.4f;
				}
			}
			if (type == 204)
			{
				if (life > 0)
				{
					for (int num330 = 0; (double)num330 < dmg / (double)lifeMax * 100.0; num330++)
					{
						Dust.NewDust(base.position, width, height, 4, hitDirection, -1f, 100, new Color(149, 208, 104));
					}
				}
				else
				{
					for (int num331 = 0; num331 < 50; num331++)
					{
						Dust.NewDust(base.position, width, height, 4, 2 * hitDirection, -2f, 100, new Color(149, 208, 104));
					}
				}
			}
			if (type == 225)
			{
				if (life > 0)
				{
					for (int num332 = 0; (double)num332 < dmg / (double)lifeMax * 100.0; num332++)
					{
						Dust.NewDust(base.position, width, height, 4, hitDirection, -1f, 100, new Color(0, 80, 255, 100));
					}
				}
				else
				{
					for (int num333 = 0; num333 < 50; num333++)
					{
						Dust.NewDust(base.position, width, height, 4, 2 * hitDirection, -2f, 100, new Color(0, 80, 255, 100));
					}
					Gore.NewGore(base.position, base.velocity, 314, scale);
				}
			}
			if (type == 243)
			{
				if (life > 0)
				{
					for (int num334 = 0; (double)num334 < dmg / (double)lifeMax * 150.0; num334++)
					{
						Dust.NewDust(base.position, width, height, 161, hitDirection, -1f);
					}
				}
				else
				{
					for (int num335 = 0; num335 < 200; num335++)
					{
						Dust.NewDust(base.position, width, height, 161, 2 * hitDirection, -2f);
					}
					Gore.NewGore(base.position, base.velocity, 359, scale);
				}
			}
			if ((type == 210 || type == 211) && life <= 0)
			{
				for (int num336 = 0; num336 < 6; num336++)
				{
					int num337 = Dust.NewDust(base.position, width, height, 150, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num337].noGravity = true;
						Main.dust[num337].scale = 1.5f;
					}
					else
					{
						Main.dust[num337].scale = 0.8f;
					}
				}
			}
			if ((type == 355 || type == 358 || type == 654) && life <= 0)
			{
				for (int num338 = 0; num338 < 6; num338++)
				{
					int num339 = Dust.NewDust(base.position, width, height, 198, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num339].noGravity = true;
						Main.dust[num339].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num339].scale = 0.8f * scale;
					}
				}
			}
			if (type == 604 && life <= 0)
			{
				for (int num340 = 0; num340 < 6; num340++)
				{
					int num341 = Dust.NewDust(base.position, width, height, 198, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num341].noGravity = true;
						Main.dust[num341].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num341].scale = 0.8f * scale;
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(base.position, base.velocity, 1148);
				}
				if (Main.rand.Next(2) == 0)
				{
					Gore.NewGore(base.position, base.velocity, 1149);
				}
			}
			if (type == 356 && life <= 0)
			{
				for (int num342 = 0; num342 < 6; num342++)
				{
					int num343 = Dust.NewDust(base.position, width, height, 199, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num343].noGravity = true;
						Main.dust[num343].scale = 1.5f * scale;
					}
					else
					{
						Main.dust[num343].scale = 0.8f * scale;
					}
				}
			}
			if (type >= 484 && type <= 487 && life <= 0)
			{
				for (int num344 = 0; num344 < 6; num344++)
				{
					int num345 = Dust.NewDust(base.position, width, height, 248 + type - 484, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num345].noGravity = true;
						Main.dust[num345].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num345].scale = 0.7f * scale;
					}
				}
			}
			if (type == 357 && life <= 0)
			{
				for (int num346 = 0; num346 < 6; num346++)
				{
					int num347 = Dust.NewDust(base.position, width, height, 200, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num347].noGravity = true;
						Main.dust[num347].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num347].scale = 0.7f * scale;
					}
				}
			}
			if (type == 606 && life <= 0)
			{
				for (int num348 = 0; num348 < 6; num348++)
				{
					int num349 = Dust.NewDust(base.position, width, height, 124, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num349].noGravity = true;
						Main.dust[num349].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num349].scale = 0.7f * scale;
					}
				}
			}
			if (type == 377 && life <= 0)
			{
				for (int num350 = 0; num350 < 6; num350++)
				{
					int num351 = Dust.NewDust(base.position, width, height, 40, 2 * hitDirection, -2f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num351].noGravity = true;
						Main.dust[num351].scale = 1.2f * scale;
					}
					else
					{
						Main.dust[num351].scale = 0.7f * scale;
					}
				}
			}
			if (type == 374 || type == 375)
			{
				for (int num352 = 0; num352 < 6; num352++)
				{
					int num353 = Dust.NewDust(base.position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust = Main.dust[num353];
					dust.velocity *= 2f;
					Main.dust[num353].noGravity = true;
				}
			}
			if (type == 359)
			{
				if (life <= 0)
				{
					for (int num354 = 0; num354 < 6; num354++)
					{
						int num355 = Dust.NewDust(base.position, width, height, 201, 2 * hitDirection, -2f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num355].noGravity = true;
							Main.dust[num355].scale = 1.2f * scale;
						}
						else
						{
							Main.dust[num355].scale = 0.7f * scale;
						}
					}
				}
				Gore.NewGore(base.position, base.velocity, 547, scale);
				Gore.NewGore(base.position, base.velocity, 548, scale);
			}
			if (type == 360)
			{
				if (life <= 0)
				{
					for (int num356 = 0; num356 < 6; num356++)
					{
						int num357 = Dust.NewDust(base.position, width, height, 202, 2 * hitDirection, -2f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num357].noGravity = true;
							Main.dust[num357].scale = 1.2f * scale;
						}
						else
						{
							Main.dust[num357].scale = 0.7f * scale;
						}
					}
				}
				Gore.NewGore(base.position, base.velocity, 549, scale);
				Gore.NewGore(base.position, base.velocity, 550, scale);
			}
			if (type == 655)
			{
				if (life <= 0)
				{
					for (int num358 = 0; num358 < 6; num358++)
					{
						int num359 = Dust.NewDust(base.position, width, height, 174, 2 * hitDirection, -2f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num359].noGravity = true;
							Main.dust[num359].scale = 1.2f * scale;
						}
						else
						{
							Main.dust[num359].scale = 0.7f * scale;
						}
					}
				}
				Gore.NewGore(base.position, base.velocity, 1256, scale);
			}
			if (type == 154)
			{
				if (life > 0)
				{
					for (int num360 = 0; (double)num360 < dmg / (double)lifeMax * 50.0; num360++)
					{
						int num361 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, base.velocity.X, base.velocity.Y, 90, default(Color), 1.5f);
						Main.dust[num361].noGravity = true;
						Dust dust = Main.dust[num361];
						dust.velocity *= 0.2f;
					}
				}
				else
				{
					for (int num362 = 0; num362 < 50; num362++)
					{
						int num363 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, base.velocity.X, base.velocity.Y, 90, default(Color), 1.5f);
						Main.dust[num363].noGravity = true;
						Dust dust = Main.dust[num363];
						dust.velocity *= 0.2f;
					}
					Gore.NewGore(base.position, base.velocity, 180, scale);
				}
			}
			if (type == 147 || type == 184)
			{
				if (life > 0)
				{
					for (int num364 = 0; (double)num364 < dmg / (double)lifeMax * 50.0; num364++)
					{
						int num365 = Dust.NewDust(base.position, width, height, 76, hitDirection, -1f);
						Main.dust[num365].noGravity = true;
						Dust.NewDust(base.position, width, height, 4, hitDirection, -1f, 100, new Color(97, 200, 255, 100));
					}
				}
				else
				{
					for (int num366 = 0; num366 < 30; num366++)
					{
						int num367 = Dust.NewDust(base.position, width, height, 76, hitDirection, -2f);
						Main.dust[num367].noGravity = true;
						Dust.NewDust(base.position, width, height, 4, hitDirection, -2f, 100, new Color(97, 200, 255, 100));
					}
				}
			}
			if (type == 143 || type == 144 || type == 145)
			{
				if (life > 0)
				{
					for (int num368 = 0; (double)num368 < dmg / (double)lifeMax * 100.0; num368++)
					{
						int num369 = Dust.NewDust(base.position, width, height, 76, hitDirection, -1f);
						Main.dust[num369].noGravity = true;
					}
				}
				else
				{
					for (int num370 = 0; num370 < 50; num370++)
					{
						int num371 = Dust.NewDust(base.position, width, height, 76, hitDirection, -1f);
						Main.dust[num371].noGravity = true;
						Dust dust = Main.dust[num371];
						dust.scale *= 1.2f;
					}
				}
			}
			if (type == 141)
			{
				if (life > 0)
				{
					for (int num372 = 0; (double)num372 < dmg / (double)lifeMax * 100.0; num372++)
					{
						Dust.NewDust(base.position, width, height, 4, hitDirection, -1f, alpha, new Color(210, 230, 140));
					}
				}
				else
				{
					for (int num373 = 0; num373 < 50; num373++)
					{
						Dust.NewDust(base.position, width, height, 4, 2 * hitDirection, -2f, alpha, new Color(210, 230, 140));
					}
				}
			}
			if (type == 112)
			{
				for (int num374 = 0; num374 < 20; num374++)
				{
					int num375 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 2f), width, height, 18, 0f, 0f, 100, default(Color), 2f);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust = Main.dust[num375];
						dust.scale *= 0.6f;
					}
					else
					{
						Dust dust = Main.dust[num375];
						dust.velocity *= 1.4f;
						Main.dust[num375].noGravity = true;
					}
				}
			}
			if (type == 183)
			{
				if (life > 0)
				{
					for (int num376 = 0; (double)num376 < dmg / (double)lifeMax * 100.0; num376++)
					{
						Dust.NewDust(base.position, width, height, 136, 0f, 0f, alpha, this.color);
					}
				}
				else
				{
					for (int num377 = 0; num377 < 50; num377++)
					{
						int num378 = Dust.NewDust(base.position, width, height, 136, hitDirection, 0f, alpha, this.color);
						Dust dust = Main.dust[num378];
						dust.velocity *= 2f;
					}
				}
			}
			if (type == 81 || type == 121)
			{
				if (life > 0)
				{
					for (int num379 = 0; (double)num379 < dmg / (double)lifeMax * 100.0; num379++)
					{
						Dust.NewDust(base.position, width, height, 14, 0f, 0f, alpha, this.color);
					}
				}
				else
				{
					for (int num380 = 0; num380 < 50; num380++)
					{
						int num381 = Dust.NewDust(base.position, width, height, 14, hitDirection, 0f, alpha, this.color);
						Dust dust = Main.dust[num381];
						dust.velocity *= 2f;
					}
					if (Main.netMode != 1)
					{
						if (type == 121)
						{
							int num382 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), 81);
							Main.npc[num382].SetDefaults(-2);
							Main.npc[num382].velocity.X = base.velocity.X;
							Main.npc[num382].velocity.Y = base.velocity.Y;
							Gore.NewGore(base.position, base.velocity, 94, scale);
							if (Main.netMode == 2 && num382 < 200)
							{
								NetMessage.SendData(23, -1, -1, null, num382);
							}
						}
						else if (scale >= 1f)
						{
							int num383 = Main.rand.Next(2) + 2;
							for (int num384 = 0; num384 < num383; num384++)
							{
								int num385 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), 1);
								Main.npc[num385].SetDefaults(-1);
								Main.npc[num385].velocity.X = base.velocity.X * 3f;
								Main.npc[num385].velocity.Y = base.velocity.Y;
								Main.npc[num385].velocity.X += (float)Main.rand.Next(-10, 10) * 0.1f + (float)(num384 * direction) * 0.3f;
								Main.npc[num385].velocity.Y -= (float)Main.rand.Next(0, 10) * 0.1f + (float)num384;
								Main.npc[num385].ai[1] = num384;
								if (Main.netMode == 2 && num385 < 200)
								{
									NetMessage.SendData(23, -1, -1, null, num385);
								}
							}
						}
					}
				}
			}
			if (type == 120 || type == 137 || type == 138)
			{
				if (life > 0)
				{
					for (int num386 = 0; (double)num386 < dmg / (double)lifeMax * 50.0; num386++)
					{
						int num387 = Dust.NewDust(base.position, width, height, 71, 0f, 0f, 200);
						Dust dust = Main.dust[num387];
						dust.velocity *= 1.5f;
					}
				}
				else
				{
					for (int num388 = 0; num388 < 50; num388++)
					{
						int num389 = Dust.NewDust(base.position, width, height, 71, hitDirection, 0f, 200);
						Dust dust = Main.dust[num389];
						dust.velocity *= 1.5f;
					}
				}
			}
			if (type == 122)
			{
				if (life > 0)
				{
					for (int num390 = 0; (double)num390 < dmg / (double)lifeMax * 50.0; num390++)
					{
						int num391 = Dust.NewDust(base.position, width, height, 72, 0f, 0f, 200);
						Dust dust = Main.dust[num391];
						dust.velocity *= 1.5f;
					}
				}
				else
				{
					for (int num392 = 0; num392 < 50; num392++)
					{
						int num393 = Dust.NewDust(base.position, width, height, 72, hitDirection, 0f, 200);
						Dust dust = Main.dust[num393];
						dust.velocity *= 1.5f;
					}
				}
			}
			if (type == 75)
			{
				if (life > 0)
				{
					for (int num394 = 0; (double)num394 < dmg / (double)lifeMax * 50.0; num394++)
					{
						Dust.NewDust(base.position, width, height, 55, 0f, 0f, 200, this.color);
					}
				}
				else
				{
					for (int num395 = 0; num395 < 50; num395++)
					{
						int num396 = Dust.NewDust(base.position, width, height, 55, hitDirection, 0f, 200, this.color);
						Dust dust = Main.dust[num396];
						dust.velocity *= 2f;
					}
				}
			}
			if (type == 63 || type == 64 || type == 103)
			{
				Color newColor7 = new Color(50, 120, 255, 100);
				if (type == 64)
				{
					newColor7 = new Color(225, 70, 140, 100);
				}
				if (type == 103)
				{
					newColor7 = new Color(70, 225, 140, 100);
				}
				if (life > 0)
				{
					for (int num397 = 0; (double)num397 < dmg / (double)lifeMax * 50.0; num397++)
					{
						Dust.NewDust(base.position, width, height, 4, hitDirection, -1f, 0, newColor7);
					}
				}
				else
				{
					for (int num398 = 0; num398 < 25; num398++)
					{
						Dust.NewDust(base.position, width, height, 4, 2 * hitDirection, -2f, 0, newColor7);
					}
				}
			}
			else if (type == 59 || type == 60 || type == 151)
			{
				if (life > 0)
				{
					for (int num399 = 0; (double)num399 < dmg / (double)lifeMax * 80.0; num399++)
					{
						int num400 = Dust.NewDust(base.position, width, height, 6, hitDirection * 2, -1f, alpha, default(Color), 1.5f);
						if (Main.rand.Next(8) != 0)
						{
							Main.dust[num400].noGravity = true;
						}
					}
					return;
				}
				for (int num401 = 0; num401 < 40; num401++)
				{
					int num402 = Dust.NewDust(base.position, width, height, 6, hitDirection * 2, -1f, alpha, default(Color), 1.5f);
					if (Main.rand.Next(8) != 0)
					{
						Main.dust[num402].noGravity = true;
					}
				}
				if (!Main.expertMode || type != 59 || Main.netMode == 1)
				{
					return;
				}
				try
				{
					int num403 = (int)(base.Center.X / 16f);
					int num404 = (int)(base.Center.Y / 16f);
					if (!WorldGen.SolidTile(num403, num404) && Main.tile[num403, num404].liquid == 0)
					{
						Main.tile[num403, num404].liquid = (byte)Main.rand.Next(50, 150);
						Main.tile[num403, num404].lava(lava: true);
						Main.tile[num403, num404].honey(honey: false);
						WorldGen.SquareTileFrame(num403, num404);
					}
				}
				catch
				{
				}
			}
			else if (type == 50)
			{
				if (life > 0)
				{
					for (int num405 = 0; (double)num405 < dmg / (double)lifeMax * 300.0; num405++)
					{
						Dust.NewDust(base.position, width, height, 4, hitDirection, -1f, 175, new Color(0, 80, 255, 100));
					}
					return;
				}
				for (int num406 = 0; num406 < 200; num406++)
				{
					Dust.NewDust(base.position, width, height, 4, 2 * hitDirection, -2f, 175, new Color(0, 80, 255, 100));
				}
				Gore.NewGore(base.Center + new Vector2(-40f, -height / 2), base.velocity, 734);
				if (Main.netMode == 1)
				{
					return;
				}
				int num407 = Main.rand.Next(4) + 4;
				for (int num408 = 0; num408 < num407; num408++)
				{
					int x = (int)(base.position.X + (float)Main.rand.Next(width - 32));
					int y = (int)(base.position.Y + (float)Main.rand.Next(height - 32));
					int num409 = NewNPC(x, y, 1, whoAmI + 1);
					Main.npc[num409].SetDefaults(1);
					Main.npc[num409].velocity.X = (float)Main.rand.Next(-15, 16) * 0.1f;
					Main.npc[num409].velocity.Y = (float)Main.rand.Next(-30, 1) * 0.1f;
					Main.npc[num409].ai[0] = -1000 * Main.rand.Next(3);
					Main.npc[num409].ai[1] = 0f;
					if (Main.netMode == 2 && num409 < 200)
					{
						NetMessage.SendData(23, -1, -1, null, num409);
					}
				}
			}
			else if (type == 153)
			{
				if (life > 0)
				{
					for (int num410 = 0; (double)num410 < dmg / (double)lifeMax * 30.0; num410++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num411 = 0; num411 < 15; num411++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 177);
				Gore.NewGore(base.position, base.velocity, 178);
				Gore.NewGore(base.position, base.velocity, 179);
				Gore.NewGore(base.position, base.velocity, 179);
			}
			else if (type == 177)
			{
				if (life > 0)
				{
					for (int num412 = 0; (double)num412 < dmg / (double)lifeMax * 30.0; num412++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num413 = 0; num413 < 15; num413++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 234);
				Gore.NewGore(base.position, base.velocity, 235);
				Gore.NewGore(base.position, base.velocity, 236);
				Gore.NewGore(base.position, base.velocity, 236);
			}
			else if (type >= 494 && type <= 495)
			{
				if (life > 0)
				{
					for (int num414 = 0; (double)num414 < dmg / (double)lifeMax * 30.0; num414++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num415 = 0; num415 < 15; num415++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				int num416 = (type - 494) * 2;
				Gore.NewGore(base.position, base.velocity, 736 + num416);
				Gore.NewGore(base.position, base.velocity, 735 + num416);
			}
			else if (type >= 496 && type <= 497)
			{
				if (life > 0)
				{
					for (int num417 = 0; (double)num417 < dmg / (double)lifeMax * 30.0; num417++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num418 = 0; num418 < 15; num418++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				int num419 = type - 496;
				Gore.NewGore(base.position, base.velocity, 739 + num419);
			}
			else if (type >= 498 && type <= 506)
			{
				if (life > 0)
				{
					for (int num420 = 0; (double)num420 < dmg / (double)lifeMax * 30.0; num420++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num421 = 0; num421 < 15; num421++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				int num422 = type - 498;
				Gore.NewGore(base.position, base.velocity, 750 + num422);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 16f), base.velocity, 741 + num422);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 18f), base.velocity, 759 + num422);
			}
			else if (type == 49 || type == 51 || type == 93 || type == 150 || type == 152 || type == 226)
			{
				if (life > 0)
				{
					for (int num423 = 0; (double)num423 < dmg / (double)lifeMax * 30.0; num423++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num424 = 0; num424 < 15; num424++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 51)
				{
					Gore.NewGore(base.position, base.velocity, 83);
				}
				else if (type == 93)
				{
					Gore.NewGore(base.position, base.velocity, 107);
				}
				else if (type == 150)
				{
					Gore.NewGore(base.position, base.velocity, 164);
					Gore.NewGore(base.position, base.velocity, 165);
				}
				else if (type == 152)
				{
					Gore.NewGore(base.position, base.velocity, 175);
					Gore.NewGore(base.position, base.velocity, 176);
					Gore.NewGore(base.position, base.velocity, 176);
				}
				else if (type == 226)
				{
					Gore.NewGore(base.position, base.velocity, 317);
					Gore.NewGore(base.position, base.velocity, 318);
					Gore.NewGore(base.position, base.velocity, 318);
					Gore.NewGore(base.position, base.velocity, 319);
				}
				else
				{
					Gore.NewGore(base.position, base.velocity, 82);
				}
			}
			else if (type == 611)
			{
				if (life > 0)
				{
					for (int num425 = 0; (double)num425 < dmg / (double)lifeMax * 30.0; num425++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num426 = 0; num426 < 15; num426++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 1164);
				Gore.NewGore(base.position, base.velocity, 1164);
				Gore.NewGore(base.position, base.velocity, 1165);
			}
			else if (type == 624)
			{
				if (life > 0)
				{
					for (int num427 = 0; (double)num427 < dmg / (double)lifeMax * 20.0; num427++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num428 = 0; num428 < 10; num428++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 1190);
				Gore.NewGore(base.position, base.velocity, 1191);
				Gore.NewGore(base.position, base.velocity, 1192);
				Gore.NewGore(base.position, base.velocity, 1193);
			}
			else if (type == 628)
			{
				if (life > 0)
				{
					for (int num429 = 0; (double)num429 < dmg / (double)lifeMax * 20.0; num429++)
					{
						Dust.NewDust(base.position, width, height, 3, hitDirection, -1f);
					}
					return;
				}
				for (int num430 = 0; num430 < 10; num430++)
				{
					Dust.NewDust(base.position, width, height, 3, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 1205);
				Gore.NewGore(base.position, base.velocity, 1206);
				Gore.NewGore(base.position, base.velocity, 1206);
				Gore.NewGore(base.position, base.velocity, 1207);
			}
			else if (type >= 646 && type <= 652)
			{
				int num431 = 138;
				if (type < 652)
				{
					num431 = 86 + (type - 646);
				}
				if (life > 0)
				{
					for (int num432 = 0; (double)num432 < dmg / (double)lifeMax * 20.0; num432++)
					{
						Dust.NewDust(base.position, width, height, num431, hitDirection, -1f);
					}
					return;
				}
				for (int num433 = 0; num433 < 10; num433++)
				{
					Dust.NewDust(base.position, width, height, num431, 2 * hitDirection, -2f);
				}
				int num434 = (type - 646) * 2;
				Gore.NewGore(base.position, base.velocity, 1234 + num434);
				Gore.NewGore(base.position, base.velocity, 1235 + num434);
			}
			else if (type >= 639 && type <= 645)
			{
				int num435 = 138;
				if (type < 645)
				{
					num435 = 86 + (type - 639);
				}
				if (life > 0)
				{
					for (int num436 = 0; (double)num436 < dmg / (double)lifeMax * 20.0; num436++)
					{
						Dust.NewDust(base.position, width, height, num435, hitDirection, -1f);
					}
					return;
				}
				for (int num437 = 0; num437 < 10; num437++)
				{
					Dust.NewDust(base.position, width, height, num435, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 1227 + (type - 639));
			}
			else if (type == 46 || type == 55 || type == 67 || type == 74 || type == 102 || type == 224 || type == 230 || type == 297 || type == 298 || type == 299 || type == 300 || type == 303 || type == 337 || type == 538 || type == 540 || type == 587 || type == 610 || type == 614 || type == 616 || type == 617 || type == 625 || type == 626 || type == 627 || type == 615)
			{
				if (life > 0)
				{
					for (int num438 = 0; (double)num438 < dmg / (double)lifeMax * 20.0; num438++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num439 = 0; num439 < 10; num439++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 46 || type == 303 || type == 337 || type == 540)
				{
					Gore.NewGore(base.position, base.velocity, 76);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 77);
					if (type == 303)
					{
						for (int num440 = 0; num440 < 10; num440++)
						{
							Dust.NewDust(base.position, width, height, 193, 2 * hitDirection, -2f);
						}
					}
					if (type == 540)
					{
						Gore.NewGore(base.position, base.velocity, 926);
					}
				}
				else if (type == 67)
				{
					Gore.NewGore(base.position, base.velocity, 95);
					Gore.NewGore(base.position, base.velocity, 95);
					Gore.NewGore(base.position, base.velocity, 96);
				}
				else if (type == 55 || type == 230)
				{
					Gore.NewGore(base.position, base.velocity, 553);
					Gore.NewGore(base.position, base.velocity, 554);
				}
				else if (type == 615)
				{
					Gore.NewGore(base.position, base.velocity, 1198);
					Gore.NewGore(base.position, base.velocity, 1199);
					Gore.NewGore(base.position, base.velocity, 1200);
					Gore.NewGore(base.position, base.velocity, 1200);
				}
				else if (type == 74)
				{
					Gore.NewGore(base.position, base.velocity, 100);
				}
				else if (type == 297)
				{
					Gore.NewGore(base.position, base.velocity, 431);
				}
				else if (type == 298)
				{
					Gore.NewGore(base.position, base.velocity, 432);
				}
				else if (type == 299)
				{
					Gore.NewGore(base.position, base.velocity, 433);
				}
				else if (type == 538)
				{
					Gore.NewGore(base.position, base.velocity, 897);
				}
				else if (type == 300)
				{
					Gore.NewGore(base.position, base.velocity, 434);
				}
				else if (type == 610)
				{
					Gore.NewGore(base.position, base.velocity, 1163);
				}
				else if (type == 626)
				{
					Gore.NewGore(base.position, base.velocity, 1197);
				}
				else if (type == 102)
				{
					Gore.NewGore(base.position, base.velocity, 116);
				}
				else if (type == 224)
				{
					Gore.NewGore(base.position, base.velocity, 312);
					Gore.NewGore(base.position, base.velocity, 313);
				}
				else if (type == 587)
				{
					for (int num441 = 0; num441 < 50; num441++)
					{
						Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					}
					Gore.NewGore(base.position, base.velocity, 1104);
					Gore.NewGore(base.position, base.velocity, 1105);
				}
				else if (type == 616)
				{
					Gore.NewGore(base.position, base.velocity, 1166);
					Gore.NewGore(base.position, base.velocity, 1167);
					Gore.NewGore(base.position, base.velocity, 1168);
					Gore.NewGore(base.position, base.velocity, 1168);
				}
				else if (type == 617)
				{
					Gore.NewGore(base.position, base.velocity, 1169);
					Gore.NewGore(base.position, base.velocity, 1170);
					Gore.NewGore(base.position, base.velocity, 1171);
					Gore.NewGore(base.position, base.velocity, 1171);
				}
				else if (type == 625)
				{
					Gore.NewGore(base.position, base.velocity, 1194);
					Gore.NewGore(base.position, base.velocity, 1195);
					Gore.NewGore(base.position, base.velocity, 1196);
					Gore.NewGore(base.position, base.velocity, 1196);
				}
			}
			else if (type == 148 || type == 149 || type == 168 || type == 470)
			{
				if (life > 0)
				{
					for (int num442 = 0; (double)num442 < dmg / (double)lifeMax * 20.0; num442++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num443 = 0; num443 < 10; num443++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 148)
				{
					Gore.NewGore(base.position, base.velocity, 160);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 161);
				}
				else if (type == 149)
				{
					Gore.NewGore(base.position, base.velocity, 162);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 163);
				}
				else if (type == 168)
				{
					Gore.NewGore(base.position, base.velocity, 215);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 216);
				}
				else if (type == 470)
				{
					Gore.NewGore(base.position, base.velocity, 673);
					Gore.NewGore(base.position, base.velocity, 672);
					Gore.NewGore(base.position, base.velocity, 674);
				}
			}
			else if (type == 361)
			{
				if (life > 0)
				{
					for (int num444 = 0; (double)num444 < dmg / (double)lifeMax * 20.0; num444++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num445 = 0; num445 < 10; num445++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 551);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 552);
			}
			else if (type == 607)
			{
				if (life > 0)
				{
					for (int num446 = 0; (double)num446 < dmg / (double)lifeMax * 20.0; num446++)
					{
						Dust.NewDust(base.position, width, height, 45, hitDirection, -1f);
					}
					return;
				}
				for (int num447 = 0; num447 < 10; num447++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 1152);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 1153);
			}
			else if (type == 366 || type == 367)
			{
				if (life > 0)
				{
					for (int num448 = 0; (double)num448 < dmg / (double)lifeMax * 20.0; num448++)
					{
						Dust.NewDust(base.position, width, height, 203, hitDirection, -1f);
					}
					return;
				}
				for (int num449 = 0; num449 < 10; num449++)
				{
					Dust.NewDust(base.position, width, height, 203, 2 * hitDirection, -2f);
				}
				if (type == 366)
				{
					Gore.NewGore(base.position, base.velocity, 561);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 562);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 563);
				}
				else
				{
					Gore.NewGore(base.position, base.velocity, 564);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 565);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 566);
				}
			}
			else if (type >= 362 && type <= 365)
			{
				if (life > 0)
				{
					for (int num450 = 0; (double)num450 < dmg / (double)lifeMax * 20.0; num450++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num451 = 0; num451 < 10; num451++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 362 || type == 363)
				{
					Gore.NewGore(base.position, base.velocity, 555);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 556);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 557);
				}
				else
				{
					Gore.NewGore(base.position, base.velocity, 558);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 559);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 560);
				}
			}
			else if (type == 602 || type == 603)
			{
				if (life > 0)
				{
					for (int num452 = 0; (double)num452 < dmg / (double)lifeMax * 20.0; num452++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num453 = 0; num453 < 10; num453++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 602 || type == 603)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 1150);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 1151);
				}
			}
			else if (type == 608 || type == 609)
			{
				if (life > 0)
				{
					for (int num454 = 0; (double)num454 < dmg / (double)lifeMax * 20.0; num454++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num455 = 0; num455 < 10; num455++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 608 || type == 609)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 1154);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 1155);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 1156);
				}
			}
			else if (type == 348 || type == 349)
			{
				if (life > 0)
				{
					for (int num456 = 0; (double)num456 < dmg / (double)lifeMax * 20.0; num456++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num457 = 0; num457 < 10; num457++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 528);
				Gore.NewGore(base.position, base.velocity, 529);
				Gore.NewGore(base.position, base.velocity, 530);
				Gore.NewGore(base.position, base.velocity, 531);
				Gore.NewGore(base.position, base.velocity, 532);
			}
			else if (type == 351)
			{
				if (life > 0)
				{
					for (int num458 = 0; (double)num458 < dmg / (double)lifeMax * 20.0; num458++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num459 = 0; num459 < 10; num459++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 538);
				Gore.NewGore(base.position, base.velocity, 539);
				Gore.NewGore(base.position, base.velocity, 540);
				Gore.NewGore(base.position, base.velocity, 541);
				Gore.NewGore(base.position, base.velocity, 542);
			}
			else if (type == 350)
			{
				if (life > 0)
				{
					for (int num460 = 0; (double)num460 < dmg / (double)lifeMax * 20.0; num460++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num461 = 0; num461 < 10; num461++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 533);
				Gore.NewGore(base.position, base.velocity, 534);
				Gore.NewGore(base.position, base.velocity, 535);
				Gore.NewGore(base.position, base.velocity, 536);
			}
			else if (type == 47 || type == 57 || type == 58 || type == 464 || type == 465)
			{
				if (life > 0)
				{
					for (int num462 = 0; (double)num462 < dmg / (double)lifeMax * 20.0; num462++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num463 = 0; num463 < 10; num463++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 57)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 84);
				}
				else if (type == 58)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 85);
				}
				else if (type == 464)
				{
					Gore.NewGore(base.position, base.velocity, 668);
					Gore.NewGore(base.position, base.velocity, 669);
				}
				else if (type == 465)
				{
					Gore.NewGore(base.position, base.velocity, 670);
					Gore.NewGore(base.position, base.velocity, 671);
				}
				else
				{
					Gore.NewGore(base.position, base.velocity, 78);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 79);
				}
			}
			else if (type == 173 || type == 174 || type == 181 || type == 182 || type == 268)
			{
				if (life > 0)
				{
					for (int num464 = 0; (double)num464 < dmg / (double)lifeMax * 100.0; num464++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f, alpha);
					}
					return;
				}
				for (int num465 = 0; num465 < 50; num465++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f, alpha);
				}
				if (type == 173)
				{
					Gore.NewGore(base.position, base.velocity, 223);
					Gore.NewGore(base.position, base.velocity, 224);
				}
				else if (type == 174)
				{
					Gore.NewGore(base.position, base.velocity, 225);
					Gore.NewGore(base.position, base.velocity, 226);
				}
				else if (type == 181)
				{
					Gore.NewGore(base.position, base.velocity, 237);
				}
				else if (type == 182)
				{
					Gore.NewGore(base.position, base.velocity, 238);
					Gore.NewGore(base.position, base.velocity, 239);
				}
				else if (type == 268)
				{
					Gore.NewGore(base.position, base.velocity, 403);
					Gore.NewGore(base.position, base.velocity, 404);
					Gore.NewGore(base.position, base.velocity, 405);
				}
			}
			else if (type == 2 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318)
			{
				if (life > 0)
				{
					for (int num466 = 0; (double)num466 < dmg / (double)lifeMax * 100.0; num466++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num467 = 0; num467 < 50; num467++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 190)
				{
					Gore.NewGore(base.position, base.velocity, 249, scale);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 2, scale);
				}
				else if (type == 191)
				{
					Gore.NewGore(base.position, base.velocity, 248, scale);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 2, scale);
				}
				else if (type == 192)
				{
					Gore.NewGore(base.position, base.velocity, 247, scale);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 2, scale);
				}
				else if (type == 193)
				{
					Gore.NewGore(base.position, base.velocity, 252, scale);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 253, scale);
				}
				else if (type == 194)
				{
					Gore.NewGore(base.position, base.velocity, 250, scale);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 251, scale);
				}
				else if (type == 317)
				{
					Gore.NewGore(base.position, base.velocity, 447, scale);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 448, scale);
				}
				else if (type == 318)
				{
					Gore.NewGore(base.position, base.velocity, 449, scale);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 450, scale);
				}
				else
				{
					Gore.NewGore(base.position, base.velocity, 1, scale);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 2, scale);
				}
			}
			else if (type == 157)
			{
				if (life > 0)
				{
					for (int num468 = 0; (double)num468 < dmg / (double)lifeMax * 100.0; num468++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num469 = 0; num469 < 50; num469++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 186);
				Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 187);
			}
			else if (type == 133)
			{
				if (life > 0)
				{
					for (int num470 = 0; (double)num470 < dmg / (double)lifeMax * 100.0; num470++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					if ((float)life < (float)lifeMax * 0.5f && localAI[0] == 0f)
					{
						localAI[0] = 1f;
						Gore.NewGore(base.position, base.velocity, 1);
					}
				}
				else
				{
					for (int num471 = 0; num471 < 50; num471++)
					{
						Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
					}
					Gore.NewGore(base.position, base.velocity, 155);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 14f), base.velocity, 155);
				}
			}
			else if (type == 69 || type == 581 || type == 580 || type == 508 || type == 509 || type == 582)
			{
				float num472 = 100f;
				float num473 = 50f;
				if (type == 582)
				{
					num472 = 30f;
					num473 = 10f;
				}
				if (life > 0)
				{
					for (int num474 = 0; (double)num474 < dmg / (double)lifeMax * (double)num472; num474++)
					{
						Dust.NewDust(base.position, width, height, 250, hitDirection, -1f);
					}
					return;
				}
				for (int num475 = 0; (float)num475 < num473; num475++)
				{
					Dust.NewDust(base.position, width, height, 250, 2 * hitDirection, -2f);
				}
				if (type == 69)
				{
					Gore.NewGore(base.position, base.velocity, 97);
					Gore.NewGore(base.position, base.velocity, 98);
				}
				else if (type == 580)
				{
					Gore.NewGore(base.position, base.velocity, 1094);
					Gore.NewGore(base.position, base.velocity, 1095);
					Gore.NewGore(base.position, base.velocity, 1096);
					Gore.NewGore(base.position, base.velocity, 1097);
				}
				else if (type == 581)
				{
					Gore.NewGore(base.position, base.velocity, 1098);
					Gore.NewGore(base.position, base.velocity, 1099);
					Gore.NewGore(base.position, base.velocity, 1100);
					Gore.NewGore(base.position, base.velocity, 1101);
					Gore.NewGore(base.position, base.velocity, 1101);
				}
				else if (type == 508)
				{
					Gore.NewGore(base.position, base.velocity, 811);
					Gore.NewGore(base.position, base.velocity, 812);
					Gore.NewGore(base.position, base.velocity, 813);
					Gore.NewGore(base.position, base.velocity, 814);
				}
				else if (type == 509)
				{
					Gore.NewGore(base.position, base.velocity, 815);
					Gore.NewGore(base.position, base.velocity, 816);
					Gore.NewGore(base.position, base.velocity, 817);
					Gore.NewGore(base.position, base.velocity, 818);
					Gore.NewGore(base.position, base.velocity, 818);
				}
				else if (type == 582)
				{
					Gore.NewGore(base.position, base.velocity, 1102);
					Gore.NewGore(base.position, base.velocity, 1103);
				}
			}
			else if (type == 61)
			{
				if (life > 0)
				{
					for (int num476 = 0; (double)num476 < dmg / (double)lifeMax * 100.0; num476++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num477 = 0; num477 < 50; num477++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 86);
				Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 87);
				Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 88);
			}
			else if (type == 301)
			{
				if (life > 0)
				{
					for (int num478 = 0; (double)num478 < dmg / (double)lifeMax * 100.0; num478++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num479 = 0; num479 < 50; num479++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 438);
				Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity, 439);
			}
			else if (type == 252)
			{
				if (life > 0)
				{
					for (int num480 = 0; (double)num480 < dmg / (double)lifeMax * 100.0; num480++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num481 = 0; num481 < 50; num481++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 373);
				Gore.NewGore(base.position, base.velocity, 374);
			}
			else if (type == 489 || type == 586)
			{
				if (life > 0)
				{
					for (int num482 = 0; (double)num482 < dmg / (double)lifeMax * 100.0; num482++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num483 = 0; num483 < 50; num483++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 489)
				{
					Gore.NewGore(base.position, base.velocity, 722, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 723, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 723, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 724, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 724, scale);
				}
				if (type == 586)
				{
					Gore.NewGore(base.position, base.velocity, 1106, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 1107, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 1107, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 1108, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 1108, scale);
				}
			}
			else if (type == 534)
			{
				if (life > 0)
				{
					for (int num484 = 0; (double)num484 < dmg / (double)lifeMax * 100.0; num484++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num485 = 0; num485 < 50; num485++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 894, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 895, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 895, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 896, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 896, scale);
			}
			else if (type == 490)
			{
				if (life > 0)
				{
					for (int num486 = 0; (double)num486 < dmg / (double)lifeMax * 100.0; num486++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num487 = 0; num487 < 50; num487++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 725, scale);
				Gore.NewGore(base.position, base.velocity, 726, scale);
				Gore.NewGore(base.position, base.velocity, 727, scale);
				Gore.NewGore(base.position, base.velocity, 725 + Main.rand.Next(3), scale);
				Gore.NewGore(base.position, base.velocity, 725 + Main.rand.Next(3), scale);
			}
			else if (type == 65 || (type >= 542 && type <= 545))
			{
				if (life > 0)
				{
					for (int num488 = 0; (double)num488 < dmg / (double)lifeMax * 150.0; num488++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num489 = 0; num489 < 75; num489++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				if (type == 65)
				{
					Gore.NewGore(base.position, base.velocity * 0.8f, 89);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 90);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 91);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 92);
				}
				if (type == 542)
				{
					Gore.NewGore(base.position, base.velocity * 0.8f, 944);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 945);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 946);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 947);
				}
				if (type == 543)
				{
					Gore.NewGore(base.position, base.velocity * 0.8f, 948);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 949);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 950);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 951);
				}
				if (type == 544)
				{
					Gore.NewGore(base.position, base.velocity * 0.8f, 952);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 953);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 954);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 955);
				}
				if (type == 545)
				{
					Gore.NewGore(base.position, base.velocity * 0.8f, 956);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 957);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 958);
					Gore.NewGore(new Vector2(base.position.X + 14f, base.position.Y), base.velocity * 0.8f, 959);
				}
			}
			else if (type == 195 || type == 196)
			{
				if (life > 0)
				{
					for (int num490 = 0; (double)num490 < dmg / (double)lifeMax * 150.0; num490++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num491 = 0; num491 < 75; num491++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 254, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 255, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 255, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 256, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 256, scale);
			}
			else if (type == 198 || type == 199)
			{
				if (life > 0)
				{
					for (int num492 = 0; (double)num492 < dmg / (double)lifeMax * 150.0; num492++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num493 = 0; num493 < 75; num493++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 258, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 259, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 259, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 260, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 260, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 261, scale);
			}
			else if (type == 206)
			{
				if (life > 0)
				{
					for (int num494 = 0; (double)num494 < dmg / (double)lifeMax * 150.0; num494++)
					{
						Dust.NewDust(base.position, width, height, 137, hitDirection, -1f);
					}
					return;
				}
				for (int num495 = 0; num495 < 75; num495++)
				{
					Dust.NewDust(base.position, width, height, 137, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 273, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 274, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 274, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 275, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 275, scale);
			}
			else if (type == 342)
			{
				if (life > 0)
				{
					for (int num496 = 0; (double)num496 < dmg / (double)lifeMax * 100.0; num496++)
					{
						Dust.NewDust(base.position, width, height, 0, hitDirection, -1f);
					}
					return;
				}
				for (int num497 = 0; num497 < 50; num497++)
				{
					Dust.NewDust(base.position, width, height, 0, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 500, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 501, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 501, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 502, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 502, scale);
			}
			else if (type >= 338 && type <= 340)
			{
				if (life > 0)
				{
					for (int num498 = 0; (double)num498 < dmg / (double)lifeMax * 100.0; num498++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num499 = 0; num499 < 50; num499++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 338)
				{
					Gore.NewGore(base.position, base.velocity, 494, scale);
				}
				if (type == 339)
				{
					Gore.NewGore(base.position, base.velocity, 495, scale);
				}
				if (type == 340)
				{
					Gore.NewGore(base.position, base.velocity, 496, scale);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 497, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 498, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 499, scale);
			}
			else if (type == 343)
			{
				if (life > 0)
				{
					for (int num500 = 0; (double)num500 < dmg / (double)lifeMax * 100.0; num500++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num501 = 0; num501 < 50; num501++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 503, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 504, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 505, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 506, scale);
			}
			else if ((type >= 430 && type <= 436) || type == 590 || type == 591 || type == 3 || type == 52 || type == 53 || type == 536 || type == 104 || type == 109 || type == 331 || type == 332 || type == 132 || type == 161 || type == 162 || type == 186 || type == 187 || type == 188 || type == 189 || type == 200 || type == 223 || type == 251 || type == 319 || type == 320 || type == 321 || type == 632)
			{
				if (life > 0)
				{
					for (int num502 = 0; (double)num502 < dmg / (double)lifeMax * 100.0; num502++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					if (type == 186 && Main.rand.Next(5) == 0)
					{
						Gore.NewGore(base.position, base.velocity, 242);
					}
					if (type == 632 && Main.rand.Next(5) == 0)
					{
						Gore.NewGore(base.position, base.velocity, 1217);
					}
					if (type == 187)
					{
						for (int num503 = 0; (double)num503 < dmg / (double)lifeMax * 200.0; num503++)
						{
							Dust.NewDust(base.position, width, 24, 4, hitDirection, -1f, 125, new Color(0, 80, 255, 100));
						}
					}
					if ((type == 590 || type == 591) && !wet)
					{
						for (int num504 = 0; num504 < 3; num504++)
						{
							Dust.NewDust(base.position, width, 24, 6, hitDirection, -1f, 125, new Color(0, 80, 255, 100));
						}
					}
					return;
				}
				for (int num505 = 0; num505 < 50; num505++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 187 || type == 433)
				{
					for (int num506 = 0; num506 < 25; num506++)
					{
						Dust.NewDust(base.position, width, 24, 4, hitDirection, -1f, 125, new Color(0, 80, 255, 100));
					}
				}
				if (type == 104)
				{
					Gore.NewGore(base.position, base.velocity, 117, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 118, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 118, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 119, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 119, scale);
					return;
				}
				if (type == 632)
				{
					Gore.NewGore(base.position, base.velocity, 1214, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 1215, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 1215, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 1216, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 1216, scale);
					if (Main.netMode != 1)
					{
						int num507 = Main.rand.Next(2) + 2;
						for (int num508 = 0; num508 < num507; num508++)
						{
							Vector2 velocity5 = new Vector2((float)Main.rand.Next(-10, 10) * 0.2f, -3.5f - (float)Main.rand.Next(5, 10) * 0.3f - (float)num508 * 0.5f);
							int num509 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)base.position.Y + Main.rand.Next(height / 2) + 10, 606);
							Main.npc[num509].velocity = velocity5;
							Main.npc[num509].netUpdate = true;
						}
					}
					return;
				}
				if (type == 331)
				{
					Gore.NewGore(base.position, base.velocity, 488, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 489, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 489, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 490, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 490, scale);
					return;
				}
				if (type == 332)
				{
					Gore.NewGore(base.position, base.velocity, 491, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 492, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 492, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 493, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 493, scale);
					return;
				}
				if (type == 109)
				{
					Gore.NewGore(base.position, base.velocity, 121, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 122, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 122, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 123, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 123, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 46f), base.velocity, 120, scale);
					return;
				}
				if (type == 161 || type == 431)
				{
					Gore.NewGore(base.position, base.velocity, 191, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 192, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 192, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 193, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 193, scale);
					return;
				}
				if (type == 162)
				{
					Gore.NewGore(base.position, base.velocity, 194, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 195, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 195, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 196, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 196, scale);
					return;
				}
				if (type == 188 || type == 434)
				{
					Gore.NewGore(base.position, base.velocity, 243, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 244, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 244, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 245, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 245, scale);
					return;
				}
				if (type == 200 || type == 436)
				{
					Gore.NewGore(base.position, base.velocity, 262, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 263, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 263, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 264, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 264, scale);
					return;
				}
				if (type == 319)
				{
					Gore.NewGore(base.position, base.velocity, 451, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 453, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 453, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 452, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 452, scale);
					return;
				}
				if (type == 320)
				{
					Gore.NewGore(base.position, base.velocity, 454, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 455, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 456, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 456, scale);
					return;
				}
				if (type == 321)
				{
					Gore.NewGore(base.position, base.velocity, 457, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 458, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 458, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 459, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 459, scale);
					return;
				}
				if (type == 223)
				{
					Gore.NewGore(base.position, base.velocity, 309, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 310, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 310, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 311, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 311, scale);
					return;
				}
				if (type == 132)
				{
					Gore.NewGore(base.position, base.velocity, 154);
				}
				else if (type == 186 || type == 432)
				{
					Gore.NewGore(base.position, base.velocity, 241);
				}
				else if (type == 189 || type == 435)
				{
					Gore.NewGore(base.position, base.velocity, 246);
				}
				else if (type == 251)
				{
					Gore.NewGore(base.position, base.velocity, 372);
				}
				else if (type != 187 && type != 433)
				{
					Gore.NewGore(base.position, base.velocity, 3);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 4);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 4);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 5);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 5);
				if (type == 186 || type == 432)
				{
					Gore.NewGore(base.position, base.velocity, 242);
				}
				if ((type == 186 || type == 432) && Main.rand.Next(2) == 0)
				{
					Gore.NewGore(base.position, base.velocity, 242);
				}
			}
			else if (type == 83 || type == 84 || type == 179)
			{
				if (life > 0)
				{
					for (int num510 = 0; (double)num510 < dmg / (double)lifeMax * 50.0; num510++)
					{
						int num511 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num511].noGravity = true;
					}
					return;
				}
				for (int num512 = 0; num512 < 20; num512++)
				{
					int num513 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust = Main.dust[num513];
					dust.velocity *= 2f;
					Main.dust[num513].noGravity = true;
				}
				int num514 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(Main.rand.Next(-2, 3), Main.rand.Next(-2, 3)), 61, scale);
				Gore gore2 = Main.gore[num514];
				gore2.velocity *= 0.5f;
				num514 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(Main.rand.Next(-2, 3), Main.rand.Next(-2, 3)), 61, scale);
				gore2 = Main.gore[num514];
				gore2.velocity *= 0.5f;
				num514 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(Main.rand.Next(-2, 3), Main.rand.Next(-2, 3)), 61, scale);
				gore2 = Main.gore[num514];
				gore2.velocity *= 0.5f;
			}
			else if (type == 262 || type == 263 || type == 264)
			{
				if (life > 0)
				{
					for (int num515 = 0; (double)num515 < dmg / (double)lifeMax * 100.0; num515++)
					{
						if (type == 262 && life > lifeMax / 2 && Main.rand.Next(3) != 0)
						{
							Dust.NewDust(base.position, width, height, 166, hitDirection, -1f);
						}
						else if (type == 265 && Main.rand.Next(3) != 0)
						{
							Dust.NewDust(base.position, width, height, 166, hitDirection, -1f);
						}
						else
						{
							Dust.NewDust(base.position, width, height, 167, hitDirection, -1f);
						}
					}
					return;
				}
				for (int num516 = 0; num516 < 150; num516++)
				{
					if (type == 265 && Main.rand.Next(3) != 0)
					{
						Dust.NewDust(base.position, width, height, 166, 2 * hitDirection, -2f);
					}
					else
					{
						Dust.NewDust(base.position, width, height, 167, 2 * hitDirection, -2f);
					}
				}
				if (type == 262)
				{
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 381, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 382, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 383, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 384, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 385, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 386, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 386, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 387, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 387, scale);
				}
				if (type == 263)
				{
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 390, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 391, scale);
				}
				if (type == 264)
				{
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 388, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)Main.rand.Next(width), base.position.Y + (float)Main.rand.Next(height)), base.velocity, 389, scale);
				}
			}
			else if (type == 265)
			{
				if (life >= 0)
				{
					return;
				}
				for (int num517 = 0; num517 < 15; num517++)
				{
					if (Main.rand.Next(3) != 0)
					{
						Dust.NewDust(base.position, width, height, 166, hitDirection, -1f);
					}
					else
					{
						Dust.NewDust(base.position, width, height, 167, hitDirection, -1f);
					}
				}
			}
			else if (type == 266)
			{
				if (life > 0)
				{
					for (int num518 = 0; (double)num518 < dmg / (double)lifeMax * 100.0; num518++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num519 = 0; num519 < 150; num519++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 396);
				Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 397);
				Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 398);
				Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 399);
				Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 400);
				Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 401);
			}
			else if (type == 267)
			{
				if (life > 0)
				{
					for (int num520 = 0; (double)num520 < dmg / (double)lifeMax * 50.0; num520++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num521 = 0; num521 < 20; num521++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 402);
			}
			else if (type == 4 || type == 126 || type == 125)
			{
				if (life > 0)
				{
					for (int num522 = 0; (double)num522 < dmg / (double)lifeMax * 100.0; num522++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num523 = 0; num523 < 150; num523++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				for (int num524 = 0; num524 < 2; num524++)
				{
					Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 2);
					Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 7);
					Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 9);
					if (type == 4)
					{
						Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 10);
						SoundEngine.PlaySound(15, (int)base.position.X, (int)base.position.Y, 0);
					}
					else if (type == 125)
					{
						Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 146);
					}
					else if (type == 126)
					{
						Gore.NewGore(base.position, new Vector2((float)Main.rand.Next(-30, 31) * 0.2f, (float)Main.rand.Next(-30, 31) * 0.2f), 145);
					}
				}
				if (type == 125 || type == 126)
				{
					for (int num525 = 0; num525 < 10; num525++)
					{
						int num526 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num526];
						dust.velocity *= 1.4f;
					}
					for (int num527 = 0; num527 < 5; num527++)
					{
						int num528 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num528].noGravity = true;
						Dust dust = Main.dust[num528];
						dust.velocity *= 5f;
						num528 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num528];
						dust.velocity *= 3f;
					}
					int num529 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore2 = Main.gore[num529];
					gore2.velocity *= 0.4f;
					Main.gore[num529].velocity.X += 1f;
					Main.gore[num529].velocity.Y += 1f;
					num529 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num529];
					gore2.velocity *= 0.4f;
					Main.gore[num529].velocity.X -= 1f;
					Main.gore[num529].velocity.Y += 1f;
					num529 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num529];
					gore2.velocity *= 0.4f;
					Main.gore[num529].velocity.X += 1f;
					Main.gore[num529].velocity.Y -= 1f;
					num529 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num529];
					gore2.velocity *= 0.4f;
					Main.gore[num529].velocity.X -= 1f;
					Main.gore[num529].velocity.Y -= 1f;
				}
			}
			else if (type == 5)
			{
				if (life > 0)
				{
					for (int num530 = 0; (double)num530 < dmg / (double)lifeMax * 50.0; num530++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num531 = 0; num531 < 20; num531++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 6);
				Gore.NewGore(base.position, base.velocity, 7);
			}
			else if (type == 113 || type == 114)
			{
				if (life > 0)
				{
					for (int num532 = 0; num532 < 20; num532++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num533 = 0; num533 < 50; num533++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -1f);
				}
				if (type == 114)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 137, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2)), base.velocity, 139, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)(width / 2), base.position.Y), base.velocity, 139, scale);
					Gore.NewGore(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), base.velocity, 137, scale);
					return;
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 137, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2)), base.velocity, 138, scale);
				Gore.NewGore(new Vector2(base.position.X + (float)(width / 2), base.position.Y), base.velocity, 138, scale);
				Gore.NewGore(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), base.velocity, 137, scale);
				if (!(Main.player[Main.myPlayer].position.Y / 16f > (float)(Main.maxTilesY - 250)))
				{
					return;
				}
				int num534 = (int)Main.screenPosition.Y;
				int num535 = num534 + Main.screenWidth;
				int num536 = (int)base.position.X;
				if (direction > 0)
				{
					num536 -= 80;
				}
				int num537 = num536 + 140;
				int num538 = num536;
				for (int num539 = num534; num539 < num535; num539 += 50)
				{
					for (; num538 < num537; num538 += 46)
					{
						for (int num540 = 0; num540 < 5; num540++)
						{
							Dust.NewDust(new Vector2(num538, num539), 32, 32, 5, (float)Main.rand.Next(-60, 61) * 0.1f, (float)Main.rand.Next(-60, 61) * 0.1f);
						}
						Gore.NewGore(Velocity: new Vector2((float)Main.rand.Next(-80, 81) * 0.1f, (float)Main.rand.Next(-60, 21) * 0.1f), Position: new Vector2(num538, num539), Type: Main.rand.Next(140, 143));
					}
					num538 = num536;
				}
			}
			else if (type == 115 || type == 116)
			{
				if (life > 0)
				{
					for (int num541 = 0; num541 < 5; num541++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				if (type == 115 && Main.netMode != 1)
				{
					NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), 116);
					for (int num542 = 0; num542 < 10; num542++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num543 = 0; num543 < 20; num543++)
				{
					Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
				}
				Gore.NewGore(base.position, base.velocity, 132, scale);
				Gore.NewGore(base.position, base.velocity, 133, scale);
			}
			else if (type >= 117 && type <= 119)
			{
				if (life > 0)
				{
					for (int num544 = 0; num544 < 5; num544++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num545 = 0; num545 < 10; num545++)
				{
					Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
				}
				Gore.NewGore(base.position, base.velocity, 134 + type - 117, scale);
			}
			else if (type == 217 || type == 218 || type == 219)
			{
				if (life > 0)
				{
					for (int num546 = 0; (double)num546 < dmg / (double)lifeMax * 100.0; num546++)
					{
						Dust.NewDust(base.position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num547 = 0; num547 < 50; num547++)
				{
					Dust.NewDust(base.position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				if (type == 217)
				{
					int num548 = Gore.NewGore(base.position, base.velocity, 292, scale);
					num548 = Gore.NewGore(base.position, base.velocity, 293, scale);
				}
				if (type == 218)
				{
					int num548 = Gore.NewGore(base.position, base.velocity, 295, scale);
					num548 = Gore.NewGore(base.position, base.velocity, 296, scale);
				}
				if (type == 219)
				{
					int num548 = Gore.NewGore(base.position, base.velocity, 294, scale);
				}
			}
			else if (type == 222)
			{
				if (life > 0)
				{
					for (int num549 = 0; (double)num549 < dmg / (double)lifeMax * 100.0; num549++)
					{
						Dust.NewDust(base.position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num550 = 0; num550 < 50; num550++)
				{
					Dust.NewDust(base.position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y - 35f), base.velocity, 303, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y - 45f), base.velocity, 304, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y), base.velocity, 305, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 306, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 10f), base.velocity, 307, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f), base.velocity, 308, scale);
			}
			else if (type == 6 || type == 94 || type == 166)
			{
				if (life > 0)
				{
					for (int num551 = 0; (double)num551 < dmg / (double)lifeMax * 100.0; num551++)
					{
						Dust.NewDust(base.position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num552 = 0; num552 < 50; num552++)
				{
					Dust.NewDust(base.position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				if (type == 94)
				{
					int num553 = Gore.NewGore(base.position, base.velocity, 108, scale);
					num553 = Gore.NewGore(base.position, base.velocity, 108, scale);
					num553 = Gore.NewGore(base.position, base.velocity, 109, scale);
					num553 = Gore.NewGore(base.position, base.velocity, 110, scale);
				}
				else if (type == 166)
				{
					int num553 = Gore.NewGore(base.position, base.velocity, 209, scale);
					num553 = Gore.NewGore(base.position, base.velocity, 210, scale);
					num553 = Gore.NewGore(base.position, base.velocity, 211, scale);
				}
				else
				{
					int num553 = Gore.NewGore(base.position, base.velocity, 14, scale);
					Main.gore[num553].alpha = alpha;
					num553 = Gore.NewGore(base.position, base.velocity, 15, scale);
					Main.gore[num553].alpha = alpha;
				}
			}
			else if (type == 101)
			{
				if (life > 0)
				{
					for (int num554 = 0; (double)num554 < dmg / (double)lifeMax * 100.0; num554++)
					{
						Dust.NewDust(base.position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num555 = 0; num555 < 50; num555++)
				{
					Dust.NewDust(base.position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				int num556 = Gore.NewGore(base.position, base.velocity, 110, scale);
				num556 = Gore.NewGore(base.position, base.velocity, 114, scale);
				num556 = Gore.NewGore(base.position, base.velocity, 114, scale);
				num556 = Gore.NewGore(base.position, base.velocity, 115, scale);
			}
			else if (type == 7 || type == 8 || type == 9)
			{
				if (life > 0)
				{
					for (int num557 = 0; (double)num557 < dmg / (double)lifeMax * 100.0; num557++)
					{
						Dust.NewDust(base.position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num558 = 0; num558 < 50; num558++)
				{
					Dust.NewDust(base.position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				int num559 = Gore.NewGore(base.position, base.velocity, type - 7 + 18);
				Main.gore[num559].alpha = alpha;
			}
			else if (type == 98 || type == 99 || type == 100)
			{
				if (life > 0)
				{
					for (int num560 = 0; (double)num560 < dmg / (double)lifeMax * 100.0; num560++)
					{
						Dust.NewDust(base.position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num561 = 0; num561 < 50; num561++)
				{
					Dust.NewDust(base.position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				int num562 = Gore.NewGore(base.position, base.velocity, 110);
				Main.gore[num562].alpha = alpha;
			}
			else if (type == 10 || type == 11 || type == 12)
			{
				if (life > 0)
				{
					for (int num563 = 0; (double)num563 < dmg / (double)lifeMax * 50.0; num563++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num564 = 0; num564 < 10; num564++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, type - 7 + 18);
			}
			else if (type == 95 || type == 96 || type == 97)
			{
				if (life > 0)
				{
					for (int num565 = 0; (double)num565 < dmg / (double)lifeMax * 50.0; num565++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num566 = 0; num566 < 10; num566++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, type - 95 + 111);
			}
			else if (type == 13 || type == 14 || type == 15)
			{
				if (life > 0)
				{
					for (int num567 = 0; (double)num567 < dmg / (double)lifeMax * 100.0; num567++)
					{
						Dust.NewDust(base.position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num568 = 0; num568 < 50; num568++)
				{
					Dust.NewDust(base.position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				if (type == 13)
				{
					Gore.NewGore(base.position, base.velocity, 24);
					Gore.NewGore(base.position, base.velocity, 25);
				}
				else if (type == 14)
				{
					Gore.NewGore(base.position, base.velocity, 26);
					Gore.NewGore(base.position, base.velocity, 27);
				}
				else
				{
					Gore.NewGore(base.position, base.velocity, 28);
					Gore.NewGore(base.position, base.velocity, 29);
				}
			}
			else if (type == 17)
			{
				if (life > 0)
				{
					for (int num569 = 0; (double)num569 < dmg / (double)lifeMax * 100.0; num569++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num570 = 0; num570 < 50; num570++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(base.position, base.velocity, 30);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 31);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 31);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 32);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 32);
			}
			else if (type == 441)
			{
				if (life > 0)
				{
					for (int num571 = 0; (double)num571 < dmg / (double)lifeMax * 100.0; num571++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num572 = 0; num572 < 50; num572++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 768);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 769);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 770);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 771);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 771);
			}
			else if (type == 86)
			{
				if (life > 0)
				{
					for (int num573 = 0; (double)num573 < dmg / (double)lifeMax * 100.0; num573++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num574 = 0; num574 < 50; num574++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 101);
				Gore.NewGore(base.position, base.velocity, 102);
				Gore.NewGore(base.position, base.velocity, 103);
				Gore.NewGore(base.position, base.velocity, 103);
				Gore.NewGore(base.position, base.velocity, 104);
				Gore.NewGore(base.position, base.velocity, 104);
				Gore.NewGore(base.position, base.velocity, 105);
			}
			else if (type == 155)
			{
				if (life > 0)
				{
					for (int num575 = 0; (double)num575 < dmg / (double)lifeMax * 100.0; num575++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num576 = 0; num576 < 50; num576++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 181);
				Gore.NewGore(base.position, base.velocity, 182);
				Gore.NewGore(base.position, base.velocity, 183);
			}
			else if (type == 329)
			{
				if (life > 0)
				{
					for (int num577 = 0; (double)num577 < dmg / (double)lifeMax * 100.0; num577++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num578 = 0; num578 < 50; num578++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 485);
				Gore.NewGore(base.position, base.velocity, 486);
				Gore.NewGore(base.position, base.velocity, 487);
			}
			else if (type == 163 || type == 238)
			{
				if (life > 0)
				{
					for (int num579 = 0; (double)num579 < dmg / (double)lifeMax * 100.0; num579++)
					{
						Dust.NewDust(base.position, width, height, 18, hitDirection, -1f);
					}
					return;
				}
				for (int num580 = 0; num580 < 50; num580++)
				{
					Dust.NewDust(base.position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 205);
				Gore.NewGore(base.position, base.velocity, 206);
				Gore.NewGore(base.position, base.velocity, 206);
				Gore.NewGore(base.position, base.velocity, 206);
				Gore.NewGore(base.position, base.velocity, 206);
			}
			else if (type == 164 || type == 165)
			{
				if (life > 0)
				{
					for (int num581 = 0; (double)num581 < dmg / (double)lifeMax * 100.0; num581++)
					{
						Dust.NewDust(base.position, width, height, 18, hitDirection, -1f);
					}
					return;
				}
				for (int num582 = 0; num582 < 50; num582++)
				{
					Dust.NewDust(base.position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 207);
				Gore.NewGore(base.position, base.velocity, 208);
				Gore.NewGore(base.position, base.velocity, 208);
				Gore.NewGore(base.position, base.velocity, 208);
				Gore.NewGore(base.position, base.velocity, 208);
			}
			else if (type == 239 || type == 240)
			{
				if (life > 0)
				{
					for (int num583 = 0; (double)num583 < dmg / (double)lifeMax * 100.0; num583++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num584 = 0; num584 < 50; num584++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 351);
				Gore.NewGore(base.position, base.velocity, 352);
				Gore.NewGore(base.position, base.velocity, 352);
				Gore.NewGore(base.position, base.velocity, 353);
				Gore.NewGore(base.position, base.velocity, 353);
			}
			else if (type == 236 || type == 237)
			{
				if (life > 0)
				{
					for (int num585 = 0; (double)num585 < dmg / (double)lifeMax * 100.0; num585++)
					{
						Dust.NewDust(base.position, width, height, 18, hitDirection, -1f);
					}
					return;
				}
				for (int num586 = 0; num586 < 50; num586++)
				{
					Dust.NewDust(base.position, width, height, 18, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 332);
				Gore.NewGore(base.position, base.velocity, 333);
				Gore.NewGore(base.position, base.velocity, 334);
				Gore.NewGore(base.position, base.velocity, 335);
				Gore.NewGore(base.position, base.velocity, 335);
			}
			else if (type == 241)
			{
				if (life > 0)
				{
					for (int num587 = 0; (double)num587 < dmg / (double)lifeMax * 100.0; num587++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num588 = 0; num588 < 50; num588++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 354);
				Gore.NewGore(base.position, base.velocity, 355);
			}
			else if (type == 242)
			{
				if (life > 0)
				{
					for (int num589 = 0; (double)num589 < dmg / (double)lifeMax * 100.0; num589++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num590 = 0; num590 < 50; num590++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 356);
				Gore.NewGore(base.position, base.velocity, 357);
				Gore.NewGore(base.position, base.velocity, 357);
				Gore.NewGore(base.position, base.velocity, 358);
				Gore.NewGore(base.position, base.velocity, 358);
			}
			else if (type >= 105 && type <= 108)
			{
				if (life > 0)
				{
					for (int num591 = 0; (double)num591 < dmg / (double)lifeMax * 100.0; num591++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num592 = 0; num592 < 50; num592++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 105 || type == 107)
				{
					Gore.NewGore(base.position, base.velocity, 124);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 125);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 125);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 126);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 126);
					return;
				}
				if (altTexture == 0 || type == 106)
				{
					Gore.NewGore(base.position, base.velocity, 127);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 128);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 128);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 129);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 129);
			}
			else if (type == 123 || type == 124)
			{
				if (life > 0)
				{
					for (int num593 = 0; (double)num593 < dmg / (double)lifeMax * 100.0; num593++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num594 = 0; num594 < 50; num594++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 151);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 152);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 152);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 153);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 153);
			}
			else if (type == 22)
			{
				if (life > 0)
				{
					for (int num595 = 0; (double)num595 < dmg / (double)lifeMax * 100.0; num595++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num596 = 0; num596 < 50; num596++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 73);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 74);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 74);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 75);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 75);
			}
			else if (type == 550)
			{
				if (life > 0)
				{
					for (int num597 = 0; (double)num597 < dmg / (double)lifeMax * 100.0; num597++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num598 = 0; num598 < 50; num598++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 0f), base.velocity, 967);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 968);
				Gore.NewGore(new Vector2(base.position.X + 8f, base.position.Y + 20f), base.velocity, 968);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 969);
				Gore.NewGore(new Vector2(base.position.X + 8f, base.position.Y + 34f), base.velocity, 969);
			}
			else if (type == 588 || type == 589)
			{
				if (life > 0)
				{
					for (int num599 = 0; (double)num599 < dmg / (double)lifeMax * 100.0; num599++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num600 = 0; num600 < 50; num600++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 0f), base.velocity, 1109);
				}
				else
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 0f), base.velocity, 1112);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 1110);
				Gore.NewGore(new Vector2(base.position.X + 8f, base.position.Y + 20f), base.velocity, 1110);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 1111);
				Gore.NewGore(new Vector2(base.position.X + 8f, base.position.Y + 34f), base.velocity, 1111);
			}
			else if (type == 633)
			{
				if (life > 0)
				{
					for (int num601 = 0; (double)num601 < dmg / (double)lifeMax * 100.0; num601++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num602 = 0; num602 < 50; num602++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				int num603 = 1219;
				int num604 = 1220;
				if (altTexture == 2)
				{
					num603 = 1223;
					num604 = 1224;
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 0f), base.velocity, num603);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num604);
				Gore.NewGore(new Vector2(base.position.X + 8f, base.position.Y + 20f), base.velocity, num604);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 1221);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 1222);
				Gore.NewGore(new Vector2(base.position.X + 8f, base.position.Y + 34f), base.velocity, 1222);
			}
			else if (type == 368)
			{
				if (life > 0)
				{
					for (int num605 = 0; (double)num605 < dmg / (double)lifeMax * 100.0; num605++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num606 = 0; num606 < 50; num606++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(base.position, base.velocity, 567);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 568);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 568);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 569);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 569);
			}
			else if (type == 369 || type == 376 || NPCID.Sets.IsTownPet[type])
			{
				if (life <= 0)
				{
					for (int num607 = 0; num607 < 25; num607++)
					{
						int num608 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
						Dust dust = Main.dust[num608];
						dust.velocity *= 1.4f;
						Main.dust[num608].noLight = true;
						Main.dust[num608].noGravity = true;
					}
					int num609 = 0;
					num609 = Gore.NewGore(new Vector2(base.position.X + (float)(width / 2) - 24f, base.position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num609].scale = 1f;
					Main.gore[num609].velocity.X += 1f;
					Main.gore[num609].velocity.Y += 1f;
					num609 = Gore.NewGore(new Vector2(base.position.X + (float)(width / 2) - 24f, base.position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num609].scale = 1f;
					Main.gore[num609].velocity.X -= 1f;
					Main.gore[num609].velocity.Y += 1f;
					num609 = Gore.NewGore(new Vector2(base.position.X + (float)(width / 2) - 24f, base.position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num609].scale = 1f;
					Main.gore[num609].velocity.X += 1f;
					Main.gore[num609].velocity.Y -= 1f;
					num609 = Gore.NewGore(new Vector2(base.position.X + (float)(width / 2) - 24f, base.position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num609].scale = 1f;
					Main.gore[num609].velocity.X -= 1f;
					Main.gore[num609].velocity.Y -= 1f;
				}
			}
			else if (type == 227)
			{
				if (life > 0)
				{
					for (int num610 = 0; (double)num610 < dmg / (double)lifeMax * 100.0; num610++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num611 = 0; num611 < 50; num611++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(base.position, base.velocity, 320);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 321);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 322);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 323);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 323);
			}
			else if (type == 228)
			{
				if (life > 0)
				{
					for (int num612 = 0; (double)num612 < dmg / (double)lifeMax * 100.0; num612++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num613 = 0; num613 < 50; num613++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 324);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 325);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 326);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 327);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 327);
			}
			else if (type == 229)
			{
				if (life > 0)
				{
					for (int num614 = 0; (double)num614 < dmg / (double)lifeMax * 100.0; num614++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num615 = 0; num615 < 50; num615++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(base.position, base.velocity, 328);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 329);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 329);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 330);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 330);
			}
			else if (type == 142)
			{
				if (life > 0)
				{
					for (int num616 = 0; (double)num616 < dmg / (double)lifeMax * 100.0; num616++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num617 = 0; num617 < 50; num617++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(base.position, base.velocity, 157);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 158);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 158);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 159);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 159);
			}
			else if (type == 178)
			{
				if (life > 0)
				{
					for (int num618 = 0; (double)num618 < dmg / (double)lifeMax * 100.0; num618++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num619 = 0; num619 < 50; num619++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(base.position, base.velocity, 231);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 232);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 232);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 233);
			}
			else if (type == 353 || type == 354)
			{
				if (life > 0)
				{
					for (int num620 = 0; (double)num620 < dmg / (double)lifeMax * 100.0; num620++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num621 = 0; num621 < 50; num621++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(base.position, base.velocity, 544);
				}
				Gore.NewGore(base.position, base.velocity, 543);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 546);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 546);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 545);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 545);
			}
			else if (type == 37 || type == 54)
			{
				if (life > 0)
				{
					for (int num622 = 0; (double)num622 < dmg / (double)lifeMax * 100.0; num622++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num623 = 0; num623 < 50; num623++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 58);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 59);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 59);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 60);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 60);
			}
			else if (type == 441)
			{
				if (life > 0)
				{
					for (int num624 = 0; (double)num624 < dmg / (double)lifeMax * 100.0; num624++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num625 = 0; num625 < 50; num625++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 768);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 769);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 770);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 771);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 771);
			}
			else if (type == 160)
			{
				if (life > 0)
				{
					for (int num626 = 0; (double)num626 < dmg / (double)lifeMax * 100.0; num626++)
					{
						Dust.NewDust(base.position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num627 = 0; num627 < 50; num627++)
				{
					Dust.NewDust(base.position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 188);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 189);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 189);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 190);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 190);
			}
			else if (type == 18)
			{
				if (life > 0)
				{
					for (int num628 = 0; (double)num628 < dmg / (double)lifeMax * 100.0; num628++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num629 = 0; num629 < 50; num629++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(base.position, base.velocity, 33);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 34);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 34);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 35);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 35);
			}
			else if (type == 19)
			{
				if (life > 0)
				{
					for (int num630 = 0; (double)num630 < dmg / (double)lifeMax * 100.0; num630++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num631 = 0; num631 < 50; num631++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 36);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 37);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 37);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 38);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 38);
			}
			else if (type == 38)
			{
				if (life > 0)
				{
					for (int num632 = 0; (double)num632 < dmg / (double)lifeMax * 100.0; num632++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num633 = 0; num633 < 50; num633++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(base.position, base.velocity, 64);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 65);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 65);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 66);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 66);
			}
			else if (type == 20)
			{
				if (life > 0)
				{
					for (int num634 = 0; (double)num634 < dmg / (double)lifeMax * 100.0; num634++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num635 = 0; num635 < 50; num635++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 39);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 40);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 40);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 41);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 41);
			}
			else if (type == 207)
			{
				if (life > 0)
				{
					for (int num636 = 0; (double)num636 < dmg / (double)lifeMax * 100.0; num636++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num637 = 0; num637 < 50; num637++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(base.position, base.velocity, 283);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 284);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 284);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 285);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 285);
			}
			else if (type == 208)
			{
				if (life > 0)
				{
					for (int num638 = 0; (double)num638 < dmg / (double)lifeMax * 100.0; num638++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num639 = 0; num639 < 50; num639++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 286);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 287);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 287);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 288);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 288);
			}
			else if (type == 209)
			{
				if (life > 0)
				{
					for (int num640 = 0; (double)num640 < dmg / (double)lifeMax * 100.0; num640++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num641 = 0; num641 < 50; num641++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 289);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 290);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 290);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 291);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 291);
			}
			else if (type >= 212 && type <= 216)
			{
				if (life > 0)
				{
					for (int num642 = 0; (double)num642 < dmg / (double)lifeMax * 100.0; num642++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num643 = 0; num643 < 50; num643++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 212)
				{
					Gore.NewGore(base.position, base.velocity, 336);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 337);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 337);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 338);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 338);
				}
				else if (type == 213)
				{
					Gore.NewGore(base.position, base.velocity, 339);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 340);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 340);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 341);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 341);
				}
				else if (type == 214)
				{
					Gore.NewGore(base.position, base.velocity, 342);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 343);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 343);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 344);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 344);
				}
				else if (type == 215)
				{
					Gore.NewGore(base.position, base.velocity, 345);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 346);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 346);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 347);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 347);
				}
				else if (type == 216)
				{
					Gore.NewGore(base.position, base.velocity, 348);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 349);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 349);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 350);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 350);
				}
			}
			else if (type == 220 || type == 221)
			{
				if (life > 0)
				{
					for (int num644 = 0; (double)num644 < dmg / (double)lifeMax * 50.0; num644++)
					{
						Dust.NewDust(base.position, width, height, 151, hitDirection, -1f, 0, default(Color), 0.7f);
					}
					return;
				}
				for (int num645 = 0; num645 < 20; num645++)
				{
					Dust.NewDust(base.position, width, height, 151, 2.5f * (float)hitDirection, -2.5f, 0, default(Color), 0.7f);
				}
				if (type == 221)
				{
					Gore.NewGore(base.position, base.velocity, 298, scale);
					Gore.NewGore(base.position, base.velocity, 299, scale);
				}
				else
				{
					Gore.NewGore(base.position, base.velocity, 297, scale);
				}
			}
			else if (type == 21 || type == 31 || type == 294 || type == 295 || type == 296 || type == 32 || type == 44 || type == 45 || type == 77 || type == 110 || type == 167 || type == 197 || type == 201 || type == 202 || type == 203 || type == 287 || type == 291 || type == 292 || type == 293 || (type >= 322 && type <= 324) || type == 481 || (type >= 449 && type <= 452))
			{
				if (life > 0)
				{
					for (int num646 = 0; (double)num646 < dmg / (double)lifeMax * 50.0; num646++)
					{
						Dust.NewDust(base.position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num647 = 0; num647 < 20; num647++)
				{
					Dust.NewDust(base.position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 167)
				{
					Gore.NewGore(base.position, base.velocity, 213, scale);
					Gore.NewGore(base.position, base.velocity, 214, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 212, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 212, scale);
					return;
				}
				if (type == 197)
				{
					Gore.NewGore(base.position, base.velocity, 257, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 212, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 212, scale);
					return;
				}
				if (type == 481)
				{
					Gore.NewGore(base.position, base.velocity, 695, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 696, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 696, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 697, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 697, scale);
					return;
				}
				if (type == 201 || type == 450)
				{
					Gore.NewGore(base.position, base.velocity, 265, scale);
					Gore.NewGore(base.position, base.velocity, 267, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
					return;
				}
				if (type == 202 || type == 451)
				{
					Gore.NewGore(base.position, base.velocity, 268, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
					return;
				}
				if (type == 203 || type == 452)
				{
					Gore.NewGore(base.position, base.velocity, 269, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 266, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 266, scale);
					return;
				}
				if (type == 322)
				{
					Gore.NewGore(base.position, base.velocity, 460, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 461, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 462, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 461, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 462, scale);
					return;
				}
				if (type == 323)
				{
					Gore.NewGore(base.position, base.velocity, 463, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 465, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 464, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 464, scale);
					return;
				}
				if (type == 324)
				{
					Gore.NewGore(base.position, base.velocity, 466, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 467, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 467, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 468, scale);
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 468, scale);
					return;
				}
				Gore.NewGore(base.position, base.velocity, 42, scale);
				if (type == 77)
				{
					Gore.NewGore(base.position, base.velocity, 106, scale);
				}
				if (type == 110)
				{
					Gore.NewGore(base.position, base.velocity, 130, scale);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
				if (type == 110)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 131, scale);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
			}
			else if (type == 453)
			{
				if (life > 0)
				{
					for (int num648 = 0; (double)num648 < dmg / (double)lifeMax * 50.0; num648++)
					{
						Dust.NewDust(base.position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num649 = 0; num649 < 20; num649++)
				{
					Dust.NewDust(base.position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				if (altTexture == 0)
				{
					Gore.NewGore(base.position, base.velocity, 638, scale);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 639, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 640, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 641, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 642, scale);
			}
			else if ((type >= 269 && type <= 276) || (type >= 281 && type <= 286))
			{
				if (life > 0)
				{
					for (int num650 = 0; (double)num650 < dmg / (double)lifeMax * 50.0; num650++)
					{
						Dust.NewDust(base.position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num651 = 0; num651 < 20; num651++)
				{
					Dust.NewDust(base.position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 42, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 43, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 44, scale);
				if (type == 269)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 406, scale);
				}
				if (type == 270)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 407, scale);
				}
				if (type == 271 || type == 272)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 408, scale);
				}
				if (type == 274)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 409, scale);
				}
				if (type == 276)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 410, scale);
				}
			}
			else if (type >= 277 && type <= 280)
			{
				if (life > 0)
				{
					for (int num652 = 0; (double)num652 < dmg / (double)lifeMax * 100.0; num652++)
					{
						int num653 = Dust.NewDust(base.position, width, height, 174, hitDirection, -1f);
						Main.dust[num653].scale = 1.1f;
						Main.dust[num653].noGravity = true;
					}
					return;
				}
				for (int num654 = 0; num654 < 75; num654++)
				{
					int num655 = Dust.NewDust(base.position, width, height, 174, 1.5f * (float)hitDirection, -0.5f);
					Dust dust = Main.dust[num655];
					dust.velocity *= 2f;
					Main.dust[num655].scale = 1.4f;
					Main.dust[num655].noGravity = true;
				}
			}
			else if (type == 341)
			{
				int num656 = 196;
				if (life > 0)
				{
					for (int num657 = 0; (double)num657 < dmg / (double)lifeMax * 50.0; num657++)
					{
						Dust.NewDust(base.position, width, height, num656);
					}
					return;
				}
				for (int num658 = 0; num658 < 20; num658++)
				{
					Dust.NewDust(base.position, width, height, num656);
				}
				int num659 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f), new Vector2(hitDirection, 0f), 61, scale);
				Gore gore2 = Main.gore[num659];
				gore2.velocity *= 0.3f;
				num659 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 62, scale);
				gore2 = Main.gore[num659];
				gore2.velocity *= 0.3f;
				num659 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)height - 10f), new Vector2(hitDirection, 0f), 63, scale);
				gore2 = Main.gore[num659];
				gore2.velocity *= 0.3f;
			}
			else if (type == 85 || type == 629)
			{
				int num660 = 7;
				if (ai[3] == 2f)
				{
					num660 = 10;
				}
				if (ai[3] == 3f)
				{
					num660 = 37;
				}
				if (life > 0)
				{
					for (int num661 = 0; (double)num661 < dmg / (double)lifeMax * 50.0; num661++)
					{
						Dust.NewDust(base.position, width, height, num660);
					}
					return;
				}
				for (int num662 = 0; num662 < 20; num662++)
				{
					Dust.NewDust(base.position, width, height, num660);
				}
				int num663 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f), new Vector2(hitDirection, 0f), 61, scale);
				Gore gore2 = Main.gore[num663];
				gore2.velocity *= 0.3f;
				num663 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 62, scale);
				gore2 = Main.gore[num663];
				gore2.velocity *= 0.3f;
				num663 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)height - 10f), new Vector2(hitDirection, 0f), 63, scale);
				gore2 = Main.gore[num663];
				gore2.velocity *= 0.3f;
			}
			else if (type == 473 || type == 474 || type == 475 || type == 476)
			{
				int num664 = 31;
				if (life > 0)
				{
					for (int num665 = 0; (double)num665 < dmg / (double)lifeMax * 50.0; num665++)
					{
						Dust.NewDust(base.position, width, height, num664);
					}
					return;
				}
				for (int num666 = 0; num666 < 20; num666++)
				{
					Dust.NewDust(base.position, width, height, num664);
				}
				int num667 = Gore.NewGore(base.Center, new Vector2(hitDirection, 0f), 61, scale);
				Gore gore2 = Main.gore[num667];
				gore2.velocity *= 0.3f;
				num667 = Gore.NewGore(base.Center, new Vector2(hitDirection, 0f), 62, scale);
				gore2 = Main.gore[num667];
				gore2.velocity *= 0.3f;
				num667 = Gore.NewGore(base.Center, new Vector2(hitDirection, 0f), 63, scale);
				gore2 = Main.gore[num667];
				gore2.velocity *= 0.3f;
			}
			else if (type == 169)
			{
				if (life > 0)
				{
					for (int num668 = 0; (double)num668 < dmg / (double)lifeMax * 50.0; num668++)
					{
						int num669 = Dust.NewDust(base.position, width, height, 92, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num669];
						dust.velocity *= 1.5f;
						Main.dust[num669].noGravity = true;
					}
					return;
				}
				for (int num670 = 0; num670 < 100; num670++)
				{
					int num671 = Dust.NewDust(base.position, width, height, 92, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num671].scale = 1.5f;
					Dust dust = Main.dust[num671];
					dust.velocity *= 2f;
					Main.dust[num671].noGravity = true;
				}
			}
			else if (type == 170 || type == 180)
			{
				if (life > 0)
				{
					for (int num672 = 0; (double)num672 < dmg / (double)lifeMax * 50.0; num672++)
					{
						int num673 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num673];
						dust.velocity *= 1.5f;
						Main.dust[num673].noGravity = true;
					}
					return;
				}
				for (int num674 = 0; num674 < 10; num674++)
				{
					int num675 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust = Main.dust[num675];
					dust.velocity *= 2f;
					Main.dust[num675].noGravity = true;
				}
				for (int num676 = 0; num676 < 4; num676++)
				{
					int num677 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 99, scale);
					Gore gore2 = Main.gore[num677];
					gore2.velocity *= 0.3f;
				}
			}
			else if (type == 171)
			{
				if (life > 0)
				{
					for (int num678 = 0; (double)num678 < dmg / (double)lifeMax * 50.0; num678++)
					{
						int num679 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num679];
						dust.velocity *= 1.5f;
						Main.dust[num679].noGravity = true;
					}
					return;
				}
				for (int num680 = 0; num680 < 10; num680++)
				{
					int num681 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust = Main.dust[num681];
					dust.velocity *= 2f;
					Main.dust[num681].noGravity = true;
				}
				for (int num682 = 0; num682 < 4; num682++)
				{
					int num683 = 11 + num682;
					if (num683 > 13)
					{
						num683 = Main.rand.Next(11, 14);
					}
					int num684 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), num683, scale);
					Gore gore2 = Main.gore[num684];
					gore2.velocity *= 0.3f;
				}
			}
			else if (type == 290)
			{
				if (life <= 0)
				{
					for (int num685 = 0; num685 < 10; num685++)
					{
						int num686 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num686];
						dust.velocity *= 2f;
						Main.dust[num686].noGravity = true;
					}
					int num687 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(11, 14), scale);
					Gore gore2 = Main.gore[num687];
					gore2.velocity *= 0.5f;
					num687 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), default(Vector2), Main.rand.Next(11, 14), scale);
					gore2 = Main.gore[num687];
					gore2.velocity *= 0.5f;
					num687 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + 40f), default(Vector2), Main.rand.Next(11, 14), scale);
					gore2 = Main.gore[num687];
					gore2.velocity *= 0.5f;
				}
			}
			else if (type >= 87 && type <= 92)
			{
				if (life > 0)
				{
					for (int num688 = 0; (double)num688 < dmg / (double)lifeMax * 50.0; num688++)
					{
						int num689 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num689];
						dust.velocity *= 1.5f;
						Main.dust[num689].noGravity = true;
					}
					return;
				}
				for (int num690 = 0; num690 < 10; num690++)
				{
					int num691 = Dust.NewDust(base.position, width, height, 16, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust = Main.dust[num691];
					dust.velocity *= 2f;
					Main.dust[num691].noGravity = true;
				}
				int num692 = Main.rand.Next(1, 4);
				for (int num693 = 0; num693 < num692; num693++)
				{
					int num694 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), Main.rand.Next(11, 14), scale);
					Gore gore2 = Main.gore[num694];
					gore2.velocity *= 0.8f;
				}
			}
			else if (type == 78 || type == 79 || type == 80 || type == 630)
			{
				if (life > 0)
				{
					for (int num695 = 0; (double)num695 < dmg / (double)lifeMax * 50.0; num695++)
					{
						int num696 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Dust dust = Main.dust[num696];
						dust.velocity *= 2f;
						Main.dust[num696].noGravity = true;
					}
					return;
				}
				for (int num697 = 0; num697 < 20; num697++)
				{
					int num698 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Dust dust = Main.dust[num698];
					dust.velocity *= 2f;
					Main.dust[num698].noGravity = true;
				}
				int num699 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f), new Vector2(hitDirection, 0f), 61, scale);
				Gore gore2 = Main.gore[num699];
				gore2.velocity *= 0.3f;
				num699 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 10f), new Vector2(hitDirection, 0f), 62, scale);
				gore2 = Main.gore[num699];
				gore2.velocity *= 0.3f;
				num699 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)height - 10f), new Vector2(hitDirection, 0f), 63, scale);
				gore2 = Main.gore[num699];
				gore2.velocity *= 0.3f;
			}
			else if (type == 82 || type == 158 || type == 159 || type == 250 || type == 253)
			{
				if (life > 0)
				{
					for (int num700 = 0; (double)num700 < dmg / (double)lifeMax * 50.0; num700++)
					{
						int num701 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num701];
						dust.velocity *= 2f;
						Main.dust[num701].noGravity = true;
					}
					return;
				}
				for (int num702 = 0; num702 < 20; num702++)
				{
					int num703 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust = Main.dust[num703];
					dust.velocity *= 2f;
					Main.dust[num703].noGravity = true;
				}
				int num704 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f), new Vector2(hitDirection, 0f), 99, scale);
				Gore gore2 = Main.gore[num704];
				gore2.velocity *= 0.3f;
				num704 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 99, scale);
				gore2 = Main.gore[num704];
				gore2.velocity *= 0.3f;
				num704 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 99, scale);
				gore2 = Main.gore[num704];
				gore2.velocity *= 0.3f;
			}
			else if (type == 316 || type == 330)
			{
				if (life > 0)
				{
					for (int num705 = 0; (double)num705 < dmg / (double)lifeMax * 100.0; num705++)
					{
						int num706 = Dust.NewDust(base.position, width, height, 192, hitDirection, -1f, 100, new Color(100, 100, 100, 100));
						Main.dust[num706].noGravity = true;
					}
				}
				else
				{
					for (int num707 = 0; num707 < 50; num707++)
					{
						int num708 = Dust.NewDust(base.position, width, height, 192, 2 * hitDirection, -2f, 100, new Color(100, 100, 100, 100));
						Main.dust[num708].noGravity = true;
					}
				}
			}
			else if (type == 662)
			{
				if (life > 0)
				{
					for (int num709 = 0; (double)num709 < dmg / (double)lifeMax * 100.0; num709++)
					{
						int num710 = Dust.NewDust(base.position, width, height, 180, base.velocity.X, base.velocity.Y);
						Dust dust = Main.dust[num710];
						dust.velocity *= 2f;
						Main.dust[num710].noGravity = true;
						Main.dust[num710].scale = 1.4f;
					}
				}
				else
				{
					for (int num711 = 0; num711 < 50; num711++)
					{
						int num712 = Dust.NewDust(base.position, width, height, 180, base.velocity.X, base.velocity.Y);
						Dust dust = Main.dust[num712];
						dust.velocity *= 2f;
						Main.dust[num712].noGravity = true;
						Main.dust[num712].scale = 1.4f;
					}
				}
			}
			else if (type == 315)
			{
				if (life > 0)
				{
					for (int num713 = 0; (double)num713 < dmg / (double)lifeMax * 50.0; num713++)
					{
						int num714 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num714];
						dust.velocity *= 2f;
						Main.dust[num714].noGravity = true;
					}
					return;
				}
				for (int num715 = 0; num715 < 20; num715++)
				{
					int num716 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust = Main.dust[num716];
					dust.velocity *= 2f;
					Main.dust[num716].noGravity = true;
				}
				int num717 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f), new Vector2(hitDirection, 0f), 99, scale);
				Gore gore2 = Main.gore[num717];
				gore2.velocity *= 0.3f;
				num717 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 99, scale);
				gore2 = Main.gore[num717];
				gore2.velocity *= 0.3f;
				num717 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 99, scale);
				gore2 = Main.gore[num717];
				gore2.velocity *= 0.3f;
				num717 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), new Vector2(hitDirection, 0f), 446, scale);
				gore2 = Main.gore[num717];
				gore2.velocity *= 0.1f;
			}
			else if (type == 254 || type == 255 || type == 256 || type == 257 || type == 258 || type == 259 || type == 260 || type == 261 || type == 634 || type == 635)
			{
				if (life > 0)
				{
					for (int num718 = 0; (double)num718 < dmg / (double)lifeMax * 50.0; num718++)
					{
						int num719 = Dust.NewDust(base.position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num719];
						dust.velocity *= 2f;
						Main.dust[num719].noGravity = true;
					}
					return;
				}
				for (int num720 = 0; num720 < 20; num720++)
				{
					int num721 = Dust.NewDust(base.position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust = Main.dust[num721];
					dust.velocity *= 2f;
					Main.dust[num721].noGravity = true;
				}
				if (type != 261)
				{
					int num722 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f), new Vector2(hitDirection, 0f), 375, scale);
					Gore gore2 = Main.gore[num722];
					gore2.velocity *= 0.3f;
					num722 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 376, scale);
					gore2 = Main.gore[num722];
					gore2.velocity *= 0.3f;
					num722 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 377, scale);
					gore2 = Main.gore[num722];
					gore2.velocity *= 0.3f;
				}
			}
			else if (type == 140)
			{
				if (life <= 0)
				{
					for (int num723 = 0; num723 < 20; num723++)
					{
						int num724 = Dust.NewDust(base.position, width, height, 54, 0f, 0f, 50, default(Color), 1.5f);
						Dust dust = Main.dust[num724];
						dust.velocity *= 2f;
						Main.dust[num724].noGravity = true;
					}
					int num725 = Gore.NewGore(new Vector2(base.position.X, base.position.Y - 10f), new Vector2(hitDirection, 0f), 99, scale);
					Gore gore2 = Main.gore[num725];
					gore2.velocity *= 0.3f;
					num725 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)(height / 2) - 15f), new Vector2(hitDirection, 0f), 99, scale);
					gore2 = Main.gore[num725];
					gore2.velocity *= 0.3f;
					num725 = Gore.NewGore(new Vector2(base.position.X, base.position.Y + (float)height - 20f), new Vector2(hitDirection, 0f), 99, scale);
					gore2 = Main.gore[num725];
					gore2.velocity *= 0.3f;
				}
			}
			else if (type == 39 || type == 40 || type == 41)
			{
				if (life > 0)
				{
					for (int num726 = 0; (double)num726 < dmg / (double)lifeMax * 50.0; num726++)
					{
						Dust.NewDust(base.position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num727 = 0; num727 < 20; num727++)
				{
					Dust.NewDust(base.position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, type - 39 + 67);
			}
			else if (type == 34)
			{
				if (life > 0)
				{
					for (int num728 = 0; (double)num728 < dmg / (double)lifeMax * 30.0; num728++)
					{
						int num729 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 15, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num729].noLight = true;
						Main.dust[num729].noGravity = true;
						Dust dust = Main.dust[num729];
						dust.velocity *= 1.3f;
						num729 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 26, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 0, default(Color), 0.9f);
						Main.dust[num729].noLight = true;
						dust = Main.dust[num729];
						dust.velocity *= 1.3f;
					}
				}
				else
				{
					for (int num730 = 0; num730 < 15; num730++)
					{
						int num731 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 15, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num731].noLight = true;
						Main.dust[num731].noGravity = true;
						Dust dust = Main.dust[num731];
						dust.velocity *= 1.3f;
						num731 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 26, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 0, default(Color), 0.9f);
						Main.dust[num731].noLight = true;
						dust = Main.dust[num731];
						dust.velocity *= 1.3f;
					}
				}
			}
			else if (type == 289)
			{
				if (life > 0)
				{
					for (int num732 = 0; (double)num732 < dmg / (double)lifeMax * 30.0; num732++)
					{
						int num733 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 181, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num733].noLight = true;
						Main.dust[num733].noGravity = true;
						Dust dust = Main.dust[num733];
						dust.velocity *= 1.3f;
					}
				}
				else
				{
					for (int num734 = 0; num734 < 50; num734++)
					{
						int num735 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 181, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1.8f);
						Main.dust[num735].noLight = true;
						Main.dust[num735].noGravity = true;
						Dust dust = Main.dust[num735];
						dust.velocity *= 1.3f;
					}
				}
			}
			else if (type == 35 || type == 36)
			{
				if (life > 0)
				{
					for (int num736 = 0; (double)num736 < dmg / (double)lifeMax * 100.0; num736++)
					{
						Dust.NewDust(base.position, width, height, 26, hitDirection, -1f);
					}
					return;
				}
				for (int num737 = 0; num737 < 150; num737++)
				{
					Dust.NewDust(base.position, width, height, 26, 2.5f * (float)hitDirection, -2.5f);
				}
				if (type == 35)
				{
					Gore.NewGore(base.position, base.velocity, 54);
					Gore.NewGore(base.position, base.velocity, 55);
					return;
				}
				Gore.NewGore(base.position, base.velocity, 56);
				Gore.NewGore(base.position, base.velocity, 57);
				Gore.NewGore(base.position, base.velocity, 57);
				Gore.NewGore(base.position, base.velocity, 57);
			}
			else if (type == 139)
			{
				if (life <= 0)
				{
					for (int num738 = 0; num738 < 10; num738++)
					{
						int num739 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num739];
						dust.velocity *= 1.4f;
					}
					for (int num740 = 0; num740 < 5; num740++)
					{
						int num741 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num741].noGravity = true;
						Dust dust = Main.dust[num741];
						dust.velocity *= 5f;
						num741 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num741];
						dust.velocity *= 3f;
					}
					int num742 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore2 = Main.gore[num742];
					gore2.velocity *= 0.4f;
					Main.gore[num742].velocity.X += 1f;
					Main.gore[num742].velocity.Y += 1f;
					num742 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num742];
					gore2.velocity *= 0.4f;
					Main.gore[num742].velocity.X -= 1f;
					Main.gore[num742].velocity.Y += 1f;
					num742 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num742];
					gore2.velocity *= 0.4f;
					Main.gore[num742].velocity.X += 1f;
					Main.gore[num742].velocity.Y -= 1f;
					num742 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num742];
					gore2.velocity *= 0.4f;
					Main.gore[num742].velocity.X -= 1f;
					Main.gore[num742].velocity.Y -= 1f;
				}
			}
			else if (type == 467)
			{
				if (life <= 0)
				{
					for (int num743 = 0; num743 < 7; num743++)
					{
						int num744 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num744];
						dust.velocity *= 1.4f;
					}
					for (int num745 = 0; num745 < 3; num745++)
					{
						int num746 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num746].noGravity = true;
						Dust dust = Main.dust[num746];
						dust.velocity *= 5f;
						num746 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num746];
						dust.velocity *= 3f;
					}
					Gore.NewGore(base.position, base.velocity, 660);
					Gore.NewGore(base.position, base.velocity, 660);
				}
			}
			else if (type >= 134 && type <= 136)
			{
				if (type == 135 && life > 0 && Main.netMode != 1 && ai[2] == 0f && Main.rand.Next(25) == 0)
				{
					ai[2] = 1f;
					int num747 = NewNPC((int)(base.position.X + (float)(width / 2)), (int)(base.position.Y + (float)height), 139);
					if (Main.netMode == 2 && num747 < 200)
					{
						NetMessage.SendData(23, -1, -1, null, num747);
					}
					netUpdate = true;
				}
				if (life > 0)
				{
					return;
				}
				Gore.NewGore(base.position, base.velocity, 156);
				if (Main.rand.Next(2) == 0)
				{
					for (int num748 = 0; num748 < 10; num748++)
					{
						int num749 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num749];
						dust.velocity *= 1.4f;
					}
					for (int num750 = 0; num750 < 5; num750++)
					{
						int num751 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num751].noGravity = true;
						Dust dust = Main.dust[num751];
						dust.velocity *= 5f;
						num751 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num751];
						dust.velocity *= 3f;
					}
					int num752 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore2 = Main.gore[num752];
					gore2.velocity *= 0.4f;
					Main.gore[num752].velocity.X += 1f;
					Main.gore[num752].velocity.Y += 1f;
					num752 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num752];
					gore2.velocity *= 0.4f;
					Main.gore[num752].velocity.X -= 1f;
					Main.gore[num752].velocity.Y += 1f;
					num752 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num752];
					gore2.velocity *= 0.4f;
					Main.gore[num752].velocity.X += 1f;
					Main.gore[num752].velocity.Y -= 1f;
					num752 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num752];
					gore2.velocity *= 0.4f;
					Main.gore[num752].velocity.X -= 1f;
					Main.gore[num752].velocity.Y -= 1f;
				}
			}
			else if (type == 347)
			{
				if (life <= 0)
				{
					Gore.NewGore(base.position, base.velocity, 524);
					Gore.NewGore(base.position, base.velocity, 525);
					Gore.NewGore(base.position, base.velocity, 526);
					Gore.NewGore(base.position, base.velocity, 527);
					for (int num753 = 0; num753 < 7; num753++)
					{
						int num754 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num754];
						dust.velocity *= 1.4f;
					}
					for (int num755 = 0; num755 < 4; num755++)
					{
						int num756 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num756].noGravity = true;
						Dust dust = Main.dust[num756];
						dust.velocity *= 5f;
						num756 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num756];
						dust.velocity *= 3f;
					}
					int num757 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore2 = Main.gore[num757];
					gore2.velocity *= 0.4f;
					Main.gore[num757].velocity.X += 1f;
					Main.gore[num757].velocity.Y += 1f;
					num757 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num757];
					gore2.velocity *= 0.4f;
					Main.gore[num757].velocity.X -= 1f;
					Main.gore[num757].velocity.Y -= 1f;
				}
			}
			else if (type == 346)
			{
				if (life <= 0)
				{
					Gore.NewGore(base.position, base.velocity, 518);
					Gore.NewGore(base.position, base.velocity, 519);
					Gore.NewGore(base.position, base.velocity, 520);
					Gore.NewGore(base.position, base.velocity, 521);
					Gore.NewGore(base.position, base.velocity, 522);
					Gore.NewGore(base.position, base.velocity, 523);
					for (int num758 = 0; num758 < 10; num758++)
					{
						int num759 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num759];
						dust.velocity *= 1.4f;
					}
					for (int num760 = 0; num760 < 5; num760++)
					{
						int num761 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num761].noGravity = true;
						Dust dust = Main.dust[num761];
						dust.velocity *= 5f;
						num761 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num761];
						dust.velocity *= 3f;
					}
					int num762 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore2 = Main.gore[num762];
					gore2.velocity *= 0.4f;
					Main.gore[num762].velocity.X += 1f;
					Main.gore[num762].velocity.Y += 1f;
					num762 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num762];
					gore2.velocity *= 0.4f;
					Main.gore[num762].velocity.X -= 1f;
					Main.gore[num762].velocity.Y += 1f;
					num762 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num762];
					gore2.velocity *= 0.4f;
					Main.gore[num762].velocity.X += 1f;
					Main.gore[num762].velocity.Y -= 1f;
					num762 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num762];
					gore2.velocity *= 0.4f;
					Main.gore[num762].velocity.X -= 1f;
					Main.gore[num762].velocity.Y -= 1f;
				}
			}
			else if (type == 127)
			{
				if (life <= 0)
				{
					Gore.NewGore(base.position, base.velocity, 149);
					Gore.NewGore(base.position, base.velocity, 150);
					for (int num763 = 0; num763 < 10; num763++)
					{
						int num764 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num764];
						dust.velocity *= 1.4f;
					}
					for (int num765 = 0; num765 < 5; num765++)
					{
						int num766 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num766].noGravity = true;
						Dust dust = Main.dust[num766];
						dust.velocity *= 5f;
						num766 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num766];
						dust.velocity *= 3f;
					}
					int num767 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore2 = Main.gore[num767];
					gore2.velocity *= 0.4f;
					Main.gore[num767].velocity.X += 1f;
					Main.gore[num767].velocity.Y += 1f;
					num767 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num767];
					gore2.velocity *= 0.4f;
					Main.gore[num767].velocity.X -= 1f;
					Main.gore[num767].velocity.Y += 1f;
					num767 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num767];
					gore2.velocity *= 0.4f;
					Main.gore[num767].velocity.X += 1f;
					Main.gore[num767].velocity.Y -= 1f;
					num767 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num767];
					gore2.velocity *= 0.4f;
					Main.gore[num767].velocity.X -= 1f;
					Main.gore[num767].velocity.Y -= 1f;
				}
			}
			else if (type >= 128 && type <= 131)
			{
				if (life <= 0)
				{
					Gore.NewGore(base.position, base.velocity, 147);
					Gore.NewGore(base.position, base.velocity, 148);
					for (int num768 = 0; num768 < 10; num768++)
					{
						int num769 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num769];
						dust.velocity *= 1.4f;
					}
					for (int num770 = 0; num770 < 5; num770++)
					{
						int num771 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num771].noGravity = true;
						Dust dust = Main.dust[num771];
						dust.velocity *= 5f;
						num771 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num771];
						dust.velocity *= 3f;
					}
					int num772 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore2 = Main.gore[num772];
					gore2.velocity *= 0.4f;
					Main.gore[num772].velocity.X += 1f;
					Main.gore[num772].velocity.Y += 1f;
					num772 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num772];
					gore2.velocity *= 0.4f;
					Main.gore[num772].velocity.X -= 1f;
					Main.gore[num772].velocity.Y += 1f;
					num772 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num772];
					gore2.velocity *= 0.4f;
					Main.gore[num772].velocity.X += 1f;
					Main.gore[num772].velocity.Y -= 1f;
					num772 = Gore.NewGore(new Vector2(base.position.X, base.position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore2 = Main.gore[num772];
					gore2.velocity *= 0.4f;
					Main.gore[num772].velocity.X -= 1f;
					Main.gore[num772].velocity.Y -= 1f;
				}
			}
			else if (type == 23)
			{
				if (life > 0)
				{
					for (int num773 = 0; (double)num773 < dmg / (double)lifeMax * 100.0; num773++)
					{
						int num774 = 25;
						if (Main.rand.Next(2) == 0)
						{
							num774 = 6;
						}
						Dust.NewDust(base.position, width, height, num774, hitDirection, -1f);
						int num775 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num775].noGravity = true;
					}
					return;
				}
				for (int num776 = 0; num776 < 50; num776++)
				{
					int num777 = 25;
					if (Main.rand.Next(2) == 0)
					{
						num777 = 6;
					}
					Dust.NewDust(base.position, width, height, num777, 2 * hitDirection, -2f);
				}
				for (int num778 = 0; num778 < 50; num778++)
				{
					int num779 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, base.velocity.X * 0.2f, base.velocity.Y * 0.2f, 100, default(Color), 2.5f);
					Dust dust = Main.dust[num779];
					dust.velocity *= 6f;
					Main.dust[num779].noGravity = true;
				}
			}
			else if (type == 24)
			{
				if (life > 0)
				{
					for (int num780 = 0; (double)num780 < dmg / (double)lifeMax * 100.0; num780++)
					{
						int num781 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 2.5f);
						Main.dust[num781].noGravity = true;
					}
					return;
				}
				for (int num782 = 0; num782 < 50; num782++)
				{
					int num783 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, base.velocity.X, base.velocity.Y, 100, default(Color), 2.5f);
					Main.dust[num783].noGravity = true;
					Dust dust = Main.dust[num783];
					dust.velocity *= 2f;
				}
				Gore.NewGore(base.position, base.velocity, 45);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 46);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 46);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 47);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 47);
			}
			else if (type == 25)
			{
				SoundEngine.PlaySound(SoundID.Item10, base.position);
				for (int num784 = 0; num784 < 20; num784++)
				{
					int num785 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 2f);
					Main.dust[num785].noGravity = true;
					Dust dust = Main.dust[num785];
					dust.velocity *= 2f;
					num785 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100);
					dust = Main.dust[num785];
					dust.velocity *= 2f;
				}
			}
			else if (type == 33)
			{
				SoundEngine.PlaySound(SoundID.Item10, base.position);
				for (int num786 = 0; num786 < 20; num786++)
				{
					int num787 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 172, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 1.2f);
					Main.dust[num787].noGravity = true;
					Dust dust = Main.dust[num787];
					dust.velocity *= 2f;
					num787 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 172, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 0.6f);
					dust = Main.dust[num787];
					dust.velocity *= 2f;
				}
			}
			else if (type == 26 || type == 27 || type == 28 || type == 29 || type == 73 || type == 111)
			{
				if (life > 0)
				{
					for (int num788 = 0; (double)num788 < dmg / (double)lifeMax * 100.0; num788++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num789 = 0; num789 < 50; num789++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				int num790 = 48;
				int num791 = 49;
				int num792 = 50;
				if (type == 111)
				{
					num790 = 623;
					num791 = 624;
					num792 = 625;
				}
				else if (type == 26)
				{
					num790 = 626;
					num791 = 627;
					num792 = 628;
				}
				else if (type == 73)
				{
					num790 = 629;
					num791 = 630;
					num792 = 631;
				}
				else if (type == 27)
				{
					num790 = 632;
					num791 = 633;
					num792 = 634;
				}
				else if (type == 28)
				{
					num790 = 635;
					num791 = 636;
					num792 = 637;
				}
				Gore.NewGore(base.position, base.velocity, num790, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num791, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, num791, scale);
				if (type == 111)
				{
					Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 131, scale);
				}
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num792, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, num792, scale);
			}
			else if (type == 471)
			{
				if (life > 0)
				{
					for (int num793 = 0; (double)num793 < dmg / (double)lifeMax * 100.0; num793++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num794 = 0; num794 < 50; num794++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 675, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 676, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 677, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 678, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 678, scale);
			}
			else if (type == 472)
			{
				if (life > 0)
				{
					for (int num795 = 0; (double)num795 < dmg / (double)lifeMax * 100.0; num795++)
					{
						int num796 = Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num796].noGravity = true;
						}
						Main.dust[num796].alpha = 100;
					}
					return;
				}
				for (int num797 = 0; num797 < 50; num797++)
				{
					int num798 = Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num798].noGravity = true;
					}
					Main.dust[num798].alpha = 100;
				}
				Gore.NewGore(base.position, base.velocity, 679, scale);
				Gore.NewGore(base.position, base.velocity, 680, scale);
			}
			else if (type == 480)
			{
				if (life > 0)
				{
					for (int num799 = 0; (double)num799 < dmg / (double)lifeMax * 100.0; num799++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num800 = 0; num800 < 50; num800++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 692, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 693, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 20f), base.velocity, 693, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 694, scale);
				Gore.NewGore(new Vector2(base.position.X, base.position.Y + 34f), base.velocity, 694, scale);
			}
			else if (type == 185)
			{
				if (life > 0)
				{
					for (int num801 = 0; (double)num801 < dmg / (double)lifeMax * 100.0; num801++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num802 = 0; num802 < 50; num802++)
				{
					Dust.NewDust(base.position, width, height, 5, 2.5f * (float)hitDirection, -2.5f);
				}
				Gore.NewGore(base.position, base.velocity, 240, scale);
			}
			else if (type == 30)
			{
				SoundEngine.PlaySound(SoundID.Item10, base.position);
				for (int num803 = 0; num803 < 20; num803++)
				{
					int num804 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100, default(Color), 2f);
					Main.dust[num804].noGravity = true;
					Dust dust = Main.dust[num804];
					dust.velocity *= 2f;
					num804 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, (0f - base.velocity.X) * 0.2f, (0f - base.velocity.Y) * 0.2f, 100);
					dust = Main.dust[num804];
					dust.velocity *= 2f;
				}
			}
			else if (type == 42 || type == 176 || type == 205 || (type >= 231 && type <= 235))
			{
				if (life > 0)
				{
					for (int num805 = 0; (double)num805 < dmg / (double)lifeMax * 100.0; num805++)
					{
						Dust.NewDust(base.position, width, height, 18, hitDirection, -1f, alpha, this.color, scale);
					}
					return;
				}
				for (int num806 = 0; num806 < 50; num806++)
				{
					Dust.NewDust(base.position, width, height, 18, hitDirection, -2f, alpha, this.color, scale);
				}
				if (type == 205)
				{
					Gore.NewGore(base.position, base.velocity, 270, scale);
					Gore.NewGore(base.position, base.velocity, 271, scale);
					Gore.NewGore(base.position, base.velocity, 271, scale);
					Gore.NewGore(base.position, base.velocity, 272, scale);
				}
				else if (type == 176)
				{
					Gore.NewGore(base.position, base.velocity, 229, scale);
					Gore.NewGore(base.position, base.velocity, 230, scale);
				}
				else
				{
					Gore.NewGore(base.position, base.velocity, 70, scale);
					Gore.NewGore(base.position, base.velocity, 71, scale);
				}
			}
			else if (type == 43 || type == 56)
			{
				if (life > 0)
				{
					for (int num807 = 0; (double)num807 < dmg / (double)lifeMax * 100.0; num807++)
					{
						Dust.NewDust(base.position, width, height, 40, hitDirection, -1f, alpha, this.color, 1.2f);
					}
					return;
				}
				for (int num808 = 0; num808 < 50; num808++)
				{
					Dust.NewDust(base.position, width, height, 40, hitDirection, -2f, alpha, this.color, 1.2f);
				}
				Gore.NewGore(base.position, base.velocity, 72);
				Gore.NewGore(base.position, base.velocity, 72);
			}
			else if (type == 175)
			{
				if (life > 0)
				{
					for (int num809 = 0; (double)num809 < dmg / (double)lifeMax * 100.0; num809++)
					{
						Dust.NewDust(base.position, width, height, 40, hitDirection, -1f, alpha, this.color, 1.2f);
					}
					return;
				}
				for (int num810 = 0; num810 < 50; num810++)
				{
					Dust.NewDust(base.position, width, height, 40, hitDirection, -2f, alpha, this.color, 1.2f);
				}
				Gore.NewGore(base.position, base.velocity, 227);
				Gore.NewGore(base.position, base.velocity, 228);
			}
			else if (type == 48)
			{
				if (life > 0)
				{
					for (int num811 = 0; (double)num811 < dmg / (double)lifeMax * 100.0; num811++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num812 = 0; num812 < 50; num812++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 80);
				Gore.NewGore(base.position, base.velocity, 81);
			}
			else if (type == 62 || type == 66)
			{
				if (life > 0)
				{
					for (int num813 = 0; (double)num813 < dmg / (double)lifeMax * 100.0; num813++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num814 = 0; num814 < 50; num814++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 93);
				Gore.NewGore(base.position, base.velocity, 94);
				Gore.NewGore(base.position, base.velocity, 94);
			}
			else
			{
				if (type != 156)
				{
					return;
				}
				if (life > 0)
				{
					for (int num815 = 0; (double)num815 < dmg / (double)lifeMax * 100.0; num815++)
					{
						Dust.NewDust(base.position, width, height, 5, hitDirection, -1f);
					}
					return;
				}
				for (int num816 = 0; num816 < 50; num816++)
				{
					Dust.NewDust(base.position, width, height, 5, 2 * hitDirection, -2f);
				}
				Gore.NewGore(base.position, base.velocity, 184);
				Gore.NewGore(base.position, base.velocity, 185);
				Gore.NewGore(base.position, base.velocity, 185);
			}
		}

		public static int CountNPCS(int Type)
		{
			int num = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					num++;
				}
			}
			return num;
		}

		public static bool AnyHelpfulFairies()
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && (Main.npc[i].type == 583 || Main.npc[i].type == 584 || Main.npc[i].type == 585) && Main.npc[i].ai[2] > 1f)
				{
					return true;
				}
			}
			return false;
		}

		public static bool AnyNPCs(int Type)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					return true;
				}
			}
			return false;
		}

		public static int FindFirstNPC(int Type)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == Type)
				{
					return i;
				}
			}
			return -1;
		}

		public static bool NearSpikeBall(int x, int y)
		{
			Rectangle rectangle = new Rectangle(x * 16 - 300, y * 16 - 300, 600, 600);
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].aiStyle == 20)
				{
					Rectangle rectangle2 = new Rectangle((int)Main.npc[i].ai[1], (int)Main.npc[i].ai[2], 20, 20);
					if (rectangle.Intersects(rectangle2))
					{
						return true;
					}
				}
			}
			return false;
		}

		public int FindBuffIndex(int type)
		{
			if (buffImmune[type])
			{
				return -1;
			}
			for (int i = 0; i < 5; i++)
			{
				if (buffTime[i] >= 1 && buffType[i] == type)
				{
					return i;
				}
			}
			return -1;
		}

		public void AddBuff(int type, int time, bool quiet = false)
		{
			if (buffImmune[type])
			{
				return;
			}
			if (!quiet)
			{
				if (Main.netMode == 1)
				{
					NetMessage.SendData(53, -1, -1, null, whoAmI, type, time);
				}
				else if (Main.netMode == 2)
				{
					NetMessage.SendData(54, -1, -1, null, whoAmI);
				}
			}
			int num = -1;
			for (int i = 0; i < 5; i++)
			{
				if (buffType[i] == type)
				{
					if (buffTime[i] < time)
					{
						buffTime[i] = time;
					}
					return;
				}
			}
			while (num == -1)
			{
				int num2 = -1;
				for (int j = 0; j < 5; j++)
				{
					if (!Main.debuff[buffType[j]])
					{
						num2 = j;
						break;
					}
				}
				if (num2 == -1)
				{
					return;
				}
				for (int k = num2; k < 5; k++)
				{
					if (buffType[k] == 0)
					{
						num = k;
						break;
					}
				}
				if (num == -1)
				{
					DelBuff(num2);
				}
			}
			buffType[num] = type;
			buffTime[num] = time;
		}

		public void RequestBuffRemoval(int buffTypeToRemove)
		{
			if (buffTypeToRemove < 0 || buffTypeToRemove >= 323 || !BuffID.Sets.CanBeRemovedByNetMessage[buffTypeToRemove])
			{
				return;
			}
			int num = FindBuffIndex(buffTypeToRemove);
			if (num != -1)
			{
				DelBuff(num);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(137, -1, -1, null, whoAmI, buffTypeToRemove);
				}
			}
		}

		public void DelBuff(int buffIndex)
		{
			buffTime[buffIndex] = 0;
			buffType[buffIndex] = 0;
			for (int i = 0; i < 4; i++)
			{
				if (buffTime[i] == 0 || buffType[i] == 0)
				{
					for (int j = i + 1; j < 5; j++)
					{
						buffTime[j - 1] = buffTime[j];
						buffType[j - 1] = buffType[j];
						buffTime[j] = 0;
						buffType[j] = 0;
					}
				}
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(54, -1, -1, null, whoAmI);
			}
		}

		public Rectangle getRect()
		{
			return new Rectangle((int)position.X, (int)position.Y, width, height);
		}

		public bool CanBeChasedBy(object attacker = null, bool ignoreDontTakeDamage = false)
		{
			if (active && chaseable && lifeMax > 5 && (!dontTakeDamage || ignoreDontTakeDamage) && !friendly)
			{
				return !immortal;
			}
			return false;
		}

		public void moneyPing(Vector2 pos)
		{
			SoundEngine.PlaySound(38, pos);
			int num = 244;
			if (extraValue >= 1000000)
			{
				num = 247;
			}
			else if (extraValue >= 10000)
			{
				num = 246;
			}
			else if (extraValue >= 100)
			{
				num = 245;
			}
			for (int i = 0; i < 20; i++)
			{
				int num2 = Dust.NewDust(pos - new Vector2(1f, 2f), 10, 14, num, 0f, 0f, 254, default(Color), 0.25f);
				Main.dust[num2].velocity *= 0.2f;
			}
		}

		public void IdleSounds()
		{
			if ((type == 239 || type == 240) && Main.rand.Next(900) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(24, 26));
			}
			else if ((type == 62 || type == 156) && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(26, 30));
			}
			else if (type == 177 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(30, 32));
			}
			else if (type == 226 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 32);
			}
			else if (type == 153 && Main.rand.Next(1000) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 33);
			}
			else if (wet && (type == 63 || type == 64 || type == 103) && Main.rand.Next(1000) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(34, 36));
			}
			else if ((type == 198 || type == 199) && Main.rand.Next(1000) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(36, 38));
			}
			else if ((type == 170 || type == 180 || type == 171) && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(38, 41));
			}
			else if (type == 250 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(41, 44));
			}
			else if (type == 580 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 44);
			}
			else if (type == 582 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 44);
			}
			else if (type == 581 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(44, 47));
			}
			else if (type == 508 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 44);
			}
			else if (type == 509 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(44, 47));
			}
			else if (type == 494 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 47);
			}
			else if (type == 467 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(48, 50));
			}
			else if (type == 468 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(50, 53));
			}
			else if (type == 288 && Main.rand.Next(400) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(53, 55));
			}
			else if ((type == 524 || type == 525 || type == 526 || type == 527) && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(55, 57));
			}
			else if ((type == 496 || type == 497) && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(57, 59));
			}
			else if (type == 389 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(59, 61));
			}
			else if (type == 471 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(61, 63));
			}
			else if (type == 482 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(63, 66));
			}
			else if (type == 388 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(66, 69));
			}
			else if (type == 520 && Main.rand.Next(800) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(69, 73));
			}
			else if (type == 477 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 73);
			}
			else if (type == 258 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(74, 78));
			}
			else if (type == 252 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 78);
			}
			else if (type == 469 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(79, 81));
			}
			else if ((type == 253 || type == 82) && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(81, 84));
			}
			else if (type >= 498 && type <= 506 && Main.rand.Next(600) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(84, 86));
			}
			else if (type == 391 && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, Main.rand.Next(86, 87));
			}
		}

		public void UpdateAltTexture()
		{
			if (townNPC)
			{
				int oldAltTexture = altTexture;
				bool flag = BirthdayParty.PartyIsUp || ForcePartyHatOn;
				if (type == 441 || type == 453 || type == 633)
				{
					flag = false;
				}
				altTexture = 0;
				if (flag)
				{
					altTexture = 1;
				}
				if (type == 633 && ShouldBestiaryGirlBeLycantrope())
				{
					altTexture = 2;
				}
				if (!ForcePartyHatOn)
				{
					MakeTransitionEffectsForTextureChanges(oldAltTexture, altTexture);
				}
			}
		}

		private void MakeTransitionEffectsForTextureChanges(int oldAltTexture, int currentAltTexture)
		{
			if (oldAltTexture == 0 && currentAltTexture == 1)
			{
				for (int i = 0; i < 20; i++)
				{
					Dust.NewDust(position, width, height / 4, 139 + Main.rand.Next(4), 0f, -2f);
				}
			}
			if (oldAltTexture == 1 && currentAltTexture == 0)
			{
				Utils.PoofOfSmoke(position);
			}
			if (type != 633)
			{
				return;
			}
			int num = 2;
			if ((oldAltTexture == 0 && currentAltTexture == num) || (oldAltTexture == num && currentAltTexture == 0))
			{
				for (int j = 0; j < 20; j++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 262, 0f, -2f);
					dust.noGravity = true;
					dust.scale = 2f;
				}
			}
		}

		public static void ResetNetOffsets()
		{
			offSetDelayTime = 180;
			for (int i = 0; i < 200; i++)
			{
				Main.npc[i].netOffset *= 0f;
			}
		}

		public void UpdateNPC(int i)
		{
			whoAmI = i;
			if (!active)
			{
				return;
			}
			if (offSetDelayTime > 0)
			{
				netOffset *= 0f;
			}
			else if (Main.netMode == 2)
			{
				netOffset *= 0f;
			}
			else if (Main.multiplayerNPCSmoothingRange <= 0)
			{
				netOffset *= 0f;
			}
			else if (netOffset != new Vector2(0f, 0f))
			{
				if (NPCID.Sets.NoMultiplayerSmoothingByType[type])
				{
					netOffset *= 0f;
				}
				else if (NPCID.Sets.NoMultiplayerSmoothingByAI[aiStyle])
				{
					netOffset *= 0f;
				}
				else
				{
					float num = 2f;
					float num2 = Main.multiplayerNPCSmoothingRange;
					float num3 = netOffset.Length();
					if (num3 > num2)
					{
						netOffset.Normalize();
						netOffset *= num2;
						num3 = netOffset.Length();
					}
					num += num3 / num2 * num;
					Vector2 vector = netOffset;
					vector.Normalize();
					vector *= num;
					netOffset -= vector;
					if (netOffset.Length() < num)
					{
						netOffset *= 0f;
					}
					if (townNPC && Vector2.Distance(position, new Vector2(homeTileX * 16 + 8 - width / 2, (float)(homeTileY * 16 - height) - 0.1f)) < 1f)
					{
						netOffset *= 0f;
					}
				}
			}
			UpdateAltTexture();
			if (type == 368)
			{
				travelNPC = true;
			}
			if (Main.netMode != 2)
			{
				UpdateNPC_CastLights();
			}
			UpdateNPC_TeleportVisuals();
			UpdateNPC_CritterSounds();
			TrySyncingUniqueTownNPCData(i);
			if (aiStyle == 7 && position.Y > Main.bottomWorld - 640f + (float)height && Main.netMode != 1 && !Main.xMas)
			{
				StrikeNPCNoInteraction(9999, 0f, 0);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(28, -1, -1, null, whoAmI, 9999f);
				}
			}
			if (Main.netMode == 1)
			{
				bool flag = false;
				int num4 = (int)(position.X + (float)(width / 2)) / 16;
				int num5 = (int)(position.Y + (float)(height / 2)) / 16;
				try
				{
					if (num4 >= 4 && num4 <= Main.maxTilesX - 4 && num5 >= 4 && num5 <= Main.maxTilesY - 4)
					{
						if (Main.tile[num4, num5] == null)
						{
							flag = true;
						}
						else if (Main.tile[num4 - 3, num5] == null)
						{
							flag = true;
						}
						else if (Main.tile[num4 + 3, num5] == null)
						{
							flag = true;
						}
						else if (Main.tile[num4, num5 - 3] == null)
						{
							flag = true;
						}
						else if (Main.tile[num4, num5 + 3] == null)
						{
							flag = true;
						}
					}
				}
				catch
				{
					flag = true;
				}
				if (flag)
				{
					return;
				}
			}
			UpdateNPC_BuffFlagsReset();
			UpdateNPC_BuffSetFlags();
			UpdateNPC_SoulDrainDebuff();
			UpdateNPC_BuffClearExpiredBuffs();
			UpdateNPC_BuffApplyDOTs();
			UpdateNPC_BuffApplyVFX();
			UpdateNPC_BloodMoonTransformations();
			UpdateNPC_UpdateGravity(out var maxFallSpeed);
			if (soundDelay > 0)
			{
				soundDelay--;
			}
			if (life <= 0)
			{
				active = false;
				UpdateNetworkCode(i);
				netUpdate = false;
				justHit = false;
				return;
			}
			oldTarget = target;
			oldDirection = direction;
			oldDirectionY = directionY;
			float num6 = 1f + Math.Abs(velocity.X) / 3f;
			if (gfxOffY > 0f)
			{
				gfxOffY -= num6 * stepSpeed;
				if (gfxOffY < 0f)
				{
					gfxOffY = 0f;
				}
			}
			else if (gfxOffY < 0f)
			{
				gfxOffY += num6 * stepSpeed;
				if (gfxOffY > 0f)
				{
					gfxOffY = 0f;
				}
			}
			if (gfxOffY > 16f)
			{
				gfxOffY = 16f;
			}
			if (gfxOffY < -16f)
			{
				gfxOffY = -16f;
			}
			TryPortalJumping();
			IdleSounds();
			AI();
			if (Main.netMode != 2 && extraValue > 0)
			{
				int num7 = 244;
				float num8 = 30f;
				if (extraValue >= 1000000)
				{
					num7 = 247;
					num8 *= 0.25f;
				}
				else if (extraValue >= 10000)
				{
					num7 = 246;
					num8 *= 0.5f;
				}
				else if (extraValue >= 100)
				{
					num7 = 245;
					num8 *= 0.75f;
				}
				if (Main.rand.Next((int)num8) == 0)
				{
					position += netOffset;
					int num9 = Dust.NewDust(position, width, height, num7, 0f, 0f, 254, default(Color), 0.25f);
					Main.dust[num9].velocity *= 0.1f;
					position -= netOffset;
				}
			}
			for (int j = 0; j < 256; j++)
			{
				if (immune[j] > 0)
				{
					immune[j]--;
				}
			}
			if (!noGravity && !noTileCollide)
			{
				int num10 = (int)(position.X + (float)(width / 2)) / 16;
				int num11 = (int)(position.Y + (float)(height / 2)) / 16;
				if (WorldGen.InWorld(num10, num11) && Main.tile[num10, num11] == null)
				{
					gravity = 0f;
					velocity.X = 0f;
					velocity.Y = 0f;
				}
			}
			if (!noGravity)
			{
				velocity.Y += gravity;
				if (velocity.Y > maxFallSpeed)
				{
					velocity.Y = maxFallSpeed;
				}
			}
			if ((double)velocity.X < 0.005 && (double)velocity.X > -0.005)
			{
				velocity.X = 0f;
			}
			if (Main.netMode != 1 && type != 37 && (friendly || NPCID.Sets.TakesDamageFromHostilesWithoutBeingFriendly[type]))
			{
				if (townNPC)
				{
					CheckDrowning();
				}
				CheckLifeRegen();
				GetHurtByOtherNPCs(NPCID.Sets.AllNPCs);
			}
			if (Main.netMode != 1 && (npcsFoundForCheckActive[210] || npcsFoundForCheckActive[211]) && !NPCID.Sets.HurtingBees[type])
			{
				GetHurtByOtherNPCs(NPCID.Sets.HurtingBees);
			}
			if (!noTileCollide)
			{
				UpdateCollision();
			}
			else
			{
				oldPosition = position;
				oldDirection = direction;
				position += velocity;
				if (onFire && boss && Main.netMode != 1 && Collision.WetCollision(position, width, height))
				{
					for (int k = 0; k < 5; k++)
					{
						if (buffType[k] == 24)
						{
							DelBuff(k);
						}
					}
				}
			}
			if (Main.netMode != 1 && !noTileCollide && lifeMax > 1 && Collision.SwitchTiles(position, width, height, oldPosition, 2) && (type == 46 || type == 148 || type == 149 || type == 303 || type == 361 || type == 362 || type == 364 || type == 366 || type == 367 || (type >= 442 && type <= 448) || type == 602 || type == 608 || type == 614))
			{
				ai[0] = 1f;
				ai[1] = 400f;
				ai[2] = 0f;
			}
			FindFrame();
			UpdateNPC_UpdateTrails();
			UpdateNetworkCode(i);
			CheckActive();
			netUpdate = false;
			justHit = false;
		}

		private void TrySyncingUniqueTownNPCData(int npcIndex)
		{
			if (Main.netMode == 1 && needsUniqueInfoUpdate && (townNPC || type == 453) && type != 37)
			{
				needsUniqueInfoUpdate = false;
				NetMessage.SendData(56, -1, -1, null, npcIndex);
			}
		}

		private void UpdateNetworkCode(int i)
		{
			if (!active)
			{
				netUpdate = true;
			}
			if (Main.netMode != 2)
			{
				return;
			}
			if (Main.npcStreamSpeed > 0 && !townNPC && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 1f)
			{
				netStream++;
				if (netStream > Main.npcStreamSpeed)
				{
					for (int j = 0; j < 255; j++)
					{
						if (Main.player[j].active)
						{
							netStream = 0;
							float num = Math.Abs(base.Center.X - Main.player[j].Center.X) + Math.Abs(base.Center.Y - Main.player[j].Center.Y);
							if (num < 250f)
							{
								streamPlayer[j] -= 8;
							}
							else if (num < 500f)
							{
								streamPlayer[j] -= 4;
							}
							else if (num < 1000f)
							{
								streamPlayer[j] -= 2;
							}
							else if (num < 1500f)
							{
								streamPlayer[j]--;
							}
							if (streamPlayer[j] <= 0)
							{
								streamPlayer[j] = 8;
								NetMessage.SendData(23, j, -1, null, i);
							}
						}
					}
				}
			}
			if (townNPC)
			{
				netSpam = 0;
			}
			if (netUpdate2)
			{
				netUpdate = true;
			}
			if (!active)
			{
				netSpam = 0;
			}
			if (netUpdate)
			{
				if (boss)
				{
					_ = oldPosition - position;
					if (netSpam <= 15)
					{
						netSpam += 5;
						NetMessage.SendData(23, -1, -1, null, i);
						netUpdate2 = false;
					}
					else
					{
						netUpdate2 = true;
					}
				}
				else if (netSpam <= 90)
				{
					netSpam += 30;
					NetMessage.SendData(23, -1, -1, null, i);
					netUpdate2 = false;
				}
				else
				{
					netUpdate2 = true;
				}
			}
			if (netSpam > 0)
			{
				netSpam--;
			}
			if (active && townNPC && TypeToDefaultHeadIndex(type) > 0)
			{
				if (homeless != oldHomeless || homeTileX != oldHomeTileX || homeTileY != oldHomeTileY)
				{
					byte householdStatus = WorldGen.TownManager.GetHouseholdStatus(this);
					NetMessage.SendData(60, -1, -1, null, i, Main.npc[i].homeTileX, Main.npc[i].homeTileY, (int)householdStatus);
				}
				oldHomeless = homeless;
				oldHomeTileX = homeTileX;
				oldHomeTileY = homeTileY;
			}
		}

		private void UpdateNPC_UpdateTrails()
		{
			int num = NPCID.Sets.TrailingMode[type];
			if (num == 0)
			{
				if (localAI[3] <= 0f)
				{
					localAI[3] = 2f;
					for (int num2 = oldPos.Length - 1; num2 > 0; num2--)
					{
						oldPos[num2] = oldPos[num2 - 1];
					}
					oldPos[0] = position + netOffset;
				}
				localAI[3] -= 1f;
			}
			if (num == 1)
			{
				for (int num3 = oldPos.Length - 1; num3 > 0; num3--)
				{
					oldPos[num3] = oldPos[num3 - 1];
				}
				oldPos[0] = position + netOffset;
			}
			if (num == 2)
			{
				if ((int)ai[0] == 4 || ai[0] == 5f || ai[0] == 6f)
				{
					for (int num4 = oldPos.Length - 1; num4 > 0; num4--)
					{
						oldPos[num4] = oldPos[num4 - 1];
						oldRot[num4] = oldRot[num4 - 1];
					}
					oldPos[0] = position + netOffset;
					oldRot[0] = rotation;
				}
				else
				{
					for (int num5 = oldPos.Length - 1; num5 >= 0; num5--)
					{
						oldPos[num5] = position + netOffset;
						oldRot[num5] = rotation;
					}
				}
			}
			if (num == 3)
			{
				for (int num6 = oldPos.Length - 1; num6 > 0; num6--)
				{
					oldPos[num6] = oldPos[num6 - 1];
					oldRot[num6] = oldRot[num6 - 1];
				}
				oldPos[0] = position + netOffset;
				oldRot[0] = rotation;
			}
			switch (num)
			{
			case 4:
			{
				for (int num9 = oldPos.Length - 1; num9 > 0; num9--)
				{
					oldPos[num9] = oldPos[num9 - 1];
					Lighting.AddLight((int)position.X / 16, (int)position.Y / 16, 0.3f, 0f, 0.2f);
				}
				oldPos[0] = position + netOffset;
				break;
			}
			case 5:
			{
				for (int num8 = oldPos.Length - 1; num8 > 0; num8--)
				{
					oldPos[num8] = oldPos[num8 - 1];
				}
				oldPos[0] = position + netOffset;
				break;
			}
			case 6:
			{
				for (int num10 = oldPos.Length - 1; num10 > 0; num10--)
				{
					oldPos[num10] = oldPos[num10 - 1];
				}
				oldPos[0] = position + netOffset;
				break;
			}
			case 7:
			{
				for (int num7 = oldPos.Length - 1; num7 > 0; num7--)
				{
					oldPos[num7] = oldPos[num7 - 1];
					oldRot[num7] = oldRot[num7 - 1];
				}
				oldPos[0] = position + netOffset;
				oldRot[0] = rotation;
				break;
			}
			}
		}

		private void UpdateNPC_UpdateGravity(out float maxFallSpeed)
		{
			maxFallSpeed = 10f;
			gravity = 0.3f;
			if (type == 258)
			{
				gravity = 0.1f;
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
			}
			else if (type == 425 && ai[2] == 1f)
			{
				gravity = 0.1f;
				if (velocity.Y > 2f)
				{
					velocity.Y = 2f;
				}
			}
			else if ((type == 576 || type == 577) && ai[0] > 0f && ai[1] == 2f)
			{
				gravity = 0.45f;
				if (velocity.Y > 32f)
				{
					velocity.Y = 32f;
				}
			}
			else if (type == 427 && ai[2] == 1f)
			{
				gravity = 0.1f;
				if (velocity.Y > 4f)
				{
					velocity.Y = 4f;
				}
			}
			else if (type == 426)
			{
				gravity = 0.1f;
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
			}
			else if (type == 541)
			{
				gravity = 0f;
			}
			float num = Main.maxTilesX / 4200;
			num *= num;
			float num2 = (float)((double)(position.Y / 16f - (60f + 10f * num)) / (Main.worldSurface / 6.0));
			if ((double)num2 < 0.25)
			{
				num2 = 0.25f;
			}
			if (num2 > 1f)
			{
				num2 = 1f;
			}
			gravity *= num2;
			if (wet)
			{
				if (honeyWet)
				{
					gravity = 0.1f;
					maxFallSpeed = 4f;
				}
				else
				{
					gravity = 0.2f;
					maxFallSpeed = 7f;
				}
			}
		}

		private void UpdateNPC_SoulDrainDebuff()
		{
			if (!soulDrain)
			{
				return;
			}
			int num = 1100;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && (base.Center - Main.player[i].position).Length() < (float)num && Main.player[i].inventory[Main.player[i].selectedItem].type == 3006 && Main.player[i].itemAnimation > 0)
				{
					if (i == Main.myPlayer)
					{
						Main.player[i].soulDrain++;
					}
					if (Main.rand.Next(3) != 0)
					{
						Vector2 center = base.Center;
						center.X += (float)Main.rand.Next(-100, 100) * 0.05f;
						center.Y += (float)Main.rand.Next(-100, 100) * 0.05f;
						center += velocity;
						int num2 = Dust.NewDust(center, 1, 1, 235);
						Main.dust[num2].velocity *= 0f;
						Main.dust[num2].scale = (float)Main.rand.Next(70, 85) * 0.01f;
						Main.dust[num2].fadeIn = i + 1;
					}
				}
			}
		}

		public static Color buffColor(Color newColor, float R, float G, float B, float A)
		{
			newColor.R = (byte)((float)(int)newColor.R * R);
			newColor.G = (byte)((float)(int)newColor.G * G);
			newColor.B = (byte)((float)(int)newColor.B * B);
			newColor.A = (byte)((float)(int)newColor.A * A);
			return newColor;
		}

		public Color GetNPCColorTintedByBuffs(Color npcColor)
		{
			float num = 1f;
			float num2 = 1f;
			float num3 = 1f;
			float a = 1f;
			if (poisoned)
			{
				num *= 0.65f;
				num3 *= 0.75f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (venom)
			{
				num2 *= 0.45f;
				num *= 0.75f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (midas)
			{
				num3 *= 0.3f;
				num *= 0.85f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (betsysCurse)
			{
				num *= 0.8f;
				num2 *= 0.6f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (oiled)
			{
				num *= 0.7f;
				num2 *= 0.7f;
				num3 *= 0.7f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (stinky)
			{
				num *= 0.7f;
				num3 *= 0.55f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (drippingSlime)
			{
				num *= 0.8f;
				num2 *= 0.8f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (drippingSparkleSlime)
			{
				num3 *= 0.85f;
				num2 *= 0.75f;
				npcColor = buffColor(npcColor, num, num2, num3, a);
			}
			if (ichor)
			{
				npcColor = new Color(255, 255, 0, 255);
			}
			if (Main.player[Main.myPlayer].detectCreature && lifeMax > 1)
			{
				byte b;
				byte b2;
				byte b3;
				if (friendly || catchItem > 0 || (damage == 0 && lifeMax == 5))
				{
					b = 50;
					b2 = byte.MaxValue;
					b3 = 50;
				}
				else
				{
					b = byte.MaxValue;
					b2 = 50;
					b3 = 50;
				}
				if (npcColor.R < b)
				{
					npcColor.R = b;
				}
				if (npcColor.G < b2)
				{
					npcColor.G = b2;
				}
				if (npcColor.B < b3)
				{
					npcColor.B = b3;
				}
			}
			return npcColor;
		}

		private void UpdateNPC_BuffApplyVFX()
		{
			base.position += netOffset;
			if (markedByScytheWhip && Main.rand.Next(3) == 0)
			{
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.BlackLightningSmall, new ParticleOrchestraSettings
				{
					MovementVector = Main.rand.NextVector2Circular(1f, 1f),
					PositionInWorld = Main.rand.NextVector2FromRectangle(base.Hitbox)
				});
			}
			if (poisoned && Main.rand.Next(30) == 0)
			{
				Dust dust = Dust.NewDustDirect(base.position, width, height, 46, 0f, 0f, 120, default(Color), 0.2f);
				dust.noGravity = true;
				dust.fadeIn = 1.9f;
			}
			if (venom && Main.rand.Next(10) == 0)
			{
				Dust dust2 = Dust.NewDustDirect(base.position, width, height, 171, 0f, 0f, 100, default(Color), 0.5f);
				dust2.noGravity = true;
				dust2.fadeIn = 1.5f;
			}
			if (shadowFlame && Main.rand.Next(5) < 4)
			{
				Dust dust3 = Dust.NewDustDirect(new Vector2(base.position.X - 2f, base.position.Y - 2f), width + 4, height + 4, 27, velocity.X * 0.4f, velocity.Y * 0.4f, 180, default(Color), 1.95f);
				dust3.noGravity = true;
				dust3.velocity *= 0.75f;
				dust3.velocity.X *= 0.75f;
				dust3.velocity.Y -= 1f;
				if (Main.rand.Next(4) == 0)
				{
					dust3.noGravity = false;
					dust3.scale *= 0.5f;
				}
			}
			if (onFire)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust4 = Dust.NewDustDirect(new Vector2(base.position.X - 2f, base.position.Y - 2f), width + 4, height + 4, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust4.noGravity = true;
					dust4.velocity *= 1.8f;
					dust4.velocity.Y -= 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						dust4.noGravity = false;
						dust4.scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(base.position.X / 16f), (int)(base.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (daybreak)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust5 = Dust.NewDustDirect(new Vector2(base.position.X - 2f, base.position.Y - 2f), width + 4, height + 4, 158, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust5.noGravity = true;
					dust5.velocity *= 2.8f;
					dust5.velocity.Y -= 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						dust5.noGravity = false;
						dust5.scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(base.position.X / 16f), (int)(base.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (betsysCurse)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust6 = Dust.NewDustDirect(new Vector2(base.position.X - 2f, base.position.Y - 2f), width + 4, height + 4, 55, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust6.noGravity = true;
					dust6.velocity *= 2.8f;
					dust6.velocity.Y -= 1.5f;
					dust6.noGravity = false;
					dust6.scale = 0.9f;
					dust6.color = new Color(0, 0, 180, 255);
					dust6.velocity *= 0.2f;
				}
				Lighting.AddLight((int)(base.position.X / 16f), (int)(base.position.Y / 16f + 1f), 0.6f, 0.1f, 0.9f);
			}
			if (oiled && Main.rand.Next(3) != 0)
			{
				int num = 175;
				Color newColor = new Color(0, 0, 0, 140);
				Vector2 position = base.position;
				position.X -= 2f;
				position.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust7 = Dust.NewDustDirect(position, width + 4, height + 2, 4, 0f, 0f, num, newColor, 1.4f);
					if (Main.rand.Next(2) == 0)
					{
						dust7.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust7.alpha += 25;
					}
					dust7.noLight = true;
					dust7.velocity *= 0.2f;
					dust7.velocity.Y += 0.2f;
					dust7.velocity += velocity;
				}
			}
			if (dryadWard && velocity.X != 0f && Main.rand.Next(4) == 0)
			{
				Dust dust8 = Dust.NewDustDirect(new Vector2(base.position.X - 2f, base.position.Y + (float)height - 2f), width + 4, 4, 163, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.5f);
				dust8.noGravity = true;
				dust8.noLight = true;
				dust8.velocity *= 0f;
			}
			if (dryadBane && Main.rand.Next(4) == 0)
			{
				Dust dust9 = Dust.NewDustDirect(new Vector2(base.position.X - 2f, base.position.Y), width + 4, height, 163, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.5f);
				dust9.noGravity = true;
				dust9.velocity *= new Vector2(Main.rand.NextFloat() * 4f - 2f, 0f);
				dust9.noLight = true;
			}
			if (loveStruck && Main.rand.Next(5) == 0)
			{
				Vector2 vector = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
				vector.Normalize();
				vector.X *= 0.66f;
				int num2 = Gore.NewGore(base.position + new Vector2(Main.rand.Next(width + 1), Main.rand.Next(height + 1)), vector * Main.rand.Next(3, 6) * 0.33f, 331, (float)Main.rand.Next(40, 121) * 0.01f);
				Main.gore[num2].sticky = false;
				Main.gore[num2].velocity *= 0.4f;
				Main.gore[num2].velocity.Y -= 0.6f;
			}
			if (stinky && Main.rand.Next(5) == 0)
			{
				Vector2 vector2 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
				vector2.Normalize();
				vector2.X *= 0.66f;
				vector2.Y = Math.Abs(vector2.Y);
				Vector2 vector3 = vector2 * Main.rand.Next(3, 5) * 0.25f;
				Dust dust10 = Dust.NewDustDirect(base.position, width, height, 188, vector3.X, vector3.Y * 0.5f, 100, default(Color), 1.5f);
				dust10.velocity *= 0.1f;
				dust10.velocity.Y -= 0.5f;
			}
			if (dripping && Main.rand.Next(4) != 0)
			{
				Vector2 position2 = base.position;
				position2.X -= 2f;
				position2.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust11 = Dust.NewDustDirect(position2, width + 4, height + 2, 211, 0f, 0f, 50, default(Color), 0.8f);
					if (Main.rand.Next(2) == 0)
					{
						dust11.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust11.alpha += 25;
					}
					dust11.noLight = true;
					dust11.velocity *= 0.2f;
					dust11.velocity.Y += 0.2f;
					dust11.velocity += velocity;
				}
				else
				{
					Dust dust12 = Dust.NewDustDirect(position2, width + 8, height + 8, 211, 0f, 0f, 50, default(Color), 1.1f);
					if (Main.rand.Next(2) == 0)
					{
						dust12.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust12.alpha += 25;
					}
					dust12.noLight = true;
					dust12.noGravity = true;
					dust12.velocity *= 0.2f;
					dust12.velocity.Y += 1f;
					dust12.velocity += velocity;
				}
			}
			if (drippingSlime && Main.rand.Next(4) != 0)
			{
				int num3 = 175;
				Color newColor2 = new Color(0, 80, 255, 100);
				Vector2 position3 = base.position;
				position3.X -= 2f;
				position3.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust13 = Dust.NewDustDirect(position3, width + 4, height + 2, 4, 0f, 0f, num3, newColor2, 1.4f);
					if (Main.rand.Next(2) == 0)
					{
						dust13.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust13.alpha += 25;
					}
					dust13.noLight = true;
					dust13.velocity *= 0.2f;
					dust13.velocity.Y += 0.2f;
					dust13.velocity += velocity;
				}
			}
			if (drippingSparkleSlime && Main.rand.Next(4) != 0)
			{
				int num4 = 150;
				Vector2 position4 = base.position;
				position4.X -= 2f;
				position4.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust14 = Dust.NewDustDirect(position4, width + 4, height + 2, 243, 0f, 0f, num4);
					if (Main.rand.Next(2) == 0)
					{
						dust14.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust14.alpha += 25;
					}
					dust14.noLight = true;
					dust14.velocity *= 0.2f;
					dust14.velocity.Y += 0.2f;
					dust14.velocity += velocity;
				}
			}
			if (onFrostBurn)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust15 = Dust.NewDustDirect(new Vector2(base.position.X - 2f, base.position.Y - 2f), width + 4, height + 4, 135, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust15.noGravity = true;
					dust15.velocity *= 1.8f;
					dust15.velocity.Y -= 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						dust15.noGravity = false;
						dust15.scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(base.position.X / 16f), (int)(base.position.Y / 16f + 1f), 0.1f, 0.6f, 1f);
			}
			if (onFire2)
			{
				if (Main.rand.Next(4) < 3)
				{
					Dust dust16 = Dust.NewDustDirect(new Vector2(base.position.X - 2f, base.position.Y - 2f), width + 4, height + 4, 75, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3.5f);
					dust16.noGravity = true;
					dust16.velocity *= 1.8f;
					dust16.velocity.Y -= 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						dust16.noGravity = false;
						dust16.scale *= 0.5f;
					}
				}
				Lighting.AddLight((int)(base.position.X / 16f), (int)(base.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			base.position -= netOffset;
		}

		private void UpdateNPC_BuffApplyDOTs()
		{
			if (dontTakeDamage)
			{
				return;
			}
			int num = lifeRegenExpectedLossPerSecond;
			if (poisoned)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 4;
			}
			if (onFire)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 8;
			}
			if (onFrostBurn)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 16;
				if (num < 2)
				{
					num = 2;
				}
			}
			if (onFire2)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 24;
				if (num < 4)
				{
					num = 4;
				}
			}
			if (venom)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 30;
				if (num < 5)
				{
					num = 5;
				}
			}
			if (shadowFlame)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 30;
				if (num < 5)
				{
					num = 5;
				}
			}
			if (oiled)
			{
				int num2 = (onFire ? 2 : 0);
				num2 += (onFrostBurn ? 4 : 0);
				num2 += (onFire2 ? 3 : 0);
				num2 += (shadowFlame ? 8 : 0);
				if (num2 > 0)
				{
					int num3 = num2 * 4 + 12;
					lifeRegen -= num3;
					int num4 = num3 / 6;
					if (num < num4)
					{
						num = num4;
					}
				}
			}
			if (javelined)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				int num5 = 0;
				int num6 = 1;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].type == 598 && Main.projectile[i].ai[0] == 1f && Main.projectile[i].ai[1] == (float)base.whoAmI)
					{
						num5++;
					}
				}
				lifeRegen -= num5 * 2 * 3;
				if (num < num5 * 3 / num6)
				{
					num = num5 * 3 / num6;
				}
			}
			if (daybreak)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				int num7 = 0;
				int num8 = 4;
				for (int j = 0; j < 1000; j++)
				{
					if (Main.projectile[j].active && Main.projectile[j].type == 636 && Main.projectile[j].ai[0] == 1f && Main.projectile[j].ai[1] == (float)base.whoAmI)
					{
						num7++;
					}
				}
				if (num7 == 0)
				{
					num7 = 1;
				}
				lifeRegen -= num7 * 2 * 100;
				if (num < num7 * 100 / num8)
				{
					num = num7 * 100 / num8;
				}
			}
			if (celled)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				int num9 = 0;
				for (int k = 0; k < 1000; k++)
				{
					if (Main.projectile[k].active && Main.projectile[k].type == 614 && Main.projectile[k].ai[0] == 1f && Main.projectile[k].ai[1] == (float)base.whoAmI)
					{
						num9++;
					}
				}
				lifeRegen -= num9 * 2 * 20;
				if (num < num9 * 20)
				{
					num = num9 * 20 / 2;
				}
			}
			if (dryadBane)
			{
				int num10 = 4;
				float num11 = 1f;
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				if (downedBoss1)
				{
					num11 += 0.1f;
				}
				if (downedBoss2)
				{
					num11 += 0.1f;
				}
				if (downedBoss3)
				{
					num11 += 0.1f;
				}
				if (downedQueenBee)
				{
					num11 += 0.1f;
				}
				if (Main.hardMode)
				{
					num11 += 0.4f;
				}
				if (downedMechBoss1)
				{
					num11 += 0.15f;
				}
				if (downedMechBoss2)
				{
					num11 += 0.15f;
				}
				if (downedMechBoss3)
				{
					num11 += 0.15f;
				}
				if (downedPlantBoss)
				{
					num11 += 0.15f;
				}
				if (downedGolemBoss)
				{
					num11 += 0.15f;
				}
				if (downedAncientCultist)
				{
					num11 += 0.15f;
				}
				if (Main.expertMode)
				{
					num11 *= Main.GameModeInfo.TownNPCDamageMultiplier;
				}
				num10 = (int)((float)num10 * num11);
				lifeRegen -= 2 * num10;
				if (num < num10)
				{
					num = num10 / 3;
				}
			}
			if (soulDrain && realLife == -1)
			{
				if (lifeRegen > 0)
				{
					lifeRegen = 0;
				}
				lifeRegen -= 50;
				if (num < 5)
				{
					num = 5;
				}
			}
			if (lifeRegen <= -240 && num < 2)
			{
				num = 2;
			}
			lifeRegenCount += lifeRegen;
			while (lifeRegenCount >= 120)
			{
				lifeRegenCount -= 120;
				if (!immortal)
				{
					if (life < lifeMax)
					{
						life++;
					}
					if (life > lifeMax)
					{
						life = lifeMax;
					}
				}
			}
			if (num > 0)
			{
				while (lifeRegenCount <= -120 * num)
				{
					lifeRegenCount += 120 * num;
					int whoAmI = base.whoAmI;
					if (realLife >= 0)
					{
						whoAmI = realLife;
					}
					if (!Main.npc[whoAmI].immortal)
					{
						Main.npc[whoAmI].life -= num;
					}
					CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegenNegative, num, dramatic: false, dot: true);
					if (Main.npc[whoAmI].life > 0 || Main.npc[whoAmI].immortal)
					{
						continue;
					}
					Main.npc[whoAmI].life = 1;
					if (Main.netMode != 1)
					{
						Main.npc[whoAmI].StrikeNPCNoInteraction(9999, 0f, 0);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(28, -1, -1, null, whoAmI, 9999f);
						}
					}
				}
				return;
			}
			while (lifeRegenCount <= -120)
			{
				lifeRegenCount += 120;
				int whoAmI2 = base.whoAmI;
				if (realLife >= 0)
				{
					whoAmI2 = realLife;
				}
				if (!Main.npc[whoAmI2].immortal)
				{
					Main.npc[whoAmI2].life--;
				}
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegenNegative, 1, dramatic: false, dot: true);
				if (Main.npc[whoAmI2].life > 0 || Main.npc[whoAmI2].immortal)
				{
					continue;
				}
				Main.npc[whoAmI2].life = 1;
				if (Main.netMode != 1)
				{
					Main.npc[whoAmI2].StrikeNPCNoInteraction(9999, 0f, 0);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(28, -1, -1, null, whoAmI2, 9999f);
					}
				}
			}
		}

		private void UpdateNPC_BuffClearExpiredBuffs()
		{
			if (Main.netMode == 1)
			{
				return;
			}
			for (int i = 0; i < 5; i++)
			{
				if (buffType[i] > 0 && buffTime[i] <= 0)
				{
					DelBuff(i);
					if (Main.netMode == 2)
					{
						NetMessage.SendData(54, -1, -1, null, whoAmI);
					}
				}
			}
		}

		private void UpdateNPC_BloodMoonTransformations()
		{
			if (Main.netMode == 1 || !Main.bloodMoon)
			{
				return;
			}
			bool flag = false;
			if (value == 0f)
			{
				flag = true;
			}
			if (type == 46 || type == 303 || type == 337 || type == 443 || type == 540)
			{
				if (WorldGen.crimson)
				{
					Transform(464);
				}
				else
				{
					Transform(47);
				}
			}
			else if (type == 55 || type == 230 || type == 592 || type == 593)
			{
				if (WorldGen.crimson)
				{
					Transform(465);
				}
				else
				{
					Transform(57);
				}
			}
			else if (type == 148 || type == 149)
			{
				if (WorldGen.crimson)
				{
					Transform(470);
				}
				else
				{
					Transform(168);
				}
			}
			if (flag)
			{
				value = 0f;
			}
		}

		public void UpdateNPC_BuffSetFlags(bool lowerBuffTime = true)
		{
			for (int i = 0; i < 5; i++)
			{
				if (buffType[i] > 0 && buffTime[i] > 0)
				{
					if (lowerBuffTime)
					{
						buffTime[i]--;
					}
					if (buffType[i] == 20)
					{
						poisoned = true;
					}
					if (buffType[i] == 70)
					{
						venom = true;
					}
					if (buffType[i] == 24)
					{
						onFire = true;
					}
					if (buffType[i] == 72)
					{
						midas = true;
					}
					if (buffType[i] == 69)
					{
						ichor = true;
					}
					if (buffType[i] == 31)
					{
						confused = true;
					}
					if (buffType[i] == 39)
					{
						onFire2 = true;
					}
					if (buffType[i] == 44)
					{
						onFrostBurn = true;
					}
					if (buffType[i] == 103)
					{
						dripping = true;
					}
					if (buffType[i] == 137)
					{
						drippingSlime = true;
					}
					if (buffType[i] == 320)
					{
						drippingSparkleSlime = true;
					}
					if (buffType[i] == 119)
					{
						loveStruck = true;
					}
					if (buffType[i] == 120)
					{
						stinky = true;
					}
					if (buffType[i] == 151)
					{
						soulDrain = true;
					}
					if (buffType[i] == 153)
					{
						shadowFlame = true;
					}
					if (buffType[i] == 165)
					{
						dryadWard = true;
					}
					if (buffType[i] == 169)
					{
						javelined = true;
					}
					if (buffType[i] == 183)
					{
						celled = true;
					}
					if (buffType[i] == 186)
					{
						dryadBane = true;
					}
					if (buffType[i] == 189)
					{
						daybreak = true;
					}
					if (buffType[i] == 203)
					{
						betsysCurse = true;
					}
					if (buffType[i] == 204)
					{
						oiled = true;
					}
					if (buffType[i] == 310)
					{
						markedByScytheWhip = true;
					}
					if (buffType[i] == 313)
					{
						markedByFireWhip = true;
					}
					if (buffType[i] == 309)
					{
						markedBySwordWhip = true;
					}
					if (buffType[i] == 315)
					{
						markedByThornWhip = true;
					}
					if (buffType[i] == 307)
					{
						markedByBlandWhip = true;
					}
					if (buffType[i] == 319)
					{
						markedByMaceWhip = true;
					}
					if (buffType[i] == 316)
					{
						markedByRainbowWhip = true;
					}
				}
			}
		}

		private void UpdateNPC_BuffFlagsReset()
		{
			lifeRegen = 0;
			soulDrain = false;
			poisoned = false;
			venom = false;
			shadowFlame = false;
			onFire = false;
			midas = false;
			ichor = false;
			onFrostBurn = false;
			onFire2 = false;
			confused = false;
			loveStruck = false;
			dryadWard = false;
			stinky = false;
			dripping = false;
			drippingSlime = false;
			drippingSparkleSlime = false;
			daybreak = false;
			javelined = false;
			celled = false;
			dryadBane = false;
			betsysCurse = false;
			oiled = false;
			markedByScytheWhip = false;
			markedByThornWhip = false;
			markedByFireWhip = false;
			markedByRainbowWhip = false;
			markedByBlandWhip = false;
			markedBySwordWhip = false;
			markedByMaceWhip = false;
			lifeRegenExpectedLossPerSecond = -1;
		}

		private void UpdateNPC_TeleportVisuals()
		{
			if (!(teleportTime > 0f))
			{
				return;
			}
			if (teleportStyle == 0)
			{
				if ((float)Main.rand.Next(100) <= 100f * teleportTime * 2f)
				{
					int num = Dust.NewDust(new Vector2(getRect().X, getRect().Y), getRect().Width, getRect().Height, 159);
					Main.dust[num].scale = teleportTime * 1.5f;
					Main.dust[num].noGravity = true;
					Main.dust[num].velocity *= 1.1f;
				}
			}
			else if (teleportStyle == 4)
			{
				teleportTime -= 0.02f;
				if ((float)Main.rand.Next(100) <= 100f * teleportTime)
				{
					Dust obj = Main.dust[Dust.NewDust(position, width, height, 263)];
					obj.color = PortalHelper.GetPortalColor(lastPortalColorIndex);
					obj.noLight = true;
					obj.noGravity = true;
					obj.scale = 1.2f;
					obj.fadeIn = 0.4f;
				}
			}
			teleportTime -= 0.005f;
		}

		private void UpdateNPC_CritterSounds()
		{
			if (Main.netMode == 2)
			{
				return;
			}
			if (type == 611 && !Main.dayTime && Main.rand.Next(700) == 0)
			{
				SoundEngine.PlaySound(46, (int)position.X, (int)position.Y);
			}
			if (type >= 602 && type <= 603 && Main.dayTime && Main.rand.Next(1200) == 0)
			{
				SoundEngine.PlaySound(44, (int)position.X, (int)position.Y);
			}
			if (type >= 362 && type <= 365)
			{
				if (Main.dayTime && Main.rand.Next(200) == 0)
				{
					SoundEngine.PlaySound(30, (int)position.X, (int)position.Y);
				}
			}
			else if (type == 361 || type == 445)
			{
				if ((double)Math.Abs(velocity.X) < 0.5 && (!Main.dayTime || (double)position.Y > Main.worldSurface * 16.0) && Main.rand.Next(200) == 0)
				{
					SoundEngine.PlaySound(31, (int)position.X, (int)position.Y);
				}
			}
			else if (type == 74 || type == 297 || type == 298 || type == 442)
			{
				if (!Main.dayTime || !(Main.time < 18000.0) || Main.rand.Next(400) != 0)
				{
					return;
				}
				if (type == 74)
				{
					if (Main.rand.Next(3) != 0)
					{
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 14);
					}
					else
					{
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 18);
					}
				}
				if (type == 297)
				{
					SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 16);
				}
				if (type == 298)
				{
					if (Main.rand.Next(3) != 0)
					{
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 17);
					}
					else
					{
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 19);
					}
				}
				if (type == 442)
				{
					switch (Main.rand.Next(5))
					{
					case 0:
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 16);
						break;
					case 1:
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 17);
						break;
					case 2:
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 19);
						break;
					case 3:
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 14);
						break;
					default:
						SoundEngine.PlaySound(32, (int)position.X, (int)position.Y, 18);
						break;
					}
				}
			}
			else if ((type == 300 || type == 447 || type == 610) && Main.rand.Next(1800) == 0)
			{
				SoundEngine.PlaySound(33, (int)position.X, (int)position.Y);
			}
		}

		private void UpdateNPC_CastLights()
		{
			if ((type >= 442 && type <= 448) || type == 539 || type == 592 || type == 593 || type == 601 || type == 605 || type == 627)
			{
				position += netOffset;
				Color color = Lighting.GetColor((int)base.Center.X / 16, (int)base.Center.Y / 16);
				if (color.R > 20 || color.B > 20 || color.G > 20)
				{
					int num = color.R;
					if (color.G > num)
					{
						num = color.G;
					}
					if (color.B > num)
					{
						num = color.B;
					}
					num /= 30;
					if (Main.rand.Next(300) < num)
					{
						int num2 = Dust.NewDust(position, width, height, 43, 0f, 0f, 254, new Color(255, 255, 0), 0.5f);
						Main.dust[num2].velocity *= 0f;
					}
				}
				position -= netOffset;
			}
			if ((type >= 254 && type <= 261) || type == 160 || type == 634 || type == 635)
			{
				float num3 = (float)Main.rand.Next(28, 42) * 0.005f;
				num3 += (float)(270 - Main.mouseTextColor) / 500f;
				float num4 = 0.1f;
				float num5 = 0.3f + num3 / 2f;
				float num6 = 0.6f + num3;
				float num7 = 0.35f;
				if (type == 634)
				{
					num7 = 0.65f;
				}
				num4 *= num7;
				num5 *= num7;
				num6 *= num7;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num4, num5, num6);
			}
			if (type == 209)
			{
				float num8 = (float)Main.rand.Next(28, 42) * 0.005f;
				num8 += (float)(270 - Main.mouseTextColor) / 500f;
				float num9 = 0.1f;
				float num10 = 0.3f + num8 / 2f;
				float num11 = 0.4f + num8 / 2f;
				float num12 = 0.35f;
				num9 *= num12;
				num10 *= num12;
				num11 *= num12;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num9, num10, num11);
				if (ai[0] == 12f)
				{
					Lighting.AddLight(base.Top, 0.3f, 0.1f, 0.1f);
				}
			}
			if (type == 44)
			{
				Lighting.AddLight((int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + 4f) / 16, 0.9f, 0.75f, 0.5f);
			}
		}

		private void GetHurtByOtherNPCs(bool[] acceptableNPCIDs)
		{
			if (dontTakeDamageFromHostiles)
			{
				return;
			}
			int specialHitSetter = 1;
			float damageMultiplier = 1f;
			if (immune[255] != 0)
			{
				return;
			}
			Rectangle hitbox = base.Hitbox;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (acceptableNPCIDs[nPC.type] && nPC.active && !nPC.friendly && nPC.damage > 0)
				{
					Rectangle npcRect = nPC.Hitbox;
					GetMeleeCollisionData(hitbox, i, specialHitSetter, damageMultiplier, npcRect);
					if (hitbox.Intersects(npcRect) && (type != 453 || !NPCID.Sets.Skeletons[nPC.type]) && nPC.type != 624)
					{
						BeHurtByOtherNPC(i, nPC);
					}
				}
			}
		}

		private void BeHurtByOtherNPC(int npcIndex, NPC thatNPC)
		{
			int num = 30;
			if (type == 548)
			{
				num = 20;
			}
			int num2 = Main.DamageVar(thatNPC.damage);
			int num3 = 6;
			int num4 = ((!(thatNPC.Center.X > base.Center.X)) ? 1 : (-1));
			double num5 = StrikeNPCNoInteraction(num2, num3, num4);
			if (Main.netMode != 0)
			{
				NetMessage.SendData(28, -1, -1, null, whoAmI, num2, num3, num4);
			}
			netUpdate = true;
			immune[255] = num;
			if (dryadWard)
			{
				num2 = (int)num5 / 3;
				num3 = 6;
				num4 *= -1;
				thatNPC.StrikeNPCNoInteraction(num2, num3, num4);
				if (Main.netMode != 0)
				{
					NetMessage.SendData(28, -1, -1, null, npcIndex, num2, num3, num4);
				}
				thatNPC.netUpdate = true;
				thatNPC.immune[255] = num;
			}
			if (NPCID.Sets.HurtingBees[thatNPC.type])
			{
				num2 = damage;
				num3 = 6;
				num4 *= -1;
				thatNPC.StrikeNPCNoInteraction(num2, num3, num4);
				if (Main.netMode != 0)
				{
					NetMessage.SendData(28, -1, -1, null, npcIndex, num2, num3, num4);
				}
				thatNPC.netUpdate = true;
				thatNPC.immune[255] = num;
			}
		}

		private void CheckLifeRegen()
		{
			if (life < lifeMax)
			{
				friendlyRegen++;
				if (dryadWard)
				{
					friendlyRegen += 10;
				}
				if (friendlyRegen > 180)
				{
					friendlyRegen = 0;
					life++;
					netUpdate = true;
				}
			}
		}

		public void GetImmuneTime(int fromWho, int time)
		{
			if (fromWho == -1)
			{
				for (int i = 0; i < immune.Length; i++)
				{
					immune[i] = time;
				}
			}
			else if (fromWho >= 0 && fromWho < immune.Length)
			{
				immune[fromWho] = time;
			}
		}

		private void UpdateCollision()
		{
			Collision_WalkDownSlopes();
			bool lava = Collision_LavaCollision();
			lava = Collision_WaterCollision(lava);
			if (!wet)
			{
				lavaWet = false;
				honeyWet = false;
			}
			if (wetCount > 0)
			{
				wetCount--;
			}
			bool fall = Collision_DecideFallThroughPlatforms();
			oldVelocity = base.velocity;
			collideX = false;
			collideY = false;
			FishTransformationDuringRain();
			GetTileCollisionParameters(out var cPosition, out var cWidth, out var cHeight);
			Vector2 velocity = base.velocity;
			ApplyTileCollision(fall, cPosition, cWidth, cHeight);
			if (wet)
			{
				if (honeyWet)
				{
					Collision_MoveWhileWet(velocity, honeyMovementSpeed);
				}
				else if (lavaWet)
				{
					Collision_MoveWhileWet(velocity, lavaMovementSpeed);
				}
				else
				{
					Collision_MoveWhileWet(velocity, waterMovementSpeed);
				}
			}
			else
			{
				Collision_MoveWhileDry();
			}
			if (aiStyle == 67)
			{
				Collision_MoveSnailOnSlopes();
			}
			else if (type != 72 && type != 247 && type != 248 && (type < 542 || type > 545) && (!NPCID.Sets.BelongsToInvasionOldOnesArmy[type] || !noGravity))
			{
				Collision_MoveSlopesAndStairFall(fall);
				if (townNPC)
				{
					Collision.StepConveyorBelt(this, 1f);
				}
			}
		}

		private void Collision_MoveWhileDry()
		{
			if (Collision.up)
			{
				velocity.Y = 0.01f;
			}
			if (oldVelocity.X != velocity.X)
			{
				collideX = true;
			}
			if (oldVelocity.Y != velocity.Y)
			{
				collideY = true;
			}
			oldPosition = position;
			oldDirection = direction;
			position += velocity;
		}

		private void ApplyTileCollision(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			if (type == 72)
			{
				Collision_MoveBlazingWheel();
			}
			else if (type >= 542 && type <= 545)
			{
				Collision_MoveSandshark(fall, cPosition, cWidth, cHeight);
			}
			else if (type == 405 || type == 406)
			{
				Collision_MoveStardustCell(fall, cPosition, cWidth, cHeight);
			}
			else if (type == 417)
			{
				Collision_MoveSolarSroller(fall, cPosition, cWidth, cHeight);
			}
			else
			{
				Collision_MoveNormal(fall, cPosition, cWidth, cHeight);
			}
		}

		private void Collision_MoveSlopesAndStairFall(bool fall)
		{
			if (fall)
			{
				stairFall = true;
			}
			if (aiStyle == 7)
			{
				int num = (int)base.Center.X / 16;
				int num2 = (int)position.Y / 16;
				if (WorldGen.InWorld(num, num2))
				{
					int num3 = 16;
					bool flag = false;
					if (Main.tile[num, num2] != null && Main.tile[num, num2].active() && Main.tileSolid[Main.tile[num, num2].type])
					{
						flag = true;
					}
					if (!townNPC)
					{
						flag = false;
					}
					if (!Main.dayTime || Main.eclipse)
					{
						flag = true;
					}
					else
					{
						int num4 = (int)(position.Y + (float)height) / 16;
						if (homeTileY - num4 > num3)
						{
							flag = true;
						}
					}
					if (flag)
					{
						if ((position.Y + (float)height - 8f) / 16f < (float)homeTileY)
						{
							stairFall = true;
						}
						else
						{
							stairFall = false;
						}
					}
				}
			}
			GetTileCollisionParameters(out var cPosition, out var cWidth, out var cHeight);
			Vector2 vector = position - cPosition;
			Vector4 vector2 = Collision.SlopeCollision(cPosition, velocity, cWidth, cHeight, gravity, stairFall);
			if (Collision.stairFall)
			{
				stairFall = true;
			}
			else if (!fall)
			{
				stairFall = false;
			}
			if (Collision.stair && Math.Abs(vector2.Y - position.Y) > 8f)
			{
				gfxOffY -= vector2.Y - position.Y;
				stepSpeed = 2f;
			}
			position.X = vector2.X;
			position.Y = vector2.Y;
			velocity.X = vector2.Z;
			velocity.Y = vector2.W;
			position += vector;
		}

		private void Collision_MoveSnailOnSlopes()
		{
			Vector4 vector = Collision.SlopeCollision(position, velocity, width, height, gravity);
			if (position.X != vector.X || position.Y != vector.Y)
			{
				if (ai[2] == 0f && velocity.Y > 0f && ((direction < 0 && rotation == 1.57f && spriteDirection == 1) || (direction > 0 && rotation == 4.71f && spriteDirection == -1)))
				{
					direction *= -direction;
				}
				ai[2] = 2f;
				directionY = 1;
				rotation = 0f;
			}
			position.X = vector.X;
			position.Y = vector.Y;
			velocity.X = vector.Z;
			velocity.Y = vector.W;
		}

		private void Collision_MoveNormal(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			velocity = Collision.TileCollision(cPosition, velocity, cWidth, cHeight, fall, fall);
		}

		private void Collision_MoveSandshark(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			velocity = Collision.AdvancedTileCollision(TileID.Sets.ForAdvancedCollision.ForSandshark, cPosition, velocity, cWidth, cHeight, fall, fall);
		}

		private void Collision_MoveSolarSroller(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			velocity = Collision.TileCollision(cPosition, velocity, cWidth, cHeight, fall, fall);
			if (ai[0] != 6f || !(velocity != oldVelocity))
			{
				return;
			}
			ai[2] -= 1f;
			ai[3] = 1f;
			if (ai[2] > 0f)
			{
				if (velocity.X != 0f && velocity.X != oldVelocity.X)
				{
					velocity.X = (0f - oldVelocity.X) * 0.9f;
					direction *= -1;
				}
				if (velocity.Y != 0f && velocity.Y != oldVelocity.Y)
				{
					velocity.Y = (0f - oldVelocity.Y) * 0.9f;
				}
			}
		}

		private void Collision_MoveStardustCell(bool fall, Vector2 cPosition, int cWidth, int cHeight)
		{
			velocity = Collision.TileCollision(cPosition, velocity, cWidth, cHeight, fall, fall);
			if (velocity != oldVelocity)
			{
				if (velocity.X != 0f && velocity.X != oldVelocity.X)
				{
					velocity.X = (0f - oldVelocity.X) * 0.8f;
				}
				if (velocity.Y != 0f && velocity.Y != oldVelocity.Y)
				{
					velocity.Y = (0f - oldVelocity.Y) * 0.8f;
				}
			}
		}

		private void Collision_MoveBlazingWheel()
		{
			Vector2 position = new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2));
			int num = 12;
			int num2 = 12;
			position.X -= num / 2;
			position.Y -= num2 / 2;
			velocity = Collision.noSlopeCollision(position, velocity, num, num2, fallThrough: true, fall2: true);
		}

		private void Collision_MoveWhileWet(Vector2 oldDryVelocity, float Slowdown = 0.5f)
		{
			if (Collision.up)
			{
				velocity.Y = 0.01f;
			}
			Vector2 vector = velocity * Slowdown;
			if (velocity.X != oldDryVelocity.X)
			{
				vector.X = velocity.X;
				collideX = true;
			}
			if (velocity.Y != oldDryVelocity.Y)
			{
				vector.Y = velocity.Y;
				collideY = true;
			}
			oldPosition = position;
			oldDirection = direction;
			position += vector;
		}

		public void GetTileCollisionParameters(out Vector2 cPosition, out int cWidth, out int cHeight)
		{
			cPosition = position;
			cWidth = width;
			cHeight = height;
			if (type == 594)
			{
				int num = (int)(44f + 20f * ai[1]);
				cPosition.Y += num;
				cHeight += num;
				cPosition.X += cWidth / 2;
				cWidth = (int)(6f + 26f * ai[1]);
				cPosition.X -= cWidth / 2;
			}
			if (type == 243)
			{
				cHeight = 90;
			}
			if (type == 290)
			{
				cHeight = 40;
			}
			if (type == 351)
			{
				cHeight = 40;
			}
			if (type == 482)
			{
				cHeight = 40;
			}
			if (type == 351 || type == 343 || type == 348 || type == 349)
			{
				cHeight = 40;
			}
			if (type == 391)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].active && Main.npc[i].type == 390 && Main.npc[i].ai[0] == (float)whoAmI)
					{
						cHeight = 62;
						break;
					}
				}
			}
			if (type == 415)
			{
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].active && Main.npc[j].type == 416 && Main.npc[j].ai[0] == (float)whoAmI)
					{
						cHeight = 62;
						break;
					}
				}
			}
			if (type == 576 || type == 577)
			{
				cPosition.X += 32f;
				cWidth -= 64;
			}
			if (cHeight != height)
			{
				cPosition.Y += height - cHeight;
			}
		}

		private void FishTransformationDuringRain()
		{
			if (Main.netMode == 1)
			{
				return;
			}
			if (type == 230 && wet)
			{
				int direction = base.direction;
				Vector2 velocity = base.velocity;
				Transform(55);
				base.direction = direction;
				base.velocity = velocity;
				wet = true;
				if (base.velocity.Y < 0f)
				{
					base.velocity.Y = 0f;
				}
			}
			else if (type == 55 && !wet && Main.raining)
			{
				int direction2 = base.direction;
				Vector2 velocity2 = base.velocity;
				Transform(230);
				base.direction = direction2;
				base.velocity = velocity2;
				homeTileX = (int)(position.X / 16f) + 10 * base.direction;
			}
			else if (type == 593 && wet)
			{
				int direction3 = base.direction;
				Vector2 velocity3 = base.velocity;
				Transform(592);
				base.direction = direction3;
				base.velocity = velocity3;
				wet = true;
				if (base.velocity.Y < 0f)
				{
					base.velocity.Y = 0f;
				}
			}
			else if (type == 592 && !wet && Main.raining)
			{
				int direction4 = base.direction;
				Vector2 velocity4 = base.velocity;
				Transform(593);
				base.direction = direction4;
				base.velocity = velocity4;
				homeTileX = (int)(position.X / 16f) + 10 * base.direction;
			}
		}

		private bool Collision_DecideFallThroughPlatforms()
		{
			bool result = false;
			if (type == 2 || type == -43 || type == 190 || type == 191 || type == 192 || type == 193 || type == 194 || type == 317 || type == 318 || type == 133)
			{
				result = true;
			}
			if (aiStyle == 10)
			{
				result = true;
			}
			if (aiStyle == 5)
			{
				result = true;
			}
			if (aiStyle == 40)
			{
				result = true;
			}
			if (aiStyle == 44)
			{
				result = true;
			}
			if (type == 467)
			{
				result = true;
			}
			if (type == 477)
			{
				result = true;
			}
			if (aiStyle == 14)
			{
				result = true;
			}
			if (type == 173)
			{
				result = true;
			}
			if (type == 469 && ai[2] == 1f)
			{
				result = true;
			}
			if (aiStyle == 3 && directionY == 1)
			{
				result = true;
			}
			if (type == 210 || type == 211)
			{
				result = true;
			}
			if (type == 50 && target >= 0 && Main.player[target].position.Y > position.Y + (float)height)
			{
				result = true;
			}
			if (type == 657 && target >= 0 && Main.player[target].position.Y > base.Bottom.Y)
			{
				result = true;
			}
			if (type == 247 || type == 248)
			{
				result = true;
			}
			if (type == 245 && target >= 0 && Main.player[target].position.Y > position.Y + (float)height)
			{
				result = true;
			}
			if (type >= 542 && type <= 545)
			{
				result = true;
			}
			if (aiStyle == 107 && directionY == 1)
			{
				result = true;
			}
			if (type == 418)
			{
				result = true;
			}
			if (aiStyle == 87 && Main.player[target].position.Y > position.Y + (float)height)
			{
				result = true;
			}
			if (type == 405 || type == 406)
			{
				result = true;
			}
			if (type == 490)
			{
				result = true;
			}
			if (type == 301)
			{
				result = true;
			}
			if (aiStyle == 7)
			{
				int num = 16;
				bool flag = false;
				if (townNPC && (!Main.dayTime || Main.invasionType > 0 || Main.eclipse))
				{
					flag = true;
				}
				else
				{
					int num2 = (int)(position.Y + (float)height) / 16;
					if (homeTileY - num2 > num)
					{
						result = true;
					}
				}
				if (flag && (position.Y + (float)height - 8f) / 16f < (float)(homeTileY - 1))
				{
					result = true;
				}
			}
			return result;
		}

		private bool Collision_WaterCollision(bool lava)
		{
			bool flag = false;
			if (type == 72 || aiStyle == 21 || aiStyle == 67 || type == 376 || type == 579 || type == 541)
			{
				flag = false;
				wetCount = 0;
				lava = false;
			}
			else
			{
				flag = Collision.WetCollision(position, width, height);
				if (Collision.honey)
				{
					honeyWet = true;
				}
			}
			if (aiStyle == 116)
			{
				wetCount = 10;
			}
			if (flag)
			{
				if (onFire && !lavaWet && Main.netMode != 1)
				{
					for (int i = 0; i < 5; i++)
					{
						if (buffType[i] == 24)
						{
							DelBuff(i);
						}
					}
				}
				if (!wet && wetCount == 0)
				{
					wetCount = 10;
					if (!lava)
					{
						if (honeyWet)
						{
							for (int j = 0; j < 10; j++)
							{
								int num = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
								Main.dust[num].velocity.Y -= 1f;
								Main.dust[num].velocity.X *= 2.5f;
								Main.dust[num].scale = 1.3f;
								Main.dust[num].alpha = 100;
								Main.dust[num].noGravity = true;
							}
							if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
							{
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
						else if (type != 617 && type != 616 && type != 625)
						{
							for (int k = 0; k < 30; k++)
							{
								int num2 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, Dust.dustWater());
								Main.dust[num2].velocity.Y -= 4f;
								Main.dust[num2].velocity.X *= 2.5f;
								Main.dust[num2].scale *= 0.8f;
								Main.dust[num2].alpha = 100;
								Main.dust[num2].noGravity = true;
							}
							if ((type != 376 && type != 579 && aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity) || type == 615)
							{
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
							}
						}
					}
					else
					{
						for (int l = 0; l < 10; l++)
						{
							int num3 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
							Main.dust[num3].velocity.Y -= 1.5f;
							Main.dust[num3].velocity.X *= 2.5f;
							Main.dust[num3].scale = 1.3f;
							Main.dust[num3].alpha = 100;
							Main.dust[num3].noGravity = true;
						}
						if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
						{
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
					}
				}
				wet = true;
			}
			else if (wet)
			{
				velocity.X *= 0.5f;
				wet = false;
				if (type == 620 && GetTargetData().Center.Y < base.Center.Y)
				{
					velocity.Y -= 8f;
				}
				if (wetCount == 0)
				{
					wetCount = 10;
					if (!lavaWet)
					{
						if (honeyWet)
						{
							for (int m = 0; m < 10; m++)
							{
								int num4 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
								Main.dust[num4].velocity.Y -= 1f;
								Main.dust[num4].velocity.X *= 2.5f;
								Main.dust[num4].scale = 1.3f;
								Main.dust[num4].alpha = 100;
								Main.dust[num4].noGravity = true;
							}
							if (aiStyle != 1 && type != 1 && type != 16 && type != 147 && type != 300 && type != 59 && aiStyle != 39 && !noGravity)
							{
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
						else if (type != 617 && type != 616 && type != 625)
						{
							for (int n = 0; n < 30; n++)
							{
								int num5 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, Dust.dustWater());
								Main.dust[num5].velocity.Y -= 4f;
								Main.dust[num5].velocity.X *= 2.5f;
								Main.dust[num5].scale *= 0.8f;
								Main.dust[num5].alpha = 100;
								Main.dust[num5].noGravity = true;
							}
							if ((type != 376 && type != 579 && aiStyle != 1 && type != 1 && type != 16 && type != 59 && type != 300 && aiStyle != 39 && aiStyle != 68 && type != 362 && type != 364 && type != 361 && type != 445 && !noGravity) || type == 615)
							{
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
							}
						}
					}
					else
					{
						for (int num6 = 0; num6 < 10; num6++)
						{
							int num7 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
							Main.dust[num7].velocity.Y -= 1.5f;
							Main.dust[num7].velocity.X *= 2.5f;
							Main.dust[num7].scale = 1.3f;
							Main.dust[num7].alpha = 100;
							Main.dust[num7].noGravity = true;
						}
						if (aiStyle != 1 && type != 1 && type != 16 && type != 59 && type != 300 && aiStyle != 39 && !noGravity)
						{
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
					}
				}
			}
			return lava;
		}

		private bool Collision_LavaCollision()
		{
			bool num = Collision.LavaCollision(position, width, height);
			if (num)
			{
				lavaWet = true;
				if (!lavaImmune && !dontTakeDamage && Main.netMode != 1 && immune[255] == 0)
				{
					AddBuff(24, 420);
					immune[255] = 30;
					StrikeNPCNoInteraction(50, 0f, 0);
					if (Main.netMode == 2 && Main.netMode != 0)
					{
						NetMessage.SendData(28, -1, -1, null, whoAmI, 50f);
					}
				}
			}
			return num;
		}

		private void Collision_WalkDownSlopes()
		{
			_ = velocity;
			Vector4 vector = Collision.WalkDownSlope(position, velocity, width, height, gravity);
			position.X = vector.X;
			position.Y = vector.Y;
			velocity.X = vector.Z;
			velocity.Y = vector.W;
		}

		public static void setFireFlyChance()
		{
			if (Main.rand == null)
			{
				Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
			}
			if (WorldGen.genRand.Next(9) == 0)
			{
				fireFlyChance = Main.rand.Next(5, 10);
				fireFlyFriendly = Main.rand.Next(1, 4);
				fireFlyMultiple = Main.rand.Next(3, 8);
			}
			else if (WorldGen.genRand.Next(3) == 0)
			{
				fireFlyChance = 999999;
				fireFlyFriendly = 999999;
				fireFlyMultiple = 999999;
			}
			else
			{
				fireFlyChance = Main.rand.Next(10, 60);
				fireFlyFriendly = Main.rand.Next(2, 15);
				fireFlyMultiple = Main.rand.Next(6, 30);
			}
			butterflyChance = Main.rand.Next(1, 25);
			if (WorldGen.genRand.Next(4) == 0)
			{
				butterflyChance = 999999;
			}
		}

		public Color GetBestiaryEntryColor()
		{
			return Color.White;
		}

		public Color GetAlpha(Color newColor)
		{
			if (IsABestiaryIconDummy)
			{
				newColor = Color.White;
			}
			float num = (float)(255 - alpha) / 255f;
			int num2 = (int)((float)(int)newColor.R * num);
			int num3 = (int)((float)(int)newColor.G * num);
			int num4 = (int)((float)(int)newColor.B * num);
			int num5 = newColor.A - alpha;
			if (type == 402)
			{
				return new Color(255, 255, 255, 255);
			}
			if (type == 484)
			{
				return new Color(250, 250, 250, 200);
			}
			if (type >= 542 && type <= 545 && num2 + num3 + num4 > 10 && num2 + num3 + num4 >= 60)
			{
				num2 *= 2;
				num3 *= 2;
				num4 *= 2;
				if (num2 > 255)
				{
					num2 = 255;
				}
				if (num3 > 255)
				{
					num3 = 255;
				}
				if (num4 > 255)
				{
					num4 = 255;
				}
			}
			if (type == 662)
			{
				Color color = Color.Lerp(Color.White, Color.Cyan, 0.5f);
				color.A /= 4;
				return color * Opacity;
			}
			if ((type >= 454 && type <= 459) || type == 521)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.4f);
				newColor.A = 150;
				newColor *= (float)num5 / 255f;
				return newColor;
			}
			if (type == 636)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.25f);
				return newColor * Opacity;
			}
			if (type == 440)
			{
				byte b = 180;
				if (Main.expertMode)
				{
					b = 210;
				}
				b = (byte)((float)(int)b * num);
				return new Color(b, b, b, b);
			}
			if (type == 583 || type == 584 || type == 585)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.5f);
				return newColor;
			}
			if (type == 516)
			{
				return new Color(alpha, alpha, alpha, alpha);
			}
			if (type == 522)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 523)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 395 || type == 519)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.4f);
				return newColor;
			}
			if (type == 370 && ai[0] != -1f && ai[0] < 9f)
			{
				float num6 = MathHelper.Lerp(num, 1f, 0.25f);
				if (num6 > 1f)
				{
					num6 = 1f;
				}
				num4 = (int)((float)(int)newColor.B * num6);
			}
			if (type == 30)
			{
				return new Color(250, 250, 250, 100);
			}
			if (!IsABestiaryIconDummy && (type == 25 || type == 30 || type == 59 || type == 60))
			{
				return new Color(200, 200, 200, 0);
			}
			if (type == 360)
			{
				num2 = newColor.R;
				num3 = newColor.G;
				num4 = newColor.B;
				if (num2 < 75)
				{
					num2 = 75;
				}
				if (num3 < 175)
				{
					num3 = 175;
				}
				if (num4 < 255)
				{
					num4 = 255;
				}
				return new Color(num2, num3, num4, 255);
			}
			if (type == 655)
			{
				num2 = newColor.R;
				num3 = newColor.G;
				num4 = newColor.B;
				if (num2 < 255)
				{
					num2 = 255;
				}
				if (num3 < 100)
				{
					num3 = 100;
				}
				if (num4 < 50)
				{
					num4 = 50;
				}
				return new Color(num2, num3, num4, 255);
			}
			if (type == 352)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 72)
			{
				num2 = newColor.R;
				num3 = newColor.G;
				num4 = newColor.B;
			}
			else
			{
				if (type == 288)
				{
					return new Color(200, 200, 200, 0);
				}
				if (type == 289)
				{
					return new Color(250, 250, 250, 50);
				}
				if (type >= 254 && type <= 261)
				{
					num4 = 255;
					if (num2 < 100)
					{
						num2 = 100;
					}
					if (num3 < 150)
					{
						num3 = 150;
					}
				}
				else if (type == 374 || type == 634 || type == 635)
				{
					num4 = 255;
					if (num2 < 100)
					{
						num2 = 100;
					}
					if (num3 < 150)
					{
						num3 = 150;
					}
				}
				else
				{
					if (type == 549)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.4f);
						newColor *= (float)num5 / 255f;
						return newColor;
					}
					if (type == 64 || type == 63 || type == 75 || type == 103 || type == 400)
					{
						num2 = (int)((double)(int)newColor.R * 1.5);
						num3 = (int)((double)(int)newColor.G * 1.5);
						num4 = (int)((double)(int)newColor.B * 1.5);
						if (num2 > 255)
						{
							num2 = 255;
						}
						if (num3 > 255)
						{
							num3 = 255;
						}
						if (num4 > 255)
						{
							num4 = 255;
						}
					}
				}
			}
			if (num5 < 0)
			{
				num5 = 0;
			}
			if (num5 > 255)
			{
				num5 = 255;
			}
			return new Color(num2, num3, num4, num5);
		}

		public Color GetColor(Color newColor)
		{
			if (IsABestiaryIconDummy)
			{
				newColor = GetBestiaryEntryColor();
			}
			int num = color.R - (255 - newColor.R);
			int num2 = color.G - (255 - newColor.G);
			int num3 = color.B - (255 - newColor.B);
			int num4 = color.A - (255 - newColor.A);
			if (num < 0)
			{
				num = 0;
			}
			if (num > 255)
			{
				num = 255;
			}
			if (num2 < 0)
			{
				num2 = 0;
			}
			if (num2 > 255)
			{
				num2 = 255;
			}
			if (num3 < 0)
			{
				num3 = 0;
			}
			if (num3 > 255)
			{
				num3 = 255;
			}
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num4 > 255)
			{
				num4 = 255;
			}
			return new Color(num, num2, num3, num4);
		}

		public bool ShouldBestiaryGirlBeLycantrope()
		{
			if (!Main.bloodMoon || Main.dayTime)
			{
				if (Main.moonPhase == 0)
				{
					return !Main.dayTime;
				}
				return false;
			}
			return true;
		}

		public string GetChat()
		{
			Recipe.FindRecipes();
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			bool flag17 = false;
			object obj = Lang.CreateDialogSubstitutionObject(this);
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					if (Main.npc[i].type == 17)
					{
						flag = true;
					}
					else if (Main.npc[i].type == 18)
					{
						flag2 = true;
					}
					else if (Main.npc[i].type == 19)
					{
						flag3 = true;
					}
					else if (Main.npc[i].type == 20)
					{
						flag4 = true;
					}
					else if (Main.npc[i].type == 37)
					{
						flag5 = true;
					}
					else if (Main.npc[i].type == 38)
					{
						flag6 = true;
					}
					else if (Main.npc[i].type == 124)
					{
						flag7 = true;
					}
					else if (Main.npc[i].type == 107)
					{
						flag8 = true;
					}
					else if (Main.npc[i].type == 54)
					{
						flag9 = true;
					}
					else if (Main.npc[i].type == 160)
					{
						flag10 = true;
					}
					else if (Main.npc[i].type == 178)
					{
						flag11 = true;
					}
					else if (Main.npc[i].type == 229)
					{
						flag12 = true;
					}
					else if (Main.npc[i].type == 209)
					{
						flag13 = true;
					}
					else if (Main.npc[i].type == 208)
					{
						flag14 = true;
					}
					else if (Main.npc[i].type == 353)
					{
						flag15 = true;
					}
					else if (Main.npc[i].type == 22)
					{
						flag16 = true;
					}
					else if (Main.npc[i].type == 441)
					{
						flag17 = true;
					}
				}
			}
			string result = "";
			string specialEventText = "";
			if (type == 17)
			{
				result = (HasSpecialEventText("Merchant", out specialEventText) ? specialEventText : ((!downedBoss1 && Main.rand.Next(3) == 0) ? ((Main.player[Main.myPlayer].statLifeMax < 200) ? Lang.dialog(1) : ((Main.player[Main.myPlayer].statDefense > 10) ? Lang.dialog(3) : Lang.dialog(2))) : (Main.dayTime ? ((Main.time < 16200.0) ? (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(4), 
					1 => Lang.dialog(5), 
					_ => Lang.dialog(6), 
				}) : ((Main.time > 37800.0) ? (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(7), 
					1 => Lang.dialog(8), 
					_ => Lang.dialog(9), 
				}) : (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(10), 
					1 => Lang.dialog(11), 
					_ => Lang.dialog(12), 
				}))) : (Main.bloodMoon ? ((flag2 && flag7 && Main.rand.Next(3) == 0) ? Lang.dialog(13) : (Main.rand.Next(4) switch
				{
					0 => Lang.dialog(14), 
					1 => Lang.dialog(15), 
					2 => Lang.dialog(16), 
					_ => Lang.dialog(17), 
				})) : ((Main.time < 9720.0) ? ((Main.rand.Next(2) != 0) ? Lang.dialog(19) : Lang.dialog(18)) : ((Main.time > 22680.0) ? ((Main.rand.Next(2) != 0) ? Lang.dialog(21) : Lang.dialog(20)) : (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(22), 
					1 => Lang.dialog(23), 
					_ => Lang.dialog(24), 
				})))))));
			}
			else if (type == 18)
			{
				if (HasSpecialEventText("Nurse", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.bloodMoon)
				{
					result = (((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.66) ? (Main.rand.Next(3) switch
					{
						0 => Lang.dialog(25), 
						1 => Lang.dialog(26), 
						_ => Lang.dialog(27), 
					}) : (Main.rand.Next(4) switch
					{
						0 => Lang.dialog(28), 
						1 => Lang.dialog(29), 
						2 => Lang.dialog(30), 
						_ => Lang.dialog(31), 
					}));
				}
				else if (Main.rand.Next(3) == 0 && !downedBoss3)
				{
					result = Lang.dialog(32);
				}
				else if (flag6 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(33);
				}
				else if (flag3 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(34);
				}
				else if (flag16 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(35);
				}
				else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.33)
				{
					result = Main.rand.Next(5) switch
					{
						0 => Lang.dialog(36), 
						1 => Lang.dialog(37), 
						2 => Lang.dialog(38), 
						3 => Lang.dialog(39), 
						_ => Lang.dialog(40), 
					};
				}
				else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.66)
				{
					result = Main.rand.Next(7) switch
					{
						0 => Lang.dialog(41), 
						1 => Lang.dialog(42), 
						2 => Lang.dialog(43), 
						3 => Lang.dialog(44), 
						4 => Lang.dialog(45), 
						5 => Lang.dialog(46), 
						_ => Lang.dialog(47), 
					};
				}
				else
				{
					LocalizedText[] array = Language.FindAll(Lang.CreateDialogFilter("NurseChatter.", obj));
					int num = Main.rand.Next(4 + array.Length);
					result = ((num >= 4) ? array[num - 4].FormatWith(obj) : (num switch
					{
						0 => Lang.dialog(48), 
						1 => Lang.dialog(49), 
						2 => Lang.dialog(50), 
						_ => Lang.dialog(51), 
					}));
				}
			}
			else if (type == 19)
			{
				result = (HasSpecialEventText("ArmsDealer", out specialEventText) ? specialEventText : ((flag16 && downedBoss3 && !Main.hardMode) ? Lang.dialog(58) : ((flag2 && Main.rand.Next(5) == 0) ? Lang.dialog(59) : ((flag2 && Main.rand.Next(5) == 0) ? Lang.dialog(60) : ((flag4 && Main.rand.Next(5) == 0) ? Lang.dialog(61) : ((flag6 && Main.rand.Next(5) == 0) ? Lang.dialog(62) : ((flag6 && Main.rand.Next(5) == 0) ? Lang.dialog(63) : (Main.bloodMoon ? ((Main.rand.Next(2) != 0) ? Lang.dialog(65) : Lang.dialog(64)) : (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(66), 
					1 => Lang.dialog(67), 
					_ => Lang.dialog(68), 
				})))))))));
			}
			else if (type == 20)
			{
				result = (HasSpecialEventText("Dryad", out specialEventText) ? specialEventText : ((DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0) ? ((!DD2Event.DownedInvasionT2) ? Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier1", obj) : Language.GetTextValueWith("DryadSpecialText.AfterDD2Tier2", obj)) : ((!downedBoss2 && Main.rand.Next(3) == 0) ? ((!WorldGen.crimson) ? Lang.dialog(69) : Lang.dialog(332)) : ((flag3 && Main.rand.Next(6) == 0) ? Lang.dialog(70) : ((flag && Main.rand.Next(6) == 0) ? Lang.dialog(71) : ((flag5 && Main.rand.Next(6) == 0) ? Lang.dialog(72) : ((flag10 && Main.rand.Next(6) == 0) ? Lang.dialog(238) : (Main.bloodMoon ? (Main.rand.Next(4) switch
				{
					0 => Lang.dialog(73), 
					1 => Lang.dialog(74), 
					2 => Lang.dialog(75), 
					_ => Lang.dialog(76), 
				}) : (Main.rand.Next(5) switch
				{
					0 => (!WorldGen.crimson) ? Lang.dialog(77) : Lang.dialog(333), 
					1 => Lang.dialog(78), 
					2 => Lang.dialog(79), 
					3 => Lang.dialog(80), 
					_ => Lang.dialog(81), 
				})))))))));
			}
			else if (type == 37)
			{
				result = (Main.dayTime ? (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(82), 
					1 => Lang.dialog(83), 
					_ => Lang.dialog(84), 
				}) : ((Main.player[Main.myPlayer].statLifeMax < 300 || Main.player[Main.myPlayer].statDefense < 10) ? (Main.rand.Next(4) switch
				{
					0 => Lang.dialog(85), 
					1 => Lang.dialog(86), 
					2 => Lang.dialog(87), 
					_ => Lang.dialog(88), 
				}) : (Main.rand.Next(4) switch
				{
					0 => Lang.dialog(89), 
					1 => Lang.dialog(90), 
					2 => Lang.dialog(91), 
					_ => Lang.dialog(92), 
				})));
			}
			else if (type == 38)
			{
				result = (HasSpecialEventText("Demolitionist", out specialEventText) ? specialEventText : ((!downedBoss2 && Main.rand.Next(3) == 0) ? Lang.dialog(93) : (Main.bloodMoon ? (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(94), 
					1 => Lang.dialog(95), 
					_ => Lang.dialog(96), 
				}) : (((DD2Event.DownedInvasionT1 || DD2Event.Ongoing) && Main.rand.Next(5) == 0) ? Language.GetTextValueWith("DemolitionistSpecialText.AfterDD2Start", obj) : ((flag3 && Main.rand.Next(5) == 0) ? Lang.dialog(97) : ((flag3 && Main.rand.Next(5) == 0) ? Lang.dialog(98) : ((flag2 && Main.rand.Next(4) == 0) ? Lang.dialog(99) : ((flag4 && Main.rand.Next(4) == 0) ? Lang.dialog(100) : ((!Main.dayTime) ? (Main.rand.Next(4) switch
				{
					0 => Lang.dialog(101), 
					1 => Lang.dialog(102), 
					2 => Lang.dialog(103), 
					_ => Lang.dialog(104), 
				}) : (Main.rand.Next(5) switch
				{
					0 => Lang.dialog(105), 
					1 => Lang.dialog(106), 
					2 => Lang.dialog(107), 
					3 => Lang.dialog(108), 
					_ => Lang.dialog(109), 
				}))))))))));
			}
			else if (type == 54)
			{
				result = (HasSpecialEventText("Clothier", out specialEventText) ? specialEventText : ((!flag7 && Main.rand.Next(2) == 0) ? Lang.dialog(110) : ((flag10 && Main.rand.Next(6) == 0) ? Lang.dialog(237) : (Main.bloodMoon ? Lang.dialog(111) : ((flag2 && Main.rand.Next(4) == 0) ? Lang.dialog(112) : ((Main.player[Main.myPlayer].head == 24) ? Lang.dialog(113) : (Main.rand.Next(6) switch
				{
					0 => Lang.dialog(114), 
					1 => Lang.dialog(115), 
					2 => Lang.dialog(116), 
					3 => Lang.dialog(117), 
					4 => Lang.dialog(118), 
					_ => Lang.dialog(119), 
				})))))));
			}
			else if (type == 105)
			{
				result = Lang.dialog(120);
			}
			else if (type == 107)
			{
				if (homeless)
				{
					result = Main.rand.Next(5) switch
					{
						0 => Lang.dialog(121), 
						1 => Lang.dialog(122), 
						2 => Lang.dialog(123), 
						3 => Lang.dialog(124), 
						_ => Lang.dialog(125), 
					};
				}
				else if (HasSpecialEventText("GoblinTinkerer", out specialEventText))
				{
					result = specialEventText;
				}
				else if (flag7 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(126);
				}
				else if (flag15 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(309);
				}
				else
				{
					LocalizedText[] array2 = Language.FindAll(Lang.CreateDialogFilter("GoblinTinkererChatter.", obj));
					int num2 = Main.rand.Next(array2.Length + 5);
					result = ((num2 >= 5) ? array2[num2 - 5].FormatWith(obj) : ((!Main.dayTime) ? (num2 switch
					{
						0 => Lang.dialog(127), 
						1 => Lang.dialog(128), 
						2 => Lang.dialog(129), 
						3 => Lang.dialog(130), 
						_ => Lang.dialog(131), 
					}) : (num2 switch
					{
						0 => Lang.dialog(132), 
						1 => Lang.dialog(133), 
						2 => Lang.dialog(134), 
						3 => Lang.dialog(135), 
						_ => Lang.dialog(136), 
					})));
				}
			}
			else if (type == 106)
			{
				result = Lang.dialog(137);
			}
			else if (type == 108)
			{
				if (homeless)
				{
					int num3 = Main.rand.Next(3);
					if (num3 == 0)
					{
						result = Lang.dialog(138);
					}
					else if (num3 == 1 && !Main.player[Main.myPlayer].Male)
					{
						result = Lang.dialog(139);
					}
					else
					{
						switch (num3)
						{
						case 1:
							result = Lang.dialog(140);
							break;
						case 2:
							result = Lang.dialog(141);
							break;
						}
					}
				}
				else if (HasLuckTextForWizard(out specialEventText))
				{
					result = specialEventText;
				}
				else if (HasSpecialEventText("Wizard", out specialEventText))
				{
					result = specialEventText;
				}
				else if (DD2Event.DownedInvasionT1 && Main.rand.Next(6) == 0)
				{
					result = Language.GetTextValueWith("WizardSpecialText.AfterDD2Tier1", obj);
				}
				else if (Main.player[Main.myPlayer].Male && flag16 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(142);
				}
				else if (Main.player[Main.myPlayer].Male && flag6 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(143);
				}
				else if (Main.player[Main.myPlayer].Male && flag8 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(144);
				}
				else if (!Main.player[Main.myPlayer].Male && flag2 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(145);
				}
				else if (!Main.player[Main.myPlayer].Male && flag7 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(146);
				}
				else if (!Main.player[Main.myPlayer].Male && flag4 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(147);
				}
				else if (Main.dayTime)
				{
					result = Main.rand.Next(5) switch
					{
						0 => Lang.dialog(151), 
						1 => Lang.dialog(152), 
						2 => Lang.dialog(153), 
						3 => Lang.dialog(154), 
						_ => Lang.dialog(155), 
					};
				}
				else
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(148);
						break;
					case 1:
						result = Lang.dialog(149);
						break;
					case 2:
						result = Lang.dialog(150);
						break;
					}
				}
			}
			else if (type == 123)
			{
				result = Lang.dialog(156);
			}
			else if (type == 124)
			{
				if (homeless)
				{
					result = Main.rand.Next(4) switch
					{
						0 => Lang.dialog(157), 
						1 => Lang.dialog(158), 
						2 => Lang.dialog(159), 
						_ => Lang.dialog(160), 
					};
				}
				else if (HasSpecialEventText("Mechanic", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.bloodMoon)
				{
					result = Main.rand.Next(4) switch
					{
						0 => Lang.dialog(161), 
						1 => Lang.dialog(162), 
						2 => Lang.dialog(163), 
						_ => Lang.dialog(164), 
					};
				}
				else if (flag8 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(165);
				}
				else if (flag3 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(166);
				}
				else
				{
					LocalizedText[] array3 = Language.FindAll(Lang.CreateDialogFilter("MechanicChatter.", obj));
					int num4 = Main.rand.Next(3 + array3.Length);
					result = ((num4 >= 3) ? array3[num4 - 3].FormatWith(obj) : (num4 switch
					{
						0 => Lang.dialog(167), 
						1 => Lang.dialog(168), 
						_ => Lang.dialog(169), 
					}));
				}
			}
			else if (type == 22)
			{
				result = (HasSpecialEventText("Guide", out specialEventText) ? specialEventText : (Main.bloodMoon ? (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(170), 
					1 => Lang.dialog(171), 
					_ => Lang.dialog(172), 
				}) : ((LanternNight.LanternsUp && !downedMoonlord) ? Language.GetTextValue("GuideSpecialText.Lantern1") : ((LanternNight.LanternsUp && downedMoonlord) ? Language.GetTextValue("GuideSpecialText.Lantern2") : (Main.eclipse ? Language.GetTextValue("GuideSpecialText.Eclipse") : (Main.slimeRain ? Language.GetTextValue("GuideSpecialText.SlimeRain") : ((!Main.dayTime) ? Lang.dialog(173) : ((Main.hardMode && flag17 && Main.rand.Next(8) == 0) ? Language.GetTextValueWith("GuideChatter.Chatter_1", obj) : ((Main.hardMode && Main.rand.Next(8) == 0) ? Language.GetTextValue("GuideChatter.Chatter_2") : (Main.rand.Next(3) switch
				{
					0 => Lang.dialog(174), 
					1 => Lang.dialog(175), 
					_ => Lang.dialog(176), 
				}))))))))));
			}
			else if (type == 142)
			{
				int num5 = Main.rand.Next(3);
				if (HasSpecialEventText("Santa", out specialEventText))
				{
					result = specialEventText;
				}
				else
				{
					switch (num5)
					{
					case 0:
						result = Lang.dialog(224);
						break;
					case 1:
						result = Lang.dialog(225);
						break;
					case 2:
						result = Lang.dialog(226);
						break;
					}
				}
			}
			else if (type == 160)
			{
				int num6 = Main.rand.Next(6);
				if (HasSpecialEventText("Truffle", out specialEventText))
				{
					result = specialEventText;
				}
				else if (flag4 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(232);
				}
				else if (flag9 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(236);
				}
				else
				{
					switch (num6)
					{
					case 0:
						result = Lang.dialog(231);
						break;
					case 1:
						result = Lang.dialog(233);
						break;
					case 2:
						result = Lang.dialog(234);
						break;
					case 3:
						result = Lang.dialog(235);
						break;
					case 4:
						result = Lang.dialog(240);
						break;
					case 5:
						result = Lang.dialog(241);
						break;
					}
				}
			}
			else if (type == 178)
			{
				int num7 = Main.rand.Next(5);
				if (HasSpecialEventText("Steampunker", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.bloodMoon && Main.rand.Next(3) == 0)
				{
					result = Lang.dialog(245);
				}
				else if (flag13 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(246);
				}
				else if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(247);
				}
				else
				{
					switch (num7)
					{
					case 0:
						result = Lang.dialog(242);
						break;
					case 1:
						result = Lang.dialog(243);
						break;
					case 2:
						result = Lang.dialog(244);
						break;
					case 3:
						result = Lang.dialog(248);
						break;
					case 4:
						result = Lang.dialog(249);
						break;
					}
				}
			}
			else if (type == 207)
			{
				int num8 = Main.rand.Next(3);
				if (HasSpecialEventText("DyeTrader", out specialEventText))
				{
					result = specialEventText;
				}
				else if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(260);
				}
				else
				{
					switch (num8)
					{
					case 0:
						result = Lang.dialog(257);
						break;
					case 1:
						result = Lang.dialog(258);
						break;
					case 2:
						result = Lang.dialog(259);
						break;
					}
				}
			}
			else if (type == 208)
			{
				if (freeCake)
				{
					int num9 = Main.rand.Next(1, 4);
					result = Language.GetTextValueWith("PartyGirlSpecialText.Cake" + num9, obj);
				}
				else
				{
					int num10 = Main.rand.Next(7);
					if (HasSpecialEventText("PartyGirl", out specialEventText))
					{
						result = specialEventText;
					}
					else if (DD2Event.DownedInvasionT1 && Main.rand.Next(5) == 0)
					{
						result = Language.GetTextValueWith("PartyGirlSpecialText.AfterDD2Tier1", obj);
					}
					else if (Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
					{
						result = Lang.dialog(268);
					}
					else if (flag15 && Main.rand.Next(5) == 0)
					{
						result = Lang.dialog(310);
					}
					else
					{
						switch (num10)
						{
						case 0:
							result = Lang.dialog(265);
							break;
						case 1:
							result = Lang.dialog(266);
							break;
						case 2:
							result = Lang.dialog(267);
							break;
						case 3:
							result = Lang.dialog(269);
							break;
						case 4:
							result = Lang.dialog(270);
							break;
						case 5:
							result = Lang.dialog(271);
							break;
						case 6:
							result = Lang.dialog(272);
							break;
						}
					}
				}
			}
			else if (type == 209)
			{
				if (HasSpecialEventText("Cyborg", out specialEventText))
				{
					result = specialEventText;
				}
				else if (flag12 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(284);
				}
				else if (flag11 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(283);
				}
				else
				{
					LocalizedText[] array4 = Language.FindAll(Lang.CreateDialogFilter("CyborgChatter.", obj));
					int num11 = Main.rand.Next(5 + array4.Length);
					if (num11 >= 5)
					{
						result = array4[num11 - 5].FormatWith(obj);
					}
					else
					{
						switch (num11)
						{
						case 0:
							result = Lang.dialog(280);
							break;
						case 1:
							result = Lang.dialog(281);
							break;
						case 2:
							result = Lang.dialog(282);
							break;
						case 3:
							result = Lang.dialog(285);
							break;
						case 4:
							result = Lang.dialog(286);
							break;
						}
					}
				}
			}
			else if (type == 227)
			{
				int num12 = Main.rand.Next(5);
				if (HasSpecialEventText("Painter", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.hardMode && Main.rand.Next(7) == 0)
				{
					result = Lang.dialog(250);
				}
				else if (flag14 && Main.rand.Next(6) == 0)
				{
					result = Lang.dialog(251);
				}
				else
				{
					switch (num12)
					{
					case 0:
						result = Lang.dialog(252);
						break;
					case 1:
						result = Lang.dialog(253);
						break;
					case 2:
						result = Lang.dialog(254);
						break;
					case 3:
						result = Lang.dialog(255);
						break;
					case 4:
						result = Lang.dialog(256);
						break;
					}
				}
			}
			else if (type == 228)
			{
				int num13 = Main.rand.Next(4);
				if (HasSpecialEventText("WitchDoctor", out specialEventText))
				{
					result = specialEventText;
				}
				else if (flag2 && Main.rand.Next(4) == 0)
				{
					result = Lang.dialog(263);
				}
				else
				{
					switch (num13)
					{
					case 0:
						result = Lang.dialog(261);
						break;
					case 1:
						result = Lang.dialog(262);
						break;
					case 2:
						result = Lang.dialog(264);
						break;
					case 3:
						result = Language.GetTextValueWith("WitchDoctorSpecialText.AfterDD2Tier1", obj);
						break;
					}
				}
			}
			else if (type == 229)
			{
				LocalizedText[] array5 = Language.FindAll(Lang.CreateDialogFilter("PirateChatter.", obj));
				int num14 = Main.rand.Next(6 + array5.Length);
				if (num14 >= 6)
				{
					result = array5[num14 - 6].FormatWith(obj);
				}
				else if (HasSpecialEventText("Pirate", out specialEventText))
				{
					result = specialEventText;
				}
				else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(276);
				}
				else
				{
					switch (num14)
					{
					case 0:
						result = Lang.dialog(273);
						break;
					case 1:
						result = Lang.dialog(274);
						break;
					case 2:
						result = Lang.dialog(275);
						break;
					case 3:
						result = Lang.dialog(277);
						break;
					case 4:
						result = Lang.dialog(278);
						break;
					case 5:
						result = Lang.dialog(279);
						break;
					}
				}
			}
			else if (type == 354)
			{
				result = Lang.dialog(Main.rand.Next(315, 319));
			}
			else if (type == 353)
			{
				if (HasSpecialEventText("Stylist", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.bloodMoon)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(304);
						break;
					case 1:
						result = Lang.dialog(305);
						break;
					case 2:
						result = Lang.dialog(306);
						break;
					}
				}
				else if (Main.dayTime && Main.time < 16200.0 && Main.rand.Next(3) == 0)
				{
					result = Lang.dialog(311);
				}
				else if (Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
				{
					switch (Main.rand.Next(2))
					{
					case 0:
						result = Lang.dialog(293);
						break;
					case 1:
						result = Lang.dialog(300);
						break;
					}
				}
				else if (!Main.player[Main.myPlayer].Male && Main.rand.Next(3) == 0)
				{
					switch (Main.rand.Next(3))
					{
					case 0:
						result = Lang.dialog(291);
						break;
					case 1:
						result = Lang.dialog(292);
						break;
					case 2:
						result = Lang.dialog(312);
						break;
					}
				}
				else if (flag14 && flag7 && flag2 && flag3 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(307);
				}
				else if (flag14 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(302);
				}
				else if (flag6 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(303);
				}
				else if (flag13 && Main.rand.Next(5) == 0)
				{
					result = Lang.dialog(308);
				}
				else
				{
					LocalizedText[] array6 = Language.FindAll(Lang.CreateDialogFilter("StylistChatter.", obj));
					int num15 = ((Main.moonPhase < 3) ? 5 : 4);
					int num16 = Main.rand.Next(num15 + array6.Length);
					if (num16 >= num15)
					{
						result = array6[num16 - num15].FormatWith(obj);
					}
					else if (Main.moonPhase < 3)
					{
						switch (num16)
						{
						case 0:
							result = Lang.dialog(287);
							break;
						case 1:
							result = Lang.dialog(288);
							break;
						case 2:
							result = Lang.dialog(289);
							break;
						case 3:
							result = Lang.dialog(290);
							break;
						case 4:
							result = Lang.dialog(294);
							break;
						}
					}
					else if (Main.moonPhase < 6)
					{
						switch (num16)
						{
						case 0:
							result = Lang.dialog(295);
							break;
						case 1:
							result = Lang.dialog(296);
							break;
						case 2:
							result = Lang.dialog(297);
							break;
						case 3:
							result = Lang.dialog(298);
							break;
						}
					}
					else
					{
						switch (num16)
						{
						case 0:
							result = Lang.dialog(299);
							break;
						case 1:
							result = Lang.dialog(301);
							break;
						case 2:
							result = Lang.dialog(313);
							break;
						case 3:
							result = Lang.dialog(314);
							break;
						}
					}
				}
			}
			else if (type == 368)
			{
				result = (HasSpecialEventText("TravellingMerchant", out specialEventText) ? specialEventText : ((flag16 && Main.rand.Next(5) == 0) ? Lang.dialog(319) : ((flag && Main.rand.Next(5) == 0) ? Lang.dialog(320) : ((!flag9 || Main.rand.Next(5) != 0) ? Lang.dialog(Main.rand.Next(322, 331)) : Lang.dialog(321)))));
			}
			else if (type == 376)
			{
				result = Lang.dialog(Main.rand.Next(353, 356));
			}
			else if (type == 369)
			{
				result = ((Main.rand.Next(5) == 0 && Main.LocalPlayer.anglerQuestsFinished > 1) ? Lang.AnglerQuestCountChat(this) : (HasSpecialEventText("Angler", out specialEventText) ? specialEventText : (Main.bloodMoon ? ((Main.rand.Next(3) == 0) ? Language.SelectRandom(Lang.CreateDialogFilter("AnglerSpecialText.BloodMoonFishing")).FormatWith(obj) : (Main.anglerQuestFinished ? Lang.dialog(Main.rand.Next(350, 353)) : Lang.dialog(Main.rand.Next(348, 350)))) : ((!Main.anglerQuestFinished) ? Lang.dialog(Main.rand.Next(334, 338)) : ((!flag4 || Main.rand.Next(5) != 0) ? Language.SelectRandom(Lang.CreateDialogFilter("AnglerChatter.", obj)).FormatWith(obj) : Lang.dialog(347))))));
			}
			else if (type == 453)
			{
				result = ((!HasSpecialEventText("SkeletonMerchant", out specialEventText)) ? Lang.dialog(Main.rand.Next(356, 364)) : specialEventText);
			}
			else if (type == 441)
			{
				result = (HasSpecialEventText("TaxCollector", out specialEventText) ? specialEventText : ((Main.rand.Next(6) == 0 && flag4) ? Lang.dialog(371) : ((Main.rand.Next(6) == 0 && flag3) ? Lang.dialog(372) : ((Main.rand.Next(6) == 0 && flag6) ? Lang.dialog(373) : ((!(Main.rand.Next(6) == 0 && flag)) ? Lang.dialog(Main.rand.Next(364, 370)) : Lang.dialog(374))))));
			}
			else if (type == 579)
			{
				result = Language.GetTextValue("BartenderSpecialText.FirstMeeting");
			}
			else if (type == 550)
			{
				result = ((!HasSpecialEventText("Bartender", out specialEventText)) ? Lang.BartenderChat(this) : specialEventText);
			}
			else if (type == 589)
			{
				result = ((Main.rand.Next(2) != 0) ? Language.GetTextValue("GolferSpecialText.FirstMeeting2") : Language.GetTextValue("GolferSpecialText.FirstMeeting1"));
			}
			else if (type == 588)
			{
				if (Main.rand.Next(3) != 0 && HasSpecialEventText("Golfer", out specialEventText))
				{
					result = specialEventText;
				}
				else if (Main.rand.Next(3) == 0)
				{
					string str = ((Main.LocalPlayer.golferScoreAccumulated >= 2000) ? "GolferQuestsChatterMaster" : ((Main.LocalPlayer.golferScoreAccumulated >= 1000) ? "GolferQuestsChatterJourneyman" : ((Main.LocalPlayer.golferScoreAccumulated < 500) ? "GolferQuestsChatterBeginner" : "GolferQuestsChatterApprentice")));
					result = Language.SelectRandom(Lang.CreateDialogFilter(str + ".")).FormatWith(obj);
				}
				else
				{
					result = Lang.GolferChat(this);
				}
			}
			else if (type == 633)
			{
				result = ((ShouldBestiaryGirlBeLycantrope() || !HasSpecialEventText("BestiaryGirl", out specialEventText)) ? Lang.BestiaryGirlChat(this) : specialEventText);
			}
			else if (type == 637)
			{
				result = ((!HasSpecialEventText("Cat", out specialEventText)) ? Lang.CatChat(this) : specialEventText);
			}
			else if (type == 638)
			{
				result = ((!HasSpecialEventText("Dog", out specialEventText)) ? Lang.DogChat(this) : specialEventText);
			}
			else if (type == 656)
			{
				result = ((!HasSpecialEventText("Bunny", out specialEventText)) ? Lang.BunnyChat(this) : specialEventText);
			}
			return result;
		}

		public object Clone()
		{
			return MemberwiseClone();
		}

		public bool HasLuckTextForWizard(out string specialEventText)
		{
			specialEventText = null;
			object obj = Lang.CreateDialogSubstitutionObject(this);
			if (Main.rand.Next(3) == 0)
			{
				float normalizedLuck = Main.player[Main.myPlayer].NormalizedLuck;
				if (normalizedLuck == 0f)
				{
					return false;
				}
				string text = null;
				text = ((normalizedLuck < -0.6f) ? "WizardSpecialText.LuckIsCursed" : ((normalizedLuck < -0.4f) ? "WizardSpecialText.LuckIsTerrible" : ((normalizedLuck < -0.2f) ? "WizardSpecialText.LuckIsPoor" : ((normalizedLuck < 0f) ? "WizardSpecialText.LuckIsBad" : ((normalizedLuck < 0.25f) ? "WizardSpecialText.LuckIsGood" : ((normalizedLuck < 0.5f) ? "WizardSpecialText.LuckIsGreat" : ((!(normalizedLuck < 0.75f)) ? "WizardSpecialText.LuckIsGodly" : "WizardSpecialText.LuckIsAmazing")))))));
				specialEventText = Language.SelectRandom(Lang.CreateDialogFilter(text)).FormatWith(obj);
				return true;
			}
			return false;
		}

		public bool HasSpecialEventText(string specialTextCategoryKey, out string specialEventText)
		{
			specialEventText = null;
			object substitutes = Lang.CreateDialogSubstitutionObject(this);
			if (Main.LocalPlayer.ZoneGraveyard && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Graveyard", substitutes, specialEventText))
			{
				return true;
			}
			if (BirthdayParty.PartyIsUp && Main.rand.Next(3) == 0 && !NPCID.Sets.HasNoPartyText[type] && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Party", substitutes, specialEventText))
			{
				return true;
			}
			if (Main.raining && !Main.IsItStorming && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Rain", substitutes, specialEventText))
			{
				return true;
			}
			if (Main.IsItAHappyWindyDay && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Windy", substitutes, specialEventText))
			{
				return true;
			}
			if (Main.IsItStorming && Main.rand.Next(3) == 0 && GetSpecialEventTextIfNotEmpty(specialTextCategoryKey + "SpecialText.Storm", substitutes, specialEventText))
			{
				return true;
			}
			return false;
		}

		public bool GetSpecialEventTextIfNotEmpty(string specialTextKey, object substitutes, string specialEventText)
		{
			LocalizedText localizedText = Language.SelectRandom(Lang.CreateDialogFilter(specialTextKey));
			if (localizedText != LocalizedText.Empty)
			{
				specialEventText = localizedText.FormatWith(substitutes);
				return true;
			}
			return false;
		}

		public void CheckDrowning()
		{
			bool flag = Collision.DrownCollision(position, width, height, 1f);
			if (Main.netMode != 1)
			{
				if (flag)
				{
					if (++breathCounter >= 7)
					{
						breathCounter = 0;
						breath--;
						if (breath <= 0)
						{
							friendlyRegen = 0;
							breath = 0;
							life -= 2;
							if (life % 24 < 2)
							{
								netUpdate = true;
							}
							if (life <= 0)
							{
								life = 1;
								StrikeNPCNoInteraction(2, 0f, 0);
								if (Main.netMode != 0)
								{
									NetMessage.SendData(28, -1, -1, null, whoAmI, 2f);
								}
							}
						}
					}
				}
				else
				{
					breath += 3;
					if (breath > 200)
					{
						breath = 200;
					}
					breathCounter = 0;
				}
			}
			if (flag && Main.rand.Next(20) == 0 && !lavaWet && !honeyWet)
			{
				int num = 0;
				int num2 = 0;
				if (type == 369)
				{
					num2 = 8;
				}
				Dust.NewDust(new Vector2(position.X + (float)((10 + num) * direction), position.Y + (float)num2 + 4f), width - 8, 8, 34, 0f, 0f, 0, default(Color), 1.2f);
			}
		}

		public void TryPortalJumping()
		{
			if (townNPC && Main.netMode != 1)
			{
				PortalHelper.TryGoingThroughPortals(this);
			}
		}

		public static void GetMeleeCollisionData(Rectangle victimHitbox, int enemyIndex, int specialHitSetter, float damageMultiplier, Rectangle npcRect)
		{
			NPC nPC = Main.npc[enemyIndex];
			if (((nPC.type >= 430 && nPC.type <= 436) || nPC.type == 591) && nPC.ai[2] > 5f)
			{
				int num = 34;
				if (nPC.spriteDirection < 0)
				{
					npcRect.X -= num;
					npcRect.Width += num;
				}
				else
				{
					npcRect.Width += num;
				}
				damageMultiplier *= 1.25f;
			}
			else if (nPC.type >= 494 && nPC.type <= 495 && nPC.ai[2] > 5f)
			{
				int num2 = 18;
				if (nPC.spriteDirection < 0)
				{
					npcRect.X -= num2;
					npcRect.Width += num2;
				}
				else
				{
					npcRect.Width += num2;
				}
				damageMultiplier *= 1.25f;
			}
			else if (nPC.type == 460)
			{
				Rectangle rectangle = new Rectangle(0, 0, 30, 14);
				rectangle.X = (int)nPC.Center.X;
				if (nPC.direction < 0)
				{
					rectangle.X -= rectangle.Width;
				}
				rectangle.Y = (int)nPC.position.Y + nPC.height - 20;
				if (victimHitbox.Intersects(rectangle))
				{
					npcRect = rectangle;
					damageMultiplier *= 1.35f;
				}
			}
			else if (nPC.type == 417 && nPC.ai[0] == 6f && nPC.ai[3] > 0f && nPC.ai[3] < 4f)
			{
				Rectangle rectangle2 = Utils.CenteredRectangle(nPC.Center, new Vector2(100f));
				if (victimHitbox.Intersects(rectangle2))
				{
					npcRect = rectangle2;
					damageMultiplier *= 1.35f;
				}
			}
			else if (nPC.type == 466)
			{
				Rectangle rectangle3 = new Rectangle(0, 0, 30, 8);
				rectangle3.X = (int)nPC.Center.X;
				if (nPC.direction < 0)
				{
					rectangle3.X -= rectangle3.Width;
				}
				rectangle3.Y = (int)nPC.position.Y + nPC.height - 32;
				if (victimHitbox.Intersects(rectangle3))
				{
					npcRect = rectangle3;
					damageMultiplier *= 1.75f;
				}
			}
			else if (nPC.type == 576 || nPC.type == 577)
			{
				NPC nPC2 = nPC;
				bool flag = true;
				int y = nPC2.frame.Y;
				int num3 = 0;
				int num4 = 0;
				Rectangle rectangle4 = new Rectangle(0, 0, 30, 8);
				switch (y)
				{
				case 15:
					specialHitSetter = 2;
					rectangle4.Width = 120;
					rectangle4.Height = 30;
					num4 = 24;
					break;
				case 16:
					specialHitSetter = 2;
					rectangle4.Width = 120;
					rectangle4.Height = 60;
					num3 = 10;
					break;
				case 17:
					specialHitSetter = 2;
					rectangle4.Width = 100;
					rectangle4.Height = 90;
					num3 = 50;
					break;
				case 18:
					specialHitSetter = 2;
					rectangle4.Width = 100;
					rectangle4.Height = 50;
					num3 = 90;
					num4 = 10;
					break;
				default:
					flag = false;
					break;
				}
				if (flag)
				{
					rectangle4.X = (int)nPC2.Center.X - num3 * nPC2.direction;
					if (nPC2.direction < 0)
					{
						rectangle4.X -= rectangle4.Width;
					}
					rectangle4.Y = (int)nPC2.Center.Y - rectangle4.Height + num4;
					if (victimHitbox.Intersects(rectangle4))
					{
						npcRect = rectangle4;
						damageMultiplier *= 1.75f;
					}
				}
			}
			else if ((nPC.type == 552 || nPC.type == 553 || nPC.type == 554) && nPC.ai[0] > 0f && nPC.ai[0] < 24f)
			{
				Rectangle rectangle5 = new Rectangle(0, 0, 34, 14);
				rectangle5.X = (int)nPC.Center.X;
				if (nPC.direction < 0)
				{
					rectangle5.X -= rectangle5.Width;
				}
				rectangle5.Y = (int)nPC.position.Y + nPC.height - 20;
				if (victimHitbox.Intersects(rectangle5))
				{
					npcRect = rectangle5;
					damageMultiplier *= 1.35f;
				}
			}
		}

		public string GetBestiaryCreditId()
		{
			return ContentSamples.NpcBestiaryCreditIdsByNpcNetIds[netID];
		}

		public override string ToString()
		{
			return "name:" + TypeName + ", active:" + active.ToString() + ", whoAmI:" + whoAmI;
		}
	}
}
